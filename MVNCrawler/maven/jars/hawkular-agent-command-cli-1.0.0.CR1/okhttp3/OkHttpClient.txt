Compiled from "OkHttpClient.java"
public class okhttp3.OkHttpClient implements java.lang.Cloneable,okhttp3.Call$Factory {
  private static final java.util.List<okhttp3.Protocol> DEFAULT_PROTOCOLS;

  private static final java.util.List<okhttp3.ConnectionSpec> DEFAULT_CONNECTION_SPECS;

  final okhttp3.Dispatcher dispatcher;

  final java.net.Proxy proxy;

  final java.util.List<okhttp3.Protocol> protocols;

  final java.util.List<okhttp3.ConnectionSpec> connectionSpecs;

  final java.util.List<okhttp3.Interceptor> interceptors;

  final java.util.List<okhttp3.Interceptor> networkInterceptors;

  final java.net.ProxySelector proxySelector;

  final okhttp3.CookieJar cookieJar;

  final okhttp3.Cache cache;

  final okhttp3.internal.cache.InternalCache internalCache;

  final javax.net.SocketFactory socketFactory;

  final javax.net.ssl.SSLSocketFactory sslSocketFactory;

  final okhttp3.internal.tls.CertificateChainCleaner certificateChainCleaner;

  final javax.net.ssl.HostnameVerifier hostnameVerifier;

  final okhttp3.CertificatePinner certificatePinner;

  final okhttp3.Authenticator proxyAuthenticator;

  final okhttp3.Authenticator authenticator;

  final okhttp3.ConnectionPool connectionPool;

  final okhttp3.Dns dns;

  final boolean followSslRedirects;

  final boolean followRedirects;

  final boolean retryOnConnectionFailure;

  final int connectTimeout;

  final int readTimeout;

  final int writeTimeout;

  public okhttp3.OkHttpClient();
    Code:
       0: aload_0
       1: new           #4                  // class okhttp3/OkHttpClient$Builder
       4: dup
       5: invokespecial #5                  // Method okhttp3/OkHttpClient$Builder."<init>":()V
       8: invokespecial #1                  // Method "<init>":(Lokhttp3/OkHttpClient$Builder;)V
      11: return

  private okhttp3.OkHttpClient(okhttp3.OkHttpClient$Builder);
    Code:
       0: aload_0
       1: invokespecial #6                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: getfield      #7                  // Field okhttp3/OkHttpClient$Builder.dispatcher:Lokhttp3/Dispatcher;
       9: putfield      #8                  // Field dispatcher:Lokhttp3/Dispatcher;
      12: aload_0
      13: aload_1
      14: getfield      #9                  // Field okhttp3/OkHttpClient$Builder.proxy:Ljava/net/Proxy;
      17: putfield      #10                 // Field proxy:Ljava/net/Proxy;
      20: aload_0
      21: aload_1
      22: getfield      #11                 // Field okhttp3/OkHttpClient$Builder.protocols:Ljava/util/List;
      25: putfield      #12                 // Field protocols:Ljava/util/List;
      28: aload_0
      29: aload_1
      30: getfield      #13                 // Field okhttp3/OkHttpClient$Builder.connectionSpecs:Ljava/util/List;
      33: putfield      #14                 // Field connectionSpecs:Ljava/util/List;
      36: aload_0
      37: aload_1
      38: getfield      #15                 // Field okhttp3/OkHttpClient$Builder.interceptors:Ljava/util/List;
      41: invokestatic  #16                 // Method okhttp3/internal/Util.immutableList:(Ljava/util/List;)Ljava/util/List;
      44: putfield      #17                 // Field interceptors:Ljava/util/List;
      47: aload_0
      48: aload_1
      49: getfield      #18                 // Field okhttp3/OkHttpClient$Builder.networkInterceptors:Ljava/util/List;
      52: invokestatic  #16                 // Method okhttp3/internal/Util.immutableList:(Ljava/util/List;)Ljava/util/List;
      55: putfield      #19                 // Field networkInterceptors:Ljava/util/List;
      58: aload_0
      59: aload_1
      60: getfield      #20                 // Field okhttp3/OkHttpClient$Builder.proxySelector:Ljava/net/ProxySelector;
      63: putfield      #21                 // Field proxySelector:Ljava/net/ProxySelector;
      66: aload_0
      67: aload_1
      68: getfield      #22                 // Field okhttp3/OkHttpClient$Builder.cookieJar:Lokhttp3/CookieJar;
      71: putfield      #23                 // Field cookieJar:Lokhttp3/CookieJar;
      74: aload_0
      75: aload_1
      76: getfield      #24                 // Field okhttp3/OkHttpClient$Builder.cache:Lokhttp3/Cache;
      79: putfield      #25                 // Field cache:Lokhttp3/Cache;
      82: aload_0
      83: aload_1
      84: getfield      #26                 // Field okhttp3/OkHttpClient$Builder.internalCache:Lokhttp3/internal/cache/InternalCache;
      87: putfield      #27                 // Field internalCache:Lokhttp3/internal/cache/InternalCache;
      90: aload_0
      91: aload_1
      92: getfield      #28                 // Field okhttp3/OkHttpClient$Builder.socketFactory:Ljavax/net/SocketFactory;
      95: putfield      #29                 // Field socketFactory:Ljavax/net/SocketFactory;
      98: iconst_0
      99: istore_2
     100: aload_0
     101: getfield      #14                 // Field connectionSpecs:Ljava/util/List;
     104: invokeinterface #30,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
     109: astore_3
     110: aload_3
     111: invokeinterface #31,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     116: ifeq          151
     119: aload_3
     120: invokeinterface #32,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     125: checkcast     #33                 // class okhttp3/ConnectionSpec
     128: astore        4
     130: iload_2
     131: ifne          142
     134: aload         4
     136: invokevirtual #34                 // Method okhttp3/ConnectionSpec.isTls:()Z
     139: ifeq          146
     142: iconst_1
     143: goto          147
     146: iconst_0
     147: istore_2
     148: goto          110
     151: aload_1
     152: getfield      #35                 // Field okhttp3/OkHttpClient$Builder.sslSocketFactory:Ljavax/net/ssl/SSLSocketFactory;
     155: ifnonnull     162
     158: iload_2
     159: ifne          181
     162: aload_0
     163: aload_1
     164: getfield      #35                 // Field okhttp3/OkHttpClient$Builder.sslSocketFactory:Ljavax/net/ssl/SSLSocketFactory;
     167: putfield      #36                 // Field sslSocketFactory:Ljavax/net/ssl/SSLSocketFactory;
     170: aload_0
     171: aload_1
     172: getfield      #37                 // Field okhttp3/OkHttpClient$Builder.certificateChainCleaner:Lokhttp3/internal/tls/CertificateChainCleaner;
     175: putfield      #38                 // Field certificateChainCleaner:Lokhttp3/internal/tls/CertificateChainCleaner;
     178: goto          203
     181: aload_0
     182: invokespecial #39                 // Method systemDefaultTrustManager:()Ljavax/net/ssl/X509TrustManager;
     185: astore_3
     186: aload_0
     187: aload_0
     188: aload_3
     189: invokespecial #40                 // Method systemDefaultSslSocketFactory:(Ljavax/net/ssl/X509TrustManager;)Ljavax/net/ssl/SSLSocketFactory;
     192: putfield      #36                 // Field sslSocketFactory:Ljavax/net/ssl/SSLSocketFactory;
     195: aload_0
     196: aload_3
     197: invokestatic  #41                 // Method okhttp3/internal/tls/CertificateChainCleaner.get:(Ljavax/net/ssl/X509TrustManager;)Lokhttp3/internal/tls/CertificateChainCleaner;
     200: putfield      #38                 // Field certificateChainCleaner:Lokhttp3/internal/tls/CertificateChainCleaner;
     203: aload_0
     204: aload_1
     205: getfield      #42                 // Field okhttp3/OkHttpClient$Builder.hostnameVerifier:Ljavax/net/ssl/HostnameVerifier;
     208: putfield      #43                 // Field hostnameVerifier:Ljavax/net/ssl/HostnameVerifier;
     211: aload_0
     212: aload_1
     213: getfield      #44                 // Field okhttp3/OkHttpClient$Builder.certificatePinner:Lokhttp3/CertificatePinner;
     216: aload_0
     217: getfield      #38                 // Field certificateChainCleaner:Lokhttp3/internal/tls/CertificateChainCleaner;
     220: invokevirtual #45                 // Method okhttp3/CertificatePinner.withCertificateChainCleaner:(Lokhttp3/internal/tls/CertificateChainCleaner;)Lokhttp3/CertificatePinner;
     223: putfield      #46                 // Field certificatePinner:Lokhttp3/CertificatePinner;
     226: aload_0
     227: aload_1
     228: getfield      #47                 // Field okhttp3/OkHttpClient$Builder.proxyAuthenticator:Lokhttp3/Authenticator;
     231: putfield      #48                 // Field proxyAuthenticator:Lokhttp3/Authenticator;
     234: aload_0
     235: aload_1
     236: getfield      #49                 // Field okhttp3/OkHttpClient$Builder.authenticator:Lokhttp3/Authenticator;
     239: putfield      #50                 // Field authenticator:Lokhttp3/Authenticator;
     242: aload_0
     243: aload_1
     244: getfield      #51                 // Field okhttp3/OkHttpClient$Builder.connectionPool:Lokhttp3/ConnectionPool;
     247: putfield      #52                 // Field connectionPool:Lokhttp3/ConnectionPool;
     250: aload_0
     251: aload_1
     252: getfield      #53                 // Field okhttp3/OkHttpClient$Builder.dns:Lokhttp3/Dns;
     255: putfield      #54                 // Field dns:Lokhttp3/Dns;
     258: aload_0
     259: aload_1
     260: getfield      #55                 // Field okhttp3/OkHttpClient$Builder.followSslRedirects:Z
     263: putfield      #56                 // Field followSslRedirects:Z
     266: aload_0
     267: aload_1
     268: getfield      #57                 // Field okhttp3/OkHttpClient$Builder.followRedirects:Z
     271: putfield      #58                 // Field followRedirects:Z
     274: aload_0
     275: aload_1
     276: getfield      #59                 // Field okhttp3/OkHttpClient$Builder.retryOnConnectionFailure:Z
     279: putfield      #60                 // Field retryOnConnectionFailure:Z
     282: aload_0
     283: aload_1
     284: getfield      #61                 // Field okhttp3/OkHttpClient$Builder.connectTimeout:I
     287: putfield      #62                 // Field connectTimeout:I
     290: aload_0
     291: aload_1
     292: getfield      #63                 // Field okhttp3/OkHttpClient$Builder.readTimeout:I
     295: putfield      #64                 // Field readTimeout:I
     298: aload_0
     299: aload_1
     300: getfield      #65                 // Field okhttp3/OkHttpClient$Builder.writeTimeout:I
     303: putfield      #66                 // Field writeTimeout:I
     306: return

  private javax.net.ssl.X509TrustManager systemDefaultTrustManager();
    Code:
       0: invokestatic  #67                 // Method javax/net/ssl/TrustManagerFactory.getDefaultAlgorithm:()Ljava/lang/String;
       3: invokestatic  #68                 // Method javax/net/ssl/TrustManagerFactory.getInstance:(Ljava/lang/String;)Ljavax/net/ssl/TrustManagerFactory;
       6: astore_1
       7: aload_1
       8: aconst_null
       9: checkcast     #69                 // class java/security/KeyStore
      12: invokevirtual #70                 // Method javax/net/ssl/TrustManagerFactory.init:(Ljava/security/KeyStore;)V
      15: aload_1
      16: invokevirtual #71                 // Method javax/net/ssl/TrustManagerFactory.getTrustManagers:()[Ljavax/net/ssl/TrustManager;
      19: astore_2
      20: aload_2
      21: arraylength
      22: iconst_1
      23: if_icmpne     35
      26: aload_2
      27: iconst_0
      28: aaload
      29: instanceof    #72                 // class javax/net/ssl/X509TrustManager
      32: ifne          65
      35: new           #73                 // class java/lang/IllegalStateException
      38: dup
      39: new           #74                 // class java/lang/StringBuilder
      42: dup
      43: invokespecial #75                 // Method java/lang/StringBuilder."<init>":()V
      46: ldc           #76                 // String Unexpected default trust managers:
      48: invokevirtual #77                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      51: aload_2
      52: invokestatic  #78                 // Method java/util/Arrays.toString:([Ljava/lang/Object;)Ljava/lang/String;
      55: invokevirtual #77                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      58: invokevirtual #79                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      61: invokespecial #80                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      64: athrow
      65: aload_2
      66: iconst_0
      67: aaload
      68: checkcast     #72                 // class javax/net/ssl/X509TrustManager
      71: areturn
      72: astore_1
      73: new           #82                 // class java/lang/AssertionError
      76: dup
      77: invokespecial #83                 // Method java/lang/AssertionError."<init>":()V
      80: athrow
    Exception table:
       from    to  target type
           0    71    72   Class java/security/GeneralSecurityException

  private javax.net.ssl.SSLSocketFactory systemDefaultSslSocketFactory(javax.net.ssl.X509TrustManager);
    Code:
       0: ldc           #84                 // String TLS
       2: invokestatic  #85                 // Method javax/net/ssl/SSLContext.getInstance:(Ljava/lang/String;)Ljavax/net/ssl/SSLContext;
       5: astore_2
       6: aload_2
       7: aconst_null
       8: iconst_1
       9: anewarray     #86                 // class javax/net/ssl/TrustManager
      12: dup
      13: iconst_0
      14: aload_1
      15: aastore
      16: aconst_null
      17: invokevirtual #87                 // Method javax/net/ssl/SSLContext.init:([Ljavax/net/ssl/KeyManager;[Ljavax/net/ssl/TrustManager;Ljava/security/SecureRandom;)V
      20: aload_2
      21: invokevirtual #88                 // Method javax/net/ssl/SSLContext.getSocketFactory:()Ljavax/net/ssl/SSLSocketFactory;
      24: areturn
      25: astore_2
      26: new           #82                 // class java/lang/AssertionError
      29: dup
      30: invokespecial #83                 // Method java/lang/AssertionError."<init>":()V
      33: athrow
    Exception table:
       from    to  target type
           0    24    25   Class java/security/GeneralSecurityException

  public int connectTimeoutMillis();
    Code:
       0: aload_0
       1: getfield      #62                 // Field connectTimeout:I
       4: ireturn

  public int readTimeoutMillis();
    Code:
       0: aload_0
       1: getfield      #64                 // Field readTimeout:I
       4: ireturn

  public int writeTimeoutMillis();
    Code:
       0: aload_0
       1: getfield      #66                 // Field writeTimeout:I
       4: ireturn

  public java.net.Proxy proxy();
    Code:
       0: aload_0
       1: getfield      #10                 // Field proxy:Ljava/net/Proxy;
       4: areturn

  public java.net.ProxySelector proxySelector();
    Code:
       0: aload_0
       1: getfield      #21                 // Field proxySelector:Ljava/net/ProxySelector;
       4: areturn

  public okhttp3.CookieJar cookieJar();
    Code:
       0: aload_0
       1: getfield      #23                 // Field cookieJar:Lokhttp3/CookieJar;
       4: areturn

  public okhttp3.Cache cache();
    Code:
       0: aload_0
       1: getfield      #25                 // Field cache:Lokhttp3/Cache;
       4: areturn

  okhttp3.internal.cache.InternalCache internalCache();
    Code:
       0: aload_0
       1: getfield      #25                 // Field cache:Lokhttp3/Cache;
       4: ifnull        17
       7: aload_0
       8: getfield      #25                 // Field cache:Lokhttp3/Cache;
      11: getfield      #89                 // Field okhttp3/Cache.internalCache:Lokhttp3/internal/cache/InternalCache;
      14: goto          21
      17: aload_0
      18: getfield      #27                 // Field internalCache:Lokhttp3/internal/cache/InternalCache;
      21: areturn

  public okhttp3.Dns dns();
    Code:
       0: aload_0
       1: getfield      #54                 // Field dns:Lokhttp3/Dns;
       4: areturn

  public javax.net.SocketFactory socketFactory();
    Code:
       0: aload_0
       1: getfield      #29                 // Field socketFactory:Ljavax/net/SocketFactory;
       4: areturn

  public javax.net.ssl.SSLSocketFactory sslSocketFactory();
    Code:
       0: aload_0
       1: getfield      #36                 // Field sslSocketFactory:Ljavax/net/ssl/SSLSocketFactory;
       4: areturn

  public javax.net.ssl.HostnameVerifier hostnameVerifier();
    Code:
       0: aload_0
       1: getfield      #43                 // Field hostnameVerifier:Ljavax/net/ssl/HostnameVerifier;
       4: areturn

  public okhttp3.CertificatePinner certificatePinner();
    Code:
       0: aload_0
       1: getfield      #46                 // Field certificatePinner:Lokhttp3/CertificatePinner;
       4: areturn

  public okhttp3.Authenticator authenticator();
    Code:
       0: aload_0
       1: getfield      #50                 // Field authenticator:Lokhttp3/Authenticator;
       4: areturn

  public okhttp3.Authenticator proxyAuthenticator();
    Code:
       0: aload_0
       1: getfield      #48                 // Field proxyAuthenticator:Lokhttp3/Authenticator;
       4: areturn

  public okhttp3.ConnectionPool connectionPool();
    Code:
       0: aload_0
       1: getfield      #52                 // Field connectionPool:Lokhttp3/ConnectionPool;
       4: areturn

  public boolean followSslRedirects();
    Code:
       0: aload_0
       1: getfield      #56                 // Field followSslRedirects:Z
       4: ireturn

  public boolean followRedirects();
    Code:
       0: aload_0
       1: getfield      #58                 // Field followRedirects:Z
       4: ireturn

  public boolean retryOnConnectionFailure();
    Code:
       0: aload_0
       1: getfield      #60                 // Field retryOnConnectionFailure:Z
       4: ireturn

  public okhttp3.Dispatcher dispatcher();
    Code:
       0: aload_0
       1: getfield      #8                  // Field dispatcher:Lokhttp3/Dispatcher;
       4: areturn

  public java.util.List<okhttp3.Protocol> protocols();
    Code:
       0: aload_0
       1: getfield      #12                 // Field protocols:Ljava/util/List;
       4: areturn

  public java.util.List<okhttp3.ConnectionSpec> connectionSpecs();
    Code:
       0: aload_0
       1: getfield      #14                 // Field connectionSpecs:Ljava/util/List;
       4: areturn

  public java.util.List<okhttp3.Interceptor> interceptors();
    Code:
       0: aload_0
       1: getfield      #17                 // Field interceptors:Ljava/util/List;
       4: areturn

  public java.util.List<okhttp3.Interceptor> networkInterceptors();
    Code:
       0: aload_0
       1: getfield      #19                 // Field networkInterceptors:Ljava/util/List;
       4: areturn

  public okhttp3.Call newCall(okhttp3.Request);
    Code:
       0: new           #90                 // class okhttp3/RealCall
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #91                 // Method okhttp3/RealCall."<init>":(Lokhttp3/OkHttpClient;Lokhttp3/Request;)V
       9: areturn

  public okhttp3.OkHttpClient$Builder newBuilder();
    Code:
       0: new           #4                  // class okhttp3/OkHttpClient$Builder
       3: dup
       4: aload_0
       5: invokespecial #92                 // Method okhttp3/OkHttpClient$Builder."<init>":(Lokhttp3/OkHttpClient;)V
       8: areturn

  static java.util.List access$000();
    Code:
       0: getstatic     #3                  // Field DEFAULT_PROTOCOLS:Ljava/util/List;
       3: areturn

  static java.util.List access$100();
    Code:
       0: getstatic     #2                  // Field DEFAULT_CONNECTION_SPECS:Ljava/util/List;
       3: areturn

  okhttp3.OkHttpClient(okhttp3.OkHttpClient$Builder, okhttp3.OkHttpClient$1);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method "<init>":(Lokhttp3/OkHttpClient$Builder;)V
       5: return

  static {};
    Code:
       0: iconst_3
       1: anewarray     #93                 // class okhttp3/Protocol
       4: dup
       5: iconst_0
       6: getstatic     #94                 // Field okhttp3/Protocol.HTTP_2:Lokhttp3/Protocol;
       9: aastore
      10: dup
      11: iconst_1
      12: getstatic     #95                 // Field okhttp3/Protocol.SPDY_3:Lokhttp3/Protocol;
      15: aastore
      16: dup
      17: iconst_2
      18: getstatic     #96                 // Field okhttp3/Protocol.HTTP_1_1:Lokhttp3/Protocol;
      21: aastore
      22: invokestatic  #97                 // Method okhttp3/internal/Util.immutableList:([Ljava/lang/Object;)Ljava/util/List;
      25: putstatic     #3                  // Field DEFAULT_PROTOCOLS:Ljava/util/List;
      28: iconst_3
      29: anewarray     #33                 // class okhttp3/ConnectionSpec
      32: dup
      33: iconst_0
      34: getstatic     #98                 // Field okhttp3/ConnectionSpec.MODERN_TLS:Lokhttp3/ConnectionSpec;
      37: aastore
      38: dup
      39: iconst_1
      40: getstatic     #99                 // Field okhttp3/ConnectionSpec.COMPATIBLE_TLS:Lokhttp3/ConnectionSpec;
      43: aastore
      44: dup
      45: iconst_2
      46: getstatic     #100                // Field okhttp3/ConnectionSpec.CLEARTEXT:Lokhttp3/ConnectionSpec;
      49: aastore
      50: invokestatic  #97                 // Method okhttp3/internal/Util.immutableList:([Ljava/lang/Object;)Ljava/util/List;
      53: putstatic     #2                  // Field DEFAULT_CONNECTION_SPECS:Ljava/util/List;
      56: new           #101                // class okhttp3/OkHttpClient$1
      59: dup
      60: invokespecial #102                // Method okhttp3/OkHttpClient$1."<init>":()V
      63: putstatic     #103                // Field okhttp3/internal/Internal.instance:Lokhttp3/internal/Internal;
      66: return
}
