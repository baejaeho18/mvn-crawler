Compiled from "RealCall.java"
final class okhttp3.RealCall implements okhttp3.Call {
  private final okhttp3.OkHttpClient client;

  private final okhttp3.internal.http.RetryAndFollowUpInterceptor retryAndFollowUpInterceptor;

  private boolean executed;

  okhttp3.Request originalRequest;

  protected okhttp3.RealCall(okhttp3.OkHttpClient, okhttp3.Request);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #1                  // Field client:Lokhttp3/OkHttpClient;
       9: aload_0
      10: aload_2
      11: putfield      #6                  // Field originalRequest:Lokhttp3/Request;
      14: aload_0
      15: new           #7                  // class okhttp3/internal/http/RetryAndFollowUpInterceptor
      18: dup
      19: aload_1
      20: invokespecial #8                  // Method okhttp3/internal/http/RetryAndFollowUpInterceptor."<init>":(Lokhttp3/OkHttpClient;)V
      23: putfield      #3                  // Field retryAndFollowUpInterceptor:Lokhttp3/internal/http/RetryAndFollowUpInterceptor;
      26: return

  public okhttp3.Request request();
    Code:
       0: aload_0
       1: getfield      #6                  // Field originalRequest:Lokhttp3/Request;
       4: areturn

  public okhttp3.Response execute() throws java.io.IOException;
    Code:
       0: aload_0
       1: dup
       2: astore_1
       3: monitorenter
       4: aload_0
       5: getfield      #9                  // Field executed:Z
       8: ifeq          21
      11: new           #10                 // class java/lang/IllegalStateException
      14: dup
      15: ldc           #11                 // String Already Executed
      17: invokespecial #12                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      20: athrow
      21: aload_0
      22: iconst_1
      23: putfield      #9                  // Field executed:Z
      26: aload_1
      27: monitorexit
      28: goto          36
      31: astore_2
      32: aload_1
      33: monitorexit
      34: aload_2
      35: athrow
      36: aload_0
      37: getfield      #1                  // Field client:Lokhttp3/OkHttpClient;
      40: invokevirtual #13                 // Method okhttp3/OkHttpClient.dispatcher:()Lokhttp3/Dispatcher;
      43: aload_0
      44: invokevirtual #14                 // Method okhttp3/Dispatcher.executed:(Lokhttp3/RealCall;)V
      47: aload_0
      48: invokespecial #4                  // Method getResponseWithInterceptorChain:()Lokhttp3/Response;
      51: astore_1
      52: aload_1
      53: ifnonnull     66
      56: new           #15                 // class java/io/IOException
      59: dup
      60: ldc           #16                 // String Canceled
      62: invokespecial #17                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      65: athrow
      66: aload_1
      67: astore_2
      68: aload_0
      69: getfield      #1                  // Field client:Lokhttp3/OkHttpClient;
      72: invokevirtual #13                 // Method okhttp3/OkHttpClient.dispatcher:()Lokhttp3/Dispatcher;
      75: aload_0
      76: invokevirtual #18                 // Method okhttp3/Dispatcher.finished:(Lokhttp3/RealCall;)V
      79: aload_2
      80: areturn
      81: astore_3
      82: aload_0
      83: getfield      #1                  // Field client:Lokhttp3/OkHttpClient;
      86: invokevirtual #13                 // Method okhttp3/OkHttpClient.dispatcher:()Lokhttp3/Dispatcher;
      89: aload_0
      90: invokevirtual #18                 // Method okhttp3/Dispatcher.finished:(Lokhttp3/RealCall;)V
      93: aload_3
      94: athrow
    Exception table:
       from    to  target type
           4    28    31   any
          31    34    31   any
          36    68    81   any

  synchronized void setForWebSocket();
    Code:
       0: aload_0
       1: getfield      #9                  // Field executed:Z
       4: ifeq          17
       7: new           #10                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #11                 // String Already Executed
      13: invokespecial #12                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: getfield      #3                  // Field retryAndFollowUpInterceptor:Lokhttp3/internal/http/RetryAndFollowUpInterceptor;
      21: iconst_1
      22: invokevirtual #19                 // Method okhttp3/internal/http/RetryAndFollowUpInterceptor.setForWebSocket:(Z)V
      25: return

  public void enqueue(okhttp3.Callback);
    Code:
       0: aload_0
       1: dup
       2: astore_2
       3: monitorenter
       4: aload_0
       5: getfield      #9                  // Field executed:Z
       8: ifeq          21
      11: new           #10                 // class java/lang/IllegalStateException
      14: dup
      15: ldc           #11                 // String Already Executed
      17: invokespecial #12                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      20: athrow
      21: aload_0
      22: iconst_1
      23: putfield      #9                  // Field executed:Z
      26: aload_2
      27: monitorexit
      28: goto          36
      31: astore_3
      32: aload_2
      33: monitorexit
      34: aload_3
      35: athrow
      36: aload_0
      37: getfield      #1                  // Field client:Lokhttp3/OkHttpClient;
      40: invokevirtual #13                 // Method okhttp3/OkHttpClient.dispatcher:()Lokhttp3/Dispatcher;
      43: new           #20                 // class okhttp3/RealCall$AsyncCall
      46: dup
      47: aload_0
      48: aload_1
      49: aconst_null
      50: invokespecial #21                 // Method okhttp3/RealCall$AsyncCall."<init>":(Lokhttp3/RealCall;Lokhttp3/Callback;Lokhttp3/RealCall$1;)V
      53: invokevirtual #22                 // Method okhttp3/Dispatcher.enqueue:(Lokhttp3/RealCall$AsyncCall;)V
      56: return
    Exception table:
       from    to  target type
           4    28    31   any
          31    34    31   any

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #3                  // Field retryAndFollowUpInterceptor:Lokhttp3/internal/http/RetryAndFollowUpInterceptor;
       4: invokevirtual #23                 // Method okhttp3/internal/http/RetryAndFollowUpInterceptor.cancel:()V
       7: return

  public synchronized boolean isExecuted();
    Code:
       0: aload_0
       1: getfield      #9                  // Field executed:Z
       4: ireturn

  public boolean isCanceled();
    Code:
       0: aload_0
       1: getfield      #3                  // Field retryAndFollowUpInterceptor:Lokhttp3/internal/http/RetryAndFollowUpInterceptor;
       4: invokevirtual #24                 // Method okhttp3/internal/http/RetryAndFollowUpInterceptor.isCanceled:()Z
       7: ireturn

  okhttp3.internal.connection.StreamAllocation streamAllocation();
    Code:
       0: aload_0
       1: getfield      #3                  // Field retryAndFollowUpInterceptor:Lokhttp3/internal/http/RetryAndFollowUpInterceptor;
       4: invokevirtual #25                 // Method okhttp3/internal/http/RetryAndFollowUpInterceptor.streamAllocation:()Lokhttp3/internal/connection/StreamAllocation;
       7: areturn

  private java.lang.String toLoggableString();
    Code:
       0: aload_0
       1: getfield      #3                  // Field retryAndFollowUpInterceptor:Lokhttp3/internal/http/RetryAndFollowUpInterceptor;
       4: invokevirtual #24                 // Method okhttp3/internal/http/RetryAndFollowUpInterceptor.isCanceled:()Z
       7: ifeq          15
      10: ldc           #26                 // String canceled call
      12: goto          17
      15: ldc           #27                 // String call
      17: astore_1
      18: new           #28                 // class java/lang/StringBuilder
      21: dup
      22: invokespecial #29                 // Method java/lang/StringBuilder."<init>":()V
      25: aload_1
      26: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      29: ldc           #31                 // String  to
      31: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      34: aload_0
      35: invokevirtual #32                 // Method redactedUrl:()Lokhttp3/HttpUrl;
      38: invokevirtual #33                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      41: invokevirtual #34                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      44: areturn

  okhttp3.HttpUrl redactedUrl();
    Code:
       0: aload_0
       1: getfield      #6                  // Field originalRequest:Lokhttp3/Request;
       4: invokevirtual #35                 // Method okhttp3/Request.url:()Lokhttp3/HttpUrl;
       7: ldc           #36                 // String /...
       9: invokevirtual #37                 // Method okhttp3/HttpUrl.resolve:(Ljava/lang/String;)Lokhttp3/HttpUrl;
      12: areturn

  private okhttp3.Response getResponseWithInterceptorChain() throws java.io.IOException;
    Code:
       0: new           #38                 // class java/util/ArrayList
       3: dup
       4: invokespecial #39                 // Method java/util/ArrayList."<init>":()V
       7: astore_1
       8: aload_1
       9: aload_0
      10: getfield      #1                  // Field client:Lokhttp3/OkHttpClient;
      13: invokevirtual #40                 // Method okhttp3/OkHttpClient.interceptors:()Ljava/util/List;
      16: invokeinterface #41,  2           // InterfaceMethod java/util/List.addAll:(Ljava/util/Collection;)Z
      21: pop
      22: aload_1
      23: aload_0
      24: getfield      #3                  // Field retryAndFollowUpInterceptor:Lokhttp3/internal/http/RetryAndFollowUpInterceptor;
      27: invokeinterface #42,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      32: pop
      33: aload_1
      34: new           #43                 // class okhttp3/internal/http/BridgeInterceptor
      37: dup
      38: aload_0
      39: getfield      #1                  // Field client:Lokhttp3/OkHttpClient;
      42: invokevirtual #44                 // Method okhttp3/OkHttpClient.cookieJar:()Lokhttp3/CookieJar;
      45: invokespecial #45                 // Method okhttp3/internal/http/BridgeInterceptor."<init>":(Lokhttp3/CookieJar;)V
      48: invokeinterface #42,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      53: pop
      54: aload_1
      55: new           #46                 // class okhttp3/internal/cache/CacheInterceptor
      58: dup
      59: aload_0
      60: getfield      #1                  // Field client:Lokhttp3/OkHttpClient;
      63: invokevirtual #47                 // Method okhttp3/OkHttpClient.internalCache:()Lokhttp3/internal/cache/InternalCache;
      66: invokespecial #48                 // Method okhttp3/internal/cache/CacheInterceptor."<init>":(Lokhttp3/internal/cache/InternalCache;)V
      69: invokeinterface #42,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      74: pop
      75: aload_1
      76: new           #49                 // class okhttp3/internal/connection/ConnectInterceptor
      79: dup
      80: aload_0
      81: getfield      #1                  // Field client:Lokhttp3/OkHttpClient;
      84: invokespecial #50                 // Method okhttp3/internal/connection/ConnectInterceptor."<init>":(Lokhttp3/OkHttpClient;)V
      87: invokeinterface #42,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      92: pop
      93: aload_0
      94: getfield      #3                  // Field retryAndFollowUpInterceptor:Lokhttp3/internal/http/RetryAndFollowUpInterceptor;
      97: invokevirtual #51                 // Method okhttp3/internal/http/RetryAndFollowUpInterceptor.isForWebSocket:()Z
     100: ifne          117
     103: aload_1
     104: aload_0
     105: getfield      #1                  // Field client:Lokhttp3/OkHttpClient;
     108: invokevirtual #52                 // Method okhttp3/OkHttpClient.networkInterceptors:()Ljava/util/List;
     111: invokeinterface #41,  2           // InterfaceMethod java/util/List.addAll:(Ljava/util/Collection;)Z
     116: pop
     117: aload_1
     118: new           #53                 // class okhttp3/internal/http/CallServerInterceptor
     121: dup
     122: aload_0
     123: getfield      #3                  // Field retryAndFollowUpInterceptor:Lokhttp3/internal/http/RetryAndFollowUpInterceptor;
     126: invokevirtual #51                 // Method okhttp3/internal/http/RetryAndFollowUpInterceptor.isForWebSocket:()Z
     129: invokespecial #54                 // Method okhttp3/internal/http/CallServerInterceptor."<init>":(Z)V
     132: invokeinterface #42,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     137: pop
     138: new           #55                 // class okhttp3/internal/http/RealInterceptorChain
     141: dup
     142: aload_1
     143: aconst_null
     144: aconst_null
     145: aconst_null
     146: iconst_0
     147: aload_0
     148: getfield      #6                  // Field originalRequest:Lokhttp3/Request;
     151: invokespecial #56                 // Method okhttp3/internal/http/RealInterceptorChain."<init>":(Ljava/util/List;Lokhttp3/internal/connection/StreamAllocation;Lokhttp3/internal/http/HttpStream;Lokhttp3/Connection;ILokhttp3/Request;)V
     154: astore_2
     155: aload_2
     156: aload_0
     157: getfield      #6                  // Field originalRequest:Lokhttp3/Request;
     160: invokeinterface #57,  2           // InterfaceMethod okhttp3/Interceptor$Chain.proceed:(Lokhttp3/Request;)Lokhttp3/Response;
     165: areturn

  static okhttp3.Response access$100(okhttp3.RealCall) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #4                  // Method getResponseWithInterceptorChain:()Lokhttp3/Response;
       4: areturn

  static okhttp3.internal.http.RetryAndFollowUpInterceptor access$200(okhttp3.RealCall);
    Code:
       0: aload_0
       1: getfield      #3                  // Field retryAndFollowUpInterceptor:Lokhttp3/internal/http/RetryAndFollowUpInterceptor;
       4: areturn

  static java.lang.String access$300(okhttp3.RealCall);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method toLoggableString:()Ljava/lang/String;
       4: areturn

  static okhttp3.OkHttpClient access$400(okhttp3.RealCall);
    Code:
       0: aload_0
       1: getfield      #1                  // Field client:Lokhttp3/OkHttpClient;
       4: areturn
}
