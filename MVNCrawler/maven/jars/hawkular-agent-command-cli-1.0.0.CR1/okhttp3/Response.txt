Compiled from "Response.java"
public final class okhttp3.Response implements java.io.Closeable {
  private final okhttp3.Request request;

  private final okhttp3.Protocol protocol;

  private final int code;

  private final java.lang.String message;

  private final okhttp3.Handshake handshake;

  private final okhttp3.Headers headers;

  private final okhttp3.ResponseBody body;

  private final okhttp3.Response networkResponse;

  private final okhttp3.Response cacheResponse;

  private final okhttp3.Response priorResponse;

  private final long sentRequestAtMillis;

  private final long receivedResponseAtMillis;

  private volatile okhttp3.CacheControl cacheControl;

  private okhttp3.Response(okhttp3.Response$Builder);
    Code:
       0: aload_0
       1: invokespecial #16                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: invokestatic  #17                 // Method okhttp3/Response$Builder.access$000:(Lokhttp3/Response$Builder;)Lokhttp3/Request;
       9: putfield      #15                 // Field request:Lokhttp3/Request;
      12: aload_0
      13: aload_1
      14: invokestatic  #18                 // Method okhttp3/Response$Builder.access$100:(Lokhttp3/Response$Builder;)Lokhttp3/Protocol;
      17: putfield      #14                 // Field protocol:Lokhttp3/Protocol;
      20: aload_0
      21: aload_1
      22: invokestatic  #19                 // Method okhttp3/Response$Builder.access$200:(Lokhttp3/Response$Builder;)I
      25: putfield      #13                 // Field code:I
      28: aload_0
      29: aload_1
      30: invokestatic  #20                 // Method okhttp3/Response$Builder.access$300:(Lokhttp3/Response$Builder;)Ljava/lang/String;
      33: putfield      #12                 // Field message:Ljava/lang/String;
      36: aload_0
      37: aload_1
      38: invokestatic  #21                 // Method okhttp3/Response$Builder.access$400:(Lokhttp3/Response$Builder;)Lokhttp3/Handshake;
      41: putfield      #11                 // Field handshake:Lokhttp3/Handshake;
      44: aload_0
      45: aload_1
      46: invokestatic  #22                 // Method okhttp3/Response$Builder.access$500:(Lokhttp3/Response$Builder;)Lokhttp3/Headers$Builder;
      49: invokevirtual #23                 // Method okhttp3/Headers$Builder.build:()Lokhttp3/Headers;
      52: putfield      #10                 // Field headers:Lokhttp3/Headers;
      55: aload_0
      56: aload_1
      57: invokestatic  #24                 // Method okhttp3/Response$Builder.access$600:(Lokhttp3/Response$Builder;)Lokhttp3/ResponseBody;
      60: putfield      #9                  // Field body:Lokhttp3/ResponseBody;
      63: aload_0
      64: aload_1
      65: invokestatic  #25                 // Method okhttp3/Response$Builder.access$700:(Lokhttp3/Response$Builder;)Lokhttp3/Response;
      68: putfield      #8                  // Field networkResponse:Lokhttp3/Response;
      71: aload_0
      72: aload_1
      73: invokestatic  #26                 // Method okhttp3/Response$Builder.access$800:(Lokhttp3/Response$Builder;)Lokhttp3/Response;
      76: putfield      #7                  // Field cacheResponse:Lokhttp3/Response;
      79: aload_0
      80: aload_1
      81: invokestatic  #27                 // Method okhttp3/Response$Builder.access$900:(Lokhttp3/Response$Builder;)Lokhttp3/Response;
      84: putfield      #6                  // Field priorResponse:Lokhttp3/Response;
      87: aload_0
      88: aload_1
      89: invokestatic  #28                 // Method okhttp3/Response$Builder.access$1000:(Lokhttp3/Response$Builder;)J
      92: putfield      #5                  // Field sentRequestAtMillis:J
      95: aload_0
      96: aload_1
      97: invokestatic  #29                 // Method okhttp3/Response$Builder.access$1100:(Lokhttp3/Response$Builder;)J
     100: putfield      #4                  // Field receivedResponseAtMillis:J
     103: return

  public okhttp3.Request request();
    Code:
       0: aload_0
       1: getfield      #15                 // Field request:Lokhttp3/Request;
       4: areturn

  public okhttp3.Protocol protocol();
    Code:
       0: aload_0
       1: getfield      #14                 // Field protocol:Lokhttp3/Protocol;
       4: areturn

  public int code();
    Code:
       0: aload_0
       1: getfield      #13                 // Field code:I
       4: ireturn

  public boolean isSuccessful();
    Code:
       0: aload_0
       1: getfield      #13                 // Field code:I
       4: sipush        200
       7: if_icmplt     24
      10: aload_0
      11: getfield      #13                 // Field code:I
      14: sipush        300
      17: if_icmpge     24
      20: iconst_1
      21: goto          25
      24: iconst_0
      25: ireturn

  public java.lang.String message();
    Code:
       0: aload_0
       1: getfield      #12                 // Field message:Ljava/lang/String;
       4: areturn

  public okhttp3.Handshake handshake();
    Code:
       0: aload_0
       1: getfield      #11                 // Field handshake:Lokhttp3/Handshake;
       4: areturn

  public java.util.List<java.lang.String> headers(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #10                 // Field headers:Lokhttp3/Headers;
       4: aload_1
       5: invokevirtual #30                 // Method okhttp3/Headers.values:(Ljava/lang/String;)Ljava/util/List;
       8: areturn

  public java.lang.String header(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: invokevirtual #31                 // Method header:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
       6: areturn

  public java.lang.String header(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #10                 // Field headers:Lokhttp3/Headers;
       4: aload_1
       5: invokevirtual #32                 // Method okhttp3/Headers.get:(Ljava/lang/String;)Ljava/lang/String;
       8: astore_3
       9: aload_3
      10: ifnull        17
      13: aload_3
      14: goto          18
      17: aload_2
      18: areturn

  public okhttp3.Headers headers();
    Code:
       0: aload_0
       1: getfield      #10                 // Field headers:Lokhttp3/Headers;
       4: areturn

  public okhttp3.ResponseBody peekBody(long) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #9                  // Field body:Lokhttp3/ResponseBody;
       4: invokevirtual #33                 // Method okhttp3/ResponseBody.source:()Lokio/BufferedSource;
       7: astore_3
       8: aload_3
       9: lload_1
      10: invokeinterface #34,  3           // InterfaceMethod okio/BufferedSource.request:(J)Z
      15: pop
      16: aload_3
      17: invokeinterface #35,  1           // InterfaceMethod okio/BufferedSource.buffer:()Lokio/Buffer;
      22: invokevirtual #36                 // Method okio/Buffer.clone:()Lokio/Buffer;
      25: astore        4
      27: aload         4
      29: invokevirtual #37                 // Method okio/Buffer.size:()J
      32: lload_1
      33: lcmp
      34: ifle          62
      37: new           #38                 // class okio/Buffer
      40: dup
      41: invokespecial #39                 // Method okio/Buffer."<init>":()V
      44: astore        5
      46: aload         5
      48: aload         4
      50: lload_1
      51: invokevirtual #40                 // Method okio/Buffer.write:(Lokio/Buffer;J)V
      54: aload         4
      56: invokevirtual #41                 // Method okio/Buffer.clear:()V
      59: goto          66
      62: aload         4
      64: astore        5
      66: aload_0
      67: getfield      #9                  // Field body:Lokhttp3/ResponseBody;
      70: invokevirtual #42                 // Method okhttp3/ResponseBody.contentType:()Lokhttp3/MediaType;
      73: aload         5
      75: invokevirtual #37                 // Method okio/Buffer.size:()J
      78: aload         5
      80: invokestatic  #43                 // Method okhttp3/ResponseBody.create:(Lokhttp3/MediaType;JLokio/BufferedSource;)Lokhttp3/ResponseBody;
      83: areturn

  public okhttp3.ResponseBody body();
    Code:
       0: aload_0
       1: getfield      #9                  // Field body:Lokhttp3/ResponseBody;
       4: areturn

  public okhttp3.Response$Builder newBuilder();
    Code:
       0: new           #44                 // class okhttp3/Response$Builder
       3: dup
       4: aload_0
       5: aconst_null
       6: invokespecial #45                 // Method okhttp3/Response$Builder."<init>":(Lokhttp3/Response;Lokhttp3/Response$1;)V
       9: areturn

  public boolean isRedirect();
    Code:
       0: aload_0
       1: getfield      #13                 // Field code:I
       4: tableswitch   { // 300 to 308
                   300: 56
                   301: 56
                   302: 56
                   303: 56
                   304: 58
                   305: 58
                   306: 58
                   307: 56
                   308: 56
               default: 58
          }
      56: iconst_1
      57: ireturn
      58: iconst_0
      59: ireturn

  public okhttp3.Response networkResponse();
    Code:
       0: aload_0
       1: getfield      #8                  // Field networkResponse:Lokhttp3/Response;
       4: areturn

  public okhttp3.Response cacheResponse();
    Code:
       0: aload_0
       1: getfield      #7                  // Field cacheResponse:Lokhttp3/Response;
       4: areturn

  public okhttp3.Response priorResponse();
    Code:
       0: aload_0
       1: getfield      #6                  // Field priorResponse:Lokhttp3/Response;
       4: areturn

  public java.util.List<okhttp3.Challenge> challenges();
    Code:
       0: aload_0
       1: getfield      #13                 // Field code:I
       4: sipush        401
       7: if_icmpne     16
      10: ldc           #46                 // String WWW-Authenticate
      12: astore_1
      13: goto          36
      16: aload_0
      17: getfield      #13                 // Field code:I
      20: sipush        407
      23: if_icmpne     32
      26: ldc           #47                 // String Proxy-Authenticate
      28: astore_1
      29: goto          36
      32: invokestatic  #48                 // Method java/util/Collections.emptyList:()Ljava/util/List;
      35: areturn
      36: aload_0
      37: invokevirtual #49                 // Method headers:()Lokhttp3/Headers;
      40: aload_1
      41: invokestatic  #50                 // Method okhttp3/internal/http/HttpHeaders.parseChallenges:(Lokhttp3/Headers;Ljava/lang/String;)Ljava/util/List;
      44: areturn

  public okhttp3.CacheControl cacheControl();
    Code:
       0: aload_0
       1: getfield      #51                 // Field cacheControl:Lokhttp3/CacheControl;
       4: astore_1
       5: aload_1
       6: ifnull        13
       9: aload_1
      10: goto          25
      13: aload_0
      14: aload_0
      15: getfield      #10                 // Field headers:Lokhttp3/Headers;
      18: invokestatic  #52                 // Method okhttp3/CacheControl.parse:(Lokhttp3/Headers;)Lokhttp3/CacheControl;
      21: dup_x1
      22: putfield      #51                 // Field cacheControl:Lokhttp3/CacheControl;
      25: areturn

  public long sentRequestAtMillis();
    Code:
       0: aload_0
       1: getfield      #5                  // Field sentRequestAtMillis:J
       4: lreturn

  public long receivedResponseAtMillis();
    Code:
       0: aload_0
       1: getfield      #4                  // Field receivedResponseAtMillis:J
       4: lreturn

  public void close();
    Code:
       0: aload_0
       1: getfield      #9                  // Field body:Lokhttp3/ResponseBody;
       4: invokevirtual #53                 // Method okhttp3/ResponseBody.close:()V
       7: return

  public java.lang.String toString();
    Code:
       0: new           #54                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #55                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #56                 // String Response{protocol=
       9: invokevirtual #57                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: getfield      #14                 // Field protocol:Lokhttp3/Protocol;
      16: invokevirtual #58                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      19: ldc           #59                 // String , code=
      21: invokevirtual #57                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: aload_0
      25: getfield      #13                 // Field code:I
      28: invokevirtual #60                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      31: ldc           #61                 // String , message=
      33: invokevirtual #57                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      36: aload_0
      37: getfield      #12                 // Field message:Ljava/lang/String;
      40: invokevirtual #57                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      43: ldc           #62                 // String , url=
      45: invokevirtual #57                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      48: aload_0
      49: getfield      #15                 // Field request:Lokhttp3/Request;
      52: invokevirtual #63                 // Method okhttp3/Request.url:()Lokhttp3/HttpUrl;
      55: invokevirtual #58                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      58: bipush        125
      60: invokevirtual #64                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      63: invokevirtual #65                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      66: areturn

  static okhttp3.Request access$1300(okhttp3.Response);
    Code:
       0: aload_0
       1: getfield      #15                 // Field request:Lokhttp3/Request;
       4: areturn

  static okhttp3.Protocol access$1400(okhttp3.Response);
    Code:
       0: aload_0
       1: getfield      #14                 // Field protocol:Lokhttp3/Protocol;
       4: areturn

  static int access$1500(okhttp3.Response);
    Code:
       0: aload_0
       1: getfield      #13                 // Field code:I
       4: ireturn

  static java.lang.String access$1600(okhttp3.Response);
    Code:
       0: aload_0
       1: getfield      #12                 // Field message:Ljava/lang/String;
       4: areturn

  static okhttp3.Handshake access$1700(okhttp3.Response);
    Code:
       0: aload_0
       1: getfield      #11                 // Field handshake:Lokhttp3/Handshake;
       4: areturn

  static okhttp3.Headers access$1800(okhttp3.Response);
    Code:
       0: aload_0
       1: getfield      #10                 // Field headers:Lokhttp3/Headers;
       4: areturn

  static okhttp3.ResponseBody access$1900(okhttp3.Response);
    Code:
       0: aload_0
       1: getfield      #9                  // Field body:Lokhttp3/ResponseBody;
       4: areturn

  static okhttp3.Response access$2000(okhttp3.Response);
    Code:
       0: aload_0
       1: getfield      #8                  // Field networkResponse:Lokhttp3/Response;
       4: areturn

  static okhttp3.Response access$2100(okhttp3.Response);
    Code:
       0: aload_0
       1: getfield      #7                  // Field cacheResponse:Lokhttp3/Response;
       4: areturn

  static okhttp3.Response access$2200(okhttp3.Response);
    Code:
       0: aload_0
       1: getfield      #6                  // Field priorResponse:Lokhttp3/Response;
       4: areturn

  static long access$2300(okhttp3.Response);
    Code:
       0: aload_0
       1: getfield      #5                  // Field sentRequestAtMillis:J
       4: lreturn

  static long access$2400(okhttp3.Response);
    Code:
       0: aload_0
       1: getfield      #4                  // Field receivedResponseAtMillis:J
       4: lreturn

  okhttp3.Response(okhttp3.Response$Builder, okhttp3.Response$1);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #3                  // Method "<init>":(Lokhttp3/Response$Builder;)V
       5: return
}
