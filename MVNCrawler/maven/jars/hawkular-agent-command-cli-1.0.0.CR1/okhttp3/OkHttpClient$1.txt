Compiled from "OkHttpClient.java"
final class okhttp3.OkHttpClient$1 extends okhttp3.internal.Internal {
  okhttp3.OkHttpClient$1();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method okhttp3/internal/Internal."<init>":()V
       4: return

  public void addLenient(okhttp3.Headers$Builder, java.lang.String);
    Code:
       0: aload_1
       1: aload_2
       2: invokevirtual #2                  // Method okhttp3/Headers$Builder.addLenient:(Ljava/lang/String;)Lokhttp3/Headers$Builder;
       5: pop
       6: return

  public void addLenient(okhttp3.Headers$Builder, java.lang.String, java.lang.String);
    Code:
       0: aload_1
       1: aload_2
       2: aload_3
       3: invokevirtual #3                  // Method okhttp3/Headers$Builder.addLenient:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;
       6: pop
       7: return

  public void setCache(okhttp3.OkHttpClient$Builder, okhttp3.internal.cache.InternalCache);
    Code:
       0: aload_1
       1: aload_2
       2: invokevirtual #4                  // Method okhttp3/OkHttpClient$Builder.setInternalCache:(Lokhttp3/internal/cache/InternalCache;)V
       5: return

  public boolean connectionBecameIdle(okhttp3.ConnectionPool, okhttp3.internal.connection.RealConnection);
    Code:
       0: aload_1
       1: aload_2
       2: invokevirtual #5                  // Method okhttp3/ConnectionPool.connectionBecameIdle:(Lokhttp3/internal/connection/RealConnection;)Z
       5: ireturn

  public okhttp3.internal.connection.RealConnection get(okhttp3.ConnectionPool, okhttp3.Address, okhttp3.internal.connection.StreamAllocation);
    Code:
       0: aload_1
       1: aload_2
       2: aload_3
       3: invokevirtual #6                  // Method okhttp3/ConnectionPool.get:(Lokhttp3/Address;Lokhttp3/internal/connection/StreamAllocation;)Lokhttp3/internal/connection/RealConnection;
       6: areturn

  public void put(okhttp3.ConnectionPool, okhttp3.internal.connection.RealConnection);
    Code:
       0: aload_1
       1: aload_2
       2: invokevirtual #7                  // Method okhttp3/ConnectionPool.put:(Lokhttp3/internal/connection/RealConnection;)V
       5: return

  public okhttp3.internal.connection.RouteDatabase routeDatabase(okhttp3.ConnectionPool);
    Code:
       0: aload_1
       1: getfield      #8                  // Field okhttp3/ConnectionPool.routeDatabase:Lokhttp3/internal/connection/RouteDatabase;
       4: areturn

  public okhttp3.internal.connection.StreamAllocation callEngineGetStreamAllocation(okhttp3.Call);
    Code:
       0: aload_1
       1: checkcast     #9                  // class okhttp3/RealCall
       4: invokevirtual #10                 // Method okhttp3/RealCall.streamAllocation:()Lokhttp3/internal/connection/StreamAllocation;
       7: areturn

  public void apply(okhttp3.ConnectionSpec, javax.net.ssl.SSLSocket, boolean);
    Code:
       0: aload_1
       1: aload_2
       2: iload_3
       3: invokevirtual #11                 // Method okhttp3/ConnectionSpec.apply:(Ljavax/net/ssl/SSLSocket;Z)V
       6: return

  public okhttp3.HttpUrl getHttpUrlChecked(java.lang.String) throws java.net.MalformedURLException, java.net.UnknownHostException;
    Code:
       0: aload_1
       1: invokestatic  #12                 // Method okhttp3/HttpUrl.getChecked:(Ljava/lang/String;)Lokhttp3/HttpUrl;
       4: areturn

  public void setCallWebSocket(okhttp3.Call);
    Code:
       0: aload_1
       1: checkcast     #9                  // class okhttp3/RealCall
       4: invokevirtual #13                 // Method okhttp3/RealCall.setForWebSocket:()V
       7: return
}
