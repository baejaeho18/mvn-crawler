Compiled from "InflaterSource.java"
public final class okio.InflaterSource implements okio.Source {
  private final okio.BufferedSource source;

  private final java.util.zip.Inflater inflater;

  private int bufferBytesHeldByInflater;

  private boolean closed;

  public okio.InflaterSource(okio.Source, java.util.zip.Inflater);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1                  // Method okio/Okio.buffer:(Lokio/Source;)Lokio/BufferedSource;
       5: aload_2
       6: invokespecial #2                  // Method "<init>":(Lokio/BufferedSource;Ljava/util/zip/Inflater;)V
       9: return

  okio.InflaterSource(okio.BufferedSource, java.util.zip.Inflater);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/lang/Object."<init>":()V
       4: aload_1
       5: ifnonnull     18
       8: new           #4                  // class java/lang/IllegalArgumentException
      11: dup
      12: ldc           #5                  // String source == null
      14: invokespecial #6                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      17: athrow
      18: aload_2
      19: ifnonnull     32
      22: new           #4                  // class java/lang/IllegalArgumentException
      25: dup
      26: ldc           #7                  // String inflater == null
      28: invokespecial #6                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      31: athrow
      32: aload_0
      33: aload_1
      34: putfield      #8                  // Field source:Lokio/BufferedSource;
      37: aload_0
      38: aload_2
      39: putfield      #9                  // Field inflater:Ljava/util/zip/Inflater;
      42: return

  public long read(okio.Buffer, long) throws java.io.IOException;
    Code:
       0: lload_2
       1: lconst_0
       2: lcmp
       3: ifge          33
       6: new           #4                  // class java/lang/IllegalArgumentException
       9: dup
      10: new           #10                 // class java/lang/StringBuilder
      13: dup
      14: invokespecial #11                 // Method java/lang/StringBuilder."<init>":()V
      17: ldc           #12                 // String byteCount < 0:
      19: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      22: lload_2
      23: invokevirtual #14                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      26: invokevirtual #15                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      29: invokespecial #6                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      32: athrow
      33: aload_0
      34: getfield      #16                 // Field closed:Z
      37: ifeq          50
      40: new           #17                 // class java/lang/IllegalStateException
      43: dup
      44: ldc           #18                 // String closed
      46: invokespecial #19                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      49: athrow
      50: lload_2
      51: lconst_0
      52: lcmp
      53: ifne          58
      56: lconst_0
      57: lreturn
      58: aload_0
      59: invokevirtual #20                 // Method refill:()Z
      62: istore        4
      64: aload_1
      65: iconst_1
      66: invokevirtual #21                 // Method okio/Buffer.writableSegment:(I)Lokio/Segment;
      69: astore        5
      71: aload_0
      72: getfield      #9                  // Field inflater:Ljava/util/zip/Inflater;
      75: aload         5
      77: getfield      #22                 // Field okio/Segment.data:[B
      80: aload         5
      82: getfield      #23                 // Field okio/Segment.limit:I
      85: sipush        8192
      88: aload         5
      90: getfield      #23                 // Field okio/Segment.limit:I
      93: isub
      94: invokevirtual #25                 // Method java/util/zip/Inflater.inflate:([BII)I
      97: istore        6
      99: iload         6
     101: ifle          132
     104: aload         5
     106: dup
     107: getfield      #23                 // Field okio/Segment.limit:I
     110: iload         6
     112: iadd
     113: putfield      #23                 // Field okio/Segment.limit:I
     116: aload_1
     117: dup
     118: getfield      #26                 // Field okio/Buffer.size:J
     121: iload         6
     123: i2l
     124: ladd
     125: putfield      #26                 // Field okio/Buffer.size:J
     128: iload         6
     130: i2l
     131: lreturn
     132: aload_0
     133: getfield      #9                  // Field inflater:Ljava/util/zip/Inflater;
     136: invokevirtual #27                 // Method java/util/zip/Inflater.finished:()Z
     139: ifne          152
     142: aload_0
     143: getfield      #9                  // Field inflater:Ljava/util/zip/Inflater;
     146: invokevirtual #28                 // Method java/util/zip/Inflater.needsDictionary:()Z
     149: ifeq          187
     152: aload_0
     153: invokespecial #29                 // Method releaseInflatedBytes:()V
     156: aload         5
     158: getfield      #30                 // Field okio/Segment.pos:I
     161: aload         5
     163: getfield      #23                 // Field okio/Segment.limit:I
     166: if_icmpne     183
     169: aload_1
     170: aload         5
     172: invokevirtual #31                 // Method okio/Segment.pop:()Lokio/Segment;
     175: putfield      #32                 // Field okio/Buffer.head:Lokio/Segment;
     178: aload         5
     180: invokestatic  #33                 // Method okio/SegmentPool.recycle:(Lokio/Segment;)V
     183: ldc2_w        #34                 // long -1l
     186: lreturn
     187: iload         4
     189: ifeq          202
     192: new           #36                 // class java/io/EOFException
     195: dup
     196: ldc           #37                 // String source exhausted prematurely
     198: invokespecial #38                 // Method java/io/EOFException."<init>":(Ljava/lang/String;)V
     201: athrow
     202: goto          217
     205: astore        5
     207: new           #40                 // class java/io/IOException
     210: dup
     211: aload         5
     213: invokespecial #41                 // Method java/io/IOException."<init>":(Ljava/lang/Throwable;)V
     216: athrow
     217: goto          58
    Exception table:
       from    to  target type
          64   131   205   Class java/util/zip/DataFormatException
         132   186   205   Class java/util/zip/DataFormatException
         187   202   205   Class java/util/zip/DataFormatException

  public boolean refill() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #9                  // Field inflater:Ljava/util/zip/Inflater;
       4: invokevirtual #42                 // Method java/util/zip/Inflater.needsInput:()Z
       7: ifne          12
      10: iconst_0
      11: ireturn
      12: aload_0
      13: invokespecial #29                 // Method releaseInflatedBytes:()V
      16: aload_0
      17: getfield      #9                  // Field inflater:Ljava/util/zip/Inflater;
      20: invokevirtual #43                 // Method java/util/zip/Inflater.getRemaining:()I
      23: ifeq          36
      26: new           #17                 // class java/lang/IllegalStateException
      29: dup
      30: ldc           #44                 // String ?
      32: invokespecial #19                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      35: athrow
      36: aload_0
      37: getfield      #8                  // Field source:Lokio/BufferedSource;
      40: invokeinterface #45,  1           // InterfaceMethod okio/BufferedSource.exhausted:()Z
      45: ifeq          50
      48: iconst_1
      49: ireturn
      50: aload_0
      51: getfield      #8                  // Field source:Lokio/BufferedSource;
      54: invokeinterface #46,  1           // InterfaceMethod okio/BufferedSource.buffer:()Lokio/Buffer;
      59: getfield      #32                 // Field okio/Buffer.head:Lokio/Segment;
      62: astore_1
      63: aload_0
      64: aload_1
      65: getfield      #23                 // Field okio/Segment.limit:I
      68: aload_1
      69: getfield      #30                 // Field okio/Segment.pos:I
      72: isub
      73: putfield      #47                 // Field bufferBytesHeldByInflater:I
      76: aload_0
      77: getfield      #9                  // Field inflater:Ljava/util/zip/Inflater;
      80: aload_1
      81: getfield      #22                 // Field okio/Segment.data:[B
      84: aload_1
      85: getfield      #30                 // Field okio/Segment.pos:I
      88: aload_0
      89: getfield      #47                 // Field bufferBytesHeldByInflater:I
      92: invokevirtual #48                 // Method java/util/zip/Inflater.setInput:([BII)V
      95: iconst_0
      96: ireturn

  private void releaseInflatedBytes() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #47                 // Field bufferBytesHeldByInflater:I
       4: ifne          8
       7: return
       8: aload_0
       9: getfield      #47                 // Field bufferBytesHeldByInflater:I
      12: aload_0
      13: getfield      #9                  // Field inflater:Ljava/util/zip/Inflater;
      16: invokevirtual #43                 // Method java/util/zip/Inflater.getRemaining:()I
      19: isub
      20: istore_1
      21: aload_0
      22: dup
      23: getfield      #47                 // Field bufferBytesHeldByInflater:I
      26: iload_1
      27: isub
      28: putfield      #47                 // Field bufferBytesHeldByInflater:I
      31: aload_0
      32: getfield      #8                  // Field source:Lokio/BufferedSource;
      35: iload_1
      36: i2l
      37: invokeinterface #49,  3           // InterfaceMethod okio/BufferedSource.skip:(J)V
      42: return

  public okio.Timeout timeout();
    Code:
       0: aload_0
       1: getfield      #8                  // Field source:Lokio/BufferedSource;
       4: invokeinterface #50,  1           // InterfaceMethod okio/BufferedSource.timeout:()Lokio/Timeout;
       9: areturn

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #16                 // Field closed:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: getfield      #9                  // Field inflater:Ljava/util/zip/Inflater;
      12: invokevirtual #51                 // Method java/util/zip/Inflater.end:()V
      15: aload_0
      16: iconst_1
      17: putfield      #16                 // Field closed:Z
      20: aload_0
      21: getfield      #8                  // Field source:Lokio/BufferedSource;
      24: invokeinterface #52,  1           // InterfaceMethod okio/BufferedSource.close:()V
      29: return
}
