Compiled from "DefaultWebSocketConnection.java"
public class org.wso2.transport.http.netty.contractimpl.websocket.DefaultWebSocketConnection implements org.wso2.transport.http.netty.contract.websocket.WebSocketConnection {
  private final io.netty.channel.ChannelHandlerContext ctx;

  private final org.wso2.transport.http.netty.contractimpl.websocket.WebSocketInboundFrameHandler frameHandler;

  private final boolean secure;

  private final java.net.InetSocketAddress localAddress;

  private org.wso2.transport.http.netty.contractimpl.listener.MessageQueueHandler messageQueueHandler;

  private org.wso2.transport.http.netty.contract.websocket.WebSocketFrameType continuationFrameType;

  private boolean closeFrameSent;

  private int closeInitiatedStatusCode;

  private java.lang.String id;

  private java.lang.String negotiatedSubProtocol;

  public org.wso2.transport.http.netty.contractimpl.websocket.DefaultWebSocketConnection(io.netty.channel.ChannelHandlerContext, org.wso2.transport.http.netty.contractimpl.websocket.WebSocketInboundFrameHandler, org.wso2.transport.http.netty.contractimpl.listener.MessageQueueHandler, boolean, java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #3                  // Field ctx:Lio/netty/channel/ChannelHandlerContext;
       9: aload_0
      10: aload_1
      11: invokestatic  #4                  // Method org/wso2/transport/http/netty/contractimpl/websocket/WebSocketUtil.getChannelId:(Lio/netty/channel/ChannelHandlerContext;)Ljava/lang/String;
      14: putfield      #5                  // Field id:Ljava/lang/String;
      17: aload_0
      18: aload_2
      19: putfield      #6                  // Field frameHandler:Lorg/wso2/transport/http/netty/contractimpl/websocket/WebSocketInboundFrameHandler;
      22: aload_0
      23: aload_3
      24: putfield      #7                  // Field messageQueueHandler:Lorg/wso2/transport/http/netty/contractimpl/listener/MessageQueueHandler;
      27: aload_0
      28: iload         4
      30: putfield      #8                  // Field secure:Z
      33: aload_0
      34: aload_1
      35: invokeinterface #9,  1            // InterfaceMethod io/netty/channel/ChannelHandlerContext.channel:()Lio/netty/channel/Channel;
      40: invokeinterface #10,  1           // InterfaceMethod io/netty/channel/Channel.localAddress:()Ljava/net/SocketAddress;
      45: checkcast     #11                 // class java/net/InetSocketAddress
      48: putfield      #12                 // Field localAddress:Ljava/net/InetSocketAddress;
      51: aload_0
      52: aload         5
      54: putfield      #13                 // Field negotiatedSubProtocol:Ljava/lang/String;
      57: return

  public java.lang.String getChannelId();
    Code:
       0: aload_0
       1: getfield      #5                  // Field id:Ljava/lang/String;
       4: areturn

  public boolean isOpen();
    Code:
       0: aload_0
       1: getfield      #3                  // Field ctx:Lio/netty/channel/ChannelHandlerContext;
       4: invokeinterface #9,  1            // InterfaceMethod io/netty/channel/ChannelHandlerContext.channel:()Lio/netty/channel/Channel;
       9: invokeinterface #14,  1           // InterfaceMethod io/netty/channel/Channel.isOpen:()Z
      14: ireturn

  public boolean isSecure();
    Code:
       0: aload_0
       1: getfield      #8                  // Field secure:Z
       4: ireturn

  public java.lang.String getHost();
    Code:
       0: aload_0
       1: getfield      #12                 // Field localAddress:Ljava/net/InetSocketAddress;
       4: invokevirtual #15                 // Method java/net/InetSocketAddress.getHostName:()Ljava/lang/String;
       7: areturn

  public int getPort();
    Code:
       0: aload_0
       1: getfield      #12                 // Field localAddress:Ljava/net/InetSocketAddress;
       4: invokevirtual #16                 // Method java/net/InetSocketAddress.getPort:()I
       7: ireturn

  public java.lang.String getNegotiatedSubProtocol();
    Code:
       0: aload_0
       1: getfield      #13                 // Field negotiatedSubProtocol:Ljava/lang/String;
       4: areturn

  public void readNextFrame();
    Code:
       0: aload_0
       1: getfield      #7                  // Field messageQueueHandler:Lorg/wso2/transport/http/netty/contractimpl/listener/MessageQueueHandler;
       4: invokevirtual #17                 // Method org/wso2/transport/http/netty/contractimpl/listener/MessageQueueHandler.readNextFrame:()V
       7: return

  public void startReadingFrames();
    Code:
       0: aload_0
       1: getfield      #3                  // Field ctx:Lio/netty/channel/ChannelHandlerContext;
       4: invokeinterface #18,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.pipeline:()Lio/netty/channel/ChannelPipeline;
       9: astore_1
      10: aload_1
      11: ldc           #19                 // String MESSAGE_QUEUE_HANDLER
      13: invokeinterface #20,  2           // InterfaceMethod io/netty/channel/ChannelPipeline.get:(Ljava/lang/String;)Lio/netty/channel/ChannelHandler;
      18: ifnull        38
      21: aload_0
      22: getfield      #3                  // Field ctx:Lio/netty/channel/ChannelHandlerContext;
      25: invokeinterface #18,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.pipeline:()Lio/netty/channel/ChannelPipeline;
      30: ldc           #19                 // String MESSAGE_QUEUE_HANDLER
      32: invokeinterface #21,  2           // InterfaceMethod io/netty/channel/ChannelPipeline.remove:(Ljava/lang/String;)Lio/netty/channel/ChannelHandler;
      37: pop
      38: aload_0
      39: getfield      #3                  // Field ctx:Lio/netty/channel/ChannelHandlerContext;
      42: invokeinterface #9,  1            // InterfaceMethod io/netty/channel/ChannelHandlerContext.channel:()Lio/netty/channel/Channel;
      47: invokeinterface #22,  1           // InterfaceMethod io/netty/channel/Channel.config:()Lio/netty/channel/ChannelConfig;
      52: iconst_1
      53: invokeinterface #23,  2           // InterfaceMethod io/netty/channel/ChannelConfig.setAutoRead:(Z)Lio/netty/channel/ChannelConfig;
      58: pop
      59: return

  public void stopReadingFrames();
    Code:
       0: aload_0
       1: getfield      #3                  // Field ctx:Lio/netty/channel/ChannelHandlerContext;
       4: invokeinterface #9,  1            // InterfaceMethod io/netty/channel/ChannelHandlerContext.channel:()Lio/netty/channel/Channel;
       9: invokeinterface #22,  1           // InterfaceMethod io/netty/channel/Channel.config:()Lio/netty/channel/ChannelConfig;
      14: iconst_0
      15: invokeinterface #23,  2           // InterfaceMethod io/netty/channel/ChannelConfig.setAutoRead:(Z)Lio/netty/channel/ChannelConfig;
      20: pop
      21: aload_0
      22: getfield      #3                  // Field ctx:Lio/netty/channel/ChannelHandlerContext;
      25: invokeinterface #18,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.pipeline:()Lio/netty/channel/ChannelPipeline;
      30: astore_1
      31: aload_1
      32: ldc           #19                 // String MESSAGE_QUEUE_HANDLER
      34: invokeinterface #20,  2           // InterfaceMethod io/netty/channel/ChannelPipeline.get:(Ljava/lang/String;)Lio/netty/channel/ChannelHandler;
      39: ifnonnull     65
      42: aload_0
      43: getfield      #3                  // Field ctx:Lio/netty/channel/ChannelHandlerContext;
      46: invokeinterface #18,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.pipeline:()Lio/netty/channel/ChannelPipeline;
      51: ldc           #24                 // String WEBSOCKET_FRAME_HANDLER
      53: ldc           #19                 // String MESSAGE_QUEUE_HANDLER
      55: aload_0
      56: getfield      #7                  // Field messageQueueHandler:Lorg/wso2/transport/http/netty/contractimpl/listener/MessageQueueHandler;
      59: invokeinterface #25,  4           // InterfaceMethod io/netty/channel/ChannelPipeline.addBefore:(Ljava/lang/String;Ljava/lang/String;Lio/netty/channel/ChannelHandler;)Lio/netty/channel/ChannelPipeline;
      64: pop
      65: return

  public io.netty.channel.ChannelFuture pushText(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_1
       3: invokevirtual #26                 // Method pushText:(Ljava/lang/String;Z)Lio/netty/channel/ChannelFuture;
       6: areturn

  public io.netty.channel.ChannelFuture pushText(java.lang.String, boolean);
    Code:
       0: aload_0
       1: getfield      #27                 // Field continuationFrameType:Lorg/wso2/transport/http/netty/contract/websocket/WebSocketFrameType;
       4: getstatic     #28                 // Field org/wso2/transport/http/netty/contract/websocket/WebSocketFrameType.BINARY:Lorg/wso2/transport/http/netty/contract/websocket/WebSocketFrameType;
       7: if_acmpne     20
      10: new           #29                 // class java/lang/IllegalStateException
      13: dup
      14: ldc           #30                 // String Cannot interrupt WebSocket binary frame continuation
      16: invokespecial #31                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      19: athrow
      20: aload_0
      21: getfield      #32                 // Field closeFrameSent:Z
      24: ifeq          37
      27: new           #29                 // class java/lang/IllegalStateException
      30: dup
      31: ldc           #33                 // String Close frame already sent. Cannot push text data!
      33: invokespecial #31                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      36: athrow
      37: aload_0
      38: getfield      #27                 // Field continuationFrameType:Lorg/wso2/transport/http/netty/contract/websocket/WebSocketFrameType;
      41: ifnull        73
      44: iload_2
      45: ifeq          53
      48: aload_0
      49: aconst_null
      50: putfield      #27                 // Field continuationFrameType:Lorg/wso2/transport/http/netty/contract/websocket/WebSocketFrameType;
      53: aload_0
      54: getfield      #3                  // Field ctx:Lio/netty/channel/ChannelHandlerContext;
      57: new           #34                 // class io/netty/handler/codec/http/websocketx/ContinuationWebSocketFrame
      60: dup
      61: iload_2
      62: iconst_0
      63: aload_1
      64: invokespecial #35                 // Method io/netty/handler/codec/http/websocketx/ContinuationWebSocketFrame."<init>":(ZILjava/lang/String;)V
      67: invokeinterface #36,  2           // InterfaceMethod io/netty/channel/ChannelHandlerContext.writeAndFlush:(Ljava/lang/Object;)Lio/netty/channel/ChannelFuture;
      72: areturn
      73: iload_2
      74: ifne          84
      77: aload_0
      78: getstatic     #37                 // Field org/wso2/transport/http/netty/contract/websocket/WebSocketFrameType.TEXT:Lorg/wso2/transport/http/netty/contract/websocket/WebSocketFrameType;
      81: putfield      #27                 // Field continuationFrameType:Lorg/wso2/transport/http/netty/contract/websocket/WebSocketFrameType;
      84: aload_0
      85: getfield      #3                  // Field ctx:Lio/netty/channel/ChannelHandlerContext;
      88: new           #38                 // class io/netty/handler/codec/http/websocketx/TextWebSocketFrame
      91: dup
      92: iload_2
      93: iconst_0
      94: aload_1
      95: invokespecial #39                 // Method io/netty/handler/codec/http/websocketx/TextWebSocketFrame."<init>":(ZILjava/lang/String;)V
      98: invokeinterface #36,  2           // InterfaceMethod io/netty/channel/ChannelHandlerContext.writeAndFlush:(Ljava/lang/Object;)Lio/netty/channel/ChannelFuture;
     103: areturn

  public io.netty.channel.ChannelFuture pushBinary(java.nio.ByteBuffer);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_1
       3: invokevirtual #40                 // Method pushBinary:(Ljava/nio/ByteBuffer;Z)Lio/netty/channel/ChannelFuture;
       6: areturn

  public io.netty.channel.ChannelFuture pushBinary(java.nio.ByteBuffer, boolean);
    Code:
       0: aload_0
       1: getfield      #27                 // Field continuationFrameType:Lorg/wso2/transport/http/netty/contract/websocket/WebSocketFrameType;
       4: getstatic     #37                 // Field org/wso2/transport/http/netty/contract/websocket/WebSocketFrameType.TEXT:Lorg/wso2/transport/http/netty/contract/websocket/WebSocketFrameType;
       7: if_acmpne     20
      10: new           #29                 // class java/lang/IllegalStateException
      13: dup
      14: ldc           #41                 // String Cannot interrupt WebSocket text frame continuation
      16: invokespecial #31                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      19: athrow
      20: aload_0
      21: getfield      #32                 // Field closeFrameSent:Z
      24: ifeq          37
      27: new           #29                 // class java/lang/IllegalStateException
      30: dup
      31: ldc           #42                 // String Close frame already sent. Cannot push binary data.
      33: invokespecial #31                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      36: athrow
      37: aload_0
      38: getfield      #27                 // Field continuationFrameType:Lorg/wso2/transport/http/netty/contract/websocket/WebSocketFrameType;
      41: ifnull        77
      44: iload_2
      45: ifeq          53
      48: aload_0
      49: aconst_null
      50: putfield      #27                 // Field continuationFrameType:Lorg/wso2/transport/http/netty/contract/websocket/WebSocketFrameType;
      53: aload_0
      54: getfield      #3                  // Field ctx:Lio/netty/channel/ChannelHandlerContext;
      57: new           #34                 // class io/netty/handler/codec/http/websocketx/ContinuationWebSocketFrame
      60: dup
      61: iload_2
      62: iconst_0
      63: aload_0
      64: aload_1
      65: invokespecial #43                 // Method getNettyByteBuf:(Ljava/nio/ByteBuffer;)Lio/netty/buffer/ByteBuf;
      68: invokespecial #44                 // Method io/netty/handler/codec/http/websocketx/ContinuationWebSocketFrame."<init>":(ZILio/netty/buffer/ByteBuf;)V
      71: invokeinterface #36,  2           // InterfaceMethod io/netty/channel/ChannelHandlerContext.writeAndFlush:(Ljava/lang/Object;)Lio/netty/channel/ChannelFuture;
      76: areturn
      77: iload_2
      78: ifne          88
      81: aload_0
      82: getstatic     #28                 // Field org/wso2/transport/http/netty/contract/websocket/WebSocketFrameType.BINARY:Lorg/wso2/transport/http/netty/contract/websocket/WebSocketFrameType;
      85: putfield      #27                 // Field continuationFrameType:Lorg/wso2/transport/http/netty/contract/websocket/WebSocketFrameType;
      88: aload_0
      89: getfield      #3                  // Field ctx:Lio/netty/channel/ChannelHandlerContext;
      92: new           #45                 // class io/netty/handler/codec/http/websocketx/BinaryWebSocketFrame
      95: dup
      96: iload_2
      97: iconst_0
      98: aload_0
      99: aload_1
     100: invokespecial #43                 // Method getNettyByteBuf:(Ljava/nio/ByteBuffer;)Lio/netty/buffer/ByteBuf;
     103: invokespecial #46                 // Method io/netty/handler/codec/http/websocketx/BinaryWebSocketFrame."<init>":(ZILio/netty/buffer/ByteBuf;)V
     106: invokeinterface #36,  2           // InterfaceMethod io/netty/channel/ChannelHandlerContext.writeAndFlush:(Ljava/lang/Object;)Lio/netty/channel/ChannelFuture;
     111: areturn

  public io.netty.channel.ChannelFuture ping(java.nio.ByteBuffer);
    Code:
       0: aload_0
       1: getfield      #3                  // Field ctx:Lio/netty/channel/ChannelHandlerContext;
       4: new           #47                 // class io/netty/handler/codec/http/websocketx/PingWebSocketFrame
       7: dup
       8: aload_0
       9: aload_1
      10: invokespecial #43                 // Method getNettyByteBuf:(Ljava/nio/ByteBuffer;)Lio/netty/buffer/ByteBuf;
      13: invokespecial #48                 // Method io/netty/handler/codec/http/websocketx/PingWebSocketFrame."<init>":(Lio/netty/buffer/ByteBuf;)V
      16: invokeinterface #36,  2           // InterfaceMethod io/netty/channel/ChannelHandlerContext.writeAndFlush:(Ljava/lang/Object;)Lio/netty/channel/ChannelFuture;
      21: areturn

  public io.netty.channel.ChannelFuture pong(java.nio.ByteBuffer);
    Code:
       0: aload_0
       1: getfield      #3                  // Field ctx:Lio/netty/channel/ChannelHandlerContext;
       4: new           #49                 // class io/netty/handler/codec/http/websocketx/PongWebSocketFrame
       7: dup
       8: aload_0
       9: aload_1
      10: invokespecial #43                 // Method getNettyByteBuf:(Ljava/nio/ByteBuffer;)Lio/netty/buffer/ByteBuf;
      13: invokespecial #50                 // Method io/netty/handler/codec/http/websocketx/PongWebSocketFrame."<init>":(Lio/netty/buffer/ByteBuf;)V
      16: invokeinterface #36,  2           // InterfaceMethod io/netty/channel/ChannelHandlerContext.writeAndFlush:(Ljava/lang/Object;)Lio/netty/channel/ChannelFuture;
      21: areturn

  public io.netty.channel.ChannelFuture initiateConnectionClosure(int, java.lang.String);
    Code:
       0: aload_0
       1: new           #51                 // class io/netty/handler/codec/http/websocketx/CloseWebSocketFrame
       4: dup
       5: iload_1
       6: aload_2
       7: invokespecial #52                 // Method io/netty/handler/codec/http/websocketx/CloseWebSocketFrame."<init>":(ILjava/lang/String;)V
      10: invokespecial #53                 // Method initiateConnectionClosure:(Lio/netty/handler/codec/http/websocketx/CloseWebSocketFrame;)Lio/netty/channel/ChannelFuture;
      13: areturn

  public io.netty.channel.ChannelFuture initiateConnectionClosure();
    Code:
       0: aload_0
       1: new           #51                 // class io/netty/handler/codec/http/websocketx/CloseWebSocketFrame
       4: dup
       5: invokespecial #54                 // Method io/netty/handler/codec/http/websocketx/CloseWebSocketFrame."<init>":()V
       8: invokespecial #53                 // Method initiateConnectionClosure:(Lio/netty/handler/codec/http/websocketx/CloseWebSocketFrame;)Lio/netty/channel/ChannelFuture;
      11: areturn

  private io.netty.channel.ChannelFuture initiateConnectionClosure(io.netty.handler.codec.http.websocketx.CloseWebSocketFrame);
    Code:
       0: aload_0
       1: getfield      #32                 // Field closeFrameSent:Z
       4: ifeq          17
       7: new           #29                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #55                 // String Close frame already sent. Cannot send close frame again.
      13: invokespecial #31                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: iconst_1
      19: putfield      #32                 // Field closeFrameSent:Z
      22: aload_0
      23: aload_1
      24: invokevirtual #56                 // Method io/netty/handler/codec/http/websocketx/CloseWebSocketFrame.statusCode:()I
      27: putfield      #57                 // Field closeInitiatedStatusCode:I
      30: aload_0
      31: aload_0
      32: getfield      #57                 // Field closeInitiatedStatusCode:I
      35: iconst_m1
      36: if_icmpne     45
      39: sipush        1005
      42: goto          49
      45: aload_0
      46: getfield      #57                 // Field closeInitiatedStatusCode:I
      49: putfield      #57                 // Field closeInitiatedStatusCode:I
      52: aload_0
      53: getfield      #3                  // Field ctx:Lio/netty/channel/ChannelHandlerContext;
      56: invokeinterface #58,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.newPromise:()Lio/netty/channel/ChannelPromise;
      61: astore_2
      62: aload_0
      63: getfield      #3                  // Field ctx:Lio/netty/channel/ChannelHandlerContext;
      66: aload_1
      67: invokeinterface #36,  2           // InterfaceMethod io/netty/channel/ChannelHandlerContext.writeAndFlush:(Ljava/lang/Object;)Lio/netty/channel/ChannelFuture;
      72: aload_0
      73: aload_2
      74: invokedynamic #59,  0             // InvokeDynamic #0:operationComplete:(Lorg/wso2/transport/http/netty/contractimpl/websocket/DefaultWebSocketConnection;Lio/netty/channel/ChannelPromise;)Lio/netty/util/concurrent/GenericFutureListener;
      79: invokeinterface #60,  2           // InterfaceMethod io/netty/channel/ChannelFuture.addListener:(Lio/netty/util/concurrent/GenericFutureListener;)Lio/netty/channel/ChannelFuture;
      84: pop
      85: aload_2
      86: areturn

  public io.netty.channel.ChannelFuture finishConnectionClosure(int, java.lang.String);
    Code:
       0: aload_0
       1: new           #51                 // class io/netty/handler/codec/http/websocketx/CloseWebSocketFrame
       4: dup
       5: iload_1
       6: aload_2
       7: invokespecial #52                 // Method io/netty/handler/codec/http/websocketx/CloseWebSocketFrame."<init>":(ILjava/lang/String;)V
      10: invokespecial #61                 // Method finishConnectionClosure:(Lio/netty/handler/codec/http/websocketx/CloseWebSocketFrame;)Lio/netty/channel/ChannelFuture;
      13: areturn

  public io.netty.channel.ChannelFuture finishConnectionClosure();
    Code:
       0: aload_0
       1: new           #51                 // class io/netty/handler/codec/http/websocketx/CloseWebSocketFrame
       4: dup
       5: invokespecial #54                 // Method io/netty/handler/codec/http/websocketx/CloseWebSocketFrame."<init>":()V
       8: invokespecial #61                 // Method finishConnectionClosure:(Lio/netty/handler/codec/http/websocketx/CloseWebSocketFrame;)Lio/netty/channel/ChannelFuture;
      11: areturn

  private io.netty.channel.ChannelFuture finishConnectionClosure(io.netty.handler.codec.http.websocketx.CloseWebSocketFrame);
    Code:
       0: aload_0
       1: getfield      #6                  // Field frameHandler:Lorg/wso2/transport/http/netty/contractimpl/websocket/WebSocketInboundFrameHandler;
       4: invokevirtual #62                 // Method org/wso2/transport/http/netty/contractimpl/websocket/WebSocketInboundFrameHandler.isCloseFrameReceived:()Z
       7: ifne          20
      10: new           #29                 // class java/lang/IllegalStateException
      13: dup
      14: ldc           #63                 // String Cannot finish a connection closure without receiving a close frame
      16: invokespecial #31                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      19: athrow
      20: aload_0
      21: getfield      #3                  // Field ctx:Lio/netty/channel/ChannelHandlerContext;
      24: invokeinterface #58,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.newPromise:()Lio/netty/channel/ChannelPromise;
      29: astore_2
      30: aload_0
      31: getfield      #3                  // Field ctx:Lio/netty/channel/ChannelHandlerContext;
      34: aload_1
      35: invokeinterface #36,  2           // InterfaceMethod io/netty/channel/ChannelHandlerContext.writeAndFlush:(Ljava/lang/Object;)Lio/netty/channel/ChannelFuture;
      40: aload_0
      41: aload_2
      42: invokedynamic #64,  0             // InvokeDynamic #1:operationComplete:(Lorg/wso2/transport/http/netty/contractimpl/websocket/DefaultWebSocketConnection;Lio/netty/channel/ChannelPromise;)Lio/netty/util/concurrent/GenericFutureListener;
      47: invokeinterface #60,  2           // InterfaceMethod io/netty/channel/ChannelFuture.addListener:(Lio/netty/util/concurrent/GenericFutureListener;)Lio/netty/channel/ChannelFuture;
      52: pop
      53: aload_2
      54: areturn

  public io.netty.channel.ChannelFuture terminateConnection();
    Code:
       0: aload_0
       1: getfield      #6                  // Field frameHandler:Lorg/wso2/transport/http/netty/contractimpl/websocket/WebSocketInboundFrameHandler;
       4: iconst_1
       5: invokevirtual #65                 // Method org/wso2/transport/http/netty/contractimpl/websocket/WebSocketInboundFrameHandler.setCloseInitialized:(Z)V
       8: aload_0
       9: getfield      #3                  // Field ctx:Lio/netty/channel/ChannelHandlerContext;
      12: invokeinterface #66,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.close:()Lio/netty/channel/ChannelFuture;
      17: areturn

  public io.netty.channel.ChannelFuture terminateConnection(int, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #32                 // Field closeFrameSent:Z
       4: ifeq          17
       7: new           #29                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #55                 // String Close frame already sent. Cannot send close frame again.
      13: invokespecial #31                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: iconst_1
      19: putfield      #32                 // Field closeFrameSent:Z
      22: aload_0
      23: getfield      #3                  // Field ctx:Lio/netty/channel/ChannelHandlerContext;
      26: invokeinterface #58,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.newPromise:()Lio/netty/channel/ChannelPromise;
      31: astore_3
      32: aload_0
      33: getfield      #3                  // Field ctx:Lio/netty/channel/ChannelHandlerContext;
      36: new           #51                 // class io/netty/handler/codec/http/websocketx/CloseWebSocketFrame
      39: dup
      40: iload_1
      41: aload_2
      42: invokespecial #52                 // Method io/netty/handler/codec/http/websocketx/CloseWebSocketFrame."<init>":(ILjava/lang/String;)V
      45: invokeinterface #36,  2           // InterfaceMethod io/netty/channel/ChannelHandlerContext.writeAndFlush:(Ljava/lang/Object;)Lio/netty/channel/ChannelFuture;
      50: aload_0
      51: aload_3
      52: invokedynamic #67,  0             // InvokeDynamic #2:operationComplete:(Lorg/wso2/transport/http/netty/contractimpl/websocket/DefaultWebSocketConnection;Lio/netty/channel/ChannelPromise;)Lio/netty/util/concurrent/GenericFutureListener;
      57: invokeinterface #60,  2           // InterfaceMethod io/netty/channel/ChannelFuture.addListener:(Lio/netty/util/concurrent/GenericFutureListener;)Lio/netty/channel/ChannelFuture;
      62: pop
      63: aload_3
      64: areturn

  int getCloseInitiatedStatusCode();
    Code:
       0: aload_0
       1: getfield      #57                 // Field closeInitiatedStatusCode:I
       4: ireturn

  private io.netty.buffer.ByteBuf getNettyByteBuf(java.nio.ByteBuffer);
    Code:
       0: aload_1
       1: invokestatic  #68                 // Method io/netty/buffer/Unpooled.wrappedBuffer:(Ljava/nio/ByteBuffer;)Lio/netty/buffer/ByteBuf;
       4: areturn

  private void lambda$terminateConnection$51(io.netty.channel.ChannelPromise, io.netty.util.concurrent.Future) throws java.lang.Exception;
    Code:
       0: aload_0
       1: getfield      #6                  // Field frameHandler:Lorg/wso2/transport/http/netty/contractimpl/websocket/WebSocketInboundFrameHandler;
       4: iconst_1
       5: invokevirtual #65                 // Method org/wso2/transport/http/netty/contractimpl/websocket/WebSocketInboundFrameHandler.setCloseInitialized:(Z)V
       8: aload_2
       9: invokeinterface #69,  1           // InterfaceMethod io/netty/util/concurrent/Future.cause:()Ljava/lang/Throwable;
      14: astore_3
      15: aload_2
      16: invokeinterface #70,  1           // InterfaceMethod io/netty/util/concurrent/Future.isSuccess:()Z
      21: ifne          47
      24: aload_3
      25: ifnull        47
      28: aload_1
      29: aload_3
      30: invokeinterface #71,  2           // InterfaceMethod io/netty/channel/ChannelPromise.setFailure:(Ljava/lang/Throwable;)Lio/netty/channel/ChannelPromise;
      35: pop
      36: aload_0
      37: getfield      #3                  // Field ctx:Lio/netty/channel/ChannelHandlerContext;
      40: invokeinterface #66,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.close:()Lio/netty/channel/ChannelFuture;
      45: pop
      46: return
      47: aload_0
      48: getfield      #3                  // Field ctx:Lio/netty/channel/ChannelHandlerContext;
      51: invokeinterface #66,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.close:()Lio/netty/channel/ChannelFuture;
      56: aload_1
      57: invokedynamic #72,  0             // InvokeDynamic #3:operationComplete:(Lio/netty/channel/ChannelPromise;)Lio/netty/util/concurrent/GenericFutureListener;
      62: invokeinterface #60,  2           // InterfaceMethod io/netty/channel/ChannelFuture.addListener:(Lio/netty/util/concurrent/GenericFutureListener;)Lio/netty/channel/ChannelFuture;
      67: pop
      68: return

  private static void lambda$null$50(io.netty.channel.ChannelPromise, io.netty.util.concurrent.Future) throws java.lang.Exception;
    Code:
       0: aload_1
       1: invokeinterface #69,  1           // InterfaceMethod io/netty/util/concurrent/Future.cause:()Ljava/lang/Throwable;
       6: astore_2
       7: aload_1
       8: invokeinterface #70,  1           // InterfaceMethod io/netty/util/concurrent/Future.isSuccess:()Z
      13: ifne          31
      16: aload_2
      17: ifnull        31
      20: aload_0
      21: aload_2
      22: invokeinterface #71,  2           // InterfaceMethod io/netty/channel/ChannelPromise.setFailure:(Ljava/lang/Throwable;)Lio/netty/channel/ChannelPromise;
      27: pop
      28: goto          38
      31: aload_0
      32: invokeinterface #73,  1           // InterfaceMethod io/netty/channel/ChannelPromise.setSuccess:()Lio/netty/channel/ChannelPromise;
      37: pop
      38: return

  private void lambda$finishConnectionClosure$49(io.netty.channel.ChannelPromise, io.netty.util.concurrent.Future) throws java.lang.Exception;
    Code:
       0: aload_2
       1: invokeinterface #69,  1           // InterfaceMethod io/netty/util/concurrent/Future.cause:()Ljava/lang/Throwable;
       6: astore_3
       7: aload_2
       8: invokeinterface #70,  1           // InterfaceMethod io/netty/util/concurrent/Future.isSuccess:()Z
      13: ifne          43
      16: aload_3
      17: ifnull        43
      20: aload_0
      21: getfield      #3                  // Field ctx:Lio/netty/channel/ChannelHandlerContext;
      24: invokeinterface #66,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.close:()Lio/netty/channel/ChannelFuture;
      29: aload_1
      30: aload_3
      31: invokedynamic #74,  0             // InvokeDynamic #4:operationComplete:(Lio/netty/channel/ChannelPromise;Ljava/lang/Throwable;)Lio/netty/util/concurrent/GenericFutureListener;
      36: invokeinterface #60,  2           // InterfaceMethod io/netty/channel/ChannelFuture.addListener:(Lio/netty/util/concurrent/GenericFutureListener;)Lio/netty/channel/ChannelFuture;
      41: pop
      42: return
      43: aload_0
      44: getfield      #3                  // Field ctx:Lio/netty/channel/ChannelHandlerContext;
      47: invokeinterface #66,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.close:()Lio/netty/channel/ChannelFuture;
      52: aload_1
      53: invokedynamic #75,  0             // InvokeDynamic #5:operationComplete:(Lio/netty/channel/ChannelPromise;)Lio/netty/util/concurrent/GenericFutureListener;
      58: invokeinterface #60,  2           // InterfaceMethod io/netty/channel/ChannelFuture.addListener:(Lio/netty/util/concurrent/GenericFutureListener;)Lio/netty/channel/ChannelFuture;
      63: pop
      64: return

  private static void lambda$null$48(io.netty.channel.ChannelPromise, io.netty.util.concurrent.Future) throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokeinterface #73,  1           // InterfaceMethod io/netty/channel/ChannelPromise.setSuccess:()Lio/netty/channel/ChannelPromise;
       6: pop
       7: return

  private static void lambda$null$47(io.netty.channel.ChannelPromise, java.lang.Throwable, io.netty.util.concurrent.Future) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #71,  2           // InterfaceMethod io/netty/channel/ChannelPromise.setFailure:(Ljava/lang/Throwable;)Lio/netty/channel/ChannelPromise;
       7: pop
       8: return

  private void lambda$initiateConnectionClosure$46(io.netty.channel.ChannelPromise, io.netty.util.concurrent.Future) throws java.lang.Exception;
    Code:
       0: aload_0
       1: getfield      #6                  // Field frameHandler:Lorg/wso2/transport/http/netty/contractimpl/websocket/WebSocketInboundFrameHandler;
       4: aload_1
       5: invokevirtual #76                 // Method org/wso2/transport/http/netty/contractimpl/websocket/WebSocketInboundFrameHandler.setClosePromise:(Lio/netty/channel/ChannelPromise;)V
       8: aload_2
       9: invokeinterface #69,  1           // InterfaceMethod io/netty/util/concurrent/Future.cause:()Ljava/lang/Throwable;
      14: astore_3
      15: aload_2
      16: invokeinterface #70,  1           // InterfaceMethod io/netty/util/concurrent/Future.isSuccess:()Z
      21: ifne          50
      24: aload_3
      25: ifnull        50
      28: aload_0
      29: getfield      #3                  // Field ctx:Lio/netty/channel/ChannelHandlerContext;
      32: invokeinterface #66,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.close:()Lio/netty/channel/ChannelFuture;
      37: aload_1
      38: aload_3
      39: invokedynamic #77,  0             // InvokeDynamic #6:operationComplete:(Lio/netty/channel/ChannelPromise;Ljava/lang/Throwable;)Lio/netty/util/concurrent/GenericFutureListener;
      44: invokeinterface #60,  2           // InterfaceMethod io/netty/channel/ChannelFuture.addListener:(Lio/netty/util/concurrent/GenericFutureListener;)Lio/netty/channel/ChannelFuture;
      49: pop
      50: return

  private static void lambda$null$45(io.netty.channel.ChannelPromise, java.lang.Throwable, io.netty.util.concurrent.Future) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #71,  2           // InterfaceMethod io/netty/channel/ChannelPromise.setFailure:(Ljava/lang/Throwable;)Lio/netty/channel/ChannelPromise;
       7: pop
       8: return
}
