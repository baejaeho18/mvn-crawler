Compiled from "SourceHandler.java"
public class org.wso2.transport.http.netty.contractimpl.listener.SourceHandler extends io.netty.channel.ChannelInboundHandlerAdapter {
  private static final org.slf4j.Logger LOG;

  private org.wso2.transport.http.netty.message.HttpCarbonMessage inboundRequestMsg;

  private final java.util.Map<java.lang.Integer, org.wso2.transport.http.netty.message.HttpCarbonMessage> requestSet;

  private org.wso2.transport.http.netty.internal.HandlerExecutor handlerExecutor;

  private java.util.Map<java.lang.String, org.apache.commons.pool.impl.GenericObjectPool> targetChannelPool;

  private org.wso2.transport.http.netty.contract.config.ChunkConfig chunkConfig;

  private org.wso2.transport.http.netty.contract.config.KeepAliveConfig keepAliveConfig;

  private org.wso2.transport.http.netty.contract.ServerConnectorFuture serverConnectorFuture;

  private java.lang.String interfaceId;

  private java.lang.String serverName;

  private boolean idleTimeout;

  private io.netty.channel.group.ChannelGroup allChannels;

  protected io.netty.channel.ChannelHandlerContext ctx;

  private java.net.SocketAddress remoteAddress;

  private boolean connectedState;

  private boolean pipeliningEnabled;

  private long pipeliningLimit;

  private long sequenceId;

  private final java.util.Queue holdingQueue;

  private io.netty.util.concurrent.EventExecutorGroup pipeliningGroup;

  public org.wso2.transport.http.netty.contractimpl.listener.SourceHandler(org.wso2.transport.http.netty.contract.ServerConnectorFuture, java.lang.String, org.wso2.transport.http.netty.contract.config.ChunkConfig, org.wso2.transport.http.netty.contract.config.KeepAliveConfig, java.lang.String, io.netty.channel.group.ChannelGroup, boolean, long, io.netty.util.concurrent.EventExecutorGroup);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method io/netty/channel/ChannelInboundHandlerAdapter."<init>":()V
       4: aload_0
       5: new           #3                  // class java/util/concurrent/ConcurrentHashMap
       8: dup
       9: invokespecial #4                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      12: putfield      #5                  // Field requestSet:Ljava/util/Map;
      15: aload_0
      16: lconst_1
      17: putfield      #6                  // Field sequenceId:J
      20: aload_0
      21: new           #7                  // class java/util/PriorityQueue
      24: dup
      25: iconst_3
      26: invokespecial #8                  // Method java/util/PriorityQueue."<init>":(I)V
      29: putfield      #9                  // Field holdingQueue:Ljava/util/Queue;
      32: aload_0
      33: aload_1
      34: putfield      #10                 // Field serverConnectorFuture:Lorg/wso2/transport/http/netty/contract/ServerConnectorFuture;
      37: aload_0
      38: aload_2
      39: putfield      #11                 // Field interfaceId:Ljava/lang/String;
      42: aload_0
      43: aload_3
      44: putfield      #12                 // Field chunkConfig:Lorg/wso2/transport/http/netty/contract/config/ChunkConfig;
      47: aload_0
      48: aload         4
      50: putfield      #13                 // Field keepAliveConfig:Lorg/wso2/transport/http/netty/contract/config/KeepAliveConfig;
      53: aload_0
      54: new           #3                  // class java/util/concurrent/ConcurrentHashMap
      57: dup
      58: invokespecial #4                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      61: putfield      #14                 // Field targetChannelPool:Ljava/util/Map;
      64: aload_0
      65: iconst_0
      66: putfield      #15                 // Field idleTimeout:Z
      69: aload_0
      70: aload         5
      72: putfield      #16                 // Field serverName:Ljava/lang/String;
      75: aload_0
      76: aload         6
      78: putfield      #17                 // Field allChannels:Lio/netty/channel/group/ChannelGroup;
      81: aload_0
      82: iload         7
      84: putfield      #18                 // Field pipeliningEnabled:Z
      87: aload_0
      88: lload         8
      90: putfield      #19                 // Field pipeliningLimit:J
      93: aload_0
      94: aload         10
      96: putfield      #20                 // Field pipeliningGroup:Lio/netty/util/concurrent/EventExecutorGroup;
      99: return

  public void channelRead(io.netty.channel.ChannelHandlerContext, java.lang.Object) throws java.lang.Exception;
    Code:
       0: aload_2
       1: instanceof    #21                 // class io/netty/handler/codec/http/HttpRequest
       4: ifeq          151
       7: aload_0
       8: iconst_0
       9: invokevirtual #22                 // Method setConnectedState:(Z)V
      12: aload_0
      13: aload_2
      14: checkcast     #21                 // class io/netty/handler/codec/http/HttpRequest
      17: aload_1
      18: aload_0
      19: invokestatic  #23                 // Method org/wso2/transport/http/netty/contractimpl/common/Util.createInboundReqCarbonMsg:(Lio/netty/handler/codec/http/HttpRequest;Lio/netty/channel/ChannelHandlerContext;Lorg/wso2/transport/http/netty/contractimpl/listener/SourceHandler;)Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
      22: putfield      #24                 // Field inboundRequestMsg:Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
      25: aload_0
      26: getfield      #5                  // Field requestSet:Ljava/util/Map;
      29: invokeinterface #25,  1           // InterfaceMethod java/util/Map.size:()I
      34: i2l
      35: aload_0
      36: getfield      #19                 // Field pipeliningLimit:J
      39: lcmp
      40: ifle          70
      43: getstatic     #26                 // Field LOG:Lorg/slf4j/Logger;
      46: ldc           #27                 // String Pipelining request limit exceeded hence closing the channel {}
      48: aload_1
      49: invokeinterface #28,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.channel:()Lio/netty/channel/Channel;
      54: invokeinterface #29,  1           // InterfaceMethod io/netty/channel/Channel.id:()Lio/netty/channel/ChannelId;
      59: invokeinterface #30,  3           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;)V
      64: aload_0
      65: aload_1
      66: invokespecial #31                 // Method closeChannel:(Lio/netty/channel/ChannelHandlerContext;)V
      69: return
      70: aload_0
      71: getfield      #5                  // Field requestSet:Ljava/util/Map;
      74: aload_0
      75: getfield      #24                 // Field inboundRequestMsg:Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
      78: invokevirtual #32                 // Method java/lang/Object.hashCode:()I
      81: invokestatic  #33                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      84: aload_0
      85: getfield      #24                 // Field inboundRequestMsg:Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
      88: invokeinterface #34,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      93: pop
      94: new           #35                 // class org/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext
      97: dup
      98: invokespecial #36                 // Method org/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext."<init>":()V
     101: astore_3
     102: aload_0
     103: getfield      #24                 // Field inboundRequestMsg:Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
     106: aload_3
     107: invokevirtual #37                 // Method org/wso2/transport/http/netty/message/HttpCarbonMessage.setMessageStateContext:(Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;)V
     110: aload_0
     111: invokespecial #38                 // Method setRequestProperties:()V
     114: aload_0
     115: invokespecial #39                 // Method setSequenceNumber:()V
     118: aload_3
     119: new           #40                 // class org/wso2/transport/http/netty/contractimpl/listener/states/ReceivingHeaders
     122: dup
     123: aload_0
     124: aload_3
     125: invokespecial #41                 // Method org/wso2/transport/http/netty/contractimpl/listener/states/ReceivingHeaders."<init>":(Lorg/wso2/transport/http/netty/contractimpl/listener/SourceHandler;Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;)V
     128: invokevirtual #42                 // Method org/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext.setListenerState:(Lorg/wso2/transport/http/netty/contractimpl/listener/states/ListenerState;)V
     131: aload_3
     132: invokevirtual #43                 // Method org/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext.getListenerState:()Lorg/wso2/transport/http/netty/contractimpl/listener/states/ListenerState;
     135: aload_0
     136: getfield      #24                 // Field inboundRequestMsg:Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
     139: aload_2
     140: checkcast     #21                 // class io/netty/handler/codec/http/HttpRequest
     143: invokeinterface #44,  3           // InterfaceMethod org/wso2/transport/http/netty/contractimpl/listener/states/ListenerState.readInboundRequestHeaders:(Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;Lio/netty/handler/codec/http/HttpRequest;)V
     148: goto          187
     151: aload_0
     152: getfield      #24                 // Field inboundRequestMsg:Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
     155: ifnull        177
     158: aload_0
     159: getfield      #24                 // Field inboundRequestMsg:Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
     162: invokevirtual #45                 // Method org/wso2/transport/http/netty/message/HttpCarbonMessage.getMessageStateContext:()Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;
     165: invokevirtual #43                 // Method org/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext.getListenerState:()Lorg/wso2/transport/http/netty/contractimpl/listener/states/ListenerState;
     168: aload_2
     169: invokeinterface #46,  2           // InterfaceMethod org/wso2/transport/http/netty/contractimpl/listener/states/ListenerState.readInboundRequestBody:(Ljava/lang/Object;)V
     174: goto          187
     177: getstatic     #26                 // Field LOG:Lorg/slf4j/Logger;
     180: ldc           #47                 // String Inconsistent state detected : inboundRequestMsg is null for channel read event
     182: invokeinterface #48,  2           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;)V
     187: return

  public void handlerAdded(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #49                 // Method io/netty/channel/ChannelInboundHandlerAdapter.handlerAdded:(Lio/netty/channel/ChannelHandlerContext;)V
       5: return

  public void channelActive(io.netty.channel.ChannelHandlerContext);
    Code:
       0: aload_0
       1: iconst_1
       2: invokevirtual #22                 // Method setConnectedState:(Z)V
       5: aload_0
       6: aload_1
       7: putfield      #50                 // Field ctx:Lio/netty/channel/ChannelHandlerContext;
      10: aload_0
      11: getfield      #17                 // Field allChannels:Lio/netty/channel/group/ChannelGroup;
      14: aload_1
      15: invokeinterface #28,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.channel:()Lio/netty/channel/Channel;
      20: invokeinterface #51,  2           // InterfaceMethod io/netty/channel/group/ChannelGroup.add:(Ljava/lang/Object;)Z
      25: pop
      26: aload_0
      27: invokespecial #52                 // Method setPipeliningProperties:()V
      30: aload_0
      31: invokestatic  #53                 // Method org/wso2/transport/http/netty/internal/HttpTransportContextHolder.getInstance:()Lorg/wso2/transport/http/netty/internal/HttpTransportContextHolder;
      34: invokevirtual #54                 // Method org/wso2/transport/http/netty/internal/HttpTransportContextHolder.getHandlerExecutor:()Lorg/wso2/transport/http/netty/internal/HandlerExecutor;
      37: putfield      #55                 // Field handlerExecutor:Lorg/wso2/transport/http/netty/internal/HandlerExecutor;
      40: aload_0
      41: getfield      #55                 // Field handlerExecutor:Lorg/wso2/transport/http/netty/internal/HandlerExecutor;
      44: ifnull        61
      47: aload_0
      48: getfield      #55                 // Field handlerExecutor:Lorg/wso2/transport/http/netty/internal/HandlerExecutor;
      51: aload_1
      52: invokevirtual #32                 // Method java/lang/Object.hashCode:()I
      55: invokestatic  #56                 // Method java/lang/Integer.toString:(I)Ljava/lang/String;
      58: invokevirtual #57                 // Method org/wso2/transport/http/netty/internal/HandlerExecutor.executeAtSourceConnectionInitiation:(Ljava/lang/String;)V
      61: aload_0
      62: aload_1
      63: invokeinterface #28,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.channel:()Lio/netty/channel/Channel;
      68: invokeinterface #58,  1           // InterfaceMethod io/netty/channel/Channel.remoteAddress:()Ljava/net/SocketAddress;
      73: putfield      #59                 // Field remoteAddress:Ljava/net/SocketAddress;
      76: return

  public void channelInactive(io.netty.channel.ChannelHandlerContext);
    Code:
       0: aload_0
       1: getfield      #15                 // Field idleTimeout:Z
       4: ifne          50
       7: aload_0
       8: getfield      #5                  // Field requestSet:Ljava/util/Map;
      11: invokeinterface #60,  1           // InterfaceMethod java/util/Map.isEmpty:()Z
      16: ifne          37
      19: aload_0
      20: getfield      #5                  // Field requestSet:Ljava/util/Map;
      23: aload_0
      24: invokedynamic #61,  0             // InvokeDynamic #0:accept:(Lorg/wso2/transport/http/netty/contractimpl/listener/SourceHandler;)Ljava/util/function/BiConsumer;
      29: invokeinterface #62,  2           // InterfaceMethod java/util/Map.forEach:(Ljava/util/function/BiConsumer;)V
      34: goto          50
      37: aload_0
      38: getfield      #63                 // Field connectedState:Z
      41: ifeq          50
      44: aload_0
      45: ldc           #64                 // String Remote client closed the connection before initiating inbound request
      47: invokespecial #65                 // Method notifyErrorListenerAtConnectedState:(Ljava/lang/String;)V
      50: aload_0
      51: invokespecial #66                 // Method closeTargetChannels:()V
      54: aload_0
      55: getfield      #55                 // Field handlerExecutor:Lorg/wso2/transport/http/netty/internal/HandlerExecutor;
      58: ifnull        80
      61: aload_0
      62: getfield      #55                 // Field handlerExecutor:Lorg/wso2/transport/http/netty/internal/HandlerExecutor;
      65: aload_1
      66: invokevirtual #32                 // Method java/lang/Object.hashCode:()I
      69: invokestatic  #56                 // Method java/lang/Integer.toString:(I)Ljava/lang/String;
      72: invokevirtual #67                 // Method org/wso2/transport/http/netty/internal/HandlerExecutor.executeAtSourceConnectionTermination:(Ljava/lang/String;)V
      75: aload_0
      76: aconst_null
      77: putfield      #55                 // Field handlerExecutor:Lorg/wso2/transport/http/netty/internal/HandlerExecutor;
      80: return

  private void closeTargetChannels();
    Code:
       0: aload_0
       1: getfield      #14                 // Field targetChannelPool:Ljava/util/Map;
       4: aload_0
       5: invokedynamic #68,  0             // InvokeDynamic #1:accept:(Lorg/wso2/transport/http/netty/contractimpl/listener/SourceHandler;)Ljava/util/function/BiConsumer;
      10: invokeinterface #62,  2           // InterfaceMethod java/util/Map.forEach:(Ljava/util/function/BiConsumer;)V
      15: return

  public void exceptionCaught(io.netty.channel.ChannelHandlerContext, java.lang.Throwable);
    Code:
       0: aload_1
       1: ifnull        36
       4: aload_1
       5: invokeinterface #28,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.channel:()Lio/netty/channel/Channel;
      10: invokeinterface #69,  1           // InterfaceMethod io/netty/channel/Channel.isActive:()Z
      15: ifeq          36
      18: aload_1
      19: getstatic     #70                 // Field io/netty/buffer/Unpooled.EMPTY_BUFFER:Lio/netty/buffer/ByteBuf;
      22: invokeinterface #71,  2           // InterfaceMethod io/netty/channel/ChannelHandlerContext.writeAndFlush:(Ljava/lang/Object;)Lio/netty/channel/ChannelFuture;
      27: getstatic     #72                 // Field io/netty/channel/ChannelFutureListener.CLOSE:Lio/netty/channel/ChannelFutureListener;
      30: invokeinterface #73,  2           // InterfaceMethod io/netty/channel/ChannelFuture.addListener:(Lio/netty/util/concurrent/GenericFutureListener;)Lio/netty/channel/ChannelFuture;
      35: pop
      36: getstatic     #26                 // Field LOG:Lorg/slf4j/Logger;
      39: ldc           #74                 // String Exception occurred in SourceHandler : {}
      41: aload_2
      42: invokevirtual #75                 // Method java/lang/Throwable.getMessage:()Ljava/lang/String;
      45: invokeinterface #30,  3           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;)V
      50: return

  public void userEventTriggered(io.netty.channel.ChannelHandlerContext, java.lang.Object);
    Code:
       0: aload_2
       1: instanceof    #76                 // class io/netty/handler/timeout/IdleStateEvent
       4: ifeq          92
       7: aload_0
       8: iconst_1
       9: putfield      #15                 // Field idleTimeout:Z
      12: aload_0
      13: getfield      #5                  // Field requestSet:Ljava/util/Map;
      16: invokeinterface #60,  1           // InterfaceMethod java/util/Map.isEmpty:()Z
      21: ifne          43
      24: aload_0
      25: getfield      #5                  // Field requestSet:Ljava/util/Map;
      28: aload_0
      29: aload_1
      30: invokedynamic #77,  0             // InvokeDynamic #2:accept:(Lorg/wso2/transport/http/netty/contractimpl/listener/SourceHandler;Lio/netty/channel/ChannelHandlerContext;)Ljava/util/function/BiConsumer;
      35: invokeinterface #62,  2           // InterfaceMethod java/util/Map.forEach:(Ljava/util/function/BiConsumer;)V
      40: goto          61
      43: aload_0
      44: aload_1
      45: invokespecial #31                 // Method closeChannel:(Lio/netty/channel/ChannelHandlerContext;)V
      48: aload_0
      49: getfield      #63                 // Field connectedState:Z
      52: ifeq          61
      55: aload_0
      56: ldc           #78                 // String Idle timeout triggered before initiating inbound request
      58: invokespecial #65                 // Method notifyErrorListenerAtConnectedState:(Ljava/lang/String;)V
      61: aload_1
      62: invokeinterface #28,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.channel:()Lio/netty/channel/Channel;
      67: invokeinterface #29,  1           // InterfaceMethod io/netty/channel/Channel.id:()Lio/netty/channel/ChannelId;
      72: invokeinterface #79,  1           // InterfaceMethod io/netty/channel/ChannelId.asShortText:()Ljava/lang/String;
      77: astore_3
      78: getstatic     #26                 // Field LOG:Lorg/slf4j/Logger;
      81: ldc           #80                 // String Idle timeout has reached hence closing the connection {}
      83: aload_3
      84: invokeinterface #81,  3           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Object;)V
      89: goto          163
      92: aload_2
      93: instanceof    #82                 // class io/netty/handler/codec/http/HttpServerUpgradeHandler$UpgradeEvent
      96: ifeq          112
      99: getstatic     #26                 // Field LOG:Lorg/slf4j/Logger;
     102: ldc           #83                 // String Server upgrade event received
     104: invokeinterface #84,  2           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;)V
     109: goto          163
     112: aload_2
     113: instanceof    #85                 // class io/netty/handler/ssl/SslCloseCompletionEvent
     116: ifeq          132
     119: getstatic     #26                 // Field LOG:Lorg/slf4j/Logger;
     122: ldc           #86                 // String SSL close completion event received
     124: invokeinterface #84,  2           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;)V
     129: goto          163
     132: aload_2
     133: instanceof    #87                 // class io/netty/channel/socket/ChannelInputShutdownReadComplete
     136: ifeq          152
     139: getstatic     #26                 // Field LOG:Lorg/slf4j/Logger;
     142: ldc           #88                 // String Input side of the connection is already shutdown
     144: invokeinterface #84,  2           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;)V
     149: goto          163
     152: getstatic     #26                 // Field LOG:Lorg/slf4j/Logger;
     155: ldc           #89                 // String Unexpected user event {} triggered
     157: aload_2
     158: invokeinterface #30,  3           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;)V
     163: return

  private void closeChannel(io.netty.channel.ChannelHandlerContext);
    Code:
       0: aload_1
       1: invokeinterface #90,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.close:()Lio/netty/channel/ChannelFuture;
       6: pop
       7: return

  private void notifyErrorListenerAtConnectedState(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #10                 // Field serverConnectorFuture:Lorg/wso2/transport/http/netty/contract/ServerConnectorFuture;
       4: new           #91                 // class org/wso2/transport/http/netty/contract/ServerConnectorException
       7: dup
       8: aload_1
       9: invokespecial #92                 // Method org/wso2/transport/http/netty/contract/ServerConnectorException."<init>":(Ljava/lang/String;)V
      12: invokeinterface #93,  2           // InterfaceMethod org/wso2/transport/http/netty/contract/ServerConnectorFuture.notifyErrorListener:(Ljava/lang/Throwable;)V
      17: getstatic     #26                 // Field LOG:Lorg/slf4j/Logger;
      20: aload_1
      21: invokeinterface #84,  2           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;)V
      26: goto          40
      29: astore_2
      30: getstatic     #26                 // Field LOG:Lorg/slf4j/Logger;
      33: ldc           #94                 // String Error while notifying error state to server-connector listener
      35: invokeinterface #95,  2           // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;)V
      40: return
    Exception table:
       from    to  target type
           0    26    29   Class org/wso2/transport/http/netty/contract/ServerConnectorException

  private void setRequestProperties();
    Code:
       0: aload_0
       1: getfield      #24                 // Field inboundRequestMsg:Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
       4: aload_0
       5: getfield      #18                 // Field pipeliningEnabled:Z
       8: invokevirtual #96                 // Method org/wso2/transport/http/netty/message/HttpCarbonMessage.setPipeliningEnabled:(Z)V
      11: aload_0
      12: getfield      #24                 // Field inboundRequestMsg:Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
      15: getstatic     #97                 // Field io/netty/handler/codec/http/HttpHeaderNames.CONNECTION:Lio/netty/util/AsciiString;
      18: invokevirtual #98                 // Method io/netty/util/AsciiString.toString:()Ljava/lang/String;
      21: invokevirtual #99                 // Method org/wso2/transport/http/netty/message/HttpCarbonMessage.getHeader:(Ljava/lang/String;)Ljava/lang/String;
      24: astore_1
      25: aload_0
      26: getfield      #24                 // Field inboundRequestMsg:Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
      29: ldc           #100                // String HTTP_VERSION
      31: invokevirtual #101                // Method org/wso2/transport/http/netty/message/HttpCarbonMessage.getProperty:(Ljava/lang/String;)Ljava/lang/Object;
      34: checkcast     #102                // class java/lang/String
      37: astore_2
      38: aload_0
      39: getfield      #24                 // Field inboundRequestMsg:Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
      42: aload_0
      43: getfield      #13                 // Field keepAliveConfig:Lorg/wso2/transport/http/netty/contract/config/KeepAliveConfig;
      46: aload_1
      47: aload_2
      48: invokestatic  #103                // Method org/wso2/transport/http/netty/contractimpl/common/Util.isKeepAliveConnection:(Lorg/wso2/transport/http/netty/contract/config/KeepAliveConfig;Ljava/lang/String;Ljava/lang/String;)Z
      51: invokevirtual #104                // Method org/wso2/transport/http/netty/message/HttpCarbonMessage.setKeepAlive:(Z)V
      54: return

  private void setPipeliningProperties();
    Code:
       0: aload_0
       1: getfield      #50                 // Field ctx:Lio/netty/channel/ChannelHandlerContext;
       4: invokeinterface #28,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.channel:()Lio/netty/channel/Channel;
       9: getstatic     #105                // Field org/wso2/transport/http/netty/contract/Constants.MAX_RESPONSES_ALLOWED_TO_BE_QUEUED:Lio/netty/util/AttributeKey;
      12: invokeinterface #106,  2          // InterfaceMethod io/netty/channel/Channel.attr:(Lio/netty/util/AttributeKey;)Lio/netty/util/Attribute;
      17: invokeinterface #107,  1          // InterfaceMethod io/netty/util/Attribute.get:()Ljava/lang/Object;
      22: ifnonnull     54
      25: aload_0
      26: getfield      #50                 // Field ctx:Lio/netty/channel/ChannelHandlerContext;
      29: invokeinterface #28,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.channel:()Lio/netty/channel/Channel;
      34: getstatic     #105                // Field org/wso2/transport/http/netty/contract/Constants.MAX_RESPONSES_ALLOWED_TO_BE_QUEUED:Lio/netty/util/AttributeKey;
      37: invokeinterface #106,  2          // InterfaceMethod io/netty/channel/Channel.attr:(Lio/netty/util/AttributeKey;)Lio/netty/util/Attribute;
      42: aload_0
      43: getfield      #19                 // Field pipeliningLimit:J
      46: invokestatic  #108                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      49: invokeinterface #109,  2          // InterfaceMethod io/netty/util/Attribute.set:(Ljava/lang/Object;)V
      54: aload_0
      55: getfield      #50                 // Field ctx:Lio/netty/channel/ChannelHandlerContext;
      58: invokeinterface #28,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.channel:()Lio/netty/channel/Channel;
      63: getstatic     #110                // Field org/wso2/transport/http/netty/contract/Constants.RESPONSE_QUEUE:Lio/netty/util/AttributeKey;
      66: invokeinterface #106,  2          // InterfaceMethod io/netty/channel/Channel.attr:(Lio/netty/util/AttributeKey;)Lio/netty/util/Attribute;
      71: invokeinterface #107,  1          // InterfaceMethod io/netty/util/Attribute.get:()Ljava/lang/Object;
      76: ifnonnull     105
      79: aload_0
      80: getfield      #50                 // Field ctx:Lio/netty/channel/ChannelHandlerContext;
      83: invokeinterface #28,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.channel:()Lio/netty/channel/Channel;
      88: getstatic     #110                // Field org/wso2/transport/http/netty/contract/Constants.RESPONSE_QUEUE:Lio/netty/util/AttributeKey;
      91: invokeinterface #106,  2          // InterfaceMethod io/netty/channel/Channel.attr:(Lio/netty/util/AttributeKey;)Lio/netty/util/Attribute;
      96: aload_0
      97: getfield      #9                  // Field holdingQueue:Ljava/util/Queue;
     100: invokeinterface #109,  2          // InterfaceMethod io/netty/util/Attribute.set:(Ljava/lang/Object;)V
     105: aload_0
     106: getfield      #50                 // Field ctx:Lio/netty/channel/ChannelHandlerContext;
     109: invokeinterface #28,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.channel:()Lio/netty/channel/Channel;
     114: getstatic     #111                // Field org/wso2/transport/http/netty/contract/Constants.NEXT_SEQUENCE_NUMBER:Lio/netty/util/AttributeKey;
     117: invokeinterface #106,  2          // InterfaceMethod io/netty/channel/Channel.attr:(Lio/netty/util/AttributeKey;)Lio/netty/util/Attribute;
     122: invokeinterface #107,  1          // InterfaceMethod io/netty/util/Attribute.get:()Ljava/lang/Object;
     127: ifnonnull     156
     130: aload_0
     131: getfield      #50                 // Field ctx:Lio/netty/channel/ChannelHandlerContext;
     134: invokeinterface #28,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.channel:()Lio/netty/channel/Channel;
     139: getstatic     #111                // Field org/wso2/transport/http/netty/contract/Constants.NEXT_SEQUENCE_NUMBER:Lio/netty/util/AttributeKey;
     142: invokeinterface #106,  2          // InterfaceMethod io/netty/channel/Channel.attr:(Lio/netty/util/AttributeKey;)Lio/netty/util/Attribute;
     147: lconst_1
     148: invokestatic  #108                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     151: invokeinterface #109,  2          // InterfaceMethod io/netty/util/Attribute.set:(Ljava/lang/Object;)V
     156: aload_0
     157: getfield      #50                 // Field ctx:Lio/netty/channel/ChannelHandlerContext;
     160: invokeinterface #28,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.channel:()Lio/netty/channel/Channel;
     165: getstatic     #112                // Field org/wso2/transport/http/netty/contract/Constants.PIPELINING_EXECUTOR:Lio/netty/util/AttributeKey;
     168: invokeinterface #106,  2          // InterfaceMethod io/netty/channel/Channel.attr:(Lio/netty/util/AttributeKey;)Lio/netty/util/Attribute;
     173: invokeinterface #107,  1          // InterfaceMethod io/netty/util/Attribute.get:()Ljava/lang/Object;
     178: ifnonnull     207
     181: aload_0
     182: getfield      #50                 // Field ctx:Lio/netty/channel/ChannelHandlerContext;
     185: invokeinterface #28,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.channel:()Lio/netty/channel/Channel;
     190: getstatic     #112                // Field org/wso2/transport/http/netty/contract/Constants.PIPELINING_EXECUTOR:Lio/netty/util/AttributeKey;
     193: invokeinterface #106,  2          // InterfaceMethod io/netty/channel/Channel.attr:(Lio/netty/util/AttributeKey;)Lio/netty/util/Attribute;
     198: aload_0
     199: getfield      #20                 // Field pipeliningGroup:Lio/netty/util/concurrent/EventExecutorGroup;
     202: invokeinterface #109,  2          // InterfaceMethod io/netty/util/Attribute.set:(Ljava/lang/Object;)V
     207: return

  private void setSequenceNumber();
    Code:
       0: getstatic     #26                 // Field LOG:Lorg/slf4j/Logger;
       3: invokeinterface #113,  1          // InterfaceMethod org/slf4j/Logger.isDebugEnabled:()Z
       8: ifeq          28
      11: getstatic     #26                 // Field LOG:Lorg/slf4j/Logger;
      14: ldc           #114                // String Sequence id of the request is set to : {}
      16: aload_0
      17: getfield      #6                  // Field sequenceId:J
      20: invokestatic  #108                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      23: invokeinterface #81,  3           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Object;)V
      28: aload_0
      29: getfield      #24                 // Field inboundRequestMsg:Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
      32: aload_0
      33: getfield      #6                  // Field sequenceId:J
      36: invokevirtual #115                // Method org/wso2/transport/http/netty/message/HttpCarbonMessage.setSequenceId:(J)V
      39: aload_0
      40: dup
      41: getfield      #6                  // Field sequenceId:J
      44: lconst_1
      45: ladd
      46: putfield      #6                  // Field sequenceId:J
      49: return

  public io.netty.channel.EventLoop getEventLoop();
    Code:
       0: aload_0
       1: getfield      #50                 // Field ctx:Lio/netty/channel/ChannelHandlerContext;
       4: invokeinterface #28,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.channel:()Lio/netty/channel/Channel;
       9: invokeinterface #116,  1          // InterfaceMethod io/netty/channel/Channel.eventLoop:()Lio/netty/channel/EventLoop;
      14: areturn

  public java.util.Map<java.lang.String, org.apache.commons.pool.impl.GenericObjectPool> getTargetChannelPool();
    Code:
       0: aload_0
       1: getfield      #14                 // Field targetChannelPool:Ljava/util/Map;
       4: areturn

  public io.netty.channel.ChannelHandlerContext getInboundChannelContext();
    Code:
       0: aload_0
       1: getfield      #50                 // Field ctx:Lio/netty/channel/ChannelHandlerContext;
       4: areturn

  public java.net.SocketAddress getRemoteAddress();
    Code:
       0: aload_0
       1: getfield      #59                 // Field remoteAddress:Ljava/net/SocketAddress;
       4: areturn

  public java.lang.String getInterfaceId();
    Code:
       0: aload_0
       1: getfield      #11                 // Field interfaceId:Ljava/lang/String;
       4: areturn

  public org.wso2.transport.http.netty.contract.ServerConnectorFuture getServerConnectorFuture();
    Code:
       0: aload_0
       1: getfield      #10                 // Field serverConnectorFuture:Lorg/wso2/transport/http/netty/contract/ServerConnectorFuture;
       4: areturn

  public org.wso2.transport.http.netty.contract.config.ChunkConfig getChunkConfig();
    Code:
       0: aload_0
       1: getfield      #12                 // Field chunkConfig:Lorg/wso2/transport/http/netty/contract/config/ChunkConfig;
       4: areturn

  public org.wso2.transport.http.netty.contract.config.KeepAliveConfig getKeepAliveConfig();
    Code:
       0: aload_0
       1: getfield      #13                 // Field keepAliveConfig:Lorg/wso2/transport/http/netty/contract/config/KeepAliveConfig;
       4: areturn

  public java.lang.String getServerName();
    Code:
       0: aload_0
       1: getfield      #16                 // Field serverName:Ljava/lang/String;
       4: areturn

  public void setConnectedState(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #63                 // Field connectedState:Z
       5: return

  public void removeRequestEntry(org.wso2.transport.http.netty.message.HttpCarbonMessage);
    Code:
       0: aload_0
       1: getfield      #5                  // Field requestSet:Ljava/util/Map;
       4: aload_1
       5: invokevirtual #32                 // Method java/lang/Object.hashCode:()I
       8: invokestatic  #33                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      11: invokeinterface #117,  2          // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      16: pop
      17: return

  public void resetInboundRequestMsg();
    Code:
       0: aload_0
       1: aconst_null
       2: putfield      #24                 // Field inboundRequestMsg:Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
       5: return

  private void lambda$userEventTriggered$6(io.netty.channel.ChannelHandlerContext, java.lang.Integer, org.wso2.transport.http.netty.message.HttpCarbonMessage);
    Code:
       0: aload_3
       1: invokevirtual #45                 // Method org/wso2/transport/http/netty/message/HttpCarbonMessage.getMessageStateContext:()Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;
       4: invokevirtual #43                 // Method org/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext.getListenerState:()Lorg/wso2/transport/http/netty/contractimpl/listener/states/ListenerState;
       7: aload_0
       8: getfield      #10                 // Field serverConnectorFuture:Lorg/wso2/transport/http/netty/contract/ServerConnectorFuture;
      11: aload_1
      12: invokeinterface #118,  3          // InterfaceMethod org/wso2/transport/http/netty/contractimpl/listener/states/ListenerState.handleIdleTimeoutConnectionClosure:(Lorg/wso2/transport/http/netty/contract/ServerConnectorFuture;Lio/netty/channel/ChannelHandlerContext;)Lio/netty/channel/ChannelFuture;
      17: astore        4
      19: aload         4
      21: ifnonnull     29
      24: aload_0
      25: aload_1
      26: invokespecial #31                 // Method closeChannel:(Lio/netty/channel/ChannelHandlerContext;)V
      29: return

  private void lambda$closeTargetChannels$5(java.lang.String, org.apache.commons.pool.impl.GenericObjectPool);
    Code:
       0: aload_0
       1: getfield      #14                 // Field targetChannelPool:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #117,  2          // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #119                // class org/apache/commons/pool/impl/GenericObjectPool
      13: invokevirtual #120                // Method org/apache/commons/pool/impl/GenericObjectPool.close:()V
      16: goto          31
      19: astore_3
      20: getstatic     #26                 // Field LOG:Lorg/slf4j/Logger;
      23: ldc           #122                // String Couldn\'t close target channel socket connections
      25: aload_3
      26: invokeinterface #123,  3          // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;Ljava/lang/Throwable;)V
      31: return
    Exception table:
       from    to  target type
           0    16    19   Class java/lang/Exception

  private void lambda$channelInactive$4(java.lang.Integer, org.wso2.transport.http.netty.message.HttpCarbonMessage);
    Code:
       0: aload_2
       1: invokevirtual #45                 // Method org/wso2/transport/http/netty/message/HttpCarbonMessage.getMessageStateContext:()Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;
       4: invokevirtual #43                 // Method org/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext.getListenerState:()Lorg/wso2/transport/http/netty/contractimpl/listener/states/ListenerState;
       7: aload_0
       8: getfield      #10                 // Field serverConnectorFuture:Lorg/wso2/transport/http/netty/contract/ServerConnectorFuture;
      11: invokeinterface #124,  2          // InterfaceMethod org/wso2/transport/http/netty/contractimpl/listener/states/ListenerState.handleAbruptChannelClosure:(Lorg/wso2/transport/http/netty/contract/ServerConnectorFuture;)V
      16: return

  static {};
    Code:
       0: ldc           #125                // class org/wso2/transport/http/netty/contractimpl/listener/SourceHandler
       2: invokestatic  #126                // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #26                 // Field LOG:Lorg/slf4j/Logger;
       8: return
}
