Compiled from "TargetHandler.java"
public class org.wso2.transport.http.netty.contractimpl.sender.TargetHandler extends io.netty.channel.ChannelInboundHandlerAdapter {
  private static final org.slf4j.Logger LOG;

  private org.wso2.transport.http.netty.contract.HttpResponseFuture httpResponseFuture;

  private org.wso2.transport.http.netty.message.HttpCarbonMessage inboundResponseMsg;

  private org.wso2.transport.http.netty.contractimpl.sender.channel.pool.ConnectionManager connectionManager;

  private org.wso2.transport.http.netty.contractimpl.sender.channel.TargetChannel targetChannel;

  private org.wso2.transport.http.netty.contractimpl.sender.http2.Http2TargetHandler http2TargetHandler;

  private org.wso2.transport.http.netty.message.HttpCarbonMessage outboundRequestMsg;

  private org.wso2.transport.http.netty.internal.HandlerExecutor handlerExecutor;

  private org.wso2.transport.http.netty.contract.config.KeepAliveConfig keepAliveConfig;

  private boolean idleTimeoutTriggered;

  private io.netty.channel.ChannelHandlerContext context;

  public org.wso2.transport.http.netty.contractimpl.sender.TargetHandler();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method io/netty/channel/ChannelInboundHandlerAdapter."<init>":()V
       4: return

  public void handlerAdded(io.netty.channel.ChannelHandlerContext);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2                  // Field context:Lio/netty/channel/ChannelHandlerContext;
       5: return

  public void channelRead(io.netty.channel.ChannelHandlerContext, java.lang.Object) throws java.lang.Exception;
    Code:
       0: aload_0
       1: getfield      #3                  // Field outboundRequestMsg:Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
       4: invokevirtual #4                  // Method org/wso2/transport/http/netty/message/HttpCarbonMessage.getMessageStateContext:()Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;
       7: astore_3
       8: aload_0
       9: getfield      #5                  // Field handlerExecutor:Lorg/wso2/transport/http/netty/internal/HandlerExecutor;
      12: ifnull        26
      15: aload_0
      16: getfield      #5                  // Field handlerExecutor:Lorg/wso2/transport/http/netty/internal/HandlerExecutor;
      19: aload_0
      20: getfield      #6                  // Field inboundResponseMsg:Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
      23: invokevirtual #7                  // Method org/wso2/transport/http/netty/internal/HandlerExecutor.executeAtTargetResponseReceiving:(Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;)V
      26: aload_0
      27: getfield      #8                  // Field targetChannel:Lorg/wso2/transport/http/netty/contractimpl/sender/channel/TargetChannel;
      30: invokevirtual #9                  // Method org/wso2/transport/http/netty/contractimpl/sender/channel/TargetChannel.isRequestHeaderWritten:()Z
      33: ifeq          104
      36: aload_2
      37: instanceof    #10                 // class io/netty/handler/codec/http/HttpResponse
      40: ifeq          76
      43: aload_0
      44: aload_1
      45: aload_2
      46: checkcast     #10                 // class io/netty/handler/codec/http/HttpResponse
      49: aload_0
      50: getfield      #3                  // Field outboundRequestMsg:Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
      53: invokestatic  #11                 // Method org/wso2/transport/http/netty/contractimpl/common/Util.createInboundRespCarbonMsg:(Lio/netty/channel/ChannelHandlerContext;Lio/netty/handler/codec/http/HttpResponse;Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;)Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
      56: putfield      #6                  // Field inboundResponseMsg:Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
      59: aload_3
      60: invokevirtual #12                 // Method org/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext.getSenderState:()Lorg/wso2/transport/http/netty/contractimpl/sender/states/SenderState;
      63: aload_0
      64: aload_2
      65: checkcast     #10                 // class io/netty/handler/codec/http/HttpResponse
      68: invokeinterface #13,  3           // InterfaceMethod org/wso2/transport/http/netty/contractimpl/sender/states/SenderState.readInboundResponseHeaders:(Lorg/wso2/transport/http/netty/contractimpl/sender/TargetHandler;Lio/netty/handler/codec/http/HttpResponse;)V
      73: goto          127
      76: aload_0
      77: getfield      #6                  // Field inboundResponseMsg:Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
      80: ifnull        127
      83: aload_3
      84: invokevirtual #12                 // Method org/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext.getSenderState:()Lorg/wso2/transport/http/netty/contractimpl/sender/states/SenderState;
      87: aload_1
      88: aload_2
      89: checkcast     #14                 // class io/netty/handler/codec/http/HttpContent
      92: aload_0
      93: invokevirtual #15                 // Method getInboundResponseMsg:()Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
      96: invokeinterface #16,  4           // InterfaceMethod org/wso2/transport/http/netty/contractimpl/sender/states/SenderState.readInboundResponseEntityBody:(Lio/netty/channel/ChannelHandlerContext;Lio/netty/handler/codec/http/HttpContent;Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;)V
     101: goto          127
     104: aload_2
     105: instanceof    #10                 // class io/netty/handler/codec/http/HttpResponse
     108: ifeq          122
     111: getstatic     #17                 // Field LOG:Lorg/slf4j/Logger;
     114: ldc           #18                 // String Received a response for an obsolete request {}
     116: aload_2
     117: invokeinterface #19,  3           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;)V
     122: aload_2
     123: invokestatic  #20                 // Method io/netty/util/ReferenceCountUtil.release:(Ljava/lang/Object;)Z
     126: pop
     127: return

  public void channelActive(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokestatic  #21                 // Method org/wso2/transport/http/netty/internal/HttpTransportContextHolder.getInstance:()Lorg/wso2/transport/http/netty/internal/HttpTransportContextHolder;
       4: invokevirtual #22                 // Method org/wso2/transport/http/netty/internal/HttpTransportContextHolder.getHandlerExecutor:()Lorg/wso2/transport/http/netty/internal/HandlerExecutor;
       7: putfield      #5                  // Field handlerExecutor:Lorg/wso2/transport/http/netty/internal/HandlerExecutor;
      10: aload_0
      11: getfield      #5                  // Field handlerExecutor:Lorg/wso2/transport/http/netty/internal/HandlerExecutor;
      14: ifnull        31
      17: aload_0
      18: getfield      #5                  // Field handlerExecutor:Lorg/wso2/transport/http/netty/internal/HandlerExecutor;
      21: aload_1
      22: invokevirtual #23                 // Method java/lang/Object.hashCode:()I
      25: invokestatic  #24                 // Method java/lang/Integer.toString:(I)Ljava/lang/String;
      28: invokevirtual #25                 // Method org/wso2/transport/http/netty/internal/HandlerExecutor.executeAtTargetConnectionInitiation:(Ljava/lang/String;)V
      31: aload_0
      32: aload_1
      33: invokespecial #26                 // Method io/netty/channel/ChannelInboundHandlerAdapter.channelActive:(Lio/netty/channel/ChannelHandlerContext;)V
      36: return

  public void channelInactive(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception;
    Code:
       0: aload_0
       1: getfield      #27                 // Field idleTimeoutTriggered:Z
       4: ifne          26
       7: aload_0
       8: getfield      #3                  // Field outboundRequestMsg:Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
      11: invokevirtual #4                  // Method org/wso2/transport/http/netty/message/HttpCarbonMessage.getMessageStateContext:()Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;
      14: invokevirtual #12                 // Method org/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext.getSenderState:()Lorg/wso2/transport/http/netty/contractimpl/sender/states/SenderState;
      17: aload_0
      18: getfield      #28                 // Field httpResponseFuture:Lorg/wso2/transport/http/netty/contract/HttpResponseFuture;
      21: invokeinterface #29,  2           // InterfaceMethod org/wso2/transport/http/netty/contractimpl/sender/states/SenderState.handleAbruptChannelClosure:(Lorg/wso2/transport/http/netty/contract/HttpResponseFuture;)V
      26: aload_0
      27: getfield      #30                 // Field connectionManager:Lorg/wso2/transport/http/netty/contractimpl/sender/channel/pool/ConnectionManager;
      30: aload_0
      31: getfield      #8                  // Field targetChannel:Lorg/wso2/transport/http/netty/contractimpl/sender/channel/TargetChannel;
      34: invokevirtual #31                 // Method org/wso2/transport/http/netty/contractimpl/sender/channel/pool/ConnectionManager.invalidateTargetChannel:(Lorg/wso2/transport/http/netty/contractimpl/sender/channel/TargetChannel;)V
      37: aload_0
      38: getfield      #5                  // Field handlerExecutor:Lorg/wso2/transport/http/netty/internal/HandlerExecutor;
      41: ifnull        63
      44: aload_0
      45: getfield      #5                  // Field handlerExecutor:Lorg/wso2/transport/http/netty/internal/HandlerExecutor;
      48: aload_1
      49: invokevirtual #23                 // Method java/lang/Object.hashCode:()I
      52: invokestatic  #24                 // Method java/lang/Integer.toString:(I)Ljava/lang/String;
      55: invokevirtual #32                 // Method org/wso2/transport/http/netty/internal/HandlerExecutor.executeAtTargetConnectionTermination:(Ljava/lang/String;)V
      58: aload_0
      59: aconst_null
      60: putfield      #5                  // Field handlerExecutor:Lorg/wso2/transport/http/netty/internal/HandlerExecutor;
      63: return

  public void exceptionCaught(io.netty.channel.ChannelHandlerContext, java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #33                 // Method closeChannel:(Lio/netty/channel/ChannelHandlerContext;)V
       5: getstatic     #17                 // Field LOG:Lorg/slf4j/Logger;
       8: ldc           #34                 // String Exception occurred in TargetHandler : {}
      10: aload_2
      11: invokevirtual #35                 // Method java/lang/Throwable.getMessage:()Ljava/lang/String;
      14: invokeinterface #19,  3           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;)V
      19: return

  public void userEventTriggered(io.netty.channel.ChannelHandlerContext, java.lang.Object) throws java.lang.Exception;
    Code:
       0: aload_2
       1: instanceof    #36                 // class io/netty/handler/timeout/IdleStateEvent
       4: ifeq          77
       7: aload_0
       8: getfield      #8                  // Field targetChannel:Lorg/wso2/transport/http/netty/contractimpl/sender/channel/TargetChannel;
      11: invokevirtual #37                 // Method org/wso2/transport/http/netty/contractimpl/sender/channel/TargetChannel.getChannel:()Lio/netty/channel/Channel;
      14: invokeinterface #38,  1           // InterfaceMethod io/netty/channel/Channel.pipeline:()Lio/netty/channel/ChannelPipeline;
      19: ldc           #40                 // String idleStateHandler
      21: invokeinterface #41,  2           // InterfaceMethod io/netty/channel/ChannelPipeline.remove:(Ljava/lang/String;)Lio/netty/channel/ChannelHandler;
      26: pop
      27: aload_0
      28: iconst_1
      29: putfield      #27                 // Field idleTimeoutTriggered:Z
      32: aload_1
      33: invokeinterface #42,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.close:()Lio/netty/channel/ChannelFuture;
      38: pop
      39: aload_0
      40: getfield      #3                  // Field outboundRequestMsg:Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
      43: invokevirtual #4                  // Method org/wso2/transport/http/netty/message/HttpCarbonMessage.getMessageStateContext:()Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;
      46: invokevirtual #12                 // Method org/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext.getSenderState:()Lorg/wso2/transport/http/netty/contractimpl/sender/states/SenderState;
      49: aload_0
      50: getfield      #28                 // Field httpResponseFuture:Lorg/wso2/transport/http/netty/contract/HttpResponseFuture;
      53: aload_1
      54: invokeinterface #43,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.channel:()Lio/netty/channel/Channel;
      59: invokeinterface #44,  1           // InterfaceMethod io/netty/channel/Channel.id:()Lio/netty/channel/ChannelId;
      64: invokeinterface #45,  1           // InterfaceMethod io/netty/channel/ChannelId.asLongText:()Ljava/lang/String;
      69: invokeinterface #46,  3           // InterfaceMethod org/wso2/transport/http/netty/contractimpl/sender/states/SenderState.handleIdleTimeoutConnectionClosure:(Lorg/wso2/transport/http/netty/contract/HttpResponseFuture;Ljava/lang/String;)V
      74: goto          192
      77: aload_2
      78: instanceof    #47                 // class io/netty/handler/codec/http/HttpClientUpgradeHandler$UpgradeEvent
      81: ifeq          121
      84: aload_2
      85: checkcast     #47                 // class io/netty/handler/codec/http/HttpClientUpgradeHandler$UpgradeEvent
      88: astore_3
      89: getstatic     #48                 // Field io/netty/handler/codec/http/HttpClientUpgradeHandler$UpgradeEvent.UPGRADE_SUCCESSFUL:Lio/netty/handler/codec/http/HttpClientUpgradeHandler$UpgradeEvent;
      92: invokevirtual #49                 // Method io/netty/handler/codec/http/HttpClientUpgradeHandler$UpgradeEvent.name:()Ljava/lang/String;
      95: aload_3
      96: invokevirtual #49                 // Method io/netty/handler/codec/http/HttpClientUpgradeHandler$UpgradeEvent.name:()Ljava/lang/String;
      99: invokevirtual #50                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     102: ifeq          110
     105: aload_0
     106: aload_1
     107: invokespecial #51                 // Method executePostUpgradeActions:(Lio/netty/channel/ChannelHandlerContext;)V
     110: aload_1
     111: aload_2
     112: invokeinterface #52,  2           // InterfaceMethod io/netty/channel/ChannelHandlerContext.fireUserEventTriggered:(Ljava/lang/Object;)Lio/netty/channel/ChannelHandlerContext;
     117: pop
     118: goto          192
     121: aload_2
     122: instanceof    #53                 // class io/netty/handler/codec/http2/Http2ConnectionPrefaceAndSettingsFrameWrittenEvent
     125: ifeq          141
     128: getstatic     #17                 // Field LOG:Lorg/slf4j/Logger;
     131: ldc           #54                 // String Connection Preface and Settings frame written
     133: invokeinterface #55,  2           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;)V
     138: goto          192
     141: aload_2
     142: instanceof    #56                 // class io/netty/handler/ssl/SslCloseCompletionEvent
     145: ifeq          161
     148: getstatic     #17                 // Field LOG:Lorg/slf4j/Logger;
     151: ldc           #57                 // String SSL close completion event received
     153: invokeinterface #55,  2           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;)V
     158: goto          192
     161: aload_2
     162: instanceof    #58                 // class io/netty/channel/socket/ChannelInputShutdownReadComplete
     165: ifeq          181
     168: getstatic     #17                 // Field LOG:Lorg/slf4j/Logger;
     171: ldc           #59                 // String Input side of the connection is already shutdown
     173: invokeinterface #55,  2           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;)V
     178: goto          192
     181: getstatic     #17                 // Field LOG:Lorg/slf4j/Logger;
     184: ldc           #60                 // String Unexpected user event {} triggered
     186: aload_2
     187: invokeinterface #19,  3           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;)V
     192: return

  private void executePostUpgradeActions(io.netty.channel.ChannelHandlerContext);
    Code:
       0: aload_1
       1: invokeinterface #61,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.pipeline:()Lio/netty/channel/ChannelPipeline;
       6: aload_0
       7: invokeinterface #62,  2           // InterfaceMethod io/netty/channel/ChannelPipeline.remove:(Lio/netty/channel/ChannelHandler;)Lio/netty/channel/ChannelPipeline;
      12: pop
      13: aload_1
      14: invokeinterface #61,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.pipeline:()Lio/netty/channel/ChannelPipeline;
      19: ldc           #63                 // String http2TargetHandler
      21: aload_0
      22: getfield      #64                 // Field http2TargetHandler:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2TargetHandler;
      25: invokeinterface #65,  3           // InterfaceMethod io/netty/channel/ChannelPipeline.addLast:(Ljava/lang/String;Lio/netty/channel/ChannelHandler;)Lio/netty/channel/ChannelPipeline;
      30: pop
      31: aload_0
      32: getfield      #64                 // Field http2TargetHandler:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2TargetHandler;
      35: invokevirtual #66                 // Method org/wso2/transport/http/netty/contractimpl/sender/http2/Http2TargetHandler.getHttp2ClientChannel:()Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel;
      38: astore_2
      39: aload_0
      40: getfield      #8                  // Field targetChannel:Lorg/wso2/transport/http/netty/contractimpl/sender/channel/TargetChannel;
      43: invokevirtual #37                 // Method org/wso2/transport/http/netty/contractimpl/sender/channel/TargetChannel.getChannel:()Lio/netty/channel/Channel;
      46: invokeinterface #38,  1           // InterfaceMethod io/netty/channel/Channel.pipeline:()Lio/netty/channel/ChannelPipeline;
      51: iconst_2
      52: anewarray     #67                 // class java/lang/String
      55: dup
      56: iconst_0
      57: ldc           #40                 // String idleStateHandler
      59: aastore
      60: dup
      61: iconst_1
      62: ldc           #68                 // String http-trace-logger
      64: aastore
      65: invokestatic  #69                 // Method org/wso2/transport/http/netty/contractimpl/common/Util.safelyRemoveHandlers:(Lio/netty/channel/ChannelPipeline;[Ljava/lang/String;)V
      68: aload_2
      69: ldc           #40                 // String idleStateHandler
      71: new           #70                 // class org/wso2/transport/http/netty/contractimpl/sender/http2/TimeoutHandler
      74: dup
      75: aload_2
      76: invokevirtual #71                 // Method org/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel.getSocketIdleTimeout:()I
      79: i2l
      80: aload_2
      81: invokespecial #72                 // Method org/wso2/transport/http/netty/contractimpl/sender/http2/TimeoutHandler."<init>":(JLorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel;)V
      84: invokevirtual #73                 // Method org/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel.addDataEventListener:(Ljava/lang/String;Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2DataEventListener;)V
      87: aload_2
      88: iconst_1
      89: invokevirtual #75                 // Method org/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel.getInFlightMessage:(I)Lorg/wso2/transport/http/netty/contractimpl/sender/http2/OutboundMsgHolder;
      92: iconst_1
      93: invokevirtual #76                 // Method org/wso2/transport/http/netty/contractimpl/sender/http2/OutboundMsgHolder.setRequestWritten:(Z)V
      96: aload_2
      97: invokevirtual #77                 // Method org/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel.getDataEventListeners:()Ljava/util/List;
     100: aload_1
     101: invokedynamic #78,  0             // InvokeDynamic #0:accept:(Lio/netty/channel/ChannelHandlerContext;)Ljava/util/function/Consumer;
     106: invokeinterface #79,  2           // InterfaceMethod java/util/List.forEach:(Ljava/util/function/Consumer;)V
     111: aload_0
     112: invokespecial #80                 // Method handoverChannelToHttp2ConnectionManager:()V
     115: return

  private void handoverChannelToHttp2ConnectionManager();
    Code:
       0: aload_0
       1: getfield      #30                 // Field connectionManager:Lorg/wso2/transport/http/netty/contractimpl/sender/channel/pool/ConnectionManager;
       4: invokevirtual #81                 // Method org/wso2/transport/http/netty/contractimpl/sender/channel/pool/ConnectionManager.getHttp2ConnectionManager:()Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ConnectionManager;
       7: aload_0
       8: getfield      #8                  // Field targetChannel:Lorg/wso2/transport/http/netty/contractimpl/sender/channel/TargetChannel;
      11: invokevirtual #82                 // Method org/wso2/transport/http/netty/contractimpl/sender/channel/TargetChannel.getHttpRoute:()Lorg/wso2/transport/http/netty/contractimpl/common/HttpRoute;
      14: aload_0
      15: getfield      #8                  // Field targetChannel:Lorg/wso2/transport/http/netty/contractimpl/sender/channel/TargetChannel;
      18: invokevirtual #83                 // Method org/wso2/transport/http/netty/contractimpl/sender/channel/TargetChannel.getHttp2ClientChannel:()Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel;
      21: invokevirtual #84                 // Method org/wso2/transport/http/netty/contractimpl/sender/http2/Http2ConnectionManager.addHttp2ClientChannel:(Lorg/wso2/transport/http/netty/contractimpl/common/HttpRoute;Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel;)V
      24: return

  public void closeChannel(io.netty.channel.ChannelHandlerContext);
    Code:
       0: aload_1
       1: ifnull        25
       4: aload_1
       5: invokeinterface #43,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.channel:()Lio/netty/channel/Channel;
      10: invokeinterface #85,  1           // InterfaceMethod io/netty/channel/Channel.isActive:()Z
      15: ifeq          25
      18: aload_1
      19: invokeinterface #42,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.close:()Lio/netty/channel/ChannelFuture;
      24: pop
      25: return

  public void setHttpResponseFuture(org.wso2.transport.http.netty.contract.HttpResponseFuture);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #28                 // Field httpResponseFuture:Lorg/wso2/transport/http/netty/contract/HttpResponseFuture;
       5: return

  public void setConnectionManager(org.wso2.transport.http.netty.contractimpl.sender.channel.pool.ConnectionManager);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #30                 // Field connectionManager:Lorg/wso2/transport/http/netty/contractimpl/sender/channel/pool/ConnectionManager;
       5: return

  public void setOutboundRequestMsg(org.wso2.transport.http.netty.message.HttpCarbonMessage);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #3                  // Field outboundRequestMsg:Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
       5: return

  public void setTargetChannel(org.wso2.transport.http.netty.contractimpl.sender.channel.TargetChannel);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #8                  // Field targetChannel:Lorg/wso2/transport/http/netty/contractimpl/sender/channel/TargetChannel;
       5: return

  public void setKeepAliveConfig(org.wso2.transport.http.netty.contract.config.KeepAliveConfig);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #86                 // Field keepAliveConfig:Lorg/wso2/transport/http/netty/contract/config/KeepAliveConfig;
       5: return

  public org.wso2.transport.http.netty.contract.HttpResponseFuture getHttpResponseFuture();
    Code:
       0: aload_0
       1: getfield      #28                 // Field httpResponseFuture:Lorg/wso2/transport/http/netty/contract/HttpResponseFuture;
       4: areturn

  void setHttp2TargetHandler(org.wso2.transport.http.netty.contractimpl.sender.http2.Http2TargetHandler);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #64                 // Field http2TargetHandler:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2TargetHandler;
       5: return

  public org.wso2.transport.http.netty.message.HttpCarbonMessage getInboundResponseMsg();
    Code:
       0: aload_0
       1: getfield      #6                  // Field inboundResponseMsg:Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
       4: areturn

  public org.wso2.transport.http.netty.contractimpl.sender.http2.Http2TargetHandler getHttp2TargetHandler();
    Code:
       0: aload_0
       1: getfield      #64                 // Field http2TargetHandler:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2TargetHandler;
       4: areturn

  public void resetInboundMsg();
    Code:
       0: aload_0
       1: aconst_null
       2: putfield      #6                  // Field inboundResponseMsg:Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
       5: return

  public org.wso2.transport.http.netty.contractimpl.sender.channel.TargetChannel getTargetChannel();
    Code:
       0: aload_0
       1: getfield      #8                  // Field targetChannel:Lorg/wso2/transport/http/netty/contractimpl/sender/channel/TargetChannel;
       4: areturn

  public org.wso2.transport.http.netty.contract.config.KeepAliveConfig getKeepAliveConfig();
    Code:
       0: aload_0
       1: getfield      #86                 // Field keepAliveConfig:Lorg/wso2/transport/http/netty/contract/config/KeepAliveConfig;
       4: areturn

  public org.wso2.transport.http.netty.message.HttpCarbonMessage getOutboundRequestMsg();
    Code:
       0: aload_0
       1: getfield      #3                  // Field outboundRequestMsg:Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
       4: areturn

  public org.wso2.transport.http.netty.contractimpl.sender.channel.pool.ConnectionManager getConnectionManager();
    Code:
       0: aload_0
       1: getfield      #30                 // Field connectionManager:Lorg/wso2/transport/http/netty/contractimpl/sender/channel/pool/ConnectionManager;
       4: areturn

  public io.netty.channel.ChannelHandlerContext getContext();
    Code:
       0: aload_0
       1: getfield      #2                  // Field context:Lio/netty/channel/ChannelHandlerContext;
       4: areturn

  private static void lambda$executePostUpgradeActions$25(io.netty.channel.ChannelHandlerContext, org.wso2.transport.http.netty.contractimpl.sender.http2.Http2DataEventListener);
    Code:
       0: aload_1
       1: aload_0
       2: iconst_1
       3: invokeinterface #87,  3           // InterfaceMethod org/wso2/transport/http/netty/contractimpl/sender/http2/Http2DataEventListener.onStreamInit:(Lio/netty/channel/ChannelHandlerContext;I)Z
       8: pop
       9: return

  static {};
    Code:
       0: ldc           #88                 // class org/wso2/transport/http/netty/contractimpl/sender/TargetHandler
       2: invokestatic  #89                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #17                 // Field LOG:Lorg/slf4j/Logger;
       8: return
}
