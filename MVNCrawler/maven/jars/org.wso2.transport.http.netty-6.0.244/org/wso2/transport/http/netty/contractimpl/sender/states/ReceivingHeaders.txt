Compiled from "ReceivingHeaders.java"
public class org.wso2.transport.http.netty.contractimpl.sender.states.ReceivingHeaders implements org.wso2.transport.http.netty.contractimpl.sender.states.SenderState {
  private static final org.slf4j.Logger LOG;

  private final org.wso2.transport.http.netty.contractimpl.common.states.MessageStateContext messageStateContext;

  private org.wso2.transport.http.netty.contractimpl.sender.TargetHandler targetHandler;

  org.wso2.transport.http.netty.contractimpl.sender.states.ReceivingHeaders(org.wso2.transport.http.netty.contractimpl.common.states.MessageStateContext);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #4                  // Field messageStateContext:Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;
       9: return

  public void writeOutboundRequestHeaders(org.wso2.transport.http.netty.message.HttpCarbonMessage, io.netty.handler.codec.http.HttpContent);
    Code:
       0: getstatic     #5                  // Field LOG:Lorg/slf4j/Logger;
       3: ldc           #6                  // String writeOutboundRequestHeaders {}
       5: ldc           #7                  // String is not a dependant action of this state
       7: invokeinterface #8,  3            // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;)V
      12: return

  public void writeOutboundRequestEntity(org.wso2.transport.http.netty.message.HttpCarbonMessage, io.netty.handler.codec.http.HttpContent);
    Code:
       0: getstatic     #5                  // Field LOG:Lorg/slf4j/Logger;
       3: ldc           #9                  // String writeOutboundRequestEntity {}
       5: ldc           #7                  // String is not a dependant action of this state
       7: invokeinterface #8,  3            // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;)V
      12: return

  public void readInboundResponseHeaders(org.wso2.transport.http.netty.contractimpl.sender.TargetHandler, io.netty.handler.codec.http.HttpResponse);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #10                 // Field targetHandler:Lorg/wso2/transport/http/netty/contractimpl/sender/TargetHandler;
       5: aload_1
       6: invokevirtual #11                 // Method org/wso2/transport/http/netty/contractimpl/sender/TargetHandler.getHttp2TargetHandler:()Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2TargetHandler;
       9: invokevirtual #12                 // Method org/wso2/transport/http/netty/contractimpl/sender/http2/Http2TargetHandler.getHttp2ClientChannel:()Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel;
      12: iconst_1
      13: invokevirtual #14                 // Method org/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel.getInFlightMessage:(I)Lorg/wso2/transport/http/netty/contractimpl/sender/http2/OutboundMsgHolder;
      16: astore_3
      17: aload_3
      18: ifnull        25
      21: aload_3
      22: invokevirtual #15                 // Method org/wso2/transport/http/netty/contractimpl/sender/http2/OutboundMsgHolder.markNoPromisesReceived:()V
      25: aload_1
      26: invokevirtual #16                 // Method org/wso2/transport/http/netty/contractimpl/sender/TargetHandler.getHttpResponseFuture:()Lorg/wso2/transport/http/netty/contract/HttpResponseFuture;
      29: ifnull        61
      32: aload_1
      33: invokevirtual #17                 // Method org/wso2/transport/http/netty/contractimpl/sender/TargetHandler.getInboundResponseMsg:()Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
      36: astore        4
      38: aload         4
      40: aload_1
      41: invokevirtual #18                 // Method org/wso2/transport/http/netty/contractimpl/sender/TargetHandler.getContext:()Lio/netty/channel/ChannelHandlerContext;
      44: invokevirtual #19                 // Method org/wso2/transport/http/netty/message/HttpCarbonMessage.setTargetContext:(Lio/netty/channel/ChannelHandlerContext;)V
      47: aload_1
      48: invokevirtual #16                 // Method org/wso2/transport/http/netty/contractimpl/sender/TargetHandler.getHttpResponseFuture:()Lorg/wso2/transport/http/netty/contract/HttpResponseFuture;
      51: aload         4
      53: invokeinterface #20,  2           // InterfaceMethod org/wso2/transport/http/netty/contract/HttpResponseFuture.notifyHttpListener:(Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;)V
      58: goto          71
      61: getstatic     #5                  // Field LOG:Lorg/slf4j/Logger;
      64: ldc           #21                 // String Cannot notify the response to client as there is no associated responseFuture
      66: invokeinterface #22,  2           // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;)V
      71: aload_2
      72: invokeinterface #23,  1           // InterfaceMethod io/netty/handler/codec/http/HttpResponse.decoderResult:()Lio/netty/handler/codec/DecoderResult;
      77: invokevirtual #24                 // Method io/netty/handler/codec/DecoderResult.isFailure:()Z
      80: ifeq          103
      83: getstatic     #5                  // Field LOG:Lorg/slf4j/Logger;
      86: aload_2
      87: invokeinterface #23,  1           // InterfaceMethod io/netty/handler/codec/http/HttpResponse.decoderResult:()Lio/netty/handler/codec/DecoderResult;
      92: invokevirtual #25                 // Method io/netty/handler/codec/DecoderResult.cause:()Ljava/lang/Throwable;
      95: invokevirtual #26                 // Method java/lang/Throwable.getMessage:()Ljava/lang/String;
      98: invokeinterface #27,  2           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;)V
     103: return

  public void readInboundResponseEntityBody(io.netty.channel.ChannelHandlerContext, io.netty.handler.codec.http.HttpContent, org.wso2.transport.http.netty.message.HttpCarbonMessage) throws java.lang.Exception;
    Code:
       0: aload_0
       1: getfield      #4                  // Field messageStateContext:Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;
       4: new           #28                 // class org/wso2/transport/http/netty/contractimpl/sender/states/ReceivingEntityBody
       7: dup
       8: aload_0
       9: getfield      #4                  // Field messageStateContext:Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;
      12: aload_0
      13: getfield      #10                 // Field targetHandler:Lorg/wso2/transport/http/netty/contractimpl/sender/TargetHandler;
      16: invokespecial #29                 // Method org/wso2/transport/http/netty/contractimpl/sender/states/ReceivingEntityBody."<init>":(Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;Lorg/wso2/transport/http/netty/contractimpl/sender/TargetHandler;)V
      19: invokevirtual #30                 // Method org/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext.setSenderState:(Lorg/wso2/transport/http/netty/contractimpl/sender/states/SenderState;)V
      22: aload_0
      23: getfield      #4                  // Field messageStateContext:Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;
      26: invokevirtual #31                 // Method org/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext.getSenderState:()Lorg/wso2/transport/http/netty/contractimpl/sender/states/SenderState;
      29: aload_1
      30: aload_2
      31: aload_3
      32: invokeinterface #32,  4           // InterfaceMethod org/wso2/transport/http/netty/contractimpl/sender/states/SenderState.readInboundResponseEntityBody:(Lio/netty/channel/ChannelHandlerContext;Lio/netty/handler/codec/http/HttpContent;Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;)V
      37: return

  public void handleAbruptChannelClosure(org.wso2.transport.http.netty.contract.HttpResponseFuture);
    Code:
       0: aload_0
       1: getfield      #10                 // Field targetHandler:Lorg/wso2/transport/http/netty/contractimpl/sender/TargetHandler;
       4: invokevirtual #17                 // Method org/wso2/transport/http/netty/contractimpl/sender/TargetHandler.getInboundResponseMsg:()Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
       7: ldc           #33                 // String Remote host closed the connection while reading inbound response headers
       9: invokestatic  #34                 // Method org/wso2/transport/http/netty/contractimpl/common/states/StateUtil.handleIncompleteInboundMessage:(Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;Ljava/lang/String;)V
      12: return

  public void handleIdleTimeoutConnectionClosure(org.wso2.transport.http.netty.contract.HttpResponseFuture, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #10                 // Field targetHandler:Lorg/wso2/transport/http/netty/contractimpl/sender/TargetHandler;
       4: invokevirtual #17                 // Method org/wso2/transport/http/netty/contractimpl/sender/TargetHandler.getInboundResponseMsg:()Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
       7: ldc           #35                 // String Idle timeout triggered while reading inbound response headers
       9: invokestatic  #34                 // Method org/wso2/transport/http/netty/contractimpl/common/states/StateUtil.handleIncompleteInboundMessage:(Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;Ljava/lang/String;)V
      12: return

  static {};
    Code:
       0: ldc           #36                 // class org/wso2/transport/http/netty/contractimpl/sender/states/ReceivingHeaders
       2: invokestatic  #37                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #5                  // Field LOG:Lorg/slf4j/Logger;
       8: return
}
