Compiled from "SendingHeaders.java"
public class org.wso2.transport.http.netty.contractimpl.sender.states.http2.SendingHeaders implements org.wso2.transport.http.netty.contractimpl.sender.states.http2.SenderState {
  private static final org.slf4j.Logger LOG;

  private final org.wso2.transport.http.netty.contractimpl.sender.http2.Http2TargetHandler http2TargetHandler;

  private final org.wso2.transport.http.netty.contractimpl.sender.http2.Http2TargetHandler$Http2RequestWriter http2RequestWriter;

  private final org.wso2.transport.http.netty.contractimpl.common.states.Http2MessageStateContext http2MessageStateContext;

  private final org.wso2.transport.http.netty.message.HttpCarbonMessage httpOutboundRequest;

  private final org.wso2.transport.http.netty.contractimpl.sender.http2.OutboundMsgHolder outboundMsgHolder;

  private final io.netty.handler.codec.http2.Http2Connection connection;

  private final io.netty.handler.codec.http2.Http2ConnectionEncoder encoder;

  private final org.wso2.transport.http.netty.contractimpl.sender.http2.Http2ClientChannel http2ClientChannel;

  private int streamId;

  public org.wso2.transport.http.netty.contractimpl.sender.states.http2.SendingHeaders(org.wso2.transport.http.netty.contractimpl.sender.http2.Http2TargetHandler, org.wso2.transport.http.netty.contractimpl.sender.http2.Http2TargetHandler$Http2RequestWriter);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #3                  // Field http2TargetHandler:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2TargetHandler;
       9: aload_0
      10: aload_2
      11: putfield      #4                  // Field http2RequestWriter:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2TargetHandler$Http2RequestWriter;
      14: aload_0
      15: aload_2
      16: invokevirtual #5                  // Method org/wso2/transport/http/netty/contractimpl/sender/http2/Http2TargetHandler$Http2RequestWriter.getHttp2MessageStateContext:()Lorg/wso2/transport/http/netty/contractimpl/common/states/Http2MessageStateContext;
      19: putfield      #6                  // Field http2MessageStateContext:Lorg/wso2/transport/http/netty/contractimpl/common/states/Http2MessageStateContext;
      22: aload_0
      23: aload_2
      24: invokevirtual #7                  // Method org/wso2/transport/http/netty/contractimpl/sender/http2/Http2TargetHandler$Http2RequestWriter.getHttpOutboundRequest:()Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
      27: putfield      #8                  // Field httpOutboundRequest:Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
      30: aload_0
      31: aload_2
      32: invokevirtual #9                  // Method org/wso2/transport/http/netty/contractimpl/sender/http2/Http2TargetHandler$Http2RequestWriter.getOutboundMsgHolder:()Lorg/wso2/transport/http/netty/contractimpl/sender/http2/OutboundMsgHolder;
      35: putfield      #10                 // Field outboundMsgHolder:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/OutboundMsgHolder;
      38: aload_0
      39: aload_1
      40: invokevirtual #11                 // Method org/wso2/transport/http/netty/contractimpl/sender/http2/Http2TargetHandler.getConnection:()Lio/netty/handler/codec/http2/Http2Connection;
      43: putfield      #12                 // Field connection:Lio/netty/handler/codec/http2/Http2Connection;
      46: aload_0
      47: aload_1
      48: invokevirtual #13                 // Method org/wso2/transport/http/netty/contractimpl/sender/http2/Http2TargetHandler.getEncoder:()Lio/netty/handler/codec/http2/Http2ConnectionEncoder;
      51: putfield      #14                 // Field encoder:Lio/netty/handler/codec/http2/Http2ConnectionEncoder;
      54: aload_0
      55: aload_1
      56: invokevirtual #15                 // Method org/wso2/transport/http/netty/contractimpl/sender/http2/Http2TargetHandler.getHttp2ClientChannel:()Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel;
      59: putfield      #16                 // Field http2ClientChannel:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel;
      62: return

  public void writeOutboundRequestHeaders(io.netty.channel.ChannelHandlerContext, io.netty.handler.codec.http.HttpContent) throws io.netty.handler.codec.http2.Http2Exception;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #17                 // Method writeHeaders:(Lio/netty/channel/ChannelHandlerContext;Lio/netty/handler/codec/http/HttpContent;)V
       6: return

  public void writeOutboundRequestBody(io.netty.channel.ChannelHandlerContext, io.netty.handler.codec.http.HttpContent, org.wso2.transport.http.netty.contractimpl.common.states.Http2MessageStateContext) throws io.netty.handler.codec.http2.Http2Exception;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #18                 // Method writeOutboundRequestHeaders:(Lio/netty/channel/ChannelHandlerContext;Lio/netty/handler/codec/http/HttpContent;)V
       6: return

  public void readInboundResponseHeaders(io.netty.channel.ChannelHandlerContext, org.wso2.transport.http.netty.message.Http2HeadersFrame, org.wso2.transport.http.netty.contractimpl.sender.http2.OutboundMsgHolder, boolean, org.wso2.transport.http.netty.contractimpl.common.states.Http2MessageStateContext);
    Code:
       0: aload_3
       1: invokevirtual #19                 // Method org/wso2/transport/http/netty/contractimpl/sender/http2/OutboundMsgHolder.getRequest:()Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
       4: new           #20                 // class java/io/IOException
       7: dup
       8: ldc           #21                 // String Inbound response message already received
      10: invokespecial #22                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      13: invokevirtual #23                 // Method org/wso2/transport/http/netty/message/HttpCarbonMessage.setIoException:(Ljava/io/IOException;)V
      16: aload         5
      18: new           #24                 // class org/wso2/transport/http/netty/contractimpl/sender/states/http2/ReceivingHeaders
      21: dup
      22: aload_0
      23: getfield      #3                  // Field http2TargetHandler:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2TargetHandler;
      26: aload_0
      27: getfield      #4                  // Field http2RequestWriter:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2TargetHandler$Http2RequestWriter;
      30: invokespecial #25                 // Method org/wso2/transport/http/netty/contractimpl/sender/states/http2/ReceivingHeaders."<init>":(Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2TargetHandler;Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2TargetHandler$Http2RequestWriter;)V
      33: invokevirtual #26                 // Method org/wso2/transport/http/netty/contractimpl/common/states/Http2MessageStateContext.setSenderState:(Lorg/wso2/transport/http/netty/contractimpl/sender/states/http2/SenderState;)V
      36: aload         5
      38: invokevirtual #27                 // Method org/wso2/transport/http/netty/contractimpl/common/states/Http2MessageStateContext.getSenderState:()Lorg/wso2/transport/http/netty/contractimpl/sender/states/http2/SenderState;
      41: aload_1
      42: aload_2
      43: aload_3
      44: iload         4
      46: aload         5
      48: invokeinterface #28,  6           // InterfaceMethod org/wso2/transport/http/netty/contractimpl/sender/states/http2/SenderState.readInboundResponseHeaders:(Lio/netty/channel/ChannelHandlerContext;Lorg/wso2/transport/http/netty/message/Http2HeadersFrame;Lorg/wso2/transport/http/netty/contractimpl/sender/http2/OutboundMsgHolder;ZLorg/wso2/transport/http/netty/contractimpl/common/states/Http2MessageStateContext;)V
      53: return

  public void readInboundResponseBody(io.netty.channel.ChannelHandlerContext, org.wso2.transport.http.netty.message.Http2DataFrame, org.wso2.transport.http.netty.contractimpl.sender.http2.OutboundMsgHolder, boolean, org.wso2.transport.http.netty.contractimpl.common.states.Http2MessageStateContext);
    Code:
       0: getstatic     #29                 // Field LOG:Lorg/slf4j/Logger;
       3: ldc           #30                 // String readInboundResponseEntityBody is not a dependant action of this state
       5: invokeinterface #31,  2           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;)V
      10: return

  public void readInboundPromise(org.wso2.transport.http.netty.message.Http2PushPromise, org.wso2.transport.http.netty.contractimpl.sender.http2.OutboundMsgHolder);
    Code:
       0: getstatic     #29                 // Field LOG:Lorg/slf4j/Logger;
       3: ldc           #32                 // String readInboundPromise is not a dependant action of this state
       5: invokeinterface #31,  2           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;)V
      10: return

  private void writeHeaders(io.netty.channel.ChannelHandlerContext, io.netty.handler.codec.http.HttpContent) throws io.netty.handler.codec.http2.Http2Exception;
    Code:
       0: iconst_0
       1: istore_3
       2: aload_0
       3: aload_1
       4: aload_0
       5: getfield      #12                 // Field connection:Lio/netty/handler/codec/http2/Http2Connection;
       8: aload_0
       9: getfield      #16                 // Field http2ClientChannel:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel;
      12: aload_0
      13: getfield      #10                 // Field outboundMsgHolder:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/OutboundMsgHolder;
      16: invokestatic  #33                 // Method org/wso2/transport/http/netty/contractimpl/common/states/Http2StateUtil.initiateStream:(Lio/netty/channel/ChannelHandlerContext;Lio/netty/handler/codec/http2/Http2Connection;Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel;Lorg/wso2/transport/http/netty/contractimpl/sender/http2/OutboundMsgHolder;)I
      19: putfield      #34                 // Field streamId:I
      22: aload_0
      23: getfield      #4                  // Field http2RequestWriter:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2TargetHandler$Http2RequestWriter;
      26: aload_0
      27: getfield      #34                 // Field streamId:I
      30: invokevirtual #35                 // Method org/wso2/transport/http/netty/contractimpl/sender/http2/Http2TargetHandler$Http2RequestWriter.setStreamId:(I)V
      33: aload_0
      34: getfield      #8                  // Field httpOutboundRequest:Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
      37: invokestatic  #36                 // Method org/wso2/transport/http/netty/contractimpl/common/Util.createHttpRequest:(Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;)Lio/netty/handler/codec/http/HttpRequest;
      40: astore        4
      42: aload_2
      43: instanceof    #37                 // class io/netty/handler/codec/http/LastHttpContent
      46: ifeq          63
      49: aload_2
      50: invokeinterface #38,  1           // InterfaceMethod io/netty/handler/codec/http/HttpContent.content:()Lio/netty/buffer/ByteBuf;
      55: invokevirtual #39                 // Method io/netty/buffer/ByteBuf.capacity:()I
      58: ifne          63
      61: iconst_1
      62: istore_3
      63: aload_0
      64: aload_1
      65: aload         4
      67: iload_3
      68: invokespecial #40                 // Method writeOutboundRequestHeaders:(Lio/netty/channel/ChannelHandlerContext;Lio/netty/handler/codec/http/HttpMessage;Z)V
      71: iload_3
      72: ifeq          100
      75: aload_0
      76: getfield      #6                  // Field http2MessageStateContext:Lorg/wso2/transport/http/netty/contractimpl/common/states/Http2MessageStateContext;
      79: new           #41                 // class org/wso2/transport/http/netty/contractimpl/sender/states/http2/RequestCompleted
      82: dup
      83: aload_0
      84: getfield      #3                  // Field http2TargetHandler:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2TargetHandler;
      87: aload_0
      88: getfield      #4                  // Field http2RequestWriter:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2TargetHandler$Http2RequestWriter;
      91: invokespecial #42                 // Method org/wso2/transport/http/netty/contractimpl/sender/states/http2/RequestCompleted."<init>":(Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2TargetHandler;Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2TargetHandler$Http2RequestWriter;)V
      94: invokevirtual #26                 // Method org/wso2/transport/http/netty/contractimpl/common/states/Http2MessageStateContext.setSenderState:(Lorg/wso2/transport/http/netty/contractimpl/sender/states/http2/SenderState;)V
      97: goto          140
     100: aload_0
     101: getfield      #6                  // Field http2MessageStateContext:Lorg/wso2/transport/http/netty/contractimpl/common/states/Http2MessageStateContext;
     104: new           #43                 // class org/wso2/transport/http/netty/contractimpl/sender/states/http2/SendingEntityBody
     107: dup
     108: aload_0
     109: getfield      #3                  // Field http2TargetHandler:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2TargetHandler;
     112: aload_0
     113: getfield      #4                  // Field http2RequestWriter:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2TargetHandler$Http2RequestWriter;
     116: invokespecial #44                 // Method org/wso2/transport/http/netty/contractimpl/sender/states/http2/SendingEntityBody."<init>":(Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2TargetHandler;Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2TargetHandler$Http2RequestWriter;)V
     119: invokevirtual #26                 // Method org/wso2/transport/http/netty/contractimpl/common/states/Http2MessageStateContext.setSenderState:(Lorg/wso2/transport/http/netty/contractimpl/sender/states/http2/SenderState;)V
     122: aload_0
     123: getfield      #6                  // Field http2MessageStateContext:Lorg/wso2/transport/http/netty/contractimpl/common/states/Http2MessageStateContext;
     126: invokevirtual #27                 // Method org/wso2/transport/http/netty/contractimpl/common/states/Http2MessageStateContext.getSenderState:()Lorg/wso2/transport/http/netty/contractimpl/sender/states/http2/SenderState;
     129: aload_1
     130: aload_2
     131: aload_0
     132: getfield      #6                  // Field http2MessageStateContext:Lorg/wso2/transport/http/netty/contractimpl/common/states/Http2MessageStateContext;
     135: invokeinterface #45,  4           // InterfaceMethod org/wso2/transport/http/netty/contractimpl/sender/states/http2/SenderState.writeOutboundRequestBody:(Lio/netty/channel/ChannelHandlerContext;Lio/netty/handler/codec/http/HttpContent;Lorg/wso2/transport/http/netty/contractimpl/common/states/Http2MessageStateContext;)V
     140: return

  private void writeOutboundRequestHeaders(io.netty.channel.ChannelHandlerContext, io.netty.handler.codec.http.HttpMessage, boolean) throws io.netty.handler.codec.http2.Http2Exception;
    Code:
       0: aload_2
       1: invokeinterface #46,  1           // InterfaceMethod io/netty/handler/codec/http/HttpMessage.headers:()Lio/netty/handler/codec/http/HttpHeaders;
       6: getstatic     #47                 // Field io/netty/handler/codec/http2/HttpConversionUtil$ExtensionHeaderNames.SCHEME:Lio/netty/handler/codec/http2/HttpConversionUtil$ExtensionHeaderNames;
       9: invokevirtual #48                 // Method io/netty/handler/codec/http2/HttpConversionUtil$ExtensionHeaderNames.text:()Lio/netty/util/AsciiString;
      12: ldc           #49                 // String http
      14: invokevirtual #50                 // Method io/netty/handler/codec/http/HttpHeaders.add:(Ljava/lang/CharSequence;Ljava/lang/Object;)Lio/netty/handler/codec/http/HttpHeaders;
      17: pop
      18: aload_2
      19: iconst_1
      20: invokestatic  #51                 // Method io/netty/handler/codec/http2/HttpConversionUtil.toHttp2Headers:(Lio/netty/handler/codec/http/HttpMessage;Z)Lio/netty/handler/codec/http2/Http2Headers;
      23: astore        4
      25: aload_1
      26: aload_0
      27: getfield      #10                 // Field outboundMsgHolder:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/OutboundMsgHolder;
      30: aload_0
      31: getfield      #16                 // Field http2ClientChannel:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel;
      34: aload_0
      35: getfield      #14                 // Field encoder:Lio/netty/handler/codec/http2/Http2ConnectionEncoder;
      38: aload_0
      39: getfield      #34                 // Field streamId:I
      42: aload_2
      43: invokeinterface #46,  1           // InterfaceMethod io/netty/handler/codec/http/HttpMessage.headers:()Lio/netty/handler/codec/http/HttpHeaders;
      48: aload         4
      50: iload_3
      51: invokestatic  #52                 // Method org/wso2/transport/http/netty/contractimpl/common/states/Http2StateUtil.writeHttp2Headers:(Lio/netty/channel/ChannelHandlerContext;Lorg/wso2/transport/http/netty/contractimpl/sender/http2/OutboundMsgHolder;Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel;Lio/netty/handler/codec/http2/Http2ConnectionEncoder;ILio/netty/handler/codec/http/HttpHeaders;Lio/netty/handler/codec/http2/Http2Headers;Z)V
      54: return

  static {};
    Code:
       0: ldc           #53                 // class org/wso2/transport/http/netty/contractimpl/sender/states/http2/SendingHeaders
       2: invokestatic  #54                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #29                 // Field LOG:Lorg/slf4j/Logger;
       8: return
}
