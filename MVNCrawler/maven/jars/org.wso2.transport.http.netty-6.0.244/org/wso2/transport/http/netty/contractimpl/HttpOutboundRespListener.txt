Compiled from "HttpOutboundRespListener.java"
public class org.wso2.transport.http.netty.contractimpl.HttpOutboundRespListener implements org.wso2.transport.http.netty.contract.HttpConnectorListener {
  private static final org.slf4j.Logger LOG;

  private final org.wso2.transport.http.netty.contractimpl.listener.SourceHandler sourceHandler;

  private final org.wso2.transport.http.netty.contractimpl.common.states.MessageStateContext messageStateContext;

  private io.netty.channel.ChannelHandlerContext sourceContext;

  private org.wso2.transport.http.netty.contractimpl.listener.RequestDataHolder requestDataHolder;

  private org.wso2.transport.http.netty.internal.HandlerExecutor handlerExecutor;

  private org.wso2.transport.http.netty.message.HttpCarbonMessage inboundRequestMsg;

  private org.wso2.transport.http.netty.contract.config.ChunkConfig chunkConfig;

  private org.wso2.transport.http.netty.contract.config.KeepAliveConfig keepAliveConfig;

  private java.lang.String serverName;

  public org.wso2.transport.http.netty.contractimpl.HttpOutboundRespListener(org.wso2.transport.http.netty.message.HttpCarbonMessage, org.wso2.transport.http.netty.contractimpl.listener.SourceHandler);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class org/wso2/transport/http/netty/contractimpl/listener/RequestDataHolder
       8: dup
       9: aload_1
      10: invokespecial #3                  // Method org/wso2/transport/http/netty/contractimpl/listener/RequestDataHolder."<init>":(Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;)V
      13: putfield      #4                  // Field requestDataHolder:Lorg/wso2/transport/http/netty/contractimpl/listener/RequestDataHolder;
      16: aload_0
      17: aload_1
      18: putfield      #5                  // Field inboundRequestMsg:Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
      21: aload_0
      22: aload_2
      23: putfield      #6                  // Field sourceHandler:Lorg/wso2/transport/http/netty/contractimpl/listener/SourceHandler;
      26: aload_0
      27: aload_2
      28: invokevirtual #7                  // Method org/wso2/transport/http/netty/contractimpl/listener/SourceHandler.getInboundChannelContext:()Lio/netty/channel/ChannelHandlerContext;
      31: putfield      #8                  // Field sourceContext:Lio/netty/channel/ChannelHandlerContext;
      34: aload_0
      35: aload_2
      36: invokevirtual #9                  // Method org/wso2/transport/http/netty/contractimpl/listener/SourceHandler.getChunkConfig:()Lorg/wso2/transport/http/netty/contract/config/ChunkConfig;
      39: putfield      #10                 // Field chunkConfig:Lorg/wso2/transport/http/netty/contract/config/ChunkConfig;
      42: aload_0
      43: aload_2
      44: invokevirtual #11                 // Method org/wso2/transport/http/netty/contractimpl/listener/SourceHandler.getKeepAliveConfig:()Lorg/wso2/transport/http/netty/contract/config/KeepAliveConfig;
      47: putfield      #12                 // Field keepAliveConfig:Lorg/wso2/transport/http/netty/contract/config/KeepAliveConfig;
      50: aload_0
      51: invokestatic  #13                 // Method org/wso2/transport/http/netty/internal/HttpTransportContextHolder.getInstance:()Lorg/wso2/transport/http/netty/internal/HttpTransportContextHolder;
      54: invokevirtual #14                 // Method org/wso2/transport/http/netty/internal/HttpTransportContextHolder.getHandlerExecutor:()Lorg/wso2/transport/http/netty/internal/HandlerExecutor;
      57: putfield      #15                 // Field handlerExecutor:Lorg/wso2/transport/http/netty/internal/HandlerExecutor;
      60: aload_0
      61: aload_2
      62: invokevirtual #16                 // Method org/wso2/transport/http/netty/contractimpl/listener/SourceHandler.getServerName:()Ljava/lang/String;
      65: putfield      #17                 // Field serverName:Ljava/lang/String;
      68: aload_0
      69: aload_1
      70: invokevirtual #18                 // Method org/wso2/transport/http/netty/message/HttpCarbonMessage.getMessageStateContext:()Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;
      73: putfield      #19                 // Field messageStateContext:Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;
      76: return

  public void onMessage(org.wso2.transport.http.netty.message.HttpCarbonMessage);
    Code:
       0: aload_0
       1: getfield      #8                  // Field sourceContext:Lio/netty/channel/ChannelHandlerContext;
       4: invokestatic  #20                 // Method org/wso2/transport/http/netty/contractimpl/common/Util.getBackPressureHandler:(Lio/netty/channel/ChannelHandlerContext;)Lorg/wso2/transport/http/netty/contractimpl/common/BackPressureHandler;
       7: astore_2
       8: aload_1
       9: invokevirtual #21                 // Method org/wso2/transport/http/netty/message/HttpCarbonMessage.isPassthrough:()Z
      12: aload_2
      13: aload_1
      14: invokevirtual #22                 // Method org/wso2/transport/http/netty/message/HttpCarbonMessage.getTargetContext:()Lio/netty/channel/ChannelHandlerContext;
      17: invokestatic  #23                 // Method org/wso2/transport/http/netty/contractimpl/common/Util.setBackPressureListener:(ZLorg/wso2/transport/http/netty/contractimpl/common/BackPressureHandler;Lio/netty/channel/ChannelHandlerContext;)V
      20: aload_0
      21: getfield      #15                 // Field handlerExecutor:Lorg/wso2/transport/http/netty/internal/HandlerExecutor;
      24: ifnull        35
      27: aload_0
      28: getfield      #15                 // Field handlerExecutor:Lorg/wso2/transport/http/netty/internal/HandlerExecutor;
      31: aload_1
      32: invokevirtual #24                 // Method org/wso2/transport/http/netty/internal/HandlerExecutor.executeAtSourceResponseReceiving:(Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;)V
      35: aload_1
      36: invokevirtual #25                 // Method org/wso2/transport/http/netty/message/HttpCarbonMessage.getHttpContentAsync:()Lorg/wso2/transport/http/netty/message/MessageFuture;
      39: aload_0
      40: aload_2
      41: aload_1
      42: invokedynamic #26,  0             // InvokeDynamic #0:onMessage:(Lorg/wso2/transport/http/netty/contractimpl/HttpOutboundRespListener;Lorg/wso2/transport/http/netty/contractimpl/common/BackPressureHandler;Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;)Lorg/wso2/transport/http/netty/message/MessageListener;
      47: invokevirtual #27                 // Method org/wso2/transport/http/netty/message/MessageFuture.setMessageListener:(Lorg/wso2/transport/http/netty/message/MessageListener;)V
      50: return

  public void onPushPromise(org.wso2.transport.http.netty.message.Http2PushPromise);
    Code:
       0: aload_0
       1: getfield      #5                  // Field inboundRequestMsg:Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
       4: invokevirtual #28                 // Method org/wso2/transport/http/netty/message/HttpCarbonMessage.getHttpOutboundRespStatusFuture:()Lorg/wso2/transport/http/netty/contract/HttpResponseFuture;
       7: new           #29                 // class java/lang/UnsupportedOperationException
      10: dup
      11: ldc           #30                 // String Sending a PUSH_PROMISE is not supported for HTTP/1.x connections
      13: invokespecial #31                 // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
      16: invokeinterface #32,  2           // InterfaceMethod org/wso2/transport/http/netty/contract/HttpResponseFuture.notifyHttpListener:(Ljava/lang/Throwable;)V
      21: return

  public void onPushResponse(int, org.wso2.transport.http.netty.message.HttpCarbonMessage);
    Code:
       0: aload_0
       1: getfield      #5                  // Field inboundRequestMsg:Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
       4: invokevirtual #28                 // Method org/wso2/transport/http/netty/message/HttpCarbonMessage.getHttpOutboundRespStatusFuture:()Lorg/wso2/transport/http/netty/contract/HttpResponseFuture;
       7: new           #29                 // class java/lang/UnsupportedOperationException
      10: dup
      11: ldc           #33                 // String Sending Server Push messages is not supported for HTTP/1.x connections
      13: invokespecial #31                 // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
      16: invokeinterface #32,  2           // InterfaceMethod org/wso2/transport/http/netty/contract/HttpResponseFuture.notifyHttpListener:(Ljava/lang/Throwable;)V
      21: return

  private void writeOutboundResponse(org.wso2.transport.http.netty.message.HttpCarbonMessage, io.netty.handler.codec.http.HttpContent);
    Code:
       0: aload_0
       1: getfield      #19                 // Field messageStateContext:Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;
       4: invokevirtual #34                 // Method org/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext.getListenerState:()Lorg/wso2/transport/http/netty/contractimpl/listener/states/ListenerState;
       7: aload_0
       8: aload_1
       9: aload_2
      10: invokeinterface #35,  4           // InterfaceMethod org/wso2/transport/http/netty/contractimpl/listener/states/ListenerState.writeOutboundResponseBody:(Lorg/wso2/transport/http/netty/contractimpl/HttpOutboundRespListener;Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;Lio/netty/handler/codec/http/HttpContent;)V
      15: return

  public boolean isKeepAlive();
    Code:
       0: aload_0
       1: getfield      #12                 // Field keepAliveConfig:Lorg/wso2/transport/http/netty/contract/config/KeepAliveConfig;
       4: aload_0
       5: getfield      #4                  // Field requestDataHolder:Lorg/wso2/transport/http/netty/contractimpl/listener/RequestDataHolder;
       8: invokevirtual #36                 // Method org/wso2/transport/http/netty/contractimpl/listener/RequestDataHolder.getConnectionHeaderValue:()Ljava/lang/String;
      11: aload_0
      12: getfield      #4                  // Field requestDataHolder:Lorg/wso2/transport/http/netty/contractimpl/listener/RequestDataHolder;
      15: invokevirtual #37                 // Method org/wso2/transport/http/netty/contractimpl/listener/RequestDataHolder.getHttpVersion:()Ljava/lang/String;
      18: invokestatic  #38                 // Method org/wso2/transport/http/netty/contractimpl/common/Util.isKeepAliveConnection:(Lorg/wso2/transport/http/netty/contract/config/KeepAliveConfig;Ljava/lang/String;Ljava/lang/String;)Z
      21: ireturn

  public void onError(java.lang.Throwable);
    Code:
       0: getstatic     #39                 // Field LOG:Lorg/slf4j/Logger;
       3: ldc           #40                 // String Couldn\'t send the outbound response
       5: aload_1
       6: invokeinterface #41,  3           // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;Ljava/lang/Throwable;)V
      11: return

  public org.wso2.transport.http.netty.contract.config.ChunkConfig getChunkConfig();
    Code:
       0: aload_0
       1: getfield      #10                 // Field chunkConfig:Lorg/wso2/transport/http/netty/contract/config/ChunkConfig;
       4: areturn

  public org.wso2.transport.http.netty.message.HttpCarbonMessage getInboundRequestMsg();
    Code:
       0: aload_0
       1: getfield      #5                  // Field inboundRequestMsg:Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
       4: areturn

  public org.wso2.transport.http.netty.contractimpl.listener.RequestDataHolder getRequestDataHolder();
    Code:
       0: aload_0
       1: getfield      #4                  // Field requestDataHolder:Lorg/wso2/transport/http/netty/contractimpl/listener/RequestDataHolder;
       4: areturn

  public io.netty.channel.ChannelHandlerContext getSourceContext();
    Code:
       0: aload_0
       1: getfield      #8                  // Field sourceContext:Lio/netty/channel/ChannelHandlerContext;
       4: areturn

  public java.lang.String getServerName();
    Code:
       0: aload_0
       1: getfield      #17                 // Field serverName:Ljava/lang/String;
       4: areturn

  public void setKeepAliveConfig(org.wso2.transport.http.netty.contract.config.KeepAliveConfig);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #12                 // Field keepAliveConfig:Lorg/wso2/transport/http/netty/contract/config/KeepAliveConfig;
       5: return

  public org.wso2.transport.http.netty.contractimpl.listener.SourceHandler getSourceHandler();
    Code:
       0: aload_0
       1: getfield      #6                  // Field sourceHandler:Lorg/wso2/transport/http/netty/contractimpl/listener/SourceHandler;
       4: areturn

  private void lambda$onMessage$32(org.wso2.transport.http.netty.contractimpl.common.BackPressureHandler, org.wso2.transport.http.netty.message.HttpCarbonMessage, io.netty.handler.codec.http.HttpContent);
    Code:
       0: aload_0
       1: getfield      #8                  // Field sourceContext:Lio/netty/channel/ChannelHandlerContext;
       4: aload_1
       5: invokestatic  #42                 // Method org/wso2/transport/http/netty/contractimpl/common/Util.checkUnWritabilityAndNotify:(Lio/netty/channel/ChannelHandlerContext;Lorg/wso2/transport/http/netty/contractimpl/common/BackPressureHandler;)V
       8: aload_0
       9: getfield      #8                  // Field sourceContext:Lio/netty/channel/ChannelHandlerContext;
      12: invokeinterface #43,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.channel:()Lio/netty/channel/Channel;
      17: invokeinterface #44,  1           // InterfaceMethod io/netty/channel/Channel.eventLoop:()Lio/netty/channel/EventLoop;
      22: aload_0
      23: aload_2
      24: aload_3
      25: invokedynamic #45,  0             // InvokeDynamic #1:run:(Lorg/wso2/transport/http/netty/contractimpl/HttpOutboundRespListener;Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;Lio/netty/handler/codec/http/HttpContent;)Ljava/lang/Runnable;
      30: invokeinterface #46,  2           // InterfaceMethod io/netty/channel/EventLoop.execute:(Ljava/lang/Runnable;)V
      35: return

  private void lambda$null$31(org.wso2.transport.http.netty.message.HttpCarbonMessage, io.netty.handler.codec.http.HttpContent);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #47                 // Method writeOutboundResponse:(Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;Lio/netty/handler/codec/http/HttpContent;)V
       6: goto          64
       9: astore_3
      10: new           #49                 // class java/lang/StringBuilder
      13: dup
      14: invokespecial #50                 // Method java/lang/StringBuilder."<init>":()V
      17: ldc           #51                 // String Failed to send the outbound response :
      19: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      22: aload_3
      23: invokevirtual #53                 // Method java/lang/Exception.getMessage:()Ljava/lang/String;
      26: getstatic     #54                 // Field java/util/Locale.ENGLISH:Ljava/util/Locale;
      29: invokevirtual #55                 // Method java/lang/String.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;
      32: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      35: invokevirtual #56                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      38: astore        4
      40: getstatic     #39                 // Field LOG:Lorg/slf4j/Logger;
      43: aload         4
      45: aload_3
      46: invokeinterface #41,  3           // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;Ljava/lang/Throwable;)V
      51: aload_0
      52: getfield      #5                  // Field inboundRequestMsg:Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
      55: invokevirtual #28                 // Method org/wso2/transport/http/netty/message/HttpCarbonMessage.getHttpOutboundRespStatusFuture:()Lorg/wso2/transport/http/netty/contract/HttpResponseFuture;
      58: aload_3
      59: invokeinterface #32,  2           // InterfaceMethod org/wso2/transport/http/netty/contract/HttpResponseFuture.notifyHttpListener:(Ljava/lang/Throwable;)V
      64: return
    Exception table:
       from    to  target type
           0     6     9   Class java/lang/Exception

  static {};
    Code:
       0: ldc           #57                 // class org/wso2/transport/http/netty/contractimpl/HttpOutboundRespListener
       2: invokestatic  #58                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #39                 // Field LOG:Lorg/slf4j/Logger;
       8: return
}
