Compiled from "Http2ClientChannel.java"
public class org.wso2.transport.http.netty.contractimpl.sender.http2.Http2ClientChannel {
  private static final org.slf4j.Logger LOG;

  private java.util.concurrent.ConcurrentHashMap<java.lang.Integer, org.wso2.transport.http.netty.contractimpl.sender.http2.OutboundMsgHolder> inFlightMessages;

  private java.util.concurrent.ConcurrentHashMap<java.lang.Integer, org.wso2.transport.http.netty.contractimpl.sender.http2.OutboundMsgHolder> promisedMessages;

  private io.netty.channel.Channel channel;

  private io.netty.handler.codec.http2.Http2Connection connection;

  private io.netty.channel.ChannelFuture channelFuture;

  private org.wso2.transport.http.netty.contractimpl.common.HttpRoute httpRoute;

  private org.wso2.transport.http.netty.contractimpl.sender.http2.Http2ConnectionManager http2ConnectionManager;

  private java.util.concurrent.atomic.AtomicBoolean isExhausted;

  private java.util.concurrent.atomic.AtomicInteger activeStreams;

  private int socketIdleTimeout;

  private java.util.Map<java.lang.String, org.wso2.transport.http.netty.contractimpl.sender.http2.Http2DataEventListener> dataEventListeners;

  private org.wso2.transport.http.netty.contractimpl.sender.http2.Http2ClientChannel$StreamCloseListener streamCloseListener;

  public org.wso2.transport.http.netty.contractimpl.sender.http2.Http2ClientChannel(org.wso2.transport.http.netty.contractimpl.sender.http2.Http2ConnectionManager, io.netty.handler.codec.http2.Http2Connection, org.wso2.transport.http.netty.contractimpl.common.HttpRoute, io.netty.channel.Channel);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #6                  // class java/util/concurrent/atomic/AtomicBoolean
       8: dup
       9: iconst_0
      10: invokespecial #7                  // Method java/util/concurrent/atomic/AtomicBoolean."<init>":(Z)V
      13: putfield      #3                  // Field isExhausted:Ljava/util/concurrent/atomic/AtomicBoolean;
      16: aload_0
      17: new           #8                  // class java/util/concurrent/atomic/AtomicInteger
      20: dup
      21: iconst_1
      22: invokespecial #9                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
      25: putfield      #4                  // Field activeStreams:Ljava/util/concurrent/atomic/AtomicInteger;
      28: aload_0
      29: ldc           #11                 // int 300000
      31: putfield      #12                 // Field socketIdleTimeout:I
      34: aload_0
      35: aload_1
      36: putfield      #1                  // Field http2ConnectionManager:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ConnectionManager;
      39: aload_0
      40: aload         4
      42: putfield      #13                 // Field channel:Lio/netty/channel/Channel;
      45: aload_0
      46: aload_2
      47: putfield      #14                 // Field connection:Lio/netty/handler/codec/http2/Http2Connection;
      50: aload_0
      51: aload_3
      52: putfield      #2                  // Field httpRoute:Lorg/wso2/transport/http/netty/contractimpl/common/HttpRoute;
      55: aload_0
      56: new           #15                 // class org/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel$StreamCloseListener
      59: dup
      60: aload_0
      61: aload_0
      62: invokespecial #16                 // Method org/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel$StreamCloseListener."<init>":(Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel;Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel;)V
      65: putfield      #17                 // Field streamCloseListener:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel$StreamCloseListener;
      68: aload_0
      69: getfield      #14                 // Field connection:Lio/netty/handler/codec/http2/Http2Connection;
      72: aload_0
      73: getfield      #17                 // Field streamCloseListener:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel$StreamCloseListener;
      76: invokeinterface #18,  2           // InterfaceMethod io/netty/handler/codec/http2/Http2Connection.addListener:(Lio/netty/handler/codec/http2/Http2Connection$Listener;)V
      81: aload_0
      82: new           #19                 // class java/util/HashMap
      85: dup
      86: invokespecial #20                 // Method java/util/HashMap."<init>":()V
      89: putfield      #21                 // Field dataEventListeners:Ljava/util/Map;
      92: aload_0
      93: new           #22                 // class java/util/concurrent/ConcurrentHashMap
      96: dup
      97: invokespecial #23                 // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
     100: putfield      #24                 // Field inFlightMessages:Ljava/util/concurrent/ConcurrentHashMap;
     103: aload_0
     104: new           #22                 // class java/util/concurrent/ConcurrentHashMap
     107: dup
     108: invokespecial #23                 // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
     111: putfield      #25                 // Field promisedMessages:Ljava/util/concurrent/ConcurrentHashMap;
     114: return

  public io.netty.channel.Channel getChannel();
    Code:
       0: aload_0
       1: getfield      #13                 // Field channel:Lio/netty/channel/Channel;
       4: areturn

  public void setChannel(io.netty.channel.Channel);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #13                 // Field channel:Lio/netty/channel/Channel;
       5: return

  public io.netty.handler.codec.http2.Http2Connection getConnection();
    Code:
       0: aload_0
       1: getfield      #14                 // Field connection:Lio/netty/handler/codec/http2/Http2Connection;
       4: areturn

  public io.netty.channel.ChannelFuture getChannelFuture();
    Code:
       0: aload_0
       1: getfield      #26                 // Field channelFuture:Lio/netty/channel/ChannelFuture;
       4: areturn

  public void setChannelFuture(io.netty.channel.ChannelFuture);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #26                 // Field channelFuture:Lio/netty/channel/ChannelFuture;
       5: return

  public void putInFlightMessage(int, org.wso2.transport.http.netty.contractimpl.sender.http2.OutboundMsgHolder);
    Code:
       0: getstatic     #27                 // Field LOG:Lorg/slf4j/Logger;
       3: invokeinterface #28,  1           // InterfaceMethod org/slf4j/Logger.isDebugEnabled:()Z
       8: ifeq          26
      11: getstatic     #27                 // Field LOG:Lorg/slf4j/Logger;
      14: ldc           #29                 // String In flight message added to channel: {} with stream id: {}
      16: aload_0
      17: iload_1
      18: invokestatic  #30                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      21: invokeinterface #31,  4           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      26: aload_0
      27: getfield      #24                 // Field inFlightMessages:Ljava/util/concurrent/ConcurrentHashMap;
      30: iload_1
      31: invokestatic  #30                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      34: aload_2
      35: invokevirtual #32                 // Method java/util/concurrent/ConcurrentHashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      38: pop
      39: return

  public org.wso2.transport.http.netty.contractimpl.sender.http2.OutboundMsgHolder getInFlightMessage(int);
    Code:
       0: getstatic     #27                 // Field LOG:Lorg/slf4j/Logger;
       3: invokeinterface #28,  1           // InterfaceMethod org/slf4j/Logger.isDebugEnabled:()Z
       8: ifeq          26
      11: getstatic     #27                 // Field LOG:Lorg/slf4j/Logger;
      14: ldc           #33                 // String Getting in flight message for stream id: {} from channel: {}
      16: iload_1
      17: invokestatic  #30                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      20: aload_0
      21: invokeinterface #31,  4           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      26: aload_0
      27: getfield      #24                 // Field inFlightMessages:Ljava/util/concurrent/ConcurrentHashMap;
      30: iload_1
      31: invokestatic  #30                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      34: invokevirtual #34                 // Method java/util/concurrent/ConcurrentHashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      37: checkcast     #35                 // class org/wso2/transport/http/netty/contractimpl/sender/http2/OutboundMsgHolder
      40: areturn

  public void removeInFlightMessage(int);
    Code:
       0: getstatic     #27                 // Field LOG:Lorg/slf4j/Logger;
       3: invokeinterface #28,  1           // InterfaceMethod org/slf4j/Logger.isDebugEnabled:()Z
       8: ifeq          26
      11: getstatic     #27                 // Field LOG:Lorg/slf4j/Logger;
      14: ldc           #36                 // String In flight message for stream id: {} removed from channel: {}
      16: iload_1
      17: invokestatic  #30                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      20: aload_0
      21: invokeinterface #31,  4           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      26: aload_0
      27: getfield      #24                 // Field inFlightMessages:Ljava/util/concurrent/ConcurrentHashMap;
      30: iload_1
      31: invokestatic  #30                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      34: invokevirtual #37                 // Method java/util/concurrent/ConcurrentHashMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      37: pop
      38: return

  public void putPromisedMessage(int, org.wso2.transport.http.netty.contractimpl.sender.http2.OutboundMsgHolder);
    Code:
       0: aload_0
       1: getfield      #25                 // Field promisedMessages:Ljava/util/concurrent/ConcurrentHashMap;
       4: iload_1
       5: invokestatic  #30                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       8: aload_2
       9: invokevirtual #32                 // Method java/util/concurrent/ConcurrentHashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      12: pop
      13: return

  org.wso2.transport.http.netty.contractimpl.sender.http2.OutboundMsgHolder getPromisedMessage(int);
    Code:
       0: aload_0
       1: getfield      #25                 // Field promisedMessages:Ljava/util/concurrent/ConcurrentHashMap;
       4: iload_1
       5: invokestatic  #30                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       8: invokevirtual #34                 // Method java/util/concurrent/ConcurrentHashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      11: checkcast     #35                 // class org/wso2/transport/http/netty/contractimpl/sender/http2/OutboundMsgHolder
      14: areturn

  public void removePromisedMessage(int);
    Code:
       0: aload_0
       1: getfield      #25                 // Field promisedMessages:Ljava/util/concurrent/ConcurrentHashMap;
       4: iload_1
       5: invokestatic  #30                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       8: invokevirtual #37                 // Method java/util/concurrent/ConcurrentHashMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      11: pop
      12: return

  int incrementActiveStreamCount();
    Code:
       0: aload_0
       1: getfield      #4                  // Field activeStreams:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #38                 // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
       7: ireturn

  void markAsExhausted();
    Code:
       0: aload_0
       1: getfield      #3                  // Field isExhausted:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: iconst_1
       5: invokevirtual #39                 // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V
       8: return

  public void addDataEventListener(java.lang.String, org.wso2.transport.http.netty.contractimpl.sender.http2.Http2DataEventListener);
    Code:
       0: aload_0
       1: getfield      #21                 // Field dataEventListeners:Ljava/util/Map;
       4: aload_1
       5: aload_2
       6: invokeinterface #40,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      11: pop
      12: return

  public java.util.List<org.wso2.transport.http.netty.contractimpl.sender.http2.Http2DataEventListener> getDataEventListeners();
    Code:
       0: new           #41                 // class java/util/ArrayList
       3: dup
       4: aload_0
       5: getfield      #21                 // Field dataEventListeners:Ljava/util/Map;
       8: invokeinterface #42,  1           // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
      13: invokespecial #43                 // Method java/util/ArrayList."<init>":(Ljava/util/Collection;)V
      16: areturn

  public int getSocketIdleTimeout();
    Code:
       0: aload_0
       1: getfield      #12                 // Field socketIdleTimeout:I
       4: ireturn

  public void setSocketIdleTimeout(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #12                 // Field socketIdleTimeout:I
       5: return

  void destroy();
    Code:
       0: aload_0
       1: getfield      #14                 // Field connection:Lio/netty/handler/codec/http2/Http2Connection;
       4: aload_0
       5: getfield      #17                 // Field streamCloseListener:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel$StreamCloseListener;
       8: invokeinterface #44,  2           // InterfaceMethod io/netty/handler/codec/http2/Http2Connection.removeListener:(Lio/netty/handler/codec/http2/Http2Connection$Listener;)V
      13: aload_0
      14: getfield      #24                 // Field inFlightMessages:Ljava/util/concurrent/ConcurrentHashMap;
      17: invokevirtual #45                 // Method java/util/concurrent/ConcurrentHashMap.clear:()V
      20: aload_0
      21: getfield      #25                 // Field promisedMessages:Ljava/util/concurrent/ConcurrentHashMap;
      24: invokevirtual #45                 // Method java/util/concurrent/ConcurrentHashMap.clear:()V
      27: aload_0
      28: getfield      #1                  // Field http2ConnectionManager:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ConnectionManager;
      31: aload_0
      32: getfield      #2                  // Field httpRoute:Lorg/wso2/transport/http/netty/contractimpl/common/HttpRoute;
      35: aload_0
      36: invokevirtual #46                 // Method org/wso2/transport/http/netty/contractimpl/sender/http2/Http2ConnectionManager.removeClientChannel:(Lorg/wso2/transport/http/netty/contractimpl/common/HttpRoute;Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel;)V
      39: return

  static java.util.concurrent.atomic.AtomicInteger access$000(org.wso2.transport.http.netty.contractimpl.sender.http2.Http2ClientChannel);
    Code:
       0: aload_0
       1: getfield      #4                  // Field activeStreams:Ljava/util/concurrent/atomic/AtomicInteger;
       4: areturn

  static java.util.concurrent.atomic.AtomicBoolean access$100(org.wso2.transport.http.netty.contractimpl.sender.http2.Http2ClientChannel);
    Code:
       0: aload_0
       1: getfield      #3                  // Field isExhausted:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: areturn

  static org.wso2.transport.http.netty.contractimpl.common.HttpRoute access$200(org.wso2.transport.http.netty.contractimpl.sender.http2.Http2ClientChannel);
    Code:
       0: aload_0
       1: getfield      #2                  // Field httpRoute:Lorg/wso2/transport/http/netty/contractimpl/common/HttpRoute;
       4: areturn

  static org.wso2.transport.http.netty.contractimpl.sender.http2.Http2ConnectionManager access$300(org.wso2.transport.http.netty.contractimpl.sender.http2.Http2ClientChannel);
    Code:
       0: aload_0
       1: getfield      #1                  // Field http2ConnectionManager:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ConnectionManager;
       4: areturn

  static {};
    Code:
       0: ldc           #47                 // class org/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel
       2: invokestatic  #48                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #27                 // Field LOG:Lorg/slf4j/Logger;
       8: return
}
