Compiled from "ReceivingHeaders.java"
public class org.wso2.transport.http.netty.contractimpl.listener.states.ReceivingHeaders implements org.wso2.transport.http.netty.contractimpl.listener.states.ListenerState {
  private static final org.slf4j.Logger LOG;

  private final org.wso2.transport.http.netty.contractimpl.listener.SourceHandler sourceHandler;

  private final org.wso2.transport.http.netty.internal.HandlerExecutor handlerExecutor;

  private final org.wso2.transport.http.netty.contractimpl.common.states.MessageStateContext messageStateContext;

  private org.wso2.transport.http.netty.message.HttpCarbonMessage inboundRequestMsg;

  private float httpVersion;

  public org.wso2.transport.http.netty.contractimpl.listener.states.ReceivingHeaders(org.wso2.transport.http.netty.contractimpl.listener.SourceHandler, org.wso2.transport.http.netty.contractimpl.common.states.MessageStateContext);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #4                  // Field sourceHandler:Lorg/wso2/transport/http/netty/contractimpl/listener/SourceHandler;
       9: aload_0
      10: invokestatic  #5                  // Method org/wso2/transport/http/netty/internal/HttpTransportContextHolder.getInstance:()Lorg/wso2/transport/http/netty/internal/HttpTransportContextHolder;
      13: invokevirtual #6                  // Method org/wso2/transport/http/netty/internal/HttpTransportContextHolder.getHandlerExecutor:()Lorg/wso2/transport/http/netty/internal/HandlerExecutor;
      16: putfield      #7                  // Field handlerExecutor:Lorg/wso2/transport/http/netty/internal/HandlerExecutor;
      19: aload_0
      20: aload_2
      21: putfield      #8                  // Field messageStateContext:Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;
      24: return

  public void readInboundRequestHeaders(org.wso2.transport.http.netty.message.HttpCarbonMessage, io.netty.handler.codec.http.HttpRequest);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #9                  // Field inboundRequestMsg:Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
       5: aload_0
       6: aload_1
       7: ldc           #10                 // String HTTP_VERSION
       9: invokevirtual #11                 // Method org/wso2/transport/http/netty/message/HttpCarbonMessage.getProperty:(Ljava/lang/String;)Ljava/lang/Object;
      12: checkcast     #12                 // class java/lang/String
      15: invokestatic  #13                 // Method java/lang/Float.parseFloat:(Ljava/lang/String;)F
      18: putfield      #14                 // Field httpVersion:F
      21: aload_1
      22: invokestatic  #15                 // Method org/wso2/transport/http/netty/contractimpl/common/Util.is100ContinueRequest:(Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;)Z
      25: istore_3
      26: iload_3
      27: ifeq          57
      30: aload_0
      31: getfield      #8                  // Field messageStateContext:Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;
      34: new           #16                 // class org/wso2/transport/http/netty/contractimpl/listener/states/Expect100ContinueHeaderReceived
      37: dup
      38: aload_0
      39: getfield      #8                  // Field messageStateContext:Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;
      42: aload_0
      43: getfield      #4                  // Field sourceHandler:Lorg/wso2/transport/http/netty/contractimpl/listener/SourceHandler;
      46: aload_1
      47: aload_0
      48: getfield      #14                 // Field httpVersion:F
      51: invokespecial #17                 // Method org/wso2/transport/http/netty/contractimpl/listener/states/Expect100ContinueHeaderReceived."<init>":(Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;Lorg/wso2/transport/http/netty/contractimpl/listener/SourceHandler;Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;F)V
      54: invokevirtual #18                 // Method org/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext.setListenerState:(Lorg/wso2/transport/http/netty/contractimpl/listener/states/ListenerState;)V
      57: aload_0
      58: aload_1
      59: invokespecial #19                 // Method notifyRequestListener:(Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;)V
      62: aload_2
      63: invokeinterface #20,  1           // InterfaceMethod io/netty/handler/codec/http/HttpRequest.decoderResult:()Lio/netty/handler/codec/DecoderResult;
      68: invokevirtual #21                 // Method io/netty/handler/codec/DecoderResult.isFailure:()Z
      71: ifeq          94
      74: getstatic     #22                 // Field LOG:Lorg/slf4j/Logger;
      77: aload_2
      78: invokeinterface #20,  1           // InterfaceMethod io/netty/handler/codec/http/HttpRequest.decoderResult:()Lio/netty/handler/codec/DecoderResult;
      83: invokevirtual #23                 // Method io/netty/handler/codec/DecoderResult.cause:()Ljava/lang/Throwable;
      86: invokevirtual #24                 // Method java/lang/Throwable.getMessage:()Ljava/lang/String;
      89: invokeinterface #25,  2           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;)V
      94: aload_0
      95: getfield      #7                  // Field handlerExecutor:Lorg/wso2/transport/http/netty/internal/HandlerExecutor;
      98: ifnull        109
     101: aload_0
     102: getfield      #7                  // Field handlerExecutor:Lorg/wso2/transport/http/netty/internal/HandlerExecutor;
     105: aload_1
     106: invokevirtual #26                 // Method org/wso2/transport/http/netty/internal/HandlerExecutor.executeAtSourceRequestReceiving:(Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;)V
     109: return

  private void notifyRequestListener(org.wso2.transport.http.netty.message.HttpCarbonMessage);
    Code:
       0: aload_0
       1: getfield      #7                  // Field handlerExecutor:Lorg/wso2/transport/http/netty/internal/HandlerExecutor;
       4: ifnull        15
       7: aload_0
       8: getfield      #7                  // Field handlerExecutor:Lorg/wso2/transport/http/netty/internal/HandlerExecutor;
      11: aload_1
      12: invokevirtual #26                 // Method org/wso2/transport/http/netty/internal/HandlerExecutor.executeAtSourceRequestReceiving:(Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;)V
      15: aload_0
      16: getfield      #4                  // Field sourceHandler:Lorg/wso2/transport/http/netty/contractimpl/listener/SourceHandler;
      19: invokevirtual #27                 // Method org/wso2/transport/http/netty/contractimpl/listener/SourceHandler.getServerConnectorFuture:()Lorg/wso2/transport/http/netty/contract/ServerConnectorFuture;
      22: ifnull        90
      25: aload_1
      26: invokevirtual #28                 // Method org/wso2/transport/http/netty/message/HttpCarbonMessage.getHttpResponseFuture:()Lorg/wso2/transport/http/netty/contract/ServerConnectorFuture;
      29: astore_2
      30: aload_2
      31: new           #29                 // class org/wso2/transport/http/netty/contractimpl/HttpOutboundRespListener
      34: dup
      35: aload_1
      36: aload_0
      37: getfield      #4                  // Field sourceHandler:Lorg/wso2/transport/http/netty/contractimpl/listener/SourceHandler;
      40: invokespecial #30                 // Method org/wso2/transport/http/netty/contractimpl/HttpOutboundRespListener."<init>":(Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;Lorg/wso2/transport/http/netty/contractimpl/listener/SourceHandler;)V
      43: invokeinterface #31,  2           // InterfaceMethod org/wso2/transport/http/netty/contract/ServerConnectorFuture.setHttpConnectorListener:(Lorg/wso2/transport/http/netty/contract/HttpConnectorListener;)V
      48: aload_1
      49: aload_0
      50: getfield      #4                  // Field sourceHandler:Lorg/wso2/transport/http/netty/contractimpl/listener/SourceHandler;
      53: invokevirtual #32                 // Method org/wso2/transport/http/netty/contractimpl/listener/SourceHandler.getInboundChannelContext:()Lio/netty/channel/ChannelHandlerContext;
      56: invokevirtual #33                 // Method org/wso2/transport/http/netty/message/HttpCarbonMessage.setSourceContext:(Lio/netty/channel/ChannelHandlerContext;)V
      59: aload_0
      60: getfield      #4                  // Field sourceHandler:Lorg/wso2/transport/http/netty/contractimpl/listener/SourceHandler;
      63: invokevirtual #27                 // Method org/wso2/transport/http/netty/contractimpl/listener/SourceHandler.getServerConnectorFuture:()Lorg/wso2/transport/http/netty/contract/ServerConnectorFuture;
      66: aload_1
      67: invokeinterface #34,  2           // InterfaceMethod org/wso2/transport/http/netty/contract/ServerConnectorFuture.notifyHttpListener:(Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;)V
      72: goto          100
      75: astore_2
      76: getstatic     #22                 // Field LOG:Lorg/slf4j/Logger;
      79: ldc           #36                 // String Error while notifying listeners
      81: aload_2
      82: invokeinterface #37,  3           // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;Ljava/lang/Throwable;)V
      87: goto          100
      90: getstatic     #22                 // Field LOG:Lorg/slf4j/Logger;
      93: ldc           #38                 // String Cannot find registered listener to forward the message
      95: invokeinterface #39,  2           // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;)V
     100: return
    Exception table:
       from    to  target type
          25    72    75   Class java/lang/Exception

  public void readInboundRequestBody(java.lang.Object) throws org.wso2.transport.http.netty.contract.ServerConnectorException;
    Code:
       0: aload_0
       1: getfield      #8                  // Field messageStateContext:Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;
       4: new           #40                 // class org/wso2/transport/http/netty/contractimpl/listener/states/ReceivingEntityBody
       7: dup
       8: aload_0
       9: getfield      #8                  // Field messageStateContext:Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;
      12: aload_0
      13: getfield      #9                  // Field inboundRequestMsg:Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
      16: aload_0
      17: getfield      #4                  // Field sourceHandler:Lorg/wso2/transport/http/netty/contractimpl/listener/SourceHandler;
      20: aload_0
      21: getfield      #14                 // Field httpVersion:F
      24: invokespecial #41                 // Method org/wso2/transport/http/netty/contractimpl/listener/states/ReceivingEntityBody."<init>":(Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;Lorg/wso2/transport/http/netty/contractimpl/listener/SourceHandler;F)V
      27: invokevirtual #18                 // Method org/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext.setListenerState:(Lorg/wso2/transport/http/netty/contractimpl/listener/states/ListenerState;)V
      30: aload_0
      31: getfield      #8                  // Field messageStateContext:Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;
      34: invokevirtual #42                 // Method org/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext.getListenerState:()Lorg/wso2/transport/http/netty/contractimpl/listener/states/ListenerState;
      37: aload_1
      38: invokeinterface #43,  2           // InterfaceMethod org/wso2/transport/http/netty/contractimpl/listener/states/ListenerState.readInboundRequestBody:(Ljava/lang/Object;)V
      43: return

  public void writeOutboundResponseHeaders(org.wso2.transport.http.netty.message.HttpCarbonMessage, io.netty.handler.codec.http.HttpContent);
    Code:
       0: getstatic     #22                 // Field LOG:Lorg/slf4j/Logger;
       3: ldc           #44                 // String writeOutboundResponseHeaders {}
       5: ldc           #45                 // String is not a dependant action of this state
       7: invokeinterface #46,  3           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;)V
      12: return

  public void writeOutboundResponseBody(org.wso2.transport.http.netty.contractimpl.HttpOutboundRespListener, org.wso2.transport.http.netty.message.HttpCarbonMessage, io.netty.handler.codec.http.HttpContent);
    Code:
       0: aload_0
       1: getfield      #4                  // Field sourceHandler:Lorg/wso2/transport/http/netty/contractimpl/listener/SourceHandler;
       4: invokevirtual #32                 // Method org/wso2/transport/http/netty/contractimpl/listener/SourceHandler.getInboundChannelContext:()Lio/netty/channel/ChannelHandlerContext;
       7: invokeinterface #47,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.channel:()Lio/netty/channel/Channel;
      12: aload_1
      13: aload_0
      14: getfield      #8                  // Field messageStateContext:Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;
      17: aload_2
      18: aload_3
      19: ldc           #48                 // String Remote client closed the connection while reading inbound request headers
      21: invokestatic  #49                 // Method org/wso2/transport/http/netty/contractimpl/common/states/StateUtil.respondToIncompleteRequest:(Lio/netty/channel/Channel;Lorg/wso2/transport/http/netty/contractimpl/HttpOutboundRespListener;Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;Lio/netty/handler/codec/http/HttpContent;Ljava/lang/String;)V
      24: return

  public void handleAbruptChannelClosure(org.wso2.transport.http.netty.contract.ServerConnectorFuture);
    Code:
       0: aload_0
       1: getfield      #9                  // Field inboundRequestMsg:Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
       4: ldc           #48                 // String Remote client closed the connection while reading inbound request headers
       6: invokestatic  #50                 // Method org/wso2/transport/http/netty/contractimpl/common/states/StateUtil.handleIncompleteInboundMessage:(Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;Ljava/lang/String;)V
       9: return

  public io.netty.channel.ChannelFuture handleIdleTimeoutConnectionClosure(org.wso2.transport.http.netty.contract.ServerConnectorFuture, io.netty.channel.ChannelHandlerContext);
    Code:
       0: aload_2
       1: getstatic     #51                 // Field io/netty/handler/codec/http/HttpResponseStatus.REQUEST_TIMEOUT:Lio/netty/handler/codec/http/HttpResponseStatus;
       4: getstatic     #52                 // Field io/netty/buffer/Unpooled.EMPTY_BUFFER:Lio/netty/buffer/ByteBuf;
       7: iconst_0
       8: aload_0
       9: getfield      #14                 // Field httpVersion:F
      12: aload_0
      13: getfield      #4                  // Field sourceHandler:Lorg/wso2/transport/http/netty/contractimpl/listener/SourceHandler;
      16: invokevirtual #53                 // Method org/wso2/transport/http/netty/contractimpl/listener/SourceHandler.getServerName:()Ljava/lang/String;
      19: invokestatic  #54                 // Method org/wso2/transport/http/netty/contractimpl/common/states/StateUtil.sendRequestTimeoutResponse:(Lio/netty/channel/ChannelHandlerContext;Lio/netty/handler/codec/http/HttpResponseStatus;Lio/netty/buffer/ByteBuf;IFLjava/lang/String;)Lio/netty/channel/ChannelFuture;
      22: astore_3
      23: aload_3
      24: aload_0
      25: aload_2
      26: invokedynamic #55,  0             // InvokeDynamic #0:operationComplete:(Lorg/wso2/transport/http/netty/contractimpl/listener/states/ReceivingHeaders;Lio/netty/channel/ChannelHandlerContext;)Lio/netty/channel/ChannelFutureListener;
      31: invokeinterface #56,  2           // InterfaceMethod io/netty/channel/ChannelFuture.addListener:(Lio/netty/util/concurrent/GenericFutureListener;)Lio/netty/channel/ChannelFuture;
      36: pop
      37: aload_3
      38: areturn

  private void lambda$handleIdleTimeoutConnectionClosure$61(io.netty.channel.ChannelHandlerContext, io.netty.channel.ChannelFuture) throws java.lang.Exception;
    Code:
       0: aload_2
       1: invokeinterface #57,  1           // InterfaceMethod io/netty/channel/ChannelFuture.cause:()Ljava/lang/Throwable;
       6: astore_3
       7: aload_3
       8: ifnull        25
      11: getstatic     #22                 // Field LOG:Lorg/slf4j/Logger;
      14: ldc           #58                 // String Failed to send: {}
      16: aload_3
      17: invokevirtual #24                 // Method java/lang/Throwable.getMessage:()Ljava/lang/String;
      20: invokeinterface #46,  3           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;)V
      25: aload_1
      26: invokeinterface #59,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.close:()Lio/netty/channel/ChannelFuture;
      31: pop
      32: aload_0
      33: getfield      #9                  // Field inboundRequestMsg:Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
      36: ldc           #60                 // String Idle timeout triggered while reading inbound request headers
      38: invokestatic  #50                 // Method org/wso2/transport/http/netty/contractimpl/common/states/StateUtil.handleIncompleteInboundMessage:(Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;Ljava/lang/String;)V
      41: return

  static {};
    Code:
       0: ldc           #61                 // class org/wso2/transport/http/netty/contractimpl/listener/states/ReceivingHeaders
       2: invokestatic  #62                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #22                 // Field LOG:Lorg/slf4j/Logger;
       8: return
}
