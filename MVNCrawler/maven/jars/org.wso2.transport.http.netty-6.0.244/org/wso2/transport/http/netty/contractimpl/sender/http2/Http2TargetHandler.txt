Compiled from "Http2TargetHandler.java"
public class org.wso2.transport.http.netty.contractimpl.sender.http2.Http2TargetHandler extends io.netty.channel.ChannelDuplexHandler {
  private static final org.slf4j.Logger LOG;

  private io.netty.handler.codec.http2.Http2Connection connection;

  private io.netty.handler.codec.http2.Http2ConnectionEncoder encoder;

  private org.wso2.transport.http.netty.contractimpl.sender.http2.Http2ClientChannel http2ClientChannel;

  public org.wso2.transport.http.netty.contractimpl.sender.http2.Http2TargetHandler(io.netty.handler.codec.http2.Http2Connection, io.netty.handler.codec.http2.Http2ConnectionEncoder);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method io/netty/channel/ChannelDuplexHandler."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #4                  // Field connection:Lio/netty/handler/codec/http2/Http2Connection;
       9: aload_0
      10: aload_2
      11: putfield      #5                  // Field encoder:Lio/netty/handler/codec/http2/Http2ConnectionEncoder;
      14: return

  public void write(io.netty.channel.ChannelHandlerContext, java.lang.Object, io.netty.channel.ChannelPromise);
    Code:
       0: aload_2
       1: instanceof    #6                  // class org/wso2/transport/http/netty/contractimpl/sender/http2/OutboundMsgHolder
       4: ifeq          30
       7: aload_2
       8: checkcast     #6                  // class org/wso2/transport/http/netty/contractimpl/sender/http2/OutboundMsgHolder
      11: astore        4
      13: new           #7                  // class org/wso2/transport/http/netty/contractimpl/sender/http2/Http2TargetHandler$Http2RequestWriter
      16: dup
      17: aload_0
      18: aload         4
      20: invokespecial #8                  // Method org/wso2/transport/http/netty/contractimpl/sender/http2/Http2TargetHandler$Http2RequestWriter."<init>":(Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2TargetHandler;Lorg/wso2/transport/http/netty/contractimpl/sender/http2/OutboundMsgHolder;)V
      23: aload_1
      24: invokevirtual #9                  // Method org/wso2/transport/http/netty/contractimpl/sender/http2/Http2TargetHandler$Http2RequestWriter.writeContent:(Lio/netty/channel/ChannelHandlerContext;)V
      27: goto          70
      30: aload_2
      31: instanceof    #10                 // class org/wso2/transport/http/netty/message/Http2Reset
      34: ifeq          61
      37: aload_2
      38: checkcast     #10                 // class org/wso2/transport/http/netty/message/Http2Reset
      41: astore        4
      43: aload_0
      44: aload_1
      45: aload         4
      47: invokevirtual #11                 // Method org/wso2/transport/http/netty/message/Http2Reset.getStreamId:()I
      50: aload         4
      52: invokevirtual #12                 // Method org/wso2/transport/http/netty/message/Http2Reset.getError:()Lio/netty/handler/codec/http2/Http2Error;
      55: invokevirtual #13                 // Method resetStream:(Lio/netty/channel/ChannelHandlerContext;ILio/netty/handler/codec/http2/Http2Error;)V
      58: goto          70
      61: aload_1
      62: aload_2
      63: aload_3
      64: invokeinterface #14,  3           // InterfaceMethod io/netty/channel/ChannelHandlerContext.write:(Ljava/lang/Object;Lio/netty/channel/ChannelPromise;)Lio/netty/channel/ChannelFuture;
      69: pop
      70: return

  void resetStream(io.netty.channel.ChannelHandlerContext, int, io.netty.handler.codec.http2.Http2Error);
    Code:
       0: aload_0
       1: getfield      #5                  // Field encoder:Lio/netty/handler/codec/http2/Http2ConnectionEncoder;
       4: aload_1
       5: iload_2
       6: aload_3
       7: invokevirtual #15                 // Method io/netty/handler/codec/http2/Http2Error.code:()J
      10: aload_1
      11: invokeinterface #16,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.newPromise:()Lio/netty/channel/ChannelPromise;
      16: invokeinterface #17,  6           // InterfaceMethod io/netty/handler/codec/http2/Http2ConnectionEncoder.writeRstStream:(Lio/netty/channel/ChannelHandlerContext;IJLio/netty/channel/ChannelPromise;)Lio/netty/channel/ChannelFuture;
      21: pop
      22: aload_0
      23: getfield      #2                  // Field http2ClientChannel:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel;
      26: invokevirtual #18                 // Method org/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel.getDataEventListeners:()Ljava/util/List;
      29: iload_2
      30: invokedynamic #19,  0             // InvokeDynamic #0:accept:(I)Ljava/util/function/Consumer;
      35: invokeinterface #20,  2           // InterfaceMethod java/util/List.forEach:(Ljava/util/function/Consumer;)V
      40: aload_1
      41: invokeinterface #21,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.flush:()Lio/netty/channel/ChannelHandlerContext;
      46: pop
      47: return

  public io.netty.handler.codec.http2.Http2Connection getConnection();
    Code:
       0: aload_0
       1: getfield      #4                  // Field connection:Lio/netty/handler/codec/http2/Http2Connection;
       4: areturn

  public void setHttp2ClientChannel(org.wso2.transport.http.netty.contractimpl.sender.http2.Http2ClientChannel);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2                  // Field http2ClientChannel:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel;
       5: return

  public org.wso2.transport.http.netty.contractimpl.sender.http2.Http2ClientChannel getHttp2ClientChannel();
    Code:
       0: aload_0
       1: getfield      #2                  // Field http2ClientChannel:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel;
       4: areturn

  public io.netty.handler.codec.http2.Http2ConnectionEncoder getEncoder();
    Code:
       0: aload_0
       1: getfield      #5                  // Field encoder:Lio/netty/handler/codec/http2/Http2ConnectionEncoder;
       4: areturn

  public void channelRead(io.netty.channel.ChannelHandlerContext, java.lang.Object);
    Code:
       0: aload_2
       1: instanceof    #22                 // class org/wso2/transport/http/netty/message/Http2HeadersFrame
       4: ifeq          19
       7: aload_0
       8: aload_1
       9: aload_2
      10: checkcast     #22                 // class org/wso2/transport/http/netty/message/Http2HeadersFrame
      13: invokespecial #23                 // Method onHeaderRead:(Lio/netty/channel/ChannelHandlerContext;Lorg/wso2/transport/http/netty/message/Http2HeadersFrame;)V
      16: goto          71
      19: aload_2
      20: instanceof    #24                 // class org/wso2/transport/http/netty/message/Http2DataFrame
      23: ifeq          38
      26: aload_0
      27: aload_1
      28: aload_2
      29: checkcast     #24                 // class org/wso2/transport/http/netty/message/Http2DataFrame
      32: invokespecial #25                 // Method onDataRead:(Lio/netty/channel/ChannelHandlerContext;Lorg/wso2/transport/http/netty/message/Http2DataFrame;)V
      35: goto          71
      38: aload_2
      39: instanceof    #26                 // class org/wso2/transport/http/netty/message/Http2PushPromise
      42: ifeq          56
      45: aload_0
      46: aload_2
      47: checkcast     #26                 // class org/wso2/transport/http/netty/message/Http2PushPromise
      50: invokespecial #27                 // Method onPushPromiseRead:(Lorg/wso2/transport/http/netty/message/Http2PushPromise;)V
      53: goto          71
      56: aload_2
      57: instanceof    #10                 // class org/wso2/transport/http/netty/message/Http2Reset
      60: ifeq          71
      63: aload_0
      64: aload_2
      65: checkcast     #10                 // class org/wso2/transport/http/netty/message/Http2Reset
      68: invokespecial #28                 // Method onResetRead:(Lorg/wso2/transport/http/netty/message/Http2Reset;)V
      71: return

  private void onHeaderRead(io.netty.channel.ChannelHandlerContext, org.wso2.transport.http.netty.message.Http2HeadersFrame);
    Code:
       0: aload_2
       1: invokevirtual #29                 // Method org/wso2/transport/http/netty/message/Http2HeadersFrame.getStreamId:()I
       4: istore_3
       5: aload_0
       6: getfield      #2                  // Field http2ClientChannel:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel;
       9: iload_3
      10: invokevirtual #30                 // Method org/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel.getInFlightMessage:(I)Lorg/wso2/transport/http/netty/contractimpl/sender/http2/OutboundMsgHolder;
      13: astore        4
      15: iconst_0
      16: istore        5
      18: aload         4
      20: ifnonnull     63
      23: aload_0
      24: getfield      #2                  // Field http2ClientChannel:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel;
      27: iload_3
      28: invokevirtual #31                 // Method org/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel.getPromisedMessage:(I)Lorg/wso2/transport/http/netty/contractimpl/sender/http2/OutboundMsgHolder;
      31: astore        4
      33: aload         4
      35: ifnull        44
      38: iconst_1
      39: istore        5
      41: goto          63
      44: getstatic     #1                  // Field LOG:Lorg/slf4j/Logger;
      47: ldc           #32                 // String Header Frame received on channel: {} with invalid stream id: {}
      49: aload_0
      50: getfield      #2                  // Field http2ClientChannel:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel;
      53: iload_3
      54: invokestatic  #33                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      57: invokeinterface #34,  4           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      62: return
      63: aload_0
      64: aload         4
      66: invokespecial #35                 // Method initHttp2MessageContext:(Lorg/wso2/transport/http/netty/contractimpl/sender/http2/OutboundMsgHolder;)Lorg/wso2/transport/http/netty/contractimpl/common/states/Http2MessageStateContext;
      69: astore        6
      71: aload         6
      73: invokevirtual #36                 // Method org/wso2/transport/http/netty/contractimpl/common/states/Http2MessageStateContext.getSenderState:()Lorg/wso2/transport/http/netty/contractimpl/sender/states/http2/SenderState;
      76: aload_1
      77: aload_2
      78: aload         4
      80: iload         5
      82: aload         6
      84: invokeinterface #37,  6           // InterfaceMethod org/wso2/transport/http/netty/contractimpl/sender/states/http2/SenderState.readInboundResponseHeaders:(Lio/netty/channel/ChannelHandlerContext;Lorg/wso2/transport/http/netty/message/Http2HeadersFrame;Lorg/wso2/transport/http/netty/contractimpl/sender/http2/OutboundMsgHolder;ZLorg/wso2/transport/http/netty/contractimpl/common/states/Http2MessageStateContext;)V
      89: return

  private void onDataRead(io.netty.channel.ChannelHandlerContext, org.wso2.transport.http.netty.message.Http2DataFrame);
    Code:
       0: aload_2
       1: invokevirtual #38                 // Method org/wso2/transport/http/netty/message/Http2DataFrame.getStreamId:()I
       4: istore_3
       5: aload_0
       6: getfield      #2                  // Field http2ClientChannel:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel;
       9: iload_3
      10: invokevirtual #30                 // Method org/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel.getInFlightMessage:(I)Lorg/wso2/transport/http/netty/contractimpl/sender/http2/OutboundMsgHolder;
      13: astore        4
      15: iconst_0
      16: istore        5
      18: aload         4
      20: ifnonnull     63
      23: aload_0
      24: getfield      #2                  // Field http2ClientChannel:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel;
      27: iload_3
      28: invokevirtual #31                 // Method org/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel.getPromisedMessage:(I)Lorg/wso2/transport/http/netty/contractimpl/sender/http2/OutboundMsgHolder;
      31: astore        4
      33: aload         4
      35: ifnull        44
      38: iconst_1
      39: istore        5
      41: goto          63
      44: getstatic     #1                  // Field LOG:Lorg/slf4j/Logger;
      47: ldc           #39                 // String Data Frame received on channel: {} with invalid stream id: {}
      49: aload_0
      50: getfield      #2                  // Field http2ClientChannel:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel;
      53: iload_3
      54: invokestatic  #33                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      57: invokeinterface #34,  4           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      62: return
      63: aload_0
      64: aload         4
      66: invokespecial #40                 // Method getHttp2MessageContext:(Lorg/wso2/transport/http/netty/contractimpl/sender/http2/OutboundMsgHolder;)Lorg/wso2/transport/http/netty/contractimpl/common/states/Http2MessageStateContext;
      69: astore        6
      71: aload         6
      73: invokevirtual #36                 // Method org/wso2/transport/http/netty/contractimpl/common/states/Http2MessageStateContext.getSenderState:()Lorg/wso2/transport/http/netty/contractimpl/sender/states/http2/SenderState;
      76: aload_1
      77: aload_2
      78: aload         4
      80: iload         5
      82: aload         6
      84: invokeinterface #41,  6           // InterfaceMethod org/wso2/transport/http/netty/contractimpl/sender/states/http2/SenderState.readInboundResponseBody:(Lio/netty/channel/ChannelHandlerContext;Lorg/wso2/transport/http/netty/message/Http2DataFrame;Lorg/wso2/transport/http/netty/contractimpl/sender/http2/OutboundMsgHolder;ZLorg/wso2/transport/http/netty/contractimpl/common/states/Http2MessageStateContext;)V
      89: return

  private void onPushPromiseRead(org.wso2.transport.http.netty.message.Http2PushPromise);
    Code:
       0: aload_1
       1: invokevirtual #42                 // Method org/wso2/transport/http/netty/message/Http2PushPromise.getStreamId:()I
       4: istore_2
       5: aload_0
       6: getfield      #2                  // Field http2ClientChannel:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel;
       9: iload_2
      10: invokevirtual #30                 // Method org/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel.getInFlightMessage:(I)Lorg/wso2/transport/http/netty/contractimpl/sender/http2/OutboundMsgHolder;
      13: astore_3
      14: aload_0
      15: aload_3
      16: invokespecial #35                 // Method initHttp2MessageContext:(Lorg/wso2/transport/http/netty/contractimpl/sender/http2/OutboundMsgHolder;)Lorg/wso2/transport/http/netty/contractimpl/common/states/Http2MessageStateContext;
      19: astore        4
      21: aload         4
      23: invokevirtual #36                 // Method org/wso2/transport/http/netty/contractimpl/common/states/Http2MessageStateContext.getSenderState:()Lorg/wso2/transport/http/netty/contractimpl/sender/states/http2/SenderState;
      26: aload_1
      27: aload_3
      28: invokeinterface #43,  3           // InterfaceMethod org/wso2/transport/http/netty/contractimpl/sender/states/http2/SenderState.readInboundPromise:(Lorg/wso2/transport/http/netty/message/Http2PushPromise;Lorg/wso2/transport/http/netty/contractimpl/sender/http2/OutboundMsgHolder;)V
      33: return

  private void onResetRead(org.wso2.transport.http.netty.message.Http2Reset);
    Code:
       0: aload_1
       1: invokevirtual #11                 // Method org/wso2/transport/http/netty/message/Http2Reset.getStreamId:()I
       4: istore_2
       5: aload_0
       6: getfield      #2                  // Field http2ClientChannel:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel;
       9: iload_2
      10: invokevirtual #30                 // Method org/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel.getInFlightMessage:(I)Lorg/wso2/transport/http/netty/contractimpl/sender/http2/OutboundMsgHolder;
      13: astore_3
      14: aload_3
      15: ifnull        58
      18: aload_3
      19: invokevirtual #44                 // Method org/wso2/transport/http/netty/contractimpl/sender/http2/OutboundMsgHolder.getResponseFuture:()Lorg/wso2/transport/http/netty/contract/HttpResponseFuture;
      22: new           #45                 // class java/lang/Exception
      25: dup
      26: new           #46                 // class java/lang/StringBuilder
      29: dup
      30: invokespecial #47                 // Method java/lang/StringBuilder."<init>":()V
      33: ldc           #48                 // String HTTP/2 stream
      35: invokevirtual #49                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      38: iload_2
      39: invokevirtual #50                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      42: ldc           #51                 // String  reset by the remote peer
      44: invokevirtual #49                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      47: invokevirtual #52                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      50: invokespecial #53                 // Method java/lang/Exception."<init>":(Ljava/lang/String;)V
      53: invokeinterface #54,  2           // InterfaceMethod org/wso2/transport/http/netty/contract/HttpResponseFuture.notifyHttpListener:(Ljava/lang/Throwable;)V
      58: return

  private org.wso2.transport.http.netty.contractimpl.common.states.Http2MessageStateContext initHttp2MessageContext(org.wso2.transport.http.netty.contractimpl.sender.http2.OutboundMsgHolder);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #40                 // Method getHttp2MessageContext:(Lorg/wso2/transport/http/netty/contractimpl/sender/http2/OutboundMsgHolder;)Lorg/wso2/transport/http/netty/contractimpl/common/states/Http2MessageStateContext;
       5: astore_2
       6: aload_2
       7: ifnonnull     39
      10: new           #55                 // class org/wso2/transport/http/netty/contractimpl/common/states/Http2MessageStateContext
      13: dup
      14: invokespecial #56                 // Method org/wso2/transport/http/netty/contractimpl/common/states/Http2MessageStateContext."<init>":()V
      17: astore_2
      18: aload_2
      19: new           #57                 // class org/wso2/transport/http/netty/contractimpl/sender/states/http2/RequestCompleted
      22: dup
      23: aload_0
      24: aconst_null
      25: invokespecial #58                 // Method org/wso2/transport/http/netty/contractimpl/sender/states/http2/RequestCompleted."<init>":(Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2TargetHandler;Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2TargetHandler$Http2RequestWriter;)V
      28: invokevirtual #59                 // Method org/wso2/transport/http/netty/contractimpl/common/states/Http2MessageStateContext.setSenderState:(Lorg/wso2/transport/http/netty/contractimpl/sender/states/http2/SenderState;)V
      31: aload_1
      32: invokevirtual #60                 // Method org/wso2/transport/http/netty/contractimpl/sender/http2/OutboundMsgHolder.getRequest:()Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
      35: aload_2
      36: invokevirtual #61                 // Method org/wso2/transport/http/netty/message/HttpCarbonMessage.setHttp2MessageStateContext:(Lorg/wso2/transport/http/netty/contractimpl/common/states/Http2MessageStateContext;)V
      39: aload_2
      40: areturn

  private org.wso2.transport.http.netty.contractimpl.common.states.Http2MessageStateContext getHttp2MessageContext(org.wso2.transport.http.netty.contractimpl.sender.http2.OutboundMsgHolder);
    Code:
       0: aload_1
       1: invokevirtual #60                 // Method org/wso2/transport/http/netty/contractimpl/sender/http2/OutboundMsgHolder.getRequest:()Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
       4: invokevirtual #62                 // Method org/wso2/transport/http/netty/message/HttpCarbonMessage.getHttp2MessageStateContext:()Lorg/wso2/transport/http/netty/contractimpl/common/states/Http2MessageStateContext;
       7: areturn

  private static void lambda$resetStream$28(int, org.wso2.transport.http.netty.contractimpl.sender.http2.Http2DataEventListener);
    Code:
       0: aload_1
       1: iload_0
       2: invokeinterface #63,  2           // InterfaceMethod org/wso2/transport/http/netty/contractimpl/sender/http2/Http2DataEventListener.onStreamReset:(I)V
       7: return

  static org.wso2.transport.http.netty.contractimpl.sender.http2.Http2ClientChannel access$000(org.wso2.transport.http.netty.contractimpl.sender.http2.Http2TargetHandler);
    Code:
       0: aload_0
       1: getfield      #2                  // Field http2ClientChannel:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel;
       4: areturn

  static org.slf4j.Logger access$100();
    Code:
       0: getstatic     #1                  // Field LOG:Lorg/slf4j/Logger;
       3: areturn

  static {};
    Code:
       0: ldc           #64                 // class org/wso2/transport/http/netty/contractimpl/sender/http2/Http2TargetHandler
       2: invokestatic  #65                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #1                  // Field LOG:Lorg/slf4j/Logger;
       8: return
}
