Compiled from "ReceivingEntityBody.java"
public class org.wso2.transport.http.netty.contractimpl.listener.states.ReceivingEntityBody implements org.wso2.transport.http.netty.contractimpl.listener.states.ListenerState {
  private static final org.slf4j.Logger LOG;

  private final org.wso2.transport.http.netty.internal.HandlerExecutor handlerExecutor;

  private final org.wso2.transport.http.netty.contract.ServerConnectorFuture serverConnectorFuture;

  private final org.wso2.transport.http.netty.contractimpl.common.states.MessageStateContext messageStateContext;

  private final org.wso2.transport.http.netty.contractimpl.listener.SourceHandler sourceHandler;

  private final org.wso2.transport.http.netty.message.HttpCarbonMessage inboundRequestMsg;

  private final float httpVersion;

  org.wso2.transport.http.netty.contractimpl.listener.states.ReceivingEntityBody(org.wso2.transport.http.netty.contractimpl.common.states.MessageStateContext, org.wso2.transport.http.netty.message.HttpCarbonMessage, org.wso2.transport.http.netty.contractimpl.listener.SourceHandler, float);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #4                  // Field messageStateContext:Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;
       9: aload_0
      10: aload_2
      11: putfield      #5                  // Field inboundRequestMsg:Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
      14: aload_0
      15: aload_3
      16: putfield      #6                  // Field sourceHandler:Lorg/wso2/transport/http/netty/contractimpl/listener/SourceHandler;
      19: aload_0
      20: invokestatic  #7                  // Method org/wso2/transport/http/netty/internal/HttpTransportContextHolder.getInstance:()Lorg/wso2/transport/http/netty/internal/HttpTransportContextHolder;
      23: invokevirtual #8                  // Method org/wso2/transport/http/netty/internal/HttpTransportContextHolder.getHandlerExecutor:()Lorg/wso2/transport/http/netty/internal/HandlerExecutor;
      26: putfield      #9                  // Field handlerExecutor:Lorg/wso2/transport/http/netty/internal/HandlerExecutor;
      29: aload_0
      30: aload_3
      31: invokevirtual #10                 // Method org/wso2/transport/http/netty/contractimpl/listener/SourceHandler.getServerConnectorFuture:()Lorg/wso2/transport/http/netty/contract/ServerConnectorFuture;
      34: putfield      #11                 // Field serverConnectorFuture:Lorg/wso2/transport/http/netty/contract/ServerConnectorFuture;
      37: aload_0
      38: fload         4
      40: putfield      #12                 // Field httpVersion:F
      43: return

  public void readInboundRequestHeaders(org.wso2.transport.http.netty.message.HttpCarbonMessage, io.netty.handler.codec.http.HttpRequest);
    Code:
       0: getstatic     #13                 // Field LOG:Lorg/slf4j/Logger;
       3: ldc           #14                 // String readInboundRequestHeaders {}
       5: ldc           #15                 // String is not a dependant action of this state
       7: invokeinterface #16,  3           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;)V
      12: return

  public void readInboundRequestBody(java.lang.Object) throws org.wso2.transport.http.netty.contract.ServerConnectorException;
    Code:
       0: aload_1
       1: instanceof    #17                 // class io/netty/handler/codec/http/HttpContent
       4: ifeq          127
       7: aload_1
       8: checkcast     #17                 // class io/netty/handler/codec/http/HttpContent
      11: astore_2
      12: aload_0
      13: getfield      #5                  // Field inboundRequestMsg:Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
      16: aload_2
      17: invokevirtual #18                 // Method org/wso2/transport/http/netty/message/HttpCarbonMessage.addHttpContent:(Lio/netty/handler/codec/http/HttpContent;)V
      20: aload_2
      21: invokestatic  #19                 // Method org/wso2/transport/http/netty/contractimpl/common/Util.isLastHttpContent:(Lio/netty/handler/codec/http/HttpContent;)Z
      24: ifeq          102
      27: aload_0
      28: getfield      #9                  // Field handlerExecutor:Lorg/wso2/transport/http/netty/internal/HandlerExecutor;
      31: ifnull        45
      34: aload_0
      35: getfield      #9                  // Field handlerExecutor:Lorg/wso2/transport/http/netty/internal/HandlerExecutor;
      38: aload_0
      39: getfield      #5                  // Field inboundRequestMsg:Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
      42: invokevirtual #20                 // Method org/wso2/transport/http/netty/internal/HandlerExecutor.executeAtSourceRequestSending:(Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;)V
      45: aload_0
      46: aload_0
      47: getfield      #5                  // Field inboundRequestMsg:Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
      50: invokespecial #21                 // Method isDiffered:(Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;)Z
      53: ifeq          69
      56: aload_0
      57: getfield      #11                 // Field serverConnectorFuture:Lorg/wso2/transport/http/netty/contract/ServerConnectorFuture;
      60: aload_0
      61: getfield      #5                  // Field inboundRequestMsg:Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
      64: invokeinterface #22,  2           // InterfaceMethod org/wso2/transport/http/netty/contract/ServerConnectorFuture.notifyHttpListener:(Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;)V
      69: aload_0
      70: getfield      #6                  // Field sourceHandler:Lorg/wso2/transport/http/netty/contractimpl/listener/SourceHandler;
      73: invokevirtual #23                 // Method org/wso2/transport/http/netty/contractimpl/listener/SourceHandler.resetInboundRequestMsg:()V
      76: aload_0
      77: getfield      #4                  // Field messageStateContext:Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;
      80: new           #24                 // class org/wso2/transport/http/netty/contractimpl/listener/states/EntityBodyReceived
      83: dup
      84: aload_0
      85: getfield      #4                  // Field messageStateContext:Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;
      88: aload_0
      89: getfield      #6                  // Field sourceHandler:Lorg/wso2/transport/http/netty/contractimpl/listener/SourceHandler;
      92: aload_0
      93: getfield      #12                 // Field httpVersion:F
      96: invokespecial #25                 // Method org/wso2/transport/http/netty/contractimpl/listener/states/EntityBodyReceived."<init>":(Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;Lorg/wso2/transport/http/netty/contractimpl/listener/SourceHandler;F)V
      99: invokevirtual #26                 // Method org/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext.setListenerState:(Lorg/wso2/transport/http/netty/contractimpl/listener/states/ListenerState;)V
     102: goto          127
     105: astore_3
     106: aload_2
     107: invokeinterface #28,  1           // InterfaceMethod io/netty/handler/codec/http/HttpContent.release:()Z
     112: pop
     113: getstatic     #13                 // Field LOG:Lorg/slf4j/Logger;
     116: ldc           #29                 // String Response already received before completing the inbound request {}
     118: aload_3
     119: invokevirtual #30                 // Method java/lang/RuntimeException.getMessage:()Ljava/lang/String;
     122: invokeinterface #16,  3           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;)V
     127: return
    Exception table:
       from    to  target type
          12   102   105   Class java/lang/RuntimeException

  public void writeOutboundResponseHeaders(org.wso2.transport.http.netty.message.HttpCarbonMessage, io.netty.handler.codec.http.HttpContent);
    Code:
       0: getstatic     #13                 // Field LOG:Lorg/slf4j/Logger;
       3: ldc           #31                 // String writeOutboundResponseHeaders {}
       5: ldc           #15                 // String is not a dependant action of this state
       7: invokeinterface #16,  3           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;)V
      12: return

  public void writeOutboundResponseBody(org.wso2.transport.http.netty.contractimpl.HttpOutboundRespListener, org.wso2.transport.http.netty.message.HttpCarbonMessage, io.netty.handler.codec.http.HttpContent);
    Code:
       0: aload_0
       1: getfield      #6                  // Field sourceHandler:Lorg/wso2/transport/http/netty/contractimpl/listener/SourceHandler;
       4: invokevirtual #32                 // Method org/wso2/transport/http/netty/contractimpl/listener/SourceHandler.getInboundChannelContext:()Lio/netty/channel/ChannelHandlerContext;
       7: invokeinterface #33,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.channel:()Lio/netty/channel/Channel;
      12: aload_1
      13: aload_0
      14: getfield      #4                  // Field messageStateContext:Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;
      17: aload_2
      18: aload_3
      19: ldc           #34                 // String Remote client closed the connection while reading inbound request entity body
      21: invokestatic  #35                 // Method org/wso2/transport/http/netty/contractimpl/common/states/StateUtil.respondToIncompleteRequest:(Lio/netty/channel/Channel;Lorg/wso2/transport/http/netty/contractimpl/HttpOutboundRespListener;Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;Lio/netty/handler/codec/http/HttpContent;Ljava/lang/String;)V
      24: return

  public void handleAbruptChannelClosure(org.wso2.transport.http.netty.contract.ServerConnectorFuture);
    Code:
       0: aload_0
       1: getfield      #5                  // Field inboundRequestMsg:Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
       4: ldc           #34                 // String Remote client closed the connection while reading inbound request entity body
       6: invokestatic  #36                 // Method org/wso2/transport/http/netty/contractimpl/common/states/StateUtil.handleIncompleteInboundMessage:(Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;Ljava/lang/String;)V
       9: return

  public io.netty.channel.ChannelFuture handleIdleTimeoutConnectionClosure(org.wso2.transport.http.netty.contract.ServerConnectorFuture, io.netty.channel.ChannelHandlerContext);
    Code:
       0: aload_2
       1: getstatic     #37                 // Field io/netty/handler/codec/http/HttpResponseStatus.REQUEST_TIMEOUT:Lio/netty/handler/codec/http/HttpResponseStatus;
       4: getstatic     #38                 // Field io/netty/buffer/Unpooled.EMPTY_BUFFER:Lio/netty/buffer/ByteBuf;
       7: iconst_0
       8: aload_0
       9: getfield      #12                 // Field httpVersion:F
      12: aload_0
      13: getfield      #6                  // Field sourceHandler:Lorg/wso2/transport/http/netty/contractimpl/listener/SourceHandler;
      16: invokevirtual #39                 // Method org/wso2/transport/http/netty/contractimpl/listener/SourceHandler.getServerName:()Ljava/lang/String;
      19: invokestatic  #40                 // Method org/wso2/transport/http/netty/contractimpl/common/states/StateUtil.sendRequestTimeoutResponse:(Lio/netty/channel/ChannelHandlerContext;Lio/netty/handler/codec/http/HttpResponseStatus;Lio/netty/buffer/ByteBuf;IFLjava/lang/String;)Lio/netty/channel/ChannelFuture;
      22: astore_3
      23: aload_3
      24: aload_0
      25: aload_2
      26: invokedynamic #41,  0             // InvokeDynamic #0:operationComplete:(Lorg/wso2/transport/http/netty/contractimpl/listener/states/ReceivingEntityBody;Lio/netty/channel/ChannelHandlerContext;)Lio/netty/channel/ChannelFutureListener;
      31: invokeinterface #42,  2           // InterfaceMethod io/netty/channel/ChannelFuture.addListener:(Lio/netty/util/concurrent/GenericFutureListener;)Lio/netty/channel/ChannelFuture;
      36: pop
      37: aload_3
      38: areturn

  private boolean isDiffered(org.wso2.transport.http.netty.message.HttpCarbonMessage);
    Code:
       0: aload_1
       1: ldc           #43                 // String httpResource
       3: invokevirtual #44                 // Method org/wso2/transport/http/netty/message/HttpCarbonMessage.getProperty:(Ljava/lang/String;)Ljava/lang/Object;
       6: ifnull        13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn

  private void lambda$handleIdleTimeoutConnectionClosure$64(io.netty.channel.ChannelHandlerContext, io.netty.channel.ChannelFuture) throws java.lang.Exception;
    Code:
       0: aload_2
       1: invokeinterface #45,  1           // InterfaceMethod io/netty/channel/ChannelFuture.cause:()Ljava/lang/Throwable;
       6: astore_3
       7: aload_3
       8: ifnull        25
      11: getstatic     #13                 // Field LOG:Lorg/slf4j/Logger;
      14: ldc           #46                 // String Failed to send: {}
      16: aload_3
      17: invokevirtual #47                 // Method java/lang/Throwable.getMessage:()Ljava/lang/String;
      20: invokeinterface #16,  3           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;)V
      25: aload_1
      26: invokeinterface #48,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.close:()Lio/netty/channel/ChannelFuture;
      31: pop
      32: aload_0
      33: getfield      #5                  // Field inboundRequestMsg:Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
      36: ldc           #49                 // String Idle timeout triggered while reading inbound request entity body
      38: invokestatic  #36                 // Method org/wso2/transport/http/netty/contractimpl/common/states/StateUtil.handleIncompleteInboundMessage:(Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;Ljava/lang/String;)V
      41: return

  static {};
    Code:
       0: ldc           #50                 // class org/wso2/transport/http/netty/contractimpl/listener/states/ReceivingEntityBody
       2: invokestatic  #51                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #13                 // Field LOG:Lorg/slf4j/Logger;
       8: return
}
