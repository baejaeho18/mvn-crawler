Compiled from "ResponseCompleted.java"
public class org.wso2.transport.http.netty.contractimpl.listener.states.http2.ResponseCompleted implements org.wso2.transport.http.netty.contractimpl.listener.states.http2.ListenerState {
  private static final org.slf4j.Logger LOG;

  private final org.wso2.transport.http.netty.contractimpl.common.states.Http2MessageStateContext http2MessageStateContext;

  private final io.netty.channel.ChannelHandlerContext ctx;

  private final io.netty.handler.codec.http2.Http2ConnectionEncoder encoder;

  private final int originalStreamId;

  org.wso2.transport.http.netty.contractimpl.listener.states.http2.ResponseCompleted(org.wso2.transport.http.netty.contractimpl.Http2OutboundRespListener, org.wso2.transport.http.netty.contractimpl.common.states.Http2MessageStateContext);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_2
       6: putfield      #2                  // Field http2MessageStateContext:Lorg/wso2/transport/http/netty/contractimpl/common/states/Http2MessageStateContext;
       9: aload_0
      10: aload_1
      11: invokevirtual #3                  // Method org/wso2/transport/http/netty/contractimpl/Http2OutboundRespListener.getChannelHandlerContext:()Lio/netty/channel/ChannelHandlerContext;
      14: putfield      #4                  // Field ctx:Lio/netty/channel/ChannelHandlerContext;
      17: aload_0
      18: aload_1
      19: invokevirtual #5                  // Method org/wso2/transport/http/netty/contractimpl/Http2OutboundRespListener.getEncoder:()Lio/netty/handler/codec/http2/Http2ConnectionEncoder;
      22: putfield      #6                  // Field encoder:Lio/netty/handler/codec/http2/Http2ConnectionEncoder;
      25: aload_0
      26: aload_1
      27: invokevirtual #7                  // Method org/wso2/transport/http/netty/contractimpl/Http2OutboundRespListener.getOriginalStreamId:()I
      30: putfield      #8                  // Field originalStreamId:I
      33: return

  public void readInboundRequestHeaders(org.wso2.transport.http.netty.message.Http2HeadersFrame);
    Code:
       0: getstatic     #9                  // Field LOG:Lorg/slf4j/Logger;
       3: ldc           #10                 // String readInboundRequestHeaders is not a dependant action of this state
       5: invokeinterface #11,  2           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;)V
      10: return

  public void readInboundRequestBody(org.wso2.transport.http.netty.contractimpl.listener.http2.Http2SourceHandler, org.wso2.transport.http.netty.message.Http2DataFrame) throws io.netty.handler.codec.http2.Http2Exception;
    Code:
       0: aload_1
       1: aload_2
       2: invokestatic  #12                 // Method org/wso2/transport/http/netty/contractimpl/common/states/Http2StateUtil.releaseDataFrame:(Lorg/wso2/transport/http/netty/contractimpl/listener/http2/Http2SourceHandler;Lorg/wso2/transport/http/netty/message/Http2DataFrame;)V
       5: aload_0
       6: getfield      #4                  // Field ctx:Lio/netty/channel/ChannelHandlerContext;
       9: aload_0
      10: getfield      #6                  // Field encoder:Lio/netty/handler/codec/http2/Http2ConnectionEncoder;
      13: aload_0
      14: getfield      #8                  // Field originalStreamId:I
      17: invokestatic  #13                 // Method org/wso2/transport/http/netty/contractimpl/common/states/Http2StateUtil.sendRstFrame:(Lio/netty/channel/ChannelHandlerContext;Lio/netty/handler/codec/http2/Http2ConnectionEncoder;I)V
      20: return

  public void writeOutboundResponseHeaders(org.wso2.transport.http.netty.contractimpl.Http2OutboundRespListener, org.wso2.transport.http.netty.message.HttpCarbonMessage, io.netty.handler.codec.http.HttpContent, int);
    Code:
       0: getstatic     #9                  // Field LOG:Lorg/slf4j/Logger;
       3: ldc           #14                 // String writeOutboundResponseHeaders is not a dependant action of this state
       5: invokeinterface #11,  2           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;)V
      10: return

  public void writeOutboundResponseBody(org.wso2.transport.http.netty.contractimpl.Http2OutboundRespListener, org.wso2.transport.http.netty.message.HttpCarbonMessage, io.netty.handler.codec.http.HttpContent, int) throws io.netty.handler.codec.http2.Http2Exception;
    Code:
       0: aload_0
       1: getfield      #2                  // Field http2MessageStateContext:Lorg/wso2/transport/http/netty/contractimpl/common/states/Http2MessageStateContext;
       4: new           #15                 // class org/wso2/transport/http/netty/contractimpl/listener/states/http2/SendingHeaders
       7: dup
       8: aload_1
       9: aload_0
      10: getfield      #2                  // Field http2MessageStateContext:Lorg/wso2/transport/http/netty/contractimpl/common/states/Http2MessageStateContext;
      13: invokespecial #16                 // Method org/wso2/transport/http/netty/contractimpl/listener/states/http2/SendingHeaders."<init>":(Lorg/wso2/transport/http/netty/contractimpl/Http2OutboundRespListener;Lorg/wso2/transport/http/netty/contractimpl/common/states/Http2MessageStateContext;)V
      16: invokevirtual #17                 // Method org/wso2/transport/http/netty/contractimpl/common/states/Http2MessageStateContext.setListenerState:(Lorg/wso2/transport/http/netty/contractimpl/listener/states/http2/ListenerState;)V
      19: aload_0
      20: getfield      #2                  // Field http2MessageStateContext:Lorg/wso2/transport/http/netty/contractimpl/common/states/Http2MessageStateContext;
      23: invokevirtual #18                 // Method org/wso2/transport/http/netty/contractimpl/common/states/Http2MessageStateContext.getListenerState:()Lorg/wso2/transport/http/netty/contractimpl/listener/states/http2/ListenerState;
      26: aload_1
      27: aload_2
      28: aload_3
      29: iload         4
      31: invokeinterface #19,  5           // InterfaceMethod org/wso2/transport/http/netty/contractimpl/listener/states/http2/ListenerState.writeOutboundResponseHeaders:(Lorg/wso2/transport/http/netty/contractimpl/Http2OutboundRespListener;Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;Lio/netty/handler/codec/http/HttpContent;I)V
      36: return

  public void writeOutboundPromise(org.wso2.transport.http.netty.contractimpl.Http2OutboundRespListener, org.wso2.transport.http.netty.message.Http2PushPromise) throws io.netty.handler.codec.http2.Http2Exception;
    Code:
       0: getstatic     #9                  // Field LOG:Lorg/slf4j/Logger;
       3: ldc           #20                 // String writeOutboundPromise is not a dependant action of this state
       5: invokeinterface #11,  2           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;)V
      10: new           #21                 // class io/netty/handler/codec/http2/Http2Exception
      13: dup
      14: getstatic     #22                 // Field io/netty/handler/codec/http2/Http2Error.PROTOCOL_ERROR:Lio/netty/handler/codec/http2/Http2Error;
      17: ldc           #23                 // String WriteOutboundPromise is not a dependant action of ResponseCompleted state
      19: invokespecial #24                 // Method io/netty/handler/codec/http2/Http2Exception."<init>":(Lio/netty/handler/codec/http2/Http2Error;Ljava/lang/String;)V
      22: athrow

  static {};
    Code:
       0: ldc           #25                 // class org/wso2/transport/http/netty/contractimpl/listener/states/http2/ResponseCompleted
       2: invokestatic  #26                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #9                  // Field LOG:Lorg/slf4j/Logger;
       8: return
}
