Compiled from "Response100ContinueSent.java"
public class org.wso2.transport.http.netty.contractimpl.listener.states.Response100ContinueSent extends org.wso2.transport.http.netty.contractimpl.listener.states.SendingHeaders {
  private static final org.slf4j.Logger LOG;

  private final org.wso2.transport.http.netty.contractimpl.common.states.MessageStateContext messageStateContext;

  private final org.wso2.transport.http.netty.contractimpl.HttpOutboundRespListener outboundResponseListener;

  private final org.wso2.transport.http.netty.contractimpl.listener.SourceHandler sourceHandler;

  private final float httpVersion;

  org.wso2.transport.http.netty.contractimpl.listener.states.Response100ContinueSent(org.wso2.transport.http.netty.contractimpl.HttpOutboundRespListener, org.wso2.transport.http.netty.contractimpl.listener.SourceHandler, org.wso2.transport.http.netty.contractimpl.common.states.MessageStateContext);
    Code:
       0: aload_0
       1: aload_1
       2: aload_3
       3: invokespecial #3                  // Method org/wso2/transport/http/netty/contractimpl/listener/states/SendingHeaders."<init>":(Lorg/wso2/transport/http/netty/contractimpl/HttpOutboundRespListener;Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;)V
       6: aload_0
       7: aload_1
       8: putfield      #4                  // Field outboundResponseListener:Lorg/wso2/transport/http/netty/contractimpl/HttpOutboundRespListener;
      11: aload_0
      12: aload_1
      13: invokevirtual #5                  // Method org/wso2/transport/http/netty/contractimpl/HttpOutboundRespListener.getChunkConfig:()Lorg/wso2/transport/http/netty/contract/config/ChunkConfig;
      16: putfield      #6                  // Field chunkConfig:Lorg/wso2/transport/http/netty/contract/config/ChunkConfig;
      19: aload_0
      20: aload_1
      21: invokevirtual #7                  // Method org/wso2/transport/http/netty/contractimpl/HttpOutboundRespListener.isKeepAlive:()Z
      24: putfield      #8                  // Field keepAlive:Z
      27: aload_0
      28: aload_2
      29: putfield      #9                  // Field sourceHandler:Lorg/wso2/transport/http/netty/contractimpl/listener/SourceHandler;
      32: aload_0
      33: aload_3
      34: putfield      #10                 // Field messageStateContext:Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;
      37: aload_0
      38: aload_1
      39: invokevirtual #11                 // Method org/wso2/transport/http/netty/contractimpl/HttpOutboundRespListener.getRequestDataHolder:()Lorg/wso2/transport/http/netty/contractimpl/listener/RequestDataHolder;
      42: invokevirtual #12                 // Method org/wso2/transport/http/netty/contractimpl/listener/RequestDataHolder.getHttpVersion:()Ljava/lang/String;
      45: invokestatic  #13                 // Method java/lang/Float.parseFloat:(Ljava/lang/String;)F
      48: putfield      #14                 // Field httpVersion:F
      51: return

  public void readInboundRequestHeaders(org.wso2.transport.http.netty.message.HttpCarbonMessage, io.netty.handler.codec.http.HttpRequest);
    Code:
       0: getstatic     #15                 // Field LOG:Lorg/slf4j/Logger;
       3: ldc           #16                 // String readInboundRequestHeaders {}
       5: ldc           #17                 // String is not a dependant action of this state
       7: invokeinterface #18,  3           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;)V
      12: return

  public void readInboundRequestBody(java.lang.Object) throws org.wso2.transport.http.netty.contract.ServerConnectorException;
    Code:
       0: aload_0
       1: getfield      #10                 // Field messageStateContext:Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;
       4: new           #19                 // class org/wso2/transport/http/netty/contractimpl/listener/states/ReceivingEntityBody
       7: dup
       8: aload_0
       9: getfield      #10                 // Field messageStateContext:Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;
      12: aload_0
      13: getfield      #4                  // Field outboundResponseListener:Lorg/wso2/transport/http/netty/contractimpl/HttpOutboundRespListener;
      16: invokevirtual #20                 // Method org/wso2/transport/http/netty/contractimpl/HttpOutboundRespListener.getInboundRequestMsg:()Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
      19: aload_0
      20: getfield      #9                  // Field sourceHandler:Lorg/wso2/transport/http/netty/contractimpl/listener/SourceHandler;
      23: aload_0
      24: getfield      #14                 // Field httpVersion:F
      27: invokespecial #21                 // Method org/wso2/transport/http/netty/contractimpl/listener/states/ReceivingEntityBody."<init>":(Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;Lorg/wso2/transport/http/netty/contractimpl/listener/SourceHandler;F)V
      30: invokevirtual #22                 // Method org/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext.setListenerState:(Lorg/wso2/transport/http/netty/contractimpl/listener/states/ListenerState;)V
      33: aload_0
      34: getfield      #10                 // Field messageStateContext:Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;
      37: invokevirtual #23                 // Method org/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext.getListenerState:()Lorg/wso2/transport/http/netty/contractimpl/listener/states/ListenerState;
      40: aload_1
      41: invokeinterface #24,  2           // InterfaceMethod org/wso2/transport/http/netty/contractimpl/listener/states/ListenerState.readInboundRequestBody:(Ljava/lang/Object;)V
      46: return

  public void writeOutboundResponseHeaders(org.wso2.transport.http.netty.message.HttpCarbonMessage, io.netty.handler.codec.http.HttpContent);
    Code:
       0: getstatic     #15                 // Field LOG:Lorg/slf4j/Logger;
       3: ldc           #25                 // String writeOutboundResponseHeaders {}
       5: ldc           #17                 // String is not a dependant action of this state
       7: invokeinterface #18,  3           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;)V
      12: return

  public void writeOutboundResponseBody(org.wso2.transport.http.netty.contractimpl.HttpOutboundRespListener, org.wso2.transport.http.netty.message.HttpCarbonMessage, io.netty.handler.codec.http.HttpContent);
    Code:
       0: aload_2
       1: ldc           #26                 // String chunking_config
       3: invokevirtual #27                 // Method org/wso2/transport/http/netty/message/HttpCarbonMessage.getProperty:(Ljava/lang/String;)Ljava/lang/Object;
       6: ifnull        21
       9: aload_2
      10: ldc           #26                 // String chunking_config
      12: invokevirtual #27                 // Method org/wso2/transport/http/netty/message/HttpCarbonMessage.getProperty:(Ljava/lang/String;)Ljava/lang/Object;
      15: checkcast     #28                 // class org/wso2/transport/http/netty/contract/config/ChunkConfig
      18: goto          22
      21: aconst_null
      22: astore        4
      24: aload         4
      26: ifnull        35
      29: aload_0
      30: aload         4
      32: invokespecial #29                 // Method org/wso2/transport/http/netty/contractimpl/listener/states/SendingHeaders.setChunkConfig:(Lorg/wso2/transport/http/netty/contract/config/ChunkConfig;)V
      35: aload_0
      36: aload_0
      37: getfield      #4                  // Field outboundResponseListener:Lorg/wso2/transport/http/netty/contractimpl/HttpOutboundRespListener;
      40: invokevirtual #20                 // Method org/wso2/transport/http/netty/contractimpl/HttpOutboundRespListener.getInboundRequestMsg:()Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
      43: invokevirtual #30                 // Method org/wso2/transport/http/netty/message/HttpCarbonMessage.getHttpOutboundRespStatusFuture:()Lorg/wso2/transport/http/netty/contract/HttpResponseFuture;
      46: putfield      #31                 // Field outboundRespStatusFuture:Lorg/wso2/transport/http/netty/contract/HttpResponseFuture;
      49: aload_0
      50: getfield      #6                  // Field chunkConfig:Lorg/wso2/transport/http/netty/contract/config/ChunkConfig;
      53: getstatic     #32                 // Field org/wso2/transport/http/netty/contract/config/ChunkConfig.ALWAYS:Lorg/wso2/transport/http/netty/contract/config/ChunkConfig;
      56: if_acmpne     105
      59: aload_0
      60: getfield      #14                 // Field httpVersion:F
      63: invokestatic  #33                 // Method java/lang/String.valueOf:(F)Ljava/lang/String;
      66: aload_0
      67: getfield      #6                  // Field chunkConfig:Lorg/wso2/transport/http/netty/contract/config/ChunkConfig;
      70: invokestatic  #34                 // Method org/wso2/transport/http/netty/contractimpl/common/states/StateUtil.checkChunkingCompatibility:(Ljava/lang/String;Lorg/wso2/transport/http/netty/contract/config/ChunkConfig;)Z
      73: ifeq          105
      76: aload_2
      77: invokestatic  #35                 // Method org/wso2/transport/http/netty/contractimpl/common/Util.setupChunkedRequest:(Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;)V
      80: aload_0
      81: aload_2
      82: aload_0
      83: getfield      #8                  // Field keepAlive:Z
      86: invokevirtual #36                 // Method writeResponseHeaders:(Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;Z)Lio/netty/channel/ChannelFuture;
      89: astore        5
      91: aload_0
      92: getfield      #31                 // Field outboundRespStatusFuture:Lorg/wso2/transport/http/netty/contract/HttpResponseFuture;
      95: aload         5
      97: ldc           #37                 // String Remote client closed the connection before initiating outbound response
      99: invokestatic  #38                 // Method org/wso2/transport/http/netty/contractimpl/common/states/StateUtil.notifyIfHeaderWriteFailure:(Lorg/wso2/transport/http/netty/contract/HttpResponseFuture;Lio/netty/channel/ChannelFuture;Ljava/lang/String;)V
     102: goto          173
     105: invokestatic  #39                 // Method io/netty/buffer/Unpooled.compositeBuffer:()Lio/netty/buffer/CompositeByteBuf;
     108: astore        6
     110: aload         6
     112: iconst_1
     113: aload_3
     114: invokeinterface #40,  1           // InterfaceMethod io/netty/handler/codec/http/HttpContent.content:()Lio/netty/buffer/ByteBuf;
     119: invokevirtual #41                 // Method io/netty/buffer/CompositeByteBuf.addComponent:(ZLio/netty/buffer/ByteBuf;)Lio/netty/buffer/CompositeByteBuf;
     122: pop
     123: aload_2
     124: aload_1
     125: invokevirtual #11                 // Method org/wso2/transport/http/netty/contractimpl/HttpOutboundRespListener.getRequestDataHolder:()Lorg/wso2/transport/http/netty/contractimpl/listener/RequestDataHolder;
     128: invokevirtual #12                 // Method org/wso2/transport/http/netty/contractimpl/listener/RequestDataHolder.getHttpVersion:()Ljava/lang/String;
     131: aload_1
     132: invokevirtual #42                 // Method org/wso2/transport/http/netty/contractimpl/HttpOutboundRespListener.getServerName:()Ljava/lang/String;
     135: aload_1
     136: invokevirtual #7                  // Method org/wso2/transport/http/netty/contractimpl/HttpOutboundRespListener.isKeepAlive:()Z
     139: aload         6
     141: invokestatic  #43                 // Method org/wso2/transport/http/netty/contractimpl/common/Util.createFullHttpResponse:(Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;Ljava/lang/String;Ljava/lang/String;ZLio/netty/buffer/ByteBuf;)Lio/netty/handler/codec/http/HttpResponse;
     144: astore        7
     146: aload_1
     147: invokevirtual #44                 // Method org/wso2/transport/http/netty/contractimpl/HttpOutboundRespListener.getSourceContext:()Lio/netty/channel/ChannelHandlerContext;
     150: aload         7
     152: invokeinterface #45,  2           // InterfaceMethod io/netty/channel/ChannelHandlerContext.writeAndFlush:(Ljava/lang/Object;)Lio/netty/channel/ChannelFuture;
     157: astore        5
     159: aload_0
     160: aload_1
     161: invokevirtual #20                 // Method org/wso2/transport/http/netty/contractimpl/HttpOutboundRespListener.getInboundRequestMsg:()Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
     164: aload_0
     165: getfield      #31                 // Field outboundRespStatusFuture:Lorg/wso2/transport/http/netty/contract/HttpResponseFuture;
     168: aload         5
     170: invokespecial #46                 // Method checkForResponseWriteStatus:(Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;Lorg/wso2/transport/http/netty/contract/HttpResponseFuture;Lio/netty/channel/ChannelFuture;)V
     173: return

  public void handleAbruptChannelClosure(org.wso2.transport.http.netty.contract.ServerConnectorFuture);
    Code:
       0: getstatic     #15                 // Field LOG:Lorg/slf4j/Logger;
       3: ldc           #47                 // String Remote client closed the connection while writing 100 continue response
       5: invokeinterface #48,  2           // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;)V
      10: return

  public io.netty.channel.ChannelFuture handleIdleTimeoutConnectionClosure(org.wso2.transport.http.netty.contract.ServerConnectorFuture, io.netty.channel.ChannelHandlerContext);
    Code:
       0: getstatic     #15                 // Field LOG:Lorg/slf4j/Logger;
       3: ldc           #49                 // String Idle timeout triggered while writing 100 continue response
       5: invokeinterface #48,  2           // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;)V
      10: aconst_null
      11: areturn

  private void checkForResponseWriteStatus(org.wso2.transport.http.netty.message.HttpCarbonMessage, org.wso2.transport.http.netty.contract.HttpResponseFuture, io.netty.channel.ChannelFuture);
    Code:
       0: aload_3
       1: aload_2
       2: aload_1
       3: invokedynamic #50,  0             // InvokeDynamic #0:operationComplete:(Lorg/wso2/transport/http/netty/contract/HttpResponseFuture;Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;)Lio/netty/util/concurrent/GenericFutureListener;
       8: invokeinterface #51,  2           // InterfaceMethod io/netty/channel/ChannelFuture.addListener:(Lio/netty/util/concurrent/GenericFutureListener;)Lio/netty/channel/ChannelFuture;
      13: pop
      14: return

  private static void lambda$checkForResponseWriteStatus$63(org.wso2.transport.http.netty.contract.HttpResponseFuture, org.wso2.transport.http.netty.message.HttpCarbonMessage, io.netty.util.concurrent.Future) throws java.lang.Exception;
    Code:
       0: aload_2
       1: invokeinterface #52,  1           // InterfaceMethod io/netty/util/concurrent/Future.cause:()Ljava/lang/Throwable;
       6: astore_3
       7: aload_3
       8: ifnull        38
      11: aload_3
      12: instanceof    #53                 // class java/nio/channels/ClosedChannelException
      15: ifeq          28
      18: new           #54                 // class java/io/IOException
      21: dup
      22: ldc           #55                 // String Connection between remote client and host is closed
      24: invokespecial #56                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      27: astore_3
      28: aload_0
      29: aload_3
      30: invokeinterface #57,  2           // InterfaceMethod org/wso2/transport/http/netty/contract/HttpResponseFuture.notifyHttpListener:(Ljava/lang/Throwable;)V
      35: goto          45
      38: aload_0
      39: aload_1
      40: invokeinterface #58,  2           // InterfaceMethod org/wso2/transport/http/netty/contract/HttpResponseFuture.notifyHttpListener:(Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;)V
      45: return

  static {};
    Code:
       0: ldc           #59                 // class org/wso2/transport/http/netty/contractimpl/listener/states/Response100ContinueSent
       2: invokestatic  #60                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #15                 // Field LOG:Lorg/slf4j/Logger;
       8: return
}
