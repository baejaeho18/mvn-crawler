Compiled from "Http2ConnectionManager.java"
public class org.wso2.transport.http.netty.contractimpl.sender.http2.Http2ConnectionManager {
  private static java.util.concurrent.ConcurrentHashMap<java.lang.String, org.wso2.transport.http.netty.contractimpl.sender.http2.Http2ConnectionManager$PerRouteConnectionPool> connectionPools;

  private java.util.concurrent.locks.Lock lock;

  private org.wso2.transport.http.netty.contract.config.SenderConfiguration senderConfig;

  public org.wso2.transport.http.netty.contractimpl.sender.http2.Http2ConnectionManager(org.wso2.transport.http.netty.contract.config.SenderConfiguration);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/concurrent/locks/ReentrantLock
       8: dup
       9: invokespecial #3                  // Method java/util/concurrent/locks/ReentrantLock."<init>":()V
      12: putfield      #4                  // Field lock:Ljava/util/concurrent/locks/Lock;
      15: aload_0
      16: aload_1
      17: putfield      #5                  // Field senderConfig:Lorg/wso2/transport/http/netty/contract/config/SenderConfiguration;
      20: return

  public org.wso2.transport.http.netty.contractimpl.sender.http2.Http2ClientChannel borrowChannel(org.wso2.transport.http.netty.contractimpl.common.HttpRoute);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #6                  // Method generateKey:(Lorg/wso2/transport/http/netty/contractimpl/common/HttpRoute;)Ljava/lang/String;
       5: astore_2
       6: aload_0
       7: aload_2
       8: invokespecial #7                  // Method fetchConnectionPool:(Ljava/lang/String;)Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ConnectionManager$PerRouteConnectionPool;
      11: astore_3
      12: aconst_null
      13: astore        4
      15: aload_3
      16: ifnull        25
      19: aload_3
      20: invokevirtual #8                  // Method org/wso2/transport/http/netty/contractimpl/sender/http2/Http2ConnectionManager$PerRouteConnectionPool.fetchTargetChannel:()Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel;
      23: astore        4
      25: aload         4
      27: areturn

  private org.wso2.transport.http.netty.contractimpl.sender.http2.Http2ConnectionManager$PerRouteConnectionPool fetchConnectionPool(java.lang.String);
    Code:
       0: getstatic     #9                  // Field connectionPools:Ljava/util/concurrent/ConcurrentHashMap;
       3: aload_1
       4: invokevirtual #10                 // Method java/util/concurrent/ConcurrentHashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
       7: checkcast     #11                 // class org/wso2/transport/http/netty/contractimpl/sender/http2/Http2ConnectionManager$PerRouteConnectionPool
      10: areturn

  private void registerConnectionPool(java.lang.String, org.wso2.transport.http.netty.contractimpl.sender.http2.Http2ConnectionManager$PerRouteConnectionPool);
    Code:
       0: getstatic     #9                  // Field connectionPools:Ljava/util/concurrent/ConcurrentHashMap;
       3: aload_1
       4: aload_2
       5: invokevirtual #12                 // Method java/util/concurrent/ConcurrentHashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       8: pop
       9: return

  private java.lang.String generateKey(org.wso2.transport.http.netty.contractimpl.common.HttpRoute);
    Code:
       0: new           #13                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #14                 // Method java/lang/StringBuilder."<init>":()V
       7: aload_1
       8: invokevirtual #15                 // Method org/wso2/transport/http/netty/contractimpl/common/HttpRoute.getHost:()Ljava/lang/String;
      11: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      14: ldc           #17                 // String :
      16: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      19: aload_1
      20: invokevirtual #18                 // Method org/wso2/transport/http/netty/contractimpl/common/HttpRoute.getPort:()I
      23: invokevirtual #19                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      26: invokevirtual #20                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      29: areturn

  public void addHttp2ClientChannel(org.wso2.transport.http.netty.contractimpl.common.HttpRoute, org.wso2.transport.http.netty.contractimpl.sender.http2.Http2ClientChannel);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #6                  // Method generateKey:(Lorg/wso2/transport/http/netty/contractimpl/common/HttpRoute;)Ljava/lang/String;
       5: astore_3
       6: aload_0
       7: aload_3
       8: invokespecial #7                  // Method fetchConnectionPool:(Ljava/lang/String;)Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ConnectionManager$PerRouteConnectionPool;
      11: astore        4
      13: aload         4
      15: ifnull        27
      18: aload         4
      20: aload_2
      21: invokevirtual #21                 // Method org/wso2/transport/http/netty/contractimpl/sender/http2/Http2ConnectionManager$PerRouteConnectionPool.addChannel:(Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel;)V
      24: goto          106
      27: aload_0
      28: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/Lock;
      31: invokeinterface #22,  1           // InterfaceMethod java/util/concurrent/locks/Lock.lock:()V
      36: aload_0
      37: aload_3
      38: invokespecial #7                  // Method fetchConnectionPool:(Ljava/lang/String;)Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ConnectionManager$PerRouteConnectionPool;
      41: astore        4
      43: aload         4
      45: ifnonnull     74
      48: new           #11                 // class org/wso2/transport/http/netty/contractimpl/sender/http2/Http2ConnectionManager$PerRouteConnectionPool
      51: dup
      52: aload_0
      53: getfield      #5                  // Field senderConfig:Lorg/wso2/transport/http/netty/contract/config/SenderConfiguration;
      56: invokevirtual #23                 // Method org/wso2/transport/http/netty/contract/config/SenderConfiguration.getPoolConfiguration:()Lorg/wso2/transport/http/netty/contractimpl/sender/channel/pool/PoolConfiguration;
      59: invokevirtual #24                 // Method org/wso2/transport/http/netty/contractimpl/sender/channel/pool/PoolConfiguration.getHttp2MaxActiveStreamsPerConnection:()I
      62: invokespecial #25                 // Method org/wso2/transport/http/netty/contractimpl/sender/http2/Http2ConnectionManager$PerRouteConnectionPool."<init>":(I)V
      65: astore        4
      67: aload_0
      68: aload_3
      69: aload         4
      71: invokespecial #26                 // Method registerConnectionPool:(Ljava/lang/String;Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ConnectionManager$PerRouteConnectionPool;)V
      74: aload         4
      76: aload_2
      77: invokevirtual #21                 // Method org/wso2/transport/http/netty/contractimpl/sender/http2/Http2ConnectionManager$PerRouteConnectionPool.addChannel:(Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel;)V
      80: aload_0
      81: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/Lock;
      84: invokeinterface #27,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      89: goto          106
      92: astore        5
      94: aload_0
      95: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/Lock;
      98: invokeinterface #27,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
     103: aload         5
     105: athrow
     106: aload_2
     107: invokevirtual #28                 // Method org/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel.getChannel:()Lio/netty/channel/Channel;
     110: invokeinterface #29,  1           // InterfaceMethod io/netty/channel/Channel.closeFuture:()Lio/netty/channel/ChannelFuture;
     115: aload_3
     116: aload_2
     117: invokedynamic #30,  0             // InvokeDynamic #0:operationComplete:(Ljava/lang/String;Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel;)Lio/netty/util/concurrent/GenericFutureListener;
     122: invokeinterface #31,  2           // InterfaceMethod io/netty/channel/ChannelFuture.addListener:(Lio/netty/util/concurrent/GenericFutureListener;)Lio/netty/channel/ChannelFuture;
     127: pop
     128: return
    Exception table:
       from    to  target type
          36    80    92   any
          92    94    92   any

  void returnClientChannel(org.wso2.transport.http.netty.contractimpl.common.HttpRoute, org.wso2.transport.http.netty.contractimpl.sender.http2.Http2ClientChannel);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #6                  // Method generateKey:(Lorg/wso2/transport/http/netty/contractimpl/common/HttpRoute;)Ljava/lang/String;
       5: astore_3
       6: aload_0
       7: aload_3
       8: invokespecial #7                  // Method fetchConnectionPool:(Ljava/lang/String;)Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ConnectionManager$PerRouteConnectionPool;
      11: astore        4
      13: aload         4
      15: ifnull        24
      18: aload         4
      20: aload_2
      21: invokevirtual #21                 // Method org/wso2/transport/http/netty/contractimpl/sender/http2/Http2ConnectionManager$PerRouteConnectionPool.addChannel:(Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel;)V
      24: return

  void removeClientChannel(org.wso2.transport.http.netty.contractimpl.common.HttpRoute, org.wso2.transport.http.netty.contractimpl.sender.http2.Http2ClientChannel);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #6                  // Method generateKey:(Lorg/wso2/transport/http/netty/contractimpl/common/HttpRoute;)Ljava/lang/String;
       5: astore_3
       6: aload_0
       7: aload_3
       8: invokespecial #7                  // Method fetchConnectionPool:(Ljava/lang/String;)Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ConnectionManager$PerRouteConnectionPool;
      11: astore        4
      13: aload         4
      15: ifnull        24
      18: aload         4
      20: aload_2
      21: invokevirtual #32                 // Method org/wso2/transport/http/netty/contractimpl/sender/http2/Http2ConnectionManager$PerRouteConnectionPool.removeChannel:(Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel;)V
      24: return

  private static void lambda$addHttp2ClientChannel$27(java.lang.String, org.wso2.transport.http.netty.contractimpl.sender.http2.Http2ClientChannel, io.netty.util.concurrent.Future) throws java.lang.Exception;
    Code:
       0: getstatic     #9                  // Field connectionPools:Ljava/util/concurrent/ConcurrentHashMap;
       3: aload_0
       4: invokevirtual #10                 // Method java/util/concurrent/ConcurrentHashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
       7: checkcast     #11                 // class org/wso2/transport/http/netty/contractimpl/sender/http2/Http2ConnectionManager$PerRouteConnectionPool
      10: astore_3
      11: aload_3
      12: ifnull        34
      15: aload_3
      16: aload_1
      17: invokevirtual #32                 // Method org/wso2/transport/http/netty/contractimpl/sender/http2/Http2ConnectionManager$PerRouteConnectionPool.removeChannel:(Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel;)V
      20: aload_1
      21: invokevirtual #33                 // Method org/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel.getDataEventListeners:()Ljava/util/List;
      24: invokedynamic #34,  0             // InvokeDynamic #1:accept:()Ljava/util/function/Consumer;
      29: invokeinterface #35,  2           // InterfaceMethod java/util/List.forEach:(Ljava/util/function/Consumer;)V
      34: return

  static {};
    Code:
       0: new           #36                 // class java/util/concurrent/ConcurrentHashMap
       3: dup
       4: invokespecial #37                 // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
       7: putstatic     #9                  // Field connectionPools:Ljava/util/concurrent/ConcurrentHashMap;
      10: return
}
