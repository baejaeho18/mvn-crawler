Compiled from "TimeoutHandler.java"
public class org.wso2.transport.http.netty.contractimpl.sender.http2.TimeoutHandler implements org.wso2.transport.http.netty.contractimpl.sender.http2.Http2DataEventListener {
  private static final org.slf4j.Logger LOG;

  private static final long MIN_TIMEOUT_NANOS;

  private long idleTimeNanos;

  private org.wso2.transport.http.netty.contractimpl.sender.http2.Http2ClientChannel http2ClientChannel;

  private java.util.Map<java.lang.Integer, java.util.concurrent.ScheduledFuture<?>> timerTasks;

  public org.wso2.transport.http.netty.contractimpl.sender.http2.TimeoutHandler(long, org.wso2.transport.http.netty.contractimpl.sender.http2.Http2ClientChannel);
    Code:
       0: aload_0
       1: invokespecial #7                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: getstatic     #8                  // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
       8: lload_1
       9: invokevirtual #9                  // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      12: getstatic     #10                 // Field MIN_TIMEOUT_NANOS:J
      15: invokestatic  #11                 // Method java/lang/Math.max:(JJ)J
      18: putfield      #5                  // Field idleTimeNanos:J
      21: aload_0
      22: aload_3
      23: putfield      #6                  // Field http2ClientChannel:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel;
      26: aload_0
      27: new           #12                 // class java/util/concurrent/ConcurrentHashMap
      30: dup
      31: invokespecial #13                 // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      34: putfield      #2                  // Field timerTasks:Ljava/util/Map;
      37: return

  public boolean onStreamInit(io.netty.channel.ChannelHandlerContext, int);
    Code:
       0: aload_0
       1: getfield      #6                  // Field http2ClientChannel:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel;
       4: iload_2
       5: invokevirtual #14                 // Method org/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel.getInFlightMessage:(I)Lorg/wso2/transport/http/netty/contractimpl/sender/http2/OutboundMsgHolder;
       8: astore_3
       9: aload_3
      10: ifnonnull     22
      13: aload_0
      14: getfield      #6                  // Field http2ClientChannel:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel;
      17: iload_2
      18: invokevirtual #15                 // Method org/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel.getPromisedMessage:(I)Lorg/wso2/transport/http/netty/contractimpl/sender/http2/OutboundMsgHolder;
      21: astore_3
      22: aload_3
      23: ifnull        67
      26: aload_3
      27: aload_0
      28: invokespecial #4                  // Method ticksInNanos:()J
      31: invokevirtual #16                 // Method org/wso2/transport/http/netty/contractimpl/sender/http2/OutboundMsgHolder.setLastReadWriteTime:(J)V
      34: aload_0
      35: getfield      #2                  // Field timerTasks:Ljava/util/Map;
      38: iload_2
      39: invokestatic  #17                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      42: aload_0
      43: aload_1
      44: new           #18                 // class org/wso2/transport/http/netty/contractimpl/sender/http2/TimeoutHandler$IdleTimeoutTask
      47: dup
      48: aload_0
      49: aload_1
      50: iload_2
      51: invokespecial #19                 // Method org/wso2/transport/http/netty/contractimpl/sender/http2/TimeoutHandler$IdleTimeoutTask."<init>":(Lorg/wso2/transport/http/netty/contractimpl/sender/http2/TimeoutHandler;Lio/netty/channel/ChannelHandlerContext;I)V
      54: aload_0
      55: getfield      #5                  // Field idleTimeNanos:J
      58: invokespecial #3                  // Method schedule:(Lio/netty/channel/ChannelHandlerContext;Ljava/lang/Runnable;J)Ljava/util/concurrent/ScheduledFuture;
      61: invokeinterface #20,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      66: pop
      67: iconst_1
      68: ireturn

  public boolean onHeadersRead(io.netty.channel.ChannelHandlerContext, int, io.netty.handler.codec.http2.Http2Headers, boolean);
    Code:
       0: aload_0
       1: iload_2
       2: iload         4
       4: invokespecial #21                 // Method updateLastReadTime:(IZ)V
       7: iconst_1
       8: ireturn

  public boolean onDataRead(io.netty.channel.ChannelHandlerContext, int, io.netty.buffer.ByteBuf, boolean);
    Code:
       0: aload_0
       1: iload_2
       2: iload         4
       4: invokespecial #21                 // Method updateLastReadTime:(IZ)V
       7: iconst_1
       8: ireturn

  public boolean onPushPromiseRead(io.netty.channel.ChannelHandlerContext, int, io.netty.handler.codec.http2.Http2Headers, boolean);
    Code:
       0: aload_0
       1: iload_2
       2: iload         4
       4: invokespecial #21                 // Method updateLastReadTime:(IZ)V
       7: iconst_1
       8: ireturn

  public boolean onHeadersWrite(io.netty.channel.ChannelHandlerContext, int, io.netty.handler.codec.http2.Http2Headers, boolean);
    Code:
       0: aload_0
       1: iload_2
       2: invokespecial #22                 // Method updateLastWriteTime:(I)V
       5: iconst_1
       6: ireturn

  public boolean onDataWrite(io.netty.channel.ChannelHandlerContext, int, io.netty.buffer.ByteBuf, boolean);
    Code:
       0: aload_0
       1: iload_2
       2: invokespecial #22                 // Method updateLastWriteTime:(I)V
       5: iconst_1
       6: ireturn

  public void onStreamReset(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #23                 // Method onStreamClose:(I)V
       5: return

  public void onStreamClose(int);
    Code:
       0: aload_0
       1: getfield      #2                  // Field timerTasks:Ljava/util/Map;
       4: iload_1
       5: invokestatic  #17                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       8: invokeinterface #24,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      13: checkcast     #25                 // class java/util/concurrent/ScheduledFuture
      16: astore_2
      17: aload_2
      18: ifnull        43
      21: aload_2
      22: iconst_0
      23: invokeinterface #26,  2           // InterfaceMethod java/util/concurrent/ScheduledFuture.cancel:(Z)Z
      28: pop
      29: aload_0
      30: getfield      #2                  // Field timerTasks:Ljava/util/Map;
      33: iload_1
      34: invokestatic  #17                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      37: invokeinterface #27,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      42: pop
      43: return

  public void destroy();
    Code:
       0: aload_0
       1: getfield      #2                  // Field timerTasks:Ljava/util/Map;
       4: invokedynamic #28,  0             // InvokeDynamic #0:accept:()Ljava/util/function/BiConsumer;
       9: invokeinterface #29,  2           // InterfaceMethod java/util/Map.forEach:(Ljava/util/function/BiConsumer;)V
      14: aload_0
      15: getfield      #2                  // Field timerTasks:Ljava/util/Map;
      18: invokeinterface #30,  1           // InterfaceMethod java/util/Map.clear:()V
      23: return

  private void updateLastReadTime(int, boolean);
    Code:
       0: aload_0
       1: getfield      #6                  // Field http2ClientChannel:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel;
       4: iload_1
       5: invokevirtual #14                 // Method org/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel.getInFlightMessage:(I)Lorg/wso2/transport/http/netty/contractimpl/sender/http2/OutboundMsgHolder;
       8: astore_3
       9: aload_3
      10: ifnonnull     22
      13: aload_0
      14: getfield      #6                  // Field http2ClientChannel:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel;
      17: iload_1
      18: invokevirtual #15                 // Method org/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel.getPromisedMessage:(I)Lorg/wso2/transport/http/netty/contractimpl/sender/http2/OutboundMsgHolder;
      21: astore_3
      22: aload_3
      23: ifnull        34
      26: aload_3
      27: aload_0
      28: invokespecial #4                  // Method ticksInNanos:()J
      31: invokevirtual #16                 // Method org/wso2/transport/http/netty/contractimpl/sender/http2/OutboundMsgHolder.setLastReadWriteTime:(J)V
      34: iload_2
      35: ifeq          43
      38: aload_0
      39: iload_1
      40: invokevirtual #23                 // Method onStreamClose:(I)V
      43: return

  private void updateLastWriteTime(int);
    Code:
       0: aload_0
       1: getfield      #6                  // Field http2ClientChannel:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel;
       4: iload_1
       5: invokevirtual #14                 // Method org/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel.getInFlightMessage:(I)Lorg/wso2/transport/http/netty/contractimpl/sender/http2/OutboundMsgHolder;
       8: astore_2
       9: aload_2
      10: ifnull        24
      13: aload_2
      14: aload_0
      15: invokespecial #4                  // Method ticksInNanos:()J
      18: invokevirtual #16                 // Method org/wso2/transport/http/netty/contractimpl/sender/http2/OutboundMsgHolder.setLastReadWriteTime:(J)V
      21: goto          38
      24: getstatic     #1                  // Field LOG:Lorg/slf4j/Logger;
      27: ldc           #31                 // String OutboundMsgHolder may have already removed for streamId: {}
      29: iload_1
      30: invokestatic  #17                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      33: invokeinterface #32,  3           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Object;)V
      38: return

  private long ticksInNanos();
    Code:
       0: invokestatic  #33                 // Method java/lang/System.nanoTime:()J
       3: lreturn

  private java.util.concurrent.ScheduledFuture<?> schedule(io.netty.channel.ChannelHandlerContext, java.lang.Runnable, long);
    Code:
       0: aload_1
       1: invokeinterface #34,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.executor:()Lio/netty/util/concurrent/EventExecutor;
       6: aload_2
       7: lload_3
       8: getstatic     #35                 // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
      11: invokeinterface #36,  5           // InterfaceMethod io/netty/util/concurrent/EventExecutor.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/netty/util/concurrent/ScheduledFuture;
      16: areturn

  private static void lambda$destroy$62(java.lang.Integer, java.util.concurrent.ScheduledFuture);
    Code:
       0: aload_1
       1: iconst_0
       2: invokeinterface #26,  2           // InterfaceMethod java/util/concurrent/ScheduledFuture.cancel:(Z)Z
       7: pop
       8: return

  static org.wso2.transport.http.netty.contractimpl.sender.http2.Http2ClientChannel access$000(org.wso2.transport.http.netty.contractimpl.sender.http2.TimeoutHandler);
    Code:
       0: aload_0
       1: getfield      #6                  // Field http2ClientChannel:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel;
       4: areturn

  static long access$100(org.wso2.transport.http.netty.contractimpl.sender.http2.TimeoutHandler);
    Code:
       0: aload_0
       1: getfield      #5                  // Field idleTimeNanos:J
       4: lreturn

  static long access$200(org.wso2.transport.http.netty.contractimpl.sender.http2.TimeoutHandler);
    Code:
       0: aload_0
       1: invokespecial #4                  // Method ticksInNanos:()J
       4: lreturn

  static java.util.concurrent.ScheduledFuture access$300(org.wso2.transport.http.netty.contractimpl.sender.http2.TimeoutHandler, io.netty.channel.ChannelHandlerContext, java.lang.Runnable, long);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: lload_3
       4: invokespecial #3                  // Method schedule:(Lio/netty/channel/ChannelHandlerContext;Ljava/lang/Runnable;J)Ljava/util/concurrent/ScheduledFuture;
       7: areturn

  static java.util.Map access$400(org.wso2.transport.http.netty.contractimpl.sender.http2.TimeoutHandler);
    Code:
       0: aload_0
       1: getfield      #2                  // Field timerTasks:Ljava/util/Map;
       4: areturn

  static org.slf4j.Logger access$500();
    Code:
       0: getstatic     #1                  // Field LOG:Lorg/slf4j/Logger;
       3: areturn

  static {};
    Code:
       0: ldc           #37                 // class org/wso2/transport/http/netty/contractimpl/sender/http2/TimeoutHandler
       2: invokestatic  #38                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #1                  // Field LOG:Lorg/slf4j/Logger;
       8: getstatic     #8                  // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      11: lconst_1
      12: invokevirtual #9                  // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      15: putstatic     #10                 // Field MIN_TIMEOUT_NANOS:J
      18: return
}
