Compiled from "BackPressureHandler.java"
public class org.wso2.transport.http.netty.contractimpl.common.BackPressureHandler extends io.netty.channel.ChannelInboundHandlerAdapter {
  private final org.wso2.transport.http.netty.message.BackPressureObservable backPressureObservable;

  public org.wso2.transport.http.netty.contractimpl.common.BackPressureHandler();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method io/netty/channel/ChannelInboundHandlerAdapter."<init>":()V
       4: aload_0
       5: new           #2                  // class org/wso2/transport/http/netty/message/DefaultBackPressureObservable
       8: dup
       9: invokespecial #3                  // Method org/wso2/transport/http/netty/message/DefaultBackPressureObservable."<init>":()V
      12: putfield      #4                  // Field backPressureObservable:Lorg/wso2/transport/http/netty/message/BackPressureObservable;
      15: return

  public void channelWritabilityChanged(io.netty.channel.ChannelHandlerContext);
    Code:
       0: aload_1
       1: invokeinterface #5,  1            // InterfaceMethod io/netty/channel/ChannelHandlerContext.channel:()Lio/netty/channel/Channel;
       6: invokeinterface #6,  1            // InterfaceMethod io/netty/channel/Channel.isWritable:()Z
      11: ifeq          23
      14: aload_0
      15: getfield      #4                  // Field backPressureObservable:Lorg/wso2/transport/http/netty/message/BackPressureObservable;
      18: invokeinterface #7,  1            // InterfaceMethod org/wso2/transport/http/netty/message/BackPressureObservable.notifyWritable:()V
      23: return

  public void channelInactive(io.netty.channel.ChannelHandlerContext);
    Code:
       0: aload_0
       1: getfield      #4                  // Field backPressureObservable:Lorg/wso2/transport/http/netty/message/BackPressureObservable;
       4: invokeinterface #7,  1            // InterfaceMethod org/wso2/transport/http/netty/message/BackPressureObservable.notifyWritable:()V
       9: aload_1
      10: invokeinterface #8,  1            // InterfaceMethod io/netty/channel/ChannelHandlerContext.fireChannelInactive:()Lio/netty/channel/ChannelHandlerContext;
      15: pop
      16: return

  public org.wso2.transport.http.netty.message.BackPressureObservable getBackPressureObservable();
    Code:
       0: aload_0
       1: getfield      #4                  // Field backPressureObservable:Lorg/wso2/transport/http/netty/message/BackPressureObservable;
       4: areturn
}
