Compiled from "OutboundMsgHolder.java"
public class org.wso2.transport.http.netty.contractimpl.sender.http2.OutboundMsgHolder {
  private org.wso2.transport.http.netty.message.HttpCarbonMessage requestCarbonMessage;

  private java.util.concurrent.BlockingQueue<org.wso2.transport.http.netty.message.Http2PushPromise> promises;

  private java.util.concurrent.ConcurrentHashMap<java.lang.Integer, org.wso2.transport.http.netty.message.HttpCarbonResponse> pushResponsesMap;

  private org.wso2.transport.http.netty.message.HttpCarbonResponse response;

  private org.wso2.transport.http.netty.contract.HttpResponseFuture responseFuture;

  private org.wso2.transport.http.netty.contractimpl.sender.http2.Http2ClientChannel http2ClientChannel;

  private boolean allPromisesReceived;

  private long lastReadWriteTime;

  private boolean requestWritten;

  public org.wso2.transport.http.netty.contractimpl.sender.http2.OutboundMsgHolder(org.wso2.transport.http.netty.message.HttpCarbonMessage);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field allPromisesReceived:Z
       9: aload_0
      10: aload_1
      11: putfield      #3                  // Field requestCarbonMessage:Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
      14: aload_0
      15: new           #4                  // class java/util/concurrent/LinkedBlockingQueue
      18: dup
      19: invokespecial #5                  // Method java/util/concurrent/LinkedBlockingQueue."<init>":()V
      22: putfield      #6                  // Field promises:Ljava/util/concurrent/BlockingQueue;
      25: aload_0
      26: new           #7                  // class java/util/concurrent/ConcurrentHashMap
      29: dup
      30: invokespecial #8                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      33: putfield      #9                  // Field pushResponsesMap:Ljava/util/concurrent/ConcurrentHashMap;
      36: aload_0
      37: new           #10                 // class org/wso2/transport/http/netty/contractimpl/DefaultHttpResponseFuture
      40: dup
      41: aload_0
      42: invokespecial #11                 // Method org/wso2/transport/http/netty/contractimpl/DefaultHttpResponseFuture."<init>":(Lorg/wso2/transport/http/netty/contractimpl/sender/http2/OutboundMsgHolder;)V
      45: putfield      #12                 // Field responseFuture:Lorg/wso2/transport/http/netty/contract/HttpResponseFuture;
      48: return

  public void setHttp2ClientChannel(org.wso2.transport.http.netty.contractimpl.sender.http2.Http2ClientChannel);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #13                 // Field http2ClientChannel:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel;
       5: return

  public org.wso2.transport.http.netty.message.HttpCarbonMessage getRequest();
    Code:
       0: aload_0
       1: getfield      #3                  // Field requestCarbonMessage:Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
       4: areturn

  public org.wso2.transport.http.netty.contract.HttpResponseFuture getResponseFuture();
    Code:
       0: aload_0
       1: getfield      #12                 // Field responseFuture:Lorg/wso2/transport/http/netty/contract/HttpResponseFuture;
       4: areturn

  public org.wso2.transport.http.netty.contractimpl.sender.http2.Http2ClientChannel getHttp2ClientChannel();
    Code:
       0: aload_0
       1: getfield      #13                 // Field http2ClientChannel:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel;
       4: areturn

  public void addPromise(org.wso2.transport.http.netty.message.Http2PushPromise);
    Code:
       0: aload_0
       1: getfield      #6                  // Field promises:Ljava/util/concurrent/BlockingQueue;
       4: aload_1
       5: invokeinterface #14,  2           // InterfaceMethod java/util/concurrent/BlockingQueue.add:(Ljava/lang/Object;)Z
      10: pop
      11: aload_0
      12: getfield      #12                 // Field responseFuture:Lorg/wso2/transport/http/netty/contract/HttpResponseFuture;
      15: invokeinterface #15,  1           // InterfaceMethod org/wso2/transport/http/netty/contract/HttpResponseFuture.notifyPromiseAvailability:()V
      20: aload_0
      21: getfield      #12                 // Field responseFuture:Lorg/wso2/transport/http/netty/contract/HttpResponseFuture;
      24: invokeinterface #16,  1           // InterfaceMethod org/wso2/transport/http/netty/contract/HttpResponseFuture.notifyPushPromise:()V
      29: return

  public void addPushResponse(int, org.wso2.transport.http.netty.message.HttpCarbonResponse);
    Code:
       0: aload_0
       1: getfield      #9                  // Field pushResponsesMap:Ljava/util/concurrent/ConcurrentHashMap;
       4: iload_1
       5: invokestatic  #17                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       8: aload_2
       9: invokevirtual #18                 // Method java/util/concurrent/ConcurrentHashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      12: pop
      13: aload_0
      14: getfield      #12                 // Field responseFuture:Lorg/wso2/transport/http/netty/contract/HttpResponseFuture;
      17: iload_1
      18: aload_2
      19: invokeinterface #19,  3           // InterfaceMethod org/wso2/transport/http/netty/contract/HttpResponseFuture.notifyPushResponse:(ILorg/wso2/transport/http/netty/message/HttpCarbonMessage;)V
      24: return

  public boolean isAllPromisesReceived();
    Code:
       0: aload_0
       1: getfield      #2                  // Field allPromisesReceived:Z
       4: ireturn

  public void markNoPromisesReceived();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #2                  // Field allPromisesReceived:Z
       5: aload_0
       6: getfield      #12                 // Field responseFuture:Lorg/wso2/transport/http/netty/contract/HttpResponseFuture;
       9: invokeinterface #15,  1           // InterfaceMethod org/wso2/transport/http/netty/contract/HttpResponseFuture.notifyPromiseAvailability:()V
      14: return

  public org.wso2.transport.http.netty.message.HttpCarbonResponse getPushResponse(int);
    Code:
       0: aload_0
       1: getfield      #9                  // Field pushResponsesMap:Ljava/util/concurrent/ConcurrentHashMap;
       4: iload_1
       5: invokestatic  #17                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       8: invokevirtual #20                 // Method java/util/concurrent/ConcurrentHashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      11: checkcast     #21                 // class org/wso2/transport/http/netty/message/HttpCarbonResponse
      14: areturn

  public org.wso2.transport.http.netty.message.HttpCarbonResponse getResponse();
    Code:
       0: aload_0
       1: getfield      #22                 // Field response:Lorg/wso2/transport/http/netty/message/HttpCarbonResponse;
       4: areturn

  public void setResponse(org.wso2.transport.http.netty.message.HttpCarbonResponse);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #22                 // Field response:Lorg/wso2/transport/http/netty/message/HttpCarbonResponse;
       5: aload_0
       6: iconst_1
       7: putfield      #2                  // Field allPromisesReceived:Z
      10: aload_0
      11: getfield      #12                 // Field responseFuture:Lorg/wso2/transport/http/netty/contract/HttpResponseFuture;
      14: invokeinterface #15,  1           // InterfaceMethod org/wso2/transport/http/netty/contract/HttpResponseFuture.notifyPromiseAvailability:()V
      19: aload_0
      20: getfield      #12                 // Field responseFuture:Lorg/wso2/transport/http/netty/contract/HttpResponseFuture;
      23: aload_1
      24: invokeinterface #23,  2           // InterfaceMethod org/wso2/transport/http/netty/contract/HttpResponseFuture.notifyHttpListener:(Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;)V
      29: return

  public boolean hasPromise();
    Code:
       0: aload_0
       1: getfield      #6                  // Field promises:Ljava/util/concurrent/BlockingQueue;
       4: invokeinterface #24,  1           // InterfaceMethod java/util/concurrent/BlockingQueue.isEmpty:()Z
       9: ifne          16
      12: iconst_1
      13: goto          17
      16: iconst_0
      17: ireturn

  public org.wso2.transport.http.netty.message.Http2PushPromise getNextPromise();
    Code:
       0: aload_0
       1: getfield      #6                  // Field promises:Ljava/util/concurrent/BlockingQueue;
       4: invokeinterface #25,  1           // InterfaceMethod java/util/concurrent/BlockingQueue.poll:()Ljava/lang/Object;
       9: checkcast     #26                 // class org/wso2/transport/http/netty/message/Http2PushPromise
      12: areturn

  long getLastReadWriteTime();
    Code:
       0: aload_0
       1: getfield      #27                 // Field lastReadWriteTime:J
       4: lreturn

  void setLastReadWriteTime(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #27                 // Field lastReadWriteTime:J
       5: return

  boolean isRequestWritten();
    Code:
       0: aload_0
       1: getfield      #28                 // Field requestWritten:Z
       4: ireturn

  public void setRequestWritten(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #28                 // Field requestWritten:Z
       5: return
}
