Compiled from "ReceivingEntityBody.java"
public class org.wso2.transport.http.netty.contractimpl.sender.states.ReceivingEntityBody implements org.wso2.transport.http.netty.contractimpl.sender.states.SenderState {
  private static final org.slf4j.Logger LOG;

  private final org.wso2.transport.http.netty.contractimpl.common.states.MessageStateContext messageStateContext;

  private final org.wso2.transport.http.netty.contractimpl.sender.TargetHandler targetHandler;

  org.wso2.transport.http.netty.contractimpl.sender.states.ReceivingEntityBody(org.wso2.transport.http.netty.contractimpl.common.states.MessageStateContext, org.wso2.transport.http.netty.contractimpl.sender.TargetHandler);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #4                  // Field messageStateContext:Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;
       9: aload_0
      10: aload_2
      11: putfield      #5                  // Field targetHandler:Lorg/wso2/transport/http/netty/contractimpl/sender/TargetHandler;
      14: return

  public void writeOutboundRequestHeaders(org.wso2.transport.http.netty.message.HttpCarbonMessage, io.netty.handler.codec.http.HttpContent);
    Code:
       0: getstatic     #6                  // Field LOG:Lorg/slf4j/Logger;
       3: ldc           #7                  // String writeOutboundRequestHeaders {}
       5: ldc           #8                  // String is not a dependant action of this state
       7: invokeinterface #9,  3            // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;)V
      12: return

  public void writeOutboundRequestEntity(org.wso2.transport.http.netty.message.HttpCarbonMessage, io.netty.handler.codec.http.HttpContent);
    Code:
       0: getstatic     #6                  // Field LOG:Lorg/slf4j/Logger;
       3: ldc           #10                 // String writeOutboundRequestEntity {}
       5: ldc           #8                  // String is not a dependant action of this state
       7: invokeinterface #9,  3            // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;)V
      12: return

  public void readInboundResponseHeaders(org.wso2.transport.http.netty.contractimpl.sender.TargetHandler, io.netty.handler.codec.http.HttpResponse);
    Code:
       0: getstatic     #6                  // Field LOG:Lorg/slf4j/Logger;
       3: ldc           #11                 // String readInboundResponseHeaders {}
       5: ldc           #8                  // String is not a dependant action of this state
       7: invokeinterface #9,  3            // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;)V
      12: return

  public void readInboundResponseEntityBody(io.netty.channel.ChannelHandlerContext, io.netty.handler.codec.http.HttpContent, org.wso2.transport.http.netty.message.HttpCarbonMessage) throws java.lang.Exception;
    Code:
       0: aload_3
       1: aload_2
       2: invokevirtual #12                 // Method org/wso2/transport/http/netty/message/HttpCarbonMessage.addHttpContent:(Lio/netty/handler/codec/http/HttpContent;)V
       5: aload_2
       6: invokestatic  #13                 // Method org/wso2/transport/http/netty/contractimpl/common/Util.isLastHttpContent:(Lio/netty/handler/codec/http/HttpContent;)Z
       9: ifeq          101
      12: aload_0
      13: getfield      #5                  // Field targetHandler:Lorg/wso2/transport/http/netty/contractimpl/sender/TargetHandler;
      16: invokevirtual #14                 // Method org/wso2/transport/http/netty/contractimpl/sender/TargetHandler.resetInboundMsg:()V
      19: aload_0
      20: getfield      #5                  // Field targetHandler:Lorg/wso2/transport/http/netty/contractimpl/sender/TargetHandler;
      23: invokevirtual #15                 // Method org/wso2/transport/http/netty/contractimpl/sender/TargetHandler.getTargetChannel:()Lorg/wso2/transport/http/netty/contractimpl/sender/channel/TargetChannel;
      26: invokevirtual #16                 // Method org/wso2/transport/http/netty/contractimpl/sender/channel/TargetChannel.getChannel:()Lio/netty/channel/Channel;
      29: invokeinterface #17,  1           // InterfaceMethod io/netty/channel/Channel.pipeline:()Lio/netty/channel/ChannelPipeline;
      34: ldc           #18                 // String idleStateHandler
      36: invokeinterface #19,  2           // InterfaceMethod io/netty/channel/ChannelPipeline.remove:(Ljava/lang/String;)Lio/netty/channel/ChannelHandler;
      41: pop
      42: aload_0
      43: getfield      #4                  // Field messageStateContext:Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;
      46: new           #20                 // class org/wso2/transport/http/netty/contractimpl/sender/states/EntityBodyReceived
      49: dup
      50: invokespecial #21                 // Method org/wso2/transport/http/netty/contractimpl/sender/states/EntityBodyReceived."<init>":()V
      53: invokevirtual #22                 // Method org/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext.setSenderState:(Lorg/wso2/transport/http/netty/contractimpl/sender/states/SenderState;)V
      56: aload_0
      57: getfield      #5                  // Field targetHandler:Lorg/wso2/transport/http/netty/contractimpl/sender/TargetHandler;
      60: invokevirtual #23                 // Method org/wso2/transport/http/netty/contractimpl/sender/TargetHandler.getKeepAliveConfig:()Lorg/wso2/transport/http/netty/contract/config/KeepAliveConfig;
      63: aload_0
      64: getfield      #5                  // Field targetHandler:Lorg/wso2/transport/http/netty/contractimpl/sender/TargetHandler;
      67: invokevirtual #24                 // Method org/wso2/transport/http/netty/contractimpl/sender/TargetHandler.getOutboundRequestMsg:()Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
      70: invokestatic  #25                 // Method org/wso2/transport/http/netty/contractimpl/common/Util.isKeepAlive:(Lorg/wso2/transport/http/netty/contract/config/KeepAliveConfig;Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;)Z
      73: ifne          84
      76: aload_0
      77: getfield      #5                  // Field targetHandler:Lorg/wso2/transport/http/netty/contractimpl/sender/TargetHandler;
      80: aload_1
      81: invokevirtual #26                 // Method org/wso2/transport/http/netty/contractimpl/sender/TargetHandler.closeChannel:(Lio/netty/channel/ChannelHandlerContext;)V
      84: aload_0
      85: getfield      #5                  // Field targetHandler:Lorg/wso2/transport/http/netty/contractimpl/sender/TargetHandler;
      88: invokevirtual #27                 // Method org/wso2/transport/http/netty/contractimpl/sender/TargetHandler.getConnectionManager:()Lorg/wso2/transport/http/netty/contractimpl/sender/channel/pool/ConnectionManager;
      91: aload_0
      92: getfield      #5                  // Field targetHandler:Lorg/wso2/transport/http/netty/contractimpl/sender/TargetHandler;
      95: invokevirtual #15                 // Method org/wso2/transport/http/netty/contractimpl/sender/TargetHandler.getTargetChannel:()Lorg/wso2/transport/http/netty/contractimpl/sender/channel/TargetChannel;
      98: invokevirtual #28                 // Method org/wso2/transport/http/netty/contractimpl/sender/channel/pool/ConnectionManager.returnChannel:(Lorg/wso2/transport/http/netty/contractimpl/sender/channel/TargetChannel;)V
     101: return

  public void handleAbruptChannelClosure(org.wso2.transport.http.netty.contract.HttpResponseFuture);
    Code:
       0: aload_0
       1: getfield      #5                  // Field targetHandler:Lorg/wso2/transport/http/netty/contractimpl/sender/TargetHandler;
       4: invokevirtual #29                 // Method org/wso2/transport/http/netty/contractimpl/sender/TargetHandler.getInboundResponseMsg:()Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
       7: ldc           #30                 // String Remote host closed the connection while reading inbound response body
       9: invokestatic  #31                 // Method org/wso2/transport/http/netty/contractimpl/common/states/StateUtil.handleIncompleteInboundMessage:(Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;Ljava/lang/String;)V
      12: return

  public void handleIdleTimeoutConnectionClosure(org.wso2.transport.http.netty.contract.HttpResponseFuture, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #5                  // Field targetHandler:Lorg/wso2/transport/http/netty/contractimpl/sender/TargetHandler;
       4: invokevirtual #29                 // Method org/wso2/transport/http/netty/contractimpl/sender/TargetHandler.getInboundResponseMsg:()Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
       7: ldc           #32                 // String Idle timeout triggered while reading inbound response entity body
       9: invokestatic  #31                 // Method org/wso2/transport/http/netty/contractimpl/common/states/StateUtil.handleIncompleteInboundMessage:(Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;Ljava/lang/String;)V
      12: return

  static {};
    Code:
       0: ldc           #33                 // class org/wso2/transport/http/netty/contractimpl/sender/states/ReceivingEntityBody
       2: invokestatic  #34                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #6                  // Field LOG:Lorg/slf4j/Logger;
       8: return
}
