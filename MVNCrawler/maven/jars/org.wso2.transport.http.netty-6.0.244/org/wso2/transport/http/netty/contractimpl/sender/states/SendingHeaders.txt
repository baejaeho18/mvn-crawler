Compiled from "SendingHeaders.java"
public class org.wso2.transport.http.netty.contractimpl.sender.states.SendingHeaders implements org.wso2.transport.http.netty.contractimpl.sender.states.SenderState {
  private static final org.slf4j.Logger LOG;

  private final java.lang.String httpVersion;

  private final org.wso2.transport.http.netty.contract.config.ChunkConfig chunkConfig;

  private final org.wso2.transport.http.netty.contractimpl.sender.channel.TargetChannel targetChannel;

  private final org.wso2.transport.http.netty.contractimpl.common.states.MessageStateContext messageStateContext;

  private final org.wso2.transport.http.netty.contract.HttpResponseFuture httpInboundResponseFuture;

  public org.wso2.transport.http.netty.contractimpl.sender.states.SendingHeaders(org.wso2.transport.http.netty.contractimpl.common.states.MessageStateContext, org.wso2.transport.http.netty.contractimpl.sender.channel.TargetChannel, java.lang.String, org.wso2.transport.http.netty.contract.config.ChunkConfig, org.wso2.transport.http.netty.contract.HttpResponseFuture);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #4                  // Field messageStateContext:Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;
       9: aload_0
      10: aload_2
      11: putfield      #5                  // Field targetChannel:Lorg/wso2/transport/http/netty/contractimpl/sender/channel/TargetChannel;
      14: aload_0
      15: aload_3
      16: putfield      #6                  // Field httpVersion:Ljava/lang/String;
      19: aload_0
      20: aload         4
      22: putfield      #7                  // Field chunkConfig:Lorg/wso2/transport/http/netty/contract/config/ChunkConfig;
      25: aload_0
      26: aload         5
      28: putfield      #8                  // Field httpInboundResponseFuture:Lorg/wso2/transport/http/netty/contract/HttpResponseFuture;
      31: return

  public void writeOutboundRequestHeaders(org.wso2.transport.http.netty.message.HttpCarbonMessage, io.netty.handler.codec.http.HttpContent);
    Code:
       0: aload_2
       1: invokestatic  #9                  // Method org/wso2/transport/http/netty/contractimpl/common/Util.isLastHttpContent:(Lio/netty/handler/codec/http/HttpContent;)Z
       4: ifeq          91
       7: aload_0
       8: aload_1
       9: invokespecial #10                 // Method getHttpMethod:(Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;)Ljava/lang/String;
      12: invokestatic  #11                 // Method org/wso2/transport/http/netty/contractimpl/common/Util.isEntityBodyAllowed:(Ljava/lang/String;)Z
      15: ifeq          65
      18: aload_0
      19: getfield      #7                  // Field chunkConfig:Lorg/wso2/transport/http/netty/contract/config/ChunkConfig;
      22: getstatic     #12                 // Field org/wso2/transport/http/netty/contract/config/ChunkConfig.ALWAYS:Lorg/wso2/transport/http/netty/contract/config/ChunkConfig;
      25: if_acmpne     49
      28: aload_0
      29: getfield      #6                  // Field httpVersion:Ljava/lang/String;
      32: aload_0
      33: getfield      #7                  // Field chunkConfig:Lorg/wso2/transport/http/netty/contract/config/ChunkConfig;
      36: invokestatic  #13                 // Method org/wso2/transport/http/netty/contractimpl/common/states/StateUtil.checkChunkingCompatibility:(Ljava/lang/String;Lorg/wso2/transport/http/netty/contract/config/ChunkConfig;)Z
      39: ifeq          49
      42: aload_1
      43: invokestatic  #14                 // Method org/wso2/transport/http/netty/contractimpl/common/Util.setupChunkedRequest:(Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;)V
      46: goto          65
      49: aload_2
      50: invokeinterface #15,  1           // InterfaceMethod io/netty/handler/codec/http/HttpContent.content:()Lio/netty/buffer/ByteBuf;
      55: invokevirtual #16                 // Method io/netty/buffer/ByteBuf.readableBytes:()I
      58: i2l
      59: lstore_3
      60: aload_1
      61: lload_3
      62: invokestatic  #17                 // Method org/wso2/transport/http/netty/contractimpl/common/Util.setupContentLengthRequest:(Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;J)V
      65: aload_1
      66: aload_0
      67: getfield      #8                  // Field httpInboundResponseFuture:Lorg/wso2/transport/http/netty/contract/HttpResponseFuture;
      70: aload_0
      71: getfield      #6                  // Field httpVersion:Ljava/lang/String;
      74: aload_0
      75: getfield      #5                  // Field targetChannel:Lorg/wso2/transport/http/netty/contractimpl/sender/channel/TargetChannel;
      78: invokestatic  #18                 // Method org/wso2/transport/http/netty/contractimpl/common/states/StateUtil.writeRequestHeaders:(Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;Lorg/wso2/transport/http/netty/contract/HttpResponseFuture;Ljava/lang/String;Lorg/wso2/transport/http/netty/contractimpl/sender/channel/TargetChannel;)V
      81: aload_0
      82: aload_1
      83: aload_2
      84: iconst_1
      85: invokespecial #19                 // Method writeResponse:(Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;Lio/netty/handler/codec/http/HttpContent;Z)V
      88: goto          160
      91: aload_0
      92: getfield      #7                  // Field chunkConfig:Lorg/wso2/transport/http/netty/contract/config/ChunkConfig;
      95: getstatic     #12                 // Field org/wso2/transport/http/netty/contract/config/ChunkConfig.ALWAYS:Lorg/wso2/transport/http/netty/contract/config/ChunkConfig;
      98: if_acmpeq     111
     101: aload_0
     102: getfield      #7                  // Field chunkConfig:Lorg/wso2/transport/http/netty/contract/config/ChunkConfig;
     105: getstatic     #20                 // Field org/wso2/transport/http/netty/contract/config/ChunkConfig.AUTO:Lorg/wso2/transport/http/netty/contract/config/ChunkConfig;
     108: if_acmpne     153
     111: aload_0
     112: getfield      #6                  // Field httpVersion:Ljava/lang/String;
     115: aload_0
     116: getfield      #7                  // Field chunkConfig:Lorg/wso2/transport/http/netty/contract/config/ChunkConfig;
     119: invokestatic  #13                 // Method org/wso2/transport/http/netty/contractimpl/common/states/StateUtil.checkChunkingCompatibility:(Ljava/lang/String;Lorg/wso2/transport/http/netty/contract/config/ChunkConfig;)Z
     122: ifeq          153
     125: aload_1
     126: invokestatic  #14                 // Method org/wso2/transport/http/netty/contractimpl/common/Util.setupChunkedRequest:(Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;)V
     129: aload_1
     130: aload_0
     131: getfield      #8                  // Field httpInboundResponseFuture:Lorg/wso2/transport/http/netty/contract/HttpResponseFuture;
     134: aload_0
     135: getfield      #6                  // Field httpVersion:Ljava/lang/String;
     138: aload_0
     139: getfield      #5                  // Field targetChannel:Lorg/wso2/transport/http/netty/contractimpl/sender/channel/TargetChannel;
     142: invokestatic  #18                 // Method org/wso2/transport/http/netty/contractimpl/common/states/StateUtil.writeRequestHeaders:(Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;Lorg/wso2/transport/http/netty/contract/HttpResponseFuture;Ljava/lang/String;Lorg/wso2/transport/http/netty/contractimpl/sender/channel/TargetChannel;)V
     145: aload_0
     146: aload_1
     147: aload_2
     148: iconst_1
     149: invokespecial #19                 // Method writeResponse:(Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;Lio/netty/handler/codec/http/HttpContent;Z)V
     152: return
     153: aload_0
     154: aload_1
     155: aload_2
     156: iconst_0
     157: invokespecial #19                 // Method writeResponse:(Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;Lio/netty/handler/codec/http/HttpContent;Z)V
     160: return

  public void writeOutboundRequestEntity(org.wso2.transport.http.netty.message.HttpCarbonMessage, io.netty.handler.codec.http.HttpContent);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #21                 // Method writeOutboundRequestHeaders:(Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;Lio/netty/handler/codec/http/HttpContent;)V
       6: return

  public void readInboundResponseHeaders(org.wso2.transport.http.netty.contractimpl.sender.TargetHandler, io.netty.handler.codec.http.HttpResponse);
    Code:
       0: aload_1
       1: invokevirtual #22                 // Method org/wso2/transport/http/netty/contractimpl/sender/TargetHandler.getOutboundRequestMsg:()Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
       4: new           #23                 // class java/io/IOException
       7: dup
       8: ldc           #24                 // String Inbound response message already received
      10: invokespecial #25                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      13: invokevirtual #26                 // Method org/wso2/transport/http/netty/message/HttpCarbonMessage.setIoException:(Ljava/io/IOException;)V
      16: aload_0
      17: getfield      #4                  // Field messageStateContext:Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;
      20: new           #27                 // class org/wso2/transport/http/netty/contractimpl/sender/states/ReceivingHeaders
      23: dup
      24: aload_0
      25: getfield      #4                  // Field messageStateContext:Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;
      28: invokespecial #28                 // Method org/wso2/transport/http/netty/contractimpl/sender/states/ReceivingHeaders."<init>":(Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;)V
      31: invokevirtual #29                 // Method org/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext.setSenderState:(Lorg/wso2/transport/http/netty/contractimpl/sender/states/SenderState;)V
      34: aload_0
      35: getfield      #4                  // Field messageStateContext:Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;
      38: invokevirtual #30                 // Method org/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext.getSenderState:()Lorg/wso2/transport/http/netty/contractimpl/sender/states/SenderState;
      41: aload_1
      42: aload_2
      43: invokeinterface #31,  3           // InterfaceMethod org/wso2/transport/http/netty/contractimpl/sender/states/SenderState.readInboundResponseHeaders:(Lorg/wso2/transport/http/netty/contractimpl/sender/TargetHandler;Lio/netty/handler/codec/http/HttpResponse;)V
      48: return

  public void readInboundResponseEntityBody(io.netty.channel.ChannelHandlerContext, io.netty.handler.codec.http.HttpContent, org.wso2.transport.http.netty.message.HttpCarbonMessage);
    Code:
       0: getstatic     #32                 // Field LOG:Lorg/slf4j/Logger;
       3: ldc           #33                 // String readInboundResponseEntityBody {}
       5: ldc           #34                 // String is not a dependant action of this state
       7: invokeinterface #35,  3           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;)V
      12: return

  public void handleAbruptChannelClosure(org.wso2.transport.http.netty.contract.HttpResponseFuture);
    Code:
       0: getstatic     #32                 // Field LOG:Lorg/slf4j/Logger;
       3: ldc           #36                 // String Remote host closed the connection while writing outbound request headers
       5: invokeinterface #37,  2           // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;)V
      10: return

  public void handleIdleTimeoutConnectionClosure(org.wso2.transport.http.netty.contract.HttpResponseFuture, java.lang.String);
    Code:
       0: getstatic     #32                 // Field LOG:Lorg/slf4j/Logger;
       3: ldc           #38                 // String Error in HTTP client: {}
       5: ldc           #39                 // String Idle timeout triggered while writing outbound request headers
       7: invokeinterface #40,  3           // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;Ljava/lang/Object;)V
      12: return

  private java.lang.String getHttpMethod(org.wso2.transport.http.netty.message.HttpCarbonMessage);
    Code:
       0: aload_1
       1: ldc           #41                 // String HTTP_METHOD
       3: invokevirtual #42                 // Method org/wso2/transport/http/netty/message/HttpCarbonMessage.getProperty:(Ljava/lang/String;)Ljava/lang/Object;
       6: checkcast     #43                 // class java/lang/String
       9: astore_2
      10: aload_2
      11: ifnonnull     24
      14: new           #44                 // class java/lang/IllegalArgumentException
      17: dup
      18: ldc           #45                 // String Couldn\'t get the HTTP method from the outbound request
      20: invokespecial #46                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      23: athrow
      24: aload_2
      25: areturn

  private void writeResponse(org.wso2.transport.http.netty.message.HttpCarbonMessage, io.netty.handler.codec.http.HttpContent, boolean);
    Code:
       0: aload_0
       1: getfield      #4                  // Field messageStateContext:Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;
       4: new           #47                 // class org/wso2/transport/http/netty/contractimpl/sender/states/SendingEntityBody
       7: dup
       8: aload_0
       9: getfield      #4                  // Field messageStateContext:Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;
      12: aload_0
      13: getfield      #5                  // Field targetChannel:Lorg/wso2/transport/http/netty/contractimpl/sender/channel/TargetChannel;
      16: iload_3
      17: aload_0
      18: getfield      #8                  // Field httpInboundResponseFuture:Lorg/wso2/transport/http/netty/contract/HttpResponseFuture;
      21: invokespecial #48                 // Method org/wso2/transport/http/netty/contractimpl/sender/states/SendingEntityBody."<init>":(Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;Lorg/wso2/transport/http/netty/contractimpl/sender/channel/TargetChannel;ZLorg/wso2/transport/http/netty/contract/HttpResponseFuture;)V
      24: invokevirtual #29                 // Method org/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext.setSenderState:(Lorg/wso2/transport/http/netty/contractimpl/sender/states/SenderState;)V
      27: aload_0
      28: getfield      #4                  // Field messageStateContext:Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;
      31: invokevirtual #30                 // Method org/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext.getSenderState:()Lorg/wso2/transport/http/netty/contractimpl/sender/states/SenderState;
      34: aload_1
      35: aload_2
      36: invokeinterface #49,  3           // InterfaceMethod org/wso2/transport/http/netty/contractimpl/sender/states/SenderState.writeOutboundRequestEntity:(Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;Lio/netty/handler/codec/http/HttpContent;)V
      41: return

  static {};
    Code:
       0: ldc           #50                 // class org/wso2/transport/http/netty/contractimpl/sender/states/SendingHeaders
       2: invokestatic  #51                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #32                 // Field LOG:Lorg/slf4j/Logger;
       8: return
}
