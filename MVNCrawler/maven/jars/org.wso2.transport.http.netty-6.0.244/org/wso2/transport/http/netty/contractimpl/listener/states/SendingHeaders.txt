Compiled from "SendingHeaders.java"
public class org.wso2.transport.http.netty.contractimpl.listener.states.SendingHeaders implements org.wso2.transport.http.netty.contractimpl.listener.states.ListenerState {
  private static final org.slf4j.Logger LOG;

  private final org.wso2.transport.http.netty.contractimpl.HttpOutboundRespListener outboundResponseListener;

  boolean keepAlive;

  private final org.wso2.transport.http.netty.contractimpl.common.states.MessageStateContext messageStateContext;

  org.wso2.transport.http.netty.contract.config.ChunkConfig chunkConfig;

  org.wso2.transport.http.netty.contract.HttpResponseFuture outboundRespStatusFuture;

  public org.wso2.transport.http.netty.contractimpl.listener.states.SendingHeaders(org.wso2.transport.http.netty.contractimpl.HttpOutboundRespListener, org.wso2.transport.http.netty.contractimpl.common.states.MessageStateContext);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #4                  // Field outboundResponseListener:Lorg/wso2/transport/http/netty/contractimpl/HttpOutboundRespListener;
       9: aload_0
      10: aload_2
      11: putfield      #5                  // Field messageStateContext:Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;
      14: aload_0
      15: aload_1
      16: invokevirtual #6                  // Method org/wso2/transport/http/netty/contractimpl/HttpOutboundRespListener.getChunkConfig:()Lorg/wso2/transport/http/netty/contract/config/ChunkConfig;
      19: putfield      #7                  // Field chunkConfig:Lorg/wso2/transport/http/netty/contract/config/ChunkConfig;
      22: aload_0
      23: aload_1
      24: invokevirtual #8                  // Method org/wso2/transport/http/netty/contractimpl/HttpOutboundRespListener.isKeepAlive:()Z
      27: putfield      #9                  // Field keepAlive:Z
      30: return

  public void readInboundRequestHeaders(org.wso2.transport.http.netty.message.HttpCarbonMessage, io.netty.handler.codec.http.HttpRequest);
    Code:
       0: getstatic     #10                 // Field LOG:Lorg/slf4j/Logger;
       3: ldc           #11                 // String readInboundRequestHeaders {}
       5: ldc           #12                 // String is not a dependant action of this state
       7: invokeinterface #13,  3           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;)V
      12: return

  public void readInboundRequestBody(java.lang.Object) throws org.wso2.transport.http.netty.contract.ServerConnectorException;
    Code:
       0: getstatic     #10                 // Field LOG:Lorg/slf4j/Logger;
       3: ldc           #14                 // String readInboundRequestBody {}
       5: ldc           #12                 // String is not a dependant action of this state
       7: invokeinterface #13,  3           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;)V
      12: return

  public void writeOutboundResponseBody(org.wso2.transport.http.netty.contractimpl.HttpOutboundRespListener, org.wso2.transport.http.netty.message.HttpCarbonMessage, io.netty.handler.codec.http.HttpContent);
    Code:
       0: getstatic     #10                 // Field LOG:Lorg/slf4j/Logger;
       3: ldc           #15                 // String writeOutboundResponseBody {}
       5: ldc           #12                 // String is not a dependant action of this state
       7: invokeinterface #13,  3           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;)V
      12: return

  public void handleAbruptChannelClosure(org.wso2.transport.http.netty.contract.ServerConnectorFuture);
    Code:
       0: getstatic     #10                 // Field LOG:Lorg/slf4j/Logger;
       3: ldc           #16                 // String Remote client closed the connection while writing outbound response headers
       5: invokeinterface #17,  2           // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;)V
      10: return

  public io.netty.channel.ChannelFuture handleIdleTimeoutConnectionClosure(org.wso2.transport.http.netty.contract.ServerConnectorFuture, io.netty.channel.ChannelHandlerContext);
    Code:
       0: getstatic     #10                 // Field LOG:Lorg/slf4j/Logger;
       3: ldc           #18                 // String Idle timeout triggered while writing outbound response headers
       5: invokeinterface #17,  2           // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;)V
      10: aconst_null
      11: areturn

  public void writeOutboundResponseHeaders(org.wso2.transport.http.netty.message.HttpCarbonMessage, io.netty.handler.codec.http.HttpContent);
    Code:
       0: aload_1
       1: ldc           #19                 // String chunking_config
       3: invokevirtual #20                 // Method org/wso2/transport/http/netty/message/HttpCarbonMessage.getProperty:(Ljava/lang/String;)Ljava/lang/Object;
       6: ifnull        21
       9: aload_1
      10: ldc           #19                 // String chunking_config
      12: invokevirtual #20                 // Method org/wso2/transport/http/netty/message/HttpCarbonMessage.getProperty:(Ljava/lang/String;)Ljava/lang/Object;
      15: checkcast     #21                 // class org/wso2/transport/http/netty/contract/config/ChunkConfig
      18: goto          22
      21: aconst_null
      22: astore_3
      23: aload_3
      24: ifnull        32
      27: aload_0
      28: aload_3
      29: invokevirtual #22                 // Method setChunkConfig:(Lorg/wso2/transport/http/netty/contract/config/ChunkConfig;)V
      32: aload_0
      33: aload_0
      34: getfield      #4                  // Field outboundResponseListener:Lorg/wso2/transport/http/netty/contractimpl/HttpOutboundRespListener;
      37: invokevirtual #23                 // Method org/wso2/transport/http/netty/contractimpl/HttpOutboundRespListener.getInboundRequestMsg:()Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;
      40: invokevirtual #24                 // Method org/wso2/transport/http/netty/message/HttpCarbonMessage.getHttpOutboundRespStatusFuture:()Lorg/wso2/transport/http/netty/contract/HttpResponseFuture;
      43: putfield      #25                 // Field outboundRespStatusFuture:Lorg/wso2/transport/http/netty/contract/HttpResponseFuture;
      46: aload_0
      47: getfield      #4                  // Field outboundResponseListener:Lorg/wso2/transport/http/netty/contractimpl/HttpOutboundRespListener;
      50: invokevirtual #26                 // Method org/wso2/transport/http/netty/contractimpl/HttpOutboundRespListener.getRequestDataHolder:()Lorg/wso2/transport/http/netty/contractimpl/listener/RequestDataHolder;
      53: invokevirtual #27                 // Method org/wso2/transport/http/netty/contractimpl/listener/RequestDataHolder.getHttpVersion:()Ljava/lang/String;
      56: astore        4
      58: aload_2
      59: invokestatic  #28                 // Method org/wso2/transport/http/netty/contractimpl/common/Util.isLastHttpContent:(Lio/netty/handler/codec/http/HttpContent;)Z
      62: ifeq          108
      65: aload_0
      66: getfield      #7                  // Field chunkConfig:Lorg/wso2/transport/http/netty/contract/config/ChunkConfig;
      69: getstatic     #29                 // Field org/wso2/transport/http/netty/contract/config/ChunkConfig.ALWAYS:Lorg/wso2/transport/http/netty/contract/config/ChunkConfig;
      72: if_acmpne     161
      75: aload         4
      77: aload_0
      78: getfield      #7                  // Field chunkConfig:Lorg/wso2/transport/http/netty/contract/config/ChunkConfig;
      81: invokestatic  #30                 // Method org/wso2/transport/http/netty/contractimpl/common/states/StateUtil.checkChunkingCompatibility:(Ljava/lang/String;Lorg/wso2/transport/http/netty/contract/config/ChunkConfig;)Z
      84: ifeq          161
      87: aload_0
      88: aload_1
      89: aload_0
      90: getfield      #9                  // Field keepAlive:Z
      93: aload_0
      94: getfield      #25                 // Field outboundRespStatusFuture:Lorg/wso2/transport/http/netty/contract/HttpResponseFuture;
      97: invokespecial #31                 // Method writeHeaders:(Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;ZLorg/wso2/transport/http/netty/contract/HttpResponseFuture;)V
     100: aload_0
     101: aload_1
     102: aload_2
     103: iconst_1
     104: invokespecial #32                 // Method writeResponse:(Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;Lio/netty/handler/codec/http/HttpContent;Z)V
     107: return
     108: aload_0
     109: getfield      #7                  // Field chunkConfig:Lorg/wso2/transport/http/netty/contract/config/ChunkConfig;
     112: getstatic     #29                 // Field org/wso2/transport/http/netty/contract/config/ChunkConfig.ALWAYS:Lorg/wso2/transport/http/netty/contract/config/ChunkConfig;
     115: if_acmpeq     128
     118: aload_0
     119: getfield      #7                  // Field chunkConfig:Lorg/wso2/transport/http/netty/contract/config/ChunkConfig;
     122: getstatic     #33                 // Field org/wso2/transport/http/netty/contract/config/ChunkConfig.AUTO:Lorg/wso2/transport/http/netty/contract/config/ChunkConfig;
     125: if_acmpne     161
     128: aload         4
     130: aload_0
     131: getfield      #7                  // Field chunkConfig:Lorg/wso2/transport/http/netty/contract/config/ChunkConfig;
     134: invokestatic  #30                 // Method org/wso2/transport/http/netty/contractimpl/common/states/StateUtil.checkChunkingCompatibility:(Ljava/lang/String;Lorg/wso2/transport/http/netty/contract/config/ChunkConfig;)Z
     137: ifeq          161
     140: aload_0
     141: aload_1
     142: aload_0
     143: getfield      #9                  // Field keepAlive:Z
     146: aload_0
     147: getfield      #25                 // Field outboundRespStatusFuture:Lorg/wso2/transport/http/netty/contract/HttpResponseFuture;
     150: invokespecial #31                 // Method writeHeaders:(Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;ZLorg/wso2/transport/http/netty/contract/HttpResponseFuture;)V
     153: aload_0
     154: aload_1
     155: aload_2
     156: iconst_1
     157: invokespecial #32                 // Method writeResponse:(Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;Lio/netty/handler/codec/http/HttpContent;Z)V
     160: return
     161: aload_0
     162: aload_1
     163: aload_2
     164: iconst_0
     165: invokespecial #32                 // Method writeResponse:(Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;Lio/netty/handler/codec/http/HttpContent;Z)V
     168: return

  private void writeResponse(org.wso2.transport.http.netty.message.HttpCarbonMessage, io.netty.handler.codec.http.HttpContent, boolean);
    Code:
       0: aload_0
       1: getfield      #5                  // Field messageStateContext:Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;
       4: new           #34                 // class org/wso2/transport/http/netty/contractimpl/listener/states/SendingEntityBody
       7: dup
       8: aload_0
       9: getfield      #5                  // Field messageStateContext:Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;
      12: aload_0
      13: getfield      #25                 // Field outboundRespStatusFuture:Lorg/wso2/transport/http/netty/contract/HttpResponseFuture;
      16: iload_3
      17: invokespecial #35                 // Method org/wso2/transport/http/netty/contractimpl/listener/states/SendingEntityBody."<init>":(Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;Lorg/wso2/transport/http/netty/contract/HttpResponseFuture;Z)V
      20: invokevirtual #36                 // Method org/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext.setListenerState:(Lorg/wso2/transport/http/netty/contractimpl/listener/states/ListenerState;)V
      23: aload_0
      24: getfield      #5                  // Field messageStateContext:Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;
      27: invokevirtual #37                 // Method org/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext.getListenerState:()Lorg/wso2/transport/http/netty/contractimpl/listener/states/ListenerState;
      30: aload_0
      31: getfield      #4                  // Field outboundResponseListener:Lorg/wso2/transport/http/netty/contractimpl/HttpOutboundRespListener;
      34: aload_1
      35: aload_2
      36: invokeinterface #38,  4           // InterfaceMethod org/wso2/transport/http/netty/contractimpl/listener/states/ListenerState.writeOutboundResponseBody:(Lorg/wso2/transport/http/netty/contractimpl/HttpOutboundRespListener;Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;Lio/netty/handler/codec/http/HttpContent;)V
      41: return

  private void writeHeaders(org.wso2.transport.http.netty.message.HttpCarbonMessage, boolean, org.wso2.transport.http.netty.contract.HttpResponseFuture);
    Code:
       0: aload_1
       1: invokestatic  #39                 // Method org/wso2/transport/http/netty/contractimpl/common/Util.setupChunkedRequest:(Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;)V
       4: aload_0
       5: aload_1
       6: iload_2
       7: invokevirtual #40                 // Method writeResponseHeaders:(Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;Z)Lio/netty/channel/ChannelFuture;
      10: astore        4
      12: aload_3
      13: aload         4
      15: ldc           #41                 // String Remote client closed the connection before initiating outbound response
      17: invokestatic  #42                 // Method org/wso2/transport/http/netty/contractimpl/common/states/StateUtil.notifyIfHeaderWriteFailure:(Lorg/wso2/transport/http/netty/contract/HttpResponseFuture;Lio/netty/channel/ChannelFuture;Ljava/lang/String;)V
      20: return

  void setChunkConfig(org.wso2.transport.http.netty.contract.config.ChunkConfig);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #7                  // Field chunkConfig:Lorg/wso2/transport/http/netty/contract/config/ChunkConfig;
       5: return

  io.netty.channel.ChannelFuture writeResponseHeaders(org.wso2.transport.http.netty.message.HttpCarbonMessage, boolean);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #4                  // Field outboundResponseListener:Lorg/wso2/transport/http/netty/contractimpl/HttpOutboundRespListener;
       5: invokevirtual #26                 // Method org/wso2/transport/http/netty/contractimpl/HttpOutboundRespListener.getRequestDataHolder:()Lorg/wso2/transport/http/netty/contractimpl/listener/RequestDataHolder;
       8: invokevirtual #27                 // Method org/wso2/transport/http/netty/contractimpl/listener/RequestDataHolder.getHttpVersion:()Ljava/lang/String;
      11: aload_0
      12: getfield      #4                  // Field outboundResponseListener:Lorg/wso2/transport/http/netty/contractimpl/HttpOutboundRespListener;
      15: invokevirtual #43                 // Method org/wso2/transport/http/netty/contractimpl/HttpOutboundRespListener.getServerName:()Ljava/lang/String;
      18: iload_2
      19: invokestatic  #44                 // Method org/wso2/transport/http/netty/contractimpl/common/Util.createHttpResponse:(Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;Ljava/lang/String;Ljava/lang/String;Z)Lio/netty/handler/codec/http/HttpResponse;
      22: astore_3
      23: aload_0
      24: getfield      #4                  // Field outboundResponseListener:Lorg/wso2/transport/http/netty/contractimpl/HttpOutboundRespListener;
      27: invokevirtual #45                 // Method org/wso2/transport/http/netty/contractimpl/HttpOutboundRespListener.getSourceContext:()Lio/netty/channel/ChannelHandlerContext;
      30: aload_3
      31: invokeinterface #46,  2           // InterfaceMethod io/netty/channel/ChannelHandlerContext.write:(Ljava/lang/Object;)Lio/netty/channel/ChannelFuture;
      36: areturn

  static {};
    Code:
       0: ldc           #47                 // class org/wso2/transport/http/netty/contractimpl/listener/states/SendingHeaders
       2: invokestatic  #48                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #10                 // Field LOG:Lorg/slf4j/Logger;
       8: return
}
