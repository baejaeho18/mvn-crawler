Compiled from "HttpClientChannelInitializer.java"
class org.wso2.transport.http.netty.contractimpl.sender.HttpClientChannelInitializer$Http2PipelineConfiguratorForClient extends io.netty.handler.ssl.ApplicationProtocolNegotiationHandler {
  private org.wso2.transport.http.netty.contractimpl.sender.TargetHandler targetHandler;

  private org.wso2.transport.http.netty.contractimpl.sender.ConnectionAvailabilityFuture connectionAvailabilityFuture;

  final org.wso2.transport.http.netty.contractimpl.sender.HttpClientChannelInitializer this$0;

  public org.wso2.transport.http.netty.contractimpl.sender.HttpClientChannelInitializer$Http2PipelineConfiguratorForClient(org.wso2.transport.http.netty.contractimpl.sender.HttpClientChannelInitializer, org.wso2.transport.http.netty.contractimpl.sender.TargetHandler, org.wso2.transport.http.netty.contractimpl.sender.ConnectionAvailabilityFuture);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lorg/wso2/transport/http/netty/contractimpl/sender/HttpClientChannelInitializer;
       5: aload_0
       6: ldc           #3                  // String http/1.1
       8: invokespecial #4                  // Method io/netty/handler/ssl/ApplicationProtocolNegotiationHandler."<init>":(Ljava/lang/String;)V
      11: aload_0
      12: aload_2
      13: putfield      #5                  // Field targetHandler:Lorg/wso2/transport/http/netty/contractimpl/sender/TargetHandler;
      16: aload_0
      17: aload_3
      18: putfield      #6                  // Field connectionAvailabilityFuture:Lorg/wso2/transport/http/netty/contractimpl/sender/ConnectionAvailabilityFuture;
      21: return

  protected void configurePipeline(io.netty.channel.ChannelHandlerContext, java.lang.String);
    Code:
       0: ldc           #7                  // String h2
       2: aload_2
       3: invokevirtual #8                  // Method java/lang/String.equals:(Ljava/lang/Object;)Z
       6: ifeq          34
       9: aload_0
      10: getfield      #1                  // Field this$0:Lorg/wso2/transport/http/netty/contractimpl/sender/HttpClientChannelInitializer;
      13: aload_1
      14: invokeinterface #9,  1            // InterfaceMethod io/netty/channel/ChannelHandlerContext.pipeline:()Lio/netty/channel/ChannelPipeline;
      19: invokestatic  #10                 // Method org/wso2/transport/http/netty/contractimpl/sender/HttpClientChannelInitializer.access$000:(Lorg/wso2/transport/http/netty/contractimpl/sender/HttpClientChannelInitializer;Lio/netty/channel/ChannelPipeline;)V
      22: aload_0
      23: getfield      #6                  // Field connectionAvailabilityFuture:Lorg/wso2/transport/http/netty/contractimpl/sender/ConnectionAvailabilityFuture;
      26: ldc           #7                  // String h2
      28: invokevirtual #11                 // Method org/wso2/transport/http/netty/contractimpl/sender/ConnectionAvailabilityFuture.notifySuccess:(Ljava/lang/String;)V
      31: goto          99
      34: ldc           #3                  // String http/1.1
      36: aload_2
      37: invokevirtual #8                  // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      40: ifeq          72
      43: aload_0
      44: getfield      #1                  // Field this$0:Lorg/wso2/transport/http/netty/contractimpl/sender/HttpClientChannelInitializer;
      47: aload_1
      48: invokeinterface #9,  1            // InterfaceMethod io/netty/channel/ChannelHandlerContext.pipeline:()Lio/netty/channel/ChannelPipeline;
      53: aload_0
      54: getfield      #5                  // Field targetHandler:Lorg/wso2/transport/http/netty/contractimpl/sender/TargetHandler;
      57: invokevirtual #12                 // Method org/wso2/transport/http/netty/contractimpl/sender/HttpClientChannelInitializer.configureHttpPipeline:(Lio/netty/channel/ChannelPipeline;Lorg/wso2/transport/http/netty/contractimpl/sender/TargetHandler;)V
      60: aload_0
      61: getfield      #6                  // Field connectionAvailabilityFuture:Lorg/wso2/transport/http/netty/contractimpl/sender/ConnectionAvailabilityFuture;
      64: ldc           #14                 // String http
      66: invokevirtual #11                 // Method org/wso2/transport/http/netty/contractimpl/sender/ConnectionAvailabilityFuture.notifySuccess:(Ljava/lang/String;)V
      69: goto          99
      72: new           #15                 // class java/lang/IllegalStateException
      75: dup
      76: new           #16                 // class java/lang/StringBuilder
      79: dup
      80: invokespecial #17                 // Method java/lang/StringBuilder."<init>":()V
      83: ldc           #18                 // String Unknown protocol:
      85: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      88: aload_2
      89: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      92: invokevirtual #20                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      95: invokespecial #21                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      98: athrow
      99: return

  protected void handshakeFailure(io.netty.channel.ChannelHandlerContext, java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #6                  // Field connectionAvailabilityFuture:Lorg/wso2/transport/http/netty/contractimpl/sender/ConnectionAvailabilityFuture;
       4: aload_2
       5: invokevirtual #22                 // Method org/wso2/transport/http/netty/contractimpl/sender/ConnectionAvailabilityFuture.notifyFailure:(Ljava/lang/Throwable;)V
       8: aload_1
       9: invokeinterface #23,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.close:()Lio/netty/channel/ChannelFuture;
      14: pop
      15: return

  public void exceptionCaught(io.netty.channel.ChannelHandlerContext, java.lang.Throwable);
    Code:
       0: aload_1
       1: ifnull        36
       4: aload_1
       5: invokeinterface #24,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.channel:()Lio/netty/channel/Channel;
      10: invokeinterface #25,  1           // InterfaceMethod io/netty/channel/Channel.isActive:()Z
      15: ifeq          36
      18: aload_1
      19: getstatic     #26                 // Field io/netty/buffer/Unpooled.EMPTY_BUFFER:Lio/netty/buffer/ByteBuf;
      22: invokeinterface #27,  2           // InterfaceMethod io/netty/channel/ChannelHandlerContext.writeAndFlush:(Ljava/lang/Object;)Lio/netty/channel/ChannelFuture;
      27: getstatic     #28                 // Field io/netty/channel/ChannelFutureListener.CLOSE:Lio/netty/channel/ChannelFutureListener;
      30: invokeinterface #29,  2           // InterfaceMethod io/netty/channel/ChannelFuture.addListener:(Lio/netty/util/concurrent/GenericFutureListener;)Lio/netty/channel/ChannelFuture;
      35: pop
      36: return
}
