Compiled from "SendingEntityBody.java"
public class org.wso2.transport.http.netty.contractimpl.sender.states.http2.SendingEntityBody implements org.wso2.transport.http.netty.contractimpl.sender.states.http2.SenderState {
  private static final org.slf4j.Logger LOG;

  private final org.wso2.transport.http.netty.contractimpl.sender.http2.Http2TargetHandler http2TargetHandler;

  private final org.wso2.transport.http.netty.contractimpl.common.states.Http2MessageStateContext http2MessageStateContext;

  private final org.wso2.transport.http.netty.contractimpl.sender.http2.OutboundMsgHolder outboundMsgHolder;

  private final io.netty.handler.codec.http2.Http2ConnectionEncoder encoder;

  private final org.wso2.transport.http.netty.contractimpl.sender.http2.Http2ClientChannel http2ClientChannel;

  private final int streamId;

  private final org.wso2.transport.http.netty.contractimpl.sender.http2.Http2TargetHandler$Http2RequestWriter http2RequestWriter;

  public org.wso2.transport.http.netty.contractimpl.sender.states.http2.SendingEntityBody(org.wso2.transport.http.netty.contractimpl.sender.http2.Http2TargetHandler, org.wso2.transport.http.netty.contractimpl.sender.http2.Http2TargetHandler$Http2RequestWriter);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field http2TargetHandler:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2TargetHandler;
       9: aload_0
      10: aload_2
      11: invokevirtual #3                  // Method org/wso2/transport/http/netty/contractimpl/sender/http2/Http2TargetHandler$Http2RequestWriter.getHttp2MessageStateContext:()Lorg/wso2/transport/http/netty/contractimpl/common/states/Http2MessageStateContext;
      14: putfield      #4                  // Field http2MessageStateContext:Lorg/wso2/transport/http/netty/contractimpl/common/states/Http2MessageStateContext;
      17: aload_0
      18: aload_2
      19: invokevirtual #5                  // Method org/wso2/transport/http/netty/contractimpl/sender/http2/Http2TargetHandler$Http2RequestWriter.getOutboundMsgHolder:()Lorg/wso2/transport/http/netty/contractimpl/sender/http2/OutboundMsgHolder;
      22: putfield      #6                  // Field outboundMsgHolder:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/OutboundMsgHolder;
      25: aload_0
      26: aload_1
      27: invokevirtual #7                  // Method org/wso2/transport/http/netty/contractimpl/sender/http2/Http2TargetHandler.getEncoder:()Lio/netty/handler/codec/http2/Http2ConnectionEncoder;
      30: putfield      #8                  // Field encoder:Lio/netty/handler/codec/http2/Http2ConnectionEncoder;
      33: aload_0
      34: aload_1
      35: invokevirtual #9                  // Method org/wso2/transport/http/netty/contractimpl/sender/http2/Http2TargetHandler.getHttp2ClientChannel:()Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel;
      38: putfield      #10                 // Field http2ClientChannel:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel;
      41: aload_0
      42: aload_2
      43: invokevirtual #11                 // Method org/wso2/transport/http/netty/contractimpl/sender/http2/Http2TargetHandler$Http2RequestWriter.getStreamId:()I
      46: putfield      #12                 // Field streamId:I
      49: aload_0
      50: aload_2
      51: putfield      #13                 // Field http2RequestWriter:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2TargetHandler$Http2RequestWriter;
      54: return

  public void writeOutboundRequestHeaders(io.netty.channel.ChannelHandlerContext, io.netty.handler.codec.http.HttpContent);
    Code:
       0: getstatic     #14                 // Field LOG:Lorg/slf4j/Logger;
       3: ldc           #15                 // String writeOutboundRequestHeaders is not a dependant action of this state
       5: invokeinterface #16,  2           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;)V
      10: return

  public void writeOutboundRequestBody(io.netty.channel.ChannelHandlerContext, io.netty.handler.codec.http.HttpContent, org.wso2.transport.http.netty.contractimpl.common.states.Http2MessageStateContext) throws io.netty.handler.codec.http2.Http2Exception;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #17                 // Method writeContent:(Lio/netty/channel/ChannelHandlerContext;Lio/netty/handler/codec/http/HttpContent;)V
       6: return

  public void readInboundResponseHeaders(io.netty.channel.ChannelHandlerContext, org.wso2.transport.http.netty.message.Http2HeadersFrame, org.wso2.transport.http.netty.contractimpl.sender.http2.OutboundMsgHolder, boolean, org.wso2.transport.http.netty.contractimpl.common.states.Http2MessageStateContext);
    Code:
       0: aload         5
       2: new           #18                 // class org/wso2/transport/http/netty/contractimpl/sender/states/http2/ReceivingHeaders
       5: dup
       6: aload_0
       7: getfield      #2                  // Field http2TargetHandler:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2TargetHandler;
      10: aload_0
      11: getfield      #13                 // Field http2RequestWriter:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2TargetHandler$Http2RequestWriter;
      14: invokespecial #19                 // Method org/wso2/transport/http/netty/contractimpl/sender/states/http2/ReceivingHeaders."<init>":(Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2TargetHandler;Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2TargetHandler$Http2RequestWriter;)V
      17: invokevirtual #20                 // Method org/wso2/transport/http/netty/contractimpl/common/states/Http2MessageStateContext.setSenderState:(Lorg/wso2/transport/http/netty/contractimpl/sender/states/http2/SenderState;)V
      20: aload         5
      22: invokevirtual #21                 // Method org/wso2/transport/http/netty/contractimpl/common/states/Http2MessageStateContext.getSenderState:()Lorg/wso2/transport/http/netty/contractimpl/sender/states/http2/SenderState;
      25: aload_1
      26: aload_2
      27: aload_3
      28: iload         4
      30: aload         5
      32: invokeinterface #22,  6           // InterfaceMethod org/wso2/transport/http/netty/contractimpl/sender/states/http2/SenderState.readInboundResponseHeaders:(Lio/netty/channel/ChannelHandlerContext;Lorg/wso2/transport/http/netty/message/Http2HeadersFrame;Lorg/wso2/transport/http/netty/contractimpl/sender/http2/OutboundMsgHolder;ZLorg/wso2/transport/http/netty/contractimpl/common/states/Http2MessageStateContext;)V
      37: return

  public void readInboundResponseBody(io.netty.channel.ChannelHandlerContext, org.wso2.transport.http.netty.message.Http2DataFrame, org.wso2.transport.http.netty.contractimpl.sender.http2.OutboundMsgHolder, boolean, org.wso2.transport.http.netty.contractimpl.common.states.Http2MessageStateContext);
    Code:
       0: aload         5
       2: new           #23                 // class org/wso2/transport/http/netty/contractimpl/sender/states/http2/ReceivingEntityBody
       5: dup
       6: aload_0
       7: getfield      #2                  // Field http2TargetHandler:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2TargetHandler;
      10: aload_0
      11: getfield      #13                 // Field http2RequestWriter:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2TargetHandler$Http2RequestWriter;
      14: invokespecial #24                 // Method org/wso2/transport/http/netty/contractimpl/sender/states/http2/ReceivingEntityBody."<init>":(Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2TargetHandler;Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2TargetHandler$Http2RequestWriter;)V
      17: invokevirtual #20                 // Method org/wso2/transport/http/netty/contractimpl/common/states/Http2MessageStateContext.setSenderState:(Lorg/wso2/transport/http/netty/contractimpl/sender/states/http2/SenderState;)V
      20: aload         5
      22: invokevirtual #21                 // Method org/wso2/transport/http/netty/contractimpl/common/states/Http2MessageStateContext.getSenderState:()Lorg/wso2/transport/http/netty/contractimpl/sender/states/http2/SenderState;
      25: aload_1
      26: aload_2
      27: aload_3
      28: iload         4
      30: aload         5
      32: invokeinterface #25,  6           // InterfaceMethod org/wso2/transport/http/netty/contractimpl/sender/states/http2/SenderState.readInboundResponseBody:(Lio/netty/channel/ChannelHandlerContext;Lorg/wso2/transport/http/netty/message/Http2DataFrame;Lorg/wso2/transport/http/netty/contractimpl/sender/http2/OutboundMsgHolder;ZLorg/wso2/transport/http/netty/contractimpl/common/states/Http2MessageStateContext;)V
      37: return

  public void readInboundPromise(org.wso2.transport.http.netty.message.Http2PushPromise, org.wso2.transport.http.netty.contractimpl.sender.http2.OutboundMsgHolder);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #10                 // Field http2ClientChannel:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel;
       5: aload_2
       6: invokestatic  #26                 // Method org/wso2/transport/http/netty/contractimpl/common/states/Http2StateUtil.onPushPromiseRead:(Lorg/wso2/transport/http/netty/message/Http2PushPromise;Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel;Lorg/wso2/transport/http/netty/contractimpl/sender/http2/OutboundMsgHolder;)V
       9: return

  private void writeContent(io.netty.channel.ChannelHandlerContext, io.netty.handler.codec.http.HttpContent) throws io.netty.handler.codec.http2.Http2Exception;
    Code:
       0: iconst_1
       1: istore_3
       2: iconst_0
       3: istore        5
       5: getstatic     #27                 // Field io/netty/handler/codec/http/EmptyHttpHeaders.INSTANCE:Lio/netty/handler/codec/http/EmptyHttpHeaders;
       8: astore        6
      10: getstatic     #28                 // Field io/netty/handler/codec/http2/EmptyHttp2Headers.INSTANCE:Lio/netty/handler/codec/http2/EmptyHttp2Headers;
      13: astore        7
      15: aload_2
      16: instanceof    #29                 // class io/netty/handler/codec/http/LastHttpContent
      19: ifeq          48
      22: iconst_1
      23: istore        5
      25: aload_2
      26: checkcast     #29                 // class io/netty/handler/codec/http/LastHttpContent
      29: astore        8
      31: aload         8
      33: invokeinterface #30,  1           // InterfaceMethod io/netty/handler/codec/http/LastHttpContent.trailingHeaders:()Lio/netty/handler/codec/http/HttpHeaders;
      38: astore        6
      40: aload         6
      42: iconst_1
      43: invokestatic  #31                 // Method io/netty/handler/codec/http2/HttpConversionUtil.toHttp2Headers:(Lio/netty/handler/codec/http/HttpHeaders;Z)Lio/netty/handler/codec/http2/Http2Headers;
      46: astore        7
      48: aload_2
      49: invokeinterface #32,  1           // InterfaceMethod io/netty/handler/codec/http/HttpContent.content:()Lio/netty/buffer/ByteBuf;
      54: astore        8
      56: iload         5
      58: ifeq          73
      61: aload         6
      63: invokevirtual #33                 // Method io/netty/handler/codec/http/HttpHeaders.isEmpty:()Z
      66: ifeq          73
      69: iconst_1
      70: goto          74
      73: iconst_0
      74: istore        4
      76: iconst_0
      77: istore_3
      78: aload_0
      79: getfield      #10                 // Field http2ClientChannel:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel;
      82: invokevirtual #34                 // Method org/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel.getDataEventListeners:()Ljava/util/List;
      85: invokeinterface #35,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      90: astore        9
      92: aload         9
      94: invokeinterface #36,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      99: ifeq          146
     102: aload         9
     104: invokeinterface #37,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     109: checkcast     #38                 // class org/wso2/transport/http/netty/contractimpl/sender/http2/Http2DataEventListener
     112: astore        10
     114: aload         10
     116: aload_1
     117: aload_0
     118: getfield      #12                 // Field streamId:I
     121: aload         8
     123: iload         4
     125: invokeinterface #39,  5           // InterfaceMethod org/wso2/transport/http/netty/contractimpl/sender/http2/Http2DataEventListener.onDataWrite:(Lio/netty/channel/ChannelHandlerContext;ILio/netty/buffer/ByteBuf;Z)Z
     130: ifne          143
     133: iload_3
     134: ifeq          142
     137: aload_2
     138: invokestatic  #40                 // Method io/netty/util/ReferenceCountUtil.release:(Ljava/lang/Object;)Z
     141: pop
     142: return
     143: goto          92
     146: aload_0
     147: getfield      #8                  // Field encoder:Lio/netty/handler/codec/http2/Http2ConnectionEncoder;
     150: aload_1
     151: aload_0
     152: getfield      #12                 // Field streamId:I
     155: aload         8
     157: iconst_0
     158: iload         4
     160: aload_1
     161: invokeinterface #41,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.newPromise:()Lio/netty/channel/ChannelPromise;
     166: invokeinterface #42,  7           // InterfaceMethod io/netty/handler/codec/http2/Http2ConnectionEncoder.writeData:(Lio/netty/channel/ChannelHandlerContext;ILio/netty/buffer/ByteBuf;IZLio/netty/channel/ChannelPromise;)Lio/netty/channel/ChannelFuture;
     171: pop
     172: aload_0
     173: getfield      #8                  // Field encoder:Lio/netty/handler/codec/http2/Http2ConnectionEncoder;
     176: invokeinterface #43,  1           // InterfaceMethod io/netty/handler/codec/http2/Http2ConnectionEncoder.flowController:()Lio/netty/handler/codec/http2/Http2RemoteFlowController;
     181: invokeinterface #44,  1           // InterfaceMethod io/netty/handler/codec/http2/Http2RemoteFlowController.writePendingBytes:()V
     186: aload_1
     187: invokeinterface #45,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.flush:()Lio/netty/channel/ChannelHandlerContext;
     192: pop
     193: aload         6
     195: invokevirtual #33                 // Method io/netty/handler/codec/http/HttpHeaders.isEmpty:()Z
     198: ifne          226
     201: aload_1
     202: aload_0
     203: getfield      #6                  // Field outboundMsgHolder:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/OutboundMsgHolder;
     206: aload_0
     207: getfield      #10                 // Field http2ClientChannel:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel;
     210: aload_0
     211: getfield      #8                  // Field encoder:Lio/netty/handler/codec/http2/Http2ConnectionEncoder;
     214: aload_0
     215: getfield      #12                 // Field streamId:I
     218: aload         6
     220: aload         7
     222: iconst_1
     223: invokestatic  #46                 // Method org/wso2/transport/http/netty/contractimpl/common/states/Http2StateUtil.writeHttp2Headers:(Lio/netty/channel/ChannelHandlerContext;Lorg/wso2/transport/http/netty/contractimpl/sender/http2/OutboundMsgHolder;Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel;Lio/netty/handler/codec/http2/Http2ConnectionEncoder;ILio/netty/handler/codec/http/HttpHeaders;Lio/netty/handler/codec/http2/Http2Headers;Z)V
     226: iload         4
     228: ifeq          261
     231: aload_0
     232: getfield      #6                  // Field outboundMsgHolder:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/OutboundMsgHolder;
     235: iconst_1
     236: invokevirtual #47                 // Method org/wso2/transport/http/netty/contractimpl/sender/http2/OutboundMsgHolder.setRequestWritten:(Z)V
     239: aload_0
     240: getfield      #4                  // Field http2MessageStateContext:Lorg/wso2/transport/http/netty/contractimpl/common/states/Http2MessageStateContext;
     243: new           #48                 // class org/wso2/transport/http/netty/contractimpl/sender/states/http2/RequestCompleted
     246: dup
     247: aload_0
     248: getfield      #2                  // Field http2TargetHandler:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2TargetHandler;
     251: aload_0
     252: getfield      #13                 // Field http2RequestWriter:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2TargetHandler$Http2RequestWriter;
     255: invokespecial #49                 // Method org/wso2/transport/http/netty/contractimpl/sender/states/http2/RequestCompleted."<init>":(Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2TargetHandler;Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2TargetHandler$Http2RequestWriter;)V
     258: invokevirtual #20                 // Method org/wso2/transport/http/netty/contractimpl/common/states/Http2MessageStateContext.setSenderState:(Lorg/wso2/transport/http/netty/contractimpl/sender/states/http2/SenderState;)V
     261: iload_3
     262: ifeq          287
     265: aload_2
     266: invokestatic  #40                 // Method io/netty/util/ReferenceCountUtil.release:(Ljava/lang/Object;)Z
     269: pop
     270: goto          287
     273: astore        11
     275: iload_3
     276: ifeq          284
     279: aload_2
     280: invokestatic  #40                 // Method io/netty/util/ReferenceCountUtil.release:(Ljava/lang/Object;)Z
     283: pop
     284: aload         11
     286: athrow
     287: return
    Exception table:
       from    to  target type
           2   133   273   any
         143   261   273   any
         273   275   273   any

  static {};
    Code:
       0: ldc           #50                 // class org/wso2/transport/http/netty/contractimpl/sender/states/http2/SendingEntityBody
       2: invokestatic  #51                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #14                 // Field LOG:Lorg/slf4j/Logger;
       8: return
}
