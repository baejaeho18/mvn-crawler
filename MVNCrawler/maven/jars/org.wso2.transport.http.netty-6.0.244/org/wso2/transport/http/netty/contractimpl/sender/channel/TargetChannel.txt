Compiled from "TargetChannel.java"
public class org.wso2.transport.http.netty.contractimpl.sender.channel.TargetChannel {
  private static final org.slf4j.Logger LOG;

  private io.netty.channel.Channel channel;

  private org.wso2.transport.http.netty.contractimpl.sender.TargetHandler targetHandler;

  private org.wso2.transport.http.netty.contractimpl.sender.HttpClientChannelInitializer httpClientChannelInitializer;

  private org.wso2.transport.http.netty.contractimpl.common.HttpRoute httpRoute;

  private org.wso2.transport.http.netty.contractimpl.listener.SourceHandler correlatedSource;

  private io.netty.channel.ChannelFuture channelFuture;

  private org.wso2.transport.http.netty.contractimpl.sender.channel.pool.ConnectionManager connectionManager;

  private boolean requestHeaderWritten;

  private java.lang.String httpVersion;

  private org.wso2.transport.http.netty.contract.config.ChunkConfig chunkConfig;

  private org.wso2.transport.http.netty.internal.HandlerExecutor handlerExecutor;

  private org.wso2.transport.http.netty.contractimpl.sender.http2.Http2ClientChannel http2ClientChannel;

  private final org.wso2.transport.http.netty.contractimpl.sender.ConnectionAvailabilityFuture connectionAvailabilityFuture;

  private org.wso2.transport.http.netty.contract.HttpResponseFuture httpInboundResponseFuture;

  public org.wso2.transport.http.netty.contractimpl.sender.channel.TargetChannel(org.wso2.transport.http.netty.contractimpl.sender.HttpClientChannelInitializer, io.netty.channel.ChannelFuture, org.wso2.transport.http.netty.contractimpl.common.HttpRoute, org.wso2.transport.http.netty.contractimpl.sender.ConnectionAvailabilityFuture);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field requestHeaderWritten:Z
       9: aload_0
      10: aload_1
      11: putfield      #3                  // Field httpClientChannelInitializer:Lorg/wso2/transport/http/netty/contractimpl/sender/HttpClientChannelInitializer;
      14: aload_0
      15: aload_2
      16: putfield      #4                  // Field channelFuture:Lio/netty/channel/ChannelFuture;
      19: aload_0
      20: invokestatic  #5                  // Method org/wso2/transport/http/netty/internal/HttpTransportContextHolder.getInstance:()Lorg/wso2/transport/http/netty/internal/HttpTransportContextHolder;
      23: invokevirtual #6                  // Method org/wso2/transport/http/netty/internal/HttpTransportContextHolder.getHandlerExecutor:()Lorg/wso2/transport/http/netty/internal/HandlerExecutor;
      26: putfield      #7                  // Field handlerExecutor:Lorg/wso2/transport/http/netty/internal/HandlerExecutor;
      29: aload_0
      30: aload_3
      31: putfield      #8                  // Field httpRoute:Lorg/wso2/transport/http/netty/contractimpl/common/HttpRoute;
      34: aload_1
      35: ifnull        64
      38: aload_0
      39: new           #9                  // class org/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel
      42: dup
      43: aload_1
      44: invokevirtual #10                 // Method org/wso2/transport/http/netty/contractimpl/sender/HttpClientChannelInitializer.getHttp2ConnectionManager:()Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ConnectionManager;
      47: aload_1
      48: invokevirtual #11                 // Method org/wso2/transport/http/netty/contractimpl/sender/HttpClientChannelInitializer.getConnection:()Lio/netty/handler/codec/http2/Http2Connection;
      51: aload_3
      52: aload_2
      53: invokeinterface #12,  1           // InterfaceMethod io/netty/channel/ChannelFuture.channel:()Lio/netty/channel/Channel;
      58: invokespecial #13                 // Method org/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel."<init>":(Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ConnectionManager;Lio/netty/handler/codec/http2/Http2Connection;Lorg/wso2/transport/http/netty/contractimpl/common/HttpRoute;Lio/netty/channel/Channel;)V
      61: putfield      #14                 // Field http2ClientChannel:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel;
      64: aload_0
      65: aload         4
      67: putfield      #15                 // Field connectionAvailabilityFuture:Lorg/wso2/transport/http/netty/contractimpl/sender/ConnectionAvailabilityFuture;
      70: return

  public org.wso2.transport.http.netty.contractimpl.sender.ConnectionAvailabilityFuture getConnenctionReadyFuture();
    Code:
       0: aload_0
       1: getfield      #15                 // Field connectionAvailabilityFuture:Lorg/wso2/transport/http/netty/contractimpl/sender/ConnectionAvailabilityFuture;
       4: areturn

  public io.netty.channel.Channel getChannel();
    Code:
       0: aload_0
       1: getfield      #16                 // Field channel:Lio/netty/channel/Channel;
       4: areturn

  public org.wso2.transport.http.netty.contractimpl.sender.channel.TargetChannel setChannel(io.netty.channel.Channel);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #16                 // Field channel:Lio/netty/channel/Channel;
       5: aload_0
       6: areturn

  private org.wso2.transport.http.netty.contractimpl.sender.TargetHandler getTargetHandler();
    Code:
       0: aload_0
       1: getfield      #17                 // Field targetHandler:Lorg/wso2/transport/http/netty/contractimpl/sender/TargetHandler;
       4: areturn

  private void setTargetHandler(org.wso2.transport.http.netty.contractimpl.sender.TargetHandler);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #17                 // Field targetHandler:Lorg/wso2/transport/http/netty/contractimpl/sender/TargetHandler;
       5: return

  private org.wso2.transport.http.netty.contractimpl.sender.HttpClientChannelInitializer getHttpClientChannelInitializer();
    Code:
       0: aload_0
       1: getfield      #3                  // Field httpClientChannelInitializer:Lorg/wso2/transport/http/netty/contractimpl/sender/HttpClientChannelInitializer;
       4: areturn

  public org.wso2.transport.http.netty.contractimpl.common.HttpRoute getHttpRoute();
    Code:
       0: aload_0
       1: getfield      #8                  // Field httpRoute:Lorg/wso2/transport/http/netty/contractimpl/common/HttpRoute;
       4: areturn

  public void setHttpRoute(org.wso2.transport.http.netty.contractimpl.common.HttpRoute);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #8                  // Field httpRoute:Lorg/wso2/transport/http/netty/contractimpl/common/HttpRoute;
       5: return

  public org.wso2.transport.http.netty.contractimpl.listener.SourceHandler getCorrelatedSource();
    Code:
       0: aload_0
       1: getfield      #18                 // Field correlatedSource:Lorg/wso2/transport/http/netty/contractimpl/listener/SourceHandler;
       4: areturn

  public void setCorrelatedSource(org.wso2.transport.http.netty.contractimpl.listener.SourceHandler);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #18                 // Field correlatedSource:Lorg/wso2/transport/http/netty/contractimpl/listener/SourceHandler;
       5: return

  public boolean isRequestHeaderWritten();
    Code:
       0: aload_0
       1: getfield      #2                  // Field requestHeaderWritten:Z
       4: ireturn

  public void setRequestHeaderWritten(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #2                  // Field requestHeaderWritten:Z
       5: return

  public void setHttpVersion(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #19                 // Field httpVersion:Ljava/lang/String;
       5: return

  public void setChunkConfig(org.wso2.transport.http.netty.contract.config.ChunkConfig);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #20                 // Field chunkConfig:Lorg/wso2/transport/http/netty/contract/config/ChunkConfig;
       5: return

  public void configTargetHandler(org.wso2.transport.http.netty.message.HttpCarbonMessage, org.wso2.transport.http.netty.contract.HttpResponseFuture);
    Code:
       0: aload_0
       1: aload_0
       2: invokespecial #21                 // Method getHttpClientChannelInitializer:()Lorg/wso2/transport/http/netty/contractimpl/sender/HttpClientChannelInitializer;
       5: invokevirtual #22                 // Method org/wso2/transport/http/netty/contractimpl/sender/HttpClientChannelInitializer.getTargetHandler:()Lorg/wso2/transport/http/netty/contractimpl/sender/TargetHandler;
       8: invokespecial #23                 // Method setTargetHandler:(Lorg/wso2/transport/http/netty/contractimpl/sender/TargetHandler;)V
      11: aload_0
      12: invokespecial #24                 // Method getTargetHandler:()Lorg/wso2/transport/http/netty/contractimpl/sender/TargetHandler;
      15: astore_3
      16: aload_3
      17: aload_2
      18: invokevirtual #25                 // Method org/wso2/transport/http/netty/contractimpl/sender/TargetHandler.setHttpResponseFuture:(Lorg/wso2/transport/http/netty/contract/HttpResponseFuture;)V
      21: aload_3
      22: aload_1
      23: invokevirtual #26                 // Method org/wso2/transport/http/netty/contractimpl/sender/TargetHandler.setOutboundRequestMsg:(Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;)V
      26: aload_3
      27: aload_0
      28: getfield      #27                 // Field connectionManager:Lorg/wso2/transport/http/netty/contractimpl/sender/channel/pool/ConnectionManager;
      31: invokevirtual #28                 // Method org/wso2/transport/http/netty/contractimpl/sender/TargetHandler.setConnectionManager:(Lorg/wso2/transport/http/netty/contractimpl/sender/channel/pool/ConnectionManager;)V
      34: aload_3
      35: aload_0
      36: invokevirtual #29                 // Method org/wso2/transport/http/netty/contractimpl/sender/TargetHandler.setTargetChannel:(Lorg/wso2/transport/http/netty/contractimpl/sender/channel/TargetChannel;)V
      39: aload_0
      40: aload_2
      41: putfield      #30                 // Field httpInboundResponseFuture:Lorg/wso2/transport/http/netty/contract/HttpResponseFuture;
      44: return

  public void setEndPointTimeout(int);
    Code:
       0: aload_0
       1: invokevirtual #31                 // Method getChannel:()Lio/netty/channel/Channel;
       4: invokeinterface #32,  1           // InterfaceMethod io/netty/channel/Channel.pipeline:()Lio/netty/channel/ChannelPipeline;
       9: ldc           #34                 // String targetHandler
      11: ldc           #35                 // String idleStateHandler
      13: new           #36                 // class io/netty/handler/timeout/IdleStateHandler
      16: dup
      17: lconst_0
      18: lconst_0
      19: iload_1
      20: i2l
      21: getstatic     #37                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      24: invokespecial #38                 // Method io/netty/handler/timeout/IdleStateHandler."<init>":(JJJLjava/util/concurrent/TimeUnit;)V
      27: invokeinterface #39,  4           // InterfaceMethod io/netty/channel/ChannelPipeline.addBefore:(Ljava/lang/String;Ljava/lang/String;Lio/netty/channel/ChannelHandler;)Lio/netty/channel/ChannelPipeline;
      32: pop
      33: aload_0
      34: getfield      #14                 // Field http2ClientChannel:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel;
      37: iload_1
      38: invokevirtual #40                 // Method org/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel.setSocketIdleTimeout:(I)V
      41: return

  public void setCorrelationIdForLogging();
    Code:
       0: aload_0
       1: invokevirtual #31                 // Method getChannel:()Lio/netty/channel/Channel;
       4: invokeinterface #32,  1           // InterfaceMethod io/netty/channel/Channel.pipeline:()Lio/netty/channel/ChannelPipeline;
       9: astore_1
      10: aload_0
      11: invokevirtual #41                 // Method getCorrelatedSource:()Lorg/wso2/transport/http/netty/contractimpl/listener/SourceHandler;
      14: astore_2
      15: aload_2
      16: ifnull        65
      19: aload_1
      20: ldc           #42                 // String http-trace-logger
      22: invokeinterface #43,  2           // InterfaceMethod io/netty/channel/ChannelPipeline.get:(Ljava/lang/String;)Lio/netty/channel/ChannelHandler;
      27: ifnull        65
      30: aload_1
      31: ldc           #42                 // String http-trace-logger
      33: invokeinterface #43,  2           // InterfaceMethod io/netty/channel/ChannelPipeline.get:(Ljava/lang/String;)Lio/netty/channel/ChannelHandler;
      38: checkcast     #44                 // class org/wso2/transport/http/netty/contractimpl/listener/HttpTraceLoggingHandler
      41: astore_3
      42: aload_3
      43: aload_2
      44: invokevirtual #45                 // Method org/wso2/transport/http/netty/contractimpl/listener/SourceHandler.getInboundChannelContext:()Lio/netty/channel/ChannelHandlerContext;
      47: invokeinterface #46,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.channel:()Lio/netty/channel/Channel;
      52: invokeinterface #47,  1           // InterfaceMethod io/netty/channel/Channel.id:()Lio/netty/channel/ChannelId;
      57: invokeinterface #48,  1           // InterfaceMethod io/netty/channel/ChannelId.asShortText:()Ljava/lang/String;
      62: invokevirtual #49                 // Method org/wso2/transport/http/netty/contractimpl/listener/HttpTraceLoggingHandler.setCorrelatedSourceId:(Ljava/lang/String;)V
      65: return

  public void setConnectionManager(org.wso2.transport.http.netty.contractimpl.sender.channel.pool.ConnectionManager);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #27                 // Field connectionManager:Lorg/wso2/transport/http/netty/contractimpl/sender/channel/pool/ConnectionManager;
       5: return

  public io.netty.channel.ChannelFuture getChannelFuture();
    Code:
       0: aload_0
       1: getfield      #4                  // Field channelFuture:Lio/netty/channel/ChannelFuture;
       4: areturn

  public org.wso2.transport.http.netty.contractimpl.sender.http2.Http2ClientChannel getHttp2ClientChannel();
    Code:
       0: aload_0
       1: getfield      #14                 // Field http2ClientChannel:Lorg/wso2/transport/http/netty/contractimpl/sender/http2/Http2ClientChannel;
       4: areturn

  public void writeContent(org.wso2.transport.http.netty.message.HttpCarbonMessage);
    Code:
       0: aload_0
       1: getfield      #17                 // Field targetHandler:Lorg/wso2/transport/http/netty/contractimpl/sender/TargetHandler;
       4: invokevirtual #50                 // Method org/wso2/transport/http/netty/contractimpl/sender/TargetHandler.getContext:()Lio/netty/channel/ChannelHandlerContext;
       7: invokestatic  #51                 // Method org/wso2/transport/http/netty/contractimpl/common/Util.getBackPressureHandler:(Lio/netty/channel/ChannelHandlerContext;)Lorg/wso2/transport/http/netty/contractimpl/common/BackPressureHandler;
      10: astore_2
      11: aload_1
      12: invokevirtual #52                 // Method org/wso2/transport/http/netty/message/HttpCarbonMessage.isPassthrough:()Z
      15: aload_2
      16: aload_1
      17: invokevirtual #53                 // Method org/wso2/transport/http/netty/message/HttpCarbonMessage.getSourceContext:()Lio/netty/channel/ChannelHandlerContext;
      20: invokestatic  #54                 // Method org/wso2/transport/http/netty/contractimpl/common/Util.setBackPressureListener:(ZLorg/wso2/transport/http/netty/contractimpl/common/BackPressureHandler;Lio/netty/channel/ChannelHandlerContext;)V
      23: aload_0
      24: getfield      #7                  // Field handlerExecutor:Lorg/wso2/transport/http/netty/internal/HandlerExecutor;
      27: ifnull        38
      30: aload_0
      31: getfield      #7                  // Field handlerExecutor:Lorg/wso2/transport/http/netty/internal/HandlerExecutor;
      34: aload_1
      35: invokevirtual #55                 // Method org/wso2/transport/http/netty/internal/HandlerExecutor.executeAtTargetRequestReceiving:(Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;)V
      38: aload_0
      39: invokespecial #56                 // Method resetTargetChannelState:()V
      42: aload_1
      43: invokevirtual #57                 // Method org/wso2/transport/http/netty/message/HttpCarbonMessage.getMessageStateContext:()Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;
      46: astore_3
      47: aload_3
      48: ifnonnull     64
      51: new           #58                 // class org/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext
      54: dup
      55: invokespecial #59                 // Method org/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext."<init>":()V
      58: astore_3
      59: aload_1
      60: aload_3
      61: invokevirtual #60                 // Method org/wso2/transport/http/netty/message/HttpCarbonMessage.setMessageStateContext:(Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;)V
      64: aload_1
      65: invokevirtual #57                 // Method org/wso2/transport/http/netty/message/HttpCarbonMessage.getMessageStateContext:()Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;
      68: new           #61                 // class org/wso2/transport/http/netty/contractimpl/sender/states/SendingHeaders
      71: dup
      72: aload_3
      73: aload_0
      74: aload_0
      75: getfield      #19                 // Field httpVersion:Ljava/lang/String;
      78: aload_0
      79: getfield      #20                 // Field chunkConfig:Lorg/wso2/transport/http/netty/contract/config/ChunkConfig;
      82: aload_0
      83: getfield      #30                 // Field httpInboundResponseFuture:Lorg/wso2/transport/http/netty/contract/HttpResponseFuture;
      86: invokespecial #62                 // Method org/wso2/transport/http/netty/contractimpl/sender/states/SendingHeaders."<init>":(Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;Lorg/wso2/transport/http/netty/contractimpl/sender/channel/TargetChannel;Ljava/lang/String;Lorg/wso2/transport/http/netty/contract/config/ChunkConfig;Lorg/wso2/transport/http/netty/contract/HttpResponseFuture;)V
      89: invokevirtual #63                 // Method org/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext.setSenderState:(Lorg/wso2/transport/http/netty/contractimpl/sender/states/SenderState;)V
      92: aload_1
      93: invokevirtual #64                 // Method org/wso2/transport/http/netty/message/HttpCarbonMessage.getHttpContentAsync:()Lorg/wso2/transport/http/netty/message/MessageFuture;
      96: aload_0
      97: aload_2
      98: aload_1
      99: invokedynamic #65,  0             // InvokeDynamic #0:onMessage:(Lorg/wso2/transport/http/netty/contractimpl/sender/channel/TargetChannel;Lorg/wso2/transport/http/netty/contractimpl/common/BackPressureHandler;Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;)Lorg/wso2/transport/http/netty/message/MessageListener;
     104: invokevirtual #66                 // Method org/wso2/transport/http/netty/message/MessageFuture.setMessageListener:(Lorg/wso2/transport/http/netty/message/MessageListener;)V
     107: return

  private void writeOutboundRequest(org.wso2.transport.http.netty.message.HttpCarbonMessage, io.netty.handler.codec.http.HttpContent) throws java.lang.Exception;
    Code:
       0: aload_1
       1: invokevirtual #57                 // Method org/wso2/transport/http/netty/message/HttpCarbonMessage.getMessageStateContext:()Lorg/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext;
       4: invokevirtual #67                 // Method org/wso2/transport/http/netty/contractimpl/common/states/MessageStateContext.getSenderState:()Lorg/wso2/transport/http/netty/contractimpl/sender/states/SenderState;
       7: aload_1
       8: aload_2
       9: invokeinterface #68,  3           // InterfaceMethod org/wso2/transport/http/netty/contractimpl/sender/states/SenderState.writeOutboundRequestEntity:(Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;Lio/netty/handler/codec/http/HttpContent;)V
      14: return

  private void resetTargetChannelState();
    Code:
       0: aload_0
       1: iconst_0
       2: invokevirtual #69                 // Method setRequestHeaderWritten:(Z)V
       5: return

  public void setForwardedExtension(org.wso2.transport.http.netty.contract.config.ForwardedExtensionConfig, org.wso2.transport.http.netty.message.HttpCarbonMessage);
    Code:
       0: aload_1
       1: getstatic     #70                 // Field org/wso2/transport/http/netty/contract/config/ForwardedExtensionConfig.DISABLE:Lorg/wso2/transport/http/netty/contract/config/ForwardedExtensionConfig;
       4: if_acmpne     8
       7: return
       8: aload_0
       9: invokevirtual #31                 // Method getChannel:()Lio/netty/channel/Channel;
      12: invokeinterface #71,  1           // InterfaceMethod io/netty/channel/Channel.localAddress:()Ljava/net/SocketAddress;
      17: checkcast     #72                 // class java/net/InetSocketAddress
      20: invokevirtual #73                 // Method java/net/InetSocketAddress.getAddress:()Ljava/net/InetAddress;
      23: invokevirtual #74                 // Method java/net/InetAddress.getHostAddress:()Ljava/lang/String;
      26: astore_3
      27: new           #75                 // class org/wso2/transport/http/netty/contractimpl/sender/ForwardedHeaderUpdater
      30: dup
      31: aload_2
      32: aload_3
      33: invokespecial #76                 // Method org/wso2/transport/http/netty/contractimpl/sender/ForwardedHeaderUpdater."<init>":(Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;Ljava/lang/String;)V
      36: astore        4
      38: aload         4
      40: invokevirtual #77                 // Method org/wso2/transport/http/netty/contractimpl/sender/ForwardedHeaderUpdater.isForwardedHeaderRequired:()Z
      43: ifeq          52
      46: aload         4
      48: invokevirtual #78                 // Method org/wso2/transport/http/netty/contractimpl/sender/ForwardedHeaderUpdater.setForwardedHeader:()V
      51: return
      52: aload         4
      54: invokevirtual #79                 // Method org/wso2/transport/http/netty/contractimpl/sender/ForwardedHeaderUpdater.isXForwardedHeaderRequired:()Z
      57: ifeq          79
      60: aload_1
      61: getstatic     #80                 // Field org/wso2/transport/http/netty/contract/config/ForwardedExtensionConfig.ENABLE:Lorg/wso2/transport/http/netty/contract/config/ForwardedExtensionConfig;
      64: if_acmpne     73
      67: aload         4
      69: invokevirtual #81                 // Method org/wso2/transport/http/netty/contractimpl/sender/ForwardedHeaderUpdater.setDefactoForwardedHeaders:()V
      72: return
      73: aload         4
      75: invokevirtual #82                 // Method org/wso2/transport/http/netty/contractimpl/sender/ForwardedHeaderUpdater.transformAndSetForwardedHeader:()V
      78: return
      79: getstatic     #83                 // Field LOG:Lorg/slf4j/Logger;
      82: ldc           #84                 // String Both Forwarded and X-Forwarded-- headers are present. Hence updating only the forwarded header
      84: invokeinterface #85,  2           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;)V
      89: aload         4
      91: invokevirtual #78                 // Method org/wso2/transport/http/netty/contractimpl/sender/ForwardedHeaderUpdater.setForwardedHeader:()V
      94: return

  public java.lang.String getHttpVersion();
    Code:
       0: aload_0
       1: getfield      #19                 // Field httpVersion:Ljava/lang/String;
       4: areturn

  private void lambda$writeContent$8(org.wso2.transport.http.netty.contractimpl.common.BackPressureHandler, org.wso2.transport.http.netty.message.HttpCarbonMessage, io.netty.handler.codec.http.HttpContent);
    Code:
       0: aload_0
       1: getfield      #17                 // Field targetHandler:Lorg/wso2/transport/http/netty/contractimpl/sender/TargetHandler;
       4: invokevirtual #50                 // Method org/wso2/transport/http/netty/contractimpl/sender/TargetHandler.getContext:()Lio/netty/channel/ChannelHandlerContext;
       7: aload_1
       8: invokestatic  #86                 // Method org/wso2/transport/http/netty/contractimpl/common/Util.checkUnWritabilityAndNotify:(Lio/netty/channel/ChannelHandlerContext;Lorg/wso2/transport/http/netty/contractimpl/common/BackPressureHandler;)V
      11: aload_0
      12: getfield      #16                 // Field channel:Lio/netty/channel/Channel;
      15: invokeinterface #87,  1           // InterfaceMethod io/netty/channel/Channel.eventLoop:()Lio/netty/channel/EventLoop;
      20: aload_0
      21: aload_2
      22: aload_3
      23: invokedynamic #88,  0             // InvokeDynamic #1:run:(Lorg/wso2/transport/http/netty/contractimpl/sender/channel/TargetChannel;Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;Lio/netty/handler/codec/http/HttpContent;)Ljava/lang/Runnable;
      28: invokeinterface #89,  2           // InterfaceMethod io/netty/channel/EventLoop.execute:(Ljava/lang/Runnable;)V
      33: return

  private void lambda$null$7(org.wso2.transport.http.netty.message.HttpCarbonMessage, io.netty.handler.codec.http.HttpContent);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #90                 // Method writeOutboundRequest:(Lorg/wso2/transport/http/netty/message/HttpCarbonMessage;Lio/netty/handler/codec/http/HttpContent;)V
       6: goto          64
       9: astore_3
      10: new           #92                 // class java/lang/StringBuilder
      13: dup
      14: invokespecial #93                 // Method java/lang/StringBuilder."<init>":()V
      17: ldc           #94                 // String Failed to send the request :
      19: invokevirtual #95                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      22: aload_3
      23: invokevirtual #96                 // Method java/lang/Exception.getMessage:()Ljava/lang/String;
      26: getstatic     #97                 // Field java/util/Locale.ENGLISH:Ljava/util/Locale;
      29: invokevirtual #98                 // Method java/lang/String.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;
      32: invokevirtual #95                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      35: invokevirtual #99                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      38: astore        4
      40: getstatic     #83                 // Field LOG:Lorg/slf4j/Logger;
      43: aload         4
      45: aload_3
      46: invokeinterface #100,  3          // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;Ljava/lang/Throwable;)V
      51: aload_0
      52: getfield      #17                 // Field targetHandler:Lorg/wso2/transport/http/netty/contractimpl/sender/TargetHandler;
      55: invokevirtual #101                // Method org/wso2/transport/http/netty/contractimpl/sender/TargetHandler.getHttpResponseFuture:()Lorg/wso2/transport/http/netty/contract/HttpResponseFuture;
      58: aload_3
      59: invokeinterface #102,  2          // InterfaceMethod org/wso2/transport/http/netty/contract/HttpResponseFuture.notifyHttpListener:(Ljava/lang/Throwable;)V
      64: return
    Exception table:
       from    to  target type
           0     6     9   Class java/lang/Exception

  static {};
    Code:
       0: ldc           #103                // class org/wso2/transport/http/netty/contractimpl/sender/channel/TargetChannel
       2: invokestatic  #104                // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #83                 // Field LOG:Lorg/slf4j/Logger;
       8: return
}
