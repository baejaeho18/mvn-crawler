Compiled from "DarkroomProcessingLine.java"
public class net.serenitybdd.core.photography.DarkroomProcessingLine implements java.lang.Runnable {
  private final org.slf4j.Logger LOGGER;

  boolean openForBusiness;

  private final java.util.List<? extends net.serenitybdd.core.photography.PhotoFilter> processors;

  private final java.util.List<net.serenitybdd.core.photography.ScreenshotNegative> queue;

  public void terminate();
    Code:
       0: aload_0
       1: iconst_0
       2: putfield      #1                  // Field openForBusiness:Z
       5: aload_0
       6: getfield      #2                  // Field queue:Ljava/util/List;
       9: dup
      10: astore_1
      11: monitorenter
      12: aload_0
      13: getfield      #2                  // Field queue:Ljava/util/List;
      16: invokevirtual #3                  // Method java/lang/Object.notifyAll:()V
      19: aload_1
      20: monitorexit
      21: goto          29
      24: astore_2
      25: aload_1
      26: monitorexit
      27: aload_2
      28: athrow
      29: return
    Exception table:
       from    to  target type
          12    21    24   any
          24    27    24   any

  net.serenitybdd.core.photography.DarkroomProcessingLine(java.util.List<? extends net.serenitybdd.core.photography.PhotoFilter>);
    Code:
       0: aload_0
       1: invokespecial #4                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_0
       6: invokevirtual #5                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
       9: invokestatic  #6                  // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
      12: putfield      #7                  // Field LOGGER:Lorg/slf4j/Logger;
      15: aload_0
      16: aload_1
      17: putfield      #8                  // Field processors:Ljava/util/List;
      20: aload_0
      21: new           #9                  // class java/util/LinkedList
      24: dup
      25: invokespecial #10                 // Method java/util/LinkedList."<init>":()V
      28: invokestatic  #11                 // Method java/util/Collections.synchronizedList:(Ljava/util/List;)Ljava/util/List;
      31: putfield      #2                  // Field queue:Ljava/util/List;
      34: aload_0
      35: iconst_1
      36: putfield      #1                  // Field openForBusiness:Z
      39: return

  public net.serenitybdd.core.photography.ScreenshotReceipt addToProcessingQueue(net.serenitybdd.core.photography.ScreenshotNegative);
    Code:
       0: aload_0
       1: getfield      #2                  // Field queue:Ljava/util/List;
       4: aload_1
       5: invokeinterface #12,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      10: pop
      11: aload_0
      12: getfield      #2                  // Field queue:Ljava/util/List;
      15: dup
      16: astore_2
      17: monitorenter
      18: aload_0
      19: getfield      #2                  // Field queue:Ljava/util/List;
      22: invokevirtual #3                  // Method java/lang/Object.notifyAll:()V
      25: aload_2
      26: monitorexit
      27: goto          35
      30: astore_3
      31: aload_2
      32: monitorexit
      33: aload_3
      34: athrow
      35: aload_0
      36: aload_1
      37: invokespecial #13                 // Method recieptFor:(Lnet/serenitybdd/core/photography/ScreenshotNegative;)Lnet/serenitybdd/core/photography/ScreenshotReceipt;
      40: areturn
    Exception table:
       from    to  target type
          18    27    30   any
          30    33    30   any

  private net.serenitybdd.core.photography.ScreenshotReceipt recieptFor(net.serenitybdd.core.photography.ScreenshotNegative);
    Code:
       0: new           #14                 // class net/serenitybdd/core/photography/ScreenshotReceipt
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #15                 // Method screenshotPathFor:(Lnet/serenitybdd/core/photography/ScreenshotNegative;)Ljava/nio/file/Path;
       9: invokespecial #16                 // Method net/serenitybdd/core/photography/ScreenshotReceipt."<init>":(Ljava/nio/file/Path;)V
      12: areturn

  public void run();
    Code:
       0: aload_0
       1: getfield      #7                  // Field LOGGER:Lorg/slf4j/Logger;
       4: ldc           #17                 // String Darkroom processing line starting up
       6: invokeinterface #18,  2           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;)V
      11: aload_0
      12: getfield      #1                  // Field openForBusiness:Z
      15: ifeq          67
      18: aload_0
      19: getfield      #2                  // Field queue:Ljava/util/List;
      22: dup
      23: astore_1
      24: monitorenter
      25: aload_0
      26: invokespecial #19                 // Method processNegative:()V
      29: aload_0
      30: getfield      #1                  // Field openForBusiness:Z
      33: ifeq          46
      36: aload_0
      37: getfield      #2                  // Field queue:Ljava/util/List;
      40: invokevirtual #20                 // Method java/lang/Object.wait:()V
      43: goto          50
      46: aload_0
      47: invokespecial #21                 // Method finishProcessingNegatives:()V
      50: goto          54
      53: astore_2
      54: aload_1
      55: monitorexit
      56: goto          64
      59: astore_3
      60: aload_1
      61: monitorexit
      62: aload_3
      63: athrow
      64: goto          11
      67: aload_0
      68: getfield      #7                  // Field LOGGER:Lorg/slf4j/Logger;
      71: ldc           #23                 // String Darkroom processing line shutting down
      73: invokeinterface #18,  2           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;)V
      78: return
    Exception table:
       from    to  target type
          29    50    53   Class java/lang/InterruptedException
          25    56    59   any
          59    62    59   any

  private void finishProcessingNegatives();
    Code:
       0: aload_0
       1: invokespecial #19                 // Method processNegative:()V
       4: return

  private void processNegative();
    Code:
       0: aload_0
       1: getfield      #2                  // Field queue:Ljava/util/List;
       4: invokeinterface #24,  1           // InterfaceMethod java/util/List.isEmpty:()Z
       9: ifne          38
      12: aload_0
      13: getfield      #2                  // Field queue:Ljava/util/List;
      16: iconst_0
      17: invokeinterface #25,  2           // InterfaceMethod java/util/List.remove:(I)Ljava/lang/Object;
      22: checkcast     #26                 // class net/serenitybdd/core/photography/ScreenshotNegative
      25: astore_1
      26: aload_1
      27: ifnull        35
      30: aload_0
      31: aload_1
      32: invokevirtual #27                 // Method process:(Lnet/serenitybdd/core/photography/ScreenshotNegative;)V
      35: goto          0
      38: return

  public void process(net.serenitybdd.core.photography.ScreenshotNegative);
    Code:
       0: aload_0
       1: invokespecial #28                 // Method ensureThatTheDarkroomIsStillOpen:()V
       4: aload_0
       5: aload_1
       6: invokespecial #15                 // Method screenshotPathFor:(Lnet/serenitybdd/core/photography/ScreenshotNegative;)Ljava/nio/file/Path;
       9: astore_2
      10: aload_2
      11: iconst_0
      12: anewarray     #29                 // class java/nio/file/LinkOption
      15: invokestatic  #30                 // Method java/nio/file/Files.exists:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z
      18: ifne          26
      21: aload_0
      22: aload_1
      23: invokespecial #31                 // Method saveProcessedScreenshot:(Lnet/serenitybdd/core/photography/ScreenshotNegative;)V
      26: aload_0
      27: aload_1
      28: invokespecial #32                 // Method deleteTemporaryScreenshotFrom:(Lnet/serenitybdd/core/photography/ScreenshotNegative;)V
      31: return

  private void deleteTemporaryScreenshotFrom(net.serenitybdd.core.photography.ScreenshotNegative);
    Code:
       0: aload_1
       1: invokevirtual #33                 // Method net/serenitybdd/core/photography/ScreenshotNegative.getTemporaryPath:()Ljava/nio/file/Path;
       4: invokestatic  #34                 // Method java/nio/file/Files.deleteIfExists:(Ljava/nio/file/Path;)Z
       7: pop
       8: goto          24
      11: astore_2
      12: aload_0
      13: getfield      #7                  // Field LOGGER:Lorg/slf4j/Logger;
      16: ldc           #36                 // String Failed to delete temporary screenshot
      18: aload_2
      19: invokeinterface #37,  3           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Throwable;)V
      24: return
    Exception table:
       from    to  target type
           0     8    11   Class java/io/IOException

  private void saveProcessedScreenshot(net.serenitybdd.core.photography.ScreenshotNegative);
    Code:
       0: aload_0
       1: getfield      #7                  // Field LOGGER:Lorg/slf4j/Logger;
       4: ldc           #38                 // String Processing screenshot image in {}
       6: aload_1
       7: invokevirtual #33                 // Method net/serenitybdd/core/photography/ScreenshotNegative.getTemporaryPath:()Ljava/nio/file/Path;
      10: invokeinterface #39,  3           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Object;)V
      15: aload_0
      16: getfield      #8                  // Field processors:Ljava/util/List;
      19: invokeinterface #40,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      24: astore_2
      25: aload_2
      26: invokeinterface #41,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      31: ifeq          55
      34: aload_2
      35: invokeinterface #42,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      40: checkcast     #43                 // class net/serenitybdd/core/photography/PhotoFilter
      43: astore_3
      44: aload_3
      45: aload_1
      46: invokeinterface #44,  2           // InterfaceMethod net/serenitybdd/core/photography/PhotoFilter.process:(Lnet/serenitybdd/core/photography/ScreenshotNegative;)Lnet/serenitybdd/core/photography/ScreenshotNegative;
      51: astore_1
      52: goto          25
      55: aload_0
      56: getfield      #7                  // Field LOGGER:Lorg/slf4j/Logger;
      59: new           #45                 // class java/lang/StringBuilder
      62: dup
      63: invokespecial #46                 // Method java/lang/StringBuilder."<init>":()V
      66: ldc           #47                 // String Saving screenshot to
      68: invokevirtual #48                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      71: aload_1
      72: invokevirtual #49                 // Method net/serenitybdd/core/photography/ScreenshotNegative.getScreenshotPath:()Ljava/nio/file/Path;
      75: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      78: invokevirtual #51                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      81: invokeinterface #18,  2           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;)V
      86: aload_1
      87: invokevirtual #49                 // Method net/serenitybdd/core/photography/ScreenshotNegative.getScreenshotPath:()Ljava/nio/file/Path;
      90: iconst_0
      91: anewarray     #29                 // class java/nio/file/LinkOption
      94: invokestatic  #30                 // Method java/nio/file/Files.exists:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z
      97: ifne          130
     100: aload_0
     101: aload_1
     102: invokevirtual #49                 // Method net/serenitybdd/core/photography/ScreenshotNegative.getScreenshotPath:()Ljava/nio/file/Path;
     105: invokespecial #52                 // Method ensureParentDirectoryExistsFor:(Ljava/nio/file/Path;)V
     108: aload_1
     109: invokevirtual #33                 // Method net/serenitybdd/core/photography/ScreenshotNegative.getTemporaryPath:()Ljava/nio/file/Path;
     112: aload_1
     113: invokevirtual #49                 // Method net/serenitybdd/core/photography/ScreenshotNegative.getScreenshotPath:()Ljava/nio/file/Path;
     116: iconst_1
     117: anewarray     #53                 // class java/nio/file/CopyOption
     120: dup
     121: iconst_0
     122: getstatic     #54                 // Field java/nio/file/StandardCopyOption.REPLACE_EXISTING:Ljava/nio/file/StandardCopyOption;
     125: aastore
     126: invokestatic  #55                 // Method java/nio/file/Files.copy:(Ljava/nio/file/Path;Ljava/nio/file/Path;[Ljava/nio/file/CopyOption;)Ljava/nio/file/Path;
     129: pop
     130: goto          150
     133: astore_2
     134: goto          150
     137: astore_2
     138: aload_0
     139: getfield      #7                  // Field LOGGER:Lorg/slf4j/Logger;
     142: ldc           #57                 // String Failed to save screenshot
     144: aload_2
     145: invokeinterface #37,  3           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Throwable;)V
     150: return
    Exception table:
       from    to  target type
          55   130   133   Class java/nio/file/FileAlreadyExistsException
          55   130   137   Class java/io/IOException

  private void ensureParentDirectoryExistsFor(java.nio.file.Path) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokeinterface #58,  1           // InterfaceMethod java/nio/file/Path.getParent:()Ljava/nio/file/Path;
       6: ifnull        23
       9: aload_1
      10: invokeinterface #58,  1           // InterfaceMethod java/nio/file/Path.getParent:()Ljava/nio/file/Path;
      15: iconst_0
      16: anewarray     #59                 // class java/nio/file/attribute/FileAttribute
      19: invokestatic  #60                 // Method java/nio/file/Files.createDirectories:(Ljava/nio/file/Path;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/file/Path;
      22: pop
      23: return

  private java.nio.file.Path screenshotPathFor(net.serenitybdd.core.photography.ScreenshotNegative);
    Code:
       0: aload_1
       1: astore_2
       2: aload_0
       3: getfield      #8                  // Field processors:Ljava/util/List;
       6: invokeinterface #40,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      11: astore_3
      12: aload_3
      13: invokeinterface #41,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      18: ifeq          48
      21: aload_3
      22: invokeinterface #42,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      27: checkcast     #43                 // class net/serenitybdd/core/photography/PhotoFilter
      30: astore        4
      32: aload_2
      33: aload         4
      35: aload_2
      36: invokeinterface #61,  2           // InterfaceMethod net/serenitybdd/core/photography/PhotoFilter.amendedScreenshotPath:(Lnet/serenitybdd/core/photography/ScreenshotNegative;)Ljava/nio/file/Path;
      41: invokevirtual #62                 // Method net/serenitybdd/core/photography/ScreenshotNegative.withScreenshotPath:(Ljava/nio/file/Path;)Lnet/serenitybdd/core/photography/ScreenshotNegative;
      44: astore_2
      45: goto          12
      48: aload_2
      49: invokevirtual #49                 // Method net/serenitybdd/core/photography/ScreenshotNegative.getScreenshotPath:()Ljava/nio/file/Path;
      52: areturn

  private void ensureThatTheDarkroomIsStillOpen();
    Code:
       0: aload_0
       1: getfield      #1                  // Field openForBusiness:Z
       4: ldc           #63                 // String The darkroom is closed and cannot accept any more negatives
       6: invokestatic  #64                 // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/Object;)V
       9: return
}
