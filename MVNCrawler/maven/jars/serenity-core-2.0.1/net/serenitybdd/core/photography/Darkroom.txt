Compiled from "Darkroom.java"
public class net.serenitybdd.core.photography.Darkroom {
  private static final org.slf4j.Logger LOGGER;

  private static final java.util.List<net.serenitybdd.core.photography.PhotoFilter> DEFAULT_PROCESSERS;

  private net.serenitybdd.core.photography.DarkroomProcessingLine processingLine;

  private java.lang.Thread screenshotThread;

  private final net.thucydides.core.util.EnvironmentVariables environmentVariables;

  public void isOpenForBusiness();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method theDarkroomIsClosed:()Z
       4: ifeq          21
       7: getstatic     #2                  // Field LOGGER:Lorg/slf4j/Logger;
      10: ldc           #3                  // String Opening darkroom
      12: invokeinterface #4,  2            // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;)V
      17: aload_0
      18: invokevirtual #5                  // Method start:()V
      21: return

  public net.serenitybdd.core.photography.Darkroom();
    Code:
       0: aload_0
       1: invokespecial #6                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: invokestatic  #7                  // Method net/thucydides/core/guice/Injectors.getInjector:()Lcom/google/inject/Injector;
       8: ldc           #8                  // class net/thucydides/core/util/EnvironmentVariables
      10: invokeinterface #9,  2            // InterfaceMethod com/google/inject/Injector.getInstance:(Ljava/lang/Class;)Ljava/lang/Object;
      15: checkcast     #8                  // class net/thucydides/core/util/EnvironmentVariables
      18: putfield      #10                 // Field environmentVariables:Lnet/thucydides/core/util/EnvironmentVariables;
      21: return

  private boolean theDarkroomIsClosed();
    Code:
       0: aload_0
       1: invokespecial #11                 // Method theDarkroomIsOpen:()Z
       4: ifne          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  private java.util.List<? extends net.serenitybdd.core.photography.PhotoFilter> getProcessors();
    Code:
       0: new           #12                 // class java/util/ArrayList
       3: dup
       4: invokespecial #13                 // Method java/util/ArrayList."<init>":()V
       7: astore_1
       8: getstatic     #14                 // Field net/thucydides/core/ThucydidesSystemProperty.SERENITY_COMPRESS_SCREENSHOTS:Lnet/thucydides/core/ThucydidesSystemProperty;
      11: aload_0
      12: getfield      #10                 // Field environmentVariables:Lnet/thucydides/core/util/EnvironmentVariables;
      15: iconst_0
      16: invokestatic  #15                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      19: invokevirtual #16                 // Method net/thucydides/core/ThucydidesSystemProperty.booleanFrom:(Lnet/thucydides/core/util/EnvironmentVariables;Ljava/lang/Boolean;)Ljava/lang/Boolean;
      22: invokevirtual #17                 // Method java/lang/Boolean.booleanValue:()Z
      25: ifeq          42
      28: aload_1
      29: new           #18                 // class net/serenitybdd/core/photography/resizing/Resizer
      32: dup
      33: invokespecial #19                 // Method net/serenitybdd/core/photography/resizing/Resizer."<init>":()V
      36: invokeinterface #20,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      41: pop
      42: aload_1
      43: getstatic     #21                 // Field DEFAULT_PROCESSERS:Ljava/util/List;
      46: invokeinterface #22,  2           // InterfaceMethod java/util/List.addAll:(Ljava/util/Collection;)Z
      51: pop
      52: aload_1
      53: areturn

  private boolean theDarkroomIsOpen();
    Code:
       0: aload_0
       1: getfield      #23                 // Field processingLine:Lnet/serenitybdd/core/photography/DarkroomProcessingLine;
       4: ifnull        21
       7: aload_0
       8: getfield      #23                 // Field processingLine:Lnet/serenitybdd/core/photography/DarkroomProcessingLine;
      11: getfield      #24                 // Field net/serenitybdd/core/photography/DarkroomProcessingLine.openForBusiness:Z
      14: ifeq          21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: ireturn

  public void waitUntilClose();
    Code:
       0: getstatic     #2                  // Field LOGGER:Lorg/slf4j/Logger;
       3: ldc           #25                 // String Closing darkroom
       5: invokeinterface #4,  2            // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;)V
      10: aload_0
      11: invokespecial #11                 // Method theDarkroomIsOpen:()Z
      14: ifeq          21
      17: aload_0
      18: invokevirtual #26                 // Method terminate:()V
      21: return

  public void start();
    Code:
       0: aload_0
       1: new           #27                 // class net/serenitybdd/core/photography/DarkroomProcessingLine
       4: dup
       5: aload_0
       6: invokespecial #28                 // Method getProcessors:()Ljava/util/List;
       9: invokespecial #29                 // Method net/serenitybdd/core/photography/DarkroomProcessingLine."<init>":(Ljava/util/List;)V
      12: putfield      #23                 // Field processingLine:Lnet/serenitybdd/core/photography/DarkroomProcessingLine;
      15: aload_0
      16: new           #30                 // class java/lang/Thread
      19: dup
      20: aload_0
      21: getfield      #23                 // Field processingLine:Lnet/serenitybdd/core/photography/DarkroomProcessingLine;
      24: ldc           #31                 // String Darkroom Processing Line
      26: invokespecial #32                 // Method java/lang/Thread."<init>":(Ljava/lang/Runnable;Ljava/lang/String;)V
      29: putfield      #33                 // Field screenshotThread:Ljava/lang/Thread;
      32: aload_0
      33: getfield      #33                 // Field screenshotThread:Ljava/lang/Thread;
      36: iconst_1
      37: invokevirtual #34                 // Method java/lang/Thread.setDaemon:(Z)V
      40: aload_0
      41: getfield      #33                 // Field screenshotThread:Ljava/lang/Thread;
      44: invokevirtual #35                 // Method java/lang/Thread.start:()V
      47: return

  public void terminate();
    Code:
       0: aload_0
       1: getfield      #23                 // Field processingLine:Lnet/serenitybdd/core/photography/DarkroomProcessingLine;
       4: ifnull        11
       7: aload_0
       8: invokespecial #36                 // Method shutdownProcessingLine:()V
      11: invokestatic  #37                 // Method net/serenitybdd/core/photography/DarkroomFileSystem.close:()V
      14: return

  public net.serenitybdd.core.photography.ScreenshotReceipt submitForProcessing(net.serenitybdd.core.photography.ScreenshotNegative);
    Code:
       0: aload_0
       1: invokespecial #38                 // Method ensureThatTheProcessingLineIsRunning:()V
       4: aload_0
       5: getfield      #23                 // Field processingLine:Lnet/serenitybdd/core/photography/DarkroomProcessingLine;
       8: aload_1
       9: invokevirtual #39                 // Method net/serenitybdd/core/photography/DarkroomProcessingLine.addToProcessingQueue:(Lnet/serenitybdd/core/photography/ScreenshotNegative;)Lnet/serenitybdd/core/photography/ScreenshotReceipt;
      12: areturn

  private void ensureThatTheProcessingLineIsRunning();
    Code:
       0: aload_0
       1: getfield      #23                 // Field processingLine:Lnet/serenitybdd/core/photography/DarkroomProcessingLine;
       4: ifnonnull     11
       7: aload_0
       8: invokevirtual #5                  // Method start:()V
      11: return

  private void shutdownProcessingLine();
    Code:
       0: aload_0
       1: getfield      #23                 // Field processingLine:Lnet/serenitybdd/core/photography/DarkroomProcessingLine;
       4: invokevirtual #40                 // Method net/serenitybdd/core/photography/DarkroomProcessingLine.terminate:()V
       7: aload_0
       8: getfield      #33                 // Field screenshotThread:Ljava/lang/Thread;
      11: invokevirtual #41                 // Method java/lang/Thread.join:()V
      14: goto          29
      17: astore_1
      18: getstatic     #2                  // Field LOGGER:Lorg/slf4j/Logger;
      21: ldc           #43                 // String Screenshot processing interrupted
      23: aload_1
      24: invokeinterface #44,  3           // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;Ljava/lang/Throwable;)V
      29: return
    Exception table:
       from    to  target type
           7    14    17   Class java/lang/InterruptedException

  public net.serenitybdd.core.photography.ScreenshotReceipt sendNegative(net.serenitybdd.core.photography.ScreenshotNegative);
    Code:
       0: getstatic     #2                  // Field LOGGER:Lorg/slf4j/Logger;
       3: new           #45                 // class java/lang/StringBuilder
       6: dup
       7: invokespecial #46                 // Method java/lang/StringBuilder."<init>":()V
      10: ldc           #47                 // String Send negative for processing for
      12: invokevirtual #48                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      15: aload_1
      16: invokevirtual #49                 // Method net/serenitybdd/core/photography/ScreenshotNegative.getScreenshotPath:()Ljava/nio/file/Path;
      19: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      22: invokevirtual #51                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      25: invokeinterface #4,  2            // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;)V
      30: aload_0
      31: aload_1
      32: invokevirtual #52                 // Method submitForProcessing:(Lnet/serenitybdd/core/photography/ScreenshotNegative;)Lnet/serenitybdd/core/photography/ScreenshotReceipt;
      35: areturn

  static {};
    Code:
       0: ldc           #53                 // class net/serenitybdd/core/photography/Darkroom
       2: invokestatic  #54                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #2                  // Field LOGGER:Lorg/slf4j/Logger;
       8: iconst_1
       9: anewarray     #55                 // class net/serenitybdd/core/photography/PhotoFilter
      12: dup
      13: iconst_0
      14: new           #56                 // class net/serenitybdd/core/photography/bluring/Blurer
      17: dup
      18: invokespecial #57                 // Method net/serenitybdd/core/photography/bluring/Blurer."<init>":()V
      21: aastore
      22: invokestatic  #58                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
      25: putstatic     #21                 // Field DEFAULT_PROCESSERS:Ljava/util/List;
      28: return
}
