{
  "apiVersion" : "v1",
  "kind" : "List",
  "items" : [ {
    "apiVersion" : "v1",
    "kind" : "ConfigMap",
    "metadata" : {
      "labels" : {
        "funktion.fabric8.io/kind" : "Connector",
        "provider" : "fabric8",
        "project" : "connector-avro",
        "version" : "1.1.55",
        "group" : "io.fabric8.funktion.connector"
      },
      "name" : "avro"
    },
    "data" : {
      "deployment.yml" : "---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n    funktion.fabric8.io/kind: Subscription\n    connector: avro\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        funktion.fabric8.io/kind: Subscription\n        connector: avro\n    spec:\n      containers:\n      - image: funktion/connector-avro:1.1.55\n        name: connector\n",
      "schema.yml" : "---\ncomponent:\n  kind: component\n  scheme: avro\n  syntax: avro:transport:host:port/messageName\n  title: Avro\n  description: Working with Apache Avro for data serialization.\n  label: messaging,transformation\n  deprecated: false\n  async: true\n  javaType: org.apache.camel.component.avro.AvroComponent\n  groupId: org.apache.camel\n  artifactId: camel-avro\n  version: 2.18.1\ncomponentProperties:\n  configuration:\n    kind: property\n    type: object\n    javaType: org.apache.camel.component.avro.AvroConfiguration\n    deprecated: false\n    secret: false\n    description: To use a shared AvroConfiguration to configure options once\n    order: 0\nproperties:\n  transport:\n    kind: path\n    group: common\n    required: true\n    type: string\n    javaType: org.apache.camel.component.avro.AvroTransport\n    enum:\n    - http\n    - netty\n    deprecated: false\n    secret: false\n    description: Transport to use\n    order: 0\n  port:\n    kind: path\n    group: common\n    required: true\n    type: integer\n    javaType: int\n    deprecated: false\n    secret: false\n    description: Port number to use\n    order: 1\n  host:\n    kind: path\n    group: common\n    required: true\n    type: string\n    javaType: java.lang.String\n    deprecated: false\n    secret: false\n    description: Hostname to use\n    order: 2\n  messageName:\n    kind: path\n    group: common\n    type: string\n    javaType: java.lang.String\n    deprecated: false\n    secret: false\n    description: The name of the message to send.\n    order: 3\n  protocol:\n    kind: parameter\n    group: common\n    type: object\n    javaType: org.apache.avro.Protocol\n    deprecated: false\n    secret: false\n    description: Avro protocol to use\n    order: 4\n  protocolClassName:\n    kind: parameter\n    group: common\n    type: string\n    javaType: java.lang.String\n    deprecated: false\n    secret: false\n    description: Avro protocol to use defined by the FQN class name\n    order: 5\n  protocolLocation:\n    kind: parameter\n    group: common\n    type: string\n    javaType: java.lang.String\n    deprecated: false\n    secret: false\n    description: Avro protocol location\n    order: 6\n  reflectionProtocol:\n    kind: parameter\n    group: common\n    type: boolean\n    javaType: boolean\n    deprecated: false\n    secret: false\n    defaultValue: false\n    description: If protocol object provided is reflection protocol. Should be used only with protocol parameter because for protocolClassName protocol type will be auto detected\n    order: 7\n  singleParameter:\n    kind: parameter\n    group: common\n    type: boolean\n    javaType: boolean\n    deprecated: false\n    secret: false\n    defaultValue: false\n    description: If true consumer parameter won't be wrapped into array. Will fail if protocol specifies more then 1 parameter for the message\n    order: 8\n  uriAuthority:\n    kind: parameter\n    group: common\n    type: string\n    javaType: java.lang.String\n    deprecated: false\n    secret: false\n    description: Authority to use (username and password)\n    order: 9\n  bridgeErrorHandler:\n    kind: parameter\n    group: consumer\n    label: consumer\n    type: boolean\n    javaType: boolean\n    optionalPrefix: consumer.\n    deprecated: false\n    secret: false\n    defaultValue: false\n    description: Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored.\n    order: 10\n  exceptionHandler:\n    kind: parameter\n    group: consumer (advanced)\n    label: consumer,advanced\n    type: object\n    javaType: org.apache.camel.spi.ExceptionHandler\n    optionalPrefix: consumer.\n    deprecated: false\n    secret: false\n    description: To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored.\n    order: 11\n  exchangePattern:\n    kind: parameter\n    group: consumer (advanced)\n    label: consumer,advanced\n    type: string\n    javaType: org.apache.camel.ExchangePattern\n    enum:\n    - InOnly\n    - RobustInOnly\n    - InOut\n    - InOptionalOut\n    - OutOnly\n    - RobustOutOnly\n    - OutIn\n    - OutOptionalIn\n    deprecated: false\n    secret: false\n    description: Sets the exchange pattern when the consumer creates an exchange.\n    order: 12\n  synchronous:\n    kind: parameter\n    group: advanced\n    label: advanced\n    type: boolean\n    javaType: boolean\n    deprecated: false\n    secret: false\n    defaultValue: false\n    description: Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).\n    order: 13\n",
      "documentation.adoc" : "[[avro-AvroComponent]]\nAvro Component\n~~~~~~~~~~~~~~\n\n*Available as of Camel 2.10*\n\nThis component provides a dataformat for avro, which allows\nserialization and deserialization of messages using Apache Avro's binary\ndataformat. Moreover, it provides support for Apache Avro's rpc, by\nproviding producers and consumers endpoint for using avro over netty or\nhttp.\n\nMaven users will need to add the following dependency to their `pom.xml`\nfor this component:\n\n[source,xml]\n------------------------------------------------------------\n<dependency>\n    <groupId>org.apache.camel</groupId>\n    <artifactId>camel-avro</artifactId>\n    <version>x.x.x</version>\n    <!-- use the same version as your Camel core version -->\n</dependency>\n------------------------------------------------------------\n\n[[avro-ApacheAvroOverview]]\nApache Avro Overview\n^^^^^^^^^^^^^^^^^^^^\n\nAvro allows you to define message types and a protocol using a json like\nformat and then generate java code for the specified types and messages.\nAn example of how a schema looks like is below.\n\n[source,xml]\n------------------------------------------------------------------------------------------\n{\"namespace\": \"org.apache.camel.avro.generated\",\n \"protocol\": \"KeyValueProtocol\",\n\n \"types\": [\n     {\"name\": \"Key\", \"type\": \"record\",\n      \"fields\": [\n          {\"name\": \"key\",   \"type\": \"string\"}\n      ]\n     },\n     {\"name\": \"Value\", \"type\": \"record\",\n      \"fields\": [\n          {\"name\": \"value\",   \"type\": \"string\"}\n      ]\n     }\n ],\n\n \"messages\": {\n     \"put\": {\n         \"request\": [{\"name\": \"key\", \"type\": \"Key\"}, {\"name\": \"value\", \"type\": \"Value\"} ],\n         \"response\": \"null\"\n     },\n     \"get\": {\n         \"request\": [{\"name\": \"key\", \"type\": \"Key\"}],\n         \"response\": \"Value\"\n     }\n }\n}\n------------------------------------------------------------------------------------------\n\nYou can easily generate classes from a schema, using maven, ant etc.\nMore details can be found at the\nhttp://avro.apache.org/docs/current/[Apache Avro documentation].\n\nHowever, it doesn't enforce a schema first approach and you can create\nschema for your existing classes. *Since 2.12* you can use existing\nprotocol interfaces to make RCP calls. You should use interface for the\nprotocol itself and POJO beans or primitive/String classes for parameter\nand result types. Here is an example of the class that corresponds to\nschema above:\n\n[source,java]\n--------------------------------------------------------------\npackage org.apache.camel.avro.reflection;\n\npublic interface KeyValueProtocol {\n    void put(String key, Value value);\n    Value get(String key);\n}\n\nclass Value {\n    private String value;\n    public String getValue() { return value; }\n    public void setValue(String value) { this.value = value; }\n}\n--------------------------------------------------------------\n\n_Note: Existing classes can be used only for RPC (see below), not in\ndata format._\n\n[[avro-UsingtheAvrodataformat]]\nUsing the Avro data format\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nUsing the avro data format is as easy as specifying that the class that\nyou want to marshal or unmarshal in your route.\n\n[source,xml]\n--------------------------------------------------------------------------------\n    <camelContext id=\"camel\" xmlns=\"http://camel.apache.org/schema/spring\">\n        <route>\n            <from uri=\"direct:in\"/>\n            <marshal>\n                <avro instanceClass=\"org.apache.camel.dataformat.avro.Message\"/>\n            </marshal>\n            <to uri=\"log:out\"/>\n        </route>\n    </camelContext>\n--------------------------------------------------------------------------------\n\nAn alternative can be to specify the dataformat inside the context and\nreference it from your route.\n\n[source,xml]\n--------------------------------------------------------------------------------------\n    <camelContext id=\"camel\" xmlns=\"http://camel.apache.org/schema/spring\">\n         <dataFormats>\n            <avro id=\"avro\" instanceClass=\"org.apache.camel.dataformat.avro.Message\"/>\n        </dataFormats>\n        <route>\n            <from uri=\"direct:in\"/>\n            <marshal ref=\"avro\"/>\n            <to uri=\"log:out\"/>\n        </route>\n    </camelContext>\n--------------------------------------------------------------------------------------\n\nIn the same manner you can umarshal using the avro data format.\n\n[[avro-UsingAvroRPCinCamel]]\nUsing Avro RPC in Camel\n^^^^^^^^^^^^^^^^^^^^^^^\n\nAs mentioned above Avro also provides RPC support over multiple\ntransports such as http and netty. Camel provides consumers and\nproducers for these two transports.\n\n[source,java]\n----------------------------------------\navro:[transport]:[host]:[port][?options]\n----------------------------------------\n\nThe supported transport values are currently http or netty.\n\n*Since 2.12* you can specify message name right in the URI:\n\n[source,java]\n------------------------------------------------------\navro:[transport]:[host]:[port][/messageName][?options]\n------------------------------------------------------\n\nFor consumers this allows you to have multiple routes attached to the\nsame socket. Dispatching to correct route will be done by the avro\ncomponent automatically. Route with no messageName specified (if any)\nwill be used as default.\n\nWhen using camel producers for avro ipc, the \"in\" message body needs to\ncontain the parameters of the operation specified in the avro protocol.\nThe response will be added in the body of the \"out\" message.\n\nIn a similar manner when using camel avro consumers for avro ipc, the\nrequests parameters will be placed inside the \"in\" message body of the\ncreated exchange and once the exchange is processed the body of the\n\"out\" message will be send as a response.\n\n*Note:* By default consumer parameters are wrapped into array. If you've\ngot only one parameter, *since 2.12* you can use `singleParameter` URI\noption to receive it direcly in the \"in\" message body without array\nwrapping.\n\n[[avro-AvroRPCURIOptions]]\nAvro RPC URI Options\n^^^^^^^^^^^^^^^^^^^^\n\n\n\n\n\n// component options: START\nThe Avro component supports 1 options which are listed below.\n\n\n\n{% raw %}\n[width=\"100%\",cols=\"2,1m,7\",options=\"header\"]\n|=======================================================================\n| Name | Java Type | Description\n| configuration | AvroConfiguration | To use a shared AvroConfiguration to configure options once\n|=======================================================================\n{% endraw %}\n// component options: END\n\n\n\n\n\n\n// endpoint options: START\nThe Avro component supports 14 endpoint options which are listed below:\n\n{% raw %}\n[width=\"100%\",cols=\"2,1,1m,1m,5\",options=\"header\"]\n|=======================================================================\n| Name | Group | Default | Java Type | Description\n| transport | common |  | AvroTransport | *Required* Transport to use\n| port | common |  | int | *Required* Port number to use\n| host | common |  | String | *Required* Hostname to use\n| messageName | common |  | String | The name of the message to send.\n| protocol | common |  | Protocol | Avro protocol to use\n| protocolClassName | common |  | String | Avro protocol to use defined by the FQN class name\n| protocolLocation | common |  | String | Avro protocol location\n| reflectionProtocol | common | false | boolean | If protocol object provided is reflection protocol. Should be used only with protocol parameter because for protocolClassName protocol type will be auto detected\n| singleParameter | common | false | boolean | If true consumer parameter won't be wrapped into array. Will fail if protocol specifies more then 1 parameter for the message\n| uriAuthority | common |  | String | Authority to use (username and password)\n| bridgeErrorHandler | consumer | false | boolean | Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored.\n| exceptionHandler | consumer (advanced) |  | ExceptionHandler | To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored.\n| exchangePattern | consumer (advanced) |  | ExchangePattern | Sets the exchange pattern when the consumer creates an exchange.\n| synchronous | advanced | false | boolean | Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).\n|=======================================================================\n{% endraw %}\n// endpoint options: END\n\n\n[[avro-AvroRPCHeaders]]\nAvro RPC Headers\n^^^^^^^^^^^^^^^^\n\n[width=\"100%\",cols=\"20%,80%\",options=\"header\",]\n|=======================================================================\n|Name |Description\n\n|`CamelAvroMessageName` |The name of the message to send. In consumer overrides message name from\nURI (if any)\n|=======================================================================\n\n[[avro-Examples]]\nExamples\n^^^^^^^^\n\nAn example of using camel avro producers via http:\n\n[source,xml]\n---------------------------------------------------------------------------------------------------------------------------\n        <route>\n            <from uri=\"direct:start\"/>\n            <to uri=\"avro:http:localhost:{{avroport}}?protocolClassName=org.apache.camel.avro.generated.KeyValueProtocol\"/>\n            <to uri=\"log:avro\"/>\n        </route>\n---------------------------------------------------------------------------------------------------------------------------\n\nIn the example above you need to fill `CamelAvroMessageName` header.\n*Since 2.12* you can use following syntax to call constant messages:\n\n[source,xml]\n-------------------------------------------------------------------------------------------------------------------------------\n?? ?? ?? ?? <route>\n?? ?? ?? ?? ?? ?? <from uri=\"direct:start\"/>\n?? ?? ?? ?? ?? ?? <to uri=\"avro:http:localhost:{{avroport}}/put?protocolClassName=org.apache.camel.avro.generated.KeyValueProtocol\"/>\n?? ?? ?? ?? ?? ?? <to uri=\"log:avro\"/>\n?? ?? ?? ?? </route>\n-------------------------------------------------------------------------------------------------------------------------------\n\nAn example of consuming messages using camel avro consumers via netty:\n\n[source,xml]\n------------------------------------------------------------------------------------------------------------------------------\n        <route>\n            <from uri=\"avro:netty:localhost:{{avroport}}?protocolClassName=org.apache.camel.avro.generated.KeyValueProtocol\"/>\n            <choice>\n                <when>\n                    <el>${in.headers.CamelAvroMessageName == 'put'}</el>\n                    <process ref=\"putProcessor\"/>\n                </when>\n                <when>\n                    <el>${in.headers.CamelAvroMessageName == 'get'}</el>\n                    <process ref=\"getProcessor\"/>\n                </when>\n            </choice>\n        </route>\n------------------------------------------------------------------------------------------------------------------------------\n\n*Since 2.12* you can set up two distinct routes to perform the same\ntask:\n\n[source,xml]\n-------------------------------------------------------------------------------------------------------------------------------------------------------\n        <route>\n            <from uri=\"avro:netty:localhost:{{avroport}}/put?protocolClassName=org.apache.camel.avro.generated.KeyValueProtocol\">\n            <process ref=\"putProcessor\"/>\n        </route>\n        <route>\n            <from uri=\"avro:netty:localhost:{{avroport}}/get?protocolClassName=org.apache.camel.avro.generated.KeyValueProtocol&singleParameter=true\"/>\n            <process ref=\"getProcessor\"/>\n        </route>\n-------------------------------------------------------------------------------------------------------------------------------------------------------\n\nIn the example above, get takes only one parameter, so `singleParameter`\nis used and `getProcessor` will receive Value class directly in body,\nwhile `putProcessor` will receive an array of size 2 with String key and\nValue value filled as array contents.\n"
    }
  } ]
}