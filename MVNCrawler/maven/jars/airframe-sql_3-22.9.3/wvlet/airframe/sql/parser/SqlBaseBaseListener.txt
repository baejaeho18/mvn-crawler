Compiled from "SqlBaseBaseListener.java"
public class wvlet.airframe.sql.parser.SqlBaseBaseListener implements wvlet.airframe.sql.parser.SqlBaseListener {
  public wvlet.airframe.sql.parser.SqlBaseBaseListener();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public void enterSingleStatement(wvlet.airframe.sql.parser.SqlBaseParser$SingleStatementContext);
    Code:
       0: return

  public void exitSingleStatement(wvlet.airframe.sql.parser.SqlBaseParser$SingleStatementContext);
    Code:
       0: return

  public void enterSingleExpression(wvlet.airframe.sql.parser.SqlBaseParser$SingleExpressionContext);
    Code:
       0: return

  public void exitSingleExpression(wvlet.airframe.sql.parser.SqlBaseParser$SingleExpressionContext);
    Code:
       0: return

  public void enterStatementDefault(wvlet.airframe.sql.parser.SqlBaseParser$StatementDefaultContext);
    Code:
       0: return

  public void exitStatementDefault(wvlet.airframe.sql.parser.SqlBaseParser$StatementDefaultContext);
    Code:
       0: return

  public void enterUse(wvlet.airframe.sql.parser.SqlBaseParser$UseContext);
    Code:
       0: return

  public void exitUse(wvlet.airframe.sql.parser.SqlBaseParser$UseContext);
    Code:
       0: return

  public void enterCreateSchema(wvlet.airframe.sql.parser.SqlBaseParser$CreateSchemaContext);
    Code:
       0: return

  public void exitCreateSchema(wvlet.airframe.sql.parser.SqlBaseParser$CreateSchemaContext);
    Code:
       0: return

  public void enterDropSchema(wvlet.airframe.sql.parser.SqlBaseParser$DropSchemaContext);
    Code:
       0: return

  public void exitDropSchema(wvlet.airframe.sql.parser.SqlBaseParser$DropSchemaContext);
    Code:
       0: return

  public void enterRenameSchema(wvlet.airframe.sql.parser.SqlBaseParser$RenameSchemaContext);
    Code:
       0: return

  public void exitRenameSchema(wvlet.airframe.sql.parser.SqlBaseParser$RenameSchemaContext);
    Code:
       0: return

  public void enterCreateTableAsSelect(wvlet.airframe.sql.parser.SqlBaseParser$CreateTableAsSelectContext);
    Code:
       0: return

  public void exitCreateTableAsSelect(wvlet.airframe.sql.parser.SqlBaseParser$CreateTableAsSelectContext);
    Code:
       0: return

  public void enterCreateTable(wvlet.airframe.sql.parser.SqlBaseParser$CreateTableContext);
    Code:
       0: return

  public void exitCreateTable(wvlet.airframe.sql.parser.SqlBaseParser$CreateTableContext);
    Code:
       0: return

  public void enterDropTable(wvlet.airframe.sql.parser.SqlBaseParser$DropTableContext);
    Code:
       0: return

  public void exitDropTable(wvlet.airframe.sql.parser.SqlBaseParser$DropTableContext);
    Code:
       0: return

  public void enterInsertInto(wvlet.airframe.sql.parser.SqlBaseParser$InsertIntoContext);
    Code:
       0: return

  public void exitInsertInto(wvlet.airframe.sql.parser.SqlBaseParser$InsertIntoContext);
    Code:
       0: return

  public void enterDelete(wvlet.airframe.sql.parser.SqlBaseParser$DeleteContext);
    Code:
       0: return

  public void exitDelete(wvlet.airframe.sql.parser.SqlBaseParser$DeleteContext);
    Code:
       0: return

  public void enterRenameTable(wvlet.airframe.sql.parser.SqlBaseParser$RenameTableContext);
    Code:
       0: return

  public void exitRenameTable(wvlet.airframe.sql.parser.SqlBaseParser$RenameTableContext);
    Code:
       0: return

  public void enterRenameColumn(wvlet.airframe.sql.parser.SqlBaseParser$RenameColumnContext);
    Code:
       0: return

  public void exitRenameColumn(wvlet.airframe.sql.parser.SqlBaseParser$RenameColumnContext);
    Code:
       0: return

  public void enterDropColumn(wvlet.airframe.sql.parser.SqlBaseParser$DropColumnContext);
    Code:
       0: return

  public void exitDropColumn(wvlet.airframe.sql.parser.SqlBaseParser$DropColumnContext);
    Code:
       0: return

  public void enterAddColumn(wvlet.airframe.sql.parser.SqlBaseParser$AddColumnContext);
    Code:
       0: return

  public void exitAddColumn(wvlet.airframe.sql.parser.SqlBaseParser$AddColumnContext);
    Code:
       0: return

  public void enterCreateView(wvlet.airframe.sql.parser.SqlBaseParser$CreateViewContext);
    Code:
       0: return

  public void exitCreateView(wvlet.airframe.sql.parser.SqlBaseParser$CreateViewContext);
    Code:
       0: return

  public void enterDropView(wvlet.airframe.sql.parser.SqlBaseParser$DropViewContext);
    Code:
       0: return

  public void exitDropView(wvlet.airframe.sql.parser.SqlBaseParser$DropViewContext);
    Code:
       0: return

  public void enterCall(wvlet.airframe.sql.parser.SqlBaseParser$CallContext);
    Code:
       0: return

  public void exitCall(wvlet.airframe.sql.parser.SqlBaseParser$CallContext);
    Code:
       0: return

  public void enterGrant(wvlet.airframe.sql.parser.SqlBaseParser$GrantContext);
    Code:
       0: return

  public void exitGrant(wvlet.airframe.sql.parser.SqlBaseParser$GrantContext);
    Code:
       0: return

  public void enterRevoke(wvlet.airframe.sql.parser.SqlBaseParser$RevokeContext);
    Code:
       0: return

  public void exitRevoke(wvlet.airframe.sql.parser.SqlBaseParser$RevokeContext);
    Code:
       0: return

  public void enterShowGrants(wvlet.airframe.sql.parser.SqlBaseParser$ShowGrantsContext);
    Code:
       0: return

  public void exitShowGrants(wvlet.airframe.sql.parser.SqlBaseParser$ShowGrantsContext);
    Code:
       0: return

  public void enterExplain(wvlet.airframe.sql.parser.SqlBaseParser$ExplainContext);
    Code:
       0: return

  public void exitExplain(wvlet.airframe.sql.parser.SqlBaseParser$ExplainContext);
    Code:
       0: return

  public void enterShowCreateTable(wvlet.airframe.sql.parser.SqlBaseParser$ShowCreateTableContext);
    Code:
       0: return

  public void exitShowCreateTable(wvlet.airframe.sql.parser.SqlBaseParser$ShowCreateTableContext);
    Code:
       0: return

  public void enterShowCreateView(wvlet.airframe.sql.parser.SqlBaseParser$ShowCreateViewContext);
    Code:
       0: return

  public void exitShowCreateView(wvlet.airframe.sql.parser.SqlBaseParser$ShowCreateViewContext);
    Code:
       0: return

  public void enterShowTables(wvlet.airframe.sql.parser.SqlBaseParser$ShowTablesContext);
    Code:
       0: return

  public void exitShowTables(wvlet.airframe.sql.parser.SqlBaseParser$ShowTablesContext);
    Code:
       0: return

  public void enterShowSchemas(wvlet.airframe.sql.parser.SqlBaseParser$ShowSchemasContext);
    Code:
       0: return

  public void exitShowSchemas(wvlet.airframe.sql.parser.SqlBaseParser$ShowSchemasContext);
    Code:
       0: return

  public void enterShowCatalogs(wvlet.airframe.sql.parser.SqlBaseParser$ShowCatalogsContext);
    Code:
       0: return

  public void exitShowCatalogs(wvlet.airframe.sql.parser.SqlBaseParser$ShowCatalogsContext);
    Code:
       0: return

  public void enterShowColumns(wvlet.airframe.sql.parser.SqlBaseParser$ShowColumnsContext);
    Code:
       0: return

  public void exitShowColumns(wvlet.airframe.sql.parser.SqlBaseParser$ShowColumnsContext);
    Code:
       0: return

  public void enterShowStats(wvlet.airframe.sql.parser.SqlBaseParser$ShowStatsContext);
    Code:
       0: return

  public void exitShowStats(wvlet.airframe.sql.parser.SqlBaseParser$ShowStatsContext);
    Code:
       0: return

  public void enterShowStatsForQuery(wvlet.airframe.sql.parser.SqlBaseParser$ShowStatsForQueryContext);
    Code:
       0: return

  public void exitShowStatsForQuery(wvlet.airframe.sql.parser.SqlBaseParser$ShowStatsForQueryContext);
    Code:
       0: return

  public void enterShowFunctions(wvlet.airframe.sql.parser.SqlBaseParser$ShowFunctionsContext);
    Code:
       0: return

  public void exitShowFunctions(wvlet.airframe.sql.parser.SqlBaseParser$ShowFunctionsContext);
    Code:
       0: return

  public void enterShowSession(wvlet.airframe.sql.parser.SqlBaseParser$ShowSessionContext);
    Code:
       0: return

  public void exitShowSession(wvlet.airframe.sql.parser.SqlBaseParser$ShowSessionContext);
    Code:
       0: return

  public void enterSetSession(wvlet.airframe.sql.parser.SqlBaseParser$SetSessionContext);
    Code:
       0: return

  public void exitSetSession(wvlet.airframe.sql.parser.SqlBaseParser$SetSessionContext);
    Code:
       0: return

  public void enterResetSession(wvlet.airframe.sql.parser.SqlBaseParser$ResetSessionContext);
    Code:
       0: return

  public void exitResetSession(wvlet.airframe.sql.parser.SqlBaseParser$ResetSessionContext);
    Code:
       0: return

  public void enterStartTransaction(wvlet.airframe.sql.parser.SqlBaseParser$StartTransactionContext);
    Code:
       0: return

  public void exitStartTransaction(wvlet.airframe.sql.parser.SqlBaseParser$StartTransactionContext);
    Code:
       0: return

  public void enterCommit(wvlet.airframe.sql.parser.SqlBaseParser$CommitContext);
    Code:
       0: return

  public void exitCommit(wvlet.airframe.sql.parser.SqlBaseParser$CommitContext);
    Code:
       0: return

  public void enterRollback(wvlet.airframe.sql.parser.SqlBaseParser$RollbackContext);
    Code:
       0: return

  public void exitRollback(wvlet.airframe.sql.parser.SqlBaseParser$RollbackContext);
    Code:
       0: return

  public void enterShowPartitions(wvlet.airframe.sql.parser.SqlBaseParser$ShowPartitionsContext);
    Code:
       0: return

  public void exitShowPartitions(wvlet.airframe.sql.parser.SqlBaseParser$ShowPartitionsContext);
    Code:
       0: return

  public void enterPrepare(wvlet.airframe.sql.parser.SqlBaseParser$PrepareContext);
    Code:
       0: return

  public void exitPrepare(wvlet.airframe.sql.parser.SqlBaseParser$PrepareContext);
    Code:
       0: return

  public void enterDeallocate(wvlet.airframe.sql.parser.SqlBaseParser$DeallocateContext);
    Code:
       0: return

  public void exitDeallocate(wvlet.airframe.sql.parser.SqlBaseParser$DeallocateContext);
    Code:
       0: return

  public void enterExecute(wvlet.airframe.sql.parser.SqlBaseParser$ExecuteContext);
    Code:
       0: return

  public void exitExecute(wvlet.airframe.sql.parser.SqlBaseParser$ExecuteContext);
    Code:
       0: return

  public void enterDescribeInput(wvlet.airframe.sql.parser.SqlBaseParser$DescribeInputContext);
    Code:
       0: return

  public void exitDescribeInput(wvlet.airframe.sql.parser.SqlBaseParser$DescribeInputContext);
    Code:
       0: return

  public void enterDescribeOutput(wvlet.airframe.sql.parser.SqlBaseParser$DescribeOutputContext);
    Code:
       0: return

  public void exitDescribeOutput(wvlet.airframe.sql.parser.SqlBaseParser$DescribeOutputContext);
    Code:
       0: return

  public void enterQuery(wvlet.airframe.sql.parser.SqlBaseParser$QueryContext);
    Code:
       0: return

  public void exitQuery(wvlet.airframe.sql.parser.SqlBaseParser$QueryContext);
    Code:
       0: return

  public void enterWith(wvlet.airframe.sql.parser.SqlBaseParser$WithContext);
    Code:
       0: return

  public void exitWith(wvlet.airframe.sql.parser.SqlBaseParser$WithContext);
    Code:
       0: return

  public void enterTableElement(wvlet.airframe.sql.parser.SqlBaseParser$TableElementContext);
    Code:
       0: return

  public void exitTableElement(wvlet.airframe.sql.parser.SqlBaseParser$TableElementContext);
    Code:
       0: return

  public void enterColumnDefinition(wvlet.airframe.sql.parser.SqlBaseParser$ColumnDefinitionContext);
    Code:
       0: return

  public void exitColumnDefinition(wvlet.airframe.sql.parser.SqlBaseParser$ColumnDefinitionContext);
    Code:
       0: return

  public void enterLikeClause(wvlet.airframe.sql.parser.SqlBaseParser$LikeClauseContext);
    Code:
       0: return

  public void exitLikeClause(wvlet.airframe.sql.parser.SqlBaseParser$LikeClauseContext);
    Code:
       0: return

  public void enterProperties(wvlet.airframe.sql.parser.SqlBaseParser$PropertiesContext);
    Code:
       0: return

  public void exitProperties(wvlet.airframe.sql.parser.SqlBaseParser$PropertiesContext);
    Code:
       0: return

  public void enterProperty(wvlet.airframe.sql.parser.SqlBaseParser$PropertyContext);
    Code:
       0: return

  public void exitProperty(wvlet.airframe.sql.parser.SqlBaseParser$PropertyContext);
    Code:
       0: return

  public void enterQueryNoWith(wvlet.airframe.sql.parser.SqlBaseParser$QueryNoWithContext);
    Code:
       0: return

  public void exitQueryNoWith(wvlet.airframe.sql.parser.SqlBaseParser$QueryNoWithContext);
    Code:
       0: return

  public void enterQueryTermDefault(wvlet.airframe.sql.parser.SqlBaseParser$QueryTermDefaultContext);
    Code:
       0: return

  public void exitQueryTermDefault(wvlet.airframe.sql.parser.SqlBaseParser$QueryTermDefaultContext);
    Code:
       0: return

  public void enterSetOperation(wvlet.airframe.sql.parser.SqlBaseParser$SetOperationContext);
    Code:
       0: return

  public void exitSetOperation(wvlet.airframe.sql.parser.SqlBaseParser$SetOperationContext);
    Code:
       0: return

  public void enterQueryPrimaryDefault(wvlet.airframe.sql.parser.SqlBaseParser$QueryPrimaryDefaultContext);
    Code:
       0: return

  public void exitQueryPrimaryDefault(wvlet.airframe.sql.parser.SqlBaseParser$QueryPrimaryDefaultContext);
    Code:
       0: return

  public void enterTable(wvlet.airframe.sql.parser.SqlBaseParser$TableContext);
    Code:
       0: return

  public void exitTable(wvlet.airframe.sql.parser.SqlBaseParser$TableContext);
    Code:
       0: return

  public void enterInlineTable(wvlet.airframe.sql.parser.SqlBaseParser$InlineTableContext);
    Code:
       0: return

  public void exitInlineTable(wvlet.airframe.sql.parser.SqlBaseParser$InlineTableContext);
    Code:
       0: return

  public void enterSubquery(wvlet.airframe.sql.parser.SqlBaseParser$SubqueryContext);
    Code:
       0: return

  public void exitSubquery(wvlet.airframe.sql.parser.SqlBaseParser$SubqueryContext);
    Code:
       0: return

  public void enterSortItem(wvlet.airframe.sql.parser.SqlBaseParser$SortItemContext);
    Code:
       0: return

  public void exitSortItem(wvlet.airframe.sql.parser.SqlBaseParser$SortItemContext);
    Code:
       0: return

  public void enterQuerySpecification(wvlet.airframe.sql.parser.SqlBaseParser$QuerySpecificationContext);
    Code:
       0: return

  public void exitQuerySpecification(wvlet.airframe.sql.parser.SqlBaseParser$QuerySpecificationContext);
    Code:
       0: return

  public void enterGroupBy(wvlet.airframe.sql.parser.SqlBaseParser$GroupByContext);
    Code:
       0: return

  public void exitGroupBy(wvlet.airframe.sql.parser.SqlBaseParser$GroupByContext);
    Code:
       0: return

  public void enterGroupingSet(wvlet.airframe.sql.parser.SqlBaseParser$GroupingSetContext);
    Code:
       0: return

  public void exitGroupingSet(wvlet.airframe.sql.parser.SqlBaseParser$GroupingSetContext);
    Code:
       0: return

  public void enterNamedQuery(wvlet.airframe.sql.parser.SqlBaseParser$NamedQueryContext);
    Code:
       0: return

  public void exitNamedQuery(wvlet.airframe.sql.parser.SqlBaseParser$NamedQueryContext);
    Code:
       0: return

  public void enterSetQuantifier(wvlet.airframe.sql.parser.SqlBaseParser$SetQuantifierContext);
    Code:
       0: return

  public void exitSetQuantifier(wvlet.airframe.sql.parser.SqlBaseParser$SetQuantifierContext);
    Code:
       0: return

  public void enterSelectSingle(wvlet.airframe.sql.parser.SqlBaseParser$SelectSingleContext);
    Code:
       0: return

  public void exitSelectSingle(wvlet.airframe.sql.parser.SqlBaseParser$SelectSingleContext);
    Code:
       0: return

  public void enterSelectAll(wvlet.airframe.sql.parser.SqlBaseParser$SelectAllContext);
    Code:
       0: return

  public void exitSelectAll(wvlet.airframe.sql.parser.SqlBaseParser$SelectAllContext);
    Code:
       0: return

  public void enterRelationDefault(wvlet.airframe.sql.parser.SqlBaseParser$RelationDefaultContext);
    Code:
       0: return

  public void exitRelationDefault(wvlet.airframe.sql.parser.SqlBaseParser$RelationDefaultContext);
    Code:
       0: return

  public void enterLateralView(wvlet.airframe.sql.parser.SqlBaseParser$LateralViewContext);
    Code:
       0: return

  public void exitLateralView(wvlet.airframe.sql.parser.SqlBaseParser$LateralViewContext);
    Code:
       0: return

  public void enterJoinRelation(wvlet.airframe.sql.parser.SqlBaseParser$JoinRelationContext);
    Code:
       0: return

  public void exitJoinRelation(wvlet.airframe.sql.parser.SqlBaseParser$JoinRelationContext);
    Code:
       0: return

  public void enterJoinType(wvlet.airframe.sql.parser.SqlBaseParser$JoinTypeContext);
    Code:
       0: return

  public void exitJoinType(wvlet.airframe.sql.parser.SqlBaseParser$JoinTypeContext);
    Code:
       0: return

  public void enterJoinCriteria(wvlet.airframe.sql.parser.SqlBaseParser$JoinCriteriaContext);
    Code:
       0: return

  public void exitJoinCriteria(wvlet.airframe.sql.parser.SqlBaseParser$JoinCriteriaContext);
    Code:
       0: return

  public void enterAliasedRelation(wvlet.airframe.sql.parser.SqlBaseParser$AliasedRelationContext);
    Code:
       0: return

  public void exitAliasedRelation(wvlet.airframe.sql.parser.SqlBaseParser$AliasedRelationContext);
    Code:
       0: return

  public void enterColumnAliases(wvlet.airframe.sql.parser.SqlBaseParser$ColumnAliasesContext);
    Code:
       0: return

  public void exitColumnAliases(wvlet.airframe.sql.parser.SqlBaseParser$ColumnAliasesContext);
    Code:
       0: return

  public void enterTableName(wvlet.airframe.sql.parser.SqlBaseParser$TableNameContext);
    Code:
       0: return

  public void exitTableName(wvlet.airframe.sql.parser.SqlBaseParser$TableNameContext);
    Code:
       0: return

  public void enterSubqueryRelation(wvlet.airframe.sql.parser.SqlBaseParser$SubqueryRelationContext);
    Code:
       0: return

  public void exitSubqueryRelation(wvlet.airframe.sql.parser.SqlBaseParser$SubqueryRelationContext);
    Code:
       0: return

  public void enterUnnest(wvlet.airframe.sql.parser.SqlBaseParser$UnnestContext);
    Code:
       0: return

  public void exitUnnest(wvlet.airframe.sql.parser.SqlBaseParser$UnnestContext);
    Code:
       0: return

  public void enterLateral(wvlet.airframe.sql.parser.SqlBaseParser$LateralContext);
    Code:
       0: return

  public void exitLateral(wvlet.airframe.sql.parser.SqlBaseParser$LateralContext);
    Code:
       0: return

  public void enterParenthesizedRelation(wvlet.airframe.sql.parser.SqlBaseParser$ParenthesizedRelationContext);
    Code:
       0: return

  public void exitParenthesizedRelation(wvlet.airframe.sql.parser.SqlBaseParser$ParenthesizedRelationContext);
    Code:
       0: return

  public void enterExpression(wvlet.airframe.sql.parser.SqlBaseParser$ExpressionContext);
    Code:
       0: return

  public void exitExpression(wvlet.airframe.sql.parser.SqlBaseParser$ExpressionContext);
    Code:
       0: return

  public void enterLogicalNot(wvlet.airframe.sql.parser.SqlBaseParser$LogicalNotContext);
    Code:
       0: return

  public void exitLogicalNot(wvlet.airframe.sql.parser.SqlBaseParser$LogicalNotContext);
    Code:
       0: return

  public void enterBooleanDeafault(wvlet.airframe.sql.parser.SqlBaseParser$BooleanDeafaultContext);
    Code:
       0: return

  public void exitBooleanDeafault(wvlet.airframe.sql.parser.SqlBaseParser$BooleanDeafaultContext);
    Code:
       0: return

  public void enterLogicalBinary(wvlet.airframe.sql.parser.SqlBaseParser$LogicalBinaryContext);
    Code:
       0: return

  public void exitLogicalBinary(wvlet.airframe.sql.parser.SqlBaseParser$LogicalBinaryContext);
    Code:
       0: return

  public void enterPredicated(wvlet.airframe.sql.parser.SqlBaseParser$PredicatedContext);
    Code:
       0: return

  public void exitPredicated(wvlet.airframe.sql.parser.SqlBaseParser$PredicatedContext);
    Code:
       0: return

  public void enterBetween(wvlet.airframe.sql.parser.SqlBaseParser$BetweenContext);
    Code:
       0: return

  public void exitBetween(wvlet.airframe.sql.parser.SqlBaseParser$BetweenContext);
    Code:
       0: return

  public void enterInList(wvlet.airframe.sql.parser.SqlBaseParser$InListContext);
    Code:
       0: return

  public void exitInList(wvlet.airframe.sql.parser.SqlBaseParser$InListContext);
    Code:
       0: return

  public void enterInSubquery(wvlet.airframe.sql.parser.SqlBaseParser$InSubqueryContext);
    Code:
       0: return

  public void exitInSubquery(wvlet.airframe.sql.parser.SqlBaseParser$InSubqueryContext);
    Code:
       0: return

  public void enterLike(wvlet.airframe.sql.parser.SqlBaseParser$LikeContext);
    Code:
       0: return

  public void exitLike(wvlet.airframe.sql.parser.SqlBaseParser$LikeContext);
    Code:
       0: return

  public void enterNullPredicate(wvlet.airframe.sql.parser.SqlBaseParser$NullPredicateContext);
    Code:
       0: return

  public void exitNullPredicate(wvlet.airframe.sql.parser.SqlBaseParser$NullPredicateContext);
    Code:
       0: return

  public void enterDistinctFrom(wvlet.airframe.sql.parser.SqlBaseParser$DistinctFromContext);
    Code:
       0: return

  public void exitDistinctFrom(wvlet.airframe.sql.parser.SqlBaseParser$DistinctFromContext);
    Code:
       0: return

  public void enterValueExpressionDefault(wvlet.airframe.sql.parser.SqlBaseParser$ValueExpressionDefaultContext);
    Code:
       0: return

  public void exitValueExpressionDefault(wvlet.airframe.sql.parser.SqlBaseParser$ValueExpressionDefaultContext);
    Code:
       0: return

  public void enterConcatenation(wvlet.airframe.sql.parser.SqlBaseParser$ConcatenationContext);
    Code:
       0: return

  public void exitConcatenation(wvlet.airframe.sql.parser.SqlBaseParser$ConcatenationContext);
    Code:
       0: return

  public void enterComparison(wvlet.airframe.sql.parser.SqlBaseParser$ComparisonContext);
    Code:
       0: return

  public void exitComparison(wvlet.airframe.sql.parser.SqlBaseParser$ComparisonContext);
    Code:
       0: return

  public void enterArithmeticBinary(wvlet.airframe.sql.parser.SqlBaseParser$ArithmeticBinaryContext);
    Code:
       0: return

  public void exitArithmeticBinary(wvlet.airframe.sql.parser.SqlBaseParser$ArithmeticBinaryContext);
    Code:
       0: return

  public void enterArithmeticUnary(wvlet.airframe.sql.parser.SqlBaseParser$ArithmeticUnaryContext);
    Code:
       0: return

  public void exitArithmeticUnary(wvlet.airframe.sql.parser.SqlBaseParser$ArithmeticUnaryContext);
    Code:
       0: return

  public void enterAtTimeZone(wvlet.airframe.sql.parser.SqlBaseParser$AtTimeZoneContext);
    Code:
       0: return

  public void exitAtTimeZone(wvlet.airframe.sql.parser.SqlBaseParser$AtTimeZoneContext);
    Code:
       0: return

  public void enterDereference(wvlet.airframe.sql.parser.SqlBaseParser$DereferenceContext);
    Code:
       0: return

  public void exitDereference(wvlet.airframe.sql.parser.SqlBaseParser$DereferenceContext);
    Code:
       0: return

  public void enterTypeConstructor(wvlet.airframe.sql.parser.SqlBaseParser$TypeConstructorContext);
    Code:
       0: return

  public void exitTypeConstructor(wvlet.airframe.sql.parser.SqlBaseParser$TypeConstructorContext);
    Code:
       0: return

  public void enterSpecialDateTimeFunction(wvlet.airframe.sql.parser.SqlBaseParser$SpecialDateTimeFunctionContext);
    Code:
       0: return

  public void exitSpecialDateTimeFunction(wvlet.airframe.sql.parser.SqlBaseParser$SpecialDateTimeFunctionContext);
    Code:
       0: return

  public void enterSubstring(wvlet.airframe.sql.parser.SqlBaseParser$SubstringContext);
    Code:
       0: return

  public void exitSubstring(wvlet.airframe.sql.parser.SqlBaseParser$SubstringContext);
    Code:
       0: return

  public void enterCast(wvlet.airframe.sql.parser.SqlBaseParser$CastContext);
    Code:
       0: return

  public void exitCast(wvlet.airframe.sql.parser.SqlBaseParser$CastContext);
    Code:
       0: return

  public void enterLambda(wvlet.airframe.sql.parser.SqlBaseParser$LambdaContext);
    Code:
       0: return

  public void exitLambda(wvlet.airframe.sql.parser.SqlBaseParser$LambdaContext);
    Code:
       0: return

  public void enterParenthesizedExpression(wvlet.airframe.sql.parser.SqlBaseParser$ParenthesizedExpressionContext);
    Code:
       0: return

  public void exitParenthesizedExpression(wvlet.airframe.sql.parser.SqlBaseParser$ParenthesizedExpressionContext);
    Code:
       0: return

  public void enterParameter(wvlet.airframe.sql.parser.SqlBaseParser$ParameterContext);
    Code:
       0: return

  public void exitParameter(wvlet.airframe.sql.parser.SqlBaseParser$ParameterContext);
    Code:
       0: return

  public void enterNormalize(wvlet.airframe.sql.parser.SqlBaseParser$NormalizeContext);
    Code:
       0: return

  public void exitNormalize(wvlet.airframe.sql.parser.SqlBaseParser$NormalizeContext);
    Code:
       0: return

  public void enterIntervalLiteral(wvlet.airframe.sql.parser.SqlBaseParser$IntervalLiteralContext);
    Code:
       0: return

  public void exitIntervalLiteral(wvlet.airframe.sql.parser.SqlBaseParser$IntervalLiteralContext);
    Code:
       0: return

  public void enterNumericLiteral(wvlet.airframe.sql.parser.SqlBaseParser$NumericLiteralContext);
    Code:
       0: return

  public void exitNumericLiteral(wvlet.airframe.sql.parser.SqlBaseParser$NumericLiteralContext);
    Code:
       0: return

  public void enterBooleanLiteral(wvlet.airframe.sql.parser.SqlBaseParser$BooleanLiteralContext);
    Code:
       0: return

  public void exitBooleanLiteral(wvlet.airframe.sql.parser.SqlBaseParser$BooleanLiteralContext);
    Code:
       0: return

  public void enterSimpleCase(wvlet.airframe.sql.parser.SqlBaseParser$SimpleCaseContext);
    Code:
       0: return

  public void exitSimpleCase(wvlet.airframe.sql.parser.SqlBaseParser$SimpleCaseContext);
    Code:
       0: return

  public void enterColumnReference(wvlet.airframe.sql.parser.SqlBaseParser$ColumnReferenceContext);
    Code:
       0: return

  public void exitColumnReference(wvlet.airframe.sql.parser.SqlBaseParser$ColumnReferenceContext);
    Code:
       0: return

  public void enterNullLiteral(wvlet.airframe.sql.parser.SqlBaseParser$NullLiteralContext);
    Code:
       0: return

  public void exitNullLiteral(wvlet.airframe.sql.parser.SqlBaseParser$NullLiteralContext);
    Code:
       0: return

  public void enterRowConstructor(wvlet.airframe.sql.parser.SqlBaseParser$RowConstructorContext);
    Code:
       0: return

  public void exitRowConstructor(wvlet.airframe.sql.parser.SqlBaseParser$RowConstructorContext);
    Code:
       0: return

  public void enterSubscript(wvlet.airframe.sql.parser.SqlBaseParser$SubscriptContext);
    Code:
       0: return

  public void exitSubscript(wvlet.airframe.sql.parser.SqlBaseParser$SubscriptContext);
    Code:
       0: return

  public void enterSubqueryExpression(wvlet.airframe.sql.parser.SqlBaseParser$SubqueryExpressionContext);
    Code:
       0: return

  public void exitSubqueryExpression(wvlet.airframe.sql.parser.SqlBaseParser$SubqueryExpressionContext);
    Code:
       0: return

  public void enterBinaryLiteral(wvlet.airframe.sql.parser.SqlBaseParser$BinaryLiteralContext);
    Code:
       0: return

  public void exitBinaryLiteral(wvlet.airframe.sql.parser.SqlBaseParser$BinaryLiteralContext);
    Code:
       0: return

  public void enterCurrentUser(wvlet.airframe.sql.parser.SqlBaseParser$CurrentUserContext);
    Code:
       0: return

  public void exitCurrentUser(wvlet.airframe.sql.parser.SqlBaseParser$CurrentUserContext);
    Code:
       0: return

  public void enterExtract(wvlet.airframe.sql.parser.SqlBaseParser$ExtractContext);
    Code:
       0: return

  public void exitExtract(wvlet.airframe.sql.parser.SqlBaseParser$ExtractContext);
    Code:
       0: return

  public void enterStringLiteral(wvlet.airframe.sql.parser.SqlBaseParser$StringLiteralContext);
    Code:
       0: return

  public void exitStringLiteral(wvlet.airframe.sql.parser.SqlBaseParser$StringLiteralContext);
    Code:
       0: return

  public void enterArrayConstructor(wvlet.airframe.sql.parser.SqlBaseParser$ArrayConstructorContext);
    Code:
       0: return

  public void exitArrayConstructor(wvlet.airframe.sql.parser.SqlBaseParser$ArrayConstructorContext);
    Code:
       0: return

  public void enterFunctionCall(wvlet.airframe.sql.parser.SqlBaseParser$FunctionCallContext);
    Code:
       0: return

  public void exitFunctionCall(wvlet.airframe.sql.parser.SqlBaseParser$FunctionCallContext);
    Code:
       0: return

  public void enterExists(wvlet.airframe.sql.parser.SqlBaseParser$ExistsContext);
    Code:
       0: return

  public void exitExists(wvlet.airframe.sql.parser.SqlBaseParser$ExistsContext);
    Code:
       0: return

  public void enterPosition(wvlet.airframe.sql.parser.SqlBaseParser$PositionContext);
    Code:
       0: return

  public void exitPosition(wvlet.airframe.sql.parser.SqlBaseParser$PositionContext);
    Code:
       0: return

  public void enterSearchedCase(wvlet.airframe.sql.parser.SqlBaseParser$SearchedCaseContext);
    Code:
       0: return

  public void exitSearchedCase(wvlet.airframe.sql.parser.SqlBaseParser$SearchedCaseContext);
    Code:
       0: return

  public void enterGroupingOperation(wvlet.airframe.sql.parser.SqlBaseParser$GroupingOperationContext);
    Code:
       0: return

  public void exitGroupingOperation(wvlet.airframe.sql.parser.SqlBaseParser$GroupingOperationContext);
    Code:
       0: return

  public void enterBasicStringLiteral(wvlet.airframe.sql.parser.SqlBaseParser$BasicStringLiteralContext);
    Code:
       0: return

  public void exitBasicStringLiteral(wvlet.airframe.sql.parser.SqlBaseParser$BasicStringLiteralContext);
    Code:
       0: return

  public void enterUnicodeStringLiteral(wvlet.airframe.sql.parser.SqlBaseParser$UnicodeStringLiteralContext);
    Code:
       0: return

  public void exitUnicodeStringLiteral(wvlet.airframe.sql.parser.SqlBaseParser$UnicodeStringLiteralContext);
    Code:
       0: return

  public void enterTimeZoneInterval(wvlet.airframe.sql.parser.SqlBaseParser$TimeZoneIntervalContext);
    Code:
       0: return

  public void exitTimeZoneInterval(wvlet.airframe.sql.parser.SqlBaseParser$TimeZoneIntervalContext);
    Code:
       0: return

  public void enterTimeZoneString(wvlet.airframe.sql.parser.SqlBaseParser$TimeZoneStringContext);
    Code:
       0: return

  public void exitTimeZoneString(wvlet.airframe.sql.parser.SqlBaseParser$TimeZoneStringContext);
    Code:
       0: return

  public void enterComparisonOperator(wvlet.airframe.sql.parser.SqlBaseParser$ComparisonOperatorContext);
    Code:
       0: return

  public void exitComparisonOperator(wvlet.airframe.sql.parser.SqlBaseParser$ComparisonOperatorContext);
    Code:
       0: return

  public void enterComparisonQuantifier(wvlet.airframe.sql.parser.SqlBaseParser$ComparisonQuantifierContext);
    Code:
       0: return

  public void exitComparisonQuantifier(wvlet.airframe.sql.parser.SqlBaseParser$ComparisonQuantifierContext);
    Code:
       0: return

  public void enterBooleanValue(wvlet.airframe.sql.parser.SqlBaseParser$BooleanValueContext);
    Code:
       0: return

  public void exitBooleanValue(wvlet.airframe.sql.parser.SqlBaseParser$BooleanValueContext);
    Code:
       0: return

  public void enterInterval(wvlet.airframe.sql.parser.SqlBaseParser$IntervalContext);
    Code:
       0: return

  public void exitInterval(wvlet.airframe.sql.parser.SqlBaseParser$IntervalContext);
    Code:
       0: return

  public void enterIntervalField(wvlet.airframe.sql.parser.SqlBaseParser$IntervalFieldContext);
    Code:
       0: return

  public void exitIntervalField(wvlet.airframe.sql.parser.SqlBaseParser$IntervalFieldContext);
    Code:
       0: return

  public void enterNormalForm(wvlet.airframe.sql.parser.SqlBaseParser$NormalFormContext);
    Code:
       0: return

  public void exitNormalForm(wvlet.airframe.sql.parser.SqlBaseParser$NormalFormContext);
    Code:
       0: return

  public void enterType(wvlet.airframe.sql.parser.SqlBaseParser$TypeContext);
    Code:
       0: return

  public void exitType(wvlet.airframe.sql.parser.SqlBaseParser$TypeContext);
    Code:
       0: return

  public void enterTypeParameter(wvlet.airframe.sql.parser.SqlBaseParser$TypeParameterContext);
    Code:
       0: return

  public void exitTypeParameter(wvlet.airframe.sql.parser.SqlBaseParser$TypeParameterContext);
    Code:
       0: return

  public void enterBaseType(wvlet.airframe.sql.parser.SqlBaseParser$BaseTypeContext);
    Code:
       0: return

  public void exitBaseType(wvlet.airframe.sql.parser.SqlBaseParser$BaseTypeContext);
    Code:
       0: return

  public void enterWhenClause(wvlet.airframe.sql.parser.SqlBaseParser$WhenClauseContext);
    Code:
       0: return

  public void exitWhenClause(wvlet.airframe.sql.parser.SqlBaseParser$WhenClauseContext);
    Code:
       0: return

  public void enterFilter(wvlet.airframe.sql.parser.SqlBaseParser$FilterContext);
    Code:
       0: return

  public void exitFilter(wvlet.airframe.sql.parser.SqlBaseParser$FilterContext);
    Code:
       0: return

  public void enterOver(wvlet.airframe.sql.parser.SqlBaseParser$OverContext);
    Code:
       0: return

  public void exitOver(wvlet.airframe.sql.parser.SqlBaseParser$OverContext);
    Code:
       0: return

  public void enterWindowFrame(wvlet.airframe.sql.parser.SqlBaseParser$WindowFrameContext);
    Code:
       0: return

  public void exitWindowFrame(wvlet.airframe.sql.parser.SqlBaseParser$WindowFrameContext);
    Code:
       0: return

  public void enterUnboundedFrame(wvlet.airframe.sql.parser.SqlBaseParser$UnboundedFrameContext);
    Code:
       0: return

  public void exitUnboundedFrame(wvlet.airframe.sql.parser.SqlBaseParser$UnboundedFrameContext);
    Code:
       0: return

  public void enterCurrentRowBound(wvlet.airframe.sql.parser.SqlBaseParser$CurrentRowBoundContext);
    Code:
       0: return

  public void exitCurrentRowBound(wvlet.airframe.sql.parser.SqlBaseParser$CurrentRowBoundContext);
    Code:
       0: return

  public void enterBoundedFrame(wvlet.airframe.sql.parser.SqlBaseParser$BoundedFrameContext);
    Code:
       0: return

  public void exitBoundedFrame(wvlet.airframe.sql.parser.SqlBaseParser$BoundedFrameContext);
    Code:
       0: return

  public void enterExplainFormat(wvlet.airframe.sql.parser.SqlBaseParser$ExplainFormatContext);
    Code:
       0: return

  public void exitExplainFormat(wvlet.airframe.sql.parser.SqlBaseParser$ExplainFormatContext);
    Code:
       0: return

  public void enterExplainType(wvlet.airframe.sql.parser.SqlBaseParser$ExplainTypeContext);
    Code:
       0: return

  public void exitExplainType(wvlet.airframe.sql.parser.SqlBaseParser$ExplainTypeContext);
    Code:
       0: return

  public void enterIsolationLevel(wvlet.airframe.sql.parser.SqlBaseParser$IsolationLevelContext);
    Code:
       0: return

  public void exitIsolationLevel(wvlet.airframe.sql.parser.SqlBaseParser$IsolationLevelContext);
    Code:
       0: return

  public void enterTransactionAccessMode(wvlet.airframe.sql.parser.SqlBaseParser$TransactionAccessModeContext);
    Code:
       0: return

  public void exitTransactionAccessMode(wvlet.airframe.sql.parser.SqlBaseParser$TransactionAccessModeContext);
    Code:
       0: return

  public void enterReadUncommitted(wvlet.airframe.sql.parser.SqlBaseParser$ReadUncommittedContext);
    Code:
       0: return

  public void exitReadUncommitted(wvlet.airframe.sql.parser.SqlBaseParser$ReadUncommittedContext);
    Code:
       0: return

  public void enterReadCommitted(wvlet.airframe.sql.parser.SqlBaseParser$ReadCommittedContext);
    Code:
       0: return

  public void exitReadCommitted(wvlet.airframe.sql.parser.SqlBaseParser$ReadCommittedContext);
    Code:
       0: return

  public void enterRepeatableRead(wvlet.airframe.sql.parser.SqlBaseParser$RepeatableReadContext);
    Code:
       0: return

  public void exitRepeatableRead(wvlet.airframe.sql.parser.SqlBaseParser$RepeatableReadContext);
    Code:
       0: return

  public void enterSerializable(wvlet.airframe.sql.parser.SqlBaseParser$SerializableContext);
    Code:
       0: return

  public void exitSerializable(wvlet.airframe.sql.parser.SqlBaseParser$SerializableContext);
    Code:
       0: return

  public void enterPositionalArgument(wvlet.airframe.sql.parser.SqlBaseParser$PositionalArgumentContext);
    Code:
       0: return

  public void exitPositionalArgument(wvlet.airframe.sql.parser.SqlBaseParser$PositionalArgumentContext);
    Code:
       0: return

  public void enterNamedArgument(wvlet.airframe.sql.parser.SqlBaseParser$NamedArgumentContext);
    Code:
       0: return

  public void exitNamedArgument(wvlet.airframe.sql.parser.SqlBaseParser$NamedArgumentContext);
    Code:
       0: return

  public void enterPrivilege(wvlet.airframe.sql.parser.SqlBaseParser$PrivilegeContext);
    Code:
       0: return

  public void exitPrivilege(wvlet.airframe.sql.parser.SqlBaseParser$PrivilegeContext);
    Code:
       0: return

  public void enterQualifiedName(wvlet.airframe.sql.parser.SqlBaseParser$QualifiedNameContext);
    Code:
       0: return

  public void exitQualifiedName(wvlet.airframe.sql.parser.SqlBaseParser$QualifiedNameContext);
    Code:
       0: return

  public void enterUnquotedIdentifier(wvlet.airframe.sql.parser.SqlBaseParser$UnquotedIdentifierContext);
    Code:
       0: return

  public void exitUnquotedIdentifier(wvlet.airframe.sql.parser.SqlBaseParser$UnquotedIdentifierContext);
    Code:
       0: return

  public void enterQuotedIdentifier(wvlet.airframe.sql.parser.SqlBaseParser$QuotedIdentifierContext);
    Code:
       0: return

  public void exitQuotedIdentifier(wvlet.airframe.sql.parser.SqlBaseParser$QuotedIdentifierContext);
    Code:
       0: return

  public void enterBackQuotedIdentifier(wvlet.airframe.sql.parser.SqlBaseParser$BackQuotedIdentifierContext);
    Code:
       0: return

  public void exitBackQuotedIdentifier(wvlet.airframe.sql.parser.SqlBaseParser$BackQuotedIdentifierContext);
    Code:
       0: return

  public void enterDigitIdentifier(wvlet.airframe.sql.parser.SqlBaseParser$DigitIdentifierContext);
    Code:
       0: return

  public void exitDigitIdentifier(wvlet.airframe.sql.parser.SqlBaseParser$DigitIdentifierContext);
    Code:
       0: return

  public void enterDecimalLiteral(wvlet.airframe.sql.parser.SqlBaseParser$DecimalLiteralContext);
    Code:
       0: return

  public void exitDecimalLiteral(wvlet.airframe.sql.parser.SqlBaseParser$DecimalLiteralContext);
    Code:
       0: return

  public void enterDoubleLiteral(wvlet.airframe.sql.parser.SqlBaseParser$DoubleLiteralContext);
    Code:
       0: return

  public void exitDoubleLiteral(wvlet.airframe.sql.parser.SqlBaseParser$DoubleLiteralContext);
    Code:
       0: return

  public void enterIntegerLiteral(wvlet.airframe.sql.parser.SqlBaseParser$IntegerLiteralContext);
    Code:
       0: return

  public void exitIntegerLiteral(wvlet.airframe.sql.parser.SqlBaseParser$IntegerLiteralContext);
    Code:
       0: return

  public void enterNonReserved(wvlet.airframe.sql.parser.SqlBaseParser$NonReservedContext);
    Code:
       0: return

  public void exitNonReserved(wvlet.airframe.sql.parser.SqlBaseParser$NonReservedContext);
    Code:
       0: return

  public void enterEveryRule(org.antlr.v4.runtime.ParserRuleContext);
    Code:
       0: return

  public void exitEveryRule(org.antlr.v4.runtime.ParserRuleContext);
    Code:
       0: return

  public void visitTerminal(org.antlr.v4.runtime.tree.TerminalNode);
    Code:
       0: return

  public void visitErrorNode(org.antlr.v4.runtime.tree.ErrorNode);
    Code:
       0: return
}
