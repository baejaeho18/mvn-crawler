Compiled from "SqlBaseListener.java"
public interface wvlet.airframe.sql.parser.SqlBaseListener extends org.antlr.v4.runtime.tree.ParseTreeListener {
  public abstract void enterSingleStatement(wvlet.airframe.sql.parser.SqlBaseParser$SingleStatementContext);

  public abstract void exitSingleStatement(wvlet.airframe.sql.parser.SqlBaseParser$SingleStatementContext);

  public abstract void enterSingleExpression(wvlet.airframe.sql.parser.SqlBaseParser$SingleExpressionContext);

  public abstract void exitSingleExpression(wvlet.airframe.sql.parser.SqlBaseParser$SingleExpressionContext);

  public abstract void enterStatementDefault(wvlet.airframe.sql.parser.SqlBaseParser$StatementDefaultContext);

  public abstract void exitStatementDefault(wvlet.airframe.sql.parser.SqlBaseParser$StatementDefaultContext);

  public abstract void enterUse(wvlet.airframe.sql.parser.SqlBaseParser$UseContext);

  public abstract void exitUse(wvlet.airframe.sql.parser.SqlBaseParser$UseContext);

  public abstract void enterCreateSchema(wvlet.airframe.sql.parser.SqlBaseParser$CreateSchemaContext);

  public abstract void exitCreateSchema(wvlet.airframe.sql.parser.SqlBaseParser$CreateSchemaContext);

  public abstract void enterDropSchema(wvlet.airframe.sql.parser.SqlBaseParser$DropSchemaContext);

  public abstract void exitDropSchema(wvlet.airframe.sql.parser.SqlBaseParser$DropSchemaContext);

  public abstract void enterRenameSchema(wvlet.airframe.sql.parser.SqlBaseParser$RenameSchemaContext);

  public abstract void exitRenameSchema(wvlet.airframe.sql.parser.SqlBaseParser$RenameSchemaContext);

  public abstract void enterCreateTableAsSelect(wvlet.airframe.sql.parser.SqlBaseParser$CreateTableAsSelectContext);

  public abstract void exitCreateTableAsSelect(wvlet.airframe.sql.parser.SqlBaseParser$CreateTableAsSelectContext);

  public abstract void enterCreateTable(wvlet.airframe.sql.parser.SqlBaseParser$CreateTableContext);

  public abstract void exitCreateTable(wvlet.airframe.sql.parser.SqlBaseParser$CreateTableContext);

  public abstract void enterDropTable(wvlet.airframe.sql.parser.SqlBaseParser$DropTableContext);

  public abstract void exitDropTable(wvlet.airframe.sql.parser.SqlBaseParser$DropTableContext);

  public abstract void enterInsertInto(wvlet.airframe.sql.parser.SqlBaseParser$InsertIntoContext);

  public abstract void exitInsertInto(wvlet.airframe.sql.parser.SqlBaseParser$InsertIntoContext);

  public abstract void enterDelete(wvlet.airframe.sql.parser.SqlBaseParser$DeleteContext);

  public abstract void exitDelete(wvlet.airframe.sql.parser.SqlBaseParser$DeleteContext);

  public abstract void enterRenameTable(wvlet.airframe.sql.parser.SqlBaseParser$RenameTableContext);

  public abstract void exitRenameTable(wvlet.airframe.sql.parser.SqlBaseParser$RenameTableContext);

  public abstract void enterRenameColumn(wvlet.airframe.sql.parser.SqlBaseParser$RenameColumnContext);

  public abstract void exitRenameColumn(wvlet.airframe.sql.parser.SqlBaseParser$RenameColumnContext);

  public abstract void enterDropColumn(wvlet.airframe.sql.parser.SqlBaseParser$DropColumnContext);

  public abstract void exitDropColumn(wvlet.airframe.sql.parser.SqlBaseParser$DropColumnContext);

  public abstract void enterAddColumn(wvlet.airframe.sql.parser.SqlBaseParser$AddColumnContext);

  public abstract void exitAddColumn(wvlet.airframe.sql.parser.SqlBaseParser$AddColumnContext);

  public abstract void enterCreateView(wvlet.airframe.sql.parser.SqlBaseParser$CreateViewContext);

  public abstract void exitCreateView(wvlet.airframe.sql.parser.SqlBaseParser$CreateViewContext);

  public abstract void enterDropView(wvlet.airframe.sql.parser.SqlBaseParser$DropViewContext);

  public abstract void exitDropView(wvlet.airframe.sql.parser.SqlBaseParser$DropViewContext);

  public abstract void enterCall(wvlet.airframe.sql.parser.SqlBaseParser$CallContext);

  public abstract void exitCall(wvlet.airframe.sql.parser.SqlBaseParser$CallContext);

  public abstract void enterGrant(wvlet.airframe.sql.parser.SqlBaseParser$GrantContext);

  public abstract void exitGrant(wvlet.airframe.sql.parser.SqlBaseParser$GrantContext);

  public abstract void enterRevoke(wvlet.airframe.sql.parser.SqlBaseParser$RevokeContext);

  public abstract void exitRevoke(wvlet.airframe.sql.parser.SqlBaseParser$RevokeContext);

  public abstract void enterShowGrants(wvlet.airframe.sql.parser.SqlBaseParser$ShowGrantsContext);

  public abstract void exitShowGrants(wvlet.airframe.sql.parser.SqlBaseParser$ShowGrantsContext);

  public abstract void enterExplain(wvlet.airframe.sql.parser.SqlBaseParser$ExplainContext);

  public abstract void exitExplain(wvlet.airframe.sql.parser.SqlBaseParser$ExplainContext);

  public abstract void enterShowCreateTable(wvlet.airframe.sql.parser.SqlBaseParser$ShowCreateTableContext);

  public abstract void exitShowCreateTable(wvlet.airframe.sql.parser.SqlBaseParser$ShowCreateTableContext);

  public abstract void enterShowCreateView(wvlet.airframe.sql.parser.SqlBaseParser$ShowCreateViewContext);

  public abstract void exitShowCreateView(wvlet.airframe.sql.parser.SqlBaseParser$ShowCreateViewContext);

  public abstract void enterShowTables(wvlet.airframe.sql.parser.SqlBaseParser$ShowTablesContext);

  public abstract void exitShowTables(wvlet.airframe.sql.parser.SqlBaseParser$ShowTablesContext);

  public abstract void enterShowSchemas(wvlet.airframe.sql.parser.SqlBaseParser$ShowSchemasContext);

  public abstract void exitShowSchemas(wvlet.airframe.sql.parser.SqlBaseParser$ShowSchemasContext);

  public abstract void enterShowCatalogs(wvlet.airframe.sql.parser.SqlBaseParser$ShowCatalogsContext);

  public abstract void exitShowCatalogs(wvlet.airframe.sql.parser.SqlBaseParser$ShowCatalogsContext);

  public abstract void enterShowColumns(wvlet.airframe.sql.parser.SqlBaseParser$ShowColumnsContext);

  public abstract void exitShowColumns(wvlet.airframe.sql.parser.SqlBaseParser$ShowColumnsContext);

  public abstract void enterShowStats(wvlet.airframe.sql.parser.SqlBaseParser$ShowStatsContext);

  public abstract void exitShowStats(wvlet.airframe.sql.parser.SqlBaseParser$ShowStatsContext);

  public abstract void enterShowStatsForQuery(wvlet.airframe.sql.parser.SqlBaseParser$ShowStatsForQueryContext);

  public abstract void exitShowStatsForQuery(wvlet.airframe.sql.parser.SqlBaseParser$ShowStatsForQueryContext);

  public abstract void enterShowFunctions(wvlet.airframe.sql.parser.SqlBaseParser$ShowFunctionsContext);

  public abstract void exitShowFunctions(wvlet.airframe.sql.parser.SqlBaseParser$ShowFunctionsContext);

  public abstract void enterShowSession(wvlet.airframe.sql.parser.SqlBaseParser$ShowSessionContext);

  public abstract void exitShowSession(wvlet.airframe.sql.parser.SqlBaseParser$ShowSessionContext);

  public abstract void enterSetSession(wvlet.airframe.sql.parser.SqlBaseParser$SetSessionContext);

  public abstract void exitSetSession(wvlet.airframe.sql.parser.SqlBaseParser$SetSessionContext);

  public abstract void enterResetSession(wvlet.airframe.sql.parser.SqlBaseParser$ResetSessionContext);

  public abstract void exitResetSession(wvlet.airframe.sql.parser.SqlBaseParser$ResetSessionContext);

  public abstract void enterStartTransaction(wvlet.airframe.sql.parser.SqlBaseParser$StartTransactionContext);

  public abstract void exitStartTransaction(wvlet.airframe.sql.parser.SqlBaseParser$StartTransactionContext);

  public abstract void enterCommit(wvlet.airframe.sql.parser.SqlBaseParser$CommitContext);

  public abstract void exitCommit(wvlet.airframe.sql.parser.SqlBaseParser$CommitContext);

  public abstract void enterRollback(wvlet.airframe.sql.parser.SqlBaseParser$RollbackContext);

  public abstract void exitRollback(wvlet.airframe.sql.parser.SqlBaseParser$RollbackContext);

  public abstract void enterShowPartitions(wvlet.airframe.sql.parser.SqlBaseParser$ShowPartitionsContext);

  public abstract void exitShowPartitions(wvlet.airframe.sql.parser.SqlBaseParser$ShowPartitionsContext);

  public abstract void enterPrepare(wvlet.airframe.sql.parser.SqlBaseParser$PrepareContext);

  public abstract void exitPrepare(wvlet.airframe.sql.parser.SqlBaseParser$PrepareContext);

  public abstract void enterDeallocate(wvlet.airframe.sql.parser.SqlBaseParser$DeallocateContext);

  public abstract void exitDeallocate(wvlet.airframe.sql.parser.SqlBaseParser$DeallocateContext);

  public abstract void enterExecute(wvlet.airframe.sql.parser.SqlBaseParser$ExecuteContext);

  public abstract void exitExecute(wvlet.airframe.sql.parser.SqlBaseParser$ExecuteContext);

  public abstract void enterDescribeInput(wvlet.airframe.sql.parser.SqlBaseParser$DescribeInputContext);

  public abstract void exitDescribeInput(wvlet.airframe.sql.parser.SqlBaseParser$DescribeInputContext);

  public abstract void enterDescribeOutput(wvlet.airframe.sql.parser.SqlBaseParser$DescribeOutputContext);

  public abstract void exitDescribeOutput(wvlet.airframe.sql.parser.SqlBaseParser$DescribeOutputContext);

  public abstract void enterQuery(wvlet.airframe.sql.parser.SqlBaseParser$QueryContext);

  public abstract void exitQuery(wvlet.airframe.sql.parser.SqlBaseParser$QueryContext);

  public abstract void enterWith(wvlet.airframe.sql.parser.SqlBaseParser$WithContext);

  public abstract void exitWith(wvlet.airframe.sql.parser.SqlBaseParser$WithContext);

  public abstract void enterTableElement(wvlet.airframe.sql.parser.SqlBaseParser$TableElementContext);

  public abstract void exitTableElement(wvlet.airframe.sql.parser.SqlBaseParser$TableElementContext);

  public abstract void enterColumnDefinition(wvlet.airframe.sql.parser.SqlBaseParser$ColumnDefinitionContext);

  public abstract void exitColumnDefinition(wvlet.airframe.sql.parser.SqlBaseParser$ColumnDefinitionContext);

  public abstract void enterLikeClause(wvlet.airframe.sql.parser.SqlBaseParser$LikeClauseContext);

  public abstract void exitLikeClause(wvlet.airframe.sql.parser.SqlBaseParser$LikeClauseContext);

  public abstract void enterProperties(wvlet.airframe.sql.parser.SqlBaseParser$PropertiesContext);

  public abstract void exitProperties(wvlet.airframe.sql.parser.SqlBaseParser$PropertiesContext);

  public abstract void enterProperty(wvlet.airframe.sql.parser.SqlBaseParser$PropertyContext);

  public abstract void exitProperty(wvlet.airframe.sql.parser.SqlBaseParser$PropertyContext);

  public abstract void enterQueryNoWith(wvlet.airframe.sql.parser.SqlBaseParser$QueryNoWithContext);

  public abstract void exitQueryNoWith(wvlet.airframe.sql.parser.SqlBaseParser$QueryNoWithContext);

  public abstract void enterQueryTermDefault(wvlet.airframe.sql.parser.SqlBaseParser$QueryTermDefaultContext);

  public abstract void exitQueryTermDefault(wvlet.airframe.sql.parser.SqlBaseParser$QueryTermDefaultContext);

  public abstract void enterSetOperation(wvlet.airframe.sql.parser.SqlBaseParser$SetOperationContext);

  public abstract void exitSetOperation(wvlet.airframe.sql.parser.SqlBaseParser$SetOperationContext);

  public abstract void enterQueryPrimaryDefault(wvlet.airframe.sql.parser.SqlBaseParser$QueryPrimaryDefaultContext);

  public abstract void exitQueryPrimaryDefault(wvlet.airframe.sql.parser.SqlBaseParser$QueryPrimaryDefaultContext);

  public abstract void enterTable(wvlet.airframe.sql.parser.SqlBaseParser$TableContext);

  public abstract void exitTable(wvlet.airframe.sql.parser.SqlBaseParser$TableContext);

  public abstract void enterInlineTable(wvlet.airframe.sql.parser.SqlBaseParser$InlineTableContext);

  public abstract void exitInlineTable(wvlet.airframe.sql.parser.SqlBaseParser$InlineTableContext);

  public abstract void enterSubquery(wvlet.airframe.sql.parser.SqlBaseParser$SubqueryContext);

  public abstract void exitSubquery(wvlet.airframe.sql.parser.SqlBaseParser$SubqueryContext);

  public abstract void enterSortItem(wvlet.airframe.sql.parser.SqlBaseParser$SortItemContext);

  public abstract void exitSortItem(wvlet.airframe.sql.parser.SqlBaseParser$SortItemContext);

  public abstract void enterQuerySpecification(wvlet.airframe.sql.parser.SqlBaseParser$QuerySpecificationContext);

  public abstract void exitQuerySpecification(wvlet.airframe.sql.parser.SqlBaseParser$QuerySpecificationContext);

  public abstract void enterGroupBy(wvlet.airframe.sql.parser.SqlBaseParser$GroupByContext);

  public abstract void exitGroupBy(wvlet.airframe.sql.parser.SqlBaseParser$GroupByContext);

  public abstract void enterGroupingSet(wvlet.airframe.sql.parser.SqlBaseParser$GroupingSetContext);

  public abstract void exitGroupingSet(wvlet.airframe.sql.parser.SqlBaseParser$GroupingSetContext);

  public abstract void enterNamedQuery(wvlet.airframe.sql.parser.SqlBaseParser$NamedQueryContext);

  public abstract void exitNamedQuery(wvlet.airframe.sql.parser.SqlBaseParser$NamedQueryContext);

  public abstract void enterSetQuantifier(wvlet.airframe.sql.parser.SqlBaseParser$SetQuantifierContext);

  public abstract void exitSetQuantifier(wvlet.airframe.sql.parser.SqlBaseParser$SetQuantifierContext);

  public abstract void enterSelectSingle(wvlet.airframe.sql.parser.SqlBaseParser$SelectSingleContext);

  public abstract void exitSelectSingle(wvlet.airframe.sql.parser.SqlBaseParser$SelectSingleContext);

  public abstract void enterSelectAll(wvlet.airframe.sql.parser.SqlBaseParser$SelectAllContext);

  public abstract void exitSelectAll(wvlet.airframe.sql.parser.SqlBaseParser$SelectAllContext);

  public abstract void enterRelationDefault(wvlet.airframe.sql.parser.SqlBaseParser$RelationDefaultContext);

  public abstract void exitRelationDefault(wvlet.airframe.sql.parser.SqlBaseParser$RelationDefaultContext);

  public abstract void enterLateralView(wvlet.airframe.sql.parser.SqlBaseParser$LateralViewContext);

  public abstract void exitLateralView(wvlet.airframe.sql.parser.SqlBaseParser$LateralViewContext);

  public abstract void enterJoinRelation(wvlet.airframe.sql.parser.SqlBaseParser$JoinRelationContext);

  public abstract void exitJoinRelation(wvlet.airframe.sql.parser.SqlBaseParser$JoinRelationContext);

  public abstract void enterJoinType(wvlet.airframe.sql.parser.SqlBaseParser$JoinTypeContext);

  public abstract void exitJoinType(wvlet.airframe.sql.parser.SqlBaseParser$JoinTypeContext);

  public abstract void enterJoinCriteria(wvlet.airframe.sql.parser.SqlBaseParser$JoinCriteriaContext);

  public abstract void exitJoinCriteria(wvlet.airframe.sql.parser.SqlBaseParser$JoinCriteriaContext);

  public abstract void enterAliasedRelation(wvlet.airframe.sql.parser.SqlBaseParser$AliasedRelationContext);

  public abstract void exitAliasedRelation(wvlet.airframe.sql.parser.SqlBaseParser$AliasedRelationContext);

  public abstract void enterColumnAliases(wvlet.airframe.sql.parser.SqlBaseParser$ColumnAliasesContext);

  public abstract void exitColumnAliases(wvlet.airframe.sql.parser.SqlBaseParser$ColumnAliasesContext);

  public abstract void enterTableName(wvlet.airframe.sql.parser.SqlBaseParser$TableNameContext);

  public abstract void exitTableName(wvlet.airframe.sql.parser.SqlBaseParser$TableNameContext);

  public abstract void enterSubqueryRelation(wvlet.airframe.sql.parser.SqlBaseParser$SubqueryRelationContext);

  public abstract void exitSubqueryRelation(wvlet.airframe.sql.parser.SqlBaseParser$SubqueryRelationContext);

  public abstract void enterUnnest(wvlet.airframe.sql.parser.SqlBaseParser$UnnestContext);

  public abstract void exitUnnest(wvlet.airframe.sql.parser.SqlBaseParser$UnnestContext);

  public abstract void enterLateral(wvlet.airframe.sql.parser.SqlBaseParser$LateralContext);

  public abstract void exitLateral(wvlet.airframe.sql.parser.SqlBaseParser$LateralContext);

  public abstract void enterParenthesizedRelation(wvlet.airframe.sql.parser.SqlBaseParser$ParenthesizedRelationContext);

  public abstract void exitParenthesizedRelation(wvlet.airframe.sql.parser.SqlBaseParser$ParenthesizedRelationContext);

  public abstract void enterExpression(wvlet.airframe.sql.parser.SqlBaseParser$ExpressionContext);

  public abstract void exitExpression(wvlet.airframe.sql.parser.SqlBaseParser$ExpressionContext);

  public abstract void enterLogicalNot(wvlet.airframe.sql.parser.SqlBaseParser$LogicalNotContext);

  public abstract void exitLogicalNot(wvlet.airframe.sql.parser.SqlBaseParser$LogicalNotContext);

  public abstract void enterBooleanDeafault(wvlet.airframe.sql.parser.SqlBaseParser$BooleanDeafaultContext);

  public abstract void exitBooleanDeafault(wvlet.airframe.sql.parser.SqlBaseParser$BooleanDeafaultContext);

  public abstract void enterLogicalBinary(wvlet.airframe.sql.parser.SqlBaseParser$LogicalBinaryContext);

  public abstract void exitLogicalBinary(wvlet.airframe.sql.parser.SqlBaseParser$LogicalBinaryContext);

  public abstract void enterPredicated(wvlet.airframe.sql.parser.SqlBaseParser$PredicatedContext);

  public abstract void exitPredicated(wvlet.airframe.sql.parser.SqlBaseParser$PredicatedContext);

  public abstract void enterBetween(wvlet.airframe.sql.parser.SqlBaseParser$BetweenContext);

  public abstract void exitBetween(wvlet.airframe.sql.parser.SqlBaseParser$BetweenContext);

  public abstract void enterInList(wvlet.airframe.sql.parser.SqlBaseParser$InListContext);

  public abstract void exitInList(wvlet.airframe.sql.parser.SqlBaseParser$InListContext);

  public abstract void enterInSubquery(wvlet.airframe.sql.parser.SqlBaseParser$InSubqueryContext);

  public abstract void exitInSubquery(wvlet.airframe.sql.parser.SqlBaseParser$InSubqueryContext);

  public abstract void enterLike(wvlet.airframe.sql.parser.SqlBaseParser$LikeContext);

  public abstract void exitLike(wvlet.airframe.sql.parser.SqlBaseParser$LikeContext);

  public abstract void enterNullPredicate(wvlet.airframe.sql.parser.SqlBaseParser$NullPredicateContext);

  public abstract void exitNullPredicate(wvlet.airframe.sql.parser.SqlBaseParser$NullPredicateContext);

  public abstract void enterDistinctFrom(wvlet.airframe.sql.parser.SqlBaseParser$DistinctFromContext);

  public abstract void exitDistinctFrom(wvlet.airframe.sql.parser.SqlBaseParser$DistinctFromContext);

  public abstract void enterValueExpressionDefault(wvlet.airframe.sql.parser.SqlBaseParser$ValueExpressionDefaultContext);

  public abstract void exitValueExpressionDefault(wvlet.airframe.sql.parser.SqlBaseParser$ValueExpressionDefaultContext);

  public abstract void enterConcatenation(wvlet.airframe.sql.parser.SqlBaseParser$ConcatenationContext);

  public abstract void exitConcatenation(wvlet.airframe.sql.parser.SqlBaseParser$ConcatenationContext);

  public abstract void enterComparison(wvlet.airframe.sql.parser.SqlBaseParser$ComparisonContext);

  public abstract void exitComparison(wvlet.airframe.sql.parser.SqlBaseParser$ComparisonContext);

  public abstract void enterArithmeticBinary(wvlet.airframe.sql.parser.SqlBaseParser$ArithmeticBinaryContext);

  public abstract void exitArithmeticBinary(wvlet.airframe.sql.parser.SqlBaseParser$ArithmeticBinaryContext);

  public abstract void enterArithmeticUnary(wvlet.airframe.sql.parser.SqlBaseParser$ArithmeticUnaryContext);

  public abstract void exitArithmeticUnary(wvlet.airframe.sql.parser.SqlBaseParser$ArithmeticUnaryContext);

  public abstract void enterAtTimeZone(wvlet.airframe.sql.parser.SqlBaseParser$AtTimeZoneContext);

  public abstract void exitAtTimeZone(wvlet.airframe.sql.parser.SqlBaseParser$AtTimeZoneContext);

  public abstract void enterDereference(wvlet.airframe.sql.parser.SqlBaseParser$DereferenceContext);

  public abstract void exitDereference(wvlet.airframe.sql.parser.SqlBaseParser$DereferenceContext);

  public abstract void enterTypeConstructor(wvlet.airframe.sql.parser.SqlBaseParser$TypeConstructorContext);

  public abstract void exitTypeConstructor(wvlet.airframe.sql.parser.SqlBaseParser$TypeConstructorContext);

  public abstract void enterSpecialDateTimeFunction(wvlet.airframe.sql.parser.SqlBaseParser$SpecialDateTimeFunctionContext);

  public abstract void exitSpecialDateTimeFunction(wvlet.airframe.sql.parser.SqlBaseParser$SpecialDateTimeFunctionContext);

  public abstract void enterSubstring(wvlet.airframe.sql.parser.SqlBaseParser$SubstringContext);

  public abstract void exitSubstring(wvlet.airframe.sql.parser.SqlBaseParser$SubstringContext);

  public abstract void enterCast(wvlet.airframe.sql.parser.SqlBaseParser$CastContext);

  public abstract void exitCast(wvlet.airframe.sql.parser.SqlBaseParser$CastContext);

  public abstract void enterLambda(wvlet.airframe.sql.parser.SqlBaseParser$LambdaContext);

  public abstract void exitLambda(wvlet.airframe.sql.parser.SqlBaseParser$LambdaContext);

  public abstract void enterParenthesizedExpression(wvlet.airframe.sql.parser.SqlBaseParser$ParenthesizedExpressionContext);

  public abstract void exitParenthesizedExpression(wvlet.airframe.sql.parser.SqlBaseParser$ParenthesizedExpressionContext);

  public abstract void enterParameter(wvlet.airframe.sql.parser.SqlBaseParser$ParameterContext);

  public abstract void exitParameter(wvlet.airframe.sql.parser.SqlBaseParser$ParameterContext);

  public abstract void enterNormalize(wvlet.airframe.sql.parser.SqlBaseParser$NormalizeContext);

  public abstract void exitNormalize(wvlet.airframe.sql.parser.SqlBaseParser$NormalizeContext);

  public abstract void enterIntervalLiteral(wvlet.airframe.sql.parser.SqlBaseParser$IntervalLiteralContext);

  public abstract void exitIntervalLiteral(wvlet.airframe.sql.parser.SqlBaseParser$IntervalLiteralContext);

  public abstract void enterNumericLiteral(wvlet.airframe.sql.parser.SqlBaseParser$NumericLiteralContext);

  public abstract void exitNumericLiteral(wvlet.airframe.sql.parser.SqlBaseParser$NumericLiteralContext);

  public abstract void enterBooleanLiteral(wvlet.airframe.sql.parser.SqlBaseParser$BooleanLiteralContext);

  public abstract void exitBooleanLiteral(wvlet.airframe.sql.parser.SqlBaseParser$BooleanLiteralContext);

  public abstract void enterSimpleCase(wvlet.airframe.sql.parser.SqlBaseParser$SimpleCaseContext);

  public abstract void exitSimpleCase(wvlet.airframe.sql.parser.SqlBaseParser$SimpleCaseContext);

  public abstract void enterColumnReference(wvlet.airframe.sql.parser.SqlBaseParser$ColumnReferenceContext);

  public abstract void exitColumnReference(wvlet.airframe.sql.parser.SqlBaseParser$ColumnReferenceContext);

  public abstract void enterNullLiteral(wvlet.airframe.sql.parser.SqlBaseParser$NullLiteralContext);

  public abstract void exitNullLiteral(wvlet.airframe.sql.parser.SqlBaseParser$NullLiteralContext);

  public abstract void enterRowConstructor(wvlet.airframe.sql.parser.SqlBaseParser$RowConstructorContext);

  public abstract void exitRowConstructor(wvlet.airframe.sql.parser.SqlBaseParser$RowConstructorContext);

  public abstract void enterSubscript(wvlet.airframe.sql.parser.SqlBaseParser$SubscriptContext);

  public abstract void exitSubscript(wvlet.airframe.sql.parser.SqlBaseParser$SubscriptContext);

  public abstract void enterSubqueryExpression(wvlet.airframe.sql.parser.SqlBaseParser$SubqueryExpressionContext);

  public abstract void exitSubqueryExpression(wvlet.airframe.sql.parser.SqlBaseParser$SubqueryExpressionContext);

  public abstract void enterBinaryLiteral(wvlet.airframe.sql.parser.SqlBaseParser$BinaryLiteralContext);

  public abstract void exitBinaryLiteral(wvlet.airframe.sql.parser.SqlBaseParser$BinaryLiteralContext);

  public abstract void enterCurrentUser(wvlet.airframe.sql.parser.SqlBaseParser$CurrentUserContext);

  public abstract void exitCurrentUser(wvlet.airframe.sql.parser.SqlBaseParser$CurrentUserContext);

  public abstract void enterExtract(wvlet.airframe.sql.parser.SqlBaseParser$ExtractContext);

  public abstract void exitExtract(wvlet.airframe.sql.parser.SqlBaseParser$ExtractContext);

  public abstract void enterStringLiteral(wvlet.airframe.sql.parser.SqlBaseParser$StringLiteralContext);

  public abstract void exitStringLiteral(wvlet.airframe.sql.parser.SqlBaseParser$StringLiteralContext);

  public abstract void enterArrayConstructor(wvlet.airframe.sql.parser.SqlBaseParser$ArrayConstructorContext);

  public abstract void exitArrayConstructor(wvlet.airframe.sql.parser.SqlBaseParser$ArrayConstructorContext);

  public abstract void enterFunctionCall(wvlet.airframe.sql.parser.SqlBaseParser$FunctionCallContext);

  public abstract void exitFunctionCall(wvlet.airframe.sql.parser.SqlBaseParser$FunctionCallContext);

  public abstract void enterExists(wvlet.airframe.sql.parser.SqlBaseParser$ExistsContext);

  public abstract void exitExists(wvlet.airframe.sql.parser.SqlBaseParser$ExistsContext);

  public abstract void enterPosition(wvlet.airframe.sql.parser.SqlBaseParser$PositionContext);

  public abstract void exitPosition(wvlet.airframe.sql.parser.SqlBaseParser$PositionContext);

  public abstract void enterSearchedCase(wvlet.airframe.sql.parser.SqlBaseParser$SearchedCaseContext);

  public abstract void exitSearchedCase(wvlet.airframe.sql.parser.SqlBaseParser$SearchedCaseContext);

  public abstract void enterGroupingOperation(wvlet.airframe.sql.parser.SqlBaseParser$GroupingOperationContext);

  public abstract void exitGroupingOperation(wvlet.airframe.sql.parser.SqlBaseParser$GroupingOperationContext);

  public abstract void enterBasicStringLiteral(wvlet.airframe.sql.parser.SqlBaseParser$BasicStringLiteralContext);

  public abstract void exitBasicStringLiteral(wvlet.airframe.sql.parser.SqlBaseParser$BasicStringLiteralContext);

  public abstract void enterUnicodeStringLiteral(wvlet.airframe.sql.parser.SqlBaseParser$UnicodeStringLiteralContext);

  public abstract void exitUnicodeStringLiteral(wvlet.airframe.sql.parser.SqlBaseParser$UnicodeStringLiteralContext);

  public abstract void enterTimeZoneInterval(wvlet.airframe.sql.parser.SqlBaseParser$TimeZoneIntervalContext);

  public abstract void exitTimeZoneInterval(wvlet.airframe.sql.parser.SqlBaseParser$TimeZoneIntervalContext);

  public abstract void enterTimeZoneString(wvlet.airframe.sql.parser.SqlBaseParser$TimeZoneStringContext);

  public abstract void exitTimeZoneString(wvlet.airframe.sql.parser.SqlBaseParser$TimeZoneStringContext);

  public abstract void enterComparisonOperator(wvlet.airframe.sql.parser.SqlBaseParser$ComparisonOperatorContext);

  public abstract void exitComparisonOperator(wvlet.airframe.sql.parser.SqlBaseParser$ComparisonOperatorContext);

  public abstract void enterComparisonQuantifier(wvlet.airframe.sql.parser.SqlBaseParser$ComparisonQuantifierContext);

  public abstract void exitComparisonQuantifier(wvlet.airframe.sql.parser.SqlBaseParser$ComparisonQuantifierContext);

  public abstract void enterBooleanValue(wvlet.airframe.sql.parser.SqlBaseParser$BooleanValueContext);

  public abstract void exitBooleanValue(wvlet.airframe.sql.parser.SqlBaseParser$BooleanValueContext);

  public abstract void enterInterval(wvlet.airframe.sql.parser.SqlBaseParser$IntervalContext);

  public abstract void exitInterval(wvlet.airframe.sql.parser.SqlBaseParser$IntervalContext);

  public abstract void enterIntervalField(wvlet.airframe.sql.parser.SqlBaseParser$IntervalFieldContext);

  public abstract void exitIntervalField(wvlet.airframe.sql.parser.SqlBaseParser$IntervalFieldContext);

  public abstract void enterNormalForm(wvlet.airframe.sql.parser.SqlBaseParser$NormalFormContext);

  public abstract void exitNormalForm(wvlet.airframe.sql.parser.SqlBaseParser$NormalFormContext);

  public abstract void enterType(wvlet.airframe.sql.parser.SqlBaseParser$TypeContext);

  public abstract void exitType(wvlet.airframe.sql.parser.SqlBaseParser$TypeContext);

  public abstract void enterTypeParameter(wvlet.airframe.sql.parser.SqlBaseParser$TypeParameterContext);

  public abstract void exitTypeParameter(wvlet.airframe.sql.parser.SqlBaseParser$TypeParameterContext);

  public abstract void enterBaseType(wvlet.airframe.sql.parser.SqlBaseParser$BaseTypeContext);

  public abstract void exitBaseType(wvlet.airframe.sql.parser.SqlBaseParser$BaseTypeContext);

  public abstract void enterWhenClause(wvlet.airframe.sql.parser.SqlBaseParser$WhenClauseContext);

  public abstract void exitWhenClause(wvlet.airframe.sql.parser.SqlBaseParser$WhenClauseContext);

  public abstract void enterFilter(wvlet.airframe.sql.parser.SqlBaseParser$FilterContext);

  public abstract void exitFilter(wvlet.airframe.sql.parser.SqlBaseParser$FilterContext);

  public abstract void enterOver(wvlet.airframe.sql.parser.SqlBaseParser$OverContext);

  public abstract void exitOver(wvlet.airframe.sql.parser.SqlBaseParser$OverContext);

  public abstract void enterWindowFrame(wvlet.airframe.sql.parser.SqlBaseParser$WindowFrameContext);

  public abstract void exitWindowFrame(wvlet.airframe.sql.parser.SqlBaseParser$WindowFrameContext);

  public abstract void enterUnboundedFrame(wvlet.airframe.sql.parser.SqlBaseParser$UnboundedFrameContext);

  public abstract void exitUnboundedFrame(wvlet.airframe.sql.parser.SqlBaseParser$UnboundedFrameContext);

  public abstract void enterCurrentRowBound(wvlet.airframe.sql.parser.SqlBaseParser$CurrentRowBoundContext);

  public abstract void exitCurrentRowBound(wvlet.airframe.sql.parser.SqlBaseParser$CurrentRowBoundContext);

  public abstract void enterBoundedFrame(wvlet.airframe.sql.parser.SqlBaseParser$BoundedFrameContext);

  public abstract void exitBoundedFrame(wvlet.airframe.sql.parser.SqlBaseParser$BoundedFrameContext);

  public abstract void enterExplainFormat(wvlet.airframe.sql.parser.SqlBaseParser$ExplainFormatContext);

  public abstract void exitExplainFormat(wvlet.airframe.sql.parser.SqlBaseParser$ExplainFormatContext);

  public abstract void enterExplainType(wvlet.airframe.sql.parser.SqlBaseParser$ExplainTypeContext);

  public abstract void exitExplainType(wvlet.airframe.sql.parser.SqlBaseParser$ExplainTypeContext);

  public abstract void enterIsolationLevel(wvlet.airframe.sql.parser.SqlBaseParser$IsolationLevelContext);

  public abstract void exitIsolationLevel(wvlet.airframe.sql.parser.SqlBaseParser$IsolationLevelContext);

  public abstract void enterTransactionAccessMode(wvlet.airframe.sql.parser.SqlBaseParser$TransactionAccessModeContext);

  public abstract void exitTransactionAccessMode(wvlet.airframe.sql.parser.SqlBaseParser$TransactionAccessModeContext);

  public abstract void enterReadUncommitted(wvlet.airframe.sql.parser.SqlBaseParser$ReadUncommittedContext);

  public abstract void exitReadUncommitted(wvlet.airframe.sql.parser.SqlBaseParser$ReadUncommittedContext);

  public abstract void enterReadCommitted(wvlet.airframe.sql.parser.SqlBaseParser$ReadCommittedContext);

  public abstract void exitReadCommitted(wvlet.airframe.sql.parser.SqlBaseParser$ReadCommittedContext);

  public abstract void enterRepeatableRead(wvlet.airframe.sql.parser.SqlBaseParser$RepeatableReadContext);

  public abstract void exitRepeatableRead(wvlet.airframe.sql.parser.SqlBaseParser$RepeatableReadContext);

  public abstract void enterSerializable(wvlet.airframe.sql.parser.SqlBaseParser$SerializableContext);

  public abstract void exitSerializable(wvlet.airframe.sql.parser.SqlBaseParser$SerializableContext);

  public abstract void enterPositionalArgument(wvlet.airframe.sql.parser.SqlBaseParser$PositionalArgumentContext);

  public abstract void exitPositionalArgument(wvlet.airframe.sql.parser.SqlBaseParser$PositionalArgumentContext);

  public abstract void enterNamedArgument(wvlet.airframe.sql.parser.SqlBaseParser$NamedArgumentContext);

  public abstract void exitNamedArgument(wvlet.airframe.sql.parser.SqlBaseParser$NamedArgumentContext);

  public abstract void enterPrivilege(wvlet.airframe.sql.parser.SqlBaseParser$PrivilegeContext);

  public abstract void exitPrivilege(wvlet.airframe.sql.parser.SqlBaseParser$PrivilegeContext);

  public abstract void enterQualifiedName(wvlet.airframe.sql.parser.SqlBaseParser$QualifiedNameContext);

  public abstract void exitQualifiedName(wvlet.airframe.sql.parser.SqlBaseParser$QualifiedNameContext);

  public abstract void enterUnquotedIdentifier(wvlet.airframe.sql.parser.SqlBaseParser$UnquotedIdentifierContext);

  public abstract void exitUnquotedIdentifier(wvlet.airframe.sql.parser.SqlBaseParser$UnquotedIdentifierContext);

  public abstract void enterQuotedIdentifier(wvlet.airframe.sql.parser.SqlBaseParser$QuotedIdentifierContext);

  public abstract void exitQuotedIdentifier(wvlet.airframe.sql.parser.SqlBaseParser$QuotedIdentifierContext);

  public abstract void enterBackQuotedIdentifier(wvlet.airframe.sql.parser.SqlBaseParser$BackQuotedIdentifierContext);

  public abstract void exitBackQuotedIdentifier(wvlet.airframe.sql.parser.SqlBaseParser$BackQuotedIdentifierContext);

  public abstract void enterDigitIdentifier(wvlet.airframe.sql.parser.SqlBaseParser$DigitIdentifierContext);

  public abstract void exitDigitIdentifier(wvlet.airframe.sql.parser.SqlBaseParser$DigitIdentifierContext);

  public abstract void enterDecimalLiteral(wvlet.airframe.sql.parser.SqlBaseParser$DecimalLiteralContext);

  public abstract void exitDecimalLiteral(wvlet.airframe.sql.parser.SqlBaseParser$DecimalLiteralContext);

  public abstract void enterDoubleLiteral(wvlet.airframe.sql.parser.SqlBaseParser$DoubleLiteralContext);

  public abstract void exitDoubleLiteral(wvlet.airframe.sql.parser.SqlBaseParser$DoubleLiteralContext);

  public abstract void enterIntegerLiteral(wvlet.airframe.sql.parser.SqlBaseParser$IntegerLiteralContext);

  public abstract void exitIntegerLiteral(wvlet.airframe.sql.parser.SqlBaseParser$IntegerLiteralContext);

  public abstract void enterNonReserved(wvlet.airframe.sql.parser.SqlBaseParser$NonReservedContext);

  public abstract void exitNonReserved(wvlet.airframe.sql.parser.SqlBaseParser$NonReservedContext);
}
