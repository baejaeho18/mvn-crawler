Compiled from "SqlBaseVisitor.java"
public interface wvlet.airframe.sql.parser.SqlBaseVisitor<T> extends org.antlr.v4.runtime.tree.ParseTreeVisitor<T> {
  public abstract T visitSingleStatement(wvlet.airframe.sql.parser.SqlBaseParser$SingleStatementContext);

  public abstract T visitSingleExpression(wvlet.airframe.sql.parser.SqlBaseParser$SingleExpressionContext);

  public abstract T visitStatementDefault(wvlet.airframe.sql.parser.SqlBaseParser$StatementDefaultContext);

  public abstract T visitUse(wvlet.airframe.sql.parser.SqlBaseParser$UseContext);

  public abstract T visitCreateSchema(wvlet.airframe.sql.parser.SqlBaseParser$CreateSchemaContext);

  public abstract T visitDropSchema(wvlet.airframe.sql.parser.SqlBaseParser$DropSchemaContext);

  public abstract T visitRenameSchema(wvlet.airframe.sql.parser.SqlBaseParser$RenameSchemaContext);

  public abstract T visitCreateTableAsSelect(wvlet.airframe.sql.parser.SqlBaseParser$CreateTableAsSelectContext);

  public abstract T visitCreateTable(wvlet.airframe.sql.parser.SqlBaseParser$CreateTableContext);

  public abstract T visitDropTable(wvlet.airframe.sql.parser.SqlBaseParser$DropTableContext);

  public abstract T visitInsertInto(wvlet.airframe.sql.parser.SqlBaseParser$InsertIntoContext);

  public abstract T visitDelete(wvlet.airframe.sql.parser.SqlBaseParser$DeleteContext);

  public abstract T visitRenameTable(wvlet.airframe.sql.parser.SqlBaseParser$RenameTableContext);

  public abstract T visitRenameColumn(wvlet.airframe.sql.parser.SqlBaseParser$RenameColumnContext);

  public abstract T visitDropColumn(wvlet.airframe.sql.parser.SqlBaseParser$DropColumnContext);

  public abstract T visitAddColumn(wvlet.airframe.sql.parser.SqlBaseParser$AddColumnContext);

  public abstract T visitCreateView(wvlet.airframe.sql.parser.SqlBaseParser$CreateViewContext);

  public abstract T visitDropView(wvlet.airframe.sql.parser.SqlBaseParser$DropViewContext);

  public abstract T visitCall(wvlet.airframe.sql.parser.SqlBaseParser$CallContext);

  public abstract T visitGrant(wvlet.airframe.sql.parser.SqlBaseParser$GrantContext);

  public abstract T visitRevoke(wvlet.airframe.sql.parser.SqlBaseParser$RevokeContext);

  public abstract T visitShowGrants(wvlet.airframe.sql.parser.SqlBaseParser$ShowGrantsContext);

  public abstract T visitExplain(wvlet.airframe.sql.parser.SqlBaseParser$ExplainContext);

  public abstract T visitShowCreateTable(wvlet.airframe.sql.parser.SqlBaseParser$ShowCreateTableContext);

  public abstract T visitShowCreateView(wvlet.airframe.sql.parser.SqlBaseParser$ShowCreateViewContext);

  public abstract T visitShowTables(wvlet.airframe.sql.parser.SqlBaseParser$ShowTablesContext);

  public abstract T visitShowSchemas(wvlet.airframe.sql.parser.SqlBaseParser$ShowSchemasContext);

  public abstract T visitShowCatalogs(wvlet.airframe.sql.parser.SqlBaseParser$ShowCatalogsContext);

  public abstract T visitShowColumns(wvlet.airframe.sql.parser.SqlBaseParser$ShowColumnsContext);

  public abstract T visitShowStats(wvlet.airframe.sql.parser.SqlBaseParser$ShowStatsContext);

  public abstract T visitShowStatsForQuery(wvlet.airframe.sql.parser.SqlBaseParser$ShowStatsForQueryContext);

  public abstract T visitShowFunctions(wvlet.airframe.sql.parser.SqlBaseParser$ShowFunctionsContext);

  public abstract T visitShowSession(wvlet.airframe.sql.parser.SqlBaseParser$ShowSessionContext);

  public abstract T visitSetSession(wvlet.airframe.sql.parser.SqlBaseParser$SetSessionContext);

  public abstract T visitResetSession(wvlet.airframe.sql.parser.SqlBaseParser$ResetSessionContext);

  public abstract T visitStartTransaction(wvlet.airframe.sql.parser.SqlBaseParser$StartTransactionContext);

  public abstract T visitCommit(wvlet.airframe.sql.parser.SqlBaseParser$CommitContext);

  public abstract T visitRollback(wvlet.airframe.sql.parser.SqlBaseParser$RollbackContext);

  public abstract T visitShowPartitions(wvlet.airframe.sql.parser.SqlBaseParser$ShowPartitionsContext);

  public abstract T visitPrepare(wvlet.airframe.sql.parser.SqlBaseParser$PrepareContext);

  public abstract T visitDeallocate(wvlet.airframe.sql.parser.SqlBaseParser$DeallocateContext);

  public abstract T visitExecute(wvlet.airframe.sql.parser.SqlBaseParser$ExecuteContext);

  public abstract T visitDescribeInput(wvlet.airframe.sql.parser.SqlBaseParser$DescribeInputContext);

  public abstract T visitDescribeOutput(wvlet.airframe.sql.parser.SqlBaseParser$DescribeOutputContext);

  public abstract T visitQuery(wvlet.airframe.sql.parser.SqlBaseParser$QueryContext);

  public abstract T visitWith(wvlet.airframe.sql.parser.SqlBaseParser$WithContext);

  public abstract T visitTableElement(wvlet.airframe.sql.parser.SqlBaseParser$TableElementContext);

  public abstract T visitColumnDefinition(wvlet.airframe.sql.parser.SqlBaseParser$ColumnDefinitionContext);

  public abstract T visitLikeClause(wvlet.airframe.sql.parser.SqlBaseParser$LikeClauseContext);

  public abstract T visitProperties(wvlet.airframe.sql.parser.SqlBaseParser$PropertiesContext);

  public abstract T visitProperty(wvlet.airframe.sql.parser.SqlBaseParser$PropertyContext);

  public abstract T visitQueryNoWith(wvlet.airframe.sql.parser.SqlBaseParser$QueryNoWithContext);

  public abstract T visitQueryTermDefault(wvlet.airframe.sql.parser.SqlBaseParser$QueryTermDefaultContext);

  public abstract T visitSetOperation(wvlet.airframe.sql.parser.SqlBaseParser$SetOperationContext);

  public abstract T visitQueryPrimaryDefault(wvlet.airframe.sql.parser.SqlBaseParser$QueryPrimaryDefaultContext);

  public abstract T visitTable(wvlet.airframe.sql.parser.SqlBaseParser$TableContext);

  public abstract T visitInlineTable(wvlet.airframe.sql.parser.SqlBaseParser$InlineTableContext);

  public abstract T visitSubquery(wvlet.airframe.sql.parser.SqlBaseParser$SubqueryContext);

  public abstract T visitSortItem(wvlet.airframe.sql.parser.SqlBaseParser$SortItemContext);

  public abstract T visitQuerySpecification(wvlet.airframe.sql.parser.SqlBaseParser$QuerySpecificationContext);

  public abstract T visitGroupBy(wvlet.airframe.sql.parser.SqlBaseParser$GroupByContext);

  public abstract T visitGroupingSet(wvlet.airframe.sql.parser.SqlBaseParser$GroupingSetContext);

  public abstract T visitNamedQuery(wvlet.airframe.sql.parser.SqlBaseParser$NamedQueryContext);

  public abstract T visitSetQuantifier(wvlet.airframe.sql.parser.SqlBaseParser$SetQuantifierContext);

  public abstract T visitSelectSingle(wvlet.airframe.sql.parser.SqlBaseParser$SelectSingleContext);

  public abstract T visitSelectAll(wvlet.airframe.sql.parser.SqlBaseParser$SelectAllContext);

  public abstract T visitRelationDefault(wvlet.airframe.sql.parser.SqlBaseParser$RelationDefaultContext);

  public abstract T visitLateralView(wvlet.airframe.sql.parser.SqlBaseParser$LateralViewContext);

  public abstract T visitJoinRelation(wvlet.airframe.sql.parser.SqlBaseParser$JoinRelationContext);

  public abstract T visitJoinType(wvlet.airframe.sql.parser.SqlBaseParser$JoinTypeContext);

  public abstract T visitJoinCriteria(wvlet.airframe.sql.parser.SqlBaseParser$JoinCriteriaContext);

  public abstract T visitAliasedRelation(wvlet.airframe.sql.parser.SqlBaseParser$AliasedRelationContext);

  public abstract T visitColumnAliases(wvlet.airframe.sql.parser.SqlBaseParser$ColumnAliasesContext);

  public abstract T visitTableName(wvlet.airframe.sql.parser.SqlBaseParser$TableNameContext);

  public abstract T visitSubqueryRelation(wvlet.airframe.sql.parser.SqlBaseParser$SubqueryRelationContext);

  public abstract T visitUnnest(wvlet.airframe.sql.parser.SqlBaseParser$UnnestContext);

  public abstract T visitLateral(wvlet.airframe.sql.parser.SqlBaseParser$LateralContext);

  public abstract T visitParenthesizedRelation(wvlet.airframe.sql.parser.SqlBaseParser$ParenthesizedRelationContext);

  public abstract T visitExpression(wvlet.airframe.sql.parser.SqlBaseParser$ExpressionContext);

  public abstract T visitLogicalNot(wvlet.airframe.sql.parser.SqlBaseParser$LogicalNotContext);

  public abstract T visitBooleanDeafault(wvlet.airframe.sql.parser.SqlBaseParser$BooleanDeafaultContext);

  public abstract T visitLogicalBinary(wvlet.airframe.sql.parser.SqlBaseParser$LogicalBinaryContext);

  public abstract T visitPredicated(wvlet.airframe.sql.parser.SqlBaseParser$PredicatedContext);

  public abstract T visitBetween(wvlet.airframe.sql.parser.SqlBaseParser$BetweenContext);

  public abstract T visitInList(wvlet.airframe.sql.parser.SqlBaseParser$InListContext);

  public abstract T visitInSubquery(wvlet.airframe.sql.parser.SqlBaseParser$InSubqueryContext);

  public abstract T visitLike(wvlet.airframe.sql.parser.SqlBaseParser$LikeContext);

  public abstract T visitNullPredicate(wvlet.airframe.sql.parser.SqlBaseParser$NullPredicateContext);

  public abstract T visitDistinctFrom(wvlet.airframe.sql.parser.SqlBaseParser$DistinctFromContext);

  public abstract T visitValueExpressionDefault(wvlet.airframe.sql.parser.SqlBaseParser$ValueExpressionDefaultContext);

  public abstract T visitConcatenation(wvlet.airframe.sql.parser.SqlBaseParser$ConcatenationContext);

  public abstract T visitComparison(wvlet.airframe.sql.parser.SqlBaseParser$ComparisonContext);

  public abstract T visitArithmeticBinary(wvlet.airframe.sql.parser.SqlBaseParser$ArithmeticBinaryContext);

  public abstract T visitArithmeticUnary(wvlet.airframe.sql.parser.SqlBaseParser$ArithmeticUnaryContext);

  public abstract T visitAtTimeZone(wvlet.airframe.sql.parser.SqlBaseParser$AtTimeZoneContext);

  public abstract T visitDereference(wvlet.airframe.sql.parser.SqlBaseParser$DereferenceContext);

  public abstract T visitTypeConstructor(wvlet.airframe.sql.parser.SqlBaseParser$TypeConstructorContext);

  public abstract T visitSpecialDateTimeFunction(wvlet.airframe.sql.parser.SqlBaseParser$SpecialDateTimeFunctionContext);

  public abstract T visitSubstring(wvlet.airframe.sql.parser.SqlBaseParser$SubstringContext);

  public abstract T visitCast(wvlet.airframe.sql.parser.SqlBaseParser$CastContext);

  public abstract T visitLambda(wvlet.airframe.sql.parser.SqlBaseParser$LambdaContext);

  public abstract T visitParenthesizedExpression(wvlet.airframe.sql.parser.SqlBaseParser$ParenthesizedExpressionContext);

  public abstract T visitParameter(wvlet.airframe.sql.parser.SqlBaseParser$ParameterContext);

  public abstract T visitNormalize(wvlet.airframe.sql.parser.SqlBaseParser$NormalizeContext);

  public abstract T visitIntervalLiteral(wvlet.airframe.sql.parser.SqlBaseParser$IntervalLiteralContext);

  public abstract T visitNumericLiteral(wvlet.airframe.sql.parser.SqlBaseParser$NumericLiteralContext);

  public abstract T visitBooleanLiteral(wvlet.airframe.sql.parser.SqlBaseParser$BooleanLiteralContext);

  public abstract T visitSimpleCase(wvlet.airframe.sql.parser.SqlBaseParser$SimpleCaseContext);

  public abstract T visitColumnReference(wvlet.airframe.sql.parser.SqlBaseParser$ColumnReferenceContext);

  public abstract T visitNullLiteral(wvlet.airframe.sql.parser.SqlBaseParser$NullLiteralContext);

  public abstract T visitRowConstructor(wvlet.airframe.sql.parser.SqlBaseParser$RowConstructorContext);

  public abstract T visitSubscript(wvlet.airframe.sql.parser.SqlBaseParser$SubscriptContext);

  public abstract T visitSubqueryExpression(wvlet.airframe.sql.parser.SqlBaseParser$SubqueryExpressionContext);

  public abstract T visitBinaryLiteral(wvlet.airframe.sql.parser.SqlBaseParser$BinaryLiteralContext);

  public abstract T visitCurrentUser(wvlet.airframe.sql.parser.SqlBaseParser$CurrentUserContext);

  public abstract T visitExtract(wvlet.airframe.sql.parser.SqlBaseParser$ExtractContext);

  public abstract T visitStringLiteral(wvlet.airframe.sql.parser.SqlBaseParser$StringLiteralContext);

  public abstract T visitArrayConstructor(wvlet.airframe.sql.parser.SqlBaseParser$ArrayConstructorContext);

  public abstract T visitFunctionCall(wvlet.airframe.sql.parser.SqlBaseParser$FunctionCallContext);

  public abstract T visitExists(wvlet.airframe.sql.parser.SqlBaseParser$ExistsContext);

  public abstract T visitPosition(wvlet.airframe.sql.parser.SqlBaseParser$PositionContext);

  public abstract T visitSearchedCase(wvlet.airframe.sql.parser.SqlBaseParser$SearchedCaseContext);

  public abstract T visitGroupingOperation(wvlet.airframe.sql.parser.SqlBaseParser$GroupingOperationContext);

  public abstract T visitBasicStringLiteral(wvlet.airframe.sql.parser.SqlBaseParser$BasicStringLiteralContext);

  public abstract T visitUnicodeStringLiteral(wvlet.airframe.sql.parser.SqlBaseParser$UnicodeStringLiteralContext);

  public abstract T visitTimeZoneInterval(wvlet.airframe.sql.parser.SqlBaseParser$TimeZoneIntervalContext);

  public abstract T visitTimeZoneString(wvlet.airframe.sql.parser.SqlBaseParser$TimeZoneStringContext);

  public abstract T visitComparisonOperator(wvlet.airframe.sql.parser.SqlBaseParser$ComparisonOperatorContext);

  public abstract T visitComparisonQuantifier(wvlet.airframe.sql.parser.SqlBaseParser$ComparisonQuantifierContext);

  public abstract T visitBooleanValue(wvlet.airframe.sql.parser.SqlBaseParser$BooleanValueContext);

  public abstract T visitInterval(wvlet.airframe.sql.parser.SqlBaseParser$IntervalContext);

  public abstract T visitIntervalField(wvlet.airframe.sql.parser.SqlBaseParser$IntervalFieldContext);

  public abstract T visitNormalForm(wvlet.airframe.sql.parser.SqlBaseParser$NormalFormContext);

  public abstract T visitType(wvlet.airframe.sql.parser.SqlBaseParser$TypeContext);

  public abstract T visitTypeParameter(wvlet.airframe.sql.parser.SqlBaseParser$TypeParameterContext);

  public abstract T visitBaseType(wvlet.airframe.sql.parser.SqlBaseParser$BaseTypeContext);

  public abstract T visitWhenClause(wvlet.airframe.sql.parser.SqlBaseParser$WhenClauseContext);

  public abstract T visitFilter(wvlet.airframe.sql.parser.SqlBaseParser$FilterContext);

  public abstract T visitOver(wvlet.airframe.sql.parser.SqlBaseParser$OverContext);

  public abstract T visitWindowFrame(wvlet.airframe.sql.parser.SqlBaseParser$WindowFrameContext);

  public abstract T visitUnboundedFrame(wvlet.airframe.sql.parser.SqlBaseParser$UnboundedFrameContext);

  public abstract T visitCurrentRowBound(wvlet.airframe.sql.parser.SqlBaseParser$CurrentRowBoundContext);

  public abstract T visitBoundedFrame(wvlet.airframe.sql.parser.SqlBaseParser$BoundedFrameContext);

  public abstract T visitExplainFormat(wvlet.airframe.sql.parser.SqlBaseParser$ExplainFormatContext);

  public abstract T visitExplainType(wvlet.airframe.sql.parser.SqlBaseParser$ExplainTypeContext);

  public abstract T visitIsolationLevel(wvlet.airframe.sql.parser.SqlBaseParser$IsolationLevelContext);

  public abstract T visitTransactionAccessMode(wvlet.airframe.sql.parser.SqlBaseParser$TransactionAccessModeContext);

  public abstract T visitReadUncommitted(wvlet.airframe.sql.parser.SqlBaseParser$ReadUncommittedContext);

  public abstract T visitReadCommitted(wvlet.airframe.sql.parser.SqlBaseParser$ReadCommittedContext);

  public abstract T visitRepeatableRead(wvlet.airframe.sql.parser.SqlBaseParser$RepeatableReadContext);

  public abstract T visitSerializable(wvlet.airframe.sql.parser.SqlBaseParser$SerializableContext);

  public abstract T visitPositionalArgument(wvlet.airframe.sql.parser.SqlBaseParser$PositionalArgumentContext);

  public abstract T visitNamedArgument(wvlet.airframe.sql.parser.SqlBaseParser$NamedArgumentContext);

  public abstract T visitPrivilege(wvlet.airframe.sql.parser.SqlBaseParser$PrivilegeContext);

  public abstract T visitQualifiedName(wvlet.airframe.sql.parser.SqlBaseParser$QualifiedNameContext);

  public abstract T visitUnquotedIdentifier(wvlet.airframe.sql.parser.SqlBaseParser$UnquotedIdentifierContext);

  public abstract T visitQuotedIdentifier(wvlet.airframe.sql.parser.SqlBaseParser$QuotedIdentifierContext);

  public abstract T visitBackQuotedIdentifier(wvlet.airframe.sql.parser.SqlBaseParser$BackQuotedIdentifierContext);

  public abstract T visitDigitIdentifier(wvlet.airframe.sql.parser.SqlBaseParser$DigitIdentifierContext);

  public abstract T visitDecimalLiteral(wvlet.airframe.sql.parser.SqlBaseParser$DecimalLiteralContext);

  public abstract T visitDoubleLiteral(wvlet.airframe.sql.parser.SqlBaseParser$DoubleLiteralContext);

  public abstract T visitIntegerLiteral(wvlet.airframe.sql.parser.SqlBaseParser$IntegerLiteralContext);

  public abstract T visitNonReserved(wvlet.airframe.sql.parser.SqlBaseParser$NonReservedContext);
}
