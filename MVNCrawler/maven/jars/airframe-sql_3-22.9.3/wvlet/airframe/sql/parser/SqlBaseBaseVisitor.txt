Compiled from "SqlBaseBaseVisitor.java"
public class wvlet.airframe.sql.parser.SqlBaseBaseVisitor<T> extends org.antlr.v4.runtime.tree.AbstractParseTreeVisitor<T> implements wvlet.airframe.sql.parser.SqlBaseVisitor<T> {
  public wvlet.airframe.sql.parser.SqlBaseBaseVisitor();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/antlr/v4/runtime/tree/AbstractParseTreeVisitor."<init>":()V
       4: return

  public T visitSingleStatement(wvlet.airframe.sql.parser.SqlBaseParser$SingleStatementContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitSingleExpression(wvlet.airframe.sql.parser.SqlBaseParser$SingleExpressionContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitStatementDefault(wvlet.airframe.sql.parser.SqlBaseParser$StatementDefaultContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitUse(wvlet.airframe.sql.parser.SqlBaseParser$UseContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitCreateSchema(wvlet.airframe.sql.parser.SqlBaseParser$CreateSchemaContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitDropSchema(wvlet.airframe.sql.parser.SqlBaseParser$DropSchemaContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitRenameSchema(wvlet.airframe.sql.parser.SqlBaseParser$RenameSchemaContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitCreateTableAsSelect(wvlet.airframe.sql.parser.SqlBaseParser$CreateTableAsSelectContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitCreateTable(wvlet.airframe.sql.parser.SqlBaseParser$CreateTableContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitDropTable(wvlet.airframe.sql.parser.SqlBaseParser$DropTableContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitInsertInto(wvlet.airframe.sql.parser.SqlBaseParser$InsertIntoContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitDelete(wvlet.airframe.sql.parser.SqlBaseParser$DeleteContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitRenameTable(wvlet.airframe.sql.parser.SqlBaseParser$RenameTableContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitRenameColumn(wvlet.airframe.sql.parser.SqlBaseParser$RenameColumnContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitDropColumn(wvlet.airframe.sql.parser.SqlBaseParser$DropColumnContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitAddColumn(wvlet.airframe.sql.parser.SqlBaseParser$AddColumnContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitCreateView(wvlet.airframe.sql.parser.SqlBaseParser$CreateViewContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitDropView(wvlet.airframe.sql.parser.SqlBaseParser$DropViewContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitCall(wvlet.airframe.sql.parser.SqlBaseParser$CallContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitGrant(wvlet.airframe.sql.parser.SqlBaseParser$GrantContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitRevoke(wvlet.airframe.sql.parser.SqlBaseParser$RevokeContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitShowGrants(wvlet.airframe.sql.parser.SqlBaseParser$ShowGrantsContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitExplain(wvlet.airframe.sql.parser.SqlBaseParser$ExplainContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitShowCreateTable(wvlet.airframe.sql.parser.SqlBaseParser$ShowCreateTableContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitShowCreateView(wvlet.airframe.sql.parser.SqlBaseParser$ShowCreateViewContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitShowTables(wvlet.airframe.sql.parser.SqlBaseParser$ShowTablesContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitShowSchemas(wvlet.airframe.sql.parser.SqlBaseParser$ShowSchemasContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitShowCatalogs(wvlet.airframe.sql.parser.SqlBaseParser$ShowCatalogsContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitShowColumns(wvlet.airframe.sql.parser.SqlBaseParser$ShowColumnsContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitShowStats(wvlet.airframe.sql.parser.SqlBaseParser$ShowStatsContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitShowStatsForQuery(wvlet.airframe.sql.parser.SqlBaseParser$ShowStatsForQueryContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitShowFunctions(wvlet.airframe.sql.parser.SqlBaseParser$ShowFunctionsContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitShowSession(wvlet.airframe.sql.parser.SqlBaseParser$ShowSessionContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitSetSession(wvlet.airframe.sql.parser.SqlBaseParser$SetSessionContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitResetSession(wvlet.airframe.sql.parser.SqlBaseParser$ResetSessionContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitStartTransaction(wvlet.airframe.sql.parser.SqlBaseParser$StartTransactionContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitCommit(wvlet.airframe.sql.parser.SqlBaseParser$CommitContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitRollback(wvlet.airframe.sql.parser.SqlBaseParser$RollbackContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitShowPartitions(wvlet.airframe.sql.parser.SqlBaseParser$ShowPartitionsContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitPrepare(wvlet.airframe.sql.parser.SqlBaseParser$PrepareContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitDeallocate(wvlet.airframe.sql.parser.SqlBaseParser$DeallocateContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitExecute(wvlet.airframe.sql.parser.SqlBaseParser$ExecuteContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitDescribeInput(wvlet.airframe.sql.parser.SqlBaseParser$DescribeInputContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitDescribeOutput(wvlet.airframe.sql.parser.SqlBaseParser$DescribeOutputContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitQuery(wvlet.airframe.sql.parser.SqlBaseParser$QueryContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitWith(wvlet.airframe.sql.parser.SqlBaseParser$WithContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitTableElement(wvlet.airframe.sql.parser.SqlBaseParser$TableElementContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitColumnDefinition(wvlet.airframe.sql.parser.SqlBaseParser$ColumnDefinitionContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitLikeClause(wvlet.airframe.sql.parser.SqlBaseParser$LikeClauseContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitProperties(wvlet.airframe.sql.parser.SqlBaseParser$PropertiesContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitProperty(wvlet.airframe.sql.parser.SqlBaseParser$PropertyContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitQueryNoWith(wvlet.airframe.sql.parser.SqlBaseParser$QueryNoWithContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitQueryTermDefault(wvlet.airframe.sql.parser.SqlBaseParser$QueryTermDefaultContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitSetOperation(wvlet.airframe.sql.parser.SqlBaseParser$SetOperationContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitQueryPrimaryDefault(wvlet.airframe.sql.parser.SqlBaseParser$QueryPrimaryDefaultContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitTable(wvlet.airframe.sql.parser.SqlBaseParser$TableContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitInlineTable(wvlet.airframe.sql.parser.SqlBaseParser$InlineTableContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitSubquery(wvlet.airframe.sql.parser.SqlBaseParser$SubqueryContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitSortItem(wvlet.airframe.sql.parser.SqlBaseParser$SortItemContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitQuerySpecification(wvlet.airframe.sql.parser.SqlBaseParser$QuerySpecificationContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitGroupBy(wvlet.airframe.sql.parser.SqlBaseParser$GroupByContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitGroupingSet(wvlet.airframe.sql.parser.SqlBaseParser$GroupingSetContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitNamedQuery(wvlet.airframe.sql.parser.SqlBaseParser$NamedQueryContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitSetQuantifier(wvlet.airframe.sql.parser.SqlBaseParser$SetQuantifierContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitSelectSingle(wvlet.airframe.sql.parser.SqlBaseParser$SelectSingleContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitSelectAll(wvlet.airframe.sql.parser.SqlBaseParser$SelectAllContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitRelationDefault(wvlet.airframe.sql.parser.SqlBaseParser$RelationDefaultContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitLateralView(wvlet.airframe.sql.parser.SqlBaseParser$LateralViewContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitJoinRelation(wvlet.airframe.sql.parser.SqlBaseParser$JoinRelationContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitJoinType(wvlet.airframe.sql.parser.SqlBaseParser$JoinTypeContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitJoinCriteria(wvlet.airframe.sql.parser.SqlBaseParser$JoinCriteriaContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitAliasedRelation(wvlet.airframe.sql.parser.SqlBaseParser$AliasedRelationContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitColumnAliases(wvlet.airframe.sql.parser.SqlBaseParser$ColumnAliasesContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitTableName(wvlet.airframe.sql.parser.SqlBaseParser$TableNameContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitSubqueryRelation(wvlet.airframe.sql.parser.SqlBaseParser$SubqueryRelationContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitUnnest(wvlet.airframe.sql.parser.SqlBaseParser$UnnestContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitLateral(wvlet.airframe.sql.parser.SqlBaseParser$LateralContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitParenthesizedRelation(wvlet.airframe.sql.parser.SqlBaseParser$ParenthesizedRelationContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitExpression(wvlet.airframe.sql.parser.SqlBaseParser$ExpressionContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitLogicalNot(wvlet.airframe.sql.parser.SqlBaseParser$LogicalNotContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitBooleanDeafault(wvlet.airframe.sql.parser.SqlBaseParser$BooleanDeafaultContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitLogicalBinary(wvlet.airframe.sql.parser.SqlBaseParser$LogicalBinaryContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitPredicated(wvlet.airframe.sql.parser.SqlBaseParser$PredicatedContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitBetween(wvlet.airframe.sql.parser.SqlBaseParser$BetweenContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitInList(wvlet.airframe.sql.parser.SqlBaseParser$InListContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitInSubquery(wvlet.airframe.sql.parser.SqlBaseParser$InSubqueryContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitLike(wvlet.airframe.sql.parser.SqlBaseParser$LikeContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitNullPredicate(wvlet.airframe.sql.parser.SqlBaseParser$NullPredicateContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitDistinctFrom(wvlet.airframe.sql.parser.SqlBaseParser$DistinctFromContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitValueExpressionDefault(wvlet.airframe.sql.parser.SqlBaseParser$ValueExpressionDefaultContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitConcatenation(wvlet.airframe.sql.parser.SqlBaseParser$ConcatenationContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitComparison(wvlet.airframe.sql.parser.SqlBaseParser$ComparisonContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitArithmeticBinary(wvlet.airframe.sql.parser.SqlBaseParser$ArithmeticBinaryContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitArithmeticUnary(wvlet.airframe.sql.parser.SqlBaseParser$ArithmeticUnaryContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitAtTimeZone(wvlet.airframe.sql.parser.SqlBaseParser$AtTimeZoneContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitDereference(wvlet.airframe.sql.parser.SqlBaseParser$DereferenceContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitTypeConstructor(wvlet.airframe.sql.parser.SqlBaseParser$TypeConstructorContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitSpecialDateTimeFunction(wvlet.airframe.sql.parser.SqlBaseParser$SpecialDateTimeFunctionContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitSubstring(wvlet.airframe.sql.parser.SqlBaseParser$SubstringContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitCast(wvlet.airframe.sql.parser.SqlBaseParser$CastContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitLambda(wvlet.airframe.sql.parser.SqlBaseParser$LambdaContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitParenthesizedExpression(wvlet.airframe.sql.parser.SqlBaseParser$ParenthesizedExpressionContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitParameter(wvlet.airframe.sql.parser.SqlBaseParser$ParameterContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitNormalize(wvlet.airframe.sql.parser.SqlBaseParser$NormalizeContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitIntervalLiteral(wvlet.airframe.sql.parser.SqlBaseParser$IntervalLiteralContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitNumericLiteral(wvlet.airframe.sql.parser.SqlBaseParser$NumericLiteralContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitBooleanLiteral(wvlet.airframe.sql.parser.SqlBaseParser$BooleanLiteralContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitSimpleCase(wvlet.airframe.sql.parser.SqlBaseParser$SimpleCaseContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitColumnReference(wvlet.airframe.sql.parser.SqlBaseParser$ColumnReferenceContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitNullLiteral(wvlet.airframe.sql.parser.SqlBaseParser$NullLiteralContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitRowConstructor(wvlet.airframe.sql.parser.SqlBaseParser$RowConstructorContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitSubscript(wvlet.airframe.sql.parser.SqlBaseParser$SubscriptContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitSubqueryExpression(wvlet.airframe.sql.parser.SqlBaseParser$SubqueryExpressionContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitBinaryLiteral(wvlet.airframe.sql.parser.SqlBaseParser$BinaryLiteralContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitCurrentUser(wvlet.airframe.sql.parser.SqlBaseParser$CurrentUserContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitExtract(wvlet.airframe.sql.parser.SqlBaseParser$ExtractContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitStringLiteral(wvlet.airframe.sql.parser.SqlBaseParser$StringLiteralContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitArrayConstructor(wvlet.airframe.sql.parser.SqlBaseParser$ArrayConstructorContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitFunctionCall(wvlet.airframe.sql.parser.SqlBaseParser$FunctionCallContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitExists(wvlet.airframe.sql.parser.SqlBaseParser$ExistsContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitPosition(wvlet.airframe.sql.parser.SqlBaseParser$PositionContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitSearchedCase(wvlet.airframe.sql.parser.SqlBaseParser$SearchedCaseContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitGroupingOperation(wvlet.airframe.sql.parser.SqlBaseParser$GroupingOperationContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitBasicStringLiteral(wvlet.airframe.sql.parser.SqlBaseParser$BasicStringLiteralContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitUnicodeStringLiteral(wvlet.airframe.sql.parser.SqlBaseParser$UnicodeStringLiteralContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitTimeZoneInterval(wvlet.airframe.sql.parser.SqlBaseParser$TimeZoneIntervalContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitTimeZoneString(wvlet.airframe.sql.parser.SqlBaseParser$TimeZoneStringContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitComparisonOperator(wvlet.airframe.sql.parser.SqlBaseParser$ComparisonOperatorContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitComparisonQuantifier(wvlet.airframe.sql.parser.SqlBaseParser$ComparisonQuantifierContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitBooleanValue(wvlet.airframe.sql.parser.SqlBaseParser$BooleanValueContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitInterval(wvlet.airframe.sql.parser.SqlBaseParser$IntervalContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitIntervalField(wvlet.airframe.sql.parser.SqlBaseParser$IntervalFieldContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitNormalForm(wvlet.airframe.sql.parser.SqlBaseParser$NormalFormContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitType(wvlet.airframe.sql.parser.SqlBaseParser$TypeContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitTypeParameter(wvlet.airframe.sql.parser.SqlBaseParser$TypeParameterContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitBaseType(wvlet.airframe.sql.parser.SqlBaseParser$BaseTypeContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitWhenClause(wvlet.airframe.sql.parser.SqlBaseParser$WhenClauseContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitFilter(wvlet.airframe.sql.parser.SqlBaseParser$FilterContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitOver(wvlet.airframe.sql.parser.SqlBaseParser$OverContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitWindowFrame(wvlet.airframe.sql.parser.SqlBaseParser$WindowFrameContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitUnboundedFrame(wvlet.airframe.sql.parser.SqlBaseParser$UnboundedFrameContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitCurrentRowBound(wvlet.airframe.sql.parser.SqlBaseParser$CurrentRowBoundContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitBoundedFrame(wvlet.airframe.sql.parser.SqlBaseParser$BoundedFrameContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitExplainFormat(wvlet.airframe.sql.parser.SqlBaseParser$ExplainFormatContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitExplainType(wvlet.airframe.sql.parser.SqlBaseParser$ExplainTypeContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitIsolationLevel(wvlet.airframe.sql.parser.SqlBaseParser$IsolationLevelContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitTransactionAccessMode(wvlet.airframe.sql.parser.SqlBaseParser$TransactionAccessModeContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitReadUncommitted(wvlet.airframe.sql.parser.SqlBaseParser$ReadUncommittedContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitReadCommitted(wvlet.airframe.sql.parser.SqlBaseParser$ReadCommittedContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitRepeatableRead(wvlet.airframe.sql.parser.SqlBaseParser$RepeatableReadContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitSerializable(wvlet.airframe.sql.parser.SqlBaseParser$SerializableContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitPositionalArgument(wvlet.airframe.sql.parser.SqlBaseParser$PositionalArgumentContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitNamedArgument(wvlet.airframe.sql.parser.SqlBaseParser$NamedArgumentContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitPrivilege(wvlet.airframe.sql.parser.SqlBaseParser$PrivilegeContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitQualifiedName(wvlet.airframe.sql.parser.SqlBaseParser$QualifiedNameContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitUnquotedIdentifier(wvlet.airframe.sql.parser.SqlBaseParser$UnquotedIdentifierContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitQuotedIdentifier(wvlet.airframe.sql.parser.SqlBaseParser$QuotedIdentifierContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitBackQuotedIdentifier(wvlet.airframe.sql.parser.SqlBaseParser$BackQuotedIdentifierContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitDigitIdentifier(wvlet.airframe.sql.parser.SqlBaseParser$DigitIdentifierContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitDecimalLiteral(wvlet.airframe.sql.parser.SqlBaseParser$DecimalLiteralContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitDoubleLiteral(wvlet.airframe.sql.parser.SqlBaseParser$DoubleLiteralContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitIntegerLiteral(wvlet.airframe.sql.parser.SqlBaseParser$IntegerLiteralContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn

  public T visitNonReserved(wvlet.airframe.sql.parser.SqlBaseParser$NonReservedContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method visitChildren:(Lorg/antlr/v4/runtime/tree/RuleNode;)Ljava/lang/Object;
       5: areturn
}
