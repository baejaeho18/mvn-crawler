Compiled from "DataType.scala"
public abstract class wvlet.airframe.sql.catalog.DataType {
  private final java.lang.String typeName;

  private final scala.collection.immutable.Seq typeParams;

  public static final long OFFSET$_m_0;

  public static wvlet.airframe.sql.catalog.DataType getPrimitiveType(java.lang.String);
    Code:
       0: getstatic     #151                // Field wvlet/airframe/sql/catalog/DataType$.MODULE$:Lwvlet/airframe/sql/catalog/DataType$;
       3: aload_0
       4: invokevirtual #153                // Method wvlet/airframe/sql/catalog/DataType$.getPrimitiveType:(Ljava/lang/String;)Lwvlet/airframe/sql/catalog/DataType;
       7: areturn

  public static boolean isKnownGenericTypeName(java.lang.String);
    Code:
       0: getstatic     #151                // Field wvlet/airframe/sql/catalog/DataType$.MODULE$:Lwvlet/airframe/sql/catalog/DataType$;
       3: aload_0
       4: invokevirtual #157                // Method wvlet/airframe/sql/catalog/DataType$.isKnownGenericTypeName:(Ljava/lang/String;)Z
       7: ireturn

  public static boolean isPrimitiveTypeName(java.lang.String);
    Code:
       0: getstatic     #151                // Field wvlet/airframe/sql/catalog/DataType$.MODULE$:Lwvlet/airframe/sql/catalog/DataType$;
       3: aload_0
       4: invokevirtual #160                // Method wvlet/airframe/sql/catalog/DataType$.isPrimitiveTypeName:(Ljava/lang/String;)Z
       7: ireturn

  public static wvlet.airframe.sql.catalog.DataType parse(java.lang.String);
    Code:
       0: getstatic     #151                // Field wvlet/airframe/sql/catalog/DataType$.MODULE$:Lwvlet/airframe/sql/catalog/DataType$;
       3: aload_0
       4: invokevirtual #163                // Method wvlet/airframe/sql/catalog/DataType$.parse:(Ljava/lang/String;)Lwvlet/airframe/sql/catalog/DataType;
       7: areturn

  public static scala.collection.immutable.List<wvlet.airframe.sql.catalog.DataType> parseArgs(java.lang.String);
    Code:
       0: getstatic     #151                // Field wvlet/airframe/sql/catalog/DataType$.MODULE$:Lwvlet/airframe/sql/catalog/DataType$;
       3: aload_0
       4: invokevirtual #168                // Method wvlet/airframe/sql/catalog/DataType$.parseArgs:(Ljava/lang/String;)Lscala/collection/immutable/List;
       7: areturn

  public wvlet.airframe.sql.catalog.DataType(java.lang.String, scala.collection.immutable.Seq<wvlet.airframe.sql.catalog.DataType>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #173                // Field typeName:Ljava/lang/String;
       5: aload_0
       6: aload_2
       7: putfield      #175                // Field typeParams:Lscala/collection/immutable/Seq;
      10: aload_0
      11: invokespecial #178                // Method java/lang/Object."<init>":()V
      14: return

  private static {};
    Code:
       0: getstatic     #186                // Field scala/runtime/LazyVals$.MODULE$:Lscala/runtime/LazyVals$;
       3: ldc           #147                // class wvlet/airframe/sql/catalog/DataType$
       5: ldc           #188                // String 0bitmap$1
       7: invokevirtual #194                // Method java/lang/Class.getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;
      10: invokevirtual #198                // Method scala/runtime/LazyVals$.getOffsetStatic:(Ljava/lang/reflect/Field;)J
      13: putstatic     #200                // Field OFFSET$_m_0:J
      16: return

  public java.lang.String typeName();
    Code:
       0: aload_0
       1: getfield      #173                // Field typeName:Ljava/lang/String;
       4: areturn

  public scala.collection.immutable.Seq<wvlet.airframe.sql.catalog.DataType> typeParams();
    Code:
       0: aload_0
       1: getfield      #175                // Field typeParams:Lscala/collection/immutable/Seq;
       4: areturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: invokevirtual #206                // Method typeParams:()Lscala/collection/immutable/Seq;
       4: invokeinterface #212,  1          // InterfaceMethod scala/collection/immutable/Seq.isEmpty:()Z
       9: ifeq          17
      12: aload_0
      13: invokevirtual #214                // Method typeName:()Ljava/lang/String;
      16: areturn
      17: new           #216                // class java/lang/StringBuilder
      20: dup
      21: ldc           #217                // int 2
      23: invokespecial #220                // Method java/lang/StringBuilder."<init>":(I)V
      26: aload_0
      27: invokevirtual #214                // Method typeName:()Ljava/lang/String;
      30: invokevirtual #224                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      33: ldc           #226                // String (
      35: invokevirtual #224                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      38: aload_0
      39: invokevirtual #206                // Method typeParams:()Lscala/collection/immutable/Seq;
      42: ldc           #228                // String ,
      44: invokeinterface #232,  2          // InterfaceMethod scala/collection/immutable/Seq.mkString:(Ljava/lang/String;)Ljava/lang/String;
      49: invokevirtual #224                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      52: ldc           #234                // String )
      54: invokevirtual #224                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      57: invokevirtual #236                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      60: areturn

  public java.lang.String baseTypeName();
    Code:
       0: aload_0
       1: invokevirtual #214                // Method typeName:()Ljava/lang/String;
       4: areturn

  public boolean isBound();
    Code:
       0: aload_0
       1: invokevirtual #206                // Method typeParams:()Lscala/collection/immutable/Seq;
       4: invokedynamic #259,  0            // InvokeDynamic #0:apply:()Lscala/Function1;
       9: invokeinterface #263,  2          // InterfaceMethod scala/collection/immutable/Seq.forall:(Lscala/Function1;)Z
      14: ireturn

  public wvlet.airframe.sql.catalog.DataType bind(scala.collection.immutable.Map<java.lang.String, wvlet.airframe.sql.catalog.DataType>);
    Code:
       0: aload_0
       1: areturn

  private static final boolean isBound$$anonfun$1(wvlet.airframe.sql.catalog.DataType);
    Code:
       0: aload_0
       1: invokevirtual #271                // Method isBound:()Z
       4: ireturn

  private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda);
    Code:
       0: aload_0
       1: invokedynamic #283,  0            // InvokeDynamic #1:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
       6: areturn
}
