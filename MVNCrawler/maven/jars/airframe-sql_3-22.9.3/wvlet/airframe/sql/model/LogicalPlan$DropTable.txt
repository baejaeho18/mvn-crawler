Compiled from "LogicalPlan.scala"
public class wvlet.airframe.sql.model.LogicalPlan$DropTable implements scala.Product,wvlet.airframe.sql.model.SQLSig,wvlet.airframe.sql.model.LogicalPlan,wvlet.airframe.sql.model.LeafPlan,wvlet.airframe.sql.model.LogicalPlan$DDL,java.io.Serializable {
  public static final long OFFSET$0;

  public boolean resolved$lzy27;

  public long 0bitmap$27;

  private final wvlet.airframe.sql.model.Expression$QName table;

  private final boolean ifExists;

  public static wvlet.airframe.sql.model.LogicalPlan$DropTable apply(wvlet.airframe.sql.model.Expression$QName, boolean);
    Code:
       0: getstatic     #47                 // Field wvlet/airframe/sql/model/LogicalPlan$DropTable$.MODULE$:Lwvlet/airframe/sql/model/LogicalPlan$DropTable$;
       3: aload_0
       4: iload_1
       5: invokevirtual #49                 // Method wvlet/airframe/sql/model/LogicalPlan$DropTable$.apply:(Lwvlet/airframe/sql/model/Expression$QName;Z)Lwvlet/airframe/sql/model/LogicalPlan$DropTable;
       8: areturn

  public static wvlet.airframe.sql.model.LogicalPlan$DropTable fromProduct(scala.Product);
    Code:
       0: getstatic     #47                 // Field wvlet/airframe/sql/model/LogicalPlan$DropTable$.MODULE$:Lwvlet/airframe/sql/model/LogicalPlan$DropTable$;
       3: aload_0
       4: invokevirtual #53                 // Method wvlet/airframe/sql/model/LogicalPlan$DropTable$.fromProduct:(Lscala/Product;)Lwvlet/airframe/sql/model/LogicalPlan$DropTable;
       7: areturn

  public static wvlet.airframe.sql.model.LogicalPlan$DropTable unapply(wvlet.airframe.sql.model.LogicalPlan$DropTable);
    Code:
       0: getstatic     #47                 // Field wvlet/airframe/sql/model/LogicalPlan$DropTable$.MODULE$:Lwvlet/airframe/sql/model/LogicalPlan$DropTable$;
       3: aload_0
       4: invokevirtual #57                 // Method wvlet/airframe/sql/model/LogicalPlan$DropTable$.unapply:(Lwvlet/airframe/sql/model/LogicalPlan$DropTable;)Lwvlet/airframe/sql/model/LogicalPlan$DropTable;
       7: areturn

  public wvlet.airframe.sql.model.LogicalPlan$DropTable(wvlet.airframe.sql.model.Expression$QName, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #61                 // Field table:Lwvlet/airframe/sql/model/Expression$QName;
       5: aload_0
       6: iload_2
       7: putfield      #63                 // Field ifExists:Z
      10: aload_0
      11: invokespecial #66                 // Method java/lang/Object."<init>":()V
      14: aload_0
      15: invokestatic  #70                 // InterfaceMethod wvlet/airframe/sql/model/LogicalPlan.$init$:(Lwvlet/airframe/sql/model/LogicalPlan;)V
      18: return

  private static {};
    Code:
       0: getstatic     #78                 // Field scala/runtime/LazyVals$.MODULE$:Lscala/runtime/LazyVals$;
       3: ldc           #2                  // class wvlet/airframe/sql/model/LogicalPlan$DropTable
       5: ldc           #79                 // String 0bitmap$27
       7: invokevirtual #85                 // Method java/lang/Class.getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;
      10: invokevirtual #89                 // Method scala/runtime/LazyVals$.getOffsetStatic:(Ljava/lang/reflect/Field;)J
      13: putstatic     #91                 // Field OFFSET$0:J
      16: return

  public scala.collection.Iterator productIterator();
    Code:
       0: aload_0
       1: invokestatic  #97                 // InterfaceMethod scala/Product.productIterator$:(Lscala/Product;)Lscala/collection/Iterator;
       4: areturn

  public scala.collection.Iterator productElementNames();
    Code:
       0: aload_0
       1: invokestatic  #101                // InterfaceMethod scala/Product.productElementNames$:(Lscala/Product;)Lscala/collection/Iterator;
       4: areturn

  public wvlet.airframe.sql.analyzer.QuerySignatureConfig sig$default$1();
    Code:
       0: aload_0
       1: invokestatic  #107                // InterfaceMethod wvlet/airframe/sql/model/SQLSig.sig$default$1$:(Lwvlet/airframe/sql/model/SQLSig;)Lwvlet/airframe/sql/analyzer/QuerySignatureConfig;
       4: areturn

  public boolean resolved();
    Code:
       0: getstatic     #78                 // Field scala/runtime/LazyVals$.MODULE$:Lscala/runtime/LazyVals$;
       3: aload_0
       4: getstatic     #91                 // Field OFFSET$0:J
       7: invokevirtual #115                // Method scala/runtime/LazyVals$.get:(Ljava/lang/Object;J)J
      10: lstore_1
      11: getstatic     #78                 // Field scala/runtime/LazyVals$.MODULE$:Lscala/runtime/LazyVals$;
      14: lload_1
      15: iconst_0
      16: invokevirtual #119                // Method scala/runtime/LazyVals$.STATE:(JI)J
      19: lstore_3
      20: lload_3
      21: ldc2_w        #120                // long 3l
      24: lcmp
      25: ifne          33
      28: aload_0
      29: getfield      #123                // Field resolved$lzy27:Z
      32: ireturn
      33: lload_3
      34: lconst_0
      35: lcmp
      36: ifne          112
      39: getstatic     #78                 // Field scala/runtime/LazyVals$.MODULE$:Lscala/runtime/LazyVals$;
      42: aload_0
      43: getstatic     #91                 // Field OFFSET$0:J
      46: lload_1
      47: iconst_1
      48: iconst_0
      49: invokevirtual #127                // Method scala/runtime/LazyVals$.CAS:(Ljava/lang/Object;JJII)Z
      52: ifeq          109
      55: aload_0
      56: invokestatic  #131                // InterfaceMethod wvlet/airframe/sql/model/LogicalPlan.resolved$:(Lwvlet/airframe/sql/model/LogicalPlan;)Z
      59: istore        5
      61: aload_0
      62: iload         5
      64: putfield      #123                // Field resolved$lzy27:Z
      67: getstatic     #78                 // Field scala/runtime/LazyVals$.MODULE$:Lscala/runtime/LazyVals$;
      70: aload_0
      71: getstatic     #91                 // Field OFFSET$0:J
      74: iconst_3
      75: iconst_0
      76: invokevirtual #135                // Method scala/runtime/LazyVals$.setFlag:(Ljava/lang/Object;JII)V
      79: iload         5
      81: ireturn
      82: nop
      83: nop
      84: athrow
      85: astore        6
      87: getstatic     #78                 // Field scala/runtime/LazyVals$.MODULE$:Lscala/runtime/LazyVals$;
      90: aload_0
      91: getstatic     #91                 // Field OFFSET$0:J
      94: iconst_0
      95: iconst_0
      96: invokevirtual #135                // Method scala/runtime/LazyVals$.setFlag:(Ljava/lang/Object;JII)V
      99: aload         6
     101: athrow
     102: nop
     103: nop
     104: athrow
     105: athrow
     106: nop
     107: nop
     108: athrow
     109: goto          0
     112: getstatic     #78                 // Field scala/runtime/LazyVals$.MODULE$:Lscala/runtime/LazyVals$;
     115: aload_0
     116: getstatic     #91                 // Field OFFSET$0:J
     119: lload_1
     120: iconst_0
     121: invokevirtual #139                // Method scala/runtime/LazyVals$.wait4Notification:(Ljava/lang/Object;JJI)V
     124: goto          0
    Exception table:
       from    to  target type
          55    82    85   Class java/lang/Throwable

  public java.lang.String modelName();
    Code:
       0: aload_0
       1: invokestatic  #145                // InterfaceMethod wvlet/airframe/sql/model/LogicalPlan.modelName$:(Lwvlet/airframe/sql/model/LogicalPlan;)Ljava/lang/String;
       4: areturn

  public java.lang.String pp();
    Code:
       0: aload_0
       1: invokestatic  #149                // InterfaceMethod wvlet/airframe/sql/model/LogicalPlan.pp$:(Lwvlet/airframe/sql/model/LogicalPlan;)Ljava/lang/String;
       4: areturn

  public scala.collection.immutable.Seq expressions();
    Code:
       0: aload_0
       1: invokestatic  #155                // InterfaceMethod wvlet/airframe/sql/model/LogicalPlan.expressions$:(Lwvlet/airframe/sql/model/LogicalPlan;)Lscala/collection/immutable/Seq;
       4: areturn

  public wvlet.airframe.sql.model.LogicalPlan mapChildren(scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #162                // InterfaceMethod wvlet/airframe/sql/model/LogicalPlan.mapChildren$:(Lwvlet/airframe/sql/model/LogicalPlan;Lscala/Function1;)Lwvlet/airframe/sql/model/LogicalPlan;
       5: areturn

  public void traverse(scala.PartialFunction);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #169                // InterfaceMethod wvlet/airframe/sql/model/LogicalPlan.traverse$:(Lwvlet/airframe/sql/model/LogicalPlan;Lscala/PartialFunction;)V
       5: return

  public wvlet.airframe.sql.model.LogicalPlan transform(scala.PartialFunction);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #177                // InterfaceMethod wvlet/airframe/sql/model/LogicalPlan.transform$:(Lwvlet/airframe/sql/model/LogicalPlan;Lscala/PartialFunction;)Lwvlet/airframe/sql/model/LogicalPlan;
       5: areturn

  public wvlet.airframe.sql.model.LogicalPlan transformExpressions(scala.PartialFunction);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #181                // InterfaceMethod wvlet/airframe/sql/model/LogicalPlan.transformExpressions$:(Lwvlet/airframe/sql/model/LogicalPlan;Lscala/PartialFunction;)Lwvlet/airframe/sql/model/LogicalPlan;
       5: areturn

  public wvlet.airframe.sql.model.LogicalPlan copyInstance(scala.collection.immutable.Seq);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #188                // InterfaceMethod wvlet/airframe/sql/model/LogicalPlan.copyInstance$:(Lwvlet/airframe/sql/model/LogicalPlan;Lscala/collection/immutable/Seq;)Lwvlet/airframe/sql/model/LogicalPlan;
       5: areturn

  public scala.collection.immutable.List inputExpressions();
    Code:
       0: aload_0
       1: invokestatic  #195                // InterfaceMethod wvlet/airframe/sql/model/LogicalPlan.inputExpressions$:(Lwvlet/airframe/sql/model/LogicalPlan;)Lscala/collection/immutable/List;
       4: areturn

  public scala.collection.immutable.List collectExpressions(scala.PartialFunction);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #202                // InterfaceMethod wvlet/airframe/sql/model/LogicalPlan.collectExpressions$:(Lwvlet/airframe/sql/model/LogicalPlan;Lscala/PartialFunction;)Lscala/collection/immutable/List;
       5: areturn

  public void traverseExpressions(scala.PartialFunction);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #206                // InterfaceMethod wvlet/airframe/sql/model/LogicalPlan.traverseExpressions$:(Lwvlet/airframe/sql/model/LogicalPlan;Lscala/PartialFunction;)V
       5: return

  public boolean resolvedChildren();
    Code:
       0: aload_0
       1: invokestatic  #210                // InterfaceMethod wvlet/airframe/sql/model/LogicalPlan.resolvedChildren$:(Lwvlet/airframe/sql/model/LogicalPlan;)Z
       4: ireturn

  public scala.collection.immutable.Seq children();
    Code:
       0: aload_0
       1: invokestatic  #215                // InterfaceMethod wvlet/airframe/sql/model/LeafPlan.children$:(Lwvlet/airframe/sql/model/LeafPlan;)Lscala/collection/immutable/Seq;
       4: areturn

  public scala.collection.immutable.Seq inputAttributes();
    Code:
       0: aload_0
       1: invokestatic  #219                // InterfaceMethod wvlet/airframe/sql/model/LeafPlan.inputAttributes$:(Lwvlet/airframe/sql/model/LeafPlan;)Lscala/collection/immutable/Seq;
       4: areturn

  public scala.collection.immutable.Seq outputAttributes();
    Code:
       0: aload_0
       1: invokestatic  #224                // InterfaceMethod wvlet/airframe/sql/model/LogicalPlan$DDL.outputAttributes$:(Lwvlet/airframe/sql/model/LogicalPlan$DDL;)Lscala/collection/immutable/Seq;
       4: areturn

  public int hashCode();
    Code:
       0: ldc           #227                // int -889275714
       2: istore_1
       3: iload_1
       4: aload_0
       5: invokevirtual #230                // Method productPrefix:()Ljava/lang/String;
       8: invokevirtual #234                // Method java/lang/String.hashCode:()I
      11: invokestatic  #240                // Method scala/runtime/Statics.mix:(II)I
      14: istore_1
      15: iload_1
      16: aload_0
      17: invokevirtual #243                // Method table:()Lwvlet/airframe/sql/model/Expression$QName;
      20: invokestatic  #247                // Method scala/runtime/Statics.anyHash:(Ljava/lang/Object;)I
      23: invokestatic  #240                // Method scala/runtime/Statics.mix:(II)I
      26: istore_1
      27: iload_1
      28: aload_0
      29: invokevirtual #249                // Method ifExists:()Z
      32: ifeq          41
      35: sipush        1231
      38: goto          44
      41: sipush        1237
      44: invokestatic  #240                // Method scala/runtime/Statics.mix:(II)I
      47: istore_1
      48: iload_1
      49: iconst_2
      50: invokestatic  #252                // Method scala/runtime/Statics.finalizeHash:(II)I
      53: ireturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpeq     84
       5: aload_1
       6: astore_2
       7: aload_2
       8: instanceof    #2                  // class wvlet/airframe/sql/model/LogicalPlan$DropTable
      11: ifeq          77
      14: aload_2
      15: checkcast     #2                  // class wvlet/airframe/sql/model/LogicalPlan$DropTable
      18: astore_3
      19: aload_0
      20: invokevirtual #249                // Method ifExists:()Z
      23: aload_3
      24: invokevirtual #249                // Method ifExists:()Z
      27: if_icmpne     73
      30: aload_0
      31: invokevirtual #243                // Method table:()Lwvlet/airframe/sql/model/Expression$QName;
      34: aload_3
      35: invokevirtual #243                // Method table:()Lwvlet/airframe/sql/model/Expression$QName;
      38: astore        4
      40: dup
      41: ifnonnull     53
      44: pop
      45: aload         4
      47: ifnull        61
      50: goto          73
      53: aload         4
      55: invokevirtual #257                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      58: ifeq          73
      61: aload_3
      62: aload_0
      63: invokevirtual #260                // Method canEqual:(Ljava/lang/Object;)Z
      66: ifeq          73
      69: iconst_1
      70: goto          74
      73: iconst_0
      74: goto          81
      77: iconst_0
      78: goto          81
      81: ifeq          88
      84: iconst_1
      85: goto          89
      88: iconst_0
      89: ireturn

  public java.lang.String toString();
    Code:
       0: getstatic     #267                // Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
       3: aload_0
       4: invokevirtual #271                // Method scala/runtime/ScalaRunTime$._toString:(Lscala/Product;)Ljava/lang/String;
       7: areturn

  public boolean canEqual(java.lang.Object);
    Code:
       0: aload_1
       1: instanceof    #2                  // class wvlet/airframe/sql/model/LogicalPlan$DropTable
       4: ireturn

  public int productArity();
    Code:
       0: iconst_2
       1: ireturn

  public java.lang.String productPrefix();
    Code:
       0: ldc_w         #274                // String DropTable
       3: areturn

  public java.lang.Object productElement(int);
    Code:
       0: iload_1
       1: istore_2
       2: iconst_0
       3: iload_2
       4: if_icmpne     12
       7: aload_0
       8: invokevirtual #280                // Method _1:()Lwvlet/airframe/sql/model/Expression$QName;
      11: areturn
      12: iconst_1
      13: iload_2
      14: if_icmpne     25
      17: aload_0
      18: invokevirtual #283                // Method _2:()Z
      21: invokestatic  #289                // Method scala/runtime/BoxesRunTime.boxToBoolean:(Z)Ljava/lang/Boolean;
      24: areturn
      25: new           #291                // class java/lang/IndexOutOfBoundsException
      28: dup
      29: iload_1
      30: invokestatic  #295                // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
      33: invokevirtual #299                // Method java/lang/Integer.toString:()Ljava/lang/String;
      36: invokespecial #302                // Method java/lang/IndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
      39: athrow

  public java.lang.String productElementName(int);
    Code:
       0: iload_1
       1: istore_2
       2: iconst_0
       3: iload_2
       4: if_icmpne     11
       7: ldc_w         #306                // String table
      10: areturn
      11: iconst_1
      12: iload_2
      13: if_icmpne     20
      16: ldc_w         #307                // String ifExists
      19: areturn
      20: new           #291                // class java/lang/IndexOutOfBoundsException
      23: dup
      24: iload_1
      25: invokestatic  #295                // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
      28: invokevirtual #299                // Method java/lang/Integer.toString:()Ljava/lang/String;
      31: invokespecial #302                // Method java/lang/IndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
      34: athrow

  public wvlet.airframe.sql.model.Expression$QName table();
    Code:
       0: aload_0
       1: getfield      #61                 // Field table:Lwvlet/airframe/sql/model/Expression$QName;
       4: areturn

  public boolean ifExists();
    Code:
       0: aload_0
       1: getfield      #63                 // Field ifExists:Z
       4: ireturn

  public java.lang.String sig(wvlet.airframe.sql.analyzer.QuerySignatureConfig);
    Code:
       0: new           #312                // class java/lang/StringBuilder
       3: dup
       4: ldc_w         #313                // int 4
       7: invokespecial #316                // Method java/lang/StringBuilder."<init>":(I)V
      10: ldc_w         #318                // String DT(
      13: invokevirtual #322                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      16: getstatic     #325                // Field wvlet/airframe/sql/model/LogicalPlan$TableRef$.MODULE$:Lwvlet/airframe/sql/model/LogicalPlan$TableRef$;
      19: aload_0
      20: invokevirtual #243                // Method table:()Lwvlet/airframe/sql/model/Expression$QName;
      23: invokevirtual #328                // Method wvlet/airframe/sql/model/LogicalPlan$TableRef$.apply:(Lwvlet/airframe/sql/model/Expression$QName;)Lwvlet/airframe/sql/model/LogicalPlan$TableRef;
      26: aload_1
      27: invokevirtual #330                // Method wvlet/airframe/sql/model/LogicalPlan$TableRef.sig:(Lwvlet/airframe/sql/analyzer/QuerySignatureConfig;)Ljava/lang/String;
      30: invokevirtual #322                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      33: ldc_w         #332                // String )
      36: invokevirtual #322                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      39: invokevirtual #333                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      42: areturn

  public wvlet.airframe.sql.model.LogicalPlan$DropTable copy(wvlet.airframe.sql.model.Expression$QName, boolean);
    Code:
       0: new           #2                  // class wvlet/airframe/sql/model/LogicalPlan$DropTable
       3: dup
       4: aload_1
       5: iload_2
       6: invokespecial #337                // Method "<init>":(Lwvlet/airframe/sql/model/Expression$QName;Z)V
       9: areturn

  public wvlet.airframe.sql.model.Expression$QName copy$default$1();
    Code:
       0: aload_0
       1: invokevirtual #243                // Method table:()Lwvlet/airframe/sql/model/Expression$QName;
       4: areturn

  public boolean copy$default$2();
    Code:
       0: aload_0
       1: invokevirtual #249                // Method ifExists:()Z
       4: ireturn

  public wvlet.airframe.sql.model.Expression$QName _1();
    Code:
       0: aload_0
       1: invokevirtual #243                // Method table:()Lwvlet/airframe/sql/model/Expression$QName;
       4: areturn

  public boolean _2();
    Code:
       0: aload_0
       1: invokevirtual #249                // Method ifExists:()Z
       4: ireturn
}
