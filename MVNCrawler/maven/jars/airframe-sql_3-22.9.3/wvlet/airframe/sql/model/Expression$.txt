Compiled from "Expression.scala"
public final class wvlet.airframe.sql.model.Expression$ implements java.io.Serializable {
  public static final wvlet.airframe.sql.model.Expression$ParenthesizedExpression$ ParenthesizedExpression;

  public static final wvlet.airframe.sql.model.Expression$QName$ QName;

  public static final wvlet.airframe.sql.model.Expression$UnresolvedAttribute$ UnresolvedAttribute;

  public static final wvlet.airframe.sql.model.Expression$DigitId$ DigitId;

  public static final wvlet.airframe.sql.model.Expression$UnquotedIdentifier$ UnquotedIdentifier;

  public static final wvlet.airframe.sql.model.Expression$BackQuotedIdentifier$ BackQuotedIdentifier;

  public static final wvlet.airframe.sql.model.Expression$QuotedIdentifier$ QuotedIdentifier;

  public static final wvlet.airframe.sql.model.Expression$NaturalJoin$ NaturalJoin;

  public static final wvlet.airframe.sql.model.Expression$JoinUsing$ JoinUsing;

  public static final wvlet.airframe.sql.model.Expression$JoinOn$ JoinOn;

  public static final wvlet.airframe.sql.model.Expression$JoinOnEq$ JoinOnEq;

  public static final wvlet.airframe.sql.model.Expression$AllColumns$ AllColumns;

  public static final wvlet.airframe.sql.model.Expression$SingleColumn$ SingleColumn;

  public static final wvlet.airframe.sql.model.Expression$SortItem$ SortItem;

  public static final wvlet.airframe.sql.model.Expression$Ascending$ Ascending;

  public static final wvlet.airframe.sql.model.Expression$Descending$ Descending;

  public static final wvlet.airframe.sql.model.Expression$NullIsFirst$ NullIsFirst;

  public static final wvlet.airframe.sql.model.Expression$NullIsLast$ NullIsLast;

  public static final wvlet.airframe.sql.model.Expression$UndefinedOrder$ UndefinedOrder;

  public static final wvlet.airframe.sql.model.Expression$Window$ Window;

  public static final wvlet.airframe.sql.model.Expression$RangeFrame$ RangeFrame;

  public static final wvlet.airframe.sql.model.Expression$RowsFrame$ RowsFrame;

  public static final wvlet.airframe.sql.model.Expression$UnboundedPreceding$ UnboundedPreceding;

  public static final wvlet.airframe.sql.model.Expression$UnboundedFollowing$ UnboundedFollowing;

  public static final wvlet.airframe.sql.model.Expression$Preceding$ Preceding;

  public static final wvlet.airframe.sql.model.Expression$Following$ Following;

  public static final wvlet.airframe.sql.model.Expression$CurrentRow$ CurrentRow;

  public static final wvlet.airframe.sql.model.Expression$WindowFrame$ WindowFrame;

  public static final wvlet.airframe.sql.model.Expression$FunctionCall$ FunctionCall;

  public static final wvlet.airframe.sql.model.Expression$LambdaExpr$ LambdaExpr;

  public static final wvlet.airframe.sql.model.Expression$Ref$ Ref;

  public static final wvlet.airframe.sql.model.Expression$NoOp$ NoOp;

  public static final wvlet.airframe.sql.model.Expression$Eq$ Eq;

  public static final wvlet.airframe.sql.model.Expression$NotEq$ NotEq;

  public static final wvlet.airframe.sql.model.Expression$And$ And;

  public static final wvlet.airframe.sql.model.Expression$Or$ Or;

  public static final wvlet.airframe.sql.model.Expression$Not$ Not;

  public static final wvlet.airframe.sql.model.Expression$LessThan$ LessThan;

  public static final wvlet.airframe.sql.model.Expression$LessThanOrEq$ LessThanOrEq;

  public static final wvlet.airframe.sql.model.Expression$GreaterThan$ GreaterThan;

  public static final wvlet.airframe.sql.model.Expression$GreaterThanOrEq$ GreaterThanOrEq;

  public static final wvlet.airframe.sql.model.Expression$Between$ Between;

  public static final wvlet.airframe.sql.model.Expression$IsNull$ IsNull;

  public static final wvlet.airframe.sql.model.Expression$IsNotNull$ IsNotNull;

  public static final wvlet.airframe.sql.model.Expression$In$ In;

  public static final wvlet.airframe.sql.model.Expression$NotIn$ NotIn;

  public static final wvlet.airframe.sql.model.Expression$InSubQuery$ InSubQuery;

  public static final wvlet.airframe.sql.model.Expression$NotInSubQuery$ NotInSubQuery;

  public static final wvlet.airframe.sql.model.Expression$Like$ Like;

  public static final wvlet.airframe.sql.model.Expression$NotLike$ NotLike;

  public static final wvlet.airframe.sql.model.Expression$DistinctFrom$ DistinctFrom;

  public static final wvlet.airframe.sql.model.Expression$NotDistinctFrom$ NotDistinctFrom;

  public static final wvlet.airframe.sql.model.Expression$IfExpr$ IfExpr;

  public static final wvlet.airframe.sql.model.Expression$CaseExpr$ CaseExpr;

  public static final wvlet.airframe.sql.model.Expression$WhenClause$ WhenClause;

  public static final wvlet.airframe.sql.model.Expression$Exists$ Exists;

  public static final wvlet.airframe.sql.model.Expression$Add$ Add;

  public static final wvlet.airframe.sql.model.Expression$Subtract$ Subtract;

  public static final wvlet.airframe.sql.model.Expression$Multiply$ Multiply;

  public static final wvlet.airframe.sql.model.Expression$Divide$ Divide;

  public static final wvlet.airframe.sql.model.Expression$Modulus$ Modulus;

  public static final wvlet.airframe.sql.model.Expression$ArithmeticBinaryExpr$ ArithmeticBinaryExpr;

  public static final wvlet.airframe.sql.model.Expression$ArithmeticUnaryExpr$ ArithmeticUnaryExpr;

  public static final wvlet.airframe.sql.model.Expression$Positive$ Positive;

  public static final wvlet.airframe.sql.model.Expression$Negative$ Negative;

  public static final wvlet.airframe.sql.model.Expression$All$ All;

  public static final wvlet.airframe.sql.model.Expression$DistinctSet$ DistinctSet;

  public static final wvlet.airframe.sql.model.Expression$NullLiteral$ NullLiteral;

  public static final wvlet.airframe.sql.model.Expression$TrueLiteral$ TrueLiteral;

  public static final wvlet.airframe.sql.model.Expression$FalseLiteral$ FalseLiteral;

  public static final wvlet.airframe.sql.model.Expression$StringLiteral$ StringLiteral;

  public static final wvlet.airframe.sql.model.Expression$TimeLiteral$ TimeLiteral;

  public static final wvlet.airframe.sql.model.Expression$TimestampLiteral$ TimestampLiteral;

  public static final wvlet.airframe.sql.model.Expression$DecimalLiteral$ DecimalLiteral;

  public static final wvlet.airframe.sql.model.Expression$CharLiteral$ CharLiteral;

  public static final wvlet.airframe.sql.model.Expression$DoubleLiteral$ DoubleLiteral;

  public static final wvlet.airframe.sql.model.Expression$LongLiteral$ LongLiteral;

  public static final wvlet.airframe.sql.model.Expression$IntervalLiteral$ IntervalLiteral;

  public static final wvlet.airframe.sql.model.Expression$GenericLiteral$ GenericLiteral;

  public static final wvlet.airframe.sql.model.Expression$BinaryLiteral$ BinaryLiteral;

  public static final wvlet.airframe.sql.model.Expression$Year$ Year;

  public static final wvlet.airframe.sql.model.Expression$Month$ Month;

  public static final wvlet.airframe.sql.model.Expression$Day$ Day;

  public static final wvlet.airframe.sql.model.Expression$Hour$ Hour;

  public static final wvlet.airframe.sql.model.Expression$Minute$ Minute;

  public static final wvlet.airframe.sql.model.Expression$Second$ Second;

  public static final wvlet.airframe.sql.model.Expression$ArrayConstructor$ ArrayConstructor;

  public static final wvlet.airframe.sql.model.Expression$RowConstructor$ RowConstructor;

  public static final wvlet.airframe.sql.model.Expression$CurrentTime$ CurrentTime;

  public static final wvlet.airframe.sql.model.Expression$CurrentDate$ CurrentDate;

  public static final wvlet.airframe.sql.model.Expression$CurrentTimestamp$ CurrentTimestamp;

  public static final wvlet.airframe.sql.model.Expression$CurrentLocalTime$ CurrentLocalTime;

  public static final wvlet.airframe.sql.model.Expression$CurrentLocalTimeStamp$ CurrentLocalTimeStamp;

  public static final wvlet.airframe.sql.model.Expression$Parameter$ Parameter;

  public static final wvlet.airframe.sql.model.Expression$SubQueryExpression$ SubQueryExpression;

  public static final wvlet.airframe.sql.model.Expression$Cast$ Cast;

  public static final wvlet.airframe.sql.model.Expression$SchemaProperty$ SchemaProperty;

  public static final wvlet.airframe.sql.model.Expression$ColumnDef$ ColumnDef;

  public static final wvlet.airframe.sql.model.Expression$ColumnType$ ColumnType;

  public static final wvlet.airframe.sql.model.Expression$ColumnDefLike$ ColumnDefLike;

  public static final wvlet.airframe.sql.model.Expression$GroupingKey$ GroupingKey;

  public static final wvlet.airframe.sql.model.Expression$ MODULE$;

  private wvlet.airframe.sql.model.Expression$();
    Code:
       0: aload_0
       1: invokespecial #710                // Method java/lang/Object."<init>":()V
       4: return

  public static {};
    Code:
       0: new           #2                  // class wvlet/airframe/sql/model/Expression$
       3: dup
       4: invokespecial #713                // Method "<init>":()V
       7: putstatic     #715                // Field MODULE$:Lwvlet/airframe/sql/model/Expression$;
      10: return

  private java.lang.Object writeReplace();
    Code:
       0: new           #719                // class scala/runtime/ModuleSerializationProxy
       3: dup
       4: ldc           #2                  // class wvlet/airframe/sql/model/Expression$
       6: invokespecial #722                // Method scala/runtime/ModuleSerializationProxy."<init>":(Ljava/lang/Class;)V
       9: areturn

  public wvlet.airframe.sql.model.Expression concat(scala.collection.immutable.Seq<wvlet.airframe.sql.model.Expression>, scala.Function2<wvlet.airframe.sql.model.Expression, wvlet.airframe.sql.model.Expression, wvlet.airframe.sql.model.Expression>);
    Code:
       0: getstatic     #732                // Field scala/Predef$.MODULE$:Lscala/Predef$;
       3: aload_1
       4: invokeinterface #738,  1          // InterfaceMethod scala/collection/immutable/Seq.length:()I
       9: iconst_0
      10: if_icmple     17
      13: iconst_1
      14: goto          18
      17: iconst_0
      18: invokevirtual #742                // Method scala/Predef$.require:(Z)V
      21: aload_1
      22: invokeinterface #738,  1          // InterfaceMethod scala/collection/immutable/Seq.length:()I
      27: iconst_1
      28: if_icmpne     41
      31: aload_1
      32: invokeinterface #745,  1          // InterfaceMethod scala/collection/immutable/Seq.head:()Ljava/lang/Object;
      37: checkcast     #11                 // class wvlet/airframe/sql/model/Expression
      40: areturn
      41: aload_1
      42: invokeinterface #748,  1          // InterfaceMethod scala/collection/immutable/Seq.tail:()Ljava/lang/Object;
      47: checkcast     #750                // class scala/collection/IterableOnceOps
      50: aload_1
      51: invokeinterface #745,  1          // InterfaceMethod scala/collection/immutable/Seq.head:()Ljava/lang/Object;
      56: aload_0
      57: aload_2
      58: invokedynamic #772,  0            // InvokeDynamic #0:apply:(Lwvlet/airframe/sql/model/Expression$;Lscala/Function2;)Lscala/Function2;
      63: invokeinterface #776,  3          // InterfaceMethod scala/collection/IterableOnceOps.foldLeft:(Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
      68: checkcast     #11                 // class wvlet/airframe/sql/model/Expression
      71: areturn

  public wvlet.airframe.sql.model.Expression concatWithAnd(scala.collection.immutable.Seq<wvlet.airframe.sql.model.Expression>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_0
       3: invokedynamic #790,  0            // InvokeDynamic #1:apply:(Lwvlet/airframe/sql/model/Expression$;)Lscala/Function2;
       8: invokevirtual #792                // Method concat:(Lscala/collection/immutable/Seq;Lscala/Function2;)Lwvlet/airframe/sql/model/Expression;
      11: areturn

  public wvlet.airframe.sql.model.Expression concatWithEq(scala.collection.immutable.Seq<wvlet.airframe.sql.model.Expression>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_0
       3: invokedynamic #798,  0            // InvokeDynamic #2:apply:(Lwvlet/airframe/sql/model/Expression$;)Lscala/Function2;
       8: invokevirtual #792                // Method concat:(Lscala/collection/immutable/Seq;Lscala/Function2;)Lwvlet/airframe/sql/model/Expression;
      11: areturn

  private final wvlet.airframe.sql.model.Expression concat$$anonfun$1(scala.Function2, wvlet.airframe.sql.model.Expression, wvlet.airframe.sql.model.Expression);
    Code:
       0: getstatic     #806                // Field scala/Tuple2$.MODULE$:Lscala/Tuple2$;
       3: aload_2
       4: aload_3
       5: invokevirtual #809                // Method scala/Tuple2$.apply:(Ljava/lang/Object;Ljava/lang/Object;)Lscala/Tuple2;
       8: astore        4
      10: aload         4
      12: ifnull        49
      15: aload         4
      17: invokevirtual #814                // Method scala/Tuple2._1:()Ljava/lang/Object;
      20: checkcast     #11                 // class wvlet/airframe/sql/model/Expression
      23: astore        5
      25: aload         4
      27: invokevirtual #817                // Method scala/Tuple2._2:()Ljava/lang/Object;
      30: checkcast     #11                 // class wvlet/airframe/sql/model/Expression
      33: astore        6
      35: aload_1
      36: aload         5
      38: aload         6
      40: invokeinterface #819,  3          // InterfaceMethod scala/Function2.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      45: checkcast     #11                 // class wvlet/airframe/sql/model/Expression
      48: areturn
      49: new           #821                // class scala/MatchError
      52: dup
      53: aload         4
      55: invokespecial #824                // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      58: athrow

  private final wvlet.airframe.sql.model.Expression concatWithAnd$$anonfun$1(wvlet.airframe.sql.model.Expression, wvlet.airframe.sql.model.Expression);
    Code:
       0: getstatic     #806                // Field scala/Tuple2$.MODULE$:Lscala/Tuple2$;
       3: aload_1
       4: aload_2
       5: invokevirtual #809                // Method scala/Tuple2$.apply:(Ljava/lang/Object;Ljava/lang/Object;)Lscala/Tuple2;
       8: astore_3
       9: aload_3
      10: ifnull        42
      13: aload_3
      14: invokevirtual #814                // Method scala/Tuple2._1:()Ljava/lang/Object;
      17: checkcast     #11                 // class wvlet/airframe/sql/model/Expression
      20: astore        4
      22: aload_3
      23: invokevirtual #817                // Method scala/Tuple2._2:()Ljava/lang/Object;
      26: checkcast     #11                 // class wvlet/airframe/sql/model/Expression
      29: astore        5
      31: getstatic     #829                // Field wvlet/airframe/sql/model/Expression$And$.MODULE$:Lwvlet/airframe/sql/model/Expression$And$;
      34: aload         4
      36: aload         5
      38: invokevirtual #832                // Method wvlet/airframe/sql/model/Expression$And$.apply:(Lwvlet/airframe/sql/model/Expression;Lwvlet/airframe/sql/model/Expression;)Lwvlet/airframe/sql/model/Expression$And;
      41: areturn
      42: new           #821                // class scala/MatchError
      45: dup
      46: aload_3
      47: invokespecial #824                // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      50: athrow

  private final wvlet.airframe.sql.model.Expression concatWithEq$$anonfun$1(wvlet.airframe.sql.model.Expression, wvlet.airframe.sql.model.Expression);
    Code:
       0: getstatic     #806                // Field scala/Tuple2$.MODULE$:Lscala/Tuple2$;
       3: aload_1
       4: aload_2
       5: invokevirtual #809                // Method scala/Tuple2$.apply:(Ljava/lang/Object;Ljava/lang/Object;)Lscala/Tuple2;
       8: astore_3
       9: aload_3
      10: ifnull        42
      13: aload_3
      14: invokevirtual #814                // Method scala/Tuple2._1:()Ljava/lang/Object;
      17: checkcast     #11                 // class wvlet/airframe/sql/model/Expression
      20: astore        4
      22: aload_3
      23: invokevirtual #817                // Method scala/Tuple2._2:()Ljava/lang/Object;
      26: checkcast     #11                 // class wvlet/airframe/sql/model/Expression
      29: astore        5
      31: getstatic     #836                // Field wvlet/airframe/sql/model/Expression$Eq$.MODULE$:Lwvlet/airframe/sql/model/Expression$Eq$;
      34: aload         4
      36: aload         5
      38: invokevirtual #839                // Method wvlet/airframe/sql/model/Expression$Eq$.apply:(Lwvlet/airframe/sql/model/Expression;Lwvlet/airframe/sql/model/Expression;)Lwvlet/airframe/sql/model/Expression$Eq;
      41: areturn
      42: new           #821                // class scala/MatchError
      45: dup
      46: aload_3
      47: invokespecial #824                // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      50: athrow

  private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda);
    Code:
       0: aload_0
       1: invokedynamic #851,  0            // InvokeDynamic #3:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
       6: areturn
}
