Compiled from "LogicalPlan.scala"
public class wvlet.airframe.sql.model.LogicalPlan$Except implements scala.Product,wvlet.airframe.sql.model.SQLSig,wvlet.airframe.sql.model.LogicalPlan,wvlet.airframe.sql.model.LogicalPlan$SetOperation,java.io.Serializable {
  public static final long OFFSET$0;

  public boolean resolved$lzy18;

  public long 0bitmap$18;

  private final wvlet.airframe.sql.model.LogicalPlan$Relation left;

  private final wvlet.airframe.sql.model.LogicalPlan$Relation right;

  public static wvlet.airframe.sql.model.LogicalPlan$Except apply(wvlet.airframe.sql.model.LogicalPlan$Relation, wvlet.airframe.sql.model.LogicalPlan$Relation);
    Code:
       0: getstatic     #37                 // Field wvlet/airframe/sql/model/LogicalPlan$Except$.MODULE$:Lwvlet/airframe/sql/model/LogicalPlan$Except$;
       3: aload_0
       4: aload_1
       5: invokevirtual #39                 // Method wvlet/airframe/sql/model/LogicalPlan$Except$.apply:(Lwvlet/airframe/sql/model/LogicalPlan$Relation;Lwvlet/airframe/sql/model/LogicalPlan$Relation;)Lwvlet/airframe/sql/model/LogicalPlan$Except;
       8: areturn

  public static wvlet.airframe.sql.model.LogicalPlan$Except fromProduct(scala.Product);
    Code:
       0: getstatic     #37                 // Field wvlet/airframe/sql/model/LogicalPlan$Except$.MODULE$:Lwvlet/airframe/sql/model/LogicalPlan$Except$;
       3: aload_0
       4: invokevirtual #43                 // Method wvlet/airframe/sql/model/LogicalPlan$Except$.fromProduct:(Lscala/Product;)Lwvlet/airframe/sql/model/LogicalPlan$Except;
       7: areturn

  public static wvlet.airframe.sql.model.LogicalPlan$Except unapply(wvlet.airframe.sql.model.LogicalPlan$Except);
    Code:
       0: getstatic     #37                 // Field wvlet/airframe/sql/model/LogicalPlan$Except$.MODULE$:Lwvlet/airframe/sql/model/LogicalPlan$Except$;
       3: aload_0
       4: invokevirtual #47                 // Method wvlet/airframe/sql/model/LogicalPlan$Except$.unapply:(Lwvlet/airframe/sql/model/LogicalPlan$Except;)Lwvlet/airframe/sql/model/LogicalPlan$Except;
       7: areturn

  public wvlet.airframe.sql.model.LogicalPlan$Except(wvlet.airframe.sql.model.LogicalPlan$Relation, wvlet.airframe.sql.model.LogicalPlan$Relation);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #51                 // Field left:Lwvlet/airframe/sql/model/LogicalPlan$Relation;
       5: aload_0
       6: aload_2
       7: putfield      #53                 // Field right:Lwvlet/airframe/sql/model/LogicalPlan$Relation;
      10: aload_0
      11: invokespecial #56                 // Method java/lang/Object."<init>":()V
      14: aload_0
      15: invokestatic  #60                 // InterfaceMethod wvlet/airframe/sql/model/LogicalPlan.$init$:(Lwvlet/airframe/sql/model/LogicalPlan;)V
      18: return

  private static {};
    Code:
       0: getstatic     #68                 // Field scala/runtime/LazyVals$.MODULE$:Lscala/runtime/LazyVals$;
       3: ldc           #2                  // class wvlet/airframe/sql/model/LogicalPlan$Except
       5: ldc           #69                 // String 0bitmap$18
       7: invokevirtual #75                 // Method java/lang/Class.getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;
      10: invokevirtual #79                 // Method scala/runtime/LazyVals$.getOffsetStatic:(Ljava/lang/reflect/Field;)J
      13: putstatic     #81                 // Field OFFSET$0:J
      16: return

  public scala.collection.Iterator productIterator();
    Code:
       0: aload_0
       1: invokestatic  #87                 // InterfaceMethod scala/Product.productIterator$:(Lscala/Product;)Lscala/collection/Iterator;
       4: areturn

  public scala.collection.Iterator productElementNames();
    Code:
       0: aload_0
       1: invokestatic  #91                 // InterfaceMethod scala/Product.productElementNames$:(Lscala/Product;)Lscala/collection/Iterator;
       4: areturn

  public wvlet.airframe.sql.analyzer.QuerySignatureConfig sig$default$1();
    Code:
       0: aload_0
       1: invokestatic  #97                 // InterfaceMethod wvlet/airframe/sql/model/SQLSig.sig$default$1$:(Lwvlet/airframe/sql/model/SQLSig;)Lwvlet/airframe/sql/analyzer/QuerySignatureConfig;
       4: areturn

  public boolean resolved();
    Code:
       0: getstatic     #68                 // Field scala/runtime/LazyVals$.MODULE$:Lscala/runtime/LazyVals$;
       3: aload_0
       4: getstatic     #81                 // Field OFFSET$0:J
       7: invokevirtual #105                // Method scala/runtime/LazyVals$.get:(Ljava/lang/Object;J)J
      10: lstore_1
      11: getstatic     #68                 // Field scala/runtime/LazyVals$.MODULE$:Lscala/runtime/LazyVals$;
      14: lload_1
      15: iconst_0
      16: invokevirtual #109                // Method scala/runtime/LazyVals$.STATE:(JI)J
      19: lstore_3
      20: lload_3
      21: ldc2_w        #110                // long 3l
      24: lcmp
      25: ifne          33
      28: aload_0
      29: getfield      #113                // Field resolved$lzy18:Z
      32: ireturn
      33: lload_3
      34: lconst_0
      35: lcmp
      36: ifne          112
      39: getstatic     #68                 // Field scala/runtime/LazyVals$.MODULE$:Lscala/runtime/LazyVals$;
      42: aload_0
      43: getstatic     #81                 // Field OFFSET$0:J
      46: lload_1
      47: iconst_1
      48: iconst_0
      49: invokevirtual #117                // Method scala/runtime/LazyVals$.CAS:(Ljava/lang/Object;JJII)Z
      52: ifeq          109
      55: aload_0
      56: invokestatic  #121                // InterfaceMethod wvlet/airframe/sql/model/LogicalPlan.resolved$:(Lwvlet/airframe/sql/model/LogicalPlan;)Z
      59: istore        5
      61: aload_0
      62: iload         5
      64: putfield      #113                // Field resolved$lzy18:Z
      67: getstatic     #68                 // Field scala/runtime/LazyVals$.MODULE$:Lscala/runtime/LazyVals$;
      70: aload_0
      71: getstatic     #81                 // Field OFFSET$0:J
      74: iconst_3
      75: iconst_0
      76: invokevirtual #125                // Method scala/runtime/LazyVals$.setFlag:(Ljava/lang/Object;JII)V
      79: iload         5
      81: ireturn
      82: nop
      83: nop
      84: athrow
      85: astore        6
      87: getstatic     #68                 // Field scala/runtime/LazyVals$.MODULE$:Lscala/runtime/LazyVals$;
      90: aload_0
      91: getstatic     #81                 // Field OFFSET$0:J
      94: iconst_0
      95: iconst_0
      96: invokevirtual #125                // Method scala/runtime/LazyVals$.setFlag:(Ljava/lang/Object;JII)V
      99: aload         6
     101: athrow
     102: nop
     103: nop
     104: athrow
     105: athrow
     106: nop
     107: nop
     108: athrow
     109: goto          0
     112: getstatic     #68                 // Field scala/runtime/LazyVals$.MODULE$:Lscala/runtime/LazyVals$;
     115: aload_0
     116: getstatic     #81                 // Field OFFSET$0:J
     119: lload_1
     120: iconst_0
     121: invokevirtual #129                // Method scala/runtime/LazyVals$.wait4Notification:(Ljava/lang/Object;JJI)V
     124: goto          0
    Exception table:
       from    to  target type
          55    82    85   Class java/lang/Throwable

  public java.lang.String modelName();
    Code:
       0: aload_0
       1: invokestatic  #135                // InterfaceMethod wvlet/airframe/sql/model/LogicalPlan.modelName$:(Lwvlet/airframe/sql/model/LogicalPlan;)Ljava/lang/String;
       4: areturn

  public java.lang.String pp();
    Code:
       0: aload_0
       1: invokestatic  #139                // InterfaceMethod wvlet/airframe/sql/model/LogicalPlan.pp$:(Lwvlet/airframe/sql/model/LogicalPlan;)Ljava/lang/String;
       4: areturn

  public scala.collection.immutable.Seq expressions();
    Code:
       0: aload_0
       1: invokestatic  #145                // InterfaceMethod wvlet/airframe/sql/model/LogicalPlan.expressions$:(Lwvlet/airframe/sql/model/LogicalPlan;)Lscala/collection/immutable/Seq;
       4: areturn

  public wvlet.airframe.sql.model.LogicalPlan mapChildren(scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #152                // InterfaceMethod wvlet/airframe/sql/model/LogicalPlan.mapChildren$:(Lwvlet/airframe/sql/model/LogicalPlan;Lscala/Function1;)Lwvlet/airframe/sql/model/LogicalPlan;
       5: areturn

  public void traverse(scala.PartialFunction);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #159                // InterfaceMethod wvlet/airframe/sql/model/LogicalPlan.traverse$:(Lwvlet/airframe/sql/model/LogicalPlan;Lscala/PartialFunction;)V
       5: return

  public wvlet.airframe.sql.model.LogicalPlan transform(scala.PartialFunction);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #167                // InterfaceMethod wvlet/airframe/sql/model/LogicalPlan.transform$:(Lwvlet/airframe/sql/model/LogicalPlan;Lscala/PartialFunction;)Lwvlet/airframe/sql/model/LogicalPlan;
       5: areturn

  public wvlet.airframe.sql.model.LogicalPlan transformExpressions(scala.PartialFunction);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #171                // InterfaceMethod wvlet/airframe/sql/model/LogicalPlan.transformExpressions$:(Lwvlet/airframe/sql/model/LogicalPlan;Lscala/PartialFunction;)Lwvlet/airframe/sql/model/LogicalPlan;
       5: areturn

  public wvlet.airframe.sql.model.LogicalPlan copyInstance(scala.collection.immutable.Seq);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #178                // InterfaceMethod wvlet/airframe/sql/model/LogicalPlan.copyInstance$:(Lwvlet/airframe/sql/model/LogicalPlan;Lscala/collection/immutable/Seq;)Lwvlet/airframe/sql/model/LogicalPlan;
       5: areturn

  public scala.collection.immutable.List inputExpressions();
    Code:
       0: aload_0
       1: invokestatic  #185                // InterfaceMethod wvlet/airframe/sql/model/LogicalPlan.inputExpressions$:(Lwvlet/airframe/sql/model/LogicalPlan;)Lscala/collection/immutable/List;
       4: areturn

  public scala.collection.immutable.List collectExpressions(scala.PartialFunction);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #192                // InterfaceMethod wvlet/airframe/sql/model/LogicalPlan.collectExpressions$:(Lwvlet/airframe/sql/model/LogicalPlan;Lscala/PartialFunction;)Lscala/collection/immutable/List;
       5: areturn

  public void traverseExpressions(scala.PartialFunction);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #196                // InterfaceMethod wvlet/airframe/sql/model/LogicalPlan.traverseExpressions$:(Lwvlet/airframe/sql/model/LogicalPlan;Lscala/PartialFunction;)V
       5: return

  public boolean resolvedChildren();
    Code:
       0: aload_0
       1: invokestatic  #200                // InterfaceMethod wvlet/airframe/sql/model/LogicalPlan.resolvedChildren$:(Lwvlet/airframe/sql/model/LogicalPlan;)Z
       4: ireturn

  public int hashCode();
    Code:
       0: getstatic     #207                // Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
       3: aload_0
       4: invokevirtual #211                // Method scala/runtime/ScalaRunTime$._hashCode:(Lscala/Product;)I
       7: ireturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpeq     104
       5: aload_1
       6: astore_2
       7: aload_2
       8: instanceof    #2                  // class wvlet/airframe/sql/model/LogicalPlan$Except
      11: ifeq          97
      14: aload_2
      15: checkcast     #2                  // class wvlet/airframe/sql/model/LogicalPlan$Except
      18: astore_3
      19: aload_0
      20: invokevirtual #217                // Method left:()Lwvlet/airframe/sql/model/LogicalPlan$Relation;
      23: aload_3
      24: invokevirtual #217                // Method left:()Lwvlet/airframe/sql/model/LogicalPlan$Relation;
      27: astore        4
      29: dup
      30: ifnonnull     42
      33: pop
      34: aload         4
      36: ifnull        50
      39: goto          93
      42: aload         4
      44: invokevirtual #219                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      47: ifeq          93
      50: aload_0
      51: invokevirtual #221                // Method right:()Lwvlet/airframe/sql/model/LogicalPlan$Relation;
      54: aload_3
      55: invokevirtual #221                // Method right:()Lwvlet/airframe/sql/model/LogicalPlan$Relation;
      58: astore        5
      60: dup
      61: ifnonnull     73
      64: pop
      65: aload         5
      67: ifnull        81
      70: goto          93
      73: aload         5
      75: invokevirtual #219                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      78: ifeq          93
      81: aload_3
      82: aload_0
      83: invokevirtual #224                // Method canEqual:(Ljava/lang/Object;)Z
      86: ifeq          93
      89: iconst_1
      90: goto          94
      93: iconst_0
      94: goto          101
      97: iconst_0
      98: goto          101
     101: ifeq          108
     104: iconst_1
     105: goto          109
     108: iconst_0
     109: ireturn

  public java.lang.String toString();
    Code:
       0: getstatic     #207                // Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
       3: aload_0
       4: invokevirtual #230                // Method scala/runtime/ScalaRunTime$._toString:(Lscala/Product;)Ljava/lang/String;
       7: areturn

  public boolean canEqual(java.lang.Object);
    Code:
       0: aload_1
       1: instanceof    #2                  // class wvlet/airframe/sql/model/LogicalPlan$Except
       4: ireturn

  public int productArity();
    Code:
       0: iconst_2
       1: ireturn

  public java.lang.String productPrefix();
    Code:
       0: ldc           #234                // String Except
       2: areturn

  public java.lang.Object productElement(int);
    Code:
       0: iload_1
       1: istore_2
       2: iconst_0
       3: iload_2
       4: if_icmpne     12
       7: aload_0
       8: invokevirtual #240                // Method _1:()Lwvlet/airframe/sql/model/LogicalPlan$Relation;
      11: areturn
      12: iconst_1
      13: iload_2
      14: if_icmpne     22
      17: aload_0
      18: invokevirtual #243                // Method _2:()Lwvlet/airframe/sql/model/LogicalPlan$Relation;
      21: areturn
      22: new           #245                // class java/lang/IndexOutOfBoundsException
      25: dup
      26: iload_1
      27: invokestatic  #251                // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
      30: invokevirtual #255                // Method java/lang/Integer.toString:()Ljava/lang/String;
      33: invokespecial #258                // Method java/lang/IndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
      36: athrow

  public java.lang.String productElementName(int);
    Code:
       0: iload_1
       1: istore_2
       2: iconst_0
       3: iload_2
       4: if_icmpne     11
       7: ldc_w         #262                // String left
      10: areturn
      11: iconst_1
      12: iload_2
      13: if_icmpne     20
      16: ldc_w         #263                // String right
      19: areturn
      20: new           #245                // class java/lang/IndexOutOfBoundsException
      23: dup
      24: iload_1
      25: invokestatic  #251                // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
      28: invokevirtual #255                // Method java/lang/Integer.toString:()Ljava/lang/String;
      31: invokespecial #258                // Method java/lang/IndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
      34: athrow

  public wvlet.airframe.sql.model.LogicalPlan$Relation left();
    Code:
       0: aload_0
       1: getfield      #51                 // Field left:Lwvlet/airframe/sql/model/LogicalPlan$Relation;
       4: areturn

  public wvlet.airframe.sql.model.LogicalPlan$Relation right();
    Code:
       0: aload_0
       1: getfield      #53                 // Field right:Lwvlet/airframe/sql/model/LogicalPlan$Relation;
       4: areturn

  public scala.collection.immutable.Seq<wvlet.airframe.sql.model.LogicalPlan$Relation> children();
    Code:
       0: getstatic     #270                // Field scala/package$.MODULE$:Lscala/package$;
       3: invokevirtual #274                // Method scala/package$.Seq:()Lscala/collection/immutable/Seq$;
       6: getstatic     #207                // Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
       9: iconst_2
      10: anewarray     #21                 // class wvlet/airframe/sql/model/LogicalPlan$Relation
      13: dup
      14: iconst_0
      15: aload_0
      16: invokevirtual #217                // Method left:()Lwvlet/airframe/sql/model/LogicalPlan$Relation;
      19: aastore
      20: dup
      21: iconst_1
      22: aload_0
      23: invokevirtual #221                // Method right:()Lwvlet/airframe/sql/model/LogicalPlan$Relation;
      26: aastore
      27: invokevirtual #278                // Method scala/runtime/ScalaRunTime$.wrapRefArray:([Ljava/lang/Object;)Lscala/collection/immutable/ArraySeq;
      30: invokevirtual #283                // Method scala/collection/immutable/Seq$.apply:(Lscala/collection/immutable/Seq;)Lscala/collection/SeqOps;
      33: checkcast     #285                // class scala/collection/immutable/Seq
      36: areturn

  public java.lang.String sig(wvlet.airframe.sql.analyzer.QuerySignatureConfig);
    Code:
       0: new           #290                // class java/lang/StringBuilder
       3: dup
       4: ldc_w         #291                // int 5
       7: invokespecial #294                // Method java/lang/StringBuilder."<init>":(I)V
      10: ldc_w         #296                // String EX(
      13: invokevirtual #300                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      16: aload_0
      17: invokevirtual #217                // Method left:()Lwvlet/airframe/sql/model/LogicalPlan$Relation;
      20: aload_1
      21: invokeinterface #302,  2          // InterfaceMethod wvlet/airframe/sql/model/LogicalPlan$Relation.sig:(Lwvlet/airframe/sql/analyzer/QuerySignatureConfig;)Ljava/lang/String;
      26: invokevirtual #300                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      29: ldc_w         #304                // String ,
      32: invokevirtual #300                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      35: aload_0
      36: invokevirtual #221                // Method right:()Lwvlet/airframe/sql/model/LogicalPlan$Relation;
      39: aload_1
      40: invokeinterface #302,  2          // InterfaceMethod wvlet/airframe/sql/model/LogicalPlan$Relation.sig:(Lwvlet/airframe/sql/analyzer/QuerySignatureConfig;)Ljava/lang/String;
      45: invokevirtual #300                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      48: ldc_w         #306                // String )
      51: invokevirtual #300                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      54: invokevirtual #307                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      57: areturn

  public scala.collection.immutable.Seq<wvlet.airframe.sql.model.Attribute> inputAttributes();
    Code:
       0: aload_0
       1: invokevirtual #217                // Method left:()Lwvlet/airframe/sql/model/LogicalPlan$Relation;
       4: invokeinterface #312,  1          // InterfaceMethod wvlet/airframe/sql/model/LogicalPlan$Relation.inputAttributes:()Lscala/collection/immutable/Seq;
       9: areturn

  public scala.collection.immutable.Seq<wvlet.airframe.sql.model.Attribute> outputAttributes();
    Code:
       0: aload_0
       1: invokevirtual #217                // Method left:()Lwvlet/airframe/sql/model/LogicalPlan$Relation;
       4: invokeinterface #315,  1          // InterfaceMethod wvlet/airframe/sql/model/LogicalPlan$Relation.outputAttributes:()Lscala/collection/immutable/Seq;
       9: areturn

  public wvlet.airframe.sql.model.LogicalPlan$Except copy(wvlet.airframe.sql.model.LogicalPlan$Relation, wvlet.airframe.sql.model.LogicalPlan$Relation);
    Code:
       0: new           #2                  // class wvlet/airframe/sql/model/LogicalPlan$Except
       3: dup
       4: aload_1
       5: aload_2
       6: invokespecial #318                // Method "<init>":(Lwvlet/airframe/sql/model/LogicalPlan$Relation;Lwvlet/airframe/sql/model/LogicalPlan$Relation;)V
       9: areturn

  public wvlet.airframe.sql.model.LogicalPlan$Relation copy$default$1();
    Code:
       0: aload_0
       1: invokevirtual #217                // Method left:()Lwvlet/airframe/sql/model/LogicalPlan$Relation;
       4: areturn

  public wvlet.airframe.sql.model.LogicalPlan$Relation copy$default$2();
    Code:
       0: aload_0
       1: invokevirtual #221                // Method right:()Lwvlet/airframe/sql/model/LogicalPlan$Relation;
       4: areturn

  public wvlet.airframe.sql.model.LogicalPlan$Relation _1();
    Code:
       0: aload_0
       1: invokevirtual #217                // Method left:()Lwvlet/airframe/sql/model/LogicalPlan$Relation;
       4: areturn

  public wvlet.airframe.sql.model.LogicalPlan$Relation _2();
    Code:
       0: aload_0
       1: invokevirtual #221                // Method right:()Lwvlet/airframe/sql/model/LogicalPlan$Relation;
       4: areturn
}
