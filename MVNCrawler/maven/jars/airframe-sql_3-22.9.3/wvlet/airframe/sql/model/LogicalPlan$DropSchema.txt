Compiled from "LogicalPlan.scala"
public class wvlet.airframe.sql.model.LogicalPlan$DropSchema implements scala.Product,wvlet.airframe.sql.model.SQLSig,wvlet.airframe.sql.model.LogicalPlan,wvlet.airframe.sql.model.LeafPlan,wvlet.airframe.sql.model.LogicalPlan$DDL,java.io.Serializable {
  public static final long OFFSET$0;

  public boolean resolved$lzy24;

  public long 0bitmap$24;

  private final wvlet.airframe.sql.model.Expression$QName schema;

  private final boolean ifExists;

  private final boolean cascade;

  public static wvlet.airframe.sql.model.LogicalPlan$DropSchema apply(wvlet.airframe.sql.model.Expression$QName, boolean, boolean);
    Code:
       0: getstatic     #42                 // Field wvlet/airframe/sql/model/LogicalPlan$DropSchema$.MODULE$:Lwvlet/airframe/sql/model/LogicalPlan$DropSchema$;
       3: aload_0
       4: iload_1
       5: iload_2
       6: invokevirtual #44                 // Method wvlet/airframe/sql/model/LogicalPlan$DropSchema$.apply:(Lwvlet/airframe/sql/model/Expression$QName;ZZ)Lwvlet/airframe/sql/model/LogicalPlan$DropSchema;
       9: areturn

  public static wvlet.airframe.sql.model.LogicalPlan$DropSchema fromProduct(scala.Product);
    Code:
       0: getstatic     #42                 // Field wvlet/airframe/sql/model/LogicalPlan$DropSchema$.MODULE$:Lwvlet/airframe/sql/model/LogicalPlan$DropSchema$;
       3: aload_0
       4: invokevirtual #48                 // Method wvlet/airframe/sql/model/LogicalPlan$DropSchema$.fromProduct:(Lscala/Product;)Lwvlet/airframe/sql/model/LogicalPlan$DropSchema;
       7: areturn

  public static wvlet.airframe.sql.model.LogicalPlan$DropSchema unapply(wvlet.airframe.sql.model.LogicalPlan$DropSchema);
    Code:
       0: getstatic     #42                 // Field wvlet/airframe/sql/model/LogicalPlan$DropSchema$.MODULE$:Lwvlet/airframe/sql/model/LogicalPlan$DropSchema$;
       3: aload_0
       4: invokevirtual #52                 // Method wvlet/airframe/sql/model/LogicalPlan$DropSchema$.unapply:(Lwvlet/airframe/sql/model/LogicalPlan$DropSchema;)Lwvlet/airframe/sql/model/LogicalPlan$DropSchema;
       7: areturn

  public wvlet.airframe.sql.model.LogicalPlan$DropSchema(wvlet.airframe.sql.model.Expression$QName, boolean, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #56                 // Field schema:Lwvlet/airframe/sql/model/Expression$QName;
       5: aload_0
       6: iload_2
       7: putfield      #58                 // Field ifExists:Z
      10: aload_0
      11: iload_3
      12: putfield      #60                 // Field cascade:Z
      15: aload_0
      16: invokespecial #63                 // Method java/lang/Object."<init>":()V
      19: aload_0
      20: invokestatic  #67                 // InterfaceMethod wvlet/airframe/sql/model/LogicalPlan.$init$:(Lwvlet/airframe/sql/model/LogicalPlan;)V
      23: return

  private static {};
    Code:
       0: getstatic     #75                 // Field scala/runtime/LazyVals$.MODULE$:Lscala/runtime/LazyVals$;
       3: ldc           #2                  // class wvlet/airframe/sql/model/LogicalPlan$DropSchema
       5: ldc           #76                 // String 0bitmap$24
       7: invokevirtual #82                 // Method java/lang/Class.getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;
      10: invokevirtual #86                 // Method scala/runtime/LazyVals$.getOffsetStatic:(Ljava/lang/reflect/Field;)J
      13: putstatic     #88                 // Field OFFSET$0:J
      16: return

  public scala.collection.Iterator productIterator();
    Code:
       0: aload_0
       1: invokestatic  #94                 // InterfaceMethod scala/Product.productIterator$:(Lscala/Product;)Lscala/collection/Iterator;
       4: areturn

  public scala.collection.Iterator productElementNames();
    Code:
       0: aload_0
       1: invokestatic  #98                 // InterfaceMethod scala/Product.productElementNames$:(Lscala/Product;)Lscala/collection/Iterator;
       4: areturn

  public wvlet.airframe.sql.analyzer.QuerySignatureConfig sig$default$1();
    Code:
       0: aload_0
       1: invokestatic  #104                // InterfaceMethod wvlet/airframe/sql/model/SQLSig.sig$default$1$:(Lwvlet/airframe/sql/model/SQLSig;)Lwvlet/airframe/sql/analyzer/QuerySignatureConfig;
       4: areturn

  public boolean resolved();
    Code:
       0: getstatic     #75                 // Field scala/runtime/LazyVals$.MODULE$:Lscala/runtime/LazyVals$;
       3: aload_0
       4: getstatic     #88                 // Field OFFSET$0:J
       7: invokevirtual #112                // Method scala/runtime/LazyVals$.get:(Ljava/lang/Object;J)J
      10: lstore_1
      11: getstatic     #75                 // Field scala/runtime/LazyVals$.MODULE$:Lscala/runtime/LazyVals$;
      14: lload_1
      15: iconst_0
      16: invokevirtual #116                // Method scala/runtime/LazyVals$.STATE:(JI)J
      19: lstore_3
      20: lload_3
      21: ldc2_w        #117                // long 3l
      24: lcmp
      25: ifne          33
      28: aload_0
      29: getfield      #120                // Field resolved$lzy24:Z
      32: ireturn
      33: lload_3
      34: lconst_0
      35: lcmp
      36: ifne          112
      39: getstatic     #75                 // Field scala/runtime/LazyVals$.MODULE$:Lscala/runtime/LazyVals$;
      42: aload_0
      43: getstatic     #88                 // Field OFFSET$0:J
      46: lload_1
      47: iconst_1
      48: iconst_0
      49: invokevirtual #124                // Method scala/runtime/LazyVals$.CAS:(Ljava/lang/Object;JJII)Z
      52: ifeq          109
      55: aload_0
      56: invokestatic  #128                // InterfaceMethod wvlet/airframe/sql/model/LogicalPlan.resolved$:(Lwvlet/airframe/sql/model/LogicalPlan;)Z
      59: istore        5
      61: aload_0
      62: iload         5
      64: putfield      #120                // Field resolved$lzy24:Z
      67: getstatic     #75                 // Field scala/runtime/LazyVals$.MODULE$:Lscala/runtime/LazyVals$;
      70: aload_0
      71: getstatic     #88                 // Field OFFSET$0:J
      74: iconst_3
      75: iconst_0
      76: invokevirtual #132                // Method scala/runtime/LazyVals$.setFlag:(Ljava/lang/Object;JII)V
      79: iload         5
      81: ireturn
      82: nop
      83: nop
      84: athrow
      85: astore        6
      87: getstatic     #75                 // Field scala/runtime/LazyVals$.MODULE$:Lscala/runtime/LazyVals$;
      90: aload_0
      91: getstatic     #88                 // Field OFFSET$0:J
      94: iconst_0
      95: iconst_0
      96: invokevirtual #132                // Method scala/runtime/LazyVals$.setFlag:(Ljava/lang/Object;JII)V
      99: aload         6
     101: athrow
     102: nop
     103: nop
     104: athrow
     105: athrow
     106: nop
     107: nop
     108: athrow
     109: goto          0
     112: getstatic     #75                 // Field scala/runtime/LazyVals$.MODULE$:Lscala/runtime/LazyVals$;
     115: aload_0
     116: getstatic     #88                 // Field OFFSET$0:J
     119: lload_1
     120: iconst_0
     121: invokevirtual #136                // Method scala/runtime/LazyVals$.wait4Notification:(Ljava/lang/Object;JJI)V
     124: goto          0
    Exception table:
       from    to  target type
          55    82    85   Class java/lang/Throwable

  public java.lang.String modelName();
    Code:
       0: aload_0
       1: invokestatic  #142                // InterfaceMethod wvlet/airframe/sql/model/LogicalPlan.modelName$:(Lwvlet/airframe/sql/model/LogicalPlan;)Ljava/lang/String;
       4: areturn

  public java.lang.String pp();
    Code:
       0: aload_0
       1: invokestatic  #146                // InterfaceMethod wvlet/airframe/sql/model/LogicalPlan.pp$:(Lwvlet/airframe/sql/model/LogicalPlan;)Ljava/lang/String;
       4: areturn

  public scala.collection.immutable.Seq expressions();
    Code:
       0: aload_0
       1: invokestatic  #152                // InterfaceMethod wvlet/airframe/sql/model/LogicalPlan.expressions$:(Lwvlet/airframe/sql/model/LogicalPlan;)Lscala/collection/immutable/Seq;
       4: areturn

  public wvlet.airframe.sql.model.LogicalPlan mapChildren(scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #159                // InterfaceMethod wvlet/airframe/sql/model/LogicalPlan.mapChildren$:(Lwvlet/airframe/sql/model/LogicalPlan;Lscala/Function1;)Lwvlet/airframe/sql/model/LogicalPlan;
       5: areturn

  public void traverse(scala.PartialFunction);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #166                // InterfaceMethod wvlet/airframe/sql/model/LogicalPlan.traverse$:(Lwvlet/airframe/sql/model/LogicalPlan;Lscala/PartialFunction;)V
       5: return

  public wvlet.airframe.sql.model.LogicalPlan transform(scala.PartialFunction);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #174                // InterfaceMethod wvlet/airframe/sql/model/LogicalPlan.transform$:(Lwvlet/airframe/sql/model/LogicalPlan;Lscala/PartialFunction;)Lwvlet/airframe/sql/model/LogicalPlan;
       5: areturn

  public wvlet.airframe.sql.model.LogicalPlan transformExpressions(scala.PartialFunction);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #178                // InterfaceMethod wvlet/airframe/sql/model/LogicalPlan.transformExpressions$:(Lwvlet/airframe/sql/model/LogicalPlan;Lscala/PartialFunction;)Lwvlet/airframe/sql/model/LogicalPlan;
       5: areturn

  public wvlet.airframe.sql.model.LogicalPlan copyInstance(scala.collection.immutable.Seq);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #185                // InterfaceMethod wvlet/airframe/sql/model/LogicalPlan.copyInstance$:(Lwvlet/airframe/sql/model/LogicalPlan;Lscala/collection/immutable/Seq;)Lwvlet/airframe/sql/model/LogicalPlan;
       5: areturn

  public scala.collection.immutable.List inputExpressions();
    Code:
       0: aload_0
       1: invokestatic  #192                // InterfaceMethod wvlet/airframe/sql/model/LogicalPlan.inputExpressions$:(Lwvlet/airframe/sql/model/LogicalPlan;)Lscala/collection/immutable/List;
       4: areturn

  public scala.collection.immutable.List collectExpressions(scala.PartialFunction);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #199                // InterfaceMethod wvlet/airframe/sql/model/LogicalPlan.collectExpressions$:(Lwvlet/airframe/sql/model/LogicalPlan;Lscala/PartialFunction;)Lscala/collection/immutable/List;
       5: areturn

  public void traverseExpressions(scala.PartialFunction);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #203                // InterfaceMethod wvlet/airframe/sql/model/LogicalPlan.traverseExpressions$:(Lwvlet/airframe/sql/model/LogicalPlan;Lscala/PartialFunction;)V
       5: return

  public boolean resolvedChildren();
    Code:
       0: aload_0
       1: invokestatic  #207                // InterfaceMethod wvlet/airframe/sql/model/LogicalPlan.resolvedChildren$:(Lwvlet/airframe/sql/model/LogicalPlan;)Z
       4: ireturn

  public scala.collection.immutable.Seq children();
    Code:
       0: aload_0
       1: invokestatic  #212                // InterfaceMethod wvlet/airframe/sql/model/LeafPlan.children$:(Lwvlet/airframe/sql/model/LeafPlan;)Lscala/collection/immutable/Seq;
       4: areturn

  public scala.collection.immutable.Seq inputAttributes();
    Code:
       0: aload_0
       1: invokestatic  #216                // InterfaceMethod wvlet/airframe/sql/model/LeafPlan.inputAttributes$:(Lwvlet/airframe/sql/model/LeafPlan;)Lscala/collection/immutable/Seq;
       4: areturn

  public scala.collection.immutable.Seq outputAttributes();
    Code:
       0: aload_0
       1: invokestatic  #221                // InterfaceMethod wvlet/airframe/sql/model/LogicalPlan$DDL.outputAttributes$:(Lwvlet/airframe/sql/model/LogicalPlan$DDL;)Lscala/collection/immutable/Seq;
       4: areturn

  public int hashCode();
    Code:
       0: ldc           #224                // int -889275714
       2: istore_1
       3: iload_1
       4: aload_0
       5: invokevirtual #227                // Method productPrefix:()Ljava/lang/String;
       8: invokevirtual #231                // Method java/lang/String.hashCode:()I
      11: invokestatic  #237                // Method scala/runtime/Statics.mix:(II)I
      14: istore_1
      15: iload_1
      16: aload_0
      17: invokevirtual #240                // Method schema:()Lwvlet/airframe/sql/model/Expression$QName;
      20: invokestatic  #244                // Method scala/runtime/Statics.anyHash:(Ljava/lang/Object;)I
      23: invokestatic  #237                // Method scala/runtime/Statics.mix:(II)I
      26: istore_1
      27: iload_1
      28: aload_0
      29: invokevirtual #246                // Method ifExists:()Z
      32: ifeq          41
      35: sipush        1231
      38: goto          44
      41: sipush        1237
      44: invokestatic  #237                // Method scala/runtime/Statics.mix:(II)I
      47: istore_1
      48: iload_1
      49: aload_0
      50: invokevirtual #248                // Method cascade:()Z
      53: ifeq          62
      56: sipush        1231
      59: goto          65
      62: sipush        1237
      65: invokestatic  #237                // Method scala/runtime/Statics.mix:(II)I
      68: istore_1
      69: iload_1
      70: iconst_3
      71: invokestatic  #251                // Method scala/runtime/Statics.finalizeHash:(II)I
      74: ireturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpeq     95
       5: aload_1
       6: astore_2
       7: aload_2
       8: instanceof    #2                  // class wvlet/airframe/sql/model/LogicalPlan$DropSchema
      11: ifeq          88
      14: aload_2
      15: checkcast     #2                  // class wvlet/airframe/sql/model/LogicalPlan$DropSchema
      18: astore_3
      19: aload_0
      20: invokevirtual #246                // Method ifExists:()Z
      23: aload_3
      24: invokevirtual #246                // Method ifExists:()Z
      27: if_icmpne     84
      30: aload_0
      31: invokevirtual #248                // Method cascade:()Z
      34: aload_3
      35: invokevirtual #248                // Method cascade:()Z
      38: if_icmpne     84
      41: aload_0
      42: invokevirtual #240                // Method schema:()Lwvlet/airframe/sql/model/Expression$QName;
      45: aload_3
      46: invokevirtual #240                // Method schema:()Lwvlet/airframe/sql/model/Expression$QName;
      49: astore        4
      51: dup
      52: ifnonnull     64
      55: pop
      56: aload         4
      58: ifnull        72
      61: goto          84
      64: aload         4
      66: invokevirtual #256                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      69: ifeq          84
      72: aload_3
      73: aload_0
      74: invokevirtual #259                // Method canEqual:(Ljava/lang/Object;)Z
      77: ifeq          84
      80: iconst_1
      81: goto          85
      84: iconst_0
      85: goto          92
      88: iconst_0
      89: goto          92
      92: ifeq          99
      95: iconst_1
      96: goto          100
      99: iconst_0
     100: ireturn

  public java.lang.String toString();
    Code:
       0: getstatic     #266                // Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
       3: aload_0
       4: invokevirtual #270                // Method scala/runtime/ScalaRunTime$._toString:(Lscala/Product;)Ljava/lang/String;
       7: areturn

  public boolean canEqual(java.lang.Object);
    Code:
       0: aload_1
       1: instanceof    #2                  // class wvlet/airframe/sql/model/LogicalPlan$DropSchema
       4: ireturn

  public int productArity();
    Code:
       0: iconst_3
       1: ireturn

  public java.lang.String productPrefix();
    Code:
       0: ldc_w         #273                // String DropSchema
       3: areturn

  public java.lang.Object productElement(int);
    Code:
       0: iload_1
       1: istore_2
       2: iload_2
       3: tableswitch   { // 0 to 2
                     0: 28
                     1: 33
                     2: 41
               default: 49
          }
      28: aload_0
      29: invokevirtual #279                // Method _1:()Lwvlet/airframe/sql/model/Expression$QName;
      32: areturn
      33: aload_0
      34: invokevirtual #282                // Method _2:()Z
      37: invokestatic  #288                // Method scala/runtime/BoxesRunTime.boxToBoolean:(Z)Ljava/lang/Boolean;
      40: areturn
      41: aload_0
      42: invokevirtual #291                // Method _3:()Z
      45: invokestatic  #288                // Method scala/runtime/BoxesRunTime.boxToBoolean:(Z)Ljava/lang/Boolean;
      48: areturn
      49: new           #293                // class java/lang/IndexOutOfBoundsException
      52: dup
      53: iload_1
      54: invokestatic  #297                // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
      57: invokevirtual #301                // Method java/lang/Integer.toString:()Ljava/lang/String;
      60: invokespecial #304                // Method java/lang/IndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
      63: athrow

  public java.lang.String productElementName(int);
    Code:
       0: iload_1
       1: istore_2
       2: iload_2
       3: tableswitch   { // 0 to 2
                     0: 28
                     1: 32
                     2: 36
               default: 40
          }
      28: ldc_w         #308                // String schema
      31: areturn
      32: ldc_w         #309                // String ifExists
      35: areturn
      36: ldc_w         #310                // String cascade
      39: areturn
      40: new           #293                // class java/lang/IndexOutOfBoundsException
      43: dup
      44: iload_1
      45: invokestatic  #297                // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
      48: invokevirtual #301                // Method java/lang/Integer.toString:()Ljava/lang/String;
      51: invokespecial #304                // Method java/lang/IndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
      54: athrow

  public wvlet.airframe.sql.model.Expression$QName schema();
    Code:
       0: aload_0
       1: getfield      #56                 // Field schema:Lwvlet/airframe/sql/model/Expression$QName;
       4: areturn

  public boolean ifExists();
    Code:
       0: aload_0
       1: getfield      #58                 // Field ifExists:Z
       4: ireturn

  public boolean cascade();
    Code:
       0: aload_0
       1: getfield      #60                 // Field cascade:Z
       4: ireturn

  public java.lang.String sig(wvlet.airframe.sql.analyzer.QuerySignatureConfig);
    Code:
       0: ldc_w         #315                // String DS
       3: areturn

  public wvlet.airframe.sql.model.LogicalPlan$DropSchema copy(wvlet.airframe.sql.model.Expression$QName, boolean, boolean);
    Code:
       0: new           #2                  // class wvlet/airframe/sql/model/LogicalPlan$DropSchema
       3: dup
       4: aload_1
       5: iload_2
       6: iload_3
       7: invokespecial #319                // Method "<init>":(Lwvlet/airframe/sql/model/Expression$QName;ZZ)V
      10: areturn

  public wvlet.airframe.sql.model.Expression$QName copy$default$1();
    Code:
       0: aload_0
       1: invokevirtual #240                // Method schema:()Lwvlet/airframe/sql/model/Expression$QName;
       4: areturn

  public boolean copy$default$2();
    Code:
       0: aload_0
       1: invokevirtual #246                // Method ifExists:()Z
       4: ireturn

  public boolean copy$default$3();
    Code:
       0: aload_0
       1: invokevirtual #248                // Method cascade:()Z
       4: ireturn

  public wvlet.airframe.sql.model.Expression$QName _1();
    Code:
       0: aload_0
       1: invokevirtual #240                // Method schema:()Lwvlet/airframe/sql/model/Expression$QName;
       4: areturn

  public boolean _2();
    Code:
       0: aload_0
       1: invokevirtual #246                // Method ifExists:()Z
       4: ireturn

  public boolean _3();
    Code:
       0: aload_0
       1: invokevirtual #248                // Method cascade:()Z
       4: ireturn
}
