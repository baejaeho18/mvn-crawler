Compiled from "CTEResolver.scala"
public final class wvlet.airframe.sql.analyzer.CTEResolver$$anon$1 extends scala.runtime.AbstractPartialFunction<wvlet.airframe.sql.model.LogicalPlan, wvlet.airframe.sql.model.LogicalPlan> implements java.io.Serializable {
  private final wvlet.airframe.sql.analyzer.AnalyzerContext analyzerContext$1;

  public wvlet.airframe.sql.analyzer.CTEResolver$$anon$1(wvlet.airframe.sql.analyzer.AnalyzerContext);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #45                 // Field analyzerContext$1:Lwvlet/airframe/sql/analyzer/AnalyzerContext;
       5: aload_0
       6: invokespecial #48                 // Method scala/runtime/AbstractPartialFunction."<init>":()V
       9: return

  public final boolean isDefinedAt(wvlet.airframe.sql.model.LogicalPlan);
    Code:
       0: aload_1
       1: astore_2
       2: aload_2
       3: instanceof    #20                 // class wvlet/airframe/sql/model/LogicalPlan$Query
       6: ifeq          83
       9: aload_2
      10: checkcast     #20                 // class wvlet/airframe/sql/model/LogicalPlan$Query
      13: astore_3
      14: getstatic     #57                 // Field wvlet/airframe/sql/model/LogicalPlan$Query$.MODULE$:Lwvlet/airframe/sql/model/LogicalPlan$Query$;
      17: aload_3
      18: invokevirtual #61                 // Method wvlet/airframe/sql/model/LogicalPlan$Query$.unapply:(Lwvlet/airframe/sql/model/LogicalPlan$Query;)Lwvlet/airframe/sql/model/LogicalPlan$Query;
      21: astore        4
      23: aload         4
      25: invokevirtual #65                 // Method wvlet/airframe/sql/model/LogicalPlan$Query._1:()Lwvlet/airframe/sql/model/LogicalPlan$With;
      28: astore        5
      30: aload         4
      32: invokevirtual #69                 // Method wvlet/airframe/sql/model/LogicalPlan$Query._2:()Lwvlet/airframe/sql/model/LogicalPlan$Relation;
      35: astore        6
      37: aload         5
      39: ifnull        83
      42: getstatic     #72                 // Field wvlet/airframe/sql/model/LogicalPlan$With$.MODULE$:Lwvlet/airframe/sql/model/LogicalPlan$With$;
      45: aload         5
      47: invokevirtual #75                 // Method wvlet/airframe/sql/model/LogicalPlan$With$.unapply:(Lwvlet/airframe/sql/model/LogicalPlan$With;)Lwvlet/airframe/sql/model/LogicalPlan$With;
      50: astore        7
      52: aload         7
      54: invokevirtual #78                 // Method wvlet/airframe/sql/model/LogicalPlan$With._1:()Z
      57: istore        8
      59: aload         7
      61: invokevirtual #81                 // Method wvlet/airframe/sql/model/LogicalPlan$With._2:()Lscala/collection/immutable/Seq;
      64: astore        9
      66: iload         8
      68: istore        10
      70: aload         9
      72: astore        11
      74: aload         6
      76: astore        12
      78: aload_3
      79: astore        13
      81: iconst_1
      82: ireturn
      83: iconst_0
      84: ireturn

  public final java.lang.Object applyOrElse(wvlet.airframe.sql.model.LogicalPlan, scala.Function1);
    Code:
       0: aload_1
       1: astore_3
       2: aload_3
       3: instanceof    #20                 // class wvlet/airframe/sql/model/LogicalPlan$Query
       6: ifeq          163
       9: aload_3
      10: checkcast     #20                 // class wvlet/airframe/sql/model/LogicalPlan$Query
      13: astore        4
      15: getstatic     #57                 // Field wvlet/airframe/sql/model/LogicalPlan$Query$.MODULE$:Lwvlet/airframe/sql/model/LogicalPlan$Query$;
      18: aload         4
      20: invokevirtual #61                 // Method wvlet/airframe/sql/model/LogicalPlan$Query$.unapply:(Lwvlet/airframe/sql/model/LogicalPlan$Query;)Lwvlet/airframe/sql/model/LogicalPlan$Query;
      23: astore        5
      25: aload         5
      27: invokevirtual #65                 // Method wvlet/airframe/sql/model/LogicalPlan$Query._1:()Lwvlet/airframe/sql/model/LogicalPlan$With;
      30: astore        6
      32: aload         5
      34: invokevirtual #69                 // Method wvlet/airframe/sql/model/LogicalPlan$Query._2:()Lwvlet/airframe/sql/model/LogicalPlan$Relation;
      37: astore        7
      39: aload         6
      41: ifnull        163
      44: getstatic     #72                 // Field wvlet/airframe/sql/model/LogicalPlan$With$.MODULE$:Lwvlet/airframe/sql/model/LogicalPlan$With$;
      47: aload         6
      49: invokevirtual #75                 // Method wvlet/airframe/sql/model/LogicalPlan$With$.unapply:(Lwvlet/airframe/sql/model/LogicalPlan$With;)Lwvlet/airframe/sql/model/LogicalPlan$With;
      52: astore        8
      54: aload         8
      56: invokevirtual #78                 // Method wvlet/airframe/sql/model/LogicalPlan$With._1:()Z
      59: istore        9
      61: aload         8
      63: invokevirtual #81                 // Method wvlet/airframe/sql/model/LogicalPlan$With._2:()Lscala/collection/immutable/Seq;
      66: astore        10
      68: iload         9
      70: istore        11
      72: aload         10
      74: astore        12
      76: aload         7
      78: astore        13
      80: aload         4
      82: astore        14
      84: iload         11
      86: ifeq          98
      89: getstatic     #96                 // Field wvlet/airframe/sql/SQLErrorCode$UnsupportedSyntax$.MODULE$:Lwvlet/airframe/sql/SQLErrorCode$UnsupportedSyntax$;
      92: ldc           #98                 // String recursive WITH statement is not supported
      94: invokevirtual #102                // Method wvlet/airframe/sql/SQLErrorCode$UnsupportedSyntax$.newException:(Ljava/lang/String;)Lwvlet/airframe/sql/SQLError;
      97: athrow
      98: aload_0
      99: getfield      #45                 // Field analyzerContext$1:Lwvlet/airframe/sql/analyzer/AnalyzerContext;
     102: invokestatic  #108                // Method scala/runtime/ObjectRef.create:(Ljava/lang/Object;)Lscala/runtime/ObjectRef;
     105: astore        15
     107: aload         12
     109: aload         15
     111: invokedynamic #130,  0            // InvokeDynamic #0:apply:(Lscala/runtime/ObjectRef;)Lscala/Function1;
     116: invokeinterface #136,  2          // InterfaceMethod scala/collection/immutable/Seq.map:(Lscala/Function1;)Ljava/lang/Object;
     121: checkcast     #132                // class scala/collection/immutable/Seq
     124: astore        16
     126: getstatic     #141                // Field wvlet/airframe/sql/analyzer/TypeResolver$.MODULE$:Lwvlet/airframe/sql/analyzer/TypeResolver$;
     129: aload         15
     131: getfield      #145                // Field scala/runtime/ObjectRef.elem:Ljava/lang/Object;
     134: checkcast     #147                // class wvlet/airframe/sql/analyzer/AnalyzerContext
     137: aload         13
     139: invokevirtual #151                // Method wvlet/airframe/sql/analyzer/TypeResolver$.resolveRelation:(Lwvlet/airframe/sql/analyzer/AnalyzerContext;Lwvlet/airframe/sql/model/LogicalPlan;)Lwvlet/airframe/sql/model/LogicalPlan$Relation;
     142: astore        17
     144: getstatic     #57                 // Field wvlet/airframe/sql/model/LogicalPlan$Query$.MODULE$:Lwvlet/airframe/sql/model/LogicalPlan$Query$;
     147: getstatic     #72                 // Field wvlet/airframe/sql/model/LogicalPlan$With$.MODULE$:Lwvlet/airframe/sql/model/LogicalPlan$With$;
     150: iload         11
     152: aload         16
     154: invokevirtual #154                // Method wvlet/airframe/sql/model/LogicalPlan$With$.apply:(ZLscala/collection/immutable/Seq;)Lwvlet/airframe/sql/model/LogicalPlan$With;
     157: aload         17
     159: invokevirtual #157                // Method wvlet/airframe/sql/model/LogicalPlan$Query$.apply:(Lwvlet/airframe/sql/model/LogicalPlan$With;Lwvlet/airframe/sql/model/LogicalPlan$Relation;)Lwvlet/airframe/sql/model/LogicalPlan$Query;
     162: areturn
     163: aload_2
     164: aload_1
     165: invokeinterface #161,  2          // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
     170: areturn

  public boolean isDefinedAt(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #22                 // class wvlet/airframe/sql/model/LogicalPlan
       5: invokevirtual #169                // Method isDefinedAt:(Lwvlet/airframe/sql/model/LogicalPlan;)Z
       8: ireturn

  public java.lang.Object applyOrElse(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #22                 // class wvlet/airframe/sql/model/LogicalPlan
       5: aload_2
       6: invokevirtual #172                // Method applyOrElse:(Lwvlet/airframe/sql/model/LogicalPlan;Lscala/Function1;)Ljava/lang/Object;
       9: areturn

  private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda);
    Code:
       0: aload_0
       1: invokedynamic #184,  0            // InvokeDynamic #1:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
       6: areturn
}
