Compiled from "Task.scala"
public final class monix.eval.Task$$anon$2 implements scala.math.Ordering<scala.Tuple2<A, java.lang.Object>> {
  public scala.Some tryCompare(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #20                 // Method scala/math/Ordering$class.tryCompare:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Lscala/Some;
       6: areturn

  public boolean lteq(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #30                 // Method scala/math/Ordering$class.lteq:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean gteq(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #33                 // Method scala/math/Ordering$class.gteq:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean lt(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #36                 // Method scala/math/Ordering$class.lt:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean gt(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #39                 // Method scala/math/Ordering$class.gt:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean equiv(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #42                 // Method scala/math/Ordering$class.equiv:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public java.lang.Object max(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #47                 // Method scala/math/Ordering$class.max:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object min(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #50                 // Method scala/math/Ordering$class.min:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public scala.math.Ordering<scala.Tuple2<A, java.lang.Object>> reverse();
    Code:
       0: aload_0
       1: invokestatic  #55                 // Method scala/math/Ordering$class.reverse:(Lscala/math/Ordering;)Lscala/math/Ordering;
       4: areturn

  public <U> scala.math.Ordering<U> on(scala.Function1<U, scala.Tuple2<A, java.lang.Object>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #60                 // Method scala/math/Ordering$class.on:(Lscala/math/Ordering;Lscala/Function1;)Lscala/math/Ordering;
       5: areturn

  public scala.math.Ordering$Ops mkOrderingOps(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #67                 // Method scala/math/Ordering$class.mkOrderingOps:(Lscala/math/Ordering;Ljava/lang/Object;)Lscala/math/Ordering$Ops;
       5: areturn

  public int compare(scala.Tuple2<A, java.lang.Object>, scala.Tuple2<A, java.lang.Object>);
    Code:
       0: aload_1
       1: invokevirtual #76                 // Method scala/Tuple2._2$mcI$sp:()I
       4: aload_2
       5: invokevirtual #76                 // Method scala/Tuple2._2$mcI$sp:()I
       8: if_icmpge     15
      11: iconst_m1
      12: goto          31
      15: aload_1
      16: invokevirtual #76                 // Method scala/Tuple2._2$mcI$sp:()I
      19: aload_2
      20: invokevirtual #76                 // Method scala/Tuple2._2$mcI$sp:()I
      23: if_icmple     30
      26: iconst_1
      27: goto          31
      30: iconst_0
      31: ireturn

  public scala.math.PartialOrdering reverse();
    Code:
       0: aload_0
       1: invokevirtual #80                 // Method reverse:()Lscala/math/Ordering;
       4: areturn

  public scala.Option tryCompare(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #83                 // Method tryCompare:(Ljava/lang/Object;Ljava/lang/Object;)Lscala/Some;
       6: areturn

  public int compare(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #72                 // class scala/Tuple2
       5: aload_2
       6: checkcast     #72                 // class scala/Tuple2
       9: invokevirtual #86                 // Method compare:(Lscala/Tuple2;Lscala/Tuple2;)I
      12: ireturn

  public monix.eval.Task$$anon$2();
    Code:
       0: aload_0
       1: invokespecial #90                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: invokestatic  #96                 // Method scala/math/PartialOrdering$class.$init$:(Lscala/math/PartialOrdering;)V
       8: aload_0
       9: invokestatic  #99                 // Method scala/math/Ordering$class.$init$:(Lscala/math/Ordering;)V
      12: return
}
