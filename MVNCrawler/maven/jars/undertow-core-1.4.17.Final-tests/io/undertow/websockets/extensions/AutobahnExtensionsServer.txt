Compiled from "AutobahnExtensionsServer.java"
public class io.undertow.websockets.extensions.AutobahnExtensionsServer {
  private io.undertow.server.protocol.http.HttpOpenListener openListener;

  private org.xnio.XnioWorker worker;

  private org.xnio.channels.AcceptingChannel<org.xnio.StreamConnection> server;

  private org.xnio.Xnio xnio;

  private final int port;

  public static io.undertow.websockets.WebSocketProtocolHandshakeHandler webSocketDebugHandler();
    Code:
       0: new           #1                  // class io/undertow/websockets/WebSocketProtocolHandshakeHandler
       3: dup
       4: new           #2                  // class io/undertow/websockets/extensions/AutobahnExtensionsServer$1
       7: dup
       8: invokespecial #3                  // Method io/undertow/websockets/extensions/AutobahnExtensionsServer$1."<init>":()V
      11: invokespecial #4                  // Method io/undertow/websockets/WebSocketProtocolHandshakeHandler."<init>":(Lio/undertow/websockets/WebSocketConnectionCallback;)V
      14: areturn

  public io.undertow.websockets.extensions.AutobahnExtensionsServer(int);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iload_1
       6: putfield      #6                  // Field port:I
       9: return

  public void run();
    Code:
       0: aload_0
       1: invokestatic  #7                  // Method org/xnio/Xnio.getInstance:()Lorg/xnio/Xnio;
       4: putfield      #8                  // Field xnio:Lorg/xnio/Xnio;
       7: aload_0
       8: aload_0
       9: getfield      #8                  // Field xnio:Lorg/xnio/Xnio;
      12: invokestatic  #9                  // Method org/xnio/OptionMap.builder:()Lorg/xnio/OptionMap$Builder;
      15: getstatic     #10                 // Field org/xnio/Options.CONNECTION_HIGH_WATER:Lorg/xnio/Option;
      18: ldc           #11                 // int 1000000
      20: invokevirtual #12                 // Method org/xnio/OptionMap$Builder.set:(Lorg/xnio/Option;I)Lorg/xnio/OptionMap$Builder;
      23: getstatic     #13                 // Field org/xnio/Options.CONNECTION_LOW_WATER:Lorg/xnio/Option;
      26: ldc           #11                 // int 1000000
      28: invokevirtual #12                 // Method org/xnio/OptionMap$Builder.set:(Lorg/xnio/Option;I)Lorg/xnio/OptionMap$Builder;
      31: getstatic     #14                 // Field org/xnio/Options.WORKER_TASK_CORE_THREADS:Lorg/xnio/Option;
      34: bipush        10
      36: invokevirtual #12                 // Method org/xnio/OptionMap$Builder.set:(Lorg/xnio/Option;I)Lorg/xnio/OptionMap$Builder;
      39: getstatic     #15                 // Field org/xnio/Options.WORKER_TASK_MAX_THREADS:Lorg/xnio/Option;
      42: bipush        12
      44: invokevirtual #12                 // Method org/xnio/OptionMap$Builder.set:(Lorg/xnio/Option;I)Lorg/xnio/OptionMap$Builder;
      47: getstatic     #16                 // Field org/xnio/Options.TCP_NODELAY:Lorg/xnio/Option;
      50: iconst_1
      51: invokevirtual #17                 // Method org/xnio/OptionMap$Builder.set:(Lorg/xnio/Option;Z)Lorg/xnio/OptionMap$Builder;
      54: getstatic     #18                 // Field org/xnio/Options.CORK:Lorg/xnio/Option;
      57: iconst_1
      58: invokevirtual #17                 // Method org/xnio/OptionMap$Builder.set:(Lorg/xnio/Option;Z)Lorg/xnio/OptionMap$Builder;
      61: invokevirtual #19                 // Method org/xnio/OptionMap$Builder.getMap:()Lorg/xnio/OptionMap;
      64: invokevirtual #20                 // Method org/xnio/Xnio.createWorker:(Lorg/xnio/OptionMap;)Lorg/xnio/XnioWorker;
      67: putfield      #21                 // Field worker:Lorg/xnio/XnioWorker;
      70: invokestatic  #9                  // Method org/xnio/OptionMap.builder:()Lorg/xnio/OptionMap$Builder;
      73: getstatic     #16                 // Field org/xnio/Options.TCP_NODELAY:Lorg/xnio/Option;
      76: iconst_1
      77: invokevirtual #17                 // Method org/xnio/OptionMap$Builder.set:(Lorg/xnio/Option;Z)Lorg/xnio/OptionMap$Builder;
      80: getstatic     #22                 // Field org/xnio/Options.REUSE_ADDRESSES:Lorg/xnio/Option;
      83: iconst_1
      84: invokevirtual #17                 // Method org/xnio/OptionMap$Builder.set:(Lorg/xnio/Option;Z)Lorg/xnio/OptionMap$Builder;
      87: invokevirtual #19                 // Method org/xnio/OptionMap$Builder.getMap:()Lorg/xnio/OptionMap;
      90: astore_1
      91: aload_0
      92: new           #23                 // class io/undertow/server/protocol/http/HttpOpenListener
      95: dup
      96: new           #24                 // class io/undertow/server/DefaultByteBufferPool
      99: dup
     100: iconst_0
     101: sipush        8192
     104: invokespecial #25                 // Method io/undertow/server/DefaultByteBufferPool."<init>":(ZI)V
     107: invokespecial #26                 // Method io/undertow/server/protocol/http/HttpOpenListener."<init>":(Lio/undertow/connector/ByteBufferPool;)V
     110: putfield      #27                 // Field openListener:Lio/undertow/server/protocol/http/HttpOpenListener;
     113: aload_0
     114: getfield      #27                 // Field openListener:Lio/undertow/server/protocol/http/HttpOpenListener;
     117: invokestatic  #28                 // Method org/xnio/ChannelListeners.openListenerAdapter:(Lorg/xnio/ChannelListener;)Lorg/xnio/ChannelListener;
     120: astore_2
     121: aload_0
     122: aload_0
     123: getfield      #21                 // Field worker:Lorg/xnio/XnioWorker;
     126: new           #29                 // class java/net/InetSocketAddress
     129: dup
     130: aload_0
     131: getfield      #6                  // Field port:I
     134: invokespecial #30                 // Method java/net/InetSocketAddress."<init>":(I)V
     137: aload_2
     138: aload_1
     139: invokevirtual #31                 // Method org/xnio/XnioWorker.createStreamConnectionServer:(Ljava/net/SocketAddress;Lorg/xnio/ChannelListener;Lorg/xnio/OptionMap;)Lorg/xnio/channels/AcceptingChannel;
     142: putfield      #32                 // Field server:Lorg/xnio/channels/AcceptingChannel;
     145: invokestatic  #33                 // Method webSocketDebugHandler:()Lio/undertow/websockets/WebSocketProtocolHandshakeHandler;
     148: new           #34                 // class io/undertow/websockets/extensions/PerMessageDeflateHandshake
     151: dup
     152: invokespecial #35                 // Method io/undertow/websockets/extensions/PerMessageDeflateHandshake."<init>":()V
     155: invokevirtual #36                 // Method io/undertow/websockets/WebSocketProtocolHandshakeHandler.addExtension:(Lio/undertow/websockets/extensions/ExtensionHandshake;)Lio/undertow/websockets/WebSocketProtocolHandshakeHandler;
     158: astore_3
     159: new           #37                 // class io/undertow/websockets/extensions/DebugExtensionsHeaderHandler
     162: dup
     163: aload_3
     164: invokespecial #38                 // Method io/undertow/websockets/extensions/DebugExtensionsHeaderHandler."<init>":(Lio/undertow/server/HttpHandler;)V
     167: astore        4
     169: aload_0
     170: aload         4
     172: invokespecial #39                 // Method setRootHandler:(Lio/undertow/server/HttpHandler;)V
     175: aload_0
     176: getfield      #32                 // Field server:Lorg/xnio/channels/AcceptingChannel;
     179: invokeinterface #40,  1           // InterfaceMethod org/xnio/channels/AcceptingChannel.resumeAccepts:()V
     184: goto          197
     187: astore_1
     188: new           #42                 // class java/lang/RuntimeException
     191: dup
     192: aload_1
     193: invokespecial #43                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/Throwable;)V
     196: athrow
     197: return
    Exception table:
       from    to  target type
           7   184   187   Class java/io/IOException

  private void setRootHandler(io.undertow.server.HttpHandler);
    Code:
       0: aload_0
       1: getfield      #27                 // Field openListener:Lio/undertow/server/protocol/http/HttpOpenListener;
       4: aload_1
       5: invokevirtual #44                 // Method io/undertow/server/protocol/http/HttpOpenListener.setRootHandler:(Lio/undertow/server/HttpHandler;)V
       8: return

  public static void main(java.lang.String[]);
    Code:
       0: aload_0
       1: arraylength
       2: iconst_1
       3: if_icmpne     20
       6: aload_0
       7: iconst_0
       8: aaload
       9: ldc           #45                 // String --debug
      11: invokevirtual #46                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      14: ifeq          20
      17: invokestatic  #47                 // Method org/apache/log4j/BasicConfigurator.configure:()V
      20: new           #48                 // class io/undertow/websockets/extensions/AutobahnExtensionsServer
      23: dup
      24: sipush        7777
      27: invokespecial #49                 // Method "<init>":(I)V
      30: invokevirtual #50                 // Method run:()V
      33: return
}
