Compiled from "DebuggingSlicePool.java"
class io.undertow.testutils.DebuggingSlicePool$DebuggingBuffer implements io.undertow.connector.PooledByteBuffer {
  private static final java.util.concurrent.atomic.AtomicInteger allocationCount;

  private final java.lang.RuntimeException allocationPoint;

  private final io.undertow.connector.PooledByteBuffer delegate;

  private final java.lang.String label;

  private final int no;

  private volatile boolean free;

  private java.lang.RuntimeException freePoint;

  io.undertow.testutils.DebuggingSlicePool$DebuggingBuffer(io.undertow.connector.PooledByteBuffer, java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field free:Z
       9: aload_0
      10: aload_1
      11: putfield      #3                  // Field delegate:Lio/undertow/connector/PooledByteBuffer;
      14: aload_0
      15: aload_2
      16: putfield      #4                  // Field label:Ljava/lang/String;
      19: aload_0
      20: getstatic     #5                  // Field allocationCount:Ljava/util/concurrent/atomic/AtomicInteger;
      23: invokevirtual #6                  // Method java/util/concurrent/atomic/AtomicInteger.getAndIncrement:()I
      26: putfield      #7                  // Field no:I
      29: invokestatic  #8                  // Method io/undertow/testutils/DebuggingSlicePool.access$000:()Ljava/lang/ThreadLocal;
      32: invokevirtual #9                  // Method java/lang/ThreadLocal.get:()Ljava/lang/Object;
      35: checkcast     #10                 // class java/lang/String
      38: astore_3
      39: invokestatic  #8                  // Method io/undertow/testutils/DebuggingSlicePool.access$000:()Ljava/lang/ThreadLocal;
      42: invokevirtual #11                 // Method java/lang/ThreadLocal.remove:()V
      45: aload_0
      46: new           #12                 // class java/lang/RuntimeException
      49: dup
      50: new           #13                 // class java/lang/StringBuilder
      53: dup
      54: invokespecial #14                 // Method java/lang/StringBuilder."<init>":()V
      57: aload_1
      58: invokeinterface #15,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
      63: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      66: ldc           #17                 // String  NO:
      68: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      71: aload_0
      72: getfield      #7                  // Field no:I
      75: invokevirtual #19                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      78: ldc           #20                 // String
      80: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      83: aload_3
      84: ifnonnull     92
      87: ldc           #21                 // String [NO_CONTEXT]
      89: goto          93
      92: aload_3
      93: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      96: invokevirtual #22                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      99: invokespecial #23                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/String;)V
     102: putfield      #24                 // Field allocationPoint:Ljava/lang/RuntimeException;
     105: getstatic     #25                 // Field io/undertow/testutils/DebuggingSlicePool.BUFFERS:Ljava/util/Set;
     108: aload_0
     109: invokeinterface #26,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
     114: pop
     115: return

  public void close();
    Code:
       0: aload_0
       1: getfield      #2                  // Field free:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: new           #12                 // class java/lang/RuntimeException
      12: dup
      13: ldc           #27                 // String FREE POINT
      15: invokespecial #23                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/String;)V
      18: putfield      #28                 // Field freePoint:Ljava/lang/RuntimeException;
      21: aload_0
      22: iconst_1
      23: putfield      #2                  // Field free:Z
      26: getstatic     #25                 // Field io/undertow/testutils/DebuggingSlicePool.BUFFERS:Ljava/util/Set;
      29: aload_0
      30: invokeinterface #29,  2           // InterfaceMethod java/util/Set.remove:(Ljava/lang/Object;)Z
      35: pop
      36: aload_0
      37: getfield      #3                  // Field delegate:Lio/undertow/connector/PooledByteBuffer;
      40: invokeinterface #30,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
      45: return

  public boolean isOpen();
    Code:
       0: aload_0
       1: getfield      #2                  // Field free:Z
       4: ifne          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public java.nio.ByteBuffer getBuffer() throws java.lang.IllegalStateException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field free:Z
       4: ifeq          21
       7: new           #31                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #32                 // String Buffer already freed, free point:
      13: aload_0
      14: getfield      #28                 // Field freePoint:Ljava/lang/RuntimeException;
      17: invokespecial #33                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      20: athrow
      21: aload_0
      22: getfield      #3                  // Field delegate:Lio/undertow/connector/PooledByteBuffer;
      25: invokeinterface #15,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
      30: areturn

  java.lang.RuntimeException getAllocationPoint();
    Code:
       0: aload_0
       1: getfield      #24                 // Field allocationPoint:Ljava/lang/RuntimeException;
       4: areturn

  java.lang.String getLabel();
    Code:
       0: aload_0
       1: getfield      #4                  // Field label:Ljava/lang/String;
       4: areturn

  public java.lang.String toString();
    Code:
       0: new           #13                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #14                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #34                 // String [debug:
       9: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: getfield      #7                  // Field no:I
      16: invokevirtual #19                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      19: ldc           #35                 // String ]
      21: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: aload_0
      25: getfield      #3                  // Field delegate:Lio/undertow/connector/PooledByteBuffer;
      28: invokevirtual #36                 // Method java/lang/Object.toString:()Ljava/lang/String;
      31: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      34: invokevirtual #22                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      37: areturn

  static {};
    Code:
       0: new           #37                 // class java/util/concurrent/atomic/AtomicInteger
       3: dup
       4: invokespecial #38                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
       7: putstatic     #5                  // Field allocationCount:Ljava/util/concurrent/atomic/AtomicInteger;
      10: return
}
