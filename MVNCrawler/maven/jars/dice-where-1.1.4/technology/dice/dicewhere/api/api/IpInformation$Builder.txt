Compiled from "IpInformation.java"
public class technology.dice.dicewhere.api.api.IpInformation$Builder {
  private java.lang.String countryCodeAlpha2;

  private java.lang.String geonameId;

  private java.lang.String city;

  private java.lang.String leastSpecificDivision;

  private java.lang.String mostSpecificDivision;

  private java.lang.String postcode;

  private technology.dice.dicewhere.api.api.IP startOfRange;

  private technology.dice.dicewhere.api.api.IP endOfRange;

  private java.lang.String originalLine;

  private java.lang.Boolean isVpn;

  private technology.dice.dicewhere.api.api.IpInformation$Builder();
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: return

  public technology.dice.dicewhere.api.api.IpInformation$Builder withCountryCodeAlpha2(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
       5: checkcast     #4                  // class java/lang/String
       8: putfield      #5                  // Field countryCodeAlpha2:Ljava/lang/String;
      11: aload_0
      12: areturn

  public technology.dice.dicewhere.api.api.IpInformation$Builder withGeonameId(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #6                  // Field geonameId:Ljava/lang/String;
       5: aload_0
       6: areturn

  public technology.dice.dicewhere.api.api.IpInformation$Builder withCity(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #7                  // Field city:Ljava/lang/String;
       5: aload_0
       6: areturn

  public technology.dice.dicewhere.api.api.IpInformation$Builder withLeastSpecificDivision(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #8                  // Field leastSpecificDivision:Ljava/lang/String;
       5: aload_0
       6: areturn

  public technology.dice.dicewhere.api.api.IpInformation$Builder withMostSpecificDivision(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #9                  // Field mostSpecificDivision:Ljava/lang/String;
       5: aload_0
       6: areturn

  public technology.dice.dicewhere.api.api.IpInformation$Builder withPostcode(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #10                 // Field postcode:Ljava/lang/String;
       5: aload_0
       6: areturn

  public technology.dice.dicewhere.api.api.IpInformation$Builder withStartOfRange(technology.dice.dicewhere.api.api.IP);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
       5: checkcast     #11                 // class technology/dice/dicewhere/api/api/IP
       8: putfield      #12                 // Field startOfRange:Ltechnology/dice/dicewhere/api/api/IP;
      11: aload_0
      12: areturn

  public technology.dice.dicewhere.api.api.IpInformation$Builder withEndOfRange(technology.dice.dicewhere.api.api.IP);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
       5: checkcast     #11                 // class technology/dice/dicewhere/api/api/IP
       8: putfield      #13                 // Field endOfRange:Ltechnology/dice/dicewhere/api/api/IP;
      11: aload_0
      12: areturn

  public technology.dice.dicewhere.api.api.IpInformation$Builder withOriginalLine(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #14                 // Field originalLine:Ljava/lang/String;
       5: aload_0
       6: areturn

  public technology.dice.dicewhere.api.api.IpInformation$Builder isVpn(java.util.Optional<java.lang.Boolean>);
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: invokevirtual #15                 // Method java/util/Optional.orElse:(Ljava/lang/Object;)Ljava/lang/Object;
       6: checkcast     #16                 // class java/lang/Boolean
       9: putfield      #17                 // Field isVpn:Ljava/lang/Boolean;
      12: aload_0
      13: areturn

  public technology.dice.dicewhere.api.api.IpInformation$Builder isVpn(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #18                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
       5: putfield      #17                 // Field isVpn:Ljava/lang/Boolean;
       8: aload_0
       9: areturn

  public technology.dice.dicewhere.api.api.IpInformation$Builder isVpn(technology.dice.dicewhere.lineprocessing.serializers.protobuf.ThreeStateValueProto$ThreeStateValue);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #19                 // Method technology/dice/dicewhere/utils/ProtoValueConverter.parseThreeStateProto:(Ltechnology/dice/dicewhere/lineprocessing/serializers/protobuf/ThreeStateValueProto$ThreeStateValue;)Ljava/util/Optional;
       5: aconst_null
       6: invokevirtual #15                 // Method java/util/Optional.orElse:(Ljava/lang/Object;)Ljava/lang/Object;
       9: checkcast     #16                 // class java/lang/Boolean
      12: putfield      #17                 // Field isVpn:Ljava/lang/Boolean;
      15: aload_0
      16: areturn

  public technology.dice.dicewhere.api.api.IpInformation build();
    Code:
       0: new           #20                 // class technology/dice/dicewhere/api/api/IpInformation
       3: dup
       4: aload_0
       5: getfield      #5                  // Field countryCodeAlpha2:Ljava/lang/String;
       8: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
      11: checkcast     #4                  // class java/lang/String
      14: aload_0
      15: getfield      #6                  // Field geonameId:Ljava/lang/String;
      18: aload_0
      19: getfield      #7                  // Field city:Ljava/lang/String;
      22: aload_0
      23: getfield      #8                  // Field leastSpecificDivision:Ljava/lang/String;
      26: aload_0
      27: getfield      #9                  // Field mostSpecificDivision:Ljava/lang/String;
      30: aload_0
      31: getfield      #10                 // Field postcode:Ljava/lang/String;
      34: aload_0
      35: getfield      #12                 // Field startOfRange:Ltechnology/dice/dicewhere/api/api/IP;
      38: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
      41: checkcast     #11                 // class technology/dice/dicewhere/api/api/IP
      44: aload_0
      45: getfield      #13                 // Field endOfRange:Ltechnology/dice/dicewhere/api/api/IP;
      48: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
      51: checkcast     #11                 // class technology/dice/dicewhere/api/api/IP
      54: aload_0
      55: getfield      #14                 // Field originalLine:Ljava/lang/String;
      58: aload_0
      59: getfield      #17                 // Field isVpn:Ljava/lang/Boolean;
      62: invokespecial #21                 // Method technology/dice/dicewhere/api/api/IpInformation."<init>":(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ltechnology/dice/dicewhere/api/api/IP;Ltechnology/dice/dicewhere/api/api/IP;Ljava/lang/String;Ljava/lang/Boolean;)V
      65: areturn

  technology.dice.dicewhere.api.api.IpInformation$Builder(technology.dice.dicewhere.api.api.IpInformation$1);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method "<init>":()V
       4: return
}
