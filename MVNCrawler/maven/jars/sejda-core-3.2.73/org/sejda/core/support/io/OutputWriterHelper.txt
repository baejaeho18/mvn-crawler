Compiled from "OutputWriterHelper.java"
final class org.sejda.core.support.io.OutputWriterHelper {
  private static final org.slf4j.Logger LOG;

  private org.sejda.core.support.io.OutputWriterHelper();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  static void moveToFile(java.util.Map<java.lang.String, java.io.File>, java.io.File, org.sejda.model.output.ExistingOutputPolicy, org.sejda.model.task.TaskExecutionContext) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokevirtual #2                  // Method java/io/File.exists:()Z
       4: ifeq          35
       7: aload_1
       8: invokevirtual #3                  // Method java/io/File.isFile:()Z
      11: ifne          35
      14: new           #4                  // class java/io/IOException
      17: dup
      18: ldc           #5                  // String Wrong output destination %s, must be a file.
      20: iconst_1
      21: anewarray     #6                  // class java/lang/Object
      24: dup
      25: iconst_0
      26: aload_1
      27: aastore
      28: invokestatic  #7                  // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      31: invokespecial #8                  // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      34: athrow
      35: aload_0
      36: invokeinterface #9,  1            // InterfaceMethod java/util/Map.size:()I
      41: iconst_1
      42: if_icmpeq     78
      45: new           #4                  // class java/io/IOException
      48: dup
      49: ldc           #10                 // String Wrong files map size %d, must be 1 to copy to the selected destination %s
      51: iconst_2
      52: anewarray     #6                  // class java/lang/Object
      55: dup
      56: iconst_0
      57: aload_0
      58: invokeinterface #9,  1            // InterfaceMethod java/util/Map.size:()I
      63: invokestatic  #11                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      66: aastore
      67: dup
      68: iconst_1
      69: aload_1
      70: aastore
      71: invokestatic  #7                  // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      74: invokespecial #8                  // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      77: athrow
      78: aload_0
      79: invokeinterface #12,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      84: invokeinterface #13,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      89: astore        4
      91: aload         4
      93: invokeinterface #14,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      98: ifeq          154
     101: aload         4
     103: invokeinterface #15,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     108: checkcast     #16                 // class java/util/Map$Entry
     111: astore        5
     113: aload         5
     115: invokeinterface #17,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
     120: checkcast     #18                 // class java/io/File
     123: aload_1
     124: aload_2
     125: invokestatic  #19                 // Method java/util/Optional.of:(Ljava/lang/Object;)Ljava/util/Optional;
     128: invokedynamic #20,  0             // InvokeDynamic #0:test:()Ljava/util/function/Predicate;
     133: invokevirtual #21                 // Method java/util/Optional.filter:(Ljava/util/function/Predicate;)Ljava/util/Optional;
     136: invokedynamic #22,  0             // InvokeDynamic #1:get:()Ljava/util/function/Supplier;
     141: invokevirtual #23                 // Method java/util/Optional.orElseGet:(Ljava/util/function/Supplier;)Ljava/lang/Object;
     144: checkcast     #24                 // class org/sejda/model/output/ExistingOutputPolicy
     147: aload_3
     148: invokestatic  #25                 // Method moveFile:(Ljava/io/File;Ljava/io/File;Lorg/sejda/model/output/ExistingOutputPolicy;Lorg/sejda/model/task/TaskExecutionContext;)V
     151: goto          91
     154: return

  static void moveToDirectory(java.util.Map<java.lang.String, java.io.File>, java.io.File, org.sejda.model.output.ExistingOutputPolicy, org.sejda.model.task.TaskExecutionContext) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokevirtual #2                  // Method java/io/File.exists:()Z
       4: ifne          35
       7: aload_1
       8: invokevirtual #26                 // Method java/io/File.mkdirs:()Z
      11: ifne          35
      14: new           #4                  // class java/io/IOException
      17: dup
      18: ldc           #27                 // String Unable to make destination directory tree %s.
      20: iconst_1
      21: anewarray     #6                  // class java/lang/Object
      24: dup
      25: iconst_0
      26: aload_1
      27: aastore
      28: invokestatic  #7                  // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      31: invokespecial #8                  // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      34: athrow
      35: aload_1
      36: invokevirtual #28                 // Method java/io/File.isDirectory:()Z
      39: ifne          63
      42: new           #4                  // class java/io/IOException
      45: dup
      46: ldc           #29                 // String Wrong output destination %s, must be a directory.
      48: iconst_1
      49: anewarray     #6                  // class java/lang/Object
      52: dup
      53: iconst_0
      54: aload_1
      55: aastore
      56: invokestatic  #7                  // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      59: invokespecial #8                  // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      62: athrow
      63: aload_0
      64: invokeinterface #12,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      69: invokeinterface #13,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      74: astore        4
      76: aload         4
      78: invokeinterface #14,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      83: ifeq          186
      86: aload         4
      88: invokeinterface #15,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      93: checkcast     #16                 // class java/util/Map$Entry
      96: astore        5
      98: aload         5
     100: invokeinterface #30,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
     105: checkcast     #31                 // class java/lang/CharSequence
     108: invokestatic  #32                 // Method org/apache/commons/lang3/StringUtils.isBlank:(Ljava/lang/CharSequence;)Z
     111: ifeq          141
     114: new           #4                  // class java/io/IOException
     117: dup
     118: ldc           #33                 // String Unable to move %s to the output directory, no output name specified.
     120: iconst_1
     121: anewarray     #6                  // class java/lang/Object
     124: dup
     125: iconst_0
     126: aload         5
     128: invokeinterface #17,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
     133: aastore
     134: invokestatic  #7                  // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
     137: invokespecial #8                  // Method java/io/IOException."<init>":(Ljava/lang/String;)V
     140: athrow
     141: aload         5
     143: invokeinterface #17,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
     148: checkcast     #18                 // class java/io/File
     151: new           #18                 // class java/io/File
     154: dup
     155: aload_1
     156: aload         5
     158: invokeinterface #30,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
     163: checkcast     #34                 // class java/lang/String
     166: aload_0
     167: invokeinterface #9,  1            // InterfaceMethod java/util/Map.size:()I
     172: invokestatic  #35                 // Method finalName:(Ljava/lang/String;I)Ljava/lang/String;
     175: invokespecial #36                 // Method java/io/File."<init>":(Ljava/io/File;Ljava/lang/String;)V
     178: aload_2
     179: aload_3
     180: invokestatic  #25                 // Method moveFile:(Ljava/io/File;Ljava/io/File;Lorg/sejda/model/output/ExistingOutputPolicy;Lorg/sejda/model/task/TaskExecutionContext;)V
     183: goto          76
     186: return

  static void moveFile(java.io.File, java.io.File, org.sejda.model.output.ExistingOutputPolicy, org.sejda.model.task.TaskExecutionContext) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokevirtual #2                  // Method java/io/File.exists:()Z
       4: ifeq          165
       7: getstatic     #37                 // Field org/sejda/core/support/io/OutputWriterHelper$1.$SwitchMap$org$sejda$model$output$ExistingOutputPolicy:[I
      10: aload_2
      11: invokevirtual #38                 // Method org/sejda/model/output/ExistingOutputPolicy.ordinal:()I
      14: iaload
      15: tableswitch   { // 1 to 3
                     1: 40
                     2: 85
                     3: 122
               default: 136
          }
      40: getstatic     #39                 // Field LOG:Lorg/slf4j/Logger;
      43: ldc           #40                 // String Moving {} to {}.
      45: aload_0
      46: aload_1
      47: invokeinterface #41,  4           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      52: aload_0
      53: invokevirtual #42                 // Method java/io/File.toPath:()Ljava/nio/file/Path;
      56: aload_1
      57: invokevirtual #42                 // Method java/io/File.toPath:()Ljava/nio/file/Path;
      60: iconst_1
      61: anewarray     #43                 // class java/nio/file/CopyOption
      64: dup
      65: iconst_0
      66: getstatic     #44                 // Field java/nio/file/StandardCopyOption.REPLACE_EXISTING:Ljava/nio/file/StandardCopyOption;
      69: aastore
      70: invokestatic  #45                 // Method java/nio/file/Files.move:(Ljava/nio/file/Path;Ljava/nio/file/Path;[Ljava/nio/file/CopyOption;)Ljava/nio/file/Path;
      73: pop
      74: aload_3
      75: invokevirtual #46                 // Method org/sejda/model/task/TaskExecutionContext.notifiableTaskMetadata:()Lorg/sejda/model/task/NotifiableTaskMetadata;
      78: aload_1
      79: invokevirtual #47                 // Method org/sejda/model/task/NotifiableTaskMetadata.addTaskOutput:(Ljava/io/File;)V
      82: goto          190
      85: aload_1
      86: invokestatic  #48                 // Method org/sejda/core/support/io/IOUtils.findNewNameThatDoesNotExist:(Ljava/io/File;)Ljava/io/File;
      89: astore        4
      91: getstatic     #39                 // Field LOG:Lorg/slf4j/Logger;
      94: ldc           #49                 // String Output exists {}, will use new name {}.
      96: aload_1
      97: aload         4
      99: invokeinterface #41,  4           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
     104: aload_0
     105: aload         4
     107: invokestatic  #50                 // Method doMoveFile:(Ljava/io/File;Ljava/io/File;)V
     110: aload_3
     111: invokevirtual #46                 // Method org/sejda/model/task/TaskExecutionContext.notifiableTaskMetadata:()Lorg/sejda/model/task/NotifiableTaskMetadata;
     114: aload         4
     116: invokevirtual #47                 // Method org/sejda/model/task/NotifiableTaskMetadata.addTaskOutput:(Ljava/io/File;)V
     119: goto          190
     122: getstatic     #39                 // Field LOG:Lorg/slf4j/Logger;
     125: ldc           #51                 // String Skipping already existing output file {}
     127: aload_1
     128: invokeinterface #52,  3           // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;Ljava/lang/Object;)V
     133: goto          190
     136: new           #4                  // class java/io/IOException
     139: dup
     140: ldc           #53                 // String Unable to write %s to the already existing file destination %s. (policy is %s)
     142: iconst_3
     143: anewarray     #6                  // class java/lang/Object
     146: dup
     147: iconst_0
     148: aload_0
     149: aastore
     150: dup
     151: iconst_1
     152: aload_1
     153: aastore
     154: dup
     155: iconst_2
     156: aload_2
     157: aastore
     158: invokestatic  #7                  // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
     161: invokespecial #8                  // Method java/io/IOException."<init>":(Ljava/lang/String;)V
     164: athrow
     165: getstatic     #39                 // Field LOG:Lorg/slf4j/Logger;
     168: ldc           #40                 // String Moving {} to {}.
     170: aload_0
     171: aload_1
     172: invokeinterface #41,  4           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
     177: aload_0
     178: aload_1
     179: invokestatic  #50                 // Method doMoveFile:(Ljava/io/File;Ljava/io/File;)V
     182: aload_3
     183: invokevirtual #46                 // Method org/sejda/model/task/TaskExecutionContext.notifiableTaskMetadata:()Lorg/sejda/model/task/NotifiableTaskMetadata;
     186: aload_1
     187: invokevirtual #47                 // Method org/sejda/model/task/NotifiableTaskMetadata.addTaskOutput:(Ljava/io/File;)V
     190: return

  private static void doMoveFile(java.io.File, java.io.File) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #54                 // Method org/apache/commons/io/FileUtils.moveFile:(Ljava/io/File;Ljava/io/File;)V
       5: goto          42
       8: astore_2
       9: aload_2
      10: invokevirtual #55                 // Method java/io/IOException.getMessage:()Ljava/lang/String;
      13: ldc           #56                 // String Failed to delete original file
      15: invokevirtual #57                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
      18: ifeq          40
      21: getstatic     #39                 // Field LOG:Lorg/slf4j/Logger;
      24: aload_2
      25: invokevirtual #55                 // Method java/io/IOException.getMessage:()Ljava/lang/String;
      28: invokeinterface #58,  2           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;)V
      33: aload_0
      34: invokevirtual #59                 // Method java/io/File.deleteOnExit:()V
      37: goto          42
      40: aload_2
      41: athrow
      42: return
    Exception table:
       from    to  target type
           0     5     8   Class java/io/IOException

  private static java.lang.String finalName(java.lang.String, int);
    Code:
       0: aload_0
       1: ldc           #60                 // String [TOTAL_FILESNUMBER]
       3: iload_1
       4: invokestatic  #61                 // Method java/lang/Integer.toString:(I)Ljava/lang/String;
       7: invokevirtual #62                 // Method java/lang/String.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;
      10: invokestatic  #63                 // Method org/sejda/core/support/io/IOUtils.shortenFilename:(Ljava/lang/String;)Ljava/lang/String;
      13: areturn

  static void copyToStreamZipped(java.util.Map<java.lang.String, java.io.File>, java.io.OutputStream) throws java.io.IOException;
    Code:
       0: new           #64                 // class java/util/zip/ZipOutputStream
       3: dup
       4: aload_1
       5: invokespecial #65                 // Method java/util/zip/ZipOutputStream."<init>":(Ljava/io/OutputStream;)V
       8: astore_2
       9: aconst_null
      10: astore_3
      11: aload_0
      12: invokeinterface #12,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      17: invokeinterface #13,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      22: astore        4
      24: aload         4
      26: invokeinterface #14,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      31: ifeq          287
      34: aload         4
      36: invokeinterface #15,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      41: checkcast     #16                 // class java/util/Map$Entry
      44: astore        5
      46: aload         5
      48: invokeinterface #30,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      53: checkcast     #31                 // class java/lang/CharSequence
      56: invokestatic  #32                 // Method org/apache/commons/lang3/StringUtils.isBlank:(Ljava/lang/CharSequence;)Z
      59: ifeq          89
      62: new           #4                  // class java/io/IOException
      65: dup
      66: ldc           #66                 // String Unable to copy %s to the output stream, no output name specified.
      68: iconst_1
      69: anewarray     #6                  // class java/lang/Object
      72: dup
      73: iconst_0
      74: aload         5
      76: invokeinterface #17,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      81: aastore
      82: invokestatic  #7                  // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      85: invokespecial #8                  // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      88: athrow
      89: new           #67                 // class java/io/FileInputStream
      92: dup
      93: aload         5
      95: invokeinterface #17,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
     100: checkcast     #18                 // class java/io/File
     103: invokespecial #68                 // Method java/io/FileInputStream."<init>":(Ljava/io/File;)V
     106: astore        6
     108: aconst_null
     109: astore        7
     111: aload_2
     112: new           #69                 // class java/util/zip/ZipEntry
     115: dup
     116: aload         5
     118: invokeinterface #30,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
     123: checkcast     #34                 // class java/lang/String
     126: invokespecial #70                 // Method java/util/zip/ZipEntry."<init>":(Ljava/lang/String;)V
     129: invokevirtual #71                 // Method java/util/zip/ZipOutputStream.putNextEntry:(Ljava/util/zip/ZipEntry;)V
     132: getstatic     #39                 // Field LOG:Lorg/slf4j/Logger;
     135: ldc           #72                 // String Copying {} to zip stream {}.
     137: aload         5
     139: invokeinterface #17,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
     144: aload         5
     146: invokeinterface #30,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
     151: invokeinterface #41,  4           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
     156: aload         6
     158: aload_2
     159: invokestatic  #73                 // Method org/apache/commons/io/IOUtils.copy:(Ljava/io/InputStream;Ljava/io/OutputStream;)I
     162: pop
     163: aload         6
     165: ifnull        250
     168: aload         7
     170: ifnull        193
     173: aload         6
     175: invokevirtual #74                 // Method java/io/FileInputStream.close:()V
     178: goto          250
     181: astore        8
     183: aload         7
     185: aload         8
     187: invokevirtual #76                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
     190: goto          250
     193: aload         6
     195: invokevirtual #74                 // Method java/io/FileInputStream.close:()V
     198: goto          250
     201: astore        8
     203: aload         8
     205: astore        7
     207: aload         8
     209: athrow
     210: astore        9
     212: aload         6
     214: ifnull        247
     217: aload         7
     219: ifnull        242
     222: aload         6
     224: invokevirtual #74                 // Method java/io/FileInputStream.close:()V
     227: goto          247
     230: astore        10
     232: aload         7
     234: aload         10
     236: invokevirtual #76                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
     239: goto          247
     242: aload         6
     244: invokevirtual #74                 // Method java/io/FileInputStream.close:()V
     247: aload         9
     249: athrow
     250: aload         5
     252: invokeinterface #17,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
     257: checkcast     #18                 // class java/io/File
     260: invokestatic  #77                 // Method delete:(Ljava/io/File;)V
     263: goto          284
     266: astore        11
     268: aload         5
     270: invokeinterface #17,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
     275: checkcast     #18                 // class java/io/File
     278: invokestatic  #77                 // Method delete:(Ljava/io/File;)V
     281: aload         11
     283: athrow
     284: goto          24
     287: aload_2
     288: ifnull        363
     291: aload_3
     292: ifnull        313
     295: aload_2
     296: invokevirtual #78                 // Method java/util/zip/ZipOutputStream.close:()V
     299: goto          363
     302: astore        4
     304: aload_3
     305: aload         4
     307: invokevirtual #76                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
     310: goto          363
     313: aload_2
     314: invokevirtual #78                 // Method java/util/zip/ZipOutputStream.close:()V
     317: goto          363
     320: astore        4
     322: aload         4
     324: astore_3
     325: aload         4
     327: athrow
     328: astore        12
     330: aload_2
     331: ifnull        360
     334: aload_3
     335: ifnull        356
     338: aload_2
     339: invokevirtual #78                 // Method java/util/zip/ZipOutputStream.close:()V
     342: goto          360
     345: astore        13
     347: aload_3
     348: aload         13
     350: invokevirtual #76                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
     353: goto          360
     356: aload_2
     357: invokevirtual #78                 // Method java/util/zip/ZipOutputStream.close:()V
     360: aload         12
     362: athrow
     363: return
    Exception table:
       from    to  target type
         173   178   181   Class java/lang/Throwable
         111   163   201   Class java/lang/Throwable
         111   163   210   any
         222   227   230   Class java/lang/Throwable
         201   212   210   any
          89   250   266   any
         266   268   266   any
         295   299   302   Class java/lang/Throwable
          11   287   320   Class java/lang/Throwable
          11   287   328   any
         338   342   345   Class java/lang/Throwable
         320   330   328   any

  static void copyToStream(java.io.File, java.io.OutputStream) throws java.io.IOException;
    Code:
       0: new           #67                 // class java/io/FileInputStream
       3: dup
       4: aload_0
       5: invokespecial #68                 // Method java/io/FileInputStream."<init>":(Ljava/io/File;)V
       8: astore_2
       9: aconst_null
      10: astore_3
      11: aload_2
      12: aload_1
      13: invokestatic  #73                 // Method org/apache/commons/io/IOUtils.copy:(Ljava/io/InputStream;Ljava/io/OutputStream;)I
      16: pop
      17: aload_2
      18: ifnull        93
      21: aload_3
      22: ifnull        43
      25: aload_2
      26: invokevirtual #79                 // Method java/io/InputStream.close:()V
      29: goto          93
      32: astore        4
      34: aload_3
      35: aload         4
      37: invokevirtual #76                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
      40: goto          93
      43: aload_2
      44: invokevirtual #79                 // Method java/io/InputStream.close:()V
      47: goto          93
      50: astore        4
      52: aload         4
      54: astore_3
      55: aload         4
      57: athrow
      58: astore        5
      60: aload_2
      61: ifnull        90
      64: aload_3
      65: ifnull        86
      68: aload_2
      69: invokevirtual #79                 // Method java/io/InputStream.close:()V
      72: goto          90
      75: astore        6
      77: aload_3
      78: aload         6
      80: invokevirtual #76                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
      83: goto          90
      86: aload_2
      87: invokevirtual #79                 // Method java/io/InputStream.close:()V
      90: aload         5
      92: athrow
      93: aload_0
      94: invokestatic  #77                 // Method delete:(Ljava/io/File;)V
      97: goto          109
     100: astore        7
     102: aload_0
     103: invokestatic  #77                 // Method delete:(Ljava/io/File;)V
     106: aload         7
     108: athrow
     109: return
    Exception table:
       from    to  target type
          25    29    32   Class java/lang/Throwable
          11    17    50   Class java/lang/Throwable
          11    17    58   any
          68    72    75   Class java/lang/Throwable
          50    60    58   any
           0    93   100   any
         100   102   100   any

  private static void delete(java.io.File);
    Code:
       0: aload_0
       1: invokevirtual #80                 // Method java/io/File.delete:()Z
       4: ifne          18
       7: getstatic     #39                 // Field LOG:Lorg/slf4j/Logger;
      10: ldc           #81                 // String Unable to delete temporary file {}
      12: aload_0
      13: invokeinterface #82,  3           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;)V
      18: return

  private static org.sejda.model.output.ExistingOutputPolicy lambda$moveToFile$1();
    Code:
       0: getstatic     #39                 // Field LOG:Lorg/slf4j/Logger;
       3: ldc           #83                 // String Cannot use {} output policy for single output, replaced with {}
       5: getstatic     #84                 // Field org/sejda/model/output/ExistingOutputPolicy.SKIP:Lorg/sejda/model/output/ExistingOutputPolicy;
       8: getstatic     #85                 // Field org/sejda/model/output/ExistingOutputPolicy.FAIL:Lorg/sejda/model/output/ExistingOutputPolicy;
      11: invokeinterface #41,  4           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      16: getstatic     #85                 // Field org/sejda/model/output/ExistingOutputPolicy.FAIL:Lorg/sejda/model/output/ExistingOutputPolicy;
      19: areturn

  private static boolean lambda$moveToFile$0(org.sejda.model.output.ExistingOutputPolicy);
    Code:
       0: aload_0
       1: getstatic     #84                 // Field org/sejda/model/output/ExistingOutputPolicy.SKIP:Lorg/sejda/model/output/ExistingOutputPolicy;
       4: if_acmpeq     11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  static {};
    Code:
       0: ldc           #86                 // class org/sejda/core/support/io/OutputWriterHelper
       2: invokestatic  #87                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #39                 // Field LOG:Lorg/slf4j/Logger;
       8: return
}
