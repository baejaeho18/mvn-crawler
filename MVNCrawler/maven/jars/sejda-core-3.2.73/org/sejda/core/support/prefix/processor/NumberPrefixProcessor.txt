Compiled from "NumberPrefixProcessor.java"
abstract class org.sejda.core.support.prefix.processor.NumberPrefixProcessor implements org.sejda.core.support.prefix.processor.PrefixProcessor {
  private static final org.slf4j.Logger LOG;

  private final java.util.regex.Pattern pattern;

  org.sejda.core.support.prefix.processor.NumberPrefixProcessor(java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_1
       5: invokestatic  #2                  // Method org/apache/commons/lang3/StringUtils.isBlank:(Ljava/lang/CharSequence;)Z
       8: ifeq          21
      11: new           #3                  // class java/lang/IllegalArgumentException
      14: dup
      15: ldc           #4                  // String Prefix cannot be blank
      17: invokespecial #5                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      20: athrow
      21: aload_0
      22: ldc           #6                  // String \\[%s(#*)(-?[0-9]*)\\]
      24: iconst_1
      25: anewarray     #7                  // class java/lang/Object
      28: dup
      29: iconst_0
      30: aload_1
      31: aastore
      32: invokestatic  #8                  // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      35: invokestatic  #9                  // Method java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;
      38: putfield      #10                 // Field pattern:Ljava/util/regex/Pattern;
      41: return

  protected java.lang.String findAndReplace(java.lang.String, java.lang.Integer);
    Code:
       0: new           #11                 // class java/lang/StringBuffer
       3: dup
       4: invokespecial #12                 // Method java/lang/StringBuffer."<init>":()V
       7: astore_3
       8: aload_0
       9: getfield      #10                 // Field pattern:Ljava/util/regex/Pattern;
      12: aload_1
      13: invokevirtual #13                 // Method java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;
      16: astore        4
      18: aload         4
      20: invokevirtual #14                 // Method java/util/regex/Matcher.find:()Z
      23: ifeq          57
      26: aload_0
      27: aload         4
      29: iconst_1
      30: invokevirtual #15                 // Method java/util/regex/Matcher.group:(I)Ljava/lang/String;
      33: aload         4
      35: iconst_2
      36: invokevirtual #15                 // Method java/util/regex/Matcher.group:(I)Ljava/lang/String;
      39: aload_2
      40: invokespecial #16                 // Method getReplacement:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Integer;)Ljava/lang/String;
      43: astore        5
      45: aload         4
      47: aload_3
      48: aload         5
      50: invokevirtual #17                 // Method java/util/regex/Matcher.appendReplacement:(Ljava/lang/StringBuffer;Ljava/lang/String;)Ljava/util/regex/Matcher;
      53: pop
      54: goto          18
      57: aload         4
      59: aload_3
      60: invokevirtual #18                 // Method java/util/regex/Matcher.appendTail:(Ljava/lang/StringBuffer;)Ljava/lang/StringBuffer;
      63: pop
      64: aload_3
      65: invokevirtual #19                 // Method java/lang/StringBuffer.toString:()Ljava/lang/String;
      68: areturn

  private java.lang.String getReplacement(java.lang.String, java.lang.String, java.lang.Integer);
    Code:
       0: aload_0
       1: aload_2
       2: aload_3
       3: invokespecial #20                 // Method getReplacementNumber:(Ljava/lang/String;Ljava/lang/Integer;)Ljava/lang/Integer;
       6: astore        4
       8: aload_1
       9: invokestatic  #21                 // Method org/apache/commons/lang3/StringUtils.isNotBlank:(Ljava/lang/CharSequence;)Z
      12: ifeq          26
      15: aload_0
      16: aload_1
      17: invokespecial #22                 // Method formatter:(Ljava/lang/String;)Ljava/text/DecimalFormat;
      20: aload         4
      22: invokevirtual #23                 // Method java/text/DecimalFormat.format:(Ljava/lang/Object;)Ljava/lang/String;
      25: areturn
      26: aload         4
      28: invokevirtual #24                 // Method java/lang/Integer.toString:()Ljava/lang/String;
      31: areturn

  private java.lang.Integer getReplacementNumber(java.lang.String, java.lang.Integer);
    Code:
       0: aload_1
       1: invokestatic  #21                 // Method org/apache/commons/lang3/StringUtils.isNotBlank:(Ljava/lang/CharSequence;)Z
       4: ifeq          23
       7: aload_2
       8: invokevirtual #25                 // Method java/lang/Integer.intValue:()I
      11: aload_1
      12: invokestatic  #26                 // Method java/lang/Integer.valueOf:(Ljava/lang/String;)Ljava/lang/Integer;
      15: invokevirtual #25                 // Method java/lang/Integer.intValue:()I
      18: iadd
      19: invokestatic  #27                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      22: areturn
      23: aload_2
      24: areturn

  private java.text.DecimalFormat formatter(java.lang.String);
    Code:
       0: new           #28                 // class java/text/DecimalFormat
       3: dup
       4: invokespecial #29                 // Method java/text/DecimalFormat."<init>":()V
       7: astore_2
       8: aload_1
       9: invokestatic  #21                 // Method org/apache/commons/lang3/StringUtils.isNotBlank:(Ljava/lang/CharSequence;)Z
      12: ifeq          29
      15: aload_2
      16: aload_1
      17: ldc           #30                 // String #
      19: ldc           #31                 // String 0
      21: invokevirtual #32                 // Method java/lang/String.replaceAll:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      24: invokevirtual #33                 // Method java/text/DecimalFormat.applyPattern:(Ljava/lang/String;)V
      27: aload_2
      28: areturn
      29: goto          55
      32: astore_3
      33: getstatic     #34                 // Field LOG:Lorg/slf4j/Logger;
      36: ldc           #35                 // String Error applying pattern %s
      38: iconst_1
      39: anewarray     #7                  // class java/lang/Object
      42: dup
      43: iconst_0
      44: aload_1
      45: aastore
      46: invokestatic  #8                  // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      49: aload_3
      50: invokeinterface #36,  3           // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;Ljava/lang/Throwable;)V
      55: aload_2
      56: ldc           #37                 // String 00000
      58: invokevirtual #33                 // Method java/text/DecimalFormat.applyPattern:(Ljava/lang/String;)V
      61: aload_2
      62: areturn
    Exception table:
       from    to  target type
           8    28    32   Class java/lang/IllegalArgumentException

  static {};
    Code:
       0: ldc           #38                 // class org/sejda/core/support/prefix/processor/NumberPrefixProcessor
       2: invokestatic  #39                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #34                 // Field LOG:Lorg/slf4j/Logger;
       8: return
}
