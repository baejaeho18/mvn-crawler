.. _parameters_H2OCoxPH:

Parameters of H2OCoxPH
----------------------

Affected Class
##############

- ``ai.h2o.sparkling.ml.algos.H2OCoxPH``

Parameters
##########

- *Each parameter has also a corresponding getter and setter method.*
  *(E.g.:* ``label`` *->* ``getLabel()`` *,* ``setLabel(...)`` *)*

ignoredCols
  Names of columns to ignore for training.

  *Scala default value:* ``null`` *; Python default value:* ``None``
  
  *Also available on the trained model.*

interactionPairs
  A list of pairwise (first order) column interactions.

  *Scala default value:* ``null`` *; Python default value:* ``None``
  

columnsToCategorical
  List of columns to convert to categorical before modelling

  *Scala default value:* ``Array()`` *; Python default value:* ``[]``
  

convertInvalidNumbersToNa
  If set to 'true', the model converts invalid numbers to NA during making predictions.

  *Scala default value:* ``false`` *; Python default value:* ``False``
  
  *Also available on the trained model.*

convertUnknownCategoricalLevelsToNa
  If set to 'true', the model converts unknown categorical levels to NA during making predictions.

  *Scala default value:* ``false`` *; Python default value:* ``False``
  
  *Also available on the trained model.*

dataFrameSerializer
  A full name of a serializer used for serialization and deserialization of Spark DataFrames to a JSON value within NullableDataFrameParam.

  *Default value:* ``"ai.h2o.sparkling.utils.JSONDataFrameSerializer"``
  
  *Also available on the trained model.*

detailedPredictionCol
  Column containing additional prediction details, its content depends on the model type.

  *Default value:* ``"detailed_prediction"``
  
  *Also available on the trained model.*

exportCheckpointsDir
  Automatically export generated models to this directory.

  *Scala default value:* ``null`` *; Python default value:* ``None``
  
  *Also available on the trained model.*

featuresCols
  Name of feature columns

  *Scala default value:* ``Array()`` *; Python default value:* ``[]``
  
  *Also available on the trained model.*

init
  Coefficient starting value.

  *Default value:* ``0.0``
  
  *Also available on the trained model.*

interactions
  A list of predictor column indices to interact. All pairwise combinations will be computed for the list.

  *Scala default value:* ``null`` *; Python default value:* ``None``
  
  *Also available on the trained model.*

interactionsOnly
  A list of columns that should only be used to create interactions but should not itself participate in model training.

  *Scala default value:* ``null`` *; Python default value:* ``None``
  
  *Also available on the trained model.*

keepBinaryModels
  If set to true, all binary models created during execution of the ``fit`` method will be kept in DKV of H2O-3 cluster.

  *Scala default value:* ``false`` *; Python default value:* ``False``
  

labelCol
  Response variable column.

  *Default value:* ``"label"``
  
  *Also available on the trained model.*

lreMin
  Minimum log-relative error.

  *Default value:* ``9.0``
  
  *Also available on the trained model.*

maxIterations
  Maximum number of iterations.

  *Default value:* ``20``
  
  *Also available on the trained model.*

modelId
  Destination id for this model; auto-generated if not specified.

  *Scala default value:* ``null`` *; Python default value:* ``None``
  

namedMojoOutputColumns
  Mojo Output is not stored in the array but in the properly named columns

  *Scala default value:* ``true`` *; Python default value:* ``True``
  
  *Also available on the trained model.*

offsetCol
  Offset column. This will be added to the combination of columns before applying the link function.

  *Scala default value:* ``null`` *; Python default value:* ``None``
  
  *Also available on the trained model.*

predictionCol
  Prediction column name

  *Default value:* ``"prediction"``
  
  *Also available on the trained model.*

singleNodeMode
  Run on a single node to reduce the effect of network overhead (for smaller datasets).

  *Scala default value:* ``false`` *; Python default value:* ``False``
  
  *Also available on the trained model.*

splitRatio
  Accepts values in range [0, 1.0] which determine how large part of dataset is used for training and for validation. For example, 0.8 -> 80% training 20% validation. This parameter is ignored when validationDataFrame is set.

  *Default value:* ``1.0``
  

startCol
  Start Time Column.

  *Scala default value:* ``null`` *; Python default value:* ``None``
  
  *Also available on the trained model.*

stopCol
  Stop Time Column.

  *Scala default value:* ``null`` *; Python default value:* ``None``
  
  *Also available on the trained model.*

stratifyBy
  List of columns to use for stratification.

  *Scala default value:* ``null`` *; Python default value:* ``None``
  
  *Also available on the trained model.*

ties
  Method for Handling Ties. Possible values are ``"efron"``, ``"breslow"``.

  *Default value:* ``"efron"``
  
  *Also available on the trained model.*

useAllFactorLevels
  (Internal. For development only!) Indicates whether to use all factor levels.

  *Scala default value:* ``false`` *; Python default value:* ``False``
  
  *Also available on the trained model.*

validationDataFrame
  A data frame dedicated for a validation of the trained model. If the parameters is not set,a validation frame created via the 'splitRatio' parameter. The parameter is not serializable!

  *Scala default value:* ``null`` *; Python default value:* ``None``
  

weightCol
  Column with observation weights. Giving some observation a weight of zero is equivalent to excluding it from the dataset; giving an observation a relative weight of 2 is equivalent to repeating that row twice. Negative weights are not allowed. Note: Weights are per-row observation weights and do not increase the size of the data frame. This is typically the number of times a row is repeated, but non-integer values are supported as well. During training, rows with higher weights matter more, due to the larger loss function pre-factor. If you set weight = 0 for a row, the returned prediction frame at that row is zero and this is incorrect. To get an accurate prediction, remove all rows with weight == 0.

  *Scala default value:* ``null`` *; Python default value:* ``None``
  
  *Also available on the trained model.*

withContributions
  Enables or disables generating a sub-column of detailedPredictionCol containing Shapley values.

  *Scala default value:* ``false`` *; Python default value:* ``False``
  
  *Also available on the trained model.*

withLeafNodeAssignments
  Enables or disables computation of leaf node assignments.

  *Scala default value:* ``false`` *; Python default value:* ``False``
  
  *Also available on the trained model.*

withStageResults
  Enables or disables computation of stage results.

  *Scala default value:* ``false`` *; Python default value:* ``False``
  
  *Also available on the trained model.*

     