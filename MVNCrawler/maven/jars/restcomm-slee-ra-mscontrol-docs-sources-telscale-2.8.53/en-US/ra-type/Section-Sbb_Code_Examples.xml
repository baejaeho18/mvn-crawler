<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../User_Guide.ent">
%BOOK_ENTITIES;
]>

<section
	id="ratype_sbb_code_examples">

	<title>Sbb Code Examples</title>
	<para>The following code examples shows how to use the Resource Adaptor Type for common functionalities</para>

	<section
		id="ratype_sbb_code_examples_create_connection">

		<title>Connection Creation &amp; Process SIP Invite</title>

		<para>
			The following code example shows how to process
			<literal>SIP</literal>
			<literal>INVITE</literal>
			and attach to
			<literal>JSR309</literal>
			connection.
		</para>
		<para>
			The
			<literal>sipProvider</literal>, 
			object is the SIP RA SBB Interface, while the object
			<literal>sipAciFactory</literal>
			is the SIP RA Activity Context Interface Factory, both obtained through the SBB JNDI environment.
			Simlarly, the
			<literal>mscFactory</literal>, 
			object is the JSR309 RA SBB Interface, while the object
			<literal>mscAcifFactory</literal>
			is the SIP RA Activity Context Interface Factory 
		</para>
		<programlisting language="Java" role="JAVA">
<![CDATA[
	/**
	 * Handles the event notifying new SIP session invitation.
	 * 
	 * @param event
	 * @param aci
	 */
	public void onInvite(RequestEvent event, ActivityContextInterface aci) {
		tracer.info("Received new SIP session invitation.");
		try {
			initialSipSessionSetup(event, aci);
		} catch (Exception e) {
			tracer.severe("Failed to do initial sip session setup.", e);
			abortSipSessionSetup();
			return;
		}
		try {
			initialMediaSessionSetup(event.getServerTransaction());
		} catch (Exception e) {
			tracer.severe("Failed to process sip invite", e);
			abortSipSessionSetup();
			abortMediaSessionSetup();
		}
	}
	
	/*
	 * Setup of the media session: creates the media session, creates a network
	 * connection on it and process the client sdp received on SIP
	 */
	private void initialMediaSessionSetup(ServerTransaction serverTransaction)
			throws MsControlException {
		// create media session
		MediaSession session = msRaSbbInterface.createMediaSession();
		ActivityContextInterface mediaSessionACI = mscRaAciFactory
				.getActivityContextInterface(session);
		SbbLocalObject sbbLocalObject = sbbContext.getSbbLocalObject();
		mediaSessionACI.attach(sbbLocalObject);
		// store the media session aci in a cmp shortcut
		setMediaSessionACI(mediaSessionACI);
		tracer.info("Created media session: " + session);
		// create network connection
		NetworkConnection connection = session
				.createNetworkConnection(NetworkConnection.BASIC);
		ActivityContextInterface connectionACI = mscRaAciFactory
				.getActivityContextInterface(connection);
		connectionACI.attach(sbbLocalObject);
		// store the network connection aci in a cmp shortcut
		setNetworkConnectionACI(connectionACI);
		tracer.info("Created network connection: " + connection);
		// process the received sdp
		SdpPortManager sdpManager = connection.getSdpPortManager();
		tracer.info("Created SDP Manager, sending client sdp...");
		sdpManager.processSdpOffer((byte[]) serverTransaction.getRequest()
				.getContent());
	}
	
	/*
	 * Aborts the media session: releases the network connection and the media
	 * session.
	 */
	private void abortMediaSessionSetup() {
		releaseMediaSession();
	}
	
	/*
	 * 
	 */
	private void releaseMediaSession() {
		// get sbb entity local object
		SbbLocalObject sbbLocalObject = sbbContext.getSbbLocalObject();
		// release media group (the ivr) if exists
		ActivityContextInterface mediaGroupACI = getMediaGroupACI();
		if (mediaGroupACI != null) {
			mediaGroupACI.detach(sbbLocalObject);
			try {
				MediaGroup mediaGroup = (MediaGroup) mediaGroupACI
						.getActivity();
				if (mediaGroup != null) {
					mediaGroup.release();
				}
			} catch (Exception e) {
				tracer.severe("failed to abort media network connection.", e);
			}
		}
		// release network connection if exists
		ActivityContextInterface networkConnectionACI = getNetworkConnectionACI();
		if (networkConnectionACI != null) {
			networkConnectionACI.detach(sbbLocalObject);
			try {
				NetworkConnection networkConnection = (NetworkConnection) networkConnectionACI
						.getActivity();
				if (networkConnection != null) {
					networkConnection.release();
				}
			} catch (Exception e) {
				tracer.severe("failed to abort media network connection.", e);
			}
		}
		// release media session if exists
		ActivityContextInterface mediaSessionACI = getMediaSessionACI();
		if (mediaSessionACI != null) {
			mediaSessionACI.detach(sbbLocalObject);
			try {
				MediaSession mediaSession = (MediaSession) mediaSessionACI
						.getActivity();
				if (mediaSession != null) {
					mediaSession.release();
				}
			} catch (Exception e) {
				tracer.severe("failed to abort media session.", e);
			}
		}
	}
]]>
		</programlisting>
	</section>

	<section
		id="ratype_sbb_code_examples_send_message">

		<title>Sending answer</title>

		<para>
			The following code example shows how to handle answer generated by
			<literal>JSR309</literal>
			on successful processing of
			<literal>SDP</literal>
			from example above:
		</para>

		<programlisting language="Java" role="JAVA">
<![CDATA[
	/**
	 * Event with the media server generated sdp, send it back to the sip
	 * client.
	 * 
	 * @param event
	 * @param aci
	 */
	public void onAnswerGenerated(SdpPortManagerEvent event,
			ActivityContextInterface aci) {
		tracer.info("Received SDP answer.");
		try {
			finishSipSessionSetup(event.getMediaServerSdp());
		} catch (Exception e) {
			tracer.severe("Unable to send OK response with generated SDP", e);
			abortSipSessionSetup();
			abortMediaSessionSetup();
			return;
		}
		try {
			finishMediaSessionSetup(aci);
		} catch (Exception e) {
			tracer.severe("Unable to initiate join.", e);
			terminateSipSession();
			abortMediaSessionSetup();
		}
	}
	
	/*
	 * End of the media session setup: creates ivr and make it join the session
	 * with the sip client.
	 */
	private void finishMediaSessionSetup(
			ActivityContextInterface networkConnectionAci)
			throws MsControlException {
		NetworkConnection connection = (NetworkConnection) networkConnectionAci
				.getActivity();
		MediaSession session = connection.getMediaSession();
		MediaGroup mediaGroup = session
				.createMediaGroup(MediaGroup.PLAYER_RECORDER_SIGNALDETECTOR);
		connection.joinInitiate(Direction.DUPLEX, mediaGroup, "context");
		ActivityContextInterface mediaGroupACI = mscRaAciFactory
				.getActivityContextInterface(mediaGroup);
		mediaGroupACI.attach(sbbContext.getSbbLocalObject());
		setMediaGroupACI(mediaGroupACI);
	}
]]>
		</programlisting>
	</section>

</section>