Compiled from "DefaultDataLoaderFactory.java"
public class org.jumpmind.symmetric.load.DefaultDataLoaderFactory implements org.jumpmind.symmetric.load.IDataLoaderFactory {
  private static final org.slf4j.Logger log;

  private org.jumpmind.symmetric.service.IParameterService parameterService;

  public org.jumpmind.symmetric.load.DefaultDataLoaderFactory(org.jumpmind.symmetric.service.IParameterService);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field parameterService:Lorg/jumpmind/symmetric/service/IParameterService;
       9: return

  public java.lang.String getTypeName();
    Code:
       0: ldc           #3                  // String default
       2: areturn

  public org.jumpmind.symmetric.io.data.IDataWriter getDataWriter(java.lang.String, org.jumpmind.symmetric.db.ISymmetricDialect, org.jumpmind.symmetric.io.data.writer.TransformWriter, java.util.List<org.jumpmind.symmetric.io.data.writer.IDatabaseWriterFilter>, java.util.List<? extends org.jumpmind.symmetric.io.data.writer.Conflict>, java.util.List<org.jumpmind.symmetric.io.data.writer.ResolvedData>);
    Code:
       0: new           #4                  // class org/jumpmind/symmetric/io/data/writer/DatabaseWriter
       3: dup
       4: aload_2
       5: invokeinterface #5,  1            // InterfaceMethod org/jumpmind/symmetric/db/ISymmetricDialect.getPlatform:()Lorg/jumpmind/db/platform/IDatabasePlatform;
      10: new           #6                  // class org/jumpmind/symmetric/load/DefaultDataLoaderFactory$1
      13: dup
      14: aload_0
      15: aload_3
      16: aload_2
      17: aload_1
      18: invokespecial #7                  // Method org/jumpmind/symmetric/load/DefaultDataLoaderFactory$1."<init>":(Lorg/jumpmind/symmetric/load/DefaultDataLoaderFactory;Lorg/jumpmind/symmetric/io/data/writer/TransformWriter;Lorg/jumpmind/symmetric/db/ISymmetricDialect;Ljava/lang/String;)V
      21: aload_0
      22: aload         4
      24: aload         5
      26: aload         6
      28: invokevirtual #8                  // Method buildDatabaseWriterSettings:(Ljava/util/List;Ljava/util/List;Ljava/util/List;)Lorg/jumpmind/symmetric/io/data/writer/DatabaseWriterSettings;
      31: invokespecial #9                  // Method org/jumpmind/symmetric/io/data/writer/DatabaseWriter."<init>":(Lorg/jumpmind/db/platform/IDatabasePlatform;Lorg/jumpmind/symmetric/io/data/writer/IDatabaseWriterConflictResolver;Lorg/jumpmind/symmetric/io/data/writer/DatabaseWriterSettings;)V
      34: astore        7
      36: aload         7
      38: areturn

  public boolean isPlatformSupported(org.jumpmind.db.platform.IDatabasePlatform);
    Code:
       0: iconst_1
       1: ireturn

  protected org.jumpmind.symmetric.io.data.writer.DatabaseWriterSettings buildDatabaseWriterSettings(java.util.List<org.jumpmind.symmetric.io.data.writer.IDatabaseWriterFilter>, java.util.List<? extends org.jumpmind.symmetric.io.data.writer.Conflict>, java.util.List<org.jumpmind.symmetric.io.data.writer.ResolvedData>);
    Code:
       0: new           #10                 // class org/jumpmind/symmetric/io/data/writer/DatabaseWriterSettings
       3: dup
       4: invokespecial #11                 // Method org/jumpmind/symmetric/io/data/writer/DatabaseWriterSettings."<init>":()V
       7: astore        4
       9: aload         4
      11: aload_1
      12: invokevirtual #12                 // Method org/jumpmind/symmetric/io/data/writer/DatabaseWriterSettings.setDatabaseWriterFilters:(Ljava/util/List;)V
      15: aload         4
      17: aload_0
      18: getfield      #2                  // Field parameterService:Lorg/jumpmind/symmetric/service/IParameterService;
      21: ldc           #13                 // String dataloader.max.rows.before.commit
      23: invokeinterface #14,  2           // InterfaceMethod org/jumpmind/symmetric/service/IParameterService.getLong:(Ljava/lang/String;)J
      28: invokevirtual #15                 // Method org/jumpmind/symmetric/io/data/writer/DatabaseWriterSettings.setMaxRowsBeforeCommit:(J)V
      31: aload         4
      33: aload_0
      34: getfield      #2                  // Field parameterService:Lorg/jumpmind/symmetric/service/IParameterService;
      37: ldc           #16                 // String db.treat.date.time.as.varchar.enabled
      39: invokeinterface #17,  2           // InterfaceMethod org/jumpmind/symmetric/service/IParameterService.is:(Ljava/lang/String;)Z
      44: invokevirtual #18                 // Method org/jumpmind/symmetric/io/data/writer/DatabaseWriterSettings.setTreatDateTimeFieldsAsVarchar:(Z)V
      47: new           #19                 // class java/util/HashMap
      50: dup
      51: invokespecial #20                 // Method java/util/HashMap."<init>":()V
      54: astore        5
      56: new           #19                 // class java/util/HashMap
      59: dup
      60: invokespecial #20                 // Method java/util/HashMap."<init>":()V
      63: astore        6
      65: iconst_0
      66: istore        7
      68: aload_2
      69: ifnull        182
      72: aload_2
      73: invokeinterface #21,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      78: astore        8
      80: aload         8
      82: invokeinterface #22,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      87: ifeq          182
      90: aload         8
      92: invokeinterface #23,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      97: checkcast     #24                 // class org/jumpmind/symmetric/io/data/writer/Conflict
     100: astore        9
     102: aload         9
     104: invokevirtual #25                 // Method org/jumpmind/symmetric/io/data/writer/Conflict.toQualifiedTableName:()Ljava/lang/String;
     107: astore        10
     109: aload         10
     111: invokestatic  #26                 // Method org/apache/commons/lang/StringUtils.isNotBlank:(Ljava/lang/String;)Z
     114: ifeq          132
     117: aload         6
     119: aload         10
     121: aload         9
     123: invokeinterface #27,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     128: pop
     129: goto          179
     132: aload         9
     134: invokevirtual #28                 // Method org/jumpmind/symmetric/io/data/writer/Conflict.getTargetChannelId:()Ljava/lang/String;
     137: invokestatic  #26                 // Method org/apache/commons/lang/StringUtils.isNotBlank:(Ljava/lang/String;)Z
     140: ifeq          161
     143: aload         5
     145: aload         9
     147: invokevirtual #28                 // Method org/jumpmind/symmetric/io/data/writer/Conflict.getTargetChannelId:()Ljava/lang/String;
     150: aload         9
     152: invokeinterface #27,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     157: pop
     158: goto          179
     161: aload         4
     163: invokevirtual #29                 // Method org/jumpmind/symmetric/io/data/writer/DatabaseWriterSettings.getDefaultConflictSetting:()Lorg/jumpmind/symmetric/io/data/writer/Conflict;
     166: ifnull        172
     169: iconst_1
     170: istore        7
     172: aload         4
     174: aload         9
     176: invokevirtual #30                 // Method org/jumpmind/symmetric/io/data/writer/DatabaseWriterSettings.setDefaultConflictSetting:(Lorg/jumpmind/symmetric/io/data/writer/Conflict;)V
     179: goto          80
     182: iload         7
     184: ifeq          205
     187: getstatic     #31                 // Field log:Lorg/slf4j/Logger;
     190: ldc           #32                 // String There were multiple default conflict settings found.  Using \'{}\' as the default
     192: aload         4
     194: invokevirtual #29                 // Method org/jumpmind/symmetric/io/data/writer/DatabaseWriterSettings.getDefaultConflictSetting:()Lorg/jumpmind/symmetric/io/data/writer/Conflict;
     197: invokevirtual #33                 // Method org/jumpmind/symmetric/io/data/writer/Conflict.getConflictId:()Ljava/lang/String;
     200: invokeinterface #34,  3           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;)V
     205: aload         4
     207: aload         5
     209: invokevirtual #35                 // Method org/jumpmind/symmetric/io/data/writer/DatabaseWriterSettings.setConflictSettingsByChannel:(Ljava/util/Map;)V
     212: aload         4
     214: aload         6
     216: invokevirtual #36                 // Method org/jumpmind/symmetric/io/data/writer/DatabaseWriterSettings.setConflictSettingsByTable:(Ljava/util/Map;)V
     219: aload         4
     221: aload_3
     222: invokevirtual #37                 // Method org/jumpmind/symmetric/io/data/writer/DatabaseWriterSettings.setResolvedData:(Ljava/util/List;)V
     225: aload         4
     227: areturn

  static {};
    Code:
       0: ldc_w         #38                 // class org/jumpmind/symmetric/load/DefaultDataLoaderFactory
       3: invokestatic  #39                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       6: putstatic     #31                 // Field log:Lorg/slf4j/Logger;
       9: return
}
