Compiled from "ConcurrentConnectionManager.java"
public class org.jumpmind.symmetric.transport.ConcurrentConnectionManager implements org.jumpmind.symmetric.transport.IConcurrentConnectionManager {
  private static final org.slf4j.Logger log;

  protected org.jumpmind.symmetric.service.IParameterService parameterService;

  protected org.jumpmind.symmetric.statistic.IStatisticManager statisticManager;

  protected java.util.Map<java.lang.String, java.util.Map<java.lang.String, org.jumpmind.symmetric.transport.ConcurrentConnectionManager$Reservation>> activeReservationsByNodeByPool;

  protected java.util.Map<java.lang.String, java.util.Map<java.lang.String, org.jumpmind.symmetric.transport.ConcurrentConnectionManager$NodeConnectionStatistics>> nodeConnectionStatistics;

  protected java.util.Set<java.lang.String> whiteList;

  public org.jumpmind.symmetric.transport.ConcurrentConnectionManager(org.jumpmind.symmetric.service.IParameterService, org.jumpmind.symmetric.statistic.IStatisticManager);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/HashMap
       8: dup
       9: invokespecial #3                  // Method java/util/HashMap."<init>":()V
      12: putfield      #4                  // Field activeReservationsByNodeByPool:Ljava/util/Map;
      15: aload_0
      16: new           #2                  // class java/util/HashMap
      19: dup
      20: invokespecial #3                  // Method java/util/HashMap."<init>":()V
      23: putfield      #5                  // Field nodeConnectionStatistics:Ljava/util/Map;
      26: aload_0
      27: new           #6                  // class java/util/HashSet
      30: dup
      31: invokespecial #7                  // Method java/util/HashSet."<init>":()V
      34: putfield      #8                  // Field whiteList:Ljava/util/Set;
      37: aload_0
      38: aload_1
      39: putfield      #9                  // Field parameterService:Lorg/jumpmind/symmetric/service/IParameterService;
      42: aload_0
      43: aload_2
      44: putfield      #10                 // Field statisticManager:Lorg/jumpmind/symmetric/statistic/IStatisticManager;
      47: return

  protected void logTooBusyRejection(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #11                 // Method getNodeConnectionStatistics:(Ljava/lang/String;Ljava/lang/String;)Lorg/jumpmind/symmetric/transport/ConcurrentConnectionManager$NodeConnectionStatistics;
       6: dup
       7: getfield      #12                 // Field org/jumpmind/symmetric/transport/ConcurrentConnectionManager$NodeConnectionStatistics.numOfRejections:I
      10: iconst_1
      11: iadd
      12: putfield      #12                 // Field org/jumpmind/symmetric/transport/ConcurrentConnectionManager$NodeConnectionStatistics.numOfRejections:I
      15: return

  protected void logConnectedTimePeriod(java.lang.String, long, long, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload         6
       4: invokespecial #11                 // Method getNodeConnectionStatistics:(Ljava/lang/String;Ljava/lang/String;)Lorg/jumpmind/symmetric/transport/ConcurrentConnectionManager$NodeConnectionStatistics;
       7: astore        7
       9: aload         7
      11: dup
      12: getfield      #13                 // Field org/jumpmind/symmetric/transport/ConcurrentConnectionManager$NodeConnectionStatistics.totalConnectionCount:J
      15: lconst_1
      16: ladd
      17: putfield      #13                 // Field org/jumpmind/symmetric/transport/ConcurrentConnectionManager$NodeConnectionStatistics.totalConnectionCount:J
      20: aload         7
      22: dup
      23: getfield      #14                 // Field org/jumpmind/symmetric/transport/ConcurrentConnectionManager$NodeConnectionStatistics.totalConnectionTimeMs:J
      26: lload         4
      28: lload_2
      29: lsub
      30: ladd
      31: putfield      #14                 // Field org/jumpmind/symmetric/transport/ConcurrentConnectionManager$NodeConnectionStatistics.totalConnectionTimeMs:J
      34: aload         7
      36: lload_2
      37: putfield      #15                 // Field org/jumpmind/symmetric/transport/ConcurrentConnectionManager$NodeConnectionStatistics.lastConnectionTimeMs:J
      40: return

  private synchronized org.jumpmind.symmetric.transport.ConcurrentConnectionManager$NodeConnectionStatistics getNodeConnectionStatistics(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #5                  // Field nodeConnectionStatistics:Ljava/util/Map;
       4: aload_2
       5: invokeinterface #16,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #17                 // class java/util/Map
      13: astore_3
      14: aload_3
      15: ifnonnull     38
      18: new           #2                  // class java/util/HashMap
      21: dup
      22: invokespecial #3                  // Method java/util/HashMap."<init>":()V
      25: astore_3
      26: aload_0
      27: getfield      #5                  // Field nodeConnectionStatistics:Ljava/util/Map;
      30: aload_2
      31: aload_3
      32: invokeinterface #18,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      37: pop
      38: aload_3
      39: aload_1
      40: invokeinterface #16,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      45: checkcast     #19                 // class org/jumpmind/symmetric/transport/ConcurrentConnectionManager$NodeConnectionStatistics
      48: astore        4
      50: aload         4
      52: ifnonnull     75
      55: new           #19                 // class org/jumpmind/symmetric/transport/ConcurrentConnectionManager$NodeConnectionStatistics
      58: dup
      59: aload_0
      60: invokespecial #20                 // Method org/jumpmind/symmetric/transport/ConcurrentConnectionManager$NodeConnectionStatistics."<init>":(Lorg/jumpmind/symmetric/transport/ConcurrentConnectionManager;)V
      63: astore        4
      65: aload_3
      66: aload_1
      67: aload         4
      69: invokeinterface #18,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      74: pop
      75: aload         4
      77: areturn

  public synchronized boolean releaseConnection(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: aload_2
       2: invokespecial #21                 // Method getReservationMap:(Ljava/lang/String;)Ljava/util/Map;
       5: astore_3
       6: aload_3
       7: aload_1
       8: invokeinterface #22,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      13: checkcast     #23                 // class org/jumpmind/symmetric/transport/ConcurrentConnectionManager$Reservation
      16: astore        4
      18: aload         4
      20: ifnull        39
      23: aload_0
      24: aload_1
      25: aload         4
      27: getfield      #24                 // Field org/jumpmind/symmetric/transport/ConcurrentConnectionManager$Reservation.createTime:J
      30: invokestatic  #25                 // Method java/lang/System.currentTimeMillis:()J
      33: aload_2
      34: invokevirtual #26                 // Method logConnectedTimePeriod:(Ljava/lang/String;JJLjava/lang/String;)V
      37: iconst_1
      38: ireturn
      39: iconst_0
      40: ireturn

  public synchronized void addToWhitelist(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #8                  // Field whiteList:Ljava/util/Set;
       4: aload_1
       5: invokeinterface #27,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      10: pop
      11: return

  public synchronized void removeFromWhiteList(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #8                  // Field whiteList:Ljava/util/Set;
       4: aload_1
       5: invokeinterface #28,  2           // InterfaceMethod java/util/Set.remove:(Ljava/lang/Object;)Z
      10: pop
      11: return

  public synchronized java.lang.String[] getWhiteList();
    Code:
       0: aload_0
       1: getfield      #8                  // Field whiteList:Ljava/util/Set;
       4: aload_0
       5: getfield      #8                  // Field whiteList:Ljava/util/Set;
       8: invokeinterface #29,  1           // InterfaceMethod java/util/Set.size:()I
      13: anewarray     #30                 // class java/lang/String
      16: invokeinterface #31,  2           // InterfaceMethod java/util/Set.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
      21: checkcast     #32                 // class "[Ljava/lang/String;"
      24: areturn

  public synchronized int getReservationCount(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #21                 // Method getReservationMap:(Ljava/lang/String;)Ljava/util/Map;
       5: invokeinterface #33,  1           // InterfaceMethod java/util/Map.size:()I
      10: ireturn

  public synchronized boolean reserveConnection(java.lang.String, java.lang.String, org.jumpmind.symmetric.transport.IConcurrentConnectionManager$ReservationType);
    Code:
       0: aload_0
       1: aload_2
       2: invokespecial #21                 // Method getReservationMap:(Ljava/lang/String;)Ljava/util/Map;
       5: astore        4
       7: aload_0
       8: getfield      #9                  // Field parameterService:Lorg/jumpmind/symmetric/service/IParameterService;
      11: ldc           #34                 // String http.concurrent.workers.max
      13: invokeinterface #35,  2           // InterfaceMethod org/jumpmind/symmetric/service/IParameterService.getInt:(Ljava/lang/String;)I
      18: istore        5
      20: aload_0
      21: getfield      #9                  // Field parameterService:Lorg/jumpmind/symmetric/service/IParameterService;
      24: ldc           #36                 // String http.concurrent.reservation.timeout.ms
      26: invokeinterface #37,  2           // InterfaceMethod org/jumpmind/symmetric/service/IParameterService.getLong:(Ljava/lang/String;)J
      31: lstore        6
      33: aload_0
      34: aload         4
      36: invokevirtual #38                 // Method removeTimedOutReservations:(Ljava/util/Map;)V
      39: aload         4
      41: invokeinterface #33,  1           // InterfaceMethod java/util/Map.size:()I
      46: iload         5
      48: if_icmplt     75
      51: aload         4
      53: aload_1
      54: invokeinterface #39,  2           // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
      59: ifne          75
      62: aload_0
      63: getfield      #8                  // Field whiteList:Ljava/util/Set;
      66: aload_1
      67: invokeinterface #40,  2           // InterfaceMethod java/util/Set.contains:(Ljava/lang/Object;)Z
      72: ifeq          157
      75: aload         4
      77: aload_1
      78: invokeinterface #16,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      83: checkcast     #23                 // class org/jumpmind/symmetric/transport/ConcurrentConnectionManager$Reservation
      86: astore        8
      88: aload         8
      90: ifnull        104
      93: aload         8
      95: invokevirtual #41                 // Method org/jumpmind/symmetric/transport/ConcurrentConnectionManager$Reservation.getType:()Lorg/jumpmind/symmetric/transport/IConcurrentConnectionManager$ReservationType;
      98: getstatic     #42                 // Field org/jumpmind/symmetric/transport/IConcurrentConnectionManager$ReservationType.SOFT:Lorg/jumpmind/symmetric/transport/IConcurrentConnectionManager$ReservationType;
     101: if_acmpne     143
     104: aload         4
     106: aload_1
     107: new           #23                 // class org/jumpmind/symmetric/transport/ConcurrentConnectionManager$Reservation
     110: dup
     111: aload_1
     112: aload_3
     113: getstatic     #42                 // Field org/jumpmind/symmetric/transport/IConcurrentConnectionManager$ReservationType.SOFT:Lorg/jumpmind/symmetric/transport/IConcurrentConnectionManager$ReservationType;
     116: if_acmpne     128
     119: invokestatic  #25                 // Method java/lang/System.currentTimeMillis:()J
     122: lload         6
     124: ladd
     125: goto          131
     128: ldc2_w        #43                 // long 9223372036854775807l
     131: aload_3
     132: invokespecial #45                 // Method org/jumpmind/symmetric/transport/ConcurrentConnectionManager$Reservation."<init>":(Ljava/lang/String;JLorg/jumpmind/symmetric/transport/IConcurrentConnectionManager$ReservationType;)V
     135: invokeinterface #18,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     140: pop
     141: iconst_1
     142: ireturn
     143: getstatic     #46                 // Field log:Lorg/slf4j/Logger;
     146: ldc           #47                 // String Node {} requested a {} connection, but was rejected because it already has one
     148: aload_1
     149: aload_2
     150: invokeinterface #48,  4           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
     155: iconst_0
     156: ireturn
     157: iconst_0
     158: ireturn

  public java.util.Map<java.lang.String, java.util.Date> getPullReservationsByNodeId();
    Code:
       0: aload_0
       1: ldc           #49                 // String pull
       3: invokevirtual #50                 // Method getReservationsByNodeId:(Ljava/lang/String;)Ljava/util/Map;
       6: areturn

  public java.util.Map<java.lang.String, java.util.Date> getPushReservationsByNodeId();
    Code:
       0: aload_0
       1: ldc           #51                 // String push
       3: invokevirtual #50                 // Method getReservationsByNodeId:(Ljava/lang/String;)Ljava/util/Map;
       6: areturn

  protected java.util.Map<java.lang.String, java.util.Date> getReservationsByNodeId(java.lang.String);
    Code:
       0: new           #2                  // class java/util/HashMap
       3: dup
       4: invokespecial #3                  // Method java/util/HashMap."<init>":()V
       7: astore_2
       8: aload_0
       9: getfield      #4                  // Field activeReservationsByNodeByPool:Ljava/util/Map;
      12: invokeinterface #52,  1           // InterfaceMethod java/util/Map.keySet:()Ljava/util/Set;
      17: astore_3
      18: aload_3
      19: invokeinterface #53,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      24: astore        4
      26: aload         4
      28: invokeinterface #54,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      33: ifeq          177
      36: aload         4
      38: invokeinterface #55,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      43: checkcast     #30                 // class java/lang/String
      46: astore        5
      48: aload         5
      50: aload_1
      51: invokevirtual #56                 // Method java/lang/String.endsWith:(Ljava/lang/String;)Z
      54: ifeq          174
      57: aload_0
      58: getfield      #4                  // Field activeReservationsByNodeByPool:Ljava/util/Map;
      61: aload         5
      63: invokeinterface #16,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      68: checkcast     #17                 // class java/util/Map
      71: astore        6
      73: new           #6                  // class java/util/HashSet
      76: dup
      77: aload         6
      79: invokeinterface #52,  1           // InterfaceMethod java/util/Map.keySet:()Ljava/util/Set;
      84: invokespecial #57                 // Method java/util/HashSet."<init>":(Ljava/util/Collection;)V
      87: astore        7
      89: aload         7
      91: invokeinterface #53,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      96: astore        8
      98: aload         8
     100: invokeinterface #54,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     105: ifeq          174
     108: aload         8
     110: invokeinterface #55,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     115: checkcast     #30                 // class java/lang/String
     118: astore        9
     120: aload         6
     122: aload         9
     124: invokeinterface #16,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
     129: checkcast     #23                 // class org/jumpmind/symmetric/transport/ConcurrentConnectionManager$Reservation
     132: astore        10
     134: aload         10
     136: ifnull        171
     139: aload         10
     141: invokevirtual #41                 // Method org/jumpmind/symmetric/transport/ConcurrentConnectionManager$Reservation.getType:()Lorg/jumpmind/symmetric/transport/IConcurrentConnectionManager$ReservationType;
     144: getstatic     #58                 // Field org/jumpmind/symmetric/transport/IConcurrentConnectionManager$ReservationType.HARD:Lorg/jumpmind/symmetric/transport/IConcurrentConnectionManager$ReservationType;
     147: if_acmpne     171
     150: aload_2
     151: aload         9
     153: new           #59                 // class java/util/Date
     156: dup
     157: aload         10
     159: invokevirtual #60                 // Method org/jumpmind/symmetric/transport/ConcurrentConnectionManager$Reservation.getCreateTime:()J
     162: invokespecial #61                 // Method java/util/Date."<init>":(J)V
     165: invokeinterface #18,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     170: pop
     171: goto          98
     174: goto          26
     177: aload_2
     178: areturn

  protected void removeTimedOutReservations(java.util.Map<java.lang.String, org.jumpmind.symmetric.transport.ConcurrentConnectionManager$Reservation>);
    Code:
       0: invokestatic  #25                 // Method java/lang/System.currentTimeMillis:()J
       3: lstore_2
       4: aload_1
       5: invokeinterface #52,  1           // InterfaceMethod java/util/Map.keySet:()Ljava/util/Set;
      10: aload_1
      11: invokeinterface #33,  1           // InterfaceMethod java/util/Map.size:()I
      16: anewarray     #30                 // class java/lang/String
      19: invokeinterface #31,  2           // InterfaceMethod java/util/Set.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
      24: checkcast     #32                 // class "[Ljava/lang/String;"
      27: astore        4
      29: aload         4
      31: ifnull        98
      34: aload         4
      36: astore        5
      38: aload         5
      40: arraylength
      41: istore        6
      43: iconst_0
      44: istore        7
      46: iload         7
      48: iload         6
      50: if_icmpge     98
      53: aload         5
      55: iload         7
      57: aaload
      58: astore        8
      60: aload_1
      61: aload         8
      63: invokeinterface #16,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      68: checkcast     #23                 // class org/jumpmind/symmetric/transport/ConcurrentConnectionManager$Reservation
      71: astore        9
      73: aload         9
      75: getfield      #62                 // Field org/jumpmind/symmetric/transport/ConcurrentConnectionManager$Reservation.timeToLiveInMs:J
      78: lload_2
      79: lcmp
      80: ifge          92
      83: aload_1
      84: aload         8
      86: invokeinterface #22,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      91: pop
      92: iinc          7, 1
      95: goto          46
      98: return

  private java.util.Map<java.lang.String, org.jumpmind.symmetric.transport.ConcurrentConnectionManager$Reservation> getReservationMap(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #4                  // Field activeReservationsByNodeByPool:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #16,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #17                 // class java/util/Map
      13: astore_2
      14: aload_2
      15: ifnonnull     38
      18: new           #2                  // class java/util/HashMap
      21: dup
      22: invokespecial #3                  // Method java/util/HashMap."<init>":()V
      25: astore_2
      26: aload_0
      27: getfield      #4                  // Field activeReservationsByNodeByPool:Ljava/util/Map;
      30: aload_1
      31: aload_2
      32: invokeinterface #18,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      37: pop
      38: aload_2
      39: areturn

  public java.util.Map<java.lang.String, java.util.Map<java.lang.String, org.jumpmind.symmetric.transport.ConcurrentConnectionManager$NodeConnectionStatistics>> getNodeConnectionStatisticsByPoolByNodeId();
    Code:
       0: aload_0
       1: getfield      #5                  // Field nodeConnectionStatistics:Ljava/util/Map;
       4: areturn

  public java.util.Map<java.lang.String, java.util.Map<java.lang.String, org.jumpmind.symmetric.transport.ConcurrentConnectionManager$Reservation>> getActiveReservationsByNodeByPool();
    Code:
       0: aload_0
       1: getfield      #4                  // Field activeReservationsByNodeByPool:Ljava/util/Map;
       4: areturn

  static {};
    Code:
       0: ldc_w         #63                 // class org/jumpmind/symmetric/transport/ConcurrentConnectionManager
       3: invokestatic  #64                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       6: putstatic     #46                 // Field log:Lorg/slf4j/Logger;
       9: return
}
