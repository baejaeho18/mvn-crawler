Compiled from "OutgoingBatches.java"
public class org.jumpmind.symmetric.model.OutgoingBatches implements java.io.Serializable {
  private static final long serialVersionUID;

  java.util.List<org.jumpmind.symmetric.model.OutgoingBatch> batches;

  java.util.Set<org.jumpmind.symmetric.model.NodeChannel> activeChannels;

  java.util.Set<java.lang.String> activeChannelIds;

  public org.jumpmind.symmetric.model.OutgoingBatches(java.util.List<org.jumpmind.symmetric.model.OutgoingBatch>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/ArrayList
       8: dup
       9: invokespecial #3                  // Method java/util/ArrayList."<init>":()V
      12: putfield      #4                  // Field batches:Ljava/util/List;
      15: aload_0
      16: new           #5                  // class java/util/HashSet
      19: dup
      20: invokespecial #6                  // Method java/util/HashSet."<init>":()V
      23: putfield      #7                  // Field activeChannels:Ljava/util/Set;
      26: aload_0
      27: new           #5                  // class java/util/HashSet
      30: dup
      31: invokespecial #6                  // Method java/util/HashSet."<init>":()V
      34: putfield      #8                  // Field activeChannelIds:Ljava/util/Set;
      37: aload_0
      38: aload_1
      39: putfield      #4                  // Field batches:Ljava/util/List;
      42: return

  public org.jumpmind.symmetric.model.OutgoingBatches();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/ArrayList
       8: dup
       9: invokespecial #3                  // Method java/util/ArrayList."<init>":()V
      12: putfield      #4                  // Field batches:Ljava/util/List;
      15: aload_0
      16: new           #5                  // class java/util/HashSet
      19: dup
      20: invokespecial #6                  // Method java/util/HashSet."<init>":()V
      23: putfield      #7                  // Field activeChannels:Ljava/util/Set;
      26: aload_0
      27: new           #5                  // class java/util/HashSet
      30: dup
      31: invokespecial #6                  // Method java/util/HashSet."<init>":()V
      34: putfield      #8                  // Field activeChannelIds:Ljava/util/Set;
      37: return

  public boolean containsBatches();
    Code:
       0: aload_0
       1: getfield      #4                  // Field batches:Ljava/util/List;
       4: ifnull        23
       7: aload_0
       8: getfield      #4                  // Field batches:Ljava/util/List;
      11: invokeinterface #9,  1            // InterfaceMethod java/util/List.size:()I
      16: ifle          23
      19: iconst_1
      20: goto          24
      23: iconst_0
      24: ireturn

  public java.util.Set<org.jumpmind.symmetric.model.NodeChannel> getActiveChannels();
    Code:
       0: aload_0
       1: getfield      #7                  // Field activeChannels:Ljava/util/Set;
       4: areturn

  public void addActiveChannel(org.jumpmind.symmetric.model.NodeChannel);
    Code:
       0: aload_0
       1: getfield      #7                  // Field activeChannels:Ljava/util/Set;
       4: aload_1
       5: invokeinterface #10,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      10: pop
      11: aload_0
      12: getfield      #8                  // Field activeChannelIds:Ljava/util/Set;
      15: aload_1
      16: invokevirtual #11                 // Method org/jumpmind/symmetric/model/NodeChannel.getChannelId:()Ljava/lang/String;
      19: invokeinterface #10,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      24: pop
      25: return

  public void setActiveChannels(java.util.Set<org.jumpmind.symmetric.model.NodeChannel>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #7                  // Field activeChannels:Ljava/util/Set;
       5: aload_0
       6: new           #5                  // class java/util/HashSet
       9: dup
      10: invokespecial #6                  // Method java/util/HashSet."<init>":()V
      13: putfield      #8                  // Field activeChannelIds:Ljava/util/Set;
      16: aload_1
      17: invokeinterface #12,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      22: astore_2
      23: aload_2
      24: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      29: ifeq          59
      32: aload_2
      33: invokeinterface #14,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      38: checkcast     #15                 // class org/jumpmind/symmetric/model/NodeChannel
      41: astore_3
      42: aload_0
      43: getfield      #8                  // Field activeChannelIds:Ljava/util/Set;
      46: aload_3
      47: invokevirtual #11                 // Method org/jumpmind/symmetric/model/NodeChannel.getChannelId:()Ljava/lang/String;
      50: invokeinterface #10,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      55: pop
      56: goto          23
      59: return

  public java.util.List<org.jumpmind.symmetric.model.OutgoingBatch> getBatches();
    Code:
       0: aload_0
       1: getfield      #4                  // Field batches:Ljava/util/List;
       4: areturn

  public void setBatches(java.util.List<org.jumpmind.symmetric.model.OutgoingBatch>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #4                  // Field batches:Ljava/util/List;
       5: return

  public java.util.List<org.jumpmind.symmetric.model.OutgoingBatch> filterBatchesForChannel(org.jumpmind.symmetric.model.Channel);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #16                 // Method getBatchesForChannel:(Lorg/jumpmind/symmetric/model/Channel;)Ljava/util/List;
       5: astore_2
       6: aload_0
       7: getfield      #4                  // Field batches:Ljava/util/List;
      10: aload_2
      11: invokeinterface #17,  2           // InterfaceMethod java/util/List.removeAll:(Ljava/util/Collection;)Z
      16: pop
      17: aload_2
      18: areturn

  public int countBatches(boolean);
    Code:
       0: iconst_0
       1: istore_2
       2: aload_0
       3: getfield      #4                  // Field batches:Ljava/util/List;
       6: ifnull        63
       9: aload_0
      10: getfield      #4                  // Field batches:Ljava/util/List;
      13: invokeinterface #18,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      18: astore_3
      19: aload_3
      20: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      25: ifeq          63
      28: aload_3
      29: invokeinterface #14,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      34: checkcast     #19                 // class org/jumpmind/symmetric/model/OutgoingBatch
      37: astore        4
      39: iload_1
      40: ifeq          57
      43: aload         4
      45: invokevirtual #20                 // Method org/jumpmind/symmetric/model/OutgoingBatch.isErrorFlag:()Z
      48: ifeq          57
      51: iinc          2, 1
      54: goto          60
      57: iinc          2, 1
      60: goto          19
      63: iload_2
      64: ireturn

  public java.util.List<org.jumpmind.symmetric.model.OutgoingBatch> filterBatchesForChannel(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #21                 // Method getBatchesForChannel:(Ljava/lang/String;)Ljava/util/List;
       5: astore_2
       6: aload_0
       7: getfield      #4                  // Field batches:Ljava/util/List;
      10: aload_2
      11: invokeinterface #17,  2           // InterfaceMethod java/util/List.removeAll:(Ljava/util/Collection;)Z
      16: pop
      17: aload_2
      18: areturn

  public java.util.List<org.jumpmind.symmetric.model.OutgoingBatch> filterBatchesForChannels(java.util.Set<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #22                 // Method getBatchesForChannels:(Ljava/util/Set;)Ljava/util/List;
       5: astore_2
       6: aload_0
       7: getfield      #4                  // Field batches:Ljava/util/List;
      10: aload_2
      11: invokeinterface #17,  2           // InterfaceMethod java/util/List.removeAll:(Ljava/util/Collection;)Z
      16: pop
      17: aload_2
      18: areturn

  public void removeNonLoadBatches();
    Code:
       0: aload_0
       1: getfield      #4                  // Field batches:Ljava/util/List;
       4: invokeinterface #23,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
       9: astore_1
      10: aload_1
      11: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      16: ifeq          45
      19: aload_1
      20: invokeinterface #14,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      25: checkcast     #19                 // class org/jumpmind/symmetric/model/OutgoingBatch
      28: astore_2
      29: aload_2
      30: invokevirtual #24                 // Method org/jumpmind/symmetric/model/OutgoingBatch.isLoadFlag:()Z
      33: ifne          42
      36: aload_1
      37: invokeinterface #25,  1           // InterfaceMethod java/util/Iterator.remove:()V
      42: goto          10
      45: return

  public boolean containsLoadBatches();
    Code:
       0: aload_0
       1: getfield      #4                  // Field batches:Ljava/util/List;
       4: invokeinterface #18,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
       9: astore_1
      10: aload_1
      11: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      16: ifeq          41
      19: aload_1
      20: invokeinterface #14,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      25: checkcast     #19                 // class org/jumpmind/symmetric/model/OutgoingBatch
      28: astore_2
      29: aload_2
      30: invokevirtual #24                 // Method org/jumpmind/symmetric/model/OutgoingBatch.isLoadFlag:()Z
      33: ifeq          38
      36: iconst_1
      37: ireturn
      38: goto          10
      41: iconst_0
      42: ireturn

  public boolean containsBatchesInError();
    Code:
       0: aload_0
       1: getfield      #4                  // Field batches:Ljava/util/List;
       4: invokeinterface #18,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
       9: astore_1
      10: aload_1
      11: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      16: ifeq          41
      19: aload_1
      20: invokeinterface #14,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      25: checkcast     #19                 // class org/jumpmind/symmetric/model/OutgoingBatch
      28: astore_2
      29: aload_2
      30: invokevirtual #20                 // Method org/jumpmind/symmetric/model/OutgoingBatch.isErrorFlag:()Z
      33: ifeq          38
      36: iconst_1
      37: ireturn
      38: goto          10
      41: iconst_0
      42: ireturn

  public java.util.List<org.jumpmind.symmetric.model.OutgoingBatch> getBatchesForChannel(org.jumpmind.symmetric.model.Channel);
    Code:
       0: new           #2                  // class java/util/ArrayList
       3: dup
       4: invokespecial #3                  // Method java/util/ArrayList."<init>":()V
       7: astore_2
       8: aload_1
       9: ifnull        21
      12: aload_0
      13: aload_1
      14: invokevirtual #26                 // Method org/jumpmind/symmetric/model/Channel.getChannelId:()Ljava/lang/String;
      17: invokevirtual #21                 // Method getBatchesForChannel:(Ljava/lang/String;)Ljava/util/List;
      20: astore_2
      21: aload_2
      22: areturn

  public java.util.List<org.jumpmind.symmetric.model.OutgoingBatch> getBatchesForChannel(java.lang.String);
    Code:
       0: new           #2                  // class java/util/ArrayList
       3: dup
       4: invokespecial #3                  // Method java/util/ArrayList."<init>":()V
       7: astore_2
       8: aload_1
       9: ifnull        66
      12: aload_0
      13: getfield      #4                  // Field batches:Ljava/util/List;
      16: invokeinterface #18,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      21: astore_3
      22: aload_3
      23: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      28: ifeq          66
      31: aload_3
      32: invokeinterface #14,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      37: checkcast     #19                 // class org/jumpmind/symmetric/model/OutgoingBatch
      40: astore        4
      42: aload_1
      43: aload         4
      45: invokevirtual #27                 // Method org/jumpmind/symmetric/model/OutgoingBatch.getChannelId:()Ljava/lang/String;
      48: invokevirtual #28                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      51: ifeq          63
      54: aload_2
      55: aload         4
      57: invokeinterface #29,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      62: pop
      63: goto          22
      66: aload_2
      67: areturn

  public java.util.List<org.jumpmind.symmetric.model.OutgoingBatch> getBatchesForChannels(java.util.Set<java.lang.String>);
    Code:
       0: new           #2                  // class java/util/ArrayList
       3: dup
       4: invokespecial #3                  // Method java/util/ArrayList."<init>":()V
       7: astore_2
       8: aload_1
       9: ifnull        68
      12: aload_0
      13: getfield      #4                  // Field batches:Ljava/util/List;
      16: invokeinterface #18,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      21: astore_3
      22: aload_3
      23: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      28: ifeq          68
      31: aload_3
      32: invokeinterface #14,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      37: checkcast     #19                 // class org/jumpmind/symmetric/model/OutgoingBatch
      40: astore        4
      42: aload_1
      43: aload         4
      45: invokevirtual #27                 // Method org/jumpmind/symmetric/model/OutgoingBatch.getChannelId:()Ljava/lang/String;
      48: invokeinterface #30,  2           // InterfaceMethod java/util/Set.contains:(Ljava/lang/Object;)Z
      53: ifeq          65
      56: aload_2
      57: aload         4
      59: invokeinterface #29,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      64: pop
      65: goto          22
      68: aload_2
      69: areturn

  public java.util.List<org.jumpmind.symmetric.model.OutgoingBatch> getBatchesForChannelWindows(org.jumpmind.symmetric.model.Node, org.jumpmind.symmetric.model.NodeChannel, java.util.List<org.jumpmind.symmetric.model.NodeGroupChannelWindow>);
    Code:
       0: new           #2                  // class java/util/ArrayList
       3: dup
       4: invokespecial #3                  // Method java/util/ArrayList."<init>":()V
       7: astore        4
       9: aload_0
      10: getfield      #4                  // Field batches:Ljava/util/List;
      13: ifnull        115
      16: aload_0
      17: getfield      #4                  // Field batches:Ljava/util/List;
      20: invokeinterface #9,  1            // InterfaceMethod java/util/List.size:()I
      25: ifle          115
      28: aload_0
      29: aload_3
      30: aload_1
      31: invokevirtual #31                 // Method org/jumpmind/symmetric/model/Node.getTimezoneOffset:()Ljava/lang/String;
      34: invokevirtual #32                 // Method inTimeWindow:(Ljava/util/List;Ljava/lang/String;)Z
      37: ifeq          115
      40: aload_2
      41: invokevirtual #33                 // Method org/jumpmind/symmetric/model/NodeChannel.getMaxBatchToSend:()I
      44: istore        5
      46: aload_0
      47: getfield      #4                  // Field batches:Ljava/util/List;
      50: invokeinterface #18,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      55: astore        6
      57: aload         6
      59: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      64: ifeq          115
      67: aload         6
      69: invokeinterface #14,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      74: checkcast     #19                 // class org/jumpmind/symmetric/model/OutgoingBatch
      77: astore        7
      79: aload_2
      80: invokevirtual #11                 // Method org/jumpmind/symmetric/model/NodeChannel.getChannelId:()Ljava/lang/String;
      83: aload         7
      85: invokevirtual #27                 // Method org/jumpmind/symmetric/model/OutgoingBatch.getChannelId:()Ljava/lang/String;
      88: invokevirtual #28                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      91: ifeq          112
      94: iload         5
      96: ifle          112
      99: aload         4
     101: aload         7
     103: invokeinterface #29,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     108: pop
     109: iinc          5, -1
     112: goto          57
     115: aload         4
     117: areturn

  public boolean inTimeWindow(java.util.List<org.jumpmind.symmetric.model.NodeGroupChannelWindow>, java.lang.String);
    Code:
       0: aload_1
       1: ifnull        56
       4: aload_1
       5: invokeinterface #9,  1            // InterfaceMethod java/util/List.size:()I
      10: ifle          56
      13: aload_1
      14: invokeinterface #18,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      19: astore_3
      20: aload_3
      21: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      26: ifeq          54
      29: aload_3
      30: invokeinterface #14,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      35: checkcast     #34                 // class org/jumpmind/symmetric/model/NodeGroupChannelWindow
      38: astore        4
      40: aload         4
      42: aload_2
      43: invokevirtual #35                 // Method org/jumpmind/symmetric/model/NodeGroupChannelWindow.inTimeWindow:(Ljava/lang/String;)Z
      46: ifeq          51
      49: iconst_1
      50: ireturn
      51: goto          20
      54: iconst_0
      55: ireturn
      56: iconst_1
      57: ireturn

  public java.util.List<org.jumpmind.symmetric.model.OutgoingBatch> filterBatchesForInactiveChannels();
    Code:
       0: new           #2                  // class java/util/ArrayList
       3: dup
       4: invokespecial #3                  // Method java/util/ArrayList."<init>":()V
       7: astore_1
       8: aload_0
       9: getfield      #4                  // Field batches:Ljava/util/List;
      12: invokeinterface #18,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      17: astore_2
      18: aload_2
      19: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      24: ifeq          64
      27: aload_2
      28: invokeinterface #14,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      33: checkcast     #19                 // class org/jumpmind/symmetric/model/OutgoingBatch
      36: astore_3
      37: aload_0
      38: getfield      #8                  // Field activeChannelIds:Ljava/util/Set;
      41: aload_3
      42: invokevirtual #27                 // Method org/jumpmind/symmetric/model/OutgoingBatch.getChannelId:()Ljava/lang/String;
      45: invokeinterface #30,  2           // InterfaceMethod java/util/Set.contains:(Ljava/lang/Object;)Z
      50: ifne          61
      53: aload_1
      54: aload_3
      55: invokeinterface #29,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      60: pop
      61: goto          18
      64: aload_0
      65: getfield      #4                  // Field batches:Ljava/util/List;
      68: aload_1
      69: invokeinterface #17,  2           // InterfaceMethod java/util/List.removeAll:(Ljava/util/Collection;)Z
      74: pop
      75: aload_1
      76: areturn

  public void sortChannels(java.util.List<org.jumpmind.symmetric.model.NodeChannel>);
    Code:
       0: new           #36                 // class java/util/HashMap
       3: dup
       4: invokespecial #37                 // Method java/util/HashMap."<init>":()V
       7: astore_2
       8: aload_0
       9: getfield      #4                  // Field batches:Ljava/util/List;
      12: invokeinterface #18,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      17: astore_3
      18: aload_3
      19: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      24: ifeq          64
      27: aload_3
      28: invokeinterface #14,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      33: checkcast     #19                 // class org/jumpmind/symmetric/model/OutgoingBatch
      36: astore        4
      38: aload         4
      40: invokevirtual #20                 // Method org/jumpmind/symmetric/model/OutgoingBatch.isErrorFlag:()Z
      43: ifeq          61
      46: aload_2
      47: aload         4
      49: invokevirtual #27                 // Method org/jumpmind/symmetric/model/OutgoingBatch.getChannelId:()Ljava/lang/String;
      52: aload         4
      54: invokevirtual #38                 // Method org/jumpmind/symmetric/model/OutgoingBatch.getLastUpdatedTime:()Ljava/util/Date;
      57: invokevirtual #39                 // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      60: pop
      61: goto          18
      64: aload_1
      65: new           #40                 // class org/jumpmind/symmetric/model/OutgoingBatches$1
      68: dup
      69: aload_0
      70: aload_2
      71: invokespecial #41                 // Method org/jumpmind/symmetric/model/OutgoingBatches$1."<init>":(Lorg/jumpmind/symmetric/model/OutgoingBatches;Ljava/util/HashMap;)V
      74: invokestatic  #42                 // Method java/util/Collections.sort:(Ljava/util/List;Ljava/util/Comparator;)V
      77: aload_1
      78: invokeinterface #18,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      83: astore_3
      84: aload_3
      85: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      90: ifeq          157
      93: aload_3
      94: invokeinterface #14,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      99: checkcast     #15                 // class org/jumpmind/symmetric/model/NodeChannel
     102: astore        4
     104: aload         4
     106: invokevirtual #43                 // Method org/jumpmind/symmetric/model/NodeChannel.getExtractPeriodMillis:()J
     109: lstore        5
     111: aload         4
     113: invokevirtual #44                 // Method org/jumpmind/symmetric/model/NodeChannel.getLastExtractTime:()Ljava/util/Date;
     116: astore        7
     118: lload         5
     120: lconst_1
     121: lcmp
     122: iflt          148
     125: aload         7
     127: ifnull        148
     130: invokestatic  #45                 // Method java/util/Calendar.getInstance:()Ljava/util/Calendar;
     133: invokevirtual #46                 // Method java/util/Calendar.getTimeInMillis:()J
     136: aload         7
     138: invokevirtual #47                 // Method java/util/Date.getTime:()J
     141: lsub
     142: lload         5
     144: lcmp
     145: iflt          154
     148: aload_0
     149: aload         4
     151: invokevirtual #48                 // Method addActiveChannel:(Lorg/jumpmind/symmetric/model/NodeChannel;)V
     154: goto          84
     157: aload_0
     158: invokevirtual #49                 // Method filterBatchesForInactiveChannels:()Ljava/util/List;
     161: pop
     162: return
}
