Compiled from "RemoteNodeStatus.java"
public class org.jumpmind.symmetric.model.RemoteNodeStatus implements java.io.Serializable {
  private static final long serialVersionUID;

  private java.lang.String nodeId;

  private org.jumpmind.symmetric.model.RemoteNodeStatus$Status status;

  private long dataProcessed;

  private long batchesProcessed;

  private long reloadBatchesProcessed;

  private boolean complete;

  public org.jumpmind.symmetric.model.RemoteNodeStatus(java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field complete:Z
       9: aload_0
      10: getstatic     #3                  // Field org/jumpmind/symmetric/model/RemoteNodeStatus$Status.NO_DATA:Lorg/jumpmind/symmetric/model/RemoteNodeStatus$Status;
      13: putfield      #4                  // Field status:Lorg/jumpmind/symmetric/model/RemoteNodeStatus$Status;
      16: aload_0
      17: aload_1
      18: putfield      #5                  // Field nodeId:Ljava/lang/String;
      21: return

  public boolean failed();
    Code:
       0: aload_0
       1: getfield      #4                  // Field status:Lorg/jumpmind/symmetric/model/RemoteNodeStatus$Status;
       4: getstatic     #3                  // Field org/jumpmind/symmetric/model/RemoteNodeStatus$Status.NO_DATA:Lorg/jumpmind/symmetric/model/RemoteNodeStatus$Status;
       7: if_acmpeq     24
      10: aload_0
      11: getfield      #4                  // Field status:Lorg/jumpmind/symmetric/model/RemoteNodeStatus$Status;
      14: getstatic     #6                  // Field org/jumpmind/symmetric/model/RemoteNodeStatus$Status.DATA_PROCESSED:Lorg/jumpmind/symmetric/model/RemoteNodeStatus$Status;
      17: if_acmpeq     24
      20: iconst_1
      21: goto          25
      24: iconst_0
      25: ireturn

  public java.lang.String getNodeId();
    Code:
       0: aload_0
       1: getfield      #5                  // Field nodeId:Ljava/lang/String;
       4: areturn

  public void setNodeId(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #5                  // Field nodeId:Ljava/lang/String;
       5: return

  public org.jumpmind.symmetric.model.RemoteNodeStatus$Status getStatus();
    Code:
       0: aload_0
       1: getfield      #4                  // Field status:Lorg/jumpmind/symmetric/model/RemoteNodeStatus$Status;
       4: areturn

  public void setStatus(org.jumpmind.symmetric.model.RemoteNodeStatus$Status);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #4                  // Field status:Lorg/jumpmind/symmetric/model/RemoteNodeStatus$Status;
       5: return

  public long getDataProcessed();
    Code:
       0: aload_0
       1: getfield      #7                  // Field dataProcessed:J
       4: lreturn

  public long getBatchesProcessed();
    Code:
       0: aload_0
       1: getfield      #8                  // Field batchesProcessed:J
       4: lreturn

  public long getReloadBatchesProcessed();
    Code:
       0: aload_0
       1: getfield      #9                  // Field reloadBatchesProcessed:J
       4: lreturn

  public void updateIncomingStatus(java.util.List<org.jumpmind.symmetric.model.IncomingBatch>);
    Code:
       0: aload_1
       1: ifnull        73
       4: aload_1
       5: invokeinterface #10,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      10: astore_2
      11: aload_2
      12: invokeinterface #11,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      17: ifeq          73
      20: aload_2
      21: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      26: checkcast     #13                 // class org/jumpmind/symmetric/model/IncomingBatch
      29: astore_3
      30: aload_0
      31: dup
      32: getfield      #7                  // Field dataProcessed:J
      35: aload_3
      36: invokevirtual #14                 // Method org/jumpmind/symmetric/model/IncomingBatch.getStatementCount:()J
      39: ladd
      40: putfield      #7                  // Field dataProcessed:J
      43: aload_0
      44: dup
      45: getfield      #8                  // Field batchesProcessed:J
      48: lconst_1
      49: ladd
      50: putfield      #8                  // Field batchesProcessed:J
      53: aload_3
      54: invokevirtual #15                 // Method org/jumpmind/symmetric/model/IncomingBatch.getStatus:()Lorg/jumpmind/symmetric/model/IncomingBatch$Status;
      57: getstatic     #16                 // Field org/jumpmind/symmetric/model/IncomingBatch$Status.ER:Lorg/jumpmind/symmetric/model/IncomingBatch$Status;
      60: if_acmpne     70
      63: aload_0
      64: getstatic     #17                 // Field org/jumpmind/symmetric/model/RemoteNodeStatus$Status.DATA_ERROR:Lorg/jumpmind/symmetric/model/RemoteNodeStatus$Status;
      67: putfield      #4                  // Field status:Lorg/jumpmind/symmetric/model/RemoteNodeStatus$Status;
      70: goto          11
      73: aload_0
      74: getfield      #4                  // Field status:Lorg/jumpmind/symmetric/model/RemoteNodeStatus$Status;
      77: getstatic     #17                 // Field org/jumpmind/symmetric/model/RemoteNodeStatus$Status.DATA_ERROR:Lorg/jumpmind/symmetric/model/RemoteNodeStatus$Status;
      80: if_acmpeq     99
      83: aload_0
      84: getfield      #7                  // Field dataProcessed:J
      87: lconst_0
      88: lcmp
      89: ifle          99
      92: aload_0
      93: getstatic     #6                  // Field org/jumpmind/symmetric/model/RemoteNodeStatus$Status.DATA_PROCESSED:Lorg/jumpmind/symmetric/model/RemoteNodeStatus$Status;
      96: putfield      #4                  // Field status:Lorg/jumpmind/symmetric/model/RemoteNodeStatus$Status;
      99: return

  public void updateOutgoingStatus(java.util.List<org.jumpmind.symmetric.model.OutgoingBatch>, java.util.List<org.jumpmind.symmetric.model.BatchAck>);
    Code:
       0: aload_2
       1: ifnull        49
       4: aload_2
       5: invokeinterface #10,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      10: astore_3
      11: aload_3
      12: invokeinterface #11,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      17: ifeq          49
      20: aload_3
      21: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      26: checkcast     #18                 // class org/jumpmind/symmetric/model/BatchAck
      29: astore        4
      31: aload         4
      33: invokevirtual #19                 // Method org/jumpmind/symmetric/model/BatchAck.isOk:()Z
      36: ifne          46
      39: aload_0
      40: getstatic     #17                 // Field org/jumpmind/symmetric/model/RemoteNodeStatus$Status.DATA_ERROR:Lorg/jumpmind/symmetric/model/RemoteNodeStatus$Status;
      43: putfield      #4                  // Field status:Lorg/jumpmind/symmetric/model/RemoteNodeStatus$Status;
      46: goto          11
      49: aload_1
      50: ifnull        130
      53: aload_1
      54: invokeinterface #10,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      59: astore_3
      60: aload_3
      61: invokeinterface #11,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      66: ifeq          130
      69: aload_3
      70: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      75: checkcast     #20                 // class org/jumpmind/symmetric/model/OutgoingBatch
      78: astore        4
      80: aload_0
      81: dup
      82: getfield      #8                  // Field batchesProcessed:J
      85: lconst_1
      86: ladd
      87: putfield      #8                  // Field batchesProcessed:J
      90: aload_0
      91: dup
      92: getfield      #7                  // Field dataProcessed:J
      95: aload         4
      97: invokevirtual #21                 // Method org/jumpmind/symmetric/model/OutgoingBatch.totalEventCount:()J
     100: ladd
     101: putfield      #7                  // Field dataProcessed:J
     104: ldc           #22                 // String reload
     106: aload         4
     108: invokevirtual #23                 // Method org/jumpmind/symmetric/model/OutgoingBatch.getChannelId:()Ljava/lang/String;
     111: invokevirtual #24                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     114: ifeq          127
     117: aload_0
     118: dup
     119: getfield      #9                  // Field reloadBatchesProcessed:J
     122: lconst_1
     123: ladd
     124: putfield      #9                  // Field reloadBatchesProcessed:J
     127: goto          60
     130: aload_0
     131: getfield      #4                  // Field status:Lorg/jumpmind/symmetric/model/RemoteNodeStatus$Status;
     134: getstatic     #17                 // Field org/jumpmind/symmetric/model/RemoteNodeStatus$Status.DATA_ERROR:Lorg/jumpmind/symmetric/model/RemoteNodeStatus$Status;
     137: if_acmpeq     156
     140: aload_0
     141: getfield      #7                  // Field dataProcessed:J
     144: lconst_0
     145: lcmp
     146: ifle          156
     149: aload_0
     150: getstatic     #6                  // Field org/jumpmind/symmetric/model/RemoteNodeStatus$Status.DATA_PROCESSED:Lorg/jumpmind/symmetric/model/RemoteNodeStatus$Status;
     153: putfield      #4                  // Field status:Lorg/jumpmind/symmetric/model/RemoteNodeStatus$Status;
     156: return

  public void setComplete(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #2                  // Field complete:Z
       5: return

  public boolean isComplete();
    Code:
       0: aload_0
       1: getfield      #2                  // Field complete:Z
       4: ireturn
}
