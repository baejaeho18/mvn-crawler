Compiled from "ISymmetricDialect.java"
public interface org.jumpmind.symmetric.db.ISymmetricDialect {
  public abstract void createTrigger(java.lang.StringBuilder, org.jumpmind.symmetric.io.data.DataEventType, org.jumpmind.symmetric.model.Trigger, org.jumpmind.symmetric.model.TriggerHistory, org.jumpmind.symmetric.model.Channel, java.lang.String, org.jumpmind.db.model.Table);

  public abstract java.lang.String getEngineName();

  public abstract void removeTrigger(java.lang.StringBuilder, java.lang.String, java.lang.String, java.lang.String, java.lang.String, org.jumpmind.symmetric.model.TriggerHistory);

  public abstract boolean doesTriggerExist(java.lang.String, java.lang.String, java.lang.String, java.lang.String);

  public abstract void initTablesAndFunctions();

  public abstract boolean createOrAlterTablesIfNecessary();

  public abstract org.jumpmind.db.platform.IDatabasePlatform getPlatform();

  public abstract java.lang.String getName();

  public abstract java.lang.String getVersion();

  public abstract int getMajorVersion();

  public abstract int getMinorVersion();

  public abstract java.lang.String getProductVersion();

  public abstract org.jumpmind.db.util.BinaryEncoding getBinaryEncoding();

  public abstract java.lang.String getTransactionTriggerExpression(java.lang.String, java.lang.String, org.jumpmind.symmetric.model.Trigger);

  public abstract java.lang.String createInitialLoadSqlFor(org.jumpmind.symmetric.model.Node, org.jumpmind.symmetric.model.TriggerRouter, org.jumpmind.db.model.Table, org.jumpmind.symmetric.model.TriggerHistory, org.jumpmind.symmetric.model.Channel);

  public abstract java.lang.String createPurgeSqlFor(org.jumpmind.symmetric.model.Node, org.jumpmind.symmetric.model.TriggerRouter);

  public abstract java.lang.String createCsvDataSql(org.jumpmind.symmetric.model.Trigger, org.jumpmind.symmetric.model.TriggerHistory, org.jumpmind.symmetric.model.Channel, java.lang.String);

  public abstract java.lang.String createCsvPrimaryKeySql(org.jumpmind.symmetric.model.Trigger, org.jumpmind.symmetric.model.TriggerHistory, org.jumpmind.symmetric.model.Channel, java.lang.String);

  public abstract int getMaxTriggerNameLength();

  public abstract boolean supportsTransactionId();

  public abstract boolean supportsTransactionViews();

  public abstract void purge();

  public abstract void disableSyncTriggers(org.jumpmind.db.sql.ISqlTransaction);

  public abstract void disableSyncTriggers(org.jumpmind.db.sql.ISqlTransaction, java.lang.String);

  public abstract void enableSyncTriggers(org.jumpmind.db.sql.ISqlTransaction);

  public abstract java.lang.String getSyncTriggersExpression();

  public abstract java.lang.String getSourceNodeExpression();

  public abstract java.lang.String getCreateSymmetricDDL();

  public abstract java.lang.String getCreateTableXML(org.jumpmind.symmetric.model.TriggerRouter);

  public abstract java.lang.String getCreateTableSQL(org.jumpmind.symmetric.model.TriggerRouter);

  public abstract boolean isBlobSyncSupported();

  public abstract boolean isClobSyncSupported();

  public abstract boolean isTransactionIdOverrideSupported();

  public abstract org.jumpmind.db.model.Table getTable(org.jumpmind.symmetric.model.Trigger, boolean);

  public abstract long insertWithGeneratedKey(java.lang.String, org.jumpmind.symmetric.db.SequenceIdentifier);

  public abstract long insertWithGeneratedKey(java.lang.String, org.jumpmind.symmetric.db.SequenceIdentifier, java.lang.Object...);

  public abstract org.jumpmind.db.model.Column[] orderColumns(java.lang.String[], org.jumpmind.db.model.Table);

  public abstract int getRouterDataPeekAheadCount();

  public abstract boolean supportsOpenCursorsAcrossCommit();

  public abstract java.util.Set<java.lang.String> getSqlKeywords();

  public abstract java.lang.String getInitialLoadTableAlias();

  public abstract java.lang.String preProcessTriggerSqlClause(java.lang.String);

  public abstract java.lang.String toFormattedTimestamp(java.util.Date);

  public abstract void truncateTable(java.lang.String);

  public abstract long getDatabaseTime();

  public abstract boolean areDatabaseTransactionsPendingSince(long);

  public abstract boolean needsToSelectLobData();

  public abstract java.lang.String getDataHasChangedCondition(org.jumpmind.symmetric.model.Trigger);

  public abstract boolean canGapsOccurInCapturedDataIds();

  public abstract java.lang.String massageDataExtractionSql(java.lang.String, org.jumpmind.symmetric.model.Channel);

  public abstract java.lang.String massageForLob(java.lang.String, org.jumpmind.symmetric.model.Channel);

  public abstract boolean escapesTemplatesForDatabaseInserts();

  public abstract java.lang.String getMasterCollation();

  public abstract boolean supportsBatchUpdates();

  public abstract void cleanupTriggers();

  public abstract void addDatabaseUpgradeListener(org.jumpmind.symmetric.ext.IDatabaseUpgradeListener);

  public abstract java.lang.String getDriverName();

  public abstract java.lang.String getDriverVersion();

  public abstract java.lang.String getSequenceName(org.jumpmind.symmetric.db.SequenceIdentifier);

  public abstract java.lang.String getSequenceKeyName(org.jumpmind.symmetric.db.SequenceIdentifier);

  public abstract java.lang.String getTablePrefix();
}
