Compiled from "AbstractSymmetricDialect.java"
public abstract class org.jumpmind.symmetric.db.AbstractSymmetricDialect implements org.jumpmind.symmetric.db.ISymmetricDialect {
  protected final org.slf4j.Logger log;

  public static final int MAX_SYMMETRIC_SUPPORTED_TRIGGER_SIZE;

  protected org.jumpmind.db.platform.IDatabasePlatform platform;

  protected org.jumpmind.symmetric.db.AbstractTriggerTemplate triggerTemplate;

  protected org.jumpmind.symmetric.service.IParameterService parameterService;

  protected java.lang.Boolean supportsGetGeneratedKeys;

  protected java.lang.String databaseName;

  protected java.lang.String driverVersion;

  protected java.lang.String driverName;

  protected int databaseMajorVersion;

  protected int databaseMinorVersion;

  protected java.lang.String databaseProductVersion;

  protected java.util.Set<java.lang.String> sqlKeywords;

  protected boolean supportsTransactionViews;

  protected java.util.List<org.jumpmind.symmetric.ext.IDatabaseUpgradeListener> databaseUpgradeListeners;

  public org.jumpmind.symmetric.db.AbstractSymmetricDialect(org.jumpmind.symmetric.service.IParameterService, org.jumpmind.db.platform.IDatabasePlatform);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_0
       6: invokevirtual #2                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
       9: invokestatic  #3                  // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
      12: putfield      #4                  // Field log:Lorg/slf4j/Logger;
      15: aload_0
      16: iconst_0
      17: putfield      #5                  // Field supportsTransactionViews:Z
      20: aload_0
      21: new           #6                  // class java/util/ArrayList
      24: dup
      25: invokespecial #7                  // Method java/util/ArrayList."<init>":()V
      28: putfield      #8                  // Field databaseUpgradeListeners:Ljava/util/List;
      31: aload_0
      32: aload_1
      33: putfield      #9                  // Field parameterService:Lorg/jumpmind/symmetric/service/IParameterService;
      36: aload_0
      37: aload_2
      38: putfield      #10                 // Field platform:Lorg/jumpmind/db/platform/IDatabasePlatform;
      41: aload_0
      42: getfield      #4                  // Field log:Lorg/slf4j/Logger;
      45: ldc           #11                 // String The DbDialect being used is {}
      47: aload_0
      48: invokevirtual #2                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
      51: invokevirtual #12                 // Method java/lang/Class.getName:()Ljava/lang/String;
      54: invokeinterface #13,  3           // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;Ljava/lang/Object;)V
      59: aload_0
      60: getfield      #10                 // Field platform:Lorg/jumpmind/db/platform/IDatabasePlatform;
      63: invokeinterface #14,  1           // InterfaceMethod org/jumpmind/db/platform/IDatabasePlatform.getSqlTemplate:()Lorg/jumpmind/db/sql/ISqlTemplate;
      68: astore_3
      69: aload_0
      70: aload_3
      71: invokeinterface #15,  1           // InterfaceMethod org/jumpmind/db/sql/ISqlTemplate.getDatabaseMajorVersion:()I
      76: putfield      #16                 // Field databaseMajorVersion:I
      79: aload_0
      80: aload_3
      81: invokeinterface #17,  1           // InterfaceMethod org/jumpmind/db/sql/ISqlTemplate.getDatabaseMinorVersion:()I
      86: putfield      #18                 // Field databaseMinorVersion:I
      89: aload_0
      90: aload_3
      91: invokeinterface #19,  1           // InterfaceMethod org/jumpmind/db/sql/ISqlTemplate.getDatabaseProductName:()Ljava/lang/String;
      96: putfield      #20                 // Field databaseName:Ljava/lang/String;
      99: aload_0
     100: aload_3
     101: invokeinterface #21,  1           // InterfaceMethod org/jumpmind/db/sql/ISqlTemplate.getDatabaseProductVersion:()Ljava/lang/String;
     106: putfield      #22                 // Field databaseProductVersion:Ljava/lang/String;
     109: aload_0
     110: aload_3
     111: invokeinterface #23,  1           // InterfaceMethod org/jumpmind/db/sql/ISqlTemplate.getDriverName:()Ljava/lang/String;
     116: putfield      #24                 // Field driverName:Ljava/lang/String;
     119: aload_0
     120: aload_3
     121: invokeinterface #25,  1           // InterfaceMethod org/jumpmind/db/sql/ISqlTemplate.getDriverVersion:()Ljava/lang/String;
     126: putfield      #26                 // Field driverVersion:Ljava/lang/String;
     129: return

  public java.lang.String toFormattedTimestamp(java.util.Date);
    Code:
       0: new           #27                 // class java/lang/StringBuilder
       3: dup
       4: ldc           #28                 // String {ts \'
       6: invokespecial #29                 // Method java/lang/StringBuilder."<init>":(Ljava/lang/String;)V
       9: astore_2
      10: aload_2
      11: getstatic     #30                 // Field org/jumpmind/db/sql/SqlConstants.JDBC_TIMESTAMP_FORMATTER:Lorg/apache/commons/lang/time/FastDateFormat;
      14: aload_1
      15: invokevirtual #31                 // Method org/apache/commons/lang/time/FastDateFormat.format:(Ljava/util/Date;)Ljava/lang/String;
      18: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      21: pop
      22: aload_2
      23: ldc           #33                 // String \'}
      25: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      28: pop
      29: aload_2
      30: invokevirtual #34                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      33: areturn

  public boolean requiresAutoCommitFalseToSetFetchSize();
    Code:
       0: iconst_0
       1: ireturn

  public int getMaxTriggerNameLength();
    Code:
       0: aload_0
       1: invokevirtual #35                 // Method getPlatform:()Lorg/jumpmind/db/platform/IDatabasePlatform;
       4: invokeinterface #36,  1           // InterfaceMethod org/jumpmind/db/platform/IDatabasePlatform.getDatabaseInfo:()Lorg/jumpmind/db/platform/DatabaseInfo;
       9: invokevirtual #37                 // Method org/jumpmind/db/platform/DatabaseInfo.getMaxColumnNameLength:()I
      12: istore_1
      13: iload_1
      14: bipush        50
      16: if_icmpge     27
      19: iload_1
      20: ifle          27
      23: iload_1
      24: goto          29
      27: bipush        50
      29: ireturn

  protected void initTablesAndFunctionsForSpecificDialect();
    Code:
       0: return

  public void initTablesAndFunctions();
    Code:
       0: aload_0
       1: invokevirtual #38                 // Method initTablesAndFunctionsForSpecificDialect:()V
       4: aload_0
       5: invokevirtual #39                 // Method createOrAlterTablesIfNecessary:()Z
       8: pop
       9: aload_0
      10: invokevirtual #40                 // Method createRequiredFunctions:()V
      13: aload_0
      14: getfield      #10                 // Field platform:Lorg/jumpmind/db/platform/IDatabasePlatform;
      17: invokeinterface #41,  1           // InterfaceMethod org/jumpmind/db/platform/IDatabasePlatform.resetCachedTableModel:()V
      22: return

  public final boolean doesTriggerExist(java.lang.String, java.lang.String, java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokevirtual #42                 // Method doesTriggerExistOnPlatform:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
       9: ireturn
      10: astore        5
      12: aload_0
      13: getfield      #4                  // Field log:Lorg/slf4j/Logger;
      16: ldc           #44                 // String Could not figure out if the trigger exists.  Assuming that is does not
      18: aload         5
      20: invokeinterface #45,  3           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Throwable;)V
      25: iconst_0
      26: ireturn
    Exception table:
       from    to  target type
           0     9    10   Class java/lang/Exception

  protected void createRequiredFunctions();
    Code:
       0: aload_0
       1: getfield      #46                 // Field triggerTemplate:Lorg/jumpmind/symmetric/db/AbstractTriggerTemplate;
       4: invokevirtual #47                 // Method org/jumpmind/symmetric/db/AbstractTriggerTemplate.getFunctionsToInstall:()[Ljava/lang/String;
       7: astore_1
       8: iconst_0
       9: istore_2
      10: iload_2
      11: aload_1
      12: arraylength
      13: if_icmpge     136
      16: new           #27                 // class java/lang/StringBuilder
      19: dup
      20: invokespecial #48                 // Method java/lang/StringBuilder."<init>":()V
      23: aload_0
      24: getfield      #9                  // Field parameterService:Lorg/jumpmind/symmetric/service/IParameterService;
      27: invokeinterface #49,  1           // InterfaceMethod org/jumpmind/symmetric/service/IParameterService.getTablePrefix:()Ljava/lang/String;
      32: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      35: ldc           #50                 // String _
      37: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      40: aload_1
      41: iload_2
      42: aaload
      43: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      46: invokevirtual #34                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      49: astore_3
      50: aload_0
      51: getfield      #10                 // Field platform:Lorg/jumpmind/db/platform/IDatabasePlatform;
      54: invokeinterface #14,  1           // InterfaceMethod org/jumpmind/db/platform/IDatabasePlatform.getSqlTemplate:()Lorg/jumpmind/db/sql/ISqlTemplate;
      59: aload_0
      60: getfield      #46                 // Field triggerTemplate:Lorg/jumpmind/symmetric/db/AbstractTriggerTemplate;
      63: aload_3
      64: aload_0
      65: getfield      #10                 // Field platform:Lorg/jumpmind/db/platform/IDatabasePlatform;
      68: invokeinterface #51,  1           // InterfaceMethod org/jumpmind/db/platform/IDatabasePlatform.getDefaultSchema:()Ljava/lang/String;
      73: invokevirtual #52                 // Method org/jumpmind/symmetric/db/AbstractTriggerTemplate.getFunctionInstalledSql:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      76: iconst_0
      77: anewarray     #53                 // class java/lang/Object
      80: invokeinterface #54,  3           // InterfaceMethod org/jumpmind/db/sql/ISqlTemplate.queryForInt:(Ljava/lang/String;[Ljava/lang/Object;)I
      85: ifne          130
      88: aload_0
      89: getfield      #10                 // Field platform:Lorg/jumpmind/db/platform/IDatabasePlatform;
      92: invokeinterface #14,  1           // InterfaceMethod org/jumpmind/db/platform/IDatabasePlatform.getSqlTemplate:()Lorg/jumpmind/db/sql/ISqlTemplate;
      97: aload_0
      98: getfield      #46                 // Field triggerTemplate:Lorg/jumpmind/symmetric/db/AbstractTriggerTemplate;
     101: aload_1
     102: iload_2
     103: aaload
     104: aload_3
     105: invokevirtual #55                 // Method org/jumpmind/symmetric/db/AbstractTriggerTemplate.getFunctionSql:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
     108: iconst_0
     109: anewarray     #53                 // class java/lang/Object
     112: invokeinterface #56,  3           // InterfaceMethod org/jumpmind/db/sql/ISqlTemplate.update:(Ljava/lang/String;[Ljava/lang/Object;)I
     117: pop
     118: aload_0
     119: getfield      #4                  // Field log:Lorg/slf4j/Logger;
     122: ldc           #57                 // String Just installed {}
     124: aload_3
     125: invokeinterface #13,  3           // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;Ljava/lang/Object;)V
     130: iinc          2, 1
     133: goto          10
     136: return

  public abstract org.jumpmind.db.util.BinaryEncoding getBinaryEncoding();

  protected abstract boolean doesTriggerExistOnPlatform(java.lang.String, java.lang.String, java.lang.String, java.lang.String);

  public java.lang.String getTransactionTriggerExpression(java.lang.String, java.lang.String, org.jumpmind.symmetric.model.Trigger);
    Code:
       0: ldc           #58                 // String null
       2: areturn

  public java.lang.String createInitialLoadSqlFor(org.jumpmind.symmetric.model.Node, org.jumpmind.symmetric.model.TriggerRouter, org.jumpmind.db.model.Table, org.jumpmind.symmetric.model.TriggerHistory, org.jumpmind.symmetric.model.Channel);
    Code:
       0: aload_0
       1: getfield      #46                 // Field triggerTemplate:Lorg/jumpmind/symmetric/db/AbstractTriggerTemplate;
       4: aload_1
       5: aload_2
       6: aload_3
       7: aload         4
       9: aload         5
      11: invokevirtual #59                 // Method org/jumpmind/symmetric/db/AbstractTriggerTemplate.createInitalLoadSql:(Lorg/jumpmind/symmetric/model/Node;Lorg/jumpmind/symmetric/model/TriggerRouter;Lorg/jumpmind/db/model/Table;Lorg/jumpmind/symmetric/model/TriggerHistory;Lorg/jumpmind/symmetric/model/Channel;)Ljava/lang/String;
      14: invokevirtual #60                 // Method java/lang/String.trim:()Ljava/lang/String;
      17: areturn

  public java.lang.String createPurgeSqlFor(org.jumpmind.symmetric.model.Node, org.jumpmind.symmetric.model.TriggerRouter);
    Code:
       0: aload_0
       1: getfield      #9                  // Field parameterService:Lorg/jumpmind/symmetric/service/IParameterService;
       4: ldc           #61                 // String initial.load.delete.first.sql
       6: invokeinterface #62,  2           // InterfaceMethod org/jumpmind/symmetric/service/IParameterService.getString:(Ljava/lang/String;)Ljava/lang/String;
      11: iconst_1
      12: anewarray     #53                 // class java/lang/Object
      15: dup
      16: iconst_0
      17: aload_2
      18: invokevirtual #63                 // Method org/jumpmind/symmetric/model/TriggerRouter.qualifiedTargetTableName:()Ljava/lang/String;
      21: aastore
      22: invokestatic  #64                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      25: areturn

  public java.lang.String createCsvDataSql(org.jumpmind.symmetric.model.Trigger, org.jumpmind.symmetric.model.TriggerHistory, org.jumpmind.symmetric.model.Channel, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #46                 // Field triggerTemplate:Lorg/jumpmind/symmetric/db/AbstractTriggerTemplate;
       4: aload_1
       5: aload_2
       6: aload_0
       7: getfield      #10                 // Field platform:Lorg/jumpmind/db/platform/IDatabasePlatform;
      10: aload_1
      11: invokevirtual #65                 // Method org/jumpmind/symmetric/model/Trigger.getSourceCatalogName:()Ljava/lang/String;
      14: aload_1
      15: invokevirtual #66                 // Method org/jumpmind/symmetric/model/Trigger.getSourceSchemaName:()Ljava/lang/String;
      18: aload_1
      19: invokevirtual #67                 // Method org/jumpmind/symmetric/model/Trigger.getSourceTableName:()Ljava/lang/String;
      22: iconst_0
      23: invokeinterface #68,  5           // InterfaceMethod org/jumpmind/db/platform/IDatabasePlatform.getTableFromCache:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)Lorg/jumpmind/db/model/Table;
      28: aload_3
      29: aload         4
      31: invokevirtual #69                 // Method org/jumpmind/symmetric/db/AbstractTriggerTemplate.createCsvDataSql:(Lorg/jumpmind/symmetric/model/Trigger;Lorg/jumpmind/symmetric/model/TriggerHistory;Lorg/jumpmind/db/model/Table;Lorg/jumpmind/symmetric/model/Channel;Ljava/lang/String;)Ljava/lang/String;
      34: invokevirtual #60                 // Method java/lang/String.trim:()Ljava/lang/String;
      37: areturn

  public java.lang.String createCsvPrimaryKeySql(org.jumpmind.symmetric.model.Trigger, org.jumpmind.symmetric.model.TriggerHistory, org.jumpmind.symmetric.model.Channel, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #46                 // Field triggerTemplate:Lorg/jumpmind/symmetric/db/AbstractTriggerTemplate;
       4: aload_1
       5: aload_2
       6: aload_0
       7: getfield      #10                 // Field platform:Lorg/jumpmind/db/platform/IDatabasePlatform;
      10: aload_1
      11: invokevirtual #65                 // Method org/jumpmind/symmetric/model/Trigger.getSourceCatalogName:()Ljava/lang/String;
      14: aload_1
      15: invokevirtual #66                 // Method org/jumpmind/symmetric/model/Trigger.getSourceSchemaName:()Ljava/lang/String;
      18: aload_1
      19: invokevirtual #67                 // Method org/jumpmind/symmetric/model/Trigger.getSourceTableName:()Ljava/lang/String;
      22: iconst_0
      23: invokeinterface #68,  5           // InterfaceMethod org/jumpmind/db/platform/IDatabasePlatform.getTableFromCache:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)Lorg/jumpmind/db/model/Table;
      28: aload_3
      29: aload         4
      31: invokevirtual #70                 // Method org/jumpmind/symmetric/db/AbstractTriggerTemplate.createCsvPrimaryKeySql:(Lorg/jumpmind/symmetric/model/Trigger;Lorg/jumpmind/symmetric/model/TriggerHistory;Lorg/jumpmind/db/model/Table;Lorg/jumpmind/symmetric/model/Channel;Ljava/lang/String;)Ljava/lang/String;
      34: invokevirtual #60                 // Method java/lang/String.trim:()Ljava/lang/String;
      37: areturn

  public java.util.Set<java.lang.String> getSqlKeywords();
    Code:
       0: aload_0
       1: getfield      #71                 // Field sqlKeywords:Ljava/util/Set;
       4: ifnonnull     25
       7: aload_0
       8: aload_0
       9: getfield      #10                 // Field platform:Lorg/jumpmind/db/platform/IDatabasePlatform;
      12: invokeinterface #14,  1           // InterfaceMethod org/jumpmind/db/platform/IDatabasePlatform.getSqlTemplate:()Lorg/jumpmind/db/sql/ISqlTemplate;
      17: invokeinterface #72,  1           // InterfaceMethod org/jumpmind/db/sql/ISqlTemplate.getSqlKeywords:()Ljava/util/Set;
      22: putfield      #71                 // Field sqlKeywords:Ljava/util/Set;
      25: aload_0
      26: getfield      #71                 // Field sqlKeywords:Ljava/util/Set;
      29: areturn

  public void removeTrigger(java.lang.StringBuilder, java.lang.String, java.lang.String, java.lang.String, java.lang.String, org.jumpmind.symmetric.model.TriggerHistory);
    Code:
       0: aload_3
       1: ifnonnull     9
       4: ldc           #73                 // String
       6: goto          28
       9: new           #27                 // class java/lang/StringBuilder
      12: dup
      13: invokespecial #48                 // Method java/lang/StringBuilder."<init>":()V
      16: aload_3
      17: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      20: ldc           #74                 // String .
      22: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      25: invokevirtual #34                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      28: astore_3
      29: new           #27                 // class java/lang/StringBuilder
      32: dup
      33: invokespecial #48                 // Method java/lang/StringBuilder."<init>":()V
      36: ldc           #75                 // String drop trigger
      38: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      41: aload_3
      42: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      45: aload         4
      47: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      50: invokevirtual #34                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      53: astore        7
      55: aload_0
      56: aload         7
      58: aload_1
      59: invokevirtual #76                 // Method logSql:(Ljava/lang/String;Ljava/lang/StringBuilder;)V
      62: aload_0
      63: getfield      #9                  // Field parameterService:Lorg/jumpmind/symmetric/service/IParameterService;
      66: ldc           #77                 // String auto.sync.triggers
      68: invokeinterface #78,  2           // InterfaceMethod org/jumpmind/symmetric/service/IParameterService.is:(Ljava/lang/String;)Z
      73: ifeq          113
      76: aload_0
      77: getfield      #10                 // Field platform:Lorg/jumpmind/db/platform/IDatabasePlatform;
      80: invokeinterface #14,  1           // InterfaceMethod org/jumpmind/db/platform/IDatabasePlatform.getSqlTemplate:()Lorg/jumpmind/db/sql/ISqlTemplate;
      85: aload         7
      87: iconst_0
      88: anewarray     #53                 // class java/lang/Object
      91: invokeinterface #56,  3           // InterfaceMethod org/jumpmind/db/sql/ISqlTemplate.update:(Ljava/lang/String;[Ljava/lang/Object;)I
      96: pop
      97: goto          113
     100: astore        8
     102: aload_0
     103: getfield      #4                  // Field log:Lorg/slf4j/Logger;
     106: ldc           #79                 // String Trigger does not exist
     108: invokeinterface #80,  2           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;)V
     113: return
    Exception table:
       from    to  target type
          76    97   100   Class java/lang/Exception

  protected final void logSql(java.lang.String, java.lang.StringBuilder);
    Code:
       0: aload_2
       1: ifnull        37
       4: aload_1
       5: invokestatic  #81                 // Method org/apache/commons/lang/StringUtils.isNotBlank:(Ljava/lang/String;)Z
       8: ifeq          37
      11: aload_2
      12: aload_1
      13: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      16: pop
      17: aload_2
      18: ldc           #82                 // String line.separator
      20: invokestatic  #83                 // Method java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;
      23: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      26: pop
      27: aload_2
      28: ldc           #82                 // String line.separator
      30: invokestatic  #83                 // Method java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;
      33: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      36: pop
      37: return

  public void createTrigger(java.lang.StringBuilder, org.jumpmind.symmetric.io.data.DataEventType, org.jumpmind.symmetric.model.Trigger, org.jumpmind.symmetric.model.TriggerHistory, org.jumpmind.symmetric.model.Channel, java.lang.String, org.jumpmind.db.model.Table);
    Code:
       0: aload_0
       1: getfield      #4                  // Field log:Lorg/slf4j/Logger;
       4: ldc           #84                 // String Creating {} trigger for {}
       6: aload         4
       8: aload_2
       9: invokevirtual #85                 // Method org/jumpmind/symmetric/model/TriggerHistory.getTriggerNameForDmlType:(Lorg/jumpmind/symmetric/io/data/DataEventType;)Ljava/lang/String;
      12: aload_3
      13: invokevirtual #67                 // Method org/jumpmind/symmetric/model/Trigger.getSourceTableName:()Ljava/lang/String;
      16: invokeinterface #86,  4           // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      21: aconst_null
      22: astore        8
      24: aload_3
      25: invokevirtual #65                 // Method org/jumpmind/symmetric/model/Trigger.getSourceCatalogName:()Ljava/lang/String;
      28: astore        9
      30: aload_0
      31: getfield      #10                 // Field platform:Lorg/jumpmind/db/platform/IDatabasePlatform;
      34: invokeinterface #87,  1           // InterfaceMethod org/jumpmind/db/platform/IDatabasePlatform.getDefaultCatalog:()Ljava/lang/String;
      39: astore        10
      41: aload_0
      42: getfield      #10                 // Field platform:Lorg/jumpmind/db/platform/IDatabasePlatform;
      45: invokeinterface #51,  1           // InterfaceMethod org/jumpmind/db/platform/IDatabasePlatform.getDefaultSchema:()Ljava/lang/String;
      50: astore        11
      52: aload_0
      53: getfield      #46                 // Field triggerTemplate:Lorg/jumpmind/symmetric/db/AbstractTriggerTemplate;
      56: aload_2
      57: aload_3
      58: aload         4
      60: aload         5
      62: aload         6
      64: aload         7
      66: aload         10
      68: aload         11
      70: invokevirtual #88                 // Method org/jumpmind/symmetric/db/AbstractTriggerTemplate.createTriggerDDL:(Lorg/jumpmind/symmetric/io/data/DataEventType;Lorg/jumpmind/symmetric/model/Trigger;Lorg/jumpmind/symmetric/model/TriggerHistory;Lorg/jumpmind/symmetric/model/Channel;Ljava/lang/String;Lorg/jumpmind/db/model/Table;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      73: astore        12
      75: aload_0
      76: aload_2
      77: aload_3
      78: aload         4
      80: aload         5
      82: aload         6
      84: aload         7
      86: invokevirtual #89                 // Method createPostTriggerDDL:(Lorg/jumpmind/symmetric/io/data/DataEventType;Lorg/jumpmind/symmetric/model/Trigger;Lorg/jumpmind/symmetric/model/TriggerHistory;Lorg/jumpmind/symmetric/model/Channel;Ljava/lang/String;Lorg/jumpmind/db/model/Table;)Ljava/lang/String;
      89: astore        13
      91: aload_0
      92: getfield      #9                  // Field parameterService:Lorg/jumpmind/symmetric/service/IParameterService;
      95: ldc           #77                 // String auto.sync.triggers
      97: invokeinterface #78,  2           // InterfaceMethod org/jumpmind/symmetric/service/IParameterService.is:(Ljava/lang/String;)Z
     102: ifeq          303
     105: aconst_null
     106: astore        14
     108: aload_0
     109: getfield      #10                 // Field platform:Lorg/jumpmind/db/platform/IDatabasePlatform;
     112: invokeinterface #14,  1           // InterfaceMethod org/jumpmind/db/platform/IDatabasePlatform.getSqlTemplate:()Lorg/jumpmind/db/sql/ISqlTemplate;
     117: invokeinterface #90,  1           // InterfaceMethod org/jumpmind/db/sql/ISqlTemplate.startSqlTransaction:()Lorg/jumpmind/db/sql/ISqlTransaction;
     122: astore        14
     124: aload_0
     125: aload         9
     127: aload         14
     129: invokevirtual #91                 // Method switchCatalogForTriggerInstall:(Ljava/lang/String;Lorg/jumpmind/db/sql/ISqlTransaction;)Ljava/lang/String;
     132: astore        8
     134: aload_0
     135: getfield      #4                  // Field log:Lorg/slf4j/Logger;
     138: ldc           #92                 // String Running: {}
     140: aload         12
     142: invokeinterface #93,  3           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Object;)V
     147: aload         14
     149: aload         12
     151: invokeinterface #94,  2           // InterfaceMethod org/jumpmind/db/sql/ISqlTransaction.execute:(Ljava/lang/String;)I
     156: pop
     157: goto          178
     160: astore        15
     162: aload_0
     163: getfield      #4                  // Field log:Lorg/slf4j/Logger;
     166: ldc           #96                 // String Failed to create trigger: {}
     168: aload         12
     170: invokeinterface #97,  3           // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;Ljava/lang/Object;)V
     175: aload         15
     177: athrow
     178: aload         13
     180: invokestatic  #81                 // Method org/apache/commons/lang/StringUtils.isNotBlank:(Ljava/lang/String;)Z
     183: ifeq          217
     186: aload         14
     188: aload         13
     190: invokeinterface #94,  2           // InterfaceMethod org/jumpmind/db/sql/ISqlTransaction.execute:(Ljava/lang/String;)I
     195: pop
     196: goto          217
     199: astore        15
     201: aload_0
     202: getfield      #4                  // Field log:Lorg/slf4j/Logger;
     205: ldc           #98                 // String Failed to create post trigger: {}
     207: aload         13
     209: invokeinterface #97,  3           // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;Ljava/lang/Object;)V
     214: aload         15
     216: athrow
     217: aload         14
     219: invokeinterface #99,  1           // InterfaceMethod org/jumpmind/db/sql/ISqlTransaction.commit:()V
     224: jsr           250
     227: goto          303
     230: astore        15
     232: aload         14
     234: invokeinterface #100,  1          // InterfaceMethod org/jumpmind/db/sql/ISqlTransaction.rollback:()V
     239: aload         15
     241: athrow
     242: astore        16
     244: jsr           250
     247: aload         16
     249: athrow
     250: astore        17
     252: aload         9
     254: ifnull        276
     257: aload         9
     259: aload         8
     261: invokevirtual #101                // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
     264: ifne          276
     267: aload_0
     268: aload         8
     270: aload         14
     272: invokevirtual #91                 // Method switchCatalogForTriggerInstall:(Ljava/lang/String;Lorg/jumpmind/db/sql/ISqlTransaction;)Ljava/lang/String;
     275: pop
     276: jsr           290
     279: goto          301
     282: astore        18
     284: jsr           290
     287: aload         18
     289: athrow
     290: astore        19
     292: aload         14
     294: invokeinterface #102,  1          // InterfaceMethod org/jumpmind/db/sql/ISqlTransaction.close:()V
     299: ret           19
     301: ret           17
     303: aload_0
     304: aload         12
     306: aload_1
     307: invokevirtual #76                 // Method logSql:(Ljava/lang/String;Ljava/lang/StringBuilder;)V
     310: aload_0
     311: aload         13
     313: aload_1
     314: invokevirtual #76                 // Method logSql:(Ljava/lang/String;Ljava/lang/StringBuilder;)V
     317: return
    Exception table:
       from    to  target type
         134   157   160   Class org/jumpmind/db/sql/SqlException
         186   196   199   Class org/jumpmind/db/sql/SqlException
         108   224   230   Class org/jumpmind/db/sql/SqlException
         108   227   242   any
         230   247   242   any
         252   279   282   any
         282   287   282   any

  protected java.lang.String switchCatalogForTriggerInstall(java.lang.String, org.jumpmind.db.sql.ISqlTransaction);
    Code:
       0: aconst_null
       1: areturn

  protected java.lang.String createPostTriggerDDL(org.jumpmind.symmetric.io.data.DataEventType, org.jumpmind.symmetric.model.Trigger, org.jumpmind.symmetric.model.TriggerHistory, org.jumpmind.symmetric.model.Channel, java.lang.String, org.jumpmind.db.model.Table);
    Code:
       0: aload_0
       1: getfield      #46                 // Field triggerTemplate:Lorg/jumpmind/symmetric/db/AbstractTriggerTemplate;
       4: aload_1
       5: aload_2
       6: aload_3
       7: aload         4
       9: aload         5
      11: aload         6
      13: aload_0
      14: getfield      #10                 // Field platform:Lorg/jumpmind/db/platform/IDatabasePlatform;
      17: invokeinterface #87,  1           // InterfaceMethod org/jumpmind/db/platform/IDatabasePlatform.getDefaultCatalog:()Ljava/lang/String;
      22: aload_0
      23: getfield      #10                 // Field platform:Lorg/jumpmind/db/platform/IDatabasePlatform;
      26: invokeinterface #51,  1           // InterfaceMethod org/jumpmind/db/platform/IDatabasePlatform.getDefaultSchema:()Ljava/lang/String;
      31: invokevirtual #103                // Method org/jumpmind/symmetric/db/AbstractTriggerTemplate.createPostTriggerDDL:(Lorg/jumpmind/symmetric/io/data/DataEventType;Lorg/jumpmind/symmetric/model/Trigger;Lorg/jumpmind/symmetric/model/TriggerHistory;Lorg/jumpmind/symmetric/model/Channel;Ljava/lang/String;Lorg/jumpmind/db/model/Table;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      34: areturn

  public java.lang.String getCreateSymmetricDDL();
    Code:
       0: aload_0
       1: invokevirtual #104                // Method readSymmetricSchemaFromXml:()Lorg/jumpmind/db/model/Database;
       4: astore_1
       5: aload_0
       6: aload_1
       7: invokevirtual #105                // Method prefixConfigDatabase:(Lorg/jumpmind/db/model/Database;)V
      10: aload_0
      11: getfield      #10                 // Field platform:Lorg/jumpmind/db/platform/IDatabasePlatform;
      14: invokeinterface #106,  1          // InterfaceMethod org/jumpmind/db/platform/IDatabasePlatform.getDdlBuilder:()Lorg/jumpmind/db/platform/IDdlBuilder;
      19: astore_2
      20: aload_2
      21: aload_1
      22: iconst_1
      23: invokeinterface #107,  3          // InterfaceMethod org/jumpmind/db/platform/IDdlBuilder.createTables:(Lorg/jumpmind/db/model/Database;Z)Ljava/lang/String;
      28: areturn

  public java.lang.String getCreateTableSQL(org.jumpmind.symmetric.model.TriggerRouter);
    Code:
       0: aload_0
       1: getfield      #10                 // Field platform:Lorg/jumpmind/db/platform/IDatabasePlatform;
       4: aconst_null
       5: aload_1
       6: invokevirtual #108                // Method org/jumpmind/symmetric/model/TriggerRouter.getTrigger:()Lorg/jumpmind/symmetric/model/Trigger;
       9: invokevirtual #66                 // Method org/jumpmind/symmetric/model/Trigger.getSourceSchemaName:()Ljava/lang/String;
      12: aload_1
      13: invokevirtual #108                // Method org/jumpmind/symmetric/model/TriggerRouter.getTrigger:()Lorg/jumpmind/symmetric/model/Trigger;
      16: invokevirtual #67                 // Method org/jumpmind/symmetric/model/Trigger.getSourceTableName:()Ljava/lang/String;
      19: iconst_0
      20: invokeinterface #68,  5           // InterfaceMethod org/jumpmind/db/platform/IDatabasePlatform.getTableFromCache:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)Lorg/jumpmind/db/model/Table;
      25: astore_2
      26: aload_0
      27: getfield      #10                 // Field platform:Lorg/jumpmind/db/platform/IDatabasePlatform;
      30: invokeinterface #106,  1          // InterfaceMethod org/jumpmind/db/platform/IDatabasePlatform.getDdlBuilder:()Lorg/jumpmind/db/platform/IDdlBuilder;
      35: aload_2
      36: invokeinterface #109,  2          // InterfaceMethod org/jumpmind/db/platform/IDdlBuilder.createTable:(Lorg/jumpmind/db/model/Table;)Ljava/lang/String;
      41: areturn

  private void setDatabaseName(org.jumpmind.symmetric.model.TriggerRouter, org.jumpmind.db.model.Database);
    Code:
       0: aload_2
       1: aload_1
       2: aload_0
       3: getfield      #10                 // Field platform:Lorg/jumpmind/db/platform/IDatabasePlatform;
       6: invokeinterface #51,  1           // InterfaceMethod org/jumpmind/db/platform/IDatabasePlatform.getDefaultSchema:()Ljava/lang/String;
      11: invokevirtual #110                // Method org/jumpmind/symmetric/model/TriggerRouter.getTargetSchema:(Ljava/lang/String;)Ljava/lang/String;
      14: invokevirtual #111                // Method org/jumpmind/db/model/Database.setName:(Ljava/lang/String;)V
      17: aload_2
      18: invokevirtual #112                // Method org/jumpmind/db/model/Database.getName:()Ljava/lang/String;
      21: ifnonnull     37
      24: aload_2
      25: aload_0
      26: getfield      #10                 // Field platform:Lorg/jumpmind/db/platform/IDatabasePlatform;
      29: invokeinterface #87,  1           // InterfaceMethod org/jumpmind/db/platform/IDatabasePlatform.getDefaultCatalog:()Ljava/lang/String;
      34: invokevirtual #111                // Method org/jumpmind/db/model/Database.setName:(Ljava/lang/String;)V
      37: aload_2
      38: invokevirtual #112                // Method org/jumpmind/db/model/Database.getName:()Ljava/lang/String;
      41: ifnonnull     50
      44: aload_2
      45: ldc           #113                // String DDL
      47: invokevirtual #111                // Method org/jumpmind/db/model/Database.setName:(Ljava/lang/String;)V
      50: return

  public java.lang.String getCreateTableXML(org.jumpmind.symmetric.model.TriggerRouter);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #108                // Method org/jumpmind/symmetric/model/TriggerRouter.getTrigger:()Lorg/jumpmind/symmetric/model/Trigger;
       5: iconst_1
       6: invokevirtual #114                // Method getTable:(Lorg/jumpmind/symmetric/model/Trigger;Z)Lorg/jumpmind/db/model/Table;
       9: astore_2
      10: aload_1
      11: invokevirtual #115                // Method org/jumpmind/symmetric/model/TriggerRouter.getRouter:()Lorg/jumpmind/symmetric/model/Router;
      14: invokevirtual #116                // Method org/jumpmind/symmetric/model/Router.getTargetTableName:()Ljava/lang/String;
      17: astore_3
      18: aload_3
      19: invokestatic  #81                 // Method org/apache/commons/lang/StringUtils.isNotBlank:(Ljava/lang/String;)Z
      22: ifeq          30
      25: aload_2
      26: aload_3
      27: invokevirtual #117                // Method org/jumpmind/db/model/Table.setName:(Ljava/lang/String;)V
      30: new           #118                // class org/jumpmind/db/model/Database
      33: dup
      34: invokespecial #119                // Method org/jumpmind/db/model/Database."<init>":()V
      37: astore        4
      39: aload_0
      40: aload_1
      41: aload         4
      43: invokespecial #120                // Method setDatabaseName:(Lorg/jumpmind/symmetric/model/TriggerRouter;Lorg/jumpmind/db/model/Database;)V
      46: aload         4
      48: aload_2
      49: invokevirtual #121                // Method org/jumpmind/db/model/Database.addTable:(Lorg/jumpmind/db/model/Table;)V
      52: new           #122                // class java/io/StringWriter
      55: dup
      56: invokespecial #123                // Method java/io/StringWriter."<init>":()V
      59: astore        5
      61: new           #124                // class org/jumpmind/db/io/DatabaseIO
      64: dup
      65: invokespecial #125                // Method org/jumpmind/db/io/DatabaseIO."<init>":()V
      68: astore        6
      70: aload         6
      72: aload         4
      74: aload         5
      76: invokevirtual #126                // Method org/jumpmind/db/io/DatabaseIO.write:(Lorg/jumpmind/db/model/Database;Ljava/io/Writer;)V
      79: aload         5
      81: invokevirtual #127                // Method java/io/StringWriter.toString:()Ljava/lang/String;
      84: ldc           #128                // String &apos;
      86: ldc           #73                 // String
      88: invokevirtual #129                // Method java/lang/String.replaceAll:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      91: astore        7
      93: aload         7
      95: ldc           #130                // String default=\"empty_blob\\(\\) *\"
      97: ldc           #73                 // String
      99: invokevirtual #129                // Method java/lang/String.replaceAll:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
     102: astore        7
     104: aload         7
     106: ldc           #131                // String unique name=\"PRIMARY\"
     108: ldc           #132                // String unique name=\"PRIMARYINDEX\"
     110: invokevirtual #129                // Method java/lang/String.replaceAll:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
     113: astore        7
     115: aload         7
     117: ldc           #133                // String type=\"VARCHAR\" size=\"2147483647\"
     119: ldc           #134                // String type=\"LONGVARCHAR\"
     121: invokevirtual #129                // Method java/lang/String.replaceAll:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
     124: astore        7
     126: aload         7
     128: ldc           #135                // String type=\"BINARY\" size=\"2147483647\"
     130: ldc           #136                // String type=\"LONGVARBINARY\"
     132: invokevirtual #129                // Method java/lang/String.replaceAll:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
     135: astore        7
     137: aload         7
     139: areturn

  protected void prefixConfigDatabase(org.jumpmind.db.model.Database);
    Code:
       0: new           #27                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #48                 // Method java/lang/StringBuilder."<init>":()V
       7: aload_0
       8: getfield      #9                  // Field parameterService:Lorg/jumpmind/symmetric/service/IParameterService;
      11: invokeinterface #49,  1           // InterfaceMethod org/jumpmind/symmetric/service/IParameterService.getTablePrefix:()Ljava/lang/String;
      16: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      19: aload_0
      20: getfield      #9                  // Field parameterService:Lorg/jumpmind/symmetric/service/IParameterService;
      23: invokeinterface #49,  1           // InterfaceMethod org/jumpmind/symmetric/service/IParameterService.getTablePrefix:()Ljava/lang/String;
      28: invokestatic  #81                 // Method org/apache/commons/lang/StringUtils.isNotBlank:(Ljava/lang/String;)Z
      31: ifeq          39
      34: ldc           #50                 // String _
      36: goto          41
      39: ldc           #73                 // String
      41: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      44: invokevirtual #34                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      47: astore_2
      48: aload_1
      49: invokevirtual #137                // Method org/jumpmind/db/model/Database.getTables:()[Lorg/jumpmind/db/model/Table;
      52: astore_3
      53: aload_0
      54: getfield      #10                 // Field platform:Lorg/jumpmind/db/platform/IDatabasePlatform;
      57: invokeinterface #138,  1          // InterfaceMethod org/jumpmind/db/platform/IDatabasePlatform.isStoresUpperCaseIdentifiers:()Z
      62: istore        4
      64: aload_3
      65: astore        5
      67: aload         5
      69: arraylength
      70: istore        6
      72: iconst_0
      73: istore        7
      75: iload         7
      77: iload         6
      79: if_icmpge     167
      82: aload         5
      84: iload         7
      86: aaload
      87: astore        8
      89: ldc           #139                // String %s%s
      91: iconst_2
      92: anewarray     #53                 // class java/lang/Object
      95: dup
      96: iconst_0
      97: aload_2
      98: aastore
      99: dup
     100: iconst_1
     101: aload         8
     103: invokevirtual #140                // Method org/jumpmind/db/model/Table.getName:()Ljava/lang/String;
     106: aastore
     107: invokestatic  #64                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
     110: astore        9
     112: aload         8
     114: iload         4
     116: ifeq          127
     119: aload         9
     121: invokevirtual #141                // Method java/lang/String.toUpperCase:()Ljava/lang/String;
     124: goto          132
     127: aload         9
     129: invokevirtual #142                // Method java/lang/String.toLowerCase:()Ljava/lang/String;
     132: invokevirtual #117                // Method org/jumpmind/db/model/Table.setName:(Ljava/lang/String;)V
     135: aload_0
     136: aload         8
     138: aload_2
     139: iload         4
     141: invokevirtual #143                // Method fixForeignKeys:(Lorg/jumpmind/db/model/Table;Ljava/lang/String;Z)V
     144: aload_0
     145: aload         8
     147: aload_2
     148: iload         4
     150: invokevirtual #144                // Method fixIndexes:(Lorg/jumpmind/db/model/Table;Ljava/lang/String;Z)V
     153: aload_0
     154: aload         8
     156: iload         4
     158: invokevirtual #145                // Method fixColumnNames:(Lorg/jumpmind/db/model/Table;Z)V
     161: iinc          7, 1
     164: goto          75
     167: goto          180
     170: astore_2
     171: new           #147                // class java/lang/RuntimeException
     174: dup
     175: aload_2
     176: invokespecial #148                // Method java/lang/RuntimeException."<init>":(Ljava/lang/Throwable;)V
     179: athrow
     180: return
    Exception table:
       from    to  target type
           0   167   170   Class java/lang/CloneNotSupportedException

  public org.jumpmind.db.model.Table getTable(org.jumpmind.symmetric.model.Trigger, boolean);
    Code:
       0: aload_0
       1: getfield      #10                 // Field platform:Lorg/jumpmind/db/platform/IDatabasePlatform;
       4: aload_1
       5: invokevirtual #65                 // Method org/jumpmind/symmetric/model/Trigger.getSourceCatalogName:()Ljava/lang/String;
       8: aload_1
       9: invokevirtual #66                 // Method org/jumpmind/symmetric/model/Trigger.getSourceSchemaName:()Ljava/lang/String;
      12: aload_1
      13: invokevirtual #67                 // Method org/jumpmind/symmetric/model/Trigger.getSourceTableName:()Ljava/lang/String;
      16: iload_2
      17: ifne          24
      20: iconst_1
      21: goto          25
      24: iconst_0
      25: invokeinterface #68,  5           // InterfaceMethod org/jumpmind/db/platform/IDatabasePlatform.getTableFromCache:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)Lorg/jumpmind/db/model/Table;
      30: areturn

  public boolean createOrAlterTablesIfNecessary();
    Code:
       0: aload_0
       1: invokevirtual #104                // Method readSymmetricSchemaFromXml:()Lorg/jumpmind/db/model/Database;
       4: astore_1
       5: aload_0
       6: getfield      #9                  // Field parameterService:Lorg/jumpmind/symmetric/service/IParameterService;
       9: ldc           #149                // String auto.config.extra.tables.ddlutil.xml
      11: invokeinterface #62,  2           // InterfaceMethod org/jumpmind/symmetric/service/IParameterService.getString:(Ljava/lang/String;)Ljava/lang/String;
      16: astore_2
      17: aload_2
      18: invokestatic  #81                 // Method org/apache/commons/lang/StringUtils.isNotBlank:(Ljava/lang/String;)Z
      21: ifeq          63
      24: aload_0
      25: iconst_2
      26: anewarray     #118                // class org/jumpmind/db/model/Database
      29: dup
      30: iconst_0
      31: aload_1
      32: aastore
      33: dup
      34: iconst_1
      35: aload_0
      36: aload_2
      37: invokevirtual #150                // Method readDatabaseFromXml:(Ljava/lang/String;)Lorg/jumpmind/db/model/Database;
      40: aastore
      41: invokevirtual #151                // Method merge:([Lorg/jumpmind/db/model/Database;)Lorg/jumpmind/db/model/Database;
      44: astore_1
      45: goto          63
      48: astore_3
      49: aload_0
      50: getfield      #4                  // Field log:Lorg/slf4j/Logger;
      53: aload_3
      54: invokevirtual #152                // Method java/lang/Exception.getMessage:()Ljava/lang/String;
      57: aload_3
      58: invokeinterface #153,  3          // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;Ljava/lang/Throwable;)V
      63: aload_0
      64: getfield      #4                  // Field log:Lorg/slf4j/Logger;
      67: ldc           #154                // String Checking if SymmetricDS tables need created or altered
      69: invokeinterface #155,  2          // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;)V
      74: new           #118                // class org/jumpmind/db/model/Database
      77: dup
      78: invokespecial #119                // Method org/jumpmind/db/model/Database."<init>":()V
      81: astore_3
      82: aload_1
      83: invokevirtual #137                // Method org/jumpmind/db/model/Database.getTables:()[Lorg/jumpmind/db/model/Table;
      86: astore        4
      88: aload         4
      90: astore        5
      92: aload         5
      94: arraylength
      95: istore        6
      97: iconst_0
      98: istore        7
     100: iload         7
     102: iload         6
     104: if_icmpge     166
     107: aload         5
     109: iload         7
     111: aaload
     112: astore        8
     114: aload_0
     115: getfield      #10                 // Field platform:Lorg/jumpmind/db/platform/IDatabasePlatform;
     118: aload_0
     119: getfield      #10                 // Field platform:Lorg/jumpmind/db/platform/IDatabasePlatform;
     122: invokeinterface #87,  1           // InterfaceMethod org/jumpmind/db/platform/IDatabasePlatform.getDefaultCatalog:()Ljava/lang/String;
     127: aload_0
     128: getfield      #10                 // Field platform:Lorg/jumpmind/db/platform/IDatabasePlatform;
     131: invokeinterface #51,  1           // InterfaceMethod org/jumpmind/db/platform/IDatabasePlatform.getDefaultSchema:()Ljava/lang/String;
     136: aload         8
     138: invokevirtual #140                // Method org/jumpmind/db/model/Table.getName:()Ljava/lang/String;
     141: iconst_1
     142: invokeinterface #68,  5           // InterfaceMethod org/jumpmind/db/platform/IDatabasePlatform.getTableFromCache:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)Lorg/jumpmind/db/model/Table;
     147: astore        9
     149: aload         9
     151: ifnull        160
     154: aload_3
     155: aload         9
     157: invokevirtual #121                // Method org/jumpmind/db/model/Database.addTable:(Lorg/jumpmind/db/model/Table;)V
     160: iinc          7, 1
     163: goto          100
     166: aload_0
     167: getfield      #10                 // Field platform:Lorg/jumpmind/db/platform/IDatabasePlatform;
     170: invokeinterface #106,  1          // InterfaceMethod org/jumpmind/db/platform/IDatabasePlatform.getDdlBuilder:()Lorg/jumpmind/db/platform/IDdlBuilder;
     175: astore        5
     177: aload         5
     179: aload_3
     180: aload_1
     181: invokeinterface #156,  3          // InterfaceMethod org/jumpmind/db/platform/IDdlBuilder.isAlterDatabase:(Lorg/jumpmind/db/model/Database;Lorg/jumpmind/db/model/Database;)Z
     186: ifeq          478
     189: aload_0
     190: getfield      #4                  // Field log:Lorg/slf4j/Logger;
     193: ldc           #157                // String There are SymmetricDS tables that needed altered
     195: invokeinterface #155,  2          // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;)V
     200: aload_0
     201: getfield      #10                 // Field platform:Lorg/jumpmind/db/platform/IDatabasePlatform;
     204: invokeinterface #36,  1           // InterfaceMethod org/jumpmind/db/platform/IDatabasePlatform.getDatabaseInfo:()Lorg/jumpmind/db/platform/DatabaseInfo;
     209: invokevirtual #158                // Method org/jumpmind/db/platform/DatabaseInfo.getSqlCommandDelimiter:()Ljava/lang/String;
     212: astore        6
     214: aload_0
     215: getfield      #8                  // Field databaseUpgradeListeners:Ljava/util/List;
     218: invokeinterface #159,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
     223: astore        7
     225: aload         7
     227: invokeinterface #160,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
     232: ifeq          309
     235: aload         7
     237: invokeinterface #161,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     242: checkcast     #162                // class org/jumpmind/symmetric/ext/IDatabaseUpgradeListener
     245: astore        8
     247: aload         8
     249: aload_0
     250: aload_0
     251: getfield      #9                  // Field parameterService:Lorg/jumpmind/symmetric/service/IParameterService;
     254: invokeinterface #49,  1           // InterfaceMethod org/jumpmind/symmetric/service/IParameterService.getTablePrefix:()Ljava/lang/String;
     259: aload_3
     260: aload_1
     261: invokeinterface #163,  5          // InterfaceMethod org/jumpmind/symmetric/ext/IDatabaseUpgradeListener.beforeUpgrade:(Lorg/jumpmind/symmetric/db/ISymmetricDialect;Ljava/lang/String;Lorg/jumpmind/db/model/Database;Lorg/jumpmind/db/model/Database;)Ljava/lang/String;
     266: astore        9
     268: new           #164                // class org/jumpmind/db/sql/SqlScript
     271: dup
     272: aload         9
     274: aload_0
     275: invokevirtual #35                 // Method getPlatform:()Lorg/jumpmind/db/platform/IDatabasePlatform;
     278: invokeinterface #14,  1           // InterfaceMethod org/jumpmind/db/platform/IDatabasePlatform.getSqlTemplate:()Lorg/jumpmind/db/sql/ISqlTemplate;
     283: iconst_1
     284: aload         6
     286: aconst_null
     287: invokespecial #165                // Method org/jumpmind/db/sql/SqlScript."<init>":(Ljava/lang/String;Lorg/jumpmind/db/sql/ISqlTemplate;ZLjava/lang/String;Ljava/util/Map;)V
     290: aload_0
     291: getfield      #10                 // Field platform:Lorg/jumpmind/db/platform/IDatabasePlatform;
     294: invokeinterface #36,  1           // InterfaceMethod org/jumpmind/db/platform/IDatabasePlatform.getDatabaseInfo:()Lorg/jumpmind/db/platform/DatabaseInfo;
     299: invokevirtual #166                // Method org/jumpmind/db/platform/DatabaseInfo.isRequiresAutoCommitForDdl:()Z
     302: invokevirtual #167                // Method org/jumpmind/db/sql/SqlScript.execute:(Z)J
     305: pop2
     306: goto          225
     309: aload         5
     311: aload_3
     312: aload_1
     313: invokeinterface #168,  3          // InterfaceMethod org/jumpmind/db/platform/IDdlBuilder.alterDatabase:(Lorg/jumpmind/db/model/Database;Lorg/jumpmind/db/model/Database;)Ljava/lang/String;
     318: astore        7
     320: aload_0
     321: getfield      #4                  // Field log:Lorg/slf4j/Logger;
     324: ldc           #169                // String Alter SQL Generated: {}
     326: aload         7
     328: invokeinterface #13,  3           // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;Ljava/lang/Object;)V
     333: new           #164                // class org/jumpmind/db/sql/SqlScript
     336: dup
     337: aload         7
     339: aload_0
     340: invokevirtual #35                 // Method getPlatform:()Lorg/jumpmind/db/platform/IDatabasePlatform;
     343: invokeinterface #14,  1           // InterfaceMethod org/jumpmind/db/platform/IDatabasePlatform.getSqlTemplate:()Lorg/jumpmind/db/sql/ISqlTemplate;
     348: iconst_1
     349: aload         6
     351: aconst_null
     352: invokespecial #165                // Method org/jumpmind/db/sql/SqlScript."<init>":(Ljava/lang/String;Lorg/jumpmind/db/sql/ISqlTemplate;ZLjava/lang/String;Ljava/util/Map;)V
     355: aload_0
     356: getfield      #10                 // Field platform:Lorg/jumpmind/db/platform/IDatabasePlatform;
     359: invokeinterface #36,  1           // InterfaceMethod org/jumpmind/db/platform/IDatabasePlatform.getDatabaseInfo:()Lorg/jumpmind/db/platform/DatabaseInfo;
     364: invokevirtual #166                // Method org/jumpmind/db/platform/DatabaseInfo.isRequiresAutoCommitForDdl:()Z
     367: invokevirtual #167                // Method org/jumpmind/db/sql/SqlScript.execute:(Z)J
     370: pop2
     371: aload_0
     372: getfield      #8                  // Field databaseUpgradeListeners:Ljava/util/List;
     375: invokeinterface #159,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
     380: astore        8
     382: aload         8
     384: invokeinterface #160,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
     389: ifeq          465
     392: aload         8
     394: invokeinterface #161,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     399: checkcast     #162                // class org/jumpmind/symmetric/ext/IDatabaseUpgradeListener
     402: astore        9
     404: aload         9
     406: aload_0
     407: aload_0
     408: getfield      #9                  // Field parameterService:Lorg/jumpmind/symmetric/service/IParameterService;
     411: invokeinterface #49,  1           // InterfaceMethod org/jumpmind/symmetric/service/IParameterService.getTablePrefix:()Ljava/lang/String;
     416: aload_1
     417: invokeinterface #170,  4          // InterfaceMethod org/jumpmind/symmetric/ext/IDatabaseUpgradeListener.afterUpgrade:(Lorg/jumpmind/symmetric/db/ISymmetricDialect;Ljava/lang/String;Lorg/jumpmind/db/model/Database;)Ljava/lang/String;
     422: astore        10
     424: new           #164                // class org/jumpmind/db/sql/SqlScript
     427: dup
     428: aload         10
     430: aload_0
     431: invokevirtual #35                 // Method getPlatform:()Lorg/jumpmind/db/platform/IDatabasePlatform;
     434: invokeinterface #14,  1           // InterfaceMethod org/jumpmind/db/platform/IDatabasePlatform.getSqlTemplate:()Lorg/jumpmind/db/sql/ISqlTemplate;
     439: iconst_1
     440: aload         6
     442: aconst_null
     443: invokespecial #165                // Method org/jumpmind/db/sql/SqlScript."<init>":(Ljava/lang/String;Lorg/jumpmind/db/sql/ISqlTemplate;ZLjava/lang/String;Ljava/util/Map;)V
     446: aload_0
     447: getfield      #10                 // Field platform:Lorg/jumpmind/db/platform/IDatabasePlatform;
     450: invokeinterface #36,  1           // InterfaceMethod org/jumpmind/db/platform/IDatabasePlatform.getDatabaseInfo:()Lorg/jumpmind/db/platform/DatabaseInfo;
     455: invokevirtual #166                // Method org/jumpmind/db/platform/DatabaseInfo.isRequiresAutoCommitForDdl:()Z
     458: invokevirtual #167                // Method org/jumpmind/db/sql/SqlScript.execute:(Z)J
     461: pop2
     462: goto          382
     465: aload_0
     466: getfield      #4                  // Field log:Lorg/slf4j/Logger;
     469: ldc           #171                // String Done with auto update of SymmetricDS tables
     471: invokeinterface #155,  2          // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;)V
     476: iconst_1
     477: ireturn
     478: iconst_0
     479: ireturn
     480: astore_3
     481: aload_3
     482: athrow
     483: astore_3
     484: new           #147                // class java/lang/RuntimeException
     487: dup
     488: aload_3
     489: invokespecial #148                // Method java/lang/RuntimeException."<init>":(Ljava/lang/Throwable;)V
     492: athrow
    Exception table:
       from    to  target type
          24    45    48   Class java/lang/Exception
          63   477   480   Class java/lang/RuntimeException
         478   479   480   Class java/lang/RuntimeException
          63   477   483   Class java/lang/Exception
         478   479   483   Class java/lang/Exception

  protected org.jumpmind.db.model.Database readSymmetricSchemaFromXml();
    Code:
       0: aload_0
       1: iconst_2
       2: anewarray     #118                // class org/jumpmind/db/model/Database
       5: dup
       6: iconst_0
       7: aload_0
       8: ldc           #172                // String /symmetric-schema.xml
      10: invokevirtual #150                // Method readDatabaseFromXml:(Ljava/lang/String;)Lorg/jumpmind/db/model/Database;
      13: aastore
      14: dup
      15: iconst_1
      16: aload_0
      17: ldc           #173                // String /console-schema.xml
      19: invokevirtual #150                // Method readDatabaseFromXml:(Ljava/lang/String;)Lorg/jumpmind/db/model/Database;
      22: aastore
      23: invokevirtual #151                // Method merge:([Lorg/jumpmind/db/model/Database;)Lorg/jumpmind/db/model/Database;
      26: astore_1
      27: aload_0
      28: aload_1
      29: invokevirtual #105                // Method prefixConfigDatabase:(Lorg/jumpmind/db/model/Database;)V
      32: aload_1
      33: areturn
      34: astore_1
      35: aload_1
      36: athrow
      37: astore_1
      38: new           #147                // class java/lang/RuntimeException
      41: dup
      42: aload_1
      43: invokespecial #148                // Method java/lang/RuntimeException."<init>":(Ljava/lang/Throwable;)V
      46: athrow
    Exception table:
       from    to  target type
           0    33    34   Class java/lang/RuntimeException
           0    33    37   Class java/lang/Exception

  protected org.jumpmind.db.model.Database readDatabaseFromXml(java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #10                 // Field platform:Lorg/jumpmind/db/platform/IDatabasePlatform;
       4: aload_1
       5: iconst_1
       6: invokeinterface #174,  3          // InterfaceMethod org/jumpmind/db/platform/IDatabasePlatform.readDatabaseFromXml:(Ljava/lang/String;Z)Lorg/jumpmind/db/model/Database;
      11: areturn
      12: astore_2
      13: new           #118                // class org/jumpmind/db/model/Database
      16: dup
      17: invokespecial #119                // Method org/jumpmind/db/model/Database."<init>":()V
      20: areturn
    Exception table:
       from    to  target type
           0    11    12   Class org/jumpmind/exception/IoException

  protected org.jumpmind.db.model.Database merge(org.jumpmind.db.model.Database...);
    Code:
       0: new           #118                // class org/jumpmind/db/model/Database
       3: dup
       4: invokespecial #119                // Method org/jumpmind/db/model/Database."<init>":()V
       7: astore_2
       8: aload_1
       9: ifnull        85
      12: aload_1
      13: astore_3
      14: aload_3
      15: arraylength
      16: istore        4
      18: iconst_0
      19: istore        5
      21: iload         5
      23: iload         4
      25: if_icmpge     85
      28: aload_3
      29: iload         5
      31: aaload
      32: astore        6
      34: aload         6
      36: invokevirtual #137                // Method org/jumpmind/db/model/Database.getTables:()[Lorg/jumpmind/db/model/Table;
      39: astore        7
      41: aload         7
      43: astore        8
      45: aload         8
      47: arraylength
      48: istore        9
      50: iconst_0
      51: istore        10
      53: iload         10
      55: iload         9
      57: if_icmpge     79
      60: aload         8
      62: iload         10
      64: aaload
      65: astore        11
      67: aload_2
      68: aload         11
      70: invokevirtual #121                // Method org/jumpmind/db/model/Database.addTable:(Lorg/jumpmind/db/model/Table;)V
      73: iinc          10, 1
      76: goto          53
      79: iinc          5, 1
      82: goto          21
      85: aload_2
      86: areturn

  protected void fixColumnNames(org.jumpmind.db.model.Table, boolean);
    Code:
       0: aload_1
       1: invokevirtual #176                // Method org/jumpmind/db/model/Table.getColumns:()[Lorg/jumpmind/db/model/Column;
       4: astore_3
       5: aload_3
       6: astore        4
       8: aload         4
      10: arraylength
      11: istore        5
      13: iconst_0
      14: istore        6
      16: iload         6
      18: iload         5
      20: if_icmpge     64
      23: aload         4
      25: iload         6
      27: aaload
      28: astore        7
      30: aload         7
      32: iload_2
      33: ifeq          47
      36: aload         7
      38: invokevirtual #177                // Method org/jumpmind/db/model/Column.getName:()Ljava/lang/String;
      41: invokevirtual #141                // Method java/lang/String.toUpperCase:()Ljava/lang/String;
      44: goto          55
      47: aload         7
      49: invokevirtual #177                // Method org/jumpmind/db/model/Column.getName:()Ljava/lang/String;
      52: invokevirtual #142                // Method java/lang/String.toLowerCase:()Ljava/lang/String;
      55: invokevirtual #178                // Method org/jumpmind/db/model/Column.setName:(Ljava/lang/String;)V
      58: iinc          6, 1
      61: goto          16
      64: return

  protected void fixForeignKeys(org.jumpmind.db.model.Table, java.lang.String, boolean) throws java.lang.CloneNotSupportedException;
    Code:
       0: aload_1
       1: invokevirtual #179                // Method org/jumpmind/db/model/Table.getForeignKeys:()[Lorg/jumpmind/db/model/ForeignKey;
       4: astore        4
       6: aload         4
       8: astore        5
      10: aload         5
      12: arraylength
      13: istore        6
      15: iconst_0
      16: istore        7
      18: iload         7
      20: iload         6
      22: if_icmpge     233
      25: aload         5
      27: iload         7
      29: aaload
      30: astore        8
      32: new           #27                 // class java/lang/StringBuilder
      35: dup
      36: invokespecial #48                 // Method java/lang/StringBuilder."<init>":()V
      39: aload_2
      40: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      43: aload         8
      45: invokevirtual #180                // Method org/jumpmind/db/model/ForeignKey.getForeignTableName:()Ljava/lang/String;
      48: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      51: invokevirtual #34                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      54: astore        9
      56: iload_3
      57: ifeq          68
      60: aload         9
      62: invokevirtual #141                // Method java/lang/String.toUpperCase:()Ljava/lang/String;
      65: goto          73
      68: aload         9
      70: invokevirtual #142                // Method java/lang/String.toLowerCase:()Ljava/lang/String;
      73: astore        9
      75: aload         8
      77: aload         9
      79: invokevirtual #181                // Method org/jumpmind/db/model/ForeignKey.setForeignTableName:(Ljava/lang/String;)V
      82: new           #27                 // class java/lang/StringBuilder
      85: dup
      86: invokespecial #48                 // Method java/lang/StringBuilder."<init>":()V
      89: aload_2
      90: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      93: aload         8
      95: invokevirtual #182                // Method org/jumpmind/db/model/ForeignKey.getName:()Ljava/lang/String;
      98: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     101: invokevirtual #34                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     104: astore        10
     106: iload_3
     107: ifeq          118
     110: aload         10
     112: invokevirtual #141                // Method java/lang/String.toUpperCase:()Ljava/lang/String;
     115: goto          123
     118: aload         10
     120: invokevirtual #142                // Method java/lang/String.toLowerCase:()Ljava/lang/String;
     123: astore        10
     125: aload         8
     127: aload         10
     129: invokevirtual #183                // Method org/jumpmind/db/model/ForeignKey.setName:(Ljava/lang/String;)V
     132: aload         8
     134: invokevirtual #184                // Method org/jumpmind/db/model/ForeignKey.getReferences:()[Lorg/jumpmind/db/model/Reference;
     137: astore        11
     139: aload         11
     141: astore        12
     143: aload         12
     145: arraylength
     146: istore        13
     148: iconst_0
     149: istore        14
     151: iload         14
     153: iload         13
     155: if_icmpge     227
     158: aload         12
     160: iload         14
     162: aaload
     163: astore        15
     165: aload         15
     167: iload_3
     168: ifeq          182
     171: aload         15
     173: invokevirtual #185                // Method org/jumpmind/db/model/Reference.getForeignColumnName:()Ljava/lang/String;
     176: invokevirtual #141                // Method java/lang/String.toUpperCase:()Ljava/lang/String;
     179: goto          190
     182: aload         15
     184: invokevirtual #185                // Method org/jumpmind/db/model/Reference.getForeignColumnName:()Ljava/lang/String;
     187: invokevirtual #142                // Method java/lang/String.toLowerCase:()Ljava/lang/String;
     190: invokevirtual #186                // Method org/jumpmind/db/model/Reference.setForeignColumnName:(Ljava/lang/String;)V
     193: aload         15
     195: iload_3
     196: ifeq          210
     199: aload         15
     201: invokevirtual #187                // Method org/jumpmind/db/model/Reference.getLocalColumnName:()Ljava/lang/String;
     204: invokevirtual #141                // Method java/lang/String.toUpperCase:()Ljava/lang/String;
     207: goto          218
     210: aload         15
     212: invokevirtual #187                // Method org/jumpmind/db/model/Reference.getLocalColumnName:()Ljava/lang/String;
     215: invokevirtual #142                // Method java/lang/String.toLowerCase:()Ljava/lang/String;
     218: invokevirtual #188                // Method org/jumpmind/db/model/Reference.setLocalColumnName:(Ljava/lang/String;)V
     221: iinc          14, 1
     224: goto          151
     227: iinc          7, 1
     230: goto          18
     233: return

  protected void fixIndexes(org.jumpmind.db.model.Table, java.lang.String, boolean) throws java.lang.CloneNotSupportedException;
    Code:
       0: aload_1
       1: invokevirtual #189                // Method org/jumpmind/db/model/Table.getIndices:()[Lorg/jumpmind/db/model/IIndex;
       4: astore        4
       6: aload         4
       8: ifnull        97
      11: aload         4
      13: astore        5
      15: aload         5
      17: arraylength
      18: istore        6
      20: iconst_0
      21: istore        7
      23: iload         7
      25: iload         6
      27: if_icmpge     97
      30: aload         5
      32: iload         7
      34: aaload
      35: astore        8
      37: new           #27                 // class java/lang/StringBuilder
      40: dup
      41: invokespecial #48                 // Method java/lang/StringBuilder."<init>":()V
      44: aload_2
      45: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      48: aload         8
      50: invokeinterface #190,  1          // InterfaceMethod org/jumpmind/db/model/IIndex.getName:()Ljava/lang/String;
      55: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      58: invokevirtual #34                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      61: astore        9
      63: iload_3
      64: ifeq          75
      67: aload         9
      69: invokevirtual #141                // Method java/lang/String.toUpperCase:()Ljava/lang/String;
      72: goto          80
      75: aload         9
      77: invokevirtual #142                // Method java/lang/String.toLowerCase:()Ljava/lang/String;
      80: astore        9
      82: aload         8
      84: aload         9
      86: invokeinterface #191,  2          // InterfaceMethod org/jumpmind/db/model/IIndex.setName:(Ljava/lang/String;)V
      91: iinc          7, 1
      94: goto          23
      97: return

  public org.jumpmind.db.platform.IDatabasePlatform getPlatform();
    Code:
       0: aload_0
       1: getfield      #10                 // Field platform:Lorg/jumpmind/db/platform/IDatabasePlatform;
       4: areturn

  public java.lang.String getName();
    Code:
       0: aload_0
       1: getfield      #20                 // Field databaseName:Ljava/lang/String;
       4: areturn

  public java.lang.String getVersion();
    Code:
       0: new           #27                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #48                 // Method java/lang/StringBuilder."<init>":()V
       7: aload_0
       8: getfield      #16                 // Field databaseMajorVersion:I
      11: invokevirtual #192                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      14: ldc           #74                 // String .
      16: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      19: aload_0
      20: getfield      #18                 // Field databaseMinorVersion:I
      23: invokevirtual #192                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      26: invokevirtual #34                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      29: areturn

  public int getMajorVersion();
    Code:
       0: aload_0
       1: getfield      #16                 // Field databaseMajorVersion:I
       4: ireturn

  public int getMinorVersion();
    Code:
       0: aload_0
       1: getfield      #18                 // Field databaseMinorVersion:I
       4: ireturn

  public java.lang.String getProductVersion();
    Code:
       0: aload_0
       1: getfield      #22                 // Field databaseProductVersion:Ljava/lang/String;
       4: areturn

  public boolean supportsTransactionViews();
    Code:
       0: aload_0
       1: getfield      #5                  // Field supportsTransactionViews:Z
       4: ireturn

  public long insertWithGeneratedKey(java.lang.String, org.jumpmind.symmetric.db.SequenceIdentifier);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iconst_2
       4: anewarray     #53                 // class java/lang/Object
       7: dup
       8: iconst_0
       9: aconst_null
      10: aastore
      11: dup
      12: iconst_1
      13: aconst_null
      14: aastore
      15: invokevirtual #193                // Method insertWithGeneratedKey:(Ljava/lang/String;Lorg/jumpmind/symmetric/db/SequenceIdentifier;[Ljava/lang/Object;)J
      18: lreturn

  public long insertWithGeneratedKey(java.lang.String, org.jumpmind.symmetric.db.SequenceIdentifier, java.lang.Object...);
    Code:
       0: aload_0
       1: getfield      #10                 // Field platform:Lorg/jumpmind/db/platform/IDatabasePlatform;
       4: invokeinterface #14,  1           // InterfaceMethod org/jumpmind/db/platform/IDatabasePlatform.getSqlTemplate:()Lorg/jumpmind/db/sql/ISqlTemplate;
       9: aload_1
      10: aload_0
      11: aload_2
      12: invokevirtual #194                // Method getSequenceKeyName:(Lorg/jumpmind/symmetric/db/SequenceIdentifier;)Ljava/lang/String;
      15: aload_0
      16: aload_2
      17: invokevirtual #194                // Method getSequenceKeyName:(Lorg/jumpmind/symmetric/db/SequenceIdentifier;)Ljava/lang/String;
      20: aload_3
      21: aconst_null
      22: invokeinterface #195,  6          // InterfaceMethod org/jumpmind/db/sql/ISqlTemplate.insertWithGeneratedKey:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;[I)J
      27: lreturn

  public java.lang.String getSequenceName(org.jumpmind.symmetric.db.SequenceIdentifier);
    Code:
       0: getstatic     #196                // Field org/jumpmind/symmetric/db/AbstractSymmetricDialect$1.$SwitchMap$org$jumpmind$symmetric$db$SequenceIdentifier:[I
       3: aload_1
       4: invokevirtual #197                // Method org/jumpmind/symmetric/db/SequenceIdentifier.ordinal:()I
       7: iaload
       8: lookupswitch  { // 2
                     1: 36
                     2: 39
               default: 42
          }
      36: ldc           #198                // String sym_data_data_id
      38: areturn
      39: ldc           #199                // String sym_trigger_his_ger_hist_id
      41: areturn
      42: aconst_null
      43: areturn

  public java.lang.String getSequenceKeyName(org.jumpmind.symmetric.db.SequenceIdentifier);
    Code:
       0: getstatic     #196                // Field org/jumpmind/symmetric/db/AbstractSymmetricDialect$1.$SwitchMap$org$jumpmind$symmetric$db$SequenceIdentifier:[I
       3: aload_1
       4: invokevirtual #197                // Method org/jumpmind/symmetric/db/SequenceIdentifier.ordinal:()I
       7: iaload
       8: lookupswitch  { // 2
                     1: 36
                     2: 39
               default: 42
          }
      36: ldc           #200                // String data_id
      38: areturn
      39: ldc           #201                // String trigger_hist_id
      41: areturn
      42: aconst_null
      43: areturn

  public org.jumpmind.db.model.Column[] orderColumns(java.lang.String[], org.jumpmind.db.model.Table);
    Code:
       0: aload_2
       1: invokevirtual #176                // Method org/jumpmind/db/model/Table.getColumns:()[Lorg/jumpmind/db/model/Column;
       4: astore_3
       5: aload_1
       6: arraylength
       7: anewarray     #202                // class org/jumpmind/db/model/Column
      10: astore        4
      12: iconst_0
      13: istore        5
      15: iload         5
      17: aload_1
      18: arraylength
      19: if_icmpge     88
      22: aload_1
      23: iload         5
      25: aaload
      26: astore        6
      28: aload_3
      29: astore        7
      31: aload         7
      33: arraylength
      34: istore        8
      36: iconst_0
      37: istore        9
      39: iload         9
      41: iload         8
      43: if_icmpge     82
      46: aload         7
      48: iload         9
      50: aaload
      51: astore        10
      53: aload         10
      55: invokevirtual #177                // Method org/jumpmind/db/model/Column.getName:()Ljava/lang/String;
      58: aload         6
      60: invokevirtual #101                // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      63: ifeq          76
      66: aload         4
      68: iload         5
      70: aload         10
      72: aastore
      73: goto          82
      76: iinc          9, 1
      79: goto          39
      82: iinc          5, 1
      85: goto          15
      88: aload         4
      90: areturn

  public void disableSyncTriggers(org.jumpmind.db.sql.ISqlTransaction);
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: invokevirtual #203                // Method disableSyncTriggers:(Lorg/jumpmind/db/sql/ISqlTransaction;Ljava/lang/String;)V
       6: return

  public boolean supportsTransactionId();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isBlobSyncSupported();
    Code:
       0: iconst_1
       1: ireturn

  public boolean isClobSyncSupported();
    Code:
       0: iconst_1
       1: ireturn

  public boolean isTransactionIdOverrideSupported();
    Code:
       0: iconst_1
       1: ireturn

  public java.lang.String getEngineName();
    Code:
       0: aload_0
       1: getfield      #9                  // Field parameterService:Lorg/jumpmind/symmetric/service/IParameterService;
       4: ldc           #204                // String engine.name
       6: invokeinterface #62,  2           // InterfaceMethod org/jumpmind/symmetric/service/IParameterService.getString:(Ljava/lang/String;)Ljava/lang/String;
      11: areturn

  public boolean supportsOpenCursorsAcrossCommit();
    Code:
       0: iconst_1
       1: ireturn

  public java.lang.String getInitialLoadTableAlias();
    Code:
       0: ldc           #205                // String t
       2: areturn

  public java.lang.String preProcessTriggerSqlClause(java.lang.String);
    Code:
       0: aload_1
       1: areturn

  public int getRouterDataPeekAheadCount();
    Code:
       0: aload_0
       1: getfield      #9                  // Field parameterService:Lorg/jumpmind/symmetric/service/IParameterService;
       4: ldc           #206                // String routing.peek.ahead.window.after.max.size
       6: invokeinterface #207,  2          // InterfaceMethod org/jumpmind/symmetric/service/IParameterService.getInt:(Ljava/lang/String;)I
      11: ireturn

  public void truncateTable(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #10                 // Field platform:Lorg/jumpmind/db/platform/IDatabasePlatform;
       4: invokeinterface #106,  1          // InterfaceMethod org/jumpmind/db/platform/IDatabasePlatform.getDdlBuilder:()Lorg/jumpmind/db/platform/IDdlBuilder;
       9: invokeinterface #208,  1          // InterfaceMethod org/jumpmind/db/platform/IDdlBuilder.isDelimitedIdentifierModeOn:()Z
      14: ifeq          32
      17: aload_0
      18: getfield      #10                 // Field platform:Lorg/jumpmind/db/platform/IDatabasePlatform;
      21: invokeinterface #36,  1           // InterfaceMethod org/jumpmind/db/platform/IDatabasePlatform.getDatabaseInfo:()Lorg/jumpmind/db/platform/DatabaseInfo;
      26: invokevirtual #209                // Method org/jumpmind/db/platform/DatabaseInfo.getDelimiterToken:()Ljava/lang/String;
      29: goto          34
      32: ldc           #73                 // String
      34: astore_2
      35: iconst_0
      36: istore_3
      37: iconst_5
      38: istore        4
      40: iload_3
      41: ifne          170
      44: iload         4
      46: ifle          170
      49: aload_0
      50: getfield      #10                 // Field platform:Lorg/jumpmind/db/platform/IDatabasePlatform;
      53: aload_1
      54: iconst_0
      55: invokeinterface #210,  3          // InterfaceMethod org/jumpmind/db/platform/IDatabasePlatform.getTableFromCache:(Ljava/lang/String;Z)Lorg/jumpmind/db/model/Table;
      60: astore        5
      62: aload         5
      64: ifnull        116
      67: aload_0
      68: getfield      #10                 // Field platform:Lorg/jumpmind/db/platform/IDatabasePlatform;
      71: invokeinterface #14,  1           // InterfaceMethod org/jumpmind/db/platform/IDatabasePlatform.getSqlTemplate:()Lorg/jumpmind/db/sql/ISqlTemplate;
      76: ldc           #211                // String truncate table %s%s%s
      78: iconst_3
      79: anewarray     #53                 // class java/lang/Object
      82: dup
      83: iconst_0
      84: aload_2
      85: aastore
      86: dup
      87: iconst_1
      88: aload         5
      90: invokevirtual #140                // Method org/jumpmind/db/model/Table.getName:()Ljava/lang/String;
      93: aastore
      94: dup
      95: iconst_2
      96: aload_2
      97: aastore
      98: invokestatic  #64                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
     101: iconst_0
     102: anewarray     #53                 // class java/lang/Object
     105: invokeinterface #56,  3           // InterfaceMethod org/jumpmind/db/sql/ISqlTemplate.update:(Ljava/lang/String;[Ljava/lang/Object;)I
     110: pop
     111: iconst_1
     112: istore_3
     113: goto          137
     116: new           #147                // class java/lang/RuntimeException
     119: dup
     120: ldc           #212                // String Could not find %s to trunate
     122: iconst_1
     123: anewarray     #53                 // class java/lang/Object
     126: dup
     127: iconst_0
     128: aload_1
     129: aastore
     130: invokestatic  #64                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
     133: invokespecial #213                // Method java/lang/RuntimeException."<init>":(Ljava/lang/String;)V
     136: athrow
     137: goto          40
     140: astore        5
     142: aload_0
     143: getfield      #4                  // Field log:Lorg/slf4j/Logger;
     146: aload         5
     148: invokevirtual #214                // Method org/jumpmind/db/sql/SqlException.getMessage:()Ljava/lang/String;
     151: aload         5
     153: invokeinterface #45,  3           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Throwable;)V
     158: ldc2_w        #215                // long 5000l
     161: invokestatic  #217                // Method org/jumpmind/symmetric/util/AppUtils.sleep:(J)V
     164: iinc          4, -1
     167: goto          40
     170: return
    Exception table:
       from    to  target type
          49   137   140   Class org/jumpmind/db/sql/SqlException

  public boolean areDatabaseTransactionsPendingSince(long);
    Code:
       0: new           #218                // class java/lang/UnsupportedOperationException
       3: dup
       4: invokespecial #219                // Method java/lang/UnsupportedOperationException."<init>":()V
       7: athrow

  public long getDatabaseTime();
    Code:
       0: new           #27                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #48                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #220                // String select current_timestamp from
       9: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: getfield      #9                  // Field parameterService:Lorg/jumpmind/symmetric/service/IParameterService;
      16: invokeinterface #49,  1           // InterfaceMethod org/jumpmind/symmetric/service/IParameterService.getTablePrefix:()Ljava/lang/String;
      21: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: ldc           #221                // String _node_identity
      26: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      29: invokevirtual #34                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      32: astore_1
      33: aload_1
      34: aload_0
      35: getfield      #10                 // Field platform:Lorg/jumpmind/db/platform/IDatabasePlatform;
      38: invokeinterface #222,  1          // InterfaceMethod org/jumpmind/db/platform/IDatabasePlatform.getSqlScriptReplacementTokens:()Ljava/util/Map;
      43: iconst_0
      44: invokestatic  #223                // Method org/jumpmind/util/FormatUtils.replaceTokens:(Ljava/lang/String;Ljava/util/Map;Z)Ljava/lang/String;
      47: astore_1
      48: aload_0
      49: getfield      #10                 // Field platform:Lorg/jumpmind/db/platform/IDatabasePlatform;
      52: invokeinterface #14,  1           // InterfaceMethod org/jumpmind/db/platform/IDatabasePlatform.getSqlTemplate:()Lorg/jumpmind/db/sql/ISqlTemplate;
      57: aload_1
      58: ldc_w         #224                // class java/util/Date
      61: iconst_0
      62: anewarray     #53                 // class java/lang/Object
      65: invokeinterface #225,  4          // InterfaceMethod org/jumpmind/db/sql/ISqlTemplate.queryForObject:(Ljava/lang/String;Ljava/lang/Class;[Ljava/lang/Object;)Ljava/lang/Object;
      70: checkcast     #224                // class java/util/Date
      73: astore_2
      74: aload_2
      75: ifnull        83
      78: aload_2
      79: invokevirtual #226                // Method java/util/Date.getTime:()J
      82: lreturn
      83: invokestatic  #227                // Method java/lang/System.currentTimeMillis:()J
      86: lreturn
      87: astore_1
      88: aload_0
      89: getfield      #4                  // Field log:Lorg/slf4j/Logger;
      92: aload_1
      93: invokevirtual #152                // Method java/lang/Exception.getMessage:()Ljava/lang/String;
      96: aload_1
      97: invokeinterface #153,  3          // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;Ljava/lang/Throwable;)V
     102: invokestatic  #227                // Method java/lang/System.currentTimeMillis:()J
     105: lreturn
    Exception table:
       from    to  target type
           0    82    87   Class java/lang/Exception
          83    86    87   Class java/lang/Exception

  public java.lang.String getSourceNodeExpression();
    Code:
       0: aconst_null
       1: areturn

  public final java.lang.String getDataHasChangedCondition(org.jumpmind.symmetric.model.Trigger);
    Code:
       0: aload_0
       1: getfield      #9                  // Field parameterService:Lorg/jumpmind/symmetric/service/IParameterService;
       4: ldc           #228                // String trigger.update.capture.changed.data.only.enabled
       6: invokeinterface #78,  2           // InterfaceMethod org/jumpmind/symmetric/service/IParameterService.is:(Ljava/lang/String;)Z
      11: ifeq          20
      14: aload_0
      15: aload_1
      16: invokevirtual #229                // Method getDbSpecificDataHasChangedCondition:(Lorg/jumpmind/symmetric/model/Trigger;)Ljava/lang/String;
      19: areturn
      20: ldc           #230                // String 1=1
      22: areturn

  protected java.lang.String getDbSpecificDataHasChangedCondition(org.jumpmind.symmetric.model.Trigger);
    Code:
       0: ldc           #230                // String 1=1
       2: areturn

  public boolean needsToSelectLobData();
    Code:
       0: iconst_0
       1: ireturn

  public boolean canGapsOccurInCapturedDataIds();
    Code:
       0: iconst_1
       1: ireturn

  public java.lang.String massageDataExtractionSql(java.lang.String, org.jumpmind.symmetric.model.Channel);
    Code:
       0: aload_1
       1: areturn

  public java.lang.String getDriverName();
    Code:
       0: aload_0
       1: getfield      #24                 // Field driverName:Ljava/lang/String;
       4: areturn

  public java.lang.String getDriverVersion();
    Code:
       0: aload_0
       1: getfield      #26                 // Field driverVersion:Ljava/lang/String;
       4: areturn

  public java.lang.String massageForLob(java.lang.String, org.jumpmind.symmetric.model.Channel);
    Code:
       0: aload_1
       1: areturn

  public boolean escapesTemplatesForDatabaseInserts();
    Code:
       0: iconst_0
       1: ireturn

  public java.lang.String getMasterCollation();
    Code:
       0: aload_0
       1: getfield      #9                  // Field parameterService:Lorg/jumpmind/symmetric/service/IParameterService;
       4: ldc           #231                // String db.master.collation
       6: ldc           #73                 // String
       8: invokeinterface #232,  3          // InterfaceMethod org/jumpmind/symmetric/service/IParameterService.getString:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      13: areturn

  public boolean supportsBatchUpdates();
    Code:
       0: iconst_1
       1: ireturn

  public void cleanupTriggers();
    Code:
       0: return

  public void addDatabaseUpgradeListener(org.jumpmind.symmetric.ext.IDatabaseUpgradeListener);
    Code:
       0: aload_0
       1: getfield      #8                  // Field databaseUpgradeListeners:Ljava/util/List;
       4: aload_1
       5: invokeinterface #233,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      10: pop
      11: return

  public org.jumpmind.symmetric.db.AbstractTriggerTemplate getTriggerTemplate();
    Code:
       0: aload_0
       1: getfield      #46                 // Field triggerTemplate:Lorg/jumpmind/symmetric/db/AbstractTriggerTemplate;
       4: areturn

  protected void close(org.jumpmind.db.sql.ISqlTransaction);
    Code:
       0: aload_1
       1: ifnull        10
       4: aload_1
       5: invokeinterface #102,  1          // InterfaceMethod org/jumpmind/db/sql/ISqlTransaction.close:()V
      10: return

  public java.lang.String getTablePrefix();
    Code:
       0: aload_0
       1: getfield      #9                  // Field parameterService:Lorg/jumpmind/symmetric/service/IParameterService;
       4: invokeinterface #49,  1           // InterfaceMethod org/jumpmind/symmetric/service/IParameterService.getTablePrefix:()Ljava/lang/String;
       9: areturn
}
