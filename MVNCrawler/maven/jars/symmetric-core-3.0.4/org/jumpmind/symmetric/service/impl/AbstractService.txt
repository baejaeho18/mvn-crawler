Compiled from "AbstractService.java"
public abstract class org.jumpmind.symmetric.service.impl.AbstractService implements org.jumpmind.symmetric.service.IService {
  protected final org.slf4j.Logger log;

  protected org.jumpmind.symmetric.service.IParameterService parameterService;

  protected org.jumpmind.symmetric.db.ISymmetricDialect symmetricDialect;

  protected org.jumpmind.db.sql.ISqlTemplate sqlTemplate;

  protected org.jumpmind.db.platform.IDatabasePlatform platform;

  protected java.lang.String tablePrefix;

  private org.jumpmind.symmetric.service.impl.ISqlMap sqlMap;

  public org.jumpmind.symmetric.service.impl.AbstractService(org.jumpmind.symmetric.service.IParameterService, org.jumpmind.symmetric.db.ISymmetricDialect);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_0
       6: invokevirtual #2                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
       9: invokestatic  #3                  // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
      12: putfield      #4                  // Field log:Lorg/slf4j/Logger;
      15: aload_0
      16: aload_2
      17: putfield      #5                  // Field symmetricDialect:Lorg/jumpmind/symmetric/db/ISymmetricDialect;
      20: aload_0
      21: aload_1
      22: putfield      #6                  // Field parameterService:Lorg/jumpmind/symmetric/service/IParameterService;
      25: aload_0
      26: aload_1
      27: invokeinterface #7,  1            // InterfaceMethod org/jumpmind/symmetric/service/IParameterService.getTablePrefix:()Ljava/lang/String;
      32: putfield      #8                  // Field tablePrefix:Ljava/lang/String;
      35: aload_0
      36: aload_2
      37: invokeinterface #9,  1            // InterfaceMethod org/jumpmind/symmetric/db/ISymmetricDialect.getPlatform:()Lorg/jumpmind/db/platform/IDatabasePlatform;
      42: putfield      #10                 // Field platform:Lorg/jumpmind/db/platform/IDatabasePlatform;
      45: aload_0
      46: aload_2
      47: invokeinterface #9,  1            // InterfaceMethod org/jumpmind/symmetric/db/ISymmetricDialect.getPlatform:()Lorg/jumpmind/db/platform/IDatabasePlatform;
      52: invokeinterface #11,  1           // InterfaceMethod org/jumpmind/db/platform/IDatabasePlatform.getSqlTemplate:()Lorg/jumpmind/db/sql/ISqlTemplate;
      57: putfield      #12                 // Field sqlTemplate:Lorg/jumpmind/db/sql/ISqlTemplate;
      60: return

  protected void setSqlMap(org.jumpmind.symmetric.service.impl.ISqlMap);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #13                 // Field sqlMap:Lorg/jumpmind/symmetric/service/impl/ISqlMap;
       5: return

  public org.jumpmind.db.sql.ISqlTemplate getJdbcTemplate();
    Code:
       0: aload_0
       1: getfield      #5                  // Field symmetricDialect:Lorg/jumpmind/symmetric/db/ISymmetricDialect;
       4: invokeinterface #9,  1            // InterfaceMethod org/jumpmind/symmetric/db/ISymmetricDialect.getPlatform:()Lorg/jumpmind/db/platform/IDatabasePlatform;
       9: invokeinterface #11,  1           // InterfaceMethod org/jumpmind/db/platform/IDatabasePlatform.getSqlTemplate:()Lorg/jumpmind/db/sql/ISqlTemplate;
      14: areturn

  public synchronized void synchronize(java.lang.Runnable);
    Code:
       0: aload_1
       1: invokeinterface #14,  1           // InterfaceMethod java/lang/Runnable.run:()V
       6: return

  protected boolean isSet(java.lang.Object);
    Code:
       0: aload_1
       1: ifnull        18
       4: aload_1
       5: invokevirtual #15                 // Method java/lang/Object.toString:()Ljava/lang/String;
       8: ldc           #16                 // String 1
      10: invokevirtual #17                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      13: ifeq          18
      16: iconst_1
      17: ireturn
      18: iconst_0
      19: ireturn

  protected java.sql.SQLException unwrapSqlException(java.lang.Throwable);
    Code:
       0: aload_1
       1: invokestatic  #18                 // Method org/apache/commons/lang/exception/ExceptionUtils.getThrowableList:(Ljava/lang/Throwable;)Ljava/util/List;
       4: astore_2
       5: aload_2
       6: invokeinterface #19,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      11: astore_3
      12: aload_3
      13: invokeinterface #20,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      18: ifeq          49
      21: aload_3
      22: invokeinterface #21,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      27: checkcast     #22                 // class java/lang/Throwable
      30: astore        4
      32: aload         4
      34: instanceof    #23                 // class java/sql/SQLException
      37: ifeq          46
      40: aload         4
      42: checkcast     #23                 // class java/sql/SQLException
      45: areturn
      46: goto          12
      49: aconst_null
      50: areturn

  protected java.util.Map<java.lang.String, java.lang.String> createSqlReplacementTokens();
    Code:
       0: aload_0
       1: getfield      #8                  // Field tablePrefix:Ljava/lang/String;
       4: aload_0
       5: getfield      #5                  // Field symmetricDialect:Lorg/jumpmind/symmetric/db/ISymmetricDialect;
       8: invokeinterface #9,  1            // InterfaceMethod org/jumpmind/symmetric/db/ISymmetricDialect.getPlatform:()Lorg/jumpmind/db/platform/IDatabasePlatform;
      13: invokeinterface #24,  1           // InterfaceMethod org/jumpmind/db/platform/IDatabasePlatform.getDatabaseInfo:()Lorg/jumpmind/db/platform/DatabaseInfo;
      18: invokevirtual #25                 // Method org/jumpmind/db/platform/DatabaseInfo.getDelimiterToken:()Ljava/lang/String;
      21: invokestatic  #26                 // Method createSqlReplacementTokens:(Ljava/lang/String;Ljava/lang/String;)Ljava/util/Map;
      24: areturn

  protected static java.util.Map<java.lang.String, java.lang.String> createSqlReplacementTokens(java.lang.String, java.lang.String);
    Code:
       0: new           #27                 // class java/util/HashMap
       3: dup
       4: invokespecial #28                 // Method java/util/HashMap."<init>":()V
       7: astore_2
       8: invokestatic  #29                 // Method org/jumpmind/symmetric/common/TableConstants.getTablesWithoutPrefix:()Ljava/util/List;
      11: astore_3
      12: aload_3
      13: invokeinterface #19,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      18: astore        4
      20: aload         4
      22: invokeinterface #20,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      27: ifeq          89
      30: aload         4
      32: invokeinterface #21,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      37: checkcast     #30                 // class java/lang/String
      40: astore        5
      42: aload_2
      43: aload         5
      45: ldc           #31                 // String %s%s%s
      47: iconst_3
      48: anewarray     #32                 // class java/lang/Object
      51: dup
      52: iconst_0
      53: aload_0
      54: aastore
      55: dup
      56: iconst_1
      57: aload_0
      58: invokestatic  #33                 // Method org/apache/commons/lang/StringUtils.isNotBlank:(Ljava/lang/String;)Z
      61: ifeq          69
      64: ldc           #34                 // String _
      66: goto          71
      69: ldc           #35                 // String
      71: aastore
      72: dup
      73: iconst_2
      74: aload         5
      76: aastore
      77: invokestatic  #36                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      80: invokeinterface #37,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      85: pop
      86: goto          20
      89: aload_2
      90: areturn

  public java.lang.String getSql(java.lang.String...);
    Code:
       0: aload_0
       1: getfield      #13                 // Field sqlMap:Lorg/jumpmind/symmetric/service/impl/ISqlMap;
       4: ifnull        18
       7: aload_0
       8: getfield      #13                 // Field sqlMap:Lorg/jumpmind/symmetric/service/impl/ISqlMap;
      11: aload_1
      12: invokeinterface #38,  2           // InterfaceMethod org/jumpmind/symmetric/service/impl/ISqlMap.getSql:([Ljava/lang/String;)Ljava/lang/String;
      17: areturn
      18: aconst_null
      19: areturn

  public org.jumpmind.symmetric.service.IParameterService getParameterService();
    Code:
       0: aload_0
       1: getfield      #6                  // Field parameterService:Lorg/jumpmind/symmetric/service/IParameterService;
       4: areturn

  public org.jumpmind.symmetric.db.ISymmetricDialect getSymmetricDialect();
    Code:
       0: aload_0
       1: getfield      #5                  // Field symmetricDialect:Lorg/jumpmind/symmetric/db/ISymmetricDialect;
       4: areturn

  public java.lang.String getTablePrefix();
    Code:
       0: aload_0
       1: getfield      #8                  // Field tablePrefix:Ljava/lang/String;
       4: areturn

  protected void close(org.jumpmind.db.sql.ISqlTransaction);
    Code:
       0: aload_1
       1: ifnull        10
       4: aload_1
       5: invokeinterface #39,  1           // InterfaceMethod org/jumpmind/db/sql/ISqlTransaction.close:()V
      10: return

  protected java.lang.String getRootMessage(java.lang.Exception);
    Code:
       0: aload_1
       1: invokestatic  #40                 // Method org/apache/commons/lang/exception/ExceptionUtils.getRootCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;
       4: astore_2
       5: aload_2
       6: ifnonnull     11
       9: aload_1
      10: astore_2
      11: aload_2
      12: invokevirtual #41                 // Method java/lang/Throwable.getMessage:()Ljava/lang/String;
      15: areturn
}
