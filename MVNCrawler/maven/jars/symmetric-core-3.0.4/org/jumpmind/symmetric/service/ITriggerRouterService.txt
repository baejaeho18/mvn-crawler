Compiled from "ITriggerRouterService.java"
public interface org.jumpmind.symmetric.service.ITriggerRouterService {
  public abstract java.util.List<org.jumpmind.symmetric.model.TriggerHistory> getActiveTriggerHistories();

  public abstract java.util.List<org.jumpmind.symmetric.model.TriggerRouter> getTriggerRouters();

  public abstract java.util.List<org.jumpmind.symmetric.model.TriggerRouter> buildTriggerRoutersForSymmetricTables(java.lang.String, org.jumpmind.symmetric.model.NodeGroupLink, java.lang.String...);

  public abstract java.util.List<org.jumpmind.symmetric.model.Trigger> getTriggersForCurrentNode(boolean);

  public abstract java.util.Map<java.lang.String, java.util.List<org.jumpmind.symmetric.model.TriggerRouter>> getTriggerRoutersByChannel(java.lang.String);

  public abstract java.util.Map<java.lang.String, java.util.List<org.jumpmind.symmetric.model.TriggerRouter>> getTriggerRoutersForCurrentNode(boolean);

  public abstract org.jumpmind.symmetric.model.Router getActiveRouterByIdForCurrentNode(java.lang.String, boolean);

  public abstract org.jumpmind.symmetric.model.Router getRouterById(java.lang.String);

  public abstract org.jumpmind.symmetric.model.Router getRouterById(java.lang.String, boolean);

  public abstract java.util.List<org.jumpmind.symmetric.model.Router> getRouters();

  public abstract java.util.List<org.jumpmind.symmetric.model.Router> getRoutersByGroupLink(org.jumpmind.symmetric.model.NodeGroupLink);

  public abstract boolean isRouterBeingUsed(java.lang.String);

  public abstract void deleteRouter(org.jumpmind.symmetric.model.Router);

  public abstract void saveRouter(org.jumpmind.symmetric.model.Router);

  public abstract java.util.List<org.jumpmind.symmetric.model.TriggerRouter> getAllTriggerRoutersForCurrentNode(java.lang.String);

  public abstract java.util.List<org.jumpmind.symmetric.model.Trigger> getTriggers();

  public abstract void saveTrigger(org.jumpmind.symmetric.model.Trigger);

  public abstract void deleteTrigger(org.jumpmind.symmetric.model.Trigger);

  public abstract void createTriggersOnChannelForTables(java.lang.String, java.util.Set<org.jumpmind.db.model.Table>, java.lang.String);

  public abstract void createTriggersOnChannelForTables(java.lang.String, java.lang.String, java.lang.String, java.util.List<java.lang.String>, java.lang.String);

  public abstract boolean isTriggerBeingUsed(java.lang.String);

  public abstract boolean doesTriggerExist(java.lang.String);

  public abstract boolean doesTriggerExistForTable(java.lang.String);

  public abstract java.util.List<org.jumpmind.symmetric.model.TriggerRouter> getAllTriggerRoutersForReloadForCurrentNode(java.lang.String, java.lang.String);

  public abstract java.util.Set<org.jumpmind.symmetric.model.TriggerRouter> getTriggerRouterForTableForCurrentNode(org.jumpmind.symmetric.model.NodeGroupLink, java.lang.String, java.lang.String, java.lang.String, boolean);

  public abstract java.util.Set<org.jumpmind.symmetric.model.TriggerRouter> getTriggerRouterForTableForCurrentNode(java.lang.String, java.lang.String, java.lang.String, boolean);

  public abstract org.jumpmind.symmetric.model.TriggerRouter findTriggerRouterById(java.lang.String, java.lang.String);

  public abstract void inactivateTriggerHistory(org.jumpmind.symmetric.model.TriggerHistory);

  public abstract org.jumpmind.symmetric.model.TriggerHistory getNewestTriggerHistoryForTrigger(java.lang.String, java.lang.String, java.lang.String, java.lang.String);

  public abstract org.jumpmind.symmetric.model.TriggerHistory getTriggerHistory(int);

  public abstract org.jumpmind.symmetric.model.TriggerHistory findTriggerHistory(java.lang.String);

  public abstract org.jumpmind.symmetric.model.Trigger getTriggerById(java.lang.String);

  public abstract org.jumpmind.symmetric.model.Trigger getTriggerById(java.lang.String, boolean);

  public abstract void insert(org.jumpmind.symmetric.model.TriggerHistory);

  public abstract java.util.Map<java.lang.Long, org.jumpmind.symmetric.model.TriggerHistory> getHistoryRecords();

  public abstract void deleteTriggerRouter(org.jumpmind.symmetric.model.TriggerRouter);

  public abstract void saveTriggerRouter(org.jumpmind.symmetric.model.TriggerRouter, boolean);

  public abstract void saveTriggerRouter(org.jumpmind.symmetric.model.TriggerRouter);

  public abstract void syncTriggers();

  public abstract void syncTriggers(java.lang.StringBuilder, boolean);

  public abstract void addTriggerCreationListeners(org.jumpmind.symmetric.config.ITriggerCreationListener);

  public abstract void addExtraConfigTable(java.lang.String);

  public abstract java.util.Map<org.jumpmind.symmetric.model.Trigger, java.lang.Exception> getFailedTriggers();
}
