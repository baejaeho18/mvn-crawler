Compiled from "INodeService.java"
public interface org.jumpmind.symmetric.service.INodeService {
  public abstract org.jumpmind.symmetric.model.Node findNode(java.lang.String);

  public abstract java.util.List<org.jumpmind.symmetric.model.NodeHost> findNodeHosts(java.lang.String);

  public abstract boolean isRegistrationServer();

  public abstract org.jumpmind.symmetric.model.Node findNodeByExternalId(java.lang.String, java.lang.String);

  public abstract java.util.Set<org.jumpmind.symmetric.model.Node> findNodesThatOriginatedFromNodeId(java.lang.String);

  public abstract java.util.Set<org.jumpmind.symmetric.model.Node> findNodesThatOriginatedFromNodeId(java.lang.String, boolean);

  public abstract java.util.Collection<org.jumpmind.symmetric.model.Node> findEnabledNodesFromNodeGroup(java.lang.String);

  public abstract java.util.Collection<org.jumpmind.symmetric.model.Node> findNodesWithOpenRegistration();

  public abstract java.util.Map<java.lang.String, org.jumpmind.symmetric.model.NodeSecurity> findAllNodeSecurity(boolean);

  public abstract java.util.List<java.lang.String> findAllExternalIds();

  public abstract org.jumpmind.symmetric.model.NodeSecurity findNodeSecurity(java.lang.String);

  public abstract org.jumpmind.symmetric.model.NodeSecurity findNodeSecurity(java.lang.String, boolean);

  public abstract void deleteNodeSecurity(java.lang.String);

  public abstract void deleteNode(java.lang.String);

  public abstract java.lang.String findSymmetricVersion();

  public abstract java.lang.String findIdentityNodeId();

  public abstract void ignoreNodeChannelForExternalId(boolean, java.lang.String, java.lang.String, java.lang.String);

  public abstract boolean isNodeAuthorized(java.lang.String, java.lang.String);

  public abstract void flushNodeAuthorizedCache();

  public abstract boolean isRegistrationEnabled(java.lang.String);

  public abstract org.jumpmind.symmetric.model.Node findIdentity();

  public abstract org.jumpmind.symmetric.model.Node findIdentity(boolean);

  public abstract org.jumpmind.symmetric.model.Node getCachedIdentity();

  public abstract void deleteIdentity();

  public abstract java.util.List<org.jumpmind.symmetric.model.Node> findAllNodes();

  public abstract java.util.List<org.jumpmind.symmetric.model.Node> findNodesToPull();

  public abstract java.util.List<org.jumpmind.symmetric.model.Node> findNodesToPushTo();

  public abstract java.util.List<org.jumpmind.symmetric.model.Node> findSourceNodesFor(org.jumpmind.symmetric.model.NodeGroupLinkAction);

  public abstract java.util.List<org.jumpmind.symmetric.model.Node> findTargetNodesFor(org.jumpmind.symmetric.model.NodeGroupLinkAction);

  public abstract boolean isExternalIdRegistered(java.lang.String, java.lang.String);

  public abstract void save(org.jumpmind.symmetric.model.Node);

  public abstract void updateNodeHostForCurrentNode();

  public abstract void insertNodeIdentity(java.lang.String);

  public abstract void insertNodeGroup(java.lang.String, java.lang.String);

  public abstract boolean updateNodeSecurity(org.jumpmind.symmetric.model.NodeSecurity);

  public abstract boolean updateNodeSecurity(org.jumpmind.db.sql.ISqlTransaction, org.jumpmind.symmetric.model.NodeSecurity);

  public abstract boolean setInitialLoadEnabled(java.lang.String, boolean);

  public abstract boolean setInitialLoadEnabled(org.jumpmind.db.sql.ISqlTransaction, java.lang.String, boolean);

  public abstract org.jumpmind.symmetric.config.INodeIdGenerator getNodeIdGenerator();

  public abstract void setNodeIdGenerator(org.jumpmind.symmetric.config.INodeIdGenerator);

  public abstract void setNodePasswordFilter(org.jumpmind.symmetric.security.INodePasswordFilter);

  public abstract boolean isDataLoadCompleted();

  public abstract boolean isDataLoadStarted();

  public abstract org.jumpmind.symmetric.model.NodeStatus getNodeStatus();

  public abstract void checkForOfflineNodes();

  public abstract java.util.List<org.jumpmind.symmetric.model.Node> findOfflineNodes();

  public abstract java.util.List<org.jumpmind.symmetric.model.Node> findOfflineNodes(long);

  public abstract void addOfflineServerListener(org.jumpmind.symmetric.ext.IOfflineServerListener);

  public abstract boolean removeOfflineServerListener(org.jumpmind.symmetric.ext.IOfflineServerListener);

  public abstract org.jumpmind.symmetric.model.NetworkedNode getRootNetworkedNode();
}
