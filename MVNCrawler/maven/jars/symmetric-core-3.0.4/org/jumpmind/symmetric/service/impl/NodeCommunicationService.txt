Compiled from "NodeCommunicationService.java"
public class org.jumpmind.symmetric.service.impl.NodeCommunicationService extends org.jumpmind.symmetric.service.impl.AbstractService implements org.jumpmind.symmetric.service.INodeCommunicationService {
  private java.lang.String serverId;

  private java.util.Map<org.jumpmind.symmetric.model.NodeCommunication$CommunicationType, java.util.concurrent.ThreadPoolExecutor> executors;

  private org.jumpmind.symmetric.service.INodeService nodeService;

  private boolean initialized;

  public org.jumpmind.symmetric.service.impl.NodeCommunicationService(org.jumpmind.symmetric.service.INodeService, org.jumpmind.symmetric.service.IParameterService, org.jumpmind.symmetric.db.ISymmetricDialect);
    Code:
       0: aload_0
       1: aload_2
       2: aload_3
       3: invokespecial #1                  // Method org/jumpmind/symmetric/service/impl/AbstractService."<init>":(Lorg/jumpmind/symmetric/service/IParameterService;Lorg/jumpmind/symmetric/db/ISymmetricDialect;)V
       6: aload_0
       7: invokestatic  #2                  // Method org/jumpmind/symmetric/util/AppUtils.getServerId:()Ljava/lang/String;
      10: putfield      #3                  // Field serverId:Ljava/lang/String;
      13: aload_0
      14: new           #4                  // class java/util/HashMap
      17: dup
      18: invokespecial #5                  // Method java/util/HashMap."<init>":()V
      21: putfield      #6                  // Field executors:Ljava/util/Map;
      24: aload_0
      25: iconst_0
      26: putfield      #7                  // Field initialized:Z
      29: aload_0
      30: new           #8                  // class org/jumpmind/symmetric/service/impl/NodeCommunicationServiceSqlMap
      33: dup
      34: aload_3
      35: invokeinterface #9,  1            // InterfaceMethod org/jumpmind/symmetric/db/ISymmetricDialect.getPlatform:()Lorg/jumpmind/db/platform/IDatabasePlatform;
      40: aload_0
      41: invokevirtual #10                 // Method createSqlReplacementTokens:()Ljava/util/Map;
      44: invokespecial #11                 // Method org/jumpmind/symmetric/service/impl/NodeCommunicationServiceSqlMap."<init>":(Lorg/jumpmind/db/platform/IDatabasePlatform;Ljava/util/Map;)V
      47: invokevirtual #12                 // Method setSqlMap:(Lorg/jumpmind/symmetric/service/impl/ISqlMap;)V
      50: aload_0
      51: aload_1
      52: putfield      #13                 // Field nodeService:Lorg/jumpmind/symmetric/service/INodeService;
      55: return

  private final void initialize();
    Code:
       0: aload_0
       1: getfield      #7                  // Field initialized:Z
       4: ifne          84
       7: aload_0
       8: getfield      #14                 // Field sqlTemplate:Lorg/jumpmind/db/sql/ISqlTemplate;
      11: aload_0
      12: iconst_1
      13: anewarray     #15                 // class java/lang/String
      16: dup
      17: iconst_0
      18: ldc           #16                 // String clearLocksOnRestartSql
      20: aastore
      21: invokevirtual #17                 // Method getSql:([Ljava/lang/String;)Ljava/lang/String;
      24: iconst_1
      25: anewarray     #18                 // class java/lang/Object
      28: dup
      29: iconst_0
      30: aload_0
      31: getfield      #3                  // Field serverId:Ljava/lang/String;
      34: aastore
      35: invokeinterface #19,  3           // InterfaceMethod org/jumpmind/db/sql/ISqlTemplate.update:(Ljava/lang/String;[Ljava/lang/Object;)I
      40: istore_1
      41: iload_1
      42: ifle          64
      45: aload_0
      46: getfield      #20                 // Field log:Lorg/slf4j/Logger;
      49: ldc           #21                 // String Cleared {} node communication locks for {}
      51: iload_1
      52: invokestatic  #22                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      55: aload_0
      56: getfield      #3                  // Field serverId:Ljava/lang/String;
      59: invokeinterface #23,  4           // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      64: jsr           76
      67: goto          84
      70: astore_2
      71: jsr           76
      74: aload_2
      75: athrow
      76: astore_3
      77: aload_0
      78: iconst_1
      79: putfield      #7                  // Field initialized:Z
      82: ret           3
      84: return
    Exception table:
       from    to  target type
           7    67    70   any
          70    74    70   any

  public java.util.List<org.jumpmind.symmetric.model.NodeCommunication> list(org.jumpmind.symmetric.model.NodeCommunication$CommunicationType);
    Code:
       0: aload_0
       1: invokespecial #24                 // Method initialize:()V
       4: new           #25                 // class java/util/ArrayList
       7: dup
       8: aload_0
       9: getfield      #14                 // Field sqlTemplate:Lorg/jumpmind/db/sql/ISqlTemplate;
      12: aload_0
      13: iconst_1
      14: anewarray     #15                 // class java/lang/String
      17: dup
      18: iconst_0
      19: ldc           #26                 // String selectNodeCommunicationSql
      21: aastore
      22: invokevirtual #17                 // Method getSql:([Ljava/lang/String;)Ljava/lang/String;
      25: new           #27                 // class org/jumpmind/symmetric/service/impl/NodeCommunicationService$NodeCommunicationMapper
      28: dup
      29: aload_0
      30: invokespecial #28                 // Method org/jumpmind/symmetric/service/impl/NodeCommunicationService$NodeCommunicationMapper."<init>":(Lorg/jumpmind/symmetric/service/impl/NodeCommunicationService;)V
      33: iconst_1
      34: anewarray     #18                 // class java/lang/Object
      37: dup
      38: iconst_0
      39: aload_1
      40: invokevirtual #29                 // Method org/jumpmind/symmetric/model/NodeCommunication$CommunicationType.name:()Ljava/lang/String;
      43: aastore
      44: invokeinterface #30,  4           // InterfaceMethod org/jumpmind/db/sql/ISqlTemplate.query:(Ljava/lang/String;Lorg/jumpmind/db/sql/ISqlRowMapper;[Ljava/lang/Object;)Ljava/util/List;
      49: invokespecial #31                 // Method java/util/ArrayList."<init>":(Ljava/util/Collection;)V
      52: astore_2
      53: aconst_null
      54: astore_3
      55: getstatic     #32                 // Field org/jumpmind/symmetric/service/impl/NodeCommunicationService$3.$SwitchMap$org$jumpmind$symmetric$model$NodeCommunication$CommunicationType:[I
      58: aload_1
      59: invokevirtual #33                 // Method org/jumpmind/symmetric/model/NodeCommunication$CommunicationType.ordinal:()I
      62: iaload
      63: lookupswitch  { // 2
                     1: 88
                     2: 101
               default: 114
          }
      88: aload_0
      89: getfield      #13                 // Field nodeService:Lorg/jumpmind/symmetric/service/INodeService;
      92: invokeinterface #34,  1           // InterfaceMethod org/jumpmind/symmetric/service/INodeService.findNodesToPull:()Ljava/util/List;
      97: astore_3
      98: goto          123
     101: aload_0
     102: getfield      #13                 // Field nodeService:Lorg/jumpmind/symmetric/service/INodeService;
     105: invokeinterface #35,  1           // InterfaceMethod org/jumpmind/symmetric/service/INodeService.findNodesToPushTo:()Ljava/util/List;
     110: astore_3
     111: goto          123
     114: new           #25                 // class java/util/ArrayList
     117: dup
     118: iconst_0
     119: invokespecial #36                 // Method java/util/ArrayList."<init>":(I)V
     122: astore_3
     123: aload_3
     124: invokeinterface #37,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
     129: astore        4
     131: aload         4
     133: invokeinterface #38,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     138: ifeq          267
     141: aload         4
     143: invokeinterface #39,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     148: checkcast     #40                 // class org/jumpmind/symmetric/model/Node
     151: astore        5
     153: aconst_null
     154: astore        6
     156: aload_2
     157: invokeinterface #37,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
     162: astore        7
     164: aload         7
     166: invokeinterface #38,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     171: ifeq          212
     174: aload         7
     176: invokeinterface #39,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     181: checkcast     #41                 // class org/jumpmind/symmetric/model/NodeCommunication
     184: astore        8
     186: aload         8
     188: invokevirtual #42                 // Method org/jumpmind/symmetric/model/NodeCommunication.getNodeId:()Ljava/lang/String;
     191: aload         5
     193: invokevirtual #43                 // Method org/jumpmind/symmetric/model/Node.getNodeId:()Ljava/lang/String;
     196: invokevirtual #44                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     199: ifeq          209
     202: aload         8
     204: astore        6
     206: goto          212
     209: goto          164
     212: aload         6
     214: ifnonnull     257
     217: new           #41                 // class org/jumpmind/symmetric/model/NodeCommunication
     220: dup
     221: invokespecial #45                 // Method org/jumpmind/symmetric/model/NodeCommunication."<init>":()V
     224: astore        6
     226: aload         6
     228: aload         5
     230: invokevirtual #43                 // Method org/jumpmind/symmetric/model/Node.getNodeId:()Ljava/lang/String;
     233: invokevirtual #46                 // Method org/jumpmind/symmetric/model/NodeCommunication.setNodeId:(Ljava/lang/String;)V
     236: aload         6
     238: aload_1
     239: invokevirtual #47                 // Method org/jumpmind/symmetric/model/NodeCommunication.setCommunicationType:(Lorg/jumpmind/symmetric/model/NodeCommunication$CommunicationType;)V
     242: aload_0
     243: aload         6
     245: invokevirtual #48                 // Method save:(Lorg/jumpmind/symmetric/model/NodeCommunication;)V
     248: aload_2
     249: aload         6
     251: invokeinterface #49,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     256: pop
     257: aload         6
     259: aload         5
     261: invokevirtual #50                 // Method org/jumpmind/symmetric/model/NodeCommunication.setNode:(Lorg/jumpmind/symmetric/model/Node;)V
     264: goto          131
     267: aload_2
     268: invokeinterface #37,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
     273: astore        4
     275: aload         4
     277: invokeinterface #38,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     282: ifeq          380
     285: aload         4
     287: invokeinterface #39,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     292: checkcast     #41                 // class org/jumpmind/symmetric/model/NodeCommunication
     295: astore        5
     297: aconst_null
     298: astore        6
     300: aload_3
     301: invokeinterface #37,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
     306: astore        7
     308: aload         7
     310: invokeinterface #38,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     315: ifeq          356
     318: aload         7
     320: invokeinterface #39,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     325: checkcast     #40                 // class org/jumpmind/symmetric/model/Node
     328: astore        8
     330: aload         5
     332: invokevirtual #42                 // Method org/jumpmind/symmetric/model/NodeCommunication.getNodeId:()Ljava/lang/String;
     335: aload         8
     337: invokevirtual #43                 // Method org/jumpmind/symmetric/model/Node.getNodeId:()Ljava/lang/String;
     340: invokevirtual #44                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     343: ifeq          353
     346: aload         8
     348: astore        6
     350: goto          356
     353: goto          308
     356: aload         6
     358: ifnonnull     377
     361: aload_0
     362: aload         5
     364: invokevirtual #51                 // Method delete:(Lorg/jumpmind/symmetric/model/NodeCommunication;)Z
     367: pop
     368: aload_2
     369: aload         5
     371: invokeinterface #52,  2           // InterfaceMethod java/util/List.remove:(Ljava/lang/Object;)Z
     376: pop
     377: goto          275
     380: aload_2
     381: areturn

  public boolean delete(org.jumpmind.symmetric.model.NodeCommunication);
    Code:
       0: iconst_1
       1: aload_0
       2: getfield      #14                 // Field sqlTemplate:Lorg/jumpmind/db/sql/ISqlTemplate;
       5: aload_0
       6: iconst_1
       7: anewarray     #15                 // class java/lang/String
      10: dup
      11: iconst_0
      12: ldc           #53                 // String deleteNodeCommunicationSql
      14: aastore
      15: invokevirtual #17                 // Method getSql:([Ljava/lang/String;)Ljava/lang/String;
      18: iconst_2
      19: anewarray     #18                 // class java/lang/Object
      22: dup
      23: iconst_0
      24: aload_1
      25: invokevirtual #42                 // Method org/jumpmind/symmetric/model/NodeCommunication.getNodeId:()Ljava/lang/String;
      28: aastore
      29: dup
      30: iconst_1
      31: aload_1
      32: invokevirtual #54                 // Method org/jumpmind/symmetric/model/NodeCommunication.getCommunicationType:()Lorg/jumpmind/symmetric/model/NodeCommunication$CommunicationType;
      35: invokevirtual #29                 // Method org/jumpmind/symmetric/model/NodeCommunication$CommunicationType.name:()Ljava/lang/String;
      38: aastore
      39: invokeinterface #19,  3           // InterfaceMethod org/jumpmind/db/sql/ISqlTemplate.update:(Ljava/lang/String;[Ljava/lang/Object;)I
      44: if_icmpne     51
      47: iconst_1
      48: goto          52
      51: iconst_0
      52: ireturn

  public void save(org.jumpmind.symmetric.model.NodeCommunication);
    Code:
       0: iconst_0
       1: aload_0
       2: getfield      #14                 // Field sqlTemplate:Lorg/jumpmind/db/sql/ISqlTemplate;
       5: aload_0
       6: iconst_1
       7: anewarray     #15                 // class java/lang/String
      10: dup
      11: iconst_0
      12: ldc           #55                 // String updateNodeCommunicationSql
      14: aastore
      15: invokevirtual #17                 // Method getSql:([Ljava/lang/String;)Ljava/lang/String;
      18: bipush        12
      20: anewarray     #18                 // class java/lang/Object
      23: dup
      24: iconst_0
      25: aload_1
      26: invokevirtual #56                 // Method org/jumpmind/symmetric/model/NodeCommunication.getLockTime:()Ljava/util/Date;
      29: aastore
      30: dup
      31: iconst_1
      32: aload_1
      33: invokevirtual #57                 // Method org/jumpmind/symmetric/model/NodeCommunication.getLockingServerId:()Ljava/lang/String;
      36: aastore
      37: dup
      38: iconst_2
      39: aload_1
      40: invokevirtual #58                 // Method org/jumpmind/symmetric/model/NodeCommunication.getLastLockMillis:()J
      43: invokestatic  #59                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      46: aastore
      47: dup
      48: iconst_3
      49: aload_1
      50: invokevirtual #60                 // Method org/jumpmind/symmetric/model/NodeCommunication.getSuccessCount:()J
      53: invokestatic  #59                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      56: aastore
      57: dup
      58: iconst_4
      59: aload_1
      60: invokevirtual #61                 // Method org/jumpmind/symmetric/model/NodeCommunication.getFailCount:()J
      63: invokestatic  #59                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      66: aastore
      67: dup
      68: iconst_5
      69: aload_1
      70: invokevirtual #62                 // Method org/jumpmind/symmetric/model/NodeCommunication.getTotalSuccessCount:()J
      73: invokestatic  #59                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      76: aastore
      77: dup
      78: bipush        6
      80: aload_1
      81: invokevirtual #63                 // Method org/jumpmind/symmetric/model/NodeCommunication.getTotalFailCount:()J
      84: invokestatic  #59                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      87: aastore
      88: dup
      89: bipush        7
      91: aload_1
      92: invokevirtual #64                 // Method org/jumpmind/symmetric/model/NodeCommunication.getTotalSuccessMillis:()J
      95: invokestatic  #59                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      98: aastore
      99: dup
     100: bipush        8
     102: aload_1
     103: invokevirtual #65                 // Method org/jumpmind/symmetric/model/NodeCommunication.getTotalFailMillis:()J
     106: invokestatic  #59                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     109: aastore
     110: dup
     111: bipush        9
     113: aload_1
     114: invokevirtual #66                 // Method org/jumpmind/symmetric/model/NodeCommunication.getLastLockTime:()Ljava/util/Date;
     117: aastore
     118: dup
     119: bipush        10
     121: aload_1
     122: invokevirtual #42                 // Method org/jumpmind/symmetric/model/NodeCommunication.getNodeId:()Ljava/lang/String;
     125: aastore
     126: dup
     127: bipush        11
     129: aload_1
     130: invokevirtual #54                 // Method org/jumpmind/symmetric/model/NodeCommunication.getCommunicationType:()Lorg/jumpmind/symmetric/model/NodeCommunication$CommunicationType;
     133: invokevirtual #29                 // Method org/jumpmind/symmetric/model/NodeCommunication$CommunicationType.name:()Ljava/lang/String;
     136: aastore
     137: invokeinterface #19,  3           // InterfaceMethod org/jumpmind/db/sql/ISqlTemplate.update:(Ljava/lang/String;[Ljava/lang/Object;)I
     142: if_icmpne     287
     145: aload_0
     146: getfield      #14                 // Field sqlTemplate:Lorg/jumpmind/db/sql/ISqlTemplate;
     149: aload_0
     150: iconst_1
     151: anewarray     #15                 // class java/lang/String
     154: dup
     155: iconst_0
     156: ldc           #67                 // String insertNodeCommunicationSql
     158: aastore
     159: invokevirtual #17                 // Method getSql:([Ljava/lang/String;)Ljava/lang/String;
     162: bipush        12
     164: anewarray     #18                 // class java/lang/Object
     167: dup
     168: iconst_0
     169: aload_1
     170: invokevirtual #56                 // Method org/jumpmind/symmetric/model/NodeCommunication.getLockTime:()Ljava/util/Date;
     173: aastore
     174: dup
     175: iconst_1
     176: aload_1
     177: invokevirtual #57                 // Method org/jumpmind/symmetric/model/NodeCommunication.getLockingServerId:()Ljava/lang/String;
     180: aastore
     181: dup
     182: iconst_2
     183: aload_1
     184: invokevirtual #58                 // Method org/jumpmind/symmetric/model/NodeCommunication.getLastLockMillis:()J
     187: invokestatic  #59                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     190: aastore
     191: dup
     192: iconst_3
     193: aload_1
     194: invokevirtual #60                 // Method org/jumpmind/symmetric/model/NodeCommunication.getSuccessCount:()J
     197: invokestatic  #59                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     200: aastore
     201: dup
     202: iconst_4
     203: aload_1
     204: invokevirtual #61                 // Method org/jumpmind/symmetric/model/NodeCommunication.getFailCount:()J
     207: invokestatic  #59                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     210: aastore
     211: dup
     212: iconst_5
     213: aload_1
     214: invokevirtual #62                 // Method org/jumpmind/symmetric/model/NodeCommunication.getTotalSuccessCount:()J
     217: invokestatic  #59                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     220: aastore
     221: dup
     222: bipush        6
     224: aload_1
     225: invokevirtual #63                 // Method org/jumpmind/symmetric/model/NodeCommunication.getTotalFailCount:()J
     228: invokestatic  #59                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     231: aastore
     232: dup
     233: bipush        7
     235: aload_1
     236: invokevirtual #64                 // Method org/jumpmind/symmetric/model/NodeCommunication.getTotalSuccessMillis:()J
     239: invokestatic  #59                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     242: aastore
     243: dup
     244: bipush        8
     246: aload_1
     247: invokevirtual #65                 // Method org/jumpmind/symmetric/model/NodeCommunication.getTotalFailMillis:()J
     250: invokestatic  #59                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     253: aastore
     254: dup
     255: bipush        9
     257: aload_1
     258: invokevirtual #66                 // Method org/jumpmind/symmetric/model/NodeCommunication.getLastLockTime:()Ljava/util/Date;
     261: aastore
     262: dup
     263: bipush        10
     265: aload_1
     266: invokevirtual #42                 // Method org/jumpmind/symmetric/model/NodeCommunication.getNodeId:()Ljava/lang/String;
     269: aastore
     270: dup
     271: bipush        11
     273: aload_1
     274: invokevirtual #54                 // Method org/jumpmind/symmetric/model/NodeCommunication.getCommunicationType:()Lorg/jumpmind/symmetric/model/NodeCommunication$CommunicationType;
     277: invokevirtual #29                 // Method org/jumpmind/symmetric/model/NodeCommunication$CommunicationType.name:()Ljava/lang/String;
     280: aastore
     281: invokeinterface #19,  3           // InterfaceMethod org/jumpmind/db/sql/ISqlTemplate.update:(Ljava/lang/String;[Ljava/lang/Object;)I
     286: pop
     287: return

  protected java.util.concurrent.ThreadPoolExecutor getExecutor(org.jumpmind.symmetric.model.NodeCommunication$CommunicationType);
    Code:
       0: aload_0
       1: getfield      #6                  // Field executors:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #68,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #69                 // class java/util/concurrent/ThreadPoolExecutor
      13: astore_2
      14: aload_2
      15: ifnonnull     205
      18: aload_0
      19: dup
      20: astore_3
      21: monitorenter
      22: aload_0
      23: getfield      #6                  // Field executors:Ljava/util/Map;
      26: aload_1
      27: invokeinterface #68,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      32: checkcast     #69                 // class java/util/concurrent/ThreadPoolExecutor
      35: astore_2
      36: aload_2
      37: ifnonnull     193
      40: ldc           #70                 // String
      42: astore        4
      44: getstatic     #32                 // Field org/jumpmind/symmetric/service/impl/NodeCommunicationService$3.$SwitchMap$org$jumpmind$symmetric$model$NodeCommunication$CommunicationType:[I
      47: aload_1
      48: invokevirtual #33                 // Method org/jumpmind/symmetric/model/NodeCommunication$CommunicationType.ordinal:()I
      51: iaload
      52: lookupswitch  { // 2
                     1: 80
                     2: 87
               default: 91
          }
      80: ldc           #71                 // String pull.thread.per.server.count
      82: astore        4
      84: goto          91
      87: ldc           #72                 // String push.thread.per.server.count
      89: astore        4
      91: aload_0
      92: getfield      #73                 // Field parameterService:Lorg/jumpmind/symmetric/service/IParameterService;
      95: aload         4
      97: iconst_1
      98: invokeinterface #74,  3           // InterfaceMethod org/jumpmind/symmetric/service/IParameterService.getInt:(Ljava/lang/String;I)I
     103: istore        5
     105: iload         5
     107: ifgt          134
     110: aload_0
     111: getfield      #20                 // Field log:Lorg/slf4j/Logger;
     114: ldc           #75                 // String {}={} is not a legal value. Defaulting to 1
     116: aload         4
     118: iload         5
     120: invokestatic  #22                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     123: invokeinterface #76,  4           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
     128: iconst_1
     129: istore        5
     131: goto          163
     134: iload         5
     136: iconst_1
     137: if_icmple     163
     140: aload_0
     141: getfield      #20                 // Field log:Lorg/slf4j/Logger;
     144: ldc           #77                 // String {} will use {} threads
     146: aload_1
     147: invokevirtual #29                 // Method org/jumpmind/symmetric/model/NodeCommunication$CommunicationType.name:()Ljava/lang/String;
     150: invokevirtual #78                 // Method java/lang/String.toLowerCase:()Ljava/lang/String;
     153: iload         5
     155: invokestatic  #22                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     158: invokeinterface #23,  4           // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
     163: iload         5
     165: new           #79                 // class org/jumpmind/symmetric/service/impl/NodeCommunicationService$1
     168: dup
     169: aload_0
     170: aload_1
     171: invokespecial #80                 // Method org/jumpmind/symmetric/service/impl/NodeCommunicationService$1."<init>":(Lorg/jumpmind/symmetric/service/impl/NodeCommunicationService;Lorg/jumpmind/symmetric/model/NodeCommunication$CommunicationType;)V
     174: invokestatic  #81                 // Method java/util/concurrent/Executors.newFixedThreadPool:(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;
     177: checkcast     #69                 // class java/util/concurrent/ThreadPoolExecutor
     180: astore_2
     181: aload_0
     182: getfield      #6                  // Field executors:Ljava/util/Map;
     185: aload_1
     186: aload_2
     187: invokeinterface #82,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     192: pop
     193: aload_3
     194: monitorexit
     195: goto          205
     198: astore        6
     200: aload_3
     201: monitorexit
     202: aload         6
     204: athrow
     205: aload_2
     206: areturn
    Exception table:
       from    to  target type
          22   195   198   any
         198   202   198   any

  public int getAvailableThreads(org.jumpmind.symmetric.model.NodeCommunication$CommunicationType);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #83                 // Method getExecutor:(Lorg/jumpmind/symmetric/model/NodeCommunication$CommunicationType;)Ljava/util/concurrent/ThreadPoolExecutor;
       5: astore_2
       6: aload_2
       7: invokevirtual #84                 // Method java/util/concurrent/ThreadPoolExecutor.getMaximumPoolSize:()I
      10: aload_2
      11: invokevirtual #85                 // Method java/util/concurrent/ThreadPoolExecutor.getActiveCount:()I
      14: isub
      15: ireturn

  protected java.util.Date getLockTimeoutDate(org.jumpmind.symmetric.model.NodeCommunication$CommunicationType);
    Code:
       0: ldc           #70                 // String
       2: astore_2
       3: getstatic     #32                 // Field org/jumpmind/symmetric/service/impl/NodeCommunicationService$3.$SwitchMap$org$jumpmind$symmetric$model$NodeCommunication$CommunicationType:[I
       6: aload_1
       7: invokevirtual #33                 // Method org/jumpmind/symmetric/model/NodeCommunication$CommunicationType.ordinal:()I
      10: iaload
      11: lookupswitch  { // 2
                     1: 36
                     2: 42
               default: 45
          }
      36: ldc           #86                 // String pull.lock.timeout.ms
      38: astore_2
      39: goto          45
      42: ldc           #87                 // String push.lock.timeout.ms
      44: astore_2
      45: new           #88                 // class java/util/Date
      48: dup
      49: invokespecial #89                 // Method java/util/Date."<init>":()V
      52: bipush        14
      54: aload_0
      55: getfield      #73                 // Field parameterService:Lorg/jumpmind/symmetric/service/IParameterService;
      58: aload_2
      59: ldc           #90                 // int 7200000
      61: invokeinterface #74,  3           // InterfaceMethod org/jumpmind/symmetric/service/IParameterService.getInt:(Ljava/lang/String;I)I
      66: ineg
      67: invokestatic  #91                 // Method org/apache/commons/lang/time/DateUtils.add:(Ljava/util/Date;II)Ljava/util/Date;
      70: areturn

  public boolean execute(org.jumpmind.symmetric.model.NodeCommunication, org.jumpmind.symmetric.model.RemoteNodeStatuses, org.jumpmind.symmetric.service.INodeCommunicationService$INodeCommunicationExecutor);
    Code:
       0: new           #88                 // class java/util/Date
       3: dup
       4: invokespecial #89                 // Method java/util/Date."<init>":()V
       7: astore        4
       9: aload_0
      10: aload_1
      11: invokevirtual #54                 // Method org/jumpmind/symmetric/model/NodeCommunication.getCommunicationType:()Lorg/jumpmind/symmetric/model/NodeCommunication$CommunicationType;
      14: invokevirtual #92                 // Method getLockTimeoutDate:(Lorg/jumpmind/symmetric/model/NodeCommunication$CommunicationType;)Ljava/util/Date;
      17: astore        5
      19: aload_0
      20: getfield      #14                 // Field sqlTemplate:Lorg/jumpmind/db/sql/ISqlTemplate;
      23: aload_0
      24: iconst_1
      25: anewarray     #15                 // class java/lang/String
      28: dup
      29: iconst_0
      30: ldc           #93                 // String aquireLockSql
      32: aastore
      33: invokevirtual #17                 // Method getSql:([Ljava/lang/String;)Ljava/lang/String;
      36: bipush        7
      38: anewarray     #18                 // class java/lang/Object
      41: dup
      42: iconst_0
      43: aload_0
      44: getfield      #3                  // Field serverId:Ljava/lang/String;
      47: aastore
      48: dup
      49: iconst_1
      50: aload         4
      52: aastore
      53: dup
      54: iconst_2
      55: aload         4
      57: aastore
      58: dup
      59: iconst_3
      60: aload_1
      61: invokevirtual #42                 // Method org/jumpmind/symmetric/model/NodeCommunication.getNodeId:()Ljava/lang/String;
      64: aastore
      65: dup
      66: iconst_4
      67: aload_1
      68: invokevirtual #54                 // Method org/jumpmind/symmetric/model/NodeCommunication.getCommunicationType:()Lorg/jumpmind/symmetric/model/NodeCommunication$CommunicationType;
      71: invokevirtual #29                 // Method org/jumpmind/symmetric/model/NodeCommunication$CommunicationType.name:()Ljava/lang/String;
      74: aastore
      75: dup
      76: iconst_5
      77: aload         5
      79: aastore
      80: dup
      81: bipush        6
      83: aload_0
      84: getfield      #3                  // Field serverId:Ljava/lang/String;
      87: aastore
      88: invokeinterface #19,  3           // InterfaceMethod org/jumpmind/db/sql/ISqlTemplate.update:(Ljava/lang/String;[Ljava/lang/Object;)I
      93: iconst_1
      94: if_icmpne     101
      97: iconst_1
      98: goto          102
     101: iconst_0
     102: istore        6
     104: iload         6
     106: ifeq          160
     109: aload_1
     110: aload         4
     112: invokevirtual #94                 // Method org/jumpmind/symmetric/model/NodeCommunication.setLastLockTime:(Ljava/util/Date;)V
     115: aload_1
     116: aload_0
     117: getfield      #3                  // Field serverId:Ljava/lang/String;
     120: invokevirtual #95                 // Method org/jumpmind/symmetric/model/NodeCommunication.setLockingServerId:(Ljava/lang/String;)V
     123: aload_2
     124: aload_1
     125: invokevirtual #96                 // Method org/jumpmind/symmetric/model/NodeCommunication.getNode:()Lorg/jumpmind/symmetric/model/Node;
     128: invokevirtual #97                 // Method org/jumpmind/symmetric/model/RemoteNodeStatuses.add:(Lorg/jumpmind/symmetric/model/Node;)Lorg/jumpmind/symmetric/model/RemoteNodeStatus;
     131: astore        7
     133: aload_0
     134: aload_1
     135: invokevirtual #54                 // Method org/jumpmind/symmetric/model/NodeCommunication.getCommunicationType:()Lorg/jumpmind/symmetric/model/NodeCommunication$CommunicationType;
     138: invokevirtual #83                 // Method getExecutor:(Lorg/jumpmind/symmetric/model/NodeCommunication$CommunicationType;)Ljava/util/concurrent/ThreadPoolExecutor;
     141: astore        8
     143: aload         8
     145: new           #98                 // class org/jumpmind/symmetric/service/impl/NodeCommunicationService$2
     148: dup
     149: aload_0
     150: aload_3
     151: aload_1
     152: aload         7
     154: invokespecial #99                 // Method org/jumpmind/symmetric/service/impl/NodeCommunicationService$2."<init>":(Lorg/jumpmind/symmetric/service/impl/NodeCommunicationService;Lorg/jumpmind/symmetric/service/INodeCommunicationService$INodeCommunicationExecutor;Lorg/jumpmind/symmetric/model/NodeCommunication;Lorg/jumpmind/symmetric/model/RemoteNodeStatus;)V
     157: invokevirtual #100                // Method java/util/concurrent/ThreadPoolExecutor.execute:(Ljava/lang/Runnable;)V
     160: iload         6
     162: ireturn

  public void stop();
    Code:
       0: new           #101                // class java/util/HashSet
       3: dup
       4: aload_0
       5: getfield      #6                  // Field executors:Ljava/util/Map;
       8: invokeinterface #102,  1          // InterfaceMethod java/util/Map.keySet:()Ljava/util/Set;
      13: invokespecial #103                // Method java/util/HashSet."<init>":(Ljava/util/Collection;)V
      16: astore_1
      17: aload_1
      18: invokeinterface #104,  1          // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      23: astore_2
      24: aload_2
      25: invokeinterface #38,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      30: ifeq          98
      33: aload_2
      34: invokeinterface #39,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      39: checkcast     #105                // class org/jumpmind/symmetric/model/NodeCommunication$CommunicationType
      42: astore_3
      43: aload_0
      44: getfield      #6                  // Field executors:Ljava/util/Map;
      47: aload_3
      48: invokeinterface #68,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      53: checkcast     #106                // class java/util/concurrent/ExecutorService
      56: astore        4
      58: aload         4
      60: invokeinterface #107,  1          // InterfaceMethod java/util/concurrent/ExecutorService.shutdownNow:()Ljava/util/List;
      65: pop
      66: jsr           80
      69: goto          95
      72: astore        5
      74: jsr           80
      77: aload         5
      79: athrow
      80: astore        6
      82: aload_0
      83: getfield      #6                  // Field executors:Ljava/util/Map;
      86: aload_3
      87: invokeinterface #108,  2          // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      92: pop
      93: ret           6
      95: goto          24
      98: return
    Exception table:
       from    to  target type
          43    69    72   any
          72    77    72   any
}
