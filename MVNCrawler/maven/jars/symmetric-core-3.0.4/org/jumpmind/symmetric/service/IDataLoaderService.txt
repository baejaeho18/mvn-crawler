Compiled from "IDataLoaderService.java"
public interface org.jumpmind.symmetric.service.IDataLoaderService {
  public abstract org.jumpmind.symmetric.model.RemoteNodeStatus loadDataFromPull(org.jumpmind.symmetric.model.Node) throws java.io.IOException;

  public abstract void loadDataFromPull(org.jumpmind.symmetric.model.Node, org.jumpmind.symmetric.model.RemoteNodeStatus) throws java.io.IOException;

  public abstract void loadDataFromPush(org.jumpmind.symmetric.model.Node, java.io.InputStream, java.io.OutputStream) throws java.io.IOException;

  public abstract void addDataLoaderFactory(org.jumpmind.symmetric.load.IDataLoaderFactory);

  public abstract java.util.List<java.lang.String> getAvailableDataLoaderFactories();

  public abstract void addDatabaseWriterFilter(org.jumpmind.symmetric.io.data.writer.IDatabaseWriterFilter);

  public abstract void removeDatabaseWriterFilter(org.jumpmind.symmetric.io.data.writer.IDatabaseWriterFilter);

  public abstract java.util.List<org.jumpmind.symmetric.model.IncomingBatch> loadDataBatch(java.lang.String) throws java.io.IOException;

  public abstract java.util.List<org.jumpmind.symmetric.service.impl.DataLoaderService$ConflictNodeGroupLink> getConflictSettingsNodeGroupLinks(org.jumpmind.symmetric.model.NodeGroupLink, boolean);

  public abstract java.util.List<org.jumpmind.symmetric.service.impl.DataLoaderService$ConflictNodeGroupLink> getConflictSettingsNodeGroupLinks();

  public abstract void delete(org.jumpmind.symmetric.service.impl.DataLoaderService$ConflictNodeGroupLink);

  public abstract void save(org.jumpmind.symmetric.service.impl.DataLoaderService$ConflictNodeGroupLink);

  public abstract void reloadConflictNodeGroupLinks();

  public abstract java.util.List<org.jumpmind.symmetric.model.IncomingError> getIncomingErrors(long, java.lang.String);

  public abstract org.jumpmind.symmetric.model.IncomingError getCurrentIncomingError(long, java.lang.String);

  public abstract void insertIncomingError(org.jumpmind.symmetric.model.IncomingError);

  public abstract void updateIncomingError(org.jumpmind.symmetric.model.IncomingError);
}
