Compiled from "DataLoaderServiceSqlMap.java"
public class org.jumpmind.symmetric.service.impl.DataLoaderServiceSqlMap extends org.jumpmind.symmetric.service.impl.AbstractSqlMap {
  org.jumpmind.symmetric.service.impl.DataLoaderServiceSqlMap(org.jumpmind.db.platform.IDatabasePlatform, java.util.Map<java.lang.String, java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #1                  // Method org/jumpmind/symmetric/service/impl/AbstractSqlMap."<init>":(Lorg/jumpmind/db/platform/IDatabasePlatform;Ljava/util/Map;)V
       6: aload_0
       7: ldc           #2                  // String updateConflictSettingsSql
       9: ldc           #3                  // String update $(conflict) set                                                                        source_node_group_id=?, target_node_group_id=?,                                               target_channel_id=?, target_catalog_name=?, target_schema_name=?, target_table_name=?,        detect_type=?, resolve_type=?, ping_back=?, resolve_changes_only=?,                           resolve_row_only=?, detect_expression=?,                                                      last_update_by=?, last_update_time=current_timestamp where conflict_id=?
      11: invokevirtual #4                  // Method putSql:(Ljava/lang/String;Ljava/lang/String;)V
      14: aload_0
      15: ldc           #5                  // String insertConflictSettingsSql
      17: ldc           #6                  // String insert into $(conflict) (                                                                      source_node_group_id, target_node_group_id,                                                    target_channel_id, target_catalog_name, target_schema_name, target_table_name,                 detect_type, resolve_type, ping_back,                                                          resolve_changes_only, resolve_row_only, detect_expression,                                     create_time, last_update_by, last_update_time, conflict_id)                                    values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, current_timestamp, ?, current_timestamp, ?)
      19: invokevirtual #4                  // Method putSql:(Ljava/lang/String;Ljava/lang/String;)V
      22: aload_0
      23: ldc           #7                  // String deleteConflictSettingsSql
      25: ldc           #8                  // String delete from $(conflict) where conflict_id=?
      27: invokevirtual #4                  // Method putSql:(Ljava/lang/String;Ljava/lang/String;)V
      30: aload_0
      31: ldc           #9                  // String selectConflictSettingsSql
      33: ldc           #10                 // String select source_node_group_id, target_node_group_id,                                              target_channel_id, target_catalog_name, target_schema_name, target_table_name,           detect_type, resolve_type, ping_back,                                                    resolve_changes_only, resolve_row_only, detect_expression,                               create_time, last_update_by, last_update_time, conflict_id from $(conflict)
      35: invokevirtual #4                  // Method putSql:(Ljava/lang/String;Ljava/lang/String;)V
      38: aload_0
      39: ldc           #11                 // String selectIncomingErrorSql
      41: ldc           #12                 // String select batch_id, node_id, failed_row_number, failed_line_number, target_catalog_name, target_schema_name, target_table_name, event_type, binary_encoding, column_names, pk_column_names, row_data, old_data, resolve_data, resolve_ignore, create_time, last_update_by, last_update_time from $(incoming_error) where batch_id = ? and node_id = ?
      43: invokevirtual #4                  // Method putSql:(Ljava/lang/String;Ljava/lang/String;)V
      46: aload_0
      47: ldc           #13                 // String selectCurrentIncomingErrorSql
      49: ldc           #14                 // String select e.batch_id, e.node_id, e.failed_row_number, e.failed_line_number, e.target_catalog_name, e.target_schema_name, e.target_table_name, e.event_type, e.binary_encoding, e.column_names, e.pk_column_names, e.row_data, e.old_data, e.resolve_data, e.resolve_ignore, e.create_time, e.last_update_by, e.last_update_time from $(incoming_error) e inner join $(incoming_batch) b on b.batch_id = e.batch_id and b.node_id = e.node_id and b.failed_row_number = e.failed_row_number where b.batch_id = ? and b.node_id = ?
      51: invokevirtual #4                  // Method putSql:(Ljava/lang/String;Ljava/lang/String;)V
      54: aload_0
      55: ldc           #15                 // String insertIncomingErrorSql
      57: ldc           #16                 // String insert into $(incoming_error) (batch_id, node_id, failed_row_number, failed_line_number, target_catalog_name, target_schema_name, target_table_name, event_type, binary_encoding, column_names, pk_column_names, row_data, old_data, resolve_data, resolve_ignore, create_time, last_update_by, last_update_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
      59: invokevirtual #4                  // Method putSql:(Ljava/lang/String;Ljava/lang/String;)V
      62: aload_0
      63: ldc           #17                 // String updateIncomingErrorSql
      65: ldc           #18                 // String update $(incoming_error) set resolve_data = ?, resolve_ignore = ? where batch_id = ? and node_id = ? and failed_row_number = ?
      67: invokevirtual #4                  // Method putSql:(Ljava/lang/String;Ljava/lang/String;)V
      70: return
}
