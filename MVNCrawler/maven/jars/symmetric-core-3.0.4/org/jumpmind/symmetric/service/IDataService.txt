Compiled from "IDataService.java"
public interface org.jumpmind.symmetric.service.IDataService {
  public abstract java.lang.String reloadNode(java.lang.String);

  public abstract java.lang.String reloadTable(java.lang.String, java.lang.String, java.lang.String, java.lang.String);

  public abstract java.lang.String reloadTable(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String);

  public abstract java.lang.String sendSQL(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean);

  public abstract void insertReloadEvents(org.jumpmind.symmetric.model.Node);

  public abstract void insertReloadEvent(org.jumpmind.symmetric.model.Node, org.jumpmind.symmetric.model.TriggerRouter);

  public abstract void insertReloadEvent(org.jumpmind.db.sql.ISqlTransaction, org.jumpmind.symmetric.model.Node, org.jumpmind.symmetric.model.TriggerRouter, java.lang.String);

  public abstract void sendScript(java.lang.String, java.lang.String, boolean);

  public abstract void heartbeat(boolean);

  public abstract void insertHeartbeatEvent(org.jumpmind.symmetric.model.Node, boolean);

  public abstract long insertData(org.jumpmind.symmetric.model.Data);

  public abstract void insertDataEvents(org.jumpmind.db.sql.ISqlTransaction, java.util.List<org.jumpmind.symmetric.model.DataEvent>);

  public abstract void insertDataAndDataEventAndOutgoingBatch(org.jumpmind.symmetric.model.Data, java.lang.String, java.util.List<org.jumpmind.symmetric.model.Node>, java.lang.String, boolean);

  public abstract void insertDataAndDataEventAndOutgoingBatch(org.jumpmind.symmetric.model.Data, java.lang.String, java.lang.String, boolean);

  public abstract void insertPurgeEvent(org.jumpmind.symmetric.model.Node, org.jumpmind.symmetric.model.TriggerRouter, boolean);

  public abstract void insertSqlEvent(org.jumpmind.db.sql.ISqlTransaction, org.jumpmind.symmetric.model.Node, java.lang.String, boolean);

  public abstract void insertSqlEvent(org.jumpmind.symmetric.model.Node, org.jumpmind.symmetric.model.Trigger, java.lang.String, boolean);

  public abstract void insertSqlEvent(org.jumpmind.symmetric.model.Node, java.lang.String, boolean);

  public abstract void insertCreateEvent(org.jumpmind.symmetric.model.Node, org.jumpmind.symmetric.model.TriggerRouter, java.lang.String, boolean);

  public abstract int countDataInRange(long, long);

  public abstract void checkForAndUpdateMissingChannelIds(long, long);

  public abstract java.util.List<org.jumpmind.symmetric.model.DataGap> findDataGapsByStatus(org.jumpmind.symmetric.model.DataGap$Status);

  public abstract java.util.List<org.jumpmind.symmetric.model.DataGap> findDataGaps();

  public abstract java.util.Date findCreateTimeOfEvent(long);

  public abstract java.util.Date findCreateTimeOfData(long);

  public abstract org.jumpmind.symmetric.model.Data createData(java.lang.String, java.lang.String, java.lang.String);

  public abstract org.jumpmind.symmetric.model.Data createData(java.lang.String, java.lang.String, java.lang.String, java.lang.String);

  public abstract java.util.Map<java.lang.String, java.lang.String> getRowDataAsMap(org.jumpmind.symmetric.model.Data);

  public abstract void setRowDataFromMap(org.jumpmind.symmetric.model.Data, java.util.Map<java.lang.String, java.lang.String>);

  public abstract void addReloadListener(org.jumpmind.symmetric.load.IReloadListener);

  public abstract void addHeartbeatListener(org.jumpmind.symmetric.ext.IHeartbeatListener);

  public abstract void setReloadListeners(java.util.List<org.jumpmind.symmetric.load.IReloadListener>);

  public abstract boolean removeReloadListener(org.jumpmind.symmetric.load.IReloadListener);

  public abstract org.jumpmind.symmetric.model.Data mapData(org.jumpmind.db.sql.Row);

  public abstract java.util.List<java.lang.Number> listDataIds(long, java.lang.String);

  public abstract java.util.List<org.jumpmind.symmetric.model.Data> listData(long, java.lang.String, long, java.lang.String, int);

  public abstract void insertDataGap(org.jumpmind.symmetric.model.DataGap);

  public abstract void updateDataGap(org.jumpmind.symmetric.model.DataGap, org.jumpmind.symmetric.model.DataGap$Status);

  public abstract void deleteDataGap(org.jumpmind.symmetric.model.DataGap);

  public abstract long findMaxDataId();

  public abstract org.jumpmind.db.sql.ISqlReadCursor<org.jumpmind.symmetric.model.Data> selectDataFor(org.jumpmind.symmetric.io.data.Batch);
}
