Compiled from "Trace.scala"
public interface zio.aws.xray.model.Trace$ReadOnly {
  public static zio.aws.xray.model.Trace asEditable$(zio.aws.xray.model.Trace$ReadOnly);
    Code:
       0: aload_0
       1: invokespecial #19                 // InterfaceMethod asEditable:()Lzio/aws/xray/model/Trace;
       4: areturn

  public default zio.aws.xray.model.Trace asEditable();
    Code:
       0: getstatic     #26                 // Field zio/aws/xray/model/Trace$.MODULE$:Lzio/aws/xray/model/Trace$;
       3: aload_0
       4: invokeinterface #30,  1           // InterfaceMethod id:()Lzio/prelude/data/Optional;
       9: aload_0
      10: invokedynamic #51,  0             // InvokeDynamic #0:apply:(Lzio/aws/xray/model/Trace$ReadOnly;)Lscala/Function1;
      15: invokeinterface #57,  2           // InterfaceMethod zio/prelude/data/Optional.map:(Lscala/Function1;)Lzio/prelude/data/Optional;
      20: aload_0
      21: invokeinterface #60,  1           // InterfaceMethod duration:()Lzio/prelude/data/Optional;
      26: aload_0
      27: invokedynamic #70,  0             // InvokeDynamic #1:apply$mcDD$sp:(Lzio/aws/xray/model/Trace$ReadOnly;)Lscala/runtime/java8/JFunction1$mcDD$sp;
      32: invokeinterface #57,  2           // InterfaceMethod zio/prelude/data/Optional.map:(Lscala/Function1;)Lzio/prelude/data/Optional;
      37: aload_0
      38: invokeinterface #73,  1           // InterfaceMethod limitExceeded:()Lzio/prelude/data/Optional;
      43: aload_0
      44: invokedynamic #80,  0             // InvokeDynamic #2:apply:(Lzio/aws/xray/model/Trace$ReadOnly;)Lscala/Function1;
      49: invokeinterface #57,  2           // InterfaceMethod zio/prelude/data/Optional.map:(Lscala/Function1;)Lzio/prelude/data/Optional;
      54: aload_0
      55: invokeinterface #83,  1           // InterfaceMethod segments:()Lzio/prelude/data/Optional;
      60: aload_0
      61: invokedynamic #90,  0             // InvokeDynamic #3:apply:(Lzio/aws/xray/model/Trace$ReadOnly;)Lscala/Function1;
      66: invokeinterface #57,  2           // InterfaceMethod zio/prelude/data/Optional.map:(Lscala/Function1;)Lzio/prelude/data/Optional;
      71: invokevirtual #93                 // Method zio/aws/xray/model/Trace$.apply:(Lzio/prelude/data/Optional;Lzio/prelude/data/Optional;Lzio/prelude/data/Optional;Lzio/prelude/data/Optional;)Lzio/aws/xray/model/Trace;
      74: areturn

  public abstract zio.prelude.data.Optional<java.lang.String> id();

  public abstract zio.prelude.data.Optional<java.lang.Object> duration();

  public abstract zio.prelude.data.Optional<java.lang.Object> limitExceeded();

  public abstract zio.prelude.data.Optional<scala.collection.immutable.List<zio.aws.xray.model.Segment$ReadOnly>> segments();

  public static zio.ZIO getId$(zio.aws.xray.model.Trace$ReadOnly);
    Code:
       0: aload_0
       1: invokespecial #103                // InterfaceMethod getId:()Lzio/ZIO;
       4: areturn

  public default zio.ZIO<java.lang.Object, zio.aws.core.AwsError, java.lang.String> getId();
    Code:
       0: getstatic     #109                // Field zio/aws/core/AwsError$.MODULE$:Lzio/aws/core/AwsError$;
       3: ldc           #110                // String id
       5: aload_0
       6: invokedynamic #120,  0            // InvokeDynamic #4:apply:(Lzio/aws/xray/model/Trace$ReadOnly;)Lscala/Function0;
      11: invokevirtual #124                // Method zio/aws/core/AwsError$.unwrapOptionField:(Ljava/lang/String;Lscala/Function0;)Lzio/ZIO;
      14: areturn

  public static zio.ZIO getDuration$(zio.aws.xray.model.Trace$ReadOnly);
    Code:
       0: aload_0
       1: invokespecial #128                // InterfaceMethod getDuration:()Lzio/ZIO;
       4: areturn

  public default zio.ZIO<java.lang.Object, zio.aws.core.AwsError, java.lang.Object> getDuration();
    Code:
       0: getstatic     #109                // Field zio/aws/core/AwsError$.MODULE$:Lzio/aws/core/AwsError$;
       3: ldc           #130                // String duration
       5: aload_0
       6: invokedynamic #135,  0            // InvokeDynamic #5:apply:(Lzio/aws/xray/model/Trace$ReadOnly;)Lscala/Function0;
      11: invokevirtual #124                // Method zio/aws/core/AwsError$.unwrapOptionField:(Ljava/lang/String;Lscala/Function0;)Lzio/ZIO;
      14: areturn

  public static zio.ZIO getLimitExceeded$(zio.aws.xray.model.Trace$ReadOnly);
    Code:
       0: aload_0
       1: invokespecial #139                // InterfaceMethod getLimitExceeded:()Lzio/ZIO;
       4: areturn

  public default zio.ZIO<java.lang.Object, zio.aws.core.AwsError, java.lang.Object> getLimitExceeded();
    Code:
       0: getstatic     #109                // Field zio/aws/core/AwsError$.MODULE$:Lzio/aws/core/AwsError$;
       3: ldc           #140                // String limitExceeded
       5: aload_0
       6: invokedynamic #145,  0            // InvokeDynamic #6:apply:(Lzio/aws/xray/model/Trace$ReadOnly;)Lscala/Function0;
      11: invokevirtual #124                // Method zio/aws/core/AwsError$.unwrapOptionField:(Ljava/lang/String;Lscala/Function0;)Lzio/ZIO;
      14: areturn

  public static zio.ZIO getSegments$(zio.aws.xray.model.Trace$ReadOnly);
    Code:
       0: aload_0
       1: invokespecial #149                // InterfaceMethod getSegments:()Lzio/ZIO;
       4: areturn

  public default zio.ZIO<java.lang.Object, zio.aws.core.AwsError, scala.collection.immutable.List<zio.aws.xray.model.Segment$ReadOnly>> getSegments();
    Code:
       0: getstatic     #109                // Field zio/aws/core/AwsError$.MODULE$:Lzio/aws/core/AwsError$;
       3: ldc           #151                // String segments
       5: aload_0
       6: invokedynamic #156,  0            // InvokeDynamic #7:apply:(Lzio/aws/xray/model/Trace$ReadOnly;)Lscala/Function0;
      11: invokevirtual #124                // Method zio/aws/core/AwsError$.unwrapOptionField:(Ljava/lang/String;Lscala/Function0;)Lzio/ZIO;
      14: areturn

  private java.lang.String asEditable$$anonfun$1(java.lang.String);
    Code:
       0: aload_1
       1: areturn

  private double asEditable$$anonfun$2(double);
    Code:
       0: dload_1
       1: dreturn

  private boolean asEditable$$anonfun$3(boolean);
    Code:
       0: iload_1
       1: ireturn

  private boolean asEditable$$anonfun$adapted$1(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #167                // Method scala/runtime/BoxesRunTime.unboxToBoolean:(Ljava/lang/Object;)Z
       5: invokespecial #169                // InterfaceMethod asEditable$$anonfun$3:(Z)Z
       8: ireturn

  private zio.aws.xray.model.Segment asEditable$$anonfun$4$$anonfun$1(zio.aws.xray.model.Segment$ReadOnly);
    Code:
       0: aload_1
       1: invokeinterface #176,  1          // InterfaceMethod zio/aws/xray/model/Segment$ReadOnly.asEditable:()Lzio/aws/xray/model/Segment;
       6: areturn

  private scala.collection.immutable.List asEditable$$anonfun$4(scala.collection.immutable.List);
    Code:
       0: aload_1
       1: aload_0
       2: invokedynamic #182,  0            // InvokeDynamic #8:apply:(Lzio/aws/xray/model/Trace$ReadOnly;)Lscala/Function1;
       7: invokevirtual #187                // Method scala/collection/immutable/List.map:(Lscala/Function1;)Lscala/collection/immutable/List;
      10: areturn

  private zio.prelude.data.Optional getId$$anonfun$1();
    Code:
       0: aload_0
       1: invokeinterface #30,  1           // InterfaceMethod id:()Lzio/prelude/data/Optional;
       6: areturn

  private zio.prelude.data.Optional getDuration$$anonfun$1();
    Code:
       0: aload_0
       1: invokeinterface #60,  1           // InterfaceMethod duration:()Lzio/prelude/data/Optional;
       6: areturn

  private zio.prelude.data.Optional getLimitExceeded$$anonfun$1();
    Code:
       0: aload_0
       1: invokeinterface #73,  1           // InterfaceMethod limitExceeded:()Lzio/prelude/data/Optional;
       6: areturn

  private zio.prelude.data.Optional getSegments$$anonfun$1();
    Code:
       0: aload_0
       1: invokeinterface #83,  1           // InterfaceMethod segments:()Lzio/prelude/data/Optional;
       6: areturn

  private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda);
    Code:
       0: aload_0
       1: invokedynamic #200,  0            // InvokeDynamic #9:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
       6: areturn
}
