Compiled from "SamplingTargetDocument.scala"
public interface zio.aws.xray.model.SamplingTargetDocument$ReadOnly {
  public static zio.aws.xray.model.SamplingTargetDocument asEditable$(zio.aws.xray.model.SamplingTargetDocument$ReadOnly);
    Code:
       0: aload_0
       1: invokespecial #15                 // InterfaceMethod asEditable:()Lzio/aws/xray/model/SamplingTargetDocument;
       4: areturn

  public default zio.aws.xray.model.SamplingTargetDocument asEditable();
    Code:
       0: getstatic     #22                 // Field zio/aws/xray/model/SamplingTargetDocument$.MODULE$:Lzio/aws/xray/model/SamplingTargetDocument$;
       3: aload_0
       4: invokeinterface #26,  1           // InterfaceMethod ruleName:()Lzio/prelude/data/Optional;
       9: aload_0
      10: invokedynamic #47,  0             // InvokeDynamic #0:apply:(Lzio/aws/xray/model/SamplingTargetDocument$ReadOnly;)Lscala/Function1;
      15: invokeinterface #53,  2           // InterfaceMethod zio/prelude/data/Optional.map:(Lscala/Function1;)Lzio/prelude/data/Optional;
      20: aload_0
      21: invokeinterface #56,  1           // InterfaceMethod fixedRate:()Lzio/prelude/data/Optional;
      26: aload_0
      27: invokedynamic #66,  0             // InvokeDynamic #1:apply$mcDD$sp:(Lzio/aws/xray/model/SamplingTargetDocument$ReadOnly;)Lscala/runtime/java8/JFunction1$mcDD$sp;
      32: invokeinterface #53,  2           // InterfaceMethod zio/prelude/data/Optional.map:(Lscala/Function1;)Lzio/prelude/data/Optional;
      37: aload_0
      38: invokeinterface #69,  1           // InterfaceMethod reservoirQuota:()Lzio/prelude/data/Optional;
      43: aload_0
      44: invokedynamic #79,  0             // InvokeDynamic #2:apply$mcII$sp:(Lzio/aws/xray/model/SamplingTargetDocument$ReadOnly;)Lscala/runtime/java8/JFunction1$mcII$sp;
      49: invokeinterface #53,  2           // InterfaceMethod zio/prelude/data/Optional.map:(Lscala/Function1;)Lzio/prelude/data/Optional;
      54: aload_0
      55: invokeinterface #82,  1           // InterfaceMethod reservoirQuotaTTL:()Lzio/prelude/data/Optional;
      60: aload_0
      61: invokedynamic #89,  0             // InvokeDynamic #3:apply:(Lzio/aws/xray/model/SamplingTargetDocument$ReadOnly;)Lscala/Function1;
      66: invokeinterface #53,  2           // InterfaceMethod zio/prelude/data/Optional.map:(Lscala/Function1;)Lzio/prelude/data/Optional;
      71: aload_0
      72: invokeinterface #92,  1           // InterfaceMethod interval:()Lzio/prelude/data/Optional;
      77: aload_0
      78: invokedynamic #97,  0             // InvokeDynamic #4:apply$mcII$sp:(Lzio/aws/xray/model/SamplingTargetDocument$ReadOnly;)Lscala/runtime/java8/JFunction1$mcII$sp;
      83: invokeinterface #53,  2           // InterfaceMethod zio/prelude/data/Optional.map:(Lscala/Function1;)Lzio/prelude/data/Optional;
      88: invokevirtual #100                // Method zio/aws/xray/model/SamplingTargetDocument$.apply:(Lzio/prelude/data/Optional;Lzio/prelude/data/Optional;Lzio/prelude/data/Optional;Lzio/prelude/data/Optional;Lzio/prelude/data/Optional;)Lzio/aws/xray/model/SamplingTargetDocument;
      91: areturn

  public abstract zio.prelude.data.Optional<java.lang.String> ruleName();

  public abstract zio.prelude.data.Optional<java.lang.Object> fixedRate();

  public abstract zio.prelude.data.Optional<java.lang.Object> reservoirQuota();

  public abstract zio.prelude.data.Optional<java.time.Instant> reservoirQuotaTTL();

  public abstract zio.prelude.data.Optional<java.lang.Object> interval();

  public static zio.ZIO getRuleName$(zio.aws.xray.model.SamplingTargetDocument$ReadOnly);
    Code:
       0: aload_0
       1: invokespecial #110                // InterfaceMethod getRuleName:()Lzio/ZIO;
       4: areturn

  public default zio.ZIO<java.lang.Object, zio.aws.core.AwsError, java.lang.String> getRuleName();
    Code:
       0: getstatic     #116                // Field zio/aws/core/AwsError$.MODULE$:Lzio/aws/core/AwsError$;
       3: ldc           #117                // String ruleName
       5: aload_0
       6: invokedynamic #127,  0            // InvokeDynamic #5:apply:(Lzio/aws/xray/model/SamplingTargetDocument$ReadOnly;)Lscala/Function0;
      11: invokevirtual #131                // Method zio/aws/core/AwsError$.unwrapOptionField:(Ljava/lang/String;Lscala/Function0;)Lzio/ZIO;
      14: areturn

  public static zio.ZIO getFixedRate$(zio.aws.xray.model.SamplingTargetDocument$ReadOnly);
    Code:
       0: aload_0
       1: invokespecial #135                // InterfaceMethod getFixedRate:()Lzio/ZIO;
       4: areturn

  public default zio.ZIO<java.lang.Object, zio.aws.core.AwsError, java.lang.Object> getFixedRate();
    Code:
       0: getstatic     #116                // Field zio/aws/core/AwsError$.MODULE$:Lzio/aws/core/AwsError$;
       3: ldc           #137                // String fixedRate
       5: aload_0
       6: invokedynamic #142,  0            // InvokeDynamic #6:apply:(Lzio/aws/xray/model/SamplingTargetDocument$ReadOnly;)Lscala/Function0;
      11: invokevirtual #131                // Method zio/aws/core/AwsError$.unwrapOptionField:(Ljava/lang/String;Lscala/Function0;)Lzio/ZIO;
      14: areturn

  public static zio.ZIO getReservoirQuota$(zio.aws.xray.model.SamplingTargetDocument$ReadOnly);
    Code:
       0: aload_0
       1: invokespecial #146                // InterfaceMethod getReservoirQuota:()Lzio/ZIO;
       4: areturn

  public default zio.ZIO<java.lang.Object, zio.aws.core.AwsError, java.lang.Object> getReservoirQuota();
    Code:
       0: getstatic     #116                // Field zio/aws/core/AwsError$.MODULE$:Lzio/aws/core/AwsError$;
       3: ldc           #147                // String reservoirQuota
       5: aload_0
       6: invokedynamic #152,  0            // InvokeDynamic #7:apply:(Lzio/aws/xray/model/SamplingTargetDocument$ReadOnly;)Lscala/Function0;
      11: invokevirtual #131                // Method zio/aws/core/AwsError$.unwrapOptionField:(Ljava/lang/String;Lscala/Function0;)Lzio/ZIO;
      14: areturn

  public static zio.ZIO getReservoirQuotaTTL$(zio.aws.xray.model.SamplingTargetDocument$ReadOnly);
    Code:
       0: aload_0
       1: invokespecial #156                // InterfaceMethod getReservoirQuotaTTL:()Lzio/ZIO;
       4: areturn

  public default zio.ZIO<java.lang.Object, zio.aws.core.AwsError, java.time.Instant> getReservoirQuotaTTL();
    Code:
       0: getstatic     #116                // Field zio/aws/core/AwsError$.MODULE$:Lzio/aws/core/AwsError$;
       3: ldc           #158                // String reservoirQuotaTTL
       5: aload_0
       6: invokedynamic #163,  0            // InvokeDynamic #8:apply:(Lzio/aws/xray/model/SamplingTargetDocument$ReadOnly;)Lscala/Function0;
      11: invokevirtual #131                // Method zio/aws/core/AwsError$.unwrapOptionField:(Ljava/lang/String;Lscala/Function0;)Lzio/ZIO;
      14: areturn

  public static zio.ZIO getInterval$(zio.aws.xray.model.SamplingTargetDocument$ReadOnly);
    Code:
       0: aload_0
       1: invokespecial #167                // InterfaceMethod getInterval:()Lzio/ZIO;
       4: areturn

  public default zio.ZIO<java.lang.Object, zio.aws.core.AwsError, java.lang.Object> getInterval();
    Code:
       0: getstatic     #116                // Field zio/aws/core/AwsError$.MODULE$:Lzio/aws/core/AwsError$;
       3: ldc           #168                // String interval
       5: aload_0
       6: invokedynamic #173,  0            // InvokeDynamic #9:apply:(Lzio/aws/xray/model/SamplingTargetDocument$ReadOnly;)Lscala/Function0;
      11: invokevirtual #131                // Method zio/aws/core/AwsError$.unwrapOptionField:(Ljava/lang/String;Lscala/Function0;)Lzio/ZIO;
      14: areturn

  private java.lang.String asEditable$$anonfun$1(java.lang.String);
    Code:
       0: aload_1
       1: areturn

  private double asEditable$$anonfun$2(double);
    Code:
       0: dload_1
       1: dreturn

  private int asEditable$$anonfun$3(int);
    Code:
       0: iload_1
       1: ireturn

  private java.time.Instant asEditable$$anonfun$4(java.time.Instant);
    Code:
       0: aload_1
       1: areturn

  private int asEditable$$anonfun$5(int);
    Code:
       0: iload_1
       1: ireturn

  private zio.prelude.data.Optional getRuleName$$anonfun$1();
    Code:
       0: aload_0
       1: invokeinterface #26,  1           // InterfaceMethod ruleName:()Lzio/prelude/data/Optional;
       6: areturn

  private zio.prelude.data.Optional getFixedRate$$anonfun$1();
    Code:
       0: aload_0
       1: invokeinterface #56,  1           // InterfaceMethod fixedRate:()Lzio/prelude/data/Optional;
       6: areturn

  private zio.prelude.data.Optional getReservoirQuota$$anonfun$1();
    Code:
       0: aload_0
       1: invokeinterface #69,  1           // InterfaceMethod reservoirQuota:()Lzio/prelude/data/Optional;
       6: areturn

  private zio.prelude.data.Optional getReservoirQuotaTTL$$anonfun$1();
    Code:
       0: aload_0
       1: invokeinterface #82,  1           // InterfaceMethod reservoirQuotaTTL:()Lzio/prelude/data/Optional;
       6: areturn

  private zio.prelude.data.Optional getInterval$$anonfun$1();
    Code:
       0: aload_0
       1: invokeinterface #92,  1           // InterfaceMethod interval:()Lzio/prelude/data/Optional;
       6: areturn

  private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda);
    Code:
       0: aload_0
       1: invokedynamic #190,  0            // InvokeDynamic #10:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
       6: areturn
}
