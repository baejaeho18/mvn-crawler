Compiled from "Callback.java"
public interface coldsrc.coldlib.util.functional.Callback<V> extends coldsrc.coldlib.util.functional.Callable<V> {
  public static <V> coldsrc.coldlib.util.functional.Callback<V> mono();
    Code:
       0: new           #1                  // class coldsrc/coldlib/util/functional/Callback$1
       3: dup
       4: invokespecial #3                  // Method coldsrc/coldlib/util/functional/Callback$1."<init>":()V
       7: areturn

  public static <V> coldsrc.coldlib.util.functional.Callback<V> multi();
    Code:
       0: new           #7                  // class coldsrc/coldlib/util/functional/Callback$2
       3: dup
       4: invokespecial #9                  // Method coldsrc/coldlib/util/functional/Callback$2."<init>":()V
       7: areturn

  public default coldsrc.coldlib.util.functional.Callback<V> then(java.util.function.Consumer<V>);
    Code:
       0: aload_0
       1: aload_1
       2: invokedynamic #10,  0             // InvokeDynamic #0:apply:(Ljava/util/function/Consumer;)Ljava/util/function/Function;
       7: invokeinterface #14,  2           // InterfaceMethod then:(Ljava/util/function/Function;)Lcoldsrc/coldlib/util/functional/Callback;
      12: areturn

  public abstract coldsrc.coldlib.util.functional.Callback<V> then(java.util.function.Function<V, coldsrc.coldlib.util.functional.HandlerResult>);

  public abstract java.util.concurrent.CompletableFuture<V> await();

  private static coldsrc.coldlib.util.functional.HandlerResult lambda$then$0(java.util.function.Consumer, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #20,  2           // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V
       7: getstatic     #26                 // Field coldsrc/coldlib/util/functional/HandlerResult.KEEP:Lcoldsrc/coldlib/util/functional/HandlerResult;
      10: areturn
}
