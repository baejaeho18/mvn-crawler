Compiled from "BaseConsequence.java"
public abstract class net.serenitybdd.screenplay.BaseConsequence<T> implements net.serenitybdd.screenplay.Consequence<T> {
  private java.lang.Class<? extends java.lang.Error> complaintType;

  private java.lang.String complaintDetails;

  protected java.util.Optional<java.lang.String> explanation;

  protected java.util.Optional<java.lang.String> subjectText;

  private java.util.List<net.serenitybdd.screenplay.Performable> setupActions;

  public net.serenitybdd.screenplay.BaseConsequence();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: invokestatic  #2                  // Method java/util/Optional.empty:()Ljava/util/Optional;
       8: putfield      #3                  // Field explanation:Ljava/util/Optional;
      11: aload_0
      12: invokestatic  #2                  // Method java/util/Optional.empty:()Ljava/util/Optional;
      15: putfield      #4                  // Field subjectText:Ljava/util/Optional;
      18: aload_0
      19: new           #5                  // class java/util/ArrayList
      22: dup
      23: invokespecial #6                  // Method java/util/ArrayList."<init>":()V
      26: putfield      #7                  // Field setupActions:Ljava/util/List;
      29: return

  protected java.lang.Error errorFrom(java.lang.Throwable);
    Code:
       0: aload_1
       1: instanceof    #8                  // class java/lang/AssertionError
       4: ifeq          9
       7: aconst_null
       8: areturn
       9: aload_1
      10: instanceof    #9                  // class java/lang/Error
      13: ifeq          21
      16: aload_1
      17: checkcast     #9                  // class java/lang/Error
      20: areturn
      21: aconst_null
      22: areturn

  protected void throwComplaintTypeErrorIfSpecified(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #10                 // Field complaintType:Ljava/lang/Class;
       4: ifnull        20
       7: aload_0
       8: getfield      #10                 // Field complaintType:Ljava/lang/Class;
      11: aload_0
      12: getfield      #11                 // Field complaintDetails:Ljava/lang/String;
      15: aload_1
      16: invokestatic  #12                 // Method net/serenitybdd/screenplay/Complaint.from:(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Throwable;)Ljava/lang/Error;
      19: athrow
      20: return

  protected boolean thisStepShouldBeIgnored();
    Code:
       0: invokestatic  #13                 // Method net/thucydides/core/steps/StepEventBus.getParallelEventBus:()Lnet/thucydides/core/steps/StepEventBus;
       3: invokevirtual #14                 // Method net/thucydides/core/steps/StepEventBus.currentTestIsSuspended:()Z
       6: ifne          18
       9: invokestatic  #13                 // Method net/thucydides/core/steps/StepEventBus.getParallelEventBus:()Lnet/thucydides/core/steps/StepEventBus;
      12: invokevirtual #15                 // Method net/thucydides/core/steps/StepEventBus.aStepInTheCurrentTestHasFailed:()Z
      15: ifeq          22
      18: iconst_1
      19: goto          23
      22: iconst_0
      23: ireturn

  public net.serenitybdd.screenplay.BaseConsequence<T> orComplainWith(java.lang.Class<? extends java.lang.Error>);
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: invokevirtual #16                 // Method orComplainWith:(Ljava/lang/Class;Ljava/lang/String;)Lnet/serenitybdd/screenplay/BaseConsequence;
       6: areturn

  public net.serenitybdd.screenplay.BaseConsequence<T> orComplainWith(java.lang.Class<? extends java.lang.Error>, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #10                 // Field complaintType:Ljava/lang/Class;
       5: aload_0
       6: aload_2
       7: putfield      #11                 // Field complaintDetails:Ljava/lang/String;
      10: aload_0
      11: areturn

  public net.serenitybdd.screenplay.Consequence<T> whenAttemptingTo(net.serenitybdd.screenplay.Performable);
    Code:
       0: aload_0
       1: getfield      #7                  // Field setupActions:Ljava/util/List;
       4: aload_1
       5: invokeinterface #17,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      10: pop
      11: aload_0
      12: areturn

  public net.serenitybdd.screenplay.Consequence<T> because(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #18                 // Method java/util/Optional.ofNullable:(Ljava/lang/Object;)Ljava/util/Optional;
       5: putfield      #3                  // Field explanation:Ljava/util/Optional;
       8: aload_0
       9: areturn

  protected java.lang.String inputValues();
    Code:
       0: aload_0
       1: getfield      #7                  // Field setupActions:Ljava/util/List;
       4: invokeinterface #19,  1           // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
       9: invokedynamic #20,  0             // InvokeDynamic #0:test:()Ljava/util/function/Predicate;
      14: invokeinterface #21,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      19: invokedynamic #22,  0             // InvokeDynamic #1:apply:()Ljava/util/function/Function;
      24: invokeinterface #23,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      29: invokedynamic #24,  0             // InvokeDynamic #2:apply:()Ljava/util/function/Function;
      34: invokeinterface #23,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      39: ldc           #25                 // String ,
      41: invokestatic  #26                 // Method java/util/stream/Collectors.joining:(Ljava/lang/CharSequence;)Ljava/util/stream/Collector;
      44: invokeinterface #27,  2           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
      49: checkcast     #28                 // class java/lang/String
      52: areturn

  protected java.lang.String addRecordedInputValuesTo(java.lang.String);
    Code:
       0: aload_0
       1: invokevirtual #29                 // Method inputValues:()Ljava/lang/String;
       4: invokevirtual #30                 // Method java/lang/String.isEmpty:()Z
       7: ifeq          12
      10: aload_1
      11: areturn
      12: new           #31                 // class java/lang/StringBuilder
      15: dup
      16: invokespecial #32                 // Method java/lang/StringBuilder."<init>":()V
      19: aload_1
      20: invokevirtual #33                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      23: ldc           #34                 // String  [
      25: invokevirtual #33                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      28: aload_0
      29: invokevirtual #29                 // Method inputValues:()Ljava/lang/String;
      32: invokevirtual #33                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      35: ldc           #35                 // String ]
      37: invokevirtual #33                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      40: invokevirtual #36                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      43: areturn

  public net.serenitybdd.screenplay.Consequence<T> after(net.serenitybdd.screenplay.Performable...);
    Code:
       0: aload_0
       1: getfield      #7                  // Field setupActions:Ljava/util/List;
       4: aload_1
       5: invokestatic  #37                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
       8: invokeinterface #38,  2           // InterfaceMethod java/util/List.addAll:(Ljava/util/Collection;)Z
      13: pop
      14: aload_0
      15: areturn

  protected void performSetupActionsAs(net.serenitybdd.screenplay.Actor);
    Code:
       0: aload_1
       1: getstatic     #39                 // Field net/serenitybdd/screenplay/Actor$ErrorHandlingMode.IGNORE_EXCEPTIONS:Lnet/serenitybdd/screenplay/Actor$ErrorHandlingMode;
       4: aload_0
       5: getfield      #7                  // Field setupActions:Ljava/util/List;
       8: iconst_0
       9: anewarray     #40                 // class net/serenitybdd/screenplay/Performable
      12: invokeinterface #41,  2           // InterfaceMethod java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
      17: checkcast     #42                 // class "[Lnet/serenitybdd/screenplay/Performable;"
      20: invokevirtual #43                 // Method net/serenitybdd/screenplay/Actor.attemptsTo:(Lnet/serenitybdd/screenplay/Actor$ErrorHandlingMode;[Lnet/serenitybdd/screenplay/Performable;)V
      23: return

  public net.serenitybdd.screenplay.Consequence orComplainWith(java.lang.Class, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #16                 // Method orComplainWith:(Ljava/lang/Class;Ljava/lang/String;)Lnet/serenitybdd/screenplay/BaseConsequence;
       6: areturn

  public net.serenitybdd.screenplay.Consequence orComplainWith(java.lang.Class);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #44                 // Method orComplainWith:(Ljava/lang/Class;)Lnet/serenitybdd/screenplay/BaseConsequence;
       5: areturn

  private static net.serenitybdd.screenplay.RecordsInputs lambda$inputValues$1(net.serenitybdd.screenplay.Performable);
    Code:
       0: aload_0
       1: checkcast     #45                 // class net/serenitybdd/screenplay/RecordsInputs
       4: areturn

  private static boolean lambda$inputValues$0(net.serenitybdd.screenplay.Performable);
    Code:
       0: aload_0
       1: instanceof    #45                 // class net/serenitybdd/screenplay/RecordsInputs
       4: ireturn
}
