{
 "component": {
    "kind": "component",
    "scheme": "aws-s3",
    "syntax": "aws-s3:bucketNameOrArn",
    "title": "AWS S3 Storage Service",
    "description": "The aws-s3 component is used for storing and retrieving objecct from Amazon S3 Storage Service.",
    "label": "cloud,file",
    "deprecated": "false",
    "async": "false",
    "javaType": "org.apache.camel.component.aws.s3.S3Component",
    "groupId": "org.apache.camel",
    "artifactId": "camel-aws",
    "version": "2.18.1"
  },
  "componentProperties": {
  },
  "properties": {
    "bucketNameOrArn": { "kind": "path", "group": "common", "required": "true", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "Bucket name or ARN" },
    "accessKey": { "kind": "parameter", "group": "common", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "Amazon AWS Access Key" },
    "amazonS3Client": { "kind": "parameter", "group": "common", "type": "object", "javaType": "com.amazonaws.services.s3.AmazonS3", "deprecated": "false", "secret": "false", "description": "Reference to a com.amazonaws.services.sqs.AmazonS3 in the link:registry.htmlRegistry." },
    "amazonS3Endpoint": { "kind": "parameter", "group": "common", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "The region with which the AWS-S3 client wants to work with." },
    "pathStyleAccess": { "kind": "parameter", "group": "common", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Whether or not the S3 client should use path style access" },
    "policy": { "kind": "parameter", "group": "common", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "Camel 2.8.4: The policy for this queue to set in the com.amazonaws.services.s3.AmazonS3setBucketPolicy() method." },
    "proxyHost": { "kind": "parameter", "group": "common", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "Camel 2.16: To define a proxy host when instantiating the SQS client" },
    "proxyPort": { "kind": "parameter", "group": "common", "type": "integer", "javaType": "java.lang.Integer", "deprecated": "false", "secret": "false", "description": "Camel 2.16: Specify a proxy port to be used inside the client definition." },
    "secretKey": { "kind": "parameter", "group": "common", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "Amazon AWS Secret Key" },
    "bridgeErrorHandler": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "boolean", "javaType": "boolean", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored." },
    "deleteAfterRead": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "Delete objects from S3 after they have been retrieved. The delete is only performed if the Exchange is committed. If a rollback occurs the object is not deleted. If this option is false then the same objects will be retrieve over and over again on the polls. Therefore you need to use the Idempotent Consumer EIP in the route to filter out duplicates. You can filter using the link S3ConstantsBUCKET_NAME and link S3ConstantsKEY headers or only the link S3ConstantsKEY header." },
    "fileName": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "To get the object from the bucket with the given file name" },
    "includeBody": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "Camel 2.17: If it is true the exchange body will be set to a stream to the contents of the file. If false the headers will be set with the S3 object metadata but the body will be null." },
    "maxMessagesPerPoll": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "integer", "javaType": "int", "deprecated": "false", "secret": "false", "defaultValue": "10", "description": "Gets the maximum number of messages as a limit to poll at each polling. Is default unlimited but use 0 or negative number to disable it as unlimited." },
    "prefix": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "Camel 2.10.1: The prefix which is used in the com.amazonaws.services.s3.model.ListObjectsRequest to only consume objects we are interested in." },
    "sendEmptyMessageWhenIdle": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "boolean", "javaType": "boolean", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead." },
    "exceptionHandler": { "kind": "parameter", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "object", "javaType": "org.apache.camel.spi.ExceptionHandler", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "description": "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored." },
    "exchangePattern": { "kind": "parameter", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "string", "javaType": "org.apache.camel.ExchangePattern", "enum": [ "InOnly", "RobustInOnly", "InOut", "InOptionalOut", "OutOnly", "RobustOutOnly", "OutIn", "OutOptionalIn" ], "deprecated": "false", "secret": "false", "description": "Sets the exchange pattern when the consumer creates an exchange." },
    "pollStrategy": { "kind": "parameter", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "object", "javaType": "org.apache.camel.spi.PollingConsumerPollStrategy", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "description": "A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel." },
    "deleteAfterWrite": { "kind": "parameter", "group": "producer", "label": "producer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Camel 2.11.0: Delete file object after the S3 file has been uploaded" },
    "multiPartUpload": { "kind": "parameter", "group": "producer", "label": "producer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Camel 2.15.0: If it is true camel will upload the file with multi part format the part size is decided by the option of partSize" },
    "operation": { "kind": "parameter", "group": "producer", "label": "producer", "type": "string", "javaType": "org.apache.camel.component.aws.s3.S3Operations", "enum": [ "copyObject", "deleteBucket", "listBuckets" ], "deprecated": "false", "secret": "false", "description": "Camel 2.18: The operation to do in case the user don't want to do only an upload" },
    "partSize": { "kind": "parameter", "group": "producer", "label": "producer", "type": "integer", "javaType": "long", "deprecated": "false", "secret": "false", "defaultValue": "26214400", "description": "Camel 2.15.0: Setup the partSize which is used in multi part upload the default size is 25M." },
    "region": { "kind": "parameter", "group": "producer", "label": "producer", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "The region where the bucket is located. This option is used in the com.amazonaws.services.s3.model.CreateBucketRequest." },
    "serverSideEncryption": { "kind": "parameter", "group": "producer", "label": "producer", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "Camel 2.16: Sets the server-side encryption algorithm when encrypting the object using AWS-managed keys. For example use AES256." },
    "storageClass": { "kind": "parameter", "group": "producer", "label": "producer", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "Camel 2.8.4: The storage class to set in the com.amazonaws.services.s3.model.PutObjectRequest request." },
    "synchronous": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)." },
    "backoffErrorThreshold": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "integer", "javaType": "int", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "description": "The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in." },
    "backoffIdleThreshold": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "integer", "javaType": "int", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "description": "The number of subsequent idle polls that should happen before the backoffMultipler should kick-in." },
    "backoffMultiplier": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "integer", "javaType": "int", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "description": "To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured." },
    "delay": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "integer", "javaType": "long", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "500", "description": "Milliseconds before the next poll. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)." },
    "greedy": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "boolean", "javaType": "boolean", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages." },
    "initialDelay": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "integer", "javaType": "long", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "1000", "description": "Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)." },
    "runLoggingLevel": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "string", "javaType": "org.apache.camel.LoggingLevel", "enum": [ "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "OFF" ], "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "TRACE", "description": "The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that." },
    "scheduledExecutorService": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "object", "javaType": "java.util.concurrent.ScheduledExecutorService", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "description": "Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool." },
    "scheduler": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "string", "javaType": "org.apache.camel.spi.ScheduledPollConsumerScheduler", "enum": [ "none", "spring", "quartz2" ], "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "none", "description": "To use a cron scheduler from either camel-spring or camel-quartz2 component" },
    "schedulerProperties": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "object", "javaType": "java.util.Map<java.lang.String,java.lang.Object>", "prefix": "scheduler.", "multiValue": "true", "deprecated": "false", "secret": "false", "description": "To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler." },
    "startScheduler": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "boolean", "javaType": "boolean", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "Whether the scheduler should be auto started." },
    "timeUnit": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "string", "javaType": "java.util.concurrent.TimeUnit", "enum": [ "NANOSECONDS", "MICROSECONDS", "MILLISECONDS", "SECONDS", "MINUTES", "HOURS", "DAYS" ], "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "MILLISECONDS", "description": "Time unit for initialDelay and delay options." },
    "useFixedDelay": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "boolean", "javaType": "boolean", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details." }
  }
}

