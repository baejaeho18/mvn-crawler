{
 "component": {
    "kind": "component",
    "scheme": "aws-sqs",
    "syntax": "aws-sqs:queueNameOrArn",
    "title": "AWS Simple Queue Service",
    "description": "The aws-sqs component is used for sending and receiving messages to Amazon's SQS service.",
    "label": "cloud,messaging",
    "deprecated": "false",
    "async": "false",
    "javaType": "org.apache.camel.component.aws.sqs.SqsComponent",
    "groupId": "org.apache.camel",
    "artifactId": "camel-aws",
    "version": "2.18.1"
  },
  "componentProperties": {
  },
  "properties": {
    "queueNameOrArn": { "kind": "path", "group": "common", "required": "true", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "Queue name or ARN" },
    "accessKey": { "kind": "parameter", "group": "common", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "Amazon AWS Access Key" },
    "amazonSQSClient": { "kind": "parameter", "group": "common", "type": "object", "javaType": "com.amazonaws.services.sqs.AmazonSQS", "deprecated": "false", "secret": "false", "description": "To use the AmazonSQS as client" },
    "amazonSQSEndpoint": { "kind": "parameter", "group": "common", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "The region with which the AWS-SQS client wants to work with. Only works if Camel creates the AWS-SQS client i.e. if you explicitly set amazonSQSClient then this setting will have no effect. You would have to set it on the client you create directly" },
    "headerFilterStrategy": { "kind": "parameter", "group": "common", "type": "object", "javaType": "org.apache.camel.spi.HeaderFilterStrategy", "deprecated": "false", "secret": "false", "description": "To use a custom HeaderFilterStrategy to map headers to/from Camel." },
    "queueOwnerAWSAccountId": { "kind": "parameter", "group": "common", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "Specify the queue owner aws account id when you need to connect the queue with different account owner." },
    "region": { "kind": "parameter", "group": "common", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "Specify the queue region which could be used with queueOwnerAWSAccountId to build the service URL." },
    "secretKey": { "kind": "parameter", "group": "common", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "Amazon AWS Secret Key" },
    "attributeNames": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "A list of attribute names to receive when consuming. Multiple names can be separated by comma." },
    "bridgeErrorHandler": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "boolean", "javaType": "boolean", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored." },
    "concurrentConsumers": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "integer", "javaType": "int", "deprecated": "false", "secret": "false", "defaultValue": "1", "description": "Allows you to use multiple threads to poll the sqs queue to increase throughput" },
    "defaultVisibilityTimeout": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "integer", "javaType": "java.lang.Integer", "deprecated": "false", "secret": "false", "description": "The default visibility timeout (in seconds)" },
    "deleteAfterRead": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "Delete message from SQS after it has been read" },
    "deleteIfFiltered": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "Whether or not to send the DeleteMessage to the SQS queue if an exchange fails to get through a filter. If 'false' and exchange does not make it through a Camel filter upstream in the route then don't send DeleteMessage." },
    "extendMessageVisibility": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "If enabled then a scheduled background task will keep extending the message visibility on SQS. This is needed if it takes a long time to process the message. If set to true defaultVisibilityTimeout must be set. See details at Amazon docs." },
    "maxMessagesPerPoll": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "integer", "javaType": "int", "deprecated": "false", "secret": "false", "description": "Gets the maximum number of messages as a limit to poll at each polling. Is default unlimited but use 0 or negative number to disable it as unlimited." },
    "messageAttributeNames": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "A list of message attribute names to receive when consuming. Multiple names can be separated by comma." },
    "sendEmptyMessageWhenIdle": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "boolean", "javaType": "boolean", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead." },
    "visibilityTimeout": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "integer", "javaType": "java.lang.Integer", "deprecated": "false", "secret": "false", "description": "The duration (in seconds) that the received messages are hidden from subsequent retrieve requests after being retrieved by a ReceiveMessage request to set in the com.amazonaws.services.sqs.model.SetQueueAttributesRequest. This only make sense if its different from defaultVisibilityTimeout. It changes the queue visibility timeout attribute permanently." },
    "waitTimeSeconds": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "integer", "javaType": "java.lang.Integer", "deprecated": "false", "secret": "false", "description": "Duration in seconds (0 to 20) that the ReceiveMessage action call will wait until a message is in the queue to include in the response." },
    "exceptionHandler": { "kind": "parameter", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "object", "javaType": "org.apache.camel.spi.ExceptionHandler", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "description": "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored." },
    "exchangePattern": { "kind": "parameter", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "string", "javaType": "org.apache.camel.ExchangePattern", "enum": [ "InOnly", "RobustInOnly", "InOut", "InOptionalOut", "OutOnly", "RobustOutOnly", "OutIn", "OutOptionalIn" ], "deprecated": "false", "secret": "false", "description": "Sets the exchange pattern when the consumer creates an exchange." },
    "pollStrategy": { "kind": "parameter", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "object", "javaType": "org.apache.camel.spi.PollingConsumerPollStrategy", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "description": "A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel." },
    "delaySeconds": { "kind": "parameter", "group": "producer", "label": "producer", "type": "integer", "javaType": "java.lang.Integer", "deprecated": "false", "secret": "false", "description": "Delay sending messages for a number of seconds." },
    "synchronous": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)." },
    "backoffErrorThreshold": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "integer", "javaType": "int", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "description": "The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in." },
    "backoffIdleThreshold": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "integer", "javaType": "int", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "description": "The number of subsequent idle polls that should happen before the backoffMultipler should kick-in." },
    "backoffMultiplier": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "integer", "javaType": "int", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "description": "To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured." },
    "delay": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "integer", "javaType": "long", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "500", "description": "Milliseconds before the next poll. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)." },
    "greedy": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "boolean", "javaType": "boolean", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages." },
    "initialDelay": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "integer", "javaType": "long", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "1000", "description": "Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)." },
    "runLoggingLevel": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "string", "javaType": "org.apache.camel.LoggingLevel", "enum": [ "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "OFF" ], "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "TRACE", "description": "The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that." },
    "scheduledExecutorService": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "object", "javaType": "java.util.concurrent.ScheduledExecutorService", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "description": "Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool." },
    "scheduler": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "string", "javaType": "org.apache.camel.spi.ScheduledPollConsumerScheduler", "enum": [ "none", "spring", "quartz2" ], "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "none", "description": "To use a cron scheduler from either camel-spring or camel-quartz2 component" },
    "schedulerProperties": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "object", "javaType": "java.util.Map<java.lang.String,java.lang.Object>", "prefix": "scheduler.", "multiValue": "true", "deprecated": "false", "secret": "false", "description": "To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler." },
    "startScheduler": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "boolean", "javaType": "boolean", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "Whether the scheduler should be auto started." },
    "timeUnit": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "string", "javaType": "java.util.concurrent.TimeUnit", "enum": [ "NANOSECONDS", "MICROSECONDS", "MILLISECONDS", "SECONDS", "MINUTES", "HOURS", "DAYS" ], "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "MILLISECONDS", "description": "Time unit for initialDelay and delay options." },
    "useFixedDelay": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "boolean", "javaType": "boolean", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details." },
    "proxyHost": { "kind": "parameter", "group": "proxy", "label": "proxy", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "To define a proxy host when instantiating the SQS client" },
    "proxyPort": { "kind": "parameter", "group": "proxy", "label": "proxy", "type": "integer", "javaType": "java.lang.Integer", "deprecated": "false", "secret": "false", "description": "To define a proxy port when instantiating the SQS client" },
    "maximumMessageSize": { "kind": "parameter", "group": "queue", "label": "queue", "type": "integer", "javaType": "java.lang.Integer", "deprecated": "false", "secret": "false", "description": "The maximumMessageSize (in bytes) an SQS message can contain for this queue." },
    "messageRetentionPeriod": { "kind": "parameter", "group": "queue", "label": "queue", "type": "integer", "javaType": "java.lang.Integer", "deprecated": "false", "secret": "false", "description": "The messageRetentionPeriod (in seconds) a message will be retained by SQS for this queue." },
    "policy": { "kind": "parameter", "group": "queue", "label": "queue", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "The policy for this queue" },
    "receiveMessageWaitTimeSeconds": { "kind": "parameter", "group": "queue", "label": "queue", "type": "integer", "javaType": "java.lang.Integer", "deprecated": "false", "secret": "false", "description": "If you do not specify WaitTimeSeconds in the request the queue attribute ReceiveMessageWaitTimeSeconds is used to determine how long to wait." },
    "redrivePolicy": { "kind": "parameter", "group": "queue", "label": "queue", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "Specify the policy that send message to DeadLetter queue. See detail at Amazon docs." }
  }
}

