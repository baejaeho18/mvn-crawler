Compiled from "DecisionTask.java"
public class com.amazonaws.services.simpleworkflow.model.DecisionTask implements java.io.Serializable,java.lang.Cloneable {
  private java.lang.String taskToken;

  private java.lang.Long startedEventId;

  private com.amazonaws.services.simpleworkflow.model.WorkflowExecution workflowExecution;

  private com.amazonaws.services.simpleworkflow.model.WorkflowType workflowType;

  private java.util.List<com.amazonaws.services.simpleworkflow.model.HistoryEvent> events;

  private java.lang.String nextPageToken;

  private java.lang.Long previousStartedEventId;

  public com.amazonaws.services.simpleworkflow.model.DecisionTask();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public void setTaskToken(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2                  // Field taskToken:Ljava/lang/String;
       5: return

  public java.lang.String getTaskToken();
    Code:
       0: aload_0
       1: getfield      #2                  // Field taskToken:Ljava/lang/String;
       4: areturn

  public com.amazonaws.services.simpleworkflow.model.DecisionTask withTaskToken(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #3                  // Method setTaskToken:(Ljava/lang/String;)V
       5: aload_0
       6: areturn

  public void setStartedEventId(java.lang.Long);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #4                  // Field startedEventId:Ljava/lang/Long;
       5: return

  public java.lang.Long getStartedEventId();
    Code:
       0: aload_0
       1: getfield      #4                  // Field startedEventId:Ljava/lang/Long;
       4: areturn

  public com.amazonaws.services.simpleworkflow.model.DecisionTask withStartedEventId(java.lang.Long);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #5                  // Method setStartedEventId:(Ljava/lang/Long;)V
       5: aload_0
       6: areturn

  public void setWorkflowExecution(com.amazonaws.services.simpleworkflow.model.WorkflowExecution);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #6                  // Field workflowExecution:Lcom/amazonaws/services/simpleworkflow/model/WorkflowExecution;
       5: return

  public com.amazonaws.services.simpleworkflow.model.WorkflowExecution getWorkflowExecution();
    Code:
       0: aload_0
       1: getfield      #6                  // Field workflowExecution:Lcom/amazonaws/services/simpleworkflow/model/WorkflowExecution;
       4: areturn

  public com.amazonaws.services.simpleworkflow.model.DecisionTask withWorkflowExecution(com.amazonaws.services.simpleworkflow.model.WorkflowExecution);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #7                  // Method setWorkflowExecution:(Lcom/amazonaws/services/simpleworkflow/model/WorkflowExecution;)V
       5: aload_0
       6: areturn

  public void setWorkflowType(com.amazonaws.services.simpleworkflow.model.WorkflowType);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #8                  // Field workflowType:Lcom/amazonaws/services/simpleworkflow/model/WorkflowType;
       5: return

  public com.amazonaws.services.simpleworkflow.model.WorkflowType getWorkflowType();
    Code:
       0: aload_0
       1: getfield      #8                  // Field workflowType:Lcom/amazonaws/services/simpleworkflow/model/WorkflowType;
       4: areturn

  public com.amazonaws.services.simpleworkflow.model.DecisionTask withWorkflowType(com.amazonaws.services.simpleworkflow.model.WorkflowType);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #9                  // Method setWorkflowType:(Lcom/amazonaws/services/simpleworkflow/model/WorkflowType;)V
       5: aload_0
       6: areturn

  public java.util.List<com.amazonaws.services.simpleworkflow.model.HistoryEvent> getEvents();
    Code:
       0: aload_0
       1: getfield      #10                 // Field events:Ljava/util/List;
       4: areturn

  public void setEvents(java.util.Collection<com.amazonaws.services.simpleworkflow.model.HistoryEvent>);
    Code:
       0: aload_1
       1: ifnonnull     10
       4: aload_0
       5: aconst_null
       6: putfield      #10                 // Field events:Ljava/util/List;
       9: return
      10: aload_0
      11: new           #11                 // class java/util/ArrayList
      14: dup
      15: aload_1
      16: invokespecial #12                 // Method java/util/ArrayList."<init>":(Ljava/util/Collection;)V
      19: putfield      #10                 // Field events:Ljava/util/List;
      22: return

  public com.amazonaws.services.simpleworkflow.model.DecisionTask withEvents(com.amazonaws.services.simpleworkflow.model.HistoryEvent...);
    Code:
       0: aload_0
       1: getfield      #10                 // Field events:Ljava/util/List;
       4: ifnonnull     20
       7: aload_0
       8: new           #11                 // class java/util/ArrayList
      11: dup
      12: aload_1
      13: arraylength
      14: invokespecial #13                 // Method java/util/ArrayList."<init>":(I)V
      17: invokevirtual #14                 // Method setEvents:(Ljava/util/Collection;)V
      20: aload_1
      21: astore_2
      22: aload_2
      23: arraylength
      24: istore_3
      25: iconst_0
      26: istore        4
      28: iload         4
      30: iload_3
      31: if_icmpge     58
      34: aload_2
      35: iload         4
      37: aaload
      38: astore        5
      40: aload_0
      41: getfield      #10                 // Field events:Ljava/util/List;
      44: aload         5
      46: invokeinterface #15,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      51: pop
      52: iinc          4, 1
      55: goto          28
      58: aload_0
      59: areturn

  public com.amazonaws.services.simpleworkflow.model.DecisionTask withEvents(java.util.Collection<com.amazonaws.services.simpleworkflow.model.HistoryEvent>);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #14                 // Method setEvents:(Ljava/util/Collection;)V
       5: aload_0
       6: areturn

  public void setNextPageToken(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #16                 // Field nextPageToken:Ljava/lang/String;
       5: return

  public java.lang.String getNextPageToken();
    Code:
       0: aload_0
       1: getfield      #16                 // Field nextPageToken:Ljava/lang/String;
       4: areturn

  public com.amazonaws.services.simpleworkflow.model.DecisionTask withNextPageToken(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #17                 // Method setNextPageToken:(Ljava/lang/String;)V
       5: aload_0
       6: areturn

  public void setPreviousStartedEventId(java.lang.Long);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #18                 // Field previousStartedEventId:Ljava/lang/Long;
       5: return

  public java.lang.Long getPreviousStartedEventId();
    Code:
       0: aload_0
       1: getfield      #18                 // Field previousStartedEventId:Ljava/lang/Long;
       4: areturn

  public com.amazonaws.services.simpleworkflow.model.DecisionTask withPreviousStartedEventId(java.lang.Long);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #19                 // Method setPreviousStartedEventId:(Ljava/lang/Long;)V
       5: aload_0
       6: areturn

  public java.lang.String toString();
    Code:
       0: new           #20                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #21                 // Method java/lang/StringBuilder."<init>":()V
       7: astore_1
       8: aload_1
       9: ldc           #22                 // String {
      11: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      14: pop
      15: aload_0
      16: invokevirtual #24                 // Method getTaskToken:()Ljava/lang/String;
      19: ifnull        54
      22: aload_1
      23: new           #20                 // class java/lang/StringBuilder
      26: dup
      27: invokespecial #21                 // Method java/lang/StringBuilder."<init>":()V
      30: ldc           #25                 // String TaskToken:
      32: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      35: aload_0
      36: invokevirtual #24                 // Method getTaskToken:()Ljava/lang/String;
      39: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      42: ldc           #26                 // String ,
      44: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      47: invokevirtual #27                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      50: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      53: pop
      54: aload_0
      55: invokevirtual #28                 // Method getStartedEventId:()Ljava/lang/Long;
      58: ifnull        93
      61: aload_1
      62: new           #20                 // class java/lang/StringBuilder
      65: dup
      66: invokespecial #21                 // Method java/lang/StringBuilder."<init>":()V
      69: ldc           #29                 // String StartedEventId:
      71: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      74: aload_0
      75: invokevirtual #28                 // Method getStartedEventId:()Ljava/lang/Long;
      78: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      81: ldc           #26                 // String ,
      83: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      86: invokevirtual #27                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      89: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      92: pop
      93: aload_0
      94: invokevirtual #31                 // Method getWorkflowExecution:()Lcom/amazonaws/services/simpleworkflow/model/WorkflowExecution;
      97: ifnull        132
     100: aload_1
     101: new           #20                 // class java/lang/StringBuilder
     104: dup
     105: invokespecial #21                 // Method java/lang/StringBuilder."<init>":()V
     108: ldc           #32                 // String WorkflowExecution:
     110: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     113: aload_0
     114: invokevirtual #31                 // Method getWorkflowExecution:()Lcom/amazonaws/services/simpleworkflow/model/WorkflowExecution;
     117: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     120: ldc           #26                 // String ,
     122: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     125: invokevirtual #27                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     128: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     131: pop
     132: aload_0
     133: invokevirtual #33                 // Method getWorkflowType:()Lcom/amazonaws/services/simpleworkflow/model/WorkflowType;
     136: ifnull        171
     139: aload_1
     140: new           #20                 // class java/lang/StringBuilder
     143: dup
     144: invokespecial #21                 // Method java/lang/StringBuilder."<init>":()V
     147: ldc           #34                 // String WorkflowType:
     149: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     152: aload_0
     153: invokevirtual #33                 // Method getWorkflowType:()Lcom/amazonaws/services/simpleworkflow/model/WorkflowType;
     156: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     159: ldc           #26                 // String ,
     161: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     164: invokevirtual #27                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     167: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     170: pop
     171: aload_0
     172: invokevirtual #35                 // Method getEvents:()Ljava/util/List;
     175: ifnull        210
     178: aload_1
     179: new           #20                 // class java/lang/StringBuilder
     182: dup
     183: invokespecial #21                 // Method java/lang/StringBuilder."<init>":()V
     186: ldc           #36                 // String Events:
     188: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     191: aload_0
     192: invokevirtual #35                 // Method getEvents:()Ljava/util/List;
     195: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     198: ldc           #26                 // String ,
     200: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     203: invokevirtual #27                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     206: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     209: pop
     210: aload_0
     211: invokevirtual #37                 // Method getNextPageToken:()Ljava/lang/String;
     214: ifnull        249
     217: aload_1
     218: new           #20                 // class java/lang/StringBuilder
     221: dup
     222: invokespecial #21                 // Method java/lang/StringBuilder."<init>":()V
     225: ldc           #38                 // String NextPageToken:
     227: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     230: aload_0
     231: invokevirtual #37                 // Method getNextPageToken:()Ljava/lang/String;
     234: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     237: ldc           #26                 // String ,
     239: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     242: invokevirtual #27                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     245: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     248: pop
     249: aload_0
     250: invokevirtual #39                 // Method getPreviousStartedEventId:()Ljava/lang/Long;
     253: ifnull        283
     256: aload_1
     257: new           #20                 // class java/lang/StringBuilder
     260: dup
     261: invokespecial #21                 // Method java/lang/StringBuilder."<init>":()V
     264: ldc           #40                 // String PreviousStartedEventId:
     266: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     269: aload_0
     270: invokevirtual #39                 // Method getPreviousStartedEventId:()Ljava/lang/Long;
     273: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     276: invokevirtual #27                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     279: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     282: pop
     283: aload_1
     284: ldc           #41                 // String }
     286: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     289: pop
     290: aload_1
     291: invokevirtual #27                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     294: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: ifnonnull     13
      11: iconst_0
      12: ireturn
      13: aload_1
      14: instanceof    #42                 // class com/amazonaws/services/simpleworkflow/model/DecisionTask
      17: ifne          22
      20: iconst_0
      21: ireturn
      22: aload_1
      23: checkcast     #42                 // class com/amazonaws/services/simpleworkflow/model/DecisionTask
      26: astore_2
      27: aload_2
      28: invokevirtual #24                 // Method getTaskToken:()Ljava/lang/String;
      31: ifnonnull     38
      34: iconst_1
      35: goto          39
      38: iconst_0
      39: aload_0
      40: invokevirtual #24                 // Method getTaskToken:()Ljava/lang/String;
      43: ifnonnull     50
      46: iconst_1
      47: goto          51
      50: iconst_0
      51: ixor
      52: ifeq          57
      55: iconst_0
      56: ireturn
      57: aload_2
      58: invokevirtual #24                 // Method getTaskToken:()Ljava/lang/String;
      61: ifnull        80
      64: aload_2
      65: invokevirtual #24                 // Method getTaskToken:()Ljava/lang/String;
      68: aload_0
      69: invokevirtual #24                 // Method getTaskToken:()Ljava/lang/String;
      72: invokevirtual #43                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      75: ifne          80
      78: iconst_0
      79: ireturn
      80: aload_2
      81: invokevirtual #28                 // Method getStartedEventId:()Ljava/lang/Long;
      84: ifnonnull     91
      87: iconst_1
      88: goto          92
      91: iconst_0
      92: aload_0
      93: invokevirtual #28                 // Method getStartedEventId:()Ljava/lang/Long;
      96: ifnonnull     103
      99: iconst_1
     100: goto          104
     103: iconst_0
     104: ixor
     105: ifeq          110
     108: iconst_0
     109: ireturn
     110: aload_2
     111: invokevirtual #28                 // Method getStartedEventId:()Ljava/lang/Long;
     114: ifnull        133
     117: aload_2
     118: invokevirtual #28                 // Method getStartedEventId:()Ljava/lang/Long;
     121: aload_0
     122: invokevirtual #28                 // Method getStartedEventId:()Ljava/lang/Long;
     125: invokevirtual #44                 // Method java/lang/Long.equals:(Ljava/lang/Object;)Z
     128: ifne          133
     131: iconst_0
     132: ireturn
     133: aload_2
     134: invokevirtual #31                 // Method getWorkflowExecution:()Lcom/amazonaws/services/simpleworkflow/model/WorkflowExecution;
     137: ifnonnull     144
     140: iconst_1
     141: goto          145
     144: iconst_0
     145: aload_0
     146: invokevirtual #31                 // Method getWorkflowExecution:()Lcom/amazonaws/services/simpleworkflow/model/WorkflowExecution;
     149: ifnonnull     156
     152: iconst_1
     153: goto          157
     156: iconst_0
     157: ixor
     158: ifeq          163
     161: iconst_0
     162: ireturn
     163: aload_2
     164: invokevirtual #31                 // Method getWorkflowExecution:()Lcom/amazonaws/services/simpleworkflow/model/WorkflowExecution;
     167: ifnull        186
     170: aload_2
     171: invokevirtual #31                 // Method getWorkflowExecution:()Lcom/amazonaws/services/simpleworkflow/model/WorkflowExecution;
     174: aload_0
     175: invokevirtual #31                 // Method getWorkflowExecution:()Lcom/amazonaws/services/simpleworkflow/model/WorkflowExecution;
     178: invokevirtual #45                 // Method com/amazonaws/services/simpleworkflow/model/WorkflowExecution.equals:(Ljava/lang/Object;)Z
     181: ifne          186
     184: iconst_0
     185: ireturn
     186: aload_2
     187: invokevirtual #33                 // Method getWorkflowType:()Lcom/amazonaws/services/simpleworkflow/model/WorkflowType;
     190: ifnonnull     197
     193: iconst_1
     194: goto          198
     197: iconst_0
     198: aload_0
     199: invokevirtual #33                 // Method getWorkflowType:()Lcom/amazonaws/services/simpleworkflow/model/WorkflowType;
     202: ifnonnull     209
     205: iconst_1
     206: goto          210
     209: iconst_0
     210: ixor
     211: ifeq          216
     214: iconst_0
     215: ireturn
     216: aload_2
     217: invokevirtual #33                 // Method getWorkflowType:()Lcom/amazonaws/services/simpleworkflow/model/WorkflowType;
     220: ifnull        239
     223: aload_2
     224: invokevirtual #33                 // Method getWorkflowType:()Lcom/amazonaws/services/simpleworkflow/model/WorkflowType;
     227: aload_0
     228: invokevirtual #33                 // Method getWorkflowType:()Lcom/amazonaws/services/simpleworkflow/model/WorkflowType;
     231: invokevirtual #46                 // Method com/amazonaws/services/simpleworkflow/model/WorkflowType.equals:(Ljava/lang/Object;)Z
     234: ifne          239
     237: iconst_0
     238: ireturn
     239: aload_2
     240: invokevirtual #35                 // Method getEvents:()Ljava/util/List;
     243: ifnonnull     250
     246: iconst_1
     247: goto          251
     250: iconst_0
     251: aload_0
     252: invokevirtual #35                 // Method getEvents:()Ljava/util/List;
     255: ifnonnull     262
     258: iconst_1
     259: goto          263
     262: iconst_0
     263: ixor
     264: ifeq          269
     267: iconst_0
     268: ireturn
     269: aload_2
     270: invokevirtual #35                 // Method getEvents:()Ljava/util/List;
     273: ifnull        294
     276: aload_2
     277: invokevirtual #35                 // Method getEvents:()Ljava/util/List;
     280: aload_0
     281: invokevirtual #35                 // Method getEvents:()Ljava/util/List;
     284: invokeinterface #47,  2           // InterfaceMethod java/util/List.equals:(Ljava/lang/Object;)Z
     289: ifne          294
     292: iconst_0
     293: ireturn
     294: aload_2
     295: invokevirtual #37                 // Method getNextPageToken:()Ljava/lang/String;
     298: ifnonnull     305
     301: iconst_1
     302: goto          306
     305: iconst_0
     306: aload_0
     307: invokevirtual #37                 // Method getNextPageToken:()Ljava/lang/String;
     310: ifnonnull     317
     313: iconst_1
     314: goto          318
     317: iconst_0
     318: ixor
     319: ifeq          324
     322: iconst_0
     323: ireturn
     324: aload_2
     325: invokevirtual #37                 // Method getNextPageToken:()Ljava/lang/String;
     328: ifnull        347
     331: aload_2
     332: invokevirtual #37                 // Method getNextPageToken:()Ljava/lang/String;
     335: aload_0
     336: invokevirtual #37                 // Method getNextPageToken:()Ljava/lang/String;
     339: invokevirtual #43                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     342: ifne          347
     345: iconst_0
     346: ireturn
     347: aload_2
     348: invokevirtual #39                 // Method getPreviousStartedEventId:()Ljava/lang/Long;
     351: ifnonnull     358
     354: iconst_1
     355: goto          359
     358: iconst_0
     359: aload_0
     360: invokevirtual #39                 // Method getPreviousStartedEventId:()Ljava/lang/Long;
     363: ifnonnull     370
     366: iconst_1
     367: goto          371
     370: iconst_0
     371: ixor
     372: ifeq          377
     375: iconst_0
     376: ireturn
     377: aload_2
     378: invokevirtual #39                 // Method getPreviousStartedEventId:()Ljava/lang/Long;
     381: ifnull        400
     384: aload_2
     385: invokevirtual #39                 // Method getPreviousStartedEventId:()Ljava/lang/Long;
     388: aload_0
     389: invokevirtual #39                 // Method getPreviousStartedEventId:()Ljava/lang/Long;
     392: invokevirtual #44                 // Method java/lang/Long.equals:(Ljava/lang/Object;)Z
     395: ifne          400
     398: iconst_0
     399: ireturn
     400: iconst_1
     401: ireturn

  public int hashCode();
    Code:
       0: bipush        31
       2: istore_1
       3: iconst_1
       4: istore_2
       5: bipush        31
       7: iload_2
       8: imul
       9: aload_0
      10: invokevirtual #24                 // Method getTaskToken:()Ljava/lang/String;
      13: ifnonnull     20
      16: iconst_0
      17: goto          27
      20: aload_0
      21: invokevirtual #24                 // Method getTaskToken:()Ljava/lang/String;
      24: invokevirtual #48                 // Method java/lang/String.hashCode:()I
      27: iadd
      28: istore_2
      29: bipush        31
      31: iload_2
      32: imul
      33: aload_0
      34: invokevirtual #28                 // Method getStartedEventId:()Ljava/lang/Long;
      37: ifnonnull     44
      40: iconst_0
      41: goto          51
      44: aload_0
      45: invokevirtual #28                 // Method getStartedEventId:()Ljava/lang/Long;
      48: invokevirtual #49                 // Method java/lang/Long.hashCode:()I
      51: iadd
      52: istore_2
      53: bipush        31
      55: iload_2
      56: imul
      57: aload_0
      58: invokevirtual #31                 // Method getWorkflowExecution:()Lcom/amazonaws/services/simpleworkflow/model/WorkflowExecution;
      61: ifnonnull     68
      64: iconst_0
      65: goto          75
      68: aload_0
      69: invokevirtual #31                 // Method getWorkflowExecution:()Lcom/amazonaws/services/simpleworkflow/model/WorkflowExecution;
      72: invokevirtual #50                 // Method com/amazonaws/services/simpleworkflow/model/WorkflowExecution.hashCode:()I
      75: iadd
      76: istore_2
      77: bipush        31
      79: iload_2
      80: imul
      81: aload_0
      82: invokevirtual #33                 // Method getWorkflowType:()Lcom/amazonaws/services/simpleworkflow/model/WorkflowType;
      85: ifnonnull     92
      88: iconst_0
      89: goto          99
      92: aload_0
      93: invokevirtual #33                 // Method getWorkflowType:()Lcom/amazonaws/services/simpleworkflow/model/WorkflowType;
      96: invokevirtual #51                 // Method com/amazonaws/services/simpleworkflow/model/WorkflowType.hashCode:()I
      99: iadd
     100: istore_2
     101: bipush        31
     103: iload_2
     104: imul
     105: aload_0
     106: invokevirtual #35                 // Method getEvents:()Ljava/util/List;
     109: ifnonnull     116
     112: iconst_0
     113: goto          125
     116: aload_0
     117: invokevirtual #35                 // Method getEvents:()Ljava/util/List;
     120: invokeinterface #52,  1           // InterfaceMethod java/util/List.hashCode:()I
     125: iadd
     126: istore_2
     127: bipush        31
     129: iload_2
     130: imul
     131: aload_0
     132: invokevirtual #37                 // Method getNextPageToken:()Ljava/lang/String;
     135: ifnonnull     142
     138: iconst_0
     139: goto          149
     142: aload_0
     143: invokevirtual #37                 // Method getNextPageToken:()Ljava/lang/String;
     146: invokevirtual #48                 // Method java/lang/String.hashCode:()I
     149: iadd
     150: istore_2
     151: bipush        31
     153: iload_2
     154: imul
     155: aload_0
     156: invokevirtual #39                 // Method getPreviousStartedEventId:()Ljava/lang/Long;
     159: ifnonnull     166
     162: iconst_0
     163: goto          173
     166: aload_0
     167: invokevirtual #39                 // Method getPreviousStartedEventId:()Ljava/lang/Long;
     170: invokevirtual #49                 // Method java/lang/Long.hashCode:()I
     173: iadd
     174: istore_2
     175: iload_2
     176: ireturn

  public com.amazonaws.services.simpleworkflow.model.DecisionTask clone();
    Code:
       0: aload_0
       1: invokespecial #53                 // Method java/lang/Object.clone:()Ljava/lang/Object;
       4: checkcast     #42                 // class com/amazonaws/services/simpleworkflow/model/DecisionTask
       7: areturn
       8: astore_1
       9: new           #55                 // class java/lang/IllegalStateException
      12: dup
      13: ldc           #56                 // String Got a CloneNotSupportedException from Object.clone() even though we\'re Cloneable!
      15: aload_1
      16: invokespecial #57                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      19: athrow
    Exception table:
       from    to  target type
           0     7     8   Class java/lang/CloneNotSupportedException

  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
    Code:
       0: aload_0
       1: invokevirtual #58                 // Method clone:()Lcom/amazonaws/services/simpleworkflow/model/DecisionTask;
       4: areturn
}
