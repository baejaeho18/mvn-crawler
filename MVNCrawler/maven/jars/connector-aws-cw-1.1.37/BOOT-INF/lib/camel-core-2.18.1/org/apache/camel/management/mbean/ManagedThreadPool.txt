Compiled from "ManagedThreadPool.java"
public class org.apache.camel.management.mbean.ManagedThreadPool implements org.apache.camel.api.management.mbean.ManagedThreadPoolMBean {
  private final org.apache.camel.CamelContext camelContext;

  private final java.util.concurrent.ThreadPoolExecutor threadPool;

  private final java.lang.String id;

  private final java.lang.String sourceId;

  private final java.lang.String routeId;

  private final java.lang.String threadPoolProfileId;

  public org.apache.camel.management.mbean.ManagedThreadPool(org.apache.camel.CamelContext, java.util.concurrent.ThreadPoolExecutor, java.lang.String, java.lang.String, java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #24                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #26                 // Field camelContext:Lorg/apache/camel/CamelContext;
       9: aload_0
      10: aload_2
      11: putfield      #28                 // Field threadPool:Ljava/util/concurrent/ThreadPoolExecutor;
      14: aload_0
      15: aload         4
      17: putfield      #30                 // Field sourceId:Ljava/lang/String;
      20: aload_0
      21: aload_3
      22: putfield      #32                 // Field id:Ljava/lang/String;
      25: aload_0
      26: aload         5
      28: putfield      #34                 // Field routeId:Ljava/lang/String;
      31: aload_0
      32: aload         6
      34: putfield      #36                 // Field threadPoolProfileId:Ljava/lang/String;
      37: return

  public void init(org.apache.camel.spi.ManagementStrategy);
    Code:
       0: return

  public org.apache.camel.CamelContext getContext();
    Code:
       0: aload_0
       1: getfield      #26                 // Field camelContext:Lorg/apache/camel/CamelContext;
       4: areturn

  public java.util.concurrent.ThreadPoolExecutor getThreadPool();
    Code:
       0: aload_0
       1: getfield      #28                 // Field threadPool:Ljava/util/concurrent/ThreadPoolExecutor;
       4: areturn

  public java.lang.String getCamelId();
    Code:
       0: aload_0
       1: getfield      #26                 // Field camelContext:Lorg/apache/camel/CamelContext;
       4: invokeinterface #53,  1           // InterfaceMethod org/apache/camel/CamelContext.getName:()Ljava/lang/String;
       9: areturn

  public java.lang.String getCamelManagementName();
    Code:
       0: aload_0
       1: getfield      #26                 // Field camelContext:Lorg/apache/camel/CamelContext;
       4: invokeinterface #57,  1           // InterfaceMethod org/apache/camel/CamelContext.getManagementName:()Ljava/lang/String;
       9: areturn

  public java.lang.String getId();
    Code:
       0: aload_0
       1: getfield      #32                 // Field id:Ljava/lang/String;
       4: areturn

  public java.lang.String getSourceId();
    Code:
       0: aload_0
       1: getfield      #30                 // Field sourceId:Ljava/lang/String;
       4: areturn

  public java.lang.String getRouteId();
    Code:
       0: aload_0
       1: getfield      #34                 // Field routeId:Ljava/lang/String;
       4: areturn

  public java.lang.String getThreadPoolProfileId();
    Code:
       0: aload_0
       1: getfield      #36                 // Field threadPoolProfileId:Ljava/lang/String;
       4: areturn

  public int getCorePoolSize();
    Code:
       0: aload_0
       1: getfield      #28                 // Field threadPool:Ljava/util/concurrent/ThreadPoolExecutor;
       4: invokevirtual #67                 // Method java/util/concurrent/ThreadPoolExecutor.getCorePoolSize:()I
       7: ireturn

  public void setCorePoolSize(int);
    Code:
       0: aload_0
       1: getfield      #28                 // Field threadPool:Ljava/util/concurrent/ThreadPoolExecutor;
       4: iload_1
       5: invokevirtual #71                 // Method java/util/concurrent/ThreadPoolExecutor.setCorePoolSize:(I)V
       8: return

  public int getPoolSize();
    Code:
       0: aload_0
       1: getfield      #28                 // Field threadPool:Ljava/util/concurrent/ThreadPoolExecutor;
       4: invokevirtual #76                 // Method java/util/concurrent/ThreadPoolExecutor.getPoolSize:()I
       7: ireturn

  public int getMaximumPoolSize();
    Code:
       0: aload_0
       1: getfield      #28                 // Field threadPool:Ljava/util/concurrent/ThreadPoolExecutor;
       4: invokevirtual #79                 // Method java/util/concurrent/ThreadPoolExecutor.getMaximumPoolSize:()I
       7: ireturn

  public void setMaximumPoolSize(int);
    Code:
       0: aload_0
       1: getfield      #28                 // Field threadPool:Ljava/util/concurrent/ThreadPoolExecutor;
       4: iload_1
       5: invokevirtual #82                 // Method java/util/concurrent/ThreadPoolExecutor.setMaximumPoolSize:(I)V
       8: return

  public int getLargestPoolSize();
    Code:
       0: aload_0
       1: getfield      #28                 // Field threadPool:Ljava/util/concurrent/ThreadPoolExecutor;
       4: invokevirtual #86                 // Method java/util/concurrent/ThreadPoolExecutor.getLargestPoolSize:()I
       7: ireturn

  public int getActiveCount();
    Code:
       0: aload_0
       1: getfield      #28                 // Field threadPool:Ljava/util/concurrent/ThreadPoolExecutor;
       4: invokevirtual #89                 // Method java/util/concurrent/ThreadPoolExecutor.getActiveCount:()I
       7: ireturn

  public long getTaskCount();
    Code:
       0: aload_0
       1: getfield      #28                 // Field threadPool:Ljava/util/concurrent/ThreadPoolExecutor;
       4: invokevirtual #93                 // Method java/util/concurrent/ThreadPoolExecutor.getTaskCount:()J
       7: lreturn

  public long getCompletedTaskCount();
    Code:
       0: aload_0
       1: getfield      #28                 // Field threadPool:Ljava/util/concurrent/ThreadPoolExecutor;
       4: invokevirtual #96                 // Method java/util/concurrent/ThreadPoolExecutor.getCompletedTaskCount:()J
       7: lreturn

  public long getTaskQueueSize();
    Code:
       0: aload_0
       1: getfield      #28                 // Field threadPool:Ljava/util/concurrent/ThreadPoolExecutor;
       4: invokevirtual #101                // Method java/util/concurrent/ThreadPoolExecutor.getQueue:()Ljava/util/concurrent/BlockingQueue;
       7: ifnull        24
      10: aload_0
      11: getfield      #28                 // Field threadPool:Ljava/util/concurrent/ThreadPoolExecutor;
      14: invokevirtual #101                // Method java/util/concurrent/ThreadPoolExecutor.getQueue:()Ljava/util/concurrent/BlockingQueue;
      17: invokeinterface #106,  1          // InterfaceMethod java/util/concurrent/BlockingQueue.size:()I
      22: i2l
      23: lreturn
      24: lconst_0
      25: lreturn

  public boolean isTaskQueueEmpty();
    Code:
       0: aload_0
       1: getfield      #28                 // Field threadPool:Ljava/util/concurrent/ThreadPoolExecutor;
       4: invokevirtual #101                // Method java/util/concurrent/ThreadPoolExecutor.getQueue:()Ljava/util/concurrent/BlockingQueue;
       7: ifnull        23
      10: aload_0
      11: getfield      #28                 // Field threadPool:Ljava/util/concurrent/ThreadPoolExecutor;
      14: invokevirtual #101                // Method java/util/concurrent/ThreadPoolExecutor.getQueue:()Ljava/util/concurrent/BlockingQueue;
      17: invokeinterface #111,  1          // InterfaceMethod java/util/concurrent/BlockingQueue.isEmpty:()Z
      22: ireturn
      23: iconst_1
      24: ireturn

  public long getKeepAliveTime();
    Code:
       0: aload_0
       1: getfield      #28                 // Field threadPool:Ljava/util/concurrent/ThreadPoolExecutor;
       4: getstatic     #118                // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
       7: invokevirtual #121                // Method java/util/concurrent/ThreadPoolExecutor.getKeepAliveTime:(Ljava/util/concurrent/TimeUnit;)J
      10: lreturn

  public void setKeepAliveTime(long);
    Code:
       0: aload_0
       1: getfield      #28                 // Field threadPool:Ljava/util/concurrent/ThreadPoolExecutor;
       4: lload_1
       5: getstatic     #118                // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
       8: invokevirtual #126                // Method java/util/concurrent/ThreadPoolExecutor.setKeepAliveTime:(JLjava/util/concurrent/TimeUnit;)V
      11: return

  public boolean isAllowCoreThreadTimeout();
    Code:
       0: aload_0
       1: getfield      #28                 // Field threadPool:Ljava/util/concurrent/ThreadPoolExecutor;
       4: invokevirtual #132                // Method java/util/concurrent/ThreadPoolExecutor.allowsCoreThreadTimeOut:()Z
       7: ireturn

  public void setAllowCoreThreadTimeout(boolean);
    Code:
       0: aload_0
       1: getfield      #28                 // Field threadPool:Ljava/util/concurrent/ThreadPoolExecutor;
       4: iload_1
       5: invokevirtual #137                // Method java/util/concurrent/ThreadPoolExecutor.allowCoreThreadTimeOut:(Z)V
       8: return

  public boolean isShutdown();
    Code:
       0: aload_0
       1: getfield      #28                 // Field threadPool:Ljava/util/concurrent/ThreadPoolExecutor;
       4: invokevirtual #142                // Method java/util/concurrent/ThreadPoolExecutor.isShutdown:()Z
       7: ireturn

  public void purge();
    Code:
       0: aload_0
       1: getfield      #28                 // Field threadPool:Ljava/util/concurrent/ThreadPoolExecutor;
       4: invokevirtual #145                // Method java/util/concurrent/ThreadPoolExecutor.purge:()V
       7: return

  public int getTaskQueueRemainingCapacity();
    Code:
       0: aload_0
       1: getfield      #28                 // Field threadPool:Ljava/util/concurrent/ThreadPoolExecutor;
       4: invokevirtual #101                // Method java/util/concurrent/ThreadPoolExecutor.getQueue:()Ljava/util/concurrent/BlockingQueue;
       7: ifnull        23
      10: aload_0
      11: getfield      #28                 // Field threadPool:Ljava/util/concurrent/ThreadPoolExecutor;
      14: invokevirtual #101                // Method java/util/concurrent/ThreadPoolExecutor.getQueue:()Ljava/util/concurrent/BlockingQueue;
      17: invokeinterface #149,  1          // InterfaceMethod java/util/concurrent/BlockingQueue.remainingCapacity:()I
      22: ireturn
      23: iconst_0
      24: ireturn
}
