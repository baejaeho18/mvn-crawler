Compiled from "BoundedLocalCache.java"
final class org.apache.camel.com.github.benmanes.caffeine.cache.BoundedLocalCache$BoundedPolicy<K, V> implements org.apache.camel.com.github.benmanes.caffeine.cache.Policy<K, V> {
  final org.apache.camel.com.github.benmanes.caffeine.cache.BoundedLocalCache<K, V> cache;

  final java.util.function.Function<V, V> transformer;

  final boolean isWeighted;

  java.util.Optional<org.apache.camel.com.github.benmanes.caffeine.cache.Policy$Eviction<K, V>> eviction;

  java.util.Optional<org.apache.camel.com.github.benmanes.caffeine.cache.Policy$Expiration<K, V>> refreshes;

  java.util.Optional<org.apache.camel.com.github.benmanes.caffeine.cache.Policy$Expiration<K, V>> afterWrite;

  java.util.Optional<org.apache.camel.com.github.benmanes.caffeine.cache.Policy$Expiration<K, V>> afterAccess;

  org.apache.camel.com.github.benmanes.caffeine.cache.BoundedLocalCache$BoundedPolicy(org.apache.camel.com.github.benmanes.caffeine.cache.BoundedLocalCache<K, V>, java.util.function.Function<V, V>, boolean);
    Code:
       0: aload_0
       1: invokespecial #49                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_2
       6: putfield      #51                 // Field transformer:Ljava/util/function/Function;
       9: aload_0
      10: iload_3
      11: putfield      #53                 // Field isWeighted:Z
      14: aload_0
      15: aload_1
      16: putfield      #55                 // Field cache:Lorg/apache/camel/com/github/benmanes/caffeine/cache/BoundedLocalCache;
      19: return

  public boolean isRecordingStats();
    Code:
       0: aload_0
       1: getfield      #55                 // Field cache:Lorg/apache/camel/com/github/benmanes/caffeine/cache/BoundedLocalCache;
       4: invokevirtual #62                 // Method org/apache/camel/com/github/benmanes/caffeine/cache/BoundedLocalCache.isRecordingStats:()Z
       7: ireturn

  public java.util.Optional<org.apache.camel.com.github.benmanes.caffeine.cache.Policy$Eviction<K, V>> eviction();
    Code:
       0: aload_0
       1: getfield      #55                 // Field cache:Lorg/apache/camel/com/github/benmanes/caffeine/cache/BoundedLocalCache;
       4: invokevirtual #66                 // Method org/apache/camel/com/github/benmanes/caffeine/cache/BoundedLocalCache.evicts:()Z
       7: ifeq          43
      10: aload_0
      11: getfield      #68                 // Field eviction:Ljava/util/Optional;
      14: ifnonnull     36
      17: aload_0
      18: new           #22                 // class org/apache/camel/com/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy$BoundedEviction
      21: dup
      22: aload_0
      23: invokespecial #71                 // Method org/apache/camel/com/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy$BoundedEviction."<init>":(Lorg/apache/camel/com/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy;)V
      26: invokestatic  #77                 // Method java/util/Optional.of:(Ljava/lang/Object;)Ljava/util/Optional;
      29: dup_x1
      30: putfield      #68                 // Field eviction:Ljava/util/Optional;
      33: goto          46
      36: aload_0
      37: getfield      #68                 // Field eviction:Ljava/util/Optional;
      40: goto          46
      43: invokestatic  #80                 // Method java/util/Optional.empty:()Ljava/util/Optional;
      46: areturn

  public java.util.Optional<org.apache.camel.com.github.benmanes.caffeine.cache.Policy$Expiration<K, V>> expireAfterAccess();
    Code:
       0: aload_0
       1: getfield      #55                 // Field cache:Lorg/apache/camel/com/github/benmanes/caffeine/cache/BoundedLocalCache;
       4: invokevirtual #84                 // Method org/apache/camel/com/github/benmanes/caffeine/cache/BoundedLocalCache.expiresAfterAccess:()Z
       7: ifne          14
      10: invokestatic  #80                 // Method java/util/Optional.empty:()Ljava/util/Optional;
      13: areturn
      14: aload_0
      15: getfield      #86                 // Field afterAccess:Ljava/util/Optional;
      18: ifnonnull     40
      21: aload_0
      22: new           #19                 // class org/apache/camel/com/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy$BoundedExpireAfterAccess
      25: dup
      26: aload_0
      27: invokespecial #87                 // Method org/apache/camel/com/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy$BoundedExpireAfterAccess."<init>":(Lorg/apache/camel/com/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy;)V
      30: invokestatic  #77                 // Method java/util/Optional.of:(Ljava/lang/Object;)Ljava/util/Optional;
      33: dup_x1
      34: putfield      #86                 // Field afterAccess:Ljava/util/Optional;
      37: goto          44
      40: aload_0
      41: getfield      #86                 // Field afterAccess:Ljava/util/Optional;
      44: areturn

  public java.util.Optional<org.apache.camel.com.github.benmanes.caffeine.cache.Policy$Expiration<K, V>> expireAfterWrite();
    Code:
       0: aload_0
       1: getfield      #55                 // Field cache:Lorg/apache/camel/com/github/benmanes/caffeine/cache/BoundedLocalCache;
       4: invokevirtual #91                 // Method org/apache/camel/com/github/benmanes/caffeine/cache/BoundedLocalCache.expiresAfterWrite:()Z
       7: ifne          14
      10: invokestatic  #80                 // Method java/util/Optional.empty:()Ljava/util/Optional;
      13: areturn
      14: aload_0
      15: getfield      #93                 // Field afterWrite:Ljava/util/Optional;
      18: ifnonnull     40
      21: aload_0
      22: new           #16                 // class org/apache/camel/com/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy$BoundedExpireAfterWrite
      25: dup
      26: aload_0
      27: invokespecial #94                 // Method org/apache/camel/com/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy$BoundedExpireAfterWrite."<init>":(Lorg/apache/camel/com/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy;)V
      30: invokestatic  #77                 // Method java/util/Optional.of:(Ljava/lang/Object;)Ljava/util/Optional;
      33: dup_x1
      34: putfield      #93                 // Field afterWrite:Ljava/util/Optional;
      37: goto          44
      40: aload_0
      41: getfield      #93                 // Field afterWrite:Ljava/util/Optional;
      44: areturn

  public java.util.Optional<org.apache.camel.com.github.benmanes.caffeine.cache.Policy$Expiration<K, V>> refreshAfterWrite();
    Code:
       0: aload_0
       1: getfield      #55                 // Field cache:Lorg/apache/camel/com/github/benmanes/caffeine/cache/BoundedLocalCache;
       4: invokevirtual #97                 // Method org/apache/camel/com/github/benmanes/caffeine/cache/BoundedLocalCache.refreshAfterWrite:()Z
       7: ifne          14
      10: invokestatic  #80                 // Method java/util/Optional.empty:()Ljava/util/Optional;
      13: areturn
      14: aload_0
      15: getfield      #99                 // Field refreshes:Ljava/util/Optional;
      18: ifnonnull     40
      21: aload_0
      22: new           #13                 // class org/apache/camel/com/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy$BoundedRefreshAfterWrite
      25: dup
      26: aload_0
      27: invokespecial #100                // Method org/apache/camel/com/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy$BoundedRefreshAfterWrite."<init>":(Lorg/apache/camel/com/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy;)V
      30: invokestatic  #77                 // Method java/util/Optional.of:(Ljava/lang/Object;)Ljava/util/Optional;
      33: dup_x1
      34: putfield      #99                 // Field refreshes:Ljava/util/Optional;
      37: goto          44
      40: aload_0
      41: getfield      #99                 // Field refreshes:Ljava/util/Optional;
      44: areturn
}
