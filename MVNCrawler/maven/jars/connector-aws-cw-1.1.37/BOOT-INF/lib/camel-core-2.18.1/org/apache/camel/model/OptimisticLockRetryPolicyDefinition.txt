Compiled from "OptimisticLockRetryPolicyDefinition.java"
public class org.apache.camel.model.OptimisticLockRetryPolicyDefinition {
  private java.lang.Integer maximumRetries;

  private java.lang.Long retryDelay;

  private java.lang.Long maximumRetryDelay;

  private java.lang.Boolean exponentialBackOff;

  private java.lang.Boolean randomBackOff;

  public org.apache.camel.model.OptimisticLockRetryPolicyDefinition();
    Code:
       0: aload_0
       1: invokespecial #32                 // Method java/lang/Object."<init>":()V
       4: return

  public org.apache.camel.processor.aggregate.OptimisticLockRetryPolicy createOptimisticLockRetryPolicy();
    Code:
       0: new           #38                 // class org/apache/camel/processor/aggregate/OptimisticLockRetryPolicy
       3: dup
       4: invokespecial #39                 // Method org/apache/camel/processor/aggregate/OptimisticLockRetryPolicy."<init>":()V
       7: astore_1
       8: aload_0
       9: getfield      #41                 // Field maximumRetries:Ljava/lang/Integer;
      12: ifnull        26
      15: aload_1
      16: aload_0
      17: getfield      #41                 // Field maximumRetries:Ljava/lang/Integer;
      20: invokevirtual #47                 // Method java/lang/Integer.intValue:()I
      23: invokevirtual #51                 // Method org/apache/camel/processor/aggregate/OptimisticLockRetryPolicy.setMaximumRetries:(I)V
      26: aload_0
      27: getfield      #53                 // Field retryDelay:Ljava/lang/Long;
      30: ifnull        44
      33: aload_1
      34: aload_0
      35: getfield      #53                 // Field retryDelay:Ljava/lang/Long;
      38: invokevirtual #59                 // Method java/lang/Long.longValue:()J
      41: invokevirtual #63                 // Method org/apache/camel/processor/aggregate/OptimisticLockRetryPolicy.setRetryDelay:(J)V
      44: aload_0
      45: getfield      #65                 // Field maximumRetryDelay:Ljava/lang/Long;
      48: ifnull        62
      51: aload_1
      52: aload_0
      53: getfield      #65                 // Field maximumRetryDelay:Ljava/lang/Long;
      56: invokevirtual #59                 // Method java/lang/Long.longValue:()J
      59: invokevirtual #68                 // Method org/apache/camel/processor/aggregate/OptimisticLockRetryPolicy.setMaximumRetryDelay:(J)V
      62: aload_0
      63: getfield      #70                 // Field exponentialBackOff:Ljava/lang/Boolean;
      66: ifnull        80
      69: aload_1
      70: aload_0
      71: getfield      #70                 // Field exponentialBackOff:Ljava/lang/Boolean;
      74: invokevirtual #76                 // Method java/lang/Boolean.booleanValue:()Z
      77: invokevirtual #80                 // Method org/apache/camel/processor/aggregate/OptimisticLockRetryPolicy.setExponentialBackOff:(Z)V
      80: aload_0
      81: getfield      #82                 // Field randomBackOff:Ljava/lang/Boolean;
      84: ifnull        98
      87: aload_1
      88: aload_0
      89: getfield      #82                 // Field randomBackOff:Ljava/lang/Boolean;
      92: invokevirtual #76                 // Method java/lang/Boolean.booleanValue:()Z
      95: invokevirtual #85                 // Method org/apache/camel/processor/aggregate/OptimisticLockRetryPolicy.setRandomBackOff:(Z)V
      98: aload_1
      99: areturn

  public org.apache.camel.model.OptimisticLockRetryPolicyDefinition maximumRetries(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #92                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       5: invokevirtual #95                 // Method setMaximumRetries:(Ljava/lang/Integer;)V
       8: aload_0
       9: areturn

  public java.lang.Integer getMaximumRetries();
    Code:
       0: aload_0
       1: getfield      #41                 // Field maximumRetries:Ljava/lang/Integer;
       4: areturn

  public void setMaximumRetries(java.lang.Integer);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #41                 // Field maximumRetries:Ljava/lang/Integer;
       5: return

  public org.apache.camel.model.OptimisticLockRetryPolicyDefinition retryDelay(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokestatic  #102                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
       5: invokevirtual #105                // Method setRetryDelay:(Ljava/lang/Long;)V
       8: aload_0
       9: areturn

  public java.lang.Long getRetryDelay();
    Code:
       0: aload_0
       1: getfield      #53                 // Field retryDelay:Ljava/lang/Long;
       4: areturn

  public void setRetryDelay(java.lang.Long);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #53                 // Field retryDelay:Ljava/lang/Long;
       5: return

  public org.apache.camel.model.OptimisticLockRetryPolicyDefinition maximumRetryDelay(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokestatic  #102                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
       5: invokevirtual #110                // Method setMaximumRetryDelay:(Ljava/lang/Long;)V
       8: aload_0
       9: areturn

  public java.lang.Long getMaximumRetryDelay();
    Code:
       0: aload_0
       1: getfield      #65                 // Field maximumRetryDelay:Ljava/lang/Long;
       4: areturn

  public void setMaximumRetryDelay(java.lang.Long);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #65                 // Field maximumRetryDelay:Ljava/lang/Long;
       5: return

  public org.apache.camel.model.OptimisticLockRetryPolicyDefinition exponentialBackOff();
    Code:
       0: aload_0
       1: iconst_1
       2: invokevirtual #115                // Method exponentialBackOff:(Z)Lorg/apache/camel/model/OptimisticLockRetryPolicyDefinition;
       5: areturn

  public org.apache.camel.model.OptimisticLockRetryPolicyDefinition exponentialBackOff(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #118                // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
       5: invokevirtual #121                // Method setExponentialBackOff:(Ljava/lang/Boolean;)V
       8: aload_0
       9: areturn

  public java.lang.Boolean getExponentialBackOff();
    Code:
       0: aload_0
       1: getfield      #70                 // Field exponentialBackOff:Ljava/lang/Boolean;
       4: areturn

  public void setExponentialBackOff(java.lang.Boolean);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #70                 // Field exponentialBackOff:Ljava/lang/Boolean;
       5: return

  public org.apache.camel.model.OptimisticLockRetryPolicyDefinition randomBackOff();
    Code:
       0: aload_0
       1: iconst_1
       2: invokevirtual #126                // Method randomBackOff:(Z)Lorg/apache/camel/model/OptimisticLockRetryPolicyDefinition;
       5: areturn

  public org.apache.camel.model.OptimisticLockRetryPolicyDefinition randomBackOff(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #118                // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
       5: invokevirtual #128                // Method setRandomBackOff:(Ljava/lang/Boolean;)V
       8: aload_0
       9: areturn

  public java.lang.Boolean getRandomBackOff();
    Code:
       0: aload_0
       1: getfield      #82                 // Field randomBackOff:Ljava/lang/Boolean;
       4: areturn

  public void setRandomBackOff(java.lang.Boolean);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #82                 // Field randomBackOff:Ljava/lang/Boolean;
       5: return
}
