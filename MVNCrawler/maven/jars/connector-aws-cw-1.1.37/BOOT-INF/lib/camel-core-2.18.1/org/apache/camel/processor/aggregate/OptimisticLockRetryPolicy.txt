Compiled from "OptimisticLockRetryPolicy.java"
public class org.apache.camel.processor.aggregate.OptimisticLockRetryPolicy {
  private static final long DEFAULT_MAXIMUM_RETRY_DELAY;

  private int maximumRetries;

  private long retryDelay;

  private long maximumRetryDelay;

  private boolean exponentialBackOff;

  private boolean randomBackOff;

  public org.apache.camel.processor.aggregate.OptimisticLockRetryPolicy();
    Code:
       0: aload_0
       1: invokespecial #20                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: ldc2_w        #21                 // long 50l
       8: putfield      #24                 // Field retryDelay:J
      11: aload_0
      12: iconst_1
      13: putfield      #26                 // Field exponentialBackOff:Z
      16: return

  public boolean shouldRetry(int);
    Code:
       0: aload_0
       1: getfield      #32                 // Field maximumRetries:I
       4: ifle          15
       7: iload_1
       8: aload_0
       9: getfield      #32                 // Field maximumRetries:I
      12: if_icmpge     19
      15: iconst_1
      16: goto          20
      19: iconst_0
      20: ireturn

  public void doDelay(int) throws java.lang.InterruptedException;
    Code:
       0: aload_0
       1: getfield      #24                 // Field retryDelay:J
       4: lconst_0
       5: lcmp
       6: ifgt          16
       9: aload_0
      10: getfield      #39                 // Field randomBackOff:Z
      13: ifeq          105
      16: aload_0
      17: getfield      #26                 // Field exponentialBackOff:Z
      20: ifeq          32
      23: aload_0
      24: getfield      #24                 // Field retryDelay:J
      27: iload_1
      28: lshl
      29: goto          77
      32: aload_0
      33: getfield      #39                 // Field randomBackOff:Z
      36: ifeq          73
      39: new           #41                 // class java/util/Random
      42: dup
      43: invokespecial #42                 // Method java/util/Random."<init>":()V
      46: aload_0
      47: getfield      #44                 // Field maximumRetryDelay:J
      50: lconst_0
      51: lcmp
      52: ifle          62
      55: aload_0
      56: getfield      #44                 // Field maximumRetryDelay:J
      59: goto          65
      62: ldc2_w        #8                  // long 1000l
      65: l2i
      66: invokevirtual #48                 // Method java/util/Random.nextInt:(I)I
      69: i2l
      70: goto          77
      73: aload_0
      74: getfield      #24                 // Field retryDelay:J
      77: lstore_2
      78: aload_0
      79: getfield      #44                 // Field maximumRetryDelay:J
      82: lconst_0
      83: lcmp
      84: ifle          101
      87: lload_2
      88: aload_0
      89: getfield      #44                 // Field maximumRetryDelay:J
      92: lcmp
      93: ifle          101
      96: aload_0
      97: getfield      #44                 // Field maximumRetryDelay:J
     100: lstore_2
     101: lload_2
     102: invokestatic  #54                 // Method java/lang/Thread.sleep:(J)V
     105: return

  public int getMaximumRetries();
    Code:
       0: aload_0
       1: getfield      #32                 // Field maximumRetries:I
       4: ireturn

  public void setMaximumRetries(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #32                 // Field maximumRetries:I
       5: return

  public org.apache.camel.processor.aggregate.OptimisticLockRetryPolicy maximumRetries(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #61                 // Method setMaximumRetries:(I)V
       5: aload_0
       6: areturn

  public long getRetryDelay();
    Code:
       0: aload_0
       1: getfield      #24                 // Field retryDelay:J
       4: lreturn

  public void setRetryDelay(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #24                 // Field retryDelay:J
       5: return

  public org.apache.camel.processor.aggregate.OptimisticLockRetryPolicy retryDelay(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #67                 // Method setRetryDelay:(J)V
       5: aload_0
       6: areturn

  public long getMaximumRetryDelay();
    Code:
       0: aload_0
       1: getfield      #44                 // Field maximumRetryDelay:J
       4: lreturn

  public void setMaximumRetryDelay(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #44                 // Field maximumRetryDelay:J
       5: return

  public org.apache.camel.processor.aggregate.OptimisticLockRetryPolicy maximumRetryDelay(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #71                 // Method setMaximumRetryDelay:(J)V
       5: aload_0
       6: areturn

  public boolean isExponentialBackOff();
    Code:
       0: aload_0
       1: getfield      #26                 // Field exponentialBackOff:Z
       4: ireturn

  public void setExponentialBackOff(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #26                 // Field exponentialBackOff:Z
       5: return

  public org.apache.camel.processor.aggregate.OptimisticLockRetryPolicy exponentialBackOff();
    Code:
       0: aload_0
       1: iconst_1
       2: invokevirtual #78                 // Method setExponentialBackOff:(Z)V
       5: aload_0
       6: areturn

  public boolean isRandomBackOff();
    Code:
       0: aload_0
       1: getfield      #39                 // Field randomBackOff:Z
       4: ireturn

  public void setRandomBackOff(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #39                 // Field randomBackOff:Z
       5: return

  public org.apache.camel.processor.aggregate.OptimisticLockRetryPolicy randomBackOff();
    Code:
       0: aload_0
       1: iconst_1
       2: invokevirtual #82                 // Method setRandomBackOff:(Z)V
       5: aload_0
       6: areturn

  public java.lang.String toString();
    Code:
       0: new           #86                 // class java/lang/StringBuilder
       3: dup
       4: ldc           #88                 // String OptimisticLockRetryPolicy[
       6: invokespecial #91                 // Method java/lang/StringBuilder."<init>":(Ljava/lang/String;)V
       9: astore_1
      10: aload_1
      11: ldc           #93                 // String maximumRetries=
      13: invokevirtual #97                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      16: aload_0
      17: getfield      #32                 // Field maximumRetries:I
      20: invokevirtual #100                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      23: pop
      24: aload_1
      25: ldc           #102                // String , retryDelay=
      27: invokevirtual #97                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      30: aload_0
      31: getfield      #24                 // Field retryDelay:J
      34: invokevirtual #105                // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      37: pop
      38: aload_1
      39: ldc           #107                // String , maximumRetryDelay=
      41: invokevirtual #97                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      44: aload_0
      45: getfield      #44                 // Field maximumRetryDelay:J
      48: invokevirtual #105                // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      51: pop
      52: aload_1
      53: ldc           #109                // String , exponentialBackOff=
      55: invokevirtual #97                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      58: aload_0
      59: getfield      #26                 // Field exponentialBackOff:Z
      62: invokevirtual #112                // Method java/lang/StringBuilder.append:(Z)Ljava/lang/StringBuilder;
      65: pop
      66: aload_1
      67: ldc           #114                // String , randomBackOff=
      69: invokevirtual #97                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      72: aload_0
      73: getfield      #39                 // Field randomBackOff:Z
      76: invokevirtual #112                // Method java/lang/StringBuilder.append:(Z)Ljava/lang/StringBuilder;
      79: pop
      80: aload_1
      81: bipush        93
      83: invokevirtual #117                // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      86: pop
      87: aload_1
      88: invokevirtual #119                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      91: areturn
}
