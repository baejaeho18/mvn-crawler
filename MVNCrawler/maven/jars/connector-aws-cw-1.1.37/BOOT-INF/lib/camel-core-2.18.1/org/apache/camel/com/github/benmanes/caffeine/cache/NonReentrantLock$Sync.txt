Compiled from "NonReentrantLock.java"
final class org.apache.camel.com.github.benmanes.caffeine.cache.NonReentrantLock$Sync extends java.util.concurrent.locks.AbstractQueuedSynchronizer implements java.util.concurrent.locks.Lock,java.io.Serializable {
  static final long serialVersionUID;

  static final int UNLOCKED;

  static final int LOCKED;

  org.apache.camel.com.github.benmanes.caffeine.cache.NonReentrantLock$Sync();
    Code:
       0: aload_0
       1: invokespecial #28                 // Method java/util/concurrent/locks/AbstractQueuedSynchronizer."<init>":()V
       4: return

  public void lock();
    Code:
       0: aload_0
       1: iconst_1
       2: invokevirtual #35                 // Method acquire:(I)V
       5: return

  public void lockInterruptibly() throws java.lang.InterruptedException;
    Code:
       0: aload_0
       1: iconst_1
       2: invokevirtual #41                 // Method acquireInterruptibly:(I)V
       5: return

  public boolean tryLock();
    Code:
       0: aload_0
       1: iconst_1
       2: invokevirtual #47                 // Method tryAcquire:(I)Z
       5: ireturn

  public boolean tryLock(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException;
    Code:
       0: aload_0
       1: iconst_1
       2: aload_3
       3: lload_1
       4: invokevirtual #54                 // Method java/util/concurrent/TimeUnit.toNanos:(J)J
       7: invokevirtual #58                 // Method tryAcquireNanos:(IJ)Z
      10: ireturn

  public void unlock();
    Code:
       0: aload_0
       1: iconst_0
       2: invokevirtual #65                 // Method release:(I)Z
       5: pop
       6: return

  public java.util.concurrent.locks.Condition newCondition();
    Code:
       0: new           #14                 // class java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject
       3: dup
       4: aload_0
       5: invokespecial #70                 // Method java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject."<init>":(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer;)V
       8: areturn

  protected boolean tryAcquire(int);
    Code:
       0: aload_0
       1: invokevirtual #74                 // Method getState:()I
       4: ifne          25
       7: aload_0
       8: iconst_0
       9: iconst_1
      10: invokevirtual #78                 // Method compareAndSetState:(II)Z
      13: ifeq          25
      16: aload_0
      17: invokestatic  #84                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      20: invokevirtual #88                 // Method setExclusiveOwnerThread:(Ljava/lang/Thread;)V
      23: iconst_1
      24: ireturn
      25: iconst_0
      26: ireturn

  protected boolean tryRelease(int);
    Code:
       0: invokestatic  #84                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
       3: aload_0
       4: invokevirtual #93                 // Method getExclusiveOwnerThread:()Ljava/lang/Thread;
       7: if_acmpeq     18
      10: new           #95                 // class java/lang/IllegalMonitorStateException
      13: dup
      14: invokespecial #96                 // Method java/lang/IllegalMonitorStateException."<init>":()V
      17: athrow
      18: aload_0
      19: aconst_null
      20: invokevirtual #88                 // Method setExclusiveOwnerThread:(Ljava/lang/Thread;)V
      23: aload_0
      24: iconst_0
      25: invokevirtual #99                 // Method setState:(I)V
      28: iconst_1
      29: ireturn

  protected boolean isHeldExclusively();
    Code:
       0: aload_0
       1: invokevirtual #104                // Method isLocked:()Z
       4: ifeq          21
       7: aload_0
       8: invokevirtual #93                 // Method getExclusiveOwnerThread:()Ljava/lang/Thread;
      11: invokestatic  #84                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      14: if_acmpne     21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: ireturn

  public boolean isLocked();
    Code:
       0: aload_0
       1: invokevirtual #74                 // Method getState:()I
       4: iconst_1
       5: if_icmpne     12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: ireturn

  public java.lang.Thread getOwner();
    Code:
       0: aload_0
       1: invokevirtual #93                 // Method getExclusiveOwnerThread:()Ljava/lang/Thread;
       4: areturn

  private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException;
    Code:
       0: aload_1
       1: invokevirtual #116                // Method java/io/ObjectInputStream.defaultReadObject:()V
       4: aload_0
       5: iconst_0
       6: invokevirtual #99                 // Method setState:(I)V
       9: return
}
