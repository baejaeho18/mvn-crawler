{
  "groups": [
    {
      "name": "flyway",
      "type": "org.springframework.boot.autoconfigure.flyway.FlywayProperties",
      "sourceType": "org.springframework.boot.autoconfigure.flyway.FlywayProperties"
    },
    {
      "name": "flyway",
      "type": "org.flywaydb.core.Flyway",
      "sourceType": "org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration",
      "sourceMethod": "flyway()"
    },
    {
      "name": "liquibase",
      "type": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties",
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties"
    },
    {
      "name": "security",
      "type": "org.springframework.boot.autoconfigure.security.SecurityProperties",
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties"
    },
    {
      "name": "security.basic",
      "type": "org.springframework.boot.autoconfigure.security.SecurityProperties$Basic",
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties",
      "sourceMethod": "getBasic()"
    },
    {
      "name": "security.headers",
      "type": "org.springframework.boot.autoconfigure.security.SecurityProperties$Headers",
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties",
      "sourceMethod": "getHeaders()"
    },
    {
      "name": "security.oauth2.authorization",
      "type": "org.springframework.boot.autoconfigure.security.oauth2.authserver.AuthorizationServerProperties",
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.authserver.AuthorizationServerProperties"
    },
    {
      "name": "security.oauth2.client",
      "type": "org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeResourceDetails",
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ProtectedResourceDetailsConfiguration",
      "sourceMethod": "oauth2RemoteResource()"
    },
    {
      "name": "security.oauth2.client",
      "type": "org.springframework.security.oauth2.client.token.grant.client.ClientCredentialsResourceDetails",
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2RestOperationsConfiguration$SingletonScopedConfiguration",
      "sourceMethod": "oauth2RemoteResource()"
    },
    {
      "name": "security.oauth2.client",
      "type": "org.springframework.security.oauth2.provider.client.BaseClientDetails",
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.authserver.OAuth2AuthorizationServerConfiguration$BaseClientDetailsConfiguration",
      "sourceMethod": "oauth2ClientDetails()"
    },
    {
      "name": "security.oauth2.client",
      "type": "org.springframework.boot.autoconfigure.security.oauth2.OAuth2ClientProperties",
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.OAuth2ClientProperties"
    },
    {
      "name": "security.oauth2.resource",
      "type": "org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties",
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties"
    },
    {
      "name": "security.oauth2.resource.jwt",
      "type": "org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties$Jwt",
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties",
      "sourceMethod": "getJwt()"
    },
    {
      "name": "security.oauth2.sso",
      "type": "org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2SsoProperties",
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2SsoProperties"
    },
    {
      "name": "security.user",
      "type": "org.springframework.boot.autoconfigure.security.SecurityProperties$User",
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties",
      "sourceMethod": "getUser()"
    },
    {
      "name": "server",
      "type": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties"
    },
    {
      "name": "server.compression",
      "type": "org.springframework.boot.context.embedded.Compression",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "sourceMethod": "getCompression()"
    },
    {
      "name": "server.error",
      "type": "org.springframework.boot.autoconfigure.web.ErrorProperties",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "sourceMethod": "getError()"
    },
    {
      "name": "server.jetty",
      "type": "org.springframework.boot.autoconfigure.web.ServerProperties$Jetty",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "sourceMethod": "getJetty()"
    },
    {
      "name": "server.jsp-servlet",
      "type": "org.springframework.boot.context.embedded.JspServlet",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "sourceMethod": "getJspServlet()"
    },
    {
      "name": "server.session",
      "type": "org.springframework.boot.autoconfigure.web.ServerProperties$Session",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "sourceMethod": "getSession()"
    },
    {
      "name": "server.session.cookie",
      "type": "org.springframework.boot.autoconfigure.web.ServerProperties$Session$Cookie",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Session",
      "sourceMethod": "getCookie()"
    },
    {
      "name": "server.ssl",
      "type": "org.springframework.boot.context.embedded.Ssl",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "sourceMethod": "getSsl()"
    },
    {
      "name": "server.tomcat",
      "type": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "sourceMethod": "getTomcat()"
    },
    {
      "name": "server.tomcat.accesslog",
      "type": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Accesslog",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "sourceMethod": "getAccesslog()"
    },
    {
      "name": "server.undertow",
      "type": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "sourceMethod": "getUndertow()"
    },
    {
      "name": "server.undertow.accesslog",
      "type": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow$Accesslog",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow",
      "sourceMethod": "getAccesslog()"
    },
    {
      "name": "spring.activemq",
      "type": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties",
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties"
    },
    {
      "name": "spring.activemq.packages",
      "type": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Packages",
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties",
      "sourceMethod": "getPackages()"
    },
    {
      "name": "spring.activemq.pool",
      "type": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Pool",
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties",
      "sourceMethod": "getPool()"
    },
    {
      "name": "spring.activemq.pool.configuration",
      "type": "org.apache.activemq.pool.PooledConnectionFactory",
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQConnectionFactoryConfiguration$PooledConnectionFactoryConfiguration",
      "sourceMethod": "pooledJmsConnectionFactory(org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties)"
    },
    {
      "name": "spring.artemis",
      "type": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties",
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties"
    },
    {
      "name": "spring.artemis.embedded",
      "type": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties$Embedded",
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties",
      "sourceMethod": "getEmbedded()"
    },
    {
      "name": "spring.batch",
      "type": "org.springframework.boot.autoconfigure.batch.BatchProperties",
      "sourceType": "org.springframework.boot.autoconfigure.batch.BatchProperties"
    },
    {
      "name": "spring.batch.initializer",
      "type": "org.springframework.boot.autoconfigure.batch.BatchProperties$Initializer",
      "sourceType": "org.springframework.boot.autoconfigure.batch.BatchProperties",
      "sourceMethod": "getInitializer()"
    },
    {
      "name": "spring.batch.job",
      "type": "org.springframework.boot.autoconfigure.batch.BatchProperties$Job",
      "sourceType": "org.springframework.boot.autoconfigure.batch.BatchProperties",
      "sourceMethod": "getJob()"
    },
    {
      "name": "spring.cache",
      "type": "org.springframework.boot.autoconfigure.cache.CacheProperties",
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties"
    },
    {
      "name": "spring.cache.caffeine",
      "type": "org.springframework.boot.autoconfigure.cache.CacheProperties$Caffeine",
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties",
      "sourceMethod": "getCaffeine()"
    },
    {
      "name": "spring.cache.couchbase",
      "type": "org.springframework.boot.autoconfigure.cache.CacheProperties$Couchbase",
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties",
      "sourceMethod": "getCouchbase()"
    },
    {
      "name": "spring.cache.ehcache",
      "type": "org.springframework.boot.autoconfigure.cache.CacheProperties$EhCache",
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties",
      "sourceMethod": "getEhcache()"
    },
    {
      "name": "spring.cache.guava",
      "type": "org.springframework.boot.autoconfigure.cache.CacheProperties$Guava",
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties",
      "sourceMethod": "getGuava()"
    },
    {
      "name": "spring.cache.hazelcast",
      "type": "org.springframework.boot.autoconfigure.cache.CacheProperties$Hazelcast",
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties",
      "sourceMethod": "getHazelcast()"
    },
    {
      "name": "spring.cache.infinispan",
      "type": "org.springframework.boot.autoconfigure.cache.CacheProperties$Infinispan",
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties",
      "sourceMethod": "getInfinispan()"
    },
    {
      "name": "spring.cache.jcache",
      "type": "org.springframework.boot.autoconfigure.cache.CacheProperties$JCache",
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties",
      "sourceMethod": "getJcache()"
    },
    {
      "name": "spring.couchbase",
      "type": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties"
    },
    {
      "name": "spring.couchbase.bucket",
      "type": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Bucket",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties",
      "sourceMethod": "getBucket()"
    },
    {
      "name": "spring.couchbase.env",
      "type": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Env",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties",
      "sourceMethod": "getEnv()"
    },
    {
      "name": "spring.couchbase.env.endpoints",
      "type": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Endpoints",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Env",
      "sourceMethod": "getEndpoints()"
    },
    {
      "name": "spring.couchbase.env.ssl",
      "type": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Ssl",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Env",
      "sourceMethod": "getSsl()"
    },
    {
      "name": "spring.couchbase.env.timeouts",
      "type": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Timeouts",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Env",
      "sourceMethod": "getTimeouts()"
    },
    {
      "name": "spring.data.cassandra",
      "type": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties"
    },
    {
      "name": "spring.data.couchbase",
      "type": "org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataProperties",
      "sourceType": "org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataProperties"
    },
    {
      "name": "spring.data.elasticsearch",
      "type": "org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchProperties",
      "sourceType": "org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchProperties"
    },
    {
      "name": "spring.data.mongodb",
      "type": "org.springframework.boot.autoconfigure.mongo.MongoProperties",
      "sourceType": "org.springframework.boot.autoconfigure.mongo.MongoProperties"
    },
    {
      "name": "spring.data.neo4j",
      "type": "org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties",
      "sourceType": "org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties"
    },
    {
      "name": "spring.data.neo4j.embedded",
      "type": "org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties$Embedded",
      "sourceType": "org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties",
      "sourceMethod": "getEmbedded()"
    },
    {
      "name": "spring.data.rest",
      "type": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties",
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties"
    },
    {
      "name": "spring.data.solr",
      "type": "org.springframework.boot.autoconfigure.solr.SolrProperties",
      "sourceType": "org.springframework.boot.autoconfigure.solr.SolrProperties"
    },
    {
      "name": "spring.datasource",
      "type": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties"
    },
    {
      "name": "spring.datasource.dbcp",
      "type": "org.apache.commons.dbcp.BasicDataSource",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration$Dbcp",
      "sourceMethod": "dataSource(org.springframework.boot.autoconfigure.jdbc.DataSourceProperties)"
    },
    {
      "name": "spring.datasource.dbcp2",
      "type": "org.apache.commons.dbcp2.BasicDataSource",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration$Dbcp2",
      "sourceMethod": "dataSource(org.springframework.boot.autoconfigure.jdbc.DataSourceProperties)"
    },
    {
      "name": "spring.datasource.hikari",
      "type": "com.zaxxer.hikari.HikariDataSource",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration$Hikari",
      "sourceMethod": "dataSource(org.springframework.boot.autoconfigure.jdbc.DataSourceProperties)"
    },
    {
      "name": "spring.datasource.tomcat",
      "type": "org.apache.tomcat.jdbc.pool.DataSource",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration$Tomcat",
      "sourceMethod": "dataSource(org.springframework.boot.autoconfigure.jdbc.DataSourceProperties)"
    },
    {
      "name": "spring.datasource.xa",
      "type": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties$Xa",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "sourceMethod": "getXa()"
    },
    {
      "name": "spring.elasticsearch.jest",
      "type": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties",
      "sourceType": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties"
    },
    {
      "name": "spring.elasticsearch.jest.proxy",
      "type": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties$Proxy",
      "sourceType": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties",
      "sourceMethod": "getProxy()"
    },
    {
      "name": "spring.freemarker",
      "type": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties"
    },
    {
      "name": "spring.groovy.template",
      "type": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties"
    },
    {
      "name": "spring.groovy.template.configuration",
      "type": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer",
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration$GroovyMarkupConfiguration",
      "sourceMethod": "groovyMarkupConfigurer()"
    },
    {
      "name": "spring.h2.console",
      "type": "org.springframework.boot.autoconfigure.h2.H2ConsoleProperties",
      "sourceType": "org.springframework.boot.autoconfigure.h2.H2ConsoleProperties"
    },
    {
      "name": "spring.h2.console.settings",
      "type": "org.springframework.boot.autoconfigure.h2.H2ConsoleProperties$Settings",
      "sourceType": "org.springframework.boot.autoconfigure.h2.H2ConsoleProperties",
      "sourceMethod": "getSettings()"
    },
    {
      "name": "spring.hateoas",
      "type": "org.springframework.boot.autoconfigure.hateoas.HateoasProperties",
      "sourceType": "org.springframework.boot.autoconfigure.hateoas.HateoasProperties"
    },
    {
      "name": "spring.hazelcast",
      "type": "org.springframework.boot.autoconfigure.hazelcast.HazelcastProperties",
      "sourceType": "org.springframework.boot.autoconfigure.hazelcast.HazelcastProperties"
    },
    {
      "name": "spring.hornetq",
      "type": "org.springframework.boot.autoconfigure.jms.hornetq.HornetQProperties",
      "sourceType": "org.springframework.boot.autoconfigure.jms.hornetq.HornetQProperties"
    },
    {
      "name": "spring.hornetq.embedded",
      "type": "org.springframework.boot.autoconfigure.jms.hornetq.HornetQProperties$Embedded",
      "sourceType": "org.springframework.boot.autoconfigure.jms.hornetq.HornetQProperties",
      "sourceMethod": "getEmbedded()"
    },
    {
      "name": "spring.http.encoding",
      "type": "org.springframework.boot.autoconfigure.web.HttpEncodingProperties",
      "sourceType": "org.springframework.boot.autoconfigure.web.HttpEncodingProperties"
    },
    {
      "name": "spring.http.multipart",
      "type": "org.springframework.boot.autoconfigure.web.MultipartProperties",
      "sourceType": "org.springframework.boot.autoconfigure.web.MultipartProperties"
    },
    {
      "name": "spring.info",
      "type": "org.springframework.boot.autoconfigure.info.ProjectInfoProperties",
      "sourceType": "org.springframework.boot.autoconfigure.info.ProjectInfoProperties"
    },
    {
      "name": "spring.info.build",
      "type": "org.springframework.boot.autoconfigure.info.ProjectInfoProperties$Build",
      "sourceType": "org.springframework.boot.autoconfigure.info.ProjectInfoProperties",
      "sourceMethod": "getBuild()"
    },
    {
      "name": "spring.info.git",
      "type": "org.springframework.boot.autoconfigure.info.ProjectInfoProperties$Git",
      "sourceType": "org.springframework.boot.autoconfigure.info.ProjectInfoProperties",
      "sourceMethod": "getGit()"
    },
    {
      "name": "spring.jackson",
      "type": "org.springframework.boot.autoconfigure.jackson.JacksonProperties",
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties"
    },
    {
      "name": "spring.jersey",
      "type": "org.springframework.boot.autoconfigure.jersey.JerseyProperties",
      "sourceType": "org.springframework.boot.autoconfigure.jersey.JerseyProperties"
    },
    {
      "name": "spring.jersey.filter",
      "type": "org.springframework.boot.autoconfigure.jersey.JerseyProperties$Filter",
      "sourceType": "org.springframework.boot.autoconfigure.jersey.JerseyProperties",
      "sourceMethod": "getFilter()"
    },
    {
      "name": "spring.jersey.servlet",
      "type": "org.springframework.boot.autoconfigure.jersey.JerseyProperties$Servlet",
      "sourceType": "org.springframework.boot.autoconfigure.jersey.JerseyProperties",
      "sourceMethod": "getServlet()"
    },
    {
      "name": "spring.jms",
      "type": "org.springframework.boot.autoconfigure.jms.JmsProperties",
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties"
    },
    {
      "name": "spring.jms.listener",
      "type": "org.springframework.boot.autoconfigure.jms.JmsProperties$Listener",
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties",
      "sourceMethod": "getListener()"
    },
    {
      "name": "spring.jooq",
      "type": "org.springframework.boot.autoconfigure.jooq.JooqProperties",
      "sourceType": "org.springframework.boot.autoconfigure.jooq.JooqProperties"
    },
    {
      "name": "spring.jpa",
      "type": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties",
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties"
    },
    {
      "name": "spring.jpa.hibernate",
      "type": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties$Hibernate",
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties",
      "sourceMethod": "getHibernate()"
    },
    {
      "name": "spring.jpa.hibernate.naming",
      "type": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties$Naming",
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties$Hibernate",
      "sourceMethod": "getNaming()"
    },
    {
      "name": "spring.jta",
      "type": "org.springframework.boot.autoconfigure.transaction.jta.JtaProperties",
      "sourceType": "org.springframework.boot.autoconfigure.transaction.jta.JtaProperties"
    },
    {
      "name": "spring.jta.bitronix.properties",
      "type": "bitronix.tm.Configuration",
      "sourceType": "org.springframework.boot.autoconfigure.transaction.jta.BitronixJtaConfiguration",
      "sourceMethod": "bitronixConfiguration()"
    },
    {
      "name": "spring.mail",
      "type": "org.springframework.boot.autoconfigure.mail.MailProperties",
      "sourceType": "org.springframework.boot.autoconfigure.mail.MailProperties"
    },
    {
      "name": "spring.messages",
      "type": "org.springframework.boot.autoconfigure.MessageSourceAutoConfiguration",
      "sourceType": "org.springframework.boot.autoconfigure.MessageSourceAutoConfiguration"
    },
    {
      "name": "spring.mobile.devicedelegatingviewresolver",
      "type": "org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverProperties",
      "sourceType": "org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverProperties"
    },
    {
      "name": "spring.mongodb.embedded",
      "type": "org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoProperties",
      "sourceType": "org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoProperties"
    },
    {
      "name": "spring.mongodb.embedded.storage",
      "type": "org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoProperties$Storage",
      "sourceType": "org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoProperties",
      "sourceMethod": "getStorage()"
    },
    {
      "name": "spring.mustache",
      "type": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties"
    },
    {
      "name": "spring.mvc",
      "type": "org.springframework.boot.autoconfigure.web.WebMvcProperties",
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties"
    },
    {
      "name": "spring.mvc.async",
      "type": "org.springframework.boot.autoconfigure.web.WebMvcProperties$Async",
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties",
      "sourceMethod": "getAsync()"
    },
    {
      "name": "spring.mvc.servlet",
      "type": "org.springframework.boot.autoconfigure.web.WebMvcProperties$Servlet",
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties",
      "sourceMethod": "getServlet()"
    },
    {
      "name": "spring.mvc.view",
      "type": "org.springframework.boot.autoconfigure.web.WebMvcProperties$View",
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties",
      "sourceMethod": "getView()"
    },
    {
      "name": "spring.rabbitmq",
      "type": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties"
    },
    {
      "name": "spring.rabbitmq.cache",
      "type": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Cache",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "sourceMethod": "getCache()"
    },
    {
      "name": "spring.rabbitmq.cache.channel",
      "type": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Cache$Channel",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Cache",
      "sourceMethod": "getChannel()"
    },
    {
      "name": "spring.rabbitmq.cache.connection",
      "type": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Cache$Connection",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Cache",
      "sourceMethod": "getConnection()"
    },
    {
      "name": "spring.rabbitmq.listener",
      "type": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Listener",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "sourceMethod": "getListener()"
    },
    {
      "name": "spring.rabbitmq.listener.retry",
      "type": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Listener",
      "sourceMethod": "getRetry()"
    },
    {
      "name": "spring.rabbitmq.ssl",
      "type": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "sourceMethod": "getSsl()"
    },
    {
      "name": "spring.rabbitmq.template",
      "type": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Template",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "sourceMethod": "getTemplate()"
    },
    {
      "name": "spring.rabbitmq.template.retry",
      "type": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Retry",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Template",
      "sourceMethod": "getRetry()"
    },
    {
      "name": "spring.redis",
      "type": "org.springframework.boot.autoconfigure.data.redis.RedisProperties",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties"
    },
    {
      "name": "spring.redis.cluster",
      "type": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Cluster",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties",
      "sourceMethod": "getCluster()"
    },
    {
      "name": "spring.redis.pool",
      "type": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties",
      "sourceMethod": "getPool()"
    },
    {
      "name": "spring.redis.sentinel",
      "type": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Sentinel",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties",
      "sourceMethod": "getSentinel()"
    },
    {
      "name": "spring.resources",
      "type": "org.springframework.boot.autoconfigure.web.ResourceProperties",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties"
    },
    {
      "name": "spring.resources.chain",
      "type": "org.springframework.boot.autoconfigure.web.ResourceProperties$Chain",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties",
      "sourceMethod": "getChain()"
    },
    {
      "name": "spring.resources.chain.strategy",
      "type": "org.springframework.boot.autoconfigure.web.ResourceProperties$Strategy",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Chain",
      "sourceMethod": "getStrategy()"
    },
    {
      "name": "spring.resources.chain.strategy.content",
      "type": "org.springframework.boot.autoconfigure.web.ResourceProperties$Content",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Strategy",
      "sourceMethod": "getContent()"
    },
    {
      "name": "spring.resources.chain.strategy.fixed",
      "type": "org.springframework.boot.autoconfigure.web.ResourceProperties$Fixed",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Strategy",
      "sourceMethod": "getFixed()"
    },
    {
      "name": "spring.sendgrid",
      "type": "org.springframework.boot.autoconfigure.sendgrid.SendGridProperties",
      "sourceType": "org.springframework.boot.autoconfigure.sendgrid.SendGridProperties"
    },
    {
      "name": "spring.sendgrid.proxy",
      "type": "org.springframework.boot.autoconfigure.sendgrid.SendGridProperties$Proxy",
      "sourceType": "org.springframework.boot.autoconfigure.sendgrid.SendGridProperties",
      "sourceMethod": "getProxy()"
    },
    {
      "name": "spring.session",
      "type": "org.springframework.boot.autoconfigure.session.SessionProperties",
      "sourceType": "org.springframework.boot.autoconfigure.session.SessionProperties"
    },
    {
      "name": "spring.session.hazelcast",
      "type": "org.springframework.boot.autoconfigure.session.SessionProperties$Hazelcast",
      "sourceType": "org.springframework.boot.autoconfigure.session.SessionProperties",
      "sourceMethod": "getHazelcast()"
    },
    {
      "name": "spring.session.jdbc",
      "type": "org.springframework.boot.autoconfigure.session.SessionProperties$Jdbc",
      "sourceType": "org.springframework.boot.autoconfigure.session.SessionProperties",
      "sourceMethod": "getJdbc()"
    },
    {
      "name": "spring.session.jdbc.initializer",
      "type": "org.springframework.boot.autoconfigure.session.SessionProperties$Jdbc$Initializer",
      "sourceType": "org.springframework.boot.autoconfigure.session.SessionProperties$Jdbc",
      "sourceMethod": "getInitializer()"
    },
    {
      "name": "spring.session.mongo",
      "type": "org.springframework.boot.autoconfigure.session.SessionProperties$Mongo",
      "sourceType": "org.springframework.boot.autoconfigure.session.SessionProperties",
      "sourceMethod": "getMongo()"
    },
    {
      "name": "spring.session.redis",
      "type": "org.springframework.boot.autoconfigure.session.SessionProperties$Redis",
      "sourceType": "org.springframework.boot.autoconfigure.session.SessionProperties",
      "sourceMethod": "getRedis()"
    },
    {
      "name": "spring.social.facebook",
      "type": "org.springframework.boot.autoconfigure.social.FacebookProperties",
      "sourceType": "org.springframework.boot.autoconfigure.social.FacebookProperties"
    },
    {
      "name": "spring.social.linkedin",
      "type": "org.springframework.boot.autoconfigure.social.LinkedInProperties",
      "sourceType": "org.springframework.boot.autoconfigure.social.LinkedInProperties"
    },
    {
      "name": "spring.social.twitter",
      "type": "org.springframework.boot.autoconfigure.social.TwitterProperties",
      "sourceType": "org.springframework.boot.autoconfigure.social.TwitterProperties"
    },
    {
      "name": "spring.thymeleaf",
      "type": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties"
    },
    {
      "name": "spring.velocity",
      "type": "org.springframework.boot.autoconfigure.velocity.VelocityProperties",
      "sourceType": "org.springframework.boot.autoconfigure.velocity.VelocityProperties"
    },
    {
      "name": "spring.webservices",
      "type": "org.springframework.boot.autoconfigure.webservices.WebServicesProperties",
      "sourceType": "org.springframework.boot.autoconfigure.webservices.WebServicesProperties"
    },
    {
      "name": "spring.webservices.servlet",
      "type": "org.springframework.boot.autoconfigure.webservices.WebServicesProperties$Servlet",
      "sourceType": "org.springframework.boot.autoconfigure.webservices.WebServicesProperties",
      "sourceMethod": "getServlet()"
    }
  ],
  "properties": [
    {
      "name": "error.path",
      "type": "java.lang.String",
      "description": "Path of the error controller.",
      "deprecated": true,
      "deprecation": {"replacement": "server.error.path"}
    },
    {
      "name": "flyway.baseline-description",
      "type": "java.lang.String",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "flyway.baseline-on-migrate",
      "type": "java.lang.Boolean",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "flyway.baseline-version",
      "type": "org.flywaydb.core.api.MigrationVersion",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "flyway.check-location",
      "type": "java.lang.Boolean",
      "description": "Check that migration scripts location exists.",
      "sourceType": "org.springframework.boot.autoconfigure.flyway.FlywayProperties",
      "defaultValue": false
    },
    {
      "name": "flyway.clean-on-validation-error",
      "type": "java.lang.Boolean",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "flyway.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable flyway.",
      "sourceType": "org.springframework.boot.autoconfigure.flyway.FlywayProperties",
      "defaultValue": true
    },
    {
      "name": "flyway.encoding",
      "type": "java.lang.String",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "flyway.ignore-failed-future-migration",
      "type": "java.lang.Boolean",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "flyway.init-description",
      "type": "java.lang.String",
      "sourceType": "org.flywaydb.core.Flyway",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "flyway.init-on-migrate",
      "type": "java.lang.Boolean",
      "sourceType": "org.flywaydb.core.Flyway",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "flyway.init-sqls",
      "type": "java.util.List<java.lang.String>",
      "description": "SQL statements to execute to initialize a connection immediately after obtaining\n it.",
      "sourceType": "org.springframework.boot.autoconfigure.flyway.FlywayProperties"
    },
    {
      "name": "flyway.init-version",
      "type": "org.flywaydb.core.api.MigrationVersion",
      "sourceType": "org.flywaydb.core.Flyway",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "flyway.locations",
      "type": "java.util.List<java.lang.String>",
      "description": "Locations of migrations scripts.",
      "sourceType": "org.springframework.boot.autoconfigure.flyway.FlywayProperties"
    },
    {
      "name": "flyway.locations",
      "type": "java.lang.String[]",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "flyway.out-of-order",
      "type": "java.lang.Boolean",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "flyway.password",
      "type": "java.lang.String",
      "description": "Login password of the database to migrate.",
      "sourceType": "org.springframework.boot.autoconfigure.flyway.FlywayProperties"
    },
    {
      "name": "flyway.placeholder-prefix",
      "type": "java.lang.String",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "flyway.placeholder-replacement",
      "type": "java.lang.Boolean",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "flyway.placeholder-suffix",
      "type": "java.lang.String",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "flyway.placeholders",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "flyway.schemas",
      "type": "java.lang.String[]",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "flyway.sql-migration-prefix",
      "type": "java.lang.String",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "flyway.sql-migration-separator",
      "type": "java.lang.String",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "flyway.sql-migration-suffix",
      "type": "java.lang.String",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "flyway.table",
      "type": "java.lang.String",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "flyway.target",
      "type": "org.flywaydb.core.api.MigrationVersion",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "flyway.url",
      "type": "java.lang.String",
      "description": "JDBC url of the database to migrate. If not set, the primary configured data source\n is used.",
      "sourceType": "org.springframework.boot.autoconfigure.flyway.FlywayProperties"
    },
    {
      "name": "flyway.user",
      "type": "java.lang.String",
      "description": "Login user of the database to migrate.",
      "sourceType": "org.springframework.boot.autoconfigure.flyway.FlywayProperties"
    },
    {
      "name": "flyway.validate-on-migrate",
      "type": "java.lang.Boolean",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "liquibase.change-log",
      "type": "java.lang.String",
      "description": "Change log configuration path.",
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties",
      "defaultValue": "classpath:/db/changelog/db.changelog-master.yaml"
    },
    {
      "name": "liquibase.check-change-log-location",
      "type": "java.lang.Boolean",
      "description": "Check the change log location exists.",
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties",
      "defaultValue": true
    },
    {
      "name": "liquibase.contexts",
      "type": "java.lang.String",
      "description": "Comma-separated list of runtime contexts to use.",
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties"
    },
    {
      "name": "liquibase.default-schema",
      "type": "java.lang.String",
      "description": "Default database schema.",
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties"
    },
    {
      "name": "liquibase.drop-first",
      "type": "java.lang.Boolean",
      "description": "Drop the database schema first.",
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties",
      "defaultValue": false
    },
    {
      "name": "liquibase.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable liquibase support.",
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties",
      "defaultValue": true
    },
    {
      "name": "liquibase.labels",
      "type": "java.lang.String",
      "description": "Comma-separated list of runtime labels to use.",
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties"
    },
    {
      "name": "liquibase.parameters",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "description": "Change log parameters.",
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties"
    },
    {
      "name": "liquibase.password",
      "type": "java.lang.String",
      "description": "Login password of the database to migrate.",
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties"
    },
    {
      "name": "liquibase.rollback-file",
      "type": "java.io.File",
      "description": "File to which rollback SQL will be written when an update is performed.",
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties"
    },
    {
      "name": "liquibase.url",
      "type": "java.lang.String",
      "description": "JDBC url of the database to migrate. If not set, the primary configured data source\n is used.",
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties"
    },
    {
      "name": "liquibase.user",
      "type": "java.lang.String",
      "description": "Login user of the database to migrate.",
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties"
    },
    {
      "name": "security.basic.authorize-mode",
      "type": "org.springframework.boot.autoconfigure.security.SecurityAuthorizeMode",
      "description": "Security authorize mode to apply.",
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties$Basic"
    },
    {
      "name": "security.basic.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable basic authentication.",
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties$Basic",
      "defaultValue": true
    },
    {
      "name": "security.basic.path",
      "type": "java.lang.String[]",
      "description": "Comma-separated list of paths to secure.",
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties$Basic",
      "defaultValue": ["/**"]
    },
    {
      "name": "security.basic.realm",
      "type": "java.lang.String",
      "description": "HTTP basic realm name.",
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties$Basic",
      "defaultValue": "Spring"
    },
    {
      "name": "security.enable-csrf",
      "type": "java.lang.Boolean",
      "description": "Enable Cross Site Request Forgery support.",
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties",
      "defaultValue": false
    },
    {
      "name": "security.filter-dispatcher-types",
      "type": "java.util.Set<java.lang.String>",
      "description": "Security filter chain dispatcher types.",
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties"
    },
    {
      "name": "security.filter-order",
      "type": "java.lang.Integer",
      "description": "Security filter chain order.",
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties",
      "defaultValue": 0
    },
    {
      "name": "security.headers.cache",
      "type": "java.lang.Boolean",
      "description": "Enable cache control HTTP headers.",
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties$Headers",
      "defaultValue": true
    },
    {
      "name": "security.headers.content-type",
      "type": "java.lang.Boolean",
      "description": "Enable \"X-Content-Type-Options\" header.",
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties$Headers",
      "defaultValue": true
    },
    {
      "name": "security.headers.frame",
      "type": "java.lang.Boolean",
      "description": "Enable \"X-Frame-Options\" header.",
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties$Headers",
      "defaultValue": true
    },
    {
      "name": "security.headers.hsts",
      "type": "org.springframework.boot.autoconfigure.security.SecurityProperties$Headers$HSTS",
      "description": "HTTP Strict Transport Security (HSTS) mode (none, domain, all).",
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties$Headers"
    },
    {
      "name": "security.headers.xss",
      "type": "java.lang.Boolean",
      "description": "Enable cross site scripting (XSS) protection.",
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties$Headers",
      "defaultValue": true
    },
    {
      "name": "security.ignored",
      "type": "java.util.List<java.lang.String>",
      "description": "Comma-separated list of paths to exclude from the default secured paths.",
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties"
    },
    {
      "name": "security.oauth2.authorization.check-token-access",
      "type": "java.lang.String",
      "description": "Spring Security access rule for the check token endpoint (e.g. a SpEL expression\n like \"isAuthenticated()\") . Default is empty, which is interpreted as \"denyAll()\"\n (no access).",
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.authserver.AuthorizationServerProperties"
    },
    {
      "name": "security.oauth2.authorization.realm",
      "type": "java.lang.String",
      "description": "Realm name for client authentication. If an unauthenticated request comes in to the\n token endpoint, it will respond with a challenge including this name.",
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.authserver.AuthorizationServerProperties"
    },
    {
      "name": "security.oauth2.authorization.token-key-access",
      "type": "java.lang.String",
      "description": "Spring Security access rule for the token key endpoint (e.g. a SpEL expression like\n \"isAuthenticated()\"). Default is empty, which is interpreted as \"denyAll()\" (no\n access).",
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.authserver.AuthorizationServerProperties"
    },
    {
      "name": "security.oauth2.client.access-token-uri",
      "type": "java.lang.String",
      "sourceType": "org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeResourceDetails"
    },
    {
      "name": "security.oauth2.client.access-token-uri",
      "type": "java.lang.String",
      "sourceType": "org.springframework.security.oauth2.client.token.grant.client.ClientCredentialsResourceDetails"
    },
    {
      "name": "security.oauth2.client.access-token-validity-seconds",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.security.oauth2.provider.client.BaseClientDetails"
    },
    {
      "name": "security.oauth2.client.additional-information",
      "type": "java.util.Map<java.lang.String,java.lang.Object>",
      "sourceType": "org.springframework.security.oauth2.provider.client.BaseClientDetails"
    },
    {
      "name": "security.oauth2.client.authentication-scheme",
      "type": "org.springframework.security.oauth2.common.AuthenticationScheme",
      "sourceType": "org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeResourceDetails"
    },
    {
      "name": "security.oauth2.client.authentication-scheme",
      "type": "org.springframework.security.oauth2.common.AuthenticationScheme",
      "sourceType": "org.springframework.security.oauth2.client.token.grant.client.ClientCredentialsResourceDetails"
    },
    {
      "name": "security.oauth2.client.authorities",
      "type": "java.util.Collection<org.springframework.security.core.GrantedAuthority>",
      "sourceType": "org.springframework.security.oauth2.provider.client.BaseClientDetails"
    },
    {
      "name": "security.oauth2.client.authorized-grant-types",
      "type": "java.util.Set<java.lang.String>",
      "sourceType": "org.springframework.security.oauth2.provider.client.BaseClientDetails"
    },
    {
      "name": "security.oauth2.client.auto-approve-scopes",
      "type": "java.util.Set<java.lang.String>",
      "sourceType": "org.springframework.security.oauth2.provider.client.BaseClientDetails"
    },
    {
      "name": "security.oauth2.client.client-authentication-scheme",
      "type": "org.springframework.security.oauth2.common.AuthenticationScheme",
      "sourceType": "org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeResourceDetails"
    },
    {
      "name": "security.oauth2.client.client-authentication-scheme",
      "type": "org.springframework.security.oauth2.common.AuthenticationScheme",
      "sourceType": "org.springframework.security.oauth2.client.token.grant.client.ClientCredentialsResourceDetails"
    },
    {
      "name": "security.oauth2.client.client-id",
      "type": "java.lang.String",
      "sourceType": "org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeResourceDetails"
    },
    {
      "name": "security.oauth2.client.client-id",
      "type": "java.lang.String",
      "sourceType": "org.springframework.security.oauth2.client.token.grant.client.ClientCredentialsResourceDetails"
    },
    {
      "name": "security.oauth2.client.client-id",
      "type": "java.lang.String",
      "sourceType": "org.springframework.security.oauth2.provider.client.BaseClientDetails"
    },
    {
      "name": "security.oauth2.client.client-id",
      "type": "java.lang.String",
      "description": "OAuth2 client id.",
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.OAuth2ClientProperties"
    },
    {
      "name": "security.oauth2.client.client-secret",
      "type": "java.lang.String",
      "sourceType": "org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeResourceDetails"
    },
    {
      "name": "security.oauth2.client.client-secret",
      "type": "java.lang.String",
      "sourceType": "org.springframework.security.oauth2.client.token.grant.client.ClientCredentialsResourceDetails"
    },
    {
      "name": "security.oauth2.client.client-secret",
      "type": "java.lang.String",
      "sourceType": "org.springframework.security.oauth2.provider.client.BaseClientDetails"
    },
    {
      "name": "security.oauth2.client.client-secret",
      "type": "java.lang.String",
      "description": "OAuth2 client secret. A random secret is generated by default.",
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.OAuth2ClientProperties"
    },
    {
      "name": "security.oauth2.client.grant-type",
      "type": "java.lang.String",
      "sourceType": "org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeResourceDetails"
    },
    {
      "name": "security.oauth2.client.grant-type",
      "type": "java.lang.String",
      "sourceType": "org.springframework.security.oauth2.client.token.grant.client.ClientCredentialsResourceDetails"
    },
    {
      "name": "security.oauth2.client.id",
      "type": "java.lang.String",
      "sourceType": "org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeResourceDetails"
    },
    {
      "name": "security.oauth2.client.id",
      "type": "java.lang.String",
      "sourceType": "org.springframework.security.oauth2.client.token.grant.client.ClientCredentialsResourceDetails"
    },
    {
      "name": "security.oauth2.client.pre-established-redirect-uri",
      "type": "java.lang.String",
      "sourceType": "org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeResourceDetails"
    },
    {
      "name": "security.oauth2.client.refresh-token-validity-seconds",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.security.oauth2.provider.client.BaseClientDetails"
    },
    {
      "name": "security.oauth2.client.registered-redirect-uri",
      "type": "java.util.Set<java.lang.String>",
      "sourceType": "org.springframework.security.oauth2.provider.client.BaseClientDetails"
    },
    {
      "name": "security.oauth2.client.resource-ids",
      "type": "java.util.Set<java.lang.String>",
      "sourceType": "org.springframework.security.oauth2.provider.client.BaseClientDetails"
    },
    {
      "name": "security.oauth2.client.scope",
      "type": "java.util.List<java.lang.String>",
      "sourceType": "org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeResourceDetails"
    },
    {
      "name": "security.oauth2.client.scope",
      "type": "java.util.List<java.lang.String>",
      "sourceType": "org.springframework.security.oauth2.client.token.grant.client.ClientCredentialsResourceDetails"
    },
    {
      "name": "security.oauth2.client.scope",
      "type": "java.util.Set<java.lang.String>",
      "sourceType": "org.springframework.security.oauth2.provider.client.BaseClientDetails"
    },
    {
      "name": "security.oauth2.client.token-name",
      "type": "java.lang.String",
      "sourceType": "org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeResourceDetails"
    },
    {
      "name": "security.oauth2.client.token-name",
      "type": "java.lang.String",
      "sourceType": "org.springframework.security.oauth2.client.token.grant.client.ClientCredentialsResourceDetails"
    },
    {
      "name": "security.oauth2.client.use-current-uri",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeResourceDetails"
    },
    {
      "name": "security.oauth2.client.user-authorization-uri",
      "type": "java.lang.String",
      "sourceType": "org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeResourceDetails"
    },
    {
      "name": "security.oauth2.resource.id",
      "type": "java.lang.String",
      "description": "Identifier of the resource.",
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties"
    },
    {
      "name": "security.oauth2.resource.jwt.key-uri",
      "type": "java.lang.String",
      "description": "The URI of the JWT token. Can be set if the value is not available and the key\n is public.",
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties$Jwt"
    },
    {
      "name": "security.oauth2.resource.jwt.key-value",
      "type": "java.lang.String",
      "description": "The verification key of the JWT token. Can either be a symmetric secret or\n PEM-encoded RSA public key. If the value is not available, you can set the URI\n instead.",
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties$Jwt"
    },
    {
      "name": "security.oauth2.resource.prefer-token-info",
      "type": "java.lang.Boolean",
      "description": "Use the token info, can be set to false to use the user info.",
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties",
      "defaultValue": true
    },
    {
      "name": "security.oauth2.resource.service-id",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties",
      "defaultValue": "resource"
    },
    {
      "name": "security.oauth2.resource.token-info-uri",
      "type": "java.lang.String",
      "description": "URI of the token decoding endpoint.",
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties"
    },
    {
      "name": "security.oauth2.resource.token-type",
      "type": "java.lang.String",
      "description": "The token type to send when using the userInfoUri.",
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties"
    },
    {
      "name": "security.oauth2.resource.user-info-uri",
      "type": "java.lang.String",
      "description": "URI of the user endpoint.",
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties"
    },
    {
      "name": "security.oauth2.sso.filter-order",
      "type": "java.lang.Integer",
      "description": "Filter order to apply if not providing an explicit WebSecurityConfigurerAdapter (in\n which case the order can be provided there instead).",
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2SsoProperties"
    },
    {
      "name": "security.oauth2.sso.login-path",
      "type": "java.lang.String",
      "description": "Path to the login page, i.e. the one that triggers the redirect to the OAuth2\n Authorization Server.",
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2SsoProperties",
      "defaultValue": "/login"
    },
    {
      "name": "security.require-ssl",
      "type": "java.lang.Boolean",
      "description": "Enable secure channel for all requests.",
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties",
      "defaultValue": false
    },
    {
      "name": "security.sessions",
      "type": "org.springframework.security.config.http.SessionCreationPolicy",
      "description": "Session creation policy (always, never, if_required, stateless).",
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties"
    },
    {
      "name": "security.user.name",
      "type": "java.lang.String",
      "description": "Default user name.",
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties$User",
      "defaultValue": "user"
    },
    {
      "name": "security.user.password",
      "type": "java.lang.String",
      "description": "Password for the default user name.",
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties$User"
    },
    {
      "name": "security.user.role",
      "type": "java.util.List<java.lang.String>",
      "description": "Granted roles for the default user name.",
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties$User"
    },
    {
      "name": "server.address",
      "type": "java.net.InetAddress",
      "description": "Network address to which the server should bind to.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties"
    },
    {
      "name": "server.compression.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.context.embedded.Compression"
    },
    {
      "name": "server.compression.excluded-user-agents",
      "type": "java.lang.String[]",
      "sourceType": "org.springframework.boot.context.embedded.Compression"
    },
    {
      "name": "server.compression.mime-types",
      "type": "java.lang.String[]",
      "sourceType": "org.springframework.boot.context.embedded.Compression"
    },
    {
      "name": "server.compression.min-response-size",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.context.embedded.Compression"
    },
    {
      "name": "server.connection-timeout",
      "type": "java.lang.Integer",
      "description": "Time in milliseconds that connectors will wait for another HTTP request before\n closing the connection. When not set, the connector's container-specific default\n will be used. Use a value of -1 to indicate no (i.e. infinite) timeout.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties"
    },
    {
      "name": "server.context-parameters",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "description": "ServletContext parameters.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties"
    },
    {
      "name": "server.context-path",
      "type": "java.lang.String",
      "description": "Context path of the application.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties"
    },
    {
      "name": "server.display-name",
      "type": "java.lang.String",
      "description": "Display name of the application.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "defaultValue": "application"
    },
    {
      "name": "server.error.include-stacktrace",
      "type": "org.springframework.boot.autoconfigure.web.ErrorProperties$IncludeStacktrace",
      "description": "When to include a \"stacktrace\" attribute.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ErrorProperties"
    },
    {
      "name": "server.error.path",
      "type": "java.lang.String",
      "description": "Path of the error controller.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ErrorProperties",
      "defaultValue": "/error"
    },
    {
      "name": "server.error.whitelabel.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the default error page displayed in browsers in case of a server error.",
      "defaultValue": true
    },
    {
      "name": "server.jetty.acceptors",
      "type": "java.lang.Integer",
      "description": "Number of acceptor threads to use.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Jetty"
    },
    {
      "name": "server.jetty.selectors",
      "type": "java.lang.Integer",
      "description": "Number of selector threads to use.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Jetty"
    },
    {
      "name": "server.jsp-servlet.class-name",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.context.embedded.JspServlet"
    },
    {
      "name": "server.jsp-servlet.init-parameters",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "sourceType": "org.springframework.boot.context.embedded.JspServlet"
    },
    {
      "name": "server.jsp-servlet.registered",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.context.embedded.JspServlet"
    },
    {
      "name": "server.max-http-header-size",
      "type": "java.lang.Integer",
      "description": "Maximum size in bytes of the HTTP message header.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "defaultValue": 0
    },
    {
      "name": "server.max-http-post-size",
      "type": "java.lang.Integer",
      "description": "Maximum size in bytes of the HTTP post content.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "defaultValue": 0
    },
    {
      "name": "server.port",
      "type": "java.lang.Integer",
      "description": "Server HTTP port.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties"
    },
    {
      "name": "server.server-header",
      "type": "java.lang.String",
      "description": "Value to use for the Server response header (no header is sent if empty).",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties"
    },
    {
      "name": "server.servlet-path",
      "type": "java.lang.String",
      "description": "Path of the main dispatcher servlet.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "defaultValue": "/"
    },
    {
      "name": "server.session.cookie.comment",
      "type": "java.lang.String",
      "description": "Comment for the session cookie.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Session$Cookie"
    },
    {
      "name": "server.session.cookie.domain",
      "type": "java.lang.String",
      "description": "Domain for the session cookie.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Session$Cookie"
    },
    {
      "name": "server.session.cookie.http-only",
      "type": "java.lang.Boolean",
      "description": "\"HttpOnly\" flag for the session cookie.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Session$Cookie"
    },
    {
      "name": "server.session.cookie.max-age",
      "type": "java.lang.Integer",
      "description": "Maximum age of the session cookie in seconds.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Session$Cookie"
    },
    {
      "name": "server.session.cookie.name",
      "type": "java.lang.String",
      "description": "Session cookie name.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Session$Cookie"
    },
    {
      "name": "server.session.cookie.path",
      "type": "java.lang.String",
      "description": "Path of the session cookie.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Session$Cookie"
    },
    {
      "name": "server.session.cookie.secure",
      "type": "java.lang.Boolean",
      "description": "\"Secure\" flag for the session cookie.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Session$Cookie"
    },
    {
      "name": "server.session.persistent",
      "type": "java.lang.Boolean",
      "description": "Persist session data between restarts.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Session",
      "defaultValue": false
    },
    {
      "name": "server.session.store-dir",
      "type": "java.io.File",
      "description": "Directory used to store session data.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Session"
    },
    {
      "name": "server.session.timeout",
      "type": "java.lang.Integer",
      "description": "Session timeout in seconds.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Session"
    },
    {
      "name": "server.session.tracking-modes",
      "type": "java.util.Set<javax.servlet.SessionTrackingMode>",
      "description": "Session tracking modes (one or more of the following: \"cookie\", \"url\", \"ssl\").",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Session"
    },
    {
      "name": "server.ssl.ciphers",
      "type": "java.lang.String[]",
      "sourceType": "org.springframework.boot.context.embedded.Ssl"
    },
    {
      "name": "server.ssl.client-auth",
      "type": "org.springframework.boot.context.embedded.Ssl$ClientAuth",
      "sourceType": "org.springframework.boot.context.embedded.Ssl"
    },
    {
      "name": "server.ssl.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.context.embedded.Ssl"
    },
    {
      "name": "server.ssl.enabled-protocols",
      "type": "java.lang.String[]",
      "sourceType": "org.springframework.boot.context.embedded.Ssl"
    },
    {
      "name": "server.ssl.key-alias",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.context.embedded.Ssl"
    },
    {
      "name": "server.ssl.key-password",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.context.embedded.Ssl"
    },
    {
      "name": "server.ssl.key-store",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.context.embedded.Ssl"
    },
    {
      "name": "server.ssl.key-store-password",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.context.embedded.Ssl"
    },
    {
      "name": "server.ssl.key-store-provider",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.context.embedded.Ssl"
    },
    {
      "name": "server.ssl.key-store-type",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.context.embedded.Ssl"
    },
    {
      "name": "server.ssl.protocol",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.context.embedded.Ssl"
    },
    {
      "name": "server.ssl.trust-store",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.context.embedded.Ssl"
    },
    {
      "name": "server.ssl.trust-store-password",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.context.embedded.Ssl"
    },
    {
      "name": "server.ssl.trust-store-provider",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.context.embedded.Ssl"
    },
    {
      "name": "server.ssl.trust-store-type",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.context.embedded.Ssl"
    },
    {
      "name": "server.tomcat.accesslog.directory",
      "type": "java.lang.String",
      "description": "Directory in which log files are created. Can be relative to the tomcat\n base dir or absolute.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Accesslog",
      "defaultValue": "logs"
    },
    {
      "name": "server.tomcat.accesslog.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable access log.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Accesslog",
      "defaultValue": false
    },
    {
      "name": "server.tomcat.accesslog.pattern",
      "type": "java.lang.String",
      "description": "Format pattern for access logs.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Accesslog",
      "defaultValue": "common"
    },
    {
      "name": "server.tomcat.accesslog.prefix",
      "type": "java.lang.String",
      "description": "Log file name prefix.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Accesslog",
      "defaultValue": "access_log"
    },
    {
      "name": "server.tomcat.accesslog.rename-on-rotate",
      "type": "java.lang.Boolean",
      "description": "Defer inclusion of the date stamp in the file name until rotate time.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Accesslog",
      "defaultValue": false
    },
    {
      "name": "server.tomcat.accesslog.suffix",
      "type": "java.lang.String",
      "description": "Log file name suffix.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Accesslog",
      "defaultValue": ".log"
    },
    {
      "name": "server.tomcat.background-processor-delay",
      "type": "java.lang.Integer",
      "description": "Delay in seconds between the invocation of backgroundProcess methods.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "defaultValue": 30
    },
    {
      "name": "server.tomcat.basedir",
      "type": "java.io.File",
      "description": "Tomcat base directory. If not specified a temporary directory will be used.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat"
    },
    {
      "name": "server.tomcat.internal-proxies",
      "type": "java.lang.String",
      "description": "Regular expression that matches proxies that are to be trusted.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "defaultValue": "10\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|192\\.168\\.\\d{1,3}\\.\\d{1,3}|169\\.254\\.\\d{1,3}\\.\\d{1,3}|127\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|172\\.1[6-9]{1}\\.\\d{1,3}\\.\\d{1,3}|172\\.2[0-9]{1}\\.\\d{1,3}\\.\\d{1,3}|172\\.3[0-1]{1}\\.\\d{1,3}\\.\\d{1,3}"
    },
    {
      "name": "server.tomcat.max-http-header-size",
      "type": "java.lang.Integer",
      "description": "Maximum size in bytes of the HTTP message header.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "defaultValue": 0,
      "deprecated": true,
      "deprecation": {"replacement": "server.max-http-header-size"}
    },
    {
      "name": "server.tomcat.max-threads",
      "type": "java.lang.Integer",
      "description": "Maximum amount of worker threads.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "defaultValue": 0
    },
    {
      "name": "server.tomcat.min-spare-threads",
      "type": "java.lang.Integer",
      "description": "Minimum amount of worker threads.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "defaultValue": 0
    },
    {
      "name": "server.tomcat.port-header",
      "type": "java.lang.String",
      "description": "Name of the HTTP header used to override the original port value.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "defaultValue": "X-Forwarded-Port"
    },
    {
      "name": "server.tomcat.protocol-header",
      "type": "java.lang.String",
      "description": "Header that holds the incoming protocol, usually named \"X-Forwarded-Proto\".",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat"
    },
    {
      "name": "server.tomcat.protocol-header-https-value",
      "type": "java.lang.String",
      "description": "Value of the protocol header that indicates that the incoming request uses SSL.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "defaultValue": "https"
    },
    {
      "name": "server.tomcat.redirect-context-root",
      "type": "java.lang.Boolean",
      "description": "Whether requests to the context root should be redirected by appending a / to\n the path.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat"
    },
    {
      "name": "server.tomcat.remote-ip-header",
      "type": "java.lang.String",
      "description": "Name of the http header from which the remote ip is extracted..",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat"
    },
    {
      "name": "server.tomcat.uri-encoding",
      "type": "java.nio.charset.Charset",
      "description": "Character encoding to use to decode the URI.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat"
    },
    {
      "name": "server.undertow.accesslog.dir",
      "type": "java.io.File",
      "description": "Undertow access log directory.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow$Accesslog"
    },
    {
      "name": "server.undertow.accesslog.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable access log.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow$Accesslog"
    },
    {
      "name": "server.undertow.accesslog.pattern",
      "type": "java.lang.String",
      "description": "Format pattern for access logs.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow$Accesslog",
      "defaultValue": "common"
    },
    {
      "name": "server.undertow.accesslog.prefix",
      "type": "java.lang.String",
      "description": "Log file name prefix.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow$Accesslog",
      "defaultValue": "access_log."
    },
    {
      "name": "server.undertow.accesslog.suffix",
      "type": "java.lang.String",
      "description": "Log file name suffix.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow$Accesslog",
      "defaultValue": "log"
    },
    {
      "name": "server.undertow.buffer-size",
      "type": "java.lang.Integer",
      "description": "Size of each buffer in bytes.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow"
    },
    {
      "name": "server.undertow.buffers-per-region",
      "type": "java.lang.Integer",
      "description": "Number of buffer per region.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow"
    },
    {
      "name": "server.undertow.direct-buffers",
      "type": "java.lang.Boolean",
      "description": "Allocate buffers outside the Java heap.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow"
    },
    {
      "name": "server.undertow.io-threads",
      "type": "java.lang.Integer",
      "description": "Number of I/O threads to create for the worker.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow"
    },
    {
      "name": "server.undertow.worker-threads",
      "type": "java.lang.Integer",
      "description": "Number of worker threads.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow"
    },
    {
      "name": "server.use-forward-headers",
      "type": "java.lang.Boolean",
      "description": "If X-Forwarded-* headers should be applied to the HttpRequest.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties"
    },
    {
      "name": "spring.activemq.broker-url",
      "type": "java.lang.String",
      "description": "URL of the ActiveMQ broker. Auto-generated by default.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties"
    },
    {
      "name": "spring.activemq.in-memory",
      "type": "java.lang.Boolean",
      "description": "Specify if the default broker URL should be in memory. Ignored if an explicit\n broker has been specified.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties",
      "defaultValue": true
    },
    {
      "name": "spring.activemq.packages.trust-all",
      "type": "java.lang.Boolean",
      "description": "Trust all packages.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Packages"
    },
    {
      "name": "spring.activemq.packages.trusted",
      "type": "java.util.List<java.lang.String>",
      "description": "Comma-separated list of specific packages to trust (when not trusting all\n packages).",
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Packages"
    },
    {
      "name": "spring.activemq.password",
      "type": "java.lang.String",
      "description": "Login password of the broker.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties"
    },
    {
      "name": "spring.activemq.pool.configuration.block-if-session-pool-is-full",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.activemq.pool.PooledConnectionFactory"
    },
    {
      "name": "spring.activemq.pool.configuration.block-if-session-pool-is-full-timeout",
      "type": "java.lang.Long",
      "sourceType": "org.apache.activemq.pool.PooledConnectionFactory"
    },
    {
      "name": "spring.activemq.pool.configuration.connection-factory",
      "type": "java.lang.Object",
      "sourceType": "org.apache.activemq.pool.PooledConnectionFactory"
    },
    {
      "name": "spring.activemq.pool.configuration.create-connection-on-startup",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.activemq.pool.PooledConnectionFactory"
    },
    {
      "name": "spring.activemq.pool.configuration.expiry-timeout",
      "type": "java.lang.Long",
      "sourceType": "org.apache.activemq.pool.PooledConnectionFactory"
    },
    {
      "name": "spring.activemq.pool.configuration.idle-timeout",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.activemq.pool.PooledConnectionFactory"
    },
    {
      "name": "spring.activemq.pool.configuration.max-connections",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.activemq.pool.PooledConnectionFactory"
    },
    {
      "name": "spring.activemq.pool.configuration.maximum-active-session-per-connection",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.activemq.pool.PooledConnectionFactory"
    },
    {
      "name": "spring.activemq.pool.configuration.properties",
      "type": "java.util.Properties",
      "sourceType": "org.apache.activemq.pool.PooledConnectionFactory"
    },
    {
      "name": "spring.activemq.pool.configuration.reconnect-on-exception",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.activemq.pool.PooledConnectionFactory"
    },
    {
      "name": "spring.activemq.pool.configuration.time-between-expiration-check-millis",
      "type": "java.lang.Long",
      "sourceType": "org.apache.activemq.pool.PooledConnectionFactory"
    },
    {
      "name": "spring.activemq.pool.configuration.use-anonymous-producers",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.activemq.pool.PooledConnectionFactory"
    },
    {
      "name": "spring.activemq.pool.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether a PooledConnectionFactory should be created instead of a regular\n ConnectionFactory.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Pool",
      "defaultValue": false
    },
    {
      "name": "spring.activemq.pool.expiry-timeout",
      "type": "java.lang.Long",
      "description": "Connection expiration timeout in milliseconds.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Pool",
      "defaultValue": 0
    },
    {
      "name": "spring.activemq.pool.idle-timeout",
      "type": "java.lang.Integer",
      "description": "Connection idle timeout in milliseconds.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Pool",
      "defaultValue": 30000
    },
    {
      "name": "spring.activemq.pool.max-connections",
      "type": "java.lang.Integer",
      "description": "Maximum number of pooled connections.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Pool",
      "defaultValue": 1
    },
    {
      "name": "spring.activemq.pooled",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties",
      "deprecated": true,
      "deprecation": {"replacement": "spring.activemq.pool.enabled"}
    },
    {
      "name": "spring.activemq.user",
      "type": "java.lang.String",
      "description": "Login user of the broker.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties"
    },
    {
      "name": "spring.aop.auto",
      "type": "java.lang.Boolean",
      "description": "Add @EnableAspectJAutoProxy.",
      "defaultValue": true
    },
    {
      "name": "spring.aop.proxy-target-class",
      "type": "java.lang.Boolean",
      "description": "Whether subclass-based (CGLIB) proxies are to be created (true) as opposed to standard Java interface-based proxies (false).",
      "defaultValue": false
    },
    {
      "name": "spring.application.admin.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable admin features for the application.",
      "defaultValue": false
    },
    {
      "name": "spring.application.admin.jmx-name",
      "type": "java.lang.String",
      "description": "JMX name of the application admin MBean.",
      "defaultValue": "org.springframework.boot:type=Admin,name=SpringApplication"
    },
    {
      "name": "spring.artemis.embedded.cluster-password",
      "type": "java.lang.String",
      "description": "Cluster password. Randomly generated on startup by default.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties$Embedded"
    },
    {
      "name": "spring.artemis.embedded.data-directory",
      "type": "java.lang.String",
      "description": "Journal file directory. Not necessary if persistence is turned off.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties$Embedded"
    },
    {
      "name": "spring.artemis.embedded.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable embedded mode if the Artemis server APIs are available.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties$Embedded",
      "defaultValue": true
    },
    {
      "name": "spring.artemis.embedded.persistent",
      "type": "java.lang.Boolean",
      "description": "Enable persistent store.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties$Embedded",
      "defaultValue": false
    },
    {
      "name": "spring.artemis.embedded.queues",
      "type": "java.lang.String[]",
      "description": "Comma-separated list of queues to create on startup.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties$Embedded",
      "defaultValue": []
    },
    {
      "name": "spring.artemis.embedded.server-id",
      "type": "java.lang.Integer",
      "description": "Server id. By default, an auto-incremented counter is used.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties$Embedded",
      "defaultValue": 0
    },
    {
      "name": "spring.artemis.embedded.topics",
      "type": "java.lang.String[]",
      "description": "Comma-separated list of topics to create on startup.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties$Embedded",
      "defaultValue": []
    },
    {
      "name": "spring.artemis.host",
      "type": "java.lang.String",
      "description": "Artemis broker host.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties",
      "defaultValue": "localhost"
    },
    {
      "name": "spring.artemis.mode",
      "type": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisMode",
      "description": "Artemis deployment mode, auto-detected by default.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties"
    },
    {
      "name": "spring.artemis.password",
      "type": "java.lang.String",
      "description": "Login password of the broker.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties"
    },
    {
      "name": "spring.artemis.port",
      "type": "java.lang.Integer",
      "description": "Artemis broker port.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties",
      "defaultValue": 61616
    },
    {
      "name": "spring.artemis.user",
      "type": "java.lang.String",
      "description": "Login user of the broker.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties"
    },
    {
      "name": "spring.autoconfigure.exclude",
      "type": "java.util.List<java.lang.Class>",
      "description": "Auto-configuration classes to exclude."
    },
    {
      "name": "spring.batch.initializer.enabled",
      "type": "java.lang.Boolean",
      "description": "Create the required batch tables on startup if necessary. Enabled automatically\n if no custom table prefix is set or if a custom schema is configured.",
      "sourceType": "org.springframework.boot.autoconfigure.batch.BatchProperties$Initializer"
    },
    {
      "name": "spring.batch.job.enabled",
      "type": "java.lang.Boolean",
      "description": "Execute all Spring Batch jobs in the context on startup.",
      "defaultValue": true
    },
    {
      "name": "spring.batch.job.names",
      "type": "java.lang.String",
      "description": "Comma-separated list of job names to execute on startup. By default, all Jobs\n found in the context are executed.",
      "sourceType": "org.springframework.boot.autoconfigure.batch.BatchProperties$Job",
      "defaultValue": ""
    },
    {
      "name": "spring.batch.schema",
      "type": "java.lang.String",
      "description": "Path to the SQL file to use to initialize the database schema.",
      "sourceType": "org.springframework.boot.autoconfigure.batch.BatchProperties",
      "defaultValue": "classpath:org/springframework/batch/core/schema-@@platform@@.sql"
    },
    {
      "name": "spring.batch.table-prefix",
      "type": "java.lang.String",
      "description": "Table prefix for all the batch meta-data tables.",
      "sourceType": "org.springframework.boot.autoconfigure.batch.BatchProperties"
    },
    {
      "name": "spring.cache.cache-names",
      "type": "java.util.List<java.lang.String>",
      "description": "Comma-separated list of cache names to create if supported by the underlying cache\n manager. Usually, this disables the ability to create additional caches on-the-fly.",
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties"
    },
    {
      "name": "spring.cache.caffeine.spec",
      "type": "java.lang.String",
      "description": "The spec to use to create caches. Check CaffeineSpec for more details on the\n spec format.",
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties$Caffeine"
    },
    {
      "name": "spring.cache.couchbase.expiration",
      "type": "java.lang.Integer",
      "description": "Entry expiration in milliseconds. By default the entries never expire.",
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties$Couchbase",
      "defaultValue": 0
    },
    {
      "name": "spring.cache.ehcache.config",
      "type": "org.springframework.core.io.Resource",
      "description": "The location of the configuration file to use to initialize EhCache.",
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties$EhCache"
    },
    {
      "name": "spring.cache.guava.spec",
      "type": "java.lang.String",
      "description": "The spec to use to create caches. Check CacheBuilderSpec for more details on\n the spec format.",
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties$Guava"
    },
    {
      "name": "spring.cache.hazelcast.config",
      "type": "org.springframework.core.io.Resource",
      "description": "The location of the configuration file to use to initialize Hazelcast.",
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties$Hazelcast"
    },
    {
      "name": "spring.cache.infinispan.config",
      "type": "org.springframework.core.io.Resource",
      "description": "The location of the configuration file to use to initialize Infinispan.",
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties$Infinispan"
    },
    {
      "name": "spring.cache.jcache.config",
      "type": "org.springframework.core.io.Resource",
      "description": "The location of the configuration file to use to initialize the cache manager.\n The configuration file is dependent of the underlying cache implementation.",
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties$JCache"
    },
    {
      "name": "spring.cache.jcache.provider",
      "type": "java.lang.String",
      "description": "Fully qualified name of the CachingProvider implementation to use to retrieve\n the JSR-107 compliant cache manager. Only needed if more than one JSR-107\n implementation is available on the classpath.",
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties$JCache"
    },
    {
      "name": "spring.cache.type",
      "type": "org.springframework.boot.autoconfigure.cache.CacheType",
      "description": "Cache type, auto-detected according to the environment by default.",
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties"
    },
    {
      "name": "spring.couchbase.bootstrap-hosts",
      "type": "java.util.List<java.lang.String>",
      "description": "Couchbase nodes (host or IP address) to bootstrap from.",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties"
    },
    {
      "name": "spring.couchbase.bucket.name",
      "type": "java.lang.String",
      "description": "Name of the bucket to connect to.",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Bucket",
      "defaultValue": "default"
    },
    {
      "name": "spring.couchbase.bucket.password",
      "type": "java.lang.String",
      "description": "Password of the bucket.",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Bucket",
      "defaultValue": ""
    },
    {
      "name": "spring.couchbase.env.endpoints.key-value",
      "type": "java.lang.Integer",
      "description": "Number of sockets per node against the key/value service.",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Endpoints",
      "defaultValue": 1
    },
    {
      "name": "spring.couchbase.env.endpoints.query",
      "type": "java.lang.Integer",
      "description": "Number of sockets per node against the query (N1QL) service.",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Endpoints",
      "defaultValue": 1
    },
    {
      "name": "spring.couchbase.env.endpoints.view",
      "type": "java.lang.Integer",
      "description": "Number of sockets per node against the view service.",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Endpoints",
      "defaultValue": 1
    },
    {
      "name": "spring.couchbase.env.ssl.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable SSL support. Enabled automatically if a \"keyStore\" is provided unless\n specified otherwise.",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Ssl"
    },
    {
      "name": "spring.couchbase.env.ssl.key-store",
      "type": "java.lang.String",
      "description": "Path to the JVM key store that holds the certificates.",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Ssl"
    },
    {
      "name": "spring.couchbase.env.ssl.key-store-password",
      "type": "java.lang.String",
      "description": "Password used to access the key store.",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Ssl"
    },
    {
      "name": "spring.couchbase.env.timeouts.connect",
      "type": "java.lang.Long",
      "description": "Bucket connections timeout in milliseconds.",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Timeouts",
      "defaultValue": 5000
    },
    {
      "name": "spring.couchbase.env.timeouts.key-value",
      "type": "java.lang.Long",
      "description": "Blocking operations performed on a specific key timeout in milliseconds.",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Timeouts",
      "defaultValue": 2500
    },
    {
      "name": "spring.couchbase.env.timeouts.query",
      "type": "java.lang.Long",
      "description": "N1QL query operations timeout in milliseconds.",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Timeouts",
      "defaultValue": 7500
    },
    {
      "name": "spring.couchbase.env.timeouts.socket-connect",
      "type": "java.lang.Integer",
      "description": "Socket connect connections timeout in milliseconds.",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Timeouts",
      "defaultValue": 1000
    },
    {
      "name": "spring.couchbase.env.timeouts.view",
      "type": "java.lang.Long",
      "description": "Regular and geospatial view operations timeout in milliseconds.",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Timeouts",
      "defaultValue": 7500
    },
    {
      "name": "spring.dao.exceptiontranslation.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the PersistenceExceptionTranslationPostProcessor.",
      "defaultValue": true
    },
    {
      "name": "spring.data.cassandra.cluster-name",
      "type": "java.lang.String",
      "description": "Name of the Cassandra cluster.",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties"
    },
    {
      "name": "spring.data.cassandra.compression",
      "type": "com.datastax.driver.core.ProtocolOptions$Compression",
      "description": "Compression supported by the Cassandra binary protocol.",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties"
    },
    {
      "name": "spring.data.cassandra.connect-timeout-millis",
      "type": "java.lang.Integer",
      "description": "Socket option: connection time out.",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties"
    },
    {
      "name": "spring.data.cassandra.consistency-level",
      "type": "com.datastax.driver.core.ConsistencyLevel",
      "description": "Queries consistency level.",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties"
    },
    {
      "name": "spring.data.cassandra.contact-points",
      "type": "java.lang.String",
      "description": "Comma-separated list of cluster node addresses.",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties",
      "defaultValue": "localhost"
    },
    {
      "name": "spring.data.cassandra.fetch-size",
      "type": "java.lang.Integer",
      "description": "Queries default fetch size.",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties"
    },
    {
      "name": "spring.data.cassandra.keyspace-name",
      "type": "java.lang.String",
      "description": "Keyspace name to use.",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties"
    },
    {
      "name": "spring.data.cassandra.load-balancing-policy",
      "type": "java.lang.Class<? extends com.datastax.driver.core.policies.LoadBalancingPolicy>",
      "description": "Class name of the load balancing policy.",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties"
    },
    {
      "name": "spring.data.cassandra.password",
      "type": "java.lang.String",
      "description": "Login password of the server.",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties"
    },
    {
      "name": "spring.data.cassandra.port",
      "type": "java.lang.Integer",
      "description": "Port of the Cassandra server.",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties"
    },
    {
      "name": "spring.data.cassandra.read-timeout-millis",
      "type": "java.lang.Integer",
      "description": "Socket option: read time out.",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties"
    },
    {
      "name": "spring.data.cassandra.reconnection-policy",
      "type": "java.lang.Class<? extends com.datastax.driver.core.policies.ReconnectionPolicy>",
      "description": "Reconnection policy class.",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties"
    },
    {
      "name": "spring.data.cassandra.retry-policy",
      "type": "java.lang.Class<? extends com.datastax.driver.core.policies.RetryPolicy>",
      "description": "Class name of the retry policy.",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties"
    },
    {
      "name": "spring.data.cassandra.schema-action",
      "type": "java.lang.String",
      "description": "Schema action to take at startup.",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties",
      "defaultValue": "none"
    },
    {
      "name": "spring.data.cassandra.serial-consistency-level",
      "type": "com.datastax.driver.core.ConsistencyLevel",
      "description": "Queries serial consistency level.",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties"
    },
    {
      "name": "spring.data.cassandra.ssl",
      "type": "java.lang.Boolean",
      "description": "Enable SSL support.",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties",
      "defaultValue": false
    },
    {
      "name": "spring.data.cassandra.username",
      "type": "java.lang.String",
      "description": "Login user of the server.",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties"
    },
    {
      "name": "spring.data.couchbase.auto-index",
      "type": "java.lang.Boolean",
      "description": "Automatically create views and indexes. Use the meta-data provided by\n \"@ViewIndexed\", \"@N1qlPrimaryIndexed\" and \"@N1qlSecondaryIndexed\".",
      "sourceType": "org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataProperties",
      "defaultValue": false
    },
    {
      "name": "spring.data.couchbase.consistency",
      "type": "org.springframework.data.couchbase.core.query.Consistency",
      "description": "Consistency to apply by default on generated queries.",
      "sourceType": "org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataProperties"
    },
    {
      "name": "spring.data.couchbase.repositories.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable Couchbase repositories.",
      "defaultValue": true
    },
    {
      "name": "spring.data.elasticsearch.cluster-name",
      "type": "java.lang.String",
      "description": "Elasticsearch cluster name.",
      "sourceType": "org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchProperties",
      "defaultValue": "elasticsearch"
    },
    {
      "name": "spring.data.elasticsearch.cluster-nodes",
      "type": "java.lang.String",
      "description": "Comma-separated list of cluster node addresses. If not specified, starts a client\n node.",
      "sourceType": "org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchProperties"
    },
    {
      "name": "spring.data.elasticsearch.properties",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "description": "Additional properties used to configure the client.",
      "sourceType": "org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchProperties"
    },
    {
      "name": "spring.data.elasticsearch.repositories.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable Elasticsearch repositories.",
      "defaultValue": true
    },
    {
      "name": "spring.data.jpa.repositories.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable JPA repositories.",
      "defaultValue": true
    },
    {
      "name": "spring.data.mongodb.authentication-database",
      "type": "java.lang.String",
      "description": "Authentication database name.",
      "sourceType": "org.springframework.boot.autoconfigure.mongo.MongoProperties"
    },
    {
      "name": "spring.data.mongodb.database",
      "type": "java.lang.String",
      "description": "Database name.",
      "sourceType": "org.springframework.boot.autoconfigure.mongo.MongoProperties"
    },
    {
      "name": "spring.data.mongodb.field-naming-strategy",
      "type": "java.lang.Class<?>",
      "description": "Fully qualified name of the FieldNamingStrategy to use.",
      "sourceType": "org.springframework.boot.autoconfigure.mongo.MongoProperties"
    },
    {
      "name": "spring.data.mongodb.grid-fs-database",
      "type": "java.lang.String",
      "description": "GridFS database name.",
      "sourceType": "org.springframework.boot.autoconfigure.mongo.MongoProperties"
    },
    {
      "name": "spring.data.mongodb.host",
      "type": "java.lang.String",
      "description": "Mongo server host.",
      "sourceType": "org.springframework.boot.autoconfigure.mongo.MongoProperties"
    },
    {
      "name": "spring.data.mongodb.password",
      "type": "char[]",
      "description": "Login password of the mongo server.",
      "sourceType": "org.springframework.boot.autoconfigure.mongo.MongoProperties"
    },
    {
      "name": "spring.data.mongodb.port",
      "type": "java.lang.Integer",
      "description": "Mongo server port.",
      "sourceType": "org.springframework.boot.autoconfigure.mongo.MongoProperties"
    },
    {
      "name": "spring.data.mongodb.repositories.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable Mongo repositories.",
      "defaultValue": true
    },
    {
      "name": "spring.data.mongodb.uri",
      "type": "java.lang.String",
      "description": "Mongo database URI. When set, host and port are ignored.",
      "sourceType": "org.springframework.boot.autoconfigure.mongo.MongoProperties",
      "defaultValue": "mongodb://localhost/test"
    },
    {
      "name": "spring.data.mongodb.username",
      "type": "java.lang.String",
      "description": "Login user of the mongo server.",
      "sourceType": "org.springframework.boot.autoconfigure.mongo.MongoProperties"
    },
    {
      "name": "spring.data.neo4j.compiler",
      "type": "java.lang.String",
      "description": "Compiler to use.",
      "sourceType": "org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties"
    },
    {
      "name": "spring.data.neo4j.embedded.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable embedded mode if the embedded driver is available.",
      "sourceType": "org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties$Embedded",
      "defaultValue": true
    },
    {
      "name": "spring.data.neo4j.password",
      "type": "java.lang.String",
      "description": "Login password of the server.",
      "sourceType": "org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties"
    },
    {
      "name": "spring.data.neo4j.repositories.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable Neo4j repositories.",
      "defaultValue": true
    },
    {
      "name": "spring.data.neo4j.session.scope",
      "type": "java.lang.String",
      "description": "Scope (lifetime) of the session.",
      "defaultValue": "singleton"
    },
    {
      "name": "spring.data.neo4j.uri",
      "type": "java.lang.String",
      "description": "URI used by the driver. Auto-detected by default.",
      "sourceType": "org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties"
    },
    {
      "name": "spring.data.neo4j.username",
      "type": "java.lang.String",
      "description": "Login user of the server.",
      "sourceType": "org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties"
    },
    {
      "name": "spring.data.redis.repositories.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable Redis repositories.",
      "defaultValue": true
    },
    {
      "name": "spring.data.rest.base-path",
      "type": "java.lang.String",
      "description": "Base path to be used by Spring Data REST to expose repository resources.",
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties"
    },
    {
      "name": "spring.data.rest.default-page-size",
      "type": "java.lang.Integer",
      "description": "Default size of pages.",
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties"
    },
    {
      "name": "spring.data.rest.enable-enum-translation",
      "type": "java.lang.Boolean",
      "description": "Enable enum value translation via the Spring Data REST default resource bundle.\n Will use the fully qualified enum name as key.",
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties"
    },
    {
      "name": "spring.data.rest.limit-param-name",
      "type": "java.lang.String",
      "description": "Name of the URL query string parameter that indicates how many results to return at\n once.",
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties"
    },
    {
      "name": "spring.data.rest.max-page-size",
      "type": "java.lang.Integer",
      "description": "Maximum size of pages.",
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties"
    },
    {
      "name": "spring.data.rest.page-param-name",
      "type": "java.lang.String",
      "description": "Name of the URL query string parameter that indicates what page to return.",
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties"
    },
    {
      "name": "spring.data.rest.return-body-on-create",
      "type": "java.lang.Boolean",
      "description": "Return a response body after creating an entity.",
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties"
    },
    {
      "name": "spring.data.rest.return-body-on-update",
      "type": "java.lang.Boolean",
      "description": "Return a response body after updating an entity.",
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties"
    },
    {
      "name": "spring.data.rest.sort-param-name",
      "type": "java.lang.String",
      "description": "Name of the URL query string parameter that indicates what direction to sort\n results.",
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties"
    },
    {
      "name": "spring.data.solr.host",
      "type": "java.lang.String",
      "description": "Solr host. Ignored if \"zk-host\" is set.",
      "sourceType": "org.springframework.boot.autoconfigure.solr.SolrProperties",
      "defaultValue": "http://127.0.0.1:8983/solr"
    },
    {
      "name": "spring.data.solr.repositories.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable Solr repositories.",
      "defaultValue": true
    },
    {
      "name": "spring.data.solr.zk-host",
      "type": "java.lang.String",
      "description": "ZooKeeper host address in the form HOST:PORT.",
      "sourceType": "org.springframework.boot.autoconfigure.solr.SolrProperties"
    },
    {
      "name": "spring.datasource.continue-on-error",
      "type": "java.lang.Boolean",
      "description": "Do not stop if an error occurs while initializing the database.",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "defaultValue": false
    },
    {
      "name": "spring.datasource.data",
      "type": "java.lang.String",
      "description": "Data (DML) script resource reference.",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties"
    },
    {
      "name": "spring.datasource.data-password",
      "type": "java.lang.String",
      "description": "Password of the database to execute DML scripts.",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties"
    },
    {
      "name": "spring.datasource.data-username",
      "type": "java.lang.String",
      "description": "User of the database to execute DML scripts.",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties"
    },
    {
      "name": "spring.datasource.dbcp.access-to-underlying-connection-allowed",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp.connection-init-sqls",
      "type": "java.util.Collection",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp.default-auto-commit",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp.default-catalog",
      "type": "java.lang.String",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp.default-read-only",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp.default-transaction-isolation",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp.driver-class-name",
      "type": "java.lang.String",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp.initial-size",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp.log-abandoned",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp.login-timeout",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp.max-active",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp.max-idle",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp.max-open-prepared-statements",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp.max-wait",
      "type": "java.lang.Long",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp.min-evictable-idle-time-millis",
      "type": "java.lang.Long",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp.min-idle",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp.num-tests-per-eviction-run",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp.password",
      "type": "java.lang.String",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp.pool-prepared-statements",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp.remove-abandoned",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp.remove-abandoned-timeout",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp.test-on-borrow",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp.test-on-return",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp.test-while-idle",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp.time-between-eviction-runs-millis",
      "type": "java.lang.Long",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp.url",
      "type": "java.lang.String",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp.username",
      "type": "java.lang.String",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp.validation-query",
      "type": "java.lang.String",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp.validation-query-timeout",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.abandoned-usage-tracking",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.access-to-underlying-connection-allowed",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.cache-state",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.connection-init-sqls",
      "type": "java.util.List<java.lang.String>",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.default-auto-commit",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.default-catalog",
      "type": "java.lang.String",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.default-query-timeout",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.default-read-only",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.default-transaction-isolation",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.disconnection-sql-codes",
      "type": "java.util.Set<java.lang.String>",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.driver",
      "type": "java.sql.Driver",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.driver-class-name",
      "type": "java.lang.String",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.enable-auto-commit-on-return",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.eviction-policy-class-name",
      "type": "java.lang.String",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.fast-fail-validation",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.initial-size",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.jmx-name",
      "type": "java.lang.String",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.lifo",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.log-abandoned",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.log-expired-connections",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.login-timeout",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.max-conn-lifetime-millis",
      "type": "java.lang.Long",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.max-idle",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.max-open-prepared-statements",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.max-total",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.max-wait-millis",
      "type": "java.lang.Long",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.min-evictable-idle-time-millis",
      "type": "java.lang.Long",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.min-idle",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.num-tests-per-eviction-run",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.password",
      "type": "java.lang.String",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.pool-prepared-statements",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.remove-abandoned-on-borrow",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.remove-abandoned-on-maintenance",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.remove-abandoned-timeout",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.rollback-on-return",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.soft-min-evictable-idle-time-millis",
      "type": "java.lang.Long",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.test-on-borrow",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.test-on-create",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.test-on-return",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.test-while-idle",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.time-between-eviction-runs-millis",
      "type": "java.lang.Long",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.url",
      "type": "java.lang.String",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.username",
      "type": "java.lang.String",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.validation-query",
      "type": "java.lang.String",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.validation-query-timeout",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.driver-class-name",
      "type": "java.lang.String",
      "description": "Fully qualified name of the JDBC driver. Auto-detected based on the URL by default.",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties"
    },
    {
      "name": "spring.datasource.hikari.allow-pool-suspension",
      "type": "java.lang.Boolean",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.auto-commit",
      "type": "java.lang.Boolean",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.catalog",
      "type": "java.lang.String",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.connection-customizer-class-name",
      "type": "java.lang.String",
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.datasource.hikari.connection-init-sql",
      "type": "java.lang.String",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.connection-test-query",
      "type": "java.lang.String",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.connection-timeout",
      "type": "java.lang.Long",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.data-source-class-name",
      "type": "java.lang.String",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.data-source-j-n-d-i",
      "type": "java.lang.String",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.data-source-properties",
      "type": "java.util.Properties",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.driver-class-name",
      "type": "java.lang.String",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.health-check-properties",
      "type": "java.util.Properties",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.health-check-registry",
      "type": "java.lang.Object",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.idle-timeout",
      "type": "java.lang.Long",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.initialization-fail-fast",
      "type": "java.lang.Boolean",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.isolate-internal-queries",
      "type": "java.lang.Boolean",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.jdbc-url",
      "type": "java.lang.String",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.jdbc4-connection-test",
      "type": "java.lang.Boolean",
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.datasource.hikari.leak-detection-threshold",
      "type": "java.lang.Long",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.login-timeout",
      "type": "java.lang.Integer",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.max-lifetime",
      "type": "java.lang.Long",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.maximum-pool-size",
      "type": "java.lang.Integer",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.metric-registry",
      "type": "java.lang.Object",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.minimum-idle",
      "type": "java.lang.Integer",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.password",
      "type": "java.lang.String",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.pool-name",
      "type": "java.lang.String",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.read-only",
      "type": "java.lang.Boolean",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.register-mbeans",
      "type": "java.lang.Boolean",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.transaction-isolation",
      "type": "java.lang.String",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.username",
      "type": "java.lang.String",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.validation-timeout",
      "type": "java.lang.Long",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.initialize",
      "type": "java.lang.Boolean",
      "description": "Populate the database using 'data.sql'.",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "defaultValue": true
    },
    {
      "name": "spring.datasource.jmx-enabled",
      "type": "java.lang.Boolean",
      "description": "Enable JMX support (if provided by the underlying pool).",
      "defaultValue": false
    },
    {
      "name": "spring.datasource.jndi-name",
      "type": "java.lang.String",
      "description": "JNDI location of the datasource. Class, url, username & password are ignored when\n set.",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties"
    },
    {
      "name": "spring.datasource.name",
      "type": "java.lang.String",
      "description": "Name of the datasource.",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "defaultValue": "testdb"
    },
    {
      "name": "spring.datasource.password",
      "type": "java.lang.String",
      "description": "Login password of the database.",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties"
    },
    {
      "name": "spring.datasource.platform",
      "type": "java.lang.String",
      "description": "Platform to use in the schema resource (schema-${platform}.sql).",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "defaultValue": "all"
    },
    {
      "name": "spring.datasource.schema",
      "type": "java.lang.String",
      "description": "Schema (DDL) script resource reference.",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties"
    },
    {
      "name": "spring.datasource.schema-password",
      "type": "java.lang.String",
      "description": "Password of the database to execute DDL scripts (if different).",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties"
    },
    {
      "name": "spring.datasource.schema-username",
      "type": "java.lang.String",
      "description": "User of the database to execute DDL scripts (if different).",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties"
    },
    {
      "name": "spring.datasource.separator",
      "type": "java.lang.String",
      "description": "Statement separator in SQL initialization scripts.",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "defaultValue": ";"
    },
    {
      "name": "spring.datasource.sql-script-encoding",
      "type": "java.nio.charset.Charset",
      "description": "SQL scripts encoding.",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties"
    },
    {
      "name": "spring.datasource.tomcat.abandon-when-percentage-full",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.access-to-underlying-connection-allowed",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.alternate-username-allowed",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.commit-on-return",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.connection-properties",
      "type": "java.lang.String",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.data-source",
      "type": "java.lang.Object",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.data-source-j-n-d-i",
      "type": "java.lang.String",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.db-properties",
      "type": "java.util.Properties",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.default-auto-commit",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.default-catalog",
      "type": "java.lang.String",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.default-read-only",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.default-transaction-isolation",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.driver-class-name",
      "type": "java.lang.String",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.fair-queue",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.ignore-exception-on-pre-load",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.init-s-q-l",
      "type": "java.lang.String",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.initial-size",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.jdbc-interceptors",
      "type": "java.lang.String",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.jmx-enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.log-abandoned",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.log-validation-errors",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.login-timeout",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.max-active",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.max-age",
      "type": "java.lang.Long",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.max-idle",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.max-wait",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.min-evictable-idle-time-millis",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.min-idle",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.name",
      "type": "java.lang.String",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.num-tests-per-eviction-run",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.password",
      "type": "java.lang.String",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.propagate-interrupt-state",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.remove-abandoned",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.remove-abandoned-timeout",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.rollback-on-return",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.suspect-timeout",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.test-on-borrow",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.test-on-connect",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.test-on-return",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.test-while-idle",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.time-between-eviction-runs-millis",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.url",
      "type": "java.lang.String",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.use-disposable-connection-facade",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.use-equals",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.use-lock",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.username",
      "type": "java.lang.String",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.validation-interval",
      "type": "java.lang.Long",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.validation-query",
      "type": "java.lang.String",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.validation-query-timeout",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.validator-class-name",
      "type": "java.lang.String",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.type",
      "type": "java.lang.Class<? extends javax.sql.DataSource>",
      "description": "Fully qualified name of the connection pool implementation to use. By default, it\n is auto-detected from the classpath.",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties"
    },
    {
      "name": "spring.datasource.url",
      "type": "java.lang.String",
      "description": "JDBC url of the database.",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties"
    },
    {
      "name": "spring.datasource.username",
      "type": "java.lang.String",
      "description": "Login user of the database.",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties"
    },
    {
      "name": "spring.datasource.xa.data-source-class-name",
      "type": "java.lang.String",
      "description": "XA datasource fully qualified name.",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties$Xa"
    },
    {
      "name": "spring.datasource.xa.properties",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "description": "Properties to pass to the XA data source.",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties$Xa"
    },
    {
      "name": "spring.elasticsearch.jest.connection-timeout",
      "type": "java.lang.Integer",
      "description": "Connection timeout in milliseconds.",
      "sourceType": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties",
      "defaultValue": 3000
    },
    {
      "name": "spring.elasticsearch.jest.password",
      "type": "java.lang.String",
      "description": "Login password.",
      "sourceType": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties"
    },
    {
      "name": "spring.elasticsearch.jest.proxy.host",
      "type": "java.lang.String",
      "description": "Proxy host the HTTP client should use.",
      "sourceType": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties$Proxy"
    },
    {
      "name": "spring.elasticsearch.jest.proxy.port",
      "type": "java.lang.Integer",
      "description": "Proxy port the HTTP client should use.",
      "sourceType": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties$Proxy"
    },
    {
      "name": "spring.elasticsearch.jest.read-timeout",
      "type": "java.lang.Integer",
      "description": "Read timeout in milliseconds.",
      "sourceType": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties",
      "defaultValue": 3000
    },
    {
      "name": "spring.elasticsearch.jest.uris",
      "type": "java.util.List<java.lang.String>",
      "description": "Comma-separated list of the Elasticsearch instances to use.",
      "sourceType": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties",
      "defaultValue": "http://localhost:9200"
    },
    {
      "name": "spring.elasticsearch.jest.username",
      "type": "java.lang.String",
      "description": "Login user.",
      "sourceType": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties"
    },
    {
      "name": "spring.freemarker.allow-request-override",
      "type": "java.lang.Boolean",
      "description": "Set whether HttpServletRequest attributes are allowed to override (hide) controller\n generated model attributes of the same name.",
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties"
    },
    {
      "name": "spring.freemarker.allow-session-override",
      "type": "java.lang.Boolean",
      "description": "Set whether HttpSession attributes are allowed to override (hide) controller\n generated model attributes of the same name.",
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties"
    },
    {
      "name": "spring.freemarker.cache",
      "type": "java.lang.Boolean",
      "description": "Enable template caching.",
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties"
    },
    {
      "name": "spring.freemarker.charset",
      "type": "java.nio.charset.Charset",
      "description": "Template encoding.",
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties"
    },
    {
      "name": "spring.freemarker.check-template-location",
      "type": "java.lang.Boolean",
      "description": "Check that the templates location exists.",
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties"
    },
    {
      "name": "spring.freemarker.content-type",
      "type": "org.springframework.util.MimeType",
      "description": "Content-Type value.",
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties"
    },
    {
      "name": "spring.freemarker.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable MVC view resolution for this technology.",
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties"
    },
    {
      "name": "spring.freemarker.expose-request-attributes",
      "type": "java.lang.Boolean",
      "description": "Set whether all request attributes should be added to the model prior to merging\n with the template.",
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties"
    },
    {
      "name": "spring.freemarker.expose-session-attributes",
      "type": "java.lang.Boolean",
      "description": "Set whether all HttpSession attributes should be added to the model prior to\n merging with the template.",
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties"
    },
    {
      "name": "spring.freemarker.expose-spring-macro-helpers",
      "type": "java.lang.Boolean",
      "description": "Set whether to expose a RequestContext for use by Spring's macro library, under the\n name \"springMacroRequestContext\".",
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties"
    },
    {
      "name": "spring.freemarker.prefer-file-system-access",
      "type": "java.lang.Boolean",
      "description": "Prefer file system access for template loading. File system access enables hot\n detection of template changes.",
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "defaultValue": true
    },
    {
      "name": "spring.freemarker.prefix",
      "type": "java.lang.String",
      "description": "Prefix that gets prepended to view names when building a URL.",
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties"
    },
    {
      "name": "spring.freemarker.request-context-attribute",
      "type": "java.lang.String",
      "description": "Name of the RequestContext attribute for all views.",
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties"
    },
    {
      "name": "spring.freemarker.settings",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "description": "Well-known FreeMarker keys which will be passed to FreeMarker's Configuration.",
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties"
    },
    {
      "name": "spring.freemarker.suffix",
      "type": "java.lang.String",
      "description": "Suffix that gets appended to view names when building a URL.",
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties"
    },
    {
      "name": "spring.freemarker.template-loader-path",
      "type": "java.lang.String[]",
      "description": "Comma-separated list of template paths.",
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "defaultValue": ["classpath:/templates/"]
    },
    {
      "name": "spring.freemarker.view-names",
      "type": "java.lang.String[]",
      "description": "White list of view names that can be resolved.",
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties"
    },
    {
      "name": "spring.groovy.template.allow-request-override",
      "type": "java.lang.Boolean",
      "description": "Set whether HttpServletRequest attributes are allowed to override (hide) controller\n generated model attributes of the same name.",
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties"
    },
    {
      "name": "spring.groovy.template.allow-session-override",
      "type": "java.lang.Boolean",
      "description": "Set whether HttpSession attributes are allowed to override (hide) controller\n generated model attributes of the same name.",
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties"
    },
    {
      "name": "spring.groovy.template.cache",
      "type": "java.lang.Boolean",
      "description": "Enable template caching.",
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties"
    },
    {
      "name": "spring.groovy.template.charset",
      "type": "java.nio.charset.Charset",
      "description": "Template encoding.",
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties"
    },
    {
      "name": "spring.groovy.template.check-template-location",
      "type": "java.lang.Boolean",
      "description": "Check that the templates location exists.",
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties"
    },
    {
      "name": "spring.groovy.template.configuration.auto-escape",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer"
    },
    {
      "name": "spring.groovy.template.configuration.auto-indent",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer"
    },
    {
      "name": "spring.groovy.template.configuration.auto-indent-string",
      "type": "java.lang.String",
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer"
    },
    {
      "name": "spring.groovy.template.configuration.auto-new-line",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer"
    },
    {
      "name": "spring.groovy.template.configuration.base-template-class",
      "type": "java.lang.Class<? extends groovy.text.markup.BaseTemplate>",
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer"
    },
    {
      "name": "spring.groovy.template.configuration.cache-templates",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer"
    },
    {
      "name": "spring.groovy.template.configuration.declaration-encoding",
      "type": "java.lang.String",
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer"
    },
    {
      "name": "spring.groovy.template.configuration.expand-empty-elements",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer"
    },
    {
      "name": "spring.groovy.template.configuration.locale",
      "type": "java.util.Locale",
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer"
    },
    {
      "name": "spring.groovy.template.configuration.new-line-string",
      "type": "java.lang.String",
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer"
    },
    {
      "name": "spring.groovy.template.configuration.resource-loader-path",
      "type": "java.lang.String",
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer"
    },
    {
      "name": "spring.groovy.template.configuration.use-double-quotes",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer"
    },
    {
      "name": "spring.groovy.template.content-type",
      "type": "org.springframework.util.MimeType",
      "description": "Content-Type value.",
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties"
    },
    {
      "name": "spring.groovy.template.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable MVC view resolution for this technology.",
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties"
    },
    {
      "name": "spring.groovy.template.expose-request-attributes",
      "type": "java.lang.Boolean",
      "description": "Set whether all request attributes should be added to the model prior to merging\n with the template.",
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties"
    },
    {
      "name": "spring.groovy.template.expose-session-attributes",
      "type": "java.lang.Boolean",
      "description": "Set whether all HttpSession attributes should be added to the model prior to\n merging with the template.",
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties"
    },
    {
      "name": "spring.groovy.template.expose-spring-macro-helpers",
      "type": "java.lang.Boolean",
      "description": "Set whether to expose a RequestContext for use by Spring's macro library, under the\n name \"springMacroRequestContext\".",
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties"
    },
    {
      "name": "spring.groovy.template.prefix",
      "type": "java.lang.String",
      "description": "Prefix that gets prepended to view names when building a URL.",
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties"
    },
    {
      "name": "spring.groovy.template.request-context-attribute",
      "type": "java.lang.String",
      "description": "Name of the RequestContext attribute for all views.",
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties"
    },
    {
      "name": "spring.groovy.template.resource-loader-path",
      "type": "java.lang.String",
      "description": "Template path.",
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "defaultValue": "classpath:/templates/"
    },
    {
      "name": "spring.groovy.template.suffix",
      "type": "java.lang.String",
      "description": "Suffix that gets appended to view names when building a URL.",
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties"
    },
    {
      "name": "spring.groovy.template.view-names",
      "type": "java.lang.String[]",
      "description": "White list of view names that can be resolved.",
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties"
    },
    {
      "name": "spring.h2.console.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the console.",
      "sourceType": "org.springframework.boot.autoconfigure.h2.H2ConsoleProperties",
      "defaultValue": false
    },
    {
      "name": "spring.h2.console.path",
      "type": "java.lang.String",
      "description": "Path at which the console will be available.",
      "sourceType": "org.springframework.boot.autoconfigure.h2.H2ConsoleProperties",
      "defaultValue": "/h2-console"
    },
    {
      "name": "spring.h2.console.settings.trace",
      "type": "java.lang.Boolean",
      "description": "Enable trace output.",
      "sourceType": "org.springframework.boot.autoconfigure.h2.H2ConsoleProperties$Settings",
      "defaultValue": false
    },
    {
      "name": "spring.h2.console.settings.web-allow-others",
      "type": "java.lang.Boolean",
      "description": "Enable remote access.",
      "sourceType": "org.springframework.boot.autoconfigure.h2.H2ConsoleProperties$Settings",
      "defaultValue": false
    },
    {
      "name": "spring.hateoas.use-hal-as-default-json-media-type",
      "type": "java.lang.Boolean",
      "description": "Specify if application/hal+json responses should be sent to requests that accept\n application/json.",
      "sourceType": "org.springframework.boot.autoconfigure.hateoas.HateoasProperties",
      "defaultValue": true
    },
    {
      "name": "spring.hazelcast.config",
      "type": "org.springframework.core.io.Resource",
      "description": "The location of the configuration file to use to initialize Hazelcast.",
      "sourceType": "org.springframework.boot.autoconfigure.hazelcast.HazelcastProperties"
    },
    {
      "name": "spring.hornetq.embedded.cluster-password",
      "type": "java.lang.String",
      "description": "Cluster password. Randomly generated on startup by default.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.hornetq.HornetQProperties$Embedded"
    },
    {
      "name": "spring.hornetq.embedded.data-directory",
      "type": "java.lang.String",
      "description": "Journal file directory. Not necessary if persistence is turned off.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.hornetq.HornetQProperties$Embedded"
    },
    {
      "name": "spring.hornetq.embedded.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable embedded mode if the HornetQ server APIs are available.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.hornetq.HornetQProperties$Embedded",
      "defaultValue": true
    },
    {
      "name": "spring.hornetq.embedded.persistent",
      "type": "java.lang.Boolean",
      "description": "Enable persistent store.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.hornetq.HornetQProperties$Embedded",
      "defaultValue": false
    },
    {
      "name": "spring.hornetq.embedded.queues",
      "type": "java.lang.String[]",
      "description": "Comma-separated list of queues to create on startup.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.hornetq.HornetQProperties$Embedded",
      "defaultValue": []
    },
    {
      "name": "spring.hornetq.embedded.server-id",
      "type": "java.lang.Integer",
      "description": "Server id. By default, an auto-incremented counter is used.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.hornetq.HornetQProperties$Embedded",
      "defaultValue": 0
    },
    {
      "name": "spring.hornetq.embedded.topics",
      "type": "java.lang.String[]",
      "description": "Comma-separated list of topics to create on startup.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.hornetq.HornetQProperties$Embedded",
      "defaultValue": []
    },
    {
      "name": "spring.hornetq.host",
      "type": "java.lang.String",
      "description": "HornetQ broker host.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.hornetq.HornetQProperties",
      "defaultValue": "localhost",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.hornetq.mode",
      "type": "org.springframework.boot.autoconfigure.jms.hornetq.HornetQMode",
      "description": "HornetQ deployment mode, auto-detected by default.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.hornetq.HornetQProperties",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.hornetq.password",
      "type": "java.lang.String",
      "description": "Login password of the broker.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.hornetq.HornetQProperties",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.hornetq.port",
      "type": "java.lang.Integer",
      "description": "HornetQ broker port.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.hornetq.HornetQProperties",
      "defaultValue": 5445,
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.hornetq.user",
      "type": "java.lang.String",
      "description": "Login user of the broker.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.hornetq.HornetQProperties",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.http.converters.preferred-json-mapper",
      "type": "java.lang.String",
      "description": "Preferred JSON mapper to use for HTTP message conversion. Set to \"gson\" to force the use of Gson when both it and Jackson are on the classpath."
    },
    {
      "name": "spring.http.encoding.charset",
      "type": "java.nio.charset.Charset",
      "description": "Charset of HTTP requests and responses. Added to the \"Content-Type\" header if not\n set explicitly.",
      "sourceType": "org.springframework.boot.autoconfigure.web.HttpEncodingProperties",
      "defaultValue": "UTF-8"
    },
    {
      "name": "spring.http.encoding.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable http encoding support.",
      "defaultValue": true
    },
    {
      "name": "spring.http.encoding.force",
      "type": "java.lang.Boolean",
      "description": "Force the encoding to the configured charset on HTTP requests and responses.",
      "sourceType": "org.springframework.boot.autoconfigure.web.HttpEncodingProperties"
    },
    {
      "name": "spring.http.encoding.force-request",
      "type": "java.lang.Boolean",
      "description": "Force the encoding to the configured charset on HTTP requests. Defaults to true\n when \"force\" has not been specified.",
      "sourceType": "org.springframework.boot.autoconfigure.web.HttpEncodingProperties"
    },
    {
      "name": "spring.http.encoding.force-response",
      "type": "java.lang.Boolean",
      "description": "Force the encoding to the configured charset on HTTP responses.",
      "sourceType": "org.springframework.boot.autoconfigure.web.HttpEncodingProperties"
    },
    {
      "name": "spring.http.encoding.mapping",
      "type": "java.util.Map<java.util.Locale,java.nio.charset.Charset>",
      "description": "Locale to Encoding mapping.",
      "sourceType": "org.springframework.boot.autoconfigure.web.HttpEncodingProperties"
    },
    {
      "name": "spring.http.multipart.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable support of multi-part uploads.",
      "sourceType": "org.springframework.boot.autoconfigure.web.MultipartProperties",
      "defaultValue": true
    },
    {
      "name": "spring.http.multipart.file-size-threshold",
      "type": "java.lang.String",
      "description": "Threshold after which files will be written to disk. Values can use the suffixed\n \"MB\" or \"KB\" to indicate a Megabyte or Kilobyte size.",
      "sourceType": "org.springframework.boot.autoconfigure.web.MultipartProperties",
      "defaultValue": "0"
    },
    {
      "name": "spring.http.multipart.location",
      "type": "java.lang.String",
      "description": "Intermediate location of uploaded files.",
      "sourceType": "org.springframework.boot.autoconfigure.web.MultipartProperties"
    },
    {
      "name": "spring.http.multipart.max-file-size",
      "type": "java.lang.String",
      "description": "Max file size. Values can use the suffixed \"MB\" or \"KB\" to indicate a Megabyte or\n Kilobyte size.",
      "sourceType": "org.springframework.boot.autoconfigure.web.MultipartProperties",
      "defaultValue": "1Mb"
    },
    {
      "name": "spring.http.multipart.max-request-size",
      "type": "java.lang.String",
      "description": "Max request size. Values can use the suffixed \"MB\" or \"KB\" to indicate a Megabyte\n or Kilobyte size.",
      "sourceType": "org.springframework.boot.autoconfigure.web.MultipartProperties",
      "defaultValue": "10Mb"
    },
    {
      "name": "spring.http.multipart.resolve-lazily",
      "type": "java.lang.Boolean",
      "description": "Whether to resolve the multipart request lazily at the time of file or parameter\n access.",
      "sourceType": "org.springframework.boot.autoconfigure.web.MultipartProperties",
      "defaultValue": false
    },
    {
      "name": "spring.info.build.location",
      "type": "org.springframework.core.io.Resource",
      "description": "Location of the generated build-info.properties file.",
      "sourceType": "org.springframework.boot.autoconfigure.info.ProjectInfoProperties$Build"
    },
    {
      "name": "spring.info.git.location",
      "type": "org.springframework.core.io.Resource",
      "description": "Location of the generated git.properties file.",
      "sourceType": "org.springframework.boot.autoconfigure.info.ProjectInfoProperties$Git"
    },
    {
      "name": "spring.jackson.date-format",
      "type": "java.lang.String",
      "description": "Date format string (yyyy-MM-dd HH:mm:ss), or a fully-qualified date format class\n name.",
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties"
    },
    {
      "name": "spring.jackson.default-property-inclusion",
      "type": "com.fasterxml.jackson.annotation.JsonInclude$Include",
      "description": "Controls the inclusion of properties during serialization. Configured with one of\n the values in Jackson's JsonInclude.Include enumeration.",
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties"
    },
    {
      "name": "spring.jackson.deserialization",
      "type": "java.util.Map<com.fasterxml.jackson.databind.DeserializationFeature,java.lang.Boolean>",
      "description": "Jackson on/off features that affect the way Java objects are deserialized.",
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties"
    },
    {
      "name": "spring.jackson.generator",
      "type": "java.util.Map<com.fasterxml.jackson.core.JsonGenerator.Feature,java.lang.Boolean>",
      "description": "Jackson on/off features for generators.",
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties"
    },
    {
      "name": "spring.jackson.joda-date-time-format",
      "type": "java.lang.String",
      "description": "Joda date time format string (yyyy-MM-dd HH:mm:ss). If not configured,\n \"date-format\" will be used as a fallback if it is configured with a format string.",
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties"
    },
    {
      "name": "spring.jackson.locale",
      "type": "java.util.Locale",
      "description": "Locale used for formatting.",
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties"
    },
    {
      "name": "spring.jackson.mapper",
      "type": "java.util.Map<com.fasterxml.jackson.databind.MapperFeature,java.lang.Boolean>",
      "description": "Jackson general purpose on/off features.",
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties"
    },
    {
      "name": "spring.jackson.parser",
      "type": "java.util.Map<com.fasterxml.jackson.core.JsonParser.Feature,java.lang.Boolean>",
      "description": "Jackson on/off features for parsers.",
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties"
    },
    {
      "name": "spring.jackson.property-naming-strategy",
      "type": "java.lang.String",
      "description": "One of the constants on Jackson's PropertyNamingStrategy\n (CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES). Can also be a fully-qualified class\n name of a PropertyNamingStrategy subclass.",
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties"
    },
    {
      "name": "spring.jackson.serialization",
      "type": "java.util.Map<com.fasterxml.jackson.databind.SerializationFeature,java.lang.Boolean>",
      "description": "Jackson on/off features that affect the way Java objects are serialized.",
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties"
    },
    {
      "name": "spring.jackson.serialization-inclusion",
      "type": "com.fasterxml.jackson.annotation.JsonInclude$Include",
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties",
      "deprecated": true,
      "deprecation": {
        "reason": "ObjectMapper.setSerializationInclusion was deprecated in Jackson 2.7",
        "replacement": "spring.jackson.default-property-inclusion"
      }
    },
    {
      "name": "spring.jackson.time-zone",
      "type": "java.util.TimeZone",
      "description": "Time zone used when formatting dates. Configured using any recognized time zone\n identifier, for example \"America/Los_Angeles\" or \"GMT+10\".",
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties"
    },
    {
      "name": "spring.jersey.application-path",
      "type": "java.lang.String",
      "description": "Path that serves as the base URI for the application. Overrides the value of\n \"@ApplicationPath\" if specified.",
      "sourceType": "org.springframework.boot.autoconfigure.jersey.JerseyProperties"
    },
    {
      "name": "spring.jersey.filter.order",
      "type": "java.lang.Integer",
      "description": "Jersey filter chain order.",
      "sourceType": "org.springframework.boot.autoconfigure.jersey.JerseyProperties$Filter",
      "defaultValue": 0
    },
    {
      "name": "spring.jersey.init",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "description": "Init parameters to pass to Jersey via the servlet or filter.",
      "sourceType": "org.springframework.boot.autoconfigure.jersey.JerseyProperties"
    },
    {
      "name": "spring.jersey.servlet.load-on-startup",
      "type": "java.lang.Integer",
      "description": "Load on startup priority of the Jersey servlet.",
      "sourceType": "org.springframework.boot.autoconfigure.jersey.JerseyProperties$Servlet",
      "defaultValue": -1
    },
    {
      "name": "spring.jersey.type",
      "type": "org.springframework.boot.autoconfigure.jersey.JerseyProperties$Type",
      "description": "Jersey integration type.",
      "sourceType": "org.springframework.boot.autoconfigure.jersey.JerseyProperties"
    },
    {
      "name": "spring.jms.jndi-name",
      "type": "java.lang.String",
      "description": "Connection factory JNDI name. When set, takes precedence to others connection\n factory auto-configurations.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties"
    },
    {
      "name": "spring.jms.listener.acknowledge-mode",
      "type": "org.springframework.boot.autoconfigure.jms.JmsProperties$AcknowledgeMode",
      "description": "Acknowledge mode of the container. By default, the listener is transacted with\n automatic acknowledgment.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties$Listener"
    },
    {
      "name": "spring.jms.listener.auto-startup",
      "type": "java.lang.Boolean",
      "description": "Start the container automatically on startup.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties$Listener",
      "defaultValue": true
    },
    {
      "name": "spring.jms.listener.concurrency",
      "type": "java.lang.Integer",
      "description": "Minimum number of concurrent consumers.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties$Listener"
    },
    {
      "name": "spring.jms.listener.max-concurrency",
      "type": "java.lang.Integer",
      "description": "Maximum number of concurrent consumers.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties$Listener"
    },
    {
      "name": "spring.jms.pub-sub-domain",
      "type": "java.lang.Boolean",
      "description": "Specify if the default destination type is topic.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties",
      "defaultValue": false
    },
    {
      "name": "spring.jmx.default-domain",
      "type": "java.lang.String",
      "description": "JMX domain name."
    },
    {
      "name": "spring.jmx.enabled",
      "type": "java.lang.Boolean",
      "description": "Expose management beans to the JMX domain.",
      "defaultValue": true
    },
    {
      "name": "spring.jmx.server",
      "type": "java.lang.String",
      "description": "MBeanServer bean name.",
      "defaultValue": "mbeanServer"
    },
    {
      "name": "spring.jooq.sql-dialect",
      "type": "org.jooq.SQLDialect",
      "description": "SQLDialect JOOQ used when communicating with the configured datasource, for\n instance \"POSTGRES\".",
      "sourceType": "org.springframework.boot.autoconfigure.jooq.JooqProperties"
    },
    {
      "name": "spring.jpa.database",
      "type": "org.springframework.orm.jpa.vendor.Database",
      "description": "Target database to operate on, auto-detected by default. Can be alternatively set\n using the \"databasePlatform\" property.",
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties"
    },
    {
      "name": "spring.jpa.database-platform",
      "type": "java.lang.String",
      "description": "Name of the target database to operate on, auto-detected by default. Can be\n alternatively set using the \"Database\" enum.",
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties"
    },
    {
      "name": "spring.jpa.generate-ddl",
      "type": "java.lang.Boolean",
      "description": "Initialize the schema on startup.",
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties",
      "defaultValue": false
    },
    {
      "name": "spring.jpa.hibernate.ddl-auto",
      "type": "java.lang.String",
      "description": "DDL mode. This is actually a shortcut for the \"hibernate.hbm2ddl.auto\"\n property. Default to \"create-drop\" when using an embedded database, \"none\"\n otherwise.",
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties$Hibernate"
    },
    {
      "name": "spring.jpa.hibernate.naming-strategy",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties$Hibernate",
      "deprecated": true,
      "deprecation": {"replacement": "spring.jpa.hibernate.naming.strategy"}
    },
    {
      "name": "spring.jpa.hibernate.naming.implicit-strategy",
      "type": "java.lang.String",
      "description": "Hibernate 5 implicit naming strategy fully qualified name.",
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties$Naming"
    },
    {
      "name": "spring.jpa.hibernate.naming.physical-strategy",
      "type": "java.lang.String",
      "description": "Hibernate 5 physical naming strategy fully qualified name.",
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties$Naming"
    },
    {
      "name": "spring.jpa.hibernate.naming.strategy",
      "type": "java.lang.String",
      "description": "Hibernate 4 naming strategy fully qualified name. Not supported with Hibernate\n 5.",
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties$Naming"
    },
    {
      "name": "spring.jpa.hibernate.use-new-id-generator-mappings",
      "type": "java.lang.Boolean",
      "description": "Use Hibernate's newer IdentifierGenerator for AUTO, TABLE and SEQUENCE. This is\n actually a shortcut for the \"hibernate.id.new_generator_mappings\" property.\n When not specified will default to \"false\" with Hibernate 5 for back\n compatibility.",
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties$Hibernate"
    },
    {
      "name": "spring.jpa.open-in-view",
      "type": "java.lang.Boolean",
      "description": "Register OpenEntityManagerInViewInterceptor. Binds a JPA EntityManager to the thread for the entire processing of the request.",
      "defaultValue": true
    },
    {
      "name": "spring.jpa.properties",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "description": "Additional native properties to set on the JPA provider.",
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties"
    },
    {
      "name": "spring.jpa.show-sql",
      "type": "java.lang.Boolean",
      "description": "Enable logging of SQL statements.",
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties",
      "defaultValue": false
    },
    {
      "name": "spring.jta.bitronix.properties.allow-multiple-lrc",
      "type": "java.lang.Boolean",
      "description": "Allow multiple LRC resources to be enlisted into the same transaction.",
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": false
    },
    {
      "name": "spring.jta.bitronix.properties.asynchronous2-pc",
      "type": "java.lang.Boolean",
      "description": "Enable asynchronously execution of two phase commit.",
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": false
    },
    {
      "name": "spring.jta.bitronix.properties.background-recovery-interval",
      "type": "java.lang.Integer",
      "description": "Interval in minutes at which to run the recovery process in the background.",
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": 1,
      "deprecated": true,
      "deprecation": {"replacement": "spring.jta.bitronix.properties.background-recovery-interval-seconds"}
    },
    {
      "name": "spring.jta.bitronix.properties.background-recovery-interval-seconds",
      "type": "java.lang.Integer",
      "description": "Interval in seconds at which to run the recovery process in the background.",
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": 60
    },
    {
      "name": "spring.jta.bitronix.properties.current-node-only-recovery",
      "type": "java.lang.Boolean",
      "description": "Recover only the current node. Should be enabled if you run multiple instances of the transaction manager on the same JMS and JDBC resources.",
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": true
    },
    {
      "name": "spring.jta.bitronix.properties.debug-zero-resource-transaction",
      "type": "java.lang.Boolean",
      "description": "Log the creation and commit call stacks of transactions executed without a single enlisted resource.",
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": false
    },
    {
      "name": "spring.jta.bitronix.properties.default-transaction-timeout",
      "type": "java.lang.Integer",
      "description": "Default transaction timeout in seconds.",
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": 60
    },
    {
      "name": "spring.jta.bitronix.properties.disable-jmx",
      "type": "java.lang.Boolean",
      "description": "Enable JMX support.",
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": false
    },
    {
      "name": "spring.jta.bitronix.properties.exception-analyzer",
      "type": "java.lang.String",
      "description": "Set the fully qualified name of the exception analyzer implementation to use.",
      "sourceType": "bitronix.tm.Configuration"
    },
    {
      "name": "spring.jta.bitronix.properties.filter-log-status",
      "type": "java.lang.Boolean",
      "description": "Enable filtering of logs so that only mandatory logs are written.",
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": false
    },
    {
      "name": "spring.jta.bitronix.properties.force-batching-enabled",
      "type": "java.lang.Boolean",
      "description": " Set if disk forces are batched.",
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": true
    },
    {
      "name": "spring.jta.bitronix.properties.forced-write-enabled",
      "type": "java.lang.Boolean",
      "description": "Set if logs are forced to disk.",
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": true
    },
    {
      "name": "spring.jta.bitronix.properties.graceful-shutdown-interval",
      "type": "java.lang.Integer",
      "description": "Maximum amount of seconds the TM will wait for transactions to get done before aborting them at shutdown time.",
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": 60
    },
    {
      "name": "spring.jta.bitronix.properties.jndi-transaction-synchronization-registry-name",
      "type": "java.lang.String",
      "description": "JNDI name of the TransactionSynchronizationRegistry.",
      "sourceType": "bitronix.tm.Configuration"
    },
    {
      "name": "spring.jta.bitronix.properties.jndi-user-transaction-name",
      "type": "java.lang.String",
      "description": "JNDI name of the UserTransaction.",
      "sourceType": "bitronix.tm.Configuration"
    },
    {
      "name": "spring.jta.bitronix.properties.journal",
      "type": "java.lang.String",
      "description": "Name of the journal. Can be 'disk', 'null' or a class name.",
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": "disk"
    },
    {
      "name": "spring.jta.bitronix.properties.log-part1-filename",
      "type": "java.lang.String",
      "description": "Name of the first fragment of the journal.",
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": "btm1.tlog"
    },
    {
      "name": "spring.jta.bitronix.properties.log-part2-filename",
      "type": "java.lang.String",
      "description": "Name of the second fragment of the journal.",
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": "btm2.tlog"
    },
    {
      "name": "spring.jta.bitronix.properties.max-log-size-in-mb",
      "type": "java.lang.Integer",
      "description": "Maximum size in megabytes of the journal fragments.",
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": 2
    },
    {
      "name": "spring.jta.bitronix.properties.resource-configuration-filename",
      "type": "java.lang.String",
      "description": "ResourceLoader configuration file name.",
      "sourceType": "bitronix.tm.Configuration"
    },
    {
      "name": "spring.jta.bitronix.properties.server-id",
      "type": "java.lang.String",
      "description": "ASCII ID that must uniquely identify this TM instance. Default to the machine's IP address.",
      "sourceType": "bitronix.tm.Configuration"
    },
    {
      "name": "spring.jta.bitronix.properties.skip-corrupted-logs",
      "type": "java.lang.Boolean",
      "description": "Skip corrupted transactions log entries. Use only at last resort when all you have to recover is a pair of corrupted files.",
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": false
    },
    {
      "name": "spring.jta.bitronix.properties.warn-about-zero-resource-transaction",
      "type": "java.lang.Boolean",
      "description": "Log a warning for transactions executed without a single enlisted resource.",
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": true
    },
    {
      "name": "spring.jta.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable JTA support.",
      "defaultValue": true
    },
    {
      "name": "spring.jta.log-dir",
      "type": "java.lang.String",
      "description": "Transaction logs directory.",
      "sourceType": "org.springframework.boot.autoconfigure.transaction.jta.JtaProperties"
    },
    {
      "name": "spring.jta.transaction-manager-id",
      "type": "java.lang.String",
      "description": "Transaction manager unique identifier.",
      "sourceType": "org.springframework.boot.autoconfigure.transaction.jta.JtaProperties"
    },
    {
      "name": "spring.mail.default-encoding",
      "type": "java.nio.charset.Charset",
      "description": "Default MimeMessage encoding.",
      "sourceType": "org.springframework.boot.autoconfigure.mail.MailProperties",
      "defaultValue": "UTF-8"
    },
    {
      "name": "spring.mail.host",
      "type": "java.lang.String",
      "description": "SMTP server host.",
      "sourceType": "org.springframework.boot.autoconfigure.mail.MailProperties"
    },
    {
      "name": "spring.mail.jndi-name",
      "type": "java.lang.String",
      "description": "Session JNDI name. When set, takes precedence to others mail settings.",
      "sourceType": "org.springframework.boot.autoconfigure.mail.MailProperties"
    },
    {
      "name": "spring.mail.password",
      "type": "java.lang.String",
      "description": "Login password of the SMTP server.",
      "sourceType": "org.springframework.boot.autoconfigure.mail.MailProperties"
    },
    {
      "name": "spring.mail.port",
      "type": "java.lang.Integer",
      "description": "SMTP server port.",
      "sourceType": "org.springframework.boot.autoconfigure.mail.MailProperties"
    },
    {
      "name": "spring.mail.properties",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "description": "Additional JavaMail session properties.",
      "sourceType": "org.springframework.boot.autoconfigure.mail.MailProperties"
    },
    {
      "name": "spring.mail.protocol",
      "type": "java.lang.String",
      "description": "Protocol used by the SMTP server.",
      "sourceType": "org.springframework.boot.autoconfigure.mail.MailProperties",
      "defaultValue": "smtp"
    },
    {
      "name": "spring.mail.test-connection",
      "type": "java.lang.Boolean",
      "description": "Test that the mail server is available on startup.",
      "sourceType": "org.springframework.boot.autoconfigure.mail.MailProperties",
      "defaultValue": false
    },
    {
      "name": "spring.mail.username",
      "type": "java.lang.String",
      "description": "Login user of the SMTP server.",
      "sourceType": "org.springframework.boot.autoconfigure.mail.MailProperties"
    },
    {
      "name": "spring.messages.always-use-message-format",
      "type": "java.lang.Boolean",
      "description": "Set whether to always apply the MessageFormat rules, parsing even messages without\n arguments.",
      "sourceType": "org.springframework.boot.autoconfigure.MessageSourceAutoConfiguration",
      "defaultValue": false
    },
    {
      "name": "spring.messages.basename",
      "type": "java.lang.String",
      "description": "Comma-separated list of basenames, each following the ResourceBundle convention.\n Essentially a fully-qualified classpath location. If it doesn't contain a package\n qualifier (such as \"org.mypackage\"), it will be resolved from the classpath root.",
      "sourceType": "org.springframework.boot.autoconfigure.MessageSourceAutoConfiguration",
      "defaultValue": "messages"
    },
    {
      "name": "spring.messages.cache-seconds",
      "type": "java.lang.Integer",
      "description": "Loaded resource bundle files cache expiration, in seconds. When set to -1, bundles\n are cached forever.",
      "sourceType": "org.springframework.boot.autoconfigure.MessageSourceAutoConfiguration",
      "defaultValue": -1
    },
    {
      "name": "spring.messages.encoding",
      "type": "java.nio.charset.Charset",
      "description": "Message bundles encoding.",
      "sourceType": "org.springframework.boot.autoconfigure.MessageSourceAutoConfiguration",
      "defaultValue": "UTF-8"
    },
    {
      "name": "spring.messages.fallback-to-system-locale",
      "type": "java.lang.Boolean",
      "description": "Set whether to fall back to the system Locale if no files for a specific Locale\n have been found. if this is turned off, the only fallback will be the default file\n (e.g. \"messages.properties\" for basename \"messages\").",
      "sourceType": "org.springframework.boot.autoconfigure.MessageSourceAutoConfiguration",
      "defaultValue": true
    },
    {
      "name": "spring.mobile.devicedelegatingviewresolver.enable-fallback",
      "type": "java.lang.Boolean",
      "description": "Enable support for fallback resolution.",
      "sourceType": "org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverProperties",
      "defaultValue": false
    },
    {
      "name": "spring.mobile.devicedelegatingviewresolver.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable device view resolver.",
      "defaultValue": false
    },
    {
      "name": "spring.mobile.devicedelegatingviewresolver.mobile-prefix",
      "type": "java.lang.String",
      "description": "Prefix that gets prepended to view names for mobile devices.",
      "sourceType": "org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverProperties",
      "defaultValue": "mobile/"
    },
    {
      "name": "spring.mobile.devicedelegatingviewresolver.mobile-suffix",
      "type": "java.lang.String",
      "description": "Suffix that gets appended to view names for mobile devices.",
      "sourceType": "org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverProperties",
      "defaultValue": ""
    },
    {
      "name": "spring.mobile.devicedelegatingviewresolver.normal-prefix",
      "type": "java.lang.String",
      "description": "Prefix that gets prepended to view names for normal devices.",
      "sourceType": "org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverProperties",
      "defaultValue": ""
    },
    {
      "name": "spring.mobile.devicedelegatingviewresolver.normal-suffix",
      "type": "java.lang.String",
      "description": "Suffix that gets appended to view names for normal devices.",
      "sourceType": "org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverProperties",
      "defaultValue": ""
    },
    {
      "name": "spring.mobile.devicedelegatingviewresolver.tablet-prefix",
      "type": "java.lang.String",
      "description": "Prefix that gets prepended to view names for tablet devices.",
      "sourceType": "org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverProperties",
      "defaultValue": "tablet/"
    },
    {
      "name": "spring.mobile.devicedelegatingviewresolver.tablet-suffix",
      "type": "java.lang.String",
      "description": "Suffix that gets appended to view names for tablet devices.",
      "sourceType": "org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverProperties",
      "defaultValue": ""
    },
    {
      "name": "spring.mobile.sitepreference.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable SitePreferenceHandler.",
      "defaultValue": true
    },
    {
      "name": "spring.mongodb.embedded.features",
      "type": "java.util.Set<de.flapdoodle.embed.mongo.distribution.Feature>",
      "description": "Comma-separated list of features to enable.",
      "sourceType": "org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoProperties"
    },
    {
      "name": "spring.mongodb.embedded.storage.database-dir",
      "type": "java.lang.String",
      "description": "Directory used for data storage.",
      "sourceType": "org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoProperties$Storage"
    },
    {
      "name": "spring.mongodb.embedded.storage.oplog-size",
      "type": "java.lang.Integer",
      "description": "Maximum size of the oplog in megabytes.",
      "sourceType": "org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoProperties$Storage"
    },
    {
      "name": "spring.mongodb.embedded.storage.repl-set-name",
      "type": "java.lang.String",
      "description": "Name of the replica set.",
      "sourceType": "org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoProperties$Storage"
    },
    {
      "name": "spring.mongodb.embedded.version",
      "type": "java.lang.String",
      "description": "Version of Mongo to use.",
      "sourceType": "org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoProperties",
      "defaultValue": "3.2.2"
    },
    {
      "name": "spring.mustache.allow-request-override",
      "type": "java.lang.Boolean",
      "description": "Set whether HttpServletRequest attributes are allowed to override (hide) controller\n generated model attributes of the same name.",
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties"
    },
    {
      "name": "spring.mustache.allow-session-override",
      "type": "java.lang.Boolean",
      "description": "Set whether HttpSession attributes are allowed to override (hide) controller\n generated model attributes of the same name.",
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties"
    },
    {
      "name": "spring.mustache.cache",
      "type": "java.lang.Boolean",
      "description": "Enable template caching.",
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties"
    },
    {
      "name": "spring.mustache.charset",
      "type": "java.nio.charset.Charset",
      "description": "Template encoding.",
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties"
    },
    {
      "name": "spring.mustache.check-template-location",
      "type": "java.lang.Boolean",
      "description": "Check that the templates location exists.",
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties"
    },
    {
      "name": "spring.mustache.content-type",
      "type": "org.springframework.util.MimeType",
      "description": "Content-Type value.",
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties"
    },
    {
      "name": "spring.mustache.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable MVC view resolution for this technology.",
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties"
    },
    {
      "name": "spring.mustache.expose-request-attributes",
      "type": "java.lang.Boolean",
      "description": "Set whether all request attributes should be added to the model prior to merging\n with the template.",
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties"
    },
    {
      "name": "spring.mustache.expose-session-attributes",
      "type": "java.lang.Boolean",
      "description": "Set whether all HttpSession attributes should be added to the model prior to\n merging with the template.",
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties"
    },
    {
      "name": "spring.mustache.expose-spring-macro-helpers",
      "type": "java.lang.Boolean",
      "description": "Set whether to expose a RequestContext for use by Spring's macro library, under the\n name \"springMacroRequestContext\".",
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties"
    },
    {
      "name": "spring.mustache.prefix",
      "type": "java.lang.String",
      "description": "Prefix to apply to template names.",
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "defaultValue": "classpath:/templates/"
    },
    {
      "name": "spring.mustache.request-context-attribute",
      "type": "java.lang.String",
      "description": "Name of the RequestContext attribute for all views.",
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties"
    },
    {
      "name": "spring.mustache.suffix",
      "type": "java.lang.String",
      "description": "Suffix to apply to template names.",
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "defaultValue": ".html"
    },
    {
      "name": "spring.mustache.view-names",
      "type": "java.lang.String[]",
      "description": "White list of view names that can be resolved.",
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties"
    },
    {
      "name": "spring.mvc.async.request-timeout",
      "type": "java.lang.Long",
      "description": "Amount of time (in milliseconds) before asynchronous request handling times\n out. If this value is not set, the default timeout of the underlying\n implementation is used, e.g. 10 seconds on Tomcat with Servlet 3.",
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties$Async"
    },
    {
      "name": "spring.mvc.date-format",
      "type": "java.lang.String",
      "description": "Date format to use (e.g. dd/MM/yyyy).",
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties"
    },
    {
      "name": "spring.mvc.dispatch-options-request",
      "type": "java.lang.Boolean",
      "description": "Dispatch OPTIONS requests to the FrameworkServlet doService method.",
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties",
      "defaultValue": true
    },
    {
      "name": "spring.mvc.dispatch-trace-request",
      "type": "java.lang.Boolean",
      "description": "Dispatch TRACE requests to the FrameworkServlet doService method.",
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties",
      "defaultValue": false
    },
    {
      "name": "spring.mvc.favicon.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable resolution of favicon.ico.",
      "defaultValue": true
    },
    {
      "name": "spring.mvc.formcontent.putfilter.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable Spring's HttpPutFormContentFilter.",
      "defaultValue": true
    },
    {
      "name": "spring.mvc.ignore-default-model-on-redirect",
      "type": "java.lang.Boolean",
      "description": "If the content of the \"default\" model should be ignored during redirect scenarios.",
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties",
      "defaultValue": true
    },
    {
      "name": "spring.mvc.locale",
      "type": "java.util.Locale",
      "description": "Locale to use. By default, this locale is overridden by the \"Accept-Language\"\n header.",
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties"
    },
    {
      "name": "spring.mvc.locale-resolver",
      "type": "org.springframework.boot.autoconfigure.web.WebMvcProperties$LocaleResolver",
      "description": "Define how the locale should be resolved.",
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties"
    },
    {
      "name": "spring.mvc.log-resolved-exception",
      "type": "java.lang.Boolean",
      "description": "Enable warn logging of exceptions resolved by a \"HandlerExceptionResolver\".",
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties",
      "defaultValue": false
    },
    {
      "name": "spring.mvc.media-types",
      "type": "java.util.Map<java.lang.String,org.springframework.http.MediaType>",
      "description": "Maps file extensions to media types for content negotiation, e.g. yml->text/yaml.",
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties"
    },
    {
      "name": "spring.mvc.message-codes-resolver-format",
      "type": "org.springframework.validation.DefaultMessageCodesResolver$Format",
      "description": "Formatting strategy for message codes (PREFIX_ERROR_CODE, POSTFIX_ERROR_CODE).",
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties"
    },
    {
      "name": "spring.mvc.servlet.load-on-startup",
      "type": "java.lang.Integer",
      "description": "Load on startup priority of the dispatcher servlet.",
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties$Servlet",
      "defaultValue": -1
    },
    {
      "name": "spring.mvc.static-path-pattern",
      "type": "java.lang.String",
      "description": "Path pattern used for static resources.",
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties",
      "defaultValue": "/**"
    },
    {
      "name": "spring.mvc.throw-exception-if-no-handler-found",
      "type": "java.lang.Boolean",
      "description": "If a \"NoHandlerFoundException\" should be thrown if no Handler was found to process\n a request.",
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties",
      "defaultValue": false
    },
    {
      "name": "spring.mvc.view.prefix",
      "type": "java.lang.String",
      "description": "Spring MVC view prefix.",
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties$View"
    },
    {
      "name": "spring.mvc.view.suffix",
      "type": "java.lang.String",
      "description": "Spring MVC view suffix.",
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties$View"
    },
    {
      "name": "spring.rabbitmq.addresses",
      "type": "java.lang.String",
      "description": "Comma-separated list of addresses to which the client should connect.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties"
    },
    {
      "name": "spring.rabbitmq.cache.channel.checkout-timeout",
      "type": "java.lang.Long",
      "description": "Number of milliseconds to wait to obtain a channel if the cache size has\n been reached. If 0, always create a new channel.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Cache$Channel"
    },
    {
      "name": "spring.rabbitmq.cache.channel.size",
      "type": "java.lang.Integer",
      "description": "Number of channels to retain in the cache. When \"check-timeout\" > 0, max\n channels per connection.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Cache$Channel"
    },
    {
      "name": "spring.rabbitmq.cache.connection.mode",
      "type": "org.springframework.amqp.rabbit.connection.CachingConnectionFactory$CacheMode",
      "description": "Connection factory cache mode.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Cache$Connection"
    },
    {
      "name": "spring.rabbitmq.cache.connection.size",
      "type": "java.lang.Integer",
      "description": "Number of connections to cache. Only applies when mode is CONNECTION.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Cache$Connection"
    },
    {
      "name": "spring.rabbitmq.connection-timeout",
      "type": "java.lang.Integer",
      "description": "Connection timeout, in milliseconds; zero for infinite.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties"
    },
    {
      "name": "spring.rabbitmq.dynamic",
      "type": "java.lang.Boolean",
      "description": "Create an AmqpAdmin bean.",
      "defaultValue": true
    },
    {
      "name": "spring.rabbitmq.host",
      "type": "java.lang.String",
      "description": "RabbitMQ host.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "defaultValue": "localhost"
    },
    {
      "name": "spring.rabbitmq.listener.acknowledge-mode",
      "type": "org.springframework.amqp.core.AcknowledgeMode",
      "description": "Acknowledge mode of container.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Listener"
    },
    {
      "name": "spring.rabbitmq.listener.auto-startup",
      "type": "java.lang.Boolean",
      "description": "Start the container automatically on startup.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Listener",
      "defaultValue": true
    },
    {
      "name": "spring.rabbitmq.listener.concurrency",
      "type": "java.lang.Integer",
      "description": "Minimum number of consumers.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Listener"
    },
    {
      "name": "spring.rabbitmq.listener.default-requeue-rejected",
      "type": "java.lang.Boolean",
      "description": "Whether rejected deliveries are requeued by default; default true.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Listener"
    },
    {
      "name": "spring.rabbitmq.listener.max-concurrency",
      "type": "java.lang.Integer",
      "description": "Maximum number of consumers.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Listener"
    },
    {
      "name": "spring.rabbitmq.listener.prefetch",
      "type": "java.lang.Integer",
      "description": "Number of messages to be handled in a single request. It should be greater than\n or equal to the transaction size (if used).",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Listener"
    },
    {
      "name": "spring.rabbitmq.listener.retry.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether or not publishing retries are enabled.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry"
    },
    {
      "name": "spring.rabbitmq.listener.retry.initial-interval",
      "type": "java.lang.Long",
      "description": "Interval between the first and second attempt to publish or deliver a message.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry"
    },
    {
      "name": "spring.rabbitmq.listener.retry.max-attempts",
      "type": "java.lang.Integer",
      "description": "Maximum number of attempts to publish or deliver a message.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry"
    },
    {
      "name": "spring.rabbitmq.listener.retry.max-interval",
      "type": "java.lang.Long",
      "description": "Maximum interval between attempts.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry"
    },
    {
      "name": "spring.rabbitmq.listener.retry.multiplier",
      "type": "java.lang.Double",
      "description": "A multiplier to apply to the previous retry interval.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry"
    },
    {
      "name": "spring.rabbitmq.listener.retry.stateless",
      "type": "java.lang.Boolean",
      "description": "Whether or not retries are stateless or stateful.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry",
      "defaultValue": true
    },
    {
      "name": "spring.rabbitmq.listener.transaction-size",
      "type": "java.lang.Integer",
      "description": "Number of messages to be processed in a transaction. For best results it should\n be less than or equal to the prefetch count.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Listener"
    },
    {
      "name": "spring.rabbitmq.password",
      "type": "java.lang.String",
      "description": "Login to authenticate against the broker.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties"
    },
    {
      "name": "spring.rabbitmq.port",
      "type": "java.lang.Integer",
      "description": "RabbitMQ port.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "defaultValue": 5672
    },
    {
      "name": "spring.rabbitmq.publisher-confirms",
      "type": "java.lang.Boolean",
      "description": "Enable publisher confirms.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "defaultValue": false
    },
    {
      "name": "spring.rabbitmq.publisher-returns",
      "type": "java.lang.Boolean",
      "description": "Enable publisher returns.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "defaultValue": false
    },
    {
      "name": "spring.rabbitmq.requested-heartbeat",
      "type": "java.lang.Integer",
      "description": "Requested heartbeat timeout, in seconds; zero for none.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties"
    },
    {
      "name": "spring.rabbitmq.ssl.algorithm",
      "type": "java.lang.String",
      "description": "SSL algorithm to use (e.g. TLSv1.1). Default is set automatically by the rabbit\n client library.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl"
    },
    {
      "name": "spring.rabbitmq.ssl.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable SSL support.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl",
      "defaultValue": false
    },
    {
      "name": "spring.rabbitmq.ssl.key-store",
      "type": "java.lang.String",
      "description": "Path to the key store that holds the SSL certificate.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl"
    },
    {
      "name": "spring.rabbitmq.ssl.key-store-password",
      "type": "java.lang.String",
      "description": "Password used to access the key store.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl"
    },
    {
      "name": "spring.rabbitmq.ssl.trust-store",
      "type": "java.lang.String",
      "description": "Trust store that holds SSL certificates.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl"
    },
    {
      "name": "spring.rabbitmq.ssl.trust-store-password",
      "type": "java.lang.String",
      "description": "Password used to access the trust store.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl"
    },
    {
      "name": "spring.rabbitmq.template.mandatory",
      "type": "java.lang.Boolean",
      "description": "Enable mandatory messages. If a mandatory message cannot be routed to a queue\n by the server, it will return an unroutable message with a Return method.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Template"
    },
    {
      "name": "spring.rabbitmq.template.receive-timeout",
      "type": "java.lang.Long",
      "description": "Timeout for receive() operations.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Template"
    },
    {
      "name": "spring.rabbitmq.template.reply-timeout",
      "type": "java.lang.Long",
      "description": "Timeout for sendAndReceive() operations.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Template"
    },
    {
      "name": "spring.rabbitmq.template.retry.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether or not publishing retries are enabled.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Retry",
      "defaultValue": false
    },
    {
      "name": "spring.rabbitmq.template.retry.initial-interval",
      "type": "java.lang.Long",
      "description": "Interval between the first and second attempt to publish or deliver a message.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Retry",
      "defaultValue": 1000
    },
    {
      "name": "spring.rabbitmq.template.retry.max-attempts",
      "type": "java.lang.Integer",
      "description": "Maximum number of attempts to publish or deliver a message.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Retry",
      "defaultValue": 3
    },
    {
      "name": "spring.rabbitmq.template.retry.max-interval",
      "type": "java.lang.Long",
      "description": "Maximum interval between attempts.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Retry",
      "defaultValue": 10000
    },
    {
      "name": "spring.rabbitmq.template.retry.multiplier",
      "type": "java.lang.Double",
      "description": "A multiplier to apply to the previous retry interval.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Retry",
      "defaultValue": 1
    },
    {
      "name": "spring.rabbitmq.username",
      "type": "java.lang.String",
      "description": "Login user to authenticate to the broker.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties"
    },
    {
      "name": "spring.rabbitmq.virtual-host",
      "type": "java.lang.String",
      "description": "Virtual host to use when connecting to the broker.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties"
    },
    {
      "name": "spring.redis.cluster.max-redirects",
      "type": "java.lang.Integer",
      "description": "Maximum number of redirects to follow when executing commands across the\n cluster.",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Cluster"
    },
    {
      "name": "spring.redis.cluster.nodes",
      "type": "java.util.List<java.lang.String>",
      "description": "Comma-separated list of \"host:port\" pairs to bootstrap from. This represents an\n \"initial\" list of cluster nodes and is required to have at least one entry.",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Cluster"
    },
    {
      "name": "spring.redis.database",
      "type": "java.lang.Integer",
      "description": "Database index used by the connection factory.",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties",
      "defaultValue": 0
    },
    {
      "name": "spring.redis.host",
      "type": "java.lang.String",
      "description": "Redis server host.",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties",
      "defaultValue": "localhost"
    },
    {
      "name": "spring.redis.password",
      "type": "java.lang.String",
      "description": "Login password of the redis server.",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties"
    },
    {
      "name": "spring.redis.pool.max-active",
      "type": "java.lang.Integer",
      "description": "Max number of connections that can be allocated by the pool at a given time.\n Use a negative value for no limit.",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool",
      "defaultValue": 8
    },
    {
      "name": "spring.redis.pool.max-idle",
      "type": "java.lang.Integer",
      "description": "Max number of \"idle\" connections in the pool. Use a negative value to indicate\n an unlimited number of idle connections.",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool",
      "defaultValue": 8
    },
    {
      "name": "spring.redis.pool.max-wait",
      "type": "java.lang.Integer",
      "description": "Maximum amount of time (in milliseconds) a connection allocation should block\n before throwing an exception when the pool is exhausted. Use a negative value\n to block indefinitely.",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool",
      "defaultValue": -1
    },
    {
      "name": "spring.redis.pool.min-idle",
      "type": "java.lang.Integer",
      "description": "Target for the minimum number of idle connections to maintain in the pool. This\n setting only has an effect if it is positive.",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool",
      "defaultValue": 0
    },
    {
      "name": "spring.redis.port",
      "type": "java.lang.Integer",
      "description": "Redis server port.",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties",
      "defaultValue": 6379
    },
    {
      "name": "spring.redis.sentinel.master",
      "type": "java.lang.String",
      "description": "Name of Redis server.",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Sentinel"
    },
    {
      "name": "spring.redis.sentinel.nodes",
      "type": "java.lang.String",
      "description": "Comma-separated list of host:port pairs.",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Sentinel"
    },
    {
      "name": "spring.redis.timeout",
      "type": "java.lang.Integer",
      "description": "Connection timeout in milliseconds.",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties",
      "defaultValue": 0
    },
    {
      "name": "spring.resources.add-mappings",
      "type": "java.lang.Boolean",
      "description": "Enable default resource handling.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties",
      "defaultValue": true
    },
    {
      "name": "spring.resources.cache-period",
      "type": "java.lang.Integer",
      "description": "Cache period for the resources served by the resource handler, in seconds.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties"
    },
    {
      "name": "spring.resources.chain.cache",
      "type": "java.lang.Boolean",
      "description": "Enable caching in the Resource chain.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Chain",
      "defaultValue": true
    },
    {
      "name": "spring.resources.chain.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the Spring Resource Handling chain. Disabled by default unless at least\n one strategy has been enabled.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Chain"
    },
    {
      "name": "spring.resources.chain.gzipped",
      "type": "java.lang.Boolean",
      "description": "Enable resolution of already gzipped resources. Checks for a resource name\n variant with the \"*.gz\" extension.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Chain",
      "defaultValue": false
    },
    {
      "name": "spring.resources.chain.html-application-cache",
      "type": "java.lang.Boolean",
      "description": "Enable HTML5 application cache manifest rewriting.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Chain",
      "defaultValue": false
    },
    {
      "name": "spring.resources.chain.strategy.content.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the content Version Strategy.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Content",
      "defaultValue": false
    },
    {
      "name": "spring.resources.chain.strategy.content.paths",
      "type": "java.lang.String[]",
      "description": "Comma-separated list of patterns to apply to the Version Strategy.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Content",
      "defaultValue": ["/**"]
    },
    {
      "name": "spring.resources.chain.strategy.fixed.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the fixed Version Strategy.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Fixed",
      "defaultValue": false
    },
    {
      "name": "spring.resources.chain.strategy.fixed.paths",
      "type": "java.lang.String[]",
      "description": "Comma-separated list of patterns to apply to the Version Strategy.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Fixed",
      "defaultValue": ["/**"]
    },
    {
      "name": "spring.resources.chain.strategy.fixed.version",
      "type": "java.lang.String",
      "description": "Version string to use for the Version Strategy.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Fixed"
    },
    {
      "name": "spring.resources.static-locations",
      "type": "java.lang.String[]",
      "description": "Locations of static resources. Defaults to classpath:[/META-INF/resources/,\n /resources/, /static/, /public/] plus context:/ (the root of the servlet context).",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties"
    },
    {
      "name": "spring.sendgrid.api-key",
      "type": "java.lang.String",
      "description": "SendGrid api key. Alternative to username/password.",
      "sourceType": "org.springframework.boot.autoconfigure.sendgrid.SendGridProperties"
    },
    {
      "name": "spring.sendgrid.password",
      "type": "java.lang.String",
      "description": "SendGrid password.",
      "sourceType": "org.springframework.boot.autoconfigure.sendgrid.SendGridProperties"
    },
    {
      "name": "spring.sendgrid.proxy.host",
      "type": "java.lang.String",
      "description": "SendGrid proxy host.",
      "sourceType": "org.springframework.boot.autoconfigure.sendgrid.SendGridProperties$Proxy"
    },
    {
      "name": "spring.sendgrid.proxy.port",
      "type": "java.lang.Integer",
      "description": "SendGrid proxy port.",
      "sourceType": "org.springframework.boot.autoconfigure.sendgrid.SendGridProperties$Proxy"
    },
    {
      "name": "spring.sendgrid.username",
      "type": "java.lang.String",
      "description": "SendGrid username. Alternative to api key.",
      "sourceType": "org.springframework.boot.autoconfigure.sendgrid.SendGridProperties"
    },
    {
      "name": "spring.session.hazelcast.map-name",
      "type": "java.lang.String",
      "description": "Name of the map used to store sessions.",
      "sourceType": "org.springframework.boot.autoconfigure.session.SessionProperties$Hazelcast",
      "defaultValue": "spring:session:sessions"
    },
    {
      "name": "spring.session.jdbc.initializer.enabled",
      "type": "java.lang.Boolean",
      "description": "Create the required session tables on startup if necessary. Enabled\n automatically if the default table name is set or a custom schema is\n configured.",
      "sourceType": "org.springframework.boot.autoconfigure.session.SessionProperties$Jdbc$Initializer"
    },
    {
      "name": "spring.session.jdbc.schema",
      "type": "java.lang.String",
      "description": "Path to the SQL file to use to initialize the database schema.",
      "sourceType": "org.springframework.boot.autoconfigure.session.SessionProperties$Jdbc",
      "defaultValue": "classpath:org/springframework/session/jdbc/schema-@@platform@@.sql"
    },
    {
      "name": "spring.session.jdbc.table-name",
      "type": "java.lang.String",
      "description": "Name of database table used to store sessions.",
      "sourceType": "org.springframework.boot.autoconfigure.session.SessionProperties$Jdbc",
      "defaultValue": "SPRING_SESSION"
    },
    {
      "name": "spring.session.mongo.collection-name",
      "type": "java.lang.String",
      "description": "Collection name used to store sessions.",
      "sourceType": "org.springframework.boot.autoconfigure.session.SessionProperties$Mongo",
      "defaultValue": "sessions"
    },
    {
      "name": "spring.session.redis.flush-mode",
      "type": "org.springframework.session.data.redis.RedisFlushMode",
      "description": "Flush mode for the Redis sessions.",
      "sourceType": "org.springframework.boot.autoconfigure.session.SessionProperties$Redis"
    },
    {
      "name": "spring.session.redis.namespace",
      "type": "java.lang.String",
      "description": "Namespace for keys used to store sessions.",
      "sourceType": "org.springframework.boot.autoconfigure.session.SessionProperties$Redis",
      "defaultValue": ""
    },
    {
      "name": "spring.session.store-type",
      "type": "org.springframework.boot.autoconfigure.session.StoreType",
      "description": "Session store type.",
      "sourceType": "org.springframework.boot.autoconfigure.session.SessionProperties"
    },
    {
      "name": "spring.social.auto-connection-views",
      "type": "java.lang.Boolean",
      "description": "Enable the connection status view for supported providers.",
      "defaultValue": false
    },
    {
      "name": "spring.social.facebook.app-id",
      "type": "java.lang.String",
      "description": "Application id.",
      "sourceType": "org.springframework.boot.autoconfigure.social.FacebookProperties"
    },
    {
      "name": "spring.social.facebook.app-secret",
      "type": "java.lang.String",
      "description": "Application secret.",
      "sourceType": "org.springframework.boot.autoconfigure.social.FacebookProperties"
    },
    {
      "name": "spring.social.linkedin.app-id",
      "type": "java.lang.String",
      "description": "Application id.",
      "sourceType": "org.springframework.boot.autoconfigure.social.LinkedInProperties"
    },
    {
      "name": "spring.social.linkedin.app-secret",
      "type": "java.lang.String",
      "description": "Application secret.",
      "sourceType": "org.springframework.boot.autoconfigure.social.LinkedInProperties"
    },
    {
      "name": "spring.social.twitter.app-id",
      "type": "java.lang.String",
      "description": "Application id.",
      "sourceType": "org.springframework.boot.autoconfigure.social.TwitterProperties"
    },
    {
      "name": "spring.social.twitter.app-secret",
      "type": "java.lang.String",
      "description": "Application secret.",
      "sourceType": "org.springframework.boot.autoconfigure.social.TwitterProperties"
    },
    {
      "name": "spring.thymeleaf.cache",
      "type": "java.lang.Boolean",
      "description": "Enable template caching.",
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "defaultValue": true
    },
    {
      "name": "spring.thymeleaf.check-template",
      "type": "java.lang.Boolean",
      "description": "Check that the template exists before rendering it (Thymeleaf 3+).",
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "defaultValue": true
    },
    {
      "name": "spring.thymeleaf.check-template-location",
      "type": "java.lang.Boolean",
      "description": "Check that the templates location exists.",
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "defaultValue": true
    },
    {
      "name": "spring.thymeleaf.content-type",
      "type": "org.springframework.util.MimeType",
      "description": "Content-Type value.",
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "defaultValue": "text/html"
    },
    {
      "name": "spring.thymeleaf.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable MVC Thymeleaf view resolution.",
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "defaultValue": true
    },
    {
      "name": "spring.thymeleaf.encoding",
      "type": "java.nio.charset.Charset",
      "description": "Template encoding.",
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "defaultValue": "UTF-8"
    },
    {
      "name": "spring.thymeleaf.excluded-view-names",
      "type": "java.lang.String[]",
      "description": "Comma-separated list of view names that should be excluded from resolution.",
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties"
    },
    {
      "name": "spring.thymeleaf.mode",
      "type": "java.lang.String",
      "description": "Template mode to be applied to templates. See also StandardTemplateModeHandlers.",
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "defaultValue": "HTML5"
    },
    {
      "name": "spring.thymeleaf.prefix",
      "type": "java.lang.String",
      "description": "Prefix that gets prepended to view names when building a URL.",
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "defaultValue": "classpath:/templates/"
    },
    {
      "name": "spring.thymeleaf.suffix",
      "type": "java.lang.String",
      "description": "Suffix that gets appended to view names when building a URL.",
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "defaultValue": ".html"
    },
    {
      "name": "spring.thymeleaf.template-resolver-order",
      "type": "java.lang.Integer",
      "description": "Order of the template resolver in the chain. By default, the template resolver is\n first in the chain. Order start at 1 and should only be set if you have defined\n additional \"TemplateResolver\" beans.",
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties"
    },
    {
      "name": "spring.thymeleaf.view-names",
      "type": "java.lang.String[]",
      "description": "Comma-separated list of view names that can be resolved.",
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties"
    },
    {
      "name": "spring.velocity.allow-request-override",
      "type": "java.lang.Boolean",
      "description": "Set whether HttpServletRequest attributes are allowed to override (hide) controller\n generated model attributes of the same name.",
      "sourceType": "org.springframework.boot.autoconfigure.velocity.VelocityProperties",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.velocity.allow-session-override",
      "type": "java.lang.Boolean",
      "description": "Set whether HttpSession attributes are allowed to override (hide) controller\n generated model attributes of the same name.",
      "sourceType": "org.springframework.boot.autoconfigure.velocity.VelocityProperties",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.velocity.cache",
      "type": "java.lang.Boolean",
      "description": "Enable template caching.",
      "sourceType": "org.springframework.boot.autoconfigure.velocity.VelocityProperties",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.velocity.charset",
      "type": "java.nio.charset.Charset",
      "description": "Template encoding.",
      "sourceType": "org.springframework.boot.autoconfigure.velocity.VelocityProperties",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.velocity.check-template-location",
      "type": "java.lang.Boolean",
      "description": "Check that the templates location exists.",
      "sourceType": "org.springframework.boot.autoconfigure.velocity.VelocityProperties",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.velocity.content-type",
      "type": "org.springframework.util.MimeType",
      "description": "Content-Type value.",
      "sourceType": "org.springframework.boot.autoconfigure.velocity.VelocityProperties",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.velocity.date-tool-attribute",
      "type": "java.lang.String",
      "description": "Name of the DateTool helper object to expose in the Velocity context of the view.",
      "sourceType": "org.springframework.boot.autoconfigure.velocity.VelocityProperties",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.velocity.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable MVC view resolution for this technology.",
      "sourceType": "org.springframework.boot.autoconfigure.velocity.VelocityProperties",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.velocity.expose-request-attributes",
      "type": "java.lang.Boolean",
      "description": "Set whether all request attributes should be added to the model prior to merging\n with the template.",
      "sourceType": "org.springframework.boot.autoconfigure.velocity.VelocityProperties",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.velocity.expose-session-attributes",
      "type": "java.lang.Boolean",
      "description": "Set whether all HttpSession attributes should be added to the model prior to\n merging with the template.",
      "sourceType": "org.springframework.boot.autoconfigure.velocity.VelocityProperties",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.velocity.expose-spring-macro-helpers",
      "type": "java.lang.Boolean",
      "description": "Set whether to expose a RequestContext for use by Spring's macro library, under the\n name \"springMacroRequestContext\".",
      "sourceType": "org.springframework.boot.autoconfigure.velocity.VelocityProperties",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.velocity.number-tool-attribute",
      "type": "java.lang.String",
      "description": "Name of the NumberTool helper object to expose in the Velocity context of the view.",
      "sourceType": "org.springframework.boot.autoconfigure.velocity.VelocityProperties",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.velocity.prefer-file-system-access",
      "type": "java.lang.Boolean",
      "description": "Prefer file system access for template loading. File system access enables hot\n detection of template changes.",
      "sourceType": "org.springframework.boot.autoconfigure.velocity.VelocityProperties",
      "defaultValue": true,
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.velocity.prefix",
      "type": "java.lang.String",
      "description": "Prefix that gets prepended to view names when building a URL.",
      "sourceType": "org.springframework.boot.autoconfigure.velocity.VelocityProperties",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.velocity.properties",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "description": "Additional velocity properties.",
      "sourceType": "org.springframework.boot.autoconfigure.velocity.VelocityProperties",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.velocity.request-context-attribute",
      "type": "java.lang.String",
      "description": "Name of the RequestContext attribute for all views.",
      "sourceType": "org.springframework.boot.autoconfigure.velocity.VelocityProperties",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.velocity.resource-loader-path",
      "type": "java.lang.String",
      "description": "Template path.",
      "sourceType": "org.springframework.boot.autoconfigure.velocity.VelocityProperties",
      "defaultValue": "classpath:/templates/",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.velocity.suffix",
      "type": "java.lang.String",
      "description": "Suffix that gets appended to view names when building a URL.",
      "sourceType": "org.springframework.boot.autoconfigure.velocity.VelocityProperties",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.velocity.toolbox-config-location",
      "type": "java.lang.String",
      "description": "Velocity Toolbox config location, for example \"/WEB-INF/toolbox.xml\". Automatically\n loads a Velocity Tools toolbox definition file and expose all defined tools in the\n specified scopes.",
      "sourceType": "org.springframework.boot.autoconfigure.velocity.VelocityProperties",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.velocity.view-names",
      "type": "java.lang.String[]",
      "description": "White list of view names that can be resolved.",
      "sourceType": "org.springframework.boot.autoconfigure.velocity.VelocityProperties",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.webservices.path",
      "type": "java.lang.String",
      "description": "Path that serves as the base URI for the services.",
      "sourceType": "org.springframework.boot.autoconfigure.webservices.WebServicesProperties",
      "defaultValue": "/services"
    },
    {
      "name": "spring.webservices.servlet.init",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "description": "Servlet init parameters to pass to Spring Web Services.",
      "sourceType": "org.springframework.boot.autoconfigure.webservices.WebServicesProperties$Servlet"
    },
    {
      "name": "spring.webservices.servlet.load-on-startup",
      "type": "java.lang.Integer",
      "description": "Load on startup priority of the Spring Web Services servlet.",
      "sourceType": "org.springframework.boot.autoconfigure.webservices.WebServicesProperties$Servlet",
      "defaultValue": -1
    }
  ],
  "hints": [
    {
      "name": "liquibase.change-log",
      "providers": [{
        "name": "handle-as",
        "parameters": {"target": "org.springframework.core.io.Resource"}
      }]
    },
    {
      "name": "server.jsp-servlet.class-name",
      "providers": [{
        "name": "class-reference",
        "parameters": {"target": "javax.servlet.http.HttpServlet"}
      }]
    },
    {
      "name": "spring.cache.jcache.provider",
      "providers": [{
        "name": "class-reference",
        "parameters": {"target": "javax.cache.spi.CachingProvider"}
      }]
    },
    {
      "name": "spring.data.cassandra.schema-action",
      "providers": [{
        "name": "handle-as",
        "parameters": {"target": "org.springframework.data.cassandra.config.SchemaAction"}
      }]
    },
    {
      "name": "spring.data.mongodb.field-naming-strategy",
      "providers": [{
        "name": "class-reference",
        "parameters": {"target": "org.springframework.data.mapping.model.FieldNamingStrategy"}
      }]
    },
    {
      "name": "spring.data.neo4j.compiler",
      "providers": [{
        "name": "class-reference",
        "parameters": {"target": "org.neo4j.ogm.compiler.Compiler"}
      }]
    },
    {
      "name": "spring.data.neo4j.session.scope",
      "values": [
        {"value": "singleton"},
        {"value": "session"},
        {"value": "request"}
      ],
      "providers": [{"name": "any"}]
    },
    {
      "name": "spring.datasource.driver-class-name",
      "providers": [{
        "name": "class-reference",
        "parameters": {"target": "java.sql.Driver"}
      }]
    },
    {
      "name": "spring.datasource.xa.data-source-class-name",
      "providers": [{
        "name": "class-reference",
        "parameters": {"target": "javax.sql.XADataSource"}
      }]
    },
    {
      "name": "spring.http.converters.preferred-json-mapper",
      "values": [
        {"value": "gson"},
        {"value": "jackson"}
      ],
      "providers": [{"name": "any"}]
    },
    {
      "name": "spring.jmx.server",
      "providers": [{
        "name": "spring-bean-reference",
        "parameters": {"target": "javax.management.MBeanServer"}
      }]
    },
    {
      "name": "spring.jpa.hibernate.ddl-auto",
      "values": [
        {
          "value": "none",
          "description": "Disable DDL handling."
        },
        {
          "value": "validate",
          "description": "Validate the schema, make no changes to the database."
        },
        {
          "value": "update",
          "description": "Update the schema if necessary."
        },
        {
          "value": "create",
          "description": "Create the schema and destroy previous data."
        },
        {
          "value": "create-drop",
          "description": "Create and then destroy the schema at the end of the session."
        }
      ]
    },
    {
      "name": "spring.jpa.hibernate.naming.implicit-strategy",
      "providers": [{
        "name": "class-reference",
        "parameters": {"target": "org.hibernate.boot.model.naming.ImplicitNamingStrategy"}
      }]
    },
    {
      "name": "spring.jpa.hibernate.naming.physical-strategy",
      "providers": [{
        "name": "class-reference",
        "parameters": {"target": "org.hibernate.boot.model.naming.PhysicalNamingStrategy"}
      }]
    },
    {
      "name": "spring.jpa.hibernate.naming.strategy",
      "providers": [{
        "name": "class-reference",
        "parameters": {"target": "org.hibernate.cfg.NamingStrategy"}
      }]
    }
  ]
}