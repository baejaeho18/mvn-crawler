Compiled from "BatchDatabaseInitializer.java"
public class org.springframework.boot.autoconfigure.batch.BatchDatabaseInitializer {
  private org.springframework.boot.autoconfigure.batch.BatchProperties properties;

  private javax.sql.DataSource dataSource;

  private org.springframework.core.io.ResourceLoader resourceLoader;

  public org.springframework.boot.autoconfigure.batch.BatchDatabaseInitializer();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  protected void initialize();
    Code:
       0: aload_0
       1: getfield      #2                  // Field properties:Lorg/springframework/boot/autoconfigure/batch/BatchProperties;
       4: invokevirtual #3                  // Method org/springframework/boot/autoconfigure/batch/BatchProperties.getInitializer:()Lorg/springframework/boot/autoconfigure/batch/BatchProperties$Initializer;
       7: invokevirtual #4                  // Method org/springframework/boot/autoconfigure/batch/BatchProperties$Initializer.isEnabled:()Z
      10: ifeq          105
      13: aload_0
      14: invokespecial #5                  // Method getDatabaseType:()Ljava/lang/String;
      17: astore_1
      18: ldc           #6                  // String hsql
      20: aload_1
      21: invokevirtual #7                  // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      24: ifeq          30
      27: ldc           #8                  // String hsqldb
      29: astore_1
      30: ldc           #9                  // String postgres
      32: aload_1
      33: invokevirtual #7                  // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      36: ifeq          42
      39: ldc           #10                 // String postgresql
      41: astore_1
      42: ldc           #11                 // String oracle
      44: aload_1
      45: invokevirtual #7                  // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      48: ifeq          54
      51: ldc           #12                 // String oracle10g
      53: astore_1
      54: new           #13                 // class org/springframework/jdbc/datasource/init/ResourceDatabasePopulator
      57: dup
      58: invokespecial #14                 // Method org/springframework/jdbc/datasource/init/ResourceDatabasePopulator."<init>":()V
      61: astore_2
      62: aload_0
      63: getfield      #2                  // Field properties:Lorg/springframework/boot/autoconfigure/batch/BatchProperties;
      66: invokevirtual #15                 // Method org/springframework/boot/autoconfigure/batch/BatchProperties.getSchema:()Ljava/lang/String;
      69: astore_3
      70: aload_3
      71: ldc           #16                 // String @@platform@@
      73: aload_1
      74: invokevirtual #17                 // Method java/lang/String.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;
      77: astore_3
      78: aload_2
      79: aload_0
      80: getfield      #18                 // Field resourceLoader:Lorg/springframework/core/io/ResourceLoader;
      83: aload_3
      84: invokeinterface #19,  2           // InterfaceMethod org/springframework/core/io/ResourceLoader.getResource:(Ljava/lang/String;)Lorg/springframework/core/io/Resource;
      89: invokevirtual #20                 // Method org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.addScript:(Lorg/springframework/core/io/Resource;)V
      92: aload_2
      93: iconst_1
      94: invokevirtual #21                 // Method org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.setContinueOnError:(Z)V
      97: aload_2
      98: aload_0
      99: getfield      #22                 // Field dataSource:Ljavax/sql/DataSource;
     102: invokestatic  #23                 // Method org/springframework/jdbc/datasource/init/DatabasePopulatorUtils.execute:(Lorg/springframework/jdbc/datasource/init/DatabasePopulator;Ljavax/sql/DataSource;)V
     105: return

  private java.lang.String getDatabaseType();
    Code:
       0: aload_0
       1: getfield      #22                 // Field dataSource:Ljavax/sql/DataSource;
       4: invokestatic  #24                 // Method org/springframework/batch/support/DatabaseType.fromMetaData:(Ljavax/sql/DataSource;)Lorg/springframework/batch/support/DatabaseType;
       7: invokevirtual #25                 // Method org/springframework/batch/support/DatabaseType.toString:()Ljava/lang/String;
      10: invokevirtual #26                 // Method java/lang/String.toLowerCase:()Ljava/lang/String;
      13: areturn
      14: astore_1
      15: new           #28                 // class java/lang/IllegalStateException
      18: dup
      19: ldc           #29                 // String Unable to detect database type
      21: aload_1
      22: invokespecial #30                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      25: athrow
    Exception table:
       from    to  target type
           0    13    14   Class org/springframework/jdbc/support/MetaDataAccessException
}
