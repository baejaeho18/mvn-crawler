Compiled from "TransferManagerBuilder.java"
public final class com.amazonaws.services.s3.transfer.TransferManagerBuilder {
  private static final com.amazonaws.internal.SdkFunction<com.amazonaws.services.s3.transfer.TransferManagerParams, com.amazonaws.services.s3.transfer.TransferManager> DEFAULT_TRANSFER_MANAGER_FACTORY;

  private final com.amazonaws.internal.SdkFunction<com.amazonaws.services.s3.transfer.TransferManagerParams, com.amazonaws.services.s3.transfer.TransferManager> transferManagerFactory;

  private com.amazonaws.services.s3.AmazonS3 s3Client;

  private com.amazonaws.client.builder.ExecutorFactory executorFactory;

  private java.lang.Boolean shutDownThreadPools;

  private java.lang.Long minimumUploadPartSize;

  private java.lang.Long multipartUploadThreshold;

  private java.lang.Long multipartCopyThreshold;

  private java.lang.Long multipartCopyPartSize;

  public static com.amazonaws.services.s3.transfer.TransferManagerBuilder standard();
    Code:
       0: new           #1                  // class com/amazonaws/services/s3/transfer/TransferManagerBuilder
       3: dup
       4: invokespecial #2                  // Method "<init>":()V
       7: areturn

  public static com.amazonaws.services.s3.transfer.TransferManager defaultTransferManager();
    Code:
       0: invokestatic  #3                  // Method standard:()Lcom/amazonaws/services/s3/transfer/TransferManagerBuilder;
       3: invokestatic  #4                  // Method com/amazonaws/services/s3/AmazonS3ClientBuilder.defaultClient:()Lcom/amazonaws/services/s3/AmazonS3;
       6: invokevirtual #5                  // Method withS3Client:(Lcom/amazonaws/services/s3/AmazonS3;)Lcom/amazonaws/services/s3/transfer/TransferManagerBuilder;
       9: invokevirtual #6                  // Method build:()Lcom/amazonaws/services/s3/transfer/TransferManager;
      12: areturn

  private com.amazonaws.services.s3.transfer.TransferManagerBuilder();
    Code:
       0: aload_0
       1: getstatic     #7                  // Field DEFAULT_TRANSFER_MANAGER_FACTORY:Lcom/amazonaws/internal/SdkFunction;
       4: invokespecial #8                  // Method "<init>":(Lcom/amazonaws/internal/SdkFunction;)V
       7: return

  com.amazonaws.services.s3.transfer.TransferManagerBuilder(com.amazonaws.internal.SdkFunction<com.amazonaws.services.s3.transfer.TransferManagerParams, com.amazonaws.services.s3.transfer.TransferManager>);
    Code:
       0: aload_0
       1: invokespecial #9                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #10                 // Field transferManagerFactory:Lcom/amazonaws/internal/SdkFunction;
       9: return

  public final com.amazonaws.services.s3.AmazonS3 getS3Client();
    Code:
       0: aload_0
       1: getfield      #11                 // Field s3Client:Lcom/amazonaws/services/s3/AmazonS3;
       4: areturn

  public final void setS3Client(com.amazonaws.services.s3.AmazonS3);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #11                 // Field s3Client:Lcom/amazonaws/services/s3/AmazonS3;
       5: return

  public final com.amazonaws.services.s3.transfer.TransferManagerBuilder withS3Client(com.amazonaws.services.s3.AmazonS3);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #12                 // Method setS3Client:(Lcom/amazonaws/services/s3/AmazonS3;)V
       5: aload_0
       6: areturn

  private com.amazonaws.services.s3.AmazonS3 resolveS3Client();
    Code:
       0: aload_0
       1: getfield      #11                 // Field s3Client:Lcom/amazonaws/services/s3/AmazonS3;
       4: ifnonnull     17
       7: new           #13                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #14                 // String S3 Client must be provided to build TransferManager
      13: invokespecial #15                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: getfield      #11                 // Field s3Client:Lcom/amazonaws/services/s3/AmazonS3;
      21: areturn

  public final com.amazonaws.client.builder.ExecutorFactory getExecutorFactory();
    Code:
       0: aload_0
       1: getfield      #16                 // Field executorFactory:Lcom/amazonaws/client/builder/ExecutorFactory;
       4: areturn

  public final void setExecutorFactory(com.amazonaws.client.builder.ExecutorFactory);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #16                 // Field executorFactory:Lcom/amazonaws/client/builder/ExecutorFactory;
       5: return

  public final com.amazonaws.services.s3.transfer.TransferManagerBuilder withExecutorFactory(com.amazonaws.client.builder.ExecutorFactory);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #17                 // Method setExecutorFactory:(Lcom/amazonaws/client/builder/ExecutorFactory;)V
       5: aload_0
       6: areturn

  private java.util.concurrent.ExecutorService resolveExecutorService();
    Code:
       0: aload_0
       1: getfield      #16                 // Field executorFactory:Lcom/amazonaws/client/builder/ExecutorFactory;
       4: ifnonnull     13
       7: invokestatic  #18                 // Method com/amazonaws/services/s3/transfer/internal/TransferManagerUtils.createDefaultExecutorService:()Ljava/util/concurrent/ThreadPoolExecutor;
      10: goto          22
      13: aload_0
      14: getfield      #16                 // Field executorFactory:Lcom/amazonaws/client/builder/ExecutorFactory;
      17: invokeinterface #19,  1           // InterfaceMethod com/amazonaws/client/builder/ExecutorFactory.newExecutor:()Ljava/util/concurrent/ExecutorService;
      22: areturn

  public final java.lang.Boolean isShutDownThreadPools();
    Code:
       0: aload_0
       1: getfield      #20                 // Field shutDownThreadPools:Ljava/lang/Boolean;
       4: areturn

  public final void setShutDownThreadPools(java.lang.Boolean);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #20                 // Field shutDownThreadPools:Ljava/lang/Boolean;
       5: return

  public final com.amazonaws.services.s3.transfer.TransferManagerBuilder withShutDownThreadPools(java.lang.Boolean);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #21                 // Method setShutDownThreadPools:(Ljava/lang/Boolean;)V
       5: aload_0
       6: areturn

  private java.lang.Boolean resolveShutDownThreadPools();
    Code:
       0: aload_0
       1: getfield      #20                 // Field shutDownThreadPools:Ljava/lang/Boolean;
       4: ifnonnull     13
       7: getstatic     #22                 // Field java/lang/Boolean.TRUE:Ljava/lang/Boolean;
      10: goto          17
      13: aload_0
      14: getfield      #20                 // Field shutDownThreadPools:Ljava/lang/Boolean;
      17: areturn

  public final java.lang.Long getMinimumUploadPartSize();
    Code:
       0: aload_0
       1: getfield      #23                 // Field minimumUploadPartSize:Ljava/lang/Long;
       4: areturn

  public final void setMinimumUploadPartSize(java.lang.Long);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #23                 // Field minimumUploadPartSize:Ljava/lang/Long;
       5: return

  public final com.amazonaws.services.s3.transfer.TransferManagerBuilder withMinimumUploadPartSize(java.lang.Long);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #24                 // Method setMinimumUploadPartSize:(Ljava/lang/Long;)V
       5: aload_0
       6: areturn

  public final java.lang.Long getMultipartUploadThreshold();
    Code:
       0: aload_0
       1: getfield      #25                 // Field multipartUploadThreshold:Ljava/lang/Long;
       4: areturn

  public final void setMultipartUploadThreshold(java.lang.Long);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #25                 // Field multipartUploadThreshold:Ljava/lang/Long;
       5: return

  public final com.amazonaws.services.s3.transfer.TransferManagerBuilder withMultipartUploadThreshold(java.lang.Long);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #26                 // Method setMultipartUploadThreshold:(Ljava/lang/Long;)V
       5: aload_0
       6: areturn

  public final java.lang.Long getMultipartCopyThreshold();
    Code:
       0: aload_0
       1: getfield      #27                 // Field multipartCopyThreshold:Ljava/lang/Long;
       4: areturn

  public final void setMultipartCopyThreshold(java.lang.Long);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #27                 // Field multipartCopyThreshold:Ljava/lang/Long;
       5: return

  public final com.amazonaws.services.s3.transfer.TransferManagerBuilder withMultipartCopyThreshold(java.lang.Long);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #28                 // Method setMultipartCopyThreshold:(Ljava/lang/Long;)V
       5: aload_0
       6: areturn

  public final java.lang.Long getMultipartCopyPartSize();
    Code:
       0: aload_0
       1: getfield      #29                 // Field multipartCopyPartSize:Ljava/lang/Long;
       4: areturn

  public final void setMultipartCopyPartSize(java.lang.Long);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #29                 // Field multipartCopyPartSize:Ljava/lang/Long;
       5: return

  public final com.amazonaws.services.s3.transfer.TransferManagerBuilder withMultipartCopyPartSize(java.lang.Long);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #30                 // Method setMultipartCopyPartSize:(Ljava/lang/Long;)V
       5: aload_0
       6: areturn

  private com.amazonaws.services.s3.transfer.TransferManagerConfiguration resolveConfiguration();
    Code:
       0: new           #31                 // class com/amazonaws/services/s3/transfer/TransferManagerConfiguration
       3: dup
       4: invokespecial #32                 // Method com/amazonaws/services/s3/transfer/TransferManagerConfiguration."<init>":()V
       7: astore_1
       8: aload_0
       9: getfield      #23                 // Field minimumUploadPartSize:Ljava/lang/Long;
      12: ifnull        26
      15: aload_1
      16: aload_0
      17: getfield      #23                 // Field minimumUploadPartSize:Ljava/lang/Long;
      20: invokevirtual #33                 // Method java/lang/Long.longValue:()J
      23: invokevirtual #34                 // Method com/amazonaws/services/s3/transfer/TransferManagerConfiguration.setMinimumUploadPartSize:(J)V
      26: aload_0
      27: getfield      #29                 // Field multipartCopyPartSize:Ljava/lang/Long;
      30: ifnull        44
      33: aload_1
      34: aload_0
      35: getfield      #29                 // Field multipartCopyPartSize:Ljava/lang/Long;
      38: invokevirtual #33                 // Method java/lang/Long.longValue:()J
      41: invokevirtual #35                 // Method com/amazonaws/services/s3/transfer/TransferManagerConfiguration.setMultipartCopyPartSize:(J)V
      44: aload_0
      45: getfield      #27                 // Field multipartCopyThreshold:Ljava/lang/Long;
      48: ifnull        62
      51: aload_1
      52: aload_0
      53: getfield      #27                 // Field multipartCopyThreshold:Ljava/lang/Long;
      56: invokevirtual #33                 // Method java/lang/Long.longValue:()J
      59: invokevirtual #36                 // Method com/amazonaws/services/s3/transfer/TransferManagerConfiguration.setMultipartCopyThreshold:(J)V
      62: aload_0
      63: getfield      #25                 // Field multipartUploadThreshold:Ljava/lang/Long;
      66: ifnull        80
      69: aload_1
      70: aload_0
      71: getfield      #25                 // Field multipartUploadThreshold:Ljava/lang/Long;
      74: invokevirtual #33                 // Method java/lang/Long.longValue:()J
      77: invokevirtual #37                 // Method com/amazonaws/services/s3/transfer/TransferManagerConfiguration.setMultipartUploadThreshold:(J)V
      80: aload_1
      81: areturn

  public final com.amazonaws.services.s3.transfer.TransferManager build();
    Code:
       0: aload_0
       1: getfield      #10                 // Field transferManagerFactory:Lcom/amazonaws/internal/SdkFunction;
       4: new           #38                 // class com/amazonaws/services/s3/transfer/TransferManagerParams
       7: dup
       8: invokespecial #39                 // Method com/amazonaws/services/s3/transfer/TransferManagerParams."<init>":()V
      11: aload_0
      12: invokespecial #40                 // Method resolveS3Client:()Lcom/amazonaws/services/s3/AmazonS3;
      15: invokevirtual #41                 // Method com/amazonaws/services/s3/transfer/TransferManagerParams.withS3Client:(Lcom/amazonaws/services/s3/AmazonS3;)Lcom/amazonaws/services/s3/transfer/TransferManagerParams;
      18: aload_0
      19: invokespecial #42                 // Method resolveExecutorService:()Ljava/util/concurrent/ExecutorService;
      22: invokevirtual #43                 // Method com/amazonaws/services/s3/transfer/TransferManagerParams.withExecutorService:(Ljava/util/concurrent/ExecutorService;)Lcom/amazonaws/services/s3/transfer/TransferManagerParams;
      25: aload_0
      26: invokespecial #44                 // Method resolveShutDownThreadPools:()Ljava/lang/Boolean;
      29: invokevirtual #45                 // Method com/amazonaws/services/s3/transfer/TransferManagerParams.withShutDownThreadPools:(Ljava/lang/Boolean;)Lcom/amazonaws/services/s3/transfer/TransferManagerParams;
      32: aload_0
      33: invokespecial #46                 // Method resolveConfiguration:()Lcom/amazonaws/services/s3/transfer/TransferManagerConfiguration;
      36: invokevirtual #47                 // Method com/amazonaws/services/s3/transfer/TransferManagerParams.withTransferManagerConfiguration:(Lcom/amazonaws/services/s3/transfer/TransferManagerConfiguration;)Lcom/amazonaws/services/s3/transfer/TransferManagerParams;
      39: invokeinterface #48,  2           // InterfaceMethod com/amazonaws/internal/SdkFunction.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      44: checkcast     #49                 // class com/amazonaws/services/s3/transfer/TransferManager
      47: areturn

  static {};
    Code:
       0: new           #50                 // class com/amazonaws/services/s3/transfer/TransferManagerBuilder$1
       3: dup
       4: invokespecial #51                 // Method com/amazonaws/services/s3/transfer/TransferManagerBuilder$1."<init>":()V
       7: putstatic     #7                  // Field DEFAULT_TRANSFER_MANAGER_FACTORY:Lcom/amazonaws/internal/SdkFunction;
      10: return
}
