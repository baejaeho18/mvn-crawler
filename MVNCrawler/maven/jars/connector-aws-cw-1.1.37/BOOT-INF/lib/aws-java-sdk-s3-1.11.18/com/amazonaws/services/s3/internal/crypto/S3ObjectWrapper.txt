Compiled from "S3ObjectWrapper.java"
class com.amazonaws.services.s3.internal.crypto.S3ObjectWrapper implements java.io.Closeable {
  private final com.amazonaws.services.s3.model.S3Object s3obj;

  private final com.amazonaws.services.s3.model.S3ObjectId id;

  com.amazonaws.services.s3.internal.crypto.S3ObjectWrapper(com.amazonaws.services.s3.model.S3Object, com.amazonaws.services.s3.model.S3ObjectId);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_1
       5: ifnonnull     16
       8: new           #2                  // class java/lang/IllegalArgumentException
      11: dup
      12: invokespecial #3                  // Method java/lang/IllegalArgumentException."<init>":()V
      15: athrow
      16: aload_0
      17: aload_1
      18: putfield      #4                  // Field s3obj:Lcom/amazonaws/services/s3/model/S3Object;
      21: aload_0
      22: aload_2
      23: putfield      #5                  // Field id:Lcom/amazonaws/services/s3/model/S3ObjectId;
      26: return

  public com.amazonaws.services.s3.model.S3ObjectId getS3ObjectId();
    Code:
       0: aload_0
       1: getfield      #5                  // Field id:Lcom/amazonaws/services/s3/model/S3ObjectId;
       4: areturn

  com.amazonaws.services.s3.model.ObjectMetadata getObjectMetadata();
    Code:
       0: aload_0
       1: getfield      #4                  // Field s3obj:Lcom/amazonaws/services/s3/model/S3Object;
       4: invokevirtual #6                  // Method com/amazonaws/services/s3/model/S3Object.getObjectMetadata:()Lcom/amazonaws/services/s3/model/ObjectMetadata;
       7: areturn

  void setObjectMetadata(com.amazonaws.services.s3.model.ObjectMetadata);
    Code:
       0: aload_0
       1: getfield      #4                  // Field s3obj:Lcom/amazonaws/services/s3/model/S3Object;
       4: aload_1
       5: invokevirtual #7                  // Method com/amazonaws/services/s3/model/S3Object.setObjectMetadata:(Lcom/amazonaws/services/s3/model/ObjectMetadata;)V
       8: return

  com.amazonaws.services.s3.model.S3ObjectInputStream getObjectContent();
    Code:
       0: aload_0
       1: getfield      #4                  // Field s3obj:Lcom/amazonaws/services/s3/model/S3Object;
       4: invokevirtual #8                  // Method com/amazonaws/services/s3/model/S3Object.getObjectContent:()Lcom/amazonaws/services/s3/model/S3ObjectInputStream;
       7: areturn

  void setObjectContent(com.amazonaws.services.s3.model.S3ObjectInputStream);
    Code:
       0: aload_0
       1: getfield      #4                  // Field s3obj:Lcom/amazonaws/services/s3/model/S3Object;
       4: aload_1
       5: invokevirtual #9                  // Method com/amazonaws/services/s3/model/S3Object.setObjectContent:(Lcom/amazonaws/services/s3/model/S3ObjectInputStream;)V
       8: return

  void setObjectContent(java.io.InputStream);
    Code:
       0: aload_0
       1: getfield      #4                  // Field s3obj:Lcom/amazonaws/services/s3/model/S3Object;
       4: aload_1
       5: invokevirtual #10                 // Method com/amazonaws/services/s3/model/S3Object.setObjectContent:(Ljava/io/InputStream;)V
       8: return

  java.lang.String getBucketName();
    Code:
       0: aload_0
       1: getfield      #4                  // Field s3obj:Lcom/amazonaws/services/s3/model/S3Object;
       4: invokevirtual #11                 // Method com/amazonaws/services/s3/model/S3Object.getBucketName:()Ljava/lang/String;
       7: areturn

  void setBucketName(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #4                  // Field s3obj:Lcom/amazonaws/services/s3/model/S3Object;
       4: aload_1
       5: invokevirtual #12                 // Method com/amazonaws/services/s3/model/S3Object.setBucketName:(Ljava/lang/String;)V
       8: return

  java.lang.String getKey();
    Code:
       0: aload_0
       1: getfield      #4                  // Field s3obj:Lcom/amazonaws/services/s3/model/S3Object;
       4: invokevirtual #13                 // Method com/amazonaws/services/s3/model/S3Object.getKey:()Ljava/lang/String;
       7: areturn

  void setKey(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #4                  // Field s3obj:Lcom/amazonaws/services/s3/model/S3Object;
       4: aload_1
       5: invokevirtual #14                 // Method com/amazonaws/services/s3/model/S3Object.setKey:(Ljava/lang/String;)V
       8: return

  java.lang.String getRedirectLocation();
    Code:
       0: aload_0
       1: getfield      #4                  // Field s3obj:Lcom/amazonaws/services/s3/model/S3Object;
       4: invokevirtual #15                 // Method com/amazonaws/services/s3/model/S3Object.getRedirectLocation:()Ljava/lang/String;
       7: areturn

  void setRedirectLocation(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #4                  // Field s3obj:Lcom/amazonaws/services/s3/model/S3Object;
       4: aload_1
       5: invokevirtual #16                 // Method com/amazonaws/services/s3/model/S3Object.setRedirectLocation:(Ljava/lang/String;)V
       8: return

  public java.lang.String toString();
    Code:
       0: aload_0
       1: getfield      #4                  // Field s3obj:Lcom/amazonaws/services/s3/model/S3Object;
       4: invokevirtual #17                 // Method com/amazonaws/services/s3/model/S3Object.toString:()Ljava/lang/String;
       7: areturn

  final boolean isInstructionFile();
    Code:
       0: aload_0
       1: getfield      #4                  // Field s3obj:Lcom/amazonaws/services/s3/model/S3Object;
       4: invokevirtual #6                  // Method com/amazonaws/services/s3/model/S3Object.getObjectMetadata:()Lcom/amazonaws/services/s3/model/ObjectMetadata;
       7: astore_1
       8: aload_1
       9: invokevirtual #18                 // Method com/amazonaws/services/s3/model/ObjectMetadata.getUserMetadata:()Ljava/util/Map;
      12: astore_2
      13: aload_2
      14: ifnull        32
      17: aload_2
      18: ldc           #20                 // String x-amz-crypto-instr-file
      20: invokeinterface #21,  2           // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
      25: ifeq          32
      28: iconst_1
      29: goto          33
      32: iconst_0
      33: ireturn

  final boolean hasEncryptionInfo();
    Code:
       0: aload_0
       1: getfield      #4                  // Field s3obj:Lcom/amazonaws/services/s3/model/S3Object;
       4: invokevirtual #6                  // Method com/amazonaws/services/s3/model/S3Object.getObjectMetadata:()Lcom/amazonaws/services/s3/model/ObjectMetadata;
       7: astore_1
       8: aload_1
       9: invokevirtual #18                 // Method com/amazonaws/services/s3/model/ObjectMetadata.getUserMetadata:()Ljava/util/Map;
      12: astore_2
      13: aload_2
      14: ifnull        54
      17: aload_2
      18: ldc           #22                 // String x-amz-iv
      20: invokeinterface #21,  2           // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
      25: ifeq          54
      28: aload_2
      29: ldc           #23                 // String x-amz-key-v2
      31: invokeinterface #21,  2           // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
      36: ifne          50
      39: aload_2
      40: ldc           #24                 // String x-amz-key
      42: invokeinterface #21,  2           // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
      47: ifeq          54
      50: iconst_1
      51: goto          55
      54: iconst_0
      55: ireturn

  java.lang.String toJsonString();
    Code:
       0: aload_0
       1: getfield      #4                  // Field s3obj:Lcom/amazonaws/services/s3/model/S3Object;
       4: invokevirtual #8                  // Method com/amazonaws/services/s3/model/S3Object.getObjectContent:()Lcom/amazonaws/services/s3/model/S3ObjectInputStream;
       7: invokestatic  #25                 // Method from:(Ljava/io/InputStream;)Ljava/lang/String;
      10: areturn
      11: astore_1
      12: new           #27                 // class com/amazonaws/AmazonClientException
      15: dup
      16: new           #28                 // class java/lang/StringBuilder
      19: dup
      20: invokespecial #29                 // Method java/lang/StringBuilder."<init>":()V
      23: ldc           #30                 // String Error parsing JSON:
      25: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      28: aload_1
      29: invokevirtual #32                 // Method java/lang/Exception.getMessage:()Ljava/lang/String;
      32: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      35: invokevirtual #33                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      38: invokespecial #34                 // Method com/amazonaws/AmazonClientException."<init>":(Ljava/lang/String;)V
      41: athrow
    Exception table:
       from    to  target type
           0    10    11   Class java/lang/Exception

  private static java.lang.String from(java.io.InputStream) throws java.io.IOException;
    Code:
       0: aload_0
       1: ifnonnull     7
       4: ldc           #35                 // String
       6: areturn
       7: new           #28                 // class java/lang/StringBuilder
      10: dup
      11: invokespecial #29                 // Method java/lang/StringBuilder."<init>":()V
      14: astore_1
      15: new           #36                 // class java/io/BufferedReader
      18: dup
      19: new           #37                 // class java/io/InputStreamReader
      22: dup
      23: aload_0
      24: getstatic     #38                 // Field com/amazonaws/util/StringUtils.UTF8:Ljava/nio/charset/Charset;
      27: invokespecial #39                 // Method java/io/InputStreamReader."<init>":(Ljava/io/InputStream;Ljava/nio/charset/Charset;)V
      30: invokespecial #40                 // Method java/io/BufferedReader."<init>":(Ljava/io/Reader;)V
      33: astore_2
      34: aload_2
      35: invokevirtual #41                 // Method java/io/BufferedReader.readLine:()Ljava/lang/String;
      38: dup
      39: astore_3
      40: ifnull        52
      43: aload_1
      44: aload_3
      45: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      48: pop
      49: goto          34
      52: aload_0
      53: invokevirtual #42                 // Method java/io/InputStream.close:()V
      56: goto          68
      59: astore        4
      61: aload_0
      62: invokevirtual #42                 // Method java/io/InputStream.close:()V
      65: aload         4
      67: athrow
      68: aload_1
      69: invokevirtual #33                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      72: areturn
    Exception table:
       from    to  target type
          15    52    59   any
          59    61    59   any

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field s3obj:Lcom/amazonaws/services/s3/model/S3Object;
       4: invokevirtual #43                 // Method com/amazonaws/services/s3/model/S3Object.close:()V
       7: return

  com.amazonaws.services.s3.model.S3Object getS3Object();
    Code:
       0: aload_0
       1: getfield      #4                  // Field s3obj:Lcom/amazonaws/services/s3/model/S3Object;
       4: areturn

  com.amazonaws.services.s3.internal.crypto.ContentCryptoScheme encryptionSchemeOf(java.util.Map<java.lang.String, java.lang.String>);
    Code:
       0: aload_1
       1: ifnull        21
       4: aload_1
       5: ldc           #44                 // String x-amz-cek-alg
       7: invokeinterface #45,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      12: checkcast     #46                 // class java/lang/String
      15: astore_2
      16: aload_2
      17: invokestatic  #47                 // Method com/amazonaws/services/s3/internal/crypto/ContentCryptoScheme.fromCEKAlgo:(Ljava/lang/String;)Lcom/amazonaws/services/s3/internal/crypto/ContentCryptoScheme;
      20: areturn
      21: aload_0
      22: getfield      #4                  // Field s3obj:Lcom/amazonaws/services/s3/model/S3Object;
      25: invokevirtual #6                  // Method com/amazonaws/services/s3/model/S3Object.getObjectMetadata:()Lcom/amazonaws/services/s3/model/ObjectMetadata;
      28: astore_2
      29: aload_2
      30: invokevirtual #18                 // Method com/amazonaws/services/s3/model/ObjectMetadata.getUserMetadata:()Ljava/util/Map;
      33: astore_3
      34: aload_3
      35: ldc           #44                 // String x-amz-cek-alg
      37: invokeinterface #45,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      42: checkcast     #46                 // class java/lang/String
      45: astore        4
      47: aload         4
      49: invokestatic  #47                 // Method com/amazonaws/services/s3/internal/crypto/ContentCryptoScheme.fromCEKAlgo:(Ljava/lang/String;)Lcom/amazonaws/services/s3/internal/crypto/ContentCryptoScheme;
      52: areturn
}
