Compiled from "AWSS3V4Signer.java"
public class com.amazonaws.services.s3.internal.AWSS3V4Signer extends com.amazonaws.auth.AWS4Signer {
  private static final java.lang.String CONTENT_SHA_256;

  private static final java.lang.String UNSIGNED_PAYLOAD;

  public com.amazonaws.services.s3.internal.AWSS3V4Signer();
    Code:
       0: aload_0
       1: iconst_0
       2: invokespecial #2                  // Method com/amazonaws/auth/AWS4Signer."<init>":(Z)V
       5: return

  protected void processRequestPayload(com.amazonaws.SignableRequest<?>, byte[], byte[], com.amazonaws.auth.internal.AWS4SignerRequestParams);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #3                  // Method useChunkEncoding:(Lcom/amazonaws/SignableRequest;)Z
       5: ifeq          47
       8: new           #4                  // class com/amazonaws/auth/AwsChunkedEncodingInputStream
      11: dup
      12: aload_1
      13: invokeinterface #5,  1            // InterfaceMethod com/amazonaws/SignableRequest.getContent:()Ljava/io/InputStream;
      18: aload_3
      19: aload         4
      21: invokevirtual #6                  // Method com/amazonaws/auth/internal/AWS4SignerRequestParams.getFormattedSigningDateTime:()Ljava/lang/String;
      24: aload         4
      26: invokevirtual #7                  // Method com/amazonaws/auth/internal/AWS4SignerRequestParams.getScope:()Ljava/lang/String;
      29: aload_2
      30: invokestatic  #8                  // Method com/amazonaws/util/BinaryUtils.toHex:([B)Ljava/lang/String;
      33: aload_0
      34: invokespecial #9                  // Method com/amazonaws/auth/AwsChunkedEncodingInputStream."<init>":(Ljava/io/InputStream;[BLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/amazonaws/auth/AWS4Signer;)V
      37: astore        5
      39: aload_1
      40: aload         5
      42: invokeinterface #10,  2           // InterfaceMethod com/amazonaws/SignableRequest.setContent:(Ljava/io/InputStream;)V
      47: return

  protected java.lang.String calculateContentHashPresign(com.amazonaws.SignableRequest<?>);
    Code:
       0: ldc           #11                 // String UNSIGNED-PAYLOAD
       2: areturn

  protected java.lang.String calculateContentHash(com.amazonaws.SignableRequest<?>);
    Code:
       0: aload_1
       1: ldc           #12                 // String x-amz-content-sha256
       3: ldc           #13                 // String required
       5: invokeinterface #14,  3           // InterfaceMethod com/amazonaws/SignableRequest.addHeader:(Ljava/lang/String;Ljava/lang/String;)V
      10: aload_0
      11: aload_1
      12: invokespecial #15                 // Method isPayloadSigningEnabled:(Lcom/amazonaws/SignableRequest;)Z
      15: ifeq          113
      18: aload_0
      19: aload_1
      20: invokespecial #3                  // Method useChunkEncoding:(Lcom/amazonaws/SignableRequest;)Z
      23: ifeq          107
      26: aload_1
      27: invokeinterface #16,  1           // InterfaceMethod com/amazonaws/SignableRequest.getHeaders:()Ljava/util/Map;
      32: ldc           #18                 // String Content-Length
      34: invokeinterface #19,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      39: checkcast     #20                 // class java/lang/String
      42: astore_2
      43: aload_2
      44: ifnull        55
      47: aload_2
      48: invokestatic  #21                 // Method java/lang/Long.parseLong:(Ljava/lang/String;)J
      51: lstore_3
      52: goto          77
      55: aload_1
      56: invokestatic  #22                 // Method getContentLength:(Lcom/amazonaws/SignableRequest;)J
      59: lstore_3
      60: goto          77
      63: astore        5
      65: new           #24                 // class com/amazonaws/AmazonClientException
      68: dup
      69: ldc           #25                 // String Cannot get the content-length of the request content.
      71: aload         5
      73: invokespecial #26                 // Method com/amazonaws/AmazonClientException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      76: athrow
      77: aload_1
      78: ldc           #27                 // String x-amz-decoded-content-length
      80: lload_3
      81: invokestatic  #28                 // Method java/lang/Long.toString:(J)Ljava/lang/String;
      84: invokeinterface #14,  3           // InterfaceMethod com/amazonaws/SignableRequest.addHeader:(Ljava/lang/String;Ljava/lang/String;)V
      89: aload_1
      90: ldc           #18                 // String Content-Length
      92: lload_3
      93: invokestatic  #29                 // Method com/amazonaws/auth/AwsChunkedEncodingInputStream.calculateStreamContentLength:(J)J
      96: invokestatic  #28                 // Method java/lang/Long.toString:(J)Ljava/lang/String;
      99: invokeinterface #14,  3           // InterfaceMethod com/amazonaws/SignableRequest.addHeader:(Ljava/lang/String;Ljava/lang/String;)V
     104: ldc           #31                 // String STREAMING-AWS4-HMAC-SHA256-PAYLOAD
     106: areturn
     107: aload_0
     108: aload_1
     109: invokespecial #32                 // Method com/amazonaws/auth/AWS4Signer.calculateContentHash:(Lcom/amazonaws/SignableRequest;)Ljava/lang/String;
     112: areturn
     113: ldc           #11                 // String UNSIGNED-PAYLOAD
     115: areturn
    Exception table:
       from    to  target type
          55    60    63   Class java/io/IOException

  private boolean useChunkEncoding(com.amazonaws.SignableRequest<?>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #15                 // Method isPayloadSigningEnabled:(Lcom/amazonaws/SignableRequest;)Z
       5: ifeq          16
       8: aload_0
       9: aload_1
      10: invokespecial #33                 // Method isChunkedEncodingDisabled:(Lcom/amazonaws/SignableRequest;)Z
      13: ifeq          18
      16: iconst_0
      17: ireturn
      18: aload_1
      19: invokeinterface #34,  1           // InterfaceMethod com/amazonaws/SignableRequest.getOriginalRequestObject:()Ljava/lang/Object;
      24: instanceof    #35                 // class com/amazonaws/services/s3/model/PutObjectRequest
      27: ifne          42
      30: aload_1
      31: invokeinterface #34,  1           // InterfaceMethod com/amazonaws/SignableRequest.getOriginalRequestObject:()Ljava/lang/Object;
      36: instanceof    #36                 // class com/amazonaws/services/s3/model/UploadPartRequest
      39: ifeq          44
      42: iconst_1
      43: ireturn
      44: iconst_0
      45: ireturn

  private boolean isChunkedEncodingDisabled(com.amazonaws.SignableRequest<?>);
    Code:
       0: aload_1
       1: instanceof    #37                 // class com/amazonaws/Request
       4: ifeq          42
       7: aload_1
       8: checkcast     #37                 // class com/amazonaws/Request
      11: astore_2
      12: aload_2
      13: getstatic     #38                 // Field com/amazonaws/services/s3/request/S3HandlerContextKeys.IS_CHUNKED_ENCODING_DISABLED:Lcom/amazonaws/handlers/HandlerContextKey;
      16: invokeinterface #39,  2           // InterfaceMethod com/amazonaws/Request.getHandlerContext:(Lcom/amazonaws/handlers/HandlerContextKey;)Ljava/lang/Object;
      21: checkcast     #40                 // class java/lang/Boolean
      24: astore_3
      25: aload_3
      26: ifnull        40
      29: aload_3
      30: invokevirtual #41                 // Method java/lang/Boolean.booleanValue:()Z
      33: ifeq          40
      36: iconst_1
      37: goto          41
      40: iconst_0
      41: ireturn
      42: iconst_0
      43: ireturn

  private boolean isPayloadSigningEnabled(com.amazonaws.SignableRequest<?>);
    Code:
       0: aload_1
       1: invokeinterface #42,  1           // InterfaceMethod com/amazonaws/SignableRequest.getEndpoint:()Ljava/net/URI;
       6: invokevirtual #43                 // Method java/net/URI.getScheme:()Ljava/lang/String;
       9: ldc           #44                 // String https
      11: invokevirtual #45                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      14: ifne          19
      17: iconst_1
      18: ireturn
      19: aload_1
      20: instanceof    #37                 // class com/amazonaws/Request
      23: ifeq          61
      26: aload_1
      27: checkcast     #37                 // class com/amazonaws/Request
      30: astore_2
      31: aload_2
      32: getstatic     #46                 // Field com/amazonaws/services/s3/request/S3HandlerContextKeys.IS_PAYLOAD_SIGNING_ENABLED:Lcom/amazonaws/handlers/HandlerContextKey;
      35: invokeinterface #39,  2           // InterfaceMethod com/amazonaws/Request.getHandlerContext:(Lcom/amazonaws/handlers/HandlerContextKey;)Ljava/lang/Object;
      40: checkcast     #40                 // class java/lang/Boolean
      43: astore_3
      44: aload_3
      45: ifnull        59
      48: aload_3
      49: invokevirtual #41                 // Method java/lang/Boolean.booleanValue:()Z
      52: ifeq          59
      55: iconst_1
      56: goto          60
      59: iconst_0
      60: ireturn
      61: iconst_0
      62: ireturn

  static long getContentLength(com.amazonaws.SignableRequest<?>) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokeinterface #5,  1            // InterfaceMethod com/amazonaws/SignableRequest.getContent:()Ljava/io/InputStream;
       6: astore_1
       7: aload_1
       8: invokevirtual #47                 // Method java/io/InputStream.markSupported:()Z
      11: ifne          24
      14: new           #48                 // class java/lang/IllegalStateException
      17: dup
      18: ldc           #49                 // String Bug: request input stream must have been made mark-and-resettable at this point
      20: invokespecial #50                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      23: athrow
      24: aload_0
      25: invokeinterface #51,  1           // InterfaceMethod com/amazonaws/SignableRequest.getReadLimitInfo:()Lcom/amazonaws/ReadLimitInfo;
      30: astore_2
      31: aload_2
      32: invokeinterface #52,  1           // InterfaceMethod com/amazonaws/ReadLimitInfo.getReadLimit:()I
      37: istore_3
      38: lconst_0
      39: lstore        4
      41: sipush        4096
      44: newarray       byte
      46: astore        6
      48: aload_1
      49: iload_3
      50: invokevirtual #53                 // Method java/io/InputStream.mark:(I)V
      53: aload_1
      54: aload         6
      56: invokevirtual #54                 // Method java/io/InputStream.read:([B)I
      59: dup
      60: istore        7
      62: iconst_m1
      63: if_icmpeq     77
      66: lload         4
      68: iload         7
      70: i2l
      71: ladd
      72: lstore        4
      74: goto          53
      77: aload_1
      78: invokevirtual #55                 // Method java/io/InputStream.reset:()V
      81: goto          98
      84: astore        8
      86: new           #56                 // class com/amazonaws/ResetException
      89: dup
      90: ldc           #57                 // String Failed to reset the input stream
      92: aload         8
      94: invokespecial #58                 // Method com/amazonaws/ResetException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      97: athrow
      98: lload         4
     100: lreturn
    Exception table:
       from    to  target type
          77    81    84   Class java/io/IOException
}
