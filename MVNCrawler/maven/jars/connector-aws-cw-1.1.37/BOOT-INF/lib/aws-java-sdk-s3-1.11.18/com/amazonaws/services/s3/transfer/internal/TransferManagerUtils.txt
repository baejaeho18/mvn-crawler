Compiled from "TransferManagerUtils.java"
public class com.amazonaws.services.s3.transfer.internal.TransferManagerUtils {
  public com.amazonaws.services.s3.transfer.internal.TransferManagerUtils();
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: return

  public static java.util.concurrent.ThreadPoolExecutor createDefaultExecutorService();
    Code:
       0: new           #3                  // class com/amazonaws/services/s3/transfer/internal/TransferManagerUtils$1
       3: dup
       4: invokespecial #4                  // Method com/amazonaws/services/s3/transfer/internal/TransferManagerUtils$1."<init>":()V
       7: astore_0
       8: bipush        10
      10: aload_0
      11: invokestatic  #5                  // Method java/util/concurrent/Executors.newFixedThreadPool:(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;
      14: checkcast     #6                  // class java/util/concurrent/ThreadPoolExecutor
      17: areturn

  public static boolean isUploadParallelizable(com.amazonaws.services.s3.model.PutObjectRequest, boolean);
    Code:
       0: iload_1
       1: ifeq          6
       4: iconst_0
       5: ireturn
       6: aload_0
       7: invokestatic  #7                  // Method getRequestFile:(Lcom/amazonaws/services/s3/model/PutObjectRequest;)Ljava/io/File;
      10: ifnull        17
      13: iconst_1
      14: goto          18
      17: iconst_0
      18: ireturn

  public static long getContentLength(com.amazonaws.services.s3.model.PutObjectRequest);
    Code:
       0: aload_0
       1: invokestatic  #7                  // Method getRequestFile:(Lcom/amazonaws/services/s3/model/PutObjectRequest;)Ljava/io/File;
       4: astore_1
       5: aload_1
       6: ifnull        14
       9: aload_1
      10: invokevirtual #8                  // Method java/io/File.length:()J
      13: lreturn
      14: aload_0
      15: invokevirtual #9                  // Method com/amazonaws/services/s3/model/PutObjectRequest.getInputStream:()Ljava/io/InputStream;
      18: ifnull        41
      21: aload_0
      22: invokevirtual #10                 // Method com/amazonaws/services/s3/model/PutObjectRequest.getMetadata:()Lcom/amazonaws/services/s3/model/ObjectMetadata;
      25: invokevirtual #11                 // Method com/amazonaws/services/s3/model/ObjectMetadata.getContentLength:()J
      28: lconst_0
      29: lcmp
      30: ifle          41
      33: aload_0
      34: invokevirtual #10                 // Method com/amazonaws/services/s3/model/PutObjectRequest.getMetadata:()Lcom/amazonaws/services/s3/model/ObjectMetadata;
      37: invokevirtual #11                 // Method com/amazonaws/services/s3/model/ObjectMetadata.getContentLength:()J
      40: lreturn
      41: ldc2_w        #12                 // long -1l
      44: lreturn

  public static long calculateOptimalPartSize(com.amazonaws.services.s3.model.PutObjectRequest, com.amazonaws.services.s3.transfer.TransferManagerConfiguration);
    Code:
       0: aload_0
       1: invokestatic  #14                 // Method getContentLength:(Lcom/amazonaws/services/s3/model/PutObjectRequest;)J
       4: l2d
       5: dstore_2
       6: dload_2
       7: ldc2_w        #15                 // double 10000.0d
      10: ddiv
      11: dstore        4
      13: dload         4
      15: invokestatic  #17                 // Method java/lang/Math.ceil:(D)D
      18: dstore        4
      20: dload         4
      22: aload_1
      23: invokevirtual #18                 // Method com/amazonaws/services/s3/transfer/TransferManagerConfiguration.getMinimumUploadPartSize:()J
      26: l2d
      27: invokestatic  #19                 // Method java/lang/Math.max:(DD)D
      30: d2l
      31: lreturn

  public static boolean shouldUseMultipartUpload(com.amazonaws.services.s3.model.PutObjectRequest, com.amazonaws.services.s3.transfer.TransferManagerConfiguration);
    Code:
       0: aload_0
       1: invokestatic  #14                 // Method getContentLength:(Lcom/amazonaws/services/s3/model/PutObjectRequest;)J
       4: lstore_2
       5: lload_2
       6: aload_1
       7: invokevirtual #20                 // Method com/amazonaws/services/s3/transfer/TransferManagerConfiguration.getMultipartUploadThreshold:()J
      10: lcmp
      11: ifle          18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: ireturn

  public static java.io.File getRequestFile(com.amazonaws.services.s3.model.PutObjectRequest);
    Code:
       0: aload_0
       1: invokevirtual #21                 // Method com/amazonaws/services/s3/model/PutObjectRequest.getFile:()Ljava/io/File;
       4: ifnull        12
       7: aload_0
       8: invokevirtual #21                 // Method com/amazonaws/services/s3/model/PutObjectRequest.getFile:()Ljava/io/File;
      11: areturn
      12: aconst_null
      13: areturn

  public static long calculateOptimalPartSizeForCopy(com.amazonaws.services.s3.model.CopyObjectRequest, com.amazonaws.services.s3.transfer.TransferManagerConfiguration, long);
    Code:
       0: lload_2
       1: l2d
       2: ldc2_w        #15                 // double 10000.0d
       5: ddiv
       6: dstore        4
       8: dload         4
      10: invokestatic  #17                 // Method java/lang/Math.ceil:(D)D
      13: dstore        4
      15: dload         4
      17: aload_1
      18: invokevirtual #22                 // Method com/amazonaws/services/s3/transfer/TransferManagerConfiguration.getMultipartCopyPartSize:()J
      21: l2d
      22: invokestatic  #19                 // Method java/lang/Math.max:(DD)D
      25: d2l
      26: lreturn

  public static com.amazonaws.services.s3.transfer.PauseStatus determinePauseStatus(com.amazonaws.services.s3.transfer.Transfer$TransferState, boolean);
    Code:
       0: iload_1
       1: ifeq          26
       4: aload_0
       5: getstatic     #23                 // Field com/amazonaws/services/s3/transfer/Transfer$TransferState.Waiting:Lcom/amazonaws/services/s3/transfer/Transfer$TransferState;
       8: if_acmpne     15
      11: getstatic     #24                 // Field com/amazonaws/services/s3/transfer/PauseStatus.CANCELLED_BEFORE_START:Lcom/amazonaws/services/s3/transfer/PauseStatus;
      14: areturn
      15: aload_0
      16: getstatic     #25                 // Field com/amazonaws/services/s3/transfer/Transfer$TransferState.InProgress:Lcom/amazonaws/services/s3/transfer/Transfer$TransferState;
      19: if_acmpne     26
      22: getstatic     #26                 // Field com/amazonaws/services/s3/transfer/PauseStatus.CANCELLED:Lcom/amazonaws/services/s3/transfer/PauseStatus;
      25: areturn
      26: aload_0
      27: getstatic     #23                 // Field com/amazonaws/services/s3/transfer/Transfer$TransferState.Waiting:Lcom/amazonaws/services/s3/transfer/Transfer$TransferState;
      30: if_acmpne     37
      33: getstatic     #27                 // Field com/amazonaws/services/s3/transfer/PauseStatus.NOT_STARTED:Lcom/amazonaws/services/s3/transfer/PauseStatus;
      36: areturn
      37: getstatic     #28                 // Field com/amazonaws/services/s3/transfer/PauseStatus.NO_EFFECT:Lcom/amazonaws/services/s3/transfer/PauseStatus;
      40: areturn

  public static boolean isDownloadParallelizable(com.amazonaws.services.s3.AmazonS3, com.amazonaws.services.s3.model.GetObjectRequest, java.lang.Integer);
    Code:
       0: aload_0
       1: ldc           #29                 // String S3 client
       3: invokestatic  #30                 // Method com/amazonaws/util/ValidationUtils.assertNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_1
       8: ldc           #31                 // String GetObjectRequest
      10: invokestatic  #30                 // Method com/amazonaws/util/ValidationUtils.assertNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      13: pop
      14: aload_0
      15: instanceof    #32                 // class com/amazonaws/services/s3/AmazonS3Encryption
      18: ifne          39
      21: aload_1
      22: invokevirtual #33                 // Method com/amazonaws/services/s3/model/GetObjectRequest.getRange:()[J
      25: ifnonnull     39
      28: aload_1
      29: invokevirtual #34                 // Method com/amazonaws/services/s3/model/GetObjectRequest.getPartNumber:()Ljava/lang/Integer;
      32: ifnonnull     39
      35: aload_2
      36: ifnonnull     41
      39: iconst_0
      40: ireturn
      41: iconst_1
      42: ireturn
}
