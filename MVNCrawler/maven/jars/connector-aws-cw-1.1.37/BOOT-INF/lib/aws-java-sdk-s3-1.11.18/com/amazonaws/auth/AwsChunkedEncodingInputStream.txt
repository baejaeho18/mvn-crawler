Compiled from "AwsChunkedEncodingInputStream.java"
public final class com.amazonaws.auth.AwsChunkedEncodingInputStream extends com.amazonaws.internal.SdkInputStream {
  protected static final java.lang.String DEFAULT_ENCODING;

  private static final int DEFAULT_CHUNK_SIZE;

  private static final int DEFAULT_BUFFER_SIZE;

  private static final java.lang.String CRLF;

  private static final java.lang.String CHUNK_STRING_TO_SIGN_PREFIX;

  private static final java.lang.String CHUNK_SIGNATURE_HEADER;

  private static final int SIGNATURE_LENGTH;

  private static final byte[] FINAL_CHUNK;

  private java.io.InputStream is;

  private final int maxBufferSize;

  private final java.lang.String dateTime;

  private final java.lang.String keyPath;

  private final java.lang.String headerSignature;

  private java.lang.String priorChunkSignature;

  private final com.amazonaws.auth.AWS4Signer aws4Signer;

  private final java.security.MessageDigest sha256;

  private final javax.crypto.Mac hmacSha256;

  private com.amazonaws.auth.ChunkContentIterator currentChunkIterator;

  private com.amazonaws.auth.DecodedStreamBuffer decodedStreamBuffer;

  private boolean isAtStart;

  private boolean isTerminating;

  private static final org.apache.commons.logging.Log log;

  public com.amazonaws.auth.AwsChunkedEncodingInputStream(java.io.InputStream, byte[], java.lang.String, java.lang.String, java.lang.String, com.amazonaws.auth.AWS4Signer);
    Code:
       0: aload_0
       1: aload_1
       2: ldc           #2                  // int 262144
       4: aload_2
       5: aload_3
       6: aload         4
       8: aload         5
      10: aload         6
      12: invokespecial #3                  // Method "<init>":(Ljava/io/InputStream;I[BLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/amazonaws/auth/AWS4Signer;)V
      15: return

  public com.amazonaws.auth.AwsChunkedEncodingInputStream(java.io.InputStream, int, byte[], java.lang.String, java.lang.String, java.lang.String, com.amazonaws.auth.AWS4Signer);
    Code:
       0: aload_0
       1: invokespecial #4                  // Method com/amazonaws/internal/SdkInputStream."<init>":()V
       4: aload_0
       5: aconst_null
       6: putfield      #5                  // Field is:Ljava/io/InputStream;
       9: aload_0
      10: iconst_1
      11: putfield      #6                  // Field isAtStart:Z
      14: aload_0
      15: iconst_0
      16: putfield      #7                  // Field isTerminating:Z
      19: aload_1
      20: instanceof    #1                  // class com/amazonaws/auth/AwsChunkedEncodingInputStream
      23: ifeq          63
      26: aload_1
      27: checkcast     #1                  // class com/amazonaws/auth/AwsChunkedEncodingInputStream
      30: astore        8
      32: aload         8
      34: getfield      #8                  // Field maxBufferSize:I
      37: iload_2
      38: invokestatic  #9                  // Method java/lang/Math.max:(II)I
      41: istore_2
      42: aload_0
      43: aload         8
      45: getfield      #5                  // Field is:Ljava/io/InputStream;
      48: putfield      #5                  // Field is:Ljava/io/InputStream;
      51: aload_0
      52: aload         8
      54: getfield      #10                 // Field decodedStreamBuffer:Lcom/amazonaws/auth/DecodedStreamBuffer;
      57: putfield      #10                 // Field decodedStreamBuffer:Lcom/amazonaws/auth/DecodedStreamBuffer;
      60: goto          73
      63: aload_0
      64: aload_1
      65: putfield      #5                  // Field is:Ljava/io/InputStream;
      68: aload_0
      69: aconst_null
      70: putfield      #10                 // Field decodedStreamBuffer:Lcom/amazonaws/auth/DecodedStreamBuffer;
      73: iload_2
      74: ldc           #11                 // int 131072
      76: if_icmpge     89
      79: new           #12                 // class java/lang/IllegalArgumentException
      82: dup
      83: ldc           #13                 // String Max buffer size should not be less than chunk size
      85: invokespecial #14                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      88: athrow
      89: aload_0
      90: ldc           #15                 // String SHA-256
      92: invokestatic  #16                 // Method java/security/MessageDigest.getInstance:(Ljava/lang/String;)Ljava/security/MessageDigest;
      95: putfield      #17                 // Field sha256:Ljava/security/MessageDigest;
      98: getstatic     #18                 // Field com/amazonaws/auth/SigningAlgorithm.HmacSHA256:Lcom/amazonaws/auth/SigningAlgorithm;
     101: invokevirtual #19                 // Method com/amazonaws/auth/SigningAlgorithm.toString:()Ljava/lang/String;
     104: astore        8
     106: aload_0
     107: aload         8
     109: invokestatic  #20                 // Method javax/crypto/Mac.getInstance:(Ljava/lang/String;)Ljavax/crypto/Mac;
     112: putfield      #21                 // Field hmacSha256:Ljavax/crypto/Mac;
     115: aload_0
     116: getfield      #21                 // Field hmacSha256:Ljavax/crypto/Mac;
     119: new           #22                 // class javax/crypto/spec/SecretKeySpec
     122: dup
     123: aload_3
     124: aload         8
     126: invokespecial #23                 // Method javax/crypto/spec/SecretKeySpec."<init>":([BLjava/lang/String;)V
     129: invokevirtual #24                 // Method javax/crypto/Mac.init:(Ljava/security/Key;)V
     132: goto          159
     135: astore        8
     137: new           #26                 // class java/lang/IllegalStateException
     140: dup
     141: aload         8
     143: invokespecial #27                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/Throwable;)V
     146: athrow
     147: astore        8
     149: new           #12                 // class java/lang/IllegalArgumentException
     152: dup
     153: aload         8
     155: invokespecial #29                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/Throwable;)V
     158: athrow
     159: aload_0
     160: iload_2
     161: putfield      #8                  // Field maxBufferSize:I
     164: aload_0
     165: aload         4
     167: putfield      #30                 // Field dateTime:Ljava/lang/String;
     170: aload_0
     171: aload         5
     173: putfield      #31                 // Field keyPath:Ljava/lang/String;
     176: aload_0
     177: aload         6
     179: putfield      #32                 // Field headerSignature:Ljava/lang/String;
     182: aload_0
     183: aload         6
     185: putfield      #33                 // Field priorChunkSignature:Ljava/lang/String;
     188: aload_0
     189: aload         7
     191: putfield      #34                 // Field aws4Signer:Lcom/amazonaws/auth/AWS4Signer;
     194: return
    Exception table:
       from    to  target type
          89   132   135   Class java/security/NoSuchAlgorithmException
          89   132   147   Class java/security/InvalidKeyException

  public int read() throws java.io.IOException;
    Code:
       0: iconst_1
       1: newarray       byte
       3: astore_1
       4: aload_0
       5: aload_1
       6: iconst_0
       7: iconst_1
       8: invokevirtual #35                 // Method read:([BII)I
      11: istore_2
      12: iload_2
      13: iconst_m1
      14: if_icmpeq     48
      17: getstatic     #36                 // Field log:Lorg/apache/commons/logging/Log;
      20: invokeinterface #37,  1           // InterfaceMethod org/apache/commons/logging/Log.isDebugEnabled:()Z
      25: ifeq          38
      28: getstatic     #36                 // Field log:Lorg/apache/commons/logging/Log;
      31: ldc           #38                 // String One byte read from the stream.
      33: invokeinterface #39,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      38: aload_1
      39: iconst_0
      40: baload
      41: sipush        255
      44: iand
      45: istore_3
      46: iload_3
      47: ireturn
      48: iload_2
      49: ireturn

  public int read(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #40                 // Method abortIfNeeded:()V
       4: aload_1
       5: ifnonnull     16
       8: new           #41                 // class java/lang/NullPointerException
      11: dup
      12: invokespecial #42                 // Method java/lang/NullPointerException."<init>":()V
      15: athrow
      16: iload_2
      17: iflt          32
      20: iload_3
      21: iflt          32
      24: iload_3
      25: aload_1
      26: arraylength
      27: iload_2
      28: isub
      29: if_icmple     40
      32: new           #43                 // class java/lang/IndexOutOfBoundsException
      35: dup
      36: invokespecial #44                 // Method java/lang/IndexOutOfBoundsException."<init>":()V
      39: athrow
      40: iload_3
      41: ifne          46
      44: iconst_0
      45: ireturn
      46: aconst_null
      47: aload_0
      48: getfield      #45                 // Field currentChunkIterator:Lcom/amazonaws/auth/ChunkContentIterator;
      51: if_acmpeq     64
      54: aload_0
      55: getfield      #45                 // Field currentChunkIterator:Lcom/amazonaws/auth/ChunkContentIterator;
      58: invokevirtual #46                 // Method com/amazonaws/auth/ChunkContentIterator.hasNext:()Z
      61: ifne          81
      64: aload_0
      65: getfield      #7                  // Field isTerminating:Z
      68: ifeq          73
      71: iconst_m1
      72: ireturn
      73: aload_0
      74: aload_0
      75: invokespecial #47                 // Method setUpNextChunk:()Z
      78: putfield      #7                  // Field isTerminating:Z
      81: aload_0
      82: getfield      #45                 // Field currentChunkIterator:Lcom/amazonaws/auth/ChunkContentIterator;
      85: aload_1
      86: iload_2
      87: iload_3
      88: invokevirtual #48                 // Method com/amazonaws/auth/ChunkContentIterator.read:([BII)I
      91: istore        4
      93: iload         4
      95: ifle          142
      98: aload_0
      99: iconst_0
     100: putfield      #6                  // Field isAtStart:Z
     103: getstatic     #36                 // Field log:Lorg/apache/commons/logging/Log;
     106: invokeinterface #49,  1           // InterfaceMethod org/apache/commons/logging/Log.isTraceEnabled:()Z
     111: ifeq          142
     114: getstatic     #36                 // Field log:Lorg/apache/commons/logging/Log;
     117: new           #50                 // class java/lang/StringBuilder
     120: dup
     121: invokespecial #51                 // Method java/lang/StringBuilder."<init>":()V
     124: iload         4
     126: invokevirtual #52                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     129: ldc           #53                 // String  byte read from the stream.
     131: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     134: invokevirtual #55                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     137: invokeinterface #56,  2           // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
     142: iload         4
     144: ireturn

  public long skip(long) throws java.io.IOException;
    Code:
       0: lload_1
       1: lconst_0
       2: lcmp
       3: ifgt          8
       6: lconst_0
       7: lreturn
       8: lload_1
       9: lstore_3
      10: ldc2_w        #57                 // long 262144l
      13: lload_1
      14: invokestatic  #59                 // Method java/lang/Math.min:(JJ)J
      17: l2i
      18: istore        5
      20: iload         5
      22: newarray       byte
      24: astore        6
      26: lload_3
      27: lconst_0
      28: lcmp
      29: ifle          59
      32: aload_0
      33: aload         6
      35: iconst_0
      36: iload         5
      38: invokevirtual #35                 // Method read:([BII)I
      41: dup
      42: istore        7
      44: ifge          50
      47: goto          59
      50: lload_3
      51: iload         7
      53: i2l
      54: lsub
      55: lstore_3
      56: goto          26
      59: lload_1
      60: lload_3
      61: lsub
      62: lreturn

  public boolean markSupported();
    Code:
       0: iconst_1
       1: ireturn

  public void mark(int);
    Code:
       0: aload_0
       1: invokevirtual #40                 // Method abortIfNeeded:()V
       4: aload_0
       5: getfield      #6                  // Field isAtStart:Z
       8: ifne          21
      11: new           #60                 // class java/lang/UnsupportedOperationException
      14: dup
      15: ldc           #61                 // String Chunk-encoded stream only supports mark() at the start of the stream.
      17: invokespecial #62                 // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
      20: athrow
      21: aload_0
      22: getfield      #5                  // Field is:Ljava/io/InputStream;
      25: invokevirtual #63                 // Method java/io/InputStream.markSupported:()Z
      28: ifeq          63
      31: getstatic     #36                 // Field log:Lorg/apache/commons/logging/Log;
      34: invokeinterface #37,  1           // InterfaceMethod org/apache/commons/logging/Log.isDebugEnabled:()Z
      39: ifeq          52
      42: getstatic     #36                 // Field log:Lorg/apache/commons/logging/Log;
      45: ldc           #64                 // String AwsChunkedEncodingInputStream marked at the start of the stream (will directly mark the wrapped stream since it\'s mark-supported).
      47: invokeinterface #39,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      52: aload_0
      53: getfield      #5                  // Field is:Ljava/io/InputStream;
      56: iload_1
      57: invokevirtual #65                 // Method java/io/InputStream.mark:(I)V
      60: goto          99
      63: getstatic     #36                 // Field log:Lorg/apache/commons/logging/Log;
      66: invokeinterface #37,  1           // InterfaceMethod org/apache/commons/logging/Log.isDebugEnabled:()Z
      71: ifeq          84
      74: getstatic     #36                 // Field log:Lorg/apache/commons/logging/Log;
      77: ldc           #66                 // String AwsChunkedEncodingInputStream marked at the start of the stream (initializing the buffer since the wrapped stream is not mark-supported).
      79: invokeinterface #39,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      84: aload_0
      85: new           #67                 // class com/amazonaws/auth/DecodedStreamBuffer
      88: dup
      89: aload_0
      90: getfield      #8                  // Field maxBufferSize:I
      93: invokespecial #68                 // Method com/amazonaws/auth/DecodedStreamBuffer."<init>":(I)V
      96: putfield      #10                 // Field decodedStreamBuffer:Lcom/amazonaws/auth/DecodedStreamBuffer;
      99: return

  public void reset() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #40                 // Method abortIfNeeded:()V
       4: aload_0
       5: aconst_null
       6: putfield      #45                 // Field currentChunkIterator:Lcom/amazonaws/auth/ChunkContentIterator;
       9: aload_0
      10: aload_0
      11: getfield      #32                 // Field headerSignature:Ljava/lang/String;
      14: putfield      #33                 // Field priorChunkSignature:Ljava/lang/String;
      17: aload_0
      18: getfield      #5                  // Field is:Ljava/io/InputStream;
      21: invokevirtual #63                 // Method java/io/InputStream.markSupported:()Z
      24: ifeq          58
      27: getstatic     #36                 // Field log:Lorg/apache/commons/logging/Log;
      30: invokeinterface #37,  1           // InterfaceMethod org/apache/commons/logging/Log.isDebugEnabled:()Z
      35: ifeq          48
      38: getstatic     #36                 // Field log:Lorg/apache/commons/logging/Log;
      41: ldc           #69                 // String AwsChunkedEncodingInputStream reset (will reset the wrapped stream because it is mark-supported).
      43: invokeinterface #39,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      48: aload_0
      49: getfield      #5                  // Field is:Ljava/io/InputStream;
      52: invokevirtual #70                 // Method java/io/InputStream.reset:()V
      55: goto          104
      58: getstatic     #36                 // Field log:Lorg/apache/commons/logging/Log;
      61: invokeinterface #37,  1           // InterfaceMethod org/apache/commons/logging/Log.isDebugEnabled:()Z
      66: ifeq          79
      69: getstatic     #36                 // Field log:Lorg/apache/commons/logging/Log;
      72: ldc           #71                 // String AwsChunkedEncodingInputStream reset (will use the buffer of the decoded stream).
      74: invokeinterface #39,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      79: aconst_null
      80: aload_0
      81: getfield      #10                 // Field decodedStreamBuffer:Lcom/amazonaws/auth/DecodedStreamBuffer;
      84: if_acmpne     97
      87: new           #72                 // class java/io/IOException
      90: dup
      91: ldc           #73                 // String Cannot reset the stream because the mark is not set.
      93: invokespecial #74                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      96: athrow
      97: aload_0
      98: getfield      #10                 // Field decodedStreamBuffer:Lcom/amazonaws/auth/DecodedStreamBuffer;
     101: invokevirtual #75                 // Method com/amazonaws/auth/DecodedStreamBuffer.startReadBuffer:()V
     104: aload_0
     105: aconst_null
     106: putfield      #45                 // Field currentChunkIterator:Lcom/amazonaws/auth/ChunkContentIterator;
     109: aload_0
     110: iconst_1
     111: putfield      #6                  // Field isAtStart:Z
     114: aload_0
     115: iconst_0
     116: putfield      #7                  // Field isTerminating:Z
     119: return

  public static long calculateStreamContentLength(long);
    Code:
       0: lload_0
       1: lconst_0
       2: lcmp
       3: ifge          16
       6: new           #12                 // class java/lang/IllegalArgumentException
       9: dup
      10: ldc           #76                 // String Nonnegative content length expected.
      12: invokespecial #14                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      15: athrow
      16: lload_0
      17: ldc2_w        #77                 // long 131072l
      20: ldiv
      21: lstore_2
      22: lload_0
      23: ldc2_w        #77                 // long 131072l
      26: lrem
      27: lstore        4
      29: lload_2
      30: ldc2_w        #77                 // long 131072l
      33: invokestatic  #79                 // Method calculateSignedChunkLength:(J)J
      36: lmul
      37: lload         4
      39: lconst_0
      40: lcmp
      41: ifle          52
      44: lload         4
      46: invokestatic  #79                 // Method calculateSignedChunkLength:(J)J
      49: goto          53
      52: lconst_0
      53: ladd
      54: lconst_0
      55: invokestatic  #79                 // Method calculateSignedChunkLength:(J)J
      58: ladd
      59: lreturn

  private static long calculateSignedChunkLength(long);
    Code:
       0: lload_0
       1: invokestatic  #80                 // Method java/lang/Long.toHexString:(J)Ljava/lang/String;
       4: invokevirtual #81                 // Method java/lang/String.length:()I
       7: ldc           #82                 // String ;chunk-signature=
       9: invokevirtual #81                 // Method java/lang/String.length:()I
      12: iadd
      13: bipush        64
      15: iadd
      16: ldc           #83                 // String \r\n
      18: invokevirtual #81                 // Method java/lang/String.length:()I
      21: iadd
      22: i2l
      23: lload_0
      24: ladd
      25: ldc           #83                 // String \r\n
      27: invokevirtual #81                 // Method java/lang/String.length:()I
      30: i2l
      31: ladd
      32: lreturn

  private boolean setUpNextChunk() throws java.io.IOException;
    Code:
       0: ldc           #11                 // int 131072
       2: newarray       byte
       4: astore_1
       5: iconst_0
       6: istore_2
       7: iload_2
       8: ldc           #11                 // int 131072
      10: if_icmpge     97
      13: aconst_null
      14: aload_0
      15: getfield      #10                 // Field decodedStreamBuffer:Lcom/amazonaws/auth/DecodedStreamBuffer;
      18: if_acmpeq     47
      21: aload_0
      22: getfield      #10                 // Field decodedStreamBuffer:Lcom/amazonaws/auth/DecodedStreamBuffer;
      25: invokevirtual #84                 // Method com/amazonaws/auth/DecodedStreamBuffer.hasNext:()Z
      28: ifeq          47
      31: aload_1
      32: iload_2
      33: iinc          2, 1
      36: aload_0
      37: getfield      #10                 // Field decodedStreamBuffer:Lcom/amazonaws/auth/DecodedStreamBuffer;
      40: invokevirtual #85                 // Method com/amazonaws/auth/DecodedStreamBuffer.next:()B
      43: bastore
      44: goto          7
      47: ldc           #11                 // int 131072
      49: iload_2
      50: isub
      51: istore_3
      52: aload_0
      53: getfield      #5                  // Field is:Ljava/io/InputStream;
      56: aload_1
      57: iload_2
      58: iload_3
      59: invokevirtual #86                 // Method java/io/InputStream.read:([BII)I
      62: istore        4
      64: iload         4
      66: iconst_m1
      67: if_icmpeq     97
      70: aconst_null
      71: aload_0
      72: getfield      #10                 // Field decodedStreamBuffer:Lcom/amazonaws/auth/DecodedStreamBuffer;
      75: if_acmpeq     89
      78: aload_0
      79: getfield      #10                 // Field decodedStreamBuffer:Lcom/amazonaws/auth/DecodedStreamBuffer;
      82: aload_1
      83: iload_2
      84: iload         4
      86: invokevirtual #87                 // Method com/amazonaws/auth/DecodedStreamBuffer.buffer:([BII)V
      89: iload_2
      90: iload         4
      92: iadd
      93: istore_2
      94: goto          7
      97: iload_2
      98: ifne          123
     101: aload_0
     102: getstatic     #88                 // Field FINAL_CHUNK:[B
     105: invokespecial #89                 // Method createSignedChunk:([B)[B
     108: astore_3
     109: aload_0
     110: new           #90                 // class com/amazonaws/auth/ChunkContentIterator
     113: dup
     114: aload_3
     115: invokespecial #91                 // Method com/amazonaws/auth/ChunkContentIterator."<init>":([B)V
     118: putfield      #45                 // Field currentChunkIterator:Lcom/amazonaws/auth/ChunkContentIterator;
     121: iconst_1
     122: ireturn
     123: iload_2
     124: aload_1
     125: arraylength
     126: if_icmpge     135
     129: aload_1
     130: iload_2
     131: invokestatic  #92                 // Method java/util/Arrays.copyOf:([BI)[B
     134: astore_1
     135: aload_0
     136: aload_1
     137: invokespecial #89                 // Method createSignedChunk:([B)[B
     140: astore_3
     141: aload_0
     142: new           #90                 // class com/amazonaws/auth/ChunkContentIterator
     145: dup
     146: aload_3
     147: invokespecial #91                 // Method com/amazonaws/auth/ChunkContentIterator."<init>":([B)V
     150: putfield      #45                 // Field currentChunkIterator:Lcom/amazonaws/auth/ChunkContentIterator;
     153: iconst_0
     154: ireturn

  private byte[] createSignedChunk(byte[]);
    Code:
       0: new           #50                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #51                 // Method java/lang/StringBuilder."<init>":()V
       7: astore_2
       8: aload_2
       9: aload_1
      10: arraylength
      11: invokestatic  #93                 // Method java/lang/Integer.toHexString:(I)Ljava/lang/String;
      14: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      17: pop
      18: new           #50                 // class java/lang/StringBuilder
      21: dup
      22: invokespecial #51                 // Method java/lang/StringBuilder."<init>":()V
      25: ldc           #94                 // String AWS4-HMAC-SHA256-PAYLOAD\n
      27: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      30: aload_0
      31: getfield      #30                 // Field dateTime:Ljava/lang/String;
      34: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      37: ldc           #95                 // String \n
      39: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      42: aload_0
      43: getfield      #31                 // Field keyPath:Ljava/lang/String;
      46: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      49: ldc           #95                 // String \n
      51: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      54: aload_0
      55: getfield      #33                 // Field priorChunkSignature:Ljava/lang/String;
      58: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      61: ldc           #95                 // String \n
      63: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      66: getstatic     #96                 // Field com/amazonaws/auth/AbstractAWSSigner.EMPTY_STRING_SHA256_HEX:Ljava/lang/String;
      69: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      72: ldc           #95                 // String \n
      74: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      77: aload_0
      78: getfield      #17                 // Field sha256:Ljava/security/MessageDigest;
      81: aload_1
      82: invokevirtual #97                 // Method java/security/MessageDigest.digest:([B)[B
      85: invokestatic  #98                 // Method com/amazonaws/util/BinaryUtils.toHex:([B)Ljava/lang/String;
      88: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      91: invokevirtual #55                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      94: astore_3
      95: aload_0
      96: getfield      #34                 // Field aws4Signer:Lcom/amazonaws/auth/AWS4Signer;
      99: aload_3
     100: aload_0
     101: getfield      #21                 // Field hmacSha256:Ljavax/crypto/Mac;
     104: invokevirtual #99                 // Method com/amazonaws/auth/AWS4Signer.signWithMac:(Ljava/lang/String;Ljavax/crypto/Mac;)[B
     107: invokestatic  #98                 // Method com/amazonaws/util/BinaryUtils.toHex:([B)Ljava/lang/String;
     110: astore        4
     112: aload_0
     113: aload         4
     115: putfield      #33                 // Field priorChunkSignature:Ljava/lang/String;
     118: aload_2
     119: ldc           #82                 // String ;chunk-signature=
     121: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     124: aload         4
     126: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     129: ldc           #83                 // String \r\n
     131: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     134: pop
     135: aload_2
     136: invokevirtual #55                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     139: getstatic     #100                // Field com/amazonaws/util/StringUtils.UTF8:Ljava/nio/charset/Charset;
     142: invokevirtual #101                // Method java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B
     145: astore        5
     147: ldc           #83                 // String \r\n
     149: getstatic     #100                // Field com/amazonaws/util/StringUtils.UTF8:Ljava/nio/charset/Charset;
     152: invokevirtual #101                // Method java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B
     155: astore        6
     157: aload         5
     159: arraylength
     160: aload_1
     161: arraylength
     162: iadd
     163: aload         6
     165: arraylength
     166: iadd
     167: newarray       byte
     169: astore        7
     171: aload         5
     173: iconst_0
     174: aload         7
     176: iconst_0
     177: aload         5
     179: arraylength
     180: invokestatic  #102                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
     183: aload_1
     184: iconst_0
     185: aload         7
     187: aload         5
     189: arraylength
     190: aload_1
     191: arraylength
     192: invokestatic  #102                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
     195: aload         6
     197: iconst_0
     198: aload         7
     200: aload         5
     202: arraylength
     203: aload_1
     204: arraylength
     205: iadd
     206: aload         6
     208: arraylength
     209: invokestatic  #102                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
     212: aload         7
     214: areturn
     215: astore        5
     217: new           #104                // class com/amazonaws/AmazonClientException
     220: dup
     221: new           #50                 // class java/lang/StringBuilder
     224: dup
     225: invokespecial #51                 // Method java/lang/StringBuilder."<init>":()V
     228: ldc           #105                // String Unable to sign the chunked data.
     230: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     233: aload         5
     235: invokevirtual #106                // Method java/lang/Exception.getMessage:()Ljava/lang/String;
     238: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     241: invokevirtual #55                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     244: aload         5
     246: invokespecial #107                // Method com/amazonaws/AmazonClientException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
     249: athrow
    Exception table:
       from    to  target type
         135   214   215   Class java/lang/Exception

  protected java.io.InputStream getWrappedInputStream();
    Code:
       0: aload_0
       1: getfield      #5                  // Field is:Ljava/io/InputStream;
       4: areturn

  static {};
    Code:
       0: iconst_0
       1: newarray       byte
       3: putstatic     #88                 // Field FINAL_CHUNK:[B
       6: ldc           #1                  // class com/amazonaws/auth/AwsChunkedEncodingInputStream
       8: invokestatic  #108                // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
      11: putstatic     #36                 // Field log:Lorg/apache/commons/logging/Log;
      14: return
}
