Compiled from "MultiFileOutputStream.java"
public class com.amazonaws.services.s3.internal.MultiFileOutputStream extends java.io.OutputStream implements com.amazonaws.services.s3.OnFileDelete {
  static final int DEFAULT_PART_SIZE;

  private final java.io.File root;

  private final java.lang.String namePrefix;

  private int filesCreated;

  private long partSize;

  private long diskLimit;

  private com.amazonaws.services.s3.UploadObjectObserver observer;

  private int currFileBytesWritten;

  private long totalBytesWritten;

  private java.io.FileOutputStream os;

  private boolean closed;

  private java.util.concurrent.Semaphore diskPermits;

  public com.amazonaws.services.s3.internal.MultiFileOutputStream();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/io/OutputStream."<init>":()V
       4: aload_0
       5: ldc2_w        #3                  // long 5242880l
       8: putfield      #5                  // Field partSize:J
      11: aload_0
      12: ldc2_w        #7                  // long 9223372036854775807l
      15: putfield      #9                  // Field diskLimit:J
      18: aload_0
      19: new           #10                 // class java/io/File
      22: dup
      23: ldc           #11                 // String java.io.tmpdir
      25: invokestatic  #12                 // Method java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;
      28: invokespecial #13                 // Method java/io/File."<init>":(Ljava/lang/String;)V
      31: putfield      #14                 // Field root:Ljava/io/File;
      34: aload_0
      35: new           #15                 // class java/lang/StringBuilder
      38: dup
      39: invokespecial #16                 // Method java/lang/StringBuilder."<init>":()V
      42: invokestatic  #17                 // Method yyMMdd_hhmmss:()Ljava/lang/String;
      45: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      48: ldc           #19                 // String .
      50: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      53: invokestatic  #20                 // Method java/util/UUID.randomUUID:()Ljava/util/UUID;
      56: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      59: invokevirtual #22                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      62: putfield      #23                 // Field namePrefix:Ljava/lang/String;
      65: return

  public com.amazonaws.services.s3.internal.MultiFileOutputStream(java.io.File, java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/io/OutputStream."<init>":()V
       4: aload_0
       5: ldc2_w        #3                  // long 5242880l
       8: putfield      #5                  // Field partSize:J
      11: aload_0
      12: ldc2_w        #7                  // long 9223372036854775807l
      15: putfield      #9                  // Field diskLimit:J
      18: aload_1
      19: ifnull        36
      22: aload_1
      23: invokevirtual #24                 // Method java/io/File.isDirectory:()Z
      26: ifeq          36
      29: aload_1
      30: invokevirtual #25                 // Method java/io/File.canWrite:()Z
      33: ifne          63
      36: new           #26                 // class java/lang/IllegalArgumentException
      39: dup
      40: new           #15                 // class java/lang/StringBuilder
      43: dup
      44: invokespecial #16                 // Method java/lang/StringBuilder."<init>":()V
      47: aload_1
      48: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      51: ldc           #27                 // String  must be a writable directory
      53: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      56: invokevirtual #22                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      59: invokespecial #28                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      62: athrow
      63: aload_2
      64: ifnull        77
      67: aload_2
      68: invokevirtual #29                 // Method java/lang/String.trim:()Ljava/lang/String;
      71: invokevirtual #30                 // Method java/lang/String.length:()I
      74: ifne          87
      77: new           #26                 // class java/lang/IllegalArgumentException
      80: dup
      81: ldc           #31                 // String Please specify a non-empty name prefix
      83: invokespecial #28                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      86: athrow
      87: aload_0
      88: aload_1
      89: putfield      #14                 // Field root:Ljava/io/File;
      92: aload_0
      93: aload_2
      94: putfield      #23                 // Field namePrefix:Ljava/lang/String;
      97: return

  public com.amazonaws.services.s3.internal.MultiFileOutputStream init(com.amazonaws.services.s3.UploadObjectObserver, long, long);
    Code:
       0: aload_1
       1: ifnonnull     14
       4: new           #26                 // class java/lang/IllegalArgumentException
       7: dup
       8: ldc           #32                 // String Observer must be specified
      10: invokespecial #28                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: aload_0
      15: aload_1
      16: putfield      #33                 // Field observer:Lcom/amazonaws/services/s3/UploadObjectObserver;
      19: lload         4
      21: lload_2
      22: iconst_1
      23: lshl
      24: lcmp
      25: ifge          65
      28: new           #26                 // class java/lang/IllegalArgumentException
      31: dup
      32: new           #15                 // class java/lang/StringBuilder
      35: dup
      36: invokespecial #16                 // Method java/lang/StringBuilder."<init>":()V
      39: ldc           #34                 // String Maximum temporary disk space must be at least twice as large as the part size: partSize=
      41: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      44: lload_2
      45: invokevirtual #35                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      48: ldc           #36                 // String , diskSize=
      50: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      53: lload         4
      55: invokevirtual #35                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      58: invokevirtual #22                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      61: invokespecial #28                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      64: athrow
      65: aload_0
      66: lload_2
      67: putfield      #5                  // Field partSize:J
      70: aload_0
      71: lload         4
      73: putfield      #9                  // Field diskLimit:J
      76: lload         4
      78: lload_2
      79: ldiv
      80: l2i
      81: istore        6
      83: aload_0
      84: iload         6
      86: ifge          93
      89: aconst_null
      90: goto          102
      93: new           #37                 // class java/util/concurrent/Semaphore
      96: dup
      97: iload         6
      99: invokespecial #38                 // Method java/util/concurrent/Semaphore."<init>":(I)V
     102: putfield      #39                 // Field diskPermits:Ljava/util/concurrent/Semaphore;
     105: aload_0
     106: areturn

  public void write(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #40                 // Method fos:()Ljava/io/FileOutputStream;
       4: iload_1
       5: invokevirtual #41                 // Method java/io/FileOutputStream.write:(I)V
       8: aload_0
       9: dup
      10: getfield      #42                 // Field currFileBytesWritten:I
      13: iconst_1
      14: iadd
      15: putfield      #42                 // Field currFileBytesWritten:I
      18: aload_0
      19: dup
      20: getfield      #43                 // Field totalBytesWritten:J
      23: lconst_1
      24: ladd
      25: putfield      #43                 // Field totalBytesWritten:J
      28: return

  public void write(byte[]) throws java.io.IOException;
    Code:
       0: aload_1
       1: arraylength
       2: ifne          6
       5: return
       6: aload_0
       7: invokespecial #40                 // Method fos:()Ljava/io/FileOutputStream;
      10: aload_1
      11: invokevirtual #44                 // Method java/io/FileOutputStream.write:([B)V
      14: aload_0
      15: dup
      16: getfield      #42                 // Field currFileBytesWritten:I
      19: aload_1
      20: arraylength
      21: iadd
      22: putfield      #42                 // Field currFileBytesWritten:I
      25: aload_0
      26: dup
      27: getfield      #43                 // Field totalBytesWritten:J
      30: aload_1
      31: arraylength
      32: i2l
      33: ladd
      34: putfield      #43                 // Field totalBytesWritten:J
      37: return

  public void write(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_1
       1: arraylength
       2: ifne          6
       5: return
       6: aload_0
       7: invokespecial #40                 // Method fos:()Ljava/io/FileOutputStream;
      10: aload_1
      11: iload_2
      12: iload_3
      13: invokevirtual #45                 // Method java/io/FileOutputStream.write:([BII)V
      16: aload_0
      17: dup
      18: getfield      #42                 // Field currFileBytesWritten:I
      21: iload_3
      22: iadd
      23: putfield      #42                 // Field currFileBytesWritten:I
      26: aload_0
      27: dup
      28: getfield      #43                 // Field totalBytesWritten:J
      31: iload_3
      32: i2l
      33: ladd
      34: putfield      #43                 // Field totalBytesWritten:J
      37: return

  private java.io.FileOutputStream fos() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #46                 // Field closed:Z
       4: ifeq          17
       7: new           #47                 // class java/io/IOException
      10: dup
      11: ldc           #48                 // String Output stream is already closed
      13: invokespecial #49                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: getfield      #50                 // Field os:Ljava/io/FileOutputStream;
      21: ifnull        37
      24: aload_0
      25: getfield      #42                 // Field currFileBytesWritten:I
      28: i2l
      29: aload_0
      30: getfield      #5                  // Field partSize:J
      33: lcmp
      34: iflt          123
      37: aload_0
      38: getfield      #50                 // Field os:Ljava/io/FileOutputStream;
      41: ifnull        79
      44: aload_0
      45: getfield      #50                 // Field os:Ljava/io/FileOutputStream;
      48: invokevirtual #51                 // Method java/io/FileOutputStream.close:()V
      51: aload_0
      52: getfield      #33                 // Field observer:Lcom/amazonaws/services/s3/UploadObjectObserver;
      55: new           #52                 // class com/amazonaws/services/s3/internal/PartCreationEvent
      58: dup
      59: aload_0
      60: aload_0
      61: getfield      #53                 // Field filesCreated:I
      64: invokevirtual #54                 // Method getFile:(I)Ljava/io/File;
      67: aload_0
      68: getfield      #53                 // Field filesCreated:I
      71: iconst_0
      72: aload_0
      73: invokespecial #55                 // Method com/amazonaws/services/s3/internal/PartCreationEvent."<init>":(Ljava/io/File;IZLcom/amazonaws/services/s3/OnFileDelete;)V
      76: invokevirtual #56                 // Method com/amazonaws/services/s3/UploadObjectObserver.onPartCreate:(Lcom/amazonaws/services/s3/internal/PartCreationEvent;)V
      79: aload_0
      80: iconst_0
      81: putfield      #42                 // Field currFileBytesWritten:I
      84: aload_0
      85: dup
      86: getfield      #53                 // Field filesCreated:I
      89: iconst_1
      90: iadd
      91: putfield      #53                 // Field filesCreated:I
      94: aload_0
      95: invokespecial #57                 // Method blockIfNecessary:()V
      98: aload_0
      99: aload_0
     100: getfield      #53                 // Field filesCreated:I
     103: invokevirtual #54                 // Method getFile:(I)Ljava/io/File;
     106: astore_1
     107: aload_1
     108: invokevirtual #58                 // Method java/io/File.deleteOnExit:()V
     111: aload_0
     112: new           #59                 // class java/io/FileOutputStream
     115: dup
     116: aload_1
     117: invokespecial #60                 // Method java/io/FileOutputStream."<init>":(Ljava/io/File;)V
     120: putfield      #50                 // Field os:Ljava/io/FileOutputStream;
     123: aload_0
     124: getfield      #50                 // Field os:Ljava/io/FileOutputStream;
     127: areturn

  public void onFileDelete(com.amazonaws.services.s3.internal.FileDeletionEvent);
    Code:
       0: aload_0
       1: getfield      #39                 // Field diskPermits:Ljava/util/concurrent/Semaphore;
       4: ifnull        14
       7: aload_0
       8: getfield      #39                 // Field diskPermits:Ljava/util/concurrent/Semaphore;
      11: invokevirtual #61                 // Method java/util/concurrent/Semaphore.release:()V
      14: return

  private void blockIfNecessary();
    Code:
       0: aload_0
       1: getfield      #39                 // Field diskPermits:Ljava/util/concurrent/Semaphore;
       4: ifnull        18
       7: aload_0
       8: getfield      #9                  // Field diskLimit:J
      11: ldc2_w        #7                  // long 9223372036854775807l
      14: lcmp
      15: ifne          19
      18: return
      19: aload_0
      20: getfield      #39                 // Field diskPermits:Ljava/util/concurrent/Semaphore;
      23: invokevirtual #62                 // Method java/util/concurrent/Semaphore.acquire:()V
      26: goto          39
      29: astore_1
      30: new           #64                 // class com/amazonaws/AbortedException
      33: dup
      34: aload_1
      35: invokespecial #65                 // Method com/amazonaws/AbortedException."<init>":(Ljava/lang/Throwable;)V
      38: athrow
      39: return
    Exception table:
       from    to  target type
          19    26    29   Class java/lang/InterruptedException

  public void flush() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #50                 // Field os:Ljava/io/FileOutputStream;
       4: ifnull        14
       7: aload_0
       8: getfield      #50                 // Field os:Ljava/io/FileOutputStream;
      11: invokevirtual #66                 // Method java/io/FileOutputStream.flush:()V
      14: return

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #46                 // Field closed:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: iconst_1
      10: putfield      #46                 // Field closed:Z
      13: aload_0
      14: getfield      #50                 // Field os:Ljava/io/FileOutputStream;
      17: ifnull        114
      20: aload_0
      21: getfield      #50                 // Field os:Ljava/io/FileOutputStream;
      24: invokevirtual #51                 // Method java/io/FileOutputStream.close:()V
      27: aload_0
      28: aload_0
      29: getfield      #53                 // Field filesCreated:I
      32: invokevirtual #54                 // Method getFile:(I)Ljava/io/File;
      35: astore_1
      36: aload_1
      37: invokevirtual #67                 // Method java/io/File.length:()J
      40: lconst_0
      41: lcmp
      42: ifne          86
      45: aload_1
      46: invokevirtual #68                 // Method java/io/File.delete:()Z
      49: ifne          114
      52: aload_0
      53: invokevirtual #69                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      56: invokestatic  #70                 // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
      59: new           #15                 // class java/lang/StringBuilder
      62: dup
      63: invokespecial #16                 // Method java/lang/StringBuilder."<init>":()V
      66: ldc           #71                 // String Ignoring failure to delete empty file
      68: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      71: aload_1
      72: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      75: invokevirtual #22                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      78: invokeinterface #72,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      83: goto          114
      86: aload_0
      87: getfield      #33                 // Field observer:Lcom/amazonaws/services/s3/UploadObjectObserver;
      90: new           #52                 // class com/amazonaws/services/s3/internal/PartCreationEvent
      93: dup
      94: aload_0
      95: aload_0
      96: getfield      #53                 // Field filesCreated:I
      99: invokevirtual #54                 // Method getFile:(I)Ljava/io/File;
     102: aload_0
     103: getfield      #53                 // Field filesCreated:I
     106: iconst_1
     107: aload_0
     108: invokespecial #55                 // Method com/amazonaws/services/s3/internal/PartCreationEvent."<init>":(Ljava/io/File;IZLcom/amazonaws/services/s3/OnFileDelete;)V
     111: invokevirtual #56                 // Method com/amazonaws/services/s3/UploadObjectObserver.onPartCreate:(Lcom/amazonaws/services/s3/internal/PartCreationEvent;)V
     114: return

  public void cleanup();
    Code:
       0: iconst_0
       1: istore_1
       2: iload_1
       3: aload_0
       4: invokevirtual #73                 // Method getNumFilesWritten:()I
       7: if_icmpge     67
      10: aload_0
      11: iload_1
      12: invokevirtual #54                 // Method getFile:(I)Ljava/io/File;
      15: astore_2
      16: aload_2
      17: invokevirtual #74                 // Method java/io/File.exists:()Z
      20: ifeq          61
      23: aload_2
      24: invokevirtual #68                 // Method java/io/File.delete:()Z
      27: ifne          61
      30: aload_0
      31: invokevirtual #69                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      34: invokestatic  #70                 // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
      37: new           #15                 // class java/lang/StringBuilder
      40: dup
      41: invokespecial #16                 // Method java/lang/StringBuilder."<init>":()V
      44: ldc           #75                 // String Ignoring failure to delete file
      46: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      49: aload_2
      50: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      53: invokevirtual #22                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      56: invokeinterface #72,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      61: iinc          1, 1
      64: goto          2
      67: return

  public int getNumFilesWritten();
    Code:
       0: aload_0
       1: getfield      #53                 // Field filesCreated:I
       4: ireturn

  public java.io.File getFile(int);
    Code:
       0: new           #10                 // class java/io/File
       3: dup
       4: aload_0
       5: getfield      #14                 // Field root:Ljava/io/File;
       8: new           #15                 // class java/lang/StringBuilder
      11: dup
      12: invokespecial #16                 // Method java/lang/StringBuilder."<init>":()V
      15: aload_0
      16: getfield      #23                 // Field namePrefix:Ljava/lang/String;
      19: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      22: ldc           #19                 // String .
      24: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      27: iload_1
      28: invokevirtual #76                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      31: invokevirtual #22                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      34: invokespecial #77                 // Method java/io/File."<init>":(Ljava/io/File;Ljava/lang/String;)V
      37: areturn

  public long getPartSize();
    Code:
       0: aload_0
       1: getfield      #5                  // Field partSize:J
       4: lreturn

  public java.io.File getRoot();
    Code:
       0: aload_0
       1: getfield      #14                 // Field root:Ljava/io/File;
       4: areturn

  public java.lang.String getNamePrefix();
    Code:
       0: aload_0
       1: getfield      #23                 // Field namePrefix:Ljava/lang/String;
       4: areturn

  public long getTotalBytesWritten();
    Code:
       0: aload_0
       1: getfield      #43                 // Field totalBytesWritten:J
       4: lreturn

  static java.lang.String yyMMdd_hhmmss();
    Code:
       0: ldc           #78                 // String yyMMdd-hhmmss
       2: invokestatic  #79                 // Method org/joda/time/format/DateTimeFormat.forPattern:(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;
       5: new           #80                 // class org/joda/time/DateTime
       8: dup
       9: invokespecial #81                 // Method org/joda/time/DateTime."<init>":()V
      12: invokevirtual #82                 // Method org/joda/time/format/DateTimeFormatter.print:(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;
      15: areturn

  public boolean isClosed();
    Code:
       0: aload_0
       1: getfield      #46                 // Field closed:Z
       4: ireturn

  public long getDiskLimit();
    Code:
       0: aload_0
       1: getfield      #9                  // Field diskLimit:J
       4: lreturn
}
