Compiled from "S3CryptoModuleEO.java"
class com.amazonaws.services.s3.internal.crypto.S3CryptoModuleEO extends com.amazonaws.services.s3.internal.crypto.S3CryptoModuleBase<com.amazonaws.services.s3.internal.crypto.MultipartUploadCbcContext> {
  com.amazonaws.services.s3.internal.crypto.S3CryptoModuleEO(com.amazonaws.services.kms.AWSKMSClient, com.amazonaws.services.s3.internal.S3Direct, com.amazonaws.auth.AWSCredentialsProvider, com.amazonaws.services.s3.model.EncryptionMaterialsProvider, com.amazonaws.services.s3.model.CryptoConfiguration);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: invokespecial #1                  // Method com/amazonaws/services/s3/internal/crypto/S3CryptoModuleBase."<init>":(Lcom/amazonaws/services/kms/AWSKMSClient;Lcom/amazonaws/services/s3/internal/S3Direct;Lcom/amazonaws/auth/AWSCredentialsProvider;Lcom/amazonaws/services/s3/model/EncryptionMaterialsProvider;Lcom/amazonaws/services/s3/model/CryptoConfiguration;)V
      11: aload         5
      13: invokevirtual #2                  // Method com/amazonaws/services/s3/model/CryptoConfiguration.getCryptoMode:()Lcom/amazonaws/services/s3/model/CryptoMode;
      16: getstatic     #3                  // Field com/amazonaws/services/s3/model/CryptoMode.EncryptionOnly:Lcom/amazonaws/services/s3/model/CryptoMode;
      19: if_acmpeq     30
      22: new           #4                  // class java/lang/IllegalArgumentException
      25: dup
      26: invokespecial #5                  // Method java/lang/IllegalArgumentException."<init>":()V
      29: athrow
      30: return

  com.amazonaws.services.s3.internal.crypto.S3CryptoModuleEO(com.amazonaws.services.s3.internal.S3Direct, com.amazonaws.services.s3.model.EncryptionMaterialsProvider, com.amazonaws.services.s3.model.CryptoConfiguration);
    Code:
       0: aload_0
       1: aconst_null
       2: aload_1
       3: new           #6                  // class com/amazonaws/auth/DefaultAWSCredentialsProviderChain
       6: dup
       7: invokespecial #7                  // Method com/amazonaws/auth/DefaultAWSCredentialsProviderChain."<init>":()V
      10: aload_2
      11: aload_3
      12: invokespecial #8                  // Method "<init>":(Lcom/amazonaws/services/kms/AWSKMSClient;Lcom/amazonaws/services/s3/internal/S3Direct;Lcom/amazonaws/auth/AWSCredentialsProvider;Lcom/amazonaws/services/s3/model/EncryptionMaterialsProvider;Lcom/amazonaws/services/s3/model/CryptoConfiguration;)V
      15: return

  com.amazonaws.services.s3.internal.crypto.S3CryptoModuleEO(com.amazonaws.services.kms.AWSKMSClient, com.amazonaws.services.s3.internal.S3Direct, com.amazonaws.services.s3.model.EncryptionMaterialsProvider, com.amazonaws.services.s3.model.CryptoConfiguration);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: new           #6                  // class com/amazonaws/auth/DefaultAWSCredentialsProviderChain
       6: dup
       7: invokespecial #7                  // Method com/amazonaws/auth/DefaultAWSCredentialsProviderChain."<init>":()V
      10: aload_3
      11: aload         4
      13: invokespecial #8                  // Method "<init>":(Lcom/amazonaws/services/kms/AWSKMSClient;Lcom/amazonaws/services/s3/internal/S3Direct;Lcom/amazonaws/auth/AWSCredentialsProvider;Lcom/amazonaws/services/s3/model/EncryptionMaterialsProvider;Lcom/amazonaws/services/s3/model/CryptoConfiguration;)V
      16: return

  public com.amazonaws.services.s3.model.S3Object getObjectSecurely(com.amazonaws.services.s3.model.GetObjectRequest);
    Code:
       0: new           #9                  // class java/lang/IllegalStateException
       3: dup
       4: invokespecial #10                 // Method java/lang/IllegalStateException."<init>":()V
       7: athrow

  public com.amazonaws.services.s3.model.ObjectMetadata getObjectSecurely(com.amazonaws.services.s3.model.GetObjectRequest, java.io.File);
    Code:
       0: new           #9                  // class java/lang/IllegalStateException
       3: dup
       4: invokespecial #10                 // Method java/lang/IllegalStateException."<init>":()V
       7: athrow

  final com.amazonaws.services.s3.internal.crypto.MultipartUploadCbcContext newUploadContext(com.amazonaws.services.s3.model.InitiateMultipartUploadRequest, com.amazonaws.services.s3.internal.crypto.ContentCryptoMaterial);
    Code:
       0: new           #11                 // class com/amazonaws/services/s3/internal/crypto/MultipartUploadCbcContext
       3: dup
       4: aload_1
       5: invokevirtual #12                 // Method com/amazonaws/services/s3/model/InitiateMultipartUploadRequest.getBucketName:()Ljava/lang/String;
       8: aload_1
       9: invokevirtual #13                 // Method com/amazonaws/services/s3/model/InitiateMultipartUploadRequest.getKey:()Ljava/lang/String;
      12: aload_2
      13: invokespecial #14                 // Method com/amazonaws/services/s3/internal/crypto/MultipartUploadCbcContext."<init>":(Ljava/lang/String;Ljava/lang/String;Lcom/amazonaws/services/s3/internal/crypto/ContentCryptoMaterial;)V
      16: astore_3
      17: aload_2
      18: invokevirtual #15                 // Method com/amazonaws/services/s3/internal/crypto/ContentCryptoMaterial.getCipherLite:()Lcom/amazonaws/services/s3/internal/crypto/CipherLite;
      21: invokevirtual #16                 // Method com/amazonaws/services/s3/internal/crypto/CipherLite.getIV:()[B
      24: astore        4
      26: aload_3
      27: aload         4
      29: invokevirtual #17                 // Method com/amazonaws/services/s3/internal/crypto/MultipartUploadCbcContext.setNextInitializationVector:([B)V
      32: aload_3
      33: areturn

  final void updateUploadContext(com.amazonaws.services.s3.internal.crypto.MultipartUploadCbcContext, com.amazonaws.internal.SdkFilterInputStream);
    Code:
       0: aload_2
       1: checkcast     #18                 // class com/amazonaws/services/s3/internal/crypto/ByteRangeCapturingInputStream
       4: astore_3
       5: aload_1
       6: aload_3
       7: invokevirtual #19                 // Method com/amazonaws/services/s3/internal/crypto/ByteRangeCapturingInputStream.getBlock:()[B
      10: invokevirtual #17                 // Method com/amazonaws/services/s3/internal/crypto/MultipartUploadCbcContext.setNextInitializationVector:([B)V
      13: return

  final com.amazonaws.services.s3.internal.crypto.ByteRangeCapturingInputStream wrapForMultipart(com.amazonaws.services.s3.internal.crypto.CipherLiteInputStream, long);
    Code:
       0: aload_0
       1: getfield      #20                 // Field contentCryptoScheme:Lcom/amazonaws/services/s3/internal/crypto/ContentCryptoScheme;
       4: invokevirtual #21                 // Method com/amazonaws/services/s3/internal/crypto/ContentCryptoScheme.getBlockSizeInBytes:()I
       7: istore        4
       9: new           #18                 // class com/amazonaws/services/s3/internal/crypto/ByteRangeCapturingInputStream
      12: dup
      13: aload_1
      14: lload_2
      15: iload         4
      17: i2l
      18: lsub
      19: lload_2
      20: invokespecial #22                 // Method com/amazonaws/services/s3/internal/crypto/ByteRangeCapturingInputStream."<init>":(Ljava/io/InputStream;JJ)V
      23: areturn

  final long computeLastPartSize(com.amazonaws.services.s3.model.UploadPartRequest);
    Code:
       0: aload_1
       1: invokevirtual #23                 // Method com/amazonaws/services/s3/model/UploadPartRequest.getFile:()Ljava/io/File;
       4: ifnull        35
       7: aload_1
       8: invokevirtual #24                 // Method com/amazonaws/services/s3/model/UploadPartRequest.getPartSize:()J
      11: lconst_0
      12: lcmp
      13: ifle          24
      16: aload_1
      17: invokevirtual #24                 // Method com/amazonaws/services/s3/model/UploadPartRequest.getPartSize:()J
      20: lstore_2
      21: goto          54
      24: aload_1
      25: invokevirtual #23                 // Method com/amazonaws/services/s3/model/UploadPartRequest.getFile:()Ljava/io/File;
      28: invokevirtual #25                 // Method java/io/File.length:()J
      31: lstore_2
      32: goto          54
      35: aload_1
      36: invokevirtual #26                 // Method com/amazonaws/services/s3/model/UploadPartRequest.getInputStream:()Ljava/io/InputStream;
      39: ifnull        50
      42: aload_1
      43: invokevirtual #24                 // Method com/amazonaws/services/s3/model/UploadPartRequest.getPartSize:()J
      46: lstore_2
      47: goto          54
      50: ldc2_w        #27                 // long -1l
      53: lreturn
      54: aload_0
      55: getfield      #20                 // Field contentCryptoScheme:Lcom/amazonaws/services/s3/internal/crypto/ContentCryptoScheme;
      58: invokevirtual #21                 // Method com/amazonaws/services/s3/internal/crypto/ContentCryptoScheme.getBlockSizeInBytes:()I
      61: i2l
      62: lstore        4
      64: lload         4
      66: lload_2
      67: lload         4
      69: lrem
      70: lsub
      71: lstore        6
      73: lload_2
      74: lload         6
      76: ladd
      77: lreturn

  final com.amazonaws.services.s3.internal.crypto.CipherLite cipherLiteForNextPart(com.amazonaws.services.s3.internal.crypto.MultipartUploadCbcContext);
    Code:
       0: aload_1
       1: invokevirtual #29                 // Method com/amazonaws/services/s3/internal/crypto/MultipartUploadCbcContext.getCipherLite:()Lcom/amazonaws/services/s3/internal/crypto/CipherLite;
       4: astore_2
       5: aload_1
       6: invokevirtual #30                 // Method com/amazonaws/services/s3/internal/crypto/MultipartUploadCbcContext.getNextInitializationVector:()[B
       9: astore_3
      10: aload_2
      11: aload_3
      12: invokevirtual #31                 // Method com/amazonaws/services/s3/internal/crypto/CipherLite.createUsingIV:([B)Lcom/amazonaws/services/s3/internal/crypto/CipherLite;
      15: areturn

  protected final long ciphertextLength(long);
    Code:
       0: aload_0
       1: getfield      #20                 // Field contentCryptoScheme:Lcom/amazonaws/services/s3/internal/crypto/ContentCryptoScheme;
       4: invokevirtual #21                 // Method com/amazonaws/services/s3/internal/crypto/ContentCryptoScheme.getBlockSizeInBytes:()I
       7: i2l
       8: lstore_3
       9: lload_3
      10: lload_1
      11: lload_3
      12: lrem
      13: lsub
      14: lstore        5
      16: lload_1
      17: lload         5
      19: ladd
      20: lreturn

  void updateUploadContext(com.amazonaws.services.s3.internal.crypto.MultipartUploadCryptoContext, com.amazonaws.internal.SdkFilterInputStream);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #11                 // class com/amazonaws/services/s3/internal/crypto/MultipartUploadCbcContext
       5: aload_2
       6: invokevirtual #32                 // Method updateUploadContext:(Lcom/amazonaws/services/s3/internal/crypto/MultipartUploadCbcContext;Lcom/amazonaws/internal/SdkFilterInputStream;)V
       9: return

  com.amazonaws.internal.SdkFilterInputStream wrapForMultipart(com.amazonaws.services.s3.internal.crypto.CipherLiteInputStream, long);
    Code:
       0: aload_0
       1: aload_1
       2: lload_2
       3: invokevirtual #33                 // Method wrapForMultipart:(Lcom/amazonaws/services/s3/internal/crypto/CipherLiteInputStream;J)Lcom/amazonaws/services/s3/internal/crypto/ByteRangeCapturingInputStream;
       6: areturn

  com.amazonaws.services.s3.internal.crypto.CipherLite cipherLiteForNextPart(com.amazonaws.services.s3.internal.crypto.MultipartUploadCryptoContext);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #11                 // class com/amazonaws/services/s3/internal/crypto/MultipartUploadCbcContext
       5: invokevirtual #34                 // Method cipherLiteForNextPart:(Lcom/amazonaws/services/s3/internal/crypto/MultipartUploadCbcContext;)Lcom/amazonaws/services/s3/internal/crypto/CipherLite;
       8: areturn

  com.amazonaws.services.s3.internal.crypto.MultipartUploadCryptoContext newUploadContext(com.amazonaws.services.s3.model.InitiateMultipartUploadRequest, com.amazonaws.services.s3.internal.crypto.ContentCryptoMaterial);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #35                 // Method newUploadContext:(Lcom/amazonaws/services/s3/model/InitiateMultipartUploadRequest;Lcom/amazonaws/services/s3/internal/crypto/ContentCryptoMaterial;)Lcom/amazonaws/services/s3/internal/crypto/MultipartUploadCbcContext;
       6: areturn
}
