Compiled from "DecodedStreamBuffer.java"
class com.amazonaws.auth.DecodedStreamBuffer {
  private static final org.apache.commons.logging.Log log;

  private byte[] bufferArray;

  private int maxBufferSize;

  private int byteBuffered;

  private int pos;

  private boolean bufferSizeOverflow;

  public com.amazonaws.auth.DecodedStreamBuffer(int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_m1
       6: putfield      #2                  // Field pos:I
       9: aload_0
      10: iload_1
      11: newarray       byte
      13: putfield      #3                  // Field bufferArray:[B
      16: aload_0
      17: iload_1
      18: putfield      #4                  // Field maxBufferSize:I
      21: return

  public void buffer(byte);
    Code:
       0: aload_0
       1: iconst_m1
       2: putfield      #2                  // Field pos:I
       5: aload_0
       6: getfield      #5                  // Field byteBuffered:I
       9: aload_0
      10: getfield      #4                  // Field maxBufferSize:I
      13: if_icmplt     70
      16: getstatic     #6                  // Field log:Lorg/apache/commons/logging/Log;
      19: invokeinterface #7,  1            // InterfaceMethod org/apache/commons/logging/Log.isDebugEnabled:()Z
      24: ifeq          62
      27: getstatic     #6                  // Field log:Lorg/apache/commons/logging/Log;
      30: new           #8                  // class java/lang/StringBuilder
      33: dup
      34: invokespecial #9                  // Method java/lang/StringBuilder."<init>":()V
      37: ldc           #10                 // String Buffer size
      39: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      42: aload_0
      43: getfield      #4                  // Field maxBufferSize:I
      46: invokevirtual #12                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      49: ldc           #13                 // String  has been exceeded and the input stream will not be repeatable. Freeing buffer memory
      51: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      54: invokevirtual #14                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      57: invokeinterface #15,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      62: aload_0
      63: iconst_1
      64: putfield      #16                 // Field bufferSizeOverflow:Z
      67: goto          87
      70: aload_0
      71: getfield      #3                  // Field bufferArray:[B
      74: aload_0
      75: dup
      76: getfield      #5                  // Field byteBuffered:I
      79: dup_x1
      80: iconst_1
      81: iadd
      82: putfield      #5                  // Field byteBuffered:I
      85: iload_1
      86: bastore
      87: return

  public void buffer(byte[], int, int);
    Code:
       0: aload_0
       1: iconst_m1
       2: putfield      #2                  // Field pos:I
       5: aload_0
       6: getfield      #5                  // Field byteBuffered:I
       9: iload_3
      10: iadd
      11: aload_0
      12: getfield      #4                  // Field maxBufferSize:I
      15: if_icmple     72
      18: getstatic     #6                  // Field log:Lorg/apache/commons/logging/Log;
      21: invokeinterface #7,  1            // InterfaceMethod org/apache/commons/logging/Log.isDebugEnabled:()Z
      26: ifeq          64
      29: getstatic     #6                  // Field log:Lorg/apache/commons/logging/Log;
      32: new           #8                  // class java/lang/StringBuilder
      35: dup
      36: invokespecial #9                  // Method java/lang/StringBuilder."<init>":()V
      39: ldc           #10                 // String Buffer size
      41: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      44: aload_0
      45: getfield      #4                  // Field maxBufferSize:I
      48: invokevirtual #12                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      51: ldc           #13                 // String  has been exceeded and the input stream will not be repeatable. Freeing buffer memory
      53: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      56: invokevirtual #14                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      59: invokeinterface #15,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      64: aload_0
      65: iconst_1
      66: putfield      #16                 // Field bufferSizeOverflow:Z
      69: goto          96
      72: aload_1
      73: iload_2
      74: aload_0
      75: getfield      #3                  // Field bufferArray:[B
      78: aload_0
      79: getfield      #5                  // Field byteBuffered:I
      82: iload_3
      83: invokestatic  #17                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      86: aload_0
      87: dup
      88: getfield      #5                  // Field byteBuffered:I
      91: iload_3
      92: iadd
      93: putfield      #5                  // Field byteBuffered:I
      96: return

  public boolean hasNext();
    Code:
       0: aload_0
       1: getfield      #2                  // Field pos:I
       4: iconst_m1
       5: if_icmpeq     23
       8: aload_0
       9: getfield      #2                  // Field pos:I
      12: aload_0
      13: getfield      #5                  // Field byteBuffered:I
      16: if_icmpge     23
      19: iconst_1
      20: goto          24
      23: iconst_0
      24: ireturn

  public byte next();
    Code:
       0: aload_0
       1: getfield      #3                  // Field bufferArray:[B
       4: aload_0
       5: dup
       6: getfield      #2                  // Field pos:I
       9: dup_x1
      10: iconst_1
      11: iadd
      12: putfield      #2                  // Field pos:I
      15: baload
      16: ireturn

  public void startReadBuffer();
    Code:
       0: aload_0
       1: getfield      #16                 // Field bufferSizeOverflow:Z
       4: ifeq          42
       7: new           #18                 // class com/amazonaws/AmazonClientException
      10: dup
      11: new           #8                  // class java/lang/StringBuilder
      14: dup
      15: invokespecial #9                  // Method java/lang/StringBuilder."<init>":()V
      18: ldc           #19                 // String The input stream is not repeatable since the buffer size
      20: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      23: aload_0
      24: getfield      #4                  // Field maxBufferSize:I
      27: invokevirtual #12                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      30: ldc           #20                 // String  has been exceeded.
      32: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      35: invokevirtual #14                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      38: invokespecial #21                 // Method com/amazonaws/AmazonClientException."<init>":(Ljava/lang/String;)V
      41: athrow
      42: aload_0
      43: iconst_0
      44: putfield      #2                  // Field pos:I
      47: return

  static {};
    Code:
       0: ldc           #22                 // class com/amazonaws/auth/DecodedStreamBuffer
       2: invokestatic  #23                 // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
       5: putstatic     #6                  // Field log:Lorg/apache/commons/logging/Log;
       8: return
}
