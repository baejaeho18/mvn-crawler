Compiled from "ByteRangeCapturingInputStream.java"
public class com.amazonaws.services.s3.internal.crypto.ByteRangeCapturingInputStream extends com.amazonaws.internal.SdkFilterInputStream {
  private final long startingPosition;

  private final long endingPosition;

  private long streamPosition;

  private int blockPosition;

  private final byte[] block;

  private long markedStreamPosition;

  private int markedBlockPosition;

  public com.amazonaws.services.s3.internal.crypto.ByteRangeCapturingInputStream(java.io.InputStream, long, long);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method com/amazonaws/internal/SdkFilterInputStream."<init>":(Ljava/io/InputStream;)V
       5: aload_0
       6: iconst_0
       7: putfield      #2                  // Field blockPosition:I
      10: lload_2
      11: lload         4
      13: lcmp
      14: iflt          27
      17: new           #3                  // class java/lang/IllegalArgumentException
      20: dup
      21: ldc           #4                  // String Invalid byte range specified: the starting position must be less than the ending position
      23: invokespecial #5                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      26: athrow
      27: aload_0
      28: lload_2
      29: putfield      #6                  // Field startingPosition:J
      32: aload_0
      33: lload         4
      35: putfield      #7                  // Field endingPosition:J
      38: lload         4
      40: lload_2
      41: lsub
      42: l2i
      43: istore        6
      45: aload_0
      46: iload         6
      48: newarray       byte
      50: putfield      #8                  // Field block:[B
      53: return

  public byte[] getBlock();
    Code:
       0: aload_0
       1: getfield      #8                  // Field block:[B
       4: areturn

  public int read() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #9                  // Method com/amazonaws/internal/SdkFilterInputStream.read:()I
       4: istore_1
       5: iload_1
       6: iconst_m1
       7: if_icmpne     12
      10: iconst_m1
      11: ireturn
      12: aload_0
      13: getfield      #10                 // Field streamPosition:J
      16: aload_0
      17: getfield      #6                  // Field startingPosition:J
      20: lcmp
      21: iflt          54
      24: aload_0
      25: getfield      #10                 // Field streamPosition:J
      28: aload_0
      29: getfield      #7                  // Field endingPosition:J
      32: lcmp
      33: ifgt          54
      36: aload_0
      37: getfield      #8                  // Field block:[B
      40: aload_0
      41: dup
      42: getfield      #2                  // Field blockPosition:I
      45: dup_x1
      46: iconst_1
      47: iadd
      48: putfield      #2                  // Field blockPosition:I
      51: iload_1
      52: i2b
      53: bastore
      54: aload_0
      55: dup
      56: getfield      #10                 // Field streamPosition:J
      59: lconst_1
      60: ladd
      61: putfield      #10                 // Field streamPosition:J
      64: iload_1
      65: ireturn

  public synchronized void mark(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #11                 // Method com/amazonaws/internal/SdkFilterInputStream.mark:(I)V
       5: aload_0
       6: invokevirtual #12                 // Method markSupported:()Z
       9: ifeq          28
      12: aload_0
      13: aload_0
      14: getfield      #10                 // Field streamPosition:J
      17: putfield      #13                 // Field markedStreamPosition:J
      20: aload_0
      21: aload_0
      22: getfield      #2                  // Field blockPosition:I
      25: putfield      #14                 // Field markedBlockPosition:I
      28: return

  public synchronized void reset() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #15                 // Method com/amazonaws/internal/SdkFilterInputStream.reset:()V
       4: aload_0
       5: invokevirtual #12                 // Method markSupported:()Z
       8: ifeq          27
      11: aload_0
      12: aload_0
      13: getfield      #13                 // Field markedStreamPosition:J
      16: putfield      #10                 // Field streamPosition:J
      19: aload_0
      20: aload_0
      21: getfield      #14                 // Field markedBlockPosition:I
      24: putfield      #2                  // Field blockPosition:I
      27: return

  public int read(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: invokespecial #16                 // Method com/amazonaws/internal/SdkFilterInputStream.read:([BII)I
       7: istore        4
       9: iload         4
      11: iconst_m1
      12: if_icmpne     17
      15: iconst_m1
      16: ireturn
      17: aload_0
      18: getfield      #10                 // Field streamPosition:J
      21: iload         4
      23: i2l
      24: ladd
      25: aload_0
      26: getfield      #6                  // Field startingPosition:J
      29: lcmp
      30: iflt          115
      33: aload_0
      34: getfield      #10                 // Field streamPosition:J
      37: aload_0
      38: getfield      #7                  // Field endingPosition:J
      41: lcmp
      42: ifgt          115
      45: iconst_0
      46: istore        5
      48: iload         5
      50: iload         4
      52: if_icmpge     115
      55: aload_0
      56: getfield      #10                 // Field streamPosition:J
      59: iload         5
      61: i2l
      62: ladd
      63: aload_0
      64: getfield      #6                  // Field startingPosition:J
      67: lcmp
      68: iflt          109
      71: aload_0
      72: getfield      #10                 // Field streamPosition:J
      75: iload         5
      77: i2l
      78: ladd
      79: aload_0
      80: getfield      #7                  // Field endingPosition:J
      83: lcmp
      84: ifge          109
      87: aload_0
      88: getfield      #8                  // Field block:[B
      91: aload_0
      92: dup
      93: getfield      #2                  // Field blockPosition:I
      96: dup_x1
      97: iconst_1
      98: iadd
      99: putfield      #2                  // Field blockPosition:I
     102: aload_1
     103: iload_2
     104: iload         5
     106: iadd
     107: baload
     108: bastore
     109: iinc          5, 1
     112: goto          48
     115: aload_0
     116: dup
     117: getfield      #10                 // Field streamPosition:J
     120: iload         4
     122: i2l
     123: ladd
     124: putfield      #10                 // Field streamPosition:J
     127: iload         4
     129: ireturn
}
