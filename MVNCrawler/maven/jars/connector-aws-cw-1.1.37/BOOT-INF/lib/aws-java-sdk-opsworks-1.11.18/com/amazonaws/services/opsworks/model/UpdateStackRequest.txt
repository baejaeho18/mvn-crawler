Compiled from "UpdateStackRequest.java"
public class com.amazonaws.services.opsworks.model.UpdateStackRequest extends com.amazonaws.AmazonWebServiceRequest implements java.io.Serializable,java.lang.Cloneable {
  private java.lang.String stackId;

  private java.lang.String name;

  private com.amazonaws.internal.SdkInternalMap<java.lang.String, java.lang.String> attributes;

  private java.lang.String serviceRoleArn;

  private java.lang.String defaultInstanceProfileArn;

  private java.lang.String defaultOs;

  private java.lang.String hostnameTheme;

  private java.lang.String defaultAvailabilityZone;

  private java.lang.String defaultSubnetId;

  private java.lang.String customJson;

  private com.amazonaws.services.opsworks.model.StackConfigurationManager configurationManager;

  private com.amazonaws.services.opsworks.model.ChefConfiguration chefConfiguration;

  private java.lang.Boolean useCustomCookbooks;

  private com.amazonaws.services.opsworks.model.Source customCookbooksSource;

  private java.lang.String defaultSshKeyName;

  private java.lang.String defaultRootDeviceType;

  private java.lang.Boolean useOpsworksSecurityGroups;

  private java.lang.String agentVersion;

  public com.amazonaws.services.opsworks.model.UpdateStackRequest();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method com/amazonaws/AmazonWebServiceRequest."<init>":()V
       4: return

  public void setStackId(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2                  // Field stackId:Ljava/lang/String;
       5: return

  public java.lang.String getStackId();
    Code:
       0: aload_0
       1: getfield      #2                  // Field stackId:Ljava/lang/String;
       4: areturn

  public com.amazonaws.services.opsworks.model.UpdateStackRequest withStackId(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #3                  // Method setStackId:(Ljava/lang/String;)V
       5: aload_0
       6: areturn

  public void setName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #4                  // Field name:Ljava/lang/String;
       5: return

  public java.lang.String getName();
    Code:
       0: aload_0
       1: getfield      #4                  // Field name:Ljava/lang/String;
       4: areturn

  public com.amazonaws.services.opsworks.model.UpdateStackRequest withName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #5                  // Method setName:(Ljava/lang/String;)V
       5: aload_0
       6: areturn

  public java.util.Map<java.lang.String, java.lang.String> getAttributes();
    Code:
       0: aload_0
       1: getfield      #6                  // Field attributes:Lcom/amazonaws/internal/SdkInternalMap;
       4: ifnonnull     18
       7: aload_0
       8: new           #7                  // class com/amazonaws/internal/SdkInternalMap
      11: dup
      12: invokespecial #8                  // Method com/amazonaws/internal/SdkInternalMap."<init>":()V
      15: putfield      #6                  // Field attributes:Lcom/amazonaws/internal/SdkInternalMap;
      18: aload_0
      19: getfield      #6                  // Field attributes:Lcom/amazonaws/internal/SdkInternalMap;
      22: areturn

  public void setAttributes(java.util.Map<java.lang.String, java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: ifnonnull     9
       5: aconst_null
       6: goto          17
       9: new           #7                  // class com/amazonaws/internal/SdkInternalMap
      12: dup
      13: aload_1
      14: invokespecial #9                  // Method com/amazonaws/internal/SdkInternalMap."<init>":(Ljava/util/Map;)V
      17: putfield      #6                  // Field attributes:Lcom/amazonaws/internal/SdkInternalMap;
      20: return

  public com.amazonaws.services.opsworks.model.UpdateStackRequest withAttributes(java.util.Map<java.lang.String, java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #10                 // Method setAttributes:(Ljava/util/Map;)V
       5: aload_0
       6: areturn

  public com.amazonaws.services.opsworks.model.UpdateStackRequest addAttributesEntry(java.lang.String, java.lang.String);
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #6                  // Field attributes:Lcom/amazonaws/internal/SdkInternalMap;
       5: if_acmpne     19
       8: aload_0
       9: new           #7                  // class com/amazonaws/internal/SdkInternalMap
      12: dup
      13: invokespecial #8                  // Method com/amazonaws/internal/SdkInternalMap."<init>":()V
      16: putfield      #6                  // Field attributes:Lcom/amazonaws/internal/SdkInternalMap;
      19: aload_0
      20: getfield      #6                  // Field attributes:Lcom/amazonaws/internal/SdkInternalMap;
      23: aload_1
      24: invokevirtual #11                 // Method com/amazonaws/internal/SdkInternalMap.containsKey:(Ljava/lang/Object;)Z
      27: ifeq          65
      30: new           #12                 // class java/lang/IllegalArgumentException
      33: dup
      34: new           #13                 // class java/lang/StringBuilder
      37: dup
      38: invokespecial #14                 // Method java/lang/StringBuilder."<init>":()V
      41: ldc           #15                 // String Duplicated keys (
      43: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      46: aload_1
      47: invokevirtual #17                 // Method java/lang/String.toString:()Ljava/lang/String;
      50: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      53: ldc           #18                 // String ) are provided.
      55: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      58: invokevirtual #19                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      61: invokespecial #20                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      64: athrow
      65: aload_0
      66: getfield      #6                  // Field attributes:Lcom/amazonaws/internal/SdkInternalMap;
      69: aload_1
      70: aload_2
      71: invokevirtual #21                 // Method com/amazonaws/internal/SdkInternalMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      74: pop
      75: aload_0
      76: areturn

  public com.amazonaws.services.opsworks.model.UpdateStackRequest clearAttributesEntries();
    Code:
       0: aload_0
       1: aconst_null
       2: putfield      #6                  // Field attributes:Lcom/amazonaws/internal/SdkInternalMap;
       5: aload_0
       6: areturn

  public void setServiceRoleArn(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #22                 // Field serviceRoleArn:Ljava/lang/String;
       5: return

  public java.lang.String getServiceRoleArn();
    Code:
       0: aload_0
       1: getfield      #22                 // Field serviceRoleArn:Ljava/lang/String;
       4: areturn

  public com.amazonaws.services.opsworks.model.UpdateStackRequest withServiceRoleArn(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #23                 // Method setServiceRoleArn:(Ljava/lang/String;)V
       5: aload_0
       6: areturn

  public void setDefaultInstanceProfileArn(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #24                 // Field defaultInstanceProfileArn:Ljava/lang/String;
       5: return

  public java.lang.String getDefaultInstanceProfileArn();
    Code:
       0: aload_0
       1: getfield      #24                 // Field defaultInstanceProfileArn:Ljava/lang/String;
       4: areturn

  public com.amazonaws.services.opsworks.model.UpdateStackRequest withDefaultInstanceProfileArn(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #25                 // Method setDefaultInstanceProfileArn:(Ljava/lang/String;)V
       5: aload_0
       6: areturn

  public void setDefaultOs(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #26                 // Field defaultOs:Ljava/lang/String;
       5: return

  public java.lang.String getDefaultOs();
    Code:
       0: aload_0
       1: getfield      #26                 // Field defaultOs:Ljava/lang/String;
       4: areturn

  public com.amazonaws.services.opsworks.model.UpdateStackRequest withDefaultOs(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #27                 // Method setDefaultOs:(Ljava/lang/String;)V
       5: aload_0
       6: areturn

  public void setHostnameTheme(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #28                 // Field hostnameTheme:Ljava/lang/String;
       5: return

  public java.lang.String getHostnameTheme();
    Code:
       0: aload_0
       1: getfield      #28                 // Field hostnameTheme:Ljava/lang/String;
       4: areturn

  public com.amazonaws.services.opsworks.model.UpdateStackRequest withHostnameTheme(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #29                 // Method setHostnameTheme:(Ljava/lang/String;)V
       5: aload_0
       6: areturn

  public void setDefaultAvailabilityZone(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #30                 // Field defaultAvailabilityZone:Ljava/lang/String;
       5: return

  public java.lang.String getDefaultAvailabilityZone();
    Code:
       0: aload_0
       1: getfield      #30                 // Field defaultAvailabilityZone:Ljava/lang/String;
       4: areturn

  public com.amazonaws.services.opsworks.model.UpdateStackRequest withDefaultAvailabilityZone(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #31                 // Method setDefaultAvailabilityZone:(Ljava/lang/String;)V
       5: aload_0
       6: areturn

  public void setDefaultSubnetId(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #32                 // Field defaultSubnetId:Ljava/lang/String;
       5: return

  public java.lang.String getDefaultSubnetId();
    Code:
       0: aload_0
       1: getfield      #32                 // Field defaultSubnetId:Ljava/lang/String;
       4: areturn

  public com.amazonaws.services.opsworks.model.UpdateStackRequest withDefaultSubnetId(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #33                 // Method setDefaultSubnetId:(Ljava/lang/String;)V
       5: aload_0
       6: areturn

  public void setCustomJson(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #34                 // Field customJson:Ljava/lang/String;
       5: return

  public java.lang.String getCustomJson();
    Code:
       0: aload_0
       1: getfield      #34                 // Field customJson:Ljava/lang/String;
       4: areturn

  public com.amazonaws.services.opsworks.model.UpdateStackRequest withCustomJson(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #35                 // Method setCustomJson:(Ljava/lang/String;)V
       5: aload_0
       6: areturn

  public void setConfigurationManager(com.amazonaws.services.opsworks.model.StackConfigurationManager);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #36                 // Field configurationManager:Lcom/amazonaws/services/opsworks/model/StackConfigurationManager;
       5: return

  public com.amazonaws.services.opsworks.model.StackConfigurationManager getConfigurationManager();
    Code:
       0: aload_0
       1: getfield      #36                 // Field configurationManager:Lcom/amazonaws/services/opsworks/model/StackConfigurationManager;
       4: areturn

  public com.amazonaws.services.opsworks.model.UpdateStackRequest withConfigurationManager(com.amazonaws.services.opsworks.model.StackConfigurationManager);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #37                 // Method setConfigurationManager:(Lcom/amazonaws/services/opsworks/model/StackConfigurationManager;)V
       5: aload_0
       6: areturn

  public void setChefConfiguration(com.amazonaws.services.opsworks.model.ChefConfiguration);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #38                 // Field chefConfiguration:Lcom/amazonaws/services/opsworks/model/ChefConfiguration;
       5: return

  public com.amazonaws.services.opsworks.model.ChefConfiguration getChefConfiguration();
    Code:
       0: aload_0
       1: getfield      #38                 // Field chefConfiguration:Lcom/amazonaws/services/opsworks/model/ChefConfiguration;
       4: areturn

  public com.amazonaws.services.opsworks.model.UpdateStackRequest withChefConfiguration(com.amazonaws.services.opsworks.model.ChefConfiguration);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #39                 // Method setChefConfiguration:(Lcom/amazonaws/services/opsworks/model/ChefConfiguration;)V
       5: aload_0
       6: areturn

  public void setUseCustomCookbooks(java.lang.Boolean);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #40                 // Field useCustomCookbooks:Ljava/lang/Boolean;
       5: return

  public java.lang.Boolean getUseCustomCookbooks();
    Code:
       0: aload_0
       1: getfield      #40                 // Field useCustomCookbooks:Ljava/lang/Boolean;
       4: areturn

  public com.amazonaws.services.opsworks.model.UpdateStackRequest withUseCustomCookbooks(java.lang.Boolean);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #41                 // Method setUseCustomCookbooks:(Ljava/lang/Boolean;)V
       5: aload_0
       6: areturn

  public java.lang.Boolean isUseCustomCookbooks();
    Code:
       0: aload_0
       1: getfield      #40                 // Field useCustomCookbooks:Ljava/lang/Boolean;
       4: areturn

  public void setCustomCookbooksSource(com.amazonaws.services.opsworks.model.Source);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #42                 // Field customCookbooksSource:Lcom/amazonaws/services/opsworks/model/Source;
       5: return

  public com.amazonaws.services.opsworks.model.Source getCustomCookbooksSource();
    Code:
       0: aload_0
       1: getfield      #42                 // Field customCookbooksSource:Lcom/amazonaws/services/opsworks/model/Source;
       4: areturn

  public com.amazonaws.services.opsworks.model.UpdateStackRequest withCustomCookbooksSource(com.amazonaws.services.opsworks.model.Source);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #43                 // Method setCustomCookbooksSource:(Lcom/amazonaws/services/opsworks/model/Source;)V
       5: aload_0
       6: areturn

  public void setDefaultSshKeyName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #44                 // Field defaultSshKeyName:Ljava/lang/String;
       5: return

  public java.lang.String getDefaultSshKeyName();
    Code:
       0: aload_0
       1: getfield      #44                 // Field defaultSshKeyName:Ljava/lang/String;
       4: areturn

  public com.amazonaws.services.opsworks.model.UpdateStackRequest withDefaultSshKeyName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #45                 // Method setDefaultSshKeyName:(Ljava/lang/String;)V
       5: aload_0
       6: areturn

  public void setDefaultRootDeviceType(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #46                 // Field defaultRootDeviceType:Ljava/lang/String;
       5: return

  public java.lang.String getDefaultRootDeviceType();
    Code:
       0: aload_0
       1: getfield      #46                 // Field defaultRootDeviceType:Ljava/lang/String;
       4: areturn

  public com.amazonaws.services.opsworks.model.UpdateStackRequest withDefaultRootDeviceType(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #47                 // Method setDefaultRootDeviceType:(Ljava/lang/String;)V
       5: aload_0
       6: areturn

  public void setDefaultRootDeviceType(com.amazonaws.services.opsworks.model.RootDeviceType);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #48                 // Method com/amazonaws/services/opsworks/model/RootDeviceType.toString:()Ljava/lang/String;
       5: putfield      #46                 // Field defaultRootDeviceType:Ljava/lang/String;
       8: return

  public com.amazonaws.services.opsworks.model.UpdateStackRequest withDefaultRootDeviceType(com.amazonaws.services.opsworks.model.RootDeviceType);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #49                 // Method setDefaultRootDeviceType:(Lcom/amazonaws/services/opsworks/model/RootDeviceType;)V
       5: aload_0
       6: areturn

  public void setUseOpsworksSecurityGroups(java.lang.Boolean);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #50                 // Field useOpsworksSecurityGroups:Ljava/lang/Boolean;
       5: return

  public java.lang.Boolean getUseOpsworksSecurityGroups();
    Code:
       0: aload_0
       1: getfield      #50                 // Field useOpsworksSecurityGroups:Ljava/lang/Boolean;
       4: areturn

  public com.amazonaws.services.opsworks.model.UpdateStackRequest withUseOpsworksSecurityGroups(java.lang.Boolean);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #51                 // Method setUseOpsworksSecurityGroups:(Ljava/lang/Boolean;)V
       5: aload_0
       6: areturn

  public java.lang.Boolean isUseOpsworksSecurityGroups();
    Code:
       0: aload_0
       1: getfield      #50                 // Field useOpsworksSecurityGroups:Ljava/lang/Boolean;
       4: areturn

  public void setAgentVersion(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #52                 // Field agentVersion:Ljava/lang/String;
       5: return

  public java.lang.String getAgentVersion();
    Code:
       0: aload_0
       1: getfield      #52                 // Field agentVersion:Ljava/lang/String;
       4: areturn

  public com.amazonaws.services.opsworks.model.UpdateStackRequest withAgentVersion(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #53                 // Method setAgentVersion:(Ljava/lang/String;)V
       5: aload_0
       6: areturn

  public java.lang.String toString();
    Code:
       0: new           #13                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #14                 // Method java/lang/StringBuilder."<init>":()V
       7: astore_1
       8: aload_1
       9: ldc           #54                 // String {
      11: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      14: pop
      15: aload_0
      16: invokevirtual #55                 // Method getStackId:()Ljava/lang/String;
      19: ifnull        54
      22: aload_1
      23: new           #13                 // class java/lang/StringBuilder
      26: dup
      27: invokespecial #14                 // Method java/lang/StringBuilder."<init>":()V
      30: ldc           #56                 // String StackId:
      32: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      35: aload_0
      36: invokevirtual #55                 // Method getStackId:()Ljava/lang/String;
      39: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      42: ldc           #57                 // String ,
      44: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      47: invokevirtual #19                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      50: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      53: pop
      54: aload_0
      55: invokevirtual #58                 // Method getName:()Ljava/lang/String;
      58: ifnull        93
      61: aload_1
      62: new           #13                 // class java/lang/StringBuilder
      65: dup
      66: invokespecial #14                 // Method java/lang/StringBuilder."<init>":()V
      69: ldc           #59                 // String Name:
      71: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      74: aload_0
      75: invokevirtual #58                 // Method getName:()Ljava/lang/String;
      78: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      81: ldc           #57                 // String ,
      83: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      86: invokevirtual #19                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      89: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      92: pop
      93: aload_0
      94: invokevirtual #60                 // Method getAttributes:()Ljava/util/Map;
      97: ifnull        132
     100: aload_1
     101: new           #13                 // class java/lang/StringBuilder
     104: dup
     105: invokespecial #14                 // Method java/lang/StringBuilder."<init>":()V
     108: ldc           #61                 // String Attributes:
     110: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     113: aload_0
     114: invokevirtual #60                 // Method getAttributes:()Ljava/util/Map;
     117: invokevirtual #62                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     120: ldc           #57                 // String ,
     122: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     125: invokevirtual #19                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     128: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     131: pop
     132: aload_0
     133: invokevirtual #63                 // Method getServiceRoleArn:()Ljava/lang/String;
     136: ifnull        171
     139: aload_1
     140: new           #13                 // class java/lang/StringBuilder
     143: dup
     144: invokespecial #14                 // Method java/lang/StringBuilder."<init>":()V
     147: ldc           #64                 // String ServiceRoleArn:
     149: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     152: aload_0
     153: invokevirtual #63                 // Method getServiceRoleArn:()Ljava/lang/String;
     156: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     159: ldc           #57                 // String ,
     161: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     164: invokevirtual #19                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     167: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     170: pop
     171: aload_0
     172: invokevirtual #65                 // Method getDefaultInstanceProfileArn:()Ljava/lang/String;
     175: ifnull        210
     178: aload_1
     179: new           #13                 // class java/lang/StringBuilder
     182: dup
     183: invokespecial #14                 // Method java/lang/StringBuilder."<init>":()V
     186: ldc           #66                 // String DefaultInstanceProfileArn:
     188: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     191: aload_0
     192: invokevirtual #65                 // Method getDefaultInstanceProfileArn:()Ljava/lang/String;
     195: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     198: ldc           #57                 // String ,
     200: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     203: invokevirtual #19                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     206: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     209: pop
     210: aload_0
     211: invokevirtual #67                 // Method getDefaultOs:()Ljava/lang/String;
     214: ifnull        249
     217: aload_1
     218: new           #13                 // class java/lang/StringBuilder
     221: dup
     222: invokespecial #14                 // Method java/lang/StringBuilder."<init>":()V
     225: ldc           #68                 // String DefaultOs:
     227: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     230: aload_0
     231: invokevirtual #67                 // Method getDefaultOs:()Ljava/lang/String;
     234: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     237: ldc           #57                 // String ,
     239: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     242: invokevirtual #19                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     245: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     248: pop
     249: aload_0
     250: invokevirtual #69                 // Method getHostnameTheme:()Ljava/lang/String;
     253: ifnull        288
     256: aload_1
     257: new           #13                 // class java/lang/StringBuilder
     260: dup
     261: invokespecial #14                 // Method java/lang/StringBuilder."<init>":()V
     264: ldc           #70                 // String HostnameTheme:
     266: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     269: aload_0
     270: invokevirtual #69                 // Method getHostnameTheme:()Ljava/lang/String;
     273: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     276: ldc           #57                 // String ,
     278: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     281: invokevirtual #19                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     284: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     287: pop
     288: aload_0
     289: invokevirtual #71                 // Method getDefaultAvailabilityZone:()Ljava/lang/String;
     292: ifnull        327
     295: aload_1
     296: new           #13                 // class java/lang/StringBuilder
     299: dup
     300: invokespecial #14                 // Method java/lang/StringBuilder."<init>":()V
     303: ldc           #72                 // String DefaultAvailabilityZone:
     305: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     308: aload_0
     309: invokevirtual #71                 // Method getDefaultAvailabilityZone:()Ljava/lang/String;
     312: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     315: ldc           #57                 // String ,
     317: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     320: invokevirtual #19                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     323: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     326: pop
     327: aload_0
     328: invokevirtual #73                 // Method getDefaultSubnetId:()Ljava/lang/String;
     331: ifnull        366
     334: aload_1
     335: new           #13                 // class java/lang/StringBuilder
     338: dup
     339: invokespecial #14                 // Method java/lang/StringBuilder."<init>":()V
     342: ldc           #74                 // String DefaultSubnetId:
     344: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     347: aload_0
     348: invokevirtual #73                 // Method getDefaultSubnetId:()Ljava/lang/String;
     351: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     354: ldc           #57                 // String ,
     356: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     359: invokevirtual #19                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     362: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     365: pop
     366: aload_0
     367: invokevirtual #75                 // Method getCustomJson:()Ljava/lang/String;
     370: ifnull        405
     373: aload_1
     374: new           #13                 // class java/lang/StringBuilder
     377: dup
     378: invokespecial #14                 // Method java/lang/StringBuilder."<init>":()V
     381: ldc           #76                 // String CustomJson:
     383: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     386: aload_0
     387: invokevirtual #75                 // Method getCustomJson:()Ljava/lang/String;
     390: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     393: ldc           #57                 // String ,
     395: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     398: invokevirtual #19                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     401: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     404: pop
     405: aload_0
     406: invokevirtual #77                 // Method getConfigurationManager:()Lcom/amazonaws/services/opsworks/model/StackConfigurationManager;
     409: ifnull        444
     412: aload_1
     413: new           #13                 // class java/lang/StringBuilder
     416: dup
     417: invokespecial #14                 // Method java/lang/StringBuilder."<init>":()V
     420: ldc           #78                 // String ConfigurationManager:
     422: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     425: aload_0
     426: invokevirtual #77                 // Method getConfigurationManager:()Lcom/amazonaws/services/opsworks/model/StackConfigurationManager;
     429: invokevirtual #62                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     432: ldc           #57                 // String ,
     434: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     437: invokevirtual #19                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     440: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     443: pop
     444: aload_0
     445: invokevirtual #79                 // Method getChefConfiguration:()Lcom/amazonaws/services/opsworks/model/ChefConfiguration;
     448: ifnull        483
     451: aload_1
     452: new           #13                 // class java/lang/StringBuilder
     455: dup
     456: invokespecial #14                 // Method java/lang/StringBuilder."<init>":()V
     459: ldc           #80                 // String ChefConfiguration:
     461: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     464: aload_0
     465: invokevirtual #79                 // Method getChefConfiguration:()Lcom/amazonaws/services/opsworks/model/ChefConfiguration;
     468: invokevirtual #62                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     471: ldc           #57                 // String ,
     473: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     476: invokevirtual #19                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     479: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     482: pop
     483: aload_0
     484: invokevirtual #81                 // Method getUseCustomCookbooks:()Ljava/lang/Boolean;
     487: ifnull        522
     490: aload_1
     491: new           #13                 // class java/lang/StringBuilder
     494: dup
     495: invokespecial #14                 // Method java/lang/StringBuilder."<init>":()V
     498: ldc           #82                 // String UseCustomCookbooks:
     500: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     503: aload_0
     504: invokevirtual #81                 // Method getUseCustomCookbooks:()Ljava/lang/Boolean;
     507: invokevirtual #62                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     510: ldc           #57                 // String ,
     512: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     515: invokevirtual #19                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     518: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     521: pop
     522: aload_0
     523: invokevirtual #83                 // Method getCustomCookbooksSource:()Lcom/amazonaws/services/opsworks/model/Source;
     526: ifnull        561
     529: aload_1
     530: new           #13                 // class java/lang/StringBuilder
     533: dup
     534: invokespecial #14                 // Method java/lang/StringBuilder."<init>":()V
     537: ldc           #84                 // String CustomCookbooksSource:
     539: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     542: aload_0
     543: invokevirtual #83                 // Method getCustomCookbooksSource:()Lcom/amazonaws/services/opsworks/model/Source;
     546: invokevirtual #62                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     549: ldc           #57                 // String ,
     551: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     554: invokevirtual #19                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     557: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     560: pop
     561: aload_0
     562: invokevirtual #85                 // Method getDefaultSshKeyName:()Ljava/lang/String;
     565: ifnull        600
     568: aload_1
     569: new           #13                 // class java/lang/StringBuilder
     572: dup
     573: invokespecial #14                 // Method java/lang/StringBuilder."<init>":()V
     576: ldc           #86                 // String DefaultSshKeyName:
     578: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     581: aload_0
     582: invokevirtual #85                 // Method getDefaultSshKeyName:()Ljava/lang/String;
     585: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     588: ldc           #57                 // String ,
     590: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     593: invokevirtual #19                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     596: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     599: pop
     600: aload_0
     601: invokevirtual #87                 // Method getDefaultRootDeviceType:()Ljava/lang/String;
     604: ifnull        639
     607: aload_1
     608: new           #13                 // class java/lang/StringBuilder
     611: dup
     612: invokespecial #14                 // Method java/lang/StringBuilder."<init>":()V
     615: ldc           #88                 // String DefaultRootDeviceType:
     617: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     620: aload_0
     621: invokevirtual #87                 // Method getDefaultRootDeviceType:()Ljava/lang/String;
     624: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     627: ldc           #57                 // String ,
     629: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     632: invokevirtual #19                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     635: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     638: pop
     639: aload_0
     640: invokevirtual #89                 // Method getUseOpsworksSecurityGroups:()Ljava/lang/Boolean;
     643: ifnull        678
     646: aload_1
     647: new           #13                 // class java/lang/StringBuilder
     650: dup
     651: invokespecial #14                 // Method java/lang/StringBuilder."<init>":()V
     654: ldc           #90                 // String UseOpsworksSecurityGroups:
     656: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     659: aload_0
     660: invokevirtual #89                 // Method getUseOpsworksSecurityGroups:()Ljava/lang/Boolean;
     663: invokevirtual #62                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     666: ldc           #57                 // String ,
     668: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     671: invokevirtual #19                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     674: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     677: pop
     678: aload_0
     679: invokevirtual #91                 // Method getAgentVersion:()Ljava/lang/String;
     682: ifnull        712
     685: aload_1
     686: new           #13                 // class java/lang/StringBuilder
     689: dup
     690: invokespecial #14                 // Method java/lang/StringBuilder."<init>":()V
     693: ldc           #92                 // String AgentVersion:
     695: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     698: aload_0
     699: invokevirtual #91                 // Method getAgentVersion:()Ljava/lang/String;
     702: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     705: invokevirtual #19                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     708: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     711: pop
     712: aload_1
     713: ldc           #93                 // String }
     715: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     718: pop
     719: aload_1
     720: invokevirtual #19                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     723: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: ifnonnull     13
      11: iconst_0
      12: ireturn
      13: aload_1
      14: instanceof    #94                 // class com/amazonaws/services/opsworks/model/UpdateStackRequest
      17: ifne          22
      20: iconst_0
      21: ireturn
      22: aload_1
      23: checkcast     #94                 // class com/amazonaws/services/opsworks/model/UpdateStackRequest
      26: astore_2
      27: aload_2
      28: invokevirtual #55                 // Method getStackId:()Ljava/lang/String;
      31: ifnonnull     38
      34: iconst_1
      35: goto          39
      38: iconst_0
      39: aload_0
      40: invokevirtual #55                 // Method getStackId:()Ljava/lang/String;
      43: ifnonnull     50
      46: iconst_1
      47: goto          51
      50: iconst_0
      51: ixor
      52: ifeq          57
      55: iconst_0
      56: ireturn
      57: aload_2
      58: invokevirtual #55                 // Method getStackId:()Ljava/lang/String;
      61: ifnull        80
      64: aload_2
      65: invokevirtual #55                 // Method getStackId:()Ljava/lang/String;
      68: aload_0
      69: invokevirtual #55                 // Method getStackId:()Ljava/lang/String;
      72: invokevirtual #95                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      75: ifne          80
      78: iconst_0
      79: ireturn
      80: aload_2
      81: invokevirtual #58                 // Method getName:()Ljava/lang/String;
      84: ifnonnull     91
      87: iconst_1
      88: goto          92
      91: iconst_0
      92: aload_0
      93: invokevirtual #58                 // Method getName:()Ljava/lang/String;
      96: ifnonnull     103
      99: iconst_1
     100: goto          104
     103: iconst_0
     104: ixor
     105: ifeq          110
     108: iconst_0
     109: ireturn
     110: aload_2
     111: invokevirtual #58                 // Method getName:()Ljava/lang/String;
     114: ifnull        133
     117: aload_2
     118: invokevirtual #58                 // Method getName:()Ljava/lang/String;
     121: aload_0
     122: invokevirtual #58                 // Method getName:()Ljava/lang/String;
     125: invokevirtual #95                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     128: ifne          133
     131: iconst_0
     132: ireturn
     133: aload_2
     134: invokevirtual #60                 // Method getAttributes:()Ljava/util/Map;
     137: ifnonnull     144
     140: iconst_1
     141: goto          145
     144: iconst_0
     145: aload_0
     146: invokevirtual #60                 // Method getAttributes:()Ljava/util/Map;
     149: ifnonnull     156
     152: iconst_1
     153: goto          157
     156: iconst_0
     157: ixor
     158: ifeq          163
     161: iconst_0
     162: ireturn
     163: aload_2
     164: invokevirtual #60                 // Method getAttributes:()Ljava/util/Map;
     167: ifnull        188
     170: aload_2
     171: invokevirtual #60                 // Method getAttributes:()Ljava/util/Map;
     174: aload_0
     175: invokevirtual #60                 // Method getAttributes:()Ljava/util/Map;
     178: invokeinterface #96,  2           // InterfaceMethod java/util/Map.equals:(Ljava/lang/Object;)Z
     183: ifne          188
     186: iconst_0
     187: ireturn
     188: aload_2
     189: invokevirtual #63                 // Method getServiceRoleArn:()Ljava/lang/String;
     192: ifnonnull     199
     195: iconst_1
     196: goto          200
     199: iconst_0
     200: aload_0
     201: invokevirtual #63                 // Method getServiceRoleArn:()Ljava/lang/String;
     204: ifnonnull     211
     207: iconst_1
     208: goto          212
     211: iconst_0
     212: ixor
     213: ifeq          218
     216: iconst_0
     217: ireturn
     218: aload_2
     219: invokevirtual #63                 // Method getServiceRoleArn:()Ljava/lang/String;
     222: ifnull        241
     225: aload_2
     226: invokevirtual #63                 // Method getServiceRoleArn:()Ljava/lang/String;
     229: aload_0
     230: invokevirtual #63                 // Method getServiceRoleArn:()Ljava/lang/String;
     233: invokevirtual #95                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     236: ifne          241
     239: iconst_0
     240: ireturn
     241: aload_2
     242: invokevirtual #65                 // Method getDefaultInstanceProfileArn:()Ljava/lang/String;
     245: ifnonnull     252
     248: iconst_1
     249: goto          253
     252: iconst_0
     253: aload_0
     254: invokevirtual #65                 // Method getDefaultInstanceProfileArn:()Ljava/lang/String;
     257: ifnonnull     264
     260: iconst_1
     261: goto          265
     264: iconst_0
     265: ixor
     266: ifeq          271
     269: iconst_0
     270: ireturn
     271: aload_2
     272: invokevirtual #65                 // Method getDefaultInstanceProfileArn:()Ljava/lang/String;
     275: ifnull        294
     278: aload_2
     279: invokevirtual #65                 // Method getDefaultInstanceProfileArn:()Ljava/lang/String;
     282: aload_0
     283: invokevirtual #65                 // Method getDefaultInstanceProfileArn:()Ljava/lang/String;
     286: invokevirtual #95                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     289: ifne          294
     292: iconst_0
     293: ireturn
     294: aload_2
     295: invokevirtual #67                 // Method getDefaultOs:()Ljava/lang/String;
     298: ifnonnull     305
     301: iconst_1
     302: goto          306
     305: iconst_0
     306: aload_0
     307: invokevirtual #67                 // Method getDefaultOs:()Ljava/lang/String;
     310: ifnonnull     317
     313: iconst_1
     314: goto          318
     317: iconst_0
     318: ixor
     319: ifeq          324
     322: iconst_0
     323: ireturn
     324: aload_2
     325: invokevirtual #67                 // Method getDefaultOs:()Ljava/lang/String;
     328: ifnull        347
     331: aload_2
     332: invokevirtual #67                 // Method getDefaultOs:()Ljava/lang/String;
     335: aload_0
     336: invokevirtual #67                 // Method getDefaultOs:()Ljava/lang/String;
     339: invokevirtual #95                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     342: ifne          347
     345: iconst_0
     346: ireturn
     347: aload_2
     348: invokevirtual #69                 // Method getHostnameTheme:()Ljava/lang/String;
     351: ifnonnull     358
     354: iconst_1
     355: goto          359
     358: iconst_0
     359: aload_0
     360: invokevirtual #69                 // Method getHostnameTheme:()Ljava/lang/String;
     363: ifnonnull     370
     366: iconst_1
     367: goto          371
     370: iconst_0
     371: ixor
     372: ifeq          377
     375: iconst_0
     376: ireturn
     377: aload_2
     378: invokevirtual #69                 // Method getHostnameTheme:()Ljava/lang/String;
     381: ifnull        400
     384: aload_2
     385: invokevirtual #69                 // Method getHostnameTheme:()Ljava/lang/String;
     388: aload_0
     389: invokevirtual #69                 // Method getHostnameTheme:()Ljava/lang/String;
     392: invokevirtual #95                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     395: ifne          400
     398: iconst_0
     399: ireturn
     400: aload_2
     401: invokevirtual #71                 // Method getDefaultAvailabilityZone:()Ljava/lang/String;
     404: ifnonnull     411
     407: iconst_1
     408: goto          412
     411: iconst_0
     412: aload_0
     413: invokevirtual #71                 // Method getDefaultAvailabilityZone:()Ljava/lang/String;
     416: ifnonnull     423
     419: iconst_1
     420: goto          424
     423: iconst_0
     424: ixor
     425: ifeq          430
     428: iconst_0
     429: ireturn
     430: aload_2
     431: invokevirtual #71                 // Method getDefaultAvailabilityZone:()Ljava/lang/String;
     434: ifnull        453
     437: aload_2
     438: invokevirtual #71                 // Method getDefaultAvailabilityZone:()Ljava/lang/String;
     441: aload_0
     442: invokevirtual #71                 // Method getDefaultAvailabilityZone:()Ljava/lang/String;
     445: invokevirtual #95                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     448: ifne          453
     451: iconst_0
     452: ireturn
     453: aload_2
     454: invokevirtual #73                 // Method getDefaultSubnetId:()Ljava/lang/String;
     457: ifnonnull     464
     460: iconst_1
     461: goto          465
     464: iconst_0
     465: aload_0
     466: invokevirtual #73                 // Method getDefaultSubnetId:()Ljava/lang/String;
     469: ifnonnull     476
     472: iconst_1
     473: goto          477
     476: iconst_0
     477: ixor
     478: ifeq          483
     481: iconst_0
     482: ireturn
     483: aload_2
     484: invokevirtual #73                 // Method getDefaultSubnetId:()Ljava/lang/String;
     487: ifnull        506
     490: aload_2
     491: invokevirtual #73                 // Method getDefaultSubnetId:()Ljava/lang/String;
     494: aload_0
     495: invokevirtual #73                 // Method getDefaultSubnetId:()Ljava/lang/String;
     498: invokevirtual #95                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     501: ifne          506
     504: iconst_0
     505: ireturn
     506: aload_2
     507: invokevirtual #75                 // Method getCustomJson:()Ljava/lang/String;
     510: ifnonnull     517
     513: iconst_1
     514: goto          518
     517: iconst_0
     518: aload_0
     519: invokevirtual #75                 // Method getCustomJson:()Ljava/lang/String;
     522: ifnonnull     529
     525: iconst_1
     526: goto          530
     529: iconst_0
     530: ixor
     531: ifeq          536
     534: iconst_0
     535: ireturn
     536: aload_2
     537: invokevirtual #75                 // Method getCustomJson:()Ljava/lang/String;
     540: ifnull        559
     543: aload_2
     544: invokevirtual #75                 // Method getCustomJson:()Ljava/lang/String;
     547: aload_0
     548: invokevirtual #75                 // Method getCustomJson:()Ljava/lang/String;
     551: invokevirtual #95                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     554: ifne          559
     557: iconst_0
     558: ireturn
     559: aload_2
     560: invokevirtual #77                 // Method getConfigurationManager:()Lcom/amazonaws/services/opsworks/model/StackConfigurationManager;
     563: ifnonnull     570
     566: iconst_1
     567: goto          571
     570: iconst_0
     571: aload_0
     572: invokevirtual #77                 // Method getConfigurationManager:()Lcom/amazonaws/services/opsworks/model/StackConfigurationManager;
     575: ifnonnull     582
     578: iconst_1
     579: goto          583
     582: iconst_0
     583: ixor
     584: ifeq          589
     587: iconst_0
     588: ireturn
     589: aload_2
     590: invokevirtual #77                 // Method getConfigurationManager:()Lcom/amazonaws/services/opsworks/model/StackConfigurationManager;
     593: ifnull        612
     596: aload_2
     597: invokevirtual #77                 // Method getConfigurationManager:()Lcom/amazonaws/services/opsworks/model/StackConfigurationManager;
     600: aload_0
     601: invokevirtual #77                 // Method getConfigurationManager:()Lcom/amazonaws/services/opsworks/model/StackConfigurationManager;
     604: invokevirtual #97                 // Method com/amazonaws/services/opsworks/model/StackConfigurationManager.equals:(Ljava/lang/Object;)Z
     607: ifne          612
     610: iconst_0
     611: ireturn
     612: aload_2
     613: invokevirtual #79                 // Method getChefConfiguration:()Lcom/amazonaws/services/opsworks/model/ChefConfiguration;
     616: ifnonnull     623
     619: iconst_1
     620: goto          624
     623: iconst_0
     624: aload_0
     625: invokevirtual #79                 // Method getChefConfiguration:()Lcom/amazonaws/services/opsworks/model/ChefConfiguration;
     628: ifnonnull     635
     631: iconst_1
     632: goto          636
     635: iconst_0
     636: ixor
     637: ifeq          642
     640: iconst_0
     641: ireturn
     642: aload_2
     643: invokevirtual #79                 // Method getChefConfiguration:()Lcom/amazonaws/services/opsworks/model/ChefConfiguration;
     646: ifnull        665
     649: aload_2
     650: invokevirtual #79                 // Method getChefConfiguration:()Lcom/amazonaws/services/opsworks/model/ChefConfiguration;
     653: aload_0
     654: invokevirtual #79                 // Method getChefConfiguration:()Lcom/amazonaws/services/opsworks/model/ChefConfiguration;
     657: invokevirtual #98                 // Method com/amazonaws/services/opsworks/model/ChefConfiguration.equals:(Ljava/lang/Object;)Z
     660: ifne          665
     663: iconst_0
     664: ireturn
     665: aload_2
     666: invokevirtual #81                 // Method getUseCustomCookbooks:()Ljava/lang/Boolean;
     669: ifnonnull     676
     672: iconst_1
     673: goto          677
     676: iconst_0
     677: aload_0
     678: invokevirtual #81                 // Method getUseCustomCookbooks:()Ljava/lang/Boolean;
     681: ifnonnull     688
     684: iconst_1
     685: goto          689
     688: iconst_0
     689: ixor
     690: ifeq          695
     693: iconst_0
     694: ireturn
     695: aload_2
     696: invokevirtual #81                 // Method getUseCustomCookbooks:()Ljava/lang/Boolean;
     699: ifnull        718
     702: aload_2
     703: invokevirtual #81                 // Method getUseCustomCookbooks:()Ljava/lang/Boolean;
     706: aload_0
     707: invokevirtual #81                 // Method getUseCustomCookbooks:()Ljava/lang/Boolean;
     710: invokevirtual #99                 // Method java/lang/Boolean.equals:(Ljava/lang/Object;)Z
     713: ifne          718
     716: iconst_0
     717: ireturn
     718: aload_2
     719: invokevirtual #83                 // Method getCustomCookbooksSource:()Lcom/amazonaws/services/opsworks/model/Source;
     722: ifnonnull     729
     725: iconst_1
     726: goto          730
     729: iconst_0
     730: aload_0
     731: invokevirtual #83                 // Method getCustomCookbooksSource:()Lcom/amazonaws/services/opsworks/model/Source;
     734: ifnonnull     741
     737: iconst_1
     738: goto          742
     741: iconst_0
     742: ixor
     743: ifeq          748
     746: iconst_0
     747: ireturn
     748: aload_2
     749: invokevirtual #83                 // Method getCustomCookbooksSource:()Lcom/amazonaws/services/opsworks/model/Source;
     752: ifnull        771
     755: aload_2
     756: invokevirtual #83                 // Method getCustomCookbooksSource:()Lcom/amazonaws/services/opsworks/model/Source;
     759: aload_0
     760: invokevirtual #83                 // Method getCustomCookbooksSource:()Lcom/amazonaws/services/opsworks/model/Source;
     763: invokevirtual #100                // Method com/amazonaws/services/opsworks/model/Source.equals:(Ljava/lang/Object;)Z
     766: ifne          771
     769: iconst_0
     770: ireturn
     771: aload_2
     772: invokevirtual #85                 // Method getDefaultSshKeyName:()Ljava/lang/String;
     775: ifnonnull     782
     778: iconst_1
     779: goto          783
     782: iconst_0
     783: aload_0
     784: invokevirtual #85                 // Method getDefaultSshKeyName:()Ljava/lang/String;
     787: ifnonnull     794
     790: iconst_1
     791: goto          795
     794: iconst_0
     795: ixor
     796: ifeq          801
     799: iconst_0
     800: ireturn
     801: aload_2
     802: invokevirtual #85                 // Method getDefaultSshKeyName:()Ljava/lang/String;
     805: ifnull        824
     808: aload_2
     809: invokevirtual #85                 // Method getDefaultSshKeyName:()Ljava/lang/String;
     812: aload_0
     813: invokevirtual #85                 // Method getDefaultSshKeyName:()Ljava/lang/String;
     816: invokevirtual #95                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     819: ifne          824
     822: iconst_0
     823: ireturn
     824: aload_2
     825: invokevirtual #87                 // Method getDefaultRootDeviceType:()Ljava/lang/String;
     828: ifnonnull     835
     831: iconst_1
     832: goto          836
     835: iconst_0
     836: aload_0
     837: invokevirtual #87                 // Method getDefaultRootDeviceType:()Ljava/lang/String;
     840: ifnonnull     847
     843: iconst_1
     844: goto          848
     847: iconst_0
     848: ixor
     849: ifeq          854
     852: iconst_0
     853: ireturn
     854: aload_2
     855: invokevirtual #87                 // Method getDefaultRootDeviceType:()Ljava/lang/String;
     858: ifnull        877
     861: aload_2
     862: invokevirtual #87                 // Method getDefaultRootDeviceType:()Ljava/lang/String;
     865: aload_0
     866: invokevirtual #87                 // Method getDefaultRootDeviceType:()Ljava/lang/String;
     869: invokevirtual #95                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     872: ifne          877
     875: iconst_0
     876: ireturn
     877: aload_2
     878: invokevirtual #89                 // Method getUseOpsworksSecurityGroups:()Ljava/lang/Boolean;
     881: ifnonnull     888
     884: iconst_1
     885: goto          889
     888: iconst_0
     889: aload_0
     890: invokevirtual #89                 // Method getUseOpsworksSecurityGroups:()Ljava/lang/Boolean;
     893: ifnonnull     900
     896: iconst_1
     897: goto          901
     900: iconst_0
     901: ixor
     902: ifeq          907
     905: iconst_0
     906: ireturn
     907: aload_2
     908: invokevirtual #89                 // Method getUseOpsworksSecurityGroups:()Ljava/lang/Boolean;
     911: ifnull        930
     914: aload_2
     915: invokevirtual #89                 // Method getUseOpsworksSecurityGroups:()Ljava/lang/Boolean;
     918: aload_0
     919: invokevirtual #89                 // Method getUseOpsworksSecurityGroups:()Ljava/lang/Boolean;
     922: invokevirtual #99                 // Method java/lang/Boolean.equals:(Ljava/lang/Object;)Z
     925: ifne          930
     928: iconst_0
     929: ireturn
     930: aload_2
     931: invokevirtual #91                 // Method getAgentVersion:()Ljava/lang/String;
     934: ifnonnull     941
     937: iconst_1
     938: goto          942
     941: iconst_0
     942: aload_0
     943: invokevirtual #91                 // Method getAgentVersion:()Ljava/lang/String;
     946: ifnonnull     953
     949: iconst_1
     950: goto          954
     953: iconst_0
     954: ixor
     955: ifeq          960
     958: iconst_0
     959: ireturn
     960: aload_2
     961: invokevirtual #91                 // Method getAgentVersion:()Ljava/lang/String;
     964: ifnull        983
     967: aload_2
     968: invokevirtual #91                 // Method getAgentVersion:()Ljava/lang/String;
     971: aload_0
     972: invokevirtual #91                 // Method getAgentVersion:()Ljava/lang/String;
     975: invokevirtual #95                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     978: ifne          983
     981: iconst_0
     982: ireturn
     983: iconst_1
     984: ireturn

  public int hashCode();
    Code:
       0: bipush        31
       2: istore_1
       3: iconst_1
       4: istore_2
       5: bipush        31
       7: iload_2
       8: imul
       9: aload_0
      10: invokevirtual #55                 // Method getStackId:()Ljava/lang/String;
      13: ifnonnull     20
      16: iconst_0
      17: goto          27
      20: aload_0
      21: invokevirtual #55                 // Method getStackId:()Ljava/lang/String;
      24: invokevirtual #101                // Method java/lang/String.hashCode:()I
      27: iadd
      28: istore_2
      29: bipush        31
      31: iload_2
      32: imul
      33: aload_0
      34: invokevirtual #58                 // Method getName:()Ljava/lang/String;
      37: ifnonnull     44
      40: iconst_0
      41: goto          51
      44: aload_0
      45: invokevirtual #58                 // Method getName:()Ljava/lang/String;
      48: invokevirtual #101                // Method java/lang/String.hashCode:()I
      51: iadd
      52: istore_2
      53: bipush        31
      55: iload_2
      56: imul
      57: aload_0
      58: invokevirtual #60                 // Method getAttributes:()Ljava/util/Map;
      61: ifnonnull     68
      64: iconst_0
      65: goto          77
      68: aload_0
      69: invokevirtual #60                 // Method getAttributes:()Ljava/util/Map;
      72: invokeinterface #102,  1          // InterfaceMethod java/util/Map.hashCode:()I
      77: iadd
      78: istore_2
      79: bipush        31
      81: iload_2
      82: imul
      83: aload_0
      84: invokevirtual #63                 // Method getServiceRoleArn:()Ljava/lang/String;
      87: ifnonnull     94
      90: iconst_0
      91: goto          101
      94: aload_0
      95: invokevirtual #63                 // Method getServiceRoleArn:()Ljava/lang/String;
      98: invokevirtual #101                // Method java/lang/String.hashCode:()I
     101: iadd
     102: istore_2
     103: bipush        31
     105: iload_2
     106: imul
     107: aload_0
     108: invokevirtual #65                 // Method getDefaultInstanceProfileArn:()Ljava/lang/String;
     111: ifnonnull     118
     114: iconst_0
     115: goto          125
     118: aload_0
     119: invokevirtual #65                 // Method getDefaultInstanceProfileArn:()Ljava/lang/String;
     122: invokevirtual #101                // Method java/lang/String.hashCode:()I
     125: iadd
     126: istore_2
     127: bipush        31
     129: iload_2
     130: imul
     131: aload_0
     132: invokevirtual #67                 // Method getDefaultOs:()Ljava/lang/String;
     135: ifnonnull     142
     138: iconst_0
     139: goto          149
     142: aload_0
     143: invokevirtual #67                 // Method getDefaultOs:()Ljava/lang/String;
     146: invokevirtual #101                // Method java/lang/String.hashCode:()I
     149: iadd
     150: istore_2
     151: bipush        31
     153: iload_2
     154: imul
     155: aload_0
     156: invokevirtual #69                 // Method getHostnameTheme:()Ljava/lang/String;
     159: ifnonnull     166
     162: iconst_0
     163: goto          173
     166: aload_0
     167: invokevirtual #69                 // Method getHostnameTheme:()Ljava/lang/String;
     170: invokevirtual #101                // Method java/lang/String.hashCode:()I
     173: iadd
     174: istore_2
     175: bipush        31
     177: iload_2
     178: imul
     179: aload_0
     180: invokevirtual #71                 // Method getDefaultAvailabilityZone:()Ljava/lang/String;
     183: ifnonnull     190
     186: iconst_0
     187: goto          197
     190: aload_0
     191: invokevirtual #71                 // Method getDefaultAvailabilityZone:()Ljava/lang/String;
     194: invokevirtual #101                // Method java/lang/String.hashCode:()I
     197: iadd
     198: istore_2
     199: bipush        31
     201: iload_2
     202: imul
     203: aload_0
     204: invokevirtual #73                 // Method getDefaultSubnetId:()Ljava/lang/String;
     207: ifnonnull     214
     210: iconst_0
     211: goto          221
     214: aload_0
     215: invokevirtual #73                 // Method getDefaultSubnetId:()Ljava/lang/String;
     218: invokevirtual #101                // Method java/lang/String.hashCode:()I
     221: iadd
     222: istore_2
     223: bipush        31
     225: iload_2
     226: imul
     227: aload_0
     228: invokevirtual #75                 // Method getCustomJson:()Ljava/lang/String;
     231: ifnonnull     238
     234: iconst_0
     235: goto          245
     238: aload_0
     239: invokevirtual #75                 // Method getCustomJson:()Ljava/lang/String;
     242: invokevirtual #101                // Method java/lang/String.hashCode:()I
     245: iadd
     246: istore_2
     247: bipush        31
     249: iload_2
     250: imul
     251: aload_0
     252: invokevirtual #77                 // Method getConfigurationManager:()Lcom/amazonaws/services/opsworks/model/StackConfigurationManager;
     255: ifnonnull     262
     258: iconst_0
     259: goto          269
     262: aload_0
     263: invokevirtual #77                 // Method getConfigurationManager:()Lcom/amazonaws/services/opsworks/model/StackConfigurationManager;
     266: invokevirtual #103                // Method com/amazonaws/services/opsworks/model/StackConfigurationManager.hashCode:()I
     269: iadd
     270: istore_2
     271: bipush        31
     273: iload_2
     274: imul
     275: aload_0
     276: invokevirtual #79                 // Method getChefConfiguration:()Lcom/amazonaws/services/opsworks/model/ChefConfiguration;
     279: ifnonnull     286
     282: iconst_0
     283: goto          293
     286: aload_0
     287: invokevirtual #79                 // Method getChefConfiguration:()Lcom/amazonaws/services/opsworks/model/ChefConfiguration;
     290: invokevirtual #104                // Method com/amazonaws/services/opsworks/model/ChefConfiguration.hashCode:()I
     293: iadd
     294: istore_2
     295: bipush        31
     297: iload_2
     298: imul
     299: aload_0
     300: invokevirtual #81                 // Method getUseCustomCookbooks:()Ljava/lang/Boolean;
     303: ifnonnull     310
     306: iconst_0
     307: goto          317
     310: aload_0
     311: invokevirtual #81                 // Method getUseCustomCookbooks:()Ljava/lang/Boolean;
     314: invokevirtual #105                // Method java/lang/Boolean.hashCode:()I
     317: iadd
     318: istore_2
     319: bipush        31
     321: iload_2
     322: imul
     323: aload_0
     324: invokevirtual #83                 // Method getCustomCookbooksSource:()Lcom/amazonaws/services/opsworks/model/Source;
     327: ifnonnull     334
     330: iconst_0
     331: goto          341
     334: aload_0
     335: invokevirtual #83                 // Method getCustomCookbooksSource:()Lcom/amazonaws/services/opsworks/model/Source;
     338: invokevirtual #106                // Method com/amazonaws/services/opsworks/model/Source.hashCode:()I
     341: iadd
     342: istore_2
     343: bipush        31
     345: iload_2
     346: imul
     347: aload_0
     348: invokevirtual #85                 // Method getDefaultSshKeyName:()Ljava/lang/String;
     351: ifnonnull     358
     354: iconst_0
     355: goto          365
     358: aload_0
     359: invokevirtual #85                 // Method getDefaultSshKeyName:()Ljava/lang/String;
     362: invokevirtual #101                // Method java/lang/String.hashCode:()I
     365: iadd
     366: istore_2
     367: bipush        31
     369: iload_2
     370: imul
     371: aload_0
     372: invokevirtual #87                 // Method getDefaultRootDeviceType:()Ljava/lang/String;
     375: ifnonnull     382
     378: iconst_0
     379: goto          389
     382: aload_0
     383: invokevirtual #87                 // Method getDefaultRootDeviceType:()Ljava/lang/String;
     386: invokevirtual #101                // Method java/lang/String.hashCode:()I
     389: iadd
     390: istore_2
     391: bipush        31
     393: iload_2
     394: imul
     395: aload_0
     396: invokevirtual #89                 // Method getUseOpsworksSecurityGroups:()Ljava/lang/Boolean;
     399: ifnonnull     406
     402: iconst_0
     403: goto          413
     406: aload_0
     407: invokevirtual #89                 // Method getUseOpsworksSecurityGroups:()Ljava/lang/Boolean;
     410: invokevirtual #105                // Method java/lang/Boolean.hashCode:()I
     413: iadd
     414: istore_2
     415: bipush        31
     417: iload_2
     418: imul
     419: aload_0
     420: invokevirtual #91                 // Method getAgentVersion:()Ljava/lang/String;
     423: ifnonnull     430
     426: iconst_0
     427: goto          437
     430: aload_0
     431: invokevirtual #91                 // Method getAgentVersion:()Ljava/lang/String;
     434: invokevirtual #101                // Method java/lang/String.hashCode:()I
     437: iadd
     438: istore_2
     439: iload_2
     440: ireturn

  public com.amazonaws.services.opsworks.model.UpdateStackRequest clone();
    Code:
       0: aload_0
       1: invokespecial #107                // Method com/amazonaws/AmazonWebServiceRequest.clone:()Lcom/amazonaws/AmazonWebServiceRequest;
       4: checkcast     #94                 // class com/amazonaws/services/opsworks/model/UpdateStackRequest
       7: areturn

  public com.amazonaws.AmazonWebServiceRequest clone();
    Code:
       0: aload_0
       1: invokevirtual #108                // Method clone:()Lcom/amazonaws/services/opsworks/model/UpdateStackRequest;
       4: areturn

  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
    Code:
       0: aload_0
       1: invokevirtual #108                // Method clone:()Lcom/amazonaws/services/opsworks/model/UpdateStackRequest;
       4: areturn
}
