Compiled from "ServletConfidentialityConstraintHandler.java"
public class io.undertow.servlet.handlers.security.ServletConfidentialityConstraintHandler extends io.undertow.security.handlers.SinglePortConfidentialityHandler {
  private final io.undertow.servlet.api.ConfidentialPortManager portManager;

  public io.undertow.servlet.handlers.security.ServletConfidentialityConstraintHandler(io.undertow.servlet.api.ConfidentialPortManager, io.undertow.server.HttpHandler);
    Code:
       0: aload_0
       1: aload_2
       2: iconst_m1
       3: invokespecial #1                  // Method io/undertow/security/handlers/SinglePortConfidentialityHandler."<init>":(Lio/undertow/server/HttpHandler;I)V
       6: aload_0
       7: aload_1
       8: putfield      #2                  // Field portManager:Lio/undertow/servlet/api/ConfidentialPortManager;
      11: return

  public void handleRequest(io.undertow.server.HttpServerExchange) throws java.lang.Exception;
    Code:
       0: aload_1
       1: getstatic     #3                  // Field io/undertow/servlet/handlers/ServletRequestContext.ATTACHMENT_KEY:Lio/undertow/util/AttachmentKey;
       4: invokevirtual #4                  // Method io/undertow/server/HttpServerExchange.getAttachment:(Lio/undertow/util/AttachmentKey;)Ljava/lang/Object;
       7: checkcast     #5                  // class io/undertow/servlet/handlers/ServletRequestContext
      10: astore_2
      11: aload_2
      12: invokevirtual #6                  // Method io/undertow/servlet/handlers/ServletRequestContext.getDeployment:()Lio/undertow/servlet/api/Deployment;
      15: invokeinterface #7,  1            // InterfaceMethod io/undertow/servlet/api/Deployment.getDeploymentInfo:()Lio/undertow/servlet/api/DeploymentInfo;
      20: invokevirtual #8                  // Method io/undertow/servlet/api/DeploymentInfo.getAuthorizationManager:()Lio/undertow/servlet/api/AuthorizationManager;
      23: astore_3
      24: aload_2
      25: invokevirtual #9                  // Method io/undertow/servlet/handlers/ServletRequestContext.getOriginalRequest:()Lio/undertow/servlet/spec/HttpServletRequestImpl;
      28: invokevirtual #10                 // Method io/undertow/servlet/spec/HttpServletRequestImpl.isSecure:()Z
      31: ifeq          40
      34: getstatic     #11                 // Field io/undertow/servlet/api/TransportGuaranteeType.CONFIDENTIAL:Lio/undertow/servlet/api/TransportGuaranteeType;
      37: goto          43
      40: getstatic     #12                 // Field io/undertow/servlet/api/TransportGuaranteeType.NONE:Lio/undertow/servlet/api/TransportGuaranteeType;
      43: astore        4
      45: aload_3
      46: aload         4
      48: aload_2
      49: invokevirtual #13                 // Method io/undertow/servlet/handlers/ServletRequestContext.getTransportGuarenteeType:()Lio/undertow/servlet/api/TransportGuaranteeType;
      52: aload_2
      53: invokevirtual #9                  // Method io/undertow/servlet/handlers/ServletRequestContext.getOriginalRequest:()Lio/undertow/servlet/spec/HttpServletRequestImpl;
      56: invokeinterface #14,  4           // InterfaceMethod io/undertow/servlet/api/AuthorizationManager.transportGuarantee:(Lio/undertow/servlet/api/TransportGuaranteeType;Lio/undertow/servlet/api/TransportGuaranteeType;Ljavax/servlet/http/HttpServletRequest;)Lio/undertow/servlet/api/TransportGuaranteeType;
      61: astore        5
      63: aload_2
      64: aload         5
      66: invokevirtual #15                 // Method io/undertow/servlet/handlers/ServletRequestContext.setTransportGuarenteeType:(Lio/undertow/servlet/api/TransportGuaranteeType;)V
      69: getstatic     #16                 // Field io/undertow/servlet/api/TransportGuaranteeType.REJECTED:Lio/undertow/servlet/api/TransportGuaranteeType;
      72: aload         5
      74: if_acmpne     97
      77: aload_2
      78: invokevirtual #17                 // Method io/undertow/servlet/handlers/ServletRequestContext.getServletResponse:()Ljavax/servlet/ServletResponse;
      81: checkcast     #18                 // class javax/servlet/http/HttpServletResponse
      84: astore        6
      86: aload         6
      88: sipush        403
      91: invokeinterface #20,  2           // InterfaceMethod javax/servlet/http/HttpServletResponse.sendError:(I)V
      96: return
      97: aload_0
      98: aload_1
      99: invokespecial #21                 // Method io/undertow/security/handlers/SinglePortConfidentialityHandler.handleRequest:(Lio/undertow/server/HttpServerExchange;)V
     102: return

  protected boolean confidentialityRequired(io.undertow.server.HttpServerExchange);
    Code:
       0: aload_1
       1: getstatic     #3                  // Field io/undertow/servlet/handlers/ServletRequestContext.ATTACHMENT_KEY:Lio/undertow/util/AttachmentKey;
       4: invokevirtual #4                  // Method io/undertow/server/HttpServerExchange.getAttachment:(Lio/undertow/util/AttachmentKey;)Ljava/lang/Object;
       7: checkcast     #5                  // class io/undertow/servlet/handlers/ServletRequestContext
      10: invokevirtual #13                 // Method io/undertow/servlet/handlers/ServletRequestContext.getTransportGuarenteeType:()Lio/undertow/servlet/api/TransportGuaranteeType;
      13: astore_2
      14: getstatic     #11                 // Field io/undertow/servlet/api/TransportGuaranteeType.CONFIDENTIAL:Lio/undertow/servlet/api/TransportGuaranteeType;
      17: aload_2
      18: if_acmpeq     28
      21: getstatic     #22                 // Field io/undertow/servlet/api/TransportGuaranteeType.INTEGRAL:Lio/undertow/servlet/api/TransportGuaranteeType;
      24: aload_2
      25: if_acmpne     32
      28: iconst_1
      29: goto          33
      32: iconst_0
      33: ireturn

  protected java.net.URI getRedirectURI(io.undertow.server.HttpServerExchange) throws java.net.URISyntaxException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field portManager:Lio/undertow/servlet/api/ConfidentialPortManager;
       4: aload_1
       5: invokeinterface #23,  2           // InterfaceMethod io/undertow/servlet/api/ConfidentialPortManager.getConfidentialPort:(Lio/undertow/server/HttpServerExchange;)I
      10: istore_2
      11: iload_2
      12: ifge          24
      15: getstatic     #24                 // Field io/undertow/servlet/UndertowServletMessages.MESSAGES:Lio/undertow/servlet/UndertowServletMessages;
      18: invokeinterface #25,  1           // InterfaceMethod io/undertow/servlet/UndertowServletMessages.noConfidentialPortAvailable:()Ljava/lang/IllegalStateException;
      23: athrow
      24: aload_0
      25: aload_1
      26: iload_2
      27: invokespecial #26                 // Method io/undertow/security/handlers/SinglePortConfidentialityHandler.getRedirectURI:(Lio/undertow/server/HttpServerExchange;I)Ljava/net/URI;
      30: areturn

  protected boolean isConfidential(io.undertow.server.HttpServerExchange);
    Code:
       0: aload_1
       1: getstatic     #3                  // Field io/undertow/servlet/handlers/ServletRequestContext.ATTACHMENT_KEY:Lio/undertow/util/AttachmentKey;
       4: invokevirtual #4                  // Method io/undertow/server/HttpServerExchange.getAttachment:(Lio/undertow/util/AttachmentKey;)Ljava/lang/Object;
       7: checkcast     #5                  // class io/undertow/servlet/handlers/ServletRequestContext
      10: astore_2
      11: aload_2
      12: ifnull        23
      15: aload_2
      16: invokevirtual #9                  // Method io/undertow/servlet/handlers/ServletRequestContext.getOriginalRequest:()Lio/undertow/servlet/spec/HttpServletRequestImpl;
      19: invokevirtual #10                 // Method io/undertow/servlet/spec/HttpServletRequestImpl.isSecure:()Z
      22: ireturn
      23: aload_0
      24: aload_1
      25: invokespecial #27                 // Method io/undertow/security/handlers/SinglePortConfidentialityHandler.isConfidential:(Lio/undertow/server/HttpServerExchange;)Z
      28: ireturn
}
