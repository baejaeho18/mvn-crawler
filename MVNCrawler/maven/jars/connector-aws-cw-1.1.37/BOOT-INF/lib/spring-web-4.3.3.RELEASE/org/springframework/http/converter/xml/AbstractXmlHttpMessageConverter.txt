Compiled from "AbstractXmlHttpMessageConverter.java"
public abstract class org.springframework.http.converter.xml.AbstractXmlHttpMessageConverter<T> extends org.springframework.http.converter.AbstractHttpMessageConverter<T> {
  private final javax.xml.transform.TransformerFactory transformerFactory;

  protected org.springframework.http.converter.xml.AbstractXmlHttpMessageConverter();
    Code:
       0: aload_0
       1: iconst_3
       2: anewarray     #1                  // class org/springframework/http/MediaType
       5: dup
       6: iconst_0
       7: getstatic     #2                  // Field org/springframework/http/MediaType.APPLICATION_XML:Lorg/springframework/http/MediaType;
      10: aastore
      11: dup
      12: iconst_1
      13: getstatic     #3                  // Field org/springframework/http/MediaType.TEXT_XML:Lorg/springframework/http/MediaType;
      16: aastore
      17: dup
      18: iconst_2
      19: new           #1                  // class org/springframework/http/MediaType
      22: dup
      23: ldc           #4                  // String application
      25: ldc           #5                  // String *+xml
      27: invokespecial #6                  // Method org/springframework/http/MediaType."<init>":(Ljava/lang/String;Ljava/lang/String;)V
      30: aastore
      31: invokespecial #7                  // Method org/springframework/http/converter/AbstractHttpMessageConverter."<init>":([Lorg/springframework/http/MediaType;)V
      34: aload_0
      35: invokestatic  #8                  // Method javax/xml/transform/TransformerFactory.newInstance:()Ljavax/xml/transform/TransformerFactory;
      38: putfield      #9                  // Field transformerFactory:Ljavax/xml/transform/TransformerFactory;
      41: return

  public final T readInternal(java.lang.Class<? extends T>, org.springframework.http.HttpInputMessage) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokeinterface #10,  1           // InterfaceMethod org/springframework/http/HttpInputMessage.getHeaders:()Lorg/springframework/http/HttpHeaders;
       8: new           #11                 // class javax/xml/transform/stream/StreamSource
      11: dup
      12: aload_2
      13: invokeinterface #12,  1           // InterfaceMethod org/springframework/http/HttpInputMessage.getBody:()Ljava/io/InputStream;
      18: invokespecial #13                 // Method javax/xml/transform/stream/StreamSource."<init>":(Ljava/io/InputStream;)V
      21: invokevirtual #14                 // Method readFromSource:(Ljava/lang/Class;Lorg/springframework/http/HttpHeaders;Ljavax/xml/transform/Source;)Ljava/lang/Object;
      24: areturn

  protected final void writeInternal(T, org.springframework.http.HttpOutputMessage) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokeinterface #15,  1           // InterfaceMethod org/springframework/http/HttpOutputMessage.getHeaders:()Lorg/springframework/http/HttpHeaders;
       8: new           #16                 // class javax/xml/transform/stream/StreamResult
      11: dup
      12: aload_2
      13: invokeinterface #17,  1           // InterfaceMethod org/springframework/http/HttpOutputMessage.getBody:()Ljava/io/OutputStream;
      18: invokespecial #18                 // Method javax/xml/transform/stream/StreamResult."<init>":(Ljava/io/OutputStream;)V
      21: invokevirtual #19                 // Method writeToResult:(Ljava/lang/Object;Lorg/springframework/http/HttpHeaders;Ljavax/xml/transform/Result;)V
      24: return

  protected void transform(javax.xml.transform.Source, javax.xml.transform.Result) throws javax.xml.transform.TransformerException;
    Code:
       0: aload_0
       1: getfield      #9                  // Field transformerFactory:Ljavax/xml/transform/TransformerFactory;
       4: invokevirtual #20                 // Method javax/xml/transform/TransformerFactory.newTransformer:()Ljavax/xml/transform/Transformer;
       7: aload_1
       8: aload_2
       9: invokevirtual #21                 // Method javax/xml/transform/Transformer.transform:(Ljavax/xml/transform/Source;Ljavax/xml/transform/Result;)V
      12: return

  protected abstract T readFromSource(java.lang.Class<? extends T>, org.springframework.http.HttpHeaders, javax.xml.transform.Source) throws java.io.IOException;

  protected abstract void writeToResult(T, org.springframework.http.HttpHeaders, javax.xml.transform.Result) throws java.io.IOException;
}
