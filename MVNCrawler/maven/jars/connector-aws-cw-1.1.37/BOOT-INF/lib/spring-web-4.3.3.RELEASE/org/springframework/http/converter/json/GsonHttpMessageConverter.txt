Compiled from "GsonHttpMessageConverter.java"
public class org.springframework.http.converter.json.GsonHttpMessageConverter extends org.springframework.http.converter.AbstractGenericHttpMessageConverter<java.lang.Object> {
  public static final java.nio.charset.Charset DEFAULT_CHARSET;

  private com.google.gson.Gson gson;

  private java.lang.String jsonPrefix;

  public org.springframework.http.converter.json.GsonHttpMessageConverter();
    Code:
       0: aload_0
       1: iconst_2
       2: anewarray     #1                  // class org/springframework/http/MediaType
       5: dup
       6: iconst_0
       7: getstatic     #2                  // Field org/springframework/http/MediaType.APPLICATION_JSON:Lorg/springframework/http/MediaType;
      10: aastore
      11: dup
      12: iconst_1
      13: new           #1                  // class org/springframework/http/MediaType
      16: dup
      17: ldc           #3                  // String application
      19: ldc           #4                  // String *+json
      21: invokespecial #5                  // Method org/springframework/http/MediaType."<init>":(Ljava/lang/String;Ljava/lang/String;)V
      24: aastore
      25: invokespecial #6                  // Method org/springframework/http/converter/AbstractGenericHttpMessageConverter."<init>":([Lorg/springframework/http/MediaType;)V
      28: aload_0
      29: new           #7                  // class com/google/gson/Gson
      32: dup
      33: invokespecial #8                  // Method com/google/gson/Gson."<init>":()V
      36: putfield      #9                  // Field gson:Lcom/google/gson/Gson;
      39: aload_0
      40: getstatic     #10                 // Field DEFAULT_CHARSET:Ljava/nio/charset/Charset;
      43: invokevirtual #11                 // Method setDefaultCharset:(Ljava/nio/charset/Charset;)V
      46: return

  public void setGson(com.google.gson.Gson);
    Code:
       0: aload_1
       1: ldc           #12                 // String \'gson\' is required
       3: invokestatic  #13                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: aload_1
       8: putfield      #9                  // Field gson:Lcom/google/gson/Gson;
      11: return

  public com.google.gson.Gson getGson();
    Code:
       0: aload_0
       1: getfield      #9                  // Field gson:Lcom/google/gson/Gson;
       4: areturn

  public void setJsonPrefix(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #14                 // Field jsonPrefix:Ljava/lang/String;
       5: return

  public void setPrefixJson(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: ifeq          10
       5: ldc           #15                 // String )]}\',
       7: goto          11
      10: aconst_null
      11: putfield      #14                 // Field jsonPrefix:Ljava/lang/String;
      14: return

  public boolean canRead(java.lang.Class<?>, org.springframework.http.MediaType);
    Code:
       0: aload_0
       1: aload_2
       2: invokevirtual #16                 // Method canRead:(Lorg/springframework/http/MediaType;)Z
       5: ireturn

  public boolean canWrite(java.lang.Class<?>, org.springframework.http.MediaType);
    Code:
       0: aload_0
       1: aload_2
       2: invokevirtual #17                 // Method canWrite:(Lorg/springframework/http/MediaType;)Z
       5: ireturn

  protected boolean supports(java.lang.Class<?>);
    Code:
       0: new           #18                 // class java/lang/UnsupportedOperationException
       3: dup
       4: invokespecial #19                 // Method java/lang/UnsupportedOperationException."<init>":()V
       7: athrow

  protected java.lang.Object readInternal(java.lang.Class<?>, org.springframework.http.HttpInputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotReadableException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #20                 // Method getTypeToken:(Ljava/lang/reflect/Type;)Lcom/google/gson/reflect/TypeToken;
       5: astore_3
       6: aload_0
       7: aload_3
       8: aload_2
       9: invokespecial #21                 // Method readTypeToken:(Lcom/google/gson/reflect/TypeToken;Lorg/springframework/http/HttpInputMessage;)Ljava/lang/Object;
      12: areturn

  public java.lang.Object read(java.lang.reflect.Type, java.lang.Class<?>, org.springframework.http.HttpInputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotReadableException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #20                 // Method getTypeToken:(Ljava/lang/reflect/Type;)Lcom/google/gson/reflect/TypeToken;
       5: astore        4
       7: aload_0
       8: aload         4
      10: aload_3
      11: invokespecial #21                 // Method readTypeToken:(Lcom/google/gson/reflect/TypeToken;Lorg/springframework/http/HttpInputMessage;)Ljava/lang/Object;
      14: areturn

  protected com.google.gson.reflect.TypeToken<?> getTypeToken(java.lang.reflect.Type);
    Code:
       0: aload_1
       1: invokestatic  #22                 // Method com/google/gson/reflect/TypeToken.get:(Ljava/lang/reflect/Type;)Lcom/google/gson/reflect/TypeToken;
       4: areturn

  private java.lang.Object readTypeToken(com.google.gson.reflect.TypeToken<?>, org.springframework.http.HttpInputMessage) throws java.io.IOException;
    Code:
       0: new           #23                 // class java/io/InputStreamReader
       3: dup
       4: aload_2
       5: invokeinterface #24,  1           // InterfaceMethod org/springframework/http/HttpInputMessage.getBody:()Ljava/io/InputStream;
      10: aload_0
      11: aload_2
      12: invokeinterface #25,  1           // InterfaceMethod org/springframework/http/HttpInputMessage.getHeaders:()Lorg/springframework/http/HttpHeaders;
      17: invokespecial #26                 // Method getCharset:(Lorg/springframework/http/HttpHeaders;)Ljava/nio/charset/Charset;
      20: invokespecial #27                 // Method java/io/InputStreamReader."<init>":(Ljava/io/InputStream;Ljava/nio/charset/Charset;)V
      23: astore_3
      24: aload_0
      25: getfield      #9                  // Field gson:Lcom/google/gson/Gson;
      28: aload_3
      29: aload_1
      30: invokevirtual #28                 // Method com/google/gson/reflect/TypeToken.getType:()Ljava/lang/reflect/Type;
      33: invokevirtual #29                 // Method com/google/gson/Gson.fromJson:(Ljava/io/Reader;Ljava/lang/reflect/Type;)Ljava/lang/Object;
      36: areturn
      37: astore        4
      39: new           #31                 // class org/springframework/http/converter/HttpMessageNotReadableException
      42: dup
      43: new           #32                 // class java/lang/StringBuilder
      46: dup
      47: invokespecial #33                 // Method java/lang/StringBuilder."<init>":()V
      50: ldc           #34                 // String Could not read JSON:
      52: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      55: aload         4
      57: invokevirtual #36                 // Method com/google/gson/JsonParseException.getMessage:()Ljava/lang/String;
      60: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      63: invokevirtual #37                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      66: aload         4
      68: invokespecial #38                 // Method org/springframework/http/converter/HttpMessageNotReadableException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      71: athrow
    Exception table:
       from    to  target type
          24    36    37   Class com/google/gson/JsonParseException

  private java.nio.charset.Charset getCharset(org.springframework.http.HttpHeaders);
    Code:
       0: aload_1
       1: ifnull        21
       4: aload_1
       5: invokevirtual #39                 // Method org/springframework/http/HttpHeaders.getContentType:()Lorg/springframework/http/MediaType;
       8: ifnull        21
      11: aload_1
      12: invokevirtual #39                 // Method org/springframework/http/HttpHeaders.getContentType:()Lorg/springframework/http/MediaType;
      15: invokevirtual #40                 // Method org/springframework/http/MediaType.getCharset:()Ljava/nio/charset/Charset;
      18: ifnonnull     25
      21: getstatic     #10                 // Field DEFAULT_CHARSET:Ljava/nio/charset/Charset;
      24: areturn
      25: aload_1
      26: invokevirtual #39                 // Method org/springframework/http/HttpHeaders.getContentType:()Lorg/springframework/http/MediaType;
      29: invokevirtual #40                 // Method org/springframework/http/MediaType.getCharset:()Ljava/nio/charset/Charset;
      32: areturn

  protected void writeInternal(java.lang.Object, java.lang.reflect.Type, org.springframework.http.HttpOutputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotWritableException;
    Code:
       0: aload_0
       1: aload_3
       2: invokeinterface #41,  1           // InterfaceMethod org/springframework/http/HttpOutputMessage.getHeaders:()Lorg/springframework/http/HttpHeaders;
       7: invokespecial #26                 // Method getCharset:(Lorg/springframework/http/HttpHeaders;)Ljava/nio/charset/Charset;
      10: astore        4
      12: new           #42                 // class java/io/OutputStreamWriter
      15: dup
      16: aload_3
      17: invokeinterface #43,  1           // InterfaceMethod org/springframework/http/HttpOutputMessage.getBody:()Ljava/io/OutputStream;
      22: aload         4
      24: invokespecial #44                 // Method java/io/OutputStreamWriter."<init>":(Ljava/io/OutputStream;Ljava/nio/charset/Charset;)V
      27: astore        5
      29: aload_0
      30: getfield      #14                 // Field jsonPrefix:Ljava/lang/String;
      33: ifnull        46
      36: aload         5
      38: aload_0
      39: getfield      #14                 // Field jsonPrefix:Ljava/lang/String;
      42: invokevirtual #45                 // Method java/io/OutputStreamWriter.append:(Ljava/lang/CharSequence;)Ljava/io/Writer;
      45: pop
      46: aload_2
      47: ifnull        64
      50: aload_0
      51: getfield      #9                  // Field gson:Lcom/google/gson/Gson;
      54: aload_1
      55: aload_2
      56: aload         5
      58: invokevirtual #46                 // Method com/google/gson/Gson.toJson:(Ljava/lang/Object;Ljava/lang/reflect/Type;Ljava/lang/Appendable;)V
      61: goto          74
      64: aload_0
      65: getfield      #9                  // Field gson:Lcom/google/gson/Gson;
      68: aload_1
      69: aload         5
      71: invokevirtual #47                 // Method com/google/gson/Gson.toJson:(Ljava/lang/Object;Ljava/lang/Appendable;)V
      74: aload         5
      76: invokevirtual #48                 // Method java/io/OutputStreamWriter.close:()V
      79: goto          117
      82: astore        6
      84: new           #50                 // class org/springframework/http/converter/HttpMessageNotWritableException
      87: dup
      88: new           #32                 // class java/lang/StringBuilder
      91: dup
      92: invokespecial #33                 // Method java/lang/StringBuilder."<init>":()V
      95: ldc           #51                 // String Could not write JSON:
      97: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     100: aload         6
     102: invokevirtual #52                 // Method com/google/gson/JsonIOException.getMessage:()Ljava/lang/String;
     105: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     108: invokevirtual #37                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     111: aload         6
     113: invokespecial #53                 // Method org/springframework/http/converter/HttpMessageNotWritableException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
     116: athrow
     117: return
    Exception table:
       from    to  target type
          29    79    82   Class com/google/gson/JsonIOException

  static {};
    Code:
       0: ldc           #54                 // String UTF-8
       2: invokestatic  #55                 // Method java/nio/charset/Charset.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;
       5: putstatic     #10                 // Field DEFAULT_CHARSET:Ljava/nio/charset/Charset;
       8: return
}
