Compiled from "AbstractMappingContentNegotiationStrategy.java"
public abstract class org.springframework.web.accept.AbstractMappingContentNegotiationStrategy extends org.springframework.web.accept.MappingMediaTypeFileExtensionResolver implements org.springframework.web.accept.ContentNegotiationStrategy {
  public org.springframework.web.accept.AbstractMappingContentNegotiationStrategy(java.util.Map<java.lang.String, org.springframework.http.MediaType>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method org/springframework/web/accept/MappingMediaTypeFileExtensionResolver."<init>":(Ljava/util/Map;)V
       5: return

  public java.util.List<org.springframework.http.MediaType> resolveMediaTypes(org.springframework.web.context.request.NativeWebRequest) throws org.springframework.web.HttpMediaTypeNotAcceptableException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_0
       3: aload_1
       4: invokevirtual #2                  // Method getMediaTypeKey:(Lorg/springframework/web/context/request/NativeWebRequest;)Ljava/lang/String;
       7: invokevirtual #3                  // Method resolveMediaTypeKey:(Lorg/springframework/web/context/request/NativeWebRequest;Ljava/lang/String;)Ljava/util/List;
      10: areturn

  public java.util.List<org.springframework.http.MediaType> resolveMediaTypeKey(org.springframework.web.context.request.NativeWebRequest, java.lang.String) throws org.springframework.web.HttpMediaTypeNotAcceptableException;
    Code:
       0: aload_2
       1: invokestatic  #4                  // Method org/springframework/util/StringUtils.hasText:(Ljava/lang/String;)Z
       4: ifeq          50
       7: aload_0
       8: aload_2
       9: invokevirtual #5                  // Method lookupMediaType:(Ljava/lang/String;)Lorg/springframework/http/MediaType;
      12: astore_3
      13: aload_3
      14: ifnull        28
      17: aload_0
      18: aload_2
      19: aload_3
      20: invokevirtual #6                  // Method handleMatch:(Ljava/lang/String;Lorg/springframework/http/MediaType;)V
      23: aload_3
      24: invokestatic  #7                  // Method java/util/Collections.singletonList:(Ljava/lang/Object;)Ljava/util/List;
      27: areturn
      28: aload_0
      29: aload_1
      30: aload_2
      31: invokevirtual #8                  // Method handleNoMatch:(Lorg/springframework/web/context/request/NativeWebRequest;Ljava/lang/String;)Lorg/springframework/http/MediaType;
      34: astore_3
      35: aload_3
      36: ifnull        50
      39: aload_0
      40: aload_2
      41: aload_3
      42: invokevirtual #9                  // Method addMapping:(Ljava/lang/String;Lorg/springframework/http/MediaType;)V
      45: aload_3
      46: invokestatic  #7                  // Method java/util/Collections.singletonList:(Ljava/lang/Object;)Ljava/util/List;
      49: areturn
      50: invokestatic  #10                 // Method java/util/Collections.emptyList:()Ljava/util/List;
      53: areturn

  protected abstract java.lang.String getMediaTypeKey(org.springframework.web.context.request.NativeWebRequest);

  protected void handleMatch(java.lang.String, org.springframework.http.MediaType);
    Code:
       0: return

  protected org.springframework.http.MediaType handleNoMatch(org.springframework.web.context.request.NativeWebRequest, java.lang.String) throws org.springframework.web.HttpMediaTypeNotAcceptableException;
    Code:
       0: aconst_null
       1: areturn
}
