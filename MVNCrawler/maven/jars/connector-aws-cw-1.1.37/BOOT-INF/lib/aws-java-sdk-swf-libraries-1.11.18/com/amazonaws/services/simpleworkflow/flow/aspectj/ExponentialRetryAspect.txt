Compiled from "ExponentialRetryAspect.java"
public class com.amazonaws.services.simpleworkflow.flow.aspectj.ExponentialRetryAspect {
  private static java.lang.Throwable ajc$initFailureCause;

  public static final com.amazonaws.services.simpleworkflow.flow.aspectj.ExponentialRetryAspect ajc$perSingletonInstance;

  public com.amazonaws.services.simpleworkflow.flow.aspectj.ExponentialRetryAspect();
    Code:
       0: aload_0
       1: invokespecial #8                  // Method java/lang/Object."<init>":()V
       4: return

  public java.lang.Object retry(org.aspectj.lang.ProceedingJoinPoint, com.amazonaws.services.simpleworkflow.flow.annotations.ExponentialRetry) throws java.lang.Throwable;
    Code:
       0: aload_0
       1: aload_2
       2: invokestatic  #214                // Method ajc$inlineAccessMethod$com_amazonaws_services_simpleworkflow_flow_aspectj_ExponentialRetryAspect$com_amazonaws_services_simpleworkflow_flow_aspectj_ExponentialRetryAspect$createExponentialRetryPolicy:(Lcom/amazonaws/services/simpleworkflow/flow/aspectj/ExponentialRetryAspect;Lcom/amazonaws/services/simpleworkflow/flow/annotations/ExponentialRetry;)Lcom/amazonaws/services/simpleworkflow/flow/interceptors/ExponentialRetryPolicy;
       5: astore_3
       6: new           #29                 // class com/amazonaws/services/simpleworkflow/flow/DecisionContextProviderImpl
       9: dup
      10: invokespecial #31                 // Method com/amazonaws/services/simpleworkflow/flow/DecisionContextProviderImpl."<init>":()V
      13: invokevirtual #32                 // Method com/amazonaws/services/simpleworkflow/flow/DecisionContextProviderImpl.getDecisionContext:()Lcom/amazonaws/services/simpleworkflow/flow/DecisionContext;
      16: invokevirtual #36                 // Method com/amazonaws/services/simpleworkflow/flow/DecisionContext.getWorkflowClock:()Lcom/amazonaws/services/simpleworkflow/flow/WorkflowClock;
      19: astore        4
      21: new           #42                 // class com/amazonaws/services/simpleworkflow/flow/interceptors/AsyncRetryingExecutor
      24: dup
      25: aload_3
      26: aload         4
      28: invokespecial #44                 // Method com/amazonaws/services/simpleworkflow/flow/interceptors/AsyncRetryingExecutor."<init>":(Lcom/amazonaws/services/simpleworkflow/flow/interceptors/RetryPolicy;Lcom/amazonaws/services/simpleworkflow/flow/WorkflowClock;)V
      31: astore        5
      33: aload_0
      34: aload_1
      35: invokestatic  #218                // Method ajc$inlineAccessMethod$com_amazonaws_services_simpleworkflow_flow_aspectj_ExponentialRetryAspect$com_amazonaws_services_simpleworkflow_flow_aspectj_ExponentialRetryAspect$isVoidReturnType:(Lcom/amazonaws/services/simpleworkflow/flow/aspectj/ExponentialRetryAspect;Lorg/aspectj/lang/ProceedingJoinPoint;)Z
      38: ifeq          47
      41: aconst_null
      42: astore        6
      44: goto          56
      47: new           #51                 // class com/amazonaws/services/simpleworkflow/flow/core/Settable
      50: dup
      51: invokespecial #53                 // Method com/amazonaws/services/simpleworkflow/flow/core/Settable."<init>":()V
      54: astore        6
      56: new           #54                 // class com/amazonaws/services/simpleworkflow/flow/aspectj/ExponentialRetryAspect$DecoratorInvocationHandler
      59: dup
      60: aload_0
      61: aload_1
      62: aload         6
      64: invokespecial #56                 // Method com/amazonaws/services/simpleworkflow/flow/aspectj/ExponentialRetryAspect$DecoratorInvocationHandler."<init>":(Lcom/amazonaws/services/simpleworkflow/flow/aspectj/ExponentialRetryAspect;Lorg/aspectj/lang/ProceedingJoinPoint;Lcom/amazonaws/services/simpleworkflow/flow/core/Settable;)V
      67: astore        7
      69: aload         5
      71: aload         7
      73: invokeinterface #59,  2           // InterfaceMethod com/amazonaws/services/simpleworkflow/flow/interceptors/AsyncExecutor.execute:(Lcom/amazonaws/services/simpleworkflow/flow/interceptors/AsyncRunnable;)V
      78: aload         6
      80: areturn

  private boolean isVoidReturnType(org.aspectj.lang.ProceedingJoinPoint);
    Code:
       0: iconst_0
       1: istore_2
       2: aload_1
       3: invokeinterface #86,  1           // InterfaceMethod org/aspectj/lang/ProceedingJoinPoint.getStaticPart:()Lorg/aspectj/lang/JoinPoint$StaticPart;
       8: invokeinterface #92,  1           // InterfaceMethod org/aspectj/lang/JoinPoint$StaticPart.getSignature:()Lorg/aspectj/lang/Signature;
      13: astore_3
      14: aload_3
      15: instanceof    #98                 // class org/aspectj/lang/reflect/MethodSignature
      18: ifeq          50
      21: aload_3
      22: checkcast     #98                 // class org/aspectj/lang/reflect/MethodSignature
      25: astore        4
      27: aload         4
      29: ifnull        48
      32: getstatic     #100                // Field java/lang/Void.TYPE:Ljava/lang/Class;
      35: aload         4
      37: invokeinterface #106,  1          // InterfaceMethod org/aspectj/lang/reflect/MethodSignature.getReturnType:()Ljava/lang/Class;
      42: invokevirtual #110                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      45: goto          49
      48: iconst_0
      49: istore_2
      50: iload_2
      51: ireturn

  private com.amazonaws.services.simpleworkflow.flow.interceptors.ExponentialRetryPolicy createExponentialRetryPolicy(com.amazonaws.services.simpleworkflow.flow.annotations.ExponentialRetry);
    Code:
       0: new           #82                 // class com/amazonaws/services/simpleworkflow/flow/interceptors/ExponentialRetryPolicy
       3: dup
       4: aload_1
       5: invokeinterface #121,  1          // InterfaceMethod com/amazonaws/services/simpleworkflow/flow/annotations/ExponentialRetry.initialRetryIntervalSeconds:()J
      10: invokespecial #127                // Method com/amazonaws/services/simpleworkflow/flow/interceptors/ExponentialRetryPolicy."<init>":(J)V
      13: aload_1
      14: invokeinterface #130,  1          // InterfaceMethod com/amazonaws/services/simpleworkflow/flow/annotations/ExponentialRetry.exceptionsToRetry:()[Ljava/lang/Class;
      19: invokestatic  #134                // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
      22: invokevirtual #140                // Method com/amazonaws/services/simpleworkflow/flow/interceptors/ExponentialRetryPolicy.withExceptionsToRetry:(Ljava/util/Collection;)Lcom/amazonaws/services/simpleworkflow/flow/interceptors/ExponentialRetryPolicy;
      25: aload_1
      26: invokeinterface #144,  1          // InterfaceMethod com/amazonaws/services/simpleworkflow/flow/annotations/ExponentialRetry.excludeExceptions:()[Ljava/lang/Class;
      31: invokestatic  #134                // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
      34: invokevirtual #147                // Method com/amazonaws/services/simpleworkflow/flow/interceptors/ExponentialRetryPolicy.withExceptionsToExclude:(Ljava/util/Collection;)Lcom/amazonaws/services/simpleworkflow/flow/interceptors/ExponentialRetryPolicy;
      37: aload_1
      38: invokeinterface #150,  1          // InterfaceMethod com/amazonaws/services/simpleworkflow/flow/annotations/ExponentialRetry.backoffCoefficient:()D
      43: invokevirtual #154                // Method com/amazonaws/services/simpleworkflow/flow/interceptors/ExponentialRetryPolicy.withBackoffCoefficient:(D)Lcom/amazonaws/services/simpleworkflow/flow/interceptors/ExponentialRetryPolicy;
      46: aload_1
      47: invokeinterface #158,  1          // InterfaceMethod com/amazonaws/services/simpleworkflow/flow/annotations/ExponentialRetry.maximumRetryIntervalSeconds:()J
      52: invokevirtual #161                // Method com/amazonaws/services/simpleworkflow/flow/interceptors/ExponentialRetryPolicy.withMaximumRetryIntervalSeconds:(J)Lcom/amazonaws/services/simpleworkflow/flow/interceptors/ExponentialRetryPolicy;
      55: aload_1
      56: invokeinterface #165,  1          // InterfaceMethod com/amazonaws/services/simpleworkflow/flow/annotations/ExponentialRetry.retryExpirationSeconds:()J
      61: invokevirtual #168                // Method com/amazonaws/services/simpleworkflow/flow/interceptors/ExponentialRetryPolicy.withRetryExpirationIntervalSeconds:(J)Lcom/amazonaws/services/simpleworkflow/flow/interceptors/ExponentialRetryPolicy;
      64: aload_1
      65: invokeinterface #171,  1          // InterfaceMethod com/amazonaws/services/simpleworkflow/flow/annotations/ExponentialRetry.maximumAttempts:()I
      70: invokevirtual #175                // Method com/amazonaws/services/simpleworkflow/flow/interceptors/ExponentialRetryPolicy.withMaximumAttempts:(I)Lcom/amazonaws/services/simpleworkflow/flow/interceptors/ExponentialRetryPolicy;
      73: astore_2
      74: aload_2
      75: invokevirtual #179                // Method com/amazonaws/services/simpleworkflow/flow/interceptors/ExponentialRetryPolicy.validate:()V
      78: aload_2
      79: areturn

  public static com.amazonaws.services.simpleworkflow.flow.aspectj.ExponentialRetryAspect aspectOf();
    Code:
       0: getstatic     #196                // Field ajc$perSingletonInstance:Lcom/amazonaws/services/simpleworkflow/flow/aspectj/ExponentialRetryAspect;
       3: ifnonnull     19
       6: new           #198                // class org/aspectj/lang/NoAspectBoundException
       9: dup
      10: ldc           #200                // String com.amazonaws.services.simpleworkflow.flow.aspectj.ExponentialRetryAspect
      12: getstatic     #202                // Field ajc$initFailureCause:Ljava/lang/Throwable;
      15: invokespecial #205                // Method org/aspectj/lang/NoAspectBoundException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      18: athrow
      19: getstatic     #196                // Field ajc$perSingletonInstance:Lcom/amazonaws/services/simpleworkflow/flow/aspectj/ExponentialRetryAspect;
      22: areturn

  public static boolean hasAspect();
    Code:
       0: getstatic     #196                // Field ajc$perSingletonInstance:Lcom/amazonaws/services/simpleworkflow/flow/aspectj/ExponentialRetryAspect;
       3: ifnull        8
       6: iconst_1
       7: ireturn
       8: iconst_0
       9: ireturn

  private static void ajc$postClinit();
    Code:
       0: new           #1                  // class com/amazonaws/services/simpleworkflow/flow/aspectj/ExponentialRetryAspect
       3: dup
       4: invokespecial #206                // Method "<init>":()V
       7: putstatic     #196                // Field ajc$perSingletonInstance:Lcom/amazonaws/services/simpleworkflow/flow/aspectj/ExponentialRetryAspect;
      10: return

  static {};
    Code:
       0: nop
       1: invokestatic  #209                // Method ajc$postClinit:()V
       4: goto          12
       7: astore_0
       8: aload_0
       9: putstatic     #202                // Field ajc$initFailureCause:Ljava/lang/Throwable;
      12: return
    Exception table:
       from    to  target type
           1     7     7   Class java/lang/Throwable

  public static boolean ajc$inlineAccessMethod$com_amazonaws_services_simpleworkflow_flow_aspectj_ExponentialRetryAspect$com_amazonaws_services_simpleworkflow_flow_aspectj_ExponentialRetryAspect$isVoidReturnType(com.amazonaws.services.simpleworkflow.flow.aspectj.ExponentialRetryAspect, org.aspectj.lang.ProceedingJoinPoint);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #47                 // Method isVoidReturnType:(Lorg/aspectj/lang/ProceedingJoinPoint;)Z
       5: ireturn

  public static com.amazonaws.services.simpleworkflow.flow.interceptors.ExponentialRetryPolicy ajc$inlineAccessMethod$com_amazonaws_services_simpleworkflow_flow_aspectj_ExponentialRetryAspect$com_amazonaws_services_simpleworkflow_flow_aspectj_ExponentialRetryAspect$createExponentialRetryPolicy(com.amazonaws.services.simpleworkflow.flow.aspectj.ExponentialRetryAspect, com.amazonaws.services.simpleworkflow.flow.annotations.ExponentialRetry);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #25                 // Method createExponentialRetryPolicy:(Lcom/amazonaws/services/simpleworkflow/flow/annotations/ExponentialRetry;)Lcom/amazonaws/services/simpleworkflow/flow/interceptors/ExponentialRetryPolicy;
       5: areturn
}
