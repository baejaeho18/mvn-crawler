Compiled from "GenericWorker.java"
public abstract class com.amazonaws.services.simpleworkflow.flow.worker.GenericWorker implements com.amazonaws.services.simpleworkflow.flow.WorkerBase {
  private static final org.apache.commons.logging.Log log;

  protected static final int MAX_IDENTITY_LENGTH;

  protected com.amazonaws.services.simpleworkflow.AmazonSimpleWorkflow service;

  protected java.lang.String domain;

  protected boolean registerDomain;

  protected long domainRetentionPeriodInDays;

  private java.lang.String taskListToPoll;

  private int maximumPollRateIntervalMilliseconds;

  private double maximumPollRatePerSecond;

  private double pollBackoffCoefficient;

  private long pollBackoffInitialInterval;

  private long pollBackoffMaximumInterval;

  private boolean disableTypeRegitrationOnStart;

  private boolean disableServiceShutdownOnStop;

  private java.util.concurrent.ThreadPoolExecutor pollExecutor;

  private java.lang.String identity;

  protected final java.util.concurrent.atomic.AtomicReference<java.util.concurrent.CountDownLatch> suspendLatch;

  private int pollThreadCount;

  private com.amazonaws.services.simpleworkflow.flow.worker.BackoffThrottler pollBackoffThrottler;

  private com.amazonaws.services.simpleworkflow.flow.worker.Throttler pollRateThrottler;

  protected java.lang.Thread$UncaughtExceptionHandler uncaughtExceptionHandler;

  private com.amazonaws.services.simpleworkflow.flow.worker.TaskPoller poller;

  static {};
    Code:
       0: ldc           #1                  // class com/amazonaws/services/simpleworkflow/flow/worker/GenericWorker
       2: invokestatic  #49                 // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
       5: putstatic     #55                 // Field log:Lorg/apache/commons/logging/Log;
       8: return

  public com.amazonaws.services.simpleworkflow.flow.worker.GenericWorker(com.amazonaws.services.simpleworkflow.AmazonSimpleWorkflow, java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #62                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: ldc2_w        #64                 // long -1l
       8: putfield      #66                 // Field domainRetentionPeriodInDays:J
      11: aload_0
      12: sipush        1000
      15: putfield      #68                 // Field maximumPollRateIntervalMilliseconds:I
      18: aload_0
      19: ldc2_w        #70                 // double 2.0d
      22: putfield      #72                 // Field pollBackoffCoefficient:D
      25: aload_0
      26: ldc2_w        #74                 // long 100l
      29: putfield      #76                 // Field pollBackoffInitialInterval:J
      32: aload_0
      33: ldc2_w        #78                 // long 60000l
      36: putfield      #80                 // Field pollBackoffMaximumInterval:J
      39: aload_0
      40: invokestatic  #82                 // Method java/lang/management/ManagementFactory.getRuntimeMXBean:()Ljava/lang/management/RuntimeMXBean;
      43: invokeinterface #88,  1           // InterfaceMethod java/lang/management/RuntimeMXBean.getName:()Ljava/lang/String;
      48: putfield      #94                 // Field identity:Ljava/lang/String;
      51: aload_0
      52: new           #96                 // class java/util/concurrent/atomic/AtomicReference
      55: dup
      56: invokespecial #98                 // Method java/util/concurrent/atomic/AtomicReference."<init>":()V
      59: putfield      #99                 // Field suspendLatch:Ljava/util/concurrent/atomic/AtomicReference;
      62: aload_0
      63: iconst_1
      64: putfield      #101                // Field pollThreadCount:I
      67: aload_0
      68: new           #103                // class com/amazonaws/services/simpleworkflow/flow/worker/GenericWorker$1
      71: dup
      72: aload_0
      73: invokespecial #105                // Method com/amazonaws/services/simpleworkflow/flow/worker/GenericWorker$1."<init>":(Lcom/amazonaws/services/simpleworkflow/flow/worker/GenericWorker;)V
      76: putfield      #108                // Field uncaughtExceptionHandler:Ljava/lang/Thread$UncaughtExceptionHandler;
      79: aload_0
      80: aload_1
      81: putfield      #110                // Field service:Lcom/amazonaws/services/simpleworkflow/AmazonSimpleWorkflow;
      84: aload_0
      85: aload_2
      86: putfield      #112                // Field domain:Ljava/lang/String;
      89: aload_0
      90: aload_3
      91: putfield      #114                // Field taskListToPoll:Ljava/lang/String;
      94: return

  public com.amazonaws.services.simpleworkflow.flow.worker.GenericWorker();
    Code:
       0: aload_0
       1: invokespecial #62                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: ldc2_w        #64                 // long -1l
       8: putfield      #66                 // Field domainRetentionPeriodInDays:J
      11: aload_0
      12: sipush        1000
      15: putfield      #68                 // Field maximumPollRateIntervalMilliseconds:I
      18: aload_0
      19: ldc2_w        #70                 // double 2.0d
      22: putfield      #72                 // Field pollBackoffCoefficient:D
      25: aload_0
      26: ldc2_w        #74                 // long 100l
      29: putfield      #76                 // Field pollBackoffInitialInterval:J
      32: aload_0
      33: ldc2_w        #78                 // long 60000l
      36: putfield      #80                 // Field pollBackoffMaximumInterval:J
      39: aload_0
      40: invokestatic  #82                 // Method java/lang/management/ManagementFactory.getRuntimeMXBean:()Ljava/lang/management/RuntimeMXBean;
      43: invokeinterface #88,  1           // InterfaceMethod java/lang/management/RuntimeMXBean.getName:()Ljava/lang/String;
      48: putfield      #94                 // Field identity:Ljava/lang/String;
      51: aload_0
      52: new           #96                 // class java/util/concurrent/atomic/AtomicReference
      55: dup
      56: invokespecial #98                 // Method java/util/concurrent/atomic/AtomicReference."<init>":()V
      59: putfield      #99                 // Field suspendLatch:Ljava/util/concurrent/atomic/AtomicReference;
      62: aload_0
      63: iconst_1
      64: putfield      #101                // Field pollThreadCount:I
      67: aload_0
      68: new           #103                // class com/amazonaws/services/simpleworkflow/flow/worker/GenericWorker$1
      71: dup
      72: aload_0
      73: invokespecial #105                // Method com/amazonaws/services/simpleworkflow/flow/worker/GenericWorker$1."<init>":(Lcom/amazonaws/services/simpleworkflow/flow/worker/GenericWorker;)V
      76: putfield      #108                // Field uncaughtExceptionHandler:Ljava/lang/Thread$UncaughtExceptionHandler;
      79: aload_0
      80: invokestatic  #82                 // Method java/lang/management/ManagementFactory.getRuntimeMXBean:()Ljava/lang/management/RuntimeMXBean;
      83: invokeinterface #88,  1           // InterfaceMethod java/lang/management/RuntimeMXBean.getName:()Ljava/lang/String;
      88: putfield      #94                 // Field identity:Ljava/lang/String;
      91: aload_0
      92: getfield      #94                 // Field identity:Ljava/lang/String;
      95: invokevirtual #118                // Method java/lang/String.length:()I
      98: sipush        256
     101: invokestatic  #124                // Method java/lang/Math.min:(II)I
     104: istore_1
     105: aload_0
     106: aload_0
     107: getfield      #94                 // Field identity:Ljava/lang/String;
     110: iconst_0
     111: iload_1
     112: invokevirtual #130                // Method java/lang/String.substring:(II)Ljava/lang/String;
     115: putfield      #94                 // Field identity:Ljava/lang/String;
     118: return

  public com.amazonaws.services.simpleworkflow.AmazonSimpleWorkflow getService();
    Code:
       0: aload_0
       1: getfield      #110                // Field service:Lcom/amazonaws/services/simpleworkflow/AmazonSimpleWorkflow;
       4: areturn

  public void setService(com.amazonaws.services.simpleworkflow.AmazonSimpleWorkflow);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #110                // Field service:Lcom/amazonaws/services/simpleworkflow/AmazonSimpleWorkflow;
       5: return

  public java.lang.String getDomain();
    Code:
       0: aload_0
       1: getfield      #112                // Field domain:Ljava/lang/String;
       4: areturn

  public void setDomain(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #112                // Field domain:Ljava/lang/String;
       5: return

  public boolean isRegisterDomain();
    Code:
       0: aload_0
       1: getfield      #143                // Field registerDomain:Z
       4: ireturn

  public void setRegisterDomain(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #143                // Field registerDomain:Z
       5: return

  public long getDomainRetentionPeriodInDays();
    Code:
       0: aload_0
       1: getfield      #66                 // Field domainRetentionPeriodInDays:J
       4: lreturn

  public void setDomainRetentionPeriodInDays(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #66                 // Field domainRetentionPeriodInDays:J
       5: return

  public java.lang.String getTaskListToPoll();
    Code:
       0: aload_0
       1: getfield      #114                // Field taskListToPoll:Ljava/lang/String;
       4: areturn

  public void setTaskListToPoll(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #114                // Field taskListToPoll:Ljava/lang/String;
       5: return

  public double getMaximumPollRatePerSecond();
    Code:
       0: aload_0
       1: getfield      #155                // Field maximumPollRatePerSecond:D
       4: dreturn

  public void setMaximumPollRatePerSecond(double);
    Code:
       0: aload_0
       1: dload_1
       2: putfield      #155                // Field maximumPollRatePerSecond:D
       5: return

  public int getMaximumPollRateIntervalMilliseconds();
    Code:
       0: aload_0
       1: getfield      #68                 // Field maximumPollRateIntervalMilliseconds:I
       4: ireturn

  public void setMaximumPollRateIntervalMilliseconds(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #68                 // Field maximumPollRateIntervalMilliseconds:I
       5: return

  public java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler();
    Code:
       0: aload_0
       1: getfield      #108                // Field uncaughtExceptionHandler:Ljava/lang/Thread$UncaughtExceptionHandler;
       4: areturn

  public void setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #108                // Field uncaughtExceptionHandler:Ljava/lang/Thread$UncaughtExceptionHandler;
       5: return

  public java.lang.String getIdentity();
    Code:
       0: aload_0
       1: getfield      #94                 // Field identity:Ljava/lang/String;
       4: areturn

  public void setIdentity(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #94                 // Field identity:Ljava/lang/String;
       5: return

  public long getPollBackoffInitialInterval();
    Code:
       0: aload_0
       1: getfield      #76                 // Field pollBackoffInitialInterval:J
       4: lreturn

  public void setPollBackoffInitialInterval(long);
    Code:
       0: lload_1
       1: lconst_0
       2: lcmp
       3: ifge          30
       6: new           #170                // class java/lang/IllegalArgumentException
       9: dup
      10: new           #172                // class java/lang/StringBuilder
      13: dup
      14: ldc           #174                // String expected value should be positive or 0:
      16: invokespecial #176                // Method java/lang/StringBuilder."<init>":(Ljava/lang/String;)V
      19: lload_1
      20: invokevirtual #178                // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      23: invokevirtual #182                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      26: invokespecial #185                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      29: athrow
      30: aload_0
      31: lload_1
      32: putfield      #76                 // Field pollBackoffInitialInterval:J
      35: return

  public long getPollBackoffMaximumInterval();
    Code:
       0: aload_0
       1: getfield      #80                 // Field pollBackoffMaximumInterval:J
       4: lreturn

  public void setPollBackoffMaximumInterval(long);
    Code:
       0: lload_1
       1: lconst_0
       2: lcmp
       3: ifgt          30
       6: new           #170                // class java/lang/IllegalArgumentException
       9: dup
      10: new           #172                // class java/lang/StringBuilder
      13: dup
      14: ldc           #190                // String expected value should be positive:
      16: invokespecial #176                // Method java/lang/StringBuilder."<init>":(Ljava/lang/String;)V
      19: lload_1
      20: invokevirtual #178                // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      23: invokevirtual #182                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      26: invokespecial #185                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      29: athrow
      30: aload_0
      31: lload_1
      32: putfield      #80                 // Field pollBackoffMaximumInterval:J
      35: return

  public boolean isDisableServiceShutdownOnStop();
    Code:
       0: aload_0
       1: getfield      #194                // Field disableServiceShutdownOnStop:Z
       4: ireturn

  public void setDisableServiceShutdownOnStop(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #194                // Field disableServiceShutdownOnStop:Z
       5: return

  public double getPollBackoffCoefficient();
    Code:
       0: aload_0
       1: getfield      #72                 // Field pollBackoffCoefficient:D
       4: dreturn

  public void setPollBackoffCoefficient(double);
    Code:
       0: dload_1
       1: dconst_1
       2: dcmpg
       3: ifge          30
       6: new           #170                // class java/lang/IllegalArgumentException
       9: dup
      10: new           #172                // class java/lang/StringBuilder
      13: dup
      14: ldc           #199                // String expected value should be bigger or equal to 1.0:
      16: invokespecial #176                // Method java/lang/StringBuilder."<init>":(Ljava/lang/String;)V
      19: dload_1
      20: invokevirtual #201                // Method java/lang/StringBuilder.append:(D)Ljava/lang/StringBuilder;
      23: invokevirtual #182                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      26: invokespecial #185                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      29: athrow
      30: aload_0
      31: dload_1
      32: putfield      #72                 // Field pollBackoffCoefficient:D
      35: return

  public int getPollThreadCount();
    Code:
       0: aload_0
       1: getfield      #101                // Field pollThreadCount:I
       4: ireturn

  public void setPollThreadCount(int);
    Code:
       0: aload_0
       1: invokevirtual #207                // Method checkStarted:()V
       4: aload_0
       5: iload_1
       6: putfield      #101                // Field pollThreadCount:I
       9: return

  public void setDisableTypeRegistrationOnStart(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #212                // Field disableTypeRegitrationOnStart:Z
       5: return

  public boolean isDisableTypeRegistrationOnStart();
    Code:
       0: aload_0
       1: getfield      #212                // Field disableTypeRegitrationOnStart:Z
       4: ireturn

  public void start();
    Code:
       0: getstatic     #55                 // Field log:Lorg/apache/commons/logging/Log;
       3: invokeinterface #217,  1          // InterfaceMethod org/apache/commons/logging/Log.isInfoEnabled:()Z
       8: ifeq          38
      11: getstatic     #55                 // Field log:Lorg/apache/commons/logging/Log;
      14: new           #172                // class java/lang/StringBuilder
      17: dup
      18: ldc           #222                // String start:
      20: invokespecial #176                // Method java/lang/StringBuilder."<init>":(Ljava/lang/String;)V
      23: aload_0
      24: invokevirtual #224                // Method toString:()Ljava/lang/String;
      27: invokevirtual #225                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      30: invokevirtual #182                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      33: invokeinterface #228,  2          // InterfaceMethod org/apache/commons/logging/Log.info:(Ljava/lang/Object;)V
      38: aload_0
      39: invokevirtual #207                // Method checkStarted:()V
      42: aload_0
      43: aload_0
      44: getfield      #110                // Field service:Lcom/amazonaws/services/simpleworkflow/AmazonSimpleWorkflow;
      47: ldc           #232                // String service
      49: invokevirtual #233                // Method checkRequiredProperty:(Ljava/lang/Object;Ljava/lang/String;)V
      52: aload_0
      53: aload_0
      54: getfield      #112                // Field domain:Ljava/lang/String;
      57: ldc           #237                // String domain
      59: invokevirtual #233                // Method checkRequiredProperty:(Ljava/lang/Object;Ljava/lang/String;)V
      62: aload_0
      63: aload_0
      64: getfield      #114                // Field taskListToPoll:Ljava/lang/String;
      67: ldc           #238                // String taskListToPoll
      69: invokevirtual #233                // Method checkRequiredProperty:(Ljava/lang/Object;Ljava/lang/String;)V
      72: aload_0
      73: invokevirtual #239                // Method checkRequredProperties:()V
      76: aload_0
      77: getfield      #143                // Field registerDomain:Z
      80: ifeq          87
      83: aload_0
      84: invokespecial #242                // Method registerDomain:()V
      87: aload_0
      88: getfield      #212                // Field disableTypeRegitrationOnStart:Z
      91: ifne          98
      94: aload_0
      95: invokevirtual #244                // Method registerTypesToPoll:()V
      98: aload_0
      99: getfield      #155                // Field maximumPollRatePerSecond:D
     102: dconst_0
     103: dcmpl
     104: ifle          146
     107: aload_0
     108: new           #247                // class com/amazonaws/services/simpleworkflow/flow/worker/Throttler
     111: dup
     112: new           #172                // class java/lang/StringBuilder
     115: dup
     116: ldc           #249                // String pollRateThrottler
     118: invokespecial #176                // Method java/lang/StringBuilder."<init>":(Ljava/lang/String;)V
     121: aload_0
     122: getfield      #114                // Field taskListToPoll:Ljava/lang/String;
     125: invokevirtual #225                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     128: invokevirtual #182                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     131: aload_0
     132: getfield      #155                // Field maximumPollRatePerSecond:D
     135: aload_0
     136: getfield      #68                 // Field maximumPollRateIntervalMilliseconds:I
     139: i2l
     140: invokespecial #251                // Method com/amazonaws/services/simpleworkflow/flow/worker/Throttler."<init>":(Ljava/lang/String;DJ)V
     143: putfield      #254                // Field pollRateThrottler:Lcom/amazonaws/services/simpleworkflow/flow/worker/Throttler;
     146: aload_0
     147: new           #256                // class java/util/concurrent/ThreadPoolExecutor
     150: dup
     151: aload_0
     152: getfield      #101                // Field pollThreadCount:I
     155: aload_0
     156: getfield      #101                // Field pollThreadCount:I
     159: lconst_1
     160: getstatic     #258                // Field java/util/concurrent/TimeUnit.MINUTES:Ljava/util/concurrent/TimeUnit;
     163: new           #264                // class java/util/concurrent/LinkedBlockingQueue
     166: dup
     167: aload_0
     168: getfield      #101                // Field pollThreadCount:I
     171: invokespecial #266                // Method java/util/concurrent/LinkedBlockingQueue."<init>":(I)V
     174: invokespecial #268                // Method java/util/concurrent/ThreadPoolExecutor."<init>":(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;)V
     177: putfield      #271                // Field pollExecutor:Ljava/util/concurrent/ThreadPoolExecutor;
     180: aload_0
     181: invokespecial #273                // Method getExecutorThreadFactory:()Lcom/amazonaws/services/simpleworkflow/flow/worker/GenericWorker$ExecutorThreadFactory;
     184: astore_1
     185: aload_0
     186: getfield      #271                // Field pollExecutor:Ljava/util/concurrent/ThreadPoolExecutor;
     189: aload_1
     190: invokevirtual #277                // Method java/util/concurrent/ThreadPoolExecutor.setThreadFactory:(Ljava/util/concurrent/ThreadFactory;)V
     193: aload_0
     194: new           #281                // class com/amazonaws/services/simpleworkflow/flow/worker/BackoffThrottler
     197: dup
     198: aload_0
     199: getfield      #76                 // Field pollBackoffInitialInterval:J
     202: aload_0
     203: getfield      #80                 // Field pollBackoffMaximumInterval:J
     206: aload_0
     207: getfield      #72                 // Field pollBackoffCoefficient:D
     210: invokespecial #283                // Method com/amazonaws/services/simpleworkflow/flow/worker/BackoffThrottler."<init>":(JJD)V
     213: putfield      #286                // Field pollBackoffThrottler:Lcom/amazonaws/services/simpleworkflow/flow/worker/BackoffThrottler;
     216: aload_0
     217: aload_0
     218: invokevirtual #288                // Method createPoller:()Lcom/amazonaws/services/simpleworkflow/flow/worker/TaskPoller;
     221: putfield      #292                // Field poller:Lcom/amazonaws/services/simpleworkflow/flow/worker/TaskPoller;
     224: iconst_0
     225: istore_2
     226: goto          251
     229: aload_0
     230: getfield      #271                // Field pollExecutor:Ljava/util/concurrent/ThreadPoolExecutor;
     233: new           #294                // class com/amazonaws/services/simpleworkflow/flow/worker/GenericWorker$PollServiceTask
     236: dup
     237: aload_0
     238: aload_0
     239: getfield      #292                // Field poller:Lcom/amazonaws/services/simpleworkflow/flow/worker/TaskPoller;
     242: invokespecial #296                // Method com/amazonaws/services/simpleworkflow/flow/worker/GenericWorker$PollServiceTask."<init>":(Lcom/amazonaws/services/simpleworkflow/flow/worker/GenericWorker;Lcom/amazonaws/services/simpleworkflow/flow/worker/TaskPoller;)V
     245: invokevirtual #299                // Method java/util/concurrent/ThreadPoolExecutor.execute:(Ljava/lang/Runnable;)V
     248: iinc          2, 1
     251: iload_2
     252: aload_0
     253: getfield      #101                // Field pollThreadCount:I
     256: if_icmplt     229
     259: return

  private com.amazonaws.services.simpleworkflow.flow.worker.GenericWorker$ExecutorThreadFactory getExecutorThreadFactory();
    Code:
       0: new           #306                // class com/amazonaws/services/simpleworkflow/flow/worker/GenericWorker$ExecutorThreadFactory
       3: dup
       4: aload_0
       5: aload_0
       6: invokevirtual #308                // Method getPollThreadNamePrefix:()Ljava/lang/String;
       9: invokespecial #311                // Method com/amazonaws/services/simpleworkflow/flow/worker/GenericWorker$ExecutorThreadFactory."<init>":(Lcom/amazonaws/services/simpleworkflow/flow/worker/GenericWorker;Ljava/lang/String;)V
      12: astore_1
      13: aload_1
      14: areturn

  protected abstract java.lang.String getPollThreadNamePrefix();

  protected abstract com.amazonaws.services.simpleworkflow.flow.worker.TaskPoller createPoller();

  protected abstract void checkRequredProperties();

  private void registerDomain();
    Code:
       0: aload_0
       1: getfield      #66                 // Field domainRetentionPeriodInDays:J
       4: ldc2_w        #64                 // long -1l
       7: lcmp
       8: ifne          22
      11: new           #314                // class java/lang/IllegalStateException
      14: dup
      15: ldc_w         #316                // String required property domainRetentionPeriodInSeconds is not set
      18: invokespecial #318                // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      21: athrow
      22: aload_0
      23: getfield      #110                // Field service:Lcom/amazonaws/services/simpleworkflow/AmazonSimpleWorkflow;
      26: new           #319                // class com/amazonaws/services/simpleworkflow/model/RegisterDomainRequest
      29: dup
      30: invokespecial #321                // Method com/amazonaws/services/simpleworkflow/model/RegisterDomainRequest."<init>":()V
      33: aload_0
      34: getfield      #112                // Field domain:Ljava/lang/String;
      37: invokevirtual #322                // Method com/amazonaws/services/simpleworkflow/model/RegisterDomainRequest.withName:(Ljava/lang/String;)Lcom/amazonaws/services/simpleworkflow/model/RegisterDomainRequest;
      40: aload_0
      41: getfield      #66                 // Field domainRetentionPeriodInDays:J
      44: invokestatic  #326                // Method java/lang/String.valueOf:(J)Ljava/lang/String;
      47: invokevirtual #330                // Method com/amazonaws/services/simpleworkflow/model/RegisterDomainRequest.withWorkflowExecutionRetentionPeriodInDays:(Ljava/lang/String;)Lcom/amazonaws/services/simpleworkflow/model/RegisterDomainRequest;
      50: invokeinterface #333,  2          // InterfaceMethod com/amazonaws/services/simpleworkflow/AmazonSimpleWorkflow.registerDomain:(Lcom/amazonaws/services/simpleworkflow/model/RegisterDomainRequest;)V
      55: goto          98
      58: pop
      59: getstatic     #55                 // Field log:Lorg/apache/commons/logging/Log;
      62: invokeinterface #338,  1          // InterfaceMethod org/apache/commons/logging/Log.isTraceEnabled:()Z
      67: ifeq          98
      70: getstatic     #55                 // Field log:Lorg/apache/commons/logging/Log;
      73: new           #172                // class java/lang/StringBuilder
      76: dup
      77: ldc_w         #341                // String Domain is already registered:
      80: invokespecial #176                // Method java/lang/StringBuilder."<init>":(Ljava/lang/String;)V
      83: aload_0
      84: getfield      #112                // Field domain:Ljava/lang/String;
      87: invokevirtual #225                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      90: invokevirtual #182                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      93: invokeinterface #343,  2          // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
      98: return
    Exception table:
       from    to  target type
          22    55    58   Class com/amazonaws/services/simpleworkflow/model/DomainAlreadyExistsException

  protected void checkRequiredProperty(java.lang.Object, java.lang.String);
    Code:
       0: aload_1
       1: ifnonnull     35
       4: new           #314                // class java/lang/IllegalStateException
       7: dup
       8: new           #172                // class java/lang/StringBuilder
      11: dup
      12: ldc_w         #348                // String required property
      15: invokespecial #176                // Method java/lang/StringBuilder."<init>":(Ljava/lang/String;)V
      18: aload_2
      19: invokevirtual #225                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      22: ldc_w         #350                // String  is not set
      25: invokevirtual #225                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      28: invokevirtual #182                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      31: invokespecial #318                // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      34: athrow
      35: return

  protected void checkStarted();
    Code:
       0: aload_0
       1: invokespecial #355                // Method isStarted:()Z
       4: ifeq          18
       7: new           #314                // class java/lang/IllegalStateException
      10: dup
      11: ldc_w         #358                // String started
      14: invokespecial #318                // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      17: athrow
      18: return

  private boolean isStarted();
    Code:
       0: aload_0
       1: getfield      #271                // Field pollExecutor:Ljava/util/concurrent/ThreadPoolExecutor;
       4: ifnull        9
       7: iconst_1
       8: ireturn
       9: iconst_0
      10: ireturn

  public void shutdown();
    Code:
       0: getstatic     #55                 // Field log:Lorg/apache/commons/logging/Log;
       3: invokeinterface #217,  1          // InterfaceMethod org/apache/commons/logging/Log.isInfoEnabled:()Z
       8: ifeq          22
      11: getstatic     #55                 // Field log:Lorg/apache/commons/logging/Log;
      14: ldc_w         #361                // String shutdown
      17: invokeinterface #228,  2          // InterfaceMethod org/apache/commons/logging/Log.info:(Ljava/lang/Object;)V
      22: aload_0
      23: invokespecial #355                // Method isStarted:()Z
      26: ifne          30
      29: return
      30: aload_0
      31: getfield      #194                // Field disableServiceShutdownOnStop:Z
      34: ifne          46
      37: aload_0
      38: getfield      #110                // Field service:Lcom/amazonaws/services/simpleworkflow/AmazonSimpleWorkflow;
      41: invokeinterface #362,  1          // InterfaceMethod com/amazonaws/services/simpleworkflow/AmazonSimpleWorkflow.shutdown:()V
      46: aload_0
      47: getfield      #271                // Field pollExecutor:Ljava/util/concurrent/ThreadPoolExecutor;
      50: invokevirtual #364                // Method java/util/concurrent/ThreadPoolExecutor.shutdown:()V
      53: aload_0
      54: getfield      #292                // Field poller:Lcom/amazonaws/services/simpleworkflow/flow/worker/TaskPoller;
      57: invokeinterface #365,  1          // InterfaceMethod com/amazonaws/services/simpleworkflow/flow/worker/TaskPoller.shutdown:()V
      62: return

  public void shutdownNow();
    Code:
       0: getstatic     #55                 // Field log:Lorg/apache/commons/logging/Log;
       3: invokeinterface #217,  1          // InterfaceMethod org/apache/commons/logging/Log.isInfoEnabled:()Z
       8: ifeq          22
      11: getstatic     #55                 // Field log:Lorg/apache/commons/logging/Log;
      14: ldc_w         #369                // String shutdownNow
      17: invokeinterface #228,  2          // InterfaceMethod org/apache/commons/logging/Log.info:(Ljava/lang/Object;)V
      22: aload_0
      23: invokespecial #355                // Method isStarted:()Z
      26: ifne          30
      29: return
      30: aload_0
      31: getfield      #194                // Field disableServiceShutdownOnStop:Z
      34: ifne          46
      37: aload_0
      38: getfield      #110                // Field service:Lcom/amazonaws/services/simpleworkflow/AmazonSimpleWorkflow;
      41: invokeinterface #362,  1          // InterfaceMethod com/amazonaws/services/simpleworkflow/AmazonSimpleWorkflow.shutdown:()V
      46: aload_0
      47: getfield      #271                // Field pollExecutor:Ljava/util/concurrent/ThreadPoolExecutor;
      50: invokevirtual #370                // Method java/util/concurrent/ThreadPoolExecutor.shutdownNow:()Ljava/util/List;
      53: pop
      54: aload_0
      55: getfield      #292                // Field poller:Lcom/amazonaws/services/simpleworkflow/flow/worker/TaskPoller;
      58: invokeinterface #373,  1          // InterfaceMethod com/amazonaws/services/simpleworkflow/flow/worker/TaskPoller.shutdownNow:()V
      63: return

  public boolean awaitTermination(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException;
    Code:
       0: invokestatic  #380                // Method java/lang/System.currentTimeMillis:()J
       3: lstore        4
       5: aload_0
       6: getfield      #271                // Field pollExecutor:Ljava/util/concurrent/ThreadPoolExecutor;
       9: lload_1
      10: aload_3
      11: invokevirtual #385                // Method java/util/concurrent/ThreadPoolExecutor.awaitTermination:(JLjava/util/concurrent/TimeUnit;)Z
      14: istore        6
      16: invokestatic  #380                // Method java/lang/System.currentTimeMillis:()J
      19: lload         4
      21: lsub
      22: lstore        7
      24: getstatic     #387                // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      27: lload_1
      28: aload_3
      29: invokevirtual #390                // Method java/util/concurrent/TimeUnit.convert:(JLjava/util/concurrent/TimeUnit;)J
      32: lload         7
      34: lsub
      35: lstore        9
      37: aload_0
      38: getfield      #292                // Field poller:Lcom/amazonaws/services/simpleworkflow/flow/worker/TaskPoller;
      41: lload         9
      43: getstatic     #387                // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      46: invokeinterface #394,  4          // InterfaceMethod com/amazonaws/services/simpleworkflow/flow/worker/TaskPoller.awaitTermination:(JLjava/util/concurrent/TimeUnit;)Z
      51: ifeq          61
      54: iload         6
      56: ifeq          61
      59: iconst_1
      60: ireturn
      61: iconst_0
      62: ireturn

  public boolean shutdownAndAwaitTermination(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException;
    Code:
       0: aload_0
       1: invokespecial #355                // Method isStarted:()Z
       4: ifne          9
       7: iconst_1
       8: ireturn
       9: invokestatic  #380                // Method java/lang/System.currentTimeMillis:()J
      12: lstore        4
      14: aload_0
      15: getfield      #194                // Field disableServiceShutdownOnStop:Z
      18: ifne          30
      21: aload_0
      22: getfield      #110                // Field service:Lcom/amazonaws/services/simpleworkflow/AmazonSimpleWorkflow;
      25: invokeinterface #362,  1          // InterfaceMethod com/amazonaws/services/simpleworkflow/AmazonSimpleWorkflow.shutdown:()V
      30: aload_0
      31: getfield      #271                // Field pollExecutor:Ljava/util/concurrent/ThreadPoolExecutor;
      34: invokevirtual #370                // Method java/util/concurrent/ThreadPoolExecutor.shutdownNow:()Ljava/util/List;
      37: pop
      38: aload_0
      39: getfield      #271                // Field pollExecutor:Ljava/util/concurrent/ThreadPoolExecutor;
      42: lload_1
      43: aload_3
      44: invokevirtual #385                // Method java/util/concurrent/ThreadPoolExecutor.awaitTermination:(JLjava/util/concurrent/TimeUnit;)Z
      47: pop
      48: goto          65
      51: astore        6
      53: aload_0
      54: getfield      #292                // Field poller:Lcom/amazonaws/services/simpleworkflow/flow/worker/TaskPoller;
      57: invokeinterface #365,  1          // InterfaceMethod com/amazonaws/services/simpleworkflow/flow/worker/TaskPoller.shutdown:()V
      62: aload         6
      64: athrow
      65: aload_0
      66: getfield      #292                // Field poller:Lcom/amazonaws/services/simpleworkflow/flow/worker/TaskPoller;
      69: invokeinterface #365,  1          // InterfaceMethod com/amazonaws/services/simpleworkflow/flow/worker/TaskPoller.shutdown:()V
      74: invokestatic  #380                // Method java/lang/System.currentTimeMillis:()J
      77: lload         4
      79: lsub
      80: lstore        6
      82: getstatic     #387                // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      85: lload_1
      86: aload_3
      87: invokevirtual #390                // Method java/util/concurrent/TimeUnit.convert:(JLjava/util/concurrent/TimeUnit;)J
      90: lload         6
      92: lsub
      93: lstore        8
      95: aload_0
      96: lload         8
      98: getstatic     #387                // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
     101: invokevirtual #401                // Method awaitTermination:(JLjava/util/concurrent/TimeUnit;)Z
     104: ireturn
    Exception table:
       from    to  target type
          38    51    51   any

  public java.lang.String toString();
    Code:
       0: new           #172                // class java/lang/StringBuilder
       3: dup
       4: aload_0
       5: invokevirtual #404                // Method java/lang/Object.getClass:()Ljava/lang/Class;
       8: invokevirtual #408                // Method java/lang/Class.getSimpleName:()Ljava/lang/String;
      11: invokestatic  #413                // Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;
      14: invokespecial #176                // Method java/lang/StringBuilder."<init>":(Ljava/lang/String;)V
      17: ldc_w         #416                // String [service=
      20: invokevirtual #225                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      23: aload_0
      24: getfield      #110                // Field service:Lcom/amazonaws/services/simpleworkflow/AmazonSimpleWorkflow;
      27: invokevirtual #418                // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      30: ldc_w         #421                // String , domain=
      33: invokevirtual #225                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      36: aload_0
      37: getfield      #112                // Field domain:Ljava/lang/String;
      40: invokevirtual #225                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      43: ldc_w         #423                // String , taskListToPoll=
      46: invokevirtual #225                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      49: aload_0
      50: getfield      #114                // Field taskListToPoll:Ljava/lang/String;
      53: invokevirtual #225                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      56: ldc_w         #425                // String , identity=
      59: invokevirtual #225                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      62: aload_0
      63: getfield      #94                 // Field identity:Ljava/lang/String;
      66: invokevirtual #225                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      69: ldc_w         #427                // String , backoffInitialInterval=
      72: invokevirtual #225                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      75: aload_0
      76: getfield      #76                 // Field pollBackoffInitialInterval:J
      79: invokevirtual #178                // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      82: ldc_w         #429                // String , backoffMaximumInterval=
      85: invokevirtual #225                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      88: aload_0
      89: getfield      #80                 // Field pollBackoffMaximumInterval:J
      92: invokevirtual #178                // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      95: ldc_w         #431                // String , backoffCoefficient=
      98: invokevirtual #225                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     101: aload_0
     102: getfield      #72                 // Field pollBackoffCoefficient:D
     105: invokevirtual #201                // Method java/lang/StringBuilder.append:(D)Ljava/lang/StringBuilder;
     108: ldc_w         #433                // String ]
     111: invokevirtual #225                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     114: invokevirtual #182                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     117: areturn

  public boolean isRunning();
    Code:
       0: aload_0
       1: invokespecial #355                // Method isStarted:()Z
       4: ifeq          19
       7: aload_0
       8: getfield      #271                // Field pollExecutor:Ljava/util/concurrent/ThreadPoolExecutor;
      11: invokevirtual #436                // Method java/util/concurrent/ThreadPoolExecutor.isTerminated:()Z
      14: ifne          19
      17: iconst_1
      18: ireturn
      19: iconst_0
      20: ireturn

  public void suspendPolling();
    Code:
       0: getstatic     #55                 // Field log:Lorg/apache/commons/logging/Log;
       3: invokeinterface #217,  1          // InterfaceMethod org/apache/commons/logging/Log.isInfoEnabled:()Z
       8: ifeq          22
      11: getstatic     #55                 // Field log:Lorg/apache/commons/logging/Log;
      14: ldc_w         #440                // String suspendPolling
      17: invokeinterface #228,  2          // InterfaceMethod org/apache/commons/logging/Log.info:(Ljava/lang/Object;)V
      22: aload_0
      23: getfield      #99                 // Field suspendLatch:Ljava/util/concurrent/atomic/AtomicReference;
      26: new           #441                // class java/util/concurrent/CountDownLatch
      29: dup
      30: iconst_1
      31: invokespecial #443                // Method java/util/concurrent/CountDownLatch."<init>":(I)V
      34: invokevirtual #444                // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
      37: return

  public void resumePolling();
    Code:
       0: getstatic     #55                 // Field log:Lorg/apache/commons/logging/Log;
       3: invokeinterface #217,  1          // InterfaceMethod org/apache/commons/logging/Log.isInfoEnabled:()Z
       8: ifeq          22
      11: getstatic     #55                 // Field log:Lorg/apache/commons/logging/Log;
      14: ldc_w         #448                // String resumePolling
      17: invokeinterface #228,  2          // InterfaceMethod org/apache/commons/logging/Log.info:(Ljava/lang/Object;)V
      22: aload_0
      23: getfield      #99                 // Field suspendLatch:Ljava/util/concurrent/atomic/AtomicReference;
      26: aconst_null
      27: invokevirtual #449                // Method java/util/concurrent/atomic/AtomicReference.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;
      30: checkcast     #441                // class java/util/concurrent/CountDownLatch
      33: astore_1
      34: aload_1
      35: ifnull        42
      38: aload_1
      39: invokevirtual #453                // Method java/util/concurrent/CountDownLatch.countDown:()V
      42: return

  static org.apache.commons.logging.Log access$0();
    Code:
       0: getstatic     #55                 // Field log:Lorg/apache/commons/logging/Log;
       3: areturn

  static java.util.concurrent.ThreadPoolExecutor access$1(com.amazonaws.services.simpleworkflow.flow.worker.GenericWorker);
    Code:
       0: aload_0
       1: getfield      #271                // Field pollExecutor:Ljava/util/concurrent/ThreadPoolExecutor;
       4: areturn

  static com.amazonaws.services.simpleworkflow.flow.worker.BackoffThrottler access$2(com.amazonaws.services.simpleworkflow.flow.worker.GenericWorker);
    Code:
       0: aload_0
       1: getfield      #286                // Field pollBackoffThrottler:Lcom/amazonaws/services/simpleworkflow/flow/worker/BackoffThrottler;
       4: areturn

  static com.amazonaws.services.simpleworkflow.flow.worker.Throttler access$3(com.amazonaws.services.simpleworkflow.flow.worker.GenericWorker);
    Code:
       0: aload_0
       1: getfield      #254                // Field pollRateThrottler:Lcom/amazonaws/services/simpleworkflow/flow/worker/Throttler;
       4: areturn
}
