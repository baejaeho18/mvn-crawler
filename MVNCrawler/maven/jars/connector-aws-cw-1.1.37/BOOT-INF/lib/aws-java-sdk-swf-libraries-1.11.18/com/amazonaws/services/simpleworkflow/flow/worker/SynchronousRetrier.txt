Compiled from "SynchronousRetrier.java"
public class com.amazonaws.services.simpleworkflow.flow.worker.SynchronousRetrier {
  private static final org.apache.commons.logging.Log log;

  private final com.amazonaws.services.simpleworkflow.flow.worker.ExponentialRetryParameters retryParameters;

  private final java.lang.Class<?>[] exceptionsToNotRetry;

  static {};
    Code:
       0: ldc           #1                  // class com/amazonaws/services/simpleworkflow/flow/worker/SynchronousRetrier
       2: invokestatic  #16                 // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
       5: putstatic     #22                 // Field log:Lorg/apache/commons/logging/Log;
       8: return

  public com.amazonaws.services.simpleworkflow.flow.worker.SynchronousRetrier(com.amazonaws.services.simpleworkflow.flow.worker.ExponentialRetryParameters, java.lang.Class<?>...);
    Code:
       0: aload_0
       1: invokespecial #30                 // Method java/lang/Object."<init>":()V
       4: aload_1
       5: invokevirtual #32                 // Method com/amazonaws/services/simpleworkflow/flow/worker/ExponentialRetryParameters.getBackoffCoefficient:()D
       8: dconst_0
       9: dcmpg
      10: ifge          23
      13: new           #38                 // class java/lang/IllegalArgumentException
      16: dup
      17: ldc           #40                 // String negative backoffCoefficient
      19: invokespecial #42                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      22: athrow
      23: aload_1
      24: invokevirtual #45                 // Method com/amazonaws/services/simpleworkflow/flow/worker/ExponentialRetryParameters.getInitialInterval:()J
      27: ldc2_w        #49                 // long 10l
      30: lcmp
      31: ifge          61
      34: new           #38                 // class java/lang/IllegalArgumentException
      37: dup
      38: new           #51                 // class java/lang/StringBuilder
      41: dup
      42: ldc           #53                 // String initialInterval cannot be less then 10:
      44: invokespecial #55                 // Method java/lang/StringBuilder."<init>":(Ljava/lang/String;)V
      47: aload_1
      48: invokevirtual #45                 // Method com/amazonaws/services/simpleworkflow/flow/worker/ExponentialRetryParameters.getInitialInterval:()J
      51: invokevirtual #56                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      54: invokevirtual #60                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      57: invokespecial #42                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      60: athrow
      61: aload_1
      62: invokevirtual #64                 // Method com/amazonaws/services/simpleworkflow/flow/worker/ExponentialRetryParameters.getExpirationInterval:()J
      65: aload_1
      66: invokevirtual #45                 // Method com/amazonaws/services/simpleworkflow/flow/worker/ExponentialRetryParameters.getInitialInterval:()J
      69: lcmp
      70: ifge          83
      73: new           #38                 // class java/lang/IllegalArgumentException
      76: dup
      77: ldc           #67                 // String expirationInterval < initialInterval
      79: invokespecial #42                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      82: athrow
      83: aload_1
      84: invokevirtual #69                 // Method com/amazonaws/services/simpleworkflow/flow/worker/ExponentialRetryParameters.getMaximumRetries:()I
      87: aload_1
      88: invokevirtual #73                 // Method com/amazonaws/services/simpleworkflow/flow/worker/ExponentialRetryParameters.getMinimumRetries:()I
      91: if_icmpge     104
      94: new           #38                 // class java/lang/IllegalArgumentException
      97: dup
      98: ldc           #76                 // String maximumRetries < minimumRetries
     100: invokespecial #42                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     103: athrow
     104: aload_0
     105: aload_1
     106: putfield      #78                 // Field retryParameters:Lcom/amazonaws/services/simpleworkflow/flow/worker/ExponentialRetryParameters;
     109: aload_0
     110: aload_2
     111: putfield      #80                 // Field exceptionsToNotRetry:[Ljava/lang/Class;
     114: return

  public com.amazonaws.services.simpleworkflow.flow.worker.ExponentialRetryParameters getRetryParameters();
    Code:
       0: aload_0
       1: getfield      #78                 // Field retryParameters:Lcom/amazonaws/services/simpleworkflow/flow/worker/ExponentialRetryParameters;
       4: areturn

  public java.lang.Class<?>[] getExceptionsToNotRetry();
    Code:
       0: aload_0
       1: getfield      #80                 // Field exceptionsToNotRetry:[Ljava/lang/Class;
       4: areturn

  public void retry(java.lang.Runnable);
    Code:
       0: iconst_0
       1: istore_2
       2: invokestatic  #93                 // Method java/lang/System.currentTimeMillis:()J
       5: lstore_3
       6: new           #98                 // class com/amazonaws/services/simpleworkflow/flow/worker/BackoffThrottler
       9: dup
      10: aload_0
      11: getfield      #78                 // Field retryParameters:Lcom/amazonaws/services/simpleworkflow/flow/worker/ExponentialRetryParameters;
      14: invokevirtual #45                 // Method com/amazonaws/services/simpleworkflow/flow/worker/ExponentialRetryParameters.getInitialInterval:()J
      17: aload_0
      18: getfield      #78                 // Field retryParameters:Lcom/amazonaws/services/simpleworkflow/flow/worker/ExponentialRetryParameters;
      21: invokevirtual #100                // Method com/amazonaws/services/simpleworkflow/flow/worker/ExponentialRetryParameters.getMaximumRetryInterval:()J
      24: aload_0
      25: getfield      #78                 // Field retryParameters:Lcom/amazonaws/services/simpleworkflow/flow/worker/ExponentialRetryParameters;
      28: invokevirtual #32                 // Method com/amazonaws/services/simpleworkflow/flow/worker/ExponentialRetryParameters.getBackoffCoefficient:()D
      31: invokespecial #103                // Method com/amazonaws/services/simpleworkflow/flow/worker/BackoffThrottler."<init>":(JJD)V
      34: astore        5
      36: iconst_0
      37: istore        6
      39: iinc          2, 1
      42: aload         5
      44: invokevirtual #106                // Method com/amazonaws/services/simpleworkflow/flow/worker/BackoffThrottler.throttle:()V
      47: aload_1
      48: invokeinterface #109,  1          // InterfaceMethod java/lang/Runnable.run:()V
      53: iconst_1
      54: istore        6
      56: aload         5
      58: invokevirtual #114                // Method com/amazonaws/services/simpleworkflow/flow/worker/BackoffThrottler.success:()V
      61: goto          185
      64: pop
      65: invokestatic  #117                // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      68: invokevirtual #123                // Method java/lang/Thread.interrupt:()V
      71: return
      72: astore        7
      74: aload         5
      76: invokevirtual #126                // Method com/amazonaws/services/simpleworkflow/flow/worker/BackoffThrottler.failure:()V
      79: aload_0
      80: getfield      #80                 // Field exceptionsToNotRetry:[Ljava/lang/Class;
      83: dup
      84: astore        11
      86: arraylength
      87: istore        10
      89: iconst_0
      90: istore        9
      92: goto          121
      95: aload         11
      97: iload         9
      99: aaload
     100: astore        8
     102: aload         8
     104: aload         7
     106: invokevirtual #129                // Method java/lang/Object.getClass:()Ljava/lang/Class;
     109: invokevirtual #133                // Method java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z
     112: ifeq          118
     115: aload         7
     117: athrow
     118: iinc          9, 1
     121: iload         9
     123: iload         10
     125: if_icmplt     95
     128: invokestatic  #93                 // Method java/lang/System.currentTimeMillis:()J
     131: lload_3
     132: lsub
     133: lstore        8
     135: iload_2
     136: aload_0
     137: getfield      #78                 // Field retryParameters:Lcom/amazonaws/services/simpleworkflow/flow/worker/ExponentialRetryParameters;
     140: invokevirtual #69                 // Method com/amazonaws/services/simpleworkflow/flow/worker/ExponentialRetryParameters.getMaximumRetries:()I
     143: if_icmpgt     170
     146: lload         8
     148: aload_0
     149: getfield      #78                 // Field retryParameters:Lcom/amazonaws/services/simpleworkflow/flow/worker/ExponentialRetryParameters;
     152: invokevirtual #64                 // Method com/amazonaws/services/simpleworkflow/flow/worker/ExponentialRetryParameters.getExpirationInterval:()J
     155: lcmp
     156: iflt          173
     159: iload_2
     160: aload_0
     161: getfield      #78                 // Field retryParameters:Lcom/amazonaws/services/simpleworkflow/flow/worker/ExponentialRetryParameters;
     164: invokevirtual #73                 // Method com/amazonaws/services/simpleworkflow/flow/worker/ExponentialRetryParameters.getMinimumRetries:()I
     167: if_icmple     173
     170: aload         7
     172: athrow
     173: getstatic     #22                 // Field log:Lorg/apache/commons/logging/Log;
     176: ldc           #139                // String Retrying after failure
     178: aload         7
     180: invokeinterface #141,  3          // InterfaceMethod org/apache/commons/logging/Log.warn:(Ljava/lang/Object;Ljava/lang/Throwable;)V
     185: iload         6
     187: ifeq          39
     190: return
    Exception table:
       from    to  target type
          39    61    64   Class java/lang/InterruptedException
          39    61    72   Class java/lang/RuntimeException
}
