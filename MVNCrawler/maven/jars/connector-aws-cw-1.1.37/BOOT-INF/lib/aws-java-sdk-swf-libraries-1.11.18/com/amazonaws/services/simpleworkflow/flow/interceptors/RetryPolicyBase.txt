Compiled from "RetryPolicyBase.java"
public abstract class com.amazonaws.services.simpleworkflow.flow.interceptors.RetryPolicyBase implements com.amazonaws.services.simpleworkflow.flow.interceptors.RetryPolicy {
  private java.util.List<java.lang.Class<? extends java.lang.Throwable>> exceptionsToRetry;

  private java.util.List<java.lang.Class<? extends java.lang.Throwable>> exceptionsToExclude;

  public com.amazonaws.services.simpleworkflow.flow.interceptors.RetryPolicyBase();
    Code:
       0: aload_0
       1: invokespecial #15                 // Method java/lang/Object."<init>":()V
       4: return

  public java.util.List<java.lang.Class<? extends java.lang.Throwable>> getExceptionsToRetry();
    Code:
       0: aload_0
       1: getfield      #25                 // Field exceptionsToRetry:Ljava/util/List;
       4: ifnonnull     30
       7: aload_0
       8: new           #27                 // class java/util/ArrayList
      11: dup
      12: invokespecial #29                 // Method java/util/ArrayList."<init>":()V
      15: putfield      #25                 // Field exceptionsToRetry:Ljava/util/List;
      18: aload_0
      19: getfield      #25                 // Field exceptionsToRetry:Ljava/util/List;
      22: ldc           #30                 // class java/lang/Throwable
      24: invokeinterface #32,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      29: pop
      30: aload_0
      31: getfield      #25                 // Field exceptionsToRetry:Ljava/util/List;
      34: areturn

  public void setExceptionsToRetry(java.util.List<java.lang.Class<? extends java.lang.Throwable>>);
    Code:
       0: new           #27                 // class java/util/ArrayList
       3: dup
       4: invokespecial #29                 // Method java/util/ArrayList."<init>":()V
       7: astore_2
       8: aload_1
       9: ifnull        20
      12: aload_2
      13: aload_1
      14: invokeinterface #42,  2           // InterfaceMethod java/util/List.addAll:(Ljava/util/Collection;)Z
      19: pop
      20: aload_0
      21: aload_2
      22: putfield      #25                 // Field exceptionsToRetry:Ljava/util/List;
      25: return

  public com.amazonaws.services.simpleworkflow.flow.interceptors.RetryPolicyBase withExceptionsToRetry(java.util.Collection<java.lang.Class<? extends java.lang.Throwable>>);
    Code:
       0: new           #27                 // class java/util/ArrayList
       3: dup
       4: invokespecial #29                 // Method java/util/ArrayList."<init>":()V
       7: astore_2
       8: aload_1
       9: ifnull        20
      12: aload_2
      13: aload_1
      14: invokeinterface #42,  2           // InterfaceMethod java/util/List.addAll:(Ljava/util/Collection;)Z
      19: pop
      20: aload_0
      21: aload_2
      22: putfield      #25                 // Field exceptionsToRetry:Ljava/util/List;
      25: aload_0
      26: areturn

  public java.util.List<java.lang.Class<? extends java.lang.Throwable>> getExceptionsToExclude();
    Code:
       0: aload_0
       1: getfield      #54                 // Field exceptionsToExclude:Ljava/util/List;
       4: ifnonnull     18
       7: aload_0
       8: new           #27                 // class java/util/ArrayList
      11: dup
      12: invokespecial #29                 // Method java/util/ArrayList."<init>":()V
      15: putfield      #54                 // Field exceptionsToExclude:Ljava/util/List;
      18: aload_0
      19: getfield      #54                 // Field exceptionsToExclude:Ljava/util/List;
      22: areturn

  public void setExceptionsToExclude(java.util.List<java.lang.Class<? extends java.lang.Throwable>>);
    Code:
       0: new           #27                 // class java/util/ArrayList
       3: dup
       4: invokespecial #29                 // Method java/util/ArrayList."<init>":()V
       7: astore_2
       8: aload_1
       9: ifnull        20
      12: aload_2
      13: aload_1
      14: invokeinterface #42,  2           // InterfaceMethod java/util/List.addAll:(Ljava/util/Collection;)Z
      19: pop
      20: aload_0
      21: aload_2
      22: putfield      #54                 // Field exceptionsToExclude:Ljava/util/List;
      25: return

  public com.amazonaws.services.simpleworkflow.flow.interceptors.RetryPolicyBase withExceptionsToExclude(java.util.Collection<java.lang.Class<? extends java.lang.Throwable>>);
    Code:
       0: new           #27                 // class java/util/ArrayList
       3: dup
       4: invokespecial #29                 // Method java/util/ArrayList."<init>":()V
       7: astore_2
       8: aload_1
       9: ifnull        20
      12: aload_2
      13: aload_1
      14: invokeinterface #42,  2           // InterfaceMethod java/util/List.addAll:(Ljava/util/Collection;)Z
      19: pop
      20: aload_0
      21: aload_2
      22: putfield      #54                 // Field exceptionsToExclude:Ljava/util/List;
      25: aload_0
      26: areturn

  public boolean isRetryable(java.lang.Throwable);
    Code:
       0: iconst_0
       1: istore_2
       2: aload_1
       3: instanceof    #61                 // class com/amazonaws/services/simpleworkflow/flow/DecisionException
       6: ifeq          21
       9: aload_1
      10: invokevirtual #63                 // Method java/lang/Throwable.getCause:()Ljava/lang/Throwable;
      13: ifnull        21
      16: aload_1
      17: invokevirtual #63                 // Method java/lang/Throwable.getCause:()Ljava/lang/Throwable;
      20: astore_1
      21: aload_0
      22: invokevirtual #67                 // Method getExceptionsToRetry:()Ljava/util/List;
      25: invokeinterface #69,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      30: astore        4
      32: goto          62
      35: aload         4
      37: invokeinterface #73,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      42: checkcast     #79                 // class java/lang/Class
      45: astore_3
      46: aload_3
      47: aload_1
      48: invokevirtual #81                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      51: invokevirtual #85                 // Method java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z
      54: ifeq          62
      57: iconst_1
      58: istore_2
      59: goto          72
      62: aload         4
      64: invokeinterface #89,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      69: ifne          35
      72: iload_2
      73: ifeq          127
      76: aload_0
      77: invokevirtual #93                 // Method getExceptionsToExclude:()Ljava/util/List;
      80: invokeinterface #69,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      85: astore        4
      87: goto          117
      90: aload         4
      92: invokeinterface #73,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      97: checkcast     #79                 // class java/lang/Class
     100: astore_3
     101: aload_3
     102: aload_1
     103: invokevirtual #81                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
     106: invokevirtual #85                 // Method java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z
     109: ifeq          117
     112: iconst_0
     113: istore_2
     114: goto          127
     117: aload         4
     119: invokeinterface #89,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     124: ifne          90
     127: iload_2
     128: ireturn
}
