Compiled from "ExponentialRetryParameters.java"
public class com.amazonaws.services.simpleworkflow.flow.worker.ExponentialRetryParameters {
  private long initialInterval;

  private double backoffCoefficient;

  private int maximumRetries;

  private long expirationInterval;

  private long maximumRetryInterval;

  private int minimumRetries;

  public com.amazonaws.services.simpleworkflow.flow.worker.ExponentialRetryParameters();
    Code:
       0: aload_0
       1: invokespecial #17                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: ldc2_w        #19                 // long 500l
       8: putfield      #21                 // Field initialInterval:J
      11: aload_0
      12: ldc2_w        #23                 // double 2.0d
      15: putfield      #25                 // Field backoffCoefficient:D
      18: aload_0
      19: ldc           #27                 // int 2147483647
      21: putfield      #28                 // Field maximumRetries:I
      24: aload_0
      25: ldc2_w        #30                 // long 60000l
      28: putfield      #32                 // Field expirationInterval:J
      31: aload_0
      32: ldc2_w        #34                 // long 20000l
      35: putfield      #36                 // Field maximumRetryInterval:J
      38: return

  public long getInitialInterval();
    Code:
       0: aload_0
       1: getfield      #21                 // Field initialInterval:J
       4: lreturn

  public void setInitialInterval(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #21                 // Field initialInterval:J
       5: return

  public double getBackoffCoefficient();
    Code:
       0: aload_0
       1: getfield      #25                 // Field backoffCoefficient:D
       4: dreturn

  public void setBackoffCoefficient(double);
    Code:
       0: aload_0
       1: dload_1
       2: putfield      #25                 // Field backoffCoefficient:D
       5: return

  public int getMaximumRetries();
    Code:
       0: aload_0
       1: getfield      #28                 // Field maximumRetries:I
       4: ireturn

  public void setMaximumRetries(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #28                 // Field maximumRetries:I
       5: return

  public long getExpirationInterval();
    Code:
       0: aload_0
       1: getfield      #32                 // Field expirationInterval:J
       4: lreturn

  public void setExpirationInterval(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #32                 // Field expirationInterval:J
       5: return

  public long getMaximumRetryInterval();
    Code:
       0: aload_0
       1: getfield      #36                 // Field maximumRetryInterval:J
       4: lreturn

  public void setMaximumRetryInterval(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #36                 // Field maximumRetryInterval:J
       5: return

  public int getMinimumRetries();
    Code:
       0: aload_0
       1: getfield      #60                 // Field minimumRetries:I
       4: ireturn

  public void setMinimumRetries(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #60                 // Field minimumRetries:I
       5: return

  public int hashCode();
    Code:
       0: bipush        31
       2: pop
       3: iconst_1
       4: istore_1
       5: aload_0
       6: getfield      #25                 // Field backoffCoefficient:D
       9: invokestatic  #64                 // Method java/lang/Double.doubleToLongBits:(D)J
      12: lstore_2
      13: bipush        31
      15: iload_1
      16: imul
      17: lload_2
      18: lload_2
      19: bipush        32
      21: lushr
      22: lxor
      23: l2i
      24: iadd
      25: istore_1
      26: bipush        31
      28: iload_1
      29: imul
      30: aload_0
      31: getfield      #32                 // Field expirationInterval:J
      34: aload_0
      35: getfield      #32                 // Field expirationInterval:J
      38: bipush        32
      40: lushr
      41: lxor
      42: l2i
      43: iadd
      44: istore_1
      45: bipush        31
      47: iload_1
      48: imul
      49: aload_0
      50: getfield      #21                 // Field initialInterval:J
      53: aload_0
      54: getfield      #21                 // Field initialInterval:J
      57: bipush        32
      59: lushr
      60: lxor
      61: l2i
      62: iadd
      63: istore_1
      64: bipush        31
      66: iload_1
      67: imul
      68: aload_0
      69: getfield      #28                 // Field maximumRetries:I
      72: iadd
      73: istore_1
      74: bipush        31
      76: iload_1
      77: imul
      78: aload_0
      79: getfield      #36                 // Field maximumRetryInterval:J
      82: aload_0
      83: getfield      #36                 // Field maximumRetryInterval:J
      86: bipush        32
      88: lushr
      89: lxor
      90: l2i
      91: iadd
      92: istore_1
      93: bipush        31
      95: iload_1
      96: imul
      97: aload_0
      98: getfield      #60                 // Field minimumRetries:I
     101: iadd
     102: istore_1
     103: iload_1
     104: ireturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: ifnonnull     13
      11: iconst_0
      12: ireturn
      13: aload_0
      14: invokevirtual #74                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      17: aload_1
      18: invokevirtual #74                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      21: if_acmpeq     26
      24: iconst_0
      25: ireturn
      26: aload_1
      27: checkcast     #1                  // class com/amazonaws/services/simpleworkflow/flow/worker/ExponentialRetryParameters
      30: astore_2
      31: aload_0
      32: getfield      #25                 // Field backoffCoefficient:D
      35: invokestatic  #64                 // Method java/lang/Double.doubleToLongBits:(D)J
      38: aload_2
      39: getfield      #25                 // Field backoffCoefficient:D
      42: invokestatic  #64                 // Method java/lang/Double.doubleToLongBits:(D)J
      45: lcmp
      46: ifeq          51
      49: iconst_0
      50: ireturn
      51: aload_0
      52: getfield      #32                 // Field expirationInterval:J
      55: aload_2
      56: getfield      #32                 // Field expirationInterval:J
      59: lcmp
      60: ifeq          65
      63: iconst_0
      64: ireturn
      65: aload_0
      66: getfield      #21                 // Field initialInterval:J
      69: aload_2
      70: getfield      #21                 // Field initialInterval:J
      73: lcmp
      74: ifeq          79
      77: iconst_0
      78: ireturn
      79: aload_0
      80: getfield      #28                 // Field maximumRetries:I
      83: aload_2
      84: getfield      #28                 // Field maximumRetries:I
      87: if_icmpeq     92
      90: iconst_0
      91: ireturn
      92: aload_0
      93: getfield      #36                 // Field maximumRetryInterval:J
      96: aload_2
      97: getfield      #36                 // Field maximumRetryInterval:J
     100: lcmp
     101: ifeq          106
     104: iconst_0
     105: ireturn
     106: aload_0
     107: getfield      #60                 // Field minimumRetries:I
     110: aload_2
     111: getfield      #60                 // Field minimumRetries:I
     114: if_icmpeq     119
     117: iconst_0
     118: ireturn
     119: iconst_1
     120: ireturn
}
