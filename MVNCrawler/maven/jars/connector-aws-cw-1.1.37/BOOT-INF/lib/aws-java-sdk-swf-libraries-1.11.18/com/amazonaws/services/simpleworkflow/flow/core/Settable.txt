Compiled from "Settable.java"
public class com.amazonaws.services.simpleworkflow.flow.core.Settable<V> extends com.amazonaws.services.simpleworkflow.flow.core.Promise<V> {
  private final java.util.List<java.lang.Runnable> callbacks;

  private java.lang.Runnable chainCallback;

  private com.amazonaws.services.simpleworkflow.flow.core.Promise<V> chainedTo;

  private V value;

  private boolean ready;

  private java.lang.String description;

  public com.amazonaws.services.simpleworkflow.flow.core.Settable(V);
    Code:
       0: aload_0
       1: invokespecial #26                 // Method com/amazonaws/services/simpleworkflow/flow/core/Promise."<init>":()V
       4: aload_0
       5: new           #29                 // class java/util/ArrayList
       8: dup
       9: invokespecial #31                 // Method java/util/ArrayList."<init>":()V
      12: putfield      #32                 // Field callbacks:Ljava/util/List;
      15: aload_0
      16: aload_1
      17: invokevirtual #34                 // Method set:(Ljava/lang/Object;)V
      20: return

  public com.amazonaws.services.simpleworkflow.flow.core.Settable();
    Code:
       0: aload_0
       1: invokespecial #26                 // Method com/amazonaws/services/simpleworkflow/flow/core/Promise."<init>":()V
       4: aload_0
       5: new           #29                 // class java/util/ArrayList
       8: dup
       9: invokespecial #31                 // Method java/util/ArrayList."<init>":()V
      12: putfield      #32                 // Field callbacks:Ljava/util/List;
      15: return

  public V get();
    Code:
       0: aload_0
       1: getfield      #46                 // Field ready:Z
       4: ifne          17
       7: new           #48                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #50                 // String not ready
      13: invokespecial #52                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: getfield      #55                 // Field value:Ljava/lang/Object;
      21: areturn

  public boolean isReady();
    Code:
       0: aload_0
       1: getfield      #46                 // Field ready:Z
       4: ireturn

  public void set(V);
    Code:
       0: aload_0
       1: getfield      #46                 // Field ready:Z
       4: ifeq          34
       7: new           #48                 // class java/lang/IllegalStateException
      10: dup
      11: new           #60                 // class java/lang/StringBuilder
      14: dup
      15: ldc           #62                 // String already set to
      17: invokespecial #64                 // Method java/lang/StringBuilder."<init>":(Ljava/lang/String;)V
      20: aload_0
      21: getfield      #55                 // Field value:Ljava/lang/Object;
      24: invokevirtual #65                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      27: invokevirtual #69                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      30: invokespecial #52                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      33: athrow
      34: aload_0
      35: aload_1
      36: putfield      #55                 // Field value:Ljava/lang/Object;
      39: aload_0
      40: iconst_1
      41: putfield      #46                 // Field ready:Z
      44: aload_0
      45: getfield      #32                 // Field callbacks:Ljava/util/List;
      48: invokeinterface #73,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      53: astore_3
      54: goto          73
      57: aload_3
      58: invokeinterface #79,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      63: checkcast     #84                 // class java/lang/Runnable
      66: astore_2
      67: aload_2
      68: invokeinterface #86,  1           // InterfaceMethod java/lang/Runnable.run:()V
      73: aload_3
      74: invokeinterface #89,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      79: ifne          57
      82: return

  public void chain(com.amazonaws.services.simpleworkflow.flow.core.Promise<V>);
    Code:
       0: aload_0
       1: getfield      #46                 // Field ready:Z
       4: ifeq          17
       7: new           #48                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #98                 // String already ready
      13: invokespecial #52                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: getfield      #100                // Field chainCallback:Ljava/lang/Runnable;
      21: ifnull        34
      24: new           #48                 // class java/lang/IllegalStateException
      27: dup
      28: ldc           #102                // String Already chained. Call unchain() to get rid of the previous chaining.
      30: invokespecial #52                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      33: athrow
      34: aload_1
      35: ifnonnull     44
      38: aload_0
      39: aconst_null
      40: invokevirtual #34                 // Method set:(Ljava/lang/Object;)V
      43: return
      44: aload_0
      45: new           #104                // class com/amazonaws/services/simpleworkflow/flow/core/Settable$1
      48: dup
      49: aload_0
      50: aload_1
      51: invokespecial #106                // Method com/amazonaws/services/simpleworkflow/flow/core/Settable$1."<init>":(Lcom/amazonaws/services/simpleworkflow/flow/core/Settable;Lcom/amazonaws/services/simpleworkflow/flow/core/Promise;)V
      54: putfield      #100                // Field chainCallback:Ljava/lang/Runnable;
      57: aload_1
      58: aload_0
      59: getfield      #100                // Field chainCallback:Ljava/lang/Runnable;
      62: invokevirtual #109                // Method com/amazonaws/services/simpleworkflow/flow/core/Promise.addCallback:(Ljava/lang/Runnable;)V
      65: aload_0
      66: aload_1
      67: putfield      #113                // Field chainedTo:Lcom/amazonaws/services/simpleworkflow/flow/core/Promise;
      70: return

  public void unchain();
    Code:
       0: aload_0
       1: getfield      #113                // Field chainedTo:Lcom/amazonaws/services/simpleworkflow/flow/core/Promise;
       4: ifnonnull     8
       7: return
       8: aload_0
       9: getfield      #113                // Field chainedTo:Lcom/amazonaws/services/simpleworkflow/flow/core/Promise;
      12: invokevirtual #117                // Method com/amazonaws/services/simpleworkflow/flow/core/Promise.isReady:()Z
      15: ifeq          28
      18: new           #48                 // class java/lang/IllegalStateException
      21: dup
      22: ldc           #119                // String Cannot unchain from a value which is ready
      24: invokespecial #52                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      27: athrow
      28: aload_0
      29: getfield      #100                // Field chainCallback:Ljava/lang/Runnable;
      32: ifnull        56
      35: aload_0
      36: getfield      #113                // Field chainedTo:Lcom/amazonaws/services/simpleworkflow/flow/core/Promise;
      39: aload_0
      40: getfield      #100                // Field chainCallback:Ljava/lang/Runnable;
      43: invokevirtual #121                // Method com/amazonaws/services/simpleworkflow/flow/core/Promise.removeCallback:(Ljava/lang/Runnable;)V
      46: aload_0
      47: aconst_null
      48: putfield      #100                // Field chainCallback:Ljava/lang/Runnable;
      51: aload_0
      52: aconst_null
      53: putfield      #113                // Field chainedTo:Lcom/amazonaws/services/simpleworkflow/flow/core/Promise;
      56: return

  protected void addCallback(java.lang.Runnable);
    Code:
       0: aload_0
       1: getfield      #46                 // Field ready:Z
       4: ifeq          16
       7: aload_1
       8: invokeinterface #86,  1           // InterfaceMethod java/lang/Runnable.run:()V
      13: goto          27
      16: aload_0
      17: getfield      #32                 // Field callbacks:Ljava/util/List;
      20: aload_1
      21: invokeinterface #124,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      26: pop
      27: return

  protected void removeCallback(java.lang.Runnable);
    Code:
       0: aload_0
       1: getfield      #32                 // Field callbacks:Ljava/util/List;
       4: aload_1
       5: invokeinterface #128,  2          // InterfaceMethod java/util/List.remove:(Ljava/lang/Object;)Z
      10: pop
      11: return

  public java.lang.String getDescription();
    Code:
       0: aload_0
       1: getfield      #132                // Field description:Ljava/lang/String;
       4: ifnonnull     22
       7: aload_0
       8: getfield      #113                // Field chainedTo:Lcom/amazonaws/services/simpleworkflow/flow/core/Promise;
      11: ifnull        22
      14: aload_0
      15: getfield      #113                // Field chainedTo:Lcom/amazonaws/services/simpleworkflow/flow/core/Promise;
      18: invokevirtual #134                // Method com/amazonaws/services/simpleworkflow/flow/core/Promise.getDescription:()Ljava/lang/String;
      21: areturn
      22: aload_0
      23: getfield      #132                // Field description:Ljava/lang/String;
      26: areturn

  public void setDescription(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #132                // Field description:Ljava/lang/String;
       5: return

  public java.lang.String toString();
    Code:
       0: new           #60                 // class java/lang/StringBuilder
       3: dup
       4: ldc           #137                // String Settable [value=
       6: invokespecial #64                 // Method java/lang/StringBuilder."<init>":(Ljava/lang/String;)V
       9: aload_0
      10: getfield      #55                 // Field value:Ljava/lang/Object;
      13: invokevirtual #65                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      16: ldc           #139                // String , ready=
      18: invokevirtual #141                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      21: aload_0
      22: getfield      #46                 // Field ready:Z
      25: invokevirtual #144                // Method java/lang/StringBuilder.append:(Z)Ljava/lang/StringBuilder;
      28: ldc           #147                // String ]
      30: invokevirtual #141                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      33: invokevirtual #69                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      36: areturn
}
