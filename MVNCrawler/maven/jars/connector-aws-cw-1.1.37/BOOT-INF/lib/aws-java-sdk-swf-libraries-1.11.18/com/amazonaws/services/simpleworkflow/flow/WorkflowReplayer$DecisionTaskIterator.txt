Compiled from "WorkflowReplayer.java"
abstract class com.amazonaws.services.simpleworkflow.flow.WorkflowReplayer$DecisionTaskIterator implements java.util.Iterator<com.amazonaws.services.simpleworkflow.model.DecisionTask> {
  private com.amazonaws.services.simpleworkflow.model.DecisionTask next;

  private boolean initialized;

  final com.amazonaws.services.simpleworkflow.flow.WorkflowReplayer this$0;

  private com.amazonaws.services.simpleworkflow.flow.WorkflowReplayer$DecisionTaskIterator(com.amazonaws.services.simpleworkflow.flow.WorkflowReplayer);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #16                 // Field this$0:Lcom/amazonaws/services/simpleworkflow/flow/WorkflowReplayer;
       5: aload_0
       6: invokespecial #18                 // Method java/lang/Object."<init>":()V
       9: return

  protected void initNext();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #27                 // Field initialized:Z
       5: aload_0
       6: aload_0
       7: aconst_null
       8: invokevirtual #29                 // Method getNextHistoryTask:(Ljava/lang/String;)Lcom/amazonaws/services/simpleworkflow/model/DecisionTask;
      11: putfield      #33                 // Field next:Lcom/amazonaws/services/simpleworkflow/model/DecisionTask;
      14: return

  public boolean hasNext();
    Code:
       0: aload_0
       1: getfield      #27                 // Field initialized:Z
       4: ifne          11
       7: aload_0
       8: invokevirtual #37                 // Method initNext:()V
      11: aload_0
      12: getfield      #33                 // Field next:Lcom/amazonaws/services/simpleworkflow/model/DecisionTask;
      15: ifnonnull     20
      18: iconst_0
      19: ireturn
      20: aload_0
      21: getfield      #33                 // Field next:Lcom/amazonaws/services/simpleworkflow/model/DecisionTask;
      24: invokevirtual #39                 // Method com/amazonaws/services/simpleworkflow/model/DecisionTask.getEvents:()Ljava/util/List;
      27: astore_1
      28: aload_1
      29: invokeinterface #45,  1           // InterfaceMethod java/util/List.size:()I
      34: ifne          39
      37: iconst_0
      38: ireturn
      39: aload_0
      40: getfield      #16                 // Field this$0:Lcom/amazonaws/services/simpleworkflow/flow/WorkflowReplayer;
      43: invokestatic  #51                 // Method com/amazonaws/services/simpleworkflow/flow/WorkflowReplayer.access$0:(Lcom/amazonaws/services/simpleworkflow/flow/WorkflowReplayer;)I
      46: ifne          51
      49: iconst_1
      50: ireturn
      51: aload_0
      52: getfield      #33                 // Field next:Lcom/amazonaws/services/simpleworkflow/model/DecisionTask;
      55: invokevirtual #39                 // Method com/amazonaws/services/simpleworkflow/model/DecisionTask.getEvents:()Ljava/util/List;
      58: iconst_0
      59: invokeinterface #57,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      64: checkcast     #61                 // class com/amazonaws/services/simpleworkflow/model/HistoryEvent
      67: astore_2
      68: aload_2
      69: invokevirtual #63                 // Method com/amazonaws/services/simpleworkflow/model/HistoryEvent.getEventId:()Ljava/lang/Long;
      72: invokevirtual #67                 // Method java/lang/Long.longValue:()J
      75: aload_0
      76: getfield      #16                 // Field this$0:Lcom/amazonaws/services/simpleworkflow/flow/WorkflowReplayer;
      79: invokestatic  #51                 // Method com/amazonaws/services/simpleworkflow/flow/WorkflowReplayer.access$0:(Lcom/amazonaws/services/simpleworkflow/flow/WorkflowReplayer;)I
      82: i2l
      83: lcmp
      84: ifgt          89
      87: iconst_1
      88: ireturn
      89: iconst_0
      90: ireturn

  public com.amazonaws.services.simpleworkflow.model.DecisionTask next();
    Code:
       0: aload_0
       1: invokevirtual #81                 // Method hasNext:()Z
       4: ifne          17
       7: new           #83                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #85                 // String hasNext() == false
      13: invokespecial #87                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: getfield      #33                 // Field next:Lcom/amazonaws/services/simpleworkflow/model/DecisionTask;
      21: astore_1
      22: aload_0
      23: getfield      #33                 // Field next:Lcom/amazonaws/services/simpleworkflow/model/DecisionTask;
      26: invokevirtual #90                 // Method com/amazonaws/services/simpleworkflow/model/DecisionTask.getNextPageToken:()Ljava/lang/String;
      29: ifnonnull     40
      32: aload_0
      33: aconst_null
      34: putfield      #33                 // Field next:Lcom/amazonaws/services/simpleworkflow/model/DecisionTask;
      37: goto          55
      40: aload_0
      41: aload_0
      42: aload_0
      43: getfield      #33                 // Field next:Lcom/amazonaws/services/simpleworkflow/model/DecisionTask;
      46: invokevirtual #90                 // Method com/amazonaws/services/simpleworkflow/model/DecisionTask.getNextPageToken:()Ljava/lang/String;
      49: invokevirtual #29                 // Method getNextHistoryTask:(Ljava/lang/String;)Lcom/amazonaws/services/simpleworkflow/model/DecisionTask;
      52: putfield      #33                 // Field next:Lcom/amazonaws/services/simpleworkflow/model/DecisionTask;
      55: aload_1
      56: areturn

  public void remove();
    Code:
       0: new           #96                 // class java/lang/UnsupportedOperationException
       3: dup
       4: invokespecial #98                 // Method java/lang/UnsupportedOperationException."<init>":()V
       7: athrow

  protected java.util.List<com.amazonaws.services.simpleworkflow.model.HistoryEvent> truncateHistory(java.util.List<com.amazonaws.services.simpleworkflow.model.HistoryEvent>);
    Code:
       0: aload_1
       1: invokeinterface #45,  1           // InterfaceMethod java/util/List.size:()I
       6: ifne          11
       9: aconst_null
      10: areturn
      11: aload_0
      12: getfield      #16                 // Field this$0:Lcom/amazonaws/services/simpleworkflow/flow/WorkflowReplayer;
      15: invokestatic  #51                 // Method com/amazonaws/services/simpleworkflow/flow/WorkflowReplayer.access$0:(Lcom/amazonaws/services/simpleworkflow/flow/WorkflowReplayer;)I
      18: ifne          23
      21: aload_1
      22: areturn
      23: aload_1
      24: aload_1
      25: invokeinterface #45,  1           // InterfaceMethod java/util/List.size:()I
      30: iconst_1
      31: isub
      32: invokeinterface #57,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      37: checkcast     #61                 // class com/amazonaws/services/simpleworkflow/model/HistoryEvent
      40: astore_2
      41: aload_2
      42: invokevirtual #63                 // Method com/amazonaws/services/simpleworkflow/model/HistoryEvent.getEventId:()Ljava/lang/Long;
      45: invokevirtual #67                 // Method java/lang/Long.longValue:()J
      48: aload_0
      49: getfield      #16                 // Field this$0:Lcom/amazonaws/services/simpleworkflow/flow/WorkflowReplayer;
      52: invokestatic  #51                 // Method com/amazonaws/services/simpleworkflow/flow/WorkflowReplayer.access$0:(Lcom/amazonaws/services/simpleworkflow/flow/WorkflowReplayer;)I
      55: i2l
      56: lcmp
      57: ifgt          62
      60: aload_1
      61: areturn
      62: new           #103                // class java/util/ArrayList
      65: dup
      66: invokespecial #105                // Method java/util/ArrayList."<init>":()V
      69: astore_3
      70: aload_1
      71: invokeinterface #106,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      76: astore        5
      78: goto          125
      81: aload         5
      83: invokeinterface #110,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      88: checkcast     #61                 // class com/amazonaws/services/simpleworkflow/model/HistoryEvent
      91: astore        4
      93: aload         4
      95: invokevirtual #63                 // Method com/amazonaws/services/simpleworkflow/model/HistoryEvent.getEventId:()Ljava/lang/Long;
      98: invokevirtual #67                 // Method java/lang/Long.longValue:()J
     101: aload_0
     102: getfield      #16                 // Field this$0:Lcom/amazonaws/services/simpleworkflow/flow/WorkflowReplayer;
     105: invokestatic  #51                 // Method com/amazonaws/services/simpleworkflow/flow/WorkflowReplayer.access$0:(Lcom/amazonaws/services/simpleworkflow/flow/WorkflowReplayer;)I
     108: i2l
     109: lcmp
     110: ifle          116
     113: goto          135
     116: aload_3
     117: aload         4
     119: invokeinterface #113,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     124: pop
     125: aload         5
     127: invokeinterface #117,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
     132: ifne          81
     135: aload_3
     136: invokeinterface #45,  1           // InterfaceMethod java/util/List.size:()I
     141: ifne          146
     144: aconst_null
     145: areturn
     146: aload_3
     147: areturn

  protected abstract com.amazonaws.services.simpleworkflow.model.DecisionTask getNextHistoryTask(java.lang.String);

  public java.lang.Object next();
    Code:
       0: aload_0
       1: invokevirtual #121                // Method next:()Lcom/amazonaws/services/simpleworkflow/model/DecisionTask;
       4: areturn

  com.amazonaws.services.simpleworkflow.flow.WorkflowReplayer$DecisionTaskIterator(com.amazonaws.services.simpleworkflow.flow.WorkflowReplayer, com.amazonaws.services.simpleworkflow.flow.WorkflowReplayer$DecisionTaskIterator);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #124                // Method "<init>":(Lcom/amazonaws/services/simpleworkflow/flow/WorkflowReplayer;)V
       5: return
}
