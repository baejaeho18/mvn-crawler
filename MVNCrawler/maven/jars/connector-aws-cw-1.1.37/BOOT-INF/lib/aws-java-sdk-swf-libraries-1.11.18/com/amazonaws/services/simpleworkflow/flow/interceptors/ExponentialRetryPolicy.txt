Compiled from "ExponentialRetryPolicy.java"
public class com.amazonaws.services.simpleworkflow.flow.interceptors.ExponentialRetryPolicy extends com.amazonaws.services.simpleworkflow.flow.interceptors.RetryPolicyBase {
  private final long initialRetryIntervalSeconds;

  private long maximumRetryIntervalSeconds;

  private long retryExpirationIntervalSeconds;

  private double backoffCoefficient;

  private int maximumAttempts;

  public com.amazonaws.services.simpleworkflow.flow.interceptors.ExponentialRetryPolicy(long);
    Code:
       0: aload_0
       1: invokespecial #17                 // Method com/amazonaws/services/simpleworkflow/flow/interceptors/RetryPolicyBase."<init>":()V
       4: aload_0
       5: ldc2_w        #20                 // long -1l
       8: putfield      #22                 // Field maximumRetryIntervalSeconds:J
      11: aload_0
      12: ldc2_w        #20                 // long -1l
      15: putfield      #24                 // Field retryExpirationIntervalSeconds:J
      18: aload_0
      19: ldc2_w        #26                 // double 2.0d
      22: putfield      #28                 // Field backoffCoefficient:D
      25: aload_0
      26: iconst_m1
      27: putfield      #30                 // Field maximumAttempts:I
      30: aload_0
      31: lload_1
      32: putfield      #32                 // Field initialRetryIntervalSeconds:J
      35: return

  public long getInitialRetryIntervalSeconds();
    Code:
       0: aload_0
       1: getfield      #32                 // Field initialRetryIntervalSeconds:J
       4: lreturn

  public long getMaximumRetryIntervalSeconds();
    Code:
       0: aload_0
       1: getfield      #22                 // Field maximumRetryIntervalSeconds:J
       4: lreturn

  public void setMaximumRetryIntervalSeconds(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #22                 // Field maximumRetryIntervalSeconds:J
       5: return

  public com.amazonaws.services.simpleworkflow.flow.interceptors.ExponentialRetryPolicy withMaximumRetryIntervalSeconds(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #22                 // Field maximumRetryIntervalSeconds:J
       5: aload_0
       6: areturn

  public long getRetryExpirationIntervalSeconds();
    Code:
       0: aload_0
       1: getfield      #24                 // Field retryExpirationIntervalSeconds:J
       4: lreturn

  public void setRetryExpirationIntervalSeconds(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #24                 // Field retryExpirationIntervalSeconds:J
       5: return

  public com.amazonaws.services.simpleworkflow.flow.interceptors.ExponentialRetryPolicy withRetryExpirationIntervalSeconds(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #24                 // Field retryExpirationIntervalSeconds:J
       5: aload_0
       6: areturn

  public double getBackoffCoefficient();
    Code:
       0: aload_0
       1: getfield      #28                 // Field backoffCoefficient:D
       4: dreturn

  public void setBackoffCoefficient(double);
    Code:
       0: aload_0
       1: dload_1
       2: putfield      #28                 // Field backoffCoefficient:D
       5: return

  public com.amazonaws.services.simpleworkflow.flow.interceptors.ExponentialRetryPolicy withBackoffCoefficient(double);
    Code:
       0: aload_0
       1: dload_1
       2: putfield      #28                 // Field backoffCoefficient:D
       5: aload_0
       6: areturn

  public int getMaximumAttempts();
    Code:
       0: aload_0
       1: getfield      #30                 // Field maximumAttempts:I
       4: ireturn

  public void setMaximumAttempts(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #30                 // Field maximumAttempts:I
       5: return

  public com.amazonaws.services.simpleworkflow.flow.interceptors.ExponentialRetryPolicy withMaximumAttempts(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #30                 // Field maximumAttempts:I
       5: aload_0
       6: areturn

  public com.amazonaws.services.simpleworkflow.flow.interceptors.ExponentialRetryPolicy withExceptionsToRetry(java.util.Collection<java.lang.Class<? extends java.lang.Throwable>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #63                 // Method com/amazonaws/services/simpleworkflow/flow/interceptors/RetryPolicyBase.withExceptionsToRetry:(Ljava/util/Collection;)Lcom/amazonaws/services/simpleworkflow/flow/interceptors/RetryPolicyBase;
       5: pop
       6: aload_0
       7: areturn

  public com.amazonaws.services.simpleworkflow.flow.interceptors.ExponentialRetryPolicy withExceptionsToExclude(java.util.Collection<java.lang.Class<? extends java.lang.Throwable>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #71                 // Method com/amazonaws/services/simpleworkflow/flow/interceptors/RetryPolicyBase.withExceptionsToExclude:(Ljava/util/Collection;)Lcom/amazonaws/services/simpleworkflow/flow/interceptors/RetryPolicyBase;
       5: pop
       6: aload_0
       7: areturn

  public long nextRetryDelaySeconds(java.util.Date, java.util.Date, int);
    Code:
       0: iload_3
       1: iconst_2
       2: if_icmpge     29
       5: new           #75                 // class java/lang/IllegalArgumentException
       8: dup
       9: new           #77                 // class java/lang/StringBuilder
      12: dup
      13: ldc           #79                 // String attempt is less then 2:
      15: invokespecial #81                 // Method java/lang/StringBuilder."<init>":(Ljava/lang/String;)V
      18: iload_3
      19: invokevirtual #84                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      22: invokevirtual #88                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      25: invokespecial #92                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      28: athrow
      29: aload_0
      30: getfield      #30                 // Field maximumAttempts:I
      33: iconst_m1
      34: if_icmple     49
      37: iload_3
      38: aload_0
      39: getfield      #30                 // Field maximumAttempts:I
      42: if_icmple     49
      45: ldc2_w        #20                 // long -1l
      48: lreturn
      49: aload_0
      50: getfield      #32                 // Field initialRetryIntervalSeconds:J
      53: l2d
      54: aload_0
      55: getfield      #28                 // Field backoffCoefficient:D
      58: iload_3
      59: iconst_2
      60: isub
      61: i2d
      62: invokestatic  #93                 // Method java/lang/Math.pow:(DD)D
      65: dmul
      66: d2l
      67: lstore        4
      69: aload_0
      70: getfield      #22                 // Field maximumRetryIntervalSeconds:J
      73: ldc2_w        #20                 // long -1l
      76: lcmp
      77: ifle          92
      80: lload         4
      82: aload_0
      83: getfield      #22                 // Field maximumRetryIntervalSeconds:J
      86: invokestatic  #99                 // Method java/lang/Math.min:(JJ)J
      89: goto          94
      92: lload         4
      94: lstore        4
      96: aload_2
      97: invokevirtual #103                // Method java/util/Date.getTime:()J
     100: aload_1
     101: invokevirtual #103                // Method java/util/Date.getTime:()J
     104: lsub
     105: ldc2_w        #108                // long 1000l
     108: ldiv
     109: l2i
     110: istore        6
     112: aload_0
     113: getfield      #24                 // Field retryExpirationIntervalSeconds:J
     116: ldc2_w        #20                 // long -1l
     119: lcmp
     120: ifle          141
     123: iload         6
     125: i2l
     126: lload         4
     128: ladd
     129: aload_0
     130: getfield      #24                 // Field retryExpirationIntervalSeconds:J
     133: lcmp
     134: iflt          141
     137: ldc2_w        #20                 // long -1l
     140: lreturn
     141: lload         4
     143: lreturn

  public void validate() throws java.lang.IllegalStateException;
    Code:
       0: aload_0
       1: getfield      #22                 // Field maximumRetryIntervalSeconds:J
       4: ldc2_w        #20                 // long -1l
       7: lcmp
       8: ifle          33
      11: aload_0
      12: getfield      #32                 // Field initialRetryIntervalSeconds:J
      15: aload_0
      16: getfield      #22                 // Field maximumRetryIntervalSeconds:J
      19: lcmp
      20: ifle          33
      23: new           #119                // class java/lang/IllegalStateException
      26: dup
      27: ldc           #121                // String ExponentialRetryPolicy requires maximumRetryIntervalSeconds to have a value larger than initialRetryIntervalSeconds.
      29: invokespecial #123                // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      32: athrow
      33: aload_0
      34: getfield      #24                 // Field retryExpirationIntervalSeconds:J
      37: ldc2_w        #20                 // long -1l
      40: lcmp
      41: ifle          66
      44: aload_0
      45: getfield      #32                 // Field initialRetryIntervalSeconds:J
      48: aload_0
      49: getfield      #24                 // Field retryExpirationIntervalSeconds:J
      52: lcmp
      53: ifle          66
      56: new           #119                // class java/lang/IllegalStateException
      59: dup
      60: ldc           #124                // String ExponentialRetryPolicy requires retryExpirationIntervalSeconds to have a value larger than initialRetryIntervalSeconds.
      62: invokespecial #123                // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      65: athrow
      66: return

  public com.amazonaws.services.simpleworkflow.flow.interceptors.RetryPolicyBase withExceptionsToExclude(java.util.Collection);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #126                // Method withExceptionsToExclude:(Ljava/util/Collection;)Lcom/amazonaws/services/simpleworkflow/flow/interceptors/ExponentialRetryPolicy;
       5: areturn

  public com.amazonaws.services.simpleworkflow.flow.interceptors.RetryPolicyBase withExceptionsToRetry(java.util.Collection);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #128                // Method withExceptionsToRetry:(Ljava/util/Collection;)Lcom/amazonaws/services/simpleworkflow/flow/interceptors/ExponentialRetryPolicy;
       5: areturn
}
