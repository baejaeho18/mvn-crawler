Compiled from "SpringWorkflowDefinitionFactoryFactory.java"
class com.amazonaws.services.simpleworkflow.flow.spring.SpringWorkflowDefinitionFactoryFactory extends com.amazonaws.services.simpleworkflow.flow.generic.WorkflowDefinitionFactoryFactory {
  private final com.amazonaws.services.simpleworkflow.flow.pojo.POJOWorkflowDefinitionFactoryFactory impl;

  private final java.util.Map<java.lang.Class<?>, java.lang.Object> workflowImplementations;

  com.amazonaws.services.simpleworkflow.flow.spring.SpringWorkflowDefinitionFactoryFactory();
    Code:
       0: aload_0
       1: invokespecial #14                 // Method com/amazonaws/services/simpleworkflow/flow/generic/WorkflowDefinitionFactoryFactory."<init>":()V
       4: aload_0
       5: new           #16                 // class com/amazonaws/services/simpleworkflow/flow/spring/SpringWorkflowDefinitionFactoryFactory$1
       8: dup
       9: aload_0
      10: invokespecial #18                 // Method com/amazonaws/services/simpleworkflow/flow/spring/SpringWorkflowDefinitionFactoryFactory$1."<init>":(Lcom/amazonaws/services/simpleworkflow/flow/spring/SpringWorkflowDefinitionFactoryFactory;)V
      13: putfield      #21                 // Field impl:Lcom/amazonaws/services/simpleworkflow/flow/pojo/POJOWorkflowDefinitionFactoryFactory;
      16: aload_0
      17: new           #23                 // class java/util/HashMap
      20: dup
      21: invokespecial #25                 // Method java/util/HashMap."<init>":()V
      24: putfield      #26                 // Field workflowImplementations:Ljava/util/Map;
      27: return

  public com.amazonaws.services.simpleworkflow.flow.generic.WorkflowDefinitionFactory getWorkflowDefinitionFactory(com.amazonaws.services.simpleworkflow.model.WorkflowType);
    Code:
       0: aload_0
       1: getfield      #21                 // Field impl:Lcom/amazonaws/services/simpleworkflow/flow/pojo/POJOWorkflowDefinitionFactoryFactory;
       4: aload_1
       5: invokevirtual #35                 // Method com/amazonaws/services/simpleworkflow/flow/pojo/POJOWorkflowDefinitionFactoryFactory.getWorkflowDefinitionFactory:(Lcom/amazonaws/services/simpleworkflow/model/WorkflowType;)Lcom/amazonaws/services/simpleworkflow/flow/generic/WorkflowDefinitionFactory;
       8: areturn

  public java.lang.Iterable<com.amazonaws.services.simpleworkflow.model.WorkflowType> getWorkflowTypesToRegister();
    Code:
       0: aload_0
       1: getfield      #21                 // Field impl:Lcom/amazonaws/services/simpleworkflow/flow/pojo/POJOWorkflowDefinitionFactoryFactory;
       4: invokevirtual #44                 // Method com/amazonaws/services/simpleworkflow/flow/pojo/POJOWorkflowDefinitionFactoryFactory.getWorkflowTypesToRegister:()Ljava/lang/Iterable;
       7: areturn

  public void setWorkflowImplementations(java.lang.Iterable<java.lang.Object>) throws java.lang.InstantiationException, java.lang.IllegalAccessException;
    Code:
       0: aload_1
       1: invokeinterface #54,  1           // InterfaceMethod java/lang/Iterable.iterator:()Ljava/util/Iterator;
       6: astore_3
       7: goto          22
      10: aload_3
      11: invokeinterface #60,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      16: astore_2
      17: aload_0
      18: aload_2
      19: invokevirtual #66                 // Method addWorkflowImplementation:(Ljava/lang/Object;)V
      22: aload_3
      23: invokeinterface #70,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      28: ifne          10
      31: return

  public java.lang.Iterable<java.lang.Object> getWorkflowImplementations();
    Code:
       0: aload_0
       1: getfield      #26                 // Field workflowImplementations:Ljava/util/Map;
       4: invokeinterface #82,  1           // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
       9: areturn

  public void addWorkflowImplementation(java.lang.Object) throws java.lang.InstantiationException, java.lang.IllegalAccessException;
    Code:
       0: aload_1
       1: invokevirtual #88                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
       4: astore_2
       5: aload_0
       6: getfield      #26                 // Field workflowImplementations:Ljava/util/Map;
       9: aload_2
      10: aload_1
      11: invokeinterface #94,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      16: pop
      17: aload_0
      18: getfield      #21                 // Field impl:Lcom/amazonaws/services/simpleworkflow/flow/pojo/POJOWorkflowDefinitionFactoryFactory;
      21: aload_2
      22: invokevirtual #98                 // Method com/amazonaws/services/simpleworkflow/flow/pojo/POJOWorkflowDefinitionFactoryFactory.addWorkflowImplementationType:(Ljava/lang/Class;)V
      25: return

  public com.amazonaws.services.simpleworkflow.flow.DataConverter getDataConverter();
    Code:
       0: aload_0
       1: getfield      #21                 // Field impl:Lcom/amazonaws/services/simpleworkflow/flow/pojo/POJOWorkflowDefinitionFactoryFactory;
       4: invokevirtual #107                // Method com/amazonaws/services/simpleworkflow/flow/pojo/POJOWorkflowDefinitionFactoryFactory.getDataConverter:()Lcom/amazonaws/services/simpleworkflow/flow/DataConverter;
       7: areturn

  public void setDataConverter(com.amazonaws.services.simpleworkflow.flow.DataConverter);
    Code:
       0: aload_0
       1: getfield      #21                 // Field impl:Lcom/amazonaws/services/simpleworkflow/flow/pojo/POJOWorkflowDefinitionFactoryFactory;
       4: aload_1
       5: invokevirtual #111                // Method com/amazonaws/services/simpleworkflow/flow/pojo/POJOWorkflowDefinitionFactoryFactory.setDataConverter:(Lcom/amazonaws/services/simpleworkflow/flow/DataConverter;)V
       8: return

  static java.util.Map access$0(com.amazonaws.services.simpleworkflow.flow.spring.SpringWorkflowDefinitionFactoryFactory);
    Code:
       0: aload_0
       1: getfield      #26                 // Field workflowImplementations:Ljava/util/Map;
       4: areturn
}
