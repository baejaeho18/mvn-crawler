Compiled from "TestWorkflowClock.java"
public class com.amazonaws.services.simpleworkflow.flow.test.TestWorkflowClock implements com.amazonaws.services.simpleworkflow.flow.WorkflowClock {
  private static final int SECOND;

  private long clockTime;

  private java.util.PriorityQueue<com.amazonaws.services.simpleworkflow.flow.test.TestWorkflowClock$TimerInfo<?>> timers;

  public com.amazonaws.services.simpleworkflow.flow.test.TestWorkflowClock();
    Code:
       0: aload_0
       1: invokespecial #20                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: lconst_0
       6: putfield      #22                 // Field clockTime:J
       9: aload_0
      10: new           #24                 // class java/util/PriorityQueue
      13: dup
      14: invokespecial #26                 // Method java/util/PriorityQueue."<init>":()V
      17: putfield      #27                 // Field timers:Ljava/util/PriorityQueue;
      20: return

  public long currentTimeMillis();
    Code:
       0: aload_0
       1: getfield      #22                 // Field clockTime:J
       4: lreturn

  public void setCurrentTimeMillis(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #22                 // Field clockTime:J
       5: return

  public boolean isReplaying();
    Code:
       0: iconst_0
       1: ireturn

  public com.amazonaws.services.simpleworkflow.flow.core.Promise<java.lang.Void> createTimer(long);
    Code:
       0: aload_0
       1: lload_1
       2: aconst_null
       3: invokevirtual #44                 // Method createTimer:(JLjava/lang/Object;)Lcom/amazonaws/services/simpleworkflow/flow/core/Promise;
       6: areturn

  public <T> com.amazonaws.services.simpleworkflow.flow.core.Promise<T> createTimer(long, T);
    Code:
       0: lload_1
       1: lconst_0
       2: lcmp
       3: ifge          16
       6: new           #49                 // class java/lang/IllegalArgumentException
       9: dup
      10: ldc           #51                 // String negative delaySeconds
      12: invokespecial #53                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      15: athrow
      16: lload_1
      17: lconst_0
      18: lcmp
      19: ifne          27
      22: aload_3
      23: invokestatic  #56                 // Method com/amazonaws/services/simpleworkflow/flow/core/Promise.asPromise:(Ljava/lang/Object;)Lcom/amazonaws/services/simpleworkflow/flow/core/Promise;
      26: areturn
      27: aload_0
      28: getfield      #22                 // Field clockTime:J
      31: lload_1
      32: ldc2_w        #62                 // long 1000l
      35: lmul
      36: ladd
      37: lstore        4
      39: new           #64                 // class com/amazonaws/services/simpleworkflow/flow/test/TestWorkflowClock$TimerInfo
      42: dup
      43: lload         4
      45: aload_3
      46: invokespecial #66                 // Method com/amazonaws/services/simpleworkflow/flow/test/TestWorkflowClock$TimerInfo."<init>":(JLjava/lang/Object;)V
      49: astore        6
      51: new           #69                 // class java/lang/StringBuilder
      54: dup
      55: ldc           #71                 // String delay=
      57: invokespecial #73                 // Method java/lang/StringBuilder."<init>":(Ljava/lang/String;)V
      60: lload_1
      61: invokevirtual #74                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      64: invokevirtual #78                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      67: astore        7
      69: aload         6
      71: new           #69                 // class java/lang/StringBuilder
      74: dup
      75: ldc           #82                 // String createTimer
      77: invokespecial #73                 // Method java/lang/StringBuilder."<init>":(Ljava/lang/String;)V
      80: aload         7
      82: invokevirtual #84                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      85: invokevirtual #78                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      88: invokevirtual #87                 // Method com/amazonaws/services/simpleworkflow/flow/test/TestWorkflowClock$TimerInfo.setResultDescription:(Ljava/lang/String;)V
      91: aload_0
      92: getfield      #27                 // Field timers:Ljava/util/PriorityQueue;
      95: aload         6
      97: invokevirtual #90                 // Method java/util/PriorityQueue.add:(Ljava/lang/Object;)Z
     100: pop
     101: new           #94                 // class com/amazonaws/services/simpleworkflow/flow/test/TestWorkflowClock$1
     104: dup
     105: aload_0
     106: iconst_0
     107: anewarray     #57                 // class com/amazonaws/services/simpleworkflow/flow/core/Promise
     110: aload         6
     112: invokespecial #96                 // Method com/amazonaws/services/simpleworkflow/flow/test/TestWorkflowClock$1."<init>":(Lcom/amazonaws/services/simpleworkflow/flow/test/TestWorkflowClock;[Lcom/amazonaws/services/simpleworkflow/flow/core/Promise;Lcom/amazonaws/services/simpleworkflow/flow/test/TestWorkflowClock$TimerInfo;)V
     115: aload         7
     117: invokevirtual #99                 // Method com/amazonaws/services/simpleworkflow/flow/test/TestWorkflowClock$1.setName:(Ljava/lang/String;)V
     120: aload         6
     122: invokevirtual #102                // Method com/amazonaws/services/simpleworkflow/flow/test/TestWorkflowClock$TimerInfo.getResult:()Lcom/amazonaws/services/simpleworkflow/flow/core/Promise;
     125: areturn

  public java.lang.Long fireTimers();
    Code:
       0: aload_0
       1: getfield      #27                 // Field timers:Ljava/util/PriorityQueue;
       4: invokevirtual #119                // Method java/util/PriorityQueue.peek:()Ljava/lang/Object;
       7: checkcast     #64                 // class com/amazonaws/services/simpleworkflow/flow/test/TestWorkflowClock$TimerInfo
      10: astore_1
      11: aload_1
      12: ifnonnull     17
      15: aconst_null
      16: areturn
      17: aload_1
      18: invokevirtual #123                // Method com/amazonaws/services/simpleworkflow/flow/test/TestWorkflowClock$TimerInfo.getFireTime:()J
      21: lstore_2
      22: lload_2
      23: aload_0
      24: getfield      #22                 // Field clockTime:J
      27: lcmp
      28: ifle          41
      31: lload_2
      32: aload_0
      33: getfield      #22                 // Field clockTime:J
      36: lsub
      37: invokestatic  #126                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      40: areturn
      41: aload_0
      42: getfield      #27                 // Field timers:Ljava/util/PriorityQueue;
      45: invokevirtual #132                // Method java/util/PriorityQueue.poll:()Ljava/lang/Object;
      48: pop
      49: aload_1
      50: invokevirtual #135                // Method com/amazonaws/services/simpleworkflow/flow/test/TestWorkflowClock$TimerInfo.fire:()V
      53: goto          0

  public void advanceSeconds(long);
    Code:
       0: aload_0
       1: lload_1
       2: ldc2_w        #62                 // long 1000l
       5: lmul
       6: invokevirtual #141                // Method advanceMilliseconds:(J)V
       9: return

  public void advanceMilliseconds(long);
    Code:
       0: aload_0
       1: dup
       2: getfield      #22                 // Field clockTime:J
       5: lload_1
       6: ladd
       7: putfield      #22                 // Field clockTime:J
      10: aload_0
      11: getfield      #27                 // Field timers:Ljava/util/PriorityQueue;
      14: invokevirtual #119                // Method java/util/PriorityQueue.peek:()Ljava/lang/Object;
      17: checkcast     #64                 // class com/amazonaws/services/simpleworkflow/flow/test/TestWorkflowClock$TimerInfo
      20: astore_3
      21: aload_3
      22: ifnonnull     28
      25: goto          62
      28: aload_3
      29: invokevirtual #123                // Method com/amazonaws/services/simpleworkflow/flow/test/TestWorkflowClock$TimerInfo.getFireTime:()J
      32: lstore        4
      34: lload         4
      36: aload_0
      37: getfield      #22                 // Field clockTime:J
      40: lcmp
      41: ifle          47
      44: goto          62
      47: aload_3
      48: invokevirtual #135                // Method com/amazonaws/services/simpleworkflow/flow/test/TestWorkflowClock$TimerInfo.fire:()V
      51: aload_0
      52: getfield      #27                 // Field timers:Ljava/util/PriorityQueue;
      55: invokevirtual #132                // Method java/util/PriorityQueue.poll:()Ljava/lang/Object;
      58: pop
      59: goto          10
      62: return

  static java.util.PriorityQueue access$0(com.amazonaws.services.simpleworkflow.flow.test.TestWorkflowClock);
    Code:
       0: aload_0
       1: getfield      #27                 // Field timers:Ljava/util/PriorityQueue;
       4: areturn
}
