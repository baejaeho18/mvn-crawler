Compiled from "TrieKeep.java"
class org.json.zip.TrieKeep extends org.json.zip.Keep {
  private int[] froms;

  private int[] thrus;

  private org.json.zip.TrieKeep$Node root;

  private org.json.Kim[] kims;

  public org.json.zip.TrieKeep(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #1                  // Method org/json/zip/Keep."<init>":(I)V
       5: aload_0
       6: aload_0
       7: getfield      #2                  // Field capacity:I
      10: newarray       int
      12: putfield      #3                  // Field froms:[I
      15: aload_0
      16: aload_0
      17: getfield      #2                  // Field capacity:I
      20: newarray       int
      22: putfield      #4                  // Field thrus:[I
      25: aload_0
      26: aload_0
      27: getfield      #2                  // Field capacity:I
      30: anewarray     #5                  // class org/json/Kim
      33: putfield      #6                  // Field kims:[Lorg/json/Kim;
      36: aload_0
      37: new           #7                  // class org/json/zip/TrieKeep$Node
      40: dup
      41: aload_0
      42: invokespecial #8                  // Method org/json/zip/TrieKeep$Node."<init>":(Lorg/json/zip/TrieKeep;)V
      45: putfield      #9                  // Field root:Lorg/json/zip/TrieKeep$Node;
      48: return

  public org.json.Kim kim(int);
    Code:
       0: aload_0
       1: getfield      #6                  // Field kims:[Lorg/json/Kim;
       4: iload_1
       5: aaload
       6: astore_2
       7: aload_0
       8: getfield      #3                  // Field froms:[I
      11: iload_1
      12: iaload
      13: istore_3
      14: aload_0
      15: getfield      #4                  // Field thrus:[I
      18: iload_1
      19: iaload
      20: istore        4
      22: iload_3
      23: ifne          35
      26: iload         4
      28: aload_2
      29: getfield      #10                 // Field org/json/Kim.length:I
      32: if_icmpeq     71
      35: new           #5                  // class org/json/Kim
      38: dup
      39: aload_2
      40: iload_3
      41: iload         4
      43: invokespecial #11                 // Method org/json/Kim."<init>":(Lorg/json/Kim;II)V
      46: astore_2
      47: aload_0
      48: getfield      #3                  // Field froms:[I
      51: iload_1
      52: iconst_0
      53: iastore
      54: aload_0
      55: getfield      #4                  // Field thrus:[I
      58: iload_1
      59: aload_2
      60: getfield      #10                 // Field org/json/Kim.length:I
      63: iastore
      64: aload_0
      65: getfield      #6                  // Field kims:[Lorg/json/Kim;
      68: iload_1
      69: aload_2
      70: aastore
      71: aload_2
      72: areturn

  public int length(int);
    Code:
       0: aload_0
       1: getfield      #4                  // Field thrus:[I
       4: iload_1
       5: iaload
       6: aload_0
       7: getfield      #3                  // Field froms:[I
      10: iload_1
      11: iaload
      12: isub
      13: ireturn

  public int match(org.json.Kim, int, int);
    Code:
       0: aload_0
       1: getfield      #9                  // Field root:Lorg/json/zip/TrieKeep$Node;
       4: astore        4
       6: iconst_m1
       7: istore        5
       9: iload_2
      10: istore        6
      12: iload         6
      14: iload_3
      15: if_icmpge     64
      18: aload         4
      20: aload_1
      21: iload         6
      23: invokevirtual #12                 // Method org/json/Kim.get:(I)I
      26: invokevirtual #13                 // Method org/json/zip/TrieKeep$Node.get:(I)Lorg/json/zip/TrieKeep$Node;
      29: astore        4
      31: aload         4
      33: ifnonnull     39
      36: goto          64
      39: aload         4
      41: invokestatic  #14                 // Method org/json/zip/TrieKeep$Node.access$000:(Lorg/json/zip/TrieKeep$Node;)I
      44: iconst_m1
      45: if_icmpeq     55
      48: aload         4
      50: invokestatic  #14                 // Method org/json/zip/TrieKeep$Node.access$000:(Lorg/json/zip/TrieKeep$Node;)I
      53: istore        5
      55: iinc          2, 1
      58: iinc          6, 1
      61: goto          12
      64: iload         5
      66: ireturn

  public boolean postMortem(org.json.zip.PostMortem);
    Code:
       0: iconst_1
       1: istore_2
       2: aload_1
       3: checkcast     #15                 // class org/json/zip/TrieKeep
       6: astore_3
       7: aload_0
       8: getfield      #16                 // Field length:I
      11: aload_3
      12: getfield      #16                 // Field length:I
      15: if_icmpeq     57
      18: new           #17                 // class java/lang/StringBuffer
      21: dup
      22: invokespecial #18                 // Method java/lang/StringBuffer."<init>":()V
      25: ldc           #19                 // String \nLength
      27: invokevirtual #20                 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      30: aload_0
      31: getfield      #16                 // Field length:I
      34: invokevirtual #21                 // Method java/lang/StringBuffer.append:(I)Ljava/lang/StringBuffer;
      37: ldc           #22                 // String  <>
      39: invokevirtual #20                 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      42: aload_3
      43: getfield      #16                 // Field length:I
      46: invokevirtual #21                 // Method java/lang/StringBuffer.append:(I)Ljava/lang/StringBuffer;
      49: invokevirtual #23                 // Method java/lang/StringBuffer.toString:()Ljava/lang/String;
      52: invokestatic  #24                 // Method org/json/zip/JSONzip.log:(Ljava/lang/String;)V
      55: iconst_0
      56: ireturn
      57: aload_0
      58: getfield      #2                  // Field capacity:I
      61: aload_3
      62: getfield      #2                  // Field capacity:I
      65: if_icmpeq     107
      68: new           #17                 // class java/lang/StringBuffer
      71: dup
      72: invokespecial #18                 // Method java/lang/StringBuffer."<init>":()V
      75: ldc           #25                 // String \nCapacity
      77: invokevirtual #20                 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      80: aload_0
      81: getfield      #2                  // Field capacity:I
      84: invokevirtual #21                 // Method java/lang/StringBuffer.append:(I)Ljava/lang/StringBuffer;
      87: ldc           #22                 // String  <>
      89: invokevirtual #20                 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      92: aload_3
      93: getfield      #2                  // Field capacity:I
      96: invokevirtual #21                 // Method java/lang/StringBuffer.append:(I)Ljava/lang/StringBuffer;
      99: invokevirtual #23                 // Method java/lang/StringBuffer.toString:()Ljava/lang/String;
     102: invokestatic  #24                 // Method org/json/zip/JSONzip.log:(Ljava/lang/String;)V
     105: iconst_0
     106: ireturn
     107: iconst_0
     108: istore        4
     110: iload         4
     112: aload_0
     113: getfield      #16                 // Field length:I
     116: if_icmpge     196
     119: aload_0
     120: iload         4
     122: invokevirtual #26                 // Method kim:(I)Lorg/json/Kim;
     125: astore        5
     127: aload_3
     128: iload         4
     130: invokevirtual #26                 // Method kim:(I)Lorg/json/Kim;
     133: astore        6
     135: aload         5
     137: aload         6
     139: invokevirtual #27                 // Method org/json/Kim.equals:(Ljava/lang/Object;)Z
     142: ifne          190
     145: new           #17                 // class java/lang/StringBuffer
     148: dup
     149: invokespecial #18                 // Method java/lang/StringBuffer."<init>":()V
     152: ldc           #28                 // String \n[
     154: invokevirtual #20                 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
     157: iload         4
     159: invokevirtual #21                 // Method java/lang/StringBuffer.append:(I)Ljava/lang/StringBuffer;
     162: ldc           #29                 // String ]
     164: invokevirtual #20                 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
     167: aload         5
     169: invokevirtual #30                 // Method java/lang/StringBuffer.append:(Ljava/lang/Object;)Ljava/lang/StringBuffer;
     172: ldc           #22                 // String  <>
     174: invokevirtual #20                 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
     177: aload         6
     179: invokevirtual #30                 // Method java/lang/StringBuffer.append:(Ljava/lang/Object;)Ljava/lang/StringBuffer;
     182: invokevirtual #23                 // Method java/lang/StringBuffer.toString:()Ljava/lang/String;
     185: invokestatic  #24                 // Method org/json/zip/JSONzip.log:(Ljava/lang/String;)V
     188: iconst_0
     189: istore_2
     190: iinc          4, 1
     193: goto          110
     196: iload_2
     197: ifeq          218
     200: aload_0
     201: getfield      #9                  // Field root:Lorg/json/zip/TrieKeep$Node;
     204: aload_3
     205: getfield      #9                  // Field root:Lorg/json/zip/TrieKeep$Node;
     208: invokevirtual #31                 // Method org/json/zip/TrieKeep$Node.postMortem:(Lorg/json/zip/PostMortem;)Z
     211: ifeq          218
     214: iconst_1
     215: goto          219
     218: iconst_0
     219: ireturn

  public void registerMany(org.json.Kim);
    Code:
       0: aload_1
       1: getfield      #10                 // Field org/json/Kim.length:I
       4: istore_2
       5: aload_0
       6: getfield      #2                  // Field capacity:I
       9: aload_0
      10: getfield      #16                 // Field length:I
      13: isub
      14: istore_3
      15: iload_3
      16: bipush        40
      18: if_icmple     24
      21: bipush        40
      23: istore_3
      24: iload_2
      25: iconst_2
      26: isub
      27: istore        4
      29: iconst_0
      30: istore        5
      32: iload         5
      34: iload         4
      36: if_icmpge     199
      39: iload_2
      40: iload         5
      42: isub
      43: istore        6
      45: iload         6
      47: bipush        10
      49: if_icmple     56
      52: bipush        10
      54: istore        6
      56: iload         6
      58: iload         5
      60: iadd
      61: istore        6
      63: aload_0
      64: getfield      #9                  // Field root:Lorg/json/zip/TrieKeep$Node;
      67: astore        7
      69: iload         5
      71: istore        8
      73: iload         8
      75: iload         6
      77: if_icmpge     193
      80: aload         7
      82: aload_1
      83: iload         8
      85: invokevirtual #12                 // Method org/json/Kim.get:(I)I
      88: invokevirtual #32                 // Method org/json/zip/TrieKeep$Node.vet:(I)Lorg/json/zip/TrieKeep$Node;
      91: astore        9
      93: aload         9
      95: invokestatic  #14                 // Method org/json/zip/TrieKeep$Node.access$000:(Lorg/json/zip/TrieKeep$Node;)I
      98: iconst_m1
      99: if_icmpne     183
     102: iload         8
     104: iload         5
     106: isub
     107: iconst_2
     108: if_icmplt     183
     111: aload         9
     113: aload_0
     114: getfield      #16                 // Field length:I
     117: invokestatic  #33                 // Method org/json/zip/TrieKeep$Node.access$002:(Lorg/json/zip/TrieKeep$Node;I)I
     120: pop
     121: aload_0
     122: getfield      #34                 // Field uses:[J
     125: aload_0
     126: getfield      #16                 // Field length:I
     129: lconst_1
     130: lastore
     131: aload_0
     132: getfield      #6                  // Field kims:[Lorg/json/Kim;
     135: aload_0
     136: getfield      #16                 // Field length:I
     139: aload_1
     140: aastore
     141: aload_0
     142: getfield      #3                  // Field froms:[I
     145: aload_0
     146: getfield      #16                 // Field length:I
     149: iload         5
     151: iastore
     152: aload_0
     153: getfield      #4                  // Field thrus:[I
     156: aload_0
     157: getfield      #16                 // Field length:I
     160: iload         8
     162: iconst_1
     163: iadd
     164: iastore
     165: aload_0
     166: dup
     167: getfield      #16                 // Field length:I
     170: iconst_1
     171: iadd
     172: putfield      #16                 // Field length:I
     175: iinc          3, -1
     178: iload_3
     179: ifgt          183
     182: return
     183: aload         9
     185: astore        7
     187: iinc          8, 1
     190: goto          73
     193: iinc          5, 1
     196: goto          32
     199: return

  public void registerOne(org.json.Kim);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_1
       4: getfield      #10                 // Field org/json/Kim.length:I
       7: invokevirtual #35                 // Method registerOne:(Lorg/json/Kim;II)I
      10: istore_2
      11: iload_2
      12: iconst_m1
      13: if_icmpeq     23
      16: aload_0
      17: getfield      #6                  // Field kims:[Lorg/json/Kim;
      20: iload_2
      21: aload_1
      22: aastore
      23: return

  public int registerOne(org.json.Kim, int, int);
    Code:
       0: aload_0
       1: getfield      #16                 // Field length:I
       4: aload_0
       5: getfield      #2                  // Field capacity:I
       8: if_icmpge     113
      11: aload_0
      12: getfield      #9                  // Field root:Lorg/json/zip/TrieKeep$Node;
      15: astore        4
      17: iload_2
      18: istore        5
      20: iload         5
      22: iload_3
      23: if_icmpge     45
      26: aload         4
      28: aload_1
      29: iload         5
      31: invokevirtual #12                 // Method org/json/Kim.get:(I)I
      34: invokevirtual #32                 // Method org/json/zip/TrieKeep$Node.vet:(I)Lorg/json/zip/TrieKeep$Node;
      37: astore        4
      39: iinc          5, 1
      42: goto          20
      45: aload         4
      47: invokestatic  #14                 // Method org/json/zip/TrieKeep$Node.access$000:(Lorg/json/zip/TrieKeep$Node;)I
      50: iconst_m1
      51: if_icmpne     113
      54: aload_0
      55: getfield      #16                 // Field length:I
      58: istore        5
      60: aload         4
      62: iload         5
      64: invokestatic  #33                 // Method org/json/zip/TrieKeep$Node.access$002:(Lorg/json/zip/TrieKeep$Node;I)I
      67: pop
      68: aload_0
      69: getfield      #34                 // Field uses:[J
      72: iload         5
      74: lconst_1
      75: lastore
      76: aload_0
      77: getfield      #6                  // Field kims:[Lorg/json/Kim;
      80: iload         5
      82: aload_1
      83: aastore
      84: aload_0
      85: getfield      #3                  // Field froms:[I
      88: iload         5
      90: iload_2
      91: iastore
      92: aload_0
      93: getfield      #4                  // Field thrus:[I
      96: iload         5
      98: iload_3
      99: iastore
     100: aload_0
     101: dup
     102: getfield      #16                 // Field length:I
     105: iconst_1
     106: iadd
     107: putfield      #16                 // Field length:I
     110: iload         5
     112: ireturn
     113: iconst_m1
     114: ireturn

  public void reserve();
    Code:
       0: aload_0
       1: getfield      #2                  // Field capacity:I
       4: aload_0
       5: getfield      #16                 // Field length:I
       8: isub
       9: bipush        40
      11: if_icmpge     243
      14: iconst_0
      15: istore_1
      16: iconst_0
      17: istore_2
      18: aload_0
      19: new           #7                  // class org/json/zip/TrieKeep$Node
      22: dup
      23: aload_0
      24: invokespecial #8                  // Method org/json/zip/TrieKeep$Node."<init>":(Lorg/json/zip/TrieKeep;)V
      27: putfield      #9                  // Field root:Lorg/json/zip/TrieKeep$Node;
      30: iload_1
      31: aload_0
      32: getfield      #2                  // Field capacity:I
      35: if_icmpge     166
      38: aload_0
      39: getfield      #34                 // Field uses:[J
      42: iload_1
      43: laload
      44: lconst_1
      45: lcmp
      46: ifle          160
      49: aload_0
      50: getfield      #6                  // Field kims:[Lorg/json/Kim;
      53: iload_1
      54: aaload
      55: astore_3
      56: aload_0
      57: getfield      #4                  // Field thrus:[I
      60: iload_1
      61: iaload
      62: istore        4
      64: aload_0
      65: getfield      #9                  // Field root:Lorg/json/zip/TrieKeep$Node;
      68: astore        5
      70: aload_0
      71: getfield      #3                  // Field froms:[I
      74: iload_1
      75: iaload
      76: istore        6
      78: iload         6
      80: iload         4
      82: if_icmpge     108
      85: aload         5
      87: aload_3
      88: iload         6
      90: invokevirtual #12                 // Method org/json/Kim.get:(I)I
      93: invokevirtual #32                 // Method org/json/zip/TrieKeep$Node.vet:(I)Lorg/json/zip/TrieKeep$Node;
      96: astore        7
      98: aload         7
     100: astore        5
     102: iinc          6, 1
     105: goto          78
     108: aload         5
     110: iload_2
     111: invokestatic  #33                 // Method org/json/zip/TrieKeep$Node.access$002:(Lorg/json/zip/TrieKeep$Node;I)I
     114: pop
     115: aload_0
     116: getfield      #34                 // Field uses:[J
     119: iload_2
     120: aload_0
     121: getfield      #34                 // Field uses:[J
     124: iload_1
     125: laload
     126: invokestatic  #36                 // Method age:(J)J
     129: lastore
     130: aload_0
     131: getfield      #3                  // Field froms:[I
     134: iload_2
     135: aload_0
     136: getfield      #3                  // Field froms:[I
     139: iload_1
     140: iaload
     141: iastore
     142: aload_0
     143: getfield      #4                  // Field thrus:[I
     146: iload_2
     147: iload         4
     149: iastore
     150: aload_0
     151: getfield      #6                  // Field kims:[Lorg/json/Kim;
     154: iload_2
     155: aload_3
     156: aastore
     157: iinc          2, 1
     160: iinc          1, 1
     163: goto          30
     166: aload_0
     167: getfield      #2                  // Field capacity:I
     170: iload_2
     171: isub
     172: bipush        40
     174: if_icmpge     196
     177: aload_0
     178: iconst_0
     179: putfield      #37                 // Field power:I
     182: aload_0
     183: new           #7                  // class org/json/zip/TrieKeep$Node
     186: dup
     187: aload_0
     188: invokespecial #8                  // Method org/json/zip/TrieKeep$Node."<init>":(Lorg/json/zip/TrieKeep;)V
     191: putfield      #9                  // Field root:Lorg/json/zip/TrieKeep$Node;
     194: iconst_0
     195: istore_2
     196: aload_0
     197: iload_2
     198: putfield      #16                 // Field length:I
     201: iload_2
     202: aload_0
     203: getfield      #2                  // Field capacity:I
     206: if_icmpge     243
     209: aload_0
     210: getfield      #34                 // Field uses:[J
     213: iload_2
     214: lconst_0
     215: lastore
     216: aload_0
     217: getfield      #6                  // Field kims:[Lorg/json/Kim;
     220: iload_2
     221: aconst_null
     222: aastore
     223: aload_0
     224: getfield      #3                  // Field froms:[I
     227: iload_2
     228: iconst_0
     229: iastore
     230: aload_0
     231: getfield      #4                  // Field thrus:[I
     234: iload_2
     235: iconst_0
     236: iastore
     237: iinc          2, 1
     240: goto          201
     243: return

  public java.lang.Object value(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #26                 // Method kim:(I)Lorg/json/Kim;
       5: areturn
}
