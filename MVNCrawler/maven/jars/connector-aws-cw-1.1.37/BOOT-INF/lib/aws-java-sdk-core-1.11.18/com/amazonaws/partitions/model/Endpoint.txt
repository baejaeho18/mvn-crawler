Compiled from "Endpoint.java"
public class com.amazonaws.partitions.model.Endpoint {
  private java.lang.String hostName;

  private com.amazonaws.partitions.model.CredentialScope credentialScope;

  private java.util.Set<java.lang.String> protocols;

  private java.util.Set<java.lang.String> signatureVersions;

  private java.lang.String sslCommonName;

  public com.amazonaws.partitions.model.Endpoint();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public static com.amazonaws.partitions.model.Endpoint merge(com.amazonaws.partitions.model.Endpoint, com.amazonaws.partitions.model.Endpoint);
    Code:
       0: aload_0
       1: ifnonnull     12
       4: new           #2                  // class com/amazonaws/partitions/model/Endpoint
       7: dup
       8: invokespecial #3                  // Method "<init>":()V
      11: astore_0
      12: aload_1
      13: ifnonnull     24
      16: new           #2                  // class com/amazonaws/partitions/model/Endpoint
      19: dup
      20: invokespecial #3                  // Method "<init>":()V
      23: astore_1
      24: new           #2                  // class com/amazonaws/partitions/model/Endpoint
      27: dup
      28: invokespecial #3                  // Method "<init>":()V
      31: astore_2
      32: aload_2
      33: aload_1
      34: invokevirtual #4                  // Method getCredentialScope:()Lcom/amazonaws/partitions/model/CredentialScope;
      37: ifnull        47
      40: aload_1
      41: invokevirtual #4                  // Method getCredentialScope:()Lcom/amazonaws/partitions/model/CredentialScope;
      44: goto          51
      47: aload_0
      48: invokevirtual #4                  // Method getCredentialScope:()Lcom/amazonaws/partitions/model/CredentialScope;
      51: invokevirtual #5                  // Method setCredentialScope:(Lcom/amazonaws/partitions/model/CredentialScope;)V
      54: aload_2
      55: aload_1
      56: invokevirtual #6                  // Method getHostName:()Ljava/lang/String;
      59: ifnull        69
      62: aload_1
      63: invokevirtual #6                  // Method getHostName:()Ljava/lang/String;
      66: goto          73
      69: aload_0
      70: invokevirtual #6                  // Method getHostName:()Ljava/lang/String;
      73: invokevirtual #7                  // Method setHostName:(Ljava/lang/String;)V
      76: aload_2
      77: aload_1
      78: invokevirtual #8                  // Method getSslCommonName:()Ljava/lang/String;
      81: ifnull        91
      84: aload_1
      85: invokevirtual #8                  // Method getSslCommonName:()Ljava/lang/String;
      88: goto          95
      91: aload_0
      92: invokevirtual #8                  // Method getSslCommonName:()Ljava/lang/String;
      95: invokevirtual #9                  // Method setSslCommonName:(Ljava/lang/String;)V
      98: aload_2
      99: aload_1
     100: invokevirtual #10                 // Method getProtocols:()Ljava/util/Set;
     103: ifnull        113
     106: aload_1
     107: invokevirtual #10                 // Method getProtocols:()Ljava/util/Set;
     110: goto          117
     113: aload_0
     114: invokevirtual #10                 // Method getProtocols:()Ljava/util/Set;
     117: invokevirtual #11                 // Method setProtocols:(Ljava/util/Set;)V
     120: aload_2
     121: aload_1
     122: invokevirtual #12                 // Method getSignatureVersions:()Ljava/util/Set;
     125: ifnull        135
     128: aload_1
     129: invokevirtual #12                 // Method getSignatureVersions:()Ljava/util/Set;
     132: goto          139
     135: aload_0
     136: invokevirtual #12                 // Method getSignatureVersions:()Ljava/util/Set;
     139: invokevirtual #13                 // Method setSignatureVersions:(Ljava/util/Set;)V
     142: aload_2
     143: areturn

  public java.lang.String getHostName();
    Code:
       0: aload_0
       1: getfield      #14                 // Field hostName:Ljava/lang/String;
       4: areturn

  public void setHostName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #14                 // Field hostName:Ljava/lang/String;
       5: return

  public com.amazonaws.partitions.model.CredentialScope getCredentialScope();
    Code:
       0: aload_0
       1: getfield      #15                 // Field credentialScope:Lcom/amazonaws/partitions/model/CredentialScope;
       4: areturn

  public void setCredentialScope(com.amazonaws.partitions.model.CredentialScope);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #15                 // Field credentialScope:Lcom/amazonaws/partitions/model/CredentialScope;
       5: return

  public java.util.Set<java.lang.String> getProtocols();
    Code:
       0: aload_0
       1: getfield      #16                 // Field protocols:Ljava/util/Set;
       4: areturn

  public void setProtocols(java.util.Set<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #16                 // Field protocols:Ljava/util/Set;
       5: return

  public java.util.Set<java.lang.String> getSignatureVersions();
    Code:
       0: aload_0
       1: getfield      #17                 // Field signatureVersions:Ljava/util/Set;
       4: areturn

  public void setSignatureVersions(java.util.Set<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #17                 // Field signatureVersions:Ljava/util/Set;
       5: return

  public java.lang.String getSslCommonName();
    Code:
       0: aload_0
       1: getfield      #18                 // Field sslCommonName:Ljava/lang/String;
       4: areturn

  public void setSslCommonName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #18                 // Field sslCommonName:Ljava/lang/String;
       5: return

  public boolean hasHttpsSupport();
    Code:
       0: aload_0
       1: getstatic     #19                 // Field com/amazonaws/Protocol.HTTPS:Lcom/amazonaws/Protocol;
       4: invokespecial #20                 // Method isProtocolSupported:(Lcom/amazonaws/Protocol;)Z
       7: ireturn

  public boolean hasHttpSupport();
    Code:
       0: aload_0
       1: getstatic     #21                 // Field com/amazonaws/Protocol.HTTP:Lcom/amazonaws/Protocol;
       4: invokespecial #20                 // Method isProtocolSupported:(Lcom/amazonaws/Protocol;)Z
       7: ireturn

  private boolean isProtocolSupported(com.amazonaws.Protocol);
    Code:
       0: aload_0
       1: getfield      #16                 // Field protocols:Ljava/util/Set;
       4: ifnull        27
       7: aload_0
       8: getfield      #16                 // Field protocols:Ljava/util/Set;
      11: aload_1
      12: invokevirtual #22                 // Method com/amazonaws/Protocol.toString:()Ljava/lang/String;
      15: invokeinterface #23,  2           // InterfaceMethod java/util/Set.contains:(Ljava/lang/Object;)Z
      20: ifeq          27
      23: iconst_1
      24: goto          28
      27: iconst_0
      28: ireturn
}
