Compiled from "ShouldClearSslSessionPredicate.java"
public class com.amazonaws.http.conn.ssl.ShouldClearSslSessionPredicate extends com.amazonaws.internal.SdkPredicate<javax.net.ssl.SSLException> {
  public static final com.amazonaws.util.JavaVersionParser$JavaVersion FIXED_JAVA_7;

  public static final com.amazonaws.util.JavaVersionParser$JavaVersion FIXED_JAVA_8;

  private static java.util.List<java.lang.String> EXCEPTION_MESSAGE_WHITELIST;

  private final com.amazonaws.util.JavaVersionParser$JavaVersion javaVersion;

  public com.amazonaws.http.conn.ssl.ShouldClearSslSessionPredicate(com.amazonaws.util.JavaVersionParser$JavaVersion);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method com/amazonaws/internal/SdkPredicate."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field javaVersion:Lcom/amazonaws/util/JavaVersionParser$JavaVersion;
       9: return

  public boolean test(javax.net.ssl.SSLException);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #3                  // Method javax/net/ssl/SSLException.getMessage:()Ljava/lang/String;
       5: invokespecial #4                  // Method isExceptionAffected:(Ljava/lang/String;)Z
       8: ifeq          22
      11: aload_0
      12: invokespecial #5                  // Method isJvmAffected:()Z
      15: ifeq          22
      18: iconst_1
      19: goto          23
      22: iconst_0
      23: ireturn

  private boolean isJvmAffected();
    Code:
       0: getstatic     #6                  // Field com/amazonaws/http/conn/ssl/ShouldClearSslSessionPredicate$1.$SwitchMap$com$amazonaws$util$JavaVersionParser$KnownJavaVersions:[I
       3: aload_0
       4: getfield      #2                  // Field javaVersion:Lcom/amazonaws/util/JavaVersionParser$JavaVersion;
       7: invokevirtual #7                  // Method com/amazonaws/util/JavaVersionParser$JavaVersion.getKnownVersion:()Lcom/amazonaws/util/JavaVersionParser$KnownJavaVersions;
      10: invokevirtual #8                  // Method com/amazonaws/util/JavaVersionParser$KnownJavaVersions.ordinal:()I
      13: iaload
      14: tableswitch   { // 1 to 5
                     1: 48
                     2: 50
                     3: 69
                     4: 88
                     5: 90
               default: 92
          }
      48: iconst_1
      49: ireturn
      50: aload_0
      51: getfield      #2                  // Field javaVersion:Lcom/amazonaws/util/JavaVersionParser$JavaVersion;
      54: getstatic     #9                  // Field FIXED_JAVA_7:Lcom/amazonaws/util/JavaVersionParser$JavaVersion;
      57: invokevirtual #10                 // Method com/amazonaws/util/JavaVersionParser$JavaVersion.compareTo:(Lcom/amazonaws/util/JavaVersionParser$JavaVersion;)I
      60: ifge          67
      63: iconst_1
      64: goto          68
      67: iconst_0
      68: ireturn
      69: aload_0
      70: getfield      #2                  // Field javaVersion:Lcom/amazonaws/util/JavaVersionParser$JavaVersion;
      73: getstatic     #11                 // Field FIXED_JAVA_8:Lcom/amazonaws/util/JavaVersionParser$JavaVersion;
      76: invokevirtual #10                 // Method com/amazonaws/util/JavaVersionParser$JavaVersion.compareTo:(Lcom/amazonaws/util/JavaVersionParser$JavaVersion;)I
      79: ifge          86
      82: iconst_1
      83: goto          87
      86: iconst_0
      87: ireturn
      88: iconst_0
      89: ireturn
      90: iconst_1
      91: ireturn
      92: iconst_1
      93: ireturn

  private boolean isExceptionAffected(java.lang.String);
    Code:
       0: aload_1
       1: ifnull        45
       4: getstatic     #12                 // Field EXCEPTION_MESSAGE_WHITELIST:Ljava/util/List;
       7: invokeinterface #13,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      12: astore_2
      13: aload_2
      14: invokeinterface #14,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      19: ifeq          45
      22: aload_2
      23: invokeinterface #15,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      28: checkcast     #16                 // class java/lang/String
      31: astore_3
      32: aload_1
      33: aload_3
      34: invokevirtual #17                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
      37: ifeq          42
      40: iconst_1
      41: ireturn
      42: goto          13
      45: iconst_0
      46: ireturn

  public boolean test(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #18                 // class javax/net/ssl/SSLException
       5: invokevirtual #19                 // Method test:(Ljavax/net/ssl/SSLException;)Z
       8: ireturn

  static {};
    Code:
       0: new           #20                 // class com/amazonaws/util/JavaVersionParser$JavaVersion
       3: dup
       4: iconst_1
       5: invokestatic  #21                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       8: bipush        7
      10: invokestatic  #21                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      13: iconst_0
      14: invokestatic  #21                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      17: bipush        85
      19: invokestatic  #21                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      22: invokespecial #22                 // Method com/amazonaws/util/JavaVersionParser$JavaVersion."<init>":(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;)V
      25: putstatic     #9                  // Field FIXED_JAVA_7:Lcom/amazonaws/util/JavaVersionParser$JavaVersion;
      28: new           #20                 // class com/amazonaws/util/JavaVersionParser$JavaVersion
      31: dup
      32: iconst_1
      33: invokestatic  #21                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      36: bipush        8
      38: invokestatic  #21                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      41: iconst_0
      42: invokestatic  #21                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      45: bipush        60
      47: invokestatic  #21                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      50: invokespecial #22                 // Method com/amazonaws/util/JavaVersionParser$JavaVersion."<init>":(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;)V
      53: putstatic     #11                 // Field FIXED_JAVA_8:Lcom/amazonaws/util/JavaVersionParser$JavaVersion;
      56: iconst_2
      57: anewarray     #16                 // class java/lang/String
      60: dup
      61: iconst_0
      62: ldc           #23                 // String server certificate change is restricted
      64: aastore
      65: dup
      66: iconst_1
      67: ldc           #24                 // String peer not authenticated
      69: aastore
      70: invokestatic  #25                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
      73: putstatic     #12                 // Field EXCEPTION_MESSAGE_WHITELIST:Ljava/util/List;
      76: return
}
