Compiled from "DefaultRequest.java"
public class com.amazonaws.DefaultRequest<T> implements com.amazonaws.Request<T> {
  private java.lang.String resourcePath;

  private java.util.Map<java.lang.String, java.util.List<java.lang.String>> parameters;

  private java.util.Map<java.lang.String, java.lang.String> headers;

  private java.net.URI endpoint;

  private java.lang.String serviceName;

  private final com.amazonaws.AmazonWebServiceRequest originalRequest;

  private com.amazonaws.http.HttpMethodName httpMethod;

  private java.io.InputStream content;

  private int timeOffset;

  private com.amazonaws.util.AWSRequestMetrics metrics;

  private final java.util.Map<com.amazonaws.handlers.HandlerContextKey<?>, java.lang.Object> handlerContext;

  public com.amazonaws.DefaultRequest(com.amazonaws.AmazonWebServiceRequest, java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/LinkedHashMap
       8: dup
       9: invokespecial #3                  // Method java/util/LinkedHashMap."<init>":()V
      12: putfield      #4                  // Field parameters:Ljava/util/Map;
      15: aload_0
      16: new           #5                  // class java/util/HashMap
      19: dup
      20: invokespecial #6                  // Method java/util/HashMap."<init>":()V
      23: putfield      #7                  // Field headers:Ljava/util/Map;
      26: aload_0
      27: getstatic     #8                  // Field com/amazonaws/http/HttpMethodName.POST:Lcom/amazonaws/http/HttpMethodName;
      30: putfield      #9                  // Field httpMethod:Lcom/amazonaws/http/HttpMethodName;
      33: aload_0
      34: new           #5                  // class java/util/HashMap
      37: dup
      38: invokespecial #6                  // Method java/util/HashMap."<init>":()V
      41: putfield      #10                 // Field handlerContext:Ljava/util/Map;
      44: aload_0
      45: aload_2
      46: putfield      #11                 // Field serviceName:Ljava/lang/String;
      49: aload_0
      50: aload_1
      51: ifnonnull     60
      54: getstatic     #12                 // Field com/amazonaws/AmazonWebServiceRequest.NOOP:Lcom/amazonaws/AmazonWebServiceRequest;
      57: goto          61
      60: aload_1
      61: putfield      #13                 // Field originalRequest:Lcom/amazonaws/AmazonWebServiceRequest;
      64: return

  public com.amazonaws.DefaultRequest(java.lang.String);
    Code:
       0: aload_0
       1: aconst_null
       2: aload_1
       3: invokespecial #14                 // Method "<init>":(Lcom/amazonaws/AmazonWebServiceRequest;Ljava/lang/String;)V
       6: return

  public com.amazonaws.AmazonWebServiceRequest getOriginalRequest();
    Code:
       0: aload_0
       1: getfield      #13                 // Field originalRequest:Lcom/amazonaws/AmazonWebServiceRequest;
       4: areturn

  public void addHeader(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #7                  // Field headers:Ljava/util/Map;
       4: aload_1
       5: aload_2
       6: invokeinterface #15,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      11: pop
      12: return

  public java.util.Map<java.lang.String, java.lang.String> getHeaders();
    Code:
       0: aload_0
       1: getfield      #7                  // Field headers:Ljava/util/Map;
       4: areturn

  public void setResourcePath(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #16                 // Field resourcePath:Ljava/lang/String;
       5: return

  public java.lang.String getResourcePath();
    Code:
       0: aload_0
       1: getfield      #16                 // Field resourcePath:Ljava/lang/String;
       4: areturn

  public void addParameter(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #4                  // Field parameters:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #17,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #18                 // class java/util/List
      13: astore_3
      14: aload_3
      15: ifnonnull     38
      18: new           #19                 // class java/util/ArrayList
      21: dup
      22: invokespecial #20                 // Method java/util/ArrayList."<init>":()V
      25: astore_3
      26: aload_0
      27: getfield      #4                  // Field parameters:Ljava/util/Map;
      30: aload_1
      31: aload_3
      32: invokeinterface #15,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      37: pop
      38: aload_3
      39: aload_2
      40: invokeinterface #21,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      45: pop
      46: return

  public void addParameters(java.lang.String, java.util.List<java.lang.String>);
    Code:
       0: aload_2
       1: ifnonnull     5
       4: return
       5: aload_2
       6: invokeinterface #22,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      11: astore_3
      12: aload_3
      13: invokeinterface #23,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      18: ifeq          42
      21: aload_3
      22: invokeinterface #24,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      27: checkcast     #25                 // class java/lang/String
      30: astore        4
      32: aload_0
      33: aload_1
      34: aload         4
      36: invokevirtual #26                 // Method addParameter:(Ljava/lang/String;Ljava/lang/String;)V
      39: goto          12
      42: return

  public java.util.Map<java.lang.String, java.util.List<java.lang.String>> getParameters();
    Code:
       0: aload_0
       1: getfield      #4                  // Field parameters:Ljava/util/Map;
       4: areturn

  public com.amazonaws.Request<T> withParameter(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #26                 // Method addParameter:(Ljava/lang/String;Ljava/lang/String;)V
       6: aload_0
       7: areturn

  public com.amazonaws.http.HttpMethodName getHttpMethod();
    Code:
       0: aload_0
       1: getfield      #9                  // Field httpMethod:Lcom/amazonaws/http/HttpMethodName;
       4: areturn

  public void setHttpMethod(com.amazonaws.http.HttpMethodName);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #9                  // Field httpMethod:Lcom/amazonaws/http/HttpMethodName;
       5: return

  public void setEndpoint(java.net.URI);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #27                 // Field endpoint:Ljava/net/URI;
       5: return

  public java.net.URI getEndpoint();
    Code:
       0: aload_0
       1: getfield      #27                 // Field endpoint:Ljava/net/URI;
       4: areturn

  public java.lang.String getServiceName();
    Code:
       0: aload_0
       1: getfield      #11                 // Field serviceName:Ljava/lang/String;
       4: areturn

  public java.io.InputStream getContent();
    Code:
       0: aload_0
       1: getfield      #28                 // Field content:Ljava/io/InputStream;
       4: areturn

  public void setContent(java.io.InputStream);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #28                 // Field content:Ljava/io/InputStream;
       5: return

  public void setHeaders(java.util.Map<java.lang.String, java.lang.String>);
    Code:
       0: aload_0
       1: getfield      #7                  // Field headers:Ljava/util/Map;
       4: invokeinterface #29,  1           // InterfaceMethod java/util/Map.clear:()V
       9: aload_0
      10: getfield      #7                  // Field headers:Ljava/util/Map;
      13: aload_1
      14: invokeinterface #30,  2           // InterfaceMethod java/util/Map.putAll:(Ljava/util/Map;)V
      19: return

  public void setParameters(java.util.Map<java.lang.String, java.util.List<java.lang.String>>);
    Code:
       0: aload_0
       1: getfield      #4                  // Field parameters:Ljava/util/Map;
       4: invokeinterface #29,  1           // InterfaceMethod java/util/Map.clear:()V
       9: aload_0
      10: getfield      #4                  // Field parameters:Ljava/util/Map;
      13: aload_1
      14: invokeinterface #30,  2           // InterfaceMethod java/util/Map.putAll:(Ljava/util/Map;)V
      19: return

  public int getTimeOffset();
    Code:
       0: aload_0
       1: getfield      #31                 // Field timeOffset:I
       4: ireturn

  public void setTimeOffset(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #31                 // Field timeOffset:I
       5: return

  public com.amazonaws.Request<T> withTimeOffset(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #32                 // Method setTimeOffset:(I)V
       5: aload_0
       6: areturn

  public java.lang.String toString();
    Code:
       0: new           #33                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #34                 // Method java/lang/StringBuilder."<init>":()V
       7: astore_1
       8: aload_1
       9: aload_0
      10: invokevirtual #35                 // Method getHttpMethod:()Lcom/amazonaws/http/HttpMethodName;
      13: invokevirtual #36                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      16: ldc           #37                 // String
      18: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      21: pop
      22: aload_1
      23: aload_0
      24: invokevirtual #39                 // Method getEndpoint:()Ljava/net/URI;
      27: invokevirtual #36                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      30: ldc           #37                 // String
      32: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      35: pop
      36: aload_0
      37: invokevirtual #40                 // Method getResourcePath:()Ljava/lang/String;
      40: astore_2
      41: aload_2
      42: ifnonnull     55
      45: aload_1
      46: ldc           #41                 // String /
      48: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      51: pop
      52: goto          77
      55: aload_2
      56: ldc           #41                 // String /
      58: invokevirtual #42                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      61: ifne          71
      64: aload_1
      65: ldc           #41                 // String /
      67: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      70: pop
      71: aload_1
      72: aload_2
      73: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      76: pop
      77: aload_1
      78: ldc           #37                 // String
      80: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      83: pop
      84: aload_0
      85: invokevirtual #43                 // Method getParameters:()Ljava/util/Map;
      88: invokeinterface #44,  1           // InterfaceMethod java/util/Map.isEmpty:()Z
      93: ifne          113
      96: aload_1
      97: ldc           #45                 // String Parameters: (
      99: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     102: aload_0
     103: getfield      #4                  // Field parameters:Ljava/util/Map;
     106: invokestatic  #46                 // Method com/amazonaws/util/json/Jackson.toJsonString:(Ljava/lang/Object;)Ljava/lang/String;
     109: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     112: pop
     113: aload_0
     114: invokevirtual #47                 // Method getHeaders:()Ljava/util/Map;
     117: invokeinterface #44,  1           // InterfaceMethod java/util/Map.isEmpty:()Z
     122: ifne          215
     125: aload_1
     126: ldc           #48                 // String Headers: (
     128: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     131: pop
     132: aload_0
     133: invokevirtual #47                 // Method getHeaders:()Ljava/util/Map;
     136: invokeinterface #49,  1           // InterfaceMethod java/util/Map.keySet:()Ljava/util/Set;
     141: invokeinterface #50,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
     146: astore_3
     147: aload_3
     148: invokeinterface #23,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     153: ifeq          208
     156: aload_3
     157: invokeinterface #24,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     162: checkcast     #25                 // class java/lang/String
     165: astore        4
     167: aload_0
     168: invokevirtual #47                 // Method getHeaders:()Ljava/util/Map;
     171: aload         4
     173: invokeinterface #17,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
     178: checkcast     #25                 // class java/lang/String
     181: astore        5
     183: aload_1
     184: aload         4
     186: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     189: ldc           #51                 // String :
     191: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     194: aload         5
     196: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     199: ldc           #52                 // String ,
     201: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     204: pop
     205: goto          147
     208: aload_1
     209: ldc           #53                 // String )
     211: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     214: pop
     215: aload_1
     216: invokevirtual #54                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     219: areturn

  public com.amazonaws.util.AWSRequestMetrics getAWSRequestMetrics();
    Code:
       0: aload_0
       1: getfield      #55                 // Field metrics:Lcom/amazonaws/util/AWSRequestMetrics;
       4: areturn

  public void setAWSRequestMetrics(com.amazonaws.util.AWSRequestMetrics);
    Code:
       0: aload_0
       1: getfield      #55                 // Field metrics:Lcom/amazonaws/util/AWSRequestMetrics;
       4: ifnonnull     15
       7: aload_0
       8: aload_1
       9: putfield      #55                 // Field metrics:Lcom/amazonaws/util/AWSRequestMetrics;
      12: goto          25
      15: new           #56                 // class java/lang/IllegalStateException
      18: dup
      19: ldc           #57                 // String AWSRequestMetrics has already been set on this request
      21: invokespecial #58                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      24: athrow
      25: return

  public <X> void addHandlerContext(com.amazonaws.handlers.HandlerContextKey<X>, X);
    Code:
       0: aload_0
       1: getfield      #10                 // Field handlerContext:Ljava/util/Map;
       4: aload_1
       5: aload_2
       6: invokeinterface #15,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      11: pop
      12: return

  public <X> X getHandlerContext(com.amazonaws.handlers.HandlerContextKey<X>);
    Code:
       0: aload_0
       1: getfield      #10                 // Field handlerContext:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #17,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: areturn

  public java.io.InputStream getContentUnwrapped();
    Code:
       0: aload_0
       1: invokevirtual #59                 // Method getContent:()Ljava/io/InputStream;
       4: astore_1
       5: aload_1
       6: ifnonnull     11
       9: aconst_null
      10: areturn
      11: aload_1
      12: instanceof    #60                 // class com/amazonaws/event/ProgressInputStream
      15: ifeq          31
      18: aload_1
      19: checkcast     #60                 // class com/amazonaws/event/ProgressInputStream
      22: astore_2
      23: aload_2
      24: invokevirtual #61                 // Method com/amazonaws/event/ProgressInputStream.getWrappedInputStream:()Ljava/io/InputStream;
      27: astore_1
      28: goto          11
      31: aload_1
      32: areturn

  public com.amazonaws.ReadLimitInfo getReadLimitInfo();
    Code:
       0: aload_0
       1: getfield      #13                 // Field originalRequest:Lcom/amazonaws/AmazonWebServiceRequest;
       4: areturn

  public java.lang.Object getOriginalRequestObject();
    Code:
       0: aload_0
       1: getfield      #13                 // Field originalRequest:Lcom/amazonaws/AmazonWebServiceRequest;
       4: areturn
}
