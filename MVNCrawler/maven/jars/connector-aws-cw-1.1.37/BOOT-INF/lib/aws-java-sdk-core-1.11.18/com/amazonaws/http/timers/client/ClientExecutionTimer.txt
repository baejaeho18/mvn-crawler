Compiled from "ClientExecutionTimer.java"
public class com.amazonaws.http.timers.client.ClientExecutionTimer {
  private volatile java.util.concurrent.ScheduledThreadPoolExecutor executor;

  public com.amazonaws.http.timers.client.ClientExecutionTimer();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public com.amazonaws.http.timers.client.ClientExecutionAbortTrackerTask startTimer(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #2                  // Method isTimeoutDisabled:(I)Z
       5: ifeq          12
       8: getstatic     #3                  // Field com/amazonaws/http/timers/client/NoOpClientExecutionAbortTrackerTask.INSTANCE:Lcom/amazonaws/http/timers/client/NoOpClientExecutionAbortTrackerTask;
      11: areturn
      12: aload_0
      13: getfield      #4                  // Field executor:Ljava/util/concurrent/ScheduledThreadPoolExecutor;
      16: ifnonnull     23
      19: aload_0
      20: invokespecial #5                  // Method initializeExecutor:()V
      23: aload_0
      24: iload_1
      25: invokespecial #6                  // Method scheduleTimerTask:(I)Lcom/amazonaws/http/timers/client/ClientExecutionAbortTrackerTask;
      28: areturn

  private synchronized void initializeExecutor();
    Code:
       0: aload_0
       1: getfield      #4                  // Field executor:Ljava/util/concurrent/ScheduledThreadPoolExecutor;
       4: ifnonnull     14
       7: aload_0
       8: invokestatic  #7                  // Method com/amazonaws/http/timers/TimeoutThreadPoolBuilder.buildDefaultTimeoutThreadPool:()Ljava/util/concurrent/ScheduledThreadPoolExecutor;
      11: putfield      #4                  // Field executor:Ljava/util/concurrent/ScheduledThreadPoolExecutor;
      14: return

  public java.util.concurrent.ScheduledThreadPoolExecutor getExecutor();
    Code:
       0: aload_0
       1: getfield      #4                  // Field executor:Ljava/util/concurrent/ScheduledThreadPoolExecutor;
       4: areturn

  public synchronized void shutdown();
    Code:
       0: aload_0
       1: getfield      #4                  // Field executor:Ljava/util/concurrent/ScheduledThreadPoolExecutor;
       4: ifnull        14
       7: aload_0
       8: getfield      #4                  // Field executor:Ljava/util/concurrent/ScheduledThreadPoolExecutor;
      11: invokevirtual #8                  // Method java/util/concurrent/ScheduledThreadPoolExecutor.shutdown:()V
      14: return

  private com.amazonaws.http.timers.client.ClientExecutionAbortTrackerTask scheduleTimerTask(int);
    Code:
       0: new           #9                  // class com/amazonaws/http/timers/client/ClientExecutionAbortTaskImpl
       3: dup
       4: invokestatic  #10                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
       7: invokespecial #11                 // Method com/amazonaws/http/timers/client/ClientExecutionAbortTaskImpl."<init>":(Ljava/lang/Thread;)V
      10: astore_2
      11: aload_0
      12: getfield      #4                  // Field executor:Ljava/util/concurrent/ScheduledThreadPoolExecutor;
      15: aload_2
      16: iload_1
      17: i2l
      18: getstatic     #12                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      21: invokevirtual #13                 // Method java/util/concurrent/ScheduledThreadPoolExecutor.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;
      24: astore_3
      25: new           #14                 // class com/amazonaws/http/timers/client/ClientExecutionAbortTrackerTaskImpl
      28: dup
      29: aload_2
      30: aload_3
      31: invokespecial #15                 // Method com/amazonaws/http/timers/client/ClientExecutionAbortTrackerTaskImpl."<init>":(Lcom/amazonaws/http/timers/client/ClientExecutionAbortTask;Ljava/util/concurrent/ScheduledFuture;)V
      34: areturn

  private boolean isTimeoutDisabled(int);
    Code:
       0: iload_1
       1: ifgt          8
       4: iconst_1
       5: goto          9
       8: iconst_0
       9: ireturn
}
