Compiled from "JavaVersionParser.java"
public final class com.amazonaws.util.JavaVersionParser$JavaVersion implements java.lang.Comparable<com.amazonaws.util.JavaVersionParser$JavaVersion> {
  public static final com.amazonaws.util.JavaVersionParser$JavaVersion UNKNOWN;

  private final java.lang.Integer[] tokenizedVersion;

  private final java.lang.Integer majorVersionFamily;

  private final java.lang.Integer majorVersion;

  private final java.lang.Integer maintenanceNumber;

  private final java.lang.Integer updateNumber;

  private final com.amazonaws.util.JavaVersionParser$KnownJavaVersions knownVersion;

  public com.amazonaws.util.JavaVersionParser$JavaVersion(java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field majorVersionFamily:Ljava/lang/Integer;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field majorVersion:Ljava/lang/Integer;
      14: aload_0
      15: aload_3
      16: putfield      #4                  // Field maintenanceNumber:Ljava/lang/Integer;
      19: aload_0
      20: aload         4
      22: putfield      #5                  // Field updateNumber:Ljava/lang/Integer;
      25: aload_0
      26: aload_1
      27: aload_2
      28: invokestatic  #6                  // Method com/amazonaws/util/JavaVersionParser$KnownJavaVersions.fromMajorVersion:(Ljava/lang/Integer;Ljava/lang/Integer;)Lcom/amazonaws/util/JavaVersionParser$KnownJavaVersions;
      31: putfield      #7                  // Field knownVersion:Lcom/amazonaws/util/JavaVersionParser$KnownJavaVersions;
      34: aload_0
      35: aload_0
      36: invokespecial #8                  // Method getTokenizedVersion:()[Ljava/lang/Integer;
      39: putfield      #9                  // Field tokenizedVersion:[Ljava/lang/Integer;
      42: return

  private java.lang.Integer[] getTokenizedVersion();
    Code:
       0: iconst_4
       1: anewarray     #10                 // class java/lang/Integer
       4: dup
       5: iconst_0
       6: aload_0
       7: getfield      #2                  // Field majorVersionFamily:Ljava/lang/Integer;
      10: aastore
      11: dup
      12: iconst_1
      13: aload_0
      14: getfield      #3                  // Field majorVersion:Ljava/lang/Integer;
      17: aastore
      18: dup
      19: iconst_2
      20: aload_0
      21: getfield      #4                  // Field maintenanceNumber:Ljava/lang/Integer;
      24: aastore
      25: dup
      26: iconst_3
      27: aload_0
      28: getfield      #5                  // Field updateNumber:Ljava/lang/Integer;
      31: aastore
      32: areturn

  public java.lang.Integer getMajorVersionFamily();
    Code:
       0: aload_0
       1: getfield      #2                  // Field majorVersionFamily:Ljava/lang/Integer;
       4: areturn

  public java.lang.Integer getMajorVersion();
    Code:
       0: aload_0
       1: getfield      #3                  // Field majorVersion:Ljava/lang/Integer;
       4: areturn

  public java.lang.String getMajorVersionString();
    Code:
       0: ldc           #11                 // String %d.%d
       2: iconst_2
       3: anewarray     #12                 // class java/lang/Object
       6: dup
       7: iconst_0
       8: aload_0
       9: getfield      #2                  // Field majorVersionFamily:Ljava/lang/Integer;
      12: aastore
      13: dup
      14: iconst_1
      15: aload_0
      16: getfield      #3                  // Field majorVersion:Ljava/lang/Integer;
      19: aastore
      20: invokestatic  #13                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      23: areturn

  public java.lang.Integer getMaintenanceNumber();
    Code:
       0: aload_0
       1: getfield      #4                  // Field maintenanceNumber:Ljava/lang/Integer;
       4: areturn

  public java.lang.Integer getUpdateNumber();
    Code:
       0: aload_0
       1: getfield      #5                  // Field updateNumber:Ljava/lang/Integer;
       4: areturn

  public com.amazonaws.util.JavaVersionParser$KnownJavaVersions getKnownVersion();
    Code:
       0: aload_0
       1: getfield      #7                  // Field knownVersion:Lcom/amazonaws/util/JavaVersionParser$KnownJavaVersions;
       4: areturn

  public int compareTo(com.amazonaws.util.JavaVersionParser$JavaVersion);
    Code:
       0: iconst_0
       1: istore_2
       2: iload_2
       3: aload_0
       4: getfield      #9                  // Field tokenizedVersion:[Ljava/lang/Integer;
       7: arraylength
       8: if_icmpge     39
      11: aload_0
      12: getfield      #9                  // Field tokenizedVersion:[Ljava/lang/Integer;
      15: iload_2
      16: aaload
      17: aload_1
      18: getfield      #9                  // Field tokenizedVersion:[Ljava/lang/Integer;
      21: iload_2
      22: aaload
      23: invokestatic  #14                 // Method com/amazonaws/util/ComparableUtils.safeCompare:(Ljava/lang/Comparable;Ljava/lang/Object;)I
      26: istore_3
      27: iload_3
      28: ifeq          33
      31: iload_3
      32: ireturn
      33: iinc          2, 1
      36: goto          2
      39: iconst_0
      40: ireturn

  public int hashCode();
    Code:
       0: bipush        31
       2: istore_1
       3: iconst_1
       4: istore_2
       5: bipush        31
       7: iload_2
       8: imul
       9: aload_0
      10: getfield      #7                  // Field knownVersion:Lcom/amazonaws/util/JavaVersionParser$KnownJavaVersions;
      13: ifnonnull     20
      16: iconst_0
      17: goto          27
      20: aload_0
      21: getfield      #7                  // Field knownVersion:Lcom/amazonaws/util/JavaVersionParser$KnownJavaVersions;
      24: invokevirtual #15                 // Method com/amazonaws/util/JavaVersionParser$KnownJavaVersions.hashCode:()I
      27: iadd
      28: istore_2
      29: bipush        31
      31: iload_2
      32: imul
      33: aload_0
      34: getfield      #4                  // Field maintenanceNumber:Ljava/lang/Integer;
      37: ifnonnull     44
      40: iconst_0
      41: goto          51
      44: aload_0
      45: getfield      #4                  // Field maintenanceNumber:Ljava/lang/Integer;
      48: invokevirtual #16                 // Method java/lang/Integer.hashCode:()I
      51: iadd
      52: istore_2
      53: bipush        31
      55: iload_2
      56: imul
      57: aload_0
      58: getfield      #3                  // Field majorVersion:Ljava/lang/Integer;
      61: ifnonnull     68
      64: iconst_0
      65: goto          75
      68: aload_0
      69: getfield      #3                  // Field majorVersion:Ljava/lang/Integer;
      72: invokevirtual #16                 // Method java/lang/Integer.hashCode:()I
      75: iadd
      76: istore_2
      77: bipush        31
      79: iload_2
      80: imul
      81: aload_0
      82: getfield      #2                  // Field majorVersionFamily:Ljava/lang/Integer;
      85: ifnonnull     92
      88: iconst_0
      89: goto          99
      92: aload_0
      93: getfield      #2                  // Field majorVersionFamily:Ljava/lang/Integer;
      96: invokevirtual #16                 // Method java/lang/Integer.hashCode:()I
      99: iadd
     100: istore_2
     101: bipush        31
     103: iload_2
     104: imul
     105: aload_0
     106: getfield      #9                  // Field tokenizedVersion:[Ljava/lang/Integer;
     109: invokestatic  #17                 // Method java/util/Arrays.hashCode:([Ljava/lang/Object;)I
     112: iadd
     113: istore_2
     114: bipush        31
     116: iload_2
     117: imul
     118: aload_0
     119: getfield      #5                  // Field updateNumber:Ljava/lang/Integer;
     122: ifnonnull     129
     125: iconst_0
     126: goto          136
     129: aload_0
     130: getfield      #5                  // Field updateNumber:Ljava/lang/Integer;
     133: invokevirtual #16                 // Method java/lang/Integer.hashCode:()I
     136: iadd
     137: istore_2
     138: iload_2
     139: ireturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: ifnonnull     13
      11: iconst_0
      12: ireturn
      13: aload_0
      14: invokevirtual #18                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      17: aload_1
      18: invokevirtual #18                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      21: if_acmpeq     26
      24: iconst_0
      25: ireturn
      26: aload_1
      27: checkcast     #19                 // class com/amazonaws/util/JavaVersionParser$JavaVersion
      30: astore_2
      31: aload_0
      32: getfield      #7                  // Field knownVersion:Lcom/amazonaws/util/JavaVersionParser$KnownJavaVersions;
      35: aload_2
      36: getfield      #7                  // Field knownVersion:Lcom/amazonaws/util/JavaVersionParser$KnownJavaVersions;
      39: if_acmpeq     44
      42: iconst_0
      43: ireturn
      44: aload_0
      45: getfield      #4                  // Field maintenanceNumber:Ljava/lang/Integer;
      48: ifnonnull     60
      51: aload_2
      52: getfield      #4                  // Field maintenanceNumber:Ljava/lang/Integer;
      55: ifnull        76
      58: iconst_0
      59: ireturn
      60: aload_0
      61: getfield      #4                  // Field maintenanceNumber:Ljava/lang/Integer;
      64: aload_2
      65: getfield      #4                  // Field maintenanceNumber:Ljava/lang/Integer;
      68: invokevirtual #20                 // Method java/lang/Integer.equals:(Ljava/lang/Object;)Z
      71: ifne          76
      74: iconst_0
      75: ireturn
      76: aload_0
      77: getfield      #3                  // Field majorVersion:Ljava/lang/Integer;
      80: ifnonnull     92
      83: aload_2
      84: getfield      #3                  // Field majorVersion:Ljava/lang/Integer;
      87: ifnull        108
      90: iconst_0
      91: ireturn
      92: aload_0
      93: getfield      #3                  // Field majorVersion:Ljava/lang/Integer;
      96: aload_2
      97: getfield      #3                  // Field majorVersion:Ljava/lang/Integer;
     100: invokevirtual #20                 // Method java/lang/Integer.equals:(Ljava/lang/Object;)Z
     103: ifne          108
     106: iconst_0
     107: ireturn
     108: aload_0
     109: getfield      #2                  // Field majorVersionFamily:Ljava/lang/Integer;
     112: ifnonnull     124
     115: aload_2
     116: getfield      #2                  // Field majorVersionFamily:Ljava/lang/Integer;
     119: ifnull        140
     122: iconst_0
     123: ireturn
     124: aload_0
     125: getfield      #2                  // Field majorVersionFamily:Ljava/lang/Integer;
     128: aload_2
     129: getfield      #2                  // Field majorVersionFamily:Ljava/lang/Integer;
     132: invokevirtual #20                 // Method java/lang/Integer.equals:(Ljava/lang/Object;)Z
     135: ifne          140
     138: iconst_0
     139: ireturn
     140: aload_0
     141: getfield      #9                  // Field tokenizedVersion:[Ljava/lang/Integer;
     144: aload_2
     145: getfield      #9                  // Field tokenizedVersion:[Ljava/lang/Integer;
     148: invokestatic  #21                 // Method java/util/Arrays.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z
     151: ifne          156
     154: iconst_0
     155: ireturn
     156: aload_0
     157: getfield      #5                  // Field updateNumber:Ljava/lang/Integer;
     160: ifnonnull     172
     163: aload_2
     164: getfield      #5                  // Field updateNumber:Ljava/lang/Integer;
     167: ifnull        188
     170: iconst_0
     171: ireturn
     172: aload_0
     173: getfield      #5                  // Field updateNumber:Ljava/lang/Integer;
     176: aload_2
     177: getfield      #5                  // Field updateNumber:Ljava/lang/Integer;
     180: invokevirtual #20                 // Method java/lang/Integer.equals:(Ljava/lang/Object;)Z
     183: ifne          188
     186: iconst_0
     187: ireturn
     188: iconst_1
     189: ireturn

  public int compareTo(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #19                 // class com/amazonaws/util/JavaVersionParser$JavaVersion
       5: invokevirtual #22                 // Method compareTo:(Lcom/amazonaws/util/JavaVersionParser$JavaVersion;)I
       8: ireturn

  static {};
    Code:
       0: new           #19                 // class com/amazonaws/util/JavaVersionParser$JavaVersion
       3: dup
       4: aconst_null
       5: aconst_null
       6: aconst_null
       7: aconst_null
       8: invokespecial #23                 // Method "<init>":(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;)V
      11: putstatic     #24                 // Field UNKNOWN:Lcom/amazonaws/util/JavaVersionParser$JavaVersion;
      14: return
}
