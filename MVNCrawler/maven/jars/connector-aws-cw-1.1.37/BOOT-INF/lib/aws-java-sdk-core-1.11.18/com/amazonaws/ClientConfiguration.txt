Compiled from "ClientConfiguration.java"
public class com.amazonaws.ClientConfiguration {
  public static final int DEFAULT_CONNECTION_TIMEOUT;

  public static final int DEFAULT_SOCKET_TIMEOUT;

  public static final int DEFAULT_REQUEST_TIMEOUT;

  public static final int DEFAULT_CLIENT_EXECUTION_TIMEOUT;

  public static final int DEFAULT_MAX_CONNECTIONS;

  private static final boolean DEFAULT_USE_EXPECT_CONTINUE;

  public static final java.lang.String DEFAULT_USER_AGENT;

  public static final com.amazonaws.retry.RetryPolicy DEFAULT_RETRY_POLICY;

  public static final boolean DEFAULT_USE_REAPER;

  public static final boolean DEFAULT_USE_GZIP;

  public static final long DEFAULT_CONNECTION_TTL;

  public static final long DEFAULT_CONNECTION_MAX_IDLE_MILLIS;

  public static final boolean DEFAULT_TCP_KEEP_ALIVE;

  public static final boolean DEFAULT_THROTTLE_RETRIES;

  public static final boolean DEFAULT_CACHE_RESPONSE_METADATA;

  public static final int DEFAULT_RESPONSE_METADATA_CACHE_SIZE;

  private java.lang.String userAgent;

  private int maxErrorRetry;

  private com.amazonaws.retry.RetryPolicy retryPolicy;

  private java.net.InetAddress localAddress;

  private com.amazonaws.Protocol protocol;

  private java.lang.String proxyHost;

  private int proxyPort;

  private java.lang.String proxyUsername;

  private java.lang.String proxyPassword;

  private java.lang.String proxyDomain;

  private java.lang.String proxyWorkstation;

  private java.lang.String nonProxyHosts;

  private boolean preemptiveBasicProxyAuth;

  private int maxConnections;

  private int socketTimeout;

  private int connectionTimeout;

  private int requestTimeout;

  private int clientExecutionTimeout;

  private boolean throttleRetries;

  private int socketSendBufferSizeHint;

  private int socketReceiveBufferSizeHint;

  private boolean useReaper;

  private boolean useGzip;

  private java.lang.String signerOverride;

  private long connectionTTL;

  private long connectionMaxIdleMillis;

  private boolean tcpKeepAlive;

  private boolean cacheResponseMetadata;

  private int responseMetadataCacheSize;

  private com.amazonaws.DnsResolver dnsResolver;

  private java.security.SecureRandom secureRandom;

  private boolean useExpectContinue;

  private final com.amazonaws.ApacheHttpClientConfig apacheHttpClientConfig;

  public com.amazonaws.ClientConfiguration();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: getstatic     #2                  // Field DEFAULT_USER_AGENT:Ljava/lang/String;
       8: putfield      #3                  // Field userAgent:Ljava/lang/String;
      11: aload_0
      12: iconst_m1
      13: putfield      #4                  // Field maxErrorRetry:I
      16: aload_0
      17: getstatic     #5                  // Field DEFAULT_RETRY_POLICY:Lcom/amazonaws/retry/RetryPolicy;
      20: putfield      #6                  // Field retryPolicy:Lcom/amazonaws/retry/RetryPolicy;
      23: aload_0
      24: getstatic     #7                  // Field com/amazonaws/Protocol.HTTPS:Lcom/amazonaws/Protocol;
      27: putfield      #8                  // Field protocol:Lcom/amazonaws/Protocol;
      30: aload_0
      31: aconst_null
      32: putfield      #9                  // Field proxyHost:Ljava/lang/String;
      35: aload_0
      36: iconst_m1
      37: putfield      #10                 // Field proxyPort:I
      40: aload_0
      41: aconst_null
      42: putfield      #11                 // Field proxyUsername:Ljava/lang/String;
      45: aload_0
      46: aconst_null
      47: putfield      #12                 // Field proxyPassword:Ljava/lang/String;
      50: aload_0
      51: aconst_null
      52: putfield      #13                 // Field proxyDomain:Ljava/lang/String;
      55: aload_0
      56: aconst_null
      57: putfield      #14                 // Field proxyWorkstation:Ljava/lang/String;
      60: aload_0
      61: aconst_null
      62: putfield      #15                 // Field nonProxyHosts:Ljava/lang/String;
      65: aload_0
      66: bipush        50
      68: putfield      #17                 // Field maxConnections:I
      71: aload_0
      72: ldc           #18                 // int 50000
      74: putfield      #19                 // Field socketTimeout:I
      77: aload_0
      78: sipush        10000
      81: putfield      #20                 // Field connectionTimeout:I
      84: aload_0
      85: iconst_0
      86: putfield      #21                 // Field requestTimeout:I
      89: aload_0
      90: iconst_0
      91: putfield      #22                 // Field clientExecutionTimeout:I
      94: aload_0
      95: iconst_1
      96: putfield      #23                 // Field throttleRetries:Z
      99: aload_0
     100: iconst_0
     101: putfield      #24                 // Field socketSendBufferSizeHint:I
     104: aload_0
     105: iconst_0
     106: putfield      #25                 // Field socketReceiveBufferSizeHint:I
     109: aload_0
     110: iconst_1
     111: putfield      #26                 // Field useReaper:Z
     114: aload_0
     115: iconst_0
     116: putfield      #27                 // Field useGzip:Z
     119: aload_0
     120: ldc2_w        #28                 // long -1l
     123: putfield      #30                 // Field connectionTTL:J
     126: aload_0
     127: ldc2_w        #31                 // long 60000l
     130: putfield      #33                 // Field connectionMaxIdleMillis:J
     133: aload_0
     134: iconst_0
     135: putfield      #34                 // Field tcpKeepAlive:Z
     138: aload_0
     139: iconst_1
     140: putfield      #35                 // Field cacheResponseMetadata:Z
     143: aload_0
     144: bipush        50
     146: putfield      #36                 // Field responseMetadataCacheSize:I
     149: aload_0
     150: new           #37                 // class com/amazonaws/SystemDefaultDnsResolver
     153: dup
     154: invokespecial #38                 // Method com/amazonaws/SystemDefaultDnsResolver."<init>":()V
     157: putfield      #39                 // Field dnsResolver:Lcom/amazonaws/DnsResolver;
     160: aload_0
     161: iconst_1
     162: putfield      #40                 // Field useExpectContinue:Z
     165: aload_0
     166: new           #41                 // class com/amazonaws/ApacheHttpClientConfig
     169: dup
     170: invokespecial #42                 // Method com/amazonaws/ApacheHttpClientConfig."<init>":()V
     173: putfield      #43                 // Field apacheHttpClientConfig:Lcom/amazonaws/ApacheHttpClientConfig;
     176: return

  public com.amazonaws.ClientConfiguration(com.amazonaws.ClientConfiguration);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: getstatic     #2                  // Field DEFAULT_USER_AGENT:Ljava/lang/String;
       8: putfield      #3                  // Field userAgent:Ljava/lang/String;
      11: aload_0
      12: iconst_m1
      13: putfield      #4                  // Field maxErrorRetry:I
      16: aload_0
      17: getstatic     #5                  // Field DEFAULT_RETRY_POLICY:Lcom/amazonaws/retry/RetryPolicy;
      20: putfield      #6                  // Field retryPolicy:Lcom/amazonaws/retry/RetryPolicy;
      23: aload_0
      24: getstatic     #7                  // Field com/amazonaws/Protocol.HTTPS:Lcom/amazonaws/Protocol;
      27: putfield      #8                  // Field protocol:Lcom/amazonaws/Protocol;
      30: aload_0
      31: aconst_null
      32: putfield      #9                  // Field proxyHost:Ljava/lang/String;
      35: aload_0
      36: iconst_m1
      37: putfield      #10                 // Field proxyPort:I
      40: aload_0
      41: aconst_null
      42: putfield      #11                 // Field proxyUsername:Ljava/lang/String;
      45: aload_0
      46: aconst_null
      47: putfield      #12                 // Field proxyPassword:Ljava/lang/String;
      50: aload_0
      51: aconst_null
      52: putfield      #13                 // Field proxyDomain:Ljava/lang/String;
      55: aload_0
      56: aconst_null
      57: putfield      #14                 // Field proxyWorkstation:Ljava/lang/String;
      60: aload_0
      61: aconst_null
      62: putfield      #15                 // Field nonProxyHosts:Ljava/lang/String;
      65: aload_0
      66: bipush        50
      68: putfield      #17                 // Field maxConnections:I
      71: aload_0
      72: ldc           #18                 // int 50000
      74: putfield      #19                 // Field socketTimeout:I
      77: aload_0
      78: sipush        10000
      81: putfield      #20                 // Field connectionTimeout:I
      84: aload_0
      85: iconst_0
      86: putfield      #21                 // Field requestTimeout:I
      89: aload_0
      90: iconst_0
      91: putfield      #22                 // Field clientExecutionTimeout:I
      94: aload_0
      95: iconst_1
      96: putfield      #23                 // Field throttleRetries:Z
      99: aload_0
     100: iconst_0
     101: putfield      #24                 // Field socketSendBufferSizeHint:I
     104: aload_0
     105: iconst_0
     106: putfield      #25                 // Field socketReceiveBufferSizeHint:I
     109: aload_0
     110: iconst_1
     111: putfield      #26                 // Field useReaper:Z
     114: aload_0
     115: iconst_0
     116: putfield      #27                 // Field useGzip:Z
     119: aload_0
     120: ldc2_w        #28                 // long -1l
     123: putfield      #30                 // Field connectionTTL:J
     126: aload_0
     127: ldc2_w        #31                 // long 60000l
     130: putfield      #33                 // Field connectionMaxIdleMillis:J
     133: aload_0
     134: iconst_0
     135: putfield      #34                 // Field tcpKeepAlive:Z
     138: aload_0
     139: iconst_1
     140: putfield      #35                 // Field cacheResponseMetadata:Z
     143: aload_0
     144: bipush        50
     146: putfield      #36                 // Field responseMetadataCacheSize:I
     149: aload_0
     150: new           #37                 // class com/amazonaws/SystemDefaultDnsResolver
     153: dup
     154: invokespecial #38                 // Method com/amazonaws/SystemDefaultDnsResolver."<init>":()V
     157: putfield      #39                 // Field dnsResolver:Lcom/amazonaws/DnsResolver;
     160: aload_0
     161: iconst_1
     162: putfield      #40                 // Field useExpectContinue:Z
     165: aload_0
     166: aload_1
     167: getfield      #20                 // Field connectionTimeout:I
     170: putfield      #20                 // Field connectionTimeout:I
     173: aload_0
     174: aload_1
     175: getfield      #17                 // Field maxConnections:I
     178: putfield      #17                 // Field maxConnections:I
     181: aload_0
     182: aload_1
     183: getfield      #4                  // Field maxErrorRetry:I
     186: putfield      #4                  // Field maxErrorRetry:I
     189: aload_0
     190: aload_1
     191: getfield      #6                  // Field retryPolicy:Lcom/amazonaws/retry/RetryPolicy;
     194: putfield      #6                  // Field retryPolicy:Lcom/amazonaws/retry/RetryPolicy;
     197: aload_0
     198: aload_1
     199: getfield      #23                 // Field throttleRetries:Z
     202: putfield      #23                 // Field throttleRetries:Z
     205: aload_0
     206: aload_1
     207: getfield      #44                 // Field localAddress:Ljava/net/InetAddress;
     210: putfield      #44                 // Field localAddress:Ljava/net/InetAddress;
     213: aload_0
     214: aload_1
     215: getfield      #8                  // Field protocol:Lcom/amazonaws/Protocol;
     218: putfield      #8                  // Field protocol:Lcom/amazonaws/Protocol;
     221: aload_0
     222: aload_1
     223: getfield      #13                 // Field proxyDomain:Ljava/lang/String;
     226: putfield      #13                 // Field proxyDomain:Ljava/lang/String;
     229: aload_0
     230: aload_1
     231: getfield      #9                  // Field proxyHost:Ljava/lang/String;
     234: putfield      #9                  // Field proxyHost:Ljava/lang/String;
     237: aload_0
     238: aload_1
     239: getfield      #12                 // Field proxyPassword:Ljava/lang/String;
     242: putfield      #12                 // Field proxyPassword:Ljava/lang/String;
     245: aload_0
     246: aload_1
     247: getfield      #10                 // Field proxyPort:I
     250: putfield      #10                 // Field proxyPort:I
     253: aload_0
     254: aload_1
     255: getfield      #11                 // Field proxyUsername:Ljava/lang/String;
     258: putfield      #11                 // Field proxyUsername:Ljava/lang/String;
     261: aload_0
     262: aload_1
     263: getfield      #14                 // Field proxyWorkstation:Ljava/lang/String;
     266: putfield      #14                 // Field proxyWorkstation:Ljava/lang/String;
     269: aload_0
     270: aload_1
     271: getfield      #15                 // Field nonProxyHosts:Ljava/lang/String;
     274: putfield      #15                 // Field nonProxyHosts:Ljava/lang/String;
     277: aload_0
     278: aload_1
     279: getfield      #45                 // Field preemptiveBasicProxyAuth:Z
     282: putfield      #45                 // Field preemptiveBasicProxyAuth:Z
     285: aload_0
     286: aload_1
     287: getfield      #19                 // Field socketTimeout:I
     290: putfield      #19                 // Field socketTimeout:I
     293: aload_0
     294: aload_1
     295: getfield      #21                 // Field requestTimeout:I
     298: putfield      #21                 // Field requestTimeout:I
     301: aload_0
     302: aload_1
     303: getfield      #22                 // Field clientExecutionTimeout:I
     306: putfield      #22                 // Field clientExecutionTimeout:I
     309: aload_0
     310: aload_1
     311: getfield      #3                  // Field userAgent:Ljava/lang/String;
     314: putfield      #3                  // Field userAgent:Ljava/lang/String;
     317: aload_0
     318: aload_1
     319: getfield      #26                 // Field useReaper:Z
     322: putfield      #26                 // Field useReaper:Z
     325: aload_0
     326: aload_1
     327: getfield      #27                 // Field useGzip:Z
     330: putfield      #27                 // Field useGzip:Z
     333: aload_0
     334: aload_1
     335: getfield      #25                 // Field socketReceiveBufferSizeHint:I
     338: putfield      #25                 // Field socketReceiveBufferSizeHint:I
     341: aload_0
     342: aload_1
     343: getfield      #24                 // Field socketSendBufferSizeHint:I
     346: putfield      #24                 // Field socketSendBufferSizeHint:I
     349: aload_0
     350: aload_1
     351: getfield      #46                 // Field signerOverride:Ljava/lang/String;
     354: putfield      #46                 // Field signerOverride:Ljava/lang/String;
     357: aload_0
     358: aload_1
     359: getfield      #36                 // Field responseMetadataCacheSize:I
     362: putfield      #36                 // Field responseMetadataCacheSize:I
     365: aload_0
     366: aload_1
     367: getfield      #39                 // Field dnsResolver:Lcom/amazonaws/DnsResolver;
     370: putfield      #39                 // Field dnsResolver:Lcom/amazonaws/DnsResolver;
     373: aload_0
     374: aload_1
     375: getfield      #40                 // Field useExpectContinue:Z
     378: putfield      #40                 // Field useExpectContinue:Z
     381: aload_0
     382: new           #41                 // class com/amazonaws/ApacheHttpClientConfig
     385: dup
     386: aload_1
     387: getfield      #43                 // Field apacheHttpClientConfig:Lcom/amazonaws/ApacheHttpClientConfig;
     390: invokespecial #47                 // Method com/amazonaws/ApacheHttpClientConfig."<init>":(Lcom/amazonaws/ApacheHttpClientConfig;)V
     393: putfield      #43                 // Field apacheHttpClientConfig:Lcom/amazonaws/ApacheHttpClientConfig;
     396: aload_0
     397: aload_1
     398: getfield      #35                 // Field cacheResponseMetadata:Z
     401: putfield      #35                 // Field cacheResponseMetadata:Z
     404: return

  public com.amazonaws.Protocol getProtocol();
    Code:
       0: aload_0
       1: getfield      #8                  // Field protocol:Lcom/amazonaws/Protocol;
       4: areturn

  public void setProtocol(com.amazonaws.Protocol);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #8                  // Field protocol:Lcom/amazonaws/Protocol;
       5: return

  public com.amazonaws.ClientConfiguration withProtocol(com.amazonaws.Protocol);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #48                 // Method setProtocol:(Lcom/amazonaws/Protocol;)V
       5: aload_0
       6: areturn

  public int getMaxConnections();
    Code:
       0: aload_0
       1: getfield      #17                 // Field maxConnections:I
       4: ireturn

  public void setMaxConnections(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #17                 // Field maxConnections:I
       5: return

  public com.amazonaws.ClientConfiguration withMaxConnections(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #49                 // Method setMaxConnections:(I)V
       5: aload_0
       6: areturn

  public java.lang.String getUserAgent();
    Code:
       0: aload_0
       1: getfield      #3                  // Field userAgent:Ljava/lang/String;
       4: areturn

  public void setUserAgent(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #3                  // Field userAgent:Ljava/lang/String;
       5: return

  public com.amazonaws.ClientConfiguration withUserAgent(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #50                 // Method setUserAgent:(Ljava/lang/String;)V
       5: aload_0
       6: areturn

  public java.net.InetAddress getLocalAddress();
    Code:
       0: aload_0
       1: getfield      #44                 // Field localAddress:Ljava/net/InetAddress;
       4: areturn

  public void setLocalAddress(java.net.InetAddress);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #44                 // Field localAddress:Ljava/net/InetAddress;
       5: return

  public com.amazonaws.ClientConfiguration withLocalAddress(java.net.InetAddress);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #51                 // Method setLocalAddress:(Ljava/net/InetAddress;)V
       5: aload_0
       6: areturn

  private java.lang.String getSystemProperty(java.lang.String);
    Code:
       0: aload_1
       1: invokestatic  #52                 // Method java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;
       4: areturn

  private java.lang.String getProxyHostProperty();
    Code:
       0: aload_0
       1: invokevirtual #53                 // Method getProtocol:()Lcom/amazonaws/Protocol;
       4: getstatic     #7                  // Field com/amazonaws/Protocol.HTTPS:Lcom/amazonaws/Protocol;
       7: if_acmpne     19
      10: aload_0
      11: ldc           #54                 // String https.proxyHost
      13: invokespecial #55                 // Method getSystemProperty:(Ljava/lang/String;)Ljava/lang/String;
      16: goto          25
      19: aload_0
      20: ldc           #56                 // String http.proxyHost
      22: invokespecial #55                 // Method getSystemProperty:(Ljava/lang/String;)Ljava/lang/String;
      25: areturn

  public java.lang.String getProxyHost();
    Code:
       0: aload_0
       1: getfield      #9                  // Field proxyHost:Ljava/lang/String;
       4: ifnull        14
       7: aload_0
       8: getfield      #9                  // Field proxyHost:Ljava/lang/String;
      11: goto          18
      14: aload_0
      15: invokespecial #57                 // Method getProxyHostProperty:()Ljava/lang/String;
      18: areturn

  public void setProxyHost(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #9                  // Field proxyHost:Ljava/lang/String;
       5: return

  public com.amazonaws.ClientConfiguration withProxyHost(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #58                 // Method setProxyHost:(Ljava/lang/String;)V
       5: aload_0
       6: areturn

  private int getProxyPortProperty();
    Code:
       0: aload_0
       1: invokevirtual #53                 // Method getProtocol:()Lcom/amazonaws/Protocol;
       4: getstatic     #7                  // Field com/amazonaws/Protocol.HTTPS:Lcom/amazonaws/Protocol;
       7: if_acmpne     19
      10: aload_0
      11: ldc           #59                 // String https.proxyPort
      13: invokespecial #55                 // Method getSystemProperty:(Ljava/lang/String;)Ljava/lang/String;
      16: goto          25
      19: aload_0
      20: ldc           #60                 // String http.proxyPort
      22: invokespecial #55                 // Method getSystemProperty:(Ljava/lang/String;)Ljava/lang/String;
      25: astore_1
      26: aload_1
      27: invokestatic  #61                 // Method java/lang/Integer.parseInt:(Ljava/lang/String;)I
      30: ireturn
      31: astore_2
      32: aload_0
      33: getfield      #10                 // Field proxyPort:I
      36: ireturn
    Exception table:
       from    to  target type
          26    30    31   Class java/lang/NumberFormatException

  public int getProxyPort();
    Code:
       0: aload_0
       1: getfield      #10                 // Field proxyPort:I
       4: iflt          14
       7: aload_0
       8: getfield      #10                 // Field proxyPort:I
      11: goto          18
      14: aload_0
      15: invokespecial #63                 // Method getProxyPortProperty:()I
      18: ireturn

  public void setProxyPort(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #10                 // Field proxyPort:I
       5: return

  public com.amazonaws.ClientConfiguration withProxyPort(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #64                 // Method setProxyPort:(I)V
       5: aload_0
       6: areturn

  private java.lang.String getProxyUsernameProperty();
    Code:
       0: aload_0
       1: invokevirtual #53                 // Method getProtocol:()Lcom/amazonaws/Protocol;
       4: getstatic     #7                  // Field com/amazonaws/Protocol.HTTPS:Lcom/amazonaws/Protocol;
       7: if_acmpne     19
      10: aload_0
      11: ldc           #65                 // String https.proxyUser
      13: invokespecial #55                 // Method getSystemProperty:(Ljava/lang/String;)Ljava/lang/String;
      16: goto          25
      19: aload_0
      20: ldc           #66                 // String http.proxyUser
      22: invokespecial #55                 // Method getSystemProperty:(Ljava/lang/String;)Ljava/lang/String;
      25: areturn

  public java.lang.String getProxyUsername();
    Code:
       0: aload_0
       1: getfield      #11                 // Field proxyUsername:Ljava/lang/String;
       4: ifnull        14
       7: aload_0
       8: getfield      #11                 // Field proxyUsername:Ljava/lang/String;
      11: goto          18
      14: aload_0
      15: invokespecial #67                 // Method getProxyUsernameProperty:()Ljava/lang/String;
      18: areturn

  public void setProxyUsername(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #11                 // Field proxyUsername:Ljava/lang/String;
       5: return

  public com.amazonaws.ClientConfiguration withProxyUsername(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #68                 // Method setProxyUsername:(Ljava/lang/String;)V
       5: aload_0
       6: areturn

  private java.lang.String getProxyPasswordProperty();
    Code:
       0: aload_0
       1: invokevirtual #53                 // Method getProtocol:()Lcom/amazonaws/Protocol;
       4: getstatic     #7                  // Field com/amazonaws/Protocol.HTTPS:Lcom/amazonaws/Protocol;
       7: if_acmpne     19
      10: aload_0
      11: ldc           #69                 // String https.proxyPassword
      13: invokespecial #55                 // Method getSystemProperty:(Ljava/lang/String;)Ljava/lang/String;
      16: goto          25
      19: aload_0
      20: ldc           #70                 // String http.proxyPassword
      22: invokespecial #55                 // Method getSystemProperty:(Ljava/lang/String;)Ljava/lang/String;
      25: areturn

  public java.lang.String getProxyPassword();
    Code:
       0: aload_0
       1: getfield      #12                 // Field proxyPassword:Ljava/lang/String;
       4: ifnull        14
       7: aload_0
       8: getfield      #12                 // Field proxyPassword:Ljava/lang/String;
      11: goto          18
      14: aload_0
      15: invokespecial #71                 // Method getProxyPasswordProperty:()Ljava/lang/String;
      18: areturn

  public void setProxyPassword(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #12                 // Field proxyPassword:Ljava/lang/String;
       5: return

  public com.amazonaws.ClientConfiguration withProxyPassword(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #72                 // Method setProxyPassword:(Ljava/lang/String;)V
       5: aload_0
       6: areturn

  public java.lang.String getProxyDomain();
    Code:
       0: aload_0
       1: getfield      #13                 // Field proxyDomain:Ljava/lang/String;
       4: areturn

  public void setProxyDomain(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #13                 // Field proxyDomain:Ljava/lang/String;
       5: return

  public com.amazonaws.ClientConfiguration withProxyDomain(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #73                 // Method setProxyDomain:(Ljava/lang/String;)V
       5: aload_0
       6: areturn

  public java.lang.String getProxyWorkstation();
    Code:
       0: aload_0
       1: getfield      #14                 // Field proxyWorkstation:Ljava/lang/String;
       4: areturn

  public void setProxyWorkstation(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #14                 // Field proxyWorkstation:Ljava/lang/String;
       5: return

  public com.amazonaws.ClientConfiguration withProxyWorkstation(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #74                 // Method setProxyWorkstation:(Ljava/lang/String;)V
       5: aload_0
       6: areturn

  private java.lang.String getNonProxyHostsProperty();
    Code:
       0: aload_0
       1: ldc           #75                 // String http.nonProxyHosts
       3: invokespecial #55                 // Method getSystemProperty:(Ljava/lang/String;)Ljava/lang/String;
       6: areturn

  public java.lang.String getNonProxyHosts();
    Code:
       0: aload_0
       1: getfield      #15                 // Field nonProxyHosts:Ljava/lang/String;
       4: ifnull        14
       7: aload_0
       8: getfield      #15                 // Field nonProxyHosts:Ljava/lang/String;
      11: goto          18
      14: aload_0
      15: invokespecial #76                 // Method getNonProxyHostsProperty:()Ljava/lang/String;
      18: areturn

  public void setNonProxyHosts(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #15                 // Field nonProxyHosts:Ljava/lang/String;
       5: return

  public com.amazonaws.ClientConfiguration withNonProxyHosts(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #77                 // Method setNonProxyHosts:(Ljava/lang/String;)V
       5: aload_0
       6: areturn

  public com.amazonaws.retry.RetryPolicy getRetryPolicy();
    Code:
       0: aload_0
       1: getfield      #6                  // Field retryPolicy:Lcom/amazonaws/retry/RetryPolicy;
       4: areturn

  public void setRetryPolicy(com.amazonaws.retry.RetryPolicy);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #6                  // Field retryPolicy:Lcom/amazonaws/retry/RetryPolicy;
       5: return

  public com.amazonaws.ClientConfiguration withRetryPolicy(com.amazonaws.retry.RetryPolicy);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #78                 // Method setRetryPolicy:(Lcom/amazonaws/retry/RetryPolicy;)V
       5: aload_0
       6: areturn

  public int getMaxErrorRetry();
    Code:
       0: aload_0
       1: getfield      #4                  // Field maxErrorRetry:I
       4: ireturn

  public void setMaxErrorRetry(int);
    Code:
       0: iload_1
       1: ifge          14
       4: new           #79                 // class java/lang/IllegalArgumentException
       7: dup
       8: ldc           #80                 // String maxErrorRetry shoud be non-negative
      10: invokespecial #81                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: aload_0
      15: iload_1
      16: putfield      #4                  // Field maxErrorRetry:I
      19: return

  public com.amazonaws.ClientConfiguration withMaxErrorRetry(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #82                 // Method setMaxErrorRetry:(I)V
       5: aload_0
       6: areturn

  public int getSocketTimeout();
    Code:
       0: aload_0
       1: getfield      #19                 // Field socketTimeout:I
       4: ireturn

  public void setSocketTimeout(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #19                 // Field socketTimeout:I
       5: return

  public com.amazonaws.ClientConfiguration withSocketTimeout(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #83                 // Method setSocketTimeout:(I)V
       5: aload_0
       6: areturn

  public int getConnectionTimeout();
    Code:
       0: aload_0
       1: getfield      #20                 // Field connectionTimeout:I
       4: ireturn

  public void setConnectionTimeout(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #20                 // Field connectionTimeout:I
       5: return

  public com.amazonaws.ClientConfiguration withConnectionTimeout(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #84                 // Method setConnectionTimeout:(I)V
       5: aload_0
       6: areturn

  public int getRequestTimeout();
    Code:
       0: aload_0
       1: getfield      #21                 // Field requestTimeout:I
       4: ireturn

  public void setRequestTimeout(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #21                 // Field requestTimeout:I
       5: return

  public com.amazonaws.ClientConfiguration withRequestTimeout(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #85                 // Method setRequestTimeout:(I)V
       5: aload_0
       6: areturn

  public int getClientExecutionTimeout();
    Code:
       0: aload_0
       1: getfield      #22                 // Field clientExecutionTimeout:I
       4: ireturn

  public void setClientExecutionTimeout(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #22                 // Field clientExecutionTimeout:I
       5: return

  public com.amazonaws.ClientConfiguration withClientExecutionTimeout(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #86                 // Method setClientExecutionTimeout:(I)V
       5: aload_0
       6: areturn

  public boolean useReaper();
    Code:
       0: aload_0
       1: getfield      #26                 // Field useReaper:Z
       4: ireturn

  public void setUseReaper(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #26                 // Field useReaper:Z
       5: return

  public com.amazonaws.ClientConfiguration withReaper(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #87                 // Method setUseReaper:(Z)V
       5: aload_0
       6: areturn

  public boolean useThrottledRetries();
    Code:
       0: aload_0
       1: getfield      #23                 // Field throttleRetries:Z
       4: ifne          16
       7: aload_0
       8: ldc           #89                 // String com.amazonaws.sdk.enableThrottledRetry
      10: invokespecial #55                 // Method getSystemProperty:(Ljava/lang/String;)Ljava/lang/String;
      13: ifnull        20
      16: iconst_1
      17: goto          21
      20: iconst_0
      21: ireturn

  public void setUseThrottleRetries(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #23                 // Field throttleRetries:Z
       5: return

  public com.amazonaws.ClientConfiguration withThrottledRetries(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #90                 // Method setUseThrottleRetries:(Z)V
       5: aload_0
       6: areturn

  public boolean useGzip();
    Code:
       0: aload_0
       1: getfield      #27                 // Field useGzip:Z
       4: ireturn

  public void setUseGzip(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #27                 // Field useGzip:Z
       5: return

  public com.amazonaws.ClientConfiguration withGzip(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #91                 // Method setUseGzip:(Z)V
       5: aload_0
       6: areturn

  public int[] getSocketBufferSizeHints();
    Code:
       0: iconst_2
       1: newarray       int
       3: dup
       4: iconst_0
       5: aload_0
       6: getfield      #24                 // Field socketSendBufferSizeHint:I
       9: iastore
      10: dup
      11: iconst_1
      12: aload_0
      13: getfield      #25                 // Field socketReceiveBufferSizeHint:I
      16: iastore
      17: areturn

  public void setSocketBufferSizeHints(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #24                 // Field socketSendBufferSizeHint:I
       5: aload_0
       6: iload_2
       7: putfield      #25                 // Field socketReceiveBufferSizeHint:I
      10: return

  public com.amazonaws.ClientConfiguration withSocketBufferSizeHints(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokevirtual #92                 // Method setSocketBufferSizeHints:(II)V
       6: aload_0
       7: areturn

  public java.lang.String getSignerOverride();
    Code:
       0: aload_0
       1: getfield      #46                 // Field signerOverride:Ljava/lang/String;
       4: areturn

  public void setSignerOverride(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #46                 // Field signerOverride:Ljava/lang/String;
       5: return

  public com.amazonaws.ClientConfiguration withSignerOverride(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #93                 // Method setSignerOverride:(Ljava/lang/String;)V
       5: aload_0
       6: areturn

  public boolean isPreemptiveBasicProxyAuth();
    Code:
       0: aload_0
       1: getfield      #45                 // Field preemptiveBasicProxyAuth:Z
       4: ireturn

  public void setPreemptiveBasicProxyAuth(java.lang.Boolean);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #94                 // Method java/lang/Boolean.booleanValue:()Z
       5: putfield      #45                 // Field preemptiveBasicProxyAuth:Z
       8: return

  public com.amazonaws.ClientConfiguration withPreemptiveBasicProxyAuth(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #95                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
       5: invokevirtual #96                 // Method setPreemptiveBasicProxyAuth:(Ljava/lang/Boolean;)V
       8: aload_0
       9: areturn

  public long getConnectionTTL();
    Code:
       0: aload_0
       1: getfield      #30                 // Field connectionTTL:J
       4: lreturn

  public void setConnectionTTL(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #30                 // Field connectionTTL:J
       5: return

  public com.amazonaws.ClientConfiguration withConnectionTTL(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #97                 // Method setConnectionTTL:(J)V
       5: aload_0
       6: areturn

  public long getConnectionMaxIdleMillis();
    Code:
       0: aload_0
       1: getfield      #33                 // Field connectionMaxIdleMillis:J
       4: lreturn

  public void setConnectionMaxIdleMillis(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #33                 // Field connectionMaxIdleMillis:J
       5: return

  public com.amazonaws.ClientConfiguration withConnectionMaxIdleMillis(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #98                 // Method setConnectionMaxIdleMillis:(J)V
       5: aload_0
       6: areturn

  public boolean useTcpKeepAlive();
    Code:
       0: aload_0
       1: getfield      #34                 // Field tcpKeepAlive:Z
       4: ireturn

  public void setUseTcpKeepAlive(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #34                 // Field tcpKeepAlive:Z
       5: return

  public com.amazonaws.ClientConfiguration withTcpKeepAlive(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #99                 // Method setUseTcpKeepAlive:(Z)V
       5: aload_0
       6: areturn

  public com.amazonaws.DnsResolver getDnsResolver();
    Code:
       0: aload_0
       1: getfield      #39                 // Field dnsResolver:Lcom/amazonaws/DnsResolver;
       4: areturn

  public void setDnsResolver(com.amazonaws.DnsResolver);
    Code:
       0: aload_1
       1: ifnonnull     14
       4: new           #79                 // class java/lang/IllegalArgumentException
       7: dup
       8: ldc           #100                // String resolver cannot be null
      10: invokespecial #81                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: aload_0
      15: aload_1
      16: putfield      #39                 // Field dnsResolver:Lcom/amazonaws/DnsResolver;
      19: return

  public com.amazonaws.ClientConfiguration withDnsResolver(com.amazonaws.DnsResolver);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #101                // Method setDnsResolver:(Lcom/amazonaws/DnsResolver;)V
       5: aload_0
       6: areturn

  public boolean getCacheResponseMetadata();
    Code:
       0: aload_0
       1: getfield      #35                 // Field cacheResponseMetadata:Z
       4: ireturn

  public void setCacheResponseMetadata(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #35                 // Field cacheResponseMetadata:Z
       5: return

  public com.amazonaws.ClientConfiguration withCacheResponseMetadata(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #102                // Method setCacheResponseMetadata:(Z)V
       5: aload_0
       6: areturn

  public int getResponseMetadataCacheSize();
    Code:
       0: aload_0
       1: getfield      #36                 // Field responseMetadataCacheSize:I
       4: ireturn

  public void setResponseMetadataCacheSize(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #36                 // Field responseMetadataCacheSize:I
       5: return

  public com.amazonaws.ClientConfiguration withResponseMetadataCacheSize(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #103                // Method setResponseMetadataCacheSize:(I)V
       5: aload_0
       6: areturn

  public com.amazonaws.ApacheHttpClientConfig getApacheHttpClientConfig();
    Code:
       0: aload_0
       1: getfield      #43                 // Field apacheHttpClientConfig:Lcom/amazonaws/ApacheHttpClientConfig;
       4: areturn

  public java.security.SecureRandom getSecureRandom();
    Code:
       0: aload_0
       1: getfield      #104                // Field secureRandom:Ljava/security/SecureRandom;
       4: ifnonnull     18
       7: aload_0
       8: new           #105                // class java/security/SecureRandom
      11: dup
      12: invokespecial #106                // Method java/security/SecureRandom."<init>":()V
      15: putfield      #104                // Field secureRandom:Ljava/security/SecureRandom;
      18: aload_0
      19: getfield      #104                // Field secureRandom:Ljava/security/SecureRandom;
      22: areturn

  public void setSecureRandom(java.security.SecureRandom);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #104                // Field secureRandom:Ljava/security/SecureRandom;
       5: return

  public com.amazonaws.ClientConfiguration withSecureRandom(java.security.SecureRandom);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #107                // Method setSecureRandom:(Ljava/security/SecureRandom;)V
       5: aload_0
       6: areturn

  public boolean isUseExpectContinue();
    Code:
       0: aload_0
       1: getfield      #40                 // Field useExpectContinue:Z
       4: ireturn

  public void setUseExpectContinue(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #40                 // Field useExpectContinue:Z
       5: return

  public com.amazonaws.ClientConfiguration withUseExpectContinue(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #108                // Method setUseExpectContinue:(Z)V
       5: aload_0
       6: areturn

  static {};
    Code:
       0: invokestatic  #109                // Method com/amazonaws/util/VersionInfoUtils.getUserAgent:()Ljava/lang/String;
       3: putstatic     #2                  // Field DEFAULT_USER_AGENT:Ljava/lang/String;
       6: getstatic     #110                // Field com/amazonaws/retry/PredefinedRetryPolicies.DEFAULT:Lcom/amazonaws/retry/RetryPolicy;
       9: putstatic     #5                  // Field DEFAULT_RETRY_POLICY:Lcom/amazonaws/retry/RetryPolicy;
      12: return
}
