Compiled from "PrivilegedMasterSecretValidator.java"
public class com.amazonaws.http.conn.ssl.privileged.PrivilegedMasterSecretValidator implements com.amazonaws.http.conn.ssl.MasterSecretValidators$MasterSecretValidator {
  private static final org.apache.commons.logging.Log LOG;

  public com.amazonaws.http.conn.ssl.privileged.PrivilegedMasterSecretValidator();
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: return

  public boolean isMasterSecretValid(java.net.Socket);
    Code:
       0: new           #3                  // class com/amazonaws/http/conn/ssl/privileged/PrivilegedMasterSecretValidator$1
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #4                  // Method com/amazonaws/http/conn/ssl/privileged/PrivilegedMasterSecretValidator$1."<init>":(Lcom/amazonaws/http/conn/ssl/privileged/PrivilegedMasterSecretValidator;Ljava/net/Socket;)V
       9: invokestatic  #5                  // Method java/security/AccessController.doPrivileged:(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
      12: checkcast     #6                  // class java/lang/Boolean
      15: invokevirtual #7                  // Method java/lang/Boolean.booleanValue:()Z
      18: ireturn

  private boolean privilegedIsMasterSecretValid(java.net.Socket);
    Code:
       0: aload_1
       1: instanceof    #8                  // class javax/net/ssl/SSLSocket
       4: ifeq          104
       7: aload_0
       8: aload_1
       9: invokespecial #9                  // Method getSslSession:(Ljava/net/Socket;)Ljavax/net/ssl/SSLSession;
      12: astore_2
      13: aload_2
      14: ifnull        104
      17: aload_2
      18: invokevirtual #10                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      21: invokevirtual #11                 // Method java/lang/Class.getName:()Ljava/lang/String;
      24: astore_3
      25: ldc           #12                 // String sun.security.ssl.SSLSessionImpl
      27: aload_3
      28: invokevirtual #13                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      31: ifeq          104
      34: aload_0
      35: aload_2
      36: aload_3
      37: invokespecial #14                 // Method getMasterSecret:(Ljavax/net/ssl/SSLSession;Ljava/lang/String;)Ljava/lang/Object;
      40: astore        4
      42: aload         4
      44: ifnonnull     93
      47: aload_2
      48: invokeinterface #15,  1           // InterfaceMethod javax/net/ssl/SSLSession.invalidate:()V
      53: getstatic     #16                 // Field LOG:Lorg/apache/commons/logging/Log;
      56: invokeinterface #17,  1           // InterfaceMethod org/apache/commons/logging/Log.isDebugEnabled:()Z
      61: ifeq          91
      64: getstatic     #16                 // Field LOG:Lorg/apache/commons/logging/Log;
      67: new           #18                 // class java/lang/StringBuilder
      70: dup
      71: invokespecial #19                 // Method java/lang/StringBuilder."<init>":()V
      74: ldc           #20                 // String Invalidated session
      76: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      79: aload_2
      80: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      83: invokevirtual #23                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      86: invokeinterface #24,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      91: iconst_0
      92: ireturn
      93: goto          104
      96: astore        4
      98: aload_0
      99: aload         4
     101: invokespecial #26                 // Method failedToVerifyMasterSecret:(Ljava/lang/Throwable;)V
     104: iconst_1
     105: ireturn
    Exception table:
       from    to  target type
          34    92    96   Class java/lang/Exception

  private javax.net.ssl.SSLSession getSslSession(java.net.Socket);
    Code:
       0: aload_1
       1: checkcast     #8                  // class javax/net/ssl/SSLSocket
       4: invokevirtual #27                 // Method javax/net/ssl/SSLSocket.getSession:()Ljavax/net/ssl/SSLSession;
       7: areturn

  private java.lang.Object getMasterSecret(javax.net.ssl.SSLSession, java.lang.String) throws java.lang.Exception;
    Code:
       0: aload_2
       1: invokestatic  #28                 // Method java/lang/Class.forName:(Ljava/lang/String;)Ljava/lang/Class;
       4: astore_3
       5: aload_3
       6: ldc           #29                 // String getMasterSecret
       8: iconst_0
       9: anewarray     #30                 // class java/lang/Class
      12: invokevirtual #31                 // Method java/lang/Class.getDeclaredMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;
      15: astore        4
      17: aload         4
      19: iconst_1
      20: invokevirtual #32                 // Method java/lang/reflect/Method.setAccessible:(Z)V
      23: aload         4
      25: aload_1
      26: iconst_0
      27: anewarray     #33                 // class java/lang/Object
      30: invokevirtual #34                 // Method java/lang/reflect/Method.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;
      33: areturn

  private void failedToVerifyMasterSecret(java.lang.Throwable);
    Code:
       0: getstatic     #16                 // Field LOG:Lorg/apache/commons/logging/Log;
       3: invokeinterface #17,  1           // InterfaceMethod org/apache/commons/logging/Log.isDebugEnabled:()Z
       8: ifeq          22
      11: getstatic     #16                 // Field LOG:Lorg/apache/commons/logging/Log;
      14: ldc           #35                 // String Failed to verify the SSL master secret
      16: aload_1
      17: invokeinterface #36,  3           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;Ljava/lang/Throwable;)V
      22: return

  static boolean access$000(com.amazonaws.http.conn.ssl.privileged.PrivilegedMasterSecretValidator, java.net.Socket);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method privilegedIsMasterSecretValid:(Ljava/net/Socket;)Z
       5: ireturn

  static {};
    Code:
       0: ldc           #37                 // class com/amazonaws/http/conn/ssl/privileged/PrivilegedMasterSecretValidator
       2: invokestatic  #38                 // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
       5: putstatic     #16                 // Field LOG:Lorg/apache/commons/logging/Log;
       8: return
}
