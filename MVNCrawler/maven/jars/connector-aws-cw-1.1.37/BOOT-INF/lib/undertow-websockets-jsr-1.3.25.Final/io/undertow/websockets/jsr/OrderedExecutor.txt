Compiled from "OrderedExecutor.java"
public class io.undertow.websockets.jsr.OrderedExecutor implements java.util.concurrent.Executor {
  private final java.util.Deque<java.lang.Runnable> tasks;

  private final java.util.concurrent.Executor delegate;

  private final io.undertow.websockets.jsr.OrderedExecutor$ExecutorTask task;

  private volatile int state;

  private static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<io.undertow.websockets.jsr.OrderedExecutor> stateUpdater;

  private static final int STATE_NOT_RUNNING;

  private static final int STATE_RUNNING;

  public io.undertow.websockets.jsr.OrderedExecutor(java.util.concurrent.Executor);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #4                  // class java/util/concurrent/ConcurrentLinkedDeque
       8: dup
       9: invokespecial #5                  // Method java/util/concurrent/ConcurrentLinkedDeque."<init>":()V
      12: putfield      #1                  // Field tasks:Ljava/util/Deque;
      15: aload_0
      16: new           #6                  // class io/undertow/websockets/jsr/OrderedExecutor$ExecutorTask
      19: dup
      20: aload_0
      21: aconst_null
      22: invokespecial #7                  // Method io/undertow/websockets/jsr/OrderedExecutor$ExecutorTask."<init>":(Lio/undertow/websockets/jsr/OrderedExecutor;Lio/undertow/websockets/jsr/OrderedExecutor$1;)V
      25: putfield      #8                  // Field task:Lio/undertow/websockets/jsr/OrderedExecutor$ExecutorTask;
      28: aload_0
      29: iconst_0
      30: putfield      #9                  // Field state:I
      33: aload_0
      34: aload_1
      35: putfield      #10                 // Field delegate:Ljava/util/concurrent/Executor;
      38: return

  public void execute(java.lang.Runnable);
    Code:
       0: aload_0
       1: getfield      #1                  // Field tasks:Ljava/util/Deque;
       4: aload_1
       5: invokeinterface #11,  2           // InterfaceMethod java/util/Deque.add:(Ljava/lang/Object;)Z
      10: pop
      11: getstatic     #2                  // Field stateUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      14: aload_0
      15: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.get:(Ljava/lang/Object;)I
      18: ifne          34
      21: aload_0
      22: getfield      #10                 // Field delegate:Ljava/util/concurrent/Executor;
      25: aload_0
      26: getfield      #8                  // Field task:Lio/undertow/websockets/jsr/OrderedExecutor$ExecutorTask;
      29: invokeinterface #13,  2           // InterfaceMethod java/util/concurrent/Executor.execute:(Ljava/lang/Runnable;)V
      34: return

  static java.util.concurrent.atomic.AtomicIntegerFieldUpdater access$100();
    Code:
       0: getstatic     #2                  // Field stateUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: areturn

  static java.util.Deque access$200(io.undertow.websockets.jsr.OrderedExecutor);
    Code:
       0: aload_0
       1: getfield      #1                  // Field tasks:Ljava/util/Deque;
       4: areturn

  static {};
    Code:
       0: ldc           #14                 // class io/undertow/websockets/jsr/OrderedExecutor
       2: ldc           #15                 // String state
       4: invokestatic  #16                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       7: putstatic     #2                  // Field stateUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: return
}
