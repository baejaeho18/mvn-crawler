Compiled from "JSONParserString.java"
class net.minidev.json.parser.JSONParserString extends net.minidev.json.parser.JSONParserMemory {
  private java.lang.String in;

  public net.minidev.json.parser.JSONParserString(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #1                  // Method net/minidev/json/parser/JSONParserMemory."<init>":(I)V
       5: return

  public java.lang.Object parse(java.lang.String) throws net.minidev.json.parser.ParseException;
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #2                  // Field net/minidev/json/JSONValue.defaultReader:Lnet/minidev/json/writer/JsonReader;
       5: getfield      #3                  // Field net/minidev/json/writer/JsonReader.DEFAULT:Lnet/minidev/json/writer/JsonReaderI;
       8: invokevirtual #4                  // Method parse:(Ljava/lang/String;Lnet/minidev/json/writer/JsonReaderI;)Ljava/lang/Object;
      11: areturn

  public <T> T parse(java.lang.String, net.minidev.json.writer.JsonReaderI<T>) throws net.minidev.json.parser.ParseException;
    Code:
       0: aload_0
       1: aload_2
       2: getfield      #5                  // Field net/minidev/json/writer/JsonReaderI.base:Lnet/minidev/json/writer/JsonReader;
       5: putfield      #6                  // Field base:Lnet/minidev/json/writer/JsonReader;
       8: aload_0
       9: aload_1
      10: putfield      #7                  // Field in:Ljava/lang/String;
      13: aload_0
      14: aload_1
      15: invokevirtual #8                  // Method java/lang/String.length:()I
      18: putfield      #9                  // Field len:I
      21: aload_0
      22: aload_2
      23: invokevirtual #10                 // Method parse:(Lnet/minidev/json/writer/JsonReaderI;)Ljava/lang/Object;
      26: areturn

  protected void extractString(int, int);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #7                  // Field in:Ljava/lang/String;
       5: iload_1
       6: iload_2
       7: invokevirtual #11                 // Method java/lang/String.substring:(II)Ljava/lang/String;
      10: putfield      #12                 // Field xs:Ljava/lang/String;
      13: return

  protected void extractStringTrim(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokevirtual #13                 // Method extractString:(II)V
       6: aload_0
       7: aload_0
       8: getfield      #12                 // Field xs:Ljava/lang/String;
      11: invokevirtual #14                 // Method java/lang/String.trim:()Ljava/lang/String;
      14: putfield      #12                 // Field xs:Ljava/lang/String;
      17: return

  protected int indexOf(char, int);
    Code:
       0: aload_0
       1: getfield      #7                  // Field in:Ljava/lang/String;
       4: iload_1
       5: iload_2
       6: invokevirtual #15                 // Method java/lang/String.indexOf:(II)I
       9: ireturn

  protected void read();
    Code:
       0: aload_0
       1: dup
       2: getfield      #16                 // Field pos:I
       5: iconst_1
       6: iadd
       7: dup_x1
       8: putfield      #16                 // Field pos:I
      11: aload_0
      12: getfield      #9                  // Field len:I
      15: if_icmplt     27
      18: aload_0
      19: bipush        26
      21: putfield      #17                 // Field c:C
      24: goto          42
      27: aload_0
      28: aload_0
      29: getfield      #7                  // Field in:Ljava/lang/String;
      32: aload_0
      33: getfield      #16                 // Field pos:I
      36: invokevirtual #18                 // Method java/lang/String.charAt:(I)C
      39: putfield      #17                 // Field c:C
      42: return

  protected void readS();
    Code:
       0: aload_0
       1: dup
       2: getfield      #16                 // Field pos:I
       5: iconst_1
       6: iadd
       7: dup_x1
       8: putfield      #16                 // Field pos:I
      11: aload_0
      12: getfield      #9                  // Field len:I
      15: if_icmplt     27
      18: aload_0
      19: bipush        26
      21: putfield      #17                 // Field c:C
      24: goto          42
      27: aload_0
      28: aload_0
      29: getfield      #7                  // Field in:Ljava/lang/String;
      32: aload_0
      33: getfield      #16                 // Field pos:I
      36: invokevirtual #18                 // Method java/lang/String.charAt:(I)C
      39: putfield      #17                 // Field c:C
      42: return

  protected void readNoEnd() throws net.minidev.json.parser.ParseException;
    Code:
       0: aload_0
       1: dup
       2: getfield      #16                 // Field pos:I
       5: iconst_1
       6: iadd
       7: dup_x1
       8: putfield      #16                 // Field pos:I
      11: aload_0
      12: getfield      #9                  // Field len:I
      15: if_icmplt     41
      18: aload_0
      19: bipush        26
      21: putfield      #17                 // Field c:C
      24: new           #19                 // class net/minidev/json/parser/ParseException
      27: dup
      28: aload_0
      29: getfield      #16                 // Field pos:I
      32: iconst_1
      33: isub
      34: iconst_3
      35: ldc           #20                 // String EOF
      37: invokespecial #21                 // Method net/minidev/json/parser/ParseException."<init>":(IILjava/lang/Object;)V
      40: athrow
      41: aload_0
      42: aload_0
      43: getfield      #7                  // Field in:Ljava/lang/String;
      46: aload_0
      47: getfield      #16                 // Field pos:I
      50: invokevirtual #18                 // Method java/lang/String.charAt:(I)C
      53: putfield      #17                 // Field c:C
      56: return
}
