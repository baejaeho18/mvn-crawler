Compiled from "BasicHttpProcessor.java"
public final class org.apache.http.protocol.BasicHttpProcessor implements org.apache.http.protocol.HttpProcessor,org.apache.http.protocol.HttpRequestInterceptorList,org.apache.http.protocol.HttpResponseInterceptorList,java.lang.Cloneable {
  protected final java.util.List<org.apache.http.HttpRequestInterceptor> requestInterceptors;

  protected final java.util.List<org.apache.http.HttpResponseInterceptor> responseInterceptors;

  public org.apache.http.protocol.BasicHttpProcessor();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/ArrayList
       8: dup
       9: invokespecial #3                  // Method java/util/ArrayList."<init>":()V
      12: putfield      #4                  // Field requestInterceptors:Ljava/util/List;
      15: aload_0
      16: new           #2                  // class java/util/ArrayList
      19: dup
      20: invokespecial #3                  // Method java/util/ArrayList."<init>":()V
      23: putfield      #5                  // Field responseInterceptors:Ljava/util/List;
      26: return

  public void addRequestInterceptor(org.apache.http.HttpRequestInterceptor);
    Code:
       0: aload_1
       1: ifnonnull     5
       4: return
       5: aload_0
       6: getfield      #4                  // Field requestInterceptors:Ljava/util/List;
       9: aload_1
      10: invokeinterface #6,  2            // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      15: pop
      16: return

  public void addRequestInterceptor(org.apache.http.HttpRequestInterceptor, int);
    Code:
       0: aload_1
       1: ifnonnull     5
       4: return
       5: aload_0
       6: getfield      #4                  // Field requestInterceptors:Ljava/util/List;
       9: iload_2
      10: aload_1
      11: invokeinterface #7,  3            // InterfaceMethod java/util/List.add:(ILjava/lang/Object;)V
      16: return

  public void addResponseInterceptor(org.apache.http.HttpResponseInterceptor, int);
    Code:
       0: aload_1
       1: ifnonnull     5
       4: return
       5: aload_0
       6: getfield      #5                  // Field responseInterceptors:Ljava/util/List;
       9: iload_2
      10: aload_1
      11: invokeinterface #7,  3            // InterfaceMethod java/util/List.add:(ILjava/lang/Object;)V
      16: return

  public void removeRequestInterceptorByClass(java.lang.Class<? extends org.apache.http.HttpRequestInterceptor>);
    Code:
       0: aload_0
       1: getfield      #4                  // Field requestInterceptors:Ljava/util/List;
       4: invokeinterface #8,  1            // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
       9: astore_2
      10: aload_2
      11: invokeinterface #9,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z
      16: ifeq          46
      19: aload_2
      20: invokeinterface #10,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      25: astore_3
      26: aload_3
      27: invokevirtual #11                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      30: aload_1
      31: invokevirtual #12                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      34: ifeq          43
      37: aload_2
      38: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.remove:()V
      43: goto          10
      46: return

  public void removeResponseInterceptorByClass(java.lang.Class<? extends org.apache.http.HttpResponseInterceptor>);
    Code:
       0: aload_0
       1: getfield      #5                  // Field responseInterceptors:Ljava/util/List;
       4: invokeinterface #8,  1            // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
       9: astore_2
      10: aload_2
      11: invokeinterface #9,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z
      16: ifeq          46
      19: aload_2
      20: invokeinterface #10,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      25: astore_3
      26: aload_3
      27: invokevirtual #11                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      30: aload_1
      31: invokevirtual #12                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      34: ifeq          43
      37: aload_2
      38: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.remove:()V
      43: goto          10
      46: return

  public final void addInterceptor(org.apache.http.HttpRequestInterceptor);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #14                 // Method addRequestInterceptor:(Lorg/apache/http/HttpRequestInterceptor;)V
       5: return

  public final void addInterceptor(org.apache.http.HttpRequestInterceptor, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokevirtual #15                 // Method addRequestInterceptor:(Lorg/apache/http/HttpRequestInterceptor;I)V
       6: return

  public int getRequestInterceptorCount();
    Code:
       0: aload_0
       1: getfield      #4                  // Field requestInterceptors:Ljava/util/List;
       4: invokeinterface #16,  1           // InterfaceMethod java/util/List.size:()I
       9: ireturn

  public org.apache.http.HttpRequestInterceptor getRequestInterceptor(int);
    Code:
       0: iload_1
       1: iflt          17
       4: iload_1
       5: aload_0
       6: getfield      #4                  // Field requestInterceptors:Ljava/util/List;
       9: invokeinterface #16,  1           // InterfaceMethod java/util/List.size:()I
      14: if_icmplt     19
      17: aconst_null
      18: areturn
      19: aload_0
      20: getfield      #4                  // Field requestInterceptors:Ljava/util/List;
      23: iload_1
      24: invokeinterface #17,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      29: checkcast     #18                 // class org/apache/http/HttpRequestInterceptor
      32: areturn

  public void clearRequestInterceptors();
    Code:
       0: aload_0
       1: getfield      #4                  // Field requestInterceptors:Ljava/util/List;
       4: invokeinterface #19,  1           // InterfaceMethod java/util/List.clear:()V
       9: return

  public void addResponseInterceptor(org.apache.http.HttpResponseInterceptor);
    Code:
       0: aload_1
       1: ifnonnull     5
       4: return
       5: aload_0
       6: getfield      #5                  // Field responseInterceptors:Ljava/util/List;
       9: aload_1
      10: invokeinterface #6,  2            // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      15: pop
      16: return

  public final void addInterceptor(org.apache.http.HttpResponseInterceptor);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #20                 // Method addResponseInterceptor:(Lorg/apache/http/HttpResponseInterceptor;)V
       5: return

  public final void addInterceptor(org.apache.http.HttpResponseInterceptor, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokevirtual #21                 // Method addResponseInterceptor:(Lorg/apache/http/HttpResponseInterceptor;I)V
       6: return

  public int getResponseInterceptorCount();
    Code:
       0: aload_0
       1: getfield      #5                  // Field responseInterceptors:Ljava/util/List;
       4: invokeinterface #16,  1           // InterfaceMethod java/util/List.size:()I
       9: ireturn

  public org.apache.http.HttpResponseInterceptor getResponseInterceptor(int);
    Code:
       0: iload_1
       1: iflt          17
       4: iload_1
       5: aload_0
       6: getfield      #5                  // Field responseInterceptors:Ljava/util/List;
       9: invokeinterface #16,  1           // InterfaceMethod java/util/List.size:()I
      14: if_icmplt     19
      17: aconst_null
      18: areturn
      19: aload_0
      20: getfield      #5                  // Field responseInterceptors:Ljava/util/List;
      23: iload_1
      24: invokeinterface #17,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      29: checkcast     #22                 // class org/apache/http/HttpResponseInterceptor
      32: areturn

  public void clearResponseInterceptors();
    Code:
       0: aload_0
       1: getfield      #5                  // Field responseInterceptors:Ljava/util/List;
       4: invokeinterface #19,  1           // InterfaceMethod java/util/List.clear:()V
       9: return

  public void setInterceptors(java.util.List<?>);
    Code:
       0: aload_1
       1: ldc           #23                 // String Inteceptor list
       3: invokestatic  #24                 // Method org/apache/http/util/Args.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: getfield      #4                  // Field requestInterceptors:Ljava/util/List;
      11: invokeinterface #19,  1           // InterfaceMethod java/util/List.clear:()V
      16: aload_0
      17: getfield      #5                  // Field responseInterceptors:Ljava/util/List;
      20: invokeinterface #19,  1           // InterfaceMethod java/util/List.clear:()V
      25: aload_1
      26: invokeinterface #25,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      31: astore_2
      32: aload_2
      33: invokeinterface #9,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z
      38: ifeq          81
      41: aload_2
      42: invokeinterface #10,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      47: astore_3
      48: aload_3
      49: instanceof    #18                 // class org/apache/http/HttpRequestInterceptor
      52: ifeq          63
      55: aload_0
      56: aload_3
      57: checkcast     #18                 // class org/apache/http/HttpRequestInterceptor
      60: invokevirtual #26                 // Method addInterceptor:(Lorg/apache/http/HttpRequestInterceptor;)V
      63: aload_3
      64: instanceof    #22                 // class org/apache/http/HttpResponseInterceptor
      67: ifeq          78
      70: aload_0
      71: aload_3
      72: checkcast     #22                 // class org/apache/http/HttpResponseInterceptor
      75: invokevirtual #27                 // Method addInterceptor:(Lorg/apache/http/HttpResponseInterceptor;)V
      78: goto          32
      81: return

  public void clearInterceptors();
    Code:
       0: aload_0
       1: invokevirtual #28                 // Method clearRequestInterceptors:()V
       4: aload_0
       5: invokevirtual #29                 // Method clearResponseInterceptors:()V
       8: return

  public void process(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws java.io.IOException, org.apache.http.HttpException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field requestInterceptors:Ljava/util/List;
       4: invokeinterface #25,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
       9: astore_3
      10: aload_3
      11: invokeinterface #9,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z
      16: ifeq          42
      19: aload_3
      20: invokeinterface #10,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      25: checkcast     #18                 // class org/apache/http/HttpRequestInterceptor
      28: astore        4
      30: aload         4
      32: aload_1
      33: aload_2
      34: invokeinterface #30,  3           // InterfaceMethod org/apache/http/HttpRequestInterceptor.process:(Lorg/apache/http/HttpRequest;Lorg/apache/http/protocol/HttpContext;)V
      39: goto          10
      42: return

  public void process(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws java.io.IOException, org.apache.http.HttpException;
    Code:
       0: aload_0
       1: getfield      #5                  // Field responseInterceptors:Ljava/util/List;
       4: invokeinterface #25,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
       9: astore_3
      10: aload_3
      11: invokeinterface #9,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z
      16: ifeq          42
      19: aload_3
      20: invokeinterface #10,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      25: checkcast     #22                 // class org/apache/http/HttpResponseInterceptor
      28: astore        4
      30: aload         4
      32: aload_1
      33: aload_2
      34: invokeinterface #31,  3           // InterfaceMethod org/apache/http/HttpResponseInterceptor.process:(Lorg/apache/http/HttpResponse;Lorg/apache/http/protocol/HttpContext;)V
      39: goto          10
      42: return

  protected void copyInterceptors(org.apache.http.protocol.BasicHttpProcessor);
    Code:
       0: aload_1
       1: getfield      #4                  // Field requestInterceptors:Ljava/util/List;
       4: invokeinterface #19,  1           // InterfaceMethod java/util/List.clear:()V
       9: aload_1
      10: getfield      #4                  // Field requestInterceptors:Ljava/util/List;
      13: aload_0
      14: getfield      #4                  // Field requestInterceptors:Ljava/util/List;
      17: invokeinterface #32,  2           // InterfaceMethod java/util/List.addAll:(Ljava/util/Collection;)Z
      22: pop
      23: aload_1
      24: getfield      #5                  // Field responseInterceptors:Ljava/util/List;
      27: invokeinterface #19,  1           // InterfaceMethod java/util/List.clear:()V
      32: aload_1
      33: getfield      #5                  // Field responseInterceptors:Ljava/util/List;
      36: aload_0
      37: getfield      #5                  // Field responseInterceptors:Ljava/util/List;
      40: invokeinterface #32,  2           // InterfaceMethod java/util/List.addAll:(Ljava/util/Collection;)Z
      45: pop
      46: return

  public org.apache.http.protocol.BasicHttpProcessor copy();
    Code:
       0: new           #33                 // class org/apache/http/protocol/BasicHttpProcessor
       3: dup
       4: invokespecial #34                 // Method "<init>":()V
       7: astore_1
       8: aload_0
       9: aload_1
      10: invokevirtual #35                 // Method copyInterceptors:(Lorg/apache/http/protocol/BasicHttpProcessor;)V
      13: aload_1
      14: areturn

  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
    Code:
       0: aload_0
       1: invokespecial #36                 // Method java/lang/Object.clone:()Ljava/lang/Object;
       4: checkcast     #33                 // class org/apache/http/protocol/BasicHttpProcessor
       7: astore_1
       8: aload_0
       9: aload_1
      10: invokevirtual #35                 // Method copyInterceptors:(Lorg/apache/http/protocol/BasicHttpProcessor;)V
      13: aload_1
      14: areturn
}
