Compiled from "NioTcpServer.java"
class org.xnio.nio.NioTcpServer$1$1 implements java.lang.Runnable {
  final java.util.concurrent.atomic.AtomicInteger val$counter;

  final org.xnio.nio.NioTcpServerHandle val$handle;

  final java.util.concurrent.CountDownLatch val$latch;

  final org.xnio.nio.NioTcpServer$1 this$1;

  org.xnio.nio.NioTcpServer$1$1(org.xnio.nio.NioTcpServer$1, java.util.concurrent.atomic.AtomicInteger, org.xnio.nio.NioTcpServerHandle, java.util.concurrent.CountDownLatch);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$1:Lorg/xnio/nio/NioTcpServer$1;
       5: aload_0
       6: aload_2
       7: putfield      #2                  // Field val$counter:Ljava/util/concurrent/atomic/AtomicInteger;
      10: aload_0
      11: aload_3
      12: putfield      #3                  // Field val$handle:Lorg/xnio/nio/NioTcpServerHandle;
      15: aload_0
      16: aload         4
      18: putfield      #4                  // Field val$latch:Ljava/util/concurrent/CountDownLatch;
      21: aload_0
      22: invokespecial #5                  // Method java/lang/Object."<init>":()V
      25: return

  public void run();
    Code:
       0: aload_0
       1: getfield      #2                  // Field val$counter:Ljava/util/concurrent/atomic/AtomicInteger;
       4: aload_0
       5: getfield      #3                  // Field val$handle:Lorg/xnio/nio/NioTcpServerHandle;
       8: invokevirtual #6                  // Method org/xnio/nio/NioTcpServerHandle.getConnectionCount:()I
      11: invokevirtual #7                  // Method java/util/concurrent/atomic/AtomicInteger.getAndAdd:(I)I
      14: pop
      15: aload_0
      16: getfield      #4                  // Field val$latch:Ljava/util/concurrent/CountDownLatch;
      19: invokevirtual #8                  // Method java/util/concurrent/CountDownLatch.countDown:()V
      22: return
}
