Compiled from "NioPipeStreamConnection.java"
final class org.xnio.nio.NioPipeStreamConnection extends org.xnio.nio.AbstractNioStreamConnection {
  private final java.nio.channels.Pipe$SourceChannel sourceChannel;

  private final java.nio.channels.Pipe$SinkChannel sinkChannel;

  private final org.xnio.nio.NioPipeSourceConduit sourceConduit;

  private final org.xnio.nio.NioPipeSinkConduit sinkConduit;

  org.xnio.nio.NioPipeStreamConnection(org.xnio.nio.WorkerThread, java.nio.channels.SelectionKey, java.nio.channels.SelectionKey);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method org/xnio/nio/AbstractNioStreamConnection."<init>":(Lorg/xnio/nio/WorkerThread;)V
       5: aload_2
       6: ifnull        51
       9: aload_0
      10: aload_0
      11: new           #2                  // class org/xnio/nio/NioPipeSourceConduit
      14: dup
      15: aload_1
      16: aload_2
      17: aload_0
      18: invokespecial #3                  // Method org/xnio/nio/NioPipeSourceConduit."<init>":(Lorg/xnio/nio/WorkerThread;Ljava/nio/channels/SelectionKey;Lorg/xnio/nio/NioPipeStreamConnection;)V
      21: dup_x1
      22: putfield      #4                  // Field sourceConduit:Lorg/xnio/nio/NioPipeSourceConduit;
      25: invokevirtual #5                  // Method setSourceConduit:(Lorg/xnio/conduits/StreamSourceConduit;)V
      28: aload_2
      29: aload_0
      30: getfield      #4                  // Field sourceConduit:Lorg/xnio/nio/NioPipeSourceConduit;
      33: invokevirtual #6                  // Method java/nio/channels/SelectionKey.attach:(Ljava/lang/Object;)Ljava/lang/Object;
      36: pop
      37: aload_0
      38: aload_2
      39: invokevirtual #7                  // Method java/nio/channels/SelectionKey.channel:()Ljava/nio/channels/SelectableChannel;
      42: checkcast     #8                  // class java/nio/channels/Pipe$SourceChannel
      45: putfield      #9                  // Field sourceChannel:Ljava/nio/channels/Pipe$SourceChannel;
      48: goto          61
      51: aload_0
      52: aconst_null
      53: putfield      #4                  // Field sourceConduit:Lorg/xnio/nio/NioPipeSourceConduit;
      56: aload_0
      57: aconst_null
      58: putfield      #9                  // Field sourceChannel:Ljava/nio/channels/Pipe$SourceChannel;
      61: aload_3
      62: ifnull        107
      65: aload_0
      66: aload_0
      67: new           #10                 // class org/xnio/nio/NioPipeSinkConduit
      70: dup
      71: aload_1
      72: aload_3
      73: aload_0
      74: invokespecial #11                 // Method org/xnio/nio/NioPipeSinkConduit."<init>":(Lorg/xnio/nio/WorkerThread;Ljava/nio/channels/SelectionKey;Lorg/xnio/nio/NioPipeStreamConnection;)V
      77: dup_x1
      78: putfield      #12                 // Field sinkConduit:Lorg/xnio/nio/NioPipeSinkConduit;
      81: invokevirtual #13                 // Method setSinkConduit:(Lorg/xnio/conduits/StreamSinkConduit;)V
      84: aload_3
      85: aload_0
      86: getfield      #12                 // Field sinkConduit:Lorg/xnio/nio/NioPipeSinkConduit;
      89: invokevirtual #6                  // Method java/nio/channels/SelectionKey.attach:(Ljava/lang/Object;)Ljava/lang/Object;
      92: pop
      93: aload_0
      94: aload_3
      95: invokevirtual #7                  // Method java/nio/channels/SelectionKey.channel:()Ljava/nio/channels/SelectableChannel;
      98: checkcast     #14                 // class java/nio/channels/Pipe$SinkChannel
     101: putfield      #15                 // Field sinkChannel:Ljava/nio/channels/Pipe$SinkChannel;
     104: goto          117
     107: aload_0
     108: aconst_null
     109: putfield      #12                 // Field sinkConduit:Lorg/xnio/nio/NioPipeSinkConduit;
     112: aload_0
     113: aconst_null
     114: putfield      #15                 // Field sinkChannel:Ljava/nio/channels/Pipe$SinkChannel;
     117: return

  public java.net.SocketAddress getPeerAddress();
    Code:
       0: aconst_null
       1: areturn

  public java.net.SocketAddress getLocalAddress();
    Code:
       0: aconst_null
       1: areturn

  protected boolean readClosed();
    Code:
       0: aload_0
       1: invokespecial #16                 // Method org/xnio/nio/AbstractNioStreamConnection.readClosed:()Z
       4: ireturn

  protected boolean writeClosed();
    Code:
       0: aload_0
       1: invokespecial #17                 // Method org/xnio/nio/AbstractNioStreamConnection.writeClosed:()Z
       4: ireturn

  protected void notifyWriteClosed();
    Code:
       0: aload_0
       1: getfield      #12                 // Field sinkConduit:Lorg/xnio/nio/NioPipeSinkConduit;
       4: astore_1
       5: aload_1
       6: ifnull        13
       9: aload_1
      10: invokevirtual #18                 // Method org/xnio/nio/NioPipeSinkConduit.writeTerminated:()V
      13: return

  protected void notifyReadClosed();
    Code:
       0: aload_0
       1: getfield      #4                  // Field sourceConduit:Lorg/xnio/nio/NioPipeSourceConduit;
       4: astore_1
       5: aload_1
       6: ifnull        13
       9: aload_1
      10: invokevirtual #19                 // Method org/xnio/nio/NioPipeSourceConduit.readTerminated:()V
      13: return

  private void cancelKey(org.xnio.nio.NioHandle);
    Code:
       0: aload_1
       1: ifnull        15
       4: aload_1
       5: invokevirtual #20                 // Method org/xnio/nio/NioHandle.getWorkerThread:()Lorg/xnio/nio/WorkerThread;
       8: aload_1
       9: invokevirtual #21                 // Method org/xnio/nio/NioHandle.getSelectionKey:()Ljava/nio/channels/SelectionKey;
      12: invokevirtual #22                 // Method org/xnio/nio/WorkerThread.cancelKey:(Ljava/nio/channels/SelectionKey;)V
      15: return

  private void closeChannel(java.nio.channels.Channel) throws java.io.IOException;
    Code:
       0: aload_1
       1: ifnull        14
       4: aload_1
       5: invokeinterface #23,  1           // InterfaceMethod java/nio/channels/Channel.close:()V
      10: goto          14
      13: astore_2
      14: return
    Exception table:
       from    to  target type
           4    10    13   Class java/nio/channels/ClosedChannelException

  protected void closeAction() throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #4                  // Field sourceConduit:Lorg/xnio/nio/NioPipeSourceConduit;
       5: invokespecial #25                 // Method cancelKey:(Lorg/xnio/nio/NioHandle;)V
       8: aload_0
       9: aload_0
      10: getfield      #12                 // Field sinkConduit:Lorg/xnio/nio/NioPipeSinkConduit;
      13: invokespecial #25                 // Method cancelKey:(Lorg/xnio/nio/NioHandle;)V
      16: aload_0
      17: aload_0
      18: getfield      #9                  // Field sourceChannel:Ljava/nio/channels/Pipe$SourceChannel;
      21: invokespecial #26                 // Method closeChannel:(Ljava/nio/channels/Channel;)V
      24: aload_0
      25: aload_0
      26: getfield      #15                 // Field sinkChannel:Ljava/nio/channels/Pipe$SinkChannel;
      29: invokespecial #26                 // Method closeChannel:(Ljava/nio/channels/Channel;)V
      32: aload_0
      33: getfield      #9                  // Field sourceChannel:Ljava/nio/channels/Pipe$SourceChannel;
      36: invokestatic  #27                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
      39: aload_0
      40: getfield      #15                 // Field sinkChannel:Ljava/nio/channels/Pipe$SinkChannel;
      43: invokestatic  #27                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
      46: goto          66
      49: astore_1
      50: aload_0
      51: getfield      #9                  // Field sourceChannel:Ljava/nio/channels/Pipe$SourceChannel;
      54: invokestatic  #27                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
      57: aload_0
      58: getfield      #15                 // Field sinkChannel:Ljava/nio/channels/Pipe$SinkChannel;
      61: invokestatic  #27                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
      64: aload_1
      65: athrow
      66: return
    Exception table:
       from    to  target type
           0    32    49   any
          49    50    49   any

  public boolean supportsOption(org.xnio.Option<?>);
    Code:
       0: aload_1
       1: getstatic     #28                 // Field org/xnio/Options.READ_TIMEOUT:Lorg/xnio/Option;
       4: if_acmpne     14
       7: aload_0
       8: getfield      #4                  // Field sourceConduit:Lorg/xnio/nio/NioPipeSourceConduit;
      11: ifnonnull     28
      14: aload_1
      15: getstatic     #29                 // Field org/xnio/Options.WRITE_TIMEOUT:Lorg/xnio/Option;
      18: if_acmpne     32
      21: aload_0
      22: getfield      #12                 // Field sinkConduit:Lorg/xnio/nio/NioPipeSinkConduit;
      25: ifnull        32
      28: iconst_1
      29: goto          33
      32: iconst_0
      33: ireturn

  public <T> T getOption(org.xnio.Option<T>) throws java.io.IOException;
    Code:
       0: aload_1
       1: getstatic     #28                 // Field org/xnio/Options.READ_TIMEOUT:Lorg/xnio/Option;
       4: if_acmpne     32
       7: aload_0
       8: getfield      #4                  // Field sourceConduit:Lorg/xnio/nio/NioPipeSourceConduit;
      11: astore_2
      12: aload_2
      13: ifnonnull     20
      16: aconst_null
      17: goto          31
      20: aload_1
      21: aload_2
      22: invokevirtual #30                 // Method org/xnio/nio/NioPipeSourceConduit.getReadTimeout:()I
      25: invokestatic  #31                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      28: invokevirtual #32                 // Method org/xnio/Option.cast:(Ljava/lang/Object;)Ljava/lang/Object;
      31: areturn
      32: aload_1
      33: getstatic     #29                 // Field org/xnio/Options.WRITE_TIMEOUT:Lorg/xnio/Option;
      36: if_acmpne     64
      39: aload_0
      40: getfield      #12                 // Field sinkConduit:Lorg/xnio/nio/NioPipeSinkConduit;
      43: astore_2
      44: aload_2
      45: ifnonnull     52
      48: aconst_null
      49: goto          63
      52: aload_1
      53: aload_2
      54: invokevirtual #33                 // Method org/xnio/nio/NioPipeSinkConduit.getWriteTimeout:()I
      57: invokestatic  #31                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      60: invokevirtual #32                 // Method org/xnio/Option.cast:(Ljava/lang/Object;)Ljava/lang/Object;
      63: areturn
      64: aconst_null
      65: areturn

  public <T> T setOption(org.xnio.Option<T>, T) throws java.lang.IllegalArgumentException, java.io.IOException;
    Code:
       0: aload_1
       1: getstatic     #28                 // Field org/xnio/Options.READ_TIMEOUT:Lorg/xnio/Option;
       4: if_acmpne     59
       7: aload_0
       8: getfield      #4                  // Field sourceConduit:Lorg/xnio/nio/NioPipeSourceConduit;
      11: astore        4
      13: aload         4
      15: ifnonnull     22
      18: aconst_null
      19: goto          55
      22: aload_1
      23: aload         4
      25: aload_2
      26: ifnonnull     33
      29: iconst_0
      30: goto          46
      33: getstatic     #28                 // Field org/xnio/Options.READ_TIMEOUT:Lorg/xnio/Option;
      36: aload_2
      37: invokevirtual #32                 // Method org/xnio/Option.cast:(Ljava/lang/Object;)Ljava/lang/Object;
      40: checkcast     #34                 // class java/lang/Integer
      43: invokevirtual #35                 // Method java/lang/Integer.intValue:()I
      46: invokevirtual #36                 // Method org/xnio/nio/NioPipeSourceConduit.getAndSetReadTimeout:(I)I
      49: invokestatic  #31                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      52: invokevirtual #32                 // Method org/xnio/Option.cast:(Ljava/lang/Object;)Ljava/lang/Object;
      55: astore_3
      56: goto          120
      59: aload_1
      60: getstatic     #29                 // Field org/xnio/Options.WRITE_TIMEOUT:Lorg/xnio/Option;
      63: if_acmpne     118
      66: aload_0
      67: getfield      #12                 // Field sinkConduit:Lorg/xnio/nio/NioPipeSinkConduit;
      70: astore        4
      72: aload         4
      74: ifnonnull     81
      77: aconst_null
      78: goto          114
      81: aload_1
      82: aload         4
      84: aload_2
      85: ifnonnull     92
      88: iconst_0
      89: goto          105
      92: getstatic     #29                 // Field org/xnio/Options.WRITE_TIMEOUT:Lorg/xnio/Option;
      95: aload_2
      96: invokevirtual #32                 // Method org/xnio/Option.cast:(Ljava/lang/Object;)Ljava/lang/Object;
      99: checkcast     #34                 // class java/lang/Integer
     102: invokevirtual #35                 // Method java/lang/Integer.intValue:()I
     105: invokevirtual #37                 // Method org/xnio/nio/NioPipeSinkConduit.getAndSetWriteTimeout:(I)I
     108: invokestatic  #31                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     111: invokevirtual #32                 // Method org/xnio/Option.cast:(Ljava/lang/Object;)Ljava/lang/Object;
     114: astore_3
     115: goto          120
     118: aconst_null
     119: areturn
     120: aload_3
     121: areturn

  java.nio.channels.Pipe$SourceChannel getSourcePipeChannel();
    Code:
       0: aload_0
       1: getfield      #9                  // Field sourceChannel:Ljava/nio/channels/Pipe$SourceChannel;
       4: areturn

  java.nio.channels.Pipe$SinkChannel getSinkPipeChannel();
    Code:
       0: aload_0
       1: getfield      #15                 // Field sinkChannel:Ljava/nio/channels/Pipe$SinkChannel;
       4: areturn
}
