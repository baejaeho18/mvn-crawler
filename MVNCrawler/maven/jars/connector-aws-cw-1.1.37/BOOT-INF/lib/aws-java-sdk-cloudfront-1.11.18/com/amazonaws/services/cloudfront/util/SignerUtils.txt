Compiled from "SignerUtils.java"
public class com.amazonaws.services.cloudfront.util.SignerUtils {
  private static final java.security.SecureRandom srand;

  public com.amazonaws.services.cloudfront.util.SignerUtils();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public static java.lang.String buildCannedPolicy(java.lang.String, java.util.Date);
    Code:
       0: new           #2                  // class java/lang/StringBuilder
       3: dup
       4: invokespecial #3                  // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #4                  // String {\"Statement\":[{\"Resource\":\"
       9: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      16: ldc           #6                  // String \",\"Condition\":{\"DateLessThan\":{\"AWS:EpochTime\":
      18: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      21: getstatic     #7                  // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      24: aload_1
      25: invokevirtual #8                  // Method java/util/Date.getTime:()J
      28: invokevirtual #9                  // Method java/util/concurrent/TimeUnit.toSeconds:(J)J
      31: invokevirtual #10                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      34: ldc           #11                 // String }}}]}
      36: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      39: invokevirtual #12                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      42: areturn

  public static java.lang.String buildCustomPolicy(java.lang.String, java.util.Date, java.util.Date, java.lang.String);
    Code:
       0: new           #2                  // class java/lang/StringBuilder
       3: dup
       4: invokespecial #3                  // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #13                 // String {\"Statement\": [{\"Resource\":\"
       9: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      16: ldc           #6                  // String \",\"Condition\":{\"DateLessThan\":{\"AWS:EpochTime\":
      18: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      21: getstatic     #7                  // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      24: aload_1
      25: invokevirtual #8                  // Method java/util/Date.getTime:()J
      28: invokevirtual #9                  // Method java/util/concurrent/TimeUnit.toSeconds:(J)J
      31: invokevirtual #10                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      34: ldc           #14                 // String }
      36: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      39: aload_3
      40: ifnonnull     48
      43: ldc           #15                 // String
      45: goto          72
      48: new           #2                  // class java/lang/StringBuilder
      51: dup
      52: invokespecial #3                  // Method java/lang/StringBuilder."<init>":()V
      55: ldc           #16                 // String ,\"IpAddress\":{\"AWS:SourceIp\":\"
      57: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      60: aload_3
      61: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      64: ldc           #17                 // String \"}
      66: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      69: invokevirtual #12                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      72: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      75: aload_2
      76: ifnonnull     84
      79: ldc           #15                 // String
      81: goto          117
      84: new           #2                  // class java/lang/StringBuilder
      87: dup
      88: invokespecial #3                  // Method java/lang/StringBuilder."<init>":()V
      91: ldc           #18                 // String ,\"DateGreaterThan\":{\"AWS:EpochTime\":
      93: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      96: getstatic     #7                  // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      99: aload_2
     100: invokevirtual #8                  // Method java/util/Date.getTime:()J
     103: invokevirtual #9                  // Method java/util/concurrent/TimeUnit.toSeconds:(J)J
     106: invokevirtual #10                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
     109: ldc           #14                 // String }
     111: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     114: invokevirtual #12                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     117: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     120: ldc           #19                 // String }}]}
     122: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     125: invokevirtual #12                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     128: areturn

  public static java.lang.String makeBytesUrlSafe(byte[]);
    Code:
       0: aload_0
       1: invokestatic  #20                 // Method com/amazonaws/util/Base64.encode:([B)[B
       4: astore_1
       5: iconst_0
       6: istore_2
       7: iload_2
       8: aload_1
       9: arraylength
      10: if_icmpge     82
      13: aload_1
      14: iload_2
      15: baload
      16: lookupswitch  { // 3
                    43: 52
                    47: 68
                    61: 60
               default: 76
          }
      52: aload_1
      53: iload_2
      54: bipush        45
      56: bastore
      57: goto          76
      60: aload_1
      61: iload_2
      62: bipush        95
      64: bastore
      65: goto          76
      68: aload_1
      69: iload_2
      70: bipush        126
      72: bastore
      73: goto          76
      76: iinc          2, 1
      79: goto          7
      82: new           #21                 // class java/lang/String
      85: dup
      86: aload_1
      87: getstatic     #22                 // Field com/amazonaws/util/StringUtils.UTF8:Ljava/nio/charset/Charset;
      90: invokespecial #23                 // Method java/lang/String."<init>":([BLjava/nio/charset/Charset;)V
      93: areturn

  public static java.lang.String makeStringUrlSafe(java.lang.String);
    Code:
       0: aload_0
       1: getstatic     #22                 // Field com/amazonaws/util/StringUtils.UTF8:Ljava/nio/charset/Charset;
       4: invokevirtual #24                 // Method java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B
       7: invokestatic  #25                 // Method makeBytesUrlSafe:([B)Ljava/lang/String;
      10: areturn

  public static java.lang.String generateResourcePath(com.amazonaws.services.cloudfront.util.SignerUtils$Protocol, java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: getstatic     #26                 // Field com/amazonaws/services/cloudfront/util/SignerUtils$Protocol.http:Lcom/amazonaws/services/cloudfront/util/SignerUtils$Protocol;
       4: if_acmpeq     14
       7: aload_0
       8: getstatic     #27                 // Field com/amazonaws/services/cloudfront/util/SignerUtils$Protocol.https:Lcom/amazonaws/services/cloudfront/util/SignerUtils$Protocol;
      11: if_acmpne     49
      14: new           #2                  // class java/lang/StringBuilder
      17: dup
      18: invokespecial #3                  // Method java/lang/StringBuilder."<init>":()V
      21: aload_0
      22: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      25: ldc           #29                 // String ://
      27: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      30: aload_1
      31: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      34: ldc           #30                 // String /
      36: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      39: aload_2
      40: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      43: invokevirtual #12                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      46: goto          50
      49: aload_2
      50: areturn

  public static byte[] signWithSha1RSA(byte[], java.security.PrivateKey) throws java.security.InvalidKeyException;
    Code:
       0: ldc           #31                 // String SHA1withRSA
       2: invokestatic  #32                 // Method java/security/Signature.getInstance:(Ljava/lang/String;)Ljava/security/Signature;
       5: astore_2
       6: aload_2
       7: aload_1
       8: getstatic     #33                 // Field srand:Ljava/security/SecureRandom;
      11: invokevirtual #34                 // Method java/security/Signature.initSign:(Ljava/security/PrivateKey;Ljava/security/SecureRandom;)V
      14: aload_2
      15: aload_0
      16: invokevirtual #35                 // Method java/security/Signature.update:([B)V
      19: aload_2
      20: invokevirtual #36                 // Method java/security/Signature.sign:()[B
      23: areturn
      24: astore_3
      25: new           #38                 // class java/lang/IllegalStateException
      28: dup
      29: aload_3
      30: invokespecial #39                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/Throwable;)V
      33: athrow
      34: astore_3
      35: new           #38                 // class java/lang/IllegalStateException
      38: dup
      39: aload_3
      40: invokespecial #39                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/Throwable;)V
      43: athrow
    Exception table:
       from    to  target type
           0    23    24   Class java/security/NoSuchAlgorithmException
           0    23    34   Class java/security/SignatureException

  public static java.security.PrivateKey loadPrivateKey(java.io.File) throws java.security.spec.InvalidKeySpecException, java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #41                 // Method java/io/File.getAbsolutePath:()Ljava/lang/String;
       4: invokestatic  #42                 // Method com/amazonaws/util/StringUtils.lowerCase:(Ljava/lang/String;)Ljava/lang/String;
       7: ldc           #43                 // String .pem
       9: invokevirtual #44                 // Method java/lang/String.endsWith:(Ljava/lang/String;)Z
      12: ifeq          53
      15: new           #45                 // class java/io/FileInputStream
      18: dup
      19: aload_0
      20: invokespecial #46                 // Method java/io/FileInputStream."<init>":(Ljava/io/File;)V
      23: astore_1
      24: aload_1
      25: invokestatic  #47                 // Method com/amazonaws/auth/PEM.readPrivateKey:(Ljava/io/InputStream;)Ljava/security/PrivateKey;
      28: astore_2
      29: aload_1
      30: invokevirtual #48                 // Method java/io/InputStream.close:()V
      33: goto          37
      36: astore_3
      37: aload_2
      38: areturn
      39: astore        4
      41: aload_1
      42: invokevirtual #48                 // Method java/io/InputStream.close:()V
      45: goto          50
      48: astore        5
      50: aload         4
      52: athrow
      53: aload_0
      54: invokevirtual #41                 // Method java/io/File.getAbsolutePath:()Ljava/lang/String;
      57: invokestatic  #42                 // Method com/amazonaws/util/StringUtils.lowerCase:(Ljava/lang/String;)Ljava/lang/String;
      60: ldc           #50                 // String .der
      62: invokevirtual #44                 // Method java/lang/String.endsWith:(Ljava/lang/String;)Z
      65: ifeq          109
      68: new           #45                 // class java/io/FileInputStream
      71: dup
      72: aload_0
      73: invokespecial #46                 // Method java/io/FileInputStream."<init>":(Ljava/io/File;)V
      76: astore_1
      77: aload_1
      78: invokestatic  #51                 // Method com/amazonaws/util/IOUtils.toByteArray:(Ljava/io/InputStream;)[B
      81: invokestatic  #52                 // Method com/amazonaws/auth/RSA.privateKeyFromPKCS8:([B)Ljava/security/PrivateKey;
      84: astore_2
      85: aload_1
      86: invokevirtual #48                 // Method java/io/InputStream.close:()V
      89: goto          93
      92: astore_3
      93: aload_2
      94: areturn
      95: astore        6
      97: aload_1
      98: invokevirtual #48                 // Method java/io/InputStream.close:()V
     101: goto          106
     104: astore        7
     106: aload         6
     108: athrow
     109: new           #53                 // class com/amazonaws/AmazonClientException
     112: dup
     113: ldc           #54                 // String Unsupported file type for private key
     115: invokespecial #55                 // Method com/amazonaws/AmazonClientException."<init>":(Ljava/lang/String;)V
     118: athrow
    Exception table:
       from    to  target type
          29    33    36   Class java/io/IOException
          24    29    39   any
          41    45    48   Class java/io/IOException
          39    41    39   any
          85    89    92   Class java/io/IOException
          77    85    95   any
          97   101   104   Class java/io/IOException
          95    97    95   any

  public static java.security.PrivateKey loadPrivateKey(java.lang.String) throws java.security.spec.InvalidKeySpecException, java.io.IOException;
    Code:
       0: new           #56                 // class java/io/File
       3: dup
       4: aload_0
       5: invokespecial #57                 // Method java/io/File."<init>":(Ljava/lang/String;)V
       8: astore_1
       9: aload_1
      10: invokestatic  #58                 // Method loadPrivateKey:(Ljava/io/File;)Ljava/security/PrivateKey;
      13: areturn

  static {};
    Code:
       0: new           #59                 // class java/security/SecureRandom
       3: dup
       4: invokespecial #60                 // Method java/security/SecureRandom."<init>":()V
       7: putstatic     #33                 // Field srand:Ljava/security/SecureRandom;
      10: return
}
