Compiled from "Caffeine.java"
public final class com.github.benmanes.caffeine.cache.Caffeine<K, V> {
  static final java.util.logging.Logger logger;

  static final java.util.function.Supplier<com.github.benmanes.caffeine.cache.stats.StatsCounter> ENABLED_STATS_COUNTER_SUPPLIER;

  static final int UNSET_INT;

  static final int DEFAULT_INITIAL_CAPACITY;

  static final int DEFAULT_EXPIRATION_NANOS;

  static final int DEFAULT_REFRESH_NANOS;

  boolean strictParsing;

  long maximumSize;

  long maximumWeight;

  int initialCapacity;

  long refreshNanos;

  long expireAfterWriteNanos;

  long expireAfterAccessNanos;

  com.github.benmanes.caffeine.cache.RemovalListener<? super K, ? super V> removalListener;

  java.util.function.Supplier<com.github.benmanes.caffeine.cache.stats.StatsCounter> statsCounterSupplier;

  com.github.benmanes.caffeine.cache.CacheWriter<? super K, ? super V> writer;

  com.github.benmanes.caffeine.cache.Weigher<? super K, ? super V> weigher;

  java.util.concurrent.Executor executor;

  com.github.benmanes.caffeine.cache.Ticker ticker;

  com.github.benmanes.caffeine.cache.Caffeine$Strength keyStrength;

  com.github.benmanes.caffeine.cache.Caffeine$Strength valueStrength;

  private com.github.benmanes.caffeine.cache.Caffeine();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #2                  // Field strictParsing:Z
       9: aload_0
      10: ldc2_w        #4                  // long -1l
      13: putfield      #6                  // Field maximumSize:J
      16: aload_0
      17: ldc2_w        #4                  // long -1l
      20: putfield      #7                  // Field maximumWeight:J
      23: aload_0
      24: iconst_m1
      25: putfield      #8                  // Field initialCapacity:I
      28: aload_0
      29: ldc2_w        #4                  // long -1l
      32: putfield      #9                  // Field refreshNanos:J
      35: aload_0
      36: ldc2_w        #4                  // long -1l
      39: putfield      #10                 // Field expireAfterWriteNanos:J
      42: aload_0
      43: ldc2_w        #4                  // long -1l
      46: putfield      #11                 // Field expireAfterAccessNanos:J
      49: return

  static void requireArgument(boolean, java.lang.String, java.lang.Object...);
    Code:
       0: iload_0
       1: ifne          17
       4: new           #12                 // class java/lang/IllegalArgumentException
       7: dup
       8: aload_1
       9: aload_2
      10: invokestatic  #13                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      13: invokespecial #14                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: return

  static void requireArgument(boolean);
    Code:
       0: iload_0
       1: ifne          12
       4: new           #12                 // class java/lang/IllegalArgumentException
       7: dup
       8: invokespecial #15                 // Method java/lang/IllegalArgumentException."<init>":()V
      11: athrow
      12: return

  static void requireState(boolean);
    Code:
       0: iload_0
       1: ifne          12
       4: new           #16                 // class java/lang/IllegalStateException
       7: dup
       8: invokespecial #17                 // Method java/lang/IllegalStateException."<init>":()V
      11: athrow
      12: return

  static void requireState(boolean, java.lang.String, java.lang.Object...);
    Code:
       0: iload_0
       1: ifne          17
       4: new           #16                 // class java/lang/IllegalStateException
       7: dup
       8: aload_1
       9: aload_2
      10: invokestatic  #13                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      13: invokespecial #18                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: return

  public static com.github.benmanes.caffeine.cache.Caffeine<java.lang.Object, java.lang.Object> newBuilder();
    Code:
       0: new           #3                  // class com/github/benmanes/caffeine/cache/Caffeine
       3: dup
       4: invokespecial #19                 // Method "<init>":()V
       7: areturn

  public static com.github.benmanes.caffeine.cache.Caffeine<java.lang.Object, java.lang.Object> from(com.github.benmanes.caffeine.cache.CaffeineSpec);
    Code:
       0: aload_0
       1: invokevirtual #20                 // Method com/github/benmanes/caffeine/cache/CaffeineSpec.toBuilder:()Lcom/github/benmanes/caffeine/cache/Caffeine;
       4: astore_1
       5: aload_1
       6: iconst_0
       7: putfield      #2                  // Field strictParsing:Z
      10: aload_1
      11: areturn

  public static com.github.benmanes.caffeine.cache.Caffeine<java.lang.Object, java.lang.Object> from(java.lang.String);
    Code:
       0: aload_0
       1: invokestatic  #21                 // Method com/github/benmanes/caffeine/cache/CaffeineSpec.parse:(Ljava/lang/String;)Lcom/github/benmanes/caffeine/cache/CaffeineSpec;
       4: invokestatic  #22                 // Method from:(Lcom/github/benmanes/caffeine/cache/CaffeineSpec;)Lcom/github/benmanes/caffeine/cache/Caffeine;
       7: areturn

  public com.github.benmanes.caffeine.cache.Caffeine<K, V> initialCapacity(int);
    Code:
       0: aload_0
       1: getfield      #8                  // Field initialCapacity:I
       4: iconst_m1
       5: if_icmpne     12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: ldc           #23                 // String initial capacity was already set to %s
      15: iconst_1
      16: anewarray     #24                 // class java/lang/Object
      19: dup
      20: iconst_0
      21: aload_0
      22: getfield      #8                  // Field initialCapacity:I
      25: invokestatic  #25                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      28: aastore
      29: invokestatic  #26                 // Method requireState:(ZLjava/lang/String;[Ljava/lang/Object;)V
      32: iload_1
      33: iflt          40
      36: iconst_1
      37: goto          41
      40: iconst_0
      41: invokestatic  #27                 // Method requireArgument:(Z)V
      44: aload_0
      45: iload_1
      46: putfield      #8                  // Field initialCapacity:I
      49: aload_0
      50: areturn

  boolean hasInitialCapacity();
    Code:
       0: aload_0
       1: getfield      #8                  // Field initialCapacity:I
       4: iconst_m1
       5: if_icmpeq     12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: ireturn

  int getInitialCapacity();
    Code:
       0: aload_0
       1: invokevirtual #28                 // Method hasInitialCapacity:()Z
       4: ifeq          14
       7: aload_0
       8: getfield      #8                  // Field initialCapacity:I
      11: goto          15
      14: iconst_0
      15: ireturn

  public com.github.benmanes.caffeine.cache.Caffeine<K, V> executor(java.util.concurrent.Executor);
    Code:
       0: aload_0
       1: getfield      #29                 // Field executor:Ljava/util/concurrent/Executor;
       4: ifnonnull     11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ldc           #30                 // String executor was already set to %s
      14: iconst_1
      15: anewarray     #24                 // class java/lang/Object
      18: dup
      19: iconst_0
      20: aload_0
      21: getfield      #29                 // Field executor:Ljava/util/concurrent/Executor;
      24: aastore
      25: invokestatic  #26                 // Method requireState:(ZLjava/lang/String;[Ljava/lang/Object;)V
      28: aload_0
      29: aload_1
      30: invokestatic  #31                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
      33: checkcast     #32                 // class java/util/concurrent/Executor
      36: putfield      #29                 // Field executor:Ljava/util/concurrent/Executor;
      39: aload_0
      40: areturn

  java.util.concurrent.Executor getExecutor();
    Code:
       0: aload_0
       1: getfield      #29                 // Field executor:Ljava/util/concurrent/Executor;
       4: ifnonnull     13
       7: invokestatic  #33                 // Method java/util/concurrent/ForkJoinPool.commonPool:()Ljava/util/concurrent/ForkJoinPool;
      10: goto          17
      13: aload_0
      14: getfield      #29                 // Field executor:Ljava/util/concurrent/Executor;
      17: areturn

  public com.github.benmanes.caffeine.cache.Caffeine<K, V> maximumSize(long);
    Code:
       0: aload_0
       1: getfield      #6                  // Field maximumSize:J
       4: ldc2_w        #4                  // long -1l
       7: lcmp
       8: ifne          15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: ldc           #34                 // String maximum size was already set to %s
      18: iconst_1
      19: anewarray     #24                 // class java/lang/Object
      22: dup
      23: iconst_0
      24: aload_0
      25: getfield      #6                  // Field maximumSize:J
      28: invokestatic  #35                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      31: aastore
      32: invokestatic  #26                 // Method requireState:(ZLjava/lang/String;[Ljava/lang/Object;)V
      35: aload_0
      36: getfield      #7                  // Field maximumWeight:J
      39: ldc2_w        #4                  // long -1l
      42: lcmp
      43: ifne          50
      46: iconst_1
      47: goto          51
      50: iconst_0
      51: ldc           #36                 // String maximum weight was already set to %s
      53: iconst_1
      54: anewarray     #24                 // class java/lang/Object
      57: dup
      58: iconst_0
      59: aload_0
      60: getfield      #7                  // Field maximumWeight:J
      63: invokestatic  #35                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      66: aastore
      67: invokestatic  #26                 // Method requireState:(ZLjava/lang/String;[Ljava/lang/Object;)V
      70: aload_0
      71: getfield      #37                 // Field weigher:Lcom/github/benmanes/caffeine/cache/Weigher;
      74: ifnonnull     81
      77: iconst_1
      78: goto          82
      81: iconst_0
      82: ldc           #38                 // String maximum size can not be combined with weigher
      84: iconst_0
      85: anewarray     #24                 // class java/lang/Object
      88: invokestatic  #26                 // Method requireState:(ZLjava/lang/String;[Ljava/lang/Object;)V
      91: lload_1
      92: lconst_0
      93: lcmp
      94: iflt          101
      97: iconst_1
      98: goto          102
     101: iconst_0
     102: ldc           #39                 // String maximum size must not be negative
     104: iconst_0
     105: anewarray     #24                 // class java/lang/Object
     108: invokestatic  #40                 // Method requireArgument:(ZLjava/lang/String;[Ljava/lang/Object;)V
     111: aload_0
     112: lload_1
     113: putfield      #6                  // Field maximumSize:J
     116: aload_0
     117: areturn

  public com.github.benmanes.caffeine.cache.Caffeine<K, V> maximumWeight(long);
    Code:
       0: aload_0
       1: getfield      #7                  // Field maximumWeight:J
       4: ldc2_w        #4                  // long -1l
       7: lcmp
       8: ifne          15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: ldc           #36                 // String maximum weight was already set to %s
      18: iconst_1
      19: anewarray     #24                 // class java/lang/Object
      22: dup
      23: iconst_0
      24: aload_0
      25: getfield      #7                  // Field maximumWeight:J
      28: invokestatic  #35                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      31: aastore
      32: invokestatic  #26                 // Method requireState:(ZLjava/lang/String;[Ljava/lang/Object;)V
      35: aload_0
      36: getfield      #6                  // Field maximumSize:J
      39: ldc2_w        #4                  // long -1l
      42: lcmp
      43: ifne          50
      46: iconst_1
      47: goto          51
      50: iconst_0
      51: ldc           #34                 // String maximum size was already set to %s
      53: iconst_1
      54: anewarray     #24                 // class java/lang/Object
      57: dup
      58: iconst_0
      59: aload_0
      60: getfield      #6                  // Field maximumSize:J
      63: invokestatic  #35                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      66: aastore
      67: invokestatic  #26                 // Method requireState:(ZLjava/lang/String;[Ljava/lang/Object;)V
      70: aload_0
      71: lload_1
      72: putfield      #7                  // Field maximumWeight:J
      75: lload_1
      76: lconst_0
      77: lcmp
      78: iflt          85
      81: iconst_1
      82: goto          86
      85: iconst_0
      86: ldc           #41                 // String maximum weight must not be negative
      88: iconst_0
      89: anewarray     #24                 // class java/lang/Object
      92: invokestatic  #40                 // Method requireArgument:(ZLjava/lang/String;[Ljava/lang/Object;)V
      95: aload_0
      96: areturn

  public <K1 extends K, V1 extends V> com.github.benmanes.caffeine.cache.Caffeine<K1, V1> weigher(com.github.benmanes.caffeine.cache.Weigher<? super K1, ? super V1>);
    Code:
       0: aload_1
       1: invokestatic  #31                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: aload_0
       6: getfield      #37                 // Field weigher:Lcom/github/benmanes/caffeine/cache/Weigher;
       9: ifnonnull     16
      12: iconst_1
      13: goto          17
      16: iconst_0
      17: ldc           #42                 // String weigher was already set to %s
      19: iconst_1
      20: anewarray     #24                 // class java/lang/Object
      23: dup
      24: iconst_0
      25: aload_0
      26: getfield      #37                 // Field weigher:Lcom/github/benmanes/caffeine/cache/Weigher;
      29: aastore
      30: invokestatic  #26                 // Method requireState:(ZLjava/lang/String;[Ljava/lang/Object;)V
      33: aload_0
      34: getfield      #2                  // Field strictParsing:Z
      37: ifeq          51
      40: aload_0
      41: getfield      #6                  // Field maximumSize:J
      44: ldc2_w        #4                  // long -1l
      47: lcmp
      48: ifne          55
      51: iconst_1
      52: goto          56
      55: iconst_0
      56: ldc           #43                 // String weigher can not be combined with maximum size
      58: iconst_1
      59: anewarray     #24                 // class java/lang/Object
      62: dup
      63: iconst_0
      64: aload_0
      65: getfield      #6                  // Field maximumSize:J
      68: invokestatic  #35                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      71: aastore
      72: invokestatic  #26                 // Method requireState:(ZLjava/lang/String;[Ljava/lang/Object;)V
      75: aload_0
      76: astore_2
      77: aload_2
      78: aload_1
      79: putfield      #37                 // Field weigher:Lcom/github/benmanes/caffeine/cache/Weigher;
      82: aload_2
      83: areturn

  boolean evicts();
    Code:
       0: aload_0
       1: invokevirtual #44                 // Method getMaximum:()J
       4: ldc2_w        #4                  // long -1l
       7: lcmp
       8: ifeq          15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: ireturn

  boolean isWeighted();
    Code:
       0: aload_0
       1: getfield      #37                 // Field weigher:Lcom/github/benmanes/caffeine/cache/Weigher;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  long getMaximum();
    Code:
       0: aload_0
       1: invokevirtual #45                 // Method isWeighted:()Z
       4: ifeq          14
       7: aload_0
       8: getfield      #7                  // Field maximumWeight:J
      11: goto          18
      14: aload_0
      15: getfield      #6                  // Field maximumSize:J
      18: lreturn

  <K1 extends K, V1 extends V> com.github.benmanes.caffeine.cache.Weigher<K1, V1> getWeigher(boolean);
    Code:
       0: aload_0
       1: invokevirtual #45                 // Method isWeighted:()Z
       4: ifeq          27
       7: aload_0
       8: getfield      #37                 // Field weigher:Lcom/github/benmanes/caffeine/cache/Weigher;
      11: invokestatic  #46                 // InterfaceMethod com/github/benmanes/caffeine/cache/Weigher.singletonWeigher:()Lcom/github/benmanes/caffeine/cache/Weigher;
      14: if_acmpeq     27
      17: aload_0
      18: getfield      #37                 // Field weigher:Lcom/github/benmanes/caffeine/cache/Weigher;
      21: invokestatic  #47                 // InterfaceMethod com/github/benmanes/caffeine/cache/Weigher.boundedWeigher:(Lcom/github/benmanes/caffeine/cache/Weigher;)Lcom/github/benmanes/caffeine/cache/Weigher;
      24: goto          30
      27: invokestatic  #46                 // InterfaceMethod com/github/benmanes/caffeine/cache/Weigher.singletonWeigher:()Lcom/github/benmanes/caffeine/cache/Weigher;
      30: astore_2
      31: iload_1
      32: ifeq          46
      35: new           #48                 // class com/github/benmanes/caffeine/cache/Async$AsyncWeigher
      38: dup
      39: aload_2
      40: invokespecial #49                 // Method com/github/benmanes/caffeine/cache/Async$AsyncWeigher."<init>":(Lcom/github/benmanes/caffeine/cache/Weigher;)V
      43: goto          47
      46: aload_2
      47: areturn

  public com.github.benmanes.caffeine.cache.Caffeine<K, V> weakKeys();
    Code:
       0: aload_0
       1: getfield      #50                 // Field keyStrength:Lcom/github/benmanes/caffeine/cache/Caffeine$Strength;
       4: ifnonnull     11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ldc           #51                 // String Key strength was already set to %s
      14: iconst_1
      15: anewarray     #24                 // class java/lang/Object
      18: dup
      19: iconst_0
      20: aload_0
      21: getfield      #50                 // Field keyStrength:Lcom/github/benmanes/caffeine/cache/Caffeine$Strength;
      24: aastore
      25: invokestatic  #26                 // Method requireState:(ZLjava/lang/String;[Ljava/lang/Object;)V
      28: aload_0
      29: getfield      #52                 // Field writer:Lcom/github/benmanes/caffeine/cache/CacheWriter;
      32: ifnonnull     39
      35: iconst_1
      36: goto          40
      39: iconst_0
      40: ldc           #53                 // String Weak keys may not be used with CacheWriter
      42: iconst_0
      43: anewarray     #24                 // class java/lang/Object
      46: invokestatic  #26                 // Method requireState:(ZLjava/lang/String;[Ljava/lang/Object;)V
      49: aload_0
      50: getstatic     #54                 // Field com/github/benmanes/caffeine/cache/Caffeine$Strength.WEAK:Lcom/github/benmanes/caffeine/cache/Caffeine$Strength;
      53: putfield      #50                 // Field keyStrength:Lcom/github/benmanes/caffeine/cache/Caffeine$Strength;
      56: aload_0
      57: areturn

  boolean isStrongKeys();
    Code:
       0: aload_0
       1: getfield      #50                 // Field keyStrength:Lcom/github/benmanes/caffeine/cache/Caffeine$Strength;
       4: ifnonnull     11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  boolean isWeakKeys();
    Code:
       0: aload_0
       1: getfield      #50                 // Field keyStrength:Lcom/github/benmanes/caffeine/cache/Caffeine$Strength;
       4: getstatic     #54                 // Field com/github/benmanes/caffeine/cache/Caffeine$Strength.WEAK:Lcom/github/benmanes/caffeine/cache/Caffeine$Strength;
       7: if_acmpne     14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  public com.github.benmanes.caffeine.cache.Caffeine<K, V> weakValues();
    Code:
       0: aload_0
       1: getfield      #55                 // Field valueStrength:Lcom/github/benmanes/caffeine/cache/Caffeine$Strength;
       4: ifnonnull     11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ldc           #56                 // String Value strength was already set to %s
      14: iconst_1
      15: anewarray     #24                 // class java/lang/Object
      18: dup
      19: iconst_0
      20: aload_0
      21: getfield      #55                 // Field valueStrength:Lcom/github/benmanes/caffeine/cache/Caffeine$Strength;
      24: aastore
      25: invokestatic  #26                 // Method requireState:(ZLjava/lang/String;[Ljava/lang/Object;)V
      28: aload_0
      29: getstatic     #54                 // Field com/github/benmanes/caffeine/cache/Caffeine$Strength.WEAK:Lcom/github/benmanes/caffeine/cache/Caffeine$Strength;
      32: putfield      #55                 // Field valueStrength:Lcom/github/benmanes/caffeine/cache/Caffeine$Strength;
      35: aload_0
      36: areturn

  boolean isStrongValues();
    Code:
       0: aload_0
       1: getfield      #55                 // Field valueStrength:Lcom/github/benmanes/caffeine/cache/Caffeine$Strength;
       4: ifnonnull     11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  boolean isWeakValues();
    Code:
       0: aload_0
       1: getfield      #55                 // Field valueStrength:Lcom/github/benmanes/caffeine/cache/Caffeine$Strength;
       4: getstatic     #54                 // Field com/github/benmanes/caffeine/cache/Caffeine$Strength.WEAK:Lcom/github/benmanes/caffeine/cache/Caffeine$Strength;
       7: if_acmpne     14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  boolean isSoftValues();
    Code:
       0: aload_0
       1: getfield      #55                 // Field valueStrength:Lcom/github/benmanes/caffeine/cache/Caffeine$Strength;
       4: getstatic     #57                 // Field com/github/benmanes/caffeine/cache/Caffeine$Strength.SOFT:Lcom/github/benmanes/caffeine/cache/Caffeine$Strength;
       7: if_acmpne     14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  public com.github.benmanes.caffeine.cache.Caffeine<K, V> softValues();
    Code:
       0: aload_0
       1: getfield      #55                 // Field valueStrength:Lcom/github/benmanes/caffeine/cache/Caffeine$Strength;
       4: ifnonnull     11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ldc           #56                 // String Value strength was already set to %s
      14: iconst_1
      15: anewarray     #24                 // class java/lang/Object
      18: dup
      19: iconst_0
      20: aload_0
      21: getfield      #55                 // Field valueStrength:Lcom/github/benmanes/caffeine/cache/Caffeine$Strength;
      24: aastore
      25: invokestatic  #26                 // Method requireState:(ZLjava/lang/String;[Ljava/lang/Object;)V
      28: aload_0
      29: getstatic     #57                 // Field com/github/benmanes/caffeine/cache/Caffeine$Strength.SOFT:Lcom/github/benmanes/caffeine/cache/Caffeine$Strength;
      32: putfield      #55                 // Field valueStrength:Lcom/github/benmanes/caffeine/cache/Caffeine$Strength;
      35: aload_0
      36: areturn

  public com.github.benmanes.caffeine.cache.Caffeine<K, V> expireAfterWrite(long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: getfield      #10                 // Field expireAfterWriteNanos:J
       4: ldc2_w        #4                  // long -1l
       7: lcmp
       8: ifne          15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: ldc           #58                 // String expireAfterWrite was already set to %s ns
      18: iconst_1
      19: anewarray     #24                 // class java/lang/Object
      22: dup
      23: iconst_0
      24: aload_0
      25: getfield      #10                 // Field expireAfterWriteNanos:J
      28: invokestatic  #35                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      31: aastore
      32: invokestatic  #26                 // Method requireState:(ZLjava/lang/String;[Ljava/lang/Object;)V
      35: lload_1
      36: lconst_0
      37: lcmp
      38: iflt          45
      41: iconst_1
      42: goto          46
      45: iconst_0
      46: ldc           #59                 // String duration cannot be negative: %s %s
      48: iconst_2
      49: anewarray     #24                 // class java/lang/Object
      52: dup
      53: iconst_0
      54: lload_1
      55: invokestatic  #35                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      58: aastore
      59: dup
      60: iconst_1
      61: aload_3
      62: aastore
      63: invokestatic  #40                 // Method requireArgument:(ZLjava/lang/String;[Ljava/lang/Object;)V
      66: aload_0
      67: aload_3
      68: lload_1
      69: invokevirtual #60                 // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      72: putfield      #10                 // Field expireAfterWriteNanos:J
      75: aload_0
      76: areturn

  long getExpiresAfterWriteNanos();
    Code:
       0: aload_0
       1: invokevirtual #61                 // Method expiresAfterWrite:()Z
       4: ifeq          14
       7: aload_0
       8: getfield      #10                 // Field expireAfterWriteNanos:J
      11: goto          15
      14: lconst_0
      15: lreturn

  boolean expiresAfterWrite();
    Code:
       0: aload_0
       1: getfield      #10                 // Field expireAfterWriteNanos:J
       4: ldc2_w        #4                  // long -1l
       7: lcmp
       8: ifeq          15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: ireturn

  public com.github.benmanes.caffeine.cache.Caffeine<K, V> expireAfterAccess(long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: getfield      #11                 // Field expireAfterAccessNanos:J
       4: ldc2_w        #4                  // long -1l
       7: lcmp
       8: ifne          15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: ldc           #62                 // String expireAfterAccess was already set to %s ns
      18: iconst_1
      19: anewarray     #24                 // class java/lang/Object
      22: dup
      23: iconst_0
      24: aload_0
      25: getfield      #11                 // Field expireAfterAccessNanos:J
      28: invokestatic  #35                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      31: aastore
      32: invokestatic  #26                 // Method requireState:(ZLjava/lang/String;[Ljava/lang/Object;)V
      35: lload_1
      36: lconst_0
      37: lcmp
      38: iflt          45
      41: iconst_1
      42: goto          46
      45: iconst_0
      46: ldc           #59                 // String duration cannot be negative: %s %s
      48: iconst_2
      49: anewarray     #24                 // class java/lang/Object
      52: dup
      53: iconst_0
      54: lload_1
      55: invokestatic  #35                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      58: aastore
      59: dup
      60: iconst_1
      61: aload_3
      62: aastore
      63: invokestatic  #40                 // Method requireArgument:(ZLjava/lang/String;[Ljava/lang/Object;)V
      66: aload_0
      67: aload_3
      68: lload_1
      69: invokevirtual #60                 // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      72: putfield      #11                 // Field expireAfterAccessNanos:J
      75: aload_0
      76: areturn

  long getExpiresAfterAccessNanos();
    Code:
       0: aload_0
       1: invokevirtual #63                 // Method expiresAfterAccess:()Z
       4: ifeq          14
       7: aload_0
       8: getfield      #11                 // Field expireAfterAccessNanos:J
      11: goto          15
      14: lconst_0
      15: lreturn

  boolean expiresAfterAccess();
    Code:
       0: aload_0
       1: getfield      #11                 // Field expireAfterAccessNanos:J
       4: ldc2_w        #4                  // long -1l
       7: lcmp
       8: ifeq          15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: ireturn

  public com.github.benmanes.caffeine.cache.Caffeine<K, V> refreshAfterWrite(long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_3
       1: invokestatic  #31                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: aload_0
       6: getfield      #9                  // Field refreshNanos:J
       9: ldc2_w        #4                  // long -1l
      12: lcmp
      13: ifne          20
      16: iconst_1
      17: goto          21
      20: iconst_0
      21: ldc           #64                 // String refresh was already set to %s ns
      23: iconst_1
      24: anewarray     #24                 // class java/lang/Object
      27: dup
      28: iconst_0
      29: aload_0
      30: getfield      #9                  // Field refreshNanos:J
      33: invokestatic  #35                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      36: aastore
      37: invokestatic  #26                 // Method requireState:(ZLjava/lang/String;[Ljava/lang/Object;)V
      40: lload_1
      41: lconst_0
      42: lcmp
      43: ifle          50
      46: iconst_1
      47: goto          51
      50: iconst_0
      51: ldc           #65                 // String duration must be positive: %s %s
      53: iconst_2
      54: anewarray     #24                 // class java/lang/Object
      57: dup
      58: iconst_0
      59: lload_1
      60: invokestatic  #35                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      63: aastore
      64: dup
      65: iconst_1
      66: aload_3
      67: aastore
      68: invokestatic  #40                 // Method requireArgument:(ZLjava/lang/String;[Ljava/lang/Object;)V
      71: aload_0
      72: aload_3
      73: lload_1
      74: invokevirtual #60                 // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      77: putfield      #9                  // Field refreshNanos:J
      80: aload_0
      81: areturn

  long getRefreshAfterWriteNanos();
    Code:
       0: aload_0
       1: invokevirtual #66                 // Method refreshes:()Z
       4: ifeq          14
       7: aload_0
       8: getfield      #9                  // Field refreshNanos:J
      11: goto          15
      14: lconst_0
      15: lreturn

  boolean refreshes();
    Code:
       0: aload_0
       1: getfield      #9                  // Field refreshNanos:J
       4: ldc2_w        #4                  // long -1l
       7: lcmp
       8: ifeq          15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: ireturn

  public com.github.benmanes.caffeine.cache.Caffeine<K, V> ticker(com.github.benmanes.caffeine.cache.Ticker);
    Code:
       0: aload_0
       1: getfield      #67                 // Field ticker:Lcom/github/benmanes/caffeine/cache/Ticker;
       4: ifnonnull     11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ldc           #68                 // String Ticker was already set to %s
      14: iconst_1
      15: anewarray     #24                 // class java/lang/Object
      18: dup
      19: iconst_0
      20: aload_0
      21: getfield      #67                 // Field ticker:Lcom/github/benmanes/caffeine/cache/Ticker;
      24: aastore
      25: invokestatic  #26                 // Method requireState:(ZLjava/lang/String;[Ljava/lang/Object;)V
      28: aload_0
      29: aload_1
      30: invokestatic  #31                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
      33: checkcast     #69                 // class com/github/benmanes/caffeine/cache/Ticker
      36: putfield      #67                 // Field ticker:Lcom/github/benmanes/caffeine/cache/Ticker;
      39: aload_0
      40: areturn

  com.github.benmanes.caffeine.cache.Ticker getTicker();
    Code:
       0: aload_0
       1: invokevirtual #63                 // Method expiresAfterAccess:()Z
       4: ifne          28
       7: aload_0
       8: invokevirtual #61                 // Method expiresAfterWrite:()Z
      11: ifne          28
      14: aload_0
      15: invokevirtual #66                 // Method refreshes:()Z
      18: ifne          28
      21: aload_0
      22: invokevirtual #70                 // Method isRecordingStats:()Z
      25: ifeq          48
      28: aload_0
      29: getfield      #67                 // Field ticker:Lcom/github/benmanes/caffeine/cache/Ticker;
      32: ifnonnull     41
      35: invokestatic  #71                 // InterfaceMethod com/github/benmanes/caffeine/cache/Ticker.systemTicker:()Lcom/github/benmanes/caffeine/cache/Ticker;
      38: goto          51
      41: aload_0
      42: getfield      #67                 // Field ticker:Lcom/github/benmanes/caffeine/cache/Ticker;
      45: goto          51
      48: invokestatic  #72                 // InterfaceMethod com/github/benmanes/caffeine/cache/Ticker.disabledTicker:()Lcom/github/benmanes/caffeine/cache/Ticker;
      51: areturn

  public <K1 extends K, V1 extends V> com.github.benmanes.caffeine.cache.Caffeine<K1, V1> removalListener(com.github.benmanes.caffeine.cache.RemovalListener<? super K1, ? super V1>);
    Code:
       0: aload_0
       1: getfield      #73                 // Field removalListener:Lcom/github/benmanes/caffeine/cache/RemovalListener;
       4: ifnonnull     11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: invokestatic  #74                 // Method requireState:(Z)V
      15: aload_0
      16: astore_2
      17: aload_2
      18: aload_1
      19: invokestatic  #31                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
      22: checkcast     #75                 // class com/github/benmanes/caffeine/cache/RemovalListener
      25: putfield      #73                 // Field removalListener:Lcom/github/benmanes/caffeine/cache/RemovalListener;
      28: aload_2
      29: areturn

  <K1 extends K, V1 extends V> com.github.benmanes.caffeine.cache.RemovalListener<K1, V1> getRemovalListener(boolean);
    Code:
       0: aload_0
       1: getfield      #73                 // Field removalListener:Lcom/github/benmanes/caffeine/cache/RemovalListener;
       4: astore_2
       5: iload_1
       6: ifeq          28
       9: aload_2
      10: ifnull        28
      13: new           #76                 // class com/github/benmanes/caffeine/cache/Async$AsyncRemovalListener
      16: dup
      17: aload_2
      18: aload_0
      19: invokevirtual #77                 // Method getExecutor:()Ljava/util/concurrent/Executor;
      22: invokespecial #78                 // Method com/github/benmanes/caffeine/cache/Async$AsyncRemovalListener."<init>":(Lcom/github/benmanes/caffeine/cache/RemovalListener;Ljava/util/concurrent/Executor;)V
      25: astore_3
      26: aload_3
      27: areturn
      28: aload_2
      29: areturn

  public <K1 extends K, V1 extends V> com.github.benmanes.caffeine.cache.Caffeine<K1, V1> writer(com.github.benmanes.caffeine.cache.CacheWriter<? super K1, ? super V1>);
    Code:
       0: aload_0
       1: getfield      #52                 // Field writer:Lcom/github/benmanes/caffeine/cache/CacheWriter;
       4: ifnonnull     11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ldc           #79                 // String Writer was already set to %s
      14: iconst_1
      15: anewarray     #24                 // class java/lang/Object
      18: dup
      19: iconst_0
      20: aload_0
      21: getfield      #52                 // Field writer:Lcom/github/benmanes/caffeine/cache/CacheWriter;
      24: aastore
      25: invokestatic  #26                 // Method requireState:(ZLjava/lang/String;[Ljava/lang/Object;)V
      28: aload_0
      29: getfield      #50                 // Field keyStrength:Lcom/github/benmanes/caffeine/cache/Caffeine$Strength;
      32: ifnonnull     39
      35: iconst_1
      36: goto          40
      39: iconst_0
      40: ldc           #53                 // String Weak keys may not be used with CacheWriter
      42: iconst_0
      43: anewarray     #24                 // class java/lang/Object
      46: invokestatic  #26                 // Method requireState:(ZLjava/lang/String;[Ljava/lang/Object;)V
      49: aload_0
      50: astore_2
      51: aload_2
      52: aload_1
      53: invokestatic  #31                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
      56: checkcast     #80                 // class com/github/benmanes/caffeine/cache/CacheWriter
      59: putfield      #52                 // Field writer:Lcom/github/benmanes/caffeine/cache/CacheWriter;
      62: aload_2
      63: areturn

  <K1 extends K, V1 extends V> com.github.benmanes.caffeine.cache.CacheWriter<K1, V1> getCacheWriter();
    Code:
       0: aload_0
       1: getfield      #52                 // Field writer:Lcom/github/benmanes/caffeine/cache/CacheWriter;
       4: astore_1
       5: aload_0
       6: getfield      #52                 // Field writer:Lcom/github/benmanes/caffeine/cache/CacheWriter;
       9: ifnonnull     18
      12: invokestatic  #81                 // InterfaceMethod com/github/benmanes/caffeine/cache/CacheWriter.disabledWriter:()Lcom/github/benmanes/caffeine/cache/CacheWriter;
      15: goto          19
      18: aload_1
      19: areturn

  public com.github.benmanes.caffeine.cache.Caffeine<K, V> recordStats();
    Code:
       0: aload_0
       1: getfield      #82                 // Field statsCounterSupplier:Ljava/util/function/Supplier;
       4: ifnonnull     11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ldc           #83                 // String Statistics recording was already set
      14: iconst_0
      15: anewarray     #24                 // class java/lang/Object
      18: invokestatic  #26                 // Method requireState:(ZLjava/lang/String;[Ljava/lang/Object;)V
      21: aload_0
      22: getstatic     #84                 // Field ENABLED_STATS_COUNTER_SUPPLIER:Ljava/util/function/Supplier;
      25: putfield      #82                 // Field statsCounterSupplier:Ljava/util/function/Supplier;
      28: aload_0
      29: areturn

  public com.github.benmanes.caffeine.cache.Caffeine<K, V> recordStats(java.util.function.Supplier<? extends com.github.benmanes.caffeine.cache.stats.StatsCounter>);
    Code:
       0: aload_0
       1: getfield      #82                 // Field statsCounterSupplier:Ljava/util/function/Supplier;
       4: ifnonnull     11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ldc           #83                 // String Statistics recording was already set
      14: iconst_0
      15: anewarray     #24                 // class java/lang/Object
      18: invokestatic  #26                 // Method requireState:(ZLjava/lang/String;[Ljava/lang/Object;)V
      21: aload_1
      22: invokestatic  #31                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
      25: pop
      26: aload_0
      27: aload_1
      28: invokedynamic #85,  0             // InvokeDynamic #0:get:(Ljava/util/function/Supplier;)Ljava/util/function/Supplier;
      33: putfield      #82                 // Field statsCounterSupplier:Ljava/util/function/Supplier;
      36: aload_0
      37: areturn

  boolean isRecordingStats();
    Code:
       0: aload_0
       1: getfield      #82                 // Field statsCounterSupplier:Ljava/util/function/Supplier;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  java.util.function.Supplier<? extends com.github.benmanes.caffeine.cache.stats.StatsCounter> getStatsCounterSupplier();
    Code:
       0: aload_0
       1: getfield      #82                 // Field statsCounterSupplier:Ljava/util/function/Supplier;
       4: ifnonnull     15
       7: invokedynamic #86,  0             // InvokeDynamic #1:get:()Ljava/util/function/Supplier;
      12: goto          19
      15: aload_0
      16: getfield      #82                 // Field statsCounterSupplier:Ljava/util/function/Supplier;
      19: areturn

  boolean isBounded();
    Code:
       0: aload_0
       1: getfield      #6                  // Field maximumSize:J
       4: ldc2_w        #4                  // long -1l
       7: lcmp
       8: ifne          58
      11: aload_0
      12: getfield      #7                  // Field maximumWeight:J
      15: ldc2_w        #4                  // long -1l
      18: lcmp
      19: ifne          58
      22: aload_0
      23: getfield      #11                 // Field expireAfterAccessNanos:J
      26: ldc2_w        #4                  // long -1l
      29: lcmp
      30: ifne          58
      33: aload_0
      34: getfield      #10                 // Field expireAfterWriteNanos:J
      37: ldc2_w        #4                  // long -1l
      40: lcmp
      41: ifne          58
      44: aload_0
      45: getfield      #50                 // Field keyStrength:Lcom/github/benmanes/caffeine/cache/Caffeine$Strength;
      48: ifnonnull     58
      51: aload_0
      52: getfield      #55                 // Field valueStrength:Lcom/github/benmanes/caffeine/cache/Caffeine$Strength;
      55: ifnull        62
      58: iconst_1
      59: goto          63
      62: iconst_0
      63: ireturn

  public <K1 extends K, V1 extends V> com.github.benmanes.caffeine.cache.Cache<K1, V1> build();
    Code:
       0: aload_0
       1: invokevirtual #87                 // Method requireWeightWithWeigher:()V
       4: aload_0
       5: invokevirtual #88                 // Method requireNonLoadingCache:()V
       8: aload_0
       9: astore_1
      10: aload_0
      11: invokevirtual #89                 // Method isBounded:()Z
      14: ifne          24
      17: aload_0
      18: invokevirtual #66                 // Method refreshes:()Z
      21: ifeq          35
      24: new           #90                 // class com/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedLocalManualCache
      27: dup
      28: aload_1
      29: invokespecial #91                 // Method com/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedLocalManualCache."<init>":(Lcom/github/benmanes/caffeine/cache/Caffeine;)V
      32: goto          43
      35: new           #92                 // class com/github/benmanes/caffeine/cache/UnboundedLocalCache$UnboundedLocalManualCache
      38: dup
      39: aload_1
      40: invokespecial #93                 // Method com/github/benmanes/caffeine/cache/UnboundedLocalCache$UnboundedLocalManualCache."<init>":(Lcom/github/benmanes/caffeine/cache/Caffeine;)V
      43: areturn

  public <K1 extends K, V1 extends V> com.github.benmanes.caffeine.cache.LoadingCache<K1, V1> build(com.github.benmanes.caffeine.cache.CacheLoader<? super K1, V1>);
    Code:
       0: aload_0
       1: invokevirtual #87                 // Method requireWeightWithWeigher:()V
       4: aload_0
       5: astore_2
       6: aload_0
       7: invokevirtual #89                 // Method isBounded:()Z
      10: ifne          20
      13: aload_0
      14: invokevirtual #66                 // Method refreshes:()Z
      17: ifeq          32
      20: new           #94                 // class com/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedLocalLoadingCache
      23: dup
      24: aload_2
      25: aload_1
      26: invokespecial #95                 // Method com/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedLocalLoadingCache."<init>":(Lcom/github/benmanes/caffeine/cache/Caffeine;Lcom/github/benmanes/caffeine/cache/CacheLoader;)V
      29: goto          41
      32: new           #96                 // class com/github/benmanes/caffeine/cache/UnboundedLocalCache$UnboundedLocalLoadingCache
      35: dup
      36: aload_2
      37: aload_1
      38: invokespecial #97                 // Method com/github/benmanes/caffeine/cache/UnboundedLocalCache$UnboundedLocalLoadingCache."<init>":(Lcom/github/benmanes/caffeine/cache/Caffeine;Lcom/github/benmanes/caffeine/cache/CacheLoader;)V
      41: areturn

  public <K1 extends K, V1 extends V> com.github.benmanes.caffeine.cache.AsyncLoadingCache<K1, V1> buildAsync(com.github.benmanes.caffeine.cache.CacheLoader<? super K1, V1>);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #98                 // Method buildAsync:(Lcom/github/benmanes/caffeine/cache/AsyncCacheLoader;)Lcom/github/benmanes/caffeine/cache/AsyncLoadingCache;
       5: areturn

  public <K1 extends K, V1 extends V> com.github.benmanes.caffeine.cache.AsyncLoadingCache<K1, V1> buildAsync(com.github.benmanes.caffeine.cache.AsyncCacheLoader<? super K1, V1>);
    Code:
       0: aload_0
       1: getfield      #55                 // Field valueStrength:Lcom/github/benmanes/caffeine/cache/Caffeine$Strength;
       4: ifnonnull     11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: invokestatic  #74                 // Method requireState:(Z)V
      15: aload_0
      16: getfield      #52                 // Field writer:Lcom/github/benmanes/caffeine/cache/CacheWriter;
      19: ifnonnull     26
      22: iconst_1
      23: goto          27
      26: iconst_0
      27: invokestatic  #74                 // Method requireState:(Z)V
      30: aload_0
      31: invokevirtual #87                 // Method requireWeightWithWeigher:()V
      34: aload_1
      35: invokestatic  #31                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
      38: pop
      39: aload_0
      40: astore_2
      41: aload_0
      42: invokevirtual #89                 // Method isBounded:()Z
      45: ifne          55
      48: aload_0
      49: invokevirtual #66                 // Method refreshes:()Z
      52: ifeq          67
      55: new           #99                 // class com/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedLocalAsyncLoadingCache
      58: dup
      59: aload_2
      60: aload_1
      61: invokespecial #100                // Method com/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedLocalAsyncLoadingCache."<init>":(Lcom/github/benmanes/caffeine/cache/Caffeine;Lcom/github/benmanes/caffeine/cache/AsyncCacheLoader;)V
      64: goto          76
      67: new           #101                // class com/github/benmanes/caffeine/cache/UnboundedLocalCache$UnboundedLocalAsyncLoadingCache
      70: dup
      71: aload_2
      72: aload_1
      73: invokespecial #102                // Method com/github/benmanes/caffeine/cache/UnboundedLocalCache$UnboundedLocalAsyncLoadingCache."<init>":(Lcom/github/benmanes/caffeine/cache/Caffeine;Lcom/github/benmanes/caffeine/cache/AsyncCacheLoader;)V
      76: areturn

  void requireNonLoadingCache();
    Code:
       0: aload_0
       1: getfield      #9                  // Field refreshNanos:J
       4: ldc2_w        #4                  // long -1l
       7: lcmp
       8: ifne          15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: ldc           #103                // String refreshAfterWrite requires a LoadingCache
      18: iconst_0
      19: anewarray     #24                 // class java/lang/Object
      22: invokestatic  #26                 // Method requireState:(ZLjava/lang/String;[Ljava/lang/Object;)V
      25: return

  void requireWeightWithWeigher();
    Code:
       0: aload_0
       1: getfield      #37                 // Field weigher:Lcom/github/benmanes/caffeine/cache/Weigher;
       4: ifnonnull     35
       7: aload_0
       8: getfield      #7                  // Field maximumWeight:J
      11: ldc2_w        #4                  // long -1l
      14: lcmp
      15: ifne          22
      18: iconst_1
      19: goto          23
      22: iconst_0
      23: ldc           #104                // String maximumWeight requires weigher
      25: iconst_0
      26: anewarray     #24                 // class java/lang/Object
      29: invokestatic  #26                 // Method requireState:(ZLjava/lang/String;[Ljava/lang/Object;)V
      32: goto          92
      35: aload_0
      36: getfield      #2                  // Field strictParsing:Z
      39: ifeq          70
      42: aload_0
      43: getfield      #7                  // Field maximumWeight:J
      46: ldc2_w        #4                  // long -1l
      49: lcmp
      50: ifeq          57
      53: iconst_1
      54: goto          58
      57: iconst_0
      58: ldc           #105                // String weigher requires maximumWeight
      60: iconst_0
      61: anewarray     #24                 // class java/lang/Object
      64: invokestatic  #26                 // Method requireState:(ZLjava/lang/String;[Ljava/lang/Object;)V
      67: goto          92
      70: aload_0
      71: getfield      #7                  // Field maximumWeight:J
      74: ldc2_w        #4                  // long -1l
      77: lcmp
      78: ifne          92
      81: getstatic     #106                // Field logger:Ljava/util/logging/Logger;
      84: getstatic     #107                // Field java/util/logging/Level.WARNING:Ljava/util/logging/Level;
      87: ldc           #108                // String ignoring weigher specified without maximumWeight
      89: invokevirtual #109                // Method java/util/logging/Logger.log:(Ljava/util/logging/Level;Ljava/lang/String;)V
      92: return

  public java.lang.String toString();
    Code:
       0: new           #110                // class java/lang/StringBuilder
       3: dup
       4: bipush        64
       6: invokespecial #111                // Method java/lang/StringBuilder."<init>":(I)V
       9: astore_1
      10: aload_1
      11: aload_0
      12: invokevirtual #112                // Method java/lang/Object.getClass:()Ljava/lang/Class;
      15: invokevirtual #113                // Method java/lang/Class.getSimpleName:()Ljava/lang/String;
      18: invokevirtual #114                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      21: bipush        123
      23: invokevirtual #115                // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      26: pop
      27: aload_1
      28: invokevirtual #116                // Method java/lang/StringBuilder.length:()I
      31: istore_2
      32: aload_0
      33: getfield      #8                  // Field initialCapacity:I
      36: iconst_m1
      37: if_icmpeq     59
      40: aload_1
      41: ldc           #117                // String initialCapacity=
      43: invokevirtual #114                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      46: aload_0
      47: getfield      #8                  // Field initialCapacity:I
      50: invokevirtual #118                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      53: ldc           #119                // String ,
      55: invokevirtual #114                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      58: pop
      59: aload_0
      60: getfield      #6                  // Field maximumSize:J
      63: ldc2_w        #4                  // long -1l
      66: lcmp
      67: ifeq          89
      70: aload_1
      71: ldc           #120                // String maximumSize=
      73: invokevirtual #114                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      76: aload_0
      77: getfield      #6                  // Field maximumSize:J
      80: invokevirtual #121                // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      83: ldc           #119                // String ,
      85: invokevirtual #114                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      88: pop
      89: aload_0
      90: getfield      #7                  // Field maximumWeight:J
      93: ldc2_w        #4                  // long -1l
      96: lcmp
      97: ifeq          119
     100: aload_1
     101: ldc           #122                // String maximumWeight=
     103: invokevirtual #114                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     106: aload_0
     107: getfield      #7                  // Field maximumWeight:J
     110: invokevirtual #121                // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
     113: ldc           #119                // String ,
     115: invokevirtual #114                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     118: pop
     119: aload_0
     120: getfield      #10                 // Field expireAfterWriteNanos:J
     123: ldc2_w        #4                  // long -1l
     126: lcmp
     127: ifeq          149
     130: aload_1
     131: ldc           #123                // String expireAfterWrite=
     133: invokevirtual #114                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     136: aload_0
     137: getfield      #10                 // Field expireAfterWriteNanos:J
     140: invokevirtual #121                // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
     143: ldc           #124                // String ns,
     145: invokevirtual #114                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     148: pop
     149: aload_0
     150: getfield      #11                 // Field expireAfterAccessNanos:J
     153: ldc2_w        #4                  // long -1l
     156: lcmp
     157: ifeq          179
     160: aload_1
     161: ldc           #125                // String expireAfterAccess=
     163: invokevirtual #114                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     166: aload_0
     167: getfield      #11                 // Field expireAfterAccessNanos:J
     170: invokevirtual #121                // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
     173: ldc           #124                // String ns,
     175: invokevirtual #114                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     178: pop
     179: aload_0
     180: getfield      #9                  // Field refreshNanos:J
     183: ldc2_w        #4                  // long -1l
     186: lcmp
     187: ifeq          209
     190: aload_1
     191: ldc           #126                // String refreshNanos=
     193: invokevirtual #114                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     196: aload_0
     197: getfield      #9                  // Field refreshNanos:J
     200: invokevirtual #121                // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
     203: ldc           #124                // String ns,
     205: invokevirtual #114                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     208: pop
     209: aload_0
     210: getfield      #50                 // Field keyStrength:Lcom/github/benmanes/caffeine/cache/Caffeine$Strength;
     213: ifnull        241
     216: aload_1
     217: ldc           #127                // String keyStrength=
     219: invokevirtual #114                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     222: aload_0
     223: getfield      #50                 // Field keyStrength:Lcom/github/benmanes/caffeine/cache/Caffeine$Strength;
     226: invokevirtual #128                // Method com/github/benmanes/caffeine/cache/Caffeine$Strength.toString:()Ljava/lang/String;
     229: invokevirtual #129                // Method java/lang/String.toLowerCase:()Ljava/lang/String;
     232: invokevirtual #114                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     235: ldc           #119                // String ,
     237: invokevirtual #114                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     240: pop
     241: aload_0
     242: getfield      #55                 // Field valueStrength:Lcom/github/benmanes/caffeine/cache/Caffeine$Strength;
     245: ifnull        273
     248: aload_1
     249: ldc           #130                // String valueStrength=
     251: invokevirtual #114                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     254: aload_0
     255: getfield      #55                 // Field valueStrength:Lcom/github/benmanes/caffeine/cache/Caffeine$Strength;
     258: invokevirtual #128                // Method com/github/benmanes/caffeine/cache/Caffeine$Strength.toString:()Ljava/lang/String;
     261: invokevirtual #129                // Method java/lang/String.toLowerCase:()Ljava/lang/String;
     264: invokevirtual #114                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     267: ldc           #119                // String ,
     269: invokevirtual #114                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     272: pop
     273: aload_0
     274: getfield      #73                 // Field removalListener:Lcom/github/benmanes/caffeine/cache/RemovalListener;
     277: ifnull        287
     280: aload_1
     281: ldc           #131                // String removalListener,
     283: invokevirtual #114                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     286: pop
     287: aload_0
     288: getfield      #52                 // Field writer:Lcom/github/benmanes/caffeine/cache/CacheWriter;
     291: ifnull        301
     294: aload_1
     295: ldc           #132                // String writer,
     297: invokevirtual #114                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     300: pop
     301: aload_1
     302: invokevirtual #116                // Method java/lang/StringBuilder.length:()I
     305: iload_2
     306: if_icmple     320
     309: aload_1
     310: aload_1
     311: invokevirtual #116                // Method java/lang/StringBuilder.length:()I
     314: iconst_2
     315: isub
     316: invokevirtual #133                // Method java/lang/StringBuilder.deleteCharAt:(I)Ljava/lang/StringBuilder;
     319: pop
     320: aload_1
     321: bipush        125
     323: invokevirtual #115                // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
     326: invokevirtual #134                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     329: areturn

  private static com.github.benmanes.caffeine.cache.stats.StatsCounter lambda$recordStats$0(java.util.function.Supplier);
    Code:
       0: aload_0
       1: invokeinterface #135,  1          // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
       6: checkcast     #136                // class com/github/benmanes/caffeine/cache/stats/StatsCounter
       9: invokestatic  #137                // InterfaceMethod com/github/benmanes/caffeine/cache/stats/StatsCounter.guardedStatsCounter:(Lcom/github/benmanes/caffeine/cache/stats/StatsCounter;)Lcom/github/benmanes/caffeine/cache/stats/StatsCounter;
      12: areturn

  static {};
    Code:
       0: ldc           #3                  // class com/github/benmanes/caffeine/cache/Caffeine
       2: invokevirtual #138                // Method java/lang/Class.getName:()Ljava/lang/String;
       5: invokestatic  #139                // Method java/util/logging/Logger.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;
       8: putstatic     #106                // Field logger:Ljava/util/logging/Logger;
      11: invokedynamic #140,  0            // InvokeDynamic #2:get:()Ljava/util/function/Supplier;
      16: putstatic     #84                 // Field ENABLED_STATS_COUNTER_SUPPLIER:Ljava/util/function/Supplier;
      19: return
}
