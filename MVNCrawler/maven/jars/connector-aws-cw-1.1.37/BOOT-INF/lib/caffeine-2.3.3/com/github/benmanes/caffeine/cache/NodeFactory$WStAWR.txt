Compiled from "NodeFactory.java"
class com.github.benmanes.caffeine.cache.NodeFactory$WStAWR<K, V> extends com.github.benmanes.caffeine.cache.NodeFactory$WStAW<K, V> {
  com.github.benmanes.caffeine.cache.NodeFactory$WStAWR(K, java.lang.ref.ReferenceQueue<K>, V, java.lang.ref.ReferenceQueue<V>, int, long);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: iload         5
       8: lload         6
      10: invokespecial #1                  // Method com/github/benmanes/caffeine/cache/NodeFactory$WStAW."<init>":(Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;IJ)V
      13: return

  com.github.benmanes.caffeine.cache.NodeFactory$WStAWR(java.lang.Object, V, java.lang.ref.ReferenceQueue<V>, int, long);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: iload         4
       6: lload         5
       8: invokespecial #2                  // Method com/github/benmanes/caffeine/cache/NodeFactory$WStAW."<init>":(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;IJ)V
      11: return

  public final boolean casWriteTime(long, long);
    Code:
       0: getstatic     #3                  // Field com/github/benmanes/caffeine/base/UnsafeAccess.UNSAFE:Lsun/misc/Unsafe;
       3: aload_0
       4: getstatic     #4                  // Field WRITE_TIME_OFFSET:J
       7: lload_1
       8: lload_3
       9: invokevirtual #5                  // Method sun/misc/Unsafe.compareAndSwapLong:(Ljava/lang/Object;JJJ)Z
      12: ireturn
}
