Compiled from "ContentRequestMatchers.java"
class org.springframework.test.web.client.match.ContentRequestMatchers$2 implements org.springframework.test.web.client.RequestMatcher {
  final org.springframework.http.MediaType val$contentType;

  final org.springframework.test.web.client.match.ContentRequestMatchers this$0;

  org.springframework.test.web.client.match.ContentRequestMatchers$2(org.springframework.test.web.client.match.ContentRequestMatchers, org.springframework.http.MediaType);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lorg/springframework/test/web/client/match/ContentRequestMatchers;
       5: aload_0
       6: aload_2
       7: putfield      #2                  // Field val$contentType:Lorg/springframework/http/MediaType;
      10: aload_0
      11: invokespecial #3                  // Method java/lang/Object."<init>":()V
      14: return

  public void match(org.springframework.http.client.ClientHttpRequest) throws java.io.IOException, java.lang.AssertionError;
    Code:
       0: aload_1
       1: invokeinterface #4,  1            // InterfaceMethod org/springframework/http/client/ClientHttpRequest.getHeaders:()Lorg/springframework/http/HttpHeaders;
       6: invokevirtual #5                  // Method org/springframework/http/HttpHeaders.getContentType:()Lorg/springframework/http/MediaType;
       9: astore_2
      10: ldc           #6                  // String Content type not set
      12: aload_2
      13: ifnull        20
      16: iconst_1
      17: goto          21
      20: iconst_0
      21: invokestatic  #7                  // Method org/springframework/test/util/AssertionErrors.assertTrue:(Ljava/lang/String;Z)V
      24: new           #8                  // class java/lang/StringBuilder
      27: dup
      28: invokespecial #9                  // Method java/lang/StringBuilder."<init>":()V
      31: ldc           #10                 // String Content type [
      33: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      36: aload_2
      37: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      40: ldc           #13                 // String ] is not compatible with [
      42: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      45: aload_0
      46: getfield      #2                  // Field val$contentType:Lorg/springframework/http/MediaType;
      49: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      52: ldc           #14                 // String ]
      54: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      57: invokevirtual #15                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      60: aload_2
      61: aload_0
      62: getfield      #2                  // Field val$contentType:Lorg/springframework/http/MediaType;
      65: invokevirtual #16                 // Method org/springframework/http/MediaType.isCompatibleWith:(Lorg/springframework/http/MediaType;)Z
      68: invokestatic  #7                  // Method org/springframework/test/util/AssertionErrors.assertTrue:(Ljava/lang/String;Z)V
      71: return
}
