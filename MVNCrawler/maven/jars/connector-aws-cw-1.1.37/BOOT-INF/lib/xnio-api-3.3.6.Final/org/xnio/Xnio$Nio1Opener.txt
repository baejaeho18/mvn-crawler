Compiled from "Xnio.java"
final class org.xnio.Xnio$Nio1Opener implements org.xnio.Xnio$Opener {
  private org.xnio.Xnio$Nio1Opener();
    Code:
       0: aload_0
       1: invokespecial #17                 // Method java/lang/Object."<init>":()V
       4: return

  public java.nio.channels.FileChannel openFile(java.io.File, org.xnio.OptionMap) throws java.io.IOException;
    Code:
       0: aload_2
       1: getstatic     #29                 // Field org/xnio/Options.FILE_ACCESS:Lorg/xnio/Option;
       4: getstatic     #35                 // Field org/xnio/FileAccess.READ_WRITE:Lorg/xnio/FileAccess;
       7: invokevirtual #41                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #31                 // class org/xnio/FileAccess
      13: astore_3
      14: aload_2
      15: getstatic     #44                 // Field org/xnio/Options.FILE_APPEND:Lorg/xnio/Option;
      18: iconst_0
      19: invokevirtual #47                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;Z)Z
      22: istore        4
      24: aload_2
      25: getstatic     #50                 // Field org/xnio/Options.FILE_CREATE:Lorg/xnio/Option;
      28: aload_3
      29: getstatic     #53                 // Field org/xnio/FileAccess.READ_ONLY:Lorg/xnio/FileAccess;
      32: if_acmpeq     39
      35: iconst_1
      36: goto          40
      39: iconst_0
      40: invokevirtual #47                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;Z)Z
      43: istore        5
      45: aload_3
      46: getstatic     #53                 // Field org/xnio/FileAccess.READ_ONLY:Lorg/xnio/FileAccess;
      49: if_acmpne     99
      52: iload         4
      54: ifeq          66
      57: getstatic     #63                 // Field org/xnio/_private/Messages.msg:Lorg/xnio/_private/Messages;
      60: invokeinterface #67,  1           // InterfaceMethod org/xnio/_private/Messages.readAppendNotSupported:()Ljava/io/IOException;
      65: athrow
      66: iload         5
      68: ifeq          80
      71: getstatic     #63                 // Field org/xnio/_private/Messages.msg:Lorg/xnio/_private/Messages;
      74: invokeinterface #70,  1           // InterfaceMethod org/xnio/_private/Messages.openModeRequires7:()Ljava/io/IOException;
      79: athrow
      80: new           #72                 // class org/xnio/XnioFileChannel
      83: dup
      84: new           #74                 // class java/io/FileInputStream
      87: dup
      88: aload_1
      89: invokespecial #77                 // Method java/io/FileInputStream."<init>":(Ljava/io/File;)V
      92: invokevirtual #81                 // Method java/io/FileInputStream.getChannel:()Ljava/nio/channels/FileChannel;
      95: invokespecial #84                 // Method org/xnio/XnioFileChannel."<init>":(Ljava/nio/channels/FileChannel;)V
      98: areturn
      99: aload_3
     100: getstatic     #35                 // Field org/xnio/FileAccess.READ_WRITE:Lorg/xnio/FileAccess;
     103: if_acmpne     155
     106: iload         4
     108: ifeq          120
     111: getstatic     #63                 // Field org/xnio/_private/Messages.msg:Lorg/xnio/_private/Messages;
     114: invokeinterface #70,  1           // InterfaceMethod org/xnio/_private/Messages.openModeRequires7:()Ljava/io/IOException;
     119: athrow
     120: iload         5
     122: ifne          134
     125: getstatic     #63                 // Field org/xnio/_private/Messages.msg:Lorg/xnio/_private/Messages;
     128: invokeinterface #70,  1           // InterfaceMethod org/xnio/_private/Messages.openModeRequires7:()Ljava/io/IOException;
     133: athrow
     134: new           #72                 // class org/xnio/XnioFileChannel
     137: dup
     138: new           #86                 // class java/io/RandomAccessFile
     141: dup
     142: aload_1
     143: ldc           #88                 // String rw
     145: invokespecial #91                 // Method java/io/RandomAccessFile."<init>":(Ljava/io/File;Ljava/lang/String;)V
     148: invokevirtual #92                 // Method java/io/RandomAccessFile.getChannel:()Ljava/nio/channels/FileChannel;
     151: invokespecial #84                 // Method org/xnio/XnioFileChannel."<init>":(Ljava/nio/channels/FileChannel;)V
     154: areturn
     155: aload_3
     156: getstatic     #95                 // Field org/xnio/FileAccess.WRITE_ONLY:Lorg/xnio/FileAccess;
     159: if_acmpne     197
     162: iload         5
     164: ifne          176
     167: getstatic     #63                 // Field org/xnio/_private/Messages.msg:Lorg/xnio/_private/Messages;
     170: invokeinterface #70,  1           // InterfaceMethod org/xnio/_private/Messages.openModeRequires7:()Ljava/io/IOException;
     175: athrow
     176: new           #72                 // class org/xnio/XnioFileChannel
     179: dup
     180: new           #97                 // class java/io/FileOutputStream
     183: dup
     184: aload_1
     185: iload         4
     187: invokespecial #100                // Method java/io/FileOutputStream."<init>":(Ljava/io/File;Z)V
     190: invokevirtual #101                // Method java/io/FileOutputStream.getChannel:()Ljava/nio/channels/FileChannel;
     193: invokespecial #84                 // Method org/xnio/XnioFileChannel."<init>":(Ljava/nio/channels/FileChannel;)V
     196: areturn
     197: new           #103                // class java/lang/IllegalStateException
     200: dup
     201: invokespecial #104                // Method java/lang/IllegalStateException."<init>":()V
     204: athrow

  org.xnio.Xnio$Nio1Opener(org.xnio.Xnio$1);
    Code:
       0: aload_0
       1: invokespecial #114                // Method "<init>":()V
       4: return
}
