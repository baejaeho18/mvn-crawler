Compiled from "HttpServerExchange.java"
public final class io.undertow.server.HttpServerExchange extends io.undertow.util.AbstractAttachable {
  private static final org.jboss.logging.Logger log;

  private static final java.lang.RuntimePermission SET_SECURITY_CONTEXT;

  private static final java.lang.String ISO_8859_1;

  private static final io.undertow.util.AttachmentKey<java.lang.String> REASON_PHRASE;

  static final io.undertow.util.AttachmentKey<io.undertow.connector.PooledByteBuffer[]> BUFFERED_REQUEST_DATA;

  public static final io.undertow.util.AttachmentKey<java.util.Map<java.lang.String, java.lang.String>> REQUEST_ATTRIBUTES;

  private final io.undertow.server.ServerConnection connection;

  private final io.undertow.util.HeaderMap requestHeaders;

  private final io.undertow.util.HeaderMap responseHeaders;

  private int exchangeCompletionListenersCount;

  private io.undertow.server.ExchangeCompletionListener[] exchangeCompleteListeners;

  private io.undertow.server.DefaultResponseListener[] defaultResponseListeners;

  private java.util.Map<java.lang.String, java.util.Deque<java.lang.String>> queryParameters;

  private java.util.Map<java.lang.String, java.util.Deque<java.lang.String>> pathParameters;

  private java.util.Map<java.lang.String, io.undertow.server.handlers.Cookie> requestCookies;

  private java.util.Map<java.lang.String, io.undertow.server.handlers.Cookie> responseCookies;

  private io.undertow.server.HttpServerExchange$WriteDispatchChannel responseChannel;

  protected io.undertow.server.HttpServerExchange$ReadDispatchChannel requestChannel;

  private io.undertow.server.BlockingHttpExchange blockingHttpExchange;

  private io.undertow.util.HttpString protocol;

  private io.undertow.security.api.SecurityContext securityContext;

  private int state;

  private io.undertow.util.HttpString requestMethod;

  private java.lang.String requestScheme;

  private java.lang.String requestURI;

  private java.lang.String requestPath;

  private java.lang.String relativePath;

  private java.lang.String resolvedPath;

  private java.lang.String queryString;

  private int requestWrapperCount;

  private io.undertow.server.ConduitWrapper<org.xnio.conduits.StreamSourceConduit>[] requestWrappers;

  private int responseWrapperCount;

  private io.undertow.server.ConduitWrapper<org.xnio.conduits.StreamSinkConduit>[] responseWrappers;

  private io.undertow.io.Sender sender;

  private io.undertow.io.Receiver receiver;

  private long requestStartTime;

  private long maxEntitySize;

  private java.lang.Runnable dispatchTask;

  private java.util.concurrent.Executor dispatchExecutor;

  private long responseBytesSent;

  private static final int MASK_RESPONSE_CODE;

  private static final int FLAG_RESPONSE_SENT;

  private static final int FLAG_RESPONSE_TERMINATED;

  private static final int FLAG_REQUEST_TERMINATED;

  private static final int FLAG_PERSISTENT;

  private static final int FLAG_DISPATCHED;

  private static final int FLAG_URI_CONTAINS_HOST;

  private static final int FLAG_IN_CALL;

  private static final int FLAG_SHOULD_RESUME_READS;

  private static final int FLAG_SHOULD_RESUME_WRITES;

  private static final int FLAG_REQUEST_RESET;

  private java.net.InetSocketAddress sourceAddress;

  private java.net.InetSocketAddress destinationAddress;

  public io.undertow.server.HttpServerExchange(io.undertow.server.ServerConnection, long);
    Code:
       0: aload_0
       1: aload_1
       2: new           #6                  // class io/undertow/util/HeaderMap
       5: dup
       6: invokespecial #7                  // Method io/undertow/util/HeaderMap."<init>":()V
       9: new           #6                  // class io/undertow/util/HeaderMap
      12: dup
      13: invokespecial #7                  // Method io/undertow/util/HeaderMap."<init>":()V
      16: lload_2
      17: invokespecial #8                  // Method "<init>":(Lio/undertow/server/ServerConnection;Lio/undertow/util/HeaderMap;Lio/undertow/util/HeaderMap;J)V
      20: return

  public io.undertow.server.HttpServerExchange(io.undertow.server.ServerConnection);
    Code:
       0: aload_0
       1: aload_1
       2: lconst_0
       3: invokespecial #9                  // Method "<init>":(Lio/undertow/server/ServerConnection;J)V
       6: return

  public io.undertow.server.HttpServerExchange(io.undertow.server.ServerConnection, io.undertow.util.HeaderMap, io.undertow.util.HeaderMap, long);
    Code:
       0: aload_0
       1: invokespecial #10                 // Method io/undertow/util/AbstractAttachable."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #11                 // Field exchangeCompletionListenersCount:I
       9: aload_0
      10: sipush        200
      13: putfield      #2                  // Field state:I
      16: aload_0
      17: ldc           #12                 // String
      19: putfield      #13                 // Field resolvedPath:Ljava/lang/String;
      22: aload_0
      23: ldc           #12                 // String
      25: putfield      #14                 // Field queryString:Ljava/lang/String;
      28: aload_0
      29: iconst_0
      30: putfield      #15                 // Field requestWrapperCount:I
      33: aload_0
      34: iconst_0
      35: putfield      #16                 // Field responseWrapperCount:I
      38: aload_0
      39: ldc2_w        #17                 // long -1l
      42: putfield      #19                 // Field requestStartTime:J
      45: aload_0
      46: lconst_0
      47: putfield      #1                  // Field responseBytesSent:J
      50: aload_0
      51: aload_1
      52: putfield      #3                  // Field connection:Lio/undertow/server/ServerConnection;
      55: aload_0
      56: lload         4
      58: putfield      #20                 // Field maxEntitySize:J
      61: aload_0
      62: aload_2
      63: putfield      #21                 // Field requestHeaders:Lio/undertow/util/HeaderMap;
      66: aload_0
      67: aload_3
      68: putfield      #22                 // Field responseHeaders:Lio/undertow/util/HeaderMap;
      71: return

  public io.undertow.util.HttpString getProtocol();
    Code:
       0: aload_0
       1: getfield      #23                 // Field protocol:Lio/undertow/util/HttpString;
       4: areturn

  public io.undertow.server.HttpServerExchange setProtocol(io.undertow.util.HttpString);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #23                 // Field protocol:Lio/undertow/util/HttpString;
       5: aload_0
       6: areturn

  public boolean isHttp09();
    Code:
       0: aload_0
       1: getfield      #23                 // Field protocol:Lio/undertow/util/HttpString;
       4: getstatic     #24                 // Field io/undertow/util/Protocols.HTTP_0_9:Lio/undertow/util/HttpString;
       7: invokevirtual #25                 // Method io/undertow/util/HttpString.equals:(Lio/undertow/util/HttpString;)Z
      10: ireturn

  public boolean isHttp10();
    Code:
       0: aload_0
       1: getfield      #23                 // Field protocol:Lio/undertow/util/HttpString;
       4: getstatic     #26                 // Field io/undertow/util/Protocols.HTTP_1_0:Lio/undertow/util/HttpString;
       7: invokevirtual #25                 // Method io/undertow/util/HttpString.equals:(Lio/undertow/util/HttpString;)Z
      10: ireturn

  public boolean isHttp11();
    Code:
       0: aload_0
       1: getfield      #23                 // Field protocol:Lio/undertow/util/HttpString;
       4: getstatic     #27                 // Field io/undertow/util/Protocols.HTTP_1_1:Lio/undertow/util/HttpString;
       7: invokevirtual #25                 // Method io/undertow/util/HttpString.equals:(Lio/undertow/util/HttpString;)Z
      10: ireturn

  public io.undertow.util.HttpString getRequestMethod();
    Code:
       0: aload_0
       1: getfield      #28                 // Field requestMethod:Lio/undertow/util/HttpString;
       4: areturn

  public io.undertow.server.HttpServerExchange setRequestMethod(io.undertow.util.HttpString);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #28                 // Field requestMethod:Lio/undertow/util/HttpString;
       5: aload_0
       6: areturn

  public java.lang.String getRequestScheme();
    Code:
       0: aload_0
       1: getfield      #29                 // Field requestScheme:Ljava/lang/String;
       4: areturn

  public io.undertow.server.HttpServerExchange setRequestScheme(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #29                 // Field requestScheme:Ljava/lang/String;
       5: aload_0
       6: areturn

  public java.lang.String getRequestURI();
    Code:
       0: aload_0
       1: getfield      #30                 // Field requestURI:Ljava/lang/String;
       4: areturn

  public io.undertow.server.HttpServerExchange setRequestURI(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #30                 // Field requestURI:Ljava/lang/String;
       5: aload_0
       6: areturn

  public io.undertow.server.HttpServerExchange setRequestURI(java.lang.String, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #30                 // Field requestURI:Ljava/lang/String;
       5: iload_2
       6: ifeq          23
       9: aload_0
      10: dup
      11: getfield      #2                  // Field state:I
      14: ldc           #32                 // int 65536
      16: ior
      17: putfield      #2                  // Field state:I
      20: goto          34
      23: aload_0
      24: dup
      25: getfield      #2                  // Field state:I
      28: ldc           #33                 // int -65537
      30: iand
      31: putfield      #2                  // Field state:I
      34: aload_0
      35: areturn

  public boolean isHostIncludedInRequestURI();
    Code:
       0: aload_0
       1: getfield      #2                  // Field state:I
       4: ldc           #32                 // int 65536
       6: invokestatic  #34                 // Method org/xnio/Bits.anyAreSet:(II)Z
       9: ireturn

  public java.lang.String getRequestPath();
    Code:
       0: aload_0
       1: getfield      #35                 // Field requestPath:Ljava/lang/String;
       4: areturn

  public io.undertow.server.HttpServerExchange setRequestPath(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #35                 // Field requestPath:Ljava/lang/String;
       5: aload_0
       6: areturn

  public java.lang.String getRelativePath();
    Code:
       0: aload_0
       1: getfield      #36                 // Field relativePath:Ljava/lang/String;
       4: areturn

  public io.undertow.server.HttpServerExchange setRelativePath(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #36                 // Field relativePath:Ljava/lang/String;
       5: aload_0
       6: areturn

  public java.lang.String getResolvedPath();
    Code:
       0: aload_0
       1: getfield      #13                 // Field resolvedPath:Ljava/lang/String;
       4: areturn

  public io.undertow.server.HttpServerExchange setResolvedPath(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #13                 // Field resolvedPath:Ljava/lang/String;
       5: aload_0
       6: areturn

  public java.lang.String getQueryString();
    Code:
       0: aload_0
       1: getfield      #14                 // Field queryString:Ljava/lang/String;
       4: areturn

  public io.undertow.server.HttpServerExchange setQueryString(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #14                 // Field queryString:Ljava/lang/String;
       5: aload_0
       6: areturn

  public java.lang.String getRequestURL();
    Code:
       0: aload_0
       1: invokevirtual #37                 // Method isHostIncludedInRequestURI:()Z
       4: ifeq          12
       7: aload_0
       8: invokevirtual #38                 // Method getRequestURI:()Ljava/lang/String;
      11: areturn
      12: new           #39                 // class java/lang/StringBuilder
      15: dup
      16: invokespecial #40                 // Method java/lang/StringBuilder."<init>":()V
      19: aload_0
      20: invokevirtual #41                 // Method getRequestScheme:()Ljava/lang/String;
      23: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      26: ldc           #43                 // String ://
      28: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      31: aload_0
      32: invokevirtual #44                 // Method getHostAndPort:()Ljava/lang/String;
      35: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      38: aload_0
      39: invokevirtual #38                 // Method getRequestURI:()Ljava/lang/String;
      42: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      45: invokevirtual #45                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      48: areturn

  public java.lang.String getRequestCharset();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #21                 // Field requestHeaders:Lio/undertow/util/HeaderMap;
       5: invokespecial #46                 // Method extractCharset:(Lio/undertow/util/HeaderMap;)Ljava/lang/String;
       8: areturn

  public java.lang.String getResponseCharset();
    Code:
       0: aload_0
       1: getfield      #22                 // Field responseHeaders:Lio/undertow/util/HeaderMap;
       4: astore_1
       5: aload_0
       6: aload_1
       7: invokespecial #46                 // Method extractCharset:(Lio/undertow/util/HeaderMap;)Ljava/lang/String;
      10: areturn

  private java.lang.String extractCharset(io.undertow.util.HeaderMap);
    Code:
       0: aload_1
       1: getstatic     #47                 // Field io/undertow/util/Headers.CONTENT_TYPE:Lio/undertow/util/HttpString;
       4: invokevirtual #48                 // Method io/undertow/util/HeaderMap.getFirst:(Lio/undertow/util/HttpString;)Ljava/lang/String;
       7: astore_2
       8: aload_2
       9: ifnonnull     14
      12: aconst_null
      13: areturn
      14: aload_2
      15: ldc           #49                 // String charset
      17: invokestatic  #50                 // Method io/undertow/util/Headers.extractQuotedValueFromHeader:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      20: astore_3
      21: aload_3
      22: ifnull        27
      25: aload_3
      26: areturn
      27: ldc           #51                 // String ISO-8859-1
      29: areturn

  public java.lang.String getHostName();
    Code:
       0: aload_0
       1: getfield      #21                 // Field requestHeaders:Lio/undertow/util/HeaderMap;
       4: getstatic     #52                 // Field io/undertow/util/Headers.HOST:Lio/undertow/util/HttpString;
       7: invokevirtual #48                 // Method io/undertow/util/HeaderMap.getFirst:(Lio/undertow/util/HttpString;)Ljava/lang/String;
      10: astore_1
      11: aload_1
      12: ifnonnull     26
      15: aload_0
      16: invokevirtual #53                 // Method getDestinationAddress:()Ljava/net/InetSocketAddress;
      19: invokevirtual #54                 // Method java/net/InetSocketAddress.getHostString:()Ljava/lang/String;
      22: astore_1
      23: goto          72
      26: aload_1
      27: ldc           #55                 // String [
      29: invokevirtual #56                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      32: ifeq          50
      35: aload_1
      36: iconst_1
      37: aload_1
      38: bipush        93
      40: invokevirtual #57                 // Method java/lang/String.indexOf:(I)I
      43: invokevirtual #58                 // Method java/lang/String.substring:(II)Ljava/lang/String;
      46: astore_1
      47: goto          72
      50: aload_1
      51: bipush        58
      53: invokevirtual #57                 // Method java/lang/String.indexOf:(I)I
      56: iconst_m1
      57: if_icmpeq     72
      60: aload_1
      61: iconst_0
      62: aload_1
      63: bipush        58
      65: invokevirtual #57                 // Method java/lang/String.indexOf:(I)I
      68: invokevirtual #58                 // Method java/lang/String.substring:(II)Ljava/lang/String;
      71: astore_1
      72: aload_1
      73: areturn

  public java.lang.String getHostAndPort();
    Code:
       0: aload_0
       1: getfield      #21                 // Field requestHeaders:Lio/undertow/util/HeaderMap;
       4: getstatic     #52                 // Field io/undertow/util/Headers.HOST:Lio/undertow/util/HttpString;
       7: invokevirtual #48                 // Method io/undertow/util/HeaderMap.getFirst:(Lio/undertow/util/HttpString;)Ljava/lang/String;
      10: astore_1
      11: aload_1
      12: ifnonnull     94
      15: aload_0
      16: invokevirtual #53                 // Method getDestinationAddress:()Ljava/net/InetSocketAddress;
      19: astore_2
      20: aload_2
      21: invokevirtual #54                 // Method java/net/InetSocketAddress.getHostString:()Ljava/lang/String;
      24: invokestatic  #59                 // Method io/undertow/util/NetworkUtils.formatPossibleIpv6Address:(Ljava/lang/String;)Ljava/lang/String;
      27: astore_1
      28: aload_2
      29: invokevirtual #60                 // Method java/net/InetSocketAddress.getPort:()I
      32: istore_3
      33: aload_0
      34: invokevirtual #41                 // Method getRequestScheme:()Ljava/lang/String;
      37: ldc           #61                 // String http
      39: invokevirtual #62                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      42: ifeq          51
      45: iload_3
      46: bipush        80
      48: if_icmpeq     94
      51: aload_0
      52: invokevirtual #41                 // Method getRequestScheme:()Ljava/lang/String;
      55: ldc           #63                 // String https
      57: invokevirtual #62                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      60: ifeq          70
      63: iload_3
      64: sipush        443
      67: if_icmpeq     94
      70: new           #39                 // class java/lang/StringBuilder
      73: dup
      74: invokespecial #40                 // Method java/lang/StringBuilder."<init>":()V
      77: aload_1
      78: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      81: ldc           #64                 // String :
      83: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      86: iload_3
      87: invokevirtual #65                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      90: invokevirtual #45                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      93: astore_1
      94: aload_1
      95: areturn

  public int getHostPort();
    Code:
       0: aload_0
       1: getfield      #21                 // Field requestHeaders:Lio/undertow/util/HeaderMap;
       4: getstatic     #52                 // Field io/undertow/util/Headers.HOST:Lio/undertow/util/HttpString;
       7: invokevirtual #48                 // Method io/undertow/util/HeaderMap.getFirst:(Lio/undertow/util/HttpString;)Ljava/lang/String;
      10: astore_1
      11: aload_1
      12: ifnull        94
      15: aload_1
      16: ldc           #55                 // String [
      18: invokevirtual #56                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      21: ifeq          40
      24: aload_1
      25: bipush        58
      27: aload_1
      28: bipush        93
      30: invokevirtual #57                 // Method java/lang/String.indexOf:(I)I
      33: invokevirtual #66                 // Method java/lang/String.indexOf:(II)I
      36: istore_2
      37: goto          47
      40: aload_1
      41: bipush        58
      43: invokevirtual #57                 // Method java/lang/String.indexOf:(I)I
      46: istore_2
      47: iload_2
      48: iconst_m1
      49: if_icmpeq     63
      52: aload_1
      53: iload_2
      54: iconst_1
      55: iadd
      56: invokevirtual #67                 // Method java/lang/String.substring:(I)Ljava/lang/String;
      59: invokestatic  #68                 // Method java/lang/Integer.parseInt:(Ljava/lang/String;)I
      62: ireturn
      63: aload_0
      64: invokevirtual #41                 // Method getRequestScheme:()Ljava/lang/String;
      67: ldc           #63                 // String https
      69: invokevirtual #62                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      72: ifeq          79
      75: sipush        443
      78: ireturn
      79: aload_0
      80: invokevirtual #41                 // Method getRequestScheme:()Ljava/lang/String;
      83: ldc           #61                 // String http
      85: invokevirtual #62                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      88: ifeq          94
      91: bipush        80
      93: ireturn
      94: aload_0
      95: invokevirtual #53                 // Method getDestinationAddress:()Ljava/net/InetSocketAddress;
      98: invokevirtual #60                 // Method java/net/InetSocketAddress.getPort:()I
     101: ireturn

  public io.undertow.server.ServerConnection getConnection();
    Code:
       0: aload_0
       1: getfield      #3                  // Field connection:Lio/undertow/server/ServerConnection;
       4: areturn

  public boolean isPersistent();
    Code:
       0: aload_0
       1: getfield      #2                  // Field state:I
       4: sipush        16384
       7: invokestatic  #34                 // Method org/xnio/Bits.anyAreSet:(II)Z
      10: ireturn

  public boolean isInIoThread();
    Code:
       0: aload_0
       1: invokevirtual #69                 // Method getIoThread:()Lorg/xnio/XnioIoThread;
       4: invokestatic  #70                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
       7: if_acmpne     14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  public boolean isUpgrade();
    Code:
       0: aload_0
       1: invokevirtual #71                 // Method getStatusCode:()I
       4: bipush        101
       6: if_icmpne     13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn

  public long getResponseBytesSent();
    Code:
       0: aload_0
       1: invokestatic  #73                 // Method io/undertow/server/Connectors.isEntityBodyAllowed:(Lio/undertow/server/HttpServerExchange;)Z
       4: ifeq          25
       7: aload_0
       8: invokevirtual #74                 // Method getRequestMethod:()Lio/undertow/util/HttpString;
      11: getstatic     #75                 // Field io/undertow/util/Methods.HEAD:Lio/undertow/util/HttpString;
      14: invokevirtual #25                 // Method io/undertow/util/HttpString.equals:(Lio/undertow/util/HttpString;)Z
      17: ifne          25
      20: aload_0
      21: getfield      #1                  // Field responseBytesSent:J
      24: lreturn
      25: lconst_0
      26: lreturn

  void updateBytesSent(long);
    Code:
       0: aload_0
       1: invokestatic  #73                 // Method io/undertow/server/Connectors.isEntityBodyAllowed:(Lio/undertow/server/HttpServerExchange;)Z
       4: ifeq          30
       7: aload_0
       8: invokevirtual #74                 // Method getRequestMethod:()Lio/undertow/util/HttpString;
      11: getstatic     #75                 // Field io/undertow/util/Methods.HEAD:Lio/undertow/util/HttpString;
      14: invokevirtual #25                 // Method io/undertow/util/HttpString.equals:(Lio/undertow/util/HttpString;)Z
      17: ifne          30
      20: aload_0
      21: dup
      22: getfield      #1                  // Field responseBytesSent:J
      25: lload_1
      26: ladd
      27: putfield      #1                  // Field responseBytesSent:J
      30: return

  public io.undertow.server.HttpServerExchange setPersistent(boolean);
    Code:
       0: iload_1
       1: ifeq          19
       4: aload_0
       5: aload_0
       6: getfield      #2                  // Field state:I
       9: sipush        16384
      12: ior
      13: putfield      #2                  // Field state:I
      16: goto          31
      19: aload_0
      20: aload_0
      21: getfield      #2                  // Field state:I
      24: sipush        -16385
      27: iand
      28: putfield      #2                  // Field state:I
      31: aload_0
      32: areturn

  public boolean isDispatched();
    Code:
       0: aload_0
       1: getfield      #2                  // Field state:I
       4: ldc           #76                 // int 32768
       6: invokestatic  #34                 // Method org/xnio/Bits.anyAreSet:(II)Z
       9: ireturn

  public io.undertow.server.HttpServerExchange unDispatch();
    Code:
       0: aload_0
       1: dup
       2: getfield      #2                  // Field state:I
       5: ldc           #77                 // int -32769
       7: iand
       8: putfield      #2                  // Field state:I
      11: aload_0
      12: aconst_null
      13: putfield      #78                 // Field dispatchTask:Ljava/lang/Runnable;
      16: aload_0
      17: areturn

  public io.undertow.server.HttpServerExchange dispatch();
    Code:
       0: aload_0
       1: dup
       2: getfield      #2                  // Field state:I
       5: ldc           #76                 // int 32768
       7: ior
       8: putfield      #2                  // Field state:I
      11: aload_0
      12: areturn

  public io.undertow.server.HttpServerExchange dispatch(java.lang.Runnable);
    Code:
       0: aload_0
       1: aconst_null
       2: aload_1
       3: invokevirtual #79                 // Method dispatch:(Ljava/util/concurrent/Executor;Ljava/lang/Runnable;)Lio/undertow/server/HttpServerExchange;
       6: pop
       7: aload_0
       8: areturn

  public io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor, java.lang.Runnable);
    Code:
       0: aload_1
       1: ifnull        9
       4: aload_0
       5: aload_1
       6: putfield      #80                 // Field dispatchExecutor:Ljava/util/concurrent/Executor;
       9: aload_0
      10: invokevirtual #81                 // Method isInCall:()Z
      13: ifeq          35
      16: aload_0
      17: dup
      18: getfield      #2                  // Field state:I
      21: ldc           #76                 // int 32768
      23: ior
      24: putfield      #2                  // Field state:I
      27: aload_0
      28: aload_2
      29: putfield      #78                 // Field dispatchTask:Ljava/lang/Runnable;
      32: goto          60
      35: aload_1
      36: ifnonnull     53
      39: aload_0
      40: invokevirtual #82                 // Method getConnection:()Lio/undertow/server/ServerConnection;
      43: invokevirtual #83                 // Method io/undertow/server/ServerConnection.getWorker:()Lorg/xnio/XnioWorker;
      46: aload_2
      47: invokevirtual #84                 // Method org/xnio/XnioWorker.execute:(Ljava/lang/Runnable;)V
      50: goto          60
      53: aload_1
      54: aload_2
      55: invokeinterface #85,  2           // InterfaceMethod java/util/concurrent/Executor.execute:(Ljava/lang/Runnable;)V
      60: aload_0
      61: areturn

  public io.undertow.server.HttpServerExchange dispatch(io.undertow.server.HttpHandler);
    Code:
       0: aload_0
       1: aconst_null
       2: aload_1
       3: invokevirtual #86                 // Method dispatch:(Ljava/util/concurrent/Executor;Lio/undertow/server/HttpHandler;)Lio/undertow/server/HttpServerExchange;
       6: pop
       7: aload_0
       8: areturn

  public io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor, io.undertow.server.HttpHandler);
    Code:
       0: new           #87                 // class io/undertow/server/HttpServerExchange$1
       3: dup
       4: aload_0
       5: aload_2
       6: invokespecial #88                 // Method io/undertow/server/HttpServerExchange$1."<init>":(Lio/undertow/server/HttpServerExchange;Lio/undertow/server/HttpHandler;)V
       9: astore_3
      10: aload_0
      11: aload_1
      12: aload_3
      13: invokevirtual #79                 // Method dispatch:(Ljava/util/concurrent/Executor;Ljava/lang/Runnable;)Lio/undertow/server/HttpServerExchange;
      16: pop
      17: aload_0
      18: areturn

  public io.undertow.server.HttpServerExchange setDispatchExecutor(java.util.concurrent.Executor);
    Code:
       0: aload_1
       1: ifnonnull     12
       4: aload_0
       5: aconst_null
       6: putfield      #80                 // Field dispatchExecutor:Ljava/util/concurrent/Executor;
       9: goto          17
      12: aload_0
      13: aload_1
      14: putfield      #80                 // Field dispatchExecutor:Ljava/util/concurrent/Executor;
      17: aload_0
      18: areturn

  public java.util.concurrent.Executor getDispatchExecutor();
    Code:
       0: aload_0
       1: getfield      #80                 // Field dispatchExecutor:Ljava/util/concurrent/Executor;
       4: areturn

  java.lang.Runnable getDispatchTask();
    Code:
       0: aload_0
       1: getfield      #78                 // Field dispatchTask:Ljava/lang/Runnable;
       4: areturn

  boolean isInCall();
    Code:
       0: aload_0
       1: getfield      #2                  // Field state:I
       4: ldc           #89                 // int 131072
       6: invokestatic  #34                 // Method org/xnio/Bits.anyAreSet:(II)Z
       9: ireturn

  io.undertow.server.HttpServerExchange setInCall(boolean);
    Code:
       0: iload_1
       1: ifeq          18
       4: aload_0
       5: dup
       6: getfield      #2                  // Field state:I
       9: ldc           #89                 // int 131072
      11: ior
      12: putfield      #2                  // Field state:I
      15: goto          29
      18: aload_0
      19: dup
      20: getfield      #2                  // Field state:I
      23: ldc           #90                 // int -131073
      25: iand
      26: putfield      #2                  // Field state:I
      29: aload_0
      30: areturn

  public io.undertow.server.HttpServerExchange upgradeChannel(io.undertow.server.HttpUpgradeListener);
    Code:
       0: aload_0
       1: getfield      #3                  // Field connection:Lio/undertow/server/ServerConnection;
       4: invokevirtual #91                 // Method io/undertow/server/ServerConnection.isUpgradeSupported:()Z
       7: ifne          19
      10: getstatic     #92                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      13: invokeinterface #93,  1           // InterfaceMethod io/undertow/UndertowMessages.upgradeNotSupported:()Ljava/lang/IllegalStateException;
      18: athrow
      19: aload_0
      20: invokevirtual #94                 // Method getRequestHeaders:()Lio/undertow/util/HeaderMap;
      23: getstatic     #95                 // Field io/undertow/util/Headers.UPGRADE:Lio/undertow/util/HttpString;
      26: invokevirtual #96                 // Method io/undertow/util/HeaderMap.contains:(Lio/undertow/util/HttpString;)Z
      29: ifne          41
      32: getstatic     #92                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      35: invokeinterface #97,  1           // InterfaceMethod io/undertow/UndertowMessages.notAnUpgradeRequest:()Ljava/lang/IllegalStateException;
      40: athrow
      41: aload_0
      42: getfield      #3                  // Field connection:Lio/undertow/server/ServerConnection;
      45: aload_1
      46: invokevirtual #98                 // Method io/undertow/server/ServerConnection.setUpgradeListener:(Lio/undertow/server/HttpUpgradeListener;)V
      49: aload_0
      50: bipush        101
      52: invokevirtual #99                 // Method setStatusCode:(I)Lio/undertow/server/HttpServerExchange;
      55: pop
      56: aload_0
      57: invokevirtual #100                // Method getResponseHeaders:()Lio/undertow/util/HeaderMap;
      60: getstatic     #101                // Field io/undertow/util/Headers.CONNECTION:Lio/undertow/util/HttpString;
      63: ldc           #103                // String Upgrade
      65: invokevirtual #104                // Method io/undertow/util/HeaderMap.put:(Lio/undertow/util/HttpString;Ljava/lang/String;)Lio/undertow/util/HeaderMap;
      68: pop
      69: aload_0
      70: areturn

  public io.undertow.server.HttpServerExchange upgradeChannel(java.lang.String, io.undertow.server.HttpUpgradeListener);
    Code:
       0: aload_0
       1: getfield      #3                  // Field connection:Lio/undertow/server/ServerConnection;
       4: invokevirtual #91                 // Method io/undertow/server/ServerConnection.isUpgradeSupported:()Z
       7: ifne          19
      10: getstatic     #92                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      13: invokeinterface #93,  1           // InterfaceMethod io/undertow/UndertowMessages.upgradeNotSupported:()Ljava/lang/IllegalStateException;
      18: athrow
      19: aload_0
      20: getfield      #3                  // Field connection:Lio/undertow/server/ServerConnection;
      23: aload_2
      24: invokevirtual #98                 // Method io/undertow/server/ServerConnection.setUpgradeListener:(Lio/undertow/server/HttpUpgradeListener;)V
      27: aload_0
      28: bipush        101
      30: invokevirtual #99                 // Method setStatusCode:(I)Lio/undertow/server/HttpServerExchange;
      33: pop
      34: aload_0
      35: invokevirtual #100                // Method getResponseHeaders:()Lio/undertow/util/HeaderMap;
      38: astore_3
      39: aload_3
      40: getstatic     #95                 // Field io/undertow/util/Headers.UPGRADE:Lio/undertow/util/HttpString;
      43: aload_1
      44: invokevirtual #104                // Method io/undertow/util/HeaderMap.put:(Lio/undertow/util/HttpString;Ljava/lang/String;)Lio/undertow/util/HeaderMap;
      47: pop
      48: aload_3
      49: getstatic     #101                // Field io/undertow/util/Headers.CONNECTION:Lio/undertow/util/HttpString;
      52: ldc           #103                // String Upgrade
      54: invokevirtual #104                // Method io/undertow/util/HeaderMap.put:(Lio/undertow/util/HttpString;Ljava/lang/String;)Lio/undertow/util/HeaderMap;
      57: pop
      58: aload_0
      59: areturn

  public io.undertow.server.HttpServerExchange acceptConnectRequest(io.undertow.server.HttpUpgradeListener);
    Code:
       0: aload_0
       1: invokevirtual #74                 // Method getRequestMethod:()Lio/undertow/util/HttpString;
       4: getstatic     #105                // Field io/undertow/util/Methods.CONNECT:Lio/undertow/util/HttpString;
       7: invokevirtual #25                 // Method io/undertow/util/HttpString.equals:(Lio/undertow/util/HttpString;)Z
      10: ifne          22
      13: getstatic     #92                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      16: invokeinterface #106,  1          // InterfaceMethod io/undertow/UndertowMessages.notAConnectRequest:()Ljava/lang/IllegalStateException;
      21: athrow
      22: aload_0
      23: getfield      #3                  // Field connection:Lio/undertow/server/ServerConnection;
      26: aload_1
      27: invokevirtual #107                // Method io/undertow/server/ServerConnection.setConnectListener:(Lio/undertow/server/HttpUpgradeListener;)V
      30: aload_0
      31: areturn

  public io.undertow.server.HttpServerExchange addExchangeCompleteListener(io.undertow.server.ExchangeCompletionListener);
    Code:
       0: aload_0
       1: invokevirtual #108                // Method isComplete:()Z
       4: ifeq          16
       7: getstatic     #92                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      10: invokeinterface #109,  1          // InterfaceMethod io/undertow/UndertowMessages.exchangeAlreadyComplete:()Ljava/lang/IllegalStateException;
      15: athrow
      16: aload_0
      17: dup
      18: getfield      #11                 // Field exchangeCompletionListenersCount:I
      21: dup_x1
      22: iconst_1
      23: iadd
      24: putfield      #11                 // Field exchangeCompletionListenersCount:I
      27: istore_2
      28: aload_0
      29: getfield      #110                // Field exchangeCompleteListeners:[Lio/undertow/server/ExchangeCompletionListener;
      32: astore_3
      33: aload_3
      34: ifnull        43
      37: aload_3
      38: arraylength
      39: iload_2
      40: if_icmpne     72
      43: aload_3
      44: astore        4
      46: aload_0
      47: iload_2
      48: iconst_2
      49: iadd
      50: anewarray     #111                // class io/undertow/server/ExchangeCompletionListener
      53: dup
      54: astore_3
      55: putfield      #110                // Field exchangeCompleteListeners:[Lio/undertow/server/ExchangeCompletionListener;
      58: aload         4
      60: ifnull        72
      63: aload         4
      65: iconst_0
      66: aload_3
      67: iconst_0
      68: iload_2
      69: invokestatic  #112                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      72: aload_3
      73: iload_2
      74: aload_1
      75: aastore
      76: aload_0
      77: areturn

  public io.undertow.server.HttpServerExchange addDefaultResponseListener(io.undertow.server.DefaultResponseListener);
    Code:
       0: iconst_0
       1: istore_2
       2: aload_0
       3: getfield      #113                // Field defaultResponseListeners:[Lio/undertow/server/DefaultResponseListener;
       6: ifnonnull     20
       9: aload_0
      10: iconst_2
      11: anewarray     #114                // class io/undertow/server/DefaultResponseListener
      14: putfield      #113                // Field defaultResponseListeners:[Lio/undertow/server/DefaultResponseListener;
      17: goto          84
      20: iload_2
      21: aload_0
      22: getfield      #113                // Field defaultResponseListeners:[Lio/undertow/server/DefaultResponseListener;
      25: arraylength
      26: if_icmpeq     44
      29: aload_0
      30: getfield      #113                // Field defaultResponseListeners:[Lio/undertow/server/DefaultResponseListener;
      33: iload_2
      34: aaload
      35: ifnull        44
      38: iinc          2, 1
      41: goto          20
      44: iload_2
      45: aload_0
      46: getfield      #113                // Field defaultResponseListeners:[Lio/undertow/server/DefaultResponseListener;
      49: arraylength
      50: if_icmpne     84
      53: aload_0
      54: getfield      #113                // Field defaultResponseListeners:[Lio/undertow/server/DefaultResponseListener;
      57: astore_3
      58: aload_0
      59: aload_0
      60: getfield      #113                // Field defaultResponseListeners:[Lio/undertow/server/DefaultResponseListener;
      63: arraylength
      64: iconst_2
      65: iadd
      66: anewarray     #114                // class io/undertow/server/DefaultResponseListener
      69: putfield      #113                // Field defaultResponseListeners:[Lio/undertow/server/DefaultResponseListener;
      72: aload_3
      73: iconst_0
      74: aload_0
      75: getfield      #113                // Field defaultResponseListeners:[Lio/undertow/server/DefaultResponseListener;
      78: iconst_0
      79: aload_3
      80: arraylength
      81: invokestatic  #112                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      84: aload_0
      85: getfield      #113                // Field defaultResponseListeners:[Lio/undertow/server/DefaultResponseListener;
      88: iload_2
      89: aload_1
      90: aastore
      91: aload_0
      92: areturn

  public java.net.InetSocketAddress getSourceAddress();
    Code:
       0: aload_0
       1: getfield      #115                // Field sourceAddress:Ljava/net/InetSocketAddress;
       4: ifnull        12
       7: aload_0
       8: getfield      #115                // Field sourceAddress:Ljava/net/InetSocketAddress;
      11: areturn
      12: aload_0
      13: getfield      #3                  // Field connection:Lio/undertow/server/ServerConnection;
      16: ldc           #116                // class java/net/InetSocketAddress
      18: invokevirtual #117                // Method io/undertow/server/ServerConnection.getPeerAddress:(Ljava/lang/Class;)Ljava/net/SocketAddress;
      21: checkcast     #116                // class java/net/InetSocketAddress
      24: areturn

  public io.undertow.server.HttpServerExchange setSourceAddress(java.net.InetSocketAddress);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #115                // Field sourceAddress:Ljava/net/InetSocketAddress;
       5: aload_0
       6: areturn

  public java.net.InetSocketAddress getDestinationAddress();
    Code:
       0: aload_0
       1: getfield      #118                // Field destinationAddress:Ljava/net/InetSocketAddress;
       4: ifnull        12
       7: aload_0
       8: getfield      #118                // Field destinationAddress:Ljava/net/InetSocketAddress;
      11: areturn
      12: aload_0
      13: getfield      #3                  // Field connection:Lio/undertow/server/ServerConnection;
      16: ldc           #116                // class java/net/InetSocketAddress
      18: invokevirtual #119                // Method io/undertow/server/ServerConnection.getLocalAddress:(Ljava/lang/Class;)Ljava/net/SocketAddress;
      21: checkcast     #116                // class java/net/InetSocketAddress
      24: areturn

  public io.undertow.server.HttpServerExchange setDestinationAddress(java.net.InetSocketAddress);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #118                // Field destinationAddress:Ljava/net/InetSocketAddress;
       5: aload_0
       6: areturn

  public io.undertow.util.HeaderMap getRequestHeaders();
    Code:
       0: aload_0
       1: getfield      #21                 // Field requestHeaders:Lio/undertow/util/HeaderMap;
       4: areturn

  public long getRequestContentLength();
    Code:
       0: aload_0
       1: getfield      #21                 // Field requestHeaders:Lio/undertow/util/HeaderMap;
       4: getstatic     #120                // Field io/undertow/util/Headers.CONTENT_LENGTH:Lio/undertow/util/HttpString;
       7: invokevirtual #48                 // Method io/undertow/util/HeaderMap.getFirst:(Lio/undertow/util/HttpString;)Ljava/lang/String;
      10: astore_1
      11: aload_1
      12: ifnonnull     19
      15: ldc2_w        #17                 // long -1l
      18: lreturn
      19: aload_1
      20: invokestatic  #121                // Method java/lang/Long.parseLong:(Ljava/lang/String;)J
      23: lreturn

  public io.undertow.util.HeaderMap getResponseHeaders();
    Code:
       0: aload_0
       1: getfield      #22                 // Field responseHeaders:Lio/undertow/util/HeaderMap;
       4: areturn

  public long getResponseContentLength();
    Code:
       0: aload_0
       1: getfield      #22                 // Field responseHeaders:Lio/undertow/util/HeaderMap;
       4: getstatic     #120                // Field io/undertow/util/Headers.CONTENT_LENGTH:Lio/undertow/util/HttpString;
       7: invokevirtual #48                 // Method io/undertow/util/HeaderMap.getFirst:(Lio/undertow/util/HttpString;)Ljava/lang/String;
      10: astore_1
      11: aload_1
      12: ifnonnull     19
      15: ldc2_w        #17                 // long -1l
      18: lreturn
      19: aload_1
      20: invokestatic  #121                // Method java/lang/Long.parseLong:(Ljava/lang/String;)J
      23: lreturn

  public io.undertow.server.HttpServerExchange setResponseContentLength(long);
    Code:
       0: lload_1
       1: ldc2_w        #17                 // long -1l
       4: lcmp
       5: ifne          22
       8: aload_0
       9: getfield      #22                 // Field responseHeaders:Lio/undertow/util/HeaderMap;
      12: getstatic     #120                // Field io/undertow/util/Headers.CONTENT_LENGTH:Lio/undertow/util/HttpString;
      15: invokevirtual #122                // Method io/undertow/util/HeaderMap.remove:(Lio/undertow/util/HttpString;)Ljava/util/Collection;
      18: pop
      19: goto          37
      22: aload_0
      23: getfield      #22                 // Field responseHeaders:Lio/undertow/util/HeaderMap;
      26: getstatic     #120                // Field io/undertow/util/Headers.CONTENT_LENGTH:Lio/undertow/util/HttpString;
      29: lload_1
      30: invokestatic  #123                // Method java/lang/Long.toString:(J)Ljava/lang/String;
      33: invokevirtual #104                // Method io/undertow/util/HeaderMap.put:(Lio/undertow/util/HttpString;Ljava/lang/String;)Lio/undertow/util/HeaderMap;
      36: pop
      37: aload_0
      38: areturn

  public java.util.Map<java.lang.String, java.util.Deque<java.lang.String>> getQueryParameters();
    Code:
       0: aload_0
       1: getfield      #124                // Field queryParameters:Ljava/util/Map;
       4: ifnonnull     18
       7: aload_0
       8: new           #125                // class java/util/TreeMap
      11: dup
      12: invokespecial #126                // Method java/util/TreeMap."<init>":()V
      15: putfield      #124                // Field queryParameters:Ljava/util/Map;
      18: aload_0
      19: getfield      #124                // Field queryParameters:Ljava/util/Map;
      22: areturn

  public io.undertow.server.HttpServerExchange addQueryParam(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #124                // Field queryParameters:Ljava/util/Map;
       4: ifnonnull     18
       7: aload_0
       8: new           #125                // class java/util/TreeMap
      11: dup
      12: invokespecial #126                // Method java/util/TreeMap."<init>":()V
      15: putfield      #124                // Field queryParameters:Ljava/util/Map;
      18: aload_0
      19: getfield      #124                // Field queryParameters:Ljava/util/Map;
      22: aload_1
      23: invokeinterface #127,  2          // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      28: checkcast     #128                // class java/util/Deque
      31: astore_3
      32: aload_3
      33: ifnonnull     57
      36: aload_0
      37: getfield      #124                // Field queryParameters:Ljava/util/Map;
      40: aload_1
      41: new           #129                // class java/util/ArrayDeque
      44: dup
      45: iconst_2
      46: invokespecial #130                // Method java/util/ArrayDeque."<init>":(I)V
      49: dup
      50: astore_3
      51: invokeinterface #131,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      56: pop
      57: aload_3
      58: aload_2
      59: invokeinterface #132,  2          // InterfaceMethod java/util/Deque.add:(Ljava/lang/Object;)Z
      64: pop
      65: aload_0
      66: areturn

  public java.util.Map<java.lang.String, java.util.Deque<java.lang.String>> getPathParameters();
    Code:
       0: aload_0
       1: getfield      #133                // Field pathParameters:Ljava/util/Map;
       4: ifnonnull     18
       7: aload_0
       8: new           #125                // class java/util/TreeMap
      11: dup
      12: invokespecial #126                // Method java/util/TreeMap."<init>":()V
      15: putfield      #133                // Field pathParameters:Ljava/util/Map;
      18: aload_0
      19: getfield      #133                // Field pathParameters:Ljava/util/Map;
      22: areturn

  public io.undertow.server.HttpServerExchange addPathParam(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #133                // Field pathParameters:Ljava/util/Map;
       4: ifnonnull     18
       7: aload_0
       8: new           #125                // class java/util/TreeMap
      11: dup
      12: invokespecial #126                // Method java/util/TreeMap."<init>":()V
      15: putfield      #133                // Field pathParameters:Ljava/util/Map;
      18: aload_0
      19: getfield      #133                // Field pathParameters:Ljava/util/Map;
      22: aload_1
      23: invokeinterface #127,  2          // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      28: checkcast     #128                // class java/util/Deque
      31: astore_3
      32: aload_3
      33: ifnonnull     57
      36: aload_0
      37: getfield      #133                // Field pathParameters:Ljava/util/Map;
      40: aload_1
      41: new           #129                // class java/util/ArrayDeque
      44: dup
      45: iconst_2
      46: invokespecial #130                // Method java/util/ArrayDeque."<init>":(I)V
      49: dup
      50: astore_3
      51: invokeinterface #131,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      56: pop
      57: aload_3
      58: aload_2
      59: invokeinterface #132,  2          // InterfaceMethod java/util/Deque.add:(Ljava/lang/Object;)Z
      64: pop
      65: aload_0
      66: areturn

  public java.util.Map<java.lang.String, io.undertow.server.handlers.Cookie> getRequestCookies();
    Code:
       0: aload_0
       1: getfield      #134                // Field requestCookies:Ljava/util/Map;
       4: ifnonnull     54
       7: aload_0
       8: aload_0
       9: invokevirtual #82                 // Method getConnection:()Lio/undertow/server/ServerConnection;
      12: invokevirtual #135                // Method io/undertow/server/ServerConnection.getUndertowOptions:()Lorg/xnio/OptionMap;
      15: getstatic     #136                // Field io/undertow/UndertowOptions.MAX_COOKIES:Lorg/xnio/Option;
      18: sipush        200
      21: invokevirtual #137                // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;I)I
      24: aload_0
      25: invokevirtual #82                 // Method getConnection:()Lio/undertow/server/ServerConnection;
      28: invokevirtual #135                // Method io/undertow/server/ServerConnection.getUndertowOptions:()Lorg/xnio/OptionMap;
      31: getstatic     #138                // Field io/undertow/UndertowOptions.ALLOW_EQUALS_IN_COOKIE_VALUE:Lorg/xnio/Option;
      34: iconst_0
      35: invokevirtual #139                // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;Z)Z
      38: aload_0
      39: getfield      #21                 // Field requestHeaders:Lio/undertow/util/HeaderMap;
      42: getstatic     #140                // Field io/undertow/util/Headers.COOKIE:Lio/undertow/util/HttpString;
      45: invokevirtual #141                // Method io/undertow/util/HeaderMap.get:(Lio/undertow/util/HttpString;)Lio/undertow/util/HeaderValues;
      48: invokestatic  #142                // Method io/undertow/util/Cookies.parseRequestCookies:(IZLjava/util/List;)Ljava/util/Map;
      51: putfield      #134                // Field requestCookies:Ljava/util/Map;
      54: aload_0
      55: getfield      #134                // Field requestCookies:Ljava/util/Map;
      58: areturn

  public io.undertow.server.HttpServerExchange setResponseCookie(io.undertow.server.handlers.Cookie);
    Code:
       0: aload_0
       1: getfield      #143                // Field responseCookies:Ljava/util/Map;
       4: ifnonnull     18
       7: aload_0
       8: new           #125                // class java/util/TreeMap
      11: dup
      12: invokespecial #126                // Method java/util/TreeMap."<init>":()V
      15: putfield      #143                // Field responseCookies:Ljava/util/Map;
      18: aload_0
      19: getfield      #143                // Field responseCookies:Ljava/util/Map;
      22: aload_1
      23: invokeinterface #144,  1          // InterfaceMethod io/undertow/server/handlers/Cookie.getName:()Ljava/lang/String;
      28: aload_1
      29: invokeinterface #131,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      34: pop
      35: aload_0
      36: areturn

  public java.util.Map<java.lang.String, io.undertow.server.handlers.Cookie> getResponseCookies();
    Code:
       0: aload_0
       1: getfield      #143                // Field responseCookies:Ljava/util/Map;
       4: ifnonnull     18
       7: aload_0
       8: new           #125                // class java/util/TreeMap
      11: dup
      12: invokespecial #126                // Method java/util/TreeMap."<init>":()V
      15: putfield      #143                // Field responseCookies:Ljava/util/Map;
      18: aload_0
      19: getfield      #143                // Field responseCookies:Ljava/util/Map;
      22: areturn

  java.util.Map<java.lang.String, io.undertow.server.handlers.Cookie> getResponseCookiesInternal();
    Code:
       0: aload_0
       1: getfield      #143                // Field responseCookies:Ljava/util/Map;
       4: areturn

  public boolean isResponseStarted();
    Code:
       0: aload_0
       1: getfield      #2                  // Field state:I
       4: sipush        1024
       7: invokestatic  #145                // Method org/xnio/Bits.allAreSet:(II)Z
      10: ireturn

  public org.xnio.channels.StreamSourceChannel getRequestChannel();
    Code:
       0: aload_0
       1: getfield      #146                // Field requestChannel:Lio/undertow/server/HttpServerExchange$ReadDispatchChannel;
       4: ifnull        37
       7: aload_0
       8: getfield      #2                  // Field state:I
      11: ldc           #147                // int 1048576
      13: invokestatic  #34                 // Method org/xnio/Bits.anyAreSet:(II)Z
      16: ifeq          35
      19: aload_0
      20: dup
      21: getfield      #2                  // Field state:I
      24: ldc           #148                // int -1048577
      26: iand
      27: putfield      #2                  // Field state:I
      30: aload_0
      31: getfield      #146                // Field requestChannel:Lio/undertow/server/HttpServerExchange$ReadDispatchChannel;
      34: areturn
      35: aconst_null
      36: areturn
      37: aload_0
      38: getfield      #2                  // Field state:I
      41: sipush        4096
      44: invokestatic  #34                 // Method org/xnio/Bits.anyAreSet:(II)Z
      47: ifeq          85
      50: aload_0
      51: new           #149                // class io/undertow/server/HttpServerExchange$ReadDispatchChannel
      54: dup
      55: aload_0
      56: new           #150                // class org/xnio/conduits/ConduitStreamSourceChannel
      59: dup
      60: getstatic     #151                // Field org/xnio/channels/Configurable.EMPTY:Lorg/xnio/channels/Configurable;
      63: new           #152                // class io/undertow/conduits/EmptyStreamSourceConduit
      66: dup
      67: aload_0
      68: invokevirtual #69                 // Method getIoThread:()Lorg/xnio/XnioIoThread;
      71: invokespecial #153                // Method io/undertow/conduits/EmptyStreamSourceConduit."<init>":(Lorg/xnio/XnioIoThread;)V
      74: invokespecial #154                // Method org/xnio/conduits/ConduitStreamSourceChannel."<init>":(Lorg/xnio/channels/Configurable;Lorg/xnio/conduits/StreamSourceConduit;)V
      77: invokespecial #155                // Method io/undertow/server/HttpServerExchange$ReadDispatchChannel."<init>":(Lio/undertow/server/HttpServerExchange;Lorg/xnio/conduits/ConduitStreamSourceChannel;)V
      80: dup_x1
      81: putfield      #146                // Field requestChannel:Lio/undertow/server/HttpServerExchange$ReadDispatchChannel;
      84: areturn
      85: aload_0
      86: getfield      #156                // Field requestWrappers:[Lio/undertow/server/ConduitWrapper;
      89: astore_1
      90: aload_0
      91: getfield      #3                  // Field connection:Lio/undertow/server/ServerConnection;
      94: invokevirtual #157                // Method io/undertow/server/ServerConnection.getSourceChannel:()Lorg/xnio/conduits/ConduitStreamSourceChannel;
      97: astore_2
      98: aload_1
      99: ifnull        136
     102: aload_0
     103: aconst_null
     104: putfield      #156                // Field requestWrappers:[Lio/undertow/server/ConduitWrapper;
     107: new           #158                // class io/undertow/server/HttpServerExchange$WrapperConduitFactory
     110: dup
     111: aload_1
     112: aload_0
     113: getfield      #15                 // Field requestWrapperCount:I
     116: aload_2
     117: invokevirtual #159                // Method org/xnio/conduits/ConduitStreamSourceChannel.getConduit:()Lorg/xnio/conduits/StreamSourceConduit;
     120: aload_0
     121: invokespecial #160                // Method io/undertow/server/HttpServerExchange$WrapperConduitFactory."<init>":([Lio/undertow/server/ConduitWrapper;ILorg/xnio/conduits/Conduit;Lio/undertow/server/HttpServerExchange;)V
     124: astore_3
     125: aload_2
     126: aload_3
     127: invokevirtual #161                // Method io/undertow/server/HttpServerExchange$WrapperConduitFactory.create:()Lorg/xnio/conduits/Conduit;
     130: checkcast     #162                // class org/xnio/conduits/StreamSourceConduit
     133: invokevirtual #163                // Method org/xnio/conduits/ConduitStreamSourceChannel.setConduit:(Lorg/xnio/conduits/StreamSourceConduit;)V
     136: aload_0
     137: new           #149                // class io/undertow/server/HttpServerExchange$ReadDispatchChannel
     140: dup
     141: aload_0
     142: aload_2
     143: invokespecial #155                // Method io/undertow/server/HttpServerExchange$ReadDispatchChannel."<init>":(Lio/undertow/server/HttpServerExchange;Lorg/xnio/conduits/ConduitStreamSourceChannel;)V
     146: dup_x1
     147: putfield      #146                // Field requestChannel:Lio/undertow/server/HttpServerExchange$ReadDispatchChannel;
     150: areturn

  void resetRequestChannel();
    Code:
       0: aload_0
       1: dup
       2: getfield      #2                  // Field state:I
       5: ldc           #147                // int 1048576
       7: ior
       8: putfield      #2                  // Field state:I
      11: return

  public boolean isRequestChannelAvailable();
    Code:
       0: aload_0
       1: getfield      #146                // Field requestChannel:Lio/undertow/server/HttpServerExchange$ReadDispatchChannel;
       4: ifnull        19
       7: aload_0
       8: getfield      #2                  // Field state:I
      11: ldc           #147                // int 1048576
      13: invokestatic  #34                 // Method org/xnio/Bits.anyAreSet:(II)Z
      16: ifeq          23
      19: iconst_1
      20: goto          24
      23: iconst_0
      24: ireturn

  public boolean isComplete();
    Code:
       0: aload_0
       1: getfield      #2                  // Field state:I
       4: sipush        6144
       7: invokestatic  #145                // Method org/xnio/Bits.allAreSet:(II)Z
      10: ireturn

  public boolean isRequestComplete();
    Code:
       0: aload_0
       1: getstatic     #164                // Field BUFFERED_REQUEST_DATA:Lio/undertow/util/AttachmentKey;
       4: invokevirtual #165                // Method getAttachment:(Lio/undertow/util/AttachmentKey;)Ljava/lang/Object;
       7: checkcast     #166                // class "[Lio/undertow/connector/PooledByteBuffer;"
      10: astore_1
      11: aload_1
      12: ifnull        17
      15: iconst_0
      16: ireturn
      17: aload_0
      18: getfield      #2                  // Field state:I
      21: sipush        4096
      24: invokestatic  #145                // Method org/xnio/Bits.allAreSet:(II)Z
      27: ireturn

  public boolean isResponseComplete();
    Code:
       0: aload_0
       1: getfield      #2                  // Field state:I
       4: sipush        2048
       7: invokestatic  #145                // Method org/xnio/Bits.allAreSet:(II)Z
      10: ireturn

  void terminateRequest();
    Code:
       0: aload_0
       1: getfield      #2                  // Field state:I
       4: istore_1
       5: iload_1
       6: sipush        4096
       9: invokestatic  #145                // Method org/xnio/Bits.allAreSet:(II)Z
      12: ifeq          16
      15: return
      16: aload_0
      17: getfield      #146                // Field requestChannel:Lio/undertow/server/HttpServerExchange$ReadDispatchChannel;
      20: ifnull        30
      23: aload_0
      24: getfield      #146                // Field requestChannel:Lio/undertow/server/HttpServerExchange$ReadDispatchChannel;
      27: invokevirtual #167                // Method io/undertow/server/HttpServerExchange$ReadDispatchChannel.requestDone:()V
      30: aload_0
      31: iload_1
      32: sipush        4096
      35: ior
      36: putfield      #2                  // Field state:I
      39: iload_1
      40: sipush        2048
      43: invokestatic  #34                 // Method org/xnio/Bits.anyAreSet:(II)Z
      46: ifeq          53
      49: aload_0
      50: invokespecial #4                  // Method invokeExchangeCompleteListeners:()V
      53: return

  private void invokeExchangeCompleteListeners();
    Code:
       0: aload_0
       1: getfield      #11                 // Field exchangeCompletionListenersCount:I
       4: ifle          49
       7: aload_0
       8: getfield      #11                 // Field exchangeCompletionListenersCount:I
      11: iconst_1
      12: isub
      13: istore_1
      14: aload_0
      15: getfield      #110                // Field exchangeCompleteListeners:[Lio/undertow/server/ExchangeCompletionListener;
      18: iload_1
      19: aaload
      20: astore_2
      21: aload_0
      22: iconst_m1
      23: putfield      #11                 // Field exchangeCompletionListenersCount:I
      26: aload_2
      27: aload_0
      28: new           #168                // class io/undertow/server/HttpServerExchange$ExchangeCompleteNextListener
      31: dup
      32: aload_0
      33: getfield      #110                // Field exchangeCompleteListeners:[Lio/undertow/server/ExchangeCompletionListener;
      36: aload_0
      37: iload_1
      38: invokespecial #169                // Method io/undertow/server/HttpServerExchange$ExchangeCompleteNextListener."<init>":([Lio/undertow/server/ExchangeCompletionListener;Lio/undertow/server/HttpServerExchange;I)V
      41: invokeinterface #170,  3          // InterfaceMethod io/undertow/server/ExchangeCompletionListener.exchangeEvent:(Lio/undertow/server/HttpServerExchange;Lio/undertow/server/ExchangeCompletionListener$NextListener;)V
      46: goto          69
      49: aload_0
      50: getfield      #11                 // Field exchangeCompletionListenersCount:I
      53: ifne          69
      56: aload_0
      57: iconst_m1
      58: putfield      #11                 // Field exchangeCompletionListenersCount:I
      61: aload_0
      62: getfield      #3                  // Field connection:Lio/undertow/server/ServerConnection;
      65: aload_0
      66: invokevirtual #171                // Method io/undertow/server/ServerConnection.exchangeComplete:(Lio/undertow/server/HttpServerExchange;)V
      69: return

  public org.xnio.channels.StreamSinkChannel getResponseChannel();
    Code:
       0: aload_0
       1: getfield      #172                // Field responseChannel:Lio/undertow/server/HttpServerExchange$WriteDispatchChannel;
       4: ifnull        9
       7: aconst_null
       8: areturn
       9: aload_0
      10: getfield      #173                // Field responseWrappers:[Lio/undertow/server/ConduitWrapper;
      13: astore_1
      14: aload_0
      15: aconst_null
      16: putfield      #173                // Field responseWrappers:[Lio/undertow/server/ConduitWrapper;
      19: aload_0
      20: getfield      #3                  // Field connection:Lio/undertow/server/ServerConnection;
      23: invokevirtual #174                // Method io/undertow/server/ServerConnection.getSinkChannel:()Lorg/xnio/conduits/ConduitStreamSinkChannel;
      26: astore_2
      27: aload_2
      28: ifnonnull     33
      31: aconst_null
      32: areturn
      33: aload_1
      34: ifnull        66
      37: new           #175                // class io/undertow/server/HttpServerExchange$WrapperStreamSinkConduitFactory
      40: dup
      41: aload_1
      42: aload_0
      43: getfield      #16                 // Field responseWrapperCount:I
      46: aload_0
      47: aload_2
      48: invokevirtual #176                // Method org/xnio/conduits/ConduitStreamSinkChannel.getConduit:()Lorg/xnio/conduits/StreamSinkConduit;
      51: invokespecial #177                // Method io/undertow/server/HttpServerExchange$WrapperStreamSinkConduitFactory."<init>":([Lio/undertow/server/ConduitWrapper;ILio/undertow/server/HttpServerExchange;Lorg/xnio/conduits/StreamSinkConduit;)V
      54: astore_3
      55: aload_2
      56: aload_3
      57: invokevirtual #178                // Method io/undertow/server/HttpServerExchange$WrapperStreamSinkConduitFactory.create:()Lorg/xnio/conduits/StreamSinkConduit;
      60: invokevirtual #179                // Method org/xnio/conduits/ConduitStreamSinkChannel.setConduit:(Lorg/xnio/conduits/StreamSinkConduit;)V
      63: goto          82
      66: aload_2
      67: aload_0
      68: getfield      #3                  // Field connection:Lio/undertow/server/ServerConnection;
      71: aload_0
      72: aload_2
      73: invokevirtual #176                // Method org/xnio/conduits/ConduitStreamSinkChannel.getConduit:()Lorg/xnio/conduits/StreamSinkConduit;
      76: invokevirtual #180                // Method io/undertow/server/ServerConnection.getSinkConduit:(Lio/undertow/server/HttpServerExchange;Lorg/xnio/conduits/StreamSinkConduit;)Lorg/xnio/conduits/StreamSinkConduit;
      79: invokevirtual #179                // Method org/xnio/conduits/ConduitStreamSinkChannel.setConduit:(Lorg/xnio/conduits/StreamSinkConduit;)V
      82: aload_0
      83: new           #181                // class io/undertow/server/HttpServerExchange$WriteDispatchChannel
      86: dup
      87: aload_0
      88: aload_2
      89: invokespecial #182                // Method io/undertow/server/HttpServerExchange$WriteDispatchChannel."<init>":(Lio/undertow/server/HttpServerExchange;Lorg/xnio/conduits/ConduitStreamSinkChannel;)V
      92: putfield      #172                // Field responseChannel:Lio/undertow/server/HttpServerExchange$WriteDispatchChannel;
      95: aload_0
      96: invokevirtual #183                // Method startResponse:()Lio/undertow/server/HttpServerExchange;
      99: pop
     100: aload_0
     101: getfield      #172                // Field responseChannel:Lio/undertow/server/HttpServerExchange$WriteDispatchChannel;
     104: areturn

  public io.undertow.io.Sender getResponseSender();
    Code:
       0: aload_0
       1: getfield      #184                // Field blockingHttpExchange:Lio/undertow/server/BlockingHttpExchange;
       4: ifnull        17
       7: aload_0
       8: getfield      #184                // Field blockingHttpExchange:Lio/undertow/server/BlockingHttpExchange;
      11: invokeinterface #185,  1          // InterfaceMethod io/undertow/server/BlockingHttpExchange.getSender:()Lio/undertow/io/Sender;
      16: areturn
      17: aload_0
      18: getfield      #186                // Field sender:Lio/undertow/io/Sender;
      21: ifnull        29
      24: aload_0
      25: getfield      #186                // Field sender:Lio/undertow/io/Sender;
      28: areturn
      29: aload_0
      30: new           #187                // class io/undertow/io/AsyncSenderImpl
      33: dup
      34: aload_0
      35: invokespecial #188                // Method io/undertow/io/AsyncSenderImpl."<init>":(Lio/undertow/server/HttpServerExchange;)V
      38: dup_x1
      39: putfield      #186                // Field sender:Lio/undertow/io/Sender;
      42: areturn

  public io.undertow.io.Receiver getRequestReceiver();
    Code:
       0: aload_0
       1: getfield      #184                // Field blockingHttpExchange:Lio/undertow/server/BlockingHttpExchange;
       4: ifnull        17
       7: aload_0
       8: getfield      #184                // Field blockingHttpExchange:Lio/undertow/server/BlockingHttpExchange;
      11: invokeinterface #189,  1          // InterfaceMethod io/undertow/server/BlockingHttpExchange.getReceiver:()Lio/undertow/io/Receiver;
      16: areturn
      17: aload_0
      18: getfield      #190                // Field receiver:Lio/undertow/io/Receiver;
      21: ifnull        29
      24: aload_0
      25: getfield      #190                // Field receiver:Lio/undertow/io/Receiver;
      28: areturn
      29: aload_0
      30: new           #191                // class io/undertow/io/AsyncReceiverImpl
      33: dup
      34: aload_0
      35: invokespecial #192                // Method io/undertow/io/AsyncReceiverImpl."<init>":(Lio/undertow/server/HttpServerExchange;)V
      38: dup_x1
      39: putfield      #190                // Field receiver:Lio/undertow/io/Receiver;
      42: areturn

  public boolean isResponseChannelAvailable();
    Code:
       0: aload_0
       1: getfield      #172                // Field responseChannel:Lio/undertow/server/HttpServerExchange$WriteDispatchChannel;
       4: ifnonnull     11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public int getResponseCode();
    Code:
       0: aload_0
       1: getfield      #2                  // Field state:I
       4: getstatic     #193                // Field MASK_RESPONSE_CODE:I
       7: iand
       8: ireturn

  public io.undertow.server.HttpServerExchange setResponseCode(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #99                 // Method setStatusCode:(I)Lio/undertow/server/HttpServerExchange;
       5: areturn

  public int getStatusCode();
    Code:
       0: aload_0
       1: getfield      #2                  // Field state:I
       4: getstatic     #193                // Field MASK_RESPONSE_CODE:I
       7: iand
       8: ireturn

  public io.undertow.server.HttpServerExchange setStatusCode(int);
    Code:
       0: iload_1
       1: iflt          11
       4: iload_1
       5: sipush        999
       8: if_icmple     21
      11: new           #194                // class java/lang/IllegalArgumentException
      14: dup
      15: ldc           #195                // String Invalid response code
      17: invokespecial #196                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      20: athrow
      21: aload_0
      22: getfield      #2                  // Field state:I
      25: istore_2
      26: iload_2
      27: sipush        1024
      30: invokestatic  #145                // Method org/xnio/Bits.allAreSet:(II)Z
      33: ifeq          45
      36: getstatic     #92                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      39: invokeinterface #197,  1          // InterfaceMethod io/undertow/UndertowMessages.responseAlreadyStarted:()Ljava/lang/IllegalStateException;
      44: athrow
      45: aload_0
      46: iload_2
      47: getstatic     #193                // Field MASK_RESPONSE_CODE:I
      50: iconst_m1
      51: ixor
      52: iand
      53: iload_1
      54: getstatic     #193                // Field MASK_RESPONSE_CODE:I
      57: iand
      58: ior
      59: putfield      #2                  // Field state:I
      62: aload_0
      63: areturn

  public io.undertow.server.HttpServerExchange setReasonPhrase(java.lang.String);
    Code:
       0: aload_0
       1: getstatic     #198                // Field REASON_PHRASE:Lio/undertow/util/AttachmentKey;
       4: aload_1
       5: invokevirtual #199                // Method putAttachment:(Lio/undertow/util/AttachmentKey;Ljava/lang/Object;)Ljava/lang/Object;
       8: pop
       9: aload_0
      10: areturn

  public java.lang.String getReasonPhrase();
    Code:
       0: aload_0
       1: getstatic     #198                // Field REASON_PHRASE:Lio/undertow/util/AttachmentKey;
       4: invokevirtual #165                // Method getAttachment:(Lio/undertow/util/AttachmentKey;)Ljava/lang/Object;
       7: checkcast     #200                // class java/lang/String
      10: areturn

  public io.undertow.server.HttpServerExchange addRequestWrapper(io.undertow.server.ConduitWrapper<org.xnio.conduits.StreamSourceConduit>);
    Code:
       0: aload_0
       1: getfield      #156                // Field requestWrappers:[Lio/undertow/server/ConduitWrapper;
       4: astore_2
       5: aload_0
       6: getfield      #146                // Field requestChannel:Lio/undertow/server/HttpServerExchange$ReadDispatchChannel;
       9: ifnull        21
      12: getstatic     #92                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      15: invokeinterface #201,  1          // InterfaceMethod io/undertow/UndertowMessages.requestChannelAlreadyProvided:()Ljava/lang/IllegalStateException;
      20: athrow
      21: aload_2
      22: ifnonnull     38
      25: aload_0
      26: iconst_2
      27: anewarray     #202                // class io/undertow/server/ConduitWrapper
      30: dup_x1
      31: putfield      #156                // Field requestWrappers:[Lio/undertow/server/ConduitWrapper;
      34: astore_2
      35: goto          75
      38: aload_2
      39: arraylength
      40: aload_0
      41: getfield      #15                 // Field requestWrapperCount:I
      44: if_icmpne     75
      47: aload_0
      48: aload_2
      49: arraylength
      50: iconst_2
      51: iadd
      52: anewarray     #202                // class io/undertow/server/ConduitWrapper
      55: putfield      #156                // Field requestWrappers:[Lio/undertow/server/ConduitWrapper;
      58: aload_2
      59: iconst_0
      60: aload_0
      61: getfield      #156                // Field requestWrappers:[Lio/undertow/server/ConduitWrapper;
      64: iconst_0
      65: aload_2
      66: arraylength
      67: invokestatic  #112                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      70: aload_0
      71: getfield      #156                // Field requestWrappers:[Lio/undertow/server/ConduitWrapper;
      74: astore_2
      75: aload_2
      76: aload_0
      77: dup
      78: getfield      #15                 // Field requestWrapperCount:I
      81: dup_x1
      82: iconst_1
      83: iadd
      84: putfield      #15                 // Field requestWrapperCount:I
      87: aload_1
      88: aastore
      89: aload_0
      90: areturn

  public io.undertow.server.HttpServerExchange addResponseWrapper(io.undertow.server.ConduitWrapper<org.xnio.conduits.StreamSinkConduit>);
    Code:
       0: aload_0
       1: getfield      #173                // Field responseWrappers:[Lio/undertow/server/ConduitWrapper;
       4: astore_2
       5: aload_0
       6: getfield      #172                // Field responseChannel:Lio/undertow/server/HttpServerExchange$WriteDispatchChannel;
       9: ifnull        21
      12: getstatic     #92                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      15: invokeinterface #203,  1          // InterfaceMethod io/undertow/UndertowMessages.responseChannelAlreadyProvided:()Ljava/lang/IllegalStateException;
      20: athrow
      21: aload_2
      22: ifnonnull     38
      25: aload_0
      26: iconst_2
      27: anewarray     #202                // class io/undertow/server/ConduitWrapper
      30: dup
      31: astore_2
      32: putfield      #173                // Field responseWrappers:[Lio/undertow/server/ConduitWrapper;
      35: goto          75
      38: aload_2
      39: arraylength
      40: aload_0
      41: getfield      #16                 // Field responseWrapperCount:I
      44: if_icmpne     75
      47: aload_0
      48: aload_2
      49: arraylength
      50: iconst_2
      51: iadd
      52: anewarray     #202                // class io/undertow/server/ConduitWrapper
      55: putfield      #173                // Field responseWrappers:[Lio/undertow/server/ConduitWrapper;
      58: aload_2
      59: iconst_0
      60: aload_0
      61: getfield      #173                // Field responseWrappers:[Lio/undertow/server/ConduitWrapper;
      64: iconst_0
      65: aload_2
      66: arraylength
      67: invokestatic  #112                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      70: aload_0
      71: getfield      #173                // Field responseWrappers:[Lio/undertow/server/ConduitWrapper;
      74: astore_2
      75: aload_2
      76: aload_0
      77: dup
      78: getfield      #16                 // Field responseWrapperCount:I
      81: dup_x1
      82: iconst_1
      83: iadd
      84: putfield      #16                 // Field responseWrapperCount:I
      87: aload_1
      88: aastore
      89: aload_0
      90: areturn

  public io.undertow.server.BlockingHttpExchange startBlocking();
    Code:
       0: aload_0
       1: getfield      #184                // Field blockingHttpExchange:Lio/undertow/server/BlockingHttpExchange;
       4: astore_1
       5: aload_0
       6: new           #204                // class io/undertow/server/HttpServerExchange$DefaultBlockingHttpExchange
       9: dup
      10: aload_0
      11: invokespecial #205                // Method io/undertow/server/HttpServerExchange$DefaultBlockingHttpExchange."<init>":(Lio/undertow/server/HttpServerExchange;)V
      14: putfield      #184                // Field blockingHttpExchange:Lio/undertow/server/BlockingHttpExchange;
      17: aload_1
      18: areturn

  public io.undertow.server.BlockingHttpExchange startBlocking(io.undertow.server.BlockingHttpExchange);
    Code:
       0: aload_0
       1: getfield      #184                // Field blockingHttpExchange:Lio/undertow/server/BlockingHttpExchange;
       4: astore_2
       5: aload_0
       6: aload_1
       7: putfield      #184                // Field blockingHttpExchange:Lio/undertow/server/BlockingHttpExchange;
      10: aload_2
      11: areturn

  public boolean isBlocking();
    Code:
       0: aload_0
       1: getfield      #184                // Field blockingHttpExchange:Lio/undertow/server/BlockingHttpExchange;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public java.io.InputStream getInputStream();
    Code:
       0: aload_0
       1: getfield      #184                // Field blockingHttpExchange:Lio/undertow/server/BlockingHttpExchange;
       4: ifnonnull     16
       7: getstatic     #92                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      10: invokeinterface #206,  1          // InterfaceMethod io/undertow/UndertowMessages.startBlockingHasNotBeenCalled:()Ljava/lang/IllegalStateException;
      15: athrow
      16: aload_0
      17: getfield      #184                // Field blockingHttpExchange:Lio/undertow/server/BlockingHttpExchange;
      20: invokeinterface #207,  1          // InterfaceMethod io/undertow/server/BlockingHttpExchange.getInputStream:()Ljava/io/InputStream;
      25: areturn

  public java.io.OutputStream getOutputStream();
    Code:
       0: aload_0
       1: getfield      #184                // Field blockingHttpExchange:Lio/undertow/server/BlockingHttpExchange;
       4: ifnonnull     16
       7: getstatic     #92                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      10: invokeinterface #206,  1          // InterfaceMethod io/undertow/UndertowMessages.startBlockingHasNotBeenCalled:()Ljava/lang/IllegalStateException;
      15: athrow
      16: aload_0
      17: getfield      #184                // Field blockingHttpExchange:Lio/undertow/server/BlockingHttpExchange;
      20: invokeinterface #208,  1          // InterfaceMethod io/undertow/server/BlockingHttpExchange.getOutputStream:()Ljava/io/OutputStream;
      25: areturn

  io.undertow.server.HttpServerExchange terminateResponse();
    Code:
       0: aload_0
       1: getfield      #2                  // Field state:I
       4: istore_1
       5: iload_1
       6: sipush        2048
       9: invokestatic  #145                // Method org/xnio/Bits.allAreSet:(II)Z
      12: ifeq          17
      15: aload_0
      16: areturn
      17: aload_0
      18: getfield      #172                // Field responseChannel:Lio/undertow/server/HttpServerExchange$WriteDispatchChannel;
      21: invokevirtual #209                // Method io/undertow/server/HttpServerExchange$WriteDispatchChannel.responseDone:()V
      24: aload_0
      25: iload_1
      26: sipush        2048
      29: ior
      30: putfield      #2                  // Field state:I
      33: iload_1
      34: sipush        4096
      37: invokestatic  #34                 // Method org/xnio/Bits.anyAreSet:(II)Z
      40: ifeq          47
      43: aload_0
      44: invokespecial #4                  // Method invokeExchangeCompleteListeners:()V
      47: aload_0
      48: areturn

  public long getRequestStartTime();
    Code:
       0: aload_0
       1: getfield      #19                 // Field requestStartTime:J
       4: lreturn

  io.undertow.server.HttpServerExchange setRequestStartTime(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #19                 // Field requestStartTime:J
       5: aload_0
       6: areturn

  public io.undertow.server.HttpServerExchange endExchange();
    Code:
       0: aload_0
       1: getfield      #2                  // Field state:I
       4: istore_1
       5: iload_1
       6: sipush        6144
       9: invokestatic  #145                // Method org/xnio/Bits.allAreSet:(II)Z
      12: ifeq          31
      15: aload_0
      16: getfield      #184                // Field blockingHttpExchange:Lio/undertow/server/BlockingHttpExchange;
      19: ifnull        29
      22: aload_0
      23: getfield      #184                // Field blockingHttpExchange:Lio/undertow/server/BlockingHttpExchange;
      26: invokestatic  #210                // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
      29: aload_0
      30: areturn
      31: aload_0
      32: getfield      #113                // Field defaultResponseListeners:[Lio/undertow/server/DefaultResponseListener;
      35: ifnull        103
      38: aload_0
      39: getfield      #113                // Field defaultResponseListeners:[Lio/undertow/server/DefaultResponseListener;
      42: arraylength
      43: iconst_1
      44: isub
      45: istore_2
      46: iload_2
      47: iflt          103
      50: aload_0
      51: getfield      #113                // Field defaultResponseListeners:[Lio/undertow/server/DefaultResponseListener;
      54: iload_2
      55: aaload
      56: astore_3
      57: aload_3
      58: ifnull        97
      61: aload_0
      62: getfield      #113                // Field defaultResponseListeners:[Lio/undertow/server/DefaultResponseListener;
      65: iload_2
      66: aconst_null
      67: aastore
      68: aload_3
      69: aload_0
      70: invokeinterface #211,  2          // InterfaceMethod io/undertow/server/DefaultResponseListener.handleDefaultResponse:(Lio/undertow/server/HttpServerExchange;)Z
      75: ifeq          80
      78: aload_0
      79: areturn
      80: goto          97
      83: astore        4
      85: getstatic     #213                // Field io/undertow/UndertowLogger.REQUEST_LOGGER:Lio/undertow/UndertowLogger;
      88: ldc           #214                // String Exception running default response listener
      90: aload         4
      92: invokeinterface #215,  3          // InterfaceMethod io/undertow/UndertowLogger.debug:(Ljava/lang/Object;Ljava/lang/Throwable;)V
      97: iinc          2, -1
     100: goto          46
     103: iload_1
     104: sipush        4096
     107: invokestatic  #216                // Method org/xnio/Bits.anyAreClear:(II)Z
     110: ifeq          121
     113: aload_0
     114: getfield      #3                  // Field connection:Lio/undertow/server/ServerConnection;
     117: aload_0
     118: invokevirtual #217                // Method io/undertow/server/ServerConnection.terminateRequestChannel:(Lio/undertow/server/HttpServerExchange;)V
     121: aload_0
     122: getfield      #184                // Field blockingHttpExchange:Lio/undertow/server/BlockingHttpExchange;
     125: ifnull        157
     128: aload_0
     129: getfield      #184                // Field blockingHttpExchange:Lio/undertow/server/BlockingHttpExchange;
     132: invokeinterface #218,  1          // InterfaceMethod io/undertow/server/BlockingHttpExchange.close:()V
     137: goto          157
     140: astore_2
     141: getstatic     #220                // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
     144: aload_2
     145: invokeinterface #221,  2          // InterfaceMethod io/undertow/UndertowLogger.ioException:(Ljava/io/IOException;)V
     150: aload_0
     151: getfield      #3                  // Field connection:Lio/undertow/server/ServerConnection;
     154: invokestatic  #210                // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
     157: iload_1
     158: sipush        4096
     161: invokestatic  #216                // Method org/xnio/Bits.anyAreClear:(II)Z
     164: ifeq          302
     167: aload_0
     168: getfield      #146                // Field requestChannel:Lio/undertow/server/HttpServerExchange$ReadDispatchChannel;
     171: ifnonnull     179
     174: aload_0
     175: invokevirtual #222                // Method getRequestChannel:()Lorg/xnio/channels/StreamSourceChannel;
     178: pop
     179: iconst_0
     180: istore_2
     181: aload_0
     182: getfield      #146                // Field requestChannel:Lio/undertow/server/HttpServerExchange$ReadDispatchChannel;
     185: ldc2_w        #224                // long 9223372036854775807l
     188: invokestatic  #226                // Method org/xnio/channels/Channels.drain:(Lorg/xnio/channels/StreamSourceChannel;J)J
     191: lstore_3
     192: iload_2
     193: i2l
     194: lload_3
     195: ladd
     196: l2i
     197: istore_2
     198: lload_3
     199: lconst_0
     200: lcmp
     201: ifne          265
     204: aload_0
     205: invokevirtual #71                 // Method getStatusCode:()I
     208: sipush        417
     211: if_icmpne     218
     214: iload_2
     215: ifle          262
     218: aload_0
     219: getfield      #146                // Field requestChannel:Lio/undertow/server/HttpServerExchange$ReadDispatchChannel;
     222: invokevirtual #227                // Method io/undertow/server/HttpServerExchange$ReadDispatchChannel.getReadSetter:()Lorg/xnio/ChannelListener$Setter;
     225: ldc2_w        #224                // long 9223372036854775807l
     228: new           #228                // class io/undertow/server/HttpServerExchange$2
     231: dup
     232: aload_0
     233: iload_1
     234: invokespecial #229                // Method io/undertow/server/HttpServerExchange$2."<init>":(Lio/undertow/server/HttpServerExchange;I)V
     237: new           #230                // class io/undertow/server/HttpServerExchange$3
     240: dup
     241: aload_0
     242: invokespecial #231                // Method io/undertow/server/HttpServerExchange$3."<init>":(Lio/undertow/server/HttpServerExchange;)V
     245: invokestatic  #232                // Method org/xnio/ChannelListeners.drainListener:(JLorg/xnio/ChannelListener;Lorg/xnio/ChannelExceptionHandler;)Lorg/xnio/ChannelListener;
     248: invokeinterface #233,  2          // InterfaceMethod org/xnio/ChannelListener$Setter.set:(Lorg/xnio/ChannelListener;)V
     253: aload_0
     254: getfield      #146                // Field requestChannel:Lio/undertow/server/HttpServerExchange$ReadDispatchChannel;
     257: invokevirtual #234                // Method io/undertow/server/HttpServerExchange$ReadDispatchChannel.resumeReads:()V
     260: aload_0
     261: areturn
     262: goto          302
     265: lload_3
     266: ldc2_w        #17                 // long -1l
     269: lcmp
     270: ifne          276
     273: goto          302
     276: goto          181
     279: astore_3
     280: getstatic     #220                // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
     283: aload_3
     284: invokeinterface #221,  2          // InterfaceMethod io/undertow/UndertowLogger.ioException:(Ljava/io/IOException;)V
     289: aload_0
     290: invokespecial #4                  // Method invokeExchangeCompleteListeners:()V
     293: aload_0
     294: getfield      #3                  // Field connection:Lio/undertow/server/ServerConnection;
     297: invokestatic  #210                // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
     300: aload_0
     301: areturn
     302: iload_1
     303: sipush        2048
     306: invokestatic  #216                // Method org/xnio/Bits.anyAreClear:(II)Z
     309: ifeq          316
     312: aload_0
     313: invokespecial #5                  // Method closeAndFlushResponse:()V
     316: aload_0
     317: areturn
    Exception table:
       from    to  target type
          68    79    83   Class java/lang/Exception
         128   137   140   Class java/io/IOException
         181   261   279   Class java/io/IOException
         265   273   279   Class java/io/IOException

  private void closeAndFlushResponse();
    Code:
       0: aload_0
       1: getfield      #3                  // Field connection:Lio/undertow/server/ServerConnection;
       4: invokevirtual #235                // Method io/undertow/server/ServerConnection.isOpen:()Z
       7: ifne          15
      10: aload_0
      11: invokespecial #4                  // Method invokeExchangeCompleteListeners:()V
      14: return
      15: aload_0
      16: invokevirtual #236                // Method isResponseChannelAvailable:()Z
      19: ifeq          86
      22: aload_0
      23: invokevirtual #74                 // Method getRequestMethod:()Lio/undertow/util/HttpString;
      26: getstatic     #105                // Field io/undertow/util/Methods.CONNECT:Lio/undertow/util/HttpString;
      29: invokevirtual #25                 // Method io/undertow/util/HttpString.equals:(Lio/undertow/util/HttpString;)Z
      32: ifne          81
      35: aload_0
      36: invokevirtual #74                 // Method getRequestMethod:()Lio/undertow/util/HttpString;
      39: getstatic     #75                 // Field io/undertow/util/Methods.HEAD:Lio/undertow/util/HttpString;
      42: invokevirtual #25                 // Method io/undertow/util/HttpString.equals:(Lio/undertow/util/HttpString;)Z
      45: ifeq          61
      48: aload_0
      49: invokevirtual #100                // Method getResponseHeaders:()Lio/undertow/util/HeaderMap;
      52: getstatic     #120                // Field io/undertow/util/Headers.CONTENT_LENGTH:Lio/undertow/util/HttpString;
      55: invokevirtual #96                 // Method io/undertow/util/HeaderMap.contains:(Lio/undertow/util/HttpString;)Z
      58: ifne          81
      61: aload_0
      62: invokestatic  #73                 // Method io/undertow/server/Connectors.isEntityBodyAllowed:(Lio/undertow/server/HttpServerExchange;)Z
      65: ifeq          81
      68: aload_0
      69: invokevirtual #100                // Method getResponseHeaders:()Lio/undertow/util/HeaderMap;
      72: getstatic     #120                // Field io/undertow/util/Headers.CONTENT_LENGTH:Lio/undertow/util/HttpString;
      75: ldc           #237                // String 0
      77: invokevirtual #104                // Method io/undertow/util/HeaderMap.put:(Lio/undertow/util/HttpString;Ljava/lang/String;)Lio/undertow/util/HeaderMap;
      80: pop
      81: aload_0
      82: invokevirtual #238                // Method getResponseChannel:()Lorg/xnio/channels/StreamSinkChannel;
      85: pop
      86: aload_0
      87: getfield      #172                // Field responseChannel:Lio/undertow/server/HttpServerExchange$WriteDispatchChannel;
      90: invokevirtual #239                // Method io/undertow/server/HttpServerExchange$WriteDispatchChannel.shutdownWrites:()V
      93: aload_0
      94: getfield      #172                // Field responseChannel:Lio/undertow/server/HttpServerExchange$WriteDispatchChannel;
      97: invokevirtual #240                // Method io/undertow/server/HttpServerExchange$WriteDispatchChannel.flush:()Z
     100: ifne          141
     103: aload_0
     104: getfield      #172                // Field responseChannel:Lio/undertow/server/HttpServerExchange$WriteDispatchChannel;
     107: invokevirtual #241                // Method io/undertow/server/HttpServerExchange$WriteDispatchChannel.getWriteSetter:()Lorg/xnio/ChannelListener$Setter;
     110: new           #242                // class io/undertow/server/HttpServerExchange$4
     113: dup
     114: aload_0
     115: invokespecial #243                // Method io/undertow/server/HttpServerExchange$4."<init>":(Lio/undertow/server/HttpServerExchange;)V
     118: new           #244                // class io/undertow/server/HttpServerExchange$5
     121: dup
     122: aload_0
     123: invokespecial #245                // Method io/undertow/server/HttpServerExchange$5."<init>":(Lio/undertow/server/HttpServerExchange;)V
     126: invokestatic  #246                // Method org/xnio/ChannelListeners.flushingChannelListener:(Lorg/xnio/ChannelListener;Lorg/xnio/ChannelExceptionHandler;)Lorg/xnio/ChannelListener;
     129: invokeinterface #233,  2          // InterfaceMethod org/xnio/ChannelListener$Setter.set:(Lorg/xnio/ChannelListener;)V
     134: aload_0
     135: getfield      #172                // Field responseChannel:Lio/undertow/server/HttpServerExchange$WriteDispatchChannel;
     138: invokevirtual #247                // Method io/undertow/server/HttpServerExchange$WriteDispatchChannel.resumeWrites:()V
     141: goto          165
     144: astore_1
     145: getstatic     #220                // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
     148: aload_1
     149: invokeinterface #221,  2          // InterfaceMethod io/undertow/UndertowLogger.ioException:(Ljava/io/IOException;)V
     154: aload_0
     155: invokespecial #4                  // Method invokeExchangeCompleteListeners:()V
     158: aload_0
     159: getfield      #3                  // Field connection:Lio/undertow/server/ServerConnection;
     162: invokestatic  #210                // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
     165: return
    Exception table:
       from    to  target type
          15   141   144   Class java/io/IOException

  io.undertow.server.HttpServerExchange startResponse() throws java.lang.IllegalStateException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field state:I
       4: istore_1
       5: iload_1
       6: sipush        1024
       9: invokestatic  #145                // Method org/xnio/Bits.allAreSet:(II)Z
      12: ifeq          24
      15: getstatic     #92                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      18: invokeinterface #197,  1          // InterfaceMethod io/undertow/UndertowMessages.responseAlreadyStarted:()Ljava/lang/IllegalStateException;
      23: athrow
      24: aload_0
      25: iload_1
      26: sipush        1024
      29: ior
      30: putfield      #2                  // Field state:I
      33: getstatic     #248                // Field log:Lorg/jboss/logging/Logger;
      36: ldc           #249                // String Starting to write response for %s
      38: aload_0
      39: invokevirtual #250                // Method org/jboss/logging/Logger.tracef:(Ljava/lang/String;Ljava/lang/Object;)V
      42: aload_0
      43: areturn

  public org.xnio.XnioIoThread getIoThread();
    Code:
       0: aload_0
       1: getfield      #3                  // Field connection:Lio/undertow/server/ServerConnection;
       4: invokevirtual #251                // Method io/undertow/server/ServerConnection.getIoThread:()Lorg/xnio/XnioIoThread;
       7: areturn

  public long getMaxEntitySize();
    Code:
       0: aload_0
       1: getfield      #20                 // Field maxEntitySize:J
       4: lreturn

  public io.undertow.server.HttpServerExchange setMaxEntitySize(long);
    Code:
       0: aload_0
       1: invokevirtual #252                // Method isRequestChannelAvailable:()Z
       4: ifne          16
       7: getstatic     #92                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      10: invokeinterface #201,  1          // InterfaceMethod io/undertow/UndertowMessages.requestChannelAlreadyProvided:()Ljava/lang/IllegalStateException;
      15: athrow
      16: aload_0
      17: lload_1
      18: putfield      #20                 // Field maxEntitySize:J
      21: aload_0
      22: getfield      #3                  // Field connection:Lio/undertow/server/ServerConnection;
      25: aload_0
      26: invokevirtual #253                // Method io/undertow/server/ServerConnection.maxEntitySizeUpdated:(Lio/undertow/server/HttpServerExchange;)V
      29: aload_0
      30: areturn

  public io.undertow.security.api.SecurityContext getSecurityContext();
    Code:
       0: aload_0
       1: getfield      #254                // Field securityContext:Lio/undertow/security/api/SecurityContext;
       4: areturn

  public void setSecurityContext(io.undertow.security.api.SecurityContext);
    Code:
       0: invokestatic  #255                // Method java/lang/System.getSecurityManager:()Ljava/lang/SecurityManager;
       3: astore_2
       4: aload_2
       5: ifnull        15
       8: aload_2
       9: getstatic     #256                // Field SET_SECURITY_CONTEXT:Ljava/lang/RuntimePermission;
      12: invokevirtual #257                // Method java/lang/SecurityManager.checkPermission:(Ljava/security/Permission;)V
      15: aload_0
      16: aload_1
      17: putfield      #254                // Field securityContext:Lio/undertow/security/api/SecurityContext;
      20: return

  public void addResponseCommitListener(io.undertow.server.ResponseCommitListener);
    Code:
       0: aload_0
       1: new           #258                // class io/undertow/server/HttpServerExchange$6
       4: dup
       5: aload_0
       6: aload_1
       7: invokespecial #259                // Method io/undertow/server/HttpServerExchange$6."<init>":(Lio/undertow/server/HttpServerExchange;Lio/undertow/server/ResponseCommitListener;)V
      10: invokevirtual #260                // Method addResponseWrapper:(Lio/undertow/server/ConduitWrapper;)Lio/undertow/server/HttpServerExchange;
      13: pop
      14: return

  boolean runResumeReadWrite();
    Code:
       0: iconst_0
       1: istore_1
       2: aload_0
       3: getfield      #2                  // Field state:I
       6: ldc_w         #261                // int 524288
       9: invokestatic  #34                 // Method org/xnio/Bits.anyAreSet:(II)Z
      12: ifeq          24
      15: aload_0
      16: getfield      #172                // Field responseChannel:Lio/undertow/server/HttpServerExchange$WriteDispatchChannel;
      19: invokevirtual #262                // Method io/undertow/server/HttpServerExchange$WriteDispatchChannel.runResume:()V
      22: iconst_1
      23: istore_1
      24: aload_0
      25: getfield      #2                  // Field state:I
      28: ldc_w         #263                // int 262144
      31: invokestatic  #34                 // Method org/xnio/Bits.anyAreSet:(II)Z
      34: ifeq          46
      37: aload_0
      38: getfield      #146                // Field requestChannel:Lio/undertow/server/HttpServerExchange$ReadDispatchChannel;
      41: invokevirtual #264                // Method io/undertow/server/HttpServerExchange$ReadDispatchChannel.runResume:()V
      44: iconst_1
      45: istore_1
      46: aload_0
      47: dup
      48: getfield      #2                  // Field state:I
      51: ldc_w         #265                // int -786433
      54: iand
      55: putfield      #2                  // Field state:I
      58: iload_1
      59: ireturn

  public java.lang.String toString();
    Code:
       0: new           #39                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #40                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc_w         #266                // String HttpServerExchange{
      10: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      13: aload_0
      14: invokevirtual #74                 // Method getRequestMethod:()Lio/undertow/util/HttpString;
      17: invokevirtual #267                // Method io/undertow/util/HttpString.toString:()Ljava/lang/String;
      20: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      23: ldc_w         #268                // String
      26: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      29: aload_0
      30: invokevirtual #38                 // Method getRequestURI:()Ljava/lang/String;
      33: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      36: ldc_w         #269                // String  request
      39: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      42: aload_0
      43: getfield      #21                 // Field requestHeaders:Lio/undertow/util/HeaderMap;
      46: invokevirtual #270                // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      49: ldc_w         #271                // String  response
      52: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      55: aload_0
      56: getfield      #22                 // Field responseHeaders:Lio/undertow/util/HeaderMap;
      59: invokevirtual #270                // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      62: bipush        125
      64: invokevirtual #272                // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      67: invokevirtual #45                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      70: areturn

  static void access$000(io.undertow.server.HttpServerExchange);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method closeAndFlushResponse:()V
       4: return

  static void access$100(io.undertow.server.HttpServerExchange);
    Code:
       0: aload_0
       1: invokespecial #4                  // Method invokeExchangeCompleteListeners:()V
       4: return

  static io.undertow.server.ServerConnection access$200(io.undertow.server.HttpServerExchange);
    Code:
       0: aload_0
       1: getfield      #3                  // Field connection:Lio/undertow/server/ServerConnection;
       4: areturn

  static int access$300(io.undertow.server.HttpServerExchange);
    Code:
       0: aload_0
       1: getfield      #2                  // Field state:I
       4: ireturn

  static int access$302(io.undertow.server.HttpServerExchange, int);
    Code:
       0: aload_0
       1: iload_1
       2: dup_x1
       3: putfield      #2                  // Field state:I
       6: ireturn

  static long access$500(io.undertow.server.HttpServerExchange);
    Code:
       0: aload_0
       1: getfield      #1                  // Field responseBytesSent:J
       4: lreturn

  static long access$502(io.undertow.server.HttpServerExchange, long);
    Code:
       0: aload_0
       1: lload_1
       2: dup2_x1
       3: putfield      #1                  // Field responseBytesSent:J
       6: lreturn

  static {};
    Code:
       0: ldc           #31                 // class io/undertow/server/HttpServerExchange
       2: invokestatic  #273                // Method org/jboss/logging/Logger.getLogger:(Ljava/lang/Class;)Lorg/jboss/logging/Logger;
       5: putstatic     #248                // Field log:Lorg/jboss/logging/Logger;
       8: new           #274                // class java/lang/RuntimePermission
      11: dup
      12: ldc_w         #275                // String io.undertow.SET_SECURITY_CONTEXT
      15: invokespecial #276                // Method java/lang/RuntimePermission."<init>":(Ljava/lang/String;)V
      18: putstatic     #256                // Field SET_SECURITY_CONTEXT:Ljava/lang/RuntimePermission;
      21: ldc           #200                // class java/lang/String
      23: invokestatic  #277                // Method io/undertow/util/AttachmentKey.create:(Ljava/lang/Class;)Lio/undertow/util/AttachmentKey;
      26: putstatic     #198                // Field REASON_PHRASE:Lio/undertow/util/AttachmentKey;
      29: ldc           #166                // class "[Lio/undertow/connector/PooledByteBuffer;"
      31: invokestatic  #277                // Method io/undertow/util/AttachmentKey.create:(Ljava/lang/Class;)Lio/undertow/util/AttachmentKey;
      34: putstatic     #164                // Field BUFFERED_REQUEST_DATA:Lio/undertow/util/AttachmentKey;
      37: ldc_w         #278                // class java/util/Map
      40: invokestatic  #277                // Method io/undertow/util/AttachmentKey.create:(Ljava/lang/Class;)Lio/undertow/util/AttachmentKey;
      43: putstatic     #279                // Field REQUEST_ATTRIBUTES:Lio/undertow/util/AttachmentKey;
      46: iconst_0
      47: bipush        9
      49: invokestatic  #280                // Method org/xnio/Bits.intBitMask:(II)I
      52: putstatic     #193                // Field MASK_RESPONSE_CODE:I
      55: return
}
