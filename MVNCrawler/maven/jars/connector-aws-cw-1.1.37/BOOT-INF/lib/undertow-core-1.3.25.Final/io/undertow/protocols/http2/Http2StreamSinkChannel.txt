Compiled from "Http2StreamSinkChannel.java"
public abstract class io.undertow.protocols.http2.Http2StreamSinkChannel extends io.undertow.protocols.http2.AbstractHttp2StreamSinkChannel {
  private final int streamId;

  private volatile boolean reset;

  private int flowControlWindow;

  private int initialWindowSize;

  private io.undertow.server.protocol.framed.SendFrameHeader header;

  io.undertow.protocols.http2.Http2StreamSinkChannel(io.undertow.protocols.http2.Http2Channel, int);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method io/undertow/protocols/http2/AbstractHttp2StreamSinkChannel."<init>":(Lio/undertow/protocols/http2/Http2Channel;)V
       5: aload_0
       6: iconst_0
       7: putfield      #2                  // Field reset:Z
      10: aload_0
      11: iload_2
      12: putfield      #3                  // Field streamId:I
      15: aload_0
      16: aload_1
      17: invokevirtual #4                  // Method io/undertow/protocols/http2/Http2Channel.getInitialSendWindowSize:()I
      20: putfield      #5                  // Field flowControlWindow:I
      23: aload_0
      24: aload_0
      25: getfield      #5                  // Field flowControlWindow:I
      28: putfield      #6                  // Field initialWindowSize:I
      31: return

  public int getStreamId();
    Code:
       0: aload_0
       1: getfield      #3                  // Field streamId:I
       4: ireturn

  io.undertow.server.protocol.framed.SendFrameHeader generateSendFrameHeader();
    Code:
       0: aload_0
       1: aload_0
       2: invokevirtual #7                  // Method createFrameHeaderImpl:()Lio/undertow/server/protocol/framed/SendFrameHeader;
       5: putfield      #8                  // Field header:Lio/undertow/server/protocol/framed/SendFrameHeader;
       8: aload_0
       9: getfield      #8                  // Field header:Lio/undertow/server/protocol/framed/SendFrameHeader;
      12: areturn

  protected abstract io.undertow.server.protocol.framed.SendFrameHeader createFrameHeaderImpl();

  void clearHeader();
    Code:
       0: aload_0
       1: aconst_null
       2: putfield      #8                  // Field header:Lio/undertow/server/protocol/framed/SendFrameHeader;
       5: return

  protected void channelForciblyClosed() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method getChannel:()Lio/undertow/server/protocol/framed/AbstractFramedChannel;
       4: checkcast     #10                 // class io/undertow/protocols/http2/Http2Channel
       7: aload_0
       8: invokevirtual #11                 // Method getStreamId:()I
      11: invokevirtual #12                 // Method io/undertow/protocols/http2/Http2Channel.removeStreamSink:(I)V
      14: aload_0
      15: getfield      #2                  // Field reset:Z
      18: ifeq          22
      21: return
      22: aload_0
      23: iconst_1
      24: putfield      #2                  // Field reset:Z
      27: aload_0
      28: getfield      #3                  // Field streamId:I
      31: iconst_2
      32: irem
      33: aload_0
      34: invokevirtual #9                  // Method getChannel:()Lio/undertow/server/protocol/framed/AbstractFramedChannel;
      37: checkcast     #10                 // class io/undertow/protocols/http2/Http2Channel
      40: invokevirtual #13                 // Method io/undertow/protocols/http2/Http2Channel.isClient:()Z
      43: ifeq          50
      46: iconst_1
      47: goto          51
      50: iconst_0
      51: if_icmpne     93
      54: aload_0
      55: invokevirtual #14                 // Method isFirstDataWritten:()Z
      58: ifeq          121
      61: aload_0
      62: invokevirtual #9                  // Method getChannel:()Lio/undertow/server/protocol/framed/AbstractFramedChannel;
      65: checkcast     #10                 // class io/undertow/protocols/http2/Http2Channel
      68: invokevirtual #15                 // Method io/undertow/protocols/http2/Http2Channel.isThisGoneAway:()Z
      71: ifne          121
      74: aload_0
      75: invokevirtual #9                  // Method getChannel:()Lio/undertow/server/protocol/framed/AbstractFramedChannel;
      78: checkcast     #10                 // class io/undertow/protocols/http2/Http2Channel
      81: aload_0
      82: getfield      #3                  // Field streamId:I
      85: bipush        8
      87: invokevirtual #16                 // Method io/undertow/protocols/http2/Http2Channel.sendRstStream:(II)V
      90: goto          121
      93: aload_0
      94: invokevirtual #9                  // Method getChannel:()Lio/undertow/server/protocol/framed/AbstractFramedChannel;
      97: checkcast     #10                 // class io/undertow/protocols/http2/Http2Channel
     100: invokevirtual #15                 // Method io/undertow/protocols/http2/Http2Channel.isThisGoneAway:()Z
     103: ifne          121
     106: aload_0
     107: invokevirtual #9                  // Method getChannel:()Lio/undertow/server/protocol/framed/AbstractFramedChannel;
     110: checkcast     #10                 // class io/undertow/protocols/http2/Http2Channel
     113: aload_0
     114: getfield      #3                  // Field streamId:I
     117: iconst_5
     118: invokevirtual #16                 // Method io/undertow/protocols/http2/Http2Channel.sendRstStream:(II)V
     121: aload_0
     122: invokevirtual #17                 // Method markBroken:()V
     125: return

  protected final io.undertow.server.protocol.framed.SendFrameHeader createFrameHeader();
    Code:
       0: aload_0
       1: getfield      #8                  // Field header:Lio/undertow/server/protocol/framed/SendFrameHeader;
       4: astore_1
       5: aload_0
       6: aconst_null
       7: putfield      #8                  // Field header:Lio/undertow/server/protocol/framed/SendFrameHeader;
      10: aload_1
      11: areturn

  protected void handleFlushComplete(boolean);
    Code:
       0: iload_1
       1: ifeq          18
       4: aload_0
       5: invokevirtual #9                  // Method getChannel:()Lio/undertow/server/protocol/framed/AbstractFramedChannel;
       8: checkcast     #10                 // class io/undertow/protocols/http2/Http2Channel
      11: aload_0
      12: invokevirtual #11                 // Method getStreamId:()I
      15: invokevirtual #12                 // Method io/undertow/protocols/http2/Http2Channel.removeStreamSink:(I)V
      18: aload_0
      19: getfield      #2                  // Field reset:Z
      22: ifeq          29
      25: aload_0
      26: invokestatic  #18                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
      29: return

  protected synchronized int grabFlowControlBytes(int);
    Code:
       0: iload_1
       1: ifne          6
       4: iconst_0
       5: ireturn
       6: aload_0
       7: invokevirtual #9                  // Method getChannel:()Lio/undertow/server/protocol/framed/AbstractFramedChannel;
      10: checkcast     #10                 // class io/undertow/protocols/http2/Http2Channel
      13: invokevirtual #4                  // Method io/undertow/protocols/http2/Http2Channel.getInitialSendWindowSize:()I
      16: istore_2
      17: iload_2
      18: aload_0
      19: getfield      #6                  // Field initialWindowSize:I
      22: isub
      23: istore_3
      24: aload_0
      25: iload_2
      26: putfield      #6                  // Field initialWindowSize:I
      29: aload_0
      30: dup
      31: getfield      #5                  // Field flowControlWindow:I
      34: iload_3
      35: iadd
      36: putfield      #5                  // Field flowControlWindow:I
      39: iload_1
      40: aload_0
      41: getfield      #5                  // Field flowControlWindow:I
      44: invokestatic  #19                 // Method java/lang/Math.min:(II)I
      47: istore        4
      49: aload_0
      50: invokevirtual #9                  // Method getChannel:()Lio/undertow/server/protocol/framed/AbstractFramedChannel;
      53: checkcast     #10                 // class io/undertow/protocols/http2/Http2Channel
      56: iload         4
      58: invokevirtual #20                 // Method io/undertow/protocols/http2/Http2Channel.grabFlowControlBytes:(I)I
      61: istore        5
      63: aload_0
      64: dup
      65: getfield      #5                  // Field flowControlWindow:I
      68: iload         5
      70: isub
      71: putfield      #5                  // Field flowControlWindow:I
      74: iload         5
      76: ireturn

  synchronized void updateFlowControlWindow(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #5                  // Field flowControlWindow:I
       4: ifne          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: istore_2
      13: aload_0
      14: dup
      15: getfield      #5                  // Field flowControlWindow:I
      18: iload_1
      19: iadd
      20: putfield      #5                  // Field flowControlWindow:I
      23: iload_2
      24: ifeq          49
      27: aload_0
      28: invokevirtual #9                  // Method getChannel:()Lio/undertow/server/protocol/framed/AbstractFramedChannel;
      31: checkcast     #10                 // class io/undertow/protocols/http2/Http2Channel
      34: invokevirtual #21                 // Method io/undertow/protocols/http2/Http2Channel.notifyFlowControlAllowed:()V
      37: aload_0
      38: invokevirtual #22                 // Method isWriteResumed:()Z
      41: ifeq          49
      44: aload_0
      45: iconst_1
      46: invokevirtual #23                 // Method resumeWritesInternal:(Z)V
      49: return

  protected io.undertow.connector.PooledByteBuffer[] allocateAll(io.undertow.connector.PooledByteBuffer[], io.undertow.connector.PooledByteBuffer);
    Code:
       0: aload_1
       1: ifnonnull     84
       4: iconst_2
       5: anewarray     #24                 // class io/undertow/connector/PooledByteBuffer
       8: astore_3
       9: aload_3
      10: iconst_0
      11: aload_2
      12: aastore
      13: aload_3
      14: iconst_1
      15: aload_0
      16: invokevirtual #9                  // Method getChannel:()Lio/undertow/server/protocol/framed/AbstractFramedChannel;
      19: checkcast     #10                 // class io/undertow/protocols/http2/Http2Channel
      22: invokevirtual #25                 // Method io/undertow/protocols/http2/Http2Channel.getBufferPool:()Lio/undertow/connector/ByteBufferPool;
      25: invokeinterface #26,  1           // InterfaceMethod io/undertow/connector/ByteBufferPool.allocate:()Lio/undertow/connector/PooledByteBuffer;
      30: aastore
      31: aload_3
      32: iconst_1
      33: aaload
      34: invokeinterface #27,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
      39: astore        4
      41: aload         4
      43: invokevirtual #28                 // Method java/nio/ByteBuffer.remaining:()I
      46: aload_0
      47: invokevirtual #9                  // Method getChannel:()Lio/undertow/server/protocol/framed/AbstractFramedChannel;
      50: checkcast     #10                 // class io/undertow/protocols/http2/Http2Channel
      53: invokevirtual #29                 // Method io/undertow/protocols/http2/Http2Channel.getSendMaxFrameSize:()I
      56: if_icmple     81
      59: aload         4
      61: aload         4
      63: invokevirtual #30                 // Method java/nio/ByteBuffer.position:()I
      66: aload_0
      67: invokevirtual #9                  // Method getChannel:()Lio/undertow/server/protocol/framed/AbstractFramedChannel;
      70: checkcast     #10                 // class io/undertow/protocols/http2/Http2Channel
      73: invokevirtual #29                 // Method io/undertow/protocols/http2/Http2Channel.getSendMaxFrameSize:()I
      76: iadd
      77: invokevirtual #31                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;
      80: pop
      81: goto          175
      84: aload_1
      85: arraylength
      86: iconst_1
      87: iadd
      88: anewarray     #24                 // class io/undertow/connector/PooledByteBuffer
      91: astore_3
      92: aload_1
      93: iconst_0
      94: aload_3
      95: iconst_0
      96: aload_1
      97: arraylength
      98: invokestatic  #32                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
     101: aload_3
     102: aload_3
     103: arraylength
     104: iconst_1
     105: isub
     106: aload_0
     107: invokevirtual #9                  // Method getChannel:()Lio/undertow/server/protocol/framed/AbstractFramedChannel;
     110: checkcast     #10                 // class io/undertow/protocols/http2/Http2Channel
     113: invokevirtual #25                 // Method io/undertow/protocols/http2/Http2Channel.getBufferPool:()Lio/undertow/connector/ByteBufferPool;
     116: invokeinterface #26,  1           // InterfaceMethod io/undertow/connector/ByteBufferPool.allocate:()Lio/undertow/connector/PooledByteBuffer;
     121: aastore
     122: aload_3
     123: aload_3
     124: arraylength
     125: iconst_1
     126: isub
     127: aaload
     128: invokeinterface #27,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
     133: astore        4
     135: aload         4
     137: invokevirtual #28                 // Method java/nio/ByteBuffer.remaining:()I
     140: aload_0
     141: invokevirtual #9                  // Method getChannel:()Lio/undertow/server/protocol/framed/AbstractFramedChannel;
     144: checkcast     #10                 // class io/undertow/protocols/http2/Http2Channel
     147: invokevirtual #29                 // Method io/undertow/protocols/http2/Http2Channel.getSendMaxFrameSize:()I
     150: if_icmple     175
     153: aload         4
     155: aload         4
     157: invokevirtual #30                 // Method java/nio/ByteBuffer.position:()I
     160: aload_0
     161: invokevirtual #9                  // Method getChannel:()Lio/undertow/server/protocol/framed/AbstractFramedChannel;
     164: checkcast     #10                 // class io/undertow/protocols/http2/Http2Channel
     167: invokevirtual #29                 // Method io/undertow/protocols/http2/Http2Channel.getSendMaxFrameSize:()I
     170: iadd
     171: invokevirtual #31                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;
     174: pop
     175: aload_3
     176: areturn

  void rstStream();
    Code:
       0: aload_0
       1: getfield      #2                  // Field reset:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: iconst_1
      10: putfield      #2                  // Field reset:Z
      13: aload_0
      14: invokevirtual #33                 // Method isReadyForFlush:()Z
      17: ifne          24
      20: aload_0
      21: invokestatic  #18                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
      24: aload_0
      25: invokevirtual #9                  // Method getChannel:()Lio/undertow/server/protocol/framed/AbstractFramedChannel;
      28: checkcast     #10                 // class io/undertow/protocols/http2/Http2Channel
      31: aload_0
      32: invokevirtual #11                 // Method getStreamId:()I
      35: invokevirtual #12                 // Method io/undertow/protocols/http2/Http2Channel.removeStreamSink:(I)V
      38: return
}
