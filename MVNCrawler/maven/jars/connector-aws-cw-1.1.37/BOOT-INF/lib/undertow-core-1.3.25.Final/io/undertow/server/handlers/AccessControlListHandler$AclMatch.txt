Compiled from "AccessControlListHandler.java"
class io.undertow.server.handlers.AccessControlListHandler$AclMatch {
  private final boolean deny;

  private final java.util.regex.Pattern pattern;

  protected io.undertow.server.handlers.AccessControlListHandler$AclMatch(boolean, java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iload_1
       6: putfield      #2                  // Field deny:Z
       9: aload_0
      10: aload_0
      11: aload_2
      12: invokespecial #4                  // Method createPattern:(Ljava/lang/String;)Ljava/util/regex/Pattern;
      15: putfield      #1                  // Field pattern:Ljava/util/regex/Pattern;
      18: return

  private java.util.regex.Pattern createPattern(java.lang.String);
    Code:
       0: aload_1
       1: invokestatic  #5                  // Method java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;
       4: areturn
       5: astore_2
       6: getstatic     #7                  // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
       9: aload_1
      10: invokeinterface #8,  2            // InterfaceMethod io/undertow/UndertowMessages.notAValidRegularExpressionPattern:(Ljava/lang/String;)Ljava/lang/IllegalArgumentException;
      15: athrow
    Exception table:
       from    to  target type
           0     4     5   Class java/util/regex/PatternSyntaxException

  boolean matches(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #1                  // Field pattern:Ljava/util/regex/Pattern;
       4: aload_1
       5: invokevirtual #9                  // Method java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;
       8: invokevirtual #10                 // Method java/util/regex/Matcher.matches:()Z
      11: ireturn

  boolean isDeny();
    Code:
       0: aload_0
       1: getfield      #2                  // Field deny:Z
       4: ireturn

  public java.lang.String toString();
    Code:
       0: new           #11                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #12                 // Method java/lang/StringBuilder."<init>":()V
       7: aload_0
       8: invokevirtual #13                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      11: invokevirtual #14                 // Method java/lang/Class.getSimpleName:()Ljava/lang/String;
      14: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      17: ldc           #16                 // String {
      19: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      22: ldc           #17                 // String deny=
      24: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      27: aload_0
      28: getfield      #2                  // Field deny:Z
      31: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Z)Ljava/lang/StringBuilder;
      34: ldc           #19                 // String , pattern=\'
      36: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      39: aload_0
      40: getfield      #1                  // Field pattern:Ljava/util/regex/Pattern;
      43: invokevirtual #20                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      46: bipush        39
      48: invokevirtual #21                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      51: bipush        125
      53: invokevirtual #21                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      56: invokevirtual #22                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      59: areturn

  static boolean access$100(io.undertow.server.handlers.AccessControlListHandler$AclMatch);
    Code:
       0: aload_0
       1: getfield      #2                  // Field deny:Z
       4: ireturn

  static java.util.regex.Pattern access$200(io.undertow.server.handlers.AccessControlListHandler$AclMatch);
    Code:
       0: aload_0
       1: getfield      #1                  // Field pattern:Ljava/util/regex/Pattern;
       4: areturn
}
