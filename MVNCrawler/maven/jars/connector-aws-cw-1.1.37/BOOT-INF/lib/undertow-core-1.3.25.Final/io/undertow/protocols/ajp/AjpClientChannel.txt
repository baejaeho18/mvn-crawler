Compiled from "AjpClientChannel.java"
public class io.undertow.protocols.ajp.AjpClientChannel extends io.undertow.server.protocol.framed.AbstractFramedChannel<io.undertow.protocols.ajp.AjpClientChannel, io.undertow.protocols.ajp.AbstractAjpClientStreamSourceChannel, io.undertow.protocols.ajp.AbstractAjpClientStreamSinkChannel> {
  private final io.undertow.protocols.ajp.AjpResponseParser ajpParser;

  private io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel source;

  private io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel sink;

  boolean sinkDone;

  boolean sourceDone;

  private boolean lastFrameSent;

  private boolean lastFrameRecieved;

  public io.undertow.protocols.ajp.AjpClientChannel(org.xnio.StreamConnection, io.undertow.connector.ByteBufferPool, org.xnio.OptionMap);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: getstatic     #3                  // Field io/undertow/protocols/ajp/AjpClientFramePriority.INSTANCE:Lio/undertow/protocols/ajp/AjpClientFramePriority;
       6: aconst_null
       7: aload_3
       8: invokespecial #4                  // Method io/undertow/server/protocol/framed/AbstractFramedChannel."<init>":(Lorg/xnio/StreamConnection;Lio/undertow/connector/ByteBufferPool;Lio/undertow/server/protocol/framed/FramePriority;Lio/undertow/connector/PooledByteBuffer;Lorg/xnio/OptionMap;)V
      11: aload_0
      12: iconst_1
      13: putfield      #5                  // Field sinkDone:Z
      16: aload_0
      17: iconst_1
      18: putfield      #6                  // Field sourceDone:Z
      21: aload_0
      22: new           #7                  // class io/undertow/protocols/ajp/AjpResponseParser
      25: dup
      26: invokespecial #8                  // Method io/undertow/protocols/ajp/AjpResponseParser."<init>":()V
      29: putfield      #9                  // Field ajpParser:Lio/undertow/protocols/ajp/AjpResponseParser;
      32: return

  protected io.undertow.protocols.ajp.AbstractAjpClientStreamSourceChannel createChannel(io.undertow.server.protocol.framed.FrameHeaderData, io.undertow.connector.PooledByteBuffer) throws java.io.IOException;
    Code:
       0: aload_1
       1: instanceof    #10                 // class io/undertow/protocols/ajp/AjpClientChannel$SendHeadersResponse
       4: ifeq          51
       7: aload_1
       8: checkcast     #10                 // class io/undertow/protocols/ajp/AjpClientChannel$SendHeadersResponse
      11: astore_3
      12: new           #11                 // class io/undertow/protocols/ajp/AjpClientResponseStreamSourceChannel
      15: dup
      16: aload_0
      17: aload_3
      18: invokestatic  #12                 // Method io/undertow/protocols/ajp/AjpClientChannel$SendHeadersResponse.access$000:(Lio/undertow/protocols/ajp/AjpClientChannel$SendHeadersResponse;)Lio/undertow/util/HeaderMap;
      21: aload_3
      22: invokestatic  #13                 // Method io/undertow/protocols/ajp/AjpClientChannel$SendHeadersResponse.access$100:(Lio/undertow/protocols/ajp/AjpClientChannel$SendHeadersResponse;)I
      25: aload_3
      26: invokestatic  #14                 // Method io/undertow/protocols/ajp/AjpClientChannel$SendHeadersResponse.access$200:(Lio/undertow/protocols/ajp/AjpClientChannel$SendHeadersResponse;)Ljava/lang/String;
      29: aload_2
      30: aload_1
      31: invokeinterface #15,  1           // InterfaceMethod io/undertow/server/protocol/framed/FrameHeaderData.getFrameLength:()J
      36: l2i
      37: invokespecial #16                 // Method io/undertow/protocols/ajp/AjpClientResponseStreamSourceChannel."<init>":(Lio/undertow/protocols/ajp/AjpClientChannel;Lio/undertow/util/HeaderMap;ILjava/lang/String;Lio/undertow/connector/PooledByteBuffer;I)V
      40: astore        4
      42: aload_0
      43: aload         4
      45: putfield      #2                  // Field source:Lio/undertow/protocols/ajp/AjpClientResponseStreamSourceChannel;
      48: aload         4
      50: areturn
      51: aload_1
      52: instanceof    #17                 // class io/undertow/protocols/ajp/AjpClientChannel$RequestBodyChunk
      55: ifeq          82
      58: aload_1
      59: checkcast     #17                 // class io/undertow/protocols/ajp/AjpClientChannel$RequestBodyChunk
      62: astore_3
      63: aload_0
      64: getfield      #18                 // Field sink:Lio/undertow/protocols/ajp/AjpClientRequestClientStreamSinkChannel;
      67: aload_3
      68: invokevirtual #19                 // Method io/undertow/protocols/ajp/AjpClientChannel$RequestBodyChunk.getLength:()I
      71: invokevirtual #20                 // Method io/undertow/protocols/ajp/AjpClientRequestClientStreamSinkChannel.chunkRequested:(I)V
      74: aload_2
      75: invokeinterface #21,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
      80: aconst_null
      81: areturn
      82: aload_2
      83: invokeinterface #21,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
      88: new           #22                 // class java/lang/RuntimeException
      91: dup
      92: ldc           #23                 // String TODO: unknown frame
      94: invokespecial #24                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/String;)V
      97: athrow

  protected io.undertow.server.protocol.framed.FrameHeaderData parseFrame(java.nio.ByteBuffer) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #9                  // Field ajpParser:Lio/undertow/protocols/ajp/AjpResponseParser;
       4: aload_1
       5: invokevirtual #25                 // Method io/undertow/protocols/ajp/AjpResponseParser.parse:(Ljava/nio/ByteBuffer;)V
       8: aload_0
       9: getfield      #9                  // Field ajpParser:Lio/undertow/protocols/ajp/AjpResponseParser;
      12: invokevirtual #26                 // Method io/undertow/protocols/ajp/AjpResponseParser.isComplete:()Z
      15: ifeq          211
      18: aload_0
      19: getfield      #9                  // Field ajpParser:Lio/undertow/protocols/ajp/AjpResponseParser;
      22: astore_2
      23: aload_2
      24: getfield      #27                 // Field io/undertow/protocols/ajp/AjpResponseParser.prefix:B
      27: iconst_4
      28: if_icmpne     61
      31: new           #10                 // class io/undertow/protocols/ajp/AjpClientChannel$SendHeadersResponse
      34: dup
      35: aload_0
      36: aload_2
      37: getfield      #28                 // Field io/undertow/protocols/ajp/AjpResponseParser.statusCode:I
      40: aload_2
      41: getfield      #29                 // Field io/undertow/protocols/ajp/AjpResponseParser.reasonPhrase:Ljava/lang/String;
      44: aload_2
      45: getfield      #30                 // Field io/undertow/protocols/ajp/AjpResponseParser.headers:Lio/undertow/util/HeaderMap;
      48: invokespecial #31                 // Method io/undertow/protocols/ajp/AjpClientChannel$SendHeadersResponse."<init>":(Lio/undertow/protocols/ajp/AjpClientChannel;ILjava/lang/String;Lio/undertow/util/HeaderMap;)V
      51: astore_3
      52: aload_0
      53: getfield      #9                  // Field ajpParser:Lio/undertow/protocols/ajp/AjpResponseParser;
      56: invokevirtual #32                 // Method io/undertow/protocols/ajp/AjpResponseParser.reset:()V
      59: aload_3
      60: areturn
      61: aload_2
      62: getfield      #27                 // Field io/undertow/protocols/ajp/AjpResponseParser.prefix:B
      65: bipush        6
      67: if_icmpne     92
      70: new           #17                 // class io/undertow/protocols/ajp/AjpClientChannel$RequestBodyChunk
      73: dup
      74: aload_0
      75: aload_2
      76: getfield      #33                 // Field io/undertow/protocols/ajp/AjpResponseParser.readBodyChunkSize:I
      79: invokespecial #34                 // Method io/undertow/protocols/ajp/AjpClientChannel$RequestBodyChunk."<init>":(Lio/undertow/protocols/ajp/AjpClientChannel;I)V
      82: astore_3
      83: aload_0
      84: getfield      #9                  // Field ajpParser:Lio/undertow/protocols/ajp/AjpResponseParser;
      87: invokevirtual #32                 // Method io/undertow/protocols/ajp/AjpResponseParser.reset:()V
      90: aload_3
      91: areturn
      92: aload_2
      93: getfield      #27                 // Field io/undertow/protocols/ajp/AjpResponseParser.prefix:B
      96: iconst_3
      97: if_icmpne     124
     100: new           #35                 // class io/undertow/protocols/ajp/AjpClientChannel$SendBodyChunk
     103: dup
     104: aload_0
     105: aload_2
     106: getfield      #36                 // Field io/undertow/protocols/ajp/AjpResponseParser.currentIntegerPart:I
     109: iconst_1
     110: iadd
     111: invokespecial #37                 // Method io/undertow/protocols/ajp/AjpClientChannel$SendBodyChunk."<init>":(Lio/undertow/protocols/ajp/AjpClientChannel;I)V
     114: astore_3
     115: aload_0
     116: getfield      #9                  // Field ajpParser:Lio/undertow/protocols/ajp/AjpResponseParser;
     119: invokevirtual #32                 // Method io/undertow/protocols/ajp/AjpResponseParser.reset:()V
     122: aload_3
     123: areturn
     124: aload_2
     125: getfield      #27                 // Field io/undertow/protocols/ajp/AjpResponseParser.prefix:B
     128: iconst_5
     129: if_icmpne     179
     132: aload_2
     133: getfield      #36                 // Field io/undertow/protocols/ajp/AjpResponseParser.currentIntegerPart:I
     136: ifeq          143
     139: iconst_1
     140: goto          144
     143: iconst_0
     144: istore_3
     145: iload_3
     146: ifne          159
     149: aload_0
     150: iconst_1
     151: putfield      #38                 // Field lastFrameRecieved:Z
     154: aload_0
     155: iconst_1
     156: putfield      #39                 // Field lastFrameSent:Z
     159: new           #40                 // class io/undertow/protocols/ajp/AjpClientChannel$EndResponse
     162: dup
     163: aload_0
     164: invokespecial #41                 // Method io/undertow/protocols/ajp/AjpClientChannel$EndResponse."<init>":(Lio/undertow/protocols/ajp/AjpClientChannel;)V
     167: astore        4
     169: aload_0
     170: getfield      #9                  // Field ajpParser:Lio/undertow/protocols/ajp/AjpResponseParser;
     173: invokevirtual #32                 // Method io/undertow/protocols/ajp/AjpResponseParser.reset:()V
     176: aload         4
     178: areturn
     179: getstatic     #42                 // Field io/undertow/UndertowLogger.ROOT_LOGGER:Lio/undertow/UndertowLogger;
     182: ldc           #43                 // String UNKOWN FRAME
     184: invokeinterface #44,  2           // InterfaceMethod io/undertow/UndertowLogger.debug:(Ljava/lang/Object;)V
     189: aload_0
     190: getfield      #9                  // Field ajpParser:Lio/undertow/protocols/ajp/AjpResponseParser;
     193: invokevirtual #32                 // Method io/undertow/protocols/ajp/AjpResponseParser.reset:()V
     196: goto          211
     199: astore        5
     201: aload_0
     202: getfield      #9                  // Field ajpParser:Lio/undertow/protocols/ajp/AjpResponseParser;
     205: invokevirtual #32                 // Method io/undertow/protocols/ajp/AjpResponseParser.reset:()V
     208: aload         5
     210: athrow
     211: aconst_null
     212: areturn
    Exception table:
       from    to  target type
          18    52   199   any
          61    83   199   any
          92   115   199   any
         124   169   199   any
         179   189   199   any
         199   201   199   any

  public io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel sendRequest(io.undertow.util.HttpString, java.lang.String, io.undertow.util.HttpString, io.undertow.util.HeaderMap, io.undertow.util.Attachable, org.xnio.ChannelListener<io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel>);
    Code:
       0: aload_0
       1: getfield      #5                  // Field sinkDone:Z
       4: ifeq          14
       7: aload_0
       8: getfield      #6                  // Field sourceDone:Z
      11: ifne          23
      14: getstatic     #45                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      17: invokeinterface #46,  1           // InterfaceMethod io/undertow/UndertowMessages.ajpRequestAlreadyInProgress:()Ljava/lang/IllegalStateException;
      22: athrow
      23: aload_0
      24: iconst_0
      25: putfield      #5                  // Field sinkDone:Z
      28: aload_0
      29: iconst_0
      30: putfield      #6                  // Field sourceDone:Z
      33: new           #47                 // class io/undertow/protocols/ajp/AjpClientRequestClientStreamSinkChannel
      36: dup
      37: aload_0
      38: aload         6
      40: aload         4
      42: aload_2
      43: aload_1
      44: aload_3
      45: aload         5
      47: invokespecial #48                 // Method io/undertow/protocols/ajp/AjpClientRequestClientStreamSinkChannel."<init>":(Lio/undertow/protocols/ajp/AjpClientChannel;Lorg/xnio/ChannelListener;Lio/undertow/util/HeaderMap;Ljava/lang/String;Lio/undertow/util/HttpString;Lio/undertow/util/HttpString;Lio/undertow/util/Attachable;)V
      50: astore        7
      52: aload_0
      53: aload         7
      55: putfield      #18                 // Field sink:Lio/undertow/protocols/ajp/AjpClientRequestClientStreamSinkChannel;
      58: aload_0
      59: aconst_null
      60: putfield      #2                  // Field source:Lio/undertow/protocols/ajp/AjpClientResponseStreamSourceChannel;
      63: aload         7
      65: areturn

  protected boolean isLastFrameReceived();
    Code:
       0: aload_0
       1: getfield      #38                 // Field lastFrameRecieved:Z
       4: ireturn

  protected boolean isLastFrameSent();
    Code:
       0: aload_0
       1: getfield      #39                 // Field lastFrameSent:Z
       4: ireturn

  protected void lastDataRead();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #38                 // Field lastFrameRecieved:Z
       5: aload_0
       6: iconst_1
       7: putfield      #39                 // Field lastFrameSent:Z
      10: aload_0
      11: invokestatic  #49                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
      14: return

  protected void handleBrokenSourceChannel(java.lang.Throwable);
    Code:
       0: iconst_2
       1: anewarray     #50                 // class java/io/Closeable
       4: dup
       5: iconst_0
       6: aload_0
       7: getfield      #2                  // Field source:Lio/undertow/protocols/ajp/AjpClientResponseStreamSourceChannel;
      10: aastore
      11: dup
      12: iconst_1
      13: aload_0
      14: getfield      #18                 // Field sink:Lio/undertow/protocols/ajp/AjpClientRequestClientStreamSinkChannel;
      17: aastore
      18: invokestatic  #51                 // Method org/xnio/IoUtils.safeClose:([Ljava/io/Closeable;)V
      21: getstatic     #52                 // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
      24: new           #53                 // class java/io/IOException
      27: dup
      28: aload_1
      29: invokespecial #54                 // Method java/io/IOException."<init>":(Ljava/lang/Throwable;)V
      32: invokeinterface #55,  2           // InterfaceMethod io/undertow/UndertowLogger.ioException:(Ljava/io/IOException;)V
      37: aload_0
      38: invokestatic  #49                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
      41: return

  protected void handleBrokenSinkChannel(java.lang.Throwable);
    Code:
       0: iconst_2
       1: anewarray     #50                 // class java/io/Closeable
       4: dup
       5: iconst_0
       6: aload_0
       7: getfield      #2                  // Field source:Lio/undertow/protocols/ajp/AjpClientResponseStreamSourceChannel;
      10: aastore
      11: dup
      12: iconst_1
      13: aload_0
      14: getfield      #18                 // Field sink:Lio/undertow/protocols/ajp/AjpClientRequestClientStreamSinkChannel;
      17: aastore
      18: invokestatic  #51                 // Method org/xnio/IoUtils.safeClose:([Ljava/io/Closeable;)V
      21: getstatic     #52                 // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
      24: new           #53                 // class java/io/IOException
      27: dup
      28: aload_1
      29: invokespecial #54                 // Method java/io/IOException."<init>":(Ljava/lang/Throwable;)V
      32: invokeinterface #55,  2           // InterfaceMethod io/undertow/UndertowLogger.ioException:(Ljava/io/IOException;)V
      37: aload_0
      38: invokestatic  #49                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
      41: return

  protected void closeSubChannels();
    Code:
       0: iconst_2
       1: anewarray     #50                 // class java/io/Closeable
       4: dup
       5: iconst_0
       6: aload_0
       7: getfield      #2                  // Field source:Lio/undertow/protocols/ajp/AjpClientResponseStreamSourceChannel;
      10: aastore
      11: dup
      12: iconst_1
      13: aload_0
      14: getfield      #18                 // Field sink:Lio/undertow/protocols/ajp/AjpClientRequestClientStreamSinkChannel;
      17: aastore
      18: invokestatic  #51                 // Method org/xnio/IoUtils.safeClose:([Ljava/io/Closeable;)V
      21: return

  protected org.xnio.OptionMap getSettings();
    Code:
       0: aload_0
       1: invokespecial #56                 // Method io/undertow/server/protocol/framed/AbstractFramedChannel.getSettings:()Lorg/xnio/OptionMap;
       4: areturn

  void sinkDone();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #5                  // Field sinkDone:Z
       5: aload_0
       6: getfield      #6                  // Field sourceDone:Z
       9: ifeq          22
      12: aload_0
      13: aconst_null
      14: putfield      #18                 // Field sink:Lio/undertow/protocols/ajp/AjpClientRequestClientStreamSinkChannel;
      17: aload_0
      18: aconst_null
      19: putfield      #2                  // Field source:Lio/undertow/protocols/ajp/AjpClientResponseStreamSourceChannel;
      22: return

  void sourceDone();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #6                  // Field sourceDone:Z
       5: aload_0
       6: getfield      #5                  // Field sinkDone:Z
       9: ifeq          25
      12: aload_0
      13: aconst_null
      14: putfield      #18                 // Field sink:Lio/undertow/protocols/ajp/AjpClientRequestClientStreamSinkChannel;
      17: aload_0
      18: aconst_null
      19: putfield      #2                  // Field source:Lio/undertow/protocols/ajp/AjpClientResponseStreamSourceChannel;
      22: goto          32
      25: aload_0
      26: getfield      #18                 // Field sink:Lio/undertow/protocols/ajp/AjpClientRequestClientStreamSinkChannel;
      29: invokevirtual #57                 // Method io/undertow/protocols/ajp/AjpClientRequestClientStreamSinkChannel.startDiscard:()V
      32: return

  public boolean isOpen();
    Code:
       0: aload_0
       1: invokespecial #58                 // Method io/undertow/server/protocol/framed/AbstractFramedChannel.isOpen:()Z
       4: ifeq          25
       7: aload_0
       8: getfield      #39                 // Field lastFrameSent:Z
      11: ifne          25
      14: aload_0
      15: getfield      #38                 // Field lastFrameRecieved:Z
      18: ifne          25
      21: iconst_1
      22: goto          26
      25: iconst_0
      26: ireturn

  protected synchronized void recalculateHeldFrames() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #59                 // Method io/undertow/server/protocol/framed/AbstractFramedChannel.recalculateHeldFrames:()V
       4: return

  protected io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel createChannel(io.undertow.server.protocol.framed.FrameHeaderData, io.undertow.connector.PooledByteBuffer) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #60                 // Method createChannel:(Lio/undertow/server/protocol/framed/FrameHeaderData;Lio/undertow/connector/PooledByteBuffer;)Lio/undertow/protocols/ajp/AbstractAjpClientStreamSourceChannel;
       6: areturn

  static io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel access$300(io.undertow.protocols.ajp.AjpClientChannel);
    Code:
       0: aload_0
       1: getfield      #2                  // Field source:Lio/undertow/protocols/ajp/AjpClientResponseStreamSourceChannel;
       4: areturn
}
