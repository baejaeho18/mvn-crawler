Compiled from "Http2StreamSourceChannel.java"
public class io.undertow.protocols.http2.Http2StreamSourceChannel extends io.undertow.protocols.http2.AbstractHttp2StreamSourceChannel implements io.undertow.protocols.http2.Http2Stream {
  private boolean headersEndStream;

  private boolean rst;

  private final io.undertow.util.HeaderMap headers;

  private final int streamId;

  private io.undertow.protocols.http2.Http2HeadersStreamSinkChannel response;

  private int flowControlWindow;

  private org.xnio.ChannelListener<io.undertow.protocols.http2.Http2StreamSourceChannel> completionListener;

  private boolean ignoreForceClose;

  io.undertow.protocols.http2.Http2StreamSourceChannel(io.undertow.protocols.http2.Http2Channel, io.undertow.connector.PooledByteBuffer, long, io.undertow.util.HeaderMap, int);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: lload_3
       4: invokespecial #1                  // Method io/undertow/protocols/http2/AbstractHttp2StreamSourceChannel."<init>":(Lio/undertow/protocols/http2/Http2Channel;Lio/undertow/connector/PooledByteBuffer;J)V
       7: aload_0
       8: iconst_0
       9: putfield      #2                  // Field headersEndStream:Z
      12: aload_0
      13: iconst_0
      14: putfield      #3                  // Field rst:Z
      17: aload_0
      18: iconst_0
      19: putfield      #4                  // Field ignoreForceClose:Z
      22: aload_0
      23: aload         5
      25: putfield      #5                  // Field headers:Lio/undertow/util/HeaderMap;
      28: aload_0
      29: iload         6
      31: putfield      #6                  // Field streamId:I
      34: aload_0
      35: aload_1
      36: invokevirtual #7                  // Method io/undertow/protocols/http2/Http2Channel.getInitialReceiveWindowSize:()I
      39: putfield      #8                  // Field flowControlWindow:I
      42: return

  protected void handleHeaderData(io.undertow.server.protocol.framed.FrameHeaderData);
    Code:
       0: aload_1
       1: checkcast     #9                  // class io/undertow/protocols/http2/Http2FrameHeaderParser
       4: astore_2
       5: aload_0
       6: aload_2
       7: invokevirtual #10                 // Method handleFinalFrame:(Lio/undertow/protocols/http2/Http2FrameHeaderParser;)V
      10: return

  void handleFinalFrame(io.undertow.protocols.http2.Http2FrameHeaderParser);
    Code:
       0: aload_1
       1: astore_2
       2: aload_2
       3: getfield      #11                 // Field io/undertow/protocols/http2/Http2FrameHeaderParser.type:I
       6: ifne          27
       9: aload_2
      10: getfield      #12                 // Field io/undertow/protocols/http2/Http2FrameHeaderParser.flags:I
      13: iconst_1
      14: invokestatic  #14                 // Method org/xnio/Bits.anyAreSet:(II)Z
      17: ifeq          103
      20: aload_0
      21: invokevirtual #15                 // Method lastFrame:()V
      24: goto          103
      27: aload_2
      28: getfield      #11                 // Field io/undertow/protocols/http2/Http2FrameHeaderParser.type:I
      31: iconst_1
      32: if_icmpne     72
      35: aload_2
      36: getfield      #12                 // Field io/undertow/protocols/http2/Http2FrameHeaderParser.flags:I
      39: iconst_1
      40: invokestatic  #16                 // Method org/xnio/Bits.allAreSet:(II)Z
      43: ifeq          103
      46: aload_2
      47: getfield      #12                 // Field io/undertow/protocols/http2/Http2FrameHeaderParser.flags:I
      50: iconst_4
      51: invokestatic  #16                 // Method org/xnio/Bits.allAreSet:(II)Z
      54: ifeq          64
      57: aload_0
      58: invokevirtual #15                 // Method lastFrame:()V
      61: goto          103
      64: aload_0
      65: iconst_1
      66: putfield      #2                  // Field headersEndStream:Z
      69: goto          103
      72: aload_0
      73: getfield      #2                  // Field headersEndStream:Z
      76: ifeq          103
      79: aload_2
      80: getfield      #11                 // Field io/undertow/protocols/http2/Http2FrameHeaderParser.type:I
      83: bipush        9
      85: if_icmpne     103
      88: aload_2
      89: getfield      #12                 // Field io/undertow/protocols/http2/Http2FrameHeaderParser.flags:I
      92: iconst_4
      93: invokestatic  #14                 // Method org/xnio/Bits.anyAreSet:(II)Z
      96: ifeq          103
      99: aload_0
     100: invokevirtual #15                 // Method lastFrame:()V
     103: return

  public io.undertow.protocols.http2.Http2HeadersStreamSinkChannel getResponseChannel();
    Code:
       0: aload_0
       1: getfield      #17                 // Field response:Lio/undertow/protocols/http2/Http2HeadersStreamSinkChannel;
       4: ifnull        12
       7: aload_0
       8: getfield      #17                 // Field response:Lio/undertow/protocols/http2/Http2HeadersStreamSinkChannel;
      11: areturn
      12: aload_0
      13: new           #18                 // class io/undertow/protocols/http2/Http2HeadersStreamSinkChannel
      16: dup
      17: aload_0
      18: invokevirtual #19                 // Method getHttp2Channel:()Lio/undertow/protocols/http2/Http2Channel;
      21: aload_0
      22: getfield      #6                  // Field streamId:I
      25: invokespecial #20                 // Method io/undertow/protocols/http2/Http2HeadersStreamSinkChannel."<init>":(Lio/undertow/protocols/http2/Http2Channel;I)V
      28: putfield      #17                 // Field response:Lio/undertow/protocols/http2/Http2HeadersStreamSinkChannel;
      31: aload_0
      32: invokevirtual #19                 // Method getHttp2Channel:()Lio/undertow/protocols/http2/Http2Channel;
      35: aload_0
      36: getfield      #17                 // Field response:Lio/undertow/protocols/http2/Http2HeadersStreamSinkChannel;
      39: invokevirtual #21                 // Method io/undertow/protocols/http2/Http2Channel.registerStreamSink:(Lio/undertow/protocols/http2/Http2HeadersStreamSinkChannel;)V
      42: aload_0
      43: getfield      #17                 // Field response:Lio/undertow/protocols/http2/Http2HeadersStreamSinkChannel;
      46: areturn

  public int read(java.nio.ByteBuffer) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #22                 // Method io/undertow/protocols/http2/AbstractHttp2StreamSourceChannel.read:(Ljava/nio/ByteBuffer;)I
       5: istore_2
       6: aload_0
       7: iload_2
       8: invokespecial #23                 // Method updateFlowControlWindow:(I)V
      11: iload_2
      12: ireturn

  public long read(java.nio.ByteBuffer[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: invokespecial #24                 // Method io/undertow/protocols/http2/AbstractHttp2StreamSourceChannel.read:([Ljava/nio/ByteBuffer;II)J
       7: lstore        4
       9: aload_0
      10: lload         4
      12: l2i
      13: invokespecial #23                 // Method updateFlowControlWindow:(I)V
      16: lload         4
      18: lreturn

  public long read(java.nio.ByteBuffer[]) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #25                 // Method io/undertow/protocols/http2/AbstractHttp2StreamSourceChannel.read:([Ljava/nio/ByteBuffer;)J
       5: lstore_2
       6: aload_0
       7: lload_2
       8: l2i
       9: invokespecial #23                 // Method updateFlowControlWindow:(I)V
      12: lload_2
      13: lreturn

  public long transferTo(long, java.nio.ByteBuffer, org.xnio.channels.StreamSinkChannel) throws java.io.IOException;
    Code:
       0: aload_0
       1: lload_1
       2: aload_3
       3: aload         4
       5: invokespecial #26                 // Method io/undertow/protocols/http2/AbstractHttp2StreamSourceChannel.transferTo:(JLjava/nio/ByteBuffer;Lorg/xnio/channels/StreamSinkChannel;)J
       8: lstore        5
      10: aload_0
      11: lload         5
      13: l2i
      14: aload_3
      15: invokevirtual #27                 // Method java/nio/ByteBuffer.remaining:()I
      18: iadd
      19: invokespecial #23                 // Method updateFlowControlWindow:(I)V
      22: lload         5
      24: lreturn

  public long transferTo(long, long, java.nio.channels.FileChannel) throws java.io.IOException;
    Code:
       0: aload_0
       1: lload_1
       2: lload_3
       3: aload         5
       5: invokespecial #28                 // Method io/undertow/protocols/http2/AbstractHttp2StreamSourceChannel.transferTo:(JJLjava/nio/channels/FileChannel;)J
       8: lstore        6
      10: aload_0
      11: lload         6
      13: l2i
      14: invokespecial #23                 // Method updateFlowControlWindow:(I)V
      17: lload         6
      19: lreturn

  private void updateFlowControlWindow(int) throws java.io.IOException;
    Code:
       0: iload_1
       1: ifgt          5
       4: return
       5: aload_0
       6: dup
       7: getfield      #8                  // Field flowControlWindow:I
      10: iload_1
      11: isub
      12: putfield      #8                  // Field flowControlWindow:I
      15: aload_0
      16: invokevirtual #19                 // Method getHttp2Channel:()Lio/undertow/protocols/http2/Http2Channel;
      19: astore_2
      20: aload_2
      21: iload_1
      22: invokevirtual #29                 // Method io/undertow/protocols/http2/Http2Channel.updateReceiveFlowControlWindow:(I)V
      25: aload_2
      26: invokevirtual #7                  // Method io/undertow/protocols/http2/Http2Channel.getInitialReceiveWindowSize:()I
      29: istore_3
      30: aload_0
      31: getfield      #8                  // Field flowControlWindow:I
      34: iload_3
      35: iconst_2
      36: idiv
      37: if_icmpge     69
      40: iload_3
      41: aload_0
      42: getfield      #8                  // Field flowControlWindow:I
      45: isub
      46: istore        4
      48: aload_0
      49: dup
      50: getfield      #8                  // Field flowControlWindow:I
      53: iload         4
      55: iadd
      56: putfield      #8                  // Field flowControlWindow:I
      59: aload_2
      60: aload_0
      61: getfield      #6                  // Field streamId:I
      64: iload         4
      66: invokevirtual #30                 // Method io/undertow/protocols/http2/Http2Channel.sendUpdateWindowSize:(II)V
      69: return

  protected void complete() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #31                 // Method io/undertow/protocols/http2/AbstractHttp2StreamSourceChannel.complete:()V
       4: aload_0
       5: getfield      #32                 // Field completionListener:Lorg/xnio/ChannelListener;
       8: ifnull        20
      11: aload_0
      12: aload_0
      13: getfield      #32                 // Field completionListener:Lorg/xnio/ChannelListener;
      16: invokestatic  #33                 // Method org/xnio/ChannelListeners.invokeChannelListener:(Ljava/nio/channels/Channel;Lorg/xnio/ChannelListener;)Z
      19: pop
      20: return

  public io.undertow.util.HeaderMap getHeaders();
    Code:
       0: aload_0
       1: getfield      #5                  // Field headers:Lio/undertow/util/HeaderMap;
       4: areturn

  public org.xnio.ChannelListener<io.undertow.protocols.http2.Http2StreamSourceChannel> getCompletionListener();
    Code:
       0: aload_0
       1: getfield      #32                 // Field completionListener:Lorg/xnio/ChannelListener;
       4: areturn

  public void setCompletionListener(org.xnio.ChannelListener<io.undertow.protocols.http2.Http2StreamSourceChannel>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #32                 // Field completionListener:Lorg/xnio/ChannelListener;
       5: aload_0
       6: invokevirtual #34                 // Method isComplete:()Z
       9: ifeq          18
      12: aload_0
      13: aload_1
      14: invokestatic  #33                 // Method org/xnio/ChannelListeners.invokeChannelListener:(Ljava/nio/channels/Channel;Lorg/xnio/ChannelListener;)Z
      17: pop
      18: return

  void rstStream(int);
    Code:
       0: aload_0
       1: getfield      #3                  // Field rst:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: iconst_1
      10: putfield      #3                  // Field rst:Z
      13: aload_0
      14: invokevirtual #35                 // Method markStreamBroken:()V
      17: return

  protected void channelForciblyClosed();
    Code:
       0: aload_0
       1: getfield      #32                 // Field completionListener:Lorg/xnio/ChannelListener;
       4: ifnull        17
       7: aload_0
       8: getfield      #32                 // Field completionListener:Lorg/xnio/ChannelListener;
      11: aload_0
      12: invokeinterface #36,  2           // InterfaceMethod org/xnio/ChannelListener.handleEvent:(Ljava/nio/channels/Channel;)V
      17: aload_0
      18: getfield      #4                  // Field ignoreForceClose:Z
      21: ifne          37
      24: aload_0
      25: invokevirtual #19                 // Method getHttp2Channel:()Lio/undertow/protocols/http2/Http2Channel;
      28: aload_0
      29: getfield      #6                  // Field streamId:I
      32: bipush        8
      34: invokevirtual #37                 // Method io/undertow/protocols/http2/Http2Channel.sendRstStream:(II)V
      37: aload_0
      38: invokevirtual #35                 // Method markStreamBroken:()V
      41: return

  public void setIgnoreForceClose(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #4                  // Field ignoreForceClose:Z
       5: return

  public boolean isIgnoreForceClose();
    Code:
       0: aload_0
       1: getfield      #4                  // Field ignoreForceClose:Z
       4: ireturn

  public int getStreamId();
    Code:
       0: aload_0
       1: getfield      #6                  // Field streamId:I
       4: ireturn

  boolean isHeadersEndStream();
    Code:
       0: aload_0
       1: getfield      #2                  // Field headersEndStream:Z
       4: ireturn

  public java.lang.String toString();
    Code:
       0: new           #38                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #39                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #40                 // String Http2StreamSourceChannel{headers=
       9: invokevirtual #41                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: getfield      #5                  // Field headers:Lio/undertow/util/HeaderMap;
      16: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      19: bipush        125
      21: invokevirtual #43                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      24: invokevirtual #44                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      27: areturn
}
