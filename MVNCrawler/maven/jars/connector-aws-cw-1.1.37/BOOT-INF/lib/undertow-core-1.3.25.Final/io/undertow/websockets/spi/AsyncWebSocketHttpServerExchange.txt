Compiled from "AsyncWebSocketHttpServerExchange.java"
public class io.undertow.websockets.spi.AsyncWebSocketHttpServerExchange implements io.undertow.websockets.spi.WebSocketHttpExchange {
  private final io.undertow.server.HttpServerExchange exchange;

  private io.undertow.io.Sender sender;

  private final java.util.Set<io.undertow.websockets.core.WebSocketChannel> peerConnections;

  public io.undertow.websockets.spi.AsyncWebSocketHttpServerExchange(io.undertow.server.HttpServerExchange, java.util.Set<io.undertow.websockets.core.WebSocketChannel>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field exchange:Lio/undertow/server/HttpServerExchange;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field peerConnections:Ljava/util/Set;
      14: return

  public <T> void putAttachment(io.undertow.util.AttachmentKey<T>, T);
    Code:
       0: aload_0
       1: getfield      #2                  // Field exchange:Lio/undertow/server/HttpServerExchange;
       4: aload_1
       5: aload_2
       6: invokevirtual #4                  // Method io/undertow/server/HttpServerExchange.putAttachment:(Lio/undertow/util/AttachmentKey;Ljava/lang/Object;)Ljava/lang/Object;
       9: pop
      10: return

  public <T> T getAttachment(io.undertow.util.AttachmentKey<T>);
    Code:
       0: aload_0
       1: getfield      #2                  // Field exchange:Lio/undertow/server/HttpServerExchange;
       4: aload_1
       5: invokevirtual #5                  // Method io/undertow/server/HttpServerExchange.getAttachment:(Lio/undertow/util/AttachmentKey;)Ljava/lang/Object;
       8: areturn

  public java.lang.String getRequestHeader(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #2                  // Field exchange:Lio/undertow/server/HttpServerExchange;
       4: invokevirtual #6                  // Method io/undertow/server/HttpServerExchange.getRequestHeaders:()Lio/undertow/util/HeaderMap;
       7: aload_1
       8: invokestatic  #7                  // Method io/undertow/util/HttpString.tryFromString:(Ljava/lang/String;)Lio/undertow/util/HttpString;
      11: invokevirtual #8                  // Method io/undertow/util/HeaderMap.getFirst:(Lio/undertow/util/HttpString;)Ljava/lang/String;
      14: areturn

  public java.util.Map<java.lang.String, java.util.List<java.lang.String>> getRequestHeaders();
    Code:
       0: new           #9                  // class java/util/TreeMap
       3: dup
       4: getstatic     #10                 // Field java/lang/String.CASE_INSENSITIVE_ORDER:Ljava/util/Comparator;
       7: invokespecial #11                 // Method java/util/TreeMap."<init>":(Ljava/util/Comparator;)V
      10: astore_1
      11: aload_0
      12: getfield      #2                  // Field exchange:Lio/undertow/server/HttpServerExchange;
      15: invokevirtual #6                  // Method io/undertow/server/HttpServerExchange.getRequestHeaders:()Lio/undertow/util/HeaderMap;
      18: invokevirtual #12                 // Method io/undertow/util/HeaderMap.getHeaderNames:()Ljava/util/Collection;
      21: invokeinterface #13,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      26: astore_2
      27: aload_2
      28: invokeinterface #14,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      33: ifeq          78
      36: aload_2
      37: invokeinterface #15,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      42: checkcast     #16                 // class io/undertow/util/HttpString
      45: astore_3
      46: aload_1
      47: aload_3
      48: invokevirtual #17                 // Method io/undertow/util/HttpString.toString:()Ljava/lang/String;
      51: new           #18                 // class java/util/ArrayList
      54: dup
      55: aload_0
      56: getfield      #2                  // Field exchange:Lio/undertow/server/HttpServerExchange;
      59: invokevirtual #6                  // Method io/undertow/server/HttpServerExchange.getRequestHeaders:()Lio/undertow/util/HeaderMap;
      62: aload_3
      63: invokevirtual #19                 // Method io/undertow/util/HeaderMap.get:(Lio/undertow/util/HttpString;)Lio/undertow/util/HeaderValues;
      66: invokespecial #20                 // Method java/util/ArrayList."<init>":(Ljava/util/Collection;)V
      69: invokeinterface #21,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      74: pop
      75: goto          27
      78: aload_1
      79: invokestatic  #22                 // Method java/util/Collections.unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;
      82: areturn

  public java.lang.String getResponseHeader(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #2                  // Field exchange:Lio/undertow/server/HttpServerExchange;
       4: invokevirtual #23                 // Method io/undertow/server/HttpServerExchange.getResponseHeaders:()Lio/undertow/util/HeaderMap;
       7: aload_1
       8: invokestatic  #7                  // Method io/undertow/util/HttpString.tryFromString:(Ljava/lang/String;)Lio/undertow/util/HttpString;
      11: invokevirtual #8                  // Method io/undertow/util/HeaderMap.getFirst:(Lio/undertow/util/HttpString;)Ljava/lang/String;
      14: areturn

  public java.util.Map<java.lang.String, java.util.List<java.lang.String>> getResponseHeaders();
    Code:
       0: new           #24                 // class java/util/HashMap
       3: dup
       4: invokespecial #25                 // Method java/util/HashMap."<init>":()V
       7: astore_1
       8: aload_0
       9: getfield      #2                  // Field exchange:Lio/undertow/server/HttpServerExchange;
      12: invokevirtual #23                 // Method io/undertow/server/HttpServerExchange.getResponseHeaders:()Lio/undertow/util/HeaderMap;
      15: invokevirtual #12                 // Method io/undertow/util/HeaderMap.getHeaderNames:()Ljava/util/Collection;
      18: invokeinterface #13,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      23: astore_2
      24: aload_2
      25: invokeinterface #14,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      30: ifeq          75
      33: aload_2
      34: invokeinterface #15,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      39: checkcast     #16                 // class io/undertow/util/HttpString
      42: astore_3
      43: aload_1
      44: aload_3
      45: invokevirtual #17                 // Method io/undertow/util/HttpString.toString:()Ljava/lang/String;
      48: new           #18                 // class java/util/ArrayList
      51: dup
      52: aload_0
      53: getfield      #2                  // Field exchange:Lio/undertow/server/HttpServerExchange;
      56: invokevirtual #23                 // Method io/undertow/server/HttpServerExchange.getResponseHeaders:()Lio/undertow/util/HeaderMap;
      59: aload_3
      60: invokevirtual #19                 // Method io/undertow/util/HeaderMap.get:(Lio/undertow/util/HttpString;)Lio/undertow/util/HeaderValues;
      63: invokespecial #20                 // Method java/util/ArrayList."<init>":(Ljava/util/Collection;)V
      66: invokeinterface #21,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      71: pop
      72: goto          24
      75: aload_1
      76: invokestatic  #22                 // Method java/util/Collections.unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;
      79: areturn

  public void setResponseHeaders(java.util.Map<java.lang.String, java.util.List<java.lang.String>>);
    Code:
       0: aload_0
       1: getfield      #2                  // Field exchange:Lio/undertow/server/HttpServerExchange;
       4: invokevirtual #6                  // Method io/undertow/server/HttpServerExchange.getRequestHeaders:()Lio/undertow/util/HeaderMap;
       7: astore_2
       8: aload_2
       9: invokevirtual #26                 // Method io/undertow/util/HeaderMap.clear:()Lio/undertow/util/HeaderMap;
      12: pop
      13: aload_1
      14: invokeinterface #27,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      19: invokeinterface #28,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      24: astore_3
      25: aload_3
      26: invokeinterface #14,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      31: ifeq          76
      34: aload_3
      35: invokeinterface #15,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      40: checkcast     #29                 // class java/util/Map$Entry
      43: astore        4
      45: aload_2
      46: aload         4
      48: invokeinterface #30,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      53: checkcast     #31                 // class java/lang/String
      56: invokestatic  #7                  // Method io/undertow/util/HttpString.tryFromString:(Ljava/lang/String;)Lio/undertow/util/HttpString;
      59: aload         4
      61: invokeinterface #32,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      66: checkcast     #33                 // class java/util/Collection
      69: invokevirtual #34                 // Method io/undertow/util/HeaderMap.addAll:(Lio/undertow/util/HttpString;Ljava/util/Collection;)Lio/undertow/util/HeaderMap;
      72: pop
      73: goto          25
      76: return

  public void setResponseHeader(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #2                  // Field exchange:Lio/undertow/server/HttpServerExchange;
       4: invokevirtual #23                 // Method io/undertow/server/HttpServerExchange.getResponseHeaders:()Lio/undertow/util/HeaderMap;
       7: aload_1
       8: invokestatic  #7                  // Method io/undertow/util/HttpString.tryFromString:(Ljava/lang/String;)Lio/undertow/util/HttpString;
      11: aload_2
      12: invokevirtual #35                 // Method io/undertow/util/HeaderMap.put:(Lio/undertow/util/HttpString;Ljava/lang/String;)Lio/undertow/util/HeaderMap;
      15: pop
      16: return

  public void upgradeChannel(io.undertow.server.HttpUpgradeListener);
    Code:
       0: aload_0
       1: getfield      #2                  // Field exchange:Lio/undertow/server/HttpServerExchange;
       4: aload_1
       5: invokevirtual #36                 // Method io/undertow/server/HttpServerExchange.upgradeChannel:(Lio/undertow/server/HttpUpgradeListener;)Lio/undertow/server/HttpServerExchange;
       8: pop
       9: return

  public org.xnio.IoFuture<java.lang.Void> sendData(java.nio.ByteBuffer);
    Code:
       0: aload_0
       1: getfield      #37                 // Field sender:Lio/undertow/io/Sender;
       4: ifnonnull     18
       7: aload_0
       8: aload_0
       9: getfield      #2                  // Field exchange:Lio/undertow/server/HttpServerExchange;
      12: invokevirtual #38                 // Method io/undertow/server/HttpServerExchange.getResponseSender:()Lio/undertow/io/Sender;
      15: putfield      #37                 // Field sender:Lio/undertow/io/Sender;
      18: new           #39                 // class org/xnio/FutureResult
      21: dup
      22: invokespecial #40                 // Method org/xnio/FutureResult."<init>":()V
      25: astore_2
      26: aload_0
      27: getfield      #37                 // Field sender:Lio/undertow/io/Sender;
      30: aload_1
      31: new           #41                 // class io/undertow/websockets/spi/AsyncWebSocketHttpServerExchange$1
      34: dup
      35: aload_0
      36: aload_2
      37: invokespecial #42                 // Method io/undertow/websockets/spi/AsyncWebSocketHttpServerExchange$1."<init>":(Lio/undertow/websockets/spi/AsyncWebSocketHttpServerExchange;Lorg/xnio/FutureResult;)V
      40: invokeinterface #43,  3           // InterfaceMethod io/undertow/io/Sender.send:(Ljava/nio/ByteBuffer;Lio/undertow/io/IoCallback;)V
      45: aload_2
      46: invokevirtual #44                 // Method org/xnio/FutureResult.getIoFuture:()Lorg/xnio/IoFuture;
      49: areturn

  public org.xnio.IoFuture<byte[]> readRequestData();
    Code:
       0: new           #45                 // class java/io/ByteArrayOutputStream
       3: dup
       4: invokespecial #46                 // Method java/io/ByteArrayOutputStream."<init>":()V
       7: astore_1
       8: aload_0
       9: getfield      #2                  // Field exchange:Lio/undertow/server/HttpServerExchange;
      12: invokevirtual #47                 // Method io/undertow/server/HttpServerExchange.getConnection:()Lio/undertow/server/ServerConnection;
      15: invokevirtual #48                 // Method io/undertow/server/ServerConnection.getByteBufferPool:()Lio/undertow/connector/ByteBufferPool;
      18: invokeinterface #49,  1           // InterfaceMethod io/undertow/connector/ByteBufferPool.allocate:()Lio/undertow/connector/PooledByteBuffer;
      23: astore_2
      24: aload_2
      25: invokeinterface #50,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
      30: astore_3
      31: aload_0
      32: getfield      #2                  // Field exchange:Lio/undertow/server/HttpServerExchange;
      35: invokevirtual #51                 // Method io/undertow/server/HttpServerExchange.getRequestChannel:()Lorg/xnio/channels/StreamSourceChannel;
      38: astore        4
      40: aload         4
      42: aload_3
      43: invokeinterface #52,  2           // InterfaceMethod org/xnio/channels/StreamSourceChannel.read:(Ljava/nio/ByteBuffer;)I
      48: istore        5
      50: iload         5
      52: iconst_m1
      53: if_icmpne     68
      56: new           #53                 // class org/xnio/FinishedIoFuture
      59: dup
      60: aload_1
      61: invokevirtual #54                 // Method java/io/ByteArrayOutputStream.toByteArray:()[B
      64: invokespecial #55                 // Method org/xnio/FinishedIoFuture."<init>":(Ljava/lang/Object;)V
      67: areturn
      68: iload         5
      70: ifne          119
      73: new           #39                 // class org/xnio/FutureResult
      76: dup
      77: invokespecial #40                 // Method org/xnio/FutureResult."<init>":()V
      80: astore        6
      82: aload         4
      84: invokeinterface #56,  1           // InterfaceMethod org/xnio/channels/StreamSourceChannel.getReadSetter:()Lorg/xnio/ChannelListener$Setter;
      89: new           #57                 // class io/undertow/websockets/spi/AsyncWebSocketHttpServerExchange$2
      92: dup
      93: aload_0
      94: aload_3
      95: aload         6
      97: aload_1
      98: invokespecial #58                 // Method io/undertow/websockets/spi/AsyncWebSocketHttpServerExchange$2."<init>":(Lio/undertow/websockets/spi/AsyncWebSocketHttpServerExchange;Ljava/nio/ByteBuffer;Lorg/xnio/FutureResult;Ljava/io/ByteArrayOutputStream;)V
     101: invokeinterface #59,  2           // InterfaceMethod org/xnio/ChannelListener$Setter.set:(Lorg/xnio/ChannelListener;)V
     106: aload         4
     108: invokeinterface #60,  1           // InterfaceMethod org/xnio/channels/StreamSourceChannel.resumeReads:()V
     113: aload         6
     115: invokevirtual #44                 // Method org/xnio/FutureResult.getIoFuture:()Lorg/xnio/IoFuture;
     118: areturn
     119: aload_3
     120: invokevirtual #61                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;
     123: pop
     124: aload_3
     125: invokevirtual #62                 // Method java/nio/ByteBuffer.hasRemaining:()Z
     128: ifeq          142
     131: aload_1
     132: aload_3
     133: invokevirtual #63                 // Method java/nio/ByteBuffer.get:()B
     136: invokevirtual #64                 // Method java/io/ByteArrayOutputStream.write:(I)V
     139: goto          124
     142: aload_3
     143: invokevirtual #65                 // Method java/nio/ByteBuffer.clear:()Ljava/nio/Buffer;
     146: pop
     147: goto          40
     150: astore        6
     152: new           #39                 // class org/xnio/FutureResult
     155: dup
     156: invokespecial #40                 // Method org/xnio/FutureResult."<init>":()V
     159: astore        7
     161: aload         7
     163: aload         6
     165: invokevirtual #67                 // Method org/xnio/FutureResult.setException:(Ljava/io/IOException;)Z
     168: pop
     169: aload         7
     171: invokevirtual #44                 // Method org/xnio/FutureResult.getIoFuture:()Lorg/xnio/IoFuture;
     174: areturn
    Exception table:
       from    to  target type
          40    67   150   Class java/io/IOException
          68   118   150   Class java/io/IOException
         119   147   150   Class java/io/IOException

  public void endExchange();
    Code:
       0: aload_0
       1: getfield      #2                  // Field exchange:Lio/undertow/server/HttpServerExchange;
       4: invokevirtual #68                 // Method io/undertow/server/HttpServerExchange.endExchange:()Lio/undertow/server/HttpServerExchange;
       7: pop
       8: return

  public void close();
    Code:
       0: aload_0
       1: getfield      #2                  // Field exchange:Lio/undertow/server/HttpServerExchange;
       4: invokevirtual #68                 // Method io/undertow/server/HttpServerExchange.endExchange:()Lio/undertow/server/HttpServerExchange;
       7: pop
       8: aload_0
       9: getfield      #2                  // Field exchange:Lio/undertow/server/HttpServerExchange;
      12: invokevirtual #47                 // Method io/undertow/server/HttpServerExchange.getConnection:()Lio/undertow/server/ServerConnection;
      15: invokestatic  #69                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
      18: goto          34
      21: astore_1
      22: aload_0
      23: getfield      #2                  // Field exchange:Lio/undertow/server/HttpServerExchange;
      26: invokevirtual #47                 // Method io/undertow/server/HttpServerExchange.getConnection:()Lio/undertow/server/ServerConnection;
      29: invokestatic  #69                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
      32: aload_1
      33: athrow
      34: return
    Exception table:
       from    to  target type
           0     8    21   any

  public java.lang.String getRequestScheme();
    Code:
       0: aload_0
       1: getfield      #2                  // Field exchange:Lio/undertow/server/HttpServerExchange;
       4: invokevirtual #70                 // Method io/undertow/server/HttpServerExchange.getRequestScheme:()Ljava/lang/String;
       7: areturn

  public java.lang.String getRequestURI();
    Code:
       0: aload_0
       1: getfield      #2                  // Field exchange:Lio/undertow/server/HttpServerExchange;
       4: invokevirtual #71                 // Method io/undertow/server/HttpServerExchange.getQueryString:()Ljava/lang/String;
       7: astore_1
       8: aload_1
       9: ifnull        19
      12: aload_1
      13: invokevirtual #72                 // Method java/lang/String.isEmpty:()Z
      16: ifeq          27
      19: aload_0
      20: getfield      #2                  // Field exchange:Lio/undertow/server/HttpServerExchange;
      23: invokevirtual #73                 // Method io/undertow/server/HttpServerExchange.getRequestURI:()Ljava/lang/String;
      26: areturn
      27: new           #74                 // class java/lang/StringBuilder
      30: dup
      31: invokespecial #75                 // Method java/lang/StringBuilder."<init>":()V
      34: aload_0
      35: getfield      #2                  // Field exchange:Lio/undertow/server/HttpServerExchange;
      38: invokevirtual #73                 // Method io/undertow/server/HttpServerExchange.getRequestURI:()Ljava/lang/String;
      41: invokevirtual #76                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      44: ldc           #77                 // String ?
      46: invokevirtual #76                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      49: aload_1
      50: invokevirtual #76                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      53: invokevirtual #78                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      56: areturn

  public io.undertow.connector.ByteBufferPool getBufferPool();
    Code:
       0: aload_0
       1: getfield      #2                  // Field exchange:Lio/undertow/server/HttpServerExchange;
       4: invokevirtual #47                 // Method io/undertow/server/HttpServerExchange.getConnection:()Lio/undertow/server/ServerConnection;
       7: invokevirtual #48                 // Method io/undertow/server/ServerConnection.getByteBufferPool:()Lio/undertow/connector/ByteBufferPool;
      10: areturn

  public java.lang.String getQueryString();
    Code:
       0: aload_0
       1: getfield      #2                  // Field exchange:Lio/undertow/server/HttpServerExchange;
       4: invokevirtual #71                 // Method io/undertow/server/HttpServerExchange.getQueryString:()Ljava/lang/String;
       7: areturn

  public java.lang.Object getSession();
    Code:
       0: aload_0
       1: getfield      #2                  // Field exchange:Lio/undertow/server/HttpServerExchange;
       4: getstatic     #79                 // Field io/undertow/server/session/SessionManager.ATTACHMENT_KEY:Lio/undertow/util/AttachmentKey;
       7: invokevirtual #5                  // Method io/undertow/server/HttpServerExchange.getAttachment:(Lio/undertow/util/AttachmentKey;)Ljava/lang/Object;
      10: checkcast     #80                 // class io/undertow/server/session/SessionManager
      13: astore_1
      14: aload_0
      15: getfield      #2                  // Field exchange:Lio/undertow/server/HttpServerExchange;
      18: getstatic     #81                 // Field io/undertow/server/session/SessionConfig.ATTACHMENT_KEY:Lio/undertow/util/AttachmentKey;
      21: invokevirtual #5                  // Method io/undertow/server/HttpServerExchange.getAttachment:(Lio/undertow/util/AttachmentKey;)Ljava/lang/Object;
      24: checkcast     #82                 // class io/undertow/server/session/SessionConfig
      27: astore_2
      28: aload_1
      29: ifnull        48
      32: aload_2
      33: ifnull        48
      36: aload_1
      37: aload_0
      38: getfield      #2                  // Field exchange:Lio/undertow/server/HttpServerExchange;
      41: aload_2
      42: invokeinterface #83,  3           // InterfaceMethod io/undertow/server/session/SessionManager.getSession:(Lio/undertow/server/HttpServerExchange;Lio/undertow/server/session/SessionConfig;)Lio/undertow/server/session/Session;
      47: areturn
      48: aconst_null
      49: areturn

  public java.util.Map<java.lang.String, java.util.List<java.lang.String>> getRequestParameters();
    Code:
       0: new           #24                 // class java/util/HashMap
       3: dup
       4: invokespecial #25                 // Method java/util/HashMap."<init>":()V
       7: astore_1
       8: aload_0
       9: getfield      #2                  // Field exchange:Lio/undertow/server/HttpServerExchange;
      12: invokevirtual #84                 // Method io/undertow/server/HttpServerExchange.getQueryParameters:()Ljava/util/Map;
      15: invokeinterface #27,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      20: invokeinterface #28,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      25: astore_2
      26: aload_2
      27: invokeinterface #14,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      32: ifeq          77
      35: aload_2
      36: invokeinterface #15,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      41: checkcast     #29                 // class java/util/Map$Entry
      44: astore_3
      45: aload_1
      46: aload_3
      47: invokeinterface #30,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      52: new           #18                 // class java/util/ArrayList
      55: dup
      56: aload_3
      57: invokeinterface #32,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      62: checkcast     #33                 // class java/util/Collection
      65: invokespecial #20                 // Method java/util/ArrayList."<init>":(Ljava/util/Collection;)V
      68: invokeinterface #21,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      73: pop
      74: goto          26
      77: aload_1
      78: areturn

  public java.security.Principal getUserPrincipal();
    Code:
       0: aload_0
       1: getfield      #2                  // Field exchange:Lio/undertow/server/HttpServerExchange;
       4: invokevirtual #85                 // Method io/undertow/server/HttpServerExchange.getSecurityContext:()Lio/undertow/security/api/SecurityContext;
       7: astore_1
       8: aload_1
       9: ifnonnull     14
      12: aconst_null
      13: areturn
      14: aload_1
      15: invokeinterface #86,  1           // InterfaceMethod io/undertow/security/api/SecurityContext.getAuthenticatedAccount:()Lio/undertow/security/idm/Account;
      20: astore_2
      21: aload_2
      22: ifnonnull     27
      25: aconst_null
      26: areturn
      27: aload_2
      28: invokeinterface #87,  1           // InterfaceMethod io/undertow/security/idm/Account.getPrincipal:()Ljava/security/Principal;
      33: areturn

  public boolean isUserInRole(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #2                  // Field exchange:Lio/undertow/server/HttpServerExchange;
       4: invokevirtual #85                 // Method io/undertow/server/HttpServerExchange.getSecurityContext:()Lio/undertow/security/api/SecurityContext;
       7: astore_2
       8: aload_2
       9: ifnonnull     14
      12: iconst_0
      13: ireturn
      14: aload_2
      15: invokeinterface #86,  1           // InterfaceMethod io/undertow/security/api/SecurityContext.getAuthenticatedAccount:()Lio/undertow/security/idm/Account;
      20: astore_3
      21: aload_3
      22: ifnonnull     27
      25: iconst_0
      26: ireturn
      27: aload_3
      28: invokeinterface #88,  1           // InterfaceMethod io/undertow/security/idm/Account.getRoles:()Ljava/util/Set;
      33: aload_1
      34: invokeinterface #89,  2           // InterfaceMethod java/util/Set.contains:(Ljava/lang/Object;)Z
      39: ireturn

  public java.util.Set<io.undertow.websockets.core.WebSocketChannel> getPeerConnections();
    Code:
       0: aload_0
       1: getfield      #3                  // Field peerConnections:Ljava/util/Set;
       4: areturn

  public org.xnio.OptionMap getOptions();
    Code:
       0: aload_0
       1: getfield      #2                  // Field exchange:Lio/undertow/server/HttpServerExchange;
       4: invokevirtual #47                 // Method io/undertow/server/HttpServerExchange.getConnection:()Lio/undertow/server/ServerConnection;
       7: invokevirtual #90                 // Method io/undertow/server/ServerConnection.getUndertowOptions:()Lorg/xnio/OptionMap;
      10: areturn
}
