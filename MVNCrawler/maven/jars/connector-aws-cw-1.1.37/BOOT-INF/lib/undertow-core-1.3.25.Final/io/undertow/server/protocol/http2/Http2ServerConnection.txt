Compiled from "Http2ServerConnection.java"
public class io.undertow.server.protocol.http2.Http2ServerConnection extends io.undertow.server.ServerConnection {
  private static final io.undertow.util.HttpString STATUS;

  private final io.undertow.protocols.http2.Http2Channel channel;

  private final io.undertow.protocols.http2.Http2StreamSourceChannel requestChannel;

  private final io.undertow.protocols.http2.Http2DataStreamSinkChannel responseChannel;

  private final org.xnio.conduits.ConduitStreamSinkChannel conduitStreamSinkChannel;

  private final org.xnio.conduits.ConduitStreamSourceChannel conduitStreamSourceChannel;

  private final org.xnio.conduits.StreamSinkConduit originalSinkConduit;

  private final org.xnio.conduits.StreamSourceConduit originalSourceConduit;

  private final org.xnio.OptionMap undertowOptions;

  private final int bufferSize;

  private io.undertow.server.SSLSessionInfo sessionInfo;

  private final io.undertow.server.HttpHandler rootHandler;

  private io.undertow.server.HttpServerExchange exchange;

  private boolean continueSent;

  private io.undertow.server.XnioBufferPoolAdaptor poolAdaptor;

  public io.undertow.server.protocol.http2.Http2ServerConnection(io.undertow.protocols.http2.Http2Channel, io.undertow.protocols.http2.Http2StreamSourceChannel, org.xnio.OptionMap, int, io.undertow.server.HttpHandler);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method io/undertow/server/ServerConnection."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #6                  // Field continueSent:Z
       9: aload_0
      10: aload_1
      11: putfield      #3                  // Field channel:Lio/undertow/protocols/http2/Http2Channel;
      14: aload_0
      15: aload_2
      16: putfield      #2                  // Field requestChannel:Lio/undertow/protocols/http2/Http2StreamSourceChannel;
      19: aload_0
      20: aload_3
      21: putfield      #7                  // Field undertowOptions:Lorg/xnio/OptionMap;
      24: aload_0
      25: iload         4
      27: putfield      #8                  // Field bufferSize:I
      30: aload_0
      31: aload         5
      33: putfield      #9                  // Field rootHandler:Lio/undertow/server/HttpHandler;
      36: aload_0
      37: aload_2
      38: invokevirtual #10                 // Method io/undertow/protocols/http2/Http2StreamSourceChannel.getResponseChannel:()Lio/undertow/protocols/http2/Http2HeadersStreamSinkChannel;
      41: putfield      #1                  // Field responseChannel:Lio/undertow/protocols/http2/Http2DataStreamSinkChannel;
      44: aload_0
      45: new           #11                 // class org/xnio/conduits/StreamSinkChannelWrappingConduit
      48: dup
      49: aload_0
      50: getfield      #1                  // Field responseChannel:Lio/undertow/protocols/http2/Http2DataStreamSinkChannel;
      53: invokespecial #12                 // Method org/xnio/conduits/StreamSinkChannelWrappingConduit."<init>":(Lorg/xnio/channels/StreamSinkChannel;)V
      56: putfield      #13                 // Field originalSinkConduit:Lorg/xnio/conduits/StreamSinkConduit;
      59: aload_0
      60: new           #14                 // class org/xnio/conduits/StreamSourceChannelWrappingConduit
      63: dup
      64: aload_2
      65: invokespecial #15                 // Method org/xnio/conduits/StreamSourceChannelWrappingConduit."<init>":(Lorg/xnio/channels/StreamSourceChannel;)V
      68: putfield      #16                 // Field originalSourceConduit:Lorg/xnio/conduits/StreamSourceConduit;
      71: aload_0
      72: new           #17                 // class org/xnio/conduits/ConduitStreamSinkChannel
      75: dup
      76: aload_0
      77: getfield      #1                  // Field responseChannel:Lio/undertow/protocols/http2/Http2DataStreamSinkChannel;
      80: aload_0
      81: getfield      #13                 // Field originalSinkConduit:Lorg/xnio/conduits/StreamSinkConduit;
      84: invokespecial #18                 // Method org/xnio/conduits/ConduitStreamSinkChannel."<init>":(Lorg/xnio/channels/Configurable;Lorg/xnio/conduits/StreamSinkConduit;)V
      87: putfield      #19                 // Field conduitStreamSinkChannel:Lorg/xnio/conduits/ConduitStreamSinkChannel;
      90: aload_0
      91: new           #20                 // class org/xnio/conduits/ConduitStreamSourceChannel
      94: dup
      95: aload_1
      96: aload_0
      97: getfield      #16                 // Field originalSourceConduit:Lorg/xnio/conduits/StreamSourceConduit;
     100: invokespecial #21                 // Method org/xnio/conduits/ConduitStreamSourceChannel."<init>":(Lorg/xnio/channels/Configurable;Lorg/xnio/conduits/StreamSourceConduit;)V
     103: putfield      #22                 // Field conduitStreamSourceChannel:Lorg/xnio/conduits/ConduitStreamSourceChannel;
     106: return

  void setExchange(io.undertow.server.HttpServerExchange);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #23                 // Field exchange:Lio/undertow/server/HttpServerExchange;
       5: return

  public io.undertow.server.protocol.http2.Http2ServerConnection(io.undertow.protocols.http2.Http2Channel, io.undertow.protocols.http2.Http2DataStreamSinkChannel, org.xnio.OptionMap, int, io.undertow.server.HttpHandler);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method io/undertow/server/ServerConnection."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #6                  // Field continueSent:Z
       9: aload_0
      10: aload_1
      11: putfield      #3                  // Field channel:Lio/undertow/protocols/http2/Http2Channel;
      14: aload_0
      15: aload         5
      17: putfield      #9                  // Field rootHandler:Lio/undertow/server/HttpHandler;
      20: aload_0
      21: aconst_null
      22: putfield      #2                  // Field requestChannel:Lio/undertow/protocols/http2/Http2StreamSourceChannel;
      25: aload_0
      26: aload_3
      27: putfield      #7                  // Field undertowOptions:Lorg/xnio/OptionMap;
      30: aload_0
      31: iload         4
      33: putfield      #8                  // Field bufferSize:I
      36: aload_0
      37: aload_2
      38: putfield      #1                  // Field responseChannel:Lio/undertow/protocols/http2/Http2DataStreamSinkChannel;
      41: aload_0
      42: new           #11                 // class org/xnio/conduits/StreamSinkChannelWrappingConduit
      45: dup
      46: aload_0
      47: getfield      #1                  // Field responseChannel:Lio/undertow/protocols/http2/Http2DataStreamSinkChannel;
      50: invokespecial #12                 // Method org/xnio/conduits/StreamSinkChannelWrappingConduit."<init>":(Lorg/xnio/channels/StreamSinkChannel;)V
      53: putfield      #13                 // Field originalSinkConduit:Lorg/xnio/conduits/StreamSinkConduit;
      56: aload_0
      57: new           #14                 // class org/xnio/conduits/StreamSourceChannelWrappingConduit
      60: dup
      61: aload_0
      62: getfield      #2                  // Field requestChannel:Lio/undertow/protocols/http2/Http2StreamSourceChannel;
      65: invokespecial #15                 // Method org/xnio/conduits/StreamSourceChannelWrappingConduit."<init>":(Lorg/xnio/channels/StreamSourceChannel;)V
      68: putfield      #16                 // Field originalSourceConduit:Lorg/xnio/conduits/StreamSourceConduit;
      71: aload_0
      72: new           #17                 // class org/xnio/conduits/ConduitStreamSinkChannel
      75: dup
      76: aload_0
      77: getfield      #1                  // Field responseChannel:Lio/undertow/protocols/http2/Http2DataStreamSinkChannel;
      80: aload_0
      81: getfield      #13                 // Field originalSinkConduit:Lorg/xnio/conduits/StreamSinkConduit;
      84: invokespecial #18                 // Method org/xnio/conduits/ConduitStreamSinkChannel."<init>":(Lorg/xnio/channels/Configurable;Lorg/xnio/conduits/StreamSinkConduit;)V
      87: putfield      #19                 // Field conduitStreamSinkChannel:Lorg/xnio/conduits/ConduitStreamSinkChannel;
      90: aload_0
      91: aconst_null
      92: putfield      #22                 // Field conduitStreamSourceChannel:Lorg/xnio/conduits/ConduitStreamSourceChannel;
      95: return

  public org.xnio.Pool<java.nio.ByteBuffer> getBufferPool();
    Code:
       0: aload_0
       1: getfield      #24                 // Field poolAdaptor:Lio/undertow/server/XnioBufferPoolAdaptor;
       4: ifnonnull     22
       7: aload_0
       8: new           #25                 // class io/undertow/server/XnioBufferPoolAdaptor
      11: dup
      12: aload_0
      13: invokevirtual #26                 // Method getByteBufferPool:()Lio/undertow/connector/ByteBufferPool;
      16: invokespecial #27                 // Method io/undertow/server/XnioBufferPoolAdaptor."<init>":(Lio/undertow/connector/ByteBufferPool;)V
      19: putfield      #24                 // Field poolAdaptor:Lio/undertow/server/XnioBufferPoolAdaptor;
      22: aload_0
      23: getfield      #24                 // Field poolAdaptor:Lio/undertow/server/XnioBufferPoolAdaptor;
      26: areturn

  public io.undertow.connector.ByteBufferPool getByteBufferPool();
    Code:
       0: aload_0
       1: getfield      #3                  // Field channel:Lio/undertow/protocols/http2/Http2Channel;
       4: invokevirtual #28                 // Method io/undertow/protocols/http2/Http2Channel.getBufferPool:()Lio/undertow/connector/ByteBufferPool;
       7: areturn

  public org.xnio.XnioWorker getWorker();
    Code:
       0: aload_0
       1: getfield      #3                  // Field channel:Lio/undertow/protocols/http2/Http2Channel;
       4: invokevirtual #29                 // Method io/undertow/protocols/http2/Http2Channel.getWorker:()Lorg/xnio/XnioWorker;
       7: areturn

  public org.xnio.XnioIoThread getIoThread();
    Code:
       0: aload_0
       1: getfield      #3                  // Field channel:Lio/undertow/protocols/http2/Http2Channel;
       4: invokevirtual #30                 // Method io/undertow/protocols/http2/Http2Channel.getIoThread:()Lorg/xnio/XnioIoThread;
       7: areturn

  public io.undertow.server.HttpServerExchange sendOutOfBandResponse(io.undertow.server.HttpServerExchange);
    Code:
       0: aload_1
       1: ifnull        11
       4: aload_1
       5: invokestatic  #31                 // Method io/undertow/server/protocol/http/HttpContinue.requiresContinueResponse:(Lio/undertow/server/HttpServerExchange;)Z
       8: ifne          20
      11: getstatic     #32                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      14: invokeinterface #33,  1           // InterfaceMethod io/undertow/UndertowMessages.outOfBandResponseOnlyAllowedFor100Continue:()Ljava/lang/IllegalArgumentException;
      19: athrow
      20: new           #34                 // class io/undertow/server/HttpServerExchange
      23: dup
      24: aload_0
      25: invokespecial #35                 // Method io/undertow/server/HttpServerExchange."<init>":(Lio/undertow/server/ServerConnection;)V
      28: astore_2
      29: aload_1
      30: invokevirtual #36                 // Method io/undertow/server/HttpServerExchange.getRequestHeaders:()Lio/undertow/util/HeaderMap;
      33: invokevirtual #37                 // Method io/undertow/util/HeaderMap.getHeaderNames:()Ljava/util/Collection;
      36: invokeinterface #38,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      41: astore_3
      42: aload_3
      43: invokeinterface #39,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      48: ifeq          84
      51: aload_3
      52: invokeinterface #40,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      57: checkcast     #41                 // class io/undertow/util/HttpString
      60: astore        4
      62: aload_2
      63: invokevirtual #36                 // Method io/undertow/server/HttpServerExchange.getRequestHeaders:()Lio/undertow/util/HeaderMap;
      66: aload         4
      68: aload_1
      69: invokevirtual #36                 // Method io/undertow/server/HttpServerExchange.getRequestHeaders:()Lio/undertow/util/HeaderMap;
      72: aload         4
      74: invokevirtual #42                 // Method io/undertow/util/HeaderMap.get:(Lio/undertow/util/HttpString;)Lio/undertow/util/HeaderValues;
      77: invokevirtual #43                 // Method io/undertow/util/HeaderMap.putAll:(Lio/undertow/util/HttpString;Ljava/util/Collection;)Lio/undertow/util/HeaderMap;
      80: pop
      81: goto          42
      84: aload_2
      85: aload_1
      86: invokevirtual #44                 // Method io/undertow/server/HttpServerExchange.getProtocol:()Lio/undertow/util/HttpString;
      89: invokevirtual #45                 // Method io/undertow/server/HttpServerExchange.setProtocol:(Lio/undertow/util/HttpString;)Lio/undertow/server/HttpServerExchange;
      92: pop
      93: aload_2
      94: aload_1
      95: invokevirtual #46                 // Method io/undertow/server/HttpServerExchange.getRequestMethod:()Lio/undertow/util/HttpString;
      98: invokevirtual #47                 // Method io/undertow/server/HttpServerExchange.setRequestMethod:(Lio/undertow/util/HttpString;)Lio/undertow/server/HttpServerExchange;
     101: pop
     102: aload_1
     103: aload_1
     104: invokevirtual #48                 // Method io/undertow/server/HttpServerExchange.getRequestURI:()Ljava/lang/String;
     107: aload_1
     108: invokevirtual #49                 // Method io/undertow/server/HttpServerExchange.isHostIncludedInRequestURI:()Z
     111: invokevirtual #50                 // Method io/undertow/server/HttpServerExchange.setRequestURI:(Ljava/lang/String;Z)Lio/undertow/server/HttpServerExchange;
     114: pop
     115: aload_1
     116: aload_1
     117: invokevirtual #51                 // Method io/undertow/server/HttpServerExchange.getRequestPath:()Ljava/lang/String;
     120: invokevirtual #52                 // Method io/undertow/server/HttpServerExchange.setRequestPath:(Ljava/lang/String;)Lio/undertow/server/HttpServerExchange;
     123: pop
     124: aload_1
     125: aload_1
     126: invokevirtual #53                 // Method io/undertow/server/HttpServerExchange.getRelativePath:()Ljava/lang/String;
     129: invokevirtual #54                 // Method io/undertow/server/HttpServerExchange.setRelativePath:(Ljava/lang/String;)Lio/undertow/server/HttpServerExchange;
     132: pop
     133: aload_2
     134: iconst_1
     135: invokevirtual #55                 // Method io/undertow/server/HttpServerExchange.setPersistent:(Z)Lio/undertow/server/HttpServerExchange;
     138: pop
     139: aload_2
     140: invokestatic  #56                 // Method io/undertow/server/Connectors.terminateRequest:(Lio/undertow/server/HttpServerExchange;)V
     143: aload_2
     144: new           #57                 // class io/undertow/server/protocol/http2/Http2ServerConnection$1
     147: dup
     148: aload_0
     149: aload_2
     150: invokespecial #58                 // Method io/undertow/server/protocol/http2/Http2ServerConnection$1."<init>":(Lio/undertow/server/protocol/http2/Http2ServerConnection;Lio/undertow/server/HttpServerExchange;)V
     153: invokevirtual #59                 // Method io/undertow/server/HttpServerExchange.addResponseWrapper:(Lio/undertow/server/ConduitWrapper;)Lio/undertow/server/HttpServerExchange;
     156: pop
     157: aload_0
     158: iconst_1
     159: putfield      #6                  // Field continueSent:Z
     162: aload_2
     163: areturn

  public boolean isContinueResponseSupported();
    Code:
       0: iconst_1
       1: ireturn

  public void terminateRequestChannel(io.undertow.server.HttpServerExchange);
    Code:
       0: aload_1
       1: invokevirtual #36                 // Method io/undertow/server/HttpServerExchange.getRequestHeaders:()Lio/undertow/util/HeaderMap;
       4: invokestatic  #60                 // Method io/undertow/server/protocol/http/HttpContinue.requiresContinueResponse:(Lio/undertow/util/HeaderMap;)Z
       7: ifeq          45
      10: aload_0
      11: getfield      #6                  // Field continueSent:Z
      14: ifne          45
      17: aload_0
      18: getfield      #2                  // Field requestChannel:Lio/undertow/protocols/http2/Http2StreamSourceChannel;
      21: iconst_1
      22: invokevirtual #61                 // Method io/undertow/protocols/http2/Http2StreamSourceChannel.setIgnoreForceClose:(Z)V
      25: aload_0
      26: getfield      #2                  // Field requestChannel:Lio/undertow/protocols/http2/Http2StreamSourceChannel;
      29: invokevirtual #62                 // Method io/undertow/protocols/http2/Http2StreamSourceChannel.close:()V
      32: aload_1
      33: new           #63                 // class io/undertow/server/protocol/http2/Http2ServerConnection$2
      36: dup
      37: aload_0
      38: invokespecial #64                 // Method io/undertow/server/protocol/http2/Http2ServerConnection$2."<init>":(Lio/undertow/server/protocol/http2/Http2ServerConnection;)V
      41: invokevirtual #65                 // Method io/undertow/server/HttpServerExchange.addExchangeCompleteListener:(Lio/undertow/server/ExchangeCompletionListener;)Lio/undertow/server/HttpServerExchange;
      44: pop
      45: return

  public boolean isOpen();
    Code:
       0: aload_0
       1: getfield      #3                  // Field channel:Lio/undertow/protocols/http2/Http2Channel;
       4: invokevirtual #66                 // Method io/undertow/protocols/http2/Http2Channel.isOpen:()Z
       7: ireturn

  public boolean supportsOption(org.xnio.Option<?>);
    Code:
       0: iconst_0
       1: ireturn

  public <T> T getOption(org.xnio.Option<T>) throws java.io.IOException;
    Code:
       0: aconst_null
       1: areturn

  public <T> T setOption(org.xnio.Option<T>, T) throws java.lang.IllegalArgumentException, java.io.IOException;
    Code:
       0: aconst_null
       1: areturn

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field channel:Lio/undertow/protocols/http2/Http2Channel;
       4: invokevirtual #67                 // Method io/undertow/protocols/http2/Http2Channel.close:()V
       7: return

  public java.net.SocketAddress getPeerAddress();
    Code:
       0: aload_0
       1: getfield      #3                  // Field channel:Lio/undertow/protocols/http2/Http2Channel;
       4: invokevirtual #68                 // Method io/undertow/protocols/http2/Http2Channel.getPeerAddress:()Ljava/net/SocketAddress;
       7: areturn

  public <A extends java.net.SocketAddress> A getPeerAddress(java.lang.Class<A>);
    Code:
       0: aload_0
       1: getfield      #3                  // Field channel:Lio/undertow/protocols/http2/Http2Channel;
       4: aload_1
       5: invokevirtual #69                 // Method io/undertow/protocols/http2/Http2Channel.getPeerAddress:(Ljava/lang/Class;)Ljava/net/SocketAddress;
       8: areturn

  public org.xnio.ChannelListener$Setter<? extends org.xnio.channels.ConnectedChannel> getCloseSetter();
    Code:
       0: aload_0
       1: getfield      #3                  // Field channel:Lio/undertow/protocols/http2/Http2Channel;
       4: invokevirtual #70                 // Method io/undertow/protocols/http2/Http2Channel.getCloseSetter:()Lorg/xnio/ChannelListener$Setter;
       7: areturn

  public java.net.SocketAddress getLocalAddress();
    Code:
       0: aload_0
       1: getfield      #3                  // Field channel:Lio/undertow/protocols/http2/Http2Channel;
       4: invokevirtual #71                 // Method io/undertow/protocols/http2/Http2Channel.getLocalAddress:()Ljava/net/SocketAddress;
       7: areturn

  public <A extends java.net.SocketAddress> A getLocalAddress(java.lang.Class<A>);
    Code:
       0: aload_0
       1: getfield      #3                  // Field channel:Lio/undertow/protocols/http2/Http2Channel;
       4: aload_1
       5: invokevirtual #72                 // Method io/undertow/protocols/http2/Http2Channel.getLocalAddress:(Ljava/lang/Class;)Ljava/net/SocketAddress;
       8: areturn

  public org.xnio.OptionMap getUndertowOptions();
    Code:
       0: aload_0
       1: getfield      #7                  // Field undertowOptions:Lorg/xnio/OptionMap;
       4: areturn

  public int getBufferSize();
    Code:
       0: aload_0
       1: getfield      #8                  // Field bufferSize:I
       4: ireturn

  public io.undertow.server.SSLSessionInfo getSslSessionInfo();
    Code:
       0: aload_0
       1: getfield      #73                 // Field sessionInfo:Lio/undertow/server/SSLSessionInfo;
       4: areturn

  public void setSslSessionInfo(io.undertow.server.SSLSessionInfo);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #73                 // Field sessionInfo:Lio/undertow/server/SSLSessionInfo;
       5: return

  public void addCloseListener(io.undertow.server.ServerConnection$CloseListener);
    Code:
       0: aload_0
       1: getfield      #3                  // Field channel:Lio/undertow/protocols/http2/Http2Channel;
       4: new           #74                 // class io/undertow/server/protocol/http2/Http2ServerConnection$3
       7: dup
       8: aload_0
       9: aload_1
      10: invokespecial #75                 // Method io/undertow/server/protocol/http2/Http2ServerConnection$3."<init>":(Lio/undertow/server/protocol/http2/Http2ServerConnection;Lio/undertow/server/ServerConnection$CloseListener;)V
      13: invokevirtual #76                 // Method io/undertow/protocols/http2/Http2Channel.addCloseTask:(Lorg/xnio/ChannelListener;)V
      16: return

  protected org.xnio.StreamConnection upgradeChannel();
    Code:
       0: getstatic     #32                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
       3: invokeinterface #77,  1           // InterfaceMethod io/undertow/UndertowMessages.upgradeNotSupported:()Ljava/lang/IllegalStateException;
       8: athrow

  protected org.xnio.conduits.ConduitStreamSinkChannel getSinkChannel();
    Code:
       0: aload_0
       1: getfield      #19                 // Field conduitStreamSinkChannel:Lorg/xnio/conduits/ConduitStreamSinkChannel;
       4: areturn

  protected org.xnio.conduits.ConduitStreamSourceChannel getSourceChannel();
    Code:
       0: aload_0
       1: getfield      #22                 // Field conduitStreamSourceChannel:Lorg/xnio/conduits/ConduitStreamSourceChannel;
       4: areturn

  protected org.xnio.conduits.StreamSinkConduit getSinkConduit(io.undertow.server.HttpServerExchange, org.xnio.conduits.StreamSinkConduit);
    Code:
       0: aload_0
       1: getfield      #1                  // Field responseChannel:Lio/undertow/protocols/http2/Http2DataStreamSinkChannel;
       4: invokevirtual #78                 // Method io/undertow/protocols/http2/Http2DataStreamSinkChannel.getHeaders:()Lio/undertow/util/HeaderMap;
       7: astore_3
       8: aload_1
       9: invokestatic  #79                 // Method io/undertow/util/DateUtils.addDateHeaderIfRequired:(Lio/undertow/server/HttpServerExchange;)V
      12: aload_3
      13: getstatic     #4                  // Field STATUS:Lio/undertow/util/HttpString;
      16: aload_1
      17: invokevirtual #80                 // Method io/undertow/server/HttpServerExchange.getStatusCode:()I
      20: i2l
      21: invokevirtual #81                 // Method io/undertow/util/HeaderMap.add:(Lio/undertow/util/HttpString;J)Lio/undertow/util/HeaderMap;
      24: pop
      25: aload_1
      26: invokestatic  #82                 // Method io/undertow/server/Connectors.flattenCookies:(Lio/undertow/server/HttpServerExchange;)V
      29: aload_0
      30: getfield      #13                 // Field originalSinkConduit:Lorg/xnio/conduits/StreamSinkConduit;
      33: areturn

  protected boolean isUpgradeSupported();
    Code:
       0: iconst_0
       1: ireturn

  protected boolean isConnectSupported();
    Code:
       0: iconst_0
       1: ireturn

  protected void exchangeComplete(io.undertow.server.HttpServerExchange);
    Code:
       0: return

  protected void setUpgradeListener(io.undertow.server.HttpUpgradeListener);
    Code:
       0: getstatic     #32                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
       3: invokeinterface #77,  1           // InterfaceMethod io/undertow/UndertowMessages.upgradeNotSupported:()Ljava/lang/IllegalStateException;
       8: athrow

  protected void setConnectListener(io.undertow.server.HttpUpgradeListener);
    Code:
       0: return

  protected void maxEntitySizeUpdated(io.undertow.server.HttpServerExchange);
    Code:
       0: aload_0
       1: getfield      #2                  // Field requestChannel:Lio/undertow/protocols/http2/Http2StreamSourceChannel;
       4: ifnull        18
       7: aload_0
       8: getfield      #2                  // Field requestChannel:Lio/undertow/protocols/http2/Http2StreamSourceChannel;
      11: aload_1
      12: invokevirtual #83                 // Method io/undertow/server/HttpServerExchange.getMaxEntitySize:()J
      15: invokevirtual #84                 // Method io/undertow/protocols/http2/Http2StreamSourceChannel.setMaxStreamSize:(J)V
      18: return

  public <T> void addToAttachmentList(io.undertow.util.AttachmentKey<io.undertow.util.AttachmentList<T>>, T);
    Code:
       0: aload_0
       1: getfield      #3                  // Field channel:Lio/undertow/protocols/http2/Http2Channel;
       4: aload_1
       5: aload_2
       6: invokevirtual #85                 // Method io/undertow/protocols/http2/Http2Channel.addToAttachmentList:(Lio/undertow/util/AttachmentKey;Ljava/lang/Object;)V
       9: return

  public <T> T removeAttachment(io.undertow.util.AttachmentKey<T>);
    Code:
       0: aload_0
       1: getfield      #3                  // Field channel:Lio/undertow/protocols/http2/Http2Channel;
       4: aload_1
       5: invokevirtual #86                 // Method io/undertow/protocols/http2/Http2Channel.removeAttachment:(Lio/undertow/util/AttachmentKey;)Ljava/lang/Object;
       8: areturn

  public <T> T putAttachment(io.undertow.util.AttachmentKey<T>, T);
    Code:
       0: aload_0
       1: getfield      #3                  // Field channel:Lio/undertow/protocols/http2/Http2Channel;
       4: aload_1
       5: aload_2
       6: invokevirtual #87                 // Method io/undertow/protocols/http2/Http2Channel.putAttachment:(Lio/undertow/util/AttachmentKey;Ljava/lang/Object;)Ljava/lang/Object;
       9: areturn

  public <T> java.util.List<T> getAttachmentList(io.undertow.util.AttachmentKey<? extends java.util.List<T>>);
    Code:
       0: aload_0
       1: getfield      #3                  // Field channel:Lio/undertow/protocols/http2/Http2Channel;
       4: aload_1
       5: invokevirtual #88                 // Method io/undertow/protocols/http2/Http2Channel.getAttachmentList:(Lio/undertow/util/AttachmentKey;)Ljava/util/List;
       8: areturn

  public <T> T getAttachment(io.undertow.util.AttachmentKey<T>);
    Code:
       0: aload_0
       1: getfield      #3                  // Field channel:Lio/undertow/protocols/http2/Http2Channel;
       4: aload_1
       5: invokevirtual #89                 // Method io/undertow/protocols/http2/Http2Channel.getAttachment:(Lio/undertow/util/AttachmentKey;)Ljava/lang/Object;
       8: areturn

  public boolean isPushSupported();
    Code:
       0: aload_0
       1: getfield      #3                  // Field channel:Lio/undertow/protocols/http2/Http2Channel;
       4: invokevirtual #90                 // Method io/undertow/protocols/http2/Http2Channel.isPushEnabled:()Z
       7: ifeq          30
      10: aload_0
      11: getfield      #23                 // Field exchange:Lio/undertow/server/HttpServerExchange;
      14: invokevirtual #36                 // Method io/undertow/server/HttpServerExchange.getRequestHeaders:()Lio/undertow/util/HeaderMap;
      17: getstatic     #91                 // Field io/undertow/util/Headers.X_DISABLE_PUSH:Lio/undertow/util/HttpString;
      20: invokevirtual #92                 // Method io/undertow/util/HeaderMap.contains:(Lio/undertow/util/HttpString;)Z
      23: ifne          30
      26: iconst_1
      27: goto          31
      30: iconst_0
      31: ireturn

  public boolean pushResource(java.lang.String, io.undertow.util.HttpString, io.undertow.util.HeaderMap);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload_0
       5: getfield      #9                  // Field rootHandler:Lio/undertow/server/HttpHandler;
       8: invokevirtual #93                 // Method pushResource:(Ljava/lang/String;Lio/undertow/util/HttpString;Lio/undertow/util/HeaderMap;Lio/undertow/server/HttpHandler;)Z
      11: ireturn

  public boolean pushResource(java.lang.String, io.undertow.util.HttpString, io.undertow.util.HeaderMap, io.undertow.server.HttpHandler);
    Code:
       0: new           #94                 // class io/undertow/util/HeaderMap
       3: dup
       4: invokespecial #95                 // Method io/undertow/util/HeaderMap."<init>":()V
       7: astore        5
       9: aload_3
      10: getstatic     #96                 // Field io/undertow/server/protocol/http2/Http2ReceiveListener.METHOD:Lio/undertow/util/HttpString;
      13: aload_2
      14: invokevirtual #97                 // Method io/undertow/util/HttpString.toString:()Ljava/lang/String;
      17: invokevirtual #98                 // Method io/undertow/util/HeaderMap.put:(Lio/undertow/util/HttpString;Ljava/lang/String;)Lio/undertow/util/HeaderMap;
      20: pop
      21: aload_3
      22: getstatic     #99                 // Field io/undertow/server/protocol/http2/Http2ReceiveListener.PATH:Lio/undertow/util/HttpString;
      25: aload_1
      26: invokevirtual #100                // Method java/lang/String.toString:()Ljava/lang/String;
      29: invokevirtual #98                 // Method io/undertow/util/HeaderMap.put:(Lio/undertow/util/HttpString;Ljava/lang/String;)Lio/undertow/util/HeaderMap;
      32: pop
      33: aload_3
      34: getstatic     #101                // Field io/undertow/server/protocol/http2/Http2ReceiveListener.AUTHORITY:Lio/undertow/util/HttpString;
      37: aload_0
      38: getfield      #23                 // Field exchange:Lio/undertow/server/HttpServerExchange;
      41: invokevirtual #102                // Method io/undertow/server/HttpServerExchange.getHostAndPort:()Ljava/lang/String;
      44: invokevirtual #98                 // Method io/undertow/util/HeaderMap.put:(Lio/undertow/util/HttpString;Ljava/lang/String;)Lio/undertow/util/HeaderMap;
      47: pop
      48: aload_3
      49: getstatic     #103                // Field io/undertow/server/protocol/http2/Http2ReceiveListener.SCHEME:Lio/undertow/util/HttpString;
      52: aload_0
      53: getfield      #23                 // Field exchange:Lio/undertow/server/HttpServerExchange;
      56: invokevirtual #104                // Method io/undertow/server/HttpServerExchange.getRequestScheme:()Ljava/lang/String;
      59: invokevirtual #98                 // Method io/undertow/util/HeaderMap.put:(Lio/undertow/util/HttpString;Ljava/lang/String;)Lio/undertow/util/HeaderMap;
      62: pop
      63: aload_0
      64: getfield      #3                  // Field channel:Lio/undertow/protocols/http2/Http2Channel;
      67: aload_0
      68: getfield      #1                  // Field responseChannel:Lio/undertow/protocols/http2/Http2DataStreamSinkChannel;
      71: invokevirtual #105                // Method io/undertow/protocols/http2/Http2DataStreamSinkChannel.getStreamId:()I
      74: aload_3
      75: aload         5
      77: invokevirtual #106                // Method io/undertow/protocols/http2/Http2Channel.sendPushPromise:(ILio/undertow/util/HeaderMap;Lio/undertow/util/HeaderMap;)Lio/undertow/protocols/http2/Http2HeadersStreamSinkChannel;
      80: astore        6
      82: new           #107                // class io/undertow/server/protocol/http2/Http2ServerConnection
      85: dup
      86: aload_0
      87: getfield      #3                  // Field channel:Lio/undertow/protocols/http2/Http2Channel;
      90: aload         6
      92: aload_0
      93: invokevirtual #108                // Method getUndertowOptions:()Lorg/xnio/OptionMap;
      96: aload_0
      97: invokevirtual #109                // Method getBufferSize:()I
     100: aload_0
     101: getfield      #9                  // Field rootHandler:Lio/undertow/server/HttpHandler;
     104: invokespecial #110                // Method "<init>":(Lio/undertow/protocols/http2/Http2Channel;Lio/undertow/protocols/http2/Http2DataStreamSinkChannel;Lorg/xnio/OptionMap;ILio/undertow/server/HttpHandler;)V
     107: astore        7
     109: new           #34                 // class io/undertow/server/HttpServerExchange
     112: dup
     113: aload         7
     115: aload_3
     116: aload         5
     118: aload_0
     119: invokevirtual #108                // Method getUndertowOptions:()Lorg/xnio/OptionMap;
     122: getstatic     #111                // Field io/undertow/UndertowOptions.MAX_ENTITY_SIZE:Lorg/xnio/Option;
     125: ldc2_w        #113                // long -1l
     128: invokevirtual #115                // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;J)J
     131: invokespecial #116                // Method io/undertow/server/HttpServerExchange."<init>":(Lio/undertow/server/ServerConnection;Lio/undertow/util/HeaderMap;Lio/undertow/util/HeaderMap;J)V
     134: astore        8
     136: aload         7
     138: aload         8
     140: invokevirtual #117                // Method setExchange:(Lio/undertow/server/HttpServerExchange;)V
     143: aload         8
     145: aload_2
     146: invokevirtual #47                 // Method io/undertow/server/HttpServerExchange.setRequestMethod:(Lio/undertow/util/HttpString;)Lio/undertow/server/HttpServerExchange;
     149: pop
     150: aload         8
     152: getstatic     #118                // Field io/undertow/util/Protocols.HTTP_1_1:Lio/undertow/util/HttpString;
     155: invokevirtual #45                 // Method io/undertow/server/HttpServerExchange.setProtocol:(Lio/undertow/util/HttpString;)Lio/undertow/server/HttpServerExchange;
     158: pop
     159: aload         8
     161: aload_0
     162: getfield      #23                 // Field exchange:Lio/undertow/server/HttpServerExchange;
     165: invokevirtual #104                // Method io/undertow/server/HttpServerExchange.getRequestScheme:()Ljava/lang/String;
     168: invokevirtual #119                // Method io/undertow/server/HttpServerExchange.setRequestScheme:(Ljava/lang/String;)Lio/undertow/server/HttpServerExchange;
     171: pop
     172: aload         8
     174: aload_1
     175: aload_0
     176: invokevirtual #108                // Method getUndertowOptions:()Lorg/xnio/OptionMap;
     179: getstatic     #120                // Field io/undertow/UndertowOptions.URL_CHARSET:Lorg/xnio/Option;
     182: getstatic     #121                // Field java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;
     185: invokevirtual #122                // Method java/nio/charset/Charset.name:()Ljava/lang/String;
     188: invokevirtual #123                // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;Ljava/lang/Object;)Ljava/lang/Object;
     191: checkcast     #124                // class java/lang/String
     194: aload_0
     195: invokevirtual #108                // Method getUndertowOptions:()Lorg/xnio/OptionMap;
     198: getstatic     #125                // Field io/undertow/UndertowOptions.DECODE_URL:Lorg/xnio/Option;
     201: iconst_1
     202: invokevirtual #126                // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;Z)Z
     205: aload_0
     206: invokevirtual #108                // Method getUndertowOptions:()Lorg/xnio/OptionMap;
     209: getstatic     #127                // Field io/undertow/UndertowOptions.ALLOW_ENCODED_SLASH:Lorg/xnio/Option;
     212: iconst_0
     213: invokevirtual #126                // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;Z)Z
     216: new           #128                // class java/lang/StringBuilder
     219: dup
     220: invokespecial #129                // Method java/lang/StringBuilder."<init>":()V
     223: invokestatic  #130                // Method io/undertow/server/Connectors.setExchangeRequestPath:(Lio/undertow/server/HttpServerExchange;Ljava/lang/String;Ljava/lang/String;ZZLjava/lang/StringBuilder;)V
     226: aload         8
     228: invokestatic  #56                 // Method io/undertow/server/Connectors.terminateRequest:(Lio/undertow/server/HttpServerExchange;)V
     231: aload_0
     232: invokevirtual #131                // Method getIoThread:()Lorg/xnio/XnioIoThread;
     235: new           #132                // class io/undertow/server/protocol/http2/Http2ServerConnection$4
     238: dup
     239: aload_0
     240: aload         4
     242: aload         8
     244: invokespecial #133                // Method io/undertow/server/protocol/http2/Http2ServerConnection$4."<init>":(Lio/undertow/server/protocol/http2/Http2ServerConnection;Lio/undertow/server/HttpHandler;Lio/undertow/server/HttpServerExchange;)V
     247: invokevirtual #134                // Method org/xnio/XnioIoThread.execute:(Ljava/lang/Runnable;)V
     250: iconst_1
     251: ireturn
     252: astore        6
     254: getstatic     #136                // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
     257: aload         6
     259: invokeinterface #137,  2          // InterfaceMethod io/undertow/UndertowLogger.ioException:(Ljava/io/IOException;)V
     264: iconst_0
     265: ireturn
    Exception table:
       from    to  target type
           9   251   252   Class java/io/IOException

  public java.lang.String getTransportProtocol();
    Code:
       0: aload_0
       1: getfield      #3                  // Field channel:Lio/undertow/protocols/http2/Http2Channel;
       4: invokevirtual #138                // Method io/undertow/protocols/http2/Http2Channel.getProtocol:()Ljava/lang/String;
       7: areturn

  static io.undertow.util.HttpString access$000();
    Code:
       0: getstatic     #4                  // Field STATUS:Lio/undertow/util/HttpString;
       3: areturn

  static io.undertow.protocols.http2.Http2Channel access$100(io.undertow.server.protocol.http2.Http2ServerConnection);
    Code:
       0: aload_0
       1: getfield      #3                  // Field channel:Lio/undertow/protocols/http2/Http2Channel;
       4: areturn

  static io.undertow.protocols.http2.Http2StreamSourceChannel access$200(io.undertow.server.protocol.http2.Http2ServerConnection);
    Code:
       0: aload_0
       1: getfield      #2                  // Field requestChannel:Lio/undertow/protocols/http2/Http2StreamSourceChannel;
       4: areturn

  static io.undertow.protocols.http2.Http2DataStreamSinkChannel access$300(io.undertow.server.protocol.http2.Http2ServerConnection);
    Code:
       0: aload_0
       1: getfield      #1                  // Field responseChannel:Lio/undertow/protocols/http2/Http2DataStreamSinkChannel;
       4: areturn

  static {};
    Code:
       0: new           #41                 // class io/undertow/util/HttpString
       3: dup
       4: ldc           #139                // String :status
       6: invokespecial #140                // Method io/undertow/util/HttpString."<init>":(Ljava/lang/String;)V
       9: putstatic     #4                  // Field STATUS:Lio/undertow/util/HttpString;
      12: return
}
