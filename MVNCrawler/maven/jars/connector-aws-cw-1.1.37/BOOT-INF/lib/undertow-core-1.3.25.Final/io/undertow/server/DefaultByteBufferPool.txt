Compiled from "DefaultByteBufferPool.java"
public class io.undertow.server.DefaultByteBufferPool implements io.undertow.connector.ByteBufferPool {
  private final java.lang.ThreadLocal<io.undertow.server.DefaultByteBufferPool$ThreadLocalData> threadLocalCache;

  private final java.util.List<java.lang.ref.WeakReference<io.undertow.server.DefaultByteBufferPool$ThreadLocalData>> threadLocalDataList;

  private final java.util.concurrent.ConcurrentLinkedQueue<java.nio.ByteBuffer> queue;

  private final boolean direct;

  private final int bufferSize;

  private final int maximumPoolSize;

  private final int threadLocalCacheSize;

  private final int leakDectionPercent;

  private int count;

  private volatile int currentQueueLength;

  private static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<io.undertow.server.DefaultByteBufferPool> currentQueueLengthUpdater;

  private volatile int reclaimedThreadLocals;

  private static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<io.undertow.server.DefaultByteBufferPool> reclaimedThreadLocalsUpdater;

  private volatile boolean closed;

  public io.undertow.server.DefaultByteBufferPool(boolean, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: iconst_m1
       4: bipush        12
       6: iconst_0
       7: invokespecial #5                  // Method "<init>":(ZIIII)V
      10: return

  public io.undertow.server.DefaultByteBufferPool(boolean, int, int, int, int);
    Code:
       0: aload_0
       1: invokespecial #6                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #7                  // class java/lang/ThreadLocal
       8: dup
       9: invokespecial #8                  // Method java/lang/ThreadLocal."<init>":()V
      12: putfield      #9                  // Field threadLocalCache:Ljava/lang/ThreadLocal;
      15: aload_0
      16: new           #10                 // class java/util/ArrayList
      19: dup
      20: invokespecial #11                 // Method java/util/ArrayList."<init>":()V
      23: invokestatic  #12                 // Method java/util/Collections.synchronizedList:(Ljava/util/List;)Ljava/util/List;
      26: putfield      #13                 // Field threadLocalDataList:Ljava/util/List;
      29: aload_0
      30: new           #14                 // class java/util/concurrent/ConcurrentLinkedQueue
      33: dup
      34: invokespecial #15                 // Method java/util/concurrent/ConcurrentLinkedQueue."<init>":()V
      37: putfield      #16                 // Field queue:Ljava/util/concurrent/ConcurrentLinkedQueue;
      40: aload_0
      41: iconst_0
      42: putfield      #17                 // Field currentQueueLength:I
      45: aload_0
      46: iconst_0
      47: putfield      #18                 // Field reclaimedThreadLocals:I
      50: aload_0
      51: iload_1
      52: putfield      #19                 // Field direct:Z
      55: aload_0
      56: iload_2
      57: putfield      #20                 // Field bufferSize:I
      60: aload_0
      61: iload_3
      62: putfield      #21                 // Field maximumPoolSize:I
      65: aload_0
      66: iload         4
      68: putfield      #3                  // Field threadLocalCacheSize:I
      71: aload_0
      72: iload         5
      74: putfield      #22                 // Field leakDectionPercent:I
      77: return

  public io.undertow.server.DefaultByteBufferPool(boolean, int, int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: iload_3
       4: iload         4
       6: iconst_0
       7: invokespecial #5                  // Method "<init>":(ZIIII)V
      10: return

  public int getBufferSize();
    Code:
       0: aload_0
       1: getfield      #20                 // Field bufferSize:I
       4: ireturn

  public io.undertow.connector.PooledByteBuffer allocate();
    Code:
       0: aload_0
       1: getfield      #23                 // Field closed:Z
       4: ifeq          16
       7: getstatic     #24                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      10: invokeinterface #25,  1           // InterfaceMethod io/undertow/UndertowMessages.poolIsClosed:()Ljava/lang/IllegalStateException;
      15: athrow
      16: aconst_null
      17: astore_1
      18: aconst_null
      19: astore_2
      20: aload_0
      21: getfield      #3                  // Field threadLocalCacheSize:I
      24: ifle          143
      27: aload_0
      28: getfield      #9                  // Field threadLocalCache:Ljava/lang/ThreadLocal;
      31: invokevirtual #26                 // Method java/lang/ThreadLocal.get:()Ljava/lang/Object;
      34: checkcast     #27                 // class io/undertow/server/DefaultByteBufferPool$ThreadLocalData
      37: astore_2
      38: aload_2
      39: ifnull        68
      42: aload_2
      43: getfield      #28                 // Field io/undertow/server/DefaultByteBufferPool$ThreadLocalData.buffers:Ljava/util/ArrayDeque;
      46: invokevirtual #29                 // Method java/util/ArrayDeque.poll:()Ljava/lang/Object;
      49: checkcast     #30                 // class java/nio/ByteBuffer
      52: astore_1
      53: aload_1
      54: ifnull        143
      57: getstatic     #31                 // Field currentQueueLengthUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      60: aload_0
      61: invokevirtual #32                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.decrementAndGet:(Ljava/lang/Object;)I
      64: pop
      65: goto          143
      68: new           #27                 // class io/undertow/server/DefaultByteBufferPool$ThreadLocalData
      71: dup
      72: aload_0
      73: aconst_null
      74: invokespecial #33                 // Method io/undertow/server/DefaultByteBufferPool$ThreadLocalData."<init>":(Lio/undertow/server/DefaultByteBufferPool;Lio/undertow/server/DefaultByteBufferPool$1;)V
      77: astore_2
      78: aload_0
      79: getfield      #13                 // Field threadLocalDataList:Ljava/util/List;
      82: dup
      83: astore_3
      84: monitorenter
      85: aload_0
      86: getfield      #23                 // Field closed:Z
      89: ifeq          101
      92: getstatic     #24                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      95: invokeinterface #25,  1           // InterfaceMethod io/undertow/UndertowMessages.poolIsClosed:()Ljava/lang/IllegalStateException;
     100: athrow
     101: aload_0
     102: invokespecial #34                 // Method cleanupThreadLocalData:()V
     105: aload_0
     106: getfield      #13                 // Field threadLocalDataList:Ljava/util/List;
     109: new           #35                 // class java/lang/ref/WeakReference
     112: dup
     113: aload_2
     114: invokespecial #36                 // Method java/lang/ref/WeakReference."<init>":(Ljava/lang/Object;)V
     117: invokeinterface #37,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     122: pop
     123: aload_0
     124: getfield      #9                  // Field threadLocalCache:Ljava/lang/ThreadLocal;
     127: aload_2
     128: invokevirtual #38                 // Method java/lang/ThreadLocal.set:(Ljava/lang/Object;)V
     131: aload_3
     132: monitorexit
     133: goto          143
     136: astore        4
     138: aload_3
     139: monitorexit
     140: aload         4
     142: athrow
     143: aload_1
     144: ifnonnull     158
     147: aload_0
     148: getfield      #16                 // Field queue:Ljava/util/concurrent/ConcurrentLinkedQueue;
     151: invokevirtual #39                 // Method java/util/concurrent/ConcurrentLinkedQueue.poll:()Ljava/lang/Object;
     154: checkcast     #30                 // class java/nio/ByteBuffer
     157: astore_1
     158: aload_1
     159: ifnonnull     188
     162: aload_0
     163: getfield      #19                 // Field direct:Z
     166: ifeq          180
     169: aload_0
     170: getfield      #20                 // Field bufferSize:I
     173: invokestatic  #40                 // Method java/nio/ByteBuffer.allocateDirect:(I)Ljava/nio/ByteBuffer;
     176: astore_1
     177: goto          188
     180: aload_0
     181: getfield      #20                 // Field bufferSize:I
     184: invokestatic  #41                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;
     187: astore_1
     188: aload_2
     189: ifnull        202
     192: aload_2
     193: dup
     194: getfield      #42                 // Field io/undertow/server/DefaultByteBufferPool$ThreadLocalData.allocationDepth:I
     197: iconst_1
     198: iadd
     199: putfield      #42                 // Field io/undertow/server/DefaultByteBufferPool$ThreadLocalData.allocationDepth:I
     202: aload_1
     203: invokevirtual #43                 // Method java/nio/ByteBuffer.clear:()Ljava/nio/Buffer;
     206: pop
     207: new           #44                 // class io/undertow/server/DefaultByteBufferPool$DefaultPooledBuffer
     210: dup
     211: aload_0
     212: aload_1
     213: aload_0
     214: getfield      #22                 // Field leakDectionPercent:I
     217: ifne          224
     220: iconst_0
     221: goto          250
     224: aload_0
     225: dup
     226: getfield      #45                 // Field count:I
     229: iconst_1
     230: iadd
     231: dup_x1
     232: putfield      #45                 // Field count:I
     235: bipush        100
     237: irem
     238: aload_0
     239: getfield      #22                 // Field leakDectionPercent:I
     242: if_icmple     249
     245: iconst_1
     246: goto          250
     249: iconst_0
     250: invokespecial #46                 // Method io/undertow/server/DefaultByteBufferPool$DefaultPooledBuffer."<init>":(Lio/undertow/server/DefaultByteBufferPool;Ljava/nio/ByteBuffer;Z)V
     253: areturn
    Exception table:
       from    to  target type
          85   133   136   any
         136   140   136   any

  private void cleanupThreadLocalData();
    Code:
       0: aload_0
       1: getfield      #13                 // Field threadLocalDataList:Ljava/util/List;
       4: invokeinterface #47,  1           // InterfaceMethod java/util/List.size:()I
       9: istore_1
      10: aload_0
      11: getfield      #18                 // Field reclaimedThreadLocals:I
      14: iload_1
      15: iconst_4
      16: idiv
      17: if_icmple     113
      20: iconst_0
      21: istore_2
      22: iconst_0
      23: istore_3
      24: iload_3
      25: iload_1
      26: if_icmpge     74
      29: aload_0
      30: getfield      #13                 // Field threadLocalDataList:Ljava/util/List;
      33: iload_3
      34: invokeinterface #48,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      39: checkcast     #35                 // class java/lang/ref/WeakReference
      42: astore        4
      44: aload         4
      46: invokevirtual #49                 // Method java/lang/ref/WeakReference.get:()Ljava/lang/Object;
      49: ifnull        68
      52: aload_0
      53: getfield      #13                 // Field threadLocalDataList:Ljava/util/List;
      56: iload_2
      57: iinc          2, 1
      60: aload         4
      62: invokeinterface #50,  3           // InterfaceMethod java/util/List.set:(ILjava/lang/Object;)Ljava/lang/Object;
      67: pop
      68: iinc          3, 1
      71: goto          24
      74: iload_1
      75: iconst_1
      76: isub
      77: istore_3
      78: iload_3
      79: iload_2
      80: if_icmplt     100
      83: aload_0
      84: getfield      #13                 // Field threadLocalDataList:Ljava/util/List;
      87: iload_3
      88: invokeinterface #51,  2           // InterfaceMethod java/util/List.remove:(I)Ljava/lang/Object;
      93: pop
      94: iinc          3, -1
      97: goto          78
     100: getstatic     #2                  // Field reclaimedThreadLocalsUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     103: aload_0
     104: iconst_m1
     105: iload_1
     106: iload_2
     107: isub
     108: imul
     109: invokevirtual #52                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.addAndGet:(Ljava/lang/Object;I)I
     112: pop
     113: return

  private void freeInternal(java.nio.ByteBuffer);
    Code:
       0: aload_0
       1: getfield      #23                 // Field closed:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: getfield      #9                  // Field threadLocalCache:Ljava/lang/ThreadLocal;
      12: invokevirtual #26                 // Method java/lang/ThreadLocal.get:()Ljava/lang/Object;
      15: checkcast     #27                 // class io/undertow/server/DefaultByteBufferPool$ThreadLocalData
      18: astore_2
      19: aload_2
      20: ifnull        64
      23: aload_2
      24: getfield      #42                 // Field io/undertow/server/DefaultByteBufferPool$ThreadLocalData.allocationDepth:I
      27: ifle          64
      30: aload_2
      31: dup
      32: getfield      #42                 // Field io/undertow/server/DefaultByteBufferPool$ThreadLocalData.allocationDepth:I
      35: iconst_1
      36: isub
      37: putfield      #42                 // Field io/undertow/server/DefaultByteBufferPool$ThreadLocalData.allocationDepth:I
      40: aload_2
      41: getfield      #28                 // Field io/undertow/server/DefaultByteBufferPool$ThreadLocalData.buffers:Ljava/util/ArrayDeque;
      44: invokevirtual #53                 // Method java/util/ArrayDeque.size:()I
      47: aload_0
      48: getfield      #3                  // Field threadLocalCacheSize:I
      51: if_icmpge     64
      54: aload_2
      55: getfield      #28                 // Field io/undertow/server/DefaultByteBufferPool$ThreadLocalData.buffers:Ljava/util/ArrayDeque;
      58: aload_1
      59: invokevirtual #54                 // Method java/util/ArrayDeque.add:(Ljava/lang/Object;)Z
      62: pop
      63: return
      64: aload_0
      65: aload_1
      66: invokespecial #1                  // Method queueIfUnderMax:(Ljava/nio/ByteBuffer;)V
      69: return

  private void queueIfUnderMax(java.nio.ByteBuffer);
    Code:
       0: aload_0
       1: getfield      #17                 // Field currentQueueLength:I
       4: istore_2
       5: iload_2
       6: aload_0
       7: getfield      #21                 // Field maximumPoolSize:I
      10: if_icmple     14
      13: return
      14: getstatic     #31                 // Field currentQueueLengthUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      17: aload_0
      18: iload_2
      19: aload_0
      20: getfield      #17                 // Field currentQueueLength:I
      23: iconst_1
      24: iadd
      25: invokevirtual #55                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      28: ifeq          0
      31: aload_0
      32: getfield      #16                 // Field queue:Ljava/util/concurrent/ConcurrentLinkedQueue;
      35: aload_1
      36: invokevirtual #56                 // Method java/util/concurrent/ConcurrentLinkedQueue.add:(Ljava/lang/Object;)Z
      39: pop
      40: return

  public void close();
    Code:
       0: aload_0
       1: getfield      #23                 // Field closed:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: iconst_1
      10: putfield      #23                 // Field closed:Z
      13: aload_0
      14: getfield      #16                 // Field queue:Ljava/util/concurrent/ConcurrentLinkedQueue;
      17: invokevirtual #57                 // Method java/util/concurrent/ConcurrentLinkedQueue.clear:()V
      20: aload_0
      21: getfield      #13                 // Field threadLocalDataList:Ljava/util/List;
      24: dup
      25: astore_1
      26: monitorenter
      27: aload_0
      28: getfield      #13                 // Field threadLocalDataList:Ljava/util/List;
      31: invokeinterface #58,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      36: astore_2
      37: aload_2
      38: invokeinterface #59,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      43: ifeq          85
      46: aload_2
      47: invokeinterface #60,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      52: checkcast     #35                 // class java/lang/ref/WeakReference
      55: astore_3
      56: aload_3
      57: invokevirtual #49                 // Method java/lang/ref/WeakReference.get:()Ljava/lang/Object;
      60: checkcast     #27                 // class io/undertow/server/DefaultByteBufferPool$ThreadLocalData
      63: astore        4
      65: aload         4
      67: ifnull        78
      70: aload         4
      72: getfield      #28                 // Field io/undertow/server/DefaultByteBufferPool$ThreadLocalData.buffers:Ljava/util/ArrayDeque;
      75: invokevirtual #61                 // Method java/util/ArrayDeque.clear:()V
      78: aload_3
      79: invokevirtual #62                 // Method java/lang/ref/WeakReference.clear:()V
      82: goto          37
      85: aload_0
      86: getfield      #13                 // Field threadLocalDataList:Ljava/util/List;
      89: invokeinterface #63,  1           // InterfaceMethod java/util/List.clear:()V
      94: aload_1
      95: monitorexit
      96: goto          106
      99: astore        5
     101: aload_1
     102: monitorexit
     103: aload         5
     105: athrow
     106: return
    Exception table:
       from    to  target type
          27    96    99   any
          99   103    99   any

  protected void finalize() throws java.lang.Throwable;
    Code:
       0: aload_0
       1: invokespecial #64                 // Method java/lang/Object.finalize:()V
       4: aload_0
       5: invokevirtual #65                 // Method close:()V
       8: return

  static void access$200(io.undertow.server.DefaultByteBufferPool, java.nio.ByteBuffer);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #4                  // Method freeInternal:(Ljava/nio/ByteBuffer;)V
       5: return

  static int access$300(io.undertow.server.DefaultByteBufferPool);
    Code:
       0: aload_0
       1: getfield      #3                  // Field threadLocalCacheSize:I
       4: ireturn

  static java.util.concurrent.atomic.AtomicIntegerFieldUpdater access$400();
    Code:
       0: getstatic     #2                  // Field reclaimedThreadLocalsUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: areturn

  static void access$500(io.undertow.server.DefaultByteBufferPool, java.nio.ByteBuffer);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method queueIfUnderMax:(Ljava/nio/ByteBuffer;)V
       5: return

  static {};
    Code:
       0: ldc           #66                 // class io/undertow/server/DefaultByteBufferPool
       2: ldc           #67                 // String currentQueueLength
       4: invokestatic  #68                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       7: putstatic     #31                 // Field currentQueueLengthUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: ldc           #66                 // class io/undertow/server/DefaultByteBufferPool
      12: ldc           #69                 // String reclaimedThreadLocals
      14: invokestatic  #68                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      17: putstatic     #2                  // Field reclaimedThreadLocalsUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      20: return
}
