Compiled from "BinaryOutputStream.java"
public final class io.undertow.websockets.core.BinaryOutputStream extends java.io.OutputStream {
  private final io.undertow.websockets.core.StreamSinkFrameChannel sender;

  private boolean closed;

  public io.undertow.websockets.core.BinaryOutputStream(io.undertow.websockets.core.StreamSinkFrameChannel);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/io/OutputStream."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field sender:Lio/undertow/websockets/core/StreamSinkFrameChannel;
       9: return

  public void write(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #3                  // Method checkClosed:()V
       4: aload_0
       5: getfield      #2                  // Field sender:Lio/undertow/websockets/core/StreamSinkFrameChannel;
       8: aload_1
       9: iload_2
      10: iload_3
      11: invokestatic  #4                  // Method java/nio/ByteBuffer.wrap:([BII)Ljava/nio/ByteBuffer;
      14: invokestatic  #5                  // Method org/xnio/channels/Channels.writeBlocking:(Ljava/nio/channels/WritableByteChannel;Ljava/nio/ByteBuffer;)I
      17: pop
      18: return

  public void write(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #3                  // Method checkClosed:()V
       4: aload_0
       5: getfield      #2                  // Field sender:Lio/undertow/websockets/core/StreamSinkFrameChannel;
       8: iconst_1
       9: newarray       byte
      11: dup
      12: iconst_0
      13: iload_1
      14: i2b
      15: bastore
      16: invokestatic  #6                  // Method java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;
      19: invokestatic  #5                  // Method org/xnio/channels/Channels.writeBlocking:(Ljava/nio/channels/WritableByteChannel;Ljava/nio/ByteBuffer;)I
      22: pop
      23: return

  public void flush() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #3                  // Method checkClosed:()V
       4: aload_0
       5: getfield      #2                  // Field sender:Lio/undertow/websockets/core/StreamSinkFrameChannel;
       8: invokevirtual #7                  // Method io/undertow/websockets/core/StreamSinkFrameChannel.flush:()Z
      11: pop
      12: return

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #8                  // Field closed:Z
       4: ifne          26
       7: aload_0
       8: iconst_1
       9: putfield      #8                  // Field closed:Z
      12: aload_0
      13: getfield      #2                  // Field sender:Lio/undertow/websockets/core/StreamSinkFrameChannel;
      16: invokevirtual #9                  // Method io/undertow/websockets/core/StreamSinkFrameChannel.shutdownWrites:()V
      19: aload_0
      20: getfield      #2                  // Field sender:Lio/undertow/websockets/core/StreamSinkFrameChannel;
      23: invokestatic  #10                 // Method org/xnio/channels/Channels.flushBlocking:(Lorg/xnio/channels/SuspendableWriteChannel;)V
      26: return

  private void checkClosed() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #8                  // Field closed:Z
       4: ifeq          16
       7: getstatic     #11                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      10: invokeinterface #12,  1           // InterfaceMethod io/undertow/UndertowMessages.streamIsClosed:()Ljava/io/IOException;
      15: athrow
      16: return
}
