Compiled from "StuckThreadDetectionHandler.java"
public class io.undertow.server.handlers.StuckThreadDetectionHandler implements io.undertow.server.HttpHandler {
  public static final int DEFAULT_THRESHOLD;

  private final java.util.concurrent.atomic.AtomicInteger stuckCount;

  private final int threshold;

  private final java.util.concurrent.ConcurrentHashMap<java.lang.Long, io.undertow.server.handlers.StuckThreadDetectionHandler$MonitoredThread> activeThreads;

  private final java.util.Queue<io.undertow.server.handlers.StuckThreadDetectionHandler$CompletedStuckThread> completedStuckThreadsQueue;

  private final io.undertow.server.HttpHandler next;

  private final java.lang.Runnable stuckThreadTask;

  private volatile org.xnio.XnioExecutor$Key timerKey;

  public io.undertow.server.handlers.StuckThreadDetectionHandler(io.undertow.server.HttpHandler);
    Code:
       0: aload_0
       1: sipush        600
       4: aload_1
       5: invokespecial #10                 // Method "<init>":(ILio/undertow/server/HttpHandler;)V
       8: return

  public io.undertow.server.handlers.StuckThreadDetectionHandler(int, io.undertow.server.HttpHandler);
    Code:
       0: aload_0
       1: invokespecial #11                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #12                 // class java/util/concurrent/atomic/AtomicInteger
       8: dup
       9: iconst_0
      10: invokespecial #13                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
      13: putfield      #5                  // Field stuckCount:Ljava/util/concurrent/atomic/AtomicInteger;
      16: aload_0
      17: new           #14                 // class java/util/concurrent/ConcurrentHashMap
      20: dup
      21: invokespecial #15                 // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      24: putfield      #6                  // Field activeThreads:Ljava/util/concurrent/ConcurrentHashMap;
      27: aload_0
      28: new           #16                 // class java/util/concurrent/ConcurrentLinkedQueue
      31: dup
      32: invokespecial #17                 // Method java/util/concurrent/ConcurrentLinkedQueue."<init>":()V
      35: putfield      #3                  // Field completedStuckThreadsQueue:Ljava/util/Queue;
      38: aload_0
      39: new           #18                 // class io/undertow/server/handlers/StuckThreadDetectionHandler$1
      42: dup
      43: aload_0
      44: invokespecial #19                 // Method io/undertow/server/handlers/StuckThreadDetectionHandler$1."<init>":(Lio/undertow/server/handlers/StuckThreadDetectionHandler;)V
      47: putfield      #1                  // Field stuckThreadTask:Ljava/lang/Runnable;
      50: aload_0
      51: iload_1
      52: putfield      #7                  // Field threshold:I
      55: aload_0
      56: aload_2
      57: putfield      #20                 // Field next:Lio/undertow/server/HttpHandler;
      60: return

  public int getThreshold();
    Code:
       0: aload_0
       1: getfield      #7                  // Field threshold:I
       4: ireturn

  private void notifyStuckThreadDetected(io.undertow.server.handlers.StuckThreadDetectionHandler$MonitoredThread, long, int);
    Code:
       0: new           #21                 // class java/lang/Throwable
       3: dup
       4: invokespecial #22                 // Method java/lang/Throwable."<init>":()V
       7: astore        5
       9: aload         5
      11: aload_1
      12: invokevirtual #23                 // Method io/undertow/server/handlers/StuckThreadDetectionHandler$MonitoredThread.getThread:()Ljava/lang/Thread;
      15: invokevirtual #24                 // Method java/lang/Thread.getStackTrace:()[Ljava/lang/StackTraceElement;
      18: invokevirtual #25                 // Method java/lang/Throwable.setStackTrace:([Ljava/lang/StackTraceElement;)V
      21: getstatic     #26                 // Field io/undertow/UndertowLogger.REQUEST_LOGGER:Lio/undertow/UndertowLogger;
      24: aload_1
      25: invokevirtual #23                 // Method io/undertow/server/handlers/StuckThreadDetectionHandler$MonitoredThread.getThread:()Ljava/lang/Thread;
      28: invokevirtual #27                 // Method java/lang/Thread.getName:()Ljava/lang/String;
      31: aload_1
      32: invokevirtual #23                 // Method io/undertow/server/handlers/StuckThreadDetectionHandler$MonitoredThread.getThread:()Ljava/lang/Thread;
      35: invokevirtual #28                 // Method java/lang/Thread.getId:()J
      38: lload_2
      39: aload_1
      40: invokevirtual #29                 // Method io/undertow/server/handlers/StuckThreadDetectionHandler$MonitoredThread.getStartTime:()Ljava/util/Date;
      43: aload_1
      44: invokevirtual #30                 // Method io/undertow/server/handlers/StuckThreadDetectionHandler$MonitoredThread.getRequestUri:()Ljava/lang/String;
      47: aload_0
      48: getfield      #7                  // Field threshold:I
      51: iload         4
      53: aload         5
      55: invokeinterface #31,  11          // InterfaceMethod io/undertow/UndertowLogger.stuckThreadDetected:(Ljava/lang/String;JJLjava/util/Date;Ljava/lang/String;IILjava/lang/Throwable;)V
      60: return

  private void notifyStuckThreadCompleted(io.undertow.server.handlers.StuckThreadDetectionHandler$CompletedStuckThread, int);
    Code:
       0: getstatic     #26                 // Field io/undertow/UndertowLogger.REQUEST_LOGGER:Lio/undertow/UndertowLogger;
       3: aload_1
       4: invokevirtual #32                 // Method io/undertow/server/handlers/StuckThreadDetectionHandler$CompletedStuckThread.getName:()Ljava/lang/String;
       7: aload_1
       8: invokevirtual #33                 // Method io/undertow/server/handlers/StuckThreadDetectionHandler$CompletedStuckThread.getId:()J
      11: aload_1
      12: invokevirtual #34                 // Method io/undertow/server/handlers/StuckThreadDetectionHandler$CompletedStuckThread.getTotalActiveTime:()J
      15: iload_2
      16: invokeinterface #35,  7           // InterfaceMethod io/undertow/UndertowLogger.stuckThreadCompleted:(Ljava/lang/String;JJI)V
      21: return

  public void handleRequest(io.undertow.server.HttpServerExchange) throws java.lang.Exception;
    Code:
       0: invokestatic  #36                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
       3: invokevirtual #28                 // Method java/lang/Thread.getId:()J
       6: invokestatic  #37                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
       9: astore_2
      10: new           #38                 // class io/undertow/server/handlers/StuckThreadDetectionHandler$MonitoredThread
      13: dup
      14: invokestatic  #36                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      17: new           #39                 // class java/lang/StringBuilder
      20: dup
      21: invokespecial #40                 // Method java/lang/StringBuilder."<init>":()V
      24: aload_1
      25: invokevirtual #41                 // Method io/undertow/server/HttpServerExchange.getRequestURI:()Ljava/lang/String;
      28: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      31: aload_1
      32: invokevirtual #43                 // Method io/undertow/server/HttpServerExchange.getQueryString:()Ljava/lang/String;
      35: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      38: invokevirtual #44                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      41: invokespecial #45                 // Method io/undertow/server/handlers/StuckThreadDetectionHandler$MonitoredThread."<init>":(Ljava/lang/Thread;Ljava/lang/String;)V
      44: astore_3
      45: aload_0
      46: getfield      #6                  // Field activeThreads:Ljava/util/concurrent/ConcurrentHashMap;
      49: aload_2
      50: aload_3
      51: invokevirtual #46                 // Method java/util/concurrent/ConcurrentHashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      54: pop
      55: aload_0
      56: getfield      #8                  // Field timerKey:Lorg/xnio/XnioExecutor$Key;
      59: ifnonnull     107
      62: aload_0
      63: dup
      64: astore        4
      66: monitorenter
      67: aload_0
      68: getfield      #8                  // Field timerKey:Lorg/xnio/XnioExecutor$Key;
      71: ifnonnull     93
      74: aload_0
      75: aload_1
      76: invokevirtual #47                 // Method io/undertow/server/HttpServerExchange.getIoThread:()Lorg/xnio/XnioIoThread;
      79: aload_0
      80: getfield      #1                  // Field stuckThreadTask:Ljava/lang/Runnable;
      83: lconst_1
      84: getstatic     #48                 // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
      87: invokevirtual #49                 // Method org/xnio/XnioIoThread.executeAfter:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lorg/xnio/XnioExecutor$Key;
      90: putfield      #8                  // Field timerKey:Lorg/xnio/XnioExecutor$Key;
      93: aload         4
      95: monitorexit
      96: goto          107
      99: astore        5
     101: aload         4
     103: monitorexit
     104: aload         5
     106: athrow
     107: aload_0
     108: getfield      #20                 // Field next:Lio/undertow/server/HttpHandler;
     111: aload_1
     112: invokeinterface #50,  2           // InterfaceMethod io/undertow/server/HttpHandler.handleRequest:(Lio/undertow/server/HttpServerExchange;)V
     117: aload_0
     118: getfield      #6                  // Field activeThreads:Ljava/util/concurrent/ConcurrentHashMap;
     121: aload_2
     122: invokevirtual #51                 // Method java/util/concurrent/ConcurrentHashMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
     125: pop
     126: aload_3
     127: invokevirtual #52                 // Method io/undertow/server/handlers/StuckThreadDetectionHandler$MonitoredThread.markAsDone:()Lio/undertow/server/handlers/StuckThreadDetectionHandler$MonitoredThreadState;
     130: getstatic     #53                 // Field io/undertow/server/handlers/StuckThreadDetectionHandler$MonitoredThreadState.STUCK:Lio/undertow/server/handlers/StuckThreadDetectionHandler$MonitoredThreadState;
     133: if_acmpne     213
     136: aload_0
     137: getfield      #3                  // Field completedStuckThreadsQueue:Ljava/util/Queue;
     140: new           #54                 // class io/undertow/server/handlers/StuckThreadDetectionHandler$CompletedStuckThread
     143: dup
     144: aload_3
     145: invokevirtual #23                 // Method io/undertow/server/handlers/StuckThreadDetectionHandler$MonitoredThread.getThread:()Ljava/lang/Thread;
     148: aload_3
     149: invokevirtual #55                 // Method io/undertow/server/handlers/StuckThreadDetectionHandler$MonitoredThread.getActiveTimeInMillis:()J
     152: invokespecial #56                 // Method io/undertow/server/handlers/StuckThreadDetectionHandler$CompletedStuckThread."<init>":(Ljava/lang/Thread;J)V
     155: invokeinterface #57,  2           // InterfaceMethod java/util/Queue.add:(Ljava/lang/Object;)Z
     160: pop
     161: goto          213
     164: astore        6
     166: aload_0
     167: getfield      #6                  // Field activeThreads:Ljava/util/concurrent/ConcurrentHashMap;
     170: aload_2
     171: invokevirtual #51                 // Method java/util/concurrent/ConcurrentHashMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
     174: pop
     175: aload_3
     176: invokevirtual #52                 // Method io/undertow/server/handlers/StuckThreadDetectionHandler$MonitoredThread.markAsDone:()Lio/undertow/server/handlers/StuckThreadDetectionHandler$MonitoredThreadState;
     179: getstatic     #53                 // Field io/undertow/server/handlers/StuckThreadDetectionHandler$MonitoredThreadState.STUCK:Lio/undertow/server/handlers/StuckThreadDetectionHandler$MonitoredThreadState;
     182: if_acmpne     210
     185: aload_0
     186: getfield      #3                  // Field completedStuckThreadsQueue:Ljava/util/Queue;
     189: new           #54                 // class io/undertow/server/handlers/StuckThreadDetectionHandler$CompletedStuckThread
     192: dup
     193: aload_3
     194: invokevirtual #23                 // Method io/undertow/server/handlers/StuckThreadDetectionHandler$MonitoredThread.getThread:()Ljava/lang/Thread;
     197: aload_3
     198: invokevirtual #55                 // Method io/undertow/server/handlers/StuckThreadDetectionHandler$MonitoredThread.getActiveTimeInMillis:()J
     201: invokespecial #56                 // Method io/undertow/server/handlers/StuckThreadDetectionHandler$CompletedStuckThread."<init>":(Ljava/lang/Thread;J)V
     204: invokeinterface #57,  2           // InterfaceMethod java/util/Queue.add:(Ljava/lang/Object;)Z
     209: pop
     210: aload         6
     212: athrow
     213: return
    Exception table:
       from    to  target type
          67    96    99   any
          99   104    99   any
         107   117   164   any
         164   166   164   any

  public long[] getStuckThreadIds();
    Code:
       0: new           #58                 // class java/util/ArrayList
       3: dup
       4: invokespecial #59                 // Method java/util/ArrayList."<init>":()V
       7: astore_1
       8: aload_0
       9: getfield      #6                  // Field activeThreads:Ljava/util/concurrent/ConcurrentHashMap;
      12: invokevirtual #60                 // Method java/util/concurrent/ConcurrentHashMap.values:()Ljava/util/Collection;
      15: invokeinterface #61,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      20: astore_2
      21: aload_2
      22: invokeinterface #62,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      27: ifeq          67
      30: aload_2
      31: invokeinterface #63,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      36: checkcast     #38                 // class io/undertow/server/handlers/StuckThreadDetectionHandler$MonitoredThread
      39: astore_3
      40: aload_3
      41: invokevirtual #64                 // Method io/undertow/server/handlers/StuckThreadDetectionHandler$MonitoredThread.isMarkedAsStuck:()Z
      44: ifeq          64
      47: aload_1
      48: aload_3
      49: invokevirtual #23                 // Method io/undertow/server/handlers/StuckThreadDetectionHandler$MonitoredThread.getThread:()Ljava/lang/Thread;
      52: invokevirtual #28                 // Method java/lang/Thread.getId:()J
      55: invokestatic  #37                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      58: invokeinterface #65,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      63: pop
      64: goto          21
      67: aload_1
      68: invokeinterface #66,  1           // InterfaceMethod java/util/List.size:()I
      73: newarray       long
      75: astore_2
      76: iconst_0
      77: istore_3
      78: iload_3
      79: aload_2
      80: arraylength
      81: if_icmpge     106
      84: aload_2
      85: iload_3
      86: aload_1
      87: iload_3
      88: invokeinterface #67,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      93: checkcast     #68                 // class java/lang/Long
      96: invokevirtual #69                 // Method java/lang/Long.longValue:()J
      99: lastore
     100: iinc          3, 1
     103: goto          78
     106: aload_2
     107: areturn

  static org.xnio.XnioExecutor$Key access$002(io.undertow.server.handlers.StuckThreadDetectionHandler, org.xnio.XnioExecutor$Key);
    Code:
       0: aload_0
       1: aload_1
       2: dup_x1
       3: putfield      #8                  // Field timerKey:Lorg/xnio/XnioExecutor$Key;
       6: areturn

  static int access$100(io.undertow.server.handlers.StuckThreadDetectionHandler);
    Code:
       0: aload_0
       1: getfield      #7                  // Field threshold:I
       4: ireturn

  static java.util.concurrent.ConcurrentHashMap access$200(io.undertow.server.handlers.StuckThreadDetectionHandler);
    Code:
       0: aload_0
       1: getfield      #6                  // Field activeThreads:Ljava/util/concurrent/ConcurrentHashMap;
       4: areturn

  static java.util.concurrent.atomic.AtomicInteger access$300(io.undertow.server.handlers.StuckThreadDetectionHandler);
    Code:
       0: aload_0
       1: getfield      #5                  // Field stuckCount:Ljava/util/concurrent/atomic/AtomicInteger;
       4: areturn

  static void access$400(io.undertow.server.handlers.StuckThreadDetectionHandler, io.undertow.server.handlers.StuckThreadDetectionHandler$MonitoredThread, long, int);
    Code:
       0: aload_0
       1: aload_1
       2: lload_2
       3: iload         4
       5: invokespecial #4                  // Method notifyStuckThreadDetected:(Lio/undertow/server/handlers/StuckThreadDetectionHandler$MonitoredThread;JI)V
       8: return

  static java.util.Queue access$500(io.undertow.server.handlers.StuckThreadDetectionHandler);
    Code:
       0: aload_0
       1: getfield      #3                  // Field completedStuckThreadsQueue:Ljava/util/Queue;
       4: areturn

  static void access$600(io.undertow.server.handlers.StuckThreadDetectionHandler, io.undertow.server.handlers.StuckThreadDetectionHandler$CompletedStuckThread, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokespecial #2                  // Method notifyStuckThreadCompleted:(Lio/undertow/server/handlers/StuckThreadDetectionHandler$CompletedStuckThread;I)V
       6: return

  static java.lang.Runnable access$700(io.undertow.server.handlers.StuckThreadDetectionHandler);
    Code:
       0: aload_0
       1: getfield      #1                  // Field stuckThreadTask:Ljava/lang/Runnable;
       4: areturn
}
