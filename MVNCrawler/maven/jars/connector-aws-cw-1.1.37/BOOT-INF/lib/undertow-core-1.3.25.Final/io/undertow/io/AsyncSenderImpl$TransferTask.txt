Compiled from "AsyncSenderImpl.java"
public class io.undertow.io.AsyncSenderImpl$TransferTask implements java.lang.Runnable, org.xnio.ChannelListener<org.xnio.channels.StreamSinkChannel> {
  final io.undertow.io.AsyncSenderImpl this$0;

  public io.undertow.io.AsyncSenderImpl$TransferTask(io.undertow.io.AsyncSenderImpl);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lio/undertow/io/AsyncSenderImpl;
       5: aload_0
       6: invokespecial #2                  // Method java/lang/Object."<init>":()V
       9: return

  public boolean run(boolean);
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lio/undertow/io/AsyncSenderImpl;
       4: invokestatic  #3                  // Method io/undertow/io/AsyncSenderImpl.access$000:(Lio/undertow/io/AsyncSenderImpl;)Ljava/nio/channels/FileChannel;
       7: astore_2
       8: aload_2
       9: invokevirtual #4                  // Method java/nio/channels/FileChannel.position:()J
      12: lstore_3
      13: aload_2
      14: invokevirtual #5                  // Method java/nio/channels/FileChannel.size:()J
      17: lstore        5
      19: aload_0
      20: getfield      #1                  // Field this$0:Lio/undertow/io/AsyncSenderImpl;
      23: invokestatic  #6                  // Method io/undertow/io/AsyncSenderImpl.access$100:(Lio/undertow/io/AsyncSenderImpl;)Lorg/xnio/channels/StreamSinkChannel;
      26: astore        7
      28: aload         7
      30: ifnonnull     130
      33: aload_0
      34: getfield      #1                  // Field this$0:Lio/undertow/io/AsyncSenderImpl;
      37: invokestatic  #7                  // Method io/undertow/io/AsyncSenderImpl.access$200:(Lio/undertow/io/AsyncSenderImpl;)Lio/undertow/io/IoCallback;
      40: getstatic     #8                  // Field io/undertow/io/IoCallback.END_EXCHANGE:Lio/undertow/io/IoCallback;
      43: if_acmpne     95
      46: aload_0
      47: getfield      #1                  // Field this$0:Lio/undertow/io/AsyncSenderImpl;
      50: invokestatic  #9                  // Method io/undertow/io/AsyncSenderImpl.access$300:(Lio/undertow/io/AsyncSenderImpl;)Lio/undertow/server/HttpServerExchange;
      53: invokevirtual #10                 // Method io/undertow/server/HttpServerExchange.getResponseContentLength:()J
      56: ldc2_w        #11                 // long -1l
      59: lcmp
      60: ifne          95
      63: aload_0
      64: getfield      #1                  // Field this$0:Lio/undertow/io/AsyncSenderImpl;
      67: invokestatic  #9                  // Method io/undertow/io/AsyncSenderImpl.access$300:(Lio/undertow/io/AsyncSenderImpl;)Lio/undertow/server/HttpServerExchange;
      70: invokevirtual #13                 // Method io/undertow/server/HttpServerExchange.getResponseHeaders:()Lio/undertow/util/HeaderMap;
      73: getstatic     #14                 // Field io/undertow/util/Headers.TRANSFER_ENCODING:Lio/undertow/util/HttpString;
      76: invokevirtual #15                 // Method io/undertow/util/HeaderMap.contains:(Lio/undertow/util/HttpString;)Z
      79: ifne          95
      82: aload_0
      83: getfield      #1                  // Field this$0:Lio/undertow/io/AsyncSenderImpl;
      86: invokestatic  #9                  // Method io/undertow/io/AsyncSenderImpl.access$300:(Lio/undertow/io/AsyncSenderImpl;)Lio/undertow/server/HttpServerExchange;
      89: lload         5
      91: invokevirtual #16                 // Method io/undertow/server/HttpServerExchange.setResponseContentLength:(J)Lio/undertow/server/HttpServerExchange;
      94: pop
      95: aload_0
      96: getfield      #1                  // Field this$0:Lio/undertow/io/AsyncSenderImpl;
      99: aload_0
     100: getfield      #1                  // Field this$0:Lio/undertow/io/AsyncSenderImpl;
     103: invokestatic  #9                  // Method io/undertow/io/AsyncSenderImpl.access$300:(Lio/undertow/io/AsyncSenderImpl;)Lio/undertow/server/HttpServerExchange;
     106: invokevirtual #17                 // Method io/undertow/server/HttpServerExchange.getResponseChannel:()Lorg/xnio/channels/StreamSinkChannel;
     109: dup
     110: astore        7
     112: invokestatic  #18                 // Method io/undertow/io/AsyncSenderImpl.access$102:(Lio/undertow/io/AsyncSenderImpl;Lorg/xnio/channels/StreamSinkChannel;)Lorg/xnio/channels/StreamSinkChannel;
     115: pop
     116: aload         7
     118: ifnonnull     130
     121: getstatic     #19                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
     124: invokeinterface #20,  1           // InterfaceMethod io/undertow/UndertowMessages.responseChannelAlreadyProvided:()Ljava/lang/IllegalStateException;
     129: athrow
     130: lload         5
     132: lload_3
     133: lsub
     134: lconst_0
     135: lcmp
     136: ifle          197
     139: aload         7
     141: aload_2
     142: lload_3
     143: lload         5
     145: lload_3
     146: lsub
     147: invokeinterface #21,  6           // InterfaceMethod org/xnio/channels/StreamSinkChannel.transferFrom:(Ljava/nio/channels/FileChannel;JJ)J
     152: lstore        8
     154: lload_3
     155: lload         8
     157: ladd
     158: lstore_3
     159: lload         8
     161: lconst_0
     162: lcmp
     163: ifne          194
     166: aload_2
     167: lload_3
     168: invokevirtual #22                 // Method java/nio/channels/FileChannel.position:(J)Ljava/nio/channels/FileChannel;
     171: pop
     172: aload         7
     174: invokeinterface #23,  1           // InterfaceMethod org/xnio/channels/StreamSinkChannel.getWriteSetter:()Lorg/xnio/ChannelListener$Setter;
     179: aload_0
     180: invokeinterface #24,  2           // InterfaceMethod org/xnio/ChannelListener$Setter.set:(Lorg/xnio/ChannelListener;)V
     185: aload         7
     187: invokeinterface #25,  1           // InterfaceMethod org/xnio/channels/StreamSinkChannel.resumeWrites:()V
     192: iconst_0
     193: ireturn
     194: goto          130
     197: iload_1
     198: ifeq          208
     201: aload_0
     202: getfield      #1                  // Field this$0:Lio/undertow/io/AsyncSenderImpl;
     205: invokestatic  #26                 // Method io/undertow/io/AsyncSenderImpl.access$400:(Lio/undertow/io/AsyncSenderImpl;)V
     208: goto          227
     211: astore_2
     212: aload_0
     213: getfield      #1                  // Field this$0:Lio/undertow/io/AsyncSenderImpl;
     216: aload_0
     217: getfield      #1                  // Field this$0:Lio/undertow/io/AsyncSenderImpl;
     220: invokestatic  #7                  // Method io/undertow/io/AsyncSenderImpl.access$200:(Lio/undertow/io/AsyncSenderImpl;)Lio/undertow/io/IoCallback;
     223: aload_2
     224: invokestatic  #28                 // Method io/undertow/io/AsyncSenderImpl.access$500:(Lio/undertow/io/AsyncSenderImpl;Lio/undertow/io/IoCallback;Ljava/io/IOException;)V
     227: iconst_1
     228: ireturn
    Exception table:
       from    to  target type
           0   193   211   Class java/io/IOException
         194   208   211   Class java/io/IOException

  public void handleEvent(org.xnio.channels.StreamSinkChannel);
    Code:
       0: aload_1
       1: invokeinterface #29,  1           // InterfaceMethod org/xnio/channels/StreamSinkChannel.suspendWrites:()V
       6: aload_1
       7: invokeinterface #23,  1           // InterfaceMethod org/xnio/channels/StreamSinkChannel.getWriteSetter:()Lorg/xnio/ChannelListener$Setter;
      12: aconst_null
      13: invokeinterface #24,  2           // InterfaceMethod org/xnio/ChannelListener$Setter.set:(Lorg/xnio/ChannelListener;)V
      18: aload_0
      19: getfield      #1                  // Field this$0:Lio/undertow/io/AsyncSenderImpl;
      22: invokestatic  #9                  // Method io/undertow/io/AsyncSenderImpl.access$300:(Lio/undertow/io/AsyncSenderImpl;)Lio/undertow/server/HttpServerExchange;
      25: aload_0
      26: invokevirtual #30                 // Method io/undertow/server/HttpServerExchange.dispatch:(Ljava/lang/Runnable;)Lio/undertow/server/HttpServerExchange;
      29: pop
      30: return

  public void run();
    Code:
       0: aload_0
       1: iconst_1
       2: invokevirtual #31                 // Method run:(Z)Z
       5: pop
       6: return

  public void handleEvent(java.nio.channels.Channel);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #32                 // class org/xnio/channels/StreamSinkChannel
       5: invokevirtual #33                 // Method handleEvent:(Lorg/xnio/channels/StreamSinkChannel;)V
       8: return
}
