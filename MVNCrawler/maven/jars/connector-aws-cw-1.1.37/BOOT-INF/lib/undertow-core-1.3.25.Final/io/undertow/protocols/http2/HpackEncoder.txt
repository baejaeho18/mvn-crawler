Compiled from "HpackEncoder.java"
public class io.undertow.protocols.http2.HpackEncoder {
  public static final io.undertow.protocols.http2.HpackEncoder$HpackHeaderFunction DEFAULT_HEADER_FUNCTION;

  private long headersIterator;

  private boolean firstPass;

  private io.undertow.util.HeaderMap currentHeaders;

  private int entryPositionCounter;

  private int newMaxHeaderSize;

  private int minNewMaxHeaderSize;

  private static final java.util.Map<io.undertow.util.HttpString, io.undertow.protocols.http2.HpackEncoder$TableEntry[]> ENCODING_STATIC_TABLE;

  private final java.util.Deque<io.undertow.protocols.http2.HpackEncoder$TableEntry> evictionQueue;

  private final java.util.Map<io.undertow.util.HttpString, java.util.List<io.undertow.protocols.http2.HpackEncoder$TableEntry>> dynamicTable;

  private byte[] overflowData;

  private int overflowPos;

  private int overflowLength;

  private int maxTableSize;

  private int currentTableSize;

  private final io.undertow.protocols.http2.HpackEncoder$HpackHeaderFunction hpackHeaderFunction;

  public io.undertow.protocols.http2.HpackEncoder(int, io.undertow.protocols.http2.HpackEncoder$HpackHeaderFunction);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: ldc2_w        #3                  // long -1l
       8: putfield      #5                  // Field headersIterator:J
      11: aload_0
      12: iconst_1
      13: putfield      #6                  // Field firstPass:Z
      16: aload_0
      17: iconst_m1
      18: putfield      #7                  // Field newMaxHeaderSize:I
      21: aload_0
      22: iconst_m1
      23: putfield      #8                  // Field minNewMaxHeaderSize:I
      26: aload_0
      27: new           #9                  // class java/util/ArrayDeque
      30: dup
      31: invokespecial #10                 // Method java/util/ArrayDeque."<init>":()V
      34: putfield      #11                 // Field evictionQueue:Ljava/util/Deque;
      37: aload_0
      38: new           #12                 // class java/util/HashMap
      41: dup
      42: invokespecial #13                 // Method java/util/HashMap."<init>":()V
      45: putfield      #14                 // Field dynamicTable:Ljava/util/Map;
      48: aload_0
      49: iload_1
      50: putfield      #15                 // Field maxTableSize:I
      53: aload_0
      54: aload_2
      55: putfield      #16                 // Field hpackHeaderFunction:Lio/undertow/protocols/http2/HpackEncoder$HpackHeaderFunction;
      58: return

  public io.undertow.protocols.http2.HpackEncoder(int);
    Code:
       0: aload_0
       1: iload_1
       2: getstatic     #17                 // Field DEFAULT_HEADER_FUNCTION:Lio/undertow/protocols/http2/HpackEncoder$HpackHeaderFunction;
       5: invokespecial #18                 // Method "<init>":(ILio/undertow/protocols/http2/HpackEncoder$HpackHeaderFunction;)V
       8: return

  public io.undertow.protocols.http2.HpackEncoder$State encode(io.undertow.util.HeaderMap, java.nio.ByteBuffer);
    Code:
       0: aload_0
       1: getfield      #19                 // Field overflowData:[B
       4: ifnull        58
       7: aload_0
       8: getfield      #20                 // Field overflowPos:I
      11: istore_3
      12: iload_3
      13: aload_0
      14: getfield      #21                 // Field overflowLength:I
      17: if_icmpge     53
      20: aload_2
      21: invokevirtual #22                 // Method java/nio/ByteBuffer.hasRemaining:()Z
      24: ifne          36
      27: aload_0
      28: iload_3
      29: putfield      #20                 // Field overflowPos:I
      32: getstatic     #23                 // Field io/undertow/protocols/http2/HpackEncoder$State.OVERFLOW:Lio/undertow/protocols/http2/HpackEncoder$State;
      35: areturn
      36: aload_2
      37: aload_0
      38: getfield      #19                 // Field overflowData:[B
      41: iload_3
      42: baload
      43: invokevirtual #24                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;
      46: pop
      47: iinc          3, 1
      50: goto          12
      53: aload_0
      54: aconst_null
      55: putfield      #19                 // Field overflowData:[B
      58: aload_0
      59: getfield      #5                  // Field headersIterator:J
      62: lstore_3
      63: aload_0
      64: getfield      #5                  // Field headersIterator:J
      67: ldc2_w        #3                  // long -1l
      70: lcmp
      71: ifne          92
      74: aload_0
      75: aload_2
      76: invokespecial #25                 // Method handleTableSizeChange:(Ljava/nio/ByteBuffer;)V
      79: aload_1
      80: invokevirtual #26                 // Method io/undertow/util/HeaderMap.fastIterate:()J
      83: lstore_3
      84: aload_0
      85: aload_1
      86: putfield      #27                 // Field currentHeaders:Lio/undertow/util/HeaderMap;
      89: goto          108
      92: aload_1
      93: aload_0
      94: getfield      #27                 // Field currentHeaders:Lio/undertow/util/HeaderMap;
      97: if_acmpeq     108
     100: new           #28                 // class java/lang/IllegalStateException
     103: dup
     104: invokespecial #29                 // Method java/lang/IllegalStateException."<init>":()V
     107: athrow
     108: lload_3
     109: ldc2_w        #3                  // long -1l
     112: lcmp
     113: ifeq          642
     116: aload_1
     117: lload_3
     118: invokevirtual #30                 // Method io/undertow/util/HeaderMap.fiCurrent:(J)Lio/undertow/util/HeaderValues;
     121: astore        5
     123: iconst_0
     124: istore        6
     126: aload_0
     127: getfield      #6                  // Field firstPass:Z
     130: ifeq          153
     133: aload         5
     135: invokevirtual #31                 // Method io/undertow/util/HeaderValues.getHeaderName:()Lio/undertow/util/HttpString;
     138: iconst_0
     139: invokevirtual #32                 // Method io/undertow/util/HttpString.byteAt:(I)B
     142: bipush        58
     144: if_icmpeq     170
     147: iconst_1
     148: istore        6
     150: goto          170
     153: aload         5
     155: invokevirtual #31                 // Method io/undertow/util/HeaderValues.getHeaderName:()Lio/undertow/util/HttpString;
     158: iconst_0
     159: invokevirtual #32                 // Method io/undertow/util/HttpString.byteAt:(I)B
     162: bipush        58
     164: if_icmpne     170
     167: iconst_1
     168: istore        6
     170: iload         6
     172: ifne          608
     175: iconst_0
     176: istore        7
     178: iload         7
     180: aload         5
     182: invokevirtual #33                 // Method io/undertow/util/HeaderValues.size:()I
     185: if_icmpge     608
     188: aload         5
     190: invokevirtual #31                 // Method io/undertow/util/HeaderValues.getHeaderName:()Lio/undertow/util/HttpString;
     193: astore        8
     195: bipush        11
     197: aload         8
     199: invokevirtual #34                 // Method io/undertow/util/HttpString.length:()I
     202: iadd
     203: istore        9
     205: aload         5
     207: iload         7
     209: invokevirtual #35                 // Method io/undertow/util/HeaderValues.get:(I)Ljava/lang/String;
     212: astore        10
     214: iconst_0
     215: istore        11
     217: iload         11
     219: aload         10
     221: invokevirtual #36                 // Method java/lang/String.length:()I
     224: if_icmpge     277
     227: aload         10
     229: iload         11
     231: invokevirtual #37                 // Method java/lang/String.charAt:(I)C
     234: istore        12
     236: iload         12
     238: bipush        13
     240: if_icmpeq     250
     243: iload         12
     245: bipush        10
     247: if_icmpne     271
     250: aload         10
     252: bipush        13
     254: bipush        32
     256: invokevirtual #38                 // Method java/lang/String.replace:(CC)Ljava/lang/String;
     259: bipush        10
     261: bipush        32
     263: invokevirtual #38                 // Method java/lang/String.replace:(CC)Ljava/lang/String;
     266: astore        10
     268: goto          277
     271: iinc          11, 1
     274: goto          217
     277: aload_0
     278: aload         8
     280: aload         10
     282: invokespecial #39                 // Method findInTable:(Lio/undertow/util/HttpString;Ljava/lang/String;)Lio/undertow/protocols/http2/HpackEncoder$TableEntry;
     285: astore        11
     287: iload         9
     289: iconst_1
     290: aload         10
     292: invokevirtual #36                 // Method java/lang/String.length:()I
     295: iadd
     296: iadd
     297: istore        9
     299: iconst_0
     300: istore        12
     302: aload_2
     303: astore        13
     305: aload         13
     307: invokevirtual #40                 // Method java/nio/ByteBuffer.remaining:()I
     310: iload         9
     312: if_icmpge     337
     315: iconst_1
     316: istore        12
     318: aload_0
     319: iload         9
     321: newarray       byte
     323: dup_x1
     324: putfield      #19                 // Field overflowData:[B
     327: invokestatic  #41                 // Method java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;
     330: astore        13
     332: aload_0
     333: iconst_0
     334: putfield      #20                 // Field overflowPos:I
     337: aload_0
     338: getfield      #16                 // Field hpackHeaderFunction:Lio/undertow/protocols/http2/HpackEncoder$HpackHeaderFunction;
     341: aload         8
     343: aload         10
     345: invokeinterface #42,  3           // InterfaceMethod io/undertow/protocols/http2/HpackEncoder$HpackHeaderFunction.shouldUseIndexing:(Lio/undertow/util/HttpString;Ljava/lang/String;)Z
     350: ifeq          378
     353: aload         8
     355: invokevirtual #34                 // Method io/undertow/util/HttpString.length:()I
     358: aload         10
     360: invokevirtual #36                 // Method java/lang/String.length:()I
     363: iadd
     364: bipush        32
     366: iadd
     367: aload_0
     368: getfield      #15                 // Field maxTableSize:I
     371: if_icmpge     378
     374: iconst_1
     375: goto          379
     378: iconst_0
     379: istore        14
     381: aload         11
     383: ifnonnull     428
     386: iload         14
     388: ifeq          428
     391: aload         13
     393: bipush        64
     395: invokevirtual #24                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;
     398: pop
     399: aload_0
     400: aload         13
     402: aload         8
     404: invokespecial #43                 // Method writeHuffmanEncodableName:(Ljava/nio/ByteBuffer;Lio/undertow/util/HttpString;)V
     407: aload_0
     408: aload         13
     410: aload         8
     412: aload         10
     414: invokespecial #44                 // Method writeHuffmanEncodableValue:(Ljava/nio/ByteBuffer;Lio/undertow/util/HttpString;Ljava/lang/String;)V
     417: aload_0
     418: aload         8
     420: aload         10
     422: invokespecial #45                 // Method addToDynamicTable:(Lio/undertow/util/HttpString;Ljava/lang/String;)V
     425: goto          573
     428: aload         11
     430: ifnonnull     462
     433: aload         13
     435: bipush        16
     437: invokevirtual #24                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;
     440: pop
     441: aload_0
     442: aload         13
     444: aload         8
     446: invokespecial #43                 // Method writeHuffmanEncodableName:(Ljava/nio/ByteBuffer;Lio/undertow/util/HttpString;)V
     449: aload_0
     450: aload         13
     452: aload         8
     454: aload         10
     456: invokespecial #44                 // Method writeHuffmanEncodableValue:(Ljava/nio/ByteBuffer;Lio/undertow/util/HttpString;Ljava/lang/String;)V
     459: goto          573
     462: aload         10
     464: aload         11
     466: getfield      #46                 // Field io/undertow/protocols/http2/HpackEncoder$TableEntry.value:Ljava/lang/String;
     469: invokevirtual #47                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     472: ifeq          498
     475: aload         13
     477: bipush        -128
     479: invokevirtual #24                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;
     482: pop
     483: aload         13
     485: aload         11
     487: invokevirtual #48                 // Method io/undertow/protocols/http2/HpackEncoder$TableEntry.getPosition:()I
     490: bipush        7
     492: invokestatic  #49                 // Method io/undertow/protocols/http2/Hpack.encodeInteger:(Ljava/nio/ByteBuffer;II)V
     495: goto          573
     498: iload         14
     500: ifeq          544
     503: aload         13
     505: bipush        64
     507: invokevirtual #24                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;
     510: pop
     511: aload         13
     513: aload         11
     515: invokevirtual #48                 // Method io/undertow/protocols/http2/HpackEncoder$TableEntry.getPosition:()I
     518: bipush        6
     520: invokestatic  #49                 // Method io/undertow/protocols/http2/Hpack.encodeInteger:(Ljava/nio/ByteBuffer;II)V
     523: aload_0
     524: aload         13
     526: aload         8
     528: aload         10
     530: invokespecial #44                 // Method writeHuffmanEncodableValue:(Ljava/nio/ByteBuffer;Lio/undertow/util/HttpString;Ljava/lang/String;)V
     533: aload_0
     534: aload         8
     536: aload         10
     538: invokespecial #45                 // Method addToDynamicTable:(Lio/undertow/util/HttpString;Ljava/lang/String;)V
     541: goto          573
     544: aload         13
     546: bipush        16
     548: invokevirtual #24                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;
     551: pop
     552: aload         13
     554: aload         11
     556: invokevirtual #48                 // Method io/undertow/protocols/http2/HpackEncoder$TableEntry.getPosition:()I
     559: iconst_4
     560: invokestatic  #49                 // Method io/undertow/protocols/http2/Hpack.encodeInteger:(Ljava/nio/ByteBuffer;II)V
     563: aload_0
     564: aload         13
     566: aload         8
     568: aload         10
     570: invokespecial #44                 // Method writeHuffmanEncodableValue:(Ljava/nio/ByteBuffer;Lio/undertow/util/HttpString;Ljava/lang/String;)V
     573: iload         12
     575: ifeq          602
     578: aload_1
     579: lload_3
     580: invokevirtual #50                 // Method io/undertow/util/HeaderMap.fiNext:(J)J
     583: lstore_3
     584: aload_0
     585: lload_3
     586: putfield      #5                  // Field headersIterator:J
     589: aload_0
     590: aload         13
     592: invokevirtual #51                 // Method java/nio/ByteBuffer.position:()I
     595: putfield      #21                 // Field overflowLength:I
     598: getstatic     #23                 // Field io/undertow/protocols/http2/HpackEncoder$State.OVERFLOW:Lio/undertow/protocols/http2/HpackEncoder$State;
     601: areturn
     602: iinc          7, 1
     605: goto          178
     608: aload_1
     609: lload_3
     610: invokevirtual #50                 // Method io/undertow/util/HeaderMap.fiNext:(J)J
     613: lstore_3
     614: lload_3
     615: ldc2_w        #3                  // long -1l
     618: lcmp
     619: ifne          639
     622: aload_0
     623: getfield      #6                  // Field firstPass:Z
     626: ifeq          639
     629: aload_0
     630: iconst_0
     631: putfield      #6                  // Field firstPass:Z
     634: aload_1
     635: invokevirtual #26                 // Method io/undertow/util/HeaderMap.fastIterate:()J
     638: lstore_3
     639: goto          108
     642: aload_0
     643: ldc2_w        #3                  // long -1l
     646: putfield      #5                  // Field headersIterator:J
     649: aload_0
     650: iconst_1
     651: putfield      #6                  // Field firstPass:Z
     654: getstatic     #52                 // Field io/undertow/protocols/http2/HpackEncoder$State.COMPLETE:Lio/undertow/protocols/http2/HpackEncoder$State;
     657: areturn

  private void writeHuffmanEncodableName(java.nio.ByteBuffer, io.undertow.util.HttpString);
    Code:
       0: aload_0
       1: getfield      #16                 // Field hpackHeaderFunction:Lio/undertow/protocols/http2/HpackEncoder$HpackHeaderFunction;
       4: aload_2
       5: invokeinterface #53,  2           // InterfaceMethod io/undertow/protocols/http2/HpackEncoder$HpackHeaderFunction.shouldUseHuffman:(Lio/undertow/util/HttpString;)Z
      10: ifeq          26
      13: aload_1
      14: aload_2
      15: invokevirtual #54                 // Method io/undertow/util/HttpString.toString:()Ljava/lang/String;
      18: iconst_1
      19: invokestatic  #55                 // Method io/undertow/protocols/http2/HPackHuffman.encode:(Ljava/nio/ByteBuffer;Ljava/lang/String;Z)Z
      22: ifeq          26
      25: return
      26: aload_1
      27: iconst_0
      28: invokevirtual #24                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;
      31: pop
      32: aload_1
      33: aload_2
      34: invokevirtual #34                 // Method io/undertow/util/HttpString.length:()I
      37: bipush        7
      39: invokestatic  #49                 // Method io/undertow/protocols/http2/Hpack.encodeInteger:(Ljava/nio/ByteBuffer;II)V
      42: iconst_0
      43: istore_3
      44: iload_3
      45: aload_2
      46: invokevirtual #34                 // Method io/undertow/util/HttpString.length:()I
      49: if_icmpge     71
      52: aload_1
      53: aload_2
      54: iload_3
      55: invokevirtual #32                 // Method io/undertow/util/HttpString.byteAt:(I)B
      58: invokestatic  #56                 // Method io/undertow/protocols/http2/Hpack.toLower:(B)B
      61: invokevirtual #24                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;
      64: pop
      65: iinc          3, 1
      68: goto          44
      71: return

  private void writeHuffmanEncodableValue(java.nio.ByteBuffer, io.undertow.util.HttpString, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #16                 // Field hpackHeaderFunction:Lio/undertow/protocols/http2/HpackEncoder$HpackHeaderFunction;
       4: aload_2
       5: aload_3
       6: invokeinterface #57,  3           // InterfaceMethod io/undertow/protocols/http2/HpackEncoder$HpackHeaderFunction.shouldUseHuffman:(Lio/undertow/util/HttpString;Ljava/lang/String;)Z
      11: ifeq          32
      14: aload_1
      15: aload_3
      16: iconst_0
      17: invokestatic  #55                 // Method io/undertow/protocols/http2/HPackHuffman.encode:(Ljava/nio/ByteBuffer;Ljava/lang/String;Z)Z
      20: ifne          38
      23: aload_0
      24: aload_1
      25: aload_3
      26: invokespecial #58                 // Method writeValueString:(Ljava/nio/ByteBuffer;Ljava/lang/String;)V
      29: goto          38
      32: aload_0
      33: aload_1
      34: aload_3
      35: invokespecial #58                 // Method writeValueString:(Ljava/nio/ByteBuffer;Ljava/lang/String;)V
      38: return

  private void writeValueString(java.nio.ByteBuffer, java.lang.String);
    Code:
       0: aload_1
       1: iconst_0
       2: invokevirtual #24                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;
       5: pop
       6: aload_1
       7: aload_2
       8: invokevirtual #36                 // Method java/lang/String.length:()I
      11: bipush        7
      13: invokestatic  #49                 // Method io/undertow/protocols/http2/Hpack.encodeInteger:(Ljava/nio/ByteBuffer;II)V
      16: iconst_0
      17: istore_3
      18: iload_3
      19: aload_2
      20: invokevirtual #36                 // Method java/lang/String.length:()I
      23: if_icmpge     43
      26: aload_1
      27: aload_2
      28: iload_3
      29: invokevirtual #37                 // Method java/lang/String.charAt:(I)C
      32: i2b
      33: invokevirtual #24                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;
      36: pop
      37: iinc          3, 1
      40: goto          18
      43: return

  private void addToDynamicTable(io.undertow.util.HttpString, java.lang.String);
    Code:
       0: aload_0
       1: dup
       2: getfield      #1                  // Field entryPositionCounter:I
       5: dup_x1
       6: iconst_1
       7: iadd
       8: putfield      #1                  // Field entryPositionCounter:I
      11: istore_3
      12: new           #59                 // class io/undertow/protocols/http2/HpackEncoder$DynamicTableEntry
      15: dup
      16: aload_0
      17: aload_1
      18: aload_2
      19: iload_3
      20: ineg
      21: invokespecial #60                 // Method io/undertow/protocols/http2/HpackEncoder$DynamicTableEntry."<init>":(Lio/undertow/protocols/http2/HpackEncoder;Lio/undertow/util/HttpString;Ljava/lang/String;I)V
      24: astore        4
      26: aload_0
      27: getfield      #14                 // Field dynamicTable:Ljava/util/Map;
      30: aload_1
      31: invokeinterface #61,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      36: checkcast     #62                 // class java/util/List
      39: astore        5
      41: aload         5
      43: ifnonnull     68
      46: aload_0
      47: getfield      #14                 // Field dynamicTable:Ljava/util/Map;
      50: aload_1
      51: new           #63                 // class java/util/ArrayList
      54: dup
      55: iconst_1
      56: invokespecial #64                 // Method java/util/ArrayList."<init>":(I)V
      59: dup
      60: astore        5
      62: invokeinterface #65,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      67: pop
      68: aload         5
      70: aload         4
      72: invokeinterface #66,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      77: pop
      78: aload_0
      79: getfield      #11                 // Field evictionQueue:Ljava/util/Deque;
      82: aload         4
      84: invokeinterface #67,  2           // InterfaceMethod java/util/Deque.add:(Ljava/lang/Object;)Z
      89: pop
      90: aload_0
      91: dup
      92: getfield      #68                 // Field currentTableSize:I
      95: aload         4
      97: getfield      #69                 // Field io/undertow/protocols/http2/HpackEncoder$DynamicTableEntry.size:I
     100: iadd
     101: putfield      #68                 // Field currentTableSize:I
     104: aload_0
     105: invokespecial #70                 // Method runEvictionIfRequired:()V
     108: aload_0
     109: getfield      #1                  // Field entryPositionCounter:I
     112: ldc           #72                 // int 2147483647
     114: if_icmpne     121
     117: aload_0
     118: invokespecial #73                 // Method preventPositionRollover:()V
     121: return

  private void preventPositionRollover();
    Code:
       0: aload_0
       1: getfield      #14                 // Field dynamicTable:Ljava/util/Map;
       4: invokeinterface #74,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
       9: invokeinterface #75,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      14: astore_1
      15: aload_1
      16: invokeinterface #76,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      21: ifeq          85
      24: aload_1
      25: invokeinterface #77,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      30: checkcast     #78                 // class java/util/Map$Entry
      33: astore_2
      34: aload_2
      35: invokeinterface #79,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      40: checkcast     #62                 // class java/util/List
      43: invokeinterface #80,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      48: astore_3
      49: aload_3
      50: invokeinterface #76,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      55: ifeq          82
      58: aload_3
      59: invokeinterface #77,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      64: checkcast     #81                 // class io/undertow/protocols/http2/HpackEncoder$TableEntry
      67: astore        4
      69: aload         4
      71: aload         4
      73: invokevirtual #48                 // Method io/undertow/protocols/http2/HpackEncoder$TableEntry.getPosition:()I
      76: putfield      #82                 // Field io/undertow/protocols/http2/HpackEncoder$TableEntry.position:I
      79: goto          49
      82: goto          15
      85: aload_0
      86: iconst_0
      87: putfield      #1                  // Field entryPositionCounter:I
      90: return

  private void runEvictionIfRequired();
    Code:
       0: aload_0
       1: getfield      #68                 // Field currentTableSize:I
       4: aload_0
       5: getfield      #15                 // Field maxTableSize:I
       8: if_icmple     93
      11: aload_0
      12: getfield      #11                 // Field evictionQueue:Ljava/util/Deque;
      15: invokeinterface #83,  1           // InterfaceMethod java/util/Deque.poll:()Ljava/lang/Object;
      20: checkcast     #81                 // class io/undertow/protocols/http2/HpackEncoder$TableEntry
      23: astore_1
      24: aload_1
      25: ifnonnull     29
      28: return
      29: aload_0
      30: dup
      31: getfield      #68                 // Field currentTableSize:I
      34: aload_1
      35: getfield      #84                 // Field io/undertow/protocols/http2/HpackEncoder$TableEntry.size:I
      38: isub
      39: putfield      #68                 // Field currentTableSize:I
      42: aload_0
      43: getfield      #14                 // Field dynamicTable:Ljava/util/Map;
      46: aload_1
      47: getfield      #85                 // Field io/undertow/protocols/http2/HpackEncoder$TableEntry.name:Lio/undertow/util/HttpString;
      50: invokeinterface #61,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      55: checkcast     #62                 // class java/util/List
      58: astore_2
      59: aload_2
      60: aload_1
      61: invokeinterface #86,  2           // InterfaceMethod java/util/List.remove:(Ljava/lang/Object;)Z
      66: pop
      67: aload_2
      68: invokeinterface #87,  1           // InterfaceMethod java/util/List.isEmpty:()Z
      73: ifeq          90
      76: aload_0
      77: getfield      #14                 // Field dynamicTable:Ljava/util/Map;
      80: aload_1
      81: getfield      #85                 // Field io/undertow/protocols/http2/HpackEncoder$TableEntry.name:Lio/undertow/util/HttpString;
      84: invokeinterface #88,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      89: pop
      90: goto          0
      93: return

  private io.undertow.protocols.http2.HpackEncoder$TableEntry findInTable(io.undertow.util.HttpString, java.lang.String);
    Code:
       0: getstatic     #89                 // Field ENCODING_STATIC_TABLE:Ljava/util/Map;
       3: aload_1
       4: invokeinterface #61,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
       9: checkcast     #90                 // class "[Lio/undertow/protocols/http2/HpackEncoder$TableEntry;"
      12: astore_3
      13: aload_3
      14: ifnull        71
      17: aload_3
      18: astore        4
      20: aload         4
      22: arraylength
      23: istore        5
      25: iconst_0
      26: istore        6
      28: iload         6
      30: iload         5
      32: if_icmpge     71
      35: aload         4
      37: iload         6
      39: aaload
      40: astore        7
      42: aload         7
      44: getfield      #46                 // Field io/undertow/protocols/http2/HpackEncoder$TableEntry.value:Ljava/lang/String;
      47: ifnull        65
      50: aload         7
      52: getfield      #46                 // Field io/undertow/protocols/http2/HpackEncoder$TableEntry.value:Ljava/lang/String;
      55: aload_2
      56: invokevirtual #47                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      59: ifeq          65
      62: aload         7
      64: areturn
      65: iinc          6, 1
      68: goto          28
      71: aload_0
      72: getfield      #14                 // Field dynamicTable:Ljava/util/Map;
      75: aload_1
      76: invokeinterface #61,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      81: checkcast     #62                 // class java/util/List
      84: astore        4
      86: aload         4
      88: ifnull        140
      91: aload         4
      93: invokeinterface #80,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      98: astore        5
     100: aload         5
     102: invokeinterface #76,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     107: ifeq          140
     110: aload         5
     112: invokeinterface #77,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     117: checkcast     #81                 // class io/undertow/protocols/http2/HpackEncoder$TableEntry
     120: astore        6
     122: aload         6
     124: getfield      #46                 // Field io/undertow/protocols/http2/HpackEncoder$TableEntry.value:Ljava/lang/String;
     127: aload_2
     128: invokevirtual #47                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     131: ifeq          137
     134: aload         6
     136: areturn
     137: goto          100
     140: aload_3
     141: ifnull        148
     144: aload_3
     145: iconst_0
     146: aaload
     147: areturn
     148: aconst_null
     149: areturn

  public void setMaxTableSize(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #7                  // Field newMaxHeaderSize:I
       5: aload_0
       6: getfield      #8                  // Field minNewMaxHeaderSize:I
       9: iconst_m1
      10: if_icmpne     21
      13: aload_0
      14: iload_1
      15: putfield      #8                  // Field minNewMaxHeaderSize:I
      18: goto          33
      21: aload_0
      22: iload_1
      23: aload_0
      24: getfield      #8                  // Field minNewMaxHeaderSize:I
      27: invokestatic  #91                 // Method java/lang/Math.min:(II)I
      30: putfield      #8                  // Field minNewMaxHeaderSize:I
      33: return

  private void handleTableSizeChange(java.nio.ByteBuffer);
    Code:
       0: aload_0
       1: getfield      #7                  // Field newMaxHeaderSize:I
       4: iconst_m1
       5: if_icmpne     9
       8: return
       9: aload_0
      10: getfield      #8                  // Field minNewMaxHeaderSize:I
      13: aload_0
      14: getfield      #7                  // Field newMaxHeaderSize:I
      17: if_icmpeq     36
      20: aload_1
      21: bipush        32
      23: invokevirtual #24                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;
      26: pop
      27: aload_1
      28: aload_0
      29: getfield      #8                  // Field minNewMaxHeaderSize:I
      32: iconst_5
      33: invokestatic  #49                 // Method io/undertow/protocols/http2/Hpack.encodeInteger:(Ljava/nio/ByteBuffer;II)V
      36: aload_1
      37: bipush        32
      39: invokevirtual #24                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;
      42: pop
      43: aload_1
      44: aload_0
      45: getfield      #7                  // Field newMaxHeaderSize:I
      48: iconst_5
      49: invokestatic  #49                 // Method io/undertow/protocols/http2/Hpack.encodeInteger:(Ljava/nio/ByteBuffer;II)V
      52: aload_0
      53: aload_0
      54: getfield      #7                  // Field newMaxHeaderSize:I
      57: putfield      #15                 // Field maxTableSize:I
      60: aload_0
      61: invokespecial #70                 // Method runEvictionIfRequired:()V
      64: aload_0
      65: iconst_m1
      66: putfield      #7                  // Field newMaxHeaderSize:I
      69: aload_0
      70: iconst_m1
      71: putfield      #8                  // Field minNewMaxHeaderSize:I
      74: return

  static int access$000(io.undertow.protocols.http2.HpackEncoder);
    Code:
       0: aload_0
       1: getfield      #1                  // Field entryPositionCounter:I
       4: ireturn

  static {};
    Code:
       0: new           #92                 // class io/undertow/protocols/http2/HpackEncoder$1
       3: dup
       4: invokespecial #93                 // Method io/undertow/protocols/http2/HpackEncoder$1."<init>":()V
       7: putstatic     #17                 // Field DEFAULT_HEADER_FUNCTION:Lio/undertow/protocols/http2/HpackEncoder$HpackHeaderFunction;
      10: new           #12                 // class java/util/HashMap
      13: dup
      14: invokespecial #13                 // Method java/util/HashMap."<init>":()V
      17: astore_0
      18: iconst_1
      19: istore_1
      20: iload_1
      21: getstatic     #94                 // Field io/undertow/protocols/http2/Hpack.STATIC_TABLE:[Lio/undertow/protocols/http2/Hpack$HeaderField;
      24: arraylength
      25: if_icmpge     148
      28: getstatic     #94                 // Field io/undertow/protocols/http2/Hpack.STATIC_TABLE:[Lio/undertow/protocols/http2/Hpack$HeaderField;
      31: iload_1
      32: aaload
      33: astore_2
      34: aload_0
      35: aload_2
      36: getfield      #95                 // Field io/undertow/protocols/http2/Hpack$HeaderField.name:Lio/undertow/util/HttpString;
      39: invokeinterface #61,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      44: checkcast     #90                 // class "[Lio/undertow/protocols/http2/HpackEncoder$TableEntry;"
      47: astore_3
      48: aload_3
      49: ifnonnull     89
      52: aload_0
      53: aload_2
      54: getfield      #95                 // Field io/undertow/protocols/http2/Hpack$HeaderField.name:Lio/undertow/util/HttpString;
      57: iconst_1
      58: anewarray     #81                 // class io/undertow/protocols/http2/HpackEncoder$TableEntry
      61: dup
      62: iconst_0
      63: new           #81                 // class io/undertow/protocols/http2/HpackEncoder$TableEntry
      66: dup
      67: aload_2
      68: getfield      #95                 // Field io/undertow/protocols/http2/Hpack$HeaderField.name:Lio/undertow/util/HttpString;
      71: aload_2
      72: getfield      #96                 // Field io/undertow/protocols/http2/Hpack$HeaderField.value:Ljava/lang/String;
      75: iload_1
      76: invokespecial #97                 // Method io/undertow/protocols/http2/HpackEncoder$TableEntry."<init>":(Lio/undertow/util/HttpString;Ljava/lang/String;I)V
      79: aastore
      80: invokeinterface #65,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      85: pop
      86: goto          142
      89: aload_3
      90: arraylength
      91: iconst_1
      92: iadd
      93: anewarray     #81                 // class io/undertow/protocols/http2/HpackEncoder$TableEntry
      96: astore        4
      98: aload_3
      99: iconst_0
     100: aload         4
     102: iconst_0
     103: aload_3
     104: arraylength
     105: invokestatic  #98                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
     108: aload         4
     110: aload_3
     111: arraylength
     112: new           #81                 // class io/undertow/protocols/http2/HpackEncoder$TableEntry
     115: dup
     116: aload_2
     117: getfield      #95                 // Field io/undertow/protocols/http2/Hpack$HeaderField.name:Lio/undertow/util/HttpString;
     120: aload_2
     121: getfield      #96                 // Field io/undertow/protocols/http2/Hpack$HeaderField.value:Ljava/lang/String;
     124: iload_1
     125: invokespecial #97                 // Method io/undertow/protocols/http2/HpackEncoder$TableEntry."<init>":(Lio/undertow/util/HttpString;Ljava/lang/String;I)V
     128: aastore
     129: aload_0
     130: aload_2
     131: getfield      #95                 // Field io/undertow/protocols/http2/Hpack$HeaderField.name:Lio/undertow/util/HttpString;
     134: aload         4
     136: invokeinterface #65,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     141: pop
     142: iinc          1, 1
     145: goto          20
     148: aload_0
     149: invokestatic  #99                 // Method java/util/Collections.unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;
     152: putstatic     #89                 // Field ENCODING_STATIC_TABLE:Ljava/util/Map;
     155: return
}
