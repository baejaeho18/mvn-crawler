Compiled from "AjpOpenListener.java"
public class io.undertow.server.protocol.ajp.AjpOpenListener implements io.undertow.server.OpenListener {
  private final io.undertow.connector.ByteBufferPool bufferPool;

  private final int bufferSize;

  private volatile java.lang.String scheme;

  private volatile io.undertow.server.HttpHandler rootHandler;

  private volatile org.xnio.OptionMap undertowOptions;

  private volatile io.undertow.server.protocol.ajp.AjpRequestParser parser;

  private volatile boolean statisticsEnabled;

  private final io.undertow.server.ConnectorStatisticsImpl connectorStatistics;

  public io.undertow.server.protocol.ajp.AjpOpenListener(org.xnio.Pool<java.nio.ByteBuffer>);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #1                  // Field org/xnio/OptionMap.EMPTY:Lorg/xnio/OptionMap;
       5: invokespecial #2                  // Method "<init>":(Lorg/xnio/Pool;Lorg/xnio/OptionMap;)V
       8: return

  public io.undertow.server.protocol.ajp.AjpOpenListener(org.xnio.Pool<java.nio.ByteBuffer>, org.xnio.OptionMap);
    Code:
       0: aload_0
       1: new           #3                  // class io/undertow/server/XnioByteBufferPool
       4: dup
       5: aload_1
       6: invokespecial #4                  // Method io/undertow/server/XnioByteBufferPool."<init>":(Lorg/xnio/Pool;)V
       9: aload_2
      10: invokespecial #5                  // Method "<init>":(Lio/undertow/connector/ByteBufferPool;Lorg/xnio/OptionMap;)V
      13: return

  public io.undertow.server.protocol.ajp.AjpOpenListener(io.undertow.connector.ByteBufferPool);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #1                  // Field org/xnio/OptionMap.EMPTY:Lorg/xnio/OptionMap;
       5: invokespecial #5                  // Method "<init>":(Lio/undertow/connector/ByteBufferPool;Lorg/xnio/OptionMap;)V
       8: return

  public io.undertow.server.protocol.ajp.AjpOpenListener(io.undertow.connector.ByteBufferPool, org.xnio.OptionMap);
    Code:
       0: aload_0
       1: invokespecial #6                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_2
       6: putfield      #7                  // Field undertowOptions:Lorg/xnio/OptionMap;
       9: aload_0
      10: aload_1
      11: putfield      #8                  // Field bufferPool:Lio/undertow/connector/ByteBufferPool;
      14: aload_1
      15: invokeinterface #9,  1            // InterfaceMethod io/undertow/connector/ByteBufferPool.allocate:()Lio/undertow/connector/PooledByteBuffer;
      20: astore_3
      21: aload_0
      22: aload_3
      23: invokeinterface #10,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
      28: invokevirtual #11                 // Method java/nio/ByteBuffer.remaining:()I
      31: putfield      #12                 // Field bufferSize:I
      34: aload_3
      35: invokeinterface #13,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
      40: aload_0
      41: new           #14                 // class io/undertow/server/protocol/ajp/AjpRequestParser
      44: dup
      45: aload_2
      46: getstatic     #15                 // Field io/undertow/UndertowOptions.URL_CHARSET:Lorg/xnio/Option;
      49: getstatic     #16                 // Field java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;
      52: invokevirtual #17                 // Method java/nio/charset/Charset.name:()Ljava/lang/String;
      55: invokevirtual #18                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;Ljava/lang/Object;)Ljava/lang/Object;
      58: checkcast     #19                 // class java/lang/String
      61: aload_2
      62: getstatic     #20                 // Field io/undertow/UndertowOptions.DECODE_URL:Lorg/xnio/Option;
      65: iconst_1
      66: invokevirtual #21                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;Z)Z
      69: invokespecial #22                 // Method io/undertow/server/protocol/ajp/AjpRequestParser."<init>":(Ljava/lang/String;Z)V
      72: putfield      #23                 // Field parser:Lio/undertow/server/protocol/ajp/AjpRequestParser;
      75: aload_0
      76: new           #24                 // class io/undertow/server/ConnectorStatisticsImpl
      79: dup
      80: invokespecial #25                 // Method io/undertow/server/ConnectorStatisticsImpl."<init>":()V
      83: putfield      #26                 // Field connectorStatistics:Lio/undertow/server/ConnectorStatisticsImpl;
      86: aload_0
      87: aload_2
      88: getstatic     #27                 // Field io/undertow/UndertowOptions.ENABLE_CONNECTOR_STATISTICS:Lorg/xnio/Option;
      91: iconst_0
      92: invokevirtual #21                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;Z)Z
      95: putfield      #28                 // Field statisticsEnabled:Z
      98: return

  public void handleEvent(org.xnio.StreamConnection);
    Code:
       0: getstatic     #29                 // Field io/undertow/UndertowLogger.REQUEST_LOGGER:Lio/undertow/UndertowLogger;
       3: invokeinterface #30,  1           // InterfaceMethod io/undertow/UndertowLogger.isTraceEnabled:()Z
       8: ifeq          25
      11: getstatic     #29                 // Field io/undertow/UndertowLogger.REQUEST_LOGGER:Lio/undertow/UndertowLogger;
      14: ldc           #31                 // String Opened connection with %s
      16: aload_1
      17: invokevirtual #32                 // Method org/xnio/StreamConnection.getPeerAddress:()Ljava/net/SocketAddress;
      20: invokeinterface #33,  3           // InterfaceMethod io/undertow/UndertowLogger.tracef:(Ljava/lang/String;Ljava/lang/Object;)V
      25: aload_1
      26: getstatic     #34                 // Field org/xnio/Options.READ_TIMEOUT:Lorg/xnio/Option;
      29: invokevirtual #35                 // Method org/xnio/StreamConnection.getOption:(Lorg/xnio/Option;)Ljava/lang/Object;
      32: checkcast     #36                 // class java/lang/Integer
      35: astore_2
      36: aload_0
      37: getfield      #7                  // Field undertowOptions:Lorg/xnio/OptionMap;
      40: getstatic     #37                 // Field io/undertow/UndertowOptions.IDLE_TIMEOUT:Lorg/xnio/Option;
      43: invokevirtual #38                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;)Ljava/lang/Object;
      46: checkcast     #36                 // class java/lang/Integer
      49: astore_3
      50: aload_2
      51: ifnull        61
      54: aload_2
      55: invokevirtual #39                 // Method java/lang/Integer.intValue:()I
      58: ifgt          70
      61: aload_3
      62: ifnull        70
      65: aload_3
      66: astore_2
      67: goto          100
      70: aload_2
      71: ifnull        100
      74: aload_3
      75: ifnull        100
      78: aload_3
      79: invokevirtual #39                 // Method java/lang/Integer.intValue:()I
      82: ifle          100
      85: aload_2
      86: invokevirtual #39                 // Method java/lang/Integer.intValue:()I
      89: aload_3
      90: invokevirtual #39                 // Method java/lang/Integer.intValue:()I
      93: invokestatic  #40                 // Method java/lang/Math.min:(II)I
      96: invokestatic  #41                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      99: astore_2
     100: aload_2
     101: ifnull        134
     104: aload_2
     105: invokevirtual #39                 // Method java/lang/Integer.intValue:()I
     108: ifle          134
     111: aload_1
     112: invokevirtual #42                 // Method org/xnio/StreamConnection.getSourceChannel:()Lorg/xnio/conduits/ConduitStreamSourceChannel;
     115: new           #43                 // class io/undertow/conduits/ReadTimeoutStreamSourceConduit
     118: dup
     119: aload_1
     120: invokevirtual #42                 // Method org/xnio/StreamConnection.getSourceChannel:()Lorg/xnio/conduits/ConduitStreamSourceChannel;
     123: invokevirtual #44                 // Method org/xnio/conduits/ConduitStreamSourceChannel.getConduit:()Lorg/xnio/conduits/StreamSourceConduit;
     126: aload_1
     127: aload_0
     128: invokespecial #45                 // Method io/undertow/conduits/ReadTimeoutStreamSourceConduit."<init>":(Lorg/xnio/conduits/StreamSourceConduit;Lorg/xnio/StreamConnection;Lio/undertow/server/OpenListener;)V
     131: invokevirtual #46                 // Method org/xnio/conduits/ConduitStreamSourceChannel.setConduit:(Lorg/xnio/conduits/StreamSourceConduit;)V
     134: aload_1
     135: getstatic     #47                 // Field org/xnio/Options.WRITE_TIMEOUT:Lorg/xnio/Option;
     138: invokevirtual #35                 // Method org/xnio/StreamConnection.getOption:(Lorg/xnio/Option;)Ljava/lang/Object;
     141: checkcast     #36                 // class java/lang/Integer
     144: astore        4
     146: aload         4
     148: ifnull        159
     151: aload         4
     153: invokevirtual #39                 // Method java/lang/Integer.intValue:()I
     156: ifgt          169
     159: aload_3
     160: ifnull        169
     163: aload_3
     164: astore        4
     166: goto          202
     169: aload         4
     171: ifnull        202
     174: aload_3
     175: ifnull        202
     178: aload_3
     179: invokevirtual #39                 // Method java/lang/Integer.intValue:()I
     182: ifle          202
     185: aload         4
     187: invokevirtual #39                 // Method java/lang/Integer.intValue:()I
     190: aload_3
     191: invokevirtual #39                 // Method java/lang/Integer.intValue:()I
     194: invokestatic  #40                 // Method java/lang/Math.min:(II)I
     197: invokestatic  #41                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     200: astore        4
     202: aload         4
     204: ifnull        238
     207: aload         4
     209: invokevirtual #39                 // Method java/lang/Integer.intValue:()I
     212: ifle          238
     215: aload_1
     216: invokevirtual #48                 // Method org/xnio/StreamConnection.getSinkChannel:()Lorg/xnio/conduits/ConduitStreamSinkChannel;
     219: new           #49                 // class io/undertow/conduits/WriteTimeoutStreamSinkConduit
     222: dup
     223: aload_1
     224: invokevirtual #48                 // Method org/xnio/StreamConnection.getSinkChannel:()Lorg/xnio/conduits/ConduitStreamSinkChannel;
     227: invokevirtual #50                 // Method org/xnio/conduits/ConduitStreamSinkChannel.getConduit:()Lorg/xnio/conduits/StreamSinkConduit;
     230: aload_1
     231: aload_0
     232: invokespecial #51                 // Method io/undertow/conduits/WriteTimeoutStreamSinkConduit."<init>":(Lorg/xnio/conduits/StreamSinkConduit;Lorg/xnio/StreamConnection;Lio/undertow/server/OpenListener;)V
     235: invokevirtual #52                 // Method org/xnio/conduits/ConduitStreamSinkChannel.setConduit:(Lorg/xnio/conduits/StreamSinkConduit;)V
     238: goto          255
     241: astore_2
     242: aload_1
     243: invokestatic  #54                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
     246: getstatic     #55                 // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
     249: aload_2
     250: invokeinterface #56,  2           // InterfaceMethod io/undertow/UndertowLogger.ioException:(Ljava/io/IOException;)V
     255: aload_0
     256: getfield      #28                 // Field statisticsEnabled:Z
     259: ifeq          318
     262: aload_1
     263: invokevirtual #48                 // Method org/xnio/StreamConnection.getSinkChannel:()Lorg/xnio/conduits/ConduitStreamSinkChannel;
     266: new           #57                 // class io/undertow/conduits/BytesSentStreamSinkConduit
     269: dup
     270: aload_1
     271: invokevirtual #48                 // Method org/xnio/StreamConnection.getSinkChannel:()Lorg/xnio/conduits/ConduitStreamSinkChannel;
     274: invokevirtual #50                 // Method org/xnio/conduits/ConduitStreamSinkChannel.getConduit:()Lorg/xnio/conduits/StreamSinkConduit;
     277: aload_0
     278: getfield      #26                 // Field connectorStatistics:Lio/undertow/server/ConnectorStatisticsImpl;
     281: invokevirtual #58                 // Method io/undertow/server/ConnectorStatisticsImpl.sentAccumulator:()Lio/undertow/conduits/ByteActivityCallback;
     284: invokespecial #59                 // Method io/undertow/conduits/BytesSentStreamSinkConduit."<init>":(Lorg/xnio/conduits/StreamSinkConduit;Lio/undertow/conduits/ByteActivityCallback;)V
     287: invokevirtual #52                 // Method org/xnio/conduits/ConduitStreamSinkChannel.setConduit:(Lorg/xnio/conduits/StreamSinkConduit;)V
     290: aload_1
     291: invokevirtual #42                 // Method org/xnio/StreamConnection.getSourceChannel:()Lorg/xnio/conduits/ConduitStreamSourceChannel;
     294: new           #60                 // class io/undertow/conduits/BytesReceivedStreamSourceConduit
     297: dup
     298: aload_1
     299: invokevirtual #42                 // Method org/xnio/StreamConnection.getSourceChannel:()Lorg/xnio/conduits/ConduitStreamSourceChannel;
     302: invokevirtual #44                 // Method org/xnio/conduits/ConduitStreamSourceChannel.getConduit:()Lorg/xnio/conduits/StreamSourceConduit;
     305: aload_0
     306: getfield      #26                 // Field connectorStatistics:Lio/undertow/server/ConnectorStatisticsImpl;
     309: invokevirtual #61                 // Method io/undertow/server/ConnectorStatisticsImpl.receivedAccumulator:()Lio/undertow/conduits/ByteActivityCallback;
     312: invokespecial #62                 // Method io/undertow/conduits/BytesReceivedStreamSourceConduit."<init>":(Lorg/xnio/conduits/StreamSourceConduit;Lio/undertow/conduits/ByteActivityCallback;)V
     315: invokevirtual #46                 // Method org/xnio/conduits/ConduitStreamSourceChannel.setConduit:(Lorg/xnio/conduits/StreamSourceConduit;)V
     318: new           #63                 // class io/undertow/server/protocol/ajp/AjpServerConnection
     321: dup
     322: aload_1
     323: aload_0
     324: getfield      #8                  // Field bufferPool:Lio/undertow/connector/ByteBufferPool;
     327: aload_0
     328: getfield      #64                 // Field rootHandler:Lio/undertow/server/HttpHandler;
     331: aload_0
     332: getfield      #7                  // Field undertowOptions:Lorg/xnio/OptionMap;
     335: aload_0
     336: getfield      #12                 // Field bufferSize:I
     339: invokespecial #65                 // Method io/undertow/server/protocol/ajp/AjpServerConnection."<init>":(Lorg/xnio/StreamConnection;Lio/undertow/connector/ByteBufferPool;Lio/undertow/server/HttpHandler;Lorg/xnio/OptionMap;I)V
     342: astore_2
     343: new           #66                 // class io/undertow/server/protocol/ajp/AjpReadListener
     346: dup
     347: aload_2
     348: aload_0
     349: getfield      #67                 // Field scheme:Ljava/lang/String;
     352: aload_0
     353: getfield      #23                 // Field parser:Lio/undertow/server/protocol/ajp/AjpRequestParser;
     356: aload_0
     357: getfield      #28                 // Field statisticsEnabled:Z
     360: ifeq          370
     363: aload_0
     364: getfield      #26                 // Field connectorStatistics:Lio/undertow/server/ConnectorStatisticsImpl;
     367: goto          371
     370: aconst_null
     371: invokespecial #68                 // Method io/undertow/server/protocol/ajp/AjpReadListener."<init>":(Lio/undertow/server/protocol/ajp/AjpServerConnection;Ljava/lang/String;Lio/undertow/server/protocol/ajp/AjpRequestParser;Lio/undertow/server/ConnectorStatisticsImpl;)V
     374: astore_3
     375: aload_2
     376: aload_3
     377: invokevirtual #69                 // Method io/undertow/server/protocol/ajp/AjpServerConnection.setAjpReadListener:(Lio/undertow/server/protocol/ajp/AjpReadListener;)V
     380: aload_3
     381: invokevirtual #70                 // Method io/undertow/server/protocol/ajp/AjpReadListener.startRequest:()V
     384: aload_1
     385: invokevirtual #42                 // Method org/xnio/StreamConnection.getSourceChannel:()Lorg/xnio/conduits/ConduitStreamSourceChannel;
     388: aload_3
     389: invokevirtual #71                 // Method org/xnio/conduits/ConduitStreamSourceChannel.setReadListener:(Lorg/xnio/ChannelListener;)V
     392: aload_3
     393: aload_1
     394: invokevirtual #42                 // Method org/xnio/StreamConnection.getSourceChannel:()Lorg/xnio/conduits/ConduitStreamSourceChannel;
     397: invokevirtual #72                 // Method io/undertow/server/protocol/ajp/AjpReadListener.handleEvent:(Lorg/xnio/channels/StreamSourceChannel;)V
     400: return
    Exception table:
       from    to  target type
          25   238   241   Class java/io/IOException

  public io.undertow.server.HttpHandler getRootHandler();
    Code:
       0: aload_0
       1: getfield      #64                 // Field rootHandler:Lio/undertow/server/HttpHandler;
       4: areturn

  public void setRootHandler(io.undertow.server.HttpHandler);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #64                 // Field rootHandler:Lio/undertow/server/HttpHandler;
       5: return

  public org.xnio.OptionMap getUndertowOptions();
    Code:
       0: aload_0
       1: getfield      #7                  // Field undertowOptions:Lorg/xnio/OptionMap;
       4: areturn

  public void setUndertowOptions(org.xnio.OptionMap);
    Code:
       0: aload_1
       1: ifnonnull     15
       4: getstatic     #73                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
       7: ldc           #74                 // String undertowOptions
       9: invokeinterface #75,  2           // InterfaceMethod io/undertow/UndertowMessages.argumentCannotBeNull:(Ljava/lang/String;)Ljava/lang/IllegalArgumentException;
      14: athrow
      15: aload_0
      16: aload_1
      17: putfield      #7                  // Field undertowOptions:Lorg/xnio/OptionMap;
      20: aload_0
      21: aload_1
      22: getstatic     #27                 // Field io/undertow/UndertowOptions.ENABLE_CONNECTOR_STATISTICS:Lorg/xnio/Option;
      25: iconst_0
      26: invokevirtual #21                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;Z)Z
      29: putfield      #28                 // Field statisticsEnabled:Z
      32: aload_0
      33: new           #14                 // class io/undertow/server/protocol/ajp/AjpRequestParser
      36: dup
      37: aload_1
      38: getstatic     #15                 // Field io/undertow/UndertowOptions.URL_CHARSET:Lorg/xnio/Option;
      41: getstatic     #16                 // Field java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;
      44: invokevirtual #17                 // Method java/nio/charset/Charset.name:()Ljava/lang/String;
      47: invokevirtual #18                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;Ljava/lang/Object;)Ljava/lang/Object;
      50: checkcast     #19                 // class java/lang/String
      53: aload_1
      54: getstatic     #20                 // Field io/undertow/UndertowOptions.DECODE_URL:Lorg/xnio/Option;
      57: iconst_1
      58: invokevirtual #21                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;Z)Z
      61: invokespecial #22                 // Method io/undertow/server/protocol/ajp/AjpRequestParser."<init>":(Ljava/lang/String;Z)V
      64: putfield      #23                 // Field parser:Lio/undertow/server/protocol/ajp/AjpRequestParser;
      67: return

  public io.undertow.connector.ByteBufferPool getBufferPool();
    Code:
       0: aload_0
       1: getfield      #8                  // Field bufferPool:Lio/undertow/connector/ByteBufferPool;
       4: areturn

  public io.undertow.server.ConnectorStatistics getConnectorStatistics();
    Code:
       0: aload_0
       1: getfield      #28                 // Field statisticsEnabled:Z
       4: ifeq          12
       7: aload_0
       8: getfield      #26                 // Field connectorStatistics:Lio/undertow/server/ConnectorStatisticsImpl;
      11: areturn
      12: aconst_null
      13: areturn

  public java.lang.String getScheme();
    Code:
       0: aload_0
       1: getfield      #67                 // Field scheme:Ljava/lang/String;
       4: areturn

  public void setScheme(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #67                 // Field scheme:Ljava/lang/String;
       5: return

  public void handleEvent(java.nio.channels.Channel);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #76                 // class org/xnio/StreamConnection
       5: invokevirtual #77                 // Method handleEvent:(Lorg/xnio/StreamConnection;)V
       8: return
}
