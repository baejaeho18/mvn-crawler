Compiled from "SpdyServerConnection.java"
public class io.undertow.server.protocol.spdy.SpdyServerConnection extends io.undertow.server.ServerConnection {
  private static final io.undertow.util.HttpString STATUS;

  private static final io.undertow.util.HttpString VERSION;

  private final io.undertow.server.HttpHandler rootHandler;

  private final io.undertow.protocols.spdy.SpdyChannel channel;

  private final io.undertow.protocols.spdy.SpdySynStreamStreamSourceChannel requestChannel;

  private final io.undertow.protocols.spdy.SpdyStreamSinkChannel responseChannel;

  private final org.xnio.conduits.ConduitStreamSinkChannel conduitStreamSinkChannel;

  private final org.xnio.conduits.ConduitStreamSourceChannel conduitStreamSourceChannel;

  private final org.xnio.conduits.StreamSinkConduit originalSinkConduit;

  private final org.xnio.conduits.StreamSourceConduit originalSourceConduit;

  private final org.xnio.OptionMap undertowOptions;

  private final int bufferSize;

  private io.undertow.server.SSLSessionInfo sessionInfo;

  private io.undertow.server.HttpServerExchange exchange;

  private io.undertow.server.XnioBufferPoolAdaptor poolAdaptor;

  public io.undertow.server.protocol.spdy.SpdyServerConnection(io.undertow.server.HttpHandler, io.undertow.protocols.spdy.SpdyChannel, io.undertow.protocols.spdy.SpdySynStreamStreamSourceChannel, org.xnio.OptionMap, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method io/undertow/server/ServerConnection."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field rootHandler:Lio/undertow/server/HttpHandler;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field channel:Lio/undertow/protocols/spdy/SpdyChannel;
      14: aload_0
      15: aload_3
      16: putfield      #4                  // Field requestChannel:Lio/undertow/protocols/spdy/SpdySynStreamStreamSourceChannel;
      19: aload_0
      20: aload         4
      22: putfield      #5                  // Field undertowOptions:Lorg/xnio/OptionMap;
      25: aload_0
      26: iload         5
      28: putfield      #6                  // Field bufferSize:I
      31: aload_0
      32: aload_3
      33: invokevirtual #7                  // Method io/undertow/protocols/spdy/SpdySynStreamStreamSourceChannel.getResponseChannel:()Lio/undertow/protocols/spdy/SpdySynReplyStreamSinkChannel;
      36: putfield      #8                  // Field responseChannel:Lio/undertow/protocols/spdy/SpdyStreamSinkChannel;
      39: aload_0
      40: new           #9                  // class org/xnio/conduits/StreamSinkChannelWrappingConduit
      43: dup
      44: aload_0
      45: getfield      #8                  // Field responseChannel:Lio/undertow/protocols/spdy/SpdyStreamSinkChannel;
      48: invokespecial #10                 // Method org/xnio/conduits/StreamSinkChannelWrappingConduit."<init>":(Lorg/xnio/channels/StreamSinkChannel;)V
      51: putfield      #11                 // Field originalSinkConduit:Lorg/xnio/conduits/StreamSinkConduit;
      54: aload_0
      55: new           #12                 // class org/xnio/conduits/StreamSourceChannelWrappingConduit
      58: dup
      59: aload_3
      60: invokespecial #13                 // Method org/xnio/conduits/StreamSourceChannelWrappingConduit."<init>":(Lorg/xnio/channels/StreamSourceChannel;)V
      63: putfield      #14                 // Field originalSourceConduit:Lorg/xnio/conduits/StreamSourceConduit;
      66: aload_0
      67: new           #15                 // class org/xnio/conduits/ConduitStreamSinkChannel
      70: dup
      71: aload_0
      72: getfield      #8                  // Field responseChannel:Lio/undertow/protocols/spdy/SpdyStreamSinkChannel;
      75: aload_0
      76: getfield      #11                 // Field originalSinkConduit:Lorg/xnio/conduits/StreamSinkConduit;
      79: invokespecial #16                 // Method org/xnio/conduits/ConduitStreamSinkChannel."<init>":(Lorg/xnio/channels/Configurable;Lorg/xnio/conduits/StreamSinkConduit;)V
      82: putfield      #17                 // Field conduitStreamSinkChannel:Lorg/xnio/conduits/ConduitStreamSinkChannel;
      85: aload_0
      86: new           #18                 // class org/xnio/conduits/ConduitStreamSourceChannel
      89: dup
      90: aload_3
      91: aload_0
      92: getfield      #14                 // Field originalSourceConduit:Lorg/xnio/conduits/StreamSourceConduit;
      95: invokespecial #19                 // Method org/xnio/conduits/ConduitStreamSourceChannel."<init>":(Lorg/xnio/channels/Configurable;Lorg/xnio/conduits/StreamSourceConduit;)V
      98: putfield      #20                 // Field conduitStreamSourceChannel:Lorg/xnio/conduits/ConduitStreamSourceChannel;
     101: return

  public io.undertow.server.protocol.spdy.SpdyServerConnection(io.undertow.server.HttpHandler, io.undertow.protocols.spdy.SpdyChannel, io.undertow.protocols.spdy.SpdySynStreamStreamSinkChannel, org.xnio.OptionMap, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method io/undertow/server/ServerConnection."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field rootHandler:Lio/undertow/server/HttpHandler;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field channel:Lio/undertow/protocols/spdy/SpdyChannel;
      14: aload_0
      15: aconst_null
      16: putfield      #4                  // Field requestChannel:Lio/undertow/protocols/spdy/SpdySynStreamStreamSourceChannel;
      19: aload_0
      20: aload         4
      22: putfield      #5                  // Field undertowOptions:Lorg/xnio/OptionMap;
      25: aload_0
      26: iload         5
      28: putfield      #6                  // Field bufferSize:I
      31: aload_0
      32: aload_3
      33: putfield      #8                  // Field responseChannel:Lio/undertow/protocols/spdy/SpdyStreamSinkChannel;
      36: aload_0
      37: new           #9                  // class org/xnio/conduits/StreamSinkChannelWrappingConduit
      40: dup
      41: aload_3
      42: invokespecial #10                 // Method org/xnio/conduits/StreamSinkChannelWrappingConduit."<init>":(Lorg/xnio/channels/StreamSinkChannel;)V
      45: putfield      #11                 // Field originalSinkConduit:Lorg/xnio/conduits/StreamSinkConduit;
      48: aload_0
      49: new           #12                 // class org/xnio/conduits/StreamSourceChannelWrappingConduit
      52: dup
      53: aload_0
      54: getfield      #4                  // Field requestChannel:Lio/undertow/protocols/spdy/SpdySynStreamStreamSourceChannel;
      57: invokespecial #13                 // Method org/xnio/conduits/StreamSourceChannelWrappingConduit."<init>":(Lorg/xnio/channels/StreamSourceChannel;)V
      60: putfield      #14                 // Field originalSourceConduit:Lorg/xnio/conduits/StreamSourceConduit;
      63: aload_0
      64: new           #15                 // class org/xnio/conduits/ConduitStreamSinkChannel
      67: dup
      68: aload_3
      69: aload_0
      70: getfield      #11                 // Field originalSinkConduit:Lorg/xnio/conduits/StreamSinkConduit;
      73: invokespecial #16                 // Method org/xnio/conduits/ConduitStreamSinkChannel."<init>":(Lorg/xnio/channels/Configurable;Lorg/xnio/conduits/StreamSinkConduit;)V
      76: putfield      #17                 // Field conduitStreamSinkChannel:Lorg/xnio/conduits/ConduitStreamSinkChannel;
      79: aload_0
      80: aconst_null
      81: putfield      #20                 // Field conduitStreamSourceChannel:Lorg/xnio/conduits/ConduitStreamSourceChannel;
      84: return

  void setExchange(io.undertow.server.HttpServerExchange);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #21                 // Field exchange:Lio/undertow/server/HttpServerExchange;
       5: return

  public org.xnio.Pool<java.nio.ByteBuffer> getBufferPool();
    Code:
       0: aload_0
       1: getfield      #22                 // Field poolAdaptor:Lio/undertow/server/XnioBufferPoolAdaptor;
       4: ifnonnull     22
       7: aload_0
       8: new           #23                 // class io/undertow/server/XnioBufferPoolAdaptor
      11: dup
      12: aload_0
      13: invokevirtual #24                 // Method getByteBufferPool:()Lio/undertow/connector/ByteBufferPool;
      16: invokespecial #25                 // Method io/undertow/server/XnioBufferPoolAdaptor."<init>":(Lio/undertow/connector/ByteBufferPool;)V
      19: putfield      #22                 // Field poolAdaptor:Lio/undertow/server/XnioBufferPoolAdaptor;
      22: aload_0
      23: getfield      #22                 // Field poolAdaptor:Lio/undertow/server/XnioBufferPoolAdaptor;
      26: areturn

  public io.undertow.connector.ByteBufferPool getByteBufferPool();
    Code:
       0: aload_0
       1: getfield      #3                  // Field channel:Lio/undertow/protocols/spdy/SpdyChannel;
       4: invokevirtual #26                 // Method io/undertow/protocols/spdy/SpdyChannel.getBufferPool:()Lio/undertow/connector/ByteBufferPool;
       7: areturn

  public org.xnio.XnioWorker getWorker();
    Code:
       0: aload_0
       1: getfield      #3                  // Field channel:Lio/undertow/protocols/spdy/SpdyChannel;
       4: invokevirtual #27                 // Method io/undertow/protocols/spdy/SpdyChannel.getWorker:()Lorg/xnio/XnioWorker;
       7: areturn

  public org.xnio.XnioIoThread getIoThread();
    Code:
       0: aload_0
       1: getfield      #3                  // Field channel:Lio/undertow/protocols/spdy/SpdyChannel;
       4: invokevirtual #28                 // Method io/undertow/protocols/spdy/SpdyChannel.getIoThread:()Lorg/xnio/XnioIoThread;
       7: areturn

  public io.undertow.server.HttpServerExchange sendOutOfBandResponse(io.undertow.server.HttpServerExchange);
    Code:
       0: getstatic     #29                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
       3: invokeinterface #30,  1           // InterfaceMethod io/undertow/UndertowMessages.outOfBandResponseNotSupported:()Ljava/lang/IllegalStateException;
       8: athrow

  public boolean isContinueResponseSupported();
    Code:
       0: iconst_0
       1: ireturn

  public void terminateRequestChannel(io.undertow.server.HttpServerExchange);
    Code:
       0: return

  public boolean isOpen();
    Code:
       0: aload_0
       1: getfield      #3                  // Field channel:Lio/undertow/protocols/spdy/SpdyChannel;
       4: invokevirtual #31                 // Method io/undertow/protocols/spdy/SpdyChannel.isOpen:()Z
       7: ireturn

  public boolean supportsOption(org.xnio.Option<?>);
    Code:
       0: iconst_0
       1: ireturn

  public <T> T getOption(org.xnio.Option<T>) throws java.io.IOException;
    Code:
       0: aconst_null
       1: areturn

  public <T> T setOption(org.xnio.Option<T>, T) throws java.lang.IllegalArgumentException, java.io.IOException;
    Code:
       0: aconst_null
       1: areturn

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field channel:Lio/undertow/protocols/spdy/SpdyChannel;
       4: invokevirtual #32                 // Method io/undertow/protocols/spdy/SpdyChannel.close:()V
       7: return

  public java.net.SocketAddress getPeerAddress();
    Code:
       0: aload_0
       1: getfield      #3                  // Field channel:Lio/undertow/protocols/spdy/SpdyChannel;
       4: invokevirtual #33                 // Method io/undertow/protocols/spdy/SpdyChannel.getPeerAddress:()Ljava/net/SocketAddress;
       7: areturn

  public <A extends java.net.SocketAddress> A getPeerAddress(java.lang.Class<A>);
    Code:
       0: aload_0
       1: getfield      #3                  // Field channel:Lio/undertow/protocols/spdy/SpdyChannel;
       4: aload_1
       5: invokevirtual #34                 // Method io/undertow/protocols/spdy/SpdyChannel.getPeerAddress:(Ljava/lang/Class;)Ljava/net/SocketAddress;
       8: areturn

  public org.xnio.ChannelListener$Setter<? extends org.xnio.channels.ConnectedChannel> getCloseSetter();
    Code:
       0: aload_0
       1: getfield      #3                  // Field channel:Lio/undertow/protocols/spdy/SpdyChannel;
       4: invokevirtual #35                 // Method io/undertow/protocols/spdy/SpdyChannel.getCloseSetter:()Lorg/xnio/ChannelListener$Setter;
       7: areturn

  public java.net.SocketAddress getLocalAddress();
    Code:
       0: aload_0
       1: getfield      #3                  // Field channel:Lio/undertow/protocols/spdy/SpdyChannel;
       4: invokevirtual #36                 // Method io/undertow/protocols/spdy/SpdyChannel.getLocalAddress:()Ljava/net/SocketAddress;
       7: areturn

  public <A extends java.net.SocketAddress> A getLocalAddress(java.lang.Class<A>);
    Code:
       0: aload_0
       1: getfield      #3                  // Field channel:Lio/undertow/protocols/spdy/SpdyChannel;
       4: aload_1
       5: invokevirtual #37                 // Method io/undertow/protocols/spdy/SpdyChannel.getLocalAddress:(Ljava/lang/Class;)Ljava/net/SocketAddress;
       8: areturn

  public org.xnio.OptionMap getUndertowOptions();
    Code:
       0: aload_0
       1: getfield      #5                  // Field undertowOptions:Lorg/xnio/OptionMap;
       4: areturn

  public int getBufferSize();
    Code:
       0: aload_0
       1: getfield      #6                  // Field bufferSize:I
       4: ireturn

  public io.undertow.server.SSLSessionInfo getSslSessionInfo();
    Code:
       0: aload_0
       1: getfield      #38                 // Field sessionInfo:Lio/undertow/server/SSLSessionInfo;
       4: areturn

  public void setSslSessionInfo(io.undertow.server.SSLSessionInfo);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #38                 // Field sessionInfo:Lio/undertow/server/SSLSessionInfo;
       5: return

  public void addCloseListener(io.undertow.server.ServerConnection$CloseListener);
    Code:
       0: aload_0
       1: getfield      #4                  // Field requestChannel:Lio/undertow/protocols/spdy/SpdySynStreamStreamSourceChannel;
       4: invokevirtual #39                 // Method io/undertow/protocols/spdy/SpdySynStreamStreamSourceChannel.getSpdyChannel:()Lio/undertow/protocols/spdy/SpdyChannel;
       7: new           #40                 // class io/undertow/server/protocol/spdy/SpdyServerConnection$1
      10: dup
      11: aload_0
      12: aload_1
      13: invokespecial #41                 // Method io/undertow/server/protocol/spdy/SpdyServerConnection$1."<init>":(Lio/undertow/server/protocol/spdy/SpdyServerConnection;Lio/undertow/server/ServerConnection$CloseListener;)V
      16: invokevirtual #42                 // Method io/undertow/protocols/spdy/SpdyChannel.addCloseTask:(Lorg/xnio/ChannelListener;)V
      19: return

  protected org.xnio.StreamConnection upgradeChannel();
    Code:
       0: getstatic     #29                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
       3: invokeinterface #43,  1           // InterfaceMethod io/undertow/UndertowMessages.upgradeNotSupported:()Ljava/lang/IllegalStateException;
       8: athrow

  protected org.xnio.conduits.ConduitStreamSinkChannel getSinkChannel();
    Code:
       0: aload_0
       1: getfield      #17                 // Field conduitStreamSinkChannel:Lorg/xnio/conduits/ConduitStreamSinkChannel;
       4: areturn

  protected org.xnio.conduits.ConduitStreamSourceChannel getSourceChannel();
    Code:
       0: aload_0
       1: getfield      #20                 // Field conduitStreamSourceChannel:Lorg/xnio/conduits/ConduitStreamSourceChannel;
       4: areturn

  protected org.xnio.conduits.StreamSinkConduit getSinkConduit(io.undertow.server.HttpServerExchange, org.xnio.conduits.StreamSinkConduit);
    Code:
       0: aload_0
       1: getfield      #8                  // Field responseChannel:Lio/undertow/protocols/spdy/SpdyStreamSinkChannel;
       4: instanceof    #44                 // class io/undertow/protocols/spdy/SpdySynReplyStreamSinkChannel
       7: ifeq          24
      10: aload_0
      11: getfield      #8                  // Field responseChannel:Lio/undertow/protocols/spdy/SpdyStreamSinkChannel;
      14: checkcast     #44                 // class io/undertow/protocols/spdy/SpdySynReplyStreamSinkChannel
      17: invokevirtual #45                 // Method io/undertow/protocols/spdy/SpdySynReplyStreamSinkChannel.getHeaders:()Lio/undertow/util/HeaderMap;
      20: astore_3
      21: goto          35
      24: aload_0
      25: getfield      #8                  // Field responseChannel:Lio/undertow/protocols/spdy/SpdyStreamSinkChannel;
      28: checkcast     #46                 // class io/undertow/protocols/spdy/SpdySynStreamStreamSinkChannel
      31: invokevirtual #47                 // Method io/undertow/protocols/spdy/SpdySynStreamStreamSinkChannel.getHeaders:()Lio/undertow/util/HeaderMap;
      34: astore_3
      35: aload_1
      36: invokestatic  #48                 // Method io/undertow/util/DateUtils.addDateHeaderIfRequired:(Lio/undertow/server/HttpServerExchange;)V
      39: aload_3
      40: getstatic     #49                 // Field STATUS:Lio/undertow/util/HttpString;
      43: new           #50                 // class java/lang/StringBuilder
      46: dup
      47: invokespecial #51                 // Method java/lang/StringBuilder."<init>":()V
      50: aload_1
      51: invokevirtual #52                 // Method io/undertow/server/HttpServerExchange.getStatusCode:()I
      54: invokevirtual #53                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      57: ldc           #54                 // String
      59: invokevirtual #55                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      62: aload_1
      63: invokevirtual #52                 // Method io/undertow/server/HttpServerExchange.getStatusCode:()I
      66: invokestatic  #56                 // Method io/undertow/util/StatusCodes.getReason:(I)Ljava/lang/String;
      69: invokevirtual #55                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      72: invokevirtual #57                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      75: invokevirtual #58                 // Method io/undertow/util/HeaderMap.put:(Lio/undertow/util/HttpString;Ljava/lang/String;)Lio/undertow/util/HeaderMap;
      78: pop
      79: aload_3
      80: getstatic     #59                 // Field VERSION:Lio/undertow/util/HttpString;
      83: aload_1
      84: invokevirtual #60                 // Method io/undertow/server/HttpServerExchange.getProtocol:()Lio/undertow/util/HttpString;
      87: invokevirtual #61                 // Method io/undertow/util/HttpString.toString:()Ljava/lang/String;
      90: invokevirtual #58                 // Method io/undertow/util/HeaderMap.put:(Lio/undertow/util/HttpString;Ljava/lang/String;)Lio/undertow/util/HeaderMap;
      93: pop
      94: aload_1
      95: invokestatic  #62                 // Method io/undertow/server/Connectors.flattenCookies:(Lio/undertow/server/HttpServerExchange;)V
      98: aload_0
      99: getfield      #11                 // Field originalSinkConduit:Lorg/xnio/conduits/StreamSinkConduit;
     102: areturn

  protected boolean isUpgradeSupported();
    Code:
       0: iconst_0
       1: ireturn

  protected boolean isConnectSupported();
    Code:
       0: iconst_0
       1: ireturn

  protected void exchangeComplete(io.undertow.server.HttpServerExchange);
    Code:
       0: return

  protected void setUpgradeListener(io.undertow.server.HttpUpgradeListener);
    Code:
       0: getstatic     #29                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
       3: invokeinterface #43,  1           // InterfaceMethod io/undertow/UndertowMessages.upgradeNotSupported:()Ljava/lang/IllegalStateException;
       8: athrow

  protected void setConnectListener(io.undertow.server.HttpUpgradeListener);
    Code:
       0: getstatic     #29                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
       3: invokeinterface #63,  1           // InterfaceMethod io/undertow/UndertowMessages.connectNotSupported:()Ljava/lang/IllegalStateException;
       8: athrow

  protected void maxEntitySizeUpdated(io.undertow.server.HttpServerExchange);
    Code:
       0: aload_0
       1: getfield      #4                  // Field requestChannel:Lio/undertow/protocols/spdy/SpdySynStreamStreamSourceChannel;
       4: aload_1
       5: invokevirtual #64                 // Method io/undertow/server/HttpServerExchange.getMaxEntitySize:()J
       8: invokevirtual #65                 // Method io/undertow/protocols/spdy/SpdySynStreamStreamSourceChannel.setMaxStreamSize:(J)V
      11: return

  public <T> void addToAttachmentList(io.undertow.util.AttachmentKey<io.undertow.util.AttachmentList<T>>, T);
    Code:
       0: aload_0
       1: getfield      #3                  // Field channel:Lio/undertow/protocols/spdy/SpdyChannel;
       4: aload_1
       5: aload_2
       6: invokevirtual #66                 // Method io/undertow/protocols/spdy/SpdyChannel.addToAttachmentList:(Lio/undertow/util/AttachmentKey;Ljava/lang/Object;)V
       9: return

  public <T> T removeAttachment(io.undertow.util.AttachmentKey<T>);
    Code:
       0: aload_0
       1: getfield      #3                  // Field channel:Lio/undertow/protocols/spdy/SpdyChannel;
       4: aload_1
       5: invokevirtual #67                 // Method io/undertow/protocols/spdy/SpdyChannel.removeAttachment:(Lio/undertow/util/AttachmentKey;)Ljava/lang/Object;
       8: areturn

  public <T> T putAttachment(io.undertow.util.AttachmentKey<T>, T);
    Code:
       0: aload_0
       1: getfield      #3                  // Field channel:Lio/undertow/protocols/spdy/SpdyChannel;
       4: aload_1
       5: aload_2
       6: invokevirtual #68                 // Method io/undertow/protocols/spdy/SpdyChannel.putAttachment:(Lio/undertow/util/AttachmentKey;Ljava/lang/Object;)Ljava/lang/Object;
       9: areturn

  public <T> java.util.List<T> getAttachmentList(io.undertow.util.AttachmentKey<? extends java.util.List<T>>);
    Code:
       0: aload_0
       1: getfield      #3                  // Field channel:Lio/undertow/protocols/spdy/SpdyChannel;
       4: aload_1
       5: invokevirtual #69                 // Method io/undertow/protocols/spdy/SpdyChannel.getAttachmentList:(Lio/undertow/util/AttachmentKey;)Ljava/util/List;
       8: areturn

  public <T> T getAttachment(io.undertow.util.AttachmentKey<T>);
    Code:
       0: aload_0
       1: getfield      #3                  // Field channel:Lio/undertow/protocols/spdy/SpdyChannel;
       4: aload_1
       5: invokevirtual #70                 // Method io/undertow/protocols/spdy/SpdyChannel.getAttachment:(Lio/undertow/util/AttachmentKey;)Ljava/lang/Object;
       8: areturn

  public java.lang.String getTransportProtocol();
    Code:
       0: ldc           #72                 // String spdy/3.1
       2: areturn

  public boolean pushResource(java.lang.String, io.undertow.util.HttpString, io.undertow.util.HeaderMap);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload_0
       5: getfield      #2                  // Field rootHandler:Lio/undertow/server/HttpHandler;
       8: invokevirtual #73                 // Method pushResource:(Ljava/lang/String;Lio/undertow/util/HttpString;Lio/undertow/util/HeaderMap;Lio/undertow/server/HttpHandler;)Z
      11: ireturn

  public boolean pushResource(java.lang.String, io.undertow.util.HttpString, io.undertow.util.HeaderMap, io.undertow.server.HttpHandler);
    Code:
       0: new           #74                 // class io/undertow/util/HeaderMap
       3: dup
       4: invokespecial #75                 // Method io/undertow/util/HeaderMap."<init>":()V
       7: astore        5
       9: aload         5
      11: getstatic     #76                 // Field io/undertow/server/protocol/spdy/SpdyReceiveListener.PATH:Lio/undertow/util/HttpString;
      14: aload_1
      15: invokevirtual #77                 // Method java/lang/String.toString:()Ljava/lang/String;
      18: invokevirtual #58                 // Method io/undertow/util/HeaderMap.put:(Lio/undertow/util/HttpString;Ljava/lang/String;)Lio/undertow/util/HeaderMap;
      21: pop
      22: aload         5
      24: getstatic     #78                 // Field io/undertow/server/protocol/spdy/SpdyReceiveListener.HOST:Lio/undertow/util/HttpString;
      27: aload_0
      28: getfield      #21                 // Field exchange:Lio/undertow/server/HttpServerExchange;
      31: invokevirtual #79                 // Method io/undertow/server/HttpServerExchange.getHostAndPort:()Ljava/lang/String;
      34: invokevirtual #58                 // Method io/undertow/util/HeaderMap.put:(Lio/undertow/util/HttpString;Ljava/lang/String;)Lio/undertow/util/HeaderMap;
      37: pop
      38: aload         5
      40: getstatic     #80                 // Field io/undertow/server/protocol/spdy/SpdyReceiveListener.SCHEME:Lio/undertow/util/HttpString;
      43: aload_0
      44: getfield      #21                 // Field exchange:Lio/undertow/server/HttpServerExchange;
      47: invokevirtual #81                 // Method io/undertow/server/HttpServerExchange.getRequestScheme:()Ljava/lang/String;
      50: invokevirtual #58                 // Method io/undertow/util/HeaderMap.put:(Lio/undertow/util/HttpString;Ljava/lang/String;)Lio/undertow/util/HeaderMap;
      53: pop
      54: aload         5
      56: getstatic     #82                 // Field io/undertow/server/protocol/spdy/SpdyReceiveListener.METHOD:Lio/undertow/util/HttpString;
      59: aload_2
      60: invokevirtual #61                 // Method io/undertow/util/HttpString.toString:()Ljava/lang/String;
      63: invokevirtual #58                 // Method io/undertow/util/HeaderMap.put:(Lio/undertow/util/HttpString;Ljava/lang/String;)Lio/undertow/util/HeaderMap;
      66: pop
      67: aload_0
      68: getfield      #3                  // Field channel:Lio/undertow/protocols/spdy/SpdyChannel;
      71: aload_0
      72: getfield      #4                  // Field requestChannel:Lio/undertow/protocols/spdy/SpdySynStreamStreamSourceChannel;
      75: invokevirtual #83                 // Method io/undertow/protocols/spdy/SpdySynStreamStreamSourceChannel.getStreamId:()I
      78: aload         5
      80: invokevirtual #84                 // Method io/undertow/protocols/spdy/SpdyChannel.createStream:(ILio/undertow/util/HeaderMap;)Lio/undertow/protocols/spdy/SpdySynStreamStreamSinkChannel;
      83: astore        6
      85: new           #85                 // class io/undertow/server/protocol/spdy/SpdyServerConnection
      88: dup
      89: aload_0
      90: getfield      #2                  // Field rootHandler:Lio/undertow/server/HttpHandler;
      93: aload_0
      94: getfield      #3                  // Field channel:Lio/undertow/protocols/spdy/SpdyChannel;
      97: aload         6
      99: aload_0
     100: invokevirtual #86                 // Method getUndertowOptions:()Lorg/xnio/OptionMap;
     103: aload_0
     104: invokevirtual #87                 // Method getBufferSize:()I
     107: invokespecial #88                 // Method "<init>":(Lio/undertow/server/HttpHandler;Lio/undertow/protocols/spdy/SpdyChannel;Lio/undertow/protocols/spdy/SpdySynStreamStreamSinkChannel;Lorg/xnio/OptionMap;I)V
     110: astore        7
     112: new           #89                 // class io/undertow/server/HttpServerExchange
     115: dup
     116: aload         7
     118: aload_3
     119: aload         5
     121: aload_0
     122: invokevirtual #86                 // Method getUndertowOptions:()Lorg/xnio/OptionMap;
     125: getstatic     #90                 // Field io/undertow/UndertowOptions.MAX_ENTITY_SIZE:Lorg/xnio/Option;
     128: ldc2_w        #92                 // long -1l
     131: invokevirtual #94                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;J)J
     134: invokespecial #95                 // Method io/undertow/server/HttpServerExchange."<init>":(Lio/undertow/server/ServerConnection;Lio/undertow/util/HeaderMap;Lio/undertow/util/HeaderMap;J)V
     137: astore        8
     139: aload         7
     141: aload         8
     143: invokevirtual #96                 // Method setExchange:(Lio/undertow/server/HttpServerExchange;)V
     146: aload         8
     148: aload_2
     149: invokevirtual #97                 // Method io/undertow/server/HttpServerExchange.setRequestMethod:(Lio/undertow/util/HttpString;)Lio/undertow/server/HttpServerExchange;
     152: pop
     153: aload         8
     155: getstatic     #98                 // Field io/undertow/util/Protocols.HTTP_1_1:Lio/undertow/util/HttpString;
     158: invokevirtual #99                 // Method io/undertow/server/HttpServerExchange.setProtocol:(Lio/undertow/util/HttpString;)Lio/undertow/server/HttpServerExchange;
     161: pop
     162: aload         8
     164: aload_0
     165: getfield      #21                 // Field exchange:Lio/undertow/server/HttpServerExchange;
     168: invokevirtual #81                 // Method io/undertow/server/HttpServerExchange.getRequestScheme:()Ljava/lang/String;
     171: invokevirtual #100                // Method io/undertow/server/HttpServerExchange.setRequestScheme:(Ljava/lang/String;)Lio/undertow/server/HttpServerExchange;
     174: pop
     175: aload         8
     177: aload_1
     178: aload_0
     179: invokevirtual #86                 // Method getUndertowOptions:()Lorg/xnio/OptionMap;
     182: getstatic     #101                // Field io/undertow/UndertowOptions.URL_CHARSET:Lorg/xnio/Option;
     185: getstatic     #102                // Field java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;
     188: invokevirtual #103                // Method java/nio/charset/Charset.name:()Ljava/lang/String;
     191: invokevirtual #104                // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;Ljava/lang/Object;)Ljava/lang/Object;
     194: checkcast     #105                // class java/lang/String
     197: aload_0
     198: invokevirtual #86                 // Method getUndertowOptions:()Lorg/xnio/OptionMap;
     201: getstatic     #106                // Field io/undertow/UndertowOptions.DECODE_URL:Lorg/xnio/Option;
     204: iconst_1
     205: invokevirtual #107                // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;Z)Z
     208: aload_0
     209: invokevirtual #86                 // Method getUndertowOptions:()Lorg/xnio/OptionMap;
     212: getstatic     #108                // Field io/undertow/UndertowOptions.ALLOW_ENCODED_SLASH:Lorg/xnio/Option;
     215: iconst_0
     216: invokevirtual #107                // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;Z)Z
     219: new           #50                 // class java/lang/StringBuilder
     222: dup
     223: invokespecial #51                 // Method java/lang/StringBuilder."<init>":()V
     226: invokestatic  #109                // Method io/undertow/server/Connectors.setExchangeRequestPath:(Lio/undertow/server/HttpServerExchange;Ljava/lang/String;Ljava/lang/String;ZZLjava/lang/StringBuilder;)V
     229: aload         8
     231: invokestatic  #110                // Method io/undertow/server/Connectors.terminateRequest:(Lio/undertow/server/HttpServerExchange;)V
     234: aload_0
     235: invokevirtual #111                // Method getIoThread:()Lorg/xnio/XnioIoThread;
     238: new           #112                // class io/undertow/server/protocol/spdy/SpdyServerConnection$2
     241: dup
     242: aload_0
     243: aload         4
     245: aload         8
     247: invokespecial #113                // Method io/undertow/server/protocol/spdy/SpdyServerConnection$2."<init>":(Lio/undertow/server/protocol/spdy/SpdyServerConnection;Lio/undertow/server/HttpHandler;Lio/undertow/server/HttpServerExchange;)V
     250: invokevirtual #114                // Method org/xnio/XnioIoThread.execute:(Ljava/lang/Runnable;)V
     253: iconst_1
     254: ireturn
     255: astore        6
     257: getstatic     #116                // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
     260: aload         6
     262: invokeinterface #117,  2          // InterfaceMethod io/undertow/UndertowLogger.ioException:(Ljava/io/IOException;)V
     267: iconst_0
     268: ireturn
    Exception table:
       from    to  target type
           9   254   255   Class java/io/IOException

  public boolean isPushSupported();
    Code:
       0: iconst_1
       1: ireturn

  static {};
    Code:
       0: new           #118                // class io/undertow/util/HttpString
       3: dup
       4: ldc           #119                // String :status
       6: invokespecial #120                // Method io/undertow/util/HttpString."<init>":(Ljava/lang/String;)V
       9: putstatic     #49                 // Field STATUS:Lio/undertow/util/HttpString;
      12: new           #118                // class io/undertow/util/HttpString
      15: dup
      16: ldc           #121                // String :version
      18: invokespecial #120                // Method io/undertow/util/HttpString."<init>":(Ljava/lang/String;)V
      21: putstatic     #59                 // Field VERSION:Lio/undertow/util/HttpString;
      24: return
}
