Compiled from "WebSocketHttpExchange.java"
public interface io.undertow.websockets.spi.WebSocketHttpExchange extends java.io.Closeable {
  public abstract <T> void putAttachment(io.undertow.util.AttachmentKey<T>, T);

  public abstract <T> T getAttachment(io.undertow.util.AttachmentKey<T>);

  public abstract java.lang.String getRequestHeader(java.lang.String);

  public abstract java.util.Map<java.lang.String, java.util.List<java.lang.String>> getRequestHeaders();

  public abstract java.lang.String getResponseHeader(java.lang.String);

  public abstract java.util.Map<java.lang.String, java.util.List<java.lang.String>> getResponseHeaders();

  public abstract void setResponseHeaders(java.util.Map<java.lang.String, java.util.List<java.lang.String>>);

  public abstract void setResponseHeader(java.lang.String, java.lang.String);

  public abstract void upgradeChannel(io.undertow.server.HttpUpgradeListener);

  public abstract org.xnio.IoFuture<java.lang.Void> sendData(java.nio.ByteBuffer);

  public abstract org.xnio.IoFuture<byte[]> readRequestData();

  public abstract void endExchange();

  public abstract void close();

  public abstract java.lang.String getRequestScheme();

  public abstract java.lang.String getRequestURI();

  public abstract io.undertow.connector.ByteBufferPool getBufferPool();

  public abstract java.lang.String getQueryString();

  public abstract java.lang.Object getSession();

  public abstract java.util.Map<java.lang.String, java.util.List<java.lang.String>> getRequestParameters();

  public abstract java.security.Principal getUserPrincipal();

  public abstract boolean isUserInRole(java.lang.String);

  public abstract java.util.Set<io.undertow.websockets.core.WebSocketChannel> getPeerConnections();

  public abstract org.xnio.OptionMap getOptions();
}
