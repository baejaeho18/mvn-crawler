Compiled from "SecureHashMap.java"
public final class io.undertow.util.SecureHashMap<K, V> extends java.util.AbstractMap<K, V> implements java.util.concurrent.ConcurrentMap<K, V> {
  private static final int MAX_ROW_LENGTH;

  private static final int DEFAULT_INITIAL_CAPACITY;

  private static final int MAXIMUM_CAPACITY;

  private static final float DEFAULT_LOAD_FACTOR;

  private static final io.undertow.util.SecureHashMap$Item[] RESIZED;

  private static final java.lang.Object NONEXISTENT;

  private volatile io.undertow.util.SecureHashMap$Table<K, V> table;

  private final java.util.Set<K> keySet;

  private final java.util.Set<java.util.Map$Entry<K, V>> entrySet;

  private final java.util.Collection<V> values;

  private final float loadFactor;

  private final int initialCapacity;

  private static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<io.undertow.util.SecureHashMap$Table> sizeUpdater;

  private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<io.undertow.util.SecureHashMap, io.undertow.util.SecureHashMap$Table> tableUpdater;

  private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<io.undertow.util.SecureHashMap$Item, java.lang.Object> valueUpdater;

  static final boolean $assertionsDisabled;

  public io.undertow.util.SecureHashMap(int, float);
    Code:
       0: aload_0
       1: invokespecial #11                 // Method java/util/AbstractMap."<init>":()V
       4: aload_0
       5: new           #12                 // class io/undertow/util/SecureHashMap$KeySet
       8: dup
       9: aload_0
      10: invokespecial #13                 // Method io/undertow/util/SecureHashMap$KeySet."<init>":(Lio/undertow/util/SecureHashMap;)V
      13: putfield      #14                 // Field keySet:Ljava/util/Set;
      16: aload_0
      17: new           #15                 // class io/undertow/util/SecureHashMap$EntrySet
      20: dup
      21: aload_0
      22: invokespecial #16                 // Method io/undertow/util/SecureHashMap$EntrySet."<init>":(Lio/undertow/util/SecureHashMap;)V
      25: putfield      #17                 // Field entrySet:Ljava/util/Set;
      28: aload_0
      29: new           #18                 // class io/undertow/util/SecureHashMap$Values
      32: dup
      33: aload_0
      34: invokespecial #19                 // Method io/undertow/util/SecureHashMap$Values."<init>":(Lio/undertow/util/SecureHashMap;)V
      37: putfield      #20                 // Field values:Ljava/util/Collection;
      40: iload_1
      41: ifge          54
      44: new           #21                 // class java/lang/IllegalArgumentException
      47: dup
      48: ldc           #22                 // String Initial capacity must be > 0
      50: invokespecial #23                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      53: athrow
      54: iload_1
      55: ldc           #25                 // int 1073741824
      57: if_icmple     63
      60: ldc           #25                 // int 1073741824
      62: istore_1
      63: fload_2
      64: f2d
      65: dconst_0
      66: dcmpg
      67: ifle          84
      70: fload_2
      71: invokestatic  #26                 // Method java/lang/Float.isNaN:(F)Z
      74: ifne          84
      77: fload_2
      78: f2d
      79: dconst_1
      80: dcmpl
      81: iflt          94
      84: new           #21                 // class java/lang/IllegalArgumentException
      87: dup
      88: ldc           #27                 // String Load factor must be between 0.0f and 1.0f
      90: invokespecial #23                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      93: athrow
      94: iconst_1
      95: istore_3
      96: iload_3
      97: iload_1
      98: if_icmpge     108
     101: iload_3
     102: iconst_1
     103: ishl
     104: istore_3
     105: goto          96
     108: aload_0
     109: fload_2
     110: putfield      #28                 // Field loadFactor:F
     113: aload_0
     114: iload_3
     115: putfield      #29                 // Field initialCapacity:I
     118: new           #30                 // class io/undertow/util/SecureHashMap$Table
     121: dup
     122: iload_3
     123: fload_2
     124: aconst_null
     125: invokespecial #31                 // Method io/undertow/util/SecureHashMap$Table."<init>":(IFLio/undertow/util/SecureHashMap$1;)V
     128: astore        4
     130: getstatic     #32                 // Field tableUpdater:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
     133: aload_0
     134: aload         4
     136: invokevirtual #33                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.set:(Ljava/lang/Object;Ljava/lang/Object;)V
     139: return

  public io.undertow.util.SecureHashMap(float);
    Code:
       0: aload_0
       1: bipush        16
       3: fload_1
       4: invokespecial #34                 // Method "<init>":(IF)V
       7: return

  public io.undertow.util.SecureHashMap(int);
    Code:
       0: aload_0
       1: iload_1
       2: ldc           #35                 // float 0.6f
       4: invokespecial #34                 // Method "<init>":(IF)V
       7: return

  public io.undertow.util.SecureHashMap();
    Code:
       0: aload_0
       1: bipush        16
       3: ldc           #35                 // float 0.6f
       5: invokespecial #34                 // Method "<init>":(IF)V
       8: return

  private static int hashOf(java.lang.Object);
    Code:
       0: aload_0
       1: invokevirtual #36                 // Method java/lang/Object.hashCode:()I
       4: istore_1
       5: iload_1
       6: iload_1
       7: bipush        15
       9: ishl
      10: sipush        -12931
      13: ixor
      14: iadd
      15: istore_1
      16: iload_1
      17: iload_1
      18: bipush        10
      20: iushr
      21: ixor
      22: istore_1
      23: iload_1
      24: iload_1
      25: iconst_3
      26: ishl
      27: iadd
      28: istore_1
      29: iload_1
      30: iload_1
      31: bipush        6
      33: iushr
      34: ixor
      35: istore_1
      36: iload_1
      37: iload_1
      38: iconst_2
      39: ishl
      40: iload_1
      41: bipush        14
      43: ishl
      44: iadd
      45: iadd
      46: istore_1
      47: iload_1
      48: iload_1
      49: bipush        16
      51: iushr
      52: ixor
      53: ireturn

  private static boolean equals(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: ifnonnull     16
       4: aload_1
       5: ifnonnull     12
       8: iconst_1
       9: goto          21
      12: iconst_0
      13: goto          21
      16: aload_0
      17: aload_1
      18: invokevirtual #37                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      21: ireturn

  private io.undertow.util.SecureHashMap$Item<K, V>[] addItem(io.undertow.util.SecureHashMap$Item<K, V>[], io.undertow.util.SecureHashMap$Item<K, V>);
    Code:
       0: aload_1
       1: ifnonnull     9
       4: aload_2
       5: invokestatic  #38                 // Method createRow:(Lio/undertow/util/SecureHashMap$Item;)[Lio/undertow/util/SecureHashMap$Item;
       8: areturn
       9: aload_1
      10: arraylength
      11: istore_3
      12: iload_3
      13: bipush        32
      15: if_icmple     28
      18: new           #39                 // class java/lang/SecurityException
      21: dup
      22: ldc           #40                 // String Excessive map collisions
      24: invokespecial #41                 // Method java/lang/SecurityException."<init>":(Ljava/lang/String;)V
      27: athrow
      28: aload_1
      29: iload_3
      30: iconst_1
      31: iadd
      32: invokestatic  #42                 // Method java/util/Arrays.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;
      35: checkcast     #43                 // class "[Lio/undertow/util/SecureHashMap$Item;"
      38: astore        4
      40: aload         4
      42: iload_3
      43: aload_2
      44: aastore
      45: aload         4
      47: areturn

  private static <K, V> io.undertow.util.SecureHashMap$Item<K, V>[] createRow(io.undertow.util.SecureHashMap$Item<K, V>);
    Code:
       0: iconst_1
       1: anewarray     #44                 // class io/undertow/util/SecureHashMap$Item
       4: dup
       5: iconst_0
       6: aload_0
       7: aastore
       8: areturn

  private static <K, V> io.undertow.util.SecureHashMap$Item<K, V>[] createRow(int);
    Code:
       0: iload_0
       1: anewarray     #44                 // class io/undertow/util/SecureHashMap$Item
       4: areturn

  private V doPut(K, V, boolean, io.undertow.util.SecureHashMap$Table<K, V>);
    Code:
       0: aload_1
       1: invokestatic  #45                 // Method hashOf:(Ljava/lang/Object;)I
       4: istore        5
       6: aload         4
       8: getfield      #46                 // Field io/undertow/util/SecureHashMap$Table.array:Ljava/util/concurrent/atomic/AtomicReferenceArray;
      11: astore        6
      13: iload         5
      15: aload         6
      17: invokevirtual #47                 // Method java/util/concurrent/atomic/AtomicReferenceArray.length:()I
      20: iconst_1
      21: isub
      22: iand
      23: istore        7
      25: aload         6
      27: iload         7
      29: invokevirtual #48                 // Method java/util/concurrent/atomic/AtomicReferenceArray.get:(I)Ljava/lang/Object;
      32: checkcast     #43                 // class "[Lio/undertow/util/SecureHashMap$Item;"
      35: astore        8
      37: aload         8
      39: getstatic     #49                 // Field RESIZED:[Lio/undertow/util/SecureHashMap$Item;
      42: if_acmpne     79
      45: aload_0
      46: aload_1
      47: aload_2
      48: iload_3
      49: aload         4
      51: getfield      #50                 // Field io/undertow/util/SecureHashMap$Table.resizeView:Lio/undertow/util/SecureHashMap$Table;
      54: invokespecial #7                  // Method doPut:(Ljava/lang/Object;Ljava/lang/Object;ZLio/undertow/util/SecureHashMap$Table;)Ljava/lang/Object;
      57: astore        9
      59: aload         9
      61: getstatic     #8                  // Field NONEXISTENT:Ljava/lang/Object;
      64: if_acmpne     76
      67: getstatic     #51                 // Field sizeUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      70: aload         4
      72: invokevirtual #52                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
      75: pop
      76: aload         9
      78: areturn
      79: aload         8
      81: ifnull        182
      84: aconst_null
      85: astore        9
      87: aload         8
      89: astore        10
      91: aload         10
      93: arraylength
      94: istore        11
      96: iconst_0
      97: istore        12
      99: iload         12
     101: iload         11
     103: if_icmpge     138
     106: aload         10
     108: iload         12
     110: aaload
     111: astore        13
     113: aload_1
     114: aload         13
     116: invokestatic  #53                 // Method io/undertow/util/SecureHashMap$Item.access$100:(Lio/undertow/util/SecureHashMap$Item;)Ljava/lang/Object;
     119: invokestatic  #54                 // Method equals:(Ljava/lang/Object;Ljava/lang/Object;)Z
     122: ifeq          132
     125: aload         13
     127: astore        9
     129: goto          138
     132: iinc          12, 1
     135: goto          99
     138: aload         9
     140: ifnull        182
     143: aload         9
     145: getfield      #55                 // Field io/undertow/util/SecureHashMap$Item.value:Ljava/lang/Object;
     148: astore        10
     150: aload         10
     152: getstatic     #8                  // Field NONEXISTENT:Ljava/lang/Object;
     155: if_acmpne     161
     158: goto          25
     161: iload_3
     162: ifne          179
     165: getstatic     #3                  // Field valueUpdater:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
     168: aload         9
     170: aload         10
     172: aload_2
     173: invokevirtual #56                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
     176: ifeq          143
     179: aload         10
     181: areturn
     182: new           #44                 // class io/undertow/util/SecureHashMap$Item
     185: dup
     186: aload_1
     187: iload         5
     189: aload_2
     190: invokespecial #57                 // Method io/undertow/util/SecureHashMap$Item."<init>":(Ljava/lang/Object;ILjava/lang/Object;)V
     193: astore        9
     195: aload_0
     196: aload         8
     198: aload         9
     200: invokespecial #58                 // Method addItem:([Lio/undertow/util/SecureHashMap$Item;Lio/undertow/util/SecureHashMap$Item;)[Lio/undertow/util/SecureHashMap$Item;
     203: astore        10
     205: aload         6
     207: iload         7
     209: aload         8
     211: aload         10
     213: invokevirtual #59                 // Method java/util/concurrent/atomic/AtomicReferenceArray.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z
     216: ifne          222
     219: goto          25
     222: aload         4
     224: getfield      #60                 // Field io/undertow/util/SecureHashMap$Table.threshold:I
     227: istore        11
     229: getstatic     #51                 // Field sizeUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     232: aload         4
     234: invokevirtual #61                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.incrementAndGet:(Ljava/lang/Object;)I
     237: istore        12
     239: iload         12
     241: iflt          295
     244: iload         12
     246: ldc           #62                 // int 2147483647
     248: iand
     249: iload         11
     251: if_icmple     295
     254: getstatic     #51                 // Field sizeUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     257: aload         4
     259: iload         12
     261: iload         12
     263: ldc           #63                 // int -2147483648
     265: ior
     266: invokevirtual #64                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
     269: ifeq          282
     272: aload_0
     273: aload         4
     275: invokespecial #65                 // Method resize:(Lio/undertow/util/SecureHashMap$Table;)V
     278: invokestatic  #4                  // Method nonexistent:()Ljava/lang/Object;
     281: areturn
     282: getstatic     #51                 // Field sizeUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     285: aload         4
     287: invokevirtual #66                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.get:(Ljava/lang/Object;)I
     290: istore        12
     292: goto          239
     295: invokestatic  #4                  // Method nonexistent:()Ljava/lang/Object;
     298: areturn

  private void resize(io.undertow.util.SecureHashMap$Table<K, V>);
    Code:
       0: aload_1
       1: getfield      #46                 // Field io/undertow/util/SecureHashMap$Table.array:Ljava/util/concurrent/atomic/AtomicReferenceArray;
       4: astore_2
       5: aload_2
       6: invokevirtual #47                 // Method java/util/concurrent/atomic/AtomicReferenceArray.length:()I
       9: istore_3
      10: new           #30                 // class io/undertow/util/SecureHashMap$Table
      13: dup
      14: iload_3
      15: iconst_1
      16: ishl
      17: aload_0
      18: getfield      #28                 // Field loadFactor:F
      21: aconst_null
      22: invokespecial #31                 // Method io/undertow/util/SecureHashMap$Table."<init>":(IFLio/undertow/util/SecureHashMap$1;)V
      25: astore        4
      27: aload         4
      29: ldc           #63                 // int -2147483648
      31: putfield      #67                 // Field io/undertow/util/SecureHashMap$Table.size:I
      34: aload_1
      35: aload         4
      37: putfield      #50                 // Field io/undertow/util/SecureHashMap$Table.resizeView:Lio/undertow/util/SecureHashMap$Table;
      40: aload         4
      42: getfield      #46                 // Field io/undertow/util/SecureHashMap$Table.array:Ljava/util/concurrent/atomic/AtomicReferenceArray;
      45: astore        5
      47: iconst_0
      48: istore        6
      50: iload         6
      52: iload_3
      53: if_icmpge     320
      56: aload_2
      57: iload         6
      59: invokevirtual #48                 // Method java/util/concurrent/atomic/AtomicReferenceArray.get:(I)Ljava/lang/Object;
      62: checkcast     #43                 // class "[Lio/undertow/util/SecureHashMap$Item;"
      65: astore        7
      67: aload         7
      69: ifnull        283
      72: iconst_0
      73: istore        10
      75: iconst_0
      76: istore        11
      78: aload         7
      80: astore        12
      82: aload         12
      84: arraylength
      85: istore        13
      87: iconst_0
      88: istore        14
      90: iload         14
      92: iload         13
      94: if_icmpge     129
      97: aload         12
      99: iload         14
     101: aaload
     102: astore        15
     104: aload         15
     106: invokestatic  #68                 // Method io/undertow/util/SecureHashMap$Item.access$200:(Lio/undertow/util/SecureHashMap$Item;)I
     109: iload_3
     110: iand
     111: ifne          120
     114: iinc          10, 1
     117: goto          123
     120: iinc          11, 1
     123: iinc          14, 1
     126: goto          90
     129: iload         10
     131: ifeq          205
     134: iload         10
     136: invokestatic  #69                 // Method createRow:(I)[Lio/undertow/util/SecureHashMap$Item;
     139: astore        8
     141: iconst_0
     142: istore        12
     144: aload         7
     146: astore        13
     148: aload         13
     150: arraylength
     151: istore        14
     153: iconst_0
     154: istore        15
     156: iload         15
     158: iload         14
     160: if_icmpge     196
     163: aload         13
     165: iload         15
     167: aaload
     168: astore        16
     170: aload         16
     172: invokestatic  #68                 // Method io/undertow/util/SecureHashMap$Item.access$200:(Lio/undertow/util/SecureHashMap$Item;)I
     175: iload_3
     176: iand
     177: ifne          190
     180: aload         8
     182: iload         12
     184: iinc          12, 1
     187: aload         16
     189: aastore
     190: iinc          15, 1
     193: goto          156
     196: aload         5
     198: iload         6
     200: aload         8
     202: invokevirtual #70                 // Method java/util/concurrent/atomic/AtomicReferenceArray.lazySet:(ILjava/lang/Object;)V
     205: iload         11
     207: ifeq          283
     210: iload         11
     212: invokestatic  #69                 // Method createRow:(I)[Lio/undertow/util/SecureHashMap$Item;
     215: astore        9
     217: iconst_0
     218: istore        12
     220: aload         7
     222: astore        13
     224: aload         13
     226: arraylength
     227: istore        14
     229: iconst_0
     230: istore        15
     232: iload         15
     234: iload         14
     236: if_icmpge     272
     239: aload         13
     241: iload         15
     243: aaload
     244: astore        16
     246: aload         16
     248: invokestatic  #68                 // Method io/undertow/util/SecureHashMap$Item.access$200:(Lio/undertow/util/SecureHashMap$Item;)I
     251: iload_3
     252: iand
     253: ifeq          266
     256: aload         9
     258: iload         12
     260: iinc          12, 1
     263: aload         16
     265: aastore
     266: iinc          15, 1
     269: goto          232
     272: aload         5
     274: iload         6
     276: iload_3
     277: iadd
     278: aload         9
     280: invokevirtual #70                 // Method java/util/concurrent/atomic/AtomicReferenceArray.lazySet:(ILjava/lang/Object;)V
     283: aload_2
     284: iload         6
     286: aload         7
     288: invokestatic  #71                 // Method resized:()[Lio/undertow/util/SecureHashMap$Item;
     291: invokevirtual #59                 // Method java/util/concurrent/atomic/AtomicReferenceArray.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z
     294: ifeq          56
     297: aload         7
     299: ifnull        314
     302: getstatic     #51                 // Field sizeUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     305: aload         4
     307: aload         7
     309: arraylength
     310: invokevirtual #72                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndAdd:(Ljava/lang/Object;I)I
     313: pop
     314: iinc          6, 1
     317: goto          50
     320: aload         4
     322: getfield      #67                 // Field io/undertow/util/SecureHashMap$Table.size:I
     325: istore        6
     327: iload         6
     329: ldc           #62                 // int 2147483647
     331: iand
     332: aload         4
     334: getfield      #60                 // Field io/undertow/util/SecureHashMap$Table.threshold:I
     337: if_icmplt     353
     340: aload_0
     341: aload         4
     343: putfield      #10                 // Field table:Lio/undertow/util/SecureHashMap$Table;
     346: aload_0
     347: aload         4
     349: invokespecial #65                 // Method resize:(Lio/undertow/util/SecureHashMap$Table;)V
     352: return
     353: getstatic     #51                 // Field sizeUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     356: aload         4
     358: iload         6
     360: iload         6
     362: ldc           #62                 // int 2147483647
     364: iand
     365: invokevirtual #64                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
     368: ifeq          320
     371: aload_0
     372: aload         4
     374: putfield      #10                 // Field table:Lio/undertow/util/SecureHashMap$Table;
     377: return

  private static <K, V> io.undertow.util.SecureHashMap$Item<K, V>[] remove(io.undertow.util.SecureHashMap$Item<K, V>[], int);
    Code:
       0: aload_0
       1: arraylength
       2: istore_2
       3: getstatic     #73                 // Field $assertionsDisabled:Z
       6: ifne          22
       9: iload_1
      10: iload_2
      11: if_icmplt     22
      14: new           #74                 // class java/lang/AssertionError
      17: dup
      18: invokespecial #75                 // Method java/lang/AssertionError."<init>":()V
      21: athrow
      22: iload_2
      23: iconst_1
      24: if_icmpne     29
      27: aconst_null
      28: areturn
      29: iload_2
      30: iconst_1
      31: isub
      32: anewarray     #44                 // class io/undertow/util/SecureHashMap$Item
      35: astore_3
      36: iload_1
      37: ifle          48
      40: aload_0
      41: iconst_0
      42: aload_3
      43: iconst_0
      44: iload_1
      45: invokestatic  #76                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      48: iload_1
      49: iload_2
      50: iconst_1
      51: isub
      52: if_icmpge     69
      55: aload_0
      56: iload_1
      57: iconst_1
      58: iadd
      59: aload_3
      60: iload_1
      61: iload_2
      62: iconst_1
      63: isub
      64: iload_1
      65: isub
      66: invokestatic  #76                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      69: aload_3
      70: areturn

  public V putIfAbsent(K, V);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iconst_1
       4: aload_0
       5: getfield      #10                 // Field table:Lio/undertow/util/SecureHashMap$Table;
       8: invokespecial #7                  // Method doPut:(Ljava/lang/Object;Ljava/lang/Object;ZLio/undertow/util/SecureHashMap$Table;)Ljava/lang/Object;
      11: astore_3
      12: aload_3
      13: getstatic     #8                  // Field NONEXISTENT:Ljava/lang/Object;
      16: if_acmpne     23
      19: aconst_null
      20: goto          24
      23: aload_3
      24: areturn

  public boolean remove(java.lang.Object, java.lang.Object);
    Code:
       0: aload_1
       1: astore_3
       2: aload_2
       3: astore        4
       5: aload_0
       6: aload_3
       7: aload         4
       9: aload_0
      10: getfield      #10                 // Field table:Lio/undertow/util/SecureHashMap$Table;
      13: invokespecial #6                  // Method doRemove:(Ljava/lang/Object;Ljava/lang/Object;Lio/undertow/util/SecureHashMap$Table;)Z
      16: ireturn

  private boolean doRemove(io.undertow.util.SecureHashMap$Item<K, V>, io.undertow.util.SecureHashMap$Table<K, V>);
    Code:
       0: aload_1
       1: invokestatic  #68                 // Method io/undertow/util/SecureHashMap$Item.access$200:(Lio/undertow/util/SecureHashMap$Item;)I
       4: istore_3
       5: aload_2
       6: getfield      #46                 // Field io/undertow/util/SecureHashMap$Table.array:Ljava/util/concurrent/atomic/AtomicReferenceArray;
       9: astore        4
      11: iload_3
      12: aload         4
      14: invokevirtual #47                 // Method java/util/concurrent/atomic/AtomicReferenceArray.length:()I
      17: iconst_1
      18: isub
      19: iand
      20: istore        5
      22: aload         4
      24: iload         5
      26: invokevirtual #48                 // Method java/util/concurrent/atomic/AtomicReferenceArray.get:(I)Ljava/lang/Object;
      29: checkcast     #43                 // class "[Lio/undertow/util/SecureHashMap$Item;"
      32: astore        6
      34: aload         6
      36: ifnonnull     41
      39: iconst_0
      40: ireturn
      41: aload         6
      43: getstatic     #49                 // Field RESIZED:[Lio/undertow/util/SecureHashMap$Item;
      46: if_acmpne     75
      49: aload_0
      50: aload_1
      51: aload_2
      52: getfield      #50                 // Field io/undertow/util/SecureHashMap$Table.resizeView:Lio/undertow/util/SecureHashMap$Table;
      55: invokespecial #2                  // Method doRemove:(Lio/undertow/util/SecureHashMap$Item;Lio/undertow/util/SecureHashMap$Table;)Z
      58: dup
      59: istore        7
      61: ifeq          72
      64: getstatic     #51                 // Field sizeUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      67: aload_2
      68: invokevirtual #77                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndDecrement:(Ljava/lang/Object;)I
      71: pop
      72: iload         7
      74: ireturn
      75: iconst_m1
      76: istore        7
      78: iconst_0
      79: istore        8
      81: iload         8
      83: aload         6
      85: arraylength
      86: if_icmpge     111
      89: aload_1
      90: aload         6
      92: iload         8
      94: aaload
      95: if_acmpne     105
      98: iload         8
     100: istore        7
     102: goto          111
     105: iinc          8, 1
     108: goto          81
     111: iload         7
     113: iconst_m1
     114: if_icmpne     119
     117: iconst_0
     118: ireturn
     119: aload         4
     121: iload         5
     123: aload         6
     125: aload         6
     127: iload         7
     129: invokestatic  #78                 // Method remove:([Lio/undertow/util/SecureHashMap$Item;I)[Lio/undertow/util/SecureHashMap$Item;
     132: invokevirtual #59                 // Method java/util/concurrent/atomic/AtomicReferenceArray.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z
     135: ifeq          148
     138: getstatic     #51                 // Field sizeUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     141: aload_2
     142: invokevirtual #77                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndDecrement:(Ljava/lang/Object;)I
     145: pop
     146: iconst_1
     147: ireturn
     148: goto          22

  private boolean doRemove(K, V, io.undertow.util.SecureHashMap$Table<K, V>);
    Code:
       0: aload_1
       1: invokestatic  #45                 // Method hashOf:(Ljava/lang/Object;)I
       4: istore        4
       6: aload_3
       7: getfield      #46                 // Field io/undertow/util/SecureHashMap$Table.array:Ljava/util/concurrent/atomic/AtomicReferenceArray;
      10: astore        5
      12: iload         4
      14: aload         5
      16: invokevirtual #47                 // Method java/util/concurrent/atomic/AtomicReferenceArray.length:()I
      19: iconst_1
      20: isub
      21: iand
      22: istore        6
      24: aload         5
      26: iload         6
      28: invokevirtual #48                 // Method java/util/concurrent/atomic/AtomicReferenceArray.get:(I)Ljava/lang/Object;
      31: checkcast     #43                 // class "[Lio/undertow/util/SecureHashMap$Item;"
      34: astore        7
      36: aload         7
      38: ifnonnull     43
      41: iconst_0
      42: ireturn
      43: aload         7
      45: getstatic     #49                 // Field RESIZED:[Lio/undertow/util/SecureHashMap$Item;
      48: if_acmpne     78
      51: aload_0
      52: aload_1
      53: aload_2
      54: aload_3
      55: getfield      #50                 // Field io/undertow/util/SecureHashMap$Table.resizeView:Lio/undertow/util/SecureHashMap$Table;
      58: invokespecial #6                  // Method doRemove:(Ljava/lang/Object;Ljava/lang/Object;Lio/undertow/util/SecureHashMap$Table;)Z
      61: dup
      62: istore        8
      64: ifeq          75
      67: getstatic     #51                 // Field sizeUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      70: aload_3
      71: invokevirtual #77                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndDecrement:(Ljava/lang/Object;)I
      74: pop
      75: iload         8
      77: ireturn
      78: aconst_null
      79: astore        8
      81: aconst_null
      82: astore        9
      84: iconst_m1
      85: istore        10
      87: iconst_0
      88: istore        11
      90: iload         11
      92: aload         7
      94: arraylength
      95: if_icmpge     151
      98: aload         7
     100: iload         11
     102: aaload
     103: astore        12
     105: aload_1
     106: aload         12
     108: invokestatic  #53                 // Method io/undertow/util/SecureHashMap$Item.access$100:(Lio/undertow/util/SecureHashMap$Item;)Ljava/lang/Object;
     111: invokestatic  #54                 // Method equals:(Ljava/lang/Object;Ljava/lang/Object;)Z
     114: ifeq          145
     117: aload_2
     118: aload         12
     120: getfield      #55                 // Field io/undertow/util/SecureHashMap$Item.value:Ljava/lang/Object;
     123: dup
     124: astore        9
     126: invokestatic  #54                 // Method equals:(Ljava/lang/Object;Ljava/lang/Object;)Z
     129: ifeq          143
     132: aload         12
     134: astore        8
     136: iload         11
     138: istore        10
     140: goto          151
     143: iconst_0
     144: ireturn
     145: iinc          11, 1
     148: goto          90
     151: aload         8
     153: ifnonnull     158
     156: iconst_0
     157: ireturn
     158: getstatic     #3                  // Field valueUpdater:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
     161: aload         8
     163: aload         9
     165: getstatic     #8                  // Field NONEXISTENT:Ljava/lang/Object;
     168: invokevirtual #56                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
     171: ifne          194
     174: aload_2
     175: aload         8
     177: getfield      #55                 // Field io/undertow/util/SecureHashMap$Item.value:Ljava/lang/Object;
     180: dup
     181: astore        9
     183: invokestatic  #54                 // Method equals:(Ljava/lang/Object;Ljava/lang/Object;)Z
     186: ifeq          192
     189: goto          158
     192: iconst_0
     193: ireturn
     194: aload         5
     196: iload         6
     198: aload         7
     200: aload         7
     202: iload         10
     204: invokestatic  #78                 // Method remove:([Lio/undertow/util/SecureHashMap$Item;I)[Lio/undertow/util/SecureHashMap$Item;
     207: invokevirtual #59                 // Method java/util/concurrent/atomic/AtomicReferenceArray.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z
     210: ifeq          223
     213: getstatic     #51                 // Field sizeUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     216: aload_3
     217: invokevirtual #79                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.decrementAndGet:(Ljava/lang/Object;)I
     220: pop
     221: iconst_1
     222: ireturn
     223: aload_0
     224: aload         8
     226: aload_3
     227: invokespecial #2                  // Method doRemove:(Lio/undertow/util/SecureHashMap$Item;Lio/undertow/util/SecureHashMap$Table;)Z
     230: ireturn

  public V remove(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_0
       3: getfield      #10                 // Field table:Lio/undertow/util/SecureHashMap$Table;
       6: invokespecial #9                  // Method doRemove:(Ljava/lang/Object;Lio/undertow/util/SecureHashMap$Table;)Ljava/lang/Object;
       9: astore_2
      10: aload_2
      11: getstatic     #8                  // Field NONEXISTENT:Ljava/lang/Object;
      14: if_acmpne     21
      17: aconst_null
      18: goto          22
      21: aload_2
      22: areturn

  private V doRemove(K, io.undertow.util.SecureHashMap$Table<K, V>);
    Code:
       0: aload_1
       1: invokestatic  #45                 // Method hashOf:(Ljava/lang/Object;)I
       4: istore_3
       5: aload_2
       6: getfield      #46                 // Field io/undertow/util/SecureHashMap$Table.array:Ljava/util/concurrent/atomic/AtomicReferenceArray;
       9: astore        4
      11: iload_3
      12: aload         4
      14: invokevirtual #47                 // Method java/util/concurrent/atomic/AtomicReferenceArray.length:()I
      17: iconst_1
      18: isub
      19: iand
      20: istore        5
      22: aload         4
      24: iload         5
      26: invokevirtual #48                 // Method java/util/concurrent/atomic/AtomicReferenceArray.get:(I)Ljava/lang/Object;
      29: checkcast     #43                 // class "[Lio/undertow/util/SecureHashMap$Item;"
      32: astore        6
      34: aload         6
      36: ifnonnull     43
      39: invokestatic  #4                  // Method nonexistent:()Ljava/lang/Object;
      42: areturn
      43: aload         6
      45: getstatic     #49                 // Field RESIZED:[Lio/undertow/util/SecureHashMap$Item;
      48: if_acmpne     80
      51: aload_0
      52: aload_1
      53: aload_2
      54: getfield      #50                 // Field io/undertow/util/SecureHashMap$Table.resizeView:Lio/undertow/util/SecureHashMap$Table;
      57: invokespecial #9                  // Method doRemove:(Ljava/lang/Object;Lio/undertow/util/SecureHashMap$Table;)Ljava/lang/Object;
      60: dup
      61: astore        7
      63: getstatic     #8                  // Field NONEXISTENT:Ljava/lang/Object;
      66: if_acmpeq     77
      69: getstatic     #51                 // Field sizeUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      72: aload_2
      73: invokevirtual #77                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndDecrement:(Ljava/lang/Object;)I
      76: pop
      77: aload         7
      79: areturn
      80: aconst_null
      81: astore        7
      83: iconst_m1
      84: istore        8
      86: iconst_0
      87: istore        9
      89: iload         9
      91: aload         6
      93: arraylength
      94: if_icmpge     133
      97: aload         6
      99: iload         9
     101: aaload
     102: astore        10
     104: aload_1
     105: aload         10
     107: invokestatic  #53                 // Method io/undertow/util/SecureHashMap$Item.access$100:(Lio/undertow/util/SecureHashMap$Item;)Ljava/lang/Object;
     110: invokestatic  #54                 // Method equals:(Ljava/lang/Object;Ljava/lang/Object;)Z
     113: ifeq          127
     116: aload         10
     118: astore        7
     120: iload         9
     122: istore        8
     124: goto          133
     127: iinc          9, 1
     130: goto          89
     133: aload         7
     135: ifnonnull     142
     138: invokestatic  #4                  // Method nonexistent:()Ljava/lang/Object;
     141: areturn
     142: getstatic     #3                  // Field valueUpdater:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
     145: aload         7
     147: getstatic     #8                  // Field NONEXISTENT:Ljava/lang/Object;
     150: invokevirtual #80                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     153: astore        9
     155: aload         9
     157: getstatic     #8                  // Field NONEXISTENT:Ljava/lang/Object;
     160: if_acmpne     167
     163: invokestatic  #4                  // Method nonexistent:()Ljava/lang/Object;
     166: areturn
     167: aload         4
     169: iload         5
     171: aload         6
     173: aload         6
     175: iload         8
     177: invokestatic  #78                 // Method remove:([Lio/undertow/util/SecureHashMap$Item;I)[Lio/undertow/util/SecureHashMap$Item;
     180: invokevirtual #59                 // Method java/util/concurrent/atomic/AtomicReferenceArray.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z
     183: ifeq          197
     186: getstatic     #51                 // Field sizeUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     189: aload_2
     190: invokevirtual #79                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.decrementAndGet:(Ljava/lang/Object;)I
     193: pop
     194: aload         9
     196: areturn
     197: aload_0
     198: aload         7
     200: aload_2
     201: invokespecial #2                  // Method doRemove:(Lio/undertow/util/SecureHashMap$Item;Lio/undertow/util/SecureHashMap$Table;)Z
     204: istore        10
     206: getstatic     #73                 // Field $assertionsDisabled:Z
     209: ifne          225
     212: iload         10
     214: ifne          225
     217: new           #74                 // class java/lang/AssertionError
     220: dup
     221: invokespecial #75                 // Method java/lang/AssertionError."<init>":()V
     224: athrow
     225: aload         9
     227: areturn

  private static <V> V nonexistent();
    Code:
       0: getstatic     #8                  // Field NONEXISTENT:Ljava/lang/Object;
       3: areturn

  private static <K, V> io.undertow.util.SecureHashMap$Item<K, V>[] resized();
    Code:
       0: getstatic     #49                 // Field RESIZED:[Lio/undertow/util/SecureHashMap$Item;
       3: checkcast     #43                 // class "[Lio/undertow/util/SecureHashMap$Item;"
       6: areturn

  public boolean replace(K, V, V);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload_0
       5: getfield      #10                 // Field table:Lio/undertow/util/SecureHashMap$Table;
       8: invokespecial #81                 // Method doReplace:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Lio/undertow/util/SecureHashMap$Table;)Z
      11: ireturn

  private boolean doReplace(K, V, V, io.undertow.util.SecureHashMap$Table<K, V>);
    Code:
       0: aload_1
       1: invokestatic  #45                 // Method hashOf:(Ljava/lang/Object;)I
       4: istore        5
       6: aload         4
       8: getfield      #46                 // Field io/undertow/util/SecureHashMap$Table.array:Ljava/util/concurrent/atomic/AtomicReferenceArray;
      11: astore        6
      13: iload         5
      15: aload         6
      17: invokevirtual #47                 // Method java/util/concurrent/atomic/AtomicReferenceArray.length:()I
      20: iconst_1
      21: isub
      22: iand
      23: istore        7
      25: aload         6
      27: iload         7
      29: invokevirtual #48                 // Method java/util/concurrent/atomic/AtomicReferenceArray.get:(I)Ljava/lang/Object;
      32: checkcast     #43                 // class "[Lio/undertow/util/SecureHashMap$Item;"
      35: astore        8
      37: aload         8
      39: ifnonnull     44
      42: iconst_0
      43: ireturn
      44: aload         8
      46: getstatic     #49                 // Field RESIZED:[Lio/undertow/util/SecureHashMap$Item;
      49: if_acmpne     65
      52: aload_0
      53: aload_1
      54: aload_2
      55: aload_3
      56: aload         4
      58: getfield      #50                 // Field io/undertow/util/SecureHashMap$Table.resizeView:Lio/undertow/util/SecureHashMap$Table;
      61: invokespecial #81                 // Method doReplace:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Lio/undertow/util/SecureHashMap$Table;)Z
      64: ireturn
      65: aconst_null
      66: astore        9
      68: aconst_null
      69: astore        10
      71: aload         8
      73: astore        11
      75: aload         11
      77: arraylength
      78: istore        12
      80: iconst_0
      81: istore        13
      83: iload         13
      85: iload         12
      87: if_icmpge     139
      90: aload         11
      92: iload         13
      94: aaload
      95: astore        14
      97: aload_1
      98: aload         14
     100: invokestatic  #53                 // Method io/undertow/util/SecureHashMap$Item.access$100:(Lio/undertow/util/SecureHashMap$Item;)Ljava/lang/Object;
     103: invokestatic  #54                 // Method equals:(Ljava/lang/Object;Ljava/lang/Object;)Z
     106: ifeq          133
     109: aload_2
     110: aload         14
     112: getfield      #55                 // Field io/undertow/util/SecureHashMap$Item.value:Ljava/lang/Object;
     115: dup
     116: astore        10
     118: invokestatic  #54                 // Method equals:(Ljava/lang/Object;Ljava/lang/Object;)Z
     121: ifeq          131
     124: aload         14
     126: astore        9
     128: goto          139
     131: iconst_0
     132: ireturn
     133: iinc          13, 1
     136: goto          83
     139: aload         9
     141: ifnonnull     146
     144: iconst_0
     145: ireturn
     146: getstatic     #3                  // Field valueUpdater:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
     149: aload         9
     151: aload         10
     153: aload_3
     154: invokevirtual #56                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
     157: ifne          180
     160: aload_2
     161: aload         9
     163: getfield      #55                 // Field io/undertow/util/SecureHashMap$Item.value:Ljava/lang/Object;
     166: dup
     167: astore        10
     169: invokestatic  #54                 // Method equals:(Ljava/lang/Object;Ljava/lang/Object;)Z
     172: ifeq          178
     175: goto          146
     178: iconst_0
     179: ireturn
     180: iconst_1
     181: ireturn

  public V replace(K, V);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_0
       4: getfield      #10                 // Field table:Lio/undertow/util/SecureHashMap$Table;
       7: invokespecial #82                 // Method doReplace:(Ljava/lang/Object;Ljava/lang/Object;Lio/undertow/util/SecureHashMap$Table;)Ljava/lang/Object;
      10: astore_3
      11: aload_3
      12: getstatic     #8                  // Field NONEXISTENT:Ljava/lang/Object;
      15: if_acmpne     22
      18: aconst_null
      19: goto          23
      22: aload_3
      23: areturn

  private V doReplace(K, V, io.undertow.util.SecureHashMap$Table<K, V>);
    Code:
       0: aload_1
       1: invokestatic  #45                 // Method hashOf:(Ljava/lang/Object;)I
       4: istore        4
       6: aload_3
       7: getfield      #46                 // Field io/undertow/util/SecureHashMap$Table.array:Ljava/util/concurrent/atomic/AtomicReferenceArray;
      10: astore        5
      12: iload         4
      14: aload         5
      16: invokevirtual #47                 // Method java/util/concurrent/atomic/AtomicReferenceArray.length:()I
      19: iconst_1
      20: isub
      21: iand
      22: istore        6
      24: aload         5
      26: iload         6
      28: invokevirtual #48                 // Method java/util/concurrent/atomic/AtomicReferenceArray.get:(I)Ljava/lang/Object;
      31: checkcast     #43                 // class "[Lio/undertow/util/SecureHashMap$Item;"
      34: astore        7
      36: aload         7
      38: ifnonnull     45
      41: invokestatic  #4                  // Method nonexistent:()Ljava/lang/Object;
      44: areturn
      45: aload         7
      47: getstatic     #49                 // Field RESIZED:[Lio/undertow/util/SecureHashMap$Item;
      50: if_acmpne     64
      53: aload_0
      54: aload_1
      55: aload_2
      56: aload_3
      57: getfield      #50                 // Field io/undertow/util/SecureHashMap$Table.resizeView:Lio/undertow/util/SecureHashMap$Table;
      60: invokespecial #82                 // Method doReplace:(Ljava/lang/Object;Ljava/lang/Object;Lio/undertow/util/SecureHashMap$Table;)Ljava/lang/Object;
      63: areturn
      64: aconst_null
      65: astore        8
      67: aload         7
      69: astore        9
      71: aload         9
      73: arraylength
      74: istore        10
      76: iconst_0
      77: istore        11
      79: iload         11
      81: iload         10
      83: if_icmpge     118
      86: aload         9
      88: iload         11
      90: aaload
      91: astore        12
      93: aload_1
      94: aload         12
      96: invokestatic  #53                 // Method io/undertow/util/SecureHashMap$Item.access$100:(Lio/undertow/util/SecureHashMap$Item;)Ljava/lang/Object;
      99: invokestatic  #54                 // Method equals:(Ljava/lang/Object;Ljava/lang/Object;)Z
     102: ifeq          112
     105: aload         12
     107: astore        8
     109: goto          118
     112: iinc          11, 1
     115: goto          79
     118: aload         8
     120: ifnonnull     127
     123: invokestatic  #4                  // Method nonexistent:()Ljava/lang/Object;
     126: areturn
     127: getstatic     #3                  // Field valueUpdater:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
     130: aload         8
     132: aload_2
     133: invokevirtual #80                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     136: astore        9
     138: aload         9
     140: getstatic     #8                  // Field NONEXISTENT:Ljava/lang/Object;
     143: if_acmpne     150
     146: invokestatic  #4                  // Method nonexistent:()Ljava/lang/Object;
     149: areturn
     150: aload         9
     152: areturn

  public int size();
    Code:
       0: aload_0
       1: getfield      #10                 // Field table:Lio/undertow/util/SecureHashMap$Table;
       4: getfield      #67                 // Field io/undertow/util/SecureHashMap$Table.size:I
       7: ldc           #62                 // int 2147483647
       9: iand
      10: ireturn

  private V doGet(io.undertow.util.SecureHashMap$Table<K, V>, K);
    Code:
       0: aload_1
       1: getfield      #46                 // Field io/undertow/util/SecureHashMap$Table.array:Ljava/util/concurrent/atomic/AtomicReferenceArray;
       4: astore_3
       5: aload_3
       6: aload_2
       7: invokestatic  #45                 // Method hashOf:(Ljava/lang/Object;)I
      10: aload_3
      11: invokevirtual #47                 // Method java/util/concurrent/atomic/AtomicReferenceArray.length:()I
      14: iconst_1
      15: isub
      16: iand
      17: invokevirtual #48                 // Method java/util/concurrent/atomic/AtomicReferenceArray.get:(I)Ljava/lang/Object;
      20: checkcast     #43                 // class "[Lio/undertow/util/SecureHashMap$Item;"
      23: astore        4
      25: aload         4
      27: ifnull        80
      30: aload         4
      32: astore        5
      34: aload         5
      36: arraylength
      37: istore        6
      39: iconst_0
      40: istore        7
      42: iload         7
      44: iload         6
      46: if_icmpge     80
      49: aload         5
      51: iload         7
      53: aaload
      54: astore        8
      56: aload_2
      57: aload         8
      59: invokestatic  #53                 // Method io/undertow/util/SecureHashMap$Item.access$100:(Lio/undertow/util/SecureHashMap$Item;)Ljava/lang/Object;
      62: invokestatic  #54                 // Method equals:(Ljava/lang/Object;Ljava/lang/Object;)Z
      65: ifeq          74
      68: aload         8
      70: getfield      #55                 // Field io/undertow/util/SecureHashMap$Item.value:Ljava/lang/Object;
      73: areturn
      74: iinc          7, 1
      77: goto          42
      80: invokestatic  #4                  // Method nonexistent:()Ljava/lang/Object;
      83: areturn

  public boolean containsKey(java.lang.Object);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #10                 // Field table:Lio/undertow/util/SecureHashMap$Table;
       5: aload_1
       6: invokespecial #5                  // Method doGet:(Lio/undertow/util/SecureHashMap$Table;Ljava/lang/Object;)Ljava/lang/Object;
       9: astore_2
      10: aload_2
      11: getstatic     #8                  // Field NONEXISTENT:Ljava/lang/Object;
      14: if_acmpeq     21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: ireturn

  public V get(java.lang.Object);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #10                 // Field table:Lio/undertow/util/SecureHashMap$Table;
       5: aload_1
       6: invokespecial #5                  // Method doGet:(Lio/undertow/util/SecureHashMap$Table;Ljava/lang/Object;)Ljava/lang/Object;
       9: astore_2
      10: aload_2
      11: getstatic     #8                  // Field NONEXISTENT:Ljava/lang/Object;
      14: if_acmpne     21
      17: aconst_null
      18: goto          22
      21: aload_2
      22: areturn

  public V put(K, V);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iconst_0
       4: aload_0
       5: getfield      #10                 // Field table:Lio/undertow/util/SecureHashMap$Table;
       8: invokespecial #7                  // Method doPut:(Ljava/lang/Object;Ljava/lang/Object;ZLio/undertow/util/SecureHashMap$Table;)Ljava/lang/Object;
      11: astore_3
      12: aload_3
      13: getstatic     #8                  // Field NONEXISTENT:Ljava/lang/Object;
      16: if_acmpne     23
      19: aconst_null
      20: goto          24
      23: aload_3
      24: areturn

  public void clear();
    Code:
       0: aload_0
       1: new           #30                 // class io/undertow/util/SecureHashMap$Table
       4: dup
       5: aload_0
       6: getfield      #29                 // Field initialCapacity:I
       9: aload_0
      10: getfield      #28                 // Field loadFactor:F
      13: aconst_null
      14: invokespecial #31                 // Method io/undertow/util/SecureHashMap$Table."<init>":(IFLio/undertow/util/SecureHashMap$1;)V
      17: putfield      #10                 // Field table:Lio/undertow/util/SecureHashMap$Table;
      20: return

  public java.util.Set<java.util.Map$Entry<K, V>> entrySet();
    Code:
       0: aload_0
       1: getfield      #17                 // Field entrySet:Ljava/util/Set;
       4: areturn

  public java.util.Collection<V> values();
    Code:
       0: aload_0
       1: getfield      #20                 // Field values:Ljava/util/Collection;
       4: areturn

  public java.util.Set<K> keySet();
    Code:
       0: aload_0
       1: getfield      #14                 // Field keySet:Ljava/util/Set;
       4: areturn

  private io.undertow.util.SecureHashMap<K, V>.TableIterator createRowIterator(io.undertow.util.SecureHashMap$Table<K, V>, int);
    Code:
       0: aload_1
       1: getfield      #46                 // Field io/undertow/util/SecureHashMap$Table.array:Ljava/util/concurrent/atomic/AtomicReferenceArray;
       4: astore_3
       5: aload_3
       6: iload_2
       7: invokevirtual #48                 // Method java/util/concurrent/atomic/AtomicReferenceArray.get:(I)Ljava/lang/Object;
      10: checkcast     #43                 // class "[Lio/undertow/util/SecureHashMap$Item;"
      13: astore        4
      15: aload         4
      17: getstatic     #49                 // Field RESIZED:[Lio/undertow/util/SecureHashMap$Item;
      20: if_acmpne     57
      23: aload_1
      24: getfield      #50                 // Field io/undertow/util/SecureHashMap$Table.resizeView:Lio/undertow/util/SecureHashMap$Table;
      27: astore        5
      29: new           #83                 // class io/undertow/util/SecureHashMap$BranchIterator
      32: dup
      33: aload_0
      34: aload_0
      35: aload         5
      37: iload_2
      38: invokespecial #1                  // Method createRowIterator:(Lio/undertow/util/SecureHashMap$Table;I)Lio/undertow/util/SecureHashMap$TableIterator;
      41: aload_0
      42: aload         5
      44: iload_2
      45: aload_3
      46: invokevirtual #47                 // Method java/util/concurrent/atomic/AtomicReferenceArray.length:()I
      49: iadd
      50: invokespecial #1                  // Method createRowIterator:(Lio/undertow/util/SecureHashMap$Table;I)Lio/undertow/util/SecureHashMap$TableIterator;
      53: invokespecial #84                 // Method io/undertow/util/SecureHashMap$BranchIterator."<init>":(Lio/undertow/util/SecureHashMap;Lio/undertow/util/SecureHashMap$TableIterator;Lio/undertow/util/SecureHashMap$TableIterator;)V
      56: areturn
      57: new           #85                 // class io/undertow/util/SecureHashMap$RowIterator
      60: dup
      61: aload_0
      62: aload_1
      63: aload         4
      65: invokespecial #86                 // Method io/undertow/util/SecureHashMap$RowIterator."<init>":(Lio/undertow/util/SecureHashMap;Lio/undertow/util/SecureHashMap$Table;[Lio/undertow/util/SecureHashMap$Item;)V
      68: areturn

  static io.undertow.util.SecureHashMap$Table access$300(io.undertow.util.SecureHashMap);
    Code:
       0: aload_0
       1: getfield      #10                 // Field table:Lio/undertow/util/SecureHashMap$Table;
       4: areturn

  static java.lang.Object access$400(io.undertow.util.SecureHashMap, java.lang.Object, io.undertow.util.SecureHashMap$Table);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #9                  // Method doRemove:(Ljava/lang/Object;Lio/undertow/util/SecureHashMap$Table;)Ljava/lang/Object;
       6: areturn

  static java.lang.Object access$500();
    Code:
       0: getstatic     #8                  // Field NONEXISTENT:Ljava/lang/Object;
       3: areturn

  static java.lang.Object access$600(io.undertow.util.SecureHashMap, java.lang.Object, java.lang.Object, boolean, io.undertow.util.SecureHashMap$Table);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iload_3
       4: aload         4
       6: invokespecial #7                  // Method doPut:(Ljava/lang/Object;Ljava/lang/Object;ZLio/undertow/util/SecureHashMap$Table;)Ljava/lang/Object;
       9: areturn

  static boolean access$700(io.undertow.util.SecureHashMap, java.lang.Object, java.lang.Object, io.undertow.util.SecureHashMap$Table);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokespecial #6                  // Method doRemove:(Ljava/lang/Object;Ljava/lang/Object;Lio/undertow/util/SecureHashMap$Table;)Z
       7: ireturn

  static java.lang.Object access$800(io.undertow.util.SecureHashMap, io.undertow.util.SecureHashMap$Table, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #5                  // Method doGet:(Lio/undertow/util/SecureHashMap$Table;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  static java.lang.Object access$900();
    Code:
       0: invokestatic  #4                  // Method nonexistent:()Ljava/lang/Object;
       3: areturn

  static java.util.concurrent.atomic.AtomicReferenceFieldUpdater access$1000();
    Code:
       0: getstatic     #3                  // Field valueUpdater:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: areturn

  static boolean access$1100(io.undertow.util.SecureHashMap, io.undertow.util.SecureHashMap$Item, io.undertow.util.SecureHashMap$Table);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #2                  // Method doRemove:(Lio/undertow/util/SecureHashMap$Item;Lio/undertow/util/SecureHashMap$Table;)Z
       6: ireturn

  static io.undertow.util.SecureHashMap$TableIterator access$1200(io.undertow.util.SecureHashMap, io.undertow.util.SecureHashMap$Table, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokespecial #1                  // Method createRowIterator:(Lio/undertow/util/SecureHashMap$Table;I)Lio/undertow/util/SecureHashMap$TableIterator;
       6: areturn

  static {};
    Code:
       0: ldc           #24                 // class io/undertow/util/SecureHashMap
       2: invokevirtual #87                 // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #73                 // Field $assertionsDisabled:Z
      16: iconst_0
      17: anewarray     #44                 // class io/undertow/util/SecureHashMap$Item
      20: putstatic     #49                 // Field RESIZED:[Lio/undertow/util/SecureHashMap$Item;
      23: new           #88                 // class java/lang/Object
      26: dup
      27: invokespecial #89                 // Method java/lang/Object."<init>":()V
      30: putstatic     #8                  // Field NONEXISTENT:Ljava/lang/Object;
      33: ldc           #30                 // class io/undertow/util/SecureHashMap$Table
      35: ldc           #90                 // String size
      37: invokestatic  #91                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      40: putstatic     #51                 // Field sizeUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      43: ldc           #24                 // class io/undertow/util/SecureHashMap
      45: ldc           #30                 // class io/undertow/util/SecureHashMap$Table
      47: ldc           #92                 // String table
      49: invokestatic  #93                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      52: putstatic     #32                 // Field tableUpdater:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      55: ldc           #44                 // class io/undertow/util/SecureHashMap$Item
      57: ldc           #88                 // class java/lang/Object
      59: ldc           #94                 // String value
      61: invokestatic  #93                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      64: putstatic     #3                  // Field valueUpdater:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      67: return
}
