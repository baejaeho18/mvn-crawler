Compiled from "Http2Channel.java"
public class io.undertow.protocols.http2.Http2Channel extends io.undertow.server.protocol.framed.AbstractFramedChannel<io.undertow.protocols.http2.Http2Channel, io.undertow.protocols.http2.AbstractHttp2StreamSourceChannel, io.undertow.protocols.http2.AbstractHttp2StreamSinkChannel> implements io.undertow.util.Attachable {
  public static final java.lang.String CLEARTEXT_UPGRADE_STRING;

  static final int FRAME_TYPE_DATA;

  static final int FRAME_TYPE_HEADERS;

  static final int FRAME_TYPE_PRIORITY;

  static final int FRAME_TYPE_RST_STREAM;

  static final int FRAME_TYPE_SETTINGS;

  static final int FRAME_TYPE_PUSH_PROMISE;

  static final int FRAME_TYPE_PING;

  static final int FRAME_TYPE_GOAWAY;

  static final int FRAME_TYPE_WINDOW_UPDATE;

  static final int FRAME_TYPE_CONTINUATION;

  public static final int ERROR_NO_ERROR;

  public static final int ERROR_PROTOCOL_ERROR;

  public static final int ERROR_INTERNAL_ERROR;

  public static final int ERROR_FLOW_CONTROL_ERROR;

  public static final int ERROR_SETTINGS_TIMEOUT;

  public static final int ERROR_STREAM_CLOSED;

  public static final int ERROR_FRAME_SIZE_ERROR;

  public static final int ERROR_REFUSED_STREAM;

  public static final int ERROR_CANCEL;

  public static final int ERROR_COMPRESSION_ERROR;

  public static final int ERROR_CONNECT_ERROR;

  public static final int ERROR_ENHANCE_YOUR_CALM;

  public static final int ERROR_INADEQUATE_SECURITY;

  static final int DATA_FLAG_END_STREAM;

  static final int DATA_FLAG_END_SEGMENT;

  static final int DATA_FLAG_PADDED;

  static final int PING_FRAME_LENGTH;

  static final int PING_FLAG_ACK;

  static final int HEADERS_FLAG_END_STREAM;

  static final int HEADERS_FLAG_END_SEGMENT;

  static final int HEADERS_FLAG_END_HEADERS;

  static final int HEADERS_FLAG_PADDED;

  static final int HEADERS_FLAG_PRIORITY;

  static final int SETTINGS_FLAG_ACK;

  static final int CONTINUATION_FLAG_END_HEADERS;

  static final int DEFAULT_INITIAL_WINDOW_SIZE;

  public static final byte[] PREFACE_BYTES;

  public static final int DEFAULT_MAX_FRAME_SIZE;

  public static final int MAX_FRAME_SIZE;

  private io.undertow.protocols.http2.Http2FrameHeaderParser frameParser;

  private final java.util.Map<java.lang.Integer, io.undertow.protocols.http2.Http2StreamSourceChannel> incomingStreams;

  private final java.util.Map<java.lang.Integer, io.undertow.protocols.http2.Http2StreamSinkChannel> outgoingStreams;

  private final java.lang.String protocol;

  private int encoderHeaderTableSize;

  private boolean pushEnabled;

  private volatile int initialSendWindowSize;

  private volatile int initialReceiveWindowSize;

  private int maxConcurrentStreams;

  private int sendMaxFrameSize;

  private int receiveMaxFrameSize;

  private int unackedReceiveMaxFrameSize;

  private int maxHeaderListSize;

  private volatile int receiveWindowSize;

  private volatile int sendWindowSize;

  private boolean thisGoneAway;

  private boolean peerGoneAway;

  private boolean lastDataRead;

  private int streamIdCounter;

  private int lastGoodStreamId;

  private final io.undertow.protocols.http2.HpackDecoder decoder;

  private final io.undertow.protocols.http2.HpackEncoder encoder;

  private int prefaceCount;

  private boolean initialSettingsReceived;

  private io.undertow.protocols.http2.Http2HeadersParser continuationParser;

  private boolean initialSettingsSent;

  private final java.util.Map<io.undertow.util.AttachmentKey<?>, java.lang.Object> attachments;

  public io.undertow.protocols.http2.Http2Channel(org.xnio.StreamConnection, java.lang.String, io.undertow.connector.ByteBufferPool, io.undertow.connector.PooledByteBuffer, boolean, boolean, org.xnio.OptionMap);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: iload         5
       8: iload         6
      10: iconst_1
      11: aconst_null
      12: aload         7
      14: invokespecial #1                  // Method "<init>":(Lorg/xnio/StreamConnection;Ljava/lang/String;Lio/undertow/connector/ByteBufferPool;Lio/undertow/connector/PooledByteBuffer;ZZZLjava/nio/ByteBuffer;Lorg/xnio/OptionMap;)V
      17: return

  public io.undertow.protocols.http2.Http2Channel(org.xnio.StreamConnection, java.lang.String, io.undertow.connector.ByteBufferPool, io.undertow.connector.PooledByteBuffer, boolean, boolean, boolean, org.xnio.OptionMap);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: iload         5
       8: iload         6
      10: iload         7
      12: aconst_null
      13: aload         8
      15: invokespecial #1                  // Method "<init>":(Lorg/xnio/StreamConnection;Ljava/lang/String;Lio/undertow/connector/ByteBufferPool;Lio/undertow/connector/PooledByteBuffer;ZZZLjava/nio/ByteBuffer;Lorg/xnio/OptionMap;)V
      18: return

  public io.undertow.protocols.http2.Http2Channel(org.xnio.StreamConnection, java.lang.String, io.undertow.connector.ByteBufferPool, io.undertow.connector.PooledByteBuffer, boolean, boolean, boolean, java.nio.ByteBuffer, org.xnio.OptionMap);
    Code:
       0: aload_0
       1: aload_1
       2: aload_3
       3: getstatic     #2                  // Field io/undertow/protocols/http2/Http2FramePriority.INSTANCE:Lio/undertow/protocols/http2/Http2FramePriority;
       6: aload         4
       8: aload         9
      10: invokespecial #3                  // Method io/undertow/server/protocol/framed/AbstractFramedChannel."<init>":(Lorg/xnio/StreamConnection;Lio/undertow/connector/ByteBufferPool;Lio/undertow/server/protocol/framed/FramePriority;Lio/undertow/connector/PooledByteBuffer;Lorg/xnio/OptionMap;)V
      13: aload_0
      14: new           #4                  // class java/util/concurrent/ConcurrentHashMap
      17: dup
      18: invokespecial #5                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      21: putfield      #6                  // Field incomingStreams:Ljava/util/Map;
      24: aload_0
      25: new           #4                  // class java/util/concurrent/ConcurrentHashMap
      28: dup
      29: invokespecial #5                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      32: putfield      #7                  // Field outgoingStreams:Ljava/util/Map;
      35: aload_0
      36: ldc           #9                  // int 65535
      38: putfield      #10                 // Field initialSendWindowSize:I
      41: aload_0
      42: ldc           #9                  // int 65535
      44: putfield      #11                 // Field initialReceiveWindowSize:I
      47: aload_0
      48: iconst_m1
      49: putfield      #12                 // Field maxConcurrentStreams:I
      52: aload_0
      53: sipush        16384
      56: putfield      #13                 // Field sendMaxFrameSize:I
      59: aload_0
      60: sipush        16384
      63: putfield      #14                 // Field receiveMaxFrameSize:I
      66: aload_0
      67: sipush        16384
      70: putfield      #15                 // Field unackedReceiveMaxFrameSize:I
      73: aload_0
      74: iconst_m1
      75: putfield      #16                 // Field maxHeaderListSize:I
      78: aload_0
      79: aload_0
      80: getfield      #11                 // Field initialReceiveWindowSize:I
      83: putfield      #17                 // Field receiveWindowSize:I
      86: aload_0
      87: aload_0
      88: getfield      #10                 // Field initialSendWindowSize:I
      91: putfield      #18                 // Field sendWindowSize:I
      94: aload_0
      95: iconst_0
      96: putfield      #19                 // Field thisGoneAway:Z
      99: aload_0
     100: iconst_0
     101: putfield      #20                 // Field peerGoneAway:Z
     104: aload_0
     105: iconst_0
     106: putfield      #21                 // Field lastDataRead:Z
     109: aload_0
     110: aconst_null
     111: putfield      #22                 // Field continuationParser:Lio/undertow/protocols/http2/Http2HeadersParser;
     114: aload_0
     115: iconst_0
     116: putfield      #23                 // Field initialSettingsSent:Z
     119: aload_0
     120: new           #24                 // class java/util/HashMap
     123: dup
     124: invokespecial #25                 // Method java/util/HashMap."<init>":()V
     127: invokestatic  #26                 // Method java/util/Collections.synchronizedMap:(Ljava/util/Map;)Ljava/util/Map;
     130: putfield      #27                 // Field attachments:Ljava/util/Map;
     133: aload_0
     134: iload         5
     136: ifeq          152
     139: iload         6
     141: ifeq          148
     144: iconst_3
     145: goto          153
     148: iconst_1
     149: goto          153
     152: iconst_2
     153: putfield      #28                 // Field streamIdCounter:I
     156: aload_0
     157: aload         9
     159: getstatic     #29                 // Field io/undertow/UndertowOptions.HTTP2_SETTINGS_ENABLE_PUSH:Lorg/xnio/Option;
     162: iconst_1
     163: invokevirtual #30                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;Z)Z
     166: putfield      #31                 // Field pushEnabled:Z
     169: aload_0
     170: aload         9
     172: getstatic     #32                 // Field io/undertow/UndertowOptions.HTTP2_SETTINGS_INITIAL_WINDOW_SIZE:Lorg/xnio/Option;
     175: ldc           #9                  // int 65535
     177: invokevirtual #33                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;I)I
     180: putfield      #11                 // Field initialReceiveWindowSize:I
     183: aload_0
     184: aload_2
     185: ifnonnull     193
     188: ldc           #35                 // String h2
     190: goto          194
     193: aload_2
     194: putfield      #36                 // Field protocol:Ljava/lang/String;
     197: aload_0
     198: aload         9
     200: getstatic     #37                 // Field io/undertow/UndertowOptions.HTTP2_SETTINGS_HEADER_TABLE_SIZE:Lorg/xnio/Option;
     203: sipush        4096
     206: invokevirtual #33                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;I)I
     209: putfield      #39                 // Field encoderHeaderTableSize:I
     212: aload_0
     213: aload         9
     215: getstatic     #40                 // Field io/undertow/UndertowOptions.HTTP2_SETTINGS_MAX_FRAME_SIZE:Lorg/xnio/Option;
     218: sipush        16384
     221: invokevirtual #33                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;I)I
     224: putfield      #14                 // Field receiveMaxFrameSize:I
     227: aload_0
     228: new           #41                 // class io/undertow/protocols/http2/HpackDecoder
     231: dup
     232: sipush        4096
     235: invokespecial #42                 // Method io/undertow/protocols/http2/HpackDecoder."<init>":(I)V
     238: putfield      #43                 // Field decoder:Lio/undertow/protocols/http2/HpackDecoder;
     241: aload_0
     242: new           #44                 // class io/undertow/protocols/http2/HpackEncoder
     245: dup
     246: aload_0
     247: getfield      #39                 // Field encoderHeaderTableSize:I
     250: invokespecial #45                 // Method io/undertow/protocols/http2/HpackEncoder."<init>":(I)V
     253: putfield      #46                 // Field encoder:Lio/undertow/protocols/http2/HpackEncoder;
     256: iload         7
     258: ifne          269
     261: aload_0
     262: getstatic     #47                 // Field PREFACE_BYTES:[B
     265: arraylength
     266: putfield      #48                 // Field prefaceCount:I
     269: iload         5
     271: ifeq          298
     274: aload_0
     275: invokespecial #49                 // Method sendPreface:()V
     278: aload_0
     279: getstatic     #47                 // Field PREFACE_BYTES:[B
     282: arraylength
     283: putfield      #48                 // Field prefaceCount:I
     286: aload_0
     287: invokespecial #50                 // Method sendSettings:()V
     290: aload_0
     291: iconst_1
     292: putfield      #23                 // Field initialSettingsSent:Z
     295: goto          312
     298: iload         6
     300: ifeq          312
     303: aload_0
     304: invokespecial #50                 // Method sendSettings:()V
     307: aload_0
     308: iconst_1
     309: putfield      #23                 // Field initialSettingsSent:Z
     312: aload         8
     314: ifnull        389
     317: new           #51                 // class io/undertow/protocols/http2/Http2SettingsParser
     320: dup
     321: aload         8
     323: invokevirtual #52                 // Method java/nio/ByteBuffer.remaining:()I
     326: invokespecial #53                 // Method io/undertow/protocols/http2/Http2SettingsParser."<init>":(I)V
     329: astore        10
     331: new           #54                 // class io/undertow/protocols/http2/Http2FrameHeaderParser
     334: dup
     335: aload_0
     336: aconst_null
     337: invokespecial #55                 // Method io/undertow/protocols/http2/Http2FrameHeaderParser."<init>":(Lio/undertow/protocols/http2/Http2Channel;Lio/undertow/protocols/http2/Http2HeadersParser;)V
     340: astore        11
     342: aload         11
     344: aload         8
     346: invokevirtual #52                 // Method java/nio/ByteBuffer.remaining:()I
     349: putfield      #56                 // Field io/undertow/protocols/http2/Http2FrameHeaderParser.length:I
     352: aload         10
     354: aload         8
     356: aload         11
     358: invokevirtual #57                 // Method io/undertow/protocols/http2/Http2SettingsParser.parse:(Ljava/nio/ByteBuffer;Lio/undertow/protocols/http2/Http2FrameHeaderParser;)V
     361: aload_0
     362: aload         10
     364: invokevirtual #58                 // Method io/undertow/protocols/http2/Http2SettingsParser.getSettings:()Ljava/util/List;
     367: invokevirtual #59                 // Method updateSettings:(Ljava/util/List;)V
     370: goto          389
     373: astore        11
     375: aload_1
     376: invokestatic  #61                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
     379: new           #62                 // class java/lang/RuntimeException
     382: dup
     383: aload         11
     385: invokespecial #63                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/Throwable;)V
     388: athrow
     389: return
    Exception table:
       from    to  target type
         331   370   373   Class java/io/IOException

  private void sendSettings();
    Code:
       0: new           #64                 // class java/util/ArrayList
       3: dup
       4: invokespecial #65                 // Method java/util/ArrayList."<init>":()V
       7: astore_1
       8: aload_1
       9: new           #66                 // class io/undertow/protocols/http2/Http2Setting
      12: dup
      13: iconst_1
      14: aload_0
      15: getfield      #39                 // Field encoderHeaderTableSize:I
      18: invokespecial #67                 // Method io/undertow/protocols/http2/Http2Setting."<init>":(II)V
      21: invokeinterface #68,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      26: pop
      27: aload_0
      28: invokevirtual #69                 // Method isClient:()Z
      31: ifeq          61
      34: aload_1
      35: new           #66                 // class io/undertow/protocols/http2/Http2Setting
      38: dup
      39: iconst_2
      40: aload_0
      41: getfield      #31                 // Field pushEnabled:Z
      44: ifeq          51
      47: iconst_1
      48: goto          52
      51: iconst_0
      52: invokespecial #67                 // Method io/undertow/protocols/http2/Http2Setting."<init>":(II)V
      55: invokeinterface #68,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      60: pop
      61: aload_1
      62: new           #66                 // class io/undertow/protocols/http2/Http2Setting
      65: dup
      66: iconst_5
      67: aload_0
      68: getfield      #14                 // Field receiveMaxFrameSize:I
      71: invokespecial #67                 // Method io/undertow/protocols/http2/Http2Setting."<init>":(II)V
      74: invokeinterface #68,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      79: pop
      80: aload_1
      81: new           #66                 // class io/undertow/protocols/http2/Http2Setting
      84: dup
      85: iconst_4
      86: aload_0
      87: getfield      #11                 // Field initialReceiveWindowSize:I
      90: invokespecial #67                 // Method io/undertow/protocols/http2/Http2Setting."<init>":(II)V
      93: invokeinterface #68,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      98: pop
      99: new           #70                 // class io/undertow/protocols/http2/Http2SettingsStreamSinkChannel
     102: dup
     103: aload_0
     104: aload_1
     105: invokespecial #71                 // Method io/undertow/protocols/http2/Http2SettingsStreamSinkChannel."<init>":(Lio/undertow/protocols/http2/Http2Channel;Ljava/util/List;)V
     108: astore_2
     109: aload_0
     110: aload_2
     111: invokespecial #72                 // Method flushChannelIgnoreFailure:(Lorg/xnio/channels/StreamSinkChannel;)V
     114: return

  private void sendSettingsAck();
    Code:
       0: aload_0
       1: getfield      #23                 // Field initialSettingsSent:Z
       4: ifne          16
       7: aload_0
       8: invokespecial #50                 // Method sendSettings:()V
      11: aload_0
      12: iconst_1
      13: putfield      #23                 // Field initialSettingsSent:Z
      16: new           #70                 // class io/undertow/protocols/http2/Http2SettingsStreamSinkChannel
      19: dup
      20: aload_0
      21: invokespecial #73                 // Method io/undertow/protocols/http2/Http2SettingsStreamSinkChannel."<init>":(Lio/undertow/protocols/http2/Http2Channel;)V
      24: astore_1
      25: aload_0
      26: aload_1
      27: invokespecial #72                 // Method flushChannelIgnoreFailure:(Lorg/xnio/channels/StreamSinkChannel;)V
      30: return

  private void flushChannelIgnoreFailure(org.xnio.channels.StreamSinkChannel);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #74                 // Method flushChannel:(Lorg/xnio/channels/StreamSinkChannel;)V
       5: goto          18
       8: astore_2
       9: getstatic     #75                 // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
      12: aload_2
      13: invokeinterface #76,  2           // InterfaceMethod io/undertow/UndertowLogger.ioException:(Ljava/io/IOException;)V
      18: return
    Exception table:
       from    to  target type
           0     5     8   Class java/io/IOException

  private void flushChannel(org.xnio.channels.StreamSinkChannel) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokeinterface #77,  1           // InterfaceMethod org/xnio/channels/StreamSinkChannel.shutdownWrites:()V
       6: aload_1
       7: invokeinterface #78,  1           // InterfaceMethod org/xnio/channels/StreamSinkChannel.flush:()Z
      12: ifne          40
      15: aload_1
      16: invokeinterface #79,  1           // InterfaceMethod org/xnio/channels/StreamSinkChannel.getWriteSetter:()Lorg/xnio/ChannelListener$Setter;
      21: aconst_null
      22: aload_0
      23: invokevirtual #80                 // Method writeExceptionHandler:()Lorg/xnio/ChannelExceptionHandler;
      26: invokestatic  #81                 // Method org/xnio/ChannelListeners.flushingChannelListener:(Lorg/xnio/ChannelListener;Lorg/xnio/ChannelExceptionHandler;)Lorg/xnio/ChannelListener;
      29: invokeinterface #82,  2           // InterfaceMethod org/xnio/ChannelListener$Setter.set:(Lorg/xnio/ChannelListener;)V
      34: aload_1
      35: invokeinterface #83,  1           // InterfaceMethod org/xnio/channels/StreamSinkChannel.resumeWrites:()V
      40: return

  private void sendPreface();
    Code:
       0: new           #84                 // class io/undertow/protocols/http2/Http2PrefaceStreamSinkChannel
       3: dup
       4: aload_0
       5: invokespecial #85                 // Method io/undertow/protocols/http2/Http2PrefaceStreamSinkChannel."<init>":(Lio/undertow/protocols/http2/Http2Channel;)V
       8: astore_1
       9: aload_0
      10: aload_1
      11: invokespecial #72                 // Method flushChannelIgnoreFailure:(Lorg/xnio/channels/StreamSinkChannel;)V
      14: return

  protected io.undertow.protocols.http2.AbstractHttp2StreamSourceChannel createChannel(io.undertow.server.protocol.framed.FrameHeaderData, io.undertow.connector.PooledByteBuffer) throws java.io.IOException;
    Code:
       0: aload_1
       1: checkcast     #54                 // class io/undertow/protocols/http2/Http2FrameHeaderParser
       4: astore_3
       5: aload_3
       6: getfield      #86                 // Field io/undertow/protocols/http2/Http2FrameHeaderParser.type:I
       9: ifne          57
      12: aload_3
      13: getfield      #87                 // Field io/undertow/protocols/http2/Http2FrameHeaderParser.streamId:I
      16: ifne          27
      19: aload_0
      20: iconst_1
      21: invokevirtual #88                 // Method sendGoAway:(I)V
      24: goto          36
      27: aload_0
      28: aload_3
      29: getfield      #87                 // Field io/undertow/protocols/http2/Http2FrameHeaderParser.streamId:I
      32: iconst_5
      33: invokevirtual #89                 // Method sendRstStream:(II)V
      36: getstatic     #90                 // Field io/undertow/UndertowLogger.REQUEST_LOGGER:Lio/undertow/UndertowLogger;
      39: ldc           #91                 // String Dropping Frame of length %s for stream %s
      41: aload_3
      42: invokevirtual #92                 // Method io/undertow/protocols/http2/Http2FrameHeaderParser.getFrameLength:()J
      45: aload_3
      46: getfield      #87                 // Field io/undertow/protocols/http2/Http2FrameHeaderParser.streamId:I
      49: i2l
      50: invokeinterface #93,  6           // InterfaceMethod io/undertow/UndertowLogger.tracef:(Ljava/lang/String;JJ)V
      55: aconst_null
      56: areturn
      57: aload_3
      58: getfield      #86                 // Field io/undertow/protocols/http2/Http2FrameHeaderParser.type:I
      61: tableswitch   { // 1 to 9
                     1: 184
                     2: 698
                     3: 333
                     4: 408
                     5: 112
                     6: 473
                     7: 534
                     8: 668
                     9: 112
               default: 738
          }
     112: aload_3
     113: getfield      #94                 // Field io/undertow/protocols/http2/Http2FrameHeaderParser.parser:Lio/undertow/protocols/http2/Http2PushBackParser;
     116: instanceof    #95                 // class io/undertow/protocols/http2/Http2PushPromiseParser
     119: ifeq          184
     122: aload_0
     123: invokevirtual #69                 // Method isClient:()Z
     126: ifne          143
     129: aload_0
     130: iconst_1
     131: invokevirtual #88                 // Method sendGoAway:(I)V
     134: getstatic     #96                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
     137: invokeinterface #97,  1           // InterfaceMethod io/undertow/UndertowMessages.serverReceivedPushPromise:()Ljava/io/IOException;
     142: athrow
     143: aload_3
     144: getfield      #94                 // Field io/undertow/protocols/http2/Http2FrameHeaderParser.parser:Lio/undertow/protocols/http2/Http2PushBackParser;
     147: checkcast     #95                 // class io/undertow/protocols/http2/Http2PushPromiseParser
     150: astore        5
     152: new           #98                 // class io/undertow/protocols/http2/Http2PushPromiseStreamSourceChannel
     155: dup
     156: aload_0
     157: aload_2
     158: aload_3
     159: invokevirtual #92                 // Method io/undertow/protocols/http2/Http2FrameHeaderParser.getFrameLength:()J
     162: aload         5
     164: invokevirtual #99                 // Method io/undertow/protocols/http2/Http2PushPromiseParser.getHeaderMap:()Lio/undertow/util/HeaderMap;
     167: aload         5
     169: invokevirtual #100                // Method io/undertow/protocols/http2/Http2PushPromiseParser.getPromisedStreamId:()I
     172: aload_3
     173: getfield      #87                 // Field io/undertow/protocols/http2/Http2FrameHeaderParser.streamId:I
     176: invokespecial #101                // Method io/undertow/protocols/http2/Http2PushPromiseStreamSourceChannel."<init>":(Lio/undertow/protocols/http2/Http2Channel;Lio/undertow/connector/PooledByteBuffer;JLio/undertow/util/HeaderMap;II)V
     179: astore        4
     181: goto          764
     184: aload_3
     185: getfield      #94                 // Field io/undertow/protocols/http2/Http2FrameHeaderParser.parser:Lio/undertow/protocols/http2/Http2PushBackParser;
     188: checkcast     #102                // class io/undertow/protocols/http2/Http2HeadersParser
     191: astore        5
     193: new           #103                // class io/undertow/protocols/http2/Http2StreamSourceChannel
     196: dup
     197: aload_0
     198: aload_2
     199: aload_1
     200: invokeinterface #104,  1          // InterfaceMethod io/undertow/server/protocol/framed/FrameHeaderData.getFrameLength:()J
     205: aload         5
     207: invokevirtual #105                // Method io/undertow/protocols/http2/Http2HeadersParser.getHeaderMap:()Lio/undertow/util/HeaderMap;
     210: aload_3
     211: getfield      #87                 // Field io/undertow/protocols/http2/Http2FrameHeaderParser.streamId:I
     214: invokespecial #106                // Method io/undertow/protocols/http2/Http2StreamSourceChannel."<init>":(Lio/undertow/protocols/http2/Http2Channel;Lio/undertow/connector/PooledByteBuffer;JLio/undertow/util/HeaderMap;I)V
     217: astore        4
     219: aload_0
     220: aload_0
     221: getfield      #107                // Field lastGoodStreamId:I
     224: aload_3
     225: getfield      #87                 // Field io/undertow/protocols/http2/Http2FrameHeaderParser.streamId:I
     228: invokestatic  #108                // Method java/lang/Math.max:(II)I
     231: putfield      #107                // Field lastGoodStreamId:I
     234: aload         5
     236: invokevirtual #109                // Method io/undertow/protocols/http2/Http2HeadersParser.isHeadersEndStream:()Z
     239: ifeq          261
     242: aload_3
     243: getfield      #110                // Field io/undertow/protocols/http2/Http2FrameHeaderParser.flags:I
     246: iconst_4
     247: invokestatic  #111                // Method org/xnio/Bits.allAreSet:(II)Z
     250: ifeq          261
     253: aload         4
     255: invokevirtual #112                // Method io/undertow/protocols/http2/AbstractHttp2StreamSourceChannel.lastFrame:()V
     258: goto          283
     261: aload_0
     262: getfield      #6                  // Field incomingStreams:Ljava/util/Map;
     265: aload_3
     266: getfield      #87                 // Field io/undertow/protocols/http2/Http2FrameHeaderParser.streamId:I
     269: invokestatic  #113                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     272: aload         4
     274: checkcast     #103                // class io/undertow/protocols/http2/Http2StreamSourceChannel
     277: invokeinterface #114,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     282: pop
     283: aload         5
     285: invokevirtual #115                // Method io/undertow/protocols/http2/Http2HeadersParser.isInvalid:()Z
     288: ifeq          310
     291: aload         4
     293: iconst_1
     294: invokevirtual #116                // Method io/undertow/protocols/http2/AbstractHttp2StreamSourceChannel.rstStream:(I)V
     297: aload_0
     298: aload_3
     299: getfield      #87                 // Field io/undertow/protocols/http2/Http2FrameHeaderParser.streamId:I
     302: bipush        8
     304: invokevirtual #89                 // Method sendRstStream:(II)V
     307: aconst_null
     308: astore        4
     310: aload         5
     312: invokevirtual #117                // Method io/undertow/protocols/http2/Http2HeadersParser.getDependentStreamId:()I
     315: aload_3
     316: getfield      #87                 // Field io/undertow/protocols/http2/Http2FrameHeaderParser.streamId:I
     319: if_icmpne     764
     322: aload_0
     323: aload_3
     324: getfield      #87                 // Field io/undertow/protocols/http2/Http2FrameHeaderParser.streamId:I
     327: iconst_1
     328: invokevirtual #89                 // Method sendRstStream:(II)V
     331: aconst_null
     332: areturn
     333: aload_3
     334: getfield      #94                 // Field io/undertow/protocols/http2/Http2FrameHeaderParser.parser:Lio/undertow/protocols/http2/Http2PushBackParser;
     337: checkcast     #118                // class io/undertow/protocols/http2/Http2RstStreamParser
     340: astore        5
     342: aload_3
     343: getfield      #87                 // Field io/undertow/protocols/http2/Http2FrameHeaderParser.streamId:I
     346: ifne          377
     349: aload_2
     350: ifnull        359
     353: aload_2
     354: invokeinterface #119,  1          // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
     359: new           #120                // class io/undertow/protocols/http2/ConnectionErrorException
     362: dup
     363: iconst_1
     364: getstatic     #96                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
     367: iconst_3
     368: invokeinterface #121,  2          // InterfaceMethod io/undertow/UndertowMessages.streamIdMustNotBeZeroForFrameType:(I)Ljava/lang/String;
     373: invokespecial #122                // Method io/undertow/protocols/http2/ConnectionErrorException."<init>":(ILjava/lang/String;)V
     376: athrow
     377: new           #123                // class io/undertow/protocols/http2/Http2RstStreamStreamSourceChannel
     380: dup
     381: aload_0
     382: aload_2
     383: aload         5
     385: invokevirtual #124                // Method io/undertow/protocols/http2/Http2RstStreamParser.getErrorCode:()I
     388: aload_3
     389: getfield      #87                 // Field io/undertow/protocols/http2/Http2FrameHeaderParser.streamId:I
     392: invokespecial #125                // Method io/undertow/protocols/http2/Http2RstStreamStreamSourceChannel."<init>":(Lio/undertow/protocols/http2/Http2Channel;Lio/undertow/connector/PooledByteBuffer;II)V
     395: astore        4
     397: aload_0
     398: aload_3
     399: getfield      #87                 // Field io/undertow/protocols/http2/Http2FrameHeaderParser.streamId:I
     402: invokespecial #126                // Method handleRstStream:(I)V
     405: goto          764
     408: aload_3
     409: getfield      #110                // Field io/undertow/protocols/http2/Http2FrameHeaderParser.flags:I
     412: iconst_1
     413: invokestatic  #127                // Method org/xnio/Bits.anyAreSet:(II)Z
     416: ifne          437
     419: aload_0
     420: aload_3
     421: getfield      #94                 // Field io/undertow/protocols/http2/Http2FrameHeaderParser.parser:Lio/undertow/protocols/http2/Http2PushBackParser;
     424: checkcast     #51                 // class io/undertow/protocols/http2/Http2SettingsParser
     427: invokevirtual #58                 // Method io/undertow/protocols/http2/Http2SettingsParser.getSettings:()Ljava/util/List;
     430: invokevirtual #59                 // Method updateSettings:(Ljava/util/List;)V
     433: aload_0
     434: invokespecial #128                // Method sendSettingsAck:()V
     437: new           #129                // class io/undertow/protocols/http2/Http2SettingsStreamSourceChannel
     440: dup
     441: aload_0
     442: aload_2
     443: aload_3
     444: invokevirtual #92                 // Method io/undertow/protocols/http2/Http2FrameHeaderParser.getFrameLength:()J
     447: aload_3
     448: getfield      #94                 // Field io/undertow/protocols/http2/Http2FrameHeaderParser.parser:Lio/undertow/protocols/http2/Http2PushBackParser;
     451: checkcast     #51                 // class io/undertow/protocols/http2/Http2SettingsParser
     454: invokevirtual #58                 // Method io/undertow/protocols/http2/Http2SettingsParser.getSettings:()Ljava/util/List;
     457: invokespecial #130                // Method io/undertow/protocols/http2/Http2SettingsStreamSourceChannel."<init>":(Lio/undertow/protocols/http2/Http2Channel;Lio/undertow/connector/PooledByteBuffer;JLjava/util/List;)V
     460: astore        4
     462: aload_0
     463: aload_0
     464: getfield      #14                 // Field receiveMaxFrameSize:I
     467: putfield      #15                 // Field unackedReceiveMaxFrameSize:I
     470: goto          764
     473: aload_3
     474: getfield      #94                 // Field io/undertow/protocols/http2/Http2FrameHeaderParser.parser:Lio/undertow/protocols/http2/Http2PushBackParser;
     477: checkcast     #131                // class io/undertow/protocols/http2/Http2PingParser
     480: astore        5
     482: aload_2
     483: invokeinterface #119,  1          // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
     488: aload_3
     489: getfield      #110                // Field io/undertow/protocols/http2/Http2FrameHeaderParser.flags:I
     492: iconst_1
     493: invokestatic  #127                // Method org/xnio/Bits.anyAreSet:(II)Z
     496: istore        6
     498: new           #132                // class io/undertow/protocols/http2/Http2PingStreamSourceChannel
     501: dup
     502: aload_0
     503: aload         5
     505: invokevirtual #133                // Method io/undertow/protocols/http2/Http2PingParser.getData:()[B
     508: iload         6
     510: invokespecial #134                // Method io/undertow/protocols/http2/Http2PingStreamSourceChannel."<init>":(Lio/undertow/protocols/http2/Http2Channel;[BZ)V
     513: astore        4
     515: iload         6
     517: ifne          764
     520: aload_0
     521: aload         5
     523: invokevirtual #133                // Method io/undertow/protocols/http2/Http2PingParser.getData:()[B
     526: aconst_null
     527: iconst_1
     528: invokevirtual #135                // Method sendPing:([BLorg/xnio/ChannelExceptionHandler;Z)V
     531: goto          764
     534: aload_3
     535: getfield      #94                 // Field io/undertow/protocols/http2/Http2FrameHeaderParser.parser:Lio/undertow/protocols/http2/Http2PushBackParser;
     538: checkcast     #136                // class io/undertow/protocols/http2/Http2GoAwayParser
     541: astore        5
     543: new           #137                // class io/undertow/protocols/http2/Http2GoAwayStreamSourceChannel
     546: dup
     547: aload_0
     548: aload_2
     549: aload_3
     550: invokevirtual #92                 // Method io/undertow/protocols/http2/Http2FrameHeaderParser.getFrameLength:()J
     553: aload         5
     555: invokevirtual #138                // Method io/undertow/protocols/http2/Http2GoAwayParser.getStatusCode:()I
     558: aload         5
     560: invokevirtual #139                // Method io/undertow/protocols/http2/Http2GoAwayParser.getLastGoodStreamId:()I
     563: invokespecial #140                // Method io/undertow/protocols/http2/Http2GoAwayStreamSourceChannel."<init>":(Lio/undertow/protocols/http2/Http2Channel;Lio/undertow/connector/PooledByteBuffer;JII)V
     566: astore        4
     568: aload_0
     569: iconst_1
     570: putfield      #20                 // Field peerGoneAway:Z
     573: aload_0
     574: getfield      #6                  // Field incomingStreams:Ljava/util/Map;
     577: invokeinterface #141,  1          // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
     582: invokeinterface #142,  1          // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
     587: astore        6
     589: aload         6
     591: invokeinterface #143,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
     596: ifeq          619
     599: aload         6
     601: invokeinterface #144,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     606: checkcast     #103                // class io/undertow/protocols/http2/Http2StreamSourceChannel
     609: astore        7
     611: aload         7
     613: invokevirtual #145                // Method io/undertow/protocols/http2/Http2StreamSourceChannel.rstStream:()V
     616: goto          589
     619: aload_0
     620: getfield      #7                  // Field outgoingStreams:Ljava/util/Map;
     623: invokeinterface #141,  1          // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
     628: invokeinterface #142,  1          // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
     633: astore        6
     635: aload         6
     637: invokeinterface #143,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
     642: ifeq          665
     645: aload         6
     647: invokeinterface #144,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     652: checkcast     #146                // class io/undertow/protocols/http2/Http2StreamSinkChannel
     655: astore        7
     657: aload         7
     659: invokevirtual #147                // Method io/undertow/protocols/http2/Http2StreamSinkChannel.rstStream:()V
     662: goto          635
     665: goto          764
     668: aload_3
     669: getfield      #94                 // Field io/undertow/protocols/http2/Http2FrameHeaderParser.parser:Lio/undertow/protocols/http2/Http2PushBackParser;
     672: checkcast     #148                // class io/undertow/protocols/http2/Http2WindowUpdateParser
     675: astore        5
     677: aload_0
     678: aload_3
     679: getfield      #87                 // Field io/undertow/protocols/http2/Http2FrameHeaderParser.streamId:I
     682: aload         5
     684: invokevirtual #149                // Method io/undertow/protocols/http2/Http2WindowUpdateParser.getDeltaWindowSize:()I
     687: invokevirtual #150                // Method handleWindowUpdate:(II)V
     690: aload_2
     691: invokeinterface #119,  1          // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
     696: aconst_null
     697: areturn
     698: aload_3
     699: getfield      #94                 // Field io/undertow/protocols/http2/Http2FrameHeaderParser.parser:Lio/undertow/protocols/http2/Http2PushBackParser;
     702: checkcast     #151                // class io/undertow/protocols/http2/Http2PriorityParser
     705: astore        5
     707: aload         5
     709: invokevirtual #152                // Method io/undertow/protocols/http2/Http2PriorityParser.getStreamDependency:()I
     712: aload_3
     713: getfield      #87                 // Field io/undertow/protocols/http2/Http2FrameHeaderParser.streamId:I
     716: if_icmpne     730
     719: aload_0
     720: aload_3
     721: getfield      #87                 // Field io/undertow/protocols/http2/Http2FrameHeaderParser.streamId:I
     724: iconst_1
     725: invokevirtual #89                 // Method sendRstStream:(II)V
     728: aconst_null
     729: areturn
     730: aload_2
     731: invokeinterface #119,  1          // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
     736: aconst_null
     737: areturn
     738: getstatic     #90                 // Field io/undertow/UndertowLogger.REQUEST_LOGGER:Lio/undertow/UndertowLogger;
     741: ldc           #153                // String Dropping frame of length %s and type %s for stream %s as we do not understand this type of frame
     743: aload_3
     744: invokevirtual #92                 // Method io/undertow/protocols/http2/Http2FrameHeaderParser.getFrameLength:()J
     747: aload_3
     748: getfield      #86                 // Field io/undertow/protocols/http2/Http2FrameHeaderParser.type:I
     751: i2l
     752: aload_3
     753: getfield      #87                 // Field io/undertow/protocols/http2/Http2FrameHeaderParser.streamId:I
     756: i2l
     757: invokeinterface #154,  8          // InterfaceMethod io/undertow/UndertowLogger.tracef:(Ljava/lang/String;JJJ)V
     762: aconst_null
     763: areturn
     764: aload         4
     766: areturn

  protected io.undertow.server.protocol.framed.FrameHeaderData parseFrame(java.nio.ByteBuffer) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #48                 // Field prefaceCount:I
       4: getstatic     #47                 // Field PREFACE_BYTES:[B
       7: arraylength
       8: if_icmpge     73
      11: aload_1
      12: invokevirtual #155                // Method java/nio/ByteBuffer.hasRemaining:()Z
      15: ifeq          73
      18: aload_0
      19: getfield      #48                 // Field prefaceCount:I
      22: getstatic     #47                 // Field PREFACE_BYTES:[B
      25: arraylength
      26: if_icmpge     73
      29: aload_1
      30: invokevirtual #156                // Method java/nio/ByteBuffer.get:()B
      33: getstatic     #47                 // Field PREFACE_BYTES:[B
      36: aload_0
      37: getfield      #48                 // Field prefaceCount:I
      40: baload
      41: if_icmpeq     60
      44: aload_0
      45: invokevirtual #157                // Method getUnderlyingConnection:()Lorg/xnio/StreamConnection;
      48: invokestatic  #61                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
      51: getstatic     #96                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      54: invokeinterface #158,  1          // InterfaceMethod io/undertow/UndertowMessages.incorrectHttp2Preface:()Ljava/io/IOException;
      59: athrow
      60: aload_0
      61: dup
      62: getfield      #48                 // Field prefaceCount:I
      65: iconst_1
      66: iadd
      67: putfield      #48                 // Field prefaceCount:I
      70: goto          11
      73: aload_0
      74: getfield      #159                // Field frameParser:Lio/undertow/protocols/http2/Http2FrameHeaderParser;
      77: astore_2
      78: aload_2
      79: ifnonnull     105
      82: aload_0
      83: new           #54                 // class io/undertow/protocols/http2/Http2FrameHeaderParser
      86: dup
      87: aload_0
      88: aload_0
      89: getfield      #22                 // Field continuationParser:Lio/undertow/protocols/http2/Http2HeadersParser;
      92: invokespecial #55                 // Method io/undertow/protocols/http2/Http2FrameHeaderParser."<init>":(Lio/undertow/protocols/http2/Http2Channel;Lio/undertow/protocols/http2/Http2HeadersParser;)V
      95: dup
      96: astore_2
      97: putfield      #159                // Field frameParser:Lio/undertow/protocols/http2/Http2FrameHeaderParser;
     100: aload_0
     101: aconst_null
     102: putfield      #22                 // Field continuationParser:Lio/undertow/protocols/http2/Http2HeadersParser;
     105: aload_2
     106: aload_1
     107: invokevirtual #160                // Method io/undertow/protocols/http2/Http2FrameHeaderParser.handle:(Ljava/nio/ByteBuffer;)Z
     110: ifne          115
     113: aconst_null
     114: areturn
     115: aload_0
     116: getfield      #161                // Field initialSettingsReceived:Z
     119: ifne          161
     122: aload_2
     123: getfield      #86                 // Field io/undertow/protocols/http2/Http2FrameHeaderParser.type:I
     126: iconst_4
     127: if_icmpeq     156
     130: getstatic     #75                 // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
     133: aload_2
     134: getfield      #86                 // Field io/undertow/protocols/http2/Http2FrameHeaderParser.type:I
     137: invokeinterface #162,  2          // InterfaceMethod io/undertow/UndertowLogger.remoteEndpointFailedToSendInitialSettings:(I)V
     142: aload_0
     143: new           #60                 // class java/io/IOException
     146: dup
     147: invokespecial #163                // Method java/io/IOException."<init>":()V
     150: invokevirtual #164                // Method markReadsBroken:(Ljava/lang/Throwable;)V
     153: goto          161
     156: aload_0
     157: iconst_1
     158: putfield      #161                // Field initialSettingsReceived:Z
     161: aload_0
     162: aconst_null
     163: putfield      #159                // Field frameParser:Lio/undertow/protocols/http2/Http2FrameHeaderParser;
     166: aload_2
     167: invokevirtual #92                 // Method io/undertow/protocols/http2/Http2FrameHeaderParser.getFrameLength:()J
     170: aload_0
     171: getfield      #14                 // Field receiveMaxFrameSize:I
     174: i2l
     175: lcmp
     176: ifle          207
     179: aload_2
     180: invokevirtual #92                 // Method io/undertow/protocols/http2/Http2FrameHeaderParser.getFrameLength:()J
     183: aload_0
     184: getfield      #15                 // Field unackedReceiveMaxFrameSize:I
     187: i2l
     188: lcmp
     189: ifle          207
     192: aload_0
     193: bipush        6
     195: invokevirtual #88                 // Method sendGoAway:(I)V
     198: getstatic     #96                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
     201: invokeinterface #165,  1          // InterfaceMethod io/undertow/UndertowMessages.http2FrameTooLarge:()Ljava/io/IOException;
     206: athrow
     207: aload_2
     208: invokevirtual #166                // Method io/undertow/protocols/http2/Http2FrameHeaderParser.getContinuationParser:()Lio/undertow/protocols/http2/Http2HeadersParser;
     211: ifnull        224
     214: aload_0
     215: aload_2
     216: invokevirtual #166                // Method io/undertow/protocols/http2/Http2FrameHeaderParser.getContinuationParser:()Lio/undertow/protocols/http2/Http2HeadersParser;
     219: putfield      #22                 // Field continuationParser:Lio/undertow/protocols/http2/Http2HeadersParser;
     222: aconst_null
     223: areturn
     224: aload_2
     225: areturn

  protected void lastDataRead();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #21                 // Field lastDataRead:Z
       5: aload_0
       6: getfield      #20                 // Field peerGoneAway:Z
       9: ifne          49
      12: aload_0
      13: getfield      #19                 // Field thisGoneAway:Z
      16: ifne          49
      19: aload_0
      20: getfield      #6                  // Field incomingStreams:Ljava/util/Map;
      23: invokeinterface #167,  1          // InterfaceMethod java/util/Map.size:()I
      28: ifle          40
      31: aload_0
      32: bipush        10
      34: invokevirtual #88                 // Method sendGoAway:(I)V
      37: goto          44
      40: aload_0
      41: invokestatic  #61                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
      44: aload_0
      45: iconst_1
      46: putfield      #20                 // Field peerGoneAway:Z
      49: return

  protected boolean isLastFrameReceived();
    Code:
       0: aload_0
       1: getfield      #21                 // Field lastDataRead:Z
       4: ireturn

  protected boolean isLastFrameSent();
    Code:
       0: aload_0
       1: getfield      #19                 // Field thisGoneAway:Z
       4: ireturn

  protected void handleBrokenSourceChannel(java.lang.Throwable);
    Code:
       0: getstatic     #90                 // Field io/undertow/UndertowLogger.REQUEST_LOGGER:Lio/undertow/UndertowLogger;
       3: aload_1
       4: ldc           #168                // String Closing HTTP2 channel to %s due to broken read side
       6: aload_0
       7: invokevirtual #169                // Method getPeerAddress:()Ljava/net/SocketAddress;
      10: invokeinterface #170,  4          // InterfaceMethod io/undertow/UndertowLogger.debugf:(Ljava/lang/Throwable;Ljava/lang/String;Ljava/lang/Object;)V
      15: aload_1
      16: instanceof    #120                // class io/undertow/protocols/http2/ConnectionErrorException
      19: ifeq          45
      22: aload_0
      23: aload_1
      24: checkcast     #120                // class io/undertow/protocols/http2/ConnectionErrorException
      27: invokevirtual #171                // Method io/undertow/protocols/http2/ConnectionErrorException.getCode:()I
      30: new           #172                // class io/undertow/protocols/http2/Http2Channel$Http2ControlMessageExceptionHandler
      33: dup
      34: aload_0
      35: aconst_null
      36: invokespecial #173                // Method io/undertow/protocols/http2/Http2Channel$Http2ControlMessageExceptionHandler."<init>":(Lio/undertow/protocols/http2/Http2Channel;Lio/undertow/protocols/http2/Http2Channel$1;)V
      39: invokevirtual #174                // Method sendGoAway:(ILorg/xnio/ChannelExceptionHandler;)V
      42: goto          71
      45: aload_0
      46: aload_1
      47: instanceof    #175                // class java/nio/channels/ClosedChannelException
      50: ifeq          58
      53: bipush        10
      55: goto          59
      58: iconst_1
      59: new           #172                // class io/undertow/protocols/http2/Http2Channel$Http2ControlMessageExceptionHandler
      62: dup
      63: aload_0
      64: aconst_null
      65: invokespecial #173                // Method io/undertow/protocols/http2/Http2Channel$Http2ControlMessageExceptionHandler."<init>":(Lio/undertow/protocols/http2/Http2Channel;Lio/undertow/protocols/http2/Http2Channel$1;)V
      68: invokevirtual #174                // Method sendGoAway:(ILorg/xnio/ChannelExceptionHandler;)V
      71: return

  protected void handleBrokenSinkChannel(java.lang.Throwable);
    Code:
       0: getstatic     #90                 // Field io/undertow/UndertowLogger.REQUEST_LOGGER:Lio/undertow/UndertowLogger;
       3: aload_1
       4: ldc           #176                // String Closing HTTP2 channel to %s due to broken write side
       6: aload_0
       7: invokevirtual #169                // Method getPeerAddress:()Ljava/net/SocketAddress;
      10: invokeinterface #170,  4          // InterfaceMethod io/undertow/UndertowLogger.debugf:(Ljava/lang/Throwable;Ljava/lang/String;Ljava/lang/Object;)V
      15: aload_0
      16: invokestatic  #61                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
      19: return

  protected void closeSubChannels();
    Code:
       0: aload_0
       1: getfield      #6                  // Field incomingStreams:Ljava/util/Map;
       4: invokeinterface #177,  1          // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
       9: invokeinterface #178,  1          // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      14: astore_1
      15: aload_1
      16: invokeinterface #143,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      21: ifeq          76
      24: aload_1
      25: invokeinterface #144,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      30: checkcast     #179                // class java/util/Map$Entry
      33: astore_2
      34: aload_2
      35: invokeinterface #180,  1          // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      40: checkcast     #181                // class io/undertow/protocols/http2/AbstractHttp2StreamSourceChannel
      43: astore_3
      44: aload_3
      45: invokevirtual #182                // Method io/undertow/protocols/http2/AbstractHttp2StreamSourceChannel.isReadResumed:()Z
      48: ifeq          69
      51: aload_3
      52: invokevirtual #183                // Method io/undertow/protocols/http2/AbstractHttp2StreamSourceChannel.getIoThread:()Lorg/xnio/XnioIoThread;
      55: aload_3
      56: aload_3
      57: invokevirtual #184                // Method io/undertow/protocols/http2/AbstractHttp2StreamSourceChannel.getReadSetter:()Lorg/xnio/ChannelListener$Setter;
      60: checkcast     #185                // class org/xnio/ChannelListener$SimpleSetter
      63: invokevirtual #186                // Method org/xnio/ChannelListener$SimpleSetter.get:()Lorg/xnio/ChannelListener;
      66: invokestatic  #187                // Method org/xnio/ChannelListeners.invokeChannelListener:(Ljava/util/concurrent/Executor;Ljava/nio/channels/Channel;Lorg/xnio/ChannelListener;)V
      69: aload_3
      70: invokestatic  #61                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
      73: goto          15
      76: aload_0
      77: getfield      #6                  // Field incomingStreams:Ljava/util/Map;
      80: invokeinterface #188,  1          // InterfaceMethod java/util/Map.clear:()V
      85: aload_0
      86: getfield      #7                  // Field outgoingStreams:Ljava/util/Map;
      89: invokeinterface #177,  1          // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      94: invokeinterface #178,  1          // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      99: astore_1
     100: aload_1
     101: invokeinterface #143,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
     106: ifeq          161
     109: aload_1
     110: invokeinterface #144,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     115: checkcast     #179                // class java/util/Map$Entry
     118: astore_2
     119: aload_2
     120: invokeinterface #180,  1          // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
     125: checkcast     #146                // class io/undertow/protocols/http2/Http2StreamSinkChannel
     128: astore_3
     129: aload_3
     130: invokevirtual #189                // Method io/undertow/protocols/http2/Http2StreamSinkChannel.isWritesShutdown:()Z
     133: ifeq          154
     136: aload_3
     137: invokevirtual #190                // Method io/undertow/protocols/http2/Http2StreamSinkChannel.getIoThread:()Lorg/xnio/XnioIoThread;
     140: aload_3
     141: aload_3
     142: invokevirtual #191                // Method io/undertow/protocols/http2/Http2StreamSinkChannel.getWriteSetter:()Lorg/xnio/ChannelListener$Setter;
     145: checkcast     #185                // class org/xnio/ChannelListener$SimpleSetter
     148: invokevirtual #186                // Method org/xnio/ChannelListener$SimpleSetter.get:()Lorg/xnio/ChannelListener;
     151: invokestatic  #187                // Method org/xnio/ChannelListeners.invokeChannelListener:(Ljava/util/concurrent/Executor;Ljava/nio/channels/Channel;Lorg/xnio/ChannelListener;)V
     154: aload_3
     155: invokestatic  #61                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
     158: goto          100
     161: aload_0
     162: getfield      #7                  // Field outgoingStreams:Ljava/util/Map;
     165: invokeinterface #188,  1          // InterfaceMethod java/util/Map.clear:()V
     170: return

  synchronized void updateSettings(java.util.List<io.undertow.protocols.http2.Http2Setting>);
    Code:
       0: aload_1
       1: invokeinterface #192,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
       6: astore_2
       7: aload_2
       8: invokeinterface #143,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      13: ifeq          227
      16: aload_2
      17: invokeinterface #144,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      22: checkcast     #66                 // class io/undertow/protocols/http2/Http2Setting
      25: astore_3
      26: aload_3
      27: invokevirtual #193                // Method io/undertow/protocols/http2/Http2Setting.getId:()I
      30: iconst_4
      31: if_icmpne     71
      34: aload_0
      35: getfield      #10                 // Field initialSendWindowSize:I
      38: istore        4
      40: aload_0
      41: aload_3
      42: invokevirtual #194                // Method io/undertow/protocols/http2/Http2Setting.getValue:()I
      45: putfield      #10                 // Field initialSendWindowSize:I
      48: aload_0
      49: getfield      #10                 // Field initialSendWindowSize:I
      52: iload         4
      54: isub
      55: istore        5
      57: aload_0
      58: dup
      59: getfield      #18                 // Field sendWindowSize:I
      62: iload         5
      64: iadd
      65: putfield      #18                 // Field sendWindowSize:I
      68: goto          224
      71: aload_3
      72: invokevirtual #193                // Method io/undertow/protocols/http2/Http2Setting.getId:()I
      75: iconst_5
      76: if_icmpne     135
      79: aload_0
      80: getfield      #13                 // Field sendMaxFrameSize:I
      83: ldc           #195                // int 16777215
      85: if_icmple     124
      88: getstatic     #75                 // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
      91: new           #196                // class java/lang/StringBuilder
      94: dup
      95: invokespecial #197                // Method java/lang/StringBuilder."<init>":()V
      98: ldc           #198                // String Invalid value received for SETTINGS_MAX_FRAME_SIZE
     100: invokevirtual #199                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     103: aload_3
     104: invokevirtual #194                // Method io/undertow/protocols/http2/Http2Setting.getValue:()I
     107: invokevirtual #200                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     110: invokevirtual #201                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     113: invokeinterface #202,  2          // InterfaceMethod io/undertow/UndertowLogger.debug:(Ljava/lang/Object;)V
     118: aload_0
     119: iconst_1
     120: invokevirtual #88                 // Method sendGoAway:(I)V
     123: return
     124: aload_0
     125: aload_3
     126: invokevirtual #194                // Method io/undertow/protocols/http2/Http2Setting.getValue:()I
     129: putfield      #13                 // Field sendMaxFrameSize:I
     132: goto          224
     135: aload_3
     136: invokevirtual #193                // Method io/undertow/protocols/http2/Http2Setting.getId:()I
     139: iconst_1
     140: if_icmpne     157
     143: aload_0
     144: getfield      #46                 // Field encoder:Lio/undertow/protocols/http2/HpackEncoder;
     147: aload_3
     148: invokevirtual #194                // Method io/undertow/protocols/http2/Http2Setting.getValue:()I
     151: invokevirtual #203                // Method io/undertow/protocols/http2/HpackEncoder.setMaxTableSize:(I)V
     154: goto          224
     157: aload_3
     158: invokevirtual #193                // Method io/undertow/protocols/http2/Http2Setting.getId:()I
     161: iconst_2
     162: if_icmpne     224
     165: aload_3
     166: invokevirtual #194                // Method io/undertow/protocols/http2/Http2Setting.getValue:()I
     169: istore        4
     171: iload         4
     173: ifne          184
     176: aload_0
     177: iconst_0
     178: putfield      #31                 // Field pushEnabled:Z
     181: goto          224
     184: iload         4
     186: iconst_1
     187: if_icmpeq     224
     190: getstatic     #75                 // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
     193: new           #196                // class java/lang/StringBuilder
     196: dup
     197: invokespecial #197                // Method java/lang/StringBuilder."<init>":()V
     200: ldc           #204                // String Invalid value received for SETTINGS_ENABLE_PUSH
     202: invokevirtual #199                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     205: iload         4
     207: invokevirtual #200                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     210: invokevirtual #201                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     213: invokeinterface #202,  2          // InterfaceMethod io/undertow/UndertowLogger.debug:(Ljava/lang/Object;)V
     218: aload_0
     219: iconst_1
     220: invokevirtual #88                 // Method sendGoAway:(I)V
     223: return
     224: goto          7
     227: return

  public int getHttp2Version();
    Code:
       0: iconst_3
       1: ireturn

  public int getInitialSendWindowSize();
    Code:
       0: aload_0
       1: getfield      #10                 // Field initialSendWindowSize:I
       4: ireturn

  public int getInitialReceiveWindowSize();
    Code:
       0: aload_0
       1: getfield      #11                 // Field initialReceiveWindowSize:I
       4: ireturn

  public synchronized void handleWindowUpdate(int, int) throws java.io.IOException;
    Code:
       0: iload_1
       1: ifne          58
       4: iload_2
       5: ifne          24
       8: getstatic     #75                 // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
      11: ldc           #205                // String Invalid flow-control window increment of 0 received with WINDOW_UPDATE frame for connection
      13: invokeinterface #202,  2          // InterfaceMethod io/undertow/UndertowLogger.debug:(Ljava/lang/Object;)V
      18: aload_0
      19: iconst_1
      20: invokevirtual #88                 // Method sendGoAway:(I)V
      23: return
      24: aload_0
      25: getfield      #18                 // Field sendWindowSize:I
      28: ifne          35
      31: iconst_1
      32: goto          36
      35: iconst_0
      36: istore_3
      37: aload_0
      38: dup
      39: getfield      #18                 // Field sendWindowSize:I
      42: iload_2
      43: iadd
      44: putfield      #18                 // Field sendWindowSize:I
      47: iload_3
      48: ifeq          55
      51: aload_0
      52: invokevirtual #206                // Method notifyFlowControlAllowed:()V
      55: goto          125
      58: iload_2
      59: ifne          96
      62: getstatic     #75                 // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
      65: new           #196                // class java/lang/StringBuilder
      68: dup
      69: invokespecial #197                // Method java/lang/StringBuilder."<init>":()V
      72: ldc           #207                // String Invalid flow-control window increment of 0 received with WINDOW_UPDATE frame for stream
      74: invokevirtual #199                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      77: iload_1
      78: invokevirtual #200                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      81: invokevirtual #201                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      84: invokeinterface #202,  2          // InterfaceMethod io/undertow/UndertowLogger.debug:(Ljava/lang/Object;)V
      89: aload_0
      90: iload_1
      91: iconst_1
      92: invokevirtual #89                 // Method sendRstStream:(II)V
      95: return
      96: aload_0
      97: getfield      #7                  // Field outgoingStreams:Ljava/util/Map;
     100: iload_1
     101: invokestatic  #113                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     104: invokeinterface #208,  2          // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
     109: checkcast     #146                // class io/undertow/protocols/http2/Http2StreamSinkChannel
     112: astore_3
     113: aload_3
     114: ifnonnull     120
     117: goto          125
     120: aload_3
     121: iload_2
     122: invokevirtual #209                // Method io/undertow/protocols/http2/Http2StreamSinkChannel.updateFlowControlWindow:(I)V
     125: return

  synchronized void notifyFlowControlAllowed() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #210                // Method io/undertow/server/protocol/framed/AbstractFramedChannel.recalculateHeldFrames:()V
       4: return

  public void sendPing(byte[]);
    Code:
       0: aload_0
       1: aload_1
       2: new           #172                // class io/undertow/protocols/http2/Http2Channel$Http2ControlMessageExceptionHandler
       5: dup
       6: aload_0
       7: aconst_null
       8: invokespecial #173                // Method io/undertow/protocols/http2/Http2Channel$Http2ControlMessageExceptionHandler."<init>":(Lio/undertow/protocols/http2/Http2Channel;Lio/undertow/protocols/http2/Http2Channel$1;)V
      11: invokevirtual #211                // Method sendPing:([BLorg/xnio/ChannelExceptionHandler;)V
      14: return

  public void sendPing(byte[], org.xnio.ChannelExceptionHandler<io.undertow.protocols.http2.AbstractHttp2StreamSinkChannel>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iconst_0
       4: invokevirtual #135                // Method sendPing:([BLorg/xnio/ChannelExceptionHandler;Z)V
       7: return

  void sendPing(byte[], org.xnio.ChannelExceptionHandler<io.undertow.protocols.http2.AbstractHttp2StreamSinkChannel>, boolean);
    Code:
       0: new           #212                // class io/undertow/protocols/http2/Http2PingStreamSinkChannel
       3: dup
       4: aload_0
       5: aload_1
       6: iload_3
       7: invokespecial #213                // Method io/undertow/protocols/http2/Http2PingStreamSinkChannel."<init>":(Lio/undertow/protocols/http2/Http2Channel;[BZ)V
      10: astore        4
      12: aload         4
      14: invokevirtual #214                // Method io/undertow/protocols/http2/Http2PingStreamSinkChannel.shutdownWrites:()V
      17: aload         4
      19: invokevirtual #215                // Method io/undertow/protocols/http2/Http2PingStreamSinkChannel.flush:()Z
      22: ifne          45
      25: aload         4
      27: invokevirtual #216                // Method io/undertow/protocols/http2/Http2PingStreamSinkChannel.getWriteSetter:()Lorg/xnio/ChannelListener$Setter;
      30: aconst_null
      31: aload_2
      32: invokestatic  #81                 // Method org/xnio/ChannelListeners.flushingChannelListener:(Lorg/xnio/ChannelListener;Lorg/xnio/ChannelExceptionHandler;)Lorg/xnio/ChannelListener;
      35: invokeinterface #82,  2           // InterfaceMethod org/xnio/ChannelListener$Setter.set:(Lorg/xnio/ChannelListener;)V
      40: aload         4
      42: invokevirtual #217                // Method io/undertow/protocols/http2/Http2PingStreamSinkChannel.resumeWrites:()V
      45: goto          60
      48: astore        5
      50: aload_2
      51: aload         4
      53: aload         5
      55: invokeinterface #218,  3          // InterfaceMethod org/xnio/ChannelExceptionHandler.handleException:(Ljava/nio/channels/Channel;Ljava/io/IOException;)V
      60: return
    Exception table:
       from    to  target type
          12    45    48   Class java/io/IOException

  public void sendGoAway(int);
    Code:
       0: aload_0
       1: iload_1
       2: new           #172                // class io/undertow/protocols/http2/Http2Channel$Http2ControlMessageExceptionHandler
       5: dup
       6: aload_0
       7: aconst_null
       8: invokespecial #173                // Method io/undertow/protocols/http2/Http2Channel$Http2ControlMessageExceptionHandler."<init>":(Lio/undertow/protocols/http2/Http2Channel;Lio/undertow/protocols/http2/Http2Channel$1;)V
      11: invokevirtual #174                // Method sendGoAway:(ILorg/xnio/ChannelExceptionHandler;)V
      14: return

  public void sendGoAway(int, org.xnio.ChannelExceptionHandler<io.undertow.protocols.http2.AbstractHttp2StreamSinkChannel>);
    Code:
       0: aload_0
       1: getfield      #19                 // Field thisGoneAway:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: iconst_1
      10: putfield      #19                 // Field thisGoneAway:Z
      13: new           #219                // class io/undertow/protocols/http2/Http2GoAwayStreamSinkChannel
      16: dup
      17: aload_0
      18: iload_1
      19: aload_0
      20: getfield      #107                // Field lastGoodStreamId:I
      23: invokespecial #220                // Method io/undertow/protocols/http2/Http2GoAwayStreamSinkChannel."<init>":(Lio/undertow/protocols/http2/Http2Channel;II)V
      26: astore_3
      27: aload_3
      28: invokevirtual #221                // Method io/undertow/protocols/http2/Http2GoAwayStreamSinkChannel.shutdownWrites:()V
      31: aload_3
      32: invokevirtual #222                // Method io/undertow/protocols/http2/Http2GoAwayStreamSinkChannel.flush:()Z
      35: ifne          66
      38: aload_3
      39: invokevirtual #223                // Method io/undertow/protocols/http2/Http2GoAwayStreamSinkChannel.getWriteSetter:()Lorg/xnio/ChannelListener$Setter;
      42: new           #224                // class io/undertow/protocols/http2/Http2Channel$1
      45: dup
      46: aload_0
      47: invokespecial #225                // Method io/undertow/protocols/http2/Http2Channel$1."<init>":(Lio/undertow/protocols/http2/Http2Channel;)V
      50: aload_2
      51: invokestatic  #81                 // Method org/xnio/ChannelListeners.flushingChannelListener:(Lorg/xnio/ChannelListener;Lorg/xnio/ChannelExceptionHandler;)Lorg/xnio/ChannelListener;
      54: invokeinterface #82,  2           // InterfaceMethod org/xnio/ChannelListener$Setter.set:(Lorg/xnio/ChannelListener;)V
      59: aload_3
      60: invokevirtual #226                // Method io/undertow/protocols/http2/Http2GoAwayStreamSinkChannel.resumeWrites:()V
      63: goto          70
      66: aload_0
      67: invokestatic  #61                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
      70: goto          84
      73: astore        4
      75: aload_2
      76: aload_3
      77: aload         4
      79: invokeinterface #218,  3          // InterfaceMethod org/xnio/ChannelExceptionHandler.handleException:(Ljava/nio/channels/Channel;Ljava/io/IOException;)V
      84: return
    Exception table:
       from    to  target type
          27    70    73   Class java/io/IOException

  public void sendUpdateWindowSize(int, int) throws java.io.IOException;
    Code:
       0: new           #227                // class io/undertow/protocols/http2/Http2WindowUpdateStreamSinkChannel
       3: dup
       4: aload_0
       5: iload_1
       6: iload_2
       7: invokespecial #228                // Method io/undertow/protocols/http2/Http2WindowUpdateStreamSinkChannel."<init>":(Lio/undertow/protocols/http2/Http2Channel;II)V
      10: astore_3
      11: aload_0
      12: aload_3
      13: invokespecial #74                 // Method flushChannel:(Lorg/xnio/channels/StreamSinkChannel;)V
      16: return

  public javax.net.ssl.SSLSession getSslSession();
    Code:
       0: aload_0
       1: invokevirtual #157                // Method getUnderlyingConnection:()Lorg/xnio/StreamConnection;
       4: astore_1
       5: aload_1
       6: instanceof    #229                // class org/xnio/ssl/SslConnection
       9: ifeq          20
      12: aload_1
      13: checkcast     #229                // class org/xnio/ssl/SslConnection
      16: invokevirtual #230                // Method org/xnio/ssl/SslConnection.getSslSession:()Ljavax/net/ssl/SSLSession;
      19: areturn
      20: aconst_null
      21: areturn

  public synchronized void updateReceiveFlowControlWindow(int) throws java.io.IOException;
    Code:
       0: iload_1
       1: ifgt          5
       4: return
       5: aload_0
       6: dup
       7: getfield      #17                 // Field receiveWindowSize:I
      10: iload_1
      11: isub
      12: putfield      #17                 // Field receiveWindowSize:I
      15: aload_0
      16: getfield      #11                 // Field initialReceiveWindowSize:I
      19: istore_2
      20: aload_0
      21: getfield      #17                 // Field receiveWindowSize:I
      24: iload_2
      25: iconst_2
      26: idiv
      27: if_icmpge     53
      30: iload_2
      31: aload_0
      32: getfield      #17                 // Field receiveWindowSize:I
      35: isub
      36: istore_3
      37: aload_0
      38: dup
      39: getfield      #17                 // Field receiveWindowSize:I
      42: iload_3
      43: iadd
      44: putfield      #17                 // Field receiveWindowSize:I
      47: aload_0
      48: iconst_0
      49: iload_3
      50: invokevirtual #231                // Method sendUpdateWindowSize:(II)V
      53: return

  public synchronized io.undertow.protocols.http2.Http2HeadersStreamSinkChannel createStream(io.undertow.util.HeaderMap) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #69                 // Method isClient:()Z
       4: ifne          16
       7: getstatic     #96                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      10: invokeinterface #232,  1          // InterfaceMethod io/undertow/UndertowMessages.headersStreamCanOnlyBeCreatedByClient:()Ljava/io/IOException;
      15: athrow
      16: aload_0
      17: invokevirtual #233                // Method isOpen:()Z
      20: ifne          32
      23: getstatic     #96                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      26: invokeinterface #234,  1          // InterfaceMethod io/undertow/UndertowMessages.channelIsClosed:()Ljava/nio/channels/ClosedChannelException;
      31: athrow
      32: aload_0
      33: getfield      #28                 // Field streamIdCounter:I
      36: istore_2
      37: aload_0
      38: dup
      39: getfield      #28                 // Field streamIdCounter:I
      42: iconst_2
      43: iadd
      44: putfield      #28                 // Field streamIdCounter:I
      47: new           #235                // class io/undertow/protocols/http2/Http2HeadersStreamSinkChannel
      50: dup
      51: aload_0
      52: iload_2
      53: aload_1
      54: invokespecial #236                // Method io/undertow/protocols/http2/Http2HeadersStreamSinkChannel."<init>":(Lio/undertow/protocols/http2/Http2Channel;ILio/undertow/util/HeaderMap;)V
      57: astore_3
      58: aload_0
      59: getfield      #7                  // Field outgoingStreams:Ljava/util/Map;
      62: iload_2
      63: invokestatic  #113                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      66: aload_3
      67: invokeinterface #114,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      72: pop
      73: aload_3
      74: areturn

  public synchronized io.undertow.protocols.http2.Http2HeadersStreamSinkChannel sendPushPromise(int, io.undertow.util.HeaderMap, io.undertow.util.HeaderMap) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #233                // Method isOpen:()Z
       4: ifne          16
       7: getstatic     #96                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      10: invokeinterface #234,  1          // InterfaceMethod io/undertow/UndertowMessages.channelIsClosed:()Ljava/nio/channels/ClosedChannelException;
      15: athrow
      16: aload_0
      17: invokevirtual #69                 // Method isClient:()Z
      20: ifeq          32
      23: getstatic     #96                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      26: invokeinterface #237,  1          // InterfaceMethod io/undertow/UndertowMessages.pushPromiseCanOnlyBeCreatedByServer:()Ljava/io/IOException;
      31: athrow
      32: aload_0
      33: getfield      #28                 // Field streamIdCounter:I
      36: istore        4
      38: aload_0
      39: dup
      40: getfield      #28                 // Field streamIdCounter:I
      43: iconst_2
      44: iadd
      45: putfield      #28                 // Field streamIdCounter:I
      48: new           #238                // class io/undertow/protocols/http2/Http2PushPromiseStreamSinkChannel
      51: dup
      52: aload_0
      53: aload_2
      54: iload_1
      55: iload         4
      57: invokespecial #239                // Method io/undertow/protocols/http2/Http2PushPromiseStreamSinkChannel."<init>":(Lio/undertow/protocols/http2/Http2Channel;Lio/undertow/util/HeaderMap;II)V
      60: astore        5
      62: aload_0
      63: aload         5
      65: invokespecial #74                 // Method flushChannel:(Lorg/xnio/channels/StreamSinkChannel;)V
      68: new           #235                // class io/undertow/protocols/http2/Http2HeadersStreamSinkChannel
      71: dup
      72: aload_0
      73: iload         4
      75: aload_3
      76: invokespecial #236                // Method io/undertow/protocols/http2/Http2HeadersStreamSinkChannel."<init>":(Lio/undertow/protocols/http2/Http2Channel;ILio/undertow/util/HeaderMap;)V
      79: astore        6
      81: aload_0
      82: getfield      #7                  // Field outgoingStreams:Ljava/util/Map;
      85: iload         4
      87: invokestatic  #113                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      90: aload         6
      92: invokeinterface #114,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      97: pop
      98: aload         6
     100: areturn

  synchronized int grabFlowControlBytes(int);
    Code:
       0: iload_1
       1: aload_0
       2: getfield      #18                 // Field sendWindowSize:I
       5: invokestatic  #240                // Method java/lang/Math.min:(II)I
       8: istore_2
       9: aload_0
      10: getfield      #13                 // Field sendMaxFrameSize:I
      13: iload_2
      14: invokestatic  #240                // Method java/lang/Math.min:(II)I
      17: istore_2
      18: aload_0
      19: dup
      20: getfield      #18                 // Field sendWindowSize:I
      23: iload_2
      24: isub
      25: putfield      #18                 // Field sendWindowSize:I
      28: iload_2
      29: ireturn

  void registerStreamSink(io.undertow.protocols.http2.Http2HeadersStreamSinkChannel);
    Code:
       0: aload_0
       1: getfield      #7                  // Field outgoingStreams:Ljava/util/Map;
       4: aload_1
       5: invokevirtual #241                // Method io/undertow/protocols/http2/Http2HeadersStreamSinkChannel.getStreamId:()I
       8: invokestatic  #113                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      11: aload_1
      12: invokeinterface #114,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      17: pop
      18: return

  void removeStreamSink(int);
    Code:
       0: aload_0
       1: getfield      #7                  // Field outgoingStreams:Ljava/util/Map;
       4: iload_1
       5: invokestatic  #113                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       8: invokeinterface #242,  2          // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      13: pop
      14: aload_0
      15: invokevirtual #243                // Method isLastFrameReceived:()Z
      18: ifeq          38
      21: aload_0
      22: getfield      #7                  // Field outgoingStreams:Ljava/util/Map;
      25: invokeinterface #244,  1          // InterfaceMethod java/util/Map.isEmpty:()Z
      30: ifeq          38
      33: aload_0
      34: iconst_0
      35: invokevirtual #88                 // Method sendGoAway:(I)V
      38: return

  java.util.Map<java.lang.Integer, io.undertow.protocols.http2.Http2StreamSourceChannel> getIncomingStreams();
    Code:
       0: aload_0
       1: getfield      #6                  // Field incomingStreams:Ljava/util/Map;
       4: areturn

  public boolean isClient();
    Code:
       0: aload_0
       1: getfield      #28                 // Field streamIdCounter:I
       4: iconst_2
       5: irem
       6: iconst_1
       7: if_icmpne     14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  io.undertow.protocols.http2.HpackEncoder getEncoder();
    Code:
       0: aload_0
       1: getfield      #46                 // Field encoder:Lio/undertow/protocols/http2/HpackEncoder;
       4: areturn

  io.undertow.protocols.http2.HpackDecoder getDecoder();
    Code:
       0: aload_0
       1: getfield      #43                 // Field decoder:Lio/undertow/protocols/http2/HpackDecoder;
       4: areturn

  public <T> T getAttachment(io.undertow.util.AttachmentKey<T>);
    Code:
       0: aload_1
       1: ifnonnull     15
       4: getstatic     #96                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
       7: ldc           #245                // String key
       9: invokeinterface #246,  2          // InterfaceMethod io/undertow/UndertowMessages.argumentCannotBeNull:(Ljava/lang/String;)Ljava/lang/IllegalArgumentException;
      14: athrow
      15: aload_0
      16: getfield      #27                 // Field attachments:Ljava/util/Map;
      19: aload_1
      20: invokeinterface #208,  2          // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      25: areturn

  public <T> java.util.List<T> getAttachmentList(io.undertow.util.AttachmentKey<? extends java.util.List<T>>);
    Code:
       0: aload_1
       1: ifnonnull     15
       4: getstatic     #96                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
       7: ldc           #245                // String key
       9: invokeinterface #246,  2          // InterfaceMethod io/undertow/UndertowMessages.argumentCannotBeNull:(Ljava/lang/String;)Ljava/lang/IllegalArgumentException;
      14: athrow
      15: aload_0
      16: getfield      #27                 // Field attachments:Ljava/util/Map;
      19: aload_1
      20: invokeinterface #208,  2          // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      25: astore_2
      26: aload_2
      27: ifnonnull     34
      30: invokestatic  #247                // Method java/util/Collections.emptyList:()Ljava/util/List;
      33: areturn
      34: aload_2
      35: checkcast     #248                // class java/util/List
      38: areturn

  public <T> T putAttachment(io.undertow.util.AttachmentKey<T>, T);
    Code:
       0: aload_1
       1: ifnonnull     15
       4: getstatic     #96                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
       7: ldc           #245                // String key
       9: invokeinterface #246,  2          // InterfaceMethod io/undertow/UndertowMessages.argumentCannotBeNull:(Ljava/lang/String;)Ljava/lang/IllegalArgumentException;
      14: athrow
      15: aload_1
      16: aload_0
      17: getfield      #27                 // Field attachments:Ljava/util/Map;
      20: aload_1
      21: aload_1
      22: aload_2
      23: invokevirtual #249                // Method io/undertow/util/AttachmentKey.cast:(Ljava/lang/Object;)Ljava/lang/Object;
      26: invokeinterface #114,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      31: invokevirtual #249                // Method io/undertow/util/AttachmentKey.cast:(Ljava/lang/Object;)Ljava/lang/Object;
      34: areturn

  public <T> T removeAttachment(io.undertow.util.AttachmentKey<T>);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #27                 // Field attachments:Ljava/util/Map;
       5: aload_1
       6: invokeinterface #242,  2          // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      11: invokevirtual #249                // Method io/undertow/util/AttachmentKey.cast:(Ljava/lang/Object;)Ljava/lang/Object;
      14: areturn

  public <T> void addToAttachmentList(io.undertow.util.AttachmentKey<io.undertow.util.AttachmentList<T>>, T);
    Code:
       0: aload_1
       1: ifnonnull     15
       4: getstatic     #96                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
       7: ldc           #245                // String key
       9: invokeinterface #246,  2          // InterfaceMethod io/undertow/UndertowMessages.argumentCannotBeNull:(Ljava/lang/String;)Ljava/lang/IllegalArgumentException;
      14: athrow
      15: aload_0
      16: getfield      #27                 // Field attachments:Ljava/util/Map;
      19: astore_3
      20: aload_3
      21: dup
      22: astore        4
      24: monitorenter
      25: aload_1
      26: aload_3
      27: aload_1
      28: invokeinterface #208,  2          // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      33: invokevirtual #249                // Method io/undertow/util/AttachmentKey.cast:(Ljava/lang/Object;)Ljava/lang/Object;
      36: checkcast     #248                // class java/util/List
      39: astore        5
      41: aload         5
      43: ifnonnull     77
      46: new           #250                // class io/undertow/util/AttachmentList
      49: dup
      50: ldc           #251                // class java/lang/Object
      52: invokespecial #252                // Method io/undertow/util/AttachmentList."<init>":(Ljava/lang/Class;)V
      55: astore        6
      57: aload_3
      58: aload_1
      59: aload         6
      61: invokeinterface #114,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      66: pop
      67: aload         6
      69: aload_2
      70: invokevirtual #253                // Method io/undertow/util/AttachmentList.add:(Ljava/lang/Object;)Z
      73: pop
      74: goto          86
      77: aload         5
      79: aload_2
      80: invokeinterface #68,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      85: pop
      86: aload         4
      88: monitorexit
      89: goto          100
      92: astore        7
      94: aload         4
      96: monitorexit
      97: aload         7
      99: athrow
     100: return
    Exception table:
       from    to  target type
          25    89    92   any
          92    97    92   any

  public void sendRstStream(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #126                // Method handleRstStream:(I)V
       5: new           #254                // class io/undertow/protocols/http2/Http2RstStreamSinkChannel
       8: dup
       9: aload_0
      10: iload_1
      11: iload_2
      12: invokespecial #255                // Method io/undertow/protocols/http2/Http2RstStreamSinkChannel."<init>":(Lio/undertow/protocols/http2/Http2Channel;II)V
      15: astore_3
      16: aload_0
      17: aload_3
      18: invokespecial #72                 // Method flushChannelIgnoreFailure:(Lorg/xnio/channels/StreamSinkChannel;)V
      21: return

  private void handleRstStream(int);
    Code:
       0: aload_0
       1: getfield      #6                  // Field incomingStreams:Ljava/util/Map;
       4: iload_1
       5: invokestatic  #113                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       8: invokeinterface #242,  2          // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      13: checkcast     #181                // class io/undertow/protocols/http2/AbstractHttp2StreamSourceChannel
      16: astore_2
      17: aload_2
      18: ifnull        25
      21: aload_2
      22: invokevirtual #256                // Method io/undertow/protocols/http2/AbstractHttp2StreamSourceChannel.rstStream:()V
      25: aload_0
      26: getfield      #7                  // Field outgoingStreams:Ljava/util/Map;
      29: iload_1
      30: invokestatic  #113                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      33: invokeinterface #242,  2          // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      38: checkcast     #146                // class io/undertow/protocols/http2/Http2StreamSinkChannel
      41: astore_3
      42: aload_3
      43: ifnull        50
      46: aload_3
      47: invokevirtual #147                // Method io/undertow/protocols/http2/Http2StreamSinkChannel.rstStream:()V
      50: return

  public io.undertow.protocols.http2.Http2HeadersStreamSinkChannel createInitialUpgradeResponseStream();
    Code:
       0: aload_0
       1: getfield      #107                // Field lastGoodStreamId:I
       4: ifeq          15
       7: new           #257                // class java/lang/IllegalStateException
      10: dup
      11: invokespecial #258                // Method java/lang/IllegalStateException."<init>":()V
      14: athrow
      15: aload_0
      16: iconst_1
      17: putfield      #107                // Field lastGoodStreamId:I
      20: new           #235                // class io/undertow/protocols/http2/Http2HeadersStreamSinkChannel
      23: dup
      24: aload_0
      25: iconst_1
      26: invokespecial #259                // Method io/undertow/protocols/http2/Http2HeadersStreamSinkChannel."<init>":(Lio/undertow/protocols/http2/Http2Channel;I)V
      29: astore_1
      30: aload_0
      31: getfield      #7                  // Field outgoingStreams:Ljava/util/Map;
      34: iconst_1
      35: invokestatic  #113                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      38: aload_1
      39: invokeinterface #114,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      44: pop
      45: aload_1
      46: areturn

  public boolean isPushEnabled();
    Code:
       0: aload_0
       1: getfield      #31                 // Field pushEnabled:Z
       4: ireturn

  public boolean isPeerGoneAway();
    Code:
       0: aload_0
       1: getfield      #20                 // Field peerGoneAway:Z
       4: ireturn

  public boolean isThisGoneAway();
    Code:
       0: aload_0
       1: getfield      #19                 // Field thisGoneAway:Z
       4: ireturn

  public int getReceiveMaxFrameSize();
    Code:
       0: aload_0
       1: getfield      #14                 // Field receiveMaxFrameSize:I
       4: ireturn

  public int getSendMaxFrameSize();
    Code:
       0: aload_0
       1: getfield      #13                 // Field sendMaxFrameSize:I
       4: ireturn

  public java.lang.String getProtocol();
    Code:
       0: aload_0
       1: getfield      #36                 // Field protocol:Ljava/lang/String;
       4: areturn

  protected io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel createChannel(io.undertow.server.protocol.framed.FrameHeaderData, io.undertow.connector.PooledByteBuffer) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #260                // Method createChannel:(Lio/undertow/server/protocol/framed/FrameHeaderData;Lio/undertow/connector/PooledByteBuffer;)Lio/undertow/protocols/http2/AbstractHttp2StreamSourceChannel;
       6: areturn

  static {};
    Code:
       0: bipush        24
       2: newarray       byte
       4: dup
       5: iconst_0
       6: bipush        80
       8: bastore
       9: dup
      10: iconst_1
      11: bipush        82
      13: bastore
      14: dup
      15: iconst_2
      16: bipush        73
      18: bastore
      19: dup
      20: iconst_3
      21: bipush        32
      23: bastore
      24: dup
      25: iconst_4
      26: bipush        42
      28: bastore
      29: dup
      30: iconst_5
      31: bipush        32
      33: bastore
      34: dup
      35: bipush        6
      37: bipush        72
      39: bastore
      40: dup
      41: bipush        7
      43: bipush        84
      45: bastore
      46: dup
      47: bipush        8
      49: bipush        84
      51: bastore
      52: dup
      53: bipush        9
      55: bipush        80
      57: bastore
      58: dup
      59: bipush        10
      61: bipush        47
      63: bastore
      64: dup
      65: bipush        11
      67: bipush        50
      69: bastore
      70: dup
      71: bipush        12
      73: bipush        46
      75: bastore
      76: dup
      77: bipush        13
      79: bipush        48
      81: bastore
      82: dup
      83: bipush        14
      85: bipush        13
      87: bastore
      88: dup
      89: bipush        15
      91: bipush        10
      93: bastore
      94: dup
      95: bipush        16
      97: bipush        13
      99: bastore
     100: dup
     101: bipush        17
     103: bipush        10
     105: bastore
     106: dup
     107: bipush        18
     109: bipush        83
     111: bastore
     112: dup
     113: bipush        19
     115: bipush        77
     117: bastore
     118: dup
     119: bipush        20
     121: bipush        13
     123: bastore
     124: dup
     125: bipush        21
     127: bipush        10
     129: bastore
     130: dup
     131: bipush        22
     133: bipush        13
     135: bastore
     136: dup
     137: bipush        23
     139: bipush        10
     141: bastore
     142: putstatic     #47                 // Field PREFACE_BYTES:[B
     145: return
}
