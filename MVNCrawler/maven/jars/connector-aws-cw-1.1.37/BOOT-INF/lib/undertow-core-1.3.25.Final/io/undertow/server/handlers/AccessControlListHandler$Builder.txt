Compiled from "AccessControlListHandler.java"
public class io.undertow.server.handlers.AccessControlListHandler$Builder implements io.undertow.server.handlers.builder.HandlerBuilder {
  public io.undertow.server.handlers.AccessControlListHandler$Builder();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public java.lang.String name();
    Code:
       0: ldc           #2                  // String access-control
       2: areturn

  public java.util.Map<java.lang.String, java.lang.Class<?>> parameters();
    Code:
       0: new           #3                  // class java/util/HashMap
       3: dup
       4: invokespecial #4                  // Method java/util/HashMap."<init>":()V
       7: astore_1
       8: aload_1
       9: ldc           #5                  // String acl
      11: ldc           #6                  // class "[Ljava/lang/String;"
      13: invokeinterface #7,  3            // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      18: pop
      19: aload_1
      20: ldc           #8                  // String default-allow
      22: getstatic     #9                  // Field java/lang/Boolean.TYPE:Ljava/lang/Class;
      25: invokeinterface #7,  3            // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      30: pop
      31: aload_1
      32: ldc           #10                 // String attribute
      34: ldc           #11                 // class io/undertow/attribute/ExchangeAttribute
      36: invokeinterface #7,  3            // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      41: pop
      42: aload_1
      43: areturn

  public java.util.Set<java.lang.String> requiredParameters();
    Code:
       0: new           #12                 // class java/util/HashSet
       3: dup
       4: invokespecial #13                 // Method java/util/HashSet."<init>":()V
       7: astore_1
       8: aload_1
       9: ldc           #5                  // String acl
      11: invokevirtual #14                 // Method java/util/HashSet.add:(Ljava/lang/Object;)Z
      14: pop
      15: aload_1
      16: ldc           #10                 // String attribute
      18: invokevirtual #14                 // Method java/util/HashSet.add:(Ljava/lang/Object;)Z
      21: pop
      22: aload_1
      23: areturn

  public java.lang.String defaultParameter();
    Code:
       0: aconst_null
       1: areturn

  public io.undertow.server.HandlerWrapper build(java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_1
       1: ldc           #5                  // String acl
       3: invokeinterface #15,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
       8: checkcast     #6                  // class "[Ljava/lang/String;"
      11: checkcast     #6                  // class "[Ljava/lang/String;"
      14: astore_2
      15: aload_1
      16: ldc           #8                  // String default-allow
      18: invokeinterface #15,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      23: checkcast     #16                 // class java/lang/Boolean
      26: astore_3
      27: aload_1
      28: ldc           #10                 // String attribute
      30: invokeinterface #15,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      35: checkcast     #11                 // class io/undertow/attribute/ExchangeAttribute
      38: astore        4
      40: new           #17                 // class java/util/ArrayList
      43: dup
      44: invokespecial #18                 // Method java/util/ArrayList."<init>":()V
      47: astore        5
      49: aload_2
      50: astore        6
      52: aload         6
      54: arraylength
      55: istore        7
      57: iconst_0
      58: istore        8
      60: iload         8
      62: iload         7
      64: if_icmpge     200
      67: aload         6
      69: iload         8
      71: aaload
      72: astore        9
      74: aload         9
      76: ldc           #19                 // String
      78: invokevirtual #20                 // Method java/lang/String.split:(Ljava/lang/String;)[Ljava/lang/String;
      81: astore        10
      83: aload         10
      85: arraylength
      86: iconst_2
      87: if_icmpeq     101
      90: getstatic     #21                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      93: aload         9
      95: invokeinterface #22,  2           // InterfaceMethod io/undertow/UndertowMessages.invalidAclRule:(Ljava/lang/String;)Ljava/lang/IllegalArgumentException;
     100: athrow
     101: aload         10
     103: iconst_1
     104: aaload
     105: invokevirtual #23                 // Method java/lang/String.trim:()Ljava/lang/String;
     108: ldc           #24                 // String allow
     110: invokevirtual #25                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     113: ifeq          142
     116: aload         5
     118: new           #26                 // class io/undertow/server/handlers/AccessControlListHandler$AclMatch
     121: dup
     122: iconst_0
     123: aload         10
     125: iconst_0
     126: aaload
     127: invokevirtual #23                 // Method java/lang/String.trim:()Ljava/lang/String;
     130: invokespecial #27                 // Method io/undertow/server/handlers/AccessControlListHandler$AclMatch."<init>":(ZLjava/lang/String;)V
     133: invokeinterface #28,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     138: pop
     139: goto          194
     142: aload         10
     144: iconst_1
     145: aaload
     146: invokevirtual #23                 // Method java/lang/String.trim:()Ljava/lang/String;
     149: ldc           #29                 // String deny
     151: invokevirtual #25                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     154: ifeq          183
     157: aload         5
     159: new           #26                 // class io/undertow/server/handlers/AccessControlListHandler$AclMatch
     162: dup
     163: iconst_1
     164: aload         10
     166: iconst_0
     167: aaload
     168: invokevirtual #23                 // Method java/lang/String.trim:()Ljava/lang/String;
     171: invokespecial #27                 // Method io/undertow/server/handlers/AccessControlListHandler$AclMatch."<init>":(ZLjava/lang/String;)V
     174: invokeinterface #28,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     179: pop
     180: goto          194
     183: getstatic     #21                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
     186: aload         9
     188: invokeinterface #22,  2           // InterfaceMethod io/undertow/UndertowMessages.invalidAclRule:(Ljava/lang/String;)Ljava/lang/IllegalArgumentException;
     193: athrow
     194: iinc          8, 1
     197: goto          60
     200: new           #30                 // class io/undertow/server/handlers/AccessControlListHandler$Wrapper
     203: dup
     204: aload         5
     206: aload_3
     207: ifnonnull     214
     210: iconst_0
     211: goto          218
     214: aload_3
     215: invokevirtual #31                 // Method java/lang/Boolean.booleanValue:()Z
     218: aload         4
     220: aconst_null
     221: invokespecial #32                 // Method io/undertow/server/handlers/AccessControlListHandler$Wrapper."<init>":(Ljava/util/List;ZLio/undertow/attribute/ExchangeAttribute;Lio/undertow/server/handlers/AccessControlListHandler$1;)V
     224: areturn
}
