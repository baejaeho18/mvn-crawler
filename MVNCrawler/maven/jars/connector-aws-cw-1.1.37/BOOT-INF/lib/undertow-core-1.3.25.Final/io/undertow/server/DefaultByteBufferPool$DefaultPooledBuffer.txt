Compiled from "DefaultByteBufferPool.java"
class io.undertow.server.DefaultByteBufferPool$DefaultPooledBuffer implements io.undertow.connector.PooledByteBuffer {
  private final io.undertow.server.DefaultByteBufferPool pool;

  private final io.undertow.server.DefaultByteBufferPool$LeakDetector leakDetector;

  private java.nio.ByteBuffer buffer;

  private volatile int referenceCount;

  private static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<io.undertow.server.DefaultByteBufferPool$DefaultPooledBuffer> referenceCountUpdater;

  io.undertow.server.DefaultByteBufferPool$DefaultPooledBuffer(io.undertow.server.DefaultByteBufferPool, java.nio.ByteBuffer, boolean);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #2                  // Field referenceCount:I
       9: aload_0
      10: aload_1
      11: putfield      #3                  // Field pool:Lio/undertow/server/DefaultByteBufferPool;
      14: aload_0
      15: aload_2
      16: putfield      #4                  // Field buffer:Ljava/nio/ByteBuffer;
      19: aload_0
      20: iload_3
      21: ifeq          35
      24: new           #5                  // class io/undertow/server/DefaultByteBufferPool$LeakDetector
      27: dup
      28: aconst_null
      29: invokespecial #6                  // Method io/undertow/server/DefaultByteBufferPool$LeakDetector."<init>":(Lio/undertow/server/DefaultByteBufferPool$1;)V
      32: goto          36
      35: aconst_null
      36: putfield      #7                  // Field leakDetector:Lio/undertow/server/DefaultByteBufferPool$LeakDetector;
      39: return

  public java.nio.ByteBuffer getBuffer();
    Code:
       0: aload_0
       1: getfield      #2                  // Field referenceCount:I
       4: ifne          16
       7: getstatic     #8                  // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      10: invokeinterface #9,  1            // InterfaceMethod io/undertow/UndertowMessages.bufferAlreadyFreed:()Ljava/lang/IllegalStateException;
      15: athrow
      16: aload_0
      17: getfield      #4                  // Field buffer:Ljava/nio/ByteBuffer;
      20: areturn

  public void close();
    Code:
       0: getstatic     #10                 // Field referenceCountUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: iconst_1
       5: iconst_0
       6: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
       9: ifeq          43
      12: aload_0
      13: getfield      #7                  // Field leakDetector:Lio/undertow/server/DefaultByteBufferPool$LeakDetector;
      16: ifnull        27
      19: aload_0
      20: getfield      #7                  // Field leakDetector:Lio/undertow/server/DefaultByteBufferPool$LeakDetector;
      23: iconst_1
      24: putfield      #12                 // Field io/undertow/server/DefaultByteBufferPool$LeakDetector.closed:Z
      27: aload_0
      28: getfield      #3                  // Field pool:Lio/undertow/server/DefaultByteBufferPool;
      31: aload_0
      32: getfield      #4                  // Field buffer:Ljava/nio/ByteBuffer;
      35: invokestatic  #13                 // Method io/undertow/server/DefaultByteBufferPool.access$200:(Lio/undertow/server/DefaultByteBufferPool;Ljava/nio/ByteBuffer;)V
      38: aload_0
      39: aconst_null
      40: putfield      #4                  // Field buffer:Ljava/nio/ByteBuffer;
      43: return

  public boolean isOpen();
    Code:
       0: aload_0
       1: getfield      #2                  // Field referenceCount:I
       4: ifle          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public java.lang.String toString();
    Code:
       0: new           #14                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #15                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #16                 // String DefaultPooledBuffer{buffer=
       9: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: getfield      #4                  // Field buffer:Ljava/nio/ByteBuffer;
      16: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      19: ldc           #19                 // String , referenceCount=
      21: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: aload_0
      25: getfield      #2                  // Field referenceCount:I
      28: invokevirtual #20                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      31: bipush        125
      33: invokevirtual #21                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      36: invokevirtual #22                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      39: areturn

  static {};
    Code:
       0: ldc           #23                 // class io/undertow/server/DefaultByteBufferPool$DefaultPooledBuffer
       2: ldc           #24                 // String referenceCount
       4: invokestatic  #25                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       7: putstatic     #10                 // Field referenceCountUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: return
}
