Compiled from "SecureHashMap.java"
final class io.undertow.util.SecureHashMap$ValueIterator implements java.util.Iterator<V> {
  private final io.undertow.util.SecureHashMap$Table<K, V> table;

  private io.undertow.util.SecureHashMap<K, V>.TableIterator tableIterator;

  private io.undertow.util.SecureHashMap<K, V>.TableIterator removeIterator;

  private int tableIdx;

  private V next;

  final io.undertow.util.SecureHashMap this$0;

  io.undertow.util.SecureHashMap$ValueIterator(io.undertow.util.SecureHashMap);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lio/undertow/util/SecureHashMap;
       5: aload_0
       6: invokespecial #2                  // Method java/lang/Object."<init>":()V
       9: aload_0
      10: aload_0
      11: getfield      #1                  // Field this$0:Lio/undertow/util/SecureHashMap;
      14: invokestatic  #3                  // Method io/undertow/util/SecureHashMap.access$300:(Lio/undertow/util/SecureHashMap;)Lio/undertow/util/SecureHashMap$Table;
      17: putfield      #4                  // Field table:Lio/undertow/util/SecureHashMap$Table;
      20: aload_0
      21: invokestatic  #5                  // Method io/undertow/util/SecureHashMap.access$900:()Ljava/lang/Object;
      24: putfield      #6                  // Field next:Ljava/lang/Object;
      27: return

  public boolean hasNext();
    Code:
       0: aload_0
       1: getfield      #6                  // Field next:Ljava/lang/Object;
       4: invokestatic  #7                  // Method io/undertow/util/SecureHashMap.access$500:()Ljava/lang/Object;
       7: if_acmpne     121
      10: aload_0
      11: getfield      #8                  // Field tableIdx:I
      14: aload_0
      15: getfield      #4                  // Field table:Lio/undertow/util/SecureHashMap$Table;
      18: getfield      #9                  // Field io/undertow/util/SecureHashMap$Table.array:Ljava/util/concurrent/atomic/AtomicReferenceArray;
      21: invokevirtual #10                 // Method java/util/concurrent/atomic/AtomicReferenceArray.length:()I
      24: if_icmpne     36
      27: aload_0
      28: getfield      #11                 // Field tableIterator:Lio/undertow/util/SecureHashMap$TableIterator;
      31: ifnonnull     36
      34: iconst_0
      35: ireturn
      36: aload_0
      37: getfield      #11                 // Field tableIterator:Lio/undertow/util/SecureHashMap$TableIterator;
      40: ifnonnull     85
      43: aload_0
      44: dup
      45: getfield      #8                  // Field tableIdx:I
      48: dup_x1
      49: iconst_1
      50: iadd
      51: putfield      #8                  // Field tableIdx:I
      54: istore_1
      55: aload_0
      56: getfield      #4                  // Field table:Lio/undertow/util/SecureHashMap$Table;
      59: getfield      #9                  // Field io/undertow/util/SecureHashMap$Table.array:Ljava/util/concurrent/atomic/AtomicReferenceArray;
      62: iload_1
      63: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicReferenceArray.get:(I)Ljava/lang/Object;
      66: ifnull        85
      69: aload_0
      70: aload_0
      71: getfield      #1                  // Field this$0:Lio/undertow/util/SecureHashMap;
      74: aload_0
      75: getfield      #4                  // Field table:Lio/undertow/util/SecureHashMap$Table;
      78: iload_1
      79: invokestatic  #13                 // Method io/undertow/util/SecureHashMap.access$1200:(Lio/undertow/util/SecureHashMap;Lio/undertow/util/SecureHashMap$Table;I)Lio/undertow/util/SecureHashMap$TableIterator;
      82: putfield      #11                 // Field tableIterator:Lio/undertow/util/SecureHashMap$TableIterator;
      85: aload_0
      86: getfield      #11                 // Field tableIterator:Lio/undertow/util/SecureHashMap$TableIterator;
      89: ifnull        0
      92: aload_0
      93: aload_0
      94: getfield      #11                 // Field tableIterator:Lio/undertow/util/SecureHashMap$TableIterator;
      97: invokevirtual #14                 // Method io/undertow/util/SecureHashMap$TableIterator.nextValue:()Ljava/lang/Object;
     100: putfield      #6                  // Field next:Ljava/lang/Object;
     103: aload_0
     104: getfield      #6                  // Field next:Ljava/lang/Object;
     107: invokestatic  #7                  // Method io/undertow/util/SecureHashMap.access$500:()Ljava/lang/Object;
     110: if_acmpne     0
     113: aload_0
     114: aconst_null
     115: putfield      #11                 // Field tableIterator:Lio/undertow/util/SecureHashMap$TableIterator;
     118: goto          0
     121: iconst_1
     122: ireturn

  public V next();
    Code:
       0: aload_0
       1: invokevirtual #15                 // Method hasNext:()Z
       4: ifeq          47
       7: aload_0
       8: getfield      #6                  // Field next:Ljava/lang/Object;
      11: astore_1
      12: aload_0
      13: aload_0
      14: getfield      #11                 // Field tableIterator:Lio/undertow/util/SecureHashMap$TableIterator;
      17: putfield      #16                 // Field removeIterator:Lio/undertow/util/SecureHashMap$TableIterator;
      20: aload_0
      21: invokestatic  #5                  // Method io/undertow/util/SecureHashMap.access$900:()Ljava/lang/Object;
      24: putfield      #6                  // Field next:Ljava/lang/Object;
      27: aload_1
      28: areturn
      29: astore_2
      30: aload_0
      31: aload_0
      32: getfield      #11                 // Field tableIterator:Lio/undertow/util/SecureHashMap$TableIterator;
      35: putfield      #16                 // Field removeIterator:Lio/undertow/util/SecureHashMap$TableIterator;
      38: aload_0
      39: invokestatic  #5                  // Method io/undertow/util/SecureHashMap.access$900:()Ljava/lang/Object;
      42: putfield      #6                  // Field next:Ljava/lang/Object;
      45: aload_2
      46: athrow
      47: new           #17                 // class java/util/NoSuchElementException
      50: dup
      51: invokespecial #18                 // Method java/util/NoSuchElementException."<init>":()V
      54: athrow
    Exception table:
       from    to  target type
           7    12    29   any

  public void remove();
    Code:
       0: aload_0
       1: getfield      #16                 // Field removeIterator:Lio/undertow/util/SecureHashMap$TableIterator;
       4: astore_1
       5: aload_1
       6: ifnonnull     17
       9: new           #19                 // class java/lang/IllegalStateException
      12: dup
      13: invokespecial #20                 // Method java/lang/IllegalStateException."<init>":()V
      16: athrow
      17: aload_1
      18: invokevirtual #21                 // Method io/undertow/util/SecureHashMap$TableIterator.remove:()V
      21: aload_0
      22: aconst_null
      23: putfield      #16                 // Field removeIterator:Lio/undertow/util/SecureHashMap$TableIterator;
      26: goto          37
      29: astore_2
      30: aload_0
      31: aconst_null
      32: putfield      #16                 // Field removeIterator:Lio/undertow/util/SecureHashMap$TableIterator;
      35: aload_2
      36: athrow
      37: return
    Exception table:
       from    to  target type
          17    21    29   any
}
