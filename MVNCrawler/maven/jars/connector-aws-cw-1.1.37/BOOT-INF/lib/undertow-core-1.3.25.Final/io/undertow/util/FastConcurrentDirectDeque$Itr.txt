Compiled from "FastConcurrentDirectDeque.java"
class io.undertow.util.FastConcurrentDirectDeque$Itr extends io.undertow.util.FastConcurrentDirectDeque<E>.AbstractItr {
  final io.undertow.util.FastConcurrentDirectDeque this$0;

  private io.undertow.util.FastConcurrentDirectDeque$Itr(io.undertow.util.FastConcurrentDirectDeque);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2                  // Field this$0:Lio/undertow/util/FastConcurrentDirectDeque;
       5: aload_0
       6: aload_1
       7: invokespecial #3                  // Method io/undertow/util/FastConcurrentDirectDeque$AbstractItr."<init>":(Lio/undertow/util/FastConcurrentDirectDeque;)V
      10: return

  io.undertow.util.FastConcurrentDirectDeque$Node<E> startNode();
    Code:
       0: aload_0
       1: getfield      #2                  // Field this$0:Lio/undertow/util/FastConcurrentDirectDeque;
       4: invokevirtual #4                  // Method io/undertow/util/FastConcurrentDirectDeque.first:()Lio/undertow/util/FastConcurrentDirectDeque$Node;
       7: areturn

  io.undertow.util.FastConcurrentDirectDeque$Node<E> nextNode(io.undertow.util.FastConcurrentDirectDeque$Node<E>);
    Code:
       0: aload_0
       1: getfield      #2                  // Field this$0:Lio/undertow/util/FastConcurrentDirectDeque;
       4: aload_1
       5: invokevirtual #5                  // Method io/undertow/util/FastConcurrentDirectDeque.succ:(Lio/undertow/util/FastConcurrentDirectDeque$Node;)Lio/undertow/util/FastConcurrentDirectDeque$Node;
       8: areturn

  io.undertow.util.FastConcurrentDirectDeque$Itr(io.undertow.util.FastConcurrentDirectDeque, io.undertow.util.FastConcurrentDirectDeque$1);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method "<init>":(Lio/undertow/util/FastConcurrentDirectDeque;)V
       5: return
}
