Compiled from "AjpClientConnection.java"
class io.undertow.client.ajp.AjpClientConnection extends io.undertow.util.AbstractAttachable implements java.io.Closeable,io.undertow.client.ClientConnection {
  public final org.xnio.ChannelListener<io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel> requestFinishListener;

  public final org.xnio.ChannelListener<io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel> responseFinishedListener;

  private final java.util.Deque<io.undertow.client.ajp.AjpClientExchange> pendingQueue;

  private io.undertow.client.ajp.AjpClientExchange currentRequest;

  private final org.xnio.OptionMap options;

  private final io.undertow.protocols.ajp.AjpClientChannel connection;

  private final io.undertow.connector.ByteBufferPool bufferPool;

  private static final int UPGRADED;

  private static final int UPGRADE_REQUESTED;

  private static final int CLOSE_REQ;

  private static final int CLOSED;

  private int state;

  private final org.xnio.ChannelListener$SimpleSetter<io.undertow.client.ajp.AjpClientConnection> closeSetter;

  private final io.undertow.client.ClientStatistics clientStatistics;

  io.undertow.client.ajp.AjpClientConnection(io.undertow.protocols.ajp.AjpClientChannel, org.xnio.OptionMap, io.undertow.connector.ByteBufferPool, io.undertow.client.ClientStatistics);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method io/undertow/util/AbstractAttachable."<init>":()V
       4: aload_0
       5: new           #6                  // class io/undertow/client/ajp/AjpClientConnection$1
       8: dup
       9: aload_0
      10: invokespecial #7                  // Method io/undertow/client/ajp/AjpClientConnection$1."<init>":(Lio/undertow/client/ajp/AjpClientConnection;)V
      13: putfield      #8                  // Field requestFinishListener:Lorg/xnio/ChannelListener;
      16: aload_0
      17: new           #9                  // class io/undertow/client/ajp/AjpClientConnection$2
      20: dup
      21: aload_0
      22: invokespecial #10                 // Method io/undertow/client/ajp/AjpClientConnection$2."<init>":(Lio/undertow/client/ajp/AjpClientConnection;)V
      25: putfield      #11                 // Field responseFinishedListener:Lorg/xnio/ChannelListener;
      28: aload_0
      29: new           #12                 // class java/util/ArrayDeque
      32: dup
      33: invokespecial #13                 // Method java/util/ArrayDeque."<init>":()V
      36: putfield      #14                 // Field pendingQueue:Ljava/util/Deque;
      39: aload_0
      40: new           #15                 // class org/xnio/ChannelListener$SimpleSetter
      43: dup
      44: invokespecial #16                 // Method org/xnio/ChannelListener$SimpleSetter."<init>":()V
      47: putfield      #3                  // Field closeSetter:Lorg/xnio/ChannelListener$SimpleSetter;
      50: aload_0
      51: aload         4
      53: putfield      #17                 // Field clientStatistics:Lio/undertow/client/ClientStatistics;
      56: aload_0
      57: aload_2
      58: putfield      #18                 // Field options:Lorg/xnio/OptionMap;
      61: aload_0
      62: aload_1
      63: putfield      #1                  // Field connection:Lio/undertow/protocols/ajp/AjpClientChannel;
      66: aload_0
      67: aload_3
      68: putfield      #19                 // Field bufferPool:Lio/undertow/connector/ByteBufferPool;
      71: aload_1
      72: new           #20                 // class io/undertow/client/ajp/AjpClientConnection$3
      75: dup
      76: aload_0
      77: invokespecial #21                 // Method io/undertow/client/ajp/AjpClientConnection$3."<init>":(Lio/undertow/client/ajp/AjpClientConnection;)V
      80: invokevirtual #22                 // Method io/undertow/protocols/ajp/AjpClientChannel.addCloseTask:(Lorg/xnio/ChannelListener;)V
      83: aload_1
      84: invokevirtual #23                 // Method io/undertow/protocols/ajp/AjpClientChannel.getReceiveSetter:()Lorg/xnio/ChannelListener$Setter;
      87: new           #24                 // class io/undertow/client/ajp/AjpClientConnection$ClientReceiveListener
      90: dup
      91: aload_0
      92: invokespecial #25                 // Method io/undertow/client/ajp/AjpClientConnection$ClientReceiveListener."<init>":(Lio/undertow/client/ajp/AjpClientConnection;)V
      95: invokeinterface #26,  2           // InterfaceMethod org/xnio/ChannelListener$Setter.set:(Lorg/xnio/ChannelListener;)V
     100: aload_1
     101: invokevirtual #27                 // Method io/undertow/protocols/ajp/AjpClientChannel.resumeReceives:()V
     104: return

  public io.undertow.connector.ByteBufferPool getBufferPool();
    Code:
       0: aload_0
       1: getfield      #19                 // Field bufferPool:Lio/undertow/connector/ByteBufferPool;
       4: areturn

  public java.net.SocketAddress getPeerAddress();
    Code:
       0: aload_0
       1: getfield      #1                  // Field connection:Lio/undertow/protocols/ajp/AjpClientChannel;
       4: invokevirtual #28                 // Method io/undertow/protocols/ajp/AjpClientChannel.getPeerAddress:()Ljava/net/SocketAddress;
       7: areturn

  public <A extends java.net.SocketAddress> A getPeerAddress(java.lang.Class<A>);
    Code:
       0: aload_0
       1: getfield      #1                  // Field connection:Lio/undertow/protocols/ajp/AjpClientChannel;
       4: aload_1
       5: invokevirtual #29                 // Method io/undertow/protocols/ajp/AjpClientChannel.getPeerAddress:(Ljava/lang/Class;)Ljava/net/SocketAddress;
       8: areturn

  public org.xnio.ChannelListener$Setter<? extends io.undertow.client.ajp.AjpClientConnection> getCloseSetter();
    Code:
       0: aload_0
       1: getfield      #3                  // Field closeSetter:Lorg/xnio/ChannelListener$SimpleSetter;
       4: areturn

  public java.net.SocketAddress getLocalAddress();
    Code:
       0: aload_0
       1: getfield      #1                  // Field connection:Lio/undertow/protocols/ajp/AjpClientChannel;
       4: invokevirtual #30                 // Method io/undertow/protocols/ajp/AjpClientChannel.getLocalAddress:()Ljava/net/SocketAddress;
       7: areturn

  public <A extends java.net.SocketAddress> A getLocalAddress(java.lang.Class<A>);
    Code:
       0: aload_0
       1: getfield      #1                  // Field connection:Lio/undertow/protocols/ajp/AjpClientChannel;
       4: aload_1
       5: invokevirtual #31                 // Method io/undertow/protocols/ajp/AjpClientChannel.getLocalAddress:(Ljava/lang/Class;)Ljava/net/SocketAddress;
       8: areturn

  public org.xnio.XnioWorker getWorker();
    Code:
       0: aload_0
       1: getfield      #1                  // Field connection:Lio/undertow/protocols/ajp/AjpClientChannel;
       4: invokevirtual #32                 // Method io/undertow/protocols/ajp/AjpClientChannel.getWorker:()Lorg/xnio/XnioWorker;
       7: areturn

  public org.xnio.XnioIoThread getIoThread();
    Code:
       0: aload_0
       1: getfield      #1                  // Field connection:Lio/undertow/protocols/ajp/AjpClientChannel;
       4: invokevirtual #33                 // Method io/undertow/protocols/ajp/AjpClientChannel.getIoThread:()Lorg/xnio/XnioIoThread;
       7: areturn

  public boolean isOpen();
    Code:
       0: aload_0
       1: getfield      #1                  // Field connection:Lio/undertow/protocols/ajp/AjpClientChannel;
       4: invokevirtual #34                 // Method io/undertow/protocols/ajp/AjpClientChannel.isOpen:()Z
       7: ireturn

  public boolean supportsOption(org.xnio.Option<?>);
    Code:
       0: aload_0
       1: getfield      #1                  // Field connection:Lio/undertow/protocols/ajp/AjpClientChannel;
       4: aload_1
       5: invokevirtual #35                 // Method io/undertow/protocols/ajp/AjpClientChannel.supportsOption:(Lorg/xnio/Option;)Z
       8: ireturn

  public <T> T getOption(org.xnio.Option<T>) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field connection:Lio/undertow/protocols/ajp/AjpClientChannel;
       4: aload_1
       5: invokevirtual #36                 // Method io/undertow/protocols/ajp/AjpClientChannel.getOption:(Lorg/xnio/Option;)Ljava/lang/Object;
       8: areturn

  public <T> T setOption(org.xnio.Option<T>, T) throws java.lang.IllegalArgumentException, java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field connection:Lio/undertow/protocols/ajp/AjpClientChannel;
       4: aload_1
       5: aload_2
       6: invokevirtual #37                 // Method io/undertow/protocols/ajp/AjpClientChannel.setOption:(Lorg/xnio/Option;Ljava/lang/Object;)Ljava/lang/Object;
       9: areturn

  public boolean isUpgraded();
    Code:
       0: aload_0
       1: getfield      #38                 // Field state:I
       4: ldc           #40                 // int 805306368
       6: invokestatic  #41                 // Method org/xnio/Bits.anyAreSet:(II)Z
       9: ireturn

  public boolean isPushSupported();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isMultiplexingSupported();
    Code:
       0: iconst_0
       1: ireturn

  public io.undertow.client.ClientStatistics getStatistics();
    Code:
       0: aload_0
       1: getfield      #17                 // Field clientStatistics:Lio/undertow/client/ClientStatistics;
       4: areturn

  public boolean isUpgradeSupported();
    Code:
       0: iconst_0
       1: ireturn

  public void sendRequest(io.undertow.client.ClientRequest, io.undertow.client.ClientCallback<io.undertow.client.ClientExchange>);
    Code:
       0: aload_0
       1: getfield      #38                 // Field state:I
       4: ldc           #42                 // int -268435456
       6: invokestatic  #41                 // Method org/xnio/Bits.anyAreSet:(II)Z
       9: ifeq          27
      12: aload_2
      13: getstatic     #43                 // Field io/undertow/client/UndertowClientMessages.MESSAGES:Lio/undertow/client/UndertowClientMessages;
      16: invokeinterface #44,  1           // InterfaceMethod io/undertow/client/UndertowClientMessages.invalidConnectionState:()Ljava/io/IOException;
      21: invokeinterface #45,  2           // InterfaceMethod io/undertow/client/ClientCallback.failed:(Ljava/io/IOException;)V
      26: return
      27: new           #46                 // class io/undertow/client/ajp/AjpClientExchange
      30: dup
      31: aload_2
      32: aload_1
      33: aload_0
      34: invokespecial #47                 // Method io/undertow/client/ajp/AjpClientExchange."<init>":(Lio/undertow/client/ClientCallback;Lio/undertow/client/ClientRequest;Lio/undertow/client/ajp/AjpClientConnection;)V
      37: astore_3
      38: aload_0
      39: getfield      #4                  // Field currentRequest:Lio/undertow/client/ajp/AjpClientExchange;
      42: ifnonnull     53
      45: aload_0
      46: aload_3
      47: invokespecial #48                 // Method initiateRequest:(Lio/undertow/client/ajp/AjpClientExchange;)V
      50: goto          64
      53: aload_0
      54: getfield      #14                 // Field pendingQueue:Ljava/util/Deque;
      57: aload_3
      58: invokeinterface #49,  2           // InterfaceMethod java/util/Deque.add:(Ljava/lang/Object;)Z
      63: pop
      64: return

  private void initiateRequest(io.undertow.client.ajp.AjpClientExchange);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #4                  // Field currentRequest:Lio/undertow/client/ajp/AjpClientExchange;
       5: aload_1
       6: invokevirtual #50                 // Method io/undertow/client/ajp/AjpClientExchange.getRequest:()Lio/undertow/client/ClientRequest;
       9: astore_2
      10: aload_2
      11: invokevirtual #51                 // Method io/undertow/client/ClientRequest.getRequestHeaders:()Lio/undertow/util/HeaderMap;
      14: getstatic     #52                 // Field io/undertow/util/Headers.CONNECTION:Lio/undertow/util/HttpString;
      17: invokevirtual #53                 // Method io/undertow/util/HeaderMap.getFirst:(Lio/undertow/util/HttpString;)Ljava/lang/String;
      20: astore_3
      21: aload_3
      22: ifnull        49
      25: getstatic     #54                 // Field io/undertow/util/Headers.CLOSE:Lio/undertow/util/HttpString;
      28: aload_3
      29: invokevirtual #55                 // Method io/undertow/util/HttpString.equalToString:(Ljava/lang/String;)Z
      32: ifeq          70
      35: aload_0
      36: dup
      37: getfield      #38                 // Field state:I
      40: ldc           #56                 // int 1073741824
      42: ior
      43: putfield      #38                 // Field state:I
      46: goto          70
      49: aload_2
      50: invokevirtual #57                 // Method io/undertow/client/ClientRequest.getProtocol:()Lio/undertow/util/HttpString;
      53: getstatic     #58                 // Field io/undertow/util/Protocols.HTTP_1_1:Lio/undertow/util/HttpString;
      56: if_acmpeq     70
      59: aload_0
      60: dup
      61: getfield      #38                 // Field state:I
      64: ldc           #56                 // int 1073741824
      66: ior
      67: putfield      #38                 // Field state:I
      70: aload_2
      71: invokevirtual #51                 // Method io/undertow/client/ClientRequest.getRequestHeaders:()Lio/undertow/util/HeaderMap;
      74: getstatic     #59                 // Field io/undertow/util/Headers.UPGRADE:Lio/undertow/util/HttpString;
      77: invokevirtual #60                 // Method io/undertow/util/HeaderMap.contains:(Lio/undertow/util/HttpString;)Z
      80: ifeq          94
      83: aload_0
      84: dup
      85: getfield      #38                 // Field state:I
      88: ldc           #61                 // int 536870912
      90: ior
      91: putfield      #38                 // Field state:I
      94: lconst_0
      95: lstore        4
      97: aload_2
      98: invokevirtual #51                 // Method io/undertow/client/ClientRequest.getRequestHeaders:()Lio/undertow/util/HeaderMap;
     101: getstatic     #62                 // Field io/undertow/util/Headers.CONTENT_LENGTH:Lio/undertow/util/HttpString;
     104: invokevirtual #53                 // Method io/undertow/util/HeaderMap.getFirst:(Lio/undertow/util/HttpString;)Ljava/lang/String;
     107: astore        6
     109: aload_2
     110: invokevirtual #51                 // Method io/undertow/client/ClientRequest.getRequestHeaders:()Lio/undertow/util/HeaderMap;
     113: getstatic     #63                 // Field io/undertow/util/Headers.TRANSFER_ENCODING:Lio/undertow/util/HttpString;
     116: invokevirtual #64                 // Method io/undertow/util/HeaderMap.getLast:(Lio/undertow/util/HttpString;)Ljava/lang/String;
     119: astore        7
     121: aload         6
     123: ifnull        136
     126: aload         6
     128: invokestatic  #65                 // Method java/lang/Long.parseLong:(Ljava/lang/String;)J
     131: lstore        4
     133: goto          146
     136: aload         7
     138: ifnull        146
     141: ldc2_w        #66                 // long -1l
     144: lstore        4
     146: aload_0
     147: getfield      #1                  // Field connection:Lio/undertow/protocols/ajp/AjpClientChannel;
     150: aload_2
     151: invokevirtual #68                 // Method io/undertow/client/ClientRequest.getMethod:()Lio/undertow/util/HttpString;
     154: aload_2
     155: invokevirtual #69                 // Method io/undertow/client/ClientRequest.getPath:()Ljava/lang/String;
     158: aload_2
     159: invokevirtual #57                 // Method io/undertow/client/ClientRequest.getProtocol:()Lio/undertow/util/HttpString;
     162: aload_2
     163: invokevirtual #51                 // Method io/undertow/client/ClientRequest.getRequestHeaders:()Lio/undertow/util/HeaderMap;
     166: aload_2
     167: aload_0
     168: getfield      #8                  // Field requestFinishListener:Lorg/xnio/ChannelListener;
     171: invokevirtual #70                 // Method io/undertow/protocols/ajp/AjpClientChannel.sendRequest:(Lio/undertow/util/HttpString;Ljava/lang/String;Lio/undertow/util/HttpString;Lio/undertow/util/HeaderMap;Lio/undertow/util/Attachable;Lorg/xnio/ChannelListener;)Lio/undertow/protocols/ajp/AjpClientRequestClientStreamSinkChannel;
     174: astore        8
     176: aload_0
     177: getfield      #4                  // Field currentRequest:Lio/undertow/client/ajp/AjpClientExchange;
     180: aload         8
     182: invokevirtual #71                 // Method io/undertow/client/ajp/AjpClientExchange.setRequestChannel:(Lio/undertow/protocols/ajp/AjpClientRequestClientStreamSinkChannel;)V
     185: aload_1
     186: aload_1
     187: invokevirtual #72                 // Method io/undertow/client/ajp/AjpClientExchange.invokeReadReadyCallback:(Lio/undertow/client/ClientExchange;)V
     190: lload         4
     192: lconst_0
     193: lcmp
     194: ifne          227
     197: aload         8
     199: invokevirtual #73                 // Method io/undertow/protocols/ajp/AjpClientRequestClientStreamSinkChannel.shutdownWrites:()V
     202: aload         8
     204: invokevirtual #74                 // Method io/undertow/protocols/ajp/AjpClientRequestClientStreamSinkChannel.flush:()Z
     207: ifne          216
     210: aload_0
     211: aload         8
     213: invokespecial #75                 // Method handleFailedFlush:(Lio/undertow/protocols/ajp/AjpClientRequestClientStreamSinkChannel;)V
     216: goto          227
     219: astore        9
     221: aload_0
     222: aload         9
     224: invokespecial #2                  // Method handleError:(Ljava/io/IOException;)V
     227: return
    Exception table:
       from    to  target type
         197   216   219   Class java/io/IOException

  private void handleFailedFlush(io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel);
    Code:
       0: aload_1
       1: invokevirtual #77                 // Method io/undertow/protocols/ajp/AjpClientRequestClientStreamSinkChannel.getWriteSetter:()Lorg/xnio/ChannelListener$Setter;
       4: aconst_null
       5: new           #78                 // class io/undertow/client/ajp/AjpClientConnection$4
       8: dup
       9: aload_0
      10: invokespecial #79                 // Method io/undertow/client/ajp/AjpClientConnection$4."<init>":(Lio/undertow/client/ajp/AjpClientConnection;)V
      13: invokestatic  #80                 // Method org/xnio/ChannelListeners.flushingChannelListener:(Lorg/xnio/ChannelListener;Lorg/xnio/ChannelExceptionHandler;)Lorg/xnio/ChannelListener;
      16: invokeinterface #26,  2           // InterfaceMethod org/xnio/ChannelListener$Setter.set:(Lorg/xnio/ChannelListener;)V
      21: aload_1
      22: invokevirtual #81                 // Method io/undertow/protocols/ajp/AjpClientRequestClientStreamSinkChannel.resumeWrites:()V
      25: return

  private void handleError(java.io.IOException);
    Code:
       0: aload_0
       1: getfield      #4                  // Field currentRequest:Lio/undertow/client/ajp/AjpClientExchange;
       4: aload_1
       5: invokevirtual #82                 // Method io/undertow/client/ajp/AjpClientExchange.setFailed:(Ljava/io/IOException;)V
       8: aload_0
       9: getfield      #1                  // Field connection:Lio/undertow/protocols/ajp/AjpClientChannel;
      12: invokestatic  #83                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
      15: return

  public org.xnio.StreamConnection performUpgrade() throws java.io.IOException;
    Code:
       0: getstatic     #84                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
       3: invokeinterface #85,  1           // InterfaceMethod io/undertow/UndertowMessages.upgradeNotSupported:()Ljava/lang/IllegalStateException;
       8: athrow

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #38                 // Field state:I
       4: ldc           #86                 // int -2147483648
       6: invokestatic  #41                 // Method org/xnio/Bits.anyAreSet:(II)Z
       9: ifeq          13
      12: return
      13: aload_0
      14: dup
      15: getfield      #38                 // Field state:I
      18: ldc           #87                 // int -1073741824
      20: ior
      21: putfield      #38                 // Field state:I
      24: aload_0
      25: getfield      #1                  // Field connection:Lio/undertow/protocols/ajp/AjpClientChannel;
      28: invokevirtual #88                 // Method io/undertow/protocols/ajp/AjpClientChannel.close:()V
      31: return

  public void requestDone();
    Code:
       0: aload_0
       1: aconst_null
       2: putfield      #4                  // Field currentRequest:Lio/undertow/client/ajp/AjpClientExchange;
       5: aload_0
       6: getfield      #38                 // Field state:I
       9: ldc           #56                 // int 1073741824
      11: invokestatic  #41                 // Method org/xnio/Bits.anyAreSet:(II)Z
      14: ifeq          27
      17: aload_0
      18: getfield      #1                  // Field connection:Lio/undertow/protocols/ajp/AjpClientChannel;
      21: invokestatic  #83                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
      24: goto          47
      27: aload_0
      28: getfield      #38                 // Field state:I
      31: ldc           #61                 // int 536870912
      33: invokestatic  #41                 // Method org/xnio/Bits.anyAreSet:(II)Z
      36: ifeq          47
      39: aload_0
      40: getfield      #1                  // Field connection:Lio/undertow/protocols/ajp/AjpClientChannel;
      43: invokestatic  #83                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
      46: return
      47: aload_0
      48: getfield      #14                 // Field pendingQueue:Ljava/util/Deque;
      51: invokeinterface #89,  1           // InterfaceMethod java/util/Deque.poll:()Ljava/lang/Object;
      56: checkcast     #46                 // class io/undertow/client/ajp/AjpClientExchange
      59: astore_1
      60: aload_1
      61: ifnull        69
      64: aload_0
      65: aload_1
      66: invokespecial #48                 // Method initiateRequest:(Lio/undertow/client/ajp/AjpClientExchange;)V
      69: return

  public void requestClose();
    Code:
       0: aload_0
       1: dup
       2: getfield      #38                 // Field state:I
       5: ldc           #56                 // int 1073741824
       7: ior
       8: putfield      #38                 // Field state:I
      11: return

  static io.undertow.client.ajp.AjpClientExchange access$000(io.undertow.client.ajp.AjpClientConnection);
    Code:
       0: aload_0
       1: getfield      #4                  // Field currentRequest:Lio/undertow/client/ajp/AjpClientExchange;
       4: areturn

  static org.xnio.ChannelListener$SimpleSetter access$100(io.undertow.client.ajp.AjpClientConnection);
    Code:
       0: aload_0
       1: getfield      #3                  // Field closeSetter:Lorg/xnio/ChannelListener$SimpleSetter;
       4: areturn

  static void access$200(io.undertow.client.ajp.AjpClientConnection, java.io.IOException);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #2                  // Method handleError:(Ljava/io/IOException;)V
       5: return

  static io.undertow.protocols.ajp.AjpClientChannel access$300(io.undertow.client.ajp.AjpClientConnection);
    Code:
       0: aload_0
       1: getfield      #1                  // Field connection:Lio/undertow/protocols/ajp/AjpClientChannel;
       4: areturn
}
