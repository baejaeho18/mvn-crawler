Compiled from "ByteRangeHandler.java"
class io.undertow.server.handlers.ByteRangeHandler$2 implements io.undertow.server.ConduitWrapper<org.xnio.conduits.StreamSinkConduit> {
  final io.undertow.util.ByteRange val$range;

  final io.undertow.server.handlers.ByteRangeHandler this$0;

  io.undertow.server.handlers.ByteRangeHandler$2(io.undertow.server.handlers.ByteRangeHandler, io.undertow.util.ByteRange);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lio/undertow/server/handlers/ByteRangeHandler;
       5: aload_0
       6: aload_2
       7: putfield      #2                  // Field val$range:Lio/undertow/util/ByteRange;
      10: aload_0
      11: invokespecial #3                  // Method java/lang/Object."<init>":()V
      14: return

  public org.xnio.conduits.StreamSinkConduit wrap(io.undertow.util.ConduitFactory<org.xnio.conduits.StreamSinkConduit>, io.undertow.server.HttpServerExchange);
    Code:
       0: aload_2
       1: invokevirtual #4                  // Method io/undertow/server/HttpServerExchange.getStatusCode:()I
       4: sipush        200
       7: if_icmpeq     20
      10: aload_1
      11: invokeinterface #6,  1            // InterfaceMethod io/undertow/util/ConduitFactory.create:()Lorg/xnio/conduits/Conduit;
      16: checkcast     #7                  // class org/xnio/conduits/StreamSinkConduit
      19: areturn
      20: aload_2
      21: invokevirtual #8                  // Method io/undertow/server/HttpServerExchange.getResponseHeaders:()Lio/undertow/util/HeaderMap;
      24: getstatic     #9                  // Field io/undertow/util/Headers.CONTENT_LENGTH:Lio/undertow/util/HttpString;
      27: invokevirtual #10                 // Method io/undertow/util/HeaderMap.getFirst:(Lio/undertow/util/HttpString;)Ljava/lang/String;
      30: astore_3
      31: aload_3
      32: ifnonnull     45
      35: aload_1
      36: invokeinterface #6,  1            // InterfaceMethod io/undertow/util/ConduitFactory.create:()Lorg/xnio/conduits/Conduit;
      41: checkcast     #7                  // class org/xnio/conduits/StreamSinkConduit
      44: areturn
      45: aload_3
      46: invokestatic  #11                 // Method java/lang/Long.parseLong:(Ljava/lang/String;)J
      49: lstore        4
      51: aload_0
      52: getfield      #2                  // Field val$range:Lio/undertow/util/ByteRange;
      55: lload         4
      57: aload_2
      58: invokevirtual #12                 // Method io/undertow/server/HttpServerExchange.getRequestHeaders:()Lio/undertow/util/HeaderMap;
      61: getstatic     #13                 // Field io/undertow/util/Headers.IF_RANGE:Lio/undertow/util/HttpString;
      64: invokevirtual #10                 // Method io/undertow/util/HeaderMap.getFirst:(Lio/undertow/util/HttpString;)Ljava/lang/String;
      67: aload_2
      68: invokevirtual #8                  // Method io/undertow/server/HttpServerExchange.getResponseHeaders:()Lio/undertow/util/HeaderMap;
      71: getstatic     #14                 // Field io/undertow/util/Headers.LAST_MODIFIED:Lio/undertow/util/HttpString;
      74: invokevirtual #10                 // Method io/undertow/util/HeaderMap.getFirst:(Lio/undertow/util/HttpString;)Ljava/lang/String;
      77: invokestatic  #15                 // Method io/undertow/util/DateUtils.parseDate:(Ljava/lang/String;)Ljava/util/Date;
      80: aload_2
      81: invokevirtual #8                  // Method io/undertow/server/HttpServerExchange.getResponseHeaders:()Lio/undertow/util/HeaderMap;
      84: getstatic     #16                 // Field io/undertow/util/Headers.ETAG:Lio/undertow/util/HttpString;
      87: invokevirtual #10                 // Method io/undertow/util/HeaderMap.getFirst:(Lio/undertow/util/HttpString;)Ljava/lang/String;
      90: invokevirtual #17                 // Method io/undertow/util/ByteRange.getResponseResult:(JLjava/lang/String;Ljava/util/Date;Ljava/lang/String;)Lio/undertow/util/ByteRange$RangeResponseResult;
      93: astore        6
      95: aload         6
      97: ifnull        203
     100: aload         6
     102: invokevirtual #18                 // Method io/undertow/util/ByteRange$RangeResponseResult.getStart:()J
     105: lstore        7
     107: aload         6
     109: invokevirtual #19                 // Method io/undertow/util/ByteRange$RangeResponseResult.getEnd:()J
     112: lstore        9
     114: aload_2
     115: aload         6
     117: invokevirtual #20                 // Method io/undertow/util/ByteRange$RangeResponseResult.getStatusCode:()I
     120: invokevirtual #21                 // Method io/undertow/server/HttpServerExchange.setStatusCode:(I)Lio/undertow/server/HttpServerExchange;
     123: pop
     124: aload_2
     125: invokevirtual #8                  // Method io/undertow/server/HttpServerExchange.getResponseHeaders:()Lio/undertow/util/HeaderMap;
     128: getstatic     #22                 // Field io/undertow/util/Headers.CONTENT_RANGE:Lio/undertow/util/HttpString;
     131: aload         6
     133: invokevirtual #23                 // Method io/undertow/util/ByteRange$RangeResponseResult.getContentRange:()Ljava/lang/String;
     136: invokevirtual #24                 // Method io/undertow/util/HeaderMap.put:(Lio/undertow/util/HttpString;Ljava/lang/String;)Lio/undertow/util/HeaderMap;
     139: pop
     140: aload_2
     141: aload         6
     143: invokevirtual #25                 // Method io/undertow/util/ByteRange$RangeResponseResult.getContentLength:()J
     146: invokevirtual #26                 // Method io/undertow/server/HttpServerExchange.setResponseContentLength:(J)Lio/undertow/server/HttpServerExchange;
     149: pop
     150: aload         6
     152: invokevirtual #20                 // Method io/undertow/util/ByteRange$RangeResponseResult.getStatusCode:()I
     155: sipush        416
     158: if_icmpne     180
     161: new           #27                 // class io/undertow/conduits/HeadStreamSinkConduit
     164: dup
     165: aload_1
     166: invokeinterface #6,  1            // InterfaceMethod io/undertow/util/ConduitFactory.create:()Lorg/xnio/conduits/Conduit;
     171: checkcast     #7                  // class org/xnio/conduits/StreamSinkConduit
     174: aconst_null
     175: iconst_1
     176: invokespecial #28                 // Method io/undertow/conduits/HeadStreamSinkConduit."<init>":(Lorg/xnio/conduits/StreamSinkConduit;Lio/undertow/conduits/ConduitListener;Z)V
     179: areturn
     180: new           #29                 // class io/undertow/conduits/RangeStreamSinkConduit
     183: dup
     184: aload_1
     185: invokeinterface #6,  1            // InterfaceMethod io/undertow/util/ConduitFactory.create:()Lorg/xnio/conduits/Conduit;
     190: checkcast     #7                  // class org/xnio/conduits/StreamSinkConduit
     193: lload         7
     195: lload         9
     197: lload         4
     199: invokespecial #30                 // Method io/undertow/conduits/RangeStreamSinkConduit."<init>":(Lorg/xnio/conduits/StreamSinkConduit;JJJ)V
     202: areturn
     203: aload_1
     204: invokeinterface #6,  1            // InterfaceMethod io/undertow/util/ConduitFactory.create:()Lorg/xnio/conduits/Conduit;
     209: checkcast     #7                  // class org/xnio/conduits/StreamSinkConduit
     212: areturn

  public org.xnio.conduits.Conduit wrap(io.undertow.util.ConduitFactory, io.undertow.server.HttpServerExchange);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #31                 // Method wrap:(Lio/undertow/util/ConduitFactory;Lio/undertow/server/HttpServerExchange;)Lorg/xnio/conduits/StreamSinkConduit;
       6: areturn
}
