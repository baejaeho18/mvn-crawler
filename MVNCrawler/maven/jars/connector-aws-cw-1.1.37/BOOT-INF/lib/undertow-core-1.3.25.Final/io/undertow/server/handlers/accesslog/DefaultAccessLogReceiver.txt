Compiled from "DefaultAccessLogReceiver.java"
public class io.undertow.server.handlers.accesslog.DefaultAccessLogReceiver implements io.undertow.server.handlers.accesslog.AccessLogReceiver,java.lang.Runnable,java.io.Closeable {
  private static final java.lang.String DEFAULT_LOG_SUFFIX;

  private final java.util.concurrent.Executor logWriteExecutor;

  private final java.util.Deque<java.lang.String> pendingMessages;

  private volatile int state;

  private static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<io.undertow.server.handlers.accesslog.DefaultAccessLogReceiver> stateUpdater;

  private long changeOverPoint;

  private java.lang.String currentDateString;

  private boolean forceLogRotation;

  private final java.nio.file.Path outputDirectory;

  private final java.nio.file.Path defaultLogFile;

  private final java.lang.String logBaseName;

  private final java.lang.String logNameSuffix;

  private java.io.Writer writer;

  private volatile boolean closed;

  private boolean initialRun;

  private final boolean rotate;

  private final io.undertow.server.handlers.accesslog.LogFileHeaderGenerator fileHeaderGenerator;

  public io.undertow.server.handlers.accesslog.DefaultAccessLogReceiver(java.util.concurrent.Executor, java.io.File, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #2                  // Method java/io/File.toPath:()Ljava/nio/file/Path;
       6: aload_3
       7: aconst_null
       8: invokespecial #3                  // Method "<init>":(Ljava/util/concurrent/Executor;Ljava/nio/file/Path;Ljava/lang/String;Ljava/lang/String;)V
      11: return

  public io.undertow.server.handlers.accesslog.DefaultAccessLogReceiver(java.util.concurrent.Executor, java.io.File, java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #2                  // Method java/io/File.toPath:()Ljava/nio/file/Path;
       6: aload_3
       7: aload         4
       9: iconst_1
      10: invokespecial #4                  // Method "<init>":(Ljava/util/concurrent/Executor;Ljava/nio/file/Path;Ljava/lang/String;Ljava/lang/String;Z)V
      13: return

  public io.undertow.server.handlers.accesslog.DefaultAccessLogReceiver(java.util.concurrent.Executor, java.io.File, java.lang.String, java.lang.String, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #2                  // Method java/io/File.toPath:()Ljava/nio/file/Path;
       6: aload_3
       7: aload         4
       9: iload         5
      11: invokespecial #4                  // Method "<init>":(Ljava/util/concurrent/Executor;Ljava/nio/file/Path;Ljava/lang/String;Ljava/lang/String;Z)V
      14: return

  public io.undertow.server.handlers.accesslog.DefaultAccessLogReceiver(java.util.concurrent.Executor, java.nio.file.Path, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aconst_null
       5: invokespecial #3                  // Method "<init>":(Ljava/util/concurrent/Executor;Ljava/nio/file/Path;Ljava/lang/String;Ljava/lang/String;)V
       8: return

  public io.undertow.server.handlers.accesslog.DefaultAccessLogReceiver(java.util.concurrent.Executor, java.nio.file.Path, java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: iconst_1
       7: invokespecial #4                  // Method "<init>":(Ljava/util/concurrent/Executor;Ljava/nio/file/Path;Ljava/lang/String;Ljava/lang/String;Z)V
      10: return

  public io.undertow.server.handlers.accesslog.DefaultAccessLogReceiver(java.util.concurrent.Executor, java.nio.file.Path, java.lang.String, java.lang.String, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: iload         5
       8: aconst_null
       9: invokespecial #1                  // Method "<init>":(Ljava/util/concurrent/Executor;Ljava/nio/file/Path;Ljava/lang/String;Ljava/lang/String;ZLio/undertow/server/handlers/accesslog/LogFileHeaderGenerator;)V
      12: return

  private io.undertow.server.handlers.accesslog.DefaultAccessLogReceiver(java.util.concurrent.Executor, java.nio.file.Path, java.lang.String, java.lang.String, boolean, io.undertow.server.handlers.accesslog.LogFileHeaderGenerator);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #6                  // Field state:I
       9: aload_0
      10: aconst_null
      11: putfield      #7                  // Field writer:Ljava/io/Writer;
      14: aload_0
      15: iconst_0
      16: putfield      #8                  // Field closed:Z
      19: aload_0
      20: iconst_1
      21: putfield      #9                  // Field initialRun:Z
      24: aload_0
      25: aload_1
      26: putfield      #10                 // Field logWriteExecutor:Ljava/util/concurrent/Executor;
      29: aload_0
      30: aload_2
      31: putfield      #11                 // Field outputDirectory:Ljava/nio/file/Path;
      34: aload_0
      35: aload_3
      36: putfield      #12                 // Field logBaseName:Ljava/lang/String;
      39: aload_0
      40: iload         5
      42: putfield      #13                 // Field rotate:Z
      45: aload_0
      46: aload         6
      48: putfield      #14                 // Field fileHeaderGenerator:Lio/undertow/server/handlers/accesslog/LogFileHeaderGenerator;
      51: aload_0
      52: aload         4
      54: ifnull        62
      57: aload         4
      59: goto          64
      62: ldc           #16                 // String log
      64: putfield      #17                 // Field logNameSuffix:Ljava/lang/String;
      67: aload_0
      68: new           #18                 // class java/util/concurrent/ConcurrentLinkedDeque
      71: dup
      72: invokespecial #19                 // Method java/util/concurrent/ConcurrentLinkedDeque."<init>":()V
      75: putfield      #20                 // Field pendingMessages:Ljava/util/Deque;
      78: aload_0
      79: aload_2
      80: new           #21                 // class java/lang/StringBuilder
      83: dup
      84: invokespecial #22                 // Method java/lang/StringBuilder."<init>":()V
      87: aload_3
      88: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      91: aload_0
      92: getfield      #17                 // Field logNameSuffix:Ljava/lang/String;
      95: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      98: invokevirtual #24                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     101: invokeinterface #25,  2           // InterfaceMethod java/nio/file/Path.resolve:(Ljava/lang/String;)Ljava/nio/file/Path;
     106: putfield      #26                 // Field defaultLogFile:Ljava/nio/file/Path;
     109: aload_0
     110: invokespecial #27                 // Method calculateChangeOverPoint:()V
     113: return

  private void calculateChangeOverPoint();
    Code:
       0: invokestatic  #28                 // Method java/util/Calendar.getInstance:()Ljava/util/Calendar;
       3: astore_1
       4: aload_1
       5: bipush        13
       7: iconst_0
       8: invokevirtual #30                 // Method java/util/Calendar.set:(II)V
      11: aload_1
      12: bipush        12
      14: iconst_0
      15: invokevirtual #30                 // Method java/util/Calendar.set:(II)V
      18: aload_1
      19: bipush        11
      21: iconst_0
      22: invokevirtual #30                 // Method java/util/Calendar.set:(II)V
      25: aload_1
      26: iconst_5
      27: iconst_1
      28: invokevirtual #31                 // Method java/util/Calendar.add:(II)V
      31: new           #32                 // class java/text/SimpleDateFormat
      34: dup
      35: ldc           #33                 // String yyyy-MM-dd
      37: getstatic     #34                 // Field java/util/Locale.US:Ljava/util/Locale;
      40: invokespecial #35                 // Method java/text/SimpleDateFormat."<init>":(Ljava/lang/String;Ljava/util/Locale;)V
      43: astore_2
      44: aload_0
      45: aload_2
      46: new           #36                 // class java/util/Date
      49: dup
      50: invokespecial #37                 // Method java/util/Date."<init>":()V
      53: invokevirtual #38                 // Method java/text/SimpleDateFormat.format:(Ljava/util/Date;)Ljava/lang/String;
      56: putfield      #39                 // Field currentDateString:Ljava/lang/String;
      59: aload_0
      60: aload_1
      61: invokevirtual #40                 // Method java/util/Calendar.getTimeInMillis:()J
      64: putfield      #41                 // Field changeOverPoint:J
      67: return

  public void logMessage(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #20                 // Field pendingMessages:Ljava/util/Deque;
       4: aload_1
       5: invokeinterface #42,  2           // InterfaceMethod java/util/Deque.add:(Ljava/lang/Object;)Z
      10: pop
      11: getstatic     #43                 // Field stateUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      14: aload_0
      15: invokevirtual #44                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.get:(Ljava/lang/Object;)I
      18: istore_2
      19: iload_2
      20: ifne          45
      23: getstatic     #43                 // Field stateUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      26: aload_0
      27: iconst_0
      28: iconst_1
      29: invokevirtual #45                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      32: ifeq          45
      35: aload_0
      36: getfield      #10                 // Field logWriteExecutor:Ljava/util/concurrent/Executor;
      39: aload_0
      40: invokeinterface #46,  2           // InterfaceMethod java/util/concurrent/Executor.execute:(Ljava/lang/Runnable;)V
      45: return

  public void run();
    Code:
       0: getstatic     #43                 // Field stateUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: iconst_1
       5: iconst_2
       6: invokevirtual #45                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
       9: ifne          13
      12: return
      13: aload_0
      14: getfield      #47                 // Field forceLogRotation:Z
      17: ifeq          27
      20: aload_0
      21: invokespecial #48                 // Method doRotate:()V
      24: goto          109
      27: aload_0
      28: getfield      #9                  // Field initialRun:Z
      31: ifeq          109
      34: aload_0
      35: getfield      #26                 // Field defaultLogFile:Ljava/nio/file/Path;
      38: iconst_0
      39: anewarray     #49                 // class java/nio/file/LinkOption
      42: invokestatic  #50                 // Method java/nio/file/Files.exists:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z
      45: ifeq          109
      48: lconst_0
      49: lstore_1
      50: aload_0
      51: getfield      #26                 // Field defaultLogFile:Ljava/nio/file/Path;
      54: iconst_0
      55: anewarray     #49                 // class java/nio/file/LinkOption
      58: invokestatic  #51                 // Method java/nio/file/Files.getLastModifiedTime:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Ljava/nio/file/attribute/FileTime;
      61: invokevirtual #52                 // Method java/nio/file/attribute/FileTime.toMillis:()J
      64: lstore_1
      65: goto          78
      68: astore_3
      69: getstatic     #54                 // Field io/undertow/UndertowLogger.ROOT_LOGGER:Lio/undertow/UndertowLogger;
      72: aload_3
      73: invokeinterface #55,  2           // InterfaceMethod io/undertow/UndertowLogger.errorRotatingAccessLog:(Ljava/io/IOException;)V
      78: invokestatic  #28                 // Method java/util/Calendar.getInstance:()Ljava/util/Calendar;
      81: astore_3
      82: aload_3
      83: aload_0
      84: getfield      #41                 // Field changeOverPoint:J
      87: invokevirtual #56                 // Method java/util/Calendar.setTimeInMillis:(J)V
      90: aload_3
      91: iconst_5
      92: iconst_m1
      93: invokevirtual #31                 // Method java/util/Calendar.add:(II)V
      96: lload_1
      97: aload_3
      98: invokevirtual #40                 // Method java/util/Calendar.getTimeInMillis:()J
     101: lcmp
     102: ifgt          109
     105: aload_0
     106: invokespecial #48                 // Method doRotate:()V
     109: aload_0
     110: iconst_0
     111: putfield      #9                  // Field initialRun:Z
     114: new           #57                 // class java/util/ArrayList
     117: dup
     118: invokespecial #58                 // Method java/util/ArrayList."<init>":()V
     121: astore_1
     122: iconst_0
     123: istore_3
     124: iload_3
     125: sipush        1000
     128: if_icmpge     165
     131: aload_0
     132: getfield      #20                 // Field pendingMessages:Ljava/util/Deque;
     135: invokeinterface #59,  1           // InterfaceMethod java/util/Deque.poll:()Ljava/lang/Object;
     140: checkcast     #60                 // class java/lang/String
     143: astore_2
     144: aload_2
     145: ifnonnull     151
     148: goto          165
     151: aload_1
     152: aload_2
     153: invokeinterface #61,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     158: pop
     159: iinc          3, 1
     162: goto          124
     165: aload_1
     166: invokeinterface #62,  1           // InterfaceMethod java/util/List.isEmpty:()Z
     171: ifne          179
     174: aload_0
     175: aload_1
     176: invokespecial #63                 // Method writeMessage:(Ljava/util/List;)V
     179: getstatic     #43                 // Field stateUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     182: aload_0
     183: iconst_0
     184: invokevirtual #64                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.set:(Ljava/lang/Object;I)V
     187: aload_0
     188: getfield      #20                 // Field pendingMessages:Ljava/util/Deque;
     191: invokeinterface #65,  1           // InterfaceMethod java/util/Deque.isEmpty:()Z
     196: ifeq          206
     199: aload_0
     200: getfield      #47                 // Field forceLogRotation:Z
     203: ifeq          231
     206: getstatic     #43                 // Field stateUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     209: aload_0
     210: iconst_0
     211: iconst_1
     212: invokevirtual #45                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
     215: ifeq          385
     218: aload_0
     219: getfield      #10                 // Field logWriteExecutor:Ljava/util/concurrent/Executor;
     222: aload_0
     223: invokeinterface #46,  2           // InterfaceMethod java/util/concurrent/Executor.execute:(Ljava/lang/Runnable;)V
     228: goto          385
     231: aload_0
     232: getfield      #8                  // Field closed:Z
     235: ifeq          385
     238: aload_0
     239: getfield      #7                  // Field writer:Ljava/io/Writer;
     242: ifnull        264
     245: aload_0
     246: getfield      #7                  // Field writer:Ljava/io/Writer;
     249: invokevirtual #66                 // Method java/io/Writer.flush:()V
     252: aload_0
     253: getfield      #7                  // Field writer:Ljava/io/Writer;
     256: invokevirtual #67                 // Method java/io/Writer.close:()V
     259: aload_0
     260: aconst_null
     261: putfield      #7                  // Field writer:Ljava/io/Writer;
     264: goto          385
     267: astore_3
     268: getstatic     #54                 // Field io/undertow/UndertowLogger.ROOT_LOGGER:Lio/undertow/UndertowLogger;
     271: aload_3
     272: invokeinterface #68,  2           // InterfaceMethod io/undertow/UndertowLogger.errorWritingAccessLog:(Ljava/io/IOException;)V
     277: goto          385
     280: astore        4
     282: getstatic     #43                 // Field stateUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     285: aload_0
     286: iconst_0
     287: invokevirtual #64                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.set:(Ljava/lang/Object;I)V
     290: aload_0
     291: getfield      #20                 // Field pendingMessages:Ljava/util/Deque;
     294: invokeinterface #65,  1           // InterfaceMethod java/util/Deque.isEmpty:()Z
     299: ifeq          309
     302: aload_0
     303: getfield      #47                 // Field forceLogRotation:Z
     306: ifeq          334
     309: getstatic     #43                 // Field stateUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     312: aload_0
     313: iconst_0
     314: iconst_1
     315: invokevirtual #45                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
     318: ifeq          382
     321: aload_0
     322: getfield      #10                 // Field logWriteExecutor:Ljava/util/concurrent/Executor;
     325: aload_0
     326: invokeinterface #46,  2           // InterfaceMethod java/util/concurrent/Executor.execute:(Ljava/lang/Runnable;)V
     331: goto          382
     334: aload_0
     335: getfield      #8                  // Field closed:Z
     338: ifeq          382
     341: aload_0
     342: getfield      #7                  // Field writer:Ljava/io/Writer;
     345: ifnull        367
     348: aload_0
     349: getfield      #7                  // Field writer:Ljava/io/Writer;
     352: invokevirtual #66                 // Method java/io/Writer.flush:()V
     355: aload_0
     356: getfield      #7                  // Field writer:Ljava/io/Writer;
     359: invokevirtual #67                 // Method java/io/Writer.close:()V
     362: aload_0
     363: aconst_null
     364: putfield      #7                  // Field writer:Ljava/io/Writer;
     367: goto          382
     370: astore        5
     372: getstatic     #54                 // Field io/undertow/UndertowLogger.ROOT_LOGGER:Lio/undertow/UndertowLogger;
     375: aload         5
     377: invokeinterface #68,  2           // InterfaceMethod io/undertow/UndertowLogger.errorWritingAccessLog:(Ljava/io/IOException;)V
     382: aload         4
     384: athrow
     385: return
    Exception table:
       from    to  target type
          50    65    68   Class java/io/IOException
         238   264   267   Class java/io/IOException
         165   179   280   any
         341   367   370   Class java/io/IOException
         280   282   280   any

  void awaitWrittenForTest() throws java.lang.InterruptedException;
    Code:
       0: aload_0
       1: getfield      #20                 // Field pendingMessages:Ljava/util/Deque;
       4: invokeinterface #65,  1           // InterfaceMethod java/util/Deque.isEmpty:()Z
       9: ifeq          19
      12: aload_0
      13: getfield      #47                 // Field forceLogRotation:Z
      16: ifeq          28
      19: ldc2_w        #69                 // long 10l
      22: invokestatic  #71                 // Method java/lang/Thread.sleep:(J)V
      25: goto          0
      28: aload_0
      29: getfield      #6                  // Field state:I
      32: ifeq          44
      35: ldc2_w        #69                 // long 10l
      38: invokestatic  #71                 // Method java/lang/Thread.sleep:(J)V
      41: goto          28
      44: return

  private void writeMessage(java.util.List<java.lang.String>);
    Code:
       0: invokestatic  #72                 // Method java/lang/System.currentTimeMillis:()J
       3: aload_0
       4: getfield      #41                 // Field changeOverPoint:J
       7: lcmp
       8: ifle          15
      11: aload_0
      12: invokespecial #48                 // Method doRotate:()V
      15: aload_0
      16: getfield      #7                  // Field writer:Ljava/io/Writer;
      19: ifnonnull     129
      22: aload_0
      23: getfield      #26                 // Field defaultLogFile:Ljava/nio/file/Path;
      26: iconst_0
      27: anewarray     #49                 // class java/nio/file/LinkOption
      30: invokestatic  #50                 // Method java/nio/file/Files.exists:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z
      33: ifne          40
      36: iconst_1
      37: goto          41
      40: iconst_0
      41: istore_2
      42: aload_0
      43: aload_0
      44: getfield      #26                 // Field defaultLogFile:Ljava/nio/file/Path;
      47: getstatic     #73                 // Field java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;
      50: iconst_2
      51: anewarray     #74                 // class java/nio/file/OpenOption
      54: dup
      55: iconst_0
      56: getstatic     #75                 // Field java/nio/file/StandardOpenOption.APPEND:Ljava/nio/file/StandardOpenOption;
      59: aastore
      60: dup
      61: iconst_1
      62: getstatic     #76                 // Field java/nio/file/StandardOpenOption.CREATE:Ljava/nio/file/StandardOpenOption;
      65: aastore
      66: invokestatic  #77                 // Method java/nio/file/Files.newBufferedWriter:(Ljava/nio/file/Path;Ljava/nio/charset/Charset;[Ljava/nio/file/OpenOption;)Ljava/io/BufferedWriter;
      69: putfield      #7                  // Field writer:Ljava/io/Writer;
      72: aload_0
      73: getfield      #26                 // Field defaultLogFile:Ljava/nio/file/Path;
      76: invokestatic  #78                 // Method java/nio/file/Files.size:(Ljava/nio/file/Path;)J
      79: lconst_0
      80: lcmp
      81: ifne          129
      84: aload_0
      85: getfield      #14                 // Field fileHeaderGenerator:Lio/undertow/server/handlers/accesslog/LogFileHeaderGenerator;
      88: ifnull        129
      91: aload_0
      92: getfield      #14                 // Field fileHeaderGenerator:Lio/undertow/server/handlers/accesslog/LogFileHeaderGenerator;
      95: invokeinterface #79,  1           // InterfaceMethod io/undertow/server/handlers/accesslog/LogFileHeaderGenerator.generateHeader:()Ljava/lang/String;
     100: astore_3
     101: aload_3
     102: ifnull        129
     105: aload_0
     106: getfield      #7                  // Field writer:Ljava/io/Writer;
     109: aload_3
     110: invokevirtual #80                 // Method java/io/Writer.write:(Ljava/lang/String;)V
     113: aload_0
     114: getfield      #7                  // Field writer:Ljava/io/Writer;
     117: ldc           #81                 // String \n
     119: invokevirtual #80                 // Method java/io/Writer.write:(Ljava/lang/String;)V
     122: aload_0
     123: getfield      #7                  // Field writer:Ljava/io/Writer;
     126: invokevirtual #66                 // Method java/io/Writer.flush:()V
     129: aload_1
     130: invokeinterface #82,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
     135: astore_2
     136: aload_2
     137: invokeinterface #83,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     142: ifeq          175
     145: aload_2
     146: invokeinterface #84,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     151: checkcast     #60                 // class java/lang/String
     154: astore_3
     155: aload_0
     156: getfield      #7                  // Field writer:Ljava/io/Writer;
     159: aload_3
     160: invokevirtual #80                 // Method java/io/Writer.write:(Ljava/lang/String;)V
     163: aload_0
     164: getfield      #7                  // Field writer:Ljava/io/Writer;
     167: bipush        10
     169: invokevirtual #85                 // Method java/io/Writer.write:(I)V
     172: goto          136
     175: aload_0
     176: getfield      #7                  // Field writer:Ljava/io/Writer;
     179: invokevirtual #66                 // Method java/io/Writer.flush:()V
     182: goto          195
     185: astore_2
     186: getstatic     #54                 // Field io/undertow/UndertowLogger.ROOT_LOGGER:Lio/undertow/UndertowLogger;
     189: aload_2
     190: invokeinterface #68,  2           // InterfaceMethod io/undertow/UndertowLogger.errorWritingAccessLog:(Ljava/io/IOException;)V
     195: return
    Exception table:
       from    to  target type
          15   182   185   Class java/io/IOException

  private void doRotate();
    Code:
       0: aload_0
       1: iconst_0
       2: putfield      #47                 // Field forceLogRotation:Z
       5: aload_0
       6: getfield      #13                 // Field rotate:Z
       9: ifne          13
      12: return
      13: aload_0
      14: getfield      #7                  // Field writer:Ljava/io/Writer;
      17: ifnull        39
      20: aload_0
      21: getfield      #7                  // Field writer:Ljava/io/Writer;
      24: invokevirtual #66                 // Method java/io/Writer.flush:()V
      27: aload_0
      28: getfield      #7                  // Field writer:Ljava/io/Writer;
      31: invokevirtual #67                 // Method java/io/Writer.close:()V
      34: aload_0
      35: aconst_null
      36: putfield      #7                  // Field writer:Ljava/io/Writer;
      39: aload_0
      40: getfield      #26                 // Field defaultLogFile:Ljava/nio/file/Path;
      43: iconst_0
      44: anewarray     #49                 // class java/nio/file/LinkOption
      47: invokestatic  #50                 // Method java/nio/file/Files.exists:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z
      50: ifne          58
      53: aload_0
      54: invokespecial #27                 // Method calculateChangeOverPoint:()V
      57: return
      58: aload_0
      59: getfield      #11                 // Field outputDirectory:Ljava/nio/file/Path;
      62: new           #21                 // class java/lang/StringBuilder
      65: dup
      66: invokespecial #22                 // Method java/lang/StringBuilder."<init>":()V
      69: aload_0
      70: getfield      #12                 // Field logBaseName:Ljava/lang/String;
      73: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      76: aload_0
      77: getfield      #39                 // Field currentDateString:Ljava/lang/String;
      80: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      83: ldc           #86                 // String .
      85: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      88: aload_0
      89: getfield      #17                 // Field logNameSuffix:Ljava/lang/String;
      92: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      95: invokevirtual #24                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      98: invokeinterface #25,  2           // InterfaceMethod java/nio/file/Path.resolve:(Ljava/lang/String;)Ljava/nio/file/Path;
     103: astore_1
     104: iconst_0
     105: istore_2
     106: aload_1
     107: iconst_0
     108: anewarray     #49                 // class java/nio/file/LinkOption
     111: invokestatic  #50                 // Method java/nio/file/Files.exists:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z
     114: ifeq          178
     117: iinc          2, 1
     120: aload_0
     121: getfield      #11                 // Field outputDirectory:Ljava/nio/file/Path;
     124: new           #21                 // class java/lang/StringBuilder
     127: dup
     128: invokespecial #22                 // Method java/lang/StringBuilder."<init>":()V
     131: aload_0
     132: getfield      #12                 // Field logBaseName:Ljava/lang/String;
     135: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     138: aload_0
     139: getfield      #39                 // Field currentDateString:Ljava/lang/String;
     142: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     145: ldc           #87                 // String -
     147: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     150: iload_2
     151: invokevirtual #88                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     154: ldc           #86                 // String .
     156: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     159: aload_0
     160: getfield      #17                 // Field logNameSuffix:Ljava/lang/String;
     163: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     166: invokevirtual #24                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     169: invokeinterface #25,  2           // InterfaceMethod java/nio/file/Path.resolve:(Ljava/lang/String;)Ljava/nio/file/Path;
     174: astore_1
     175: goto          106
     178: aload_0
     179: getfield      #26                 // Field defaultLogFile:Ljava/nio/file/Path;
     182: aload_1
     183: iconst_0
     184: anewarray     #89                 // class java/nio/file/CopyOption
     187: invokestatic  #90                 // Method java/nio/file/Files.move:(Ljava/nio/file/Path;Ljava/nio/file/Path;[Ljava/nio/file/CopyOption;)Ljava/nio/file/Path;
     190: pop
     191: aload_0
     192: invokespecial #27                 // Method calculateChangeOverPoint:()V
     195: goto          222
     198: astore_1
     199: getstatic     #54                 // Field io/undertow/UndertowLogger.ROOT_LOGGER:Lio/undertow/UndertowLogger;
     202: aload_1
     203: invokeinterface #55,  2           // InterfaceMethod io/undertow/UndertowLogger.errorRotatingAccessLog:(Ljava/io/IOException;)V
     208: aload_0
     209: invokespecial #27                 // Method calculateChangeOverPoint:()V
     212: goto          222
     215: astore_3
     216: aload_0
     217: invokespecial #27                 // Method calculateChangeOverPoint:()V
     220: aload_3
     221: athrow
     222: return
    Exception table:
       from    to  target type
          13    53   198   Class java/io/IOException
          58   191   198   Class java/io/IOException
          13    53   215   any
          58   191   215   any
         198   208   215   any

  public void rotate();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #47                 // Field forceLogRotation:Z
       5: getstatic     #43                 // Field stateUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       8: aload_0
       9: iconst_0
      10: iconst_1
      11: invokevirtual #45                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      14: ifeq          27
      17: aload_0
      18: getfield      #10                 // Field logWriteExecutor:Ljava/util/concurrent/Executor;
      21: aload_0
      22: invokeinterface #46,  2           // InterfaceMethod java/util/concurrent/Executor.execute:(Ljava/lang/Runnable;)V
      27: return

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #8                  // Field closed:Z
       5: getstatic     #43                 // Field stateUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       8: aload_0
       9: iconst_0
      10: iconst_1
      11: invokevirtual #45                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      14: ifeq          27
      17: aload_0
      18: getfield      #10                 // Field logWriteExecutor:Ljava/util/concurrent/Executor;
      21: aload_0
      22: invokeinterface #46,  2           // InterfaceMethod java/util/concurrent/Executor.execute:(Ljava/lang/Runnable;)V
      27: return

  public static io.undertow.server.handlers.accesslog.DefaultAccessLogReceiver$Builder builder();
    Code:
       0: new           #91                 // class io/undertow/server/handlers/accesslog/DefaultAccessLogReceiver$Builder
       3: dup
       4: invokespecial #92                 // Method io/undertow/server/handlers/accesslog/DefaultAccessLogReceiver$Builder."<init>":()V
       7: areturn

  io.undertow.server.handlers.accesslog.DefaultAccessLogReceiver(java.util.concurrent.Executor, java.nio.file.Path, java.lang.String, java.lang.String, boolean, io.undertow.server.handlers.accesslog.LogFileHeaderGenerator, io.undertow.server.handlers.accesslog.DefaultAccessLogReceiver$1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: iload         5
       8: aload         6
      10: invokespecial #1                  // Method "<init>":(Ljava/util/concurrent/Executor;Ljava/nio/file/Path;Ljava/lang/String;Ljava/lang/String;ZLio/undertow/server/handlers/accesslog/LogFileHeaderGenerator;)V
      13: return

  static {};
    Code:
       0: ldc           #15                 // class io/undertow/server/handlers/accesslog/DefaultAccessLogReceiver
       2: ldc           #93                 // String state
       4: invokestatic  #94                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       7: putstatic     #43                 // Field stateUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: return
}
