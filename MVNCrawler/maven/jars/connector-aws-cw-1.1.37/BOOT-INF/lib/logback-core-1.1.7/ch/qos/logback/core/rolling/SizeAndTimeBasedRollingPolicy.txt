Compiled from "SizeAndTimeBasedRollingPolicy.java"
public class ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy<E> extends ch.qos.logback.core.rolling.TimeBasedRollingPolicy<E> {
  java.lang.String maxFileSizeAsString;

  public ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method ch/qos/logback/core/rolling/TimeBasedRollingPolicy."<init>":()V
       4: return

  public void start();
    Code:
       0: new           #2                  // class ch/qos/logback/core/rolling/SizeAndTimeBasedFNATP
       3: dup
       4: invokespecial #3                  // Method ch/qos/logback/core/rolling/SizeAndTimeBasedFNATP."<init>":()V
       7: astore_1
       8: aload_0
       9: getfield      #4                  // Field maxFileSizeAsString:Ljava/lang/String;
      12: ifnonnull     22
      15: aload_0
      16: ldc           #5                  // String MaxFileSize property must be set
      18: invokevirtual #6                  // Method addError:(Ljava/lang/String;)V
      21: return
      22: aload_0
      23: new           #7                  // class java/lang/StringBuilder
      26: dup
      27: invokespecial #8                  // Method java/lang/StringBuilder."<init>":()V
      30: ldc           #9                  // String Achive files will be limied to [
      32: invokevirtual #10                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      35: aload_0
      36: getfield      #4                  // Field maxFileSizeAsString:Ljava/lang/String;
      39: invokevirtual #10                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      42: ldc           #11                 // String ] each.
      44: invokevirtual #10                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      47: invokevirtual #12                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      50: invokevirtual #13                 // Method addInfo:(Ljava/lang/String;)V
      53: aload_1
      54: aload_0
      55: getfield      #4                  // Field maxFileSizeAsString:Ljava/lang/String;
      58: invokevirtual #14                 // Method ch/qos/logback/core/rolling/SizeAndTimeBasedFNATP.setMaxFileSize:(Ljava/lang/String;)V
      61: aload_0
      62: aload_1
      63: putfield      #15                 // Field timeBasedFileNamingAndTriggeringPolicy:Lch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy;
      66: aload_0
      67: invokespecial #16                 // Method ch/qos/logback/core/rolling/TimeBasedRollingPolicy.start:()V
      70: return

  public void setMaxFileSize(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #4                  // Field maxFileSizeAsString:Ljava/lang/String;
       5: return

  public java.lang.String toString();
    Code:
       0: new           #7                  // class java/lang/StringBuilder
       3: dup
       4: invokespecial #8                  // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #17                 // String c.q.l.core.rolling.SizeAndTimeBasedRollingPolicy@
       9: invokevirtual #10                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: invokevirtual #18                 // Method java/lang/Object.hashCode:()I
      16: invokevirtual #19                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      19: invokevirtual #12                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      22: areturn
}
