Compiled from "PdfBoxGraphics2D.java"
public class de.rototor.pdfbox.graphics2d.PdfBoxGraphics2D extends java.awt.Graphics2D {
  private final org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject xFormObject;

  private final java.awt.Graphics2D calcGfx;

  private final org.apache.pdfbox.pdmodel.PDPageContentStream contentStream;

  private java.awt.image.BufferedImage calcImage;

  private org.apache.pdfbox.pdmodel.PDDocument document;

  private final java.awt.geom.AffineTransform baseTransform;

  private java.awt.geom.AffineTransform transform;

  private de.rototor.pdfbox.graphics2d.IPdfBoxGraphics2DImageEncoder imageEncoder;

  private de.rototor.pdfbox.graphics2d.IPdfBoxGraphics2DColorMapper colorMapper;

  private de.rototor.pdfbox.graphics2d.IPdfBoxGraphics2DPaintApplier paintApplier;

  private de.rototor.pdfbox.graphics2d.IPdfBoxGraphics2DFontTextDrawer fontTextDrawer;

  private de.rototor.pdfbox.graphics2d.IPdfBoxGraphics2DDrawControl drawControl;

  private java.awt.Paint paint;

  private java.awt.Stroke stroke;

  private java.awt.Color xorColor;

  private java.awt.Font font;

  private java.awt.Composite composite;

  private java.awt.Shape clipShape;

  private java.awt.Color backgroundColor;

  private final de.rototor.pdfbox.graphics2d.PdfBoxGraphics2D$CopyInfo copyInfo;

  private final org.apache.pdfbox.pdmodel.common.PDRectangle bbox;

  private int saveCounter;

  private final java.util.List<de.rototor.pdfbox.graphics2d.PdfBoxGraphics2D$CopyInfo> copyList;

  public static boolean ENABLE_CHILD_CREATING_DEBUG;

  private final de.rototor.pdfbox.graphics2d.IPdfBoxGraphics2DDrawControl$IDrawControlEnv drawControlEnv;

  private final de.rototor.pdfbox.graphics2d.IPdfBoxGraphics2DFontTextDrawer$IFontTextDrawerEnv fontDrawerEnv;

  private final de.rototor.pdfbox.graphics2d.PdfBoxGraphics2D$PaintEnvImpl paintEnv;

  private java.util.Map<java.awt.RenderingHints$Key, java.lang.Object> renderingHints;

  private boolean hasPathOnStream;

  public void setColorMapper(de.rototor.pdfbox.graphics2d.IPdfBoxGraphics2DColorMapper);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #3                  // Field colorMapper:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DColorMapper;
       5: return

  public void setImageEncoder(de.rototor.pdfbox.graphics2d.IPdfBoxGraphics2DImageEncoder);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2                  // Field imageEncoder:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DImageEncoder;
       5: return

  public void setPaintApplier(de.rototor.pdfbox.graphics2d.IPdfBoxGraphics2DPaintApplier);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #15                 // Field paintApplier:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DPaintApplier;
       5: return

  public void setDrawControl(de.rototor.pdfbox.graphics2d.IPdfBoxGraphics2DDrawControl);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #16                 // Field drawControl:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DDrawControl;
       5: return

  public de.rototor.pdfbox.graphics2d.PdfBoxGraphics2D(org.apache.pdfbox.pdmodel.PDDocument, int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: new           #17                 // class org/apache/pdfbox/pdmodel/common/PDRectangle
       5: dup
       6: iload_2
       7: i2f
       8: iload_3
       9: i2f
      10: invokespecial #18                 // Method org/apache/pdfbox/pdmodel/common/PDRectangle."<init>":(FF)V
      13: invokespecial #19                 // Method "<init>":(Lorg/apache/pdfbox/pdmodel/PDDocument;Lorg/apache/pdfbox/pdmodel/common/PDRectangle;)V
      16: return

  public de.rototor.pdfbox.graphics2d.PdfBoxGraphics2D(org.apache.pdfbox.pdmodel.PDDocument, float, float) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: new           #17                 // class org/apache/pdfbox/pdmodel/common/PDRectangle
       5: dup
       6: fload_2
       7: fload_3
       8: invokespecial #18                 // Method org/apache/pdfbox/pdmodel/common/PDRectangle."<init>":(FF)V
      11: invokespecial #19                 // Method "<init>":(Lorg/apache/pdfbox/pdmodel/PDDocument;Lorg/apache/pdfbox/pdmodel/common/PDRectangle;)V
      14: return

  public void setFontTextDrawer(de.rototor.pdfbox.graphics2d.IPdfBoxGraphics2DFontTextDrawer);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #20                 // Field fontTextDrawer:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DFontTextDrawer;
       5: return

  public de.rototor.pdfbox.graphics2d.PdfBoxGraphics2D(org.apache.pdfbox.pdmodel.PDDocument, org.apache.pdfbox.pdmodel.common.PDRectangle) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aconst_null
       4: invokespecial #21                 // Method "<init>":(Lorg/apache/pdfbox/pdmodel/PDDocument;Lorg/apache/pdfbox/pdmodel/common/PDRectangle;Lde/rototor/pdfbox/graphics2d/PdfBoxGraphics2D;)V
       7: return

  de.rototor.pdfbox.graphics2d.PdfBoxGraphics2D(org.apache.pdfbox.pdmodel.PDDocument, org.apache.pdfbox.pdmodel.common.PDRectangle, de.rototor.pdfbox.graphics2d.PdfBoxGraphics2D) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #22                 // Method java/awt/Graphics2D."<init>":()V
       4: aload_0
       5: new           #23                 // class java/awt/geom/AffineTransform
       8: dup
       9: invokespecial #24                 // Method java/awt/geom/AffineTransform."<init>":()V
      12: putfield      #25                 // Field transform:Ljava/awt/geom/AffineTransform;
      15: aload_0
      16: new           #26                 // class de/rototor/pdfbox/graphics2d/PdfBoxGraphics2DLosslessImageEncoder
      19: dup
      20: invokespecial #27                 // Method de/rototor/pdfbox/graphics2d/PdfBoxGraphics2DLosslessImageEncoder."<init>":()V
      23: putfield      #2                  // Field imageEncoder:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DImageEncoder;
      26: aload_0
      27: new           #28                 // class de/rototor/pdfbox/graphics2d/PdfBoxGraphics2DColorMapper
      30: dup
      31: invokespecial #29                 // Method de/rototor/pdfbox/graphics2d/PdfBoxGraphics2DColorMapper."<init>":()V
      34: putfield      #3                  // Field colorMapper:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DColorMapper;
      37: aload_0
      38: new           #30                 // class de/rototor/pdfbox/graphics2d/PdfBoxGraphics2DPaintApplier
      41: dup
      42: invokespecial #31                 // Method de/rototor/pdfbox/graphics2d/PdfBoxGraphics2DPaintApplier."<init>":()V
      45: putfield      #15                 // Field paintApplier:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DPaintApplier;
      48: aload_0
      49: new           #32                 // class de/rototor/pdfbox/graphics2d/PdfBoxGraphics2DFontTextDrawer
      52: dup
      53: invokespecial #33                 // Method de/rototor/pdfbox/graphics2d/PdfBoxGraphics2DFontTextDrawer."<init>":()V
      56: putfield      #20                 // Field fontTextDrawer:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DFontTextDrawer;
      59: aload_0
      60: getstatic     #34                 // Field de/rototor/pdfbox/graphics2d/PdfBoxGraphics2DDrawControlDefault.INSTANCE:Lde/rototor/pdfbox/graphics2d/PdfBoxGraphics2DDrawControlDefault;
      63: putfield      #16                 // Field drawControl:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DDrawControl;
      66: aload_0
      67: iconst_0
      68: putfield      #35                 // Field saveCounter:I
      71: aload_0
      72: new           #36                 // class java/util/ArrayList
      75: dup
      76: invokespecial #37                 // Method java/util/ArrayList."<init>":()V
      79: putfield      #38                 // Field copyList:Ljava/util/List;
      82: aload_0
      83: new           #39                 // class de/rototor/pdfbox/graphics2d/PdfBoxGraphics2D$1
      86: dup
      87: aload_0
      88: invokespecial #40                 // Method de/rototor/pdfbox/graphics2d/PdfBoxGraphics2D$1."<init>":(Lde/rototor/pdfbox/graphics2d/PdfBoxGraphics2D;)V
      91: putfield      #41                 // Field drawControlEnv:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DDrawControl$IDrawControlEnv;
      94: aload_0
      95: new           #42                 // class de/rototor/pdfbox/graphics2d/PdfBoxGraphics2D$2
      98: dup
      99: aload_0
     100: invokespecial #43                 // Method de/rototor/pdfbox/graphics2d/PdfBoxGraphics2D$2."<init>":(Lde/rototor/pdfbox/graphics2d/PdfBoxGraphics2D;)V
     103: putfield      #44                 // Field fontDrawerEnv:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DFontTextDrawer$IFontTextDrawerEnv;
     106: aload_0
     107: new           #45                 // class de/rototor/pdfbox/graphics2d/PdfBoxGraphics2D$PaintEnvImpl
     110: dup
     111: aload_0
     112: aconst_null
     113: invokespecial #46                 // Method de/rototor/pdfbox/graphics2d/PdfBoxGraphics2D$PaintEnvImpl."<init>":(Lde/rototor/pdfbox/graphics2d/PdfBoxGraphics2D;Lde/rototor/pdfbox/graphics2d/PdfBoxGraphics2D$1;)V
     116: putfield      #47                 // Field paintEnv:Lde/rototor/pdfbox/graphics2d/PdfBoxGraphics2D$PaintEnvImpl;
     119: aload_0
     120: new           #48                 // class java/util/HashMap
     123: dup
     124: invokespecial #49                 // Method java/util/HashMap."<init>":()V
     127: putfield      #50                 // Field renderingHints:Ljava/util/Map;
     130: aload_0
     131: iconst_0
     132: putfield      #51                 // Field hasPathOnStream:Z
     135: aload_0
     136: aload_1
     137: putfield      #13                 // Field document:Lorg/apache/pdfbox/pdmodel/PDDocument;
     140: aload_0
     141: aload_2
     142: putfield      #8                  // Field bbox:Lorg/apache/pdfbox/pdmodel/common/PDRectangle;
     145: new           #52                 // class org/apache/pdfbox/pdmodel/interactive/annotation/PDAppearanceStream
     148: dup
     149: aload_1
     150: invokespecial #53                 // Method org/apache/pdfbox/pdmodel/interactive/annotation/PDAppearanceStream."<init>":(Lorg/apache/pdfbox/pdmodel/PDDocument;)V
     153: astore        4
     155: aload_0
     156: aload         4
     158: putfield      #7                  // Field xFormObject:Lorg/apache/pdfbox/pdmodel/graphics/form/PDFormXObject;
     161: aload_0
     162: getfield      #7                  // Field xFormObject:Lorg/apache/pdfbox/pdmodel/graphics/form/PDFormXObject;
     165: new           #54                 // class org/apache/pdfbox/pdmodel/PDResources
     168: dup
     169: invokespecial #55                 // Method org/apache/pdfbox/pdmodel/PDResources."<init>":()V
     172: invokevirtual #56                 // Method org/apache/pdfbox/pdmodel/graphics/form/PDFormXObject.setResources:(Lorg/apache/pdfbox/pdmodel/PDResources;)V
     175: aload_0
     176: getfield      #7                  // Field xFormObject:Lorg/apache/pdfbox/pdmodel/graphics/form/PDFormXObject;
     179: aload_2
     180: invokevirtual #57                 // Method org/apache/pdfbox/pdmodel/graphics/form/PDFormXObject.setBBox:(Lorg/apache/pdfbox/pdmodel/common/PDRectangle;)V
     183: aload_0
     184: new           #58                 // class org/apache/pdfbox/pdmodel/PDPageContentStream
     187: dup
     188: aload_1
     189: aload         4
     191: aload_0
     192: getfield      #7                  // Field xFormObject:Lorg/apache/pdfbox/pdmodel/graphics/form/PDFormXObject;
     195: invokevirtual #59                 // Method org/apache/pdfbox/pdmodel/graphics/form/PDFormXObject.getStream:()Lorg/apache/pdfbox/pdmodel/common/PDStream;
     198: getstatic     #60                 // Field org/apache/pdfbox/cos/COSName.FLATE_DECODE:Lorg/apache/pdfbox/cos/COSName;
     201: invokevirtual #61                 // Method org/apache/pdfbox/pdmodel/common/PDStream.createOutputStream:(Lorg/apache/pdfbox/cos/COSName;)Ljava/io/OutputStream;
     204: invokespecial #62                 // Method org/apache/pdfbox/pdmodel/PDPageContentStream."<init>":(Lorg/apache/pdfbox/pdmodel/PDDocument;Lorg/apache/pdfbox/pdmodel/interactive/annotation/PDAppearanceStream;Ljava/io/OutputStream;)V
     207: putfield      #12                 // Field contentStream:Lorg/apache/pdfbox/pdmodel/PDPageContentStream;
     210: aload_0
     211: invokespecial #63                 // Method contentStreamSaveState:()V
     214: aload_3
     215: ifnull        250
     218: aload_0
     219: aload_3
     220: getfield      #3                  // Field colorMapper:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DColorMapper;
     223: putfield      #3                  // Field colorMapper:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DColorMapper;
     226: aload_0
     227: aload_3
     228: getfield      #20                 // Field fontTextDrawer:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DFontTextDrawer;
     231: putfield      #20                 // Field fontTextDrawer:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DFontTextDrawer;
     234: aload_0
     235: aload_3
     236: getfield      #2                  // Field imageEncoder:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DImageEncoder;
     239: putfield      #2                  // Field imageEncoder:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DImageEncoder;
     242: aload_0
     243: aload_3
     244: getfield      #15                 // Field paintApplier:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DPaintApplier;
     247: putfield      #15                 // Field paintApplier:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DPaintApplier;
     250: aload_0
     251: new           #23                 // class java/awt/geom/AffineTransform
     254: dup
     255: invokespecial #24                 // Method java/awt/geom/AffineTransform."<init>":()V
     258: putfield      #64                 // Field baseTransform:Ljava/awt/geom/AffineTransform;
     261: aload_0
     262: getfield      #64                 // Field baseTransform:Ljava/awt/geom/AffineTransform;
     265: dconst_0
     266: aload_2
     267: invokevirtual #65                 // Method org/apache/pdfbox/pdmodel/common/PDRectangle.getHeight:()F
     270: f2d
     271: invokevirtual #66                 // Method java/awt/geom/AffineTransform.translate:(DD)V
     274: aload_0
     275: getfield      #64                 // Field baseTransform:Ljava/awt/geom/AffineTransform;
     278: dconst_1
     279: ldc2_w        #67                 // double -1.0d
     282: invokevirtual #69                 // Method java/awt/geom/AffineTransform.scale:(DD)V
     285: aload_0
     286: new           #70                 // class java/awt/image/BufferedImage
     289: dup
     290: bipush        100
     292: bipush        100
     294: bipush        6
     296: invokespecial #71                 // Method java/awt/image/BufferedImage."<init>":(III)V
     299: putfield      #72                 // Field calcImage:Ljava/awt/image/BufferedImage;
     302: aload_0
     303: aload_0
     304: getfield      #72                 // Field calcImage:Ljava/awt/image/BufferedImage;
     307: invokevirtual #73                 // Method java/awt/image/BufferedImage.createGraphics:()Ljava/awt/Graphics2D;
     310: putfield      #6                  // Field calcGfx:Ljava/awt/Graphics2D;
     313: aload_0
     314: aload_0
     315: getfield      #6                  // Field calcGfx:Ljava/awt/Graphics2D;
     318: invokevirtual #74                 // Method java/awt/Graphics2D.getFont:()Ljava/awt/Font;
     321: putfield      #11                 // Field font:Ljava/awt/Font;
     324: aload_0
     325: aconst_null
     326: putfield      #75                 // Field copyInfo:Lde/rototor/pdfbox/graphics2d/PdfBoxGraphics2D$CopyInfo;
     329: return

  public org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject getXFormObject();
    Code:
       0: aload_0
       1: getfield      #13                 // Field document:Lorg/apache/pdfbox/pdmodel/PDDocument;
       4: ifnull        17
       7: new           #76                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #77                 // String You can only get the XformObject after you disposed the Graphics2D!
      13: invokespecial #78                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: getfield      #75                 // Field copyInfo:Lde/rototor/pdfbox/graphics2d/PdfBoxGraphics2D$CopyInfo;
      21: ifnull        34
      24: new           #76                 // class java/lang/IllegalStateException
      27: dup
      28: ldc           #79                 // String You can not get the Xform stream from the copy
      30: invokespecial #78                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      33: athrow
      34: aload_0
      35: getfield      #7                  // Field xFormObject:Lorg/apache/pdfbox/pdmodel/graphics/form/PDFormXObject;
      38: areturn

  private de.rototor.pdfbox.graphics2d.PdfBoxGraphics2D(de.rototor.pdfbox.graphics2d.PdfBoxGraphics2D) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #22                 // Method java/awt/Graphics2D."<init>":()V
       4: aload_0
       5: new           #23                 // class java/awt/geom/AffineTransform
       8: dup
       9: invokespecial #24                 // Method java/awt/geom/AffineTransform."<init>":()V
      12: putfield      #25                 // Field transform:Ljava/awt/geom/AffineTransform;
      15: aload_0
      16: new           #26                 // class de/rototor/pdfbox/graphics2d/PdfBoxGraphics2DLosslessImageEncoder
      19: dup
      20: invokespecial #27                 // Method de/rototor/pdfbox/graphics2d/PdfBoxGraphics2DLosslessImageEncoder."<init>":()V
      23: putfield      #2                  // Field imageEncoder:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DImageEncoder;
      26: aload_0
      27: new           #28                 // class de/rototor/pdfbox/graphics2d/PdfBoxGraphics2DColorMapper
      30: dup
      31: invokespecial #29                 // Method de/rototor/pdfbox/graphics2d/PdfBoxGraphics2DColorMapper."<init>":()V
      34: putfield      #3                  // Field colorMapper:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DColorMapper;
      37: aload_0
      38: new           #30                 // class de/rototor/pdfbox/graphics2d/PdfBoxGraphics2DPaintApplier
      41: dup
      42: invokespecial #31                 // Method de/rototor/pdfbox/graphics2d/PdfBoxGraphics2DPaintApplier."<init>":()V
      45: putfield      #15                 // Field paintApplier:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DPaintApplier;
      48: aload_0
      49: new           #32                 // class de/rototor/pdfbox/graphics2d/PdfBoxGraphics2DFontTextDrawer
      52: dup
      53: invokespecial #33                 // Method de/rototor/pdfbox/graphics2d/PdfBoxGraphics2DFontTextDrawer."<init>":()V
      56: putfield      #20                 // Field fontTextDrawer:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DFontTextDrawer;
      59: aload_0
      60: getstatic     #34                 // Field de/rototor/pdfbox/graphics2d/PdfBoxGraphics2DDrawControlDefault.INSTANCE:Lde/rototor/pdfbox/graphics2d/PdfBoxGraphics2DDrawControlDefault;
      63: putfield      #16                 // Field drawControl:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DDrawControl;
      66: aload_0
      67: iconst_0
      68: putfield      #35                 // Field saveCounter:I
      71: aload_0
      72: new           #36                 // class java/util/ArrayList
      75: dup
      76: invokespecial #37                 // Method java/util/ArrayList."<init>":()V
      79: putfield      #38                 // Field copyList:Ljava/util/List;
      82: aload_0
      83: new           #39                 // class de/rototor/pdfbox/graphics2d/PdfBoxGraphics2D$1
      86: dup
      87: aload_0
      88: invokespecial #40                 // Method de/rototor/pdfbox/graphics2d/PdfBoxGraphics2D$1."<init>":(Lde/rototor/pdfbox/graphics2d/PdfBoxGraphics2D;)V
      91: putfield      #41                 // Field drawControlEnv:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DDrawControl$IDrawControlEnv;
      94: aload_0
      95: new           #42                 // class de/rototor/pdfbox/graphics2d/PdfBoxGraphics2D$2
      98: dup
      99: aload_0
     100: invokespecial #43                 // Method de/rototor/pdfbox/graphics2d/PdfBoxGraphics2D$2."<init>":(Lde/rototor/pdfbox/graphics2d/PdfBoxGraphics2D;)V
     103: putfield      #44                 // Field fontDrawerEnv:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DFontTextDrawer$IFontTextDrawerEnv;
     106: aload_0
     107: new           #45                 // class de/rototor/pdfbox/graphics2d/PdfBoxGraphics2D$PaintEnvImpl
     110: dup
     111: aload_0
     112: aconst_null
     113: invokespecial #46                 // Method de/rototor/pdfbox/graphics2d/PdfBoxGraphics2D$PaintEnvImpl."<init>":(Lde/rototor/pdfbox/graphics2d/PdfBoxGraphics2D;Lde/rototor/pdfbox/graphics2d/PdfBoxGraphics2D$1;)V
     116: putfield      #47                 // Field paintEnv:Lde/rototor/pdfbox/graphics2d/PdfBoxGraphics2D$PaintEnvImpl;
     119: aload_0
     120: new           #48                 // class java/util/HashMap
     123: dup
     124: invokespecial #49                 // Method java/util/HashMap."<init>":()V
     127: putfield      #50                 // Field renderingHints:Ljava/util/Map;
     130: aload_0
     131: iconst_0
     132: putfield      #51                 // Field hasPathOnStream:Z
     135: new           #80                 // class de/rototor/pdfbox/graphics2d/PdfBoxGraphics2D$CopyInfo
     138: dup
     139: aconst_null
     140: invokespecial #81                 // Method de/rototor/pdfbox/graphics2d/PdfBoxGraphics2D$CopyInfo."<init>":(Lde/rototor/pdfbox/graphics2d/PdfBoxGraphics2D$1;)V
     143: astore_2
     144: aload_2
     145: aload_0
     146: invokespecial #82                 // Method gatherContext:()Ljava/lang/String;
     149: putfield      #83                 // Field de/rototor/pdfbox/graphics2d/PdfBoxGraphics2D$CopyInfo.creatingContextInfo:Ljava/lang/String;
     152: aload_2
     153: aload_0
     154: putfield      #84                 // Field de/rototor/pdfbox/graphics2d/PdfBoxGraphics2D$CopyInfo.copy:Lde/rototor/pdfbox/graphics2d/PdfBoxGraphics2D;
     157: aload_2
     158: aload_1
     159: putfield      #85                 // Field de/rototor/pdfbox/graphics2d/PdfBoxGraphics2D$CopyInfo.sourceGfx:Lde/rototor/pdfbox/graphics2d/PdfBoxGraphics2D;
     162: aload_1
     163: getfield      #38                 // Field copyList:Ljava/util/List;
     166: aload_2
     167: invokeinterface #86,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     172: pop
     173: aload_0
     174: aload_2
     175: putfield      #75                 // Field copyInfo:Lde/rototor/pdfbox/graphics2d/PdfBoxGraphics2D$CopyInfo;
     178: aload_0
     179: iconst_0
     180: putfield      #51                 // Field hasPathOnStream:Z
     183: aload_0
     184: aload_1
     185: getfield      #13                 // Field document:Lorg/apache/pdfbox/pdmodel/PDDocument;
     188: putfield      #13                 // Field document:Lorg/apache/pdfbox/pdmodel/PDDocument;
     191: aload_0
     192: aload_1
     193: getfield      #8                  // Field bbox:Lorg/apache/pdfbox/pdmodel/common/PDRectangle;
     196: putfield      #8                  // Field bbox:Lorg/apache/pdfbox/pdmodel/common/PDRectangle;
     199: aload_0
     200: aload_1
     201: getfield      #7                  // Field xFormObject:Lorg/apache/pdfbox/pdmodel/graphics/form/PDFormXObject;
     204: putfield      #7                  // Field xFormObject:Lorg/apache/pdfbox/pdmodel/graphics/form/PDFormXObject;
     207: aload_0
     208: aload_1
     209: getfield      #12                 // Field contentStream:Lorg/apache/pdfbox/pdmodel/PDPageContentStream;
     212: putfield      #12                 // Field contentStream:Lorg/apache/pdfbox/pdmodel/PDPageContentStream;
     215: aload_0
     216: aload_1
     217: getfield      #64                 // Field baseTransform:Ljava/awt/geom/AffineTransform;
     220: putfield      #64                 // Field baseTransform:Ljava/awt/geom/AffineTransform;
     223: aload_0
     224: aload_1
     225: getfield      #25                 // Field transform:Ljava/awt/geom/AffineTransform;
     228: invokevirtual #87                 // Method java/awt/geom/AffineTransform.clone:()Ljava/lang/Object;
     231: checkcast     #23                 // class java/awt/geom/AffineTransform
     234: putfield      #25                 // Field transform:Ljava/awt/geom/AffineTransform;
     237: aload_0
     238: aload_1
     239: getfield      #6                  // Field calcGfx:Ljava/awt/Graphics2D;
     242: putfield      #6                  // Field calcGfx:Ljava/awt/Graphics2D;
     245: aload_0
     246: aload_1
     247: getfield      #72                 // Field calcImage:Ljava/awt/image/BufferedImage;
     250: putfield      #72                 // Field calcImage:Ljava/awt/image/BufferedImage;
     253: aload_0
     254: aload_1
     255: getfield      #11                 // Field font:Ljava/awt/Font;
     258: putfield      #11                 // Field font:Ljava/awt/Font;
     261: aload_0
     262: aload_1
     263: getfield      #88                 // Field stroke:Ljava/awt/Stroke;
     266: putfield      #88                 // Field stroke:Ljava/awt/Stroke;
     269: aload_0
     270: aload_1
     271: getfield      #14                 // Field paint:Ljava/awt/Paint;
     274: putfield      #14                 // Field paint:Ljava/awt/Paint;
     277: aload_0
     278: aload_1
     279: getfield      #89                 // Field clipShape:Ljava/awt/Shape;
     282: putfield      #89                 // Field clipShape:Ljava/awt/Shape;
     285: aload_0
     286: aload_1
     287: getfield      #90                 // Field backgroundColor:Ljava/awt/Color;
     290: putfield      #90                 // Field backgroundColor:Ljava/awt/Color;
     293: aload_0
     294: aload_1
     295: getfield      #3                  // Field colorMapper:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DColorMapper;
     298: putfield      #3                  // Field colorMapper:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DColorMapper;
     301: aload_0
     302: aload_1
     303: getfield      #20                 // Field fontTextDrawer:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DFontTextDrawer;
     306: putfield      #20                 // Field fontTextDrawer:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DFontTextDrawer;
     309: aload_0
     310: aload_1
     311: getfield      #2                  // Field imageEncoder:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DImageEncoder;
     314: putfield      #2                  // Field imageEncoder:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DImageEncoder;
     317: aload_0
     318: aload_1
     319: getfield      #15                 // Field paintApplier:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DPaintApplier;
     322: putfield      #15                 // Field paintApplier:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DPaintApplier;
     325: aload_0
     326: aload_1
     327: getfield      #16                 // Field drawControl:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DDrawControl;
     330: putfield      #16                 // Field drawControl:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DDrawControl;
     333: aload_0
     334: aload_1
     335: getfield      #91                 // Field composite:Ljava/awt/Composite;
     338: putfield      #91                 // Field composite:Ljava/awt/Composite;
     341: aload_0
     342: new           #48                 // class java/util/HashMap
     345: dup
     346: aload_1
     347: getfield      #50                 // Field renderingHints:Ljava/util/Map;
     350: invokespecial #92                 // Method java/util/HashMap."<init>":(Ljava/util/Map;)V
     353: putfield      #50                 // Field renderingHints:Ljava/util/Map;
     356: aload_0
     357: aload_1
     358: getfield      #1                  // Field xorColor:Ljava/awt/Color;
     361: putfield      #1                  // Field xorColor:Ljava/awt/Color;
     364: aload_0
     365: iconst_0
     366: putfield      #35                 // Field saveCounter:I
     369: aload_0
     370: invokespecial #63                 // Method contentStreamSaveState:()V
     373: return

  private java.lang.String gatherContext();
    Code:
       0: getstatic     #93                 // Field ENABLE_CHILD_CREATING_DEBUG:Z
       3: ifne          8
       6: aconst_null
       7: areturn
       8: invokestatic  #94                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      11: invokevirtual #95                 // Method java/lang/Thread.getStackTrace:()[Ljava/lang/StackTraceElement;
      14: astore_1
      15: new           #96                 // class java/lang/StringBuilder
      18: dup
      19: invokespecial #97                 // Method java/lang/StringBuilder."<init>":()V
      22: astore_2
      23: aload_1
      24: astore_3
      25: aload_3
      26: arraylength
      27: istore        4
      29: iconst_0
      30: istore        5
      32: iload         5
      34: iload         4
      36: if_icmpge     179
      39: aload_3
      40: iload         5
      42: aaload
      43: astore        6
      45: aload         6
      47: invokevirtual #98                 // Method java/lang/StackTraceElement.getClassName:()Ljava/lang/String;
      50: ldc           #99                 // String de.rototor.pdfbox
      52: invokevirtual #100                // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      55: ifeq          61
      58: goto          173
      61: aload         6
      63: invokevirtual #98                 // Method java/lang/StackTraceElement.getClassName:()Ljava/lang/String;
      66: ldc           #101                // String org.junit
      68: invokevirtual #100                // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      71: ifeq          77
      74: goto          173
      77: aload         6
      79: invokevirtual #98                 // Method java/lang/StackTraceElement.getClassName:()Ljava/lang/String;
      82: ldc           #102                // String com.intellij.rt
      84: invokevirtual #100                // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      87: ifeq          93
      90: goto          173
      93: aload         6
      95: invokevirtual #98                 // Method java/lang/StackTraceElement.getClassName:()Ljava/lang/String;
      98: ldc           #103                // String java.lang
     100: invokevirtual #100                // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
     103: ifeq          109
     106: goto          173
     109: aload_2
     110: ldc           #104                // String  at
     112: invokevirtual #105                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     115: aload         6
     117: invokevirtual #98                 // Method java/lang/StackTraceElement.getClassName:()Ljava/lang/String;
     120: invokevirtual #105                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     123: ldc           #106                // String .
     125: invokevirtual #105                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     128: aload         6
     130: invokevirtual #107                // Method java/lang/StackTraceElement.getMethodName:()Ljava/lang/String;
     133: invokevirtual #105                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     136: ldc           #108                // String (
     138: invokevirtual #105                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     141: aload         6
     143: invokevirtual #109                // Method java/lang/StackTraceElement.getFileName:()Ljava/lang/String;
     146: invokevirtual #105                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     149: ldc           #110                // String :
     151: invokevirtual #105                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     154: aload         6
     156: invokevirtual #111                // Method java/lang/StackTraceElement.getLineNumber:()I
     159: invokevirtual #112                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     162: ldc           #113                // String )
     164: invokevirtual #105                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     167: ldc           #114                // String \n
     169: invokevirtual #105                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     172: pop
     173: iinc          5, 1
     176: goto          32
     179: aload_2
     180: invokevirtual #115                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     183: areturn

  public void disposeDanglingChildGraphics();
    Code:
       0: aload_0
       1: getfield      #75                 // Field copyInfo:Lde/rototor/pdfbox/graphics2d/PdfBoxGraphics2D$CopyInfo;
       4: ifnull        17
       7: new           #76                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #116                // String Don\'t call disposeDanglingChildGraphics() on a child!
      13: invokespecial #78                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: getfield      #38                 // Field copyList:Ljava/util/List;
      21: invokestatic  #117                // Method disposeCopies:(Ljava/util/List;)V
      24: return

  private static void disposeCopies(java.util.List<de.rototor.pdfbox.graphics2d.PdfBoxGraphics2D$CopyInfo>);
    Code:
       0: aload_0
       1: invokeinterface #118,  1          // InterfaceMethod java/util/List.size:()I
       6: ifle          40
       9: aload_0
      10: iconst_0
      11: invokeinterface #119,  2          // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      16: checkcast     #80                 // class de/rototor/pdfbox/graphics2d/PdfBoxGraphics2D$CopyInfo
      19: astore_1
      20: aload_1
      21: getfield      #84                 // Field de/rototor/pdfbox/graphics2d/PdfBoxGraphics2D$CopyInfo.copy:Lde/rototor/pdfbox/graphics2d/PdfBoxGraphics2D;
      24: getfield      #38                 // Field copyList:Ljava/util/List;
      27: invokestatic  #117                // Method disposeCopies:(Ljava/util/List;)V
      30: aload_1
      31: getfield      #84                 // Field de/rototor/pdfbox/graphics2d/PdfBoxGraphics2D$CopyInfo.copy:Lde/rototor/pdfbox/graphics2d/PdfBoxGraphics2D;
      34: invokevirtual #120                // Method dispose:()V
      37: goto          0
      40: return

  public void dispose();
    Code:
       0: aload_0
       1: getfield      #75                 // Field copyInfo:Lde/rototor/pdfbox/graphics2d/PdfBoxGraphics2D$CopyInfo;
       4: ifnull        78
       7: aload_0
       8: getfield      #75                 // Field copyInfo:Lde/rototor/pdfbox/graphics2d/PdfBoxGraphics2D$CopyInfo;
      11: getfield      #85                 // Field de/rototor/pdfbox/graphics2d/PdfBoxGraphics2D$CopyInfo.sourceGfx:Lde/rototor/pdfbox/graphics2d/PdfBoxGraphics2D;
      14: getfield      #38                 // Field copyList:Ljava/util/List;
      17: aload_0
      18: getfield      #75                 // Field copyInfo:Lde/rototor/pdfbox/graphics2d/PdfBoxGraphics2D$CopyInfo;
      21: invokeinterface #121,  2          // InterfaceMethod java/util/List.remove:(Ljava/lang/Object;)Z
      26: pop
      27: aload_0
      28: invokespecial #122                // Method contentStreamRestoreState:()V
      31: goto          40
      34: astore_1
      35: aload_0
      36: aload_1
      37: invokespecial #124                // Method throwException:(Ljava/lang/Exception;)V
      40: aload_0
      41: getfield      #35                 // Field saveCounter:I
      44: ifeq          77
      47: new           #76                 // class java/lang/IllegalStateException
      50: dup
      51: new           #96                 // class java/lang/StringBuilder
      54: dup
      55: invokespecial #97                 // Method java/lang/StringBuilder."<init>":()V
      58: ldc           #125                // String Copy - SaveCounter should be 0, but is
      60: invokevirtual #105                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      63: aload_0
      64: getfield      #35                 // Field saveCounter:I
      67: invokevirtual #112                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      70: invokevirtual #115                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      73: invokespecial #78                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      76: athrow
      77: return
      78: aload_0
      79: getfield      #38                 // Field copyList:Ljava/util/List;
      82: invokeinterface #118,  1          // InterfaceMethod java/util/List.size:()I
      87: ifle          100
      90: new           #76                 // class java/lang/IllegalStateException
      93: dup
      94: ldc           #126                // String Not all PdfGraphics2D copies were destroyed! Please ensure that all create() calls get a matching dispose() on the returned copies. Also consider using disposeDanglingChildGraphics()
      96: invokespecial #78                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      99: athrow
     100: aload_0
     101: invokespecial #122                // Method contentStreamRestoreState:()V
     104: aload_0
     105: getfield      #12                 // Field contentStream:Lorg/apache/pdfbox/pdmodel/PDPageContentStream;
     108: invokevirtual #127                // Method org/apache/pdfbox/pdmodel/PDPageContentStream.close:()V
     111: goto          120
     114: astore_1
     115: aload_0
     116: aload_1
     117: invokespecial #124                // Method throwException:(Ljava/lang/Exception;)V
     120: aload_0
     121: getfield      #35                 // Field saveCounter:I
     124: ifeq          157
     127: new           #76                 // class java/lang/IllegalStateException
     130: dup
     131: new           #96                 // class java/lang/StringBuilder
     134: dup
     135: invokespecial #97                 // Method java/lang/StringBuilder."<init>":()V
     138: ldc           #128                // String SaveCounter should be 0, but is
     140: invokevirtual #105                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     143: aload_0
     144: getfield      #35                 // Field saveCounter:I
     147: invokevirtual #112                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     150: invokevirtual #115                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     153: invokespecial #78                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
     156: athrow
     157: aload_0
     158: aconst_null
     159: putfield      #13                 // Field document:Lorg/apache/pdfbox/pdmodel/PDDocument;
     162: aload_0
     163: getfield      #6                  // Field calcGfx:Ljava/awt/Graphics2D;
     166: invokevirtual #129                // Method java/awt/Graphics2D.dispose:()V
     169: aload_0
     170: getfield      #72                 // Field calcImage:Ljava/awt/image/BufferedImage;
     173: invokevirtual #130                // Method java/awt/image/BufferedImage.flush:()V
     176: aload_0
     177: aconst_null
     178: putfield      #72                 // Field calcImage:Ljava/awt/image/BufferedImage;
     181: return
    Exception table:
       from    to  target type
          27    31    34   Class java/io/IOException
         100   111   114   Class java/io/IOException

  public void draw(java.awt.Shape);
    Code:
       0: aload_0
       1: invokespecial #131                // Method checkNoCopyActive:()V
       4: aload_0
       5: getfield      #14                 // Field paint:Ljava/awt/Paint;
       8: ifnonnull     12
      11: return
      12: aload_0
      13: invokespecial #63                 // Method contentStreamSaveState:()V
      16: aload_0
      17: getfield      #16                 // Field drawControl:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DDrawControl;
      20: aload_1
      21: aload_0
      22: getfield      #41                 // Field drawControlEnv:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DDrawControl$IDrawControlEnv;
      25: invokeinterface #132,  3          // InterfaceMethod de/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DDrawControl.transformShapeBeforeDraw:(Ljava/awt/Shape;Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DDrawControl$IDrawControlEnv;)Ljava/awt/Shape;
      30: astore_2
      31: aload_2
      32: ifnull        76
      35: aload_0
      36: aload_2
      37: invokespecial #133                // Method walkShape:(Ljava/awt/Shape;)Z
      40: pop
      41: aload_0
      42: aload_2
      43: invokespecial #134                // Method applyPaint:(Ljava/awt/Shape;)Lorg/apache/pdfbox/pdmodel/graphics/shading/PDShading;
      46: astore_3
      47: aload_3
      48: ifnull        56
      51: aload_0
      52: aload_3
      53: invokespecial #9                  // Method applyShadingAsColor:(Lorg/apache/pdfbox/pdmodel/graphics/shading/PDShading;)V
      56: aload_0
      57: aload_0
      58: getfield      #88                 // Field stroke:Ljava/awt/Stroke;
      61: invokespecial #5                  // Method applyStroke:(Ljava/awt/Stroke;)V
      64: aload_0
      65: getfield      #12                 // Field contentStream:Lorg/apache/pdfbox/pdmodel/PDPageContentStream;
      68: invokevirtual #135                // Method org/apache/pdfbox/pdmodel/PDPageContentStream.stroke:()V
      71: aload_0
      72: iconst_0
      73: putfield      #51                 // Field hasPathOnStream:Z
      76: aload_0
      77: getfield      #16                 // Field drawControl:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DDrawControl;
      80: aload_1
      81: aload_0
      82: getfield      #41                 // Field drawControlEnv:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DDrawControl$IDrawControlEnv;
      85: invokeinterface #136,  3          // InterfaceMethod de/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DDrawControl.afterShapeDraw:(Ljava/awt/Shape;Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DDrawControl$IDrawControlEnv;)V
      90: aload_0
      91: invokespecial #122                // Method contentStreamRestoreState:()V
      94: goto          103
      97: astore_2
      98: aload_0
      99: aload_2
     100: invokespecial #124                // Method throwException:(Ljava/lang/Exception;)V
     103: return
    Exception table:
       from    to  target type
          12    94    97   Class java/io/IOException

  private void applyStroke(java.awt.Stroke) throws java.io.IOException;
    Code:
       0: aload_1
       1: instanceof    #137                // class java/awt/BasicStroke
       4: ifeq          156
       7: aload_1
       8: checkcast     #137                // class java/awt/BasicStroke
      11: astore_2
      12: aload_0
      13: getfield      #12                 // Field contentStream:Lorg/apache/pdfbox/pdmodel/PDPageContentStream;
      16: aload_2
      17: invokevirtual #138                // Method java/awt/BasicStroke.getEndCap:()I
      20: invokevirtual #139                // Method org/apache/pdfbox/pdmodel/PDPageContentStream.setLineCapStyle:(I)V
      23: aload_0
      24: getfield      #12                 // Field contentStream:Lorg/apache/pdfbox/pdmodel/PDPageContentStream;
      27: aload_2
      28: invokevirtual #140                // Method java/awt/BasicStroke.getLineJoin:()I
      31: invokevirtual #141                // Method org/apache/pdfbox/pdmodel/PDPageContentStream.setLineJoinStyle:(I)V
      34: aload_2
      35: invokevirtual #142                // Method java/awt/BasicStroke.getMiterLimit:()F
      38: fstore_3
      39: fload_3
      40: fconst_0
      41: fcmpl
      42: ifle          57
      45: aload_0
      46: getfield      #12                 // Field contentStream:Lorg/apache/pdfbox/pdmodel/PDPageContentStream;
      49: fconst_1
      50: fload_3
      51: invokestatic  #143                // Method java/lang/Math.max:(FF)F
      54: invokevirtual #144                // Method org/apache/pdfbox/pdmodel/PDPageContentStream.setMiterLimit:(F)V
      57: aload_0
      58: invokespecial #4                  // Method getCurrentEffectiveTransform:()Ljava/awt/geom/AffineTransform;
      61: astore        4
      63: aload         4
      65: invokevirtual #145                // Method java/awt/geom/AffineTransform.getScaleX:()D
      68: dstore        5
      70: aload_0
      71: getfield      #12                 // Field contentStream:Lorg/apache/pdfbox/pdmodel/PDPageContentStream;
      74: aload_2
      75: invokevirtual #146                // Method java/awt/BasicStroke.getLineWidth:()F
      78: f2d
      79: dload         5
      81: dmul
      82: invokestatic  #147                // Method java/lang/Math.abs:(D)D
      85: d2f
      86: invokevirtual #148                // Method org/apache/pdfbox/pdmodel/PDPageContentStream.setLineWidth:(F)V
      89: aload_2
      90: invokevirtual #149                // Method java/awt/BasicStroke.getDashArray:()[F
      93: astore        7
      95: aload         7
      97: ifnull        156
     100: iconst_0
     101: istore        8
     103: iload         8
     105: aload         7
     107: arraylength
     108: if_icmpge     135
     111: aload         7
     113: iload         8
     115: aload         7
     117: iload         8
     119: faload
     120: f2d
     121: dload         5
     123: dmul
     124: invokestatic  #147                // Method java/lang/Math.abs:(D)D
     127: d2f
     128: fastore
     129: iinc          8, 1
     132: goto          103
     135: aload_0
     136: getfield      #12                 // Field contentStream:Lorg/apache/pdfbox/pdmodel/PDPageContentStream;
     139: aload         7
     141: aload_2
     142: invokevirtual #150                // Method java/awt/BasicStroke.getDashPhase:()F
     145: f2d
     146: dload         5
     148: dmul
     149: invokestatic  #147                // Method java/lang/Math.abs:(D)D
     152: d2f
     153: invokevirtual #151                // Method org/apache/pdfbox/pdmodel/PDPageContentStream.setLineDashPattern:([FF)V
     156: return

  private java.awt.geom.AffineTransform getCurrentEffectiveTransform();
    Code:
       0: new           #23                 // class java/awt/geom/AffineTransform
       3: dup
       4: invokespecial #24                 // Method java/awt/geom/AffineTransform."<init>":()V
       7: astore_1
       8: aload_1
       9: aload_0
      10: getfield      #64                 // Field baseTransform:Ljava/awt/geom/AffineTransform;
      13: invokevirtual #152                // Method java/awt/geom/AffineTransform.concatenate:(Ljava/awt/geom/AffineTransform;)V
      16: aload_1
      17: aload_0
      18: getfield      #25                 // Field transform:Ljava/awt/geom/AffineTransform;
      21: invokevirtual #152                // Method java/awt/geom/AffineTransform.concatenate:(Ljava/awt/geom/AffineTransform;)V
      24: aload_1
      25: areturn

  public void drawImage(java.awt.image.BufferedImage, java.awt.image.BufferedImageOp, int, int);
    Code:
       0: aload_2
       1: aload_1
       2: aconst_null
       3: invokeinterface #153,  3          // InterfaceMethod java/awt/image/BufferedImageOp.filter:(Ljava/awt/image/BufferedImage;Ljava/awt/image/BufferedImage;)Ljava/awt/image/BufferedImage;
       8: astore        5
      10: aload_0
      11: aload         5
      13: new           #23                 // class java/awt/geom/AffineTransform
      16: dup
      17: fconst_1
      18: fconst_0
      19: fconst_0
      20: fconst_1
      21: iload_3
      22: i2f
      23: iload         4
      25: i2f
      26: invokespecial #154                // Method java/awt/geom/AffineTransform."<init>":(FFFFFF)V
      29: aconst_null
      30: invokevirtual #155                // Method drawImage:(Ljava/awt/Image;Ljava/awt/geom/AffineTransform;Ljava/awt/image/ImageObserver;)Z
      33: pop
      34: return

  public void drawRenderedImage(java.awt.image.RenderedImage, java.awt.geom.AffineTransform);
    Code:
       0: aload_1
       1: aconst_null
       2: invokeinterface #156,  2          // InterfaceMethod java/awt/image/RenderedImage.copyData:(Ljava/awt/image/WritableRaster;)Ljava/awt/image/WritableRaster;
       7: astore_3
       8: aload_0
       9: new           #70                 // class java/awt/image/BufferedImage
      12: dup
      13: aload_1
      14: invokeinterface #157,  1          // InterfaceMethod java/awt/image/RenderedImage.getColorModel:()Ljava/awt/image/ColorModel;
      19: aload_3
      20: iconst_0
      21: aconst_null
      22: invokespecial #158                // Method java/awt/image/BufferedImage."<init>":(Ljava/awt/image/ColorModel;Ljava/awt/image/WritableRaster;ZLjava/util/Hashtable;)V
      25: aload_2
      26: aconst_null
      27: invokevirtual #155                // Method drawImage:(Ljava/awt/Image;Ljava/awt/geom/AffineTransform;Ljava/awt/image/ImageObserver;)Z
      30: pop
      31: return

  public void drawRenderableImage(java.awt.image.renderable.RenderableImage, java.awt.geom.AffineTransform);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #159,  1          // InterfaceMethod java/awt/image/renderable/RenderableImage.createDefaultRendering:()Ljava/awt/image/RenderedImage;
       7: aload_2
       8: invokevirtual #160                // Method drawRenderedImage:(Ljava/awt/image/RenderedImage;Ljava/awt/geom/AffineTransform;)V
      11: return

  public void drawString(java.lang.String, int, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: i2f
       4: iload_3
       5: i2f
       6: invokevirtual #161                // Method drawString:(Ljava/lang/String;FF)V
       9: return

  public void drawString(java.lang.String, float, float);
    Code:
       0: aload_1
       1: invokevirtual #162                // Method java/lang/String.isEmpty:()Z
       4: ifeq          8
       7: return
       8: new           #163                // class java/text/AttributedString
      11: dup
      12: aload_1
      13: invokespecial #164                // Method java/text/AttributedString."<init>":(Ljava/lang/String;)V
      16: astore        4
      18: aload         4
      20: getstatic     #165                // Field java/awt/font/TextAttribute.FONT:Ljava/awt/font/TextAttribute;
      23: aload_0
      24: getfield      #11                 // Field font:Ljava/awt/Font;
      27: invokevirtual #166                // Method java/text/AttributedString.addAttribute:(Ljava/text/AttributedCharacterIterator$Attribute;Ljava/lang/Object;)V
      30: aload_0
      31: aload         4
      33: invokevirtual #167                // Method java/text/AttributedString.getIterator:()Ljava/text/AttributedCharacterIterator;
      36: fload_2
      37: fload_3
      38: invokevirtual #168                // Method drawString:(Ljava/text/AttributedCharacterIterator;FF)V
      41: return

  public void drawString(java.text.AttributedCharacterIterator, int, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: i2f
       4: iload_3
       5: i2f
       6: invokevirtual #168                // Method drawString:(Ljava/text/AttributedCharacterIterator;FF)V
       9: return

  public boolean drawImage(java.awt.Image, int, int, java.awt.image.ImageObserver);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: aload_1
       5: aload         4
       7: invokevirtual #169                // Method java/awt/Image.getWidth:(Ljava/awt/image/ImageObserver;)I
      10: aload_1
      11: aload         4
      13: invokevirtual #170                // Method java/awt/Image.getHeight:(Ljava/awt/image/ImageObserver;)I
      16: aload         4
      18: invokevirtual #171                // Method drawImage:(Ljava/awt/Image;IIIILjava/awt/image/ImageObserver;)Z
      21: ireturn

  public boolean drawImage(java.awt.Image, int, int, int, int, java.awt.image.ImageObserver);
    Code:
       0: new           #23                 // class java/awt/geom/AffineTransform
       3: dup
       4: invokespecial #24                 // Method java/awt/geom/AffineTransform."<init>":()V
       7: astore        7
       9: aload         7
      11: iload_2
      12: i2d
      13: iload_3
      14: i2d
      15: invokevirtual #66                 // Method java/awt/geom/AffineTransform.translate:(DD)V
      18: aload         7
      20: iload         4
      22: i2f
      23: aload_1
      24: aconst_null
      25: invokevirtual #169                // Method java/awt/Image.getWidth:(Ljava/awt/image/ImageObserver;)I
      28: i2f
      29: fdiv
      30: f2d
      31: iload         5
      33: i2f
      34: aload_1
      35: aconst_null
      36: invokevirtual #170                // Method java/awt/Image.getHeight:(Ljava/awt/image/ImageObserver;)I
      39: i2f
      40: fdiv
      41: f2d
      42: invokevirtual #69                 // Method java/awt/geom/AffineTransform.scale:(DD)V
      45: aload_0
      46: aload_1
      47: aload         7
      49: aload         6
      51: invokevirtual #155                // Method drawImage:(Ljava/awt/Image;Ljava/awt/geom/AffineTransform;Ljava/awt/image/ImageObserver;)Z
      54: ireturn

  public boolean drawImage(java.awt.Image, int, int, java.awt.Color, java.awt.image.ImageObserver);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: aload_1
       5: aload         5
       7: invokevirtual #169                // Method java/awt/Image.getWidth:(Ljava/awt/image/ImageObserver;)I
      10: aload_1
      11: aload         5
      13: invokevirtual #170                // Method java/awt/Image.getHeight:(Ljava/awt/image/ImageObserver;)I
      16: aload         4
      18: aload         5
      20: invokevirtual #172                // Method drawImage:(Ljava/awt/Image;IIIILjava/awt/Color;Ljava/awt/image/ImageObserver;)Z
      23: ireturn

  public boolean drawImage(java.awt.Image, int, int, int, int, java.awt.Color, java.awt.image.ImageObserver);
    Code:
       0: aload         6
       2: ifnull        52
       5: aload_0
       6: getfield      #12                 // Field contentStream:Lorg/apache/pdfbox/pdmodel/PDPageContentStream;
       9: aload_0
      10: getfield      #3                  // Field colorMapper:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DColorMapper;
      13: aload_0
      14: getfield      #12                 // Field contentStream:Lorg/apache/pdfbox/pdmodel/PDPageContentStream;
      17: aload         6
      19: invokeinterface #173,  3          // InterfaceMethod de/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DColorMapper.mapColor:(Lorg/apache/pdfbox/pdmodel/PDPageContentStream;Ljava/awt/Color;)Lorg/apache/pdfbox/pdmodel/graphics/color/PDColor;
      24: invokevirtual #174                // Method org/apache/pdfbox/pdmodel/PDPageContentStream.setNonStrokingColor:(Lorg/apache/pdfbox/pdmodel/graphics/color/PDColor;)V
      27: aload_0
      28: new           #175                // class java/awt/Rectangle
      31: dup
      32: iload_2
      33: iload_3
      34: iload         4
      36: iload         5
      38: invokespecial #176                // Method java/awt/Rectangle."<init>":(IIII)V
      41: invokespecial #133                // Method walkShape:(Ljava/awt/Shape;)Z
      44: pop
      45: aload_0
      46: getfield      #12                 // Field contentStream:Lorg/apache/pdfbox/pdmodel/PDPageContentStream;
      49: invokevirtual #177                // Method org/apache/pdfbox/pdmodel/PDPageContentStream.fill:()V
      52: aload_0
      53: aload_1
      54: iload_2
      55: iload_3
      56: aload_1
      57: aload         7
      59: invokevirtual #169                // Method java/awt/Image.getWidth:(Ljava/awt/image/ImageObserver;)I
      62: aload_1
      63: aload         7
      65: invokevirtual #170                // Method java/awt/Image.getHeight:(Ljava/awt/image/ImageObserver;)I
      68: aload         7
      70: invokevirtual #171                // Method drawImage:(Ljava/awt/Image;IIIILjava/awt/image/ImageObserver;)Z
      73: ireturn
      74: astore        8
      76: aload_0
      77: aload         8
      79: invokespecial #124                // Method throwException:(Ljava/lang/Exception;)V
      82: iconst_0
      83: ireturn
    Exception table:
       from    to  target type
           0    73    74   Class java/io/IOException

  public boolean drawImage(java.awt.Image, int, int, int, int, int, int, int, int, java.awt.image.ImageObserver);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: iload         4
       6: iload         5
       8: iload         6
      10: iload         9
      12: iload         8
      14: iload         9
      16: aconst_null
      17: aload         10
      19: invokevirtual #178                // Method drawImage:(Ljava/awt/Image;IIIIIIIILjava/awt/Color;Ljava/awt/image/ImageObserver;)Z
      22: ireturn

  public boolean drawImage(java.awt.Image, java.awt.geom.AffineTransform, java.awt.image.ImageObserver);
    Code:
       0: aload_0
       1: invokespecial #131                // Method checkNoCopyActive:()V
       4: aload_0
       5: invokespecial #4                  // Method getCurrentEffectiveTransform:()Ljava/awt/geom/AffineTransform;
       8: astore        4
      10: aload_2
      11: ifnull        26
      14: aload         4
      16: aload_2
      17: invokevirtual #87                 // Method java/awt/geom/AffineTransform.clone:()Ljava/lang/Object;
      20: checkcast     #23                 // class java/awt/geom/AffineTransform
      23: invokevirtual #152                // Method java/awt/geom/AffineTransform.concatenate:(Ljava/awt/geom/AffineTransform;)V
      26: aload_0
      27: getfield      #2                  // Field imageEncoder:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DImageEncoder;
      30: aload_0
      31: getfield      #13                 // Field document:Lorg/apache/pdfbox/pdmodel/PDDocument;
      34: aload_0
      35: getfield      #12                 // Field contentStream:Lorg/apache/pdfbox/pdmodel/PDPageContentStream;
      38: aload_1
      39: invokeinterface #179,  4          // InterfaceMethod de/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DImageEncoder.encodeImage:(Lorg/apache/pdfbox/pdmodel/PDDocument;Lorg/apache/pdfbox/pdmodel/PDPageContentStream;Ljava/awt/Image;)Lorg/apache/pdfbox/pdmodel/graphics/image/PDImageXObject;
      44: astore        5
      46: aload_0
      47: invokespecial #63                 // Method contentStreamSaveState:()V
      50: aload_1
      51: aload_3
      52: invokevirtual #170                // Method java/awt/Image.getHeight:(Ljava/awt/image/ImageObserver;)I
      55: istore        6
      57: aload         4
      59: dconst_0
      60: iload         6
      62: i2d
      63: invokevirtual #66                 // Method java/awt/geom/AffineTransform.translate:(DD)V
      66: aload         4
      68: dconst_1
      69: ldc2_w        #67                 // double -1.0d
      72: invokevirtual #69                 // Method java/awt/geom/AffineTransform.scale:(DD)V
      75: aload_0
      76: getfield      #12                 // Field contentStream:Lorg/apache/pdfbox/pdmodel/PDPageContentStream;
      79: new           #180                // class org/apache/pdfbox/util/Matrix
      82: dup
      83: aload         4
      85: invokespecial #181                // Method org/apache/pdfbox/util/Matrix."<init>":(Ljava/awt/geom/AffineTransform;)V
      88: invokevirtual #182                // Method org/apache/pdfbox/pdmodel/PDPageContentStream.transform:(Lorg/apache/pdfbox/util/Matrix;)V
      91: aload_0
      92: getfield      #50                 // Field renderingHints:Ljava/util/Map;
      95: getstatic     #183                // Field java/awt/RenderingHints.KEY_INTERPOLATION:Ljava/awt/RenderingHints$Key;
      98: invokeinterface #184,  2          // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
     103: astore        7
     105: getstatic     #185                // Field java/awt/RenderingHints.VALUE_INTERPOLATION_NEAREST_NEIGHBOR:Ljava/lang/Object;
     108: aload         7
     110: invokevirtual #186                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
     113: ifeq          122
     116: aload         5
     118: iconst_0
     119: invokevirtual #187                // Method org/apache/pdfbox/pdmodel/graphics/image/PDImageXObject.setInterpolate:(Z)V
     122: aload_0
     123: getfield      #91                 // Field composite:Ljava/awt/Composite;
     126: ifnull        138
     129: aload_0
     130: getstatic     #188                // Field java/awt/Color.WHITE:Ljava/awt/Color;
     133: aconst_null
     134: invokespecial #10                 // Method applyPaint:(Ljava/awt/Paint;Ljava/awt/Shape;)Lorg/apache/pdfbox/pdmodel/graphics/shading/PDShading;
     137: pop
     138: aload_0
     139: getfield      #12                 // Field contentStream:Lorg/apache/pdfbox/pdmodel/PDPageContentStream;
     142: aload         5
     144: fconst_0
     145: fconst_0
     146: aload_1
     147: aload_3
     148: invokevirtual #169                // Method java/awt/Image.getWidth:(Ljava/awt/image/ImageObserver;)I
     151: i2f
     152: iload         6
     154: i2f
     155: invokevirtual #189                // Method org/apache/pdfbox/pdmodel/PDPageContentStream.drawImage:(Lorg/apache/pdfbox/pdmodel/graphics/image/PDImageXObject;FFFF)V
     158: aload_0
     159: invokespecial #122                // Method contentStreamRestoreState:()V
     162: goto          173
     165: astore        6
     167: aload_0
     168: aload         6
     170: invokespecial #124                // Method throwException:(Ljava/lang/Exception;)V
     173: iconst_1
     174: ireturn
    Exception table:
       from    to  target type
          46   162   165   Class java/io/IOException

  public boolean drawImage(java.awt.Image, int, int, int, int, int, int, int, int, java.awt.Color, java.awt.image.ImageObserver);
    Code:
       0: aload_0
       1: invokespecial #63                 // Method contentStreamSaveState:()V
       4: iload         4
       6: iload_2
       7: isub
       8: istore        12
      10: iload         5
      12: iload_3
      13: isub
      14: istore        13
      16: aload_0
      17: new           #190                // class java/awt/geom/Rectangle2D$Double
      20: dup
      21: iload_2
      22: i2d
      23: iload_3
      24: i2d
      25: iload         12
      27: i2d
      28: iload         13
      30: i2d
      31: invokespecial #191                // Method java/awt/geom/Rectangle2D$Double."<init>":(DDDD)V
      34: invokespecial #133                // Method walkShape:(Ljava/awt/Shape;)Z
      37: pop
      38: aload_0
      39: getfield      #12                 // Field contentStream:Lorg/apache/pdfbox/pdmodel/PDPageContentStream;
      42: invokevirtual #192                // Method org/apache/pdfbox/pdmodel/PDPageContentStream.clip:()V
      45: aload         10
      47: ifnull        97
      50: aload_0
      51: getfield      #12                 // Field contentStream:Lorg/apache/pdfbox/pdmodel/PDPageContentStream;
      54: aload_0
      55: getfield      #3                  // Field colorMapper:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DColorMapper;
      58: aload_0
      59: getfield      #12                 // Field contentStream:Lorg/apache/pdfbox/pdmodel/PDPageContentStream;
      62: aload         10
      64: invokeinterface #173,  3          // InterfaceMethod de/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DColorMapper.mapColor:(Lorg/apache/pdfbox/pdmodel/PDPageContentStream;Ljava/awt/Color;)Lorg/apache/pdfbox/pdmodel/graphics/color/PDColor;
      69: invokevirtual #174                // Method org/apache/pdfbox/pdmodel/PDPageContentStream.setNonStrokingColor:(Lorg/apache/pdfbox/pdmodel/graphics/color/PDColor;)V
      72: aload_0
      73: new           #175                // class java/awt/Rectangle
      76: dup
      77: iload_2
      78: iload_3
      79: iload         12
      81: iload         13
      83: invokespecial #176                // Method java/awt/Rectangle."<init>":(IIII)V
      86: invokespecial #133                // Method walkShape:(Ljava/awt/Shape;)Z
      89: pop
      90: aload_0
      91: getfield      #12                 // Field contentStream:Lorg/apache/pdfbox/pdmodel/PDPageContentStream;
      94: invokevirtual #177                // Method org/apache/pdfbox/pdmodel/PDPageContentStream.fill:()V
      97: new           #23                 // class java/awt/geom/AffineTransform
     100: dup
     101: invokespecial #24                 // Method java/awt/geom/AffineTransform."<init>":()V
     104: astore        14
     106: aload         14
     108: iload_2
     109: i2d
     110: iload_3
     111: i2d
     112: invokevirtual #66                 // Method java/awt/geom/AffineTransform.translate:(DD)V
     115: aload_1
     116: aload         11
     118: invokevirtual #169                // Method java/awt/Image.getWidth:(Ljava/awt/image/ImageObserver;)I
     121: i2f
     122: fstore        15
     124: aload_1
     125: aload         11
     127: invokevirtual #170                // Method java/awt/Image.getHeight:(Ljava/awt/image/ImageObserver;)I
     130: i2f
     131: fstore        16
     133: aload         14
     135: iload         12
     137: i2f
     138: fload         15
     140: fdiv
     141: f2d
     142: iload         13
     144: i2f
     145: fload         16
     147: fdiv
     148: f2d
     149: invokevirtual #69                 // Method java/awt/geom/AffineTransform.scale:(DD)V
     152: aload         14
     154: iload         6
     156: ineg
     157: i2d
     158: iload         7
     160: ineg
     161: i2d
     162: invokevirtual #66                 // Method java/awt/geom/AffineTransform.translate:(DD)V
     165: aload         14
     167: iload         8
     169: iload         6
     171: isub
     172: i2f
     173: fload         15
     175: fdiv
     176: f2d
     177: iload         9
     179: iload         7
     181: isub
     182: i2f
     183: fload         16
     185: fdiv
     186: f2d
     187: invokevirtual #69                 // Method java/awt/geom/AffineTransform.scale:(DD)V
     190: aload_0
     191: aload_1
     192: aload         14
     194: aload         11
     196: invokevirtual #155                // Method drawImage:(Ljava/awt/Image;Ljava/awt/geom/AffineTransform;Ljava/awt/image/ImageObserver;)Z
     199: pop
     200: aload_0
     201: invokespecial #122                // Method contentStreamRestoreState:()V
     204: iconst_1
     205: ireturn
     206: astore        12
     208: aload_0
     209: aload         12
     211: invokespecial #124                // Method throwException:(Ljava/lang/Exception;)V
     214: iconst_0
     215: ireturn
    Exception table:
       from    to  target type
           0   205   206   Class java/io/IOException

  private void drawStringUsingShapes(java.text.AttributedCharacterIterator, float, float);
    Code:
       0: aload_0
       1: getfield      #88                 // Field stroke:Ljava/awt/Stroke;
       4: astore        4
       6: aload_0
       7: getfield      #14                 // Field paint:Ljava/awt/Paint;
      10: astore        5
      12: new           #193                // class java/awt/font/TextLayout
      15: dup
      16: aload_1
      17: aload_0
      18: invokevirtual #194                // Method getFontRenderContext:()Ljava/awt/font/FontRenderContext;
      21: invokespecial #195                // Method java/awt/font/TextLayout."<init>":(Ljava/text/AttributedCharacterIterator;Ljava/awt/font/FontRenderContext;)V
      24: astore        6
      26: aload         6
      28: aload_0
      29: fload_2
      30: fload_3
      31: invokevirtual #196                // Method java/awt/font/TextLayout.draw:(Ljava/awt/Graphics2D;FF)V
      34: aload_0
      35: aload         5
      37: putfield      #14                 // Field paint:Ljava/awt/Paint;
      40: aload_0
      41: aload         4
      43: putfield      #88                 // Field stroke:Ljava/awt/Stroke;
      46: return

  public void drawString(java.text.AttributedCharacterIterator, float, float);
    Code:
       0: aload_0
       1: getfield      #14                 // Field paint:Ljava/awt/Paint;
       4: ifnonnull     8
       7: return
       8: aload_0
       9: invokespecial #63                 // Method contentStreamSaveState:()V
      12: aload_0
      13: getfield      #20                 // Field fontTextDrawer:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DFontTextDrawer;
      16: aload_1
      17: invokeinterface #197,  1          // InterfaceMethod java/text/AttributedCharacterIterator.clone:()Ljava/lang/Object;
      22: checkcast     #198                // class java/text/AttributedCharacterIterator
      25: aload_0
      26: getfield      #44                 // Field fontDrawerEnv:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DFontTextDrawer$IFontTextDrawerEnv;
      29: invokeinterface #199,  3          // InterfaceMethod de/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DFontTextDrawer.canDrawText:(Ljava/text/AttributedCharacterIterator;Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DFontTextDrawer$IFontTextDrawerEnv;)Z
      34: ifeq          47
      37: aload_0
      38: aload_1
      39: fload_2
      40: fload_3
      41: invokespecial #200                // Method drawStringUsingText:(Ljava/text/AttributedCharacterIterator;FF)V
      44: goto          54
      47: aload_0
      48: aload_1
      49: fload_2
      50: fload_3
      51: invokespecial #201                // Method drawStringUsingShapes:(Ljava/text/AttributedCharacterIterator;FF)V
      54: aload_0
      55: invokespecial #122                // Method contentStreamRestoreState:()V
      58: goto          80
      61: astore        4
      63: aload_0
      64: aload         4
      66: invokespecial #124                // Method throwException:(Ljava/lang/Exception;)V
      69: goto          80
      72: astore        4
      74: aload_0
      75: aload         4
      77: invokespecial #124                // Method throwException:(Ljava/lang/Exception;)V
      80: return
    Exception table:
       from    to  target type
           8    58    61   Class java/io/IOException
           8    58    72   Class java/awt/FontFormatException

  private void drawStringUsingText(java.text.AttributedCharacterIterator, float, float) throws java.io.IOException, java.awt.FontFormatException;
    Code:
       0: aload_0
       1: invokespecial #63                 // Method contentStreamSaveState:()V
       4: new           #23                 // class java/awt/geom/AffineTransform
       7: dup
       8: aload_0
       9: getfield      #64                 // Field baseTransform:Ljava/awt/geom/AffineTransform;
      12: invokespecial #203                // Method java/awt/geom/AffineTransform."<init>":(Ljava/awt/geom/AffineTransform;)V
      15: astore        4
      17: aload         4
      19: aload_0
      20: getfield      #25                 // Field transform:Ljava/awt/geom/AffineTransform;
      23: invokevirtual #152                // Method java/awt/geom/AffineTransform.concatenate:(Ljava/awt/geom/AffineTransform;)V
      26: aload         4
      28: fload_2
      29: f2d
      30: fload_3
      31: f2d
      32: invokevirtual #66                 // Method java/awt/geom/AffineTransform.translate:(DD)V
      35: aload_0
      36: getfield      #12                 // Field contentStream:Lorg/apache/pdfbox/pdmodel/PDPageContentStream;
      39: new           #180                // class org/apache/pdfbox/util/Matrix
      42: dup
      43: aload         4
      45: invokespecial #181                // Method org/apache/pdfbox/util/Matrix."<init>":(Ljava/awt/geom/AffineTransform;)V
      48: invokevirtual #182                // Method org/apache/pdfbox/pdmodel/PDPageContentStream.transform:(Lorg/apache/pdfbox/util/Matrix;)V
      51: aload_0
      52: getfield      #20                 // Field fontTextDrawer:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DFontTextDrawer;
      55: aload_1
      56: aload_0
      57: getfield      #44                 // Field fontDrawerEnv:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DFontTextDrawer$IFontTextDrawerEnv;
      60: invokeinterface #204,  3          // InterfaceMethod de/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DFontTextDrawer.drawText:(Ljava/text/AttributedCharacterIterator;Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DFontTextDrawer$IFontTextDrawerEnv;)V
      65: aload_0
      66: invokespecial #122                // Method contentStreamRestoreState:()V
      69: return

  private void contentStreamSaveState() throws java.io.IOException;
    Code:
       0: aload_0
       1: dup
       2: getfield      #35                 // Field saveCounter:I
       5: iconst_1
       6: iadd
       7: putfield      #35                 // Field saveCounter:I
      10: aload_0
      11: getfield      #12                 // Field contentStream:Lorg/apache/pdfbox/pdmodel/PDPageContentStream;
      14: invokevirtual #205                // Method org/apache/pdfbox/pdmodel/PDPageContentStream.saveGraphicsState:()V
      17: return

  private void contentStreamRestoreState() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #35                 // Field saveCounter:I
       4: ifne          17
       7: new           #76                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #206                // String Internal save/restore state error. Should never happen.
      13: invokespecial #78                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: dup
      19: getfield      #35                 // Field saveCounter:I
      22: iconst_1
      23: isub
      24: putfield      #35                 // Field saveCounter:I
      27: aload_0
      28: getfield      #12                 // Field contentStream:Lorg/apache/pdfbox/pdmodel/PDPageContentStream;
      31: invokevirtual #207                // Method org/apache/pdfbox/pdmodel/PDPageContentStream.restoreGraphicsState:()V
      34: return

  public void drawGlyphVector(java.awt.font.GlyphVector, float, float);
    Code:
       0: aload_0
       1: invokespecial #131                // Method checkNoCopyActive:()V
       4: aload_0
       5: getfield      #25                 // Field transform:Ljava/awt/geom/AffineTransform;
       8: invokevirtual #87                 // Method java/awt/geom/AffineTransform.clone:()Ljava/lang/Object;
      11: checkcast     #23                 // class java/awt/geom/AffineTransform
      14: astore        4
      16: aload_0
      17: getfield      #25                 // Field transform:Ljava/awt/geom/AffineTransform;
      20: fload_2
      21: f2d
      22: fload_3
      23: f2d
      24: invokevirtual #66                 // Method java/awt/geom/AffineTransform.translate:(DD)V
      27: aload_0
      28: aload_1
      29: invokevirtual #208                // Method java/awt/font/GlyphVector.getOutline:()Ljava/awt/Shape;
      32: invokevirtual #209                // Method fill:(Ljava/awt/Shape;)V
      35: aload_0
      36: aload         4
      38: putfield      #25                 // Field transform:Ljava/awt/geom/AffineTransform;
      41: return

  public void fill(java.awt.Shape);
    Code:
       0: aload_0
       1: invokespecial #131                // Method checkNoCopyActive:()V
       4: aload_0
       5: getfield      #14                 // Field paint:Ljava/awt/Paint;
       8: ifnonnull     12
      11: return
      12: aload_0
      13: invokespecial #63                 // Method contentStreamSaveState:()V
      16: aload_0
      17: getfield      #16                 // Field drawControl:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DDrawControl;
      20: aload_1
      21: aload_0
      22: getfield      #41                 // Field drawControlEnv:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DDrawControl$IDrawControlEnv;
      25: invokeinterface #210,  3          // InterfaceMethod de/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DDrawControl.transformShapeBeforeFill:(Ljava/awt/Shape;Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DDrawControl$IDrawControlEnv;)Ljava/awt/Shape;
      30: astore_2
      31: aload_2
      32: ifnull        122
      35: aload_0
      36: aload_2
      37: invokespecial #133                // Method walkShape:(Ljava/awt/Shape;)Z
      40: istore_3
      41: aload_0
      42: aload_2
      43: invokespecial #134                // Method applyPaint:(Ljava/awt/Shape;)Lorg/apache/pdfbox/pdmodel/graphics/shading/PDShading;
      46: astore        4
      48: aload         4
      50: ifnull        112
      53: aload_1
      54: invokeinterface #211,  1          // InterfaceMethod java/awt/Shape.getBounds2D:()Ljava/awt/geom/Rectangle2D;
      59: astore        5
      61: aload         5
      63: invokevirtual #212                // Method java/awt/geom/Rectangle2D.getWidth:()D
      66: dconst_0
      67: dcmpg
      68: ifle          81
      71: aload         5
      73: invokevirtual #213                // Method java/awt/geom/Rectangle2D.getHeight:()D
      76: dconst_0
      77: dcmpg
      78: ifgt          95
      81: aload_0
      82: aload         4
      84: invokespecial #9                  // Method applyShadingAsColor:(Lorg/apache/pdfbox/pdmodel/graphics/shading/PDShading;)V
      87: aload_0
      88: iload_3
      89: invokespecial #214                // Method fill:(Z)V
      92: goto          109
      95: aload_0
      96: iload_3
      97: invokevirtual #215                // Method internalClip:(Z)V
     100: aload_0
     101: getfield      #12                 // Field contentStream:Lorg/apache/pdfbox/pdmodel/PDPageContentStream;
     104: aload         4
     106: invokevirtual #216                // Method org/apache/pdfbox/pdmodel/PDPageContentStream.shadingFill:(Lorg/apache/pdfbox/pdmodel/graphics/shading/PDShading;)V
     109: goto          117
     112: aload_0
     113: iload_3
     114: invokespecial #214                // Method fill:(Z)V
     117: aload_0
     118: iconst_0
     119: putfield      #51                 // Field hasPathOnStream:Z
     122: aload_0
     123: getfield      #16                 // Field drawControl:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DDrawControl;
     126: aload_1
     127: aload_0
     128: getfield      #41                 // Field drawControlEnv:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DDrawControl$IDrawControlEnv;
     131: invokeinterface #217,  3          // InterfaceMethod de/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DDrawControl.afterShapeFill:(Ljava/awt/Shape;Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DDrawControl$IDrawControlEnv;)V
     136: aload_0
     137: invokespecial #122                // Method contentStreamRestoreState:()V
     140: goto          149
     143: astore_2
     144: aload_0
     145: aload_2
     146: invokespecial #124                // Method throwException:(Ljava/lang/Exception;)V
     149: return
    Exception table:
       from    to  target type
          12   140   143   Class java/io/IOException

  private void fill(boolean) throws java.io.IOException;
    Code:
       0: iload_1
       1: ifeq          14
       4: aload_0
       5: getfield      #12                 // Field contentStream:Lorg/apache/pdfbox/pdmodel/PDPageContentStream;
       8: invokevirtual #218                // Method org/apache/pdfbox/pdmodel/PDPageContentStream.fillEvenOdd:()V
      11: goto          21
      14: aload_0
      15: getfield      #12                 // Field contentStream:Lorg/apache/pdfbox/pdmodel/PDPageContentStream;
      18: invokevirtual #177                // Method org/apache/pdfbox/pdmodel/PDPageContentStream.fill:()V
      21: return

  private void applyShadingAsColor(org.apache.pdfbox.pdmodel.graphics.shading.PDShading) throws java.io.IOException;
    Code:
       0: new           #219                // class org/apache/pdfbox/pdmodel/graphics/pattern/PDTilingPattern
       3: dup
       4: invokespecial #220                // Method org/apache/pdfbox/pdmodel/graphics/pattern/PDTilingPattern."<init>":()V
       7: astore_2
       8: aload_2
       9: iconst_1
      10: invokevirtual #221                // Method org/apache/pdfbox/pdmodel/graphics/pattern/PDTilingPattern.setPaintType:(I)V
      13: aload_2
      14: iconst_3
      15: invokevirtual #222                // Method org/apache/pdfbox/pdmodel/graphics/pattern/PDTilingPattern.setTilingType:(I)V
      18: aload_0
      19: getfield      #8                  // Field bbox:Lorg/apache/pdfbox/pdmodel/common/PDRectangle;
      22: astore_3
      23: aload_2
      24: aload_3
      25: invokevirtual #223                // Method org/apache/pdfbox/pdmodel/graphics/pattern/PDTilingPattern.setBBox:(Lorg/apache/pdfbox/pdmodel/common/PDRectangle;)V
      28: aload_2
      29: aload_3
      30: invokevirtual #224                // Method org/apache/pdfbox/pdmodel/common/PDRectangle.getWidth:()F
      33: invokevirtual #225                // Method org/apache/pdfbox/pdmodel/graphics/pattern/PDTilingPattern.setXStep:(F)V
      36: aload_2
      37: aload_3
      38: invokevirtual #65                 // Method org/apache/pdfbox/pdmodel/common/PDRectangle.getHeight:()F
      41: invokevirtual #226                // Method org/apache/pdfbox/pdmodel/graphics/pattern/PDTilingPattern.setYStep:(F)V
      44: new           #52                 // class org/apache/pdfbox/pdmodel/interactive/annotation/PDAppearanceStream
      47: dup
      48: aload_0
      49: getfield      #13                 // Field document:Lorg/apache/pdfbox/pdmodel/PDDocument;
      52: invokespecial #53                 // Method org/apache/pdfbox/pdmodel/interactive/annotation/PDAppearanceStream."<init>":(Lorg/apache/pdfbox/pdmodel/PDDocument;)V
      55: astore        4
      57: aload         4
      59: aload_2
      60: invokevirtual #227                // Method org/apache/pdfbox/pdmodel/graphics/pattern/PDTilingPattern.getResources:()Lorg/apache/pdfbox/pdmodel/PDResources;
      63: invokevirtual #228                // Method org/apache/pdfbox/pdmodel/interactive/annotation/PDAppearanceStream.setResources:(Lorg/apache/pdfbox/pdmodel/PDResources;)V
      66: aload         4
      68: aload_2
      69: invokevirtual #229                // Method org/apache/pdfbox/pdmodel/graphics/pattern/PDTilingPattern.getBBox:()Lorg/apache/pdfbox/pdmodel/common/PDRectangle;
      72: invokevirtual #230                // Method org/apache/pdfbox/pdmodel/interactive/annotation/PDAppearanceStream.setBBox:(Lorg/apache/pdfbox/pdmodel/common/PDRectangle;)V
      75: new           #58                 // class org/apache/pdfbox/pdmodel/PDPageContentStream
      78: dup
      79: aload_0
      80: getfield      #13                 // Field document:Lorg/apache/pdfbox/pdmodel/PDDocument;
      83: aload         4
      85: aload_2
      86: invokevirtual #231                // Method org/apache/pdfbox/pdmodel/graphics/pattern/PDTilingPattern.getCOSObject:()Lorg/apache/pdfbox/cos/COSDictionary;
      89: checkcast     #232                // class org/apache/pdfbox/cos/COSStream
      92: invokevirtual #233                // Method org/apache/pdfbox/cos/COSStream.createOutputStream:()Ljava/io/OutputStream;
      95: invokespecial #62                 // Method org/apache/pdfbox/pdmodel/PDPageContentStream."<init>":(Lorg/apache/pdfbox/pdmodel/PDDocument;Lorg/apache/pdfbox/pdmodel/interactive/annotation/PDAppearanceStream;Ljava/io/OutputStream;)V
      98: astore        5
     100: aload         5
     102: fconst_0
     103: fconst_0
     104: aload_3
     105: invokevirtual #224                // Method org/apache/pdfbox/pdmodel/common/PDRectangle.getWidth:()F
     108: aload_3
     109: invokevirtual #65                 // Method org/apache/pdfbox/pdmodel/common/PDRectangle.getHeight:()F
     112: invokevirtual #234                // Method org/apache/pdfbox/pdmodel/PDPageContentStream.addRect:(FFFF)V
     115: aload         5
     117: invokevirtual #192                // Method org/apache/pdfbox/pdmodel/PDPageContentStream.clip:()V
     120: aload         5
     122: aload_1
     123: invokevirtual #216                // Method org/apache/pdfbox/pdmodel/PDPageContentStream.shadingFill:(Lorg/apache/pdfbox/pdmodel/graphics/shading/PDShading;)V
     126: aload         5
     128: invokevirtual #127                // Method org/apache/pdfbox/pdmodel/PDPageContentStream.close:()V
     131: new           #235                // class org/apache/pdfbox/pdmodel/graphics/color/PDPattern
     134: dup
     135: aconst_null
     136: invokespecial #236                // Method org/apache/pdfbox/pdmodel/graphics/color/PDPattern."<init>":(Lorg/apache/pdfbox/pdmodel/PDResources;)V
     139: astore        6
     141: aload_0
     142: getfield      #7                  // Field xFormObject:Lorg/apache/pdfbox/pdmodel/graphics/form/PDFormXObject;
     145: invokevirtual #237                // Method org/apache/pdfbox/pdmodel/graphics/form/PDFormXObject.getResources:()Lorg/apache/pdfbox/pdmodel/PDResources;
     148: aload_2
     149: invokevirtual #238                // Method org/apache/pdfbox/pdmodel/PDResources.add:(Lorg/apache/pdfbox/pdmodel/graphics/pattern/PDAbstractPattern;)Lorg/apache/pdfbox/cos/COSName;
     152: astore        7
     154: new           #239                // class org/apache/pdfbox/pdmodel/graphics/color/PDColor
     157: dup
     158: aload         7
     160: aload         6
     162: invokespecial #240                // Method org/apache/pdfbox/pdmodel/graphics/color/PDColor."<init>":(Lorg/apache/pdfbox/cos/COSName;Lorg/apache/pdfbox/pdmodel/graphics/color/PDColorSpace;)V
     165: astore        8
     167: aload_0
     168: getfield      #12                 // Field contentStream:Lorg/apache/pdfbox/pdmodel/PDPageContentStream;
     171: aload         8
     173: invokevirtual #174                // Method org/apache/pdfbox/pdmodel/PDPageContentStream.setNonStrokingColor:(Lorg/apache/pdfbox/pdmodel/graphics/color/PDColor;)V
     176: aload_0
     177: getfield      #12                 // Field contentStream:Lorg/apache/pdfbox/pdmodel/PDPageContentStream;
     180: aload         8
     182: invokevirtual #241                // Method org/apache/pdfbox/pdmodel/PDPageContentStream.setStrokingColor:(Lorg/apache/pdfbox/pdmodel/graphics/color/PDColor;)V
     185: return

  private org.apache.pdfbox.pdmodel.graphics.shading.PDShading applyPaint(java.awt.Shape) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #14                 // Field paint:Ljava/awt/Paint;
       5: aload_1
       6: invokespecial #10                 // Method applyPaint:(Ljava/awt/Paint;Ljava/awt/Shape;)Lorg/apache/pdfbox/pdmodel/graphics/shading/PDShading;
       9: areturn

  private org.apache.pdfbox.pdmodel.graphics.shading.PDShading applyPaint(java.awt.Paint, java.awt.Shape) throws java.io.IOException;
    Code:
       0: new           #23                 // class java/awt/geom/AffineTransform
       3: dup
       4: aload_0
       5: getfield      #64                 // Field baseTransform:Ljava/awt/geom/AffineTransform;
       8: invokespecial #203                // Method java/awt/geom/AffineTransform."<init>":(Ljava/awt/geom/AffineTransform;)V
      11: astore_3
      12: aload_3
      13: aload_0
      14: getfield      #25                 // Field transform:Ljava/awt/geom/AffineTransform;
      17: invokevirtual #152                // Method java/awt/geom/AffineTransform.concatenate:(Ljava/awt/geom/AffineTransform;)V
      20: aload_0
      21: getfield      #47                 // Field paintEnv:Lde/rototor/pdfbox/graphics2d/PdfBoxGraphics2D$PaintEnvImpl;
      24: aload_2
      25: putfield      #242                // Field de/rototor/pdfbox/graphics2d/PdfBoxGraphics2D$PaintEnvImpl.shapeToDraw:Ljava/awt/Shape;
      28: aload_0
      29: getfield      #15                 // Field paintApplier:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DPaintApplier;
      32: aload_1
      33: aload_0
      34: getfield      #12                 // Field contentStream:Lorg/apache/pdfbox/pdmodel/PDPageContentStream;
      37: aload_3
      38: aload_0
      39: getfield      #47                 // Field paintEnv:Lde/rototor/pdfbox/graphics2d/PdfBoxGraphics2D$PaintEnvImpl;
      42: invokeinterface #243,  5          // InterfaceMethod de/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DPaintApplier.applyPaint:(Ljava/awt/Paint;Lorg/apache/pdfbox/pdmodel/PDPageContentStream;Ljava/awt/geom/AffineTransform;Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DPaintApplier$IPaintEnv;)Lorg/apache/pdfbox/pdmodel/graphics/shading/PDShading;
      47: areturn

  public boolean hit(java.awt.Rectangle, java.awt.Shape, boolean);
    Code:
       0: iconst_0
       1: ireturn

  public java.awt.GraphicsConfiguration getDeviceConfiguration();
    Code:
       0: aconst_null
       1: areturn

  public void setComposite(java.awt.Composite);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #91                 // Field composite:Ljava/awt/Composite;
       5: return

  public void setPaint(java.awt.Paint);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #14                 // Field paint:Ljava/awt/Paint;
       5: return

  public void setStroke(java.awt.Stroke);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #88                 // Field stroke:Ljava/awt/Stroke;
       5: return

  public void setRenderingHint(java.awt.RenderingHints$Key, java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #50                 // Field renderingHints:Ljava/util/Map;
       4: aload_1
       5: aload_2
       6: invokeinterface #244,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      11: pop
      12: return

  public java.lang.Object getRenderingHint(java.awt.RenderingHints$Key);
    Code:
       0: aload_0
       1: getfield      #50                 // Field renderingHints:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #184,  2          // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: areturn

  public void setRenderingHints(java.util.Map<?, ?>);
    Code:
       0: aload_1
       1: invokeinterface #245,  1          // InterfaceMethod java/util/Map.clear:()V
       6: aload_0
       7: aload_1
       8: invokevirtual #246                // Method addRenderingHints:(Ljava/util/Map;)V
      11: return

  public void addRenderingHints(java.util.Map<?, ?>);
    Code:
       0: aload_0
       1: getfield      #50                 // Field renderingHints:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #247,  2          // InterfaceMethod java/util/Map.putAll:(Ljava/util/Map;)V
      10: return

  public java.awt.RenderingHints getRenderingHints();
    Code:
       0: new           #248                // class java/awt/RenderingHints
       3: dup
       4: aload_0
       5: getfield      #50                 // Field renderingHints:Ljava/util/Map;
       8: invokespecial #249                // Method java/awt/RenderingHints."<init>":(Ljava/util/Map;)V
      11: areturn

  public de.rototor.pdfbox.graphics2d.PdfBoxGraphics2D create();
    Code:
       0: new           #250                // class de/rototor/pdfbox/graphics2d/PdfBoxGraphics2D
       3: dup
       4: aload_0
       5: invokespecial #251                // Method "<init>":(Lde/rototor/pdfbox/graphics2d/PdfBoxGraphics2D;)V
       8: areturn
       9: astore_1
      10: new           #252                // class java/lang/RuntimeException
      13: dup
      14: aload_1
      15: invokespecial #253                // Method java/lang/RuntimeException."<init>":(Ljava/lang/Throwable;)V
      18: athrow
    Exception table:
       from    to  target type
           0     8     9   Class java/io/IOException

  public void drawInMarkedContentSequence(org.apache.pdfbox.cos.COSName, de.rototor.pdfbox.graphics2d.IPdfBoxGraphics2DMarkedContentDrawer);
    Code:
       0: aload_0
       1: getfield      #12                 // Field contentStream:Lorg/apache/pdfbox/pdmodel/PDPageContentStream;
       4: aload_1
       5: invokevirtual #254                // Method org/apache/pdfbox/pdmodel/PDPageContentStream.beginMarkedContent:(Lorg/apache/pdfbox/cos/COSName;)V
       8: aload_0
       9: invokevirtual #255                // Method create:()Lde/rototor/pdfbox/graphics2d/PdfBoxGraphics2D;
      12: astore_3
      13: aload_2
      14: aload_3
      15: invokeinterface #256,  2          // InterfaceMethod de/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DMarkedContentDrawer.draw:(Lde/rototor/pdfbox/graphics2d/PdfBoxGraphics2D;)V
      20: aload_3
      21: invokevirtual #120                // Method dispose:()V
      24: aload_0
      25: getfield      #12                 // Field contentStream:Lorg/apache/pdfbox/pdmodel/PDPageContentStream;
      28: invokevirtual #257                // Method org/apache/pdfbox/pdmodel/PDPageContentStream.endMarkedContent:()V
      31: goto          44
      34: astore_3
      35: new           #252                // class java/lang/RuntimeException
      38: dup
      39: aload_3
      40: invokespecial #253                // Method java/lang/RuntimeException."<init>":(Ljava/lang/Throwable;)V
      43: athrow
      44: return
    Exception table:
       from    to  target type
           0    31    34   Class java/io/IOException

  public void drawInMarkedContentSequence(org.apache.pdfbox.cos.COSName, org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList, de.rototor.pdfbox.graphics2d.IPdfBoxGraphics2DMarkedContentDrawer);
    Code:
       0: aload_0
       1: getfield      #12                 // Field contentStream:Lorg/apache/pdfbox/pdmodel/PDPageContentStream;
       4: aload_1
       5: aload_2
       6: invokevirtual #258                // Method org/apache/pdfbox/pdmodel/PDPageContentStream.beginMarkedContent:(Lorg/apache/pdfbox/cos/COSName;Lorg/apache/pdfbox/pdmodel/documentinterchange/markedcontent/PDPropertyList;)V
       9: aload_0
      10: invokevirtual #255                // Method create:()Lde/rototor/pdfbox/graphics2d/PdfBoxGraphics2D;
      13: astore        4
      15: aload_3
      16: aload         4
      18: invokeinterface #256,  2          // InterfaceMethod de/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DMarkedContentDrawer.draw:(Lde/rototor/pdfbox/graphics2d/PdfBoxGraphics2D;)V
      23: aload         4
      25: invokevirtual #120                // Method dispose:()V
      28: aload_0
      29: getfield      #12                 // Field contentStream:Lorg/apache/pdfbox/pdmodel/PDPageContentStream;
      32: invokevirtual #257                // Method org/apache/pdfbox/pdmodel/PDPageContentStream.endMarkedContent:()V
      35: goto          50
      38: astore        4
      40: new           #252                // class java/lang/RuntimeException
      43: dup
      44: aload         4
      46: invokespecial #253                // Method java/lang/RuntimeException."<init>":(Ljava/lang/Throwable;)V
      49: athrow
      50: return
    Exception table:
       from    to  target type
           0    35    38   Class java/io/IOException

  public de.rototor.pdfbox.graphics2d.PdfBoxGraphics2D create(int, int, int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: iload_3
       4: iload         4
       6: invokespecial #259                // Method java/awt/Graphics2D.create:(IIII)Ljava/awt/Graphics;
       9: checkcast     #250                // class de/rototor/pdfbox/graphics2d/PdfBoxGraphics2D
      12: areturn

  public void translate(int, int);
    Code:
       0: aload_0
       1: getfield      #25                 // Field transform:Ljava/awt/geom/AffineTransform;
       4: iload_1
       5: i2d
       6: iload_2
       7: i2d
       8: invokevirtual #66                 // Method java/awt/geom/AffineTransform.translate:(DD)V
      11: return

  public java.awt.Color getColor();
    Code:
       0: aload_0
       1: getfield      #14                 // Field paint:Ljava/awt/Paint;
       4: instanceof    #260                // class java/awt/Color
       7: ifeq          18
      10: aload_0
      11: getfield      #14                 // Field paint:Ljava/awt/Paint;
      14: checkcast     #260                // class java/awt/Color
      17: areturn
      18: aconst_null
      19: areturn

  public void setColor(java.awt.Color);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #14                 // Field paint:Ljava/awt/Paint;
       5: return

  public void setPaintMode();
    Code:
       0: aload_0
       1: aconst_null
       2: putfield      #1                  // Field xorColor:Ljava/awt/Color;
       5: return

  public void setXORMode(java.awt.Color);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field xorColor:Ljava/awt/Color;
       5: return

  public java.awt.Font getFont();
    Code:
       0: aload_0
       1: getfield      #11                 // Field font:Ljava/awt/Font;
       4: areturn

  public void setFont(java.awt.Font);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #11                 // Field font:Ljava/awt/Font;
       5: return

  public java.awt.FontMetrics getFontMetrics(java.awt.Font);
    Code:
       0: aload_0
       1: getfield      #20                 // Field fontTextDrawer:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DFontTextDrawer;
       4: aload_1
       5: aload_0
       6: getfield      #44                 // Field fontDrawerEnv:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DFontTextDrawer$IFontTextDrawerEnv;
       9: invokeinterface #261,  3          // InterfaceMethod de/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DFontTextDrawer.getFontMetrics:(Ljava/awt/Font;Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DFontTextDrawer$IFontTextDrawerEnv;)Ljava/awt/FontMetrics;
      14: areturn
      15: astore_2
      16: new           #252                // class java/lang/RuntimeException
      19: dup
      20: aload_2
      21: invokespecial #253                // Method java/lang/RuntimeException."<init>":(Ljava/lang/Throwable;)V
      24: athrow
      25: astore_2
      26: new           #252                // class java/lang/RuntimeException
      29: dup
      30: aload_2
      31: invokespecial #253                // Method java/lang/RuntimeException."<init>":(Ljava/lang/Throwable;)V
      34: athrow
    Exception table:
       from    to  target type
           0    14    15   Class java/io/IOException
           0    14    25   Class java/awt/FontFormatException

  public java.awt.Rectangle getClipBounds();
    Code:
       0: aload_0
       1: invokevirtual #262                // Method getClip:()Ljava/awt/Shape;
       4: astore_1
       5: aload_1
       6: ifnull        16
       9: aload_1
      10: invokeinterface #263,  1          // InterfaceMethod java/awt/Shape.getBounds:()Ljava/awt/Rectangle;
      15: areturn
      16: aconst_null
      17: areturn

  public void clipRect(int, int, int, int);
    Code:
       0: new           #190                // class java/awt/geom/Rectangle2D$Double
       3: dup
       4: iload_1
       5: i2d
       6: iload_2
       7: i2d
       8: iload_3
       9: i2d
      10: iload         4
      12: i2d
      13: invokespecial #191                // Method java/awt/geom/Rectangle2D$Double."<init>":(DDDD)V
      16: astore        5
      18: aload_0
      19: aload         5
      21: invokevirtual #264                // Method clip:(Ljava/awt/Shape;)V
      24: return

  public void setClip(int, int, int, int);
    Code:
       0: aload_0
       1: new           #175                // class java/awt/Rectangle
       4: dup
       5: iload_1
       6: iload_2
       7: iload_3
       8: iload         4
      10: invokespecial #176                // Method java/awt/Rectangle."<init>":(IIII)V
      13: invokevirtual #265                // Method setClip:(Ljava/awt/Shape;)V
      16: return

  public java.awt.Shape getClip();
    Code:
       0: aload_0
       1: getfield      #25                 // Field transform:Ljava/awt/geom/AffineTransform;
       4: invokevirtual #266                // Method java/awt/geom/AffineTransform.createInverse:()Ljava/awt/geom/AffineTransform;
       7: aload_0
       8: getfield      #89                 // Field clipShape:Ljava/awt/Shape;
      11: invokevirtual #267                // Method java/awt/geom/AffineTransform.createTransformedShape:(Ljava/awt/Shape;)Ljava/awt/Shape;
      14: areturn
      15: astore_1
      16: aconst_null
      17: areturn
    Exception table:
       from    to  target type
           0    14    15   Class java/awt/geom/NoninvertibleTransformException

  public void setClip(java.awt.Shape);
    Code:
       0: aload_0
       1: invokespecial #131                // Method checkNoCopyActive:()V
       4: aload_0
       5: aload_0
       6: getfield      #25                 // Field transform:Ljava/awt/geom/AffineTransform;
       9: aload_1
      10: invokevirtual #267                // Method java/awt/geom/AffineTransform.createTransformedShape:(Ljava/awt/Shape;)Ljava/awt/Shape;
      13: putfield      #89                 // Field clipShape:Ljava/awt/Shape;
      16: aload_0
      17: invokespecial #122                // Method contentStreamRestoreState:()V
      20: aload_0
      21: invokespecial #63                 // Method contentStreamSaveState:()V
      24: aload_1
      25: ifnull        37
      28: aload_0
      29: aload_0
      30: aload_1
      31: invokespecial #133                // Method walkShape:(Ljava/awt/Shape;)Z
      34: invokevirtual #215                // Method internalClip:(Z)V
      37: goto          46
      40: astore_2
      41: aload_0
      42: aload_2
      43: invokespecial #124                // Method throwException:(Ljava/lang/Exception;)V
      46: return
    Exception table:
       from    to  target type
          16    37    40   Class java/io/IOException

  void internalClip(boolean) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #51                 // Field hasPathOnStream:Z
       4: ifeq          33
       7: iload_1
       8: ifeq          21
      11: aload_0
      12: getfield      #12                 // Field contentStream:Lorg/apache/pdfbox/pdmodel/PDPageContentStream;
      15: invokevirtual #269                // Method org/apache/pdfbox/pdmodel/PDPageContentStream.clipEvenOdd:()V
      18: goto          28
      21: aload_0
      22: getfield      #12                 // Field contentStream:Lorg/apache/pdfbox/pdmodel/PDPageContentStream;
      25: invokevirtual #192                // Method org/apache/pdfbox/pdmodel/PDPageContentStream.clip:()V
      28: aload_0
      29: iconst_0
      30: putfield      #51                 // Field hasPathOnStream:Z
      33: return

  private static boolean isFinite(float);
    Code:
       0: fload_0
       1: invokestatic  #270                // Method java/lang/Math.abs:(F)F
       4: ldc_w         #272                // float 3.4028235E38f
       7: fcmpg
       8: ifgt          15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: ireturn

  private static boolean isFinite(float[], int);
    Code:
       0: iconst_0
       1: istore_2
       2: iload_2
       3: iload_1
       4: if_icmpge     24
       7: aload_0
       8: iload_2
       9: faload
      10: invokestatic  #273                // Method isFinite:(F)Z
      13: ifne          18
      16: iconst_0
      17: ireturn
      18: iinc          2, 1
      21: goto          2
      24: iconst_1
      25: ireturn

  void markPathIsOnStream();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #51                 // Field hasPathOnStream:Z
       5: return

  private boolean walkShape(java.awt.Shape) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #131                // Method checkNoCopyActive:()V
       4: new           #23                 // class java/awt/geom/AffineTransform
       7: dup
       8: aload_0
       9: getfield      #64                 // Field baseTransform:Ljava/awt/geom/AffineTransform;
      12: invokespecial #203                // Method java/awt/geom/AffineTransform."<init>":(Ljava/awt/geom/AffineTransform;)V
      15: astore_2
      16: aload_2
      17: aload_0
      18: getfield      #25                 // Field transform:Ljava/awt/geom/AffineTransform;
      21: invokevirtual #152                // Method java/awt/geom/AffineTransform.concatenate:(Ljava/awt/geom/AffineTransform;)V
      24: aload_1
      25: aload_2
      26: invokeinterface #274,  2          // InterfaceMethod java/awt/Shape.getPathIterator:(Ljava/awt/geom/AffineTransform;)Ljava/awt/geom/PathIterator;
      31: astore_3
      32: bipush        6
      34: newarray       float
      36: astore        4
      38: aload_3
      39: invokeinterface #275,  1          // InterfaceMethod java/awt/geom/PathIterator.isDone:()Z
      44: ifne          241
      47: aload_3
      48: aload         4
      50: invokeinterface #276,  2          // InterfaceMethod java/awt/geom/PathIterator.currentSegment:([F)I
      55: istore        5
      57: iload         5
      59: tableswitch   { // 0 to 4
                     0: 92
                     1: 119
                     2: 146
                     3: 181
                     4: 225
               default: 232
          }
      92: aload         4
      94: iconst_2
      95: invokestatic  #277                // Method isFinite:([FI)Z
      98: ifeq          232
     101: aload_0
     102: getfield      #12                 // Field contentStream:Lorg/apache/pdfbox/pdmodel/PDPageContentStream;
     105: aload         4
     107: iconst_0
     108: faload
     109: aload         4
     111: iconst_1
     112: faload
     113: invokevirtual #278                // Method org/apache/pdfbox/pdmodel/PDPageContentStream.moveTo:(FF)V
     116: goto          232
     119: aload         4
     121: iconst_2
     122: invokestatic  #277                // Method isFinite:([FI)Z
     125: ifeq          232
     128: aload_0
     129: getfield      #12                 // Field contentStream:Lorg/apache/pdfbox/pdmodel/PDPageContentStream;
     132: aload         4
     134: iconst_0
     135: faload
     136: aload         4
     138: iconst_1
     139: faload
     140: invokevirtual #279                // Method org/apache/pdfbox/pdmodel/PDPageContentStream.lineTo:(FF)V
     143: goto          232
     146: aload         4
     148: iconst_4
     149: invokestatic  #277                // Method isFinite:([FI)Z
     152: ifeq          232
     155: aload_0
     156: getfield      #12                 // Field contentStream:Lorg/apache/pdfbox/pdmodel/PDPageContentStream;
     159: aload         4
     161: iconst_0
     162: faload
     163: aload         4
     165: iconst_1
     166: faload
     167: aload         4
     169: iconst_2
     170: faload
     171: aload         4
     173: iconst_3
     174: faload
     175: invokevirtual #280                // Method org/apache/pdfbox/pdmodel/PDPageContentStream.curveTo1:(FFFF)V
     178: goto          232
     181: aload         4
     183: bipush        6
     185: invokestatic  #277                // Method isFinite:([FI)Z
     188: ifeq          232
     191: aload_0
     192: getfield      #12                 // Field contentStream:Lorg/apache/pdfbox/pdmodel/PDPageContentStream;
     195: aload         4
     197: iconst_0
     198: faload
     199: aload         4
     201: iconst_1
     202: faload
     203: aload         4
     205: iconst_2
     206: faload
     207: aload         4
     209: iconst_3
     210: faload
     211: aload         4
     213: iconst_4
     214: faload
     215: aload         4
     217: iconst_5
     218: faload
     219: invokevirtual #281                // Method org/apache/pdfbox/pdmodel/PDPageContentStream.curveTo:(FFFFFF)V
     222: goto          232
     225: aload_0
     226: getfield      #12                 // Field contentStream:Lorg/apache/pdfbox/pdmodel/PDPageContentStream;
     229: invokevirtual #282                // Method org/apache/pdfbox/pdmodel/PDPageContentStream.closePath:()V
     232: aload_3
     233: invokeinterface #283,  1          // InterfaceMethod java/awt/geom/PathIterator.next:()V
     238: goto          38
     241: aload_0
     242: invokevirtual #284                // Method markPathIsOnStream:()V
     245: aload_3
     246: invokeinterface #285,  1          // InterfaceMethod java/awt/geom/PathIterator.getWindingRule:()I
     251: ifne          258
     254: iconst_1
     255: goto          259
     258: iconst_0
     259: ireturn

  private void checkNoCopyActive();
    Code:
       0: aload_0
       1: getfield      #38                 // Field copyList:Ljava/util/List;
       4: invokeinterface #118,  1          // InterfaceMethod java/util/List.size:()I
       9: ifle          43
      12: new           #76                 // class java/lang/IllegalStateException
      15: dup
      16: new           #96                 // class java/lang/StringBuilder
      19: dup
      20: invokespecial #97                 // Method java/lang/StringBuilder."<init>":()V
      23: ldc_w         #286                // String Don\'t use the main context as long as a copy is active! Child context is missing a .dispose() call. \n
      26: invokevirtual #105                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      29: aload_0
      30: invokestatic  #287                // Method gatherDebugCopyInfo:(Lde/rototor/pdfbox/graphics2d/PdfBoxGraphics2D;)Ljava/lang/String;
      33: invokevirtual #105                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      36: invokevirtual #115                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      39: invokespecial #78                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      42: athrow
      43: return

  private static java.lang.String gatherDebugCopyInfo(de.rototor.pdfbox.graphics2d.PdfBoxGraphics2D);
    Code:
       0: new           #96                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #97                 // Method java/lang/StringBuilder."<init>":()V
       7: astore_1
       8: aload_0
       9: getfield      #38                 // Field copyList:Ljava/util/List;
      12: invokeinterface #288,  1          // InterfaceMethod java/util/List.isEmpty:()Z
      17: ifne          72
      20: aload_0
      21: getfield      #38                 // Field copyList:Ljava/util/List;
      24: invokeinterface #289,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      29: astore_2
      30: aload_2
      31: invokeinterface #290,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      36: ifeq          72
      39: aload_2
      40: invokeinterface #291,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      45: checkcast     #80                 // class de/rototor/pdfbox/graphics2d/PdfBoxGraphics2D$CopyInfo
      48: astore_3
      49: aload_1
      50: ldc_w         #292                // String # Dangling Child
      53: invokevirtual #105                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      56: aload_3
      57: invokevirtual #293                // Method de/rototor/pdfbox/graphics2d/PdfBoxGraphics2D$CopyInfo.toString:()Ljava/lang/String;
      60: invokevirtual #105                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      63: ldc           #114                // String \n
      65: invokevirtual #105                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      68: pop
      69: goto          30
      72: aload_0
      73: ifnull        146
      76: aload_0
      77: getfield      #38                 // Field copyList:Ljava/util/List;
      80: invokeinterface #288,  1          // InterfaceMethod java/util/List.isEmpty:()Z
      85: ifeq          99
      88: aload_1
      89: ldc_w         #294                // String * Last Child\n
      92: invokevirtual #105                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      95: pop
      96: goto          125
      99: aload_1
     100: ldc_w         #295                // String - Parent with
     103: invokevirtual #105                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     106: aload_0
     107: getfield      #38                 // Field copyList:Ljava/util/List;
     110: invokeinterface #118,  1          // InterfaceMethod java/util/List.size:()I
     115: invokevirtual #112                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     118: ldc_w         #296                // String  childs.\n
     121: invokevirtual #105                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     124: pop
     125: aload_0
     126: getfield      #75                 // Field copyInfo:Lde/rototor/pdfbox/graphics2d/PdfBoxGraphics2D$CopyInfo;
     129: ifnonnull     135
     132: goto          146
     135: aload_0
     136: getfield      #75                 // Field copyInfo:Lde/rototor/pdfbox/graphics2d/PdfBoxGraphics2D$CopyInfo;
     139: getfield      #85                 // Field de/rototor/pdfbox/graphics2d/PdfBoxGraphics2D$CopyInfo.sourceGfx:Lde/rototor/pdfbox/graphics2d/PdfBoxGraphics2D;
     142: astore_0
     143: goto          72
     146: aload_1
     147: invokevirtual #115                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     150: areturn

  private void throwException(java.lang.Exception);
    Code:
       0: new           #252                // class java/lang/RuntimeException
       3: dup
       4: aload_1
       5: invokespecial #253                // Method java/lang/RuntimeException."<init>":(Ljava/lang/Throwable;)V
       8: athrow

  public void copyArea(int, int, int, int, int, int);
    Code:
       0: new           #76                 // class java/lang/IllegalStateException
       3: dup
       4: ldc_w         #297                // String copyArea() not possible!
       7: invokespecial #78                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      10: athrow

  public void drawLine(int, int, int, int);
    Code:
       0: aload_0
       1: new           #298                // class java/awt/geom/Line2D$Double
       4: dup
       5: iload_1
       6: i2d
       7: iload_2
       8: i2d
       9: iload_3
      10: i2d
      11: iload         4
      13: i2d
      14: invokespecial #299                // Method java/awt/geom/Line2D$Double."<init>":(DDDD)V
      17: invokevirtual #300                // Method draw:(Ljava/awt/Shape;)V
      20: return

  public void fillRect(int, int, int, int);
    Code:
       0: aload_0
       1: new           #175                // class java/awt/Rectangle
       4: dup
       5: iload_1
       6: iload_2
       7: iload_3
       8: iload         4
      10: invokespecial #176                // Method java/awt/Rectangle."<init>":(IIII)V
      13: invokevirtual #209                // Method fill:(Ljava/awt/Shape;)V
      16: return

  public void clearRect(int, int, int, int);
    Code:
       0: aload_0
       1: getfield      #14                 // Field paint:Ljava/awt/Paint;
       4: astore        5
       6: aload_0
       7: aload_0
       8: getfield      #90                 // Field backgroundColor:Ljava/awt/Color;
      11: putfield      #14                 // Field paint:Ljava/awt/Paint;
      14: aload_0
      15: iload_1
      16: iload_2
      17: iload_3
      18: iload         4
      20: invokevirtual #301                // Method fillRect:(IIII)V
      23: aload_0
      24: aload         5
      26: putfield      #14                 // Field paint:Ljava/awt/Paint;
      29: return

  public void drawRoundRect(int, int, int, int, int, int);
    Code:
       0: aload_0
       1: new           #302                // class java/awt/geom/RoundRectangle2D$Double
       4: dup
       5: iload_1
       6: i2d
       7: iload_2
       8: i2d
       9: iload_3
      10: i2d
      11: iload         4
      13: i2d
      14: iload         5
      16: i2d
      17: iload         6
      19: i2d
      20: invokespecial #303                // Method java/awt/geom/RoundRectangle2D$Double."<init>":(DDDDDD)V
      23: invokevirtual #300                // Method draw:(Ljava/awt/Shape;)V
      26: return

  public void fillRoundRect(int, int, int, int, int, int);
    Code:
       0: aload_0
       1: new           #302                // class java/awt/geom/RoundRectangle2D$Double
       4: dup
       5: iload_1
       6: i2d
       7: iload_2
       8: i2d
       9: iload_3
      10: i2d
      11: iload         4
      13: i2d
      14: iload         5
      16: i2d
      17: iload         6
      19: i2d
      20: invokespecial #303                // Method java/awt/geom/RoundRectangle2D$Double."<init>":(DDDDDD)V
      23: invokevirtual #209                // Method fill:(Ljava/awt/Shape;)V
      26: return

  public void drawOval(int, int, int, int);
    Code:
       0: aload_0
       1: new           #304                // class java/awt/geom/Ellipse2D$Double
       4: dup
       5: iload_1
       6: i2d
       7: iload_2
       8: i2d
       9: iload_3
      10: i2d
      11: iload         4
      13: i2d
      14: invokespecial #305                // Method java/awt/geom/Ellipse2D$Double."<init>":(DDDD)V
      17: invokevirtual #300                // Method draw:(Ljava/awt/Shape;)V
      20: return

  public void fillOval(int, int, int, int);
    Code:
       0: aload_0
       1: new           #304                // class java/awt/geom/Ellipse2D$Double
       4: dup
       5: iload_1
       6: i2d
       7: iload_2
       8: i2d
       9: iload_3
      10: i2d
      11: iload         4
      13: i2d
      14: invokespecial #305                // Method java/awt/geom/Ellipse2D$Double."<init>":(DDDD)V
      17: invokevirtual #209                // Method fill:(Ljava/awt/Shape;)V
      20: return

  public void drawArc(int, int, int, int, int, int);
    Code:
       0: aload_0
       1: new           #306                // class java/awt/geom/Arc2D$Double
       4: dup
       5: iload_1
       6: i2d
       7: iload_2
       8: i2d
       9: iload_3
      10: i2d
      11: iload         4
      13: i2d
      14: iload         5
      16: i2d
      17: iload         6
      19: i2d
      20: iconst_0
      21: invokespecial #308                // Method java/awt/geom/Arc2D$Double."<init>":(DDDDDDI)V
      24: invokevirtual #300                // Method draw:(Ljava/awt/Shape;)V
      27: return

  public void fillArc(int, int, int, int, int, int);
    Code:
       0: aload_0
       1: new           #306                // class java/awt/geom/Arc2D$Double
       4: dup
       5: iload_1
       6: i2d
       7: iload_2
       8: i2d
       9: iload_3
      10: i2d
      11: iload         4
      13: i2d
      14: iload         5
      16: i2d
      17: iload         6
      19: i2d
      20: iconst_2
      21: invokespecial #308                // Method java/awt/geom/Arc2D$Double."<init>":(DDDDDDI)V
      24: invokevirtual #209                // Method fill:(Ljava/awt/Shape;)V
      27: return

  public void drawPolyline(int[], int[], int);
    Code:
       0: new           #309                // class java/awt/geom/Path2D$Double
       3: dup
       4: invokespecial #310                // Method java/awt/geom/Path2D$Double."<init>":()V
       7: astore        4
       9: aload         4
      11: aload_1
      12: iconst_0
      13: iaload
      14: i2d
      15: aload_2
      16: iconst_0
      17: iaload
      18: i2d
      19: invokevirtual #311                // Method java/awt/geom/Path2D$Double.moveTo:(DD)V
      22: iconst_1
      23: istore        5
      25: iload         5
      27: iload_3
      28: if_icmpge     52
      31: aload         4
      33: aload_1
      34: iload         5
      36: iaload
      37: i2d
      38: aload_2
      39: iload         5
      41: iaload
      42: i2d
      43: invokevirtual #312                // Method java/awt/geom/Path2D$Double.lineTo:(DD)V
      46: iinc          5, 1
      49: goto          25
      52: aload_0
      53: aload         4
      55: invokevirtual #300                // Method draw:(Ljava/awt/Shape;)V
      58: return

  public void drawPolygon(int[], int[], int);
    Code:
       0: aload_0
       1: new           #313                // class java/awt/Polygon
       4: dup
       5: aload_1
       6: aload_2
       7: iload_3
       8: invokespecial #314                // Method java/awt/Polygon."<init>":([I[II)V
      11: invokevirtual #300                // Method draw:(Ljava/awt/Shape;)V
      14: return

  public void fillPolygon(int[], int[], int);
    Code:
       0: aload_0
       1: new           #313                // class java/awt/Polygon
       4: dup
       5: aload_1
       6: aload_2
       7: iload_3
       8: invokespecial #314                // Method java/awt/Polygon."<init>":([I[II)V
      11: invokevirtual #209                // Method fill:(Ljava/awt/Shape;)V
      14: return

  public void translate(double, double);
    Code:
       0: aload_0
       1: invokespecial #131                // Method checkNoCopyActive:()V
       4: aload_0
       5: getfield      #25                 // Field transform:Ljava/awt/geom/AffineTransform;
       8: dload_1
       9: dload_3
      10: invokevirtual #66                 // Method java/awt/geom/AffineTransform.translate:(DD)V
      13: return

  public void rotate(double);
    Code:
       0: aload_0
       1: invokespecial #131                // Method checkNoCopyActive:()V
       4: aload_0
       5: getfield      #25                 // Field transform:Ljava/awt/geom/AffineTransform;
       8: dload_1
       9: invokevirtual #315                // Method java/awt/geom/AffineTransform.rotate:(D)V
      12: return

  public void rotate(double, double, double);
    Code:
       0: aload_0
       1: invokespecial #131                // Method checkNoCopyActive:()V
       4: aload_0
       5: getfield      #25                 // Field transform:Ljava/awt/geom/AffineTransform;
       8: dload_1
       9: dload_3
      10: dload         5
      12: invokevirtual #316                // Method java/awt/geom/AffineTransform.rotate:(DDD)V
      15: return

  public void scale(double, double);
    Code:
       0: aload_0
       1: invokespecial #131                // Method checkNoCopyActive:()V
       4: aload_0
       5: getfield      #25                 // Field transform:Ljava/awt/geom/AffineTransform;
       8: dload_1
       9: dload_3
      10: invokevirtual #69                 // Method java/awt/geom/AffineTransform.scale:(DD)V
      13: return

  public void shear(double, double);
    Code:
       0: aload_0
       1: invokespecial #131                // Method checkNoCopyActive:()V
       4: aload_0
       5: getfield      #25                 // Field transform:Ljava/awt/geom/AffineTransform;
       8: dload_1
       9: dload_3
      10: invokevirtual #317                // Method java/awt/geom/AffineTransform.shear:(DD)V
      13: return

  public void transform(java.awt.geom.AffineTransform);
    Code:
       0: aload_0
       1: invokespecial #131                // Method checkNoCopyActive:()V
       4: aload_0
       5: getfield      #25                 // Field transform:Ljava/awt/geom/AffineTransform;
       8: aload_1
       9: invokevirtual #152                // Method java/awt/geom/AffineTransform.concatenate:(Ljava/awt/geom/AffineTransform;)V
      12: return

  public void setTransform(java.awt.geom.AffineTransform);
    Code:
       0: aload_0
       1: invokespecial #131                // Method checkNoCopyActive:()V
       4: aload_0
       5: new           #23                 // class java/awt/geom/AffineTransform
       8: dup
       9: invokespecial #24                 // Method java/awt/geom/AffineTransform."<init>":()V
      12: putfield      #25                 // Field transform:Ljava/awt/geom/AffineTransform;
      15: aload_0
      16: getfield      #25                 // Field transform:Ljava/awt/geom/AffineTransform;
      19: aload_1
      20: invokevirtual #152                // Method java/awt/geom/AffineTransform.concatenate:(Ljava/awt/geom/AffineTransform;)V
      23: return

  public java.awt.geom.AffineTransform getTransform();
    Code:
       0: aload_0
       1: getfield      #25                 // Field transform:Ljava/awt/geom/AffineTransform;
       4: invokevirtual #87                 // Method java/awt/geom/AffineTransform.clone:()Ljava/lang/Object;
       7: checkcast     #23                 // class java/awt/geom/AffineTransform
      10: areturn

  public java.awt.Paint getPaint();
    Code:
       0: aload_0
       1: getfield      #14                 // Field paint:Ljava/awt/Paint;
       4: areturn

  public java.awt.Composite getComposite();
    Code:
       0: aload_0
       1: getfield      #91                 // Field composite:Ljava/awt/Composite;
       4: areturn

  public void setBackground(java.awt.Color);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #90                 // Field backgroundColor:Ljava/awt/Color;
       5: return

  public java.awt.Color getBackground();
    Code:
       0: aload_0
       1: getfield      #90                 // Field backgroundColor:Ljava/awt/Color;
       4: areturn

  public java.awt.Stroke getStroke();
    Code:
       0: aload_0
       1: getfield      #88                 // Field stroke:Ljava/awt/Stroke;
       4: areturn

  public void clip(java.awt.Shape);
    Code:
       0: aload_0
       1: invokevirtual #262                // Method getClip:()Ljava/awt/Shape;
       4: astore_2
       5: aload_2
       6: ifnonnull     17
       9: aload_0
      10: aload_1
      11: invokevirtual #265                // Method setClip:(Ljava/awt/Shape;)V
      14: goto          43
      17: new           #318                // class java/awt/geom/Area
      20: dup
      21: aload_2
      22: invokespecial #319                // Method java/awt/geom/Area."<init>":(Ljava/awt/Shape;)V
      25: astore_3
      26: aload_3
      27: new           #318                // class java/awt/geom/Area
      30: dup
      31: aload_1
      32: invokespecial #319                // Method java/awt/geom/Area."<init>":(Ljava/awt/Shape;)V
      35: invokevirtual #320                // Method java/awt/geom/Area.intersect:(Ljava/awt/geom/Area;)V
      38: aload_0
      39: aload_3
      40: invokevirtual #265                // Method setClip:(Ljava/awt/Shape;)V
      43: return

  public java.awt.font.FontRenderContext getFontRenderContext();
    Code:
       0: aload_0
       1: getfield      #6                  // Field calcGfx:Ljava/awt/Graphics2D;
       4: aload_0
       5: getfield      #50                 // Field renderingHints:Ljava/util/Map;
       8: invokevirtual #321                // Method java/awt/Graphics2D.addRenderingHints:(Ljava/util/Map;)V
      11: aload_0
      12: getfield      #6                  // Field calcGfx:Ljava/awt/Graphics2D;
      15: invokevirtual #322                // Method java/awt/Graphics2D.getFontRenderContext:()Ljava/awt/font/FontRenderContext;
      18: areturn

  public java.awt.Graphics create(int, int, int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: iload_3
       4: iload         4
       6: invokevirtual #323                // Method create:(IIII)Lde/rototor/pdfbox/graphics2d/PdfBoxGraphics2D;
       9: areturn

  public java.awt.Graphics create();
    Code:
       0: aload_0
       1: invokevirtual #255                // Method create:()Lde/rototor/pdfbox/graphics2d/PdfBoxGraphics2D;
       4: areturn

  static java.awt.Paint access$100(de.rototor.pdfbox.graphics2d.PdfBoxGraphics2D);
    Code:
       0: aload_0
       1: getfield      #14                 // Field paint:Ljava/awt/Paint;
       4: areturn

  static org.apache.pdfbox.pdmodel.PDDocument access$200(de.rototor.pdfbox.graphics2d.PdfBoxGraphics2D);
    Code:
       0: aload_0
       1: getfield      #13                 // Field document:Lorg/apache/pdfbox/pdmodel/PDDocument;
       4: areturn

  static org.apache.pdfbox.pdmodel.PDPageContentStream access$300(de.rototor.pdfbox.graphics2d.PdfBoxGraphics2D);
    Code:
       0: aload_0
       1: getfield      #12                 // Field contentStream:Lorg/apache/pdfbox/pdmodel/PDPageContentStream;
       4: areturn

  static java.awt.Font access$400(de.rototor.pdfbox.graphics2d.PdfBoxGraphics2D);
    Code:
       0: aload_0
       1: getfield      #11                 // Field font:Ljava/awt/Font;
       4: areturn

  static org.apache.pdfbox.pdmodel.graphics.shading.PDShading access$500(de.rototor.pdfbox.graphics2d.PdfBoxGraphics2D, java.awt.Paint, java.awt.Shape) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #10                 // Method applyPaint:(Ljava/awt/Paint;Ljava/awt/Shape;)Lorg/apache/pdfbox/pdmodel/graphics/shading/PDShading;
       6: areturn

  static void access$600(de.rototor.pdfbox.graphics2d.PdfBoxGraphics2D, org.apache.pdfbox.pdmodel.graphics.shading.PDShading) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #9                  // Method applyShadingAsColor:(Lorg/apache/pdfbox/pdmodel/graphics/shading/PDShading;)V
       5: return

  static org.apache.pdfbox.pdmodel.common.PDRectangle access$700(de.rototor.pdfbox.graphics2d.PdfBoxGraphics2D);
    Code:
       0: aload_0
       1: getfield      #8                  // Field bbox:Lorg/apache/pdfbox/pdmodel/common/PDRectangle;
       4: areturn

  static org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject access$800(de.rototor.pdfbox.graphics2d.PdfBoxGraphics2D);
    Code:
       0: aload_0
       1: getfield      #7                  // Field xFormObject:Lorg/apache/pdfbox/pdmodel/graphics/form/PDFormXObject;
       4: areturn

  static java.awt.Graphics2D access$900(de.rototor.pdfbox.graphics2d.PdfBoxGraphics2D);
    Code:
       0: aload_0
       1: getfield      #6                  // Field calcGfx:Ljava/awt/Graphics2D;
       4: areturn

  static void access$1000(de.rototor.pdfbox.graphics2d.PdfBoxGraphics2D, java.awt.Stroke) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #5                  // Method applyStroke:(Ljava/awt/Stroke;)V
       5: return

  static java.awt.geom.AffineTransform access$1100(de.rototor.pdfbox.graphics2d.PdfBoxGraphics2D);
    Code:
       0: aload_0
       1: invokespecial #4                  // Method getCurrentEffectiveTransform:()Ljava/awt/geom/AffineTransform;
       4: areturn

  static de.rototor.pdfbox.graphics2d.IPdfBoxGraphics2DColorMapper access$1300(de.rototor.pdfbox.graphics2d.PdfBoxGraphics2D);
    Code:
       0: aload_0
       1: getfield      #3                  // Field colorMapper:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DColorMapper;
       4: areturn

  static de.rototor.pdfbox.graphics2d.IPdfBoxGraphics2DImageEncoder access$1400(de.rototor.pdfbox.graphics2d.PdfBoxGraphics2D);
    Code:
       0: aload_0
       1: getfield      #2                  // Field imageEncoder:Lde/rototor/pdfbox/graphics2d/IPdfBoxGraphics2DImageEncoder;
       4: areturn

  static java.awt.Color access$1500(de.rototor.pdfbox.graphics2d.PdfBoxGraphics2D);
    Code:
       0: aload_0
       1: getfield      #1                  // Field xorColor:Ljava/awt/Color;
       4: areturn

  static {};
    Code:
       0: iconst_0
       1: putstatic     #93                 // Field ENABLE_CHILD_CREATING_DEBUG:Z
       4: return
}
