Compiled from "RetrySpec.scala"
public class zio.RetrySpec extends zio.BaseCrossPlatformSpec {
  private volatile zio.RetrySpec$TestRandom$ TestRandom$module;

  private final scala.Function2<java.lang.String, scala.runtime.BoxedUnit, zio.ZIO<java.lang.Object, scala.runtime.Nothing$, java.lang.String>> ioSucceed;

  private final scala.Function2<java.lang.String, scala.runtime.BoxedUnit, zio.ZIO<java.lang.Object, java.lang.String, scala.runtime.Nothing$>> ioFail;

  public zio.RetrySpec$TestRandom$ TestRandom();
    Code:
       0: aload_0
       1: getfield      #50                 // Field TestRandom$module:Lzio/RetrySpec$TestRandom$;
       4: ifnonnull     11
       7: aload_0
       8: invokespecial #54                 // Method TestRandom$lzycompute$1:()V
      11: aload_0
      12: getfield      #50                 // Field TestRandom$module:Lzio/RetrySpec$TestRandom$;
      15: areturn

  public org.specs2.specification.core.SpecStructure is();
    Code:
       0: aload_0
       1: aload_0
       2: ldc           #60                 // String RetrySpec
       4: invokevirtual #64                 // Method title:(Ljava/lang/String;)Lorg/specs2/specification/dsl/TitleDsl$TitleOps;
       7: invokevirtual #67                 // Method org/specs2/specification/dsl/TitleDsl$TitleOps.title:()Lorg/specs2/specification/core/SpecHeader;
      10: invokevirtual #70                 // Method appendSpecStructureToSpecHeader:(Lorg/specs2/specification/core/SpecHeader;)Lorg/specs2/specification/dsl/SpecStructureDsl$appendSpecStructureToSpecHeader;
      13: aload_0
      14: invokedynamic #92,  0             // InvokeDynamic #0:apply:(Lzio/RetrySpec;)Lscala/Function0;
      19: invokevirtual #96                 // Method org/specs2/specification/dsl/SpecStructureDsl$appendSpecStructureToSpecHeader.$up:(Lscala/Function0;)Lorg/specs2/specification/core/SpecStructure;
      22: areturn

  public <R, E, A, E1, S> zio.ZIO<R, scala.runtime.Nothing$, scala.Tuple2<scala.util.Either<E1, A>, scala.collection.immutable.List<scala.Tuple2<zio.duration.Duration, S>>>> retryCollect(zio.ZIO<java.lang.Object, E, A>, zio.ZSchedule<R, E1, S>);
    Code:
       0: aload_2
       1: invokeinterface #105,  1          // InterfaceMethod zio/ZSchedule.initial:()Lzio/ZIO;
       6: aload_1
       7: aload_2
       8: invokedynamic #117,  0            // InvokeDynamic #1:apply:(Lzio/ZIO;Lzio/ZSchedule;)Lscala/Function1;
      13: invokeinterface #123,  2          // InterfaceMethod zio/ZIO.flatMap:(Lscala/Function1;)Lzio/ZIO;
      18: invokedynamic #132,  0            // InvokeDynamic #2:apply:()Lscala/Function1;
      23: invokeinterface #135,  2          // InterfaceMethod zio/ZIO.map:(Lscala/Function1;)Lzio/ZIO;
      28: areturn

  public zio.ZIO<zio.clock.Clock, java.lang.Object, org.specs2.matcher.MatchResult<java.lang.Object>> notRetryOnSuccess();
    Code:
       0: getstatic     #145                // Field zio/Ref$.MODULE$:Lzio/Ref$;
       3: iconst_0
       4: invokestatic  #151                // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
       7: invokevirtual #154                // Method zio/Ref$.make:(Ljava/lang/Object;)Lzio/ZIO;
      10: aload_0
      11: invokedynamic #162,  0            // InvokeDynamic #3:apply:(Lzio/RetrySpec;)Lscala/Function1;
      16: invokeinterface #123,  2          // InterfaceMethod zio/ZIO.flatMap:(Lscala/Function1;)Lzio/ZIO;
      21: areturn

  public zio.ZIO<zio.clock.Clock, java.lang.Object, org.specs2.matcher.MatchResult<java.lang.Object>> retryOnceSuccess();
    Code:
       0: getstatic     #145                // Field zio/Ref$.MODULE$:Lzio/Ref$;
       3: iconst_0
       4: invokestatic  #151                // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
       7: invokevirtual #154                // Method zio/Ref$.make:(Ljava/lang/Object;)Lzio/ZIO;
      10: aload_0
      11: invokedynamic #168,  0            // InvokeDynamic #4:apply:(Lzio/RetrySpec;)Lscala/Function1;
      16: invokeinterface #123,  2          // InterfaceMethod zio/ZIO.flatMap:(Lscala/Function1;)Lzio/ZIO;
      21: areturn

  public zio.ZIO<zio.clock.Clock, scala.runtime.Nothing$, org.specs2.matcher.MatchResult<java.lang.Object>> retryOnceFail();
    Code:
       0: aload_0
       1: getstatic     #145                // Field zio/Ref$.MODULE$:Lzio/Ref$;
       4: iconst_0
       5: invokestatic  #151                // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
       8: invokevirtual #154                // Method zio/Ref$.make:(Ljava/lang/Object;)Lzio/ZIO;
      11: aload_0
      12: invokedynamic #175,  0            // InvokeDynamic #5:apply:(Lzio/RetrySpec;)Lscala/Function1;
      17: invokeinterface #123,  2          // InterfaceMethod zio/ZIO.flatMap:(Lscala/Function1;)Lzio/ZIO;
      22: invokedynamic #180,  0            // InvokeDynamic #6:apply:()Lscala/Function1;
      27: invokedynamic #187,  0            // InvokeDynamic #7:apply:()Lscala/Function1;
      32: invokeinterface #191,  3          // InterfaceMethod zio/ZIO.foldM:(Lscala/Function1;Lscala/Function1;)Lzio/ZIO;
      37: invokevirtual #194                // Method ZIOMustExpectable:(Lzio/ZIO;)Lzio/BaseCrossPlatformSpec$ZIOMustExpectable;
      40: invokedynamic #203,  0            // InvokeDynamic #8:apply:()Lscala/Function0;
      45: getstatic     #208                // Field org/specs2/matcher/describe/Diffable$.MODULE$:Lorg/specs2/matcher/describe/Diffable$;
      48: invokevirtual #212                // Method org/specs2/matcher/describe/Diffable$.fallbackDiffable:()Lorg/specs2/matcher/describe/Diffable;
      51: invokevirtual #216                // Method zio/BaseCrossPlatformSpec$ZIOMustExpectable.must_$eq$eq$eq:(Lscala/Function0;Lorg/specs2/matcher/describe/Diffable;)Lzio/ZIO;
      54: areturn

  public zio.ZIO<zio.clock.Clock, scala.runtime.Nothing$, org.specs2.matcher.MatchResult<java.lang.Object>> retryRecurs0();
    Code:
       0: aload_0
       1: getstatic     #145                // Field zio/Ref$.MODULE$:Lzio/Ref$;
       4: iconst_0
       5: invokestatic  #151                // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
       8: invokevirtual #154                // Method zio/Ref$.make:(Ljava/lang/Object;)Lzio/ZIO;
      11: aload_0
      12: invokedynamic #222,  0            // InvokeDynamic #9:apply:(Lzio/RetrySpec;)Lscala/Function1;
      17: invokeinterface #123,  2          // InterfaceMethod zio/ZIO.flatMap:(Lscala/Function1;)Lzio/ZIO;
      22: invokedynamic #227,  0            // InvokeDynamic #10:apply:()Lscala/Function1;
      27: invokedynamic #232,  0            // InvokeDynamic #11:apply:()Lscala/Function1;
      32: invokeinterface #191,  3          // InterfaceMethod zio/ZIO.foldM:(Lscala/Function1;Lscala/Function1;)Lzio/ZIO;
      37: invokevirtual #194                // Method ZIOMustExpectable:(Lzio/ZIO;)Lzio/BaseCrossPlatformSpec$ZIOMustExpectable;
      40: invokedynamic #237,  0            // InvokeDynamic #12:apply:()Lscala/Function0;
      45: getstatic     #208                // Field org/specs2/matcher/describe/Diffable$.MODULE$:Lorg/specs2/matcher/describe/Diffable$;
      48: invokevirtual #212                // Method org/specs2/matcher/describe/Diffable$.fallbackDiffable:()Lorg/specs2/matcher/describe/Diffable;
      51: invokevirtual #216                // Method zio/BaseCrossPlatformSpec$ZIOMustExpectable.must_$eq$eq$eq:(Lscala/Function0;Lorg/specs2/matcher/describe/Diffable;)Lzio/ZIO;
      54: areturn

  public zio.ZIO<java.lang.Object, scala.runtime.Nothing$, org.specs2.matcher.MatchResult<scala.Tuple2<scala.util.Either<java.lang.Object, scala.runtime.Nothing$>, scala.collection.immutable.List<scala.Tuple2<zio.duration.Duration, java.lang.Object>>>>> retryN();
    Code:
       0: aload_0
       1: getstatic     #244                // Field zio/IO$.MODULE$:Lzio/IO$;
       4: ldc           #246                // String Error
       6: invokevirtual #249                // Method zio/IO$.fail:(Ljava/lang/Object;)Lzio/ZIO;
       9: getstatic     #254                // Field zio/Schedule$.MODULE$:Lzio/Schedule$;
      12: iconst_5
      13: invokevirtual #258                // Method zio/Schedule$.recurs:(I)Lzio/ZSchedule;
      16: invokevirtual #260                // Method retryCollect:(Lzio/ZIO;Lzio/ZSchedule;)Lzio/ZIO;
      19: astore_1
      20: new           #262                // class scala/Tuple2
      23: dup
      24: getstatic     #267                // Field scala/package$.MODULE$:Lscala/package$;
      27: invokevirtual #271                // Method scala/package$.Left:()Lscala/util/Left$;
      30: ldc           #246                // String Error
      32: invokevirtual #276                // Method scala/util/Left$.apply:(Ljava/lang/Object;)Lscala/util/Left;
      35: getstatic     #281                // Field scala/collection/immutable/List$.MODULE$:Lscala/collection/immutable/List$;
      38: getstatic     #286                // Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
      41: bipush        6
      43: newarray       int
      45: dup
      46: iconst_0
      47: iconst_1
      48: iastore
      49: dup
      50: iconst_1
      51: iconst_2
      52: iastore
      53: dup
      54: iconst_2
      55: iconst_3
      56: iastore
      57: dup
      58: iconst_3
      59: iconst_4
      60: iastore
      61: dup
      62: iconst_4
      63: iconst_5
      64: iastore
      65: dup
      66: iconst_5
      67: bipush        6
      69: iastore
      70: invokevirtual #290                // Method scala/runtime/ScalaRunTime$.wrapIntArray:([I)Lscala/collection/immutable/ArraySeq;
      73: invokevirtual #293                // Method scala/collection/immutable/List$.apply:(Lscala/collection/immutable/Seq;)Ljava/lang/Object;
      76: checkcast     #295                // class scala/collection/immutable/List
      79: invokedynamic #302,  0            // InvokeDynamic #13:apply:()Lscala/Function1;
      84: invokevirtual #305                // Method scala/collection/immutable/List.map:(Lscala/Function1;)Lscala/collection/immutable/List;
      87: invokespecial #309                // Method scala/Tuple2."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
      90: astore_2
      91: aload_0
      92: aload_1
      93: invokevirtual #194                // Method ZIOMustExpectable:(Lzio/ZIO;)Lzio/BaseCrossPlatformSpec$ZIOMustExpectable;
      96: aload_2
      97: invokedynamic #318,  0            // InvokeDynamic #14:apply:(Lscala/Tuple2;)Lscala/Function0;
     102: getstatic     #208                // Field org/specs2/matcher/describe/Diffable$.MODULE$:Lorg/specs2/matcher/describe/Diffable$;
     105: invokevirtual #212                // Method org/specs2/matcher/describe/Diffable$.fallbackDiffable:()Lorg/specs2/matcher/describe/Diffable;
     108: invokevirtual #216                // Method zio/BaseCrossPlatformSpec$ZIOMustExpectable.must_$eq$eq$eq:(Lscala/Function0;Lorg/specs2/matcher/describe/Diffable;)Lzio/ZIO;
     111: areturn

  public zio.ZIO<java.lang.Object, scala.runtime.Nothing$, org.specs2.matcher.MatchResult<scala.collection.immutable.List<scala.Tuple2<zio.duration.Duration, java.lang.Object>>>> retryNUnitIntervalJittered();
    Code:
       0: getstatic     #254                // Field zio/Schedule$.MODULE$:Lzio/Schedule$;
       3: iconst_5
       4: invokevirtual #258                // Method zio/Schedule$.recurs:(I)Lzio/ZSchedule;
       7: invokedynamic #330,  0            // InvokeDynamic #15:apply:()Lscala/Function1;
      12: invokeinterface #334,  2          // InterfaceMethod zio/ZSchedule.delayed:(Lscala/Function1;)Lzio/ZSchedule;
      17: invokeinterface #338,  1          // InterfaceMethod zio/ZSchedule.jittered:()Lzio/ZSchedule;
      22: getstatic     #281                // Field scala/collection/immutable/List$.MODULE$:Lscala/collection/immutable/List$;
      25: getstatic     #286                // Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
      28: iconst_5
      29: newarray       int
      31: dup
      32: iconst_0
      33: iconst_1
      34: iastore
      35: dup
      36: iconst_1
      37: iconst_2
      38: iastore
      39: dup
      40: iconst_2
      41: iconst_3
      42: iastore
      43: dup
      44: iconst_3
      45: iconst_4
      46: iastore
      47: dup
      48: iconst_4
      49: iconst_5
      50: iastore
      51: invokevirtual #290                // Method scala/runtime/ScalaRunTime$.wrapIntArray:([I)Lscala/collection/immutable/ArraySeq;
      54: invokevirtual #293                // Method scala/collection/immutable/List$.apply:(Lscala/collection/immutable/Seq;)Ljava/lang/Object;
      57: checkcast     #340                // class scala/collection/Iterable
      60: invokeinterface #344,  2          // InterfaceMethod zio/ZSchedule.run:(Lscala/collection/Iterable;)Lzio/ZIO;
      65: aload_0
      66: invokevirtual #346                // Method TestRandom:()Lzio/RetrySpec$TestRandom$;
      69: invokeinterface #349,  2          // InterfaceMethod zio/ZIO.provide:(Ljava/lang/Object;)Lzio/ZIO;
      74: astore_1
      75: getstatic     #281                // Field scala/collection/immutable/List$.MODULE$:Lscala/collection/immutable/List$;
      78: getstatic     #286                // Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
      81: iconst_5
      82: newarray       int
      84: dup
      85: iconst_0
      86: iconst_1
      87: iastore
      88: dup
      89: iconst_1
      90: iconst_2
      91: iastore
      92: dup
      93: iconst_2
      94: iconst_3
      95: iastore
      96: dup
      97: iconst_3
      98: iconst_4
      99: iastore
     100: dup
     101: iconst_4
     102: iconst_5
     103: iastore
     104: invokevirtual #290                // Method scala/runtime/ScalaRunTime$.wrapIntArray:([I)Lscala/collection/immutable/ArraySeq;
     107: invokevirtual #293                // Method scala/collection/immutable/List$.apply:(Lscala/collection/immutable/Seq;)Ljava/lang/Object;
     110: checkcast     #295                // class scala/collection/immutable/List
     113: invokedynamic #354,  0            // InvokeDynamic #16:apply:()Lscala/Function1;
     118: invokevirtual #305                // Method scala/collection/immutable/List.map:(Lscala/Function1;)Lscala/collection/immutable/List;
     121: astore_2
     122: aload_0
     123: aload_1
     124: invokevirtual #194                // Method ZIOMustExpectable:(Lzio/ZIO;)Lzio/BaseCrossPlatformSpec$ZIOMustExpectable;
     127: aload_2
     128: invokedynamic #364,  0            // InvokeDynamic #17:apply:(Lscala/collection/immutable/List;)Lscala/Function0;
     133: getstatic     #208                // Field org/specs2/matcher/describe/Diffable$.MODULE$:Lorg/specs2/matcher/describe/Diffable$;
     136: getstatic     #208                // Field org/specs2/matcher/describe/Diffable$.MODULE$:Lorg/specs2/matcher/describe/Diffable$;
     139: invokevirtual #212                // Method org/specs2/matcher/describe/Diffable$.fallbackDiffable:()Lorg/specs2/matcher/describe/Diffable;
     142: invokevirtual #368                // Method org/specs2/matcher/describe/Diffable$.seqDiffable:(Lorg/specs2/matcher/describe/Diffable;)Lorg/specs2/matcher/describe/Diffable;
     145: invokevirtual #216                // Method zio/BaseCrossPlatformSpec$ZIOMustExpectable.must_$eq$eq$eq:(Lscala/Function0;Lorg/specs2/matcher/describe/Diffable;)Lzio/ZIO;
     148: areturn

  public zio.ZIO<java.lang.Object, scala.runtime.Nothing$, org.specs2.matcher.MatchResult<scala.collection.immutable.List<scala.Tuple2<zio.duration.Duration, java.lang.Object>>>> retryNCustomIntervalJittered();
    Code:
       0: getstatic     #254                // Field zio/Schedule$.MODULE$:Lzio/Schedule$;
       3: iconst_5
       4: invokevirtual #258                // Method zio/Schedule$.recurs:(I)Lzio/ZSchedule;
       7: invokedynamic #376,  0            // InvokeDynamic #18:apply:()Lscala/Function1;
      12: invokeinterface #334,  2          // InterfaceMethod zio/ZSchedule.delayed:(Lscala/Function1;)Lzio/ZSchedule;
      17: ldc2_w        #377                // double 2.0d
      20: ldc2_w        #379                // double 4.0d
      23: invokeinterface #383,  5          // InterfaceMethod zio/ZSchedule.jittered:(DD)Lzio/ZSchedule;
      28: getstatic     #281                // Field scala/collection/immutable/List$.MODULE$:Lscala/collection/immutable/List$;
      31: getstatic     #286                // Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
      34: iconst_5
      35: newarray       int
      37: dup
      38: iconst_0
      39: iconst_1
      40: iastore
      41: dup
      42: iconst_1
      43: iconst_2
      44: iastore
      45: dup
      46: iconst_2
      47: iconst_3
      48: iastore
      49: dup
      50: iconst_3
      51: iconst_4
      52: iastore
      53: dup
      54: iconst_4
      55: iconst_5
      56: iastore
      57: invokevirtual #290                // Method scala/runtime/ScalaRunTime$.wrapIntArray:([I)Lscala/collection/immutable/ArraySeq;
      60: invokevirtual #293                // Method scala/collection/immutable/List$.apply:(Lscala/collection/immutable/Seq;)Ljava/lang/Object;
      63: checkcast     #340                // class scala/collection/Iterable
      66: invokeinterface #344,  2          // InterfaceMethod zio/ZSchedule.run:(Lscala/collection/Iterable;)Lzio/ZIO;
      71: aload_0
      72: invokevirtual #346                // Method TestRandom:()Lzio/RetrySpec$TestRandom$;
      75: invokeinterface #349,  2          // InterfaceMethod zio/ZIO.provide:(Ljava/lang/Object;)Lzio/ZIO;
      80: astore_1
      81: getstatic     #281                // Field scala/collection/immutable/List$.MODULE$:Lscala/collection/immutable/List$;
      84: getstatic     #286                // Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
      87: iconst_5
      88: newarray       int
      90: dup
      91: iconst_0
      92: iconst_1
      93: iastore
      94: dup
      95: iconst_1
      96: iconst_2
      97: iastore
      98: dup
      99: iconst_2
     100: iconst_3
     101: iastore
     102: dup
     103: iconst_3
     104: iconst_4
     105: iastore
     106: dup
     107: iconst_4
     108: iconst_5
     109: iastore
     110: invokevirtual #290                // Method scala/runtime/ScalaRunTime$.wrapIntArray:([I)Lscala/collection/immutable/ArraySeq;
     113: invokevirtual #293                // Method scala/collection/immutable/List$.apply:(Lscala/collection/immutable/Seq;)Ljava/lang/Object;
     116: checkcast     #295                // class scala/collection/immutable/List
     119: invokedynamic #388,  0            // InvokeDynamic #19:apply:()Lscala/Function1;
     124: invokevirtual #305                // Method scala/collection/immutable/List.map:(Lscala/Function1;)Lscala/collection/immutable/List;
     127: astore_2
     128: aload_0
     129: aload_1
     130: invokevirtual #194                // Method ZIOMustExpectable:(Lzio/ZIO;)Lzio/BaseCrossPlatformSpec$ZIOMustExpectable;
     133: aload_2
     134: invokedynamic #393,  0            // InvokeDynamic #20:apply:(Lscala/collection/immutable/List;)Lscala/Function0;
     139: getstatic     #208                // Field org/specs2/matcher/describe/Diffable$.MODULE$:Lorg/specs2/matcher/describe/Diffable$;
     142: getstatic     #208                // Field org/specs2/matcher/describe/Diffable$.MODULE$:Lorg/specs2/matcher/describe/Diffable$;
     145: invokevirtual #212                // Method org/specs2/matcher/describe/Diffable$.fallbackDiffable:()Lorg/specs2/matcher/describe/Diffable;
     148: invokevirtual #368                // Method org/specs2/matcher/describe/Diffable$.seqDiffable:(Lorg/specs2/matcher/describe/Diffable;)Lorg/specs2/matcher/describe/Diffable;
     151: invokevirtual #216                // Method zio/BaseCrossPlatformSpec$ZIOMustExpectable.must_$eq$eq$eq:(Lscala/Function0;Lorg/specs2/matcher/describe/Diffable;)Lzio/ZIO;
     154: areturn

  public zio.ZIO<java.lang.Object, scala.runtime.Nothing$, org.specs2.matcher.MatchResult<scala.Tuple2<scala.util.Either<java.lang.String, scala.runtime.BoxedUnit>, scala.collection.immutable.List<scala.Tuple2<zio.duration.Duration, java.lang.Object>>>>> fixedWithErrorPredicate();
    Code:
       0: iconst_0
       1: invokestatic  #401                // Method scala/runtime/IntRef.create:(I)Lscala/runtime/IntRef;
       4: astore_1
       5: getstatic     #244                // Field zio/IO$.MODULE$:Lzio/IO$;
       8: aload_1
       9: invokedynamic #411,  0            // InvokeDynamic #21:apply$mcV$sp:(Lscala/runtime/IntRef;)Lscala/runtime/java8/JFunction0$mcV$sp;
      14: invokevirtual #415                // Method zio/IO$.effectTotal:(Lscala/Function0;)Lzio/ZIO;
      17: aload_1
      18: invokedynamic #423,  0            // InvokeDynamic #22:apply:(Lscala/runtime/IntRef;)Lscala/Function1;
      23: invokeinterface #123,  2          // InterfaceMethod zio/ZIO.flatMap:(Lscala/Function1;)Lzio/ZIO;
      28: astore_2
      29: getstatic     #254                // Field zio/Schedule$.MODULE$:Lzio/Schedule$;
      32: getstatic     #428                // Field zio/duration/package$.MODULE$:Lzio/duration/package$;
      35: sipush        200
      38: invokevirtual #432                // Method zio/duration/package$.durationInt:(I)Lzio/duration/DurationSyntax;
      41: invokevirtual #438                // Method zio/duration/DurationSyntax.millis:()Lzio/duration/Duration;
      44: invokevirtual #442                // Method zio/Schedule$.spaced:(Lzio/duration/Duration;)Lzio/ZSchedule;
      47: invokedynamic #449,  0            // InvokeDynamic #23:apply:()Lscala/Function1;
      52: invokeinterface #452,  2          // InterfaceMethod zio/ZSchedule.whileInput:(Lscala/Function1;)Lzio/ZSchedule;
      57: astore_3
      58: aload_0
      59: aload_2
      60: aload_3
      61: invokevirtual #260                // Method retryCollect:(Lzio/ZIO;Lzio/ZSchedule;)Lzio/ZIO;
      64: astore        4
      66: new           #262                // class scala/Tuple2
      69: dup
      70: getstatic     #267                // Field scala/package$.MODULE$:Lscala/package$;
      73: invokevirtual #271                // Method scala/package$.Left:()Lscala/util/Left$;
      76: ldc_w         #454                // String GiveUpError
      79: invokevirtual #276                // Method scala/util/Left$.apply:(Ljava/lang/Object;)Lscala/util/Left;
      82: getstatic     #281                // Field scala/collection/immutable/List$.MODULE$:Lscala/collection/immutable/List$;
      85: getstatic     #286                // Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
      88: iconst_5
      89: newarray       int
      91: dup
      92: iconst_0
      93: iconst_1
      94: iastore
      95: dup
      96: iconst_1
      97: iconst_2
      98: iastore
      99: dup
     100: iconst_2
     101: iconst_3
     102: iastore
     103: dup
     104: iconst_3
     105: iconst_4
     106: iastore
     107: dup
     108: iconst_4
     109: iconst_5
     110: iastore
     111: invokevirtual #290                // Method scala/runtime/ScalaRunTime$.wrapIntArray:([I)Lscala/collection/immutable/ArraySeq;
     114: invokevirtual #293                // Method scala/collection/immutable/List$.apply:(Lscala/collection/immutable/Seq;)Ljava/lang/Object;
     117: checkcast     #295                // class scala/collection/immutable/List
     120: invokedynamic #459,  0            // InvokeDynamic #24:apply:()Lscala/Function1;
     125: invokevirtual #305                // Method scala/collection/immutable/List.map:(Lscala/Function1;)Lscala/collection/immutable/List;
     128: invokespecial #309                // Method scala/Tuple2."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
     131: astore        5
     133: aload_0
     134: aload         4
     136: invokevirtual #194                // Method ZIOMustExpectable:(Lzio/ZIO;)Lzio/BaseCrossPlatformSpec$ZIOMustExpectable;
     139: aload         5
     141: invokedynamic #464,  0            // InvokeDynamic #25:apply:(Lscala/Tuple2;)Lscala/Function0;
     146: getstatic     #208                // Field org/specs2/matcher/describe/Diffable$.MODULE$:Lorg/specs2/matcher/describe/Diffable$;
     149: invokevirtual #212                // Method org/specs2/matcher/describe/Diffable$.fallbackDiffable:()Lorg/specs2/matcher/describe/Diffable;
     152: invokevirtual #216                // Method zio/BaseCrossPlatformSpec$ZIOMustExpectable.must_$eq$eq$eq:(Lscala/Function0;Lorg/specs2/matcher/describe/Diffable;)Lzio/ZIO;
     155: areturn

  public zio.ZIO<zio.clock.Clock, java.lang.Object, org.specs2.matcher.MatchResult<java.lang.Object>> recurs10Retry();
    Code:
       0: iconst_0
       1: invokestatic  #401                // Method scala/runtime/IntRef.create:(I)Lscala/runtime/IntRef;
       4: astore_1
       5: getstatic     #254                // Field zio/Schedule$.MODULE$:Lzio/Schedule$;
       8: bipush        10
      10: invokevirtual #258                // Method zio/Schedule$.recurs:(I)Lzio/ZSchedule;
      13: astore_2
      14: getstatic     #244                // Field zio/IO$.MODULE$:Lzio/IO$;
      17: aload_1
      18: invokedynamic #473,  0            // InvokeDynamic #26:apply$mcV$sp:(Lscala/runtime/IntRef;)Lscala/runtime/java8/JFunction0$mcV$sp;
      23: invokevirtual #415                // Method zio/IO$.effectTotal:(Lscala/Function0;)Lzio/ZIO;
      26: aload_1
      27: invokedynamic #478,  0            // InvokeDynamic #27:apply:(Lscala/runtime/IntRef;)Lscala/Function1;
      32: invokeinterface #123,  2          // InterfaceMethod zio/ZIO.flatMap:(Lscala/Function1;)Lzio/ZIO;
      37: astore_3
      38: aload_0
      39: aload_3
      40: aload_2
      41: invokeinterface #481,  2          // InterfaceMethod zio/ZIO.retry:(Lzio/ZSchedule;)Lzio/ZIO;
      46: invokevirtual #194                // Method ZIOMustExpectable:(Lzio/ZIO;)Lzio/BaseCrossPlatformSpec$ZIOMustExpectable;
      49: invokedynamic #491,  0            // InvokeDynamic #28:apply$mcI$sp:()Lscala/runtime/java8/JFunction0$mcI$sp;
      54: getstatic     #208                // Field org/specs2/matcher/describe/Diffable$.MODULE$:Lorg/specs2/matcher/describe/Diffable$;
      57: invokevirtual #494                // Method org/specs2/matcher/describe/Diffable$.intDiffable:()Lorg/specs2/matcher/describe/Diffable;
      60: invokevirtual #216                // Method zio/BaseCrossPlatformSpec$ZIOMustExpectable.must_$eq$eq$eq:(Lscala/Function0;Lorg/specs2/matcher/describe/Diffable;)Lzio/ZIO;
      63: areturn

  public zio.ZIO<java.lang.Object, scala.runtime.Nothing$, org.specs2.matcher.MatchResult<scala.Tuple2<scala.util.Either<java.lang.String, scala.runtime.BoxedUnit>, scala.collection.immutable.List<scala.Tuple2<zio.duration.Duration, zio.duration.Duration>>>>> fibonacci();
    Code:
       0: aload_0
       1: getstatic     #254                // Field zio/Schedule$.MODULE$:Lzio/Schedule$;
       4: getstatic     #428                // Field zio/duration/package$.MODULE$:Lzio/duration/package$;
       7: bipush        100
       9: invokevirtual #432                // Method zio/duration/package$.durationInt:(I)Lzio/duration/DurationSyntax;
      12: invokevirtual #438                // Method zio/duration/DurationSyntax.millis:()Lzio/duration/Duration;
      15: invokevirtual #498                // Method zio/Schedule$.fibonacci:(Lzio/duration/Duration;)Lzio/ZSchedule;
      18: getstatic     #281                // Field scala/collection/immutable/List$.MODULE$:Lscala/collection/immutable/List$;
      21: getstatic     #286                // Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
      24: iconst_5
      25: newarray       int
      27: dup
      28: iconst_0
      29: iconst_1
      30: iastore
      31: dup
      32: iconst_1
      33: iconst_1
      34: iastore
      35: dup
      36: iconst_2
      37: iconst_2
      38: iastore
      39: dup
      40: iconst_3
      41: iconst_3
      42: iastore
      43: dup
      44: iconst_4
      45: iconst_5
      46: iastore
      47: invokevirtual #290                // Method scala/runtime/ScalaRunTime$.wrapIntArray:([I)Lscala/collection/immutable/ArraySeq;
      50: invokevirtual #293                // Method scala/collection/immutable/List$.apply:(Lscala/collection/immutable/Seq;)Ljava/lang/Object;
      53: checkcast     #295                // class scala/collection/immutable/List
      56: invokevirtual #502                // Method checkErrorWithPredicate:(Lzio/ZSchedule;Lscala/collection/immutable/List;)Lzio/ZIO;
      59: areturn

  public zio.ZIO<java.lang.Object, scala.runtime.Nothing$, org.specs2.matcher.MatchResult<scala.Tuple2<scala.util.Either<java.lang.String, scala.runtime.BoxedUnit>, scala.collection.immutable.List<scala.Tuple2<zio.duration.Duration, zio.duration.Duration>>>>> linear();
    Code:
       0: aload_0
       1: getstatic     #254                // Field zio/Schedule$.MODULE$:Lzio/Schedule$;
       4: getstatic     #428                // Field zio/duration/package$.MODULE$:Lzio/duration/package$;
       7: bipush        100
       9: invokevirtual #432                // Method zio/duration/package$.durationInt:(I)Lzio/duration/DurationSyntax;
      12: invokevirtual #438                // Method zio/duration/DurationSyntax.millis:()Lzio/duration/Duration;
      15: invokevirtual #505                // Method zio/Schedule$.linear:(Lzio/duration/Duration;)Lzio/ZSchedule;
      18: getstatic     #281                // Field scala/collection/immutable/List$.MODULE$:Lscala/collection/immutable/List$;
      21: getstatic     #286                // Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
      24: iconst_5
      25: newarray       int
      27: dup
      28: iconst_0
      29: iconst_1
      30: iastore
      31: dup
      32: iconst_1
      33: iconst_2
      34: iastore
      35: dup
      36: iconst_2
      37: iconst_3
      38: iastore
      39: dup
      40: iconst_3
      41: iconst_4
      42: iastore
      43: dup
      44: iconst_4
      45: iconst_5
      46: iastore
      47: invokevirtual #290                // Method scala/runtime/ScalaRunTime$.wrapIntArray:([I)Lscala/collection/immutable/ArraySeq;
      50: invokevirtual #293                // Method scala/collection/immutable/List$.apply:(Lscala/collection/immutable/Seq;)Ljava/lang/Object;
      53: checkcast     #295                // class scala/collection/immutable/List
      56: invokevirtual #502                // Method checkErrorWithPredicate:(Lzio/ZSchedule;Lscala/collection/immutable/List;)Lzio/ZIO;
      59: areturn

  public zio.ZIO<java.lang.Object, scala.runtime.Nothing$, org.specs2.matcher.MatchResult<scala.Tuple2<scala.util.Either<java.lang.String, scala.runtime.BoxedUnit>, scala.collection.immutable.List<scala.Tuple2<zio.duration.Duration, zio.duration.Duration>>>>> exponential();
    Code:
       0: aload_0
       1: getstatic     #254                // Field zio/Schedule$.MODULE$:Lzio/Schedule$;
       4: getstatic     #428                // Field zio/duration/package$.MODULE$:Lzio/duration/package$;
       7: bipush        100
       9: invokevirtual #432                // Method zio/duration/package$.durationInt:(I)Lzio/duration/DurationSyntax;
      12: invokevirtual #438                // Method zio/duration/DurationSyntax.millis:()Lzio/duration/Duration;
      15: getstatic     #254                // Field zio/Schedule$.MODULE$:Lzio/Schedule$;
      18: invokevirtual #510                // Method zio/Schedule$.exponential$default$2:()D
      21: invokevirtual #513                // Method zio/Schedule$.exponential:(Lzio/duration/Duration;D)Lzio/ZSchedule;
      24: getstatic     #281                // Field scala/collection/immutable/List$.MODULE$:Lscala/collection/immutable/List$;
      27: getstatic     #286                // Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
      30: iconst_5
      31: newarray       int
      33: dup
      34: iconst_0
      35: iconst_2
      36: iastore
      37: dup
      38: iconst_1
      39: iconst_4
      40: iastore
      41: dup
      42: iconst_2
      43: bipush        8
      45: iastore
      46: dup
      47: iconst_3
      48: bipush        16
      50: iastore
      51: dup
      52: iconst_4
      53: bipush        32
      55: iastore
      56: invokevirtual #290                // Method scala/runtime/ScalaRunTime$.wrapIntArray:([I)Lscala/collection/immutable/ArraySeq;
      59: invokevirtual #293                // Method scala/collection/immutable/List$.apply:(Lscala/collection/immutable/Seq;)Ljava/lang/Object;
      62: checkcast     #295                // class scala/collection/immutable/List
      65: invokevirtual #502                // Method checkErrorWithPredicate:(Lzio/ZSchedule;Lscala/collection/immutable/List;)Lzio/ZIO;
      68: areturn

  public zio.ZIO<java.lang.Object, scala.runtime.Nothing$, org.specs2.matcher.MatchResult<scala.Tuple2<scala.util.Either<java.lang.String, scala.runtime.BoxedUnit>, scala.collection.immutable.List<scala.Tuple2<zio.duration.Duration, zio.duration.Duration>>>>> exponentialWithFactor();
    Code:
       0: aload_0
       1: getstatic     #254                // Field zio/Schedule$.MODULE$:Lzio/Schedule$;
       4: getstatic     #428                // Field zio/duration/package$.MODULE$:Lzio/duration/package$;
       7: bipush        100
       9: invokevirtual #432                // Method zio/duration/package$.durationInt:(I)Lzio/duration/DurationSyntax;
      12: invokevirtual #438                // Method zio/duration/DurationSyntax.millis:()Lzio/duration/Duration;
      15: ldc2_w        #515                // double 3.0d
      18: invokevirtual #513                // Method zio/Schedule$.exponential:(Lzio/duration/Duration;D)Lzio/ZSchedule;
      21: getstatic     #281                // Field scala/collection/immutable/List$.MODULE$:Lscala/collection/immutable/List$;
      24: getstatic     #286                // Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
      27: iconst_5
      28: newarray       int
      30: dup
      31: iconst_0
      32: iconst_3
      33: iastore
      34: dup
      35: iconst_1
      36: bipush        9
      38: iastore
      39: dup
      40: iconst_2
      41: bipush        27
      43: iastore
      44: dup
      45: iconst_3
      46: bipush        81
      48: iastore
      49: dup
      50: iconst_4
      51: sipush        243
      54: iastore
      55: invokevirtual #290                // Method scala/runtime/ScalaRunTime$.wrapIntArray:([I)Lscala/collection/immutable/ArraySeq;
      58: invokevirtual #293                // Method scala/collection/immutable/List$.apply:(Lscala/collection/immutable/Seq;)Ljava/lang/Object;
      61: checkcast     #295                // class scala/collection/immutable/List
      64: invokevirtual #502                // Method checkErrorWithPredicate:(Lzio/ZSchedule;Lscala/collection/immutable/List;)Lzio/ZIO;
      67: areturn

  public zio.ZIO<java.lang.Object, scala.runtime.Nothing$, org.specs2.matcher.MatchResult<scala.Tuple2<scala.util.Either<java.lang.String, scala.runtime.BoxedUnit>, scala.collection.immutable.List<scala.Tuple2<zio.duration.Duration, zio.duration.Duration>>>>> checkErrorWithPredicate(zio.ZSchedule<java.lang.Object, java.lang.Object, zio.duration.Duration>, scala.collection.immutable.List<java.lang.Object>);
    Code:
       0: iconst_0
       1: invokestatic  #401                // Method scala/runtime/IntRef.create:(I)Lscala/runtime/IntRef;
       4: astore_3
       5: getstatic     #244                // Field zio/IO$.MODULE$:Lzio/IO$;
       8: aload_3
       9: invokedynamic #524,  0            // InvokeDynamic #29:apply$mcV$sp:(Lscala/runtime/IntRef;)Lscala/runtime/java8/JFunction0$mcV$sp;
      14: invokevirtual #415                // Method zio/IO$.effectTotal:(Lscala/Function0;)Lzio/ZIO;
      17: aload_3
      18: invokedynamic #529,  0            // InvokeDynamic #30:apply:(Lscala/runtime/IntRef;)Lscala/Function1;
      23: invokeinterface #123,  2          // InterfaceMethod zio/ZIO.flatMap:(Lscala/Function1;)Lzio/ZIO;
      28: astore        4
      30: aload_1
      31: invokedynamic #534,  0            // InvokeDynamic #31:apply:()Lscala/Function1;
      36: invokeinterface #452,  2          // InterfaceMethod zio/ZSchedule.whileInput:(Lscala/Function1;)Lzio/ZSchedule;
      41: astore        5
      43: new           #262                // class scala/Tuple2
      46: dup
      47: getstatic     #267                // Field scala/package$.MODULE$:Lscala/package$;
      50: invokevirtual #271                // Method scala/package$.Left:()Lscala/util/Left$;
      53: ldc_w         #454                // String GiveUpError
      56: invokevirtual #276                // Method scala/util/Left$.apply:(Ljava/lang/Object;)Lscala/util/Left;
      59: aload_2
      60: invokedynamic #539,  0            // InvokeDynamic #32:apply:()Lscala/Function1;
      65: invokevirtual #305                // Method scala/collection/immutable/List.map:(Lscala/Function1;)Lscala/collection/immutable/List;
      68: invokespecial #309                // Method scala/Tuple2."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
      71: astore        6
      73: aload_0
      74: aload_0
      75: aload         4
      77: aload         5
      79: invokevirtual #260                // Method retryCollect:(Lzio/ZIO;Lzio/ZSchedule;)Lzio/ZIO;
      82: invokevirtual #194                // Method ZIOMustExpectable:(Lzio/ZIO;)Lzio/BaseCrossPlatformSpec$ZIOMustExpectable;
      85: aload         6
      87: invokedynamic #544,  0            // InvokeDynamic #33:apply:(Lscala/Tuple2;)Lscala/Function0;
      92: getstatic     #208                // Field org/specs2/matcher/describe/Diffable$.MODULE$:Lorg/specs2/matcher/describe/Diffable$;
      95: invokevirtual #212                // Method org/specs2/matcher/describe/Diffable$.fallbackDiffable:()Lorg/specs2/matcher/describe/Diffable;
      98: invokevirtual #216                // Method zio/BaseCrossPlatformSpec$ZIOMustExpectable.must_$eq$eq$eq:(Lscala/Function0;Lorg/specs2/matcher/describe/Diffable;)Lzio/ZIO;
     101: areturn

  public scala.Function2<java.lang.String, scala.runtime.BoxedUnit, zio.ZIO<java.lang.Object, scala.runtime.Nothing$, java.lang.String>> ioSucceed();
    Code:
       0: aload_0
       1: getfield      #548                // Field ioSucceed:Lscala/Function2;
       4: areturn

  public scala.Function2<java.lang.String, scala.runtime.BoxedUnit, zio.ZIO<java.lang.Object, java.lang.String, scala.runtime.Nothing$>> ioFail();
    Code:
       0: aload_0
       1: getfield      #551                // Field ioFail:Lscala/Function2;
       4: areturn

  public zio.ZIO<zio.clock.Clock, java.lang.String, org.specs2.matcher.MatchResult<java.lang.Object>> retryOrElseSucceed();
    Code:
       0: getstatic     #145                // Field zio/Ref$.MODULE$:Lzio/Ref$;
       3: iconst_0
       4: invokestatic  #151                // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
       7: invokevirtual #154                // Method zio/Ref$.make:(Ljava/lang/Object;)Lzio/ZIO;
      10: aload_0
      11: invokedynamic #558,  0            // InvokeDynamic #34:apply:(Lzio/RetrySpec;)Lscala/Function1;
      16: invokeinterface #123,  2          // InterfaceMethod zio/ZIO.flatMap:(Lscala/Function1;)Lzio/ZIO;
      21: areturn

  public zio.ZIO<zio.clock.Clock, scala.runtime.Nothing$, org.specs2.matcher.MatchResult<java.lang.Object>> retryOrElseFallbackSucceed();
    Code:
       0: getstatic     #145                // Field zio/Ref$.MODULE$:Lzio/Ref$;
       3: iconst_0
       4: invokestatic  #151                // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
       7: invokevirtual #154                // Method zio/Ref$.make:(Ljava/lang/Object;)Lzio/ZIO;
      10: aload_0
      11: invokedynamic #564,  0            // InvokeDynamic #35:apply:(Lzio/RetrySpec;)Lscala/Function1;
      16: invokeinterface #123,  2          // InterfaceMethod zio/ZIO.flatMap:(Lscala/Function1;)Lzio/ZIO;
      21: areturn

  public zio.ZIO<zio.clock.Clock, scala.runtime.Nothing$, org.specs2.matcher.MatchResult<java.lang.String>> retryOrElseFallbackFailed();
    Code:
       0: aload_0
       1: getstatic     #145                // Field zio/Ref$.MODULE$:Lzio/Ref$;
       4: iconst_0
       5: invokestatic  #151                // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
       8: invokevirtual #154                // Method zio/Ref$.make:(Ljava/lang/Object;)Lzio/ZIO;
      11: aload_0
      12: invokedynamic #571,  0            // InvokeDynamic #36:apply:(Lzio/RetrySpec;)Lscala/Function1;
      17: invokeinterface #123,  2          // InterfaceMethod zio/ZIO.flatMap:(Lscala/Function1;)Lzio/ZIO;
      22: invokedynamic #578,  0            // InvokeDynamic #37:apply:()Lscala/Function1;
      27: invokedynamic #583,  0            // InvokeDynamic #38:apply:()Lscala/Function1;
      32: invokeinterface #191,  3          // InterfaceMethod zio/ZIO.foldM:(Lscala/Function1;Lscala/Function1;)Lzio/ZIO;
      37: invokevirtual #194                // Method ZIOMustExpectable:(Lzio/ZIO;)Lzio/BaseCrossPlatformSpec$ZIOMustExpectable;
      40: invokedynamic #588,  0            // InvokeDynamic #39:apply:()Lscala/Function0;
      45: getstatic     #208                // Field org/specs2/matcher/describe/Diffable$.MODULE$:Lorg/specs2/matcher/describe/Diffable$;
      48: invokevirtual #591                // Method org/specs2/matcher/describe/Diffable$.stringDiffable:()Lorg/specs2/matcher/describe/Diffable;
      51: invokevirtual #216                // Method zio/BaseCrossPlatformSpec$ZIOMustExpectable.must_$eq$eq$eq:(Lscala/Function0;Lorg/specs2/matcher/describe/Diffable;)Lzio/ZIO;
      54: areturn

  public zio.ZIO<zio.clock.Clock, java.lang.String, org.specs2.matcher.MatchResult<scala.util.Either<scala.runtime.Nothing$, java.lang.Object>>> retryOrElseEitherSucceed();
    Code:
       0: getstatic     #145                // Field zio/Ref$.MODULE$:Lzio/Ref$;
       3: iconst_0
       4: invokestatic  #151                // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
       7: invokevirtual #154                // Method zio/Ref$.make:(Ljava/lang/Object;)Lzio/ZIO;
      10: aload_0
      11: invokedynamic #598,  0            // InvokeDynamic #40:apply:(Lzio/RetrySpec;)Lscala/Function1;
      16: invokeinterface #123,  2          // InterfaceMethod zio/ZIO.flatMap:(Lscala/Function1;)Lzio/ZIO;
      21: areturn

  public zio.ZIO<zio.clock.Clock, scala.runtime.Nothing$, org.specs2.matcher.MatchResult<scala.util.Either<java.lang.String, java.lang.Object>>> retryOrElseEitherFallbackSucceed();
    Code:
       0: getstatic     #145                // Field zio/Ref$.MODULE$:Lzio/Ref$;
       3: iconst_0
       4: invokestatic  #151                // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
       7: invokevirtual #154                // Method zio/Ref$.make:(Ljava/lang/Object;)Lzio/ZIO;
      10: aload_0
      11: invokedynamic #605,  0            // InvokeDynamic #41:apply:(Lzio/RetrySpec;)Lscala/Function1;
      16: invokeinterface #123,  2          // InterfaceMethod zio/ZIO.flatMap:(Lscala/Function1;)Lzio/ZIO;
      21: areturn

  public zio.ZIO<zio.clock.Clock, scala.runtime.Nothing$, org.specs2.matcher.MatchResult<java.lang.String>> retryOrElseEitherFallbackFailed();
    Code:
       0: aload_0
       1: getstatic     #145                // Field zio/Ref$.MODULE$:Lzio/Ref$;
       4: iconst_0
       5: invokestatic  #151                // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
       8: invokevirtual #154                // Method zio/Ref$.make:(Ljava/lang/Object;)Lzio/ZIO;
      11: aload_0
      12: invokedynamic #611,  0            // InvokeDynamic #42:apply:(Lzio/RetrySpec;)Lscala/Function1;
      17: invokeinterface #123,  2          // InterfaceMethod zio/ZIO.flatMap:(Lscala/Function1;)Lzio/ZIO;
      22: invokedynamic #616,  0            // InvokeDynamic #43:apply:()Lscala/Function1;
      27: invokedynamic #623,  0            // InvokeDynamic #44:apply:()Lscala/Function1;
      32: invokeinterface #191,  3          // InterfaceMethod zio/ZIO.foldM:(Lscala/Function1;Lscala/Function1;)Lzio/ZIO;
      37: invokevirtual #194                // Method ZIOMustExpectable:(Lzio/ZIO;)Lzio/BaseCrossPlatformSpec$ZIOMustExpectable;
      40: invokedynamic #628,  0            // InvokeDynamic #45:apply:()Lscala/Function0;
      45: getstatic     #208                // Field org/specs2/matcher/describe/Diffable$.MODULE$:Lorg/specs2/matcher/describe/Diffable$;
      48: invokevirtual #591                // Method org/specs2/matcher/describe/Diffable$.stringDiffable:()Lorg/specs2/matcher/describe/Diffable;
      51: invokevirtual #216                // Method zio/BaseCrossPlatformSpec$ZIOMustExpectable.must_$eq$eq$eq:(Lscala/Function0;Lorg/specs2/matcher/describe/Diffable;)Lzio/ZIO;
      54: areturn

  public zio.ZIO<java.lang.Object, java.lang.String, java.lang.Object> failOn0(java.util.concurrent.atomic.AtomicReference<java.lang.Object>);
    Code:
       0: getstatic     #145                // Field zio/Ref$.MODULE$:Lzio/Ref$;
       3: aload_1
       4: invokedynamic #642,  0            // InvokeDynamic #46:apply$mcII$sp:()Lscala/runtime/java8/JFunction1$mcII$sp;
       9: invokevirtual #646                // Method zio/Ref$.update$extension:(Ljava/util/concurrent/atomic/AtomicReference;Lscala/Function1;)Lzio/ZIO;
      12: invokedynamic #651,  0            // InvokeDynamic #47:apply:()Lscala/Function1;
      17: invokeinterface #123,  2          // InterfaceMethod zio/ZIO.flatMap:(Lscala/Function1;)Lzio/ZIO;
      22: areturn

  public zio.ZIO<java.lang.Object, java.lang.String, java.lang.Object> alwaysFail(java.util.concurrent.atomic.AtomicReference<java.lang.Object>);
    Code:
       0: getstatic     #145                // Field zio/Ref$.MODULE$:Lzio/Ref$;
       3: aload_1
       4: invokedynamic #658,  0            // InvokeDynamic #48:apply$mcII$sp:()Lscala/runtime/java8/JFunction1$mcII$sp;
       9: invokevirtual #646                // Method zio/Ref$.update$extension:(Ljava/util/concurrent/atomic/AtomicReference;Lscala/Function1;)Lzio/ZIO;
      12: invokedynamic #663,  0            // InvokeDynamic #49:apply:()Lscala/Function1;
      17: invokeinterface #123,  2          // InterfaceMethod zio/ZIO.flatMap:(Lscala/Function1;)Lzio/ZIO;
      22: areturn

  public zio.ZIO<zio.clock.Clock, scala.runtime.Nothing$, org.specs2.matcher.MatchResult<java.lang.Object>> ensuring();
    Code:
       0: getstatic     #669                // Field zio/Promise$.MODULE$:Lzio/Promise$;
       3: invokevirtual #671                // Method zio/Promise$.make:()Lzio/ZIO;
       6: aload_0
       7: invokedynamic #676,  0            // InvokeDynamic #50:apply:(Lzio/RetrySpec;)Lscala/Function1;
      12: invokeinterface #123,  2          // InterfaceMethod zio/ZIO.flatMap:(Lscala/Function1;)Lzio/ZIO;
      17: areturn

  private final void TestRandom$lzycompute$1();
    Code:
       0: aload_0
       1: monitorenter
       2: aload_0
       3: getfield      #50                 // Field TestRandom$module:Lzio/RetrySpec$TestRandom$;
       6: ifnonnull     21
       9: aload_0
      10: new           #33                 // class zio/RetrySpec$TestRandom$
      13: dup
      14: aload_0
      15: invokespecial #679                // Method zio/RetrySpec$TestRandom$."<init>":(Lzio/RetrySpec;)V
      18: putfield      #50                 // Field TestRandom$module:Lzio/RetrySpec$TestRandom$;
      21: aload_0
      22: monitorexit
      23: return
      24: aload_0
      25: monitorexit
      26: athrow
    Exception table:
       from    to  target type
           2    21    24   any

  public static final zio.ZIO $anonfun$is$2(zio.RetrySpec);
    Code:
       0: aload_0
       1: invokevirtual #686                // Method notRetryOnSuccess:()Lzio/ZIO;
       4: areturn

  public static final zio.ZIO $anonfun$is$3(zio.RetrySpec);
    Code:
       0: aload_0
       1: invokevirtual #689                // Method retryRecurs0:()Lzio/ZIO;
       4: areturn

  public static final zio.ZIO $anonfun$is$4(zio.RetrySpec);
    Code:
       0: aload_0
       1: invokevirtual #692                // Method retryOnceSuccess:()Lzio/ZIO;
       4: areturn

  public static final zio.ZIO $anonfun$is$5(zio.RetrySpec);
    Code:
       0: aload_0
       1: invokevirtual #695                // Method retryOnceFail:()Lzio/ZIO;
       4: areturn

  public static final zio.ZIO $anonfun$is$6(zio.RetrySpec);
    Code:
       0: aload_0
       1: invokevirtual #698                // Method retryN:()Lzio/ZIO;
       4: areturn

  public static final zio.ZIO $anonfun$is$7(zio.RetrySpec);
    Code:
       0: aload_0
       1: invokevirtual #701                // Method retryNUnitIntervalJittered:()Lzio/ZIO;
       4: areturn

  public static final zio.ZIO $anonfun$is$8(zio.RetrySpec);
    Code:
       0: aload_0
       1: invokevirtual #704                // Method retryNCustomIntervalJittered:()Lzio/ZIO;
       4: areturn

  public static final zio.ZIO $anonfun$is$9(zio.RetrySpec);
    Code:
       0: aload_0
       1: invokevirtual #707                // Method fixedWithErrorPredicate:()Lzio/ZIO;
       4: areturn

  public static final zio.ZIO $anonfun$is$10(zio.RetrySpec);
    Code:
       0: aload_0
       1: invokevirtual #710                // Method fibonacci:()Lzio/ZIO;
       4: areturn

  public static final zio.ZIO $anonfun$is$11(zio.RetrySpec);
    Code:
       0: aload_0
       1: invokevirtual #713                // Method linear:()Lzio/ZIO;
       4: areturn

  public static final zio.ZIO $anonfun$is$12(zio.RetrySpec);
    Code:
       0: aload_0
       1: invokevirtual #716                // Method exponential:()Lzio/ZIO;
       4: areturn

  public static final zio.ZIO $anonfun$is$13(zio.RetrySpec);
    Code:
       0: aload_0
       1: invokevirtual #719                // Method exponentialWithFactor:()Lzio/ZIO;
       4: areturn

  public static final zio.ZIO $anonfun$is$14(zio.RetrySpec);
    Code:
       0: aload_0
       1: invokevirtual #722                // Method recurs10Retry:()Lzio/ZIO;
       4: areturn

  public static final zio.ZIO $anonfun$is$15(zio.RetrySpec);
    Code:
       0: aload_0
       1: invokevirtual #725                // Method retryOrElseFallbackSucceed:()Lzio/ZIO;
       4: areturn

  public static final zio.ZIO $anonfun$is$16(zio.RetrySpec);
    Code:
       0: aload_0
       1: invokevirtual #728                // Method retryOrElseFallbackFailed:()Lzio/ZIO;
       4: areturn

  public static final zio.ZIO $anonfun$is$17(zio.RetrySpec);
    Code:
       0: aload_0
       1: invokevirtual #731                // Method retryOrElseEitherFallbackSucceed:()Lzio/ZIO;
       4: areturn

  public static final zio.ZIO $anonfun$is$18(zio.RetrySpec);
    Code:
       0: aload_0
       1: invokevirtual #734                // Method retryOrElseEitherFallbackFailed:()Lzio/ZIO;
       4: areturn

  public static final zio.ZIO $anonfun$is$19(zio.RetrySpec);
    Code:
       0: aload_0
       1: invokevirtual #737                // Method retryOrElseSucceed:()Lzio/ZIO;
       4: areturn

  public static final zio.ZIO $anonfun$is$20(zio.RetrySpec);
    Code:
       0: aload_0
       1: invokevirtual #740                // Method retryOrElseEitherSucceed:()Lzio/ZIO;
       4: areturn

  public static final zio.ZIO $anonfun$is$21(zio.RetrySpec);
    Code:
       0: aload_0
       1: invokevirtual #743                // Method ensuring:()Lzio/ZIO;
       4: areturn

  public static final org.specs2.specification.core.Fragments $anonfun$is$1(zio.RetrySpec);
    Code:
       0: aload_0
       1: ldc_w         #745                // String \n   Retry on failure according to a provided strategy\n      retry 0 time for `once` when first time succeeds $notRetryOnSuccess\n      retry 0 time for `recurs(0)` $retryRecurs0\n      retry exactly one time for `once` when second time succeeds $retryOnceSuccess\n      retry exactly one time for `once` even if still in error $retryOnceFail\n      for a given number of times $retryN\n      for a given number of times with random jitter in (0, 1) $retryNUnitIntervalJittered\n      for a given number of times with random jitter in custom interval $retryNCustomIntervalJittered\n      fixed delay with error predicate $fixedWithErrorPredicate\n      fibonacci delay $fibonacci\n      linear delay $linear\n      exponential delay with default factor $exponential\n      exponential delay with other factor $exponentialWithFactor\n  Retry according to a provided strategy\n    for up to 10 times $recurs10Retry\n  Return the result of the fallback after failing and no more retries left\n    if fallback succeed - retryOrElse $retryOrElseFallbackSucceed\n    if fallback failed - retryOrElse $retryOrElseFallbackFailed\n    if fallback succeed - retryOrElseEither $retryOrElseEitherFallbackSucceed\n    if fallback failed - retryOrElseEither $retryOrElseEitherFallbackFailed\n  Return the result after successful retry\n     retry exactly one time for `once` when second time succeeds - retryOrElse $retryOrElseSucceed\n     retry exactly one time for `once` when second time succeeds - retryOrElse0 $retryOrElseEitherSucceed\n  Retry a failed action 2 times and call `ensuring` should\n     run the specified finalizer as soon as the schedule is complete $ensuring\n  \"\"\"\n\n  def retryCollect[R, E, A, E1 >: E, S](\n    io: IO[E, A],\n    retry: ZSchedule[R, E1, S]\n  ): ZIO[R, Nothing, (Either[E1, A], List[(Duration, S)])] = {\n\n    type State = retry.State\n\n    def loop(state: State, ss: List[(Duration, S)]): ZIO[R, Nothing, (Either[E1, A], List[(Duration, S)])] =\n      io.foldM(\n        err =>\n          retry\n            .update(err, state)\n            .flatMap(\n              step =>\n                if (!step.cont) IO.succeed((Left(err), (step.delay, step.finish()) :: ss))\n                else loop(step.state, (step.delay, step.finish()) :: ss)\n            ),\n        suc => IO.succeed((Right(suc), ss))\n      )\n\n    retry.initial.flatMap(s => loop(s, Nil)).map(x => (x._1, x._2.reverse))\n  }\n\n  /*\n   * Retry `once` means that we try to exec `io`, get and error,\n   * try again to exec `io`, and whatever the output is, we return that\n   * second result.\n   * The three following tests test retry when:\n   * - the first time succeeds (no retry)\n   * - the first time fails and the second succeeds (one retry, result success)\n   * - both first time and retry fail (one retry, result failure)\n   */\n\n  // no retry on success\n  def notRetryOnSuccess =\n    for {\n      ref <- Ref.make(0)\n      _   <- ref.update(_ + 1).retry(Schedule.once)\n      i   <- ref.get\n    } yield i must_=== 1\n\n  // one retry on failure\n  def retryOnceSuccess =\n    for {\n      ref <- Ref.make(0)\n      _   <- failOn0(ref).retry(Schedule.once)\n      r   <- ref.get\n    } yield r must_=== 2\n\n  // no more than one retry on retry `once`\n  def retryOnceFail =\n    (for {\n      ref <- Ref.make(0)\n      _   <- alwaysFail(ref).retry(Schedule.once)\n    } yield ()).foldM(\n      err => IO.succeed(err),\n      _ => IO.succeed(\"A failure was expected\")\n    ) must_=== \"Error: 2\"\n\n  // 0 retry means \"one execution in all, no retry, whatever the output\"\n  def retryRecurs0 =\n    (for {\n      ref <- Ref.make(0)\n      i   <- alwaysFail(ref).retry(Schedule.recurs(0))\n    } yield i)\n      .foldM(\n        err => IO.succeed(err),\n        _ => IO.succeed(\"it should not be a success\")\n      ) must_=== \"Error: 1\"\n\n  def retryN = {\n    val retried  = retryCollect(IO.fail(\"Error\"), Schedule.recurs(5))\n    val expected = (Left(\"Error\"), List(1, 2, 3, 4, 5, 6).map((Duration.Zero, _)))\n    retried must_=== expected\n  }\n\n  def retryNUnitIntervalJittered = {\n    val schedule: ZSchedule[Random, Int, Int] = Schedule.recurs(5).delayed(_ => 500.millis).jittered\n    val scheduled: UIO[List[(Duration, Int)]] = schedule.run(List(1, 2, 3, 4, 5)).provide(TestRandom)\n\n    val expected = List(1, 2, 3, 4, 5).map((250.millis, _))\n    scheduled must_=== expected\n  }\n\n  def retryNCustomIntervalJittered = {\n    val schedule: ZSchedule[Random, Int, Int] = Schedule.recurs(5).delayed(_ => 500.millis).jittered(2, 4)\n    val scheduled: UIO[List[(Duration, Int)]] = schedule.run(List(1, 2, 3, 4, 5)).provide(TestRandom)\n\n    val expected = List(1, 2, 3, 4, 5).map((1500.millis, _))\n    scheduled must_=== expected\n  }\n\n  def fixedWithErrorPredicate = {\n    var i = 0\n    val io = IO.effectTotal[Unit](i += 1).flatMap[Any, String, Unit] { _ =>\n      if (i < 5) IO.fail(\"KeepTryingError\") else IO.fail(\"GiveUpError\")\n    }\n    val strategy = Schedule.spaced(200.millis).whileInput[String](_ == \"KeepTryingError\")\n    val retried  = retryCollect(io, strategy)\n    val expected = (Left(\"GiveUpError\"), List(1, 2, 3, 4, 5).map((200.millis, _)))\n    retried must_=== expected\n  }\n\n  def recurs10Retry = {\n    var i                            = 0\n    val strategy: Schedule[Any, Int] = Schedule.recurs(10)\n    val io = IO.effectTotal[Unit](i += 1).flatMap { _ =>\n      if (i < 5) IO.fail(\"KeepTryingError\") else IO.succeedLazy(i)\n    }\n    io.retry(strategy) must_=== 5\n  }\n\n  def fibonacci =\n    checkErrorWithPredicate(Schedule.fibonacci(100.millis), List(1, 1, 2, 3, 5))\n\n  def linear =\n    checkErrorWithPredicate(Schedule.linear(100.millis), List(1, 2, 3, 4, 5))\n\n  def exponential =\n    checkErrorWithPredicate(Schedule.exponential(100.millis), List(2, 4, 8, 16, 32))\n\n  def exponentialWithFactor =\n    checkErrorWithPredicate(Schedule.exponential(100.millis, 3.0), List(3, 9, 27, 81, 243))\n\n  def checkErrorWithPredicate(schedule: Schedule[Any, Duration], expectedSteps: List[Int]) = {\n    var i = 0\n    val io = IO.effectTotal[Unit](i += 1).flatMap[Any, String, Unit] { _ =>\n      if (i < 5) IO.fail(\"KeepTryingError\") else IO.fail(\"GiveUpError\")\n    }\n    val strategy = schedule.whileInput[String](_ == \"KeepTryingError\")\n    val expected = (Left(\"GiveUpError\"), expectedSteps.map(i => ((i * 100).millis, (i * 100).millis)))\n    retryCollect(io, strategy) must_=== expected\n  }\n\n  val ioSucceed = (_: String, _: Unit) => IO.succeed(\"OrElse\")\n\n  val ioFail = (_: String, _: Unit) => IO.fail(\"OrElseFailed\")\n\n  def retryOrElseSucceed =\n    for {\n      ref <- Ref.make(0)\n      o   <- failOn0(ref).retryOrElse(Schedule.once, ioFail)\n    } yield o must_=== 2\n\n  def retryOrElseFallbackSucceed =\n    for {\n      ref <- Ref.make(0)\n      o   <- alwaysFail(ref).retryOrElse(Schedule.once, ioSucceed)\n    } yield o must_=== \"OrElse\"\n\n  def retryOrElseFallbackFailed =\n    (for {\n      ref <- Ref.make(0)\n      i   <- alwaysFail(ref).retryOrElse(Schedule.once, ioFail)\n    } yield i)\n      .foldM(\n        err => IO.succeed(err),\n        _ => IO.succeed(\"it should not be a success\")\n      ) must_=== \"OrElseFailed\"\n\n  def retryOrElseEitherSucceed =\n    for {\n      ref <- Ref.make(0)\n      o   <- failOn0(ref).retryOrElseEither(Schedule.once, ioFail)\n    } yield o must beRight(2)\n\n  def retryOrElseEitherFallbackSucceed =\n    for {\n      ref <- Ref.make(0)\n      o   <- alwaysFail(ref).retryOrElseEither(Schedule.once, ioSucceed)\n    } yield o must beLeft(\"OrElse\")\n\n  def retryOrElseEitherFallbackFailed =\n    (for {\n      ref <- Ref.make(0)\n      i   <- alwaysFail(ref).retryOrElseEither(Schedule.once, ioFail)\n    } yield i)\n      .foldM(\n        err => IO.succeed(err),\n        _ => IO.succeed(\"it should not be a success\")\n      ) must_=== \"OrElseFailed\"\n\n  /*\n   * A function that increments ref each time it is called.\n   * It returns either a failure if ref value is 0 or less\n   * before increment, and the value in other cases.\n   */\n  def failOn0(ref: Ref[Int]): IO[String, Int] =\n    for {\n      i <- ref.update(_ + 1)\n      x <- if (i <= 1) IO.fail(s\"Error: $i\") else IO.succeed(i)\n    } yield x\n\n  /*\n   * A function that increments ref each time it is called.\n   * It always fails, with the incremented value in error\n   */\n  def alwaysFail(ref: Ref[Int]): IO[String, Int] =\n    for {\n      i <- ref.update(_ + 1)\n      x <- IO.fail(s\"Error: $i\")\n    } yield x\n\n  def ensuring =\n    for {\n      p          <- Promise.make[Nothing, Unit]\n      v          <- IO.fail(\"oh no\").retry(Schedule.recurs(2)).ensuring(p.succeed(())).option\n      finalizerV <- p.poll\n    } yield (v must beNone) and (finalizerV.isDefined must beTrue)\n\n  object TestRandom extends Random {\n    object random extends Random.Service[Any] {\n      val nextBoolean: UIO[Boolean] = UIO.succeed(false)\n      def nextBytes(length: Int): UIO[Chunk[Byte]] =\n        UIO.succeed(Chunk.empty)\n      val nextDouble: UIO[Double] =\n        UIO.succeed(0.5)\n      val nextFloat: UIO[Float] =\n        UIO.succeed(0.5f)\n      val nextGaussian: UIO[Double] =\n        UIO.succeed(0.5)\n      def nextInt(n: Int): UIO[Int] =\n        UIO.succeed(n - 1)\n      val nextInt: UIO[Int] =\n        UIO.succeed(0)\n      val nextLong: UIO[Long] =\n        UIO.succeed(0L)\n      val nextPrintableChar: UIO[Char] =\n        UIO.succeed(\'A\')\n      def nextString(length: Int): UIO[String] =\n        UIO.succeed(\"\")\n    }\n  }\n}
       4: iconst_1
       5: getstatic     #281                // Field scala/collection/immutable/List$.MODULE$:Lscala/collection/immutable/List$;
       8: getstatic     #286                // Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
      11: bipush        21
      13: anewarray     #747                // class java/lang/String
      16: dup
      17: iconst_0
      18: ldc_w         #749                // String \n   Retry on failure according to a provided strategy\n      retry 0 time for `once` when first time succeeds
      21: aastore
      22: dup
      23: iconst_1
      24: ldc_w         #751                // String \n      retry 0 time for `recurs(0)`
      27: aastore
      28: dup
      29: iconst_2
      30: ldc_w         #753                // String \n      retry exactly one time for `once` when second time succeeds
      33: aastore
      34: dup
      35: iconst_3
      36: ldc_w         #755                // String \n      retry exactly one time for `once` even if still in error
      39: aastore
      40: dup
      41: iconst_4
      42: ldc_w         #757                // String \n      for a given number of times
      45: aastore
      46: dup
      47: iconst_5
      48: ldc_w         #759                // String \n      for a given number of times with random jitter in (0, 1)
      51: aastore
      52: dup
      53: bipush        6
      55: ldc_w         #761                // String \n      for a given number of times with random jitter in custom interval
      58: aastore
      59: dup
      60: bipush        7
      62: ldc_w         #763                // String \n      fixed delay with error predicate
      65: aastore
      66: dup
      67: bipush        8
      69: ldc_w         #765                // String \n      fibonacci delay
      72: aastore
      73: dup
      74: bipush        9
      76: ldc_w         #767                // String \n      linear delay
      79: aastore
      80: dup
      81: bipush        10
      83: ldc_w         #769                // String \n      exponential delay with default factor
      86: aastore
      87: dup
      88: bipush        11
      90: ldc_w         #771                // String \n      exponential delay with other factor
      93: aastore
      94: dup
      95: bipush        12
      97: ldc_w         #773                // String \n  Retry according to a provided strategy\n    for up to 10 times
     100: aastore
     101: dup
     102: bipush        13
     104: ldc_w         #775                // String \n  Return the result of the fallback after failing and no more retries left\n    if fallback succeed - retryOrElse
     107: aastore
     108: dup
     109: bipush        14
     111: ldc_w         #777                // String \n    if fallback failed - retryOrElse
     114: aastore
     115: dup
     116: bipush        15
     118: ldc_w         #779                // String \n    if fallback succeed - retryOrElseEither
     121: aastore
     122: dup
     123: bipush        16
     125: ldc_w         #781                // String \n    if fallback failed - retryOrElseEither
     128: aastore
     129: dup
     130: bipush        17
     132: ldc_w         #783                // String \n  Return the result after successful retry\n     retry exactly one time for `once` when second time succeeds - retryOrElse
     135: aastore
     136: dup
     137: bipush        18
     139: ldc_w         #785                // String \n     retry exactly one time for `once` when second time succeeds - retryOrElse0
     142: aastore
     143: dup
     144: bipush        19
     146: ldc_w         #787                // String \n  Retry a failed action 2 times and call `ensuring` should\n     run the specified finalizer as soon as the schedule is complete
     149: aastore
     150: dup
     151: bipush        20
     153: ldc_w         #789                // String \n
     156: aastore
     157: invokevirtual #793                // Method scala/runtime/ScalaRunTime$.wrapRefArray:([Ljava/lang/Object;)Lscala/collection/immutable/ArraySeq;
     160: invokevirtual #293                // Method scala/collection/immutable/List$.apply:(Lscala/collection/immutable/Seq;)Ljava/lang/Object;
     163: checkcast     #795                // class scala/collection/immutable/Seq
     166: getstatic     #281                // Field scala/collection/immutable/List$.MODULE$:Lscala/collection/immutable/List$;
     169: getstatic     #286                // Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
     172: bipush        21
     174: anewarray     #747                // class java/lang/String
     177: dup
     178: iconst_0
     179: ldc_w         #797                // String /home/circleci/project/core/shared/src/test/scala/zio/RetrySpec.scala|RetrySpec.scala|7
     182: aastore
     183: dup
     184: iconst_1
     185: ldc_w         #799                // String /home/circleci/project/core/shared/src/test/scala/zio/RetrySpec.scala|RetrySpec.scala|9
     188: aastore
     189: dup
     190: iconst_2
     191: ldc_w         #801                // String /home/circleci/project/core/shared/src/test/scala/zio/RetrySpec.scala|RetrySpec.scala|10
     194: aastore
     195: dup
     196: iconst_3
     197: ldc_w         #803                // String /home/circleci/project/core/shared/src/test/scala/zio/RetrySpec.scala|RetrySpec.scala|11
     200: aastore
     201: dup
     202: iconst_4
     203: ldc_w         #805                // String /home/circleci/project/core/shared/src/test/scala/zio/RetrySpec.scala|RetrySpec.scala|12
     206: aastore
     207: dup
     208: iconst_5
     209: ldc_w         #807                // String /home/circleci/project/core/shared/src/test/scala/zio/RetrySpec.scala|RetrySpec.scala|13
     212: aastore
     213: dup
     214: bipush        6
     216: ldc_w         #809                // String /home/circleci/project/core/shared/src/test/scala/zio/RetrySpec.scala|RetrySpec.scala|14
     219: aastore
     220: dup
     221: bipush        7
     223: ldc_w         #811                // String /home/circleci/project/core/shared/src/test/scala/zio/RetrySpec.scala|RetrySpec.scala|15
     226: aastore
     227: dup
     228: bipush        8
     230: ldc_w         #813                // String /home/circleci/project/core/shared/src/test/scala/zio/RetrySpec.scala|RetrySpec.scala|16
     233: aastore
     234: dup
     235: bipush        9
     237: ldc_w         #815                // String /home/circleci/project/core/shared/src/test/scala/zio/RetrySpec.scala|RetrySpec.scala|17
     240: aastore
     241: dup
     242: bipush        10
     244: ldc_w         #817                // String /home/circleci/project/core/shared/src/test/scala/zio/RetrySpec.scala|RetrySpec.scala|18
     247: aastore
     248: dup
     249: bipush        11
     251: ldc_w         #819                // String /home/circleci/project/core/shared/src/test/scala/zio/RetrySpec.scala|RetrySpec.scala|19
     254: aastore
     255: dup
     256: bipush        12
     258: ldc_w         #821                // String /home/circleci/project/core/shared/src/test/scala/zio/RetrySpec.scala|RetrySpec.scala|20
     261: aastore
     262: dup
     263: bipush        13
     265: ldc_w         #823                // String /home/circleci/project/core/shared/src/test/scala/zio/RetrySpec.scala|RetrySpec.scala|22
     268: aastore
     269: dup
     270: bipush        14
     272: ldc_w         #825                // String /home/circleci/project/core/shared/src/test/scala/zio/RetrySpec.scala|RetrySpec.scala|24
     275: aastore
     276: dup
     277: bipush        15
     279: ldc_w         #827                // String /home/circleci/project/core/shared/src/test/scala/zio/RetrySpec.scala|RetrySpec.scala|25
     282: aastore
     283: dup
     284: bipush        16
     286: ldc_w         #829                // String /home/circleci/project/core/shared/src/test/scala/zio/RetrySpec.scala|RetrySpec.scala|26
     289: aastore
     290: dup
     291: bipush        17
     293: ldc_w         #831                // String /home/circleci/project/core/shared/src/test/scala/zio/RetrySpec.scala|RetrySpec.scala|27
     296: aastore
     297: dup
     298: bipush        18
     300: ldc_w         #833                // String /home/circleci/project/core/shared/src/test/scala/zio/RetrySpec.scala|RetrySpec.scala|29
     303: aastore
     304: dup
     305: bipush        19
     307: ldc_w         #835                // String /home/circleci/project/core/shared/src/test/scala/zio/RetrySpec.scala|RetrySpec.scala|30
     310: aastore
     311: dup
     312: bipush        20
     314: ldc_w         #837                // String /home/circleci/project/core/shared/src/test/scala/zio/RetrySpec.scala|RetrySpec.scala|32
     317: aastore
     318: invokevirtual #793                // Method scala/runtime/ScalaRunTime$.wrapRefArray:([Ljava/lang/Object;)Lscala/collection/immutable/ArraySeq;
     321: invokevirtual #293                // Method scala/collection/immutable/List$.apply:(Lscala/collection/immutable/Seq;)Ljava/lang/Object;
     324: checkcast     #795                // class scala/collection/immutable/Seq
     327: getstatic     #281                // Field scala/collection/immutable/List$.MODULE$:Lscala/collection/immutable/List$;
     330: getstatic     #286                // Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
     333: bipush        21
     335: anewarray     #747                // class java/lang/String
     338: dup
     339: iconst_0
     340: ldc_w         #799                // String /home/circleci/project/core/shared/src/test/scala/zio/RetrySpec.scala|RetrySpec.scala|9
     343: aastore
     344: dup
     345: iconst_1
     346: ldc_w         #801                // String /home/circleci/project/core/shared/src/test/scala/zio/RetrySpec.scala|RetrySpec.scala|10
     349: aastore
     350: dup
     351: iconst_2
     352: ldc_w         #803                // String /home/circleci/project/core/shared/src/test/scala/zio/RetrySpec.scala|RetrySpec.scala|11
     355: aastore
     356: dup
     357: iconst_3
     358: ldc_w         #805                // String /home/circleci/project/core/shared/src/test/scala/zio/RetrySpec.scala|RetrySpec.scala|12
     361: aastore
     362: dup
     363: iconst_4
     364: ldc_w         #807                // String /home/circleci/project/core/shared/src/test/scala/zio/RetrySpec.scala|RetrySpec.scala|13
     367: aastore
     368: dup
     369: iconst_5
     370: ldc_w         #809                // String /home/circleci/project/core/shared/src/test/scala/zio/RetrySpec.scala|RetrySpec.scala|14
     373: aastore
     374: dup
     375: bipush        6
     377: ldc_w         #811                // String /home/circleci/project/core/shared/src/test/scala/zio/RetrySpec.scala|RetrySpec.scala|15
     380: aastore
     381: dup
     382: bipush        7
     384: ldc_w         #813                // String /home/circleci/project/core/shared/src/test/scala/zio/RetrySpec.scala|RetrySpec.scala|16
     387: aastore
     388: dup
     389: bipush        8
     391: ldc_w         #815                // String /home/circleci/project/core/shared/src/test/scala/zio/RetrySpec.scala|RetrySpec.scala|17
     394: aastore
     395: dup
     396: bipush        9
     398: ldc_w         #817                // String /home/circleci/project/core/shared/src/test/scala/zio/RetrySpec.scala|RetrySpec.scala|18
     401: aastore
     402: dup
     403: bipush        10
     405: ldc_w         #819                // String /home/circleci/project/core/shared/src/test/scala/zio/RetrySpec.scala|RetrySpec.scala|19
     408: aastore
     409: dup
     410: bipush        11
     412: ldc_w         #821                // String /home/circleci/project/core/shared/src/test/scala/zio/RetrySpec.scala|RetrySpec.scala|20
     415: aastore
     416: dup
     417: bipush        12
     419: ldc_w         #823                // String /home/circleci/project/core/shared/src/test/scala/zio/RetrySpec.scala|RetrySpec.scala|22
     422: aastore
     423: dup
     424: bipush        13
     426: ldc_w         #825                // String /home/circleci/project/core/shared/src/test/scala/zio/RetrySpec.scala|RetrySpec.scala|24
     429: aastore
     430: dup
     431: bipush        14
     433: ldc_w         #827                // String /home/circleci/project/core/shared/src/test/scala/zio/RetrySpec.scala|RetrySpec.scala|25
     436: aastore
     437: dup
     438: bipush        15
     440: ldc_w         #829                // String /home/circleci/project/core/shared/src/test/scala/zio/RetrySpec.scala|RetrySpec.scala|26
     443: aastore
     444: dup
     445: bipush        16
     447: ldc_w         #831                // String /home/circleci/project/core/shared/src/test/scala/zio/RetrySpec.scala|RetrySpec.scala|27
     450: aastore
     451: dup
     452: bipush        17
     454: ldc_w         #833                // String /home/circleci/project/core/shared/src/test/scala/zio/RetrySpec.scala|RetrySpec.scala|29
     457: aastore
     458: dup
     459: bipush        18
     461: ldc_w         #835                // String /home/circleci/project/core/shared/src/test/scala/zio/RetrySpec.scala|RetrySpec.scala|30
     464: aastore
     465: dup
     466: bipush        19
     468: ldc_w         #837                // String /home/circleci/project/core/shared/src/test/scala/zio/RetrySpec.scala|RetrySpec.scala|32
     471: aastore
     472: dup
     473: bipush        20
     475: ldc_w         #839                // String /home/circleci/project/core/shared/src/test/scala/zio/RetrySpec.scala|RetrySpec.scala|33
     478: aastore
     479: invokevirtual #793                // Method scala/runtime/ScalaRunTime$.wrapRefArray:([Ljava/lang/Object;)Lscala/collection/immutable/ArraySeq;
     482: invokevirtual #293                // Method scala/collection/immutable/List$.apply:(Lscala/collection/immutable/Seq;)Ljava/lang/Object;
     485: checkcast     #795                // class scala/collection/immutable/Seq
     488: getstatic     #281                // Field scala/collection/immutable/List$.MODULE$:Lscala/collection/immutable/List$;
     491: getstatic     #286                // Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
     494: bipush        20
     496: anewarray     #841                // class org/specs2/specification/create/InterpolatedFragment
     499: dup
     500: iconst_0
     501: aload_0
     502: aload_0
     503: invokedynamic #846,  0            // InvokeDynamic #51:apply:(Lzio/RetrySpec;)Lscala/Function0;
     508: aload_0
     509: getstatic     #851                // Field org/specs2/matcher/MatchResult$.MODULE$:Lorg/specs2/matcher/MatchResult$;
     512: invokevirtual #855                // Method org/specs2/matcher/MatchResult$.matchResultAsResult:()Lorg/specs2/execute/AsResult;
     515: invokevirtual #859                // Method zioAsExecution:(Lorg/specs2/execute/AsResult;)Lorg/specs2/specification/core/AsExecution;
     518: invokevirtual #863                // Method asExecutionIsInterpolatedFragment:(Lscala/Function0;Lorg/specs2/specification/core/AsExecution;)Lorg/specs2/specification/create/InterpolatedFragment;
     521: aastore
     522: dup
     523: iconst_1
     524: aload_0
     525: aload_0
     526: invokedynamic #867,  0            // InvokeDynamic #52:apply:(Lzio/RetrySpec;)Lscala/Function0;
     531: aload_0
     532: getstatic     #851                // Field org/specs2/matcher/MatchResult$.MODULE$:Lorg/specs2/matcher/MatchResult$;
     535: invokevirtual #855                // Method org/specs2/matcher/MatchResult$.matchResultAsResult:()Lorg/specs2/execute/AsResult;
     538: invokevirtual #859                // Method zioAsExecution:(Lorg/specs2/execute/AsResult;)Lorg/specs2/specification/core/AsExecution;
     541: invokevirtual #863                // Method asExecutionIsInterpolatedFragment:(Lscala/Function0;Lorg/specs2/specification/core/AsExecution;)Lorg/specs2/specification/create/InterpolatedFragment;
     544: aastore
     545: dup
     546: iconst_2
     547: aload_0
     548: aload_0
     549: invokedynamic #871,  0            // InvokeDynamic #53:apply:(Lzio/RetrySpec;)Lscala/Function0;
     554: aload_0
     555: getstatic     #851                // Field org/specs2/matcher/MatchResult$.MODULE$:Lorg/specs2/matcher/MatchResult$;
     558: invokevirtual #855                // Method org/specs2/matcher/MatchResult$.matchResultAsResult:()Lorg/specs2/execute/AsResult;
     561: invokevirtual #859                // Method zioAsExecution:(Lorg/specs2/execute/AsResult;)Lorg/specs2/specification/core/AsExecution;
     564: invokevirtual #863                // Method asExecutionIsInterpolatedFragment:(Lscala/Function0;Lorg/specs2/specification/core/AsExecution;)Lorg/specs2/specification/create/InterpolatedFragment;
     567: aastore
     568: dup
     569: iconst_3
     570: aload_0
     571: aload_0
     572: invokedynamic #875,  0            // InvokeDynamic #54:apply:(Lzio/RetrySpec;)Lscala/Function0;
     577: aload_0
     578: getstatic     #851                // Field org/specs2/matcher/MatchResult$.MODULE$:Lorg/specs2/matcher/MatchResult$;
     581: invokevirtual #855                // Method org/specs2/matcher/MatchResult$.matchResultAsResult:()Lorg/specs2/execute/AsResult;
     584: invokevirtual #859                // Method zioAsExecution:(Lorg/specs2/execute/AsResult;)Lorg/specs2/specification/core/AsExecution;
     587: invokevirtual #863                // Method asExecutionIsInterpolatedFragment:(Lscala/Function0;Lorg/specs2/specification/core/AsExecution;)Lorg/specs2/specification/create/InterpolatedFragment;
     590: aastore
     591: dup
     592: iconst_4
     593: aload_0
     594: aload_0
     595: invokedynamic #879,  0            // InvokeDynamic #55:apply:(Lzio/RetrySpec;)Lscala/Function0;
     600: aload_0
     601: getstatic     #851                // Field org/specs2/matcher/MatchResult$.MODULE$:Lorg/specs2/matcher/MatchResult$;
     604: invokevirtual #855                // Method org/specs2/matcher/MatchResult$.matchResultAsResult:()Lorg/specs2/execute/AsResult;
     607: invokevirtual #859                // Method zioAsExecution:(Lorg/specs2/execute/AsResult;)Lorg/specs2/specification/core/AsExecution;
     610: invokevirtual #863                // Method asExecutionIsInterpolatedFragment:(Lscala/Function0;Lorg/specs2/specification/core/AsExecution;)Lorg/specs2/specification/create/InterpolatedFragment;
     613: aastore
     614: dup
     615: iconst_5
     616: aload_0
     617: aload_0
     618: invokedynamic #883,  0            // InvokeDynamic #56:apply:(Lzio/RetrySpec;)Lscala/Function0;
     623: aload_0
     624: getstatic     #851                // Field org/specs2/matcher/MatchResult$.MODULE$:Lorg/specs2/matcher/MatchResult$;
     627: invokevirtual #855                // Method org/specs2/matcher/MatchResult$.matchResultAsResult:()Lorg/specs2/execute/AsResult;
     630: invokevirtual #859                // Method zioAsExecution:(Lorg/specs2/execute/AsResult;)Lorg/specs2/specification/core/AsExecution;
     633: invokevirtual #863                // Method asExecutionIsInterpolatedFragment:(Lscala/Function0;Lorg/specs2/specification/core/AsExecution;)Lorg/specs2/specification/create/InterpolatedFragment;
     636: aastore
     637: dup
     638: bipush        6
     640: aload_0
     641: aload_0
     642: invokedynamic #887,  0            // InvokeDynamic #57:apply:(Lzio/RetrySpec;)Lscala/Function0;
     647: aload_0
     648: getstatic     #851                // Field org/specs2/matcher/MatchResult$.MODULE$:Lorg/specs2/matcher/MatchResult$;
     651: invokevirtual #855                // Method org/specs2/matcher/MatchResult$.matchResultAsResult:()Lorg/specs2/execute/AsResult;
     654: invokevirtual #859                // Method zioAsExecution:(Lorg/specs2/execute/AsResult;)Lorg/specs2/specification/core/AsExecution;
     657: invokevirtual #863                // Method asExecutionIsInterpolatedFragment:(Lscala/Function0;Lorg/specs2/specification/core/AsExecution;)Lorg/specs2/specification/create/InterpolatedFragment;
     660: aastore
     661: dup
     662: bipush        7
     664: aload_0
     665: aload_0
     666: invokedynamic #891,  0            // InvokeDynamic #58:apply:(Lzio/RetrySpec;)Lscala/Function0;
     671: aload_0
     672: getstatic     #851                // Field org/specs2/matcher/MatchResult$.MODULE$:Lorg/specs2/matcher/MatchResult$;
     675: invokevirtual #855                // Method org/specs2/matcher/MatchResult$.matchResultAsResult:()Lorg/specs2/execute/AsResult;
     678: invokevirtual #859                // Method zioAsExecution:(Lorg/specs2/execute/AsResult;)Lorg/specs2/specification/core/AsExecution;
     681: invokevirtual #863                // Method asExecutionIsInterpolatedFragment:(Lscala/Function0;Lorg/specs2/specification/core/AsExecution;)Lorg/specs2/specification/create/InterpolatedFragment;
     684: aastore
     685: dup
     686: bipush        8
     688: aload_0
     689: aload_0
     690: invokedynamic #895,  0            // InvokeDynamic #59:apply:(Lzio/RetrySpec;)Lscala/Function0;
     695: aload_0
     696: getstatic     #851                // Field org/specs2/matcher/MatchResult$.MODULE$:Lorg/specs2/matcher/MatchResult$;
     699: invokevirtual #855                // Method org/specs2/matcher/MatchResult$.matchResultAsResult:()Lorg/specs2/execute/AsResult;
     702: invokevirtual #859                // Method zioAsExecution:(Lorg/specs2/execute/AsResult;)Lorg/specs2/specification/core/AsExecution;
     705: invokevirtual #863                // Method asExecutionIsInterpolatedFragment:(Lscala/Function0;Lorg/specs2/specification/core/AsExecution;)Lorg/specs2/specification/create/InterpolatedFragment;
     708: aastore
     709: dup
     710: bipush        9
     712: aload_0
     713: aload_0
     714: invokedynamic #899,  0            // InvokeDynamic #60:apply:(Lzio/RetrySpec;)Lscala/Function0;
     719: aload_0
     720: getstatic     #851                // Field org/specs2/matcher/MatchResult$.MODULE$:Lorg/specs2/matcher/MatchResult$;
     723: invokevirtual #855                // Method org/specs2/matcher/MatchResult$.matchResultAsResult:()Lorg/specs2/execute/AsResult;
     726: invokevirtual #859                // Method zioAsExecution:(Lorg/specs2/execute/AsResult;)Lorg/specs2/specification/core/AsExecution;
     729: invokevirtual #863                // Method asExecutionIsInterpolatedFragment:(Lscala/Function0;Lorg/specs2/specification/core/AsExecution;)Lorg/specs2/specification/create/InterpolatedFragment;
     732: aastore
     733: dup
     734: bipush        10
     736: aload_0
     737: aload_0
     738: invokedynamic #903,  0            // InvokeDynamic #61:apply:(Lzio/RetrySpec;)Lscala/Function0;
     743: aload_0
     744: getstatic     #851                // Field org/specs2/matcher/MatchResult$.MODULE$:Lorg/specs2/matcher/MatchResult$;
     747: invokevirtual #855                // Method org/specs2/matcher/MatchResult$.matchResultAsResult:()Lorg/specs2/execute/AsResult;
     750: invokevirtual #859                // Method zioAsExecution:(Lorg/specs2/execute/AsResult;)Lorg/specs2/specification/core/AsExecution;
     753: invokevirtual #863                // Method asExecutionIsInterpolatedFragment:(Lscala/Function0;Lorg/specs2/specification/core/AsExecution;)Lorg/specs2/specification/create/InterpolatedFragment;
     756: aastore
     757: dup
     758: bipush        11
     760: aload_0
     761: aload_0
     762: invokedynamic #907,  0            // InvokeDynamic #62:apply:(Lzio/RetrySpec;)Lscala/Function0;
     767: aload_0
     768: getstatic     #851                // Field org/specs2/matcher/MatchResult$.MODULE$:Lorg/specs2/matcher/MatchResult$;
     771: invokevirtual #855                // Method org/specs2/matcher/MatchResult$.matchResultAsResult:()Lorg/specs2/execute/AsResult;
     774: invokevirtual #859                // Method zioAsExecution:(Lorg/specs2/execute/AsResult;)Lorg/specs2/specification/core/AsExecution;
     777: invokevirtual #863                // Method asExecutionIsInterpolatedFragment:(Lscala/Function0;Lorg/specs2/specification/core/AsExecution;)Lorg/specs2/specification/create/InterpolatedFragment;
     780: aastore
     781: dup
     782: bipush        12
     784: aload_0
     785: aload_0
     786: invokedynamic #911,  0            // InvokeDynamic #63:apply:(Lzio/RetrySpec;)Lscala/Function0;
     791: aload_0
     792: getstatic     #851                // Field org/specs2/matcher/MatchResult$.MODULE$:Lorg/specs2/matcher/MatchResult$;
     795: invokevirtual #855                // Method org/specs2/matcher/MatchResult$.matchResultAsResult:()Lorg/specs2/execute/AsResult;
     798: invokevirtual #859                // Method zioAsExecution:(Lorg/specs2/execute/AsResult;)Lorg/specs2/specification/core/AsExecution;
     801: invokevirtual #863                // Method asExecutionIsInterpolatedFragment:(Lscala/Function0;Lorg/specs2/specification/core/AsExecution;)Lorg/specs2/specification/create/InterpolatedFragment;
     804: aastore
     805: dup
     806: bipush        13
     808: aload_0
     809: aload_0
     810: invokedynamic #915,  0            // InvokeDynamic #64:apply:(Lzio/RetrySpec;)Lscala/Function0;
     815: aload_0
     816: getstatic     #851                // Field org/specs2/matcher/MatchResult$.MODULE$:Lorg/specs2/matcher/MatchResult$;
     819: invokevirtual #855                // Method org/specs2/matcher/MatchResult$.matchResultAsResult:()Lorg/specs2/execute/AsResult;
     822: invokevirtual #859                // Method zioAsExecution:(Lorg/specs2/execute/AsResult;)Lorg/specs2/specification/core/AsExecution;
     825: invokevirtual #863                // Method asExecutionIsInterpolatedFragment:(Lscala/Function0;Lorg/specs2/specification/core/AsExecution;)Lorg/specs2/specification/create/InterpolatedFragment;
     828: aastore
     829: dup
     830: bipush        14
     832: aload_0
     833: aload_0
     834: invokedynamic #919,  0            // InvokeDynamic #65:apply:(Lzio/RetrySpec;)Lscala/Function0;
     839: aload_0
     840: getstatic     #851                // Field org/specs2/matcher/MatchResult$.MODULE$:Lorg/specs2/matcher/MatchResult$;
     843: invokevirtual #855                // Method org/specs2/matcher/MatchResult$.matchResultAsResult:()Lorg/specs2/execute/AsResult;
     846: invokevirtual #859                // Method zioAsExecution:(Lorg/specs2/execute/AsResult;)Lorg/specs2/specification/core/AsExecution;
     849: invokevirtual #863                // Method asExecutionIsInterpolatedFragment:(Lscala/Function0;Lorg/specs2/specification/core/AsExecution;)Lorg/specs2/specification/create/InterpolatedFragment;
     852: aastore
     853: dup
     854: bipush        15
     856: aload_0
     857: aload_0
     858: invokedynamic #923,  0            // InvokeDynamic #66:apply:(Lzio/RetrySpec;)Lscala/Function0;
     863: aload_0
     864: getstatic     #851                // Field org/specs2/matcher/MatchResult$.MODULE$:Lorg/specs2/matcher/MatchResult$;
     867: invokevirtual #855                // Method org/specs2/matcher/MatchResult$.matchResultAsResult:()Lorg/specs2/execute/AsResult;
     870: invokevirtual #859                // Method zioAsExecution:(Lorg/specs2/execute/AsResult;)Lorg/specs2/specification/core/AsExecution;
     873: invokevirtual #863                // Method asExecutionIsInterpolatedFragment:(Lscala/Function0;Lorg/specs2/specification/core/AsExecution;)Lorg/specs2/specification/create/InterpolatedFragment;
     876: aastore
     877: dup
     878: bipush        16
     880: aload_0
     881: aload_0
     882: invokedynamic #927,  0            // InvokeDynamic #67:apply:(Lzio/RetrySpec;)Lscala/Function0;
     887: aload_0
     888: getstatic     #851                // Field org/specs2/matcher/MatchResult$.MODULE$:Lorg/specs2/matcher/MatchResult$;
     891: invokevirtual #855                // Method org/specs2/matcher/MatchResult$.matchResultAsResult:()Lorg/specs2/execute/AsResult;
     894: invokevirtual #859                // Method zioAsExecution:(Lorg/specs2/execute/AsResult;)Lorg/specs2/specification/core/AsExecution;
     897: invokevirtual #863                // Method asExecutionIsInterpolatedFragment:(Lscala/Function0;Lorg/specs2/specification/core/AsExecution;)Lorg/specs2/specification/create/InterpolatedFragment;
     900: aastore
     901: dup
     902: bipush        17
     904: aload_0
     905: aload_0
     906: invokedynamic #931,  0            // InvokeDynamic #68:apply:(Lzio/RetrySpec;)Lscala/Function0;
     911: aload_0
     912: getstatic     #851                // Field org/specs2/matcher/MatchResult$.MODULE$:Lorg/specs2/matcher/MatchResult$;
     915: invokevirtual #855                // Method org/specs2/matcher/MatchResult$.matchResultAsResult:()Lorg/specs2/execute/AsResult;
     918: invokevirtual #859                // Method zioAsExecution:(Lorg/specs2/execute/AsResult;)Lorg/specs2/specification/core/AsExecution;
     921: invokevirtual #863                // Method asExecutionIsInterpolatedFragment:(Lscala/Function0;Lorg/specs2/specification/core/AsExecution;)Lorg/specs2/specification/create/InterpolatedFragment;
     924: aastore
     925: dup
     926: bipush        18
     928: aload_0
     929: aload_0
     930: invokedynamic #935,  0            // InvokeDynamic #69:apply:(Lzio/RetrySpec;)Lscala/Function0;
     935: aload_0
     936: getstatic     #851                // Field org/specs2/matcher/MatchResult$.MODULE$:Lorg/specs2/matcher/MatchResult$;
     939: invokevirtual #855                // Method org/specs2/matcher/MatchResult$.matchResultAsResult:()Lorg/specs2/execute/AsResult;
     942: invokevirtual #859                // Method zioAsExecution:(Lorg/specs2/execute/AsResult;)Lorg/specs2/specification/core/AsExecution;
     945: invokevirtual #863                // Method asExecutionIsInterpolatedFragment:(Lscala/Function0;Lorg/specs2/specification/core/AsExecution;)Lorg/specs2/specification/create/InterpolatedFragment;
     948: aastore
     949: dup
     950: bipush        19
     952: aload_0
     953: aload_0
     954: invokedynamic #939,  0            // InvokeDynamic #70:apply:(Lzio/RetrySpec;)Lscala/Function0;
     959: aload_0
     960: getstatic     #851                // Field org/specs2/matcher/MatchResult$.MODULE$:Lorg/specs2/matcher/MatchResult$;
     963: invokevirtual #855                // Method org/specs2/matcher/MatchResult$.matchResultAsResult:()Lorg/specs2/execute/AsResult;
     966: invokevirtual #859                // Method zioAsExecution:(Lorg/specs2/execute/AsResult;)Lorg/specs2/specification/core/AsExecution;
     969: invokevirtual #863                // Method asExecutionIsInterpolatedFragment:(Lscala/Function0;Lorg/specs2/specification/core/AsExecution;)Lorg/specs2/specification/create/InterpolatedFragment;
     972: aastore
     973: invokevirtual #793                // Method scala/runtime/ScalaRunTime$.wrapRefArray:([Ljava/lang/Object;)Lscala/collection/immutable/ArraySeq;
     976: invokevirtual #293                // Method scala/collection/immutable/List$.apply:(Lscala/collection/immutable/Seq;)Ljava/lang/Object;
     979: checkcast     #795                // class scala/collection/immutable/Seq
     982: getstatic     #281                // Field scala/collection/immutable/List$.MODULE$:Lscala/collection/immutable/List$;
     985: getstatic     #286                // Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
     988: bipush        20
     990: anewarray     #747                // class java/lang/String
     993: dup
     994: iconst_0
     995: ldc_w         #940                // String notRetryOnSuccess
     998: aastore
     999: dup
    1000: iconst_1
    1001: ldc_w         #941                // String retryRecurs0
    1004: aastore
    1005: dup
    1006: iconst_2
    1007: ldc_w         #942                // String retryOnceSuccess
    1010: aastore
    1011: dup
    1012: iconst_3
    1013: ldc_w         #943                // String retryOnceFail
    1016: aastore
    1017: dup
    1018: iconst_4
    1019: ldc_w         #944                // String retryN
    1022: aastore
    1023: dup
    1024: iconst_5
    1025: ldc_w         #945                // String retryNUnitIntervalJittered
    1028: aastore
    1029: dup
    1030: bipush        6
    1032: ldc_w         #946                // String retryNCustomIntervalJittered
    1035: aastore
    1036: dup
    1037: bipush        7
    1039: ldc_w         #947                // String fixedWithErrorPredicate
    1042: aastore
    1043: dup
    1044: bipush        8
    1046: ldc_w         #948                // String fibonacci
    1049: aastore
    1050: dup
    1051: bipush        9
    1053: ldc_w         #949                // String linear
    1056: aastore
    1057: dup
    1058: bipush        10
    1060: ldc_w         #950                // String exponential
    1063: aastore
    1064: dup
    1065: bipush        11
    1067: ldc_w         #951                // String exponentialWithFactor
    1070: aastore
    1071: dup
    1072: bipush        12
    1074: ldc_w         #952                // String recurs10Retry
    1077: aastore
    1078: dup
    1079: bipush        13
    1081: ldc_w         #953                // String retryOrElseFallbackSucceed
    1084: aastore
    1085: dup
    1086: bipush        14
    1088: ldc_w         #954                // String retryOrElseFallbackFailed
    1091: aastore
    1092: dup
    1093: bipush        15
    1095: ldc_w         #955                // String retryOrElseEitherFallbackSucceed
    1098: aastore
    1099: dup
    1100: bipush        16
    1102: ldc_w         #956                // String retryOrElseEitherFallbackFailed
    1105: aastore
    1106: dup
    1107: bipush        17
    1109: ldc_w         #957                // String retryOrElseSucceed
    1112: aastore
    1113: dup
    1114: bipush        18
    1116: ldc_w         #958                // String retryOrElseEitherSucceed
    1119: aastore
    1120: dup
    1121: bipush        19
    1123: ldc_w         #959                // String ensuring
    1126: aastore
    1127: invokevirtual #793                // Method scala/runtime/ScalaRunTime$.wrapRefArray:([Ljava/lang/Object;)Lscala/collection/immutable/ArraySeq;
    1130: invokevirtual #293                // Method scala/collection/immutable/List$.apply:(Lscala/collection/immutable/Seq;)Ljava/lang/Object;
    1133: checkcast     #795                // class scala/collection/immutable/Seq
    1136: invokevirtual #963                // Method s2:(Ljava/lang/String;ZLscala/collection/immutable/Seq;Lscala/collection/immutable/Seq;Lscala/collection/immutable/Seq;Lscala/collection/immutable/Seq;Lscala/collection/immutable/Seq;)Lorg/specs2/specification/core/Fragments;
    1139: areturn

  public static final zio.ZIO $anonfun$retryCollect$2(java.lang.Object, scala.collection.immutable.List, zio.ZIO, zio.ZSchedule, zio.ZSchedule$Decision);
    Code:
       0: aload         4
       2: invokevirtual #974                // Method zio/ZSchedule$Decision.cont:()Z
       5: ifne          62
       8: getstatic     #244                // Field zio/IO$.MODULE$:Lzio/IO$;
      11: new           #262                // class scala/Tuple2
      14: dup
      15: getstatic     #267                // Field scala/package$.MODULE$:Lscala/package$;
      18: invokevirtual #271                // Method scala/package$.Left:()Lscala/util/Left$;
      21: aload_0
      22: invokevirtual #276                // Method scala/util/Left$.apply:(Ljava/lang/Object;)Lscala/util/Left;
      25: new           #262                // class scala/Tuple2
      28: dup
      29: aload         4
      31: invokevirtual #977                // Method zio/ZSchedule$Decision.delay:()Lzio/duration/Duration;
      34: aload         4
      36: invokevirtual #980                // Method zio/ZSchedule$Decision.finish:()Lscala/Function0;
      39: invokeinterface #984,  1          // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
      44: invokespecial #309                // Method scala/Tuple2."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
      47: astore        5
      49: aload_1
      50: aload         5
      52: invokevirtual #988                // Method scala/collection/immutable/List.$colon$colon:(Ljava/lang/Object;)Lscala/collection/immutable/List;
      55: invokespecial #309                // Method scala/Tuple2."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
      58: invokevirtual #991                // Method zio/IO$.succeed:(Ljava/lang/Object;)Lzio/ZIO;
      61: areturn
      62: aload         4
      64: invokevirtual #994                // Method zio/ZSchedule$Decision.state:()Ljava/lang/Object;
      67: new           #262                // class scala/Tuple2
      70: dup
      71: aload         4
      73: invokevirtual #977                // Method zio/ZSchedule$Decision.delay:()Lzio/duration/Duration;
      76: aload         4
      78: invokevirtual #980                // Method zio/ZSchedule$Decision.finish:()Lscala/Function0;
      81: invokeinterface #984,  1          // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
      86: invokespecial #309                // Method scala/Tuple2."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
      89: astore        6
      91: aload_1
      92: aload         6
      94: invokevirtual #988                // Method scala/collection/immutable/List.$colon$colon:(Ljava/lang/Object;)Lscala/collection/immutable/List;
      97: aload_2
      98: aload_3
      99: invokestatic  #998                // Method loop$1:(Ljava/lang/Object;Lscala/collection/immutable/List;Lzio/ZIO;Lzio/ZSchedule;)Lzio/ZIO;
     102: areturn

  public static final zio.ZIO $anonfun$retryCollect$1(zio.ZSchedule, java.lang.Object, scala.collection.immutable.List, zio.ZIO, java.lang.Object);
    Code:
       0: aload_0
       1: invokeinterface #1007,  1         // InterfaceMethod zio/ZSchedule.update:()Lscala/Function2;
       6: aload         4
       8: aload_1
       9: invokeinterface #1012,  3         // InterfaceMethod scala/Function2.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      14: checkcast     #119                // class zio/ZIO
      17: aload         4
      19: aload_2
      20: aload_3
      21: aload_0
      22: invokedynamic #1020,  0           // InvokeDynamic #71:apply:(Ljava/lang/Object;Lscala/collection/immutable/List;Lzio/ZIO;Lzio/ZSchedule;)Lscala/Function1;
      27: invokeinterface #123,  2          // InterfaceMethod zio/ZIO.flatMap:(Lscala/Function1;)Lzio/ZIO;
      32: areturn

  public static final zio.ZIO $anonfun$retryCollect$3(scala.collection.immutable.List, java.lang.Object);
    Code:
       0: getstatic     #244                // Field zio/IO$.MODULE$:Lzio/IO$;
       3: new           #262                // class scala/Tuple2
       6: dup
       7: getstatic     #267                // Field scala/package$.MODULE$:Lscala/package$;
      10: invokevirtual #1027               // Method scala/package$.Right:()Lscala/util/Right$;
      13: aload_1
      14: invokevirtual #1032               // Method scala/util/Right$.apply:(Ljava/lang/Object;)Lscala/util/Right;
      17: aload_0
      18: invokespecial #309                // Method scala/Tuple2."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
      21: invokevirtual #991                // Method zio/IO$.succeed:(Ljava/lang/Object;)Lzio/ZIO;
      24: areturn

  private static final zio.ZIO loop$1(java.lang.Object, scala.collection.immutable.List, zio.ZIO, zio.ZSchedule);
    Code:
       0: aload_2
       1: aload_3
       2: aload_0
       3: aload_1
       4: aload_2
       5: invokedynamic #1039,  0           // InvokeDynamic #72:apply:(Lzio/ZSchedule;Ljava/lang/Object;Lscala/collection/immutable/List;Lzio/ZIO;)Lscala/Function1;
      10: aload_1
      11: invokedynamic #1045,  0           // InvokeDynamic #73:apply:(Lscala/collection/immutable/List;)Lscala/Function1;
      16: invokeinterface #191,  3          // InterfaceMethod zio/ZIO.foldM:(Lscala/Function1;Lscala/Function1;)Lzio/ZIO;
      21: areturn

  public static final zio.ZIO $anonfun$retryCollect$4(zio.ZIO, zio.ZSchedule, java.lang.Object);
    Code:
       0: aload_2
       1: getstatic     #1051               // Field scala/collection/immutable/Nil$.MODULE$:Lscala/collection/immutable/Nil$;
       4: aload_0
       5: aload_1
       6: invokestatic  #998                // Method loop$1:(Ljava/lang/Object;Lscala/collection/immutable/List;Lzio/ZIO;Lzio/ZSchedule;)Lzio/ZIO;
       9: areturn

  public static final scala.Tuple2 $anonfun$retryCollect$5(scala.Tuple2);
    Code:
       0: new           #262                // class scala/Tuple2
       3: dup
       4: aload_0
       5: invokevirtual #1055               // Method scala/Tuple2._1:()Ljava/lang/Object;
       8: aload_0
       9: invokevirtual #1058               // Method scala/Tuple2._2:()Ljava/lang/Object;
      12: checkcast     #295                // class scala/collection/immutable/List
      15: invokevirtual #1061               // Method scala/collection/immutable/List.reverse:()Lscala/collection/immutable/List;
      18: invokespecial #309                // Method scala/Tuple2."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
      21: areturn

  public static final int $anonfun$notRetryOnSuccess$2(int);
    Code:
       0: iload_0
       1: iconst_1
       2: iadd
       3: ireturn

  public static final int $anonfun$notRetryOnSuccess$5(int);
    Code:
       0: iload_0
       1: ireturn

  public static final int $anonfun$notRetryOnSuccess$6();
    Code:
       0: iconst_1
       1: ireturn

  public static final org.specs2.matcher.MatchResult $anonfun$notRetryOnSuccess$4(zio.RetrySpec, int);
    Code:
       0: aload_0
       1: iload_1
       2: invokedynamic #1075,  0           // InvokeDynamic #74:apply$mcI$sp:(I)Lscala/runtime/java8/JFunction0$mcI$sp;
       7: invokevirtual #1079               // Method theValue:(Lscala/Function0;)Lorg/specs2/matcher/MustExpectable;
      10: invokedynamic #1083,  0           // InvokeDynamic #75:apply$mcI$sp:()Lscala/runtime/java8/JFunction0$mcI$sp;
      15: getstatic     #208                // Field org/specs2/matcher/describe/Diffable$.MODULE$:Lorg/specs2/matcher/describe/Diffable$;
      18: invokevirtual #494                // Method org/specs2/matcher/describe/Diffable$.intDiffable:()Lorg/specs2/matcher/describe/Diffable;
      21: invokevirtual #1088               // Method org/specs2/matcher/MustExpectable.must_$eq$eq$eq:(Lscala/Function0;Lorg/specs2/matcher/describe/Diffable;)Lorg/specs2/matcher/MatchResult;
      24: areturn

  public static final zio.ZIO $anonfun$notRetryOnSuccess$3(zio.RetrySpec, java.util.concurrent.atomic.AtomicReference, int);
    Code:
       0: getstatic     #145                // Field zio/Ref$.MODULE$:Lzio/Ref$;
       3: aload_1
       4: invokevirtual #1095               // Method zio/Ref$.get$extension:(Ljava/util/concurrent/atomic/AtomicReference;)Lzio/ZIO;
       7: aload_0
       8: invokedynamic #1103,  0           // InvokeDynamic #76:apply:(Lzio/RetrySpec;)Lscala/Function1;
      13: invokeinterface #135,  2          // InterfaceMethod zio/ZIO.map:(Lscala/Function1;)Lzio/ZIO;
      18: areturn

  public static final zio.ZIO $anonfun$notRetryOnSuccess$1(zio.RetrySpec, java.util.concurrent.atomic.AtomicReference);
    Code:
       0: getstatic     #145                // Field zio/Ref$.MODULE$:Lzio/Ref$;
       3: aload_1
       4: invokedynamic #1109,  0           // InvokeDynamic #77:apply$mcII$sp:()Lscala/runtime/java8/JFunction1$mcII$sp;
       9: invokevirtual #646                // Method zio/Ref$.update$extension:(Ljava/util/concurrent/atomic/AtomicReference;Lscala/Function1;)Lzio/ZIO;
      12: getstatic     #254                // Field zio/Schedule$.MODULE$:Lzio/Schedule$;
      15: invokevirtual #1112               // Method zio/Schedule$.once:()Lzio/ZSchedule;
      18: invokeinterface #481,  2          // InterfaceMethod zio/ZIO.retry:(Lzio/ZSchedule;)Lzio/ZIO;
      23: aload_0
      24: aload_1
      25: invokedynamic #1120,  0           // InvokeDynamic #78:apply:(Lzio/RetrySpec;Ljava/util/concurrent/atomic/AtomicReference;)Lscala/Function1;
      30: invokeinterface #123,  2          // InterfaceMethod zio/ZIO.flatMap:(Lscala/Function1;)Lzio/ZIO;
      35: areturn

  public static final int $anonfun$retryOnceSuccess$4(int);
    Code:
       0: iload_0
       1: ireturn

  public static final int $anonfun$retryOnceSuccess$5();
    Code:
       0: iconst_2
       1: ireturn

  public static final org.specs2.matcher.MatchResult $anonfun$retryOnceSuccess$3(zio.RetrySpec, int);
    Code:
       0: aload_0
       1: iload_1
       2: invokedynamic #1129,  0           // InvokeDynamic #79:apply$mcI$sp:(I)Lscala/runtime/java8/JFunction0$mcI$sp;
       7: invokevirtual #1079               // Method theValue:(Lscala/Function0;)Lorg/specs2/matcher/MustExpectable;
      10: invokedynamic #1133,  0           // InvokeDynamic #80:apply$mcI$sp:()Lscala/runtime/java8/JFunction0$mcI$sp;
      15: getstatic     #208                // Field org/specs2/matcher/describe/Diffable$.MODULE$:Lorg/specs2/matcher/describe/Diffable$;
      18: invokevirtual #494                // Method org/specs2/matcher/describe/Diffable$.intDiffable:()Lorg/specs2/matcher/describe/Diffable;
      21: invokevirtual #1088               // Method org/specs2/matcher/MustExpectable.must_$eq$eq$eq:(Lscala/Function0;Lorg/specs2/matcher/describe/Diffable;)Lorg/specs2/matcher/MatchResult;
      24: areturn

  public static final zio.ZIO $anonfun$retryOnceSuccess$2(zio.RetrySpec, java.util.concurrent.atomic.AtomicReference, int);
    Code:
       0: getstatic     #145                // Field zio/Ref$.MODULE$:Lzio/Ref$;
       3: aload_1
       4: invokevirtual #1095               // Method zio/Ref$.get$extension:(Ljava/util/concurrent/atomic/AtomicReference;)Lzio/ZIO;
       7: aload_0
       8: invokedynamic #1141,  0           // InvokeDynamic #81:apply:(Lzio/RetrySpec;)Lscala/Function1;
      13: invokeinterface #135,  2          // InterfaceMethod zio/ZIO.map:(Lscala/Function1;)Lzio/ZIO;
      18: areturn

  public static final zio.ZIO $anonfun$retryOnceSuccess$1(zio.RetrySpec, java.util.concurrent.atomic.AtomicReference);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #1144               // Method failOn0:(Ljava/util/concurrent/atomic/AtomicReference;)Lzio/ZIO;
       5: getstatic     #254                // Field zio/Schedule$.MODULE$:Lzio/Schedule$;
       8: invokevirtual #1112               // Method zio/Schedule$.once:()Lzio/ZSchedule;
      11: invokeinterface #481,  2          // InterfaceMethod zio/ZIO.retry:(Lzio/ZSchedule;)Lzio/ZIO;
      16: aload_0
      17: aload_1
      18: invokedynamic #1149,  0           // InvokeDynamic #82:apply:(Lzio/RetrySpec;Ljava/util/concurrent/atomic/AtomicReference;)Lscala/Function1;
      23: invokeinterface #123,  2          // InterfaceMethod zio/ZIO.flatMap:(Lscala/Function1;)Lzio/ZIO;
      28: areturn

  public static final void $anonfun$retryOnceFail$2(int);
    Code:
       0: return

  public static final zio.ZIO $anonfun$retryOnceFail$1(zio.RetrySpec, java.util.concurrent.atomic.AtomicReference);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #1155               // Method alwaysFail:(Ljava/util/concurrent/atomic/AtomicReference;)Lzio/ZIO;
       5: getstatic     #254                // Field zio/Schedule$.MODULE$:Lzio/Schedule$;
       8: invokevirtual #1112               // Method zio/Schedule$.once:()Lzio/ZSchedule;
      11: invokeinterface #481,  2          // InterfaceMethod zio/ZIO.retry:(Lzio/ZSchedule;)Lzio/ZIO;
      16: invokedynamic #1163,  0           // InvokeDynamic #83:apply$mcVI$sp:()Lscala/runtime/java8/JFunction1$mcVI$sp;
      21: invokeinterface #135,  2          // InterfaceMethod zio/ZIO.map:(Lscala/Function1;)Lzio/ZIO;
      26: areturn

  public static final zio.ZIO $anonfun$retryOnceFail$3(java.lang.Object);
    Code:
       0: getstatic     #244                // Field zio/IO$.MODULE$:Lzio/IO$;
       3: aload_0
       4: invokevirtual #991                // Method zio/IO$.succeed:(Ljava/lang/Object;)Lzio/ZIO;
       7: areturn

  public static final zio.ZIO $anonfun$retryOnceFail$4(scala.runtime.BoxedUnit);
    Code:
       0: getstatic     #244                // Field zio/IO$.MODULE$:Lzio/IO$;
       3: ldc_w         #1166               // String A failure was expected
       6: invokevirtual #991                // Method zio/IO$.succeed:(Ljava/lang/Object;)Lzio/ZIO;
       9: areturn

  public static final java.lang.String $anonfun$retryOnceFail$5();
    Code:
       0: ldc_w         #1169               // String Error: 2
       3: areturn

  public static final int $anonfun$retryRecurs0$2(int);
    Code:
       0: iload_0
       1: ireturn

  public static final zio.ZIO $anonfun$retryRecurs0$1(zio.RetrySpec, java.util.concurrent.atomic.AtomicReference);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #1155               // Method alwaysFail:(Ljava/util/concurrent/atomic/AtomicReference;)Lzio/ZIO;
       5: getstatic     #254                // Field zio/Schedule$.MODULE$:Lzio/Schedule$;
       8: iconst_0
       9: invokevirtual #258                // Method zio/Schedule$.recurs:(I)Lzio/ZSchedule;
      12: invokeinterface #481,  2          // InterfaceMethod zio/ZIO.retry:(Lzio/ZSchedule;)Lzio/ZIO;
      17: invokedynamic #1175,  0           // InvokeDynamic #84:apply$mcII$sp:()Lscala/runtime/java8/JFunction1$mcII$sp;
      22: invokeinterface #135,  2          // InterfaceMethod zio/ZIO.map:(Lscala/Function1;)Lzio/ZIO;
      27: areturn

  public static final zio.ZIO $anonfun$retryRecurs0$3(java.lang.Object);
    Code:
       0: getstatic     #244                // Field zio/IO$.MODULE$:Lzio/IO$;
       3: aload_0
       4: invokevirtual #991                // Method zio/IO$.succeed:(Ljava/lang/Object;)Lzio/ZIO;
       7: areturn

  public static final zio.ZIO $anonfun$retryRecurs0$4(int);
    Code:
       0: getstatic     #244                // Field zio/IO$.MODULE$:Lzio/IO$;
       3: ldc_w         #1180               // String it should not be a success
       6: invokevirtual #991                // Method zio/IO$.succeed:(Ljava/lang/Object;)Lzio/ZIO;
       9: areturn

  public static final java.lang.String $anonfun$retryRecurs0$5();
    Code:
       0: ldc_w         #1182               // String Error: 1
       3: areturn

  public static final scala.Tuple2 $anonfun$retryN$1(int);
    Code:
       0: new           #262                // class scala/Tuple2
       3: dup
       4: getstatic     #1190               // Field zio/duration/Duration$.MODULE$:Lzio/duration/Duration$;
       7: invokevirtual #1193               // Method zio/duration/Duration$.Zero:()Lzio/duration/Duration;
      10: iload_0
      11: invokestatic  #151                // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
      14: invokespecial #309                // Method scala/Tuple2."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
      17: areturn

  public static final scala.Tuple2 $anonfun$retryN$2(scala.Tuple2);
    Code:
       0: aload_0
       1: areturn

  public static final zio.duration.Duration $anonfun$retryNUnitIntervalJittered$1(zio.duration.Duration);
    Code:
       0: getstatic     #428                // Field zio/duration/package$.MODULE$:Lzio/duration/package$;
       3: sipush        500
       6: invokevirtual #432                // Method zio/duration/package$.durationInt:(I)Lzio/duration/DurationSyntax;
       9: invokevirtual #438                // Method zio/duration/DurationSyntax.millis:()Lzio/duration/Duration;
      12: areturn

  public static final scala.Tuple2 $anonfun$retryNUnitIntervalJittered$2(int);
    Code:
       0: new           #262                // class scala/Tuple2
       3: dup
       4: getstatic     #428                // Field zio/duration/package$.MODULE$:Lzio/duration/package$;
       7: sipush        250
      10: invokevirtual #432                // Method zio/duration/package$.durationInt:(I)Lzio/duration/DurationSyntax;
      13: invokevirtual #438                // Method zio/duration/DurationSyntax.millis:()Lzio/duration/Duration;
      16: iload_0
      17: invokestatic  #151                // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
      20: invokespecial #309                // Method scala/Tuple2."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
      23: areturn

  public static final scala.collection.immutable.List $anonfun$retryNUnitIntervalJittered$3(scala.collection.immutable.List);
    Code:
       0: aload_0
       1: areturn

  public static final zio.duration.Duration $anonfun$retryNCustomIntervalJittered$1(zio.duration.Duration);
    Code:
       0: getstatic     #428                // Field zio/duration/package$.MODULE$:Lzio/duration/package$;
       3: sipush        500
       6: invokevirtual #432                // Method zio/duration/package$.durationInt:(I)Lzio/duration/DurationSyntax;
       9: invokevirtual #438                // Method zio/duration/DurationSyntax.millis:()Lzio/duration/Duration;
      12: areturn

  public static final scala.Tuple2 $anonfun$retryNCustomIntervalJittered$2(int);
    Code:
       0: new           #262                // class scala/Tuple2
       3: dup
       4: getstatic     #428                // Field zio/duration/package$.MODULE$:Lzio/duration/package$;
       7: sipush        1500
      10: invokevirtual #432                // Method zio/duration/package$.durationInt:(I)Lzio/duration/DurationSyntax;
      13: invokevirtual #438                // Method zio/duration/DurationSyntax.millis:()Lzio/duration/Duration;
      16: iload_0
      17: invokestatic  #151                // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
      20: invokespecial #309                // Method scala/Tuple2."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
      23: areturn

  public static final scala.collection.immutable.List $anonfun$retryNCustomIntervalJittered$3(scala.collection.immutable.List);
    Code:
       0: aload_0
       1: areturn

  public static final void $anonfun$fixedWithErrorPredicate$1(scala.runtime.IntRef);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #1207               // Field scala/runtime/IntRef.elem:I
       5: iconst_1
       6: iadd
       7: putfield      #1207               // Field scala/runtime/IntRef.elem:I
      10: return

  public static final zio.ZIO $anonfun$fixedWithErrorPredicate$2(scala.runtime.IntRef, scala.runtime.BoxedUnit);
    Code:
       0: aload_0
       1: getfield      #1207               // Field scala/runtime/IntRef.elem:I
       4: iconst_5
       5: if_icmpge     18
       8: getstatic     #244                // Field zio/IO$.MODULE$:Lzio/IO$;
      11: ldc_w         #1210               // String KeepTryingError
      14: invokevirtual #249                // Method zio/IO$.fail:(Ljava/lang/Object;)Lzio/ZIO;
      17: areturn
      18: getstatic     #244                // Field zio/IO$.MODULE$:Lzio/IO$;
      21: ldc_w         #454                // String GiveUpError
      24: invokevirtual #249                // Method zio/IO$.fail:(Ljava/lang/Object;)Lzio/ZIO;
      27: areturn

  public static final boolean $anonfun$fixedWithErrorPredicate$3(java.lang.String);
    Code:
       0: aload_0
       1: ldc_w         #1210               // String KeepTryingError
       4: astore_1
       5: dup
       6: ifnonnull     13
       9: pop
      10: goto          22
      13: aload_1
      14: invokevirtual #1219               // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      17: ifeq          22
      20: iconst_1
      21: ireturn
      22: iconst_0
      23: ireturn

  public static final scala.Tuple2 $anonfun$fixedWithErrorPredicate$4(int);
    Code:
       0: new           #262                // class scala/Tuple2
       3: dup
       4: getstatic     #428                // Field zio/duration/package$.MODULE$:Lzio/duration/package$;
       7: sipush        200
      10: invokevirtual #432                // Method zio/duration/package$.durationInt:(I)Lzio/duration/DurationSyntax;
      13: invokevirtual #438                // Method zio/duration/DurationSyntax.millis:()Lzio/duration/Duration;
      16: iload_0
      17: invokestatic  #151                // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
      20: invokespecial #309                // Method scala/Tuple2."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
      23: areturn

  public static final scala.Tuple2 $anonfun$fixedWithErrorPredicate$5(scala.Tuple2);
    Code:
       0: aload_0
       1: areturn

  public static final void $anonfun$recurs10Retry$1(scala.runtime.IntRef);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #1207               // Field scala/runtime/IntRef.elem:I
       5: iconst_1
       6: iadd
       7: putfield      #1207               // Field scala/runtime/IntRef.elem:I
      10: return

  public static final int $anonfun$recurs10Retry$3(scala.runtime.IntRef);
    Code:
       0: aload_0
       1: getfield      #1207               // Field scala/runtime/IntRef.elem:I
       4: ireturn

  public static final zio.ZIO $anonfun$recurs10Retry$2(scala.runtime.IntRef, scala.runtime.BoxedUnit);
    Code:
       0: aload_0
       1: getfield      #1207               // Field scala/runtime/IntRef.elem:I
       4: iconst_5
       5: if_icmpge     18
       8: getstatic     #244                // Field zio/IO$.MODULE$:Lzio/IO$;
      11: ldc_w         #1210               // String KeepTryingError
      14: invokevirtual #249                // Method zio/IO$.fail:(Ljava/lang/Object;)Lzio/ZIO;
      17: areturn
      18: getstatic     #244                // Field zio/IO$.MODULE$:Lzio/IO$;
      21: aload_0
      22: invokedynamic #1233,  0           // InvokeDynamic #85:apply$mcI$sp:(Lscala/runtime/IntRef;)Lscala/runtime/java8/JFunction0$mcI$sp;
      27: invokevirtual #1236               // Method zio/IO$.succeedLazy:(Lscala/Function0;)Lzio/ZIO;
      30: areturn

  public static final int $anonfun$recurs10Retry$4();
    Code:
       0: iconst_5
       1: ireturn

  public static final void $anonfun$checkErrorWithPredicate$1(scala.runtime.IntRef);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #1207               // Field scala/runtime/IntRef.elem:I
       5: iconst_1
       6: iadd
       7: putfield      #1207               // Field scala/runtime/IntRef.elem:I
      10: return

  public static final zio.ZIO $anonfun$checkErrorWithPredicate$2(scala.runtime.IntRef, scala.runtime.BoxedUnit);
    Code:
       0: aload_0
       1: getfield      #1207               // Field scala/runtime/IntRef.elem:I
       4: iconst_5
       5: if_icmpge     18
       8: getstatic     #244                // Field zio/IO$.MODULE$:Lzio/IO$;
      11: ldc_w         #1210               // String KeepTryingError
      14: invokevirtual #249                // Method zio/IO$.fail:(Ljava/lang/Object;)Lzio/ZIO;
      17: areturn
      18: getstatic     #244                // Field zio/IO$.MODULE$:Lzio/IO$;
      21: ldc_w         #454                // String GiveUpError
      24: invokevirtual #249                // Method zio/IO$.fail:(Ljava/lang/Object;)Lzio/ZIO;
      27: areturn

  public static final boolean $anonfun$checkErrorWithPredicate$3(java.lang.String);
    Code:
       0: aload_0
       1: ldc_w         #1210               // String KeepTryingError
       4: astore_1
       5: dup
       6: ifnonnull     13
       9: pop
      10: goto          22
      13: aload_1
      14: invokevirtual #1219               // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      17: ifeq          22
      20: iconst_1
      21: ireturn
      22: iconst_0
      23: ireturn

  public static final scala.Tuple2 $anonfun$checkErrorWithPredicate$4(int);
    Code:
       0: new           #262                // class scala/Tuple2
       3: dup
       4: getstatic     #428                // Field zio/duration/package$.MODULE$:Lzio/duration/package$;
       7: iload_0
       8: bipush        100
      10: imul
      11: invokevirtual #432                // Method zio/duration/package$.durationInt:(I)Lzio/duration/DurationSyntax;
      14: invokevirtual #438                // Method zio/duration/DurationSyntax.millis:()Lzio/duration/Duration;
      17: getstatic     #428                // Field zio/duration/package$.MODULE$:Lzio/duration/package$;
      20: iload_0
      21: bipush        100
      23: imul
      24: invokevirtual #432                // Method zio/duration/package$.durationInt:(I)Lzio/duration/DurationSyntax;
      27: invokevirtual #438                // Method zio/duration/DurationSyntax.millis:()Lzio/duration/Duration;
      30: invokespecial #309                // Method scala/Tuple2."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
      33: areturn

  public static final scala.Tuple2 $anonfun$checkErrorWithPredicate$5(scala.Tuple2);
    Code:
       0: aload_0
       1: areturn

  public static final zio.ZIO $anonfun$ioSucceed$1(java.lang.String, scala.runtime.BoxedUnit);
    Code:
       0: getstatic     #244                // Field zio/IO$.MODULE$:Lzio/IO$;
       3: ldc_w         #1248               // String OrElse
       6: invokevirtual #991                // Method zio/IO$.succeed:(Ljava/lang/Object;)Lzio/ZIO;
       9: areturn

  public static final zio.ZIO $anonfun$ioFail$1(java.lang.String, scala.runtime.BoxedUnit);
    Code:
       0: getstatic     #244                // Field zio/IO$.MODULE$:Lzio/IO$;
       3: ldc_w         #1253               // String OrElseFailed
       6: invokevirtual #249                // Method zio/IO$.fail:(Ljava/lang/Object;)Lzio/ZIO;
       9: areturn

  public static final int $anonfun$retryOrElseSucceed$3(int);
    Code:
       0: iload_0
       1: ireturn

  public static final int $anonfun$retryOrElseSucceed$4();
    Code:
       0: iconst_2
       1: ireturn

  public static final org.specs2.matcher.MatchResult $anonfun$retryOrElseSucceed$2(zio.RetrySpec, int);
    Code:
       0: aload_0
       1: iload_1
       2: invokedynamic #1262,  0           // InvokeDynamic #86:apply$mcI$sp:(I)Lscala/runtime/java8/JFunction0$mcI$sp;
       7: invokevirtual #1079               // Method theValue:(Lscala/Function0;)Lorg/specs2/matcher/MustExpectable;
      10: invokedynamic #1266,  0           // InvokeDynamic #87:apply$mcI$sp:()Lscala/runtime/java8/JFunction0$mcI$sp;
      15: getstatic     #208                // Field org/specs2/matcher/describe/Diffable$.MODULE$:Lorg/specs2/matcher/describe/Diffable$;
      18: invokevirtual #494                // Method org/specs2/matcher/describe/Diffable$.intDiffable:()Lorg/specs2/matcher/describe/Diffable;
      21: invokevirtual #1088               // Method org/specs2/matcher/MustExpectable.must_$eq$eq$eq:(Lscala/Function0;Lorg/specs2/matcher/describe/Diffable;)Lorg/specs2/matcher/MatchResult;
      24: areturn

  public static final zio.ZIO $anonfun$retryOrElseSucceed$1(zio.RetrySpec, java.util.concurrent.atomic.AtomicReference);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #1144               // Method failOn0:(Ljava/util/concurrent/atomic/AtomicReference;)Lzio/ZIO;
       5: getstatic     #254                // Field zio/Schedule$.MODULE$:Lzio/Schedule$;
       8: invokevirtual #1112               // Method zio/Schedule$.once:()Lzio/ZSchedule;
      11: aload_0
      12: invokevirtual #1269               // Method ioFail:()Lscala/Function2;
      15: invokeinterface #1273,  3         // InterfaceMethod zio/ZIO.retryOrElse:(Lzio/ZSchedule;Lscala/Function2;)Lzio/ZIO;
      20: aload_0
      21: invokedynamic #1278,  0           // InvokeDynamic #88:apply:(Lzio/RetrySpec;)Lscala/Function1;
      26: invokeinterface #135,  2          // InterfaceMethod zio/ZIO.map:(Lscala/Function1;)Lzio/ZIO;
      31: areturn

  public static final java.lang.Object $anonfun$retryOrElseFallbackSucceed$3(java.lang.Object);
    Code:
       0: aload_0
       1: areturn

  public static final java.lang.String $anonfun$retryOrElseFallbackSucceed$4();
    Code:
       0: ldc_w         #1248               // String OrElse
       3: areturn

  public static final org.specs2.matcher.MatchResult $anonfun$retryOrElseFallbackSucceed$2(zio.RetrySpec, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokedynamic #1288,  0           // InvokeDynamic #89:apply:(Ljava/lang/Object;)Lscala/Function0;
       7: invokevirtual #1079               // Method theValue:(Lscala/Function0;)Lorg/specs2/matcher/MustExpectable;
      10: invokedynamic #1292,  0           // InvokeDynamic #90:apply:()Lscala/Function0;
      15: getstatic     #208                // Field org/specs2/matcher/describe/Diffable$.MODULE$:Lorg/specs2/matcher/describe/Diffable$;
      18: invokevirtual #212                // Method org/specs2/matcher/describe/Diffable$.fallbackDiffable:()Lorg/specs2/matcher/describe/Diffable;
      21: invokevirtual #1088               // Method org/specs2/matcher/MustExpectable.must_$eq$eq$eq:(Lscala/Function0;Lorg/specs2/matcher/describe/Diffable;)Lorg/specs2/matcher/MatchResult;
      24: areturn

  public static final zio.ZIO $anonfun$retryOrElseFallbackSucceed$1(zio.RetrySpec, java.util.concurrent.atomic.AtomicReference);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #1155               // Method alwaysFail:(Ljava/util/concurrent/atomic/AtomicReference;)Lzio/ZIO;
       5: getstatic     #254                // Field zio/Schedule$.MODULE$:Lzio/Schedule$;
       8: invokevirtual #1112               // Method zio/Schedule$.once:()Lzio/ZSchedule;
      11: aload_0
      12: invokevirtual #1295               // Method ioSucceed:()Lscala/Function2;
      15: invokeinterface #1273,  3         // InterfaceMethod zio/ZIO.retryOrElse:(Lzio/ZSchedule;Lscala/Function2;)Lzio/ZIO;
      20: aload_0
      21: invokedynamic #1299,  0           // InvokeDynamic #91:apply:(Lzio/RetrySpec;)Lscala/Function1;
      26: invokeinterface #135,  2          // InterfaceMethod zio/ZIO.map:(Lscala/Function1;)Lzio/ZIO;
      31: areturn

  public static final int $anonfun$retryOrElseFallbackFailed$2(int);
    Code:
       0: iload_0
       1: ireturn

  public static final zio.ZIO $anonfun$retryOrElseFallbackFailed$1(zio.RetrySpec, java.util.concurrent.atomic.AtomicReference);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #1155               // Method alwaysFail:(Ljava/util/concurrent/atomic/AtomicReference;)Lzio/ZIO;
       5: getstatic     #254                // Field zio/Schedule$.MODULE$:Lzio/Schedule$;
       8: invokevirtual #1112               // Method zio/Schedule$.once:()Lzio/ZSchedule;
      11: aload_0
      12: invokevirtual #1269               // Method ioFail:()Lscala/Function2;
      15: invokeinterface #1273,  3         // InterfaceMethod zio/ZIO.retryOrElse:(Lzio/ZSchedule;Lscala/Function2;)Lzio/ZIO;
      20: invokedynamic #1305,  0           // InvokeDynamic #92:apply$mcII$sp:()Lscala/runtime/java8/JFunction1$mcII$sp;
      25: invokeinterface #135,  2          // InterfaceMethod zio/ZIO.map:(Lscala/Function1;)Lzio/ZIO;
      30: areturn

  public static final zio.ZIO $anonfun$retryOrElseFallbackFailed$3(java.lang.String);
    Code:
       0: getstatic     #244                // Field zio/IO$.MODULE$:Lzio/IO$;
       3: aload_0
       4: invokevirtual #991                // Method zio/IO$.succeed:(Ljava/lang/Object;)Lzio/ZIO;
       7: areturn

  public static final zio.ZIO $anonfun$retryOrElseFallbackFailed$4(int);
    Code:
       0: getstatic     #244                // Field zio/IO$.MODULE$:Lzio/IO$;
       3: ldc_w         #1180               // String it should not be a success
       6: invokevirtual #991                // Method zio/IO$.succeed:(Ljava/lang/Object;)Lzio/ZIO;
       9: areturn

  public static final java.lang.String $anonfun$retryOrElseFallbackFailed$5();
    Code:
       0: ldc_w         #1253               // String OrElseFailed
       3: areturn

  public static final scala.util.Either $anonfun$retryOrElseEitherSucceed$3(scala.util.Either);
    Code:
       0: aload_0
       1: areturn

  public static final org.specs2.matcher.RightCheckedMatcher $anonfun$retryOrElseEitherSucceed$4(zio.RetrySpec);
    Code:
       0: aload_0
       1: getstatic     #1318               // Field org/specs2/matcher/ValueCheck$.MODULE$:Lorg/specs2/matcher/ValueCheck$;
       4: iconst_2
       5: invokestatic  #151                // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
       8: getstatic     #208                // Field org/specs2/matcher/describe/Diffable$.MODULE$:Lorg/specs2/matcher/describe/Diffable$;
      11: invokevirtual #494                // Method org/specs2/matcher/describe/Diffable$.intDiffable:()Lorg/specs2/matcher/describe/Diffable;
      14: invokevirtual #1322               // Method org/specs2/matcher/ValueCheck$.typedValueCheck:(Ljava/lang/Object;Lorg/specs2/matcher/describe/Diffable;)Lorg/specs2/matcher/BeEqualTypedValueCheck;
      17: invokevirtual #1326               // Method beRight:(Lorg/specs2/matcher/ValueCheck;)Lorg/specs2/matcher/RightCheckedMatcher;
      20: areturn

  public static final org.specs2.matcher.MatchResult $anonfun$retryOrElseEitherSucceed$2(zio.RetrySpec, scala.util.Either);
    Code:
       0: aload_0
       1: aload_1
       2: invokedynamic #1336,  0           // InvokeDynamic #93:apply:(Lscala/util/Either;)Lscala/Function0;
       7: invokevirtual #1079               // Method theValue:(Lscala/Function0;)Lorg/specs2/matcher/MustExpectable;
      10: aload_0
      11: invokedynamic #1342,  0           // InvokeDynamic #94:apply:(Lzio/RetrySpec;)Lscala/Function0;
      16: invokevirtual #1346               // Method org/specs2/matcher/MustExpectable.must:(Lscala/Function0;)Lorg/specs2/matcher/MatchResult;
      19: areturn

  public static final zio.ZIO $anonfun$retryOrElseEitherSucceed$1(zio.RetrySpec, java.util.concurrent.atomic.AtomicReference);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #1144               // Method failOn0:(Ljava/util/concurrent/atomic/AtomicReference;)Lzio/ZIO;
       5: getstatic     #254                // Field zio/Schedule$.MODULE$:Lzio/Schedule$;
       8: invokevirtual #1112               // Method zio/Schedule$.once:()Lzio/ZSchedule;
      11: aload_0
      12: invokevirtual #1269               // Method ioFail:()Lscala/Function2;
      15: invokeinterface #1350,  3         // InterfaceMethod zio/ZIO.retryOrElseEither:(Lzio/ZSchedule;Lscala/Function2;)Lzio/ZIO;
      20: aload_0
      21: invokedynamic #1356,  0           // InvokeDynamic #95:apply:(Lzio/RetrySpec;)Lscala/Function1;
      26: invokeinterface #135,  2          // InterfaceMethod zio/ZIO.map:(Lscala/Function1;)Lzio/ZIO;
      31: areturn

  public static final scala.util.Either $anonfun$retryOrElseEitherFallbackSucceed$3(scala.util.Either);
    Code:
       0: aload_0
       1: areturn

  public static final org.specs2.matcher.LeftCheckedMatcher $anonfun$retryOrElseEitherFallbackSucceed$4(zio.RetrySpec);
    Code:
       0: aload_0
       1: getstatic     #1318               // Field org/specs2/matcher/ValueCheck$.MODULE$:Lorg/specs2/matcher/ValueCheck$;
       4: ldc_w         #1248               // String OrElse
       7: getstatic     #208                // Field org/specs2/matcher/describe/Diffable$.MODULE$:Lorg/specs2/matcher/describe/Diffable$;
      10: invokevirtual #591                // Method org/specs2/matcher/describe/Diffable$.stringDiffable:()Lorg/specs2/matcher/describe/Diffable;
      13: invokevirtual #1322               // Method org/specs2/matcher/ValueCheck$.typedValueCheck:(Ljava/lang/Object;Lorg/specs2/matcher/describe/Diffable;)Lorg/specs2/matcher/BeEqualTypedValueCheck;
      16: invokevirtual #1364               // Method beLeft:(Lorg/specs2/matcher/ValueCheck;)Lorg/specs2/matcher/LeftCheckedMatcher;
      19: areturn

  public static final org.specs2.matcher.MatchResult $anonfun$retryOrElseEitherFallbackSucceed$2(zio.RetrySpec, scala.util.Either);
    Code:
       0: aload_0
       1: aload_1
       2: invokedynamic #1369,  0           // InvokeDynamic #96:apply:(Lscala/util/Either;)Lscala/Function0;
       7: invokevirtual #1079               // Method theValue:(Lscala/Function0;)Lorg/specs2/matcher/MustExpectable;
      10: aload_0
      11: invokedynamic #1375,  0           // InvokeDynamic #97:apply:(Lzio/RetrySpec;)Lscala/Function0;
      16: invokevirtual #1346               // Method org/specs2/matcher/MustExpectable.must:(Lscala/Function0;)Lorg/specs2/matcher/MatchResult;
      19: areturn

  public static final zio.ZIO $anonfun$retryOrElseEitherFallbackSucceed$1(zio.RetrySpec, java.util.concurrent.atomic.AtomicReference);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #1155               // Method alwaysFail:(Ljava/util/concurrent/atomic/AtomicReference;)Lzio/ZIO;
       5: getstatic     #254                // Field zio/Schedule$.MODULE$:Lzio/Schedule$;
       8: invokevirtual #1112               // Method zio/Schedule$.once:()Lzio/ZSchedule;
      11: aload_0
      12: invokevirtual #1295               // Method ioSucceed:()Lscala/Function2;
      15: invokeinterface #1350,  3         // InterfaceMethod zio/ZIO.retryOrElseEither:(Lzio/ZSchedule;Lscala/Function2;)Lzio/ZIO;
      20: aload_0
      21: invokedynamic #1380,  0           // InvokeDynamic #98:apply:(Lzio/RetrySpec;)Lscala/Function1;
      26: invokeinterface #135,  2          // InterfaceMethod zio/ZIO.map:(Lscala/Function1;)Lzio/ZIO;
      31: areturn

  public static final scala.util.Either $anonfun$retryOrElseEitherFallbackFailed$2(scala.util.Either);
    Code:
       0: aload_0
       1: areturn

  public static final zio.ZIO $anonfun$retryOrElseEitherFallbackFailed$1(zio.RetrySpec, java.util.concurrent.atomic.AtomicReference);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #1155               // Method alwaysFail:(Ljava/util/concurrent/atomic/AtomicReference;)Lzio/ZIO;
       5: getstatic     #254                // Field zio/Schedule$.MODULE$:Lzio/Schedule$;
       8: invokevirtual #1112               // Method zio/Schedule$.once:()Lzio/ZSchedule;
      11: aload_0
      12: invokevirtual #1269               // Method ioFail:()Lscala/Function2;
      15: invokeinterface #1350,  3         // InterfaceMethod zio/ZIO.retryOrElseEither:(Lzio/ZSchedule;Lscala/Function2;)Lzio/ZIO;
      20: invokedynamic #1387,  0           // InvokeDynamic #99:apply:()Lscala/Function1;
      25: invokeinterface #135,  2          // InterfaceMethod zio/ZIO.map:(Lscala/Function1;)Lzio/ZIO;
      30: areturn

  public static final zio.ZIO $anonfun$retryOrElseEitherFallbackFailed$3(java.lang.String);
    Code:
       0: getstatic     #244                // Field zio/IO$.MODULE$:Lzio/IO$;
       3: aload_0
       4: invokevirtual #991                // Method zio/IO$.succeed:(Ljava/lang/Object;)Lzio/ZIO;
       7: areturn

  public static final zio.ZIO $anonfun$retryOrElseEitherFallbackFailed$4(scala.util.Either);
    Code:
       0: getstatic     #244                // Field zio/IO$.MODULE$:Lzio/IO$;
       3: ldc_w         #1180               // String it should not be a success
       6: invokevirtual #991                // Method zio/IO$.succeed:(Ljava/lang/Object;)Lzio/ZIO;
       9: areturn

  public static final java.lang.String $anonfun$retryOrElseEitherFallbackFailed$5();
    Code:
       0: ldc_w         #1253               // String OrElseFailed
       3: areturn

  public static final int $anonfun$failOn0$1(int);
    Code:
       0: iload_0
       1: iconst_1
       2: iadd
       3: ireturn

  public static final int $anonfun$failOn0$3(int);
    Code:
       0: iload_0
       1: ireturn

  public static final zio.ZIO $anonfun$failOn0$2(int);
    Code:
       0: iload_0
       1: iconst_1
       2: if_icmpgt     37
       5: getstatic     #244                // Field zio/IO$.MODULE$:Lzio/IO$;
       8: new           #1393               // class java/lang/StringBuilder
      11: dup
      12: ldc_w         #1394               // int 7
      15: invokespecial #1396               // Method java/lang/StringBuilder."<init>":(I)V
      18: ldc_w         #1398               // String Error:
      21: invokevirtual #1402               // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: iload_0
      25: invokevirtual #1405               // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      28: invokevirtual #1408               // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      31: invokevirtual #249                // Method zio/IO$.fail:(Ljava/lang/Object;)Lzio/ZIO;
      34: goto          47
      37: getstatic     #244                // Field zio/IO$.MODULE$:Lzio/IO$;
      40: iload_0
      41: invokestatic  #151                // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
      44: invokevirtual #991                // Method zio/IO$.succeed:(Ljava/lang/Object;)Lzio/ZIO;
      47: invokedynamic #1412,  0           // InvokeDynamic #100:apply$mcII$sp:()Lscala/runtime/java8/JFunction1$mcII$sp;
      52: invokeinterface #135,  2          // InterfaceMethod zio/ZIO.map:(Lscala/Function1;)Lzio/ZIO;
      57: areturn

  public static final int $anonfun$alwaysFail$1(int);
    Code:
       0: iload_0
       1: iconst_1
       2: iadd
       3: ireturn

  public static final scala.runtime.Nothing$ $anonfun$alwaysFail$3(scala.runtime.Nothing$);
    Code:
       0: aload_0
       1: areturn

  public static final zio.ZIO $anonfun$alwaysFail$2(int);
    Code:
       0: getstatic     #244                // Field zio/IO$.MODULE$:Lzio/IO$;
       3: new           #1393               // class java/lang/StringBuilder
       6: dup
       7: ldc_w         #1394               // int 7
      10: invokespecial #1396               // Method java/lang/StringBuilder."<init>":(I)V
      13: ldc_w         #1398               // String Error:
      16: invokevirtual #1402               // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      19: iload_0
      20: invokevirtual #1405               // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      23: invokevirtual #1408               // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      26: invokevirtual #249                // Method zio/IO$.fail:(Ljava/lang/Object;)Lzio/ZIO;
      29: invokedynamic #1422,  0           // InvokeDynamic #101:apply:()Lscala/Function1;
      34: invokeinterface #135,  2          // InterfaceMethod zio/ZIO.map:(Lscala/Function1;)Lzio/ZIO;
      39: areturn

  public static final scala.Option $anonfun$ensuring$5(scala.Option);
    Code:
       0: aload_0
       1: areturn

  public static final org.specs2.matcher.Matcher $anonfun$ensuring$6(zio.RetrySpec);
    Code:
       0: aload_0
       1: invokevirtual #1432               // Method beNone:()Lorg/specs2/matcher/Matcher;
       4: areturn

  public static final org.specs2.matcher.MatchResult $anonfun$ensuring$4(zio.RetrySpec, scala.Option);
    Code:
       0: aload_0
       1: aload_1
       2: invokedynamic #1442,  0           // InvokeDynamic #102:apply:(Lscala/Option;)Lscala/Function0;
       7: invokevirtual #1079               // Method theValue:(Lscala/Function0;)Lorg/specs2/matcher/MustExpectable;
      10: aload_0
      11: invokedynamic #1447,  0           // InvokeDynamic #103:apply:(Lzio/RetrySpec;)Lscala/Function0;
      16: invokevirtual #1346               // Method org/specs2/matcher/MustExpectable.must:(Lscala/Function0;)Lorg/specs2/matcher/MatchResult;
      19: areturn

  public static final boolean $anonfun$ensuring$8(scala.Option);
    Code:
       0: aload_0
       1: invokevirtual #1455               // Method scala/Option.isDefined:()Z
       4: ireturn

  public static final org.specs2.matcher.BeTrueMatcher $anonfun$ensuring$9(zio.RetrySpec);
    Code:
       0: aload_0
       1: invokevirtual #1461               // Method beTrue:()Lorg/specs2/matcher/BeTrueMatcher;
       4: areturn

  public static final org.specs2.matcher.MatchResult $anonfun$ensuring$7(zio.RetrySpec, scala.Option);
    Code:
       0: aload_0
       1: aload_1
       2: invokedynamic #1470,  0           // InvokeDynamic #104:apply$mcZ$sp:(Lscala/Option;)Lscala/runtime/java8/JFunction0$mcZ$sp;
       7: invokevirtual #1079               // Method theValue:(Lscala/Function0;)Lorg/specs2/matcher/MustExpectable;
      10: aload_0
      11: invokedynamic #1475,  0           // InvokeDynamic #105:apply:(Lzio/RetrySpec;)Lscala/Function0;
      16: invokevirtual #1346               // Method org/specs2/matcher/MustExpectable.must:(Lscala/Function0;)Lorg/specs2/matcher/MatchResult;
      19: areturn

  public static final org.specs2.matcher.MatchResult $anonfun$ensuring$3(zio.RetrySpec, scala.Option, scala.Option);
    Code:
       0: aload_0
       1: aload_0
       2: aload_1
       3: invokedynamic #1486,  0           // InvokeDynamic #106:apply:(Lzio/RetrySpec;Lscala/Option;)Lscala/Function0;
       8: invokevirtual #1490               // Method combineMatchResult:(Lscala/Function0;)Lorg/specs2/matcher/MatchResultLogicalCombinators$MatchResultCombinator;
      11: aload_0
      12: aload_2
      13: invokedynamic #1494,  0           // InvokeDynamic #107:apply:(Lzio/RetrySpec;Lscala/Option;)Lscala/Function0;
      18: invokevirtual #1497               // Method org/specs2/matcher/MatchResultLogicalCombinators$MatchResultCombinator.and:(Lscala/Function0;)Lorg/specs2/matcher/MatchResult;
      21: areturn

  public static final zio.ZIO $anonfun$ensuring$2(zio.RetrySpec, java.util.concurrent.atomic.AtomicReference, scala.Option);
    Code:
       0: getstatic     #669                // Field zio/Promise$.MODULE$:Lzio/Promise$;
       3: aload_1
       4: invokevirtual #1504               // Method zio/Promise$.poll$extension:(Ljava/util/concurrent/atomic/AtomicReference;)Lzio/ZIO;
       7: aload_0
       8: aload_2
       9: invokedynamic #1512,  0           // InvokeDynamic #108:apply:(Lzio/RetrySpec;Lscala/Option;)Lscala/Function1;
      14: invokeinterface #135,  2          // InterfaceMethod zio/ZIO.map:(Lscala/Function1;)Lzio/ZIO;
      19: areturn

  public static final zio.ZIO $anonfun$ensuring$1(zio.RetrySpec, java.util.concurrent.atomic.AtomicReference);
    Code:
       0: getstatic     #244                // Field zio/IO$.MODULE$:Lzio/IO$;
       3: ldc_w         #1516               // String oh no
       6: invokevirtual #249                // Method zio/IO$.fail:(Ljava/lang/Object;)Lzio/ZIO;
       9: getstatic     #254                // Field zio/Schedule$.MODULE$:Lzio/Schedule$;
      12: iconst_2
      13: invokevirtual #258                // Method zio/Schedule$.recurs:(I)Lzio/ZSchedule;
      16: invokeinterface #481,  2          // InterfaceMethod zio/ZIO.retry:(Lzio/ZSchedule;)Lzio/ZIO;
      21: getstatic     #669                // Field zio/Promise$.MODULE$:Lzio/Promise$;
      24: aload_1
      25: getstatic     #1521               // Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
      28: invokevirtual #1525               // Method zio/Promise$.succeed$extension:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Object;)Lzio/ZIO;
      31: invokeinterface #1528,  2         // InterfaceMethod zio/ZIO.ensuring:(Lzio/ZIO;)Lzio/ZIO;
      36: invokeinterface #1531,  1         // InterfaceMethod zio/ZIO.option:()Lzio/ZIO;
      41: aload_0
      42: aload_1
      43: invokedynamic #1537,  0           // InvokeDynamic #109:apply:(Lzio/RetrySpec;Ljava/util/concurrent/atomic/AtomicReference;)Lscala/Function1;
      48: invokeinterface #123,  2          // InterfaceMethod zio/ZIO.flatMap:(Lscala/Function1;)Lzio/ZIO;
      53: areturn

  public zio.RetrySpec();
    Code:
       0: aload_0
       1: invokespecial #1539               // Method zio/BaseCrossPlatformSpec."<init>":()V
       4: aload_0
       5: invokedynamic #1546,  0           // InvokeDynamic #110:apply:()Lscala/Function2;
      10: putfield      #548                // Field ioSucceed:Lscala/Function2;
      13: aload_0
      14: invokedynamic #1550,  0           // InvokeDynamic #111:apply:()Lscala/Function2;
      19: putfield      #551                // Field ioFail:Lscala/Function2;
      22: return

  public static final zio.ZIO $anonfun$notRetryOnSuccess$1$adapted(zio.RetrySpec, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #1552               // class zio/Ref
       5: invokevirtual #1556               // Method zio/Ref.zio$Ref$$value:()Ljava/util/concurrent/atomic/AtomicReference;
       8: invokestatic  #1558               // Method $anonfun$notRetryOnSuccess$1:(Lzio/RetrySpec;Ljava/util/concurrent/atomic/AtomicReference;)Lzio/ZIO;
      11: areturn

  public static final zio.ZIO $anonfun$retryOnceSuccess$1$adapted(zio.RetrySpec, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #1552               // class zio/Ref
       5: invokevirtual #1556               // Method zio/Ref.zio$Ref$$value:()Ljava/util/concurrent/atomic/AtomicReference;
       8: invokestatic  #1560               // Method $anonfun$retryOnceSuccess$1:(Lzio/RetrySpec;Ljava/util/concurrent/atomic/AtomicReference;)Lzio/ZIO;
      11: areturn

  public static final zio.ZIO $anonfun$retryOnceFail$1$adapted(zio.RetrySpec, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #1552               // class zio/Ref
       5: invokevirtual #1556               // Method zio/Ref.zio$Ref$$value:()Ljava/util/concurrent/atomic/AtomicReference;
       8: invokestatic  #1562               // Method $anonfun$retryOnceFail$1:(Lzio/RetrySpec;Ljava/util/concurrent/atomic/AtomicReference;)Lzio/ZIO;
      11: areturn

  public static final zio.ZIO $anonfun$retryRecurs0$1$adapted(zio.RetrySpec, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #1552               // class zio/Ref
       5: invokevirtual #1556               // Method zio/Ref.zio$Ref$$value:()Ljava/util/concurrent/atomic/AtomicReference;
       8: invokestatic  #1564               // Method $anonfun$retryRecurs0$1:(Lzio/RetrySpec;Ljava/util/concurrent/atomic/AtomicReference;)Lzio/ZIO;
      11: areturn

  public static final zio.ZIO $anonfun$retryRecurs0$4$adapted(java.lang.Object);
    Code:
       0: aload_0
       1: invokestatic  #1568               // Method scala/runtime/BoxesRunTime.unboxToInt:(Ljava/lang/Object;)I
       4: invokestatic  #1570               // Method $anonfun$retryRecurs0$4:(I)Lzio/ZIO;
       7: areturn

  public static final scala.Tuple2 $anonfun$retryN$1$adapted(java.lang.Object);
    Code:
       0: aload_0
       1: invokestatic  #1568               // Method scala/runtime/BoxesRunTime.unboxToInt:(Ljava/lang/Object;)I
       4: invokestatic  #1572               // Method $anonfun$retryN$1:(I)Lscala/Tuple2;
       7: areturn

  public static final scala.Tuple2 $anonfun$retryNUnitIntervalJittered$2$adapted(java.lang.Object);
    Code:
       0: aload_0
       1: invokestatic  #1568               // Method scala/runtime/BoxesRunTime.unboxToInt:(Ljava/lang/Object;)I
       4: invokestatic  #1574               // Method $anonfun$retryNUnitIntervalJittered$2:(I)Lscala/Tuple2;
       7: areturn

  public static final scala.Tuple2 $anonfun$retryNCustomIntervalJittered$2$adapted(java.lang.Object);
    Code:
       0: aload_0
       1: invokestatic  #1568               // Method scala/runtime/BoxesRunTime.unboxToInt:(Ljava/lang/Object;)I
       4: invokestatic  #1576               // Method $anonfun$retryNCustomIntervalJittered$2:(I)Lscala/Tuple2;
       7: areturn

  public static final java.lang.Object $anonfun$fixedWithErrorPredicate$3$adapted(java.lang.String);
    Code:
       0: aload_0
       1: invokestatic  #1578               // Method $anonfun$fixedWithErrorPredicate$3:(Ljava/lang/String;)Z
       4: invokestatic  #1582               // Method scala/runtime/BoxesRunTime.boxToBoolean:(Z)Ljava/lang/Boolean;
       7: areturn

  public static final scala.Tuple2 $anonfun$fixedWithErrorPredicate$4$adapted(java.lang.Object);
    Code:
       0: aload_0
       1: invokestatic  #1568               // Method scala/runtime/BoxesRunTime.unboxToInt:(Ljava/lang/Object;)I
       4: invokestatic  #1584               // Method $anonfun$fixedWithErrorPredicate$4:(I)Lscala/Tuple2;
       7: areturn

  public static final java.lang.Object $anonfun$checkErrorWithPredicate$3$adapted(java.lang.String);
    Code:
       0: aload_0
       1: invokestatic  #1586               // Method $anonfun$checkErrorWithPredicate$3:(Ljava/lang/String;)Z
       4: invokestatic  #1582               // Method scala/runtime/BoxesRunTime.boxToBoolean:(Z)Ljava/lang/Boolean;
       7: areturn

  public static final scala.Tuple2 $anonfun$checkErrorWithPredicate$4$adapted(java.lang.Object);
    Code:
       0: aload_0
       1: invokestatic  #1568               // Method scala/runtime/BoxesRunTime.unboxToInt:(Ljava/lang/Object;)I
       4: invokestatic  #1588               // Method $anonfun$checkErrorWithPredicate$4:(I)Lscala/Tuple2;
       7: areturn

  public static final zio.ZIO $anonfun$retryOrElseSucceed$1$adapted(zio.RetrySpec, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #1552               // class zio/Ref
       5: invokevirtual #1556               // Method zio/Ref.zio$Ref$$value:()Ljava/util/concurrent/atomic/AtomicReference;
       8: invokestatic  #1590               // Method $anonfun$retryOrElseSucceed$1:(Lzio/RetrySpec;Ljava/util/concurrent/atomic/AtomicReference;)Lzio/ZIO;
      11: areturn

  public static final zio.ZIO $anonfun$retryOrElseFallbackSucceed$1$adapted(zio.RetrySpec, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #1552               // class zio/Ref
       5: invokevirtual #1556               // Method zio/Ref.zio$Ref$$value:()Ljava/util/concurrent/atomic/AtomicReference;
       8: invokestatic  #1592               // Method $anonfun$retryOrElseFallbackSucceed$1:(Lzio/RetrySpec;Ljava/util/concurrent/atomic/AtomicReference;)Lzio/ZIO;
      11: areturn

  public static final zio.ZIO $anonfun$retryOrElseFallbackFailed$1$adapted(zio.RetrySpec, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #1552               // class zio/Ref
       5: invokevirtual #1556               // Method zio/Ref.zio$Ref$$value:()Ljava/util/concurrent/atomic/AtomicReference;
       8: invokestatic  #1594               // Method $anonfun$retryOrElseFallbackFailed$1:(Lzio/RetrySpec;Ljava/util/concurrent/atomic/AtomicReference;)Lzio/ZIO;
      11: areturn

  public static final zio.ZIO $anonfun$retryOrElseFallbackFailed$4$adapted(java.lang.Object);
    Code:
       0: aload_0
       1: invokestatic  #1568               // Method scala/runtime/BoxesRunTime.unboxToInt:(Ljava/lang/Object;)I
       4: invokestatic  #1596               // Method $anonfun$retryOrElseFallbackFailed$4:(I)Lzio/ZIO;
       7: areturn

  public static final zio.ZIO $anonfun$retryOrElseEitherSucceed$1$adapted(zio.RetrySpec, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #1552               // class zio/Ref
       5: invokevirtual #1556               // Method zio/Ref.zio$Ref$$value:()Ljava/util/concurrent/atomic/AtomicReference;
       8: invokestatic  #1598               // Method $anonfun$retryOrElseEitherSucceed$1:(Lzio/RetrySpec;Ljava/util/concurrent/atomic/AtomicReference;)Lzio/ZIO;
      11: areturn

  public static final zio.ZIO $anonfun$retryOrElseEitherFallbackSucceed$1$adapted(zio.RetrySpec, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #1552               // class zio/Ref
       5: invokevirtual #1556               // Method zio/Ref.zio$Ref$$value:()Ljava/util/concurrent/atomic/AtomicReference;
       8: invokestatic  #1600               // Method $anonfun$retryOrElseEitherFallbackSucceed$1:(Lzio/RetrySpec;Ljava/util/concurrent/atomic/AtomicReference;)Lzio/ZIO;
      11: areturn

  public static final zio.ZIO $anonfun$retryOrElseEitherFallbackFailed$1$adapted(zio.RetrySpec, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #1552               // class zio/Ref
       5: invokevirtual #1556               // Method zio/Ref.zio$Ref$$value:()Ljava/util/concurrent/atomic/AtomicReference;
       8: invokestatic  #1602               // Method $anonfun$retryOrElseEitherFallbackFailed$1:(Lzio/RetrySpec;Ljava/util/concurrent/atomic/AtomicReference;)Lzio/ZIO;
      11: areturn

  public static final zio.ZIO $anonfun$failOn0$2$adapted(java.lang.Object);
    Code:
       0: aload_0
       1: invokestatic  #1568               // Method scala/runtime/BoxesRunTime.unboxToInt:(Ljava/lang/Object;)I
       4: invokestatic  #1604               // Method $anonfun$failOn0$2:(I)Lzio/ZIO;
       7: areturn

  public static final zio.ZIO $anonfun$alwaysFail$2$adapted(java.lang.Object);
    Code:
       0: aload_0
       1: invokestatic  #1568               // Method scala/runtime/BoxesRunTime.unboxToInt:(Ljava/lang/Object;)I
       4: invokestatic  #1606               // Method $anonfun$alwaysFail$2:(I)Lzio/ZIO;
       7: areturn

  public static final zio.ZIO $anonfun$ensuring$1$adapted(zio.RetrySpec, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #1608               // class zio/Promise
       5: invokevirtual #1611               // Method zio/Promise.zio$Promise$$state:()Ljava/util/concurrent/atomic/AtomicReference;
       8: invokestatic  #1613               // Method $anonfun$ensuring$1:(Lzio/RetrySpec;Ljava/util/concurrent/atomic/AtomicReference;)Lzio/ZIO;
      11: areturn

  public static final org.specs2.matcher.MatchResult $anonfun$notRetryOnSuccess$4$adapted(zio.RetrySpec, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1568               // Method scala/runtime/BoxesRunTime.unboxToInt:(Ljava/lang/Object;)I
       5: invokestatic  #1615               // Method $anonfun$notRetryOnSuccess$4:(Lzio/RetrySpec;I)Lorg/specs2/matcher/MatchResult;
       8: areturn

  public static final zio.ZIO $anonfun$notRetryOnSuccess$3$adapted(zio.RetrySpec, java.util.concurrent.atomic.AtomicReference, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1568               // Method scala/runtime/BoxesRunTime.unboxToInt:(Ljava/lang/Object;)I
       6: invokestatic  #1617               // Method $anonfun$notRetryOnSuccess$3:(Lzio/RetrySpec;Ljava/util/concurrent/atomic/AtomicReference;I)Lzio/ZIO;
       9: areturn

  public static final org.specs2.matcher.MatchResult $anonfun$retryOnceSuccess$3$adapted(zio.RetrySpec, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1568               // Method scala/runtime/BoxesRunTime.unboxToInt:(Ljava/lang/Object;)I
       5: invokestatic  #1619               // Method $anonfun$retryOnceSuccess$3:(Lzio/RetrySpec;I)Lorg/specs2/matcher/MatchResult;
       8: areturn

  public static final zio.ZIO $anonfun$retryOnceSuccess$2$adapted(zio.RetrySpec, java.util.concurrent.atomic.AtomicReference, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1568               // Method scala/runtime/BoxesRunTime.unboxToInt:(Ljava/lang/Object;)I
       6: invokestatic  #1621               // Method $anonfun$retryOnceSuccess$2:(Lzio/RetrySpec;Ljava/util/concurrent/atomic/AtomicReference;I)Lzio/ZIO;
       9: areturn

  public static final org.specs2.matcher.MatchResult $anonfun$retryOrElseSucceed$2$adapted(zio.RetrySpec, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1568               // Method scala/runtime/BoxesRunTime.unboxToInt:(Ljava/lang/Object;)I
       5: invokestatic  #1623               // Method $anonfun$retryOrElseSucceed$2:(Lzio/RetrySpec;I)Lorg/specs2/matcher/MatchResult;
       8: areturn

  private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda);
    Code:
       0: aload_0
       1: invokedynamic #1635,  0           // InvokeDynamic #112:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
       6: areturn
}
