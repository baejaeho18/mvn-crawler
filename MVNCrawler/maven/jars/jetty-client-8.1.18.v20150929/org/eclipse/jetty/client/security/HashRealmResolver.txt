Compiled from "HashRealmResolver.java"
public class org.eclipse.jetty.client.security.HashRealmResolver implements org.eclipse.jetty.client.security.RealmResolver {
  private java.util.Map<java.lang.String, org.eclipse.jetty.client.security.Realm> _realmMap;

  public org.eclipse.jetty.client.security.HashRealmResolver();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public void addSecurityRealm(org.eclipse.jetty.client.security.Realm);
    Code:
       0: aload_0
       1: getfield      #2                  // Field _realmMap:Ljava/util/Map;
       4: ifnonnull     18
       7: aload_0
       8: new           #3                  // class java/util/HashMap
      11: dup
      12: invokespecial #4                  // Method java/util/HashMap."<init>":()V
      15: putfield      #2                  // Field _realmMap:Ljava/util/Map;
      18: aload_0
      19: getfield      #2                  // Field _realmMap:Ljava/util/Map;
      22: aload_1
      23: invokeinterface #5,  1            // InterfaceMethod org/eclipse/jetty/client/security/Realm.getId:()Ljava/lang/String;
      28: aload_1
      29: invokeinterface #6,  3            // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      34: pop
      35: return

  public org.eclipse.jetty.client.security.Realm getRealm(java.lang.String, org.eclipse.jetty.client.HttpDestination, java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field _realmMap:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #7,  2            // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #8                  // class org/eclipse/jetty/client/security/Realm
      13: areturn
}
