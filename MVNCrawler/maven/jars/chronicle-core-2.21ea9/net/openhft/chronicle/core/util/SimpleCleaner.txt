Compiled from "SimpleCleaner.java"
public class net.openhft.chronicle.core.util.SimpleCleaner {
  private static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<net.openhft.chronicle.core.util.SimpleCleaner> CLEANED_FLAG;

  private final java.lang.Runnable thunk;

  private volatile int cleaned;

  public net.openhft.chronicle.core.util.SimpleCleaner(java.lang.Runnable);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field cleaned:I
       9: aload_0
      10: aload_1
      11: putfield      #3                  // Field thunk:Ljava/lang/Runnable;
      14: return

  public void clean();
    Code:
       0: getstatic     #4                  // Field CLEANED_FLAG:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: iconst_0
       5: iconst_1
       6: invokevirtual #5                  // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
       9: ifeq          21
      12: aload_0
      13: getfield      #3                  // Field thunk:Ljava/lang/Runnable;
      16: invokeinterface #6,  1            // InterfaceMethod java/lang/Runnable.run:()V
      21: return

  static {};
    Code:
       0: ldc           #7                  // class net/openhft/chronicle/core/util/SimpleCleaner
       2: ldc           #8                  // String cleaned
       4: invokestatic  #9                  // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       7: putstatic     #4                  // Field CLEANED_FLAG:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: return
}
