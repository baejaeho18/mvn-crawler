Compiled from "BackgroundResourceReleaser.java"
public final class net.openhft.chronicle.core.io.BackgroundResourceReleaser extends java.lang.Enum<net.openhft.chronicle.core.io.BackgroundResourceReleaser> {
  public static final java.lang.String BACKGROUND_RESOURCE_RELEASER;

  static final boolean BG_RELEASER;

  private static final java.util.concurrent.BlockingQueue<java.lang.Object> RESOURCES;

  private static final java.util.concurrent.atomic.AtomicLong COUNTER;

  private static final java.lang.Thread RELEASER;

  private static final net.openhft.chronicle.core.io.BackgroundResourceReleaser[] $VALUES;

  public static net.openhft.chronicle.core.io.BackgroundResourceReleaser[] values();
    Code:
       0: getstatic     #1                  // Field $VALUES:[Lnet/openhft/chronicle/core/io/BackgroundResourceReleaser;
       3: invokevirtual #2                  // Method "[Lnet/openhft/chronicle/core/io/BackgroundResourceReleaser;".clone:()Ljava/lang/Object;
       6: checkcast     #3                  // class "[Lnet/openhft/chronicle/core/io/BackgroundResourceReleaser;"
       9: areturn

  public static net.openhft.chronicle.core.io.BackgroundResourceReleaser valueOf(java.lang.String);
    Code:
       0: ldc           #4                  // class net/openhft/chronicle/core/io/BackgroundResourceReleaser
       2: aload_0
       3: invokestatic  #5                  // Method java/lang/Enum.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;
       6: checkcast     #4                  // class net/openhft/chronicle/core/io/BackgroundResourceReleaser
       9: areturn

  private net.openhft.chronicle.core.io.BackgroundResourceReleaser();
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokespecial #6                  // Method java/lang/Enum."<init>":(Ljava/lang/String;I)V
       6: return

  private static void runReleaseResources();
    Code:
       0: getstatic     #7                  // Field RESOURCES:Ljava/util/concurrent/BlockingQueue;
       3: invokeinterface #8,  1            // InterfaceMethod java/util/concurrent/BlockingQueue.take:()Ljava/lang/Object;
       8: astore_0
       9: aload_0
      10: invokestatic  #9                  // Method performRelease:(Ljava/lang/Object;)V
      13: goto          0
      16: astore_0
      17: invokestatic  #11                 // Method net/openhft/chronicle/core/Jvm.warn:()Lnet/openhft/chronicle/core/onoes/ExceptionHandler;
      20: ldc           #4                  // class net/openhft/chronicle/core/io/BackgroundResourceReleaser
      22: ldc           #12                 // String Died on interrupt
      24: invokeinterface #13,  3           // InterfaceMethod net/openhft/chronicle/core/onoes/ExceptionHandler.on:(Ljava/lang/Class;Ljava/lang/String;)V
      29: return
    Exception table:
       from    to  target type
           0    16    16   Class java/lang/InterruptedException

  public static void release(net.openhft.chronicle.core.io.AbstractCloseable);
    Code:
       0: aload_0
       1: invokestatic  #14                 // Method release0:(Ljava/lang/Object;)V
       4: return

  public static void release(net.openhft.chronicle.core.io.AbstractReferenceCounted);
    Code:
       0: aload_0
       1: invokestatic  #14                 // Method release0:(Ljava/lang/Object;)V
       4: return

  public static void run(java.lang.Runnable);
    Code:
       0: aload_0
       1: invokestatic  #14                 // Method release0:(Ljava/lang/Object;)V
       4: return

  private static void release0(java.lang.Object);
    Code:
       0: getstatic     #15                 // Field COUNTER:Ljava/util/concurrent/atomic/AtomicLong;
       3: invokevirtual #16                 // Method java/util/concurrent/atomic/AtomicLong.incrementAndGet:()J
       6: pop2
       7: getstatic     #7                  // Field RESOURCES:Ljava/util/concurrent/BlockingQueue;
      10: aload_0
      11: invokeinterface #17,  2           // InterfaceMethod java/util/concurrent/BlockingQueue.offer:(Ljava/lang/Object;)Z
      16: ifeq          20
      19: return
      20: aload_0
      21: invokestatic  #9                  // Method performRelease:(Ljava/lang/Object;)V
      24: return

  public static void releasePendingResources();
    Code:
       0: getstatic     #7                  // Field RESOURCES:Ljava/util/concurrent/BlockingQueue;
       3: lconst_1
       4: getstatic     #18                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
       7: invokeinterface #19,  4           // InterfaceMethod java/util/concurrent/BlockingQueue.poll:(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;
      12: astore_0
      13: aload_0
      14: ifnonnull     20
      17: goto          27
      20: aload_0
      21: invokestatic  #9                  // Method performRelease:(Ljava/lang/Object;)V
      24: goto          0
      27: iconst_0
      28: istore_0
      29: iload_0
      30: sipush        1000
      33: if_icmpge     57
      36: getstatic     #15                 // Field COUNTER:Ljava/util/concurrent/atomic/AtomicLong;
      39: invokevirtual #20                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
      42: lconst_0
      43: lcmp
      44: ifle          57
      47: lconst_1
      48: invokestatic  #21                 // Method net/openhft/chronicle/core/Jvm.pause:(J)V
      51: iinc          0, 1
      54: goto          29
      57: getstatic     #15                 // Field COUNTER:Ljava/util/concurrent/atomic/AtomicLong;
      60: invokevirtual #20                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
      63: lstore_0
      64: lload_0
      65: lconst_0
      66: lcmp
      67: ifeq          104
      70: invokestatic  #11                 // Method net/openhft/chronicle/core/Jvm.warn:()Lnet/openhft/chronicle/core/onoes/ExceptionHandler;
      73: ldc           #4                  // class net/openhft/chronicle/core/io/BackgroundResourceReleaser
      75: new           #22                 // class java/lang/StringBuilder
      78: dup
      79: invokespecial #23                 // Method java/lang/StringBuilder."<init>":()V
      82: ldc           #24                 // String Still got
      84: invokevirtual #25                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      87: lload_0
      88: invokevirtual #26                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      91: ldc           #27                 // String  resources to clean
      93: invokevirtual #25                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      96: invokevirtual #28                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      99: invokeinterface #13,  3           // InterfaceMethod net/openhft/chronicle/core/onoes/ExceptionHandler.on:(Ljava/lang/Class;Ljava/lang/String;)V
     104: goto          114
     107: astore_0
     108: invokestatic  #29                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
     111: invokevirtual #30                 // Method java/lang/Thread.interrupt:()V
     114: return
    Exception table:
       from    to  target type
           0   104   107   Class java/lang/InterruptedException

  private static void performRelease(java.lang.Object);
    Code:
       0: aload_0
       1: instanceof    #31                 // class net/openhft/chronicle/core/io/AbstractCloseable
       4: ifeq          17
       7: aload_0
       8: checkcast     #31                 // class net/openhft/chronicle/core/io/AbstractCloseable
      11: invokevirtual #32                 // Method net/openhft/chronicle/core/io/AbstractCloseable.callPerformClose:()V
      14: goto          85
      17: aload_0
      18: instanceof    #33                 // class net/openhft/chronicle/core/io/AbstractReferenceCounted
      21: ifeq          34
      24: aload_0
      25: checkcast     #33                 // class net/openhft/chronicle/core/io/AbstractReferenceCounted
      28: invokevirtual #34                 // Method net/openhft/chronicle/core/io/AbstractReferenceCounted.performRelease:()V
      31: goto          85
      34: aload_0
      35: instanceof    #35                 // class java/lang/Runnable
      38: ifeq          53
      41: aload_0
      42: checkcast     #35                 // class java/lang/Runnable
      45: invokeinterface #36,  1           // InterfaceMethod java/lang/Runnable.run:()V
      50: goto          85
      53: invokestatic  #11                 // Method net/openhft/chronicle/core/Jvm.warn:()Lnet/openhft/chronicle/core/onoes/ExceptionHandler;
      56: ldc           #4                  // class net/openhft/chronicle/core/io/BackgroundResourceReleaser
      58: new           #22                 // class java/lang/StringBuilder
      61: dup
      62: invokespecial #23                 // Method java/lang/StringBuilder."<init>":()V
      65: ldc           #37                 // String Don\'t know how to release a
      67: invokevirtual #25                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      70: aload_0
      71: invokevirtual #38                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      74: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      77: invokevirtual #28                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      80: invokeinterface #13,  3           // InterfaceMethod net/openhft/chronicle/core/onoes/ExceptionHandler.on:(Ljava/lang/Class;Ljava/lang/String;)V
      85: getstatic     #15                 // Field COUNTER:Ljava/util/concurrent/atomic/AtomicLong;
      88: invokevirtual #40                 // Method java/util/concurrent/atomic/AtomicLong.decrementAndGet:()J
      91: pop2
      92: goto          129
      95: astore_1
      96: invokestatic  #11                 // Method net/openhft/chronicle/core/Jvm.warn:()Lnet/openhft/chronicle/core/onoes/ExceptionHandler;
      99: ldc           #4                  // class net/openhft/chronicle/core/io/BackgroundResourceReleaser
     101: ldc           #42                 // String Failed in release/close
     103: aload_1
     104: invokeinterface #43,  4           // InterfaceMethod net/openhft/chronicle/core/onoes/ExceptionHandler.on:(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Throwable;)V
     109: getstatic     #15                 // Field COUNTER:Ljava/util/concurrent/atomic/AtomicLong;
     112: invokevirtual #40                 // Method java/util/concurrent/atomic/AtomicLong.decrementAndGet:()J
     115: pop2
     116: goto          129
     119: astore_2
     120: getstatic     #15                 // Field COUNTER:Ljava/util/concurrent/atomic/AtomicLong;
     123: invokevirtual #40                 // Method java/util/concurrent/atomic/AtomicLong.decrementAndGet:()J
     126: pop2
     127: aload_2
     128: athrow
     129: return
    Exception table:
       from    to  target type
           0    85    95   Class java/lang/Throwable
           0    85   119   any
          95   109   119   any

  static {};
    Code:
       0: iconst_0
       1: anewarray     #4                  // class net/openhft/chronicle/core/io/BackgroundResourceReleaser
       4: putstatic     #1                  // Field $VALUES:[Lnet/openhft/chronicle/core/io/BackgroundResourceReleaser;
       7: ldc           #44                 // String background.releaser
       9: iconst_1
      10: invokestatic  #45                 // Method net/openhft/chronicle/core/Jvm.getBoolean:(Ljava/lang/String;Z)Z
      13: putstatic     #46                 // Field BG_RELEASER:Z
      16: new           #47                 // class java/util/concurrent/ArrayBlockingQueue
      19: dup
      20: sipush        128
      23: invokespecial #48                 // Method java/util/concurrent/ArrayBlockingQueue."<init>":(I)V
      26: putstatic     #7                  // Field RESOURCES:Ljava/util/concurrent/BlockingQueue;
      29: new           #49                 // class java/util/concurrent/atomic/AtomicLong
      32: dup
      33: invokespecial #50                 // Method java/util/concurrent/atomic/AtomicLong."<init>":()V
      36: putstatic     #15                 // Field COUNTER:Ljava/util/concurrent/atomic/AtomicLong;
      39: new           #51                 // class java/lang/Thread
      42: dup
      43: invokedynamic #52,  0             // InvokeDynamic #0:run:()Ljava/lang/Runnable;
      48: ldc           #53                 // String background~resource~releaser
      50: invokespecial #54                 // Method java/lang/Thread."<init>":(Ljava/lang/Runnable;Ljava/lang/String;)V
      53: putstatic     #55                 // Field RELEASER:Ljava/lang/Thread;
      56: getstatic     #55                 // Field RELEASER:Ljava/lang/Thread;
      59: iconst_1
      60: invokevirtual #56                 // Method java/lang/Thread.setDaemon:(Z)V
      63: getstatic     #55                 // Field RELEASER:Ljava/lang/Thread;
      66: invokevirtual #57                 // Method java/lang/Thread.start:()V
      69: return
}
