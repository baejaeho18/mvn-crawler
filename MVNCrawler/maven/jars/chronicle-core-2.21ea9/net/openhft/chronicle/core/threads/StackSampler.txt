Compiled from "StackSampler.java"
public class net.openhft.chronicle.core.threads.StackSampler {
  private final java.lang.Thread sampler;

  private volatile java.lang.Thread thread;

  private volatile java.lang.StackTraceElement[] stack;

  public net.openhft.chronicle.core.threads.StackSampler();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aconst_null
       6: putfield      #2                  // Field thread:Ljava/lang/Thread;
       9: aload_0
      10: aconst_null
      11: putfield      #3                  // Field stack:[Ljava/lang/StackTraceElement;
      14: aload_0
      15: new           #4                  // class java/lang/Thread
      18: dup
      19: aload_0
      20: invokedynamic #5,  0              // InvokeDynamic #0:run:(Lnet/openhft/chronicle/core/threads/StackSampler;)Ljava/lang/Runnable;
      25: ldc           #6                  // String Thread sampler
      27: invokespecial #7                  // Method java/lang/Thread."<init>":(Ljava/lang/Runnable;Ljava/lang/String;)V
      30: putfield      #8                  // Field sampler:Ljava/lang/Thread;
      33: aload_0
      34: getfield      #8                  // Field sampler:Ljava/lang/Thread;
      37: iconst_1
      38: invokevirtual #9                  // Method java/lang/Thread.setDaemon:(Z)V
      41: aload_0
      42: getfield      #8                  // Field sampler:Ljava/lang/Thread;
      45: invokevirtual #10                 // Method java/lang/Thread.start:()V
      48: return

  void sampling();
    Code:
       0: invokestatic  #11                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
       3: invokevirtual #12                 // Method java/lang/Thread.isInterrupted:()Z
       6: ifne          45
       9: aload_0
      10: getfield      #2                  // Field thread:Ljava/lang/Thread;
      13: astore_1
      14: aload_1
      15: ifnull        36
      18: aload_1
      19: invokevirtual #13                 // Method java/lang/Thread.getStackTrace:()[Ljava/lang/StackTraceElement;
      22: astore_2
      23: aload_0
      24: getfield      #2                  // Field thread:Ljava/lang/Thread;
      27: aload_1
      28: if_acmpne     36
      31: aload_0
      32: aload_2
      33: putfield      #3                  // Field stack:[Ljava/lang/StackTraceElement;
      36: ldc2_w        #14                 // long 10000l
      39: invokestatic  #16                 // Method java/util/concurrent/locks/LockSupport.parkNanos:(J)V
      42: goto          0
      45: return

  public void stop();
    Code:
       0: aload_0
       1: getfield      #8                  // Field sampler:Ljava/lang/Thread;
       4: invokevirtual #17                 // Method java/lang/Thread.interrupt:()V
       7: return

  public void thread(java.lang.Thread);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2                  // Field thread:Ljava/lang/Thread;
       5: return

  public java.lang.StackTraceElement[] getAndReset();
    Code:
       0: aload_0
       1: getfield      #3                  // Field stack:[Ljava/lang/StackTraceElement;
       4: astore_1
       5: aload_0
       6: aconst_null
       7: putfield      #2                  // Field thread:Ljava/lang/Thread;
      10: aload_0
      11: aconst_null
      12: putfield      #3                  // Field stack:[Ljava/lang/StackTraceElement;
      15: aload_1
      16: areturn
}
