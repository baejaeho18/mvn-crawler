Compiled from "DoubleNode.java"
public class com.fasterxml.jackson.databind.node.DoubleNode extends com.fasterxml.jackson.databind.node.NumericNode {
  protected final double _value;

  public com.fasterxml.jackson.databind.node.DoubleNode(double);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method com/fasterxml/jackson/databind/node/NumericNode."<init>":()V
       4: aload_0
       5: dload_1
       6: putfield      #2                  // Field _value:D
       9: return

  public static com.fasterxml.jackson.databind.node.DoubleNode valueOf(double);
    Code:
       0: new           #3                  // class com/fasterxml/jackson/databind/node/DoubleNode
       3: dup
       4: dload_0
       5: invokespecial #4                  // Method "<init>":(D)V
       8: areturn

  public com.fasterxml.jackson.core.JsonToken asToken();
    Code:
       0: getstatic     #5                  // Field com/fasterxml/jackson/core/JsonToken.VALUE_NUMBER_FLOAT:Lcom/fasterxml/jackson/core/JsonToken;
       3: areturn

  public com.fasterxml.jackson.core.JsonParser$NumberType numberType();
    Code:
       0: getstatic     #6                  // Field com/fasterxml/jackson/core/JsonParser$NumberType.DOUBLE:Lcom/fasterxml/jackson/core/JsonParser$NumberType;
       3: areturn

  public boolean isFloatingPointNumber();
    Code:
       0: iconst_1
       1: ireturn

  public boolean isDouble();
    Code:
       0: iconst_1
       1: ireturn

  public boolean canConvertToInt();
    Code:
       0: aload_0
       1: getfield      #2                  // Field _value:D
       4: ldc2_w        #8                  // double -2.147483648E9d
       7: dcmpl
       8: iflt          26
      11: aload_0
      12: getfield      #2                  // Field _value:D
      15: ldc2_w        #10                 // double 2.147483647E9d
      18: dcmpg
      19: ifgt          26
      22: iconst_1
      23: goto          27
      26: iconst_0
      27: ireturn

  public boolean canConvertToLong();
    Code:
       0: aload_0
       1: getfield      #2                  // Field _value:D
       4: ldc2_w        #13                 // double -9.223372036854776E18d
       7: dcmpl
       8: iflt          26
      11: aload_0
      12: getfield      #2                  // Field _value:D
      15: ldc2_w        #15                 // double 9.223372036854776E18d
      18: dcmpg
      19: ifgt          26
      22: iconst_1
      23: goto          27
      26: iconst_0
      27: ireturn

  public boolean canConvertToExactIntegral();
    Code:
       0: aload_0
       1: getfield      #2                  // Field _value:D
       4: invokestatic  #17                 // Method java/lang/Double.isNaN:(D)Z
       7: ifne          39
      10: aload_0
      11: getfield      #2                  // Field _value:D
      14: invokestatic  #18                 // Method java/lang/Double.isInfinite:(D)Z
      17: ifne          39
      20: aload_0
      21: getfield      #2                  // Field _value:D
      24: aload_0
      25: getfield      #2                  // Field _value:D
      28: invokestatic  #19                 // Method java/lang/Math.rint:(D)D
      31: dcmpl
      32: ifne          39
      35: iconst_1
      36: goto          40
      39: iconst_0
      40: ireturn

  public java.lang.Number numberValue();
    Code:
       0: aload_0
       1: getfield      #2                  // Field _value:D
       4: invokestatic  #20                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
       7: areturn

  public short shortValue();
    Code:
       0: aload_0
       1: getfield      #2                  // Field _value:D
       4: d2i
       5: i2s
       6: ireturn

  public int intValue();
    Code:
       0: aload_0
       1: getfield      #2                  // Field _value:D
       4: d2i
       5: ireturn

  public long longValue();
    Code:
       0: aload_0
       1: getfield      #2                  // Field _value:D
       4: d2l
       5: lreturn

  public float floatValue();
    Code:
       0: aload_0
       1: getfield      #2                  // Field _value:D
       4: d2f
       5: freturn

  public double doubleValue();
    Code:
       0: aload_0
       1: getfield      #2                  // Field _value:D
       4: dreturn

  public java.math.BigDecimal decimalValue();
    Code:
       0: aload_0
       1: getfield      #2                  // Field _value:D
       4: invokestatic  #21                 // Method java/math/BigDecimal.valueOf:(D)Ljava/math/BigDecimal;
       7: areturn

  public java.math.BigInteger bigIntegerValue();
    Code:
       0: aload_0
       1: invokevirtual #22                 // Method decimalValue:()Ljava/math/BigDecimal;
       4: invokevirtual #23                 // Method java/math/BigDecimal.toBigInteger:()Ljava/math/BigInteger;
       7: areturn

  public java.lang.String asText();
    Code:
       0: aload_0
       1: getfield      #2                  // Field _value:D
       4: invokestatic  #24                 // Method com/fasterxml/jackson/core/io/NumberOutput.toString:(D)Ljava/lang/String;
       7: areturn

  public boolean isNaN();
    Code:
       0: aload_0
       1: getfield      #2                  // Field _value:D
       4: invokestatic  #17                 // Method java/lang/Double.isNaN:(D)Z
       7: ifne          20
      10: aload_0
      11: getfield      #2                  // Field _value:D
      14: invokestatic  #18                 // Method java/lang/Double.isInfinite:(D)Z
      17: ifeq          24
      20: iconst_1
      21: goto          25
      24: iconst_0
      25: ireturn

  public final void serialize(com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider) throws java.io.IOException;
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #2                  // Field _value:D
       5: invokevirtual #25                 // Method com/fasterxml/jackson/core/JsonGenerator.writeNumber:(D)V
       8: return

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: aload_0
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: ifnonnull     13
      11: iconst_0
      12: ireturn
      13: aload_1
      14: instanceof    #3                  // class com/fasterxml/jackson/databind/node/DoubleNode
      17: ifeq          45
      20: aload_1
      21: checkcast     #3                  // class com/fasterxml/jackson/databind/node/DoubleNode
      24: getfield      #2                  // Field _value:D
      27: dstore_2
      28: aload_0
      29: getfield      #2                  // Field _value:D
      32: dload_2
      33: invokestatic  #26                 // Method java/lang/Double.compare:(DD)I
      36: ifne          43
      39: iconst_1
      40: goto          44
      43: iconst_0
      44: ireturn
      45: iconst_0
      46: ireturn

  public int hashCode();
    Code:
       0: aload_0
       1: getfield      #2                  // Field _value:D
       4: invokestatic  #27                 // Method java/lang/Double.doubleToLongBits:(D)J
       7: lstore_1
       8: lload_1
       9: l2i
      10: lload_1
      11: bipush        32
      13: lshr
      14: l2i
      15: ixor
      16: ireturn
}
