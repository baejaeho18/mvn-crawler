Compiled from "LRUMap.java"
public class com.fasterxml.jackson.databind.util.LRUMap<K, V> implements com.fasterxml.jackson.databind.util.LookupCache<K, V>, java.io.Serializable {
  private static final long serialVersionUID;

  protected final transient int _maxEntries;

  protected final transient java.util.concurrent.ConcurrentHashMap<K, V> _map;

  protected transient int _jdkSerializeMaxEntries;

  public com.fasterxml.jackson.databind.util.LRUMap(int, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/concurrent/ConcurrentHashMap
       8: dup
       9: iload_1
      10: ldc           #3                  // float 0.8f
      12: iconst_4
      13: invokespecial #4                  // Method java/util/concurrent/ConcurrentHashMap."<init>":(IFI)V
      16: putfield      #5                  // Field _map:Ljava/util/concurrent/ConcurrentHashMap;
      19: aload_0
      20: iload_2
      21: putfield      #6                  // Field _maxEntries:I
      24: return

  public V put(K, V);
    Code:
       0: aload_0
       1: getfield      #5                  // Field _map:Ljava/util/concurrent/ConcurrentHashMap;
       4: invokevirtual #7                  // Method java/util/concurrent/ConcurrentHashMap.size:()I
       7: aload_0
       8: getfield      #6                  // Field _maxEntries:I
      11: if_icmplt     48
      14: aload_0
      15: dup
      16: astore_3
      17: monitorenter
      18: aload_0
      19: getfield      #5                  // Field _map:Ljava/util/concurrent/ConcurrentHashMap;
      22: invokevirtual #7                  // Method java/util/concurrent/ConcurrentHashMap.size:()I
      25: aload_0
      26: getfield      #6                  // Field _maxEntries:I
      29: if_icmplt     36
      32: aload_0
      33: invokevirtual #8                  // Method clear:()V
      36: aload_3
      37: monitorexit
      38: goto          48
      41: astore        4
      43: aload_3
      44: monitorexit
      45: aload         4
      47: athrow
      48: aload_0
      49: getfield      #5                  // Field _map:Ljava/util/concurrent/ConcurrentHashMap;
      52: aload_1
      53: aload_2
      54: invokevirtual #9                  // Method java/util/concurrent/ConcurrentHashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      57: areturn
    Exception table:
       from    to  target type
          18    38    41   any
          41    45    41   any

  public V putIfAbsent(K, V);
    Code:
       0: aload_0
       1: getfield      #5                  // Field _map:Ljava/util/concurrent/ConcurrentHashMap;
       4: invokevirtual #7                  // Method java/util/concurrent/ConcurrentHashMap.size:()I
       7: aload_0
       8: getfield      #6                  // Field _maxEntries:I
      11: if_icmplt     48
      14: aload_0
      15: dup
      16: astore_3
      17: monitorenter
      18: aload_0
      19: getfield      #5                  // Field _map:Ljava/util/concurrent/ConcurrentHashMap;
      22: invokevirtual #7                  // Method java/util/concurrent/ConcurrentHashMap.size:()I
      25: aload_0
      26: getfield      #6                  // Field _maxEntries:I
      29: if_icmplt     36
      32: aload_0
      33: invokevirtual #8                  // Method clear:()V
      36: aload_3
      37: monitorexit
      38: goto          48
      41: astore        4
      43: aload_3
      44: monitorexit
      45: aload         4
      47: athrow
      48: aload_0
      49: getfield      #5                  // Field _map:Ljava/util/concurrent/ConcurrentHashMap;
      52: aload_1
      53: aload_2
      54: invokevirtual #10                 // Method java/util/concurrent/ConcurrentHashMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      57: areturn
    Exception table:
       from    to  target type
          18    38    41   any
          41    45    41   any

  public V get(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #5                  // Field _map:Ljava/util/concurrent/ConcurrentHashMap;
       4: aload_1
       5: invokevirtual #11                 // Method java/util/concurrent/ConcurrentHashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
       8: areturn

  public void clear();
    Code:
       0: aload_0
       1: getfield      #5                  // Field _map:Ljava/util/concurrent/ConcurrentHashMap;
       4: invokevirtual #12                 // Method java/util/concurrent/ConcurrentHashMap.clear:()V
       7: return

  public int size();
    Code:
       0: aload_0
       1: getfield      #5                  // Field _map:Ljava/util/concurrent/ConcurrentHashMap;
       4: invokevirtual #7                  // Method java/util/concurrent/ConcurrentHashMap.size:()I
       7: ireturn

  private void readObject(java.io.ObjectInputStream) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #13                 // Method java/io/ObjectInputStream.readInt:()I
       5: putfield      #14                 // Field _jdkSerializeMaxEntries:I
       8: return

  private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException;
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #14                 // Field _jdkSerializeMaxEntries:I
       5: invokevirtual #15                 // Method java/io/ObjectOutputStream.writeInt:(I)V
       8: return

  protected java.lang.Object readResolve();
    Code:
       0: new           #16                 // class com/fasterxml/jackson/databind/util/LRUMap
       3: dup
       4: aload_0
       5: getfield      #14                 // Field _jdkSerializeMaxEntries:I
       8: aload_0
       9: getfield      #14                 // Field _jdkSerializeMaxEntries:I
      12: invokespecial #17                 // Method "<init>":(II)V
      15: areturn
}
