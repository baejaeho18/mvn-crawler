Compiled from "SQLBuilder.java"
public final class cool.scx.sql.SQLBuilder {
  private final cool.scx.sql.SQLBuilder$SQLBuilderType sqlBuilderType;

  private java.lang.String[] selectColumns;

  private java.lang.String tableName;

  private java.lang.String[] whereClauses;

  private java.lang.String[] groupByColumns;

  private java.lang.String[] orderByClauses;

  private java.lang.Integer offset;

  private java.lang.Integer rowCount;

  private java.lang.String[] insertColumns;

  private java.lang.String[] insertValues;

  private java.lang.String[] updateSetColumns;

  private cool.scx.sql.SQLBuilder(cool.scx.sql.SQLBuilder$SQLBuilderType);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aconst_null
       6: putfield      #7                  // Field selectColumns:[Ljava/lang/String;
       9: aload_0
      10: aconst_null
      11: putfield      #13                 // Field tableName:Ljava/lang/String;
      14: aload_0
      15: aconst_null
      16: putfield      #17                 // Field whereClauses:[Ljava/lang/String;
      19: aload_0
      20: aconst_null
      21: putfield      #20                 // Field groupByColumns:[Ljava/lang/String;
      24: aload_0
      25: aconst_null
      26: putfield      #23                 // Field orderByClauses:[Ljava/lang/String;
      29: aload_0
      30: aconst_null
      31: putfield      #26                 // Field offset:Ljava/lang/Integer;
      34: aload_0
      35: aconst_null
      36: putfield      #30                 // Field rowCount:Ljava/lang/Integer;
      39: aload_0
      40: aconst_null
      41: putfield      #33                 // Field insertColumns:[Ljava/lang/String;
      44: aload_0
      45: aconst_null
      46: putfield      #36                 // Field insertValues:[Ljava/lang/String;
      49: aload_0
      50: aconst_null
      51: putfield      #39                 // Field updateSetColumns:[Ljava/lang/String;
      54: aload_0
      55: aload_1
      56: putfield      #42                 // Field sqlBuilderType:Lcool/scx/sql/SQLBuilder$SQLBuilderType;
      59: return

  public static cool.scx.sql.SQLBuilder Select(java.lang.String...);
    Code:
       0: new           #8                  // class cool/scx/sql/SQLBuilder
       3: dup
       4: getstatic     #46                 // Field cool/scx/sql/SQLBuilder$SQLBuilderType.SELECT:Lcool/scx/sql/SQLBuilder$SQLBuilderType;
       7: invokespecial #51                 // Method "<init>":(Lcool/scx/sql/SQLBuilder$SQLBuilderType;)V
      10: aload_0
      11: invokevirtual #54                 // Method _Select:([Ljava/lang/String;)Lcool/scx/sql/SQLBuilder;
      14: areturn

  public static cool.scx.sql.SQLBuilder Select(cool.scx.sql.ColumnInfo...);
    Code:
       0: aload_0
       1: invokestatic  #58                 // Method java/util/Arrays.stream:([Ljava/lang/Object;)Ljava/util/stream/Stream;
       4: invokedynamic #64,  0             // InvokeDynamic #0:apply:()Ljava/util/function/Function;
       9: invokeinterface #68,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      14: invokedynamic #74,  0             // InvokeDynamic #1:apply:()Ljava/util/function/IntFunction;
      19: invokeinterface #77,  2           // InterfaceMethod java/util/stream/Stream.toArray:(Ljava/util/function/IntFunction;)[Ljava/lang/Object;
      24: checkcast     #81                 // class "[Ljava/lang/String;"
      27: invokestatic  #82                 // Method Select:([Ljava/lang/String;)Lcool/scx/sql/SQLBuilder;
      30: areturn

  public static cool.scx.sql.SQLBuilder Insert(java.lang.String, java.lang.String...);
    Code:
       0: new           #8                  // class cool/scx/sql/SQLBuilder
       3: dup
       4: getstatic     #85                 // Field cool/scx/sql/SQLBuilder$SQLBuilderType.INSERT:Lcool/scx/sql/SQLBuilder$SQLBuilderType;
       7: invokespecial #51                 // Method "<init>":(Lcool/scx/sql/SQLBuilder$SQLBuilderType;)V
      10: aload_0
      11: aload_1
      12: invokevirtual #88                 // Method _Insert:(Ljava/lang/String;[Ljava/lang/String;)Lcool/scx/sql/SQLBuilder;
      15: areturn

  public static cool.scx.sql.SQLBuilder Insert(java.lang.String, cool.scx.sql.ColumnInfo...);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #58                 // Method java/util/Arrays.stream:([Ljava/lang/Object;)Ljava/util/stream/Stream;
       5: invokedynamic #92,  0             // InvokeDynamic #2:apply:()Ljava/util/function/Function;
      10: invokeinterface #68,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      15: invokedynamic #93,  0             // InvokeDynamic #3:apply:()Ljava/util/function/IntFunction;
      20: invokeinterface #77,  2           // InterfaceMethod java/util/stream/Stream.toArray:(Ljava/util/function/IntFunction;)[Ljava/lang/Object;
      25: checkcast     #81                 // class "[Ljava/lang/String;"
      28: invokestatic  #94                 // Method Insert:(Ljava/lang/String;[Ljava/lang/String;)Lcool/scx/sql/SQLBuilder;
      31: areturn

  public static cool.scx.sql.SQLBuilder Update(java.lang.String);
    Code:
       0: new           #8                  // class cool/scx/sql/SQLBuilder
       3: dup
       4: getstatic     #97                 // Field cool/scx/sql/SQLBuilder$SQLBuilderType.UPDATE:Lcool/scx/sql/SQLBuilder$SQLBuilderType;
       7: invokespecial #51                 // Method "<init>":(Lcool/scx/sql/SQLBuilder$SQLBuilderType;)V
      10: aload_0
      11: invokevirtual #100                // Method _Update:(Ljava/lang/String;)Lcool/scx/sql/SQLBuilder;
      14: areturn

  public static cool.scx.sql.SQLBuilder Delete(java.lang.String);
    Code:
       0: new           #8                  // class cool/scx/sql/SQLBuilder
       3: dup
       4: getstatic     #104                // Field cool/scx/sql/SQLBuilder$SQLBuilderType.DELETE:Lcool/scx/sql/SQLBuilder$SQLBuilderType;
       7: invokespecial #51                 // Method "<init>":(Lcool/scx/sql/SQLBuilder$SQLBuilderType;)V
      10: aload_0
      11: invokevirtual #107                // Method _Delete:(Ljava/lang/String;)Lcool/scx/sql/SQLBuilder;
      14: areturn

  private cool.scx.sql.SQLBuilder _Select(java.lang.String...);
    Code:
       0: aload_1
       1: arraylength
       2: ifne          15
       5: new           #110                // class java/lang/IllegalArgumentException
       8: dup
       9: ldc           #112                // String Select 子句错误 : 待查询的数据列 不能为空 !!!
      11: invokespecial #114                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      14: athrow
      15: aload_0
      16: aload_1
      17: putfield      #7                  // Field selectColumns:[Ljava/lang/String;
      20: aload_0
      21: areturn

  public cool.scx.sql.SQLBuilder From(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #13                 // Field tableName:Ljava/lang/String;
       5: aload_0
       6: areturn

  public cool.scx.sql.SQLBuilder Where(java.lang.String...);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #17                 // Field whereClauses:[Ljava/lang/String;
       5: aload_0
       6: areturn

  public cool.scx.sql.SQLBuilder GroupBy(java.lang.String...);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #20                 // Field groupByColumns:[Ljava/lang/String;
       5: aload_0
       6: areturn

  public cool.scx.sql.SQLBuilder OrderBy(java.lang.String...);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #23                 // Field orderByClauses:[Ljava/lang/String;
       5: aload_0
       6: areturn

  public cool.scx.sql.SQLBuilder Limit(java.lang.Integer, java.lang.Integer);
    Code:
       0: aload_1
       1: ifnull        11
       4: aload_1
       5: invokevirtual #117                // Method java/lang/Integer.intValue:()I
       8: ifge          21
      11: new           #110                // class java/lang/IllegalArgumentException
      14: dup
      15: ldc           #123                // String 分页参数错误 : offset (偏移量) 不能为空或小于 0 !!!
      17: invokespecial #114                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      20: athrow
      21: aload_2
      22: ifnull        32
      25: aload_2
      26: invokevirtual #117                // Method java/lang/Integer.intValue:()I
      29: ifge          42
      32: new           #110                // class java/lang/IllegalArgumentException
      35: dup
      36: ldc           #125                // String 分页参数错误 : rowCount (每页数量) 不能为空或小于 0 !!!
      38: invokespecial #114                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      41: athrow
      42: aload_0
      43: aload_1
      44: putfield      #26                 // Field offset:Ljava/lang/Integer;
      47: aload_0
      48: aload_2
      49: putfield      #30                 // Field rowCount:Ljava/lang/Integer;
      52: aload_0
      53: areturn

  public cool.scx.sql.SQLBuilder Limit(java.lang.Integer);
    Code:
       0: aload_0
       1: iconst_0
       2: invokestatic  #127                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       5: aload_1
       6: invokevirtual #131                // Method Limit:(Ljava/lang/Integer;Ljava/lang/Integer;)Lcool/scx/sql/SQLBuilder;
       9: areturn

  public cool.scx.sql.SQLBuilder Where(cool.scx.sql.where.Where);
    Code:
       0: aload_1
       1: ifnull        12
       4: aload_0
       5: aload_1
       6: invokevirtual #135                // Method cool/scx/sql/where/Where.getWhereClauses:()[Ljava/lang/String;
       9: putfield      #17                 // Field whereClauses:[Ljava/lang/String;
      12: aload_0
      13: areturn

  public cool.scx.sql.SQLBuilder GroupBy(cool.scx.sql.group_by.GroupBy);
    Code:
       0: aload_1
       1: ifnull        12
       4: aload_0
       5: aload_1
       6: invokevirtual #141                // Method cool/scx/sql/group_by/GroupBy.getGroupByColumns:()[Ljava/lang/String;
       9: putfield      #20                 // Field groupByColumns:[Ljava/lang/String;
      12: aload_0
      13: areturn

  public cool.scx.sql.SQLBuilder OrderBy(cool.scx.sql.order_by.OrderBy);
    Code:
       0: aload_1
       1: ifnull        12
       4: aload_0
       5: aload_1
       6: invokevirtual #146                // Method cool/scx/sql/order_by/OrderBy.getOrderByClauses:()[Ljava/lang/String;
       9: putfield      #23                 // Field orderByClauses:[Ljava/lang/String;
      12: aload_0
      13: areturn

  public cool.scx.sql.SQLBuilder Limit(cool.scx.sql.pagination.Pagination);
    Code:
       0: aload_1
       1: ifnull        20
       4: aload_0
       5: aload_1
       6: invokevirtual #151                // Method cool/scx/sql/pagination/Pagination.offset:()Ljava/lang/Integer;
       9: putfield      #26                 // Field offset:Ljava/lang/Integer;
      12: aload_0
      13: aload_1
      14: invokevirtual #156                // Method cool/scx/sql/pagination/Pagination.rowCount:()Ljava/lang/Integer;
      17: putfield      #30                 // Field rowCount:Ljava/lang/Integer;
      20: aload_0
      21: areturn

  private cool.scx.sql.SQLBuilder _Insert(java.lang.String, java.lang.String...);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #13                 // Field tableName:Ljava/lang/String;
       5: aload_0
       6: aload_2
       7: putfield      #33                 // Field insertColumns:[Ljava/lang/String;
      10: aload_0
      11: areturn

  public cool.scx.sql.SQLBuilder Values(java.lang.String...);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #36                 // Field insertValues:[Ljava/lang/String;
       5: aload_0
       6: areturn

  public cool.scx.sql.SQLBuilder Values(cool.scx.sql.ColumnInfo...);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #58                 // Method java/util/Arrays.stream:([Ljava/lang/Object;)Ljava/util/stream/Stream;
       5: invokedynamic #158,  0            // InvokeDynamic #4:apply:()Ljava/util/function/Function;
      10: invokeinterface #68,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      15: invokedynamic #159,  0            // InvokeDynamic #5:apply:()Ljava/util/function/IntFunction;
      20: invokeinterface #77,  2           // InterfaceMethod java/util/stream/Stream.toArray:(Ljava/util/function/IntFunction;)[Ljava/lang/Object;
      25: checkcast     #81                 // class "[Ljava/lang/String;"
      28: invokevirtual #160                // Method Values:([Ljava/lang/String;)Lcool/scx/sql/SQLBuilder;
      31: areturn

  private cool.scx.sql.SQLBuilder _Update(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #13                 // Field tableName:Ljava/lang/String;
       5: aload_0
       6: areturn

  public cool.scx.sql.SQLBuilder Set(java.lang.String...);
    Code:
       0: aload_1
       1: arraylength
       2: ifne          15
       5: new           #110                // class java/lang/IllegalArgumentException
       8: dup
       9: ldc           #163                // String Set 子句错误 : 待更新的数据列 不能为空 !!!
      11: invokespecial #114                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      14: athrow
      15: aload_0
      16: aload_1
      17: putfield      #39                 // Field updateSetColumns:[Ljava/lang/String;
      20: aload_0
      21: areturn

  public cool.scx.sql.SQLBuilder Set(cool.scx.sql.ColumnInfo...);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #58                 // Method java/util/Arrays.stream:([Ljava/lang/Object;)Ljava/util/stream/Stream;
       5: invokedynamic #165,  0            // InvokeDynamic #6:apply:()Ljava/util/function/Function;
      10: invokeinterface #68,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      15: invokedynamic #166,  0            // InvokeDynamic #7:apply:()Ljava/util/function/IntFunction;
      20: invokeinterface #77,  2           // InterfaceMethod java/util/stream/Stream.toArray:(Ljava/util/function/IntFunction;)[Ljava/lang/Object;
      25: checkcast     #81                 // class "[Ljava/lang/String;"
      28: invokevirtual #167                // Method Set:([Ljava/lang/String;)Lcool/scx/sql/SQLBuilder;
      31: areturn

  public cool.scx.sql.SQLBuilder _Delete(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #13                 // Field tableName:Ljava/lang/String;
       5: aload_0
       6: areturn

  public java.lang.String GetSQL();
    Code:
       0: getstatic     #170                // Field cool/scx/sql/SQLBuilder$1.$SwitchMap$cool$scx$sql$SQLBuilder$SQLBuilderType:[I
       3: aload_0
       4: getfield      #42                 // Field sqlBuilderType:Lcool/scx/sql/SQLBuilder$SQLBuilderType;
       7: invokevirtual #176                // Method cool/scx/sql/SQLBuilder$SQLBuilderType.ordinal:()I
      10: iaload
      11: tableswitch   { // 1 to 4
                     1: 48
                     2: 55
                     3: 62
                     4: 69
               default: 40
          }
      40: new           #179                // class java/lang/IncompatibleClassChangeError
      43: dup
      44: invokespecial #181                // Method java/lang/IncompatibleClassChangeError."<init>":()V
      47: athrow
      48: aload_0
      49: invokevirtual #182                // Method GetInsertSQL:()Ljava/lang/String;
      52: goto          73
      55: aload_0
      56: invokevirtual #186                // Method GetUpdateSQL:()Ljava/lang/String;
      59: goto          73
      62: aload_0
      63: invokevirtual #189                // Method GetDeleteSQL:()Ljava/lang/String;
      66: goto          73
      69: aload_0
      70: invokevirtual #192                // Method GetSelectSQL:()Ljava/lang/String;
      73: areturn

  private java.lang.String GetInsertSQL();
    Code:
       0: aload_0
       1: getfield      #13                 // Field tableName:Ljava/lang/String;
       4: ldc           #195                // String ,
       6: aload_0
       7: getfield      #33                 // Field insertColumns:[Ljava/lang/String;
      10: invokestatic  #197                // Method java/lang/String.join:(Ljava/lang/CharSequence;[Ljava/lang/CharSequence;)Ljava/lang/String;
      13: ldc           #195                // String ,
      15: aload_0
      16: getfield      #36                 // Field insertValues:[Ljava/lang/String;
      19: invokestatic  #197                // Method java/lang/String.join:(Ljava/lang/CharSequence;[Ljava/lang/CharSequence;)Ljava/lang/String;
      22: invokedynamic #203,  0            // InvokeDynamic #8:makeConcatWithConstants:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      27: areturn

  private java.lang.String GetUpdateSQL();
    Code:
       0: aload_0
       1: getfield      #13                 // Field tableName:Ljava/lang/String;
       4: ldc           #195                // String ,
       6: aload_0
       7: getfield      #39                 // Field updateSetColumns:[Ljava/lang/String;
      10: invokestatic  #197                // Method java/lang/String.join:(Ljava/lang/CharSequence;[Ljava/lang/CharSequence;)Ljava/lang/String;
      13: aload_0
      14: invokevirtual #207                // Method getWhereSQL:()Ljava/lang/String;
      17: invokedynamic #210,  0            // InvokeDynamic #9:makeConcatWithConstants:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      22: areturn

  private java.lang.String GetDeleteSQL();
    Code:
       0: aload_0
       1: getfield      #13                 // Field tableName:Ljava/lang/String;
       4: aload_0
       5: invokevirtual #207                // Method getWhereSQL:()Ljava/lang/String;
       8: invokedynamic #211,  0            // InvokeDynamic #10:makeConcatWithConstants:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      13: areturn

  private java.lang.String GetSelectSQL();
    Code:
       0: ldc           #195                // String ,
       2: aload_0
       3: getfield      #7                  // Field selectColumns:[Ljava/lang/String;
       6: invokestatic  #197                // Method java/lang/String.join:(Ljava/lang/CharSequence;[Ljava/lang/CharSequence;)Ljava/lang/String;
       9: aload_0
      10: getfield      #13                 // Field tableName:Ljava/lang/String;
      13: aload_0
      14: invokevirtual #207                // Method getWhereSQL:()Ljava/lang/String;
      17: aload_0
      18: invokevirtual #214                // Method getGroupBySQL:()Ljava/lang/String;
      21: aload_0
      22: invokevirtual #217                // Method getOrderBySQL:()Ljava/lang/String;
      25: aload_0
      26: invokevirtual #220                // Method getLimitSQL:()Ljava/lang/String;
      29: invokedynamic #223,  0            // InvokeDynamic #11:makeConcatWithConstants:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      34: areturn

  private java.lang.String getWhereSQL();
    Code:
       0: aload_0
       1: getfield      #17                 // Field whereClauses:[Ljava/lang/String;
       4: ifnull        32
       7: aload_0
       8: getfield      #17                 // Field whereClauses:[Ljava/lang/String;
      11: arraylength
      12: ifle          32
      15: ldc           #226                // String  AND
      17: aload_0
      18: getfield      #17                 // Field whereClauses:[Ljava/lang/String;
      21: invokestatic  #197                // Method java/lang/String.join:(Ljava/lang/CharSequence;[Ljava/lang/CharSequence;)Ljava/lang/String;
      24: invokedynamic #228,  0            // InvokeDynamic #12:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;
      29: goto          34
      32: ldc           #231                // String
      34: areturn

  private java.lang.String getLimitSQL();
    Code:
       0: aload_0
       1: getfield      #30                 // Field rowCount:Ljava/lang/Integer;
       4: ifnonnull     12
       7: ldc           #231                // String
       9: goto          54
      12: aload_0
      13: getfield      #26                 // Field offset:Ljava/lang/Integer;
      16: ifnull        29
      19: aload_0
      20: getfield      #26                 // Field offset:Ljava/lang/Integer;
      23: invokevirtual #117                // Method java/lang/Integer.intValue:()I
      26: ifne          41
      29: aload_0
      30: getfield      #30                 // Field rowCount:Ljava/lang/Integer;
      33: invokedynamic #233,  0            // InvokeDynamic #13:makeConcatWithConstants:(Ljava/lang/Integer;)Ljava/lang/String;
      38: goto          54
      41: aload_0
      42: getfield      #26                 // Field offset:Ljava/lang/Integer;
      45: aload_0
      46: getfield      #30                 // Field rowCount:Ljava/lang/Integer;
      49: invokedynamic #236,  0            // InvokeDynamic #14:makeConcatWithConstants:(Ljava/lang/Integer;Ljava/lang/Integer;)Ljava/lang/String;
      54: areturn

  private java.lang.String getGroupBySQL();
    Code:
       0: aload_0
       1: getfield      #20                 // Field groupByColumns:[Ljava/lang/String;
       4: ifnull        32
       7: aload_0
       8: getfield      #20                 // Field groupByColumns:[Ljava/lang/String;
      11: arraylength
      12: ifeq          32
      15: ldc           #195                // String ,
      17: aload_0
      18: getfield      #20                 // Field groupByColumns:[Ljava/lang/String;
      21: invokestatic  #197                // Method java/lang/String.join:(Ljava/lang/CharSequence;[Ljava/lang/CharSequence;)Ljava/lang/String;
      24: invokedynamic #239,  0            // InvokeDynamic #15:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;
      29: goto          34
      32: ldc           #231                // String
      34: areturn

  private java.lang.String getOrderBySQL();
    Code:
       0: aload_0
       1: getfield      #23                 // Field orderByClauses:[Ljava/lang/String;
       4: ifnull        32
       7: aload_0
       8: getfield      #23                 // Field orderByClauses:[Ljava/lang/String;
      11: arraylength
      12: ifeq          32
      15: ldc           #195                // String ,
      17: aload_0
      18: getfield      #23                 // Field orderByClauses:[Ljava/lang/String;
      21: invokestatic  #197                // Method java/lang/String.join:(Ljava/lang/CharSequence;[Ljava/lang/CharSequence;)Ljava/lang/String;
      24: invokedynamic #240,  0            // InvokeDynamic #16:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;
      29: goto          34
      32: ldc           #231                // String
      34: areturn

  private static java.lang.String[] lambda$Set$3(int);
    Code:
       0: iload_0
       1: anewarray     #198                // class java/lang/String
       4: areturn

  private static java.lang.String[] lambda$Values$2(int);
    Code:
       0: iload_0
       1: anewarray     #198                // class java/lang/String
       4: areturn

  private static java.lang.String[] lambda$Insert$1(int);
    Code:
       0: iload_0
       1: anewarray     #198                // class java/lang/String
       4: areturn

  private static java.lang.String[] lambda$Select$0(int);
    Code:
       0: iload_0
       1: anewarray     #198                // class java/lang/String
       4: areturn
}
