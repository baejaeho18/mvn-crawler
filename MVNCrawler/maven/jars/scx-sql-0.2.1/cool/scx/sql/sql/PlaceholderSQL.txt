Compiled from "PlaceholderSQL.java"
public final class cool.scx.sql.sql.PlaceholderSQL implements cool.scx.sql.SQL {
  private final boolean isBatch;

  private final java.lang.String normalSQL;

  private final java.lang.Object[] params;

  private final java.util.List<java.lang.Object[]> batchParams;

  public cool.scx.sql.sql.PlaceholderSQL(java.lang.String, java.lang.Object[]);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #7                  // Field isBatch:Z
       9: aload_0
      10: aload_1
      11: putfield      #13                 // Field normalSQL:Ljava/lang/String;
      14: aload_0
      15: aload_2
      16: putfield      #17                 // Field params:[Ljava/lang/Object;
      19: aload_0
      20: aconst_null
      21: putfield      #21                 // Field batchParams:Ljava/util/List;
      24: return

  public cool.scx.sql.sql.PlaceholderSQL(java.lang.String, java.util.List<java.lang.Object[]>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #7                  // Field isBatch:Z
       9: aload_0
      10: aload_1
      11: putfield      #13                 // Field normalSQL:Ljava/lang/String;
      14: aload_0
      15: aconst_null
      16: putfield      #17                 // Field params:[Ljava/lang/Object;
      19: aload_0
      20: aload_2
      21: putfield      #21                 // Field batchParams:Ljava/util/List;
      24: return

  private java.sql.PreparedStatement getPreparedStatementFromSingle(java.sql.Connection) throws java.sql.SQLException;
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #13                 // Field normalSQL:Ljava/lang/String;
       5: iconst_1
       6: invokeinterface #27,  3           // InterfaceMethod java/sql/Connection.prepareStatement:(Ljava/lang/String;I)Ljava/sql/PreparedStatement;
      11: astore_2
      12: aload_0
      13: getfield      #17                 // Field params:[Ljava/lang/Object;
      16: ifnull        27
      19: aload_2
      20: aload_0
      21: getfield      #17                 // Field params:[Ljava/lang/Object;
      24: invokestatic  #33                 // Method cool/scx/sql/SQLHelper.fillPreparedStatement:(Ljava/sql/PreparedStatement;[Ljava/lang/Object;)V
      27: aload_2
      28: areturn

  public java.lang.Object[] params();
    Code:
       0: aload_0
       1: getfield      #17                 // Field params:[Ljava/lang/Object;
       4: areturn

  private java.sql.PreparedStatement getPreparedStatementFromBatch(java.sql.Connection) throws java.sql.SQLException;
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #13                 // Field normalSQL:Ljava/lang/String;
       5: iconst_1
       6: invokeinterface #27,  3           // InterfaceMethod java/sql/Connection.prepareStatement:(Ljava/lang/String;I)Ljava/sql/PreparedStatement;
      11: astore_2
      12: aload_0
      13: getfield      #21                 // Field batchParams:Ljava/util/List;
      16: ifnull        69
      19: aload_0
      20: getfield      #21                 // Field batchParams:Ljava/util/List;
      23: invokeinterface #39,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      28: astore_3
      29: aload_3
      30: invokeinterface #45,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      35: ifeq          69
      38: aload_3
      39: invokeinterface #51,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      44: checkcast     #55                 // class "[Ljava/lang/Object;"
      47: astore        4
      49: aload         4
      51: ifnull        66
      54: aload_2
      55: aload         4
      57: invokestatic  #33                 // Method cool/scx/sql/SQLHelper.fillPreparedStatement:(Ljava/sql/PreparedStatement;[Ljava/lang/Object;)V
      60: aload_2
      61: invokeinterface #56,  1           // InterfaceMethod java/sql/PreparedStatement.addBatch:()V
      66: goto          29
      69: aload_2
      70: areturn

  public java.lang.String sql();
    Code:
       0: aload_0
       1: getfield      #13                 // Field normalSQL:Ljava/lang/String;
       4: areturn

  public java.sql.PreparedStatement getPreparedStatement(java.sql.Connection) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: getfield      #7                  // Field isBatch:Z
       4: ifeq          15
       7: aload_0
       8: aload_1
       9: invokevirtual #61                 // Method getPreparedStatementFromBatch:(Ljava/sql/Connection;)Ljava/sql/PreparedStatement;
      12: goto          20
      15: aload_0
      16: aload_1
      17: invokevirtual #65                 // Method getPreparedStatementFromSingle:(Ljava/sql/Connection;)Ljava/sql/PreparedStatement;
      20: areturn
}
