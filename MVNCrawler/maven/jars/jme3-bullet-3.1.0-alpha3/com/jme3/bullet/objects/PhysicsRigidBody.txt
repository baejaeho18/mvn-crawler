Compiled from "PhysicsRigidBody.java"
public class com.jme3.bullet.objects.PhysicsRigidBody extends com.jme3.bullet.collision.PhysicsCollisionObject {
  protected com.jme3.bullet.objects.infos.RigidBodyMotionState motionState;

  protected float mass;

  protected boolean kinematic;

  protected java.util.ArrayList<com.jme3.bullet.joints.PhysicsJoint> joints;

  public com.jme3.bullet.objects.PhysicsRigidBody();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method com/jme3/bullet/collision/PhysicsCollisionObject."<init>":()V
       4: aload_0
       5: new           #2                  // class com/jme3/bullet/objects/infos/RigidBodyMotionState
       8: dup
       9: invokespecial #3                  // Method com/jme3/bullet/objects/infos/RigidBodyMotionState."<init>":()V
      12: putfield      #4                  // Field motionState:Lcom/jme3/bullet/objects/infos/RigidBodyMotionState;
      15: aload_0
      16: fconst_1
      17: putfield      #5                  // Field mass:F
      20: aload_0
      21: iconst_0
      22: putfield      #6                  // Field kinematic:Z
      25: aload_0
      26: new           #7                  // class java/util/ArrayList
      29: dup
      30: invokespecial #8                  // Method java/util/ArrayList."<init>":()V
      33: putfield      #9                  // Field joints:Ljava/util/ArrayList;
      36: return

  public com.jme3.bullet.objects.PhysicsRigidBody(com.jme3.bullet.collision.shapes.CollisionShape);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method com/jme3/bullet/collision/PhysicsCollisionObject."<init>":()V
       4: aload_0
       5: new           #2                  // class com/jme3/bullet/objects/infos/RigidBodyMotionState
       8: dup
       9: invokespecial #3                  // Method com/jme3/bullet/objects/infos/RigidBodyMotionState."<init>":()V
      12: putfield      #4                  // Field motionState:Lcom/jme3/bullet/objects/infos/RigidBodyMotionState;
      15: aload_0
      16: fconst_1
      17: putfield      #5                  // Field mass:F
      20: aload_0
      21: iconst_0
      22: putfield      #6                  // Field kinematic:Z
      25: aload_0
      26: new           #7                  // class java/util/ArrayList
      29: dup
      30: invokespecial #8                  // Method java/util/ArrayList."<init>":()V
      33: putfield      #9                  // Field joints:Ljava/util/ArrayList;
      36: aload_0
      37: aload_1
      38: putfield      #10                 // Field collisionShape:Lcom/jme3/bullet/collision/shapes/CollisionShape;
      41: aload_0
      42: invokevirtual #11                 // Method rebuildRigidBody:()V
      45: return

  public com.jme3.bullet.objects.PhysicsRigidBody(com.jme3.bullet.collision.shapes.CollisionShape, float);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method com/jme3/bullet/collision/PhysicsCollisionObject."<init>":()V
       4: aload_0
       5: new           #2                  // class com/jme3/bullet/objects/infos/RigidBodyMotionState
       8: dup
       9: invokespecial #3                  // Method com/jme3/bullet/objects/infos/RigidBodyMotionState."<init>":()V
      12: putfield      #4                  // Field motionState:Lcom/jme3/bullet/objects/infos/RigidBodyMotionState;
      15: aload_0
      16: fconst_1
      17: putfield      #5                  // Field mass:F
      20: aload_0
      21: iconst_0
      22: putfield      #6                  // Field kinematic:Z
      25: aload_0
      26: new           #7                  // class java/util/ArrayList
      29: dup
      30: invokespecial #8                  // Method java/util/ArrayList."<init>":()V
      33: putfield      #9                  // Field joints:Ljava/util/ArrayList;
      36: aload_0
      37: aload_1
      38: putfield      #10                 // Field collisionShape:Lcom/jme3/bullet/collision/shapes/CollisionShape;
      41: aload_0
      42: fload_2
      43: putfield      #5                  // Field mass:F
      46: aload_0
      47: invokevirtual #11                 // Method rebuildRigidBody:()V
      50: return

  protected void rebuildRigidBody();
    Code:
       0: iconst_0
       1: istore_1
       2: aload_0
       3: getfield      #10                 // Field collisionShape:Lcom/jme3/bullet/collision/shapes/CollisionShape;
       6: instanceof    #12                 // class com/jme3/bullet/collision/shapes/MeshCollisionShape
       9: ifeq          31
      12: aload_0
      13: getfield      #5                  // Field mass:F
      16: fconst_0
      17: fcmpl
      18: ifeq          31
      21: new           #13                 // class java/lang/IllegalStateException
      24: dup
      25: ldc           #14                 // String Dynamic rigidbody can not have mesh collision shape!
      27: invokespecial #15                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      30: athrow
      31: aload_0
      32: getfield      #16                 // Field objectId:J
      35: lconst_0
      36: lcmp
      37: ifeq          93
      40: aload_0
      41: aload_0
      42: getfield      #16                 // Field objectId:J
      45: invokespecial #17                 // Method isInWorld:(J)Z
      48: ifeq          60
      51: invokestatic  #18                 // Method com/jme3/bullet/PhysicsSpace.getPhysicsSpace:()Lcom/jme3/bullet/PhysicsSpace;
      54: aload_0
      55: invokevirtual #19                 // Method com/jme3/bullet/PhysicsSpace.remove:(Ljava/lang/Object;)V
      58: iconst_1
      59: istore_1
      60: aload_0
      61: invokevirtual #20                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      64: invokevirtual #21                 // Method java/lang/Class.getName:()Ljava/lang/String;
      67: invokestatic  #22                 // Method java/util/logging/Logger.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;
      70: getstatic     #23                 // Field java/util/logging/Level.FINE:Ljava/util/logging/Level;
      73: ldc           #24                 // String Clearing RigidBody {0}
      75: aload_0
      76: getfield      #16                 // Field objectId:J
      79: invokestatic  #25                 // Method java/lang/Long.toHexString:(J)Ljava/lang/String;
      82: invokevirtual #26                 // Method java/util/logging/Logger.log:(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/Object;)V
      85: aload_0
      86: aload_0
      87: getfield      #16                 // Field objectId:J
      90: invokevirtual #27                 // Method finalizeNative:(J)V
      93: aload_0
      94: invokevirtual #28                 // Method preRebuild:()V
      97: aload_0
      98: aload_0
      99: aload_0
     100: getfield      #5                  // Field mass:F
     103: aload_0
     104: getfield      #4                  // Field motionState:Lcom/jme3/bullet/objects/infos/RigidBodyMotionState;
     107: invokevirtual #29                 // Method com/jme3/bullet/objects/infos/RigidBodyMotionState.getObjectId:()J
     110: aload_0
     111: getfield      #10                 // Field collisionShape:Lcom/jme3/bullet/collision/shapes/CollisionShape;
     114: invokevirtual #30                 // Method com/jme3/bullet/collision/shapes/CollisionShape.getObjectId:()J
     117: invokespecial #31                 // Method createRigidBody:(FJJ)J
     120: putfield      #16                 // Field objectId:J
     123: aload_0
     124: invokevirtual #20                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
     127: invokevirtual #21                 // Method java/lang/Class.getName:()Ljava/lang/String;
     130: invokestatic  #22                 // Method java/util/logging/Logger.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;
     133: getstatic     #23                 // Field java/util/logging/Level.FINE:Ljava/util/logging/Level;
     136: ldc           #32                 // String Created RigidBody {0}
     138: aload_0
     139: getfield      #16                 // Field objectId:J
     142: invokestatic  #25                 // Method java/lang/Long.toHexString:(J)Ljava/lang/String;
     145: invokevirtual #26                 // Method java/util/logging/Logger.log:(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/Object;)V
     148: aload_0
     149: invokevirtual #33                 // Method postRebuild:()V
     152: iload_1
     153: ifeq          163
     156: invokestatic  #18                 // Method com/jme3/bullet/PhysicsSpace.getPhysicsSpace:()Lcom/jme3/bullet/PhysicsSpace;
     159: aload_0
     160: invokevirtual #34                 // Method com/jme3/bullet/PhysicsSpace.add:(Ljava/lang/Object;)V
     163: return

  protected void preRebuild();
    Code:
       0: return

  private native long createRigidBody(float, long, long);

  protected void postRebuild();
    Code:
       0: aload_0
       1: getfield      #5                  // Field mass:F
       4: fconst_0
       5: fcmpl
       6: ifne          21
       9: aload_0
      10: aload_0
      11: getfield      #16                 // Field objectId:J
      14: iconst_1
      15: invokespecial #35                 // Method setStatic:(JZ)V
      18: goto          30
      21: aload_0
      22: aload_0
      23: getfield      #16                 // Field objectId:J
      26: iconst_0
      27: invokespecial #35                 // Method setStatic:(JZ)V
      30: aload_0
      31: invokevirtual #36                 // Method initUserPointer:()V
      34: return

  public com.jme3.bullet.objects.infos.RigidBodyMotionState getMotionState();
    Code:
       0: aload_0
       1: getfield      #4                  // Field motionState:Lcom/jme3/bullet/objects/infos/RigidBodyMotionState;
       4: areturn

  public boolean isInWorld();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #16                 // Field objectId:J
       5: invokespecial #17                 // Method isInWorld:(J)Z
       8: ireturn

  private native boolean isInWorld(long);

  public void setPhysicsLocation(com.jme3.math.Vector3f);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #16                 // Field objectId:J
       5: aload_1
       6: invokespecial #37                 // Method setPhysicsLocation:(JLcom/jme3/math/Vector3f;)V
       9: return

  private native void setPhysicsLocation(long, com.jme3.math.Vector3f);

  public void setPhysicsRotation(com.jme3.math.Matrix3f);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #16                 // Field objectId:J
       5: aload_1
       6: invokespecial #38                 // Method setPhysicsRotation:(JLcom/jme3/math/Matrix3f;)V
       9: return

  private native void setPhysicsRotation(long, com.jme3.math.Matrix3f);

  public void setPhysicsRotation(com.jme3.math.Quaternion);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #16                 // Field objectId:J
       5: aload_1
       6: invokespecial #39                 // Method setPhysicsRotation:(JLcom/jme3/math/Quaternion;)V
       9: return

  private native void setPhysicsRotation(long, com.jme3.math.Quaternion);

  public com.jme3.math.Vector3f getPhysicsLocation(com.jme3.math.Vector3f);
    Code:
       0: aload_1
       1: ifnonnull     12
       4: new           #40                 // class com/jme3/math/Vector3f
       7: dup
       8: invokespecial #41                 // Method com/jme3/math/Vector3f."<init>":()V
      11: astore_1
      12: aload_0
      13: aload_0
      14: getfield      #16                 // Field objectId:J
      17: aload_1
      18: invokespecial #42                 // Method getPhysicsLocation:(JLcom/jme3/math/Vector3f;)V
      21: aload_1
      22: areturn

  private native void getPhysicsLocation(long, com.jme3.math.Vector3f);

  public com.jme3.math.Quaternion getPhysicsRotation(com.jme3.math.Quaternion);
    Code:
       0: aload_1
       1: ifnonnull     12
       4: new           #43                 // class com/jme3/math/Quaternion
       7: dup
       8: invokespecial #44                 // Method com/jme3/math/Quaternion."<init>":()V
      11: astore_1
      12: aload_0
      13: aload_0
      14: getfield      #16                 // Field objectId:J
      17: aload_1
      18: invokespecial #45                 // Method getPhysicsRotation:(JLcom/jme3/math/Quaternion;)V
      21: aload_1
      22: areturn

  private native void getPhysicsRotation(long, com.jme3.math.Quaternion);

  public com.jme3.math.Matrix3f getPhysicsRotationMatrix(com.jme3.math.Matrix3f);
    Code:
       0: aload_1
       1: ifnonnull     12
       4: new           #46                 // class com/jme3/math/Matrix3f
       7: dup
       8: invokespecial #47                 // Method com/jme3/math/Matrix3f."<init>":()V
      11: astore_1
      12: aload_0
      13: aload_0
      14: getfield      #16                 // Field objectId:J
      17: aload_1
      18: invokespecial #48                 // Method getPhysicsRotationMatrix:(JLcom/jme3/math/Matrix3f;)V
      21: aload_1
      22: areturn

  private native void getPhysicsRotationMatrix(long, com.jme3.math.Matrix3f);

  public com.jme3.math.Vector3f getPhysicsLocation();
    Code:
       0: new           #40                 // class com/jme3/math/Vector3f
       3: dup
       4: invokespecial #41                 // Method com/jme3/math/Vector3f."<init>":()V
       7: astore_1
       8: aload_0
       9: aload_0
      10: getfield      #16                 // Field objectId:J
      13: aload_1
      14: invokespecial #42                 // Method getPhysicsLocation:(JLcom/jme3/math/Vector3f;)V
      17: aload_1
      18: areturn

  public com.jme3.math.Quaternion getPhysicsRotation();
    Code:
       0: new           #43                 // class com/jme3/math/Quaternion
       3: dup
       4: invokespecial #44                 // Method com/jme3/math/Quaternion."<init>":()V
       7: astore_1
       8: aload_0
       9: aload_0
      10: getfield      #16                 // Field objectId:J
      13: aload_1
      14: invokespecial #45                 // Method getPhysicsRotation:(JLcom/jme3/math/Quaternion;)V
      17: aload_1
      18: areturn

  public com.jme3.math.Matrix3f getPhysicsRotationMatrix();
    Code:
       0: new           #46                 // class com/jme3/math/Matrix3f
       3: dup
       4: invokespecial #47                 // Method com/jme3/math/Matrix3f."<init>":()V
       7: astore_1
       8: aload_0
       9: aload_0
      10: getfield      #16                 // Field objectId:J
      13: aload_1
      14: invokespecial #48                 // Method getPhysicsRotationMatrix:(JLcom/jme3/math/Matrix3f;)V
      17: aload_1
      18: areturn

  public void setKinematic(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #6                  // Field kinematic:Z
       5: aload_0
       6: aload_0
       7: getfield      #16                 // Field objectId:J
      10: iload_1
      11: invokespecial #49                 // Method setKinematic:(JZ)V
      14: return

  private native void setKinematic(long, boolean);

  public boolean isKinematic();
    Code:
       0: aload_0
       1: getfield      #6                  // Field kinematic:Z
       4: ireturn

  public void setCcdSweptSphereRadius(float);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #16                 // Field objectId:J
       5: fload_1
       6: invokespecial #50                 // Method setCcdSweptSphereRadius:(JF)V
       9: return

  private native void setCcdSweptSphereRadius(long, float);

  public void setCcdMotionThreshold(float);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #16                 // Field objectId:J
       5: fload_1
       6: invokespecial #51                 // Method setCcdMotionThreshold:(JF)V
       9: return

  private native void setCcdMotionThreshold(long, float);

  public float getCcdSweptSphereRadius();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #16                 // Field objectId:J
       5: invokespecial #52                 // Method getCcdSweptSphereRadius:(J)F
       8: freturn

  private native float getCcdSweptSphereRadius(long);

  public float getCcdMotionThreshold();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #16                 // Field objectId:J
       5: invokespecial #53                 // Method getCcdMotionThreshold:(J)F
       8: freturn

  private native float getCcdMotionThreshold(long);

  public float getCcdSquareMotionThreshold();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #16                 // Field objectId:J
       5: invokespecial #54                 // Method getCcdSquareMotionThreshold:(J)F
       8: freturn

  private native float getCcdSquareMotionThreshold(long);

  public float getMass();
    Code:
       0: aload_0
       1: getfield      #5                  // Field mass:F
       4: freturn

  public void setMass(float);
    Code:
       0: aload_0
       1: fload_1
       2: putfield      #5                  // Field mass:F
       5: aload_0
       6: getfield      #10                 // Field collisionShape:Lcom/jme3/bullet/collision/shapes/CollisionShape;
       9: instanceof    #12                 // class com/jme3/bullet/collision/shapes/MeshCollisionShape
      12: ifeq          31
      15: fload_1
      16: fconst_0
      17: fcmpl
      18: ifeq          31
      21: new           #13                 // class java/lang/IllegalStateException
      24: dup
      25: ldc           #14                 // String Dynamic rigidbody can not have mesh collision shape!
      27: invokespecial #15                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      30: athrow
      31: aload_0
      32: getfield      #16                 // Field objectId:J
      35: lconst_0
      36: lcmp
      37: ifeq          91
      40: aload_0
      41: getfield      #10                 // Field collisionShape:Lcom/jme3/bullet/collision/shapes/CollisionShape;
      44: ifnull        64
      47: aload_0
      48: aload_0
      49: getfield      #16                 // Field objectId:J
      52: aload_0
      53: getfield      #10                 // Field collisionShape:Lcom/jme3/bullet/collision/shapes/CollisionShape;
      56: invokevirtual #30                 // Method com/jme3/bullet/collision/shapes/CollisionShape.getObjectId:()J
      59: fload_1
      60: invokespecial #55                 // Method updateMassProps:(JJF)J
      63: pop2
      64: fload_1
      65: fconst_0
      66: fcmpl
      67: ifne          82
      70: aload_0
      71: aload_0
      72: getfield      #16                 // Field objectId:J
      75: iconst_1
      76: invokespecial #35                 // Method setStatic:(JZ)V
      79: goto          91
      82: aload_0
      83: aload_0
      84: getfield      #16                 // Field objectId:J
      87: iconst_0
      88: invokespecial #35                 // Method setStatic:(JZ)V
      91: return

  private native void setStatic(long, boolean);

  private native long updateMassProps(long, long, float);

  public com.jme3.math.Vector3f getGravity();
    Code:
       0: aload_0
       1: aconst_null
       2: invokevirtual #56                 // Method getGravity:(Lcom/jme3/math/Vector3f;)Lcom/jme3/math/Vector3f;
       5: areturn

  public com.jme3.math.Vector3f getGravity(com.jme3.math.Vector3f);
    Code:
       0: aload_1
       1: ifnonnull     12
       4: new           #40                 // class com/jme3/math/Vector3f
       7: dup
       8: invokespecial #41                 // Method com/jme3/math/Vector3f."<init>":()V
      11: astore_1
      12: aload_0
      13: aload_0
      14: getfield      #16                 // Field objectId:J
      17: aload_1
      18: invokespecial #57                 // Method getGravity:(JLcom/jme3/math/Vector3f;)V
      21: aload_1
      22: areturn

  private native void getGravity(long, com.jme3.math.Vector3f);

  public void setGravity(com.jme3.math.Vector3f);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #16                 // Field objectId:J
       5: aload_1
       6: invokespecial #58                 // Method setGravity:(JLcom/jme3/math/Vector3f;)V
       9: return

  private native void setGravity(long, com.jme3.math.Vector3f);

  public float getFriction();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #16                 // Field objectId:J
       5: invokespecial #59                 // Method getFriction:(J)F
       8: freturn

  private native float getFriction(long);

  public void setFriction(float);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #16                 // Field objectId:J
       5: fload_1
       6: invokespecial #60                 // Method setFriction:(JF)V
       9: return

  private native void setFriction(long, float);

  public void setDamping(float, float);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #16                 // Field objectId:J
       5: fload_1
       6: fload_2
       7: invokespecial #61                 // Method setDamping:(JFF)V
      10: return

  private native void setDamping(long, float, float);

  public void setLinearDamping(float);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #16                 // Field objectId:J
       5: fload_1
       6: aload_0
       7: invokevirtual #62                 // Method getAngularDamping:()F
      10: invokespecial #61                 // Method setDamping:(JFF)V
      13: return

  public void setAngularDamping(float);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #16                 // Field objectId:J
       5: fload_1
       6: invokespecial #63                 // Method setAngularDamping:(JF)V
       9: return

  private native void setAngularDamping(long, float);

  public float getLinearDamping();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #16                 // Field objectId:J
       5: invokespecial #64                 // Method getLinearDamping:(J)F
       8: freturn

  private native float getLinearDamping(long);

  public float getAngularDamping();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #16                 // Field objectId:J
       5: invokespecial #65                 // Method getAngularDamping:(J)F
       8: freturn

  private native float getAngularDamping(long);

  public float getRestitution();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #16                 // Field objectId:J
       5: invokespecial #66                 // Method getRestitution:(J)F
       8: freturn

  private native float getRestitution(long);

  public void setRestitution(float);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #16                 // Field objectId:J
       5: fload_1
       6: invokespecial #67                 // Method setRestitution:(JF)V
       9: return

  private native void setRestitution(long, float);

  public com.jme3.math.Vector3f getAngularVelocity();
    Code:
       0: new           #40                 // class com/jme3/math/Vector3f
       3: dup
       4: invokespecial #41                 // Method com/jme3/math/Vector3f."<init>":()V
       7: astore_1
       8: aload_0
       9: aload_0
      10: getfield      #16                 // Field objectId:J
      13: aload_1
      14: invokespecial #68                 // Method getAngularVelocity:(JLcom/jme3/math/Vector3f;)V
      17: aload_1
      18: areturn

  private native void getAngularVelocity(long, com.jme3.math.Vector3f);

  public void getAngularVelocity(com.jme3.math.Vector3f);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #16                 // Field objectId:J
       5: aload_1
       6: invokespecial #68                 // Method getAngularVelocity:(JLcom/jme3/math/Vector3f;)V
       9: return

  public void setAngularVelocity(com.jme3.math.Vector3f);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #16                 // Field objectId:J
       5: aload_1
       6: invokespecial #69                 // Method setAngularVelocity:(JLcom/jme3/math/Vector3f;)V
       9: aload_0
      10: invokevirtual #70                 // Method activate:()V
      13: return

  private native void setAngularVelocity(long, com.jme3.math.Vector3f);

  public com.jme3.math.Vector3f getLinearVelocity();
    Code:
       0: new           #40                 // class com/jme3/math/Vector3f
       3: dup
       4: invokespecial #41                 // Method com/jme3/math/Vector3f."<init>":()V
       7: astore_1
       8: aload_0
       9: aload_0
      10: getfield      #16                 // Field objectId:J
      13: aload_1
      14: invokespecial #71                 // Method getLinearVelocity:(JLcom/jme3/math/Vector3f;)V
      17: aload_1
      18: areturn

  private native void getLinearVelocity(long, com.jme3.math.Vector3f);

  public void getLinearVelocity(com.jme3.math.Vector3f);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #16                 // Field objectId:J
       5: aload_1
       6: invokespecial #71                 // Method getLinearVelocity:(JLcom/jme3/math/Vector3f;)V
       9: return

  public void setLinearVelocity(com.jme3.math.Vector3f);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #16                 // Field objectId:J
       5: aload_1
       6: invokespecial #72                 // Method setLinearVelocity:(JLcom/jme3/math/Vector3f;)V
       9: aload_0
      10: invokevirtual #70                 // Method activate:()V
      13: return

  private native void setLinearVelocity(long, com.jme3.math.Vector3f);

  public void applyForce(com.jme3.math.Vector3f, com.jme3.math.Vector3f);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #16                 // Field objectId:J
       5: aload_1
       6: aload_2
       7: invokespecial #73                 // Method applyForce:(JLcom/jme3/math/Vector3f;Lcom/jme3/math/Vector3f;)V
      10: aload_0
      11: invokevirtual #70                 // Method activate:()V
      14: return

  private native void applyForce(long, com.jme3.math.Vector3f, com.jme3.math.Vector3f);

  public void applyCentralForce(com.jme3.math.Vector3f);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #16                 // Field objectId:J
       5: aload_1
       6: invokespecial #74                 // Method applyCentralForce:(JLcom/jme3/math/Vector3f;)V
       9: aload_0
      10: invokevirtual #70                 // Method activate:()V
      13: return

  private native void applyCentralForce(long, com.jme3.math.Vector3f);

  public void applyTorque(com.jme3.math.Vector3f);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #16                 // Field objectId:J
       5: aload_1
       6: invokespecial #75                 // Method applyTorque:(JLcom/jme3/math/Vector3f;)V
       9: aload_0
      10: invokevirtual #70                 // Method activate:()V
      13: return

  private native void applyTorque(long, com.jme3.math.Vector3f);

  public void applyImpulse(com.jme3.math.Vector3f, com.jme3.math.Vector3f);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #16                 // Field objectId:J
       5: aload_1
       6: aload_2
       7: invokespecial #76                 // Method applyImpulse:(JLcom/jme3/math/Vector3f;Lcom/jme3/math/Vector3f;)V
      10: aload_0
      11: invokevirtual #70                 // Method activate:()V
      14: return

  private native void applyImpulse(long, com.jme3.math.Vector3f, com.jme3.math.Vector3f);

  public void applyTorqueImpulse(com.jme3.math.Vector3f);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #16                 // Field objectId:J
       5: aload_1
       6: invokespecial #77                 // Method applyTorqueImpulse:(JLcom/jme3/math/Vector3f;)V
       9: aload_0
      10: invokevirtual #70                 // Method activate:()V
      13: return

  private native void applyTorqueImpulse(long, com.jme3.math.Vector3f);

  public void clearForces();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #16                 // Field objectId:J
       5: invokespecial #78                 // Method clearForces:(J)V
       8: return

  private native void clearForces(long);

  public void setCollisionShape(com.jme3.bullet.collision.shapes.CollisionShape);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #79                 // Method com/jme3/bullet/collision/PhysicsCollisionObject.setCollisionShape:(Lcom/jme3/bullet/collision/shapes/CollisionShape;)V
       5: aload_1
       6: instanceof    #12                 // class com/jme3/bullet/collision/shapes/MeshCollisionShape
       9: ifeq          31
      12: aload_0
      13: getfield      #5                  // Field mass:F
      16: fconst_0
      17: fcmpl
      18: ifeq          31
      21: new           #13                 // class java/lang/IllegalStateException
      24: dup
      25: ldc           #14                 // String Dynamic rigidbody can not have mesh collision shape!
      27: invokespecial #15                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      30: athrow
      31: aload_0
      32: getfield      #16                 // Field objectId:J
      35: lconst_0
      36: lcmp
      37: ifne          47
      40: aload_0
      41: invokevirtual #11                 // Method rebuildRigidBody:()V
      44: goto          76
      47: aload_0
      48: aload_0
      49: getfield      #16                 // Field objectId:J
      52: aload_1
      53: invokevirtual #30                 // Method com/jme3/bullet/collision/shapes/CollisionShape.getObjectId:()J
      56: invokespecial #80                 // Method setCollisionShape:(JJ)V
      59: aload_0
      60: aload_0
      61: getfield      #16                 // Field objectId:J
      64: aload_1
      65: invokevirtual #30                 // Method com/jme3/bullet/collision/shapes/CollisionShape.getObjectId:()J
      68: aload_0
      69: getfield      #5                  // Field mass:F
      72: invokespecial #55                 // Method updateMassProps:(JJF)J
      75: pop2
      76: return

  private native void setCollisionShape(long, long);

  public void activate();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #16                 // Field objectId:J
       5: invokespecial #81                 // Method activate:(J)V
       8: return

  private native void activate(long);

  public boolean isActive();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #16                 // Field objectId:J
       5: invokespecial #82                 // Method isActive:(J)Z
       8: ireturn

  private native boolean isActive(long);

  public void setSleepingThresholds(float, float);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #16                 // Field objectId:J
       5: fload_1
       6: fload_2
       7: invokespecial #83                 // Method setSleepingThresholds:(JFF)V
      10: return

  private native void setSleepingThresholds(long, float, float);

  public void setLinearSleepingThreshold(float);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #16                 // Field objectId:J
       5: fload_1
       6: invokespecial #84                 // Method setLinearSleepingThreshold:(JF)V
       9: return

  private native void setLinearSleepingThreshold(long, float);

  public void setAngularSleepingThreshold(float);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #16                 // Field objectId:J
       5: fload_1
       6: invokespecial #85                 // Method setAngularSleepingThreshold:(JF)V
       9: return

  private native void setAngularSleepingThreshold(long, float);

  public float getLinearSleepingThreshold();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #16                 // Field objectId:J
       5: invokespecial #86                 // Method getLinearSleepingThreshold:(J)F
       8: freturn

  private native float getLinearSleepingThreshold(long);

  public float getAngularSleepingThreshold();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #16                 // Field objectId:J
       5: invokespecial #87                 // Method getAngularSleepingThreshold:(J)F
       8: freturn

  private native float getAngularSleepingThreshold(long);

  public float getAngularFactor();
    Code:
       0: aload_0
       1: aconst_null
       2: invokevirtual #88                 // Method getAngularFactor:(Lcom/jme3/math/Vector3f;)Lcom/jme3/math/Vector3f;
       5: invokevirtual #89                 // Method com/jme3/math/Vector3f.getX:()F
       8: freturn

  public com.jme3.math.Vector3f getAngularFactor(com.jme3.math.Vector3f);
    Code:
       0: aload_1
       1: ifnonnull     12
       4: new           #40                 // class com/jme3/math/Vector3f
       7: dup
       8: invokespecial #41                 // Method com/jme3/math/Vector3f."<init>":()V
      11: astore_1
      12: aload_0
      13: aload_0
      14: getfield      #16                 // Field objectId:J
      17: aload_1
      18: invokespecial #90                 // Method getAngularFactor:(JLcom/jme3/math/Vector3f;)V
      21: aload_1
      22: areturn

  private native void getAngularFactor(long, com.jme3.math.Vector3f);

  public void setAngularFactor(float);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #16                 // Field objectId:J
       5: new           #40                 // class com/jme3/math/Vector3f
       8: dup
       9: fload_1
      10: fload_1
      11: fload_1
      12: invokespecial #91                 // Method com/jme3/math/Vector3f."<init>":(FFF)V
      15: invokespecial #92                 // Method setAngularFactor:(JLcom/jme3/math/Vector3f;)V
      18: return

  public void setAngularFactor(com.jme3.math.Vector3f);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #16                 // Field objectId:J
       5: aload_1
       6: invokespecial #92                 // Method setAngularFactor:(JLcom/jme3/math/Vector3f;)V
       9: return

  private native void setAngularFactor(long, com.jme3.math.Vector3f);

  public com.jme3.math.Vector3f getLinearFactor();
    Code:
       0: new           #40                 // class com/jme3/math/Vector3f
       3: dup
       4: invokespecial #41                 // Method com/jme3/math/Vector3f."<init>":()V
       7: astore_1
       8: aload_0
       9: aload_0
      10: getfield      #16                 // Field objectId:J
      13: aload_1
      14: invokespecial #93                 // Method getLinearFactor:(JLcom/jme3/math/Vector3f;)V
      17: aload_1
      18: areturn

  private native void getLinearFactor(long, com.jme3.math.Vector3f);

  public void setLinearFactor(com.jme3.math.Vector3f);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #16                 // Field objectId:J
       5: aload_1
       6: invokespecial #94                 // Method setLinearFactor:(JLcom/jme3/math/Vector3f;)V
       9: return

  private native void setLinearFactor(long, com.jme3.math.Vector3f);

  public void addJoint(com.jme3.bullet.joints.PhysicsJoint);
    Code:
       0: aload_0
       1: getfield      #9                  // Field joints:Ljava/util/ArrayList;
       4: aload_1
       5: invokevirtual #95                 // Method java/util/ArrayList.contains:(Ljava/lang/Object;)Z
       8: ifne          20
      11: aload_0
      12: getfield      #9                  // Field joints:Ljava/util/ArrayList;
      15: aload_1
      16: invokevirtual #96                 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
      19: pop
      20: return

  public void removeJoint(com.jme3.bullet.joints.PhysicsJoint);
    Code:
       0: aload_0
       1: getfield      #9                  // Field joints:Ljava/util/ArrayList;
       4: aload_1
       5: invokevirtual #97                 // Method java/util/ArrayList.remove:(Ljava/lang/Object;)Z
       8: pop
       9: return

  public java.util.List<com.jme3.bullet.joints.PhysicsJoint> getJoints();
    Code:
       0: aload_0
       1: getfield      #9                  // Field joints:Ljava/util/ArrayList;
       4: areturn

  public void write(com.jme3.export.JmeExporter) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #98                 // Method com/jme3/bullet/collision/PhysicsCollisionObject.write:(Lcom/jme3/export/JmeExporter;)V
       5: aload_1
       6: aload_0
       7: invokeinterface #99,  2           // InterfaceMethod com/jme3/export/JmeExporter.getCapsule:(Lcom/jme3/export/Savable;)Lcom/jme3/export/OutputCapsule;
      12: astore_2
      13: aload_2
      14: aload_0
      15: invokevirtual #100                // Method getMass:()F
      18: ldc           #101                // String mass
      20: fconst_1
      21: invokeinterface #102,  4          // InterfaceMethod com/jme3/export/OutputCapsule.write:(FLjava/lang/String;F)V
      26: aload_2
      27: aload_0
      28: invokevirtual #103                // Method getGravity:()Lcom/jme3/math/Vector3f;
      31: ldc           #104                // String gravity
      33: getstatic     #105                // Field com/jme3/math/Vector3f.ZERO:Lcom/jme3/math/Vector3f;
      36: invokeinterface #106,  4          // InterfaceMethod com/jme3/export/OutputCapsule.write:(Lcom/jme3/export/Savable;Ljava/lang/String;Lcom/jme3/export/Savable;)V
      41: aload_2
      42: aload_0
      43: invokevirtual #107                // Method getFriction:()F
      46: ldc           #108                // String friction
      48: ldc           #109                // float 0.5f
      50: invokeinterface #102,  4          // InterfaceMethod com/jme3/export/OutputCapsule.write:(FLjava/lang/String;F)V
      55: aload_2
      56: aload_0
      57: invokevirtual #110                // Method getRestitution:()F
      60: ldc           #111                // String restitution
      62: fconst_0
      63: invokeinterface #102,  4          // InterfaceMethod com/jme3/export/OutputCapsule.write:(FLjava/lang/String;F)V
      68: aload_0
      69: aconst_null
      70: invokevirtual #88                 // Method getAngularFactor:(Lcom/jme3/math/Vector3f;)Lcom/jme3/math/Vector3f;
      73: astore_3
      74: aload_3
      75: getfield      #112                // Field com/jme3/math/Vector3f.x:F
      78: aload_3
      79: getfield      #113                // Field com/jme3/math/Vector3f.y:F
      82: fcmpl
      83: ifne          114
      86: aload_3
      87: getfield      #113                // Field com/jme3/math/Vector3f.y:F
      90: aload_3
      91: getfield      #114                // Field com/jme3/math/Vector3f.z:F
      94: fcmpl
      95: ifne          114
      98: aload_2
      99: aload_0
     100: invokevirtual #115                // Method getAngularFactor:()F
     103: ldc           #116                // String angularFactor
     105: fconst_1
     106: invokeinterface #102,  4          // InterfaceMethod com/jme3/export/OutputCapsule.write:(FLjava/lang/String;F)V
     111: goto          145
     114: aload_2
     115: aload_0
     116: aconst_null
     117: invokevirtual #88                 // Method getAngularFactor:(Lcom/jme3/math/Vector3f;)Lcom/jme3/math/Vector3f;
     120: ldc           #116                // String angularFactor
     122: getstatic     #117                // Field com/jme3/math/Vector3f.UNIT_XYZ:Lcom/jme3/math/Vector3f;
     125: invokeinterface #106,  4          // InterfaceMethod com/jme3/export/OutputCapsule.write:(Lcom/jme3/export/Savable;Ljava/lang/String;Lcom/jme3/export/Savable;)V
     130: aload_2
     131: aload_0
     132: invokevirtual #118                // Method getLinearFactor:()Lcom/jme3/math/Vector3f;
     135: ldc           #119                // String linearFactor
     137: getstatic     #117                // Field com/jme3/math/Vector3f.UNIT_XYZ:Lcom/jme3/math/Vector3f;
     140: invokeinterface #106,  4          // InterfaceMethod com/jme3/export/OutputCapsule.write:(Lcom/jme3/export/Savable;Ljava/lang/String;Lcom/jme3/export/Savable;)V
     145: aload_2
     146: aload_0
     147: getfield      #6                  // Field kinematic:Z
     150: ldc           #120                // String kinematic
     152: iconst_0
     153: invokeinterface #121,  4          // InterfaceMethod com/jme3/export/OutputCapsule.write:(ZLjava/lang/String;Z)V
     158: aload_2
     159: aload_0
     160: invokevirtual #122                // Method getLinearDamping:()F
     163: ldc           #123                // String linearDamping
     165: fconst_0
     166: invokeinterface #102,  4          // InterfaceMethod com/jme3/export/OutputCapsule.write:(FLjava/lang/String;F)V
     171: aload_2
     172: aload_0
     173: invokevirtual #62                 // Method getAngularDamping:()F
     176: ldc           #124                // String angularDamping
     178: fconst_0
     179: invokeinterface #102,  4          // InterfaceMethod com/jme3/export/OutputCapsule.write:(FLjava/lang/String;F)V
     184: aload_2
     185: aload_0
     186: invokevirtual #125                // Method getLinearSleepingThreshold:()F
     189: ldc           #126                // String linearSleepingThreshold
     191: ldc           #127                // float 0.8f
     193: invokeinterface #102,  4          // InterfaceMethod com/jme3/export/OutputCapsule.write:(FLjava/lang/String;F)V
     198: aload_2
     199: aload_0
     200: invokevirtual #128                // Method getAngularSleepingThreshold:()F
     203: ldc           #129                // String angularSleepingThreshold
     205: fconst_1
     206: invokeinterface #102,  4          // InterfaceMethod com/jme3/export/OutputCapsule.write:(FLjava/lang/String;F)V
     211: aload_2
     212: aload_0
     213: invokevirtual #130                // Method getCcdMotionThreshold:()F
     216: ldc           #131                // String ccdMotionThreshold
     218: fconst_0
     219: invokeinterface #102,  4          // InterfaceMethod com/jme3/export/OutputCapsule.write:(FLjava/lang/String;F)V
     224: aload_2
     225: aload_0
     226: invokevirtual #132                // Method getCcdSweptSphereRadius:()F
     229: ldc           #133                // String ccdSweptSphereRadius
     231: fconst_0
     232: invokeinterface #102,  4          // InterfaceMethod com/jme3/export/OutputCapsule.write:(FLjava/lang/String;F)V
     237: aload_2
     238: aload_0
     239: new           #40                 // class com/jme3/math/Vector3f
     242: dup
     243: invokespecial #41                 // Method com/jme3/math/Vector3f."<init>":()V
     246: invokevirtual #134                // Method getPhysicsLocation:(Lcom/jme3/math/Vector3f;)Lcom/jme3/math/Vector3f;
     249: ldc           #135                // String physicsLocation
     251: new           #40                 // class com/jme3/math/Vector3f
     254: dup
     255: invokespecial #41                 // Method com/jme3/math/Vector3f."<init>":()V
     258: invokeinterface #106,  4          // InterfaceMethod com/jme3/export/OutputCapsule.write:(Lcom/jme3/export/Savable;Ljava/lang/String;Lcom/jme3/export/Savable;)V
     263: aload_2
     264: aload_0
     265: new           #46                 // class com/jme3/math/Matrix3f
     268: dup
     269: invokespecial #47                 // Method com/jme3/math/Matrix3f."<init>":()V
     272: invokevirtual #136                // Method getPhysicsRotationMatrix:(Lcom/jme3/math/Matrix3f;)Lcom/jme3/math/Matrix3f;
     275: ldc           #137                // String physicsRotation
     277: new           #46                 // class com/jme3/math/Matrix3f
     280: dup
     281: invokespecial #47                 // Method com/jme3/math/Matrix3f."<init>":()V
     284: invokeinterface #106,  4          // InterfaceMethod com/jme3/export/OutputCapsule.write:(Lcom/jme3/export/Savable;Ljava/lang/String;Lcom/jme3/export/Savable;)V
     289: aload_2
     290: aload_0
     291: getfield      #9                  // Field joints:Ljava/util/ArrayList;
     294: ldc           #138                // String joints
     296: aconst_null
     297: invokeinterface #139,  4          // InterfaceMethod com/jme3/export/OutputCapsule.writeSavableArrayList:(Ljava/util/ArrayList;Ljava/lang/String;Ljava/util/ArrayList;)V
     302: return

  public void read(com.jme3.export.JmeImporter) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #140                // Method com/jme3/bullet/collision/PhysicsCollisionObject.read:(Lcom/jme3/export/JmeImporter;)V
       5: aload_1
       6: aload_0
       7: invokeinterface #141,  2          // InterfaceMethod com/jme3/export/JmeImporter.getCapsule:(Lcom/jme3/export/Savable;)Lcom/jme3/export/InputCapsule;
      12: astore_2
      13: aload_2
      14: ldc           #101                // String mass
      16: fconst_1
      17: invokeinterface #142,  3          // InterfaceMethod com/jme3/export/InputCapsule.readFloat:(Ljava/lang/String;F)F
      22: fstore_3
      23: aload_0
      24: fload_3
      25: putfield      #5                  // Field mass:F
      28: aload_0
      29: invokevirtual #11                 // Method rebuildRigidBody:()V
      32: aload_0
      33: aload_2
      34: ldc           #104                // String gravity
      36: getstatic     #105                // Field com/jme3/math/Vector3f.ZERO:Lcom/jme3/math/Vector3f;
      39: invokevirtual #143                // Method com/jme3/math/Vector3f.clone:()Lcom/jme3/math/Vector3f;
      42: invokeinterface #144,  3          // InterfaceMethod com/jme3/export/InputCapsule.readSavable:(Ljava/lang/String;Lcom/jme3/export/Savable;)Lcom/jme3/export/Savable;
      47: checkcast     #40                 // class com/jme3/math/Vector3f
      50: invokevirtual #145                // Method setGravity:(Lcom/jme3/math/Vector3f;)V
      53: aload_0
      54: aload_2
      55: ldc           #108                // String friction
      57: ldc           #109                // float 0.5f
      59: invokeinterface #142,  3          // InterfaceMethod com/jme3/export/InputCapsule.readFloat:(Ljava/lang/String;F)F
      64: invokevirtual #146                // Method setFriction:(F)V
      67: aload_0
      68: aload_2
      69: ldc           #120                // String kinematic
      71: iconst_0
      72: invokeinterface #147,  3          // InterfaceMethod com/jme3/export/InputCapsule.readBoolean:(Ljava/lang/String;Z)Z
      77: invokevirtual #148                // Method setKinematic:(Z)V
      80: aload_0
      81: aload_2
      82: ldc           #111                // String restitution
      84: fconst_0
      85: invokeinterface #142,  3          // InterfaceMethod com/jme3/export/InputCapsule.readFloat:(Ljava/lang/String;F)F
      90: invokevirtual #149                // Method setRestitution:(F)V
      93: aload_2
      94: ldc           #116                // String angularFactor
      96: aconst_null
      97: invokeinterface #144,  3          // InterfaceMethod com/jme3/export/InputCapsule.readSavable:(Ljava/lang/String;Lcom/jme3/export/Savable;)Lcom/jme3/export/Savable;
     102: checkcast     #40                 // class com/jme3/math/Vector3f
     105: astore        4
     107: aload         4
     109: ifnonnull     128
     112: aload_0
     113: aload_2
     114: ldc           #116                // String angularFactor
     116: fconst_1
     117: invokeinterface #142,  3          // InterfaceMethod com/jme3/export/InputCapsule.readFloat:(Ljava/lang/String;F)F
     122: invokevirtual #150                // Method setAngularFactor:(F)V
     125: goto          155
     128: aload_0
     129: aload         4
     131: invokevirtual #151                // Method setAngularFactor:(Lcom/jme3/math/Vector3f;)V
     134: aload_0
     135: aload_2
     136: ldc           #119                // String linearFactor
     138: getstatic     #117                // Field com/jme3/math/Vector3f.UNIT_XYZ:Lcom/jme3/math/Vector3f;
     141: invokevirtual #143                // Method com/jme3/math/Vector3f.clone:()Lcom/jme3/math/Vector3f;
     144: invokeinterface #144,  3          // InterfaceMethod com/jme3/export/InputCapsule.readSavable:(Ljava/lang/String;Lcom/jme3/export/Savable;)Lcom/jme3/export/Savable;
     149: checkcast     #40                 // class com/jme3/math/Vector3f
     152: invokevirtual #152                // Method setLinearFactor:(Lcom/jme3/math/Vector3f;)V
     155: aload_0
     156: aload_2
     157: ldc           #123                // String linearDamping
     159: fconst_0
     160: invokeinterface #142,  3          // InterfaceMethod com/jme3/export/InputCapsule.readFloat:(Ljava/lang/String;F)F
     165: aload_2
     166: ldc           #124                // String angularDamping
     168: fconst_0
     169: invokeinterface #142,  3          // InterfaceMethod com/jme3/export/InputCapsule.readFloat:(Ljava/lang/String;F)F
     174: invokevirtual #153                // Method setDamping:(FF)V
     177: aload_0
     178: aload_2
     179: ldc           #126                // String linearSleepingThreshold
     181: ldc           #127                // float 0.8f
     183: invokeinterface #142,  3          // InterfaceMethod com/jme3/export/InputCapsule.readFloat:(Ljava/lang/String;F)F
     188: aload_2
     189: ldc           #129                // String angularSleepingThreshold
     191: fconst_1
     192: invokeinterface #142,  3          // InterfaceMethod com/jme3/export/InputCapsule.readFloat:(Ljava/lang/String;F)F
     197: invokevirtual #154                // Method setSleepingThresholds:(FF)V
     200: aload_0
     201: aload_2
     202: ldc           #131                // String ccdMotionThreshold
     204: fconst_0
     205: invokeinterface #142,  3          // InterfaceMethod com/jme3/export/InputCapsule.readFloat:(Ljava/lang/String;F)F
     210: invokevirtual #155                // Method setCcdMotionThreshold:(F)V
     213: aload_0
     214: aload_2
     215: ldc           #133                // String ccdSweptSphereRadius
     217: fconst_0
     218: invokeinterface #142,  3          // InterfaceMethod com/jme3/export/InputCapsule.readFloat:(Ljava/lang/String;F)F
     223: invokevirtual #156                // Method setCcdSweptSphereRadius:(F)V
     226: aload_0
     227: aload_2
     228: ldc           #135                // String physicsLocation
     230: new           #40                 // class com/jme3/math/Vector3f
     233: dup
     234: invokespecial #41                 // Method com/jme3/math/Vector3f."<init>":()V
     237: invokeinterface #144,  3          // InterfaceMethod com/jme3/export/InputCapsule.readSavable:(Ljava/lang/String;Lcom/jme3/export/Savable;)Lcom/jme3/export/Savable;
     242: checkcast     #40                 // class com/jme3/math/Vector3f
     245: invokevirtual #157                // Method setPhysicsLocation:(Lcom/jme3/math/Vector3f;)V
     248: aload_0
     249: aload_2
     250: ldc           #137                // String physicsRotation
     252: new           #46                 // class com/jme3/math/Matrix3f
     255: dup
     256: invokespecial #47                 // Method com/jme3/math/Matrix3f."<init>":()V
     259: invokeinterface #144,  3          // InterfaceMethod com/jme3/export/InputCapsule.readSavable:(Ljava/lang/String;Lcom/jme3/export/Savable;)Lcom/jme3/export/Savable;
     264: checkcast     #46                 // class com/jme3/math/Matrix3f
     267: invokevirtual #158                // Method setPhysicsRotation:(Lcom/jme3/math/Matrix3f;)V
     270: aload_0
     271: aload_2
     272: ldc           #138                // String joints
     274: aconst_null
     275: invokeinterface #159,  3          // InterfaceMethod com/jme3/export/InputCapsule.readSavableArrayList:(Ljava/lang/String;Ljava/util/ArrayList;)Ljava/util/ArrayList;
     280: putfield      #9                  // Field joints:Ljava/util/ArrayList;
     283: return
}
