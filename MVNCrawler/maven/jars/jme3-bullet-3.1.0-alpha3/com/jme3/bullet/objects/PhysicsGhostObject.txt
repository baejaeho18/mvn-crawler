Compiled from "PhysicsGhostObject.java"
public class com.jme3.bullet.objects.PhysicsGhostObject extends com.jme3.bullet.collision.PhysicsCollisionObject {
  protected boolean locationDirty;

  protected final com.jme3.math.Quaternion tmp_inverseWorldRotation;

  private java.util.List<com.jme3.bullet.collision.PhysicsCollisionObject> overlappingObjects;

  public com.jme3.bullet.objects.PhysicsGhostObject();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method com/jme3/bullet/collision/PhysicsCollisionObject."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field locationDirty:Z
       9: aload_0
      10: new           #3                  // class com/jme3/math/Quaternion
      13: dup
      14: invokespecial #4                  // Method com/jme3/math/Quaternion."<init>":()V
      17: putfield      #5                  // Field tmp_inverseWorldRotation:Lcom/jme3/math/Quaternion;
      20: aload_0
      21: new           #6                  // class java/util/LinkedList
      24: dup
      25: invokespecial #7                  // Method java/util/LinkedList."<init>":()V
      28: putfield      #8                  // Field overlappingObjects:Ljava/util/List;
      31: return

  public com.jme3.bullet.objects.PhysicsGhostObject(com.jme3.bullet.collision.shapes.CollisionShape);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method com/jme3/bullet/collision/PhysicsCollisionObject."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field locationDirty:Z
       9: aload_0
      10: new           #3                  // class com/jme3/math/Quaternion
      13: dup
      14: invokespecial #4                  // Method com/jme3/math/Quaternion."<init>":()V
      17: putfield      #5                  // Field tmp_inverseWorldRotation:Lcom/jme3/math/Quaternion;
      20: aload_0
      21: new           #6                  // class java/util/LinkedList
      24: dup
      25: invokespecial #7                  // Method java/util/LinkedList."<init>":()V
      28: putfield      #8                  // Field overlappingObjects:Ljava/util/List;
      31: aload_0
      32: aload_1
      33: putfield      #9                  // Field collisionShape:Lcom/jme3/bullet/collision/shapes/CollisionShape;
      36: aload_0
      37: invokevirtual #10                 // Method buildObject:()V
      40: return

  public com.jme3.bullet.objects.PhysicsGhostObject(com.jme3.scene.Spatial, com.jme3.bullet.collision.shapes.CollisionShape);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method com/jme3/bullet/collision/PhysicsCollisionObject."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field locationDirty:Z
       9: aload_0
      10: new           #3                  // class com/jme3/math/Quaternion
      13: dup
      14: invokespecial #4                  // Method com/jme3/math/Quaternion."<init>":()V
      17: putfield      #5                  // Field tmp_inverseWorldRotation:Lcom/jme3/math/Quaternion;
      20: aload_0
      21: new           #6                  // class java/util/LinkedList
      24: dup
      25: invokespecial #7                  // Method java/util/LinkedList."<init>":()V
      28: putfield      #8                  // Field overlappingObjects:Ljava/util/List;
      31: aload_0
      32: aload_2
      33: putfield      #9                  // Field collisionShape:Lcom/jme3/bullet/collision/shapes/CollisionShape;
      36: aload_0
      37: invokevirtual #10                 // Method buildObject:()V
      40: return

  protected void buildObject();
    Code:
       0: aload_0
       1: getfield      #11                 // Field objectId:J
       4: lconst_0
       5: lcmp
       6: ifne          54
       9: aload_0
      10: aload_0
      11: invokespecial #12                 // Method createGhostObject:()J
      14: putfield      #11                 // Field objectId:J
      17: aload_0
      18: invokevirtual #13                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      21: invokevirtual #14                 // Method java/lang/Class.getName:()Ljava/lang/String;
      24: invokestatic  #15                 // Method java/util/logging/Logger.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;
      27: getstatic     #16                 // Field java/util/logging/Level.FINE:Ljava/util/logging/Level;
      30: ldc           #17                 // String Created Ghost Object {0}
      32: aload_0
      33: getfield      #11                 // Field objectId:J
      36: invokestatic  #18                 // Method java/lang/Long.toHexString:(J)Ljava/lang/String;
      39: invokevirtual #19                 // Method java/util/logging/Logger.log:(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/Object;)V
      42: aload_0
      43: aload_0
      44: getfield      #11                 // Field objectId:J
      47: invokespecial #20                 // Method setGhostFlags:(J)V
      50: aload_0
      51: invokevirtual #21                 // Method initUserPointer:()V
      54: aload_0
      55: aload_0
      56: getfield      #11                 // Field objectId:J
      59: aload_0
      60: getfield      #9                  // Field collisionShape:Lcom/jme3/bullet/collision/shapes/CollisionShape;
      63: invokevirtual #22                 // Method com/jme3/bullet/collision/shapes/CollisionShape.getObjectId:()J
      66: invokevirtual #23                 // Method attachCollisionShape:(JJ)V
      69: return

  private native long createGhostObject();

  private native void setGhostFlags(long);

  public void setCollisionShape(com.jme3.bullet.collision.shapes.CollisionShape);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #24                 // Method com/jme3/bullet/collision/PhysicsCollisionObject.setCollisionShape:(Lcom/jme3/bullet/collision/shapes/CollisionShape;)V
       5: aload_0
       6: getfield      #11                 // Field objectId:J
       9: lconst_0
      10: lcmp
      11: ifne          21
      14: aload_0
      15: invokevirtual #10                 // Method buildObject:()V
      18: goto          33
      21: aload_0
      22: aload_0
      23: getfield      #11                 // Field objectId:J
      26: aload_1
      27: invokevirtual #22                 // Method com/jme3/bullet/collision/shapes/CollisionShape.getObjectId:()J
      30: invokevirtual #23                 // Method attachCollisionShape:(JJ)V
      33: return

  public void setPhysicsLocation(com.jme3.math.Vector3f);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #11                 // Field objectId:J
       5: aload_1
       6: invokespecial #25                 // Method setPhysicsLocation:(JLcom/jme3/math/Vector3f;)V
       9: return

  private native void setPhysicsLocation(long, com.jme3.math.Vector3f);

  public void setPhysicsRotation(com.jme3.math.Matrix3f);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #11                 // Field objectId:J
       5: aload_1
       6: invokespecial #26                 // Method setPhysicsRotation:(JLcom/jme3/math/Matrix3f;)V
       9: return

  private native void setPhysicsRotation(long, com.jme3.math.Matrix3f);

  public void setPhysicsRotation(com.jme3.math.Quaternion);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #11                 // Field objectId:J
       5: aload_1
       6: invokespecial #27                 // Method setPhysicsRotation:(JLcom/jme3/math/Quaternion;)V
       9: return

  private native void setPhysicsRotation(long, com.jme3.math.Quaternion);

  public com.jme3.math.Vector3f getPhysicsLocation(com.jme3.math.Vector3f);
    Code:
       0: aload_1
       1: ifnonnull     12
       4: new           #28                 // class com/jme3/math/Vector3f
       7: dup
       8: invokespecial #29                 // Method com/jme3/math/Vector3f."<init>":()V
      11: astore_1
      12: aload_0
      13: aload_0
      14: getfield      #11                 // Field objectId:J
      17: aload_1
      18: invokespecial #30                 // Method getPhysicsLocation:(JLcom/jme3/math/Vector3f;)V
      21: aload_1
      22: areturn

  private native void getPhysicsLocation(long, com.jme3.math.Vector3f);

  public com.jme3.math.Quaternion getPhysicsRotation(com.jme3.math.Quaternion);
    Code:
       0: aload_1
       1: ifnonnull     12
       4: new           #3                  // class com/jme3/math/Quaternion
       7: dup
       8: invokespecial #4                  // Method com/jme3/math/Quaternion."<init>":()V
      11: astore_1
      12: aload_0
      13: aload_0
      14: getfield      #11                 // Field objectId:J
      17: aload_1
      18: invokespecial #31                 // Method getPhysicsRotation:(JLcom/jme3/math/Quaternion;)V
      21: aload_1
      22: areturn

  private native void getPhysicsRotation(long, com.jme3.math.Quaternion);

  public com.jme3.math.Matrix3f getPhysicsRotationMatrix(com.jme3.math.Matrix3f);
    Code:
       0: aload_1
       1: ifnonnull     12
       4: new           #32                 // class com/jme3/math/Matrix3f
       7: dup
       8: invokespecial #33                 // Method com/jme3/math/Matrix3f."<init>":()V
      11: astore_1
      12: aload_0
      13: aload_0
      14: getfield      #11                 // Field objectId:J
      17: aload_1
      18: invokespecial #34                 // Method getPhysicsRotationMatrix:(JLcom/jme3/math/Matrix3f;)V
      21: aload_1
      22: areturn

  private native void getPhysicsRotationMatrix(long, com.jme3.math.Matrix3f);

  public com.jme3.math.Vector3f getPhysicsLocation();
    Code:
       0: new           #28                 // class com/jme3/math/Vector3f
       3: dup
       4: invokespecial #29                 // Method com/jme3/math/Vector3f."<init>":()V
       7: astore_1
       8: aload_0
       9: aload_0
      10: getfield      #11                 // Field objectId:J
      13: aload_1
      14: invokespecial #30                 // Method getPhysicsLocation:(JLcom/jme3/math/Vector3f;)V
      17: aload_1
      18: areturn

  public com.jme3.math.Quaternion getPhysicsRotation();
    Code:
       0: new           #3                  // class com/jme3/math/Quaternion
       3: dup
       4: invokespecial #4                  // Method com/jme3/math/Quaternion."<init>":()V
       7: astore_1
       8: aload_0
       9: aload_0
      10: getfield      #11                 // Field objectId:J
      13: aload_1
      14: invokespecial #31                 // Method getPhysicsRotation:(JLcom/jme3/math/Quaternion;)V
      17: aload_1
      18: areturn

  public com.jme3.math.Matrix3f getPhysicsRotationMatrix();
    Code:
       0: new           #32                 // class com/jme3/math/Matrix3f
       3: dup
       4: invokespecial #33                 // Method com/jme3/math/Matrix3f."<init>":()V
       7: astore_1
       8: aload_0
       9: aload_0
      10: getfield      #11                 // Field objectId:J
      13: aload_1
      14: invokespecial #34                 // Method getPhysicsRotationMatrix:(JLcom/jme3/math/Matrix3f;)V
      17: aload_1
      18: areturn

  public void destroy();
    Code:
       0: return

  public java.util.List<com.jme3.bullet.collision.PhysicsCollisionObject> getOverlappingObjects();
    Code:
       0: aload_0
       1: getfield      #8                  // Field overlappingObjects:Ljava/util/List;
       4: invokeinterface #35,  1           // InterfaceMethod java/util/List.clear:()V
       9: aload_0
      10: aload_0
      11: getfield      #11                 // Field objectId:J
      14: invokevirtual #36                 // Method getOverlappingObjects:(J)V
      17: aload_0
      18: getfield      #8                  // Field overlappingObjects:Ljava/util/List;
      21: areturn

  protected native void getOverlappingObjects(long);

  private void addOverlappingObject_native(com.jme3.bullet.collision.PhysicsCollisionObject);
    Code:
       0: aload_0
       1: getfield      #8                  // Field overlappingObjects:Ljava/util/List;
       4: aload_1
       5: invokeinterface #37,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      10: pop
      11: return

  public int getOverlappingCount();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #11                 // Field objectId:J
       5: invokespecial #38                 // Method getOverlappingCount:(J)I
       8: ireturn

  private native int getOverlappingCount(long);

  public com.jme3.bullet.collision.PhysicsCollisionObject getOverlapping(int);
    Code:
       0: aload_0
       1: getfield      #8                  // Field overlappingObjects:Ljava/util/List;
       4: iload_1
       5: invokeinterface #39,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      10: checkcast     #40                 // class com/jme3/bullet/collision/PhysicsCollisionObject
      13: areturn

  public void setCcdSweptSphereRadius(float);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #11                 // Field objectId:J
       5: fload_1
       6: invokespecial #41                 // Method setCcdSweptSphereRadius:(JF)V
       9: return

  private native void setCcdSweptSphereRadius(long, float);

  public void setCcdMotionThreshold(float);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #11                 // Field objectId:J
       5: fload_1
       6: invokespecial #42                 // Method setCcdMotionThreshold:(JF)V
       9: return

  private native void setCcdMotionThreshold(long, float);

  public float getCcdSweptSphereRadius();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #11                 // Field objectId:J
       5: invokespecial #43                 // Method getCcdSweptSphereRadius:(J)F
       8: freturn

  private native float getCcdSweptSphereRadius(long);

  public float getCcdMotionThreshold();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #11                 // Field objectId:J
       5: invokespecial #44                 // Method getCcdMotionThreshold:(J)F
       8: freturn

  private native float getCcdMotionThreshold(long);

  public float getCcdSquareMotionThreshold();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #11                 // Field objectId:J
       5: invokespecial #45                 // Method getCcdSquareMotionThreshold:(J)F
       8: freturn

  private native float getCcdSquareMotionThreshold(long);

  public void write(com.jme3.export.JmeExporter) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #46                 // Method com/jme3/bullet/collision/PhysicsCollisionObject.write:(Lcom/jme3/export/JmeExporter;)V
       5: aload_1
       6: aload_0
       7: invokeinterface #47,  2           // InterfaceMethod com/jme3/export/JmeExporter.getCapsule:(Lcom/jme3/export/Savable;)Lcom/jme3/export/OutputCapsule;
      12: astore_2
      13: aload_2
      14: aload_0
      15: new           #28                 // class com/jme3/math/Vector3f
      18: dup
      19: invokespecial #29                 // Method com/jme3/math/Vector3f."<init>":()V
      22: invokevirtual #48                 // Method getPhysicsLocation:(Lcom/jme3/math/Vector3f;)Lcom/jme3/math/Vector3f;
      25: ldc           #49                 // String physicsLocation
      27: new           #28                 // class com/jme3/math/Vector3f
      30: dup
      31: invokespecial #29                 // Method com/jme3/math/Vector3f."<init>":()V
      34: invokeinterface #50,  4           // InterfaceMethod com/jme3/export/OutputCapsule.write:(Lcom/jme3/export/Savable;Ljava/lang/String;Lcom/jme3/export/Savable;)V
      39: aload_2
      40: aload_0
      41: new           #32                 // class com/jme3/math/Matrix3f
      44: dup
      45: invokespecial #33                 // Method com/jme3/math/Matrix3f."<init>":()V
      48: invokevirtual #51                 // Method getPhysicsRotationMatrix:(Lcom/jme3/math/Matrix3f;)Lcom/jme3/math/Matrix3f;
      51: ldc           #52                 // String physicsRotation
      53: new           #32                 // class com/jme3/math/Matrix3f
      56: dup
      57: invokespecial #33                 // Method com/jme3/math/Matrix3f."<init>":()V
      60: invokeinterface #50,  4           // InterfaceMethod com/jme3/export/OutputCapsule.write:(Lcom/jme3/export/Savable;Ljava/lang/String;Lcom/jme3/export/Savable;)V
      65: aload_2
      66: aload_0
      67: invokevirtual #53                 // Method getCcdMotionThreshold:()F
      70: ldc           #54                 // String ccdMotionThreshold
      72: fconst_0
      73: invokeinterface #55,  4           // InterfaceMethod com/jme3/export/OutputCapsule.write:(FLjava/lang/String;F)V
      78: aload_2
      79: aload_0
      80: invokevirtual #56                 // Method getCcdSweptSphereRadius:()F
      83: ldc           #57                 // String ccdSweptSphereRadius
      85: fconst_0
      86: invokeinterface #55,  4           // InterfaceMethod com/jme3/export/OutputCapsule.write:(FLjava/lang/String;F)V
      91: return

  public void read(com.jme3.export.JmeImporter) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #58                 // Method com/jme3/bullet/collision/PhysicsCollisionObject.read:(Lcom/jme3/export/JmeImporter;)V
       5: aload_1
       6: aload_0
       7: invokeinterface #59,  2           // InterfaceMethod com/jme3/export/JmeImporter.getCapsule:(Lcom/jme3/export/Savable;)Lcom/jme3/export/InputCapsule;
      12: astore_2
      13: aload_0
      14: invokevirtual #10                 // Method buildObject:()V
      17: aload_0
      18: aload_2
      19: ldc           #49                 // String physicsLocation
      21: new           #28                 // class com/jme3/math/Vector3f
      24: dup
      25: invokespecial #29                 // Method com/jme3/math/Vector3f."<init>":()V
      28: invokeinterface #60,  3           // InterfaceMethod com/jme3/export/InputCapsule.readSavable:(Ljava/lang/String;Lcom/jme3/export/Savable;)Lcom/jme3/export/Savable;
      33: checkcast     #28                 // class com/jme3/math/Vector3f
      36: invokevirtual #61                 // Method setPhysicsLocation:(Lcom/jme3/math/Vector3f;)V
      39: aload_0
      40: aload_2
      41: ldc           #52                 // String physicsRotation
      43: new           #32                 // class com/jme3/math/Matrix3f
      46: dup
      47: invokespecial #33                 // Method com/jme3/math/Matrix3f."<init>":()V
      50: invokeinterface #60,  3           // InterfaceMethod com/jme3/export/InputCapsule.readSavable:(Ljava/lang/String;Lcom/jme3/export/Savable;)Lcom/jme3/export/Savable;
      55: checkcast     #32                 // class com/jme3/math/Matrix3f
      58: invokevirtual #62                 // Method setPhysicsRotation:(Lcom/jme3/math/Matrix3f;)V
      61: aload_0
      62: aload_2
      63: ldc           #54                 // String ccdMotionThreshold
      65: fconst_0
      66: invokeinterface #63,  3           // InterfaceMethod com/jme3/export/InputCapsule.readFloat:(Ljava/lang/String;F)F
      71: invokevirtual #64                 // Method setCcdMotionThreshold:(F)V
      74: aload_0
      75: aload_2
      76: ldc           #57                 // String ccdSweptSphereRadius
      78: fconst_0
      79: invokeinterface #63,  3           // InterfaceMethod com/jme3/export/InputCapsule.readFloat:(Ljava/lang/String;F)F
      84: invokevirtual #65                 // Method setCcdSweptSphereRadius:(F)V
      87: return
}
