Compiled from "VehicleWheel.java"
public class com.jme3.bullet.objects.VehicleWheel implements com.jme3.export.Savable {
  protected long wheelId;

  protected int wheelIndex;

  protected boolean frontWheel;

  protected com.jme3.math.Vector3f location;

  protected com.jme3.math.Vector3f direction;

  protected com.jme3.math.Vector3f axle;

  protected float suspensionStiffness;

  protected float wheelsDampingRelaxation;

  protected float wheelsDampingCompression;

  protected float frictionSlip;

  protected float rollInfluence;

  protected float maxSuspensionTravelCm;

  protected float maxSuspensionForce;

  protected float radius;

  protected float restLength;

  protected com.jme3.math.Vector3f wheelWorldLocation;

  protected com.jme3.math.Quaternion wheelWorldRotation;

  protected com.jme3.scene.Spatial wheelSpatial;

  protected com.jme3.math.Matrix3f tmp_Matrix;

  protected final com.jme3.math.Quaternion tmp_inverseWorldRotation;

  private boolean applyLocal;

  public com.jme3.bullet.objects.VehicleWheel();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: lconst_0
       6: putfield      #2                  // Field wheelId:J
       9: aload_0
      10: iconst_0
      11: putfield      #3                  // Field wheelIndex:I
      14: aload_0
      15: new           #4                  // class com/jme3/math/Vector3f
      18: dup
      19: invokespecial #5                  // Method com/jme3/math/Vector3f."<init>":()V
      22: putfield      #6                  // Field location:Lcom/jme3/math/Vector3f;
      25: aload_0
      26: new           #4                  // class com/jme3/math/Vector3f
      29: dup
      30: invokespecial #5                  // Method com/jme3/math/Vector3f."<init>":()V
      33: putfield      #7                  // Field direction:Lcom/jme3/math/Vector3f;
      36: aload_0
      37: new           #4                  // class com/jme3/math/Vector3f
      40: dup
      41: invokespecial #5                  // Method com/jme3/math/Vector3f."<init>":()V
      44: putfield      #8                  // Field axle:Lcom/jme3/math/Vector3f;
      47: aload_0
      48: ldc           #9                  // float 20.0f
      50: putfield      #10                 // Field suspensionStiffness:F
      53: aload_0
      54: ldc           #11                 // float 2.3f
      56: putfield      #12                 // Field wheelsDampingRelaxation:F
      59: aload_0
      60: ldc           #13                 // float 4.4f
      62: putfield      #14                 // Field wheelsDampingCompression:F
      65: aload_0
      66: ldc           #15                 // float 10.5f
      68: putfield      #16                 // Field frictionSlip:F
      71: aload_0
      72: fconst_1
      73: putfield      #17                 // Field rollInfluence:F
      76: aload_0
      77: ldc           #18                 // float 500.0f
      79: putfield      #19                 // Field maxSuspensionTravelCm:F
      82: aload_0
      83: ldc           #20                 // float 6000.0f
      85: putfield      #21                 // Field maxSuspensionForce:F
      88: aload_0
      89: ldc           #22                 // float 0.5f
      91: putfield      #23                 // Field radius:F
      94: aload_0
      95: fconst_1
      96: putfield      #24                 // Field restLength:F
      99: aload_0
     100: new           #4                  // class com/jme3/math/Vector3f
     103: dup
     104: invokespecial #5                  // Method com/jme3/math/Vector3f."<init>":()V
     107: putfield      #25                 // Field wheelWorldLocation:Lcom/jme3/math/Vector3f;
     110: aload_0
     111: new           #26                 // class com/jme3/math/Quaternion
     114: dup
     115: invokespecial #27                 // Method com/jme3/math/Quaternion."<init>":()V
     118: putfield      #28                 // Field wheelWorldRotation:Lcom/jme3/math/Quaternion;
     121: aload_0
     122: new           #29                 // class com/jme3/math/Matrix3f
     125: dup
     126: invokespecial #30                 // Method com/jme3/math/Matrix3f."<init>":()V
     129: putfield      #31                 // Field tmp_Matrix:Lcom/jme3/math/Matrix3f;
     132: aload_0
     133: new           #26                 // class com/jme3/math/Quaternion
     136: dup
     137: invokespecial #27                 // Method com/jme3/math/Quaternion."<init>":()V
     140: putfield      #32                 // Field tmp_inverseWorldRotation:Lcom/jme3/math/Quaternion;
     143: aload_0
     144: iconst_0
     145: putfield      #33                 // Field applyLocal:Z
     148: return

  public com.jme3.bullet.objects.VehicleWheel(com.jme3.scene.Spatial, com.jme3.math.Vector3f, com.jme3.math.Vector3f, com.jme3.math.Vector3f, float, float, boolean);
    Code:
       0: aload_0
       1: aload_2
       2: aload_3
       3: aload         4
       5: fload         5
       7: fload         6
       9: iload         7
      11: invokespecial #34                 // Method "<init>":(Lcom/jme3/math/Vector3f;Lcom/jme3/math/Vector3f;Lcom/jme3/math/Vector3f;FFZ)V
      14: aload_0
      15: aload_1
      16: putfield      #35                 // Field wheelSpatial:Lcom/jme3/scene/Spatial;
      19: return

  public com.jme3.bullet.objects.VehicleWheel(com.jme3.math.Vector3f, com.jme3.math.Vector3f, com.jme3.math.Vector3f, float, float, boolean);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: lconst_0
       6: putfield      #2                  // Field wheelId:J
       9: aload_0
      10: iconst_0
      11: putfield      #3                  // Field wheelIndex:I
      14: aload_0
      15: new           #4                  // class com/jme3/math/Vector3f
      18: dup
      19: invokespecial #5                  // Method com/jme3/math/Vector3f."<init>":()V
      22: putfield      #6                  // Field location:Lcom/jme3/math/Vector3f;
      25: aload_0
      26: new           #4                  // class com/jme3/math/Vector3f
      29: dup
      30: invokespecial #5                  // Method com/jme3/math/Vector3f."<init>":()V
      33: putfield      #7                  // Field direction:Lcom/jme3/math/Vector3f;
      36: aload_0
      37: new           #4                  // class com/jme3/math/Vector3f
      40: dup
      41: invokespecial #5                  // Method com/jme3/math/Vector3f."<init>":()V
      44: putfield      #8                  // Field axle:Lcom/jme3/math/Vector3f;
      47: aload_0
      48: ldc           #9                  // float 20.0f
      50: putfield      #10                 // Field suspensionStiffness:F
      53: aload_0
      54: ldc           #11                 // float 2.3f
      56: putfield      #12                 // Field wheelsDampingRelaxation:F
      59: aload_0
      60: ldc           #13                 // float 4.4f
      62: putfield      #14                 // Field wheelsDampingCompression:F
      65: aload_0
      66: ldc           #15                 // float 10.5f
      68: putfield      #16                 // Field frictionSlip:F
      71: aload_0
      72: fconst_1
      73: putfield      #17                 // Field rollInfluence:F
      76: aload_0
      77: ldc           #18                 // float 500.0f
      79: putfield      #19                 // Field maxSuspensionTravelCm:F
      82: aload_0
      83: ldc           #20                 // float 6000.0f
      85: putfield      #21                 // Field maxSuspensionForce:F
      88: aload_0
      89: ldc           #22                 // float 0.5f
      91: putfield      #23                 // Field radius:F
      94: aload_0
      95: fconst_1
      96: putfield      #24                 // Field restLength:F
      99: aload_0
     100: new           #4                  // class com/jme3/math/Vector3f
     103: dup
     104: invokespecial #5                  // Method com/jme3/math/Vector3f."<init>":()V
     107: putfield      #25                 // Field wheelWorldLocation:Lcom/jme3/math/Vector3f;
     110: aload_0
     111: new           #26                 // class com/jme3/math/Quaternion
     114: dup
     115: invokespecial #27                 // Method com/jme3/math/Quaternion."<init>":()V
     118: putfield      #28                 // Field wheelWorldRotation:Lcom/jme3/math/Quaternion;
     121: aload_0
     122: new           #29                 // class com/jme3/math/Matrix3f
     125: dup
     126: invokespecial #30                 // Method com/jme3/math/Matrix3f."<init>":()V
     129: putfield      #31                 // Field tmp_Matrix:Lcom/jme3/math/Matrix3f;
     132: aload_0
     133: new           #26                 // class com/jme3/math/Quaternion
     136: dup
     137: invokespecial #27                 // Method com/jme3/math/Quaternion."<init>":()V
     140: putfield      #32                 // Field tmp_inverseWorldRotation:Lcom/jme3/math/Quaternion;
     143: aload_0
     144: iconst_0
     145: putfield      #33                 // Field applyLocal:Z
     148: aload_0
     149: getfield      #6                  // Field location:Lcom/jme3/math/Vector3f;
     152: aload_1
     153: invokevirtual #36                 // Method com/jme3/math/Vector3f.set:(Lcom/jme3/math/Vector3f;)Lcom/jme3/math/Vector3f;
     156: pop
     157: aload_0
     158: getfield      #7                  // Field direction:Lcom/jme3/math/Vector3f;
     161: aload_2
     162: invokevirtual #36                 // Method com/jme3/math/Vector3f.set:(Lcom/jme3/math/Vector3f;)Lcom/jme3/math/Vector3f;
     165: pop
     166: aload_0
     167: getfield      #8                  // Field axle:Lcom/jme3/math/Vector3f;
     170: aload_3
     171: invokevirtual #36                 // Method com/jme3/math/Vector3f.set:(Lcom/jme3/math/Vector3f;)Lcom/jme3/math/Vector3f;
     174: pop
     175: aload_0
     176: iload         6
     178: putfield      #37                 // Field frontWheel:Z
     181: aload_0
     182: fload         4
     184: putfield      #24                 // Field restLength:F
     187: aload_0
     188: fload         5
     190: putfield      #23                 // Field radius:F
     193: return

  public void updatePhysicsState();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #2                  // Field wheelId:J
       5: aload_0
       6: getfield      #3                  // Field wheelIndex:I
       9: aload_0
      10: getfield      #25                 // Field wheelWorldLocation:Lcom/jme3/math/Vector3f;
      13: invokespecial #38                 // Method getWheelLocation:(JILcom/jme3/math/Vector3f;)V
      16: aload_0
      17: aload_0
      18: getfield      #2                  // Field wheelId:J
      21: aload_0
      22: getfield      #3                  // Field wheelIndex:I
      25: aload_0
      26: getfield      #31                 // Field tmp_Matrix:Lcom/jme3/math/Matrix3f;
      29: invokespecial #39                 // Method getWheelRotation:(JILcom/jme3/math/Matrix3f;)V
      32: aload_0
      33: getfield      #28                 // Field wheelWorldRotation:Lcom/jme3/math/Quaternion;
      36: aload_0
      37: getfield      #31                 // Field tmp_Matrix:Lcom/jme3/math/Matrix3f;
      40: invokevirtual #40                 // Method com/jme3/math/Quaternion.fromRotationMatrix:(Lcom/jme3/math/Matrix3f;)Lcom/jme3/math/Quaternion;
      43: pop
      44: return

  private native void getWheelLocation(long, int, com.jme3.math.Vector3f);

  private native void getWheelRotation(long, int, com.jme3.math.Matrix3f);

  public void applyWheelTransform();
    Code:
       0: aload_0
       1: getfield      #35                 // Field wheelSpatial:Lcom/jme3/scene/Spatial;
       4: ifnonnull     8
       7: return
       8: aload_0
       9: getfield      #35                 // Field wheelSpatial:Lcom/jme3/scene/Spatial;
      12: invokevirtual #41                 // Method com/jme3/scene/Spatial.getLocalRotation:()Lcom/jme3/math/Quaternion;
      15: astore_1
      16: aload_0
      17: getfield      #35                 // Field wheelSpatial:Lcom/jme3/scene/Spatial;
      20: invokevirtual #42                 // Method com/jme3/scene/Spatial.getLocalTranslation:()Lcom/jme3/math/Vector3f;
      23: astore_2
      24: aload_0
      25: getfield      #33                 // Field applyLocal:Z
      28: ifne          157
      31: aload_0
      32: getfield      #35                 // Field wheelSpatial:Lcom/jme3/scene/Spatial;
      35: invokevirtual #43                 // Method com/jme3/scene/Spatial.getParent:()Lcom/jme3/scene/Node;
      38: ifnull        157
      41: aload_2
      42: aload_0
      43: getfield      #25                 // Field wheelWorldLocation:Lcom/jme3/math/Vector3f;
      46: invokevirtual #36                 // Method com/jme3/math/Vector3f.set:(Lcom/jme3/math/Vector3f;)Lcom/jme3/math/Vector3f;
      49: aload_0
      50: getfield      #35                 // Field wheelSpatial:Lcom/jme3/scene/Spatial;
      53: invokevirtual #43                 // Method com/jme3/scene/Spatial.getParent:()Lcom/jme3/scene/Node;
      56: invokevirtual #44                 // Method com/jme3/scene/Node.getWorldTranslation:()Lcom/jme3/math/Vector3f;
      59: invokevirtual #45                 // Method com/jme3/math/Vector3f.subtractLocal:(Lcom/jme3/math/Vector3f;)Lcom/jme3/math/Vector3f;
      62: pop
      63: aload_2
      64: aload_0
      65: getfield      #35                 // Field wheelSpatial:Lcom/jme3/scene/Spatial;
      68: invokevirtual #43                 // Method com/jme3/scene/Spatial.getParent:()Lcom/jme3/scene/Node;
      71: invokevirtual #46                 // Method com/jme3/scene/Node.getWorldScale:()Lcom/jme3/math/Vector3f;
      74: invokevirtual #47                 // Method com/jme3/math/Vector3f.divideLocal:(Lcom/jme3/math/Vector3f;)Lcom/jme3/math/Vector3f;
      77: pop
      78: aload_0
      79: getfield      #32                 // Field tmp_inverseWorldRotation:Lcom/jme3/math/Quaternion;
      82: aload_0
      83: getfield      #35                 // Field wheelSpatial:Lcom/jme3/scene/Spatial;
      86: invokevirtual #43                 // Method com/jme3/scene/Spatial.getParent:()Lcom/jme3/scene/Node;
      89: invokevirtual #48                 // Method com/jme3/scene/Node.getWorldRotation:()Lcom/jme3/math/Quaternion;
      92: invokevirtual #49                 // Method com/jme3/math/Quaternion.set:(Lcom/jme3/math/Quaternion;)Lcom/jme3/math/Quaternion;
      95: invokevirtual #50                 // Method com/jme3/math/Quaternion.inverseLocal:()Lcom/jme3/math/Quaternion;
      98: aload_2
      99: invokevirtual #51                 // Method com/jme3/math/Quaternion.multLocal:(Lcom/jme3/math/Vector3f;)Lcom/jme3/math/Vector3f;
     102: pop
     103: aload_1
     104: aload_0
     105: getfield      #28                 // Field wheelWorldRotation:Lcom/jme3/math/Quaternion;
     108: invokevirtual #49                 // Method com/jme3/math/Quaternion.set:(Lcom/jme3/math/Quaternion;)Lcom/jme3/math/Quaternion;
     111: pop
     112: aload_0
     113: getfield      #32                 // Field tmp_inverseWorldRotation:Lcom/jme3/math/Quaternion;
     116: aload_0
     117: getfield      #35                 // Field wheelSpatial:Lcom/jme3/scene/Spatial;
     120: invokevirtual #43                 // Method com/jme3/scene/Spatial.getParent:()Lcom/jme3/scene/Node;
     123: invokevirtual #48                 // Method com/jme3/scene/Node.getWorldRotation:()Lcom/jme3/math/Quaternion;
     126: invokevirtual #49                 // Method com/jme3/math/Quaternion.set:(Lcom/jme3/math/Quaternion;)Lcom/jme3/math/Quaternion;
     129: invokevirtual #50                 // Method com/jme3/math/Quaternion.inverseLocal:()Lcom/jme3/math/Quaternion;
     132: aload_1
     133: aload_1
     134: invokevirtual #52                 // Method com/jme3/math/Quaternion.mult:(Lcom/jme3/math/Quaternion;Lcom/jme3/math/Quaternion;)Lcom/jme3/math/Quaternion;
     137: pop
     138: aload_0
     139: getfield      #35                 // Field wheelSpatial:Lcom/jme3/scene/Spatial;
     142: aload_2
     143: invokevirtual #53                 // Method com/jme3/scene/Spatial.setLocalTranslation:(Lcom/jme3/math/Vector3f;)V
     146: aload_0
     147: getfield      #35                 // Field wheelSpatial:Lcom/jme3/scene/Spatial;
     150: aload_1
     151: invokevirtual #54                 // Method com/jme3/scene/Spatial.setLocalRotation:(Lcom/jme3/math/Quaternion;)V
     154: goto          179
     157: aload_0
     158: getfield      #35                 // Field wheelSpatial:Lcom/jme3/scene/Spatial;
     161: aload_0
     162: getfield      #25                 // Field wheelWorldLocation:Lcom/jme3/math/Vector3f;
     165: invokevirtual #53                 // Method com/jme3/scene/Spatial.setLocalTranslation:(Lcom/jme3/math/Vector3f;)V
     168: aload_0
     169: getfield      #35                 // Field wheelSpatial:Lcom/jme3/scene/Spatial;
     172: aload_0
     173: getfield      #28                 // Field wheelWorldRotation:Lcom/jme3/math/Quaternion;
     176: invokevirtual #54                 // Method com/jme3/scene/Spatial.setLocalRotation:(Lcom/jme3/math/Quaternion;)V
     179: return

  public long getWheelId();
    Code:
       0: aload_0
       1: getfield      #2                  // Field wheelId:J
       4: lreturn

  public void setVehicleId(long, int);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #2                  // Field wheelId:J
       5: aload_0
       6: iload_3
       7: putfield      #3                  // Field wheelIndex:I
      10: aload_0
      11: invokespecial #55                 // Method applyInfo:()V
      14: return

  public boolean isFrontWheel();
    Code:
       0: aload_0
       1: getfield      #37                 // Field frontWheel:Z
       4: ireturn

  public void setFrontWheel(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #37                 // Field frontWheel:Z
       5: aload_0
       6: invokespecial #55                 // Method applyInfo:()V
       9: return

  public com.jme3.math.Vector3f getLocation();
    Code:
       0: aload_0
       1: getfield      #6                  // Field location:Lcom/jme3/math/Vector3f;
       4: areturn

  public com.jme3.math.Vector3f getDirection();
    Code:
       0: aload_0
       1: getfield      #7                  // Field direction:Lcom/jme3/math/Vector3f;
       4: areturn

  public com.jme3.math.Vector3f getAxle();
    Code:
       0: aload_0
       1: getfield      #8                  // Field axle:Lcom/jme3/math/Vector3f;
       4: areturn

  public float getSuspensionStiffness();
    Code:
       0: aload_0
       1: getfield      #10                 // Field suspensionStiffness:F
       4: freturn

  public void setSuspensionStiffness(float);
    Code:
       0: aload_0
       1: fload_1
       2: putfield      #10                 // Field suspensionStiffness:F
       5: aload_0
       6: invokespecial #55                 // Method applyInfo:()V
       9: return

  public float getWheelsDampingRelaxation();
    Code:
       0: aload_0
       1: getfield      #12                 // Field wheelsDampingRelaxation:F
       4: freturn

  public void setWheelsDampingRelaxation(float);
    Code:
       0: aload_0
       1: fload_1
       2: putfield      #12                 // Field wheelsDampingRelaxation:F
       5: aload_0
       6: invokespecial #55                 // Method applyInfo:()V
       9: return

  public float getWheelsDampingCompression();
    Code:
       0: aload_0
       1: getfield      #14                 // Field wheelsDampingCompression:F
       4: freturn

  public void setWheelsDampingCompression(float);
    Code:
       0: aload_0
       1: fload_1
       2: putfield      #14                 // Field wheelsDampingCompression:F
       5: aload_0
       6: invokespecial #55                 // Method applyInfo:()V
       9: return

  public float getFrictionSlip();
    Code:
       0: aload_0
       1: getfield      #16                 // Field frictionSlip:F
       4: freturn

  public void setFrictionSlip(float);
    Code:
       0: aload_0
       1: fload_1
       2: putfield      #16                 // Field frictionSlip:F
       5: aload_0
       6: invokespecial #55                 // Method applyInfo:()V
       9: return

  public float getRollInfluence();
    Code:
       0: aload_0
       1: getfield      #17                 // Field rollInfluence:F
       4: freturn

  public void setRollInfluence(float);
    Code:
       0: aload_0
       1: fload_1
       2: putfield      #17                 // Field rollInfluence:F
       5: aload_0
       6: invokespecial #55                 // Method applyInfo:()V
       9: return

  public float getMaxSuspensionTravelCm();
    Code:
       0: aload_0
       1: getfield      #19                 // Field maxSuspensionTravelCm:F
       4: freturn

  public void setMaxSuspensionTravelCm(float);
    Code:
       0: aload_0
       1: fload_1
       2: putfield      #19                 // Field maxSuspensionTravelCm:F
       5: aload_0
       6: invokespecial #55                 // Method applyInfo:()V
       9: return

  public float getMaxSuspensionForce();
    Code:
       0: aload_0
       1: getfield      #21                 // Field maxSuspensionForce:F
       4: freturn

  public void setMaxSuspensionForce(float);
    Code:
       0: aload_0
       1: fload_1
       2: putfield      #21                 // Field maxSuspensionForce:F
       5: aload_0
       6: invokespecial #55                 // Method applyInfo:()V
       9: return

  private void applyInfo();
    Code:
       0: aload_0
       1: getfield      #2                  // Field wheelId:J
       4: lconst_0
       5: lcmp
       6: ifne          10
       9: return
      10: aload_0
      11: aload_0
      12: getfield      #2                  // Field wheelId:J
      15: aload_0
      16: getfield      #3                  // Field wheelIndex:I
      19: aload_0
      20: getfield      #10                 // Field suspensionStiffness:F
      23: aload_0
      24: getfield      #12                 // Field wheelsDampingRelaxation:F
      27: aload_0
      28: getfield      #14                 // Field wheelsDampingCompression:F
      31: aload_0
      32: getfield      #16                 // Field frictionSlip:F
      35: aload_0
      36: getfield      #17                 // Field rollInfluence:F
      39: aload_0
      40: getfield      #19                 // Field maxSuspensionTravelCm:F
      43: aload_0
      44: getfield      #21                 // Field maxSuspensionForce:F
      47: aload_0
      48: getfield      #23                 // Field radius:F
      51: aload_0
      52: getfield      #37                 // Field frontWheel:Z
      55: aload_0
      56: getfield      #24                 // Field restLength:F
      59: invokespecial #56                 // Method applyInfo:(JIFFFFFFFFZF)V
      62: return

  private native void applyInfo(long, int, float, float, float, float, float, float, float, float, boolean, float);

  public float getRadius();
    Code:
       0: aload_0
       1: getfield      #23                 // Field radius:F
       4: freturn

  public void setRadius(float);
    Code:
       0: aload_0
       1: fload_1
       2: putfield      #23                 // Field radius:F
       5: aload_0
       6: invokespecial #55                 // Method applyInfo:()V
       9: return

  public float getRestLength();
    Code:
       0: aload_0
       1: getfield      #24                 // Field restLength:F
       4: freturn

  public void setRestLength(float);
    Code:
       0: aload_0
       1: fload_1
       2: putfield      #24                 // Field restLength:F
       5: aload_0
       6: invokespecial #55                 // Method applyInfo:()V
       9: return

  public com.jme3.bullet.collision.PhysicsCollisionObject getGroundObject();
    Code:
       0: aconst_null
       1: areturn

  public com.jme3.math.Vector3f getCollisionLocation(com.jme3.math.Vector3f);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #2                  // Field wheelId:J
       5: aload_0
       6: getfield      #3                  // Field wheelIndex:I
       9: aload_1
      10: invokespecial #57                 // Method getCollisionLocation:(JILcom/jme3/math/Vector3f;)V
      13: aload_1
      14: areturn

  private native void getCollisionLocation(long, int, com.jme3.math.Vector3f);

  public com.jme3.math.Vector3f getCollisionLocation();
    Code:
       0: new           #4                  // class com/jme3/math/Vector3f
       3: dup
       4: invokespecial #5                  // Method com/jme3/math/Vector3f."<init>":()V
       7: astore_1
       8: aload_0
       9: aload_0
      10: getfield      #2                  // Field wheelId:J
      13: aload_0
      14: getfield      #3                  // Field wheelIndex:I
      17: aload_1
      18: invokespecial #57                 // Method getCollisionLocation:(JILcom/jme3/math/Vector3f;)V
      21: aload_1
      22: areturn

  public com.jme3.math.Vector3f getCollisionNormal(com.jme3.math.Vector3f);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #2                  // Field wheelId:J
       5: aload_0
       6: getfield      #3                  // Field wheelIndex:I
       9: aload_1
      10: invokespecial #58                 // Method getCollisionNormal:(JILcom/jme3/math/Vector3f;)V
      13: aload_1
      14: areturn

  private native void getCollisionNormal(long, int, com.jme3.math.Vector3f);

  public com.jme3.math.Vector3f getCollisionNormal();
    Code:
       0: new           #4                  // class com/jme3/math/Vector3f
       3: dup
       4: invokespecial #5                  // Method com/jme3/math/Vector3f."<init>":()V
       7: astore_1
       8: aload_0
       9: aload_0
      10: getfield      #2                  // Field wheelId:J
      13: aload_0
      14: getfield      #3                  // Field wheelIndex:I
      17: aload_1
      18: invokespecial #58                 // Method getCollisionNormal:(JILcom/jme3/math/Vector3f;)V
      21: aload_1
      22: areturn

  public float getSkidInfo();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #2                  // Field wheelId:J
       5: aload_0
       6: getfield      #3                  // Field wheelIndex:I
       9: invokevirtual #59                 // Method getSkidInfo:(JI)F
      12: freturn

  public native float getSkidInfo(long, int);

  public float getDeltaRotation();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #2                  // Field wheelId:J
       5: aload_0
       6: getfield      #3                  // Field wheelIndex:I
       9: invokevirtual #60                 // Method getDeltaRotation:(JI)F
      12: freturn

  public native float getDeltaRotation(long, int);

  public void read(com.jme3.export.JmeImporter) throws java.io.IOException;
    Code:
       0: aload_1
       1: aload_0
       2: invokeinterface #61,  2           // InterfaceMethod com/jme3/export/JmeImporter.getCapsule:(Lcom/jme3/export/Savable;)Lcom/jme3/export/InputCapsule;
       7: astore_2
       8: aload_0
       9: aload_2
      10: ldc           #62                 // String wheelSpatial
      12: aconst_null
      13: invokeinterface #63,  3           // InterfaceMethod com/jme3/export/InputCapsule.readSavable:(Ljava/lang/String;Lcom/jme3/export/Savable;)Lcom/jme3/export/Savable;
      18: checkcast     #64                 // class com/jme3/scene/Spatial
      21: putfield      #35                 // Field wheelSpatial:Lcom/jme3/scene/Spatial;
      24: aload_0
      25: aload_2
      26: ldc           #65                 // String frontWheel
      28: iconst_0
      29: invokeinterface #66,  3           // InterfaceMethod com/jme3/export/InputCapsule.readBoolean:(Ljava/lang/String;Z)Z
      34: putfield      #37                 // Field frontWheel:Z
      37: aload_0
      38: aload_2
      39: ldc           #67                 // String wheelLocation
      41: new           #4                  // class com/jme3/math/Vector3f
      44: dup
      45: invokespecial #5                  // Method com/jme3/math/Vector3f."<init>":()V
      48: invokeinterface #63,  3           // InterfaceMethod com/jme3/export/InputCapsule.readSavable:(Ljava/lang/String;Lcom/jme3/export/Savable;)Lcom/jme3/export/Savable;
      53: checkcast     #4                  // class com/jme3/math/Vector3f
      56: putfield      #6                  // Field location:Lcom/jme3/math/Vector3f;
      59: aload_0
      60: aload_2
      61: ldc           #68                 // String wheelDirection
      63: new           #4                  // class com/jme3/math/Vector3f
      66: dup
      67: invokespecial #5                  // Method com/jme3/math/Vector3f."<init>":()V
      70: invokeinterface #63,  3           // InterfaceMethod com/jme3/export/InputCapsule.readSavable:(Ljava/lang/String;Lcom/jme3/export/Savable;)Lcom/jme3/export/Savable;
      75: checkcast     #4                  // class com/jme3/math/Vector3f
      78: putfield      #7                  // Field direction:Lcom/jme3/math/Vector3f;
      81: aload_0
      82: aload_2
      83: ldc           #69                 // String wheelAxle
      85: new           #4                  // class com/jme3/math/Vector3f
      88: dup
      89: invokespecial #5                  // Method com/jme3/math/Vector3f."<init>":()V
      92: invokeinterface #63,  3           // InterfaceMethod com/jme3/export/InputCapsule.readSavable:(Ljava/lang/String;Lcom/jme3/export/Savable;)Lcom/jme3/export/Savable;
      97: checkcast     #4                  // class com/jme3/math/Vector3f
     100: putfield      #8                  // Field axle:Lcom/jme3/math/Vector3f;
     103: aload_0
     104: aload_2
     105: ldc           #70                 // String suspensionStiffness
     107: ldc           #9                  // float 20.0f
     109: invokeinterface #71,  3           // InterfaceMethod com/jme3/export/InputCapsule.readFloat:(Ljava/lang/String;F)F
     114: putfield      #10                 // Field suspensionStiffness:F
     117: aload_0
     118: aload_2
     119: ldc           #72                 // String wheelsDampingRelaxation
     121: ldc           #11                 // float 2.3f
     123: invokeinterface #71,  3           // InterfaceMethod com/jme3/export/InputCapsule.readFloat:(Ljava/lang/String;F)F
     128: putfield      #12                 // Field wheelsDampingRelaxation:F
     131: aload_0
     132: aload_2
     133: ldc           #73                 // String wheelsDampingCompression
     135: ldc           #13                 // float 4.4f
     137: invokeinterface #71,  3           // InterfaceMethod com/jme3/export/InputCapsule.readFloat:(Ljava/lang/String;F)F
     142: putfield      #14                 // Field wheelsDampingCompression:F
     145: aload_0
     146: aload_2
     147: ldc           #74                 // String frictionSlip
     149: ldc           #15                 // float 10.5f
     151: invokeinterface #71,  3           // InterfaceMethod com/jme3/export/InputCapsule.readFloat:(Ljava/lang/String;F)F
     156: putfield      #16                 // Field frictionSlip:F
     159: aload_0
     160: aload_2
     161: ldc           #75                 // String rollInfluence
     163: fconst_1
     164: invokeinterface #71,  3           // InterfaceMethod com/jme3/export/InputCapsule.readFloat:(Ljava/lang/String;F)F
     169: putfield      #17                 // Field rollInfluence:F
     172: aload_0
     173: aload_2
     174: ldc           #76                 // String maxSuspensionTravelCm
     176: ldc           #18                 // float 500.0f
     178: invokeinterface #71,  3           // InterfaceMethod com/jme3/export/InputCapsule.readFloat:(Ljava/lang/String;F)F
     183: putfield      #19                 // Field maxSuspensionTravelCm:F
     186: aload_0
     187: aload_2
     188: ldc           #77                 // String maxSuspensionForce
     190: ldc           #20                 // float 6000.0f
     192: invokeinterface #71,  3           // InterfaceMethod com/jme3/export/InputCapsule.readFloat:(Ljava/lang/String;F)F
     197: putfield      #21                 // Field maxSuspensionForce:F
     200: aload_0
     201: aload_2
     202: ldc           #78                 // String wheelRadius
     204: ldc           #22                 // float 0.5f
     206: invokeinterface #71,  3           // InterfaceMethod com/jme3/export/InputCapsule.readFloat:(Ljava/lang/String;F)F
     211: putfield      #23                 // Field radius:F
     214: aload_0
     215: aload_2
     216: ldc           #79                 // String restLength
     218: fconst_1
     219: invokeinterface #71,  3           // InterfaceMethod com/jme3/export/InputCapsule.readFloat:(Ljava/lang/String;F)F
     224: putfield      #24                 // Field restLength:F
     227: return

  public void write(com.jme3.export.JmeExporter) throws java.io.IOException;
    Code:
       0: aload_1
       1: aload_0
       2: invokeinterface #80,  2           // InterfaceMethod com/jme3/export/JmeExporter.getCapsule:(Lcom/jme3/export/Savable;)Lcom/jme3/export/OutputCapsule;
       7: astore_2
       8: aload_2
       9: aload_0
      10: getfield      #35                 // Field wheelSpatial:Lcom/jme3/scene/Spatial;
      13: ldc           #62                 // String wheelSpatial
      15: aconst_null
      16: invokeinterface #81,  4           // InterfaceMethod com/jme3/export/OutputCapsule.write:(Lcom/jme3/export/Savable;Ljava/lang/String;Lcom/jme3/export/Savable;)V
      21: aload_2
      22: aload_0
      23: getfield      #37                 // Field frontWheel:Z
      26: ldc           #65                 // String frontWheel
      28: iconst_0
      29: invokeinterface #82,  4           // InterfaceMethod com/jme3/export/OutputCapsule.write:(ZLjava/lang/String;Z)V
      34: aload_2
      35: aload_0
      36: getfield      #6                  // Field location:Lcom/jme3/math/Vector3f;
      39: ldc           #67                 // String wheelLocation
      41: new           #4                  // class com/jme3/math/Vector3f
      44: dup
      45: invokespecial #5                  // Method com/jme3/math/Vector3f."<init>":()V
      48: invokeinterface #81,  4           // InterfaceMethod com/jme3/export/OutputCapsule.write:(Lcom/jme3/export/Savable;Ljava/lang/String;Lcom/jme3/export/Savable;)V
      53: aload_2
      54: aload_0
      55: getfield      #7                  // Field direction:Lcom/jme3/math/Vector3f;
      58: ldc           #68                 // String wheelDirection
      60: new           #4                  // class com/jme3/math/Vector3f
      63: dup
      64: invokespecial #5                  // Method com/jme3/math/Vector3f."<init>":()V
      67: invokeinterface #81,  4           // InterfaceMethod com/jme3/export/OutputCapsule.write:(Lcom/jme3/export/Savable;Ljava/lang/String;Lcom/jme3/export/Savable;)V
      72: aload_2
      73: aload_0
      74: getfield      #8                  // Field axle:Lcom/jme3/math/Vector3f;
      77: ldc           #69                 // String wheelAxle
      79: new           #4                  // class com/jme3/math/Vector3f
      82: dup
      83: invokespecial #5                  // Method com/jme3/math/Vector3f."<init>":()V
      86: invokeinterface #81,  4           // InterfaceMethod com/jme3/export/OutputCapsule.write:(Lcom/jme3/export/Savable;Ljava/lang/String;Lcom/jme3/export/Savable;)V
      91: aload_2
      92: aload_0
      93: getfield      #10                 // Field suspensionStiffness:F
      96: ldc           #70                 // String suspensionStiffness
      98: ldc           #9                  // float 20.0f
     100: invokeinterface #83,  4           // InterfaceMethod com/jme3/export/OutputCapsule.write:(FLjava/lang/String;F)V
     105: aload_2
     106: aload_0
     107: getfield      #12                 // Field wheelsDampingRelaxation:F
     110: ldc           #72                 // String wheelsDampingRelaxation
     112: ldc           #11                 // float 2.3f
     114: invokeinterface #83,  4           // InterfaceMethod com/jme3/export/OutputCapsule.write:(FLjava/lang/String;F)V
     119: aload_2
     120: aload_0
     121: getfield      #14                 // Field wheelsDampingCompression:F
     124: ldc           #73                 // String wheelsDampingCompression
     126: ldc           #13                 // float 4.4f
     128: invokeinterface #83,  4           // InterfaceMethod com/jme3/export/OutputCapsule.write:(FLjava/lang/String;F)V
     133: aload_2
     134: aload_0
     135: getfield      #16                 // Field frictionSlip:F
     138: ldc           #74                 // String frictionSlip
     140: ldc           #15                 // float 10.5f
     142: invokeinterface #83,  4           // InterfaceMethod com/jme3/export/OutputCapsule.write:(FLjava/lang/String;F)V
     147: aload_2
     148: aload_0
     149: getfield      #17                 // Field rollInfluence:F
     152: ldc           #75                 // String rollInfluence
     154: fconst_1
     155: invokeinterface #83,  4           // InterfaceMethod com/jme3/export/OutputCapsule.write:(FLjava/lang/String;F)V
     160: aload_2
     161: aload_0
     162: getfield      #19                 // Field maxSuspensionTravelCm:F
     165: ldc           #76                 // String maxSuspensionTravelCm
     167: ldc           #18                 // float 500.0f
     169: invokeinterface #83,  4           // InterfaceMethod com/jme3/export/OutputCapsule.write:(FLjava/lang/String;F)V
     174: aload_2
     175: aload_0
     176: getfield      #21                 // Field maxSuspensionForce:F
     179: ldc           #77                 // String maxSuspensionForce
     181: ldc           #20                 // float 6000.0f
     183: invokeinterface #83,  4           // InterfaceMethod com/jme3/export/OutputCapsule.write:(FLjava/lang/String;F)V
     188: aload_2
     189: aload_0
     190: getfield      #23                 // Field radius:F
     193: ldc           #78                 // String wheelRadius
     195: ldc           #22                 // float 0.5f
     197: invokeinterface #83,  4           // InterfaceMethod com/jme3/export/OutputCapsule.write:(FLjava/lang/String;F)V
     202: aload_2
     203: aload_0
     204: getfield      #24                 // Field restLength:F
     207: ldc           #79                 // String restLength
     209: fconst_1
     210: invokeinterface #83,  4           // InterfaceMethod com/jme3/export/OutputCapsule.write:(FLjava/lang/String;F)V
     215: return

  public com.jme3.scene.Spatial getWheelSpatial();
    Code:
       0: aload_0
       1: getfield      #35                 // Field wheelSpatial:Lcom/jme3/scene/Spatial;
       4: areturn

  public void setWheelSpatial(com.jme3.scene.Spatial);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #35                 // Field wheelSpatial:Lcom/jme3/scene/Spatial;
       5: return

  public boolean isApplyLocal();
    Code:
       0: aload_0
       1: getfield      #33                 // Field applyLocal:Z
       4: ireturn

  public void setApplyLocal(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #33                 // Field applyLocal:Z
       5: return

  public void getWheelWorldRotation(com.jme3.math.Quaternion);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #28                 // Field wheelWorldRotation:Lcom/jme3/math/Quaternion;
       5: invokevirtual #49                 // Method com/jme3/math/Quaternion.set:(Lcom/jme3/math/Quaternion;)Lcom/jme3/math/Quaternion;
       8: pop
       9: return

  public void getWheelWorldLocation(com.jme3.math.Vector3f);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #25                 // Field wheelWorldLocation:Lcom/jme3/math/Vector3f;
       5: invokevirtual #36                 // Method com/jme3/math/Vector3f.set:(Lcom/jme3/math/Vector3f;)Lcom/jme3/math/Vector3f;
       8: pop
       9: return
}
