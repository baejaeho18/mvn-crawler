Compiled from "RigidBodyControl.java"
public class com.jme3.bullet.control.RigidBodyControl extends com.jme3.bullet.objects.PhysicsRigidBody implements com.jme3.bullet.control.PhysicsControl {
  protected com.jme3.scene.Spatial spatial;

  protected boolean enabled;

  protected boolean added;

  protected com.jme3.bullet.PhysicsSpace space;

  protected boolean kinematicSpatial;

  public com.jme3.bullet.control.RigidBodyControl();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method com/jme3/bullet/objects/PhysicsRigidBody."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #2                  // Field enabled:Z
       9: aload_0
      10: iconst_0
      11: putfield      #3                  // Field added:Z
      14: aload_0
      15: aconst_null
      16: putfield      #4                  // Field space:Lcom/jme3/bullet/PhysicsSpace;
      19: aload_0
      20: iconst_1
      21: putfield      #5                  // Field kinematicSpatial:Z
      24: return

  public com.jme3.bullet.control.RigidBodyControl(float);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method com/jme3/bullet/objects/PhysicsRigidBody."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #2                  // Field enabled:Z
       9: aload_0
      10: iconst_0
      11: putfield      #3                  // Field added:Z
      14: aload_0
      15: aconst_null
      16: putfield      #4                  // Field space:Lcom/jme3/bullet/PhysicsSpace;
      19: aload_0
      20: iconst_1
      21: putfield      #5                  // Field kinematicSpatial:Z
      24: aload_0
      25: fload_1
      26: putfield      #6                  // Field mass:F
      29: return

  public com.jme3.bullet.control.RigidBodyControl(com.jme3.bullet.collision.shapes.CollisionShape);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #7                  // Method com/jme3/bullet/objects/PhysicsRigidBody."<init>":(Lcom/jme3/bullet/collision/shapes/CollisionShape;)V
       5: aload_0
       6: iconst_1
       7: putfield      #2                  // Field enabled:Z
      10: aload_0
      11: iconst_0
      12: putfield      #3                  // Field added:Z
      15: aload_0
      16: aconst_null
      17: putfield      #4                  // Field space:Lcom/jme3/bullet/PhysicsSpace;
      20: aload_0
      21: iconst_1
      22: putfield      #5                  // Field kinematicSpatial:Z
      25: return

  public com.jme3.bullet.control.RigidBodyControl(com.jme3.bullet.collision.shapes.CollisionShape, float);
    Code:
       0: aload_0
       1: aload_1
       2: fload_2
       3: invokespecial #8                  // Method com/jme3/bullet/objects/PhysicsRigidBody."<init>":(Lcom/jme3/bullet/collision/shapes/CollisionShape;F)V
       6: aload_0
       7: iconst_1
       8: putfield      #2                  // Field enabled:Z
      11: aload_0
      12: iconst_0
      13: putfield      #3                  // Field added:Z
      16: aload_0
      17: aconst_null
      18: putfield      #4                  // Field space:Lcom/jme3/bullet/PhysicsSpace;
      21: aload_0
      22: iconst_1
      23: putfield      #5                  // Field kinematicSpatial:Z
      26: return

  public com.jme3.scene.control.Control cloneForSpatial(com.jme3.scene.Spatial);
    Code:
       0: new           #9                  // class com/jme3/bullet/control/RigidBodyControl
       3: dup
       4: aload_0
       5: getfield      #10                 // Field collisionShape:Lcom/jme3/bullet/collision/shapes/CollisionShape;
       8: aload_0
       9: getfield      #6                  // Field mass:F
      12: invokespecial #11                 // Method "<init>":(Lcom/jme3/bullet/collision/shapes/CollisionShape;F)V
      15: astore_2
      16: aload_2
      17: aload_0
      18: invokevirtual #12                 // Method getAngularFactor:()F
      21: invokevirtual #13                 // Method setAngularFactor:(F)V
      24: aload_2
      25: aload_0
      26: invokevirtual #14                 // Method getAngularSleepingThreshold:()F
      29: invokevirtual #15                 // Method setAngularSleepingThreshold:(F)V
      32: aload_2
      33: aload_0
      34: invokevirtual #16                 // Method getCcdMotionThreshold:()F
      37: invokevirtual #17                 // Method setCcdMotionThreshold:(F)V
      40: aload_2
      41: aload_0
      42: invokevirtual #18                 // Method getCcdSweptSphereRadius:()F
      45: invokevirtual #19                 // Method setCcdSweptSphereRadius:(F)V
      48: aload_2
      49: aload_0
      50: invokevirtual #20                 // Method getCollideWithGroups:()I
      53: invokevirtual #21                 // Method setCollideWithGroups:(I)V
      56: aload_2
      57: aload_0
      58: invokevirtual #22                 // Method getCollisionGroup:()I
      61: invokevirtual #23                 // Method setCollisionGroup:(I)V
      64: aload_2
      65: aload_0
      66: invokevirtual #24                 // Method getLinearDamping:()F
      69: aload_0
      70: invokevirtual #25                 // Method getAngularDamping:()F
      73: invokevirtual #26                 // Method setDamping:(FF)V
      76: aload_2
      77: aload_0
      78: invokevirtual #27                 // Method getFriction:()F
      81: invokevirtual #28                 // Method setFriction:(F)V
      84: aload_2
      85: aload_0
      86: invokevirtual #29                 // Method getGravity:()Lcom/jme3/math/Vector3f;
      89: invokevirtual #30                 // Method setGravity:(Lcom/jme3/math/Vector3f;)V
      92: aload_2
      93: aload_0
      94: invokevirtual #31                 // Method isKinematic:()Z
      97: invokevirtual #32                 // Method setKinematic:(Z)V
     100: aload_2
     101: aload_0
     102: invokevirtual #33                 // Method isKinematicSpatial:()Z
     105: invokevirtual #34                 // Method setKinematicSpatial:(Z)V
     108: aload_2
     109: aload_0
     110: invokevirtual #35                 // Method getLinearSleepingThreshold:()F
     113: invokevirtual #36                 // Method setLinearSleepingThreshold:(F)V
     116: aload_2
     117: aload_0
     118: aconst_null
     119: invokevirtual #37                 // Method getPhysicsLocation:(Lcom/jme3/math/Vector3f;)Lcom/jme3/math/Vector3f;
     122: invokevirtual #38                 // Method setPhysicsLocation:(Lcom/jme3/math/Vector3f;)V
     125: aload_2
     126: aload_0
     127: aconst_null
     128: invokevirtual #39                 // Method getPhysicsRotationMatrix:(Lcom/jme3/math/Matrix3f;)Lcom/jme3/math/Matrix3f;
     131: invokevirtual #40                 // Method setPhysicsRotation:(Lcom/jme3/math/Matrix3f;)V
     134: aload_2
     135: aload_0
     136: invokevirtual #41                 // Method getRestitution:()F
     139: invokevirtual #42                 // Method setRestitution:(F)V
     142: aload_0
     143: getfield      #6                  // Field mass:F
     146: fconst_0
     147: fcmpl
     148: ifle          167
     151: aload_2
     152: aload_0
     153: invokevirtual #43                 // Method getAngularVelocity:()Lcom/jme3/math/Vector3f;
     156: invokevirtual #44                 // Method setAngularVelocity:(Lcom/jme3/math/Vector3f;)V
     159: aload_2
     160: aload_0
     161: invokevirtual #45                 // Method getLinearVelocity:()Lcom/jme3/math/Vector3f;
     164: invokevirtual #46                 // Method setLinearVelocity:(Lcom/jme3/math/Vector3f;)V
     167: aload_2
     168: aload_0
     169: invokevirtual #47                 // Method isApplyPhysicsLocal:()Z
     172: invokevirtual #48                 // Method setApplyPhysicsLocal:(Z)V
     175: aload_2
     176: areturn

  public void setSpatial(com.jme3.scene.Spatial);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #49                 // Field spatial:Lcom/jme3/scene/Spatial;
       5: aload_0
       6: aload_1
       7: invokevirtual #50                 // Method setUserObject:(Ljava/lang/Object;)V
      10: aload_1
      11: ifnonnull     15
      14: return
      15: aload_0
      16: getfield      #10                 // Field collisionShape:Lcom/jme3/bullet/collision/shapes/CollisionShape;
      19: ifnonnull     30
      22: aload_0
      23: invokevirtual #51                 // Method createCollisionShape:()V
      26: aload_0
      27: invokevirtual #52                 // Method rebuildRigidBody:()V
      30: aload_0
      31: aload_0
      32: invokespecial #53                 // Method getSpatialTranslation:()Lcom/jme3/math/Vector3f;
      35: invokevirtual #38                 // Method setPhysicsLocation:(Lcom/jme3/math/Vector3f;)V
      38: aload_0
      39: aload_0
      40: invokespecial #54                 // Method getSpatialRotation:()Lcom/jme3/math/Quaternion;
      43: invokevirtual #55                 // Method setPhysicsRotation:(Lcom/jme3/math/Quaternion;)V
      46: return

  protected void createCollisionShape();
    Code:
       0: aload_0
       1: getfield      #49                 // Field spatial:Lcom/jme3/scene/Spatial;
       4: ifnonnull     8
       7: return
       8: aload_0
       9: getfield      #49                 // Field spatial:Lcom/jme3/scene/Spatial;
      12: instanceof    #56                 // class com/jme3/scene/Geometry
      15: ifeq          104
      18: aload_0
      19: getfield      #49                 // Field spatial:Lcom/jme3/scene/Spatial;
      22: checkcast     #56                 // class com/jme3/scene/Geometry
      25: astore_1
      26: aload_1
      27: invokevirtual #57                 // Method com/jme3/scene/Geometry.getMesh:()Lcom/jme3/scene/Mesh;
      30: astore_2
      31: aload_2
      32: instanceof    #58                 // class com/jme3/scene/shape/Sphere
      35: ifeq          57
      38: aload_0
      39: new           #59                 // class com/jme3/bullet/collision/shapes/SphereCollisionShape
      42: dup
      43: aload_2
      44: checkcast     #58                 // class com/jme3/scene/shape/Sphere
      47: invokevirtual #60                 // Method com/jme3/scene/shape/Sphere.getRadius:()F
      50: invokespecial #61                 // Method com/jme3/bullet/collision/shapes/SphereCollisionShape."<init>":(F)V
      53: putfield      #10                 // Field collisionShape:Lcom/jme3/bullet/collision/shapes/CollisionShape;
      56: return
      57: aload_2
      58: instanceof    #62                 // class com/jme3/scene/shape/Box
      61: ifeq          104
      64: aload_0
      65: new           #63                 // class com/jme3/bullet/collision/shapes/BoxCollisionShape
      68: dup
      69: new           #64                 // class com/jme3/math/Vector3f
      72: dup
      73: aload_2
      74: checkcast     #62                 // class com/jme3/scene/shape/Box
      77: invokevirtual #65                 // Method com/jme3/scene/shape/Box.getXExtent:()F
      80: aload_2
      81: checkcast     #62                 // class com/jme3/scene/shape/Box
      84: invokevirtual #66                 // Method com/jme3/scene/shape/Box.getYExtent:()F
      87: aload_2
      88: checkcast     #62                 // class com/jme3/scene/shape/Box
      91: invokevirtual #67                 // Method com/jme3/scene/shape/Box.getZExtent:()F
      94: invokespecial #68                 // Method com/jme3/math/Vector3f."<init>":(FFF)V
      97: invokespecial #69                 // Method com/jme3/bullet/collision/shapes/BoxCollisionShape."<init>":(Lcom/jme3/math/Vector3f;)V
     100: putfield      #10                 // Field collisionShape:Lcom/jme3/bullet/collision/shapes/CollisionShape;
     103: return
     104: aload_0
     105: getfield      #6                  // Field mass:F
     108: fconst_0
     109: fcmpl
     110: ifle          127
     113: aload_0
     114: aload_0
     115: getfield      #49                 // Field spatial:Lcom/jme3/scene/Spatial;
     118: invokestatic  #70                 // Method com/jme3/bullet/util/CollisionShapeFactory.createDynamicMeshShape:(Lcom/jme3/scene/Spatial;)Lcom/jme3/bullet/collision/shapes/CollisionShape;
     121: putfield      #10                 // Field collisionShape:Lcom/jme3/bullet/collision/shapes/CollisionShape;
     124: goto          138
     127: aload_0
     128: aload_0
     129: getfield      #49                 // Field spatial:Lcom/jme3/scene/Spatial;
     132: invokestatic  #71                 // Method com/jme3/bullet/util/CollisionShapeFactory.createMeshShape:(Lcom/jme3/scene/Spatial;)Lcom/jme3/bullet/collision/shapes/CollisionShape;
     135: putfield      #10                 // Field collisionShape:Lcom/jme3/bullet/collision/shapes/CollisionShape;
     138: return

  public void setEnabled(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #2                  // Field enabled:Z
       5: aload_0
       6: getfield      #4                  // Field space:Lcom/jme3/bullet/PhysicsSpace;
       9: ifnull        86
      12: iload_1
      13: ifeq          62
      16: aload_0
      17: getfield      #3                  // Field added:Z
      20: ifne          62
      23: aload_0
      24: getfield      #49                 // Field spatial:Lcom/jme3/scene/Spatial;
      27: ifnull        46
      30: aload_0
      31: aload_0
      32: invokespecial #53                 // Method getSpatialTranslation:()Lcom/jme3/math/Vector3f;
      35: invokevirtual #38                 // Method setPhysicsLocation:(Lcom/jme3/math/Vector3f;)V
      38: aload_0
      39: aload_0
      40: invokespecial #54                 // Method getSpatialRotation:()Lcom/jme3/math/Quaternion;
      43: invokevirtual #55                 // Method setPhysicsRotation:(Lcom/jme3/math/Quaternion;)V
      46: aload_0
      47: getfield      #4                  // Field space:Lcom/jme3/bullet/PhysicsSpace;
      50: aload_0
      51: invokevirtual #72                 // Method com/jme3/bullet/PhysicsSpace.addCollisionObject:(Lcom/jme3/bullet/collision/PhysicsCollisionObject;)V
      54: aload_0
      55: iconst_1
      56: putfield      #3                  // Field added:Z
      59: goto          86
      62: iload_1
      63: ifne          86
      66: aload_0
      67: getfield      #3                  // Field added:Z
      70: ifeq          86
      73: aload_0
      74: getfield      #4                  // Field space:Lcom/jme3/bullet/PhysicsSpace;
      77: aload_0
      78: invokevirtual #73                 // Method com/jme3/bullet/PhysicsSpace.removeCollisionObject:(Lcom/jme3/bullet/collision/PhysicsCollisionObject;)V
      81: aload_0
      82: iconst_0
      83: putfield      #3                  // Field added:Z
      86: return

  public boolean isEnabled();
    Code:
       0: aload_0
       1: getfield      #2                  // Field enabled:Z
       4: ireturn

  public boolean isKinematicSpatial();
    Code:
       0: aload_0
       1: getfield      #5                  // Field kinematicSpatial:Z
       4: ireturn

  public void setKinematicSpatial(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #5                  // Field kinematicSpatial:Z
       5: return

  public boolean isApplyPhysicsLocal();
    Code:
       0: aload_0
       1: getfield      #74                 // Field motionState:Lcom/jme3/bullet/objects/infos/RigidBodyMotionState;
       4: invokevirtual #75                 // Method com/jme3/bullet/objects/infos/RigidBodyMotionState.isApplyPhysicsLocal:()Z
       7: ireturn

  public void setApplyPhysicsLocal(boolean);
    Code:
       0: aload_0
       1: getfield      #74                 // Field motionState:Lcom/jme3/bullet/objects/infos/RigidBodyMotionState;
       4: iload_1
       5: invokevirtual #76                 // Method com/jme3/bullet/objects/infos/RigidBodyMotionState.setApplyPhysicsLocal:(Z)V
       8: return

  private com.jme3.math.Vector3f getSpatialTranslation();
    Code:
       0: aload_0
       1: getfield      #74                 // Field motionState:Lcom/jme3/bullet/objects/infos/RigidBodyMotionState;
       4: invokevirtual #75                 // Method com/jme3/bullet/objects/infos/RigidBodyMotionState.isApplyPhysicsLocal:()Z
       7: ifeq          18
      10: aload_0
      11: getfield      #49                 // Field spatial:Lcom/jme3/scene/Spatial;
      14: invokevirtual #77                 // Method com/jme3/scene/Spatial.getLocalTranslation:()Lcom/jme3/math/Vector3f;
      17: areturn
      18: aload_0
      19: getfield      #49                 // Field spatial:Lcom/jme3/scene/Spatial;
      22: invokevirtual #78                 // Method com/jme3/scene/Spatial.getWorldTranslation:()Lcom/jme3/math/Vector3f;
      25: areturn

  private com.jme3.math.Quaternion getSpatialRotation();
    Code:
       0: aload_0
       1: getfield      #74                 // Field motionState:Lcom/jme3/bullet/objects/infos/RigidBodyMotionState;
       4: invokevirtual #75                 // Method com/jme3/bullet/objects/infos/RigidBodyMotionState.isApplyPhysicsLocal:()Z
       7: ifeq          18
      10: aload_0
      11: getfield      #49                 // Field spatial:Lcom/jme3/scene/Spatial;
      14: invokevirtual #79                 // Method com/jme3/scene/Spatial.getLocalRotation:()Lcom/jme3/math/Quaternion;
      17: areturn
      18: aload_0
      19: getfield      #49                 // Field spatial:Lcom/jme3/scene/Spatial;
      22: invokevirtual #80                 // Method com/jme3/scene/Spatial.getWorldRotation:()Lcom/jme3/math/Quaternion;
      25: areturn

  public void update(float);
    Code:
       0: aload_0
       1: getfield      #2                  // Field enabled:Z
       4: ifeq          59
       7: aload_0
       8: getfield      #49                 // Field spatial:Lcom/jme3/scene/Spatial;
      11: ifnull        59
      14: aload_0
      15: invokevirtual #31                 // Method isKinematic:()Z
      18: ifeq          47
      21: aload_0
      22: getfield      #5                  // Field kinematicSpatial:Z
      25: ifeq          47
      28: aload_0
      29: aload_0
      30: invokespecial #53                 // Method getSpatialTranslation:()Lcom/jme3/math/Vector3f;
      33: invokespecial #81                 // Method com/jme3/bullet/objects/PhysicsRigidBody.setPhysicsLocation:(Lcom/jme3/math/Vector3f;)V
      36: aload_0
      37: aload_0
      38: invokespecial #54                 // Method getSpatialRotation:()Lcom/jme3/math/Quaternion;
      41: invokespecial #82                 // Method com/jme3/bullet/objects/PhysicsRigidBody.setPhysicsRotation:(Lcom/jme3/math/Quaternion;)V
      44: goto          59
      47: aload_0
      48: invokevirtual #83                 // Method getMotionState:()Lcom/jme3/bullet/objects/infos/RigidBodyMotionState;
      51: aload_0
      52: getfield      #49                 // Field spatial:Lcom/jme3/scene/Spatial;
      55: invokevirtual #84                 // Method com/jme3/bullet/objects/infos/RigidBodyMotionState.applyTransform:(Lcom/jme3/scene/Spatial;)Z
      58: pop
      59: return

  public void render(com.jme3.renderer.RenderManager, com.jme3.renderer.ViewPort);
    Code:
       0: return

  public void setPhysicsSpace(com.jme3.bullet.PhysicsSpace);
    Code:
       0: aload_1
       1: ifnonnull     27
       4: aload_0
       5: getfield      #4                  // Field space:Lcom/jme3/bullet/PhysicsSpace;
       8: ifnull        46
      11: aload_0
      12: getfield      #4                  // Field space:Lcom/jme3/bullet/PhysicsSpace;
      15: aload_0
      16: invokevirtual #73                 // Method com/jme3/bullet/PhysicsSpace.removeCollisionObject:(Lcom/jme3/bullet/collision/PhysicsCollisionObject;)V
      19: aload_0
      20: iconst_0
      21: putfield      #3                  // Field added:Z
      24: goto          46
      27: aload_0
      28: getfield      #4                  // Field space:Lcom/jme3/bullet/PhysicsSpace;
      31: aload_1
      32: if_acmpne     36
      35: return
      36: aload_1
      37: aload_0
      38: invokevirtual #72                 // Method com/jme3/bullet/PhysicsSpace.addCollisionObject:(Lcom/jme3/bullet/collision/PhysicsCollisionObject;)V
      41: aload_0
      42: iconst_1
      43: putfield      #3                  // Field added:Z
      46: aload_0
      47: aload_1
      48: putfield      #4                  // Field space:Lcom/jme3/bullet/PhysicsSpace;
      51: return

  public com.jme3.bullet.PhysicsSpace getPhysicsSpace();
    Code:
       0: aload_0
       1: getfield      #4                  // Field space:Lcom/jme3/bullet/PhysicsSpace;
       4: areturn

  public void write(com.jme3.export.JmeExporter) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #85                 // Method com/jme3/bullet/objects/PhysicsRigidBody.write:(Lcom/jme3/export/JmeExporter;)V
       5: aload_1
       6: aload_0
       7: invokeinterface #86,  2           // InterfaceMethod com/jme3/export/JmeExporter.getCapsule:(Lcom/jme3/export/Savable;)Lcom/jme3/export/OutputCapsule;
      12: astore_2
      13: aload_2
      14: aload_0
      15: getfield      #2                  // Field enabled:Z
      18: ldc           #87                 // String enabled
      20: iconst_1
      21: invokeinterface #88,  4           // InterfaceMethod com/jme3/export/OutputCapsule.write:(ZLjava/lang/String;Z)V
      26: aload_2
      27: aload_0
      28: getfield      #74                 // Field motionState:Lcom/jme3/bullet/objects/infos/RigidBodyMotionState;
      31: invokevirtual #75                 // Method com/jme3/bullet/objects/infos/RigidBodyMotionState.isApplyPhysicsLocal:()Z
      34: ldc           #89                 // String applyLocalPhysics
      36: iconst_0
      37: invokeinterface #88,  4           // InterfaceMethod com/jme3/export/OutputCapsule.write:(ZLjava/lang/String;Z)V
      42: aload_2
      43: aload_0
      44: getfield      #5                  // Field kinematicSpatial:Z
      47: ldc           #90                 // String kinematicSpatial
      49: iconst_1
      50: invokeinterface #88,  4           // InterfaceMethod com/jme3/export/OutputCapsule.write:(ZLjava/lang/String;Z)V
      55: aload_2
      56: aload_0
      57: getfield      #49                 // Field spatial:Lcom/jme3/scene/Spatial;
      60: ldc           #91                 // String spatial
      62: aconst_null
      63: invokeinterface #92,  4           // InterfaceMethod com/jme3/export/OutputCapsule.write:(Lcom/jme3/export/Savable;Ljava/lang/String;Lcom/jme3/export/Savable;)V
      68: return

  public void read(com.jme3.export.JmeImporter) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #93                 // Method com/jme3/bullet/objects/PhysicsRigidBody.read:(Lcom/jme3/export/JmeImporter;)V
       5: aload_1
       6: aload_0
       7: invokeinterface #94,  2           // InterfaceMethod com/jme3/export/JmeImporter.getCapsule:(Lcom/jme3/export/Savable;)Lcom/jme3/export/InputCapsule;
      12: astore_2
      13: aload_0
      14: aload_2
      15: ldc           #87                 // String enabled
      17: iconst_1
      18: invokeinterface #95,  3           // InterfaceMethod com/jme3/export/InputCapsule.readBoolean:(Ljava/lang/String;Z)Z
      23: putfield      #2                  // Field enabled:Z
      26: aload_0
      27: aload_2
      28: ldc           #90                 // String kinematicSpatial
      30: iconst_1
      31: invokeinterface #95,  3           // InterfaceMethod com/jme3/export/InputCapsule.readBoolean:(Ljava/lang/String;Z)Z
      36: putfield      #5                  // Field kinematicSpatial:Z
      39: aload_0
      40: aload_2
      41: ldc           #91                 // String spatial
      43: aconst_null
      44: invokeinterface #96,  3           // InterfaceMethod com/jme3/export/InputCapsule.readSavable:(Ljava/lang/String;Lcom/jme3/export/Savable;)Lcom/jme3/export/Savable;
      49: checkcast     #97                 // class com/jme3/scene/Spatial
      52: putfield      #49                 // Field spatial:Lcom/jme3/scene/Spatial;
      55: aload_0
      56: getfield      #74                 // Field motionState:Lcom/jme3/bullet/objects/infos/RigidBodyMotionState;
      59: aload_2
      60: ldc           #89                 // String applyLocalPhysics
      62: iconst_0
      63: invokeinterface #95,  3           // InterfaceMethod com/jme3/export/InputCapsule.readBoolean:(Ljava/lang/String;Z)Z
      68: invokevirtual #76                 // Method com/jme3/bullet/objects/infos/RigidBodyMotionState.setApplyPhysicsLocal:(Z)V
      71: aload_0
      72: aload_0
      73: getfield      #49                 // Field spatial:Lcom/jme3/scene/Spatial;
      76: invokevirtual #50                 // Method setUserObject:(Ljava/lang/Object;)V
      79: return
}
