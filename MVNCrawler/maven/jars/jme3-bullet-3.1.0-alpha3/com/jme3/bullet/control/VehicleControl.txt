Compiled from "VehicleControl.java"
public class com.jme3.bullet.control.VehicleControl extends com.jme3.bullet.objects.PhysicsVehicle implements com.jme3.bullet.control.PhysicsControl {
  protected com.jme3.scene.Spatial spatial;

  protected boolean enabled;

  protected com.jme3.bullet.PhysicsSpace space;

  protected boolean added;

  public com.jme3.bullet.control.VehicleControl();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method com/jme3/bullet/objects/PhysicsVehicle."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #2                  // Field enabled:Z
       9: aload_0
      10: aconst_null
      11: putfield      #3                  // Field space:Lcom/jme3/bullet/PhysicsSpace;
      14: aload_0
      15: iconst_0
      16: putfield      #4                  // Field added:Z
      19: return

  public com.jme3.bullet.control.VehicleControl(com.jme3.bullet.collision.shapes.CollisionShape);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #5                  // Method com/jme3/bullet/objects/PhysicsVehicle."<init>":(Lcom/jme3/bullet/collision/shapes/CollisionShape;)V
       5: aload_0
       6: iconst_1
       7: putfield      #2                  // Field enabled:Z
      10: aload_0
      11: aconst_null
      12: putfield      #3                  // Field space:Lcom/jme3/bullet/PhysicsSpace;
      15: aload_0
      16: iconst_0
      17: putfield      #4                  // Field added:Z
      20: return

  public com.jme3.bullet.control.VehicleControl(com.jme3.bullet.collision.shapes.CollisionShape, float);
    Code:
       0: aload_0
       1: aload_1
       2: fload_2
       3: invokespecial #6                  // Method com/jme3/bullet/objects/PhysicsVehicle."<init>":(Lcom/jme3/bullet/collision/shapes/CollisionShape;F)V
       6: aload_0
       7: iconst_1
       8: putfield      #2                  // Field enabled:Z
      11: aload_0
      12: aconst_null
      13: putfield      #3                  // Field space:Lcom/jme3/bullet/PhysicsSpace;
      16: aload_0
      17: iconst_0
      18: putfield      #4                  // Field added:Z
      21: return

  public boolean isApplyPhysicsLocal();
    Code:
       0: aload_0
       1: getfield      #7                  // Field motionState:Lcom/jme3/bullet/objects/infos/RigidBodyMotionState;
       4: invokevirtual #8                  // Method com/jme3/bullet/objects/infos/RigidBodyMotionState.isApplyPhysicsLocal:()Z
       7: ireturn

  public void setApplyPhysicsLocal(boolean);
    Code:
       0: aload_0
       1: getfield      #7                  // Field motionState:Lcom/jme3/bullet/objects/infos/RigidBodyMotionState;
       4: iload_1
       5: invokevirtual #9                  // Method com/jme3/bullet/objects/infos/RigidBodyMotionState.setApplyPhysicsLocal:(Z)V
       8: aload_0
       9: getfield      #10                 // Field wheels:Ljava/util/ArrayList;
      12: invokevirtual #11                 // Method java/util/ArrayList.iterator:()Ljava/util/Iterator;
      15: astore_2
      16: aload_2
      17: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      22: ifeq          43
      25: aload_2
      26: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      31: checkcast     #14                 // class com/jme3/bullet/objects/VehicleWheel
      34: astore_3
      35: aload_3
      36: iload_1
      37: invokevirtual #15                 // Method com/jme3/bullet/objects/VehicleWheel.setApplyLocal:(Z)V
      40: goto          16
      43: return

  private com.jme3.math.Vector3f getSpatialTranslation();
    Code:
       0: aload_0
       1: getfield      #7                  // Field motionState:Lcom/jme3/bullet/objects/infos/RigidBodyMotionState;
       4: invokevirtual #8                  // Method com/jme3/bullet/objects/infos/RigidBodyMotionState.isApplyPhysicsLocal:()Z
       7: ifeq          18
      10: aload_0
      11: getfield      #16                 // Field spatial:Lcom/jme3/scene/Spatial;
      14: invokevirtual #17                 // Method com/jme3/scene/Spatial.getLocalTranslation:()Lcom/jme3/math/Vector3f;
      17: areturn
      18: aload_0
      19: getfield      #16                 // Field spatial:Lcom/jme3/scene/Spatial;
      22: invokevirtual #18                 // Method com/jme3/scene/Spatial.getWorldTranslation:()Lcom/jme3/math/Vector3f;
      25: areturn

  private com.jme3.math.Quaternion getSpatialRotation();
    Code:
       0: aload_0
       1: getfield      #7                  // Field motionState:Lcom/jme3/bullet/objects/infos/RigidBodyMotionState;
       4: invokevirtual #8                  // Method com/jme3/bullet/objects/infos/RigidBodyMotionState.isApplyPhysicsLocal:()Z
       7: ifeq          18
      10: aload_0
      11: getfield      #16                 // Field spatial:Lcom/jme3/scene/Spatial;
      14: invokevirtual #19                 // Method com/jme3/scene/Spatial.getLocalRotation:()Lcom/jme3/math/Quaternion;
      17: areturn
      18: aload_0
      19: getfield      #16                 // Field spatial:Lcom/jme3/scene/Spatial;
      22: invokevirtual #20                 // Method com/jme3/scene/Spatial.getWorldRotation:()Lcom/jme3/math/Quaternion;
      25: areturn

  public com.jme3.scene.control.Control cloneForSpatial(com.jme3.scene.Spatial);
    Code:
       0: new           #21                 // class com/jme3/bullet/control/VehicleControl
       3: dup
       4: aload_0
       5: getfield      #22                 // Field collisionShape:Lcom/jme3/bullet/collision/shapes/CollisionShape;
       8: aload_0
       9: getfield      #23                 // Field mass:F
      12: invokespecial #24                 // Method "<init>":(Lcom/jme3/bullet/collision/shapes/CollisionShape;F)V
      15: astore_2
      16: aload_2
      17: aload_0
      18: invokevirtual #25                 // Method getAngularFactor:()F
      21: invokevirtual #26                 // Method setAngularFactor:(F)V
      24: aload_2
      25: aload_0
      26: invokevirtual #27                 // Method getAngularSleepingThreshold:()F
      29: invokevirtual #28                 // Method setAngularSleepingThreshold:(F)V
      32: aload_2
      33: aload_0
      34: invokevirtual #29                 // Method getAngularVelocity:()Lcom/jme3/math/Vector3f;
      37: invokevirtual #30                 // Method setAngularVelocity:(Lcom/jme3/math/Vector3f;)V
      40: aload_2
      41: aload_0
      42: invokevirtual #31                 // Method getCcdMotionThreshold:()F
      45: invokevirtual #32                 // Method setCcdMotionThreshold:(F)V
      48: aload_2
      49: aload_0
      50: invokevirtual #33                 // Method getCcdSweptSphereRadius:()F
      53: invokevirtual #34                 // Method setCcdSweptSphereRadius:(F)V
      56: aload_2
      57: aload_0
      58: invokevirtual #35                 // Method getCollideWithGroups:()I
      61: invokevirtual #36                 // Method setCollideWithGroups:(I)V
      64: aload_2
      65: aload_0
      66: invokevirtual #37                 // Method getCollisionGroup:()I
      69: invokevirtual #38                 // Method setCollisionGroup:(I)V
      72: aload_2
      73: aload_0
      74: invokevirtual #39                 // Method getLinearDamping:()F
      77: aload_0
      78: invokevirtual #40                 // Method getAngularDamping:()F
      81: invokevirtual #41                 // Method setDamping:(FF)V
      84: aload_2
      85: aload_0
      86: invokevirtual #42                 // Method getFriction:()F
      89: invokevirtual #43                 // Method setFriction:(F)V
      92: aload_2
      93: aload_0
      94: invokevirtual #44                 // Method getGravity:()Lcom/jme3/math/Vector3f;
      97: invokevirtual #45                 // Method setGravity:(Lcom/jme3/math/Vector3f;)V
     100: aload_2
     101: aload_0
     102: invokevirtual #46                 // Method isKinematic:()Z
     105: invokevirtual #47                 // Method setKinematic:(Z)V
     108: aload_2
     109: aload_0
     110: invokevirtual #48                 // Method getLinearSleepingThreshold:()F
     113: invokevirtual #49                 // Method setLinearSleepingThreshold:(F)V
     116: aload_2
     117: aload_0
     118: invokevirtual #50                 // Method getLinearVelocity:()Lcom/jme3/math/Vector3f;
     121: invokevirtual #51                 // Method setLinearVelocity:(Lcom/jme3/math/Vector3f;)V
     124: aload_2
     125: aload_0
     126: invokevirtual #52                 // Method getPhysicsLocation:()Lcom/jme3/math/Vector3f;
     129: invokevirtual #53                 // Method setPhysicsLocation:(Lcom/jme3/math/Vector3f;)V
     132: aload_2
     133: aload_0
     134: invokevirtual #54                 // Method getPhysicsRotationMatrix:()Lcom/jme3/math/Matrix3f;
     137: invokevirtual #55                 // Method setPhysicsRotation:(Lcom/jme3/math/Matrix3f;)V
     140: aload_2
     141: aload_0
     142: invokevirtual #56                 // Method getRestitution:()F
     145: invokevirtual #57                 // Method setRestitution:(F)V
     148: aload_2
     149: aload_0
     150: invokevirtual #58                 // Method getFrictionSlip:()F
     153: invokevirtual #59                 // Method setFrictionSlip:(F)V
     156: aload_2
     157: aload_0
     158: invokevirtual #60                 // Method getMaxSuspensionTravelCm:()F
     161: invokevirtual #61                 // Method setMaxSuspensionTravelCm:(F)V
     164: aload_2
     165: aload_0
     166: invokevirtual #62                 // Method getSuspensionStiffness:()F
     169: invokevirtual #63                 // Method setSuspensionStiffness:(F)V
     172: aload_2
     173: aload_0
     174: getfield      #64                 // Field tuning:Lcom/jme3/bullet/objects/infos/VehicleTuning;
     177: getfield      #65                 // Field com/jme3/bullet/objects/infos/VehicleTuning.suspensionCompression:F
     180: invokevirtual #66                 // Method setSuspensionCompression:(F)V
     183: aload_2
     184: aload_0
     185: getfield      #64                 // Field tuning:Lcom/jme3/bullet/objects/infos/VehicleTuning;
     188: getfield      #67                 // Field com/jme3/bullet/objects/infos/VehicleTuning.suspensionDamping:F
     191: invokevirtual #68                 // Method setSuspensionDamping:(F)V
     194: aload_2
     195: aload_0
     196: invokevirtual #69                 // Method getMaxSuspensionForce:()F
     199: invokevirtual #70                 // Method setMaxSuspensionForce:(F)V
     202: aload_0
     203: getfield      #10                 // Field wheels:Ljava/util/ArrayList;
     206: invokevirtual #11                 // Method java/util/ArrayList.iterator:()Ljava/util/Iterator;
     209: astore_3
     210: aload_3
     211: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     216: ifeq          369
     219: aload_3
     220: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     225: checkcast     #14                 // class com/jme3/bullet/objects/VehicleWheel
     228: astore        4
     230: aload_2
     231: aload         4
     233: invokevirtual #71                 // Method com/jme3/bullet/objects/VehicleWheel.getLocation:()Lcom/jme3/math/Vector3f;
     236: aload         4
     238: invokevirtual #72                 // Method com/jme3/bullet/objects/VehicleWheel.getDirection:()Lcom/jme3/math/Vector3f;
     241: aload         4
     243: invokevirtual #73                 // Method com/jme3/bullet/objects/VehicleWheel.getAxle:()Lcom/jme3/math/Vector3f;
     246: aload         4
     248: invokevirtual #74                 // Method com/jme3/bullet/objects/VehicleWheel.getRestLength:()F
     251: aload         4
     253: invokevirtual #75                 // Method com/jme3/bullet/objects/VehicleWheel.getRadius:()F
     256: aload         4
     258: invokevirtual #76                 // Method com/jme3/bullet/objects/VehicleWheel.isFrontWheel:()Z
     261: invokevirtual #77                 // Method addWheel:(Lcom/jme3/math/Vector3f;Lcom/jme3/math/Vector3f;Lcom/jme3/math/Vector3f;FFZ)Lcom/jme3/bullet/objects/VehicleWheel;
     264: astore        5
     266: aload         5
     268: aload         4
     270: invokevirtual #78                 // Method com/jme3/bullet/objects/VehicleWheel.getFrictionSlip:()F
     273: invokevirtual #79                 // Method com/jme3/bullet/objects/VehicleWheel.setFrictionSlip:(F)V
     276: aload         5
     278: aload         4
     280: invokevirtual #80                 // Method com/jme3/bullet/objects/VehicleWheel.getMaxSuspensionTravelCm:()F
     283: invokevirtual #81                 // Method com/jme3/bullet/objects/VehicleWheel.setMaxSuspensionTravelCm:(F)V
     286: aload         5
     288: aload         4
     290: invokevirtual #82                 // Method com/jme3/bullet/objects/VehicleWheel.getSuspensionStiffness:()F
     293: invokevirtual #83                 // Method com/jme3/bullet/objects/VehicleWheel.setSuspensionStiffness:(F)V
     296: aload         5
     298: aload         4
     300: invokevirtual #84                 // Method com/jme3/bullet/objects/VehicleWheel.getWheelsDampingCompression:()F
     303: invokevirtual #85                 // Method com/jme3/bullet/objects/VehicleWheel.setWheelsDampingCompression:(F)V
     306: aload         5
     308: aload         4
     310: invokevirtual #86                 // Method com/jme3/bullet/objects/VehicleWheel.getWheelsDampingRelaxation:()F
     313: invokevirtual #87                 // Method com/jme3/bullet/objects/VehicleWheel.setWheelsDampingRelaxation:(F)V
     316: aload         5
     318: aload         4
     320: invokevirtual #88                 // Method com/jme3/bullet/objects/VehicleWheel.getMaxSuspensionForce:()F
     323: invokevirtual #89                 // Method com/jme3/bullet/objects/VehicleWheel.setMaxSuspensionForce:(F)V
     326: aload_1
     327: instanceof    #90                 // class com/jme3/scene/Node
     330: ifeq          366
     333: aload_1
     334: checkcast     #90                 // class com/jme3/scene/Node
     337: astore        6
     339: aload         6
     341: aload         4
     343: invokevirtual #91                 // Method com/jme3/bullet/objects/VehicleWheel.getWheelSpatial:()Lcom/jme3/scene/Spatial;
     346: invokevirtual #92                 // Method com/jme3/scene/Spatial.getName:()Ljava/lang/String;
     349: invokevirtual #93                 // Method com/jme3/scene/Node.getChild:(Ljava/lang/String;)Lcom/jme3/scene/Spatial;
     352: astore        7
     354: aload         7
     356: ifnull        366
     359: aload         5
     361: aload         7
     363: invokevirtual #94                 // Method com/jme3/bullet/objects/VehicleWheel.setWheelSpatial:(Lcom/jme3/scene/Spatial;)V
     366: goto          210
     369: aload_2
     370: aload_0
     371: invokevirtual #95                 // Method isApplyPhysicsLocal:()Z
     374: invokevirtual #96                 // Method setApplyPhysicsLocal:(Z)V
     377: aload_2
     378: areturn

  public void setSpatial(com.jme3.scene.Spatial);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #16                 // Field spatial:Lcom/jme3/scene/Spatial;
       5: aload_0
       6: aload_1
       7: invokevirtual #97                 // Method setUserObject:(Ljava/lang/Object;)V
      10: aload_1
      11: ifnonnull     15
      14: return
      15: aload_0
      16: aload_0
      17: invokespecial #98                 // Method getSpatialTranslation:()Lcom/jme3/math/Vector3f;
      20: invokevirtual #53                 // Method setPhysicsLocation:(Lcom/jme3/math/Vector3f;)V
      23: aload_0
      24: aload_0
      25: invokespecial #99                 // Method getSpatialRotation:()Lcom/jme3/math/Quaternion;
      28: invokevirtual #100                // Method setPhysicsRotation:(Lcom/jme3/math/Quaternion;)V
      31: return

  public void setEnabled(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #2                  // Field enabled:Z
       5: aload_0
       6: getfield      #3                  // Field space:Lcom/jme3/bullet/PhysicsSpace;
       9: ifnull        86
      12: iload_1
      13: ifeq          62
      16: aload_0
      17: getfield      #4                  // Field added:Z
      20: ifne          62
      23: aload_0
      24: getfield      #16                 // Field spatial:Lcom/jme3/scene/Spatial;
      27: ifnull        46
      30: aload_0
      31: aload_0
      32: invokespecial #98                 // Method getSpatialTranslation:()Lcom/jme3/math/Vector3f;
      35: invokevirtual #53                 // Method setPhysicsLocation:(Lcom/jme3/math/Vector3f;)V
      38: aload_0
      39: aload_0
      40: invokespecial #99                 // Method getSpatialRotation:()Lcom/jme3/math/Quaternion;
      43: invokevirtual #100                // Method setPhysicsRotation:(Lcom/jme3/math/Quaternion;)V
      46: aload_0
      47: getfield      #3                  // Field space:Lcom/jme3/bullet/PhysicsSpace;
      50: aload_0
      51: invokevirtual #101                // Method com/jme3/bullet/PhysicsSpace.addCollisionObject:(Lcom/jme3/bullet/collision/PhysicsCollisionObject;)V
      54: aload_0
      55: iconst_1
      56: putfield      #4                  // Field added:Z
      59: goto          86
      62: iload_1
      63: ifne          86
      66: aload_0
      67: getfield      #4                  // Field added:Z
      70: ifeq          86
      73: aload_0
      74: getfield      #3                  // Field space:Lcom/jme3/bullet/PhysicsSpace;
      77: aload_0
      78: invokevirtual #102                // Method com/jme3/bullet/PhysicsSpace.removeCollisionObject:(Lcom/jme3/bullet/collision/PhysicsCollisionObject;)V
      81: aload_0
      82: iconst_0
      83: putfield      #4                  // Field added:Z
      86: return

  public boolean isEnabled();
    Code:
       0: aload_0
       1: getfield      #2                  // Field enabled:Z
       4: ireturn

  public void update(float);
    Code:
       0: aload_0
       1: getfield      #2                  // Field enabled:Z
       4: ifeq          43
       7: aload_0
       8: getfield      #16                 // Field spatial:Lcom/jme3/scene/Spatial;
      11: ifnull        43
      14: aload_0
      15: invokevirtual #103                // Method getMotionState:()Lcom/jme3/bullet/objects/infos/RigidBodyMotionState;
      18: aload_0
      19: getfield      #16                 // Field spatial:Lcom/jme3/scene/Spatial;
      22: invokevirtual #104                // Method com/jme3/bullet/objects/infos/RigidBodyMotionState.applyTransform:(Lcom/jme3/scene/Spatial;)Z
      25: ifeq          54
      28: aload_0
      29: getfield      #16                 // Field spatial:Lcom/jme3/scene/Spatial;
      32: invokevirtual #105                // Method com/jme3/scene/Spatial.getWorldTransform:()Lcom/jme3/math/Transform;
      35: pop
      36: aload_0
      37: invokevirtual #106                // Method applyWheelTransforms:()V
      40: goto          54
      43: aload_0
      44: getfield      #2                  // Field enabled:Z
      47: ifeq          54
      50: aload_0
      51: invokevirtual #106                // Method applyWheelTransforms:()V
      54: return

  public void render(com.jme3.renderer.RenderManager, com.jme3.renderer.ViewPort);
    Code:
       0: return

  public void setPhysicsSpace(com.jme3.bullet.PhysicsSpace);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #107                // Method createVehicle:(Lcom/jme3/bullet/PhysicsSpace;)V
       5: aload_1
       6: ifnonnull     32
       9: aload_0
      10: getfield      #3                  // Field space:Lcom/jme3/bullet/PhysicsSpace;
      13: ifnull        51
      16: aload_0
      17: getfield      #3                  // Field space:Lcom/jme3/bullet/PhysicsSpace;
      20: aload_0
      21: invokevirtual #102                // Method com/jme3/bullet/PhysicsSpace.removeCollisionObject:(Lcom/jme3/bullet/collision/PhysicsCollisionObject;)V
      24: aload_0
      25: iconst_0
      26: putfield      #4                  // Field added:Z
      29: goto          51
      32: aload_0
      33: getfield      #3                  // Field space:Lcom/jme3/bullet/PhysicsSpace;
      36: aload_1
      37: if_acmpne     41
      40: return
      41: aload_1
      42: aload_0
      43: invokevirtual #101                // Method com/jme3/bullet/PhysicsSpace.addCollisionObject:(Lcom/jme3/bullet/collision/PhysicsCollisionObject;)V
      46: aload_0
      47: iconst_1
      48: putfield      #4                  // Field added:Z
      51: aload_0
      52: aload_1
      53: putfield      #3                  // Field space:Lcom/jme3/bullet/PhysicsSpace;
      56: return

  public com.jme3.bullet.PhysicsSpace getPhysicsSpace();
    Code:
       0: aload_0
       1: getfield      #3                  // Field space:Lcom/jme3/bullet/PhysicsSpace;
       4: areturn

  public void write(com.jme3.export.JmeExporter) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #108                // Method com/jme3/bullet/objects/PhysicsVehicle.write:(Lcom/jme3/export/JmeExporter;)V
       5: aload_1
       6: aload_0
       7: invokeinterface #109,  2          // InterfaceMethod com/jme3/export/JmeExporter.getCapsule:(Lcom/jme3/export/Savable;)Lcom/jme3/export/OutputCapsule;
      12: astore_2
      13: aload_2
      14: aload_0
      15: getfield      #2                  // Field enabled:Z
      18: ldc           #110                // String enabled
      20: iconst_1
      21: invokeinterface #111,  4          // InterfaceMethod com/jme3/export/OutputCapsule.write:(ZLjava/lang/String;Z)V
      26: aload_2
      27: aload_0
      28: getfield      #7                  // Field motionState:Lcom/jme3/bullet/objects/infos/RigidBodyMotionState;
      31: invokevirtual #8                  // Method com/jme3/bullet/objects/infos/RigidBodyMotionState.isApplyPhysicsLocal:()Z
      34: ldc           #112                // String applyLocalPhysics
      36: iconst_0
      37: invokeinterface #111,  4          // InterfaceMethod com/jme3/export/OutputCapsule.write:(ZLjava/lang/String;Z)V
      42: aload_2
      43: aload_0
      44: getfield      #16                 // Field spatial:Lcom/jme3/scene/Spatial;
      47: ldc           #113                // String spatial
      49: aconst_null
      50: invokeinterface #114,  4          // InterfaceMethod com/jme3/export/OutputCapsule.write:(Lcom/jme3/export/Savable;Ljava/lang/String;Lcom/jme3/export/Savable;)V
      55: return

  public void read(com.jme3.export.JmeImporter) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #115                // Method com/jme3/bullet/objects/PhysicsVehicle.read:(Lcom/jme3/export/JmeImporter;)V
       5: aload_1
       6: aload_0
       7: invokeinterface #116,  2          // InterfaceMethod com/jme3/export/JmeImporter.getCapsule:(Lcom/jme3/export/Savable;)Lcom/jme3/export/InputCapsule;
      12: astore_2
      13: aload_0
      14: aload_2
      15: ldc           #110                // String enabled
      17: iconst_1
      18: invokeinterface #117,  3          // InterfaceMethod com/jme3/export/InputCapsule.readBoolean:(Ljava/lang/String;Z)Z
      23: putfield      #2                  // Field enabled:Z
      26: aload_0
      27: aload_2
      28: ldc           #113                // String spatial
      30: aconst_null
      31: invokeinterface #118,  3          // InterfaceMethod com/jme3/export/InputCapsule.readSavable:(Ljava/lang/String;Lcom/jme3/export/Savable;)Lcom/jme3/export/Savable;
      36: checkcast     #119                // class com/jme3/scene/Spatial
      39: putfield      #16                 // Field spatial:Lcom/jme3/scene/Spatial;
      42: aload_0
      43: getfield      #7                  // Field motionState:Lcom/jme3/bullet/objects/infos/RigidBodyMotionState;
      46: aload_2
      47: ldc           #112                // String applyLocalPhysics
      49: iconst_0
      50: invokeinterface #117,  3          // InterfaceMethod com/jme3/export/InputCapsule.readBoolean:(Ljava/lang/String;Z)Z
      55: invokevirtual #9                  // Method com/jme3/bullet/objects/infos/RigidBodyMotionState.setApplyPhysicsLocal:(Z)V
      58: aload_0
      59: aload_0
      60: getfield      #16                 // Field spatial:Lcom/jme3/scene/Spatial;
      63: invokevirtual #97                 // Method setUserObject:(Ljava/lang/Object;)V
      66: return
}
