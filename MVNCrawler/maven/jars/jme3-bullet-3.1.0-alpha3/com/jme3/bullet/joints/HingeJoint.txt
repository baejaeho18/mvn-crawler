Compiled from "HingeJoint.java"
public class com.jme3.bullet.joints.HingeJoint extends com.jme3.bullet.joints.PhysicsJoint {
  protected com.jme3.math.Vector3f axisA;

  protected com.jme3.math.Vector3f axisB;

  protected boolean angularOnly;

  protected float biasFactor;

  protected float relaxationFactor;

  protected float limitSoftness;

  public com.jme3.bullet.joints.HingeJoint();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method com/jme3/bullet/joints/PhysicsJoint."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field angularOnly:Z
       9: aload_0
      10: ldc           #3                  // float 0.3f
      12: putfield      #4                  // Field biasFactor:F
      15: aload_0
      16: fconst_1
      17: putfield      #5                  // Field relaxationFactor:F
      20: aload_0
      21: ldc           #6                  // float 0.9f
      23: putfield      #7                  // Field limitSoftness:F
      26: return

  public com.jme3.bullet.joints.HingeJoint(com.jme3.bullet.objects.PhysicsRigidBody, com.jme3.bullet.objects.PhysicsRigidBody, com.jme3.math.Vector3f, com.jme3.math.Vector3f, com.jme3.math.Vector3f, com.jme3.math.Vector3f);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokespecial #8                  // Method com/jme3/bullet/joints/PhysicsJoint."<init>":(Lcom/jme3/bullet/objects/PhysicsRigidBody;Lcom/jme3/bullet/objects/PhysicsRigidBody;Lcom/jme3/math/Vector3f;Lcom/jme3/math/Vector3f;)V
       9: aload_0
      10: iconst_0
      11: putfield      #2                  // Field angularOnly:Z
      14: aload_0
      15: ldc           #3                  // float 0.3f
      17: putfield      #4                  // Field biasFactor:F
      20: aload_0
      21: fconst_1
      22: putfield      #5                  // Field relaxationFactor:F
      25: aload_0
      26: ldc           #6                  // float 0.9f
      28: putfield      #7                  // Field limitSoftness:F
      31: aload_0
      32: aload         5
      34: putfield      #9                  // Field axisA:Lcom/jme3/math/Vector3f;
      37: aload_0
      38: aload         6
      40: putfield      #10                 // Field axisB:Lcom/jme3/math/Vector3f;
      43: aload_0
      44: invokevirtual #11                 // Method createJoint:()V
      47: return

  public void enableMotor(boolean, float, float);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field objectId:J
       5: iload_1
       6: fload_2
       7: fload_3
       8: invokespecial #13                 // Method enableMotor:(JZFF)V
      11: return

  private native void enableMotor(long, boolean, float, float);

  public boolean getEnableMotor();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field objectId:J
       5: invokespecial #14                 // Method getEnableAngularMotor:(J)Z
       8: ireturn

  private native boolean getEnableAngularMotor(long);

  public float getMotorTargetVelocity();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field objectId:J
       5: invokespecial #15                 // Method getMotorTargetVelocity:(J)F
       8: freturn

  private native float getMotorTargetVelocity(long);

  public float getMaxMotorImpulse();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field objectId:J
       5: invokespecial #16                 // Method getMaxMotorImpulse:(J)F
       8: freturn

  private native float getMaxMotorImpulse(long);

  public void setLimit(float, float);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field objectId:J
       5: fload_1
       6: fload_2
       7: invokespecial #17                 // Method setLimit:(JFF)V
      10: return

  private native void setLimit(long, float, float);

  public void setLimit(float, float, float, float, float);
    Code:
       0: aload_0
       1: fload         4
       3: putfield      #4                  // Field biasFactor:F
       6: aload_0
       7: fload         5
       9: putfield      #5                  // Field relaxationFactor:F
      12: aload_0
      13: fload_3
      14: putfield      #7                  // Field limitSoftness:F
      17: aload_0
      18: aload_0
      19: getfield      #12                 // Field objectId:J
      22: fload_1
      23: fload_2
      24: fload_3
      25: fload         4
      27: fload         5
      29: invokespecial #18                 // Method setLimit:(JFFFFF)V
      32: return

  private native void setLimit(long, float, float, float, float, float);

  public float getUpperLimit();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field objectId:J
       5: invokespecial #19                 // Method getUpperLimit:(J)F
       8: freturn

  private native float getUpperLimit(long);

  public float getLowerLimit();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field objectId:J
       5: invokespecial #20                 // Method getLowerLimit:(J)F
       8: freturn

  private native float getLowerLimit(long);

  public void setAngularOnly(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #2                  // Field angularOnly:Z
       5: aload_0
       6: aload_0
       7: getfield      #12                 // Field objectId:J
      10: iload_1
      11: invokespecial #21                 // Method setAngularOnly:(JZ)V
      14: return

  private native void setAngularOnly(long, boolean);

  public float getHingeAngle();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field objectId:J
       5: invokespecial #22                 // Method getHingeAngle:(J)F
       8: freturn

  private native float getHingeAngle(long);

  public void write(com.jme3.export.JmeExporter) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #23                 // Method com/jme3/bullet/joints/PhysicsJoint.write:(Lcom/jme3/export/JmeExporter;)V
       5: aload_1
       6: aload_0
       7: invokeinterface #24,  2           // InterfaceMethod com/jme3/export/JmeExporter.getCapsule:(Lcom/jme3/export/Savable;)Lcom/jme3/export/OutputCapsule;
      12: astore_2
      13: aload_2
      14: aload_0
      15: getfield      #9                  // Field axisA:Lcom/jme3/math/Vector3f;
      18: ldc           #25                 // String axisA
      20: new           #26                 // class com/jme3/math/Vector3f
      23: dup
      24: invokespecial #27                 // Method com/jme3/math/Vector3f."<init>":()V
      27: invokeinterface #28,  4           // InterfaceMethod com/jme3/export/OutputCapsule.write:(Lcom/jme3/export/Savable;Ljava/lang/String;Lcom/jme3/export/Savable;)V
      32: aload_2
      33: aload_0
      34: getfield      #10                 // Field axisB:Lcom/jme3/math/Vector3f;
      37: ldc           #29                 // String axisB
      39: new           #26                 // class com/jme3/math/Vector3f
      42: dup
      43: invokespecial #27                 // Method com/jme3/math/Vector3f."<init>":()V
      46: invokeinterface #28,  4           // InterfaceMethod com/jme3/export/OutputCapsule.write:(Lcom/jme3/export/Savable;Ljava/lang/String;Lcom/jme3/export/Savable;)V
      51: aload_2
      52: aload_0
      53: getfield      #2                  // Field angularOnly:Z
      56: ldc           #30                 // String angularOnly
      58: iconst_0
      59: invokeinterface #31,  4           // InterfaceMethod com/jme3/export/OutputCapsule.write:(ZLjava/lang/String;Z)V
      64: aload_2
      65: aload_0
      66: invokevirtual #32                 // Method getLowerLimit:()F
      69: ldc           #33                 // String lowerLimit
      71: ldc           #34                 // float 1.0E30f
      73: invokeinterface #35,  4           // InterfaceMethod com/jme3/export/OutputCapsule.write:(FLjava/lang/String;F)V
      78: aload_2
      79: aload_0
      80: invokevirtual #36                 // Method getUpperLimit:()F
      83: ldc           #37                 // String upperLimit
      85: ldc           #38                 // float -1.0E30f
      87: invokeinterface #35,  4           // InterfaceMethod com/jme3/export/OutputCapsule.write:(FLjava/lang/String;F)V
      92: aload_2
      93: aload_0
      94: getfield      #4                  // Field biasFactor:F
      97: ldc           #39                 // String biasFactor
      99: ldc           #3                  // float 0.3f
     101: invokeinterface #35,  4           // InterfaceMethod com/jme3/export/OutputCapsule.write:(FLjava/lang/String;F)V
     106: aload_2
     107: aload_0
     108: getfield      #5                  // Field relaxationFactor:F
     111: ldc           #40                 // String relaxationFactor
     113: fconst_1
     114: invokeinterface #35,  4           // InterfaceMethod com/jme3/export/OutputCapsule.write:(FLjava/lang/String;F)V
     119: aload_2
     120: aload_0
     121: getfield      #7                  // Field limitSoftness:F
     124: ldc           #41                 // String limitSoftness
     126: ldc           #6                  // float 0.9f
     128: invokeinterface #35,  4           // InterfaceMethod com/jme3/export/OutputCapsule.write:(FLjava/lang/String;F)V
     133: aload_2
     134: aload_0
     135: invokevirtual #42                 // Method getEnableMotor:()Z
     138: ldc           #43                 // String enableAngularMotor
     140: iconst_0
     141: invokeinterface #31,  4           // InterfaceMethod com/jme3/export/OutputCapsule.write:(ZLjava/lang/String;Z)V
     146: aload_2
     147: aload_0
     148: invokevirtual #44                 // Method getMotorTargetVelocity:()F
     151: ldc           #45                 // String targetVelocity
     153: fconst_0
     154: invokeinterface #35,  4           // InterfaceMethod com/jme3/export/OutputCapsule.write:(FLjava/lang/String;F)V
     159: aload_2
     160: aload_0
     161: invokevirtual #46                 // Method getMaxMotorImpulse:()F
     164: ldc           #47                 // String maxMotorImpulse
     166: fconst_0
     167: invokeinterface #35,  4           // InterfaceMethod com/jme3/export/OutputCapsule.write:(FLjava/lang/String;F)V
     172: return

  public void read(com.jme3.export.JmeImporter) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #48                 // Method com/jme3/bullet/joints/PhysicsJoint.read:(Lcom/jme3/export/JmeImporter;)V
       5: aload_1
       6: aload_0
       7: invokeinterface #49,  2           // InterfaceMethod com/jme3/export/JmeImporter.getCapsule:(Lcom/jme3/export/Savable;)Lcom/jme3/export/InputCapsule;
      12: astore_2
      13: aload_0
      14: aload_2
      15: ldc           #25                 // String axisA
      17: new           #26                 // class com/jme3/math/Vector3f
      20: dup
      21: invokespecial #27                 // Method com/jme3/math/Vector3f."<init>":()V
      24: invokeinterface #50,  3           // InterfaceMethod com/jme3/export/InputCapsule.readSavable:(Ljava/lang/String;Lcom/jme3/export/Savable;)Lcom/jme3/export/Savable;
      29: checkcast     #26                 // class com/jme3/math/Vector3f
      32: putfield      #9                  // Field axisA:Lcom/jme3/math/Vector3f;
      35: aload_0
      36: aload_2
      37: ldc           #29                 // String axisB
      39: new           #26                 // class com/jme3/math/Vector3f
      42: dup
      43: invokespecial #27                 // Method com/jme3/math/Vector3f."<init>":()V
      46: invokeinterface #50,  3           // InterfaceMethod com/jme3/export/InputCapsule.readSavable:(Ljava/lang/String;Lcom/jme3/export/Savable;)Lcom/jme3/export/Savable;
      51: checkcast     #26                 // class com/jme3/math/Vector3f
      54: putfield      #10                 // Field axisB:Lcom/jme3/math/Vector3f;
      57: aload_0
      58: aload_2
      59: ldc           #30                 // String angularOnly
      61: iconst_0
      62: invokeinterface #51,  3           // InterfaceMethod com/jme3/export/InputCapsule.readBoolean:(Ljava/lang/String;Z)Z
      67: putfield      #2                  // Field angularOnly:Z
      70: aload_2
      71: ldc           #33                 // String lowerLimit
      73: ldc           #34                 // float 1.0E30f
      75: invokeinterface #52,  3           // InterfaceMethod com/jme3/export/InputCapsule.readFloat:(Ljava/lang/String;F)F
      80: fstore_3
      81: aload_2
      82: ldc           #37                 // String upperLimit
      84: ldc           #38                 // float -1.0E30f
      86: invokeinterface #52,  3           // InterfaceMethod com/jme3/export/InputCapsule.readFloat:(Ljava/lang/String;F)F
      91: fstore        4
      93: aload_0
      94: aload_2
      95: ldc           #39                 // String biasFactor
      97: ldc           #3                  // float 0.3f
      99: invokeinterface #52,  3           // InterfaceMethod com/jme3/export/InputCapsule.readFloat:(Ljava/lang/String;F)F
     104: putfield      #4                  // Field biasFactor:F
     107: aload_0
     108: aload_2
     109: ldc           #40                 // String relaxationFactor
     111: fconst_1
     112: invokeinterface #52,  3           // InterfaceMethod com/jme3/export/InputCapsule.readFloat:(Ljava/lang/String;F)F
     117: putfield      #5                  // Field relaxationFactor:F
     120: aload_0
     121: aload_2
     122: ldc           #41                 // String limitSoftness
     124: ldc           #6                  // float 0.9f
     126: invokeinterface #52,  3           // InterfaceMethod com/jme3/export/InputCapsule.readFloat:(Ljava/lang/String;F)F
     131: putfield      #7                  // Field limitSoftness:F
     134: aload_2
     135: ldc           #43                 // String enableAngularMotor
     137: iconst_0
     138: invokeinterface #51,  3           // InterfaceMethod com/jme3/export/InputCapsule.readBoolean:(Ljava/lang/String;Z)Z
     143: istore        5
     145: aload_2
     146: ldc           #45                 // String targetVelocity
     148: fconst_0
     149: invokeinterface #52,  3           // InterfaceMethod com/jme3/export/InputCapsule.readFloat:(Ljava/lang/String;F)F
     154: fstore        6
     156: aload_2
     157: ldc           #47                 // String maxMotorImpulse
     159: fconst_0
     160: invokeinterface #52,  3           // InterfaceMethod com/jme3/export/InputCapsule.readFloat:(Ljava/lang/String;F)F
     165: fstore        7
     167: aload_0
     168: invokevirtual #11                 // Method createJoint:()V
     171: aload_0
     172: iload         5
     174: fload         6
     176: fload         7
     178: invokevirtual #53                 // Method enableMotor:(ZFF)V
     181: aload_0
     182: fload_3
     183: fload         4
     185: aload_0
     186: getfield      #7                  // Field limitSoftness:F
     189: aload_0
     190: getfield      #4                  // Field biasFactor:F
     193: aload_0
     194: getfield      #5                  // Field relaxationFactor:F
     197: invokevirtual #54                 // Method setLimit:(FFFFF)V
     200: return

  protected void createJoint();
    Code:
       0: aload_0
       1: aload_0
       2: aload_0
       3: getfield      #55                 // Field nodeA:Lcom/jme3/bullet/objects/PhysicsRigidBody;
       6: invokevirtual #56                 // Method com/jme3/bullet/objects/PhysicsRigidBody.getObjectId:()J
       9: aload_0
      10: getfield      #57                 // Field nodeB:Lcom/jme3/bullet/objects/PhysicsRigidBody;
      13: invokevirtual #56                 // Method com/jme3/bullet/objects/PhysicsRigidBody.getObjectId:()J
      16: aload_0
      17: getfield      #58                 // Field pivotA:Lcom/jme3/math/Vector3f;
      20: aload_0
      21: getfield      #9                  // Field axisA:Lcom/jme3/math/Vector3f;
      24: aload_0
      25: getfield      #59                 // Field pivotB:Lcom/jme3/math/Vector3f;
      28: aload_0
      29: getfield      #10                 // Field axisB:Lcom/jme3/math/Vector3f;
      32: invokespecial #60                 // Method createJoint:(JJLcom/jme3/math/Vector3f;Lcom/jme3/math/Vector3f;Lcom/jme3/math/Vector3f;Lcom/jme3/math/Vector3f;)J
      35: putfield      #12                 // Field objectId:J
      38: aload_0
      39: invokevirtual #61                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      42: invokevirtual #62                 // Method java/lang/Class.getName:()Ljava/lang/String;
      45: invokestatic  #63                 // Method java/util/logging/Logger.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;
      48: getstatic     #64                 // Field java/util/logging/Level.FINE:Ljava/util/logging/Level;
      51: ldc           #65                 // String Created Joint {0}
      53: aload_0
      54: getfield      #12                 // Field objectId:J
      57: invokestatic  #66                 // Method java/lang/Long.toHexString:(J)Ljava/lang/String;
      60: invokevirtual #67                 // Method java/util/logging/Logger.log:(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/Object;)V
      63: return

  private native long createJoint(long, long, com.jme3.math.Vector3f, com.jme3.math.Vector3f, com.jme3.math.Vector3f, com.jme3.math.Vector3f);
}
