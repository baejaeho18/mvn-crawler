Compiled from "Pathss.java"
public class de.pfabulist.kleinod.paths.Pathss {
  public static final java.lang.String DEFAULT_FILESYSTEM_SCHEME;

  private de.pfabulist.kleinod.paths.Pathss();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public static java.nio.file.Path getTmpDir(java.lang.String);
    Code:
       0: invokestatic  #2                  // Method java/nio/file/FileSystems.getDefault:()Ljava/nio/file/FileSystem;
       3: ldc           #3                  // String java.io.tmpdir
       5: invokestatic  #4                  // Method java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;
       8: iconst_1
       9: anewarray     #5                  // class java/lang/String
      12: dup
      13: iconst_0
      14: new           #6                  // class java/lang/StringBuilder
      17: dup
      18: invokespecial #7                  // Method java/lang/StringBuilder."<init>":()V
      21: aload_0
      22: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      25: ldc           #9                  // String -
      27: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      30: invokestatic  #10                 // Method java/time/Clock.systemUTC:()Ljava/time/Clock;
      33: invokevirtual #11                 // Method java/time/Clock.instant:()Ljava/time/Instant;
      36: invokestatic  #12                 // Method fsFriendlyName:(Ljava/time/Instant;)Ljava/lang/String;
      39: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      42: invokevirtual #13                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      45: aastore
      46: invokevirtual #14                 // Method java/nio/file/FileSystem.getPath:(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;
      49: areturn

  public static java.lang.String fsFriendlyName(java.time.Instant);
    Code:
       0: aload_0
       1: invokestatic  #15                 // Method getDateTimeString:(Ljava/time/Instant;)Ljava/lang/String;
       4: areturn

  public static java.lang.String getDateTimeString(java.time.Instant);
    Code:
       0: ldc           #16                 // String yyyy-MM-dd--HH-mm-ss--SSS
       2: invokestatic  #17                 // Method java/time/format/DateTimeFormatter.ofPattern:(Ljava/lang/String;)Ljava/time/format/DateTimeFormatter;
       5: invokestatic  #18                 // Method java/time/ZoneId.systemDefault:()Ljava/time/ZoneId;
       8: invokevirtual #19                 // Method java/time/format/DateTimeFormatter.withZone:(Ljava/time/ZoneId;)Ljava/time/format/DateTimeFormatter;
      11: astore_1
      12: aload_1
      13: aload_0
      14: invokevirtual #20                 // Method java/time/format/DateTimeFormatter.format:(Ljava/time/temporal/TemporalAccessor;)Ljava/lang/String;
      17: areturn

  public static java.nio.file.FileSystem getOrCreate(java.net.URI, java.util.Map<java.lang.String, ?>);
    Code:
       0: aload_0
       1: invokevirtual #21                 // Method java/net/URI.getScheme:()Ljava/lang/String;
       4: ldc           #23                 // String file
       6: invokevirtual #24                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
       9: ifeq          16
      12: invokestatic  #2                  // Method java/nio/file/FileSystems.getDefault:()Ljava/nio/file/FileSystem;
      15: areturn
      16: aload_0
      17: invokestatic  #25                 // Method java/nio/file/FileSystems.getFileSystem:(Ljava/net/URI;)Ljava/nio/file/FileSystem;
      20: areturn
      21: astore_2
      22: aload_0
      23: aload_1
      24: invokestatic  #27                 // Method java/nio/file/FileSystems.newFileSystem:(Ljava/net/URI;Ljava/util/Map;)Ljava/nio/file/FileSystem;
      27: areturn
      28: astore_3
      29: aload_3
      30: invokestatic  #29                 // Method de/pfabulist/unchecked/Unchecked.u:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
      33: athrow
    Exception table:
       from    to  target type
          16    20    21   Class java/nio/file/FileSystemNotFoundException
          22    27    28   Class java/io/IOException

  public static java.nio.file.Path get(java.net.URI, java.util.Map<java.lang.String, ?>);
    Code:
       0: aload_0
       1: invokestatic  #30                 // Method java/nio/file/Paths.get:(Ljava/net/URI;)Ljava/nio/file/Path;
       4: areturn
       5: astore_2
       6: aload_0
       7: aload_1
       8: invokestatic  #31                 // Method getOrCreate:(Ljava/net/URI;Ljava/util/Map;)Ljava/nio/file/FileSystem;
      11: pop
      12: aload_0
      13: invokestatic  #30                 // Method java/nio/file/Paths.get:(Ljava/net/URI;)Ljava/nio/file/Path;
      16: areturn
    Exception table:
       from    to  target type
           0     4     5   Class java/nio/file/FileSystemNotFoundException

  public static java.nio.file.Path getPath(java.lang.String, java.util.Map<java.lang.String, ?>);
    Code:
       0: aload_0
       1: invokestatic  #32                 // Method java/net/URI.create:(Ljava/lang/String;)Ljava/net/URI;
       4: astore_2
       5: aload_2
       6: invokevirtual #21                 // Method java/net/URI.getScheme:()Ljava/lang/String;
       9: ifnonnull     39
      12: new           #33                 // class java/lang/IllegalArgumentException
      15: dup
      16: new           #6                  // class java/lang/StringBuilder
      19: dup
      20: invokespecial #7                  // Method java/lang/StringBuilder."<init>":()V
      23: ldc           #34                 // String not a uri with scheme
      25: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      28: aload_2
      29: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      32: invokevirtual #13                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      35: invokespecial #36                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      38: athrow
      39: aload_2
      40: aload_1
      41: invokestatic  #37                 // Method get:(Ljava/net/URI;Ljava/util/Map;)Ljava/nio/file/Path;
      44: areturn

  public static void deleteRecursive(java.nio.file.Path);
    Code:
       0: aload_0
       1: iconst_0
       2: anewarray     #38                 // class java/nio/file/LinkOption
       5: invokestatic  #39                 // Method java/nio/file/Files.exists:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z
       8: ifne          12
      11: return
      12: aload_0
      13: iconst_0
      14: anewarray     #38                 // class java/nio/file/LinkOption
      17: invokestatic  #40                 // Method java/nio/file/Files.isDirectory:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z
      20: ifne          28
      23: aload_0
      24: invokestatic  #41                 // Method de/pfabulist/unchecked/Filess.delete:(Ljava/nio/file/Path;)V
      27: return
      28: new           #42                 // class java/util/ArrayList
      31: dup
      32: invokespecial #43                 // Method java/util/ArrayList."<init>":()V
      35: astore_1
      36: aload_0
      37: new           #44                 // class de/pfabulist/kleinod/paths/Pathss$1
      40: dup
      41: aload_1
      42: invokespecial #45                 // Method de/pfabulist/kleinod/paths/Pathss$1."<init>":(Ljava/util/List;)V
      45: invokestatic  #46                 // Method java/nio/file/Files.walkFileTree:(Ljava/nio/file/Path;Ljava/nio/file/FileVisitor;)Ljava/nio/file/Path;
      48: pop
      49: goto          58
      52: astore_2
      53: aload_2
      54: invokestatic  #29                 // Method de/pfabulist/unchecked/Unchecked.u:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
      57: athrow
      58: aload_1
      59: invokedynamic #47,  0             // InvokeDynamic #0:accept:()Ljava/util/function/Consumer;
      64: invokeinterface #48,  2           // InterfaceMethod java/util/List.forEach:(Ljava/util/function/Consumer;)V
      69: return
    Exception table:
       from    to  target type
          36    49    52   Class java/io/IOException

  public static void copyRecursive(java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption...);
    Code:
       0: aload_0
       1: iconst_0
       2: anewarray     #38                 // class java/nio/file/LinkOption
       5: invokestatic  #39                 // Method java/nio/file/Files.exists:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z
       8: ifne          12
      11: return
      12: aload_0
      13: iconst_0
      14: anewarray     #38                 // class java/nio/file/LinkOption
      17: invokestatic  #40                 // Method java/nio/file/Files.isDirectory:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z
      20: ifne          33
      23: aload_0
      24: aload_1
      25: iconst_0
      26: anewarray     #49                 // class java/nio/file/CopyOption
      29: invokestatic  #50                 // Method de/pfabulist/unchecked/Filess.copy:(Ljava/nio/file/Path;Ljava/nio/file/Path;[Ljava/nio/file/CopyOption;)V
      32: return
      33: aload_0
      34: new           #51                 // class de/pfabulist/kleinod/paths/Pathss$2
      37: dup
      38: aload_1
      39: aload_0
      40: invokespecial #52                 // Method de/pfabulist/kleinod/paths/Pathss$2."<init>":(Ljava/nio/file/Path;Ljava/nio/file/Path;)V
      43: invokestatic  #46                 // Method java/nio/file/Files.walkFileTree:(Ljava/nio/file/Path;Ljava/nio/file/FileVisitor;)Ljava/nio/file/Path;
      46: pop
      47: goto          56
      50: astore_3
      51: aload_3
      52: invokestatic  #29                 // Method de/pfabulist/unchecked/Unchecked.u:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
      55: athrow
      56: return
    Exception table:
       from    to  target type
          33    47    50   Class java/io/IOException

  public static boolean isEmpty(java.nio.file.Path);
    Code:
       0: aload_0
       1: invokestatic  #53                 // Method java/nio/file/Files.newDirectoryStream:(Ljava/nio/file/Path;)Ljava/nio/file/DirectoryStream;
       4: astore_1
       5: aconst_null
       6: astore_2
       7: aload_1
       8: invokeinterface #54,  1           // InterfaceMethod java/nio/file/DirectoryStream.iterator:()Ljava/util/Iterator;
      13: invokeinterface #55,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      18: ifne          25
      21: iconst_1
      22: goto          26
      25: iconst_0
      26: istore_3
      27: aload_1
      28: ifnull        61
      31: aload_2
      32: ifnull        55
      35: aload_1
      36: invokeinterface #56,  1           // InterfaceMethod java/nio/file/DirectoryStream.close:()V
      41: goto          61
      44: astore        4
      46: aload_2
      47: aload         4
      49: invokevirtual #58                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
      52: goto          61
      55: aload_1
      56: invokeinterface #56,  1           // InterfaceMethod java/nio/file/DirectoryStream.close:()V
      61: iload_3
      62: ireturn
      63: astore_3
      64: aload_3
      65: astore_2
      66: aload_3
      67: athrow
      68: astore        5
      70: aload_1
      71: ifnull        104
      74: aload_2
      75: ifnull        98
      78: aload_1
      79: invokeinterface #56,  1           // InterfaceMethod java/nio/file/DirectoryStream.close:()V
      84: goto          104
      87: astore        6
      89: aload_2
      90: aload         6
      92: invokevirtual #58                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
      95: goto          104
      98: aload_1
      99: invokeinterface #56,  1           // InterfaceMethod java/nio/file/DirectoryStream.close:()V
     104: aload         5
     106: athrow
     107: astore_1
     108: aload_1
     109: invokestatic  #29                 // Method de/pfabulist/unchecked/Unchecked.u:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
     112: athrow
    Exception table:
       from    to  target type
          35    41    44   Class java/lang/Throwable
           7    27    63   Class java/lang/Throwable
           7    27    68   any
          78    84    87   Class java/lang/Throwable
          63    70    68   any
           0    61   107   Class java/io/IOException
          63   107   107   Class java/io/IOException

  public static boolean isRoot(java.nio.file.Path);
    Code:
       0: aload_0
       1: invokeinterface #59,  1           // InterfaceMethod java/nio/file/Path.isAbsolute:()Z
       6: ifeq          22
       9: aload_0
      10: invokeinterface #60,  1           // InterfaceMethod java/nio/file/Path.getParent:()Ljava/nio/file/Path;
      15: ifnonnull     22
      18: iconst_1
      19: goto          23
      22: iconst_0
      23: ireturn
}
