Compiled from "OpenTracing.scala"
public final class zio.telemetry.opentracing.OpenTracing$$anon$11 implements zio.telemetry.opentracing.OpenTracing {
  private volatile zio.telemetry.opentracing.OpenTracing$aspects$ aspects$module;

  private final zio.FiberRef currentSpan$1;

  private final zio.ZIO currentMicros$1;

  private final io.opentracing.Tracer tracer$1;

  public zio.telemetry.opentracing.OpenTracing$aspects$ aspects();
    Code:
       0: aload_0
       1: getfield      #52                 // Field aspects$module:Lzio/telemetry/opentracing/OpenTracing$aspects$;
       4: ifnonnull     11
       7: aload_0
       8: invokespecial #56                 // Method aspects$lzycompute$1:()V
      11: aload_0
      12: getfield      #52                 // Field aspects$module:Lzio/telemetry/opentracing/OpenTracing$aspects$;
      15: areturn

  public zio.ZIO<java.lang.Object, scala.runtime.Nothing$, io.opentracing.Span> getCurrentSpan(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #64                 // Field currentSpan$1:Lzio/FiberRef;
       4: aload_1
       5: invokeinterface #69,  2           // InterfaceMethod zio/FiberRef.get:(Ljava/lang/Object;)Lzio/ZIO;
      10: areturn

  public zio.ZIO<java.lang.Object, scala.runtime.Nothing$, io.opentracing.SpanContext> getCurrentSpanContext(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #74                 // Method getCurrentSpan:(Ljava/lang/Object;)Lzio/ZIO;
       5: invokedynamic #97,  0             // InvokeDynamic #0:apply:()Lscala/Function1;
      10: aload_1
      11: invokeinterface #103,  3          // InterfaceMethod zio/ZIO.map:(Lscala/Function1;Ljava/lang/Object;)Lzio/ZIO;
      16: areturn

  public zio.ZIO<java.lang.Object, scala.runtime.Nothing$, scala.runtime.BoxedUnit> error(io.opentracing.Span, zio.Cause<?>, boolean, boolean, java.lang.Object);
    Code:
       0: getstatic     #116                // Field zio/ZIO$.MODULE$:Lzio/ZIO$;
       3: aload_1
       4: invokedynamic #128,  0            // InvokeDynamic #1:apply:(Lio/opentracing/Span;)Lscala/Function0;
       9: aload         5
      11: invokevirtual #132                // Method zio/ZIO$.succeed:(Lscala/Function0;Ljava/lang/Object;)Lzio/ZIO;
      14: iload_3
      15: invokedynamic #144,  0            // InvokeDynamic #2:apply$mcZ$sp:(Z)Lscala/runtime/java8/JFunction0$mcZ$sp;
      20: aload         5
      22: invokeinterface #147,  3          // InterfaceMethod zio/ZIO.when:(Lscala/Function0;Ljava/lang/Object;)Lzio/ZIO;
      27: aload_1
      28: aload_2
      29: aload         5
      31: iload         4
      33: invokedynamic #157,  0            // InvokeDynamic #3:apply:(Lio/opentracing/Span;Lzio/Cause;Ljava/lang/Object;Z)Lscala/Function1;
      38: aload         5
      40: invokeinterface #160,  3          // InterfaceMethod zio/ZIO.flatMap:(Lscala/Function1;Ljava/lang/Object;)Lzio/ZIO;
      45: areturn

  public boolean error$default$3();
    Code:
       0: iconst_1
       1: ireturn

  public boolean error$default$4();
    Code:
       0: iconst_1
       1: ireturn

  public zio.ZIO<java.lang.Object, scala.runtime.Nothing$, scala.runtime.BoxedUnit> finish(io.opentracing.Span, java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #170                // Field currentMicros$1:Lzio/ZIO;
       4: aload_1
       5: aload_2
       6: invokedynamic #179,  0            // InvokeDynamic #4:apply:(Lio/opentracing/Span;Ljava/lang/Object;)Lscala/Function1;
      11: aload_2
      12: invokeinterface #160,  3          // InterfaceMethod zio/ZIO.flatMap:(Lscala/Function1;Ljava/lang/Object;)Lzio/ZIO;
      17: areturn

  public <R, E, A> zio.ZIO<R, E, A> log(scala.collection.immutable.Map<java.lang.String, ?>, scala.Function0<zio.ZIO<R, E, A>>, java.lang.Object);
    Code:
       0: aload_2
       1: invokeinterface #188,  1          // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
       6: checkcast     #99                 // class zio/ZIO
       9: aload_0
      10: aload_3
      11: aload_1
      12: invokedynamic #198,  0            // InvokeDynamic #5:apply:(Lzio/telemetry/opentracing/OpenTracing$$anon$11;Ljava/lang/Object;Lscala/collection/immutable/Map;)Lscala/Function0;
      17: aload_3
      18: invokeinterface #201,  3          // InterfaceMethod zio/ZIO.$less$times:(Lscala/Function0;Ljava/lang/Object;)Lzio/ZIO;
      23: areturn

  public <R, E, A> zio.ZIO<R, E, A> log(java.lang.String, scala.Function0<zio.ZIO<R, E, A>>, java.lang.Object);
    Code:
       0: aload_2
       1: invokeinterface #188,  1          // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
       6: checkcast     #99                 // class zio/ZIO
       9: aload_0
      10: aload_3
      11: aload_1
      12: invokedynamic #214,  0            // InvokeDynamic #6:apply:(Lzio/telemetry/opentracing/OpenTracing$$anon$11;Ljava/lang/Object;Ljava/lang/String;)Lscala/Function0;
      17: aload_3
      18: invokeinterface #201,  3          // InterfaceMethod zio/ZIO.$less$times:(Lscala/Function0;Ljava/lang/Object;)Lzio/ZIO;
      23: areturn

  public <R, E, A> zio.ZIO<R, E, A> root(java.lang.String, boolean, boolean, scala.Function0<zio.ZIO<R, E, A>>, java.lang.Object);
    Code:
       0: getstatic     #116                // Field zio/ZIO$.MODULE$:Lzio/ZIO$;
       3: aload_0
       4: aload_1
       5: invokedynamic #227,  0            // InvokeDynamic #7:apply:(Lzio/telemetry/opentracing/OpenTracing$$anon$11;Ljava/lang/String;)Lscala/Function0;
      10: aload         5
      12: invokevirtual #132                // Method zio/ZIO$.succeed:(Lscala/Function0;Ljava/lang/Object;)Lzio/ZIO;
      15: aload_0
      16: aload         5
      18: aload         4
      20: iload_2
      21: iload_3
      22: invokedynamic #237,  0            // InvokeDynamic #8:apply:(Lzio/telemetry/opentracing/OpenTracing$$anon$11;Ljava/lang/Object;Lscala/Function0;ZZ)Lscala/Function1;
      27: aload         5
      29: invokeinterface #160,  3          // InterfaceMethod zio/ZIO.flatMap:(Lscala/Function1;Ljava/lang/Object;)Lzio/ZIO;
      34: areturn

  public <R, E, A> boolean root$default$2();
    Code:
       0: iconst_1
       1: ireturn

  public <R, E, A> boolean root$default$3();
    Code:
       0: iconst_1
       1: ireturn

  public <R, E, A> zio.ZIO<R, E, A> span(java.lang.String, boolean, boolean, scala.Function0<zio.ZIO<R, E, A>>, java.lang.Object);
    Code:
       0: aload_0
       1: aload         5
       3: invokevirtual #74                 // Method getCurrentSpan:(Ljava/lang/Object;)Lzio/ZIO;
       6: aload_0
       7: aload_1
       8: aload         5
      10: aload         4
      12: iload_2
      13: iload_3
      14: invokedynamic #248,  0            // InvokeDynamic #9:apply:(Lzio/telemetry/opentracing/OpenTracing$$anon$11;Ljava/lang/String;Ljava/lang/Object;Lscala/Function0;ZZ)Lscala/Function1;
      19: aload         5
      21: invokeinterface #160,  3          // InterfaceMethod zio/ZIO.flatMap:(Lscala/Function1;Ljava/lang/Object;)Lzio/ZIO;
      26: areturn

  public <R, E, A> boolean span$default$2();
    Code:
       0: iconst_1
       1: ireturn

  public <R, E, A> boolean span$default$3();
    Code:
       0: iconst_1
       1: ireturn

  public <R, E, S, C> zio.ZIO<R, E, S> spanFrom(io.opentracing.propagation.Format<C>, C, java.lang.String, boolean, boolean, scala.Function0<zio.ZIO<R, E, S>>, java.lang.Object);
    Code:
       0: getstatic     #116                // Field zio/ZIO$.MODULE$:Lzio/ZIO$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokedynamic #265,  0            // InvokeDynamic #10:apply:(Lzio/telemetry/opentracing/OpenTracing$$anon$11;Lio/opentracing/propagation/Format;Ljava/lang/Object;)Lscala/Function0;
      11: aload         7
      13: invokevirtual #268                // Method zio/ZIO$.attempt:(Lscala/Function0;Ljava/lang/Object;)Lzio/ZIO;
      16: aload         6
      18: invokedynamic #278,  0            // InvokeDynamic #11:apply:(Lscala/Function0;)Lscala/Function1;
      23: aload_0
      24: aload         7
      26: aload_3
      27: aload         6
      29: iload         4
      31: iload         5
      33: invokedynamic #288,  0            // InvokeDynamic #12:apply:(Lzio/telemetry/opentracing/OpenTracing$$anon$11;Ljava/lang/Object;Ljava/lang/String;Lscala/Function0;ZZ)Lscala/Function1;
      38: getstatic     #293                // Field zio/CanFail$.MODULE$:Lzio/CanFail$;
      41: invokevirtual #297                // Method zio/CanFail$.canFail:()Lzio/CanFail;
      44: aload         7
      46: invokeinterface #301,  5          // InterfaceMethod zio/ZIO.foldZIO:(Lscala/Function1;Lscala/Function1;Lzio/CanFail;Ljava/lang/Object;)Lzio/ZIO;
      51: areturn

  public <R, E, S, C> boolean spanFrom$default$4();
    Code:
       0: iconst_1
       1: ireturn

  public <R, E, S, C> boolean spanFrom$default$5();
    Code:
       0: iconst_1
       1: ireturn

  public <R, E, A> zio.ZIO<R, E, A> tag(java.lang.String, java.lang.String, scala.Function0<zio.ZIO<R, E, A>>, java.lang.Object);
    Code:
       0: aload_3
       1: invokeinterface #188,  1          // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
       6: checkcast     #99                 // class zio/ZIO
       9: aload_0
      10: aload         4
      12: aload_1
      13: aload_2
      14: invokedynamic #318,  0            // InvokeDynamic #13:apply:(Lzio/telemetry/opentracing/OpenTracing$$anon$11;Ljava/lang/Object;Ljava/lang/String;Ljava/lang/String;)Lscala/Function0;
      19: aload         4
      21: invokeinterface #201,  3          // InterfaceMethod zio/ZIO.$less$times:(Lscala/Function0;Ljava/lang/Object;)Lzio/ZIO;
      26: areturn

  public <R, E, A> zio.ZIO<R, E, A> tag(java.lang.String, int, scala.Function0<zio.ZIO<R, E, A>>, java.lang.Object);
    Code:
       0: aload_3
       1: invokeinterface #188,  1          // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
       6: checkcast     #99                 // class zio/ZIO
       9: aload_0
      10: aload         4
      12: aload_1
      13: iload_2
      14: invokedynamic #328,  0            // InvokeDynamic #14:apply:(Lzio/telemetry/opentracing/OpenTracing$$anon$11;Ljava/lang/Object;Ljava/lang/String;I)Lscala/Function0;
      19: aload         4
      21: invokeinterface #201,  3          // InterfaceMethod zio/ZIO.$less$times:(Lscala/Function0;Ljava/lang/Object;)Lzio/ZIO;
      26: areturn

  public <R, E, A> zio.ZIO<R, E, A> tag(java.lang.String, boolean, scala.Function0<zio.ZIO<R, E, A>>, java.lang.Object);
    Code:
       0: aload_3
       1: invokeinterface #188,  1          // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
       6: checkcast     #99                 // class zio/ZIO
       9: aload_0
      10: aload         4
      12: aload_1
      13: iload_2
      14: invokedynamic #339,  0            // InvokeDynamic #15:apply:(Lzio/telemetry/opentracing/OpenTracing$$anon$11;Ljava/lang/Object;Ljava/lang/String;Z)Lscala/Function0;
      19: aload         4
      21: invokeinterface #201,  3          // InterfaceMethod zio/ZIO.$less$times:(Lscala/Function0;Ljava/lang/Object;)Lzio/ZIO;
      26: areturn

  public <C> zio.ZIO<java.lang.Object, scala.runtime.Nothing$, scala.runtime.BoxedUnit> inject(io.opentracing.propagation.Format<C>, C, java.lang.Object);
    Code:
       0: aload_0
       1: aload_3
       2: invokevirtual #74                 // Method getCurrentSpan:(Ljava/lang/Object;)Lzio/ZIO;
       5: aload_0
       6: aload_1
       7: aload_2
       8: aload_3
       9: invokedynamic #350,  0            // InvokeDynamic #16:apply:(Lzio/telemetry/opentracing/OpenTracing$$anon$11;Lio/opentracing/propagation/Format;Ljava/lang/Object;Ljava/lang/Object;)Lscala/Function1;
      14: aload_3
      15: invokeinterface #160,  3          // InterfaceMethod zio/ZIO.flatMap:(Lscala/Function1;Ljava/lang/Object;)Lzio/ZIO;
      20: areturn

  public <R, E, A> zio.ZIO<R, E, A> setBaggageItem(java.lang.String, java.lang.String, scala.Function0<zio.ZIO<R, E, A>>, java.lang.Object);
    Code:
       0: aload_3
       1: invokeinterface #188,  1          // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
       6: checkcast     #99                 // class zio/ZIO
       9: aload_0
      10: aload         4
      12: aload_1
      13: aload_2
      14: invokedynamic #356,  0            // InvokeDynamic #17:apply:(Lzio/telemetry/opentracing/OpenTracing$$anon$11;Ljava/lang/Object;Ljava/lang/String;Ljava/lang/String;)Lscala/Function0;
      19: aload         4
      21: invokeinterface #201,  3          // InterfaceMethod zio/ZIO.$less$times:(Lscala/Function0;Ljava/lang/Object;)Lzio/ZIO;
      26: areturn

  public zio.ZIO<java.lang.Object, scala.runtime.Nothing$, scala.Option<java.lang.String>> getBaggageItem(java.lang.String, java.lang.Object);
    Code:
       0: aload_0
       1: aload_2
       2: invokevirtual #74                 // Method getCurrentSpan:(Ljava/lang/Object;)Lzio/ZIO;
       5: aload_1
       6: aload_2
       7: invokedynamic #367,  0            // InvokeDynamic #18:apply:(Ljava/lang/String;Ljava/lang/Object;)Lscala/Function1;
      12: aload_2
      13: invokeinterface #160,  3          // InterfaceMethod zio/ZIO.flatMap:(Lscala/Function1;Ljava/lang/Object;)Lzio/ZIO;
      18: areturn

  private final void aspects$lzycompute$1();
    Code:
       0: aload_0
       1: monitorenter
       2: aload_0
       3: getfield      #52                 // Field aspects$module:Lzio/telemetry/opentracing/OpenTracing$aspects$;
       6: ifnonnull     21
       9: aload_0
      10: new           #39                 // class zio/telemetry/opentracing/OpenTracing$aspects$
      13: dup
      14: aload_0
      15: invokespecial #371                // Method zio/telemetry/opentracing/OpenTracing$aspects$."<init>":(Lzio/telemetry/opentracing/OpenTracing;)V
      18: putfield      #52                 // Field aspects$module:Lzio/telemetry/opentracing/OpenTracing$aspects$;
      21: aload_0
      22: monitorexit
      23: return
      24: aload_0
      25: monitorexit
      26: athrow
    Exception table:
       from    to  target type
           2    21    24   any

  public static final io.opentracing.SpanContext $anonfun$getCurrentSpanContext$1(io.opentracing.Span);
    Code:
       0: aload_0
       1: invokeinterface #379,  1          // InterfaceMethod io/opentracing/Span.context:()Lio/opentracing/SpanContext;
       6: areturn

  public static final io.opentracing.Span $anonfun$error$1(io.opentracing.Span);
    Code:
       0: aload_0
       1: ldc_w         #381                // String error
       4: iconst_1
       5: invokeinterface #385,  3          // InterfaceMethod io/opentracing/Span.setTag:(Ljava/lang/String;Z)Lio/opentracing/Span;
      10: areturn

  public static final boolean $anonfun$error$2(boolean);
    Code:
       0: iload_0
       1: ireturn

  public static final io.opentracing.Span $anonfun$error$4(io.opentracing.Span, zio.Cause);
    Code:
       0: aload_0
       1: getstatic     #394                // Field scala/jdk/CollectionConverters$.MODULE$:Lscala/jdk/CollectionConverters$;
       4: getstatic     #399                // Field scala/Predef$.MODULE$:Lscala/Predef$;
       7: invokevirtual #403                // Method scala/Predef$.Map:()Lscala/collection/immutable/Map$;
      10: getstatic     #399                // Field scala/Predef$.MODULE$:Lscala/Predef$;
      13: iconst_2
      14: anewarray     #405                // class scala/Tuple2
      17: dup
      18: iconst_0
      19: getstatic     #408                // Field scala/Predef$ArrowAssoc$.MODULE$:Lscala/Predef$ArrowAssoc$;
      22: getstatic     #399                // Field scala/Predef$.MODULE$:Lscala/Predef$;
      25: ldc_w         #410                // String error.object
      28: invokevirtual #413                // Method scala/Predef$.ArrowAssoc:(Ljava/lang/Object;)Ljava/lang/Object;
      31: aload_1
      32: invokevirtual #417                // Method scala/Predef$ArrowAssoc$.$minus$greater$extension:(Ljava/lang/Object;Ljava/lang/Object;)Lscala/Tuple2;
      35: aastore
      36: dup
      37: iconst_1
      38: getstatic     #408                // Field scala/Predef$ArrowAssoc$.MODULE$:Lscala/Predef$ArrowAssoc$;
      41: getstatic     #399                // Field scala/Predef$.MODULE$:Lscala/Predef$;
      44: ldc_w         #419                // String stack
      47: invokevirtual #413                // Method scala/Predef$.ArrowAssoc:(Ljava/lang/Object;)Ljava/lang/Object;
      50: aload_1
      51: invokevirtual #425                // Method zio/Cause.prettyPrint:()Ljava/lang/String;
      54: invokevirtual #417                // Method scala/Predef$ArrowAssoc$.$minus$greater$extension:(Ljava/lang/Object;Ljava/lang/Object;)Lscala/Tuple2;
      57: aastore
      58: checkcast     #427                // class "[Ljava/lang/Object;"
      61: invokevirtual #431                // Method scala/Predef$.wrapRefArray:([Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
      64: invokevirtual #436                // Method scala/collection/immutable/Map$.apply:(Lscala/collection/Seq;)Lscala/collection/GenMap;
      67: checkcast     #438                // class scala/collection/Map
      70: invokevirtual #442                // Method scala/jdk/CollectionConverters$.mapAsJavaMapConverter:(Lscala/collection/Map;)Lscala/collection/convert/Decorators$AsJava;
      73: invokevirtual #445                // Method scala/collection/convert/Decorators$AsJava.asJava:()Ljava/lang/Object;
      76: checkcast     #447                // class java/util/Map
      79: invokeinterface #450,  2          // InterfaceMethod io/opentracing/Span.log:(Ljava/util/Map;)Lio/opentracing/Span;
      84: areturn

  public static final boolean $anonfun$error$5(boolean);
    Code:
       0: iload_0
       1: ireturn

  public static final void $anonfun$error$6(scala.Option);
    Code:
       0: return

  public static final zio.ZIO $anonfun$error$3(io.opentracing.Span, zio.Cause, java.lang.Object, boolean, scala.Option);
    Code:
       0: getstatic     #116                // Field zio/ZIO$.MODULE$:Lzio/ZIO$;
       3: aload_0
       4: aload_1
       5: invokedynamic #463,  0            // InvokeDynamic #19:apply:(Lio/opentracing/Span;Lzio/Cause;)Lscala/Function0;
      10: aload_2
      11: invokevirtual #132                // Method zio/ZIO$.succeed:(Lscala/Function0;Ljava/lang/Object;)Lzio/ZIO;
      14: iload_3
      15: invokedynamic #467,  0            // InvokeDynamic #20:apply$mcZ$sp:(Z)Lscala/runtime/java8/JFunction0$mcZ$sp;
      20: aload_2
      21: invokeinterface #147,  3          // InterfaceMethod zio/ZIO.when:(Lscala/Function0;Ljava/lang/Object;)Lzio/ZIO;
      26: invokedynamic #474,  0            // InvokeDynamic #21:apply:()Lscala/Function1;
      31: aload_2
      32: invokeinterface #103,  3          // InterfaceMethod zio/ZIO.map:(Lscala/Function1;Ljava/lang/Object;)Lzio/ZIO;
      37: areturn

  public static final void $anonfun$finish$2(io.opentracing.Span, long);
    Code:
       0: aload_0
       1: lload_1
       2: invokeinterface #481,  3          // InterfaceMethod io/opentracing/Span.finish:(J)V
       7: return

  public static final zio.ZIO $anonfun$finish$1(io.opentracing.Span, java.lang.Object, long);
    Code:
       0: getstatic     #116                // Field zio/ZIO$.MODULE$:Lzio/ZIO$;
       3: aload_0
       4: lload_2
       5: invokedynamic #494,  0            // InvokeDynamic #22:apply$mcV$sp:(Lio/opentracing/Span;J)Lscala/runtime/java8/JFunction0$mcV$sp;
      10: aload_1
      11: invokevirtual #132                // Method zio/ZIO$.succeed:(Lscala/Function0;Ljava/lang/Object;)Lzio/ZIO;
      14: areturn

  public static final zio.ZIO $anonfun$log$2(zio.telemetry.opentracing.OpenTracing$$anon$11);
    Code:
       0: aload_0
       1: getfield      #170                // Field currentMicros$1:Lzio/ZIO;
       4: areturn

  public static final io.opentracing.Span $anonfun$log$3(scala.collection.immutable.Map, io.opentracing.Span, long);
    Code:
       0: aload_1
       1: lload_2
       2: getstatic     #394                // Field scala/jdk/CollectionConverters$.MODULE$:Lscala/jdk/CollectionConverters$;
       5: aload_0
       6: invokevirtual #442                // Method scala/jdk/CollectionConverters$.mapAsJavaMapConverter:(Lscala/collection/Map;)Lscala/collection/convert/Decorators$AsJava;
       9: invokevirtual #445                // Method scala/collection/convert/Decorators$AsJava.asJava:()Ljava/lang/Object;
      12: checkcast     #447                // class java/util/Map
      15: invokeinterface #504,  4          // InterfaceMethod io/opentracing/Span.log:(JLjava/util/Map;)Lio/opentracing/Span;
      20: areturn

  public static final zio.ZIO $anonfun$log$1(zio.telemetry.opentracing.OpenTracing$$anon$11, java.lang.Object, scala.collection.immutable.Map);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #74                 // Method getCurrentSpan:(Ljava/lang/Object;)Lzio/ZIO;
       5: aload_0
       6: invokedynamic #511,  0            // InvokeDynamic #23:apply:(Lzio/telemetry/opentracing/OpenTracing$$anon$11;)Lscala/Function0;
      11: aload_2
      12: invokedynamic #523,  0            // InvokeDynamic #24:apply:(Lscala/collection/immutable/Map;)Lscala/Function2;
      17: aload_1
      18: invokeinterface #527,  4          // InterfaceMethod zio/ZIO.zipWith:(Lscala/Function0;Lscala/Function2;Ljava/lang/Object;)Lzio/ZIO;
      23: areturn

  public static final zio.ZIO $anonfun$log$5(zio.telemetry.opentracing.OpenTracing$$anon$11);
    Code:
       0: aload_0
       1: getfield      #170                // Field currentMicros$1:Lzio/ZIO;
       4: areturn

  public static final io.opentracing.Span $anonfun$log$6(java.lang.String, io.opentracing.Span, long);
    Code:
       0: aload_1
       1: lload_2
       2: aload_0
       3: invokeinterface #534,  4          // InterfaceMethod io/opentracing/Span.log:(JLjava/lang/String;)Lio/opentracing/Span;
       8: areturn

  public static final zio.ZIO $anonfun$log$4(zio.telemetry.opentracing.OpenTracing$$anon$11, java.lang.Object, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #74                 // Method getCurrentSpan:(Ljava/lang/Object;)Lzio/ZIO;
       5: aload_0
       6: invokedynamic #539,  0            // InvokeDynamic #25:apply:(Lzio/telemetry/opentracing/OpenTracing$$anon$11;)Lscala/Function0;
      11: aload_2
      12: invokedynamic #547,  0            // InvokeDynamic #26:apply:(Ljava/lang/String;)Lscala/Function2;
      17: aload_1
      18: invokeinterface #527,  4          // InterfaceMethod zio/ZIO.zipWith:(Lscala/Function0;Lscala/Function2;Ljava/lang/Object;)Lzio/ZIO;
      23: areturn

  public static final io.opentracing.Span $anonfun$root$1(zio.telemetry.opentracing.OpenTracing$$anon$11, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #550                // Field tracer$1:Lio/opentracing/Tracer;
       4: aload_1
       5: invokeinterface #554,  2          // InterfaceMethod io/opentracing/Tracer.buildSpan:(Ljava/lang/String;)Lio/opentracing/Tracer$SpanBuilder;
      10: invokeinterface #557,  1          // InterfaceMethod io/opentracing/Tracer$SpanBuilder.start:()Lio/opentracing/Span;
      15: areturn

  public static final zio.Exit$Failure $anonfun$root$7(zio.Cause);
    Code:
       0: new           #34                 // class zio/Exit$Failure
       3: dup
       4: aload_0
       5: invokespecial #563                // Method zio/Exit$Failure."<init>":(Lzio/Cause;)V
       8: areturn

  public static final zio.ZIO $anonfun$root$6(zio.Cause, java.lang.Object);
    Code:
       0: getstatic     #116                // Field zio/ZIO$.MODULE$:Lzio/ZIO$;
       3: aload_0
       4: invokedynamic #574,  0            // InvokeDynamic #27:apply:(Lzio/Cause;)Lscala/Function0;
       9: aload_1
      10: invokevirtual #577                // Method zio/ZIO$.done:(Lscala/Function0;Ljava/lang/Object;)Lzio/ZIO;
      13: areturn

  public static final zio.ZIO $anonfun$root$5(zio.telemetry.opentracing.OpenTracing$$anon$11, io.opentracing.Span, boolean, boolean, java.lang.Object, zio.Cause);
    Code:
       0: aload_0
       1: aload_1
       2: aload         5
       4: iload_2
       5: iload_3
       6: aload         4
       8: invokevirtual #585                // Method error:(Lio/opentracing/Span;Lzio/Cause;ZZLjava/lang/Object;)Lzio/ZIO;
      11: aload         5
      13: aload         4
      15: invokedynamic #591,  0            // InvokeDynamic #28:apply:(Lzio/Cause;Ljava/lang/Object;)Lscala/Function0;
      20: aload         4
      22: invokeinterface #594,  3          // InterfaceMethod zio/ZIO.$times$greater:(Lscala/Function0;Ljava/lang/Object;)Lzio/ZIO;
      27: areturn

  public static final zio.ZIO $anonfun$root$9(zio.telemetry.opentracing.OpenTracing$$anon$11, io.opentracing.Span, java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #64                 // Field currentSpan$1:Lzio/FiberRef;
       4: aload_1
       5: aload_2
       6: invokeinterface #601,  3          // InterfaceMethod zio/FiberRef.set:(Ljava/lang/Object;Ljava/lang/Object;)Lzio/ZIO;
      11: areturn

  public static final zio.ZIO $anonfun$root$8(zio.telemetry.opentracing.OpenTracing$$anon$11, io.opentracing.Span, java.lang.Object, io.opentracing.Span);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #605                // Method finish:(Lio/opentracing/Span;Ljava/lang/Object;)Lzio/ZIO;
       6: aload_0
       7: aload_3
       8: aload_2
       9: invokedynamic #611,  0            // InvokeDynamic #29:apply:(Lzio/telemetry/opentracing/OpenTracing$$anon$11;Lio/opentracing/Span;Ljava/lang/Object;)Lscala/Function0;
      14: aload_2
      15: invokeinterface #594,  3          // InterfaceMethod zio/ZIO.$times$greater:(Lscala/Function0;Ljava/lang/Object;)Lzio/ZIO;
      20: areturn

  public static final java.lang.Object $anonfun$root$10(java.lang.Object);
    Code:
       0: aload_0
       1: areturn

  public static final zio.ZIO $anonfun$root$4(zio.telemetry.opentracing.OpenTracing$$anon$11, scala.Function0, io.opentracing.Span, boolean, boolean, java.lang.Object, io.opentracing.Span, scala.runtime.BoxedUnit);
    Code:
       0: aload_1
       1: invokeinterface #188,  1          // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
       6: checkcast     #99                 // class zio/ZIO
       9: aload_0
      10: aload_2
      11: iload_3
      12: iload         4
      14: aload         5
      16: invokedynamic #624,  0            // InvokeDynamic #30:apply:(Lzio/telemetry/opentracing/OpenTracing$$anon$11;Lio/opentracing/Span;ZZLjava/lang/Object;)Lscala/Function1;
      21: aload         5
      23: invokeinterface #627,  3          // InterfaceMethod zio/ZIO.catchAllCause:(Lscala/Function1;Ljava/lang/Object;)Lzio/ZIO;
      28: aload_0
      29: aload_2
      30: aload         5
      32: aload         6
      34: invokedynamic #633,  0            // InvokeDynamic #31:apply:(Lzio/telemetry/opentracing/OpenTracing$$anon$11;Lio/opentracing/Span;Ljava/lang/Object;Lio/opentracing/Span;)Lscala/Function0;
      39: aload         5
      41: invokeinterface #636,  3          // InterfaceMethod zio/ZIO.ensuring:(Lscala/Function0;Ljava/lang/Object;)Lzio/ZIO;
      46: invokedynamic #640,  0            // InvokeDynamic #32:apply:()Lscala/Function1;
      51: aload         5
      53: invokeinterface #103,  3          // InterfaceMethod zio/ZIO.map:(Lscala/Function1;Ljava/lang/Object;)Lzio/ZIO;
      58: areturn

  public static final zio.ZIO $anonfun$root$3(zio.telemetry.opentracing.OpenTracing$$anon$11, io.opentracing.Span, java.lang.Object, scala.Function0, boolean, boolean, io.opentracing.Span);
    Code:
       0: aload_0
       1: getfield      #64                 // Field currentSpan$1:Lzio/FiberRef;
       4: aload_1
       5: aload_2
       6: invokeinterface #601,  3          // InterfaceMethod zio/FiberRef.set:(Ljava/lang/Object;Ljava/lang/Object;)Lzio/ZIO;
      11: aload_0
      12: aload_3
      13: aload_1
      14: iload         4
      16: iload         5
      18: aload_2
      19: aload         6
      21: invokedynamic #652,  0            // InvokeDynamic #33:apply:(Lzio/telemetry/opentracing/OpenTracing$$anon$11;Lscala/Function0;Lio/opentracing/Span;ZZLjava/lang/Object;Lio/opentracing/Span;)Lscala/Function1;
      26: aload_2
      27: invokeinterface #160,  3          // InterfaceMethod zio/ZIO.flatMap:(Lscala/Function1;Ljava/lang/Object;)Lzio/ZIO;
      32: areturn

  public static final zio.ZIO $anonfun$root$2(zio.telemetry.opentracing.OpenTracing$$anon$11, java.lang.Object, scala.Function0, boolean, boolean, io.opentracing.Span);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #74                 // Method getCurrentSpan:(Ljava/lang/Object;)Lzio/ZIO;
       5: aload_0
       6: aload         5
       8: aload_1
       9: aload_2
      10: iload_3
      11: iload         4
      13: invokedynamic #658,  0            // InvokeDynamic #34:apply:(Lzio/telemetry/opentracing/OpenTracing$$anon$11;Lio/opentracing/Span;Ljava/lang/Object;Lscala/Function0;ZZ)Lscala/Function1;
      18: aload_1
      19: invokeinterface #160,  3          // InterfaceMethod zio/ZIO.flatMap:(Lscala/Function1;Ljava/lang/Object;)Lzio/ZIO;
      24: areturn

  public static final io.opentracing.Span $anonfun$span$2(zio.telemetry.opentracing.OpenTracing$$anon$11, java.lang.String, io.opentracing.Span);
    Code:
       0: aload_0
       1: getfield      #550                // Field tracer$1:Lio/opentracing/Tracer;
       4: aload_1
       5: invokeinterface #554,  2          // InterfaceMethod io/opentracing/Tracer.buildSpan:(Ljava/lang/String;)Lio/opentracing/Tracer$SpanBuilder;
      10: aload_2
      11: invokeinterface #666,  2          // InterfaceMethod io/opentracing/Tracer$SpanBuilder.asChildOf:(Lio/opentracing/Span;)Lio/opentracing/Tracer$SpanBuilder;
      16: invokeinterface #557,  1          // InterfaceMethod io/opentracing/Tracer$SpanBuilder.start:()Lio/opentracing/Span;
      21: areturn

  public static final zio.Exit$Failure $anonfun$span$7(zio.Cause);
    Code:
       0: new           #34                 // class zio/Exit$Failure
       3: dup
       4: aload_0
       5: invokespecial #563                // Method zio/Exit$Failure."<init>":(Lzio/Cause;)V
       8: areturn

  public static final zio.ZIO $anonfun$span$6(zio.Cause, java.lang.Object);
    Code:
       0: getstatic     #116                // Field zio/ZIO$.MODULE$:Lzio/ZIO$;
       3: aload_0
       4: invokedynamic #674,  0            // InvokeDynamic #35:apply:(Lzio/Cause;)Lscala/Function0;
       9: aload_1
      10: invokevirtual #577                // Method zio/ZIO$.done:(Lscala/Function0;Ljava/lang/Object;)Lzio/ZIO;
      13: areturn

  public static final zio.ZIO $anonfun$span$5(zio.telemetry.opentracing.OpenTracing$$anon$11, io.opentracing.Span, boolean, boolean, java.lang.Object, zio.Cause);
    Code:
       0: aload_0
       1: aload_1
       2: aload         5
       4: iload_2
       5: iload_3
       6: aload         4
       8: invokevirtual #585                // Method error:(Lio/opentracing/Span;Lzio/Cause;ZZLjava/lang/Object;)Lzio/ZIO;
      11: aload         5
      13: aload         4
      15: invokedynamic #682,  0            // InvokeDynamic #36:apply:(Lzio/Cause;Ljava/lang/Object;)Lscala/Function0;
      20: aload         4
      22: invokeinterface #594,  3          // InterfaceMethod zio/ZIO.$times$greater:(Lscala/Function0;Ljava/lang/Object;)Lzio/ZIO;
      27: areturn

  public static final zio.ZIO $anonfun$span$9(zio.telemetry.opentracing.OpenTracing$$anon$11, io.opentracing.Span, java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #64                 // Field currentSpan$1:Lzio/FiberRef;
       4: aload_1
       5: aload_2
       6: invokeinterface #601,  3          // InterfaceMethod zio/FiberRef.set:(Ljava/lang/Object;Ljava/lang/Object;)Lzio/ZIO;
      11: areturn

  public static final zio.ZIO $anonfun$span$8(zio.telemetry.opentracing.OpenTracing$$anon$11, io.opentracing.Span, java.lang.Object, io.opentracing.Span);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #605                // Method finish:(Lio/opentracing/Span;Ljava/lang/Object;)Lzio/ZIO;
       6: aload_0
       7: aload_3
       8: aload_2
       9: invokedynamic #688,  0            // InvokeDynamic #37:apply:(Lzio/telemetry/opentracing/OpenTracing$$anon$11;Lio/opentracing/Span;Ljava/lang/Object;)Lscala/Function0;
      14: aload_2
      15: invokeinterface #594,  3          // InterfaceMethod zio/ZIO.$times$greater:(Lscala/Function0;Ljava/lang/Object;)Lzio/ZIO;
      20: areturn

  public static final java.lang.Object $anonfun$span$10(java.lang.Object);
    Code:
       0: aload_0
       1: areturn

  public static final zio.ZIO $anonfun$span$4(zio.telemetry.opentracing.OpenTracing$$anon$11, scala.Function0, io.opentracing.Span, boolean, boolean, java.lang.Object, io.opentracing.Span, scala.runtime.BoxedUnit);
    Code:
       0: aload_1
       1: invokeinterface #188,  1          // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
       6: checkcast     #99                 // class zio/ZIO
       9: aload_0
      10: aload_2
      11: iload_3
      12: iload         4
      14: aload         5
      16: invokedynamic #695,  0            // InvokeDynamic #38:apply:(Lzio/telemetry/opentracing/OpenTracing$$anon$11;Lio/opentracing/Span;ZZLjava/lang/Object;)Lscala/Function1;
      21: aload         5
      23: invokeinterface #627,  3          // InterfaceMethod zio/ZIO.catchAllCause:(Lscala/Function1;Ljava/lang/Object;)Lzio/ZIO;
      28: aload_0
      29: aload_2
      30: aload         5
      32: aload         6
      34: invokedynamic #699,  0            // InvokeDynamic #39:apply:(Lzio/telemetry/opentracing/OpenTracing$$anon$11;Lio/opentracing/Span;Ljava/lang/Object;Lio/opentracing/Span;)Lscala/Function0;
      39: aload         5
      41: invokeinterface #636,  3          // InterfaceMethod zio/ZIO.ensuring:(Lscala/Function0;Ljava/lang/Object;)Lzio/ZIO;
      46: invokedynamic #703,  0            // InvokeDynamic #40:apply:()Lscala/Function1;
      51: aload         5
      53: invokeinterface #103,  3          // InterfaceMethod zio/ZIO.map:(Lscala/Function1;Ljava/lang/Object;)Lzio/ZIO;
      58: areturn

  public static final zio.ZIO $anonfun$span$3(zio.telemetry.opentracing.OpenTracing$$anon$11, java.lang.Object, scala.Function0, boolean, boolean, io.opentracing.Span, io.opentracing.Span);
    Code:
       0: aload_0
       1: getfield      #64                 // Field currentSpan$1:Lzio/FiberRef;
       4: aload         6
       6: aload_1
       7: invokeinterface #601,  3          // InterfaceMethod zio/FiberRef.set:(Ljava/lang/Object;Ljava/lang/Object;)Lzio/ZIO;
      12: aload_0
      13: aload_2
      14: aload         6
      16: iload_3
      17: iload         4
      19: aload_1
      20: aload         5
      22: invokedynamic #710,  0            // InvokeDynamic #41:apply:(Lzio/telemetry/opentracing/OpenTracing$$anon$11;Lscala/Function0;Lio/opentracing/Span;ZZLjava/lang/Object;Lio/opentracing/Span;)Lscala/Function1;
      27: aload_1
      28: invokeinterface #160,  3          // InterfaceMethod zio/ZIO.flatMap:(Lscala/Function1;Ljava/lang/Object;)Lzio/ZIO;
      33: areturn

  public static final zio.ZIO $anonfun$span$1(zio.telemetry.opentracing.OpenTracing$$anon$11, java.lang.String, java.lang.Object, scala.Function0, boolean, boolean, io.opentracing.Span);
    Code:
       0: getstatic     #116                // Field zio/ZIO$.MODULE$:Lzio/ZIO$;
       3: aload_0
       4: aload_1
       5: aload         6
       7: invokedynamic #716,  0            // InvokeDynamic #42:apply:(Lzio/telemetry/opentracing/OpenTracing$$anon$11;Ljava/lang/String;Lio/opentracing/Span;)Lscala/Function0;
      12: aload_2
      13: invokevirtual #132                // Method zio/ZIO$.succeed:(Lscala/Function0;Ljava/lang/Object;)Lzio/ZIO;
      16: aload_0
      17: aload_2
      18: aload_3
      19: iload         4
      21: iload         5
      23: aload         6
      25: invokedynamic #722,  0            // InvokeDynamic #43:apply:(Lzio/telemetry/opentracing/OpenTracing$$anon$11;Ljava/lang/Object;Lscala/Function0;ZZLio/opentracing/Span;)Lscala/Function1;
      30: aload_2
      31: invokeinterface #160,  3          // InterfaceMethod zio/ZIO.flatMap:(Lscala/Function1;Ljava/lang/Object;)Lzio/ZIO;
      36: areturn

  public static final io.opentracing.SpanContext $anonfun$spanFrom$1(zio.telemetry.opentracing.OpenTracing$$anon$11, io.opentracing.propagation.Format, java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #550                // Field tracer$1:Lio/opentracing/Tracer;
       4: aload_1
       5: aload_2
       6: invokeinterface #728,  3          // InterfaceMethod io/opentracing/Tracer.extract:(Lio/opentracing/propagation/Format;Ljava/lang/Object;)Lio/opentracing/SpanContext;
      11: areturn

  public static final zio.ZIO $anonfun$spanFrom$2(scala.Function0, java.lang.Throwable);
    Code:
       0: aload_0
       1: invokeinterface #188,  1          // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
       6: checkcast     #99                 // class zio/ZIO
       9: areturn

  public static final io.opentracing.Span $anonfun$spanFrom$5(zio.telemetry.opentracing.OpenTracing$$anon$11, java.lang.String, io.opentracing.SpanContext);
    Code:
       0: aload_0
       1: getfield      #550                // Field tracer$1:Lio/opentracing/Tracer;
       4: aload_1
       5: invokeinterface #554,  2          // InterfaceMethod io/opentracing/Tracer.buildSpan:(Ljava/lang/String;)Lio/opentracing/Tracer$SpanBuilder;
      10: aload_2
      11: invokeinterface #738,  2          // InterfaceMethod io/opentracing/Tracer$SpanBuilder.asChildOf:(Lio/opentracing/SpanContext;)Lio/opentracing/Tracer$SpanBuilder;
      16: invokeinterface #557,  1          // InterfaceMethod io/opentracing/Tracer$SpanBuilder.start:()Lio/opentracing/Span;
      21: areturn

  public static final zio.Exit$Failure $anonfun$spanFrom$10(zio.Cause);
    Code:
       0: new           #34                 // class zio/Exit$Failure
       3: dup
       4: aload_0
       5: invokespecial #563                // Method zio/Exit$Failure."<init>":(Lzio/Cause;)V
       8: areturn

  public static final zio.ZIO $anonfun$spanFrom$9(zio.Cause, java.lang.Object);
    Code:
       0: getstatic     #116                // Field zio/ZIO$.MODULE$:Lzio/ZIO$;
       3: aload_0
       4: invokedynamic #747,  0            // InvokeDynamic #44:apply:(Lzio/Cause;)Lscala/Function0;
       9: aload_1
      10: invokevirtual #577                // Method zio/ZIO$.done:(Lscala/Function0;Ljava/lang/Object;)Lzio/ZIO;
      13: areturn

  public static final zio.ZIO $anonfun$spanFrom$8(zio.telemetry.opentracing.OpenTracing$$anon$11, io.opentracing.Span, boolean, boolean, java.lang.Object, zio.Cause);
    Code:
       0: aload_0
       1: aload_1
       2: aload         5
       4: iload_2
       5: iload_3
       6: aload         4
       8: invokevirtual #585                // Method error:(Lio/opentracing/Span;Lzio/Cause;ZZLjava/lang/Object;)Lzio/ZIO;
      11: aload         5
      13: aload         4
      15: invokedynamic #755,  0            // InvokeDynamic #45:apply:(Lzio/Cause;Ljava/lang/Object;)Lscala/Function0;
      20: aload         4
      22: invokeinterface #594,  3          // InterfaceMethod zio/ZIO.$times$greater:(Lscala/Function0;Ljava/lang/Object;)Lzio/ZIO;
      27: areturn

  public static final zio.ZIO $anonfun$spanFrom$12(zio.telemetry.opentracing.OpenTracing$$anon$11, io.opentracing.Span, java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #64                 // Field currentSpan$1:Lzio/FiberRef;
       4: aload_1
       5: aload_2
       6: invokeinterface #601,  3          // InterfaceMethod zio/FiberRef.set:(Ljava/lang/Object;Ljava/lang/Object;)Lzio/ZIO;
      11: areturn

  public static final zio.ZIO $anonfun$spanFrom$11(zio.telemetry.opentracing.OpenTracing$$anon$11, io.opentracing.Span, java.lang.Object, io.opentracing.Span);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #605                // Method finish:(Lio/opentracing/Span;Ljava/lang/Object;)Lzio/ZIO;
       6: aload_0
       7: aload_3
       8: aload_2
       9: invokedynamic #762,  0            // InvokeDynamic #46:apply:(Lzio/telemetry/opentracing/OpenTracing$$anon$11;Lio/opentracing/Span;Ljava/lang/Object;)Lscala/Function0;
      14: aload_2
      15: invokeinterface #594,  3          // InterfaceMethod zio/ZIO.$times$greater:(Lscala/Function0;Ljava/lang/Object;)Lzio/ZIO;
      20: areturn

  public static final java.lang.Object $anonfun$spanFrom$13(java.lang.Object);
    Code:
       0: aload_0
       1: areturn

  public static final zio.ZIO $anonfun$spanFrom$7(zio.telemetry.opentracing.OpenTracing$$anon$11, scala.Function0, io.opentracing.Span, boolean, boolean, java.lang.Object, io.opentracing.Span, scala.runtime.BoxedUnit);
    Code:
       0: aload_1
       1: invokeinterface #188,  1          // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
       6: checkcast     #99                 // class zio/ZIO
       9: aload_0
      10: aload_2
      11: iload_3
      12: iload         4
      14: aload         5
      16: invokedynamic #768,  0            // InvokeDynamic #47:apply:(Lzio/telemetry/opentracing/OpenTracing$$anon$11;Lio/opentracing/Span;ZZLjava/lang/Object;)Lscala/Function1;
      21: aload         5
      23: invokeinterface #627,  3          // InterfaceMethod zio/ZIO.catchAllCause:(Lscala/Function1;Ljava/lang/Object;)Lzio/ZIO;
      28: aload_0
      29: aload_2
      30: aload         5
      32: aload         6
      34: invokedynamic #772,  0            // InvokeDynamic #48:apply:(Lzio/telemetry/opentracing/OpenTracing$$anon$11;Lio/opentracing/Span;Ljava/lang/Object;Lio/opentracing/Span;)Lscala/Function0;
      39: aload         5
      41: invokeinterface #636,  3          // InterfaceMethod zio/ZIO.ensuring:(Lscala/Function0;Ljava/lang/Object;)Lzio/ZIO;
      46: invokedynamic #776,  0            // InvokeDynamic #49:apply:()Lscala/Function1;
      51: aload         5
      53: invokeinterface #103,  3          // InterfaceMethod zio/ZIO.map:(Lscala/Function1;Ljava/lang/Object;)Lzio/ZIO;
      58: areturn

  public static final zio.ZIO $anonfun$spanFrom$6(zio.telemetry.opentracing.OpenTracing$$anon$11, java.lang.Object, scala.Function0, boolean, boolean, io.opentracing.Span, io.opentracing.Span);
    Code:
       0: aload_0
       1: getfield      #64                 // Field currentSpan$1:Lzio/FiberRef;
       4: aload         6
       6: aload_1
       7: invokeinterface #601,  3          // InterfaceMethod zio/FiberRef.set:(Ljava/lang/Object;Ljava/lang/Object;)Lzio/ZIO;
      12: aload_0
      13: aload_2
      14: aload         6
      16: iload_3
      17: iload         4
      19: aload_1
      20: aload         5
      22: invokedynamic #781,  0            // InvokeDynamic #50:apply:(Lzio/telemetry/opentracing/OpenTracing$$anon$11;Lscala/Function0;Lio/opentracing/Span;ZZLjava/lang/Object;Lio/opentracing/Span;)Lscala/Function1;
      27: aload_1
      28: invokeinterface #160,  3          // InterfaceMethod zio/ZIO.flatMap:(Lscala/Function1;Ljava/lang/Object;)Lzio/ZIO;
      33: areturn

  public static final zio.ZIO $anonfun$spanFrom$4(zio.telemetry.opentracing.OpenTracing$$anon$11, java.lang.String, io.opentracing.SpanContext, java.lang.Object, scala.Function0, boolean, boolean, io.opentracing.Span);
    Code:
       0: getstatic     #116                // Field zio/ZIO$.MODULE$:Lzio/ZIO$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokedynamic #789,  0            // InvokeDynamic #51:apply:(Lzio/telemetry/opentracing/OpenTracing$$anon$11;Ljava/lang/String;Lio/opentracing/SpanContext;)Lscala/Function0;
      11: aload_3
      12: invokevirtual #132                // Method zio/ZIO$.succeed:(Lscala/Function0;Ljava/lang/Object;)Lzio/ZIO;
      15: aload_0
      16: aload_3
      17: aload         4
      19: iload         5
      21: iload         6
      23: aload         7
      25: invokedynamic #793,  0            // InvokeDynamic #52:apply:(Lzio/telemetry/opentracing/OpenTracing$$anon$11;Ljava/lang/Object;Lscala/Function0;ZZLio/opentracing/Span;)Lscala/Function1;
      30: aload_3
      31: invokeinterface #160,  3          // InterfaceMethod zio/ZIO.flatMap:(Lscala/Function1;Ljava/lang/Object;)Lzio/ZIO;
      36: areturn

  public static final zio.ZIO $anonfun$spanFrom$3(zio.telemetry.opentracing.OpenTracing$$anon$11, java.lang.Object, java.lang.String, scala.Function0, boolean, boolean, io.opentracing.SpanContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #74                 // Method getCurrentSpan:(Ljava/lang/Object;)Lzio/ZIO;
       5: aload_0
       6: aload_2
       7: aload         6
       9: aload_1
      10: aload_3
      11: iload         4
      13: iload         5
      15: invokedynamic #800,  0            // InvokeDynamic #53:apply:(Lzio/telemetry/opentracing/OpenTracing$$anon$11;Ljava/lang/String;Lio/opentracing/SpanContext;Ljava/lang/Object;Lscala/Function0;ZZ)Lscala/Function1;
      20: aload_1
      21: invokeinterface #160,  3          // InterfaceMethod zio/ZIO.flatMap:(Lscala/Function1;Ljava/lang/Object;)Lzio/ZIO;
      26: areturn

  public static final io.opentracing.Span $anonfun$tag$2(java.lang.String, java.lang.String, io.opentracing.Span);
    Code:
       0: aload_2
       1: aload_0
       2: aload_1
       3: invokeinterface #808,  3          // InterfaceMethod io/opentracing/Span.setTag:(Ljava/lang/String;Ljava/lang/String;)Lio/opentracing/Span;
       8: areturn

  public static final zio.ZIO $anonfun$tag$1(zio.telemetry.opentracing.OpenTracing$$anon$11, java.lang.Object, java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #74                 // Method getCurrentSpan:(Ljava/lang/Object;)Lzio/ZIO;
       5: aload_2
       6: aload_3
       7: invokedynamic #816,  0            // InvokeDynamic #54:apply:(Ljava/lang/String;Ljava/lang/String;)Lscala/Function1;
      12: aload_1
      13: invokeinterface #103,  3          // InterfaceMethod zio/ZIO.map:(Lscala/Function1;Ljava/lang/Object;)Lzio/ZIO;
      18: areturn

  public static final io.opentracing.Span $anonfun$tag$4(java.lang.String, int, io.opentracing.Span);
    Code:
       0: aload_2
       1: aload_0
       2: getstatic     #399                // Field scala/Predef$.MODULE$:Lscala/Predef$;
       5: iload_1
       6: invokevirtual #825                // Method scala/Predef$.int2Integer:(I)Ljava/lang/Integer;
       9: invokeinterface #828,  3          // InterfaceMethod io/opentracing/Span.setTag:(Ljava/lang/String;Ljava/lang/Number;)Lio/opentracing/Span;
      14: areturn

  public static final zio.ZIO $anonfun$tag$3(zio.telemetry.opentracing.OpenTracing$$anon$11, java.lang.Object, java.lang.String, int);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #74                 // Method getCurrentSpan:(Ljava/lang/Object;)Lzio/ZIO;
       5: aload_2
       6: iload_3
       7: invokedynamic #835,  0            // InvokeDynamic #55:apply:(Ljava/lang/String;I)Lscala/Function1;
      12: aload_1
      13: invokeinterface #103,  3          // InterfaceMethod zio/ZIO.map:(Lscala/Function1;Ljava/lang/Object;)Lzio/ZIO;
      18: areturn

  public static final io.opentracing.Span $anonfun$tag$6(java.lang.String, boolean, io.opentracing.Span);
    Code:
       0: aload_2
       1: aload_0
       2: iload_1
       3: invokeinterface #385,  3          // InterfaceMethod io/opentracing/Span.setTag:(Ljava/lang/String;Z)Lio/opentracing/Span;
       8: areturn

  public static final zio.ZIO $anonfun$tag$5(zio.telemetry.opentracing.OpenTracing$$anon$11, java.lang.Object, java.lang.String, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #74                 // Method getCurrentSpan:(Ljava/lang/Object;)Lzio/ZIO;
       5: aload_2
       6: iload_3
       7: invokedynamic #847,  0            // InvokeDynamic #56:apply:(Ljava/lang/String;Z)Lscala/Function1;
      12: aload_1
      13: invokeinterface #103,  3          // InterfaceMethod zio/ZIO.map:(Lscala/Function1;Ljava/lang/Object;)Lzio/ZIO;
      18: areturn

  public static final void $anonfun$inject$2(zio.telemetry.opentracing.OpenTracing$$anon$11, io.opentracing.Span, io.opentracing.propagation.Format, java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #550                // Field tracer$1:Lio/opentracing/Tracer;
       4: aload_1
       5: invokeinterface #379,  1          // InterfaceMethod io/opentracing/Span.context:()Lio/opentracing/SpanContext;
      10: aload_2
      11: aload_3
      12: invokeinterface #855,  4          // InterfaceMethod io/opentracing/Tracer.inject:(Lio/opentracing/SpanContext;Lio/opentracing/propagation/Format;Ljava/lang/Object;)V
      17: return

  public static final void $anonfun$inject$3(scala.runtime.BoxedUnit);
    Code:
       0: return

  public static final zio.ZIO $anonfun$inject$1(zio.telemetry.opentracing.OpenTracing$$anon$11, io.opentracing.propagation.Format, java.lang.Object, java.lang.Object, io.opentracing.Span);
    Code:
       0: getstatic     #116                // Field zio/ZIO$.MODULE$:Lzio/ZIO$;
       3: aload_0
       4: aload         4
       6: aload_1
       7: aload_2
       8: invokedynamic #864,  0            // InvokeDynamic #57:apply$mcV$sp:(Lzio/telemetry/opentracing/OpenTracing$$anon$11;Lio/opentracing/Span;Lio/opentracing/propagation/Format;Ljava/lang/Object;)Lscala/runtime/java8/JFunction0$mcV$sp;
      13: aload_3
      14: invokevirtual #132                // Method zio/ZIO$.succeed:(Lscala/Function0;Ljava/lang/Object;)Lzio/ZIO;
      17: invokedynamic #871,  0            // InvokeDynamic #58:apply:()Lscala/Function1;
      22: aload_3
      23: invokeinterface #103,  3          // InterfaceMethod zio/ZIO.map:(Lscala/Function1;Ljava/lang/Object;)Lzio/ZIO;
      28: areturn

  public static final io.opentracing.Span $anonfun$setBaggageItem$2(java.lang.String, java.lang.String, io.opentracing.Span);
    Code:
       0: aload_2
       1: aload_0
       2: aload_1
       3: invokeinterface #877,  3          // InterfaceMethod io/opentracing/Span.setBaggageItem:(Ljava/lang/String;Ljava/lang/String;)Lio/opentracing/Span;
       8: areturn

  public static final zio.ZIO $anonfun$setBaggageItem$1(zio.telemetry.opentracing.OpenTracing$$anon$11, java.lang.Object, java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #74                 // Method getCurrentSpan:(Ljava/lang/Object;)Lzio/ZIO;
       5: aload_2
       6: aload_3
       7: invokedynamic #882,  0            // InvokeDynamic #59:apply:(Ljava/lang/String;Ljava/lang/String;)Lscala/Function1;
      12: aload_1
      13: invokeinterface #103,  3          // InterfaceMethod zio/ZIO.map:(Lscala/Function1;Ljava/lang/Object;)Lzio/ZIO;
      18: areturn

  public static final java.lang.String $anonfun$getBaggageItem$2(io.opentracing.Span, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #889,  2          // InterfaceMethod io/opentracing/Span.getBaggageItem:(Ljava/lang/String;)Ljava/lang/String;
       7: areturn

  public static final scala.Option $anonfun$getBaggageItem$3(java.lang.String);
    Code:
       0: getstatic     #897                // Field scala/Option$.MODULE$:Lscala/Option$;
       3: aload_0
       4: invokevirtual #900                // Method scala/Option$.apply:(Ljava/lang/Object;)Lscala/Option;
       7: areturn

  public static final scala.Option $anonfun$getBaggageItem$4(scala.Option);
    Code:
       0: aload_0
       1: areturn

  public static final zio.ZIO $anonfun$getBaggageItem$1(java.lang.String, java.lang.Object, io.opentracing.Span);
    Code:
       0: getstatic     #116                // Field zio/ZIO$.MODULE$:Lzio/ZIO$;
       3: aload_2
       4: aload_0
       5: invokedynamic #910,  0            // InvokeDynamic #60:apply:(Lio/opentracing/Span;Ljava/lang/String;)Lscala/Function0;
      10: aload_1
      11: invokevirtual #132                // Method zio/ZIO$.succeed:(Lscala/Function0;Ljava/lang/Object;)Lzio/ZIO;
      14: invokedynamic #915,  0            // InvokeDynamic #61:apply:()Lscala/Function1;
      19: aload_1
      20: invokeinterface #103,  3          // InterfaceMethod zio/ZIO.map:(Lscala/Function1;Ljava/lang/Object;)Lzio/ZIO;
      25: invokedynamic #920,  0            // InvokeDynamic #62:apply:()Lscala/Function1;
      30: aload_1
      31: invokeinterface #103,  3          // InterfaceMethod zio/ZIO.map:(Lscala/Function1;Ljava/lang/Object;)Lzio/ZIO;
      36: areturn

  public zio.telemetry.opentracing.OpenTracing$$anon$11(zio.FiberRef, zio.ZIO, io.opentracing.Tracer);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #64                 // Field currentSpan$1:Lzio/FiberRef;
       5: aload_0
       6: aload_2
       7: putfield      #170                // Field currentMicros$1:Lzio/ZIO;
      10: aload_0
      11: aload_3
      12: putfield      #550                // Field tracer$1:Lio/opentracing/Tracer;
      15: aload_0
      16: invokespecial #923                // Method java/lang/Object."<init>":()V
      19: aload_0
      20: invokestatic  #926                // InterfaceMethod zio/telemetry/opentracing/OpenTracing.$init$:(Lzio/telemetry/opentracing/OpenTracing;)V
      23: return

  public static final zio.ZIO $anonfun$finish$1$adapted(io.opentracing.Span, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #932                // Method scala/runtime/BoxesRunTime.unboxToLong:(Ljava/lang/Object;)J
       6: invokestatic  #934                // Method $anonfun$finish$1:(Lio/opentracing/Span;Ljava/lang/Object;J)Lzio/ZIO;
       9: areturn

  public static final java.lang.Object $anonfun$error$6$adapted(scala.Option);
    Code:
       0: aload_0
       1: invokestatic  #936                // Method $anonfun$error$6:(Lscala/Option;)V
       4: getstatic     #941                // Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
       7: areturn

  public static final io.opentracing.Span $anonfun$log$3$adapted(scala.collection.immutable.Map, io.opentracing.Span, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #932                // Method scala/runtime/BoxesRunTime.unboxToLong:(Ljava/lang/Object;)J
       6: invokestatic  #943                // Method $anonfun$log$3:(Lscala/collection/immutable/Map;Lio/opentracing/Span;J)Lio/opentracing/Span;
       9: areturn

  public static final io.opentracing.Span $anonfun$log$6$adapted(java.lang.String, io.opentracing.Span, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #932                // Method scala/runtime/BoxesRunTime.unboxToLong:(Ljava/lang/Object;)J
       6: invokestatic  #945                // Method $anonfun$log$6:(Ljava/lang/String;Lio/opentracing/Span;J)Lio/opentracing/Span;
       9: areturn

  public static final java.lang.Object $anonfun$inject$3$adapted(scala.runtime.BoxedUnit);
    Code:
       0: aload_0
       1: invokestatic  #947                // Method $anonfun$inject$3:(Lscala/runtime/BoxedUnit;)V
       4: getstatic     #941                // Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
       7: areturn

  private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda);
    Code:
       0: aload_0
       1: invokedynamic #959,  0            // InvokeDynamic #63:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
       6: areturn
}
