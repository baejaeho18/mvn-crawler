Compiled from "OpenTracing.scala"
public interface zio.telemetry.opentracing.OpenTracing {
  public static zio.ZIO<zio.Scope, scala.runtime.Nothing$, zio.telemetry.opentracing.OpenTracing> scoped(io.opentracing.Tracer, java.lang.String);
    Code:
       0: getstatic     #22                 // Field zio/telemetry/opentracing/OpenTracing$.MODULE$:Lzio/telemetry/opentracing/OpenTracing$;
       3: aload_0
       4: aload_1
       5: invokevirtual #24                 // Method zio/telemetry/opentracing/OpenTracing$.scoped:(Lio/opentracing/Tracer;Ljava/lang/String;)Lzio/ZIO;
       8: areturn

  public static java.lang.String live$default$1();
    Code:
       0: getstatic     #22                 // Field zio/telemetry/opentracing/OpenTracing$.MODULE$:Lzio/telemetry/opentracing/OpenTracing$;
       3: invokevirtual #28                 // Method zio/telemetry/opentracing/OpenTracing$.live$default$1:()Ljava/lang/String;
       6: areturn

  public static zio.ZLayer<io.opentracing.Tracer, scala.runtime.Nothing$, zio.telemetry.opentracing.OpenTracing> live(java.lang.String);
    Code:
       0: getstatic     #22                 // Field zio/telemetry/opentracing/OpenTracing$.MODULE$:Lzio/telemetry/opentracing/OpenTracing$;
       3: aload_0
       4: invokevirtual #33                 // Method zio/telemetry/opentracing/OpenTracing$.live:(Ljava/lang/String;)Lzio/ZLayer;
       7: areturn

  public static zio.ZLayer<java.lang.Object, scala.runtime.Nothing$, zio.telemetry.opentracing.OpenTracing> noop();
    Code:
       0: getstatic     #22                 // Field zio/telemetry/opentracing/OpenTracing$.MODULE$:Lzio/telemetry/opentracing/OpenTracing$;
       3: invokevirtual #38                 // Method zio/telemetry/opentracing/OpenTracing$.noop:()Lzio/ZLayer;
       6: areturn

  public abstract zio.telemetry.opentracing.OpenTracing$aspects$ aspects();

  public abstract zio.ZIO<java.lang.Object, scala.runtime.Nothing$, io.opentracing.Span> getCurrentSpan(java.lang.Object);

  public abstract zio.ZIO<java.lang.Object, scala.runtime.Nothing$, io.opentracing.SpanContext> getCurrentSpanContext(java.lang.Object);

  public abstract zio.ZIO<java.lang.Object, scala.runtime.Nothing$, scala.runtime.BoxedUnit> error(io.opentracing.Span, zio.Cause<?>, boolean, boolean, java.lang.Object);

  public static boolean error$default$3$(zio.telemetry.opentracing.OpenTracing);
    Code:
       0: aload_0
       1: invokespecial #60                 // InterfaceMethod error$default$3:()Z
       4: ireturn

  public default boolean error$default$3();
    Code:
       0: iconst_1
       1: ireturn

  public static boolean error$default$4$(zio.telemetry.opentracing.OpenTracing);
    Code:
       0: aload_0
       1: invokespecial #66                 // InterfaceMethod error$default$4:()Z
       4: ireturn

  public default boolean error$default$4();
    Code:
       0: iconst_1
       1: ireturn

  public abstract zio.ZIO<java.lang.Object, scala.runtime.Nothing$, scala.runtime.BoxedUnit> finish(io.opentracing.Span, java.lang.Object);

  public abstract <R, E, A> zio.ZIO<R, E, A> log(scala.collection.immutable.Map<java.lang.String, ?>, scala.Function0<zio.ZIO<R, E, A>>, java.lang.Object);

  public abstract <R, E, A> zio.ZIO<R, E, A> log(java.lang.String, scala.Function0<zio.ZIO<R, E, A>>, java.lang.Object);

  public abstract <R, E, A> zio.ZIO<R, E, A> root(java.lang.String, boolean, boolean, scala.Function0<zio.ZIO<R, E, A>>, java.lang.Object);

  public static boolean root$default$2$(zio.telemetry.opentracing.OpenTracing);
    Code:
       0: aload_0
       1: invokespecial #85                 // InterfaceMethod root$default$2:()Z
       4: ireturn

  public default <R, E, A> boolean root$default$2();
    Code:
       0: iconst_1
       1: ireturn

  public static boolean root$default$3$(zio.telemetry.opentracing.OpenTracing);
    Code:
       0: aload_0
       1: invokespecial #90                 // InterfaceMethod root$default$3:()Z
       4: ireturn

  public default <R, E, A> boolean root$default$3();
    Code:
       0: iconst_1
       1: ireturn

  public abstract <R, E, A> zio.ZIO<R, E, A> span(java.lang.String, boolean, boolean, scala.Function0<zio.ZIO<R, E, A>>, java.lang.Object);

  public static boolean span$default$2$(zio.telemetry.opentracing.OpenTracing);
    Code:
       0: aload_0
       1: invokespecial #94                 // InterfaceMethod span$default$2:()Z
       4: ireturn

  public default <R, E, A> boolean span$default$2();
    Code:
       0: iconst_1
       1: ireturn

  public static boolean span$default$3$(zio.telemetry.opentracing.OpenTracing);
    Code:
       0: aload_0
       1: invokespecial #98                 // InterfaceMethod span$default$3:()Z
       4: ireturn

  public default <R, E, A> boolean span$default$3();
    Code:
       0: iconst_1
       1: ireturn

  public abstract <R, E, S, C> zio.ZIO<R, E, S> spanFrom(io.opentracing.propagation.Format<C>, C, java.lang.String, boolean, boolean, scala.Function0<zio.ZIO<R, E, S>>, java.lang.Object);

  public static boolean spanFrom$default$4$(zio.telemetry.opentracing.OpenTracing);
    Code:
       0: aload_0
       1: invokespecial #107                // InterfaceMethod spanFrom$default$4:()Z
       4: ireturn

  public default <R, E, S, C> boolean spanFrom$default$4();
    Code:
       0: iconst_1
       1: ireturn

  public static boolean spanFrom$default$5$(zio.telemetry.opentracing.OpenTracing);
    Code:
       0: aload_0
       1: invokespecial #112                // InterfaceMethod spanFrom$default$5:()Z
       4: ireturn

  public default <R, E, S, C> boolean spanFrom$default$5();
    Code:
       0: iconst_1
       1: ireturn

  public abstract <R, E, A> zio.ZIO<R, E, A> tag(java.lang.String, java.lang.String, scala.Function0<zio.ZIO<R, E, A>>, java.lang.Object);

  public abstract <R, E, A> zio.ZIO<R, E, A> tag(java.lang.String, int, scala.Function0<zio.ZIO<R, E, A>>, java.lang.Object);

  public abstract <R, E, A> zio.ZIO<R, E, A> tag(java.lang.String, boolean, scala.Function0<zio.ZIO<R, E, A>>, java.lang.Object);

  public abstract <C> zio.ZIO<java.lang.Object, scala.runtime.Nothing$, scala.runtime.BoxedUnit> inject(io.opentracing.propagation.Format<C>, C, java.lang.Object);

  public abstract <R, E, A> zio.ZIO<R, E, A> setBaggageItem(java.lang.String, java.lang.String, scala.Function0<zio.ZIO<R, E, A>>, java.lang.Object);

  public abstract zio.ZIO<java.lang.Object, scala.runtime.Nothing$, scala.Option<java.lang.String>> getBaggageItem(java.lang.String, java.lang.Object);

  public static void $init$(zio.telemetry.opentracing.OpenTracing);
    Code:
       0: return
}
