Compiled from "HikariDataSourceFactory.java"
public final class net.leanix.dropkit.persistence.pool.HikariDataSourceFactory extends io.dropwizard.db.DataSourceFactory {
  public boolean jdbc4Driver;

  public java.lang.String dataSourceClassName;

  public java.lang.String poolName;

  private java.lang.String driverClass;

  private java.lang.String url;

  public net.leanix.dropkit.persistence.pool.HikariDataSourceFactory();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method io/dropwizard/db/DataSourceFactory."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field jdbc4Driver:Z
       9: aload_0
      10: aconst_null
      11: putfield      #3                  // Field driverClass:Ljava/lang/String;
      14: aload_0
      15: aconst_null
      16: putfield      #4                  // Field url:Ljava/lang/String;
      19: return

  public io.dropwizard.db.ManagedDataSource build(com.codahale.metrics.MetricRegistry, java.lang.String);
    Code:
       0: new           #5                  // class java/util/Properties
       3: dup
       4: invokespecial #6                  // Method java/util/Properties."<init>":()V
       7: astore_3
       8: aload_0
       9: invokevirtual #7                  // Method getProperties:()Ljava/util/Map;
      12: invokeinterface #8,  1            // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      17: invokeinterface #9,  1            // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      22: astore        4
      24: aload         4
      26: invokeinterface #10,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      31: ifeq          92
      34: aload         4
      36: invokeinterface #11,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      41: checkcast     #12                 // class java/util/Map$Entry
      44: astore        5
      46: aload         5
      48: invokeinterface #13,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      53: checkcast     #14                 // class java/lang/String
      56: ldc           #15                 // String dataSource.
      58: invokevirtual #16                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      61: ifeq          89
      64: aload_3
      65: aload         5
      67: invokeinterface #13,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      72: checkcast     #14                 // class java/lang/String
      75: aload         5
      77: invokeinterface #17,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      82: checkcast     #14                 // class java/lang/String
      85: invokevirtual #18                 // Method java/util/Properties.setProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
      88: pop
      89: goto          24
      92: new           #19                 // class com/zaxxer/hikari/HikariConfig
      95: dup
      96: aload_3
      97: invokespecial #20                 // Method com/zaxxer/hikari/HikariConfig."<init>":(Ljava/util/Properties;)V
     100: astore        4
     102: aload         4
     104: aload_0
     105: invokevirtual #21                 // Method getUser:()Ljava/lang/String;
     108: invokevirtual #22                 // Method com/zaxxer/hikari/HikariConfig.setUsername:(Ljava/lang/String;)V
     111: aload         4
     113: aload_0
     114: invokevirtual #23                 // Method getPassword:()Ljava/lang/String;
     117: invokevirtual #24                 // Method com/zaxxer/hikari/HikariConfig.setPassword:(Ljava/lang/String;)V
     120: aload_0
     121: invokevirtual #25                 // Method getAutoCommitByDefault:()Ljava/lang/Boolean;
     124: ifnull        139
     127: aload         4
     129: aload_0
     130: invokevirtual #25                 // Method getAutoCommitByDefault:()Ljava/lang/Boolean;
     133: invokevirtual #26                 // Method java/lang/Boolean.booleanValue:()Z
     136: invokevirtual #27                 // Method com/zaxxer/hikari/HikariConfig.setAutoCommit:(Z)V
     139: aload_0
     140: invokevirtual #28                 // Method getReadOnlyByDefault:()Ljava/lang/Boolean;
     143: ifnull        158
     146: aload         4
     148: aload_0
     149: invokevirtual #28                 // Method getReadOnlyByDefault:()Ljava/lang/Boolean;
     152: invokevirtual #26                 // Method java/lang/Boolean.booleanValue:()Z
     155: invokevirtual #29                 // Method com/zaxxer/hikari/HikariConfig.setReadOnly:(Z)V
     158: aload         4
     160: aload_0
     161: invokevirtual #30                 // Method getDefaultCatalog:()Ljava/lang/String;
     164: invokevirtual #31                 // Method com/zaxxer/hikari/HikariConfig.setCatalog:(Ljava/lang/String;)V
     167: aconst_null
     168: astore        5
     170: getstatic     #32                 // Field net/leanix/dropkit/persistence/pool/HikariDataSourceFactory$1.$SwitchMap$io$dropwizard$db$DataSourceFactory$TransactionIsolation:[I
     173: aload_0
     174: invokevirtual #33                 // Method getDefaultTransactionIsolation:()Lio/dropwizard/db/DataSourceFactory$TransactionIsolation;
     177: invokevirtual #34                 // Method io/dropwizard/db/DataSourceFactory$TransactionIsolation.ordinal:()I
     180: iaload
     181: tableswitch   { // 1 to 5
                     1: 216
                     2: 223
                     3: 230
                     4: 237
                     5: 244
               default: 248
          }
     216: ldc           #35                 // String TRANSACTION_NONE
     218: astore        5
     220: goto          248
     223: ldc           #36                 // String TRANSACTION_READ_UNCOMMITTED
     225: astore        5
     227: goto          248
     230: ldc           #37                 // String TRANSACTION_READ_COMMITTED
     232: astore        5
     234: goto          248
     237: ldc           #38                 // String TRANSACTION_REPEATABLE_READ
     239: astore        5
     241: goto          248
     244: ldc           #39                 // String TRANSACTION_SERIALIZABLE
     246: astore        5
     248: aload         5
     250: ifnull        260
     253: aload         4
     255: aload         5
     257: invokevirtual #40                 // Method com/zaxxer/hikari/HikariConfig.setTransactionIsolation:(Ljava/lang/String;)V
     260: aload         4
     262: aload_0
     263: invokevirtual #41                 // Method getMaxSize:()I
     266: invokevirtual #42                 // Method com/zaxxer/hikari/HikariConfig.setMaximumPoolSize:(I)V
     269: aload         4
     271: aload_0
     272: invokevirtual #43                 // Method getInitializationQuery:()Ljava/lang/String;
     275: invokevirtual #44                 // Method com/zaxxer/hikari/HikariConfig.setConnectionInitSql:(Ljava/lang/String;)V
     278: aload         4
     280: aload_0
     281: invokevirtual #45                 // Method getMaxConnectionAge:()Ljava/util/Optional;
     284: ldc2_w        #46                 // long 30l
     287: invokestatic  #48                 // Method io/dropwizard/util/Duration.minutes:(J)Lio/dropwizard/util/Duration;
     290: invokevirtual #49                 // Method java/util/Optional.orElse:(Ljava/lang/Object;)Ljava/lang/Object;
     293: checkcast     #50                 // class io/dropwizard/util/Duration
     296: invokevirtual #51                 // Method io/dropwizard/util/Duration.toMilliseconds:()J
     299: invokevirtual #52                 // Method com/zaxxer/hikari/HikariConfig.setMaxLifetime:(J)V
     302: aload         4
     304: aload_0
     305: invokevirtual #53                 // Method getMaxWaitForConnection:()Lio/dropwizard/util/Duration;
     308: invokevirtual #51                 // Method io/dropwizard/util/Duration.toMilliseconds:()J
     311: invokevirtual #54                 // Method com/zaxxer/hikari/HikariConfig.setConnectionTimeout:(J)V
     314: aload         4
     316: lconst_1
     317: invokestatic  #55                 // Method io/dropwizard/util/Duration.seconds:(J)Lio/dropwizard/util/Duration;
     320: invokevirtual #51                 // Method io/dropwizard/util/Duration.toMilliseconds:()J
     323: invokevirtual #56                 // Method com/zaxxer/hikari/HikariConfig.setValidationTimeout:(J)V
     326: aload         4
     328: aload_1
     329: invokevirtual #57                 // Method com/zaxxer/hikari/HikariConfig.setMetricRegistry:(Ljava/lang/Object;)V
     332: aload         4
     334: aload_0
     335: getfield      #58                 // Field dataSourceClassName:Ljava/lang/String;
     338: invokevirtual #59                 // Method com/zaxxer/hikari/HikariConfig.setDataSourceClassName:(Ljava/lang/String;)V
     341: aload_0
     342: getfield      #60                 // Field poolName:Ljava/lang/String;
     345: ifnull        357
     348: aload         4
     350: aload_0
     351: getfield      #60                 // Field poolName:Ljava/lang/String;
     354: invokevirtual #61                 // Method com/zaxxer/hikari/HikariConfig.setPoolName:(Ljava/lang/String;)V
     357: new           #62                 // class net/leanix/dropkit/persistence/pool/ManagedHikariDataSource
     360: dup
     361: aload         4
     363: invokespecial #63                 // Method net/leanix/dropkit/persistence/pool/ManagedHikariDataSource."<init>":(Lcom/zaxxer/hikari/HikariConfig;)V
     366: areturn
}
