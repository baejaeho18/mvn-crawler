Compiled from "FastCollection.java"
class javolution.util.FastCollection$Shared$ListArrayIterator implements java.util.Iterator {
  private final java.lang.Object[] _elements;

  private int _index;

  private int _removed;

  final javolution.util.FastCollection$Shared this$1;

  public javolution.util.FastCollection$Shared$ListArrayIterator(javolution.util.FastCollection$Shared, java.lang.Object[]);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$1:Ljavolution/util/FastCollection$Shared;
       5: aload_0
       6: invokespecial #2                  // Method java/lang/Object."<init>":()V
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field _elements:[Ljava/lang/Object;
      14: return

  public boolean hasNext();
    Code:
       0: aload_0
       1: getfield      #4                  // Field _index:I
       4: aload_0
       5: getfield      #3                  // Field _elements:[Ljava/lang/Object;
       8: arraylength
       9: if_icmpge     16
      12: iconst_1
      13: goto          17
      16: iconst_0
      17: ireturn

  public java.lang.Object next();
    Code:
       0: aload_0
       1: getfield      #3                  // Field _elements:[Ljava/lang/Object;
       4: aload_0
       5: dup
       6: getfield      #4                  // Field _index:I
       9: dup_x1
      10: iconst_1
      11: iadd
      12: putfield      #4                  // Field _index:I
      15: aaload
      16: areturn

  public void remove();
    Code:
       0: aload_0
       1: getfield      #4                  // Field _index:I
       4: ifne          15
       7: new           #5                  // class java/lang/IllegalStateException
      10: dup
      11: invokespecial #6                  // Method java/lang/IllegalStateException."<init>":()V
      14: athrow
      15: aload_0
      16: getfield      #3                  // Field _elements:[Ljava/lang/Object;
      19: aload_0
      20: getfield      #4                  // Field _index:I
      23: iconst_1
      24: isub
      25: aaload
      26: astore_1
      27: aload_1
      28: invokestatic  #7                  // Method javolution/util/FastCollection.access$100:()Ljava/lang/Object;
      31: if_acmpne     42
      34: new           #5                  // class java/lang/IllegalStateException
      37: dup
      38: invokespecial #6                  // Method java/lang/IllegalStateException."<init>":()V
      41: athrow
      42: aload_0
      43: getfield      #3                  // Field _elements:[Ljava/lang/Object;
      46: aload_0
      47: getfield      #4                  // Field _index:I
      50: iconst_1
      51: isub
      52: invokestatic  #7                  // Method javolution/util/FastCollection.access$100:()Ljava/lang/Object;
      55: aastore
      56: aload_0
      57: dup
      58: getfield      #8                  // Field _removed:I
      61: iconst_1
      62: iadd
      63: putfield      #8                  // Field _removed:I
      66: aload_0
      67: getfield      #1                  // Field this$1:Ljavolution/util/FastCollection$Shared;
      70: dup
      71: astore_2
      72: monitorenter
      73: aload_0
      74: getfield      #1                  // Field this$1:Ljavolution/util/FastCollection$Shared;
      77: getfield      #9                  // Field javolution/util/FastCollection$Shared.this$0:Ljavolution/util/FastCollection;
      80: checkcast     #10                 // class java/util/List
      83: aload_0
      84: getfield      #4                  // Field _index:I
      87: aload_0
      88: getfield      #8                  // Field _removed:I
      91: isub
      92: invokeinterface #11,  2           // InterfaceMethod java/util/List.remove:(I)Ljava/lang/Object;
      97: pop
      98: aload_2
      99: monitorexit
     100: goto          108
     103: astore_3
     104: aload_2
     105: monitorexit
     106: aload_3
     107: athrow
     108: return
    Exception table:
       from    to  target type
          73   100   103   any
         103   106   103   any
}
