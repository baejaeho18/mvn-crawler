Compiled from "FastMap.java"
final class javolution.util.FastMap$Unmodifiable implements java.util.Map,java.io.Serializable {
  final javolution.util.FastMap this$0;

  private javolution.util.FastMap$Unmodifiable(javolution.util.FastMap);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2                  // Field this$0:Ljavolution/util/FastMap;
       5: aload_0
       6: invokespecial #3                  // Method java/lang/Object."<init>":()V
       9: return

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #2                  // Field this$0:Ljavolution/util/FastMap;
       4: aload_1
       5: invokevirtual #4                  // Method javolution/util/FastMap.equals:(Ljava/lang/Object;)Z
       8: ireturn

  public int hashCode();
    Code:
       0: aload_0
       1: getfield      #2                  // Field this$0:Ljavolution/util/FastMap;
       4: invokevirtual #5                  // Method javolution/util/FastMap.hashCode:()I
       7: ireturn

  public javolution.text.Text toText();
    Code:
       0: aload_0
       1: getfield      #2                  // Field this$0:Ljavolution/util/FastMap;
       4: invokevirtual #6                  // Method javolution/util/FastMap.toText:()Ljavolution/text/Text;
       7: areturn

  public int size();
    Code:
       0: aload_0
       1: getfield      #2                  // Field this$0:Ljavolution/util/FastMap;
       4: invokevirtual #7                  // Method javolution/util/FastMap.size:()I
       7: ireturn

  public boolean isEmpty();
    Code:
       0: aload_0
       1: getfield      #2                  // Field this$0:Ljavolution/util/FastMap;
       4: invokevirtual #8                  // Method javolution/util/FastMap.isEmpty:()Z
       7: ireturn

  public boolean containsKey(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #2                  // Field this$0:Ljavolution/util/FastMap;
       4: aload_1
       5: invokevirtual #9                  // Method javolution/util/FastMap.containsKey:(Ljava/lang/Object;)Z
       8: ireturn

  public boolean containsValue(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #2                  // Field this$0:Ljavolution/util/FastMap;
       4: aload_1
       5: invokevirtual #10                 // Method javolution/util/FastMap.containsValue:(Ljava/lang/Object;)Z
       8: ireturn

  public java.lang.Object get(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #2                  // Field this$0:Ljavolution/util/FastMap;
       4: aload_1
       5: invokevirtual #11                 // Method javolution/util/FastMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
       8: areturn

  public java.lang.Object put(java.lang.Object, java.lang.Object);
    Code:
       0: new           #12                 // class java/lang/UnsupportedOperationException
       3: dup
       4: ldc           #13                 // String Unmodifiable map
       6: invokespecial #14                 // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
       9: athrow

  public java.lang.Object remove(java.lang.Object);
    Code:
       0: new           #12                 // class java/lang/UnsupportedOperationException
       3: dup
       4: ldc           #13                 // String Unmodifiable map
       6: invokespecial #14                 // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
       9: athrow

  public void putAll(java.util.Map);
    Code:
       0: new           #12                 // class java/lang/UnsupportedOperationException
       3: dup
       4: ldc           #13                 // String Unmodifiable map
       6: invokespecial #14                 // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
       9: athrow

  public void clear();
    Code:
       0: new           #12                 // class java/lang/UnsupportedOperationException
       3: dup
       4: ldc           #13                 // String Unmodifiable map
       6: invokespecial #14                 // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
       9: athrow

  public java.util.Set keySet();
    Code:
       0: aload_0
       1: getfield      #2                  // Field this$0:Ljavolution/util/FastMap;
       4: invokevirtual #15                 // Method javolution/util/FastMap.keySet:()Ljava/util/Set;
       7: checkcast     #16                 // class javolution/util/FastMap$KeySet
      10: invokevirtual #17                 // Method javolution/util/FastMap$KeySet.unmodifiable:()Ljava/util/Collection;
      13: checkcast     #18                 // class java/util/Set
      16: areturn

  public java.util.Collection values();
    Code:
       0: aload_0
       1: getfield      #2                  // Field this$0:Ljavolution/util/FastMap;
       4: invokevirtual #19                 // Method javolution/util/FastMap.values:()Ljava/util/Collection;
       7: checkcast     #20                 // class javolution/util/FastMap$Values
      10: invokevirtual #21                 // Method javolution/util/FastMap$Values.unmodifiable:()Ljava/util/Collection;
      13: areturn

  public java.util.Set entrySet();
    Code:
       0: new           #12                 // class java/lang/UnsupportedOperationException
       3: dup
       4: ldc           #22                 // String Direct view over unmodifiable map entries is not supported  (to prevent access to Entry.setValue(Object) method). To iterate over unmodifiable map entries, applications may use the keySet() and values() fast collection views in conjonction.
       6: invokespecial #14                 // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
       9: athrow

  javolution.util.FastMap$Unmodifiable(javolution.util.FastMap, javolution.util.FastMap$1);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method "<init>":(Ljavolution/util/FastMap;)V
       5: return
}
