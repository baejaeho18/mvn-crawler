Compiled from "FastTable.java"
final class javolution.util.FastTable$SubTable extends javolution.util.FastCollection implements java.util.List,java.util.RandomAccess {
  private static final javolution.context.ObjectFactory FACTORY;

  private javolution.util.FastTable _table;

  private int _offset;

  private int _size;

  private javolution.util.FastTable$SubTable();
    Code:
       0: aload_0
       1: invokespecial #3                  // Method javolution/util/FastCollection."<init>":()V
       4: return

  public static javolution.util.FastTable$SubTable valueOf(javolution.util.FastTable, int, int);
    Code:
       0: getstatic     #4                  // Field FACTORY:Ljavolution/context/ObjectFactory;
       3: invokevirtual #5                  // Method javolution/context/ObjectFactory.object:()Ljava/lang/Object;
       6: checkcast     #6                  // class javolution/util/FastTable$SubTable
       9: astore_3
      10: aload_3
      11: aload_0
      12: putfield      #1                  // Field _table:Ljavolution/util/FastTable;
      15: aload_3
      16: iload_1
      17: putfield      #7                  // Field _offset:I
      20: aload_3
      21: iload_2
      22: putfield      #8                  // Field _size:I
      25: aload_3
      26: areturn

  public int size();
    Code:
       0: aload_0
       1: getfield      #8                  // Field _size:I
       4: ireturn

  public javolution.util.FastCollection$Record head();
    Code:
       0: iconst_m1
       1: invokestatic  #9                  // Method javolution/util/Index.valueOf:(I)Ljavolution/util/Index;
       4: areturn

  public javolution.util.FastCollection$Record tail();
    Code:
       0: aload_0
       1: getfield      #8                  // Field _size:I
       4: invokestatic  #9                  // Method javolution/util/Index.valueOf:(I)Ljavolution/util/Index;
       7: areturn

  public java.lang.Object valueOf(javolution.util.FastCollection$Record);
    Code:
       0: aload_0
       1: getfield      #1                  // Field _table:Ljavolution/util/FastTable;
       4: aload_1
       5: checkcast     #10                 // class javolution/util/Index
       8: invokevirtual #11                 // Method javolution/util/Index.intValue:()I
      11: aload_0
      12: getfield      #7                  // Field _offset:I
      15: iadd
      16: invokevirtual #12                 // Method javolution/util/FastTable.get:(I)Ljava/lang/Object;
      19: areturn

  public void delete(javolution.util.FastCollection$Record);
    Code:
       0: new           #13                 // class java/lang/UnsupportedOperationException
       3: dup
       4: ldc           #14                 // String Deletion not supported, thread-safe collections.
       6: invokespecial #15                 // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
       9: athrow

  public boolean addAll(int, java.util.Collection);
    Code:
       0: new           #13                 // class java/lang/UnsupportedOperationException
       3: dup
       4: ldc           #16                 // String Insertion not supported, thread-safe collections.
       6: invokespecial #15                 // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
       9: athrow

  public java.lang.Object get(int);
    Code:
       0: iload_1
       1: iflt          12
       4: iload_1
       5: aload_0
       6: getfield      #8                  // Field _size:I
       9: if_icmplt     39
      12: new           #17                 // class java/lang/IndexOutOfBoundsException
      15: dup
      16: new           #18                 // class java/lang/StringBuilder
      19: dup
      20: invokespecial #19                 // Method java/lang/StringBuilder."<init>":()V
      23: ldc           #20                 // String index:
      25: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      28: iload_1
      29: invokevirtual #22                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      32: invokevirtual #23                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      35: invokespecial #24                 // Method java/lang/IndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
      38: athrow
      39: aload_0
      40: getfield      #1                  // Field _table:Ljavolution/util/FastTable;
      43: iload_1
      44: aload_0
      45: getfield      #7                  // Field _offset:I
      48: iadd
      49: invokevirtual #12                 // Method javolution/util/FastTable.get:(I)Ljava/lang/Object;
      52: areturn

  public java.lang.Object set(int, java.lang.Object);
    Code:
       0: iload_1
       1: iflt          12
       4: iload_1
       5: aload_0
       6: getfield      #8                  // Field _size:I
       9: if_icmplt     39
      12: new           #17                 // class java/lang/IndexOutOfBoundsException
      15: dup
      16: new           #18                 // class java/lang/StringBuilder
      19: dup
      20: invokespecial #19                 // Method java/lang/StringBuilder."<init>":()V
      23: ldc           #20                 // String index:
      25: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      28: iload_1
      29: invokevirtual #22                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      32: invokevirtual #23                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      35: invokespecial #24                 // Method java/lang/IndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
      38: athrow
      39: aload_0
      40: getfield      #1                  // Field _table:Ljavolution/util/FastTable;
      43: iload_1
      44: aload_0
      45: getfield      #7                  // Field _offset:I
      48: iadd
      49: aload_2
      50: invokevirtual #25                 // Method javolution/util/FastTable.set:(ILjava/lang/Object;)Ljava/lang/Object;
      53: areturn

  public void add(int, java.lang.Object);
    Code:
       0: new           #13                 // class java/lang/UnsupportedOperationException
       3: dup
       4: ldc           #16                 // String Insertion not supported, thread-safe collections.
       6: invokespecial #15                 // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
       9: athrow

  public java.lang.Object remove(int);
    Code:
       0: new           #13                 // class java/lang/UnsupportedOperationException
       3: dup
       4: ldc           #14                 // String Deletion not supported, thread-safe collections.
       6: invokespecial #15                 // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
       9: athrow

  public int indexOf(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #1                  // Field _table:Ljavolution/util/FastTable;
       4: invokevirtual #26                 // Method javolution/util/FastTable.getValueComparator:()Ljavolution/util/FastComparator;
       7: astore_2
       8: iconst_m1
       9: istore_3
      10: iinc          3, 1
      13: iload_3
      14: aload_0
      15: getfield      #8                  // Field _size:I
      18: if_icmpge     44
      21: aload_2
      22: aload_1
      23: aload_0
      24: getfield      #1                  // Field _table:Ljavolution/util/FastTable;
      27: iload_3
      28: aload_0
      29: getfield      #7                  // Field _offset:I
      32: iadd
      33: invokevirtual #12                 // Method javolution/util/FastTable.get:(I)Ljava/lang/Object;
      36: invokevirtual #27                 // Method javolution/util/FastComparator.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z
      39: ifeq          10
      42: iload_3
      43: ireturn
      44: iconst_m1
      45: ireturn

  public int lastIndexOf(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #1                  // Field _table:Ljavolution/util/FastTable;
       4: invokevirtual #26                 // Method javolution/util/FastTable.getValueComparator:()Ljavolution/util/FastComparator;
       7: astore_2
       8: aload_0
       9: getfield      #8                  // Field _size:I
      12: istore_3
      13: iinc          3, -1
      16: iload_3
      17: iflt          43
      20: aload_2
      21: aload_1
      22: aload_0
      23: getfield      #1                  // Field _table:Ljavolution/util/FastTable;
      26: iload_3
      27: aload_0
      28: getfield      #7                  // Field _offset:I
      31: iadd
      32: invokevirtual #12                 // Method javolution/util/FastTable.get:(I)Ljava/lang/Object;
      35: invokevirtual #27                 // Method javolution/util/FastComparator.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z
      38: ifeq          13
      41: iload_3
      42: ireturn
      43: iconst_m1
      44: ireturn

  public java.util.ListIterator listIterator();
    Code:
       0: aload_0
       1: iconst_0
       2: invokevirtual #28                 // Method listIterator:(I)Ljava/util/ListIterator;
       5: areturn

  public java.util.ListIterator listIterator(int);
    Code:
       0: iload_1
       1: iflt          39
       4: iload_1
       5: aload_0
       6: getfield      #8                  // Field _size:I
       9: if_icmpgt     39
      12: aload_0
      13: getfield      #1                  // Field _table:Ljavolution/util/FastTable;
      16: iload_1
      17: aload_0
      18: getfield      #7                  // Field _offset:I
      21: iadd
      22: aload_0
      23: getfield      #7                  // Field _offset:I
      26: aload_0
      27: getfield      #7                  // Field _offset:I
      30: aload_0
      31: getfield      #8                  // Field _size:I
      34: iadd
      35: invokestatic  #29                 // Method javolution/util/FastTable$FastTableIterator.valueOf:(Ljavolution/util/FastTable;III)Ljavolution/util/FastTable$FastTableIterator;
      38: areturn
      39: new           #17                 // class java/lang/IndexOutOfBoundsException
      42: dup
      43: new           #18                 // class java/lang/StringBuilder
      46: dup
      47: invokespecial #19                 // Method java/lang/StringBuilder."<init>":()V
      50: ldc           #20                 // String index:
      52: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      55: iload_1
      56: invokevirtual #22                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      59: ldc           #30                 // String  for table of size:
      61: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      64: aload_0
      65: getfield      #8                  // Field _size:I
      68: invokevirtual #22                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      71: invokevirtual #23                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      74: invokespecial #24                 // Method java/lang/IndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
      77: athrow

  public java.util.List subList(int, int);
    Code:
       0: iload_1
       1: iflt          17
       4: iload_2
       5: aload_0
       6: getfield      #8                  // Field _size:I
       9: if_icmpgt     17
      12: iload_1
      13: iload_2
      14: if_icmple     65
      17: new           #17                 // class java/lang/IndexOutOfBoundsException
      20: dup
      21: new           #18                 // class java/lang/StringBuilder
      24: dup
      25: invokespecial #19                 // Method java/lang/StringBuilder."<init>":()V
      28: ldc           #31                 // String fromIndex:
      30: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      33: iload_1
      34: invokevirtual #22                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      37: ldc           #32                 // String , toIndex:
      39: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      42: iload_2
      43: invokevirtual #22                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      46: ldc           #33                 // String  for list of size:
      48: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      51: aload_0
      52: getfield      #8                  // Field _size:I
      55: invokevirtual #22                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      58: invokevirtual #23                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      61: invokespecial #24                 // Method java/lang/IndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
      64: athrow
      65: aload_0
      66: getfield      #1                  // Field _table:Ljavolution/util/FastTable;
      69: aload_0
      70: getfield      #7                  // Field _offset:I
      73: iload_1
      74: iadd
      75: iload_2
      76: iload_1
      77: isub
      78: invokestatic  #34                 // Method valueOf:(Ljavolution/util/FastTable;II)Ljavolution/util/FastTable$SubTable;
      81: areturn

  javolution.util.FastTable$SubTable(javolution.util.FastTable$1);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method "<init>":()V
       4: return

  static javolution.util.FastTable access$502(javolution.util.FastTable$SubTable, javolution.util.FastTable);
    Code:
       0: aload_0
       1: aload_1
       2: dup_x1
       3: putfield      #1                  // Field _table:Ljavolution/util/FastTable;
       6: areturn

  static {};
    Code:
       0: new           #35                 // class javolution/util/FastTable$SubTable$1
       3: dup
       4: invokespecial #36                 // Method javolution/util/FastTable$SubTable$1."<init>":()V
       7: putstatic     #4                  // Field FACTORY:Ljavolution/context/ObjectFactory;
      10: return
}
