Compiled from "ImmortalContext.java"
public final class javolution.context.ImmortalContext extends javolution.context.AllocatorContext {
  private static final java.lang.ThreadLocal FACTORY_TO_ALLOCATOR;

  private static final java.lang.ThreadLocal ACTIVE_ALLOCATORS;

  public static void enter();
    Code:
       0: ldc_w         #2                  // class javolution/context/ImmortalContext
       3: invokestatic  #3                  // Method javolution/context/Context.enter:(Ljava/lang/Class;)V
       6: return

  public static void exit();
    Code:
       0: ldc_w         #2                  // class javolution/context/ImmortalContext
       3: invokestatic  #4                  // Method javolution/context/Context.exit:(Ljava/lang/Class;)V
       6: return

  private javolution.context.ImmortalContext();
    Code:
       0: aload_0
       1: invokespecial #5                  // Method javolution/context/AllocatorContext."<init>":()V
       4: return

  protected void deactivate();
    Code:
       0: getstatic     #6                  // Field ACTIVE_ALLOCATORS:Ljava/lang/ThreadLocal;
       3: invokevirtual #7                  // Method java/lang/ThreadLocal.get:()Ljava/lang/Object;
       6: checkcast     #8                  // class javolution/util/FastTable
       9: astore_1
      10: iconst_0
      11: istore_2
      12: aload_1
      13: invokevirtual #9                  // Method javolution/util/FastTable.size:()I
      16: istore_3
      17: iload_2
      18: iload_3
      19: if_icmpge     40
      22: aload_1
      23: iload_2
      24: iinc          2, 1
      27: invokevirtual #10                 // Method javolution/util/FastTable.get:(I)Ljava/lang/Object;
      30: checkcast     #11                 // class javolution/context/Allocator
      33: aconst_null
      34: putfield      #12                 // Field javolution/context/Allocator.user:Ljava/lang/Thread;
      37: goto          17
      40: aload_1
      41: invokevirtual #13                 // Method javolution/util/FastTable.clear:()V
      44: return

  protected javolution.context.Allocator getAllocator(javolution.context.ObjectFactory);
    Code:
       0: getstatic     #14                 // Field FACTORY_TO_ALLOCATOR:Ljava/lang/ThreadLocal;
       3: invokevirtual #7                  // Method java/lang/ThreadLocal.get:()Ljava/lang/Object;
       6: checkcast     #15                 // class javolution/util/FastMap
       9: astore_2
      10: aload_2
      11: aload_1
      12: invokevirtual #16                 // Method javolution/util/FastMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      15: checkcast     #17                 // class javolution/context/ImmortalContext$ImmortalAllocator
      18: astore_3
      19: aload_3
      20: ifnonnull     39
      23: new           #17                 // class javolution/context/ImmortalContext$ImmortalAllocator
      26: dup
      27: aload_1
      28: invokespecial #18                 // Method javolution/context/ImmortalContext$ImmortalAllocator."<init>":(Ljavolution/context/ObjectFactory;)V
      31: astore_3
      32: aload_2
      33: aload_1
      34: aload_3
      35: invokevirtual #19                 // Method javolution/util/FastMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      38: pop
      39: aload_3
      40: getfield      #20                 // Field javolution/context/ImmortalContext$ImmortalAllocator.user:Ljava/lang/Thread;
      43: ifnonnull     71
      46: aload_3
      47: invokestatic  #21                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      50: putfield      #20                 // Field javolution/context/ImmortalContext$ImmortalAllocator.user:Ljava/lang/Thread;
      53: getstatic     #6                  // Field ACTIVE_ALLOCATORS:Ljava/lang/ThreadLocal;
      56: invokevirtual #7                  // Method java/lang/ThreadLocal.get:()Ljava/lang/Object;
      59: checkcast     #8                  // class javolution/util/FastTable
      62: astore        4
      64: aload         4
      66: aload_3
      67: invokevirtual #22                 // Method javolution/util/FastTable.add:(Ljava/lang/Object;)Z
      70: pop
      71: aload_3
      72: areturn

  protected void enterAction();
    Code:
       0: aload_0
       1: invokevirtual #23                 // Method getOuter:()Ljavolution/context/Context;
       4: invokevirtual #24                 // Method javolution/context/Context.getAllocatorContext:()Ljavolution/context/AllocatorContext;
       7: invokevirtual #25                 // Method javolution/context/AllocatorContext.deactivate:()V
      10: return

  protected void exitAction();
    Code:
       0: aload_0
       1: invokevirtual #26                 // Method deactivate:()V
       4: return

  javolution.context.ImmortalContext(javolution.context.ImmortalContext$1);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method "<init>":()V
       4: return

  static {};
    Code:
       0: new           #27                 // class javolution/context/ImmortalContext$1
       3: dup
       4: invokespecial #28                 // Method javolution/context/ImmortalContext$1."<init>":()V
       7: putstatic     #14                 // Field FACTORY_TO_ALLOCATOR:Ljava/lang/ThreadLocal;
      10: new           #29                 // class javolution/context/ImmortalContext$2
      13: dup
      14: invokespecial #30                 // Method javolution/context/ImmortalContext$2."<init>":()V
      17: putstatic     #6                  // Field ACTIVE_ALLOCATORS:Ljava/lang/ThreadLocal;
      20: new           #31                 // class javolution/context/ImmortalContext$3
      23: dup
      24: invokespecial #32                 // Method javolution/context/ImmortalContext$3."<init>":()V
      27: ldc_w         #2                  // class javolution/context/ImmortalContext
      30: invokestatic  #33                 // Method javolution/context/ObjectFactory.setInstance:(Ljavolution/context/ObjectFactory;Ljava/lang/Class;)V
      33: return
}
