Compiled from "ImmortalContext.java"
final class javolution.context.ImmortalContext$ImmortalAllocator extends javolution.context.Allocator {
  private static final javax.realtime.MemoryArea IMMORTAL;

  private final javolution.context.ObjectFactory _factory;

  private java.lang.Object _allocated;

  private final java.lang.Runnable _allocate;

  private final java.lang.Runnable _resize;

  public javolution.context.ImmortalContext$ImmortalAllocator(javolution.context.ObjectFactory);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method javolution/context/Allocator."<init>":()V
       4: aload_0
       5: new           #4                  // class javolution/context/ImmortalContext$ImmortalAllocator$1
       8: dup
       9: aload_0
      10: invokespecial #5                  // Method javolution/context/ImmortalContext$ImmortalAllocator$1."<init>":(Ljavolution/context/ImmortalContext$ImmortalAllocator;)V
      13: putfield      #6                  // Field _allocate:Ljava/lang/Runnable;
      16: aload_0
      17: new           #7                  // class javolution/context/ImmortalContext$ImmortalAllocator$2
      20: dup
      21: aload_0
      22: invokespecial #8                  // Method javolution/context/ImmortalContext$ImmortalAllocator$2."<init>":(Ljavolution/context/ImmortalContext$ImmortalAllocator;)V
      25: putfield      #9                  // Field _resize:Ljava/lang/Runnable;
      28: aload_0
      29: aload_1
      30: putfield      #1                  // Field _factory:Ljavolution/context/ObjectFactory;
      33: return

  protected java.lang.Object allocate();
    Code:
       0: getstatic     #10                 // Field IMMORTAL:Ljavax/realtime/MemoryArea;
       3: aload_0
       4: getfield      #6                  // Field _allocate:Ljava/lang/Runnable;
       7: invokevirtual #11                 // Method javax/realtime/MemoryArea.executeInArea:(Ljava/lang/Runnable;)V
      10: aload_0
      11: getfield      #2                  // Field _allocated:Ljava/lang/Object;
      14: areturn

  protected void recycle(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #1                  // Field _factory:Ljavolution/context/ObjectFactory;
       4: invokevirtual #12                 // Method javolution/context/ObjectFactory.doCleanup:()Z
       7: ifeq          18
      10: aload_0
      11: getfield      #1                  // Field _factory:Ljavolution/context/ObjectFactory;
      14: aload_1
      15: invokevirtual #13                 // Method javolution/context/ObjectFactory.cleanup:(Ljava/lang/Object;)V
      18: aload_0
      19: getfield      #14                 // Field queueSize:I
      22: aload_0
      23: getfield      #15                 // Field queue:[Ljava/lang/Object;
      26: arraylength
      27: if_icmplt     40
      30: getstatic     #10                 // Field IMMORTAL:Ljavax/realtime/MemoryArea;
      33: aload_0
      34: getfield      #9                  // Field _resize:Ljava/lang/Runnable;
      37: invokevirtual #11                 // Method javax/realtime/MemoryArea.executeInArea:(Ljava/lang/Runnable;)V
      40: aload_0
      41: getfield      #15                 // Field queue:[Ljava/lang/Object;
      44: aload_0
      45: dup
      46: getfield      #14                 // Field queueSize:I
      49: dup_x1
      50: iconst_1
      51: iadd
      52: putfield      #14                 // Field queueSize:I
      55: aload_1
      56: aastore
      57: return

  public java.lang.String toString();
    Code:
       0: new           #16                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #17                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #18                 // String Immortal allocator for
       9: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: getfield      #1                  // Field _factory:Ljavolution/context/ObjectFactory;
      16: invokevirtual #20                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      19: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      22: invokevirtual #22                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      25: areturn

  static java.lang.Object access$002(javolution.context.ImmortalContext$ImmortalAllocator, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: dup_x1
       3: putfield      #2                  // Field _allocated:Ljava/lang/Object;
       6: areturn

  static javolution.context.ObjectFactory access$100(javolution.context.ImmortalContext$ImmortalAllocator);
    Code:
       0: aload_0
       1: getfield      #1                  // Field _factory:Ljavolution/context/ObjectFactory;
       4: areturn

  static {};
    Code:
       0: ldc           #23                 // String
       2: invokestatic  #24                 // Method javax/realtime/MemoryArea.getMemoryArea:(Ljava/lang/Object;)Ljavax/realtime/MemoryArea;
       5: putstatic     #10                 // Field IMMORTAL:Ljavax/realtime/MemoryArea;
       8: return
}
