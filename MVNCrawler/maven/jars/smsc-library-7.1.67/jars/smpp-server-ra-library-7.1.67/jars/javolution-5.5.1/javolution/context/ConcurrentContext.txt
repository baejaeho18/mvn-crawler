Compiled from "ConcurrentContext.java"
public abstract class javolution.context.ConcurrentContext extends javolution.context.Context {
  public static final javolution.lang.Configurable<java.lang.Integer> MAXIMUM_CONCURRENCY;

  public static final javolution.lang.Configurable<java.lang.Class<? extends javolution.context.ConcurrentContext>> DEFAULT;

  private static final javolution.context.LocalContext$Reference CONCURRENCY;

  private static int availableProcessors();
    Code:
       0: invokestatic  #2                  // Method javolution/lang/Reflection.getInstance:()Ljavolution/lang/Reflection;
       3: ldc           #3                  // String java.lang.Runtime.availableProcessors()
       5: invokevirtual #4                  // Method javolution/lang/Reflection.getMethod:(Ljava/lang/String;)Ljavolution/lang/Reflection$Method;
       8: astore_0
       9: aload_0
      10: ifnull        31
      13: aload_0
      14: invokestatic  #5                  // Method java/lang/Runtime.getRuntime:()Ljava/lang/Runtime;
      17: invokeinterface #6,  2            // InterfaceMethod javolution/lang/Reflection$Method.invoke:(Ljava/lang/Object;)Ljava/lang/Object;
      22: checkcast     #7                  // class java/lang/Integer
      25: astore_1
      26: aload_1
      27: invokevirtual #8                  // Method java/lang/Integer.intValue:()I
      30: ireturn
      31: iconst_1
      32: ireturn

  protected javolution.context.ConcurrentContext();
    Code:
       0: aload_0
       1: invokespecial #9                  // Method javolution/context/Context."<init>":()V
       4: return

  public static void enter();
    Code:
       0: getstatic     #10                 // Field DEFAULT:Ljavolution/lang/Configurable;
       3: invokevirtual #11                 // Method javolution/lang/Configurable.get:()Ljava/lang/Object;
       6: checkcast     #12                 // class java/lang/Class
       9: invokestatic  #13                 // Method javolution/context/Context.enter:(Ljava/lang/Class;)V
      12: return

  public static void enter(boolean);
    Code:
       0: iload_0
       1: ifeq          7
       4: invokestatic  #14                 // Method enter:()V
       7: return

  public static void exit();
    Code:
       0: ldc_w         #15                 // class javolution/context/ConcurrentContext
       3: invokestatic  #16                 // Method javolution/context/Context.exit:(Ljava/lang/Class;)V
       6: return

  public static void exit(boolean);
    Code:
       0: iload_0
       1: ifeq          7
       4: invokestatic  #17                 // Method exit:()V
       7: return

  public static void setConcurrency(int);
    Code:
       0: iconst_0
       1: iload_0
       2: invokestatic  #18                 // Method javolution/lang/MathLib.max:(II)I
       5: istore_0
       6: getstatic     #19                 // Field MAXIMUM_CONCURRENCY:Ljavolution/lang/Configurable;
       9: invokevirtual #11                 // Method javolution/lang/Configurable.get:()Ljava/lang/Object;
      12: checkcast     #7                  // class java/lang/Integer
      15: invokevirtual #8                  // Method java/lang/Integer.intValue:()I
      18: iload_0
      19: invokestatic  #20                 // Method javolution/lang/MathLib.min:(II)I
      22: istore_0
      23: getstatic     #1                  // Field CONCURRENCY:Ljavolution/context/LocalContext$Reference;
      26: new           #7                  // class java/lang/Integer
      29: dup
      30: iload_0
      31: invokespecial #21                 // Method java/lang/Integer."<init>":(I)V
      34: invokevirtual #22                 // Method javolution/context/LocalContext$Reference.set:(Ljava/lang/Object;)V
      37: return

  public static int getConcurrency();
    Code:
       0: getstatic     #1                  // Field CONCURRENCY:Ljavolution/context/LocalContext$Reference;
       3: invokevirtual #23                 // Method javolution/context/LocalContext$Reference.get:()Ljava/lang/Object;
       6: checkcast     #7                  // class java/lang/Integer
       9: invokevirtual #8                  // Method java/lang/Integer.intValue:()I
      12: ireturn

  public static void execute(java.lang.Runnable);
    Code:
       0: invokestatic  #24                 // Method javolution/context/Context.getCurrentContext:()Ljavolution/context/Context;
       3: checkcast     #15                 // class javolution/context/ConcurrentContext
       6: astore_1
       7: aload_1
       8: aload_0
       9: invokevirtual #25                 // Method executeAction:(Ljava/lang/Runnable;)V
      12: return

  public static void execute(java.lang.Runnable...);
    Code:
       0: invokestatic  #14                 // Method enter:()V
       3: invokestatic  #26                 // Method getCurrentContext:()Ljavolution/context/Context;
       6: checkcast     #15                 // class javolution/context/ConcurrentContext
       9: astore_1
      10: iconst_0
      11: istore_2
      12: iload_2
      13: aload_0
      14: arraylength
      15: if_icmpge     31
      18: aload_1
      19: aload_0
      20: iload_2
      21: aaload
      22: invokevirtual #25                 // Method executeAction:(Ljava/lang/Runnable;)V
      25: iinc          2, 1
      28: goto          12
      31: invokestatic  #17                 // Method exit:()V
      34: goto          43
      37: astore_3
      38: invokestatic  #17                 // Method exit:()V
      41: aload_3
      42: athrow
      43: return
    Exception table:
       from    to  target type
          10    31    37   any
          37    38    37   any

  protected abstract void executeAction(java.lang.Runnable);

  static javolution.context.LocalContext$Reference access$000();
    Code:
       0: getstatic     #1                  // Field CONCURRENCY:Ljavolution/context/LocalContext$Reference;
       3: areturn

  static {};
    Code:
       0: new           #27                 // class javolution/context/ConcurrentContext$1
       3: dup
       4: new           #7                  // class java/lang/Integer
       7: dup
       8: invokestatic  #28                 // Method availableProcessors:()I
      11: iconst_1
      12: isub
      13: invokespecial #21                 // Method java/lang/Integer."<init>":(I)V
      16: invokespecial #29                 // Method javolution/context/ConcurrentContext$1."<init>":(Ljava/lang/Object;)V
      19: putstatic     #19                 // Field MAXIMUM_CONCURRENCY:Ljavolution/lang/Configurable;
      22: new           #30                 // class javolution/context/ConcurrentContext$2
      25: dup
      26: ldc_w         #31                 // class javolution/context/ConcurrentContext$Default
      29: invokespecial #32                 // Method javolution/context/ConcurrentContext$2."<init>":(Ljava/lang/Object;)V
      32: putstatic     #10                 // Field DEFAULT:Ljavolution/lang/Configurable;
      35: new           #33                 // class javolution/context/LocalContext$Reference
      38: dup
      39: getstatic     #19                 // Field MAXIMUM_CONCURRENCY:Ljavolution/lang/Configurable;
      42: invokevirtual #11                 // Method javolution/lang/Configurable.get:()Ljava/lang/Object;
      45: invokespecial #34                 // Method javolution/context/LocalContext$Reference."<init>":(Ljava/lang/Object;)V
      48: putstatic     #1                  // Field CONCURRENCY:Ljavolution/context/LocalContext$Reference;
      51: new           #35                 // class javolution/context/ConcurrentContext$3
      54: dup
      55: invokespecial #36                 // Method javolution/context/ConcurrentContext$3."<init>":()V
      58: ldc_w         #31                 // class javolution/context/ConcurrentContext$Default
      61: invokestatic  #37                 // Method javolution/context/ObjectFactory.setInstance:(Ljavolution/context/ObjectFactory;Ljava/lang/Class;)V
      64: return
}
