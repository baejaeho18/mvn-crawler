Compiled from "Opinion.java"
public class ixa.kaflib.Opinion$OpinionExpression extends ixa.kaflib.Annotation {
  private java.lang.String polarity;

  private java.lang.String strength;

  private java.lang.String subjectivity;

  private java.lang.String sentimentSemanticType;

  private java.lang.String sentimentProductFeature;

  private ixa.kaflib.Span<ixa.kaflib.Term> span;

  ixa.kaflib.Opinion$OpinionExpression(ixa.kaflib.Span<ixa.kaflib.Term>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method ixa/kaflib/Annotation."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field span:Lixa/kaflib/Span;
       9: return

  ixa.kaflib.Opinion$OpinionExpression(ixa.kaflib.Opinion$OpinionExpression, java.util.HashMap<java.lang.String, ixa.kaflib.Term>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method ixa/kaflib/Annotation."<init>":()V
       4: aload_0
       5: aload_1
       6: getfield      #3                  // Field polarity:Ljava/lang/String;
       9: putfield      #3                  // Field polarity:Ljava/lang/String;
      12: aload_0
      13: aload_1
      14: getfield      #4                  // Field strength:Ljava/lang/String;
      17: putfield      #4                  // Field strength:Ljava/lang/String;
      20: aload_0
      21: aload_1
      22: getfield      #5                  // Field subjectivity:Ljava/lang/String;
      25: putfield      #5                  // Field subjectivity:Ljava/lang/String;
      28: aload_0
      29: aload_1
      30: getfield      #6                  // Field sentimentSemanticType:Ljava/lang/String;
      33: putfield      #6                  // Field sentimentSemanticType:Ljava/lang/String;
      36: aload_0
      37: aload_1
      38: getfield      #7                  // Field sentimentProductFeature:Ljava/lang/String;
      41: putfield      #7                  // Field sentimentProductFeature:Ljava/lang/String;
      44: aload_1
      45: getfield      #2                  // Field span:Lixa/kaflib/Span;
      48: astore_3
      49: aload_3
      50: invokevirtual #8                  // Method ixa/kaflib/Span.getTargets:()Ljava/util/List;
      53: astore        4
      55: new           #9                  // class java/util/ArrayList
      58: dup
      59: invokespecial #10                 // Method java/util/ArrayList."<init>":()V
      62: astore        5
      64: aload         4
      66: invokeinterface #11,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      71: astore        6
      73: aload         6
      75: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      80: ifeq          137
      83: aload         6
      85: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      90: checkcast     #14                 // class ixa/kaflib/Term
      93: astore        7
      95: aload_2
      96: aload         7
      98: invokevirtual #15                 // Method ixa/kaflib/Term.getId:()Ljava/lang/String;
     101: invokevirtual #16                 // Method java/util/HashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
     104: checkcast     #14                 // class ixa/kaflib/Term
     107: astore        8
     109: aload         8
     111: ifnonnull     124
     114: new           #17                 // class java/lang/IllegalStateException
     117: dup
     118: ldc           #18                 // String Term not found when copying opinion_expression
     120: invokespecial #19                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
     123: athrow
     124: aload         5
     126: aload         8
     128: invokeinterface #20,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     133: pop
     134: goto          73
     137: aload_3
     138: invokevirtual #21                 // Method ixa/kaflib/Span.hasHead:()Z
     141: ifeq          181
     144: aload_2
     145: aload_3
     146: invokevirtual #22                 // Method ixa/kaflib/Span.getHead:()Lixa/kaflib/IdentifiableAnnotation;
     149: checkcast     #14                 // class ixa/kaflib/Term
     152: invokevirtual #15                 // Method ixa/kaflib/Term.getId:()Ljava/lang/String;
     155: invokevirtual #16                 // Method java/util/HashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
     158: checkcast     #14                 // class ixa/kaflib/Term
     161: astore        6
     163: aload_0
     164: new           #23                 // class ixa/kaflib/Span
     167: dup
     168: aload         5
     170: aload         6
     172: invokespecial #24                 // Method ixa/kaflib/Span."<init>":(Ljava/util/List;Lixa/kaflib/IdentifiableAnnotation;)V
     175: putfield      #2                  // Field span:Lixa/kaflib/Span;
     178: goto          194
     181: aload_0
     182: new           #23                 // class ixa/kaflib/Span
     185: dup
     186: aload         5
     188: invokespecial #25                 // Method ixa/kaflib/Span."<init>":(Ljava/util/List;)V
     191: putfield      #2                  // Field span:Lixa/kaflib/Span;
     194: return

  public boolean hasPolarity();
    Code:
       0: aload_0
       1: getfield      #3                  // Field polarity:Ljava/lang/String;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public java.lang.String getPolarity();
    Code:
       0: aload_0
       1: getfield      #3                  // Field polarity:Ljava/lang/String;
       4: areturn

  public void setPolarity(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #3                  // Field polarity:Ljava/lang/String;
       5: return

  public boolean hasStrength();
    Code:
       0: aload_0
       1: getfield      #4                  // Field strength:Ljava/lang/String;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public java.lang.String getStrength();
    Code:
       0: aload_0
       1: getfield      #4                  // Field strength:Ljava/lang/String;
       4: areturn

  public void setStrength(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #4                  // Field strength:Ljava/lang/String;
       5: return

  public boolean hasSubjectivity();
    Code:
       0: aload_0
       1: getfield      #5                  // Field subjectivity:Ljava/lang/String;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public java.lang.String getSubjectivity();
    Code:
       0: aload_0
       1: getfield      #5                  // Field subjectivity:Ljava/lang/String;
       4: areturn

  public void setSubjectivity(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #5                  // Field subjectivity:Ljava/lang/String;
       5: return

  public boolean hasSentimentSemanticType();
    Code:
       0: aload_0
       1: getfield      #6                  // Field sentimentSemanticType:Ljava/lang/String;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public java.lang.String getSentimentSemanticType();
    Code:
       0: aload_0
       1: getfield      #6                  // Field sentimentSemanticType:Ljava/lang/String;
       4: areturn

  public void setSentimentSemanticType(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #6                  // Field sentimentSemanticType:Ljava/lang/String;
       5: return

  public boolean hasSentimentProductFeature();
    Code:
       0: aload_0
       1: getfield      #7                  // Field sentimentProductFeature:Ljava/lang/String;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public java.lang.String getSentimentProductFeature();
    Code:
       0: aload_0
       1: getfield      #7                  // Field sentimentProductFeature:Ljava/lang/String;
       4: areturn

  public void setSentimentProductFeature(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #7                  // Field sentimentProductFeature:Ljava/lang/String;
       5: return

  public java.util.List<ixa.kaflib.Term> getTerms();
    Code:
       0: aload_0
       1: getfield      #2                  // Field span:Lixa/kaflib/Span;
       4: invokevirtual #8                  // Method ixa/kaflib/Span.getTargets:()Ljava/util/List;
       7: areturn

  public void addTerm(ixa.kaflib.Term);
    Code:
       0: aload_0
       1: getfield      #2                  // Field span:Lixa/kaflib/Span;
       4: aload_1
       5: invokevirtual #26                 // Method ixa/kaflib/Span.addTarget:(Lixa/kaflib/IdentifiableAnnotation;)V
       8: return

  public void addTerm(ixa.kaflib.Term, boolean);
    Code:
       0: aload_0
       1: getfield      #2                  // Field span:Lixa/kaflib/Span;
       4: aload_1
       5: iload_2
       6: invokevirtual #27                 // Method ixa/kaflib/Span.addTarget:(Lixa/kaflib/IdentifiableAnnotation;Z)V
       9: return

  public ixa.kaflib.Span<ixa.kaflib.Term> getSpan();
    Code:
       0: aload_0
       1: getfield      #2                  // Field span:Lixa/kaflib/Span;
       4: areturn

  public void setSpan(ixa.kaflib.Span<ixa.kaflib.Term>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2                  // Field span:Lixa/kaflib/Span;
       5: return

  java.util.Map<ixa.kaflib.KAFDocument$AnnotationType, java.util.List<ixa.kaflib.Annotation>> getReferencedAnnotations();
    Code:
       0: new           #28                 // class java/util/HashMap
       3: dup
       4: invokespecial #29                 // Method java/util/HashMap."<init>":()V
       7: astore_1
       8: aload_1
       9: getstatic     #30                 // Field ixa/kaflib/KAFDocument$AnnotationType.TERM:Lixa/kaflib/KAFDocument$AnnotationType;
      12: aload_0
      13: invokevirtual #31                 // Method getSpan:()Lixa/kaflib/Span;
      16: invokevirtual #8                  // Method ixa/kaflib/Span.getTargets:()Ljava/util/List;
      19: invokeinterface #32,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      24: pop
      25: aload_1
      26: areturn
}
