Compiled from "Chunk.java"
public class ixa.kaflib.Chunk extends ixa.kaflib.IdentifiableAnnotation implements ixa.kaflib.SentenceLevelAnnotation {
  private java.lang.String phrase;

  private java.lang.String chunkcase;

  private ixa.kaflib.Span<ixa.kaflib.Term> span;

  ixa.kaflib.Chunk(java.lang.String, ixa.kaflib.Span<ixa.kaflib.Term>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method ixa/kaflib/IdentifiableAnnotation."<init>":(Ljava/lang/String;)V
       5: aload_2
       6: invokevirtual #2                  // Method ixa/kaflib/Span.size:()I
       9: iconst_1
      10: if_icmpge     23
      13: new           #3                  // class java/lang/IllegalStateException
      16: dup
      17: ldc           #4                  // String Chunks must contain at least one term target
      19: invokespecial #5                  // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      22: athrow
      23: aload_0
      24: aload_2
      25: putfield      #6                  // Field span:Lixa/kaflib/Span;
      28: return

  ixa.kaflib.Chunk(ixa.kaflib.Chunk, java.util.HashMap<java.lang.String, ixa.kaflib.Term>);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #7                  // Method getId:()Ljava/lang/String;
       5: invokespecial #1                  // Method ixa/kaflib/IdentifiableAnnotation."<init>":(Ljava/lang/String;)V
       8: aload_0
       9: aload_1
      10: getfield      #8                  // Field phrase:Ljava/lang/String;
      13: putfield      #8                  // Field phrase:Ljava/lang/String;
      16: aload_0
      17: aload_1
      18: getfield      #9                  // Field chunkcase:Ljava/lang/String;
      21: putfield      #9                  // Field chunkcase:Ljava/lang/String;
      24: aload_1
      25: invokevirtual #7                  // Method getId:()Ljava/lang/String;
      28: astore_3
      29: aload_1
      30: getfield      #6                  // Field span:Lixa/kaflib/Span;
      33: astore        4
      35: aload         4
      37: invokevirtual #10                 // Method ixa/kaflib/Span.getTargets:()Ljava/util/List;
      40: astore        5
      42: new           #11                 // class java/util/ArrayList
      45: dup
      46: invokespecial #12                 // Method java/util/ArrayList."<init>":()V
      49: astore        6
      51: aload         5
      53: invokeinterface #13,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      58: astore        7
      60: aload         7
      62: invokeinterface #14,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      67: ifeq          141
      70: aload         7
      72: invokeinterface #15,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      77: checkcast     #16                 // class ixa/kaflib/Term
      80: astore        8
      82: aload_2
      83: aload         8
      85: invokevirtual #17                 // Method ixa/kaflib/Term.getId:()Ljava/lang/String;
      88: invokevirtual #18                 // Method java/util/HashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      91: checkcast     #16                 // class ixa/kaflib/Term
      94: astore        9
      96: aload         9
      98: ifnonnull     128
     101: new           #3                  // class java/lang/IllegalStateException
     104: dup
     105: new           #19                 // class java/lang/StringBuilder
     108: dup
     109: invokespecial #20                 // Method java/lang/StringBuilder."<init>":()V
     112: ldc           #21                 // String Term not found when copying
     114: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     117: aload_3
     118: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     121: invokevirtual #23                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     124: invokespecial #5                  // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
     127: athrow
     128: aload         6
     130: aload         9
     132: invokeinterface #24,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     137: pop
     138: goto          60
     141: aload         4
     143: invokevirtual #25                 // Method ixa/kaflib/Span.hasHead:()Z
     146: ifeq          187
     149: aload_2
     150: aload         4
     152: invokevirtual #26                 // Method ixa/kaflib/Span.getHead:()Lixa/kaflib/IdentifiableAnnotation;
     155: checkcast     #16                 // class ixa/kaflib/Term
     158: invokevirtual #17                 // Method ixa/kaflib/Term.getId:()Ljava/lang/String;
     161: invokevirtual #18                 // Method java/util/HashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
     164: checkcast     #16                 // class ixa/kaflib/Term
     167: astore        7
     169: aload_0
     170: new           #27                 // class ixa/kaflib/Span
     173: dup
     174: aload         6
     176: aload         7
     178: invokespecial #28                 // Method ixa/kaflib/Span."<init>":(Ljava/util/List;Lixa/kaflib/IdentifiableAnnotation;)V
     181: putfield      #6                  // Field span:Lixa/kaflib/Span;
     184: goto          200
     187: aload_0
     188: new           #27                 // class ixa/kaflib/Span
     191: dup
     192: aload         6
     194: invokespecial #29                 // Method ixa/kaflib/Span."<init>":(Ljava/util/List;)V
     197: putfield      #6                  // Field span:Lixa/kaflib/Span;
     200: return

  public boolean hasHead();
    Code:
       0: aload_0
       1: getfield      #6                  // Field span:Lixa/kaflib/Span;
       4: invokevirtual #26                 // Method ixa/kaflib/Span.getHead:()Lixa/kaflib/IdentifiableAnnotation;
       7: ifnull        14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  public ixa.kaflib.Term getHead();
    Code:
       0: aload_0
       1: getfield      #6                  // Field span:Lixa/kaflib/Span;
       4: invokevirtual #26                 // Method ixa/kaflib/Span.getHead:()Lixa/kaflib/IdentifiableAnnotation;
       7: checkcast     #16                 // class ixa/kaflib/Term
      10: areturn

  public boolean hasPhrase();
    Code:
       0: aload_0
       1: getfield      #8                  // Field phrase:Ljava/lang/String;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public java.lang.String getPhrase();
    Code:
       0: aload_0
       1: getfield      #8                  // Field phrase:Ljava/lang/String;
       4: areturn

  public void setPhrase(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #8                  // Field phrase:Ljava/lang/String;
       5: return

  public boolean hasCase();
    Code:
       0: aload_0
       1: getfield      #9                  // Field chunkcase:Ljava/lang/String;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public java.lang.String getCase();
    Code:
       0: aload_0
       1: getfield      #9                  // Field chunkcase:Ljava/lang/String;
       4: areturn

  public void setCase(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #9                  // Field chunkcase:Ljava/lang/String;
       5: return

  public java.util.List<ixa.kaflib.Term> getTerms();
    Code:
       0: aload_0
       1: getfield      #6                  // Field span:Lixa/kaflib/Span;
       4: invokevirtual #10                 // Method ixa/kaflib/Span.getTargets:()Ljava/util/List;
       7: areturn

  public void addTerm(ixa.kaflib.Term);
    Code:
       0: aload_0
       1: getfield      #6                  // Field span:Lixa/kaflib/Span;
       4: aload_1
       5: invokevirtual #30                 // Method ixa/kaflib/Span.addTarget:(Lixa/kaflib/IdentifiableAnnotation;)V
       8: return

  public void addTerm(ixa.kaflib.Term, boolean);
    Code:
       0: aload_0
       1: getfield      #6                  // Field span:Lixa/kaflib/Span;
       4: aload_1
       5: iload_2
       6: invokevirtual #31                 // Method ixa/kaflib/Span.addTarget:(Lixa/kaflib/IdentifiableAnnotation;Z)V
       9: return

  public ixa.kaflib.Span<ixa.kaflib.Term> getSpan();
    Code:
       0: aload_0
       1: getfield      #6                  // Field span:Lixa/kaflib/Span;
       4: areturn

  public void setSpan(ixa.kaflib.Span<ixa.kaflib.Term>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #6                  // Field span:Lixa/kaflib/Span;
       5: return

  public java.lang.String getStr();
    Code:
       0: ldc           #32                 // String
       2: astore_1
       3: aload_0
       4: getfield      #6                  // Field span:Lixa/kaflib/Span;
       7: invokevirtual #10                 // Method ixa/kaflib/Span.getTargets:()Ljava/util/List;
      10: invokeinterface #13,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      15: astore_2
      16: aload_2
      17: invokeinterface #14,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      22: ifeq          87
      25: aload_2
      26: invokeinterface #15,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      31: checkcast     #16                 // class ixa/kaflib/Term
      34: astore_3
      35: aload_1
      36: invokevirtual #33                 // Method java/lang/String.isEmpty:()Z
      39: ifne          62
      42: new           #19                 // class java/lang/StringBuilder
      45: dup
      46: invokespecial #20                 // Method java/lang/StringBuilder."<init>":()V
      49: aload_1
      50: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      53: ldc           #34                 // String
      55: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      58: invokevirtual #23                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      61: astore_1
      62: new           #19                 // class java/lang/StringBuilder
      65: dup
      66: invokespecial #20                 // Method java/lang/StringBuilder."<init>":()V
      69: aload_1
      70: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      73: aload_3
      74: invokevirtual #35                 // Method ixa/kaflib/Term.getStr:()Ljava/lang/String;
      77: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      80: invokevirtual #23                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      83: astore_1
      84: goto          16
      87: aload_1
      88: areturn

  java.util.Map<ixa.kaflib.KAFDocument$AnnotationType, java.util.List<ixa.kaflib.Annotation>> getReferencedAnnotations();
    Code:
       0: new           #36                 // class java/util/HashMap
       3: dup
       4: invokespecial #37                 // Method java/util/HashMap."<init>":()V
       7: astore_1
       8: aload_1
       9: getstatic     #38                 // Field ixa/kaflib/KAFDocument$AnnotationType.TERM:Lixa/kaflib/KAFDocument$AnnotationType;
      12: aload_0
      13: invokevirtual #39                 // Method getSpan:()Lixa/kaflib/Span;
      16: invokevirtual #10                 // Method ixa/kaflib/Span.getTargets:()Ljava/util/List;
      19: invokeinterface #40,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      24: pop
      25: aload_1
      26: areturn

  public java.lang.Integer getSent();
    Code:
       0: aload_0
       1: getfield      #6                  // Field span:Lixa/kaflib/Span;
       4: invokevirtual #41                 // Method ixa/kaflib/Span.getFirstTarget:()Lixa/kaflib/IdentifiableAnnotation;
       7: checkcast     #16                 // class ixa/kaflib/Term
      10: invokevirtual #42                 // Method ixa/kaflib/Term.getSent:()Ljava/lang/Integer;
      13: areturn

  public java.lang.Integer getPara();
    Code:
       0: aload_0
       1: getfield      #6                  // Field span:Lixa/kaflib/Span;
       4: invokevirtual #41                 // Method ixa/kaflib/Span.getFirstTarget:()Lixa/kaflib/IdentifiableAnnotation;
       7: checkcast     #16                 // class ixa/kaflib/Term
      10: invokevirtual #43                 // Method ixa/kaflib/Term.getPara:()Ljava/lang/Integer;
      13: areturn

  public void setHead(ixa.kaflib.Term);
    Code:
       0: aload_0
       1: getfield      #6                  // Field span:Lixa/kaflib/Span;
       4: aload_1
       5: invokevirtual #44                 // Method ixa/kaflib/Span.setHead:(Lixa/kaflib/IdentifiableAnnotation;)V
       8: return
}
