Compiled from "Base64.scala"
public class pl.morgaroth.utils.strings.Base64Encoding$ToBase64EncodableByteArray {
  private final byte[] data;

  public final pl.morgaroth.utils.strings.Base64Encoding $outer;

  public java.lang.String toBase64();
    Code:
       0: new           #13                 // class sun/misc/BASE64Encoder
       3: dup
       4: invokespecial #17                 // Method sun/misc/BASE64Encoder."<init>":()V
       7: aload_0
       8: getfield      #19                 // Field data:[B
      11: invokevirtual #23                 // Method sun/misc/BASE64Encoder.encode:([B)Ljava/lang/String;
      14: areturn

  public pl.morgaroth.utils.strings.Base64Encoding pl$morgaroth$utils$strings$Base64Encoding$ToBase64EncodableByteArray$$$outer();
    Code:
       0: aload_0
       1: getfield      #29                 // Field $outer:Lpl/morgaroth/utils/strings/Base64Encoding;
       4: areturn

  public pl.morgaroth.utils.strings.Base64Encoding$ToBase64EncodableByteArray(pl.morgaroth.utils.strings.Base64Encoding, byte[]);
    Code:
       0: aload_0
       1: aload_2
       2: putfield      #19                 // Field data:[B
       5: aload_1
       6: ifnonnull     11
       9: aconst_null
      10: athrow
      11: aload_0
      12: aload_1
      13: putfield      #29                 // Field $outer:Lpl/morgaroth/utils/strings/Base64Encoding;
      16: aload_0
      17: invokespecial #31                 // Method java/lang/Object."<init>":()V
      20: return
}
