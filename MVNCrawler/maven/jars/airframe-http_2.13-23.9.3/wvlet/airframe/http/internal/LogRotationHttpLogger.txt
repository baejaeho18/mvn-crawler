Compiled from "LogRotationHttpLogger.scala"
public class wvlet.airframe.http.internal.LogRotationHttpLogger implements wvlet.airframe.http.HttpLogger {
  private volatile wvlet.airframe.http.internal.LogRotationHttpLogger$MessageOnlyLogFormatter$ MessageOnlyLogFormatter$module;

  private final wvlet.airframe.http.HttpLoggerConfig config;

  private final java.util.concurrent.atomic.AtomicBoolean closed;

  private final wvlet.log.AsyncHandler asyncLogHandler;

  public final void write(scala.collection.immutable.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #29                 // InterfaceMethod wvlet/airframe/http/HttpLogger.write$:(Lwvlet/airframe/http/HttpLogger;Lscala/collection/immutable/Map;)V
       5: return

  public wvlet.airframe.http.internal.LogRotationHttpLogger$MessageOnlyLogFormatter$ MessageOnlyLogFormatter();
    Code:
       0: aload_0
       1: getfield      #36                 // Field MessageOnlyLogFormatter$module:Lwvlet/airframe/http/internal/LogRotationHttpLogger$MessageOnlyLogFormatter$;
       4: ifnonnull     11
       7: aload_0
       8: invokespecial #40                 // Method MessageOnlyLogFormatter$lzycompute$1:()V
      11: aload_0
      12: getfield      #36                 // Field MessageOnlyLogFormatter$module:Lwvlet/airframe/http/internal/LogRotationHttpLogger$MessageOnlyLogFormatter$;
      15: areturn

  public wvlet.airframe.http.HttpLoggerConfig config();
    Code:
       0: aload_0
       1: getfield      #43                 // Field config:Lwvlet/airframe/http/HttpLoggerConfig;
       4: areturn

  private java.util.concurrent.atomic.AtomicBoolean closed();
    Code:
       0: aload_0
       1: getfield      #46                 // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: areturn

  private wvlet.log.AsyncHandler asyncLogHandler();
    Code:
       0: aload_0
       1: getfield      #49                 // Field asyncLogHandler:Lwvlet/log/AsyncHandler;
       4: areturn

  public void writeInternal(scala.collection.immutable.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_0
       1: invokevirtual #52                 // Method config:()Lwvlet/airframe/http/HttpLoggerConfig;
       4: invokevirtual #58                 // Method wvlet/airframe/http/HttpLoggerConfig.logFormatter:()Lscala/Function1;
       7: aload_1
       8: invokeinterface #64,  2           // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      13: checkcast     #66                 // class java/lang/String
      16: astore_2
      17: aload_0
      18: invokespecial #68                 // Method closed:()Ljava/util/concurrent/atomic/AtomicBoolean;
      21: invokevirtual #74                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
      24: ifne          46
      27: aload_0
      28: invokespecial #76                 // Method asyncLogHandler:()Lwvlet/log/AsyncHandler;
      31: new           #78                 // class java/util/logging/LogRecord
      34: dup
      35: getstatic     #84                 // Field java/util/logging/Level.INFO:Ljava/util/logging/Level;
      38: aload_2
      39: invokespecial #88                 // Method java/util/logging/LogRecord."<init>":(Ljava/util/logging/Level;Ljava/lang/String;)V
      42: invokevirtual #94                 // Method wvlet/log/AsyncHandler.publish:(Ljava/util/logging/LogRecord;)V
      45: return
      46: return

  public void close();
    Code:
       0: aload_0
       1: invokespecial #68                 // Method closed:()Ljava/util/concurrent/atomic/AtomicBoolean;
       4: iconst_0
       5: iconst_1
       6: invokevirtual #101                // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z
       9: ifeq          20
      12: aload_0
      13: invokespecial #76                 // Method asyncLogHandler:()Lwvlet/log/AsyncHandler;
      16: invokevirtual #103                // Method wvlet/log/AsyncHandler.close:()V
      19: return
      20: return

  private final void MessageOnlyLogFormatter$lzycompute$1();
    Code:
       0: aload_0
       1: dup
       2: astore_1
       3: monitorenter
       4: aload_0
       5: getfield      #36                 // Field MessageOnlyLogFormatter$module:Lwvlet/airframe/http/internal/LogRotationHttpLogger$MessageOnlyLogFormatter$;
       8: ifnonnull     23
      11: aload_0
      12: new           #12                 // class wvlet/airframe/http/internal/LogRotationHttpLogger$MessageOnlyLogFormatter$
      15: dup
      16: aload_0
      17: invokespecial #106                // Method wvlet/airframe/http/internal/LogRotationHttpLogger$MessageOnlyLogFormatter$."<init>":(Lwvlet/airframe/http/internal/LogRotationHttpLogger;)V
      20: putfield      #36                 // Field MessageOnlyLogFormatter$module:Lwvlet/airframe/http/internal/LogRotationHttpLogger$MessageOnlyLogFormatter$;
      23: aload_1
      24: monitorexit
      25: goto          31
      28: aload_1
      29: monitorexit
      30: athrow
      31: return
    Exception table:
       from    to  target type
           4    23    28   any

  public wvlet.airframe.http.internal.LogRotationHttpLogger(wvlet.airframe.http.HttpLoggerConfig);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #43                 // Field config:Lwvlet/airframe/http/HttpLoggerConfig;
       5: aload_0
       6: invokespecial #111                // Method java/lang/Object."<init>":()V
       9: aload_0
      10: invokestatic  #115                // InterfaceMethod wvlet/airframe/http/HttpLogger.$init$:(Lwvlet/airframe/http/HttpLogger;)V
      13: aload_0
      14: new           #70                 // class java/util/concurrent/atomic/AtomicBoolean
      17: dup
      18: iconst_0
      19: invokespecial #118                // Method java/util/concurrent/atomic/AtomicBoolean."<init>":(Z)V
      22: putfield      #46                 // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;
      25: aload_0
      26: new           #90                 // class wvlet/log/AsyncHandler
      29: dup
      30: new           #120                // class wvlet/log/LogRotationHandler
      33: dup
      34: aload_1
      35: invokevirtual #124                // Method wvlet/airframe/http/HttpLoggerConfig.logFileName:()Ljava/lang/String;
      38: aload_1
      39: invokevirtual #128                // Method wvlet/airframe/http/HttpLoggerConfig.maxNumFiles:()I
      42: aload_1
      43: invokevirtual #132                // Method wvlet/airframe/http/HttpLoggerConfig.maxFileSize:()J
      46: aload_0
      47: invokevirtual #134                // Method MessageOnlyLogFormatter:()Lwvlet/airframe/http/internal/LogRotationHttpLogger$MessageOnlyLogFormatter$;
      50: aload_1
      51: invokevirtual #137                // Method wvlet/airframe/http/HttpLoggerConfig.logFileExtension:()Ljava/lang/String;
      54: getstatic     #143                // Field wvlet/log/LogRotationHandler$.MODULE$:Lwvlet/log/LogRotationHandler$;
      57: invokevirtual #146                // Method wvlet/log/LogRotationHandler$.$lessinit$greater$default$6:()Ljava/lang/String;
      60: invokespecial #149                // Method wvlet/log/LogRotationHandler."<init>":(Ljava/lang/String;IJLwvlet/log/LogFormatter;Ljava/lang/String;Ljava/lang/String;)V
      63: invokespecial #152                // Method wvlet/log/AsyncHandler."<init>":(Ljava/util/logging/Handler;)V
      66: putfield      #49                 // Field asyncLogHandler:Lwvlet/log/AsyncHandler;
      69: return
}
