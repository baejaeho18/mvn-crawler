Compiled from "HttpBackend.scala"
public interface wvlet.airframe.http.HttpBackend<Req, Resp, F> {
  public abstract wvlet.airframe.http.HttpRequestAdapter<Req> httpRequestAdapter();

  public abstract java.lang.String name();

  public abstract Resp newResponse(wvlet.airframe.http.HttpStatus, java.lang.String);

  public static java.lang.String newResponse$default$2$(wvlet.airframe.http.HttpBackend);
    Code:
       0: aload_0
       1: invokespecial #33                 // InterfaceMethod newResponse$default$2:()Ljava/lang/String;
       4: areturn

  public default java.lang.String newResponse$default$2();
    Code:
       0: ldc           #36                 // String
       2: areturn

  public abstract <A> F toFuture(A);

  public abstract <A> F toFuture(scala.concurrent.Future<A>, scala.concurrent.ExecutionContext);

  public abstract <A> scala.concurrent.Future<A> toScalaFuture(F);

  public abstract F wrapException(java.lang.Throwable);

  public static java.lang.Object rescue$(wvlet.airframe.http.HttpBackend, scala.Function0);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #57                 // InterfaceMethod rescue:(Lscala/Function0;)Ljava/lang/Object;
       5: areturn

  public default F rescue(scala.Function0<F>);
    Code:
       0: aload_1
       1: invokeinterface #67,  1           // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
       6: goto          68
       9: astore_3
      10: aload_3
      11: astore        4
      13: aload         4
      15: ifnull        60
      18: getstatic     #73                 // Field scala/util/control/NonFatal$.MODULE$:Lscala/util/control/NonFatal$;
      21: aload         4
      23: invokevirtual #77                 // Method scala/util/control/NonFatal$.unapply:(Ljava/lang/Throwable;)Lscala/Option;
      26: astore        5
      28: aload         5
      30: invokevirtual #83                 // Method scala/Option.isEmpty:()Z
      33: ifne          57
      36: aload         5
      38: invokevirtual #86                 // Method scala/Option.get:()Ljava/lang/Object;
      41: checkcast     #61                 // class java/lang/Throwable
      44: astore        6
      46: aload_0
      47: aload         6
      49: invokeinterface #88,  2           // InterfaceMethod wrapException:(Ljava/lang/Throwable;)Ljava/lang/Object;
      54: goto          65
      57: goto          63
      60: goto          63
      63: aload_3
      64: athrow
      65: goto          68
      68: areturn
    Exception table:
       from    to  target type
           0     6     9   Class java/lang/Throwable

  public abstract boolean isFutureType(java.lang.Class<?>);

  public static boolean isScalaFutureType$(wvlet.airframe.http.HttpBackend, java.lang.Class);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #98                 // InterfaceMethod isScalaFutureType:(Ljava/lang/Class;)Z
       5: ireturn

  public default boolean isScalaFutureType(java.lang.Class<?>);
    Code:
       0: ldc           #101                // class scala/concurrent/Future
       2: aload_1
       3: invokevirtual #106                // Method java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z
       6: ireturn

  public abstract boolean isRawResponseType(java.lang.Class<?>);

  public abstract <A, B> F mapF(F, scala.Function1<A, B>);

  public static wvlet.airframe.http.HttpFilter newFilter$(wvlet.airframe.http.HttpBackend, scala.Function2);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #117                // InterfaceMethod newFilter:(Lscala/Function2;)Lwvlet/airframe/http/HttpFilter;
       5: areturn

  public default wvlet.airframe.http.HttpFilter<Req, Resp, F> newFilter(scala.Function2<Req, wvlet.airframe.http.HttpContext<Req, Resp, F>, F>);
    Code:
       0: getstatic     #124                // Field wvlet/airframe/http/HttpFilter$.MODULE$:Lwvlet/airframe/http/HttpFilter$;
       3: aload_0
       4: aload_1
       5: invokevirtual #126                // Method wvlet/airframe/http/HttpFilter$.newFilter:(Lwvlet/airframe/http/HttpBackend;Lscala/Function2;)Lwvlet/airframe/http/HttpFilter;
       8: areturn

  public static wvlet.airframe.http.HttpFilter defaultFilter$(wvlet.airframe.http.HttpBackend);
    Code:
       0: aload_0
       1: invokespecial #132                // InterfaceMethod defaultFilter:()Lwvlet/airframe/http/HttpFilter;
       4: areturn

  public default wvlet.airframe.http.HttpFilter<Req, Resp, F> defaultFilter();
    Code:
       0: getstatic     #124                // Field wvlet/airframe/http/HttpFilter$.MODULE$:Lwvlet/airframe/http/HttpFilter$;
       3: aload_0
       4: invokevirtual #136                // Method wvlet/airframe/http/HttpFilter$.defaultFilter:(Lwvlet/airframe/http/HttpBackend;)Lwvlet/airframe/http/HttpFilter$SafeFilter;
       7: areturn

  public static wvlet.airframe.http.HttpFilter filterAdapter$(wvlet.airframe.http.HttpBackend, wvlet.airframe.http.HttpFilter);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #143                // InterfaceMethod filterAdapter:(Lwvlet/airframe/http/HttpFilter;)Lwvlet/airframe/http/HttpFilter;
       5: areturn

  public default <M> wvlet.airframe.http.HttpFilter<Req, Resp, F> filterAdapter(wvlet.airframe.http.HttpFilter<?, ?, M>);
    Code:
       0: getstatic     #150                // Field scala/Predef$.MODULE$:Lscala/Predef$;
       3: invokevirtual #154                // Method scala/Predef$.$qmark$qmark$qmark:()Lscala/runtime/Nothing$;
       6: athrow

  public static wvlet.airframe.http.HttpFilter rxFilterAdapter$(wvlet.airframe.http.HttpBackend, wvlet.airframe.http.RxHttpFilter);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #160                // InterfaceMethod rxFilterAdapter:(Lwvlet/airframe/http/RxHttpFilter;)Lwvlet/airframe/http/HttpFilter;
       5: areturn

  public default wvlet.airframe.http.HttpFilter<Req, Resp, F> rxFilterAdapter(wvlet.airframe.http.RxHttpFilter);
    Code:
       0: getstatic     #150                // Field scala/Predef$.MODULE$:Lscala/Predef$;
       3: invokevirtual #154                // Method scala/Predef$.$qmark$qmark$qmark:()Lscala/runtime/Nothing$;
       6: athrow

  public static wvlet.airframe.http.HttpContext newContext$(wvlet.airframe.http.HttpBackend, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #168                // InterfaceMethod newContext:(Lscala/Function1;)Lwvlet/airframe/http/HttpContext;
       5: areturn

  public default wvlet.airframe.http.HttpContext<Req, Resp, F> newContext(scala.Function1<Req, F>);
    Code:
       0: getstatic     #175                // Field wvlet/airframe/http/HttpContext$.MODULE$:Lwvlet/airframe/http/HttpContext$;
       3: aload_0
       4: aload_1
       5: invokevirtual #177                // Method wvlet/airframe/http/HttpContext$.newContext:(Lwvlet/airframe/http/HttpBackend;Lscala/Function1;)Lwvlet/airframe/http/HttpContext;
       8: areturn

  public abstract F withThreadLocalStore(scala.Function0<F>);

  public static void setThreadLocalServerException$(wvlet.airframe.http.HttpBackend, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #186                // InterfaceMethod setThreadLocalServerException:(Ljava/lang/Object;)V
       5: return

  public default <A> void setThreadLocalServerException(A);
    Code:
       0: aload_0
       1: getstatic     #193                // Field wvlet/airframe/http/HttpBackend$.MODULE$:Lwvlet/airframe/http/HttpBackend$;
       4: invokevirtual #196                // Method wvlet/airframe/http/HttpBackend$.TLS_KEY_SERVER_EXCEPTION:()Ljava/lang/String;
       7: aload_1
       8: invokeinterface #200,  3          // InterfaceMethod setThreadLocal:(Ljava/lang/String;Ljava/lang/Object;)V
      13: return

  public abstract <A> void setThreadLocal(java.lang.String, A);

  public abstract <A> scala.Option<A> getThreadLocal(java.lang.String);

  public static void $init$(wvlet.airframe.http.HttpBackend);
    Code:
       0: return
}
