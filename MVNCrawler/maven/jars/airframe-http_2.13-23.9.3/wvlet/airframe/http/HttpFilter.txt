Compiled from "HttpFilter.scala"
public interface wvlet.airframe.http.HttpFilter<Req, Resp, F> extends wvlet.airframe.http.HttpFilterType {
  public static <Req, Resp, F> wvlet.airframe.http.HttpFilter$SafeFilter<Req, Resp, ?> defaultFilter(wvlet.airframe.http.HttpBackend<Req, Resp, F>);
    Code:
       0: getstatic     #32                 // Field wvlet/airframe/http/HttpFilter$.MODULE$:Lwvlet/airframe/http/HttpFilter$;
       3: aload_0
       4: invokevirtual #34                 // Method wvlet/airframe/http/HttpFilter$.defaultFilter:(Lwvlet/airframe/http/HttpBackend;)Lwvlet/airframe/http/HttpFilter$SafeFilter;
       7: areturn

  public static <Req, Resp, F> wvlet.airframe.http.HttpFilter<Req, Resp, F> newFilter(wvlet.airframe.http.HttpBackend<Req, Resp, F>, scala.Function2<Req, wvlet.airframe.http.HttpContext<Req, Resp, F>, F>);
    Code:
       0: getstatic     #32                 // Field wvlet/airframe/http/HttpFilter$.MODULE$:Lwvlet/airframe/http/HttpFilter$;
       3: aload_0
       4: aload_1
       5: invokevirtual #42                 // Method wvlet/airframe/http/HttpFilter$.newFilter:(Lwvlet/airframe/http/HttpBackend;Lscala/Function2;)Lwvlet/airframe/http/HttpFilter;
       8: areturn

  public abstract wvlet.airframe.http.HttpBackend<Req, Resp, F> backend();

  public static java.lang.Object toFuture$(wvlet.airframe.http.HttpFilter, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #53                 // InterfaceMethod toFuture:(Ljava/lang/Object;)Ljava/lang/Object;
       5: areturn

  public default <A> F toFuture(A);
    Code:
       0: aload_0
       1: invokeinterface #58,  1           // InterfaceMethod backend:()Lwvlet/airframe/http/HttpBackend;
       6: aload_1
       7: invokeinterface #61,  2           // InterfaceMethod wvlet/airframe/http/HttpBackend.toFuture:(Ljava/lang/Object;)Ljava/lang/Object;
      12: areturn

  public static java.lang.String backendName$(wvlet.airframe.http.HttpFilter);
    Code:
       0: aload_0
       1: invokespecial #68                 // InterfaceMethod backendName:()Ljava/lang/String;
       4: areturn

  public default java.lang.String backendName();
    Code:
       0: aload_0
       1: invokeinterface #58,  1           // InterfaceMethod backend:()Lwvlet/airframe/http/HttpBackend;
       6: invokeinterface #71,  1           // InterfaceMethod wvlet/airframe/http/HttpBackend.name:()Ljava/lang/String;
      11: areturn

  public static wvlet.airframe.http.HttpFilter filterAdapter$(wvlet.airframe.http.HttpFilter);
    Code:
       0: aload_0
       1: invokespecial #77                 // InterfaceMethod filterAdapter:()Lwvlet/airframe/http/HttpFilter;
       4: areturn

  public default wvlet.airframe.http.HttpFilter<Req, Resp, F> filterAdapter();
    Code:
       0: aload_0
       1: invokeinterface #58,  1           // InterfaceMethod backend:()Lwvlet/airframe/http/HttpBackend;
       6: aload_0
       7: invokeinterface #80,  2           // InterfaceMethod wvlet/airframe/http/HttpBackend.filterAdapter:(Lwvlet/airframe/http/HttpFilter;)Lwvlet/airframe/http/HttpFilter;
      12: areturn

  public abstract F apply(Req, wvlet.airframe.http.HttpContext<Req, Resp, F>);

  public static wvlet.airframe.http.HttpFilter andThen$(wvlet.airframe.http.HttpFilter, wvlet.airframe.http.HttpFilter);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #91                 // InterfaceMethod andThen:(Lwvlet/airframe/http/HttpFilter;)Lwvlet/airframe/http/HttpFilter;
       5: areturn

  public default wvlet.airframe.http.HttpFilter<Req, Resp, F> andThen(wvlet.airframe.http.HttpFilter<Req, Resp, F>);
    Code:
       0: new           #18                 // class wvlet/airframe/http/HttpFilter$AndThen
       3: dup
       4: aload_0
       5: invokeinterface #58,  1           // InterfaceMethod backend:()Lwvlet/airframe/http/HttpBackend;
      10: aload_0
      11: aload_1
      12: invokespecial #96                 // Method wvlet/airframe/http/HttpFilter$AndThen."<init>":(Lwvlet/airframe/http/HttpBackend;Lwvlet/airframe/http/HttpFilter;Lwvlet/airframe/http/HttpFilter;)V
      15: areturn

  public static wvlet.airframe.http.HttpContext andThen$(wvlet.airframe.http.HttpFilter, wvlet.airframe.http.HttpContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #100                // InterfaceMethod andThen:(Lwvlet/airframe/http/HttpContext;)Lwvlet/airframe/http/HttpContext;
       5: areturn

  public default wvlet.airframe.http.HttpContext<Req, Resp, F> andThen(wvlet.airframe.http.HttpContext<Req, Resp, F>);
    Code:
       0: new           #13                 // class wvlet/airframe/http/HttpContext$FilterAndThenContext
       3: dup
       4: aload_0
       5: invokeinterface #58,  1           // InterfaceMethod backend:()Lwvlet/airframe/http/HttpBackend;
      10: aload_0
      11: aload_1
      12: invokespecial #105                // Method wvlet/airframe/http/HttpContext$FilterAndThenContext."<init>":(Lwvlet/airframe/http/HttpBackend;Lwvlet/airframe/http/HttpFilter;Lwvlet/airframe/http/HttpContext;)V
      15: areturn

  public static void $init$(wvlet.airframe.http.HttpFilter);
    Code:
       0: return
}
