Compiled from "GenView.scala"
public interface de.sciss.proc.GenView<T extends de.sciss.lucre.Txn<T>> extends de.sciss.lucre.Observable<T, de.sciss.proc.GenView$State>, de.sciss.lucre.Disposable<T> {
  public static void addFactory(de.sciss.proc.GenView$Factory);
    Code:
       0: getstatic     #38                 // Field de/sciss/proc/GenView$.MODULE$:Lde/sciss/proc/GenView$;
       3: aload_0
       4: invokevirtual #40                 // Method de/sciss/proc/GenView$.addFactory:(Lde/sciss/proc/GenView$Factory;)V
       7: return

  public static <T extends de.sciss.lucre.synth.Txn<T>> de.sciss.proc.GenView<T> apply(de.sciss.lucre.Obj<T>, T, de.sciss.proc.Universe<T>);
    Code:
       0: getstatic     #38                 // Field de/sciss/proc/GenView$.MODULE$:Lde/sciss/proc/GenView$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #45                 // Method de/sciss/proc/GenView$.apply:(Lde/sciss/lucre/Obj;Lde/sciss/lucre/synth/Txn;Lde/sciss/proc/Universe;)Lde/sciss/proc/GenView;
       9: areturn

  public static scala.collection.Iterable<de.sciss.proc.GenView$Factory> factories();
    Code:
       0: getstatic     #38                 // Field de/sciss/proc/GenView$.MODULE$:Lde/sciss/proc/GenView$;
       3: invokevirtual #50                 // Method de/sciss/proc/GenView$.factories:()Lscala/collection/Iterable;
       6: areturn

  public static boolean tryAddFactory(de.sciss.proc.GenView$Factory);
    Code:
       0: getstatic     #38                 // Field de/sciss/proc/GenView$.MODULE$:Lde/sciss/proc/GenView$;
       3: aload_0
       4: invokevirtual #54                 // Method de/sciss/proc/GenView$.tryAddFactory:(Lde/sciss/proc/GenView$Factory;)Z
       7: ireturn

  public abstract int typeId();

  public abstract de.sciss.lucre.Disposable<T> reactNow(scala.Function1<T, scala.Function1<de.sciss.proc.GenView$State, scala.runtime.BoxedUnit>>, T);

  public abstract de.sciss.proc.GenView$State state(T);

  public abstract de.sciss.lucre.Obj$Type valueType();

  public abstract scala.Option<scala.util.Try<de.sciss.lucre.Obj<T>>> value(T);
}
