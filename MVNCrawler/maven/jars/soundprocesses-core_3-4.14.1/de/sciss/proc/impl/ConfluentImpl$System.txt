Compiled from "ConfluentImpl.scala"
final class de.sciss.proc.impl.ConfluentImpl$System implements de.sciss.lucre.confluent.impl.Mixin<de.sciss.proc.Confluent$Txn>, de.sciss.proc.Confluent {
  private de.sciss.lucre.DataStore store;

  private de.sciss.lucre.confluent.DurablePersistentMap de$sciss$lucre$confluent$impl$Mixin$$varMap;

  private de.sciss.lucre.confluent.CacheMap$Durable fullCache;

  private de.sciss.lucre.IdentMap eventMap;

  private de.sciss.lucre.confluent.impl.GlobalState de$sciss$lucre$confluent$impl$Mixin$$global;

  private de.sciss.lucre.Random de$sciss$lucre$confluent$impl$Mixin$$versionRandom;

  private final de.sciss.lucre.DataStore$Factory storeFactory;

  private final de.sciss.proc.Durable durable;

  public de.sciss.proc.impl.ConfluentImpl$System(de.sciss.lucre.DataStore$Factory, de.sciss.proc.Durable);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #70                 // Field storeFactory:Lde/sciss/lucre/DataStore$Factory;
       5: aload_0
       6: aload_2
       7: putfield      #72                 // Field durable:Lde/sciss/proc/Durable;
      10: aload_0
      11: invokespecial #75                 // Method java/lang/Object."<init>":()V
      14: aload_0
      15: invokestatic  #79                 // InterfaceMethod de/sciss/lucre/confluent/impl/Mixin.$init$:(Lde/sciss/lucre/confluent/impl/Mixin;)V
      18: invokestatic  #84                 // Method scala/runtime/Statics.releaseFence:()V
      21: return

  public de.sciss.lucre.ReactionMap reactionMap();
    Code:
       0: aload_0
       1: invokestatic  #92                 // InterfaceMethod de/sciss/lucre/impl/ReactionMapImpl$Mixin.reactionMap$:(Lde/sciss/lucre/impl/ReactionMapImpl$Mixin;)Lde/sciss/lucre/ReactionMap;
       4: areturn

  public boolean addEventReaction(de.sciss.lucre.Event, de.sciss.lucre.Observer, de.sciss.lucre.Txn);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #101                // InterfaceMethod de/sciss/lucre/impl/ReactionMapImpl$Mixin.addEventReaction$:(Lde/sciss/lucre/impl/ReactionMapImpl$Mixin;Lde/sciss/lucre/Event;Lde/sciss/lucre/Observer;Lde/sciss/lucre/Txn;)Z
       7: ireturn

  public boolean removeEventReaction(de.sciss.lucre.Event, de.sciss.lucre.Observer, de.sciss.lucre.Txn);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #108                // InterfaceMethod de/sciss/lucre/impl/ReactionMapImpl$Mixin.removeEventReaction$:(Lde/sciss/lucre/impl/ReactionMapImpl$Mixin;Lde/sciss/lucre/Event;Lde/sciss/lucre/Observer;Lde/sciss/lucre/Txn;)Z
       7: ireturn

  public scala.collection.immutable.List getEventReactions(de.sciss.lucre.Event, de.sciss.lucre.Txn);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #114                // InterfaceMethod de/sciss/lucre/impl/ReactionMapImpl$Mixin.getEventReactions$:(Lde/sciss/lucre/impl/ReactionMapImpl$Mixin;Lde/sciss/lucre/Event;Lde/sciss/lucre/Txn;)Lscala/collection/immutable/List;
       6: areturn

  public boolean hasEventReactions(de.sciss.lucre.Event, de.sciss.lucre.Txn);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #120                // InterfaceMethod de/sciss/lucre/impl/ReactionMapImpl$Mixin.hasEventReactions$:(Lde/sciss/lucre/impl/ReactionMapImpl$Mixin;Lde/sciss/lucre/Event;Lde/sciss/lucre/Txn;)Z
       6: ireturn

  public final de.sciss.lucre.DataStore store();
    Code:
       0: aload_0
       1: getfield      #123                // Field store:Lde/sciss/lucre/DataStore;
       4: areturn

  public de.sciss.lucre.confluent.DurablePersistentMap de$sciss$lucre$confluent$impl$Mixin$$varMap();
    Code:
       0: aload_0
       1: getfield      #126                // Field de$sciss$lucre$confluent$impl$Mixin$$varMap:Lde/sciss/lucre/confluent/DurablePersistentMap;
       4: areturn

  public final de.sciss.lucre.confluent.CacheMap$Durable fullCache();
    Code:
       0: aload_0
       1: getfield      #129                // Field fullCache:Lde/sciss/lucre/confluent/CacheMap$Durable;
       4: areturn

  public final de.sciss.lucre.IdentMap eventMap();
    Code:
       0: aload_0
       1: getfield      #132                // Field eventMap:Lde/sciss/lucre/IdentMap;
       4: areturn

  public de.sciss.lucre.confluent.impl.GlobalState de$sciss$lucre$confluent$impl$Mixin$$global();
    Code:
       0: aload_0
       1: getfield      #135                // Field de$sciss$lucre$confluent$impl$Mixin$$global:Lde/sciss/lucre/confluent/impl/GlobalState;
       4: areturn

  public de.sciss.lucre.Random de$sciss$lucre$confluent$impl$Mixin$$versionRandom();
    Code:
       0: aload_0
       1: getfield      #138                // Field de$sciss$lucre$confluent$impl$Mixin$$versionRandom:Lde/sciss/lucre/Random;
       4: areturn

  public void de$sciss$lucre$confluent$impl$Mixin$_setter_$store_$eq(de.sciss.lucre.DataStore);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #123                // Field store:Lde/sciss/lucre/DataStore;
       5: return

  public void de$sciss$lucre$confluent$impl$Mixin$_setter_$de$sciss$lucre$confluent$impl$Mixin$$varMap_$eq(de.sciss.lucre.confluent.DurablePersistentMap);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #126                // Field de$sciss$lucre$confluent$impl$Mixin$$varMap:Lde/sciss/lucre/confluent/DurablePersistentMap;
       5: return

  public void de$sciss$lucre$confluent$impl$Mixin$_setter_$fullCache_$eq(de.sciss.lucre.confluent.CacheMap$Durable);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #129                // Field fullCache:Lde/sciss/lucre/confluent/CacheMap$Durable;
       5: return

  public void de$sciss$lucre$confluent$impl$Mixin$_setter_$eventMap_$eq(de.sciss.lucre.IdentMap);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #132                // Field eventMap:Lde/sciss/lucre/IdentMap;
       5: return

  public void de$sciss$lucre$confluent$impl$Mixin$_setter_$de$sciss$lucre$confluent$impl$Mixin$$global_$eq(de.sciss.lucre.confluent.impl.GlobalState);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #135                // Field de$sciss$lucre$confluent$impl$Mixin$$global:Lde/sciss/lucre/confluent/impl/GlobalState;
       5: return

  public void de$sciss$lucre$confluent$impl$Mixin$_setter_$de$sciss$lucre$confluent$impl$Mixin$$versionRandom_$eq(de.sciss.lucre.Random);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #138                // Field de$sciss$lucre$confluent$impl$Mixin$$versionRandom:Lde/sciss/lucre/Random;
       5: return

  public java.lang.String toString();
    Code:
       0: aload_0
       1: invokestatic  #157                // InterfaceMethod de/sciss/lucre/confluent/impl/Mixin.toString$:(Lde/sciss/lucre/confluent/impl/Mixin;)Ljava/lang/String;
       4: areturn

  public de.sciss.lucre.confluent.IndexMapHandler indexMap();
    Code:
       0: aload_0
       1: invokestatic  #163                // InterfaceMethod de/sciss/lucre/confluent/impl/Mixin.indexMap$:(Lde/sciss/lucre/confluent/impl/Mixin;)Lde/sciss/lucre/confluent/IndexMapHandler;
       4: areturn

  public long newVersionId(de.sciss.lucre.confluent.Txn);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #169                // InterfaceMethod de/sciss/lucre/confluent/impl/Mixin.newVersionId$:(Lde/sciss/lucre/confluent/impl/Mixin;Lde/sciss/lucre/confluent/Txn;)J
       5: lreturn

  public int newIdValue(de.sciss.lucre.confluent.Txn);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #176                // InterfaceMethod de/sciss/lucre/confluent/impl/Mixin.newIdValue$:(Lde/sciss/lucre/confluent/impl/Mixin;Lde/sciss/lucre/confluent/Txn;)I
       5: ireturn

  public de.sciss.lucre.confluent.Txn createTxn(de.sciss.lucre.DurableLike$Txn, de.sciss.lucre.confluent.Access, boolean, de.sciss.lucre.confluent.Cache, long);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iload_3
       4: aload         4
       6: lload         5
       8: invokestatic  #187                // InterfaceMethod de/sciss/lucre/confluent/impl/Mixin.createTxn$:(Lde/sciss/lucre/confluent/impl/Mixin;Lde/sciss/lucre/DurableLike$Txn;Lde/sciss/lucre/confluent/Access;ZLde/sciss/lucre/confluent/Cache;J)Lde/sciss/lucre/confluent/Txn;
      11: areturn

  public de.sciss.lucre.confluent.Access readPath(de.sciss.serial.DataInput);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #199                // InterfaceMethod de/sciss/lucre/confluent/impl/Mixin.readPath$:(Lde/sciss/lucre/confluent/impl/Mixin;Lde/sciss/serial/DataInput;)Lde/sciss/lucre/confluent/Access;
       5: areturn

  public de.sciss.lucre.confluent.Cursor newCursor(de.sciss.lucre.confluent.Txn);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #206                // InterfaceMethod de/sciss/lucre/confluent/impl/Mixin.newCursor$:(Lde/sciss/lucre/confluent/impl/Mixin;Lde/sciss/lucre/confluent/Txn;)Lde/sciss/lucre/confluent/Cursor;
       5: areturn

  public de.sciss.lucre.confluent.Cursor newCursor(de.sciss.lucre.confluent.Access, de.sciss.lucre.confluent.Txn);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #211                // InterfaceMethod de/sciss/lucre/confluent/impl/Mixin.newCursor$:(Lde/sciss/lucre/confluent/impl/Mixin;Lde/sciss/lucre/confluent/Access;Lde/sciss/lucre/confluent/Txn;)Lde/sciss/lucre/confluent/Cursor;
       6: areturn

  public de.sciss.lucre.confluent.Cursor readCursor(de.sciss.serial.DataInput, de.sciss.lucre.confluent.Txn);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #217                // InterfaceMethod de/sciss/lucre/confluent/impl/Mixin.readCursor$:(Lde/sciss/lucre/confluent/impl/Mixin;Lde/sciss/serial/DataInput;Lde/sciss/lucre/confluent/Txn;)Lde/sciss/lucre/confluent/Cursor;
       6: areturn

  public de.sciss.lucre.confluent.Ref root(scala.Function1, de.sciss.serial.TFormat);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #224                // InterfaceMethod de/sciss/lucre/confluent/impl/Mixin.root$:(Lde/sciss/lucre/confluent/impl/Mixin;Lscala/Function1;Lde/sciss/serial/TFormat;)Lde/sciss/lucre/confluent/Ref;
       6: areturn

  public de.sciss.lucre.confluent.Ref rootJoin(scala.Function1, de.sciss.lucre.TxnLike, de.sciss.serial.TFormat);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #233                // InterfaceMethod de/sciss/lucre/confluent/impl/Mixin.rootJoin$:(Lde/sciss/lucre/confluent/impl/Mixin;Lscala/Function1;Lde/sciss/lucre/TxnLike;Lde/sciss/serial/TFormat;)Lde/sciss/lucre/confluent/Ref;
       7: areturn

  public scala.Tuple2 cursorRoot(scala.Function1, scala.Function1, de.sciss.serial.TFormat);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #241                // InterfaceMethod de/sciss/lucre/confluent/impl/Mixin.cursorRoot$:(Lde/sciss/lucre/confluent/impl/Mixin;Lscala/Function1;Lscala/Function1;Lde/sciss/serial/TFormat;)Lscala/Tuple2;
       7: areturn

  public scala.Tuple2 rootWithDurable(scala.Function1, scala.Function1, de.sciss.serial.TFormat, de.sciss.serial.TFormat);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #251                // InterfaceMethod de/sciss/lucre/confluent/impl/Mixin.rootWithDurable$:(Lde/sciss/lucre/confluent/impl/Mixin;Lscala/Function1;Lscala/Function1;Lde/sciss/serial/TFormat;Lde/sciss/serial/TFormat;)Lscala/Tuple2;
       9: areturn

  public void flushRoot(de.sciss.lucre.confluent.MeldInfo, boolean, scala.collection.immutable.IndexedSeq, de.sciss.lucre.confluent.Txn);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #260                // InterfaceMethod de/sciss/lucre/confluent/impl/Mixin.flushRoot$:(Lde/sciss/lucre/confluent/impl/Mixin;Lde/sciss/lucre/confluent/MeldInfo;ZLscala/collection/immutable/IndexedSeq;Lde/sciss/lucre/confluent/Txn;)V
       9: return

  public void flushRegular(de.sciss.lucre.confluent.MeldInfo, boolean, scala.collection.immutable.IndexedSeq, de.sciss.lucre.confluent.Txn);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #266                // InterfaceMethod de/sciss/lucre/confluent/impl/Mixin.flushRegular$:(Lde/sciss/lucre/confluent/impl/Mixin;Lde/sciss/lucre/confluent/MeldInfo;ZLscala/collection/immutable/IndexedSeq;Lde/sciss/lucre/confluent/Txn;)V
       9: return

  public de.sciss.lucre.confluent.VersionInfo versionInfo(long, de.sciss.lucre.TxnLike);
    Code:
       0: aload_0
       1: lload_1
       2: aload_3
       3: invokestatic  #273                // InterfaceMethod de/sciss/lucre/confluent/impl/Mixin.versionInfo$:(Lde/sciss/lucre/confluent/impl/Mixin;JLde/sciss/lucre/TxnLike;)Lde/sciss/lucre/confluent/VersionInfo;
       6: areturn

  public de.sciss.lucre.confluent.Access versionUntil(de.sciss.lucre.confluent.Access, long, de.sciss.lucre.confluent.Txn);
    Code:
       0: aload_0
       1: aload_1
       2: lload_2
       3: aload         4
       5: invokestatic  #281                // InterfaceMethod de/sciss/lucre/confluent/impl/Mixin.versionUntil$:(Lde/sciss/lucre/confluent/impl/Mixin;Lde/sciss/lucre/confluent/Access;JLde/sciss/lucre/confluent/Txn;)Lde/sciss/lucre/confluent/Access;
       8: areturn

  public void close();
    Code:
       0: aload_0
       1: invokestatic  #285                // InterfaceMethod de/sciss/lucre/confluent/impl/Mixin.close$:(Lde/sciss/lucre/confluent/impl/Mixin;)V
       4: return

  public int numRecords(de.sciss.lucre.confluent.Txn);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #289                // InterfaceMethod de/sciss/lucre/confluent/impl/Mixin.numRecords$:(Lde/sciss/lucre/confluent/impl/Mixin;Lde/sciss/lucre/confluent/Txn;)I
       5: ireturn

  public int numUserRecords(de.sciss.lucre.confluent.Txn);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #293                // InterfaceMethod de/sciss/lucre/confluent/impl/Mixin.numUserRecords$:(Lde/sciss/lucre/confluent/impl/Mixin;Lde/sciss/lucre/confluent/Txn;)I
       5: ireturn

  public java.lang.String debugPrintIndex(de.sciss.lucre.confluent.Access, de.sciss.lucre.confluent.Txn);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #300                // InterfaceMethod de/sciss/lucre/confluent/impl/Mixin.debugPrintIndex$:(Lde/sciss/lucre/confluent/impl/Mixin;Lde/sciss/lucre/confluent/Access;Lde/sciss/lucre/confluent/Txn;)Ljava/lang/String;
       6: areturn

  public scala.Tuple2 readTreeVertex(de.sciss.lucre.data.Ancestor$Tree, long, de.sciss.lucre.DurableLike$Txn);
    Code:
       0: aload_0
       1: aload_1
       2: lload_2
       3: aload         4
       5: invokestatic  #307                // InterfaceMethod de/sciss/lucre/confluent/impl/Mixin.readTreeVertex$:(Lde/sciss/lucre/confluent/impl/Mixin;Lde/sciss/lucre/data/Ancestor$Tree;JLde/sciss/lucre/DurableLike$Txn;)Lscala/Tuple2;
       8: areturn

  public de.sciss.lucre.confluent.IndexMap newIndexMap(de.sciss.lucre.confluent.Txn, long, java.lang.Object, de.sciss.lucre.confluent.Access, de.sciss.serial.ConstFormat);
    Code:
       0: aload_0
       1: aload_1
       2: lload_2
       3: aload         4
       5: aload         5
       7: aload         6
       9: invokestatic  #316                // InterfaceMethod de/sciss/lucre/confluent/impl/Mixin.newIndexMap$:(Lde/sciss/lucre/confluent/impl/Mixin;Lde/sciss/lucre/confluent/Txn;JLjava/lang/Object;Lde/sciss/lucre/confluent/Access;Lde/sciss/serial/ConstFormat;)Lde/sciss/lucre/confluent/IndexMap;
      12: areturn

  public de.sciss.lucre.confluent.IndexMap readIndexMap(de.sciss.serial.DataInput, de.sciss.lucre.confluent.Txn, de.sciss.lucre.confluent.Access, de.sciss.serial.ConstFormat);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #324                // InterfaceMethod de/sciss/lucre/confluent/impl/Mixin.readIndexMap$:(Lde/sciss/lucre/confluent/impl/Mixin;Lde/sciss/serial/DataInput;Lde/sciss/lucre/confluent/Txn;Lde/sciss/lucre/confluent/Access;Lde/sciss/serial/ConstFormat;)Lde/sciss/lucre/confluent/IndexMap;
       9: areturn

  public boolean isAncestor(long, long, de.sciss.lucre.confluent.Txn);
    Code:
       0: aload_0
       1: lload_1
       2: lload_3
       3: aload         5
       5: invokestatic  #332                // InterfaceMethod de/sciss/lucre/confluent/impl/Mixin.isAncestor$:(Lde/sciss/lucre/confluent/impl/Mixin;JJLde/sciss/lucre/confluent/Txn;)Z
       8: ireturn

  public long getIndexTreeTerm(long, de.sciss.lucre.confluent.Txn);
    Code:
       0: aload_0
       1: lload_1
       2: aload_3
       3: invokestatic  #338                // InterfaceMethod de/sciss/lucre/confluent/impl/Mixin.getIndexTreeTerm$:(Lde/sciss/lucre/confluent/impl/Mixin;JLde/sciss/lucre/confluent/Txn;)J
       6: lreturn

  public de.sciss.lucre.confluent.IndexMap newPartialMap(java.lang.Object, de.sciss.lucre.confluent.Txn, de.sciss.serial.ConstFormat);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #344                // InterfaceMethod de/sciss/lucre/confluent/impl/Mixin.newPartialMap$:(Lde/sciss/lucre/confluent/impl/Mixin;Ljava/lang/Object;Lde/sciss/lucre/confluent/Txn;Lde/sciss/serial/ConstFormat;)Lde/sciss/lucre/confluent/IndexMap;
       7: areturn

  public de.sciss.lucre.confluent.IndexMap readPartialMap(de.sciss.serial.DataInput, de.sciss.lucre.confluent.Txn, de.sciss.serial.ConstFormat);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #350                // InterfaceMethod de/sciss/lucre/confluent/impl/Mixin.readPartialMap$:(Lde/sciss/lucre/confluent/impl/Mixin;Lde/sciss/serial/DataInput;Lde/sciss/lucre/confluent/Txn;Lde/sciss/serial/ConstFormat;)Lde/sciss/lucre/confluent/IndexMap;
       7: areturn

  public de.sciss.lucre.DataStore$Factory storeFactory();
    Code:
       0: aload_0
       1: getfield      #70                 // Field storeFactory:Lde/sciss/lucre/DataStore$Factory;
       4: areturn

  public de.sciss.proc.Durable durable();
    Code:
       0: aload_0
       1: getfield      #72                 // Field durable:Lde/sciss/proc/Durable;
       4: areturn

  public de.sciss.lucre.synth.InMemory inMemory();
    Code:
       0: aload_0
       1: invokevirtual #356                // Method durable:()Lde/sciss/proc/Durable;
       4: invokeinterface #358,  1          // InterfaceMethod de/sciss/proc/Durable.inMemory:()Lde/sciss/lucre/synth/InMemory;
       9: areturn

  public de.sciss.proc.Durable$Txn durableTx(de.sciss.proc.Confluent$Txn);
    Code:
       0: aload_1
       1: invokeinterface #363,  1          // InterfaceMethod de/sciss/proc/Confluent$Txn.durable:()Lde/sciss/lucre/DurableLike$Txn;
       6: checkcast     #39                 // class de/sciss/proc/Durable$Txn
       9: areturn

  public de.sciss.proc.Confluent$Txn wrapRegular(de.sciss.proc.Durable$Txn, de.sciss.lucre.confluent.Access<de.sciss.proc.Confluent$Txn>, boolean, de.sciss.lucre.confluent.Cache<de.sciss.proc.Confluent$Txn>, long);
    Code:
       0: new           #43                 // class de/sciss/proc/impl/ConfluentImpl$RegularTxn
       3: dup
       4: aload_0
       5: aload_1
       6: aload_2
       7: iload_3
       8: aload         4
      10: lload         5
      12: invokespecial #370                // Method de/sciss/proc/impl/ConfluentImpl$RegularTxn."<init>":(Lde/sciss/proc/Confluent;Lde/sciss/proc/Durable$Txn;Lde/sciss/lucre/confluent/Access;ZLde/sciss/lucre/confluent/Cache;J)V
      15: areturn

  public de.sciss.proc.Confluent$Txn wrapRoot(scala.concurrent.stm.InTxn);
    Code:
       0: new           #48                 // class de/sciss/proc/impl/ConfluentImpl$RootTxn
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #377                // Method de/sciss/proc/impl/ConfluentImpl$RootTxn."<init>":(Lde/sciss/proc/Confluent;Lscala/concurrent/stm/InTxn;)V
       9: areturn

  public de.sciss.lucre.DurableLike durable();
    Code:
       0: aload_0
       1: invokevirtual #356                // Method durable:()Lde/sciss/proc/Durable;
       4: areturn

  public de.sciss.lucre.InMemoryLike inMemory();
    Code:
       0: aload_0
       1: invokevirtual #381                // Method inMemory:()Lde/sciss/lucre/synth/InMemory;
       4: areturn

  public de.sciss.lucre.DurableLike$Txn durableTx(de.sciss.lucre.confluent.Txn);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #37                 // class de/sciss/proc/Confluent$Txn
       5: invokevirtual #384                // Method durableTx:(Lde/sciss/proc/Confluent$Txn;)Lde/sciss/proc/Durable$Txn;
       8: areturn

  public de.sciss.lucre.confluent.Txn wrapRegular(de.sciss.lucre.DurableLike$Txn, de.sciss.lucre.confluent.Access, boolean, de.sciss.lucre.confluent.Cache, long);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #39                 // class de/sciss/proc/Durable$Txn
       5: aload_2
       6: iload_3
       7: aload         4
       9: lload         5
      11: invokevirtual #386                // Method wrapRegular:(Lde/sciss/proc/Durable$Txn;Lde/sciss/lucre/confluent/Access;ZLde/sciss/lucre/confluent/Cache;J)Lde/sciss/proc/Confluent$Txn;
      14: areturn

  public de.sciss.lucre.confluent.Txn wrapRoot(scala.concurrent.stm.InTxn);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #389                // Method wrapRoot:(Lscala/concurrent/stm/InTxn;)Lde/sciss/proc/Confluent$Txn;
       5: areturn

  public de.sciss.lucre.Source root(scala.Function1, de.sciss.serial.TFormat);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #392                // Method root:(Lscala/Function1;Lde/sciss/serial/TFormat;)Lde/sciss/lucre/confluent/Ref;
       6: areturn

  public de.sciss.lucre.Source rootJoin(scala.Function1, de.sciss.lucre.TxnLike, de.sciss.serial.TFormat);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokevirtual #395                // Method rootJoin:(Lscala/Function1;Lde/sciss/lucre/TxnLike;Lde/sciss/serial/TFormat;)Lde/sciss/lucre/confluent/Ref;
       7: areturn

  public long getIndexTreeTerm(long, java.lang.Object);
    Code:
       0: aload_0
       1: lload_1
       2: aload_3
       3: checkcast     #398                // class de/sciss/lucre/confluent/Txn
       6: invokevirtual #400                // Method getIndexTreeTerm:(JLde/sciss/lucre/confluent/Txn;)J
       9: lreturn

  public de.sciss.lucre.confluent.IndexMap newPartialMap(java.lang.Object, java.lang.Object, de.sciss.serial.ConstFormat);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: checkcast     #398                // class de/sciss/lucre/confluent/Txn
       6: aload_3
       7: invokevirtual #403                // Method newPartialMap:(Ljava/lang/Object;Lde/sciss/lucre/confluent/Txn;Lde/sciss/serial/ConstFormat;)Lde/sciss/lucre/confluent/IndexMap;
      10: areturn

  public de.sciss.lucre.confluent.IndexMap readPartialMap(de.sciss.serial.DataInput, java.lang.Object, de.sciss.serial.ConstFormat);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: checkcast     #398                // class de/sciss/lucre/confluent/Txn
       6: aload_3
       7: invokevirtual #406                // Method readPartialMap:(Lde/sciss/serial/DataInput;Lde/sciss/lucre/confluent/Txn;Lde/sciss/serial/ConstFormat;)Lde/sciss/lucre/confluent/IndexMap;
      10: areturn
}
