Compiled from "ConfluentImpl.scala"
final class de.sciss.proc.impl.ConfluentImpl$RegularTxn implements de.sciss.lucre.confluent.impl.RegularTxnMixin<de.sciss.proc.Confluent$Txn, de.sciss.proc.Durable$Txn, de.sciss.lucre.synth.InMemory$Txn>, de.sciss.proc.impl.ConfluentImpl$TxnImpl {
  public static final long OFFSET$0;

  private java.lang.String message;

  private long timeStamp;

  private de.sciss.lucre.confluent.MeldInfo de$sciss$lucre$confluent$impl$TxnMixin$$meld;

  private scala.collection.immutable.Vector de$sciss$lucre$confluent$impl$TxnMixin$$dirtyMaps;

  private scala.collection.immutable.Queue de$sciss$lucre$confluent$impl$TxnMixin$$beforeCommitFuns;

  private boolean de$sciss$lucre$confluent$impl$TxnMixin$$markDirtyFlag;

  private boolean de$sciss$lucre$confluent$impl$TxnMixin$$markNewVersionFlag;

  private boolean de$sciss$lucre$confluent$impl$TxnMixin$$markBeforeCommitFlag;

  private de.sciss.lucre.confluent.Access de$sciss$lucre$confluent$impl$TxnMixin$$_readAccess;

  private scala.collection.immutable.Map de$sciss$lucre$synth$impl$RTImpl$$bundlesMap;

  public de.sciss.lucre.synth.InMemory$Txn inMemory$lzy1;

  public long 0bitmap$1;

  private final de.sciss.proc.Confluent system;

  private final de.sciss.proc.Durable$Txn durable;

  private final de.sciss.lucre.confluent.Access inputAccess;

  private final boolean isRetroactive;

  private final de.sciss.lucre.confluent.Cache cursorCache;

  private final long systemTimeNanoSec;

  public scala.concurrent.stm.InTxn peer$lzy1;

  public de.sciss.proc.impl.ConfluentImpl$RegularTxn(de.sciss.proc.Confluent, de.sciss.proc.Durable$Txn, de.sciss.lucre.confluent.Access<de.sciss.proc.Confluent$Txn>, boolean, de.sciss.lucre.confluent.Cache<de.sciss.proc.Confluent$Txn>, long);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #89                 // Field system:Lde/sciss/proc/Confluent;
       5: aload_0
       6: aload_2
       7: putfield      #91                 // Field durable:Lde/sciss/proc/Durable$Txn;
      10: aload_0
      11: aload_3
      12: putfield      #93                 // Field inputAccess:Lde/sciss/lucre/confluent/Access;
      15: aload_0
      16: iload         4
      18: putfield      #95                 // Field isRetroactive:Z
      21: aload_0
      22: aload         5
      24: putfield      #97                 // Field cursorCache:Lde/sciss/lucre/confluent/Cache;
      27: aload_0
      28: lload         6
      30: putfield      #99                 // Field systemTimeNanoSec:J
      33: aload_0
      34: invokespecial #102                // Method java/lang/Object."<init>":()V
      37: aload_0
      38: invokestatic  #106                // InterfaceMethod de/sciss/lucre/confluent/impl/TxnMixin.$init$:(Lde/sciss/lucre/confluent/impl/TxnMixin;)V
      41: aload_0
      42: invokestatic  #109                // InterfaceMethod de/sciss/lucre/synth/impl/RTImpl.$init$:(Lde/sciss/lucre/synth/impl/RTImpl;)V
      45: aload_0
      46: invokestatic  #112                // InterfaceMethod de/sciss/proc/impl/ConfluentImpl$TxnImpl.$init$:(Lde/sciss/proc/impl/ConfluentImpl$TxnImpl;)V
      49: invokestatic  #117                // Method scala/runtime/Statics.releaseFence:()V
      52: return

  private static {};
    Code:
       0: getstatic     #126                // Field scala/runtime/LazyVals$.MODULE$:Lscala/runtime/LazyVals$;
       3: ldc           #2                  // class de/sciss/proc/impl/ConfluentImpl$RegularTxn
       5: ldc           #127                // String 0bitmap$1
       7: invokevirtual #131                // Method scala/runtime/LazyVals$.getOffset:(Ljava/lang/Class;Ljava/lang/String;)J
      10: putstatic     #133                // Field OFFSET$0:J
      13: return

  public void afterCommit(scala.Function0);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #140                // InterfaceMethod de/sciss/lucre/impl/BasicTxnImpl.afterCommit$:(Lde/sciss/lucre/impl/BasicTxnImpl;Lscala/Function0;)V
       5: return

  public de.sciss.lucre.RefMap newInMemoryMap();
    Code:
       0: aload_0
       1: invokestatic  #147                // InterfaceMethod de/sciss/lucre/impl/BasicTxnImpl.newInMemoryMap$:(Lde/sciss/lucre/impl/BasicTxnImpl;)Lde/sciss/lucre/RefMap;
       4: areturn

  public de.sciss.lucre.RefSet newInMemorySet();
    Code:
       0: aload_0
       1: invokestatic  #153                // InterfaceMethod de/sciss/lucre/impl/BasicTxnImpl.newInMemorySet$:(Lde/sciss/lucre/impl/BasicTxnImpl;)Lde/sciss/lucre/RefSet;
       4: areturn

  public de.sciss.lucre.Ref newRef(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #160                // InterfaceMethod de/sciss/lucre/impl/BasicTxnImpl.newRef$:(Lde/sciss/lucre/impl/BasicTxnImpl;Ljava/lang/Object;)Lde/sciss/lucre/Ref;
       5: areturn

  public java.lang.String message();
    Code:
       0: aload_0
       1: getfield      #164                // Field message:Ljava/lang/String;
       4: areturn

  public final long timeStamp();
    Code:
       0: aload_0
       1: getfield      #167                // Field timeStamp:J
       4: lreturn

  public de.sciss.lucre.confluent.MeldInfo de$sciss$lucre$confluent$impl$TxnMixin$$meld();
    Code:
       0: aload_0
       1: getfield      #170                // Field de$sciss$lucre$confluent$impl$TxnMixin$$meld:Lde/sciss/lucre/confluent/MeldInfo;
       4: areturn

  public scala.collection.immutable.Vector de$sciss$lucre$confluent$impl$TxnMixin$$dirtyMaps();
    Code:
       0: aload_0
       1: getfield      #173                // Field de$sciss$lucre$confluent$impl$TxnMixin$$dirtyMaps:Lscala/collection/immutable/Vector;
       4: areturn

  public scala.collection.immutable.Queue de$sciss$lucre$confluent$impl$TxnMixin$$beforeCommitFuns();
    Code:
       0: aload_0
       1: getfield      #176                // Field de$sciss$lucre$confluent$impl$TxnMixin$$beforeCommitFuns:Lscala/collection/immutable/Queue;
       4: areturn

  public boolean de$sciss$lucre$confluent$impl$TxnMixin$$markDirtyFlag();
    Code:
       0: aload_0
       1: getfield      #179                // Field de$sciss$lucre$confluent$impl$TxnMixin$$markDirtyFlag:Z
       4: ireturn

  public boolean de$sciss$lucre$confluent$impl$TxnMixin$$markNewVersionFlag();
    Code:
       0: aload_0
       1: getfield      #181                // Field de$sciss$lucre$confluent$impl$TxnMixin$$markNewVersionFlag:Z
       4: ireturn

  public boolean de$sciss$lucre$confluent$impl$TxnMixin$$markBeforeCommitFlag();
    Code:
       0: aload_0
       1: getfield      #183                // Field de$sciss$lucre$confluent$impl$TxnMixin$$markBeforeCommitFlag:Z
       4: ireturn

  public de.sciss.lucre.confluent.Access de$sciss$lucre$confluent$impl$TxnMixin$$_readAccess();
    Code:
       0: aload_0
       1: getfield      #186                // Field de$sciss$lucre$confluent$impl$TxnMixin$$_readAccess:Lde/sciss/lucre/confluent/Access;
       4: areturn

  public void message_$eq(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #164                // Field message:Ljava/lang/String;
       5: return

  public void de$sciss$lucre$confluent$impl$TxnMixin$$meld_$eq(de.sciss.lucre.confluent.MeldInfo);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #170                // Field de$sciss$lucre$confluent$impl$TxnMixin$$meld:Lde/sciss/lucre/confluent/MeldInfo;
       5: return

  public void de$sciss$lucre$confluent$impl$TxnMixin$$dirtyMaps_$eq(scala.collection.immutable.Vector);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #173                // Field de$sciss$lucre$confluent$impl$TxnMixin$$dirtyMaps:Lscala/collection/immutable/Vector;
       5: return

  public void de$sciss$lucre$confluent$impl$TxnMixin$$beforeCommitFuns_$eq(scala.collection.immutable.Queue);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #176                // Field de$sciss$lucre$confluent$impl$TxnMixin$$beforeCommitFuns:Lscala/collection/immutable/Queue;
       5: return

  public void de$sciss$lucre$confluent$impl$TxnMixin$$markDirtyFlag_$eq(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #179                // Field de$sciss$lucre$confluent$impl$TxnMixin$$markDirtyFlag:Z
       5: return

  public void de$sciss$lucre$confluent$impl$TxnMixin$$markNewVersionFlag_$eq(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #181                // Field de$sciss$lucre$confluent$impl$TxnMixin$$markNewVersionFlag:Z
       5: return

  public void de$sciss$lucre$confluent$impl$TxnMixin$$markBeforeCommitFlag_$eq(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #183                // Field de$sciss$lucre$confluent$impl$TxnMixin$$markBeforeCommitFlag:Z
       5: return

  public void de$sciss$lucre$confluent$impl$TxnMixin$$_readAccess_$eq(de.sciss.lucre.confluent.Access);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #186                // Field de$sciss$lucre$confluent$impl$TxnMixin$$_readAccess:Lde/sciss/lucre/confluent/Access;
       5: return

  public void de$sciss$lucre$confluent$impl$TxnMixin$_setter_$timeStamp_$eq(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #167                // Field timeStamp:J
       5: return

  public de.sciss.lucre.Cursor inMemoryCursor();
    Code:
       0: aload_0
       1: invokestatic  #210                // InterfaceMethod de/sciss/lucre/confluent/impl/TxnMixin.inMemoryCursor$:(Lde/sciss/lucre/confluent/impl/TxnMixin;)Lde/sciss/lucre/Cursor;
       4: areturn

  public de.sciss.lucre.ReactionMap reactionMap();
    Code:
       0: aload_0
       1: invokestatic  #216                // InterfaceMethod de/sciss/lucre/confluent/impl/TxnMixin.reactionMap$:(Lde/sciss/lucre/confluent/impl/TxnMixin;)Lde/sciss/lucre/ReactionMap;
       4: areturn

  public de.sciss.lucre.confluent.VersionInfo$Modifiable info();
    Code:
       0: aload_0
       1: invokestatic  #222                // InterfaceMethod de/sciss/lucre/confluent/impl/TxnMixin.info$:(Lde/sciss/lucre/confluent/impl/TxnMixin;)Lde/sciss/lucre/confluent/VersionInfo$Modifiable;
       4: areturn

  public de.sciss.lucre.confluent.MeldInfo meldInfo();
    Code:
       0: aload_0
       1: invokestatic  #227                // InterfaceMethod de/sciss/lucre/confluent/impl/TxnMixin.meldInfo$:(Lde/sciss/lucre/confluent/impl/TxnMixin;)Lde/sciss/lucre/confluent/MeldInfo;
       4: areturn

  public void addDirtyCache(de.sciss.lucre.confluent.Cache);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #234                // InterfaceMethod de/sciss/lucre/confluent/impl/TxnMixin.addDirtyCache$:(Lde/sciss/lucre/confluent/impl/TxnMixin;Lde/sciss/lucre/confluent/Cache;)V
       5: return

  public void addDirtyLocalCache(de.sciss.lucre.confluent.Cache);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #238                // InterfaceMethod de/sciss/lucre/confluent/impl/TxnMixin.addDirtyLocalCache$:(Lde/sciss/lucre/confluent/impl/TxnMixin;Lde/sciss/lucre/confluent/Cache;)V
       5: return

  public void beforeCommit(scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #245                // InterfaceMethod de/sciss/lucre/confluent/impl/TxnMixin.beforeCommit$:(Lde/sciss/lucre/confluent/impl/TxnMixin;Lscala/Function1;)V
       5: return

  public de.sciss.lucre.confluent.CacheMap$Durable fullCache();
    Code:
       0: aload_0
       1: invokestatic  #252                // InterfaceMethod de/sciss/lucre/confluent/impl/TxnMixin.fullCache$:(Lde/sciss/lucre/confluent/impl/TxnMixin;)Lde/sciss/lucre/confluent/CacheMap$Durable;
       4: areturn

  public de.sciss.lucre.confluent.Ident newId();
    Code:
       0: aload_0
       1: invokestatic  #258                // InterfaceMethod de/sciss/lucre/confluent/impl/TxnMixin.newId$:(Lde/sciss/lucre/confluent/impl/TxnMixin;)Lde/sciss/lucre/confluent/Ident;
       4: areturn

  public java.lang.Object withReadAccess(de.sciss.lucre.confluent.Access, scala.Function0);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #266                // InterfaceMethod de/sciss/lucre/confluent/impl/TxnMixin.withReadAccess$:(Lde/sciss/lucre/confluent/impl/TxnMixin;Lde/sciss/lucre/confluent/Access;Lscala/Function0;)Ljava/lang/Object;
       6: areturn

  public de.sciss.lucre.confluent.Access readAccess();
    Code:
       0: aload_0
       1: invokestatic  #271                // InterfaceMethod de/sciss/lucre/confluent/impl/TxnMixin.readAccess$:(Lde/sciss/lucre/confluent/impl/TxnMixin;)Lde/sciss/lucre/confluent/Access;
       4: areturn

  public de.sciss.lucre.MapObj$Modifiable attrMap(de.sciss.lucre.Obj);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #278                // InterfaceMethod de/sciss/lucre/confluent/impl/TxnMixin.attrMap$:(Lde/sciss/lucre/confluent/impl/TxnMixin;Lde/sciss/lucre/Obj;)Lde/sciss/lucre/MapObj$Modifiable;
       5: areturn

  public scala.Option attrMapOption(de.sciss.lucre.Obj);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #285                // InterfaceMethod de/sciss/lucre/confluent/impl/TxnMixin.attrMapOption$:(Lde/sciss/lucre/confluent/impl/TxnMixin;Lde/sciss/lucre/Obj;)Lscala/Option;
       5: areturn

  public int readTreeVertexLevel(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokestatic  #292                // InterfaceMethod de/sciss/lucre/confluent/impl/TxnMixin.readTreeVertexLevel$:(Lde/sciss/lucre/confluent/impl/TxnMixin;J)I
       5: ireturn

  public void addInputVersion(de.sciss.lucre.confluent.Access);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #297                // InterfaceMethod de/sciss/lucre/confluent/impl/TxnMixin.addInputVersion$:(Lde/sciss/lucre/confluent/impl/TxnMixin;Lde/sciss/lucre/confluent/Access;)V
       5: return

  public de.sciss.lucre.confluent.Source newHandle(java.lang.Object, de.sciss.serial.TFormat);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #305                // InterfaceMethod de/sciss/lucre/confluent/impl/TxnMixin.newHandle$:(Lde/sciss/lucre/confluent/impl/TxnMixin;Ljava/lang/Object;Lde/sciss/serial/TFormat;)Lde/sciss/lucre/confluent/Source;
       6: areturn

  public de.sciss.lucre.confluent.Source newHandleM(java.lang.Object, de.sciss.serial.TFormat);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #310                // InterfaceMethod de/sciss/lucre/confluent/impl/TxnMixin.newHandleM$:(Lde/sciss/lucre/confluent/impl/TxnMixin;Ljava/lang/Object;Lde/sciss/serial/TFormat;)Lde/sciss/lucre/confluent/Source;
       6: areturn

  public java.lang.Object getNonTxn(de.sciss.lucre.confluent.Ident, de.sciss.serial.ConstFormat);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #317                // InterfaceMethod de/sciss/lucre/confluent/impl/TxnMixin.getNonTxn$:(Lde/sciss/lucre/confluent/impl/TxnMixin;Lde/sciss/lucre/confluent/Ident;Lde/sciss/serial/ConstFormat;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object getTxn(de.sciss.lucre.confluent.Ident, de.sciss.serial.TFormat);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #325                // InterfaceMethod de/sciss/lucre/confluent/impl/TxnMixin.getTxn$:(Lde/sciss/lucre/confluent/impl/TxnMixin;Lde/sciss/lucre/confluent/Ident;Lde/sciss/serial/TFormat;)Ljava/lang/Object;
       6: areturn

  public void putTxn(de.sciss.lucre.confluent.Ident, java.lang.Object, de.sciss.serial.TFormat);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #331                // InterfaceMethod de/sciss/lucre/confluent/impl/TxnMixin.putTxn$:(Lde/sciss/lucre/confluent/impl/TxnMixin;Lde/sciss/lucre/confluent/Ident;Ljava/lang/Object;Lde/sciss/serial/TFormat;)V
       7: return

  public void putNonTxn(de.sciss.lucre.confluent.Ident, java.lang.Object, de.sciss.serial.ConstFormat);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #337                // InterfaceMethod de/sciss/lucre/confluent/impl/TxnMixin.putNonTxn$:(Lde/sciss/lucre/confluent/impl/TxnMixin;Lde/sciss/lucre/confluent/Ident;Ljava/lang/Object;Lde/sciss/serial/ConstFormat;)V
       7: return

  public void removeFromCache(de.sciss.lucre.confluent.Ident);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #343                // InterfaceMethod de/sciss/lucre/confluent/impl/TxnMixin.removeFromCache$:(Lde/sciss/lucre/confluent/impl/TxnMixin;Lde/sciss/lucre/confluent/Ident;)V
       5: return

  public de.sciss.lucre.IdentMap newIdentMap();
    Code:
       0: aload_0
       1: invokestatic  #349                // InterfaceMethod de/sciss/lucre/confluent/impl/TxnMixin.newIdentMap$:(Lde/sciss/lucre/confluent/impl/TxnMixin;)Lde/sciss/lucre/IdentMap;
       4: areturn

  public de.sciss.lucre.confluent.Ident readId(de.sciss.serial.DataInput);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #356                // InterfaceMethod de/sciss/lucre/confluent/impl/TxnMixin.readId$:(Lde/sciss/lucre/confluent/impl/TxnMixin;Lde/sciss/serial/DataInput;)Lde/sciss/lucre/confluent/Ident;
       5: areturn

  public void flushCaches(de.sciss.lucre.confluent.MeldInfo, boolean, scala.collection.immutable.IndexedSeq);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: aload_3
       4: invokestatic  #365                // InterfaceMethod de/sciss/lucre/confluent/impl/RegularTxnMixin.flushCaches$:(Lde/sciss/lucre/confluent/impl/RegularTxnMixin;Lde/sciss/lucre/confluent/MeldInfo;ZLscala/collection/immutable/IndexedSeq;)V
       7: return

  public java.lang.String toString();
    Code:
       0: aload_0
       1: invokestatic  #371                // InterfaceMethod de/sciss/lucre/confluent/impl/RegularTxnMixin.toString$:(Lde/sciss/lucre/confluent/impl/RegularTxnMixin;)Ljava/lang/String;
       4: areturn

  public scala.collection.immutable.Seq addMessage$default$3();
    Code:
       0: aload_0
       1: invokestatic  #377                // InterfaceMethod de/sciss/lucre/synth/RT.addMessage$default$3$:(Lde/sciss/lucre/synth/RT;)Lscala/collection/immutable/Seq;
       4: areturn

  public scala.collection.immutable.Map de$sciss$lucre$synth$impl$RTImpl$$bundlesMap();
    Code:
       0: aload_0
       1: getfield      #380                // Field de$sciss$lucre$synth$impl$RTImpl$$bundlesMap:Lscala/collection/immutable/Map;
       4: areturn

  public void de$sciss$lucre$synth$impl$RTImpl$$bundlesMap_$eq(scala.collection.immutable.Map);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #380                // Field de$sciss$lucre$synth$impl$RTImpl$$bundlesMap:Lscala/collection/immutable/Map;
       5: return

  public void flush();
    Code:
       0: aload_0
       1: invokestatic  #386                // InterfaceMethod de/sciss/lucre/synth/impl/RTImpl.flush$:(Lde/sciss/lucre/synth/impl/RTImpl;)V
       4: return

  public void addMessage(de.sciss.lucre.synth.Resource, de.sciss.osc.Message, scala.collection.immutable.Seq);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #395                // InterfaceMethod de/sciss/lucre/synth/impl/RTImpl.addMessage$:(Lde/sciss/lucre/synth/impl/RTImpl;Lde/sciss/lucre/synth/Resource;Lde/sciss/osc/Message;Lscala/collection/immutable/Seq;)V
       7: return

  public void markBundlesDirty();
    Code:
       0: aload_0
       1: invokestatic  #403                // InterfaceMethod de/sciss/lucre/synth/impl/TxnFullImpl.markBundlesDirty$:(Lde/sciss/lucre/synth/impl/TxnFullImpl;)V
       4: return

  public final de.sciss.lucre.synth.InMemory$Txn inMemory();
    Code:
       0: getstatic     #126                // Field scala/runtime/LazyVals$.MODULE$:Lscala/runtime/LazyVals$;
       3: aload_0
       4: getstatic     #133                // Field OFFSET$0:J
       7: invokevirtual #411                // Method scala/runtime/LazyVals$.get:(Ljava/lang/Object;J)J
      10: lstore_1
      11: getstatic     #126                // Field scala/runtime/LazyVals$.MODULE$:Lscala/runtime/LazyVals$;
      14: lload_1
      15: iconst_1
      16: invokevirtual #415                // Method scala/runtime/LazyVals$.STATE:(JI)J
      19: lstore_3
      20: lload_3
      21: ldc2_w        #416                // long 3l
      24: lcmp
      25: ifne          36
      28: aload_0
      29: getfield      #419                // Field inMemory$lzy1:Lde/sciss/lucre/synth/InMemory$Txn;
      32: areturn
      33: nop
      34: nop
      35: athrow
      36: lload_3
      37: lconst_0
      38: lcmp
      39: ifne          112
      42: getstatic     #126                // Field scala/runtime/LazyVals$.MODULE$:Lscala/runtime/LazyVals$;
      45: aload_0
      46: getstatic     #133                // Field OFFSET$0:J
      49: lload_1
      50: iconst_1
      51: iconst_1
      52: invokevirtual #423                // Method scala/runtime/LazyVals$.CAS:(Ljava/lang/Object;JJII)Z
      55: ifeq          109
      58: aload_0
      59: invokestatic  #427                // InterfaceMethod de/sciss/proc/impl/ConfluentImpl$TxnImpl.inMemory$:(Lde/sciss/proc/impl/ConfluentImpl$TxnImpl;)Lde/sciss/lucre/synth/InMemory$Txn;
      62: astore        5
      64: aload_0
      65: aload         5
      67: putfield      #419                // Field inMemory$lzy1:Lde/sciss/lucre/synth/InMemory$Txn;
      70: getstatic     #126                // Field scala/runtime/LazyVals$.MODULE$:Lscala/runtime/LazyVals$;
      73: aload_0
      74: getstatic     #133                // Field OFFSET$0:J
      77: iconst_3
      78: iconst_1
      79: invokevirtual #431                // Method scala/runtime/LazyVals$.setFlag:(Ljava/lang/Object;JII)V
      82: aload         5
      84: areturn
      85: nop
      86: nop
      87: athrow
      88: astore        6
      90: getstatic     #126                // Field scala/runtime/LazyVals$.MODULE$:Lscala/runtime/LazyVals$;
      93: aload_0
      94: getstatic     #133                // Field OFFSET$0:J
      97: iconst_0
      98: iconst_1
      99: invokevirtual #431                // Method scala/runtime/LazyVals$.setFlag:(Ljava/lang/Object;JII)V
     102: aload         6
     104: athrow
     105: nop
     106: nop
     107: athrow
     108: athrow
     109: goto          124
     112: getstatic     #126                // Field scala/runtime/LazyVals$.MODULE$:Lscala/runtime/LazyVals$;
     115: aload_0
     116: getstatic     #133                // Field OFFSET$0:J
     119: lload_1
     120: iconst_1
     121: invokevirtual #435                // Method scala/runtime/LazyVals$.wait4Notification:(Ljava/lang/Object;JJI)V
     124: goto          0
     127: nop
     128: athrow
    Exception table:
       from    to  target type
          58    85    88   Class java/lang/Throwable

  public scala.Function1 inMemoryBridge();
    Code:
       0: aload_0
       1: invokestatic  #441                // InterfaceMethod de/sciss/proc/impl/ConfluentImpl$TxnImpl.inMemoryBridge$:(Lde/sciss/proc/impl/ConfluentImpl$TxnImpl;)Lscala/Function1;
       4: areturn

  public scala.Function1 durableBridge();
    Code:
       0: aload_0
       1: invokestatic  #445                // InterfaceMethod de/sciss/proc/impl/ConfluentImpl$TxnImpl.durableBridge$:(Lde/sciss/proc/impl/ConfluentImpl$TxnImpl;)Lscala/Function1;
       4: areturn

  public de.sciss.proc.Confluent system();
    Code:
       0: aload_0
       1: getfield      #89                 // Field system:Lde/sciss/proc/Confluent;
       4: areturn

  public de.sciss.proc.Durable$Txn durable();
    Code:
       0: aload_0
       1: getfield      #91                 // Field durable:Lde/sciss/proc/Durable$Txn;
       4: areturn

  public de.sciss.lucre.confluent.Access<de.sciss.proc.Confluent$Txn> inputAccess();
    Code:
       0: aload_0
       1: getfield      #93                 // Field inputAccess:Lde/sciss/lucre/confluent/Access;
       4: areturn

  public boolean isRetroactive();
    Code:
       0: aload_0
       1: getfield      #95                 // Field isRetroactive:Z
       4: ireturn

  public de.sciss.lucre.confluent.Cache<de.sciss.proc.Confluent$Txn> cursorCache();
    Code:
       0: aload_0
       1: getfield      #97                 // Field cursorCache:Lde/sciss/lucre/confluent/Cache;
       4: areturn

  public long systemTimeNanoSec();
    Code:
       0: aload_0
       1: getfield      #99                 // Field systemTimeNanoSec:J
       4: lreturn

  public scala.concurrent.stm.InTxn peer();
    Code:
       0: getstatic     #126                // Field scala/runtime/LazyVals$.MODULE$:Lscala/runtime/LazyVals$;
       3: aload_0
       4: getstatic     #133                // Field OFFSET$0:J
       7: invokevirtual #411                // Method scala/runtime/LazyVals$.get:(Ljava/lang/Object;J)J
      10: lstore_1
      11: getstatic     #126                // Field scala/runtime/LazyVals$.MODULE$:Lscala/runtime/LazyVals$;
      14: lload_1
      15: iconst_0
      16: invokevirtual #415                // Method scala/runtime/LazyVals$.STATE:(JI)J
      19: lstore_3
      20: lload_3
      21: ldc2_w        #416                // long 3l
      24: lcmp
      25: ifne          36
      28: aload_0
      29: getfield      #454                // Field peer$lzy1:Lscala/concurrent/stm/InTxn;
      32: areturn
      33: nop
      34: nop
      35: athrow
      36: lload_3
      37: lconst_0
      38: lcmp
      39: ifne          117
      42: getstatic     #126                // Field scala/runtime/LazyVals$.MODULE$:Lscala/runtime/LazyVals$;
      45: aload_0
      46: getstatic     #133                // Field OFFSET$0:J
      49: lload_1
      50: iconst_1
      51: iconst_0
      52: invokevirtual #423                // Method scala/runtime/LazyVals$.CAS:(Ljava/lang/Object;JJII)Z
      55: ifeq          114
      58: aload_0
      59: invokevirtual #456                // Method durable:()Lde/sciss/proc/Durable$Txn;
      62: invokeinterface #458,  1          // InterfaceMethod de/sciss/proc/Durable$Txn.peer:()Lscala/concurrent/stm/InTxn;
      67: astore        5
      69: aload_0
      70: aload         5
      72: putfield      #454                // Field peer$lzy1:Lscala/concurrent/stm/InTxn;
      75: getstatic     #126                // Field scala/runtime/LazyVals$.MODULE$:Lscala/runtime/LazyVals$;
      78: aload_0
      79: getstatic     #133                // Field OFFSET$0:J
      82: iconst_3
      83: iconst_0
      84: invokevirtual #431                // Method scala/runtime/LazyVals$.setFlag:(Ljava/lang/Object;JII)V
      87: aload         5
      89: areturn
      90: nop
      91: nop
      92: athrow
      93: astore        6
      95: getstatic     #126                // Field scala/runtime/LazyVals$.MODULE$:Lscala/runtime/LazyVals$;
      98: aload_0
      99: getstatic     #133                // Field OFFSET$0:J
     102: iconst_0
     103: iconst_0
     104: invokevirtual #431                // Method scala/runtime/LazyVals$.setFlag:(Ljava/lang/Object;JII)V
     107: aload         6
     109: athrow
     110: nop
     111: nop
     112: athrow
     113: athrow
     114: goto          129
     117: getstatic     #126                // Field scala/runtime/LazyVals$.MODULE$:Lscala/runtime/LazyVals$;
     120: aload_0
     121: getstatic     #133                // Field OFFSET$0:J
     124: lload_1
     125: iconst_0
     126: invokevirtual #435                // Method scala/runtime/LazyVals$.wait4Notification:(Ljava/lang/Object;JJI)V
     129: goto          0
     132: nop
     133: athrow
    Exception table:
       from    to  target type
          58    90    93   Class java/lang/Throwable

  public de.sciss.lucre.ConfluentLike system();
    Code:
       0: aload_0
       1: invokevirtual #461                // Method system:()Lde/sciss/proc/Confluent;
       4: areturn

  public de.sciss.lucre.Sys system();
    Code:
       0: aload_0
       1: invokevirtual #461                // Method system:()Lde/sciss/proc/Confluent;
       4: areturn

  public de.sciss.lucre.Base system();
    Code:
       0: aload_0
       1: invokevirtual #461                // Method system:()Lde/sciss/proc/Confluent;
       4: areturn

  public de.sciss.lucre.DurableLike$Txn durable();
    Code:
       0: aload_0
       1: invokevirtual #456                // Method durable:()Lde/sciss/proc/Durable$Txn;
       4: areturn

  public de.sciss.lucre.Exec inMemory();
    Code:
       0: aload_0
       1: invokevirtual #467                // Method inMemory:()Lde/sciss/lucre/synth/InMemory$Txn;
       4: areturn

  public de.sciss.lucre.Ident newId();
    Code:
       0: aload_0
       1: invokevirtual #470                // Method newId:()Lde/sciss/lucre/confluent/Ident;
       4: areturn

  public de.sciss.lucre.Source newHandle(java.lang.Object, de.sciss.serial.TFormat);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #473                // Method newHandle:(Ljava/lang/Object;Lde/sciss/serial/TFormat;)Lde/sciss/lucre/confluent/Source;
       6: areturn

  public de.sciss.lucre.Ident readId(de.sciss.serial.DataInput);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #476                // Method readId:(Lde/sciss/serial/DataInput;)Lde/sciss/lucre/confluent/Ident;
       5: areturn
}
