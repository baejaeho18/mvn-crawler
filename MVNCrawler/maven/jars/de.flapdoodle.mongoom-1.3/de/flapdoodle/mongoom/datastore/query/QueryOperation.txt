Compiled from "QueryOperation.java"
public class de.flapdoodle.mongoom.datastore.query.QueryOperation<T, Q extends de.flapdoodle.mongoom.IQuery<T>, V> extends de.flapdoodle.mongoom.datastore.query.AbstractQueryOperation<T, Q, V> implements de.flapdoodle.mongoom.IQueryOperation<T, Q, V> {
  public de.flapdoodle.mongoom.datastore.query.QueryOperation(Q, de.flapdoodle.mongoom.datastore.factories.IDBObjectFactory, de.flapdoodle.mongoom.datastore.query.MappedNameTransformation);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokespecial #1                  // Method de/flapdoodle/mongoom/datastore/query/AbstractQueryOperation."<init>":(Lde/flapdoodle/mongoom/IQuery;Lde/flapdoodle/mongoom/datastore/factories/IDBObjectFactory;Lde/flapdoodle/mongoom/datastore/query/MappedNameTransformation;)V
       7: return

  public <V> de.flapdoodle.mongoom.IQueryOperation<T, Q, V> field(de.flapdoodle.mongoom.mapping.properties.PropertyReference<V>);
    Code:
       0: new           #2                  // class de/flapdoodle/mongoom/datastore/query/QueryOperation
       3: dup
       4: aload_0
       5: getfield      #3                  // Field _query:Lde/flapdoodle/mongoom/IQuery;
       8: aload_0
       9: getfield      #4                  // Field _queryBuilder:Lde/flapdoodle/mongoom/datastore/factories/IDBObjectFactory;
      12: aload_1
      13: aload_0
      14: getfield      #5                  // Field _transformation:Lde/flapdoodle/mongoom/mapping/ITransformation;
      17: aload_0
      18: getfield      #6                  // Field _name:Lde/flapdoodle/mongoom/mapping/properties/IPropertyMappedName;
      21: invokestatic  #7                  // Method de/flapdoodle/mongoom/datastore/query/Queries.getConverter:(Lde/flapdoodle/mongoom/mapping/properties/PropertyReference;Lde/flapdoodle/mongoom/mapping/ITransformation;Lde/flapdoodle/mongoom/mapping/properties/IPropertyMappedName;)Lde/flapdoodle/mongoom/datastore/query/MappedNameTransformation;
      24: invokespecial #8                  // Method "<init>":(Lde/flapdoodle/mongoom/IQuery;Lde/flapdoodle/mongoom/datastore/factories/IDBObjectFactory;Lde/flapdoodle/mongoom/datastore/query/MappedNameTransformation;)V
      27: areturn

  public <C extends java.util.Collection<V>, V> de.flapdoodle.mongoom.IListQueryOperation<T, Q, V> listfield(de.flapdoodle.mongoom.mapping.properties.PropertyReference<C>);
    Code:
       0: new           #9                  // class de/flapdoodle/mongoom/datastore/query/ListQueryOperation
       3: dup
       4: aload_0
       5: getfield      #3                  // Field _query:Lde/flapdoodle/mongoom/IQuery;
       8: aload_0
       9: getfield      #4                  // Field _queryBuilder:Lde/flapdoodle/mongoom/datastore/factories/IDBObjectFactory;
      12: aload_1
      13: aload_0
      14: getfield      #5                  // Field _transformation:Lde/flapdoodle/mongoom/mapping/ITransformation;
      17: aload_0
      18: getfield      #6                  // Field _name:Lde/flapdoodle/mongoom/mapping/properties/IPropertyMappedName;
      21: invokestatic  #7                  // Method de/flapdoodle/mongoom/datastore/query/Queries.getConverter:(Lde/flapdoodle/mongoom/mapping/properties/PropertyReference;Lde/flapdoodle/mongoom/mapping/ITransformation;Lde/flapdoodle/mongoom/mapping/properties/IPropertyMappedName;)Lde/flapdoodle/mongoom/datastore/query/MappedNameTransformation;
      24: invokespecial #10                 // Method de/flapdoodle/mongoom/datastore/query/ListQueryOperation."<init>":(Lde/flapdoodle/mongoom/IQuery;Lde/flapdoodle/mongoom/datastore/factories/IDBObjectFactory;Lde/flapdoodle/mongoom/datastore/query/MappedNameTransformation;)V
      27: areturn

  public de.flapdoodle.mongoom.IQueryOperation<T, Q, V> not();
    Code:
       0: aload_0
       1: getfield      #11                 // Field _not:Z
       4: ifeq          17
       7: new           #12                 // class de/flapdoodle/mongoom/exceptions/MappingException
      10: dup
      11: ldc           #13                 // String not.not does not make any sense
      13: invokespecial #14                 // Method de/flapdoodle/mongoom/exceptions/MappingException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: aload_0
      19: getfield      #11                 // Field _not:Z
      22: ifne          29
      25: iconst_1
      26: goto          30
      29: iconst_0
      30: putfield      #11                 // Field _not:Z
      33: aload_0
      34: areturn

  public Q eq(V);
    Code:
       0: aload_0
       1: getfield      #11                 // Field _not:Z
       4: ifeq          17
       7: new           #12                 // class de/flapdoodle/mongoom/exceptions/MappingException
      10: dup
      11: ldc           #15                 // String use ne instead of not.eq
      13: invokespecial #14                 // Method de/flapdoodle/mongoom/exceptions/MappingException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: getfield      #4                  // Field _queryBuilder:Lde/flapdoodle/mongoom/datastore/factories/IDBObjectFactory;
      21: aload_0
      22: getfield      #16                 // Field _field:Ljava/lang/String;
      25: aload_0
      26: iconst_0
      27: invokevirtual #17                 // Method getConverter:(Z)Lde/flapdoodle/mongoom/mapping/ITransformation;
      30: aload_1
      31: invokestatic  #18                 // Method asObject:(Lde/flapdoodle/mongoom/mapping/ITransformation;Ljava/lang/Object;)Ljava/lang/Object;
      34: invokeinterface #19,  3           // InterfaceMethod de/flapdoodle/mongoom/datastore/factories/IDBObjectFactory.set:(Ljava/lang/String;Ljava/lang/Object;)Lde/flapdoodle/mongoom/datastore/factories/IDBObjectFactory;
      39: pop
      40: aload_0
      41: getfield      #3                  // Field _query:Lde/flapdoodle/mongoom/IQuery;
      44: areturn

  public Q match(java.util.regex.Pattern);
    Code:
       0: aload_0
       1: iconst_0
       2: invokevirtual #17                 // Method getConverter:(Z)Lde/flapdoodle/mongoom/mapping/ITransformation;
       5: ldc           #20                 // String
       7: invokestatic  #18                 // Method asObject:(Lde/flapdoodle/mongoom/mapping/ITransformation;Ljava/lang/Object;)Ljava/lang/Object;
      10: pop
      11: aload_0
      12: getfield      #4                  // Field _queryBuilder:Lde/flapdoodle/mongoom/datastore/factories/IDBObjectFactory;
      15: aload_0
      16: getfield      #16                 // Field _field:Ljava/lang/String;
      19: invokeinterface #21,  2           // InterfaceMethod de/flapdoodle/mongoom/datastore/factories/IDBObjectFactory.get:(Ljava/lang/String;)Lde/flapdoodle/mongoom/datastore/factories/IDBObjectFactory;
      24: astore_2
      25: aload_0
      26: getfield      #11                 // Field _not:Z
      29: ifeq          41
      32: aload_2
      33: ldc           #22                 // String $not
      35: invokeinterface #21,  2           // InterfaceMethod de/flapdoodle/mongoom/datastore/factories/IDBObjectFactory.get:(Ljava/lang/String;)Lde/flapdoodle/mongoom/datastore/factories/IDBObjectFactory;
      40: astore_2
      41: aload_2
      42: aload_0
      43: getfield      #16                 // Field _field:Ljava/lang/String;
      46: aload_1
      47: invokeinterface #19,  3           // InterfaceMethod de/flapdoodle/mongoom/datastore/factories/IDBObjectFactory.set:(Ljava/lang/String;Ljava/lang/Object;)Lde/flapdoodle/mongoom/datastore/factories/IDBObjectFactory;
      52: pop
      53: aload_0
      54: getfield      #3                  // Field _query:Lde/flapdoodle/mongoom/IQuery;
      57: areturn

  public Q exists(boolean);
    Code:
       0: aload_0
       1: getfield      #11                 // Field _not:Z
       4: ifeq          47
       7: new           #12                 // class de/flapdoodle/mongoom/exceptions/MappingException
      10: dup
      11: new           #23                 // class java/lang/StringBuilder
      14: dup
      15: invokespecial #24                 // Method java/lang/StringBuilder."<init>":()V
      18: ldc           #25                 // String use exists(
      20: invokevirtual #26                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      23: iload_1
      24: ifne          31
      27: iconst_1
      28: goto          32
      31: iconst_0
      32: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Z)Ljava/lang/StringBuilder;
      35: ldc           #28                 // String ) instead
      37: invokevirtual #26                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      40: invokevirtual #29                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      43: invokespecial #14                 // Method de/flapdoodle/mongoom/exceptions/MappingException."<init>":(Ljava/lang/String;)V
      46: athrow
      47: aload_0
      48: getfield      #4                  // Field _queryBuilder:Lde/flapdoodle/mongoom/datastore/factories/IDBObjectFactory;
      51: aload_0
      52: getfield      #16                 // Field _field:Ljava/lang/String;
      55: invokeinterface #21,  2           // InterfaceMethod de/flapdoodle/mongoom/datastore/factories/IDBObjectFactory.get:(Ljava/lang/String;)Lde/flapdoodle/mongoom/datastore/factories/IDBObjectFactory;
      60: astore_2
      61: aload_2
      62: ldc           #30                 // String $exists
      64: iload_1
      65: invokestatic  #31                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      68: invokeinterface #19,  3           // InterfaceMethod de/flapdoodle/mongoom/datastore/factories/IDBObjectFactory.set:(Ljava/lang/String;Ljava/lang/Object;)Lde/flapdoodle/mongoom/datastore/factories/IDBObjectFactory;
      73: pop
      74: aload_0
      75: getfield      #3                  // Field _query:Lde/flapdoodle/mongoom/IQuery;
      78: areturn

  public Q size(int);
    Code:
       0: aload_0
       1: getfield      #4                  // Field _queryBuilder:Lde/flapdoodle/mongoom/datastore/factories/IDBObjectFactory;
       4: aload_0
       5: getfield      #16                 // Field _field:Ljava/lang/String;
       8: invokeinterface #21,  2           // InterfaceMethod de/flapdoodle/mongoom/datastore/factories/IDBObjectFactory.get:(Ljava/lang/String;)Lde/flapdoodle/mongoom/datastore/factories/IDBObjectFactory;
      13: astore_2
      14: aload_0
      15: getfield      #11                 // Field _not:Z
      18: ifeq          30
      21: aload_2
      22: ldc           #22                 // String $not
      24: invokeinterface #21,  2           // InterfaceMethod de/flapdoodle/mongoom/datastore/factories/IDBObjectFactory.get:(Ljava/lang/String;)Lde/flapdoodle/mongoom/datastore/factories/IDBObjectFactory;
      29: astore_2
      30: aload_2
      31: ldc           #32                 // String $size
      33: iload_1
      34: invokestatic  #33                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      37: invokeinterface #19,  3           // InterfaceMethod de/flapdoodle/mongoom/datastore/factories/IDBObjectFactory.set:(Ljava/lang/String;Ljava/lang/Object;)Lde/flapdoodle/mongoom/datastore/factories/IDBObjectFactory;
      42: pop
      43: aload_0
      44: getfield      #3                  // Field _query:Lde/flapdoodle/mongoom/IQuery;
      47: areturn

  public <V> Q type(java.lang.Class<?>);
    Code:
       0: aload_1
       1: invokestatic  #34                 // Method de/flapdoodle/mongoom/mapping/BSONType.getType:(Ljava/lang/Class;)Lde/flapdoodle/mongoom/mapping/BSONType;
       4: astore_2
       5: aload_2
       6: ifnonnull     41
       9: new           #12                 // class de/flapdoodle/mongoom/exceptions/MappingException
      12: dup
      13: new           #23                 // class java/lang/StringBuilder
      16: dup
      17: invokespecial #24                 // Method java/lang/StringBuilder."<init>":()V
      20: ldc           #35                 // String Could not convert
      22: invokevirtual #26                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      25: aload_1
      26: invokevirtual #36                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      29: ldc           #37                 // String  to BSON Type
      31: invokevirtual #26                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      34: invokevirtual #29                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      37: invokespecial #14                 // Method de/flapdoodle/mongoom/exceptions/MappingException."<init>":(Ljava/lang/String;)V
      40: athrow
      41: aload_0
      42: getfield      #4                  // Field _queryBuilder:Lde/flapdoodle/mongoom/datastore/factories/IDBObjectFactory;
      45: aload_0
      46: getfield      #16                 // Field _field:Ljava/lang/String;
      49: invokeinterface #21,  2           // InterfaceMethod de/flapdoodle/mongoom/datastore/factories/IDBObjectFactory.get:(Ljava/lang/String;)Lde/flapdoodle/mongoom/datastore/factories/IDBObjectFactory;
      54: astore_3
      55: aload_0
      56: getfield      #11                 // Field _not:Z
      59: ifeq          71
      62: aload_3
      63: ldc           #22                 // String $not
      65: invokeinterface #21,  2           // InterfaceMethod de/flapdoodle/mongoom/datastore/factories/IDBObjectFactory.get:(Ljava/lang/String;)Lde/flapdoodle/mongoom/datastore/factories/IDBObjectFactory;
      70: astore_3
      71: aload_3
      72: ldc           #38                 // String $type
      74: aload_2
      75: invokevirtual #39                 // Method de/flapdoodle/mongoom/mapping/BSONType.code:()I
      78: invokestatic  #33                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      81: invokeinterface #19,  3           // InterfaceMethod de/flapdoodle/mongoom/datastore/factories/IDBObjectFactory.set:(Ljava/lang/String;Ljava/lang/Object;)Lde/flapdoodle/mongoom/datastore/factories/IDBObjectFactory;
      86: pop
      87: aload_0
      88: getfield      #3                  // Field _query:Lde/flapdoodle/mongoom/IQuery;
      91: areturn

  public Q mod(int, int);
    Code:
       0: aload_0
       1: ldc           #40                 // String $mod
       3: iconst_0
       4: iconst_2
       5: anewarray     #41                 // class java/lang/Integer
       8: dup
       9: iconst_0
      10: iload_1
      11: invokestatic  #33                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      14: aastore
      15: dup
      16: iconst_1
      17: iload_2
      18: invokestatic  #33                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      21: aastore
      22: invokestatic  #42                 // Method com/google/common/collect/Lists.newArrayList:([Ljava/lang/Object;)Ljava/util/ArrayList;
      25: invokevirtual #43                 // Method opList:(Ljava/lang/String;ZLjava/util/Collection;)Lde/flapdoodle/mongoom/IQuery;
      28: areturn

  public Q in(V...);
    Code:
       0: aload_0
       1: getfield      #11                 // Field _not:Z
       4: ifeq          17
       7: new           #12                 // class de/flapdoodle/mongoom/exceptions/MappingException
      10: dup
      11: ldc           #44                 // String use nin instead of not.in
      13: invokespecial #14                 // Method de/flapdoodle/mongoom/exceptions/MappingException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: ldc           #45                 // String $in
      20: iconst_1
      21: aload_1
      22: invokevirtual #46                 // Method opList:(Ljava/lang/String;Z[Ljava/lang/Object;)Lde/flapdoodle/mongoom/IQuery;
      25: areturn

  public Q in(java.util.Collection<V>);
    Code:
       0: aload_0
       1: getfield      #11                 // Field _not:Z
       4: ifeq          17
       7: new           #12                 // class de/flapdoodle/mongoom/exceptions/MappingException
      10: dup
      11: ldc           #44                 // String use nin instead of not.in
      13: invokespecial #14                 // Method de/flapdoodle/mongoom/exceptions/MappingException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: ldc           #45                 // String $in
      20: iconst_1
      21: aload_1
      22: invokevirtual #43                 // Method opList:(Ljava/lang/String;ZLjava/util/Collection;)Lde/flapdoodle/mongoom/IQuery;
      25: areturn

  public Q all(V...);
    Code:
       0: aload_0
       1: ldc           #47                 // String $all
       3: iconst_1
       4: aload_1
       5: invokevirtual #46                 // Method opList:(Ljava/lang/String;Z[Ljava/lang/Object;)Lde/flapdoodle/mongoom/IQuery;
       8: areturn

  public Q all(java.util.Collection<V>);
    Code:
       0: aload_0
       1: ldc           #47                 // String $all
       3: iconst_1
       4: aload_1
       5: invokevirtual #43                 // Method opList:(Ljava/lang/String;ZLjava/util/Collection;)Lde/flapdoodle/mongoom/IQuery;
       8: areturn

  public Q nin(V...);
    Code:
       0: aload_0
       1: getfield      #11                 // Field _not:Z
       4: ifeq          17
       7: new           #12                 // class de/flapdoodle/mongoom/exceptions/MappingException
      10: dup
      11: ldc           #48                 // String use in instead of not.nin
      13: invokespecial #14                 // Method de/flapdoodle/mongoom/exceptions/MappingException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: ldc           #49                 // String $nin
      20: iconst_1
      21: aload_1
      22: invokevirtual #46                 // Method opList:(Ljava/lang/String;Z[Ljava/lang/Object;)Lde/flapdoodle/mongoom/IQuery;
      25: areturn

  public Q nin(java.util.Collection<V>);
    Code:
       0: aload_0
       1: getfield      #11                 // Field _not:Z
       4: ifeq          17
       7: new           #12                 // class de/flapdoodle/mongoom/exceptions/MappingException
      10: dup
      11: ldc           #48                 // String use in instead of not.nin
      13: invokespecial #14                 // Method de/flapdoodle/mongoom/exceptions/MappingException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: ldc           #49                 // String $nin
      20: iconst_1
      21: aload_1
      22: invokevirtual #43                 // Method opList:(Ljava/lang/String;ZLjava/util/Collection;)Lde/flapdoodle/mongoom/IQuery;
      25: areturn

  public Q ne(V);
    Code:
       0: aload_0
       1: getfield      #11                 // Field _not:Z
       4: ifeq          17
       7: new           #12                 // class de/flapdoodle/mongoom/exceptions/MappingException
      10: dup
      11: ldc           #50                 // String use eq instead of not.ne
      13: invokespecial #14                 // Method de/flapdoodle/mongoom/exceptions/MappingException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: ldc           #51                 // String $ne
      20: iconst_1
      21: aload_1
      22: invokevirtual #52                 // Method op:(Ljava/lang/String;ZLjava/lang/Object;)Lde/flapdoodle/mongoom/IQuery;
      25: areturn

  public Q gt(V);
    Code:
       0: aload_0
       1: getfield      #11                 // Field _not:Z
       4: ifeq          17
       7: new           #12                 // class de/flapdoodle/mongoom/exceptions/MappingException
      10: dup
      11: ldc           #53                 // String use lte instead of not.gt
      13: invokespecial #14                 // Method de/flapdoodle/mongoom/exceptions/MappingException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: ldc           #54                 // String $gt
      20: iconst_1
      21: aload_1
      22: invokevirtual #52                 // Method op:(Ljava/lang/String;ZLjava/lang/Object;)Lde/flapdoodle/mongoom/IQuery;
      25: areturn

  public Q lt(V);
    Code:
       0: aload_0
       1: getfield      #11                 // Field _not:Z
       4: ifeq          17
       7: new           #12                 // class de/flapdoodle/mongoom/exceptions/MappingException
      10: dup
      11: ldc           #55                 // String use gte instead of not.lt
      13: invokespecial #14                 // Method de/flapdoodle/mongoom/exceptions/MappingException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: ldc           #56                 // String $lt
      20: iconst_1
      21: aload_1
      22: invokevirtual #52                 // Method op:(Ljava/lang/String;ZLjava/lang/Object;)Lde/flapdoodle/mongoom/IQuery;
      25: areturn

  public Q gte(V);
    Code:
       0: aload_0
       1: getfield      #11                 // Field _not:Z
       4: ifeq          17
       7: new           #12                 // class de/flapdoodle/mongoom/exceptions/MappingException
      10: dup
      11: ldc           #57                 // String use lt instead of not.gte
      13: invokespecial #14                 // Method de/flapdoodle/mongoom/exceptions/MappingException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: ldc           #58                 // String $gte
      20: iconst_1
      21: aload_1
      22: invokevirtual #52                 // Method op:(Ljava/lang/String;ZLjava/lang/Object;)Lde/flapdoodle/mongoom/IQuery;
      25: areturn

  public Q lte(V);
    Code:
       0: aload_0
       1: getfield      #11                 // Field _not:Z
       4: ifeq          17
       7: new           #12                 // class de/flapdoodle/mongoom/exceptions/MappingException
      10: dup
      11: ldc           #59                 // String use gt instead of not.lte
      13: invokespecial #14                 // Method de/flapdoodle/mongoom/exceptions/MappingException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: ldc           #60                 // String $lte
      20: iconst_1
      21: aload_1
      22: invokevirtual #52                 // Method op:(Ljava/lang/String;ZLjava/lang/Object;)Lde/flapdoodle/mongoom/IQuery;
      25: areturn

  public de.flapdoodle.mongoom.datastore.query.SubQuery<T, Q> elemMatch();
    Code:
       0: aload_0
       1: getfield      #5                  // Field _transformation:Lde/flapdoodle/mongoom/mapping/ITransformation;
       4: instanceof    #61                 // class de/flapdoodle/mongoom/mapping/IContainerTransformation
       7: ifeq          54
      10: new           #62                 // class de/flapdoodle/mongoom/datastore/query/SubQuery
      13: dup
      14: aload_0
      15: getfield      #3                  // Field _query:Lde/flapdoodle/mongoom/IQuery;
      18: aload_0
      19: getfield      #5                  // Field _transformation:Lde/flapdoodle/mongoom/mapping/ITransformation;
      22: checkcast     #61                 // class de/flapdoodle/mongoom/mapping/IContainerTransformation
      25: invokeinterface #63,  1           // InterfaceMethod de/flapdoodle/mongoom/mapping/IContainerTransformation.containerConverter:()Lde/flapdoodle/mongoom/mapping/ITransformation;
      30: aload_0
      31: getfield      #4                  // Field _queryBuilder:Lde/flapdoodle/mongoom/datastore/factories/IDBObjectFactory;
      34: aload_0
      35: getfield      #16                 // Field _field:Ljava/lang/String;
      38: invokeinterface #21,  2           // InterfaceMethod de/flapdoodle/mongoom/datastore/factories/IDBObjectFactory.get:(Ljava/lang/String;)Lde/flapdoodle/mongoom/datastore/factories/IDBObjectFactory;
      43: ldc           #64                 // String $elemMatch
      45: invokeinterface #21,  2           // InterfaceMethod de/flapdoodle/mongoom/datastore/factories/IDBObjectFactory.get:(Ljava/lang/String;)Lde/flapdoodle/mongoom/datastore/factories/IDBObjectFactory;
      50: invokespecial #65                 // Method de/flapdoodle/mongoom/datastore/query/SubQuery."<init>":(Lde/flapdoodle/mongoom/IQuery;Lde/flapdoodle/mongoom/mapping/ITransformation;Lde/flapdoodle/mongoom/datastore/factories/IDBObjectFactory;)V
      53: areturn
      54: new           #12                 // class de/flapdoodle/mongoom/exceptions/MappingException
      57: dup
      58: new           #23                 // class java/lang/StringBuilder
      61: dup
      62: invokespecial #24                 // Method java/lang/StringBuilder."<init>":()V
      65: ldc           #66                 // String Field
      67: invokevirtual #26                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      70: aload_0
      71: getfield      #16                 // Field _field:Ljava/lang/String;
      74: invokevirtual #26                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      77: ldc           #67                 // String  is not an List
      79: invokevirtual #26                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      82: invokevirtual #29                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      85: invokespecial #14                 // Method de/flapdoodle/mongoom/exceptions/MappingException."<init>":(Ljava/lang/String;)V
      88: athrow

  public de.flapdoodle.mongoom.ISubQuery elemMatch();
    Code:
       0: aload_0
       1: invokevirtual #68                 // Method elemMatch:()Lde/flapdoodle/mongoom/datastore/query/SubQuery;
       4: areturn
}
