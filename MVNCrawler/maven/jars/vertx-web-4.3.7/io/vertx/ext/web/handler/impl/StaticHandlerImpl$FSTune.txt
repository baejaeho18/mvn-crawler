Compiled from "StaticHandlerImpl.java"
class io.vertx.ext.web.handler.impl.StaticHandlerImpl$FSTune {
  private static final int NUM_SERVES_TUNING_FS_ACCESS;

  private volatile boolean enabled;

  private volatile boolean useAsyncFS;

  private long totalTime;

  private long numServesBlocking;

  private long nextAvgCheck;

  private long maxAvgServeTimeNanoSeconds;

  private boolean alwaysAsyncFS;

  private io.vertx.ext.web.handler.impl.StaticHandlerImpl$FSTune();
    Code:
       0: aload_0
       1: invokespecial #4                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #5                  // Field enabled:Z
       9: aload_0
      10: ldc2_w        #7                  // long 1000l
      13: putfield      #9                  // Field nextAvgCheck:J
      16: aload_0
      17: ldc2_w        #10                 // long 1000000l
      20: putfield      #2                  // Field maxAvgServeTimeNanoSeconds:J
      23: aload_0
      24: iconst_0
      25: putfield      #12                 // Field alwaysAsyncFS:Z
      28: return

  boolean enabled();
    Code:
       0: aload_0
       1: getfield      #5                  // Field enabled:Z
       4: ireturn

  boolean useAsyncFS();
    Code:
       0: aload_0
       1: getfield      #12                 // Field alwaysAsyncFS:Z
       4: ifne          14
       7: aload_0
       8: getfield      #13                 // Field useAsyncFS:Z
      11: ifeq          18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: ireturn

  synchronized void setEnabled(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #5                  // Field enabled:Z
       5: iload_1
       6: ifne          13
       9: aload_0
      10: invokevirtual #14                 // Method reset:()V
      13: return

  void setAlwaysAsyncFS(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #12                 // Field alwaysAsyncFS:Z
       5: return

  synchronized void update(long, long);
    Code:
       0: lload_3
       1: lload_1
       2: lsub
       3: lstore        5
       5: aload_0
       6: dup
       7: getfield      #15                 // Field totalTime:J
      10: lload         5
      12: ladd
      13: putfield      #15                 // Field totalTime:J
      16: aload_0
      17: dup
      18: getfield      #16                 // Field numServesBlocking:J
      21: lconst_1
      22: ladd
      23: putfield      #16                 // Field numServesBlocking:J
      26: aload_0
      27: getfield      #16                 // Field numServesBlocking:J
      30: ldc2_w        #18                 // long 9223372036854775807l
      33: lcmp
      34: ifne          44
      37: aload_0
      38: invokevirtual #14                 // Method reset:()V
      41: goto          146
      44: aload_0
      45: getfield      #16                 // Field numServesBlocking:J
      48: aload_0
      49: getfield      #9                  // Field nextAvgCheck:J
      52: lcmp
      53: ifne          146
      56: aload_0
      57: getfield      #15                 // Field totalTime:J
      60: l2d
      61: aload_0
      62: getfield      #16                 // Field numServesBlocking:J
      65: l2d
      66: ddiv
      67: dstore        7
      69: dload         7
      71: aload_0
      72: getfield      #2                  // Field maxAvgServeTimeNanoSeconds:J
      75: l2d
      76: dcmpl
      77: ifle          134
      80: aload_0
      81: iconst_1
      82: putfield      #13                 // Field useAsyncFS:Z
      85: invokestatic  #20                 // Method io/vertx/ext/web/handler/impl/StaticHandlerImpl.access$200:()Lio/vertx/core/impl/logging/Logger;
      88: invokeinterface #21,  1           // InterfaceMethod io/vertx/core/impl/logging/Logger.isInfoEnabled:()Z
      93: ifeq          129
      96: invokestatic  #20                 // Method io/vertx/ext/web/handler/impl/StaticHandlerImpl.access$200:()Lio/vertx/core/impl/logging/Logger;
      99: new           #22                 // class java/lang/StringBuilder
     102: dup
     103: invokespecial #23                 // Method java/lang/StringBuilder."<init>":()V
     106: ldc           #24                 // String Switching to async file system access in static file server as fs access is slow! (Average access time of
     108: invokevirtual #25                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     111: dload         7
     113: invokevirtual #26                 // Method java/lang/StringBuilder.append:(D)Ljava/lang/StringBuilder;
     116: ldc           #27                 // String  ns)
     118: invokevirtual #25                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     121: invokevirtual #28                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     124: invokeinterface #29,  2           // InterfaceMethod io/vertx/core/impl/logging/Logger.info:(Ljava/lang/Object;)V
     129: aload_0
     130: iconst_0
     131: putfield      #5                  // Field enabled:Z
     134: aload_0
     135: dup
     136: getfield      #9                  // Field nextAvgCheck:J
     139: ldc2_w        #7                  // long 1000l
     142: ladd
     143: putfield      #9                  // Field nextAvgCheck:J
     146: return

  synchronized void reset();
    Code:
       0: aload_0
       1: ldc2_w        #7                  // long 1000l
       4: putfield      #9                  // Field nextAvgCheck:J
       7: aload_0
       8: lconst_0
       9: putfield      #15                 // Field totalTime:J
      12: aload_0
      13: lconst_0
      14: putfield      #16                 // Field numServesBlocking:J
      17: return

  io.vertx.ext.web.handler.impl.StaticHandlerImpl$FSTune(io.vertx.ext.web.handler.impl.StaticHandlerImpl$1);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method "<init>":()V
       4: return

  static long access$102(io.vertx.ext.web.handler.impl.StaticHandlerImpl$FSTune, long);
    Code:
       0: aload_0
       1: lload_1
       2: dup2_x1
       3: putfield      #2                  // Field maxAvgServeTimeNanoSeconds:J
       6: lreturn
}
