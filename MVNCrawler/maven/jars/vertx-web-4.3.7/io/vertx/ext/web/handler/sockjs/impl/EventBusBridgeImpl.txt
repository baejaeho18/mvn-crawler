Compiled from "EventBusBridgeImpl.java"
public class io.vertx.ext.web.handler.sockjs.impl.EventBusBridgeImpl implements io.vertx.core.Handler<io.vertx.ext.web.handler.sockjs.SockJSSocket> {
  private static final io.vertx.core.impl.logging.Logger LOG;

  private final java.util.Map<io.vertx.ext.web.handler.sockjs.SockJSSocket, io.vertx.ext.web.handler.sockjs.impl.EventBusBridgeImpl$SockInfo> sockInfos;

  private final java.util.List<io.vertx.ext.bridge.PermittedOptions> inboundPermitted;

  private final java.util.List<io.vertx.ext.bridge.PermittedOptions> outboundPermitted;

  private final int maxAddressLength;

  private final int maxHandlersPerSocket;

  private final long pingTimeout;

  private final long replyTimeout;

  private final io.vertx.core.Vertx vertx;

  private final io.vertx.core.eventbus.EventBus eb;

  private final java.util.Map<java.lang.String, io.vertx.core.eventbus.Message<?>> messagesAwaitingReply;

  private final java.util.Map<java.lang.String, java.util.regex.Pattern> compiledREs;

  private final io.vertx.core.Handler<io.vertx.ext.web.handler.sockjs.BridgeEvent> bridgeEventHandler;

  private final io.vertx.ext.auth.authorization.AuthorizationProvider authzProvider;

  public io.vertx.ext.web.handler.sockjs.impl.EventBusBridgeImpl(io.vertx.core.Vertx, io.vertx.ext.auth.authorization.AuthorizationProvider, io.vertx.ext.web.handler.sockjs.SockJSBridgeOptions, io.vertx.core.Handler<io.vertx.ext.web.handler.sockjs.BridgeEvent>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/HashMap
       8: dup
       9: invokespecial #3                  // Method java/util/HashMap."<init>":()V
      12: putfield      #4                  // Field sockInfos:Ljava/util/Map;
      15: aload_0
      16: new           #2                  // class java/util/HashMap
      19: dup
      20: invokespecial #3                  // Method java/util/HashMap."<init>":()V
      23: putfield      #5                  // Field messagesAwaitingReply:Ljava/util/Map;
      26: aload_0
      27: new           #2                  // class java/util/HashMap
      30: dup
      31: invokespecial #3                  // Method java/util/HashMap."<init>":()V
      34: putfield      #6                  // Field compiledREs:Ljava/util/Map;
      37: aload_0
      38: aload_1
      39: putfield      #7                  // Field vertx:Lio/vertx/core/Vertx;
      42: aload_0
      43: aload_1
      44: invokeinterface #8,  1            // InterfaceMethod io/vertx/core/Vertx.eventBus:()Lio/vertx/core/eventbus/EventBus;
      49: putfield      #9                  // Field eb:Lio/vertx/core/eventbus/EventBus;
      52: aload_0
      53: aload_2
      54: putfield      #10                 // Field authzProvider:Lio/vertx/ext/auth/authorization/AuthorizationProvider;
      57: aload_0
      58: aload_3
      59: invokevirtual #11                 // Method io/vertx/ext/web/handler/sockjs/SockJSBridgeOptions.getInboundPermitteds:()Ljava/util/List;
      62: ifnonnull     75
      65: new           #12                 // class java/util/ArrayList
      68: dup
      69: invokespecial #13                 // Method java/util/ArrayList."<init>":()V
      72: goto          79
      75: aload_3
      76: invokevirtual #11                 // Method io/vertx/ext/web/handler/sockjs/SockJSBridgeOptions.getInboundPermitteds:()Ljava/util/List;
      79: putfield      #14                 // Field inboundPermitted:Ljava/util/List;
      82: aload_0
      83: aload_3
      84: invokevirtual #15                 // Method io/vertx/ext/web/handler/sockjs/SockJSBridgeOptions.getOutboundPermitteds:()Ljava/util/List;
      87: ifnonnull     100
      90: new           #12                 // class java/util/ArrayList
      93: dup
      94: invokespecial #13                 // Method java/util/ArrayList."<init>":()V
      97: goto          104
     100: aload_3
     101: invokevirtual #15                 // Method io/vertx/ext/web/handler/sockjs/SockJSBridgeOptions.getOutboundPermitteds:()Ljava/util/List;
     104: putfield      #16                 // Field outboundPermitted:Ljava/util/List;
     107: aload_0
     108: aload_3
     109: invokevirtual #17                 // Method io/vertx/ext/web/handler/sockjs/SockJSBridgeOptions.getMaxAddressLength:()I
     112: putfield      #18                 // Field maxAddressLength:I
     115: aload_0
     116: aload_3
     117: invokevirtual #19                 // Method io/vertx/ext/web/handler/sockjs/SockJSBridgeOptions.getMaxHandlersPerSocket:()I
     120: putfield      #20                 // Field maxHandlersPerSocket:I
     123: aload_0
     124: aload_3
     125: invokevirtual #21                 // Method io/vertx/ext/web/handler/sockjs/SockJSBridgeOptions.getPingTimeout:()J
     128: putfield      #22                 // Field pingTimeout:J
     131: aload_0
     132: aload_3
     133: invokevirtual #23                 // Method io/vertx/ext/web/handler/sockjs/SockJSBridgeOptions.getReplyTimeout:()J
     136: putfield      #24                 // Field replyTimeout:J
     139: aload_0
     140: aload         4
     142: putfield      #25                 // Field bridgeEventHandler:Lio/vertx/core/Handler;
     145: return

  private void handleSocketData(io.vertx.ext.web.handler.sockjs.SockJSSocket, io.vertx.core.buffer.Buffer, java.util.Map<java.lang.String, io.vertx.core.eventbus.MessageConsumer<?>>);
    Code:
       0: new           #26                 // class io/vertx/core/json/JsonObject
       3: dup
       4: aload_2
       5: invokeinterface #27,  1           // InterfaceMethod io/vertx/core/buffer/Buffer.toString:()Ljava/lang/String;
      10: invokespecial #28                 // Method io/vertx/core/json/JsonObject."<init>":(Ljava/lang/String;)V
      13: astore        4
      15: goto          27
      18: astore        5
      20: aload_1
      21: ldc           #30                 // String invalid_json
      23: invokestatic  #31                 // Method replyError:(Lio/vertx/ext/web/handler/sockjs/SockJSSocket;Ljava/lang/String;)V
      26: return
      27: aload         4
      29: ldc           #32                 // String type
      31: invokevirtual #33                 // Method io/vertx/core/json/JsonObject.getString:(Ljava/lang/String;)Ljava/lang/String;
      34: astore        5
      36: aload         5
      38: ifnonnull     48
      41: aload_1
      42: ldc           #34                 // String missing_type
      44: invokestatic  #31                 // Method replyError:(Lio/vertx/ext/web/handler/sockjs/SockJSSocket;Ljava/lang/String;)V
      47: return
      48: aload         5
      50: ldc           #35                 // String ping
      52: invokevirtual #36                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      55: ifeq          66
      58: aload_0
      59: aload_1
      60: invokespecial #37                 // Method internalHandlePing:(Lio/vertx/ext/web/handler/sockjs/SockJSSocket;)V
      63: goto          310
      66: aload         4
      68: ldc           #38                 // String address
      70: invokevirtual #33                 // Method io/vertx/core/json/JsonObject.getString:(Ljava/lang/String;)Ljava/lang/String;
      73: astore        6
      75: aload         6
      77: ifnonnull     87
      80: aload_1
      81: ldc           #39                 // String missing_address
      83: invokestatic  #31                 // Method replyError:(Lio/vertx/ext/web/handler/sockjs/SockJSSocket;Ljava/lang/String;)V
      86: return
      87: aload         5
      89: astore        7
      91: iconst_m1
      92: istore        8
      94: aload         7
      96: invokevirtual #40                 // Method java/lang/String.hashCode:()I
      99: lookupswitch  { // 4
            -690213213: 172
            -235365105: 156
               3526536: 140
             836015164: 188
               default: 201
          }
     140: aload         7
     142: ldc           #41                 // String send
     144: invokevirtual #36                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     147: ifeq          201
     150: iconst_0
     151: istore        8
     153: goto          201
     156: aload         7
     158: ldc           #42                 // String publish
     160: invokevirtual #36                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     163: ifeq          201
     166: iconst_1
     167: istore        8
     169: goto          201
     172: aload         7
     174: ldc           #43                 // String register
     176: invokevirtual #36                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     179: ifeq          201
     182: iconst_2
     183: istore        8
     185: goto          201
     188: aload         7
     190: ldc           #44                 // String unregister
     192: invokevirtual #36                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     195: ifeq          201
     198: iconst_3
     199: istore        8
     201: iload         8
     203: tableswitch   { // 0 to 3
                     0: 232
                     1: 243
                     2: 254
                     3: 265
               default: 276
          }
     232: aload_0
     233: aload_1
     234: iconst_1
     235: aload         4
     237: invokespecial #45                 // Method internalHandleSendOrPub:(Lio/vertx/ext/web/handler/sockjs/SockJSSocket;ZLio/vertx/core/json/JsonObject;)V
     240: goto          310
     243: aload_0
     244: aload_1
     245: iconst_0
     246: aload         4
     248: invokespecial #45                 // Method internalHandleSendOrPub:(Lio/vertx/ext/web/handler/sockjs/SockJSSocket;ZLio/vertx/core/json/JsonObject;)V
     251: goto          310
     254: aload_0
     255: aload_1
     256: aload         4
     258: aload_3
     259: invokespecial #46                 // Method internalHandleRegister:(Lio/vertx/ext/web/handler/sockjs/SockJSSocket;Lio/vertx/core/json/JsonObject;Ljava/util/Map;)V
     262: goto          310
     265: aload_0
     266: aload_1
     267: aload         4
     269: aload_3
     270: invokespecial #47                 // Method internalHandleUnregister:(Lio/vertx/ext/web/handler/sockjs/SockJSSocket;Lio/vertx/core/json/JsonObject;Ljava/util/Map;)V
     273: goto          310
     276: getstatic     #48                 // Field LOG:Lio/vertx/core/impl/logging/Logger;
     279: new           #49                 // class java/lang/StringBuilder
     282: dup
     283: invokespecial #50                 // Method java/lang/StringBuilder."<init>":()V
     286: ldc           #51                 // String Invalid type in incoming message:
     288: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     291: aload         5
     293: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     296: invokevirtual #53                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     299: invokeinterface #54,  2           // InterfaceMethod io/vertx/core/impl/logging/Logger.error:(Ljava/lang/Object;)V
     304: aload_1
     305: ldc           #55                 // String invalid_type
     307: invokestatic  #31                 // Method replyError:(Lio/vertx/ext/web/handler/sockjs/SockJSSocket;Ljava/lang/String;)V
     310: return
    Exception table:
       from    to  target type
           0    15    18   Class io/vertx/core/json/DecodeException

  private void checkCallHook(java.util.function.Supplier<io.vertx.ext.web.handler.sockjs.impl.BridgeEventImpl>);
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: aconst_null
       4: invokespecial #56                 // Method checkCallHook:(Ljava/util/function/Supplier;Ljava/lang/Runnable;Ljava/lang/Runnable;)V
       7: return

  private void checkCallHook(java.util.function.Supplier<io.vertx.ext.web.handler.sockjs.impl.BridgeEventImpl>, java.lang.Runnable, java.lang.Runnable);
    Code:
       0: aload_0
       1: getfield      #25                 // Field bridgeEventHandler:Lio/vertx/core/Handler;
       4: ifnonnull     20
       7: aload_2
       8: ifnull        91
      11: aload_2
      12: invokeinterface #57,  1           // InterfaceMethod java/lang/Runnable.run:()V
      17: goto          91
      20: aload_1
      21: invokeinterface #58,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      26: checkcast     #59                 // class io/vertx/ext/web/handler/sockjs/impl/BridgeEventImpl
      29: astore        4
      31: aload_0
      32: getfield      #4                  // Field sockInfos:Ljava/util/Map;
      35: aload         4
      37: invokevirtual #60                 // Method io/vertx/ext/web/handler/sockjs/impl/BridgeEventImpl.socket:()Lio/vertx/ext/web/handler/sockjs/SockJSSocket;
      40: invokeinterface #61,  2           // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
      45: istore        5
      47: aload_0
      48: getfield      #25                 // Field bridgeEventHandler:Lio/vertx/core/Handler;
      51: aload         4
      53: invokeinterface #62,  2           // InterfaceMethod io/vertx/core/Handler.handle:(Ljava/lang/Object;)V
      58: aload         4
      60: invokevirtual #63                 // Method io/vertx/ext/web/handler/sockjs/impl/BridgeEventImpl.future:()Lio/vertx/core/Future;
      63: invokedynamic #64,  0             // InvokeDynamic #0:handle:()Lio/vertx/core/Handler;
      68: invokeinterface #65,  2           // InterfaceMethod io/vertx/core/Future.onFailure:(Lio/vertx/core/Handler;)Lio/vertx/core/Future;
      73: aload_0
      74: aload         4
      76: iload         5
      78: aload_3
      79: aload_2
      80: invokedynamic #66,  0             // InvokeDynamic #1:handle:(Lio/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl;Lio/vertx/ext/web/handler/sockjs/impl/BridgeEventImpl;ZLjava/lang/Runnable;Ljava/lang/Runnable;)Lio/vertx/core/Handler;
      85: invokeinterface #67,  2           // InterfaceMethod io/vertx/core/Future.onSuccess:(Lio/vertx/core/Handler;)Lio/vertx/core/Future;
      90: pop
      91: return

  private void internalHandleSendOrPub(io.vertx.ext.web.handler.sockjs.SockJSSocket, boolean, io.vertx.core.json.JsonObject);
    Code:
       0: aload_0
       1: iload_2
       2: aload_3
       3: aload_1
       4: invokedynamic #68,  0             // InvokeDynamic #2:get:(ZLio/vertx/core/json/JsonObject;Lio/vertx/ext/web/handler/sockjs/SockJSSocket;)Ljava/util/function/Supplier;
       9: aload_0
      10: aload_3
      11: aload_1
      12: iload_2
      13: invokedynamic #69,  0             // InvokeDynamic #3:run:(Lio/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl;Lio/vertx/core/json/JsonObject;Lio/vertx/ext/web/handler/sockjs/SockJSSocket;Z)Ljava/lang/Runnable;
      18: aload_1
      19: invokedynamic #70,  0             // InvokeDynamic #4:run:(Lio/vertx/ext/web/handler/sockjs/SockJSSocket;)Ljava/lang/Runnable;
      24: invokespecial #56                 // Method checkCallHook:(Ljava/util/function/Supplier;Ljava/lang/Runnable;Ljava/lang/Runnable;)V
      27: return

  private boolean checkMaxHandlers(io.vertx.ext.web.handler.sockjs.SockJSSocket, io.vertx.ext.web.handler.sockjs.impl.EventBusBridgeImpl$SockInfo);
    Code:
       0: aload_2
       1: getfield      #71                 // Field io/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl$SockInfo.handlerCount:I
       4: aload_0
       5: getfield      #20                 // Field maxHandlersPerSocket:I
       8: if_icmpge     13
      11: iconst_1
      12: ireturn
      13: getstatic     #48                 // Field LOG:Lio/vertx/core/impl/logging/Logger;
      16: ldc           #72                 // String Refusing to register as max_handlers_per_socket reached already
      18: invokeinterface #73,  2           // InterfaceMethod io/vertx/core/impl/logging/Logger.warn:(Ljava/lang/Object;)V
      23: aload_1
      24: ldc           #74                 // String max_handlers_reached
      26: invokestatic  #31                 // Method replyError:(Lio/vertx/ext/web/handler/sockjs/SockJSSocket;Ljava/lang/String;)V
      29: iconst_0
      30: ireturn

  private void internalHandleRegister(io.vertx.ext.web.handler.sockjs.SockJSSocket, io.vertx.core.json.JsonObject, java.util.Map<java.lang.String, io.vertx.core.eventbus.MessageConsumer<?>>);
    Code:
       0: aload_0
       1: getfield      #4                  // Field sockInfos:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #75,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #76                 // class io/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl$SockInfo
      13: astore        4
      15: aload_0
      16: aload_1
      17: aload         4
      19: invokespecial #77                 // Method checkMaxHandlers:(Lio/vertx/ext/web/handler/sockjs/SockJSSocket;Lio/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl$SockInfo;)Z
      22: ifne          26
      25: return
      26: aload_0
      27: aload_2
      28: aload_1
      29: invokedynamic #78,  0             // InvokeDynamic #5:get:(Lio/vertx/core/json/JsonObject;Lio/vertx/ext/web/handler/sockjs/SockJSSocket;)Ljava/util/function/Supplier;
      34: aload_0
      35: aload_2
      36: aload_1
      37: aload_3
      38: aload         4
      40: invokedynamic #79,  0             // InvokeDynamic #6:run:(Lio/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl;Lio/vertx/core/json/JsonObject;Lio/vertx/ext/web/handler/sockjs/SockJSSocket;Ljava/util/Map;Lio/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl$SockInfo;)Ljava/lang/Runnable;
      45: aload_1
      46: invokedynamic #80,  0             // InvokeDynamic #7:run:(Lio/vertx/ext/web/handler/sockjs/SockJSSocket;)Ljava/lang/Runnable;
      51: invokespecial #56                 // Method checkCallHook:(Ljava/util/function/Supplier;Ljava/lang/Runnable;Ljava/lang/Runnable;)V
      54: return

  private void internalHandleUnregister(io.vertx.ext.web.handler.sockjs.SockJSSocket, io.vertx.core.json.JsonObject, java.util.Map<java.lang.String, io.vertx.core.eventbus.MessageConsumer<?>>);
    Code:
       0: aload_0
       1: aload_2
       2: aload_1
       3: invokedynamic #81,  0             // InvokeDynamic #8:get:(Lio/vertx/core/json/JsonObject;Lio/vertx/ext/web/handler/sockjs/SockJSSocket;)Ljava/util/function/Supplier;
       8: aload_0
       9: aload_2
      10: aload_1
      11: aload_3
      12: invokedynamic #82,  0             // InvokeDynamic #9:run:(Lio/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl;Lio/vertx/core/json/JsonObject;Lio/vertx/ext/web/handler/sockjs/SockJSSocket;Ljava/util/Map;)Ljava/lang/Runnable;
      17: aload_1
      18: invokedynamic #83,  0             // InvokeDynamic #10:run:(Lio/vertx/ext/web/handler/sockjs/SockJSSocket;)Ljava/lang/Runnable;
      23: invokespecial #56                 // Method checkCallHook:(Ljava/util/function/Supplier;Ljava/lang/Runnable;Ljava/lang/Runnable;)V
      26: return

  private void internalHandlePing(io.vertx.ext.web.handler.sockjs.SockJSSocket);
    Code:
       0: aload_1
       1: invokeinterface #84,  1           // InterfaceMethod io/vertx/ext/web/handler/sockjs/SockJSSocket.webSession:()Lio/vertx/ext/web/Session;
       6: astore_2
       7: aload_2
       8: ifnull        17
      11: aload_2
      12: invokeinterface #85,  1           // InterfaceMethod io/vertx/ext/web/Session.setAccessed:()V
      17: aload_0
      18: getfield      #4                  // Field sockInfos:Ljava/util/Map;
      21: aload_1
      22: invokeinterface #75,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      27: checkcast     #76                 // class io/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl$SockInfo
      30: astore_3
      31: aload_3
      32: ifnull        55
      35: aload_3
      36: getfield      #86                 // Field io/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl$SockInfo.pingInfo:Lio/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl$PingInfo;
      39: invokestatic  #87                 // Method java/lang/System.currentTimeMillis:()J
      42: putfield      #88                 // Field io/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl$PingInfo.lastPing:J
      45: aload_0
      46: aload_1
      47: invokedynamic #89,  0             // InvokeDynamic #11:get:(Lio/vertx/ext/web/handler/sockjs/SockJSSocket;)Ljava/util/function/Supplier;
      52: invokespecial #90                 // Method checkCallHook:(Ljava/util/function/Supplier;)V
      55: return

  public void handle(io.vertx.ext.web.handler.sockjs.SockJSSocket);
    Code:
       0: aload_0
       1: aload_1
       2: invokedynamic #91,  0             // InvokeDynamic #12:get:(Lio/vertx/ext/web/handler/sockjs/SockJSSocket;)Ljava/util/function/Supplier;
       7: aload_0
       8: aload_1
       9: invokedynamic #92,  0             // InvokeDynamic #13:run:(Lio/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl;Lio/vertx/ext/web/handler/sockjs/SockJSSocket;)Ljava/lang/Runnable;
      14: aload_1
      15: dup
      16: invokevirtual #93                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      19: pop
      20: invokedynamic #94,  0             // InvokeDynamic #14:run:(Lio/vertx/ext/web/handler/sockjs/SockJSSocket;)Ljava/lang/Runnable;
      25: invokespecial #56                 // Method checkCallHook:(Ljava/util/function/Supplier;Ljava/lang/Runnable;Ljava/lang/Runnable;)V
      28: return

  private void handleSocketClosed(io.vertx.ext.web.handler.sockjs.SockJSSocket, java.util.Map<java.lang.String, io.vertx.core.eventbus.MessageConsumer<?>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #95                 // Method clearSocketState:(Lio/vertx/ext/web/handler/sockjs/SockJSSocket;Ljava/util/Map;)V
       6: aload_0
       7: aload_1
       8: invokedynamic #96,  0             // InvokeDynamic #15:get:(Lio/vertx/ext/web/handler/sockjs/SockJSSocket;)Ljava/util/function/Supplier;
      13: invokespecial #90                 // Method checkCallHook:(Ljava/util/function/Supplier;)V
      16: return

  private void handleSocketException(io.vertx.ext.web.handler.sockjs.SockJSSocket, java.lang.Throwable, java.util.Map<java.lang.String, io.vertx.core.eventbus.MessageConsumer<?>>);
    Code:
       0: getstatic     #48                 // Field LOG:Lio/vertx/core/impl/logging/Logger;
       3: ldc           #97                 // String SockJSSocket exception
       5: aload_2
       6: invokeinterface #98,  3           // InterfaceMethod io/vertx/core/impl/logging/Logger.error:(Ljava/lang/Object;Ljava/lang/Throwable;)V
      11: aload_0
      12: aload_1
      13: aload_3
      14: invokespecial #95                 // Method clearSocketState:(Lio/vertx/ext/web/handler/sockjs/SockJSSocket;Ljava/util/Map;)V
      17: new           #26                 // class io/vertx/core/json/JsonObject
      20: dup
      21: invokespecial #99                 // Method io/vertx/core/json/JsonObject."<init>":()V
      24: ldc           #32                 // String type
      26: ldc           #100                // String err
      28: invokevirtual #101                // Method io/vertx/core/json/JsonObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lio/vertx/core/json/JsonObject;
      31: ldc           #102                // String failureType
      33: ldc           #103                // String socketException
      35: invokevirtual #101                // Method io/vertx/core/json/JsonObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lio/vertx/core/json/JsonObject;
      38: astore        4
      40: aload_2
      41: ifnull        56
      44: aload         4
      46: ldc           #104                // String message
      48: aload_2
      49: invokevirtual #105                // Method java/lang/Throwable.getMessage:()Ljava/lang/String;
      52: invokevirtual #101                // Method io/vertx/core/json/JsonObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lio/vertx/core/json/JsonObject;
      55: pop
      56: aload_0
      57: aload         4
      59: aload_1
      60: invokedynamic #106,  0            // InvokeDynamic #16:get:(Lio/vertx/core/json/JsonObject;Lio/vertx/ext/web/handler/sockjs/SockJSSocket;)Ljava/util/function/Supplier;
      65: invokespecial #90                 // Method checkCallHook:(Ljava/util/function/Supplier;)V
      68: return

  private void clearSocketState(io.vertx.ext.web.handler.sockjs.SockJSSocket, java.util.Map<java.lang.String, io.vertx.core.eventbus.MessageConsumer<?>>);
    Code:
       0: aload_2
       1: invokeinterface #107,  1          // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
       6: invokeinterface #108,  1          // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      11: astore_3
      12: aload_3
      13: invokeinterface #109,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      18: ifeq          55
      21: aload_3
      22: invokeinterface #110,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      27: checkcast     #111                // class io/vertx/core/eventbus/MessageConsumer
      30: astore        4
      32: aload         4
      34: invokeinterface #112,  1          // InterfaceMethod io/vertx/core/eventbus/MessageConsumer.unregister:()Lio/vertx/core/Future;
      39: pop
      40: aload_0
      41: aload         4
      43: aload_1
      44: invokedynamic #113,  0            // InvokeDynamic #17:get:(Lio/vertx/core/eventbus/MessageConsumer;Lio/vertx/ext/web/handler/sockjs/SockJSSocket;)Ljava/util/function/Supplier;
      49: invokespecial #90                 // Method checkCallHook:(Ljava/util/function/Supplier;)V
      52: goto          12
      55: aload_0
      56: getfield      #4                  // Field sockInfos:Ljava/util/Map;
      59: aload_1
      60: invokeinterface #114,  2          // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      65: checkcast     #76                 // class io/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl$SockInfo
      68: astore_3
      69: aload_3
      70: ifnull        99
      73: aload_3
      74: getfield      #86                 // Field io/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl$SockInfo.pingInfo:Lio/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl$PingInfo;
      77: astore        4
      79: aload         4
      81: ifnull        99
      84: aload_0
      85: getfield      #7                  // Field vertx:Lio/vertx/core/Vertx;
      88: aload         4
      90: getfield      #115                // Field io/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl$PingInfo.timerID:J
      93: invokeinterface #116,  3          // InterfaceMethod io/vertx/core/Vertx.cancelTimer:(J)Z
      98: pop
      99: return

  private void checkAddAccceptedReplyAddress(io.vertx.core.eventbus.Message<?>);
    Code:
       0: aload_1
       1: invokeinterface #117,  1          // InterfaceMethod io/vertx/core/eventbus/Message.replyAddress:()Ljava/lang/String;
       6: astore_2
       7: aload_2
       8: ifnull        44
      11: aload_0
      12: getfield      #5                  // Field messagesAwaitingReply:Ljava/util/Map;
      15: aload_2
      16: aload_1
      17: invokeinterface #118,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      22: pop
      23: aload_0
      24: getfield      #7                  // Field vertx:Lio/vertx/core/Vertx;
      27: aload_0
      28: getfield      #24                 // Field replyTimeout:J
      31: aload_0
      32: aload_2
      33: invokedynamic #119,  0            // InvokeDynamic #18:handle:(Lio/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl;Ljava/lang/String;)Lio/vertx/core/Handler;
      38: invokeinterface #120,  4          // InterfaceMethod io/vertx/core/Vertx.setTimer:(JLio/vertx/core/Handler;)J
      43: pop2
      44: return

  private void deliverMessage(io.vertx.ext.web.handler.sockjs.SockJSSocket, java.lang.String, io.vertx.core.eventbus.Message<?>);
    Code:
       0: new           #26                 // class io/vertx/core/json/JsonObject
       3: dup
       4: invokespecial #99                 // Method io/vertx/core/json/JsonObject."<init>":()V
       7: ldc           #32                 // String type
       9: ldc           #121                // String rec
      11: invokevirtual #101                // Method io/vertx/core/json/JsonObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lio/vertx/core/json/JsonObject;
      14: ldc           #38                 // String address
      16: aload_2
      17: invokevirtual #101                // Method io/vertx/core/json/JsonObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lio/vertx/core/json/JsonObject;
      20: ldc           #122                // String body
      22: aload_3
      23: invokeinterface #123,  1          // InterfaceMethod io/vertx/core/eventbus/Message.body:()Ljava/lang/Object;
      28: invokevirtual #101                // Method io/vertx/core/json/JsonObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lio/vertx/core/json/JsonObject;
      31: astore        4
      33: aload_3
      34: invokeinterface #117,  1          // InterfaceMethod io/vertx/core/eventbus/Message.replyAddress:()Ljava/lang/String;
      39: ifnull        56
      42: aload         4
      44: ldc           #124                // String replyAddress
      46: aload_3
      47: invokeinterface #117,  1          // InterfaceMethod io/vertx/core/eventbus/Message.replyAddress:()Ljava/lang/String;
      52: invokevirtual #101                // Method io/vertx/core/json/JsonObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lio/vertx/core/json/JsonObject;
      55: pop
      56: aload_3
      57: invokeinterface #125,  1          // InterfaceMethod io/vertx/core/eventbus/Message.headers:()Lio/vertx/core/MultiMap;
      62: ifnull        196
      65: aload_3
      66: invokeinterface #125,  1          // InterfaceMethod io/vertx/core/eventbus/Message.headers:()Lio/vertx/core/MultiMap;
      71: invokeinterface #126,  1          // InterfaceMethod io/vertx/core/MultiMap.isEmpty:()Z
      76: ifne          196
      79: new           #26                 // class io/vertx/core/json/JsonObject
      82: dup
      83: invokespecial #99                 // Method io/vertx/core/json/JsonObject."<init>":()V
      86: astore        5
      88: aload_3
      89: invokeinterface #125,  1          // InterfaceMethod io/vertx/core/eventbus/Message.headers:()Lio/vertx/core/MultiMap;
      94: invokeinterface #127,  1          // InterfaceMethod io/vertx/core/MultiMap.names:()Ljava/util/Set;
      99: invokeinterface #128,  1          // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
     104: astore        6
     106: aload         6
     108: invokeinterface #109,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
     113: ifeq          186
     116: aload         6
     118: invokeinterface #110,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     123: checkcast     #129                // class java/lang/String
     126: astore        7
     128: aload_3
     129: invokeinterface #125,  1          // InterfaceMethod io/vertx/core/eventbus/Message.headers:()Lio/vertx/core/MultiMap;
     134: aload         7
     136: invokeinterface #130,  2          // InterfaceMethod io/vertx/core/MultiMap.getAll:(Ljava/lang/String;)Ljava/util/List;
     141: astore        8
     143: aload         8
     145: invokeinterface #131,  1          // InterfaceMethod java/util/List.size:()I
     150: iconst_1
     151: if_icmpne     173
     154: aload         5
     156: aload         7
     158: aload         8
     160: iconst_0
     161: invokeinterface #132,  2          // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
     166: invokevirtual #101                // Method io/vertx/core/json/JsonObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lio/vertx/core/json/JsonObject;
     169: pop
     170: goto          183
     173: aload         5
     175: aload         7
     177: aload         8
     179: invokevirtual #101                // Method io/vertx/core/json/JsonObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lio/vertx/core/json/JsonObject;
     182: pop
     183: goto          106
     186: aload         4
     188: ldc           #133                // String headers
     190: aload         5
     192: invokevirtual #101                // Method io/vertx/core/json/JsonObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lio/vertx/core/json/JsonObject;
     195: pop
     196: aload_0
     197: aload         4
     199: aload_1
     200: invokedynamic #134,  0            // InvokeDynamic #19:get:(Lio/vertx/core/json/JsonObject;Lio/vertx/ext/web/handler/sockjs/SockJSSocket;)Ljava/util/function/Supplier;
     205: aload_1
     206: aload         4
     208: invokedynamic #135,  0            // InvokeDynamic #20:run:(Lio/vertx/ext/web/handler/sockjs/SockJSSocket;Lio/vertx/core/json/JsonObject;)Ljava/lang/Runnable;
     213: invokedynamic #136,  0            // InvokeDynamic #21:run:()Ljava/lang/Runnable;
     218: invokespecial #56                 // Method checkCallHook:(Ljava/util/function/Supplier;Ljava/lang/Runnable;Ljava/lang/Runnable;)V
     221: return

  private void doSendOrPub(boolean, io.vertx.ext.web.handler.sockjs.SockJSSocket, java.lang.String, io.vertx.core.json.JsonObject);
    Code:
       0: aload         4
       2: ldc           #122                // String body
       4: invokevirtual #137                // Method io/vertx/core/json/JsonObject.getValue:(Ljava/lang/String;)Ljava/lang/Object;
       7: astore        5
       9: aload         4
      11: ldc           #133                // String headers
      13: invokevirtual #138                // Method io/vertx/core/json/JsonObject.getJsonObject:(Ljava/lang/String;)Lio/vertx/core/json/JsonObject;
      16: astore        6
      18: aload         4
      20: ldc           #124                // String replyAddress
      22: invokevirtual #33                 // Method io/vertx/core/json/JsonObject.getString:(Ljava/lang/String;)Ljava/lang/String;
      25: astore        7
      27: aload         7
      29: ifnull        59
      32: aload         7
      34: invokevirtual #139                // Method java/lang/String.length:()I
      37: bipush        36
      39: if_icmple     59
      42: getstatic     #48                 // Field LOG:Lio/vertx/core/impl/logging/Logger;
      45: ldc           #140                // String Will not send message, reply address is > 36 chars
      47: invokeinterface #54,  2           // InterfaceMethod io/vertx/core/impl/logging/Logger.error:(Ljava/lang/Object;)V
      52: aload_2
      53: ldc           #141                // String invalid_reply_address
      55: invokestatic  #31                 // Method replyError:(Lio/vertx/ext/web/handler/sockjs/SockJSSocket;Ljava/lang/String;)V
      58: return
      59: getstatic     #48                 // Field LOG:Lio/vertx/core/impl/logging/Logger;
      62: invokeinterface #142,  1          // InterfaceMethod io/vertx/core/impl/logging/Logger.isDebugEnabled:()Z
      67: istore        8
      69: iload         8
      71: ifeq          111
      74: getstatic     #48                 // Field LOG:Lio/vertx/core/impl/logging/Logger;
      77: new           #49                 // class java/lang/StringBuilder
      80: dup
      81: invokespecial #50                 // Method java/lang/StringBuilder."<init>":()V
      84: ldc           #143                // String Received msg from client in bridge. address:
      86: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      89: aload_3
      90: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      93: ldc           #144                // String  message:
      95: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      98: aload         5
     100: invokevirtual #145                // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     103: invokevirtual #53                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     106: invokeinterface #146,  2          // InterfaceMethod io/vertx/core/impl/logging/Logger.debug:(Ljava/lang/Object;)V
     111: aload_0
     112: getfield      #5                  // Field messagesAwaitingReply:Ljava/util/Map;
     115: aload_3
     116: invokeinterface #114,  2          // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
     121: checkcast     #147                // class io/vertx/core/eventbus/Message
     124: astore        9
     126: aload         9
     128: ifnull        144
     131: new           #148                // class io/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl$Match
     134: dup
     135: iconst_1
     136: invokespecial #149                // Method io/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl$Match."<init>":(Z)V
     139: astore        10
     141: goto          154
     144: aload_0
     145: iconst_1
     146: aload_3
     147: aload         5
     149: invokespecial #150                // Method checkMatches:(ZLjava/lang/String;Ljava/lang/Object;)Lio/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl$Match;
     152: astore        10
     154: aload         10
     156: getfield      #151                // Field io/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl$Match.doesMatch:Z
     159: ifeq          277
     162: aload         10
     164: getfield      #152                // Field io/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl$Match.requiredAuthority:Lio/vertx/ext/auth/authorization/Authorization;
     167: ifnull        259
     170: aload_2
     171: invokeinterface #153,  1          // InterfaceMethod io/vertx/ext/web/handler/sockjs/SockJSSocket.webUser:()Lio/vertx/ext/auth/User;
     176: astore        11
     178: aload         11
     180: ifnull        213
     183: aload_0
     184: aload         10
     186: aload         11
     188: aload_0
     189: iload_1
     190: aload_3
     191: aload         5
     193: aload         6
     195: aload_2
     196: aload         7
     198: aload         9
     200: iload         8
     202: invokedynamic #154,  0            // InvokeDynamic #22:handle:(Lio/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl;ZLjava/lang/String;Ljava/lang/Object;Lio/vertx/core/json/JsonObject;Lio/vertx/ext/web/handler/sockjs/SockJSSocket;Ljava/lang/String;Lio/vertx/core/eventbus/Message;Z)Lio/vertx/core/Handler;
     207: invokespecial #155                // Method authorise:(Lio/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl$Match;Lio/vertx/ext/auth/User;Lio/vertx/core/Handler;)V
     210: goto          256
     213: aload_2
     214: ldc           #156                // String not_logged_in
     216: invokestatic  #31                 // Method replyError:(Lio/vertx/ext/web/handler/sockjs/SockJSSocket;Ljava/lang/String;)V
     219: iload         8
     221: ifeq          256
     224: getstatic     #48                 // Field LOG:Lio/vertx/core/impl/logging/Logger;
     227: new           #49                 // class java/lang/StringBuilder
     230: dup
     231: invokespecial #50                 // Method java/lang/StringBuilder."<init>":()V
     234: ldc           #157                // String Inbound message for address
     236: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     239: aload_3
     240: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     243: ldc           #158                // String  rejected because it requires auth and user is not authenticated
     245: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     248: invokevirtual #53                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     251: invokeinterface #146,  2          // InterfaceMethod io/vertx/core/impl/logging/Logger.debug:(Ljava/lang/Object;)V
     256: goto          320
     259: aload_0
     260: iload_1
     261: aload_3
     262: aload         5
     264: aload         6
     266: aload_2
     267: aload         7
     269: aload         9
     271: invokespecial #159                // Method checkAndSend:(ZLjava/lang/String;Ljava/lang/Object;Lio/vertx/core/json/JsonObject;Lio/vertx/ext/web/handler/sockjs/SockJSSocket;Ljava/lang/String;Lio/vertx/core/eventbus/Message;)V
     274: goto          320
     277: aload_2
     278: ldc           #160                // String access_denied
     280: invokestatic  #31                 // Method replyError:(Lio/vertx/ext/web/handler/sockjs/SockJSSocket;Ljava/lang/String;)V
     283: iload         8
     285: ifeq          320
     288: getstatic     #48                 // Field LOG:Lio/vertx/core/impl/logging/Logger;
     291: new           #49                 // class java/lang/StringBuilder
     294: dup
     295: invokespecial #50                 // Method java/lang/StringBuilder."<init>":()V
     298: ldc           #157                // String Inbound message for address
     300: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     303: aload_3
     304: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     307: ldc           #161                // String  rejected because there is no match
     309: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     312: invokevirtual #53                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     315: invokeinterface #146,  2          // InterfaceMethod io/vertx/core/impl/logging/Logger.debug:(Ljava/lang/Object;)V
     320: return

  private void checkAndSend(boolean, java.lang.String, java.lang.Object, io.vertx.core.json.JsonObject, io.vertx.ext.web.handler.sockjs.SockJSSocket, java.lang.String, io.vertx.core.eventbus.Message<?>);
    Code:
       0: aload_0
       1: getfield      #4                  // Field sockInfos:Ljava/util/Map;
       4: aload         5
       6: invokeinterface #75,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      11: checkcast     #76                 // class io/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl$SockInfo
      14: astore        8
      16: aload         6
      18: ifnull        33
      21: aload_0
      22: aload         5
      24: aload         8
      26: invokespecial #77                 // Method checkMaxHandlers:(Lio/vertx/ext/web/handler/sockjs/SockJSSocket;Lio/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl$SockInfo;)Z
      29: ifne          33
      32: return
      33: aload         6
      35: ifnull        55
      38: aload_0
      39: aload         5
      41: aload         6
      43: aload         8
      45: invokedynamic #162,  0            // InvokeDynamic #23:handle:(Lio/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl;Lio/vertx/ext/web/handler/sockjs/SockJSSocket;Ljava/lang/String;Lio/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl$SockInfo;)Lio/vertx/core/Handler;
      50: astore        9
      52: goto          58
      55: aconst_null
      56: astore        9
      58: getstatic     #48                 // Field LOG:Lio/vertx/core/impl/logging/Logger;
      61: invokeinterface #142,  1          // InterfaceMethod io/vertx/core/impl/logging/Logger.isDebugEnabled:()Z
      66: ifeq          101
      69: getstatic     #48                 // Field LOG:Lio/vertx/core/impl/logging/Logger;
      72: new           #49                 // class java/lang/StringBuilder
      75: dup
      76: invokespecial #50                 // Method java/lang/StringBuilder."<init>":()V
      79: ldc           #163                // String Forwarding message to address
      81: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      84: aload_2
      85: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      88: ldc           #164                // String  on event bus
      90: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      93: invokevirtual #53                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      96: invokeinterface #146,  2          // InterfaceMethod io/vertx/core/impl/logging/Logger.debug:(Ljava/lang/Object;)V
     101: aload         4
     103: ifnull        126
     106: invokestatic  #165                // InterfaceMethod io/vertx/core/http/HttpHeaders.headers:()Lio/vertx/core/MultiMap;
     109: astore        10
     111: aload         4
     113: aload         10
     115: invokedynamic #166,  0            // InvokeDynamic #24:accept:(Lio/vertx/core/MultiMap;)Ljava/util/function/Consumer;
     120: invokevirtual #167                // Method io/vertx/core/json/JsonObject.forEach:(Ljava/util/function/Consumer;)V
     123: goto          129
     126: aconst_null
     127: astore        10
     129: iload_1
     130: ifeq          296
     133: aload         7
     135: ifnull        205
     138: aload         6
     140: ifnull        175
     143: aload         7
     145: aload_3
     146: new           #168                // class io/vertx/core/eventbus/DeliveryOptions
     149: dup
     150: invokespecial #169                // Method io/vertx/core/eventbus/DeliveryOptions."<init>":()V
     153: aload_0
     154: getfield      #24                 // Field replyTimeout:J
     157: invokevirtual #170                // Method io/vertx/core/eventbus/DeliveryOptions.setSendTimeout:(J)Lio/vertx/core/eventbus/DeliveryOptions;
     160: aload         10
     162: invokevirtual #171                // Method io/vertx/core/eventbus/DeliveryOptions.setHeaders:(Lio/vertx/core/MultiMap;)Lio/vertx/core/eventbus/DeliveryOptions;
     165: aload         9
     167: invokeinterface #172,  4          // InterfaceMethod io/vertx/core/eventbus/Message.replyAndRequest:(Ljava/lang/Object;Lio/vertx/core/eventbus/DeliveryOptions;Lio/vertx/core/Handler;)V
     172: goto          277
     175: aload         7
     177: aload_3
     178: new           #168                // class io/vertx/core/eventbus/DeliveryOptions
     181: dup
     182: invokespecial #169                // Method io/vertx/core/eventbus/DeliveryOptions."<init>":()V
     185: aload_0
     186: getfield      #24                 // Field replyTimeout:J
     189: invokevirtual #170                // Method io/vertx/core/eventbus/DeliveryOptions.setSendTimeout:(J)Lio/vertx/core/eventbus/DeliveryOptions;
     192: aload         10
     194: invokevirtual #171                // Method io/vertx/core/eventbus/DeliveryOptions.setHeaders:(Lio/vertx/core/MultiMap;)Lio/vertx/core/eventbus/DeliveryOptions;
     197: invokeinterface #173,  3          // InterfaceMethod io/vertx/core/eventbus/Message.reply:(Ljava/lang/Object;Lio/vertx/core/eventbus/DeliveryOptions;)V
     202: goto          277
     205: aload         6
     207: ifnull        246
     210: aload_0
     211: getfield      #9                  // Field eb:Lio/vertx/core/eventbus/EventBus;
     214: aload_2
     215: aload_3
     216: new           #168                // class io/vertx/core/eventbus/DeliveryOptions
     219: dup
     220: invokespecial #169                // Method io/vertx/core/eventbus/DeliveryOptions."<init>":()V
     223: aload_0
     224: getfield      #24                 // Field replyTimeout:J
     227: invokevirtual #170                // Method io/vertx/core/eventbus/DeliveryOptions.setSendTimeout:(J)Lio/vertx/core/eventbus/DeliveryOptions;
     230: aload         10
     232: invokevirtual #171                // Method io/vertx/core/eventbus/DeliveryOptions.setHeaders:(Lio/vertx/core/MultiMap;)Lio/vertx/core/eventbus/DeliveryOptions;
     235: aload         9
     237: invokeinterface #174,  5          // InterfaceMethod io/vertx/core/eventbus/EventBus.request:(Ljava/lang/String;Ljava/lang/Object;Lio/vertx/core/eventbus/DeliveryOptions;Lio/vertx/core/Handler;)Lio/vertx/core/eventbus/EventBus;
     242: pop
     243: goto          277
     246: aload_0
     247: getfield      #9                  // Field eb:Lio/vertx/core/eventbus/EventBus;
     250: aload_2
     251: aload_3
     252: new           #168                // class io/vertx/core/eventbus/DeliveryOptions
     255: dup
     256: invokespecial #169                // Method io/vertx/core/eventbus/DeliveryOptions."<init>":()V
     259: aload_0
     260: getfield      #24                 // Field replyTimeout:J
     263: invokevirtual #170                // Method io/vertx/core/eventbus/DeliveryOptions.setSendTimeout:(J)Lio/vertx/core/eventbus/DeliveryOptions;
     266: aload         10
     268: invokevirtual #171                // Method io/vertx/core/eventbus/DeliveryOptions.setHeaders:(Lio/vertx/core/MultiMap;)Lio/vertx/core/eventbus/DeliveryOptions;
     271: invokeinterface #175,  4          // InterfaceMethod io/vertx/core/eventbus/EventBus.send:(Ljava/lang/String;Ljava/lang/Object;Lio/vertx/core/eventbus/DeliveryOptions;)Lio/vertx/core/eventbus/EventBus;
     276: pop
     277: aload         6
     279: ifnull        320
     282: aload         8
     284: dup
     285: getfield      #71                 // Field io/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl$SockInfo.handlerCount:I
     288: iconst_1
     289: iadd
     290: putfield      #71                 // Field io/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl$SockInfo.handlerCount:I
     293: goto          320
     296: aload_0
     297: getfield      #9                  // Field eb:Lio/vertx/core/eventbus/EventBus;
     300: aload_2
     301: aload_3
     302: new           #168                // class io/vertx/core/eventbus/DeliveryOptions
     305: dup
     306: invokespecial #169                // Method io/vertx/core/eventbus/DeliveryOptions."<init>":()V
     309: aload         10
     311: invokevirtual #171                // Method io/vertx/core/eventbus/DeliveryOptions.setHeaders:(Lio/vertx/core/MultiMap;)Lio/vertx/core/eventbus/DeliveryOptions;
     314: invokeinterface #176,  4          // InterfaceMethod io/vertx/core/eventbus/EventBus.publish:(Ljava/lang/String;Ljava/lang/Object;Lio/vertx/core/eventbus/DeliveryOptions;)Lio/vertx/core/eventbus/EventBus;
     319: pop
     320: return

  private void authorise(io.vertx.ext.web.handler.sockjs.impl.EventBusBridgeImpl$Match, io.vertx.ext.auth.User, io.vertx.core.Handler<io.vertx.core.AsyncResult<java.lang.Boolean>>);
    Code:
       0: aload_1
       1: getfield      #152                // Field io/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl$Match.requiredAuthority:Lio/vertx/ext/auth/authorization/Authorization;
       4: aload_2
       5: invokeinterface #177,  2          // InterfaceMethod io/vertx/ext/auth/authorization/Authorization.match:(Lio/vertx/ext/auth/User;)Z
      10: ifeq          27
      13: aload_3
      14: iconst_1
      15: invokestatic  #178                // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      18: invokestatic  #179                // InterfaceMethod io/vertx/core/Future.succeededFuture:(Ljava/lang/Object;)Lio/vertx/core/Future;
      21: invokeinterface #62,  2           // InterfaceMethod io/vertx/core/Handler.handle:(Ljava/lang/Object;)V
      26: return
      27: aload_0
      28: getfield      #10                 // Field authzProvider:Lio/vertx/ext/auth/authorization/AuthorizationProvider;
      31: ifnonnull     48
      34: aload_3
      35: iconst_0
      36: invokestatic  #178                // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      39: invokestatic  #179                // InterfaceMethod io/vertx/core/Future.succeededFuture:(Ljava/lang/Object;)Lio/vertx/core/Future;
      42: invokeinterface #62,  2           // InterfaceMethod io/vertx/core/Handler.handle:(Ljava/lang/Object;)V
      47: return
      48: aload_0
      49: getfield      #10                 // Field authzProvider:Lio/vertx/ext/auth/authorization/AuthorizationProvider;
      52: aload_2
      53: aload_1
      54: aload_2
      55: aload_3
      56: invokedynamic #180,  0            // InvokeDynamic #25:handle:(Lio/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl$Match;Lio/vertx/ext/auth/User;Lio/vertx/core/Handler;)Lio/vertx/core/Handler;
      61: invokeinterface #181,  3          // InterfaceMethod io/vertx/ext/auth/authorization/AuthorizationProvider.getAuthorizations:(Lio/vertx/ext/auth/User;Lio/vertx/core/Handler;)V
      66: return

  private io.vertx.ext.web.handler.sockjs.impl.EventBusBridgeImpl$Match checkMatches(boolean, java.lang.String, java.lang.Object);
    Code:
       0: iload_1
       1: ifeq          11
       4: aload_0
       5: getfield      #14                 // Field inboundPermitted:Ljava/util/List;
       8: goto          15
      11: aload_0
      12: getfield      #16                 // Field outboundPermitted:Ljava/util/List;
      15: astore        4
      17: aload         4
      19: invokeinterface #182,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      24: astore        5
      26: aload         5
      28: invokeinterface #109,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      33: ifeq          153
      36: aload         5
      38: invokeinterface #110,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      43: checkcast     #183                // class io/vertx/ext/bridge/PermittedOptions
      46: astore        6
      48: aload         6
      50: invokevirtual #184                // Method io/vertx/ext/bridge/PermittedOptions.getAddress:()Ljava/lang/String;
      53: astore        7
      55: aload         7
      57: ifnonnull     70
      60: aload         6
      62: invokevirtual #185                // Method io/vertx/ext/bridge/PermittedOptions.getAddressRegex:()Ljava/lang/String;
      65: astore        8
      67: goto          73
      70: aconst_null
      71: astore        8
      73: aload         7
      75: ifnonnull     103
      78: aload         8
      80: ifnull        93
      83: aload_0
      84: aload         8
      86: aload_2
      87: invokespecial #186                // Method regexMatches:(Ljava/lang/String;Ljava/lang/String;)Z
      90: ifeq          97
      93: iconst_1
      94: goto          98
      97: iconst_0
      98: istore        9
     100: goto          111
     103: aload         7
     105: aload_2
     106: invokevirtual #36                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     109: istore        9
     111: iload         9
     113: ifeq          150
     116: aload         6
     118: invokevirtual #187                // Method io/vertx/ext/bridge/PermittedOptions.getMatch:()Lio/vertx/core/json/JsonObject;
     121: aload_3
     122: invokestatic  #188                // Method structureMatches:(Lio/vertx/core/json/JsonObject;Ljava/lang/Object;)Z
     125: istore        10
     127: iload         10
     129: ifeq          150
     132: aload         6
     134: invokevirtual #189                // Method io/vertx/ext/bridge/PermittedOptions.getRequiredAuthority:()Ljava/lang/String;
     137: astore        11
     139: new           #148                // class io/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl$Match
     142: dup
     143: iconst_1
     144: aload         11
     146: invokespecial #190                // Method io/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl$Match."<init>":(ZLjava/lang/String;)V
     149: areturn
     150: goto          26
     153: new           #148                // class io/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl$Match
     156: dup
     157: iconst_0
     158: invokespecial #149                // Method io/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl$Match."<init>":(Z)V
     161: areturn

  private boolean regexMatches(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #6                  // Field compiledREs:Ljava/util/Map;
       4: aload_1
       5: invokedynamic #191,  0            // InvokeDynamic #26:apply:()Ljava/util/function/Function;
      10: invokeinterface #192,  3          // InterfaceMethod java/util/Map.computeIfAbsent:(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;
      15: checkcast     #193                // class java/util/regex/Pattern
      18: astore_3
      19: aload_3
      20: aload_2
      21: invokevirtual #194                // Method java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;
      24: astore        4
      26: aload         4
      28: invokevirtual #195                // Method java/util/regex/Matcher.matches:()Z
      31: ireturn

  private static void replyError(io.vertx.ext.web.handler.sockjs.SockJSSocket, java.lang.String);
    Code:
       0: new           #26                 // class io/vertx/core/json/JsonObject
       3: dup
       4: invokespecial #99                 // Method io/vertx/core/json/JsonObject."<init>":()V
       7: ldc           #32                 // String type
       9: ldc           #100                // String err
      11: invokevirtual #101                // Method io/vertx/core/json/JsonObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lio/vertx/core/json/JsonObject;
      14: ldc           #122                // String body
      16: aload_1
      17: invokevirtual #101                // Method io/vertx/core/json/JsonObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lio/vertx/core/json/JsonObject;
      20: astore_2
      21: aload_0
      22: aload_2
      23: invokevirtual #196                // Method io/vertx/core/json/JsonObject.encode:()Ljava/lang/String;
      26: invokestatic  #197                // InterfaceMethod io/vertx/core/buffer/Buffer.buffer:(Ljava/lang/String;)Lio/vertx/core/buffer/Buffer;
      29: invokeinterface #198,  2          // InterfaceMethod io/vertx/ext/web/handler/sockjs/SockJSSocket.write:(Lio/vertx/core/buffer/Buffer;)Lio/vertx/core/Future;
      34: pop
      35: return

  private static boolean structureMatches(io.vertx.core.json.JsonObject, java.lang.Object);
    Code:
       0: aload_0
       1: ifnull        8
       4: aload_1
       5: ifnonnull     10
       8: iconst_1
       9: ireturn
      10: aload_1
      11: instanceof    #26                 // class io/vertx/core/json/JsonObject
      14: ifeq          116
      17: aload_1
      18: checkcast     #26                 // class io/vertx/core/json/JsonObject
      21: astore_2
      22: aload_0
      23: invokevirtual #199                // Method io/vertx/core/json/JsonObject.fieldNames:()Ljava/util/Set;
      26: invokeinterface #128,  1          // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      31: astore_3
      32: aload_3
      33: invokeinterface #109,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      38: ifeq          114
      41: aload_3
      42: invokeinterface #110,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      47: checkcast     #129                // class java/lang/String
      50: astore        4
      52: aload_0
      53: aload         4
      55: invokevirtual #137                // Method io/vertx/core/json/JsonObject.getValue:(Ljava/lang/String;)Ljava/lang/Object;
      58: astore        5
      60: aload_2
      61: aload         4
      63: invokevirtual #137                // Method io/vertx/core/json/JsonObject.getValue:(Ljava/lang/String;)Ljava/lang/Object;
      66: astore        6
      68: aload         5
      70: instanceof    #26                 // class io/vertx/core/json/JsonObject
      73: ifeq          91
      76: aload         5
      78: checkcast     #26                 // class io/vertx/core/json/JsonObject
      81: aload         6
      83: invokestatic  #188                // Method structureMatches:(Lio/vertx/core/json/JsonObject;Ljava/lang/Object;)Z
      86: ifne          111
      89: iconst_0
      90: ireturn
      91: aload_0
      92: aload         4
      94: invokevirtual #137                // Method io/vertx/core/json/JsonObject.getValue:(Ljava/lang/String;)Ljava/lang/Object;
      97: aload_2
      98: aload         4
     100: invokevirtual #137                // Method io/vertx/core/json/JsonObject.getValue:(Ljava/lang/String;)Ljava/lang/Object;
     103: invokevirtual #200                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
     106: ifne          111
     109: iconst_0
     110: ireturn
     111: goto          32
     114: iconst_1
     115: ireturn
     116: iconst_0
     117: ireturn

  public void handle(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #201                // class io/vertx/ext/web/handler/sockjs/SockJSSocket
       5: invokevirtual #202                // Method handle:(Lio/vertx/ext/web/handler/sockjs/SockJSSocket;)V
       8: return

  private static void lambda$authorise$33(io.vertx.ext.web.handler.sockjs.impl.EventBusBridgeImpl$Match, io.vertx.ext.auth.User, io.vertx.core.Handler, io.vertx.core.AsyncResult);
    Code:
       0: aload_3
       1: invokeinterface #203,  1          // InterfaceMethod io/vertx/core/AsyncResult.succeeded:()Z
       6: ifeq          54
       9: aload_0
      10: getfield      #152                // Field io/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl$Match.requiredAuthority:Lio/vertx/ext/auth/authorization/Authorization;
      13: aload_1
      14: invokeinterface #177,  2          // InterfaceMethod io/vertx/ext/auth/authorization/Authorization.match:(Lio/vertx/ext/auth/User;)Z
      19: ifeq          38
      22: aload_2
      23: iconst_1
      24: invokestatic  #178                // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      27: invokestatic  #179                // InterfaceMethod io/vertx/core/Future.succeededFuture:(Ljava/lang/Object;)Lio/vertx/core/Future;
      30: invokeinterface #62,  2           // InterfaceMethod io/vertx/core/Handler.handle:(Ljava/lang/Object;)V
      35: goto          69
      38: aload_2
      39: iconst_0
      40: invokestatic  #178                // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      43: invokestatic  #179                // InterfaceMethod io/vertx/core/Future.succeededFuture:(Ljava/lang/Object;)Lio/vertx/core/Future;
      46: invokeinterface #62,  2           // InterfaceMethod io/vertx/core/Handler.handle:(Ljava/lang/Object;)V
      51: goto          69
      54: aload_2
      55: aload_3
      56: invokeinterface #204,  1          // InterfaceMethod io/vertx/core/AsyncResult.cause:()Ljava/lang/Throwable;
      61: invokestatic  #205                // InterfaceMethod io/vertx/core/Future.failedFuture:(Ljava/lang/Throwable;)Lio/vertx/core/Future;
      64: invokeinterface #62,  2           // InterfaceMethod io/vertx/core/Handler.handle:(Ljava/lang/Object;)V
      69: return

  private static void lambda$checkAndSend$32(io.vertx.core.MultiMap, java.util.Map$Entry);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #206,  1          // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
       7: checkcast     #129                // class java/lang/String
      10: aload_1
      11: invokeinterface #207,  1          // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      16: invokevirtual #208                // Method java/lang/Object.toString:()Ljava/lang/String;
      19: invokeinterface #209,  3          // InterfaceMethod io/vertx/core/MultiMap.add:(Ljava/lang/String;Ljava/lang/String;)Lio/vertx/core/MultiMap;
      24: pop
      25: return

  private void lambda$checkAndSend$31(io.vertx.ext.web.handler.sockjs.SockJSSocket, java.lang.String, io.vertx.ext.web.handler.sockjs.impl.EventBusBridgeImpl$SockInfo, io.vertx.core.AsyncResult);
    Code:
       0: aload         4
       2: invokeinterface #203,  1          // InterfaceMethod io/vertx/core/AsyncResult.succeeded:()Z
       7: ifeq          39
      10: aload         4
      12: invokeinterface #210,  1          // InterfaceMethod io/vertx/core/AsyncResult.result:()Ljava/lang/Object;
      17: checkcast     #147                // class io/vertx/core/eventbus/Message
      20: astore        5
      22: aload_0
      23: aload         5
      25: invokespecial #211                // Method checkAddAccceptedReplyAddress:(Lio/vertx/core/eventbus/Message;)V
      28: aload_0
      29: aload_1
      30: aload_2
      31: aload         5
      33: invokespecial #212                // Method deliverMessage:(Lio/vertx/ext/web/handler/sockjs/SockJSSocket;Ljava/lang/String;Lio/vertx/core/eventbus/Message;)V
      36: goto          124
      39: aload         4
      41: invokeinterface #204,  1          // InterfaceMethod io/vertx/core/AsyncResult.cause:()Ljava/lang/Throwable;
      46: checkcast     #213                // class io/vertx/core/eventbus/ReplyException
      49: astore        5
      51: new           #26                 // class io/vertx/core/json/JsonObject
      54: dup
      55: invokespecial #99                 // Method io/vertx/core/json/JsonObject."<init>":()V
      58: ldc           #32                 // String type
      60: ldc           #100                // String err
      62: invokevirtual #101                // Method io/vertx/core/json/JsonObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lio/vertx/core/json/JsonObject;
      65: ldc           #38                 // String address
      67: aload_2
      68: invokevirtual #101                // Method io/vertx/core/json/JsonObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lio/vertx/core/json/JsonObject;
      71: ldc           #214                // String failureCode
      73: aload         5
      75: invokevirtual #215                // Method io/vertx/core/eventbus/ReplyException.failureCode:()I
      78: invokestatic  #216                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      81: invokevirtual #101                // Method io/vertx/core/json/JsonObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lio/vertx/core/json/JsonObject;
      84: ldc           #102                // String failureType
      86: aload         5
      88: invokevirtual #217                // Method io/vertx/core/eventbus/ReplyException.failureType:()Lio/vertx/core/eventbus/ReplyFailure;
      91: invokevirtual #218                // Method io/vertx/core/eventbus/ReplyFailure.name:()Ljava/lang/String;
      94: invokevirtual #101                // Method io/vertx/core/json/JsonObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lio/vertx/core/json/JsonObject;
      97: ldc           #104                // String message
      99: aload         5
     101: invokevirtual #219                // Method io/vertx/core/eventbus/ReplyException.getMessage:()Ljava/lang/String;
     104: invokevirtual #101                // Method io/vertx/core/json/JsonObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lio/vertx/core/json/JsonObject;
     107: astore        6
     109: aload_1
     110: aload         6
     112: invokevirtual #196                // Method io/vertx/core/json/JsonObject.encode:()Ljava/lang/String;
     115: invokestatic  #197                // InterfaceMethod io/vertx/core/buffer/Buffer.buffer:(Ljava/lang/String;)Lio/vertx/core/buffer/Buffer;
     118: invokeinterface #198,  2          // InterfaceMethod io/vertx/ext/web/handler/sockjs/SockJSSocket.write:(Lio/vertx/core/buffer/Buffer;)Lio/vertx/core/Future;
     123: pop
     124: aload_3
     125: dup
     126: getfield      #71                 // Field io/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl$SockInfo.handlerCount:I
     129: iconst_1
     130: isub
     131: putfield      #71                 // Field io/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl$SockInfo.handlerCount:I
     134: return

  private void lambda$doSendOrPub$30(boolean, java.lang.String, java.lang.Object, io.vertx.core.json.JsonObject, io.vertx.ext.web.handler.sockjs.SockJSSocket, java.lang.String, io.vertx.core.eventbus.Message, boolean, io.vertx.core.AsyncResult);
    Code:
       0: aload         9
       2: invokeinterface #203,  1          // InterfaceMethod io/vertx/core/AsyncResult.succeeded:()Z
       7: ifeq          91
      10: aload         9
      12: invokeinterface #210,  1          // InterfaceMethod io/vertx/core/AsyncResult.result:()Ljava/lang/Object;
      17: checkcast     #220                // class java/lang/Boolean
      20: invokevirtual #221                // Method java/lang/Boolean.booleanValue:()Z
      23: ifeq          44
      26: aload_0
      27: iload_1
      28: aload_2
      29: aload_3
      30: aload         4
      32: aload         5
      34: aload         6
      36: aload         7
      38: invokespecial #159                // Method checkAndSend:(ZLjava/lang/String;Ljava/lang/Object;Lio/vertx/core/json/JsonObject;Lio/vertx/ext/web/handler/sockjs/SockJSSocket;Ljava/lang/String;Lio/vertx/core/eventbus/Message;)V
      41: goto          115
      44: aload         5
      46: ldc           #160                // String access_denied
      48: invokestatic  #31                 // Method replyError:(Lio/vertx/ext/web/handler/sockjs/SockJSSocket;Ljava/lang/String;)V
      51: iload         8
      53: ifeq          115
      56: getstatic     #48                 // Field LOG:Lio/vertx/core/impl/logging/Logger;
      59: new           #49                 // class java/lang/StringBuilder
      62: dup
      63: invokespecial #50                 // Method java/lang/StringBuilder."<init>":()V
      66: ldc           #157                // String Inbound message for address
      68: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      71: aload_2
      72: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      75: ldc           #222                // String  rejected because is not authorised
      77: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      80: invokevirtual #53                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      83: invokeinterface #146,  2          // InterfaceMethod io/vertx/core/impl/logging/Logger.debug:(Ljava/lang/Object;)V
      88: goto          115
      91: aload         5
      93: ldc           #223                // String auth_error
      95: invokestatic  #31                 // Method replyError:(Lio/vertx/ext/web/handler/sockjs/SockJSSocket;Ljava/lang/String;)V
      98: getstatic     #48                 // Field LOG:Lio/vertx/core/impl/logging/Logger;
     101: ldc           #224                // String Error in performing authorization
     103: aload         9
     105: invokeinterface #204,  1          // InterfaceMethod io/vertx/core/AsyncResult.cause:()Ljava/lang/Throwable;
     110: invokeinterface #98,  3           // InterfaceMethod io/vertx/core/impl/logging/Logger.error:(Ljava/lang/Object;Ljava/lang/Throwable;)V
     115: return

  private static void lambda$deliverMessage$29();
    Code:
       0: getstatic     #48                 // Field LOG:Lio/vertx/core/impl/logging/Logger;
       3: ldc           #225                // String outbound message rejected by bridge event handler
       5: invokeinterface #146,  2          // InterfaceMethod io/vertx/core/impl/logging/Logger.debug:(Ljava/lang/Object;)V
      10: return

  private static void lambda$deliverMessage$28(io.vertx.ext.web.handler.sockjs.SockJSSocket, io.vertx.core.json.JsonObject);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #196                // Method io/vertx/core/json/JsonObject.encode:()Ljava/lang/String;
       5: invokestatic  #197                // InterfaceMethod io/vertx/core/buffer/Buffer.buffer:(Ljava/lang/String;)Lio/vertx/core/buffer/Buffer;
       8: invokeinterface #198,  2          // InterfaceMethod io/vertx/ext/web/handler/sockjs/SockJSSocket.write:(Lio/vertx/core/buffer/Buffer;)Lio/vertx/core/Future;
      13: pop
      14: return

  private static io.vertx.ext.web.handler.sockjs.impl.BridgeEventImpl lambda$deliverMessage$27(io.vertx.core.json.JsonObject, io.vertx.ext.web.handler.sockjs.SockJSSocket);
    Code:
       0: new           #59                 // class io/vertx/ext/web/handler/sockjs/impl/BridgeEventImpl
       3: dup
       4: getstatic     #226                // Field io/vertx/ext/bridge/BridgeEventType.RECEIVE:Lio/vertx/ext/bridge/BridgeEventType;
       7: aload_0
       8: aload_1
       9: invokespecial #227                // Method io/vertx/ext/web/handler/sockjs/impl/BridgeEventImpl."<init>":(Lio/vertx/ext/bridge/BridgeEventType;Lio/vertx/core/json/JsonObject;Lio/vertx/ext/web/handler/sockjs/SockJSSocket;)V
      12: areturn

  private void lambda$checkAddAccceptedReplyAddress$26(java.lang.String, java.lang.Long);
    Code:
       0: aload_0
       1: getfield      #5                  // Field messagesAwaitingReply:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #114,  2          // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #147                // class io/vertx/core/eventbus/Message
      13: pop
      14: return

  private static io.vertx.ext.web.handler.sockjs.impl.BridgeEventImpl lambda$clearSocketState$25(io.vertx.core.eventbus.MessageConsumer, io.vertx.ext.web.handler.sockjs.SockJSSocket);
    Code:
       0: new           #59                 // class io/vertx/ext/web/handler/sockjs/impl/BridgeEventImpl
       3: dup
       4: getstatic     #228                // Field io/vertx/ext/bridge/BridgeEventType.UNREGISTER:Lio/vertx/ext/bridge/BridgeEventType;
       7: new           #26                 // class io/vertx/core/json/JsonObject
      10: dup
      11: invokespecial #99                 // Method io/vertx/core/json/JsonObject."<init>":()V
      14: ldc           #32                 // String type
      16: ldc           #44                 // String unregister
      18: invokevirtual #101                // Method io/vertx/core/json/JsonObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lio/vertx/core/json/JsonObject;
      21: ldc           #38                 // String address
      23: aload_0
      24: invokeinterface #229,  1          // InterfaceMethod io/vertx/core/eventbus/MessageConsumer.address:()Ljava/lang/String;
      29: invokevirtual #101                // Method io/vertx/core/json/JsonObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lio/vertx/core/json/JsonObject;
      32: aload_1
      33: invokespecial #227                // Method io/vertx/ext/web/handler/sockjs/impl/BridgeEventImpl."<init>":(Lio/vertx/ext/bridge/BridgeEventType;Lio/vertx/core/json/JsonObject;Lio/vertx/ext/web/handler/sockjs/SockJSSocket;)V
      36: areturn

  private static io.vertx.ext.web.handler.sockjs.impl.BridgeEventImpl lambda$handleSocketException$24(io.vertx.core.json.JsonObject, io.vertx.ext.web.handler.sockjs.SockJSSocket);
    Code:
       0: new           #59                 // class io/vertx/ext/web/handler/sockjs/impl/BridgeEventImpl
       3: dup
       4: getstatic     #230                // Field io/vertx/ext/bridge/BridgeEventType.SOCKET_ERROR:Lio/vertx/ext/bridge/BridgeEventType;
       7: aload_0
       8: aload_1
       9: invokespecial #227                // Method io/vertx/ext/web/handler/sockjs/impl/BridgeEventImpl."<init>":(Lio/vertx/ext/bridge/BridgeEventType;Lio/vertx/core/json/JsonObject;Lio/vertx/ext/web/handler/sockjs/SockJSSocket;)V
      12: areturn

  private static io.vertx.ext.web.handler.sockjs.impl.BridgeEventImpl lambda$handleSocketClosed$23(io.vertx.ext.web.handler.sockjs.SockJSSocket);
    Code:
       0: new           #59                 // class io/vertx/ext/web/handler/sockjs/impl/BridgeEventImpl
       3: dup
       4: getstatic     #231                // Field io/vertx/ext/bridge/BridgeEventType.SOCKET_CLOSED:Lio/vertx/ext/bridge/BridgeEventType;
       7: aconst_null
       8: aload_0
       9: invokespecial #227                // Method io/vertx/ext/web/handler/sockjs/impl/BridgeEventImpl."<init>":(Lio/vertx/ext/bridge/BridgeEventType;Lio/vertx/core/json/JsonObject;Lio/vertx/ext/web/handler/sockjs/SockJSSocket;)V
      12: areturn

  private void lambda$handle$22(io.vertx.ext.web.handler.sockjs.SockJSSocket);
    Code:
       0: new           #2                  // class java/util/HashMap
       3: dup
       4: invokespecial #3                  // Method java/util/HashMap."<init>":()V
       7: astore_2
       8: aload_1
       9: aload_0
      10: aload_1
      11: aload_2
      12: invokedynamic #232,  0            // InvokeDynamic #27:handle:(Lio/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl;Lio/vertx/ext/web/handler/sockjs/SockJSSocket;Ljava/util/Map;)Lio/vertx/core/Handler;
      17: invokeinterface #233,  2          // InterfaceMethod io/vertx/ext/web/handler/sockjs/SockJSSocket.handler:(Lio/vertx/core/Handler;)Lio/vertx/ext/web/handler/sockjs/SockJSSocket;
      22: aload_0
      23: aload_1
      24: aload_2
      25: invokedynamic #234,  0            // InvokeDynamic #28:handle:(Lio/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl;Lio/vertx/ext/web/handler/sockjs/SockJSSocket;Ljava/util/Map;)Lio/vertx/core/Handler;
      30: invokeinterface #235,  2          // InterfaceMethod io/vertx/ext/web/handler/sockjs/SockJSSocket.exceptionHandler:(Lio/vertx/core/Handler;)Lio/vertx/ext/web/handler/sockjs/SockJSSocket;
      35: aload_0
      36: aload_1
      37: aload_2
      38: invokedynamic #236,  0            // InvokeDynamic #29:handle:(Lio/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl;Lio/vertx/ext/web/handler/sockjs/SockJSSocket;Ljava/util/Map;)Lio/vertx/core/Handler;
      43: invokeinterface #237,  2          // InterfaceMethod io/vertx/ext/web/handler/sockjs/SockJSSocket.closeHandler:(Lio/vertx/core/Handler;)Lio/vertx/ext/web/handler/sockjs/SockJSSocket;
      48: pop
      49: new           #238                // class io/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl$PingInfo
      52: dup
      53: aconst_null
      54: invokespecial #239                // Method io/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl$PingInfo."<init>":(Lio/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl$1;)V
      57: astore_3
      58: aload_3
      59: aload_0
      60: getfield      #7                  // Field vertx:Lio/vertx/core/Vertx;
      63: aload_0
      64: getfield      #22                 // Field pingTimeout:J
      67: aload_0
      68: aload_3
      69: aload_1
      70: invokedynamic #240,  0            // InvokeDynamic #30:handle:(Lio/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl;Lio/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl$PingInfo;Lio/vertx/ext/web/handler/sockjs/SockJSSocket;)Lio/vertx/core/Handler;
      75: invokeinterface #241,  4          // InterfaceMethod io/vertx/core/Vertx.setPeriodic:(JLio/vertx/core/Handler;)J
      80: putfield      #115                // Field io/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl$PingInfo.timerID:J
      83: new           #76                 // class io/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl$SockInfo
      86: dup
      87: aconst_null
      88: invokespecial #242                // Method io/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl$SockInfo."<init>":(Lio/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl$1;)V
      91: astore        4
      93: aload         4
      95: aload_3
      96: putfield      #86                 // Field io/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl$SockInfo.pingInfo:Lio/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl$PingInfo;
      99: aload_0
     100: getfield      #4                  // Field sockInfos:Ljava/util/Map;
     103: aload_1
     104: aload         4
     106: invokeinterface #118,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     111: pop
     112: return

  private void lambda$null$21(io.vertx.ext.web.handler.sockjs.impl.EventBusBridgeImpl$PingInfo, io.vertx.ext.web.handler.sockjs.SockJSSocket, java.lang.Long);
    Code:
       0: invokestatic  #87                 // Method java/lang/System.currentTimeMillis:()J
       3: aload_1
       4: getfield      #88                 // Field io/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl$PingInfo.lastPing:J
       7: lsub
       8: aload_0
       9: getfield      #22                 // Field pingTimeout:J
      12: lcmp
      13: iflt          46
      16: aload_0
      17: aload_2
      18: invokedynamic #243,  0            // InvokeDynamic #31:get:(Lio/vertx/ext/web/handler/sockjs/SockJSSocket;)Ljava/util/function/Supplier;
      23: aload_2
      24: checkcast     #244                // class io/vertx/ext/web/handler/sockjs/impl/SockJSSocketBase
      27: dup
      28: invokevirtual #93                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      31: pop
      32: invokedynamic #245,  0            // InvokeDynamic #32:run:(Lio/vertx/ext/web/handler/sockjs/impl/SockJSSocketBase;)Ljava/lang/Runnable;
      37: aload_2
      38: invokedynamic #246,  0            // InvokeDynamic #33:run:(Lio/vertx/ext/web/handler/sockjs/SockJSSocket;)Ljava/lang/Runnable;
      43: invokespecial #56                 // Method checkCallHook:(Ljava/util/function/Supplier;Ljava/lang/Runnable;Ljava/lang/Runnable;)V
      46: return

  private static void lambda$null$20(io.vertx.ext.web.handler.sockjs.SockJSSocket);
    Code:
       0: aload_0
       1: ldc           #247                // String rejected
       3: invokestatic  #31                 // Method replyError:(Lio/vertx/ext/web/handler/sockjs/SockJSSocket;Ljava/lang/String;)V
       6: return

  private static io.vertx.ext.web.handler.sockjs.impl.BridgeEventImpl lambda$null$19(io.vertx.ext.web.handler.sockjs.SockJSSocket);
    Code:
       0: new           #59                 // class io/vertx/ext/web/handler/sockjs/impl/BridgeEventImpl
       3: dup
       4: getstatic     #248                // Field io/vertx/ext/bridge/BridgeEventType.SOCKET_IDLE:Lio/vertx/ext/bridge/BridgeEventType;
       7: aconst_null
       8: aload_0
       9: invokespecial #227                // Method io/vertx/ext/web/handler/sockjs/impl/BridgeEventImpl."<init>":(Lio/vertx/ext/bridge/BridgeEventType;Lio/vertx/core/json/JsonObject;Lio/vertx/ext/web/handler/sockjs/SockJSSocket;)V
      12: areturn

  private void lambda$null$18(io.vertx.ext.web.handler.sockjs.SockJSSocket, java.util.Map, java.lang.Void);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #249                // Method handleSocketClosed:(Lio/vertx/ext/web/handler/sockjs/SockJSSocket;Ljava/util/Map;)V
       6: return

  private void lambda$null$17(io.vertx.ext.web.handler.sockjs.SockJSSocket, java.util.Map, java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: aload_3
       3: aload_2
       4: invokespecial #250                // Method handleSocketException:(Lio/vertx/ext/web/handler/sockjs/SockJSSocket;Ljava/lang/Throwable;Ljava/util/Map;)V
       7: return

  private void lambda$null$16(io.vertx.ext.web.handler.sockjs.SockJSSocket, java.util.Map, io.vertx.core.buffer.Buffer);
    Code:
       0: aload_0
       1: aload_1
       2: aload_3
       3: aload_2
       4: invokespecial #251                // Method handleSocketData:(Lio/vertx/ext/web/handler/sockjs/SockJSSocket;Lio/vertx/core/buffer/Buffer;Ljava/util/Map;)V
       7: return

  private static io.vertx.ext.web.handler.sockjs.impl.BridgeEventImpl lambda$handle$15(io.vertx.ext.web.handler.sockjs.SockJSSocket);
    Code:
       0: new           #59                 // class io/vertx/ext/web/handler/sockjs/impl/BridgeEventImpl
       3: dup
       4: getstatic     #252                // Field io/vertx/ext/bridge/BridgeEventType.SOCKET_CREATED:Lio/vertx/ext/bridge/BridgeEventType;
       7: aconst_null
       8: aload_0
       9: invokespecial #227                // Method io/vertx/ext/web/handler/sockjs/impl/BridgeEventImpl."<init>":(Lio/vertx/ext/bridge/BridgeEventType;Lio/vertx/core/json/JsonObject;Lio/vertx/ext/web/handler/sockjs/SockJSSocket;)V
      12: areturn

  private static io.vertx.ext.web.handler.sockjs.impl.BridgeEventImpl lambda$internalHandlePing$14(io.vertx.ext.web.handler.sockjs.SockJSSocket);
    Code:
       0: new           #59                 // class io/vertx/ext/web/handler/sockjs/impl/BridgeEventImpl
       3: dup
       4: getstatic     #253                // Field io/vertx/ext/bridge/BridgeEventType.SOCKET_PING:Lio/vertx/ext/bridge/BridgeEventType;
       7: aconst_null
       8: aload_0
       9: invokespecial #227                // Method io/vertx/ext/web/handler/sockjs/impl/BridgeEventImpl."<init>":(Lio/vertx/ext/bridge/BridgeEventType;Lio/vertx/core/json/JsonObject;Lio/vertx/ext/web/handler/sockjs/SockJSSocket;)V
      12: areturn

  private static void lambda$internalHandleUnregister$13(io.vertx.ext.web.handler.sockjs.SockJSSocket);
    Code:
       0: aload_0
       1: ldc           #247                // String rejected
       3: invokestatic  #31                 // Method replyError:(Lio/vertx/ext/web/handler/sockjs/SockJSSocket;Ljava/lang/String;)V
       6: return

  private void lambda$internalHandleUnregister$12(io.vertx.core.json.JsonObject, io.vertx.ext.web.handler.sockjs.SockJSSocket, java.util.Map);
    Code:
       0: aload_1
       1: ldc           #38                 // String address
       3: invokevirtual #33                 // Method io/vertx/core/json/JsonObject.getString:(Ljava/lang/String;)Ljava/lang/String;
       6: astore        4
       8: aload         4
      10: ifnonnull     20
      13: aload_2
      14: ldc           #39                 // String missing_address
      16: invokestatic  #31                 // Method replyError:(Lio/vertx/ext/web/handler/sockjs/SockJSSocket;Ljava/lang/String;)V
      19: return
      20: aload_0
      21: iconst_0
      22: aload         4
      24: aconst_null
      25: invokespecial #150                // Method checkMatches:(ZLjava/lang/String;Ljava/lang/Object;)Lio/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl$Match;
      28: astore        5
      30: aload         5
      32: getfield      #151                // Field io/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl$Match.doesMatch:Z
      35: ifeq          93
      38: aload_3
      39: aload         4
      41: invokeinterface #114,  2          // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      46: checkcast     #111                // class io/vertx/core/eventbus/MessageConsumer
      49: astore        6
      51: aload         6
      53: ifnull        90
      56: aload_0
      57: getfield      #4                  // Field sockInfos:Ljava/util/Map;
      60: aload_2
      61: invokeinterface #75,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      66: checkcast     #76                 // class io/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl$SockInfo
      69: astore        7
      71: aload         6
      73: invokeinterface #112,  1          // InterfaceMethod io/vertx/core/eventbus/MessageConsumer.unregister:()Lio/vertx/core/Future;
      78: pop
      79: aload         7
      81: dup
      82: getfield      #71                 // Field io/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl$SockInfo.handlerCount:I
      85: iconst_1
      86: isub
      87: putfield      #71                 // Field io/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl$SockInfo.handlerCount:I
      90: goto          143
      93: getstatic     #48                 // Field LOG:Lio/vertx/core/impl/logging/Logger;
      96: invokeinterface #142,  1          // InterfaceMethod io/vertx/core/impl/logging/Logger.isDebugEnabled:()Z
     101: ifeq          137
     104: getstatic     #48                 // Field LOG:Lio/vertx/core/impl/logging/Logger;
     107: new           #49                 // class java/lang/StringBuilder
     110: dup
     111: invokespecial #50                 // Method java/lang/StringBuilder."<init>":()V
     114: ldc           #254                // String Cannot unregister handler for address
     116: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     119: aload         4
     121: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     124: ldc           #255                // String  because there is no inbound match
     126: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     129: invokevirtual #53                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     132: invokeinterface #146,  2          // InterfaceMethod io/vertx/core/impl/logging/Logger.debug:(Ljava/lang/Object;)V
     137: aload_2
     138: ldc           #160                // String access_denied
     140: invokestatic  #31                 // Method replyError:(Lio/vertx/ext/web/handler/sockjs/SockJSSocket;Ljava/lang/String;)V
     143: return

  private static io.vertx.ext.web.handler.sockjs.impl.BridgeEventImpl lambda$internalHandleUnregister$11(io.vertx.core.json.JsonObject, io.vertx.ext.web.handler.sockjs.SockJSSocket);
    Code:
       0: new           #59                 // class io/vertx/ext/web/handler/sockjs/impl/BridgeEventImpl
       3: dup
       4: getstatic     #228                // Field io/vertx/ext/bridge/BridgeEventType.UNREGISTER:Lio/vertx/ext/bridge/BridgeEventType;
       7: aload_0
       8: aload_1
       9: invokespecial #227                // Method io/vertx/ext/web/handler/sockjs/impl/BridgeEventImpl."<init>":(Lio/vertx/ext/bridge/BridgeEventType;Lio/vertx/core/json/JsonObject;Lio/vertx/ext/web/handler/sockjs/SockJSSocket;)V
      12: areturn

  private static void lambda$internalHandleRegister$10(io.vertx.ext.web.handler.sockjs.SockJSSocket);
    Code:
       0: aload_0
       1: ldc           #247                // String rejected
       3: invokestatic  #31                 // Method replyError:(Lio/vertx/ext/web/handler/sockjs/SockJSSocket;Ljava/lang/String;)V
       6: return

  private void lambda$internalHandleRegister$9(io.vertx.core.json.JsonObject, io.vertx.ext.web.handler.sockjs.SockJSSocket, java.util.Map, io.vertx.ext.web.handler.sockjs.impl.EventBusBridgeImpl$SockInfo);
    Code:
       0: getstatic     #48                 // Field LOG:Lio/vertx/core/impl/logging/Logger;
       3: invokeinterface #142,  1          // InterfaceMethod io/vertx/core/impl/logging/Logger.isDebugEnabled:()Z
       8: istore        5
      10: aload_1
      11: ldc           #38                 // String address
      13: invokevirtual #33                 // Method io/vertx/core/json/JsonObject.getString:(Ljava/lang/String;)Ljava/lang/String;
      16: astore        6
      18: aload         6
      20: ifnonnull     30
      23: aload_2
      24: ldc           #39                 // String missing_address
      26: invokestatic  #31                 // Method replyError:(Lio/vertx/ext/web/handler/sockjs/SockJSSocket;Ljava/lang/String;)V
      29: return
      30: aload         6
      32: invokevirtual #139                // Method java/lang/String.length:()I
      35: aload_0
      36: getfield      #18                 // Field maxAddressLength:I
      39: if_icmple     61
      42: getstatic     #48                 // Field LOG:Lio/vertx/core/impl/logging/Logger;
      45: ldc_w         #256                // String Refusing to register as address length > max_address_length
      48: invokeinterface #73,  2           // InterfaceMethod io/vertx/core/impl/logging/Logger.warn:(Ljava/lang/Object;)V
      53: aload_2
      54: ldc_w         #257                // String max_address_length_reached
      57: invokestatic  #31                 // Method replyError:(Lio/vertx/ext/web/handler/sockjs/SockJSSocket;Ljava/lang/String;)V
      60: return
      61: aload_0
      62: iconst_0
      63: aload         6
      65: aconst_null
      66: invokespecial #150                // Method checkMatches:(ZLjava/lang/String;Ljava/lang/Object;)Lio/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl$Match;
      69: astore        7
      71: aload         7
      73: getfield      #151                // Field io/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl$Match.doesMatch:Z
      76: ifeq          178
      79: aload_3
      80: aload         6
      82: invokeinterface #61,  2           // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
      87: ifeq          109
      90: getstatic     #48                 // Field LOG:Lio/vertx/core/impl/logging/Logger;
      93: ldc_w         #258                // String Refusing to register as address is already registered
      96: invokeinterface #73,  2           // InterfaceMethod io/vertx/core/impl/logging/Logger.warn:(Ljava/lang/Object;)V
     101: aload_2
     102: ldc_w         #259                // String address_already_registered
     105: invokestatic  #31                 // Method replyError:(Lio/vertx/ext/web/handler/sockjs/SockJSSocket;Ljava/lang/String;)V
     108: return
     109: aload_0
     110: aload         6
     112: aload_2
     113: iload         5
     115: invokedynamic #260,  0            // InvokeDynamic #34:handle:(Lio/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl;Ljava/lang/String;Lio/vertx/ext/web/handler/sockjs/SockJSSocket;Z)Lio/vertx/core/Handler;
     120: astore        8
     122: aload_0
     123: getfield      #9                  // Field eb:Lio/vertx/core/eventbus/EventBus;
     126: aload         6
     128: invokeinterface #261,  2          // InterfaceMethod io/vertx/core/eventbus/EventBus.consumer:(Ljava/lang/String;)Lio/vertx/core/eventbus/MessageConsumer;
     133: aload         8
     135: invokeinterface #262,  2          // InterfaceMethod io/vertx/core/eventbus/MessageConsumer.handler:(Lio/vertx/core/Handler;)Lio/vertx/core/eventbus/MessageConsumer;
     140: astore        9
     142: aload_3
     143: aload         6
     145: aload         9
     147: invokeinterface #118,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     152: pop
     153: aload         4
     155: dup
     156: getfield      #71                 // Field io/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl$SockInfo.handlerCount:I
     159: iconst_1
     160: iadd
     161: putfield      #71                 // Field io/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl$SockInfo.handlerCount:I
     164: aload_0
     165: aload_1
     166: aload_2
     167: invokedynamic #263,  0            // InvokeDynamic #35:get:(Lio/vertx/core/json/JsonObject;Lio/vertx/ext/web/handler/sockjs/SockJSSocket;)Ljava/util/function/Supplier;
     172: invokespecial #90                 // Method checkCallHook:(Ljava/util/function/Supplier;)V
     175: goto          223
     178: iload         5
     180: ifeq          217
     183: getstatic     #48                 // Field LOG:Lio/vertx/core/impl/logging/Logger;
     186: new           #49                 // class java/lang/StringBuilder
     189: dup
     190: invokespecial #50                 // Method java/lang/StringBuilder."<init>":()V
     193: ldc_w         #264                // String Cannot register handler for address
     196: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     199: aload         6
     201: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     204: ldc           #255                // String  because there is no inbound match
     206: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     209: invokevirtual #53                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     212: invokeinterface #146,  2          // InterfaceMethod io/vertx/core/impl/logging/Logger.debug:(Ljava/lang/Object;)V
     217: aload_2
     218: ldc           #160                // String access_denied
     220: invokestatic  #31                 // Method replyError:(Lio/vertx/ext/web/handler/sockjs/SockJSSocket;Ljava/lang/String;)V
     223: return

  private static io.vertx.ext.web.handler.sockjs.impl.BridgeEventImpl lambda$null$8(io.vertx.core.json.JsonObject, io.vertx.ext.web.handler.sockjs.SockJSSocket);
    Code:
       0: new           #59                 // class io/vertx/ext/web/handler/sockjs/impl/BridgeEventImpl
       3: dup
       4: getstatic     #265                // Field io/vertx/ext/bridge/BridgeEventType.REGISTERED:Lio/vertx/ext/bridge/BridgeEventType;
       7: aload_0
       8: aload_1
       9: invokespecial #227                // Method io/vertx/ext/web/handler/sockjs/impl/BridgeEventImpl."<init>":(Lio/vertx/ext/bridge/BridgeEventType;Lio/vertx/core/json/JsonObject;Lio/vertx/ext/web/handler/sockjs/SockJSSocket;)V
      12: areturn

  private void lambda$null$7(java.lang.String, io.vertx.ext.web.handler.sockjs.SockJSSocket, boolean, io.vertx.core.eventbus.Message);
    Code:
       0: aload_0
       1: iconst_0
       2: aload_1
       3: aload         4
       5: invokeinterface #123,  1          // InterfaceMethod io/vertx/core/eventbus/Message.body:()Ljava/lang/Object;
      10: invokespecial #150                // Method checkMatches:(ZLjava/lang/String;Ljava/lang/Object;)Lio/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl$Match;
      13: astore        5
      15: aload         5
      17: getfield      #151                // Field io/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl$Match.doesMatch:Z
      20: ifeq          74
      23: aload         5
      25: getfield      #152                // Field io/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl$Match.requiredAuthority:Lio/vertx/ext/auth/authorization/Authorization;
      28: ifnull        57
      31: aload_0
      32: aload         5
      34: aload_2
      35: invokeinterface #153,  1          // InterfaceMethod io/vertx/ext/web/handler/sockjs/SockJSSocket.webUser:()Lio/vertx/ext/auth/User;
      40: aload_0
      41: aload         4
      43: aload_2
      44: aload_1
      45: iload_3
      46: invokedynamic #266,  0            // InvokeDynamic #36:handle:(Lio/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl;Lio/vertx/core/eventbus/Message;Lio/vertx/ext/web/handler/sockjs/SockJSSocket;Ljava/lang/String;Z)Lio/vertx/core/Handler;
      51: invokespecial #155                // Method authorise:(Lio/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl$Match;Lio/vertx/ext/auth/User;Lio/vertx/core/Handler;)V
      54: goto          112
      57: aload_0
      58: aload         4
      60: invokespecial #211                // Method checkAddAccceptedReplyAddress:(Lio/vertx/core/eventbus/Message;)V
      63: aload_0
      64: aload_2
      65: aload_1
      66: aload         4
      68: invokespecial #212                // Method deliverMessage:(Lio/vertx/ext/web/handler/sockjs/SockJSSocket;Ljava/lang/String;Lio/vertx/core/eventbus/Message;)V
      71: goto          112
      74: iload_3
      75: ifeq          112
      78: getstatic     #48                 // Field LOG:Lio/vertx/core/impl/logging/Logger;
      81: new           #49                 // class java/lang/StringBuilder
      84: dup
      85: invokespecial #50                 // Method java/lang/StringBuilder."<init>":()V
      88: ldc_w         #267                // String Outbound message for address
      91: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      94: aload_1
      95: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      98: ldc_w         #268                // String  rejected because there is no inbound match
     101: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     104: invokevirtual #53                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     107: invokeinterface #146,  2          // InterfaceMethod io/vertx/core/impl/logging/Logger.debug:(Ljava/lang/Object;)V
     112: return

  private void lambda$null$6(io.vertx.core.eventbus.Message, io.vertx.ext.web.handler.sockjs.SockJSSocket, java.lang.String, boolean, io.vertx.core.AsyncResult);
    Code:
       0: aload         5
       2: invokeinterface #203,  1          // InterfaceMethod io/vertx/core/AsyncResult.succeeded:()Z
       7: ifeq          83
      10: aload         5
      12: invokeinterface #210,  1          // InterfaceMethod io/vertx/core/AsyncResult.result:()Ljava/lang/Object;
      17: checkcast     #220                // class java/lang/Boolean
      20: invokevirtual #221                // Method java/lang/Boolean.booleanValue:()Z
      23: ifeq          41
      26: aload_0
      27: aload_1
      28: invokespecial #211                // Method checkAddAccceptedReplyAddress:(Lio/vertx/core/eventbus/Message;)V
      31: aload_0
      32: aload_2
      33: aload_3
      34: aload_1
      35: invokespecial #212                // Method deliverMessage:(Lio/vertx/ext/web/handler/sockjs/SockJSSocket;Ljava/lang/String;Lio/vertx/core/eventbus/Message;)V
      38: goto          98
      41: iload         4
      43: ifeq          98
      46: getstatic     #48                 // Field LOG:Lio/vertx/core/impl/logging/Logger;
      49: new           #49                 // class java/lang/StringBuilder
      52: dup
      53: invokespecial #50                 // Method java/lang/StringBuilder."<init>":()V
      56: ldc_w         #267                // String Outbound message for address
      59: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      62: aload_3
      63: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      66: ldc_w         #269                // String  rejected because auth is required and socket is not authed
      69: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      72: invokevirtual #53                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      75: invokeinterface #146,  2          // InterfaceMethod io/vertx/core/impl/logging/Logger.debug:(Ljava/lang/Object;)V
      80: goto          98
      83: getstatic     #48                 // Field LOG:Lio/vertx/core/impl/logging/Logger;
      86: aload         5
      88: invokeinterface #204,  1          // InterfaceMethod io/vertx/core/AsyncResult.cause:()Ljava/lang/Throwable;
      93: invokeinterface #54,  2           // InterfaceMethod io/vertx/core/impl/logging/Logger.error:(Ljava/lang/Object;)V
      98: return

  private static io.vertx.ext.web.handler.sockjs.impl.BridgeEventImpl lambda$internalHandleRegister$5(io.vertx.core.json.JsonObject, io.vertx.ext.web.handler.sockjs.SockJSSocket);
    Code:
       0: new           #59                 // class io/vertx/ext/web/handler/sockjs/impl/BridgeEventImpl
       3: dup
       4: getstatic     #270                // Field io/vertx/ext/bridge/BridgeEventType.REGISTER:Lio/vertx/ext/bridge/BridgeEventType;
       7: aload_0
       8: aload_1
       9: invokespecial #227                // Method io/vertx/ext/web/handler/sockjs/impl/BridgeEventImpl."<init>":(Lio/vertx/ext/bridge/BridgeEventType;Lio/vertx/core/json/JsonObject;Lio/vertx/ext/web/handler/sockjs/SockJSSocket;)V
      12: areturn

  private static void lambda$internalHandleSendOrPub$4(io.vertx.ext.web.handler.sockjs.SockJSSocket);
    Code:
       0: aload_0
       1: ldc           #247                // String rejected
       3: invokestatic  #31                 // Method replyError:(Lio/vertx/ext/web/handler/sockjs/SockJSSocket;Ljava/lang/String;)V
       6: return

  private void lambda$internalHandleSendOrPub$3(io.vertx.core.json.JsonObject, io.vertx.ext.web.handler.sockjs.SockJSSocket, boolean);
    Code:
       0: aload_1
       1: ldc           #38                 // String address
       3: invokevirtual #33                 // Method io/vertx/core/json/JsonObject.getString:(Ljava/lang/String;)Ljava/lang/String;
       6: astore        4
       8: aload         4
      10: ifnonnull     20
      13: aload_2
      14: ldc           #39                 // String missing_address
      16: invokestatic  #31                 // Method replyError:(Lio/vertx/ext/web/handler/sockjs/SockJSSocket;Ljava/lang/String;)V
      19: return
      20: aload_0
      21: iload_3
      22: aload_2
      23: aload         4
      25: aload_1
      26: invokespecial #271                // Method doSendOrPub:(ZLio/vertx/ext/web/handler/sockjs/SockJSSocket;Ljava/lang/String;Lio/vertx/core/json/JsonObject;)V
      29: return

  private static io.vertx.ext.web.handler.sockjs.impl.BridgeEventImpl lambda$internalHandleSendOrPub$2(boolean, io.vertx.core.json.JsonObject, io.vertx.ext.web.handler.sockjs.SockJSSocket);
    Code:
       0: new           #59                 // class io/vertx/ext/web/handler/sockjs/impl/BridgeEventImpl
       3: dup
       4: iload_0
       5: ifeq          14
       8: getstatic     #272                // Field io/vertx/ext/bridge/BridgeEventType.SEND:Lio/vertx/ext/bridge/BridgeEventType;
      11: goto          17
      14: getstatic     #273                // Field io/vertx/ext/bridge/BridgeEventType.PUBLISH:Lio/vertx/ext/bridge/BridgeEventType;
      17: aload_1
      18: aload_2
      19: invokespecial #227                // Method io/vertx/ext/web/handler/sockjs/impl/BridgeEventImpl."<init>":(Lio/vertx/ext/bridge/BridgeEventType;Lio/vertx/core/json/JsonObject;Lio/vertx/ext/web/handler/sockjs/SockJSSocket;)V
      22: areturn

  private void lambda$checkCallHook$1(io.vertx.ext.web.handler.sockjs.impl.BridgeEventImpl, boolean, java.lang.Runnable, java.lang.Runnable, java.lang.Boolean);
    Code:
       0: aload         5
       2: invokevirtual #221                // Method java/lang/Boolean.booleanValue:()Z
       5: ifeq          71
       8: aload_0
       9: getfield      #4                  // Field sockInfos:Ljava/util/Map;
      12: aload_1
      13: invokevirtual #60                 // Method io/vertx/ext/web/handler/sockjs/impl/BridgeEventImpl.socket:()Lio/vertx/ext/web/handler/sockjs/SockJSSocket;
      16: invokeinterface #61,  2           // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
      21: istore        6
      23: iload_2
      24: iload         6
      26: if_icmpeq     56
      29: aload_3
      30: ifnull        42
      33: aload_3
      34: invokeinterface #57,  1           // InterfaceMethod java/lang/Runnable.run:()V
      39: goto          68
      42: getstatic     #48                 // Field LOG:Lio/vertx/core/impl/logging/Logger;
      45: ldc_w         #274                // String SockJSSocket state change prevented send or pub
      48: invokeinterface #146,  2          // InterfaceMethod io/vertx/core/impl/logging/Logger.debug:(Ljava/lang/Object;)V
      53: goto          68
      56: aload         4
      58: ifnull        68
      61: aload         4
      63: invokeinterface #57,  1           // InterfaceMethod java/lang/Runnable.run:()V
      68: goto          95
      71: aload_3
      72: ifnull        84
      75: aload_3
      76: invokeinterface #57,  1           // InterfaceMethod java/lang/Runnable.run:()V
      81: goto          95
      84: getstatic     #48                 // Field LOG:Lio/vertx/core/impl/logging/Logger;
      87: ldc_w         #275                // String Bridge handler prevented send or pub
      90: invokeinterface #146,  2          // InterfaceMethod io/vertx/core/impl/logging/Logger.debug:(Ljava/lang/Object;)V
      95: return

  private static void lambda$checkCallHook$0(java.lang.Throwable);
    Code:
       0: getstatic     #48                 // Field LOG:Lio/vertx/core/impl/logging/Logger;
       3: ldc_w         #276                // String Failure in bridge event handler
       6: aload_0
       7: invokeinterface #98,  3           // InterfaceMethod io/vertx/core/impl/logging/Logger.error:(Ljava/lang/Object;Ljava/lang/Throwable;)V
      12: return

  static {};
    Code:
       0: ldc_w         #277                // class io/vertx/ext/web/handler/sockjs/impl/EventBusBridgeImpl
       3: invokestatic  #278                // Method io/vertx/core/impl/logging/LoggerFactory.getLogger:(Ljava/lang/Class;)Lio/vertx/core/impl/logging/Logger;
       6: putstatic     #48                 // Field LOG:Lio/vertx/core/impl/logging/Logger;
       9: return
}
