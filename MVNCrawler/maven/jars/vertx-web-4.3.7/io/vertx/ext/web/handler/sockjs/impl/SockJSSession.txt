Compiled from "SockJSSession.java"
class io.vertx.ext.web.handler.sockjs.impl.SockJSSession extends io.vertx.ext.web.handler.sockjs.impl.SockJSSocketBase implements io.vertx.core.shareddata.Shareable {
  private static final io.vertx.core.impl.logging.Logger LOG;

  private final io.vertx.core.shareddata.LocalMap<java.lang.String, io.vertx.ext.web.handler.sockjs.impl.SockJSSession> sessions;

  private final java.util.Deque<java.lang.String> pendingWrites;

  private final io.vertx.core.Context context;

  private final io.vertx.core.streams.impl.InboundBuffer<io.vertx.core.buffer.Buffer> pendingReads;

  private final java.lang.String id;

  private final long timeout;

  private final io.vertx.core.Handler<io.vertx.ext.web.handler.sockjs.SockJSSocket> sockHandler;

  private final long heartbeatID;

  private final java.util.List<io.vertx.core.Handler<io.vertx.core.AsyncResult<java.lang.Void>>> writeAcks;

  private io.vertx.ext.web.handler.sockjs.impl.TransportListener listener;

  private boolean closed;

  private boolean openWritten;

  private long timeoutTimerID;

  private int maxQueueSize;

  private int messagesSize;

  private io.vertx.core.Handler<java.lang.Void> drainHandler;

  private io.vertx.core.Handler<java.lang.Void> endHandler;

  private io.vertx.core.Handler<java.lang.Void> closeHandler;

  private io.vertx.core.Handler<java.lang.Throwable> exceptionHandler;

  private boolean handleCalled;

  private io.vertx.core.net.SocketAddress localAddress;

  private io.vertx.core.net.SocketAddress remoteAddress;

  private java.lang.String uri;

  private io.vertx.core.MultiMap headers;

  private io.vertx.core.Context transportCtx;

  io.vertx.ext.web.handler.sockjs.impl.SockJSSession(io.vertx.core.Vertx, io.vertx.core.shareddata.LocalMap<java.lang.String, io.vertx.ext.web.handler.sockjs.impl.SockJSSession>, io.vertx.ext.web.RoutingContext, io.vertx.ext.web.handler.sockjs.SockJSHandlerOptions, io.vertx.core.Handler<io.vertx.ext.web.handler.sockjs.SockJSSocket>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aconst_null
       5: aload         4
       7: aload         5
       9: invokespecial #1                  // Method "<init>":(Lio/vertx/core/Vertx;Lio/vertx/core/shareddata/LocalMap;Lio/vertx/ext/web/RoutingContext;Ljava/lang/String;Lio/vertx/ext/web/handler/sockjs/SockJSHandlerOptions;Lio/vertx/core/Handler;)V
      12: return

  io.vertx.ext.web.handler.sockjs.impl.SockJSSession(io.vertx.core.Vertx, io.vertx.core.shareddata.LocalMap<java.lang.String, io.vertx.ext.web.handler.sockjs.impl.SockJSSession>, io.vertx.ext.web.RoutingContext, java.lang.String, io.vertx.ext.web.handler.sockjs.SockJSHandlerOptions, io.vertx.core.Handler<io.vertx.ext.web.handler.sockjs.SockJSSocket>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_3
       3: aload         5
       5: invokespecial #2                  // Method io/vertx/ext/web/handler/sockjs/impl/SockJSSocketBase."<init>":(Lio/vertx/core/Vertx;Lio/vertx/ext/web/RoutingContext;Lio/vertx/ext/web/handler/sockjs/SockJSHandlerOptions;)V
       8: aload_0
       9: new           #3                  // class java/util/LinkedList
      12: dup
      13: invokespecial #4                  // Method java/util/LinkedList."<init>":()V
      16: putfield      #5                  // Field pendingWrites:Ljava/util/Deque;
      19: aload_0
      20: new           #6                  // class java/util/ArrayList
      23: dup
      24: invokespecial #7                  // Method java/util/ArrayList."<init>":()V
      27: putfield      #8                  // Field writeAcks:Ljava/util/List;
      30: aload_0
      31: ldc2_w        #9                  // long -1l
      34: putfield      #11                 // Field timeoutTimerID:J
      37: aload_0
      38: ldc           #12                 // int 65536
      40: putfield      #13                 // Field maxQueueSize:I
      43: aload_0
      44: aload_2
      45: putfield      #14                 // Field sessions:Lio/vertx/core/shareddata/LocalMap;
      48: aload_0
      49: aload         4
      51: putfield      #15                 // Field id:Ljava/lang/String;
      54: aload_0
      55: aload         4
      57: ifnonnull     66
      60: ldc2_w        #9                  // long -1l
      63: goto          71
      66: aload         5
      68: invokevirtual #16                 // Method io/vertx/ext/web/handler/sockjs/SockJSHandlerOptions.getSessionTimeout:()J
      71: putfield      #17                 // Field timeout:J
      74: aload_0
      75: aload         6
      77: putfield      #18                 // Field sockHandler:Lio/vertx/core/Handler;
      80: aload_0
      81: aload_1
      82: invokeinterface #19,  1           // InterfaceMethod io/vertx/core/Vertx.getOrCreateContext:()Lio/vertx/core/Context;
      87: putfield      #20                 // Field context:Lio/vertx/core/Context;
      90: aload_0
      91: new           #21                 // class io/vertx/core/streams/impl/InboundBuffer
      94: dup
      95: aload_0
      96: getfield      #20                 // Field context:Lio/vertx/core/Context;
      99: invokespecial #22                 // Method io/vertx/core/streams/impl/InboundBuffer."<init>":(Lio/vertx/core/Context;)V
     102: putfield      #23                 // Field pendingReads:Lio/vertx/core/streams/impl/InboundBuffer;
     105: aload_0
     106: aload_1
     107: aload         5
     109: invokevirtual #24                 // Method io/vertx/ext/web/handler/sockjs/SockJSHandlerOptions.getHeartbeatInterval:()J
     112: aload_0
     113: invokedynamic #25,  0             // InvokeDynamic #0:handle:(Lio/vertx/ext/web/handler/sockjs/impl/SockJSSession;)Lio/vertx/core/Handler;
     118: invokeinterface #26,  4           // InterfaceMethod io/vertx/core/Vertx.setPeriodic:(JLio/vertx/core/Handler;)J
     123: putfield      #27                 // Field heartbeatID:J
     126: return

  private void writeInternal(java.lang.String, io.vertx.core.Promise<java.lang.Void>);
    Code:
       0: aload_0
       1: dup
       2: astore_3
       3: monitorenter
       4: aload_0
       5: getfield      #5                  // Field pendingWrites:Ljava/util/Deque;
       8: aload_1
       9: invokeinterface #28,  2           // InterfaceMethod java/util/Deque.add:(Ljava/lang/Object;)Z
      14: pop
      15: aload_0
      16: dup
      17: getfield      #29                 // Field messagesSize:I
      20: aload_1
      21: invokevirtual #30                 // Method java/lang/String.length:()I
      24: iadd
      25: putfield      #29                 // Field messagesSize:I
      28: aload_0
      29: getfield      #8                  // Field writeAcks:Ljava/util/List;
      32: aload_2
      33: invokeinterface #31,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      38: pop
      39: aload_3
      40: monitorexit
      41: goto          51
      44: astore        4
      46: aload_3
      47: monitorexit
      48: aload         4
      50: athrow
      51: aload_0
      52: getfield      #32                 // Field listener:Lio/vertx/ext/web/handler/sockjs/impl/TransportListener;
      55: ifnull        89
      58: aload_0
      59: getfield      #33                 // Field transportCtx:Lio/vertx/core/Context;
      62: astore_3
      63: invokestatic  #34                 // InterfaceMethod io/vertx/core/Vertx.currentContext:()Lio/vertx/core/Context;
      66: aload_3
      67: if_acmpeq     85
      70: aload_3
      71: aload_0
      72: invokedynamic #35,  0             // InvokeDynamic #1:handle:(Lio/vertx/ext/web/handler/sockjs/impl/SockJSSession;)Lio/vertx/core/Handler;
      77: invokeinterface #36,  2           // InterfaceMethod io/vertx/core/Context.runOnContext:(Lio/vertx/core/Handler;)V
      82: goto          89
      85: aload_0
      86: invokespecial #37                 // Method writePendingMessages:()V
      89: return
    Exception table:
       from    to  target type
           4    41    44   any
          44    48    44   any

  public io.vertx.core.Future<java.lang.Void> write(io.vertx.core.buffer.Buffer);
    Code:
       0: aload_0
       1: getfield      #38                 // Field vertx:Lio/vertx/core/Vertx;
       4: invokeinterface #19,  1           // InterfaceMethod io/vertx/core/Vertx.getOrCreateContext:()Lio/vertx/core/Context;
       9: checkcast     #39                 // class io/vertx/core/impl/ContextInternal
      12: astore_2
      13: aload_2
      14: invokeinterface #40,  1           // InterfaceMethod io/vertx/core/impl/ContextInternal.promise:()Lio/vertx/core/impl/future/PromiseInternal;
      19: astore_3
      20: aload_0
      21: invokevirtual #41                 // Method isClosed:()Z
      24: ifeq          71
      27: aload_0
      28: getfield      #33                 // Field transportCtx:Lio/vertx/core/Context;
      31: astore        4
      33: invokestatic  #34                 // InterfaceMethod io/vertx/core/Vertx.currentContext:()Lio/vertx/core/Context;
      36: aload         4
      38: if_acmpeq     59
      41: aload_0
      42: getfield      #38                 // Field vertx:Lio/vertx/core/Vertx;
      45: aload_3
      46: invokedynamic #42,  0             // InvokeDynamic #2:handle:(Lio/vertx/core/Promise;)Lio/vertx/core/Handler;
      51: invokeinterface #43,  2           // InterfaceMethod io/vertx/core/Vertx.runOnContext:(Lio/vertx/core/Handler;)V
      56: goto          68
      59: aload_3
      60: getstatic     #44                 // Field io/vertx/core/net/impl/ConnectionBase.CLOSED_EXCEPTION:Lio/vertx/core/VertxException;
      63: invokeinterface #45,  2           // InterfaceMethod io/vertx/core/Promise.fail:(Ljava/lang/Throwable;)V
      68: goto          86
      71: aload_1
      72: invokeinterface #46,  1           // InterfaceMethod io/vertx/core/buffer/Buffer.toString:()Ljava/lang/String;
      77: astore        4
      79: aload_0
      80: aload         4
      82: aload_3
      83: invokespecial #47                 // Method writeInternal:(Ljava/lang/String;Lio/vertx/core/Promise;)V
      86: aload_3
      87: invokeinterface #48,  1           // InterfaceMethod io/vertx/core/Promise.future:()Lio/vertx/core/Future;
      92: areturn

  public io.vertx.core.Future<java.lang.Void> write(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #38                 // Field vertx:Lio/vertx/core/Vertx;
       4: invokeinterface #19,  1           // InterfaceMethod io/vertx/core/Vertx.getOrCreateContext:()Lio/vertx/core/Context;
       9: checkcast     #39                 // class io/vertx/core/impl/ContextInternal
      12: astore_2
      13: aload_2
      14: invokeinterface #40,  1           // InterfaceMethod io/vertx/core/impl/ContextInternal.promise:()Lio/vertx/core/impl/future/PromiseInternal;
      19: astore_3
      20: aload_0
      21: invokevirtual #41                 // Method isClosed:()Z
      24: ifeq          71
      27: aload_0
      28: getfield      #33                 // Field transportCtx:Lio/vertx/core/Context;
      31: astore        4
      33: invokestatic  #34                 // InterfaceMethod io/vertx/core/Vertx.currentContext:()Lio/vertx/core/Context;
      36: aload         4
      38: if_acmpeq     59
      41: aload_0
      42: getfield      #38                 // Field vertx:Lio/vertx/core/Vertx;
      45: aload_3
      46: invokedynamic #49,  0             // InvokeDynamic #3:handle:(Lio/vertx/core/Promise;)Lio/vertx/core/Handler;
      51: invokeinterface #43,  2           // InterfaceMethod io/vertx/core/Vertx.runOnContext:(Lio/vertx/core/Handler;)V
      56: goto          68
      59: aload_3
      60: getstatic     #44                 // Field io/vertx/core/net/impl/ConnectionBase.CLOSED_EXCEPTION:Lio/vertx/core/VertxException;
      63: invokeinterface #45,  2           // InterfaceMethod io/vertx/core/Promise.fail:(Ljava/lang/Throwable;)V
      68: goto          77
      71: aload_0
      72: aload_1
      73: aload_3
      74: invokespecial #47                 // Method writeInternal:(Ljava/lang/String;Lio/vertx/core/Promise;)V
      77: aload_3
      78: invokeinterface #48,  1           // InterfaceMethod io/vertx/core/Promise.future:()Lio/vertx/core/Future;
      83: areturn

  public io.vertx.ext.web.handler.sockjs.impl.SockJSSession handler(io.vertx.core.Handler<io.vertx.core.buffer.Buffer>);
    Code:
       0: aload_0
       1: getfield      #23                 // Field pendingReads:Lio/vertx/core/streams/impl/InboundBuffer;
       4: aload_1
       5: invokevirtual #50                 // Method io/vertx/core/streams/impl/InboundBuffer.handler:(Lio/vertx/core/Handler;)Lio/vertx/core/streams/impl/InboundBuffer;
       8: pop
       9: aload_0
      10: areturn

  public io.vertx.ext.web.handler.sockjs.impl.SockJSSession fetch(long);
    Code:
       0: aload_0
       1: getfield      #23                 // Field pendingReads:Lio/vertx/core/streams/impl/InboundBuffer;
       4: lload_1
       5: invokevirtual #51                 // Method io/vertx/core/streams/impl/InboundBuffer.fetch:(J)Z
       8: pop
       9: aload_0
      10: areturn

  public io.vertx.ext.web.handler.sockjs.impl.SockJSSession pause();
    Code:
       0: aload_0
       1: getfield      #23                 // Field pendingReads:Lio/vertx/core/streams/impl/InboundBuffer;
       4: invokevirtual #52                 // Method io/vertx/core/streams/impl/InboundBuffer.pause:()Lio/vertx/core/streams/impl/InboundBuffer;
       7: pop
       8: aload_0
       9: areturn

  public io.vertx.ext.web.handler.sockjs.impl.SockJSSession resume();
    Code:
       0: aload_0
       1: getfield      #23                 // Field pendingReads:Lio/vertx/core/streams/impl/InboundBuffer;
       4: invokevirtual #53                 // Method io/vertx/core/streams/impl/InboundBuffer.resume:()Z
       7: pop
       8: aload_0
       9: areturn

  public io.vertx.ext.web.handler.sockjs.impl.SockJSSession setWriteQueueMaxSize(int);
    Code:
       0: iload_1
       1: iconst_1
       2: if_icmpge     15
       5: new           #54                 // class java/lang/IllegalArgumentException
       8: dup
       9: ldc           #55                 // String maxQueueSize must be >= 1
      11: invokespecial #56                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      14: athrow
      15: aload_0
      16: iload_1
      17: putfield      #13                 // Field maxQueueSize:I
      20: aload_0
      21: areturn

  public boolean writeQueueFull();
    Code:
       0: aload_0
       1: getfield      #29                 // Field messagesSize:I
       4: aload_0
       5: getfield      #13                 // Field maxQueueSize:I
       8: if_icmplt     15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: ireturn

  public io.vertx.ext.web.handler.sockjs.impl.SockJSSession drainHandler(io.vertx.core.Handler<java.lang.Void>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #57                 // Field drainHandler:Lio/vertx/core/Handler;
       5: aload_0
       6: areturn

  public io.vertx.ext.web.handler.sockjs.impl.SockJSSession exceptionHandler(io.vertx.core.Handler<java.lang.Throwable>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #58                 // Field exceptionHandler:Lio/vertx/core/Handler;
       5: aload_0
       6: areturn

  public io.vertx.ext.web.handler.sockjs.impl.SockJSSession endHandler(io.vertx.core.Handler<java.lang.Void>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #59                 // Field endHandler:Lio/vertx/core/Handler;
       5: aload_0
       6: areturn

  public io.vertx.ext.web.handler.sockjs.SockJSSocket closeHandler(io.vertx.core.Handler<java.lang.Void>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #60                 // Field closeHandler:Lio/vertx/core/Handler;
       5: aload_0
       6: areturn

  public void close();
    Code:
       0: aload_0
       1: dup
       2: astore_1
       3: monitorenter
       4: aload_0
       5: getfield      #61                 // Field closed:Z
       8: ifne          20
      11: aload_0
      12: iconst_1
      13: putfield      #61                 // Field closed:Z
      16: aload_0
      17: invokespecial #62                 // Method handleClosed:()V
      20: aload_1
      21: monitorexit
      22: goto          30
      25: astore_2
      26: aload_1
      27: monitorexit
      28: aload_2
      29: athrow
      30: aload_0
      31: invokespecial #63                 // Method doClose:()V
      34: return
    Exception table:
       from    to  target type
           4    22    25   any
          25    28    25   any

  private void doClose();
    Code:
       0: aload_0
       1: getfield      #33                 // Field transportCtx:Lio/vertx/core/Context;
       4: astore_1
       5: aload_1
       6: invokestatic  #34                 // InterfaceMethod io/vertx/core/Vertx.currentContext:()Lio/vertx/core/Context;
       9: if_acmpeq     27
      12: aload_1
      13: aload_0
      14: invokedynamic #64,  0             // InvokeDynamic #4:handle:(Lio/vertx/ext/web/handler/sockjs/impl/SockJSSession;)Lio/vertx/core/Handler;
      19: invokeinterface #36,  2           // InterfaceMethod io/vertx/core/Context.runOnContext:(Lio/vertx/core/Handler;)V
      24: goto          50
      27: aload_0
      28: getfield      #32                 // Field listener:Lio/vertx/ext/web/handler/sockjs/impl/TransportListener;
      31: ifnull        50
      34: aload_0
      35: getfield      #65                 // Field handleCalled:Z
      38: ifeq          50
      41: aload_0
      42: getfield      #32                 // Field listener:Lio/vertx/ext/web/handler/sockjs/impl/TransportListener;
      45: invokeinterface #66,  1           // InterfaceMethod io/vertx/ext/web/handler/sockjs/impl/TransportListener.sessionClosed:()V
      50: return

  public io.vertx.core.net.SocketAddress remoteAddress();
    Code:
       0: aload_0
       1: getfield      #67                 // Field remoteAddress:Lio/vertx/core/net/SocketAddress;
       4: areturn

  public io.vertx.core.net.SocketAddress localAddress();
    Code:
       0: aload_0
       1: getfield      #68                 // Field localAddress:Lio/vertx/core/net/SocketAddress;
       4: areturn

  public io.vertx.core.MultiMap headers();
    Code:
       0: aload_0
       1: getfield      #69                 // Field headers:Lio/vertx/core/MultiMap;
       4: areturn

  public java.lang.String uri();
    Code:
       0: aload_0
       1: getfield      #70                 // Field uri:Ljava/lang/String;
       4: areturn

  boolean isClosed();
    Code:
       0: aload_0
       1: getfield      #61                 // Field closed:Z
       4: ireturn

  synchronized void resetListener();
    Code:
       0: aload_0
       1: aconst_null
       2: putfield      #32                 // Field listener:Lio/vertx/ext/web/handler/sockjs/impl/TransportListener;
       5: aload_0
       6: invokespecial #71                 // Method setTimer:()V
       9: return

  private void cancelTimer();
    Code:
       0: aload_0
       1: getfield      #11                 // Field timeoutTimerID:J
       4: ldc2_w        #9                  // long -1l
       7: lcmp
       8: ifeq          25
      11: aload_0
      12: getfield      #38                 // Field vertx:Lio/vertx/core/Vertx;
      15: aload_0
      16: getfield      #11                 // Field timeoutTimerID:J
      19: invokeinterface #72,  3           // InterfaceMethod io/vertx/core/Vertx.cancelTimer:(J)Z
      24: pop
      25: return

  private void setTimer();
    Code:
       0: aload_0
       1: getfield      #17                 // Field timeout:J
       4: ldc2_w        #9                  // long -1l
       7: lcmp
       8: ifeq          38
      11: aload_0
      12: invokespecial #73                 // Method cancelTimer:()V
      15: aload_0
      16: aload_0
      17: getfield      #38                 // Field vertx:Lio/vertx/core/Vertx;
      20: aload_0
      21: getfield      #17                 // Field timeout:J
      24: aload_0
      25: invokedynamic #74,  0             // InvokeDynamic #5:handle:(Lio/vertx/ext/web/handler/sockjs/impl/SockJSSession;)Lio/vertx/core/Handler;
      30: invokeinterface #75,  4           // InterfaceMethod io/vertx/core/Vertx.setTimer:(JLio/vertx/core/Handler;)J
      35: putfield      #11                 // Field timeoutTimerID:J
      38: return

  private void writePendingMessages();
    Code:
       0: aload_0
       1: getfield      #32                 // Field listener:Lio/vertx/ext/web/handler/sockjs/impl/TransportListener;
       4: astore_1
       5: aload_1
       6: ifnull        225
       9: aload_0
      10: dup
      11: astore        4
      13: monitorenter
      14: aload_0
      15: getfield      #5                  // Field pendingWrites:Ljava/util/Deque;
      18: invokeinterface #76,  1           // InterfaceMethod java/util/Deque.isEmpty:()Z
      23: ifne          103
      26: aload_0
      27: getfield      #5                  // Field pendingWrites:Ljava/util/Deque;
      30: iconst_0
      31: anewarray     #77                 // class java/lang/String
      34: invokeinterface #78,  2           // InterfaceMethod java/util/Deque.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
      39: checkcast     #79                 // class "[Ljava/lang/String;"
      42: invokestatic  #80                 // Method io/vertx/ext/web/handler/sockjs/impl/JsonCodec.encode:([Ljava/lang/String;)Ljava/lang/String;
      45: astore_2
      46: aload_0
      47: getfield      #5                  // Field pendingWrites:Ljava/util/Deque;
      50: invokeinterface #81,  1           // InterfaceMethod java/util/Deque.clear:()V
      55: aload_0
      56: getfield      #8                  // Field writeAcks:Ljava/util/List;
      59: invokeinterface #82,  1           // InterfaceMethod java/util/List.isEmpty:()Z
      64: ifne          91
      67: new           #6                  // class java/util/ArrayList
      70: dup
      71: aload_0
      72: getfield      #8                  // Field writeAcks:Ljava/util/List;
      75: invokespecial #83                 // Method java/util/ArrayList."<init>":(Ljava/util/Collection;)V
      78: astore_3
      79: aload_0
      80: getfield      #8                  // Field writeAcks:Ljava/util/List;
      83: invokeinterface #84,  1           // InterfaceMethod java/util/List.clear:()V
      88: goto          95
      91: invokestatic  #85                 // Method java/util/Collections.emptyList:()Ljava/util/List;
      94: astore_3
      95: aload_0
      96: iconst_0
      97: putfield      #29                 // Field messagesSize:I
     100: goto          109
     103: aconst_null
     104: astore_2
     105: invokestatic  #85                 // Method java/util/Collections.emptyList:()Ljava/util/List;
     108: astore_3
     109: aload         4
     111: monitorexit
     112: goto          123
     115: astore        5
     117: aload         4
     119: monitorexit
     120: aload         5
     122: athrow
     123: aload_2
     124: ifnull        196
     127: aload_3
     128: invokeinterface #82,  1           // InterfaceMethod java/util/List.isEmpty:()Z
     133: ifne          170
     136: aload_1
     137: new           #86                 // class java/lang/StringBuilder
     140: dup
     141: invokespecial #87                 // Method java/lang/StringBuilder."<init>":()V
     144: ldc           #88                 // String a
     146: invokevirtual #89                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     149: aload_2
     150: invokevirtual #89                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     153: invokevirtual #90                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     156: aload_3
     157: invokedynamic #91,  0             // InvokeDynamic #6:handle:(Ljava/util/List;)Lio/vertx/core/Handler;
     162: invokeinterface #92,  3           // InterfaceMethod io/vertx/ext/web/handler/sockjs/impl/TransportListener.sendFrame:(Ljava/lang/String;Lio/vertx/core/Handler;)V
     167: goto          196
     170: aload_1
     171: new           #86                 // class java/lang/StringBuilder
     174: dup
     175: invokespecial #87                 // Method java/lang/StringBuilder."<init>":()V
     178: ldc           #88                 // String a
     180: invokevirtual #89                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     183: aload_2
     184: invokevirtual #89                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     187: invokevirtual #90                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     190: aconst_null
     191: invokeinterface #92,  3           // InterfaceMethod io/vertx/ext/web/handler/sockjs/impl/TransportListener.sendFrame:(Ljava/lang/String;Lio/vertx/core/Handler;)V
     196: aload_0
     197: getfield      #57                 // Field drainHandler:Lio/vertx/core/Handler;
     200: ifnull        225
     203: aload_0
     204: getfield      #57                 // Field drainHandler:Lio/vertx/core/Handler;
     207: astore        4
     209: aload_0
     210: aconst_null
     211: putfield      #57                 // Field drainHandler:Lio/vertx/core/Handler;
     214: aload_0
     215: getfield      #20                 // Field context:Lio/vertx/core/Context;
     218: aload         4
     220: invokeinterface #36,  2           // InterfaceMethod io/vertx/core/Context.runOnContext:(Lio/vertx/core/Handler;)V
     225: return
    Exception table:
       from    to  target type
          14   112   115   any
         115   120   115   any

  io.vertx.core.Context context();
    Code:
       0: aload_0
       1: getfield      #33                 // Field transportCtx:Lio/vertx/core/Context;
       4: areturn

  void register(io.vertx.core.http.HttpServerRequest, io.vertx.ext.web.handler.sockjs.impl.TransportListener);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #38                 // Field vertx:Lio/vertx/core/Vertx;
       5: invokeinterface #19,  1           // InterfaceMethod io/vertx/core/Vertx.getOrCreateContext:()Lio/vertx/core/Context;
      10: putfield      #33                 // Field transportCtx:Lio/vertx/core/Context;
      13: aload_0
      14: aload_1
      15: invokeinterface #93,  1           // InterfaceMethod io/vertx/core/http/HttpServerRequest.localAddress:()Lio/vertx/core/net/SocketAddress;
      20: putfield      #68                 // Field localAddress:Lio/vertx/core/net/SocketAddress;
      23: aload_0
      24: aload_1
      25: invokeinterface #94,  1           // InterfaceMethod io/vertx/core/http/HttpServerRequest.remoteAddress:()Lio/vertx/core/net/SocketAddress;
      30: putfield      #67                 // Field remoteAddress:Lio/vertx/core/net/SocketAddress;
      33: aload_0
      34: aload_1
      35: invokeinterface #95,  1           // InterfaceMethod io/vertx/core/http/HttpServerRequest.uri:()Ljava/lang/String;
      40: putfield      #70                 // Field uri:Ljava/lang/String;
      43: aload_0
      44: aload_1
      45: invokeinterface #96,  1           // InterfaceMethod io/vertx/core/http/HttpServerRequest.headers:()Lio/vertx/core/MultiMap;
      50: invokestatic  #97                 // Method io/vertx/ext/web/handler/sockjs/impl/BaseTransport.removeCookieHeaders:(Lio/vertx/core/MultiMap;)Lio/vertx/core/MultiMap;
      53: putfield      #69                 // Field headers:Lio/vertx/core/MultiMap;
      56: aload_0
      57: getfield      #61                 // Field closed:Z
      60: ifeq          77
      63: aload_0
      64: aload_2
      65: invokevirtual #98                 // Method writeClosed:(Lio/vertx/ext/web/handler/sockjs/impl/TransportListener;)V
      68: aload_2
      69: invokeinterface #99,  1           // InterfaceMethod io/vertx/ext/web/handler/sockjs/impl/TransportListener.close:()V
      74: goto          188
      77: aload_0
      78: getfield      #32                 // Field listener:Lio/vertx/ext/web/handler/sockjs/impl/TransportListener;
      81: ifnull        103
      84: aload_0
      85: aload_2
      86: sipush        2010
      89: ldc           #100                // String Another connection still open
      91: invokespecial #101                // Method writeClosed:(Lio/vertx/ext/web/handler/sockjs/impl/TransportListener;ILjava/lang/String;)V
      94: aload_2
      95: invokeinterface #99,  1           // InterfaceMethod io/vertx/ext/web/handler/sockjs/impl/TransportListener.close:()V
     100: goto          188
     103: aload_0
     104: invokespecial #73                 // Method cancelTimer:()V
     107: aload_0
     108: aload_2
     109: putfield      #32                 // Field listener:Lio/vertx/ext/web/handler/sockjs/impl/TransportListener;
     112: aload_0
     113: getfield      #102                // Field openWritten:Z
     116: ifne          139
     119: aload_0
     120: aload_2
     121: invokespecial #103                // Method writeOpen:(Lio/vertx/ext/web/handler/sockjs/impl/TransportListener;)V
     124: aload_0
     125: getfield      #18                 // Field sockHandler:Lio/vertx/core/Handler;
     128: aload_0
     129: invokeinterface #104,  2          // InterfaceMethod io/vertx/core/Handler.handle:(Ljava/lang/Object;)V
     134: aload_0
     135: iconst_1
     136: putfield      #65                 // Field handleCalled:Z
     139: aload_0
     140: getfield      #32                 // Field listener:Lio/vertx/ext/web/handler/sockjs/impl/TransportListener;
     143: ifnull        188
     146: aload_0
     147: getfield      #61                 // Field closed:Z
     150: ifeq          172
     153: aload_0
     154: aload_2
     155: invokevirtual #98                 // Method writeClosed:(Lio/vertx/ext/web/handler/sockjs/impl/TransportListener;)V
     158: aload_0
     159: aconst_null
     160: putfield      #32                 // Field listener:Lio/vertx/ext/web/handler/sockjs/impl/TransportListener;
     163: aload_2
     164: invokeinterface #99,  1           // InterfaceMethod io/vertx/ext/web/handler/sockjs/impl/TransportListener.close:()V
     169: goto          188
     172: aload_0
     173: getfield      #5                  // Field pendingWrites:Ljava/util/Deque;
     176: invokeinterface #76,  1           // InterfaceMethod java/util/Deque.isEmpty:()Z
     181: ifne          188
     184: aload_0
     185: invokespecial #37                 // Method writePendingMessages:()V
     188: return

  void shutdown();
    Code:
       0: aload_0
       1: invokespecial #105                // Method io/vertx/ext/web/handler/sockjs/impl/SockJSSocketBase.close:()V
       4: aload_0
       5: getfield      #27                 // Field heartbeatID:J
       8: ldc2_w        #9                  // long -1l
      11: lcmp
      12: ifeq          29
      15: aload_0
      16: getfield      #38                 // Field vertx:Lio/vertx/core/Vertx;
      19: aload_0
      20: getfield      #27                 // Field heartbeatID:J
      23: invokeinterface #72,  3           // InterfaceMethod io/vertx/core/Vertx.cancelTimer:(J)Z
      28: pop
      29: aload_0
      30: getfield      #11                 // Field timeoutTimerID:J
      33: ldc2_w        #9                  // long -1l
      36: lcmp
      37: ifeq          54
      40: aload_0
      41: getfield      #38                 // Field vertx:Lio/vertx/core/Vertx;
      44: aload_0
      45: getfield      #11                 // Field timeoutTimerID:J
      48: invokeinterface #72,  3           // InterfaceMethod io/vertx/core/Vertx.cancelTimer:(J)Z
      53: pop
      54: aload_0
      55: getfield      #15                 // Field id:Ljava/lang/String;
      58: ifnull        75
      61: aload_0
      62: getfield      #14                 // Field sessions:Lio/vertx/core/shareddata/LocalMap;
      65: aload_0
      66: getfield      #15                 // Field id:Ljava/lang/String;
      69: invokeinterface #106,  2          // InterfaceMethod io/vertx/core/shareddata/LocalMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      74: pop
      75: aload_0
      76: dup
      77: astore_1
      78: monitorenter
      79: aload_0
      80: getfield      #61                 // Field closed:Z
      83: ifne          95
      86: aload_0
      87: iconst_1
      88: putfield      #61                 // Field closed:Z
      91: aload_0
      92: invokespecial #62                 // Method handleClosed:()V
      95: aload_1
      96: monitorexit
      97: goto          105
     100: astore_2
     101: aload_1
     102: monitorexit
     103: aload_2
     104: athrow
     105: return
    Exception table:
       from    to  target type
          79    97   100   any
         100   103   100   any

  private void handleClosed();
    Code:
       0: aload_0
       1: dup
       2: astore_1
       3: monitorenter
       4: aload_0
       5: getfield      #23                 // Field pendingReads:Lio/vertx/core/streams/impl/InboundBuffer;
       8: invokevirtual #107                // Method io/vertx/core/streams/impl/InboundBuffer.clear:()Lio/vertx/core/streams/impl/InboundBuffer;
      11: pop
      12: aload_0
      13: getfield      #5                  // Field pendingWrites:Ljava/util/Deque;
      16: invokeinterface #81,  1           // InterfaceMethod java/util/Deque.clear:()V
      21: aload_0
      22: getfield      #8                  // Field writeAcks:Ljava/util/List;
      25: aload_0
      26: invokedynamic #108,  0            // InvokeDynamic #7:accept:(Lio/vertx/ext/web/handler/sockjs/impl/SockJSSession;)Ljava/util/function/Consumer;
      31: invokeinterface #109,  2          // InterfaceMethod java/util/List.forEach:(Ljava/util/function/Consumer;)V
      36: aload_0
      37: getfield      #8                  // Field writeAcks:Ljava/util/List;
      40: invokeinterface #84,  1           // InterfaceMethod java/util/List.clear:()V
      45: aload_1
      46: monitorexit
      47: goto          55
      50: astore_2
      51: aload_1
      52: monitorexit
      53: aload_2
      54: athrow
      55: aload_0
      56: getfield      #59                 // Field endHandler:Lio/vertx/core/Handler;
      59: astore_1
      60: aload_1
      61: ifnull        74
      64: aload_0
      65: getfield      #20                 // Field context:Lio/vertx/core/Context;
      68: aload_1
      69: invokeinterface #36,  2           // InterfaceMethod io/vertx/core/Context.runOnContext:(Lio/vertx/core/Handler;)V
      74: aload_0
      75: getfield      #60                 // Field closeHandler:Lio/vertx/core/Handler;
      78: astore_1
      79: aload_1
      80: ifnull        93
      83: aload_0
      84: getfield      #20                 // Field context:Lio/vertx/core/Context;
      87: aload_1
      88: invokeinterface #36,  2           // InterfaceMethod io/vertx/core/Context.runOnContext:(Lio/vertx/core/Handler;)V
      93: return
    Exception table:
       from    to  target type
           4    47    50   any
          50    53    50   any

  boolean handleMessages(java.lang.String);
    Code:
       0: aload_1
       1: invokestatic  #110                // Method io/vertx/ext/web/handler/sockjs/impl/JsonCodec.decodeValues:(Ljava/lang/String;)Ljava/util/List;
       4: astore_2
       5: aload_2
       6: ifnonnull     11
       9: iconst_0
      10: ireturn
      11: aload_0
      12: aload_2
      13: invokespecial #111                // Method handleMessages:(Ljava/util/List;)V
      16: iconst_1
      17: ireturn

  private void handleMessages(java.util.List<java.lang.String>);
    Code:
       0: aload_0
       1: getfield      #20                 // Field context:Lio/vertx/core/Context;
       4: invokestatic  #34                 // InterfaceMethod io/vertx/core/Vertx.currentContext:()Lio/vertx/core/Context;
       7: if_acmpne     54
      10: aload_1
      11: invokeinterface #112,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      16: astore_2
      17: aload_2
      18: invokeinterface #113,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      23: ifeq          51
      26: aload_2
      27: invokeinterface #114,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      32: checkcast     #77                 // class java/lang/String
      35: astore_3
      36: aload_0
      37: getfield      #23                 // Field pendingReads:Lio/vertx/core/streams/impl/InboundBuffer;
      40: aload_3
      41: invokestatic  #115                // InterfaceMethod io/vertx/core/buffer/Buffer.buffer:(Ljava/lang/String;)Lio/vertx/core/buffer/Buffer;
      44: invokevirtual #116                // Method io/vertx/core/streams/impl/InboundBuffer.write:(Ljava/lang/Object;)Z
      47: pop
      48: goto          17
      51: goto          70
      54: aload_0
      55: getfield      #20                 // Field context:Lio/vertx/core/Context;
      58: aload_0
      59: aload_1
      60: invokedynamic #117,  0            // InvokeDynamic #8:handle:(Lio/vertx/ext/web/handler/sockjs/impl/SockJSSession;Ljava/util/List;)Lio/vertx/core/Handler;
      65: invokeinterface #36,  2           // InterfaceMethod io/vertx/core/Context.runOnContext:(Lio/vertx/core/Handler;)V
      70: return

  void handleException(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #58                 // Field exceptionHandler:Lio/vertx/core/Handler;
       4: astore_2
       5: aload_2
       6: ifnull        48
       9: aload_0
      10: getfield      #20                 // Field context:Lio/vertx/core/Context;
      13: invokestatic  #34                 // InterfaceMethod io/vertx/core/Vertx.currentContext:()Lio/vertx/core/Context;
      16: if_acmpne     29
      19: aload_2
      20: aload_1
      21: invokeinterface #104,  2          // InterfaceMethod io/vertx/core/Handler.handle:(Ljava/lang/Object;)V
      26: goto          59
      29: aload_0
      30: getfield      #20                 // Field context:Lio/vertx/core/Context;
      33: aload_0
      34: aload_1
      35: invokedynamic #118,  0            // InvokeDynamic #9:handle:(Lio/vertx/ext/web/handler/sockjs/impl/SockJSSession;Ljava/lang/Throwable;)Lio/vertx/core/Handler;
      40: invokeinterface #36,  2           // InterfaceMethod io/vertx/core/Context.runOnContext:(Lio/vertx/core/Handler;)V
      45: goto          59
      48: getstatic     #119                // Field LOG:Lio/vertx/core/impl/logging/Logger;
      51: ldc           #120                // String Unhandled exception
      53: aload_1
      54: invokeinterface #121,  3          // InterfaceMethod io/vertx/core/impl/logging/Logger.error:(Ljava/lang/Object;Ljava/lang/Throwable;)V
      59: return

  void writeClosed(io.vertx.ext.web.handler.sockjs.impl.TransportListener);
    Code:
       0: aload_0
       1: aload_1
       2: sipush        3000
       5: ldc           #122                // String Go away!
       7: invokespecial #101                // Method writeClosed:(Lio/vertx/ext/web/handler/sockjs/impl/TransportListener;ILjava/lang/String;)V
      10: return

  private void writeClosed(io.vertx.ext.web.handler.sockjs.impl.TransportListener, int, java.lang.String);
    Code:
       0: new           #86                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #87                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #123                // String c[
       9: invokevirtual #89                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: iload_2
      13: invokevirtual #124                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      16: ldc           #125                // String ,\"
      18: invokevirtual #89                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      21: aload_3
      22: invokevirtual #89                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      25: ldc           #126                // String \"]
      27: invokevirtual #89                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      30: invokevirtual #90                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      33: astore        4
      35: aload_1
      36: aload         4
      38: aconst_null
      39: invokeinterface #92,  3           // InterfaceMethod io/vertx/ext/web/handler/sockjs/impl/TransportListener.sendFrame:(Ljava/lang/String;Lio/vertx/core/Handler;)V
      44: return

  private void writeOpen(io.vertx.ext.web.handler.sockjs.impl.TransportListener);
    Code:
       0: aload_1
       1: ldc           #127                // String o
       3: aconst_null
       4: invokeinterface #92,  3           // InterfaceMethod io/vertx/ext/web/handler/sockjs/impl/TransportListener.sendFrame:(Ljava/lang/String;Lio/vertx/core/Handler;)V
       9: aload_0
      10: iconst_1
      11: putfield      #102                // Field openWritten:Z
      14: return

  public io.vertx.ext.web.handler.sockjs.SockJSSocket exceptionHandler(io.vertx.core.Handler);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #128                // Method exceptionHandler:(Lio/vertx/core/Handler;)Lio/vertx/ext/web/handler/sockjs/impl/SockJSSession;
       5: areturn

  public io.vertx.ext.web.handler.sockjs.SockJSSocket drainHandler(io.vertx.core.Handler);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #129                // Method drainHandler:(Lio/vertx/core/Handler;)Lio/vertx/ext/web/handler/sockjs/impl/SockJSSession;
       5: areturn

  public io.vertx.ext.web.handler.sockjs.SockJSSocket setWriteQueueMaxSize(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #130                // Method setWriteQueueMaxSize:(I)Lio/vertx/ext/web/handler/sockjs/impl/SockJSSession;
       5: areturn

  public io.vertx.ext.web.handler.sockjs.SockJSSocket endHandler(io.vertx.core.Handler);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #131                // Method endHandler:(Lio/vertx/core/Handler;)Lio/vertx/ext/web/handler/sockjs/impl/SockJSSession;
       5: areturn

  public io.vertx.ext.web.handler.sockjs.SockJSSocket fetch(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #132                // Method fetch:(J)Lio/vertx/ext/web/handler/sockjs/impl/SockJSSession;
       5: areturn

  public io.vertx.ext.web.handler.sockjs.SockJSSocket resume();
    Code:
       0: aload_0
       1: invokevirtual #133                // Method resume:()Lio/vertx/ext/web/handler/sockjs/impl/SockJSSession;
       4: areturn

  public io.vertx.ext.web.handler.sockjs.SockJSSocket pause();
    Code:
       0: aload_0
       1: invokevirtual #134                // Method pause:()Lio/vertx/ext/web/handler/sockjs/impl/SockJSSession;
       4: areturn

  public io.vertx.ext.web.handler.sockjs.SockJSSocket handler(io.vertx.core.Handler);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #135                // Method handler:(Lio/vertx/core/Handler;)Lio/vertx/ext/web/handler/sockjs/impl/SockJSSession;
       5: areturn

  public io.vertx.core.streams.ReadStream endHandler(io.vertx.core.Handler);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #131                // Method endHandler:(Lio/vertx/core/Handler;)Lio/vertx/ext/web/handler/sockjs/impl/SockJSSession;
       5: areturn

  public io.vertx.core.streams.ReadStream fetch(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #132                // Method fetch:(J)Lio/vertx/ext/web/handler/sockjs/impl/SockJSSession;
       5: areturn

  public io.vertx.core.streams.ReadStream resume();
    Code:
       0: aload_0
       1: invokevirtual #133                // Method resume:()Lio/vertx/ext/web/handler/sockjs/impl/SockJSSession;
       4: areturn

  public io.vertx.core.streams.ReadStream pause();
    Code:
       0: aload_0
       1: invokevirtual #134                // Method pause:()Lio/vertx/ext/web/handler/sockjs/impl/SockJSSession;
       4: areturn

  public io.vertx.core.streams.ReadStream handler(io.vertx.core.Handler);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #135                // Method handler:(Lio/vertx/core/Handler;)Lio/vertx/ext/web/handler/sockjs/impl/SockJSSession;
       5: areturn

  public io.vertx.core.streams.ReadStream exceptionHandler(io.vertx.core.Handler);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #128                // Method exceptionHandler:(Lio/vertx/core/Handler;)Lio/vertx/ext/web/handler/sockjs/impl/SockJSSession;
       5: areturn

  public io.vertx.core.streams.StreamBase exceptionHandler(io.vertx.core.Handler);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #128                // Method exceptionHandler:(Lio/vertx/core/Handler;)Lio/vertx/ext/web/handler/sockjs/impl/SockJSSession;
       5: areturn

  public io.vertx.core.streams.WriteStream drainHandler(io.vertx.core.Handler);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #129                // Method drainHandler:(Lio/vertx/core/Handler;)Lio/vertx/ext/web/handler/sockjs/impl/SockJSSession;
       5: areturn

  public io.vertx.core.streams.WriteStream setWriteQueueMaxSize(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #130                // Method setWriteQueueMaxSize:(I)Lio/vertx/ext/web/handler/sockjs/impl/SockJSSession;
       5: areturn

  public io.vertx.core.Future write(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #136                // class io/vertx/core/buffer/Buffer
       5: invokevirtual #137                // Method write:(Lio/vertx/core/buffer/Buffer;)Lio/vertx/core/Future;
       8: areturn

  public io.vertx.core.streams.WriteStream exceptionHandler(io.vertx.core.Handler);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #128                // Method exceptionHandler:(Lio/vertx/core/Handler;)Lio/vertx/ext/web/handler/sockjs/impl/SockJSSession;
       5: areturn

  private void lambda$handleException$11(java.lang.Throwable, java.lang.Void);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #138                // Method handleException:(Ljava/lang/Throwable;)V
       5: return

  private void lambda$handleMessages$10(java.util.List, java.lang.Void);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #111                // Method handleMessages:(Ljava/util/List;)V
       5: return

  private void lambda$handleClosed$9(io.vertx.core.Handler);
    Code:
       0: aload_0
       1: getfield      #20                 // Field context:Lio/vertx/core/Context;
       4: aload_1
       5: invokedynamic #139,  0            // InvokeDynamic #10:handle:(Lio/vertx/core/Handler;)Lio/vertx/core/Handler;
      10: invokeinterface #36,  2           // InterfaceMethod io/vertx/core/Context.runOnContext:(Lio/vertx/core/Handler;)V
      15: return

  private static void lambda$null$8(io.vertx.core.Handler, java.lang.Void);
    Code:
       0: aload_0
       1: getstatic     #44                 // Field io/vertx/core/net/impl/ConnectionBase.CLOSED_EXCEPTION:Lio/vertx/core/VertxException;
       4: invokestatic  #140                // InterfaceMethod io/vertx/core/Future.failedFuture:(Ljava/lang/Throwable;)Lio/vertx/core/Future;
       7: invokeinterface #104,  2          // InterfaceMethod io/vertx/core/Handler.handle:(Ljava/lang/Object;)V
      12: return

  private static void lambda$writePendingMessages$7(java.util.List, io.vertx.core.AsyncResult);
    Code:
       0: aload_0
       1: aload_1
       2: invokedynamic #141,  0            // InvokeDynamic #11:accept:(Lio/vertx/core/AsyncResult;)Ljava/util/function/Consumer;
       7: invokeinterface #109,  2          // InterfaceMethod java/util/List.forEach:(Ljava/util/function/Consumer;)V
      12: return

  private static void lambda$null$6(io.vertx.core.AsyncResult, io.vertx.core.Handler);
    Code:
       0: aload_1
       1: aload_0
       2: invokeinterface #104,  2          // InterfaceMethod io/vertx/core/Handler.handle:(Ljava/lang/Object;)V
       7: return

  private void lambda$setTimer$5(java.lang.Long);
    Code:
       0: aload_0
       1: getfield      #38                 // Field vertx:Lio/vertx/core/Vertx;
       4: aload_0
       5: getfield      #27                 // Field heartbeatID:J
       8: invokeinterface #72,  3           // InterfaceMethod io/vertx/core/Vertx.cancelTimer:(J)Z
      13: pop
      14: aload_0
      15: getfield      #32                 // Field listener:Lio/vertx/ext/web/handler/sockjs/impl/TransportListener;
      18: astore_2
      19: aload_2
      20: ifnonnull     27
      23: aload_0
      24: invokevirtual #142                // Method shutdown:()V
      27: aload_2
      28: ifnull        37
      31: aload_2
      32: invokeinterface #99,  1           // InterfaceMethod io/vertx/ext/web/handler/sockjs/impl/TransportListener.close:()V
      37: return

  private void lambda$doClose$4(java.lang.Void);
    Code:
       0: aload_0
       1: invokespecial #63                 // Method doClose:()V
       4: return

  private static void lambda$write$3(io.vertx.core.Promise, java.lang.Void);
    Code:
       0: aload_0
       1: getstatic     #44                 // Field io/vertx/core/net/impl/ConnectionBase.CLOSED_EXCEPTION:Lio/vertx/core/VertxException;
       4: invokeinterface #45,  2           // InterfaceMethod io/vertx/core/Promise.fail:(Ljava/lang/Throwable;)V
       9: return

  private static void lambda$write$2(io.vertx.core.Promise, java.lang.Void);
    Code:
       0: aload_0
       1: getstatic     #44                 // Field io/vertx/core/net/impl/ConnectionBase.CLOSED_EXCEPTION:Lio/vertx/core/VertxException;
       4: invokeinterface #45,  2           // InterfaceMethod io/vertx/core/Promise.fail:(Ljava/lang/Throwable;)V
       9: return

  private void lambda$writeInternal$1(java.lang.Void);
    Code:
       0: aload_0
       1: invokespecial #37                 // Method writePendingMessages:()V
       4: return

  private void lambda$new$0(java.lang.Long);
    Code:
       0: aload_0
       1: getfield      #32                 // Field listener:Lio/vertx/ext/web/handler/sockjs/impl/TransportListener;
       4: ifnull        19
       7: aload_0
       8: getfield      #32                 // Field listener:Lio/vertx/ext/web/handler/sockjs/impl/TransportListener;
      11: ldc           #143                // String h
      13: aconst_null
      14: invokeinterface #92,  3           // InterfaceMethod io/vertx/ext/web/handler/sockjs/impl/TransportListener.sendFrame:(Ljava/lang/String;Lio/vertx/core/Handler;)V
      19: return

  static {};
    Code:
       0: ldc           #144                // class io/vertx/ext/web/handler/sockjs/impl/SockJSSession
       2: invokestatic  #145                // Method io/vertx/core/impl/logging/LoggerFactory.getLogger:(Ljava/lang/Class;)Lio/vertx/core/impl/logging/Logger;
       5: putstatic     #119                // Field LOG:Lio/vertx/core/impl/logging/Logger;
       8: return
}
