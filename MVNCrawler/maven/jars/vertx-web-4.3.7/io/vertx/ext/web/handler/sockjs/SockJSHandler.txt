Compiled from "SockJSHandler.java"
public interface io.vertx.ext.web.handler.sockjs.SockJSHandler extends io.vertx.core.Handler<io.vertx.ext.web.RoutingContext> {
  public static io.vertx.ext.web.handler.sockjs.SockJSHandler create(io.vertx.core.Vertx);
    Code:
       0: aload_0
       1: new           #1                  // class io/vertx/ext/web/handler/sockjs/SockJSHandlerOptions
       4: dup
       5: invokespecial #2                  // Method io/vertx/ext/web/handler/sockjs/SockJSHandlerOptions."<init>":()V
       8: invokestatic  #3                  // InterfaceMethod create:(Lio/vertx/core/Vertx;Lio/vertx/ext/web/handler/sockjs/SockJSHandlerOptions;)Lio/vertx/ext/web/handler/sockjs/SockJSHandler;
      11: areturn

  public static io.vertx.ext.web.handler.sockjs.SockJSHandler create(io.vertx.core.Vertx, io.vertx.ext.web.handler.sockjs.SockJSHandlerOptions);
    Code:
       0: new           #4                  // class io/vertx/ext/web/handler/sockjs/impl/SockJSImpl
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #5                  // Method io/vertx/ext/web/handler/sockjs/impl/SockJSImpl."<init>":(Lio/vertx/core/Vertx;Lio/vertx/ext/web/handler/sockjs/SockJSHandlerOptions;)V
       9: areturn

  public abstract io.vertx.ext.web.Router socketHandler(io.vertx.core.Handler<io.vertx.ext.web.handler.sockjs.SockJSSocket>);

  public default io.vertx.ext.web.Router bridge(io.vertx.ext.web.handler.sockjs.SockJSBridgeOptions);
    Code:
       0: aload_0
       1: aconst_null
       2: aload_1
       3: aconst_null
       4: invokeinterface #6,  4            // InterfaceMethod bridge:(Lio/vertx/ext/auth/authorization/AuthorizationProvider;Lio/vertx/ext/web/handler/sockjs/SockJSBridgeOptions;Lio/vertx/core/Handler;)Lio/vertx/ext/web/Router;
       9: areturn

  public abstract io.vertx.ext.web.Router bridge(io.vertx.ext.auth.authorization.AuthorizationProvider, io.vertx.ext.web.handler.sockjs.SockJSBridgeOptions, io.vertx.core.Handler<io.vertx.ext.web.handler.sockjs.BridgeEvent>);

  public default io.vertx.ext.web.Router bridge(io.vertx.ext.web.handler.sockjs.SockJSBridgeOptions, io.vertx.core.Handler<io.vertx.ext.web.handler.sockjs.BridgeEvent>);
    Code:
       0: aload_0
       1: aconst_null
       2: aload_1
       3: aload_2
       4: invokeinterface #6,  4            // InterfaceMethod bridge:(Lio/vertx/ext/auth/authorization/AuthorizationProvider;Lio/vertx/ext/web/handler/sockjs/SockJSBridgeOptions;Lio/vertx/core/Handler;)Lio/vertx/ext/web/Router;
       9: areturn

  public abstract void handle(io.vertx.ext.web.RoutingContext);

  public default void handle(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #7                  // class io/vertx/ext/web/RoutingContext
       5: invokeinterface #8,  2            // InterfaceMethod handle:(Lio/vertx/ext/web/RoutingContext;)V
      10: return
}
