Compiled from "BodyHandlerImpl.java"
class io.vertx.ext.web.handler.impl.BodyHandlerImpl$BHandler implements io.vertx.core.Handler<io.vertx.core.buffer.Buffer> {
  private static final int MAX_PREALLOCATED_BODY_BUFFER_BYTES;

  final io.vertx.ext.web.RoutingContext context;

  final long contentLength;

  io.vertx.core.buffer.Buffer body;

  boolean failed;

  final java.util.concurrent.atomic.AtomicInteger uploadCount;

  final java.util.concurrent.atomic.AtomicBoolean cleanup;

  boolean ended;

  long uploadSize;

  final boolean isMultipart;

  final boolean isUrlEncoded;

  final io.vertx.ext.web.handler.impl.BodyHandlerImpl this$0;

  public io.vertx.ext.web.handler.impl.BodyHandlerImpl$BHandler(io.vertx.ext.web.handler.impl.BodyHandlerImpl, io.vertx.ext.web.RoutingContext, long);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2                  // Field this$0:Lio/vertx/ext/web/handler/impl/BodyHandlerImpl;
       5: aload_0
       6: invokespecial #3                  // Method java/lang/Object."<init>":()V
       9: aload_0
      10: new           #4                  // class java/util/concurrent/atomic/AtomicInteger
      13: dup
      14: invokespecial #5                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
      17: putfield      #6                  // Field uploadCount:Ljava/util/concurrent/atomic/AtomicInteger;
      20: aload_0
      21: new           #7                  // class java/util/concurrent/atomic/AtomicBoolean
      24: dup
      25: iconst_0
      26: invokespecial #8                  // Method java/util/concurrent/atomic/AtomicBoolean."<init>":(Z)V
      29: putfield      #9                  // Field cleanup:Ljava/util/concurrent/atomic/AtomicBoolean;
      32: aload_0
      33: lconst_0
      34: putfield      #10                 // Field uploadSize:J
      37: aload_0
      38: aload_2
      39: putfield      #11                 // Field context:Lio/vertx/ext/web/RoutingContext;
      42: aload_0
      43: lload_3
      44: putfield      #12                 // Field contentLength:J
      47: lload_3
      48: ldc2_w        #13                 // long -1l
      51: lcmp
      52: ifeq          59
      55: aload_0
      56: invokespecial #15                 // Method initBodyBuffer:()V
      59: aload_2
      60: invokeinterface #16,  1           // InterfaceMethod io/vertx/ext/web/RoutingContext.fileUploads:()Ljava/util/List;
      65: astore        5
      67: aload_2
      68: invokeinterface #17,  1           // InterfaceMethod io/vertx/ext/web/RoutingContext.request:()Lio/vertx/core/http/HttpServerRequest;
      73: getstatic     #18                 // Field io/vertx/core/http/HttpHeaders.CONTENT_TYPE:Ljava/lang/CharSequence;
      76: invokeinterface #19,  2           // InterfaceMethod io/vertx/core/http/HttpServerRequest.getHeader:(Ljava/lang/CharSequence;)Ljava/lang/String;
      81: astore        6
      83: aload         6
      85: ifnonnull     101
      88: aload_0
      89: iconst_0
      90: putfield      #20                 // Field isMultipart:Z
      93: aload_0
      94: iconst_0
      95: putfield      #21                 // Field isUrlEncoded:Z
      98: goto          138
     101: aload         6
     103: invokevirtual #22                 // Method java/lang/String.toLowerCase:()Ljava/lang/String;
     106: astore        7
     108: aload_0
     109: aload         7
     111: getstatic     #23                 // Field io/netty/handler/codec/http/HttpHeaderValues.MULTIPART_FORM_DATA:Lio/netty/util/AsciiString;
     114: invokevirtual #24                 // Method io/netty/util/AsciiString.toString:()Ljava/lang/String;
     117: invokevirtual #25                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
     120: putfield      #20                 // Field isMultipart:Z
     123: aload_0
     124: aload         7
     126: getstatic     #26                 // Field io/netty/handler/codec/http/HttpHeaderValues.APPLICATION_X_WWW_FORM_URLENCODED:Lio/netty/util/AsciiString;
     129: invokevirtual #24                 // Method io/netty/util/AsciiString.toString:()Ljava/lang/String;
     132: invokevirtual #25                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
     135: putfield      #21                 // Field isUrlEncoded:Z
     138: aload_0
     139: getfield      #20                 // Field isMultipart:Z
     142: ifne          152
     145: aload_0
     146: getfield      #21                 // Field isUrlEncoded:Z
     149: ifeq          208
     152: aload_2
     153: invokeinterface #17,  1           // InterfaceMethod io/vertx/ext/web/RoutingContext.request:()Lio/vertx/core/http/HttpServerRequest;
     158: iconst_1
     159: invokeinterface #27,  2           // InterfaceMethod io/vertx/core/http/HttpServerRequest.setExpectMultipart:(Z)Lio/vertx/core/http/HttpServerRequest;
     164: pop
     165: aload_1
     166: invokestatic  #28                 // Method io/vertx/ext/web/handler/impl/BodyHandlerImpl.access$000:(Lio/vertx/ext/web/handler/impl/BodyHandlerImpl;)Z
     169: ifeq          187
     172: aload_0
     173: aload_2
     174: invokeinterface #29,  1           // InterfaceMethod io/vertx/ext/web/RoutingContext.vertx:()Lio/vertx/core/Vertx;
     179: invokeinterface #30,  1           // InterfaceMethod io/vertx/core/Vertx.fileSystem:()Lio/vertx/core/file/FileSystem;
     184: invokespecial #31                 // Method makeUploadDir:(Lio/vertx/core/file/FileSystem;)V
     187: aload_2
     188: invokeinterface #17,  1           // InterfaceMethod io/vertx/ext/web/RoutingContext.request:()Lio/vertx/core/http/HttpServerRequest;
     193: aload_0
     194: aload_2
     195: aload         5
     197: invokedynamic #32,  0             // InvokeDynamic #0:handle:(Lio/vertx/ext/web/handler/impl/BodyHandlerImpl$BHandler;Lio/vertx/ext/web/RoutingContext;Ljava/util/List;)Lio/vertx/core/Handler;
     202: invokeinterface #33,  2           // InterfaceMethod io/vertx/core/http/HttpServerRequest.uploadHandler:(Lio/vertx/core/Handler;)Lio/vertx/core/http/HttpServerRequest;
     207: pop
     208: aload_2
     209: invokeinterface #17,  1           // InterfaceMethod io/vertx/ext/web/RoutingContext.request:()Lio/vertx/core/http/HttpServerRequest;
     214: aload_0
     215: aload_2
     216: invokedynamic #34,  0             // InvokeDynamic #1:handle:(Lio/vertx/ext/web/handler/impl/BodyHandlerImpl$BHandler;Lio/vertx/ext/web/RoutingContext;)Lio/vertx/core/Handler;
     221: invokeinterface #35,  2           // InterfaceMethod io/vertx/core/http/HttpServerRequest.exceptionHandler:(Lio/vertx/core/Handler;)Lio/vertx/core/http/HttpServerRequest;
     226: pop
     227: return

  private void initBodyBuffer();
    Code:
       0: aload_0
       1: getfield      #12                 // Field contentLength:J
       4: lconst_0
       5: lcmp
       6: ifge          16
       9: sipush        1024
      12: istore_1
      13: goto          39
      16: aload_0
      17: getfield      #12                 // Field contentLength:J
      20: ldc2_w        #37                 // long 65535l
      23: lcmp
      24: ifle          33
      27: ldc           #39                 // int 65535
      29: istore_1
      30: goto          39
      33: aload_0
      34: getfield      #12                 // Field contentLength:J
      37: l2i
      38: istore_1
      39: aload_0
      40: getfield      #2                  // Field this$0:Lio/vertx/ext/web/handler/impl/BodyHandlerImpl;
      43: invokestatic  #40                 // Method io/vertx/ext/web/handler/impl/BodyHandlerImpl.access$100:(Lio/vertx/ext/web/handler/impl/BodyHandlerImpl;)J
      46: ldc2_w        #13                 // long -1l
      49: lcmp
      50: ifeq          67
      53: iload_1
      54: i2l
      55: aload_0
      56: getfield      #2                  // Field this$0:Lio/vertx/ext/web/handler/impl/BodyHandlerImpl;
      59: invokestatic  #40                 // Method io/vertx/ext/web/handler/impl/BodyHandlerImpl.access$100:(Lio/vertx/ext/web/handler/impl/BodyHandlerImpl;)J
      62: invokestatic  #41                 // Method java/lang/Math.min:(JJ)J
      65: l2i
      66: istore_1
      67: aload_0
      68: iload_1
      69: invokestatic  #42                 // InterfaceMethod io/vertx/core/buffer/Buffer.buffer:(I)Lio/vertx/core/buffer/Buffer;
      72: putfield      #43                 // Field body:Lio/vertx/core/buffer/Buffer;
      75: return

  private void makeUploadDir(io.vertx.core.file.FileSystem);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #2                  // Field this$0:Lio/vertx/ext/web/handler/impl/BodyHandlerImpl;
       5: invokestatic  #44                 // Method io/vertx/ext/web/handler/impl/BodyHandlerImpl.access$200:(Lio/vertx/ext/web/handler/impl/BodyHandlerImpl;)Ljava/lang/String;
       8: invokeinterface #45,  2           // InterfaceMethod io/vertx/core/file/FileSystem.existsBlocking:(Ljava/lang/String;)Z
      13: ifne          30
      16: aload_1
      17: aload_0
      18: getfield      #2                  // Field this$0:Lio/vertx/ext/web/handler/impl/BodyHandlerImpl;
      21: invokestatic  #44                 // Method io/vertx/ext/web/handler/impl/BodyHandlerImpl.access$200:(Lio/vertx/ext/web/handler/impl/BodyHandlerImpl;)Ljava/lang/String;
      24: invokeinterface #46,  2           // InterfaceMethod io/vertx/core/file/FileSystem.mkdirsBlocking:(Ljava/lang/String;)Lio/vertx/core/file/FileSystem;
      29: pop
      30: return

  public void handle(io.vertx.core.buffer.Buffer);
    Code:
       0: aload_0
       1: getfield      #47                 // Field failed:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: dup
      10: getfield      #10                 // Field uploadSize:J
      13: aload_1
      14: invokeinterface #48,  1           // InterfaceMethod io/vertx/core/buffer/Buffer.length:()I
      19: i2l
      20: ladd
      21: putfield      #10                 // Field uploadSize:J
      24: aload_0
      25: getfield      #2                  // Field this$0:Lio/vertx/ext/web/handler/impl/BodyHandlerImpl;
      28: invokestatic  #40                 // Method io/vertx/ext/web/handler/impl/BodyHandlerImpl.access$100:(Lio/vertx/ext/web/handler/impl/BodyHandlerImpl;)J
      31: ldc2_w        #13                 // long -1l
      34: lcmp
      35: ifeq          77
      38: aload_0
      39: getfield      #10                 // Field uploadSize:J
      42: aload_0
      43: getfield      #2                  // Field this$0:Lio/vertx/ext/web/handler/impl/BodyHandlerImpl;
      46: invokestatic  #40                 // Method io/vertx/ext/web/handler/impl/BodyHandlerImpl.access$100:(Lio/vertx/ext/web/handler/impl/BodyHandlerImpl;)J
      49: lcmp
      50: ifle          77
      53: aload_0
      54: iconst_1
      55: putfield      #47                 // Field failed:Z
      58: aload_0
      59: invokespecial #49                 // Method cancelAndCleanupFileUploads:()V
      62: aload_0
      63: getfield      #11                 // Field context:Lio/vertx/ext/web/RoutingContext;
      66: sipush        413
      69: invokeinterface #50,  2           // InterfaceMethod io/vertx/ext/web/RoutingContext.fail:(I)V
      74: goto          106
      77: aload_0
      78: getfield      #20                 // Field isMultipart:Z
      81: ifne          106
      84: aload_0
      85: getfield      #43                 // Field body:Lio/vertx/core/buffer/Buffer;
      88: ifnonnull     95
      91: aload_0
      92: invokespecial #15                 // Method initBodyBuffer:()V
      95: aload_0
      96: getfield      #43                 // Field body:Lio/vertx/core/buffer/Buffer;
      99: aload_1
     100: invokeinterface #51,  2           // InterfaceMethod io/vertx/core/buffer/Buffer.appendBuffer:(Lio/vertx/core/buffer/Buffer;)Lio/vertx/core/buffer/Buffer;
     105: pop
     106: return

  void uploadEnded();
    Code:
       0: aload_0
       1: getfield      #6                  // Field uploadCount:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #52                 // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
       7: istore_1
       8: aload_0
       9: getfield      #53                 // Field ended:Z
      12: ifeq          23
      15: iload_1
      16: ifne          23
      19: aload_0
      20: invokevirtual #54                 // Method doEnd:()V
      23: return

  void end(java.lang.Void);
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #53                 // Field ended:Z
       5: aload_0
       6: getfield      #6                  // Field uploadCount:Ljava/util/concurrent/atomic/AtomicInteger;
       9: invokevirtual #55                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      12: ifne          19
      15: aload_0
      16: invokevirtual #54                 // Method doEnd:()V
      19: return

  void doEnd();
    Code:
       0: aload_0
       1: getfield      #47                 // Field failed:Z
       4: ifeq          12
       7: aload_0
       8: invokespecial #49                 // Method cancelAndCleanupFileUploads:()V
      11: return
      12: aload_0
      13: getfield      #2                  // Field this$0:Lio/vertx/ext/web/handler/impl/BodyHandlerImpl;
      16: invokestatic  #56                 // Method io/vertx/ext/web/handler/impl/BodyHandlerImpl.access$300:(Lio/vertx/ext/web/handler/impl/BodyHandlerImpl;)Z
      19: ifeq          38
      22: aload_0
      23: getfield      #11                 // Field context:Lio/vertx/ext/web/RoutingContext;
      26: aload_0
      27: invokedynamic #57,  0             // InvokeDynamic #2:handle:(Lio/vertx/ext/web/handler/impl/BodyHandlerImpl$BHandler;)Lio/vertx/core/Handler;
      32: invokeinterface #58,  2           // InterfaceMethod io/vertx/ext/web/RoutingContext.addBodyEndHandler:(Lio/vertx/core/Handler;)I
      37: pop
      38: aload_0
      39: getfield      #11                 // Field context:Lio/vertx/ext/web/RoutingContext;
      42: invokeinterface #17,  1           // InterfaceMethod io/vertx/ext/web/RoutingContext.request:()Lio/vertx/core/http/HttpServerRequest;
      47: astore_1
      48: aload_0
      49: getfield      #2                  // Field this$0:Lio/vertx/ext/web/handler/impl/BodyHandlerImpl;
      52: invokestatic  #59                 // Method io/vertx/ext/web/handler/impl/BodyHandlerImpl.access$400:(Lio/vertx/ext/web/handler/impl/BodyHandlerImpl;)Z
      55: ifeq          85
      58: aload_1
      59: invokeinterface #60,  1           // InterfaceMethod io/vertx/core/http/HttpServerRequest.isExpectMultipart:()Z
      64: ifeq          85
      67: aload_1
      68: invokeinterface #61,  1           // InterfaceMethod io/vertx/core/http/HttpServerRequest.params:()Lio/vertx/core/MultiMap;
      73: aload_1
      74: invokeinterface #62,  1           // InterfaceMethod io/vertx/core/http/HttpServerRequest.formAttributes:()Lio/vertx/core/MultiMap;
      79: invokeinterface #63,  2           // InterfaceMethod io/vertx/core/MultiMap.addAll:(Lio/vertx/core/MultiMap;)Lio/vertx/core/MultiMap;
      84: pop
      85: aload_0
      86: getfield      #11                 // Field context:Lio/vertx/ext/web/RoutingContext;
      89: checkcast     #64                 // class io/vertx/ext/web/impl/RoutingContextInternal
      92: aload_0
      93: getfield      #43                 // Field body:Lio/vertx/core/buffer/Buffer;
      96: invokeinterface #65,  2           // InterfaceMethod io/vertx/ext/web/impl/RoutingContextInternal.setBody:(Lio/vertx/core/buffer/Buffer;)V
     101: aload_0
     102: aconst_null
     103: putfield      #43                 // Field body:Lio/vertx/core/buffer/Buffer;
     106: aload_0
     107: getfield      #11                 // Field context:Lio/vertx/ext/web/RoutingContext;
     110: invokeinterface #66,  1           // InterfaceMethod io/vertx/ext/web/RoutingContext.next:()V
     115: return

  private void cancelAndCleanupFileUploads();
    Code:
       0: aload_0
       1: getfield      #9                  // Field cleanup:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: iconst_0
       5: iconst_1
       6: invokevirtual #67                 // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z
       9: ifeq          107
      12: aload_0
      13: getfield      #2                  // Field this$0:Lio/vertx/ext/web/handler/impl/BodyHandlerImpl;
      16: invokestatic  #28                 // Method io/vertx/ext/web/handler/impl/BodyHandlerImpl.access$000:(Lio/vertx/ext/web/handler/impl/BodyHandlerImpl;)Z
      19: ifeq          107
      22: aload_0
      23: getfield      #11                 // Field context:Lio/vertx/ext/web/RoutingContext;
      26: invokeinterface #16,  1           // InterfaceMethod io/vertx/ext/web/RoutingContext.fileUploads:()Ljava/util/List;
      31: invokeinterface #68,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      36: astore_1
      37: aload_1
      38: invokeinterface #69,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      43: ifeq          107
      46: aload_1
      47: invokeinterface #70,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      52: checkcast     #71                 // class io/vertx/ext/web/FileUpload
      55: astore_2
      56: aload_0
      57: getfield      #11                 // Field context:Lio/vertx/ext/web/RoutingContext;
      60: invokeinterface #29,  1           // InterfaceMethod io/vertx/ext/web/RoutingContext.vertx:()Lio/vertx/core/Vertx;
      65: invokeinterface #30,  1           // InterfaceMethod io/vertx/core/Vertx.fileSystem:()Lio/vertx/core/file/FileSystem;
      70: astore_3
      71: aload_2
      72: invokeinterface #72,  1           // InterfaceMethod io/vertx/ext/web/FileUpload.cancel:()Z
      77: ifne          104
      80: aload_2
      81: invokeinterface #73,  1           // InterfaceMethod io/vertx/ext/web/FileUpload.uploadedFileName:()Ljava/lang/String;
      86: astore        4
      88: aload_3
      89: aload         4
      91: aload         4
      93: invokedynamic #74,  0             // InvokeDynamic #3:handle:(Ljava/lang/String;)Lio/vertx/core/Handler;
      98: invokeinterface #75,  3           // InterfaceMethod io/vertx/core/file/FileSystem.delete:(Ljava/lang/String;Lio/vertx/core/Handler;)Lio/vertx/core/file/FileSystem;
     103: pop
     104: goto          37
     107: return

  public void handle(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #76                 // class io/vertx/core/buffer/Buffer
       5: invokevirtual #77                 // Method handle:(Lio/vertx/core/buffer/Buffer;)V
       8: return

  private static void lambda$cancelAndCleanupFileUploads$4(java.lang.String, io.vertx.core.AsyncResult);
    Code:
       0: aload_1
       1: invokeinterface #78,  1           // InterfaceMethod io/vertx/core/AsyncResult.failed:()Z
       6: ifeq          42
       9: invokestatic  #79                 // Method io/vertx/ext/web/handler/impl/BodyHandlerImpl.access$500:()Lio/vertx/core/impl/logging/Logger;
      12: new           #80                 // class java/lang/StringBuilder
      15: dup
      16: invokespecial #81                 // Method java/lang/StringBuilder."<init>":()V
      19: ldc           #82                 // String Delete of uploaded file failed:
      21: invokevirtual #83                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: aload_0
      25: invokevirtual #83                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      28: invokevirtual #84                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      31: aload_1
      32: invokeinterface #85,  1           // InterfaceMethod io/vertx/core/AsyncResult.cause:()Ljava/lang/Throwable;
      37: invokeinterface #86,  3           // InterfaceMethod io/vertx/core/impl/logging/Logger.warn:(Ljava/lang/Object;Ljava/lang/Throwable;)V
      42: return

  private void lambda$doEnd$3(java.lang.Void);
    Code:
       0: aload_0
       1: invokespecial #49                 // Method cancelAndCleanupFileUploads:()V
       4: return

  private void lambda$new$2(io.vertx.ext.web.RoutingContext, java.lang.Throwable);
    Code:
       0: aload_0
       1: invokespecial #49                 // Method cancelAndCleanupFileUploads:()V
       4: aload_2
       5: instanceof    #87                 // class io/netty/handler/codec/DecoderException
       8: ifeq          27
      11: aload_1
      12: sipush        400
      15: aload_2
      16: invokevirtual #88                 // Method java/lang/Throwable.getCause:()Ljava/lang/Throwable;
      19: invokeinterface #89,  3           // InterfaceMethod io/vertx/ext/web/RoutingContext.fail:(ILjava/lang/Throwable;)V
      24: goto          34
      27: aload_1
      28: aload_2
      29: invokeinterface #90,  2           // InterfaceMethod io/vertx/ext/web/RoutingContext.fail:(Ljava/lang/Throwable;)V
      34: return

  private void lambda$new$1(io.vertx.ext.web.RoutingContext, java.util.List, io.vertx.core.http.HttpServerFileUpload);
    Code:
       0: aload_0
       1: getfield      #2                  // Field this$0:Lio/vertx/ext/web/handler/impl/BodyHandlerImpl;
       4: invokestatic  #40                 // Method io/vertx/ext/web/handler/impl/BodyHandlerImpl.access$100:(Lio/vertx/ext/web/handler/impl/BodyHandlerImpl;)J
       7: ldc2_w        #13                 // long -1l
      10: lcmp
      11: ifeq          68
      14: aload_3
      15: invokeinterface #91,  1           // InterfaceMethod io/vertx/core/http/HttpServerFileUpload.isSizeAvailable:()Z
      20: ifeq          68
      23: aload_0
      24: getfield      #10                 // Field uploadSize:J
      27: aload_3
      28: invokeinterface #92,  1           // InterfaceMethod io/vertx/core/http/HttpServerFileUpload.size:()J
      33: ladd
      34: lstore        4
      36: lload         4
      38: aload_0
      39: getfield      #2                  // Field this$0:Lio/vertx/ext/web/handler/impl/BodyHandlerImpl;
      42: invokestatic  #40                 // Method io/vertx/ext/web/handler/impl/BodyHandlerImpl.access$100:(Lio/vertx/ext/web/handler/impl/BodyHandlerImpl;)J
      45: lcmp
      46: ifle          68
      49: aload_0
      50: iconst_1
      51: putfield      #47                 // Field failed:Z
      54: aload_0
      55: invokespecial #49                 // Method cancelAndCleanupFileUploads:()V
      58: aload_1
      59: sipush        413
      62: invokeinterface #50,  2           // InterfaceMethod io/vertx/ext/web/RoutingContext.fail:(I)V
      67: return
      68: aload_0
      69: getfield      #2                  // Field this$0:Lio/vertx/ext/web/handler/impl/BodyHandlerImpl;
      72: invokestatic  #28                 // Method io/vertx/ext/web/handler/impl/BodyHandlerImpl.access$000:(Lio/vertx/ext/web/handler/impl/BodyHandlerImpl;)Z
      75: ifeq          159
      78: aload_0
      79: getfield      #6                  // Field uploadCount:Ljava/util/concurrent/atomic/AtomicInteger;
      82: invokevirtual #93                 // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
      85: pop
      86: new           #94                 // class java/io/File
      89: dup
      90: aload_0
      91: getfield      #2                  // Field this$0:Lio/vertx/ext/web/handler/impl/BodyHandlerImpl;
      94: invokestatic  #44                 // Method io/vertx/ext/web/handler/impl/BodyHandlerImpl.access$200:(Lio/vertx/ext/web/handler/impl/BodyHandlerImpl;)Ljava/lang/String;
      97: invokestatic  #95                 // Method java/util/UUID.randomUUID:()Ljava/util/UUID;
     100: invokevirtual #96                 // Method java/util/UUID.toString:()Ljava/lang/String;
     103: invokespecial #97                 // Method java/io/File."<init>":(Ljava/lang/String;Ljava/lang/String;)V
     106: invokevirtual #98                 // Method java/io/File.getPath:()Ljava/lang/String;
     109: astore        4
     111: new           #99                 // class io/vertx/ext/web/impl/FileUploadImpl
     114: dup
     115: aload         4
     117: aload_3
     118: invokespecial #100                // Method io/vertx/ext/web/impl/FileUploadImpl."<init>":(Ljava/lang/String;Lio/vertx/core/http/HttpServerFileUpload;)V
     121: astore        5
     123: aload_2
     124: aload         5
     126: invokeinterface #101,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     131: pop
     132: aload_3
     133: aload         4
     135: invokeinterface #102,  2          // InterfaceMethod io/vertx/core/http/HttpServerFileUpload.streamToFileSystem:(Ljava/lang/String;)Lio/vertx/core/Future;
     140: astore        6
     142: aload         6
     144: aload_0
     145: aload         6
     147: aload_1
     148: invokedynamic #103,  0            // InvokeDynamic #4:handle:(Lio/vertx/ext/web/handler/impl/BodyHandlerImpl$BHandler;Lio/vertx/core/Future;Lio/vertx/ext/web/RoutingContext;)Lio/vertx/core/Handler;
     153: invokeinterface #104,  2          // InterfaceMethod io/vertx/core/Future.onComplete:(Lio/vertx/core/Handler;)Lio/vertx/core/Future;
     158: pop
     159: return

  private void lambda$null$0(io.vertx.core.Future, io.vertx.ext.web.RoutingContext, io.vertx.core.AsyncResult);
    Code:
       0: aload_1
       1: invokeinterface #105,  1          // InterfaceMethod io/vertx/core/Future.succeeded:()Z
       6: ifeq          16
       9: aload_0
      10: invokevirtual #106                // Method uploadEnded:()V
      13: goto          32
      16: aload_0
      17: invokespecial #49                 // Method cancelAndCleanupFileUploads:()V
      20: aload_2
      21: aload_3
      22: invokeinterface #85,  1           // InterfaceMethod io/vertx/core/AsyncResult.cause:()Ljava/lang/Throwable;
      27: invokeinterface #90,  2           // InterfaceMethod io/vertx/ext/web/RoutingContext.fail:(Ljava/lang/Throwable;)V
      32: return
}
