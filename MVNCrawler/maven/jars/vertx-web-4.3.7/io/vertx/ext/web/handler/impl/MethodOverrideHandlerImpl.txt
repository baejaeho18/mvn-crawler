Compiled from "MethodOverrideHandlerImpl.java"
public class io.vertx.ext.web.handler.impl.MethodOverrideHandlerImpl implements io.vertx.ext.web.handler.MethodOverrideHandler {
  private static final io.vertx.core.impl.logging.Logger LOG;

  private final boolean useSafeDowngrade;

  public io.vertx.ext.web.handler.impl.MethodOverrideHandlerImpl();
    Code:
       0: aload_0
       1: iconst_1
       2: invokespecial #1                  // Method "<init>":(Z)V
       5: return

  public io.vertx.ext.web.handler.impl.MethodOverrideHandlerImpl(boolean);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iload_1
       6: putfield      #3                  // Field useSafeDowngrade:Z
       9: return

  public void handle(io.vertx.ext.web.RoutingContext);
    Code:
       0: aload_1
       1: invokeinterface #4,  1            // InterfaceMethod io/vertx/ext/web/RoutingContext.request:()Lio/vertx/core/http/HttpServerRequest;
       6: astore_2
       7: aload_2
       8: invokeinterface #5,  1            // InterfaceMethod io/vertx/core/http/HttpServerRequest.method:()Lio/vertx/core/http/HttpMethod;
      13: astore_3
      14: aload_0
      15: aload_2
      16: invokespecial #6                  // Method methodFromHeader:(Lio/vertx/core/http/HttpServerRequest;)Lio/vertx/core/http/HttpMethod;
      19: astore        4
      21: aload         4
      23: ifnull        59
      26: aload_3
      27: aload         4
      29: if_acmpeq     59
      32: aload_0
      33: aload_3
      34: aload         4
      36: invokespecial #7                  // Method canOverride:(Lio/vertx/core/http/HttpMethod;Lio/vertx/core/http/HttpMethod;)Z
      39: ifeq          59
      42: aload_1
      43: aload         4
      45: aload_2
      46: invokeinterface #8,  1            // InterfaceMethod io/vertx/core/http/HttpServerRequest.path:()Ljava/lang/String;
      51: invokeinterface #9,  3            // InterfaceMethod io/vertx/ext/web/RoutingContext.reroute:(Lio/vertx/core/http/HttpMethod;Ljava/lang/String;)V
      56: goto          65
      59: aload_1
      60: invokeinterface #10,  1           // InterfaceMethod io/vertx/ext/web/RoutingContext.next:()V
      65: return

  private io.vertx.core.http.HttpMethod methodFromHeader(io.vertx.core.http.HttpServerRequest);
    Code:
       0: aload_1
       1: invokeinterface #11,  1           // InterfaceMethod io/vertx/core/http/HttpServerRequest.headers:()Lio/vertx/core/MultiMap;
       6: ldc           #12                 // String X-HTTP-METHOD-OVERRIDE
       8: invokeinterface #13,  2           // InterfaceMethod io/vertx/core/MultiMap.get:(Ljava/lang/String;)Ljava/lang/String;
      13: astore_2
      14: aload_2
      15: ifnull        25
      18: aload_2
      19: invokestatic  #14                 // Method io/vertx/core/http/HttpMethod.valueOf:(Ljava/lang/String;)Lio/vertx/core/http/HttpMethod;
      22: goto          26
      25: aconst_null
      26: areturn

  private boolean canOverride(io.vertx.core.http.HttpMethod, io.vertx.core.http.HttpMethod);
    Code:
       0: aload_0
       1: getfield      #3                  // Field useSafeDowngrade:Z
       4: ifne          9
       7: iconst_1
       8: ireturn
       9: aload_2
      10: invokestatic  #15                 // InterfaceMethod io/vertx/ext/web/handler/impl/MethodOverrideHandlerImpl$HttpMethodTraits.isIdempotent:(Lio/vertx/core/http/HttpMethod;)Z
      13: ifne          37
      16: aload_2
      17: invokestatic  #16                 // InterfaceMethod io/vertx/ext/web/handler/impl/MethodOverrideHandlerImpl$HttpMethodTraits.isSafe:(Lio/vertx/core/http/HttpMethod;)Z
      20: ifeq          30
      23: aload_1
      24: invokestatic  #15                 // InterfaceMethod io/vertx/ext/web/handler/impl/MethodOverrideHandlerImpl$HttpMethodTraits.isIdempotent:(Lio/vertx/core/http/HttpMethod;)Z
      27: ifeq          37
      30: aload_1
      31: invokestatic  #16                 // InterfaceMethod io/vertx/ext/web/handler/impl/MethodOverrideHandlerImpl$HttpMethodTraits.isSafe:(Lio/vertx/core/http/HttpMethod;)Z
      34: ifne          41
      37: iconst_1
      38: goto          42
      41: iconst_0
      42: ireturn

  public void handle(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #17                 // class io/vertx/ext/web/RoutingContext
       5: invokevirtual #18                 // Method handle:(Lio/vertx/ext/web/RoutingContext;)V
       8: return

  static {};
    Code:
       0: ldc           #19                 // class io/vertx/ext/web/handler/impl/MethodOverrideHandlerImpl
       2: invokestatic  #20                 // Method io/vertx/core/impl/logging/LoggerFactory.getLogger:(Ljava/lang/Class;)Lio/vertx/core/impl/logging/Logger;
       5: putstatic     #21                 // Field LOG:Lio/vertx/core/impl/logging/Logger;
       8: return
}
