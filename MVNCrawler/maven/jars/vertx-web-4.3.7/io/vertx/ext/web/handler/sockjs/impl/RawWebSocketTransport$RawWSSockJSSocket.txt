Compiled from "RawWebSocketTransport.java"
class io.vertx.ext.web.handler.sockjs.impl.RawWebSocketTransport$RawWSSockJSSocket extends io.vertx.ext.web.handler.sockjs.impl.SockJSSocketBase {
  final io.vertx.core.http.ServerWebSocket ws;

  io.vertx.core.MultiMap headers;

  boolean closed;

  io.vertx.ext.web.handler.sockjs.impl.RawWebSocketTransport$RawWSSockJSSocket(io.vertx.core.Vertx, io.vertx.ext.web.RoutingContext, io.vertx.ext.web.handler.sockjs.SockJSHandlerOptions, io.vertx.core.http.ServerWebSocket);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokespecial #2                  // Method io/vertx/ext/web/handler/sockjs/impl/SockJSSocketBase."<init>":(Lio/vertx/core/Vertx;Lio/vertx/ext/web/RoutingContext;Lio/vertx/ext/web/handler/sockjs/SockJSHandlerOptions;)V
       7: aload_0
       8: aload         4
      10: putfield      #3                  // Field ws:Lio/vertx/core/http/ServerWebSocket;
      13: aload         4
      15: aload_0
      16: invokedynamic #4,  0              // InvokeDynamic #0:handle:(Lio/vertx/ext/web/handler/sockjs/impl/RawWebSocketTransport$RawWSSockJSSocket;)Lio/vertx/core/Handler;
      21: invokeinterface #5,  2            // InterfaceMethod io/vertx/core/http/ServerWebSocket.closeHandler:(Lio/vertx/core/Handler;)Lio/vertx/core/http/ServerWebSocket;
      26: pop
      27: return

  public io.vertx.ext.web.handler.sockjs.SockJSSocket handler(io.vertx.core.Handler<io.vertx.core.buffer.Buffer>);
    Code:
       0: aload_0
       1: getfield      #3                  // Field ws:Lio/vertx/core/http/ServerWebSocket;
       4: aload_1
       5: invokeinterface #6,  2            // InterfaceMethod io/vertx/core/http/ServerWebSocket.binaryMessageHandler:(Lio/vertx/core/Handler;)Lio/vertx/core/http/WebSocketBase;
      10: pop
      11: aload_0
      12: getfield      #3                  // Field ws:Lio/vertx/core/http/ServerWebSocket;
      15: aload_1
      16: invokedynamic #7,  0              // InvokeDynamic #1:handle:(Lio/vertx/core/Handler;)Lio/vertx/core/Handler;
      21: invokeinterface #8,  2            // InterfaceMethod io/vertx/core/http/ServerWebSocket.textMessageHandler:(Lio/vertx/core/Handler;)Lio/vertx/core/http/WebSocketBase;
      26: pop
      27: aload_0
      28: areturn

  public io.vertx.ext.web.handler.sockjs.SockJSSocket pause();
    Code:
       0: aload_0
       1: getfield      #3                  // Field ws:Lio/vertx/core/http/ServerWebSocket;
       4: invokeinterface #9,  1            // InterfaceMethod io/vertx/core/http/ServerWebSocket.pause:()Lio/vertx/core/http/ServerWebSocket;
       9: pop
      10: aload_0
      11: areturn

  public io.vertx.ext.web.handler.sockjs.SockJSSocket resume();
    Code:
       0: aload_0
       1: getfield      #3                  // Field ws:Lio/vertx/core/http/ServerWebSocket;
       4: invokeinterface #10,  1           // InterfaceMethod io/vertx/core/http/ServerWebSocket.resume:()Lio/vertx/core/http/ServerWebSocket;
       9: pop
      10: aload_0
      11: areturn

  public io.vertx.ext.web.handler.sockjs.SockJSSocket fetch(long);
    Code:
       0: aload_0
       1: getfield      #3                  // Field ws:Lio/vertx/core/http/ServerWebSocket;
       4: lload_1
       5: invokeinterface #11,  3           // InterfaceMethod io/vertx/core/http/ServerWebSocket.fetch:(J)Lio/vertx/core/http/ServerWebSocket;
      10: pop
      11: aload_0
      12: areturn

  public io.vertx.core.Future<java.lang.Void> write(io.vertx.core.buffer.Buffer);
    Code:
       0: aload_0
       1: getfield      #12                 // Field closed:Z
       4: ifne          18
       7: aload_0
       8: getfield      #3                  // Field ws:Lio/vertx/core/http/ServerWebSocket;
      11: aload_1
      12: invokeinterface #13,  2           // InterfaceMethod io/vertx/core/http/ServerWebSocket.writeBinaryMessage:(Lio/vertx/core/buffer/Buffer;)Lio/vertx/core/Future;
      17: areturn
      18: aload_0
      19: getfield      #14                 // Field vertx:Lio/vertx/core/Vertx;
      22: checkcast     #15                 // class io/vertx/core/impl/VertxInternal
      25: invokeinterface #16,  1           // InterfaceMethod io/vertx/core/impl/VertxInternal.promise:()Lio/vertx/core/impl/future/PromiseInternal;
      30: astore_2
      31: aload_0
      32: getfield      #14                 // Field vertx:Lio/vertx/core/Vertx;
      35: aload_2
      36: invokedynamic #17,  0             // InvokeDynamic #2:handle:(Lio/vertx/core/Promise;)Lio/vertx/core/Handler;
      41: invokeinterface #18,  2           // InterfaceMethod io/vertx/core/Vertx.runOnContext:(Lio/vertx/core/Handler;)V
      46: aload_2
      47: invokeinterface #19,  1           // InterfaceMethod io/vertx/core/Promise.future:()Lio/vertx/core/Future;
      52: areturn

  public io.vertx.core.Future<java.lang.Void> write(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #12                 // Field closed:Z
       4: ifne          18
       7: aload_0
       8: getfield      #3                  // Field ws:Lio/vertx/core/http/ServerWebSocket;
      11: aload_1
      12: invokeinterface #20,  2           // InterfaceMethod io/vertx/core/http/ServerWebSocket.writeTextMessage:(Ljava/lang/String;)Lio/vertx/core/Future;
      17: areturn
      18: aload_0
      19: getfield      #14                 // Field vertx:Lio/vertx/core/Vertx;
      22: checkcast     #15                 // class io/vertx/core/impl/VertxInternal
      25: invokeinterface #16,  1           // InterfaceMethod io/vertx/core/impl/VertxInternal.promise:()Lio/vertx/core/impl/future/PromiseInternal;
      30: astore_2
      31: aload_0
      32: getfield      #14                 // Field vertx:Lio/vertx/core/Vertx;
      35: aload_2
      36: invokedynamic #21,  0             // InvokeDynamic #3:handle:(Lio/vertx/core/Promise;)Lio/vertx/core/Handler;
      41: invokeinterface #18,  2           // InterfaceMethod io/vertx/core/Vertx.runOnContext:(Lio/vertx/core/Handler;)V
      46: aload_2
      47: invokeinterface #19,  1           // InterfaceMethod io/vertx/core/Promise.future:()Lio/vertx/core/Future;
      52: areturn

  public io.vertx.ext.web.handler.sockjs.SockJSSocket setWriteQueueMaxSize(int);
    Code:
       0: aload_0
       1: getfield      #3                  // Field ws:Lio/vertx/core/http/ServerWebSocket;
       4: iload_1
       5: invokeinterface #22,  2           // InterfaceMethod io/vertx/core/http/ServerWebSocket.setWriteQueueMaxSize:(I)Lio/vertx/core/http/ServerWebSocket;
      10: pop
      11: aload_0
      12: areturn

  public boolean writeQueueFull();
    Code:
       0: aload_0
       1: getfield      #3                  // Field ws:Lio/vertx/core/http/ServerWebSocket;
       4: invokeinterface #23,  1           // InterfaceMethod io/vertx/core/http/ServerWebSocket.writeQueueFull:()Z
       9: ireturn

  public io.vertx.ext.web.handler.sockjs.SockJSSocket drainHandler(io.vertx.core.Handler<java.lang.Void>);
    Code:
       0: aload_0
       1: getfield      #3                  // Field ws:Lio/vertx/core/http/ServerWebSocket;
       4: aload_1
       5: invokeinterface #24,  2           // InterfaceMethod io/vertx/core/http/ServerWebSocket.drainHandler:(Lio/vertx/core/Handler;)Lio/vertx/core/http/ServerWebSocket;
      10: pop
      11: aload_0
      12: areturn

  public io.vertx.ext.web.handler.sockjs.SockJSSocket exceptionHandler(io.vertx.core.Handler<java.lang.Throwable>);
    Code:
       0: aload_0
       1: getfield      #3                  // Field ws:Lio/vertx/core/http/ServerWebSocket;
       4: aload_1
       5: invokeinterface #25,  2           // InterfaceMethod io/vertx/core/http/ServerWebSocket.exceptionHandler:(Lio/vertx/core/Handler;)Lio/vertx/core/http/ServerWebSocket;
      10: pop
      11: aload_0
      12: areturn

  public io.vertx.ext.web.handler.sockjs.SockJSSocket endHandler(io.vertx.core.Handler<java.lang.Void>);
    Code:
       0: aload_0
       1: getfield      #3                  // Field ws:Lio/vertx/core/http/ServerWebSocket;
       4: aload_1
       5: invokeinterface #26,  2           // InterfaceMethod io/vertx/core/http/ServerWebSocket.endHandler:(Lio/vertx/core/Handler;)Lio/vertx/core/http/ServerWebSocket;
      10: pop
      11: aload_0
      12: areturn

  public io.vertx.ext.web.handler.sockjs.SockJSSocket closeHandler(io.vertx.core.Handler<java.lang.Void>);
    Code:
       0: aload_0
       1: getfield      #3                  // Field ws:Lio/vertx/core/http/ServerWebSocket;
       4: aload_1
       5: invokeinterface #5,  2            // InterfaceMethod io/vertx/core/http/ServerWebSocket.closeHandler:(Lio/vertx/core/Handler;)Lio/vertx/core/http/ServerWebSocket;
      10: pop
      11: aload_0
      12: areturn

  public void close();
    Code:
       0: aload_0
       1: dup
       2: astore_1
       3: monitorenter
       4: aload_0
       5: getfield      #12                 // Field closed:Z
       8: ifeq          14
      11: aload_1
      12: monitorexit
      13: return
      14: aload_0
      15: iconst_1
      16: putfield      #12                 // Field closed:Z
      19: aload_1
      20: monitorexit
      21: goto          29
      24: astore_2
      25: aload_1
      26: monitorexit
      27: aload_2
      28: athrow
      29: aload_0
      30: invokespecial #1                  // Method io/vertx/ext/web/handler/sockjs/impl/SockJSSocketBase.close:()V
      33: aload_0
      34: getfield      #3                  // Field ws:Lio/vertx/core/http/ServerWebSocket;
      37: invokeinterface #27,  1           // InterfaceMethod io/vertx/core/http/ServerWebSocket.close:()Lio/vertx/core/Future;
      42: pop
      43: return
    Exception table:
       from    to  target type
           4    13    24   any
          14    21    24   any
          24    27    24   any

  public void closeAfterSessionExpired();
    Code:
       0: aload_0
       1: sipush        1001
       4: ldc           #28                 // String Session expired
       6: invokevirtual #29                 // Method close:(ILjava/lang/String;)V
       9: return

  public void close(int, java.lang.String);
    Code:
       0: aload_0
       1: dup
       2: astore_3
       3: monitorenter
       4: aload_0
       5: getfield      #12                 // Field closed:Z
       8: ifeq          14
      11: aload_3
      12: monitorexit
      13: return
      14: aload_0
      15: iconst_1
      16: putfield      #12                 // Field closed:Z
      19: aload_3
      20: monitorexit
      21: goto          31
      24: astore        4
      26: aload_3
      27: monitorexit
      28: aload         4
      30: athrow
      31: aload_0
      32: invokespecial #1                  // Method io/vertx/ext/web/handler/sockjs/impl/SockJSSocketBase.close:()V
      35: aload_0
      36: getfield      #3                  // Field ws:Lio/vertx/core/http/ServerWebSocket;
      39: iload_1
      40: i2s
      41: aload_2
      42: invokeinterface #30,  3           // InterfaceMethod io/vertx/core/http/ServerWebSocket.close:(SLjava/lang/String;)Lio/vertx/core/Future;
      47: pop
      48: return
    Exception table:
       from    to  target type
           4    13    24   any
          14    21    24   any
          24    28    24   any

  public io.vertx.core.net.SocketAddress remoteAddress();
    Code:
       0: aload_0
       1: getfield      #3                  // Field ws:Lio/vertx/core/http/ServerWebSocket;
       4: invokeinterface #31,  1           // InterfaceMethod io/vertx/core/http/ServerWebSocket.remoteAddress:()Lio/vertx/core/net/SocketAddress;
       9: areturn

  public io.vertx.core.net.SocketAddress localAddress();
    Code:
       0: aload_0
       1: getfield      #3                  // Field ws:Lio/vertx/core/http/ServerWebSocket;
       4: invokeinterface #32,  1           // InterfaceMethod io/vertx/core/http/ServerWebSocket.localAddress:()Lio/vertx/core/net/SocketAddress;
       9: areturn

  public io.vertx.core.MultiMap headers();
    Code:
       0: aload_0
       1: getfield      #33                 // Field headers:Lio/vertx/core/MultiMap;
       4: ifnonnull     23
       7: aload_0
       8: aload_0
       9: getfield      #3                  // Field ws:Lio/vertx/core/http/ServerWebSocket;
      12: invokeinterface #34,  1           // InterfaceMethod io/vertx/core/http/ServerWebSocket.headers:()Lio/vertx/core/MultiMap;
      17: invokestatic  #35                 // Method io/vertx/ext/web/handler/sockjs/impl/BaseTransport.removeCookieHeaders:(Lio/vertx/core/MultiMap;)Lio/vertx/core/MultiMap;
      20: putfield      #33                 // Field headers:Lio/vertx/core/MultiMap;
      23: aload_0
      24: getfield      #33                 // Field headers:Lio/vertx/core/MultiMap;
      27: areturn

  public java.lang.String uri();
    Code:
       0: aload_0
       1: getfield      #3                  // Field ws:Lio/vertx/core/http/ServerWebSocket;
       4: invokeinterface #36,  1           // InterfaceMethod io/vertx/core/http/ServerWebSocket.uri:()Ljava/lang/String;
       9: areturn

  public io.vertx.core.streams.ReadStream endHandler(io.vertx.core.Handler);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #37                 // Method endHandler:(Lio/vertx/core/Handler;)Lio/vertx/ext/web/handler/sockjs/SockJSSocket;
       5: areturn

  public io.vertx.core.streams.ReadStream fetch(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #38                 // Method fetch:(J)Lio/vertx/ext/web/handler/sockjs/SockJSSocket;
       5: areturn

  public io.vertx.core.streams.ReadStream resume();
    Code:
       0: aload_0
       1: invokevirtual #39                 // Method resume:()Lio/vertx/ext/web/handler/sockjs/SockJSSocket;
       4: areturn

  public io.vertx.core.streams.ReadStream pause();
    Code:
       0: aload_0
       1: invokevirtual #40                 // Method pause:()Lio/vertx/ext/web/handler/sockjs/SockJSSocket;
       4: areturn

  public io.vertx.core.streams.ReadStream handler(io.vertx.core.Handler);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #41                 // Method handler:(Lio/vertx/core/Handler;)Lio/vertx/ext/web/handler/sockjs/SockJSSocket;
       5: areturn

  public io.vertx.core.streams.ReadStream exceptionHandler(io.vertx.core.Handler);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #42                 // Method exceptionHandler:(Lio/vertx/core/Handler;)Lio/vertx/ext/web/handler/sockjs/SockJSSocket;
       5: areturn

  public io.vertx.core.streams.StreamBase exceptionHandler(io.vertx.core.Handler);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #42                 // Method exceptionHandler:(Lio/vertx/core/Handler;)Lio/vertx/ext/web/handler/sockjs/SockJSSocket;
       5: areturn

  public io.vertx.core.streams.WriteStream drainHandler(io.vertx.core.Handler);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #43                 // Method drainHandler:(Lio/vertx/core/Handler;)Lio/vertx/ext/web/handler/sockjs/SockJSSocket;
       5: areturn

  public io.vertx.core.streams.WriteStream setWriteQueueMaxSize(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #44                 // Method setWriteQueueMaxSize:(I)Lio/vertx/ext/web/handler/sockjs/SockJSSocket;
       5: areturn

  public io.vertx.core.Future write(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #45                 // class io/vertx/core/buffer/Buffer
       5: invokevirtual #46                 // Method write:(Lio/vertx/core/buffer/Buffer;)Lio/vertx/core/Future;
       8: areturn

  public io.vertx.core.streams.WriteStream exceptionHandler(io.vertx.core.Handler);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #42                 // Method exceptionHandler:(Lio/vertx/core/Handler;)Lio/vertx/ext/web/handler/sockjs/SockJSSocket;
       5: areturn

  private static void lambda$write$3(io.vertx.core.Promise, java.lang.Void);
    Code:
       0: aload_0
       1: getstatic     #47                 // Field io/vertx/core/net/impl/ConnectionBase.CLOSED_EXCEPTION:Lio/vertx/core/VertxException;
       4: invokeinterface #48,  2           // InterfaceMethod io/vertx/core/Promise.fail:(Ljava/lang/Throwable;)V
       9: return

  private static void lambda$write$2(io.vertx.core.Promise, java.lang.Void);
    Code:
       0: aload_0
       1: getstatic     #47                 // Field io/vertx/core/net/impl/ConnectionBase.CLOSED_EXCEPTION:Lio/vertx/core/VertxException;
       4: invokeinterface #48,  2           // InterfaceMethod io/vertx/core/Promise.fail:(Ljava/lang/Throwable;)V
       9: return

  private static void lambda$handler$1(io.vertx.core.Handler, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #49                 // InterfaceMethod io/vertx/core/buffer/Buffer.buffer:(Ljava/lang/String;)Lio/vertx/core/buffer/Buffer;
       5: invokeinterface #50,  2           // InterfaceMethod io/vertx/core/Handler.handle:(Ljava/lang/Object;)V
      10: return

  private void lambda$new$0(java.lang.Void);
    Code:
       0: aload_0
       1: dup
       2: astore_2
       3: monitorenter
       4: aload_0
       5: iconst_1
       6: putfield      #12                 // Field closed:Z
       9: aload_2
      10: monitorexit
      11: goto          19
      14: astore_3
      15: aload_2
      16: monitorexit
      17: aload_3
      18: athrow
      19: aload_0
      20: invokestatic  #51                 // Method access$001:(Lio/vertx/ext/web/handler/sockjs/impl/RawWebSocketTransport$RawWSSockJSSocket;)V
      23: return
    Exception table:
       from    to  target type
           4    11    14   any
          14    17    14   any

  static void access$001(io.vertx.ext.web.handler.sockjs.impl.RawWebSocketTransport$RawWSSockJSSocket);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method io/vertx/ext/web/handler/sockjs/impl/SockJSSocketBase.close:()V
       4: return
}
