Compiled from "SockJSSocket.java"
public interface io.vertx.ext.web.handler.sockjs.SockJSSocket extends io.vertx.core.streams.ReadStream<io.vertx.core.buffer.Buffer>, io.vertx.core.streams.WriteStream<io.vertx.core.buffer.Buffer> {
  public abstract io.vertx.ext.web.handler.sockjs.SockJSSocket exceptionHandler(io.vertx.core.Handler<java.lang.Throwable>);

  public abstract io.vertx.ext.web.handler.sockjs.SockJSSocket handler(io.vertx.core.Handler<io.vertx.core.buffer.Buffer>);

  public abstract io.vertx.ext.web.handler.sockjs.SockJSSocket pause();

  public abstract io.vertx.ext.web.handler.sockjs.SockJSSocket resume();

  public abstract io.vertx.ext.web.handler.sockjs.SockJSSocket fetch(long);

  public abstract io.vertx.ext.web.handler.sockjs.SockJSSocket endHandler(io.vertx.core.Handler<java.lang.Void>);

  public abstract io.vertx.ext.web.handler.sockjs.SockJSSocket closeHandler(io.vertx.core.Handler<java.lang.Void>);

  public abstract io.vertx.core.Future<java.lang.Void> write(io.vertx.core.buffer.Buffer);

  public default io.vertx.core.Future<java.lang.Void> write(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1                  // InterfaceMethod io/vertx/core/buffer/Buffer.buffer:(Ljava/lang/String;)Lio/vertx/core/buffer/Buffer;
       5: invokeinterface #2,  2            // InterfaceMethod write:(Lio/vertx/core/buffer/Buffer;)Lio/vertx/core/Future;
      10: areturn

  public default void write(java.lang.String, io.vertx.core.Handler<io.vertx.core.AsyncResult<java.lang.Void>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #3,  2            // InterfaceMethod write:(Ljava/lang/String;)Lio/vertx/core/Future;
       7: aload_2
       8: invokeinterface #4,  2            // InterfaceMethod io/vertx/core/Future.onComplete:(Lio/vertx/core/Handler;)Lio/vertx/core/Future;
      13: pop
      14: return

  public default void write(io.vertx.core.buffer.Buffer, io.vertx.core.Handler<io.vertx.core.AsyncResult<java.lang.Void>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #2,  2            // InterfaceMethod write:(Lio/vertx/core/buffer/Buffer;)Lio/vertx/core/Future;
       7: aload_2
       8: invokeinterface #4,  2            // InterfaceMethod io/vertx/core/Future.onComplete:(Lio/vertx/core/Handler;)Lio/vertx/core/Future;
      13: pop
      14: return

  public abstract io.vertx.ext.web.handler.sockjs.SockJSSocket setWriteQueueMaxSize(int);

  public abstract io.vertx.ext.web.handler.sockjs.SockJSSocket drainHandler(io.vertx.core.Handler<java.lang.Void>);

  public abstract java.lang.String writeHandlerID();

  public abstract io.vertx.core.Future<java.lang.Void> end();

  public abstract void close();

  public default void close(int, java.lang.String);
    Code:
       0: aload_0
       1: invokeinterface #5,  1            // InterfaceMethod close:()V
       6: return

  public abstract io.vertx.core.net.SocketAddress remoteAddress();

  public abstract io.vertx.core.net.SocketAddress localAddress();

  public abstract io.vertx.core.MultiMap headers();

  public abstract java.lang.String uri();

  public abstract io.vertx.ext.web.RoutingContext routingContext();

  public abstract io.vertx.ext.web.Session webSession();

  public abstract io.vertx.ext.auth.User webUser();

  public default io.vertx.core.streams.ReadStream endHandler(io.vertx.core.Handler);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #6,  2            // InterfaceMethod endHandler:(Lio/vertx/core/Handler;)Lio/vertx/ext/web/handler/sockjs/SockJSSocket;
       7: areturn

  public default io.vertx.core.streams.ReadStream fetch(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokeinterface #7,  3            // InterfaceMethod fetch:(J)Lio/vertx/ext/web/handler/sockjs/SockJSSocket;
       7: areturn

  public default io.vertx.core.streams.ReadStream resume();
    Code:
       0: aload_0
       1: invokeinterface #8,  1            // InterfaceMethod resume:()Lio/vertx/ext/web/handler/sockjs/SockJSSocket;
       6: areturn

  public default io.vertx.core.streams.ReadStream pause();
    Code:
       0: aload_0
       1: invokeinterface #9,  1            // InterfaceMethod pause:()Lio/vertx/ext/web/handler/sockjs/SockJSSocket;
       6: areturn

  public default io.vertx.core.streams.ReadStream handler(io.vertx.core.Handler);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #10,  2           // InterfaceMethod handler:(Lio/vertx/core/Handler;)Lio/vertx/ext/web/handler/sockjs/SockJSSocket;
       7: areturn

  public default io.vertx.core.streams.ReadStream exceptionHandler(io.vertx.core.Handler);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #11,  2           // InterfaceMethod exceptionHandler:(Lio/vertx/core/Handler;)Lio/vertx/ext/web/handler/sockjs/SockJSSocket;
       7: areturn

  public default io.vertx.core.streams.StreamBase exceptionHandler(io.vertx.core.Handler);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #11,  2           // InterfaceMethod exceptionHandler:(Lio/vertx/core/Handler;)Lio/vertx/ext/web/handler/sockjs/SockJSSocket;
       7: areturn

  public default io.vertx.core.streams.WriteStream drainHandler(io.vertx.core.Handler);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #12,  2           // InterfaceMethod drainHandler:(Lio/vertx/core/Handler;)Lio/vertx/ext/web/handler/sockjs/SockJSSocket;
       7: areturn

  public default io.vertx.core.streams.WriteStream setWriteQueueMaxSize(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokeinterface #13,  2           // InterfaceMethod setWriteQueueMaxSize:(I)Lio/vertx/ext/web/handler/sockjs/SockJSSocket;
       7: areturn

  public default void write(java.lang.Object, io.vertx.core.Handler);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #14                 // class io/vertx/core/buffer/Buffer
       5: aload_2
       6: invokeinterface #15,  3           // InterfaceMethod write:(Lio/vertx/core/buffer/Buffer;Lio/vertx/core/Handler;)V
      11: return

  public default io.vertx.core.Future write(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #14                 // class io/vertx/core/buffer/Buffer
       5: invokeinterface #2,  2            // InterfaceMethod write:(Lio/vertx/core/buffer/Buffer;)Lio/vertx/core/Future;
      10: areturn

  public default io.vertx.core.streams.WriteStream exceptionHandler(io.vertx.core.Handler);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #11,  2           // InterfaceMethod exceptionHandler:(Lio/vertx/core/Handler;)Lio/vertx/ext/web/handler/sockjs/SockJSSocket;
       7: areturn
}
