Compiled from "XWikiDOMSerializer.java"
public class org.htmlcleaner.XWikiDOMSerializer extends org.htmlcleaner.DomSerializer {
  private static final java.lang.String HTML_QUALIFIED_NAME;

  public org.htmlcleaner.XWikiDOMSerializer(org.htmlcleaner.CleanerProperties);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: invokespecial #1                  // Method org/htmlcleaner/DomSerializer."<init>":(Lorg/htmlcleaner/CleanerProperties;Z)V
       6: return

  private org.w3c.dom.Document createDocument(javax.xml.parsers.DocumentBuilder, org.htmlcleaner.TagNode);
    Code:
       0: aload_1
       1: invokevirtual #2                  // Method javax/xml/parsers/DocumentBuilder.getDOMImplementation:()Lorg/w3c/dom/DOMImplementation;
       4: astore_3
       5: aload_2
       6: invokevirtual #3                  // Method org/htmlcleaner/TagNode.getDocType:()Lorg/htmlcleaner/DoctypeToken;
       9: ifnull        97
      12: aload_2
      13: invokevirtual #3                  // Method org/htmlcleaner/TagNode.getDocType:()Lorg/htmlcleaner/DoctypeToken;
      16: invokevirtual #4                  // Method org/htmlcleaner/DoctypeToken.getPart1:()Ljava/lang/String;
      19: astore        5
      21: aload_2
      22: invokevirtual #3                  // Method org/htmlcleaner/TagNode.getDocType:()Lorg/htmlcleaner/DoctypeToken;
      25: invokevirtual #5                  // Method org/htmlcleaner/DoctypeToken.getPublicId:()Ljava/lang/String;
      28: astore        6
      30: aload_2
      31: invokevirtual #3                  // Method org/htmlcleaner/TagNode.getDocType:()Lorg/htmlcleaner/DoctypeToken;
      34: invokevirtual #6                  // Method org/htmlcleaner/DoctypeToken.getSystemId:()Ljava/lang/String;
      37: astore        7
      39: aload         5
      41: ifnonnull     48
      44: ldc           #8                  // String html
      46: astore        5
      48: aload_3
      49: aload         5
      51: aload         6
      53: aload         7
      55: invokeinterface #9,  4            // InterfaceMethod org/w3c/dom/DOMImplementation.createDocumentType:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lorg/w3c/dom/DocumentType;
      60: astore        8
      62: aload         5
      64: ldc           #10                 // String HTML
      66: invokevirtual #11                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      69: ifeq          76
      72: ldc           #8                  // String html
      74: astore        5
      76: aload_3
      77: aload_2
      78: ldc           #12                 // String
      80: invokevirtual #13                 // Method org/htmlcleaner/TagNode.getNamespaceURIOnPath:(Ljava/lang/String;)Ljava/lang/String;
      83: aload         5
      85: aload         8
      87: invokeinterface #14,  4           // InterfaceMethod org/w3c/dom/DOMImplementation.createDocument:(Ljava/lang/String;Ljava/lang/String;Lorg/w3c/dom/DocumentType;)Lorg/w3c/dom/Document;
      92: astore        4
      94: goto          126
      97: aload_1
      98: invokevirtual #15                 // Method javax/xml/parsers/DocumentBuilder.newDocument:()Lorg/w3c/dom/Document;
     101: astore        4
     103: aload         4
     105: aload_2
     106: invokevirtual #16                 // Method org/htmlcleaner/TagNode.getName:()Ljava/lang/String;
     109: invokeinterface #17,  2           // InterfaceMethod org/w3c/dom/Document.createElement:(Ljava/lang/String;)Lorg/w3c/dom/Element;
     114: astore        5
     116: aload         4
     118: aload         5
     120: invokeinterface #18,  2           // InterfaceMethod org/w3c/dom/Document.appendChild:(Lorg/w3c/dom/Node;)Lorg/w3c/dom/Node;
     125: pop
     126: aload_0
     127: getfield      #19                 // Field props:Lorg/htmlcleaner/CleanerProperties;
     130: invokevirtual #20                 // Method org/htmlcleaner/CleanerProperties.isAllowInvalidAttributeNames:()Z
     133: ifne          143
     136: aload_0
     137: getfield      #21                 // Field strictErrorChecking:Z
     140: ifne          151
     143: aload         4
     145: iconst_0
     146: invokeinterface #22,  2           // InterfaceMethod org/w3c/dom/Document.setStrictErrorChecking:(Z)V
     151: aload_2
     152: invokevirtual #23                 // Method org/htmlcleaner/TagNode.getAttributes:()Ljava/util/Map;
     155: astore        5
     157: aload         5
     159: invokeinterface #24,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
     164: invokeinterface #25,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
     169: astore        6
     171: aload         6
     173: invokeinterface #26,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     178: ifeq          327
     181: aload         6
     183: invokeinterface #27,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     188: checkcast     #28                 // class java/util/Map$Entry
     191: astore        7
     193: aload         7
     195: invokeinterface #29,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
     200: checkcast     #30                 // class java/lang/String
     203: astore        8
     205: aload         7
     207: invokeinterface #31,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
     212: checkcast     #30                 // class java/lang/String
     215: astore        9
     217: aload_0
     218: getfield      #19                 // Field props:Lorg/htmlcleaner/CleanerProperties;
     221: invokevirtual #20                 // Method org/htmlcleaner/CleanerProperties.isAllowInvalidAttributeNames:()Z
     224: ifne          241
     227: aload         8
     229: aload_0
     230: getfield      #19                 // Field props:Lorg/htmlcleaner/CleanerProperties;
     233: invokevirtual #32                 // Method org/htmlcleaner/CleanerProperties.getInvalidXmlAttributeNamePrefix:()Ljava/lang/String;
     236: invokestatic  #33                 // Method org/htmlcleaner/Utils.sanitizeXmlIdentifier:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
     239: astore        8
     241: aload         8
     243: ifnull        324
     246: aload         8
     248: invokestatic  #34                 // Method org/htmlcleaner/Utils.isValidXmlIdentifier:(Ljava/lang/String;)Z
     251: ifne          264
     254: aload_0
     255: getfield      #19                 // Field props:Lorg/htmlcleaner/CleanerProperties;
     258: invokevirtual #20                 // Method org/htmlcleaner/CleanerProperties.isAllowInvalidAttributeNames:()Z
     261: ifeq          324
     264: aload_0
     265: getfield      #35                 // Field escapeXml:Z
     268: ifeq          283
     271: aload         9
     273: aload_0
     274: getfield      #19                 // Field props:Lorg/htmlcleaner/CleanerProperties;
     277: iconst_1
     278: invokestatic  #36                 // Method org/htmlcleaner/Utils.escapeXml:(Ljava/lang/String;Lorg/htmlcleaner/CleanerProperties;Z)Ljava/lang/String;
     281: astore        9
     283: aload         4
     285: invokeinterface #37,  1           // InterfaceMethod org/w3c/dom/Document.getDocumentElement:()Lorg/w3c/dom/Element;
     290: aload         8
     292: aload         9
     294: invokeinterface #38,  3           // InterfaceMethod org/w3c/dom/Element.setAttribute:(Ljava/lang/String;Ljava/lang/String;)V
     299: aload         8
     301: ldc           #39                 // String id
     303: invokevirtual #40                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
     306: ifeq          324
     309: aload         4
     311: invokeinterface #37,  1           // InterfaceMethod org/w3c/dom/Document.getDocumentElement:()Lorg/w3c/dom/Element;
     316: aload         8
     318: iconst_1
     319: invokeinterface #41,  3           // InterfaceMethod org/w3c/dom/Element.setIdAttribute:(Ljava/lang/String;Z)V
     324: goto          171
     327: aload         4
     329: areturn

  public org.w3c.dom.Document createDOM(javax.xml.parsers.DocumentBuilder, org.htmlcleaner.TagNode) throws javax.xml.parsers.ParserConfigurationException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #42                 // Method createDocument:(Ljavax/xml/parsers/DocumentBuilder;Lorg/htmlcleaner/TagNode;)Lorg/w3c/dom/Document;
       6: astore_3
       7: aload_0
       8: aload_3
       9: aload_3
      10: invokeinterface #37,  1           // InterfaceMethod org/w3c/dom/Document.getDocumentElement:()Lorg/w3c/dom/Element;
      15: aload_2
      16: invokevirtual #43                 // Method org/htmlcleaner/TagNode.getAllChildren:()Ljava/util/List;
      19: invokevirtual #44                 // Method createSubnodes:(Lorg/w3c/dom/Document;Lorg/w3c/dom/Element;Ljava/util/List;)V
      22: aload_3
      23: areturn
}
