Compiled from "DefaultServletToAwsProxyResponseAdapter.java"
public class io.micronaut.function.aws.proxy.test.DefaultServletToAwsProxyResponseAdapter implements io.micronaut.function.aws.proxy.test.ServletToAwsProxyResponseAdapter {
  public io.micronaut.function.aws.proxy.test.DefaultServletToAwsProxyResponseAdapter();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public void handle(javax.servlet.http.HttpServletRequest, com.amazonaws.serverless.proxy.model.AwsProxyResponse, javax.servlet.http.HttpServletResponse) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_2
       2: aload_3
       3: invokespecial #2                  // Method populateHeaders:(Lcom/amazonaws/serverless/proxy/model/AwsProxyResponse;Ljavax/servlet/http/HttpServletResponse;)V
       6: aload_3
       7: aload_2
       8: invokevirtual #3                  // Method com/amazonaws/serverless/proxy/model/AwsProxyResponse.getStatusCode:()I
      11: invokeinterface #4,  2            // InterfaceMethod javax/servlet/http/HttpServletResponse.setStatus:(I)V
      16: aload_1
      17: invokeinterface #5,  1            // InterfaceMethod javax/servlet/http/HttpServletRequest.getMethod:()Ljava/lang/String;
      22: invokestatic  #6                  // Method io/micronaut/http/HttpMethod.parse:(Ljava/lang/String;)Lio/micronaut/http/HttpMethod;
      25: astore        4
      27: aload         4
      29: getstatic     #7                  // Field io/micronaut/http/HttpMethod.HEAD:Lio/micronaut/http/HttpMethod;
      32: if_acmpeq     130
      35: aload         4
      37: getstatic     #8                  // Field io/micronaut/http/HttpMethod.OPTIONS:Lio/micronaut/http/HttpMethod;
      40: if_acmpeq     130
      43: aload_0
      44: aload_2
      45: invokevirtual #9                  // Method parseBodyAsBytes:(Lcom/amazonaws/serverless/proxy/model/AwsProxyResponse;)[B
      48: astore        5
      50: aload         5
      52: ifnull        130
      55: aload_3
      56: aload         5
      58: arraylength
      59: invokeinterface #10,  2           // InterfaceMethod javax/servlet/http/HttpServletResponse.setContentLength:(I)V
      64: aload         5
      66: arraylength
      67: ifle          130
      70: aload_3
      71: invokeinterface #11,  1           // InterfaceMethod javax/servlet/http/HttpServletResponse.getOutputStream:()Ljavax/servlet/ServletOutputStream;
      76: astore        6
      78: aload         6
      80: aload         5
      82: invokevirtual #12                 // Method java/io/OutputStream.write:([B)V
      85: aload         6
      87: invokevirtual #13                 // Method java/io/OutputStream.flush:()V
      90: aload         6
      92: ifnull        130
      95: aload         6
      97: invokevirtual #14                 // Method java/io/OutputStream.close:()V
     100: goto          130
     103: astore        7
     105: aload         6
     107: ifnull        127
     110: aload         6
     112: invokevirtual #14                 // Method java/io/OutputStream.close:()V
     115: goto          127
     118: astore        8
     120: aload         7
     122: aload         8
     124: invokevirtual #16                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
     127: aload         7
     129: athrow
     130: return
    Exception table:
       from    to  target type
          78    90   103   Class java/lang/Throwable
         110   115   118   Class java/lang/Throwable

  private void populateHeaders(com.amazonaws.serverless.proxy.model.AwsProxyResponse, javax.servlet.http.HttpServletResponse);
    Code:
       0: aload_1
       1: invokevirtual #17                 // Method com/amazonaws/serverless/proxy/model/AwsProxyResponse.getMultiValueHeaders:()Lcom/amazonaws/serverless/proxy/model/Headers;
       4: astore_3
       5: aload_1
       6: invokevirtual #18                 // Method com/amazonaws/serverless/proxy/model/AwsProxyResponse.getHeaders:()Ljava/util/Map;
       9: astore        4
      11: aload_3
      12: aload_2
      13: invokedynamic #19,  0             // InvokeDynamic #0:accept:(Ljavax/servlet/http/HttpServletResponse;)Ljava/util/function/BiConsumer;
      18: invokevirtual #20                 // Method com/amazonaws/serverless/proxy/model/Headers.forEach:(Ljava/util/function/BiConsumer;)V
      21: aload         4
      23: ifnull        44
      26: aload         4
      28: aload_2
      29: dup
      30: invokestatic  #21                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
      33: pop
      34: invokedynamic #22,  0             // InvokeDynamic #1:accept:(Ljavax/servlet/http/HttpServletResponse;)Ljava/util/function/BiConsumer;
      39: invokeinterface #23,  2           // InterfaceMethod java/util/Map.forEach:(Ljava/util/function/BiConsumer;)V
      44: return

  protected byte[] parseBodyAsBytes(com.amazonaws.serverless.proxy.model.AwsProxyResponse);
    Code:
       0: aload_1
       1: invokevirtual #24                 // Method com/amazonaws/serverless/proxy/model/AwsProxyResponse.getBody:()Ljava/lang/String;
       4: astore_2
       5: aload_2
       6: ifnonnull     11
       9: aconst_null
      10: areturn
      11: aload_1
      12: invokevirtual #25                 // Method com/amazonaws/serverless/proxy/model/AwsProxyResponse.isBase64Encoded:()Z
      15: ifeq          28
      18: invokestatic  #26                 // Method java/util/Base64.getMimeDecoder:()Ljava/util/Base64$Decoder;
      21: aload_2
      22: invokevirtual #27                 // Method java/util/Base64$Decoder.decode:(Ljava/lang/String;)[B
      25: goto          36
      28: aload_2
      29: aload_0
      30: invokevirtual #28                 // Method getBodyCharset:()Ljava/nio/charset/Charset;
      33: invokevirtual #29                 // Method java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B
      36: areturn

  protected java.nio.charset.Charset getBodyCharset();
    Code:
       0: getstatic     #30                 // Field java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;
       3: areturn

  private static void lambda$populateHeaders$0(javax.servlet.http.HttpServletResponse, java.lang.String, java.util.List);
    Code:
       0: aload_2
       1: invokeinterface #31,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
       6: astore_3
       7: aload_3
       8: invokeinterface #32,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      13: ifeq          39
      16: aload_3
      17: invokeinterface #33,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      22: checkcast     #34                 // class java/lang/String
      25: astore        4
      27: aload_0
      28: aload_1
      29: aload         4
      31: invokeinterface #35,  3           // InterfaceMethod javax/servlet/http/HttpServletResponse.addHeader:(Ljava/lang/String;Ljava/lang/String;)V
      36: goto          7
      39: return
}
