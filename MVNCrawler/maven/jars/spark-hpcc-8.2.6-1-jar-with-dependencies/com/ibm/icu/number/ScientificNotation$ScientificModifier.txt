Compiled from "ScientificNotation.java"
class com.ibm.icu.number.ScientificNotation$ScientificModifier implements com.ibm.icu.impl.number.Modifier {
  final int exponent;

  final com.ibm.icu.number.ScientificNotation$ScientificHandler handler;

  com.ibm.icu.number.ScientificNotation$ScientificModifier(int, com.ibm.icu.number.ScientificNotation$ScientificHandler);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iload_1
       6: putfield      #2                  // Field exponent:I
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field handler:Lcom/ibm/icu/number/ScientificNotation$ScientificHandler;
      14: return

  public int apply(com.ibm.icu.impl.number.NumberStringBuilder, int, int);
    Code:
       0: aload_0
       1: getfield      #3                  // Field handler:Lcom/ibm/icu/number/ScientificNotation$ScientificHandler;
       4: aload_0
       5: getfield      #2                  // Field exponent:I
       8: aload_1
       9: iload_3
      10: invokestatic  #4                  // Method com/ibm/icu/number/ScientificNotation$ScientificHandler.access$100:(Lcom/ibm/icu/number/ScientificNotation$ScientificHandler;ILcom/ibm/icu/impl/number/NumberStringBuilder;I)I
      13: ireturn

  public int getPrefixLength();
    Code:
       0: iconst_0
       1: ireturn

  public int getCodePointCount();
    Code:
       0: new           #5                  // class java/lang/AssertionError
       3: dup
       4: invokespecial #6                  // Method java/lang/AssertionError."<init>":()V
       7: athrow

  public boolean isStrong();
    Code:
       0: iconst_1
       1: ireturn
}
