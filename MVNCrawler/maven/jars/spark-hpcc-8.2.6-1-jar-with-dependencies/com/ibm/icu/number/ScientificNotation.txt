Compiled from "ScientificNotation.java"
public class com.ibm.icu.number.ScientificNotation extends com.ibm.icu.number.Notation implements java.lang.Cloneable {
  int engineeringInterval;

  boolean requireMinInt;

  int minExponentDigits;

  com.ibm.icu.number.NumberFormatter$SignDisplay exponentSignDisplay;

  com.ibm.icu.number.ScientificNotation(int, boolean, int, com.ibm.icu.number.NumberFormatter$SignDisplay);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method com/ibm/icu/number/Notation."<init>":()V
       4: aload_0
       5: iload_1
       6: putfield      #2                  // Field engineeringInterval:I
       9: aload_0
      10: iload_2
      11: putfield      #3                  // Field requireMinInt:Z
      14: aload_0
      15: iload_3
      16: putfield      #4                  // Field minExponentDigits:I
      19: aload_0
      20: aload         4
      22: putfield      #5                  // Field exponentSignDisplay:Lcom/ibm/icu/number/NumberFormatter$SignDisplay;
      25: return

  public com.ibm.icu.number.ScientificNotation withMinExponentDigits(int);
    Code:
       0: iload_1
       1: iconst_1
       2: if_icmplt     27
       5: iload_1
       6: sipush        999
       9: if_icmpgt     27
      12: aload_0
      13: invokevirtual #7                  // Method clone:()Ljava/lang/Object;
      16: checkcast     #8                  // class com/ibm/icu/number/ScientificNotation
      19: astore_2
      20: aload_2
      21: iload_1
      22: putfield      #4                  // Field minExponentDigits:I
      25: aload_2
      26: areturn
      27: new           #9                  // class java/lang/IllegalArgumentException
      30: dup
      31: ldc           #10                 // String Integer digits must be between 1 and 999 (inclusive)
      33: invokespecial #11                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      36: athrow

  public com.ibm.icu.number.ScientificNotation withExponentSignDisplay(com.ibm.icu.number.NumberFormatter$SignDisplay);
    Code:
       0: aload_0
       1: invokevirtual #7                  // Method clone:()Ljava/lang/Object;
       4: checkcast     #8                  // class com/ibm/icu/number/ScientificNotation
       7: astore_2
       8: aload_2
       9: aload_1
      10: putfield      #5                  // Field exponentSignDisplay:Lcom/ibm/icu/number/NumberFormatter$SignDisplay;
      13: aload_2
      14: areturn

  public java.lang.Object clone();
    Code:
       0: aload_0
       1: invokespecial #12                 // Method java/lang/Object.clone:()Ljava/lang/Object;
       4: areturn
       5: astore_1
       6: new           #14                 // class java/lang/AssertionError
       9: dup
      10: aload_1
      11: invokespecial #15                 // Method java/lang/AssertionError."<init>":(Ljava/lang/Object;)V
      14: athrow
    Exception table:
       from    to  target type
           0     4     5   Class java/lang/CloneNotSupportedException

  com.ibm.icu.impl.number.MicroPropsGenerator withLocaleData(com.ibm.icu.text.DecimalFormatSymbols, boolean, com.ibm.icu.impl.number.MicroPropsGenerator);
    Code:
       0: new           #16                 // class com/ibm/icu/number/ScientificNotation$ScientificHandler
       3: dup
       4: aload_0
       5: aload_1
       6: iload_2
       7: aload_3
       8: aconst_null
       9: invokespecial #17                 // Method com/ibm/icu/number/ScientificNotation$ScientificHandler."<init>":(Lcom/ibm/icu/number/ScientificNotation;Lcom/ibm/icu/text/DecimalFormatSymbols;ZLcom/ibm/icu/impl/number/MicroPropsGenerator;Lcom/ibm/icu/number/ScientificNotation$1;)V
      12: areturn
}
