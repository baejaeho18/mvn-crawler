Compiled from "ScientificNotation.java"
class com.ibm.icu.number.ScientificNotation$ScientificHandler implements com.ibm.icu.impl.number.MicroPropsGenerator,com.ibm.icu.impl.number.MultiplierProducer,com.ibm.icu.impl.number.Modifier {
  final com.ibm.icu.number.ScientificNotation notation;

  final com.ibm.icu.text.DecimalFormatSymbols symbols;

  final com.ibm.icu.number.ScientificNotation$ScientificModifier[] precomputedMods;

  final com.ibm.icu.impl.number.MicroPropsGenerator parent;

  int exponent;

  static final boolean $assertionsDisabled;

  private com.ibm.icu.number.ScientificNotation$ScientificHandler(com.ibm.icu.number.ScientificNotation, com.ibm.icu.text.DecimalFormatSymbols, boolean, com.ibm.icu.impl.number.MicroPropsGenerator);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #4                  // Field notation:Lcom/ibm/icu/number/ScientificNotation;
       9: aload_0
      10: aload_2
      11: putfield      #5                  // Field symbols:Lcom/ibm/icu/text/DecimalFormatSymbols;
      14: aload_0
      15: aload         4
      17: putfield      #6                  // Field parent:Lcom/ibm/icu/impl/number/MicroPropsGenerator;
      20: iload_3
      21: ifeq          73
      24: aload_0
      25: bipush        25
      27: anewarray     #7                  // class com/ibm/icu/number/ScientificNotation$ScientificModifier
      30: putfield      #8                  // Field precomputedMods:[Lcom/ibm/icu/number/ScientificNotation$ScientificModifier;
      33: bipush        -12
      35: istore        5
      37: iload         5
      39: bipush        12
      41: if_icmpgt     70
      44: aload_0
      45: getfield      #8                  // Field precomputedMods:[Lcom/ibm/icu/number/ScientificNotation$ScientificModifier;
      48: iload         5
      50: bipush        12
      52: iadd
      53: new           #7                  // class com/ibm/icu/number/ScientificNotation$ScientificModifier
      56: dup
      57: iload         5
      59: aload_0
      60: invokespecial #9                  // Method com/ibm/icu/number/ScientificNotation$ScientificModifier."<init>":(ILcom/ibm/icu/number/ScientificNotation$ScientificHandler;)V
      63: aastore
      64: iinc          5, 1
      67: goto          37
      70: goto          78
      73: aload_0
      74: aconst_null
      75: putfield      #8                  // Field precomputedMods:[Lcom/ibm/icu/number/ScientificNotation$ScientificModifier;
      78: return

  public com.ibm.icu.impl.number.MicroProps processQuantity(com.ibm.icu.impl.number.DecimalQuantity);
    Code:
       0: aload_0
       1: getfield      #6                  // Field parent:Lcom/ibm/icu/impl/number/MicroPropsGenerator;
       4: aload_1
       5: invokeinterface #10,  2           // InterfaceMethod com/ibm/icu/impl/number/MicroPropsGenerator.processQuantity:(Lcom/ibm/icu/impl/number/DecimalQuantity;)Lcom/ibm/icu/impl/number/MicroProps;
      10: astore_2
      11: getstatic     #11                 // Field $assertionsDisabled:Z
      14: ifne          32
      17: aload_2
      18: getfield      #12                 // Field com/ibm/icu/impl/number/MicroProps.rounding:Lcom/ibm/icu/number/Rounder;
      21: ifnonnull     32
      24: new           #13                 // class java/lang/AssertionError
      27: dup
      28: invokespecial #14                 // Method java/lang/AssertionError."<init>":()V
      31: athrow
      32: aload_1
      33: invokeinterface #15,  1           // InterfaceMethod com/ibm/icu/impl/number/DecimalQuantity.isZero:()Z
      38: ifeq          97
      41: aload_0
      42: getfield      #4                  // Field notation:Lcom/ibm/icu/number/ScientificNotation;
      45: getfield      #16                 // Field com/ibm/icu/number/ScientificNotation.requireMinInt:Z
      48: ifeq          84
      51: aload_2
      52: getfield      #12                 // Field com/ibm/icu/impl/number/MicroProps.rounding:Lcom/ibm/icu/number/Rounder;
      55: instanceof    #17                 // class com/ibm/icu/number/Rounder$SignificantRounderImpl
      58: ifeq          84
      61: aload_2
      62: getfield      #12                 // Field com/ibm/icu/impl/number/MicroProps.rounding:Lcom/ibm/icu/number/Rounder;
      65: checkcast     #17                 // class com/ibm/icu/number/Rounder$SignificantRounderImpl
      68: aload_1
      69: aload_0
      70: getfield      #4                  // Field notation:Lcom/ibm/icu/number/ScientificNotation;
      73: getfield      #18                 // Field com/ibm/icu/number/ScientificNotation.engineeringInterval:I
      76: invokevirtual #19                 // Method com/ibm/icu/number/Rounder$SignificantRounderImpl.apply:(Lcom/ibm/icu/impl/number/DecimalQuantity;I)V
      79: iconst_0
      80: istore_3
      81: goto          108
      84: aload_2
      85: getfield      #12                 // Field com/ibm/icu/impl/number/MicroProps.rounding:Lcom/ibm/icu/number/Rounder;
      88: aload_1
      89: invokevirtual #20                 // Method com/ibm/icu/number/Rounder.apply:(Lcom/ibm/icu/impl/number/DecimalQuantity;)V
      92: iconst_0
      93: istore_3
      94: goto          108
      97: aload_2
      98: getfield      #12                 // Field com/ibm/icu/impl/number/MicroProps.rounding:Lcom/ibm/icu/number/Rounder;
     101: aload_1
     102: aload_0
     103: invokevirtual #21                 // Method com/ibm/icu/number/Rounder.chooseMultiplierAndApply:(Lcom/ibm/icu/impl/number/DecimalQuantity;Lcom/ibm/icu/impl/number/MultiplierProducer;)I
     106: ineg
     107: istore_3
     108: aload_0
     109: getfield      #8                  // Field precomputedMods:[Lcom/ibm/icu/number/ScientificNotation$ScientificModifier;
     112: ifnull        143
     115: iload_3
     116: bipush        -12
     118: if_icmplt     143
     121: iload_3
     122: bipush        12
     124: if_icmpgt     143
     127: aload_2
     128: aload_0
     129: getfield      #8                  // Field precomputedMods:[Lcom/ibm/icu/number/ScientificNotation$ScientificModifier;
     132: iload_3
     133: bipush        12
     135: iadd
     136: aaload
     137: putfield      #22                 // Field com/ibm/icu/impl/number/MicroProps.modInner:Lcom/ibm/icu/impl/number/Modifier;
     140: goto          176
     143: aload_0
     144: getfield      #8                  // Field precomputedMods:[Lcom/ibm/icu/number/ScientificNotation$ScientificModifier;
     147: ifnull        166
     150: aload_2
     151: new           #7                  // class com/ibm/icu/number/ScientificNotation$ScientificModifier
     154: dup
     155: iload_3
     156: aload_0
     157: invokespecial #9                  // Method com/ibm/icu/number/ScientificNotation$ScientificModifier."<init>":(ILcom/ibm/icu/number/ScientificNotation$ScientificHandler;)V
     160: putfield      #22                 // Field com/ibm/icu/impl/number/MicroProps.modInner:Lcom/ibm/icu/impl/number/Modifier;
     163: goto          176
     166: aload_0
     167: iload_3
     168: putfield      #23                 // Field exponent:I
     171: aload_2
     172: aload_0
     173: putfield      #22                 // Field com/ibm/icu/impl/number/MicroProps.modInner:Lcom/ibm/icu/impl/number/Modifier;
     176: aload_2
     177: invokestatic  #24                 // Method com/ibm/icu/number/Rounder.constructPassThrough:()Lcom/ibm/icu/number/Rounder;
     180: putfield      #12                 // Field com/ibm/icu/impl/number/MicroProps.rounding:Lcom/ibm/icu/number/Rounder;
     183: aload_2
     184: areturn

  public int getMultiplier(int);
    Code:
       0: aload_0
       1: getfield      #4                  // Field notation:Lcom/ibm/icu/number/ScientificNotation;
       4: getfield      #18                 // Field com/ibm/icu/number/ScientificNotation.engineeringInterval:I
       7: istore_2
       8: aload_0
       9: getfield      #4                  // Field notation:Lcom/ibm/icu/number/ScientificNotation;
      12: getfield      #16                 // Field com/ibm/icu/number/ScientificNotation.requireMinInt:Z
      15: ifeq          23
      18: iload_2
      19: istore_3
      20: goto          43
      23: iload_2
      24: iconst_1
      25: if_icmpgt     33
      28: iconst_1
      29: istore_3
      30: goto          43
      33: iload_1
      34: iload_2
      35: irem
      36: iload_2
      37: iadd
      38: iload_2
      39: irem
      40: iconst_1
      41: iadd
      42: istore_3
      43: iload_3
      44: iload_1
      45: isub
      46: iconst_1
      47: isub
      48: ireturn

  public int getPrefixLength();
    Code:
       0: iconst_0
       1: ireturn

  public int getCodePointCount();
    Code:
       0: new           #13                 // class java/lang/AssertionError
       3: dup
       4: invokespecial #14                 // Method java/lang/AssertionError."<init>":()V
       7: athrow

  public boolean isStrong();
    Code:
       0: iconst_1
       1: ireturn

  public int apply(com.ibm.icu.impl.number.NumberStringBuilder, int, int);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #23                 // Field exponent:I
       5: aload_1
       6: iload_3
       7: invokespecial #1                  // Method doApply:(ILcom/ibm/icu/impl/number/NumberStringBuilder;I)I
      10: ireturn

  private int doApply(int, com.ibm.icu.impl.number.NumberStringBuilder, int);
    Code:
       0: iload_3
       1: istore        4
       3: iload         4
       5: aload_2
       6: iload         4
       8: aload_0
       9: getfield      #5                  // Field symbols:Lcom/ibm/icu/text/DecimalFormatSymbols;
      12: invokevirtual #25                 // Method com/ibm/icu/text/DecimalFormatSymbols.getExponentSeparator:()Ljava/lang/String;
      15: getstatic     #26                 // Field com/ibm/icu/text/NumberFormat$Field.EXPONENT_SYMBOL:Lcom/ibm/icu/text/NumberFormat$Field;
      18: invokevirtual #27                 // Method com/ibm/icu/impl/number/NumberStringBuilder.insert:(ILjava/lang/CharSequence;Lcom/ibm/icu/text/NumberFormat$Field;)I
      21: iadd
      22: istore        4
      24: iload_1
      25: ifge          65
      28: aload_0
      29: getfield      #4                  // Field notation:Lcom/ibm/icu/number/ScientificNotation;
      32: getfield      #28                 // Field com/ibm/icu/number/ScientificNotation.exponentSignDisplay:Lcom/ibm/icu/number/NumberFormatter$SignDisplay;
      35: getstatic     #29                 // Field com/ibm/icu/number/NumberFormatter$SignDisplay.NEVER:Lcom/ibm/icu/number/NumberFormatter$SignDisplay;
      38: if_acmpeq     65
      41: iload         4
      43: aload_2
      44: iload         4
      46: aload_0
      47: getfield      #5                  // Field symbols:Lcom/ibm/icu/text/DecimalFormatSymbols;
      50: invokevirtual #30                 // Method com/ibm/icu/text/DecimalFormatSymbols.getMinusSignString:()Ljava/lang/String;
      53: getstatic     #31                 // Field com/ibm/icu/text/NumberFormat$Field.EXPONENT_SIGN:Lcom/ibm/icu/text/NumberFormat$Field;
      56: invokevirtual #27                 // Method com/ibm/icu/impl/number/NumberStringBuilder.insert:(ILjava/lang/CharSequence;Lcom/ibm/icu/text/NumberFormat$Field;)I
      59: iadd
      60: istore        4
      62: goto          103
      65: iload_1
      66: iflt          103
      69: aload_0
      70: getfield      #4                  // Field notation:Lcom/ibm/icu/number/ScientificNotation;
      73: getfield      #28                 // Field com/ibm/icu/number/ScientificNotation.exponentSignDisplay:Lcom/ibm/icu/number/NumberFormatter$SignDisplay;
      76: getstatic     #32                 // Field com/ibm/icu/number/NumberFormatter$SignDisplay.ALWAYS:Lcom/ibm/icu/number/NumberFormatter$SignDisplay;
      79: if_acmpne     103
      82: iload         4
      84: aload_2
      85: iload         4
      87: aload_0
      88: getfield      #5                  // Field symbols:Lcom/ibm/icu/text/DecimalFormatSymbols;
      91: invokevirtual #33                 // Method com/ibm/icu/text/DecimalFormatSymbols.getPlusSignString:()Ljava/lang/String;
      94: getstatic     #31                 // Field com/ibm/icu/text/NumberFormat$Field.EXPONENT_SIGN:Lcom/ibm/icu/text/NumberFormat$Field;
      97: invokevirtual #27                 // Method com/ibm/icu/impl/number/NumberStringBuilder.insert:(ILjava/lang/CharSequence;Lcom/ibm/icu/text/NumberFormat$Field;)I
     100: iadd
     101: istore        4
     103: iload_1
     104: invokestatic  #34                 // Method java/lang/Math.abs:(I)I
     107: istore        5
     109: iconst_0
     110: istore        6
     112: iload         6
     114: aload_0
     115: getfield      #4                  // Field notation:Lcom/ibm/icu/number/ScientificNotation;
     118: getfield      #35                 // Field com/ibm/icu/number/ScientificNotation.minExponentDigits:I
     121: if_icmplt     129
     124: iload         5
     126: ifle          180
     129: iload         5
     131: bipush        10
     133: irem
     134: istore        7
     136: aload_0
     137: getfield      #5                  // Field symbols:Lcom/ibm/icu/text/DecimalFormatSymbols;
     140: invokevirtual #36                 // Method com/ibm/icu/text/DecimalFormatSymbols.getDigitStringsLocal:()[Ljava/lang/String;
     143: iload         7
     145: aaload
     146: astore        8
     148: iload         4
     150: aload_2
     151: iload         4
     153: iload         6
     155: isub
     156: aload         8
     158: getstatic     #37                 // Field com/ibm/icu/text/NumberFormat$Field.EXPONENT:Lcom/ibm/icu/text/NumberFormat$Field;
     161: invokevirtual #27                 // Method com/ibm/icu/impl/number/NumberStringBuilder.insert:(ILjava/lang/CharSequence;Lcom/ibm/icu/text/NumberFormat$Field;)I
     164: iadd
     165: istore        4
     167: iinc          6, 1
     170: iload         5
     172: bipush        10
     174: idiv
     175: istore        5
     177: goto          112
     180: iload         4
     182: iload_3
     183: isub
     184: ireturn

  com.ibm.icu.number.ScientificNotation$ScientificHandler(com.ibm.icu.number.ScientificNotation, com.ibm.icu.text.DecimalFormatSymbols, boolean, com.ibm.icu.impl.number.MicroPropsGenerator, com.ibm.icu.number.ScientificNotation$1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iload_3
       4: aload         4
       6: invokespecial #2                  // Method "<init>":(Lcom/ibm/icu/number/ScientificNotation;Lcom/ibm/icu/text/DecimalFormatSymbols;ZLcom/ibm/icu/impl/number/MicroPropsGenerator;)V
       9: return

  static int access$100(com.ibm.icu.number.ScientificNotation$ScientificHandler, int, com.ibm.icu.impl.number.NumberStringBuilder, int);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: iload_3
       4: invokespecial #1                  // Method doApply:(ILcom/ibm/icu/impl/number/NumberStringBuilder;I)I
       7: ireturn

  static {};
    Code:
       0: ldc           #38                 // class com/ibm/icu/number/ScientificNotation
       2: invokevirtual #39                 // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #11                 // Field $assertionsDisabled:Z
      16: return
}
