Compiled from "Rounder.java"
public abstract class com.ibm.icu.number.Rounder implements java.lang.Cloneable {
  java.math.MathContext mathContext;

  static final com.ibm.icu.number.Rounder$InfiniteRounderImpl NONE;

  static final com.ibm.icu.number.Rounder$FractionRounderImpl FIXED_FRAC_0;

  static final com.ibm.icu.number.Rounder$FractionRounderImpl FIXED_FRAC_2;

  static final com.ibm.icu.number.Rounder$FractionRounderImpl MAX_FRAC_6;

  static final com.ibm.icu.number.Rounder$SignificantRounderImpl FIXED_SIG_2;

  static final com.ibm.icu.number.Rounder$SignificantRounderImpl FIXED_SIG_3;

  static final com.ibm.icu.number.Rounder$SignificantRounderImpl RANGE_SIG_2_3;

  static final com.ibm.icu.number.Rounder$FracSigRounderImpl COMPACT_STRATEGY;

  static final com.ibm.icu.number.Rounder$IncrementRounderImpl NICKEL;

  static final com.ibm.icu.number.Rounder$CurrencyRounderImpl MONETARY_STANDARD;

  static final com.ibm.icu.number.Rounder$CurrencyRounderImpl MONETARY_CASH;

  static final com.ibm.icu.number.Rounder$PassThroughRounderImpl PASS_THROUGH;

  static final boolean $assertionsDisabled;

  com.ibm.icu.number.Rounder();
    Code:
       0: aload_0
       1: invokespecial #5                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: getstatic     #6                  // Field com/ibm/icu/impl/number/RoundingUtils.DEFAULT_ROUNDING_MODE:Ljava/math/RoundingMode;
       8: invokestatic  #7                  // Method com/ibm/icu/impl/number/RoundingUtils.mathContextUnlimited:(Ljava/math/RoundingMode;)Ljava/math/MathContext;
      11: putfield      #8                  // Field mathContext:Ljava/math/MathContext;
      14: return

  public static com.ibm.icu.number.Rounder unlimited();
    Code:
       0: invokestatic  #9                  // Method constructInfinite:()Lcom/ibm/icu/number/Rounder;
       3: areturn

  public static com.ibm.icu.number.FractionRounder integer();
    Code:
       0: iconst_0
       1: iconst_0
       2: invokestatic  #10                 // Method constructFraction:(II)Lcom/ibm/icu/number/FractionRounder;
       5: areturn

  public static com.ibm.icu.number.FractionRounder fixedFraction(int);
    Code:
       0: iload_0
       1: iflt          17
       4: iload_0
       5: sipush        999
       8: if_icmpgt     17
      11: iload_0
      12: iload_0
      13: invokestatic  #10                 // Method constructFraction:(II)Lcom/ibm/icu/number/FractionRounder;
      16: areturn
      17: new           #12                 // class java/lang/IllegalArgumentException
      20: dup
      21: ldc           #13                 // String Fraction length must be between 0 and 999 (inclusive)
      23: invokespecial #14                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      26: athrow

  public static com.ibm.icu.number.FractionRounder minFraction(int);
    Code:
       0: iload_0
       1: iflt          17
       4: iload_0
       5: sipush        999
       8: if_icmpgt     17
      11: iload_0
      12: iconst_m1
      13: invokestatic  #10                 // Method constructFraction:(II)Lcom/ibm/icu/number/FractionRounder;
      16: areturn
      17: new           #12                 // class java/lang/IllegalArgumentException
      20: dup
      21: ldc           #13                 // String Fraction length must be between 0 and 999 (inclusive)
      23: invokespecial #14                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      26: athrow

  public static com.ibm.icu.number.FractionRounder maxFraction(int);
    Code:
       0: iload_0
       1: iflt          17
       4: iload_0
       5: sipush        999
       8: if_icmpgt     17
      11: iconst_0
      12: iload_0
      13: invokestatic  #10                 // Method constructFraction:(II)Lcom/ibm/icu/number/FractionRounder;
      16: areturn
      17: new           #12                 // class java/lang/IllegalArgumentException
      20: dup
      21: ldc           #13                 // String Fraction length must be between 0 and 999 (inclusive)
      23: invokespecial #14                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      26: athrow

  public static com.ibm.icu.number.FractionRounder minMaxFraction(int, int);
    Code:
       0: iload_0
       1: iflt          22
       4: iload_1
       5: sipush        999
       8: if_icmpgt     22
      11: iload_0
      12: iload_1
      13: if_icmpgt     22
      16: iload_0
      17: iload_1
      18: invokestatic  #10                 // Method constructFraction:(II)Lcom/ibm/icu/number/FractionRounder;
      21: areturn
      22: new           #12                 // class java/lang/IllegalArgumentException
      25: dup
      26: ldc           #13                 // String Fraction length must be between 0 and 999 (inclusive)
      28: invokespecial #14                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      31: athrow

  public static com.ibm.icu.number.Rounder fixedDigits(int);
    Code:
       0: iload_0
       1: iconst_1
       2: if_icmplt     18
       5: iload_0
       6: sipush        999
       9: if_icmpgt     18
      12: iload_0
      13: iload_0
      14: invokestatic  #15                 // Method constructSignificant:(II)Lcom/ibm/icu/number/Rounder;
      17: areturn
      18: new           #12                 // class java/lang/IllegalArgumentException
      21: dup
      22: ldc           #16                 // String Significant digits must be between 1 and 999 (inclusive)
      24: invokespecial #14                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      27: athrow

  public static com.ibm.icu.number.Rounder minDigits(int);
    Code:
       0: iload_0
       1: iconst_1
       2: if_icmplt     18
       5: iload_0
       6: sipush        999
       9: if_icmpgt     18
      12: iload_0
      13: iconst_m1
      14: invokestatic  #15                 // Method constructSignificant:(II)Lcom/ibm/icu/number/Rounder;
      17: areturn
      18: new           #12                 // class java/lang/IllegalArgumentException
      21: dup
      22: ldc           #16                 // String Significant digits must be between 1 and 999 (inclusive)
      24: invokespecial #14                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      27: athrow

  public static com.ibm.icu.number.Rounder maxDigits(int);
    Code:
       0: iload_0
       1: iconst_1
       2: if_icmplt     18
       5: iload_0
       6: sipush        999
       9: if_icmpgt     18
      12: iconst_0
      13: iload_0
      14: invokestatic  #15                 // Method constructSignificant:(II)Lcom/ibm/icu/number/Rounder;
      17: areturn
      18: new           #12                 // class java/lang/IllegalArgumentException
      21: dup
      22: ldc           #16                 // String Significant digits must be between 1 and 999 (inclusive)
      24: invokespecial #14                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      27: athrow

  public static com.ibm.icu.number.Rounder minMaxDigits(int, int);
    Code:
       0: iload_0
       1: iconst_1
       2: if_icmplt     23
       5: iload_1
       6: sipush        999
       9: if_icmpgt     23
      12: iload_0
      13: iload_1
      14: if_icmpgt     23
      17: iload_0
      18: iload_1
      19: invokestatic  #15                 // Method constructSignificant:(II)Lcom/ibm/icu/number/Rounder;
      22: areturn
      23: new           #12                 // class java/lang/IllegalArgumentException
      26: dup
      27: ldc           #16                 // String Significant digits must be between 1 and 999 (inclusive)
      29: invokespecial #14                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      32: athrow

  public static com.ibm.icu.number.Rounder increment(java.math.BigDecimal);
    Code:
       0: aload_0
       1: ifnull        19
       4: aload_0
       5: getstatic     #17                 // Field java/math/BigDecimal.ZERO:Ljava/math/BigDecimal;
       8: invokevirtual #18                 // Method java/math/BigDecimal.compareTo:(Ljava/math/BigDecimal;)I
      11: ifle          19
      14: aload_0
      15: invokestatic  #19                 // Method constructIncrement:(Ljava/math/BigDecimal;)Lcom/ibm/icu/number/Rounder;
      18: areturn
      19: new           #12                 // class java/lang/IllegalArgumentException
      22: dup
      23: ldc           #20                 // String Rounding increment must be positive and non-null
      25: invokespecial #14                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      28: athrow

  public static com.ibm.icu.number.CurrencyRounder currency(com.ibm.icu.util.Currency$CurrencyUsage);
    Code:
       0: aload_0
       1: ifnull        9
       4: aload_0
       5: invokestatic  #21                 // Method constructCurrency:(Lcom/ibm/icu/util/Currency$CurrencyUsage;)Lcom/ibm/icu/number/CurrencyRounder;
       8: areturn
       9: new           #12                 // class java/lang/IllegalArgumentException
      12: dup
      13: ldc           #22                 // String CurrencyUsage must be non-null
      15: invokespecial #14                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      18: athrow

  public com.ibm.icu.number.Rounder withMode(java.math.RoundingMode);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #7                  // Method com/ibm/icu/impl/number/RoundingUtils.mathContextUnlimited:(Ljava/math/RoundingMode;)Ljava/math/MathContext;
       5: invokevirtual #23                 // Method withMode:(Ljava/math/MathContext;)Lcom/ibm/icu/number/Rounder;
       8: areturn

  public com.ibm.icu.number.Rounder withMode(java.math.MathContext);
    Code:
       0: aload_0
       1: getfield      #8                  // Field mathContext:Ljava/math/MathContext;
       4: aload_1
       5: invokevirtual #24                 // Method java/math/MathContext.equals:(Ljava/lang/Object;)Z
       8: ifeq          13
      11: aload_0
      12: areturn
      13: aload_0
      14: invokevirtual #25                 // Method clone:()Ljava/lang/Object;
      17: checkcast     #26                 // class com/ibm/icu/number/Rounder
      20: astore_2
      21: aload_2
      22: aload_1
      23: putfield      #8                  // Field mathContext:Ljava/math/MathContext;
      26: aload_2
      27: areturn

  public java.lang.Object clone();
    Code:
       0: aload_0
       1: invokespecial #27                 // Method java/lang/Object.clone:()Ljava/lang/Object;
       4: areturn
       5: astore_1
       6: new           #29                 // class java/lang/AssertionError
       9: dup
      10: aload_1
      11: invokespecial #30                 // Method java/lang/AssertionError."<init>":(Ljava/lang/Object;)V
      14: athrow
    Exception table:
       from    to  target type
           0     4     5   Class java/lang/CloneNotSupportedException

  public abstract void apply(com.ibm.icu.impl.number.DecimalQuantity);

  static com.ibm.icu.number.Rounder constructInfinite();
    Code:
       0: getstatic     #31                 // Field NONE:Lcom/ibm/icu/number/Rounder$InfiniteRounderImpl;
       3: areturn

  static com.ibm.icu.number.FractionRounder constructFraction(int, int);
    Code:
       0: iload_0
       1: ifne          12
       4: iload_1
       5: ifne          12
       8: getstatic     #32                 // Field FIXED_FRAC_0:Lcom/ibm/icu/number/Rounder$FractionRounderImpl;
      11: areturn
      12: iload_0
      13: iconst_2
      14: if_icmpne     26
      17: iload_1
      18: iconst_2
      19: if_icmpne     26
      22: getstatic     #33                 // Field FIXED_FRAC_2:Lcom/ibm/icu/number/Rounder$FractionRounderImpl;
      25: areturn
      26: iload_0
      27: ifne          40
      30: iload_1
      31: bipush        6
      33: if_icmpne     40
      36: getstatic     #34                 // Field MAX_FRAC_6:Lcom/ibm/icu/number/Rounder$FractionRounderImpl;
      39: areturn
      40: new           #35                 // class com/ibm/icu/number/Rounder$FractionRounderImpl
      43: dup
      44: iload_0
      45: iload_1
      46: invokespecial #36                 // Method com/ibm/icu/number/Rounder$FractionRounderImpl."<init>":(II)V
      49: areturn

  static com.ibm.icu.number.Rounder constructSignificant(int, int);
    Code:
       0: iload_0
       1: iconst_2
       2: if_icmpne     14
       5: iload_1
       6: iconst_2
       7: if_icmpne     14
      10: getstatic     #37                 // Field FIXED_SIG_2:Lcom/ibm/icu/number/Rounder$SignificantRounderImpl;
      13: areturn
      14: iload_0
      15: iconst_3
      16: if_icmpne     28
      19: iload_1
      20: iconst_3
      21: if_icmpne     28
      24: getstatic     #38                 // Field FIXED_SIG_3:Lcom/ibm/icu/number/Rounder$SignificantRounderImpl;
      27: areturn
      28: iload_0
      29: iconst_2
      30: if_icmpne     42
      33: iload_1
      34: iconst_3
      35: if_icmpne     42
      38: getstatic     #39                 // Field RANGE_SIG_2_3:Lcom/ibm/icu/number/Rounder$SignificantRounderImpl;
      41: areturn
      42: new           #40                 // class com/ibm/icu/number/Rounder$SignificantRounderImpl
      45: dup
      46: iload_0
      47: iload_1
      48: invokespecial #41                 // Method com/ibm/icu/number/Rounder$SignificantRounderImpl."<init>":(II)V
      51: areturn

  static com.ibm.icu.number.Rounder constructFractionSignificant(com.ibm.icu.number.FractionRounder, int, int);
    Code:
       0: getstatic     #42                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: instanceof    #35                 // class com/ibm/icu/number/Rounder$FractionRounderImpl
      10: ifne          21
      13: new           #29                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #43                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: checkcast     #35                 // class com/ibm/icu/number/Rounder$FractionRounderImpl
      25: astore_3
      26: aload_3
      27: getfield      #44                 // Field com/ibm/icu/number/Rounder$FractionRounderImpl.minFrac:I
      30: ifne          49
      33: aload_3
      34: getfield      #45                 // Field com/ibm/icu/number/Rounder$FractionRounderImpl.maxFrac:I
      37: ifne          49
      40: iload_1
      41: iconst_2
      42: if_icmpne     49
      45: getstatic     #46                 // Field COMPACT_STRATEGY:Lcom/ibm/icu/number/Rounder$FracSigRounderImpl;
      48: areturn
      49: new           #47                 // class com/ibm/icu/number/Rounder$FracSigRounderImpl
      52: dup
      53: aload_3
      54: getfield      #44                 // Field com/ibm/icu/number/Rounder$FractionRounderImpl.minFrac:I
      57: aload_3
      58: getfield      #45                 // Field com/ibm/icu/number/Rounder$FractionRounderImpl.maxFrac:I
      61: iload_1
      62: iload_2
      63: invokespecial #48                 // Method com/ibm/icu/number/Rounder$FracSigRounderImpl."<init>":(IIII)V
      66: areturn

  static com.ibm.icu.number.Rounder constructIncrement(java.math.BigDecimal);
    Code:
       0: aload_0
       1: getstatic     #49                 // Field NICKEL:Lcom/ibm/icu/number/Rounder$IncrementRounderImpl;
       4: getfield      #50                 // Field com/ibm/icu/number/Rounder$IncrementRounderImpl.increment:Ljava/math/BigDecimal;
       7: invokevirtual #51                 // Method java/math/BigDecimal.equals:(Ljava/lang/Object;)Z
      10: ifeq          17
      13: getstatic     #49                 // Field NICKEL:Lcom/ibm/icu/number/Rounder$IncrementRounderImpl;
      16: areturn
      17: new           #52                 // class com/ibm/icu/number/Rounder$IncrementRounderImpl
      20: dup
      21: aload_0
      22: invokespecial #53                 // Method com/ibm/icu/number/Rounder$IncrementRounderImpl."<init>":(Ljava/math/BigDecimal;)V
      25: areturn

  static com.ibm.icu.number.CurrencyRounder constructCurrency(com.ibm.icu.util.Currency$CurrencyUsage);
    Code:
       0: aload_0
       1: getstatic     #54                 // Field com/ibm/icu/util/Currency$CurrencyUsage.STANDARD:Lcom/ibm/icu/util/Currency$CurrencyUsage;
       4: if_acmpne     11
       7: getstatic     #55                 // Field MONETARY_STANDARD:Lcom/ibm/icu/number/Rounder$CurrencyRounderImpl;
      10: areturn
      11: aload_0
      12: getstatic     #56                 // Field com/ibm/icu/util/Currency$CurrencyUsage.CASH:Lcom/ibm/icu/util/Currency$CurrencyUsage;
      15: if_acmpne     22
      18: getstatic     #57                 // Field MONETARY_CASH:Lcom/ibm/icu/number/Rounder$CurrencyRounderImpl;
      21: areturn
      22: new           #29                 // class java/lang/AssertionError
      25: dup
      26: invokespecial #43                 // Method java/lang/AssertionError."<init>":()V
      29: athrow

  static com.ibm.icu.number.Rounder constructFromCurrency(com.ibm.icu.number.CurrencyRounder, com.ibm.icu.util.Currency);
    Code:
       0: getstatic     #42                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: instanceof    #58                 // class com/ibm/icu/number/Rounder$CurrencyRounderImpl
      10: ifne          21
      13: new           #29                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #43                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: checkcast     #58                 // class com/ibm/icu/number/Rounder$CurrencyRounderImpl
      25: astore_2
      26: aload_1
      27: aload_2
      28: getfield      #59                 // Field com/ibm/icu/number/Rounder$CurrencyRounderImpl.usage:Lcom/ibm/icu/util/Currency$CurrencyUsage;
      31: invokevirtual #60                 // Method com/ibm/icu/util/Currency.getRoundingIncrement:(Lcom/ibm/icu/util/Currency$CurrencyUsage;)D
      34: dstore_3
      35: dload_3
      36: dconst_0
      37: dcmpl
      38: ifeq          53
      41: dload_3
      42: invokestatic  #61                 // Method java/math/BigDecimal.valueOf:(D)Ljava/math/BigDecimal;
      45: astore        5
      47: aload         5
      49: invokestatic  #19                 // Method constructIncrement:(Ljava/math/BigDecimal;)Lcom/ibm/icu/number/Rounder;
      52: areturn
      53: aload_1
      54: aload_2
      55: getfield      #59                 // Field com/ibm/icu/number/Rounder$CurrencyRounderImpl.usage:Lcom/ibm/icu/util/Currency$CurrencyUsage;
      58: invokevirtual #62                 // Method com/ibm/icu/util/Currency.getDefaultFractionDigits:(Lcom/ibm/icu/util/Currency$CurrencyUsage;)I
      61: istore        5
      63: iload         5
      65: iload         5
      67: invokestatic  #10                 // Method constructFraction:(II)Lcom/ibm/icu/number/FractionRounder;
      70: areturn

  static com.ibm.icu.number.Rounder constructPassThrough();
    Code:
       0: getstatic     #63                 // Field PASS_THROUGH:Lcom/ibm/icu/number/Rounder$PassThroughRounderImpl;
       3: areturn

  com.ibm.icu.number.Rounder withLocaleData(com.ibm.icu.util.Currency);
    Code:
       0: aload_0
       1: instanceof    #64                 // class com/ibm/icu/number/CurrencyRounder
       4: ifeq          16
       7: aload_0
       8: checkcast     #64                 // class com/ibm/icu/number/CurrencyRounder
      11: aload_1
      12: invokevirtual #65                 // Method com/ibm/icu/number/CurrencyRounder.withCurrency:(Lcom/ibm/icu/util/Currency;)Lcom/ibm/icu/number/Rounder;
      15: areturn
      16: aload_0
      17: areturn

  int chooseMultiplierAndApply(com.ibm.icu.impl.number.DecimalQuantity, com.ibm.icu.impl.number.MultiplierProducer);
    Code:
       0: getstatic     #42                 // Field $assertionsDisabled:Z
       3: ifne          23
       6: aload_1
       7: invokeinterface #66,  1           // InterfaceMethod com/ibm/icu/impl/number/DecimalQuantity.isZero:()Z
      12: ifeq          23
      15: new           #29                 // class java/lang/AssertionError
      18: dup
      19: invokespecial #43                 // Method java/lang/AssertionError."<init>":()V
      22: athrow
      23: aload_1
      24: invokeinterface #67,  1           // InterfaceMethod com/ibm/icu/impl/number/DecimalQuantity.getMagnitude:()I
      29: istore_3
      30: aload_2
      31: iload_3
      32: invokeinterface #68,  2           // InterfaceMethod com/ibm/icu/impl/number/MultiplierProducer.getMultiplier:(I)I
      37: istore        4
      39: aload_1
      40: iload         4
      42: invokeinterface #69,  2           // InterfaceMethod com/ibm/icu/impl/number/DecimalQuantity.adjustMagnitude:(I)V
      47: aload_0
      48: aload_1
      49: invokevirtual #70                 // Method apply:(Lcom/ibm/icu/impl/number/DecimalQuantity;)V
      52: aload_1
      53: invokeinterface #66,  1           // InterfaceMethod com/ibm/icu/impl/number/DecimalQuantity.isZero:()Z
      58: ifeq          64
      61: iload         4
      63: ireturn
      64: aload_1
      65: invokeinterface #67,  1           // InterfaceMethod com/ibm/icu/impl/number/DecimalQuantity.getMagnitude:()I
      70: iload_3
      71: iload         4
      73: iadd
      74: if_icmpne     80
      77: iload         4
      79: ireturn
      80: aload_2
      81: iload_3
      82: iconst_1
      83: iadd
      84: invokeinterface #68,  2           // InterfaceMethod com/ibm/icu/impl/number/MultiplierProducer.getMultiplier:(I)I
      89: istore        5
      91: iload         4
      93: iload         5
      95: if_icmpne     101
      98: iload         4
     100: ireturn
     101: aload_1
     102: iload         5
     104: iload         4
     106: isub
     107: invokeinterface #69,  2           // InterfaceMethod com/ibm/icu/impl/number/DecimalQuantity.adjustMagnitude:(I)V
     112: aload_0
     113: aload_1
     114: invokevirtual #70                 // Method apply:(Lcom/ibm/icu/impl/number/DecimalQuantity;)V
     117: iload         5
     119: ireturn

  private static int getRoundingMagnitudeFraction(int);
    Code:
       0: iload_0
       1: iconst_m1
       2: if_icmpne     8
       5: ldc           #72                 // int -2147483648
       7: ireturn
       8: iload_0
       9: ineg
      10: ireturn

  private static int getRoundingMagnitudeSignificant(com.ibm.icu.impl.number.DecimalQuantity, int);
    Code:
       0: iload_1
       1: iconst_m1
       2: if_icmpne     8
       5: ldc           #72                 // int -2147483648
       7: ireturn
       8: aload_0
       9: invokeinterface #66,  1           // InterfaceMethod com/ibm/icu/impl/number/DecimalQuantity.isZero:()Z
      14: ifeq          21
      17: iconst_0
      18: goto          27
      21: aload_0
      22: invokeinterface #67,  1           // InterfaceMethod com/ibm/icu/impl/number/DecimalQuantity.getMagnitude:()I
      27: istore_2
      28: iload_2
      29: iload_1
      30: isub
      31: iconst_1
      32: iadd
      33: ireturn

  private static int getDisplayMagnitudeFraction(int);
    Code:
       0: iload_0
       1: ifne          7
       4: ldc           #73                 // int 2147483647
       6: ireturn
       7: iload_0
       8: ineg
       9: ireturn

  private static int getDisplayMagnitudeSignificant(com.ibm.icu.impl.number.DecimalQuantity, int);
    Code:
       0: aload_0
       1: invokeinterface #66,  1           // InterfaceMethod com/ibm/icu/impl/number/DecimalQuantity.isZero:()Z
       6: ifeq          13
       9: iconst_0
      10: goto          19
      13: aload_0
      14: invokeinterface #67,  1           // InterfaceMethod com/ibm/icu/impl/number/DecimalQuantity.getMagnitude:()I
      19: istore_2
      20: iload_2
      21: iload_1
      22: isub
      23: iconst_1
      24: iadd
      25: ireturn

  static int access$000(int);
    Code:
       0: iload_0
       1: invokestatic  #4                  // Method getRoundingMagnitudeFraction:(I)I
       4: ireturn

  static int access$100(int);
    Code:
       0: iload_0
       1: invokestatic  #3                  // Method getDisplayMagnitudeFraction:(I)I
       4: ireturn

  static int access$200(com.ibm.icu.impl.number.DecimalQuantity, int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #2                  // Method getRoundingMagnitudeSignificant:(Lcom/ibm/icu/impl/number/DecimalQuantity;I)I
       5: ireturn

  static int access$300(com.ibm.icu.impl.number.DecimalQuantity, int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #1                  // Method getDisplayMagnitudeSignificant:(Lcom/ibm/icu/impl/number/DecimalQuantity;I)I
       5: ireturn

  static {};
    Code:
       0: ldc           #26                 // class com/ibm/icu/number/Rounder
       2: invokevirtual #74                 // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #42                 // Field $assertionsDisabled:Z
      16: new           #75                 // class com/ibm/icu/number/Rounder$InfiniteRounderImpl
      19: dup
      20: invokespecial #76                 // Method com/ibm/icu/number/Rounder$InfiniteRounderImpl."<init>":()V
      23: putstatic     #31                 // Field NONE:Lcom/ibm/icu/number/Rounder$InfiniteRounderImpl;
      26: new           #35                 // class com/ibm/icu/number/Rounder$FractionRounderImpl
      29: dup
      30: iconst_0
      31: iconst_0
      32: invokespecial #36                 // Method com/ibm/icu/number/Rounder$FractionRounderImpl."<init>":(II)V
      35: putstatic     #32                 // Field FIXED_FRAC_0:Lcom/ibm/icu/number/Rounder$FractionRounderImpl;
      38: new           #35                 // class com/ibm/icu/number/Rounder$FractionRounderImpl
      41: dup
      42: iconst_2
      43: iconst_2
      44: invokespecial #36                 // Method com/ibm/icu/number/Rounder$FractionRounderImpl."<init>":(II)V
      47: putstatic     #33                 // Field FIXED_FRAC_2:Lcom/ibm/icu/number/Rounder$FractionRounderImpl;
      50: new           #35                 // class com/ibm/icu/number/Rounder$FractionRounderImpl
      53: dup
      54: iconst_0
      55: bipush        6
      57: invokespecial #36                 // Method com/ibm/icu/number/Rounder$FractionRounderImpl."<init>":(II)V
      60: putstatic     #34                 // Field MAX_FRAC_6:Lcom/ibm/icu/number/Rounder$FractionRounderImpl;
      63: new           #40                 // class com/ibm/icu/number/Rounder$SignificantRounderImpl
      66: dup
      67: iconst_2
      68: iconst_2
      69: invokespecial #41                 // Method com/ibm/icu/number/Rounder$SignificantRounderImpl."<init>":(II)V
      72: putstatic     #37                 // Field FIXED_SIG_2:Lcom/ibm/icu/number/Rounder$SignificantRounderImpl;
      75: new           #40                 // class com/ibm/icu/number/Rounder$SignificantRounderImpl
      78: dup
      79: iconst_3
      80: iconst_3
      81: invokespecial #41                 // Method com/ibm/icu/number/Rounder$SignificantRounderImpl."<init>":(II)V
      84: putstatic     #38                 // Field FIXED_SIG_3:Lcom/ibm/icu/number/Rounder$SignificantRounderImpl;
      87: new           #40                 // class com/ibm/icu/number/Rounder$SignificantRounderImpl
      90: dup
      91: iconst_2
      92: iconst_3
      93: invokespecial #41                 // Method com/ibm/icu/number/Rounder$SignificantRounderImpl."<init>":(II)V
      96: putstatic     #39                 // Field RANGE_SIG_2_3:Lcom/ibm/icu/number/Rounder$SignificantRounderImpl;
      99: new           #47                 // class com/ibm/icu/number/Rounder$FracSigRounderImpl
     102: dup
     103: iconst_0
     104: iconst_0
     105: iconst_2
     106: iconst_m1
     107: invokespecial #48                 // Method com/ibm/icu/number/Rounder$FracSigRounderImpl."<init>":(IIII)V
     110: putstatic     #46                 // Field COMPACT_STRATEGY:Lcom/ibm/icu/number/Rounder$FracSigRounderImpl;
     113: new           #52                 // class com/ibm/icu/number/Rounder$IncrementRounderImpl
     116: dup
     117: ldc2_w        #77                 // double 0.05d
     120: invokestatic  #61                 // Method java/math/BigDecimal.valueOf:(D)Ljava/math/BigDecimal;
     123: invokespecial #53                 // Method com/ibm/icu/number/Rounder$IncrementRounderImpl."<init>":(Ljava/math/BigDecimal;)V
     126: putstatic     #49                 // Field NICKEL:Lcom/ibm/icu/number/Rounder$IncrementRounderImpl;
     129: new           #58                 // class com/ibm/icu/number/Rounder$CurrencyRounderImpl
     132: dup
     133: getstatic     #54                 // Field com/ibm/icu/util/Currency$CurrencyUsage.STANDARD:Lcom/ibm/icu/util/Currency$CurrencyUsage;
     136: invokespecial #79                 // Method com/ibm/icu/number/Rounder$CurrencyRounderImpl."<init>":(Lcom/ibm/icu/util/Currency$CurrencyUsage;)V
     139: putstatic     #55                 // Field MONETARY_STANDARD:Lcom/ibm/icu/number/Rounder$CurrencyRounderImpl;
     142: new           #58                 // class com/ibm/icu/number/Rounder$CurrencyRounderImpl
     145: dup
     146: getstatic     #56                 // Field com/ibm/icu/util/Currency$CurrencyUsage.CASH:Lcom/ibm/icu/util/Currency$CurrencyUsage;
     149: invokespecial #79                 // Method com/ibm/icu/number/Rounder$CurrencyRounderImpl."<init>":(Lcom/ibm/icu/util/Currency$CurrencyUsage;)V
     152: putstatic     #57                 // Field MONETARY_CASH:Lcom/ibm/icu/number/Rounder$CurrencyRounderImpl;
     155: new           #80                 // class com/ibm/icu/number/Rounder$PassThroughRounderImpl
     158: dup
     159: invokespecial #81                 // Method com/ibm/icu/number/Rounder$PassThroughRounderImpl."<init>":()V
     162: putstatic     #63                 // Field PASS_THROUGH:Lcom/ibm/icu/number/Rounder$PassThroughRounderImpl;
     165: return
}
