Compiled from "UCharacterNameIterator.java"
class com.ibm.icu.lang.UCharacterNameIterator implements com.ibm.icu.util.ValueIterator {
  private com.ibm.icu.impl.UCharacterName m_name_;

  private int m_choice_;

  private int m_start_;

  private int m_limit_;

  private int m_current_;

  private int m_groupIndex_;

  private int m_algorithmIndex_;

  private static char[] GROUP_OFFSETS_;

  private static char[] GROUP_LENGTHS_;

  public boolean next(com.ibm.icu.util.ValueIterator$Element);
    Code:
       0: aload_0
       1: getfield      #1                  // Field m_current_:I
       4: aload_0
       5: getfield      #2                  // Field m_limit_:I
       8: if_icmplt     13
      11: iconst_0
      12: ireturn
      13: aload_0
      14: getfield      #3                  // Field m_choice_:I
      17: ifeq          28
      20: aload_0
      21: getfield      #3                  // Field m_choice_:I
      24: iconst_2
      25: if_icmpne     214
      28: aload_0
      29: getfield      #5                  // Field m_name_:Lcom/ibm/icu/impl/UCharacterName;
      32: invokevirtual #6                  // Method com/ibm/icu/impl/UCharacterName.getAlgorithmLength:()I
      35: istore_2
      36: aload_0
      37: getfield      #7                  // Field m_algorithmIndex_:I
      40: iload_2
      41: if_icmpge     214
      44: aload_0
      45: getfield      #7                  // Field m_algorithmIndex_:I
      48: iload_2
      49: if_icmpge     90
      52: aload_0
      53: getfield      #7                  // Field m_algorithmIndex_:I
      56: iflt          77
      59: aload_0
      60: getfield      #5                  // Field m_name_:Lcom/ibm/icu/impl/UCharacterName;
      63: aload_0
      64: getfield      #7                  // Field m_algorithmIndex_:I
      67: invokevirtual #8                  // Method com/ibm/icu/impl/UCharacterName.getAlgorithmEnd:(I)I
      70: aload_0
      71: getfield      #1                  // Field m_current_:I
      74: if_icmpge     90
      77: aload_0
      78: dup
      79: getfield      #7                  // Field m_algorithmIndex_:I
      82: iconst_1
      83: iadd
      84: putfield      #7                  // Field m_algorithmIndex_:I
      87: goto          44
      90: aload_0
      91: getfield      #7                  // Field m_algorithmIndex_:I
      94: iload_2
      95: if_icmpge     214
      98: aload_0
      99: getfield      #5                  // Field m_name_:Lcom/ibm/icu/impl/UCharacterName;
     102: aload_0
     103: getfield      #7                  // Field m_algorithmIndex_:I
     106: invokevirtual #9                  // Method com/ibm/icu/impl/UCharacterName.getAlgorithmStart:(I)I
     109: istore_3
     110: aload_0
     111: getfield      #1                  // Field m_current_:I
     114: iload_3
     115: if_icmpge     157
     118: iload_3
     119: istore        4
     121: aload_0
     122: getfield      #2                  // Field m_limit_:I
     125: iload_3
     126: if_icmpgt     135
     129: aload_0
     130: getfield      #2                  // Field m_limit_:I
     133: istore        4
     135: aload_0
     136: aload_1
     137: iload         4
     139: invokespecial #10                 // Method iterateGroup:(Lcom/ibm/icu/util/ValueIterator$Element;I)Z
     142: ifne          157
     145: aload_0
     146: dup
     147: getfield      #1                  // Field m_current_:I
     150: iconst_1
     151: iadd
     152: putfield      #1                  // Field m_current_:I
     155: iconst_1
     156: ireturn
     157: aload_0
     158: getfield      #1                  // Field m_current_:I
     161: aload_0
     162: getfield      #2                  // Field m_limit_:I
     165: if_icmplt     170
     168: iconst_0
     169: ireturn
     170: aload_1
     171: aload_0
     172: getfield      #1                  // Field m_current_:I
     175: putfield      #11                 // Field com/ibm/icu/util/ValueIterator$Element.integer:I
     178: aload_1
     179: aload_0
     180: getfield      #5                  // Field m_name_:Lcom/ibm/icu/impl/UCharacterName;
     183: aload_0
     184: getfield      #7                  // Field m_algorithmIndex_:I
     187: aload_0
     188: getfield      #1                  // Field m_current_:I
     191: invokevirtual #12                 // Method com/ibm/icu/impl/UCharacterName.getAlgorithmName:(II)Ljava/lang/String;
     194: putfield      #13                 // Field com/ibm/icu/util/ValueIterator$Element.value:Ljava/lang/Object;
     197: aload_0
     198: iconst_m1
     199: putfield      #14                 // Field m_groupIndex_:I
     202: aload_0
     203: dup
     204: getfield      #1                  // Field m_current_:I
     207: iconst_1
     208: iadd
     209: putfield      #1                  // Field m_current_:I
     212: iconst_1
     213: ireturn
     214: aload_0
     215: aload_1
     216: aload_0
     217: getfield      #2                  // Field m_limit_:I
     220: invokespecial #10                 // Method iterateGroup:(Lcom/ibm/icu/util/ValueIterator$Element;I)Z
     223: ifne          238
     226: aload_0
     227: dup
     228: getfield      #1                  // Field m_current_:I
     231: iconst_1
     232: iadd
     233: putfield      #1                  // Field m_current_:I
     236: iconst_1
     237: ireturn
     238: aload_0
     239: getfield      #3                  // Field m_choice_:I
     242: iconst_2
     243: if_icmpne     270
     246: aload_0
     247: aload_1
     248: aload_0
     249: getfield      #2                  // Field m_limit_:I
     252: invokespecial #15                 // Method iterateExtended:(Lcom/ibm/icu/util/ValueIterator$Element;I)Z
     255: ifne          270
     258: aload_0
     259: dup
     260: getfield      #1                  // Field m_current_:I
     263: iconst_1
     264: iadd
     265: putfield      #1                  // Field m_current_:I
     268: iconst_1
     269: ireturn
     270: iconst_0
     271: ireturn

  public void reset();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #16                 // Field m_start_:I
       5: putfield      #1                  // Field m_current_:I
       8: aload_0
       9: iconst_m1
      10: putfield      #14                 // Field m_groupIndex_:I
      13: aload_0
      14: iconst_m1
      15: putfield      #7                  // Field m_algorithmIndex_:I
      18: return

  public void setRange(int, int);
    Code:
       0: iload_1
       1: iload_2
       2: if_icmplt     15
       5: new           #17                 // class java/lang/IllegalArgumentException
       8: dup
       9: ldc           #18                 // String start or limit has to be valid Unicode codepoints and start < limit
      11: invokespecial #19                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      14: athrow
      15: iload_1
      16: ifge          27
      19: aload_0
      20: iconst_0
      21: putfield      #16                 // Field m_start_:I
      24: goto          32
      27: aload_0
      28: iload_1
      29: putfield      #16                 // Field m_start_:I
      32: iload_2
      33: ldc           #21                 // int 1114112
      35: if_icmple     47
      38: aload_0
      39: ldc           #21                 // int 1114112
      41: putfield      #2                  // Field m_limit_:I
      44: goto          52
      47: aload_0
      48: iload_2
      49: putfield      #2                  // Field m_limit_:I
      52: aload_0
      53: aload_0
      54: getfield      #16                 // Field m_start_:I
      57: putfield      #1                  // Field m_current_:I
      60: return

  protected com.ibm.icu.lang.UCharacterNameIterator(com.ibm.icu.impl.UCharacterName, int);
    Code:
       0: aload_0
       1: invokespecial #22                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_m1
       6: putfield      #14                 // Field m_groupIndex_:I
       9: aload_0
      10: iconst_m1
      11: putfield      #7                  // Field m_algorithmIndex_:I
      14: aload_1
      15: ifnonnull     28
      18: new           #17                 // class java/lang/IllegalArgumentException
      21: dup
      22: ldc           #23                 // String UCharacterName name argument cannot be null. Missing unames.icu?
      24: invokespecial #19                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      27: athrow
      28: aload_0
      29: aload_1
      30: putfield      #5                  // Field m_name_:Lcom/ibm/icu/impl/UCharacterName;
      33: aload_0
      34: iload_2
      35: putfield      #3                  // Field m_choice_:I
      38: aload_0
      39: iconst_0
      40: putfield      #16                 // Field m_start_:I
      43: aload_0
      44: ldc           #21                 // int 1114112
      46: putfield      #2                  // Field m_limit_:I
      49: aload_0
      50: aload_0
      51: getfield      #16                 // Field m_start_:I
      54: putfield      #1                  // Field m_current_:I
      57: return

  private boolean iterateSingleGroup(com.ibm.icu.util.ValueIterator$Element, int);
    Code:
       0: getstatic     #24                 // Field GROUP_OFFSETS_:[C
       3: dup
       4: astore_3
       5: monitorenter
       6: getstatic     #25                 // Field GROUP_LENGTHS_:[C
       9: dup
      10: astore        4
      12: monitorenter
      13: aload_0
      14: getfield      #5                  // Field m_name_:Lcom/ibm/icu/impl/UCharacterName;
      17: aload_0
      18: getfield      #14                 // Field m_groupIndex_:I
      21: getstatic     #24                 // Field GROUP_OFFSETS_:[C
      24: getstatic     #25                 // Field GROUP_LENGTHS_:[C
      27: invokevirtual #26                 // Method com/ibm/icu/impl/UCharacterName.getGroupLengths:(I[C[C)I
      30: istore        5
      32: aload_0
      33: getfield      #1                  // Field m_current_:I
      36: iload_2
      37: if_icmpge     158
      40: aload_0
      41: getfield      #1                  // Field m_current_:I
      44: invokestatic  #27                 // Method com/ibm/icu/impl/UCharacterName.getGroupOffset:(I)I
      47: istore        6
      49: aload_0
      50: getfield      #5                  // Field m_name_:Lcom/ibm/icu/impl/UCharacterName;
      53: iload         5
      55: getstatic     #24                 // Field GROUP_OFFSETS_:[C
      58: iload         6
      60: caload
      61: iadd
      62: getstatic     #25                 // Field GROUP_LENGTHS_:[C
      65: iload         6
      67: caload
      68: aload_0
      69: getfield      #3                  // Field m_choice_:I
      72: invokevirtual #28                 // Method com/ibm/icu/impl/UCharacterName.getGroupName:(III)Ljava/lang/String;
      75: astore        7
      77: aload         7
      79: ifnull        90
      82: aload         7
      84: invokevirtual #29                 // Method java/lang/String.length:()I
      87: ifne          111
      90: aload_0
      91: getfield      #3                  // Field m_choice_:I
      94: iconst_2
      95: if_icmpne     111
      98: aload_0
      99: getfield      #5                  // Field m_name_:Lcom/ibm/icu/impl/UCharacterName;
     102: aload_0
     103: getfield      #1                  // Field m_current_:I
     106: invokevirtual #30                 // Method com/ibm/icu/impl/UCharacterName.getExtendedName:(I)Ljava/lang/String;
     109: astore        7
     111: aload         7
     113: ifnull        145
     116: aload         7
     118: invokevirtual #29                 // Method java/lang/String.length:()I
     121: ifle          145
     124: aload_1
     125: aload_0
     126: getfield      #1                  // Field m_current_:I
     129: putfield      #11                 // Field com/ibm/icu/util/ValueIterator$Element.integer:I
     132: aload_1
     133: aload         7
     135: putfield      #13                 // Field com/ibm/icu/util/ValueIterator$Element.value:Ljava/lang/Object;
     138: iconst_0
     139: aload         4
     141: monitorexit
     142: aload_3
     143: monitorexit
     144: ireturn
     145: aload_0
     146: dup
     147: getfield      #1                  // Field m_current_:I
     150: iconst_1
     151: iadd
     152: putfield      #1                  // Field m_current_:I
     155: goto          32
     158: aload         4
     160: monitorexit
     161: goto          172
     164: astore        8
     166: aload         4
     168: monitorexit
     169: aload         8
     171: athrow
     172: aload_3
     173: monitorexit
     174: goto          184
     177: astore        9
     179: aload_3
     180: monitorexit
     181: aload         9
     183: athrow
     184: iconst_1
     185: ireturn
    Exception table:
       from    to  target type
          13   142   164   any
         145   161   164   any
         164   169   164   any
           6   144   177   any
         145   174   177   any
         177   181   177   any

  private boolean iterateGroup(com.ibm.icu.util.ValueIterator$Element, int);
    Code:
       0: aload_0
       1: getfield      #14                 // Field m_groupIndex_:I
       4: ifge          22
       7: aload_0
       8: aload_0
       9: getfield      #5                  // Field m_name_:Lcom/ibm/icu/impl/UCharacterName;
      12: aload_0
      13: getfield      #1                  // Field m_current_:I
      16: invokevirtual #31                 // Method com/ibm/icu/impl/UCharacterName.getGroup:(I)I
      19: putfield      #14                 // Field m_groupIndex_:I
      22: aload_0
      23: getfield      #14                 // Field m_groupIndex_:I
      26: aload_0
      27: getfield      #5                  // Field m_name_:Lcom/ibm/icu/impl/UCharacterName;
      30: getfield      #32                 // Field com/ibm/icu/impl/UCharacterName.m_groupcount_:I
      33: if_icmpge     180
      36: aload_0
      37: getfield      #1                  // Field m_current_:I
      40: iload_2
      41: if_icmpge     180
      44: aload_0
      45: getfield      #1                  // Field m_current_:I
      48: invokestatic  #33                 // Method com/ibm/icu/impl/UCharacterName.getCodepointMSB:(I)I
      51: istore_3
      52: aload_0
      53: getfield      #5                  // Field m_name_:Lcom/ibm/icu/impl/UCharacterName;
      56: aload_0
      57: getfield      #14                 // Field m_groupIndex_:I
      60: invokevirtual #34                 // Method com/ibm/icu/impl/UCharacterName.getGroupMSB:(I)I
      63: istore        4
      65: iload_3
      66: iload         4
      68: if_icmpne     116
      71: iload_3
      72: iload_2
      73: iconst_1
      74: isub
      75: invokestatic  #33                 // Method com/ibm/icu/impl/UCharacterName.getCodepointMSB:(I)I
      78: if_icmpne     88
      81: aload_0
      82: aload_1
      83: iload_2
      84: invokespecial #35                 // Method iterateSingleGroup:(Lcom/ibm/icu/util/ValueIterator$Element;I)Z
      87: ireturn
      88: aload_0
      89: aload_1
      90: iload         4
      92: invokestatic  #36                 // Method com/ibm/icu/impl/UCharacterName.getGroupLimit:(I)I
      95: invokespecial #35                 // Method iterateSingleGroup:(Lcom/ibm/icu/util/ValueIterator$Element;I)Z
      98: ifne          103
     101: iconst_0
     102: ireturn
     103: aload_0
     104: dup
     105: getfield      #14                 // Field m_groupIndex_:I
     108: iconst_1
     109: iadd
     110: putfield      #14                 // Field m_groupIndex_:I
     113: goto          177
     116: iload_3
     117: iload         4
     119: if_icmple     135
     122: aload_0
     123: dup
     124: getfield      #14                 // Field m_groupIndex_:I
     127: iconst_1
     128: iadd
     129: putfield      #14                 // Field m_groupIndex_:I
     132: goto          177
     135: iload         4
     137: invokestatic  #37                 // Method com/ibm/icu/impl/UCharacterName.getGroupMin:(I)I
     140: istore        5
     142: iload         5
     144: iload_2
     145: if_icmple     151
     148: iload_2
     149: istore        5
     151: aload_0
     152: getfield      #3                  // Field m_choice_:I
     155: iconst_2
     156: if_icmpne     171
     159: aload_0
     160: aload_1
     161: iload         5
     163: invokespecial #15                 // Method iterateExtended:(Lcom/ibm/icu/util/ValueIterator$Element;I)Z
     166: ifne          171
     169: iconst_0
     170: ireturn
     171: aload_0
     172: iload         5
     174: putfield      #1                  // Field m_current_:I
     177: goto          22
     180: iconst_1
     181: ireturn

  private boolean iterateExtended(com.ibm.icu.util.ValueIterator$Element, int);
    Code:
       0: aload_0
       1: getfield      #1                  // Field m_current_:I
       4: iload_2
       5: if_icmpge     59
       8: aload_0
       9: getfield      #5                  // Field m_name_:Lcom/ibm/icu/impl/UCharacterName;
      12: aload_0
      13: getfield      #1                  // Field m_current_:I
      16: invokevirtual #38                 // Method com/ibm/icu/impl/UCharacterName.getExtendedOr10Name:(I)Ljava/lang/String;
      19: astore_3
      20: aload_3
      21: ifnull        46
      24: aload_3
      25: invokevirtual #29                 // Method java/lang/String.length:()I
      28: ifle          46
      31: aload_1
      32: aload_0
      33: getfield      #1                  // Field m_current_:I
      36: putfield      #11                 // Field com/ibm/icu/util/ValueIterator$Element.integer:I
      39: aload_1
      40: aload_3
      41: putfield      #13                 // Field com/ibm/icu/util/ValueIterator$Element.value:Ljava/lang/Object;
      44: iconst_0
      45: ireturn
      46: aload_0
      47: dup
      48: getfield      #1                  // Field m_current_:I
      51: iconst_1
      52: iadd
      53: putfield      #1                  // Field m_current_:I
      56: goto          0
      59: iconst_1
      60: ireturn

  static {};
    Code:
       0: bipush        33
       2: newarray       char
       4: putstatic     #24                 // Field GROUP_OFFSETS_:[C
       7: bipush        33
       9: newarray       char
      11: putstatic     #25                 // Field GROUP_LENGTHS_:[C
      14: return
}
