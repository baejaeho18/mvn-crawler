Compiled from "RuleBasedBreakIterator.java"
class com.ibm.icu.text.RuleBasedBreakIterator$BreakCache {
  static final boolean RetainCachePosition;

  static final boolean UpdateCachePosition;

  static final int CACHE_SIZE;

  int fStartBufIdx;

  int fEndBufIdx;

  int fTextIdx;

  int fBufIdx;

  int[] fBoundaries;

  short[] fStatuses;

  com.ibm.icu.text.DictionaryBreakEngine$DequeI fSideBuffer;

  static final boolean $assertionsDisabled;

  final com.ibm.icu.text.RuleBasedBreakIterator this$0;

  com.ibm.icu.text.RuleBasedBreakIterator$BreakCache(com.ibm.icu.text.RuleBasedBreakIterator);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lcom/ibm/icu/text/RuleBasedBreakIterator;
       5: aload_0
       6: invokespecial #2                  // Method java/lang/Object."<init>":()V
       9: aload_0
      10: sipush        128
      13: newarray       int
      15: putfield      #4                  // Field fBoundaries:[I
      18: aload_0
      19: sipush        128
      22: newarray       short
      24: putfield      #5                  // Field fStatuses:[S
      27: aload_0
      28: new           #6                  // class com/ibm/icu/text/DictionaryBreakEngine$DequeI
      31: dup
      32: invokespecial #7                  // Method com/ibm/icu/text/DictionaryBreakEngine$DequeI."<init>":()V
      35: putfield      #8                  // Field fSideBuffer:Lcom/ibm/icu/text/DictionaryBreakEngine$DequeI;
      38: aload_0
      39: invokevirtual #9                  // Method reset:()V
      42: return

  void reset(int, int);
    Code:
       0: aload_0
       1: iconst_0
       2: putfield      #10                 // Field fStartBufIdx:I
       5: aload_0
       6: iconst_0
       7: putfield      #11                 // Field fEndBufIdx:I
      10: aload_0
      11: iload_1
      12: putfield      #12                 // Field fTextIdx:I
      15: aload_0
      16: iconst_0
      17: putfield      #13                 // Field fBufIdx:I
      20: aload_0
      21: getfield      #4                  // Field fBoundaries:[I
      24: iconst_0
      25: iload_1
      26: iastore
      27: aload_0
      28: getfield      #5                  // Field fStatuses:[S
      31: iconst_0
      32: iload_2
      33: i2s
      34: sastore
      35: return

  void reset();
    Code:
       0: aload_0
       1: iconst_0
       2: iconst_0
       3: invokevirtual #14                 // Method reset:(II)V
       6: return

  void next();
    Code:
       0: aload_0
       1: getfield      #13                 // Field fBufIdx:I
       4: aload_0
       5: getfield      #11                 // Field fEndBufIdx:I
       8: if_icmpne     63
      11: aload_0
      12: getfield      #1                  // Field this$0:Lcom/ibm/icu/text/RuleBasedBreakIterator;
      15: aload_0
      16: invokevirtual #15                 // Method populateFollowing:()Z
      19: ifne          26
      22: iconst_1
      23: goto          27
      26: iconst_0
      27: invokestatic  #16                 // Method com/ibm/icu/text/RuleBasedBreakIterator.access$202:(Lcom/ibm/icu/text/RuleBasedBreakIterator;Z)Z
      30: pop
      31: aload_0
      32: getfield      #1                  // Field this$0:Lcom/ibm/icu/text/RuleBasedBreakIterator;
      35: aload_0
      36: getfield      #12                 // Field fTextIdx:I
      39: invokestatic  #17                 // Method com/ibm/icu/text/RuleBasedBreakIterator.access$302:(Lcom/ibm/icu/text/RuleBasedBreakIterator;I)I
      42: pop
      43: aload_0
      44: getfield      #1                  // Field this$0:Lcom/ibm/icu/text/RuleBasedBreakIterator;
      47: aload_0
      48: getfield      #5                  // Field fStatuses:[S
      51: aload_0
      52: getfield      #13                 // Field fBufIdx:I
      55: saload
      56: invokestatic  #18                 // Method com/ibm/icu/text/RuleBasedBreakIterator.access$402:(Lcom/ibm/icu/text/RuleBasedBreakIterator;I)I
      59: pop
      60: goto          114
      63: aload_0
      64: aload_0
      65: aload_0
      66: getfield      #13                 // Field fBufIdx:I
      69: iconst_1
      70: iadd
      71: invokespecial #19                 // Method modChunkSize:(I)I
      74: putfield      #13                 // Field fBufIdx:I
      77: aload_0
      78: aload_0
      79: getfield      #1                  // Field this$0:Lcom/ibm/icu/text/RuleBasedBreakIterator;
      82: aload_0
      83: getfield      #4                  // Field fBoundaries:[I
      86: aload_0
      87: getfield      #13                 // Field fBufIdx:I
      90: iaload
      91: invokestatic  #17                 // Method com/ibm/icu/text/RuleBasedBreakIterator.access$302:(Lcom/ibm/icu/text/RuleBasedBreakIterator;I)I
      94: putfield      #12                 // Field fTextIdx:I
      97: aload_0
      98: getfield      #1                  // Field this$0:Lcom/ibm/icu/text/RuleBasedBreakIterator;
     101: aload_0
     102: getfield      #5                  // Field fStatuses:[S
     105: aload_0
     106: getfield      #13                 // Field fBufIdx:I
     109: saload
     110: invokestatic  #18                 // Method com/ibm/icu/text/RuleBasedBreakIterator.access$402:(Lcom/ibm/icu/text/RuleBasedBreakIterator;I)I
     113: pop
     114: return

  void previous();
    Code:
       0: aload_0
       1: getfield      #13                 // Field fBufIdx:I
       4: istore_1
       5: aload_0
       6: getfield      #13                 // Field fBufIdx:I
       9: aload_0
      10: getfield      #10                 // Field fStartBufIdx:I
      13: if_icmpne     24
      16: aload_0
      17: invokevirtual #20                 // Method populatePreceding:()Z
      20: pop
      21: goto          51
      24: aload_0
      25: aload_0
      26: aload_0
      27: getfield      #13                 // Field fBufIdx:I
      30: iconst_1
      31: isub
      32: invokespecial #19                 // Method modChunkSize:(I)I
      35: putfield      #13                 // Field fBufIdx:I
      38: aload_0
      39: aload_0
      40: getfield      #4                  // Field fBoundaries:[I
      43: aload_0
      44: getfield      #13                 // Field fBufIdx:I
      47: iaload
      48: putfield      #12                 // Field fTextIdx:I
      51: aload_0
      52: getfield      #1                  // Field this$0:Lcom/ibm/icu/text/RuleBasedBreakIterator;
      55: aload_0
      56: getfield      #13                 // Field fBufIdx:I
      59: iload_1
      60: if_icmpne     67
      63: iconst_1
      64: goto          68
      67: iconst_0
      68: invokestatic  #16                 // Method com/ibm/icu/text/RuleBasedBreakIterator.access$202:(Lcom/ibm/icu/text/RuleBasedBreakIterator;Z)Z
      71: pop
      72: aload_0
      73: getfield      #1                  // Field this$0:Lcom/ibm/icu/text/RuleBasedBreakIterator;
      76: aload_0
      77: getfield      #12                 // Field fTextIdx:I
      80: invokestatic  #17                 // Method com/ibm/icu/text/RuleBasedBreakIterator.access$302:(Lcom/ibm/icu/text/RuleBasedBreakIterator;I)I
      83: pop
      84: aload_0
      85: getfield      #1                  // Field this$0:Lcom/ibm/icu/text/RuleBasedBreakIterator;
      88: aload_0
      89: getfield      #5                  // Field fStatuses:[S
      92: aload_0
      93: getfield      #13                 // Field fBufIdx:I
      96: saload
      97: invokestatic  #18                 // Method com/ibm/icu/text/RuleBasedBreakIterator.access$402:(Lcom/ibm/icu/text/RuleBasedBreakIterator;I)I
     100: pop
     101: return

  void following(int);
    Code:
       0: iload_1
       1: aload_0
       2: getfield      #12                 // Field fTextIdx:I
       5: if_icmpeq     24
       8: aload_0
       9: iload_1
      10: invokevirtual #21                 // Method seek:(I)Z
      13: ifne          24
      16: aload_0
      17: iload_1
      18: invokevirtual #22                 // Method populateNear:(I)Z
      21: ifeq          37
      24: aload_0
      25: getfield      #1                  // Field this$0:Lcom/ibm/icu/text/RuleBasedBreakIterator;
      28: iconst_0
      29: invokestatic  #16                 // Method com/ibm/icu/text/RuleBasedBreakIterator.access$202:(Lcom/ibm/icu/text/RuleBasedBreakIterator;Z)Z
      32: pop
      33: aload_0
      34: invokevirtual #23                 // Method next:()V
      37: return

  void preceding(int);
    Code:
       0: iload_1
       1: aload_0
       2: getfield      #12                 // Field fTextIdx:I
       5: if_icmpeq     24
       8: aload_0
       9: iload_1
      10: invokevirtual #21                 // Method seek:(I)Z
      13: ifne          24
      16: aload_0
      17: iload_1
      18: invokevirtual #22                 // Method populateNear:(I)Z
      21: ifeq          66
      24: iload_1
      25: aload_0
      26: getfield      #12                 // Field fTextIdx:I
      29: if_icmpne     39
      32: aload_0
      33: invokevirtual #24                 // Method previous:()V
      36: goto          66
      39: getstatic     #25                 // Field $assertionsDisabled:Z
      42: ifne          61
      45: iload_1
      46: aload_0
      47: getfield      #12                 // Field fTextIdx:I
      50: if_icmpgt     61
      53: new           #26                 // class java/lang/AssertionError
      56: dup
      57: invokespecial #27                 // Method java/lang/AssertionError."<init>":()V
      60: athrow
      61: aload_0
      62: invokevirtual #28                 // Method current:()I
      65: pop
      66: return

  int current();
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lcom/ibm/icu/text/RuleBasedBreakIterator;
       4: aload_0
       5: getfield      #12                 // Field fTextIdx:I
       8: invokestatic  #17                 // Method com/ibm/icu/text/RuleBasedBreakIterator.access$302:(Lcom/ibm/icu/text/RuleBasedBreakIterator;I)I
      11: pop
      12: aload_0
      13: getfield      #1                  // Field this$0:Lcom/ibm/icu/text/RuleBasedBreakIterator;
      16: aload_0
      17: getfield      #5                  // Field fStatuses:[S
      20: aload_0
      21: getfield      #13                 // Field fBufIdx:I
      24: saload
      25: invokestatic  #18                 // Method com/ibm/icu/text/RuleBasedBreakIterator.access$402:(Lcom/ibm/icu/text/RuleBasedBreakIterator;I)I
      28: pop
      29: aload_0
      30: getfield      #1                  // Field this$0:Lcom/ibm/icu/text/RuleBasedBreakIterator;
      33: iconst_0
      34: invokestatic  #16                 // Method com/ibm/icu/text/RuleBasedBreakIterator.access$202:(Lcom/ibm/icu/text/RuleBasedBreakIterator;Z)Z
      37: pop
      38: aload_0
      39: getfield      #12                 // Field fTextIdx:I
      42: ireturn

  boolean populateNear(int);
    Code:
       0: getstatic     #25                 // Field $assertionsDisabled:Z
       3: ifne          40
       6: iload_1
       7: aload_0
       8: getfield      #4                  // Field fBoundaries:[I
      11: aload_0
      12: getfield      #10                 // Field fStartBufIdx:I
      15: iaload
      16: if_icmplt     40
      19: iload_1
      20: aload_0
      21: getfield      #4                  // Field fBoundaries:[I
      24: aload_0
      25: getfield      #11                 // Field fEndBufIdx:I
      28: iaload
      29: if_icmpgt     40
      32: new           #26                 // class java/lang/AssertionError
      35: dup
      36: invokespecial #27                 // Method java/lang/AssertionError."<init>":()V
      39: athrow
      40: iload_1
      41: aload_0
      42: getfield      #4                  // Field fBoundaries:[I
      45: aload_0
      46: getfield      #10                 // Field fStartBufIdx:I
      49: iaload
      50: bipush        15
      52: isub
      53: if_icmplt     72
      56: iload_1
      57: aload_0
      58: getfield      #4                  // Field fBoundaries:[I
      61: aload_0
      62: getfield      #11                 // Field fEndBufIdx:I
      65: iaload
      66: bipush        15
      68: iadd
      69: if_icmple     137
      72: aload_0
      73: getfield      #1                  // Field this$0:Lcom/ibm/icu/text/RuleBasedBreakIterator;
      76: invokestatic  #29                 // Method com/ibm/icu/text/RuleBasedBreakIterator.access$000:(Lcom/ibm/icu/text/RuleBasedBreakIterator;)Ljava/text/CharacterIterator;
      79: invokeinterface #30,  1           // InterfaceMethod java/text/CharacterIterator.getBeginIndex:()I
      84: istore_2
      85: iconst_0
      86: istore_3
      87: iload_1
      88: iload_2
      89: bipush        20
      91: iadd
      92: if_icmple     131
      95: aload_0
      96: getfield      #1                  // Field this$0:Lcom/ibm/icu/text/RuleBasedBreakIterator;
      99: iload_1
     100: invokestatic  #31                 // Method com/ibm/icu/text/RuleBasedBreakIterator.access$500:(Lcom/ibm/icu/text/RuleBasedBreakIterator;I)I
     103: istore        4
     105: aload_0
     106: getfield      #1                  // Field this$0:Lcom/ibm/icu/text/RuleBasedBreakIterator;
     109: iload         4
     111: invokestatic  #17                 // Method com/ibm/icu/text/RuleBasedBreakIterator.access$302:(Lcom/ibm/icu/text/RuleBasedBreakIterator;I)I
     114: pop
     115: aload_0
     116: getfield      #1                  // Field this$0:Lcom/ibm/icu/text/RuleBasedBreakIterator;
     119: invokestatic  #32                 // Method com/ibm/icu/text/RuleBasedBreakIterator.access$600:(Lcom/ibm/icu/text/RuleBasedBreakIterator;)I
     122: istore_2
     123: aload_0
     124: getfield      #1                  // Field this$0:Lcom/ibm/icu/text/RuleBasedBreakIterator;
     127: invokestatic  #33                 // Method com/ibm/icu/text/RuleBasedBreakIterator.access$400:(Lcom/ibm/icu/text/RuleBasedBreakIterator;)I
     130: istore_3
     131: aload_0
     132: iload_2
     133: iload_3
     134: invokevirtual #14                 // Method reset:(II)V
     137: aload_0
     138: getfield      #4                  // Field fBoundaries:[I
     141: aload_0
     142: getfield      #11                 // Field fEndBufIdx:I
     145: iaload
     146: iload_1
     147: if_icmpge     224
     150: aload_0
     151: getfield      #4                  // Field fBoundaries:[I
     154: aload_0
     155: getfield      #11                 // Field fEndBufIdx:I
     158: iaload
     159: iload_1
     160: if_icmpge     186
     163: aload_0
     164: invokevirtual #15                 // Method populateFollowing:()Z
     167: ifne          150
     170: getstatic     #25                 // Field $assertionsDisabled:Z
     173: ifne          184
     176: new           #26                 // class java/lang/AssertionError
     179: dup
     180: invokespecial #27                 // Method java/lang/AssertionError."<init>":()V
     183: athrow
     184: iconst_0
     185: ireturn
     186: aload_0
     187: aload_0
     188: getfield      #11                 // Field fEndBufIdx:I
     191: putfield      #13                 // Field fBufIdx:I
     194: aload_0
     195: aload_0
     196: getfield      #4                  // Field fBoundaries:[I
     199: aload_0
     200: getfield      #13                 // Field fBufIdx:I
     203: iaload
     204: putfield      #12                 // Field fTextIdx:I
     207: aload_0
     208: getfield      #12                 // Field fTextIdx:I
     211: iload_1
     212: if_icmple     222
     215: aload_0
     216: invokevirtual #24                 // Method previous:()V
     219: goto          207
     222: iconst_1
     223: ireturn
     224: aload_0
     225: getfield      #4                  // Field fBoundaries:[I
     228: aload_0
     229: getfield      #10                 // Field fStartBufIdx:I
     232: iaload
     233: iload_1
     234: if_icmple     308
     237: aload_0
     238: getfield      #4                  // Field fBoundaries:[I
     241: aload_0
     242: getfield      #10                 // Field fStartBufIdx:I
     245: iaload
     246: iload_1
     247: if_icmple     258
     250: aload_0
     251: invokevirtual #20                 // Method populatePreceding:()Z
     254: pop
     255: goto          237
     258: aload_0
     259: aload_0
     260: getfield      #10                 // Field fStartBufIdx:I
     263: putfield      #13                 // Field fBufIdx:I
     266: aload_0
     267: aload_0
     268: getfield      #4                  // Field fBoundaries:[I
     271: aload_0
     272: getfield      #13                 // Field fBufIdx:I
     275: iaload
     276: putfield      #12                 // Field fTextIdx:I
     279: aload_0
     280: getfield      #12                 // Field fTextIdx:I
     283: iload_1
     284: if_icmpge     294
     287: aload_0
     288: invokevirtual #23                 // Method next:()V
     291: goto          279
     294: aload_0
     295: getfield      #12                 // Field fTextIdx:I
     298: iload_1
     299: if_icmple     306
     302: aload_0
     303: invokevirtual #24                 // Method previous:()V
     306: iconst_1
     307: ireturn
     308: getstatic     #25                 // Field $assertionsDisabled:Z
     311: ifne          330
     314: aload_0
     315: getfield      #12                 // Field fTextIdx:I
     318: iload_1
     319: if_icmpeq     330
     322: new           #26                 // class java/lang/AssertionError
     325: dup
     326: invokespecial #27                 // Method java/lang/AssertionError."<init>":()V
     329: athrow
     330: iconst_1
     331: ireturn

  boolean populateFollowing();
    Code:
       0: aload_0
       1: getfield      #4                  // Field fBoundaries:[I
       4: aload_0
       5: getfield      #11                 // Field fEndBufIdx:I
       8: iaload
       9: istore_1
      10: aload_0
      11: getfield      #5                  // Field fStatuses:[S
      14: aload_0
      15: getfield      #11                 // Field fEndBufIdx:I
      18: saload
      19: istore_2
      20: iconst_0
      21: istore_3
      22: iconst_0
      23: istore        4
      25: aload_0
      26: getfield      #1                  // Field this$0:Lcom/ibm/icu/text/RuleBasedBreakIterator;
      29: invokestatic  #34                 // Method com/ibm/icu/text/RuleBasedBreakIterator.access$700:(Lcom/ibm/icu/text/RuleBasedBreakIterator;)Lcom/ibm/icu/text/RuleBasedBreakIterator$DictionaryCache;
      32: iload_1
      33: invokevirtual #35                 // Method com/ibm/icu/text/RuleBasedBreakIterator$DictionaryCache.following:(I)Z
      36: ifeq          66
      39: aload_0
      40: aload_0
      41: getfield      #1                  // Field this$0:Lcom/ibm/icu/text/RuleBasedBreakIterator;
      44: invokestatic  #34                 // Method com/ibm/icu/text/RuleBasedBreakIterator.access$700:(Lcom/ibm/icu/text/RuleBasedBreakIterator;)Lcom/ibm/icu/text/RuleBasedBreakIterator$DictionaryCache;
      47: getfield      #36                 // Field com/ibm/icu/text/RuleBasedBreakIterator$DictionaryCache.fBoundary:I
      50: aload_0
      51: getfield      #1                  // Field this$0:Lcom/ibm/icu/text/RuleBasedBreakIterator;
      54: invokestatic  #34                 // Method com/ibm/icu/text/RuleBasedBreakIterator.access$700:(Lcom/ibm/icu/text/RuleBasedBreakIterator;)Lcom/ibm/icu/text/RuleBasedBreakIterator$DictionaryCache;
      57: getfield      #37                 // Field com/ibm/icu/text/RuleBasedBreakIterator$DictionaryCache.fStatusIndex:I
      60: iconst_1
      61: invokevirtual #38                 // Method addFollowing:(IIZ)V
      64: iconst_1
      65: ireturn
      66: aload_0
      67: getfield      #1                  // Field this$0:Lcom/ibm/icu/text/RuleBasedBreakIterator;
      70: iload_1
      71: invokestatic  #17                 // Method com/ibm/icu/text/RuleBasedBreakIterator.access$302:(Lcom/ibm/icu/text/RuleBasedBreakIterator;I)I
      74: pop
      75: aload_0
      76: getfield      #1                  // Field this$0:Lcom/ibm/icu/text/RuleBasedBreakIterator;
      79: invokestatic  #32                 // Method com/ibm/icu/text/RuleBasedBreakIterator.access$600:(Lcom/ibm/icu/text/RuleBasedBreakIterator;)I
      82: istore_3
      83: iload_3
      84: iconst_m1
      85: if_icmpne     90
      88: iconst_0
      89: ireturn
      90: aload_0
      91: getfield      #1                  // Field this$0:Lcom/ibm/icu/text/RuleBasedBreakIterator;
      94: invokestatic  #33                 // Method com/ibm/icu/text/RuleBasedBreakIterator.access$400:(Lcom/ibm/icu/text/RuleBasedBreakIterator;)I
      97: istore        4
      99: aload_0
     100: getfield      #1                  // Field this$0:Lcom/ibm/icu/text/RuleBasedBreakIterator;
     103: invokestatic  #40                 // Method com/ibm/icu/text/RuleBasedBreakIterator.access$800:(Lcom/ibm/icu/text/RuleBasedBreakIterator;)I
     106: ifle          165
     109: aload_0
     110: getfield      #1                  // Field this$0:Lcom/ibm/icu/text/RuleBasedBreakIterator;
     113: invokestatic  #34                 // Method com/ibm/icu/text/RuleBasedBreakIterator.access$700:(Lcom/ibm/icu/text/RuleBasedBreakIterator;)Lcom/ibm/icu/text/RuleBasedBreakIterator$DictionaryCache;
     116: iload_1
     117: iload_3
     118: iload_2
     119: iload         4
     121: invokevirtual #41                 // Method com/ibm/icu/text/RuleBasedBreakIterator$DictionaryCache.populateDictionary:(IIII)V
     124: aload_0
     125: getfield      #1                  // Field this$0:Lcom/ibm/icu/text/RuleBasedBreakIterator;
     128: invokestatic  #34                 // Method com/ibm/icu/text/RuleBasedBreakIterator.access$700:(Lcom/ibm/icu/text/RuleBasedBreakIterator;)Lcom/ibm/icu/text/RuleBasedBreakIterator$DictionaryCache;
     131: iload_1
     132: invokevirtual #35                 // Method com/ibm/icu/text/RuleBasedBreakIterator$DictionaryCache.following:(I)Z
     135: ifeq          165
     138: aload_0
     139: aload_0
     140: getfield      #1                  // Field this$0:Lcom/ibm/icu/text/RuleBasedBreakIterator;
     143: invokestatic  #34                 // Method com/ibm/icu/text/RuleBasedBreakIterator.access$700:(Lcom/ibm/icu/text/RuleBasedBreakIterator;)Lcom/ibm/icu/text/RuleBasedBreakIterator$DictionaryCache;
     146: getfield      #36                 // Field com/ibm/icu/text/RuleBasedBreakIterator$DictionaryCache.fBoundary:I
     149: aload_0
     150: getfield      #1                  // Field this$0:Lcom/ibm/icu/text/RuleBasedBreakIterator;
     153: invokestatic  #34                 // Method com/ibm/icu/text/RuleBasedBreakIterator.access$700:(Lcom/ibm/icu/text/RuleBasedBreakIterator;)Lcom/ibm/icu/text/RuleBasedBreakIterator$DictionaryCache;
     156: getfield      #37                 // Field com/ibm/icu/text/RuleBasedBreakIterator$DictionaryCache.fStatusIndex:I
     159: iconst_1
     160: invokevirtual #38                 // Method addFollowing:(IIZ)V
     163: iconst_1
     164: ireturn
     165: aload_0
     166: iload_3
     167: iload         4
     169: iconst_1
     170: invokevirtual #38                 // Method addFollowing:(IIZ)V
     173: iconst_0
     174: istore        5
     176: iload         5
     178: bipush        6
     180: if_icmpge     228
     183: aload_0
     184: getfield      #1                  // Field this$0:Lcom/ibm/icu/text/RuleBasedBreakIterator;
     187: invokestatic  #32                 // Method com/ibm/icu/text/RuleBasedBreakIterator.access$600:(Lcom/ibm/icu/text/RuleBasedBreakIterator;)I
     190: istore_3
     191: iload_3
     192: iconst_m1
     193: if_icmpeq     228
     196: aload_0
     197: getfield      #1                  // Field this$0:Lcom/ibm/icu/text/RuleBasedBreakIterator;
     200: invokestatic  #40                 // Method com/ibm/icu/text/RuleBasedBreakIterator.access$800:(Lcom/ibm/icu/text/RuleBasedBreakIterator;)I
     203: ifle          209
     206: goto          228
     209: aload_0
     210: iload_3
     211: aload_0
     212: getfield      #1                  // Field this$0:Lcom/ibm/icu/text/RuleBasedBreakIterator;
     215: invokestatic  #33                 // Method com/ibm/icu/text/RuleBasedBreakIterator.access$400:(Lcom/ibm/icu/text/RuleBasedBreakIterator;)I
     218: iconst_0
     219: invokevirtual #38                 // Method addFollowing:(IIZ)V
     222: iinc          5, 1
     225: goto          176
     228: iconst_1
     229: ireturn

  boolean populatePreceding();
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lcom/ibm/icu/text/RuleBasedBreakIterator;
       4: invokestatic  #29                 // Method com/ibm/icu/text/RuleBasedBreakIterator.access$000:(Lcom/ibm/icu/text/RuleBasedBreakIterator;)Ljava/text/CharacterIterator;
       7: invokeinterface #30,  1           // InterfaceMethod java/text/CharacterIterator.getBeginIndex:()I
      12: istore_1
      13: aload_0
      14: getfield      #4                  // Field fBoundaries:[I
      17: aload_0
      18: getfield      #10                 // Field fStartBufIdx:I
      21: iaload
      22: istore_2
      23: iload_2
      24: iload_1
      25: if_icmpne     30
      28: iconst_0
      29: ireturn
      30: iload_1
      31: istore_3
      32: iconst_0
      33: istore        4
      35: aload_0
      36: getfield      #1                  // Field this$0:Lcom/ibm/icu/text/RuleBasedBreakIterator;
      39: invokestatic  #34                 // Method com/ibm/icu/text/RuleBasedBreakIterator.access$700:(Lcom/ibm/icu/text/RuleBasedBreakIterator;)Lcom/ibm/icu/text/RuleBasedBreakIterator$DictionaryCache;
      42: iload_2
      43: invokevirtual #42                 // Method com/ibm/icu/text/RuleBasedBreakIterator$DictionaryCache.preceding:(I)Z
      46: ifeq          77
      49: aload_0
      50: aload_0
      51: getfield      #1                  // Field this$0:Lcom/ibm/icu/text/RuleBasedBreakIterator;
      54: invokestatic  #34                 // Method com/ibm/icu/text/RuleBasedBreakIterator.access$700:(Lcom/ibm/icu/text/RuleBasedBreakIterator;)Lcom/ibm/icu/text/RuleBasedBreakIterator$DictionaryCache;
      57: getfield      #36                 // Field com/ibm/icu/text/RuleBasedBreakIterator$DictionaryCache.fBoundary:I
      60: aload_0
      61: getfield      #1                  // Field this$0:Lcom/ibm/icu/text/RuleBasedBreakIterator;
      64: invokestatic  #34                 // Method com/ibm/icu/text/RuleBasedBreakIterator.access$700:(Lcom/ibm/icu/text/RuleBasedBreakIterator;)Lcom/ibm/icu/text/RuleBasedBreakIterator$DictionaryCache;
      67: getfield      #37                 // Field com/ibm/icu/text/RuleBasedBreakIterator$DictionaryCache.fStatusIndex:I
      70: iconst_1
      71: invokevirtual #43                 // Method addPreceding:(IIZ)Z
      74: pop
      75: iconst_1
      76: ireturn
      77: iload_2
      78: istore        5
      80: iload         5
      82: bipush        30
      84: isub
      85: istore        5
      87: iload         5
      89: iload_1
      90: if_icmpgt     99
      93: iload_1
      94: istore        5
      96: goto          110
      99: aload_0
     100: getfield      #1                  // Field this$0:Lcom/ibm/icu/text/RuleBasedBreakIterator;
     103: iload         5
     105: invokestatic  #31                 // Method com/ibm/icu/text/RuleBasedBreakIterator.access$500:(Lcom/ibm/icu/text/RuleBasedBreakIterator;I)I
     108: istore        5
     110: iload         5
     112: iconst_m1
     113: if_icmpeq     122
     116: iload         5
     118: iload_1
     119: if_icmpne     130
     122: iload_1
     123: istore_3
     124: iconst_0
     125: istore        4
     127: goto          157
     130: aload_0
     131: getfield      #1                  // Field this$0:Lcom/ibm/icu/text/RuleBasedBreakIterator;
     134: iload         5
     136: invokestatic  #17                 // Method com/ibm/icu/text/RuleBasedBreakIterator.access$302:(Lcom/ibm/icu/text/RuleBasedBreakIterator;I)I
     139: pop
     140: aload_0
     141: getfield      #1                  // Field this$0:Lcom/ibm/icu/text/RuleBasedBreakIterator;
     144: invokestatic  #32                 // Method com/ibm/icu/text/RuleBasedBreakIterator.access$600:(Lcom/ibm/icu/text/RuleBasedBreakIterator;)I
     147: istore_3
     148: aload_0
     149: getfield      #1                  // Field this$0:Lcom/ibm/icu/text/RuleBasedBreakIterator;
     152: invokestatic  #33                 // Method com/ibm/icu/text/RuleBasedBreakIterator.access$400:(Lcom/ibm/icu/text/RuleBasedBreakIterator;)I
     155: istore        4
     157: iload_3
     158: iload_2
     159: if_icmpge     80
     162: aload_0
     163: getfield      #8                  // Field fSideBuffer:Lcom/ibm/icu/text/DictionaryBreakEngine$DequeI;
     166: invokevirtual #44                 // Method com/ibm/icu/text/DictionaryBreakEngine$DequeI.removeAllElements:()V
     169: aload_0
     170: getfield      #8                  // Field fSideBuffer:Lcom/ibm/icu/text/DictionaryBreakEngine$DequeI;
     173: iload_3
     174: invokevirtual #45                 // Method com/ibm/icu/text/DictionaryBreakEngine$DequeI.push:(I)V
     177: aload_0
     178: getfield      #8                  // Field fSideBuffer:Lcom/ibm/icu/text/DictionaryBreakEngine$DequeI;
     181: iload         4
     183: invokevirtual #45                 // Method com/ibm/icu/text/DictionaryBreakEngine$DequeI.push:(I)V
     186: aload_0
     187: getfield      #1                  // Field this$0:Lcom/ibm/icu/text/RuleBasedBreakIterator;
     190: iload_3
     191: invokestatic  #17                 // Method com/ibm/icu/text/RuleBasedBreakIterator.access$302:(Lcom/ibm/icu/text/RuleBasedBreakIterator;I)I
     194: istore        6
     196: iload         4
     198: istore        7
     200: aload_0
     201: getfield      #1                  // Field this$0:Lcom/ibm/icu/text/RuleBasedBreakIterator;
     204: invokestatic  #32                 // Method com/ibm/icu/text/RuleBasedBreakIterator.access$600:(Lcom/ibm/icu/text/RuleBasedBreakIterator;)I
     207: istore_3
     208: aload_0
     209: getfield      #1                  // Field this$0:Lcom/ibm/icu/text/RuleBasedBreakIterator;
     212: invokestatic  #33                 // Method com/ibm/icu/text/RuleBasedBreakIterator.access$400:(Lcom/ibm/icu/text/RuleBasedBreakIterator;)I
     215: istore        4
     217: iload_3
     218: iconst_m1
     219: if_icmpne     225
     222: goto          428
     225: iconst_0
     226: istore        8
     228: aload_0
     229: getfield      #1                  // Field this$0:Lcom/ibm/icu/text/RuleBasedBreakIterator;
     232: invokestatic  #40                 // Method com/ibm/icu/text/RuleBasedBreakIterator.access$800:(Lcom/ibm/icu/text/RuleBasedBreakIterator;)I
     235: ifeq          396
     238: iload_3
     239: istore        9
     241: aload_0
     242: getfield      #1                  // Field this$0:Lcom/ibm/icu/text/RuleBasedBreakIterator;
     245: invokestatic  #34                 // Method com/ibm/icu/text/RuleBasedBreakIterator.access$700:(Lcom/ibm/icu/text/RuleBasedBreakIterator;)Lcom/ibm/icu/text/RuleBasedBreakIterator$DictionaryCache;
     248: iload         6
     250: iload         9
     252: iload         7
     254: iload         4
     256: invokevirtual #41                 // Method com/ibm/icu/text/RuleBasedBreakIterator$DictionaryCache.populateDictionary:(IIII)V
     259: aload_0
     260: getfield      #1                  // Field this$0:Lcom/ibm/icu/text/RuleBasedBreakIterator;
     263: invokestatic  #34                 // Method com/ibm/icu/text/RuleBasedBreakIterator.access$700:(Lcom/ibm/icu/text/RuleBasedBreakIterator;)Lcom/ibm/icu/text/RuleBasedBreakIterator$DictionaryCache;
     266: iload         6
     268: invokevirtual #35                 // Method com/ibm/icu/text/RuleBasedBreakIterator$DictionaryCache.following:(I)Z
     271: ifeq          371
     274: aload_0
     275: getfield      #1                  // Field this$0:Lcom/ibm/icu/text/RuleBasedBreakIterator;
     278: invokestatic  #34                 // Method com/ibm/icu/text/RuleBasedBreakIterator.access$700:(Lcom/ibm/icu/text/RuleBasedBreakIterator;)Lcom/ibm/icu/text/RuleBasedBreakIterator$DictionaryCache;
     281: getfield      #36                 // Field com/ibm/icu/text/RuleBasedBreakIterator$DictionaryCache.fBoundary:I
     284: istore_3
     285: aload_0
     286: getfield      #1                  // Field this$0:Lcom/ibm/icu/text/RuleBasedBreakIterator;
     289: invokestatic  #34                 // Method com/ibm/icu/text/RuleBasedBreakIterator.access$700:(Lcom/ibm/icu/text/RuleBasedBreakIterator;)Lcom/ibm/icu/text/RuleBasedBreakIterator$DictionaryCache;
     292: getfield      #37                 // Field com/ibm/icu/text/RuleBasedBreakIterator$DictionaryCache.fStatusIndex:I
     295: istore        4
     297: iconst_1
     298: istore        8
     300: getstatic     #25                 // Field $assertionsDisabled:Z
     303: ifne          320
     306: iload_3
     307: iload         6
     309: if_icmpgt     320
     312: new           #26                 // class java/lang/AssertionError
     315: dup
     316: invokespecial #27                 // Method java/lang/AssertionError."<init>":()V
     319: athrow
     320: iload_3
     321: iload_2
     322: if_icmplt     328
     325: goto          371
     328: getstatic     #25                 // Field $assertionsDisabled:Z
     331: ifne          348
     334: iload_3
     335: iload         9
     337: if_icmple     348
     340: new           #26                 // class java/lang/AssertionError
     343: dup
     344: invokespecial #27                 // Method java/lang/AssertionError."<init>":()V
     347: athrow
     348: aload_0
     349: getfield      #8                  // Field fSideBuffer:Lcom/ibm/icu/text/DictionaryBreakEngine$DequeI;
     352: iload_3
     353: invokevirtual #45                 // Method com/ibm/icu/text/DictionaryBreakEngine$DequeI.push:(I)V
     356: aload_0
     357: getfield      #8                  // Field fSideBuffer:Lcom/ibm/icu/text/DictionaryBreakEngine$DequeI;
     360: iload         4
     362: invokevirtual #45                 // Method com/ibm/icu/text/DictionaryBreakEngine$DequeI.push:(I)V
     365: iload_3
     366: istore        6
     368: goto          259
     371: getstatic     #25                 // Field $assertionsDisabled:Z
     374: ifne          396
     377: iload_3
     378: iload         9
     380: if_icmpeq     396
     383: iload_3
     384: iload_2
     385: if_icmpge     396
     388: new           #26                 // class java/lang/AssertionError
     391: dup
     392: invokespecial #27                 // Method java/lang/AssertionError."<init>":()V
     395: athrow
     396: iload         8
     398: ifne          423
     401: iload_3
     402: iload_2
     403: if_icmpge     423
     406: aload_0
     407: getfield      #8                  // Field fSideBuffer:Lcom/ibm/icu/text/DictionaryBreakEngine$DequeI;
     410: iload_3
     411: invokevirtual #45                 // Method com/ibm/icu/text/DictionaryBreakEngine$DequeI.push:(I)V
     414: aload_0
     415: getfield      #8                  // Field fSideBuffer:Lcom/ibm/icu/text/DictionaryBreakEngine$DequeI;
     418: iload         4
     420: invokevirtual #45                 // Method com/ibm/icu/text/DictionaryBreakEngine$DequeI.push:(I)V
     423: iload_3
     424: iload_2
     425: if_icmplt     186
     428: iconst_0
     429: istore        6
     431: aload_0
     432: getfield      #8                  // Field fSideBuffer:Lcom/ibm/icu/text/DictionaryBreakEngine$DequeI;
     435: invokevirtual #46                 // Method com/ibm/icu/text/DictionaryBreakEngine$DequeI.isEmpty:()Z
     438: ifne          470
     441: aload_0
     442: getfield      #8                  // Field fSideBuffer:Lcom/ibm/icu/text/DictionaryBreakEngine$DequeI;
     445: invokevirtual #47                 // Method com/ibm/icu/text/DictionaryBreakEngine$DequeI.pop:()I
     448: istore        4
     450: aload_0
     451: getfield      #8                  // Field fSideBuffer:Lcom/ibm/icu/text/DictionaryBreakEngine$DequeI;
     454: invokevirtual #47                 // Method com/ibm/icu/text/DictionaryBreakEngine$DequeI.pop:()I
     457: istore_3
     458: aload_0
     459: iload_3
     460: iload         4
     462: iconst_1
     463: invokevirtual #43                 // Method addPreceding:(IIZ)Z
     466: pop
     467: iconst_1
     468: istore        6
     470: aload_0
     471: getfield      #8                  // Field fSideBuffer:Lcom/ibm/icu/text/DictionaryBreakEngine$DequeI;
     474: invokevirtual #46                 // Method com/ibm/icu/text/DictionaryBreakEngine$DequeI.isEmpty:()Z
     477: ifne          511
     480: aload_0
     481: getfield      #8                  // Field fSideBuffer:Lcom/ibm/icu/text/DictionaryBreakEngine$DequeI;
     484: invokevirtual #47                 // Method com/ibm/icu/text/DictionaryBreakEngine$DequeI.pop:()I
     487: istore        4
     489: aload_0
     490: getfield      #8                  // Field fSideBuffer:Lcom/ibm/icu/text/DictionaryBreakEngine$DequeI;
     493: invokevirtual #47                 // Method com/ibm/icu/text/DictionaryBreakEngine$DequeI.pop:()I
     496: istore_3
     497: aload_0
     498: iload_3
     499: iload         4
     501: iconst_0
     502: invokevirtual #43                 // Method addPreceding:(IIZ)Z
     505: ifne          470
     508: goto          511
     511: iload         6
     513: ireturn

  void addFollowing(int, int, boolean);
    Code:
       0: getstatic     #25                 // Field $assertionsDisabled:Z
       3: ifne          27
       6: iload_1
       7: aload_0
       8: getfield      #4                  // Field fBoundaries:[I
      11: aload_0
      12: getfield      #11                 // Field fEndBufIdx:I
      15: iaload
      16: if_icmpgt     27
      19: new           #26                 // class java/lang/AssertionError
      22: dup
      23: invokespecial #27                 // Method java/lang/AssertionError."<init>":()V
      26: athrow
      27: getstatic     #25                 // Field $assertionsDisabled:Z
      30: ifne          48
      33: iload_2
      34: sipush        32767
      37: if_icmple     48
      40: new           #26                 // class java/lang/AssertionError
      43: dup
      44: invokespecial #27                 // Method java/lang/AssertionError."<init>":()V
      47: athrow
      48: aload_0
      49: aload_0
      50: getfield      #11                 // Field fEndBufIdx:I
      53: iconst_1
      54: iadd
      55: invokespecial #19                 // Method modChunkSize:(I)I
      58: istore        4
      60: iload         4
      62: aload_0
      63: getfield      #10                 // Field fStartBufIdx:I
      66: if_icmpne     84
      69: aload_0
      70: aload_0
      71: aload_0
      72: getfield      #10                 // Field fStartBufIdx:I
      75: bipush        6
      77: iadd
      78: invokespecial #19                 // Method modChunkSize:(I)I
      81: putfield      #10                 // Field fStartBufIdx:I
      84: aload_0
      85: getfield      #4                  // Field fBoundaries:[I
      88: iload         4
      90: iload_1
      91: iastore
      92: aload_0
      93: getfield      #5                  // Field fStatuses:[S
      96: iload         4
      98: iload_2
      99: i2s
     100: sastore
     101: aload_0
     102: iload         4
     104: putfield      #11                 // Field fEndBufIdx:I
     107: iload_3
     108: iconst_1
     109: if_icmpne     126
     112: aload_0
     113: iload         4
     115: putfield      #13                 // Field fBufIdx:I
     118: aload_0
     119: iload_1
     120: putfield      #12                 // Field fTextIdx:I
     123: goto          149
     126: getstatic     #25                 // Field $assertionsDisabled:Z
     129: ifne          149
     132: iload         4
     134: aload_0
     135: getfield      #13                 // Field fBufIdx:I
     138: if_icmpne     149
     141: new           #26                 // class java/lang/AssertionError
     144: dup
     145: invokespecial #27                 // Method java/lang/AssertionError."<init>":()V
     148: athrow
     149: return

  boolean addPreceding(int, int, boolean);
    Code:
       0: getstatic     #25                 // Field $assertionsDisabled:Z
       3: ifne          27
       6: iload_1
       7: aload_0
       8: getfield      #4                  // Field fBoundaries:[I
      11: aload_0
      12: getfield      #10                 // Field fStartBufIdx:I
      15: iaload
      16: if_icmplt     27
      19: new           #26                 // class java/lang/AssertionError
      22: dup
      23: invokespecial #27                 // Method java/lang/AssertionError."<init>":()V
      26: athrow
      27: getstatic     #25                 // Field $assertionsDisabled:Z
      30: ifne          48
      33: iload_2
      34: sipush        32767
      37: if_icmple     48
      40: new           #26                 // class java/lang/AssertionError
      43: dup
      44: invokespecial #27                 // Method java/lang/AssertionError."<init>":()V
      47: athrow
      48: aload_0
      49: aload_0
      50: getfield      #10                 // Field fStartBufIdx:I
      53: iconst_1
      54: isub
      55: invokespecial #19                 // Method modChunkSize:(I)I
      58: istore        4
      60: iload         4
      62: aload_0
      63: getfield      #11                 // Field fEndBufIdx:I
      66: if_icmpne     100
      69: aload_0
      70: getfield      #13                 // Field fBufIdx:I
      73: aload_0
      74: getfield      #11                 // Field fEndBufIdx:I
      77: if_icmpne     86
      80: iload_3
      81: ifne          86
      84: iconst_0
      85: ireturn
      86: aload_0
      87: aload_0
      88: aload_0
      89: getfield      #11                 // Field fEndBufIdx:I
      92: iconst_1
      93: isub
      94: invokespecial #19                 // Method modChunkSize:(I)I
      97: putfield      #11                 // Field fEndBufIdx:I
     100: aload_0
     101: getfield      #4                  // Field fBoundaries:[I
     104: iload         4
     106: iload_1
     107: iastore
     108: aload_0
     109: getfield      #5                  // Field fStatuses:[S
     112: iload         4
     114: iload_2
     115: i2s
     116: sastore
     117: aload_0
     118: iload         4
     120: putfield      #10                 // Field fStartBufIdx:I
     123: iload_3
     124: iconst_1
     125: if_icmpne     139
     128: aload_0
     129: iload         4
     131: putfield      #13                 // Field fBufIdx:I
     134: aload_0
     135: iload_1
     136: putfield      #12                 // Field fTextIdx:I
     139: iconst_1
     140: ireturn

  boolean seek(int);
    Code:
       0: iload_1
       1: aload_0
       2: getfield      #4                  // Field fBoundaries:[I
       5: aload_0
       6: getfield      #10                 // Field fStartBufIdx:I
       9: iaload
      10: if_icmplt     26
      13: iload_1
      14: aload_0
      15: getfield      #4                  // Field fBoundaries:[I
      18: aload_0
      19: getfield      #11                 // Field fEndBufIdx:I
      22: iaload
      23: if_icmple     28
      26: iconst_0
      27: ireturn
      28: iload_1
      29: aload_0
      30: getfield      #4                  // Field fBoundaries:[I
      33: aload_0
      34: getfield      #10                 // Field fStartBufIdx:I
      37: iaload
      38: if_icmpne     64
      41: aload_0
      42: aload_0
      43: getfield      #10                 // Field fStartBufIdx:I
      46: putfield      #13                 // Field fBufIdx:I
      49: aload_0
      50: aload_0
      51: getfield      #4                  // Field fBoundaries:[I
      54: aload_0
      55: getfield      #13                 // Field fBufIdx:I
      58: iaload
      59: putfield      #12                 // Field fTextIdx:I
      62: iconst_1
      63: ireturn
      64: iload_1
      65: aload_0
      66: getfield      #4                  // Field fBoundaries:[I
      69: aload_0
      70: getfield      #11                 // Field fEndBufIdx:I
      73: iaload
      74: if_icmpne     100
      77: aload_0
      78: aload_0
      79: getfield      #11                 // Field fEndBufIdx:I
      82: putfield      #13                 // Field fBufIdx:I
      85: aload_0
      86: aload_0
      87: getfield      #4                  // Field fBoundaries:[I
      90: aload_0
      91: getfield      #13                 // Field fBufIdx:I
      94: iaload
      95: putfield      #12                 // Field fTextIdx:I
      98: iconst_1
      99: ireturn
     100: aload_0
     101: getfield      #10                 // Field fStartBufIdx:I
     104: istore_2
     105: aload_0
     106: getfield      #11                 // Field fEndBufIdx:I
     109: istore_3
     110: iload_2
     111: iload_3
     112: if_icmpeq     172
     115: iload_2
     116: iload_3
     117: iadd
     118: iload_2
     119: iload_3
     120: if_icmple     129
     123: sipush        128
     126: goto          130
     129: iconst_0
     130: iadd
     131: iconst_2
     132: idiv
     133: istore        4
     135: aload_0
     136: iload         4
     138: invokespecial #19                 // Method modChunkSize:(I)I
     141: istore        4
     143: aload_0
     144: getfield      #4                  // Field fBoundaries:[I
     147: iload         4
     149: iaload
     150: iload_1
     151: if_icmple     160
     154: iload         4
     156: istore_3
     157: goto          169
     160: aload_0
     161: iload         4
     163: iconst_1
     164: iadd
     165: invokespecial #19                 // Method modChunkSize:(I)I
     168: istore_2
     169: goto          110
     172: getstatic     #25                 // Field $assertionsDisabled:Z
     175: ifne          196
     178: aload_0
     179: getfield      #4                  // Field fBoundaries:[I
     182: iload_3
     183: iaload
     184: iload_1
     185: if_icmpgt     196
     188: new           #26                 // class java/lang/AssertionError
     191: dup
     192: invokespecial #27                 // Method java/lang/AssertionError."<init>":()V
     195: athrow
     196: aload_0
     197: aload_0
     198: iload_3
     199: iconst_1
     200: isub
     201: invokespecial #19                 // Method modChunkSize:(I)I
     204: putfield      #13                 // Field fBufIdx:I
     207: aload_0
     208: aload_0
     209: getfield      #4                  // Field fBoundaries:[I
     212: aload_0
     213: getfield      #13                 // Field fBufIdx:I
     216: iaload
     217: putfield      #12                 // Field fTextIdx:I
     220: getstatic     #25                 // Field $assertionsDisabled:Z
     223: ifne          242
     226: aload_0
     227: getfield      #12                 // Field fTextIdx:I
     230: iload_1
     231: if_icmple     242
     234: new           #26                 // class java/lang/AssertionError
     237: dup
     238: invokespecial #27                 // Method java/lang/AssertionError."<init>":()V
     241: athrow
     242: iconst_1
     243: ireturn

  com.ibm.icu.text.RuleBasedBreakIterator$BreakCache(com.ibm.icu.text.RuleBasedBreakIterator, com.ibm.icu.text.RuleBasedBreakIterator$BreakCache);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lcom/ibm/icu/text/RuleBasedBreakIterator;
       5: aload_0
       6: invokespecial #2                  // Method java/lang/Object."<init>":()V
       9: aload_0
      10: sipush        128
      13: newarray       int
      15: putfield      #4                  // Field fBoundaries:[I
      18: aload_0
      19: sipush        128
      22: newarray       short
      24: putfield      #5                  // Field fStatuses:[S
      27: aload_0
      28: new           #6                  // class com/ibm/icu/text/DictionaryBreakEngine$DequeI
      31: dup
      32: invokespecial #7                  // Method com/ibm/icu/text/DictionaryBreakEngine$DequeI."<init>":()V
      35: putfield      #8                  // Field fSideBuffer:Lcom/ibm/icu/text/DictionaryBreakEngine$DequeI;
      38: aload_0
      39: aload_2
      40: getfield      #10                 // Field fStartBufIdx:I
      43: putfield      #10                 // Field fStartBufIdx:I
      46: aload_0
      47: aload_2
      48: getfield      #11                 // Field fEndBufIdx:I
      51: putfield      #11                 // Field fEndBufIdx:I
      54: aload_0
      55: aload_2
      56: getfield      #12                 // Field fTextIdx:I
      59: putfield      #12                 // Field fTextIdx:I
      62: aload_0
      63: aload_2
      64: getfield      #13                 // Field fBufIdx:I
      67: putfield      #13                 // Field fBufIdx:I
      70: aload_0
      71: aload_2
      72: getfield      #4                  // Field fBoundaries:[I
      75: invokevirtual #49                 // Method "[I".clone:()Ljava/lang/Object;
      78: checkcast     #50                 // class "[I"
      81: putfield      #4                  // Field fBoundaries:[I
      84: aload_0
      85: aload_2
      86: getfield      #5                  // Field fStatuses:[S
      89: invokevirtual #51                 // Method "[S".clone:()Ljava/lang/Object;
      92: checkcast     #52                 // class "[S"
      95: putfield      #5                  // Field fStatuses:[S
      98: aload_0
      99: new           #6                  // class com/ibm/icu/text/DictionaryBreakEngine$DequeI
     102: dup
     103: invokespecial #7                  // Method com/ibm/icu/text/DictionaryBreakEngine$DequeI."<init>":()V
     106: putfield      #8                  // Field fSideBuffer:Lcom/ibm/icu/text/DictionaryBreakEngine$DequeI;
     109: return

  void dumpCache();
    Code:
       0: getstatic     #53                 // Field java/lang/System.out:Ljava/io/PrintStream;
       3: ldc           #54                 // String fTextIdx:%d   fBufIdx:%d%n
       5: iconst_2
       6: anewarray     #55                 // class java/lang/Object
       9: dup
      10: iconst_0
      11: aload_0
      12: getfield      #12                 // Field fTextIdx:I
      15: invokestatic  #56                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      18: aastore
      19: dup
      20: iconst_1
      21: aload_0
      22: getfield      #13                 // Field fBufIdx:I
      25: invokestatic  #56                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      28: aastore
      29: invokevirtual #57                 // Method java/io/PrintStream.printf:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintStream;
      32: pop
      33: aload_0
      34: getfield      #10                 // Field fStartBufIdx:I
      37: istore_1
      38: getstatic     #53                 // Field java/lang/System.out:Ljava/io/PrintStream;
      41: ldc           #58                 // String %d  %d%n
      43: iconst_2
      44: anewarray     #55                 // class java/lang/Object
      47: dup
      48: iconst_0
      49: iload_1
      50: invokestatic  #56                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      53: aastore
      54: dup
      55: iconst_1
      56: aload_0
      57: getfield      #4                  // Field fBoundaries:[I
      60: iload_1
      61: iaload
      62: invokestatic  #56                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      65: aastore
      66: invokevirtual #57                 // Method java/io/PrintStream.printf:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintStream;
      69: pop
      70: iload_1
      71: aload_0
      72: getfield      #11                 // Field fEndBufIdx:I
      75: if_icmpne     81
      78: goto          92
      81: aload_0
      82: iload_1
      83: iconst_1
      84: iadd
      85: invokespecial #19                 // Method modChunkSize:(I)I
      88: istore_1
      89: goto          38
      92: return

  private final int modChunkSize(int);
    Code:
       0: iload_1
       1: bipush        127
       3: iand
       4: ireturn

  static {};
    Code:
       0: ldc           #59                 // class com/ibm/icu/text/RuleBasedBreakIterator
       2: invokevirtual #60                 // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #25                 // Field $assertionsDisabled:Z
      16: return
}
