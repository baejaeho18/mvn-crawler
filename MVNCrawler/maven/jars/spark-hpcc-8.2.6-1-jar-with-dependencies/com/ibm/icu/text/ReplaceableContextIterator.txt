Compiled from "ReplaceableContextIterator.java"
class com.ibm.icu.text.ReplaceableContextIterator implements com.ibm.icu.impl.UCaseProps$ContextIterator {
  protected com.ibm.icu.text.Replaceable rep;

  protected int index;

  protected int limit;

  protected int cpStart;

  protected int cpLimit;

  protected int contextStart;

  protected int contextLimit;

  protected int dir;

  protected boolean reachedLimit;

  com.ibm.icu.text.ReplaceableContextIterator();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aconst_null
       6: putfield      #2                  // Field rep:Lcom/ibm/icu/text/Replaceable;
       9: aload_0
      10: aload_0
      11: aload_0
      12: aload_0
      13: aload_0
      14: aload_0
      15: iconst_0
      16: dup_x1
      17: putfield      #3                  // Field contextLimit:I
      20: dup_x1
      21: putfield      #4                  // Field contextStart:I
      24: dup_x1
      25: putfield      #5                  // Field index:I
      28: dup_x1
      29: putfield      #6                  // Field cpLimit:I
      32: dup_x1
      33: putfield      #7                  // Field cpStart:I
      36: putfield      #8                  // Field limit:I
      39: aload_0
      40: iconst_0
      41: putfield      #9                  // Field dir:I
      44: aload_0
      45: iconst_0
      46: putfield      #10                 // Field reachedLimit:Z
      49: return

  public void setText(com.ibm.icu.text.Replaceable);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2                  // Field rep:Lcom/ibm/icu/text/Replaceable;
       5: aload_0
       6: aload_0
       7: aload_1
       8: invokeinterface #11,  1           // InterfaceMethod com/ibm/icu/text/Replaceable.length:()I
      13: dup_x1
      14: putfield      #3                  // Field contextLimit:I
      17: putfield      #8                  // Field limit:I
      20: aload_0
      21: aload_0
      22: aload_0
      23: aload_0
      24: iconst_0
      25: dup_x1
      26: putfield      #4                  // Field contextStart:I
      29: dup_x1
      30: putfield      #5                  // Field index:I
      33: dup_x1
      34: putfield      #6                  // Field cpLimit:I
      37: putfield      #7                  // Field cpStart:I
      40: aload_0
      41: iconst_0
      42: putfield      #9                  // Field dir:I
      45: aload_0
      46: iconst_0
      47: putfield      #10                 // Field reachedLimit:Z
      50: return

  public void setIndex(int);
    Code:
       0: aload_0
       1: aload_0
       2: iload_1
       3: dup_x1
       4: putfield      #6                  // Field cpLimit:I
       7: putfield      #7                  // Field cpStart:I
      10: aload_0
      11: iconst_0
      12: putfield      #5                  // Field index:I
      15: aload_0
      16: iconst_0
      17: putfield      #9                  // Field dir:I
      20: aload_0
      21: iconst_0
      22: putfield      #10                 // Field reachedLimit:Z
      25: return

  public int getCaseMapCPStart();
    Code:
       0: aload_0
       1: getfield      #7                  // Field cpStart:I
       4: ireturn

  public void setLimit(int);
    Code:
       0: iconst_0
       1: iload_1
       2: if_icmpgt     26
       5: iload_1
       6: aload_0
       7: getfield      #2                  // Field rep:Lcom/ibm/icu/text/Replaceable;
      10: invokeinterface #11,  1           // InterfaceMethod com/ibm/icu/text/Replaceable.length:()I
      15: if_icmpgt     26
      18: aload_0
      19: iload_1
      20: putfield      #8                  // Field limit:I
      23: goto          39
      26: aload_0
      27: aload_0
      28: getfield      #2                  // Field rep:Lcom/ibm/icu/text/Replaceable;
      31: invokeinterface #11,  1           // InterfaceMethod com/ibm/icu/text/Replaceable.length:()I
      36: putfield      #8                  // Field limit:I
      39: aload_0
      40: iconst_0
      41: putfield      #10                 // Field reachedLimit:Z
      44: return

  public void setContextLimits(int, int);
    Code:
       0: iload_1
       1: ifge          12
       4: aload_0
       5: iconst_0
       6: putfield      #4                  // Field contextStart:I
       9: goto          46
      12: iload_1
      13: aload_0
      14: getfield      #2                  // Field rep:Lcom/ibm/icu/text/Replaceable;
      17: invokeinterface #11,  1           // InterfaceMethod com/ibm/icu/text/Replaceable.length:()I
      22: if_icmpgt     33
      25: aload_0
      26: iload_1
      27: putfield      #4                  // Field contextStart:I
      30: goto          46
      33: aload_0
      34: aload_0
      35: getfield      #2                  // Field rep:Lcom/ibm/icu/text/Replaceable;
      38: invokeinterface #11,  1           // InterfaceMethod com/ibm/icu/text/Replaceable.length:()I
      43: putfield      #4                  // Field contextStart:I
      46: iload_2
      47: aload_0
      48: getfield      #4                  // Field contextStart:I
      51: if_icmpge     65
      54: aload_0
      55: aload_0
      56: getfield      #4                  // Field contextStart:I
      59: putfield      #3                  // Field contextLimit:I
      62: goto          99
      65: iload_2
      66: aload_0
      67: getfield      #2                  // Field rep:Lcom/ibm/icu/text/Replaceable;
      70: invokeinterface #11,  1           // InterfaceMethod com/ibm/icu/text/Replaceable.length:()I
      75: if_icmpgt     86
      78: aload_0
      79: iload_2
      80: putfield      #3                  // Field contextLimit:I
      83: goto          99
      86: aload_0
      87: aload_0
      88: getfield      #2                  // Field rep:Lcom/ibm/icu/text/Replaceable;
      91: invokeinterface #11,  1           // InterfaceMethod com/ibm/icu/text/Replaceable.length:()I
      96: putfield      #3                  // Field contextLimit:I
      99: aload_0
     100: iconst_0
     101: putfield      #10                 // Field reachedLimit:Z
     104: return

  public int nextCaseMapCP();
    Code:
       0: aload_0
       1: getfield      #6                  // Field cpLimit:I
       4: aload_0
       5: getfield      #8                  // Field limit:I
       8: if_icmpge     48
      11: aload_0
      12: aload_0
      13: getfield      #6                  // Field cpLimit:I
      16: putfield      #7                  // Field cpStart:I
      19: aload_0
      20: getfield      #2                  // Field rep:Lcom/ibm/icu/text/Replaceable;
      23: aload_0
      24: getfield      #6                  // Field cpLimit:I
      27: invokeinterface #12,  2           // InterfaceMethod com/ibm/icu/text/Replaceable.char32At:(I)I
      32: istore_1
      33: aload_0
      34: dup
      35: getfield      #6                  // Field cpLimit:I
      38: iload_1
      39: invokestatic  #13                 // Method com/ibm/icu/text/UTF16.getCharCount:(I)I
      42: iadd
      43: putfield      #6                  // Field cpLimit:I
      46: iload_1
      47: ireturn
      48: iconst_m1
      49: ireturn

  public int replace(java.lang.String);
    Code:
       0: aload_1
       1: invokevirtual #14                 // Method java/lang/String.length:()I
       4: aload_0
       5: getfield      #6                  // Field cpLimit:I
       8: aload_0
       9: getfield      #7                  // Field cpStart:I
      12: isub
      13: isub
      14: istore_2
      15: aload_0
      16: getfield      #2                  // Field rep:Lcom/ibm/icu/text/Replaceable;
      19: aload_0
      20: getfield      #7                  // Field cpStart:I
      23: aload_0
      24: getfield      #6                  // Field cpLimit:I
      27: aload_1
      28: invokeinterface #15,  4           // InterfaceMethod com/ibm/icu/text/Replaceable.replace:(IILjava/lang/String;)V
      33: aload_0
      34: dup
      35: getfield      #6                  // Field cpLimit:I
      38: iload_2
      39: iadd
      40: putfield      #6                  // Field cpLimit:I
      43: aload_0
      44: dup
      45: getfield      #8                  // Field limit:I
      48: iload_2
      49: iadd
      50: putfield      #8                  // Field limit:I
      53: aload_0
      54: dup
      55: getfield      #3                  // Field contextLimit:I
      58: iload_2
      59: iadd
      60: putfield      #3                  // Field contextLimit:I
      63: iload_2
      64: ireturn

  public boolean didReachLimit();
    Code:
       0: aload_0
       1: getfield      #10                 // Field reachedLimit:Z
       4: ireturn

  public void reset(int);
    Code:
       0: iload_1
       1: ifle          20
       4: aload_0
       5: iconst_1
       6: putfield      #9                  // Field dir:I
       9: aload_0
      10: aload_0
      11: getfield      #6                  // Field cpLimit:I
      14: putfield      #5                  // Field index:I
      17: goto          50
      20: iload_1
      21: ifge          40
      24: aload_0
      25: iconst_m1
      26: putfield      #9                  // Field dir:I
      29: aload_0
      30: aload_0
      31: getfield      #7                  // Field cpStart:I
      34: putfield      #5                  // Field index:I
      37: goto          50
      40: aload_0
      41: iconst_0
      42: putfield      #9                  // Field dir:I
      45: aload_0
      46: iconst_0
      47: putfield      #5                  // Field index:I
      50: aload_0
      51: iconst_0
      52: putfield      #10                 // Field reachedLimit:Z
      55: return

  public int next();
    Code:
       0: aload_0
       1: getfield      #9                  // Field dir:I
       4: ifle          55
       7: aload_0
       8: getfield      #5                  // Field index:I
      11: aload_0
      12: getfield      #3                  // Field contextLimit:I
      15: if_icmpge     47
      18: aload_0
      19: getfield      #2                  // Field rep:Lcom/ibm/icu/text/Replaceable;
      22: aload_0
      23: getfield      #5                  // Field index:I
      26: invokeinterface #12,  2           // InterfaceMethod com/ibm/icu/text/Replaceable.char32At:(I)I
      31: istore_1
      32: aload_0
      33: dup
      34: getfield      #5                  // Field index:I
      37: iload_1
      38: invokestatic  #13                 // Method com/ibm/icu/text/UTF16.getCharCount:(I)I
      41: iadd
      42: putfield      #5                  // Field index:I
      45: iload_1
      46: ireturn
      47: aload_0
      48: iconst_1
      49: putfield      #10                 // Field reachedLimit:Z
      52: goto          104
      55: aload_0
      56: getfield      #9                  // Field dir:I
      59: ifge          104
      62: aload_0
      63: getfield      #5                  // Field index:I
      66: aload_0
      67: getfield      #4                  // Field contextStart:I
      70: if_icmple     104
      73: aload_0
      74: getfield      #2                  // Field rep:Lcom/ibm/icu/text/Replaceable;
      77: aload_0
      78: getfield      #5                  // Field index:I
      81: iconst_1
      82: isub
      83: invokeinterface #12,  2           // InterfaceMethod com/ibm/icu/text/Replaceable.char32At:(I)I
      88: istore_1
      89: aload_0
      90: dup
      91: getfield      #5                  // Field index:I
      94: iload_1
      95: invokestatic  #13                 // Method com/ibm/icu/text/UTF16.getCharCount:(I)I
      98: isub
      99: putfield      #5                  // Field index:I
     102: iload_1
     103: ireturn
     104: iconst_m1
     105: ireturn
}
