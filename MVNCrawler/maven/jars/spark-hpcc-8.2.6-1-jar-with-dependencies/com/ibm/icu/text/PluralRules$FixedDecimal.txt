Compiled from "PluralRules.java"
public class com.ibm.icu.text.PluralRules$FixedDecimal extends java.lang.Number implements java.lang.Comparable<com.ibm.icu.text.PluralRules$FixedDecimal>, com.ibm.icu.text.PluralRules$IFixedDecimal {
  private static final long serialVersionUID;

  final double source;

  final int visibleDecimalDigitCount;

  final int visibleDecimalDigitCountWithoutTrailingZeros;

  final long decimalDigits;

  final long decimalDigitsWithoutTrailingZeros;

  final long integerValue;

  final boolean hasIntegerValue;

  final boolean isNegative;

  private final int baseFactor;

  static final long MAX;

  private static final long MAX_INTEGER_PART;

  public double getSource();
    Code:
       0: aload_0
       1: getfield      #2                  // Field source:D
       4: dreturn

  public int getVisibleDecimalDigitCount();
    Code:
       0: aload_0
       1: getfield      #3                  // Field visibleDecimalDigitCount:I
       4: ireturn

  public int getVisibleDecimalDigitCountWithoutTrailingZeros();
    Code:
       0: aload_0
       1: getfield      #4                  // Field visibleDecimalDigitCountWithoutTrailingZeros:I
       4: ireturn

  public long getDecimalDigits();
    Code:
       0: aload_0
       1: getfield      #5                  // Field decimalDigits:J
       4: lreturn

  public long getDecimalDigitsWithoutTrailingZeros();
    Code:
       0: aload_0
       1: getfield      #6                  // Field decimalDigitsWithoutTrailingZeros:J
       4: lreturn

  public long getIntegerValue();
    Code:
       0: aload_0
       1: getfield      #7                  // Field integerValue:J
       4: lreturn

  public boolean isHasIntegerValue();
    Code:
       0: aload_0
       1: getfield      #8                  // Field hasIntegerValue:Z
       4: ireturn

  public boolean isNegative();
    Code:
       0: aload_0
       1: getfield      #9                  // Field isNegative:Z
       4: ireturn

  public int getBaseFactor();
    Code:
       0: aload_0
       1: getfield      #1                  // Field baseFactor:I
       4: ireturn

  public com.ibm.icu.text.PluralRules$FixedDecimal(double, int, long);
    Code:
       0: aload_0
       1: invokespecial #10                 // Method java/lang/Number."<init>":()V
       4: aload_0
       5: dload_1
       6: dconst_0
       7: dcmpg
       8: ifge          15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: putfield      #9                  // Field isNegative:Z
      19: aload_0
      20: aload_0
      21: getfield      #9                  // Field isNegative:Z
      24: ifeq          32
      27: dload_1
      28: dneg
      29: goto          33
      32: dload_1
      33: putfield      #2                  // Field source:D
      36: aload_0
      37: iload_3
      38: putfield      #3                  // Field visibleDecimalDigitCount:I
      41: aload_0
      42: lload         4
      44: putfield      #5                  // Field decimalDigits:J
      47: aload_0
      48: dload_1
      49: ldc2_w        #12                 // double 1.0E18d
      52: dcmpl
      53: ifle          62
      56: ldc2_w        #14                 // long 1000000000000000000l
      59: goto          64
      62: dload_1
      63: d2l
      64: putfield      #7                  // Field integerValue:J
      67: aload_0
      68: aload_0
      69: getfield      #2                  // Field source:D
      72: aload_0
      73: getfield      #7                  // Field integerValue:J
      76: l2d
      77: dcmpl
      78: ifne          85
      81: iconst_1
      82: goto          86
      85: iconst_0
      86: putfield      #8                  // Field hasIntegerValue:Z
      89: lload         4
      91: lconst_0
      92: lcmp
      93: ifne          109
      96: aload_0
      97: lconst_0
      98: putfield      #6                  // Field decimalDigitsWithoutTrailingZeros:J
     101: aload_0
     102: iconst_0
     103: putfield      #4                  // Field visibleDecimalDigitCountWithoutTrailingZeros:I
     106: goto          153
     109: lload         4
     111: lstore        6
     113: iload_3
     114: istore        8
     116: lload         6
     118: ldc2_w        #16                 // long 10l
     121: lrem
     122: lconst_0
     123: lcmp
     124: ifne          141
     127: lload         6
     129: ldc2_w        #16                 // long 10l
     132: ldiv
     133: lstore        6
     135: iinc          8, -1
     138: goto          116
     141: aload_0
     142: lload         6
     144: putfield      #6                  // Field decimalDigitsWithoutTrailingZeros:J
     147: aload_0
     148: iload         8
     150: putfield      #4                  // Field visibleDecimalDigitCountWithoutTrailingZeros:I
     153: aload_0
     154: ldc2_w        #18                 // double 10.0d
     157: iload_3
     158: i2d
     159: invokestatic  #20                 // Method java/lang/Math.pow:(DD)D
     162: d2i
     163: putfield      #1                  // Field baseFactor:I
     166: return

  public com.ibm.icu.text.PluralRules$FixedDecimal(double, int);
    Code:
       0: aload_0
       1: dload_1
       2: iload_3
       3: dload_1
       4: iload_3
       5: invokestatic  #21                 // Method getFractionalDigits:(DI)I
       8: i2l
       9: invokespecial #22                 // Method "<init>":(DIJ)V
      12: return

  private static int getFractionalDigits(double, int);
    Code:
       0: iload_2
       1: ifne          6
       4: iconst_0
       5: ireturn
       6: dload_0
       7: dconst_0
       8: dcmpg
       9: ifge          15
      12: dload_0
      13: dneg
      14: dstore_0
      15: ldc2_w        #18                 // double 10.0d
      18: iload_2
      19: i2d
      20: invokestatic  #20                 // Method java/lang/Math.pow:(DD)D
      23: d2i
      24: istore_3
      25: dload_0
      26: iload_3
      27: i2d
      28: dmul
      29: invokestatic  #23                 // Method java/lang/Math.round:(D)J
      32: lstore        4
      34: lload         4
      36: iload_3
      37: i2l
      38: lrem
      39: l2i
      40: ireturn

  public com.ibm.icu.text.PluralRules$FixedDecimal(double);
    Code:
       0: aload_0
       1: dload_1
       2: dload_1
       3: invokestatic  #24                 // Method decimals:(D)I
       6: invokespecial #25                 // Method "<init>":(DI)V
       9: return

  public com.ibm.icu.text.PluralRules$FixedDecimal(long);
    Code:
       0: aload_0
       1: lload_1
       2: l2d
       3: iconst_0
       4: invokespecial #25                 // Method "<init>":(DI)V
       7: return

  public static int decimals(double);
    Code:
       0: dload_0
       1: invokestatic  #26                 // Method java/lang/Double.isInfinite:(D)Z
       4: ifne          14
       7: dload_0
       8: invokestatic  #27                 // Method java/lang/Double.isNaN:(D)Z
      11: ifeq          16
      14: iconst_0
      15: ireturn
      16: dload_0
      17: dconst_0
      18: dcmpg
      19: ifge          25
      22: dload_0
      23: dneg
      24: dstore_0
      25: dload_0
      26: dload_0
      27: invokestatic  #28                 // Method java/lang/Math.floor:(D)D
      30: dcmpl
      31: ifne          36
      34: iconst_0
      35: ireturn
      36: dload_0
      37: ldc2_w        #29                 // double 1.0E9d
      40: dcmpg
      41: ifge          96
      44: dload_0
      45: ldc2_w        #31                 // double 1000000.0d
      48: dmul
      49: d2l
      50: ldc2_w        #33                 // long 1000000l
      53: lrem
      54: lstore_2
      55: bipush        10
      57: istore        4
      59: bipush        6
      61: istore        5
      63: iload         5
      65: ifle          94
      68: lload_2
      69: iload         4
      71: i2l
      72: lrem
      73: lconst_0
      74: lcmp
      75: ifeq          81
      78: iload         5
      80: ireturn
      81: iload         4
      83: bipush        10
      85: imul
      86: istore        4
      88: iinc          5, -1
      91: goto          63
      94: iconst_0
      95: ireturn
      96: getstatic     #35                 // Field java/util/Locale.ENGLISH:Ljava/util/Locale;
      99: ldc           #36                 // String %1.15e
     101: iconst_1
     102: anewarray     #37                 // class java/lang/Object
     105: dup
     106: iconst_0
     107: dload_0
     108: invokestatic  #38                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
     111: aastore
     112: invokestatic  #39                 // Method java/lang/String.format:(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
     115: astore_2
     116: aload_2
     117: bipush        101
     119: invokevirtual #40                 // Method java/lang/String.lastIndexOf:(I)I
     122: istore_3
     123: iload_3
     124: iconst_1
     125: iadd
     126: istore        4
     128: aload_2
     129: iload         4
     131: invokevirtual #41                 // Method java/lang/String.charAt:(I)C
     134: bipush        43
     136: if_icmpne     142
     139: iinc          4, 1
     142: aload_2
     143: iload         4
     145: invokevirtual #42                 // Method java/lang/String.substring:(I)Ljava/lang/String;
     148: astore        5
     150: aload         5
     152: invokestatic  #43                 // Method java/lang/Integer.parseInt:(Ljava/lang/String;)I
     155: istore        6
     157: iload_3
     158: iconst_2
     159: isub
     160: iload         6
     162: isub
     163: istore        7
     165: iload         7
     167: ifge          172
     170: iconst_0
     171: ireturn
     172: iload_3
     173: iconst_1
     174: isub
     175: istore        8
     177: iload         7
     179: ifle          205
     182: aload_2
     183: iload         8
     185: invokevirtual #41                 // Method java/lang/String.charAt:(I)C
     188: bipush        48
     190: if_icmpeq     196
     193: goto          205
     196: iinc          7, -1
     199: iinc          8, -1
     202: goto          177
     205: iload         7
     207: ireturn

  public com.ibm.icu.text.PluralRules$FixedDecimal(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #44                 // Method java/lang/Double.parseDouble:(Ljava/lang/String;)D
       5: aload_1
       6: invokestatic  #45                 // Method getVisibleFractionCount:(Ljava/lang/String;)I
       9: invokespecial #25                 // Method "<init>":(DI)V
      12: return

  private static int getVisibleFractionCount(java.lang.String);
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method java/lang/String.trim:()Ljava/lang/String;
       4: astore_0
       5: aload_0
       6: bipush        46
       8: invokevirtual #47                 // Method java/lang/String.indexOf:(I)I
      11: iconst_1
      12: iadd
      13: istore_1
      14: iload_1
      15: ifne          20
      18: iconst_0
      19: ireturn
      20: aload_0
      21: invokevirtual #48                 // Method java/lang/String.length:()I
      24: iload_1
      25: isub
      26: ireturn

  public double getPluralOperand(com.ibm.icu.text.PluralRules$Operand);
    Code:
       0: getstatic     #49                 // Field com/ibm/icu/text/PluralRules$2.$SwitchMap$com$ibm$icu$text$PluralRules$Operand:[I
       3: aload_1
       4: invokevirtual #50                 // Method com/ibm/icu/text/PluralRules$Operand.ordinal:()I
       7: iaload
       8: tableswitch   { // 1 to 6
                     1: 48
                     2: 53
                     3: 59
                     4: 65
                     5: 71
                     6: 77
               default: 83
          }
      48: aload_0
      49: getfield      #2                  // Field source:D
      52: dreturn
      53: aload_0
      54: getfield      #7                  // Field integerValue:J
      57: l2d
      58: dreturn
      59: aload_0
      60: getfield      #5                  // Field decimalDigits:J
      63: l2d
      64: dreturn
      65: aload_0
      66: getfield      #6                  // Field decimalDigitsWithoutTrailingZeros:J
      69: l2d
      70: dreturn
      71: aload_0
      72: getfield      #3                  // Field visibleDecimalDigitCount:I
      75: i2d
      76: dreturn
      77: aload_0
      78: getfield      #4                  // Field visibleDecimalDigitCountWithoutTrailingZeros:I
      81: i2d
      82: dreturn
      83: aload_0
      84: getfield      #2                  // Field source:D
      87: dreturn

  public static com.ibm.icu.text.PluralRules$Operand getOperand(java.lang.String);
    Code:
       0: aload_0
       1: invokestatic  #51                 // Method com/ibm/icu/text/PluralRules$Operand.valueOf:(Ljava/lang/String;)Lcom/ibm/icu/text/PluralRules$Operand;
       4: areturn

  public int compareTo(com.ibm.icu.text.PluralRules$FixedDecimal);
    Code:
       0: aload_0
       1: getfield      #7                  // Field integerValue:J
       4: aload_1
       5: getfield      #7                  // Field integerValue:J
       8: lcmp
       9: ifeq          30
      12: aload_0
      13: getfield      #7                  // Field integerValue:J
      16: aload_1
      17: getfield      #7                  // Field integerValue:J
      20: lcmp
      21: ifge          28
      24: iconst_m1
      25: goto          29
      28: iconst_1
      29: ireturn
      30: aload_0
      31: getfield      #2                  // Field source:D
      34: aload_1
      35: getfield      #2                  // Field source:D
      38: dcmpl
      39: ifeq          60
      42: aload_0
      43: getfield      #2                  // Field source:D
      46: aload_1
      47: getfield      #2                  // Field source:D
      50: dcmpg
      51: ifge          58
      54: iconst_m1
      55: goto          59
      58: iconst_1
      59: ireturn
      60: aload_0
      61: getfield      #3                  // Field visibleDecimalDigitCount:I
      64: aload_1
      65: getfield      #3                  // Field visibleDecimalDigitCount:I
      68: if_icmpeq     88
      71: aload_0
      72: getfield      #3                  // Field visibleDecimalDigitCount:I
      75: aload_1
      76: getfield      #3                  // Field visibleDecimalDigitCount:I
      79: if_icmpge     86
      82: iconst_m1
      83: goto          87
      86: iconst_1
      87: ireturn
      88: aload_0
      89: getfield      #5                  // Field decimalDigits:J
      92: aload_1
      93: getfield      #5                  // Field decimalDigits:J
      96: lsub
      97: lstore_2
      98: lload_2
      99: lconst_0
     100: lcmp
     101: ifeq          116
     104: lload_2
     105: lconst_0
     106: lcmp
     107: ifge          114
     110: iconst_m1
     111: goto          115
     114: iconst_1
     115: ireturn
     116: iconst_0
     117: ireturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: iconst_0
       5: ireturn
       6: aload_1
       7: aload_0
       8: if_acmpne     13
      11: iconst_1
      12: ireturn
      13: aload_1
      14: instanceof    #11                 // class com/ibm/icu/text/PluralRules$FixedDecimal
      17: ifne          22
      20: iconst_0
      21: ireturn
      22: aload_1
      23: checkcast     #11                 // class com/ibm/icu/text/PluralRules$FixedDecimal
      26: astore_2
      27: aload_0
      28: getfield      #2                  // Field source:D
      31: aload_2
      32: getfield      #2                  // Field source:D
      35: dcmpl
      36: ifne          66
      39: aload_0
      40: getfield      #3                  // Field visibleDecimalDigitCount:I
      43: aload_2
      44: getfield      #3                  // Field visibleDecimalDigitCount:I
      47: if_icmpne     66
      50: aload_0
      51: getfield      #5                  // Field decimalDigits:J
      54: aload_2
      55: getfield      #5                  // Field decimalDigits:J
      58: lcmp
      59: ifne          66
      62: iconst_1
      63: goto          67
      66: iconst_0
      67: ireturn

  public int hashCode();
    Code:
       0: aload_0
       1: getfield      #5                  // Field decimalDigits:J
       4: bipush        37
       6: aload_0
       7: getfield      #3                  // Field visibleDecimalDigitCount:I
      10: ldc2_w        #52                 // double 37.0d
      13: aload_0
      14: getfield      #2                  // Field source:D
      17: dmul
      18: d2i
      19: iadd
      20: imul
      21: i2l
      22: ladd
      23: l2i
      24: ireturn

  public java.lang.String toString();
    Code:
       0: new           #54                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #55                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #56                 // String %.
       9: invokevirtual #57                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: getfield      #3                  // Field visibleDecimalDigitCount:I
      16: invokevirtual #58                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      19: ldc           #59                 // String f
      21: invokevirtual #57                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: invokevirtual #60                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      27: iconst_1
      28: anewarray     #37                 // class java/lang/Object
      31: dup
      32: iconst_0
      33: aload_0
      34: getfield      #2                  // Field source:D
      37: invokestatic  #38                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      40: aastore
      41: invokestatic  #61                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      44: areturn

  public boolean hasIntegerValue();
    Code:
       0: aload_0
       1: getfield      #8                  // Field hasIntegerValue:Z
       4: ireturn

  public int intValue();
    Code:
       0: aload_0
       1: getfield      #7                  // Field integerValue:J
       4: l2i
       5: ireturn

  public long longValue();
    Code:
       0: aload_0
       1: getfield      #7                  // Field integerValue:J
       4: lreturn

  public float floatValue();
    Code:
       0: aload_0
       1: getfield      #2                  // Field source:D
       4: d2f
       5: freturn

  public double doubleValue();
    Code:
       0: aload_0
       1: getfield      #9                  // Field isNegative:Z
       4: ifeq          15
       7: aload_0
       8: getfield      #2                  // Field source:D
      11: dneg
      12: goto          19
      15: aload_0
      16: getfield      #2                  // Field source:D
      19: dreturn

  public long getShiftedValue();
    Code:
       0: aload_0
       1: getfield      #7                  // Field integerValue:J
       4: aload_0
       5: getfield      #1                  // Field baseFactor:I
       8: i2l
       9: lmul
      10: aload_0
      11: getfield      #5                  // Field decimalDigits:J
      14: ladd
      15: lreturn

  private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException;
    Code:
       0: new           #62                 // class java/io/NotSerializableException
       3: dup
       4: invokespecial #63                 // Method java/io/NotSerializableException."<init>":()V
       7: athrow

  private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException;
    Code:
       0: new           #62                 // class java/io/NotSerializableException
       3: dup
       4: invokespecial #63                 // Method java/io/NotSerializableException."<init>":()V
       7: athrow

  public boolean isNaN();
    Code:
       0: aload_0
       1: getfield      #2                  // Field source:D
       4: invokestatic  #27                 // Method java/lang/Double.isNaN:(D)Z
       7: ireturn

  public boolean isInfinite();
    Code:
       0: aload_0
       1: getfield      #2                  // Field source:D
       4: invokestatic  #26                 // Method java/lang/Double.isInfinite:(D)Z
       7: ireturn

  public int compareTo(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #11                 // class com/ibm/icu/text/PluralRules$FixedDecimal
       5: invokevirtual #64                 // Method compareTo:(Lcom/ibm/icu/text/PluralRules$FixedDecimal;)I
       8: ireturn

  static int access$100(com.ibm.icu.text.PluralRules$FixedDecimal);
    Code:
       0: aload_0
       1: getfield      #1                  // Field baseFactor:I
       4: ireturn
}
