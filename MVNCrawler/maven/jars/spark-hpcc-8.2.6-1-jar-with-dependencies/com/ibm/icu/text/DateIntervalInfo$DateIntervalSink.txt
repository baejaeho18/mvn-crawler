Compiled from "DateIntervalInfo.java"
final class com.ibm.icu.text.DateIntervalInfo$DateIntervalSink extends com.ibm.icu.impl.UResource$Sink {
  private static final java.lang.String ACCEPTED_PATTERN_LETTERS;

  com.ibm.icu.text.DateIntervalInfo dateIntervalInfo;

  java.lang.String nextCalendarType;

  private static final java.lang.String DATE_INTERVAL_PATH_PREFIX;

  private static final java.lang.String DATE_INTERVAL_PATH_SUFFIX;

  public com.ibm.icu.text.DateIntervalInfo$DateIntervalSink(com.ibm.icu.text.DateIntervalInfo);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method com/ibm/icu/impl/UResource$Sink."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field dateIntervalInfo:Lcom/ibm/icu/text/DateIntervalInfo;
       9: return

  public void put(com.ibm.icu.impl.UResource$Key, com.ibm.icu.impl.UResource$Value, boolean);
    Code:
       0: aload_2
       1: invokevirtual #3                  // Method com/ibm/icu/impl/UResource$Value.getTable:()Lcom/ibm/icu/impl/UResource$Table;
       4: astore        4
       6: iconst_0
       7: istore        5
       9: aload         4
      11: iload         5
      13: aload_1
      14: aload_2
      15: invokeinterface #4,  4            // InterfaceMethod com/ibm/icu/impl/UResource$Table.getKeyAndValue:(ILcom/ibm/icu/impl/UResource$Key;Lcom/ibm/icu/impl/UResource$Value;)Z
      20: ifeq          119
      23: aload_1
      24: invokestatic  #5                  // Method com/ibm/icu/text/DateIntervalInfo.access$000:()Ljava/lang/String;
      27: invokevirtual #6                  // Method com/ibm/icu/impl/UResource$Key.contentEquals:(Ljava/lang/CharSequence;)Z
      30: ifne          36
      33: goto          113
      36: aload_2
      37: invokevirtual #7                  // Method com/ibm/icu/impl/UResource$Value.getType:()I
      40: iconst_3
      41: if_icmpne     59
      44: aload_0
      45: aload_0
      46: aload_2
      47: invokevirtual #9                  // Method com/ibm/icu/impl/UResource$Value.getAliasString:()Ljava/lang/String;
      50: invokespecial #10                 // Method getCalendarTypeFromPath:(Ljava/lang/String;)Ljava/lang/String;
      53: putfield      #11                 // Field nextCalendarType:Ljava/lang/String;
      56: goto          119
      59: aload_2
      60: invokevirtual #7                  // Method com/ibm/icu/impl/UResource$Value.getType:()I
      63: iconst_2
      64: if_icmpne     113
      67: aload_2
      68: invokevirtual #3                  // Method com/ibm/icu/impl/UResource$Value.getTable:()Lcom/ibm/icu/impl/UResource$Table;
      71: astore        6
      73: iconst_0
      74: istore        7
      76: aload         6
      78: iload         7
      80: aload_1
      81: aload_2
      82: invokeinterface #4,  4            // InterfaceMethod com/ibm/icu/impl/UResource$Table.getKeyAndValue:(ILcom/ibm/icu/impl/UResource$Key;Lcom/ibm/icu/impl/UResource$Value;)Z
      87: ifeq          110
      90: aload_2
      91: invokevirtual #7                  // Method com/ibm/icu/impl/UResource$Value.getType:()I
      94: iconst_2
      95: if_icmpne     104
      98: aload_0
      99: aload_1
     100: aload_2
     101: invokevirtual #12                 // Method processSkeletonTable:(Lcom/ibm/icu/impl/UResource$Key;Lcom/ibm/icu/impl/UResource$Value;)V
     104: iinc          7, 1
     107: goto          76
     110: goto          119
     113: iinc          5, 1
     116: goto          9
     119: return

  public void processSkeletonTable(com.ibm.icu.impl.UResource$Key, com.ibm.icu.impl.UResource$Value);
    Code:
       0: aload_1
       1: invokevirtual #13                 // Method com/ibm/icu/impl/UResource$Key.toString:()Ljava/lang/String;
       4: astore_3
       5: aload_2
       6: invokevirtual #3                  // Method com/ibm/icu/impl/UResource$Value.getTable:()Lcom/ibm/icu/impl/UResource$Table;
       9: astore        4
      11: iconst_0
      12: istore        5
      14: aload         4
      16: iload         5
      18: aload_1
      19: aload_2
      20: invokeinterface #4,  4            // InterfaceMethod com/ibm/icu/impl/UResource$Table.getKeyAndValue:(ILcom/ibm/icu/impl/UResource$Key;Lcom/ibm/icu/impl/UResource$Value;)Z
      25: ifeq          70
      28: aload_2
      29: invokevirtual #7                  // Method com/ibm/icu/impl/UResource$Value.getType:()I
      32: ifne          64
      35: aload_0
      36: aload_1
      37: invokespecial #14                 // Method validateAndProcessPatternLetter:(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;
      40: astore        6
      42: aload         6
      44: ifnull        64
      47: aload         6
      49: invokeinterface #15,  1           // InterfaceMethod java/lang/CharSequence.toString:()Ljava/lang/String;
      54: astore        7
      56: aload_0
      57: aload_3
      58: aload         7
      60: aload_2
      61: invokespecial #16                 // Method setIntervalPatternIfAbsent:(Ljava/lang/String;Ljava/lang/String;Lcom/ibm/icu/impl/UResource$Value;)V
      64: iinc          5, 1
      67: goto          14
      70: return

  public java.lang.String getAndResetNextCalendarType();
    Code:
       0: aload_0
       1: getfield      #11                 // Field nextCalendarType:Ljava/lang/String;
       4: astore_1
       5: aload_0
       6: aconst_null
       7: putfield      #11                 // Field nextCalendarType:Ljava/lang/String;
      10: aload_1
      11: areturn

  private java.lang.String getCalendarTypeFromPath(java.lang.String);
    Code:
       0: aload_1
       1: getstatic     #17                 // Field DATE_INTERVAL_PATH_PREFIX:Ljava/lang/String;
       4: invokevirtual #18                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
       7: ifeq          42
      10: aload_1
      11: getstatic     #19                 // Field DATE_INTERVAL_PATH_SUFFIX:Ljava/lang/String;
      14: invokevirtual #20                 // Method java/lang/String.endsWith:(Ljava/lang/String;)Z
      17: ifeq          42
      20: aload_1
      21: getstatic     #17                 // Field DATE_INTERVAL_PATH_PREFIX:Ljava/lang/String;
      24: invokevirtual #21                 // Method java/lang/String.length:()I
      27: aload_1
      28: invokevirtual #21                 // Method java/lang/String.length:()I
      31: getstatic     #19                 // Field DATE_INTERVAL_PATH_SUFFIX:Ljava/lang/String;
      34: invokevirtual #21                 // Method java/lang/String.length:()I
      37: isub
      38: invokevirtual #22                 // Method java/lang/String.substring:(II)Ljava/lang/String;
      41: areturn
      42: new           #23                 // class com/ibm/icu/util/ICUException
      45: dup
      46: new           #24                 // class java/lang/StringBuilder
      49: dup
      50: invokespecial #25                 // Method java/lang/StringBuilder."<init>":()V
      53: ldc           #26                 // String Malformed \'intervalFormat\' alias path:
      55: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      58: aload_1
      59: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      62: invokevirtual #28                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      65: invokespecial #29                 // Method com/ibm/icu/util/ICUException."<init>":(Ljava/lang/String;)V
      68: athrow

  private java.lang.CharSequence validateAndProcessPatternLetter(java.lang.CharSequence);
    Code:
       0: aload_1
       1: invokeinterface #30,  1           // InterfaceMethod java/lang/CharSequence.length:()I
       6: iconst_1
       7: if_icmpeq     12
      10: aconst_null
      11: areturn
      12: aload_1
      13: iconst_0
      14: invokeinterface #31,  2           // InterfaceMethod java/lang/CharSequence.charAt:(I)C
      19: istore_2
      20: ldc           #33                 // String yMdahHms
      22: iload_2
      23: invokevirtual #34                 // Method java/lang/String.indexOf:(I)I
      26: ifge          31
      29: aconst_null
      30: areturn
      31: iload_2
      32: getstatic     #35                 // Field com/ibm/icu/text/DateIntervalInfo.CALENDAR_FIELD_TO_PATTERN_LETTER:[Ljava/lang/String;
      35: bipush        11
      37: aaload
      38: iconst_0
      39: invokevirtual #37                 // Method java/lang/String.charAt:(I)C
      42: if_icmpne     52
      45: getstatic     #35                 // Field com/ibm/icu/text/DateIntervalInfo.CALENDAR_FIELD_TO_PATTERN_LETTER:[Ljava/lang/String;
      48: bipush        10
      50: aaload
      51: astore_1
      52: aload_1
      53: areturn

  private void setIntervalPatternIfAbsent(java.lang.String, java.lang.String, com.ibm.icu.impl.UResource$Value);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dateIntervalInfo:Lcom/ibm/icu/text/DateIntervalInfo;
       4: invokestatic  #38                 // Method com/ibm/icu/text/DateIntervalInfo.access$200:(Lcom/ibm/icu/text/DateIntervalInfo;)Ljava/util/Map;
       7: aload_1
       8: invokeinterface #39,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      13: checkcast     #40                 // class java/util/Map
      16: astore        4
      18: aload         4
      20: ifnull        34
      23: aload         4
      25: aload_2
      26: invokeinterface #41,  2           // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
      31: ifne          48
      34: aload_0
      35: getfield      #2                  // Field dateIntervalInfo:Lcom/ibm/icu/text/DateIntervalInfo;
      38: aload_1
      39: aload_2
      40: aload_3
      41: invokevirtual #42                 // Method com/ibm/icu/impl/UResource$Value.toString:()Ljava/lang/String;
      44: invokestatic  #43                 // Method com/ibm/icu/text/DateIntervalInfo.access$300:(Lcom/ibm/icu/text/DateIntervalInfo;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lcom/ibm/icu/text/DateIntervalInfo$PatternInfo;
      47: pop
      48: return

  static {};
    Code:
       0: new           #24                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #25                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #44                 // String /LOCALE/
       9: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: invokestatic  #45                 // Method com/ibm/icu/text/DateIntervalInfo.access$100:()Ljava/lang/String;
      15: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      18: ldc           #46                 // String /
      20: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      23: invokevirtual #28                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      26: putstatic     #17                 // Field DATE_INTERVAL_PATH_PREFIX:Ljava/lang/String;
      29: new           #24                 // class java/lang/StringBuilder
      32: dup
      33: invokespecial #25                 // Method java/lang/StringBuilder."<init>":()V
      36: ldc           #46                 // String /
      38: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      41: invokestatic  #5                  // Method com/ibm/icu/text/DateIntervalInfo.access$000:()Ljava/lang/String;
      44: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      47: invokevirtual #28                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      50: putstatic     #19                 // Field DATE_INTERVAL_PATH_SUFFIX:Ljava/lang/String;
      53: return
}
