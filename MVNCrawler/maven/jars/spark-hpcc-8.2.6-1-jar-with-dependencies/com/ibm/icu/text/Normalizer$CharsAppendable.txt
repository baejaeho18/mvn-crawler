Compiled from "Normalizer.java"
final class com.ibm.icu.text.Normalizer$CharsAppendable implements java.lang.Appendable {
  private final char[] chars;

  private final int start;

  private final int limit;

  private int offset;

  public com.ibm.icu.text.Normalizer$CharsAppendable(char[], int, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field chars:[C
       9: aload_0
      10: aload_0
      11: iload_2
      12: dup_x1
      13: putfield      #3                  // Field offset:I
      16: putfield      #4                  // Field start:I
      19: aload_0
      20: iload_3
      21: putfield      #5                  // Field limit:I
      24: return

  public int length();
    Code:
       0: aload_0
       1: getfield      #3                  // Field offset:I
       4: aload_0
       5: getfield      #4                  // Field start:I
       8: isub
       9: istore_1
      10: aload_0
      11: getfield      #3                  // Field offset:I
      14: aload_0
      15: getfield      #5                  // Field limit:I
      18: if_icmpgt     23
      21: iload_1
      22: ireturn
      23: new           #6                  // class java/lang/IndexOutOfBoundsException
      26: dup
      27: iload_1
      28: invokestatic  #7                  // Method java/lang/Integer.toString:(I)Ljava/lang/String;
      31: invokespecial #8                  // Method java/lang/IndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
      34: athrow

  public java.lang.Appendable append(char);
    Code:
       0: aload_0
       1: getfield      #3                  // Field offset:I
       4: aload_0
       5: getfield      #5                  // Field limit:I
       8: if_icmpge     21
      11: aload_0
      12: getfield      #2                  // Field chars:[C
      15: aload_0
      16: getfield      #3                  // Field offset:I
      19: iload_1
      20: castore
      21: aload_0
      22: dup
      23: getfield      #3                  // Field offset:I
      26: iconst_1
      27: iadd
      28: putfield      #3                  // Field offset:I
      31: aload_0
      32: areturn

  public java.lang.Appendable append(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_1
       4: invokeinterface #9,  1            // InterfaceMethod java/lang/CharSequence.length:()I
       9: invokevirtual #10                 // Method append:(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;
      12: areturn

  public java.lang.Appendable append(java.lang.CharSequence, int, int);
    Code:
       0: iload_3
       1: iload_2
       2: isub
       3: istore        4
       5: iload         4
       7: aload_0
       8: getfield      #5                  // Field limit:I
      11: aload_0
      12: getfield      #3                  // Field offset:I
      15: isub
      16: if_icmpgt     53
      19: iload_2
      20: iload_3
      21: if_icmpge     64
      24: aload_0
      25: getfield      #2                  // Field chars:[C
      28: aload_0
      29: dup
      30: getfield      #3                  // Field offset:I
      33: dup_x1
      34: iconst_1
      35: iadd
      36: putfield      #3                  // Field offset:I
      39: aload_1
      40: iload_2
      41: iinc          2, 1
      44: invokeinterface #11,  2           // InterfaceMethod java/lang/CharSequence.charAt:(I)C
      49: castore
      50: goto          19
      53: aload_0
      54: dup
      55: getfield      #3                  // Field offset:I
      58: iload         4
      60: iadd
      61: putfield      #3                  // Field offset:I
      64: aload_0
      65: areturn
}
