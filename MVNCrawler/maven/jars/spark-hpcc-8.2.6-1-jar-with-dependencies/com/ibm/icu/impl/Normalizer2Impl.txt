Compiled from "Normalizer2Impl.java"
public final class com.ibm.icu.impl.Normalizer2Impl {
  private static final com.ibm.icu.impl.Normalizer2Impl$IsAcceptable IS_ACCEPTABLE;

  private static final int DATA_FORMAT;

  private static final com.ibm.icu.impl.Trie2$ValueMapper segmentStarterMapper;

  public static final int MIN_YES_YES_WITH_CC;

  public static final int JAMO_VT;

  public static final int MIN_NORMAL_MAYBE_YES;

  public static final int JAMO_L;

  public static final int INERT;

  public static final int HAS_COMP_BOUNDARY_AFTER;

  public static final int OFFSET_SHIFT;

  public static final int DELTA_TCCC_0;

  public static final int DELTA_TCCC_1;

  public static final int DELTA_TCCC_GT_1;

  public static final int DELTA_TCCC_MASK;

  public static final int DELTA_SHIFT;

  public static final int MAX_DELTA;

  public static final int IX_NORM_TRIE_OFFSET;

  public static final int IX_EXTRA_DATA_OFFSET;

  public static final int IX_SMALL_FCD_OFFSET;

  public static final int IX_RESERVED3_OFFSET;

  public static final int IX_TOTAL_SIZE;

  public static final int IX_MIN_DECOMP_NO_CP;

  public static final int IX_MIN_COMP_NO_MAYBE_CP;

  public static final int IX_MIN_YES_NO;

  public static final int IX_MIN_NO_NO;

  public static final int IX_LIMIT_NO_NO;

  public static final int IX_MIN_MAYBE_YES;

  public static final int IX_MIN_YES_NO_MAPPINGS_ONLY;

  public static final int IX_MIN_NO_NO_COMP_BOUNDARY_BEFORE;

  public static final int IX_MIN_NO_NO_COMP_NO_MAYBE_CC;

  public static final int IX_MIN_NO_NO_EMPTY;

  public static final int IX_MIN_LCCC_CP;

  public static final int IX_COUNT;

  public static final int MAPPING_HAS_CCC_LCCC_WORD;

  public static final int MAPPING_HAS_RAW_MAPPING;

  public static final int MAPPING_LENGTH_MASK;

  public static final int COMP_1_LAST_TUPLE;

  public static final int COMP_1_TRIPLE;

  public static final int COMP_1_TRAIL_LIMIT;

  public static final int COMP_1_TRAIL_MASK;

  public static final int COMP_1_TRAIL_SHIFT;

  public static final int COMP_2_TRAIL_SHIFT;

  public static final int COMP_2_TRAIL_MASK;

  private com.ibm.icu.util.VersionInfo dataVersion;

  private int minDecompNoCP;

  private int minCompNoMaybeCP;

  private int minLcccCP;

  private int minYesNo;

  private int minYesNoMappingsOnly;

  private int minNoNo;

  private int minNoNoCompBoundaryBefore;

  private int minNoNoCompNoMaybeCC;

  private int minNoNoEmpty;

  private int limitNoNo;

  private int centerNoNoDelta;

  private int minMaybeYes;

  private com.ibm.icu.impl.Trie2_16 normTrie;

  private java.lang.String maybeYesCompositions;

  private java.lang.String extraData;

  private byte[] smallFCD;

  private com.ibm.icu.impl.Trie2_32 canonIterData;

  private java.util.ArrayList<com.ibm.icu.text.UnicodeSet> canonStartSets;

  private static final int CANON_NOT_SEGMENT_STARTER;

  private static final int CANON_HAS_COMPOSITIONS;

  private static final int CANON_HAS_SET;

  private static final int CANON_VALUE_MASK;

  static final boolean $assertionsDisabled;

  public com.ibm.icu.impl.Normalizer2Impl();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public com.ibm.icu.impl.Normalizer2Impl load(java.nio.ByteBuffer);
    Code:
       0: aload_0
       1: aload_1
       2: ldc           #3                  // int 1316121906
       4: getstatic     #4                  // Field IS_ACCEPTABLE:Lcom/ibm/icu/impl/Normalizer2Impl$IsAcceptable;
       7: invokestatic  #5                  // Method com/ibm/icu/impl/ICUBinary.readHeaderAndDataVersion:(Ljava/nio/ByteBuffer;ILcom/ibm/icu/impl/ICUBinary$Authenticate;)Lcom/ibm/icu/util/VersionInfo;
      10: putfield      #6                  // Field dataVersion:Lcom/ibm/icu/util/VersionInfo;
      13: aload_1
      14: invokevirtual #7                  // Method java/nio/ByteBuffer.getInt:()I
      17: iconst_4
      18: idiv
      19: istore_2
      20: iload_2
      21: bipush        18
      23: if_icmpgt     36
      26: new           #8                  // class com/ibm/icu/util/ICUUncheckedIOException
      29: dup
      30: ldc           #9                  // String Normalizer2 data: not enough indexes
      32: invokespecial #10                 // Method com/ibm/icu/util/ICUUncheckedIOException."<init>":(Ljava/lang/String;)V
      35: athrow
      36: iload_2
      37: newarray       int
      39: astore_3
      40: aload_3
      41: iconst_0
      42: iload_2
      43: iconst_4
      44: imul
      45: iastore
      46: iconst_1
      47: istore        4
      49: iload         4
      51: iload_2
      52: if_icmpge     69
      55: aload_3
      56: iload         4
      58: aload_1
      59: invokevirtual #7                  // Method java/nio/ByteBuffer.getInt:()I
      62: iastore
      63: iinc          4, 1
      66: goto          49
      69: aload_0
      70: aload_3
      71: bipush        8
      73: iaload
      74: putfield      #11                 // Field minDecompNoCP:I
      77: aload_0
      78: aload_3
      79: bipush        9
      81: iaload
      82: putfield      #12                 // Field minCompNoMaybeCP:I
      85: aload_0
      86: aload_3
      87: bipush        18
      89: iaload
      90: putfield      #13                 // Field minLcccCP:I
      93: aload_0
      94: aload_3
      95: bipush        10
      97: iaload
      98: putfield      #14                 // Field minYesNo:I
     101: aload_0
     102: aload_3
     103: bipush        14
     105: iaload
     106: putfield      #15                 // Field minYesNoMappingsOnly:I
     109: aload_0
     110: aload_3
     111: bipush        11
     113: iaload
     114: putfield      #16                 // Field minNoNo:I
     117: aload_0
     118: aload_3
     119: bipush        15
     121: iaload
     122: putfield      #17                 // Field minNoNoCompBoundaryBefore:I
     125: aload_0
     126: aload_3
     127: bipush        16
     129: iaload
     130: putfield      #18                 // Field minNoNoCompNoMaybeCC:I
     133: aload_0
     134: aload_3
     135: bipush        17
     137: iaload
     138: putfield      #19                 // Field minNoNoEmpty:I
     141: aload_0
     142: aload_3
     143: bipush        12
     145: iaload
     146: putfield      #20                 // Field limitNoNo:I
     149: aload_0
     150: aload_3
     151: bipush        13
     153: iaload
     154: putfield      #21                 // Field minMaybeYes:I
     157: getstatic     #22                 // Field $assertionsDisabled:Z
     160: ifne          181
     163: aload_0
     164: getfield      #21                 // Field minMaybeYes:I
     167: bipush        7
     169: iand
     170: ifeq          181
     173: new           #23                 // class java/lang/AssertionError
     176: dup
     177: invokespecial #24                 // Method java/lang/AssertionError."<init>":()V
     180: athrow
     181: aload_0
     182: aload_0
     183: getfield      #21                 // Field minMaybeYes:I
     186: iconst_3
     187: ishr
     188: bipush        64
     190: isub
     191: iconst_1
     192: isub
     193: putfield      #25                 // Field centerNoNoDelta:I
     196: aload_3
     197: iconst_0
     198: iaload
     199: istore        4
     201: aload_3
     202: iconst_1
     203: iaload
     204: istore        5
     206: aload_0
     207: aload_1
     208: invokestatic  #26                 // Method com/ibm/icu/impl/Trie2_16.createFromSerialized:(Ljava/nio/ByteBuffer;)Lcom/ibm/icu/impl/Trie2_16;
     211: putfield      #27                 // Field normTrie:Lcom/ibm/icu/impl/Trie2_16;
     214: aload_0
     215: getfield      #27                 // Field normTrie:Lcom/ibm/icu/impl/Trie2_16;
     218: invokevirtual #28                 // Method com/ibm/icu/impl/Trie2_16.getSerializedLength:()I
     221: istore        6
     223: iload         6
     225: iload         5
     227: iload         4
     229: isub
     230: if_icmple     243
     233: new           #8                  // class com/ibm/icu/util/ICUUncheckedIOException
     236: dup
     237: ldc           #29                 // String Normalizer2 data: not enough bytes for normTrie
     239: invokespecial #10                 // Method com/ibm/icu/util/ICUUncheckedIOException."<init>":(Ljava/lang/String;)V
     242: athrow
     243: aload_1
     244: iload         5
     246: iload         4
     248: isub
     249: iload         6
     251: isub
     252: invokestatic  #30                 // Method com/ibm/icu/impl/ICUBinary.skipBytes:(Ljava/nio/ByteBuffer;I)V
     255: iload         5
     257: istore        4
     259: aload_3
     260: iconst_2
     261: iaload
     262: istore        5
     264: iload         5
     266: iload         4
     268: isub
     269: iconst_2
     270: idiv
     271: istore        7
     273: iload         7
     275: ifeq          309
     278: aload_0
     279: aload_1
     280: iload         7
     282: iconst_0
     283: invokestatic  #31                 // Method com/ibm/icu/impl/ICUBinary.getString:(Ljava/nio/ByteBuffer;II)Ljava/lang/String;
     286: putfield      #32                 // Field maybeYesCompositions:Ljava/lang/String;
     289: aload_0
     290: aload_0
     291: getfield      #32                 // Field maybeYesCompositions:Ljava/lang/String;
     294: ldc           #33                 // int 64512
     296: aload_0
     297: getfield      #21                 // Field minMaybeYes:I
     300: isub
     301: iconst_1
     302: ishr
     303: invokevirtual #34                 // Method java/lang/String.substring:(I)Ljava/lang/String;
     306: putfield      #35                 // Field extraData:Ljava/lang/String;
     309: iload         5
     311: istore        4
     313: aload_0
     314: sipush        256
     317: newarray       byte
     319: putfield      #36                 // Field smallFCD:[B
     322: aload_1
     323: aload_0
     324: getfield      #36                 // Field smallFCD:[B
     327: invokevirtual #37                 // Method java/nio/ByteBuffer.get:([B)Ljava/nio/ByteBuffer;
     330: pop
     331: aload_0
     332: areturn
     333: astore_2
     334: new           #8                  // class com/ibm/icu/util/ICUUncheckedIOException
     337: dup
     338: aload_2
     339: invokespecial #39                 // Method com/ibm/icu/util/ICUUncheckedIOException."<init>":(Ljava/lang/Throwable;)V
     342: athrow
    Exception table:
       from    to  target type
           0   332   333   Class java/io/IOException

  public com.ibm.icu.impl.Normalizer2Impl load(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #40                 // Method com/ibm/icu/impl/ICUBinary.getRequiredData:(Ljava/lang/String;)Ljava/nio/ByteBuffer;
       5: invokevirtual #41                 // Method load:(Ljava/nio/ByteBuffer;)Lcom/ibm/icu/impl/Normalizer2Impl;
       8: areturn

  private void enumLcccRange(int, int, int, com.ibm.icu.text.UnicodeSet);
    Code:
       0: iload_3
       1: ldc           #33                 // int 64512
       3: if_icmple     23
       6: iload_3
       7: ldc           #42                 // int 65024
       9: if_icmpeq     23
      12: aload         4
      14: iload_1
      15: iload_2
      16: invokevirtual #43                 // Method com/ibm/icu/text/UnicodeSet.add:(II)Lcom/ibm/icu/text/UnicodeSet;
      19: pop
      20: goto          62
      23: aload_0
      24: getfield      #18                 // Field minNoNoCompNoMaybeCC:I
      27: iload_3
      28: if_icmpgt     62
      31: iload_3
      32: aload_0
      33: getfield      #20                 // Field limitNoNo:I
      36: if_icmpge     62
      39: aload_0
      40: iload_1
      41: invokevirtual #44                 // Method getFCD16:(I)I
      44: istore        5
      46: iload         5
      48: sipush        255
      51: if_icmple     62
      54: aload         4
      56: iload_1
      57: iload_2
      58: invokevirtual #43                 // Method com/ibm/icu/text/UnicodeSet.add:(II)Lcom/ibm/icu/text/UnicodeSet;
      61: pop
      62: return

  private void enumNorm16PropertyStartsRange(int, int, int, com.ibm.icu.text.UnicodeSet);
    Code:
       0: aload         4
       2: iload_1
       3: invokevirtual #45                 // Method com/ibm/icu/text/UnicodeSet.add:(I)Lcom/ibm/icu/text/UnicodeSet;
       6: pop
       7: iload_1
       8: iload_2
       9: if_icmpeq     71
      12: aload_0
      13: iload_3
      14: invokevirtual #46                 // Method isAlgorithmicNoNo:(I)Z
      17: ifeq          71
      20: iload_3
      21: bipush        6
      23: iand
      24: iconst_2
      25: if_icmple     71
      28: aload_0
      29: iload_1
      30: invokevirtual #44                 // Method getFCD16:(I)I
      33: istore        5
      35: iinc          1, 1
      38: iload_1
      39: iload_2
      40: if_icmpgt     71
      43: aload_0
      44: iload_1
      45: invokevirtual #44                 // Method getFCD16:(I)I
      48: istore        6
      50: iload         6
      52: iload         5
      54: if_icmpeq     68
      57: aload         4
      59: iload_1
      60: invokevirtual #45                 // Method com/ibm/icu/text/UnicodeSet.add:(I)Lcom/ibm/icu/text/UnicodeSet;
      63: pop
      64: iload         6
      66: istore        5
      68: goto          35
      71: return

  public void addLcccChars(com.ibm.icu.text.UnicodeSet);
    Code:
       0: aload_0
       1: getfield      #27                 // Field normTrie:Lcom/ibm/icu/impl/Trie2_16;
       4: invokevirtual #47                 // Method com/ibm/icu/impl/Trie2_16.iterator:()Ljava/util/Iterator;
       7: astore_2
       8: aload_2
       9: invokeinterface #48,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      14: ifeq          54
      17: aload_2
      18: invokeinterface #49,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      23: checkcast     #50                 // class com/ibm/icu/impl/Trie2$Range
      26: dup
      27: astore_3
      28: getfield      #51                 // Field com/ibm/icu/impl/Trie2$Range.leadSurrogate:Z
      31: ifne          54
      34: aload_0
      35: aload_3
      36: getfield      #52                 // Field com/ibm/icu/impl/Trie2$Range.startCodePoint:I
      39: aload_3
      40: getfield      #53                 // Field com/ibm/icu/impl/Trie2$Range.endCodePoint:I
      43: aload_3
      44: getfield      #54                 // Field com/ibm/icu/impl/Trie2$Range.value:I
      47: aload_1
      48: invokespecial #55                 // Method enumLcccRange:(IIILcom/ibm/icu/text/UnicodeSet;)V
      51: goto          8
      54: return

  public void addPropertyStarts(com.ibm.icu.text.UnicodeSet);
    Code:
       0: aload_0
       1: getfield      #27                 // Field normTrie:Lcom/ibm/icu/impl/Trie2_16;
       4: invokevirtual #47                 // Method com/ibm/icu/impl/Trie2_16.iterator:()Ljava/util/Iterator;
       7: astore_2
       8: aload_2
       9: invokeinterface #48,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      14: ifeq          54
      17: aload_2
      18: invokeinterface #49,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      23: checkcast     #50                 // class com/ibm/icu/impl/Trie2$Range
      26: dup
      27: astore_3
      28: getfield      #51                 // Field com/ibm/icu/impl/Trie2$Range.leadSurrogate:Z
      31: ifne          54
      34: aload_0
      35: aload_3
      36: getfield      #52                 // Field com/ibm/icu/impl/Trie2$Range.startCodePoint:I
      39: aload_3
      40: getfield      #53                 // Field com/ibm/icu/impl/Trie2$Range.endCodePoint:I
      43: aload_3
      44: getfield      #54                 // Field com/ibm/icu/impl/Trie2$Range.value:I
      47: aload_1
      48: invokespecial #56                 // Method enumNorm16PropertyStartsRange:(IIILcom/ibm/icu/text/UnicodeSet;)V
      51: goto          8
      54: ldc           #58                 // int 44032
      56: istore        4
      58: iload         4
      60: ldc           #59                 // int 55204
      62: if_icmpge     87
      65: aload_1
      66: iload         4
      68: invokevirtual #45                 // Method com/ibm/icu/text/UnicodeSet.add:(I)Lcom/ibm/icu/text/UnicodeSet;
      71: pop
      72: aload_1
      73: iload         4
      75: iconst_1
      76: iadd
      77: invokevirtual #45                 // Method com/ibm/icu/text/UnicodeSet.add:(I)Lcom/ibm/icu/text/UnicodeSet;
      80: pop
      81: iinc          4, 28
      84: goto          58
      87: aload_1
      88: ldc           #59                 // int 55204
      90: invokevirtual #45                 // Method com/ibm/icu/text/UnicodeSet.add:(I)Lcom/ibm/icu/text/UnicodeSet;
      93: pop
      94: return

  public void addCanonIterPropertyStarts(com.ibm.icu.text.UnicodeSet);
    Code:
       0: aload_0
       1: invokevirtual #60                 // Method ensureCanonIterData:()Lcom/ibm/icu/impl/Normalizer2Impl;
       4: pop
       5: aload_0
       6: getfield      #61                 // Field canonIterData:Lcom/ibm/icu/impl/Trie2_32;
       9: getstatic     #62                 // Field segmentStarterMapper:Lcom/ibm/icu/impl/Trie2$ValueMapper;
      12: invokevirtual #63                 // Method com/ibm/icu/impl/Trie2_32.iterator:(Lcom/ibm/icu/impl/Trie2$ValueMapper;)Ljava/util/Iterator;
      15: astore_2
      16: aload_2
      17: invokeinterface #48,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      22: ifeq          54
      25: aload_2
      26: invokeinterface #49,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      31: checkcast     #50                 // class com/ibm/icu/impl/Trie2$Range
      34: dup
      35: astore_3
      36: getfield      #51                 // Field com/ibm/icu/impl/Trie2$Range.leadSurrogate:Z
      39: ifne          54
      42: aload_1
      43: aload_3
      44: getfield      #52                 // Field com/ibm/icu/impl/Trie2$Range.startCodePoint:I
      47: invokevirtual #45                 // Method com/ibm/icu/text/UnicodeSet.add:(I)Lcom/ibm/icu/text/UnicodeSet;
      50: pop
      51: goto          16
      54: return

  public synchronized com.ibm.icu.impl.Normalizer2Impl ensureCanonIterData();
    Code:
       0: aload_0
       1: getfield      #61                 // Field canonIterData:Lcom/ibm/icu/impl/Trie2_32;
       4: ifnonnull     464
       7: new           #64                 // class com/ibm/icu/impl/Trie2Writable
      10: dup
      11: iconst_0
      12: iconst_0
      13: invokespecial #65                 // Method com/ibm/icu/impl/Trie2Writable."<init>":(II)V
      16: astore_1
      17: aload_0
      18: new           #66                 // class java/util/ArrayList
      21: dup
      22: invokespecial #67                 // Method java/util/ArrayList."<init>":()V
      25: putfield      #68                 // Field canonStartSets:Ljava/util/ArrayList;
      28: aload_0
      29: getfield      #27                 // Field normTrie:Lcom/ibm/icu/impl/Trie2_16;
      32: invokevirtual #47                 // Method com/ibm/icu/impl/Trie2_16.iterator:()Ljava/util/Iterator;
      35: astore_2
      36: aload_2
      37: invokeinterface #48,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      42: ifeq          456
      45: aload_2
      46: invokeinterface #49,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      51: checkcast     #50                 // class com/ibm/icu/impl/Trie2$Range
      54: dup
      55: astore_3
      56: getfield      #51                 // Field com/ibm/icu/impl/Trie2$Range.leadSurrogate:Z
      59: ifne          456
      62: aload_3
      63: getfield      #54                 // Field com/ibm/icu/impl/Trie2$Range.value:I
      66: istore        4
      68: iload         4
      70: invokestatic  #69                 // Method isInert:(I)Z
      73: ifne          36
      76: aload_0
      77: getfield      #14                 // Field minYesNo:I
      80: iload         4
      82: if_icmpgt     97
      85: iload         4
      87: aload_0
      88: getfield      #16                 // Field minNoNo:I
      91: if_icmpge     97
      94: goto          36
      97: aload_3
      98: getfield      #52                 // Field com/ibm/icu/impl/Trie2$Range.startCodePoint:I
     101: istore        5
     103: iload         5
     105: aload_3
     106: getfield      #53                 // Field com/ibm/icu/impl/Trie2$Range.endCodePoint:I
     109: if_icmpgt     453
     112: aload_1
     113: iload         5
     115: invokevirtual #70                 // Method com/ibm/icu/impl/Trie2Writable.get:(I)I
     118: istore        6
     120: iload         6
     122: istore        7
     124: aload_0
     125: iload         4
     127: invokespecial #71                 // Method isMaybeOrNonZeroCC:(I)Z
     130: ifeq          157
     133: iload         7
     135: ldc           #72                 // int -2147483648
     137: ior
     138: istore        7
     140: iload         4
     142: ldc           #33                 // int 64512
     144: if_icmpge     431
     147: iload         7
     149: ldc           #73                 // int 1073741824
     151: ior
     152: istore        7
     154: goto          431
     157: iload         4
     159: aload_0
     160: getfield      #14                 // Field minYesNo:I
     163: if_icmpge     176
     166: iload         7
     168: ldc           #73                 // int 1073741824
     170: ior
     171: istore        7
     173: goto          431
     176: iload         5
     178: istore        8
     180: iload         4
     182: istore        9
     184: aload_0
     185: iload         9
     187: invokespecial #74                 // Method isDecompNoAlgorithmic:(I)Z
     190: ifeq          243
     193: aload_0
     194: iload         8
     196: iload         9
     198: invokespecial #75                 // Method mapAlgorithmic:(II)I
     201: istore        8
     203: aload_0
     204: iload         8
     206: invokevirtual #76                 // Method getNorm16:(I)I
     209: istore        9
     211: getstatic     #22                 // Field $assertionsDisabled:Z
     214: ifne          243
     217: aload_0
     218: iload         9
     220: invokespecial #77                 // Method isHangulLV:(I)Z
     223: ifne          235
     226: aload_0
     227: iload         9
     229: invokespecial #78                 // Method isHangulLVT:(I)Z
     232: ifeq          243
     235: new           #23                 // class java/lang/AssertionError
     238: dup
     239: invokespecial #24                 // Method java/lang/AssertionError."<init>":()V
     242: athrow
     243: iload         9
     245: aload_0
     246: getfield      #14                 // Field minYesNo:I
     249: if_icmple     422
     252: iload         9
     254: iconst_1
     255: ishr
     256: istore        10
     258: aload_0
     259: getfield      #35                 // Field extraData:Ljava/lang/String;
     262: iload         10
     264: invokevirtual #79                 // Method java/lang/String.charAt:(I)C
     267: istore        11
     269: iload         11
     271: bipush        31
     273: iand
     274: istore        12
     276: iload         11
     278: sipush        128
     281: iand
     282: ifeq          317
     285: iload         5
     287: iload         8
     289: if_icmpne     317
     292: aload_0
     293: getfield      #35                 // Field extraData:Ljava/lang/String;
     296: iload         10
     298: iconst_1
     299: isub
     300: invokevirtual #79                 // Method java/lang/String.charAt:(I)C
     303: sipush        255
     306: iand
     307: ifeq          317
     310: iload         7
     312: ldc           #72                 // int -2147483648
     314: ior
     315: istore        7
     317: iload         12
     319: ifeq          419
     322: iinc          10, 1
     325: iload         10
     327: iload         12
     329: iadd
     330: istore        13
     332: aload_0
     333: getfield      #35                 // Field extraData:Ljava/lang/String;
     336: iload         10
     338: invokevirtual #80                 // Method java/lang/String.codePointAt:(I)I
     341: istore        8
     343: aload_0
     344: aload_1
     345: iload         5
     347: iload         8
     349: invokespecial #81                 // Method addToStartSet:(Lcom/ibm/icu/impl/Trie2Writable;II)V
     352: iload         9
     354: aload_0
     355: getfield      #16                 // Field minNoNo:I
     358: if_icmplt     419
     361: iload         10
     363: iload         8
     365: invokestatic  #82                 // Method java/lang/Character.charCount:(I)I
     368: iadd
     369: dup
     370: istore        10
     372: iload         13
     374: if_icmpge     419
     377: aload_0
     378: getfield      #35                 // Field extraData:Ljava/lang/String;
     381: iload         10
     383: invokevirtual #80                 // Method java/lang/String.codePointAt:(I)I
     386: istore        8
     388: aload_1
     389: iload         8
     391: invokevirtual #70                 // Method com/ibm/icu/impl/Trie2Writable.get:(I)I
     394: istore        14
     396: iload         14
     398: ldc           #72                 // int -2147483648
     400: iand
     401: ifne          416
     404: aload_1
     405: iload         8
     407: iload         14
     409: ldc           #72                 // int -2147483648
     411: ior
     412: invokevirtual #83                 // Method com/ibm/icu/impl/Trie2Writable.set:(II)Lcom/ibm/icu/impl/Trie2Writable;
     415: pop
     416: goto          361
     419: goto          431
     422: aload_0
     423: aload_1
     424: iload         5
     426: iload         8
     428: invokespecial #81                 // Method addToStartSet:(Lcom/ibm/icu/impl/Trie2Writable;II)V
     431: iload         7
     433: iload         6
     435: if_icmpeq     447
     438: aload_1
     439: iload         5
     441: iload         7
     443: invokevirtual #83                 // Method com/ibm/icu/impl/Trie2Writable.set:(II)Lcom/ibm/icu/impl/Trie2Writable;
     446: pop
     447: iinc          5, 1
     450: goto          103
     453: goto          36
     456: aload_0
     457: aload_1
     458: invokevirtual #84                 // Method com/ibm/icu/impl/Trie2Writable.toTrie2_32:()Lcom/ibm/icu/impl/Trie2_32;
     461: putfield      #61                 // Field canonIterData:Lcom/ibm/icu/impl/Trie2_32;
     464: aload_0
     465: areturn

  public int getNorm16(int);
    Code:
       0: aload_0
       1: getfield      #27                 // Field normTrie:Lcom/ibm/icu/impl/Trie2_16;
       4: iload_1
       5: invokevirtual #85                 // Method com/ibm/icu/impl/Trie2_16.get:(I)I
       8: ireturn

  public int getCompQuickCheck(int);
    Code:
       0: iload_1
       1: aload_0
       2: getfield      #16                 // Field minNoNo:I
       5: if_icmplt     14
       8: ldc           #86                 // int 65026
      10: iload_1
      11: if_icmpgt     16
      14: iconst_1
      15: ireturn
      16: aload_0
      17: getfield      #21                 // Field minMaybeYes:I
      20: iload_1
      21: if_icmpgt     26
      24: iconst_2
      25: ireturn
      26: iconst_0
      27: ireturn

  public boolean isAlgorithmicNoNo(int);
    Code:
       0: aload_0
       1: getfield      #20                 // Field limitNoNo:I
       4: iload_1
       5: if_icmpgt     20
       8: iload_1
       9: aload_0
      10: getfield      #21                 // Field minMaybeYes:I
      13: if_icmpge     20
      16: iconst_1
      17: goto          21
      20: iconst_0
      21: ireturn

  public boolean isCompNo(int);
    Code:
       0: aload_0
       1: getfield      #16                 // Field minNoNo:I
       4: iload_1
       5: if_icmpgt     20
       8: iload_1
       9: aload_0
      10: getfield      #21                 // Field minMaybeYes:I
      13: if_icmpge     20
      16: iconst_1
      17: goto          21
      20: iconst_0
      21: ireturn

  public boolean isDecompYes(int);
    Code:
       0: iload_1
       1: aload_0
       2: getfield      #14                 // Field minYesNo:I
       5: if_icmplt     16
       8: aload_0
       9: getfield      #21                 // Field minMaybeYes:I
      12: iload_1
      13: if_icmpgt     20
      16: iconst_1
      17: goto          21
      20: iconst_0
      21: ireturn

  public int getCC(int);
    Code:
       0: iload_1
       1: ldc           #33                 // int 64512
       3: if_icmplt     11
       6: iload_1
       7: invokestatic  #87                 // Method getCCFromNormalYesOrMaybe:(I)I
      10: ireturn
      11: iload_1
      12: aload_0
      13: getfield      #16                 // Field minNoNo:I
      16: if_icmplt     27
      19: aload_0
      20: getfield      #20                 // Field limitNoNo:I
      23: iload_1
      24: if_icmpgt     29
      27: iconst_0
      28: ireturn
      29: aload_0
      30: iload_1
      31: invokespecial #88                 // Method getCCFromNoNo:(I)I
      34: ireturn

  public static int getCCFromNormalYesOrMaybe(int);
    Code:
       0: iload_0
       1: iconst_1
       2: ishr
       3: sipush        255
       6: iand
       7: ireturn

  public static int getCCFromYesOrMaybe(int);
    Code:
       0: iload_0
       1: ldc           #33                 // int 64512
       3: if_icmplt     13
       6: iload_0
       7: invokestatic  #87                 // Method getCCFromNormalYesOrMaybe:(I)I
      10: goto          14
      13: iconst_0
      14: ireturn

  public int getCCFromYesOrMaybeCP(int);
    Code:
       0: iload_1
       1: aload_0
       2: getfield      #12                 // Field minCompNoMaybeCP:I
       5: if_icmpge     10
       8: iconst_0
       9: ireturn
      10: aload_0
      11: iload_1
      12: invokevirtual #76                 // Method getNorm16:(I)I
      15: invokestatic  #89                 // Method getCCFromYesOrMaybe:(I)I
      18: ireturn

  public int getFCD16(int);
    Code:
       0: iload_1
       1: aload_0
       2: getfield      #11                 // Field minDecompNoCP:I
       5: if_icmpge     10
       8: iconst_0
       9: ireturn
      10: iload_1
      11: ldc           #90                 // int 65535
      13: if_icmpgt     26
      16: aload_0
      17: iload_1
      18: invokevirtual #91                 // Method singleLeadMightHaveNonZeroFCD16:(I)Z
      21: ifne          26
      24: iconst_0
      25: ireturn
      26: aload_0
      27: iload_1
      28: invokevirtual #92                 // Method getFCD16FromNormData:(I)I
      31: ireturn

  public boolean singleLeadMightHaveNonZeroFCD16(int);
    Code:
       0: aload_0
       1: getfield      #36                 // Field smallFCD:[B
       4: iload_1
       5: bipush        8
       7: ishr
       8: baload
       9: istore_2
      10: iload_2
      11: ifne          16
      14: iconst_0
      15: ireturn
      16: iload_2
      17: iload_1
      18: iconst_5
      19: ishr
      20: bipush        7
      22: iand
      23: ishr
      24: iconst_1
      25: iand
      26: ifeq          33
      29: iconst_1
      30: goto          34
      33: iconst_0
      34: ireturn

  public int getFCD16FromNormData(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #76                 // Method getNorm16:(I)I
       5: istore_2
       6: iload_2
       7: aload_0
       8: getfield      #20                 // Field limitNoNo:I
      11: if_icmplt     69
      14: iload_2
      15: ldc           #33                 // int 64512
      17: if_icmplt     32
      20: iload_2
      21: invokestatic  #87                 // Method getCCFromNormalYesOrMaybe:(I)I
      24: istore_2
      25: iload_2
      26: iload_2
      27: bipush        8
      29: ishl
      30: ior
      31: ireturn
      32: iload_2
      33: aload_0
      34: getfield      #21                 // Field minMaybeYes:I
      37: if_icmplt     42
      40: iconst_0
      41: ireturn
      42: iload_2
      43: bipush        6
      45: iand
      46: istore_3
      47: iload_3
      48: iconst_2
      49: if_icmpgt     56
      52: iload_3
      53: iconst_1
      54: ishr
      55: ireturn
      56: aload_0
      57: iload_1
      58: iload_2
      59: invokespecial #75                 // Method mapAlgorithmic:(II)I
      62: istore_1
      63: aload_0
      64: iload_1
      65: invokevirtual #76                 // Method getNorm16:(I)I
      68: istore_2
      69: iload_2
      70: aload_0
      71: getfield      #14                 // Field minYesNo:I
      74: if_icmple     85
      77: aload_0
      78: iload_2
      79: invokespecial #78                 // Method isHangulLVT:(I)Z
      82: ifeq          87
      85: iconst_0
      86: ireturn
      87: iload_2
      88: iconst_1
      89: ishr
      90: istore_3
      91: aload_0
      92: getfield      #35                 // Field extraData:Ljava/lang/String;
      95: iload_3
      96: invokevirtual #79                 // Method java/lang/String.charAt:(I)C
      99: istore        4
     101: iload         4
     103: bipush        8
     105: ishr
     106: istore        5
     108: iload         4
     110: sipush        128
     113: iand
     114: ifeq          135
     117: iload         5
     119: aload_0
     120: getfield      #35                 // Field extraData:Ljava/lang/String;
     123: iload_3
     124: iconst_1
     125: isub
     126: invokevirtual #79                 // Method java/lang/String.charAt:(I)C
     129: ldc           #93                 // int 65280
     131: iand
     132: ior
     133: istore        5
     135: iload         5
     137: ireturn

  public java.lang.String getDecomposition(int);
    Code:
       0: iload_1
       1: aload_0
       2: getfield      #11                 // Field minDecompNoCP:I
       5: if_icmplt     22
       8: aload_0
       9: aload_0
      10: iload_1
      11: invokevirtual #76                 // Method getNorm16:(I)I
      14: dup
      15: istore_2
      16: invokespecial #71                 // Method isMaybeOrNonZeroCC:(I)Z
      19: ifeq          24
      22: aconst_null
      23: areturn
      24: iconst_m1
      25: istore_3
      26: aload_0
      27: iload_2
      28: invokespecial #74                 // Method isDecompNoAlgorithmic:(I)Z
      31: ifeq          49
      34: aload_0
      35: iload_1
      36: iload_2
      37: invokespecial #75                 // Method mapAlgorithmic:(II)I
      40: dup
      41: istore_1
      42: istore_3
      43: aload_0
      44: iload_1
      45: invokevirtual #76                 // Method getNorm16:(I)I
      48: istore_2
      49: iload_2
      50: aload_0
      51: getfield      #14                 // Field minYesNo:I
      54: if_icmpge     68
      57: iload_3
      58: ifge          63
      61: aconst_null
      62: areturn
      63: iload_3
      64: invokestatic  #94                 // Method com/ibm/icu/text/UTF16.valueOf:(I)Ljava/lang/String;
      67: areturn
      68: aload_0
      69: iload_2
      70: invokespecial #77                 // Method isHangulLV:(I)Z
      73: ifne          84
      76: aload_0
      77: iload_2
      78: invokespecial #78                 // Method isHangulLVT:(I)Z
      81: ifeq          106
      84: new           #95                 // class java/lang/StringBuilder
      87: dup
      88: invokespecial #96                 // Method java/lang/StringBuilder."<init>":()V
      91: astore        4
      93: iload_1
      94: aload         4
      96: invokestatic  #97                 // Method com/ibm/icu/impl/Normalizer2Impl$Hangul.decompose:(ILjava/lang/Appendable;)I
      99: pop
     100: aload         4
     102: invokevirtual #98                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     105: areturn
     106: iload_2
     107: iconst_1
     108: ishr
     109: istore        4
     111: aload_0
     112: getfield      #35                 // Field extraData:Ljava/lang/String;
     115: iload         4
     117: iinc          4, 1
     120: invokevirtual #79                 // Method java/lang/String.charAt:(I)C
     123: bipush        31
     125: iand
     126: istore        5
     128: aload_0
     129: getfield      #35                 // Field extraData:Ljava/lang/String;
     132: iload         4
     134: iload         4
     136: iload         5
     138: iadd
     139: invokevirtual #99                 // Method java/lang/String.substring:(II)Ljava/lang/String;
     142: areturn

  public java.lang.String getRawDecomposition(int);
    Code:
       0: iload_1
       1: aload_0
       2: getfield      #11                 // Field minDecompNoCP:I
       5: if_icmplt     22
       8: aload_0
       9: aload_0
      10: iload_1
      11: invokevirtual #76                 // Method getNorm16:(I)I
      14: dup
      15: istore_2
      16: invokevirtual #100                // Method isDecompYes:(I)Z
      19: ifeq          24
      22: aconst_null
      23: areturn
      24: aload_0
      25: iload_2
      26: invokespecial #77                 // Method isHangulLV:(I)Z
      29: ifne          40
      32: aload_0
      33: iload_2
      34: invokespecial #78                 // Method isHangulLVT:(I)Z
      37: ifeq          58
      40: new           #95                 // class java/lang/StringBuilder
      43: dup
      44: invokespecial #96                 // Method java/lang/StringBuilder."<init>":()V
      47: astore_3
      48: iload_1
      49: aload_3
      50: invokestatic  #101                // Method com/ibm/icu/impl/Normalizer2Impl$Hangul.getRawDecomposition:(ILjava/lang/Appendable;)V
      53: aload_3
      54: invokevirtual #98                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      57: areturn
      58: aload_0
      59: iload_2
      60: invokespecial #74                 // Method isDecompNoAlgorithmic:(I)Z
      63: ifeq          76
      66: aload_0
      67: iload_1
      68: iload_2
      69: invokespecial #75                 // Method mapAlgorithmic:(II)I
      72: invokestatic  #94                 // Method com/ibm/icu/text/UTF16.valueOf:(I)Ljava/lang/String;
      75: areturn
      76: iload_2
      77: iconst_1
      78: ishr
      79: istore_3
      80: aload_0
      81: getfield      #35                 // Field extraData:Ljava/lang/String;
      84: iload_3
      85: invokevirtual #79                 // Method java/lang/String.charAt:(I)C
      88: istore        4
      90: iload         4
      92: bipush        31
      94: iand
      95: istore        5
      97: iload         4
      99: bipush        64
     101: iand
     102: ifeq          192
     105: iload_3
     106: iload         4
     108: bipush        7
     110: ishr
     111: iconst_1
     112: iand
     113: isub
     114: iconst_1
     115: isub
     116: istore        6
     118: aload_0
     119: getfield      #35                 // Field extraData:Ljava/lang/String;
     122: iload         6
     124: invokevirtual #79                 // Method java/lang/String.charAt:(I)C
     127: istore        7
     129: iload         7
     131: bipush        31
     133: if_icmpgt     151
     136: aload_0
     137: getfield      #35                 // Field extraData:Ljava/lang/String;
     140: iload         6
     142: iload         7
     144: isub
     145: iload         6
     147: invokevirtual #99                 // Method java/lang/String.substring:(II)Ljava/lang/String;
     150: areturn
     151: new           #95                 // class java/lang/StringBuilder
     154: dup
     155: iload         5
     157: iconst_1
     158: isub
     159: invokespecial #102                // Method java/lang/StringBuilder."<init>":(I)V
     162: iload         7
     164: invokevirtual #103                // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
     167: astore        8
     169: iinc          3, 3
     172: aload         8
     174: aload_0
     175: getfield      #35                 // Field extraData:Ljava/lang/String;
     178: iload_3
     179: iload_3
     180: iload         5
     182: iadd
     183: iconst_2
     184: isub
     185: invokevirtual #104                // Method java/lang/StringBuilder.append:(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;
     188: invokevirtual #98                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     191: areturn
     192: iinc          3, 1
     195: aload_0
     196: getfield      #35                 // Field extraData:Ljava/lang/String;
     199: iload_3
     200: iload_3
     201: iload         5
     203: iadd
     204: invokevirtual #99                 // Method java/lang/String.substring:(II)Ljava/lang/String;
     207: areturn

  public boolean isCanonSegmentStarter(int);
    Code:
       0: aload_0
       1: getfield      #61                 // Field canonIterData:Lcom/ibm/icu/impl/Trie2_32;
       4: iload_1
       5: invokevirtual #105                // Method com/ibm/icu/impl/Trie2_32.get:(I)I
       8: iflt          15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: ireturn

  public boolean getCanonStartSet(int, com.ibm.icu.text.UnicodeSet);
    Code:
       0: aload_0
       1: getfield      #61                 // Field canonIterData:Lcom/ibm/icu/impl/Trie2_32;
       4: iload_1
       5: invokevirtual #105                // Method com/ibm/icu/impl/Trie2_32.get:(I)I
       8: ldc           #106                // int 2147483647
      10: iand
      11: istore_3
      12: iload_3
      13: ifne          18
      16: iconst_0
      17: ireturn
      18: aload_2
      19: invokevirtual #107                // Method com/ibm/icu/text/UnicodeSet.clear:()Lcom/ibm/icu/text/UnicodeSet;
      22: pop
      23: iload_3
      24: ldc           #108                // int 2097151
      26: iand
      27: istore        4
      29: iload_3
      30: ldc           #109                // int 2097152
      32: iand
      33: ifeq          56
      36: aload_2
      37: aload_0
      38: getfield      #68                 // Field canonStartSets:Ljava/util/ArrayList;
      41: iload         4
      43: invokevirtual #110                // Method java/util/ArrayList.get:(I)Ljava/lang/Object;
      46: checkcast     #111                // class com/ibm/icu/text/UnicodeSet
      49: invokevirtual #112                // Method com/ibm/icu/text/UnicodeSet.addAll:(Lcom/ibm/icu/text/UnicodeSet;)Lcom/ibm/icu/text/UnicodeSet;
      52: pop
      53: goto          68
      56: iload         4
      58: ifeq          68
      61: aload_2
      62: iload         4
      64: invokevirtual #45                 // Method com/ibm/icu/text/UnicodeSet.add:(I)Lcom/ibm/icu/text/UnicodeSet;
      67: pop
      68: iload_3
      69: ldc           #73                 // int 1073741824
      71: iand
      72: ifeq          131
      75: aload_0
      76: iload_1
      77: invokevirtual #76                 // Method getNorm16:(I)I
      80: istore        5
      82: iload         5
      84: iconst_2
      85: if_icmpne     120
      88: ldc           #58                 // int 44032
      90: iload_1
      91: sipush        4352
      94: isub
      95: sipush        588
      98: imul
      99: iadd
     100: istore        6
     102: aload_2
     103: iload         6
     105: iload         6
     107: sipush        588
     110: iadd
     111: iconst_1
     112: isub
     113: invokevirtual #43                 // Method com/ibm/icu/text/UnicodeSet.add:(II)Lcom/ibm/icu/text/UnicodeSet;
     116: pop
     117: goto          131
     120: aload_0
     121: aload_0
     122: iload         5
     124: invokespecial #113                // Method getCompositionsList:(I)I
     127: aload_2
     128: invokespecial #114                // Method addComposites:(ILcom/ibm/icu/text/UnicodeSet;)V
     131: iconst_1
     132: ireturn

  public java.lang.Appendable decompose(java.lang.CharSequence, java.lang.StringBuilder);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_1
       4: invokeinterface #115,  1          // InterfaceMethod java/lang/CharSequence.length:()I
       9: aload_2
      10: aload_1
      11: invokeinterface #115,  1          // InterfaceMethod java/lang/CharSequence.length:()I
      16: invokevirtual #116                // Method decompose:(Ljava/lang/CharSequence;IILjava/lang/StringBuilder;I)V
      19: aload_2
      20: areturn

  public void decompose(java.lang.CharSequence, int, int, java.lang.StringBuilder, int);
    Code:
       0: iload         5
       2: ifge          10
       5: iload_3
       6: iload_2
       7: isub
       8: istore        5
      10: aload         4
      12: iconst_0
      13: invokevirtual #117                // Method java/lang/StringBuilder.setLength:(I)V
      16: new           #118                // class com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer
      19: dup
      20: aload_0
      21: aload         4
      23: iload         5
      25: invokespecial #119                // Method com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer."<init>":(Lcom/ibm/icu/impl/Normalizer2Impl;Ljava/lang/Appendable;I)V
      28: astore        6
      30: aload_0
      31: aload_1
      32: iload_2
      33: iload_3
      34: aload         6
      36: invokevirtual #120                // Method decompose:(Ljava/lang/CharSequence;IILcom/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer;)I
      39: pop
      40: return

  public int decompose(java.lang.CharSequence, int, int, com.ibm.icu.impl.Normalizer2Impl$ReorderingBuffer);
    Code:
       0: aload_0
       1: getfield      #11                 // Field minDecompNoCP:I
       4: istore        5
       6: iconst_0
       7: istore        7
       9: iconst_0
      10: istore        8
      12: iload_2
      13: istore        9
      15: iconst_0
      16: istore        10
      18: iload_2
      19: istore        6
      21: iload_2
      22: iload_3
      23: if_icmpeq     189
      26: aload_1
      27: iload_2
      28: invokeinterface #121,  2          // InterfaceMethod java/lang/CharSequence.charAt:(I)C
      33: dup
      34: istore        7
      36: iload         5
      38: if_icmplt     61
      41: aload_0
      42: aload_0
      43: getfield      #27                 // Field normTrie:Lcom/ibm/icu/impl/Trie2_16;
      46: iload         7
      48: i2c
      49: invokevirtual #122                // Method com/ibm/icu/impl/Trie2_16.getFromU16SingleLead:(C)I
      52: dup
      53: istore        8
      55: invokespecial #123                // Method isMostDecompYesAndZeroCC:(I)Z
      58: ifeq          67
      61: iinc          2, 1
      64: goto          21
      67: iload         7
      69: i2c
      70: invokestatic  #124                // Method com/ibm/icu/text/UTF16.isSurrogate:(C)Z
      73: ifne          79
      76: goto          189
      79: iload         7
      81: invokestatic  #125                // Method com/ibm/icu/impl/Normalizer2Impl$UTF16Plus.isSurrogateLead:(I)Z
      84: ifeq          125
      87: iload_2
      88: iconst_1
      89: iadd
      90: iload_3
      91: if_icmpeq     162
      94: aload_1
      95: iload_2
      96: iconst_1
      97: iadd
      98: invokeinterface #121,  2          // InterfaceMethod java/lang/CharSequence.charAt:(I)C
     103: dup
     104: istore        11
     106: invokestatic  #126                // Method java/lang/Character.isLowSurrogate:(C)Z
     109: ifeq          162
     112: iload         7
     114: i2c
     115: iload         11
     117: invokestatic  #127                // Method java/lang/Character.toCodePoint:(CC)I
     120: istore        7
     122: goto          162
     125: iload         6
     127: iload_2
     128: if_icmpge     162
     131: aload_1
     132: iload_2
     133: iconst_1
     134: isub
     135: invokeinterface #121,  2          // InterfaceMethod java/lang/CharSequence.charAt:(I)C
     140: dup
     141: istore        11
     143: invokestatic  #128                // Method java/lang/Character.isHighSurrogate:(C)Z
     146: ifeq          162
     149: iinc          2, -1
     152: iload         11
     154: iload         7
     156: i2c
     157: invokestatic  #127                // Method java/lang/Character.toCodePoint:(CC)I
     160: istore        7
     162: aload_0
     163: aload_0
     164: iload         7
     166: invokevirtual #76                 // Method getNorm16:(I)I
     169: dup
     170: istore        8
     172: invokespecial #123                // Method isMostDecompYesAndZeroCC:(I)Z
     175: ifeq          189
     178: iload_2
     179: iload         7
     181: invokestatic  #82                 // Method java/lang/Character.charCount:(I)I
     184: iadd
     185: istore_2
     186: goto          21
     189: iload_2
     190: iload         6
     192: if_icmpeq     219
     195: aload         4
     197: ifnull        213
     200: aload         4
     202: aload_1
     203: iload         6
     205: iload_2
     206: invokevirtual #129                // Method com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer.flushAndAppendZeroCC:(Ljava/lang/CharSequence;II)Lcom/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer;
     209: pop
     210: goto          219
     213: iconst_0
     214: istore        10
     216: iload_2
     217: istore        9
     219: iload_2
     220: iload_3
     221: if_icmpne     227
     224: goto          300
     227: iload_2
     228: iload         7
     230: invokestatic  #82                 // Method java/lang/Character.charCount:(I)I
     233: iadd
     234: istore_2
     235: aload         4
     237: ifnull        253
     240: aload_0
     241: iload         7
     243: iload         8
     245: aload         4
     247: invokespecial #130                // Method decompose:(IILcom/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer;)V
     250: goto          18
     253: aload_0
     254: iload         8
     256: invokevirtual #100                // Method isDecompYes:(I)Z
     259: ifeq          297
     262: iload         8
     264: invokestatic  #89                 // Method getCCFromYesOrMaybe:(I)I
     267: istore        11
     269: iload         10
     271: iload         11
     273: if_icmple     281
     276: iload         11
     278: ifne          297
     281: iload         11
     283: istore        10
     285: iload         11
     287: iconst_1
     288: if_icmpgt     18
     291: iload_2
     292: istore        9
     294: goto          18
     297: iload         9
     299: ireturn
     300: iload_2
     301: ireturn

  public void decomposeAndAppend(java.lang.CharSequence, boolean, com.ibm.icu.impl.Normalizer2Impl$ReorderingBuffer);
    Code:
       0: aload_1
       1: invokeinterface #115,  1          // InterfaceMethod java/lang/CharSequence.length:()I
       6: istore        4
       8: iload         4
      10: ifne          14
      13: return
      14: iload_2
      15: ifeq          29
      18: aload_0
      19: aload_1
      20: iconst_0
      21: iload         4
      23: aload_3
      24: invokevirtual #120                // Method decompose:(Ljava/lang/CharSequence;IILcom/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer;)I
      27: pop
      28: return
      29: aload_1
      30: iconst_0
      31: invokestatic  #131                // Method java/lang/Character.codePointAt:(Ljava/lang/CharSequence;I)I
      34: istore        5
      36: iconst_0
      37: istore        6
      39: aload_0
      40: aload_0
      41: iload         5
      43: invokevirtual #76                 // Method getNorm16:(I)I
      46: invokevirtual #132                // Method getCC:(I)I
      49: dup
      50: istore        9
      52: dup
      53: istore        8
      55: istore        7
      57: iload         9
      59: ifeq          109
      62: iload         9
      64: istore        8
      66: iload         6
      68: iload         5
      70: invokestatic  #82                 // Method java/lang/Character.charCount:(I)I
      73: iadd
      74: istore        6
      76: iload         6
      78: iload         4
      80: if_icmplt     86
      83: goto          109
      86: aload_1
      87: iload         6
      89: invokestatic  #131                // Method java/lang/Character.codePointAt:(Ljava/lang/CharSequence;I)I
      92: istore        5
      94: aload_0
      95: aload_0
      96: iload         5
      98: invokevirtual #76                 // Method getNorm16:(I)I
     101: invokevirtual #132                // Method getCC:(I)I
     104: istore        9
     106: goto          57
     109: aload_3
     110: aload_1
     111: iconst_0
     112: iload         6
     114: iload         7
     116: iload         8
     118: invokevirtual #133                // Method com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer.append:(Ljava/lang/CharSequence;IIII)V
     121: aload_3
     122: aload_1
     123: iload         6
     125: iload         4
     127: invokevirtual #134                // Method com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer.append:(Ljava/lang/CharSequence;II)Lcom/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer;
     130: pop
     131: return

  public boolean compose(java.lang.CharSequence, int, int, boolean, boolean, com.ibm.icu.impl.Normalizer2Impl$ReorderingBuffer);
    Code:
       0: iload_2
       1: istore        7
       3: aload_0
       4: getfield      #12                 // Field minCompNoMaybeCP:I
       7: istore        8
       9: iconst_0
      10: istore        10
      12: iconst_0
      13: istore        11
      15: iload_2
      16: iload_3
      17: if_icmpne     43
      20: iload         7
      22: iload_3
      23: if_icmpeq     41
      26: iload         5
      28: ifeq          41
      31: aload         6
      33: aload_1
      34: iload         7
      36: iload_3
      37: invokevirtual #134                // Method com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer.append:(Ljava/lang/CharSequence;II)Lcom/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer;
      40: pop
      41: iconst_1
      42: ireturn
      43: aload_1
      44: iload_2
      45: invokeinterface #121,  2          // InterfaceMethod java/lang/CharSequence.charAt:(I)C
      50: dup
      51: istore        10
      53: iload         8
      55: if_icmplt     78
      58: aload_0
      59: aload_0
      60: getfield      #27                 // Field normTrie:Lcom/ibm/icu/impl/Trie2_16;
      63: iload         10
      65: i2c
      66: invokevirtual #122                // Method com/ibm/icu/impl/Trie2_16.getFromU16SingleLead:(C)I
      69: dup
      70: istore        11
      72: invokespecial #135                // Method isCompYesAndZeroCC:(I)Z
      75: ifeq          84
      78: iinc          2, 1
      81: goto          15
      84: iload_2
      85: iinc          2, 1
      88: istore        9
      90: iload         10
      92: i2c
      93: invokestatic  #124                // Method com/ibm/icu/text/UTF16.isSurrogate:(C)Z
      96: ifne          102
      99: goto          205
     102: iload         10
     104: invokestatic  #125                // Method com/ibm/icu/impl/Normalizer2Impl$UTF16Plus.isSurrogateLead:(I)Z
     107: ifeq          147
     110: iload_2
     111: iload_3
     112: if_icmpeq     186
     115: aload_1
     116: iload_2
     117: invokeinterface #121,  2          // InterfaceMethod java/lang/CharSequence.charAt:(I)C
     122: dup
     123: istore        12
     125: invokestatic  #126                // Method java/lang/Character.isLowSurrogate:(C)Z
     128: ifeq          186
     131: iinc          2, 1
     134: iload         10
     136: i2c
     137: iload         12
     139: invokestatic  #127                // Method java/lang/Character.toCodePoint:(CC)I
     142: istore        10
     144: goto          186
     147: iload         7
     149: iload         9
     151: if_icmpge     186
     154: aload_1
     155: iload         9
     157: iconst_1
     158: isub
     159: invokeinterface #121,  2          // InterfaceMethod java/lang/CharSequence.charAt:(I)C
     164: dup
     165: istore        12
     167: invokestatic  #128                // Method java/lang/Character.isHighSurrogate:(C)Z
     170: ifeq          186
     173: iinc          9, -1
     176: iload         12
     178: iload         10
     180: i2c
     181: invokestatic  #127                // Method java/lang/Character.toCodePoint:(CC)I
     184: istore        10
     186: aload_0
     187: aload_0
     188: iload         10
     190: invokevirtual #76                 // Method getNorm16:(I)I
     193: dup
     194: istore        11
     196: invokespecial #135                // Method isCompYesAndZeroCC:(I)Z
     199: ifne          15
     202: goto          205
     205: aload_0
     206: iload         11
     208: invokespecial #71                 // Method isMaybeOrNonZeroCC:(I)Z
     211: ifne          440
     214: iload         5
     216: ifne          221
     219: iconst_0
     220: ireturn
     221: aload_0
     222: iload         11
     224: invokespecial #74                 // Method isDecompNoAlgorithmic:(I)Z
     227: ifeq          289
     230: aload_0
     231: iload         11
     233: iload         4
     235: invokespecial #136                // Method norm16HasCompBoundaryAfter:(IZ)Z
     238: ifne          251
     241: aload_0
     242: aload_1
     243: iload_2
     244: iload_3
     245: invokespecial #137                // Method hasCompBoundaryBefore:(Ljava/lang/CharSequence;II)Z
     248: ifeq          837
     251: iload         7
     253: iload         9
     255: if_icmpeq     269
     258: aload         6
     260: aload_1
     261: iload         7
     263: iload         9
     265: invokevirtual #134                // Method com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer.append:(Ljava/lang/CharSequence;II)Lcom/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer;
     268: pop
     269: aload         6
     271: aload_0
     272: iload         10
     274: iload         11
     276: invokespecial #75                 // Method mapAlgorithmic:(II)I
     279: iconst_0
     280: invokevirtual #138                // Method com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer.append:(II)V
     283: iload_2
     284: istore        7
     286: goto          9
     289: iload         11
     291: aload_0
     292: getfield      #17                 // Field minNoNoCompBoundaryBefore:I
     295: if_icmpge     383
     298: aload_0
     299: iload         11
     301: iload         4
     303: invokespecial #136                // Method norm16HasCompBoundaryAfter:(IZ)Z
     306: ifne          319
     309: aload_0
     310: aload_1
     311: iload_2
     312: iload_3
     313: invokespecial #137                // Method hasCompBoundaryBefore:(Ljava/lang/CharSequence;II)Z
     316: ifeq          837
     319: iload         7
     321: iload         9
     323: if_icmpeq     337
     326: aload         6
     328: aload_1
     329: iload         7
     331: iload         9
     333: invokevirtual #134                // Method com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer.append:(Ljava/lang/CharSequence;II)Lcom/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer;
     336: pop
     337: iload         11
     339: iconst_1
     340: ishr
     341: istore        12
     343: aload_0
     344: getfield      #35                 // Field extraData:Ljava/lang/String;
     347: iload         12
     349: iinc          12, 1
     352: invokevirtual #79                 // Method java/lang/String.charAt:(I)C
     355: bipush        31
     357: iand
     358: istore        13
     360: aload         6
     362: aload_0
     363: getfield      #35                 // Field extraData:Ljava/lang/String;
     366: iload         12
     368: iload         12
     370: iload         13
     372: iadd
     373: invokevirtual #134                // Method com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer.append:(Ljava/lang/CharSequence;II)Lcom/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer;
     376: pop
     377: iload_2
     378: istore        7
     380: goto          9
     383: iload         11
     385: aload_0
     386: getfield      #19                 // Field minNoNoEmpty:I
     389: if_icmplt     837
     392: aload_0
     393: aload_1
     394: iload_2
     395: iload_3
     396: invokespecial #137                // Method hasCompBoundaryBefore:(Ljava/lang/CharSequence;II)Z
     399: ifne          416
     402: aload_0
     403: aload_1
     404: iload         7
     406: iload         9
     408: iload         4
     410: invokespecial #139                // Method hasCompBoundaryAfter:(Ljava/lang/CharSequence;IIZ)Z
     413: ifeq          837
     416: iload         7
     418: iload         9
     420: if_icmpeq     434
     423: aload         6
     425: aload_1
     426: iload         7
     428: iload         9
     430: invokevirtual #134                // Method com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer.append:(Ljava/lang/CharSequence;II)Lcom/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer;
     433: pop
     434: iload_2
     435: istore        7
     437: goto          9
     440: iload         11
     442: invokestatic  #140                // Method isJamoVT:(I)Z
     445: ifeq          685
     448: iload         7
     450: iload         9
     452: if_icmpeq     685
     455: aload_1
     456: iload         9
     458: iconst_1
     459: isub
     460: invokeinterface #121,  2          // InterfaceMethod java/lang/CharSequence.charAt:(I)C
     465: istore        12
     467: iload         10
     469: sipush        4519
     472: if_icmpge     620
     475: iload         12
     477: sipush        4352
     480: isub
     481: i2c
     482: istore        13
     484: iload         13
     486: bipush        19
     488: if_icmpge     617
     491: iload         5
     493: ifne          498
     496: iconst_0
     497: ireturn
     498: iload_2
     499: iload_3
     500: if_icmpeq     534
     503: iconst_0
     504: aload_1
     505: iload_2
     506: invokeinterface #121,  2          // InterfaceMethod java/lang/CharSequence.charAt:(I)C
     511: sipush        4519
     514: isub
     515: dup
     516: istore        14
     518: if_icmpge     534
     521: iload         14
     523: bipush        28
     525: if_icmpge     534
     528: iinc          2, 1
     531: goto          553
     534: aload_0
     535: aload_1
     536: iload_2
     537: iload_3
     538: invokespecial #137                // Method hasCompBoundaryBefore:(Ljava/lang/CharSequence;II)Z
     541: ifeq          550
     544: iconst_0
     545: istore        14
     547: goto          553
     550: iconst_m1
     551: istore        14
     553: iload         14
     555: iflt          617
     558: ldc           #58                 // int 44032
     560: iload         13
     562: bipush        21
     564: imul
     565: iload         10
     567: sipush        4449
     570: isub
     571: iadd
     572: bipush        28
     574: imul
     575: iadd
     576: iload         14
     578: iadd
     579: istore        15
     581: iinc          9, -1
     584: iload         7
     586: iload         9
     588: if_icmpeq     602
     591: aload         6
     593: aload_1
     594: iload         7
     596: iload         9
     598: invokevirtual #134                // Method com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer.append:(Ljava/lang/CharSequence;II)Lcom/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer;
     601: pop
     602: aload         6
     604: iload         15
     606: i2c
     607: invokevirtual #141                // Method com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer.append:(C)Lcom/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer;
     610: pop
     611: iload_2
     612: istore        7
     614: goto          9
     617: goto          682
     620: iload         12
     622: invokestatic  #142                // Method com/ibm/icu/impl/Normalizer2Impl$Hangul.isHangulLV:(I)Z
     625: ifeq          682
     628: iload         5
     630: ifne          635
     633: iconst_0
     634: ireturn
     635: iload         12
     637: iload         10
     639: iadd
     640: sipush        4519
     643: isub
     644: istore        13
     646: iinc          9, -1
     649: iload         7
     651: iload         9
     653: if_icmpeq     667
     656: aload         6
     658: aload_1
     659: iload         7
     661: iload         9
     663: invokevirtual #134                // Method com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer.append:(Ljava/lang/CharSequence;II)Lcom/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer;
     666: pop
     667: aload         6
     669: iload         13
     671: i2c
     672: invokevirtual #141                // Method com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer.append:(C)Lcom/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer;
     675: pop
     676: iload_2
     677: istore        7
     679: goto          9
     682: goto          837
     685: iload         11
     687: ldc           #42                 // int 65024
     689: if_icmple     837
     692: iload         11
     694: invokestatic  #87                 // Method getCCFromNormalYesOrMaybe:(I)I
     697: istore        12
     699: iload         4
     701: ifeq          725
     704: aload_0
     705: aload_1
     706: iload         7
     708: iload         9
     710: invokespecial #143                // Method getPreviousTrailCC:(Ljava/lang/CharSequence;II)I
     713: iload         12
     715: if_icmple     725
     718: iload         5
     720: ifne          837
     723: iconst_0
     724: ireturn
     725: iload_2
     726: iload_3
     727: if_icmpne     747
     730: iload         5
     732: ifeq          745
     735: aload         6
     737: aload_1
     738: iload         7
     740: iload_3
     741: invokevirtual #134                // Method com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer.append:(Ljava/lang/CharSequence;II)Lcom/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer;
     744: pop
     745: iconst_1
     746: ireturn
     747: iload         12
     749: istore        14
     751: aload_1
     752: iload_2
     753: invokestatic  #131                // Method java/lang/Character.codePointAt:(Ljava/lang/CharSequence;I)I
     756: istore        10
     758: aload_0
     759: getfield      #27                 // Field normTrie:Lcom/ibm/icu/impl/Trie2_16;
     762: iload         10
     764: invokevirtual #85                 // Method com/ibm/icu/impl/Trie2_16.get:(I)I
     767: istore        13
     769: iload         13
     771: ldc           #86                 // int 65026
     773: if_icmplt     808
     776: iload         13
     778: invokestatic  #87                 // Method getCCFromNormalYesOrMaybe:(I)I
     781: istore        12
     783: iload         14
     785: iload         12
     787: if_icmple     797
     790: iload         5
     792: ifne          808
     795: iconst_0
     796: ireturn
     797: iload_2
     798: iload         10
     800: invokestatic  #82                 // Method java/lang/Character.charCount:(I)I
     803: iadd
     804: istore_2
     805: goto          725
     808: aload_0
     809: iload         13
     811: invokespecial #144                // Method norm16HasCompBoundaryBefore:(I)Z
     814: ifeq          837
     817: aload_0
     818: iload         13
     820: invokespecial #135                // Method isCompYesAndZeroCC:(I)Z
     823: ifeq          9
     826: iload_2
     827: iload         10
     829: invokestatic  #82                 // Method java/lang/Character.charCount:(I)I
     832: iadd
     833: istore_2
     834: goto          9
     837: iload         7
     839: iload         9
     841: if_icmpeq     893
     844: aload_0
     845: iload         11
     847: invokespecial #144                // Method norm16HasCompBoundaryBefore:(I)Z
     850: ifne          893
     853: aload_1
     854: iload         9
     856: invokestatic  #145                // Method java/lang/Character.codePointBefore:(Ljava/lang/CharSequence;I)I
     859: istore        10
     861: aload_0
     862: getfield      #27                 // Field normTrie:Lcom/ibm/icu/impl/Trie2_16;
     865: iload         10
     867: invokevirtual #85                 // Method com/ibm/icu/impl/Trie2_16.get:(I)I
     870: istore        11
     872: aload_0
     873: iload         11
     875: iload         4
     877: invokespecial #136                // Method norm16HasCompBoundaryAfter:(IZ)Z
     880: ifne          893
     883: iload         9
     885: iload         10
     887: invokestatic  #82                 // Method java/lang/Character.charCount:(I)I
     890: isub
     891: istore        9
     893: iload         5
     895: ifeq          916
     898: iload         7
     900: iload         9
     902: if_icmpeq     916
     905: aload         6
     907: aload_1
     908: iload         7
     910: iload         9
     912: invokevirtual #134                // Method com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer.append:(Ljava/lang/CharSequence;II)Lcom/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer;
     915: pop
     916: aload         6
     918: invokevirtual #146                // Method com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer.length:()I
     921: istore        12
     923: aload_0
     924: aload_1
     925: iload         9
     927: iload_2
     928: iconst_0
     929: iload         4
     931: aload         6
     933: invokespecial #147                // Method decomposeShort:(Ljava/lang/CharSequence;IIZZLcom/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer;)I
     936: pop
     937: aload_0
     938: aload_1
     939: iload_2
     940: iload_3
     941: iconst_1
     942: iload         4
     944: aload         6
     946: invokespecial #147                // Method decomposeShort:(Ljava/lang/CharSequence;IIZZLcom/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer;)I
     949: istore_2
     950: aload_0
     951: aload         6
     953: iload         12
     955: iload         4
     957: invokespecial #148                // Method recompose:(Lcom/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer;IZ)V
     960: iload         5
     962: ifne          984
     965: aload         6
     967: aload_1
     968: iload         9
     970: iload_2
     971: invokevirtual #149                // Method com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer.equals:(Ljava/lang/CharSequence;II)Z
     974: ifne          979
     977: iconst_0
     978: ireturn
     979: aload         6
     981: invokevirtual #150                // Method com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer.remove:()V
     984: iload_2
     985: istore        7
     987: goto          9

  public int composeQuickCheck(java.lang.CharSequence, int, int, boolean, boolean);
    Code:
       0: iconst_0
       1: istore        6
       3: iload_2
       4: istore        7
       6: aload_0
       7: getfield      #12                 // Field minCompNoMaybeCP:I
      10: istore        8
      12: iconst_0
      13: istore        10
      15: iconst_0
      16: istore        11
      18: iload_2
      19: iload_3
      20: if_icmpne     30
      23: iload_2
      24: iconst_1
      25: ishl
      26: iload         6
      28: ior
      29: ireturn
      30: aload_1
      31: iload_2
      32: invokeinterface #121,  2          // InterfaceMethod java/lang/CharSequence.charAt:(I)C
      37: dup
      38: istore        10
      40: iload         8
      42: if_icmplt     65
      45: aload_0
      46: aload_0
      47: getfield      #27                 // Field normTrie:Lcom/ibm/icu/impl/Trie2_16;
      50: iload         10
      52: i2c
      53: invokevirtual #122                // Method com/ibm/icu/impl/Trie2_16.getFromU16SingleLead:(C)I
      56: dup
      57: istore        11
      59: invokespecial #135                // Method isCompYesAndZeroCC:(I)Z
      62: ifeq          71
      65: iinc          2, 1
      68: goto          18
      71: iload_2
      72: iinc          2, 1
      75: istore        9
      77: iload         10
      79: i2c
      80: invokestatic  #124                // Method com/ibm/icu/text/UTF16.isSurrogate:(C)Z
      83: ifne          89
      86: goto          192
      89: iload         10
      91: invokestatic  #125                // Method com/ibm/icu/impl/Normalizer2Impl$UTF16Plus.isSurrogateLead:(I)Z
      94: ifeq          134
      97: iload_2
      98: iload_3
      99: if_icmpeq     173
     102: aload_1
     103: iload_2
     104: invokeinterface #121,  2          // InterfaceMethod java/lang/CharSequence.charAt:(I)C
     109: dup
     110: istore        12
     112: invokestatic  #126                // Method java/lang/Character.isLowSurrogate:(C)Z
     115: ifeq          173
     118: iinc          2, 1
     121: iload         10
     123: i2c
     124: iload         12
     126: invokestatic  #127                // Method java/lang/Character.toCodePoint:(CC)I
     129: istore        10
     131: goto          173
     134: iload         7
     136: iload         9
     138: if_icmpge     173
     141: aload_1
     142: iload         9
     144: iconst_1
     145: isub
     146: invokeinterface #121,  2          // InterfaceMethod java/lang/CharSequence.charAt:(I)C
     151: dup
     152: istore        12
     154: invokestatic  #128                // Method java/lang/Character.isHighSurrogate:(C)Z
     157: ifeq          173
     160: iinc          9, -1
     163: iload         12
     165: iload         10
     167: i2c
     168: invokestatic  #127                // Method java/lang/Character.toCodePoint:(CC)I
     171: istore        10
     173: aload_0
     174: aload_0
     175: iload         10
     177: invokevirtual #76                 // Method getNorm16:(I)I
     180: dup
     181: istore        11
     183: invokespecial #135                // Method isCompYesAndZeroCC:(I)Z
     186: ifne          18
     189: goto          192
     192: iconst_1
     193: istore        12
     195: iload         7
     197: iload         9
     199: if_icmpeq     256
     202: iload         9
     204: istore        7
     206: aload_0
     207: iload         11
     209: invokespecial #144                // Method norm16HasCompBoundaryBefore:(I)Z
     212: ifne          256
     215: aload_1
     216: iload         9
     218: invokestatic  #145                // Method java/lang/Character.codePointBefore:(Ljava/lang/CharSequence;I)I
     221: istore        10
     223: aload_0
     224: iload         10
     226: invokevirtual #76                 // Method getNorm16:(I)I
     229: istore        13
     231: aload_0
     232: iload         13
     234: iload         4
     236: invokespecial #136                // Method norm16HasCompBoundaryAfter:(IZ)Z
     239: ifne          256
     242: iload         7
     244: iload         10
     246: invokestatic  #82                 // Method java/lang/Character.charCount:(I)I
     249: isub
     250: istore        7
     252: iload         13
     254: istore        12
     256: aload_0
     257: iload         11
     259: invokespecial #71                 // Method isMaybeOrNonZeroCC:(I)Z
     262: ifeq          415
     265: iload         11
     267: invokestatic  #89                 // Method getCCFromYesOrMaybe:(I)I
     270: istore        13
     272: iload         4
     274: ifeq          296
     277: iload         13
     279: ifeq          296
     282: aload_0
     283: iload         12
     285: invokevirtual #151                // Method getTrailCCFromCompYesAndZeroCC:(I)I
     288: iload         13
     290: if_icmple     296
     293: goto          415
     296: iload         11
     298: ldc           #86                 // int 65026
     300: if_icmpge     319
     303: iload         5
     305: ifne          314
     308: iconst_1
     309: istore        6
     311: goto          319
     314: iload         7
     316: iconst_1
     317: ishl
     318: ireturn
     319: iload_2
     320: iload_3
     321: if_icmpne     331
     324: iload_2
     325: iconst_1
     326: ishl
     327: iload         6
     329: ior
     330: ireturn
     331: iload         13
     333: istore        14
     335: aload_1
     336: iload_2
     337: invokestatic  #131                // Method java/lang/Character.codePointAt:(Ljava/lang/CharSequence;I)I
     340: istore        10
     342: aload_0
     343: iload         10
     345: invokevirtual #76                 // Method getNorm16:(I)I
     348: istore        11
     350: aload_0
     351: iload         11
     353: invokespecial #71                 // Method isMaybeOrNonZeroCC:(I)Z
     356: ifeq          392
     359: iload         11
     361: invokestatic  #89                 // Method getCCFromYesOrMaybe:(I)I
     364: istore        13
     366: iload         14
     368: iload         13
     370: if_icmple     381
     373: iload         13
     375: ifeq          381
     378: goto          392
     381: iload_2
     382: iload         10
     384: invokestatic  #82                 // Method java/lang/Character.charCount:(I)I
     387: iadd
     388: istore_2
     389: goto          296
     392: aload_0
     393: iload         11
     395: invokespecial #135                // Method isCompYesAndZeroCC:(I)Z
     398: ifeq          415
     401: iload_2
     402: istore        7
     404: iload_2
     405: iload         10
     407: invokestatic  #82                 // Method java/lang/Character.charCount:(I)I
     410: iadd
     411: istore_2
     412: goto          12
     415: iload         7
     417: iconst_1
     418: ishl
     419: ireturn

  public void composeAndAppend(java.lang.CharSequence, boolean, boolean, com.ibm.icu.impl.Normalizer2Impl$ReorderingBuffer);
    Code:
       0: iconst_0
       1: istore        5
       3: aload_1
       4: invokeinterface #115,  1          // InterfaceMethod java/lang/CharSequence.length:()I
       9: istore        6
      11: aload         4
      13: invokevirtual #152                // Method com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer.isEmpty:()Z
      16: ifne          138
      19: aload_0
      20: aload_1
      21: iconst_0
      22: iload         6
      24: iload_3
      25: invokespecial #153                // Method findNextCompBoundary:(Ljava/lang/CharSequence;IIZ)I
      28: istore        7
      30: iconst_0
      31: iload         7
      33: if_icmpeq     138
      36: aload_0
      37: aload         4
      39: invokevirtual #154                // Method com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer.getStringBuilder:()Ljava/lang/StringBuilder;
      42: aload         4
      44: invokevirtual #146                // Method com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer.length:()I
      47: iload_3
      48: invokespecial #155                // Method findPreviousCompBoundary:(Ljava/lang/CharSequence;IZ)I
      51: istore        8
      53: new           #95                 // class java/lang/StringBuilder
      56: dup
      57: aload         4
      59: invokevirtual #146                // Method com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer.length:()I
      62: iload         8
      64: isub
      65: iload         7
      67: iadd
      68: bipush        16
      70: iadd
      71: invokespecial #102                // Method java/lang/StringBuilder."<init>":(I)V
      74: astore        9
      76: aload         9
      78: aload         4
      80: invokevirtual #154                // Method com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer.getStringBuilder:()Ljava/lang/StringBuilder;
      83: iload         8
      85: aload         4
      87: invokevirtual #146                // Method com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer.length:()I
      90: invokevirtual #104                // Method java/lang/StringBuilder.append:(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;
      93: pop
      94: aload         4
      96: aload         4
      98: invokevirtual #146                // Method com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer.length:()I
     101: iload         8
     103: isub
     104: invokevirtual #156                // Method com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer.removeSuffix:(I)V
     107: aload         9
     109: aload_1
     110: iconst_0
     111: iload         7
     113: invokevirtual #104                // Method java/lang/StringBuilder.append:(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;
     116: pop
     117: aload_0
     118: aload         9
     120: iconst_0
     121: aload         9
     123: invokevirtual #157                // Method java/lang/StringBuilder.length:()I
     126: iload_3
     127: iconst_1
     128: aload         4
     130: invokevirtual #158                // Method compose:(Ljava/lang/CharSequence;IIZZLcom/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer;)Z
     133: pop
     134: iload         7
     136: istore        5
     138: iload_2
     139: ifeq          159
     142: aload_0
     143: aload_1
     144: iload         5
     146: iload         6
     148: iload_3
     149: iconst_1
     150: aload         4
     152: invokevirtual #158                // Method compose:(Ljava/lang/CharSequence;IIZZLcom/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer;)Z
     155: pop
     156: goto          170
     159: aload         4
     161: aload_1
     162: iload         5
     164: iload         6
     166: invokevirtual #134                // Method com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer.append:(Ljava/lang/CharSequence;II)Lcom/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer;
     169: pop
     170: return

  public int makeFCD(java.lang.CharSequence, int, int, com.ibm.icu.impl.Normalizer2Impl$ReorderingBuffer);
    Code:
       0: iload_2
       1: istore        5
       3: iconst_0
       4: istore        7
       6: iconst_0
       7: istore        8
       9: iconst_0
      10: istore        9
      12: iload_2
      13: istore        6
      15: iload_2
      16: iload_3
      17: if_icmpeq     189
      20: aload_1
      21: iload_2
      22: invokeinterface #121,  2          // InterfaceMethod java/lang/CharSequence.charAt:(I)C
      27: dup
      28: istore        7
      30: aload_0
      31: getfield      #13                 // Field minLcccCP:I
      34: if_icmpge     49
      37: iload         7
      39: iconst_m1
      40: ixor
      41: istore        8
      43: iinc          2, 1
      46: goto          15
      49: aload_0
      50: iload         7
      52: invokevirtual #91                 // Method singleLeadMightHaveNonZeroFCD16:(I)Z
      55: ifne          67
      58: iconst_0
      59: istore        8
      61: iinc          2, 1
      64: goto          15
      67: iload         7
      69: i2c
      70: invokestatic  #124                // Method com/ibm/icu/text/UTF16.isSurrogate:(C)Z
      73: ifeq          159
      76: iload         7
      78: invokestatic  #125                // Method com/ibm/icu/impl/Normalizer2Impl$UTF16Plus.isSurrogateLead:(I)Z
      81: ifeq          122
      84: iload_2
      85: iconst_1
      86: iadd
      87: iload_3
      88: if_icmpeq     159
      91: aload_1
      92: iload_2
      93: iconst_1
      94: iadd
      95: invokeinterface #121,  2          // InterfaceMethod java/lang/CharSequence.charAt:(I)C
     100: dup
     101: istore        10
     103: invokestatic  #126                // Method java/lang/Character.isLowSurrogate:(C)Z
     106: ifeq          159
     109: iload         7
     111: i2c
     112: iload         10
     114: invokestatic  #127                // Method java/lang/Character.toCodePoint:(CC)I
     117: istore        7
     119: goto          159
     122: iload         6
     124: iload_2
     125: if_icmpge     159
     128: aload_1
     129: iload_2
     130: iconst_1
     131: isub
     132: invokeinterface #121,  2          // InterfaceMethod java/lang/CharSequence.charAt:(I)C
     137: dup
     138: istore        10
     140: invokestatic  #128                // Method java/lang/Character.isHighSurrogate:(C)Z
     143: ifeq          159
     146: iinc          2, -1
     149: iload         10
     151: iload         7
     153: i2c
     154: invokestatic  #127                // Method java/lang/Character.toCodePoint:(CC)I
     157: istore        7
     159: aload_0
     160: iload         7
     162: invokevirtual #92                 // Method getFCD16FromNormData:(I)I
     165: dup
     166: istore        9
     168: sipush        255
     171: if_icmpgt     189
     174: iload         9
     176: istore        8
     178: iload_2
     179: iload         7
     181: invokestatic  #82                 // Method java/lang/Character.charCount:(I)I
     184: iadd
     185: istore_2
     186: goto          15
     189: iload_2
     190: iload         6
     192: if_icmpeq     381
     195: iload_2
     196: iload_3
     197: if_icmpne     218
     200: aload         4
     202: ifnull        491
     205: aload         4
     207: aload_1
     208: iload         6
     210: iload_2
     211: invokevirtual #129                // Method com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer.flushAndAppendZeroCC:(Ljava/lang/CharSequence;II)Lcom/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer;
     214: pop
     215: goto          491
     218: iload_2
     219: istore        5
     221: iload         8
     223: ifge          267
     226: iload         8
     228: iconst_m1
     229: ixor
     230: istore        10
     232: iload         10
     234: aload_0
     235: getfield      #11                 // Field minDecompNoCP:I
     238: if_icmpge     247
     241: iconst_0
     242: istore        8
     244: goto          264
     247: aload_0
     248: iload         10
     250: invokevirtual #92                 // Method getFCD16FromNormData:(I)I
     253: istore        8
     255: iload         8
     257: iconst_1
     258: if_icmple     264
     261: iinc          5, -1
     264: goto          349
     267: iload_2
     268: iconst_1
     269: isub
     270: istore        10
     272: aload_1
     273: iload         10
     275: invokeinterface #121,  2          // InterfaceMethod java/lang/CharSequence.charAt:(I)C
     280: invokestatic  #126                // Method java/lang/Character.isLowSurrogate:(C)Z
     283: ifeq          339
     286: iload         6
     288: iload         10
     290: if_icmpge     339
     293: aload_1
     294: iload         10
     296: iconst_1
     297: isub
     298: invokeinterface #121,  2          // InterfaceMethod java/lang/CharSequence.charAt:(I)C
     303: invokestatic  #128                // Method java/lang/Character.isHighSurrogate:(C)Z
     306: ifeq          339
     309: iinc          10, -1
     312: aload_0
     313: aload_1
     314: iload         10
     316: invokeinterface #121,  2          // InterfaceMethod java/lang/CharSequence.charAt:(I)C
     321: aload_1
     322: iload         10
     324: iconst_1
     325: iadd
     326: invokeinterface #121,  2          // InterfaceMethod java/lang/CharSequence.charAt:(I)C
     331: invokestatic  #127                // Method java/lang/Character.toCodePoint:(CC)I
     334: invokevirtual #92                 // Method getFCD16FromNormData:(I)I
     337: istore        8
     339: iload         8
     341: iconst_1
     342: if_icmple     349
     345: iload         10
     347: istore        5
     349: aload         4
     351: ifnull        375
     354: aload         4
     356: aload_1
     357: iload         6
     359: iload         5
     361: invokevirtual #129                // Method com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer.flushAndAppendZeroCC:(Ljava/lang/CharSequence;II)Lcom/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer;
     364: pop
     365: aload         4
     367: aload_1
     368: iload         5
     370: iload_2
     371: invokevirtual #134                // Method com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer.append:(Ljava/lang/CharSequence;II)Lcom/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer;
     374: pop
     375: iload_2
     376: istore        6
     378: goto          389
     381: iload_2
     382: iload_3
     383: if_icmpne     389
     386: goto          491
     389: iload_2
     390: iload         7
     392: invokestatic  #82                 // Method java/lang/Character.charCount:(I)I
     395: iadd
     396: istore_2
     397: iload         8
     399: sipush        255
     402: iand
     403: iload         9
     405: bipush        8
     407: ishr
     408: if_icmpgt     443
     411: iload         9
     413: sipush        255
     416: iand
     417: iconst_1
     418: if_icmpgt     424
     421: iload_2
     422: istore        5
     424: aload         4
     426: ifnull        436
     429: aload         4
     431: iload         7
     433: invokevirtual #159                // Method com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer.appendZeroCC:(I)V
     436: iload         9
     438: istore        8
     440: goto          12
     443: aload         4
     445: ifnonnull     451
     448: iload         5
     450: ireturn
     451: aload         4
     453: iload         6
     455: iload         5
     457: isub
     458: invokevirtual #156                // Method com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer.removeSuffix:(I)V
     461: aload_0
     462: aload_1
     463: iload_2
     464: iload_3
     465: invokespecial #160                // Method findNextFCDBoundary:(Ljava/lang/CharSequence;II)I
     468: istore_2
     469: aload_0
     470: aload_1
     471: iload         5
     473: iload_2
     474: iconst_0
     475: iconst_0
     476: aload         4
     478: invokespecial #147                // Method decomposeShort:(Ljava/lang/CharSequence;IIZZLcom/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer;)I
     481: pop
     482: iload_2
     483: istore        5
     485: iconst_0
     486: istore        8
     488: goto          12
     491: iload_2
     492: ireturn

  public void makeFCDAndAppend(java.lang.CharSequence, boolean, com.ibm.icu.impl.Normalizer2Impl$ReorderingBuffer);
    Code:
       0: iconst_0
       1: istore        4
       3: aload_1
       4: invokeinterface #115,  1          // InterfaceMethod java/lang/CharSequence.length:()I
       9: istore        5
      11: aload_3
      12: invokevirtual #152                // Method com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer.isEmpty:()Z
      15: ifne          125
      18: aload_0
      19: aload_1
      20: iconst_0
      21: iload         5
      23: invokespecial #160                // Method findNextFCDBoundary:(Ljava/lang/CharSequence;II)I
      26: istore        6
      28: iconst_0
      29: iload         6
      31: if_icmpeq     125
      34: aload_0
      35: aload_3
      36: invokevirtual #154                // Method com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer.getStringBuilder:()Ljava/lang/StringBuilder;
      39: aload_3
      40: invokevirtual #146                // Method com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer.length:()I
      43: invokespecial #161                // Method findPreviousFCDBoundary:(Ljava/lang/CharSequence;I)I
      46: istore        7
      48: new           #95                 // class java/lang/StringBuilder
      51: dup
      52: aload_3
      53: invokevirtual #146                // Method com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer.length:()I
      56: iload         7
      58: isub
      59: iload         6
      61: iadd
      62: bipush        16
      64: iadd
      65: invokespecial #102                // Method java/lang/StringBuilder."<init>":(I)V
      68: astore        8
      70: aload         8
      72: aload_3
      73: invokevirtual #154                // Method com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer.getStringBuilder:()Ljava/lang/StringBuilder;
      76: iload         7
      78: aload_3
      79: invokevirtual #146                // Method com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer.length:()I
      82: invokevirtual #104                // Method java/lang/StringBuilder.append:(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;
      85: pop
      86: aload_3
      87: aload_3
      88: invokevirtual #146                // Method com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer.length:()I
      91: iload         7
      93: isub
      94: invokevirtual #156                // Method com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer.removeSuffix:(I)V
      97: aload         8
      99: aload_1
     100: iconst_0
     101: iload         6
     103: invokevirtual #104                // Method java/lang/StringBuilder.append:(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;
     106: pop
     107: aload_0
     108: aload         8
     110: iconst_0
     111: aload         8
     113: invokevirtual #157                // Method java/lang/StringBuilder.length:()I
     116: aload_3
     117: invokevirtual #162                // Method makeFCD:(Ljava/lang/CharSequence;IILcom/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer;)I
     120: pop
     121: iload         6
     123: istore        4
     125: iload_2
     126: ifeq          143
     129: aload_0
     130: aload_1
     131: iload         4
     133: iload         5
     135: aload_3
     136: invokevirtual #162                // Method makeFCD:(Ljava/lang/CharSequence;IILcom/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer;)I
     139: pop
     140: goto          153
     143: aload_3
     144: aload_1
     145: iload         4
     147: iload         5
     149: invokevirtual #134                // Method com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer.append:(Ljava/lang/CharSequence;II)Lcom/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer;
     152: pop
     153: return

  public boolean hasDecompBoundaryBefore(int);
    Code:
       0: iload_1
       1: aload_0
       2: getfield      #13                 // Field minLcccCP:I
       5: if_icmplt     34
       8: iload_1
       9: ldc           #90                 // int 65535
      11: if_icmpgt     22
      14: aload_0
      15: iload_1
      16: invokevirtual #91                 // Method singleLeadMightHaveNonZeroFCD16:(I)Z
      19: ifeq          34
      22: aload_0
      23: aload_0
      24: iload_1
      25: invokevirtual #76                 // Method getNorm16:(I)I
      28: invokevirtual #163                // Method norm16HasDecompBoundaryBefore:(I)Z
      31: ifeq          38
      34: iconst_1
      35: goto          39
      38: iconst_0
      39: ireturn

  public boolean norm16HasDecompBoundaryBefore(int);
    Code:
       0: iload_1
       1: aload_0
       2: getfield      #18                 // Field minNoNoCompNoMaybeCC:I
       5: if_icmpge     10
       8: iconst_1
       9: ireturn
      10: iload_1
      11: aload_0
      12: getfield      #20                 // Field limitNoNo:I
      15: if_icmplt     36
      18: iload_1
      19: ldc           #33                 // int 64512
      21: if_icmple     30
      24: iload_1
      25: ldc           #42                 // int 65024
      27: if_icmpne     34
      30: iconst_1
      31: goto          35
      34: iconst_0
      35: ireturn
      36: iload_1
      37: iconst_1
      38: ishr
      39: istore_2
      40: aload_0
      41: getfield      #35                 // Field extraData:Ljava/lang/String;
      44: iload_2
      45: invokevirtual #79                 // Method java/lang/String.charAt:(I)C
      48: istore_3
      49: iload_3
      50: sipush        128
      53: iand
      54: ifeq          73
      57: aload_0
      58: getfield      #35                 // Field extraData:Ljava/lang/String;
      61: iload_2
      62: iconst_1
      63: isub
      64: invokevirtual #79                 // Method java/lang/String.charAt:(I)C
      67: ldc           #93                 // int 65280
      69: iand
      70: ifne          77
      73: iconst_1
      74: goto          78
      77: iconst_0
      78: ireturn

  public boolean hasDecompBoundaryAfter(int);
    Code:
       0: iload_1
       1: aload_0
       2: getfield      #11                 // Field minDecompNoCP:I
       5: if_icmpge     10
       8: iconst_1
       9: ireturn
      10: iload_1
      11: ldc           #90                 // int 65535
      13: if_icmpgt     26
      16: aload_0
      17: iload_1
      18: invokevirtual #91                 // Method singleLeadMightHaveNonZeroFCD16:(I)Z
      21: ifne          26
      24: iconst_1
      25: ireturn
      26: aload_0
      27: aload_0
      28: iload_1
      29: invokevirtual #76                 // Method getNorm16:(I)I
      32: invokevirtual #164                // Method norm16HasDecompBoundaryAfter:(I)Z
      35: ireturn

  public boolean norm16HasDecompBoundaryAfter(int);
    Code:
       0: iload_1
       1: aload_0
       2: getfield      #14                 // Field minYesNo:I
       5: if_icmple     16
       8: aload_0
       9: iload_1
      10: invokespecial #78                 // Method isHangulLVT:(I)Z
      13: ifeq          18
      16: iconst_1
      17: ireturn
      18: iload_1
      19: aload_0
      20: getfield      #20                 // Field limitNoNo:I
      23: if_icmplt     66
      26: aload_0
      27: iload_1
      28: invokespecial #71                 // Method isMaybeOrNonZeroCC:(I)Z
      31: ifeq          52
      34: iload_1
      35: ldc           #33                 // int 64512
      37: if_icmple     46
      40: iload_1
      41: ldc           #42                 // int 65024
      43: if_icmpne     50
      46: iconst_1
      47: goto          51
      50: iconst_0
      51: ireturn
      52: iload_1
      53: bipush        6
      55: iand
      56: iconst_2
      57: if_icmpgt     64
      60: iconst_1
      61: goto          65
      64: iconst_0
      65: ireturn
      66: iload_1
      67: iconst_1
      68: ishr
      69: istore_2
      70: aload_0
      71: getfield      #35                 // Field extraData:Ljava/lang/String;
      74: iload_2
      75: invokevirtual #79                 // Method java/lang/String.charAt:(I)C
      78: istore_3
      79: iload_3
      80: sipush        511
      83: if_icmple     88
      86: iconst_0
      87: ireturn
      88: iload_3
      89: sipush        255
      92: if_icmpgt     97
      95: iconst_1
      96: ireturn
      97: iload_3
      98: sipush        128
     101: iand
     102: ifeq          121
     105: aload_0
     106: getfield      #35                 // Field extraData:Ljava/lang/String;
     109: iload_2
     110: iconst_1
     111: isub
     112: invokevirtual #79                 // Method java/lang/String.charAt:(I)C
     115: ldc           #93                 // int 65280
     117: iand
     118: ifne          125
     121: iconst_1
     122: goto          126
     125: iconst_0
     126: ireturn

  public boolean isDecompInert(int);
    Code:
       0: aload_0
       1: aload_0
       2: iload_1
       3: invokevirtual #76                 // Method getNorm16:(I)I
       6: invokespecial #165                // Method isDecompYesAndZeroCC:(I)Z
       9: ireturn

  public boolean hasCompBoundaryBefore(int);
    Code:
       0: iload_1
       1: aload_0
       2: getfield      #12                 // Field minCompNoMaybeCP:I
       5: if_icmplt     20
       8: aload_0
       9: aload_0
      10: iload_1
      11: invokevirtual #76                 // Method getNorm16:(I)I
      14: invokespecial #144                // Method norm16HasCompBoundaryBefore:(I)Z
      17: ifeq          24
      20: iconst_1
      21: goto          25
      24: iconst_0
      25: ireturn

  public boolean hasCompBoundaryAfter(int, boolean);
    Code:
       0: aload_0
       1: aload_0
       2: iload_1
       3: invokevirtual #76                 // Method getNorm16:(I)I
       6: iload_2
       7: invokespecial #136                // Method norm16HasCompBoundaryAfter:(IZ)Z
      10: ireturn

  public boolean isCompInert(int, boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #76                 // Method getNorm16:(I)I
       5: istore_3
       6: aload_0
       7: iload_3
       8: invokespecial #135                // Method isCompYesAndZeroCC:(I)Z
      11: ifeq          51
      14: iload_3
      15: iconst_1
      16: iand
      17: ifeq          51
      20: iload_2
      21: ifeq          47
      24: iload_3
      25: invokestatic  #69                 // Method isInert:(I)Z
      28: ifne          47
      31: aload_0
      32: getfield      #35                 // Field extraData:Ljava/lang/String;
      35: iload_3
      36: iconst_1
      37: ishr
      38: invokevirtual #79                 // Method java/lang/String.charAt:(I)C
      41: sipush        511
      44: if_icmpgt     51
      47: iconst_1
      48: goto          52
      51: iconst_0
      52: ireturn

  public boolean hasFCDBoundaryBefore(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #166                // Method hasDecompBoundaryBefore:(I)Z
       5: ireturn

  public boolean hasFCDBoundaryAfter(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #167                // Method hasDecompBoundaryAfter:(I)Z
       5: ireturn

  public boolean isFCDInert(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #44                 // Method getFCD16:(I)I
       5: iconst_1
       6: if_icmpgt     13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn

  private boolean isMaybe(int);
    Code:
       0: aload_0
       1: getfield      #21                 // Field minMaybeYes:I
       4: iload_1
       5: if_icmpgt     18
       8: iload_1
       9: ldc           #42                 // int 65024
      11: if_icmpgt     18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: ireturn

  private boolean isMaybeOrNonZeroCC(int);
    Code:
       0: iload_1
       1: aload_0
       2: getfield      #21                 // Field minMaybeYes:I
       5: if_icmplt     12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: ireturn

  private static boolean isInert(int);
    Code:
       0: iload_0
       1: iconst_1
       2: if_icmpne     9
       5: iconst_1
       6: goto          10
       9: iconst_0
      10: ireturn

  private static boolean isJamoL(int);
    Code:
       0: iload_0
       1: iconst_2
       2: if_icmpne     9
       5: iconst_1
       6: goto          10
       9: iconst_0
      10: ireturn

  private static boolean isJamoVT(int);
    Code:
       0: iload_0
       1: ldc           #42                 // int 65024
       3: if_icmpne     10
       6: iconst_1
       7: goto          11
      10: iconst_0
      11: ireturn

  private int hangulLVT();
    Code:
       0: aload_0
       1: getfield      #15                 // Field minYesNoMappingsOnly:I
       4: iconst_1
       5: ior
       6: ireturn

  private boolean isHangulLV(int);
    Code:
       0: iload_1
       1: aload_0
       2: getfield      #14                 // Field minYesNo:I
       5: if_icmpne     12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: ireturn

  private boolean isHangulLVT(int);
    Code:
       0: iload_1
       1: aload_0
       2: invokespecial #168                // Method hangulLVT:()I
       5: if_icmpne     12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: ireturn

  private boolean isCompYesAndZeroCC(int);
    Code:
       0: iload_1
       1: aload_0
       2: getfield      #16                 // Field minNoNo:I
       5: if_icmpge     12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: ireturn

  private boolean isDecompYesAndZeroCC(int);
    Code:
       0: iload_1
       1: aload_0
       2: getfield      #14                 // Field minYesNo:I
       5: if_icmplt     28
       8: iload_1
       9: ldc           #42                 // int 65024
      11: if_icmpeq     28
      14: aload_0
      15: getfield      #21                 // Field minMaybeYes:I
      18: iload_1
      19: if_icmpgt     32
      22: iload_1
      23: ldc           #33                 // int 64512
      25: if_icmpgt     32
      28: iconst_1
      29: goto          33
      32: iconst_0
      33: ireturn

  private boolean isMostDecompYesAndZeroCC(int);
    Code:
       0: iload_1
       1: aload_0
       2: getfield      #14                 // Field minYesNo:I
       5: if_icmplt     20
       8: iload_1
       9: ldc           #33                 // int 64512
      11: if_icmpeq     20
      14: iload_1
      15: ldc           #42                 // int 65024
      17: if_icmpne     24
      20: iconst_1
      21: goto          25
      24: iconst_0
      25: ireturn

  private boolean isDecompNoAlgorithmic(int);
    Code:
       0: iload_1
       1: aload_0
       2: getfield      #20                 // Field limitNoNo:I
       5: if_icmplt     12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: ireturn

  private int getCCFromNoNo(int);
    Code:
       0: iload_1
       1: iconst_1
       2: ishr
       3: istore_2
       4: aload_0
       5: getfield      #35                 // Field extraData:Ljava/lang/String;
       8: iload_2
       9: invokevirtual #79                 // Method java/lang/String.charAt:(I)C
      12: sipush        128
      15: iand
      16: ifeq          34
      19: aload_0
      20: getfield      #35                 // Field extraData:Ljava/lang/String;
      23: iload_2
      24: iconst_1
      25: isub
      26: invokevirtual #79                 // Method java/lang/String.charAt:(I)C
      29: sipush        255
      32: iand
      33: ireturn
      34: iconst_0
      35: ireturn

  int getTrailCCFromCompYesAndZeroCC(int);
    Code:
       0: iload_1
       1: aload_0
       2: getfield      #14                 // Field minYesNo:I
       5: if_icmpgt     10
       8: iconst_0
       9: ireturn
      10: aload_0
      11: getfield      #35                 // Field extraData:Ljava/lang/String;
      14: iload_1
      15: iconst_1
      16: ishr
      17: invokevirtual #79                 // Method java/lang/String.charAt:(I)C
      20: bipush        8
      22: ishr
      23: ireturn

  private int mapAlgorithmic(int, int);
    Code:
       0: iload_1
       1: iload_2
       2: iconst_3
       3: ishr
       4: iadd
       5: aload_0
       6: getfield      #25                 // Field centerNoNoDelta:I
       9: isub
      10: ireturn

  private int getCompositionsListForDecompYes(int);
    Code:
       0: iload_1
       1: iconst_2
       2: if_icmplt     11
       5: ldc           #33                 // int 64512
       7: iload_1
       8: if_icmpgt     13
      11: iconst_m1
      12: ireturn
      13: iload_1
      14: aload_0
      15: getfield      #21                 // Field minMaybeYes:I
      18: isub
      19: dup
      20: istore_1
      21: ifge          29
      24: iload_1
      25: ldc           #33                 // int 64512
      27: iadd
      28: istore_1
      29: iload_1
      30: iconst_1
      31: ishr
      32: ireturn

  private int getCompositionsListForComposite(int);
    Code:
       0: ldc           #33                 // int 64512
       2: aload_0
       3: getfield      #21                 // Field minMaybeYes:I
       6: isub
       7: iload_1
       8: iadd
       9: iconst_1
      10: ishr
      11: istore_2
      12: aload_0
      13: getfield      #32                 // Field maybeYesCompositions:Ljava/lang/String;
      16: iload_2
      17: invokevirtual #79                 // Method java/lang/String.charAt:(I)C
      20: istore_3
      21: iload_2
      22: iconst_1
      23: iadd
      24: iload_3
      25: bipush        31
      27: iand
      28: iadd
      29: ireturn

  private int getCompositionsListForMaybe(int);
    Code:
       0: iload_1
       1: aload_0
       2: getfield      #21                 // Field minMaybeYes:I
       5: isub
       6: iconst_1
       7: ishr
       8: ireturn

  private int getCompositionsList(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #100                // Method isDecompYes:(I)Z
       5: ifeq          16
       8: aload_0
       9: iload_1
      10: invokespecial #169                // Method getCompositionsListForDecompYes:(I)I
      13: goto          21
      16: aload_0
      17: iload_1
      18: invokespecial #170                // Method getCompositionsListForComposite:(I)I
      21: ireturn

  private int decomposeShort(java.lang.CharSequence, int, int, boolean, boolean, com.ibm.icu.impl.Normalizer2Impl$ReorderingBuffer);
    Code:
       0: iload_2
       1: iload_3
       2: if_icmpge     91
       5: aload_1
       6: iload_2
       7: invokestatic  #131                // Method java/lang/Character.codePointAt:(Ljava/lang/CharSequence;I)I
      10: istore        7
      12: iload         4
      14: ifeq          28
      17: iload         7
      19: aload_0
      20: getfield      #12                 // Field minCompNoMaybeCP:I
      23: if_icmpge     28
      26: iload_2
      27: ireturn
      28: aload_0
      29: iload         7
      31: invokevirtual #76                 // Method getNorm16:(I)I
      34: istore        8
      36: iload         4
      38: ifeq          52
      41: aload_0
      42: iload         8
      44: invokespecial #144                // Method norm16HasCompBoundaryBefore:(I)Z
      47: ifeq          52
      50: iload_2
      51: ireturn
      52: iload_2
      53: iload         7
      55: invokestatic  #82                 // Method java/lang/Character.charCount:(I)I
      58: iadd
      59: istore_2
      60: aload_0
      61: iload         7
      63: iload         8
      65: aload         6
      67: invokespecial #130                // Method decompose:(IILcom/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer;)V
      70: iload         4
      72: ifeq          88
      75: aload_0
      76: iload         8
      78: iload         5
      80: invokespecial #136                // Method norm16HasCompBoundaryAfter:(IZ)Z
      83: ifeq          88
      86: iload_2
      87: ireturn
      88: goto          0
      91: iload_2
      92: ireturn

  private void decompose(int, int, com.ibm.icu.impl.Normalizer2Impl$ReorderingBuffer);
    Code:
       0: iload_2
       1: aload_0
       2: getfield      #20                 // Field limitNoNo:I
       5: if_icmplt     39
       8: aload_0
       9: iload_2
      10: invokespecial #71                 // Method isMaybeOrNonZeroCC:(I)Z
      13: ifeq          26
      16: aload_3
      17: iload_1
      18: iload_2
      19: invokestatic  #89                 // Method getCCFromYesOrMaybe:(I)I
      22: invokevirtual #138                // Method com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer.append:(II)V
      25: return
      26: aload_0
      27: iload_1
      28: iload_2
      29: invokespecial #75                 // Method mapAlgorithmic:(II)I
      32: istore_1
      33: aload_0
      34: iload_1
      35: invokevirtual #76                 // Method getNorm16:(I)I
      38: istore_2
      39: iload_2
      40: aload_0
      41: getfield      #14                 // Field minYesNo:I
      44: if_icmpge     56
      47: aload_3
      48: iload_1
      49: iconst_0
      50: invokevirtual #138                // Method com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer.append:(II)V
      53: goto          164
      56: aload_0
      57: iload_2
      58: invokespecial #77                 // Method isHangulLV:(I)Z
      61: ifne          72
      64: aload_0
      65: iload_2
      66: invokespecial #78                 // Method isHangulLVT:(I)Z
      69: ifeq          81
      72: iload_1
      73: aload_3
      74: invokestatic  #97                 // Method com/ibm/icu/impl/Normalizer2Impl$Hangul.decompose:(ILjava/lang/Appendable;)I
      77: pop
      78: goto          164
      81: iload_2
      82: iconst_1
      83: ishr
      84: istore        4
      86: aload_0
      87: getfield      #35                 // Field extraData:Ljava/lang/String;
      90: iload         4
      92: invokevirtual #79                 // Method java/lang/String.charAt:(I)C
      95: istore        5
      97: iload         5
      99: bipush        31
     101: iand
     102: istore        6
     104: iload         5
     106: bipush        8
     108: ishr
     109: istore        8
     111: iload         5
     113: sipush        128
     116: iand
     117: ifeq          139
     120: aload_0
     121: getfield      #35                 // Field extraData:Ljava/lang/String;
     124: iload         4
     126: iconst_1
     127: isub
     128: invokevirtual #79                 // Method java/lang/String.charAt:(I)C
     131: bipush        8
     133: ishr
     134: istore        7
     136: goto          142
     139: iconst_0
     140: istore        7
     142: iinc          4, 1
     145: aload_3
     146: aload_0
     147: getfield      #35                 // Field extraData:Ljava/lang/String;
     150: iload         4
     152: iload         4
     154: iload         6
     156: iadd
     157: iload         7
     159: iload         8
     161: invokevirtual #133                // Method com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer.append:(Ljava/lang/CharSequence;IIII)V
     164: return

  private static int combine(java.lang.String, int, int);
    Code:
       0: iload_2
       1: sipush        13312
       4: if_icmpge     79
       7: iload_2
       8: iconst_1
       9: ishl
      10: istore_3
      11: iload_3
      12: aload_0
      13: iload_1
      14: invokevirtual #79                 // Method java/lang/String.charAt:(I)C
      17: dup
      18: istore        4
      20: if_icmple     35
      23: iload_1
      24: iconst_2
      25: iload         4
      27: iconst_1
      28: iand
      29: iadd
      30: iadd
      31: istore_1
      32: goto          11
      35: iload_3
      36: iload         4
      38: sipush        32766
      41: iand
      42: if_icmpne     193
      45: iload         4
      47: iconst_1
      48: iand
      49: ifeq          71
      52: aload_0
      53: iload_1
      54: iconst_1
      55: iadd
      56: invokevirtual #79                 // Method java/lang/String.charAt:(I)C
      59: bipush        16
      61: ishl
      62: aload_0
      63: iload_1
      64: iconst_2
      65: iadd
      66: invokevirtual #79                 // Method java/lang/String.charAt:(I)C
      69: ior
      70: ireturn
      71: aload_0
      72: iload_1
      73: iconst_1
      74: iadd
      75: invokevirtual #79                 // Method java/lang/String.charAt:(I)C
      78: ireturn
      79: sipush        13312
      82: iload_2
      83: bipush        9
      85: ishr
      86: bipush        -2
      88: iand
      89: iadd
      90: istore_3
      91: iload_2
      92: bipush        6
      94: ishl
      95: ldc           #90                 // int 65535
      97: iand
      98: istore        5
     100: iload_3
     101: aload_0
     102: iload_1
     103: invokevirtual #79                 // Method java/lang/String.charAt:(I)C
     106: dup
     107: istore        4
     109: if_icmple     124
     112: iload_1
     113: iconst_2
     114: iload         4
     116: iconst_1
     117: iand
     118: iadd
     119: iadd
     120: istore_1
     121: goto          100
     124: iload_3
     125: iload         4
     127: sipush        32766
     130: iand
     131: if_icmpne     193
     134: iload         5
     136: aload_0
     137: iload_1
     138: iconst_1
     139: iadd
     140: invokevirtual #79                 // Method java/lang/String.charAt:(I)C
     143: dup
     144: istore        6
     146: if_icmple     166
     149: iload         4
     151: ldc           #171                // int 32768
     153: iand
     154: ifeq          160
     157: goto          193
     160: iinc          1, 3
     163: goto          100
     166: iload         5
     168: iload         6
     170: ldc           #172                // int 65472
     172: iand
     173: if_icmpne     193
     176: iload         6
     178: ldc           #173                // int -65473
     180: iand
     181: bipush        16
     183: ishl
     184: aload_0
     185: iload_1
     186: iconst_2
     187: iadd
     188: invokevirtual #79                 // Method java/lang/String.charAt:(I)C
     191: ior
     192: ireturn
     193: iconst_m1
     194: ireturn

  private void addComposites(int, com.ibm.icu.text.UnicodeSet);
    Code:
       0: aload_0
       1: getfield      #32                 // Field maybeYesCompositions:Ljava/lang/String;
       4: iload_1
       5: invokevirtual #79                 // Method java/lang/String.charAt:(I)C
       8: istore_3
       9: iload_3
      10: iconst_1
      11: iand
      12: ifne          33
      15: aload_0
      16: getfield      #32                 // Field maybeYesCompositions:Ljava/lang/String;
      19: iload_1
      20: iconst_1
      21: iadd
      22: invokevirtual #79                 // Method java/lang/String.charAt:(I)C
      25: istore        4
      27: iinc          1, 2
      30: goto          65
      33: aload_0
      34: getfield      #32                 // Field maybeYesCompositions:Ljava/lang/String;
      37: iload_1
      38: iconst_1
      39: iadd
      40: invokevirtual #79                 // Method java/lang/String.charAt:(I)C
      43: ldc           #173                // int -65473
      45: iand
      46: bipush        16
      48: ishl
      49: aload_0
      50: getfield      #32                 // Field maybeYesCompositions:Ljava/lang/String;
      53: iload_1
      54: iconst_2
      55: iadd
      56: invokevirtual #79                 // Method java/lang/String.charAt:(I)C
      59: ior
      60: istore        4
      62: iinc          1, 3
      65: iload         4
      67: iconst_1
      68: ishr
      69: istore        5
      71: iload         4
      73: iconst_1
      74: iand
      75: ifeq          93
      78: aload_0
      79: aload_0
      80: aload_0
      81: iload         5
      83: invokevirtual #76                 // Method getNorm16:(I)I
      86: invokespecial #170                // Method getCompositionsListForComposite:(I)I
      89: aload_2
      90: invokespecial #114                // Method addComposites:(ILcom/ibm/icu/text/UnicodeSet;)V
      93: aload_2
      94: iload         5
      96: invokevirtual #45                 // Method com/ibm/icu/text/UnicodeSet.add:(I)Lcom/ibm/icu/text/UnicodeSet;
      99: pop
     100: iload_3
     101: ldc           #171                // int 32768
     103: iand
     104: ifeq          0
     107: return

  private void recompose(com.ibm.icu.impl.Normalizer2Impl$ReorderingBuffer, int, boolean);
    Code:
       0: aload_1
       1: invokevirtual #154                // Method com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer.getStringBuilder:()Ljava/lang/StringBuilder;
       4: astore        4
       6: iload_2
       7: istore        5
       9: iload         5
      11: aload         4
      13: invokevirtual #157                // Method java/lang/StringBuilder.length:()I
      16: if_icmpne     20
      19: return
      20: iconst_m1
      21: istore        8
      23: iconst_m1
      24: istore        6
      26: iconst_0
      27: istore        14
      29: iconst_0
      30: istore        13
      32: aload         4
      34: iload         5
      36: invokevirtual #174                // Method java/lang/StringBuilder.codePointAt:(I)I
      39: istore        9
      41: iload         5
      43: iload         9
      45: invokestatic  #82                 // Method java/lang/Character.charCount:(I)I
      48: iadd
      49: istore        5
      51: aload_0
      52: iload         9
      54: invokevirtual #76                 // Method getNorm16:(I)I
      57: istore        11
      59: iload         11
      61: invokestatic  #89                 // Method getCCFromYesOrMaybe:(I)I
      64: istore        12
      66: aload_0
      67: iload         11
      69: invokespecial #175                // Method isMaybe:(I)Z
      72: ifeq          450
      75: iload         8
      77: iflt          450
      80: iload         13
      82: iload         12
      84: if_icmplt     92
      87: iload         13
      89: ifne          450
      92: iload         11
      94: invokestatic  #140                // Method isJamoVT:(I)Z
      97: ifeq          239
     100: iload         9
     102: sipush        4519
     105: if_icmpge     220
     108: aload         4
     110: iload         6
     112: invokevirtual #176                // Method java/lang/StringBuilder.charAt:(I)C
     115: sipush        4352
     118: isub
     119: i2c
     120: istore        15
     122: iload         15
     124: bipush        19
     126: if_icmpge     220
     129: iload         5
     131: iconst_1
     132: isub
     133: istore        7
     135: ldc           #58                 // int 44032
     137: iload         15
     139: bipush        21
     141: imul
     142: iload         9
     144: sipush        4449
     147: isub
     148: iadd
     149: bipush        28
     151: imul
     152: iadd
     153: i2c
     154: istore        16
     156: iload         5
     158: aload         4
     160: invokevirtual #157                // Method java/lang/StringBuilder.length:()I
     163: if_icmpeq     197
     166: aload         4
     168: iload         5
     170: invokevirtual #176                // Method java/lang/StringBuilder.charAt:(I)C
     173: sipush        4519
     176: isub
     177: i2c
     178: dup
     179: istore        17
     181: bipush        28
     183: if_icmpge     197
     186: iinc          5, 1
     189: iload         16
     191: iload         17
     193: iadd
     194: i2c
     195: istore        16
     197: aload         4
     199: iload         6
     201: iload         16
     203: invokevirtual #177                // Method java/lang/StringBuilder.setCharAt:(IC)V
     206: aload         4
     208: iload         7
     210: iload         5
     212: invokevirtual #178                // Method java/lang/StringBuilder.delete:(II)Ljava/lang/StringBuilder;
     215: pop
     216: iload         7
     218: istore        5
     220: iload         5
     222: aload         4
     224: invokevirtual #157                // Method java/lang/StringBuilder.length:()I
     227: if_icmpne     233
     230: goto          525
     233: iconst_m1
     234: istore        8
     236: goto          32
     239: aload_0
     240: getfield      #32                 // Field maybeYesCompositions:Ljava/lang/String;
     243: iload         8
     245: iload         9
     247: invokestatic  #179                // Method combine:(Ljava/lang/String;II)I
     250: dup
     251: istore        10
     253: iflt          450
     256: iload         10
     258: iconst_1
     259: ishr
     260: istore        15
     262: iload         5
     264: iload         9
     266: invokestatic  #82                 // Method java/lang/Character.charCount:(I)I
     269: isub
     270: istore        7
     272: aload         4
     274: iload         7
     276: iload         5
     278: invokevirtual #178                // Method java/lang/StringBuilder.delete:(II)Ljava/lang/StringBuilder;
     281: pop
     282: iload         7
     284: istore        5
     286: iload         14
     288: ifeq          356
     291: iload         15
     293: ldc           #90                 // int 65535
     295: if_icmple     327
     298: aload         4
     300: iload         6
     302: iload         15
     304: invokestatic  #180                // Method com/ibm/icu/text/UTF16.getLeadSurrogate:(I)C
     307: invokevirtual #177                // Method java/lang/StringBuilder.setCharAt:(IC)V
     310: aload         4
     312: iload         6
     314: iconst_1
     315: iadd
     316: iload         15
     318: invokestatic  #181                // Method com/ibm/icu/text/UTF16.getTrailSurrogate:(I)C
     321: invokevirtual #177                // Method java/lang/StringBuilder.setCharAt:(IC)V
     324: goto          409
     327: aload         4
     329: iload         6
     331: iload         9
     333: i2c
     334: invokevirtual #177                // Method java/lang/StringBuilder.setCharAt:(IC)V
     337: aload         4
     339: iload         6
     341: iconst_1
     342: iadd
     343: invokevirtual #182                // Method java/lang/StringBuilder.deleteCharAt:(I)Ljava/lang/StringBuilder;
     346: pop
     347: iconst_0
     348: istore        14
     350: iinc          5, -1
     353: goto          409
     356: iload         15
     358: ldc           #90                 // int 65535
     360: if_icmple     399
     363: iconst_1
     364: istore        14
     366: aload         4
     368: iload         6
     370: iload         15
     372: invokestatic  #180                // Method com/ibm/icu/text/UTF16.getLeadSurrogate:(I)C
     375: invokevirtual #177                // Method java/lang/StringBuilder.setCharAt:(IC)V
     378: aload         4
     380: iload         6
     382: iconst_1
     383: iadd
     384: iload         15
     386: invokestatic  #181                // Method com/ibm/icu/text/UTF16.getTrailSurrogate:(I)C
     389: invokevirtual #183                // Method java/lang/StringBuilder.insert:(IC)Ljava/lang/StringBuilder;
     392: pop
     393: iinc          5, 1
     396: goto          409
     399: aload         4
     401: iload         6
     403: iload         15
     405: i2c
     406: invokevirtual #177                // Method java/lang/StringBuilder.setCharAt:(IC)V
     409: iload         5
     411: aload         4
     413: invokevirtual #157                // Method java/lang/StringBuilder.length:()I
     416: if_icmpne     422
     419: goto          525
     422: iload         10
     424: iconst_1
     425: iand
     426: ifeq          444
     429: aload_0
     430: aload_0
     431: iload         15
     433: invokevirtual #76                 // Method getNorm16:(I)I
     436: invokespecial #170                // Method getCompositionsListForComposite:(I)I
     439: istore        8
     441: goto          32
     444: iconst_m1
     445: istore        8
     447: goto          32
     450: iload         12
     452: istore        13
     454: iload         5
     456: aload         4
     458: invokevirtual #157                // Method java/lang/StringBuilder.length:()I
     461: if_icmpne     467
     464: goto          525
     467: iload         12
     469: ifne          515
     472: aload_0
     473: iload         11
     475: invokespecial #169                // Method getCompositionsListForDecompYes:(I)I
     478: dup
     479: istore        8
     481: iflt          32
     484: iload         9
     486: ldc           #90                 // int 65535
     488: if_icmpgt     503
     491: iconst_0
     492: istore        14
     494: iload         5
     496: iconst_1
     497: isub
     498: istore        6
     500: goto          32
     503: iconst_1
     504: istore        14
     506: iload         5
     508: iconst_2
     509: isub
     510: istore        6
     512: goto          32
     515: iload_3
     516: ifeq          32
     519: iconst_m1
     520: istore        8
     522: goto          32
     525: aload_1
     526: invokevirtual #184                // Method com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer.flush:()V
     529: return

  public int composePair(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #76                 // Method getNorm16:(I)I
       5: istore_3
       6: iload_3
       7: invokestatic  #69                 // Method isInert:(I)Z
      10: ifeq          15
      13: iconst_m1
      14: ireturn
      15: iload_3
      16: aload_0
      17: getfield      #15                 // Field minYesNoMappingsOnly:I
      20: if_icmpge     140
      23: iload_3
      24: invokestatic  #185                // Method isJamoL:(I)Z
      27: ifeq          66
      30: iinc_w        2, -4449
      36: iconst_0
      37: iload_2
      38: if_icmpgt     64
      41: iload_2
      42: bipush        21
      44: if_icmpge     64
      47: ldc           #58                 // int 44032
      49: iload_1
      50: sipush        4352
      53: isub
      54: bipush        21
      56: imul
      57: iload_2
      58: iadd
      59: bipush        28
      61: imul
      62: iadd
      63: ireturn
      64: iconst_m1
      65: ireturn
      66: aload_0
      67: iload_3
      68: invokespecial #77                 // Method isHangulLV:(I)Z
      71: ifeq          97
      74: iinc_w        2, -4519
      80: iconst_0
      81: iload_2
      82: if_icmpge     95
      85: iload_2
      86: bipush        28
      88: if_icmpge     95
      91: iload_1
      92: iload_2
      93: iadd
      94: ireturn
      95: iconst_m1
      96: ireturn
      97: ldc           #33                 // int 64512
      99: aload_0
     100: getfield      #21                 // Field minMaybeYes:I
     103: isub
     104: iload_3
     105: iadd
     106: iconst_1
     107: ishr
     108: istore        4
     110: iload_3
     111: aload_0
     112: getfield      #14                 // Field minYesNo:I
     115: if_icmple     163
     118: iload         4
     120: iconst_1
     121: aload_0
     122: getfield      #32                 // Field maybeYesCompositions:Ljava/lang/String;
     125: iload         4
     127: invokevirtual #79                 // Method java/lang/String.charAt:(I)C
     130: bipush        31
     132: iand
     133: iadd
     134: iadd
     135: istore        4
     137: goto          163
     140: iload_3
     141: aload_0
     142: getfield      #21                 // Field minMaybeYes:I
     145: if_icmplt     154
     148: ldc           #33                 // int 64512
     150: iload_3
     151: if_icmpgt     156
     154: iconst_m1
     155: ireturn
     156: aload_0
     157: iload_3
     158: invokespecial #186                // Method getCompositionsListForMaybe:(I)I
     161: istore        4
     163: iload_2
     164: iflt          173
     167: ldc           #187                // int 1114111
     169: iload_2
     170: if_icmpge     175
     173: iconst_m1
     174: ireturn
     175: aload_0
     176: getfield      #32                 // Field maybeYesCompositions:Ljava/lang/String;
     179: iload         4
     181: iload_2
     182: invokestatic  #179                // Method combine:(Ljava/lang/String;II)I
     185: iconst_1
     186: ishr
     187: ireturn

  private boolean hasCompBoundaryBefore(int, int);
    Code:
       0: iload_1
       1: aload_0
       2: getfield      #12                 // Field minCompNoMaybeCP:I
       5: if_icmplt     16
       8: aload_0
       9: iload_2
      10: invokespecial #144                // Method norm16HasCompBoundaryBefore:(I)Z
      13: ifeq          20
      16: iconst_1
      17: goto          21
      20: iconst_0
      21: ireturn

  private boolean norm16HasCompBoundaryBefore(int);
    Code:
       0: iload_1
       1: aload_0
       2: getfield      #18                 // Field minNoNoCompNoMaybeCC:I
       5: if_icmplt     16
       8: aload_0
       9: iload_1
      10: invokevirtual #46                 // Method isAlgorithmicNoNo:(I)Z
      13: ifeq          20
      16: iconst_1
      17: goto          21
      20: iconst_0
      21: ireturn

  private boolean hasCompBoundaryBefore(java.lang.CharSequence, int, int);
    Code:
       0: iload_2
       1: iload_3
       2: if_icmpeq     17
       5: aload_0
       6: aload_1
       7: iload_2
       8: invokestatic  #131                // Method java/lang/Character.codePointAt:(Ljava/lang/CharSequence;I)I
      11: invokevirtual #188                // Method hasCompBoundaryBefore:(I)Z
      14: ifeq          21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: ireturn

  private boolean norm16HasCompBoundaryAfter(int, boolean);
    Code:
       0: iload_1
       1: iconst_1
       2: iand
       3: ifeq          22
       6: iload_2
       7: ifeq          18
      10: aload_0
      11: iload_1
      12: invokespecial #189                // Method isTrailCC01ForCompBoundaryAfter:(I)Z
      15: ifeq          22
      18: iconst_1
      19: goto          23
      22: iconst_0
      23: ireturn

  private boolean hasCompBoundaryAfter(java.lang.CharSequence, int, int, boolean);
    Code:
       0: iload_2
       1: iload_3
       2: if_icmpeq     19
       5: aload_0
       6: aload_1
       7: iload_3
       8: invokestatic  #145                // Method java/lang/Character.codePointBefore:(Ljava/lang/CharSequence;I)I
      11: iload         4
      13: invokevirtual #190                // Method hasCompBoundaryAfter:(IZ)Z
      16: ifeq          23
      19: iconst_1
      20: goto          24
      23: iconst_0
      24: ireturn

  private boolean isTrailCC01ForCompBoundaryAfter(int);
    Code:
       0: iload_1
       1: invokestatic  #69                 // Method isInert:(I)Z
       4: ifne          42
       7: aload_0
       8: iload_1
       9: invokespecial #74                 // Method isDecompNoAlgorithmic:(I)Z
      12: ifeq          26
      15: iload_1
      16: bipush        6
      18: iand
      19: iconst_2
      20: if_icmpgt     46
      23: goto          42
      26: aload_0
      27: getfield      #35                 // Field extraData:Ljava/lang/String;
      30: iload_1
      31: iconst_1
      32: ishr
      33: invokevirtual #79                 // Method java/lang/String.charAt:(I)C
      36: sipush        511
      39: if_icmpgt     46
      42: iconst_1
      43: goto          47
      46: iconst_0
      47: ireturn

  private int findPreviousCompBoundary(java.lang.CharSequence, int, boolean);
    Code:
       0: iload_2
       1: ifle          57
       4: aload_1
       5: iload_2
       6: invokestatic  #145                // Method java/lang/Character.codePointBefore:(Ljava/lang/CharSequence;I)I
       9: istore        4
      11: aload_0
      12: iload         4
      14: invokevirtual #76                 // Method getNorm16:(I)I
      17: istore        5
      19: aload_0
      20: iload         5
      22: iload_3
      23: invokespecial #136                // Method norm16HasCompBoundaryAfter:(IZ)Z
      26: ifeq          32
      29: goto          57
      32: iload_2
      33: iload         4
      35: invokestatic  #82                 // Method java/lang/Character.charCount:(I)I
      38: isub
      39: istore_2
      40: aload_0
      41: iload         4
      43: iload         5
      45: invokespecial #191                // Method hasCompBoundaryBefore:(II)Z
      48: ifeq          54
      51: goto          57
      54: goto          0
      57: iload_2
      58: ireturn

  private int findNextCompBoundary(java.lang.CharSequence, int, int, boolean);
    Code:
       0: iload_2
       1: iload_3
       2: if_icmpge     62
       5: aload_1
       6: iload_2
       7: invokestatic  #131                // Method java/lang/Character.codePointAt:(Ljava/lang/CharSequence;I)I
      10: istore        5
      12: aload_0
      13: getfield      #27                 // Field normTrie:Lcom/ibm/icu/impl/Trie2_16;
      16: iload         5
      18: invokevirtual #85                 // Method com/ibm/icu/impl/Trie2_16.get:(I)I
      21: istore        6
      23: aload_0
      24: iload         5
      26: iload         6
      28: invokespecial #191                // Method hasCompBoundaryBefore:(II)Z
      31: ifeq          37
      34: goto          62
      37: iload_2
      38: iload         5
      40: invokestatic  #82                 // Method java/lang/Character.charCount:(I)I
      43: iadd
      44: istore_2
      45: aload_0
      46: iload         6
      48: iload         4
      50: invokespecial #136                // Method norm16HasCompBoundaryAfter:(IZ)Z
      53: ifeq          59
      56: goto          62
      59: goto          0
      62: iload_2
      63: ireturn

  private int findPreviousFCDBoundary(java.lang.CharSequence, int);
    Code:
       0: iload_2
       1: ifle          58
       4: aload_1
       5: iload_2
       6: invokestatic  #145                // Method java/lang/Character.codePointBefore:(Ljava/lang/CharSequence;I)I
       9: istore_3
      10: iload_3
      11: aload_0
      12: getfield      #11                 // Field minDecompNoCP:I
      15: if_icmplt     58
      18: aload_0
      19: aload_0
      20: iload_3
      21: invokevirtual #76                 // Method getNorm16:(I)I
      24: dup
      25: istore        4
      27: invokevirtual #164                // Method norm16HasDecompBoundaryAfter:(I)Z
      30: ifeq          36
      33: goto          58
      36: iload_2
      37: iload_3
      38: invokestatic  #82                 // Method java/lang/Character.charCount:(I)I
      41: isub
      42: istore_2
      43: aload_0
      44: iload         4
      46: invokevirtual #163                // Method norm16HasDecompBoundaryBefore:(I)Z
      49: ifeq          55
      52: goto          58
      55: goto          0
      58: iload_2
      59: ireturn

  private int findNextFCDBoundary(java.lang.CharSequence, int, int);
    Code:
       0: iload_2
       1: iload_3
       2: if_icmpge     63
       5: aload_1
       6: iload_2
       7: invokestatic  #131                // Method java/lang/Character.codePointAt:(Ljava/lang/CharSequence;I)I
      10: istore        4
      12: iload         4
      14: aload_0
      15: getfield      #13                 // Field minLcccCP:I
      18: if_icmplt     63
      21: aload_0
      22: aload_0
      23: iload         4
      25: invokevirtual #76                 // Method getNorm16:(I)I
      28: dup
      29: istore        5
      31: invokevirtual #163                // Method norm16HasDecompBoundaryBefore:(I)Z
      34: ifeq          40
      37: goto          63
      40: iload_2
      41: iload         4
      43: invokestatic  #82                 // Method java/lang/Character.charCount:(I)I
      46: iadd
      47: istore_2
      48: aload_0
      49: iload         5
      51: invokevirtual #164                // Method norm16HasDecompBoundaryAfter:(I)Z
      54: ifeq          60
      57: goto          63
      60: goto          0
      63: iload_2
      64: ireturn

  private int getPreviousTrailCC(java.lang.CharSequence, int, int);
    Code:
       0: iload_2
       1: iload_3
       2: if_icmpne     7
       5: iconst_0
       6: ireturn
       7: aload_0
       8: aload_1
       9: iload_3
      10: invokestatic  #145                // Method java/lang/Character.codePointBefore:(Ljava/lang/CharSequence;I)I
      13: invokevirtual #44                 // Method getFCD16:(I)I
      16: ireturn

  private void addToStartSet(com.ibm.icu.impl.Trie2Writable, int, int);
    Code:
       0: aload_1
       1: iload_3
       2: invokevirtual #70                 // Method com/ibm/icu/impl/Trie2Writable.get:(I)I
       5: istore        4
       7: iload         4
       9: ldc           #192                // int 4194303
      11: iand
      12: ifne          32
      15: iload_2
      16: ifeq          32
      19: aload_1
      20: iload_3
      21: iload         4
      23: iload_2
      24: ior
      25: invokevirtual #83                 // Method com/ibm/icu/impl/Trie2Writable.set:(II)Lcom/ibm/icu/impl/Trie2Writable;
      28: pop
      29: goto          131
      32: iload         4
      34: ldc           #109                // int 2097152
      36: iand
      37: ifne          107
      40: iload         4
      42: ldc           #108                // int 2097151
      44: iand
      45: istore        6
      47: iload         4
      49: ldc           #193                // int -2097152
      51: iand
      52: ldc           #109                // int 2097152
      54: ior
      55: aload_0
      56: getfield      #68                 // Field canonStartSets:Ljava/util/ArrayList;
      59: invokevirtual #194                // Method java/util/ArrayList.size:()I
      62: ior
      63: istore        4
      65: aload_1
      66: iload_3
      67: iload         4
      69: invokevirtual #83                 // Method com/ibm/icu/impl/Trie2Writable.set:(II)Lcom/ibm/icu/impl/Trie2Writable;
      72: pop
      73: aload_0
      74: getfield      #68                 // Field canonStartSets:Ljava/util/ArrayList;
      77: new           #111                // class com/ibm/icu/text/UnicodeSet
      80: dup
      81: invokespecial #195                // Method com/ibm/icu/text/UnicodeSet."<init>":()V
      84: dup
      85: astore        5
      87: invokevirtual #196                // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
      90: pop
      91: iload         6
      93: ifeq          104
      96: aload         5
      98: iload         6
     100: invokevirtual #45                 // Method com/ibm/icu/text/UnicodeSet.add:(I)Lcom/ibm/icu/text/UnicodeSet;
     103: pop
     104: goto          124
     107: aload_0
     108: getfield      #68                 // Field canonStartSets:Ljava/util/ArrayList;
     111: iload         4
     113: ldc           #108                // int 2097151
     115: iand
     116: invokevirtual #110                // Method java/util/ArrayList.get:(I)Ljava/lang/Object;
     119: checkcast     #111                // class com/ibm/icu/text/UnicodeSet
     122: astore        5
     124: aload         5
     126: iload_2
     127: invokevirtual #45                 // Method com/ibm/icu/text/UnicodeSet.add:(I)Lcom/ibm/icu/text/UnicodeSet;
     130: pop
     131: return

  static {};
    Code:
       0: ldc           #2                  // class com/ibm/icu/impl/Normalizer2Impl
       2: invokevirtual #197                // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #22                 // Field $assertionsDisabled:Z
      16: new           #198                // class com/ibm/icu/impl/Normalizer2Impl$IsAcceptable
      19: dup
      20: aconst_null
      21: invokespecial #199                // Method com/ibm/icu/impl/Normalizer2Impl$IsAcceptable."<init>":(Lcom/ibm/icu/impl/Normalizer2Impl$1;)V
      24: putstatic     #4                  // Field IS_ACCEPTABLE:Lcom/ibm/icu/impl/Normalizer2Impl$IsAcceptable;
      27: new           #200                // class com/ibm/icu/impl/Normalizer2Impl$1
      30: dup
      31: invokespecial #201                // Method com/ibm/icu/impl/Normalizer2Impl$1."<init>":()V
      34: putstatic     #62                 // Field segmentStarterMapper:Lcom/ibm/icu/impl/Trie2$ValueMapper;
      37: return
}
