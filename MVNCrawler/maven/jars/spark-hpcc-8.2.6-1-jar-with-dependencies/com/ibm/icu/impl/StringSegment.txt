Compiled from "StringSegment.java"
public class com.ibm.icu.impl.StringSegment implements java.lang.CharSequence {
  private final java.lang.String str;

  private int start;

  private int end;

  private boolean foldCase;

  static final boolean $assertionsDisabled;

  public com.ibm.icu.impl.StringSegment(java.lang.String, boolean);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field str:Ljava/lang/String;
       9: aload_0
      10: iconst_0
      11: putfield      #3                  // Field start:I
      14: aload_0
      15: aload_1
      16: invokevirtual #4                  // Method java/lang/String.length:()I
      19: putfield      #5                  // Field end:I
      22: aload_0
      23: iload_2
      24: putfield      #6                  // Field foldCase:Z
      27: return

  public int getOffset();
    Code:
       0: aload_0
       1: getfield      #3                  // Field start:I
       4: ireturn

  public void setOffset(int);
    Code:
       0: getstatic     #7                  // Field $assertionsDisabled:Z
       3: ifne          22
       6: iload_1
       7: aload_0
       8: getfield      #5                  // Field end:I
      11: if_icmple     22
      14: new           #8                  // class java/lang/AssertionError
      17: dup
      18: invokespecial #9                  // Method java/lang/AssertionError."<init>":()V
      21: athrow
      22: aload_0
      23: iload_1
      24: putfield      #3                  // Field start:I
      27: return

  public void adjustOffset(int);
    Code:
       0: getstatic     #7                  // Field $assertionsDisabled:Z
       3: ifne          23
       6: aload_0
       7: getfield      #3                  // Field start:I
      10: iload_1
      11: iadd
      12: ifge          23
      15: new           #8                  // class java/lang/AssertionError
      18: dup
      19: invokespecial #9                  // Method java/lang/AssertionError."<init>":()V
      22: athrow
      23: getstatic     #7                  // Field $assertionsDisabled:Z
      26: ifne          50
      29: aload_0
      30: getfield      #3                  // Field start:I
      33: iload_1
      34: iadd
      35: aload_0
      36: getfield      #5                  // Field end:I
      39: if_icmple     50
      42: new           #8                  // class java/lang/AssertionError
      45: dup
      46: invokespecial #9                  // Method java/lang/AssertionError."<init>":()V
      49: athrow
      50: aload_0
      51: dup
      52: getfield      #3                  // Field start:I
      55: iload_1
      56: iadd
      57: putfield      #3                  // Field start:I
      60: return

  public void adjustOffsetByCodePoint();
    Code:
       0: aload_0
       1: dup
       2: getfield      #3                  // Field start:I
       5: aload_0
       6: invokevirtual #10                 // Method getCodePoint:()I
       9: invokestatic  #11                 // Method java/lang/Character.charCount:(I)I
      12: iadd
      13: putfield      #3                  // Field start:I
      16: return

  public void setLength(int);
    Code:
       0: getstatic     #7                  // Field $assertionsDisabled:Z
       3: ifne          18
       6: iload_1
       7: ifge          18
      10: new           #8                  // class java/lang/AssertionError
      13: dup
      14: invokespecial #9                  // Method java/lang/AssertionError."<init>":()V
      17: athrow
      18: getstatic     #7                  // Field $assertionsDisabled:Z
      21: ifne          48
      24: aload_0
      25: getfield      #3                  // Field start:I
      28: iload_1
      29: iadd
      30: aload_0
      31: getfield      #2                  // Field str:Ljava/lang/String;
      34: invokevirtual #4                  // Method java/lang/String.length:()I
      37: if_icmple     48
      40: new           #8                  // class java/lang/AssertionError
      43: dup
      44: invokespecial #9                  // Method java/lang/AssertionError."<init>":()V
      47: athrow
      48: aload_0
      49: aload_0
      50: getfield      #3                  // Field start:I
      53: iload_1
      54: iadd
      55: putfield      #5                  // Field end:I
      58: return

  public void resetLength();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #2                  // Field str:Ljava/lang/String;
       5: invokevirtual #4                  // Method java/lang/String.length:()I
       8: putfield      #5                  // Field end:I
      11: return

  public int length();
    Code:
       0: aload_0
       1: getfield      #5                  // Field end:I
       4: aload_0
       5: getfield      #3                  // Field start:I
       8: isub
       9: ireturn

  public char charAt(int);
    Code:
       0: aload_0
       1: getfield      #2                  // Field str:Ljava/lang/String;
       4: iload_1
       5: aload_0
       6: getfield      #3                  // Field start:I
       9: iadd
      10: invokevirtual #12                 // Method java/lang/String.charAt:(I)C
      13: ireturn

  public java.lang.CharSequence subSequence(int, int);
    Code:
       0: new           #8                  // class java/lang/AssertionError
       3: dup
       4: invokespecial #9                  // Method java/lang/AssertionError."<init>":()V
       7: athrow

  public int getCodePoint();
    Code:
       0: getstatic     #7                  // Field $assertionsDisabled:Z
       3: ifne          25
       6: aload_0
       7: getfield      #3                  // Field start:I
      10: aload_0
      11: getfield      #5                  // Field end:I
      14: if_icmplt     25
      17: new           #8                  // class java/lang/AssertionError
      20: dup
      21: invokespecial #9                  // Method java/lang/AssertionError."<init>":()V
      24: athrow
      25: aload_0
      26: getfield      #2                  // Field str:Ljava/lang/String;
      29: aload_0
      30: getfield      #3                  // Field start:I
      33: invokevirtual #12                 // Method java/lang/String.charAt:(I)C
      36: istore_1
      37: iload_1
      38: invokestatic  #13                 // Method java/lang/Character.isHighSurrogate:(C)Z
      41: ifeq          84
      44: aload_0
      45: getfield      #3                  // Field start:I
      48: iconst_1
      49: iadd
      50: aload_0
      51: getfield      #5                  // Field end:I
      54: if_icmpge     84
      57: aload_0
      58: getfield      #2                  // Field str:Ljava/lang/String;
      61: aload_0
      62: getfield      #3                  // Field start:I
      65: iconst_1
      66: iadd
      67: invokevirtual #12                 // Method java/lang/String.charAt:(I)C
      70: dup
      71: istore_2
      72: invokestatic  #14                 // Method java/lang/Character.isLowSurrogate:(C)Z
      75: ifeq          84
      78: iload_1
      79: iload_2
      80: invokestatic  #15                 // Method java/lang/Character.toCodePoint:(CC)I
      83: ireturn
      84: iload_1
      85: ireturn

  public boolean startsWith(int);
    Code:
       0: aload_0
       1: invokevirtual #10                 // Method getCodePoint:()I
       4: iload_1
       5: aload_0
       6: getfield      #6                  // Field foldCase:Z
       9: invokestatic  #16                 // Method codePointsEqual:(IIZ)Z
      12: ireturn

  public boolean startsWith(com.ibm.icu.text.UnicodeSet);
    Code:
       0: aload_0
       1: invokevirtual #10                 // Method getCodePoint:()I
       4: istore_2
       5: iload_2
       6: iconst_m1
       7: if_icmpne     12
      10: iconst_0
      11: ireturn
      12: aload_1
      13: iload_2
      14: invokevirtual #17                 // Method com/ibm/icu/text/UnicodeSet.contains:(I)Z
      17: ireturn

  public int getCommonPrefixLength(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: aload_0
       3: getfield      #6                  // Field foldCase:Z
       6: invokespecial #18                 // Method getPrefixLengthInternal:(Ljava/lang/CharSequence;Z)I
       9: ireturn

  public int getCaseSensitivePrefixLength(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: invokespecial #18                 // Method getPrefixLengthInternal:(Ljava/lang/CharSequence;Z)I
       6: ireturn

  private int getPrefixLengthInternal(java.lang.CharSequence, boolean);
    Code:
       0: iconst_0
       1: istore_3
       2: iload_3
       3: aload_0
       4: invokevirtual #19                 // Method length:()I
       7: aload_1
       8: invokeinterface #20,  1           // InterfaceMethod java/lang/CharSequence.length:()I
      13: invokestatic  #21                 // Method java/lang/Math.min:(II)I
      16: if_icmpge     58
      19: aload_0
      20: iload_3
      21: invokestatic  #22                 // Method java/lang/Character.codePointAt:(Ljava/lang/CharSequence;I)I
      24: istore        4
      26: aload_1
      27: iload_3
      28: invokestatic  #22                 // Method java/lang/Character.codePointAt:(Ljava/lang/CharSequence;I)I
      31: istore        5
      33: iload         4
      35: iload         5
      37: iload_2
      38: invokestatic  #16                 // Method codePointsEqual:(IIZ)Z
      41: ifne          47
      44: goto          58
      47: iload_3
      48: iload         4
      50: invokestatic  #11                 // Method java/lang/Character.charCount:(I)I
      53: iadd
      54: istore_3
      55: goto          2
      58: iload_3
      59: ireturn

  private static final boolean codePointsEqual(int, int, boolean);
    Code:
       0: iload_0
       1: iload_1
       2: if_icmpne     7
       5: iconst_1
       6: ireturn
       7: iload_2
       8: ifne          13
      11: iconst_0
      12: ireturn
      13: iload_0
      14: iconst_1
      15: invokestatic  #23                 // Method com/ibm/icu/lang/UCharacter.foldCase:(IZ)I
      18: istore_0
      19: iload_1
      20: iconst_1
      21: invokestatic  #23                 // Method com/ibm/icu/lang/UCharacter.foldCase:(IZ)I
      24: istore_1
      25: iload_0
      26: iload_1
      27: if_icmpne     34
      30: iconst_1
      31: goto          35
      34: iconst_0
      35: ireturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: instanceof    #24                 // class java/lang/CharSequence
       4: ifne          9
       7: iconst_0
       8: ireturn
       9: aload_0
      10: aload_1
      11: checkcast     #24                 // class java/lang/CharSequence
      14: invokestatic  #25                 // Method com/ibm/icu/impl/Utility.charSequenceEquals:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Z
      17: ireturn

  public int hashCode();
    Code:
       0: aload_0
       1: invokestatic  #26                 // Method com/ibm/icu/impl/Utility.charSequenceHashCode:(Ljava/lang/CharSequence;)I
       4: ireturn

  public java.lang.String toString();
    Code:
       0: new           #27                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #28                 // Method java/lang/StringBuilder."<init>":()V
       7: aload_0
       8: getfield      #2                  // Field str:Ljava/lang/String;
      11: iconst_0
      12: aload_0
      13: getfield      #3                  // Field start:I
      16: invokevirtual #29                 // Method java/lang/String.substring:(II)Ljava/lang/String;
      19: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      22: ldc           #31                 // String [
      24: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      27: aload_0
      28: getfield      #2                  // Field str:Ljava/lang/String;
      31: aload_0
      32: getfield      #3                  // Field start:I
      35: aload_0
      36: getfield      #5                  // Field end:I
      39: invokevirtual #29                 // Method java/lang/String.substring:(II)Ljava/lang/String;
      42: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      45: ldc           #32                 // String ]
      47: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      50: aload_0
      51: getfield      #2                  // Field str:Ljava/lang/String;
      54: aload_0
      55: getfield      #5                  // Field end:I
      58: invokevirtual #33                 // Method java/lang/String.substring:(I)Ljava/lang/String;
      61: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      64: invokevirtual #34                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      67: areturn

  static {};
    Code:
       0: ldc           #35                 // class com/ibm/icu/impl/StringSegment
       2: invokevirtual #36                 // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #7                  // Field $assertionsDisabled:Z
      16: return
}
