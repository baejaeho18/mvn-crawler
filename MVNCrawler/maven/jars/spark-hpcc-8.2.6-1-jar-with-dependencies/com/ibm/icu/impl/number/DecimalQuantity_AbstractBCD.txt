Compiled from "DecimalQuantity_AbstractBCD.java"
public abstract class com.ibm.icu.impl.number.DecimalQuantity_AbstractBCD implements com.ibm.icu.impl.number.DecimalQuantity {
  protected int scale;

  protected int precision;

  protected byte flags;

  protected static final int NEGATIVE_FLAG;

  protected static final int INFINITY_FLAG;

  protected static final int NAN_FLAG;

  protected double origDouble;

  protected int origDelta;

  protected boolean isApproximate;

  protected int lOptPos;

  protected int lReqPos;

  protected int rReqPos;

  protected int rOptPos;

  private static final double[] DOUBLE_MULTIPLIERS;

  public boolean explicitExactDouble;

  static final byte[] INT64_BCD;

  private static final int SECTION_LOWER_EDGE;

  private static final int SECTION_UPPER_EDGE;

  static final boolean $assertionsDisabled;

  public com.ibm.icu.impl.number.DecimalQuantity_AbstractBCD();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: ldc           #3                  // int 2147483647
       7: putfield      #4                  // Field lOptPos:I
      10: aload_0
      11: iconst_0
      12: putfield      #5                  // Field lReqPos:I
      15: aload_0
      16: iconst_0
      17: putfield      #6                  // Field rReqPos:I
      20: aload_0
      21: ldc           #7                  // int -2147483648
      23: putfield      #8                  // Field rOptPos:I
      26: aload_0
      27: iconst_0
      28: putfield      #9                  // Field explicitExactDouble:Z
      31: return

  public void copyFrom(com.ibm.icu.impl.number.DecimalQuantity);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #10                 // Method copyBcdFrom:(Lcom/ibm/icu/impl/number/DecimalQuantity;)V
       5: aload_1
       6: checkcast     #11                 // class com/ibm/icu/impl/number/DecimalQuantity_AbstractBCD
       9: astore_2
      10: aload_0
      11: aload_2
      12: getfield      #4                  // Field lOptPos:I
      15: putfield      #4                  // Field lOptPos:I
      18: aload_0
      19: aload_2
      20: getfield      #5                  // Field lReqPos:I
      23: putfield      #5                  // Field lReqPos:I
      26: aload_0
      27: aload_2
      28: getfield      #6                  // Field rReqPos:I
      31: putfield      #6                  // Field rReqPos:I
      34: aload_0
      35: aload_2
      36: getfield      #8                  // Field rOptPos:I
      39: putfield      #8                  // Field rOptPos:I
      42: aload_0
      43: aload_2
      44: getfield      #12                 // Field scale:I
      47: putfield      #12                 // Field scale:I
      50: aload_0
      51: aload_2
      52: getfield      #13                 // Field precision:I
      55: putfield      #13                 // Field precision:I
      58: aload_0
      59: aload_2
      60: getfield      #14                 // Field flags:B
      63: putfield      #14                 // Field flags:B
      66: aload_0
      67: aload_2
      68: getfield      #15                 // Field origDouble:D
      71: putfield      #15                 // Field origDouble:D
      74: aload_0
      75: aload_2
      76: getfield      #16                 // Field origDelta:I
      79: putfield      #16                 // Field origDelta:I
      82: aload_0
      83: aload_2
      84: getfield      #17                 // Field isApproximate:Z
      87: putfield      #17                 // Field isApproximate:Z
      90: return

  public com.ibm.icu.impl.number.DecimalQuantity_AbstractBCD clear();
    Code:
       0: aload_0
       1: ldc           #3                  // int 2147483647
       3: putfield      #4                  // Field lOptPos:I
       6: aload_0
       7: iconst_0
       8: putfield      #5                  // Field lReqPos:I
      11: aload_0
      12: iconst_0
      13: putfield      #6                  // Field rReqPos:I
      16: aload_0
      17: ldc           #7                  // int -2147483648
      19: putfield      #8                  // Field rOptPos:I
      22: aload_0
      23: iconst_0
      24: putfield      #14                 // Field flags:B
      27: aload_0
      28: invokevirtual #18                 // Method setBcdToZero:()V
      31: aload_0
      32: areturn

  public void setIntegerLength(int, int);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          18
       6: iload_1
       7: ifge          18
      10: new           #20                 // class java/lang/AssertionError
      13: dup
      14: invokespecial #21                 // Method java/lang/AssertionError."<init>":()V
      17: athrow
      18: getstatic     #19                 // Field $assertionsDisabled:Z
      21: ifne          37
      24: iload_2
      25: iload_1
      26: if_icmpge     37
      29: new           #20                 // class java/lang/AssertionError
      32: dup
      33: invokespecial #21                 // Method java/lang/AssertionError."<init>":()V
      36: athrow
      37: aload_0
      38: iload_2
      39: putfield      #4                  // Field lOptPos:I
      42: aload_0
      43: iload_1
      44: putfield      #5                  // Field lReqPos:I
      47: return

  public void setFractionLength(int, int);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          18
       6: iload_1
       7: ifge          18
      10: new           #20                 // class java/lang/AssertionError
      13: dup
      14: invokespecial #21                 // Method java/lang/AssertionError."<init>":()V
      17: athrow
      18: getstatic     #19                 // Field $assertionsDisabled:Z
      21: ifne          37
      24: iload_2
      25: iload_1
      26: if_icmpge     37
      29: new           #20                 // class java/lang/AssertionError
      32: dup
      33: invokespecial #21                 // Method java/lang/AssertionError."<init>":()V
      36: athrow
      37: aload_0
      38: iload_1
      39: ineg
      40: putfield      #6                  // Field rReqPos:I
      43: aload_0
      44: iload_2
      45: ineg
      46: putfield      #8                  // Field rOptPos:I
      49: return

  public long getPositionFingerprint();
    Code:
       0: lconst_0
       1: lstore_1
       2: lload_1
       3: aload_0
       4: getfield      #4                  // Field lOptPos:I
       7: i2l
       8: lxor
       9: lstore_1
      10: lload_1
      11: aload_0
      12: getfield      #5                  // Field lReqPos:I
      15: bipush        16
      17: ishl
      18: i2l
      19: lxor
      20: lstore_1
      21: lload_1
      22: aload_0
      23: getfield      #6                  // Field rReqPos:I
      26: i2l
      27: bipush        32
      29: lshl
      30: lxor
      31: lstore_1
      32: lload_1
      33: aload_0
      34: getfield      #8                  // Field rOptPos:I
      37: i2l
      38: bipush        48
      40: lshl
      41: lxor
      42: lstore_1
      43: lload_1
      44: lreturn

  public void roundToIncrement(java.math.BigDecimal, java.math.MathContext);
    Code:
       0: aload_0
       1: invokevirtual #22                 // Method toBigDecimal:()Ljava/math/BigDecimal;
       4: astore_3
       5: aload_3
       6: aload_1
       7: iconst_0
       8: aload_2
       9: invokevirtual #23                 // Method java/math/MathContext.getRoundingMode:()Ljava/math/RoundingMode;
      12: invokevirtual #24                 // Method java/math/BigDecimal.divide:(Ljava/math/BigDecimal;ILjava/math/RoundingMode;)Ljava/math/BigDecimal;
      15: aload_1
      16: invokevirtual #25                 // Method java/math/BigDecimal.multiply:(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;
      19: aload_2
      20: invokevirtual #26                 // Method java/math/BigDecimal.round:(Ljava/math/MathContext;)Ljava/math/BigDecimal;
      23: astore_3
      24: aload_3
      25: invokevirtual #27                 // Method java/math/BigDecimal.signum:()I
      28: ifne          38
      31: aload_0
      32: invokevirtual #18                 // Method setBcdToZero:()V
      35: goto          43
      38: aload_0
      39: aload_3
      40: invokevirtual #28                 // Method setToBigDecimal:(Ljava/math/BigDecimal;)V
      43: return

  public void multiplyBy(java.math.BigDecimal);
    Code:
       0: aload_0
       1: invokevirtual #29                 // Method isInfinite:()Z
       4: ifne          21
       7: aload_0
       8: invokevirtual #30                 // Method isZero:()Z
      11: ifne          21
      14: aload_0
      15: invokevirtual #31                 // Method isNaN:()Z
      18: ifeq          22
      21: return
      22: aload_0
      23: invokevirtual #22                 // Method toBigDecimal:()Ljava/math/BigDecimal;
      26: astore_2
      27: aload_2
      28: aload_1
      29: invokevirtual #25                 // Method java/math/BigDecimal.multiply:(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;
      32: astore_2
      33: aload_0
      34: aload_2
      35: invokevirtual #28                 // Method setToBigDecimal:(Ljava/math/BigDecimal;)V
      38: return

  public int getMagnitude() throws java.lang.ArithmeticException;
    Code:
       0: aload_0
       1: getfield      #13                 // Field precision:I
       4: ifne          17
       7: new           #32                 // class java/lang/ArithmeticException
      10: dup
      11: ldc           #33                 // String Magnitude is not well-defined for zero
      13: invokespecial #34                 // Method java/lang/ArithmeticException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: getfield      #12                 // Field scale:I
      21: aload_0
      22: getfield      #13                 // Field precision:I
      25: iadd
      26: iconst_1
      27: isub
      28: ireturn

  public void adjustMagnitude(int);
    Code:
       0: aload_0
       1: getfield      #13                 // Field precision:I
       4: ifeq          31
       7: aload_0
       8: aload_0
       9: getfield      #12                 // Field scale:I
      12: iload_1
      13: invokestatic  #35                 // Method com/ibm/icu/impl/Utility.addExact:(II)I
      16: putfield      #12                 // Field scale:I
      19: aload_0
      20: aload_0
      21: getfield      #16                 // Field origDelta:I
      24: iload_1
      25: invokestatic  #35                 // Method com/ibm/icu/impl/Utility.addExact:(II)I
      28: putfield      #16                 // Field origDelta:I
      31: return

  public com.ibm.icu.impl.StandardPlural getStandardPlural(com.ibm.icu.text.PluralRules);
    Code:
       0: aload_1
       1: ifnonnull     8
       4: getstatic     #36                 // Field com/ibm/icu/impl/StandardPlural.OTHER:Lcom/ibm/icu/impl/StandardPlural;
       7: areturn
       8: aload_1
       9: aload_0
      10: invokevirtual #37                 // Method com/ibm/icu/text/PluralRules.select:(Lcom/ibm/icu/text/PluralRules$IFixedDecimal;)Ljava/lang/String;
      13: astore_2
      14: aload_2
      15: invokestatic  #38                 // Method com/ibm/icu/impl/StandardPlural.orOtherFromString:(Ljava/lang/CharSequence;)Lcom/ibm/icu/impl/StandardPlural;
      18: areturn

  public double getPluralOperand(com.ibm.icu.text.PluralRules$Operand);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: getfield      #17                 // Field isApproximate:Z
      10: ifeq          21
      13: new           #20                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #21                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: getstatic     #39                 // Field com/ibm/icu/impl/number/DecimalQuantity_AbstractBCD$1.$SwitchMap$com$ibm$icu$text$PluralRules$Operand:[I
      24: aload_1
      25: invokevirtual #40                 // Method com/ibm/icu/text/PluralRules$Operand.ordinal:()I
      28: iaload
      29: tableswitch   { // 1 to 5
                     1: 64
                     2: 70
                     3: 77
                     4: 84
                     5: 90
               default: 96
          }
      64: aload_0
      65: invokevirtual #41                 // Method toLong:()J
      68: l2d
      69: dreturn
      70: aload_0
      71: iconst_1
      72: invokevirtual #42                 // Method toFractionLong:(Z)J
      75: l2d
      76: dreturn
      77: aload_0
      78: iconst_0
      79: invokevirtual #42                 // Method toFractionLong:(Z)J
      82: l2d
      83: dreturn
      84: aload_0
      85: invokespecial #43                 // Method fractionCount:()I
      88: i2d
      89: dreturn
      90: aload_0
      91: invokespecial #44                 // Method fractionCountWithoutTrailingZeros:()I
      94: i2d
      95: dreturn
      96: aload_0
      97: invokevirtual #45                 // Method toDouble:()D
     100: invokestatic  #46                 // Method java/lang/Math.abs:(D)D
     103: dreturn

  public void populateUFieldPosition(java.text.FieldPosition);
    Code:
       0: aload_1
       1: instanceof    #47                 // class com/ibm/icu/text/UFieldPosition
       4: ifeq          30
       7: aload_1
       8: checkcast     #47                 // class com/ibm/icu/text/UFieldPosition
      11: aload_0
      12: getstatic     #48                 // Field com/ibm/icu/text/PluralRules$Operand.v:Lcom/ibm/icu/text/PluralRules$Operand;
      15: invokevirtual #49                 // Method getPluralOperand:(Lcom/ibm/icu/text/PluralRules$Operand;)D
      18: d2i
      19: aload_0
      20: getstatic     #50                 // Field com/ibm/icu/text/PluralRules$Operand.f:Lcom/ibm/icu/text/PluralRules$Operand;
      23: invokevirtual #49                 // Method getPluralOperand:(Lcom/ibm/icu/text/PluralRules$Operand;)D
      26: d2l
      27: invokevirtual #51                 // Method com/ibm/icu/text/UFieldPosition.setFractionDigits:(IJ)V
      30: return

  public int getUpperDisplayMagnitude();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: getfield      #17                 // Field isApproximate:Z
      10: ifeq          21
      13: new           #20                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #21                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: getfield      #12                 // Field scale:I
      25: aload_0
      26: getfield      #13                 // Field precision:I
      29: iadd
      30: istore_1
      31: aload_0
      32: getfield      #5                  // Field lReqPos:I
      35: iload_1
      36: if_icmple     46
      39: aload_0
      40: getfield      #5                  // Field lReqPos:I
      43: goto          62
      46: aload_0
      47: getfield      #4                  // Field lOptPos:I
      50: iload_1
      51: if_icmpge     61
      54: aload_0
      55: getfield      #4                  // Field lOptPos:I
      58: goto          62
      61: iload_1
      62: istore_2
      63: iload_2
      64: iconst_1
      65: isub
      66: ireturn

  public int getLowerDisplayMagnitude();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: getfield      #17                 // Field isApproximate:Z
      10: ifeq          21
      13: new           #20                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #21                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: getfield      #12                 // Field scale:I
      25: istore_1
      26: aload_0
      27: getfield      #6                  // Field rReqPos:I
      30: iload_1
      31: if_icmpge     41
      34: aload_0
      35: getfield      #6                  // Field rReqPos:I
      38: goto          57
      41: aload_0
      42: getfield      #8                  // Field rOptPos:I
      45: iload_1
      46: if_icmple     56
      49: aload_0
      50: getfield      #8                  // Field rOptPos:I
      53: goto          57
      56: iload_1
      57: istore_2
      58: iload_2
      59: ireturn

  public byte getDigit(int);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: getfield      #17                 // Field isApproximate:Z
      10: ifeq          21
      13: new           #20                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #21                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: iload_1
      23: aload_0
      24: getfield      #12                 // Field scale:I
      27: isub
      28: invokevirtual #52                 // Method getDigitPos:(I)B
      31: ireturn

  private int fractionCount();
    Code:
       0: aload_0
       1: invokevirtual #53                 // Method getLowerDisplayMagnitude:()I
       4: ineg
       5: ireturn

  private int fractionCountWithoutTrailingZeros();
    Code:
       0: aload_0
       1: getfield      #12                 // Field scale:I
       4: ineg
       5: iconst_0
       6: invokestatic  #54                 // Method java/lang/Math.max:(II)I
       9: ireturn

  public boolean isNegative();
    Code:
       0: aload_0
       1: getfield      #14                 // Field flags:B
       4: iconst_1
       5: iand
       6: ifeq          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn

  public int signum();
    Code:
       0: aload_0
       1: invokevirtual #55                 // Method isNegative:()Z
       4: ifeq          11
       7: iconst_m1
       8: goto          23
      11: aload_0
      12: invokevirtual #30                 // Method isZero:()Z
      15: ifeq          22
      18: iconst_0
      19: goto          23
      22: iconst_1
      23: ireturn

  public boolean isInfinite();
    Code:
       0: aload_0
       1: getfield      #14                 // Field flags:B
       4: iconst_2
       5: iand
       6: ifeq          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn

  public boolean isNaN();
    Code:
       0: aload_0
       1: getfield      #14                 // Field flags:B
       4: iconst_4
       5: iand
       6: ifeq          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn

  public boolean isZero();
    Code:
       0: aload_0
       1: getfield      #13                 // Field precision:I
       4: ifne          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public void setToInt(int);
    Code:
       0: aload_0
       1: invokevirtual #18                 // Method setBcdToZero:()V
       4: aload_0
       5: iconst_0
       6: putfield      #14                 // Field flags:B
       9: iload_1
      10: ifge          27
      13: aload_0
      14: dup
      15: getfield      #14                 // Field flags:B
      18: iconst_1
      19: ior
      20: i2b
      21: putfield      #14                 // Field flags:B
      24: iload_1
      25: ineg
      26: istore_1
      27: iload_1
      28: ifeq          40
      31: aload_0
      32: iload_1
      33: invokespecial #56                 // Method _setToInt:(I)V
      36: aload_0
      37: invokevirtual #57                 // Method compact:()V
      40: return

  private void _setToInt(int);
    Code:
       0: iload_1
       1: ldc           #7                  // int -2147483648
       3: if_icmpne     16
       6: aload_0
       7: iload_1
       8: i2l
       9: lneg
      10: invokevirtual #58                 // Method readLongToBcd:(J)V
      13: goto          21
      16: aload_0
      17: iload_1
      18: invokevirtual #59                 // Method readIntToBcd:(I)V
      21: return

  public void setToLong(long);
    Code:
       0: aload_0
       1: invokevirtual #18                 // Method setBcdToZero:()V
       4: aload_0
       5: iconst_0
       6: putfield      #14                 // Field flags:B
       9: lload_1
      10: lconst_0
      11: lcmp
      12: ifge          29
      15: aload_0
      16: dup
      17: getfield      #14                 // Field flags:B
      20: iconst_1
      21: ior
      22: i2b
      23: putfield      #14                 // Field flags:B
      26: lload_1
      27: lneg
      28: lstore_1
      29: lload_1
      30: lconst_0
      31: lcmp
      32: ifeq          44
      35: aload_0
      36: lload_1
      37: invokespecial #60                 // Method _setToLong:(J)V
      40: aload_0
      41: invokevirtual #57                 // Method compact:()V
      44: return

  private void _setToLong(long);
    Code:
       0: lload_1
       1: ldc2_w        #62                 // long -9223372036854775808l
       4: lcmp
       5: ifne          22
       8: aload_0
       9: lload_1
      10: invokestatic  #64                 // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;
      13: invokevirtual #65                 // Method java/math/BigInteger.negate:()Ljava/math/BigInteger;
      16: invokevirtual #66                 // Method readBigIntegerToBcd:(Ljava/math/BigInteger;)V
      19: goto          44
      22: lload_1
      23: ldc2_w        #67                 // long 2147483647l
      26: lcmp
      27: ifgt          39
      30: aload_0
      31: lload_1
      32: l2i
      33: invokevirtual #59                 // Method readIntToBcd:(I)V
      36: goto          44
      39: aload_0
      40: lload_1
      41: invokevirtual #58                 // Method readLongToBcd:(J)V
      44: return

  public void setToBigInteger(java.math.BigInteger);
    Code:
       0: aload_0
       1: invokevirtual #18                 // Method setBcdToZero:()V
       4: aload_0
       5: iconst_0
       6: putfield      #14                 // Field flags:B
       9: aload_1
      10: invokevirtual #69                 // Method java/math/BigInteger.signum:()I
      13: iconst_m1
      14: if_icmpne     33
      17: aload_0
      18: dup
      19: getfield      #14                 // Field flags:B
      22: iconst_1
      23: ior
      24: i2b
      25: putfield      #14                 // Field flags:B
      28: aload_1
      29: invokevirtual #65                 // Method java/math/BigInteger.negate:()Ljava/math/BigInteger;
      32: astore_1
      33: aload_1
      34: invokevirtual #69                 // Method java/math/BigInteger.signum:()I
      37: ifeq          49
      40: aload_0
      41: aload_1
      42: invokespecial #70                 // Method _setToBigInteger:(Ljava/math/BigInteger;)V
      45: aload_0
      46: invokevirtual #57                 // Method compact:()V
      49: return

  private void _setToBigInteger(java.math.BigInteger);
    Code:
       0: aload_1
       1: invokevirtual #71                 // Method java/math/BigInteger.bitLength:()I
       4: bipush        32
       6: if_icmpge     20
       9: aload_0
      10: aload_1
      11: invokevirtual #72                 // Method java/math/BigInteger.intValue:()I
      14: invokevirtual #59                 // Method readIntToBcd:(I)V
      17: goto          45
      20: aload_1
      21: invokevirtual #71                 // Method java/math/BigInteger.bitLength:()I
      24: bipush        64
      26: if_icmpge     40
      29: aload_0
      30: aload_1
      31: invokevirtual #73                 // Method java/math/BigInteger.longValue:()J
      34: invokevirtual #58                 // Method readLongToBcd:(J)V
      37: goto          45
      40: aload_0
      41: aload_1
      42: invokevirtual #66                 // Method readBigIntegerToBcd:(Ljava/math/BigInteger;)V
      45: return

  public void setToDouble(double);
    Code:
       0: aload_0
       1: invokevirtual #18                 // Method setBcdToZero:()V
       4: aload_0
       5: iconst_0
       6: putfield      #14                 // Field flags:B
       9: dload_1
      10: dconst_0
      11: invokestatic  #74                 // Method java/lang/Double.compare:(DD)I
      14: ifge          31
      17: aload_0
      18: dup
      19: getfield      #14                 // Field flags:B
      22: iconst_1
      23: ior
      24: i2b
      25: putfield      #14                 // Field flags:B
      28: dload_1
      29: dneg
      30: dstore_1
      31: dload_1
      32: invokestatic  #75                 // Method java/lang/Double.isNaN:(D)Z
      35: ifeq          52
      38: aload_0
      39: dup
      40: getfield      #14                 // Field flags:B
      43: iconst_4
      44: ior
      45: i2b
      46: putfield      #14                 // Field flags:B
      49: goto          88
      52: dload_1
      53: invokestatic  #76                 // Method java/lang/Double.isInfinite:(D)Z
      56: ifeq          73
      59: aload_0
      60: dup
      61: getfield      #14                 // Field flags:B
      64: iconst_2
      65: ior
      66: i2b
      67: putfield      #14                 // Field flags:B
      70: goto          88
      73: dload_1
      74: dconst_0
      75: dcmpl
      76: ifeq          88
      79: aload_0
      80: dload_1
      81: invokespecial #77                 // Method _setToDoubleFast:(D)V
      84: aload_0
      85: invokevirtual #57                 // Method compact:()V
      88: return

  private void _setToDoubleFast(double);
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #17                 // Field isApproximate:Z
       5: aload_0
       6: dload_1
       7: putfield      #15                 // Field origDouble:D
      10: aload_0
      11: iconst_0
      12: putfield      #16                 // Field origDelta:I
      15: dload_1
      16: invokestatic  #78                 // Method java/lang/Double.doubleToLongBits:(D)J
      19: lstore_3
      20: lload_3
      21: ldc2_w        #79                 // long 9218868437227405312l
      24: land
      25: bipush        52
      27: lshr
      28: l2i
      29: sipush        1023
      32: isub
      33: istore        5
      35: iload         5
      37: bipush        52
      39: if_icmpgt     57
      42: dload_1
      43: d2l
      44: l2d
      45: dload_1
      46: dcmpl
      47: ifne          57
      50: aload_0
      51: dload_1
      52: d2l
      53: invokespecial #60                 // Method _setToLong:(J)V
      56: return
      57: bipush        52
      59: iload         5
      61: isub
      62: i2d
      63: ldc2_w        #81                 // double 3.32192809489d
      66: ddiv
      67: d2i
      68: istore        6
      70: iload         6
      72: iflt          110
      75: iload         6
      77: istore        7
      79: iload         7
      81: bipush        22
      83: if_icmplt     98
      86: dload_1
      87: ldc2_w        #83                 // double 1.0E22d
      90: dmul
      91: dstore_1
      92: iinc          7, -22
      95: goto          79
      98: dload_1
      99: getstatic     #85                 // Field DOUBLE_MULTIPLIERS:[D
     102: iload         7
     104: daload
     105: dmul
     106: dstore_1
     107: goto          143
     110: iload         6
     112: istore        7
     114: iload         7
     116: bipush        -22
     118: if_icmpgt     133
     121: dload_1
     122: ldc2_w        #83                 // double 1.0E22d
     125: ddiv
     126: dstore_1
     127: iinc          7, 22
     130: goto          114
     133: dload_1
     134: getstatic     #85                 // Field DOUBLE_MULTIPLIERS:[D
     137: iload         7
     139: ineg
     140: daload
     141: ddiv
     142: dstore_1
     143: dload_1
     144: invokestatic  #86                 // Method java/lang/Math.round:(D)J
     147: lstore        7
     149: lload         7
     151: lconst_0
     152: lcmp
     153: ifeq          173
     156: aload_0
     157: lload         7
     159: invokespecial #60                 // Method _setToLong:(J)V
     162: aload_0
     163: dup
     164: getfield      #12                 // Field scale:I
     167: iload         6
     169: isub
     170: putfield      #12                 // Field scale:I
     173: return

  private void convertToAccurateDouble();
    Code:
       0: aload_0
       1: getfield      #15                 // Field origDouble:D
       4: dstore_1
       5: getstatic     #19                 // Field $assertionsDisabled:Z
       8: ifne          25
      11: dload_1
      12: dconst_0
      13: dcmpl
      14: ifne          25
      17: new           #20                 // class java/lang/AssertionError
      20: dup
      21: invokespecial #21                 // Method java/lang/AssertionError."<init>":()V
      24: athrow
      25: aload_0
      26: getfield      #16                 // Field origDelta:I
      29: istore_3
      30: aload_0
      31: invokevirtual #18                 // Method setBcdToZero:()V
      34: dload_1
      35: invokestatic  #87                 // Method java/lang/Double.toString:(D)Ljava/lang/String;
      38: astore        4
      40: aload         4
      42: bipush        69
      44: invokevirtual #88                 // Method java/lang/String.indexOf:(I)I
      47: iconst_m1
      48: if_icmpeq     153
      51: getstatic     #19                 // Field $assertionsDisabled:Z
      54: ifne          76
      57: aload         4
      59: bipush        46
      61: invokevirtual #88                 // Method java/lang/String.indexOf:(I)I
      64: iconst_1
      65: if_icmpeq     76
      68: new           #20                 // class java/lang/AssertionError
      71: dup
      72: invokespecial #21                 // Method java/lang/AssertionError."<init>":()V
      75: athrow
      76: aload         4
      78: bipush        69
      80: invokevirtual #88                 // Method java/lang/String.indexOf:(I)I
      83: istore        5
      85: aload_0
      86: new           #89                 // class java/lang/StringBuilder
      89: dup
      90: invokespecial #90                 // Method java/lang/StringBuilder."<init>":()V
      93: aload         4
      95: iconst_0
      96: invokevirtual #91                 // Method java/lang/String.charAt:(I)C
      99: invokevirtual #92                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
     102: aload         4
     104: iconst_2
     105: iload         5
     107: invokevirtual #93                 // Method java/lang/String.substring:(II)Ljava/lang/String;
     110: invokevirtual #94                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     113: invokevirtual #95                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     116: invokestatic  #96                 // Method java/lang/Long.parseLong:(Ljava/lang/String;)J
     119: invokespecial #60                 // Method _setToLong:(J)V
     122: aload_0
     123: dup
     124: getfield      #12                 // Field scale:I
     127: aload         4
     129: iload         5
     131: iconst_1
     132: iadd
     133: invokevirtual #97                 // Method java/lang/String.substring:(I)Ljava/lang/String;
     136: invokestatic  #98                 // Method java/lang/Integer.parseInt:(Ljava/lang/String;)I
     139: iload         5
     141: iconst_1
     142: isub
     143: isub
     144: iconst_1
     145: iadd
     146: iadd
     147: putfield      #12                 // Field scale:I
     150: goto          386
     153: aload         4
     155: iconst_0
     156: invokevirtual #91                 // Method java/lang/String.charAt:(I)C
     159: bipush        48
     161: if_icmpne     221
     164: getstatic     #19                 // Field $assertionsDisabled:Z
     167: ifne          189
     170: aload         4
     172: bipush        46
     174: invokevirtual #88                 // Method java/lang/String.indexOf:(I)I
     177: iconst_1
     178: if_icmpeq     189
     181: new           #20                 // class java/lang/AssertionError
     184: dup
     185: invokespecial #21                 // Method java/lang/AssertionError."<init>":()V
     188: athrow
     189: aload_0
     190: aload         4
     192: iconst_2
     193: invokevirtual #97                 // Method java/lang/String.substring:(I)Ljava/lang/String;
     196: invokestatic  #96                 // Method java/lang/Long.parseLong:(Ljava/lang/String;)J
     199: invokespecial #60                 // Method _setToLong:(J)V
     202: aload_0
     203: dup
     204: getfield      #12                 // Field scale:I
     207: iconst_2
     208: aload         4
     210: invokevirtual #99                 // Method java/lang/String.length:()I
     213: isub
     214: iadd
     215: putfield      #12                 // Field scale:I
     218: goto          386
     221: aload         4
     223: aload         4
     225: invokevirtual #99                 // Method java/lang/String.length:()I
     228: iconst_1
     229: isub
     230: invokevirtual #91                 // Method java/lang/String.charAt:(I)C
     233: bipush        48
     235: if_icmpne     318
     238: getstatic     #19                 // Field $assertionsDisabled:Z
     241: ifne          269
     244: aload         4
     246: bipush        46
     248: invokevirtual #88                 // Method java/lang/String.indexOf:(I)I
     251: aload         4
     253: invokevirtual #99                 // Method java/lang/String.length:()I
     256: iconst_2
     257: isub
     258: if_icmpeq     269
     261: new           #20                 // class java/lang/AssertionError
     264: dup
     265: invokespecial #21                 // Method java/lang/AssertionError."<init>":()V
     268: athrow
     269: getstatic     #19                 // Field $assertionsDisabled:Z
     272: ifne          295
     275: aload         4
     277: invokevirtual #99                 // Method java/lang/String.length:()I
     280: iconst_2
     281: isub
     282: bipush        18
     284: if_icmple     295
     287: new           #20                 // class java/lang/AssertionError
     290: dup
     291: invokespecial #21                 // Method java/lang/AssertionError."<init>":()V
     294: athrow
     295: aload_0
     296: aload         4
     298: iconst_0
     299: aload         4
     301: invokevirtual #99                 // Method java/lang/String.length:()I
     304: iconst_2
     305: isub
     306: invokevirtual #93                 // Method java/lang/String.substring:(II)Ljava/lang/String;
     309: invokestatic  #96                 // Method java/lang/Long.parseLong:(Ljava/lang/String;)J
     312: invokespecial #60                 // Method _setToLong:(J)V
     315: goto          386
     318: aload         4
     320: bipush        46
     322: invokevirtual #88                 // Method java/lang/String.indexOf:(I)I
     325: istore        5
     327: aload_0
     328: new           #89                 // class java/lang/StringBuilder
     331: dup
     332: invokespecial #90                 // Method java/lang/StringBuilder."<init>":()V
     335: aload         4
     337: iconst_0
     338: iload         5
     340: invokevirtual #93                 // Method java/lang/String.substring:(II)Ljava/lang/String;
     343: invokevirtual #94                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     346: aload         4
     348: iload         5
     350: iconst_1
     351: iadd
     352: invokevirtual #97                 // Method java/lang/String.substring:(I)Ljava/lang/String;
     355: invokevirtual #94                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     358: invokevirtual #95                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     361: invokestatic  #96                 // Method java/lang/Long.parseLong:(Ljava/lang/String;)J
     364: invokespecial #60                 // Method _setToLong:(J)V
     367: aload_0
     368: dup
     369: getfield      #12                 // Field scale:I
     372: iload         5
     374: aload         4
     376: invokevirtual #99                 // Method java/lang/String.length:()I
     379: isub
     380: iconst_1
     381: iadd
     382: iadd
     383: putfield      #12                 // Field scale:I
     386: aload_0
     387: dup
     388: getfield      #12                 // Field scale:I
     391: iload_3
     392: iadd
     393: putfield      #12                 // Field scale:I
     396: aload_0
     397: invokevirtual #57                 // Method compact:()V
     400: aload_0
     401: iconst_1
     402: putfield      #9                  // Field explicitExactDouble:Z
     405: return

  public void setToBigDecimal(java.math.BigDecimal);
    Code:
       0: aload_0
       1: invokevirtual #18                 // Method setBcdToZero:()V
       4: aload_0
       5: iconst_0
       6: putfield      #14                 // Field flags:B
       9: aload_1
      10: invokevirtual #27                 // Method java/math/BigDecimal.signum:()I
      13: iconst_m1
      14: if_icmpne     33
      17: aload_0
      18: dup
      19: getfield      #14                 // Field flags:B
      22: iconst_1
      23: ior
      24: i2b
      25: putfield      #14                 // Field flags:B
      28: aload_1
      29: invokevirtual #100                // Method java/math/BigDecimal.negate:()Ljava/math/BigDecimal;
      32: astore_1
      33: aload_1
      34: invokevirtual #27                 // Method java/math/BigDecimal.signum:()I
      37: ifeq          49
      40: aload_0
      41: aload_1
      42: invokespecial #101                // Method _setToBigDecimal:(Ljava/math/BigDecimal;)V
      45: aload_0
      46: invokevirtual #57                 // Method compact:()V
      49: return

  private void _setToBigDecimal(java.math.BigDecimal);
    Code:
       0: aload_1
       1: invokevirtual #102                // Method java/math/BigDecimal.scale:()I
       4: istore_2
       5: aload_1
       6: iload_2
       7: invokevirtual #103                // Method java/math/BigDecimal.scaleByPowerOfTen:(I)Ljava/math/BigDecimal;
      10: astore_1
      11: aload_1
      12: invokevirtual #104                // Method java/math/BigDecimal.toBigInteger:()Ljava/math/BigInteger;
      15: astore_3
      16: aload_0
      17: aload_3
      18: invokespecial #70                 // Method _setToBigInteger:(Ljava/math/BigInteger;)V
      21: aload_0
      22: dup
      23: getfield      #12                 // Field scale:I
      26: iload_2
      27: isub
      28: putfield      #12                 // Field scale:I
      31: return

  public long toLong();
    Code:
       0: lconst_0
       1: lstore_1
       2: aload_0
       3: getfield      #12                 // Field scale:I
       6: aload_0
       7: getfield      #13                 // Field precision:I
      10: iadd
      11: iconst_1
      12: isub
      13: istore_3
      14: iload_3
      15: iflt          42
      18: lload_1
      19: ldc2_w        #105                // long 10l
      22: lmul
      23: aload_0
      24: iload_3
      25: aload_0
      26: getfield      #12                 // Field scale:I
      29: isub
      30: invokevirtual #52                 // Method getDigitPos:(I)B
      33: i2l
      34: ladd
      35: lstore_1
      36: iinc          3, -1
      39: goto          14
      42: lload_1
      43: lreturn

  public long toFractionLong(boolean);
    Code:
       0: lconst_0
       1: lstore_2
       2: iconst_m1
       3: istore        4
       5: iload         4
       7: aload_0
       8: getfield      #12                 // Field scale:I
      11: if_icmpge     27
      14: iload_1
      15: ifeq          61
      18: iload         4
      20: aload_0
      21: getfield      #6                  // Field rReqPos:I
      24: if_icmplt     61
      27: iload         4
      29: aload_0
      30: getfield      #8                  // Field rOptPos:I
      33: if_icmplt     61
      36: lload_2
      37: ldc2_w        #105                // long 10l
      40: lmul
      41: aload_0
      42: iload         4
      44: aload_0
      45: getfield      #12                 // Field scale:I
      48: isub
      49: invokevirtual #52                 // Method getDigitPos:(I)B
      52: i2l
      53: ladd
      54: lstore_2
      55: iinc          4, -1
      58: goto          5
      61: lload_2
      62: lreturn

  public boolean fitsInLong();
    Code:
       0: aload_0
       1: invokevirtual #30                 // Method isZero:()Z
       4: ifeq          9
       7: iconst_1
       8: ireturn
       9: aload_0
      10: getfield      #12                 // Field scale:I
      13: ifge          18
      16: iconst_0
      17: ireturn
      18: aload_0
      19: invokevirtual #107                // Method getMagnitude:()I
      22: istore_1
      23: iload_1
      24: bipush        18
      26: if_icmpge     31
      29: iconst_1
      30: ireturn
      31: iload_1
      32: bipush        18
      34: if_icmple     39
      37: iconst_0
      38: ireturn
      39: iconst_0
      40: istore_2
      41: iload_2
      42: aload_0
      43: getfield      #13                 // Field precision:I
      46: if_icmpge     86
      49: aload_0
      50: bipush        18
      52: iload_2
      53: isub
      54: invokevirtual #108                // Method getDigit:(I)B
      57: istore_3
      58: iload_3
      59: getstatic     #109                // Field INT64_BCD:[B
      62: iload_2
      63: baload
      64: if_icmpge     69
      67: iconst_1
      68: ireturn
      69: iload_3
      70: getstatic     #109                // Field INT64_BCD:[B
      73: iload_2
      74: baload
      75: if_icmple     80
      78: iconst_0
      79: ireturn
      80: iinc          2, 1
      83: goto          41
      86: iconst_1
      87: ireturn

  public double toDouble();
    Code:
       0: aload_0
       1: getfield      #17                 // Field isApproximate:Z
       4: ifeq          12
       7: aload_0
       8: invokevirtual #110                // Method toDoubleFromOriginal:()D
      11: dreturn
      12: aload_0
      13: invokevirtual #31                 // Method isNaN:()Z
      16: ifeq          23
      19: ldc2_w        #112                // double NaNd
      22: dreturn
      23: aload_0
      24: invokevirtual #29                 // Method isInfinite:()Z
      27: ifeq          47
      30: aload_0
      31: invokevirtual #55                 // Method isNegative:()Z
      34: ifeq          43
      37: ldc2_w        #114                // double -Infinityd
      40: goto          46
      43: ldc2_w        #116                // double Infinityd
      46: dreturn
      47: lconst_0
      48: lstore_1
      49: aload_0
      50: getfield      #13                 // Field precision:I
      53: aload_0
      54: getfield      #13                 // Field precision:I
      57: bipush        17
      59: invokestatic  #118                // Method java/lang/Math.min:(II)I
      62: isub
      63: istore_3
      64: aload_0
      65: getfield      #13                 // Field precision:I
      68: iconst_1
      69: isub
      70: istore        4
      72: iload         4
      74: iload_3
      75: if_icmplt     98
      78: lload_1
      79: ldc2_w        #105                // long 10l
      82: lmul
      83: aload_0
      84: iload         4
      86: invokevirtual #52                 // Method getDigitPos:(I)B
      89: i2l
      90: ladd
      91: lstore_1
      92: iinc          4, -1
      95: goto          72
      98: lload_1
      99: l2d
     100: dstore        4
     102: aload_0
     103: getfield      #12                 // Field scale:I
     106: iload_3
     107: iadd
     108: istore        6
     110: iload         6
     112: iflt          154
     115: iload         6
     117: istore        7
     119: iload         7
     121: bipush        22
     123: if_icmplt     140
     126: dload         4
     128: ldc2_w        #83                 // double 1.0E22d
     131: dmul
     132: dstore        4
     134: iinc          7, -22
     137: goto          119
     140: dload         4
     142: getstatic     #85                 // Field DOUBLE_MULTIPLIERS:[D
     145: iload         7
     147: daload
     148: dmul
     149: dstore        4
     151: goto          191
     154: iload         6
     156: istore        7
     158: iload         7
     160: bipush        -22
     162: if_icmpgt     179
     165: dload         4
     167: ldc2_w        #83                 // double 1.0E22d
     170: ddiv
     171: dstore        4
     173: iinc          7, 22
     176: goto          158
     179: dload         4
     181: getstatic     #85                 // Field DOUBLE_MULTIPLIERS:[D
     184: iload         7
     186: ineg
     187: daload
     188: ddiv
     189: dstore        4
     191: aload_0
     192: invokevirtual #55                 // Method isNegative:()Z
     195: ifeq          203
     198: dload         4
     200: dneg
     201: dstore        4
     203: dload         4
     205: dreturn

  public java.math.BigDecimal toBigDecimal();
    Code:
       0: aload_0
       1: getfield      #17                 // Field isApproximate:Z
       4: ifeq          11
       7: aload_0
       8: invokespecial #119                // Method convertToAccurateDouble:()V
      11: aload_0
      12: invokevirtual #120                // Method bcdToBigDecimal:()Ljava/math/BigDecimal;
      15: areturn

  protected double toDoubleFromOriginal();
    Code:
       0: aload_0
       1: getfield      #15                 // Field origDouble:D
       4: dstore_1
       5: aload_0
       6: getfield      #16                 // Field origDelta:I
       9: istore_3
      10: iload_3
      11: iflt          43
      14: iload_3
      15: bipush        22
      17: if_icmplt     32
      20: dload_1
      21: ldc2_w        #83                 // double 1.0E22d
      24: dmul
      25: dstore_1
      26: iinc          3, -22
      29: goto          14
      32: dload_1
      33: getstatic     #85                 // Field DOUBLE_MULTIPLIERS:[D
      36: iload_3
      37: daload
      38: dmul
      39: dstore_1
      40: goto          70
      43: iload_3
      44: bipush        -22
      46: if_icmpgt     61
      49: dload_1
      50: ldc2_w        #83                 // double 1.0E22d
      53: ddiv
      54: dstore_1
      55: iinc          3, 22
      58: goto          43
      61: dload_1
      62: getstatic     #85                 // Field DOUBLE_MULTIPLIERS:[D
      65: iload_3
      66: ineg
      67: daload
      68: ddiv
      69: dstore_1
      70: aload_0
      71: invokevirtual #55                 // Method isNegative:()Z
      74: ifeq          83
      77: dload_1
      78: ldc2_w        #121                // double -1.0d
      81: dmul
      82: dstore_1
      83: dload_1
      84: dreturn

  private static int safeSubtract(int, int);
    Code:
       0: iload_0
       1: iload_1
       2: isub
       3: istore_2
       4: iload_1
       5: ifge          16
       8: iload_2
       9: iload_0
      10: if_icmpge     16
      13: ldc           #3                  // int 2147483647
      15: ireturn
      16: iload_1
      17: ifle          28
      20: iload_2
      21: iload_0
      22: if_icmple     28
      25: ldc           #7                  // int -2147483648
      27: ireturn
      28: iload_2
      29: ireturn

  public void roundToMagnitude(int, java.math.MathContext);
    Code:
       0: iload_1
       1: aload_0
       2: getfield      #12                 // Field scale:I
       5: invokestatic  #123                // Method safeSubtract:(II)I
       8: istore_3
       9: aload_2
      10: invokevirtual #124                // Method java/math/MathContext.getPrecision:()I
      13: istore        4
      15: iload_1
      16: ldc           #3                  // int 2147483647
      18: if_icmpeq     37
      21: iload         4
      23: ifle          45
      26: aload_0
      27: getfield      #13                 // Field precision:I
      30: iload_3
      31: isub
      32: iload         4
      34: if_icmple     45
      37: aload_0
      38: getfield      #13                 // Field precision:I
      41: iload         4
      43: isub
      44: istore_3
      45: iload_3
      46: ifgt          59
      49: aload_0
      50: getfield      #17                 // Field isApproximate:Z
      53: ifne          59
      56: goto          583
      59: aload_0
      60: getfield      #13                 // Field precision:I
      63: ifne          69
      66: goto          583
      69: aload_0
      70: iload_3
      71: iconst_1
      72: invokestatic  #123                // Method safeSubtract:(II)I
      75: invokevirtual #52                 // Method getDigitPos:(I)B
      78: istore        5
      80: aload_0
      81: iload_3
      82: invokevirtual #52                 // Method getDigitPos:(I)B
      85: istore        6
      87: iconst_2
      88: istore        7
      90: aload_0
      91: getfield      #17                 // Field isApproximate:Z
      94: ifne          157
      97: iload         5
      99: iconst_5
     100: if_icmpge     109
     103: iconst_1
     104: istore        7
     106: goto          437
     109: iload         5
     111: iconst_5
     112: if_icmple     121
     115: iconst_3
     116: istore        7
     118: goto          437
     121: iload_3
     122: iconst_2
     123: invokestatic  #123                // Method safeSubtract:(II)I
     126: istore        8
     128: iload         8
     130: iflt          154
     133: aload_0
     134: iload         8
     136: invokevirtual #52                 // Method getDigitPos:(I)B
     139: ifeq          148
     142: iconst_3
     143: istore        7
     145: goto          154
     148: iinc          8, -1
     151: goto          128
     154: goto          437
     157: iload_3
     158: iconst_2
     159: invokestatic  #123                // Method safeSubtract:(II)I
     162: istore        8
     164: iconst_0
     165: aload_0
     166: getfield      #13                 // Field precision:I
     169: bipush        14
     171: isub
     172: invokestatic  #54                 // Method java/lang/Math.max:(II)I
     175: istore        9
     177: iload         5
     179: ifne          213
     182: iconst_m1
     183: istore        7
     185: iload         8
     187: iload         9
     189: if_icmplt     339
     192: aload_0
     193: iload         8
     195: invokevirtual #52                 // Method getDigitPos:(I)B
     198: ifeq          207
     201: iconst_1
     202: istore        7
     204: goto          339
     207: iinc          8, -1
     210: goto          185
     213: iload         5
     215: iconst_4
     216: if_icmpne     249
     219: iload         8
     221: iload         9
     223: if_icmplt     339
     226: aload_0
     227: iload         8
     229: invokevirtual #52                 // Method getDigitPos:(I)B
     232: bipush        9
     234: if_icmpeq     243
     237: iconst_1
     238: istore        7
     240: goto          339
     243: iinc          8, -1
     246: goto          219
     249: iload         5
     251: iconst_5
     252: if_icmpne     283
     255: iload         8
     257: iload         9
     259: if_icmplt     339
     262: aload_0
     263: iload         8
     265: invokevirtual #52                 // Method getDigitPos:(I)B
     268: ifeq          277
     271: iconst_3
     272: istore        7
     274: goto          339
     277: iinc          8, -1
     280: goto          255
     283: iload         5
     285: bipush        9
     287: if_icmpne     324
     290: bipush        -2
     292: istore        7
     294: iload         8
     296: iload         9
     298: if_icmplt     339
     301: aload_0
     302: iload         8
     304: invokevirtual #52                 // Method getDigitPos:(I)B
     307: bipush        9
     309: if_icmpeq     318
     312: iconst_3
     313: istore        7
     315: goto          339
     318: iinc          8, -1
     321: goto          294
     324: iload         5
     326: iconst_5
     327: if_icmpge     336
     330: iconst_1
     331: istore        7
     333: goto          339
     336: iconst_3
     337: istore        7
     339: aload_2
     340: invokevirtual #23                 // Method java/math/MathContext.getRoundingMode:()Ljava/math/RoundingMode;
     343: invokevirtual #126                // Method java/math/RoundingMode.ordinal:()I
     346: invokestatic  #127                // Method com/ibm/icu/impl/number/RoundingUtils.roundsAtMidpoint:(I)Z
     349: istore        10
     351: iload_3
     352: iconst_1
     353: invokestatic  #123                // Method safeSubtract:(II)I
     356: aload_0
     357: getfield      #13                 // Field precision:I
     360: bipush        14
     362: isub
     363: if_icmplt     387
     366: iload         10
     368: ifeq          377
     371: iload         7
     373: iconst_2
     374: if_icmpeq     387
     377: iload         10
     379: ifne          398
     382: iload         7
     384: ifge          398
     387: aload_0
     388: invokespecial #119                // Method convertToAccurateDouble:()V
     391: aload_0
     392: iload_1
     393: aload_2
     394: invokevirtual #128                // Method roundToMagnitude:(ILjava/math/MathContext;)V
     397: return
     398: aload_0
     399: iconst_0
     400: putfield      #17                 // Field isApproximate:Z
     403: aload_0
     404: dconst_0
     405: putfield      #15                 // Field origDouble:D
     408: aload_0
     409: iconst_0
     410: putfield      #16                 // Field origDelta:I
     413: iload_3
     414: ifgt          418
     417: return
     418: iload         7
     420: iconst_m1
     421: if_icmpne     427
     424: iconst_1
     425: istore        7
     427: iload         7
     429: bipush        -2
     431: if_icmpne     437
     434: iconst_3
     435: istore        7
     437: iload         6
     439: iconst_2
     440: irem
     441: ifne          448
     444: iconst_1
     445: goto          449
     448: iconst_0
     449: aload_0
     450: invokevirtual #55                 // Method isNegative:()Z
     453: iload         7
     455: aload_2
     456: invokevirtual #23                 // Method java/math/MathContext.getRoundingMode:()Ljava/math/RoundingMode;
     459: invokevirtual #126                // Method java/math/RoundingMode.ordinal:()I
     462: aload_0
     463: invokestatic  #129                // Method com/ibm/icu/impl/number/RoundingUtils.getRoundingDirection:(ZZIILjava/lang/Object;)Z
     466: istore        8
     468: iload_3
     469: aload_0
     470: getfield      #13                 // Field precision:I
     473: if_icmplt     488
     476: aload_0
     477: invokevirtual #18                 // Method setBcdToZero:()V
     480: aload_0
     481: iload_1
     482: putfield      #12                 // Field scale:I
     485: goto          493
     488: aload_0
     489: iload_3
     490: invokevirtual #130                // Method shiftRight:(I)V
     493: iload         8
     495: ifne          579
     498: iload         6
     500: bipush        9
     502: if_icmpne     531
     505: iconst_0
     506: istore        9
     508: aload_0
     509: iload         9
     511: invokevirtual #52                 // Method getDigitPos:(I)B
     514: bipush        9
     516: if_icmpne     525
     519: iinc          9, 1
     522: goto          508
     525: aload_0
     526: iload         9
     528: invokevirtual #130                // Method shiftRight:(I)V
     531: aload_0
     532: iconst_0
     533: invokevirtual #52                 // Method getDigitPos:(I)B
     536: istore        9
     538: getstatic     #19                 // Field $assertionsDisabled:Z
     541: ifne          559
     544: iload         9
     546: bipush        9
     548: if_icmpne     559
     551: new           #20                 // class java/lang/AssertionError
     554: dup
     555: invokespecial #21                 // Method java/lang/AssertionError."<init>":()V
     558: athrow
     559: aload_0
     560: iconst_0
     561: iload         9
     563: iconst_1
     564: iadd
     565: i2b
     566: invokevirtual #131                // Method setDigitPos:(IB)V
     569: aload_0
     570: dup
     571: getfield      #13                 // Field precision:I
     574: iconst_1
     575: iadd
     576: putfield      #13                 // Field precision:I
     579: aload_0
     580: invokevirtual #57                 // Method compact:()V
     583: return

  public void roundToInfinity();
    Code:
       0: aload_0
       1: getfield      #17                 // Field isApproximate:Z
       4: ifeq          11
       7: aload_0
       8: invokespecial #119                // Method convertToAccurateDouble:()V
      11: return

  public void appendDigit(byte, int, boolean);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          18
       6: iload_2
       7: ifge          18
      10: new           #20                 // class java/lang/AssertionError
      13: dup
      14: invokespecial #21                 // Method java/lang/AssertionError."<init>":()V
      17: athrow
      18: iload_1
      19: ifne          46
      22: iload_3
      23: ifeq          45
      26: aload_0
      27: getfield      #13                 // Field precision:I
      30: ifeq          45
      33: aload_0
      34: dup
      35: getfield      #12                 // Field scale:I
      38: iload_2
      39: iconst_1
      40: iadd
      41: iadd
      42: putfield      #12                 // Field scale:I
      45: return
      46: aload_0
      47: getfield      #12                 // Field scale:I
      50: ifle          69
      53: iload_2
      54: aload_0
      55: getfield      #12                 // Field scale:I
      58: iadd
      59: istore_2
      60: iload_3
      61: ifeq          69
      64: aload_0
      65: iconst_0
      66: putfield      #12                 // Field scale:I
      69: aload_0
      70: iload_2
      71: iconst_1
      72: iadd
      73: invokevirtual #132                // Method shiftLeft:(I)V
      76: aload_0
      77: iconst_0
      78: iload_1
      79: invokevirtual #131                // Method setDigitPos:(IB)V
      82: iload_3
      83: ifeq          98
      86: aload_0
      87: dup
      88: getfield      #12                 // Field scale:I
      91: iload_2
      92: iconst_1
      93: iadd
      94: iadd
      95: putfield      #12                 // Field scale:I
      98: return

  public java.lang.String toPlainString();
    Code:
       0: new           #89                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #90                 // Method java/lang/StringBuilder."<init>":()V
       7: astore_1
       8: aload_0
       9: invokevirtual #55                 // Method isNegative:()Z
      12: ifeq          22
      15: aload_1
      16: bipush        45
      18: invokevirtual #92                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      21: pop
      22: aload_0
      23: invokevirtual #133                // Method getUpperDisplayMagnitude:()I
      26: istore_2
      27: iload_2
      28: aload_0
      29: invokevirtual #53                 // Method getLowerDisplayMagnitude:()I
      32: if_icmplt     62
      35: aload_1
      36: aload_0
      37: iload_2
      38: invokevirtual #108                // Method getDigit:(I)B
      41: invokevirtual #134                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      44: pop
      45: iload_2
      46: ifne          56
      49: aload_1
      50: bipush        46
      52: invokevirtual #92                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      55: pop
      56: iinc          2, -1
      59: goto          27
      62: aload_1
      63: invokevirtual #95                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      66: areturn

  protected abstract byte getDigitPos(int);

  protected abstract void setDigitPos(int, byte);

  protected abstract void shiftLeft(int);

  protected abstract void shiftRight(int);

  protected abstract void setBcdToZero();

  protected abstract void readIntToBcd(int);

  protected abstract void readLongToBcd(long);

  protected abstract void readBigIntegerToBcd(java.math.BigInteger);

  protected abstract java.math.BigDecimal bcdToBigDecimal();

  protected abstract void copyBcdFrom(com.ibm.icu.impl.number.DecimalQuantity);

  protected abstract void compact();

  static {};
    Code:
       0: ldc           #11                 // class com/ibm/icu/impl/number/DecimalQuantity_AbstractBCD
       2: invokevirtual #135                // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #19                 // Field $assertionsDisabled:Z
      16: bipush        22
      18: newarray       double
      20: dup
      21: iconst_0
      22: dconst_1
      23: dastore
      24: dup
      25: iconst_1
      26: ldc2_w        #136                // double 10.0d
      29: dastore
      30: dup
      31: iconst_2
      32: ldc2_w        #138                // double 100.0d
      35: dastore
      36: dup
      37: iconst_3
      38: ldc2_w        #140                // double 1000.0d
      41: dastore
      42: dup
      43: iconst_4
      44: ldc2_w        #142                // double 10000.0d
      47: dastore
      48: dup
      49: iconst_5
      50: ldc2_w        #144                // double 100000.0d
      53: dastore
      54: dup
      55: bipush        6
      57: ldc2_w        #146                // double 1000000.0d
      60: dastore
      61: dup
      62: bipush        7
      64: ldc2_w        #148                // double 1.0E7d
      67: dastore
      68: dup
      69: bipush        8
      71: ldc2_w        #150                // double 1.0E8d
      74: dastore
      75: dup
      76: bipush        9
      78: ldc2_w        #152                // double 1.0E9d
      81: dastore
      82: dup
      83: bipush        10
      85: ldc2_w        #154                // double 1.0E10d
      88: dastore
      89: dup
      90: bipush        11
      92: ldc2_w        #156                // double 1.0E11d
      95: dastore
      96: dup
      97: bipush        12
      99: ldc2_w        #158                // double 1.0E12d
     102: dastore
     103: dup
     104: bipush        13
     106: ldc2_w        #160                // double 1.0E13d
     109: dastore
     110: dup
     111: bipush        14
     113: ldc2_w        #162                // double 1.0E14d
     116: dastore
     117: dup
     118: bipush        15
     120: ldc2_w        #164                // double 1.0E15d
     123: dastore
     124: dup
     125: bipush        16
     127: ldc2_w        #166                // double 1.0E16d
     130: dastore
     131: dup
     132: bipush        17
     134: ldc2_w        #168                // double 1.0E17d
     137: dastore
     138: dup
     139: bipush        18
     141: ldc2_w        #170                // double 1.0E18d
     144: dastore
     145: dup
     146: bipush        19
     148: ldc2_w        #172                // double 1.0E19d
     151: dastore
     152: dup
     153: bipush        20
     155: ldc2_w        #174                // double 1.0E20d
     158: dastore
     159: dup
     160: bipush        21
     162: ldc2_w        #176                // double 1.0E21d
     165: dastore
     166: putstatic     #85                 // Field DOUBLE_MULTIPLIERS:[D
     169: bipush        19
     171: newarray       byte
     173: dup
     174: iconst_0
     175: bipush        9
     177: bastore
     178: dup
     179: iconst_1
     180: iconst_2
     181: bastore
     182: dup
     183: iconst_2
     184: iconst_2
     185: bastore
     186: dup
     187: iconst_3
     188: iconst_3
     189: bastore
     190: dup
     191: iconst_4
     192: iconst_3
     193: bastore
     194: dup
     195: iconst_5
     196: bipush        7
     198: bastore
     199: dup
     200: bipush        6
     202: iconst_2
     203: bastore
     204: dup
     205: bipush        7
     207: iconst_0
     208: bastore
     209: dup
     210: bipush        8
     212: iconst_3
     213: bastore
     214: dup
     215: bipush        9
     217: bipush        6
     219: bastore
     220: dup
     221: bipush        10
     223: bipush        8
     225: bastore
     226: dup
     227: bipush        11
     229: iconst_5
     230: bastore
     231: dup
     232: bipush        12
     234: iconst_4
     235: bastore
     236: dup
     237: bipush        13
     239: bipush        7
     241: bastore
     242: dup
     243: bipush        14
     245: bipush        7
     247: bastore
     248: dup
     249: bipush        15
     251: iconst_5
     252: bastore
     253: dup
     254: bipush        16
     256: bipush        8
     258: bastore
     259: dup
     260: bipush        17
     262: iconst_0
     263: bastore
     264: dup
     265: bipush        18
     267: bipush        7
     269: bastore
     270: putstatic     #109                // Field INT64_BCD:[B
     273: return
}
