Compiled from "Norm2AllModes.java"
public final class com.ibm.icu.impl.Norm2AllModes$ComposeNormalizer2 extends com.ibm.icu.impl.Norm2AllModes$Normalizer2WithImpl {
  private final boolean onlyContiguous;

  public com.ibm.icu.impl.Norm2AllModes$ComposeNormalizer2(com.ibm.icu.impl.Normalizer2Impl, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method com/ibm/icu/impl/Norm2AllModes$Normalizer2WithImpl."<init>":(Lcom/ibm/icu/impl/Normalizer2Impl;)V
       5: aload_0
       6: iload_2
       7: putfield      #2                  // Field onlyContiguous:Z
      10: return

  protected void normalize(java.lang.CharSequence, com.ibm.icu.impl.Normalizer2Impl$ReorderingBuffer);
    Code:
       0: aload_0
       1: getfield      #3                  // Field impl:Lcom/ibm/icu/impl/Normalizer2Impl;
       4: aload_1
       5: iconst_0
       6: aload_1
       7: invokeinterface #4,  1            // InterfaceMethod java/lang/CharSequence.length:()I
      12: aload_0
      13: getfield      #2                  // Field onlyContiguous:Z
      16: iconst_1
      17: aload_2
      18: invokevirtual #5                  // Method com/ibm/icu/impl/Normalizer2Impl.compose:(Ljava/lang/CharSequence;IIZZLcom/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer;)Z
      21: pop
      22: return

  protected void normalizeAndAppend(java.lang.CharSequence, boolean, com.ibm.icu.impl.Normalizer2Impl$ReorderingBuffer);
    Code:
       0: aload_0
       1: getfield      #3                  // Field impl:Lcom/ibm/icu/impl/Normalizer2Impl;
       4: aload_1
       5: iload_2
       6: aload_0
       7: getfield      #2                  // Field onlyContiguous:Z
      10: aload_3
      11: invokevirtual #6                  // Method com/ibm/icu/impl/Normalizer2Impl.composeAndAppend:(Ljava/lang/CharSequence;ZZLcom/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer;)V
      14: return

  public boolean isNormalized(java.lang.CharSequence);
    Code:
       0: aload_0
       1: getfield      #3                  // Field impl:Lcom/ibm/icu/impl/Normalizer2Impl;
       4: aload_1
       5: iconst_0
       6: aload_1
       7: invokeinterface #4,  1            // InterfaceMethod java/lang/CharSequence.length:()I
      12: aload_0
      13: getfield      #2                  // Field onlyContiguous:Z
      16: iconst_0
      17: new           #7                  // class com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer
      20: dup
      21: aload_0
      22: getfield      #3                  // Field impl:Lcom/ibm/icu/impl/Normalizer2Impl;
      25: new           #8                  // class java/lang/StringBuilder
      28: dup
      29: invokespecial #9                  // Method java/lang/StringBuilder."<init>":()V
      32: iconst_5
      33: invokespecial #10                 // Method com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer."<init>":(Lcom/ibm/icu/impl/Normalizer2Impl;Ljava/lang/Appendable;I)V
      36: invokevirtual #5                  // Method com/ibm/icu/impl/Normalizer2Impl.compose:(Ljava/lang/CharSequence;IIZZLcom/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer;)Z
      39: ireturn

  public com.ibm.icu.text.Normalizer$QuickCheckResult quickCheck(java.lang.CharSequence);
    Code:
       0: aload_0
       1: getfield      #3                  // Field impl:Lcom/ibm/icu/impl/Normalizer2Impl;
       4: aload_1
       5: iconst_0
       6: aload_1
       7: invokeinterface #4,  1            // InterfaceMethod java/lang/CharSequence.length:()I
      12: aload_0
      13: getfield      #2                  // Field onlyContiguous:Z
      16: iconst_0
      17: invokevirtual #11                 // Method com/ibm/icu/impl/Normalizer2Impl.composeQuickCheck:(Ljava/lang/CharSequence;IIZZ)I
      20: istore_2
      21: iload_2
      22: iconst_1
      23: iand
      24: ifeq          31
      27: getstatic     #12                 // Field com/ibm/icu/text/Normalizer.MAYBE:Lcom/ibm/icu/text/Normalizer$QuickCheckResult;
      30: areturn
      31: iload_2
      32: iconst_1
      33: iushr
      34: aload_1
      35: invokeinterface #4,  1            // InterfaceMethod java/lang/CharSequence.length:()I
      40: if_icmpne     47
      43: getstatic     #13                 // Field com/ibm/icu/text/Normalizer.YES:Lcom/ibm/icu/text/Normalizer$QuickCheckResult;
      46: areturn
      47: getstatic     #14                 // Field com/ibm/icu/text/Normalizer.NO:Lcom/ibm/icu/text/Normalizer$QuickCheckResult;
      50: areturn

  public int spanQuickCheckYes(java.lang.CharSequence);
    Code:
       0: aload_0
       1: getfield      #3                  // Field impl:Lcom/ibm/icu/impl/Normalizer2Impl;
       4: aload_1
       5: iconst_0
       6: aload_1
       7: invokeinterface #4,  1            // InterfaceMethod java/lang/CharSequence.length:()I
      12: aload_0
      13: getfield      #2                  // Field onlyContiguous:Z
      16: iconst_1
      17: invokevirtual #11                 // Method com/ibm/icu/impl/Normalizer2Impl.composeQuickCheck:(Ljava/lang/CharSequence;IIZZ)I
      20: iconst_1
      21: iushr
      22: ireturn

  public int getQuickCheck(int);
    Code:
       0: aload_0
       1: getfield      #3                  // Field impl:Lcom/ibm/icu/impl/Normalizer2Impl;
       4: aload_0
       5: getfield      #3                  // Field impl:Lcom/ibm/icu/impl/Normalizer2Impl;
       8: iload_1
       9: invokevirtual #15                 // Method com/ibm/icu/impl/Normalizer2Impl.getNorm16:(I)I
      12: invokevirtual #16                 // Method com/ibm/icu/impl/Normalizer2Impl.getCompQuickCheck:(I)I
      15: ireturn

  public boolean hasBoundaryBefore(int);
    Code:
       0: aload_0
       1: getfield      #3                  // Field impl:Lcom/ibm/icu/impl/Normalizer2Impl;
       4: iload_1
       5: invokevirtual #17                 // Method com/ibm/icu/impl/Normalizer2Impl.hasCompBoundaryBefore:(I)Z
       8: ireturn

  public boolean hasBoundaryAfter(int);
    Code:
       0: aload_0
       1: getfield      #3                  // Field impl:Lcom/ibm/icu/impl/Normalizer2Impl;
       4: iload_1
       5: aload_0
       6: getfield      #2                  // Field onlyContiguous:Z
       9: invokevirtual #18                 // Method com/ibm/icu/impl/Normalizer2Impl.hasCompBoundaryAfter:(IZ)Z
      12: ireturn

  public boolean isInert(int);
    Code:
       0: aload_0
       1: getfield      #3                  // Field impl:Lcom/ibm/icu/impl/Normalizer2Impl;
       4: iload_1
       5: aload_0
       6: getfield      #2                  // Field onlyContiguous:Z
       9: invokevirtual #19                 // Method com/ibm/icu/impl/Normalizer2Impl.isCompInert:(IZ)Z
      12: ireturn
}
