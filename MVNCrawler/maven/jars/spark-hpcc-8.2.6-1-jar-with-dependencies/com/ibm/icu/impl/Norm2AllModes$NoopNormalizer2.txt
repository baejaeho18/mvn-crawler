Compiled from "Norm2AllModes.java"
public final class com.ibm.icu.impl.Norm2AllModes$NoopNormalizer2 extends com.ibm.icu.text.Normalizer2 {
  public com.ibm.icu.impl.Norm2AllModes$NoopNormalizer2();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method com/ibm/icu/text/Normalizer2."<init>":()V
       4: return

  public java.lang.StringBuilder normalize(java.lang.CharSequence, java.lang.StringBuilder);
    Code:
       0: aload_2
       1: aload_1
       2: if_acmpeq     16
       5: aload_2
       6: iconst_0
       7: invokevirtual #2                  // Method java/lang/StringBuilder.setLength:(I)V
      10: aload_2
      11: aload_1
      12: invokevirtual #3                  // Method java/lang/StringBuilder.append:(Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;
      15: areturn
      16: new           #4                  // class java/lang/IllegalArgumentException
      19: dup
      20: invokespecial #5                  // Method java/lang/IllegalArgumentException."<init>":()V
      23: athrow

  public java.lang.Appendable normalize(java.lang.CharSequence, java.lang.Appendable);
    Code:
       0: aload_2
       1: aload_1
       2: if_acmpeq     23
       5: aload_2
       6: aload_1
       7: invokeinterface #6,  2            // InterfaceMethod java/lang/Appendable.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;
      12: areturn
      13: astore_3
      14: new           #8                  // class com/ibm/icu/util/ICUUncheckedIOException
      17: dup
      18: aload_3
      19: invokespecial #9                  // Method com/ibm/icu/util/ICUUncheckedIOException."<init>":(Ljava/lang/Throwable;)V
      22: athrow
      23: new           #4                  // class java/lang/IllegalArgumentException
      26: dup
      27: invokespecial #5                  // Method java/lang/IllegalArgumentException."<init>":()V
      30: athrow
    Exception table:
       from    to  target type
           5    12    13   Class java/io/IOException

  public java.lang.StringBuilder normalizeSecondAndAppend(java.lang.StringBuilder, java.lang.CharSequence);
    Code:
       0: aload_1
       1: aload_2
       2: if_acmpeq     11
       5: aload_1
       6: aload_2
       7: invokevirtual #3                  // Method java/lang/StringBuilder.append:(Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;
      10: areturn
      11: new           #4                  // class java/lang/IllegalArgumentException
      14: dup
      15: invokespecial #5                  // Method java/lang/IllegalArgumentException."<init>":()V
      18: athrow

  public java.lang.StringBuilder append(java.lang.StringBuilder, java.lang.CharSequence);
    Code:
       0: aload_1
       1: aload_2
       2: if_acmpeq     11
       5: aload_1
       6: aload_2
       7: invokevirtual #3                  // Method java/lang/StringBuilder.append:(Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;
      10: areturn
      11: new           #4                  // class java/lang/IllegalArgumentException
      14: dup
      15: invokespecial #5                  // Method java/lang/IllegalArgumentException."<init>":()V
      18: athrow

  public java.lang.String getDecomposition(int);
    Code:
       0: aconst_null
       1: areturn

  public boolean isNormalized(java.lang.CharSequence);
    Code:
       0: iconst_1
       1: ireturn

  public com.ibm.icu.text.Normalizer$QuickCheckResult quickCheck(java.lang.CharSequence);
    Code:
       0: getstatic     #10                 // Field com/ibm/icu/text/Normalizer.YES:Lcom/ibm/icu/text/Normalizer$QuickCheckResult;
       3: areturn

  public int spanQuickCheckYes(java.lang.CharSequence);
    Code:
       0: aload_1
       1: invokeinterface #11,  1           // InterfaceMethod java/lang/CharSequence.length:()I
       6: ireturn

  public boolean hasBoundaryBefore(int);
    Code:
       0: iconst_1
       1: ireturn

  public boolean hasBoundaryAfter(int);
    Code:
       0: iconst_1
       1: ireturn

  public boolean isInert(int);
    Code:
       0: iconst_1
       1: ireturn
}
