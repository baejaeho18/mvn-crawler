Compiled from "IterCollationIterator.java"
public class com.ibm.icu.impl.coll.IterCollationIterator extends com.ibm.icu.impl.coll.CollationIterator {
  protected com.ibm.icu.text.UCharacterIterator iter;

  public com.ibm.icu.impl.coll.IterCollationIterator(com.ibm.icu.impl.coll.CollationData, boolean, com.ibm.icu.text.UCharacterIterator);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokespecial #1                  // Method com/ibm/icu/impl/coll/CollationIterator."<init>":(Lcom/ibm/icu/impl/coll/CollationData;Z)V
       6: aload_0
       7: aload_3
       8: putfield      #2                  // Field iter:Lcom/ibm/icu/text/UCharacterIterator;
      11: return

  public void resetToOffset(int);
    Code:
       0: aload_0
       1: invokevirtual #3                  // Method reset:()V
       4: aload_0
       5: getfield      #2                  // Field iter:Lcom/ibm/icu/text/UCharacterIterator;
       8: iload_1
       9: invokevirtual #4                  // Method com/ibm/icu/text/UCharacterIterator.setIndex:(I)V
      12: return

  public int getOffset();
    Code:
       0: aload_0
       1: getfield      #2                  // Field iter:Lcom/ibm/icu/text/UCharacterIterator;
       4: invokevirtual #5                  // Method com/ibm/icu/text/UCharacterIterator.getIndex:()I
       7: ireturn

  public int nextCodePoint();
    Code:
       0: aload_0
       1: getfield      #2                  // Field iter:Lcom/ibm/icu/text/UCharacterIterator;
       4: invokevirtual #6                  // Method com/ibm/icu/text/UCharacterIterator.nextCodePoint:()I
       7: ireturn

  public int previousCodePoint();
    Code:
       0: aload_0
       1: getfield      #2                  // Field iter:Lcom/ibm/icu/text/UCharacterIterator;
       4: invokevirtual #7                  // Method com/ibm/icu/text/UCharacterIterator.previousCodePoint:()I
       7: ireturn

  protected long handleNextCE32();
    Code:
       0: aload_0
       1: getfield      #2                  // Field iter:Lcom/ibm/icu/text/UCharacterIterator;
       4: invokevirtual #8                  // Method com/ibm/icu/text/UCharacterIterator.next:()I
       7: istore_1
       8: iload_1
       9: ifge          16
      12: ldc2_w        #10                 // long -4294967104l
      15: lreturn
      16: aload_0
      17: iload_1
      18: aload_0
      19: getfield      #12                 // Field trie:Lcom/ibm/icu/impl/Trie2_32;
      22: iload_1
      23: i2c
      24: invokevirtual #13                 // Method com/ibm/icu/impl/Trie2_32.getFromU16SingleLead:(C)I
      27: invokevirtual #14                 // Method makeCodePointAndCE32Pair:(II)J
      30: lreturn

  protected char handleGetTrailSurrogate();
    Code:
       0: aload_0
       1: getfield      #2                  // Field iter:Lcom/ibm/icu/text/UCharacterIterator;
       4: invokevirtual #8                  // Method com/ibm/icu/text/UCharacterIterator.next:()I
       7: istore_1
       8: iload_1
       9: invokestatic  #15                 // Method isTrailSurrogate:(I)Z
      12: ifne          27
      15: iload_1
      16: iflt          27
      19: aload_0
      20: getfield      #2                  // Field iter:Lcom/ibm/icu/text/UCharacterIterator;
      23: invokevirtual #16                 // Method com/ibm/icu/text/UCharacterIterator.previous:()I
      26: pop
      27: iload_1
      28: i2c
      29: ireturn

  protected void forwardNumCodePoints(int);
    Code:
       0: aload_0
       1: getfield      #2                  // Field iter:Lcom/ibm/icu/text/UCharacterIterator;
       4: iload_1
       5: invokevirtual #17                 // Method com/ibm/icu/text/UCharacterIterator.moveCodePointIndex:(I)I
       8: pop
       9: return

  protected void backwardNumCodePoints(int);
    Code:
       0: aload_0
       1: getfield      #2                  // Field iter:Lcom/ibm/icu/text/UCharacterIterator;
       4: iload_1
       5: ineg
       6: invokevirtual #17                 // Method com/ibm/icu/text/UCharacterIterator.moveCodePointIndex:(I)I
       9: pop
      10: return
}
