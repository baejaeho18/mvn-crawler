Compiled from "DecimalQuantity_DualStorageBCD.java"
public final class com.ibm.icu.impl.number.DecimalQuantity_DualStorageBCD extends com.ibm.icu.impl.number.DecimalQuantity_AbstractBCD {
  private byte[] bcdBytes;

  private long bcdLong;

  private boolean usingBytes;

  static final boolean $assertionsDisabled;

  public int maxRepresentableDigits();
    Code:
       0: ldc           #2                  // int 2147483647
       2: ireturn

  public com.ibm.icu.impl.number.DecimalQuantity_DualStorageBCD();
    Code:
       0: aload_0
       1: invokespecial #3                  // Method com/ibm/icu/impl/number/DecimalQuantity_AbstractBCD."<init>":()V
       4: aload_0
       5: lconst_0
       6: putfield      #4                  // Field bcdLong:J
       9: aload_0
      10: iconst_0
      11: putfield      #5                  // Field usingBytes:Z
      14: aload_0
      15: invokevirtual #6                  // Method setBcdToZero:()V
      18: aload_0
      19: iconst_0
      20: putfield      #7                  // Field flags:B
      23: return

  public com.ibm.icu.impl.number.DecimalQuantity_DualStorageBCD(long);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method com/ibm/icu/impl/number/DecimalQuantity_AbstractBCD."<init>":()V
       4: aload_0
       5: lconst_0
       6: putfield      #4                  // Field bcdLong:J
       9: aload_0
      10: iconst_0
      11: putfield      #5                  // Field usingBytes:Z
      14: aload_0
      15: lload_1
      16: invokevirtual #8                  // Method setToLong:(J)V
      19: return

  public com.ibm.icu.impl.number.DecimalQuantity_DualStorageBCD(int);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method com/ibm/icu/impl/number/DecimalQuantity_AbstractBCD."<init>":()V
       4: aload_0
       5: lconst_0
       6: putfield      #4                  // Field bcdLong:J
       9: aload_0
      10: iconst_0
      11: putfield      #5                  // Field usingBytes:Z
      14: aload_0
      15: iload_1
      16: invokevirtual #9                  // Method setToInt:(I)V
      19: return

  public com.ibm.icu.impl.number.DecimalQuantity_DualStorageBCD(double);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method com/ibm/icu/impl/number/DecimalQuantity_AbstractBCD."<init>":()V
       4: aload_0
       5: lconst_0
       6: putfield      #4                  // Field bcdLong:J
       9: aload_0
      10: iconst_0
      11: putfield      #5                  // Field usingBytes:Z
      14: aload_0
      15: dload_1
      16: invokevirtual #10                 // Method setToDouble:(D)V
      19: return

  public com.ibm.icu.impl.number.DecimalQuantity_DualStorageBCD(java.math.BigInteger);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method com/ibm/icu/impl/number/DecimalQuantity_AbstractBCD."<init>":()V
       4: aload_0
       5: lconst_0
       6: putfield      #4                  // Field bcdLong:J
       9: aload_0
      10: iconst_0
      11: putfield      #5                  // Field usingBytes:Z
      14: aload_0
      15: aload_1
      16: invokevirtual #11                 // Method setToBigInteger:(Ljava/math/BigInteger;)V
      19: return

  public com.ibm.icu.impl.number.DecimalQuantity_DualStorageBCD(java.math.BigDecimal);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method com/ibm/icu/impl/number/DecimalQuantity_AbstractBCD."<init>":()V
       4: aload_0
       5: lconst_0
       6: putfield      #4                  // Field bcdLong:J
       9: aload_0
      10: iconst_0
      11: putfield      #5                  // Field usingBytes:Z
      14: aload_0
      15: aload_1
      16: invokevirtual #12                 // Method setToBigDecimal:(Ljava/math/BigDecimal;)V
      19: return

  public com.ibm.icu.impl.number.DecimalQuantity_DualStorageBCD(com.ibm.icu.impl.number.DecimalQuantity_DualStorageBCD);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method com/ibm/icu/impl/number/DecimalQuantity_AbstractBCD."<init>":()V
       4: aload_0
       5: lconst_0
       6: putfield      #4                  // Field bcdLong:J
       9: aload_0
      10: iconst_0
      11: putfield      #5                  // Field usingBytes:Z
      14: aload_0
      15: aload_1
      16: invokevirtual #13                 // Method copyFrom:(Lcom/ibm/icu/impl/number/DecimalQuantity;)V
      19: return

  public com.ibm.icu.impl.number.DecimalQuantity_DualStorageBCD(java.lang.Number);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method com/ibm/icu/impl/number/DecimalQuantity_AbstractBCD."<init>":()V
       4: aload_0
       5: lconst_0
       6: putfield      #4                  // Field bcdLong:J
       9: aload_0
      10: iconst_0
      11: putfield      #5                  // Field usingBytes:Z
      14: aload_1
      15: instanceof    #14                 // class java/lang/Long
      18: ifeq          32
      21: aload_0
      22: aload_1
      23: invokevirtual #15                 // Method java/lang/Number.longValue:()J
      26: invokevirtual #8                  // Method setToLong:(J)V
      29: goto          176
      32: aload_1
      33: instanceof    #1                  // class java/lang/Integer
      36: ifeq          50
      39: aload_0
      40: aload_1
      41: invokevirtual #16                 // Method java/lang/Number.intValue:()I
      44: invokevirtual #9                  // Method setToInt:(I)V
      47: goto          176
      50: aload_1
      51: instanceof    #17                 // class java/lang/Float
      54: ifeq          68
      57: aload_0
      58: aload_1
      59: invokevirtual #18                 // Method java/lang/Number.doubleValue:()D
      62: invokevirtual #10                 // Method setToDouble:(D)V
      65: goto          176
      68: aload_1
      69: instanceof    #19                 // class java/lang/Double
      72: ifeq          86
      75: aload_0
      76: aload_1
      77: invokevirtual #18                 // Method java/lang/Number.doubleValue:()D
      80: invokevirtual #10                 // Method setToDouble:(D)V
      83: goto          176
      86: aload_1
      87: instanceof    #20                 // class java/math/BigInteger
      90: ifeq          104
      93: aload_0
      94: aload_1
      95: checkcast     #20                 // class java/math/BigInteger
      98: invokevirtual #11                 // Method setToBigInteger:(Ljava/math/BigInteger;)V
     101: goto          176
     104: aload_1
     105: instanceof    #21                 // class java/math/BigDecimal
     108: ifeq          122
     111: aload_0
     112: aload_1
     113: checkcast     #21                 // class java/math/BigDecimal
     116: invokevirtual #12                 // Method setToBigDecimal:(Ljava/math/BigDecimal;)V
     119: goto          176
     122: aload_1
     123: instanceof    #22                 // class com/ibm/icu/math/BigDecimal
     126: ifeq          143
     129: aload_0
     130: aload_1
     131: checkcast     #22                 // class com/ibm/icu/math/BigDecimal
     134: invokevirtual #23                 // Method com/ibm/icu/math/BigDecimal.toBigDecimal:()Ljava/math/BigDecimal;
     137: invokevirtual #12                 // Method setToBigDecimal:(Ljava/math/BigDecimal;)V
     140: goto          176
     143: new           #24                 // class java/lang/IllegalArgumentException
     146: dup
     147: new           #25                 // class java/lang/StringBuilder
     150: dup
     151: invokespecial #26                 // Method java/lang/StringBuilder."<init>":()V
     154: ldc           #27                 // String Number is of an unsupported type:
     156: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     159: aload_1
     160: invokevirtual #29                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
     163: invokevirtual #30                 // Method java/lang/Class.getName:()Ljava/lang/String;
     166: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     169: invokevirtual #31                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     172: invokespecial #32                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     175: athrow
     176: return

  public com.ibm.icu.impl.number.DecimalQuantity createCopy();
    Code:
       0: new           #33                 // class com/ibm/icu/impl/number/DecimalQuantity_DualStorageBCD
       3: dup
       4: aload_0
       5: invokespecial #34                 // Method "<init>":(Lcom/ibm/icu/impl/number/DecimalQuantity_DualStorageBCD;)V
       8: areturn

  protected byte getDigitPos(int);
    Code:
       0: aload_0
       1: getfield      #5                  // Field usingBytes:Z
       4: ifeq          28
       7: iload_1
       8: iflt          19
      11: iload_1
      12: aload_0
      13: getfield      #35                 // Field precision:I
      16: if_icmple     21
      19: iconst_0
      20: ireturn
      21: aload_0
      22: getfield      #36                 // Field bcdBytes:[B
      25: iload_1
      26: baload
      27: ireturn
      28: iload_1
      29: iflt          38
      32: iload_1
      33: bipush        16
      35: if_icmplt     40
      38: iconst_0
      39: ireturn
      40: aload_0
      41: getfield      #4                  // Field bcdLong:J
      44: iload_1
      45: iconst_4
      46: imul
      47: lushr
      48: ldc2_w        #37                 // long 15l
      51: land
      52: l2i
      53: i2b
      54: ireturn

  protected void setDigitPos(int, byte);
    Code:
       0: getstatic     #39                 // Field $assertionsDisabled:Z
       3: ifne          18
       6: iload_1
       7: ifge          18
      10: new           #40                 // class java/lang/AssertionError
      13: dup
      14: invokespecial #41                 // Method java/lang/AssertionError."<init>":()V
      17: athrow
      18: aload_0
      19: getfield      #5                  // Field usingBytes:Z
      22: ifeq          42
      25: aload_0
      26: iload_1
      27: iconst_1
      28: iadd
      29: invokespecial #42                 // Method ensureCapacity:(I)V
      32: aload_0
      33: getfield      #36                 // Field bcdBytes:[B
      36: iload_1
      37: iload_2
      38: bastore
      39: goto          96
      42: iload_1
      43: bipush        16
      45: if_icmplt     69
      48: aload_0
      49: invokespecial #43                 // Method switchStorage:()V
      52: aload_0
      53: iload_1
      54: iconst_1
      55: iadd
      56: invokespecial #42                 // Method ensureCapacity:(I)V
      59: aload_0
      60: getfield      #36                 // Field bcdBytes:[B
      63: iload_1
      64: iload_2
      65: bastore
      66: goto          96
      69: iload_1
      70: iconst_4
      71: imul
      72: istore_3
      73: aload_0
      74: aload_0
      75: getfield      #4                  // Field bcdLong:J
      78: ldc2_w        #37                 // long 15l
      81: iload_3
      82: lshl
      83: ldc2_w        #44                 // long -1l
      86: lxor
      87: land
      88: iload_2
      89: i2l
      90: iload_3
      91: lshl
      92: lor
      93: putfield      #4                  // Field bcdLong:J
      96: return

  protected void shiftLeft(int);
    Code:
       0: aload_0
       1: getfield      #5                  // Field usingBytes:Z
       4: ifne          22
       7: aload_0
       8: getfield      #35                 // Field precision:I
      11: iload_1
      12: iadd
      13: bipush        16
      15: if_icmple     22
      18: aload_0
      19: invokespecial #43                 // Method switchStorage:()V
      22: aload_0
      23: getfield      #5                  // Field usingBytes:Z
      26: ifeq          93
      29: aload_0
      30: aload_0
      31: getfield      #35                 // Field precision:I
      34: iload_1
      35: iadd
      36: invokespecial #42                 // Method ensureCapacity:(I)V
      39: aload_0
      40: getfield      #35                 // Field precision:I
      43: iload_1
      44: iadd
      45: iconst_1
      46: isub
      47: istore_2
      48: iload_2
      49: iload_1
      50: if_icmplt     73
      53: aload_0
      54: getfield      #36                 // Field bcdBytes:[B
      57: iload_2
      58: aload_0
      59: getfield      #36                 // Field bcdBytes:[B
      62: iload_2
      63: iload_1
      64: isub
      65: baload
      66: bastore
      67: iinc          2, -1
      70: goto          48
      73: iload_2
      74: iflt          90
      77: aload_0
      78: getfield      #36                 // Field bcdBytes:[B
      81: iload_2
      82: iconst_0
      83: bastore
      84: iinc          2, -1
      87: goto          73
      90: goto          105
      93: aload_0
      94: dup
      95: getfield      #4                  // Field bcdLong:J
      98: iload_1
      99: iconst_4
     100: imul
     101: lshl
     102: putfield      #4                  // Field bcdLong:J
     105: aload_0
     106: dup
     107: getfield      #46                 // Field scale:I
     110: iload_1
     111: isub
     112: putfield      #46                 // Field scale:I
     115: aload_0
     116: dup
     117: getfield      #35                 // Field precision:I
     120: iload_1
     121: iadd
     122: putfield      #35                 // Field precision:I
     125: return

  protected void shiftRight(int);
    Code:
       0: aload_0
       1: getfield      #5                  // Field usingBytes:Z
       4: ifeq          63
       7: iconst_0
       8: istore_2
       9: iload_2
      10: aload_0
      11: getfield      #35                 // Field precision:I
      14: iload_1
      15: isub
      16: if_icmpge     39
      19: aload_0
      20: getfield      #36                 // Field bcdBytes:[B
      23: iload_2
      24: aload_0
      25: getfield      #36                 // Field bcdBytes:[B
      28: iload_2
      29: iload_1
      30: iadd
      31: baload
      32: bastore
      33: iinc          2, 1
      36: goto          9
      39: iload_2
      40: aload_0
      41: getfield      #35                 // Field precision:I
      44: if_icmpge     60
      47: aload_0
      48: getfield      #36                 // Field bcdBytes:[B
      51: iload_2
      52: iconst_0
      53: bastore
      54: iinc          2, 1
      57: goto          39
      60: goto          75
      63: aload_0
      64: dup
      65: getfield      #4                  // Field bcdLong:J
      68: iload_1
      69: iconst_4
      70: imul
      71: lushr
      72: putfield      #4                  // Field bcdLong:J
      75: aload_0
      76: dup
      77: getfield      #46                 // Field scale:I
      80: iload_1
      81: iadd
      82: putfield      #46                 // Field scale:I
      85: aload_0
      86: dup
      87: getfield      #35                 // Field precision:I
      90: iload_1
      91: isub
      92: putfield      #35                 // Field precision:I
      95: return

  protected void setBcdToZero();
    Code:
       0: aload_0
       1: getfield      #5                  // Field usingBytes:Z
       4: ifeq          17
       7: aload_0
       8: aconst_null
       9: putfield      #36                 // Field bcdBytes:[B
      12: aload_0
      13: iconst_0
      14: putfield      #5                  // Field usingBytes:Z
      17: aload_0
      18: lconst_0
      19: putfield      #4                  // Field bcdLong:J
      22: aload_0
      23: iconst_0
      24: putfield      #46                 // Field scale:I
      27: aload_0
      28: iconst_0
      29: putfield      #35                 // Field precision:I
      32: aload_0
      33: iconst_0
      34: putfield      #47                 // Field isApproximate:Z
      37: aload_0
      38: dconst_0
      39: putfield      #48                 // Field origDouble:D
      42: aload_0
      43: iconst_0
      44: putfield      #49                 // Field origDelta:I
      47: return

  protected void readIntToBcd(int);
    Code:
       0: getstatic     #39                 // Field $assertionsDisabled:Z
       3: ifne          18
       6: iload_1
       7: ifne          18
      10: new           #40                 // class java/lang/AssertionError
      13: dup
      14: invokespecial #41                 // Method java/lang/AssertionError."<init>":()V
      17: athrow
      18: lconst_0
      19: lstore_2
      20: bipush        16
      22: istore        4
      24: iload_1
      25: ifeq          53
      28: lload_2
      29: iconst_4
      30: lushr
      31: iload_1
      32: i2l
      33: ldc2_w        #50                 // long 10l
      36: lrem
      37: bipush        60
      39: lshl
      40: ladd
      41: lstore_2
      42: iload_1
      43: bipush        10
      45: idiv
      46: istore_1
      47: iinc          4, -1
      50: goto          24
      53: getstatic     #39                 // Field $assertionsDisabled:Z
      56: ifne          74
      59: aload_0
      60: getfield      #5                  // Field usingBytes:Z
      63: ifeq          74
      66: new           #40                 // class java/lang/AssertionError
      69: dup
      70: invokespecial #41                 // Method java/lang/AssertionError."<init>":()V
      73: athrow
      74: aload_0
      75: lload_2
      76: iload         4
      78: iconst_4
      79: imul
      80: lushr
      81: putfield      #4                  // Field bcdLong:J
      84: aload_0
      85: iconst_0
      86: putfield      #46                 // Field scale:I
      89: aload_0
      90: bipush        16
      92: iload         4
      94: isub
      95: putfield      #35                 // Field precision:I
      98: return

  protected void readLongToBcd(long);
    Code:
       0: getstatic     #39                 // Field $assertionsDisabled:Z
       3: ifne          20
       6: lload_1
       7: lconst_0
       8: lcmp
       9: ifne          20
      12: new           #40                 // class java/lang/AssertionError
      15: dup
      16: invokespecial #41                 // Method java/lang/AssertionError."<init>":()V
      19: athrow
      20: lload_1
      21: ldc2_w        #52                 // long 10000000000000000l
      24: lcmp
      25: iflt          99
      28: aload_0
      29: invokespecial #54                 // Method ensureCapacity:()V
      32: iconst_0
      33: istore_3
      34: lload_1
      35: lconst_0
      36: lcmp
      37: ifeq          65
      40: aload_0
      41: getfield      #36                 // Field bcdBytes:[B
      44: iload_3
      45: lload_1
      46: ldc2_w        #50                 // long 10l
      49: lrem
      50: l2i
      51: i2b
      52: bastore
      53: lload_1
      54: ldc2_w        #50                 // long 10l
      57: ldiv
      58: lstore_1
      59: iinc          3, 1
      62: goto          34
      65: getstatic     #39                 // Field $assertionsDisabled:Z
      68: ifne          86
      71: aload_0
      72: getfield      #5                  // Field usingBytes:Z
      75: ifne          86
      78: new           #40                 // class java/lang/AssertionError
      81: dup
      82: invokespecial #41                 // Method java/lang/AssertionError."<init>":()V
      85: athrow
      86: aload_0
      87: iconst_0
      88: putfield      #46                 // Field scale:I
      91: aload_0
      92: iload_3
      93: putfield      #35                 // Field precision:I
      96: goto          200
      99: lconst_0
     100: lstore_3
     101: bipush        16
     103: istore        5
     105: lload_1
     106: lconst_0
     107: lcmp
     108: ifeq          136
     111: lload_3
     112: iconst_4
     113: lushr
     114: lload_1
     115: ldc2_w        #50                 // long 10l
     118: lrem
     119: bipush        60
     121: lshl
     122: ladd
     123: lstore_3
     124: lload_1
     125: ldc2_w        #50                 // long 10l
     128: ldiv
     129: lstore_1
     130: iinc          5, -1
     133: goto          105
     136: getstatic     #39                 // Field $assertionsDisabled:Z
     139: ifne          155
     142: iload         5
     144: ifge          155
     147: new           #40                 // class java/lang/AssertionError
     150: dup
     151: invokespecial #41                 // Method java/lang/AssertionError."<init>":()V
     154: athrow
     155: getstatic     #39                 // Field $assertionsDisabled:Z
     158: ifne          176
     161: aload_0
     162: getfield      #5                  // Field usingBytes:Z
     165: ifeq          176
     168: new           #40                 // class java/lang/AssertionError
     171: dup
     172: invokespecial #41                 // Method java/lang/AssertionError."<init>":()V
     175: athrow
     176: aload_0
     177: lload_3
     178: iload         5
     180: iconst_4
     181: imul
     182: lushr
     183: putfield      #4                  // Field bcdLong:J
     186: aload_0
     187: iconst_0
     188: putfield      #46                 // Field scale:I
     191: aload_0
     192: bipush        16
     194: iload         5
     196: isub
     197: putfield      #35                 // Field precision:I
     200: return

  protected void readBigIntegerToBcd(java.math.BigInteger);
    Code:
       0: getstatic     #39                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_1
       7: invokevirtual #55                 // Method java/math/BigInteger.signum:()I
      10: ifne          21
      13: new           #40                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #41                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: invokespecial #54                 // Method ensureCapacity:()V
      25: iconst_0
      26: istore_2
      27: aload_1
      28: invokevirtual #55                 // Method java/math/BigInteger.signum:()I
      31: ifeq          71
      34: aload_1
      35: getstatic     #56                 // Field java/math/BigInteger.TEN:Ljava/math/BigInteger;
      38: invokevirtual #57                 // Method java/math/BigInteger.divideAndRemainder:(Ljava/math/BigInteger;)[Ljava/math/BigInteger;
      41: astore_3
      42: aload_0
      43: iload_2
      44: iconst_1
      45: iadd
      46: invokespecial #42                 // Method ensureCapacity:(I)V
      49: aload_0
      50: getfield      #36                 // Field bcdBytes:[B
      53: iload_2
      54: aload_3
      55: iconst_1
      56: aaload
      57: invokevirtual #58                 // Method java/math/BigInteger.byteValue:()B
      60: bastore
      61: aload_3
      62: iconst_0
      63: aaload
      64: astore_1
      65: iinc          2, 1
      68: goto          27
      71: aload_0
      72: iconst_0
      73: putfield      #46                 // Field scale:I
      76: aload_0
      77: iload_2
      78: putfield      #35                 // Field precision:I
      81: return

  protected java.math.BigDecimal bcdToBigDecimal();
    Code:
       0: aload_0
       1: getfield      #5                  // Field usingBytes:Z
       4: ifeq          33
       7: new           #21                 // class java/math/BigDecimal
      10: dup
      11: aload_0
      12: invokevirtual #59                 // Method toNumberString:()Ljava/lang/String;
      15: invokespecial #60                 // Method java/math/BigDecimal."<init>":(Ljava/lang/String;)V
      18: astore_1
      19: aload_0
      20: invokevirtual #61                 // Method isNegative:()Z
      23: ifeq          31
      26: aload_1
      27: invokevirtual #62                 // Method java/math/BigDecimal.negate:()Ljava/math/BigDecimal;
      30: astore_1
      31: aload_1
      32: areturn
      33: lconst_0
      34: lstore_1
      35: aload_0
      36: getfield      #35                 // Field precision:I
      39: iconst_1
      40: isub
      41: istore_3
      42: iload_3
      43: iflt          65
      46: lload_1
      47: ldc2_w        #50                 // long 10l
      50: lmul
      51: aload_0
      52: iload_3
      53: invokevirtual #63                 // Method getDigitPos:(I)B
      56: i2l
      57: ladd
      58: lstore_1
      59: iinc          3, -1
      62: goto          42
      65: lload_1
      66: invokestatic  #64                 // Method java/math/BigDecimal.valueOf:(J)Ljava/math/BigDecimal;
      69: astore_3
      70: aload_3
      71: aload_0
      72: getfield      #46                 // Field scale:I
      75: invokevirtual #65                 // Method java/math/BigDecimal.scaleByPowerOfTen:(I)Ljava/math/BigDecimal;
      78: astore_3
      79: aload_0
      80: invokevirtual #61                 // Method isNegative:()Z
      83: ifeq          91
      86: aload_3
      87: invokevirtual #62                 // Method java/math/BigDecimal.negate:()Ljava/math/BigDecimal;
      90: astore_3
      91: aload_3
      92: areturn

  protected void compact();
    Code:
       0: aload_0
       1: getfield      #5                  // Field usingBytes:Z
       4: ifeq          99
       7: iconst_0
       8: istore_1
       9: iload_1
      10: aload_0
      11: getfield      #35                 // Field precision:I
      14: if_icmpge     32
      17: aload_0
      18: getfield      #36                 // Field bcdBytes:[B
      21: iload_1
      22: baload
      23: ifne          32
      26: iinc          1, 1
      29: goto          9
      32: iload_1
      33: aload_0
      34: getfield      #35                 // Field precision:I
      37: if_icmpne     45
      40: aload_0
      41: invokevirtual #6                  // Method setBcdToZero:()V
      44: return
      45: aload_0
      46: iload_1
      47: invokevirtual #66                 // Method shiftRight:(I)V
      50: aload_0
      51: getfield      #35                 // Field precision:I
      54: iconst_1
      55: isub
      56: istore_2
      57: iload_2
      58: iflt          76
      61: aload_0
      62: getfield      #36                 // Field bcdBytes:[B
      65: iload_2
      66: baload
      67: ifne          76
      70: iinc          2, -1
      73: goto          57
      76: aload_0
      77: iload_2
      78: iconst_1
      79: iadd
      80: putfield      #35                 // Field precision:I
      83: aload_0
      84: getfield      #35                 // Field precision:I
      87: bipush        16
      89: if_icmpgt     96
      92: aload_0
      93: invokespecial #43                 // Method switchStorage:()V
      96: goto          161
      99: aload_0
     100: getfield      #4                  // Field bcdLong:J
     103: lconst_0
     104: lcmp
     105: ifne          113
     108: aload_0
     109: invokevirtual #6                  // Method setBcdToZero:()V
     112: return
     113: aload_0
     114: getfield      #4                  // Field bcdLong:J
     117: invokestatic  #67                 // Method java/lang/Long.numberOfTrailingZeros:(J)I
     120: iconst_4
     121: idiv
     122: istore_1
     123: aload_0
     124: dup
     125: getfield      #4                  // Field bcdLong:J
     128: iload_1
     129: iconst_4
     130: imul
     131: lushr
     132: putfield      #4                  // Field bcdLong:J
     135: aload_0
     136: dup
     137: getfield      #46                 // Field scale:I
     140: iload_1
     141: iadd
     142: putfield      #46                 // Field scale:I
     145: aload_0
     146: bipush        16
     148: aload_0
     149: getfield      #4                  // Field bcdLong:J
     152: invokestatic  #68                 // Method java/lang/Long.numberOfLeadingZeros:(J)I
     155: iconst_4
     156: idiv
     157: isub
     158: putfield      #35                 // Field precision:I
     161: return

  private void ensureCapacity();
    Code:
       0: aload_0
       1: bipush        40
       3: invokespecial #42                 // Method ensureCapacity:(I)V
       6: return

  private void ensureCapacity(int);
    Code:
       0: iload_1
       1: ifne          5
       4: return
       5: aload_0
       6: getfield      #5                  // Field usingBytes:Z
       9: ifeq          20
      12: aload_0
      13: getfield      #36                 // Field bcdBytes:[B
      16: arraylength
      17: goto          21
      20: iconst_0
      21: istore_2
      22: aload_0
      23: getfield      #5                  // Field usingBytes:Z
      26: ifne          39
      29: aload_0
      30: iload_1
      31: newarray       byte
      33: putfield      #36                 // Field bcdBytes:[B
      36: goto          66
      39: iload_2
      40: iload_1
      41: if_icmpge     66
      44: iload_1
      45: iconst_2
      46: imul
      47: newarray       byte
      49: astore_3
      50: aload_0
      51: getfield      #36                 // Field bcdBytes:[B
      54: iconst_0
      55: aload_3
      56: iconst_0
      57: iload_2
      58: invokestatic  #69                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      61: aload_0
      62: aload_3
      63: putfield      #36                 // Field bcdBytes:[B
      66: aload_0
      67: iconst_1
      68: putfield      #5                  // Field usingBytes:Z
      71: return

  private void switchStorage();
    Code:
       0: aload_0
       1: getfield      #5                  // Field usingBytes:Z
       4: ifeq          68
       7: aload_0
       8: lconst_0
       9: putfield      #4                  // Field bcdLong:J
      12: aload_0
      13: getfield      #35                 // Field precision:I
      16: iconst_1
      17: isub
      18: istore_1
      19: iload_1
      20: iflt          55
      23: aload_0
      24: dup
      25: getfield      #4                  // Field bcdLong:J
      28: iconst_4
      29: lshl
      30: putfield      #4                  // Field bcdLong:J
      33: aload_0
      34: dup
      35: getfield      #4                  // Field bcdLong:J
      38: aload_0
      39: getfield      #36                 // Field bcdBytes:[B
      42: iload_1
      43: baload
      44: i2l
      45: lor
      46: putfield      #4                  // Field bcdLong:J
      49: iinc          1, -1
      52: goto          19
      55: aload_0
      56: aconst_null
      57: putfield      #36                 // Field bcdBytes:[B
      60: aload_0
      61: iconst_0
      62: putfield      #5                  // Field usingBytes:Z
      65: goto          135
      68: aload_0
      69: invokespecial #54                 // Method ensureCapacity:()V
      72: iconst_0
      73: istore_1
      74: iload_1
      75: aload_0
      76: getfield      #35                 // Field precision:I
      79: if_icmpge     114
      82: aload_0
      83: getfield      #36                 // Field bcdBytes:[B
      86: iload_1
      87: aload_0
      88: getfield      #4                  // Field bcdLong:J
      91: ldc2_w        #37                 // long 15l
      94: land
      95: l2i
      96: i2b
      97: bastore
      98: aload_0
      99: dup
     100: getfield      #4                  // Field bcdLong:J
     103: iconst_4
     104: lushr
     105: putfield      #4                  // Field bcdLong:J
     108: iinc          1, 1
     111: goto          74
     114: getstatic     #39                 // Field $assertionsDisabled:Z
     117: ifne          135
     120: aload_0
     121: getfield      #5                  // Field usingBytes:Z
     124: ifne          135
     127: new           #40                 // class java/lang/AssertionError
     130: dup
     131: invokespecial #41                 // Method java/lang/AssertionError."<init>":()V
     134: athrow
     135: return

  protected void copyBcdFrom(com.ibm.icu.impl.number.DecimalQuantity);
    Code:
       0: aload_1
       1: checkcast     #33                 // class com/ibm/icu/impl/number/DecimalQuantity_DualStorageBCD
       4: astore_2
       5: aload_0
       6: invokevirtual #6                  // Method setBcdToZero:()V
       9: aload_2
      10: getfield      #5                  // Field usingBytes:Z
      13: ifeq          44
      16: aload_0
      17: aload_2
      18: getfield      #35                 // Field precision:I
      21: invokespecial #42                 // Method ensureCapacity:(I)V
      24: aload_2
      25: getfield      #36                 // Field bcdBytes:[B
      28: iconst_0
      29: aload_0
      30: getfield      #36                 // Field bcdBytes:[B
      33: iconst_0
      34: aload_2
      35: getfield      #35                 // Field precision:I
      38: invokestatic  #69                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      41: goto          52
      44: aload_0
      45: aload_2
      46: getfield      #4                  // Field bcdLong:J
      49: putfield      #4                  // Field bcdLong:J
      52: return

  public java.lang.String checkHealth();
    Code:
       0: aload_0
       1: getfield      #5                  // Field usingBytes:Z
       4: ifeq          145
       7: aload_0
       8: getfield      #4                  // Field bcdLong:J
      11: lconst_0
      12: lcmp
      13: ifeq          19
      16: ldc           #70                 // String Value in bcdLong but we are in byte mode
      18: areturn
      19: aload_0
      20: getfield      #35                 // Field precision:I
      23: ifne          29
      26: ldc           #71                 // String Zero precision but we are in byte mode
      28: areturn
      29: aload_0
      30: getfield      #35                 // Field precision:I
      33: aload_0
      34: getfield      #36                 // Field bcdBytes:[B
      37: arraylength
      38: if_icmple     44
      41: ldc           #72                 // String Precision exceeds length of byte array
      43: areturn
      44: aload_0
      45: aload_0
      46: getfield      #35                 // Field precision:I
      49: iconst_1
      50: isub
      51: invokevirtual #63                 // Method getDigitPos:(I)B
      54: ifne          60
      57: ldc           #73                 // String Most significant digit is zero in byte mode
      59: areturn
      60: aload_0
      61: iconst_0
      62: invokevirtual #63                 // Method getDigitPos:(I)B
      65: ifne          71
      68: ldc           #74                 // String Least significant digit is zero in long mode
      70: areturn
      71: iconst_0
      72: istore_1
      73: iload_1
      74: aload_0
      75: getfield      #35                 // Field precision:I
      78: if_icmpge     111
      81: aload_0
      82: iload_1
      83: invokevirtual #63                 // Method getDigitPos:(I)B
      86: bipush        10
      88: if_icmplt     94
      91: ldc           #75                 // String Digit exceeding 10 in byte array
      93: areturn
      94: aload_0
      95: iload_1
      96: invokevirtual #63                 // Method getDigitPos:(I)B
      99: ifge          105
     102: ldc           #76                 // String Digit below 0 in byte array
     104: areturn
     105: iinc          1, 1
     108: goto          73
     111: aload_0
     112: getfield      #35                 // Field precision:I
     115: istore_1
     116: iload_1
     117: aload_0
     118: getfield      #36                 // Field bcdBytes:[B
     121: arraylength
     122: if_icmpge     142
     125: aload_0
     126: iload_1
     127: invokevirtual #63                 // Method getDigitPos:(I)B
     130: ifeq          136
     133: ldc           #77                 // String Nonzero digits outside of range in byte array
     135: areturn
     136: iinc          1, 1
     139: goto          116
     142: goto          321
     145: aload_0
     146: getfield      #36                 // Field bcdBytes:[B
     149: ifnull        181
     152: iconst_0
     153: istore_1
     154: iload_1
     155: aload_0
     156: getfield      #36                 // Field bcdBytes:[B
     159: arraylength
     160: if_icmpge     181
     163: aload_0
     164: getfield      #36                 // Field bcdBytes:[B
     167: iload_1
     168: baload
     169: ifeq          175
     172: ldc           #78                 // String Nonzero digits in byte array but we are in long mode
     174: areturn
     175: iinc          1, 1
     178: goto          154
     181: aload_0
     182: getfield      #35                 // Field precision:I
     185: ifne          200
     188: aload_0
     189: getfield      #4                  // Field bcdLong:J
     192: lconst_0
     193: lcmp
     194: ifeq          200
     197: ldc           #79                 // String Value in bcdLong even though precision is zero
     199: areturn
     200: aload_0
     201: getfield      #35                 // Field precision:I
     204: bipush        16
     206: if_icmple     212
     209: ldc           #80                 // String Precision exceeds length of long
     211: areturn
     212: aload_0
     213: getfield      #35                 // Field precision:I
     216: ifeq          235
     219: aload_0
     220: aload_0
     221: getfield      #35                 // Field precision:I
     224: iconst_1
     225: isub
     226: invokevirtual #63                 // Method getDigitPos:(I)B
     229: ifne          235
     232: ldc           #81                 // String Most significant digit is zero in long mode
     234: areturn
     235: aload_0
     236: getfield      #35                 // Field precision:I
     239: ifeq          253
     242: aload_0
     243: iconst_0
     244: invokevirtual #63                 // Method getDigitPos:(I)B
     247: ifne          253
     250: ldc           #74                 // String Least significant digit is zero in long mode
     252: areturn
     253: iconst_0
     254: istore_1
     255: iload_1
     256: aload_0
     257: getfield      #35                 // Field precision:I
     260: if_icmpge     293
     263: aload_0
     264: iload_1
     265: invokevirtual #63                 // Method getDigitPos:(I)B
     268: bipush        10
     270: if_icmplt     276
     273: ldc           #82                 // String Digit exceeding 10 in long
     275: areturn
     276: aload_0
     277: iload_1
     278: invokevirtual #63                 // Method getDigitPos:(I)B
     281: ifge          287
     284: ldc           #83                 // String Digit below 0 in long (?!)
     286: areturn
     287: iinc          1, 1
     290: goto          255
     293: aload_0
     294: getfield      #35                 // Field precision:I
     297: istore_1
     298: iload_1
     299: bipush        16
     301: if_icmpge     321
     304: aload_0
     305: iload_1
     306: invokevirtual #63                 // Method getDigitPos:(I)B
     309: ifeq          315
     312: ldc           #84                 // String Nonzero digits outside of range in long
     314: areturn
     315: iinc          1, 1
     318: goto          298
     321: aconst_null
     322: areturn

  public boolean isUsingBytes();
    Code:
       0: aload_0
       1: getfield      #5                  // Field usingBytes:Z
       4: ireturn

  public java.lang.String toString();
    Code:
       0: ldc           #85                 // String <DecimalQuantity %s:%d:%d:%s %s %s>
       2: bipush        6
       4: anewarray     #86                 // class java/lang/Object
       7: dup
       8: iconst_0
       9: aload_0
      10: getfield      #87                 // Field lOptPos:I
      13: sipush        1000
      16: if_icmple     24
      19: ldc           #88                 // String 999
      21: goto          31
      24: aload_0
      25: getfield      #87                 // Field lOptPos:I
      28: invokestatic  #89                 // Method java/lang/String.valueOf:(I)Ljava/lang/String;
      31: aastore
      32: dup
      33: iconst_1
      34: aload_0
      35: getfield      #90                 // Field lReqPos:I
      38: invokestatic  #91                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      41: aastore
      42: dup
      43: iconst_2
      44: aload_0
      45: getfield      #92                 // Field rReqPos:I
      48: invokestatic  #91                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      51: aastore
      52: dup
      53: iconst_3
      54: aload_0
      55: getfield      #93                 // Field rOptPos:I
      58: sipush        -1000
      61: if_icmpge     69
      64: ldc           #94                 // String -999
      66: goto          76
      69: aload_0
      70: getfield      #93                 // Field rOptPos:I
      73: invokestatic  #89                 // Method java/lang/String.valueOf:(I)Ljava/lang/String;
      76: aastore
      77: dup
      78: iconst_4
      79: aload_0
      80: getfield      #5                  // Field usingBytes:Z
      83: ifeq          91
      86: ldc           #95                 // String bytes
      88: goto          93
      91: ldc           #96                 // String long
      93: aastore
      94: dup
      95: iconst_5
      96: aload_0
      97: invokevirtual #59                 // Method toNumberString:()Ljava/lang/String;
     100: aastore
     101: invokestatic  #97                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
     104: areturn

  public java.lang.String toNumberString();
    Code:
       0: new           #25                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #26                 // Method java/lang/StringBuilder."<init>":()V
       7: astore_1
       8: aload_0
       9: getfield      #5                  // Field usingBytes:Z
      12: ifeq          46
      15: aload_0
      16: getfield      #35                 // Field precision:I
      19: iconst_1
      20: isub
      21: istore_2
      22: iload_2
      23: iflt          43
      26: aload_1
      27: aload_0
      28: getfield      #36                 // Field bcdBytes:[B
      31: iload_2
      32: baload
      33: invokevirtual #98                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      36: pop
      37: iinc          2, -1
      40: goto          22
      43: goto          58
      46: aload_1
      47: aload_0
      48: getfield      #4                  // Field bcdLong:J
      51: invokestatic  #99                 // Method java/lang/Long.toHexString:(J)Ljava/lang/String;
      54: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      57: pop
      58: aload_1
      59: ldc           #100                // String E
      61: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      64: pop
      65: aload_1
      66: aload_0
      67: getfield      #46                 // Field scale:I
      70: invokevirtual #98                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      73: pop
      74: aload_1
      75: invokevirtual #31                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      78: areturn

  static {};
    Code:
       0: ldc           #33                 // class com/ibm/icu/impl/number/DecimalQuantity_DualStorageBCD
       2: invokevirtual #101                // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #39                 // Field $assertionsDisabled:Z
      16: return
}
