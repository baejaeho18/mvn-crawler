Compiled from "CollationKeys.java"
public abstract class com.ibm.icu.impl.coll.CollationKeys$SortKeyByteSink {
  protected byte[] buffer_;

  private int appended_;

  public com.ibm.icu.impl.coll.CollationKeys$SortKeyByteSink(byte[]);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field appended_:I
       9: aload_0
      10: aload_1
      11: putfield      #3                  // Field buffer_:[B
      14: return

  public void setBufferAndAppended(byte[], int);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #3                  // Field buffer_:[B
       5: aload_0
       6: iload_2
       7: putfield      #2                  // Field appended_:I
      10: return

  public void Append(byte[], int);
    Code:
       0: iload_2
       1: ifle          8
       4: aload_1
       5: ifnonnull     9
       8: return
       9: aload_0
      10: getfield      #2                  // Field appended_:I
      13: istore_3
      14: aload_0
      15: dup
      16: getfield      #2                  // Field appended_:I
      19: iload_2
      20: iadd
      21: putfield      #2                  // Field appended_:I
      24: aload_0
      25: getfield      #3                  // Field buffer_:[B
      28: arraylength
      29: iload_3
      30: isub
      31: istore        4
      33: iload_2
      34: iload         4
      36: if_icmpgt     53
      39: aload_1
      40: iconst_0
      41: aload_0
      42: getfield      #3                  // Field buffer_:[B
      45: iload_3
      46: iload_2
      47: invokestatic  #4                  // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      50: goto          61
      53: aload_0
      54: aload_1
      55: iconst_0
      56: iload_2
      57: iload_3
      58: invokevirtual #5                  // Method AppendBeyondCapacity:([BIII)V
      61: return

  public void Append(int);
    Code:
       0: aload_0
       1: getfield      #2                  // Field appended_:I
       4: aload_0
       5: getfield      #3                  // Field buffer_:[B
       8: arraylength
       9: if_icmplt     24
      12: aload_0
      13: iconst_1
      14: aload_0
      15: getfield      #2                  // Field appended_:I
      18: invokevirtual #6                  // Method Resize:(II)Z
      21: ifeq          35
      24: aload_0
      25: getfield      #3                  // Field buffer_:[B
      28: aload_0
      29: getfield      #2                  // Field appended_:I
      32: iload_1
      33: i2b
      34: bastore
      35: aload_0
      36: dup
      37: getfield      #2                  // Field appended_:I
      40: iconst_1
      41: iadd
      42: putfield      #2                  // Field appended_:I
      45: return

  public int NumberOfBytesAppended();
    Code:
       0: aload_0
       1: getfield      #2                  // Field appended_:I
       4: ireturn

  public int GetRemainingCapacity();
    Code:
       0: aload_0
       1: getfield      #3                  // Field buffer_:[B
       4: arraylength
       5: aload_0
       6: getfield      #2                  // Field appended_:I
       9: isub
      10: ireturn

  public boolean Overflowed();
    Code:
       0: aload_0
       1: getfield      #2                  // Field appended_:I
       4: aload_0
       5: getfield      #3                  // Field buffer_:[B
       8: arraylength
       9: if_icmple     16
      12: iconst_1
      13: goto          17
      16: iconst_0
      17: ireturn

  protected abstract void AppendBeyondCapacity(byte[], int, int, int);

  protected abstract boolean Resize(int, int);
}
