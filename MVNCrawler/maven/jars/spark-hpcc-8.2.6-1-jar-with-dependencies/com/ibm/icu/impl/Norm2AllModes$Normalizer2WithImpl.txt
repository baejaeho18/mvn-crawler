Compiled from "Norm2AllModes.java"
public abstract class com.ibm.icu.impl.Norm2AllModes$Normalizer2WithImpl extends com.ibm.icu.text.Normalizer2 {
  public final com.ibm.icu.impl.Normalizer2Impl impl;

  public com.ibm.icu.impl.Norm2AllModes$Normalizer2WithImpl(com.ibm.icu.impl.Normalizer2Impl);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method com/ibm/icu/text/Normalizer2."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field impl:Lcom/ibm/icu/impl/Normalizer2Impl;
       9: return

  public java.lang.StringBuilder normalize(java.lang.CharSequence, java.lang.StringBuilder);
    Code:
       0: aload_2
       1: aload_1
       2: if_acmpne     13
       5: new           #3                  // class java/lang/IllegalArgumentException
       8: dup
       9: invokespecial #4                  // Method java/lang/IllegalArgumentException."<init>":()V
      12: athrow
      13: aload_2
      14: iconst_0
      15: invokevirtual #5                  // Method java/lang/StringBuilder.setLength:(I)V
      18: aload_0
      19: aload_1
      20: new           #6                  // class com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer
      23: dup
      24: aload_0
      25: getfield      #2                  // Field impl:Lcom/ibm/icu/impl/Normalizer2Impl;
      28: aload_2
      29: aload_1
      30: invokeinterface #7,  1            // InterfaceMethod java/lang/CharSequence.length:()I
      35: invokespecial #8                  // Method com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer."<init>":(Lcom/ibm/icu/impl/Normalizer2Impl;Ljava/lang/Appendable;I)V
      38: invokevirtual #9                  // Method normalize:(Ljava/lang/CharSequence;Lcom/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer;)V
      41: aload_2
      42: areturn

  public java.lang.Appendable normalize(java.lang.CharSequence, java.lang.Appendable);
    Code:
       0: aload_2
       1: aload_1
       2: if_acmpne     13
       5: new           #3                  // class java/lang/IllegalArgumentException
       8: dup
       9: invokespecial #4                  // Method java/lang/IllegalArgumentException."<init>":()V
      12: athrow
      13: new           #6                  // class com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer
      16: dup
      17: aload_0
      18: getfield      #2                  // Field impl:Lcom/ibm/icu/impl/Normalizer2Impl;
      21: aload_2
      22: aload_1
      23: invokeinterface #7,  1            // InterfaceMethod java/lang/CharSequence.length:()I
      28: invokespecial #8                  // Method com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer."<init>":(Lcom/ibm/icu/impl/Normalizer2Impl;Ljava/lang/Appendable;I)V
      31: astore_3
      32: aload_0
      33: aload_1
      34: aload_3
      35: invokevirtual #9                  // Method normalize:(Ljava/lang/CharSequence;Lcom/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer;)V
      38: aload_3
      39: invokevirtual #10                 // Method com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer.flush:()V
      42: aload_2
      43: areturn

  protected abstract void normalize(java.lang.CharSequence, com.ibm.icu.impl.Normalizer2Impl$ReorderingBuffer);

  public java.lang.StringBuilder normalizeSecondAndAppend(java.lang.StringBuilder, java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iconst_1
       4: invokevirtual #11                 // Method normalizeSecondAndAppend:(Ljava/lang/StringBuilder;Ljava/lang/CharSequence;Z)Ljava/lang/StringBuilder;
       7: areturn

  public java.lang.StringBuilder append(java.lang.StringBuilder, java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iconst_0
       4: invokevirtual #11                 // Method normalizeSecondAndAppend:(Ljava/lang/StringBuilder;Ljava/lang/CharSequence;Z)Ljava/lang/StringBuilder;
       7: areturn

  public java.lang.StringBuilder normalizeSecondAndAppend(java.lang.StringBuilder, java.lang.CharSequence, boolean);
    Code:
       0: aload_1
       1: aload_2
       2: if_acmpne     13
       5: new           #3                  // class java/lang/IllegalArgumentException
       8: dup
       9: invokespecial #4                  // Method java/lang/IllegalArgumentException."<init>":()V
      12: athrow
      13: aload_0
      14: aload_2
      15: iload_3
      16: new           #6                  // class com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer
      19: dup
      20: aload_0
      21: getfield      #2                  // Field impl:Lcom/ibm/icu/impl/Normalizer2Impl;
      24: aload_1
      25: aload_1
      26: invokevirtual #12                 // Method java/lang/StringBuilder.length:()I
      29: aload_2
      30: invokeinterface #7,  1            // InterfaceMethod java/lang/CharSequence.length:()I
      35: iadd
      36: invokespecial #8                  // Method com/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer."<init>":(Lcom/ibm/icu/impl/Normalizer2Impl;Ljava/lang/Appendable;I)V
      39: invokevirtual #13                 // Method normalizeAndAppend:(Ljava/lang/CharSequence;ZLcom/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer;)V
      42: aload_1
      43: areturn

  protected abstract void normalizeAndAppend(java.lang.CharSequence, boolean, com.ibm.icu.impl.Normalizer2Impl$ReorderingBuffer);

  public java.lang.String getDecomposition(int);
    Code:
       0: aload_0
       1: getfield      #2                  // Field impl:Lcom/ibm/icu/impl/Normalizer2Impl;
       4: iload_1
       5: invokevirtual #14                 // Method com/ibm/icu/impl/Normalizer2Impl.getDecomposition:(I)Ljava/lang/String;
       8: areturn

  public java.lang.String getRawDecomposition(int);
    Code:
       0: aload_0
       1: getfield      #2                  // Field impl:Lcom/ibm/icu/impl/Normalizer2Impl;
       4: iload_1
       5: invokevirtual #15                 // Method com/ibm/icu/impl/Normalizer2Impl.getRawDecomposition:(I)Ljava/lang/String;
       8: areturn

  public int composePair(int, int);
    Code:
       0: aload_0
       1: getfield      #2                  // Field impl:Lcom/ibm/icu/impl/Normalizer2Impl;
       4: iload_1
       5: iload_2
       6: invokevirtual #16                 // Method com/ibm/icu/impl/Normalizer2Impl.composePair:(II)I
       9: ireturn

  public int getCombiningClass(int);
    Code:
       0: aload_0
       1: getfield      #2                  // Field impl:Lcom/ibm/icu/impl/Normalizer2Impl;
       4: aload_0
       5: getfield      #2                  // Field impl:Lcom/ibm/icu/impl/Normalizer2Impl;
       8: iload_1
       9: invokevirtual #17                 // Method com/ibm/icu/impl/Normalizer2Impl.getNorm16:(I)I
      12: invokevirtual #18                 // Method com/ibm/icu/impl/Normalizer2Impl.getCC:(I)I
      15: ireturn

  public boolean isNormalized(java.lang.CharSequence);
    Code:
       0: aload_1
       1: invokeinterface #7,  1            // InterfaceMethod java/lang/CharSequence.length:()I
       6: aload_0
       7: aload_1
       8: invokevirtual #19                 // Method spanQuickCheckYes:(Ljava/lang/CharSequence;)I
      11: if_icmpne     18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: ireturn

  public com.ibm.icu.text.Normalizer$QuickCheckResult quickCheck(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #20                 // Method isNormalized:(Ljava/lang/CharSequence;)Z
       5: ifeq          14
       8: getstatic     #21                 // Field com/ibm/icu/text/Normalizer.YES:Lcom/ibm/icu/text/Normalizer$QuickCheckResult;
      11: goto          17
      14: getstatic     #22                 // Field com/ibm/icu/text/Normalizer.NO:Lcom/ibm/icu/text/Normalizer$QuickCheckResult;
      17: areturn

  public abstract int getQuickCheck(int);
}
