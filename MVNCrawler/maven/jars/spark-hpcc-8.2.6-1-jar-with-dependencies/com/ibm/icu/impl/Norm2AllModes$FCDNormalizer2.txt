Compiled from "Norm2AllModes.java"
public final class com.ibm.icu.impl.Norm2AllModes$FCDNormalizer2 extends com.ibm.icu.impl.Norm2AllModes$Normalizer2WithImpl {
  public com.ibm.icu.impl.Norm2AllModes$FCDNormalizer2(com.ibm.icu.impl.Normalizer2Impl);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method com/ibm/icu/impl/Norm2AllModes$Normalizer2WithImpl."<init>":(Lcom/ibm/icu/impl/Normalizer2Impl;)V
       5: return

  protected void normalize(java.lang.CharSequence, com.ibm.icu.impl.Normalizer2Impl$ReorderingBuffer);
    Code:
       0: aload_0
       1: getfield      #2                  // Field impl:Lcom/ibm/icu/impl/Normalizer2Impl;
       4: aload_1
       5: iconst_0
       6: aload_1
       7: invokeinterface #3,  1            // InterfaceMethod java/lang/CharSequence.length:()I
      12: aload_2
      13: invokevirtual #4                  // Method com/ibm/icu/impl/Normalizer2Impl.makeFCD:(Ljava/lang/CharSequence;IILcom/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer;)I
      16: pop
      17: return

  protected void normalizeAndAppend(java.lang.CharSequence, boolean, com.ibm.icu.impl.Normalizer2Impl$ReorderingBuffer);
    Code:
       0: aload_0
       1: getfield      #2                  // Field impl:Lcom/ibm/icu/impl/Normalizer2Impl;
       4: aload_1
       5: iload_2
       6: aload_3
       7: invokevirtual #5                  // Method com/ibm/icu/impl/Normalizer2Impl.makeFCDAndAppend:(Ljava/lang/CharSequence;ZLcom/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer;)V
      10: return

  public int spanQuickCheckYes(java.lang.CharSequence);
    Code:
       0: aload_0
       1: getfield      #2                  // Field impl:Lcom/ibm/icu/impl/Normalizer2Impl;
       4: aload_1
       5: iconst_0
       6: aload_1
       7: invokeinterface #3,  1            // InterfaceMethod java/lang/CharSequence.length:()I
      12: aconst_null
      13: invokevirtual #4                  // Method com/ibm/icu/impl/Normalizer2Impl.makeFCD:(Ljava/lang/CharSequence;IILcom/ibm/icu/impl/Normalizer2Impl$ReorderingBuffer;)I
      16: ireturn

  public int getQuickCheck(int);
    Code:
       0: aload_0
       1: getfield      #2                  // Field impl:Lcom/ibm/icu/impl/Normalizer2Impl;
       4: aload_0
       5: getfield      #2                  // Field impl:Lcom/ibm/icu/impl/Normalizer2Impl;
       8: iload_1
       9: invokevirtual #6                  // Method com/ibm/icu/impl/Normalizer2Impl.getNorm16:(I)I
      12: invokevirtual #7                  // Method com/ibm/icu/impl/Normalizer2Impl.isDecompYes:(I)Z
      15: ifeq          22
      18: iconst_1
      19: goto          23
      22: iconst_0
      23: ireturn

  public boolean hasBoundaryBefore(int);
    Code:
       0: aload_0
       1: getfield      #2                  // Field impl:Lcom/ibm/icu/impl/Normalizer2Impl;
       4: iload_1
       5: invokevirtual #8                  // Method com/ibm/icu/impl/Normalizer2Impl.hasFCDBoundaryBefore:(I)Z
       8: ireturn

  public boolean hasBoundaryAfter(int);
    Code:
       0: aload_0
       1: getfield      #2                  // Field impl:Lcom/ibm/icu/impl/Normalizer2Impl;
       4: iload_1
       5: invokevirtual #9                  // Method com/ibm/icu/impl/Normalizer2Impl.hasFCDBoundaryAfter:(I)Z
       8: ireturn

  public boolean isInert(int);
    Code:
       0: aload_0
       1: getfield      #2                  // Field impl:Lcom/ibm/icu/impl/Normalizer2Impl;
       4: iload_1
       5: invokevirtual #10                 // Method com/ibm/icu/impl/Normalizer2Impl.isFCDInert:(I)Z
       8: ireturn
}
