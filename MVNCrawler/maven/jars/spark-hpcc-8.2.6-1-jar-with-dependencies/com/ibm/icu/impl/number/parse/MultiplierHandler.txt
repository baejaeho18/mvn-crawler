Compiled from "MultiplierHandler.java"
public class com.ibm.icu.impl.number.parse.MultiplierHandler extends com.ibm.icu.impl.number.parse.ValidationMatcher {
  private final java.math.BigDecimal multiplier;

  private final java.math.MathContext mc;

  private final boolean isNegative;

  public com.ibm.icu.impl.number.parse.MultiplierHandler(java.math.BigDecimal, java.math.MathContext);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method com/ibm/icu/impl/number/parse/ValidationMatcher."<init>":()V
       4: aload_0
       5: getstatic     #2                  // Field java/math/BigDecimal.ONE:Ljava/math/BigDecimal;
       8: aload_1
       9: aload_2
      10: invokevirtual #3                  // Method java/math/BigDecimal.divide:(Ljava/math/BigDecimal;Ljava/math/MathContext;)Ljava/math/BigDecimal;
      13: invokevirtual #4                  // Method java/math/BigDecimal.abs:()Ljava/math/BigDecimal;
      16: putfield      #5                  // Field multiplier:Ljava/math/BigDecimal;
      19: aload_0
      20: aload_2
      21: putfield      #6                  // Field mc:Ljava/math/MathContext;
      24: aload_0
      25: aload_1
      26: invokevirtual #7                  // Method java/math/BigDecimal.signum:()I
      29: ifge          36
      32: iconst_1
      33: goto          37
      36: iconst_0
      37: putfield      #8                  // Field isNegative:Z
      40: return

  public void postProcess(com.ibm.icu.impl.number.parse.ParsedNumber);
    Code:
       0: aload_1
       1: getfield      #9                  // Field com/ibm/icu/impl/number/parse/ParsedNumber.quantity:Lcom/ibm/icu/impl/number/DecimalQuantity_DualStorageBCD;
       4: ifnull        61
       7: aload_1
       8: getfield      #9                  // Field com/ibm/icu/impl/number/parse/ParsedNumber.quantity:Lcom/ibm/icu/impl/number/DecimalQuantity_DualStorageBCD;
      11: aload_0
      12: getfield      #5                  // Field multiplier:Ljava/math/BigDecimal;
      15: invokevirtual #10                 // Method com/ibm/icu/impl/number/DecimalQuantity_DualStorageBCD.multiplyBy:(Ljava/math/BigDecimal;)V
      18: aload_1
      19: getfield      #9                  // Field com/ibm/icu/impl/number/parse/ParsedNumber.quantity:Lcom/ibm/icu/impl/number/DecimalQuantity_DualStorageBCD;
      22: aload_1
      23: getfield      #9                  // Field com/ibm/icu/impl/number/parse/ParsedNumber.quantity:Lcom/ibm/icu/impl/number/DecimalQuantity_DualStorageBCD;
      26: invokevirtual #11                 // Method com/ibm/icu/impl/number/DecimalQuantity_DualStorageBCD.getMagnitude:()I
      29: aload_0
      30: getfield      #6                  // Field mc:Ljava/math/MathContext;
      33: invokevirtual #12                 // Method java/math/MathContext.getPrecision:()I
      36: isub
      37: aload_0
      38: getfield      #6                  // Field mc:Ljava/math/MathContext;
      41: invokevirtual #13                 // Method com/ibm/icu/impl/number/DecimalQuantity_DualStorageBCD.roundToMagnitude:(ILjava/math/MathContext;)V
      44: aload_0
      45: getfield      #8                  // Field isNegative:Z
      48: ifeq          61
      51: aload_1
      52: dup
      53: getfield      #14                 // Field com/ibm/icu/impl/number/parse/ParsedNumber.flags:I
      56: iconst_1
      57: ixor
      58: putfield      #14                 // Field com/ibm/icu/impl/number/parse/ParsedNumber.flags:I
      61: return

  public java.lang.String toString();
    Code:
       0: new           #16                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #17                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #18                 // String <MultiplierHandler
       9: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: getfield      #5                  // Field multiplier:Ljava/math/BigDecimal;
      16: invokevirtual #20                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      19: ldc           #21                 // String >
      21: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: invokevirtual #22                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      27: areturn
}
