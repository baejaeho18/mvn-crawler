Compiled from "IndianCalendar.java"
public class com.ibm.icu.util.IndianCalendar extends com.ibm.icu.util.Calendar {
  private static final long serialVersionUID;

  public static final int CHAITRA;

  public static final int VAISAKHA;

  public static final int JYAISTHA;

  public static final int ASADHA;

  public static final int SRAVANA;

  public static final int BHADRA;

  public static final int ASVINA;

  public static final int KARTIKA;

  public static final int AGRAHAYANA;

  public static final int PAUSA;

  public static final int MAGHA;

  public static final int PHALGUNA;

  public static final int IE;

  private static final int INDIAN_ERA_START;

  private static final int INDIAN_YEAR_START;

  private static final int[][] LIMITS;

  public com.ibm.icu.util.IndianCalendar();
    Code:
       0: aload_0
       1: invokestatic  #1                  // Method com/ibm/icu/util/TimeZone.getDefault:()Lcom/ibm/icu/util/TimeZone;
       4: getstatic     #2                  // Field com/ibm/icu/util/ULocale$Category.FORMAT:Lcom/ibm/icu/util/ULocale$Category;
       7: invokestatic  #3                  // Method com/ibm/icu/util/ULocale.getDefault:(Lcom/ibm/icu/util/ULocale$Category;)Lcom/ibm/icu/util/ULocale;
      10: invokespecial #4                  // Method "<init>":(Lcom/ibm/icu/util/TimeZone;Lcom/ibm/icu/util/ULocale;)V
      13: return

  public com.ibm.icu.util.IndianCalendar(com.ibm.icu.util.TimeZone);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #2                  // Field com/ibm/icu/util/ULocale$Category.FORMAT:Lcom/ibm/icu/util/ULocale$Category;
       5: invokestatic  #3                  // Method com/ibm/icu/util/ULocale.getDefault:(Lcom/ibm/icu/util/ULocale$Category;)Lcom/ibm/icu/util/ULocale;
       8: invokespecial #4                  // Method "<init>":(Lcom/ibm/icu/util/TimeZone;Lcom/ibm/icu/util/ULocale;)V
      11: return

  public com.ibm.icu.util.IndianCalendar(java.util.Locale);
    Code:
       0: aload_0
       1: invokestatic  #1                  // Method com/ibm/icu/util/TimeZone.getDefault:()Lcom/ibm/icu/util/TimeZone;
       4: aload_1
       5: invokespecial #5                  // Method "<init>":(Lcom/ibm/icu/util/TimeZone;Ljava/util/Locale;)V
       8: return

  public com.ibm.icu.util.IndianCalendar(com.ibm.icu.util.ULocale);
    Code:
       0: aload_0
       1: invokestatic  #1                  // Method com/ibm/icu/util/TimeZone.getDefault:()Lcom/ibm/icu/util/TimeZone;
       4: aload_1
       5: invokespecial #4                  // Method "<init>":(Lcom/ibm/icu/util/TimeZone;Lcom/ibm/icu/util/ULocale;)V
       8: return

  public com.ibm.icu.util.IndianCalendar(com.ibm.icu.util.TimeZone, java.util.Locale);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #6                  // Method com/ibm/icu/util/Calendar."<init>":(Lcom/ibm/icu/util/TimeZone;Ljava/util/Locale;)V
       6: aload_0
       7: invokestatic  #7                  // Method java/lang/System.currentTimeMillis:()J
      10: invokevirtual #8                  // Method setTimeInMillis:(J)V
      13: return

  public com.ibm.icu.util.IndianCalendar(com.ibm.icu.util.TimeZone, com.ibm.icu.util.ULocale);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #9                  // Method com/ibm/icu/util/Calendar."<init>":(Lcom/ibm/icu/util/TimeZone;Lcom/ibm/icu/util/ULocale;)V
       6: aload_0
       7: invokestatic  #7                  // Method java/lang/System.currentTimeMillis:()J
      10: invokevirtual #8                  // Method setTimeInMillis:(J)V
      13: return

  public com.ibm.icu.util.IndianCalendar(java.util.Date);
    Code:
       0: aload_0
       1: invokestatic  #1                  // Method com/ibm/icu/util/TimeZone.getDefault:()Lcom/ibm/icu/util/TimeZone;
       4: getstatic     #2                  // Field com/ibm/icu/util/ULocale$Category.FORMAT:Lcom/ibm/icu/util/ULocale$Category;
       7: invokestatic  #3                  // Method com/ibm/icu/util/ULocale.getDefault:(Lcom/ibm/icu/util/ULocale$Category;)Lcom/ibm/icu/util/ULocale;
      10: invokespecial #9                  // Method com/ibm/icu/util/Calendar."<init>":(Lcom/ibm/icu/util/TimeZone;Lcom/ibm/icu/util/ULocale;)V
      13: aload_0
      14: aload_1
      15: invokevirtual #10                 // Method setTime:(Ljava/util/Date;)V
      18: return

  public com.ibm.icu.util.IndianCalendar(int, int, int);
    Code:
       0: aload_0
       1: invokestatic  #1                  // Method com/ibm/icu/util/TimeZone.getDefault:()Lcom/ibm/icu/util/TimeZone;
       4: getstatic     #2                  // Field com/ibm/icu/util/ULocale$Category.FORMAT:Lcom/ibm/icu/util/ULocale$Category;
       7: invokestatic  #3                  // Method com/ibm/icu/util/ULocale.getDefault:(Lcom/ibm/icu/util/ULocale$Category;)Lcom/ibm/icu/util/ULocale;
      10: invokespecial #9                  // Method com/ibm/icu/util/Calendar."<init>":(Lcom/ibm/icu/util/TimeZone;Lcom/ibm/icu/util/ULocale;)V
      13: aload_0
      14: iconst_1
      15: iload_1
      16: invokevirtual #12                 // Method set:(II)V
      19: aload_0
      20: iconst_2
      21: iload_2
      22: invokevirtual #12                 // Method set:(II)V
      25: aload_0
      26: iconst_5
      27: iload_3
      28: invokevirtual #12                 // Method set:(II)V
      31: return

  public com.ibm.icu.util.IndianCalendar(int, int, int, int, int, int);
    Code:
       0: aload_0
       1: invokestatic  #1                  // Method com/ibm/icu/util/TimeZone.getDefault:()Lcom/ibm/icu/util/TimeZone;
       4: getstatic     #2                  // Field com/ibm/icu/util/ULocale$Category.FORMAT:Lcom/ibm/icu/util/ULocale$Category;
       7: invokestatic  #3                  // Method com/ibm/icu/util/ULocale.getDefault:(Lcom/ibm/icu/util/ULocale$Category;)Lcom/ibm/icu/util/ULocale;
      10: invokespecial #9                  // Method com/ibm/icu/util/Calendar."<init>":(Lcom/ibm/icu/util/TimeZone;Lcom/ibm/icu/util/ULocale;)V
      13: aload_0
      14: iconst_1
      15: iload_1
      16: invokevirtual #12                 // Method set:(II)V
      19: aload_0
      20: iconst_2
      21: iload_2
      22: invokevirtual #12                 // Method set:(II)V
      25: aload_0
      26: iconst_5
      27: iload_3
      28: invokevirtual #12                 // Method set:(II)V
      31: aload_0
      32: bipush        11
      34: iload         4
      36: invokevirtual #12                 // Method set:(II)V
      39: aload_0
      40: bipush        12
      42: iload         5
      44: invokevirtual #12                 // Method set:(II)V
      47: aload_0
      48: bipush        13
      50: iload         6
      52: invokevirtual #12                 // Method set:(II)V
      55: return

  protected int handleGetExtendedYear();
    Code:
       0: aload_0
       1: bipush        19
       3: iconst_1
       4: invokevirtual #13                 // Method newerField:(II)I
       7: bipush        19
       9: if_icmpne     23
      12: aload_0
      13: bipush        19
      15: iconst_1
      16: invokevirtual #14                 // Method internalGet:(II)I
      19: istore_1
      20: goto          30
      23: aload_0
      24: iconst_1
      25: iconst_1
      26: invokevirtual #14                 // Method internalGet:(II)I
      29: istore_1
      30: iload_1
      31: ireturn

  protected int handleGetYearLength(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #15                 // Method com/ibm/icu/util/Calendar.handleGetYearLength:(I)I
       5: ireturn

  protected int handleGetMonthLength(int, int);
    Code:
       0: iload_2
       1: iflt          10
       4: iload_2
       5: bipush        11
       7: if_icmple     28
      10: iconst_1
      11: newarray       int
      13: astore_3
      14: iload_1
      15: iload_2
      16: bipush        12
      18: aload_3
      19: invokestatic  #16                 // Method floorDivide:(II[I)I
      22: iadd
      23: istore_1
      24: aload_3
      25: iconst_0
      26: iaload
      27: istore_2
      28: iload_1
      29: bipush        78
      31: iadd
      32: invokestatic  #18                 // Method isGregorianLeap:(I)Z
      35: ifeq          45
      38: iload_2
      39: ifne          45
      42: bipush        31
      44: ireturn
      45: iload_2
      46: iconst_1
      47: if_icmplt     58
      50: iload_2
      51: iconst_5
      52: if_icmpgt     58
      55: bipush        31
      57: ireturn
      58: bipush        30
      60: ireturn

  protected void handleComputeFields(int);
    Code:
       0: iload_1
       1: i2d
       2: invokestatic  #19                 // Method jdToGregorian:(D)[I
       5: astore        10
       7: aload         10
       9: iconst_0
      10: iaload
      11: bipush        78
      13: isub
      14: istore        5
      16: aload         10
      18: iconst_0
      19: iaload
      20: iconst_1
      21: iconst_1
      22: invokestatic  #20                 // Method gregorianToJD:(III)D
      25: dstore_2
      26: iload_1
      27: i2d
      28: dload_2
      29: dsub
      30: d2i
      31: istore        6
      33: iload         6
      35: bipush        80
      37: if_icmpge     84
      40: iinc          5, -1
      43: aload         10
      45: iconst_0
      46: iaload
      47: iconst_1
      48: isub
      49: invokestatic  #18                 // Method isGregorianLeap:(I)Z
      52: ifeq          60
      55: bipush        31
      57: goto          62
      60: bipush        30
      62: istore        4
      64: iload         6
      66: iload         4
      68: sipush        155
      71: iadd
      72: bipush        90
      74: iadd
      75: bipush        10
      77: iadd
      78: iadd
      79: istore        6
      81: goto          106
      84: aload         10
      86: iconst_0
      87: iaload
      88: invokestatic  #18                 // Method isGregorianLeap:(I)Z
      91: ifeq          99
      94: bipush        31
      96: goto          101
      99: bipush        30
     101: istore        4
     103: iinc          6, -80
     106: iload         6
     108: iload         4
     110: if_icmpge     125
     113: iconst_0
     114: istore        7
     116: iload         6
     118: iconst_1
     119: iadd
     120: istore        8
     122: goto          186
     125: iload         6
     127: iload         4
     129: isub
     130: istore        9
     132: iload         9
     134: sipush        155
     137: if_icmpge     161
     140: iload         9
     142: bipush        31
     144: idiv
     145: iconst_1
     146: iadd
     147: istore        7
     149: iload         9
     151: bipush        31
     153: irem
     154: iconst_1
     155: iadd
     156: istore        8
     158: goto          186
     161: iinc_w        9, -155
     167: iload         9
     169: bipush        30
     171: idiv
     172: bipush        6
     174: iadd
     175: istore        7
     177: iload         9
     179: bipush        30
     181: irem
     182: iconst_1
     183: iadd
     184: istore        8
     186: aload_0
     187: iconst_0
     188: iconst_0
     189: invokevirtual #21                 // Method internalSet:(II)V
     192: aload_0
     193: bipush        19
     195: iload         5
     197: invokevirtual #21                 // Method internalSet:(II)V
     200: aload_0
     201: iconst_1
     202: iload         5
     204: invokevirtual #21                 // Method internalSet:(II)V
     207: aload_0
     208: iconst_2
     209: iload         7
     211: invokevirtual #21                 // Method internalSet:(II)V
     214: aload_0
     215: iconst_5
     216: iload         8
     218: invokevirtual #21                 // Method internalSet:(II)V
     221: aload_0
     222: bipush        6
     224: iload         6
     226: iconst_1
     227: iadd
     228: invokevirtual #21                 // Method internalSet:(II)V
     231: return

  protected int handleGetLimit(int, int);
    Code:
       0: getstatic     #22                 // Field LIMITS:[[I
       3: iload_1
       4: aaload
       5: iload_2
       6: iaload
       7: ireturn

  protected int handleComputeMonthStart(int, int, boolean);
    Code:
       0: iload_2
       1: iflt          10
       4: iload_2
       5: bipush        11
       7: if_icmple     22
      10: iload_1
      11: iload_2
      12: bipush        12
      14: idiv
      15: iadd
      16: istore_1
      17: iload_2
      18: bipush        12
      20: irem
      21: istore_2
      22: iload_2
      23: iconst_1
      24: iadd
      25: istore        4
      27: iload_1
      28: iload         4
      30: iconst_1
      31: invokestatic  #23                 // Method IndianToJD:(III)D
      34: dstore        5
      36: dload         5
      38: d2i
      39: ireturn

  private static double IndianToJD(int, int, int);
    Code:
       0: iload_0
       1: bipush        78
       3: iadd
       4: istore        4
       6: iload         4
       8: invokestatic  #18                 // Method isGregorianLeap:(I)Z
      11: ifeq          30
      14: bipush        31
      16: istore_3
      17: iload         4
      19: iconst_3
      20: bipush        21
      22: invokestatic  #20                 // Method gregorianToJD:(III)D
      25: dstore        6
      27: goto          43
      30: bipush        30
      32: istore_3
      33: iload         4
      35: iconst_3
      36: bipush        22
      38: invokestatic  #20                 // Method gregorianToJD:(III)D
      41: dstore        6
      43: iload_1
      44: iconst_1
      45: if_icmpne     60
      48: dload         6
      50: iload_2
      51: iconst_1
      52: isub
      53: i2d
      54: dadd
      55: dstore        8
      57: goto          123
      60: dload         6
      62: iload_3
      63: i2d
      64: dadd
      65: dstore        8
      67: iload_1
      68: iconst_2
      69: isub
      70: istore        5
      72: iload         5
      74: iconst_5
      75: invokestatic  #24                 // Method java/lang/Math.min:(II)I
      78: istore        5
      80: dload         8
      82: iload         5
      84: bipush        31
      86: imul
      87: i2d
      88: dadd
      89: dstore        8
      91: iload_1
      92: bipush        8
      94: if_icmplt     114
      97: iload_1
      98: bipush        7
     100: isub
     101: istore        5
     103: dload         8
     105: iload         5
     107: bipush        30
     109: imul
     110: i2d
     111: dadd
     112: dstore        8
     114: dload         8
     116: iload_2
     117: iconst_1
     118: isub
     119: i2d
     120: dadd
     121: dstore        8
     123: dload         8
     125: dreturn

  private static double gregorianToJD(int, int, int);
    Code:
       0: ldc2_w        #25                 // double 1721425.5d
       3: dstore_3
       4: iload_0
       5: iconst_1
       6: isub
       7: istore        5
       9: sipush        365
      12: iload         5
      14: imul
      15: iload         5
      17: iconst_4
      18: idiv
      19: iadd
      20: iload         5
      22: bipush        100
      24: idiv
      25: isub
      26: iload         5
      28: sipush        400
      31: idiv
      32: iadd
      33: sipush        367
      36: iload_1
      37: imul
      38: sipush        362
      41: isub
      42: bipush        12
      44: idiv
      45: iadd
      46: iload_1
      47: iconst_2
      48: if_icmpgt     55
      51: iconst_0
      52: goto          68
      55: iload_0
      56: invokestatic  #18                 // Method isGregorianLeap:(I)Z
      59: ifeq          66
      62: iconst_m1
      63: goto          68
      66: bipush        -2
      68: iadd
      69: iload_2
      70: iadd
      71: istore        6
      73: iload         6
      75: iconst_1
      76: isub
      77: i2d
      78: dload_3
      79: dadd
      80: dreturn

  private static int[] jdToGregorian(double);
    Code:
       0: ldc2_w        #25                 // double 1721425.5d
       3: dstore_2
       4: dload_0
       5: ldc2_w        #27                 // double 0.5d
       8: dsub
       9: invokestatic  #29                 // Method java/lang/Math.floor:(D)D
      12: ldc2_w        #27                 // double 0.5d
      15: dadd
      16: dstore        4
      18: dload         4
      20: dload_2
      21: dsub
      22: dstore        6
      24: dload         6
      26: ldc2_w        #30                 // double 146097.0d
      29: ddiv
      30: invokestatic  #29                 // Method java/lang/Math.floor:(D)D
      33: dstore        8
      35: dload         6
      37: ldc2_w        #30                 // double 146097.0d
      40: drem
      41: dstore        10
      43: dload         10
      45: ldc2_w        #32                 // double 36524.0d
      48: ddiv
      49: invokestatic  #29                 // Method java/lang/Math.floor:(D)D
      52: dstore        12
      54: dload         10
      56: ldc2_w        #32                 // double 36524.0d
      59: drem
      60: dstore        14
      62: dload         14
      64: ldc2_w        #34                 // double 1461.0d
      67: ddiv
      68: invokestatic  #29                 // Method java/lang/Math.floor:(D)D
      71: dstore        16
      73: dload         14
      75: ldc2_w        #34                 // double 1461.0d
      78: drem
      79: dstore        18
      81: dload         18
      83: ldc2_w        #36                 // double 365.0d
      86: ddiv
      87: invokestatic  #29                 // Method java/lang/Math.floor:(D)D
      90: dstore        20
      92: dload         8
      94: ldc2_w        #38                 // double 400.0d
      97: dmul
      98: dload         12
     100: ldc2_w        #40                 // double 100.0d
     103: dmul
     104: dadd
     105: dload         16
     107: ldc2_w        #42                 // double 4.0d
     110: dmul
     111: dadd
     112: dload         20
     114: dadd
     115: d2i
     116: istore        26
     118: dload         12
     120: ldc2_w        #42                 // double 4.0d
     123: dcmpl
     124: ifeq          139
     127: dload         20
     129: ldc2_w        #42                 // double 4.0d
     132: dcmpl
     133: ifeq          139
     136: iinc          26, 1
     139: dload         4
     141: iload         26
     143: iconst_1
     144: iconst_1
     145: invokestatic  #20                 // Method gregorianToJD:(III)D
     148: dsub
     149: dstore        22
     151: dload         4
     153: iload         26
     155: iconst_3
     156: iconst_1
     157: invokestatic  #20                 // Method gregorianToJD:(III)D
     160: dcmpg
     161: ifge          168
     164: iconst_0
     165: goto          181
     168: iload         26
     170: invokestatic  #18                 // Method isGregorianLeap:(I)Z
     173: ifeq          180
     176: iconst_1
     177: goto          181
     180: iconst_2
     181: i2d
     182: dstore        24
     184: dload         22
     186: dload         24
     188: dadd
     189: ldc2_w        #44                 // double 12.0d
     192: dmul
     193: ldc2_w        #46                 // double 373.0d
     196: dadd
     197: ldc2_w        #48                 // double 367.0d
     200: ddiv
     201: invokestatic  #29                 // Method java/lang/Math.floor:(D)D
     204: d2i
     205: istore        27
     207: dload         4
     209: iload         26
     211: iload         27
     213: iconst_1
     214: invokestatic  #20                 // Method gregorianToJD:(III)D
     217: dsub
     218: d2i
     219: iconst_1
     220: iadd
     221: istore        28
     223: iconst_3
     224: newarray       int
     226: astore        29
     228: aload         29
     230: iconst_0
     231: iload         26
     233: iastore
     234: aload         29
     236: iconst_1
     237: iload         27
     239: iastore
     240: aload         29
     242: iconst_2
     243: iload         28
     245: iastore
     246: aload         29
     248: areturn

  private static boolean isGregorianLeap(int);
    Code:
       0: iload_0
       1: iconst_4
       2: irem
       3: ifne          25
       6: iload_0
       7: bipush        100
       9: irem
      10: ifne          21
      13: iload_0
      14: sipush        400
      17: irem
      18: ifne          25
      21: iconst_1
      22: goto          26
      25: iconst_0
      26: ireturn

  public java.lang.String getType();
    Code:
       0: ldc           #50                 // String indian
       2: areturn

  static {};
    Code:
       0: bipush        22
       2: anewarray     #51                 // class "[I"
       5: dup
       6: iconst_0
       7: iconst_4
       8: newarray       int
      10: dup
      11: iconst_0
      12: iconst_0
      13: iastore
      14: dup
      15: iconst_1
      16: iconst_0
      17: iastore
      18: dup
      19: iconst_2
      20: iconst_0
      21: iastore
      22: dup
      23: iconst_3
      24: iconst_0
      25: iastore
      26: aastore
      27: dup
      28: iconst_1
      29: iconst_4
      30: newarray       int
      32: dup
      33: iconst_0
      34: ldc           #52                 // int -5000000
      36: iastore
      37: dup
      38: iconst_1
      39: ldc           #52                 // int -5000000
      41: iastore
      42: dup
      43: iconst_2
      44: ldc           #53                 // int 5000000
      46: iastore
      47: dup
      48: iconst_3
      49: ldc           #53                 // int 5000000
      51: iastore
      52: aastore
      53: dup
      54: iconst_2
      55: iconst_4
      56: newarray       int
      58: dup
      59: iconst_0
      60: iconst_0
      61: iastore
      62: dup
      63: iconst_1
      64: iconst_0
      65: iastore
      66: dup
      67: iconst_2
      68: bipush        11
      70: iastore
      71: dup
      72: iconst_3
      73: bipush        11
      75: iastore
      76: aastore
      77: dup
      78: iconst_3
      79: iconst_4
      80: newarray       int
      82: dup
      83: iconst_0
      84: iconst_1
      85: iastore
      86: dup
      87: iconst_1
      88: iconst_1
      89: iastore
      90: dup
      91: iconst_2
      92: bipush        52
      94: iastore
      95: dup
      96: iconst_3
      97: bipush        53
      99: iastore
     100: aastore
     101: dup
     102: iconst_4
     103: iconst_0
     104: newarray       int
     106: aastore
     107: dup
     108: iconst_5
     109: iconst_4
     110: newarray       int
     112: dup
     113: iconst_0
     114: iconst_1
     115: iastore
     116: dup
     117: iconst_1
     118: iconst_1
     119: iastore
     120: dup
     121: iconst_2
     122: bipush        30
     124: iastore
     125: dup
     126: iconst_3
     127: bipush        31
     129: iastore
     130: aastore
     131: dup
     132: bipush        6
     134: iconst_4
     135: newarray       int
     137: dup
     138: iconst_0
     139: iconst_1
     140: iastore
     141: dup
     142: iconst_1
     143: iconst_1
     144: iastore
     145: dup
     146: iconst_2
     147: sipush        365
     150: iastore
     151: dup
     152: iconst_3
     153: sipush        366
     156: iastore
     157: aastore
     158: dup
     159: bipush        7
     161: iconst_0
     162: newarray       int
     164: aastore
     165: dup
     166: bipush        8
     168: iconst_4
     169: newarray       int
     171: dup
     172: iconst_0
     173: iconst_m1
     174: iastore
     175: dup
     176: iconst_1
     177: iconst_m1
     178: iastore
     179: dup
     180: iconst_2
     181: iconst_5
     182: iastore
     183: dup
     184: iconst_3
     185: iconst_5
     186: iastore
     187: aastore
     188: dup
     189: bipush        9
     191: iconst_0
     192: newarray       int
     194: aastore
     195: dup
     196: bipush        10
     198: iconst_0
     199: newarray       int
     201: aastore
     202: dup
     203: bipush        11
     205: iconst_0
     206: newarray       int
     208: aastore
     209: dup
     210: bipush        12
     212: iconst_0
     213: newarray       int
     215: aastore
     216: dup
     217: bipush        13
     219: iconst_0
     220: newarray       int
     222: aastore
     223: dup
     224: bipush        14
     226: iconst_0
     227: newarray       int
     229: aastore
     230: dup
     231: bipush        15
     233: iconst_0
     234: newarray       int
     236: aastore
     237: dup
     238: bipush        16
     240: iconst_0
     241: newarray       int
     243: aastore
     244: dup
     245: bipush        17
     247: iconst_4
     248: newarray       int
     250: dup
     251: iconst_0
     252: ldc           #52                 // int -5000000
     254: iastore
     255: dup
     256: iconst_1
     257: ldc           #52                 // int -5000000
     259: iastore
     260: dup
     261: iconst_2
     262: ldc           #53                 // int 5000000
     264: iastore
     265: dup
     266: iconst_3
     267: ldc           #53                 // int 5000000
     269: iastore
     270: aastore
     271: dup
     272: bipush        18
     274: iconst_0
     275: newarray       int
     277: aastore
     278: dup
     279: bipush        19
     281: iconst_4
     282: newarray       int
     284: dup
     285: iconst_0
     286: ldc           #52                 // int -5000000
     288: iastore
     289: dup
     290: iconst_1
     291: ldc           #52                 // int -5000000
     293: iastore
     294: dup
     295: iconst_2
     296: ldc           #53                 // int 5000000
     298: iastore
     299: dup
     300: iconst_3
     301: ldc           #53                 // int 5000000
     303: iastore
     304: aastore
     305: dup
     306: bipush        20
     308: iconst_0
     309: newarray       int
     311: aastore
     312: dup
     313: bipush        21
     315: iconst_0
     316: newarray       int
     318: aastore
     319: putstatic     #22                 // Field LIMITS:[[I
     322: return
}
