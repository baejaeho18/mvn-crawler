Compiled from "GregorianCalendar.java"
public class com.ibm.icu.util.GregorianCalendar extends com.ibm.icu.util.Calendar {
  private static final long serialVersionUID;

  public static final int BC;

  public static final int AD;

  private static final int EPOCH_YEAR;

  private static final int[][] MONTH_COUNT;

  private static final int[][] LIMITS;

  private long gregorianCutover;

  private transient int cutoverJulianDay;

  private transient int gregorianCutoverYear;

  protected transient boolean isGregorian;

  protected transient boolean invertGregorian;

  protected int handleGetLimit(int, int);
    Code:
       0: getstatic     #1                  // Field LIMITS:[[I
       3: iload_1
       4: aaload
       5: iload_2
       6: iaload
       7: ireturn

  public com.ibm.icu.util.GregorianCalendar();
    Code:
       0: aload_0
       1: invokestatic  #2                  // Method com/ibm/icu/util/TimeZone.getDefault:()Lcom/ibm/icu/util/TimeZone;
       4: getstatic     #3                  // Field com/ibm/icu/util/ULocale$Category.FORMAT:Lcom/ibm/icu/util/ULocale$Category;
       7: invokestatic  #4                  // Method com/ibm/icu/util/ULocale.getDefault:(Lcom/ibm/icu/util/ULocale$Category;)Lcom/ibm/icu/util/ULocale;
      10: invokespecial #5                  // Method "<init>":(Lcom/ibm/icu/util/TimeZone;Lcom/ibm/icu/util/ULocale;)V
      13: return

  public com.ibm.icu.util.GregorianCalendar(com.ibm.icu.util.TimeZone);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #3                  // Field com/ibm/icu/util/ULocale$Category.FORMAT:Lcom/ibm/icu/util/ULocale$Category;
       5: invokestatic  #4                  // Method com/ibm/icu/util/ULocale.getDefault:(Lcom/ibm/icu/util/ULocale$Category;)Lcom/ibm/icu/util/ULocale;
       8: invokespecial #5                  // Method "<init>":(Lcom/ibm/icu/util/TimeZone;Lcom/ibm/icu/util/ULocale;)V
      11: return

  public com.ibm.icu.util.GregorianCalendar(java.util.Locale);
    Code:
       0: aload_0
       1: invokestatic  #2                  // Method com/ibm/icu/util/TimeZone.getDefault:()Lcom/ibm/icu/util/TimeZone;
       4: aload_1
       5: invokespecial #6                  // Method "<init>":(Lcom/ibm/icu/util/TimeZone;Ljava/util/Locale;)V
       8: return

  public com.ibm.icu.util.GregorianCalendar(com.ibm.icu.util.ULocale);
    Code:
       0: aload_0
       1: invokestatic  #2                  // Method com/ibm/icu/util/TimeZone.getDefault:()Lcom/ibm/icu/util/TimeZone;
       4: aload_1
       5: invokespecial #5                  // Method "<init>":(Lcom/ibm/icu/util/TimeZone;Lcom/ibm/icu/util/ULocale;)V
       8: return

  public com.ibm.icu.util.GregorianCalendar(com.ibm.icu.util.TimeZone, java.util.Locale);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #7                  // Method com/ibm/icu/util/Calendar."<init>":(Lcom/ibm/icu/util/TimeZone;Ljava/util/Locale;)V
       6: aload_0
       7: ldc2_w        #8                  // long -12219292800000l
      10: putfield      #10                 // Field gregorianCutover:J
      13: aload_0
      14: ldc           #11                 // int 2299161
      16: putfield      #12                 // Field cutoverJulianDay:I
      19: aload_0
      20: sipush        1582
      23: putfield      #13                 // Field gregorianCutoverYear:I
      26: aload_0
      27: invokestatic  #14                 // Method java/lang/System.currentTimeMillis:()J
      30: invokevirtual #15                 // Method setTimeInMillis:(J)V
      33: return

  public com.ibm.icu.util.GregorianCalendar(com.ibm.icu.util.TimeZone, com.ibm.icu.util.ULocale);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #16                 // Method com/ibm/icu/util/Calendar."<init>":(Lcom/ibm/icu/util/TimeZone;Lcom/ibm/icu/util/ULocale;)V
       6: aload_0
       7: ldc2_w        #8                  // long -12219292800000l
      10: putfield      #10                 // Field gregorianCutover:J
      13: aload_0
      14: ldc           #11                 // int 2299161
      16: putfield      #12                 // Field cutoverJulianDay:I
      19: aload_0
      20: sipush        1582
      23: putfield      #13                 // Field gregorianCutoverYear:I
      26: aload_0
      27: invokestatic  #14                 // Method java/lang/System.currentTimeMillis:()J
      30: invokevirtual #15                 // Method setTimeInMillis:(J)V
      33: return

  public com.ibm.icu.util.GregorianCalendar(int, int, int);
    Code:
       0: aload_0
       1: invokestatic  #2                  // Method com/ibm/icu/util/TimeZone.getDefault:()Lcom/ibm/icu/util/TimeZone;
       4: getstatic     #3                  // Field com/ibm/icu/util/ULocale$Category.FORMAT:Lcom/ibm/icu/util/ULocale$Category;
       7: invokestatic  #4                  // Method com/ibm/icu/util/ULocale.getDefault:(Lcom/ibm/icu/util/ULocale$Category;)Lcom/ibm/icu/util/ULocale;
      10: invokespecial #16                 // Method com/ibm/icu/util/Calendar."<init>":(Lcom/ibm/icu/util/TimeZone;Lcom/ibm/icu/util/ULocale;)V
      13: aload_0
      14: ldc2_w        #8                  // long -12219292800000l
      17: putfield      #10                 // Field gregorianCutover:J
      20: aload_0
      21: ldc           #11                 // int 2299161
      23: putfield      #12                 // Field cutoverJulianDay:I
      26: aload_0
      27: sipush        1582
      30: putfield      #13                 // Field gregorianCutoverYear:I
      33: aload_0
      34: iconst_0
      35: iconst_1
      36: invokevirtual #19                 // Method set:(II)V
      39: aload_0
      40: iconst_1
      41: iload_1
      42: invokevirtual #19                 // Method set:(II)V
      45: aload_0
      46: iconst_2
      47: iload_2
      48: invokevirtual #19                 // Method set:(II)V
      51: aload_0
      52: iconst_5
      53: iload_3
      54: invokevirtual #19                 // Method set:(II)V
      57: return

  public com.ibm.icu.util.GregorianCalendar(int, int, int, int, int);
    Code:
       0: aload_0
       1: invokestatic  #2                  // Method com/ibm/icu/util/TimeZone.getDefault:()Lcom/ibm/icu/util/TimeZone;
       4: getstatic     #3                  // Field com/ibm/icu/util/ULocale$Category.FORMAT:Lcom/ibm/icu/util/ULocale$Category;
       7: invokestatic  #4                  // Method com/ibm/icu/util/ULocale.getDefault:(Lcom/ibm/icu/util/ULocale$Category;)Lcom/ibm/icu/util/ULocale;
      10: invokespecial #16                 // Method com/ibm/icu/util/Calendar."<init>":(Lcom/ibm/icu/util/TimeZone;Lcom/ibm/icu/util/ULocale;)V
      13: aload_0
      14: ldc2_w        #8                  // long -12219292800000l
      17: putfield      #10                 // Field gregorianCutover:J
      20: aload_0
      21: ldc           #11                 // int 2299161
      23: putfield      #12                 // Field cutoverJulianDay:I
      26: aload_0
      27: sipush        1582
      30: putfield      #13                 // Field gregorianCutoverYear:I
      33: aload_0
      34: iconst_0
      35: iconst_1
      36: invokevirtual #19                 // Method set:(II)V
      39: aload_0
      40: iconst_1
      41: iload_1
      42: invokevirtual #19                 // Method set:(II)V
      45: aload_0
      46: iconst_2
      47: iload_2
      48: invokevirtual #19                 // Method set:(II)V
      51: aload_0
      52: iconst_5
      53: iload_3
      54: invokevirtual #19                 // Method set:(II)V
      57: aload_0
      58: bipush        11
      60: iload         4
      62: invokevirtual #19                 // Method set:(II)V
      65: aload_0
      66: bipush        12
      68: iload         5
      70: invokevirtual #19                 // Method set:(II)V
      73: return

  public com.ibm.icu.util.GregorianCalendar(int, int, int, int, int, int);
    Code:
       0: aload_0
       1: invokestatic  #2                  // Method com/ibm/icu/util/TimeZone.getDefault:()Lcom/ibm/icu/util/TimeZone;
       4: getstatic     #3                  // Field com/ibm/icu/util/ULocale$Category.FORMAT:Lcom/ibm/icu/util/ULocale$Category;
       7: invokestatic  #4                  // Method com/ibm/icu/util/ULocale.getDefault:(Lcom/ibm/icu/util/ULocale$Category;)Lcom/ibm/icu/util/ULocale;
      10: invokespecial #16                 // Method com/ibm/icu/util/Calendar."<init>":(Lcom/ibm/icu/util/TimeZone;Lcom/ibm/icu/util/ULocale;)V
      13: aload_0
      14: ldc2_w        #8                  // long -12219292800000l
      17: putfield      #10                 // Field gregorianCutover:J
      20: aload_0
      21: ldc           #11                 // int 2299161
      23: putfield      #12                 // Field cutoverJulianDay:I
      26: aload_0
      27: sipush        1582
      30: putfield      #13                 // Field gregorianCutoverYear:I
      33: aload_0
      34: iconst_0
      35: iconst_1
      36: invokevirtual #19                 // Method set:(II)V
      39: aload_0
      40: iconst_1
      41: iload_1
      42: invokevirtual #19                 // Method set:(II)V
      45: aload_0
      46: iconst_2
      47: iload_2
      48: invokevirtual #19                 // Method set:(II)V
      51: aload_0
      52: iconst_5
      53: iload_3
      54: invokevirtual #19                 // Method set:(II)V
      57: aload_0
      58: bipush        11
      60: iload         4
      62: invokevirtual #19                 // Method set:(II)V
      65: aload_0
      66: bipush        12
      68: iload         5
      70: invokevirtual #19                 // Method set:(II)V
      73: aload_0
      74: bipush        13
      76: iload         6
      78: invokevirtual #19                 // Method set:(II)V
      81: return

  public void setGregorianChange(java.util.Date);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #20                 // Method java/util/Date.getTime:()J
       5: putfield      #10                 // Field gregorianCutover:J
       8: aload_0
       9: getfield      #10                 // Field gregorianCutover:J
      12: ldc2_w        #21                 // long -184303902528000000l
      15: lcmp
      16: ifgt          33
      19: aload_0
      20: aload_0
      21: ldc           #24                 // int -2147483648
      23: dup_x1
      24: putfield      #12                 // Field cutoverJulianDay:I
      27: putfield      #13                 // Field gregorianCutoverYear:I
      30: goto          100
      33: aload_0
      34: getfield      #10                 // Field gregorianCutover:J
      37: ldc2_w        #25                 // long 183882168921600000l
      40: lcmp
      41: iflt          58
      44: aload_0
      45: aload_0
      46: ldc           #27                 // int 2147483647
      48: dup_x1
      49: putfield      #12                 // Field cutoverJulianDay:I
      52: putfield      #13                 // Field gregorianCutoverYear:I
      55: goto          100
      58: aload_0
      59: aload_0
      60: getfield      #10                 // Field gregorianCutover:J
      63: ldc2_w        #28                 // long 86400000l
      66: invokestatic  #30                 // Method floorDivide:(JJ)J
      69: l2i
      70: putfield      #12                 // Field cutoverJulianDay:I
      73: new           #18                 // class com/ibm/icu/util/GregorianCalendar
      76: dup
      77: aload_0
      78: invokevirtual #31                 // Method getTimeZone:()Lcom/ibm/icu/util/TimeZone;
      81: invokespecial #32                 // Method "<init>":(Lcom/ibm/icu/util/TimeZone;)V
      84: astore_2
      85: aload_2
      86: aload_1
      87: invokevirtual #33                 // Method setTime:(Ljava/util/Date;)V
      90: aload_0
      91: aload_2
      92: bipush        19
      94: invokevirtual #34                 // Method get:(I)I
      97: putfield      #13                 // Field gregorianCutoverYear:I
     100: return

  public final java.util.Date getGregorianChange();
    Code:
       0: new           #35                 // class java/util/Date
       3: dup
       4: aload_0
       5: getfield      #10                 // Field gregorianCutover:J
       8: invokespecial #36                 // Method java/util/Date."<init>":(J)V
      11: areturn

  public boolean isLeapYear(int);
    Code:
       0: iload_1
       1: aload_0
       2: getfield      #13                 // Field gregorianCutoverYear:I
       5: if_icmplt     37
       8: iload_1
       9: iconst_4
      10: irem
      11: ifne          33
      14: iload_1
      15: bipush        100
      17: irem
      18: ifne          29
      21: iload_1
      22: sipush        400
      25: irem
      26: ifne          33
      29: iconst_1
      30: goto          48
      33: iconst_0
      34: goto          48
      37: iload_1
      38: iconst_4
      39: irem
      40: ifne          47
      43: iconst_1
      44: goto          48
      47: iconst_0
      48: ireturn

  public boolean isEquivalentTo(com.ibm.icu.util.Calendar);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #37                 // Method com/ibm/icu/util/Calendar.isEquivalentTo:(Lcom/ibm/icu/util/Calendar;)Z
       5: ifeq          27
       8: aload_0
       9: getfield      #10                 // Field gregorianCutover:J
      12: aload_1
      13: checkcast     #18                 // class com/ibm/icu/util/GregorianCalendar
      16: getfield      #10                 // Field gregorianCutover:J
      19: lcmp
      20: ifne          27
      23: iconst_1
      24: goto          28
      27: iconst_0
      28: ireturn

  public int hashCode();
    Code:
       0: aload_0
       1: invokespecial #38                 // Method com/ibm/icu/util/Calendar.hashCode:()I
       4: aload_0
       5: getfield      #10                 // Field gregorianCutover:J
       8: l2i
       9: ixor
      10: ireturn

  public void roll(int, int);
    Code:
       0: iload_1
       1: lookupswitch  { // 1
                     3: 20
               default: 194
          }
      20: aload_0
      21: iconst_3
      22: invokevirtual #34                 // Method get:(I)I
      25: istore_3
      26: aload_0
      27: bipush        17
      29: invokevirtual #34                 // Method get:(I)I
      32: istore        4
      34: aload_0
      35: bipush        6
      37: invokevirtual #39                 // Method internalGet:(I)I
      40: istore        5
      42: aload_0
      43: iconst_2
      44: invokevirtual #39                 // Method internalGet:(I)I
      47: ifne          70
      50: iload_3
      51: bipush        52
      53: if_icmplt     88
      56: iload         5
      58: aload_0
      59: iload         4
      61: invokevirtual #40                 // Method handleGetYearLength:(I)I
      64: iadd
      65: istore        5
      67: goto          88
      70: iload_3
      71: iconst_1
      72: if_icmpne     88
      75: iload         5
      77: aload_0
      78: iload         4
      80: iconst_1
      81: isub
      82: invokevirtual #40                 // Method handleGetYearLength:(I)I
      85: isub
      86: istore        5
      88: iload_3
      89: iload_2
      90: iadd
      91: istore_3
      92: iload_3
      93: iconst_1
      94: if_icmplt     103
      97: iload_3
      98: bipush        52
     100: if_icmple     180
     103: aload_0
     104: iload         4
     106: invokevirtual #40                 // Method handleGetYearLength:(I)I
     109: istore        6
     111: iload         6
     113: iload         5
     115: isub
     116: aload_0
     117: bipush        7
     119: invokevirtual #39                 // Method internalGet:(I)I
     122: iadd
     123: aload_0
     124: invokevirtual #41                 // Method getFirstDayOfWeek:()I
     127: isub
     128: bipush        7
     130: irem
     131: istore        7
     133: iload         7
     135: ifge          141
     138: iinc          7, 7
     141: bipush        6
     143: iload         7
     145: isub
     146: aload_0
     147: invokevirtual #42                 // Method getMinimalDaysInFirstWeek:()I
     150: if_icmplt     156
     153: iinc          6, -7
     156: aload_0
     157: iload         6
     159: iload         7
     161: iconst_1
     162: iadd
     163: invokevirtual #43                 // Method weekNumber:(II)I
     166: istore        8
     168: iload_3
     169: iload         8
     171: iadd
     172: iconst_1
     173: isub
     174: iload         8
     176: irem
     177: iconst_1
     178: iadd
     179: istore_3
     180: aload_0
     181: iconst_3
     182: iload_3
     183: invokevirtual #19                 // Method set:(II)V
     186: aload_0
     187: iconst_1
     188: iload         4
     190: invokevirtual #19                 // Method set:(II)V
     193: return
     194: aload_0
     195: iload_1
     196: iload_2
     197: invokespecial #44                 // Method com/ibm/icu/util/Calendar.roll:(II)V
     200: return

  public int getActualMinimum(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #45                 // Method getMinimum:(I)I
       5: ireturn

  public int getActualMaximum(int);
    Code:
       0: iload_1
       1: lookupswitch  { // 1
                     1: 20
               default: 132
          }
      20: aload_0
      21: invokevirtual #46                 // Method clone:()Ljava/lang/Object;
      24: checkcast     #17                 // class com/ibm/icu/util/Calendar
      27: astore_2
      28: aload_2
      29: iconst_1
      30: invokevirtual #47                 // Method com/ibm/icu/util/Calendar.setLenient:(Z)V
      33: aload_2
      34: iconst_0
      35: invokevirtual #48                 // Method com/ibm/icu/util/Calendar.get:(I)I
      38: istore_3
      39: aload_2
      40: invokevirtual #49                 // Method com/ibm/icu/util/Calendar.getTime:()Ljava/util/Date;
      43: astore        4
      45: getstatic     #1                  // Field LIMITS:[[I
      48: iconst_1
      49: aaload
      50: iconst_1
      51: iaload
      52: istore        5
      54: getstatic     #1                  // Field LIMITS:[[I
      57: iconst_1
      58: aaload
      59: iconst_2
      60: iaload
      61: iconst_1
      62: iadd
      63: istore        6
      65: iload         5
      67: iconst_1
      68: iadd
      69: iload         6
      71: if_icmpge     129
      74: iload         5
      76: iload         6
      78: iadd
      79: iconst_2
      80: idiv
      81: istore        7
      83: aload_2
      84: iconst_1
      85: iload         7
      87: invokevirtual #50                 // Method com/ibm/icu/util/Calendar.set:(II)V
      90: aload_2
      91: iconst_1
      92: invokevirtual #48                 // Method com/ibm/icu/util/Calendar.get:(I)I
      95: iload         7
      97: if_icmpne     116
     100: aload_2
     101: iconst_0
     102: invokevirtual #48                 // Method com/ibm/icu/util/Calendar.get:(I)I
     105: iload_3
     106: if_icmpne     116
     109: iload         7
     111: istore        5
     113: goto          126
     116: iload         7
     118: istore        6
     120: aload_2
     121: aload         4
     123: invokevirtual #51                 // Method com/ibm/icu/util/Calendar.setTime:(Ljava/util/Date;)V
     126: goto          65
     129: iload         5
     131: ireturn
     132: aload_0
     133: iload_1
     134: invokespecial #52                 // Method com/ibm/icu/util/Calendar.getActualMaximum:(I)I
     137: ireturn

  boolean inDaylightTime();
    Code:
       0: aload_0
       1: invokevirtual #31                 // Method getTimeZone:()Lcom/ibm/icu/util/TimeZone;
       4: invokevirtual #53                 // Method com/ibm/icu/util/TimeZone.useDaylightTime:()Z
       7: ifne          12
      10: iconst_0
      11: ireturn
      12: aload_0
      13: invokevirtual #54                 // Method complete:()V
      16: aload_0
      17: bipush        16
      19: invokevirtual #39                 // Method internalGet:(I)I
      22: ifeq          29
      25: iconst_1
      26: goto          30
      29: iconst_0
      30: ireturn

  protected int handleGetMonthLength(int, int);
    Code:
       0: iload_2
       1: iflt          10
       4: iload_2
       5: bipush        11
       7: if_icmple     28
      10: iconst_1
      11: newarray       int
      13: astore_3
      14: iload_1
      15: iload_2
      16: bipush        12
      18: aload_3
      19: invokestatic  #55                 // Method floorDivide:(II[I)I
      22: iadd
      23: istore_1
      24: aload_3
      25: iconst_0
      26: iaload
      27: istore_2
      28: getstatic     #56                 // Field MONTH_COUNT:[[I
      31: iload_2
      32: aaload
      33: aload_0
      34: iload_1
      35: invokevirtual #57                 // Method isLeapYear:(I)Z
      38: ifeq          45
      41: iconst_1
      42: goto          46
      45: iconst_0
      46: iaload
      47: ireturn

  protected int handleGetYearLength(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #57                 // Method isLeapYear:(I)Z
       5: ifeq          14
       8: sipush        366
      11: goto          17
      14: sipush        365
      17: ireturn

  protected void handleComputeFields(int);
    Code:
       0: iload_1
       1: aload_0
       2: getfield      #12                 // Field cutoverJulianDay:I
       5: if_icmplt     33
       8: aload_0
       9: invokevirtual #58                 // Method getGregorianMonth:()I
      12: istore_3
      13: aload_0
      14: invokevirtual #59                 // Method getGregorianDayOfMonth:()I
      17: istore        4
      19: aload_0
      20: invokevirtual #60                 // Method getGregorianDayOfYear:()I
      23: istore        5
      25: aload_0
      26: invokevirtual #61                 // Method getGregorianYear:()I
      29: istore_2
      30: goto          178
      33: iload_1
      34: ldc           #62                 // int 1721424
      36: isub
      37: i2l
      38: lstore        6
      40: ldc2_w        #63                 // long 4l
      43: lload         6
      45: lmul
      46: ldc2_w        #65                 // long 1464l
      49: ladd
      50: ldc2_w        #67                 // long 1461l
      53: invokestatic  #30                 // Method floorDivide:(JJ)J
      56: l2i
      57: istore_2
      58: ldc2_w        #69                 // long 365l
      61: iload_2
      62: i2l
      63: lconst_1
      64: lsub
      65: lmul
      66: iload_2
      67: i2l
      68: lconst_1
      69: lsub
      70: ldc2_w        #63                 // long 4l
      73: invokestatic  #30                 // Method floorDivide:(JJ)J
      76: ladd
      77: lstore        8
      79: lload         6
      81: lload         8
      83: lsub
      84: l2i
      85: istore        5
      87: iload_2
      88: iconst_3
      89: iand
      90: ifne          97
      93: iconst_1
      94: goto          98
      97: iconst_0
      98: istore        10
     100: iconst_0
     101: istore        11
     103: iload         10
     105: ifeq          113
     108: bipush        60
     110: goto          115
     113: bipush        59
     115: istore        12
     117: iload         5
     119: iload         12
     121: if_icmplt     136
     124: iload         10
     126: ifeq          133
     129: iconst_1
     130: goto          134
     133: iconst_2
     134: istore        11
     136: bipush        12
     138: iload         5
     140: iload         11
     142: iadd
     143: imul
     144: bipush        6
     146: iadd
     147: sipush        367
     150: idiv
     151: istore_3
     152: iload         5
     154: getstatic     #56                 // Field MONTH_COUNT:[[I
     157: iload_3
     158: aaload
     159: iload         10
     161: ifeq          168
     164: iconst_3
     165: goto          169
     168: iconst_2
     169: iaload
     170: isub
     171: iconst_1
     172: iadd
     173: istore        4
     175: iinc          5, 1
     178: aload_0
     179: iconst_2
     180: iload_3
     181: invokevirtual #71                 // Method internalSet:(II)V
     184: aload_0
     185: iconst_5
     186: iload         4
     188: invokevirtual #71                 // Method internalSet:(II)V
     191: aload_0
     192: bipush        6
     194: iload         5
     196: invokevirtual #71                 // Method internalSet:(II)V
     199: aload_0
     200: bipush        19
     202: iload_2
     203: invokevirtual #71                 // Method internalSet:(II)V
     206: iconst_1
     207: istore        6
     209: iload_2
     210: iconst_1
     211: if_icmpge     221
     214: iconst_0
     215: istore        6
     217: iconst_1
     218: iload_2
     219: isub
     220: istore_2
     221: aload_0
     222: iconst_0
     223: iload         6
     225: invokevirtual #71                 // Method internalSet:(II)V
     228: aload_0
     229: iconst_1
     230: iload_2
     231: invokevirtual #71                 // Method internalSet:(II)V
     234: return

  protected int handleGetExtendedYear();
    Code:
       0: aload_0
       1: bipush        19
       3: iconst_1
       4: invokevirtual #72                 // Method newerField:(II)I
       7: bipush        19
       9: if_icmpne     25
      12: aload_0
      13: bipush        19
      15: sipush        1970
      18: invokevirtual #73                 // Method internalGet:(II)I
      21: istore_1
      22: goto          57
      25: aload_0
      26: iconst_0
      27: iconst_1
      28: invokevirtual #73                 // Method internalGet:(II)I
      31: istore_2
      32: iload_2
      33: ifne          48
      36: iconst_1
      37: aload_0
      38: iconst_1
      39: iconst_1
      40: invokevirtual #73                 // Method internalGet:(II)I
      43: isub
      44: istore_1
      45: goto          57
      48: aload_0
      49: iconst_1
      50: sipush        1970
      53: invokevirtual #73                 // Method internalGet:(II)I
      56: istore_1
      57: iload_1
      58: ireturn

  protected int handleComputeJulianDay(int);
    Code:
       0: aload_0
       1: iconst_0
       2: putfield      #74                 // Field invertGregorian:Z
       5: aload_0
       6: iload_1
       7: invokespecial #75                 // Method com/ibm/icu/util/Calendar.handleComputeJulianDay:(I)I
      10: istore_2
      11: aload_0
      12: getfield      #76                 // Field isGregorian:Z
      15: iload_2
      16: aload_0
      17: getfield      #12                 // Field cutoverJulianDay:I
      20: if_icmplt     27
      23: iconst_1
      24: goto          28
      27: iconst_0
      28: if_icmpeq     42
      31: aload_0
      32: iconst_1
      33: putfield      #74                 // Field invertGregorian:Z
      36: aload_0
      37: iload_1
      38: invokespecial #75                 // Method com/ibm/icu/util/Calendar.handleComputeJulianDay:(I)I
      41: istore_2
      42: iload_2
      43: ireturn

  protected int handleComputeMonthStart(int, int, boolean);
    Code:
       0: iload_2
       1: iflt          10
       4: iload_2
       5: bipush        11
       7: if_icmple     31
      10: iconst_1
      11: newarray       int
      13: astore        4
      15: iload_1
      16: iload_2
      17: bipush        12
      19: aload         4
      21: invokestatic  #55                 // Method floorDivide:(II[I)I
      24: iadd
      25: istore_1
      26: aload         4
      28: iconst_0
      29: iaload
      30: istore_2
      31: iload_1
      32: iconst_4
      33: irem
      34: ifne          41
      37: iconst_1
      38: goto          42
      41: iconst_0
      42: istore        4
      44: iload_1
      45: iconst_1
      46: isub
      47: istore        5
      49: sipush        365
      52: iload         5
      54: imul
      55: iload         5
      57: iconst_4
      58: invokestatic  #77                 // Method floorDivide:(II)I
      61: iadd
      62: ldc           #78                 // int 1721423
      64: iadd
      65: istore        6
      67: aload_0
      68: iload_1
      69: aload_0
      70: getfield      #13                 // Field gregorianCutoverYear:I
      73: if_icmplt     80
      76: iconst_1
      77: goto          81
      80: iconst_0
      81: putfield      #76                 // Field isGregorian:Z
      84: aload_0
      85: getfield      #74                 // Field invertGregorian:Z
      88: ifeq          107
      91: aload_0
      92: aload_0
      93: getfield      #76                 // Field isGregorian:Z
      96: ifne          103
      99: iconst_1
     100: goto          104
     103: iconst_0
     104: putfield      #76                 // Field isGregorian:Z
     107: aload_0
     108: getfield      #76                 // Field isGregorian:Z
     111: ifeq          164
     114: iload         4
     116: ifeq          138
     119: iload_1
     120: bipush        100
     122: irem
     123: ifne          134
     126: iload_1
     127: sipush        400
     130: irem
     131: ifne          138
     134: iconst_1
     135: goto          139
     138: iconst_0
     139: istore        4
     141: iload         6
     143: iload         5
     145: sipush        400
     148: invokestatic  #77                 // Method floorDivide:(II)I
     151: iload         5
     153: bipush        100
     155: invokestatic  #77                 // Method floorDivide:(II)I
     158: isub
     159: iconst_2
     160: iadd
     161: iadd
     162: istore        6
     164: iload_2
     165: ifeq          189
     168: iload         6
     170: getstatic     #56                 // Field MONTH_COUNT:[[I
     173: iload_2
     174: aaload
     175: iload         4
     177: ifeq          184
     180: iconst_3
     181: goto          185
     184: iconst_2
     185: iaload
     186: iadd
     187: istore        6
     189: iload         6
     191: ireturn

  public java.lang.String getType();
    Code:
       0: ldc           #79                 // String gregorian
       2: areturn

  static {};
    Code:
       0: bipush        12
       2: anewarray     #80                 // class "[I"
       5: dup
       6: iconst_0
       7: iconst_4
       8: newarray       int
      10: dup
      11: iconst_0
      12: bipush        31
      14: iastore
      15: dup
      16: iconst_1
      17: bipush        31
      19: iastore
      20: dup
      21: iconst_2
      22: iconst_0
      23: iastore
      24: dup
      25: iconst_3
      26: iconst_0
      27: iastore
      28: aastore
      29: dup
      30: iconst_1
      31: iconst_4
      32: newarray       int
      34: dup
      35: iconst_0
      36: bipush        28
      38: iastore
      39: dup
      40: iconst_1
      41: bipush        29
      43: iastore
      44: dup
      45: iconst_2
      46: bipush        31
      48: iastore
      49: dup
      50: iconst_3
      51: bipush        31
      53: iastore
      54: aastore
      55: dup
      56: iconst_2
      57: iconst_4
      58: newarray       int
      60: dup
      61: iconst_0
      62: bipush        31
      64: iastore
      65: dup
      66: iconst_1
      67: bipush        31
      69: iastore
      70: dup
      71: iconst_2
      72: bipush        59
      74: iastore
      75: dup
      76: iconst_3
      77: bipush        60
      79: iastore
      80: aastore
      81: dup
      82: iconst_3
      83: iconst_4
      84: newarray       int
      86: dup
      87: iconst_0
      88: bipush        30
      90: iastore
      91: dup
      92: iconst_1
      93: bipush        30
      95: iastore
      96: dup
      97: iconst_2
      98: bipush        90
     100: iastore
     101: dup
     102: iconst_3
     103: bipush        91
     105: iastore
     106: aastore
     107: dup
     108: iconst_4
     109: iconst_4
     110: newarray       int
     112: dup
     113: iconst_0
     114: bipush        31
     116: iastore
     117: dup
     118: iconst_1
     119: bipush        31
     121: iastore
     122: dup
     123: iconst_2
     124: bipush        120
     126: iastore
     127: dup
     128: iconst_3
     129: bipush        121
     131: iastore
     132: aastore
     133: dup
     134: iconst_5
     135: iconst_4
     136: newarray       int
     138: dup
     139: iconst_0
     140: bipush        30
     142: iastore
     143: dup
     144: iconst_1
     145: bipush        30
     147: iastore
     148: dup
     149: iconst_2
     150: sipush        151
     153: iastore
     154: dup
     155: iconst_3
     156: sipush        152
     159: iastore
     160: aastore
     161: dup
     162: bipush        6
     164: iconst_4
     165: newarray       int
     167: dup
     168: iconst_0
     169: bipush        31
     171: iastore
     172: dup
     173: iconst_1
     174: bipush        31
     176: iastore
     177: dup
     178: iconst_2
     179: sipush        181
     182: iastore
     183: dup
     184: iconst_3
     185: sipush        182
     188: iastore
     189: aastore
     190: dup
     191: bipush        7
     193: iconst_4
     194: newarray       int
     196: dup
     197: iconst_0
     198: bipush        31
     200: iastore
     201: dup
     202: iconst_1
     203: bipush        31
     205: iastore
     206: dup
     207: iconst_2
     208: sipush        212
     211: iastore
     212: dup
     213: iconst_3
     214: sipush        213
     217: iastore
     218: aastore
     219: dup
     220: bipush        8
     222: iconst_4
     223: newarray       int
     225: dup
     226: iconst_0
     227: bipush        30
     229: iastore
     230: dup
     231: iconst_1
     232: bipush        30
     234: iastore
     235: dup
     236: iconst_2
     237: sipush        243
     240: iastore
     241: dup
     242: iconst_3
     243: sipush        244
     246: iastore
     247: aastore
     248: dup
     249: bipush        9
     251: iconst_4
     252: newarray       int
     254: dup
     255: iconst_0
     256: bipush        31
     258: iastore
     259: dup
     260: iconst_1
     261: bipush        31
     263: iastore
     264: dup
     265: iconst_2
     266: sipush        273
     269: iastore
     270: dup
     271: iconst_3
     272: sipush        274
     275: iastore
     276: aastore
     277: dup
     278: bipush        10
     280: iconst_4
     281: newarray       int
     283: dup
     284: iconst_0
     285: bipush        30
     287: iastore
     288: dup
     289: iconst_1
     290: bipush        30
     292: iastore
     293: dup
     294: iconst_2
     295: sipush        304
     298: iastore
     299: dup
     300: iconst_3
     301: sipush        305
     304: iastore
     305: aastore
     306: dup
     307: bipush        11
     309: iconst_4
     310: newarray       int
     312: dup
     313: iconst_0
     314: bipush        31
     316: iastore
     317: dup
     318: iconst_1
     319: bipush        31
     321: iastore
     322: dup
     323: iconst_2
     324: sipush        334
     327: iastore
     328: dup
     329: iconst_3
     330: sipush        335
     333: iastore
     334: aastore
     335: putstatic     #56                 // Field MONTH_COUNT:[[I
     338: bipush        23
     340: anewarray     #80                 // class "[I"
     343: dup
     344: iconst_0
     345: iconst_4
     346: newarray       int
     348: dup
     349: iconst_0
     350: iconst_0
     351: iastore
     352: dup
     353: iconst_1
     354: iconst_0
     355: iastore
     356: dup
     357: iconst_2
     358: iconst_1
     359: iastore
     360: dup
     361: iconst_3
     362: iconst_1
     363: iastore
     364: aastore
     365: dup
     366: iconst_1
     367: iconst_4
     368: newarray       int
     370: dup
     371: iconst_0
     372: iconst_1
     373: iastore
     374: dup
     375: iconst_1
     376: iconst_1
     377: iastore
     378: dup
     379: iconst_2
     380: ldc           #81                 // int 5828963
     382: iastore
     383: dup
     384: iconst_3
     385: ldc           #82                 // int 5838270
     387: iastore
     388: aastore
     389: dup
     390: iconst_2
     391: iconst_4
     392: newarray       int
     394: dup
     395: iconst_0
     396: iconst_0
     397: iastore
     398: dup
     399: iconst_1
     400: iconst_0
     401: iastore
     402: dup
     403: iconst_2
     404: bipush        11
     406: iastore
     407: dup
     408: iconst_3
     409: bipush        11
     411: iastore
     412: aastore
     413: dup
     414: iconst_3
     415: iconst_4
     416: newarray       int
     418: dup
     419: iconst_0
     420: iconst_1
     421: iastore
     422: dup
     423: iconst_1
     424: iconst_1
     425: iastore
     426: dup
     427: iconst_2
     428: bipush        52
     430: iastore
     431: dup
     432: iconst_3
     433: bipush        53
     435: iastore
     436: aastore
     437: dup
     438: iconst_4
     439: iconst_0
     440: newarray       int
     442: aastore
     443: dup
     444: iconst_5
     445: iconst_4
     446: newarray       int
     448: dup
     449: iconst_0
     450: iconst_1
     451: iastore
     452: dup
     453: iconst_1
     454: iconst_1
     455: iastore
     456: dup
     457: iconst_2
     458: bipush        28
     460: iastore
     461: dup
     462: iconst_3
     463: bipush        31
     465: iastore
     466: aastore
     467: dup
     468: bipush        6
     470: iconst_4
     471: newarray       int
     473: dup
     474: iconst_0
     475: iconst_1
     476: iastore
     477: dup
     478: iconst_1
     479: iconst_1
     480: iastore
     481: dup
     482: iconst_2
     483: sipush        365
     486: iastore
     487: dup
     488: iconst_3
     489: sipush        366
     492: iastore
     493: aastore
     494: dup
     495: bipush        7
     497: iconst_0
     498: newarray       int
     500: aastore
     501: dup
     502: bipush        8
     504: iconst_4
     505: newarray       int
     507: dup
     508: iconst_0
     509: iconst_m1
     510: iastore
     511: dup
     512: iconst_1
     513: iconst_m1
     514: iastore
     515: dup
     516: iconst_2
     517: iconst_4
     518: iastore
     519: dup
     520: iconst_3
     521: iconst_5
     522: iastore
     523: aastore
     524: dup
     525: bipush        9
     527: iconst_0
     528: newarray       int
     530: aastore
     531: dup
     532: bipush        10
     534: iconst_0
     535: newarray       int
     537: aastore
     538: dup
     539: bipush        11
     541: iconst_0
     542: newarray       int
     544: aastore
     545: dup
     546: bipush        12
     548: iconst_0
     549: newarray       int
     551: aastore
     552: dup
     553: bipush        13
     555: iconst_0
     556: newarray       int
     558: aastore
     559: dup
     560: bipush        14
     562: iconst_0
     563: newarray       int
     565: aastore
     566: dup
     567: bipush        15
     569: iconst_0
     570: newarray       int
     572: aastore
     573: dup
     574: bipush        16
     576: iconst_0
     577: newarray       int
     579: aastore
     580: dup
     581: bipush        17
     583: iconst_4
     584: newarray       int
     586: dup
     587: iconst_0
     588: ldc           #83                 // int -5838270
     590: iastore
     591: dup
     592: iconst_1
     593: ldc           #83                 // int -5838270
     595: iastore
     596: dup
     597: iconst_2
     598: ldc           #84                 // int 5828964
     600: iastore
     601: dup
     602: iconst_3
     603: ldc           #85                 // int 5838271
     605: iastore
     606: aastore
     607: dup
     608: bipush        18
     610: iconst_0
     611: newarray       int
     613: aastore
     614: dup
     615: bipush        19
     617: iconst_4
     618: newarray       int
     620: dup
     621: iconst_0
     622: ldc           #86                 // int -5838269
     624: iastore
     625: dup
     626: iconst_1
     627: ldc           #86                 // int -5838269
     629: iastore
     630: dup
     631: iconst_2
     632: ldc           #81                 // int 5828963
     634: iastore
     635: dup
     636: iconst_3
     637: ldc           #82                 // int 5838270
     639: iastore
     640: aastore
     641: dup
     642: bipush        20
     644: iconst_0
     645: newarray       int
     647: aastore
     648: dup
     649: bipush        21
     651: iconst_0
     652: newarray       int
     654: aastore
     655: dup
     656: bipush        22
     658: iconst_0
     659: newarray       int
     661: aastore
     662: putstatic     #1                  // Field LIMITS:[[I
     665: return
}
