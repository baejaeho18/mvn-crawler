Compiled from "StringTrieBuilder.java"
public abstract class com.ibm.icu.util.StringTrieBuilder {
  private com.ibm.icu.util.StringTrieBuilder$State state;

  protected java.lang.StringBuilder strings;

  private com.ibm.icu.util.StringTrieBuilder$Node root;

  private java.util.HashMap<com.ibm.icu.util.StringTrieBuilder$Node, com.ibm.icu.util.StringTrieBuilder$Node> nodes;

  private com.ibm.icu.util.StringTrieBuilder$ValueNode lookupFinalValueNode;

  static final boolean $assertionsDisabled;

  protected com.ibm.icu.util.StringTrieBuilder();
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: getstatic     #4                  // Field com/ibm/icu/util/StringTrieBuilder$State.ADDING:Lcom/ibm/icu/util/StringTrieBuilder$State;
       8: putfield      #5                  // Field state:Lcom/ibm/icu/util/StringTrieBuilder$State;
      11: aload_0
      12: new           #6                  // class java/lang/StringBuilder
      15: dup
      16: invokespecial #7                  // Method java/lang/StringBuilder."<init>":()V
      19: putfield      #8                  // Field strings:Ljava/lang/StringBuilder;
      22: aload_0
      23: new           #9                  // class java/util/HashMap
      26: dup
      27: invokespecial #10                 // Method java/util/HashMap."<init>":()V
      30: putfield      #11                 // Field nodes:Ljava/util/HashMap;
      33: aload_0
      34: new           #12                 // class com/ibm/icu/util/StringTrieBuilder$ValueNode
      37: dup
      38: invokespecial #13                 // Method com/ibm/icu/util/StringTrieBuilder$ValueNode."<init>":()V
      41: putfield      #14                 // Field lookupFinalValueNode:Lcom/ibm/icu/util/StringTrieBuilder$ValueNode;
      44: return

  protected void addImpl(java.lang.CharSequence, int);
    Code:
       0: aload_0
       1: getfield      #5                  // Field state:Lcom/ibm/icu/util/StringTrieBuilder$State;
       4: getstatic     #4                  // Field com/ibm/icu/util/StringTrieBuilder$State.ADDING:Lcom/ibm/icu/util/StringTrieBuilder$State;
       7: if_acmpeq     20
      10: new           #15                 // class java/lang/IllegalStateException
      13: dup
      14: ldc           #16                 // String Cannot add (string, value) pairs after build().
      16: invokespecial #17                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      19: athrow
      20: aload_1
      21: invokeinterface #18,  1           // InterfaceMethod java/lang/CharSequence.length:()I
      26: ldc           #19                 // int 65535
      28: if_icmple     41
      31: new           #20                 // class java/lang/IndexOutOfBoundsException
      34: dup
      35: ldc           #21                 // String The maximum string length is 0xffff.
      37: invokespecial #22                 // Method java/lang/IndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
      40: athrow
      41: aload_0
      42: getfield      #23                 // Field root:Lcom/ibm/icu/util/StringTrieBuilder$Node;
      45: ifnonnull     62
      48: aload_0
      49: aload_0
      50: aload_1
      51: iconst_0
      52: iload_2
      53: invokespecial #2                  // Method createSuffixNode:(Ljava/lang/CharSequence;II)Lcom/ibm/icu/util/StringTrieBuilder$ValueNode;
      56: putfield      #23                 // Field root:Lcom/ibm/icu/util/StringTrieBuilder$Node;
      59: goto          77
      62: aload_0
      63: aload_0
      64: getfield      #23                 // Field root:Lcom/ibm/icu/util/StringTrieBuilder$Node;
      67: aload_0
      68: aload_1
      69: iconst_0
      70: iload_2
      71: invokevirtual #24                 // Method com/ibm/icu/util/StringTrieBuilder$Node.add:(Lcom/ibm/icu/util/StringTrieBuilder;Ljava/lang/CharSequence;II)Lcom/ibm/icu/util/StringTrieBuilder$Node;
      74: putfield      #23                 // Field root:Lcom/ibm/icu/util/StringTrieBuilder$Node;
      77: return

  protected final void buildImpl(com.ibm.icu.util.StringTrieBuilder$Option);
    Code:
       0: getstatic     #25                 // Field com/ibm/icu/util/StringTrieBuilder$1.$SwitchMap$com$ibm$icu$util$StringTrieBuilder$State:[I
       3: aload_0
       4: getfield      #5                  // Field state:Lcom/ibm/icu/util/StringTrieBuilder$State;
       7: invokevirtual #26                 // Method com/ibm/icu/util/StringTrieBuilder$State.ordinal:()I
      10: iaload
      11: tableswitch   { // 1 to 4
                     1: 40
                     2: 84
                     3: 84
                     4: 94
               default: 95
          }
      40: aload_0
      41: getfield      #23                 // Field root:Lcom/ibm/icu/util/StringTrieBuilder$Node;
      44: ifnonnull     57
      47: new           #20                 // class java/lang/IndexOutOfBoundsException
      50: dup
      51: ldc           #27                 // String No (string, value) pairs were added.
      53: invokespecial #22                 // Method java/lang/IndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
      56: athrow
      57: aload_1
      58: getstatic     #28                 // Field com/ibm/icu/util/StringTrieBuilder$Option.FAST:Lcom/ibm/icu/util/StringTrieBuilder$Option;
      61: if_acmpne     74
      64: aload_0
      65: getstatic     #29                 // Field com/ibm/icu/util/StringTrieBuilder$State.BUILDING_FAST:Lcom/ibm/icu/util/StringTrieBuilder$State;
      68: putfield      #5                  // Field state:Lcom/ibm/icu/util/StringTrieBuilder$State;
      71: goto          95
      74: aload_0
      75: getstatic     #30                 // Field com/ibm/icu/util/StringTrieBuilder$State.BUILDING_SMALL:Lcom/ibm/icu/util/StringTrieBuilder$State;
      78: putfield      #5                  // Field state:Lcom/ibm/icu/util/StringTrieBuilder$State;
      81: goto          95
      84: new           #15                 // class java/lang/IllegalStateException
      87: dup
      88: ldc           #31                 // String Builder failed and must be clear()ed.
      90: invokespecial #17                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      93: athrow
      94: return
      95: aload_0
      96: aload_0
      97: getfield      #23                 // Field root:Lcom/ibm/icu/util/StringTrieBuilder$Node;
     100: aload_0
     101: invokevirtual #32                 // Method com/ibm/icu/util/StringTrieBuilder$Node.register:(Lcom/ibm/icu/util/StringTrieBuilder;)Lcom/ibm/icu/util/StringTrieBuilder$Node;
     104: putfield      #23                 // Field root:Lcom/ibm/icu/util/StringTrieBuilder$Node;
     107: aload_0
     108: getfield      #23                 // Field root:Lcom/ibm/icu/util/StringTrieBuilder$Node;
     111: iconst_m1
     112: invokevirtual #33                 // Method com/ibm/icu/util/StringTrieBuilder$Node.markRightEdgesFirst:(I)I
     115: pop
     116: aload_0
     117: getfield      #23                 // Field root:Lcom/ibm/icu/util/StringTrieBuilder$Node;
     120: aload_0
     121: invokevirtual #34                 // Method com/ibm/icu/util/StringTrieBuilder$Node.write:(Lcom/ibm/icu/util/StringTrieBuilder;)V
     124: aload_0
     125: getstatic     #35                 // Field com/ibm/icu/util/StringTrieBuilder$State.BUILT:Lcom/ibm/icu/util/StringTrieBuilder$State;
     128: putfield      #5                  // Field state:Lcom/ibm/icu/util/StringTrieBuilder$State;
     131: return

  protected void clearImpl();
    Code:
       0: aload_0
       1: getfield      #8                  // Field strings:Ljava/lang/StringBuilder;
       4: iconst_0
       5: invokevirtual #36                 // Method java/lang/StringBuilder.setLength:(I)V
       8: aload_0
       9: getfield      #11                 // Field nodes:Ljava/util/HashMap;
      12: invokevirtual #37                 // Method java/util/HashMap.clear:()V
      15: aload_0
      16: aconst_null
      17: putfield      #23                 // Field root:Lcom/ibm/icu/util/StringTrieBuilder$Node;
      20: aload_0
      21: getstatic     #4                  // Field com/ibm/icu/util/StringTrieBuilder$State.ADDING:Lcom/ibm/icu/util/StringTrieBuilder$State;
      24: putfield      #5                  // Field state:Lcom/ibm/icu/util/StringTrieBuilder$State;
      27: return

  private final com.ibm.icu.util.StringTrieBuilder$Node registerNode(com.ibm.icu.util.StringTrieBuilder$Node);
    Code:
       0: aload_0
       1: getfield      #5                  // Field state:Lcom/ibm/icu/util/StringTrieBuilder$State;
       4: getstatic     #29                 // Field com/ibm/icu/util/StringTrieBuilder$State.BUILDING_FAST:Lcom/ibm/icu/util/StringTrieBuilder$State;
       7: if_acmpne     12
      10: aload_1
      11: areturn
      12: aload_0
      13: getfield      #11                 // Field nodes:Ljava/util/HashMap;
      16: aload_1
      17: invokevirtual #38                 // Method java/util/HashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      20: checkcast     #39                 // class com/ibm/icu/util/StringTrieBuilder$Node
      23: astore_2
      24: aload_2
      25: ifnull        30
      28: aload_2
      29: areturn
      30: aload_0
      31: getfield      #11                 // Field nodes:Ljava/util/HashMap;
      34: aload_1
      35: aload_1
      36: invokevirtual #40                 // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      39: checkcast     #39                 // class com/ibm/icu/util/StringTrieBuilder$Node
      42: astore_2
      43: getstatic     #41                 // Field $assertionsDisabled:Z
      46: ifne          61
      49: aload_2
      50: ifnull        61
      53: new           #42                 // class java/lang/AssertionError
      56: dup
      57: invokespecial #43                 // Method java/lang/AssertionError."<init>":()V
      60: athrow
      61: aload_1
      62: areturn

  private final com.ibm.icu.util.StringTrieBuilder$ValueNode registerFinalValue(int);
    Code:
       0: aload_0
       1: getfield      #14                 // Field lookupFinalValueNode:Lcom/ibm/icu/util/StringTrieBuilder$ValueNode;
       4: iload_1
       5: invokestatic  #44                 // Method com/ibm/icu/util/StringTrieBuilder$ValueNode.access$000:(Lcom/ibm/icu/util/StringTrieBuilder$ValueNode;I)V
       8: aload_0
       9: getfield      #11                 // Field nodes:Ljava/util/HashMap;
      12: aload_0
      13: getfield      #14                 // Field lookupFinalValueNode:Lcom/ibm/icu/util/StringTrieBuilder$ValueNode;
      16: invokevirtual #38                 // Method java/util/HashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      19: checkcast     #39                 // class com/ibm/icu/util/StringTrieBuilder$Node
      22: astore_2
      23: aload_2
      24: ifnull        32
      27: aload_2
      28: checkcast     #12                 // class com/ibm/icu/util/StringTrieBuilder$ValueNode
      31: areturn
      32: new           #12                 // class com/ibm/icu/util/StringTrieBuilder$ValueNode
      35: dup
      36: iload_1
      37: invokespecial #45                 // Method com/ibm/icu/util/StringTrieBuilder$ValueNode."<init>":(I)V
      40: astore_3
      41: aload_0
      42: getfield      #11                 // Field nodes:Ljava/util/HashMap;
      45: aload_3
      46: aload_3
      47: invokevirtual #40                 // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      50: checkcast     #39                 // class com/ibm/icu/util/StringTrieBuilder$Node
      53: astore_2
      54: getstatic     #41                 // Field $assertionsDisabled:Z
      57: ifne          72
      60: aload_2
      61: ifnull        72
      64: new           #42                 // class java/lang/AssertionError
      67: dup
      68: invokespecial #43                 // Method java/lang/AssertionError."<init>":()V
      71: athrow
      72: aload_3
      73: areturn

  private com.ibm.icu.util.StringTrieBuilder$ValueNode createSuffixNode(java.lang.CharSequence, int, int);
    Code:
       0: aload_0
       1: iload_3
       2: invokespecial #46                 // Method registerFinalValue:(I)Lcom/ibm/icu/util/StringTrieBuilder$ValueNode;
       5: astore        4
       7: iload_2
       8: aload_1
       9: invokeinterface #18,  1           // InterfaceMethod java/lang/CharSequence.length:()I
      14: if_icmpge     67
      17: aload_0
      18: getfield      #8                  // Field strings:Ljava/lang/StringBuilder;
      21: invokevirtual #47                 // Method java/lang/StringBuilder.length:()I
      24: istore        5
      26: aload_0
      27: getfield      #8                  // Field strings:Ljava/lang/StringBuilder;
      30: aload_1
      31: iload_2
      32: aload_1
      33: invokeinterface #18,  1           // InterfaceMethod java/lang/CharSequence.length:()I
      38: invokevirtual #48                 // Method java/lang/StringBuilder.append:(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;
      41: pop
      42: new           #49                 // class com/ibm/icu/util/StringTrieBuilder$LinearMatchNode
      45: dup
      46: aload_0
      47: getfield      #8                  // Field strings:Ljava/lang/StringBuilder;
      50: iload         5
      52: aload_1
      53: invokeinterface #18,  1           // InterfaceMethod java/lang/CharSequence.length:()I
      58: iload_2
      59: isub
      60: aload         4
      62: invokespecial #50                 // Method com/ibm/icu/util/StringTrieBuilder$LinearMatchNode."<init>":(Ljava/lang/CharSequence;IILcom/ibm/icu/util/StringTrieBuilder$Node;)V
      65: astore        4
      67: aload         4
      69: areturn

  protected abstract boolean matchNodesCanHaveValues();

  protected abstract int getMaxBranchLinearSubNodeLength();

  protected abstract int getMinLinearMatch();

  protected abstract int getMaxLinearMatchLength();

  protected abstract int write(int);

  protected abstract int write(int, int);

  protected abstract int writeValueAndFinal(int, boolean);

  protected abstract int writeValueAndType(boolean, int, int);

  protected abstract int writeDeltaTo(int);

  static com.ibm.icu.util.StringTrieBuilder$ValueNode access$100(com.ibm.icu.util.StringTrieBuilder, java.lang.CharSequence, int, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: invokespecial #2                  // Method createSuffixNode:(Ljava/lang/CharSequence;II)Lcom/ibm/icu/util/StringTrieBuilder$ValueNode;
       7: areturn

  static com.ibm.icu.util.StringTrieBuilder$Node access$200(com.ibm.icu.util.StringTrieBuilder, com.ibm.icu.util.StringTrieBuilder$Node);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method registerNode:(Lcom/ibm/icu/util/StringTrieBuilder$Node;)Lcom/ibm/icu/util/StringTrieBuilder$Node;
       5: areturn

  static {};
    Code:
       0: ldc           #51                 // class com/ibm/icu/util/StringTrieBuilder
       2: invokevirtual #52                 // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #41                 // Field $assertionsDisabled:Z
      16: return
}
