Compiled from "Interval.java"
public class org.antlr.v4.runtime.misc.Interval {
  public static final int INTERVAL_POOL_MAX_VALUE;

  public static final org.antlr.v4.runtime.misc.Interval INVALID;

  static org.antlr.v4.runtime.misc.Interval[] cache;

  public int a;

  public int b;

  public static int creates;

  public static int misses;

  public static int hits;

  public static int outOfRange;

  public org.antlr.v4.runtime.misc.Interval(int, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iload_1
       6: putfield      #2                  // Field a:I
       9: aload_0
      10: iload_2
      11: putfield      #3                  // Field b:I
      14: return

  public static org.antlr.v4.runtime.misc.Interval of(int, int);
    Code:
       0: iload_0
       1: iload_1
       2: if_icmpne     16
       5: iload_0
       6: iflt          16
       9: iload_0
      10: sipush        1000
      13: if_icmple     26
      16: new           #4                  // class org/antlr/v4/runtime/misc/Interval
      19: dup
      20: iload_0
      21: iload_1
      22: invokespecial #5                  // Method "<init>":(II)V
      25: areturn
      26: getstatic     #6                  // Field cache:[Lorg/antlr/v4/runtime/misc/Interval;
      29: iload_0
      30: aaload
      31: ifnonnull     48
      34: getstatic     #6                  // Field cache:[Lorg/antlr/v4/runtime/misc/Interval;
      37: iload_0
      38: new           #4                  // class org/antlr/v4/runtime/misc/Interval
      41: dup
      42: iload_0
      43: iload_0
      44: invokespecial #5                  // Method "<init>":(II)V
      47: aastore
      48: getstatic     #6                  // Field cache:[Lorg/antlr/v4/runtime/misc/Interval;
      51: iload_0
      52: aaload
      53: areturn

  public int length();
    Code:
       0: aload_0
       1: getfield      #3                  // Field b:I
       4: aload_0
       5: getfield      #2                  // Field a:I
       8: if_icmpge     13
      11: iconst_0
      12: ireturn
      13: aload_0
      14: getfield      #3                  // Field b:I
      17: aload_0
      18: getfield      #2                  // Field a:I
      21: isub
      22: iconst_1
      23: iadd
      24: ireturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: ifnull        11
       4: aload_1
       5: instanceof    #4                  // class org/antlr/v4/runtime/misc/Interval
       8: ifne          13
      11: iconst_0
      12: ireturn
      13: aload_1
      14: checkcast     #4                  // class org/antlr/v4/runtime/misc/Interval
      17: astore_2
      18: aload_0
      19: getfield      #2                  // Field a:I
      22: aload_2
      23: getfield      #2                  // Field a:I
      26: if_icmpne     44
      29: aload_0
      30: getfield      #3                  // Field b:I
      33: aload_2
      34: getfield      #3                  // Field b:I
      37: if_icmpne     44
      40: iconst_1
      41: goto          45
      44: iconst_0
      45: ireturn

  public int hashCode();
    Code:
       0: bipush        23
       2: istore_1
       3: iload_1
       4: bipush        31
       6: imul
       7: aload_0
       8: getfield      #2                  // Field a:I
      11: iadd
      12: istore_1
      13: iload_1
      14: bipush        31
      16: imul
      17: aload_0
      18: getfield      #3                  // Field b:I
      21: iadd
      22: istore_1
      23: iload_1
      24: ireturn

  public boolean startsBeforeDisjoint(org.antlr.v4.runtime.misc.Interval);
    Code:
       0: aload_0
       1: getfield      #2                  // Field a:I
       4: aload_1
       5: getfield      #2                  // Field a:I
       8: if_icmpge     26
      11: aload_0
      12: getfield      #3                  // Field b:I
      15: aload_1
      16: getfield      #2                  // Field a:I
      19: if_icmpge     26
      22: iconst_1
      23: goto          27
      26: iconst_0
      27: ireturn

  public boolean startsBeforeNonDisjoint(org.antlr.v4.runtime.misc.Interval);
    Code:
       0: aload_0
       1: getfield      #2                  // Field a:I
       4: aload_1
       5: getfield      #2                  // Field a:I
       8: if_icmpgt     26
      11: aload_0
      12: getfield      #3                  // Field b:I
      15: aload_1
      16: getfield      #2                  // Field a:I
      19: if_icmplt     26
      22: iconst_1
      23: goto          27
      26: iconst_0
      27: ireturn

  public boolean startsAfter(org.antlr.v4.runtime.misc.Interval);
    Code:
       0: aload_0
       1: getfield      #2                  // Field a:I
       4: aload_1
       5: getfield      #2                  // Field a:I
       8: if_icmple     15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: ireturn

  public boolean startsAfterDisjoint(org.antlr.v4.runtime.misc.Interval);
    Code:
       0: aload_0
       1: getfield      #2                  // Field a:I
       4: aload_1
       5: getfield      #3                  // Field b:I
       8: if_icmple     15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: ireturn

  public boolean startsAfterNonDisjoint(org.antlr.v4.runtime.misc.Interval);
    Code:
       0: aload_0
       1: getfield      #2                  // Field a:I
       4: aload_1
       5: getfield      #2                  // Field a:I
       8: if_icmple     26
      11: aload_0
      12: getfield      #2                  // Field a:I
      15: aload_1
      16: getfield      #3                  // Field b:I
      19: if_icmpgt     26
      22: iconst_1
      23: goto          27
      26: iconst_0
      27: ireturn

  public boolean disjoint(org.antlr.v4.runtime.misc.Interval);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #7                  // Method startsBeforeDisjoint:(Lorg/antlr/v4/runtime/misc/Interval;)Z
       5: ifne          16
       8: aload_0
       9: aload_1
      10: invokevirtual #8                  // Method startsAfterDisjoint:(Lorg/antlr/v4/runtime/misc/Interval;)Z
      13: ifeq          20
      16: iconst_1
      17: goto          21
      20: iconst_0
      21: ireturn

  public boolean adjacent(org.antlr.v4.runtime.misc.Interval);
    Code:
       0: aload_0
       1: getfield      #2                  // Field a:I
       4: aload_1
       5: getfield      #3                  // Field b:I
       8: iconst_1
       9: iadd
      10: if_icmpeq     26
      13: aload_0
      14: getfield      #3                  // Field b:I
      17: aload_1
      18: getfield      #2                  // Field a:I
      21: iconst_1
      22: isub
      23: if_icmpne     30
      26: iconst_1
      27: goto          31
      30: iconst_0
      31: ireturn

  public boolean properlyContains(org.antlr.v4.runtime.misc.Interval);
    Code:
       0: aload_1
       1: getfield      #2                  // Field a:I
       4: aload_0
       5: getfield      #2                  // Field a:I
       8: if_icmplt     26
      11: aload_1
      12: getfield      #3                  // Field b:I
      15: aload_0
      16: getfield      #3                  // Field b:I
      19: if_icmpgt     26
      22: iconst_1
      23: goto          27
      26: iconst_0
      27: ireturn

  public org.antlr.v4.runtime.misc.Interval union(org.antlr.v4.runtime.misc.Interval);
    Code:
       0: aload_0
       1: getfield      #2                  // Field a:I
       4: aload_1
       5: getfield      #2                  // Field a:I
       8: invokestatic  #9                  // Method java/lang/Math.min:(II)I
      11: aload_0
      12: getfield      #3                  // Field b:I
      15: aload_1
      16: getfield      #3                  // Field b:I
      19: invokestatic  #10                 // Method java/lang/Math.max:(II)I
      22: invokestatic  #11                 // Method of:(II)Lorg/antlr/v4/runtime/misc/Interval;
      25: areturn

  public org.antlr.v4.runtime.misc.Interval intersection(org.antlr.v4.runtime.misc.Interval);
    Code:
       0: aload_0
       1: getfield      #2                  // Field a:I
       4: aload_1
       5: getfield      #2                  // Field a:I
       8: invokestatic  #10                 // Method java/lang/Math.max:(II)I
      11: aload_0
      12: getfield      #3                  // Field b:I
      15: aload_1
      16: getfield      #3                  // Field b:I
      19: invokestatic  #9                  // Method java/lang/Math.min:(II)I
      22: invokestatic  #11                 // Method of:(II)Lorg/antlr/v4/runtime/misc/Interval;
      25: areturn

  public org.antlr.v4.runtime.misc.Interval differenceNotProperlyContained(org.antlr.v4.runtime.misc.Interval);
    Code:
       0: aconst_null
       1: astore_2
       2: aload_1
       3: aload_0
       4: invokevirtual #12                 // Method startsBeforeNonDisjoint:(Lorg/antlr/v4/runtime/misc/Interval;)Z
       7: ifeq          34
      10: aload_0
      11: getfield      #2                  // Field a:I
      14: aload_1
      15: getfield      #3                  // Field b:I
      18: iconst_1
      19: iadd
      20: invokestatic  #10                 // Method java/lang/Math.max:(II)I
      23: aload_0
      24: getfield      #3                  // Field b:I
      27: invokestatic  #11                 // Method of:(II)Lorg/antlr/v4/runtime/misc/Interval;
      30: astore_2
      31: goto          56
      34: aload_1
      35: aload_0
      36: invokevirtual #13                 // Method startsAfterNonDisjoint:(Lorg/antlr/v4/runtime/misc/Interval;)Z
      39: ifeq          56
      42: aload_0
      43: getfield      #2                  // Field a:I
      46: aload_1
      47: getfield      #2                  // Field a:I
      50: iconst_1
      51: isub
      52: invokestatic  #11                 // Method of:(II)Lorg/antlr/v4/runtime/misc/Interval;
      55: astore_2
      56: aload_2
      57: areturn

  public java.lang.String toString();
    Code:
       0: new           #14                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #15                 // Method java/lang/StringBuilder."<init>":()V
       7: aload_0
       8: getfield      #2                  // Field a:I
      11: invokevirtual #16                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      14: ldc           #17                 // String ..
      16: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      19: aload_0
      20: getfield      #3                  // Field b:I
      23: invokevirtual #16                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      26: invokevirtual #19                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      29: areturn

  static {};
    Code:
       0: new           #4                  // class org/antlr/v4/runtime/misc/Interval
       3: dup
       4: iconst_m1
       5: bipush        -2
       7: invokespecial #5                  // Method "<init>":(II)V
      10: putstatic     #20                 // Field INVALID:Lorg/antlr/v4/runtime/misc/Interval;
      13: sipush        1001
      16: anewarray     #4                  // class org/antlr/v4/runtime/misc/Interval
      19: putstatic     #6                  // Field cache:[Lorg/antlr/v4/runtime/misc/Interval;
      22: iconst_0
      23: putstatic     #21                 // Field creates:I
      26: iconst_0
      27: putstatic     #22                 // Field misses:I
      30: iconst_0
      31: putstatic     #23                 // Field hits:I
      34: iconst_0
      35: putstatic     #24                 // Field outOfRange:I
      38: return
}
