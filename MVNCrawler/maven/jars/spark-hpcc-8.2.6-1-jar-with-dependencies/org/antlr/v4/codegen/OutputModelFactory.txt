Compiled from "OutputModelFactory.java"
public interface org.antlr.v4.codegen.OutputModelFactory {
  public abstract org.antlr.v4.tool.Grammar getGrammar();

  public abstract org.antlr.v4.codegen.CodeGenerator getGenerator();

  public abstract void setController(org.antlr.v4.codegen.OutputModelController);

  public abstract org.antlr.v4.codegen.OutputModelController getController();

  public abstract org.antlr.v4.codegen.model.ParserFile parserFile(java.lang.String);

  public abstract org.antlr.v4.codegen.model.Parser parser(org.antlr.v4.codegen.model.ParserFile);

  public abstract org.antlr.v4.codegen.model.LexerFile lexerFile(java.lang.String);

  public abstract org.antlr.v4.codegen.model.Lexer lexer(org.antlr.v4.codegen.model.LexerFile);

  public abstract org.antlr.v4.codegen.model.RuleFunction rule(org.antlr.v4.tool.Rule);

  public abstract java.util.List<org.antlr.v4.codegen.model.SrcOp> rulePostamble(org.antlr.v4.codegen.model.RuleFunction, org.antlr.v4.tool.Rule);

  public abstract org.antlr.v4.codegen.model.CodeBlockForAlt alternative(org.antlr.v4.tool.Alternative, boolean);

  public abstract org.antlr.v4.codegen.model.CodeBlockForAlt finishAlternative(org.antlr.v4.codegen.model.CodeBlockForAlt, java.util.List<org.antlr.v4.codegen.model.SrcOp>);

  public abstract org.antlr.v4.codegen.model.CodeBlockForAlt epsilon(org.antlr.v4.tool.Alternative, boolean);

  public abstract java.util.List<org.antlr.v4.codegen.model.SrcOp> ruleRef(org.antlr.v4.tool.ast.GrammarAST, org.antlr.v4.tool.ast.GrammarAST, org.antlr.v4.tool.ast.GrammarAST);

  public abstract java.util.List<org.antlr.v4.codegen.model.SrcOp> tokenRef(org.antlr.v4.tool.ast.GrammarAST, org.antlr.v4.tool.ast.GrammarAST, org.antlr.v4.tool.ast.GrammarAST);

  public abstract java.util.List<org.antlr.v4.codegen.model.SrcOp> stringRef(org.antlr.v4.tool.ast.GrammarAST, org.antlr.v4.tool.ast.GrammarAST);

  public abstract java.util.List<org.antlr.v4.codegen.model.SrcOp> set(org.antlr.v4.tool.ast.GrammarAST, org.antlr.v4.tool.ast.GrammarAST, boolean);

  public abstract java.util.List<org.antlr.v4.codegen.model.SrcOp> wildcard(org.antlr.v4.tool.ast.GrammarAST, org.antlr.v4.tool.ast.GrammarAST);

  public abstract java.util.List<org.antlr.v4.codegen.model.SrcOp> action(org.antlr.v4.tool.ast.ActionAST);

  public abstract java.util.List<org.antlr.v4.codegen.model.SrcOp> sempred(org.antlr.v4.tool.ast.ActionAST);

  public abstract org.antlr.v4.codegen.model.Choice getChoiceBlock(org.antlr.v4.tool.ast.BlockAST, java.util.List<org.antlr.v4.codegen.model.CodeBlockForAlt>, org.antlr.v4.tool.ast.GrammarAST);

  public abstract org.antlr.v4.codegen.model.Choice getEBNFBlock(org.antlr.v4.tool.ast.GrammarAST, java.util.List<org.antlr.v4.codegen.model.CodeBlockForAlt>);

  public abstract org.antlr.v4.codegen.model.Choice getLL1ChoiceBlock(org.antlr.v4.tool.ast.BlockAST, java.util.List<org.antlr.v4.codegen.model.CodeBlockForAlt>);

  public abstract org.antlr.v4.codegen.model.Choice getComplexChoiceBlock(org.antlr.v4.tool.ast.BlockAST, java.util.List<org.antlr.v4.codegen.model.CodeBlockForAlt>);

  public abstract org.antlr.v4.codegen.model.Choice getLL1EBNFBlock(org.antlr.v4.tool.ast.GrammarAST, java.util.List<org.antlr.v4.codegen.model.CodeBlockForAlt>);

  public abstract org.antlr.v4.codegen.model.Choice getComplexEBNFBlock(org.antlr.v4.tool.ast.GrammarAST, java.util.List<org.antlr.v4.codegen.model.CodeBlockForAlt>);

  public abstract java.util.List<org.antlr.v4.codegen.model.SrcOp> getLL1Test(org.antlr.v4.runtime.misc.IntervalSet, org.antlr.v4.tool.ast.GrammarAST);

  public abstract boolean needsImplicitLabel(org.antlr.v4.tool.ast.GrammarAST, org.antlr.v4.codegen.model.LabeledOp);

  public abstract org.antlr.v4.codegen.model.OutputModelObject getRoot();

  public abstract org.antlr.v4.codegen.model.RuleFunction getCurrentRuleFunction();

  public abstract org.antlr.v4.tool.Alternative getCurrentOuterMostAlt();

  public abstract org.antlr.v4.codegen.model.decl.CodeBlock getCurrentBlock();

  public abstract org.antlr.v4.codegen.model.CodeBlockForOuterMostAlt getCurrentOuterMostAlternativeBlock();

  public abstract int getCodeBlockLevel();

  public abstract int getTreeLevel();
}
