Compiled from "SchemaBuilder.java"
public interface org.kohsuke.rngom.ast.builder.SchemaBuilder<N extends org.kohsuke.rngom.ast.om.ParsedNameClass, P extends org.kohsuke.rngom.ast.om.ParsedPattern, E extends org.kohsuke.rngom.ast.om.ParsedElementAnnotation, L extends org.kohsuke.rngom.ast.om.Location, A extends org.kohsuke.rngom.ast.builder.Annotations<E, L, CL>, CL extends org.kohsuke.rngom.ast.builder.CommentList<L>> {
  public abstract org.kohsuke.rngom.ast.builder.NameClassBuilder<N, E, L, A, CL> getNameClassBuilder() throws org.kohsuke.rngom.ast.builder.BuildException;

  public abstract P makeChoice(java.util.List<P>, L, A) throws org.kohsuke.rngom.ast.builder.BuildException;

  public abstract P makeInterleave(java.util.List<P>, L, A) throws org.kohsuke.rngom.ast.builder.BuildException;

  public abstract P makeGroup(java.util.List<P>, L, A) throws org.kohsuke.rngom.ast.builder.BuildException;

  public abstract P makeOneOrMore(P, L, A) throws org.kohsuke.rngom.ast.builder.BuildException;

  public abstract P makeZeroOrMore(P, L, A) throws org.kohsuke.rngom.ast.builder.BuildException;

  public abstract P makeOptional(P, L, A) throws org.kohsuke.rngom.ast.builder.BuildException;

  public abstract P makeList(P, L, A) throws org.kohsuke.rngom.ast.builder.BuildException;

  public abstract P makeMixed(P, L, A) throws org.kohsuke.rngom.ast.builder.BuildException;

  public abstract P makeEmpty(L, A);

  public abstract P makeNotAllowed(L, A);

  public abstract P makeText(L, A);

  public abstract P makeAttribute(N, P, L, A) throws org.kohsuke.rngom.ast.builder.BuildException;

  public abstract P makeElement(N, P, L, A) throws org.kohsuke.rngom.ast.builder.BuildException;

  public abstract org.kohsuke.rngom.ast.builder.DataPatternBuilder makeDataPatternBuilder(java.lang.String, java.lang.String, L) throws org.kohsuke.rngom.ast.builder.BuildException;

  public abstract P makeValue(java.lang.String, java.lang.String, java.lang.String, org.kohsuke.rngom.parse.Context, java.lang.String, L, A) throws org.kohsuke.rngom.ast.builder.BuildException;

  public abstract org.kohsuke.rngom.ast.builder.Grammar<P, E, L, A, CL> makeGrammar(org.kohsuke.rngom.ast.builder.Scope<P, E, L, A, CL>);

  public abstract P annotate(P, A) throws org.kohsuke.rngom.ast.builder.BuildException;

  public abstract P annotateAfter(P, E) throws org.kohsuke.rngom.ast.builder.BuildException;

  public abstract P commentAfter(P, CL) throws org.kohsuke.rngom.ast.builder.BuildException;

  public abstract P makeExternalRef(org.kohsuke.rngom.parse.Parseable, java.lang.String, java.lang.String, org.kohsuke.rngom.ast.builder.Scope<P, E, L, A, CL>, L, A) throws org.kohsuke.rngom.ast.builder.BuildException, org.kohsuke.rngom.parse.IllegalSchemaException;

  public abstract L makeLocation(java.lang.String, int, int);

  public abstract A makeAnnotations(CL, org.kohsuke.rngom.parse.Context);

  public abstract org.kohsuke.rngom.ast.builder.ElementAnnotationBuilder<P, E, L, A, CL> makeElementAnnotationBuilder(java.lang.String, java.lang.String, java.lang.String, L, CL, org.kohsuke.rngom.parse.Context);

  public abstract CL makeCommentList();

  public abstract P makeErrorPattern();

  public abstract boolean usesComments();

  public abstract P expandPattern(P) throws org.kohsuke.rngom.ast.builder.BuildException, org.kohsuke.rngom.parse.IllegalSchemaException;
}
