Compiled from "Base64EncodingWriterOutputStream.java"
public class org.apache.axiom.util.base64.Base64EncodingWriterOutputStream extends org.apache.axiom.util.base64.AbstractBase64EncodingOutputStream {
  private final java.io.Writer writer;

  private final char[] buffer;

  private int len;

  public org.apache.axiom.util.base64.Base64EncodingWriterOutputStream(java.io.Writer, int, boolean);
    Code:
       0: aload_0
       1: iload_3
       2: invokespecial #1                  // Method org/apache/axiom/util/base64/AbstractBase64EncodingOutputStream."<init>":(Z)V
       5: aload_0
       6: aload_1
       7: putfield      #2                  // Field writer:Ljava/io/Writer;
      10: aload_0
      11: iload_2
      12: newarray       char
      14: putfield      #3                  // Field buffer:[C
      17: return

  public org.apache.axiom.util.base64.Base64EncodingWriterOutputStream(java.io.Writer, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iconst_0
       4: invokespecial #4                  // Method "<init>":(Ljava/io/Writer;IZ)V
       7: return

  public org.apache.axiom.util.base64.Base64EncodingWriterOutputStream(java.io.Writer);
    Code:
       0: aload_0
       1: aload_1
       2: sipush        4096
       5: iconst_0
       6: invokespecial #4                  // Method "<init>":(Ljava/io/Writer;IZ)V
       9: return

  protected void doWrite(byte[]) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field buffer:[C
       4: arraylength
       5: aload_0
       6: getfield      #5                  // Field len:I
       9: isub
      10: iconst_4
      11: if_icmpge     18
      14: aload_0
      15: invokevirtual #6                  // Method flushBuffer:()V
      18: iconst_0
      19: istore_2
      20: iload_2
      21: iconst_4
      22: if_icmpge     55
      25: aload_0
      26: getfield      #3                  // Field buffer:[C
      29: aload_0
      30: dup
      31: getfield      #5                  // Field len:I
      34: dup_x1
      35: iconst_1
      36: iadd
      37: putfield      #5                  // Field len:I
      40: aload_1
      41: iload_2
      42: baload
      43: sipush        255
      46: iand
      47: i2c
      48: castore
      49: iinc          2, 1
      52: goto          20
      55: return

  protected void flushBuffer() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field writer:Ljava/io/Writer;
       4: aload_0
       5: getfield      #3                  // Field buffer:[C
       8: iconst_0
       9: aload_0
      10: getfield      #5                  // Field len:I
      13: invokevirtual #7                  // Method java/io/Writer.write:([CII)V
      16: aload_0
      17: iconst_0
      18: putfield      #5                  // Field len:I
      21: return

  protected void doFlush() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field writer:Ljava/io/Writer;
       4: invokevirtual #8                  // Method java/io/Writer.flush:()V
       7: return

  protected void doClose() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field writer:Ljava/io/Writer;
       4: invokevirtual #9                  // Method java/io/Writer.close:()V
       7: return
}
