Compiled from "AbstractBase64EncodingOutputStream.java"
public abstract class org.apache.axiom.util.base64.AbstractBase64EncodingOutputStream extends java.io.OutputStream {
  private final boolean ignoreFlush;

  private final byte[] in;

  private final byte[] out;

  private int rest;

  private boolean completed;

  public org.apache.axiom.util.base64.AbstractBase64EncodingOutputStream(boolean);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/io/OutputStream."<init>":()V
       4: aload_0
       5: iconst_3
       6: newarray       byte
       8: putfield      #2                  // Field in:[B
      11: aload_0
      12: iconst_4
      13: newarray       byte
      15: putfield      #3                  // Field out:[B
      18: aload_0
      19: iload_1
      20: putfield      #4                  // Field ignoreFlush:Z
      23: return

  public org.apache.axiom.util.base64.AbstractBase64EncodingOutputStream();
    Code:
       0: aload_0
       1: iconst_0
       2: invokespecial #5                  // Method "<init>":(Z)V
       5: return

  public final void write(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #6                  // Field completed:Z
       4: ifeq          17
       7: new           #7                  // class java/io/IOException
      10: dup
      11: ldc           #8                  // String Attempt to write data after base64 encoding has been completed
      13: invokespecial #9                  // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: getfield      #10                 // Field rest:I
      21: ifle          87
      24: iload_3
      25: ifle          64
      28: aload_0
      29: getfield      #10                 // Field rest:I
      32: iconst_3
      33: if_icmpge     64
      36: aload_0
      37: getfield      #2                  // Field in:[B
      40: aload_0
      41: dup
      42: getfield      #10                 // Field rest:I
      45: dup_x1
      46: iconst_1
      47: iadd
      48: putfield      #10                 // Field rest:I
      51: aload_1
      52: iload_2
      53: iinc          2, 1
      56: baload
      57: bastore
      58: iinc          3, -1
      61: goto          24
      64: aload_0
      65: getfield      #10                 // Field rest:I
      68: iconst_3
      69: if_icmpne     87
      72: aload_0
      73: aload_0
      74: getfield      #2                  // Field in:[B
      77: iconst_0
      78: iconst_3
      79: invokespecial #11                 // Method encode:([BII)V
      82: aload_0
      83: iconst_0
      84: putfield      #10                 // Field rest:I
      87: iload_3
      88: iconst_3
      89: if_icmplt     108
      92: aload_0
      93: aload_1
      94: iload_2
      95: iconst_3
      96: invokespecial #11                 // Method encode:([BII)V
      99: iinc          2, 3
     102: iinc          3, -3
     105: goto          87
     108: iload_3
     109: ifle          140
     112: aload_0
     113: getfield      #2                  // Field in:[B
     116: aload_0
     117: dup
     118: getfield      #10                 // Field rest:I
     121: dup_x1
     122: iconst_1
     123: iadd
     124: putfield      #10                 // Field rest:I
     127: aload_1
     128: iload_2
     129: iinc          2, 1
     132: baload
     133: bastore
     134: iinc          3, -1
     137: goto          108
     140: return

  public final void write(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field in:[B
       4: aload_0
       5: dup
       6: getfield      #10                 // Field rest:I
       9: dup_x1
      10: iconst_1
      11: iadd
      12: putfield      #10                 // Field rest:I
      15: iload_1
      16: i2b
      17: bastore
      18: aload_0
      19: getfield      #10                 // Field rest:I
      22: iconst_3
      23: if_icmpne     41
      26: aload_0
      27: aload_0
      28: getfield      #2                  // Field in:[B
      31: iconst_0
      32: iconst_3
      33: invokespecial #11                 // Method encode:([BII)V
      36: aload_0
      37: iconst_0
      38: putfield      #10                 // Field rest:I
      41: return

  public final void complete() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #6                  // Field completed:Z
       4: ifne          36
       7: aload_0
       8: getfield      #10                 // Field rest:I
      11: ifle          27
      14: aload_0
      15: aload_0
      16: getfield      #2                  // Field in:[B
      19: iconst_0
      20: aload_0
      21: getfield      #10                 // Field rest:I
      24: invokespecial #11                 // Method encode:([BII)V
      27: aload_0
      28: invokevirtual #12                 // Method flushBuffer:()V
      31: aload_0
      32: iconst_1
      33: putfield      #6                  // Field completed:Z
      36: return

  private void encode(byte[], int, int) throws java.io.IOException;
    Code:
       0: iload_3
       1: iconst_1
       2: if_icmpne     64
       5: aload_1
       6: iload_2
       7: baload
       8: sipush        255
      11: iand
      12: istore        4
      14: aload_0
      15: getfield      #3                  // Field out:[B
      18: iconst_0
      19: getstatic     #13                 // Field org/apache/axiom/util/base64/Base64Constants.S_BASE64CHAR:[B
      22: iload         4
      24: iconst_2
      25: ishr
      26: baload
      27: bastore
      28: aload_0
      29: getfield      #3                  // Field out:[B
      32: iconst_1
      33: getstatic     #13                 // Field org/apache/axiom/util/base64/Base64Constants.S_BASE64CHAR:[B
      36: iload         4
      38: iconst_4
      39: ishl
      40: bipush        63
      42: iand
      43: baload
      44: bastore
      45: aload_0
      46: getfield      #3                  // Field out:[B
      49: iconst_2
      50: bipush        61
      52: bastore
      53: aload_0
      54: getfield      #3                  // Field out:[B
      57: iconst_3
      58: bipush        61
      60: bastore
      61: goto          252
      64: iload_3
      65: iconst_2
      66: if_icmpne     151
      69: aload_1
      70: iload_2
      71: baload
      72: sipush        255
      75: iand
      76: bipush        8
      78: ishl
      79: aload_1
      80: iload_2
      81: iconst_1
      82: iadd
      83: baload
      84: sipush        255
      87: iand
      88: iadd
      89: istore        4
      91: aload_0
      92: getfield      #3                  // Field out:[B
      95: iconst_0
      96: getstatic     #13                 // Field org/apache/axiom/util/base64/Base64Constants.S_BASE64CHAR:[B
      99: iload         4
     101: bipush        10
     103: ishr
     104: baload
     105: bastore
     106: aload_0
     107: getfield      #3                  // Field out:[B
     110: iconst_1
     111: getstatic     #13                 // Field org/apache/axiom/util/base64/Base64Constants.S_BASE64CHAR:[B
     114: iload         4
     116: iconst_4
     117: ishr
     118: bipush        63
     120: iand
     121: baload
     122: bastore
     123: aload_0
     124: getfield      #3                  // Field out:[B
     127: iconst_2
     128: getstatic     #13                 // Field org/apache/axiom/util/base64/Base64Constants.S_BASE64CHAR:[B
     131: iload         4
     133: iconst_2
     134: ishl
     135: bipush        63
     137: iand
     138: baload
     139: bastore
     140: aload_0
     141: getfield      #3                  // Field out:[B
     144: iconst_3
     145: bipush        61
     147: bastore
     148: goto          252
     151: aload_1
     152: iload_2
     153: baload
     154: sipush        255
     157: iand
     158: bipush        16
     160: ishl
     161: aload_1
     162: iload_2
     163: iconst_1
     164: iadd
     165: baload
     166: sipush        255
     169: iand
     170: bipush        8
     172: ishl
     173: iadd
     174: aload_1
     175: iload_2
     176: iconst_2
     177: iadd
     178: baload
     179: sipush        255
     182: iand
     183: iadd
     184: istore        4
     186: aload_0
     187: getfield      #3                  // Field out:[B
     190: iconst_0
     191: getstatic     #13                 // Field org/apache/axiom/util/base64/Base64Constants.S_BASE64CHAR:[B
     194: iload         4
     196: bipush        18
     198: ishr
     199: baload
     200: bastore
     201: aload_0
     202: getfield      #3                  // Field out:[B
     205: iconst_1
     206: getstatic     #13                 // Field org/apache/axiom/util/base64/Base64Constants.S_BASE64CHAR:[B
     209: iload         4
     211: bipush        12
     213: ishr
     214: bipush        63
     216: iand
     217: baload
     218: bastore
     219: aload_0
     220: getfield      #3                  // Field out:[B
     223: iconst_2
     224: getstatic     #13                 // Field org/apache/axiom/util/base64/Base64Constants.S_BASE64CHAR:[B
     227: iload         4
     229: bipush        6
     231: ishr
     232: bipush        63
     234: iand
     235: baload
     236: bastore
     237: aload_0
     238: getfield      #3                  // Field out:[B
     241: iconst_3
     242: getstatic     #13                 // Field org/apache/axiom/util/base64/Base64Constants.S_BASE64CHAR:[B
     245: iload         4
     247: bipush        63
     249: iand
     250: baload
     251: bastore
     252: aload_0
     253: aload_0
     254: getfield      #3                  // Field out:[B
     257: invokevirtual #15                 // Method doWrite:([B)V
     260: return

  public final void flush() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field ignoreFlush:Z
       4: ifne          15
       7: aload_0
       8: invokevirtual #12                 // Method flushBuffer:()V
      11: aload_0
      12: invokevirtual #16                 // Method doFlush:()V
      15: return

  public final void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #17                 // Method complete:()V
       4: aload_0
       5: invokevirtual #18                 // Method doClose:()V
       8: return

  protected abstract void doWrite(byte[]) throws java.io.IOException;

  protected abstract void flushBuffer() throws java.io.IOException;

  protected abstract void doFlush() throws java.io.IOException;

  protected abstract void doClose() throws java.io.IOException;
}
