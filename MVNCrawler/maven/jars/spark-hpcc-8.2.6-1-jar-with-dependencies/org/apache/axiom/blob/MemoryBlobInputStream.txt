Compiled from "MemoryBlobInputStream.java"
final class org.apache.axiom.blob.MemoryBlobInputStream extends java.io.InputStream {
  private org.apache.axiom.blob.MemoryBlobChunk chunk;

  private int index;

  private org.apache.axiom.blob.MemoryBlobChunk markChunk;

  private int markIndex;

  org.apache.axiom.blob.MemoryBlobInputStream(org.apache.axiom.blob.MemoryBlobChunk);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/io/InputStream."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field chunk:Lorg/apache/axiom/blob/MemoryBlobChunk;
       9: return

  private void updateChunk();
    Code:
       0: aload_0
       1: getfield      #2                  // Field chunk:Lorg/apache/axiom/blob/MemoryBlobChunk;
       4: ifnull        40
       7: aload_0
       8: getfield      #3                  // Field index:I
      11: aload_0
      12: getfield      #2                  // Field chunk:Lorg/apache/axiom/blob/MemoryBlobChunk;
      15: getfield      #4                  // Field org/apache/axiom/blob/MemoryBlobChunk.size:I
      18: if_icmpne     40
      21: aload_0
      22: aload_0
      23: getfield      #2                  // Field chunk:Lorg/apache/axiom/blob/MemoryBlobChunk;
      26: getfield      #5                  // Field org/apache/axiom/blob/MemoryBlobChunk.nextChunk:Lorg/apache/axiom/blob/MemoryBlobChunk;
      29: putfield      #2                  // Field chunk:Lorg/apache/axiom/blob/MemoryBlobChunk;
      32: aload_0
      33: iconst_0
      34: putfield      #3                  // Field index:I
      37: goto          0
      40: return

  public int read(byte[], int, int) throws java.io.IOException;
    Code:
       0: iconst_0
       1: istore        4
       3: iload_3
       4: ifle          92
       7: aload_0
       8: invokespecial #6                  // Method updateChunk:()V
      11: aload_0
      12: getfield      #2                  // Field chunk:Lorg/apache/axiom/blob/MemoryBlobChunk;
      15: ifnonnull     25
      18: iload         4
      20: ifne          92
      23: iconst_m1
      24: ireturn
      25: iload_3
      26: aload_0
      27: getfield      #2                  // Field chunk:Lorg/apache/axiom/blob/MemoryBlobChunk;
      30: getfield      #4                  // Field org/apache/axiom/blob/MemoryBlobChunk.size:I
      33: aload_0
      34: getfield      #3                  // Field index:I
      37: isub
      38: invokestatic  #7                  // Method java/lang/Math.min:(II)I
      41: istore        5
      43: aload_0
      44: getfield      #2                  // Field chunk:Lorg/apache/axiom/blob/MemoryBlobChunk;
      47: getfield      #8                  // Field org/apache/axiom/blob/MemoryBlobChunk.buffer:[B
      50: aload_0
      51: getfield      #3                  // Field index:I
      54: aload_1
      55: iload_2
      56: iload         5
      58: invokestatic  #9                  // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      61: aload_0
      62: dup
      63: getfield      #3                  // Field index:I
      66: iload         5
      68: iadd
      69: putfield      #3                  // Field index:I
      72: iload_2
      73: iload         5
      75: iadd
      76: istore_2
      77: iload_3
      78: iload         5
      80: isub
      81: istore_3
      82: iload         4
      84: iload         5
      86: iadd
      87: istore        4
      89: goto          3
      92: iload         4
      94: ireturn

  public int read() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #6                  // Method updateChunk:()V
       4: aload_0
       5: getfield      #2                  // Field chunk:Lorg/apache/axiom/blob/MemoryBlobChunk;
       8: ifnonnull     13
      11: iconst_m1
      12: ireturn
      13: aload_0
      14: getfield      #2                  // Field chunk:Lorg/apache/axiom/blob/MemoryBlobChunk;
      17: getfield      #8                  // Field org/apache/axiom/blob/MemoryBlobChunk.buffer:[B
      20: aload_0
      21: dup
      22: getfield      #3                  // Field index:I
      25: dup_x1
      26: iconst_1
      27: iadd
      28: putfield      #3                  // Field index:I
      31: baload
      32: sipush        255
      35: iand
      36: ireturn

  public boolean markSupported();
    Code:
       0: iconst_1
       1: ireturn

  public synchronized void mark(int);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #2                  // Field chunk:Lorg/apache/axiom/blob/MemoryBlobChunk;
       5: putfield      #10                 // Field markChunk:Lorg/apache/axiom/blob/MemoryBlobChunk;
       8: aload_0
       9: aload_0
      10: getfield      #3                  // Field index:I
      13: putfield      #11                 // Field markIndex:I
      16: return

  public synchronized void reset() throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #10                 // Field markChunk:Lorg/apache/axiom/blob/MemoryBlobChunk;
       5: putfield      #2                  // Field chunk:Lorg/apache/axiom/blob/MemoryBlobChunk;
       8: aload_0
       9: aload_0
      10: getfield      #11                 // Field markIndex:I
      13: putfield      #3                  // Field index:I
      16: return

  public long skip(long) throws java.io.IOException;
    Code:
       0: lconst_0
       1: lstore_3
       2: lload_1
       3: lconst_0
       4: lcmp
       5: ifle          68
       8: aload_0
       9: invokespecial #6                  // Method updateChunk:()V
      12: aload_0
      13: getfield      #2                  // Field chunk:Lorg/apache/axiom/blob/MemoryBlobChunk;
      16: ifnonnull     22
      19: goto          68
      22: lload_1
      23: aload_0
      24: getfield      #2                  // Field chunk:Lorg/apache/axiom/blob/MemoryBlobChunk;
      27: getfield      #4                  // Field org/apache/axiom/blob/MemoryBlobChunk.size:I
      30: aload_0
      31: getfield      #3                  // Field index:I
      34: isub
      35: i2l
      36: invokestatic  #12                 // Method java/lang/Math.min:(JJ)J
      39: l2i
      40: istore        5
      42: aload_0
      43: dup
      44: getfield      #3                  // Field index:I
      47: iload         5
      49: iadd
      50: putfield      #3                  // Field index:I
      53: lload_3
      54: iload         5
      56: i2l
      57: ladd
      58: lstore_3
      59: lload_1
      60: iload         5
      62: i2l
      63: lsub
      64: lstore_1
      65: goto          2
      68: lload_3
      69: lreturn

  public int available() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field chunk:Lorg/apache/axiom/blob/MemoryBlobChunk;
       4: ifnonnull     9
       7: iconst_0
       8: ireturn
       9: aload_0
      10: getfield      #2                  // Field chunk:Lorg/apache/axiom/blob/MemoryBlobChunk;
      13: getfield      #4                  // Field org/apache/axiom/blob/MemoryBlobChunk.size:I
      16: aload_0
      17: getfield      #3                  // Field index:I
      20: isub
      21: i2l
      22: lstore_1
      23: aload_0
      24: getfield      #2                  // Field chunk:Lorg/apache/axiom/blob/MemoryBlobChunk;
      27: getfield      #5                  // Field org/apache/axiom/blob/MemoryBlobChunk.nextChunk:Lorg/apache/axiom/blob/MemoryBlobChunk;
      30: astore_3
      31: aload_3
      32: ifnull        62
      35: lload_1
      36: aload_3
      37: getfield      #4                  // Field org/apache/axiom/blob/MemoryBlobChunk.size:I
      40: i2l
      41: ladd
      42: lstore_1
      43: lload_1
      44: ldc2_w        #14                 // long 2147483647l
      47: lcmp
      48: ifle          54
      51: ldc           #16                 // int 2147483647
      53: ireturn
      54: aload_3
      55: getfield      #5                  // Field org/apache/axiom/blob/MemoryBlobChunk.nextChunk:Lorg/apache/axiom/blob/MemoryBlobChunk;
      58: astore_3
      59: goto          31
      62: lload_1
      63: l2i
      64: ireturn

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: aconst_null
       2: putfield      #2                  // Field chunk:Lorg/apache/axiom/blob/MemoryBlobChunk;
       5: return
}
