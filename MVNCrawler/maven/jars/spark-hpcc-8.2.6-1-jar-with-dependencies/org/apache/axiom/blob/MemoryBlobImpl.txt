Compiled from "MemoryBlobImpl.java"
final class org.apache.axiom.blob.MemoryBlobImpl implements org.apache.axiom.blob.MemoryBlob {
  private org.apache.axiom.blob.MemoryBlobChunk firstChunk;

  private boolean committed;

  org.apache.axiom.blob.MemoryBlobImpl();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public long getSize();
    Code:
       0: aload_0
       1: getfield      #2                  // Field firstChunk:Lorg/apache/axiom/blob/MemoryBlobChunk;
       4: ifnull        14
       7: aload_0
       8: getfield      #3                  // Field committed:Z
      11: ifne          22
      14: new           #4                  // class java/lang/IllegalStateException
      17: dup
      18: invokespecial #5                  // Method java/lang/IllegalStateException."<init>":()V
      21: athrow
      22: lconst_0
      23: lstore_1
      24: aload_0
      25: getfield      #2                  // Field firstChunk:Lorg/apache/axiom/blob/MemoryBlobChunk;
      28: astore_3
      29: aload_3
      30: ifnull        49
      33: lload_1
      34: aload_3
      35: getfield      #6                  // Field org/apache/axiom/blob/MemoryBlobChunk.size:I
      38: i2l
      39: ladd
      40: lstore_1
      41: aload_3
      42: getfield      #7                  // Field org/apache/axiom/blob/MemoryBlobChunk.nextChunk:Lorg/apache/axiom/blob/MemoryBlobChunk;
      45: astore_3
      46: goto          29
      49: lload_1
      50: lreturn

  public java.io.OutputStream getOutputStream();
    Code:
       0: aload_0
       1: invokespecial #8                  // Method internalGetOutputStream:()Lorg/apache/axiom/blob/MemoryBlobOutputStream;
       4: areturn

  private org.apache.axiom.blob.MemoryBlobOutputStream internalGetOutputStream();
    Code:
       0: aload_0
       1: getfield      #2                  // Field firstChunk:Lorg/apache/axiom/blob/MemoryBlobChunk;
       4: ifnonnull     14
       7: aload_0
       8: getfield      #3                  // Field committed:Z
      11: ifeq          22
      14: new           #4                  // class java/lang/IllegalStateException
      17: dup
      18: invokespecial #5                  // Method java/lang/IllegalStateException."<init>":()V
      21: athrow
      22: new           #9                  // class org/apache/axiom/blob/MemoryBlobOutputStream
      25: dup
      26: aload_0
      27: aload_0
      28: new           #10                 // class org/apache/axiom/blob/MemoryBlobChunk
      31: dup
      32: sipush        4096
      35: invokespecial #11                 // Method org/apache/axiom/blob/MemoryBlobChunk."<init>":(I)V
      38: dup_x1
      39: putfield      #2                  // Field firstChunk:Lorg/apache/axiom/blob/MemoryBlobChunk;
      42: invokespecial #12                 // Method org/apache/axiom/blob/MemoryBlobOutputStream."<init>":(Lorg/apache/axiom/blob/MemoryBlobImpl;Lorg/apache/axiom/blob/MemoryBlobChunk;)V
      45: areturn

  void commit();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #3                  // Field committed:Z
       5: return

  public long readFrom(java.io.InputStream) throws org.apache.axiom.ext.io.StreamCopyException;
    Code:
       0: aload_0
       1: invokespecial #8                  // Method internalGetOutputStream:()Lorg/apache/axiom/blob/MemoryBlobOutputStream;
       4: astore_2
       5: aload_2
       6: aload_1
       7: ldc2_w        #13                 // long -1l
      10: invokevirtual #15                 // Method org/apache/axiom/blob/MemoryBlobOutputStream.readFrom:(Ljava/io/InputStream;J)J
      13: lstore_3
      14: aload_2
      15: invokevirtual #16                 // Method org/apache/axiom/blob/MemoryBlobOutputStream.close:()V
      18: lload_3
      19: lreturn
      20: astore        5
      22: aload_2
      23: invokevirtual #16                 // Method org/apache/axiom/blob/MemoryBlobOutputStream.close:()V
      26: aload         5
      28: athrow
    Exception table:
       from    to  target type
           5    14    20   any
          20    22    20   any

  public java.io.InputStream getInputStream();
    Code:
       0: aload_0
       1: iconst_1
       2: invokevirtual #17                 // Method getInputStream:(Z)Ljava/io/InputStream;
       5: areturn

  public java.io.InputStream readOnce();
    Code:
       0: aload_0
       1: iconst_0
       2: invokevirtual #17                 // Method getInputStream:(Z)Ljava/io/InputStream;
       5: areturn

  public java.io.InputStream getInputStream(boolean);
    Code:
       0: aload_0
       1: getfield      #2                  // Field firstChunk:Lorg/apache/axiom/blob/MemoryBlobChunk;
       4: ifnull        14
       7: aload_0
       8: getfield      #3                  // Field committed:Z
      11: ifne          22
      14: new           #4                  // class java/lang/IllegalStateException
      17: dup
      18: invokespecial #5                  // Method java/lang/IllegalStateException."<init>":()V
      21: athrow
      22: new           #18                 // class org/apache/axiom/blob/MemoryBlobInputStream
      25: dup
      26: aload_0
      27: getfield      #2                  // Field firstChunk:Lorg/apache/axiom/blob/MemoryBlobChunk;
      30: invokespecial #19                 // Method org/apache/axiom/blob/MemoryBlobInputStream."<init>":(Lorg/apache/axiom/blob/MemoryBlobChunk;)V
      33: astore_2
      34: iload_1
      35: ifne          43
      38: aload_0
      39: aconst_null
      40: putfield      #2                  // Field firstChunk:Lorg/apache/axiom/blob/MemoryBlobChunk;
      43: aload_2
      44: areturn

  public void writeTo(java.io.OutputStream) throws org.apache.axiom.ext.io.StreamCopyException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field firstChunk:Lorg/apache/axiom/blob/MemoryBlobChunk;
       4: ifnull        14
       7: aload_0
       8: getfield      #3                  // Field committed:Z
      11: ifne          22
      14: new           #4                  // class java/lang/IllegalStateException
      17: dup
      18: invokespecial #5                  // Method java/lang/IllegalStateException."<init>":()V
      21: athrow
      22: aload_0
      23: getfield      #2                  // Field firstChunk:Lorg/apache/axiom/blob/MemoryBlobChunk;
      26: astore_2
      27: aload_2
      28: ifnull        59
      31: aload_2
      32: getfield      #6                  // Field org/apache/axiom/blob/MemoryBlobChunk.size:I
      35: ifle          51
      38: aload_1
      39: aload_2
      40: getfield      #20                 // Field org/apache/axiom/blob/MemoryBlobChunk.buffer:[B
      43: iconst_0
      44: aload_2
      45: getfield      #6                  // Field org/apache/axiom/blob/MemoryBlobChunk.size:I
      48: invokevirtual #21                 // Method java/io/OutputStream.write:([BII)V
      51: aload_2
      52: getfield      #7                  // Field org/apache/axiom/blob/MemoryBlobChunk.nextChunk:Lorg/apache/axiom/blob/MemoryBlobChunk;
      55: astore_2
      56: goto          27
      59: goto          73
      62: astore_3
      63: new           #23                 // class org/apache/axiom/ext/io/StreamCopyException
      66: dup
      67: iconst_2
      68: aload_3
      69: invokespecial #24                 // Method org/apache/axiom/ext/io/StreamCopyException."<init>":(ILjava/io/IOException;)V
      72: athrow
      73: return
    Exception table:
       from    to  target type
          27    59    62   Class java/io/IOException

  public void release();
    Code:
       0: aload_0
       1: aconst_null
       2: putfield      #2                  // Field firstChunk:Lorg/apache/axiom/blob/MemoryBlobChunk;
       5: return
}
