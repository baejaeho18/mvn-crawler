Compiled from "OverflowableBlobImpl.java"
final class org.apache.axiom.blob.OverflowableBlobImpl implements org.apache.axiom.blob.OverflowableBlob {
  final int chunkSize;

  final org.apache.axiom.blob.WritableBlobFactory overflowBlobFactory;

  byte[][] chunks;

  int chunkIndex;

  int chunkOffset;

  org.apache.axiom.blob.WritableBlob overflowBlob;

  org.apache.axiom.blob.State state;

  org.apache.axiom.blob.OverflowableBlobImpl(int, int, org.apache.axiom.blob.WritableBlobFactory);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: getstatic     #2                  // Field org/apache/axiom/blob/State.NEW:Lorg/apache/axiom/blob/State;
       8: putfield      #3                  // Field state:Lorg/apache/axiom/blob/State;
      11: aload_0
      12: iload_2
      13: putfield      #4                  // Field chunkSize:I
      16: aload_0
      17: aload_3
      18: putfield      #5                  // Field overflowBlobFactory:Lorg/apache/axiom/blob/WritableBlobFactory;
      21: aload_0
      22: iload_1
      23: anewarray     #6                  // class "[B"
      26: putfield      #7                  // Field chunks:[[B
      29: return

  byte[] getCurrentChunk();
    Code:
       0: aload_0
       1: getfield      #8                  // Field chunkOffset:I
       4: ifne          26
       7: aload_0
       8: getfield      #4                  // Field chunkSize:I
      11: newarray       byte
      13: astore_1
      14: aload_0
      15: getfield      #7                  // Field chunks:[[B
      18: aload_0
      19: getfield      #9                  // Field chunkIndex:I
      22: aload_1
      23: aastore
      24: aload_1
      25: areturn
      26: aload_0
      27: getfield      #7                  // Field chunks:[[B
      30: aload_0
      31: getfield      #9                  // Field chunkIndex:I
      34: aaload
      35: areturn

  java.io.OutputStream switchToOverflowBlob() throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #5                  // Field overflowBlobFactory:Lorg/apache/axiom/blob/WritableBlobFactory;
       5: invokeinterface #10,  1           // InterfaceMethod org/apache/axiom/blob/WritableBlobFactory.createBlob:()Lorg/apache/axiom/blob/WritableBlob;
      10: putfield      #11                 // Field overflowBlob:Lorg/apache/axiom/blob/WritableBlob;
      13: aload_0
      14: getfield      #11                 // Field overflowBlob:Lorg/apache/axiom/blob/WritableBlob;
      17: invokeinterface #12,  1           // InterfaceMethod org/apache/axiom/blob/WritableBlob.getOutputStream:()Ljava/io/OutputStream;
      22: astore_1
      23: iconst_0
      24: istore_2
      25: iload_2
      26: aload_0
      27: getfield      #9                  // Field chunkIndex:I
      30: if_icmpge     49
      33: aload_1
      34: aload_0
      35: getfield      #7                  // Field chunks:[[B
      38: iload_2
      39: aaload
      40: invokevirtual #13                 // Method java/io/OutputStream.write:([B)V
      43: iinc          2, 1
      46: goto          25
      49: aload_0
      50: getfield      #8                  // Field chunkOffset:I
      53: ifle          74
      56: aload_1
      57: aload_0
      58: getfield      #7                  // Field chunks:[[B
      61: aload_0
      62: getfield      #9                  // Field chunkIndex:I
      65: aaload
      66: iconst_0
      67: aload_0
      68: getfield      #8                  // Field chunkOffset:I
      71: invokevirtual #14                 // Method java/io/OutputStream.write:([BII)V
      74: aload_0
      75: aconst_null
      76: checkcast     #15                 // class "[[B"
      79: putfield      #7                  // Field chunks:[[B
      82: aload_1
      83: areturn

  public java.io.OutputStream getOutputStream();
    Code:
       0: aload_0
       1: getfield      #3                  // Field state:Lorg/apache/axiom/blob/State;
       4: getstatic     #2                  // Field org/apache/axiom/blob/State.NEW:Lorg/apache/axiom/blob/State;
       7: if_acmpeq     18
      10: new           #16                 // class java/lang/IllegalStateException
      13: dup
      14: invokespecial #17                 // Method java/lang/IllegalStateException."<init>":()V
      17: athrow
      18: aload_0
      19: getstatic     #18                 // Field org/apache/axiom/blob/State.UNCOMMITTED:Lorg/apache/axiom/blob/State;
      22: putfield      #3                  // Field state:Lorg/apache/axiom/blob/State;
      25: new           #19                 // class org/apache/axiom/blob/OverflowableBlobImpl$OutputStreamImpl
      28: dup
      29: aload_0
      30: invokespecial #20                 // Method org/apache/axiom/blob/OverflowableBlobImpl$OutputStreamImpl."<init>":(Lorg/apache/axiom/blob/OverflowableBlobImpl;)V
      33: areturn

  long readFrom(java.io.InputStream, long, boolean) throws org.apache.axiom.ext.io.StreamCopyException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field state:Lorg/apache/axiom/blob/State;
       4: getstatic     #21                 // Field org/apache/axiom/blob/State.COMMITTED:Lorg/apache/axiom/blob/State;
       7: if_acmpne     18
      10: new           #16                 // class java/lang/IllegalStateException
      13: dup
      14: invokespecial #17                 // Method java/lang/IllegalStateException."<init>":()V
      17: athrow
      18: lconst_0
      19: lstore        5
      21: lload_2
      22: ldc2_w        #22                 // long -1l
      25: lcmp
      26: ifne          35
      29: ldc2_w        #25                 // long 9223372036854775807l
      32: goto          36
      35: lload_2
      36: lstore        7
      38: lload         7
      40: lconst_0
      41: lcmp
      42: ifle          235
      45: aload_0
      46: getfield      #4                  // Field chunkSize:I
      49: aload_0
      50: getfield      #8                  // Field chunkOffset:I
      53: isub
      54: istore        10
      56: iload         10
      58: i2l
      59: lload         7
      61: lcmp
      62: ifle          70
      65: lload         7
      67: l2i
      68: istore        10
      70: aload_1
      71: aload_0
      72: invokevirtual #27                 // Method getCurrentChunk:()[B
      75: aload_0
      76: getfield      #8                  // Field chunkOffset:I
      79: iload         10
      81: invokevirtual #28                 // Method java/io/InputStream.read:([BII)I
      84: istore        9
      86: goto          102
      89: astore        10
      91: new           #30                 // class org/apache/axiom/ext/io/StreamCopyException
      94: dup
      95: iconst_1
      96: aload         10
      98: invokespecial #31                 // Method org/apache/axiom/ext/io/StreamCopyException."<init>":(ILjava/io/IOException;)V
     101: athrow
     102: iload         9
     104: iconst_m1
     105: if_icmpne     111
     108: goto          235
     111: lload         5
     113: iload         9
     115: i2l
     116: ladd
     117: lstore        5
     119: lload         7
     121: iload         9
     123: i2l
     124: lsub
     125: lstore        7
     127: aload_0
     128: dup
     129: getfield      #8                  // Field chunkOffset:I
     132: iload         9
     134: iadd
     135: putfield      #8                  // Field chunkOffset:I
     138: aload_0
     139: getfield      #8                  // Field chunkOffset:I
     142: aload_0
     143: getfield      #4                  // Field chunkSize:I
     146: if_icmpne     232
     149: aload_0
     150: dup
     151: getfield      #9                  // Field chunkIndex:I
     154: iconst_1
     155: iadd
     156: putfield      #9                  // Field chunkIndex:I
     159: aload_0
     160: iconst_0
     161: putfield      #8                  // Field chunkOffset:I
     164: aload_0
     165: getfield      #9                  // Field chunkIndex:I
     168: aload_0
     169: getfield      #7                  // Field chunks:[[B
     172: arraylength
     173: if_icmpne     232
     176: aload_0
     177: invokevirtual #32                 // Method switchToOverflowBlob:()Ljava/io/OutputStream;
     180: astore        10
     182: goto          198
     185: astore        11
     187: new           #30                 // class org/apache/axiom/ext/io/StreamCopyException
     190: dup
     191: iconst_2
     192: aload         11
     194: invokespecial #31                 // Method org/apache/axiom/ext/io/StreamCopyException."<init>":(ILjava/io/IOException;)V
     197: athrow
     198: lload         5
     200: aload_1
     201: aload         10
     203: lload         7
     205: invokestatic  #33                 // Method org/apache/axiom/blob/IOUtil.copy:(Ljava/io/InputStream;Ljava/io/OutputStream;J)J
     208: ladd
     209: lstore        5
     211: aload         10
     213: invokevirtual #34                 // Method java/io/OutputStream.close:()V
     216: goto          235
     219: astore        11
     221: new           #30                 // class org/apache/axiom/ext/io/StreamCopyException
     224: dup
     225: iconst_2
     226: aload         11
     228: invokespecial #31                 // Method org/apache/axiom/ext/io/StreamCopyException."<init>":(ILjava/io/IOException;)V
     231: athrow
     232: goto          38
     235: aload_0
     236: iload         4
     238: ifeq          247
     241: getstatic     #21                 // Field org/apache/axiom/blob/State.COMMITTED:Lorg/apache/axiom/blob/State;
     244: goto          250
     247: getstatic     #18                 // Field org/apache/axiom/blob/State.UNCOMMITTED:Lorg/apache/axiom/blob/State;
     250: putfield      #3                  // Field state:Lorg/apache/axiom/blob/State;
     253: lload         5
     255: lreturn
    Exception table:
       from    to  target type
          45    86    89   Class java/io/IOException
         176   182   185   Class java/io/IOException
         211   216   219   Class java/io/IOException

  public long readFrom(java.io.InputStream) throws org.apache.axiom.ext.io.StreamCopyException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field state:Lorg/apache/axiom/blob/State;
       4: getstatic     #2                  // Field org/apache/axiom/blob/State.NEW:Lorg/apache/axiom/blob/State;
       7: if_acmpeq     18
      10: new           #16                 // class java/lang/IllegalStateException
      13: dup
      14: invokespecial #17                 // Method java/lang/IllegalStateException."<init>":()V
      17: athrow
      18: aload_0
      19: aload_1
      20: ldc2_w        #22                 // long -1l
      23: iconst_1
      24: invokevirtual #35                 // Method readFrom:(Ljava/io/InputStream;JZ)J
      27: lreturn

  public java.io.InputStream getInputStream() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field state:Lorg/apache/axiom/blob/State;
       4: getstatic     #21                 // Field org/apache/axiom/blob/State.COMMITTED:Lorg/apache/axiom/blob/State;
       7: if_acmpeq     18
      10: new           #16                 // class java/lang/IllegalStateException
      13: dup
      14: invokespecial #17                 // Method java/lang/IllegalStateException."<init>":()V
      17: athrow
      18: aload_0
      19: getfield      #11                 // Field overflowBlob:Lorg/apache/axiom/blob/WritableBlob;
      22: ifnull        35
      25: aload_0
      26: getfield      #11                 // Field overflowBlob:Lorg/apache/axiom/blob/WritableBlob;
      29: invokeinterface #36,  1           // InterfaceMethod org/apache/axiom/blob/WritableBlob.getInputStream:()Ljava/io/InputStream;
      34: areturn
      35: new           #37                 // class org/apache/axiom/blob/OverflowableBlobImpl$InputStreamImpl
      38: dup
      39: aload_0
      40: invokespecial #38                 // Method org/apache/axiom/blob/OverflowableBlobImpl$InputStreamImpl."<init>":(Lorg/apache/axiom/blob/OverflowableBlobImpl;)V
      43: areturn

  public void writeTo(java.io.OutputStream) throws org.apache.axiom.ext.io.StreamCopyException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field state:Lorg/apache/axiom/blob/State;
       4: getstatic     #21                 // Field org/apache/axiom/blob/State.COMMITTED:Lorg/apache/axiom/blob/State;
       7: if_acmpeq     18
      10: new           #16                 // class java/lang/IllegalStateException
      13: dup
      14: invokespecial #17                 // Method java/lang/IllegalStateException."<init>":()V
      17: athrow
      18: aload_0
      19: getfield      #11                 // Field overflowBlob:Lorg/apache/axiom/blob/WritableBlob;
      22: ifnull        38
      25: aload_0
      26: getfield      #11                 // Field overflowBlob:Lorg/apache/axiom/blob/WritableBlob;
      29: aload_1
      30: invokeinterface #39,  2           // InterfaceMethod org/apache/axiom/blob/WritableBlob.writeTo:(Ljava/io/OutputStream;)V
      35: goto          103
      38: iconst_0
      39: istore_2
      40: iload_2
      41: aload_0
      42: getfield      #9                  // Field chunkIndex:I
      45: if_icmpge     64
      48: aload_1
      49: aload_0
      50: getfield      #7                  // Field chunks:[[B
      53: iload_2
      54: aaload
      55: invokevirtual #13                 // Method java/io/OutputStream.write:([B)V
      58: iinc          2, 1
      61: goto          40
      64: aload_0
      65: getfield      #8                  // Field chunkOffset:I
      68: ifle          89
      71: aload_1
      72: aload_0
      73: getfield      #7                  // Field chunks:[[B
      76: aload_0
      77: getfield      #9                  // Field chunkIndex:I
      80: aaload
      81: iconst_0
      82: aload_0
      83: getfield      #8                  // Field chunkOffset:I
      86: invokevirtual #14                 // Method java/io/OutputStream.write:([BII)V
      89: goto          103
      92: astore_2
      93: new           #30                 // class org/apache/axiom/ext/io/StreamCopyException
      96: dup
      97: iconst_2
      98: aload_2
      99: invokespecial #31                 // Method org/apache/axiom/ext/io/StreamCopyException."<init>":(ILjava/io/IOException;)V
     102: athrow
     103: return
    Exception table:
       from    to  target type
          38    89    92   Class java/io/IOException

  public long getSize();
    Code:
       0: aload_0
       1: getfield      #3                  // Field state:Lorg/apache/axiom/blob/State;
       4: getstatic     #21                 // Field org/apache/axiom/blob/State.COMMITTED:Lorg/apache/axiom/blob/State;
       7: if_acmpeq     18
      10: new           #16                 // class java/lang/IllegalStateException
      13: dup
      14: invokespecial #17                 // Method java/lang/IllegalStateException."<init>":()V
      17: athrow
      18: aload_0
      19: getfield      #11                 // Field overflowBlob:Lorg/apache/axiom/blob/WritableBlob;
      22: ifnull        35
      25: aload_0
      26: getfield      #11                 // Field overflowBlob:Lorg/apache/axiom/blob/WritableBlob;
      29: invokeinterface #40,  1           // InterfaceMethod org/apache/axiom/blob/WritableBlob.getSize:()J
      34: lreturn
      35: aload_0
      36: getfield      #9                  // Field chunkIndex:I
      39: aload_0
      40: getfield      #4                  // Field chunkSize:I
      43: imul
      44: aload_0
      45: getfield      #8                  // Field chunkOffset:I
      48: iadd
      49: i2l
      50: lreturn

  public void release() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #11                 // Field overflowBlob:Lorg/apache/axiom/blob/WritableBlob;
       4: ifnull        21
       7: aload_0
       8: getfield      #11                 // Field overflowBlob:Lorg/apache/axiom/blob/WritableBlob;
      11: invokeinterface #41,  1           // InterfaceMethod org/apache/axiom/blob/WritableBlob.release:()V
      16: aload_0
      17: aconst_null
      18: putfield      #11                 // Field overflowBlob:Lorg/apache/axiom/blob/WritableBlob;
      21: aload_0
      22: getstatic     #42                 // Field org/apache/axiom/blob/State.RELEASED:Lorg/apache/axiom/blob/State;
      25: putfield      #3                  // Field state:Lorg/apache/axiom/blob/State;
      28: return

  public org.apache.axiom.blob.WritableBlob getOverflowBlob();
    Code:
       0: aload_0
       1: getfield      #11                 // Field overflowBlob:Lorg/apache/axiom/blob/WritableBlob;
       4: areturn
}
