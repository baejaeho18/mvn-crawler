Compiled from "MemoryBlobOutputStream.java"
final class org.apache.axiom.blob.MemoryBlobOutputStream extends java.io.OutputStream implements org.apache.axiom.ext.io.ReadFromSupport {
  private final org.apache.axiom.blob.MemoryBlobImpl blob;

  private org.apache.axiom.blob.MemoryBlobChunk chunk;

  org.apache.axiom.blob.MemoryBlobOutputStream(org.apache.axiom.blob.MemoryBlobImpl, org.apache.axiom.blob.MemoryBlobChunk);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/io/OutputStream."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field blob:Lorg/apache/axiom/blob/MemoryBlobImpl;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field chunk:Lorg/apache/axiom/blob/MemoryBlobChunk;
      14: return

  private void updateChunk();
    Code:
       0: aload_0
       1: getfield      #3                  // Field chunk:Lorg/apache/axiom/blob/MemoryBlobChunk;
       4: getfield      #4                  // Field org/apache/axiom/blob/MemoryBlobChunk.size:I
       7: aload_0
       8: getfield      #3                  // Field chunk:Lorg/apache/axiom/blob/MemoryBlobChunk;
      11: getfield      #5                  // Field org/apache/axiom/blob/MemoryBlobChunk.buffer:[B
      14: arraylength
      15: if_icmpne     29
      18: aload_0
      19: aload_0
      20: getfield      #3                  // Field chunk:Lorg/apache/axiom/blob/MemoryBlobChunk;
      23: invokevirtual #6                  // Method org/apache/axiom/blob/MemoryBlobChunk.allocateNextChunk:()Lorg/apache/axiom/blob/MemoryBlobChunk;
      26: putfield      #3                  // Field chunk:Lorg/apache/axiom/blob/MemoryBlobChunk;
      29: return

  public void write(byte[], int, int);
    Code:
       0: aload_0
       1: getfield      #3                  // Field chunk:Lorg/apache/axiom/blob/MemoryBlobChunk;
       4: ifnonnull     15
       7: new           #7                  // class java/lang/IllegalStateException
      10: dup
      11: invokespecial #8                  // Method java/lang/IllegalStateException."<init>":()V
      14: athrow
      15: iconst_0
      16: istore        4
      18: iload         4
      20: iload_3
      21: if_icmpge     103
      24: aload_0
      25: invokespecial #9                  // Method updateChunk:()V
      28: iload_3
      29: iload         4
      31: isub
      32: aload_0
      33: getfield      #3                  // Field chunk:Lorg/apache/axiom/blob/MemoryBlobChunk;
      36: getfield      #5                  // Field org/apache/axiom/blob/MemoryBlobChunk.buffer:[B
      39: arraylength
      40: aload_0
      41: getfield      #3                  // Field chunk:Lorg/apache/axiom/blob/MemoryBlobChunk;
      44: getfield      #4                  // Field org/apache/axiom/blob/MemoryBlobChunk.size:I
      47: isub
      48: invokestatic  #10                 // Method java/lang/Math.min:(II)I
      51: istore        5
      53: aload_1
      54: iload_2
      55: aload_0
      56: getfield      #3                  // Field chunk:Lorg/apache/axiom/blob/MemoryBlobChunk;
      59: getfield      #5                  // Field org/apache/axiom/blob/MemoryBlobChunk.buffer:[B
      62: aload_0
      63: getfield      #3                  // Field chunk:Lorg/apache/axiom/blob/MemoryBlobChunk;
      66: getfield      #4                  // Field org/apache/axiom/blob/MemoryBlobChunk.size:I
      69: iload         5
      71: invokestatic  #11                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      74: aload_0
      75: getfield      #3                  // Field chunk:Lorg/apache/axiom/blob/MemoryBlobChunk;
      78: dup
      79: getfield      #4                  // Field org/apache/axiom/blob/MemoryBlobChunk.size:I
      82: iload         5
      84: iadd
      85: putfield      #4                  // Field org/apache/axiom/blob/MemoryBlobChunk.size:I
      88: iload         4
      90: iload         5
      92: iadd
      93: istore        4
      95: iload_2
      96: iload         5
      98: iadd
      99: istore_2
     100: goto          18
     103: return

  public void write(int);
    Code:
       0: aload_0
       1: getfield      #3                  // Field chunk:Lorg/apache/axiom/blob/MemoryBlobChunk;
       4: ifnonnull     15
       7: new           #7                  // class java/lang/IllegalStateException
      10: dup
      11: invokespecial #8                  // Method java/lang/IllegalStateException."<init>":()V
      14: athrow
      15: aload_0
      16: invokespecial #9                  // Method updateChunk:()V
      19: aload_0
      20: getfield      #3                  // Field chunk:Lorg/apache/axiom/blob/MemoryBlobChunk;
      23: getfield      #5                  // Field org/apache/axiom/blob/MemoryBlobChunk.buffer:[B
      26: aload_0
      27: getfield      #3                  // Field chunk:Lorg/apache/axiom/blob/MemoryBlobChunk;
      30: dup
      31: getfield      #4                  // Field org/apache/axiom/blob/MemoryBlobChunk.size:I
      34: dup_x1
      35: iconst_1
      36: iadd
      37: putfield      #4                  // Field org/apache/axiom/blob/MemoryBlobChunk.size:I
      40: iload_1
      41: i2b
      42: bastore
      43: return

  public long readFrom(java.io.InputStream, long) throws org.apache.axiom.ext.io.StreamCopyException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field chunk:Lorg/apache/axiom/blob/MemoryBlobChunk;
       4: ifnonnull     15
       7: new           #7                  // class java/lang/IllegalStateException
      10: dup
      11: invokespecial #8                  // Method java/lang/IllegalStateException."<init>":()V
      14: athrow
      15: lconst_0
      16: lstore        4
      18: lload_2
      19: ldc2_w        #12                 // long -1l
      22: lcmp
      23: ifne          32
      26: ldc2_w        #15                 // long 9223372036854775807l
      29: goto          33
      32: lload_2
      33: lstore        6
      35: lload         6
      37: lconst_0
      38: lcmp
      39: ifle          147
      42: aload_0
      43: invokespecial #9                  // Method updateChunk:()V
      46: aload_1
      47: aload_0
      48: getfield      #3                  // Field chunk:Lorg/apache/axiom/blob/MemoryBlobChunk;
      51: getfield      #5                  // Field org/apache/axiom/blob/MemoryBlobChunk.buffer:[B
      54: aload_0
      55: getfield      #3                  // Field chunk:Lorg/apache/axiom/blob/MemoryBlobChunk;
      58: getfield      #4                  // Field org/apache/axiom/blob/MemoryBlobChunk.size:I
      61: lload         6
      63: aload_0
      64: getfield      #3                  // Field chunk:Lorg/apache/axiom/blob/MemoryBlobChunk;
      67: getfield      #5                  // Field org/apache/axiom/blob/MemoryBlobChunk.buffer:[B
      70: arraylength
      71: aload_0
      72: getfield      #3                  // Field chunk:Lorg/apache/axiom/blob/MemoryBlobChunk;
      75: getfield      #4                  // Field org/apache/axiom/blob/MemoryBlobChunk.size:I
      78: isub
      79: i2l
      80: invokestatic  #17                 // Method java/lang/Math.min:(JJ)J
      83: l2i
      84: invokevirtual #18                 // Method java/io/InputStream.read:([BII)I
      87: istore        8
      89: goto          105
      92: astore        9
      94: new           #20                 // class org/apache/axiom/ext/io/StreamCopyException
      97: dup
      98: iconst_1
      99: aload         9
     101: invokespecial #21                 // Method org/apache/axiom/ext/io/StreamCopyException."<init>":(ILjava/io/IOException;)V
     104: athrow
     105: iload         8
     107: iconst_m1
     108: if_icmpne     114
     111: goto          147
     114: aload_0
     115: getfield      #3                  // Field chunk:Lorg/apache/axiom/blob/MemoryBlobChunk;
     118: dup
     119: getfield      #4                  // Field org/apache/axiom/blob/MemoryBlobChunk.size:I
     122: iload         8
     124: iadd
     125: putfield      #4                  // Field org/apache/axiom/blob/MemoryBlobChunk.size:I
     128: lload         4
     130: iload         8
     132: i2l
     133: ladd
     134: lstore        4
     136: lload         6
     138: iload         8
     140: i2l
     141: lsub
     142: lstore        6
     144: goto          35
     147: lload         4
     149: lreturn
    Exception table:
       from    to  target type
          46    89    92   Class java/io/IOException

  public void close();
    Code:
       0: aload_0
       1: getfield      #2                  // Field blob:Lorg/apache/axiom/blob/MemoryBlobImpl;
       4: invokevirtual #22                 // Method org/apache/axiom/blob/MemoryBlobImpl.commit:()V
       7: aload_0
       8: aconst_null
       9: putfield      #3                  // Field chunk:Lorg/apache/axiom/blob/MemoryBlobChunk;
      12: return
}
