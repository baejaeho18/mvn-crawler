Compiled from "OverflowableBlobImpl.java"
class org.apache.axiom.blob.OverflowableBlobImpl$OutputStreamImpl extends java.io.OutputStream implements org.apache.axiom.ext.io.ReadFromSupport {
  private java.io.OutputStream overflowOutputStream;

  final org.apache.axiom.blob.OverflowableBlobImpl this$0;

  org.apache.axiom.blob.OverflowableBlobImpl$OutputStreamImpl(org.apache.axiom.blob.OverflowableBlobImpl);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lorg/apache/axiom/blob/OverflowableBlobImpl;
       5: aload_0
       6: invokespecial #2                  // Method java/io/OutputStream."<init>":()V
       9: return

  public void write(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lorg/apache/axiom/blob/OverflowableBlobImpl;
       4: getfield      #3                  // Field org/apache/axiom/blob/OverflowableBlobImpl.state:Lorg/apache/axiom/blob/State;
       7: getstatic     #4                  // Field org/apache/axiom/blob/State.UNCOMMITTED:Lorg/apache/axiom/blob/State;
      10: if_acmpeq     21
      13: new           #5                  // class java/lang/IllegalStateException
      16: dup
      17: invokespecial #6                  // Method java/lang/IllegalStateException."<init>":()V
      20: athrow
      21: aload_0
      22: getfield      #7                  // Field overflowOutputStream:Ljava/io/OutputStream;
      25: ifnull        41
      28: aload_0
      29: getfield      #7                  // Field overflowOutputStream:Ljava/io/OutputStream;
      32: aload_1
      33: iload_2
      34: iload_3
      35: invokevirtual #8                  // Method java/io/OutputStream.write:([BII)V
      38: goto          216
      41: iload_3
      42: aload_0
      43: getfield      #1                  // Field this$0:Lorg/apache/axiom/blob/OverflowableBlobImpl;
      46: getfield      #9                  // Field org/apache/axiom/blob/OverflowableBlobImpl.chunks:[[B
      49: arraylength
      50: aload_0
      51: getfield      #1                  // Field this$0:Lorg/apache/axiom/blob/OverflowableBlobImpl;
      54: getfield      #10                 // Field org/apache/axiom/blob/OverflowableBlobImpl.chunkIndex:I
      57: isub
      58: aload_0
      59: getfield      #1                  // Field this$0:Lorg/apache/axiom/blob/OverflowableBlobImpl;
      62: getfield      #11                 // Field org/apache/axiom/blob/OverflowableBlobImpl.chunkSize:I
      65: imul
      66: aload_0
      67: getfield      #1                  // Field this$0:Lorg/apache/axiom/blob/OverflowableBlobImpl;
      70: getfield      #12                 // Field org/apache/axiom/blob/OverflowableBlobImpl.chunkOffset:I
      73: isub
      74: if_icmple     101
      77: aload_0
      78: aload_0
      79: getfield      #1                  // Field this$0:Lorg/apache/axiom/blob/OverflowableBlobImpl;
      82: invokevirtual #13                 // Method org/apache/axiom/blob/OverflowableBlobImpl.switchToOverflowBlob:()Ljava/io/OutputStream;
      85: putfield      #7                  // Field overflowOutputStream:Ljava/io/OutputStream;
      88: aload_0
      89: getfield      #7                  // Field overflowOutputStream:Ljava/io/OutputStream;
      92: aload_1
      93: iload_2
      94: iload_3
      95: invokevirtual #8                  // Method java/io/OutputStream.write:([BII)V
      98: goto          216
     101: iload_3
     102: ifle          216
     105: aload_0
     106: getfield      #1                  // Field this$0:Lorg/apache/axiom/blob/OverflowableBlobImpl;
     109: invokevirtual #14                 // Method org/apache/axiom/blob/OverflowableBlobImpl.getCurrentChunk:()[B
     112: astore        4
     114: iload_3
     115: aload_0
     116: getfield      #1                  // Field this$0:Lorg/apache/axiom/blob/OverflowableBlobImpl;
     119: getfield      #11                 // Field org/apache/axiom/blob/OverflowableBlobImpl.chunkSize:I
     122: aload_0
     123: getfield      #1                  // Field this$0:Lorg/apache/axiom/blob/OverflowableBlobImpl;
     126: getfield      #12                 // Field org/apache/axiom/blob/OverflowableBlobImpl.chunkOffset:I
     129: isub
     130: invokestatic  #15                 // Method java/lang/Math.min:(II)I
     133: istore        5
     135: aload_1
     136: iload_2
     137: aload         4
     139: aload_0
     140: getfield      #1                  // Field this$0:Lorg/apache/axiom/blob/OverflowableBlobImpl;
     143: getfield      #12                 // Field org/apache/axiom/blob/OverflowableBlobImpl.chunkOffset:I
     146: iload         5
     148: invokestatic  #16                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
     151: iload_3
     152: iload         5
     154: isub
     155: istore_3
     156: iload_2
     157: iload         5
     159: iadd
     160: istore_2
     161: aload_0
     162: getfield      #1                  // Field this$0:Lorg/apache/axiom/blob/OverflowableBlobImpl;
     165: dup
     166: getfield      #12                 // Field org/apache/axiom/blob/OverflowableBlobImpl.chunkOffset:I
     169: iload         5
     171: iadd
     172: putfield      #12                 // Field org/apache/axiom/blob/OverflowableBlobImpl.chunkOffset:I
     175: aload_0
     176: getfield      #1                  // Field this$0:Lorg/apache/axiom/blob/OverflowableBlobImpl;
     179: getfield      #12                 // Field org/apache/axiom/blob/OverflowableBlobImpl.chunkOffset:I
     182: aload_0
     183: getfield      #1                  // Field this$0:Lorg/apache/axiom/blob/OverflowableBlobImpl;
     186: getfield      #11                 // Field org/apache/axiom/blob/OverflowableBlobImpl.chunkSize:I
     189: if_icmpne     213
     192: aload_0
     193: getfield      #1                  // Field this$0:Lorg/apache/axiom/blob/OverflowableBlobImpl;
     196: dup
     197: getfield      #10                 // Field org/apache/axiom/blob/OverflowableBlobImpl.chunkIndex:I
     200: iconst_1
     201: iadd
     202: putfield      #10                 // Field org/apache/axiom/blob/OverflowableBlobImpl.chunkIndex:I
     205: aload_0
     206: getfield      #1                  // Field this$0:Lorg/apache/axiom/blob/OverflowableBlobImpl;
     209: iconst_0
     210: putfield      #12                 // Field org/apache/axiom/blob/OverflowableBlobImpl.chunkOffset:I
     213: goto          101
     216: return

  public void write(byte[]) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_1
       4: arraylength
       5: invokevirtual #17                 // Method write:([BII)V
       8: return

  public void write(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: iconst_1
       2: newarray       byte
       4: dup
       5: iconst_0
       6: iload_1
       7: i2b
       8: bastore
       9: iconst_0
      10: iconst_1
      11: invokevirtual #17                 // Method write:([BII)V
      14: return

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #7                  // Field overflowOutputStream:Ljava/io/OutputStream;
       4: ifnull        14
       7: aload_0
       8: getfield      #7                  // Field overflowOutputStream:Ljava/io/OutputStream;
      11: invokevirtual #18                 // Method java/io/OutputStream.close:()V
      14: aload_0
      15: getfield      #1                  // Field this$0:Lorg/apache/axiom/blob/OverflowableBlobImpl;
      18: getstatic     #19                 // Field org/apache/axiom/blob/State.COMMITTED:Lorg/apache/axiom/blob/State;
      21: putfield      #3                  // Field org/apache/axiom/blob/OverflowableBlobImpl.state:Lorg/apache/axiom/blob/State;
      24: return

  public long readFrom(java.io.InputStream, long) throws org.apache.axiom.ext.io.StreamCopyException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lorg/apache/axiom/blob/OverflowableBlobImpl;
       4: aload_1
       5: lload_2
       6: iconst_0
       7: invokevirtual #20                 // Method org/apache/axiom/blob/OverflowableBlobImpl.readFrom:(Ljava/io/InputStream;JZ)J
      10: lreturn
}
