Compiled from "BufferUtils.java"
public class org.apache.axiom.attachments.impl.BufferUtils {
  private static final org.apache.commons.logging.Log log;

  public static final int BUFFER_LEN;

  static boolean ENABLE_FILE_CHANNEL;

  static boolean ENABLE_BAAOS_OPT;

  private static byte[] _cacheBuffer;

  private static boolean _cacheBufferInUse;

  private static java.nio.ByteBuffer _cacheByteBuffer;

  private static boolean _cacheByteBufferInUse;

  public org.apache.axiom.attachments.impl.BufferUtils();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public static void inputStream2OutputStream(java.io.InputStream, java.io.OutputStream) throws java.io.IOException;
    Code:
       0: getstatic     #2                  // Field ENABLE_FILE_CHANNEL:Z
       3: ifeq          25
       6: aload_1
       7: instanceof    #3                  // class java/io/FileOutputStream
      10: ifeq          25
      13: aload_0
      14: aload_1
      15: checkcast     #3                  // class java/io/FileOutputStream
      18: invokestatic  #4                  // Method inputStream2FileOutputStream:(Ljava/io/InputStream;Ljava/io/FileOutputStream;)Z
      21: ifeq          25
      24: return
      25: getstatic     #5                  // Field ENABLE_BAAOS_OPT:Z
      28: ifeq          53
      31: aload_1
      32: instanceof    #6                  // class org/apache/axiom/ext/io/ReadFromSupport
      35: ifeq          53
      38: aload_1
      39: checkcast     #6                  // class org/apache/axiom/ext/io/ReadFromSupport
      42: aload_0
      43: ldc2_w        #8                  // long 9223372036854775807l
      46: invokeinterface #10,  4           // InterfaceMethod org/apache/axiom/ext/io/ReadFromSupport.readFrom:(Ljava/io/InputStream;J)J
      51: pop2
      52: return
      53: invokestatic  #11                 // Method getTempBuffer:()[B
      56: astore_2
      57: aload_0
      58: aload_2
      59: invokevirtual #12                 // Method java/io/InputStream.read:([B)I
      62: dup
      63: istore_3
      64: iconst_m1
      65: if_icmpeq     78
      68: aload_1
      69: aload_2
      70: iconst_0
      71: iload_3
      72: invokevirtual #13                 // Method java/io/OutputStream.write:([BII)V
      75: goto          57
      78: aload_2
      79: invokestatic  #14                 // Method releaseTempBuffer:([B)V
      82: goto          94
      85: astore        4
      87: aload_2
      88: invokestatic  #14                 // Method releaseTempBuffer:([B)V
      91: aload         4
      93: athrow
      94: return
    Exception table:
       from    to  target type
          57    78    85   any
          85    87    85   any

  public static int inputStream2OutputStream(java.io.InputStream, java.io.OutputStream, int) throws java.io.IOException;
    Code:
       0: getstatic     #5                  // Field ENABLE_BAAOS_OPT:Z
       3: ifeq          27
       6: aload_1
       7: instanceof    #6                  // class org/apache/axiom/ext/io/ReadFromSupport
      10: ifeq          27
      13: aload_1
      14: checkcast     #6                  // class org/apache/axiom/ext/io/ReadFromSupport
      17: aload_0
      18: iload_2
      19: i2l
      20: invokeinterface #10,  4           // InterfaceMethod org/apache/axiom/ext/io/ReadFromSupport.readFrom:(Ljava/io/InputStream;J)J
      25: l2i
      26: ireturn
      27: invokestatic  #11                 // Method getTempBuffer:()[B
      30: astore_3
      31: iconst_0
      32: istore        4
      34: iconst_0
      35: istore        5
      37: iload_2
      38: iload         4
      40: isub
      41: sipush        4096
      44: if_icmple     53
      47: sipush        4096
      50: goto          57
      53: iload_2
      54: iload         4
      56: isub
      57: istore        6
      59: aload_0
      60: aload_3
      61: iconst_0
      62: iload         6
      64: invokevirtual #16                 // Method java/io/InputStream.read:([BII)I
      67: istore        5
      69: iload         5
      71: ifle          94
      74: aload_1
      75: aload_3
      76: iconst_0
      77: iload         5
      79: invokevirtual #13                 // Method java/io/OutputStream.write:([BII)V
      82: iload         5
      84: ifle          94
      87: iload         4
      89: iload         5
      91: iadd
      92: istore        4
      94: iload         4
      96: iload_2
      97: if_icmpge     112
     100: iload         5
     102: ifgt          37
     105: aload_0
     106: invokevirtual #17                 // Method java/io/InputStream.available:()I
     109: ifgt          37
     112: iload         4
     114: istore        6
     116: aload_3
     117: invokestatic  #14                 // Method releaseTempBuffer:([B)V
     120: iload         6
     122: ireturn
     123: astore        7
     125: aload_3
     126: invokestatic  #14                 // Method releaseTempBuffer:([B)V
     129: aload         7
     131: athrow
    Exception table:
       from    to  target type
          37   116   123   any
         123   125   123   any

  public static boolean inputStream2FileOutputStream(java.io.InputStream, java.io.FileOutputStream) throws java.io.IOException;
    Code:
       0: aconst_null
       1: astore_2
       2: aconst_null
       3: astore_3
       4: aconst_null
       5: astore        4
       7: aload_1
       8: invokevirtual #18                 // Method java/io/FileOutputStream.getChannel:()Ljava/nio/channels/FileChannel;
      11: astore_2
      12: aload_2
      13: ifnull        21
      16: aload_2
      17: invokevirtual #19                 // Method java/nio/channels/FileChannel.tryLock:()Ljava/nio/channels/FileLock;
      20: astore_3
      21: invokestatic  #20                 // Method getTempByteBuffer:()Ljava/nio/ByteBuffer;
      24: astore        4
      26: goto          31
      29: astore        5
      31: aload_3
      32: ifnull        48
      35: aload         4
      37: ifnull        48
      40: aload         4
      42: invokevirtual #22                 // Method java/nio/ByteBuffer.hasArray:()Z
      45: ifne          55
      48: aload         4
      50: invokestatic  #23                 // Method releaseTempByteBuffer:(Ljava/nio/ByteBuffer;)V
      53: iconst_0
      54: ireturn
      55: aload_0
      56: aload         4
      58: invokevirtual #24                 // Method java/nio/ByteBuffer.array:()[B
      61: invokevirtual #12                 // Method java/io/InputStream.read:([B)I
      64: istore        5
      66: iload         5
      68: iconst_m1
      69: if_icmpeq     157
      72: iconst_0
      73: istore        6
      75: iload         5
      77: sipush        4096
      80: if_icmpge     122
      83: iload         5
      85: invokestatic  #25                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;
      88: astore        7
      90: aload         7
      92: aload         4
      94: invokevirtual #24                 // Method java/nio/ByteBuffer.array:()[B
      97: iconst_0
      98: iload         5
     100: invokevirtual #26                 // Method java/nio/ByteBuffer.put:([BII)Ljava/nio/ByteBuffer;
     103: pop
     104: aload         7
     106: iconst_0
     107: invokevirtual #27                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
     110: pop
     111: aload_2
     112: aload         7
     114: invokevirtual #28                 // Method java/nio/channels/FileChannel.write:(Ljava/nio/ByteBuffer;)I
     117: istore        6
     119: goto          143
     122: aload         4
     124: iconst_0
     125: invokevirtual #27                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
     128: pop
     129: aload_2
     130: aload         4
     132: invokevirtual #28                 // Method java/nio/channels/FileChannel.write:(Ljava/nio/ByteBuffer;)I
     135: istore        6
     137: aload         4
     139: invokevirtual #29                 // Method java/nio/ByteBuffer.clear:()Ljava/nio/Buffer;
     142: pop
     143: aload_0
     144: aload         4
     146: invokevirtual #24                 // Method java/nio/ByteBuffer.array:()[B
     149: invokevirtual #12                 // Method java/io/InputStream.read:([B)I
     152: istore        5
     154: goto          66
     157: aload_3
     158: invokevirtual #30                 // Method java/nio/channels/FileLock.release:()V
     161: aload         4
     163: invokestatic  #23                 // Method releaseTempByteBuffer:(Ljava/nio/ByteBuffer;)V
     166: goto          183
     169: astore        8
     171: aload_3
     172: invokevirtual #30                 // Method java/nio/channels/FileLock.release:()V
     175: aload         4
     177: invokestatic  #23                 // Method releaseTempByteBuffer:(Ljava/nio/ByteBuffer;)V
     180: aload         8
     182: athrow
     183: iconst_1
     184: ireturn
    Exception table:
       from    to  target type
           7    26    29   Class java/lang/Throwable
          55   157   169   any
         169   171   169   any

  public static long inputStream2BAAOutputStream(java.io.InputStream, org.apache.axiom.attachments.utils.BAAOutputStream, long) throws java.io.IOException;
    Code:
       0: aload_1
       1: aload_0
       2: lload_2
       3: invokevirtual #31                 // Method org/apache/axiom/attachments/utils/BAAOutputStream.receive:(Ljava/io/InputStream;J)J
       6: lreturn

  public static int doesDataHandlerExceedLimit(javax.activation.DataHandler, int);
    Code:
       0: iload_1
       1: ifne          6
       4: iconst_m1
       5: ireturn
       6: aload_0
       7: invokevirtual #32                 // Method javax/activation/DataHandler.getDataSource:()Ljavax/activation/DataSource;
      10: invokestatic  #33                 // Method org/apache/axiom/util/activation/DataSourceUtils.getSize:(Ljavax/activation/DataSource;)J
      13: lstore_2
      14: lload_2
      15: ldc2_w        #34                 // long -1l
      18: lcmp
      19: ifeq          35
      22: lload_2
      23: iload_1
      24: i2l
      25: lcmp
      26: ifle          33
      29: iconst_1
      30: goto          34
      33: iconst_0
      34: ireturn
      35: aload_0
      36: new           #36                 // class org/apache/axiom/attachments/impl/BufferUtils$SizeLimitedOutputStream
      39: dup
      40: iload_1
      41: invokespecial #37                 // Method org/apache/axiom/attachments/impl/BufferUtils$SizeLimitedOutputStream."<init>":(I)V
      44: invokevirtual #38                 // Method javax/activation/DataHandler.writeTo:(Ljava/io/OutputStream;)V
      47: goto          71
      50: astore        4
      52: iconst_1
      53: ireturn
      54: astore        4
      56: getstatic     #41                 // Field log:Lorg/apache/commons/logging/Log;
      59: aload         4
      61: invokevirtual #42                 // Method java/io/IOException.getMessage:()Ljava/lang/String;
      64: invokeinterface #43,  2           // InterfaceMethod org/apache/commons/logging/Log.warn:(Ljava/lang/Object;)V
      69: iconst_m1
      70: ireturn
      71: iconst_0
      72: ireturn
    Exception table:
       from    to  target type
          35    47    50   Class org/apache/axiom/attachments/impl/BufferUtils$SizeLimitExceededException
          35    47    54   Class java/io/IOException

  private static synchronized byte[] getTempBuffer();
    Code:
       0: getstatic     #44                 // Field _cacheBuffer:[B
       3: dup
       4: astore_0
       5: monitorenter
       6: getstatic     #45                 // Field _cacheBufferInUse:Z
       9: ifne          22
      12: iconst_1
      13: putstatic     #45                 // Field _cacheBufferInUse:Z
      16: getstatic     #44                 // Field _cacheBuffer:[B
      19: aload_0
      20: monitorexit
      21: areturn
      22: aload_0
      23: monitorexit
      24: goto          32
      27: astore_1
      28: aload_0
      29: monitorexit
      30: aload_1
      31: athrow
      32: sipush        4096
      35: newarray       byte
      37: areturn
    Exception table:
       from    to  target type
           6    21    27   any
          22    24    27   any
          27    30    27   any

  private static void releaseTempBuffer(byte[]);
    Code:
       0: getstatic     #44                 // Field _cacheBuffer:[B
       3: dup
       4: astore_1
       5: monitorenter
       6: aload_0
       7: getstatic     #44                 // Field _cacheBuffer:[B
      10: if_acmpne     17
      13: iconst_0
      14: putstatic     #45                 // Field _cacheBufferInUse:Z
      17: aload_1
      18: monitorexit
      19: goto          27
      22: astore_2
      23: aload_1
      24: monitorexit
      25: aload_2
      26: athrow
      27: return
    Exception table:
       from    to  target type
           6    19    22   any
          22    25    22   any

  private static synchronized java.nio.ByteBuffer getTempByteBuffer();
    Code:
       0: getstatic     #46                 // Field _cacheByteBuffer:Ljava/nio/ByteBuffer;
       3: dup
       4: astore_0
       5: monitorenter
       6: getstatic     #47                 // Field _cacheByteBufferInUse:Z
       9: ifne          22
      12: iconst_1
      13: putstatic     #47                 // Field _cacheByteBufferInUse:Z
      16: getstatic     #46                 // Field _cacheByteBuffer:Ljava/nio/ByteBuffer;
      19: aload_0
      20: monitorexit
      21: areturn
      22: aload_0
      23: monitorexit
      24: goto          32
      27: astore_1
      28: aload_0
      29: monitorexit
      30: aload_1
      31: athrow
      32: sipush        4096
      35: invokestatic  #25                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;
      38: areturn
    Exception table:
       from    to  target type
           6    21    27   any
          22    24    27   any
          27    30    27   any

  private static void releaseTempByteBuffer(java.nio.ByteBuffer);
    Code:
       0: getstatic     #46                 // Field _cacheByteBuffer:Ljava/nio/ByteBuffer;
       3: dup
       4: astore_1
       5: monitorenter
       6: aload_0
       7: getstatic     #46                 // Field _cacheByteBuffer:Ljava/nio/ByteBuffer;
      10: if_acmpne     17
      13: iconst_0
      14: putstatic     #47                 // Field _cacheByteBufferInUse:Z
      17: aload_1
      18: monitorexit
      19: goto          27
      22: astore_2
      23: aload_1
      24: monitorexit
      25: aload_2
      26: athrow
      27: return
    Exception table:
       from    to  target type
           6    19    22   any
          22    25    22   any

  static {};
    Code:
       0: ldc           #15                 // class org/apache/axiom/attachments/impl/BufferUtils
       2: invokestatic  #48                 // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
       5: putstatic     #41                 // Field log:Lorg/apache/commons/logging/Log;
       8: iconst_1
       9: putstatic     #2                  // Field ENABLE_FILE_CHANNEL:Z
      12: iconst_1
      13: putstatic     #5                  // Field ENABLE_BAAOS_OPT:Z
      16: sipush        4096
      19: newarray       byte
      21: putstatic     #44                 // Field _cacheBuffer:[B
      24: iconst_0
      25: putstatic     #45                 // Field _cacheBufferInUse:Z
      28: sipush        4096
      31: invokestatic  #25                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;
      34: putstatic     #46                 // Field _cacheByteBuffer:Ljava/nio/ByteBuffer;
      37: iconst_0
      38: putstatic     #47                 // Field _cacheByteBufferInUse:Z
      41: return
}
