Compiled from "OptimizationPolicyImpl.java"
class org.apache.axiom.om.impl.OptimizationPolicyImpl implements org.apache.axiom.util.stax.xop.OptimizationPolicy {
  private static final org.apache.commons.logging.Log log;

  private final org.apache.axiom.om.OMOutputFormat format;

  private static final int UNSUPPORTED;

  private static final int EXCEED_LIMIT;

  public org.apache.axiom.om.impl.OptimizationPolicyImpl(org.apache.axiom.om.OMOutputFormat);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field format:Lorg/apache/axiom/om/OMOutputFormat;
       9: return

  public boolean isOptimized(javax.activation.DataHandler, boolean);
    Code:
       0: iload_2
       1: ifne          6
       4: iconst_0
       5: ireturn
       6: getstatic     #3                  // Field log:Lorg/apache/commons/logging/Log;
       9: ldc           #4                  // String Start MTOMXMLStreamWriter.isOptimizedThreshold()
      11: invokeinterface #5,  2            // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      16: iconst_m1
      17: istore_3
      18: aload_1
      19: ifnull        44
      22: getstatic     #3                  // Field log:Lorg/apache/commons/logging/Log;
      25: ldc           #7                  // String DataHandler fetched, starting optimized Threshold processing
      27: invokeinterface #5,  2            // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      32: aload_1
      33: aload_0
      34: getfield      #2                  // Field format:Lorg/apache/axiom/om/OMOutputFormat;
      37: invokevirtual #8                  // Method org/apache/axiom/om/OMOutputFormat.getOptimizedThreshold:()I
      40: invokestatic  #9                  // Method org/apache/axiom/attachments/impl/BufferUtils.doesDataHandlerExceedLimit:(Ljavax/activation/DataHandler;I)I
      43: istore_3
      44: iload_3
      45: iconst_m1
      46: if_icmpeq     54
      49: iload_3
      50: iconst_1
      51: if_icmpne     66
      54: getstatic     #3                  // Field log:Lorg/apache/commons/logging/Log;
      57: ldc           #10                 // String node should be added to binart NodeList for optimization
      59: invokeinterface #5,  2            // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      64: iconst_1
      65: ireturn
      66: iconst_0
      67: ireturn

  public boolean isOptimized(org.apache.axiom.ext.stax.datahandler.DataHandlerProvider, boolean) throws java.io.IOException;
    Code:
       0: iload_2
       1: ifne          6
       4: iconst_0
       5: ireturn
       6: aload_0
       7: getfield      #2                  // Field format:Lorg/apache/axiom/om/OMOutputFormat;
      10: invokevirtual #8                  // Method org/apache/axiom/om/OMOutputFormat.getOptimizedThreshold:()I
      13: ifne          18
      16: iconst_1
      17: ireturn
      18: aload_0
      19: aload_1
      20: invokeinterface #11,  1           // InterfaceMethod org/apache/axiom/ext/stax/datahandler/DataHandlerProvider.getDataHandler:()Ljavax/activation/DataHandler;
      25: iload_2
      26: invokevirtual #12                 // Method isOptimized:(Ljavax/activation/DataHandler;Z)Z
      29: ireturn

  static {};
    Code:
       0: ldc           #6                  // class org/apache/axiom/om/impl/OptimizationPolicyImpl
       2: invokestatic  #13                 // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
       5: putstatic     #3                  // Field log:Lorg/apache/commons/logging/Log;
       8: return
}
