Compiled from "SOAPBodyImpl.java"
public abstract class org.apache.axiom.soap.impl.llom.SOAPBodyImpl extends org.apache.axiom.soap.impl.llom.SOAPElement implements org.apache.axiom.soap.impl.intf.AxiomSOAPBody,org.apache.axiom.om.OMConstants {
  private boolean enableLookAhead;

  private boolean lookAheadAttempted;

  private boolean lookAheadSuccessful;

  private java.lang.String lookAheadLocalName;

  private org.apache.axiom.om.OMNamespace lookAheadNS;

  public org.apache.axiom.soap.impl.llom.SOAPBodyImpl();
    Code:
       0: aload_0
       1: invokespecial #20                 // Method org/apache/axiom/soap/impl/llom/SOAPElement."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #22                 // Field enableLookAhead:Z
       9: aload_0
      10: iconst_0
      11: putfield      #24                 // Field lookAheadAttempted:Z
      14: aload_0
      15: iconst_0
      16: putfield      #26                 // Field lookAheadSuccessful:Z
      19: aload_0
      20: aconst_null
      21: putfield      #28                 // Field lookAheadLocalName:Ljava/lang/String;
      24: aload_0
      25: aconst_null
      26: putfield      #30                 // Field lookAheadNS:Lorg/apache/axiom/om/OMNamespace;
      29: return

  public boolean hasFault();
    Code:
       0: aload_0
       1: invokespecial #39                 // Method hasLookahead:()Z
       4: ifeq          64
       7: ldc           #42                 // String Fault
       9: aload_0
      10: getfield      #28                 // Field lookAheadLocalName:Ljava/lang/String;
      13: invokevirtual #44                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      16: ifeq          62
      19: aload_0
      20: getfield      #30                 // Field lookAheadNS:Lorg/apache/axiom/om/OMNamespace;
      23: ifnull        62
      26: ldc           #50                 // String http://schemas.xmlsoap.org/soap/envelope/
      28: aload_0
      29: getfield      #30                 // Field lookAheadNS:Lorg/apache/axiom/om/OMNamespace;
      32: invokeinterface #52,  1           // InterfaceMethod org/apache/axiom/om/OMNamespace.getNamespaceURI:()Ljava/lang/String;
      37: invokevirtual #44                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      40: ifne          60
      43: ldc           #58                 // String http://www.w3.org/2003/05/soap-envelope
      45: aload_0
      46: getfield      #30                 // Field lookAheadNS:Lorg/apache/axiom/om/OMNamespace;
      49: invokeinterface #52,  1           // InterfaceMethod org/apache/axiom/om/OMNamespace.getNamespaceURI:()Ljava/lang/String;
      54: invokevirtual #44                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      57: ifeq          62
      60: iconst_1
      61: ireturn
      62: iconst_0
      63: ireturn
      64: aload_0
      65: invokestatic  #60                 // Method org/apache/axiom/om/impl/common/AxiomElementSupport.ajc$interMethodDispatch1$org_apache_axiom_om_impl_common_AxiomElementSupport$org_apache_axiom_om_impl_intf_AxiomElement$getFirstElement:(Lorg/apache/axiom/om/impl/intf/AxiomElement;)Lorg/apache/axiom/om/OMElement;
      68: instanceof    #66                 // class org/apache/axiom/soap/SOAPFault
      71: ireturn

  public org.apache.axiom.soap.SOAPFault getFault();
    Code:
       0: aload_0
       1: invokestatic  #60                 // Method org/apache/axiom/om/impl/common/AxiomElementSupport.ajc$interMethodDispatch1$org_apache_axiom_om_impl_common_AxiomElementSupport$org_apache_axiom_om_impl_intf_AxiomElement$getFirstElement:(Lorg/apache/axiom/om/impl/intf/AxiomElement;)Lorg/apache/axiom/om/OMElement;
       4: astore_1
       5: aload_1
       6: instanceof    #66                 // class org/apache/axiom/soap/SOAPFault
       9: ifeq          19
      12: aload_1
      13: checkcast     #66                 // class org/apache/axiom/soap/SOAPFault
      16: goto          20
      19: aconst_null
      20: areturn

  public void addFault(org.apache.axiom.soap.SOAPFault) throws org.apache.axiom.om.OMException;
    Code:
       0: aload_0
       1: invokevirtual #77                 // Method hasFault:()Z
       4: ifeq          17
       7: new           #75                 // class org/apache/axiom/om/OMException
      10: dup
      11: ldc           #79                 // String SOAP Body already has a SOAP Fault and there can not be more than one SOAP fault
      13: invokespecial #81                 // Method org/apache/axiom/om/OMException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: aload_1
      19: invokestatic  #84                 // Method org/apache/axiom/om/impl/common/AxiomContainerSupport.ajc$interMethodDispatch1$org_apache_axiom_om_impl_common_AxiomContainerSupport$org_apache_axiom_om_impl_intf_AxiomContainer$addChild:(Lorg/apache/axiom/om/impl/intf/AxiomContainer;Lorg/apache/axiom/om/OMNode;)V
      22: return

  public void checkParent(org.apache.axiom.om.OMElement) throws org.apache.axiom.soap.SOAPProcessingException;
    Code:
       0: aload_1
       1: instanceof    #96                 // class org/apache/axiom/soap/impl/llom/SOAPEnvelopeImpl
       4: ifne          17
       7: new           #94                 // class org/apache/axiom/soap/SOAPProcessingException
      10: dup
      11: ldc           #98                 // String Expecting an implementation of SOAP Envelope as the parent. But received some other implementation
      13: invokespecial #100                // Method org/apache/axiom/soap/SOAPProcessingException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: return

  public org.apache.axiom.om.OMNode detach() throws org.apache.axiom.om.OMException;
    Code:
       0: new           #94                 // class org/apache/axiom/soap/SOAPProcessingException
       3: dup
       4: ldc           #104                // String Can not detach SOAP Body, SOAP Envelope must have a Body !!
       6: invokespecial #100                // Method org/apache/axiom/soap/SOAPProcessingException."<init>":(Ljava/lang/String;)V
       9: athrow

  private boolean hasLookahead();
    Code:
       0: aload_0
       1: getfield      #22                 // Field enableLookAhead:Z
       4: ifne          9
       7: iconst_0
       8: ireturn
       9: aload_0
      10: getfield      #24                 // Field lookAheadAttempted:Z
      13: ifeq          21
      16: aload_0
      17: getfield      #26                 // Field lookAheadSuccessful:Z
      20: ireturn
      21: aload_0
      22: iconst_1
      23: putfield      #24                 // Field lookAheadAttempted:Z
      26: aload_0
      27: invokestatic  #106                // Method org/apache/axiom/core/DeferringParentNodeSupport.ajc$interMethodDispatch1$org_apache_axiom_core_DeferringParentNodeSupport$org_apache_axiom_core_DeferringParentNode$getBuilder:(Lorg/apache/axiom/core/DeferringParentNode;)Lorg/apache/axiom/om/OMXMLParserWrapper;
      30: checkcast     #112                // class org/apache/axiom/soap/impl/builder/StAXSOAPModelBuilder
      33: astore_1
      34: aload_1
      35: ifnull        128
      38: aload_1
      39: invokevirtual #114                // Method org/apache/axiom/soap/impl/builder/StAXSOAPModelBuilder.isCache:()Z
      42: ifeq          128
      45: aload_1
      46: invokevirtual #117                // Method org/apache/axiom/soap/impl/builder/StAXSOAPModelBuilder.isCompleted:()Z
      49: ifne          128
      52: aload_1
      53: invokevirtual #120                // Method org/apache/axiom/soap/impl/builder/StAXSOAPModelBuilder.isClosed:()Z
      56: ifne          128
      59: aload_0
      60: aload_1
      61: invokevirtual #123                // Method org/apache/axiom/soap/impl/builder/StAXSOAPModelBuilder.lookahead:()Z
      64: putfield      #26                 // Field lookAheadSuccessful:Z
      67: aload_0
      68: getfield      #26                 // Field lookAheadSuccessful:Z
      71: ifeq          128
      74: aload_0
      75: aload_1
      76: invokevirtual #126                // Method org/apache/axiom/soap/impl/builder/StAXSOAPModelBuilder.getName:()Ljava/lang/String;
      79: putfield      #28                 // Field lookAheadLocalName:Ljava/lang/String;
      82: aload_1
      83: invokevirtual #129                // Method org/apache/axiom/soap/impl/builder/StAXSOAPModelBuilder.getNamespace:()Ljava/lang/String;
      86: astore_2
      87: aload_2
      88: ifnonnull     99
      91: aload_0
      92: aconst_null
      93: putfield      #30                 // Field lookAheadNS:Lorg/apache/axiom/om/OMNamespace;
      96: goto          128
      99: aload_1
     100: invokevirtual #132                // Method org/apache/axiom/soap/impl/builder/StAXSOAPModelBuilder.getPrefix:()Ljava/lang/String;
     103: astore_3
     104: aload_0
     105: aload_0
     106: invokestatic  #135                // Method org/apache/axiom/soap/impl/common/AxiomSOAPElementSupport.ajc$interMethodDispatch1$org_apache_axiom_soap_impl_common_AxiomSOAPElementSupport$org_apache_axiom_soap_impl_intf_AxiomSOAPElement$getOMFactory:(Lorg/apache/axiom/soap/impl/intf/AxiomSOAPElement;)Lorg/apache/axiom/om/OMFactory;
     109: aload_2
     110: aload_3
     111: ifnonnull     119
     114: ldc           #141                // String
     116: goto          120
     119: aload_3
     120: invokeinterface #143,  3          // InterfaceMethod org/apache/axiom/om/OMFactory.createOMNamespace:(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/axiom/om/OMNamespace;
     125: putfield      #30                 // Field lookAheadNS:Lorg/apache/axiom/om/OMNamespace;
     128: aload_0
     129: getfield      #26                 // Field lookAheadSuccessful:Z
     132: ireturn

  public org.apache.axiom.om.OMNamespace getFirstElementNS();
    Code:
       0: aload_0
       1: invokespecial #39                 // Method hasLookahead:()Z
       4: ifeq          12
       7: aload_0
       8: getfield      #30                 // Field lookAheadNS:Lorg/apache/axiom/om/OMNamespace;
      11: areturn
      12: aload_0
      13: invokestatic  #60                 // Method org/apache/axiom/om/impl/common/AxiomElementSupport.ajc$interMethodDispatch1$org_apache_axiom_om_impl_common_AxiomElementSupport$org_apache_axiom_om_impl_intf_AxiomElement$getFirstElement:(Lorg/apache/axiom/om/impl/intf/AxiomElement;)Lorg/apache/axiom/om/OMElement;
      16: astore_1
      17: aload_1
      18: ifnonnull     23
      21: aconst_null
      22: areturn
      23: aload_1
      24: invokeinterface #155,  1          // InterfaceMethod org/apache/axiom/om/OMElement.getNamespace:()Lorg/apache/axiom/om/OMNamespace;
      29: areturn

  public java.lang.String getFirstElementLocalName();
    Code:
       0: aload_0
       1: invokespecial #39                 // Method hasLookahead:()Z
       4: ifeq          12
       7: aload_0
       8: getfield      #28                 // Field lookAheadLocalName:Ljava/lang/String;
      11: areturn
      12: aload_0
      13: invokestatic  #60                 // Method org/apache/axiom/om/impl/common/AxiomElementSupport.ajc$interMethodDispatch1$org_apache_axiom_om_impl_common_AxiomElementSupport$org_apache_axiom_om_impl_intf_AxiomElement$getFirstElement:(Lorg/apache/axiom/om/impl/intf/AxiomElement;)Lorg/apache/axiom/om/OMElement;
      16: astore_1
      17: aload_1
      18: ifnonnull     23
      21: aconst_null
      22: areturn
      23: aload_1
      24: invokeinterface #160,  1          // InterfaceMethod org/apache/axiom/om/OMElement.getLocalName:()Ljava/lang/String;
      29: areturn

  public void addChild(org.apache.axiom.om.OMNode, boolean);
    Code:
       0: aload_0
       1: iconst_0
       2: putfield      #22                 // Field enableLookAhead:Z
       5: aload_0
       6: aload_1
       7: iload_2
       8: invokestatic  #165                // Method org/apache/axiom/om/impl/common/AxiomContainerSupport.ajc$interMethod$org_apache_axiom_om_impl_common_AxiomContainerSupport$org_apache_axiom_om_impl_intf_AxiomContainer$addChild:(Lorg/apache/axiom/om/impl/intf/AxiomContainer;Lorg/apache/axiom/om/OMNode;Z)V
      11: return

  public final org.apache.axiom.soap.SOAPFault addFault(java.lang.Exception) throws org.apache.axiom.om.OMException;
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #179                // Method org/apache/axiom/soap/impl/common/AxiomSOAPBodySupport.ajc$interMethod$org_apache_axiom_soap_impl_common_AxiomSOAPBodySupport$org_apache_axiom_soap_impl_intf_AxiomSOAPBody$addFault:(Lorg/apache/axiom/soap/impl/intf/AxiomSOAPBody;Ljava/lang/Exception;)Lorg/apache/axiom/soap/SOAPFault;
       5: areturn
}
