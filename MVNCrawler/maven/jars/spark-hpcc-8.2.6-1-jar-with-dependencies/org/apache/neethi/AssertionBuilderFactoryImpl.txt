Compiled from "AssertionBuilderFactoryImpl.java"
public class org.apache.neethi.AssertionBuilderFactoryImpl implements org.apache.neethi.AssertionBuilderFactory {
  private java.util.Map<javax.xml.namespace.QName, org.apache.neethi.builders.AssertionBuilder<?>> registeredBuilders;

  protected org.apache.neethi.builders.AssertionBuilder<?> defaultBuilder;

  protected org.apache.neethi.builders.converters.ConverterRegistry converters;

  protected org.apache.neethi.PolicyBuilder engine;

  public org.apache.neethi.AssertionBuilderFactoryImpl(org.apache.neethi.PolicyBuilder);
    Code:
       0: aload_0
       1: aload_1
       2: new           #1                  // class org/apache/neethi/builders/converters/ConverterRegistry
       5: dup
       6: invokespecial #2                  // Method org/apache/neethi/builders/converters/ConverterRegistry."<init>":()V
       9: invokespecial #3                  // Method "<init>":(Lorg/apache/neethi/PolicyBuilder;Lorg/apache/neethi/builders/converters/ConverterRegistry;)V
      12: return

  public org.apache.neethi.AssertionBuilderFactoryImpl(org.apache.neethi.PolicyBuilder, org.apache.neethi.builders.converters.ConverterRegistry);
    Code:
       0: aload_0
       1: invokespecial #4                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #5                  // class java/util/concurrent/ConcurrentHashMap
       8: dup
       9: invokespecial #6                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      12: putfield      #7                  // Field registeredBuilders:Ljava/util/Map;
      15: aload_0
      16: aload_1
      17: putfield      #8                  // Field engine:Lorg/apache/neethi/PolicyBuilder;
      20: aload_2
      21: ifnonnull     34
      24: new           #9                  // class java/lang/IllegalArgumentException
      27: dup
      28: ldc           #10                 // String ConverterRegistry must not be null
      30: invokespecial #11                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      33: athrow
      34: aload_0
      35: aload_2
      36: putfield      #12                 // Field converters:Lorg/apache/neethi/builders/converters/ConverterRegistry;
      39: ldc_w         #13                 // class org/apache/neethi/builders/AssertionBuilder
      42: invokestatic  #14                 // Method org/apache/neethi/util/Service.providers:(Ljava/lang/Class;)Ljava/util/List;
      45: invokeinterface #15,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      50: astore_3
      51: aload_3
      52: invokeinterface #16,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      57: ifeq          117
      60: aload_3
      61: invokeinterface #17,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      66: checkcast     #13                 // class org/apache/neethi/builders/AssertionBuilder
      69: astore        4
      71: aload         4
      73: invokeinterface #18,  1           // InterfaceMethod org/apache/neethi/builders/AssertionBuilder.getKnownElements:()[Ljavax/xml/namespace/QName;
      78: astore        5
      80: iconst_0
      81: istore        6
      83: iload         6
      85: aload         5
      87: arraylength
      88: if_icmpge     114
      91: aload_0
      92: getfield      #7                  // Field registeredBuilders:Ljava/util/Map;
      95: aload         5
      97: iload         6
      99: aaload
     100: aload         4
     102: invokeinterface #19,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     107: pop
     108: iinc          6, 1
     111: goto          83
     114: goto          51
     117: aload_0
     118: new           #20                 // class org/apache/neethi/builders/xml/XMLPrimitiveAssertionBuilder
     121: dup
     122: invokespecial #21                 // Method org/apache/neethi/builders/xml/XMLPrimitiveAssertionBuilder."<init>":()V
     125: putfield      #22                 // Field defaultBuilder:Lorg/apache/neethi/builders/AssertionBuilder;
     128: return

  public org.apache.neethi.builders.converters.ConverterRegistry getConverterRegistry();
    Code:
       0: aload_0
       1: getfield      #12                 // Field converters:Lorg/apache/neethi/builders/converters/ConverterRegistry;
       4: areturn

  public org.apache.neethi.PolicyBuilder getPolicyEngine();
    Code:
       0: aload_0
       1: getfield      #8                  // Field engine:Lorg/apache/neethi/PolicyBuilder;
       4: areturn

  protected void loadDynamic();
    Code:
       0: return

  public void registerBuilder(javax.xml.namespace.QName, org.apache.neethi.builders.AssertionBuilder<?>);
    Code:
       0: aload_0
       1: invokevirtual #23                 // Method loadDynamic:()V
       4: aload_0
       5: getfield      #7                  // Field registeredBuilders:Ljava/util/Map;
       8: aload_1
       9: aload_2
      10: invokeinterface #19,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      15: pop
      16: return

  public void registerBuilder(org.apache.neethi.builders.AssertionBuilder<?>);
    Code:
       0: aload_0
       1: invokevirtual #23                 // Method loadDynamic:()V
       4: aload_1
       5: invokeinterface #18,  1           // InterfaceMethod org/apache/neethi/builders/AssertionBuilder.getKnownElements:()[Ljavax/xml/namespace/QName;
      10: astore_2
      11: aload_2
      12: arraylength
      13: istore_3
      14: iconst_0
      15: istore        4
      17: iload         4
      19: iload_3
      20: if_icmpge     48
      23: aload_2
      24: iload         4
      26: aaload
      27: astore        5
      29: aload_0
      30: getfield      #7                  // Field registeredBuilders:Ljava/util/Map;
      33: aload         5
      35: aload_1
      36: invokeinterface #19,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      41: pop
      42: iinc          4, 1
      45: goto          17
      48: return

  public org.apache.neethi.Assertion build(java.lang.Object);
    Code:
       0: aload_0
       1: invokevirtual #23                 // Method loadDynamic:()V
       4: aload_0
       5: getfield      #12                 // Field converters:Lorg/apache/neethi/builders/converters/ConverterRegistry;
       8: aload_1
       9: invokevirtual #24                 // Method org/apache/neethi/builders/converters/ConverterRegistry.findQName:(Ljava/lang/Object;)Ljavax/xml/namespace/QName;
      12: astore_3
      13: aload_0
      14: getfield      #7                  // Field registeredBuilders:Ljava/util/Map;
      17: aload_3
      18: invokeinterface #25,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      23: checkcast     #13                 // class org/apache/neethi/builders/AssertionBuilder
      26: astore_2
      27: aload_2
      28: ifnonnull     37
      31: aload_0
      32: aload_3
      33: invokevirtual #26                 // Method handleNoRegisteredBuilder:(Ljavax/xml/namespace/QName;)Lorg/apache/neethi/builders/AssertionBuilder;
      36: astore_2
      37: aload_0
      38: aload_1
      39: aload_2
      40: invokespecial #27                 // Method invokeBuilder:(Ljava/lang/Object;Lorg/apache/neethi/builders/AssertionBuilder;)Lorg/apache/neethi/Assertion;
      43: areturn

  protected org.apache.neethi.builders.AssertionBuilder<?> handleNoRegisteredBuilder(javax.xml.namespace.QName);
    Code:
       0: aload_0
       1: getfield      #22                 // Field defaultBuilder:Lorg/apache/neethi/builders/AssertionBuilder;
       4: areturn

  private org.apache.neethi.Assertion invokeBuilder(java.lang.Object, org.apache.neethi.builders.AssertionBuilder<?>);
    Code:
       0: aload_0
       1: aload_2
       2: invokevirtual #28                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
       5: invokespecial #29                 // Method findAssertionBuilderTarget:(Ljava/lang/Class;)Ljava/lang/Class;
       8: astore_3
       9: aload_0
      10: getfield      #12                 // Field converters:Lorg/apache/neethi/builders/converters/ConverterRegistry;
      13: aload_1
      14: aload_3
      15: invokevirtual #30                 // Method org/apache/neethi/builders/converters/ConverterRegistry.convert:(Ljava/lang/Object;Ljava/lang/Class;)Ljava/lang/Object;
      18: astore        4
      20: aload_2
      21: astore        5
      23: aload         5
      25: aload         4
      27: aload_0
      28: invokeinterface #31,  3           // InterfaceMethod org/apache/neethi/builders/AssertionBuilder.build:(Ljava/lang/Object;Lorg/apache/neethi/AssertionBuilderFactory;)Lorg/apache/neethi/Assertion;
      33: areturn

  private java.lang.Class<?> findAssertionBuilderTarget(java.lang.Class<?>);
    Code:
       0: aload_1
       1: invokevirtual #32                 // Method java/lang/Class.getInterfaces:()[Ljava/lang/Class;
       4: astore_2
       5: iconst_0
       6: istore_3
       7: iload_3
       8: aload_2
       9: arraylength
      10: if_icmpge     52
      13: aload_2
      14: iload_3
      15: aaload
      16: ldc_w         #13                 // class org/apache/neethi/builders/AssertionBuilder
      19: if_acmpne     46
      22: aload_1
      23: invokevirtual #33                 // Method java/lang/Class.getGenericInterfaces:()[Ljava/lang/reflect/Type;
      26: iload_3
      27: aaload
      28: checkcast     #34                 // class java/lang/reflect/ParameterizedType
      31: astore        4
      33: aload         4
      35: invokeinterface #35,  1           // InterfaceMethod java/lang/reflect/ParameterizedType.getActualTypeArguments:()[Ljava/lang/reflect/Type;
      40: iconst_0
      41: aaload
      42: checkcast     #36                 // class java/lang/Class
      45: areturn
      46: iinc          3, 1
      49: goto          7
      52: aload_1
      53: invokevirtual #28                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      56: invokevirtual #37                 // Method java/lang/Class.getSuperclass:()Ljava/lang/Class;
      59: ifnull        71
      62: aload_0
      63: aload_1
      64: invokevirtual #37                 // Method java/lang/Class.getSuperclass:()Ljava/lang/Class;
      67: invokespecial #29                 // Method findAssertionBuilderTarget:(Ljava/lang/Class;)Ljava/lang/Class;
      70: areturn
      71: aconst_null
      72: areturn

  public org.apache.neethi.builders.AssertionBuilder<?> getBuilder(javax.xml.namespace.QName);
    Code:
       0: aload_0
       1: invokevirtual #23                 // Method loadDynamic:()V
       4: aload_0
       5: getfield      #7                  // Field registeredBuilders:Ljava/util/Map;
       8: aload_1
       9: invokeinterface #25,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      14: checkcast     #13                 // class org/apache/neethi/builders/AssertionBuilder
      17: areturn
}
