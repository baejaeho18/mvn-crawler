Compiled from "XmlSchemaDerivationMethod.java"
public class org.apache.ws.commons.schema.XmlSchemaDerivationMethod {
  public static final org.apache.ws.commons.schema.XmlSchemaDerivationMethod NONE;

  private boolean all;

  private boolean empty;

  private boolean extension;

  private boolean list;

  private boolean restriction;

  private boolean substitution;

  private boolean union;

  public org.apache.ws.commons.schema.XmlSchemaDerivationMethod();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public static org.apache.ws.commons.schema.XmlSchemaDerivationMethod schemaValueOf(java.lang.String);
    Code:
       0: aload_0
       1: ldc           #2                  // String \\s
       3: invokevirtual #3                  // Method java/lang/String.split:(Ljava/lang/String;)[Ljava/lang/String;
       6: astore_1
       7: new           #4                  // class org/apache/ws/commons/schema/XmlSchemaDerivationMethod
      10: dup
      11: invokespecial #5                  // Method "<init>":()V
      14: astore_2
      15: aload_1
      16: astore_3
      17: aload_3
      18: arraylength
      19: istore        4
      21: iconst_0
      22: istore        5
      24: iload         5
      26: iload         4
      28: if_icmpge     192
      31: aload_3
      32: iload         5
      34: aaload
      35: astore        6
      37: ldc           #6                  // String #all
      39: aload         6
      41: invokevirtual #7                  // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      44: ifne          57
      47: ldc           #8                  // String all
      49: aload         6
      51: invokevirtual #7                  // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      54: ifeq          82
      57: aload_2
      58: invokevirtual #9                  // Method notAll:()Z
      61: ifeq          74
      64: new           #10                 // class org/apache/ws/commons/schema/XmlSchemaException
      67: dup
      68: ldc           #11                 // String Derivation method cannot be #all and something else.
      70: invokespecial #12                 // Method org/apache/ws/commons/schema/XmlSchemaException."<init>":(Ljava/lang/String;)V
      73: athrow
      74: aload_2
      75: iconst_1
      76: invokevirtual #13                 // Method setAll:(Z)V
      79: goto          186
      82: aload_2
      83: invokevirtual #14                 // Method isAll:()Z
      86: ifeq          99
      89: new           #10                 // class org/apache/ws/commons/schema/XmlSchemaException
      92: dup
      93: ldc           #11                 // String Derivation method cannot be #all and something else.
      95: invokespecial #12                 // Method org/apache/ws/commons/schema/XmlSchemaException."<init>":(Ljava/lang/String;)V
      98: athrow
      99: ldc           #15                 // String extension
     101: aload         6
     103: invokevirtual #16                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     106: ifeq          117
     109: aload_2
     110: iconst_1
     111: invokevirtual #17                 // Method setExtension:(Z)V
     114: goto          186
     117: ldc           #18                 // String list
     119: aload         6
     121: invokevirtual #16                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     124: ifeq          135
     127: aload_2
     128: iconst_1
     129: invokevirtual #19                 // Method setList:(Z)V
     132: goto          186
     135: ldc           #20                 // String restriction
     137: aload         6
     139: invokevirtual #16                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     142: ifeq          153
     145: aload_2
     146: iconst_1
     147: invokevirtual #21                 // Method setRestriction:(Z)V
     150: goto          186
     153: ldc           #22                 // String substitution
     155: aload         6
     157: invokevirtual #16                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     160: ifeq          171
     163: aload_2
     164: iconst_1
     165: invokevirtual #23                 // Method setSubstitution:(Z)V
     168: goto          186
     171: ldc           #24                 // String union
     173: aload         6
     175: invokevirtual #16                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     178: ifeq          186
     181: aload_2
     182: iconst_1
     183: invokevirtual #25                 // Method setUnion:(Z)V
     186: iinc          5, 1
     189: goto          24
     192: aload_2
     193: areturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: invokevirtual #14                 // Method isAll:()Z
       4: ifeq          10
       7: ldc           #6                  // String #all
       9: areturn
      10: new           #26                 // class java/lang/StringBuilder
      13: dup
      14: invokespecial #27                 // Method java/lang/StringBuilder."<init>":()V
      17: astore_1
      18: aload_0
      19: invokevirtual #28                 // Method isExtension:()Z
      22: ifeq          32
      25: aload_1
      26: ldc           #29                 // String extension
      28: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      31: pop
      32: aload_0
      33: invokevirtual #31                 // Method isList:()Z
      36: ifeq          46
      39: aload_1
      40: ldc           #32                 // String list
      42: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      45: pop
      46: aload_0
      47: invokevirtual #33                 // Method isRestriction:()Z
      50: ifeq          60
      53: aload_1
      54: ldc           #34                 // String restriction
      56: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      59: pop
      60: aload_0
      61: invokevirtual #35                 // Method isSubstitution:()Z
      64: ifeq          74
      67: aload_1
      68: ldc           #36                 // String substitution
      70: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      73: pop
      74: aload_0
      75: invokevirtual #37                 // Method isUnion:()Z
      78: ifeq          88
      81: aload_1
      82: ldc           #38                 // String union
      84: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      87: pop
      88: aload_1
      89: invokevirtual #39                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      92: invokevirtual #40                 // Method java/lang/String.trim:()Ljava/lang/String;
      95: areturn

  public boolean notAll();
    Code:
       0: aload_0
       1: getfield      #41                 // Field empty:Z
       4: aload_0
       5: getfield      #42                 // Field extension:Z
       8: ior
       9: aload_0
      10: getfield      #43                 // Field list:Z
      13: ior
      14: aload_0
      15: getfield      #44                 // Field restriction:Z
      18: ior
      19: aload_0
      20: getfield      #45                 // Field substitution:Z
      23: ior
      24: aload_0
      25: getfield      #46                 // Field union:Z
      28: ior
      29: ireturn

  public boolean isAll();
    Code:
       0: aload_0
       1: getfield      #47                 // Field all:Z
       4: ireturn

  public void setAll(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #47                 // Field all:Z
       5: iload_1
       6: ifeq          39
       9: aload_0
      10: iconst_0
      11: putfield      #41                 // Field empty:Z
      14: aload_0
      15: iconst_0
      16: putfield      #42                 // Field extension:Z
      19: aload_0
      20: iconst_0
      21: putfield      #43                 // Field list:Z
      24: aload_0
      25: iconst_0
      26: putfield      #44                 // Field restriction:Z
      29: aload_0
      30: iconst_0
      31: putfield      #45                 // Field substitution:Z
      34: aload_0
      35: iconst_0
      36: putfield      #46                 // Field union:Z
      39: return

  public boolean isEmpty();
    Code:
       0: aload_0
       1: getfield      #41                 // Field empty:Z
       4: ireturn

  public void setEmpty(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #41                 // Field empty:Z
       5: return

  public boolean isExtension();
    Code:
       0: aload_0
       1: getfield      #42                 // Field extension:Z
       4: ireturn

  public void setExtension(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #42                 // Field extension:Z
       5: return

  public boolean isList();
    Code:
       0: aload_0
       1: getfield      #43                 // Field list:Z
       4: ireturn

  public void setList(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #43                 // Field list:Z
       5: return

  public boolean isNone();
    Code:
       0: aload_0
       1: getfield      #47                 // Field all:Z
       4: ifne          53
       7: aload_0
       8: getfield      #41                 // Field empty:Z
      11: ifne          53
      14: aload_0
      15: getfield      #42                 // Field extension:Z
      18: ifne          53
      21: aload_0
      22: getfield      #43                 // Field list:Z
      25: ifne          53
      28: aload_0
      29: getfield      #44                 // Field restriction:Z
      32: ifne          53
      35: aload_0
      36: getfield      #45                 // Field substitution:Z
      39: ifne          53
      42: aload_0
      43: getfield      #46                 // Field union:Z
      46: ifne          53
      49: iconst_1
      50: goto          54
      53: iconst_0
      54: ireturn

  public void setNone(boolean);
    Code:
       0: aload_0
       1: iconst_0
       2: putfield      #47                 // Field all:Z
       5: aload_0
       6: iconst_0
       7: putfield      #41                 // Field empty:Z
      10: aload_0
      11: iconst_0
      12: putfield      #42                 // Field extension:Z
      15: aload_0
      16: iconst_0
      17: putfield      #43                 // Field list:Z
      20: aload_0
      21: iconst_0
      22: putfield      #44                 // Field restriction:Z
      25: aload_0
      26: iconst_0
      27: putfield      #45                 // Field substitution:Z
      30: aload_0
      31: iconst_0
      32: putfield      #46                 // Field union:Z
      35: return

  public boolean isRestriction();
    Code:
       0: aload_0
       1: getfield      #44                 // Field restriction:Z
       4: ireturn

  public void setRestriction(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #44                 // Field restriction:Z
       5: return

  public boolean isSubstitution();
    Code:
       0: aload_0
       1: getfield      #45                 // Field substitution:Z
       4: ireturn

  public void setSubstitution(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #45                 // Field substitution:Z
       5: return

  public boolean isUnion();
    Code:
       0: aload_0
       1: getfield      #46                 // Field union:Z
       4: ireturn

  public void setUnion(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #46                 // Field union:Z
       5: return

  static {};
    Code:
       0: new           #4                  // class org/apache/ws/commons/schema/XmlSchemaDerivationMethod
       3: dup
       4: invokespecial #5                  // Method "<init>":()V
       7: putstatic     #48                 // Field NONE:Lorg/apache/ws/commons/schema/XmlSchemaDerivationMethod;
      10: return
}
