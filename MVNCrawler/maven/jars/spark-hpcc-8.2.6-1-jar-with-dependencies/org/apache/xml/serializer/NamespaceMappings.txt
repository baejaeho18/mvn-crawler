Compiled from "NamespaceMappings.java"
public class org.apache.xml.serializer.NamespaceMappings {
  private int count;

  private java.util.Hashtable m_namespaces;

  private java.util.Stack m_nodeStack;

  private static final java.lang.String EMPTYSTRING;

  private static final java.lang.String XML_PREFIX;

  public org.apache.xml.serializer.NamespaceMappings();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field count:I
       9: aload_0
      10: new           #3                  // class java/util/Hashtable
      13: dup
      14: invokespecial #4                  // Method java/util/Hashtable."<init>":()V
      17: putfield      #5                  // Field m_namespaces:Ljava/util/Hashtable;
      20: aload_0
      21: new           #6                  // class java/util/Stack
      24: dup
      25: invokespecial #7                  // Method java/util/Stack."<init>":()V
      28: putfield      #8                  // Field m_nodeStack:Ljava/util/Stack;
      31: aload_0
      32: invokespecial #9                  // Method initNamespaces:()V
      35: return

  private void initNamespaces();
    Code:
       0: aload_0
       1: getfield      #5                  // Field m_namespaces:Ljava/util/Hashtable;
       4: ldc           #10                 // String
       6: new           #6                  // class java/util/Stack
       9: dup
      10: invokespecial #7                  // Method java/util/Stack."<init>":()V
      13: dup
      14: astore_1
      15: invokevirtual #11                 // Method java/util/Hashtable.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      18: pop
      19: aload_1
      20: new           #12                 // class org/apache/xml/serializer/NamespaceMappings$MappingRecord
      23: dup
      24: aload_0
      25: ldc           #10                 // String
      27: ldc           #10                 // String
      29: iconst_0
      30: invokespecial #13                 // Method org/apache/xml/serializer/NamespaceMappings$MappingRecord."<init>":(Lorg/apache/xml/serializer/NamespaceMappings;Ljava/lang/String;Ljava/lang/String;I)V
      33: invokevirtual #14                 // Method java/util/Stack.push:(Ljava/lang/Object;)Ljava/lang/Object;
      36: pop
      37: aload_0
      38: getfield      #5                  // Field m_namespaces:Ljava/util/Hashtable;
      41: ldc           #15                 // String xml
      43: new           #6                  // class java/util/Stack
      46: dup
      47: invokespecial #7                  // Method java/util/Stack."<init>":()V
      50: dup
      51: astore_1
      52: invokevirtual #11                 // Method java/util/Hashtable.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      55: pop
      56: aload_1
      57: new           #12                 // class org/apache/xml/serializer/NamespaceMappings$MappingRecord
      60: dup
      61: aload_0
      62: ldc           #15                 // String xml
      64: ldc           #16                 // String http://www.w3.org/XML/1998/namespace
      66: iconst_0
      67: invokespecial #13                 // Method org/apache/xml/serializer/NamespaceMappings$MappingRecord."<init>":(Lorg/apache/xml/serializer/NamespaceMappings;Ljava/lang/String;Ljava/lang/String;I)V
      70: invokevirtual #14                 // Method java/util/Stack.push:(Ljava/lang/Object;)Ljava/lang/Object;
      73: pop
      74: aload_0
      75: getfield      #8                  // Field m_nodeStack:Ljava/util/Stack;
      78: new           #12                 // class org/apache/xml/serializer/NamespaceMappings$MappingRecord
      81: dup
      82: aload_0
      83: aconst_null
      84: aconst_null
      85: iconst_m1
      86: invokespecial #13                 // Method org/apache/xml/serializer/NamespaceMappings$MappingRecord."<init>":(Lorg/apache/xml/serializer/NamespaceMappings;Ljava/lang/String;Ljava/lang/String;I)V
      89: invokevirtual #14                 // Method java/util/Stack.push:(Ljava/lang/Object;)Ljava/lang/Object;
      92: pop
      93: return

  public java.lang.String lookupNamespace(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #5                  // Field m_namespaces:Ljava/util/Hashtable;
       4: aload_1
       5: invokevirtual #17                 // Method java/util/Hashtable.get:(Ljava/lang/Object;)Ljava/lang/Object;
       8: checkcast     #6                  // class java/util/Stack
      11: astore_2
      12: aload_2
      13: ifnull        36
      16: aload_2
      17: invokevirtual #18                 // Method java/util/Vector.isEmpty:()Z
      20: ifne          36
      23: aload_2
      24: invokevirtual #19                 // Method java/util/Stack.peek:()Ljava/lang/Object;
      27: checkcast     #12                 // class org/apache/xml/serializer/NamespaceMappings$MappingRecord
      30: getfield      #20                 // Field org/apache/xml/serializer/NamespaceMappings$MappingRecord.m_uri:Ljava/lang/String;
      33: goto          37
      36: aconst_null
      37: areturn

  org.apache.xml.serializer.NamespaceMappings$MappingRecord getMappingFromPrefix(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #5                  // Field m_namespaces:Ljava/util/Hashtable;
       4: aload_1
       5: invokevirtual #17                 // Method java/util/Hashtable.get:(Ljava/lang/Object;)Ljava/lang/Object;
       8: checkcast     #6                  // class java/util/Stack
      11: astore_2
      12: aload_2
      13: ifnull        33
      16: aload_2
      17: invokevirtual #18                 // Method java/util/Vector.isEmpty:()Z
      20: ifne          33
      23: aload_2
      24: invokevirtual #19                 // Method java/util/Stack.peek:()Ljava/lang/Object;
      27: checkcast     #12                 // class org/apache/xml/serializer/NamespaceMappings$MappingRecord
      30: goto          34
      33: aconst_null
      34: areturn

  public java.lang.String lookupPrefix(java.lang.String);
    Code:
       0: aconst_null
       1: astore_2
       2: aload_0
       3: getfield      #5                  // Field m_namespaces:Ljava/util/Hashtable;
       6: invokevirtual #21                 // Method java/util/Hashtable.keys:()Ljava/util/Enumeration;
       9: astore_3
      10: goto          52
      13: aload_3
      14: invokeinterface #22,  1           // InterfaceMethod java/util/Enumeration.nextElement:()Ljava/lang/Object;
      19: checkcast     #23                 // class java/lang/String
      22: astore        4
      24: aload_0
      25: aload         4
      27: invokevirtual #24                 // Method lookupNamespace:(Ljava/lang/String;)Ljava/lang/String;
      30: astore        5
      32: aload         5
      34: ifnull        52
      37: aload         5
      39: aload_1
      40: invokevirtual #25                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      43: ifeq          52
      46: aload         4
      48: astore_2
      49: goto          61
      52: aload_3
      53: invokeinterface #26,  1           // InterfaceMethod java/util/Enumeration.hasMoreElements:()Z
      58: ifne          13
      61: aload_2
      62: areturn

  org.apache.xml.serializer.NamespaceMappings$MappingRecord getMappingFromURI(java.lang.String);
    Code:
       0: aconst_null
       1: astore_2
       2: aload_0
       3: getfield      #5                  // Field m_namespaces:Ljava/util/Hashtable;
       6: invokevirtual #21                 // Method java/util/Hashtable.keys:()Ljava/util/Enumeration;
       9: astore_3
      10: goto          55
      13: aload_3
      14: invokeinterface #22,  1           // InterfaceMethod java/util/Enumeration.nextElement:()Ljava/lang/Object;
      19: checkcast     #23                 // class java/lang/String
      22: astore        4
      24: aload_0
      25: aload         4
      27: invokevirtual #27                 // Method getMappingFromPrefix:(Ljava/lang/String;)Lorg/apache/xml/serializer/NamespaceMappings$MappingRecord;
      30: astore        5
      32: aload         5
      34: ifnull        55
      37: aload         5
      39: getfield      #20                 // Field org/apache/xml/serializer/NamespaceMappings$MappingRecord.m_uri:Ljava/lang/String;
      42: aload_1
      43: invokevirtual #25                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      46: ifeq          55
      49: aload         5
      51: astore_2
      52: goto          64
      55: aload_3
      56: invokeinterface #26,  1           // InterfaceMethod java/util/Enumeration.hasMoreElements:()Z
      61: ifne          13
      64: aload_2
      65: areturn

  boolean popNamespace(java.lang.String);
    Code:
       0: aload_1
       1: ldc           #15                 // String xml
       3: invokevirtual #28                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
       6: ifeq          11
       9: iconst_0
      10: ireturn
      11: aload_0
      12: getfield      #5                  // Field m_namespaces:Ljava/util/Hashtable;
      15: aload_1
      16: invokevirtual #17                 // Method java/util/Hashtable.get:(Ljava/lang/Object;)Ljava/lang/Object;
      19: checkcast     #6                  // class java/util/Stack
      22: dup
      23: astore_2
      24: ifnull        34
      27: aload_2
      28: invokevirtual #29                 // Method java/util/Stack.pop:()Ljava/lang/Object;
      31: pop
      32: iconst_1
      33: ireturn
      34: iconst_0
      35: ireturn

  boolean pushNamespace(java.lang.String, java.lang.String, int);
    Code:
       0: aload_1
       1: ldc           #15                 // String xml
       3: invokevirtual #28                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
       6: ifeq          11
       9: iconst_0
      10: ireturn
      11: aload_0
      12: getfield      #5                  // Field m_namespaces:Ljava/util/Hashtable;
      15: aload_1
      16: invokevirtual #17                 // Method java/util/Hashtable.get:(Ljava/lang/Object;)Ljava/lang/Object;
      19: checkcast     #6                  // class java/util/Stack
      22: dup
      23: astore        4
      25: ifnonnull     47
      28: aload_0
      29: getfield      #5                  // Field m_namespaces:Ljava/util/Hashtable;
      32: aload_1
      33: new           #6                  // class java/util/Stack
      36: dup
      37: invokespecial #7                  // Method java/util/Stack."<init>":()V
      40: dup
      41: astore        4
      43: invokevirtual #11                 // Method java/util/Hashtable.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      46: pop
      47: aload         4
      49: invokevirtual #30                 // Method java/util/Stack.empty:()Z
      52: ifne          75
      55: aload_2
      56: aload         4
      58: invokevirtual #19                 // Method java/util/Stack.peek:()Ljava/lang/Object;
      61: checkcast     #12                 // class org/apache/xml/serializer/NamespaceMappings$MappingRecord
      64: getfield      #20                 // Field org/apache/xml/serializer/NamespaceMappings$MappingRecord.m_uri:Ljava/lang/String;
      67: invokevirtual #25                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      70: ifeq          75
      73: iconst_0
      74: ireturn
      75: new           #12                 // class org/apache/xml/serializer/NamespaceMappings$MappingRecord
      78: dup
      79: aload_0
      80: aload_1
      81: aload_2
      82: iload_3
      83: invokespecial #13                 // Method org/apache/xml/serializer/NamespaceMappings$MappingRecord."<init>":(Lorg/apache/xml/serializer/NamespaceMappings;Ljava/lang/String;Ljava/lang/String;I)V
      86: astore        5
      88: aload         4
      90: aload         5
      92: invokevirtual #14                 // Method java/util/Stack.push:(Ljava/lang/Object;)Ljava/lang/Object;
      95: pop
      96: aload_0
      97: getfield      #8                  // Field m_nodeStack:Ljava/util/Stack;
     100: aload         5
     102: invokevirtual #14                 // Method java/util/Stack.push:(Ljava/lang/Object;)Ljava/lang/Object;
     105: pop
     106: iconst_1
     107: ireturn

  void popNamespaces(int, org.xml.sax.ContentHandler);
    Code:
       0: goto          3
       3: aload_0
       4: getfield      #8                  // Field m_nodeStack:Ljava/util/Stack;
       7: invokevirtual #18                 // Method java/util/Vector.isEmpty:()Z
      10: ifeq          14
      13: return
      14: aload_0
      15: getfield      #8                  // Field m_nodeStack:Ljava/util/Stack;
      18: invokevirtual #19                 // Method java/util/Stack.peek:()Ljava/lang/Object;
      21: checkcast     #12                 // class org/apache/xml/serializer/NamespaceMappings$MappingRecord
      24: astore_3
      25: aload_3
      26: getfield      #31                 // Field org/apache/xml/serializer/NamespaceMappings$MappingRecord.m_declarationDepth:I
      29: istore        4
      31: iload         4
      33: iload_1
      34: if_icmpge     38
      37: return
      38: aload_0
      39: getfield      #8                  // Field m_nodeStack:Ljava/util/Stack;
      42: invokevirtual #29                 // Method java/util/Stack.pop:()Ljava/lang/Object;
      45: checkcast     #12                 // class org/apache/xml/serializer/NamespaceMappings$MappingRecord
      48: astore_3
      49: aload_3
      50: getfield      #32                 // Field org/apache/xml/serializer/NamespaceMappings$MappingRecord.m_prefix:Ljava/lang/String;
      53: astore        5
      55: aload_0
      56: aload         5
      58: invokevirtual #33                 // Method popNamespace:(Ljava/lang/String;)Z
      61: pop
      62: aload_2
      63: ifnull        79
      66: aload_2
      67: aload         5
      69: invokeinterface #34,  2           // InterfaceMethod org/xml/sax/ContentHandler.endPrefixMapping:(Ljava/lang/String;)V
      74: goto          79
      77: astore        6
      79: goto          3
    Exception table:
       from    to  target type
          66    74    77   Class org/xml/sax/SAXException

  public java.lang.String generateNextPrefix();
    Code:
       0: new           #36                 // class java/lang/StringBuffer
       3: dup
       4: invokespecial #37                 // Method java/lang/StringBuffer."<init>":()V
       7: ldc           #38                 // String ns
       9: invokevirtual #39                 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      12: aload_0
      13: dup
      14: getfield      #2                  // Field count:I
      17: dup_x1
      18: iconst_1
      19: iadd
      20: putfield      #2                  // Field count:I
      23: invokevirtual #40                 // Method java/lang/StringBuffer.append:(I)Ljava/lang/StringBuffer;
      26: invokevirtual #41                 // Method java/lang/StringBuffer.toString:()Ljava/lang/String;
      29: areturn

  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
    Code:
       0: new           #42                 // class org/apache/xml/serializer/NamespaceMappings
       3: dup
       4: invokespecial #43                 // Method "<init>":()V
       7: astore_1
       8: aload_1
       9: aload_0
      10: getfield      #8                  // Field m_nodeStack:Ljava/util/Stack;
      13: invokevirtual #44                 // Method java/util/Vector.clone:()Ljava/lang/Object;
      16: checkcast     #6                  // class java/util/Stack
      19: putfield      #8                  // Field m_nodeStack:Ljava/util/Stack;
      22: aload_1
      23: aload_0
      24: getfield      #5                  // Field m_namespaces:Ljava/util/Hashtable;
      27: invokevirtual #45                 // Method java/util/Hashtable.clone:()Ljava/lang/Object;
      30: checkcast     #3                  // class java/util/Hashtable
      33: putfield      #5                  // Field m_namespaces:Ljava/util/Hashtable;
      36: aload_1
      37: aload_0
      38: getfield      #2                  // Field count:I
      41: putfield      #2                  // Field count:I
      44: aload_1
      45: areturn

  final void reset();
    Code:
       0: aload_0
       1: iconst_0
       2: putfield      #2                  // Field count:I
       5: aload_0
       6: getfield      #5                  // Field m_namespaces:Ljava/util/Hashtable;
       9: invokevirtual #46                 // Method java/util/Hashtable.clear:()V
      12: aload_0
      13: getfield      #8                  // Field m_nodeStack:Ljava/util/Stack;
      16: invokevirtual #47                 // Method java/util/Vector.clear:()V
      19: aload_0
      20: invokespecial #9                  // Method initNamespaces:()V
      23: return
}
