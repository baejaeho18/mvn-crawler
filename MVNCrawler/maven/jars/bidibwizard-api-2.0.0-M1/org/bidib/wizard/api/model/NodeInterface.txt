Compiled from "NodeInterface.java"
public interface org.bidib.wizard.api.model.NodeInterface extends org.bidib.wizard.api.model.PortsProvider {
  public static final java.lang.String PROPERTY_NODE_STALL;

  public static final java.lang.String PROPERTY_REASON_DATA;

  public static final java.lang.String PROPERTY_FEEDBACKPORTS;

  public static final java.lang.String PROPERTY_GLOBAL_DETECTOR_FEEDBACKPORT;

  public static final java.lang.String PROPERTY_FEEDBACKPOSITIONS;

  public static final java.lang.String PROPERTY_FEEDBACKPORT_STATUS;

  public static final java.lang.String PROPERTY_FEEDBACKPORT_ADDRESSES;

  public static final java.lang.String PROPERTY_FEEDBACKPORT_CONFIDENCE;

  public static final java.lang.String PROPERTY_FEEDBACKPORT_DYNSTATES;

  public static final java.lang.String PROPERTY_LABEL;

  public static final java.lang.String PROPERTY_ACCESSORIES;

  public static final java.lang.String PROPERTY_INITIAL_LOAD_FINISHED;

  public static final java.lang.String PROPERTY_IDENTIFY_STATE;

  public static final java.lang.String PROPERTY_ERROR_STATE;

  public static final java.lang.String PROPERTY_NODE_HAS_ERROR;

  public static final java.lang.String PROPERTY_ADDRESSMESSAGESENABLED;

  public abstract void loadNodeConfiguration();

  public abstract void postLoadNodeDataProcessing();

  public abstract org.bidib.jbidibc.core.Node getNode();

  public abstract long getUniqueId();

  public abstract org.bidib.wizard.model.ports.FeedbackPort getGlobalDetectorFeedbackPort();

  public abstract void setFeedbackPorts(java.util.List<org.bidib.wizard.model.ports.FeedbackPort>);

  public abstract byte[] getAddr();

  public abstract void setGenericPorts(java.util.List<org.bidib.wizard.model.ports.GenericPort>);

  public abstract void setAnalogPorts(java.util.List<org.bidib.wizard.model.ports.AnalogPort>);

  public abstract java.util.List<org.bidib.wizard.api.model.Accessory> getAccessories();

  public abstract org.bidib.jbidibc.exchange.vendorcv.VendorCvData getVendorCV();

  public abstract void setVendorCV(org.bidib.jbidibc.exchange.vendorcv.VendorCvData);

  public abstract org.bidib.wizard.api.model.Accessory replaceAccessory(org.bidib.wizard.api.model.Accessory, boolean);

  public abstract org.bidib.wizard.api.model.Macro replaceMacro(org.bidib.wizard.api.model.Macro, boolean);

  public abstract void updateConfigVariableValues(java.util.List<org.bidib.jbidibc.core.node.ConfigurationVariable>, boolean);

  public abstract void setConfigVariables(java.util.List<org.bidib.jbidibc.core.node.ConfigurationVariable>);

  public abstract java.util.List<org.bidib.jbidibc.core.node.ConfigurationVariable> getConfigVariables();

  public abstract void setNodeHasError(boolean);

  public abstract boolean hasServoPorts();

  public abstract boolean hasSoundPorts();

  public abstract boolean hasAccessories();

  public abstract int getMaxAspects();

  public abstract void setMaxAspects(int);

  public abstract void setAccessories(java.util.List<org.bidib.wizard.api.model.Accessory>);

  public abstract boolean hasMacros();

  public abstract boolean hasUnloadedMacros();

  public abstract void setMacros(java.util.List<org.bidib.wizard.api.model.Macro>);

  public abstract org.bidib.jbidibc.core.enumeration.IdentifyState getIdentifyState();

  public abstract void setIdentifyState(org.bidib.jbidibc.core.enumeration.IdentifyState);

  public abstract org.bidib.jbidibc.core.enumeration.SysErrorEnum getErrorState();

  public abstract java.lang.Boolean isAddressMessagesEnabled();

  public abstract java.lang.Boolean isDccStartEnabled();

  public abstract java.lang.Boolean isExternalStartEnabled();

  public abstract java.lang.Boolean isFeedbackMessagesEnabled();

  public abstract java.lang.Boolean isFeedbackMirrorDisabled();

  public abstract java.lang.Boolean isKeyMessagesEnabled();

  public abstract boolean isNodeHasError();

  public abstract boolean isNodeHasError(boolean);

  public abstract void setErrorState(org.bidib.jbidibc.core.enumeration.SysErrorEnum, byte[]);

  public abstract void setLabel(java.lang.String);

  public abstract java.lang.String getLabel();

  public abstract boolean isGlobalDetectorAvailable();

  public abstract void setGlobalDetectorAvailable(boolean);

  public abstract boolean isUpdatable();

  public abstract boolean isBootloaderNode();

  public abstract void setInputPorts(java.util.List<org.bidib.wizard.model.ports.InputPort>);

  public abstract void setInputPortStatus(int, int);

  public abstract boolean hasAnalogPorts();

  public abstract boolean hasSwitchPorts();

  public abstract boolean hasSwitchPairPorts();

  public abstract boolean hasMotorPorts();

  public abstract void setFeedbackPortConfidence(int, boolean, boolean, boolean);

  public abstract void setFeedbackPortStatus(int, org.bidib.wizard.model.status.FeedbackPortStatus, java.lang.Long);

  public abstract void setPortConfig(org.bidib.jbidibc.core.enumeration.LcOutputType, int, java.util.Map<java.lang.Byte, org.bidib.jbidibc.core.port.PortConfigValue<?>>, java.beans.PropertyChangeListener);

  public abstract void clearPortCache();

  public abstract void setBacklightPorts(java.util.List<org.bidib.wizard.model.ports.BacklightPort>);

  public abstract void setBacklightPortValue(int, int);

  public abstract void setLightPorts(java.util.List<org.bidib.wizard.model.ports.LightPort>);

  public abstract void setLightPortStatus(int, int);

  public abstract void setMotorPorts(java.util.List<org.bidib.wizard.model.ports.MotorPort>);

  public abstract void setMotorPortValue(int, int);

  public abstract void setServoPorts(java.util.List<org.bidib.wizard.model.ports.ServoPort>);

  public abstract void setServoPortValue(int, int);

  public abstract void setSoundPorts(java.util.List<org.bidib.wizard.model.ports.SoundPort>);

  public abstract void setSoundPortStatus(int, int);

  public abstract void setSwitchPorts(java.util.List<org.bidib.wizard.model.ports.SwitchPort>);

  public abstract void setSwitchPortStatus(int, int);

  public abstract void setSwitchPairPorts(java.util.List<org.bidib.wizard.model.ports.SwitchPairPort>);

  public abstract void setSwitchPairPortStatus(int, int);

  public abstract void setNodeStall(boolean);

  public abstract boolean hasBacklightPorts();

  public abstract boolean hasInputPorts();

  public abstract boolean hasLightPorts();

  public abstract boolean hasFeedbackPorts();

  public abstract int getFeedbackPortCount();

  public abstract void setFeedbackPosition(int, int, int);

  public abstract void setFeedbackPortAddresses(int, java.util.List<org.bidib.jbidibc.core.FeedbackAddressData>);

  public abstract void setFeedbackPortSpeed(int, int, int);

  public abstract void setFeedbackPortDynStates(int, java.util.List<org.bidib.jbidibc.core.FeedbackDynStateData>);

  public abstract void setFlags(java.util.Collection<org.bidib.wizard.api.model.Flag>);

  public abstract void addAccessoryListListener(org.bidib.wizard.api.model.listener.AccessoryListListener);

  public abstract void removeAccessoryListListener(org.bidib.wizard.api.model.listener.AccessoryListListener);

  public abstract void addFlagListListener(org.bidib.wizard.api.model.listener.FlagListListener);

  public abstract void removeFlagListListener(org.bidib.wizard.api.model.listener.FlagListListener);

  public abstract void addCvDefinitionListener(org.bidib.wizard.api.model.listener.CvDefinitionListener);

  public abstract void removeCvDefinitionListener(org.bidib.wizard.api.model.listener.CvDefinitionListener);

  public abstract boolean isCvDefinitionAvailable();

  public abstract void addPortListListener(java.lang.Class<?>, org.bidib.wizard.api.model.listener.PortListListener);

  public abstract void removePortListListener(java.lang.Class<?>, org.bidib.wizard.api.model.listener.PortListListener);

  public abstract void addPortValueListener(java.lang.Class<?>, org.bidib.wizard.api.model.listener.PortValueListener<?>);

  public abstract void removePortValueListener(java.lang.Class<?>, org.bidib.wizard.api.model.listener.PortValueListener<?>);

  public abstract int getMaxMacroSteps();

  public abstract byte[] getReasonData();

  public abstract boolean isNodeStall();

  public abstract org.bidib.wizard.api.model.BoosterNodeInterface getBoosterNode();

  public abstract org.bidib.wizard.api.model.CommandStationNodeInterface getCommandStationNode();

  public abstract org.bidib.wizard.api.model.SwitchingNodeInterface getSwitchingNode();

  public abstract org.bidib.wizard.api.model.OccupancyNodeInterface getOccupancyNode();

  public abstract void signalInitialLoadFinished();

  public abstract java.lang.Object getInitialLoadFinishedLock();

  public abstract void addPropertyChangeListener(java.beans.PropertyChangeListener);

  public abstract void removePropertyChangeListener(java.beans.PropertyChangeListener);

  public abstract void addPropertyChangeListener(java.lang.String, java.beans.PropertyChangeListener);

  public abstract void removePropertyChangeListener(java.lang.String, java.beans.PropertyChangeListener);

  public abstract void setReasonData(byte[]);

  public abstract void addNodeListener(org.bidib.wizard.api.model.listener.NodeListener);

  public abstract void removeNodeListener(org.bidib.wizard.api.model.listener.NodeListener);

  public abstract boolean isNodeHasRestartPendingError();

  public abstract void setAddressMessagesEnabled(java.lang.Boolean);

  public abstract void setDccStartEnabled(java.lang.Boolean);

  public abstract void setExternalStartEnabled(java.lang.Boolean);

  public abstract void setFeedbackMessagesEnabled(java.lang.Boolean);

  public abstract void setFeedbackMirrorDisabled(java.lang.Boolean);

  public abstract void setKeyMessagesEnabled(java.lang.Boolean);

  public abstract void addPortListener(java.lang.Class<?>, org.bidib.wizard.api.model.listener.PortListener<? extends org.bidib.wizard.model.status.BidibStatus>);

  public abstract void removePortListener(java.lang.Class<?>, org.bidib.wizard.api.model.listener.PortListener<? extends org.bidib.wizard.model.status.BidibStatus>);

  public abstract void addMacroListListener(org.bidib.wizard.api.model.listener.MacroListListener);

  public abstract void removeMacroListListener(org.bidib.wizard.api.model.listener.MacroListListener);

  public abstract void setAnalogPortConfig(int, java.util.Map<java.lang.Byte, org.bidib.jbidibc.core.port.PortConfigValue<?>>);

  public abstract void setBacklightPortConfig(int, java.util.Map<java.lang.Byte, org.bidib.jbidibc.core.port.PortConfigValue<?>>);

  public abstract void setLightPortConfig(int, java.util.Map<java.lang.Byte, org.bidib.jbidibc.core.port.PortConfigValue<?>>);

  public abstract void setServoPortConfig(int, java.util.Map<java.lang.Byte, org.bidib.jbidibc.core.port.PortConfigValue<?>>);

  public abstract void setSwitchPortConfig(int, java.util.Map<java.lang.Byte, org.bidib.jbidibc.core.port.PortConfigValue<?>>);

  public abstract void setSwitchPairPortConfig(int, java.util.Map<java.lang.Byte, org.bidib.jbidibc.core.port.PortConfigValue<?>>);

  public abstract void setSoundPortConfig(int, java.util.Map<java.lang.Byte, org.bidib.jbidibc.core.port.PortConfigValue<?>>);

  public abstract boolean isInitialLoadFinished();
}
