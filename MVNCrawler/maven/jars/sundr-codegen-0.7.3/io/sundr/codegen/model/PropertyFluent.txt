Compiled from "PropertyFluent.java"
public interface io.sundr.codegen.model.PropertyFluent<A extends io.sundr.codegen.model.PropertyFluent<A>> extends io.sundr.codegen.model.ModifierSupportFluent<A> {
  public abstract A addToAnnotations(int, io.sundr.codegen.model.AnnotationRef);

  public abstract A setToAnnotations(int, io.sundr.codegen.model.AnnotationRef);

  public abstract A addToAnnotations(io.sundr.codegen.model.AnnotationRef...);

  public abstract A addAllToAnnotations(java.util.Collection<io.sundr.codegen.model.AnnotationRef>);

  public abstract A removeFromAnnotations(io.sundr.codegen.model.AnnotationRef...);

  public abstract A removeAllFromAnnotations(java.util.Collection<io.sundr.codegen.model.AnnotationRef>);

  public abstract java.util.List<io.sundr.codegen.model.AnnotationRef> getAnnotations();

  public abstract java.util.List<io.sundr.codegen.model.AnnotationRef> buildAnnotations();

  public abstract io.sundr.codegen.model.AnnotationRef buildAnnotation(int);

  public abstract io.sundr.codegen.model.AnnotationRef buildFirstAnnotation();

  public abstract io.sundr.codegen.model.AnnotationRef buildLastAnnotation();

  public abstract io.sundr.codegen.model.AnnotationRef buildMatchingAnnotation(io.sundr.builder.Predicate<io.sundr.builder.Builder<? extends io.sundr.codegen.model.AnnotationRef>>);

  public abstract A withAnnotations(java.util.List<io.sundr.codegen.model.AnnotationRef>);

  public abstract A withAnnotations(io.sundr.codegen.model.AnnotationRef...);

  public abstract java.lang.Boolean hasAnnotations();

  public abstract io.sundr.codegen.model.PropertyFluent$AnnotationsNested<A> addNewAnnotation();

  public abstract io.sundr.codegen.model.PropertyFluent$AnnotationsNested<A> addNewAnnotationLike(io.sundr.codegen.model.AnnotationRef);

  public abstract io.sundr.codegen.model.TypeRef getTypeRef();

  public abstract io.sundr.codegen.model.TypeRef buildTypeRef();

  public abstract A withTypeRef(io.sundr.codegen.model.TypeRef);

  public abstract java.lang.Boolean hasTypeRef();

  public abstract A withVoidRefTypeRef(io.sundr.codegen.model.VoidRef);

  public abstract io.sundr.codegen.model.PropertyFluent$VoidRefTypeRefNested<A> withNewVoidRefTypeRef();

  public abstract io.sundr.codegen.model.PropertyFluent$VoidRefTypeRefNested<A> withNewVoidRefTypeRefLike(io.sundr.codegen.model.VoidRef);

  public abstract A withWildcardRefTypeRef(io.sundr.codegen.model.WildcardRef);

  public abstract io.sundr.codegen.model.PropertyFluent$WildcardRefTypeRefNested<A> withNewWildcardRefTypeRef();

  public abstract io.sundr.codegen.model.PropertyFluent$WildcardRefTypeRefNested<A> withNewWildcardRefTypeRefLike(io.sundr.codegen.model.WildcardRef);

  public abstract A withPrimitiveRefTypeRef(io.sundr.codegen.model.PrimitiveRef);

  public abstract io.sundr.codegen.model.PropertyFluent$PrimitiveRefTypeRefNested<A> withNewPrimitiveRefTypeRef();

  public abstract io.sundr.codegen.model.PropertyFluent$PrimitiveRefTypeRefNested<A> withNewPrimitiveRefTypeRefLike(io.sundr.codegen.model.PrimitiveRef);

  public abstract A withTypeParamRefTypeRef(io.sundr.codegen.model.TypeParamRef);

  public abstract io.sundr.codegen.model.PropertyFluent$TypeParamRefTypeRefNested<A> withNewTypeParamRefTypeRef();

  public abstract io.sundr.codegen.model.PropertyFluent$TypeParamRefTypeRefNested<A> withNewTypeParamRefTypeRefLike(io.sundr.codegen.model.TypeParamRef);

  public abstract A withClassRefTypeRef(io.sundr.codegen.model.ClassRef);

  public abstract io.sundr.codegen.model.PropertyFluent$ClassRefTypeRefNested<A> withNewClassRefTypeRef();

  public abstract io.sundr.codegen.model.PropertyFluent$ClassRefTypeRefNested<A> withNewClassRefTypeRefLike(io.sundr.codegen.model.ClassRef);

  public abstract java.lang.String getName();

  public abstract A withName(java.lang.String);

  public abstract java.lang.Boolean hasName();
}
