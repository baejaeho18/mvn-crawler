Compiled from "ClassRefFluent.java"
public interface io.sundr.codegen.model.ClassRefFluent<A extends io.sundr.codegen.model.ClassRefFluent<A>> extends io.sundr.codegen.model.TypeRefFluent<A> {
  public abstract io.sundr.codegen.model.TypeDef getDefinition();

  public abstract A withDefinition(io.sundr.codegen.model.TypeDef);

  public abstract java.lang.Boolean hasDefinition();

  public abstract io.sundr.codegen.model.ClassRefFluent$DefinitionNested<A> withNewDefinition();

  public abstract io.sundr.codegen.model.ClassRefFluent$DefinitionNested<A> withNewDefinitionLike(io.sundr.codegen.model.TypeDef);

  public abstract java.lang.String getFullyQualifiedName();

  public abstract A withFullyQualifiedName(java.lang.String);

  public abstract java.lang.Boolean hasFullyQualifiedName();

  public abstract int getDimensions();

  public abstract A withDimensions(int);

  public abstract java.lang.Boolean hasDimensions();

  public abstract A addToArguments(int, io.sundr.codegen.model.TypeRef);

  public abstract A setToArguments(int, io.sundr.codegen.model.TypeRef);

  public abstract A addToArguments(io.sundr.codegen.model.TypeRef...);

  public abstract A addAllToArguments(java.util.Collection<io.sundr.codegen.model.TypeRef>);

  public abstract A removeFromArguments(io.sundr.codegen.model.TypeRef...);

  public abstract A removeAllFromArguments(java.util.Collection<io.sundr.codegen.model.TypeRef>);

  public abstract java.util.List<io.sundr.codegen.model.TypeRef> getArguments();

  public abstract java.util.List<io.sundr.codegen.model.TypeRef> buildArguments();

  public abstract io.sundr.codegen.model.TypeRef buildArgument(int);

  public abstract io.sundr.codegen.model.TypeRef buildFirstArgument();

  public abstract io.sundr.codegen.model.TypeRef buildLastArgument();

  public abstract io.sundr.codegen.model.TypeRef buildMatchingArgument(io.sundr.builder.Predicate<io.sundr.builder.Builder<? extends io.sundr.codegen.model.TypeRef>>);

  public abstract A withArguments(java.util.List<io.sundr.codegen.model.TypeRef>);

  public abstract A withArguments(io.sundr.codegen.model.TypeRef...);

  public abstract java.lang.Boolean hasArguments();

  public abstract A addToVoidRefArguments(int, io.sundr.codegen.model.VoidRef);

  public abstract A setToVoidRefArguments(int, io.sundr.codegen.model.VoidRef);

  public abstract A addToVoidRefArguments(io.sundr.codegen.model.VoidRef...);

  public abstract A addAllToVoidRefArguments(java.util.Collection<io.sundr.codegen.model.VoidRef>);

  public abstract A removeFromVoidRefArguments(io.sundr.codegen.model.VoidRef...);

  public abstract A removeAllFromVoidRefArguments(java.util.Collection<io.sundr.codegen.model.VoidRef>);

  public abstract io.sundr.codegen.model.ClassRefFluent$VoidRefArgumentsNested<A> addNewVoidRefArgument();

  public abstract io.sundr.codegen.model.ClassRefFluent$VoidRefArgumentsNested<A> addNewVoidRefArgumentLike(io.sundr.codegen.model.VoidRef);

  public abstract A addToWildcardRefArguments(int, io.sundr.codegen.model.WildcardRef);

  public abstract A setToWildcardRefArguments(int, io.sundr.codegen.model.WildcardRef);

  public abstract A addToWildcardRefArguments(io.sundr.codegen.model.WildcardRef...);

  public abstract A addAllToWildcardRefArguments(java.util.Collection<io.sundr.codegen.model.WildcardRef>);

  public abstract A removeFromWildcardRefArguments(io.sundr.codegen.model.WildcardRef...);

  public abstract A removeAllFromWildcardRefArguments(java.util.Collection<io.sundr.codegen.model.WildcardRef>);

  public abstract io.sundr.codegen.model.ClassRefFluent$WildcardRefArgumentsNested<A> addNewWildcardRefArgument();

  public abstract io.sundr.codegen.model.ClassRefFluent$WildcardRefArgumentsNested<A> addNewWildcardRefArgumentLike(io.sundr.codegen.model.WildcardRef);

  public abstract A addToPrimitiveRefArguments(int, io.sundr.codegen.model.PrimitiveRef);

  public abstract A setToPrimitiveRefArguments(int, io.sundr.codegen.model.PrimitiveRef);

  public abstract A addToPrimitiveRefArguments(io.sundr.codegen.model.PrimitiveRef...);

  public abstract A addAllToPrimitiveRefArguments(java.util.Collection<io.sundr.codegen.model.PrimitiveRef>);

  public abstract A removeFromPrimitiveRefArguments(io.sundr.codegen.model.PrimitiveRef...);

  public abstract A removeAllFromPrimitiveRefArguments(java.util.Collection<io.sundr.codegen.model.PrimitiveRef>);

  public abstract io.sundr.codegen.model.ClassRefFluent$PrimitiveRefArgumentsNested<A> addNewPrimitiveRefArgument();

  public abstract io.sundr.codegen.model.ClassRefFluent$PrimitiveRefArgumentsNested<A> addNewPrimitiveRefArgumentLike(io.sundr.codegen.model.PrimitiveRef);

  public abstract A addToTypeParamRefArguments(int, io.sundr.codegen.model.TypeParamRef);

  public abstract A setToTypeParamRefArguments(int, io.sundr.codegen.model.TypeParamRef);

  public abstract A addToTypeParamRefArguments(io.sundr.codegen.model.TypeParamRef...);

  public abstract A addAllToTypeParamRefArguments(java.util.Collection<io.sundr.codegen.model.TypeParamRef>);

  public abstract A removeFromTypeParamRefArguments(io.sundr.codegen.model.TypeParamRef...);

  public abstract A removeAllFromTypeParamRefArguments(java.util.Collection<io.sundr.codegen.model.TypeParamRef>);

  public abstract io.sundr.codegen.model.ClassRefFluent$TypeParamRefArgumentsNested<A> addNewTypeParamRefArgument();

  public abstract io.sundr.codegen.model.ClassRefFluent$TypeParamRefArgumentsNested<A> addNewTypeParamRefArgumentLike(io.sundr.codegen.model.TypeParamRef);

  public abstract A addToClassRefArguments(int, io.sundr.codegen.model.ClassRef);

  public abstract A setToClassRefArguments(int, io.sundr.codegen.model.ClassRef);

  public abstract A addToClassRefArguments(io.sundr.codegen.model.ClassRef...);

  public abstract A addAllToClassRefArguments(java.util.Collection<io.sundr.codegen.model.ClassRef>);

  public abstract A removeFromClassRefArguments(io.sundr.codegen.model.ClassRef...);

  public abstract A removeAllFromClassRefArguments(java.util.Collection<io.sundr.codegen.model.ClassRef>);

  public abstract io.sundr.codegen.model.ClassRefFluent$ClassRefArgumentsNested<A> addNewClassRefArgument();

  public abstract io.sundr.codegen.model.ClassRefFluent$ClassRefArgumentsNested<A> addNewClassRefArgumentLike(io.sundr.codegen.model.ClassRef);
}
