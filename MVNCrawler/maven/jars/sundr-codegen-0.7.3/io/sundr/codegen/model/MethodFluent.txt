Compiled from "MethodFluent.java"
public interface io.sundr.codegen.model.MethodFluent<A extends io.sundr.codegen.model.MethodFluent<A>> extends io.sundr.codegen.model.ModifierSupportFluent<A> {
  public abstract A addToComments(int, java.lang.String);

  public abstract A setToComments(int, java.lang.String);

  public abstract A addToComments(java.lang.String...);

  public abstract A addAllToComments(java.util.Collection<java.lang.String>);

  public abstract A removeFromComments(java.lang.String...);

  public abstract A removeAllFromComments(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getComments();

  public abstract java.lang.String getComment(int);

  public abstract java.lang.String getFirstComment();

  public abstract java.lang.String getLastComment();

  public abstract java.lang.String getMatchingComment(io.sundr.builder.Predicate<java.lang.String>);

  public abstract A withComments(java.util.List<java.lang.String>);

  public abstract A withComments(java.lang.String...);

  public abstract java.lang.Boolean hasComments();

  public abstract A addToAnnotations(int, io.sundr.codegen.model.AnnotationRef);

  public abstract A setToAnnotations(int, io.sundr.codegen.model.AnnotationRef);

  public abstract A addToAnnotations(io.sundr.codegen.model.AnnotationRef...);

  public abstract A addAllToAnnotations(java.util.Collection<io.sundr.codegen.model.AnnotationRef>);

  public abstract A removeFromAnnotations(io.sundr.codegen.model.AnnotationRef...);

  public abstract A removeAllFromAnnotations(java.util.Collection<io.sundr.codegen.model.AnnotationRef>);

  public abstract java.util.List<io.sundr.codegen.model.AnnotationRef> getAnnotations();

  public abstract java.util.List<io.sundr.codegen.model.AnnotationRef> buildAnnotations();

  public abstract io.sundr.codegen.model.AnnotationRef buildAnnotation(int);

  public abstract io.sundr.codegen.model.AnnotationRef buildFirstAnnotation();

  public abstract io.sundr.codegen.model.AnnotationRef buildLastAnnotation();

  public abstract io.sundr.codegen.model.AnnotationRef buildMatchingAnnotation(io.sundr.builder.Predicate<io.sundr.builder.Builder<? extends io.sundr.codegen.model.AnnotationRef>>);

  public abstract A withAnnotations(java.util.List<io.sundr.codegen.model.AnnotationRef>);

  public abstract A withAnnotations(io.sundr.codegen.model.AnnotationRef...);

  public abstract java.lang.Boolean hasAnnotations();

  public abstract io.sundr.codegen.model.MethodFluent$AnnotationsNested<A> addNewAnnotation();

  public abstract io.sundr.codegen.model.MethodFluent$AnnotationsNested<A> addNewAnnotationLike(io.sundr.codegen.model.AnnotationRef);

  public abstract A addToParameters(int, io.sundr.codegen.model.TypeParamDef);

  public abstract A setToParameters(int, io.sundr.codegen.model.TypeParamDef);

  public abstract A addToParameters(io.sundr.codegen.model.TypeParamDef...);

  public abstract A addAllToParameters(java.util.Collection<io.sundr.codegen.model.TypeParamDef>);

  public abstract A removeFromParameters(io.sundr.codegen.model.TypeParamDef...);

  public abstract A removeAllFromParameters(java.util.Collection<io.sundr.codegen.model.TypeParamDef>);

  public abstract java.util.List<io.sundr.codegen.model.TypeParamDef> getParameters();

  public abstract java.util.List<io.sundr.codegen.model.TypeParamDef> buildParameters();

  public abstract io.sundr.codegen.model.TypeParamDef buildParameter(int);

  public abstract io.sundr.codegen.model.TypeParamDef buildFirstParameter();

  public abstract io.sundr.codegen.model.TypeParamDef buildLastParameter();

  public abstract io.sundr.codegen.model.TypeParamDef buildMatchingParameter(io.sundr.builder.Predicate<io.sundr.builder.Builder<? extends io.sundr.codegen.model.TypeParamDef>>);

  public abstract A withParameters(java.util.List<io.sundr.codegen.model.TypeParamDef>);

  public abstract A withParameters(io.sundr.codegen.model.TypeParamDef...);

  public abstract java.lang.Boolean hasParameters();

  public abstract io.sundr.codegen.model.MethodFluent$ParametersNested<A> addNewParameter();

  public abstract io.sundr.codegen.model.MethodFluent$ParametersNested<A> addNewParameterLike(io.sundr.codegen.model.TypeParamDef);

  public abstract java.lang.String getName();

  public abstract A withName(java.lang.String);

  public abstract java.lang.Boolean hasName();

  public abstract io.sundr.codegen.model.TypeRef getReturnType();

  public abstract io.sundr.codegen.model.TypeRef buildReturnType();

  public abstract A withReturnType(io.sundr.codegen.model.TypeRef);

  public abstract java.lang.Boolean hasReturnType();

  public abstract A withVoidRefReturnType(io.sundr.codegen.model.VoidRef);

  public abstract io.sundr.codegen.model.MethodFluent$VoidRefReturnTypeNested<A> withNewVoidRefReturnType();

  public abstract io.sundr.codegen.model.MethodFluent$VoidRefReturnTypeNested<A> withNewVoidRefReturnTypeLike(io.sundr.codegen.model.VoidRef);

  public abstract A withWildcardRefReturnType(io.sundr.codegen.model.WildcardRef);

  public abstract io.sundr.codegen.model.MethodFluent$WildcardRefReturnTypeNested<A> withNewWildcardRefReturnType();

  public abstract io.sundr.codegen.model.MethodFluent$WildcardRefReturnTypeNested<A> withNewWildcardRefReturnTypeLike(io.sundr.codegen.model.WildcardRef);

  public abstract A withPrimitiveRefReturnType(io.sundr.codegen.model.PrimitiveRef);

  public abstract io.sundr.codegen.model.MethodFluent$PrimitiveRefReturnTypeNested<A> withNewPrimitiveRefReturnType();

  public abstract io.sundr.codegen.model.MethodFluent$PrimitiveRefReturnTypeNested<A> withNewPrimitiveRefReturnTypeLike(io.sundr.codegen.model.PrimitiveRef);

  public abstract A withTypeParamRefReturnType(io.sundr.codegen.model.TypeParamRef);

  public abstract io.sundr.codegen.model.MethodFluent$TypeParamRefReturnTypeNested<A> withNewTypeParamRefReturnType();

  public abstract io.sundr.codegen.model.MethodFluent$TypeParamRefReturnTypeNested<A> withNewTypeParamRefReturnTypeLike(io.sundr.codegen.model.TypeParamRef);

  public abstract A withClassRefReturnType(io.sundr.codegen.model.ClassRef);

  public abstract io.sundr.codegen.model.MethodFluent$ClassRefReturnTypeNested<A> withNewClassRefReturnType();

  public abstract io.sundr.codegen.model.MethodFluent$ClassRefReturnTypeNested<A> withNewClassRefReturnTypeLike(io.sundr.codegen.model.ClassRef);

  public abstract A addToArguments(int, io.sundr.codegen.model.Property);

  public abstract A setToArguments(int, io.sundr.codegen.model.Property);

  public abstract A addToArguments(io.sundr.codegen.model.Property...);

  public abstract A addAllToArguments(java.util.Collection<io.sundr.codegen.model.Property>);

  public abstract A removeFromArguments(io.sundr.codegen.model.Property...);

  public abstract A removeAllFromArguments(java.util.Collection<io.sundr.codegen.model.Property>);

  public abstract java.util.List<io.sundr.codegen.model.Property> getArguments();

  public abstract java.util.List<io.sundr.codegen.model.Property> buildArguments();

  public abstract io.sundr.codegen.model.Property buildArgument(int);

  public abstract io.sundr.codegen.model.Property buildFirstArgument();

  public abstract io.sundr.codegen.model.Property buildLastArgument();

  public abstract io.sundr.codegen.model.Property buildMatchingArgument(io.sundr.builder.Predicate<io.sundr.builder.Builder<? extends io.sundr.codegen.model.Property>>);

  public abstract A withArguments(java.util.List<io.sundr.codegen.model.Property>);

  public abstract A withArguments(io.sundr.codegen.model.Property...);

  public abstract java.lang.Boolean hasArguments();

  public abstract io.sundr.codegen.model.MethodFluent$ArgumentsNested<A> addNewArgument();

  public abstract io.sundr.codegen.model.MethodFluent$ArgumentsNested<A> addNewArgumentLike(io.sundr.codegen.model.Property);

  public abstract boolean isVarArgPreferred();

  public abstract A withVarArgPreferred(boolean);

  public abstract java.lang.Boolean hasVarArgPreferred();

  public abstract A addToExceptions(int, io.sundr.codegen.model.ClassRef);

  public abstract A setToExceptions(int, io.sundr.codegen.model.ClassRef);

  public abstract A addToExceptions(io.sundr.codegen.model.ClassRef...);

  public abstract A addAllToExceptions(java.util.Collection<io.sundr.codegen.model.ClassRef>);

  public abstract A removeFromExceptions(io.sundr.codegen.model.ClassRef...);

  public abstract A removeAllFromExceptions(java.util.Collection<io.sundr.codegen.model.ClassRef>);

  public abstract java.util.List<io.sundr.codegen.model.ClassRef> getExceptions();

  public abstract java.util.List<io.sundr.codegen.model.ClassRef> buildExceptions();

  public abstract io.sundr.codegen.model.ClassRef buildException(int);

  public abstract io.sundr.codegen.model.ClassRef buildFirstException();

  public abstract io.sundr.codegen.model.ClassRef buildLastException();

  public abstract io.sundr.codegen.model.ClassRef buildMatchingException(io.sundr.builder.Predicate<io.sundr.builder.Builder<? extends io.sundr.codegen.model.ClassRef>>);

  public abstract A withExceptions(java.util.List<io.sundr.codegen.model.ClassRef>);

  public abstract A withExceptions(io.sundr.codegen.model.ClassRef...);

  public abstract java.lang.Boolean hasExceptions();

  public abstract io.sundr.codegen.model.MethodFluent$ExceptionsNested<A> addNewException();

  public abstract io.sundr.codegen.model.MethodFluent$ExceptionsNested<A> addNewExceptionLike(io.sundr.codegen.model.ClassRef);

  public abstract io.sundr.codegen.model.Block getBlock();

  public abstract io.sundr.codegen.model.Block buildBlock();

  public abstract A withBlock(io.sundr.codegen.model.Block);

  public abstract java.lang.Boolean hasBlock();

  public abstract io.sundr.codegen.model.MethodFluent$BlockNested<A> withNewBlock();

  public abstract io.sundr.codegen.model.MethodFluent$BlockNested<A> withNewBlockLike(io.sundr.codegen.model.Block);

  public abstract io.sundr.codegen.model.MethodFluent$BlockNested<A> editBlock();

  public abstract io.sundr.codegen.model.MethodFluent$BlockNested<A> editOrNewBlock();

  public abstract io.sundr.codegen.model.MethodFluent$BlockNested<A> editOrNewBlockLike(io.sundr.codegen.model.Block);
}
