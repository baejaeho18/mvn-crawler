Compiled from "Config.java"
public class tk.mybatis.mapper.entity.Config {
  public static final java.lang.String PREFIX;

  private java.util.List<java.lang.Class> mappers;

  private java.lang.String IDENTITY;

  private boolean BEFORE;

  private java.lang.String seqFormat;

  private java.lang.String catalog;

  private java.lang.String schema;

  private boolean checkExampleEntityClass;

  private boolean useSimpleType;

  private boolean enumAsSimpleType;

  private boolean enableMethodAnnotation;

  private boolean notEmpty;

  private tk.mybatis.mapper.code.Style style;

  private java.lang.String wrapKeyword;

  private java.lang.Class<? extends tk.mybatis.mapper.mapperhelper.resolve.EntityResolve> resolveClass;

  private boolean safeDelete;

  private boolean safeUpdate;

  private boolean useJavaType;

  public tk.mybatis.mapper.entity.Config();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/ArrayList
       8: dup
       9: invokespecial #3                  // Method java/util/ArrayList."<init>":()V
      12: putfield      #4                  // Field mappers:Ljava/util/List;
      15: aload_0
      16: iconst_1
      17: putfield      #5                  // Field useSimpleType:Z
      20: aload_0
      21: ldc           #6                  // String
      23: putfield      #7                  // Field wrapKeyword:Ljava/lang/String;
      26: return

  public java.lang.String getCatalog();
    Code:
       0: aload_0
       1: getfield      #8                  // Field catalog:Ljava/lang/String;
       4: areturn

  public void setCatalog(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #8                  // Field catalog:Ljava/lang/String;
       5: return

  public java.lang.String getIDENTITY();
    Code:
       0: aload_0
       1: getfield      #9                  // Field IDENTITY:Ljava/lang/String;
       4: invokestatic  #10                 // Method tk/mybatis/mapper/util/StringUtil.isNotEmpty:(Ljava/lang/String;)Z
       7: ifeq          15
      10: aload_0
      11: getfield      #9                  // Field IDENTITY:Ljava/lang/String;
      14: areturn
      15: getstatic     #11                 // Field tk/mybatis/mapper/code/IdentityDialect.MYSQL:Ltk/mybatis/mapper/code/IdentityDialect;
      18: invokevirtual #12                 // Method tk/mybatis/mapper/code/IdentityDialect.getIdentityRetrievalStatement:()Ljava/lang/String;
      21: areturn

  public void setIDENTITY(java.lang.String);
    Code:
       0: aload_1
       1: invokestatic  #13                 // Method tk/mybatis/mapper/code/IdentityDialect.getDatabaseDialect:(Ljava/lang/String;)Ltk/mybatis/mapper/code/IdentityDialect;
       4: astore_2
       5: aload_2
       6: ifnull        20
       9: aload_0
      10: aload_2
      11: invokevirtual #12                 // Method tk/mybatis/mapper/code/IdentityDialect.getIdentityRetrievalStatement:()Ljava/lang/String;
      14: putfield      #9                  // Field IDENTITY:Ljava/lang/String;
      17: goto          25
      20: aload_0
      21: aload_1
      22: putfield      #9                  // Field IDENTITY:Ljava/lang/String;
      25: return

  public java.lang.String getPrefix();
    Code:
       0: aload_0
       1: getfield      #8                  // Field catalog:Ljava/lang/String;
       4: invokestatic  #10                 // Method tk/mybatis/mapper/util/StringUtil.isNotEmpty:(Ljava/lang/String;)Z
       7: ifeq          15
      10: aload_0
      11: getfield      #8                  // Field catalog:Ljava/lang/String;
      14: areturn
      15: aload_0
      16: getfield      #14                 // Field schema:Ljava/lang/String;
      19: invokestatic  #10                 // Method tk/mybatis/mapper/util/StringUtil.isNotEmpty:(Ljava/lang/String;)Z
      22: ifeq          30
      25: aload_0
      26: getfield      #14                 // Field schema:Ljava/lang/String;
      29: areturn
      30: ldc           #6                  // String
      32: areturn

  public java.lang.String getSchema();
    Code:
       0: aload_0
       1: getfield      #14                 // Field schema:Ljava/lang/String;
       4: areturn

  public void setSchema(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #14                 // Field schema:Ljava/lang/String;
       5: return

  public java.lang.String getSeqFormat();
    Code:
       0: aload_0
       1: getfield      #15                 // Field seqFormat:Ljava/lang/String;
       4: invokestatic  #10                 // Method tk/mybatis/mapper/util/StringUtil.isNotEmpty:(Ljava/lang/String;)Z
       7: ifeq          15
      10: aload_0
      11: getfield      #15                 // Field seqFormat:Ljava/lang/String;
      14: areturn
      15: ldc           #16                 // String {0}.nextval
      17: areturn

  public void setSeqFormat(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #15                 // Field seqFormat:Ljava/lang/String;
       5: return

  public tk.mybatis.mapper.code.Style getStyle();
    Code:
       0: aload_0
       1: getfield      #17                 // Field style:Ltk/mybatis/mapper/code/Style;
       4: ifnonnull     13
       7: getstatic     #18                 // Field tk/mybatis/mapper/code/Style.camelhump:Ltk/mybatis/mapper/code/Style;
      10: goto          17
      13: aload_0
      14: getfield      #17                 // Field style:Ltk/mybatis/mapper/code/Style;
      17: areturn

  public void setStyle(tk.mybatis.mapper.code.Style);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #17                 // Field style:Ltk/mybatis/mapper/code/Style;
       5: return

  public java.lang.String getWrapKeyword();
    Code:
       0: aload_0
       1: getfield      #7                  // Field wrapKeyword:Ljava/lang/String;
       4: areturn

  public void setWrapKeyword(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #7                  // Field wrapKeyword:Ljava/lang/String;
       5: return

  public boolean isBEFORE();
    Code:
       0: aload_0
       1: getfield      #19                 // Field BEFORE:Z
       4: ireturn

  public void setBEFORE(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #19                 // Field BEFORE:Z
       5: return

  public boolean isCheckExampleEntityClass();
    Code:
       0: aload_0
       1: getfield      #20                 // Field checkExampleEntityClass:Z
       4: ireturn

  public void setCheckExampleEntityClass(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #20                 // Field checkExampleEntityClass:Z
       5: return

  public boolean isEnableMethodAnnotation();
    Code:
       0: aload_0
       1: getfield      #21                 // Field enableMethodAnnotation:Z
       4: ireturn

  public void setEnableMethodAnnotation(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #21                 // Field enableMethodAnnotation:Z
       5: return

  public boolean isEnumAsSimpleType();
    Code:
       0: aload_0
       1: getfield      #22                 // Field enumAsSimpleType:Z
       4: ireturn

  public void setEnumAsSimpleType(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #22                 // Field enumAsSimpleType:Z
       5: return

  public boolean isNotEmpty();
    Code:
       0: aload_0
       1: getfield      #23                 // Field notEmpty:Z
       4: ireturn

  public void setNotEmpty(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #23                 // Field notEmpty:Z
       5: return

  public boolean isUseSimpleType();
    Code:
       0: aload_0
       1: getfield      #5                  // Field useSimpleType:Z
       4: ireturn

  public void setUseSimpleType(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #5                  // Field useSimpleType:Z
       5: return

  public void setOrder(java.lang.String);
    Code:
       0: aload_0
       1: ldc           #24                 // String BEFORE
       3: aload_1
       4: invokevirtual #25                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
       7: putfield      #19                 // Field BEFORE:Z
      10: return

  public java.lang.String getIdentity();
    Code:
       0: aload_0
       1: invokevirtual #26                 // Method getIDENTITY:()Ljava/lang/String;
       4: areturn

  public void setIdentity(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #27                 // Method setIDENTITY:(Ljava/lang/String;)V
       5: return

  public java.util.List<java.lang.Class> getMappers();
    Code:
       0: aload_0
       1: getfield      #4                  // Field mappers:Ljava/util/List;
       4: areturn

  public void setMappers(java.util.List<java.lang.Class>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #4                  // Field mappers:Ljava/util/List;
       5: return

  public boolean isBefore();
    Code:
       0: aload_0
       1: invokevirtual #28                 // Method isBEFORE:()Z
       4: ireturn

  public void setBefore(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #29                 // Method setBEFORE:(Z)V
       5: return

  public java.lang.Class<? extends tk.mybatis.mapper.mapperhelper.resolve.EntityResolve> getResolveClass();
    Code:
       0: aload_0
       1: getfield      #30                 // Field resolveClass:Ljava/lang/Class;
       4: areturn

  public void setResolveClass(java.lang.Class<? extends tk.mybatis.mapper.mapperhelper.resolve.EntityResolve>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #30                 // Field resolveClass:Ljava/lang/Class;
       5: return

  public boolean isSafeDelete();
    Code:
       0: aload_0
       1: getfield      #31                 // Field safeDelete:Z
       4: ireturn

  public void setSafeDelete(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #31                 // Field safeDelete:Z
       5: return

  public boolean isSafeUpdate();
    Code:
       0: aload_0
       1: getfield      #32                 // Field safeUpdate:Z
       4: ireturn

  public void setSafeUpdate(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #32                 // Field safeUpdate:Z
       5: return

  public boolean isUseJavaType();
    Code:
       0: aload_0
       1: getfield      #33                 // Field useJavaType:Z
       4: ireturn

  public void setUseJavaType(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #33                 // Field useJavaType:Z
       5: return

  public void setProperties(java.util.Properties);
    Code:
       0: aload_1
       1: ifnonnull     12
       4: aload_0
       5: getstatic     #18                 // Field tk/mybatis/mapper/code/Style.camelhump:Ltk/mybatis/mapper/code/Style;
       8: putfield      #17                 // Field style:Ltk/mybatis/mapper/code/Style;
      11: return
      12: aload_1
      13: ldc           #34                 // String IDENTITY
      15: invokevirtual #35                 // Method java/util/Properties.getProperty:(Ljava/lang/String;)Ljava/lang/String;
      18: astore_2
      19: aload_2
      20: invokestatic  #10                 // Method tk/mybatis/mapper/util/StringUtil.isNotEmpty:(Ljava/lang/String;)Z
      23: ifeq          31
      26: aload_0
      27: aload_2
      28: invokevirtual #27                 // Method setIDENTITY:(Ljava/lang/String;)V
      31: aload_1
      32: ldc           #36                 // String seqFormat
      34: invokevirtual #35                 // Method java/util/Properties.getProperty:(Ljava/lang/String;)Ljava/lang/String;
      37: astore_3
      38: aload_3
      39: invokestatic  #10                 // Method tk/mybatis/mapper/util/StringUtil.isNotEmpty:(Ljava/lang/String;)Z
      42: ifeq          50
      45: aload_0
      46: aload_3
      47: invokevirtual #37                 // Method setSeqFormat:(Ljava/lang/String;)V
      50: aload_1
      51: ldc           #38                 // String catalog
      53: invokevirtual #35                 // Method java/util/Properties.getProperty:(Ljava/lang/String;)Ljava/lang/String;
      56: astore        4
      58: aload         4
      60: invokestatic  #10                 // Method tk/mybatis/mapper/util/StringUtil.isNotEmpty:(Ljava/lang/String;)Z
      63: ifeq          72
      66: aload_0
      67: aload         4
      69: invokevirtual #39                 // Method setCatalog:(Ljava/lang/String;)V
      72: aload_1
      73: ldc           #40                 // String schema
      75: invokevirtual #35                 // Method java/util/Properties.getProperty:(Ljava/lang/String;)Ljava/lang/String;
      78: astore        5
      80: aload         5
      82: invokestatic  #10                 // Method tk/mybatis/mapper/util/StringUtil.isNotEmpty:(Ljava/lang/String;)Z
      85: ifeq          94
      88: aload_0
      89: aload         5
      91: invokevirtual #41                 // Method setSchema:(Ljava/lang/String;)V
      94: aload_1
      95: ldc           #42                 // String ORDER
      97: invokevirtual #35                 // Method java/util/Properties.getProperty:(Ljava/lang/String;)Ljava/lang/String;
     100: astore        6
     102: aload         6
     104: invokestatic  #10                 // Method tk/mybatis/mapper/util/StringUtil.isNotEmpty:(Ljava/lang/String;)Z
     107: ifeq          116
     110: aload_0
     111: aload         6
     113: invokevirtual #43                 // Method setOrder:(Ljava/lang/String;)V
     116: aload_1
     117: ldc           #44                 // String order
     119: invokevirtual #35                 // Method java/util/Properties.getProperty:(Ljava/lang/String;)Ljava/lang/String;
     122: astore        6
     124: aload         6
     126: invokestatic  #10                 // Method tk/mybatis/mapper/util/StringUtil.isNotEmpty:(Ljava/lang/String;)Z
     129: ifeq          138
     132: aload_0
     133: aload         6
     135: invokevirtual #43                 // Method setOrder:(Ljava/lang/String;)V
     138: aload_1
     139: ldc           #45                 // String before
     141: invokevirtual #35                 // Method java/util/Properties.getProperty:(Ljava/lang/String;)Ljava/lang/String;
     144: astore        6
     146: aload         6
     148: invokestatic  #10                 // Method tk/mybatis/mapper/util/StringUtil.isNotEmpty:(Ljava/lang/String;)Z
     151: ifeq          166
     154: aload_0
     155: aload         6
     157: invokestatic  #46                 // Method java/lang/Boolean.valueOf:(Ljava/lang/String;)Ljava/lang/Boolean;
     160: invokevirtual #47                 // Method java/lang/Boolean.booleanValue:()Z
     163: invokevirtual #48                 // Method setBefore:(Z)V
     166: aload_0
     167: aload_1
     168: ldc           #49                 // String notEmpty
     170: invokevirtual #35                 // Method java/util/Properties.getProperty:(Ljava/lang/String;)Ljava/lang/String;
     173: invokestatic  #46                 // Method java/lang/Boolean.valueOf:(Ljava/lang/String;)Ljava/lang/Boolean;
     176: invokevirtual #47                 // Method java/lang/Boolean.booleanValue:()Z
     179: putfield      #23                 // Field notEmpty:Z
     182: aload_0
     183: aload_1
     184: ldc           #50                 // String enableMethodAnnotation
     186: invokevirtual #35                 // Method java/util/Properties.getProperty:(Ljava/lang/String;)Ljava/lang/String;
     189: invokestatic  #46                 // Method java/lang/Boolean.valueOf:(Ljava/lang/String;)Ljava/lang/Boolean;
     192: invokevirtual #47                 // Method java/lang/Boolean.booleanValue:()Z
     195: putfield      #21                 // Field enableMethodAnnotation:Z
     198: aload_0
     199: aload_1
     200: ldc           #51                 // String checkExampleEntityClass
     202: invokevirtual #35                 // Method java/util/Properties.getProperty:(Ljava/lang/String;)Ljava/lang/String;
     205: invokestatic  #46                 // Method java/lang/Boolean.valueOf:(Ljava/lang/String;)Ljava/lang/Boolean;
     208: invokevirtual #47                 // Method java/lang/Boolean.booleanValue:()Z
     211: putfield      #20                 // Field checkExampleEntityClass:Z
     214: aload_1
     215: ldc           #52                 // String useSimpleType
     217: invokevirtual #35                 // Method java/util/Properties.getProperty:(Ljava/lang/String;)Ljava/lang/String;
     220: astore        7
     222: aload         7
     224: invokestatic  #10                 // Method tk/mybatis/mapper/util/StringUtil.isNotEmpty:(Ljava/lang/String;)Z
     227: ifeq          242
     230: aload_0
     231: aload         7
     233: invokestatic  #46                 // Method java/lang/Boolean.valueOf:(Ljava/lang/String;)Ljava/lang/Boolean;
     236: invokevirtual #47                 // Method java/lang/Boolean.booleanValue:()Z
     239: putfield      #5                  // Field useSimpleType:Z
     242: aload_0
     243: aload_1
     244: ldc           #53                 // String enumAsSimpleType
     246: invokevirtual #35                 // Method java/util/Properties.getProperty:(Ljava/lang/String;)Ljava/lang/String;
     249: invokestatic  #46                 // Method java/lang/Boolean.valueOf:(Ljava/lang/String;)Ljava/lang/Boolean;
     252: invokevirtual #47                 // Method java/lang/Boolean.booleanValue:()Z
     255: putfield      #22                 // Field enumAsSimpleType:Z
     258: aload_1
     259: ldc           #54                 // String simpleTypes
     261: invokevirtual #35                 // Method java/util/Properties.getProperty:(Ljava/lang/String;)Ljava/lang/String;
     264: astore        8
     266: aload         8
     268: invokestatic  #10                 // Method tk/mybatis/mapper/util/StringUtil.isNotEmpty:(Ljava/lang/String;)Z
     271: ifeq          279
     274: aload         8
     276: invokestatic  #55                 // Method tk/mybatis/mapper/util/SimpleTypeUtil.registerSimpleType:(Ljava/lang/String;)V
     279: aload_1
     280: ldc           #56                 // String usePrimitiveType
     282: invokevirtual #35                 // Method java/util/Properties.getProperty:(Ljava/lang/String;)Ljava/lang/String;
     285: invokestatic  #46                 // Method java/lang/Boolean.valueOf:(Ljava/lang/String;)Ljava/lang/Boolean;
     288: invokevirtual #47                 // Method java/lang/Boolean.booleanValue:()Z
     291: ifeq          297
     294: invokestatic  #57                 // Method tk/mybatis/mapper/util/SimpleTypeUtil.registerPrimitiveTypes:()V
     297: aload_1
     298: ldc           #58                 // String style
     300: invokevirtual #35                 // Method java/util/Properties.getProperty:(Ljava/lang/String;)Ljava/lang/String;
     303: astore        9
     305: aload         9
     307: invokestatic  #10                 // Method tk/mybatis/mapper/util/StringUtil.isNotEmpty:(Ljava/lang/String;)Z
     310: ifeq          355
     313: aload_0
     314: aload         9
     316: invokestatic  #59                 // Method tk/mybatis/mapper/code/Style.valueOf:(Ljava/lang/String;)Ltk/mybatis/mapper/code/Style;
     319: putfield      #17                 // Field style:Ltk/mybatis/mapper/code/Style;
     322: goto          362
     325: astore        10
     327: new           #61                 // class tk/mybatis/mapper/MapperException
     330: dup
     331: new           #62                 // class java/lang/StringBuilder
     334: dup
     335: invokespecial #63                 // Method java/lang/StringBuilder."<init>":()V
     338: aload         9
     340: invokevirtual #64                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     343: ldc           #65                 // String 不是合法的Style值!
     345: invokevirtual #64                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     348: invokevirtual #66                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     351: invokespecial #67                 // Method tk/mybatis/mapper/MapperException."<init>":(Ljava/lang/String;)V
     354: athrow
     355: aload_0
     356: getstatic     #18                 // Field tk/mybatis/mapper/code/Style.camelhump:Ltk/mybatis/mapper/code/Style;
     359: putfield      #17                 // Field style:Ltk/mybatis/mapper/code/Style;
     362: aload_1
     363: ldc           #68                 // String wrapKeyword
     365: invokevirtual #35                 // Method java/util/Properties.getProperty:(Ljava/lang/String;)Ljava/lang/String;
     368: astore        10
     370: aload         10
     372: invokestatic  #10                 // Method tk/mybatis/mapper/util/StringUtil.isNotEmpty:(Ljava/lang/String;)Z
     375: ifeq          384
     378: aload_0
     379: aload         10
     381: putfield      #7                  // Field wrapKeyword:Ljava/lang/String;
     384: aload_0
     385: aload_1
     386: ldc           #69                 // String safeDelete
     388: invokevirtual #35                 // Method java/util/Properties.getProperty:(Ljava/lang/String;)Ljava/lang/String;
     391: invokestatic  #46                 // Method java/lang/Boolean.valueOf:(Ljava/lang/String;)Ljava/lang/Boolean;
     394: invokevirtual #47                 // Method java/lang/Boolean.booleanValue:()Z
     397: putfield      #31                 // Field safeDelete:Z
     400: aload_0
     401: aload_1
     402: ldc           #70                 // String safeUpdate
     404: invokevirtual #35                 // Method java/util/Properties.getProperty:(Ljava/lang/String;)Ljava/lang/String;
     407: invokestatic  #46                 // Method java/lang/Boolean.valueOf:(Ljava/lang/String;)Ljava/lang/Boolean;
     410: invokevirtual #47                 // Method java/lang/Boolean.booleanValue:()Z
     413: putfield      #32                 // Field safeUpdate:Z
     416: aload_0
     417: aload_1
     418: ldc           #71                 // String useJavaType
     420: invokevirtual #35                 // Method java/util/Properties.getProperty:(Ljava/lang/String;)Ljava/lang/String;
     423: invokestatic  #46                 // Method java/lang/Boolean.valueOf:(Ljava/lang/String;)Ljava/lang/Boolean;
     426: invokevirtual #47                 // Method java/lang/Boolean.booleanValue:()Z
     429: putfield      #33                 // Field useJavaType:Z
     432: return
    Exception table:
       from    to  target type
         313   322   325   Class java/lang/IllegalArgumentException
}
