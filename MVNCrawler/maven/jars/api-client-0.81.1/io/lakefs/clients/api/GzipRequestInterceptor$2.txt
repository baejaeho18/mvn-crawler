Compiled from "GzipRequestInterceptor.java"
class io.lakefs.clients.api.GzipRequestInterceptor$2 extends okhttp3.RequestBody {
  final okhttp3.RequestBody val$body;

  final io.lakefs.clients.api.GzipRequestInterceptor this$0;

  io.lakefs.clients.api.GzipRequestInterceptor$2(io.lakefs.clients.api.GzipRequestInterceptor, okhttp3.RequestBody);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lio/lakefs/clients/api/GzipRequestInterceptor;
       5: aload_0
       6: aload_2
       7: putfield      #2                  // Field val$body:Lokhttp3/RequestBody;
      10: aload_0
      11: invokespecial #3                  // Method okhttp3/RequestBody."<init>":()V
      14: return

  public okhttp3.MediaType contentType();
    Code:
       0: aload_0
       1: getfield      #2                  // Field val$body:Lokhttp3/RequestBody;
       4: invokevirtual #4                  // Method okhttp3/RequestBody.contentType:()Lokhttp3/MediaType;
       7: areturn

  public long contentLength();
    Code:
       0: ldc2_w        #5                  // long -1l
       3: lreturn

  public void writeTo(okio.BufferedSink) throws java.io.IOException;
    Code:
       0: new           #7                  // class okio/GzipSink
       3: dup
       4: aload_1
       5: invokespecial #8                  // Method okio/GzipSink."<init>":(Lokio/Sink;)V
       8: invokestatic  #9                  // Method okio/Okio.buffer:(Lokio/Sink;)Lokio/BufferedSink;
      11: astore_2
      12: aload_0
      13: getfield      #2                  // Field val$body:Lokhttp3/RequestBody;
      16: aload_2
      17: invokevirtual #10                 // Method okhttp3/RequestBody.writeTo:(Lokio/BufferedSink;)V
      20: aload_2
      21: invokeinterface #11,  1           // InterfaceMethod okio/BufferedSink.close:()V
      26: return
}
