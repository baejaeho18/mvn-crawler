Compiled from "GzipRequestInterceptor.java"
class io.lakefs.clients.api.GzipRequestInterceptor$1 extends okhttp3.RequestBody {
  final okhttp3.RequestBody val$requestBody;

  final okio.Buffer val$buffer;

  final io.lakefs.clients.api.GzipRequestInterceptor this$0;

  io.lakefs.clients.api.GzipRequestInterceptor$1(io.lakefs.clients.api.GzipRequestInterceptor, okhttp3.RequestBody, okio.Buffer);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lio/lakefs/clients/api/GzipRequestInterceptor;
       5: aload_0
       6: aload_2
       7: putfield      #2                  // Field val$requestBody:Lokhttp3/RequestBody;
      10: aload_0
      11: aload_3
      12: putfield      #3                  // Field val$buffer:Lokio/Buffer;
      15: aload_0
      16: invokespecial #4                  // Method okhttp3/RequestBody."<init>":()V
      19: return

  public okhttp3.MediaType contentType();
    Code:
       0: aload_0
       1: getfield      #2                  // Field val$requestBody:Lokhttp3/RequestBody;
       4: invokevirtual #5                  // Method okhttp3/RequestBody.contentType:()Lokhttp3/MediaType;
       7: areturn

  public long contentLength();
    Code:
       0: aload_0
       1: getfield      #3                  // Field val$buffer:Lokio/Buffer;
       4: invokevirtual #6                  // Method okio/Buffer.size:()J
       7: lreturn

  public void writeTo(okio.BufferedSink) throws java.io.IOException;
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #3                  // Field val$buffer:Lokio/Buffer;
       5: invokevirtual #7                  // Method okio/Buffer.snapshot:()Lokio/ByteString;
       8: invokeinterface #8,  2            // InterfaceMethod okio/BufferedSink.write:(Lokio/ByteString;)Lokio/BufferedSink;
      13: pop
      14: return
}
