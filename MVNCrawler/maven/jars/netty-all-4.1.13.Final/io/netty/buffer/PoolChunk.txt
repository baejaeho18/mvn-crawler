Compiled from "PoolChunk.java"
final class io.netty.buffer.PoolChunk<T> implements io.netty.buffer.PoolChunkMetric {
  private static final int INTEGER_SIZE_MINUS_ONE;

  final io.netty.buffer.PoolArena<T> arena;

  final T memory;

  final boolean unpooled;

  final int offset;

  private final byte[] memoryMap;

  private final byte[] depthMap;

  private final io.netty.buffer.PoolSubpage<T>[] subpages;

  private final int subpageOverflowMask;

  private final int pageSize;

  private final int pageShifts;

  private final int maxOrder;

  private final int chunkSize;

  private final int log2ChunkSize;

  private final int maxSubpageAllocs;

  private final byte unusable;

  private int freeBytes;

  io.netty.buffer.PoolChunkList<T> parent;

  io.netty.buffer.PoolChunk<T> prev;

  io.netty.buffer.PoolChunk<T> next;

  static final boolean $assertionsDisabled;

  io.netty.buffer.PoolChunk(io.netty.buffer.PoolArena<T>, T, int, int, int, int, int);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #3                  // Field unpooled:Z
       9: aload_0
      10: aload_1
      11: putfield      #4                  // Field arena:Lio/netty/buffer/PoolArena;
      14: aload_0
      15: aload_2
      16: putfield      #5                  // Field memory:Ljava/lang/Object;
      19: aload_0
      20: iload_3
      21: putfield      #6                  // Field pageSize:I
      24: aload_0
      25: iload         5
      27: putfield      #7                  // Field pageShifts:I
      30: aload_0
      31: iload         4
      33: putfield      #8                  // Field maxOrder:I
      36: aload_0
      37: iload         6
      39: putfield      #9                  // Field chunkSize:I
      42: aload_0
      43: iload         7
      45: putfield      #10                 // Field offset:I
      48: aload_0
      49: iload         4
      51: iconst_1
      52: iadd
      53: i2b
      54: putfield      #11                 // Field unusable:B
      57: aload_0
      58: iload         6
      60: invokestatic  #12                 // Method log2:(I)I
      63: putfield      #13                 // Field log2ChunkSize:I
      66: aload_0
      67: iload_3
      68: iconst_1
      69: isub
      70: iconst_m1
      71: ixor
      72: putfield      #14                 // Field subpageOverflowMask:I
      75: aload_0
      76: iload         6
      78: putfield      #15                 // Field freeBytes:I
      81: getstatic     #16                 // Field $assertionsDisabled:Z
      84: ifne          122
      87: iload         4
      89: bipush        30
      91: if_icmplt     122
      94: new           #17                 // class java/lang/AssertionError
      97: dup
      98: new           #18                 // class java/lang/StringBuilder
     101: dup
     102: invokespecial #19                 // Method java/lang/StringBuilder."<init>":()V
     105: ldc           #20                 // String maxOrder should be < 30, but is:
     107: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     110: iload         4
     112: invokevirtual #22                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     115: invokevirtual #23                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     118: invokespecial #24                 // Method java/lang/AssertionError."<init>":(Ljava/lang/Object;)V
     121: athrow
     122: aload_0
     123: iconst_1
     124: iload         4
     126: ishl
     127: putfield      #25                 // Field maxSubpageAllocs:I
     130: aload_0
     131: aload_0
     132: getfield      #25                 // Field maxSubpageAllocs:I
     135: iconst_1
     136: ishl
     137: newarray       byte
     139: putfield      #26                 // Field memoryMap:[B
     142: aload_0
     143: aload_0
     144: getfield      #26                 // Field memoryMap:[B
     147: arraylength
     148: newarray       byte
     150: putfield      #27                 // Field depthMap:[B
     153: iconst_1
     154: istore        8
     156: iconst_0
     157: istore        9
     159: iload         9
     161: iload         4
     163: if_icmpgt     217
     166: iconst_1
     167: iload         9
     169: ishl
     170: istore        10
     172: iconst_0
     173: istore        11
     175: iload         11
     177: iload         10
     179: if_icmpge     211
     182: aload_0
     183: getfield      #26                 // Field memoryMap:[B
     186: iload         8
     188: iload         9
     190: i2b
     191: bastore
     192: aload_0
     193: getfield      #27                 // Field depthMap:[B
     196: iload         8
     198: iload         9
     200: i2b
     201: bastore
     202: iinc          8, 1
     205: iinc          11, 1
     208: goto          175
     211: iinc          9, 1
     214: goto          159
     217: aload_0
     218: aload_0
     219: aload_0
     220: getfield      #25                 // Field maxSubpageAllocs:I
     223: invokespecial #28                 // Method newSubpageArray:(I)[Lio/netty/buffer/PoolSubpage;
     226: putfield      #29                 // Field subpages:[Lio/netty/buffer/PoolSubpage;
     229: return

  io.netty.buffer.PoolChunk(io.netty.buffer.PoolArena<T>, T, int, int);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #3                  // Field unpooled:Z
       9: aload_0
      10: aload_1
      11: putfield      #4                  // Field arena:Lio/netty/buffer/PoolArena;
      14: aload_0
      15: aload_2
      16: putfield      #5                  // Field memory:Ljava/lang/Object;
      19: aload_0
      20: iload         4
      22: putfield      #10                 // Field offset:I
      25: aload_0
      26: aconst_null
      27: putfield      #26                 // Field memoryMap:[B
      30: aload_0
      31: aconst_null
      32: putfield      #27                 // Field depthMap:[B
      35: aload_0
      36: aconst_null
      37: putfield      #29                 // Field subpages:[Lio/netty/buffer/PoolSubpage;
      40: aload_0
      41: iconst_0
      42: putfield      #14                 // Field subpageOverflowMask:I
      45: aload_0
      46: iconst_0
      47: putfield      #6                  // Field pageSize:I
      50: aload_0
      51: iconst_0
      52: putfield      #7                  // Field pageShifts:I
      55: aload_0
      56: iconst_0
      57: putfield      #8                  // Field maxOrder:I
      60: aload_0
      61: aload_0
      62: getfield      #8                  // Field maxOrder:I
      65: iconst_1
      66: iadd
      67: i2b
      68: putfield      #11                 // Field unusable:B
      71: aload_0
      72: iload_3
      73: putfield      #9                  // Field chunkSize:I
      76: aload_0
      77: aload_0
      78: getfield      #9                  // Field chunkSize:I
      81: invokestatic  #12                 // Method log2:(I)I
      84: putfield      #13                 // Field log2ChunkSize:I
      87: aload_0
      88: iconst_0
      89: putfield      #25                 // Field maxSubpageAllocs:I
      92: return

  private io.netty.buffer.PoolSubpage<T>[] newSubpageArray(int);
    Code:
       0: iload_1
       1: anewarray     #30                 // class io/netty/buffer/PoolSubpage
       4: areturn

  public int usage();
    Code:
       0: aload_0
       1: getfield      #4                  // Field arena:Lio/netty/buffer/PoolArena;
       4: dup
       5: astore_2
       6: monitorenter
       7: aload_0
       8: getfield      #15                 // Field freeBytes:I
      11: istore_1
      12: aload_2
      13: monitorexit
      14: goto          22
      17: astore_3
      18: aload_2
      19: monitorexit
      20: aload_3
      21: athrow
      22: aload_0
      23: iload_1
      24: invokespecial #31                 // Method usage:(I)I
      27: ireturn
    Exception table:
       from    to  target type
           7    14    17   any
          17    20    17   any

  private int usage(int);
    Code:
       0: iload_1
       1: ifne          7
       4: bipush        100
       6: ireturn
       7: iload_1
       8: i2l
       9: ldc2_w        #32                 // long 100l
      12: lmul
      13: aload_0
      14: getfield      #9                  // Field chunkSize:I
      17: i2l
      18: ldiv
      19: l2i
      20: istore_2
      21: iload_2
      22: ifne          28
      25: bipush        99
      27: ireturn
      28: bipush        100
      30: iload_2
      31: isub
      32: ireturn

  long allocate(int);
    Code:
       0: iload_1
       1: aload_0
       2: getfield      #14                 // Field subpageOverflowMask:I
       5: iand
       6: ifeq          15
       9: aload_0
      10: iload_1
      11: invokespecial #34                 // Method allocateRun:(I)J
      14: lreturn
      15: aload_0
      16: iload_1
      17: invokespecial #35                 // Method allocateSubpage:(I)J
      20: lreturn

  private void updateParentsAlloc(int);
    Code:
       0: iload_1
       1: iconst_1
       2: if_icmple     50
       5: iload_1
       6: iconst_1
       7: iushr
       8: istore_2
       9: aload_0
      10: iload_1
      11: invokespecial #36                 // Method value:(I)B
      14: istore_3
      15: aload_0
      16: iload_1
      17: iconst_1
      18: ixor
      19: invokespecial #36                 // Method value:(I)B
      22: istore        4
      24: iload_3
      25: iload         4
      27: if_icmpge     34
      30: iload_3
      31: goto          36
      34: iload         4
      36: istore        5
      38: aload_0
      39: iload_2
      40: iload         5
      42: invokespecial #37                 // Method setValue:(IB)V
      45: iload_2
      46: istore_1
      47: goto          0
      50: return

  private void updateParentsFree(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #38                 // Method depth:(I)B
       5: iconst_1
       6: iadd
       7: istore_2
       8: iload_1
       9: iconst_1
      10: if_icmple     88
      13: iload_1
      14: iconst_1
      15: iushr
      16: istore_3
      17: aload_0
      18: iload_1
      19: invokespecial #36                 // Method value:(I)B
      22: istore        4
      24: aload_0
      25: iload_1
      26: iconst_1
      27: ixor
      28: invokespecial #36                 // Method value:(I)B
      31: istore        5
      33: iinc          2, -1
      36: iload         4
      38: iload_2
      39: if_icmpne     60
      42: iload         5
      44: iload_2
      45: if_icmpne     60
      48: aload_0
      49: iload_3
      50: iload_2
      51: iconst_1
      52: isub
      53: i2b
      54: invokespecial #37                 // Method setValue:(IB)V
      57: goto          83
      60: iload         4
      62: iload         5
      64: if_icmpge     72
      67: iload         4
      69: goto          74
      72: iload         5
      74: istore        6
      76: aload_0
      77: iload_3
      78: iload         6
      80: invokespecial #37                 // Method setValue:(IB)V
      83: iload_3
      84: istore_1
      85: goto          8
      88: return

  private int allocateNode(int);
    Code:
       0: iconst_1
       1: istore_2
       2: iconst_1
       3: iload_1
       4: ishl
       5: ineg
       6: istore_3
       7: aload_0
       8: iload_2
       9: invokespecial #36                 // Method value:(I)B
      12: istore        4
      14: iload         4
      16: iload_1
      17: if_icmple     22
      20: iconst_m1
      21: ireturn
      22: iload         4
      24: iload_1
      25: if_icmplt     34
      28: iload_2
      29: iload_3
      30: iand
      31: ifne          65
      34: iload_2
      35: iconst_1
      36: ishl
      37: istore_2
      38: aload_0
      39: iload_2
      40: invokespecial #36                 // Method value:(I)B
      43: istore        4
      45: iload         4
      47: iload_1
      48: if_icmple     22
      51: iload_2
      52: iconst_1
      53: ixor
      54: istore_2
      55: aload_0
      56: iload_2
      57: invokespecial #36                 // Method value:(I)B
      60: istore        4
      62: goto          22
      65: aload_0
      66: iload_2
      67: invokespecial #36                 // Method value:(I)B
      70: istore        5
      72: getstatic     #16                 // Field $assertionsDisabled:Z
      75: ifne          134
      78: iload         5
      80: iload_1
      81: if_icmpne     93
      84: iload_2
      85: iload_3
      86: iand
      87: iconst_1
      88: iload_1
      89: ishl
      90: if_icmpeq     134
      93: new           #17                 // class java/lang/AssertionError
      96: dup
      97: ldc           #39                 // String val = %d, id & initial = %d, d = %d
      99: iconst_3
     100: anewarray     #40                 // class java/lang/Object
     103: dup
     104: iconst_0
     105: iload         5
     107: invokestatic  #41                 // Method java/lang/Byte.valueOf:(B)Ljava/lang/Byte;
     110: aastore
     111: dup
     112: iconst_1
     113: iload_2
     114: iload_3
     115: iand
     116: invokestatic  #42                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     119: aastore
     120: dup
     121: iconst_2
     122: iload_1
     123: invokestatic  #42                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     126: aastore
     127: invokestatic  #43                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
     130: invokespecial #24                 // Method java/lang/AssertionError."<init>":(Ljava/lang/Object;)V
     133: athrow
     134: aload_0
     135: iload_2
     136: aload_0
     137: getfield      #11                 // Field unusable:B
     140: invokespecial #37                 // Method setValue:(IB)V
     143: aload_0
     144: iload_2
     145: invokespecial #44                 // Method updateParentsAlloc:(I)V
     148: iload_2
     149: ireturn

  private long allocateRun(int);
    Code:
       0: aload_0
       1: getfield      #8                  // Field maxOrder:I
       4: iload_1
       5: invokestatic  #12                 // Method log2:(I)I
       8: aload_0
       9: getfield      #7                  // Field pageShifts:I
      12: isub
      13: isub
      14: istore_2
      15: aload_0
      16: iload_2
      17: invokespecial #45                 // Method allocateNode:(I)I
      20: istore_3
      21: iload_3
      22: ifge          28
      25: iload_3
      26: i2l
      27: lreturn
      28: aload_0
      29: dup
      30: getfield      #15                 // Field freeBytes:I
      33: aload_0
      34: iload_3
      35: invokespecial #46                 // Method runLength:(I)I
      38: isub
      39: putfield      #15                 // Field freeBytes:I
      42: iload_3
      43: i2l
      44: lreturn

  private long allocateSubpage(int);
    Code:
       0: aload_0
       1: getfield      #4                  // Field arena:Lio/netty/buffer/PoolArena;
       4: iload_1
       5: invokevirtual #47                 // Method io/netty/buffer/PoolArena.findSubpagePoolHead:(I)Lio/netty/buffer/PoolSubpage;
       8: astore_2
       9: aload_2
      10: dup
      11: astore_3
      12: monitorenter
      13: aload_0
      14: getfield      #8                  // Field maxOrder:I
      17: istore        4
      19: aload_0
      20: iload         4
      22: invokespecial #45                 // Method allocateNode:(I)I
      25: istore        5
      27: iload         5
      29: ifge          38
      32: iload         5
      34: i2l
      35: aload_3
      36: monitorexit
      37: lreturn
      38: aload_0
      39: getfield      #29                 // Field subpages:[Lio/netty/buffer/PoolSubpage;
      42: astore        6
      44: aload_0
      45: getfield      #6                  // Field pageSize:I
      48: istore        7
      50: aload_0
      51: dup
      52: getfield      #15                 // Field freeBytes:I
      55: iload         7
      57: isub
      58: putfield      #15                 // Field freeBytes:I
      61: aload_0
      62: iload         5
      64: invokespecial #48                 // Method subpageIdx:(I)I
      67: istore        8
      69: aload         6
      71: iload         8
      73: aaload
      74: astore        9
      76: aload         9
      78: ifnonnull     113
      81: new           #30                 // class io/netty/buffer/PoolSubpage
      84: dup
      85: aload_2
      86: aload_0
      87: iload         5
      89: aload_0
      90: iload         5
      92: invokespecial #49                 // Method runOffset:(I)I
      95: iload         7
      97: iload_1
      98: invokespecial #50                 // Method io/netty/buffer/PoolSubpage."<init>":(Lio/netty/buffer/PoolSubpage;Lio/netty/buffer/PoolChunk;IIII)V
     101: astore        9
     103: aload         6
     105: iload         8
     107: aload         9
     109: aastore
     110: goto          120
     113: aload         9
     115: aload_2
     116: iload_1
     117: invokevirtual #51                 // Method io/netty/buffer/PoolSubpage.init:(Lio/netty/buffer/PoolSubpage;I)V
     120: aload         9
     122: invokevirtual #52                 // Method io/netty/buffer/PoolSubpage.allocate:()J
     125: aload_3
     126: monitorexit
     127: lreturn
     128: astore        10
     130: aload_3
     131: monitorexit
     132: aload         10
     134: athrow
    Exception table:
       from    to  target type
          13    37   128   any
          38   127   128   any
         128   132   128   any

  void free(long);
    Code:
       0: lload_1
       1: invokestatic  #53                 // Method memoryMapIdx:(J)I
       4: istore_3
       5: lload_1
       6: invokestatic  #54                 // Method bitmapIdx:(J)I
       9: istore        4
      11: iload         4
      13: ifeq          108
      16: aload_0
      17: getfield      #29                 // Field subpages:[Lio/netty/buffer/PoolSubpage;
      20: aload_0
      21: iload_3
      22: invokespecial #48                 // Method subpageIdx:(I)I
      25: aaload
      26: astore        5
      28: getstatic     #16                 // Field $assertionsDisabled:Z
      31: ifne          55
      34: aload         5
      36: ifnull        47
      39: aload         5
      41: getfield      #55                 // Field io/netty/buffer/PoolSubpage.doNotDestroy:Z
      44: ifne          55
      47: new           #17                 // class java/lang/AssertionError
      50: dup
      51: invokespecial #56                 // Method java/lang/AssertionError."<init>":()V
      54: athrow
      55: aload_0
      56: getfield      #4                  // Field arena:Lio/netty/buffer/PoolArena;
      59: aload         5
      61: getfield      #57                 // Field io/netty/buffer/PoolSubpage.elemSize:I
      64: invokevirtual #47                 // Method io/netty/buffer/PoolArena.findSubpagePoolHead:(I)Lio/netty/buffer/PoolSubpage;
      67: astore        6
      69: aload         6
      71: dup
      72: astore        7
      74: monitorenter
      75: aload         5
      77: aload         6
      79: iload         4
      81: ldc           #58                 // int 1073741823
      83: iand
      84: invokevirtual #59                 // Method io/netty/buffer/PoolSubpage.free:(Lio/netty/buffer/PoolSubpage;I)Z
      87: ifeq          94
      90: aload         7
      92: monitorexit
      93: return
      94: aload         7
      96: monitorexit
      97: goto          108
     100: astore        8
     102: aload         7
     104: monitorexit
     105: aload         8
     107: athrow
     108: aload_0
     109: dup
     110: getfield      #15                 // Field freeBytes:I
     113: aload_0
     114: iload_3
     115: invokespecial #46                 // Method runLength:(I)I
     118: iadd
     119: putfield      #15                 // Field freeBytes:I
     122: aload_0
     123: iload_3
     124: aload_0
     125: iload_3
     126: invokespecial #38                 // Method depth:(I)B
     129: invokespecial #37                 // Method setValue:(IB)V
     132: aload_0
     133: iload_3
     134: invokespecial #60                 // Method updateParentsFree:(I)V
     137: return
    Exception table:
       from    to  target type
          75    93   100   any
          94    97   100   any
         100   105   100   any

  void initBuf(io.netty.buffer.PooledByteBuf<T>, long, int);
    Code:
       0: lload_2
       1: invokestatic  #53                 // Method memoryMapIdx:(J)I
       4: istore        5
       6: lload_2
       7: invokestatic  #54                 // Method bitmapIdx:(J)I
      10: istore        6
      12: iload         6
      14: ifne          91
      17: aload_0
      18: iload         5
      20: invokespecial #36                 // Method value:(I)B
      23: istore        7
      25: getstatic     #16                 // Field $assertionsDisabled:Z
      28: ifne          53
      31: iload         7
      33: aload_0
      34: getfield      #11                 // Field unusable:B
      37: if_icmpeq     53
      40: new           #17                 // class java/lang/AssertionError
      43: dup
      44: iload         7
      46: invokestatic  #61                 // Method java/lang/String.valueOf:(I)Ljava/lang/String;
      49: invokespecial #24                 // Method java/lang/AssertionError."<init>":(Ljava/lang/Object;)V
      52: athrow
      53: aload_1
      54: aload_0
      55: lload_2
      56: aload_0
      57: iload         5
      59: invokespecial #49                 // Method runOffset:(I)I
      62: aload_0
      63: getfield      #10                 // Field offset:I
      66: iadd
      67: iload         4
      69: aload_0
      70: iload         5
      72: invokespecial #46                 // Method runLength:(I)I
      75: aload_0
      76: getfield      #4                  // Field arena:Lio/netty/buffer/PoolArena;
      79: getfield      #62                 // Field io/netty/buffer/PoolArena.parent:Lio/netty/buffer/PooledByteBufAllocator;
      82: invokevirtual #63                 // Method io/netty/buffer/PooledByteBufAllocator.threadCache:()Lio/netty/buffer/PoolThreadCache;
      85: invokevirtual #64                 // Method io/netty/buffer/PooledByteBuf.init:(Lio/netty/buffer/PoolChunk;JIIILio/netty/buffer/PoolThreadCache;)V
      88: goto          101
      91: aload_0
      92: aload_1
      93: lload_2
      94: iload         6
      96: iload         4
      98: invokespecial #65                 // Method initBufWithSubpage:(Lio/netty/buffer/PooledByteBuf;JII)V
     101: return

  void initBufWithSubpage(io.netty.buffer.PooledByteBuf<T>, long, int);
    Code:
       0: aload_0
       1: aload_1
       2: lload_2
       3: lload_2
       4: invokestatic  #54                 // Method bitmapIdx:(J)I
       7: iload         4
       9: invokespecial #65                 // Method initBufWithSubpage:(Lio/netty/buffer/PooledByteBuf;JII)V
      12: return

  private void initBufWithSubpage(io.netty.buffer.PooledByteBuf<T>, long, int, int);
    Code:
       0: getstatic     #16                 // Field $assertionsDisabled:Z
       3: ifne          19
       6: iload         4
       8: ifne          19
      11: new           #17                 // class java/lang/AssertionError
      14: dup
      15: invokespecial #56                 // Method java/lang/AssertionError."<init>":()V
      18: athrow
      19: lload_2
      20: invokestatic  #53                 // Method memoryMapIdx:(J)I
      23: istore        6
      25: aload_0
      26: getfield      #29                 // Field subpages:[Lio/netty/buffer/PoolSubpage;
      29: aload_0
      30: iload         6
      32: invokespecial #48                 // Method subpageIdx:(I)I
      35: aaload
      36: astore        7
      38: getstatic     #16                 // Field $assertionsDisabled:Z
      41: ifne          60
      44: aload         7
      46: getfield      #55                 // Field io/netty/buffer/PoolSubpage.doNotDestroy:Z
      49: ifne          60
      52: new           #17                 // class java/lang/AssertionError
      55: dup
      56: invokespecial #56                 // Method java/lang/AssertionError."<init>":()V
      59: athrow
      60: getstatic     #16                 // Field $assertionsDisabled:Z
      63: ifne          84
      66: iload         5
      68: aload         7
      70: getfield      #57                 // Field io/netty/buffer/PoolSubpage.elemSize:I
      73: if_icmple     84
      76: new           #17                 // class java/lang/AssertionError
      79: dup
      80: invokespecial #56                 // Method java/lang/AssertionError."<init>":()V
      83: athrow
      84: aload_1
      85: aload_0
      86: lload_2
      87: aload_0
      88: iload         6
      90: invokespecial #49                 // Method runOffset:(I)I
      93: iload         4
      95: ldc           #58                 // int 1073741823
      97: iand
      98: aload         7
     100: getfield      #57                 // Field io/netty/buffer/PoolSubpage.elemSize:I
     103: imul
     104: iadd
     105: aload_0
     106: getfield      #10                 // Field offset:I
     109: iadd
     110: iload         5
     112: aload         7
     114: getfield      #57                 // Field io/netty/buffer/PoolSubpage.elemSize:I
     117: aload_0
     118: getfield      #4                  // Field arena:Lio/netty/buffer/PoolArena;
     121: getfield      #62                 // Field io/netty/buffer/PoolArena.parent:Lio/netty/buffer/PooledByteBufAllocator;
     124: invokevirtual #63                 // Method io/netty/buffer/PooledByteBufAllocator.threadCache:()Lio/netty/buffer/PoolThreadCache;
     127: invokevirtual #64                 // Method io/netty/buffer/PooledByteBuf.init:(Lio/netty/buffer/PoolChunk;JIIILio/netty/buffer/PoolThreadCache;)V
     130: return

  private byte value(int);
    Code:
       0: aload_0
       1: getfield      #26                 // Field memoryMap:[B
       4: iload_1
       5: baload
       6: ireturn

  private void setValue(int, byte);
    Code:
       0: aload_0
       1: getfield      #26                 // Field memoryMap:[B
       4: iload_1
       5: iload_2
       6: bastore
       7: return

  private byte depth(int);
    Code:
       0: aload_0
       1: getfield      #27                 // Field depthMap:[B
       4: iload_1
       5: baload
       6: ireturn

  private static int log2(int);
    Code:
       0: bipush        31
       2: iload_0
       3: invokestatic  #67                 // Method java/lang/Integer.numberOfLeadingZeros:(I)I
       6: isub
       7: ireturn

  private int runLength(int);
    Code:
       0: iconst_1
       1: aload_0
       2: getfield      #13                 // Field log2ChunkSize:I
       5: aload_0
       6: iload_1
       7: invokespecial #38                 // Method depth:(I)B
      10: isub
      11: ishl
      12: ireturn

  private int runOffset(int);
    Code:
       0: iload_1
       1: iconst_1
       2: aload_0
       3: iload_1
       4: invokespecial #38                 // Method depth:(I)B
       7: ishl
       8: ixor
       9: istore_2
      10: iload_2
      11: aload_0
      12: iload_1
      13: invokespecial #46                 // Method runLength:(I)I
      16: imul
      17: ireturn

  private int subpageIdx(int);
    Code:
       0: iload_1
       1: aload_0
       2: getfield      #25                 // Field maxSubpageAllocs:I
       5: ixor
       6: ireturn

  private static int memoryMapIdx(long);
    Code:
       0: lload_0
       1: l2i
       2: ireturn

  private static int bitmapIdx(long);
    Code:
       0: lload_0
       1: bipush        32
       3: lushr
       4: l2i
       5: ireturn

  public int chunkSize();
    Code:
       0: aload_0
       1: getfield      #9                  // Field chunkSize:I
       4: ireturn

  public int freeBytes();
    Code:
       0: aload_0
       1: getfield      #4                  // Field arena:Lio/netty/buffer/PoolArena;
       4: dup
       5: astore_1
       6: monitorenter
       7: aload_0
       8: getfield      #15                 // Field freeBytes:I
      11: aload_1
      12: monitorexit
      13: ireturn
      14: astore_2
      15: aload_1
      16: monitorexit
      17: aload_2
      18: athrow
    Exception table:
       from    to  target type
           7    13    14   any
          14    17    14   any

  public java.lang.String toString();
    Code:
       0: aload_0
       1: getfield      #4                  // Field arena:Lio/netty/buffer/PoolArena;
       4: dup
       5: astore_2
       6: monitorenter
       7: aload_0
       8: getfield      #15                 // Field freeBytes:I
      11: istore_1
      12: aload_2
      13: monitorexit
      14: goto          22
      17: astore_3
      18: aload_2
      19: monitorexit
      20: aload_3
      21: athrow
      22: new           #18                 // class java/lang/StringBuilder
      25: dup
      26: invokespecial #19                 // Method java/lang/StringBuilder."<init>":()V
      29: ldc           #68                 // String Chunk(
      31: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      34: aload_0
      35: invokestatic  #69                 // Method java/lang/System.identityHashCode:(Ljava/lang/Object;)I
      38: invokestatic  #70                 // Method java/lang/Integer.toHexString:(I)Ljava/lang/String;
      41: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      44: ldc           #71                 // String :
      46: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      49: aload_0
      50: iload_1
      51: invokespecial #31                 // Method usage:(I)I
      54: invokevirtual #22                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      57: ldc           #72                 // String %,
      59: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      62: aload_0
      63: getfield      #9                  // Field chunkSize:I
      66: iload_1
      67: isub
      68: invokevirtual #22                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      71: bipush        47
      73: invokevirtual #73                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      76: aload_0
      77: getfield      #9                  // Field chunkSize:I
      80: invokevirtual #22                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      83: bipush        41
      85: invokevirtual #73                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      88: invokevirtual #23                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      91: areturn
    Exception table:
       from    to  target type
           7    14    17   any
          17    20    17   any

  void destroy();
    Code:
       0: aload_0
       1: getfield      #4                  // Field arena:Lio/netty/buffer/PoolArena;
       4: aload_0
       5: invokevirtual #74                 // Method io/netty/buffer/PoolArena.destroyChunk:(Lio/netty/buffer/PoolChunk;)V
       8: return

  static {};
    Code:
       0: ldc           #66                 // class io/netty/buffer/PoolChunk
       2: invokevirtual #75                 // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #16                 // Field $assertionsDisabled:Z
      16: return
}
