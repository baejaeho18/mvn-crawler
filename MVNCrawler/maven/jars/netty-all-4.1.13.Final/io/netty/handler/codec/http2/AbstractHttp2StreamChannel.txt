Compiled from "AbstractHttp2StreamChannel.java"
abstract class io.netty.handler.codec.http2.AbstractHttp2StreamChannel extends io.netty.channel.AbstractChannel {
  protected static final java.lang.Object CLOSE_MESSAGE;

  private static final io.netty.channel.ChannelMetadata METADATA;

  private static final java.nio.channels.ClosedChannelException CLOSED_CHANNEL_EXCEPTION;

  private static final int ARBITRARY_MESSAGE_SIZE;

  private final io.netty.channel.ChannelConfig config;

  private final java.util.Queue<java.lang.Object> inboundBuffer;

  private final java.lang.Runnable fireChildReadCompleteTask;

  private volatile int streamId;

  private boolean closed;

  private boolean readInProgress;

  static final boolean $assertionsDisabled;

  protected io.netty.handler.codec.http2.AbstractHttp2StreamChannel(io.netty.channel.Channel);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #3                  // Method io/netty/channel/AbstractChannel."<init>":(Lio/netty/channel/Channel;)V
       5: aload_0
       6: new           #4                  // class io/netty/channel/DefaultChannelConfig
       9: dup
      10: aload_0
      11: invokespecial #5                  // Method io/netty/channel/DefaultChannelConfig."<init>":(Lio/netty/channel/Channel;)V
      14: putfield      #6                  // Field config:Lio/netty/channel/ChannelConfig;
      17: aload_0
      18: new           #7                  // class java/util/ArrayDeque
      21: dup
      22: iconst_4
      23: invokespecial #8                  // Method java/util/ArrayDeque."<init>":(I)V
      26: putfield      #9                  // Field inboundBuffer:Ljava/util/Queue;
      29: aload_0
      30: new           #10                 // class io/netty/handler/codec/http2/AbstractHttp2StreamChannel$1
      33: dup
      34: aload_0
      35: invokespecial #11                 // Method io/netty/handler/codec/http2/AbstractHttp2StreamChannel$1."<init>":(Lio/netty/handler/codec/http2/AbstractHttp2StreamChannel;)V
      38: putfield      #12                 // Field fireChildReadCompleteTask:Ljava/lang/Runnable;
      41: aload_0
      42: iconst_m1
      43: putfield      #13                 // Field streamId:I
      46: return

  public io.netty.channel.ChannelMetadata metadata();
    Code:
       0: getstatic     #14                 // Field METADATA:Lio/netty/channel/ChannelMetadata;
       3: areturn

  public io.netty.channel.ChannelConfig config();
    Code:
       0: aload_0
       1: getfield      #6                  // Field config:Lio/netty/channel/ChannelConfig;
       4: areturn

  public boolean isOpen();
    Code:
       0: aload_0
       1: getfield      #15                 // Field closed:Z
       4: ifne          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public boolean isActive();
    Code:
       0: aload_0
       1: invokevirtual #16                 // Method isOpen:()Z
       4: ireturn

  protected io.netty.channel.AbstractChannel$AbstractUnsafe newUnsafe();
    Code:
       0: new           #17                 // class io/netty/handler/codec/http2/AbstractHttp2StreamChannel$Unsafe
       3: dup
       4: aload_0
       5: aconst_null
       6: invokespecial #18                 // Method io/netty/handler/codec/http2/AbstractHttp2StreamChannel$Unsafe."<init>":(Lio/netty/handler/codec/http2/AbstractHttp2StreamChannel;Lio/netty/handler/codec/http2/AbstractHttp2StreamChannel$1;)V
       9: areturn

  protected boolean isCompatible(io.netty.channel.EventLoop);
    Code:
       0: iconst_1
       1: ireturn

  protected java.net.SocketAddress localAddress0();
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method parent:()Lio/netty/channel/Channel;
       4: invokeinterface #20,  1           // InterfaceMethod io/netty/channel/Channel.localAddress:()Ljava/net/SocketAddress;
       9: areturn

  protected java.net.SocketAddress remoteAddress0();
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method parent:()Lio/netty/channel/Channel;
       4: invokeinterface #21,  1           // InterfaceMethod io/netty/channel/Channel.remoteAddress:()Ljava/net/SocketAddress;
       9: areturn

  protected void doBind(java.net.SocketAddress) throws java.lang.Exception;
    Code:
       0: new           #22                 // class java/lang/UnsupportedOperationException
       3: dup
       4: invokespecial #23                 // Method java/lang/UnsupportedOperationException."<init>":()V
       7: athrow

  protected void doDisconnect() throws java.lang.Exception;
    Code:
       0: new           #22                 // class java/lang/UnsupportedOperationException
       3: dup
       4: invokespecial #23                 // Method java/lang/UnsupportedOperationException."<init>":()V
       7: athrow

  protected void doClose() throws java.lang.Exception;
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #15                 // Field closed:Z
       5: aload_0
       6: getfield      #9                  // Field inboundBuffer:Ljava/util/Queue;
       9: invokeinterface #24,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
      14: ifne          33
      17: aload_0
      18: getfield      #9                  // Field inboundBuffer:Ljava/util/Queue;
      21: invokeinterface #25,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
      26: invokestatic  #26                 // Method io/netty/util/ReferenceCountUtil.release:(Ljava/lang/Object;)Z
      29: pop
      30: goto          5
      33: return

  protected void doBeginRead();
    Code:
       0: aload_0
       1: getfield      #2                  // Field readInProgress:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: invokevirtual #27                 // Method unsafe:()Lio/netty/channel/Channel$Unsafe;
      12: invokeinterface #28,  1           // InterfaceMethod io/netty/channel/Channel$Unsafe.recvBufAllocHandle:()Lio/netty/channel/RecvByteBufAllocator$Handle;
      17: astore_1
      18: aload_1
      19: aload_0
      20: invokevirtual #29                 // Method config:()Lio/netty/channel/ChannelConfig;
      23: invokeinterface #30,  2           // InterfaceMethod io/netty/channel/RecvByteBufAllocator$Handle.reset:(Lio/netty/channel/ChannelConfig;)V
      28: aload_0
      29: getfield      #9                  // Field inboundBuffer:Ljava/util/Queue;
      32: invokeinterface #24,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
      37: ifeq          46
      40: aload_0
      41: iconst_1
      42: putfield      #2                  // Field readInProgress:Z
      45: return
      46: aload_0
      47: getfield      #9                  // Field inboundBuffer:Ljava/util/Queue;
      50: invokeinterface #25,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
      55: astore_2
      56: aload_2
      57: ifnonnull     63
      60: goto          82
      63: aload_0
      64: aload_2
      65: aload_1
      66: invokespecial #31                 // Method doRead0:(Ljava/lang/Object;Lio/netty/channel/RecvByteBufAllocator$Handle;)Z
      69: ifne          73
      72: return
      73: aload_1
      74: invokeinterface #32,  1           // InterfaceMethod io/netty/channel/RecvByteBufAllocator$Handle.continueReading:()Z
      79: ifne          46
      82: aload_1
      83: invokeinterface #33,  1           // InterfaceMethod io/netty/channel/RecvByteBufAllocator$Handle.readComplete:()V
      88: aload_0
      89: invokevirtual #34                 // Method pipeline:()Lio/netty/channel/ChannelPipeline;
      92: invokeinterface #35,  1           // InterfaceMethod io/netty/channel/ChannelPipeline.fireChannelReadComplete:()Lio/netty/channel/ChannelPipeline;
      97: pop
      98: return

  protected final void doWrite(io.netty.channel.ChannelOutboundBuffer) throws java.lang.Exception;
    Code:
       0: aload_0
       1: getfield      #15                 // Field closed:Z
       4: ifeq          11
       7: getstatic     #36                 // Field CLOSED_CHANNEL_EXCEPTION:Ljava/nio/channels/ClosedChannelException;
      10: athrow
      11: aload_0
      12: invokevirtual #37                 // Method preferredEventExecutor:()Lio/netty/util/concurrent/EventExecutor;
      15: astore_2
      16: aload_2
      17: invokeinterface #38,  1           // InterfaceMethod io/netty/util/concurrent/EventExecutor.inEventLoop:()Z
      22: ifeq          77
      25: aload_1
      26: invokevirtual #39                 // Method io/netty/channel/ChannelOutboundBuffer.current:()Ljava/lang/Object;
      29: astore_3
      30: aload_3
      31: ifnonnull     37
      34: goto          70
      37: aload_0
      38: aload_3
      39: invokestatic  #40                 // Method io/netty/util/ReferenceCountUtil.retain:(Ljava/lang/Object;)Ljava/lang/Object;
      42: invokevirtual #41                 // Method doWrite:(Ljava/lang/Object;)V
      45: goto          62
      48: astore        4
      50: aload_0
      51: invokevirtual #34                 // Method pipeline:()Lio/netty/channel/ChannelPipeline;
      54: aload         4
      56: invokeinterface #43,  2           // InterfaceMethod io/netty/channel/ChannelPipeline.fireExceptionCaught:(Ljava/lang/Throwable;)Lio/netty/channel/ChannelPipeline;
      61: pop
      62: aload_1
      63: invokevirtual #44                 // Method io/netty/channel/ChannelOutboundBuffer.remove:()Z
      66: pop
      67: goto          25
      70: aload_0
      71: invokevirtual #45                 // Method doWriteComplete:()V
      74: goto          132
      77: aload_1
      78: invokevirtual #46                 // Method io/netty/channel/ChannelOutboundBuffer.size:()I
      81: anewarray     #47                 // class java/lang/Object
      84: astore_3
      85: iconst_0
      86: istore        4
      88: iload         4
      90: aload_3
      91: arraylength
      92: if_icmpge     117
      95: aload_3
      96: iload         4
      98: aload_1
      99: invokevirtual #39                 // Method io/netty/channel/ChannelOutboundBuffer.current:()Ljava/lang/Object;
     102: invokestatic  #40                 // Method io/netty/util/ReferenceCountUtil.retain:(Ljava/lang/Object;)Ljava/lang/Object;
     105: aastore
     106: aload_1
     107: invokevirtual #44                 // Method io/netty/channel/ChannelOutboundBuffer.remove:()Z
     110: pop
     111: iinc          4, 1
     114: goto          88
     117: aload_2
     118: new           #48                 // class io/netty/handler/codec/http2/AbstractHttp2StreamChannel$2
     121: dup
     122: aload_0
     123: aload_3
     124: invokespecial #49                 // Method io/netty/handler/codec/http2/AbstractHttp2StreamChannel$2."<init>":(Lio/netty/handler/codec/http2/AbstractHttp2StreamChannel;[Ljava/lang/Object;)V
     127: invokeinterface #50,  2           // InterfaceMethod io/netty/util/concurrent/EventExecutor.execute:(Ljava/lang/Runnable;)V
     132: return
    Exception table:
       from    to  target type
          37    45    48   Class java/lang/Throwable

  protected abstract void doWrite(java.lang.Object) throws java.lang.Exception;

  protected abstract void doWriteComplete();

  protected abstract io.netty.util.concurrent.EventExecutor preferredEventExecutor();

  protected abstract void bytesConsumed(int);

  protected void fireChildRead(java.lang.Object);
    Code:
       0: aload_0
       1: invokevirtual #51                 // Method eventLoop:()Lio/netty/channel/EventLoop;
       4: invokeinterface #52,  1           // InterfaceMethod io/netty/channel/EventLoop.inEventLoop:()Z
       9: ifeq          20
      12: aload_0
      13: aload_1
      14: invokespecial #1                  // Method fireChildRead0:(Ljava/lang/Object;)V
      17: goto          38
      20: aload_0
      21: invokevirtual #51                 // Method eventLoop:()Lio/netty/channel/EventLoop;
      24: new           #53                 // class io/netty/handler/codec/http2/AbstractHttp2StreamChannel$3
      27: dup
      28: aload_0
      29: aload_1
      30: invokespecial #54                 // Method io/netty/handler/codec/http2/AbstractHttp2StreamChannel$3."<init>":(Lio/netty/handler/codec/http2/AbstractHttp2StreamChannel;Ljava/lang/Object;)V
      33: invokeinterface #55,  2           // InterfaceMethod io/netty/channel/EventLoop.execute:(Ljava/lang/Runnable;)V
      38: return

  private void fireChildRead0(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #15                 // Field closed:Z
       4: ifeq          13
       7: aload_1
       8: invokestatic  #26                 // Method io/netty/util/ReferenceCountUtil.release:(Ljava/lang/Object;)Z
      11: pop
      12: return
      13: aload_0
      14: getfield      #2                  // Field readInProgress:Z
      17: ifeq          92
      20: getstatic     #56                 // Field $assertionsDisabled:Z
      23: ifne          46
      26: aload_0
      27: getfield      #9                  // Field inboundBuffer:Ljava/util/Queue;
      30: invokeinterface #24,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
      35: ifne          46
      38: new           #57                 // class java/lang/AssertionError
      41: dup
      42: invokespecial #58                 // Method java/lang/AssertionError."<init>":()V
      45: athrow
      46: aload_0
      47: invokevirtual #27                 // Method unsafe:()Lio/netty/channel/Channel$Unsafe;
      50: invokeinterface #28,  1           // InterfaceMethod io/netty/channel/Channel$Unsafe.recvBufAllocHandle:()Lio/netty/channel/RecvByteBufAllocator$Handle;
      55: astore_2
      56: aload_0
      57: aload_0
      58: aload_1
      59: ldc           #59                 // String msg
      61: invokestatic  #60                 // Method io/netty/util/internal/ObjectUtil.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      64: aload_2
      65: invokespecial #31                 // Method doRead0:(Ljava/lang/Object;Lio/netty/channel/RecvByteBufAllocator$Handle;)Z
      68: putfield      #2                  // Field readInProgress:Z
      71: aload_2
      72: invokeinterface #32,  1           // InterfaceMethod io/netty/channel/RecvByteBufAllocator$Handle.continueReading:()Z
      77: ifne          89
      80: aload_0
      81: getfield      #12                 // Field fireChildReadCompleteTask:Ljava/lang/Runnable;
      84: invokeinterface #61,  1           // InterfaceMethod java/lang/Runnable.run:()V
      89: goto          103
      92: aload_0
      93: getfield      #9                  // Field inboundBuffer:Ljava/util/Queue;
      96: aload_1
      97: invokeinterface #62,  2           // InterfaceMethod java/util/Queue.add:(Ljava/lang/Object;)Z
     102: pop
     103: return

  protected void fireChildReadComplete();
    Code:
       0: aload_0
       1: invokevirtual #51                 // Method eventLoop:()Lio/netty/channel/EventLoop;
       4: invokeinterface #52,  1           // InterfaceMethod io/netty/channel/EventLoop.inEventLoop:()Z
       9: ifeq          24
      12: aload_0
      13: getfield      #12                 // Field fireChildReadCompleteTask:Ljava/lang/Runnable;
      16: invokeinterface #61,  1           // InterfaceMethod java/lang/Runnable.run:()V
      21: goto          37
      24: aload_0
      25: invokevirtual #51                 // Method eventLoop:()Lio/netty/channel/EventLoop;
      28: aload_0
      29: getfield      #12                 // Field fireChildReadCompleteTask:Ljava/lang/Runnable;
      32: invokeinterface #55,  2           // InterfaceMethod io/netty/channel/EventLoop.execute:(Ljava/lang/Runnable;)V
      37: return

  protected void streamId(int);
    Code:
       0: aload_0
       1: getfield      #13                 // Field streamId:I
       4: iconst_m1
       5: if_icmpeq     18
       8: new           #63                 // class java/lang/IllegalStateException
      11: dup
      12: ldc           #64                 // String Stream identifier may only be set once.
      14: invokespecial #65                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      17: athrow
      18: aload_0
      19: iload_1
      20: ldc           #66                 // String streamId
      22: invokestatic  #67                 // Method io/netty/util/internal/ObjectUtil.checkPositiveOrZero:(ILjava/lang/String;)I
      25: putfield      #13                 // Field streamId:I
      28: return

  protected int streamId();
    Code:
       0: aload_0
       1: getfield      #13                 // Field streamId:I
       4: ireturn

  private boolean doRead0(java.lang.Object, io.netty.channel.RecvByteBufAllocator$Handle);
    Code:
       0: aload_1
       1: getstatic     #68                 // Field CLOSE_MESSAGE:Ljava/lang/Object;
       4: if_acmpne     38
       7: aload_2
       8: invokeinterface #33,  1           // InterfaceMethod io/netty/channel/RecvByteBufAllocator$Handle.readComplete:()V
      13: aload_0
      14: invokevirtual #34                 // Method pipeline:()Lio/netty/channel/ChannelPipeline;
      17: invokeinterface #35,  1           // InterfaceMethod io/netty/channel/ChannelPipeline.fireChannelReadComplete:()Lio/netty/channel/ChannelPipeline;
      22: pop
      23: aload_0
      24: invokevirtual #27                 // Method unsafe:()Lio/netty/channel/Channel$Unsafe;
      27: aload_0
      28: invokevirtual #69                 // Method voidPromise:()Lio/netty/channel/ChannelPromise;
      31: invokeinterface #70,  2           // InterfaceMethod io/netty/channel/Channel$Unsafe.close:(Lio/netty/channel/ChannelPromise;)V
      36: iconst_0
      37: ireturn
      38: iconst_0
      39: istore_3
      40: aload_1
      41: instanceof    #71                 // class io/netty/handler/codec/http2/Http2DataFrame
      44: ifeq          82
      47: aload_1
      48: checkcast     #71                 // class io/netty/handler/codec/http2/Http2DataFrame
      51: astore        4
      53: aload         4
      55: invokeinterface #72,  1           // InterfaceMethod io/netty/handler/codec/http2/Http2DataFrame.content:()Lio/netty/buffer/ByteBuf;
      60: invokevirtual #73                 // Method io/netty/buffer/ByteBuf.readableBytes:()I
      63: aload         4
      65: invokeinterface #74,  1           // InterfaceMethod io/netty/handler/codec/http2/Http2DataFrame.padding:()I
      70: iadd
      71: istore_3
      72: aload_2
      73: iload_3
      74: invokeinterface #75,  2           // InterfaceMethod io/netty/channel/RecvByteBufAllocator$Handle.lastBytesRead:(I)V
      79: goto          90
      82: aload_2
      83: bipush        9
      85: invokeinterface #75,  2           // InterfaceMethod io/netty/channel/RecvByteBufAllocator$Handle.lastBytesRead:(I)V
      90: aload_2
      91: iconst_1
      92: invokeinterface #77,  2           // InterfaceMethod io/netty/channel/RecvByteBufAllocator$Handle.incMessagesRead:(I)V
      97: aload_0
      98: invokevirtual #34                 // Method pipeline:()Lio/netty/channel/ChannelPipeline;
     101: aload_1
     102: invokeinterface #78,  2           // InterfaceMethod io/netty/channel/ChannelPipeline.fireChannelRead:(Ljava/lang/Object;)Lio/netty/channel/ChannelPipeline;
     107: pop
     108: iload_3
     109: ifeq          117
     112: aload_0
     113: iload_3
     114: invokevirtual #79                 // Method bytesConsumed:(I)V
     117: iconst_1
     118: ireturn

  static boolean access$000(io.netty.handler.codec.http2.AbstractHttp2StreamChannel);
    Code:
       0: aload_0
       1: getfield      #2                  // Field readInProgress:Z
       4: ireturn

  static boolean access$002(io.netty.handler.codec.http2.AbstractHttp2StreamChannel, boolean);
    Code:
       0: aload_0
       1: iload_1
       2: dup_x1
       3: putfield      #2                  // Field readInProgress:Z
       6: ireturn

  static void access$200(io.netty.handler.codec.http2.AbstractHttp2StreamChannel, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method fireChildRead0:(Ljava/lang/Object;)V
       5: return

  static {};
    Code:
       0: ldc           #76                 // class io/netty/handler/codec/http2/AbstractHttp2StreamChannel
       2: invokevirtual #80                 // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #56                 // Field $assertionsDisabled:Z
      16: new           #47                 // class java/lang/Object
      19: dup
      20: invokespecial #81                 // Method java/lang/Object."<init>":()V
      23: putstatic     #68                 // Field CLOSE_MESSAGE:Ljava/lang/Object;
      26: new           #82                 // class io/netty/channel/ChannelMetadata
      29: dup
      30: iconst_0
      31: bipush        16
      33: invokespecial #83                 // Method io/netty/channel/ChannelMetadata."<init>":(ZI)V
      36: putstatic     #14                 // Field METADATA:Lio/netty/channel/ChannelMetadata;
      39: new           #84                 // class java/nio/channels/ClosedChannelException
      42: dup
      43: invokespecial #85                 // Method java/nio/channels/ClosedChannelException."<init>":()V
      46: ldc           #76                 // class io/netty/handler/codec/http2/AbstractHttp2StreamChannel
      48: ldc           #86                 // String doWrite(...)
      50: invokestatic  #87                 // Method io/netty/util/internal/ThrowableUtil.unknownStackTrace:(Ljava/lang/Throwable;Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Throwable;
      53: checkcast     #84                 // class java/nio/channels/ClosedChannelException
      56: putstatic     #36                 // Field CLOSED_CHANNEL_EXCEPTION:Ljava/nio/channels/ClosedChannelException;
      59: return
}
