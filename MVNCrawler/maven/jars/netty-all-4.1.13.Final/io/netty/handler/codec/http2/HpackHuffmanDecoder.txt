Compiled from "HpackHuffmanDecoder.java"
final class io.netty.handler.codec.http2.HpackHuffmanDecoder {
  private static final io.netty.handler.codec.http2.Http2Exception EOS_DECODED;

  private static final io.netty.handler.codec.http2.Http2Exception INVALID_PADDING;

  private static final io.netty.handler.codec.http2.HpackHuffmanDecoder$Node ROOT;

  private final io.netty.handler.codec.http2.HpackHuffmanDecoder$DecoderProcessor processor;

  io.netty.handler.codec.http2.HpackHuffmanDecoder(int);
    Code:
       0: aload_0
       1: invokespecial #4                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #5                  // class io/netty/handler/codec/http2/HpackHuffmanDecoder$DecoderProcessor
       8: dup
       9: iload_1
      10: invokespecial #6                  // Method io/netty/handler/codec/http2/HpackHuffmanDecoder$DecoderProcessor."<init>":(I)V
      13: putfield      #7                  // Field processor:Lio/netty/handler/codec/http2/HpackHuffmanDecoder$DecoderProcessor;
      16: return

  public io.netty.util.AsciiString decode(io.netty.buffer.ByteBuf, int) throws io.netty.handler.codec.http2.Http2Exception;
    Code:
       0: aload_0
       1: getfield      #7                  // Field processor:Lio/netty/handler/codec/http2/HpackHuffmanDecoder$DecoderProcessor;
       4: invokevirtual #8                  // Method io/netty/handler/codec/http2/HpackHuffmanDecoder$DecoderProcessor.reset:()V
       7: aload_1
       8: aload_1
       9: invokevirtual #9                  // Method io/netty/buffer/ByteBuf.readerIndex:()I
      12: iload_2
      13: aload_0
      14: getfield      #7                  // Field processor:Lio/netty/handler/codec/http2/HpackHuffmanDecoder$DecoderProcessor;
      17: invokevirtual #10                 // Method io/netty/buffer/ByteBuf.forEachByte:(IILio/netty/util/ByteProcessor;)I
      20: pop
      21: aload_1
      22: iload_2
      23: invokevirtual #11                 // Method io/netty/buffer/ByteBuf.skipBytes:(I)Lio/netty/buffer/ByteBuf;
      26: pop
      27: aload_0
      28: getfield      #7                  // Field processor:Lio/netty/handler/codec/http2/HpackHuffmanDecoder$DecoderProcessor;
      31: invokevirtual #12                 // Method io/netty/handler/codec/http2/HpackHuffmanDecoder$DecoderProcessor.end:()Lio/netty/util/AsciiString;
      34: areturn

  private static io.netty.handler.codec.http2.HpackHuffmanDecoder$Node buildTree(int[], byte[]);
    Code:
       0: new           #13                 // class io/netty/handler/codec/http2/HpackHuffmanDecoder$Node
       3: dup
       4: invokespecial #14                 // Method io/netty/handler/codec/http2/HpackHuffmanDecoder$Node."<init>":()V
       7: astore_2
       8: iconst_0
       9: istore_3
      10: iload_3
      11: aload_0
      12: arraylength
      13: if_icmpge     33
      16: aload_2
      17: iload_3
      18: aload_0
      19: iload_3
      20: iaload
      21: aload_1
      22: iload_3
      23: baload
      24: invokestatic  #15                 // Method insert:(Lio/netty/handler/codec/http2/HpackHuffmanDecoder$Node;IIB)V
      27: iinc          3, 1
      30: goto          10
      33: aload_2
      34: areturn

  private static void insert(io.netty.handler.codec.http2.HpackHuffmanDecoder$Node, int, int, byte);
    Code:
       0: aload_0
       1: astore        4
       3: iload_3
       4: bipush        8
       6: if_icmple     81
       9: aload         4
      11: invokestatic  #16                 // Method io/netty/handler/codec/http2/HpackHuffmanDecoder$Node.access$000:(Lio/netty/handler/codec/http2/HpackHuffmanDecoder$Node;)Z
      14: ifeq          27
      17: new           #17                 // class java/lang/IllegalStateException
      20: dup
      21: ldc           #18                 // String invalid Huffman code: prefix not unique
      23: invokespecial #19                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      26: athrow
      27: iload_3
      28: bipush        8
      30: isub
      31: i2b
      32: istore_3
      33: iload_2
      34: iload_3
      35: iushr
      36: sipush        255
      39: iand
      40: istore        5
      42: aload         4
      44: invokestatic  #20                 // Method io/netty/handler/codec/http2/HpackHuffmanDecoder$Node.access$100:(Lio/netty/handler/codec/http2/HpackHuffmanDecoder$Node;)[Lio/netty/handler/codec/http2/HpackHuffmanDecoder$Node;
      47: iload         5
      49: aaload
      50: ifnonnull     68
      53: aload         4
      55: invokestatic  #20                 // Method io/netty/handler/codec/http2/HpackHuffmanDecoder$Node.access$100:(Lio/netty/handler/codec/http2/HpackHuffmanDecoder$Node;)[Lio/netty/handler/codec/http2/HpackHuffmanDecoder$Node;
      58: iload         5
      60: new           #13                 // class io/netty/handler/codec/http2/HpackHuffmanDecoder$Node
      63: dup
      64: invokespecial #14                 // Method io/netty/handler/codec/http2/HpackHuffmanDecoder$Node."<init>":()V
      67: aastore
      68: aload         4
      70: invokestatic  #20                 // Method io/netty/handler/codec/http2/HpackHuffmanDecoder$Node.access$100:(Lio/netty/handler/codec/http2/HpackHuffmanDecoder$Node;)[Lio/netty/handler/codec/http2/HpackHuffmanDecoder$Node;
      73: iload         5
      75: aaload
      76: astore        4
      78: goto          3
      81: new           #13                 // class io/netty/handler/codec/http2/HpackHuffmanDecoder$Node
      84: dup
      85: iload_1
      86: iload_3
      87: invokespecial #21                 // Method io/netty/handler/codec/http2/HpackHuffmanDecoder$Node."<init>":(II)V
      90: astore        5
      92: bipush        8
      94: iload_3
      95: isub
      96: istore        6
      98: iload_2
      99: iload         6
     101: ishl
     102: sipush        255
     105: iand
     106: istore        7
     108: iconst_1
     109: iload         6
     111: ishl
     112: istore        8
     114: iload         7
     116: istore        9
     118: iload         9
     120: iload         7
     122: iload         8
     124: iadd
     125: if_icmpge     144
     128: aload         4
     130: invokestatic  #20                 // Method io/netty/handler/codec/http2/HpackHuffmanDecoder$Node.access$100:(Lio/netty/handler/codec/http2/HpackHuffmanDecoder$Node;)[Lio/netty/handler/codec/http2/HpackHuffmanDecoder$Node;
     133: iload         9
     135: aload         5
     137: aastore
     138: iinc          9, 1
     141: goto          118
     144: return

  static io.netty.handler.codec.http2.HpackHuffmanDecoder$Node access$200();
    Code:
       0: getstatic     #3                  // Field ROOT:Lio/netty/handler/codec/http2/HpackHuffmanDecoder$Node;
       3: areturn

  static io.netty.handler.codec.http2.Http2Exception access$500();
    Code:
       0: getstatic     #2                  // Field EOS_DECODED:Lio/netty/handler/codec/http2/Http2Exception;
       3: areturn

  static io.netty.handler.codec.http2.Http2Exception access$600();
    Code:
       0: getstatic     #1                  // Field INVALID_PADDING:Lio/netty/handler/codec/http2/Http2Exception;
       3: areturn

  static {};
    Code:
       0: getstatic     #22                 // Field io/netty/handler/codec/http2/Http2Error.COMPRESSION_ERROR:Lio/netty/handler/codec/http2/Http2Error;
       3: ldc           #23                 // String HPACK - EOS Decoded
       5: iconst_0
       6: anewarray     #24                 // class java/lang/Object
       9: invokestatic  #25                 // Method io/netty/handler/codec/http2/Http2Exception.connectionError:(Lio/netty/handler/codec/http2/Http2Error;Ljava/lang/String;[Ljava/lang/Object;)Lio/netty/handler/codec/http2/Http2Exception;
      12: ldc           #26                 // class io/netty/handler/codec/http2/HpackHuffmanDecoder
      14: ldc           #27                 // String decode(..)
      16: invokestatic  #28                 // Method io/netty/util/internal/ThrowableUtil.unknownStackTrace:(Ljava/lang/Throwable;Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Throwable;
      19: checkcast     #29                 // class io/netty/handler/codec/http2/Http2Exception
      22: putstatic     #2                  // Field EOS_DECODED:Lio/netty/handler/codec/http2/Http2Exception;
      25: getstatic     #22                 // Field io/netty/handler/codec/http2/Http2Error.COMPRESSION_ERROR:Lio/netty/handler/codec/http2/Http2Error;
      28: ldc           #30                 // String HPACK - Invalid Padding
      30: iconst_0
      31: anewarray     #24                 // class java/lang/Object
      34: invokestatic  #25                 // Method io/netty/handler/codec/http2/Http2Exception.connectionError:(Lio/netty/handler/codec/http2/Http2Error;Ljava/lang/String;[Ljava/lang/Object;)Lio/netty/handler/codec/http2/Http2Exception;
      37: ldc           #26                 // class io/netty/handler/codec/http2/HpackHuffmanDecoder
      39: ldc           #27                 // String decode(..)
      41: invokestatic  #28                 // Method io/netty/util/internal/ThrowableUtil.unknownStackTrace:(Ljava/lang/Throwable;Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Throwable;
      44: checkcast     #29                 // class io/netty/handler/codec/http2/Http2Exception
      47: putstatic     #1                  // Field INVALID_PADDING:Lio/netty/handler/codec/http2/Http2Exception;
      50: getstatic     #31                 // Field io/netty/handler/codec/http2/HpackUtil.HUFFMAN_CODES:[I
      53: getstatic     #32                 // Field io/netty/handler/codec/http2/HpackUtil.HUFFMAN_CODE_LENGTHS:[B
      56: invokestatic  #33                 // Method buildTree:([I[B)Lio/netty/handler/codec/http2/HpackHuffmanDecoder$Node;
      59: putstatic     #3                  // Field ROOT:Lio/netty/handler/codec/http2/HpackHuffmanDecoder$Node;
      62: return
}
