Compiled from "DefaultHttp2RemoteFlowController.java"
final class io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState implements io.netty.handler.codec.http2.StreamByteDistributor$StreamState {
  private final io.netty.handler.codec.http2.Http2Stream stream;

  private final java.util.Deque<io.netty.handler.codec.http2.Http2RemoteFlowController$FlowControlled> pendingWriteQueue;

  private int window;

  private int pendingBytes;

  private boolean markedWritable;

  private boolean writing;

  private boolean cancelled;

  private io.netty.util.BooleanSupplier isWritableSupplier;

  static final boolean $assertionsDisabled;

  final io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController this$0;

  io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState(io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController, io.netty.handler.codec.http2.Http2Stream);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2                  // Field this$0:Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController;
       5: aload_0
       6: invokespecial #3                  // Method java/lang/Object."<init>":()V
       9: aload_0
      10: new           #4                  // class io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController$FlowState$1
      13: dup
      14: aload_0
      15: invokespecial #5                  // Method io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController$FlowState$1."<init>":(Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController$FlowState;)V
      18: putfield      #6                  // Field isWritableSupplier:Lio/netty/util/BooleanSupplier;
      21: aload_0
      22: aload_2
      23: putfield      #1                  // Field stream:Lio/netty/handler/codec/http2/Http2Stream;
      26: aload_0
      27: new           #7                  // class java/util/ArrayDeque
      30: dup
      31: iconst_2
      32: invokespecial #8                  // Method java/util/ArrayDeque."<init>":(I)V
      35: putfield      #9                  // Field pendingWriteQueue:Ljava/util/Deque;
      38: return

  boolean isWritable();
    Code:
       0: aload_0
       1: getfield      #6                  // Field isWritableSupplier:Lio/netty/util/BooleanSupplier;
       4: invokeinterface #10,  1           // InterfaceMethod io/netty/util/BooleanSupplier.get:()Z
       9: ireturn
      10: astore_1
      11: new           #12                 // class java/lang/Error
      14: dup
      15: ldc           #13                 // String isWritableSupplier should never throw!
      17: aload_1
      18: invokespecial #14                 // Method java/lang/Error."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      21: athrow
    Exception table:
       from    to  target type
           0     9    10   Class java/lang/Throwable

  public io.netty.handler.codec.http2.Http2Stream stream();
    Code:
       0: aload_0
       1: getfield      #1                  // Field stream:Lio/netty/handler/codec/http2/Http2Stream;
       4: areturn

  boolean markedWritability();
    Code:
       0: aload_0
       1: getfield      #15                 // Field markedWritable:Z
       4: ireturn

  void markedWritability(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #15                 // Field markedWritable:Z
       5: return

  public int windowSize();
    Code:
       0: aload_0
       1: getfield      #16                 // Field window:I
       4: ireturn

  void windowSize(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #16                 // Field window:I
       5: return

  int writeAllocatedBytes(int);
    Code:
       0: iload_1
       1: istore_2
       2: aconst_null
       3: astore        4
       5: getstatic     #17                 // Field $assertionsDisabled:Z
       8: ifne          26
      11: aload_0
      12: getfield      #18                 // Field writing:Z
      15: ifeq          26
      18: new           #19                 // class java/lang/AssertionError
      21: dup
      22: invokespecial #20                 // Method java/lang/AssertionError."<init>":()V
      25: athrow
      26: aload_0
      27: iconst_1
      28: putfield      #18                 // Field writing:Z
      31: iconst_0
      32: istore        6
      34: aload_0
      35: getfield      #21                 // Field cancelled:Z
      38: ifne          175
      41: aload_0
      42: invokespecial #22                 // Method peek:()Lio/netty/handler/codec/http2/Http2RemoteFlowController$FlowControlled;
      45: dup
      46: astore        5
      48: ifnull        175
      51: iload_1
      52: aload_0
      53: invokespecial #23                 // Method writableWindow:()I
      56: invokestatic  #24                 // Method java/lang/Math.min:(II)I
      59: istore        7
      61: iload         7
      63: ifgt          79
      66: aload         5
      68: invokeinterface #25,  1           // InterfaceMethod io/netty/handler/codec/http2/Http2RemoteFlowController$FlowControlled.size:()I
      73: ifle          79
      76: goto          175
      79: iconst_1
      80: istore        6
      82: aload         5
      84: invokeinterface #25,  1           // InterfaceMethod io/netty/handler/codec/http2/Http2RemoteFlowController$FlowControlled.size:()I
      89: istore        8
      91: aload         5
      93: aload_0
      94: getfield      #2                  // Field this$0:Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController;
      97: invokestatic  #26                 // Method io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController.access$500:(Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController;)Lio/netty/channel/ChannelHandlerContext;
     100: iconst_0
     101: iload         7
     103: invokestatic  #27                 // Method java/lang/Math.max:(II)I
     106: invokeinterface #28,  3           // InterfaceMethod io/netty/handler/codec/http2/Http2RemoteFlowController$FlowControlled.write:(Lio/netty/channel/ChannelHandlerContext;I)V
     111: aload         5
     113: invokeinterface #25,  1           // InterfaceMethod io/netty/handler/codec/http2/Http2RemoteFlowController$FlowControlled.size:()I
     118: ifne          138
     121: aload_0
     122: getfield      #9                  // Field pendingWriteQueue:Ljava/util/Deque;
     125: invokeinterface #29,  1           // InterfaceMethod java/util/Deque.remove:()Ljava/lang/Object;
     130: pop
     131: aload         5
     133: invokeinterface #30,  1           // InterfaceMethod io/netty/handler/codec/http2/Http2RemoteFlowController$FlowControlled.writeComplete:()V
     138: iload_1
     139: iload         8
     141: aload         5
     143: invokeinterface #25,  1           // InterfaceMethod io/netty/handler/codec/http2/Http2RemoteFlowController$FlowControlled.size:()I
     148: isub
     149: isub
     150: istore_1
     151: goto          172
     154: astore        9
     156: iload_1
     157: iload         8
     159: aload         5
     161: invokeinterface #25,  1           // InterfaceMethod io/netty/handler/codec/http2/Http2RemoteFlowController$FlowControlled.size:()I
     166: isub
     167: isub
     168: istore_1
     169: aload         9
     171: athrow
     172: goto          34
     175: iload         6
     177: ifne          219
     180: iconst_m1
     181: istore        7
     183: aload_0
     184: iconst_0
     185: putfield      #18                 // Field writing:Z
     188: iload_2
     189: iload_1
     190: isub
     191: istore_3
     192: aload_0
     193: iload_3
     194: iconst_0
     195: invokespecial #31                 // Method decrementPendingBytes:(IZ)V
     198: aload_0
     199: iload_3
     200: invokespecial #32                 // Method decrementFlowControlWindow:(I)V
     203: aload_0
     204: getfield      #21                 // Field cancelled:Z
     207: ifeq          216
     210: aload_0
     211: aload         4
     213: invokespecial #33                 // Method cancel:(Ljava/lang/Throwable;)V
     216: iload         7
     218: ireturn
     219: aload_0
     220: iconst_0
     221: putfield      #18                 // Field writing:Z
     224: iload_2
     225: iload_1
     226: isub
     227: istore_3
     228: aload_0
     229: iload_3
     230: iconst_0
     231: invokespecial #31                 // Method decrementPendingBytes:(IZ)V
     234: aload_0
     235: iload_3
     236: invokespecial #32                 // Method decrementFlowControlWindow:(I)V
     239: aload_0
     240: getfield      #21                 // Field cancelled:Z
     243: ifeq          340
     246: aload_0
     247: aload         4
     249: invokespecial #33                 // Method cancel:(Ljava/lang/Throwable;)V
     252: goto          340
     255: astore        6
     257: aload_0
     258: iconst_1
     259: putfield      #21                 // Field cancelled:Z
     262: aload         6
     264: astore        4
     266: aload_0
     267: iconst_0
     268: putfield      #18                 // Field writing:Z
     271: iload_2
     272: iload_1
     273: isub
     274: istore_3
     275: aload_0
     276: iload_3
     277: iconst_0
     278: invokespecial #31                 // Method decrementPendingBytes:(IZ)V
     281: aload_0
     282: iload_3
     283: invokespecial #32                 // Method decrementFlowControlWindow:(I)V
     286: aload_0
     287: getfield      #21                 // Field cancelled:Z
     290: ifeq          340
     293: aload_0
     294: aload         4
     296: invokespecial #33                 // Method cancel:(Ljava/lang/Throwable;)V
     299: goto          340
     302: astore        10
     304: aload_0
     305: iconst_0
     306: putfield      #18                 // Field writing:Z
     309: iload_2
     310: iload_1
     311: isub
     312: istore_3
     313: aload_0
     314: iload_3
     315: iconst_0
     316: invokespecial #31                 // Method decrementPendingBytes:(IZ)V
     319: aload_0
     320: iload_3
     321: invokespecial #32                 // Method decrementFlowControlWindow:(I)V
     324: aload_0
     325: getfield      #21                 // Field cancelled:Z
     328: ifeq          337
     331: aload_0
     332: aload         4
     334: invokespecial #33                 // Method cancel:(Ljava/lang/Throwable;)V
     337: aload         10
     339: athrow
     340: iload_3
     341: ireturn
    Exception table:
       from    to  target type
          91   138   154   any
         154   156   154   any
           5   183   255   Class java/lang/Throwable
           5   183   302   any
         255   266   302   any
         302   304   302   any

  int incrementStreamWindow(int) throws io.netty.handler.codec.http2.Http2Exception;
    Code:
       0: iload_1
       1: ifle          52
       4: ldc           #35                 // int 2147483647
       6: iload_1
       7: isub
       8: aload_0
       9: getfield      #16                 // Field window:I
      12: if_icmpge     52
      15: aload_0
      16: getfield      #1                  // Field stream:Lio/netty/handler/codec/http2/Http2Stream;
      19: invokeinterface #36,  1           // InterfaceMethod io/netty/handler/codec/http2/Http2Stream.id:()I
      24: getstatic     #37                 // Field io/netty/handler/codec/http2/Http2Error.FLOW_CONTROL_ERROR:Lio/netty/handler/codec/http2/Http2Error;
      27: ldc           #38                 // String Window size overflow for stream: %d
      29: iconst_1
      30: anewarray     #39                 // class java/lang/Object
      33: dup
      34: iconst_0
      35: aload_0
      36: getfield      #1                  // Field stream:Lio/netty/handler/codec/http2/Http2Stream;
      39: invokeinterface #36,  1           // InterfaceMethod io/netty/handler/codec/http2/Http2Stream.id:()I
      44: invokestatic  #40                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      47: aastore
      48: invokestatic  #41                 // Method io/netty/handler/codec/http2/Http2Exception.streamError:(ILio/netty/handler/codec/http2/Http2Error;Ljava/lang/String;[Ljava/lang/Object;)Lio/netty/handler/codec/http2/Http2Exception;
      51: athrow
      52: aload_0
      53: dup
      54: getfield      #16                 // Field window:I
      57: iload_1
      58: iadd
      59: putfield      #16                 // Field window:I
      62: aload_0
      63: getfield      #2                  // Field this$0:Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController;
      66: invokestatic  #42                 // Method io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController.access$600:(Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController;)Lio/netty/handler/codec/http2/StreamByteDistributor;
      69: aload_0
      70: invokeinterface #43,  2           // InterfaceMethod io/netty/handler/codec/http2/StreamByteDistributor.updateStreamableBytes:(Lio/netty/handler/codec/http2/StreamByteDistributor$StreamState;)V
      75: aload_0
      76: getfield      #16                 // Field window:I
      79: ireturn

  private int writableWindow();
    Code:
       0: aload_0
       1: getfield      #16                 // Field window:I
       4: aload_0
       5: getfield      #2                  // Field this$0:Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController;
       8: invokestatic  #44                 // Method io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController.access$700:(Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController;)I
      11: invokestatic  #24                 // Method java/lang/Math.min:(II)I
      14: ireturn

  public int pendingBytes();
    Code:
       0: aload_0
       1: getfield      #45                 // Field pendingBytes:I
       4: ireturn

  void enqueueFrame(io.netty.handler.codec.http2.Http2RemoteFlowController$FlowControlled);
    Code:
       0: aload_0
       1: getfield      #9                  // Field pendingWriteQueue:Ljava/util/Deque;
       4: invokeinterface #46,  1           // InterfaceMethod java/util/Deque.peekLast:()Ljava/lang/Object;
       9: checkcast     #47                 // class io/netty/handler/codec/http2/Http2RemoteFlowController$FlowControlled
      12: astore_2
      13: aload_2
      14: ifnonnull     23
      17: aload_0
      18: aload_1
      19: invokespecial #48                 // Method enqueueFrameWithoutMerge:(Lio/netty/handler/codec/http2/Http2RemoteFlowController$FlowControlled;)V
      22: return
      23: aload_2
      24: invokeinterface #25,  1           // InterfaceMethod io/netty/handler/codec/http2/Http2RemoteFlowController$FlowControlled.size:()I
      29: istore_3
      30: aload_2
      31: aload_0
      32: getfield      #2                  // Field this$0:Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController;
      35: invokestatic  #26                 // Method io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController.access$500:(Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController;)Lio/netty/channel/ChannelHandlerContext;
      38: aload_1
      39: invokeinterface #49,  3           // InterfaceMethod io/netty/handler/codec/http2/Http2RemoteFlowController$FlowControlled.merge:(Lio/netty/channel/ChannelHandlerContext;Lio/netty/handler/codec/http2/Http2RemoteFlowController$FlowControlled;)Z
      44: ifeq          61
      47: aload_0
      48: aload_2
      49: invokeinterface #25,  1           // InterfaceMethod io/netty/handler/codec/http2/Http2RemoteFlowController$FlowControlled.size:()I
      54: iload_3
      55: isub
      56: iconst_1
      57: invokespecial #50                 // Method incrementPendingBytes:(IZ)V
      60: return
      61: aload_0
      62: aload_1
      63: invokespecial #48                 // Method enqueueFrameWithoutMerge:(Lio/netty/handler/codec/http2/Http2RemoteFlowController$FlowControlled;)V
      66: return

  private void enqueueFrameWithoutMerge(io.netty.handler.codec.http2.Http2RemoteFlowController$FlowControlled);
    Code:
       0: aload_0
       1: getfield      #9                  // Field pendingWriteQueue:Ljava/util/Deque;
       4: aload_1
       5: invokeinterface #51,  2           // InterfaceMethod java/util/Deque.offer:(Ljava/lang/Object;)Z
      10: pop
      11: aload_0
      12: aload_1
      13: invokeinterface #25,  1           // InterfaceMethod io/netty/handler/codec/http2/Http2RemoteFlowController$FlowControlled.size:()I
      18: iconst_1
      19: invokespecial #50                 // Method incrementPendingBytes:(IZ)V
      22: return

  public boolean hasFrame();
    Code:
       0: aload_0
       1: getfield      #9                  // Field pendingWriteQueue:Ljava/util/Deque;
       4: invokeinterface #52,  1           // InterfaceMethod java/util/Deque.isEmpty:()Z
       9: ifne          16
      12: iconst_1
      13: goto          17
      16: iconst_0
      17: ireturn

  private io.netty.handler.codec.http2.Http2RemoteFlowController$FlowControlled peek();
    Code:
       0: aload_0
       1: getfield      #9                  // Field pendingWriteQueue:Ljava/util/Deque;
       4: invokeinterface #53,  1           // InterfaceMethod java/util/Deque.peek:()Ljava/lang/Object;
       9: checkcast     #47                 // class io/netty/handler/codec/http2/Http2RemoteFlowController$FlowControlled
      12: areturn

  void cancel();
    Code:
       0: aload_0
       1: aconst_null
       2: invokespecial #33                 // Method cancel:(Ljava/lang/Throwable;)V
       5: return

  private void cancel(java.lang.Throwable);
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #21                 // Field cancelled:Z
       5: aload_0
       6: getfield      #18                 // Field writing:Z
       9: ifeq          13
      12: return
      13: aload_0
      14: getfield      #9                  // Field pendingWriteQueue:Ljava/util/Deque;
      17: invokeinterface #54,  1           // InterfaceMethod java/util/Deque.poll:()Ljava/lang/Object;
      22: checkcast     #47                 // class io/netty/handler/codec/http2/Http2RemoteFlowController$FlowControlled
      25: astore_2
      26: aload_2
      27: ifnonnull     33
      30: goto          63
      33: aload_0
      34: aload_2
      35: aload_0
      36: getfield      #1                  // Field stream:Lio/netty/handler/codec/http2/Http2Stream;
      39: invokeinterface #36,  1           // InterfaceMethod io/netty/handler/codec/http2/Http2Stream.id:()I
      44: getstatic     #55                 // Field io/netty/handler/codec/http2/Http2Error.INTERNAL_ERROR:Lio/netty/handler/codec/http2/Http2Error;
      47: aload_1
      48: ldc           #56                 // String Stream closed before write could take place
      50: iconst_0
      51: anewarray     #39                 // class java/lang/Object
      54: invokestatic  #57                 // Method io/netty/handler/codec/http2/Http2Exception.streamError:(ILio/netty/handler/codec/http2/Http2Error;Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)Lio/netty/handler/codec/http2/Http2Exception;
      57: invokespecial #58                 // Method writeError:(Lio/netty/handler/codec/http2/Http2RemoteFlowController$FlowControlled;Lio/netty/handler/codec/http2/Http2Exception;)V
      60: goto          13
      63: aload_0
      64: getfield      #2                  // Field this$0:Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController;
      67: invokestatic  #42                 // Method io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController.access$600:(Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController;)Lio/netty/handler/codec/http2/StreamByteDistributor;
      70: aload_0
      71: invokeinterface #43,  2           // InterfaceMethod io/netty/handler/codec/http2/StreamByteDistributor.updateStreamableBytes:(Lio/netty/handler/codec/http2/StreamByteDistributor$StreamState;)V
      76: aload_0
      77: getstatic     #59                 // Field io/netty/util/BooleanSupplier.FALSE_SUPPLIER:Lio/netty/util/BooleanSupplier;
      80: putfield      #6                  // Field isWritableSupplier:Lio/netty/util/BooleanSupplier;
      83: aload_0
      84: getfield      #2                  // Field this$0:Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController;
      87: invokestatic  #60                 // Method io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController.access$300:(Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController;)Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController$WritabilityMonitor;
      90: aload_0
      91: invokevirtual #61                 // Method io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController$WritabilityMonitor.stateCancelled:(Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController$FlowState;)V
      94: return

  private void incrementPendingBytes(int, boolean);
    Code:
       0: aload_0
       1: dup
       2: getfield      #45                 // Field pendingBytes:I
       5: iload_1
       6: iadd
       7: putfield      #45                 // Field pendingBytes:I
      10: aload_0
      11: getfield      #2                  // Field this$0:Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController;
      14: invokestatic  #60                 // Method io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController.access$300:(Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController;)Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController$WritabilityMonitor;
      17: iload_1
      18: invokevirtual #62                 // Method io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController$WritabilityMonitor.incrementPendingBytes:(I)V
      21: iload_2
      22: ifeq          38
      25: aload_0
      26: getfield      #2                  // Field this$0:Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController;
      29: invokestatic  #42                 // Method io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController.access$600:(Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController;)Lio/netty/handler/codec/http2/StreamByteDistributor;
      32: aload_0
      33: invokeinterface #43,  2           // InterfaceMethod io/netty/handler/codec/http2/StreamByteDistributor.updateStreamableBytes:(Lio/netty/handler/codec/http2/StreamByteDistributor$StreamState;)V
      38: return

  private void decrementPendingBytes(int, boolean);
    Code:
       0: aload_0
       1: iload_1
       2: ineg
       3: iload_2
       4: invokespecial #50                 // Method incrementPendingBytes:(IZ)V
       7: return

  private void decrementFlowControlWindow(int);
    Code:
       0: iload_1
       1: ineg
       2: istore_2
       3: aload_0
       4: getfield      #2                  // Field this$0:Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController;
       7: invokestatic  #63                 // Method io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController.access$800:(Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController;)Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController$FlowState;
      10: iload_2
      11: invokevirtual #64                 // Method incrementStreamWindow:(I)I
      14: pop
      15: aload_0
      16: iload_2
      17: invokevirtual #64                 // Method incrementStreamWindow:(I)I
      20: pop
      21: goto          56
      24: astore_2
      25: new           #66                 // class java/lang/IllegalStateException
      28: dup
      29: new           #67                 // class java/lang/StringBuilder
      32: dup
      33: invokespecial #68                 // Method java/lang/StringBuilder."<init>":()V
      36: ldc           #69                 // String Invalid window state when writing frame:
      38: invokevirtual #70                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      41: aload_2
      42: invokevirtual #71                 // Method io/netty/handler/codec/http2/Http2Exception.getMessage:()Ljava/lang/String;
      45: invokevirtual #70                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      48: invokevirtual #72                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      51: aload_2
      52: invokespecial #73                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      55: athrow
      56: return
    Exception table:
       from    to  target type
           0    21    24   Class io/netty/handler/codec/http2/Http2Exception

  private void writeError(io.netty.handler.codec.http2.Http2RemoteFlowController$FlowControlled, io.netty.handler.codec.http2.Http2Exception);
    Code:
       0: getstatic     #17                 // Field $assertionsDisabled:Z
       3: ifne          24
       6: aload_0
       7: getfield      #2                  // Field this$0:Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController;
      10: invokestatic  #26                 // Method io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController.access$500:(Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController;)Lio/netty/channel/ChannelHandlerContext;
      13: ifnonnull     24
      16: new           #19                 // class java/lang/AssertionError
      19: dup
      20: invokespecial #20                 // Method java/lang/AssertionError."<init>":()V
      23: athrow
      24: aload_0
      25: aload_1
      26: invokeinterface #25,  1           // InterfaceMethod io/netty/handler/codec/http2/Http2RemoteFlowController$FlowControlled.size:()I
      31: iconst_1
      32: invokespecial #31                 // Method decrementPendingBytes:(IZ)V
      35: aload_1
      36: aload_0
      37: getfield      #2                  // Field this$0:Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController;
      40: invokestatic  #26                 // Method io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController.access$500:(Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController;)Lio/netty/channel/ChannelHandlerContext;
      43: aload_2
      44: invokeinterface #74,  3           // InterfaceMethod io/netty/handler/codec/http2/Http2RemoteFlowController$FlowControlled.error:(Lio/netty/channel/ChannelHandlerContext;Ljava/lang/Throwable;)V
      49: return

  static io.netty.handler.codec.http2.Http2Stream access$1400(io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState);
    Code:
       0: aload_0
       1: getfield      #1                  // Field stream:Lio/netty/handler/codec/http2/Http2Stream;
       4: areturn

  static {};
    Code:
       0: ldc           #75                 // class io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController
       2: invokevirtual #76                 // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #17                 // Field $assertionsDisabled:Z
      16: return
}
