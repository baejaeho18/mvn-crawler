Compiled from "Http2CodecUtil.java"
public final class io.netty.handler.codec.http2.Http2CodecUtil {
  public static final int CONNECTION_STREAM_ID;

  public static final int HTTP_UPGRADE_STREAM_ID;

  public static final java.lang.CharSequence HTTP_UPGRADE_SETTINGS_HEADER;

  public static final java.lang.CharSequence HTTP_UPGRADE_PROTOCOL_NAME;

  public static final java.lang.CharSequence TLS_UPGRADE_PROTOCOL_NAME;

  public static final int PING_FRAME_PAYLOAD_LENGTH;

  public static final short MAX_UNSIGNED_BYTE;

  public static final int MAX_PADDING;

  public static final long MAX_UNSIGNED_INT;

  public static final int FRAME_HEADER_LENGTH;

  public static final int SETTING_ENTRY_LENGTH;

  public static final int PRIORITY_ENTRY_LENGTH;

  public static final int INT_FIELD_LENGTH;

  public static final short MAX_WEIGHT;

  public static final short MIN_WEIGHT;

  private static final io.netty.buffer.ByteBuf CONNECTION_PREFACE;

  private static final io.netty.buffer.ByteBuf EMPTY_PING;

  private static final int MAX_PADDING_LENGTH_LENGTH;

  public static final int DATA_FRAME_HEADER_LENGTH;

  public static final int HEADERS_FRAME_HEADER_LENGTH;

  public static final int PRIORITY_FRAME_LENGTH;

  public static final int RST_STREAM_FRAME_LENGTH;

  public static final int PUSH_PROMISE_FRAME_HEADER_LENGTH;

  public static final int GO_AWAY_FRAME_HEADER_LENGTH;

  public static final int WINDOW_UPDATE_FRAME_LENGTH;

  public static final int CONTINUATION_FRAME_HEADER_LENGTH;

  public static final char SETTINGS_HEADER_TABLE_SIZE;

  public static final char SETTINGS_ENABLE_PUSH;

  public static final char SETTINGS_MAX_CONCURRENT_STREAMS;

  public static final char SETTINGS_INITIAL_WINDOW_SIZE;

  public static final char SETTINGS_MAX_FRAME_SIZE;

  public static final char SETTINGS_MAX_HEADER_LIST_SIZE;

  public static final int NUM_STANDARD_SETTINGS;

  public static final long MAX_HEADER_TABLE_SIZE;

  public static final long MAX_CONCURRENT_STREAMS;

  public static final int MAX_INITIAL_WINDOW_SIZE;

  public static final int MAX_FRAME_SIZE_LOWER_BOUND;

  public static final int MAX_FRAME_SIZE_UPPER_BOUND;

  public static final long MAX_HEADER_LIST_SIZE;

  public static final long MIN_HEADER_TABLE_SIZE;

  public static final long MIN_CONCURRENT_STREAMS;

  public static final int MIN_INITIAL_WINDOW_SIZE;

  public static final long MIN_HEADER_LIST_SIZE;

  public static final int DEFAULT_WINDOW_SIZE;

  public static final short DEFAULT_PRIORITY_WEIGHT;

  public static final int DEFAULT_HEADER_TABLE_SIZE;

  public static final long DEFAULT_HEADER_LIST_SIZE;

  public static final int DEFAULT_MAX_FRAME_SIZE;

  public static final int SMALLEST_MAX_CONCURRENT_STREAMS;

  static final int DEFAULT_MAX_RESERVED_STREAMS;

  static final int DEFAULT_MIN_ALLOCATION_CHUNK;

  static final int DEFAULT_INITIAL_HUFFMAN_DECODE_CAPACITY;

  public static long calculateMaxHeaderListSizeGoAway(long);
    Code:
       0: lload_0
       1: lload_0
       2: iconst_2
       3: lushr
       4: ladd
       5: lreturn

  public static boolean isOutboundStream(boolean, int);
    Code:
       0: iload_1
       1: iconst_1
       2: iand
       3: ifne          10
       6: iconst_1
       7: goto          11
      10: iconst_0
      11: istore_2
      12: iload_1
      13: ifle          25
      16: iload_0
      17: iload_2
      18: if_icmpne     25
      21: iconst_1
      22: goto          26
      25: iconst_0
      26: ireturn

  public static boolean isStreamIdValid(int);
    Code:
       0: iload_0
       1: iflt          8
       4: iconst_1
       5: goto          9
       8: iconst_0
       9: ireturn

  public static boolean isMaxFrameSizeValid(int);
    Code:
       0: iload_0
       1: sipush        16384
       4: if_icmplt     17
       7: iload_0
       8: ldc           #3                  // int 16777215
      10: if_icmpgt     17
      13: iconst_1
      14: goto          18
      17: iconst_0
      18: ireturn

  public static io.netty.buffer.ByteBuf connectionPrefaceBuf();
    Code:
       0: getstatic     #4                  // Field CONNECTION_PREFACE:Lio/netty/buffer/ByteBuf;
       3: invokevirtual #5                  // Method io/netty/buffer/ByteBuf.retainedDuplicate:()Lio/netty/buffer/ByteBuf;
       6: areturn

  public static io.netty.buffer.ByteBuf emptyPingBuf();
    Code:
       0: getstatic     #6                  // Field EMPTY_PING:Lio/netty/buffer/ByteBuf;
       3: invokevirtual #5                  // Method io/netty/buffer/ByteBuf.retainedDuplicate:()Lio/netty/buffer/ByteBuf;
       6: areturn

  public static io.netty.handler.codec.http2.Http2Exception getEmbeddedHttp2Exception(java.lang.Throwable);
    Code:
       0: aload_0
       1: ifnull        24
       4: aload_0
       5: instanceof    #7                  // class io/netty/handler/codec/http2/Http2Exception
       8: ifeq          16
      11: aload_0
      12: checkcast     #7                  // class io/netty/handler/codec/http2/Http2Exception
      15: areturn
      16: aload_0
      17: invokevirtual #8                  // Method java/lang/Throwable.getCause:()Ljava/lang/Throwable;
      20: astore_0
      21: goto          0
      24: aconst_null
      25: areturn

  public static io.netty.buffer.ByteBuf toByteBuf(io.netty.channel.ChannelHandlerContext, java.lang.Throwable);
    Code:
       0: aload_1
       1: ifnull        11
       4: aload_1
       5: invokevirtual #9                  // Method java/lang/Throwable.getMessage:()Ljava/lang/String;
       8: ifnonnull     15
      11: getstatic     #10                 // Field io/netty/buffer/Unpooled.EMPTY_BUFFER:Lio/netty/buffer/ByteBuf;
      14: areturn
      15: aload_0
      16: invokeinterface #11,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.alloc:()Lio/netty/buffer/ByteBufAllocator;
      21: aload_1
      22: invokevirtual #9                  // Method java/lang/Throwable.getMessage:()Ljava/lang/String;
      25: invokestatic  #12                 // Method io/netty/buffer/ByteBufUtil.writeUtf8:(Lio/netty/buffer/ByteBufAllocator;Ljava/lang/CharSequence;)Lio/netty/buffer/ByteBuf;
      28: areturn

  public static int readUnsignedInt(io.netty.buffer.ByteBuf);
    Code:
       0: aload_0
       1: invokevirtual #13                 // Method io/netty/buffer/ByteBuf.readInt:()I
       4: ldc           #14                 // int 2147483647
       6: iand
       7: ireturn

  public static void writeFrameHeader(io.netty.buffer.ByteBuf, int, byte, io.netty.handler.codec.http2.Http2Flags, int);
    Code:
       0: aload_0
       1: bipush        9
       3: iload_1
       4: iadd
       5: invokevirtual #15                 // Method io/netty/buffer/ByteBuf.ensureWritable:(I)Lio/netty/buffer/ByteBuf;
       8: pop
       9: aload_0
      10: iload_1
      11: iload_2
      12: aload_3
      13: iload         4
      15: invokestatic  #16                 // Method writeFrameHeaderInternal:(Lio/netty/buffer/ByteBuf;IBLio/netty/handler/codec/http2/Http2Flags;I)V
      18: return

  public static int streamableBytes(io.netty.handler.codec.http2.StreamByteDistributor$StreamState);
    Code:
       0: iconst_0
       1: aload_0
       2: invokeinterface #17,  1           // InterfaceMethod io/netty/handler/codec/http2/StreamByteDistributor$StreamState.pendingBytes:()I
       7: aload_0
       8: invokeinterface #18,  1           // InterfaceMethod io/netty/handler/codec/http2/StreamByteDistributor$StreamState.windowSize:()I
      13: invokestatic  #19                 // Method java/lang/Math.min:(II)I
      16: invokestatic  #20                 // Method java/lang/Math.max:(II)I
      19: ireturn

  public static void headerListSizeExceeded(int, long, boolean) throws io.netty.handler.codec.http2.Http2Exception;
    Code:
       0: iload_0
       1: getstatic     #21                 // Field io/netty/handler/codec/http2/Http2Error.PROTOCOL_ERROR:Lio/netty/handler/codec/http2/Http2Error;
       4: iload_3
       5: ldc           #22                 // String Header size exceeded max allowed size (%d)
       7: iconst_1
       8: anewarray     #23                 // class java/lang/Object
      11: dup
      12: iconst_0
      13: lload_1
      14: invokestatic  #24                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      17: aastore
      18: invokestatic  #25                 // Method io/netty/handler/codec/http2/Http2Exception.headerListSizeError:(ILio/netty/handler/codec/http2/Http2Error;ZLjava/lang/String;[Ljava/lang/Object;)Lio/netty/handler/codec/http2/Http2Exception;
      21: athrow

  public static void headerListSizeExceeded(long) throws io.netty.handler.codec.http2.Http2Exception;
    Code:
       0: getstatic     #21                 // Field io/netty/handler/codec/http2/Http2Error.PROTOCOL_ERROR:Lio/netty/handler/codec/http2/Http2Error;
       3: ldc           #22                 // String Header size exceeded max allowed size (%d)
       5: iconst_1
       6: anewarray     #23                 // class java/lang/Object
       9: dup
      10: iconst_0
      11: lload_0
      12: invokestatic  #24                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      15: aastore
      16: invokestatic  #26                 // Method io/netty/handler/codec/http2/Http2Exception.connectionError:(Lio/netty/handler/codec/http2/Http2Error;Ljava/lang/String;[Ljava/lang/Object;)Lio/netty/handler/codec/http2/Http2Exception;
      19: athrow

  static void writeFrameHeaderInternal(io.netty.buffer.ByteBuf, int, byte, io.netty.handler.codec.http2.Http2Flags, int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #27                 // Method io/netty/buffer/ByteBuf.writeMedium:(I)Lio/netty/buffer/ByteBuf;
       5: pop
       6: aload_0
       7: iload_2
       8: invokevirtual #28                 // Method io/netty/buffer/ByteBuf.writeByte:(I)Lio/netty/buffer/ByteBuf;
      11: pop
      12: aload_0
      13: aload_3
      14: invokevirtual #29                 // Method io/netty/handler/codec/http2/Http2Flags.value:()S
      17: invokevirtual #28                 // Method io/netty/buffer/ByteBuf.writeByte:(I)Lio/netty/buffer/ByteBuf;
      20: pop
      21: aload_0
      22: iload         4
      24: invokevirtual #30                 // Method io/netty/buffer/ByteBuf.writeInt:(I)Lio/netty/buffer/ByteBuf;
      27: pop
      28: return

  public static void verifyPadding(int);
    Code:
       0: iload_0
       1: iflt          11
       4: iload_0
       5: sipush        256
       8: if_icmple     44
      11: new           #31                 // class java/lang/IllegalArgumentException
      14: dup
      15: ldc           #32                 // String Invalid padding \'%d\'. Padding must be between 0 and %d (inclusive).
      17: iconst_2
      18: anewarray     #23                 // class java/lang/Object
      21: dup
      22: iconst_0
      23: iload_0
      24: invokestatic  #33                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      27: aastore
      28: dup
      29: iconst_1
      30: sipush        256
      33: invokestatic  #33                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      36: aastore
      37: invokestatic  #34                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      40: invokespecial #35                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      43: athrow
      44: return

  private io.netty.handler.codec.http2.Http2CodecUtil();
    Code:
       0: aload_0
       1: invokespecial #36                 // Method java/lang/Object."<init>":()V
       4: return

  static {};
    Code:
       0: new           #37                 // class io/netty/util/AsciiString
       3: dup
       4: ldc           #38                 // String HTTP2-Settings
       6: invokespecial #39                 // Method io/netty/util/AsciiString."<init>":(Ljava/lang/CharSequence;)V
       9: putstatic     #40                 // Field HTTP_UPGRADE_SETTINGS_HEADER:Ljava/lang/CharSequence;
      12: ldc           #41                 // String h2c
      14: putstatic     #42                 // Field HTTP_UPGRADE_PROTOCOL_NAME:Ljava/lang/CharSequence;
      17: ldc           #44                 // String h2
      19: putstatic     #45                 // Field TLS_UPGRADE_PROTOCOL_NAME:Ljava/lang/CharSequence;
      22: bipush        24
      24: invokestatic  #46                 // Method io/netty/buffer/Unpooled.directBuffer:(I)Lio/netty/buffer/ByteBuf;
      27: ldc           #47                 // String PRI * HTTP/2.0\r\n\r\nSM\r\n\r\n
      29: getstatic     #48                 // Field io/netty/util/CharsetUtil.UTF_8:Ljava/nio/charset/Charset;
      32: invokevirtual #49                 // Method java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B
      35: invokevirtual #50                 // Method io/netty/buffer/ByteBuf.writeBytes:([B)Lio/netty/buffer/ByteBuf;
      38: invokestatic  #51                 // Method io/netty/buffer/Unpooled.unreleasableBuffer:(Lio/netty/buffer/ByteBuf;)Lio/netty/buffer/ByteBuf;
      41: invokevirtual #52                 // Method io/netty/buffer/ByteBuf.asReadOnly:()Lio/netty/buffer/ByteBuf;
      44: putstatic     #4                  // Field CONNECTION_PREFACE:Lio/netty/buffer/ByteBuf;
      47: bipush        8
      49: invokestatic  #46                 // Method io/netty/buffer/Unpooled.directBuffer:(I)Lio/netty/buffer/ByteBuf;
      52: bipush        8
      54: invokevirtual #53                 // Method io/netty/buffer/ByteBuf.writeZero:(I)Lio/netty/buffer/ByteBuf;
      57: invokestatic  #51                 // Method io/netty/buffer/Unpooled.unreleasableBuffer:(Lio/netty/buffer/ByteBuf;)Lio/netty/buffer/ByteBuf;
      60: invokevirtual #52                 // Method io/netty/buffer/ByteBuf.asReadOnly:()Lio/netty/buffer/ByteBuf;
      63: putstatic     #6                  // Field EMPTY_PING:Lio/netty/buffer/ByteBuf;
      66: return
}
