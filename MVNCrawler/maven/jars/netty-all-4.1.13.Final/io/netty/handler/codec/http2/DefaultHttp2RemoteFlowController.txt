Compiled from "DefaultHttp2RemoteFlowController.java"
public class io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController implements io.netty.handler.codec.http2.Http2RemoteFlowController {
  private static final io.netty.util.internal.logging.InternalLogger logger;

  private static final int MIN_WRITABLE_CHUNK;

  private final io.netty.handler.codec.http2.Http2Connection connection;

  private final io.netty.handler.codec.http2.Http2Connection$PropertyKey stateKey;

  private final io.netty.handler.codec.http2.StreamByteDistributor streamByteDistributor;

  private final io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState connectionState;

  private int initialWindowSize;

  private io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$WritabilityMonitor monitor;

  private io.netty.channel.ChannelHandlerContext ctx;

  static final boolean $assertionsDisabled;

  public io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController(io.netty.handler.codec.http2.Http2Connection);
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: checkcast     #15                 // class io/netty/handler/codec/http2/Http2RemoteFlowController$Listener
       6: invokespecial #16                 // Method "<init>":(Lio/netty/handler/codec/http2/Http2Connection;Lio/netty/handler/codec/http2/Http2RemoteFlowController$Listener;)V
       9: return

  public io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController(io.netty.handler.codec.http2.Http2Connection, io.netty.handler.codec.http2.StreamByteDistributor);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aconst_null
       4: invokespecial #17                 // Method "<init>":(Lio/netty/handler/codec/http2/Http2Connection;Lio/netty/handler/codec/http2/StreamByteDistributor;Lio/netty/handler/codec/http2/Http2RemoteFlowController$Listener;)V
       7: return

  public io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController(io.netty.handler.codec.http2.Http2Connection, io.netty.handler.codec.http2.Http2RemoteFlowController$Listener);
    Code:
       0: aload_0
       1: aload_1
       2: new           #18                 // class io/netty/handler/codec/http2/WeightedFairQueueByteDistributor
       5: dup
       6: aload_1
       7: invokespecial #19                 // Method io/netty/handler/codec/http2/WeightedFairQueueByteDistributor."<init>":(Lio/netty/handler/codec/http2/Http2Connection;)V
      10: aload_2
      11: invokespecial #17                 // Method "<init>":(Lio/netty/handler/codec/http2/Http2Connection;Lio/netty/handler/codec/http2/StreamByteDistributor;Lio/netty/handler/codec/http2/Http2RemoteFlowController$Listener;)V
      14: return

  public io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController(io.netty.handler.codec.http2.Http2Connection, io.netty.handler.codec.http2.StreamByteDistributor, io.netty.handler.codec.http2.Http2RemoteFlowController$Listener);
    Code:
       0: aload_0
       1: invokespecial #20                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: ldc           #21                 // int 65535
       7: putfield      #12                 // Field initialWindowSize:I
      10: aload_0
      11: aload_1
      12: ldc           #22                 // String connection
      14: invokestatic  #23                 // Method io/netty/util/internal/ObjectUtil.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      17: checkcast     #24                 // class io/netty/handler/codec/http2/Http2Connection
      20: putfield      #4                  // Field connection:Lio/netty/handler/codec/http2/Http2Connection;
      23: aload_0
      24: aload_2
      25: ldc           #25                 // String streamWriteDistributor
      27: invokestatic  #23                 // Method io/netty/util/internal/ObjectUtil.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      30: checkcast     #26                 // class io/netty/handler/codec/http2/StreamByteDistributor
      33: putfield      #9                  // Field streamByteDistributor:Lio/netty/handler/codec/http2/StreamByteDistributor;
      36: aload_0
      37: aload_1
      38: invokeinterface #27,  1           // InterfaceMethod io/netty/handler/codec/http2/Http2Connection.newKey:()Lio/netty/handler/codec/http2/Http2Connection$PropertyKey;
      43: putfield      #14                 // Field stateKey:Lio/netty/handler/codec/http2/Http2Connection$PropertyKey;
      46: aload_0
      47: new           #28                 // class io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController$FlowState
      50: dup
      51: aload_0
      52: aload_1
      53: invokeinterface #29,  1           // InterfaceMethod io/netty/handler/codec/http2/Http2Connection.connectionStream:()Lio/netty/handler/codec/http2/Http2Stream;
      58: invokespecial #30                 // Method io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController$FlowState."<init>":(Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController;Lio/netty/handler/codec/http2/Http2Stream;)V
      61: putfield      #7                  // Field connectionState:Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController$FlowState;
      64: aload_1
      65: invokeinterface #29,  1           // InterfaceMethod io/netty/handler/codec/http2/Http2Connection.connectionStream:()Lio/netty/handler/codec/http2/Http2Stream;
      70: aload_0
      71: getfield      #14                 // Field stateKey:Lio/netty/handler/codec/http2/Http2Connection$PropertyKey;
      74: aload_0
      75: getfield      #7                  // Field connectionState:Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController$FlowState;
      78: invokeinterface #31,  3           // InterfaceMethod io/netty/handler/codec/http2/Http2Stream.setProperty:(Lio/netty/handler/codec/http2/Http2Connection$PropertyKey;Ljava/lang/Object;)Ljava/lang/Object;
      83: pop
      84: aload_0
      85: aload_3
      86: invokevirtual #32                 // Method listener:(Lio/netty/handler/codec/http2/Http2RemoteFlowController$Listener;)V
      89: aload_0
      90: getfield      #11                 // Field monitor:Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController$WritabilityMonitor;
      93: aload_0
      94: getfield      #7                  // Field connectionState:Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController$FlowState;
      97: aload_0
      98: getfield      #12                 // Field initialWindowSize:I
     101: invokevirtual #33                 // Method io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController$WritabilityMonitor.windowSize:(Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController$FlowState;I)V
     104: aload_1
     105: new           #34                 // class io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController$1
     108: dup
     109: aload_0
     110: invokespecial #35                 // Method io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController$1."<init>":(Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController;)V
     113: invokeinterface #36,  2           // InterfaceMethod io/netty/handler/codec/http2/Http2Connection.addListener:(Lio/netty/handler/codec/http2/Http2Connection$Listener;)V
     118: return

  public void channelHandlerContext(io.netty.channel.ChannelHandlerContext) throws io.netty.handler.codec.http2.Http2Exception;
    Code:
       0: aload_0
       1: aload_1
       2: ldc           #37                 // String ctx
       4: invokestatic  #23                 // Method io/netty/util/internal/ObjectUtil.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       7: checkcast     #38                 // class io/netty/channel/ChannelHandlerContext
      10: putfield      #10                 // Field ctx:Lio/netty/channel/ChannelHandlerContext;
      13: aload_0
      14: invokevirtual #39                 // Method channelWritabilityChanged:()V
      17: aload_0
      18: invokespecial #3                  // Method isChannelWritable:()Z
      21: ifeq          28
      24: aload_0
      25: invokevirtual #40                 // Method writePendingBytes:()V
      28: return

  public io.netty.channel.ChannelHandlerContext channelHandlerContext();
    Code:
       0: aload_0
       1: getfield      #10                 // Field ctx:Lio/netty/channel/ChannelHandlerContext;
       4: areturn

  public void initialWindowSize(int) throws io.netty.handler.codec.http2.Http2Exception;
    Code:
       0: getstatic     #41                 // Field $assertionsDisabled:Z
       3: ifne          38
       6: aload_0
       7: getfield      #10                 // Field ctx:Lio/netty/channel/ChannelHandlerContext;
      10: ifnull        38
      13: aload_0
      14: getfield      #10                 // Field ctx:Lio/netty/channel/ChannelHandlerContext;
      17: invokeinterface #42,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.executor:()Lio/netty/util/concurrent/EventExecutor;
      22: invokeinterface #43,  1           // InterfaceMethod io/netty/util/concurrent/EventExecutor.inEventLoop:()Z
      27: ifne          38
      30: new           #44                 // class java/lang/AssertionError
      33: dup
      34: invokespecial #45                 // Method java/lang/AssertionError."<init>":()V
      37: athrow
      38: aload_0
      39: getfield      #11                 // Field monitor:Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController$WritabilityMonitor;
      42: iload_1
      43: invokevirtual #46                 // Method io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController$WritabilityMonitor.initialWindowSize:(I)V
      46: return

  public int initialWindowSize();
    Code:
       0: aload_0
       1: getfield      #12                 // Field initialWindowSize:I
       4: ireturn

  public int windowSize(io.netty.handler.codec.http2.Http2Stream);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #13                 // Method state:(Lio/netty/handler/codec/http2/Http2Stream;)Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController$FlowState;
       5: invokevirtual #47                 // Method io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController$FlowState.windowSize:()I
       8: ireturn

  public boolean isWritable(io.netty.handler.codec.http2.Http2Stream);
    Code:
       0: aload_0
       1: getfield      #11                 // Field monitor:Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController$WritabilityMonitor;
       4: aload_0
       5: aload_1
       6: invokespecial #13                 // Method state:(Lio/netty/handler/codec/http2/Http2Stream;)Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController$FlowState;
       9: invokevirtual #48                 // Method io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController$WritabilityMonitor.isWritable:(Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController$FlowState;)Z
      12: ireturn

  public void channelWritabilityChanged() throws io.netty.handler.codec.http2.Http2Exception;
    Code:
       0: aload_0
       1: getfield      #11                 // Field monitor:Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController$WritabilityMonitor;
       4: invokevirtual #49                 // Method io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController$WritabilityMonitor.channelWritabilityChange:()V
       7: return

  public void updateDependencyTree(int, int, short, boolean);
    Code:
       0: getstatic     #41                 // Field $assertionsDisabled:Z
       3: ifne          28
       6: iload_3
       7: iconst_1
       8: if_icmplt     18
      11: iload_3
      12: sipush        256
      15: if_icmple     28
      18: new           #44                 // class java/lang/AssertionError
      21: dup
      22: ldc           #50                 // String Invalid weight
      24: invokespecial #51                 // Method java/lang/AssertionError."<init>":(Ljava/lang/Object;)V
      27: athrow
      28: getstatic     #41                 // Field $assertionsDisabled:Z
      31: ifne          49
      34: iload_1
      35: iload_2
      36: if_icmpne     49
      39: new           #44                 // class java/lang/AssertionError
      42: dup
      43: ldc           #52                 // String A stream cannot depend on itself
      45: invokespecial #51                 // Method java/lang/AssertionError."<init>":(Ljava/lang/Object;)V
      48: athrow
      49: getstatic     #41                 // Field $assertionsDisabled:Z
      52: ifne          73
      55: iload_1
      56: ifle          63
      59: iload_2
      60: ifge          73
      63: new           #44                 // class java/lang/AssertionError
      66: dup
      67: ldc           #53                 // String childStreamId must be > 0. parentStreamId must be >= 0.
      69: invokespecial #51                 // Method java/lang/AssertionError."<init>":(Ljava/lang/Object;)V
      72: athrow
      73: aload_0
      74: getfield      #9                  // Field streamByteDistributor:Lio/netty/handler/codec/http2/StreamByteDistributor;
      77: iload_1
      78: iload_2
      79: iload_3
      80: iload         4
      82: invokeinterface #54,  5           // InterfaceMethod io/netty/handler/codec/http2/StreamByteDistributor.updateDependencyTree:(IISZ)V
      87: return

  private boolean isChannelWritable();
    Code:
       0: aload_0
       1: getfield      #10                 // Field ctx:Lio/netty/channel/ChannelHandlerContext;
       4: ifnull        18
       7: aload_0
       8: invokespecial #5                  // Method isChannelWritable0:()Z
      11: ifeq          18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: ireturn

  private boolean isChannelWritable0();
    Code:
       0: aload_0
       1: getfield      #10                 // Field ctx:Lio/netty/channel/ChannelHandlerContext;
       4: invokeinterface #55,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.channel:()Lio/netty/channel/Channel;
       9: invokeinterface #56,  1           // InterfaceMethod io/netty/channel/Channel.isWritable:()Z
      14: ireturn

  public void listener(io.netty.handler.codec.http2.Http2RemoteFlowController$Listener);
    Code:
       0: aload_0
       1: aload_1
       2: ifnonnull     17
       5: new           #57                 // class io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController$WritabilityMonitor
       8: dup
       9: aload_0
      10: aconst_null
      11: invokespecial #58                 // Method io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController$WritabilityMonitor."<init>":(Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController;Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController$1;)V
      14: goto          26
      17: new           #59                 // class io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor
      20: dup
      21: aload_0
      22: aload_1
      23: invokespecial #60                 // Method io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor."<init>":(Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController;Lio/netty/handler/codec/http2/Http2RemoteFlowController$Listener;)V
      26: putfield      #11                 // Field monitor:Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController$WritabilityMonitor;
      29: return

  public void incrementWindowSize(io.netty.handler.codec.http2.Http2Stream, int) throws io.netty.handler.codec.http2.Http2Exception;
    Code:
       0: getstatic     #41                 // Field $assertionsDisabled:Z
       3: ifne          38
       6: aload_0
       7: getfield      #10                 // Field ctx:Lio/netty/channel/ChannelHandlerContext;
      10: ifnull        38
      13: aload_0
      14: getfield      #10                 // Field ctx:Lio/netty/channel/ChannelHandlerContext;
      17: invokeinterface #42,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.executor:()Lio/netty/util/concurrent/EventExecutor;
      22: invokeinterface #43,  1           // InterfaceMethod io/netty/util/concurrent/EventExecutor.inEventLoop:()Z
      27: ifne          38
      30: new           #44                 // class java/lang/AssertionError
      33: dup
      34: invokespecial #45                 // Method java/lang/AssertionError."<init>":()V
      37: athrow
      38: aload_0
      39: getfield      #11                 // Field monitor:Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController$WritabilityMonitor;
      42: aload_0
      43: aload_1
      44: invokespecial #13                 // Method state:(Lio/netty/handler/codec/http2/Http2Stream;)Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController$FlowState;
      47: iload_2
      48: invokevirtual #61                 // Method io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController$WritabilityMonitor.incrementWindowSize:(Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController$FlowState;I)V
      51: return

  public void addFlowControlled(io.netty.handler.codec.http2.Http2Stream, io.netty.handler.codec.http2.Http2RemoteFlowController$FlowControlled);
    Code:
       0: getstatic     #41                 // Field $assertionsDisabled:Z
       3: ifne          38
       6: aload_0
       7: getfield      #10                 // Field ctx:Lio/netty/channel/ChannelHandlerContext;
      10: ifnull        38
      13: aload_0
      14: getfield      #10                 // Field ctx:Lio/netty/channel/ChannelHandlerContext;
      17: invokeinterface #42,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.executor:()Lio/netty/util/concurrent/EventExecutor;
      22: invokeinterface #43,  1           // InterfaceMethod io/netty/util/concurrent/EventExecutor.inEventLoop:()Z
      27: ifne          38
      30: new           #44                 // class java/lang/AssertionError
      33: dup
      34: invokespecial #45                 // Method java/lang/AssertionError."<init>":()V
      37: athrow
      38: aload_2
      39: ldc           #62                 // String frame
      41: invokestatic  #23                 // Method io/netty/util/internal/ObjectUtil.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      44: pop
      45: aload_0
      46: getfield      #11                 // Field monitor:Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController$WritabilityMonitor;
      49: aload_0
      50: aload_1
      51: invokespecial #13                 // Method state:(Lio/netty/handler/codec/http2/Http2Stream;)Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController$FlowState;
      54: aload_2
      55: invokevirtual #63                 // Method io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController$WritabilityMonitor.enqueueFrame:(Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController$FlowState;Lio/netty/handler/codec/http2/Http2RemoteFlowController$FlowControlled;)V
      58: goto          73
      61: astore_3
      62: aload_2
      63: aload_0
      64: getfield      #10                 // Field ctx:Lio/netty/channel/ChannelHandlerContext;
      67: aload_3
      68: invokeinterface #65,  3           // InterfaceMethod io/netty/handler/codec/http2/Http2RemoteFlowController$FlowControlled.error:(Lio/netty/channel/ChannelHandlerContext;Ljava/lang/Throwable;)V
      73: return
    Exception table:
       from    to  target type
          45    58    61   Class java/lang/Throwable

  public boolean hasFlowControlled(io.netty.handler.codec.http2.Http2Stream);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #13                 // Method state:(Lio/netty/handler/codec/http2/Http2Stream;)Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController$FlowState;
       5: invokevirtual #66                 // Method io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController$FlowState.hasFrame:()Z
       8: ireturn

  private io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState state(io.netty.handler.codec.http2.Http2Stream);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #14                 // Field stateKey:Lio/netty/handler/codec/http2/Http2Connection$PropertyKey;
       5: invokeinterface #67,  2           // InterfaceMethod io/netty/handler/codec/http2/Http2Stream.getProperty:(Lio/netty/handler/codec/http2/Http2Connection$PropertyKey;)Ljava/lang/Object;
      10: checkcast     #28                 // class io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController$FlowState
      13: areturn

  private int connectionWindowSize();
    Code:
       0: aload_0
       1: getfield      #7                  // Field connectionState:Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController$FlowState;
       4: invokevirtual #47                 // Method io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController$FlowState.windowSize:()I
       7: ireturn

  private int minUsableChannelBytes();
    Code:
       0: aload_0
       1: getfield      #10                 // Field ctx:Lio/netty/channel/ChannelHandlerContext;
       4: invokeinterface #55,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.channel:()Lio/netty/channel/Channel;
       9: invokeinterface #68,  1           // InterfaceMethod io/netty/channel/Channel.config:()Lio/netty/channel/ChannelConfig;
      14: invokeinterface #69,  1           // InterfaceMethod io/netty/channel/ChannelConfig.getWriteBufferLowWaterMark:()I
      19: ldc           #71                 // int 32768
      21: invokestatic  #72                 // Method java/lang/Math.max:(II)I
      24: ireturn

  private int maxUsableChannelBytes();
    Code:
       0: ldc2_w        #74                 // long 2147483647l
       3: aload_0
       4: getfield      #10                 // Field ctx:Lio/netty/channel/ChannelHandlerContext;
       7: invokeinterface #55,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.channel:()Lio/netty/channel/Channel;
      12: invokeinterface #76,  1           // InterfaceMethod io/netty/channel/Channel.bytesBeforeUnwritable:()J
      17: invokestatic  #77                 // Method java/lang/Math.min:(JJ)J
      20: l2i
      21: istore_1
      22: iload_1
      23: ifle          37
      26: iload_1
      27: aload_0
      28: invokespecial #78                 // Method minUsableChannelBytes:()I
      31: invokestatic  #72                 // Method java/lang/Math.max:(II)I
      34: goto          38
      37: iconst_0
      38: istore_2
      39: aload_0
      40: getfield      #7                  // Field connectionState:Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController$FlowState;
      43: invokevirtual #47                 // Method io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController$FlowState.windowSize:()I
      46: iload_2
      47: invokestatic  #79                 // Method java/lang/Math.min:(II)I
      50: ireturn

  private int writableBytes();
    Code:
       0: aload_0
       1: invokespecial #8                  // Method connectionWindowSize:()I
       4: aload_0
       5: invokespecial #80                 // Method maxUsableChannelBytes:()I
       8: invokestatic  #79                 // Method java/lang/Math.min:(II)I
      11: ireturn

  public void writePendingBytes() throws io.netty.handler.codec.http2.Http2Exception;
    Code:
       0: aload_0
       1: getfield      #11                 // Field monitor:Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController$WritabilityMonitor;
       4: invokevirtual #81                 // Method io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController$WritabilityMonitor.writePendingBytes:()V
       7: return

  static io.netty.handler.codec.http2.Http2Connection$PropertyKey access$000(io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController);
    Code:
       0: aload_0
       1: getfield      #14                 // Field stateKey:Lio/netty/handler/codec/http2/Http2Connection$PropertyKey;
       4: areturn

  static io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState access$100(io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController, io.netty.handler.codec.http2.Http2Stream);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #13                 // Method state:(Lio/netty/handler/codec/http2/Http2Stream;)Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController$FlowState;
       5: areturn

  static int access$200(io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController);
    Code:
       0: aload_0
       1: getfield      #12                 // Field initialWindowSize:I
       4: ireturn

  static io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$WritabilityMonitor access$300(io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController);
    Code:
       0: aload_0
       1: getfield      #11                 // Field monitor:Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController$WritabilityMonitor;
       4: areturn

  static io.netty.channel.ChannelHandlerContext access$500(io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController);
    Code:
       0: aload_0
       1: getfield      #10                 // Field ctx:Lio/netty/channel/ChannelHandlerContext;
       4: areturn

  static io.netty.handler.codec.http2.StreamByteDistributor access$600(io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController);
    Code:
       0: aload_0
       1: getfield      #9                  // Field streamByteDistributor:Lio/netty/handler/codec/http2/StreamByteDistributor;
       4: areturn

  static int access$700(io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController);
    Code:
       0: aload_0
       1: invokespecial #8                  // Method connectionWindowSize:()I
       4: ireturn

  static io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState access$800(io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController);
    Code:
       0: aload_0
       1: getfield      #7                  // Field connectionState:Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController$FlowState;
       4: areturn

  static int access$900(io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController);
    Code:
       0: aload_0
       1: invokespecial #6                  // Method writableBytes:()I
       4: ireturn

  static boolean access$1000(io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method isChannelWritable0:()Z
       4: ireturn

  static int access$202(io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController, int);
    Code:
       0: aload_0
       1: iload_1
       2: dup_x1
       3: putfield      #12                 // Field initialWindowSize:I
       6: ireturn

  static io.netty.handler.codec.http2.Http2Connection access$1100(io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController);
    Code:
       0: aload_0
       1: getfield      #4                  // Field connection:Lio/netty/handler/codec/http2/Http2Connection;
       4: areturn

  static boolean access$1200(io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method isChannelWritable:()Z
       4: ireturn

  static io.netty.util.internal.logging.InternalLogger access$1500();
    Code:
       0: getstatic     #2                  // Field logger:Lio/netty/util/internal/logging/InternalLogger;
       3: areturn

  static {};
    Code:
       0: ldc           #70                 // class io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController
       2: invokevirtual #82                 // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #41                 // Field $assertionsDisabled:Z
      16: ldc           #70                 // class io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController
      18: invokestatic  #83                 // Method io/netty/util/internal/logging/InternalLoggerFactory.getInstance:(Ljava/lang/Class;)Lio/netty/util/internal/logging/InternalLogger;
      21: putstatic     #2                  // Field logger:Lio/netty/util/internal/logging/InternalLogger;
      24: return
}
