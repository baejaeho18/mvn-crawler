Compiled from "AbstractChannelHandlerContext.java"
abstract class io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask implements java.lang.Runnable {
  private static final boolean ESTIMATE_TASK_SIZE_ON_SUBMIT;

  private static final int WRITE_TASK_OVERHEAD;

  private final io.netty.util.Recycler$Handle<io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask> handle;

  private io.netty.channel.AbstractChannelHandlerContext ctx;

  private java.lang.Object msg;

  private io.netty.channel.ChannelPromise promise;

  private int size;

  private io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask(io.netty.util.Recycler$Handle<? extends io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask>);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #3                  // Field handle:Lio/netty/util/Recycler$Handle;
       9: return

  protected static void init(io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask, io.netty.channel.AbstractChannelHandlerContext, java.lang.Object, io.netty.channel.ChannelPromise);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #4                  // Field ctx:Lio/netty/channel/AbstractChannelHandlerContext;
       5: aload_0
       6: aload_2
       7: putfield      #5                  // Field msg:Ljava/lang/Object;
      10: aload_0
      11: aload_3
      12: putfield      #6                  // Field promise:Lio/netty/channel/ChannelPromise;
      15: getstatic     #7                  // Field ESTIMATE_TASK_SIZE_ON_SUBMIT:Z
      18: ifeq          84
      21: aload_1
      22: invokevirtual #8                  // Method io/netty/channel/AbstractChannelHandlerContext.channel:()Lio/netty/channel/Channel;
      25: invokeinterface #9,  1            // InterfaceMethod io/netty/channel/Channel.unsafe:()Lio/netty/channel/Channel$Unsafe;
      30: invokeinterface #10,  1           // InterfaceMethod io/netty/channel/Channel$Unsafe.outboundBuffer:()Lio/netty/channel/ChannelOutboundBuffer;
      35: astore        4
      37: aload         4
      39: ifnull        76
      42: aload_0
      43: aload_1
      44: invokestatic  #11                 // Method io/netty/channel/AbstractChannelHandlerContext.access$1800:(Lio/netty/channel/AbstractChannelHandlerContext;)Lio/netty/channel/DefaultChannelPipeline;
      47: invokevirtual #12                 // Method io/netty/channel/DefaultChannelPipeline.estimatorHandle:()Lio/netty/channel/MessageSizeEstimator$Handle;
      50: aload_2
      51: invokeinterface #13,  2           // InterfaceMethod io/netty/channel/MessageSizeEstimator$Handle.size:(Ljava/lang/Object;)I
      56: getstatic     #14                 // Field WRITE_TASK_OVERHEAD:I
      59: iadd
      60: putfield      #15                 // Field size:I
      63: aload         4
      65: aload_0
      66: getfield      #15                 // Field size:I
      69: i2l
      70: invokevirtual #16                 // Method io/netty/channel/ChannelOutboundBuffer.incrementPendingOutboundBytes:(J)V
      73: goto          81
      76: aload_0
      77: iconst_0
      78: putfield      #15                 // Field size:I
      81: goto          89
      84: aload_0
      85: iconst_0
      86: putfield      #15                 // Field size:I
      89: return

  public final void run();
    Code:
       0: aload_0
       1: getfield      #4                  // Field ctx:Lio/netty/channel/AbstractChannelHandlerContext;
       4: invokevirtual #8                  // Method io/netty/channel/AbstractChannelHandlerContext.channel:()Lio/netty/channel/Channel;
       7: invokeinterface #9,  1            // InterfaceMethod io/netty/channel/Channel.unsafe:()Lio/netty/channel/Channel$Unsafe;
      12: invokeinterface #10,  1           // InterfaceMethod io/netty/channel/Channel$Unsafe.outboundBuffer:()Lio/netty/channel/ChannelOutboundBuffer;
      17: astore_1
      18: getstatic     #7                  // Field ESTIMATE_TASK_SIZE_ON_SUBMIT:Z
      21: ifeq          37
      24: aload_1
      25: ifnull        37
      28: aload_1
      29: aload_0
      30: getfield      #15                 // Field size:I
      33: i2l
      34: invokevirtual #17                 // Method io/netty/channel/ChannelOutboundBuffer.decrementPendingOutboundBytes:(J)V
      37: aload_0
      38: aload_0
      39: getfield      #4                  // Field ctx:Lio/netty/channel/AbstractChannelHandlerContext;
      42: aload_0
      43: getfield      #5                  // Field msg:Ljava/lang/Object;
      46: aload_0
      47: getfield      #6                  // Field promise:Lio/netty/channel/ChannelPromise;
      50: invokevirtual #18                 // Method write:(Lio/netty/channel/AbstractChannelHandlerContext;Ljava/lang/Object;Lio/netty/channel/ChannelPromise;)V
      53: aload_0
      54: aconst_null
      55: putfield      #4                  // Field ctx:Lio/netty/channel/AbstractChannelHandlerContext;
      58: aload_0
      59: aconst_null
      60: putfield      #5                  // Field msg:Ljava/lang/Object;
      63: aload_0
      64: aconst_null
      65: putfield      #6                  // Field promise:Lio/netty/channel/ChannelPromise;
      68: aload_0
      69: getfield      #3                  // Field handle:Lio/netty/util/Recycler$Handle;
      72: aload_0
      73: invokeinterface #19,  2           // InterfaceMethod io/netty/util/Recycler$Handle.recycle:(Ljava/lang/Object;)V
      78: goto          109
      81: astore_2
      82: aload_0
      83: aconst_null
      84: putfield      #4                  // Field ctx:Lio/netty/channel/AbstractChannelHandlerContext;
      87: aload_0
      88: aconst_null
      89: putfield      #5                  // Field msg:Ljava/lang/Object;
      92: aload_0
      93: aconst_null
      94: putfield      #6                  // Field promise:Lio/netty/channel/ChannelPromise;
      97: aload_0
      98: getfield      #3                  // Field handle:Lio/netty/util/Recycler$Handle;
     101: aload_0
     102: invokeinterface #19,  2           // InterfaceMethod io/netty/util/Recycler$Handle.recycle:(Ljava/lang/Object;)V
     107: aload_2
     108: athrow
     109: return
    Exception table:
       from    to  target type
           0    53    81   any

  protected void write(io.netty.channel.AbstractChannelHandlerContext, java.lang.Object, io.netty.channel.ChannelPromise);
    Code:
       0: aload_1
       1: aload_2
       2: aload_3
       3: invokestatic  #20                 // Method io/netty/channel/AbstractChannelHandlerContext.access$1900:(Lio/netty/channel/AbstractChannelHandlerContext;Ljava/lang/Object;Lio/netty/channel/ChannelPromise;)V
       6: return

  io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask(io.netty.util.Recycler$Handle, io.netty.channel.AbstractChannelHandlerContext$1);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method "<init>":(Lio/netty/util/Recycler$Handle;)V
       5: return

  static {};
    Code:
       0: ldc           #21                 // String io.netty.transport.estimateSizeOnSubmit
       2: iconst_1
       3: invokestatic  #22                 // Method io/netty/util/internal/SystemPropertyUtil.getBoolean:(Ljava/lang/String;Z)Z
       6: putstatic     #7                  // Field ESTIMATE_TASK_SIZE_ON_SUBMIT:Z
       9: ldc           #23                 // String io.netty.transport.writeTaskSizeOverhead
      11: bipush        48
      13: invokestatic  #24                 // Method io/netty/util/internal/SystemPropertyUtil.getInt:(Ljava/lang/String;I)I
      16: putstatic     #14                 // Field WRITE_TASK_OVERHEAD:I
      19: return
}
