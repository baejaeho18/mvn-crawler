Compiled from "AbstractNioChannel.java"
public abstract class io.netty.channel.nio.AbstractNioChannel extends io.netty.channel.AbstractChannel {
  private static final io.netty.util.internal.logging.InternalLogger logger;

  private static final java.nio.channels.ClosedChannelException DO_CLOSE_CLOSED_CHANNEL_EXCEPTION;

  private final java.nio.channels.SelectableChannel ch;

  protected final int readInterestOp;

  volatile java.nio.channels.SelectionKey selectionKey;

  boolean readPending;

  private final java.lang.Runnable clearReadPendingRunnable;

  private io.netty.channel.ChannelPromise connectPromise;

  private java.util.concurrent.ScheduledFuture<?> connectTimeoutFuture;

  private java.net.SocketAddress requestedRemoteAddress;

  static final boolean $assertionsDisabled;

  protected io.netty.channel.nio.AbstractNioChannel(io.netty.channel.Channel, java.nio.channels.SelectableChannel, int);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #6                  // Method io/netty/channel/AbstractChannel."<init>":(Lio/netty/channel/Channel;)V
       5: aload_0
       6: new           #7                  // class io/netty/channel/nio/AbstractNioChannel$1
       9: dup
      10: aload_0
      11: invokespecial #8                  // Method io/netty/channel/nio/AbstractNioChannel$1."<init>":(Lio/netty/channel/nio/AbstractNioChannel;)V
      14: putfield      #9                  // Field clearReadPendingRunnable:Ljava/lang/Runnable;
      17: aload_0
      18: aload_2
      19: putfield      #10                 // Field ch:Ljava/nio/channels/SelectableChannel;
      22: aload_0
      23: iload_3
      24: putfield      #11                 // Field readInterestOp:I
      27: aload_2
      28: iconst_0
      29: invokevirtual #12                 // Method java/nio/channels/SelectableChannel.configureBlocking:(Z)Ljava/nio/channels/SelectableChannel;
      32: pop
      33: goto          82
      36: astore        4
      38: aload_2
      39: invokevirtual #14                 // Method java/nio/channels/SelectableChannel.close:()V
      42: goto          70
      45: astore        5
      47: getstatic     #15                 // Field logger:Lio/netty/util/internal/logging/InternalLogger;
      50: invokeinterface #16,  1           // InterfaceMethod io/netty/util/internal/logging/InternalLogger.isWarnEnabled:()Z
      55: ifeq          70
      58: getstatic     #15                 // Field logger:Lio/netty/util/internal/logging/InternalLogger;
      61: ldc           #17                 // String Failed to close a partially initialized socket.
      63: aload         5
      65: invokeinterface #18,  3           // InterfaceMethod io/netty/util/internal/logging/InternalLogger.warn:(Ljava/lang/String;Ljava/lang/Throwable;)V
      70: new           #19                 // class io/netty/channel/ChannelException
      73: dup
      74: ldc           #20                 // String Failed to enter non-blocking mode.
      76: aload         4
      78: invokespecial #21                 // Method io/netty/channel/ChannelException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      81: athrow
      82: return
    Exception table:
       from    to  target type
          27    33    36   Class java/io/IOException
          38    42    45   Class java/io/IOException

  public boolean isOpen();
    Code:
       0: aload_0
       1: getfield      #10                 // Field ch:Ljava/nio/channels/SelectableChannel;
       4: invokevirtual #22                 // Method java/nio/channels/SelectableChannel.isOpen:()Z
       7: ireturn

  public io.netty.channel.nio.AbstractNioChannel$NioUnsafe unsafe();
    Code:
       0: aload_0
       1: invokespecial #23                 // Method io/netty/channel/AbstractChannel.unsafe:()Lio/netty/channel/Channel$Unsafe;
       4: checkcast     #24                 // class io/netty/channel/nio/AbstractNioChannel$NioUnsafe
       7: areturn

  protected java.nio.channels.SelectableChannel javaChannel();
    Code:
       0: aload_0
       1: getfield      #10                 // Field ch:Ljava/nio/channels/SelectableChannel;
       4: areturn

  public io.netty.channel.nio.NioEventLoop eventLoop();
    Code:
       0: aload_0
       1: invokespecial #25                 // Method io/netty/channel/AbstractChannel.eventLoop:()Lio/netty/channel/EventLoop;
       4: checkcast     #26                 // class io/netty/channel/nio/NioEventLoop
       7: areturn

  protected java.nio.channels.SelectionKey selectionKey();
    Code:
       0: getstatic     #27                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: getfield      #28                 // Field selectionKey:Ljava/nio/channels/SelectionKey;
      10: ifnonnull     21
      13: new           #29                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #30                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: getfield      #28                 // Field selectionKey:Ljava/nio/channels/SelectionKey;
      25: areturn

  protected boolean isReadPending();
    Code:
       0: aload_0
       1: getfield      #31                 // Field readPending:Z
       4: ireturn

  protected void setReadPending(boolean);
    Code:
       0: aload_0
       1: invokevirtual #32                 // Method isRegistered:()Z
       4: ifeq          47
       7: aload_0
       8: invokevirtual #33                 // Method eventLoop:()Lio/netty/channel/nio/NioEventLoop;
      11: astore_2
      12: aload_2
      13: invokeinterface #34,  1           // InterfaceMethod io/netty/channel/EventLoop.inEventLoop:()Z
      18: ifeq          29
      21: aload_0
      22: iload_1
      23: invokespecial #4                  // Method setReadPending0:(Z)V
      26: goto          44
      29: aload_2
      30: new           #35                 // class io/netty/channel/nio/AbstractNioChannel$2
      33: dup
      34: aload_0
      35: iload_1
      36: invokespecial #36                 // Method io/netty/channel/nio/AbstractNioChannel$2."<init>":(Lio/netty/channel/nio/AbstractNioChannel;Z)V
      39: invokeinterface #37,  2           // InterfaceMethod io/netty/channel/EventLoop.execute:(Ljava/lang/Runnable;)V
      44: goto          52
      47: aload_0
      48: iload_1
      49: putfield      #31                 // Field readPending:Z
      52: return

  protected final void clearReadPending();
    Code:
       0: aload_0
       1: invokevirtual #32                 // Method isRegistered:()Z
       4: ifeq          41
       7: aload_0
       8: invokevirtual #33                 // Method eventLoop:()Lio/netty/channel/nio/NioEventLoop;
      11: astore_1
      12: aload_1
      13: invokeinterface #34,  1           // InterfaceMethod io/netty/channel/EventLoop.inEventLoop:()Z
      18: ifeq          28
      21: aload_0
      22: invokespecial #5                  // Method clearReadPending0:()V
      25: goto          38
      28: aload_1
      29: aload_0
      30: getfield      #9                  // Field clearReadPendingRunnable:Ljava/lang/Runnable;
      33: invokeinterface #37,  2           // InterfaceMethod io/netty/channel/EventLoop.execute:(Ljava/lang/Runnable;)V
      38: goto          46
      41: aload_0
      42: iconst_0
      43: putfield      #31                 // Field readPending:Z
      46: return

  private void setReadPending0(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #31                 // Field readPending:Z
       5: iload_1
       6: ifne          19
       9: aload_0
      10: invokevirtual #38                 // Method unsafe:()Lio/netty/channel/nio/AbstractNioChannel$NioUnsafe;
      13: checkcast     #39                 // class io/netty/channel/nio/AbstractNioChannel$AbstractNioUnsafe
      16: invokevirtual #40                 // Method io/netty/channel/nio/AbstractNioChannel$AbstractNioUnsafe.removeReadOp:()V
      19: return

  private void clearReadPending0();
    Code:
       0: aload_0
       1: iconst_0
       2: putfield      #31                 // Field readPending:Z
       5: aload_0
       6: invokevirtual #38                 // Method unsafe:()Lio/netty/channel/nio/AbstractNioChannel$NioUnsafe;
       9: checkcast     #39                 // class io/netty/channel/nio/AbstractNioChannel$AbstractNioUnsafe
      12: invokevirtual #40                 // Method io/netty/channel/nio/AbstractNioChannel$AbstractNioUnsafe.removeReadOp:()V
      15: return

  protected boolean isCompatible(io.netty.channel.EventLoop);
    Code:
       0: aload_1
       1: instanceof    #26                 // class io/netty/channel/nio/NioEventLoop
       4: ireturn

  protected void doRegister() throws java.lang.Exception;
    Code:
       0: iconst_0
       1: istore_1
       2: aload_0
       3: aload_0
       4: invokevirtual #41                 // Method javaChannel:()Ljava/nio/channels/SelectableChannel;
       7: aload_0
       8: invokevirtual #33                 // Method eventLoop:()Lio/netty/channel/nio/NioEventLoop;
      11: invokevirtual #42                 // Method io/netty/channel/nio/NioEventLoop.unwrappedSelector:()Ljava/nio/channels/Selector;
      14: iconst_0
      15: aload_0
      16: invokevirtual #43                 // Method java/nio/channels/SelectableChannel.register:(Ljava/nio/channels/Selector;ILjava/lang/Object;)Ljava/nio/channels/SelectionKey;
      19: putfield      #28                 // Field selectionKey:Ljava/nio/channels/SelectionKey;
      22: return
      23: astore_2
      24: iload_1
      25: ifne          41
      28: aload_0
      29: invokevirtual #33                 // Method eventLoop:()Lio/netty/channel/nio/NioEventLoop;
      32: invokevirtual #45                 // Method io/netty/channel/nio/NioEventLoop.selectNow:()I
      35: pop
      36: iconst_1
      37: istore_1
      38: goto          43
      41: aload_2
      42: athrow
      43: goto          2
    Exception table:
       from    to  target type
           2    22    23   Class java/nio/channels/CancelledKeyException

  protected void doDeregister() throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokevirtual #33                 // Method eventLoop:()Lio/netty/channel/nio/NioEventLoop;
       4: aload_0
       5: invokevirtual #46                 // Method selectionKey:()Ljava/nio/channels/SelectionKey;
       8: invokevirtual #47                 // Method io/netty/channel/nio/NioEventLoop.cancel:(Ljava/nio/channels/SelectionKey;)V
      11: return

  protected void doBeginRead() throws java.lang.Exception;
    Code:
       0: aload_0
       1: getfield      #28                 // Field selectionKey:Ljava/nio/channels/SelectionKey;
       4: astore_1
       5: aload_1
       6: invokevirtual #48                 // Method java/nio/channels/SelectionKey.isValid:()Z
       9: ifne          13
      12: return
      13: aload_0
      14: iconst_1
      15: putfield      #31                 // Field readPending:Z
      18: aload_1
      19: invokevirtual #49                 // Method java/nio/channels/SelectionKey.interestOps:()I
      22: istore_2
      23: iload_2
      24: aload_0
      25: getfield      #11                 // Field readInterestOp:I
      28: iand
      29: ifne          43
      32: aload_1
      33: iload_2
      34: aload_0
      35: getfield      #11                 // Field readInterestOp:I
      38: ior
      39: invokevirtual #50                 // Method java/nio/channels/SelectionKey.interestOps:(I)Ljava/nio/channels/SelectionKey;
      42: pop
      43: return

  protected abstract boolean doConnect(java.net.SocketAddress, java.net.SocketAddress) throws java.lang.Exception;

  protected abstract void doFinishConnect() throws java.lang.Exception;

  protected final io.netty.buffer.ByteBuf newDirectBuffer(io.netty.buffer.ByteBuf);
    Code:
       0: aload_1
       1: invokevirtual #51                 // Method io/netty/buffer/ByteBuf.readableBytes:()I
       4: istore_2
       5: iload_2
       6: ifne          17
       9: aload_1
      10: invokestatic  #52                 // Method io/netty/util/ReferenceCountUtil.safeRelease:(Ljava/lang/Object;)V
      13: getstatic     #53                 // Field io/netty/buffer/Unpooled.EMPTY_BUFFER:Lio/netty/buffer/ByteBuf;
      16: areturn
      17: aload_0
      18: invokevirtual #54                 // Method alloc:()Lio/netty/buffer/ByteBufAllocator;
      21: astore_3
      22: aload_3
      23: invokeinterface #55,  1           // InterfaceMethod io/netty/buffer/ByteBufAllocator.isDirectBufferPooled:()Z
      28: ifeq          59
      31: aload_3
      32: iload_2
      33: invokeinterface #56,  2           // InterfaceMethod io/netty/buffer/ByteBufAllocator.directBuffer:(I)Lio/netty/buffer/ByteBuf;
      38: astore        4
      40: aload         4
      42: aload_1
      43: aload_1
      44: invokevirtual #57                 // Method io/netty/buffer/ByteBuf.readerIndex:()I
      47: iload_2
      48: invokevirtual #58                 // Method io/netty/buffer/ByteBuf.writeBytes:(Lio/netty/buffer/ByteBuf;II)Lio/netty/buffer/ByteBuf;
      51: pop
      52: aload_1
      53: invokestatic  #52                 // Method io/netty/util/ReferenceCountUtil.safeRelease:(Ljava/lang/Object;)V
      56: aload         4
      58: areturn
      59: invokestatic  #59                 // Method io/netty/buffer/ByteBufUtil.threadLocalDirectBuffer:()Lio/netty/buffer/ByteBuf;
      62: astore        4
      64: aload         4
      66: ifnull        88
      69: aload         4
      71: aload_1
      72: aload_1
      73: invokevirtual #57                 // Method io/netty/buffer/ByteBuf.readerIndex:()I
      76: iload_2
      77: invokevirtual #58                 // Method io/netty/buffer/ByteBuf.writeBytes:(Lio/netty/buffer/ByteBuf;II)Lio/netty/buffer/ByteBuf;
      80: pop
      81: aload_1
      82: invokestatic  #52                 // Method io/netty/util/ReferenceCountUtil.safeRelease:(Ljava/lang/Object;)V
      85: aload         4
      87: areturn
      88: aload_1
      89: areturn

  protected final io.netty.buffer.ByteBuf newDirectBuffer(io.netty.util.ReferenceCounted, io.netty.buffer.ByteBuf);
    Code:
       0: aload_2
       1: invokevirtual #51                 // Method io/netty/buffer/ByteBuf.readableBytes:()I
       4: istore_3
       5: iload_3
       6: ifne          17
       9: aload_1
      10: invokestatic  #52                 // Method io/netty/util/ReferenceCountUtil.safeRelease:(Ljava/lang/Object;)V
      13: getstatic     #53                 // Field io/netty/buffer/Unpooled.EMPTY_BUFFER:Lio/netty/buffer/ByteBuf;
      16: areturn
      17: aload_0
      18: invokevirtual #54                 // Method alloc:()Lio/netty/buffer/ByteBufAllocator;
      21: astore        4
      23: aload         4
      25: invokeinterface #55,  1           // InterfaceMethod io/netty/buffer/ByteBufAllocator.isDirectBufferPooled:()Z
      30: ifeq          62
      33: aload         4
      35: iload_3
      36: invokeinterface #56,  2           // InterfaceMethod io/netty/buffer/ByteBufAllocator.directBuffer:(I)Lio/netty/buffer/ByteBuf;
      41: astore        5
      43: aload         5
      45: aload_2
      46: aload_2
      47: invokevirtual #57                 // Method io/netty/buffer/ByteBuf.readerIndex:()I
      50: iload_3
      51: invokevirtual #58                 // Method io/netty/buffer/ByteBuf.writeBytes:(Lio/netty/buffer/ByteBuf;II)Lio/netty/buffer/ByteBuf;
      54: pop
      55: aload_1
      56: invokestatic  #52                 // Method io/netty/util/ReferenceCountUtil.safeRelease:(Ljava/lang/Object;)V
      59: aload         5
      61: areturn
      62: invokestatic  #59                 // Method io/netty/buffer/ByteBufUtil.threadLocalDirectBuffer:()Lio/netty/buffer/ByteBuf;
      65: astore        5
      67: aload         5
      69: ifnull        91
      72: aload         5
      74: aload_2
      75: aload_2
      76: invokevirtual #57                 // Method io/netty/buffer/ByteBuf.readerIndex:()I
      79: iload_3
      80: invokevirtual #58                 // Method io/netty/buffer/ByteBuf.writeBytes:(Lio/netty/buffer/ByteBuf;II)Lio/netty/buffer/ByteBuf;
      83: pop
      84: aload_1
      85: invokestatic  #52                 // Method io/netty/util/ReferenceCountUtil.safeRelease:(Ljava/lang/Object;)V
      88: aload         5
      90: areturn
      91: aload_1
      92: aload_2
      93: if_acmpeq     105
      96: aload_2
      97: invokevirtual #60                 // Method io/netty/buffer/ByteBuf.retain:()Lio/netty/buffer/ByteBuf;
     100: pop
     101: aload_1
     102: invokestatic  #52                 // Method io/netty/util/ReferenceCountUtil.safeRelease:(Ljava/lang/Object;)V
     105: aload_2
     106: areturn

  protected void doClose() throws java.lang.Exception;
    Code:
       0: aload_0
       1: getfield      #3                  // Field connectPromise:Lio/netty/channel/ChannelPromise;
       4: astore_1
       5: aload_1
       6: ifnull        24
       9: aload_1
      10: getstatic     #61                 // Field DO_CLOSE_CLOSED_CHANNEL_EXCEPTION:Ljava/nio/channels/ClosedChannelException;
      13: invokeinterface #62,  2           // InterfaceMethod io/netty/channel/ChannelPromise.tryFailure:(Ljava/lang/Throwable;)Z
      18: pop
      19: aload_0
      20: aconst_null
      21: putfield      #3                  // Field connectPromise:Lio/netty/channel/ChannelPromise;
      24: aload_0
      25: getfield      #1                  // Field connectTimeoutFuture:Ljava/util/concurrent/ScheduledFuture;
      28: astore_2
      29: aload_2
      30: ifnull        46
      33: aload_2
      34: iconst_0
      35: invokeinterface #63,  2           // InterfaceMethod java/util/concurrent/ScheduledFuture.cancel:(Z)Z
      40: pop
      41: aload_0
      42: aconst_null
      43: putfield      #1                  // Field connectTimeoutFuture:Ljava/util/concurrent/ScheduledFuture;
      46: return

  public io.netty.channel.Channel$Unsafe unsafe();
    Code:
       0: aload_0
       1: invokevirtual #38                 // Method unsafe:()Lio/netty/channel/nio/AbstractNioChannel$NioUnsafe;
       4: areturn

  public io.netty.channel.EventLoop eventLoop();
    Code:
       0: aload_0
       1: invokevirtual #33                 // Method eventLoop:()Lio/netty/channel/nio/NioEventLoop;
       4: areturn

  static void access$000(io.netty.channel.nio.AbstractNioChannel);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method clearReadPending0:()V
       4: return

  static void access$100(io.netty.channel.nio.AbstractNioChannel, boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #4                  // Method setReadPending0:(Z)V
       5: return

  static io.netty.channel.ChannelPromise access$200(io.netty.channel.nio.AbstractNioChannel);
    Code:
       0: aload_0
       1: getfield      #3                  // Field connectPromise:Lio/netty/channel/ChannelPromise;
       4: areturn

  static io.netty.channel.ChannelPromise access$202(io.netty.channel.nio.AbstractNioChannel, io.netty.channel.ChannelPromise);
    Code:
       0: aload_0
       1: aload_1
       2: dup_x1
       3: putfield      #3                  // Field connectPromise:Lio/netty/channel/ChannelPromise;
       6: areturn

  static java.net.SocketAddress access$302(io.netty.channel.nio.AbstractNioChannel, java.net.SocketAddress);
    Code:
       0: aload_0
       1: aload_1
       2: dup_x1
       3: putfield      #2                  // Field requestedRemoteAddress:Ljava/net/SocketAddress;
       6: areturn

  static java.util.concurrent.ScheduledFuture access$402(io.netty.channel.nio.AbstractNioChannel, java.util.concurrent.ScheduledFuture);
    Code:
       0: aload_0
       1: aload_1
       2: dup_x1
       3: putfield      #1                  // Field connectTimeoutFuture:Ljava/util/concurrent/ScheduledFuture;
       6: areturn

  static java.util.concurrent.ScheduledFuture access$400(io.netty.channel.nio.AbstractNioChannel);
    Code:
       0: aload_0
       1: getfield      #1                  // Field connectTimeoutFuture:Ljava/util/concurrent/ScheduledFuture;
       4: areturn

  static java.net.SocketAddress access$300(io.netty.channel.nio.AbstractNioChannel);
    Code:
       0: aload_0
       1: getfield      #2                  // Field requestedRemoteAddress:Ljava/net/SocketAddress;
       4: areturn

  static {};
    Code:
       0: ldc           #64                 // class io/netty/channel/nio/AbstractNioChannel
       2: invokevirtual #65                 // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #27                 // Field $assertionsDisabled:Z
      16: ldc           #64                 // class io/netty/channel/nio/AbstractNioChannel
      18: invokestatic  #66                 // Method io/netty/util/internal/logging/InternalLoggerFactory.getInstance:(Ljava/lang/Class;)Lio/netty/util/internal/logging/InternalLogger;
      21: putstatic     #15                 // Field logger:Lio/netty/util/internal/logging/InternalLogger;
      24: new           #67                 // class java/nio/channels/ClosedChannelException
      27: dup
      28: invokespecial #68                 // Method java/nio/channels/ClosedChannelException."<init>":()V
      31: ldc           #64                 // class io/netty/channel/nio/AbstractNioChannel
      33: ldc           #69                 // String doClose()
      35: invokestatic  #70                 // Method io/netty/util/internal/ThrowableUtil.unknownStackTrace:(Ljava/lang/Throwable;Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Throwable;
      38: checkcast     #67                 // class java/nio/channels/ClosedChannelException
      41: putstatic     #61                 // Field DO_CLOSE_CLOSED_CHANNEL_EXCEPTION:Ljava/nio/channels/ClosedChannelException;
      44: return
}
