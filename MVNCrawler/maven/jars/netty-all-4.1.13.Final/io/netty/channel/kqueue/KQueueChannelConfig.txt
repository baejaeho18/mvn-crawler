Compiled from "KQueueChannelConfig.java"
public class io.netty.channel.kqueue.KQueueChannelConfig extends io.netty.channel.DefaultChannelConfig {
  final io.netty.channel.kqueue.AbstractKQueueChannel channel;

  private volatile boolean transportProvidesGuess;

  io.netty.channel.kqueue.KQueueChannelConfig(io.netty.channel.kqueue.AbstractKQueueChannel);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method io/netty/channel/DefaultChannelConfig."<init>":(Lio/netty/channel/Channel;)V
       5: aload_0
       6: aload_1
       7: putfield      #2                  // Field channel:Lio/netty/channel/kqueue/AbstractKQueueChannel;
      10: return

  public java.util.Map<io.netty.channel.ChannelOption<?>, java.lang.Object> getOptions();
    Code:
       0: aload_0
       1: aload_0
       2: invokespecial #3                  // Method io/netty/channel/DefaultChannelConfig.getOptions:()Ljava/util/Map;
       5: iconst_1
       6: anewarray     #4                  // class io/netty/channel/ChannelOption
       9: dup
      10: iconst_0
      11: getstatic     #5                  // Field io/netty/channel/kqueue/KQueueChannelOption.RCV_ALLOC_TRANSPORT_PROVIDES_GUESS:Lio/netty/channel/ChannelOption;
      14: aastore
      15: invokevirtual #6                  // Method getOptions:(Ljava/util/Map;[Lio/netty/channel/ChannelOption;)Ljava/util/Map;
      18: areturn

  public <T> T getOption(io.netty.channel.ChannelOption<T>);
    Code:
       0: aload_1
       1: getstatic     #5                  // Field io/netty/channel/kqueue/KQueueChannelOption.RCV_ALLOC_TRANSPORT_PROVIDES_GUESS:Lio/netty/channel/ChannelOption;
       4: if_acmpne     15
       7: aload_0
       8: invokevirtual #7                  // Method getRcvAllocTransportProvidesGuess:()Z
      11: invokestatic  #8                  // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      14: areturn
      15: aload_0
      16: aload_1
      17: invokespecial #9                  // Method io/netty/channel/DefaultChannelConfig.getOption:(Lio/netty/channel/ChannelOption;)Ljava/lang/Object;
      20: areturn

  public <T> boolean setOption(io.netty.channel.ChannelOption<T>, T);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #10                 // Method validate:(Lio/netty/channel/ChannelOption;Ljava/lang/Object;)V
       6: aload_1
       7: getstatic     #5                  // Field io/netty/channel/kqueue/KQueueChannelOption.RCV_ALLOC_TRANSPORT_PROVIDES_GUESS:Lio/netty/channel/ChannelOption;
      10: if_acmpne     28
      13: aload_0
      14: aload_2
      15: checkcast     #11                 // class java/lang/Boolean
      18: invokevirtual #12                 // Method java/lang/Boolean.booleanValue:()Z
      21: invokevirtual #13                 // Method setRcvAllocTransportProvidesGuess:(Z)Lio/netty/channel/kqueue/KQueueChannelConfig;
      24: pop
      25: goto          35
      28: aload_0
      29: aload_1
      30: aload_2
      31: invokespecial #14                 // Method io/netty/channel/DefaultChannelConfig.setOption:(Lio/netty/channel/ChannelOption;Ljava/lang/Object;)Z
      34: ireturn
      35: iconst_1
      36: ireturn

  public io.netty.channel.kqueue.KQueueChannelConfig setRcvAllocTransportProvidesGuess(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #15                 // Field transportProvidesGuess:Z
       5: aload_0
       6: areturn

  public boolean getRcvAllocTransportProvidesGuess();
    Code:
       0: aload_0
       1: getfield      #15                 // Field transportProvidesGuess:Z
       4: ireturn

  public io.netty.channel.kqueue.KQueueChannelConfig setConnectTimeoutMillis(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #16                 // Method io/netty/channel/DefaultChannelConfig.setConnectTimeoutMillis:(I)Lio/netty/channel/ChannelConfig;
       5: pop
       6: aload_0
       7: areturn

  public io.netty.channel.kqueue.KQueueChannelConfig setMaxMessagesPerRead(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #17                 // Method io/netty/channel/DefaultChannelConfig.setMaxMessagesPerRead:(I)Lio/netty/channel/ChannelConfig;
       5: pop
       6: aload_0
       7: areturn

  public io.netty.channel.kqueue.KQueueChannelConfig setWriteSpinCount(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #18                 // Method io/netty/channel/DefaultChannelConfig.setWriteSpinCount:(I)Lio/netty/channel/ChannelConfig;
       5: pop
       6: aload_0
       7: areturn

  public io.netty.channel.kqueue.KQueueChannelConfig setAllocator(io.netty.buffer.ByteBufAllocator);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #19                 // Method io/netty/channel/DefaultChannelConfig.setAllocator:(Lio/netty/buffer/ByteBufAllocator;)Lio/netty/channel/ChannelConfig;
       5: pop
       6: aload_0
       7: areturn

  public io.netty.channel.kqueue.KQueueChannelConfig setRecvByteBufAllocator(io.netty.channel.RecvByteBufAllocator);
    Code:
       0: aload_1
       1: invokeinterface #20,  1           // InterfaceMethod io/netty/channel/RecvByteBufAllocator.newHandle:()Lio/netty/channel/RecvByteBufAllocator$Handle;
       6: instanceof    #21                 // class io/netty/channel/RecvByteBufAllocator$ExtendedHandle
       9: ifne          40
      12: new           #22                 // class java/lang/IllegalArgumentException
      15: dup
      16: new           #23                 // class java/lang/StringBuilder
      19: dup
      20: invokespecial #24                 // Method java/lang/StringBuilder."<init>":()V
      23: ldc           #25                 // String allocator.newHandle() must return an object of type:
      25: invokevirtual #26                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      28: ldc           #21                 // class io/netty/channel/RecvByteBufAllocator$ExtendedHandle
      30: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      33: invokevirtual #28                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      36: invokespecial #29                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      39: athrow
      40: aload_0
      41: aload_1
      42: invokespecial #30                 // Method io/netty/channel/DefaultChannelConfig.setRecvByteBufAllocator:(Lio/netty/channel/RecvByteBufAllocator;)Lio/netty/channel/ChannelConfig;
      45: pop
      46: aload_0
      47: areturn

  public io.netty.channel.kqueue.KQueueChannelConfig setAutoRead(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #31                 // Method io/netty/channel/DefaultChannelConfig.setAutoRead:(Z)Lio/netty/channel/ChannelConfig;
       5: pop
       6: aload_0
       7: areturn

  public io.netty.channel.kqueue.KQueueChannelConfig setWriteBufferHighWaterMark(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #32                 // Method io/netty/channel/DefaultChannelConfig.setWriteBufferHighWaterMark:(I)Lio/netty/channel/ChannelConfig;
       5: pop
       6: aload_0
       7: areturn

  public io.netty.channel.kqueue.KQueueChannelConfig setWriteBufferLowWaterMark(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #33                 // Method io/netty/channel/DefaultChannelConfig.setWriteBufferLowWaterMark:(I)Lio/netty/channel/ChannelConfig;
       5: pop
       6: aload_0
       7: areturn

  public io.netty.channel.kqueue.KQueueChannelConfig setWriteBufferWaterMark(io.netty.channel.WriteBufferWaterMark);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #34                 // Method io/netty/channel/DefaultChannelConfig.setWriteBufferWaterMark:(Lio/netty/channel/WriteBufferWaterMark;)Lio/netty/channel/ChannelConfig;
       5: pop
       6: aload_0
       7: areturn

  public io.netty.channel.kqueue.KQueueChannelConfig setMessageSizeEstimator(io.netty.channel.MessageSizeEstimator);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #35                 // Method io/netty/channel/DefaultChannelConfig.setMessageSizeEstimator:(Lio/netty/channel/MessageSizeEstimator;)Lio/netty/channel/ChannelConfig;
       5: pop
       6: aload_0
       7: areturn

  protected final void autoReadCleared();
    Code:
       0: aload_0
       1: getfield      #2                  // Field channel:Lio/netty/channel/kqueue/AbstractKQueueChannel;
       4: invokevirtual #36                 // Method io/netty/channel/kqueue/AbstractKQueueChannel.clearReadFilter:()V
       7: return

  public io.netty.channel.ChannelConfig setMessageSizeEstimator(io.netty.channel.MessageSizeEstimator);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #37                 // Method setMessageSizeEstimator:(Lio/netty/channel/MessageSizeEstimator;)Lio/netty/channel/kqueue/KQueueChannelConfig;
       5: areturn

  public io.netty.channel.ChannelConfig setWriteBufferWaterMark(io.netty.channel.WriteBufferWaterMark);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #38                 // Method setWriteBufferWaterMark:(Lio/netty/channel/WriteBufferWaterMark;)Lio/netty/channel/kqueue/KQueueChannelConfig;
       5: areturn

  public io.netty.channel.ChannelConfig setWriteBufferLowWaterMark(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #39                 // Method setWriteBufferLowWaterMark:(I)Lio/netty/channel/kqueue/KQueueChannelConfig;
       5: areturn

  public io.netty.channel.ChannelConfig setWriteBufferHighWaterMark(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #40                 // Method setWriteBufferHighWaterMark:(I)Lio/netty/channel/kqueue/KQueueChannelConfig;
       5: areturn

  public io.netty.channel.ChannelConfig setAutoRead(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #41                 // Method setAutoRead:(Z)Lio/netty/channel/kqueue/KQueueChannelConfig;
       5: areturn

  public io.netty.channel.ChannelConfig setRecvByteBufAllocator(io.netty.channel.RecvByteBufAllocator);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #42                 // Method setRecvByteBufAllocator:(Lio/netty/channel/RecvByteBufAllocator;)Lio/netty/channel/kqueue/KQueueChannelConfig;
       5: areturn

  public io.netty.channel.ChannelConfig setAllocator(io.netty.buffer.ByteBufAllocator);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #43                 // Method setAllocator:(Lio/netty/buffer/ByteBufAllocator;)Lio/netty/channel/kqueue/KQueueChannelConfig;
       5: areturn

  public io.netty.channel.ChannelConfig setWriteSpinCount(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #44                 // Method setWriteSpinCount:(I)Lio/netty/channel/kqueue/KQueueChannelConfig;
       5: areturn

  public io.netty.channel.ChannelConfig setMaxMessagesPerRead(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #45                 // Method setMaxMessagesPerRead:(I)Lio/netty/channel/kqueue/KQueueChannelConfig;
       5: areturn

  public io.netty.channel.ChannelConfig setConnectTimeoutMillis(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #46                 // Method setConnectTimeoutMillis:(I)Lio/netty/channel/kqueue/KQueueChannelConfig;
       5: areturn
}
