Compiled from "KQueueDatagramChannelConfig.java"
public final class io.netty.channel.kqueue.KQueueDatagramChannelConfig extends io.netty.channel.kqueue.KQueueChannelConfig implements io.netty.channel.socket.DatagramChannelConfig {
  private static final io.netty.channel.RecvByteBufAllocator DEFAULT_RCVBUF_ALLOCATOR;

  private final io.netty.channel.kqueue.KQueueDatagramChannel datagramChannel;

  private boolean activeOnOpen;

  io.netty.channel.kqueue.KQueueDatagramChannelConfig(io.netty.channel.kqueue.KQueueDatagramChannel);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method io/netty/channel/kqueue/KQueueChannelConfig."<init>":(Lio/netty/channel/kqueue/AbstractKQueueChannel;)V
       5: aload_0
       6: aload_1
       7: putfield      #2                  // Field datagramChannel:Lio/netty/channel/kqueue/KQueueDatagramChannel;
      10: aload_0
      11: getstatic     #3                  // Field DEFAULT_RCVBUF_ALLOCATOR:Lio/netty/channel/RecvByteBufAllocator;
      14: invokevirtual #4                  // Method setRecvByteBufAllocator:(Lio/netty/channel/RecvByteBufAllocator;)Lio/netty/channel/kqueue/KQueueDatagramChannelConfig;
      17: pop
      18: return

  public java.util.Map<io.netty.channel.ChannelOption<?>, java.lang.Object> getOptions();
    Code:
       0: aload_0
       1: aload_0
       2: invokespecial #5                  // Method io/netty/channel/kqueue/KQueueChannelConfig.getOptions:()Ljava/util/Map;
       5: bipush        11
       7: anewarray     #6                  // class io/netty/channel/ChannelOption
      10: dup
      11: iconst_0
      12: getstatic     #7                  // Field io/netty/channel/ChannelOption.SO_BROADCAST:Lio/netty/channel/ChannelOption;
      15: aastore
      16: dup
      17: iconst_1
      18: getstatic     #8                  // Field io/netty/channel/ChannelOption.SO_RCVBUF:Lio/netty/channel/ChannelOption;
      21: aastore
      22: dup
      23: iconst_2
      24: getstatic     #9                  // Field io/netty/channel/ChannelOption.SO_SNDBUF:Lio/netty/channel/ChannelOption;
      27: aastore
      28: dup
      29: iconst_3
      30: getstatic     #10                 // Field io/netty/channel/ChannelOption.SO_REUSEADDR:Lio/netty/channel/ChannelOption;
      33: aastore
      34: dup
      35: iconst_4
      36: getstatic     #11                 // Field io/netty/channel/ChannelOption.IP_MULTICAST_LOOP_DISABLED:Lio/netty/channel/ChannelOption;
      39: aastore
      40: dup
      41: iconst_5
      42: getstatic     #12                 // Field io/netty/channel/ChannelOption.IP_MULTICAST_ADDR:Lio/netty/channel/ChannelOption;
      45: aastore
      46: dup
      47: bipush        6
      49: getstatic     #13                 // Field io/netty/channel/ChannelOption.IP_MULTICAST_IF:Lio/netty/channel/ChannelOption;
      52: aastore
      53: dup
      54: bipush        7
      56: getstatic     #14                 // Field io/netty/channel/ChannelOption.IP_MULTICAST_TTL:Lio/netty/channel/ChannelOption;
      59: aastore
      60: dup
      61: bipush        8
      63: getstatic     #15                 // Field io/netty/channel/ChannelOption.IP_TOS:Lio/netty/channel/ChannelOption;
      66: aastore
      67: dup
      68: bipush        9
      70: getstatic     #16                 // Field io/netty/channel/ChannelOption.DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION:Lio/netty/channel/ChannelOption;
      73: aastore
      74: dup
      75: bipush        10
      77: getstatic     #17                 // Field io/netty/channel/unix/UnixChannelOption.SO_REUSEPORT:Lio/netty/channel/ChannelOption;
      80: aastore
      81: invokevirtual #18                 // Method getOptions:(Ljava/util/Map;[Lio/netty/channel/ChannelOption;)Ljava/util/Map;
      84: areturn

  public <T> T getOption(io.netty.channel.ChannelOption<T>);
    Code:
       0: aload_1
       1: getstatic     #7                  // Field io/netty/channel/ChannelOption.SO_BROADCAST:Lio/netty/channel/ChannelOption;
       4: if_acmpne     15
       7: aload_0
       8: invokevirtual #19                 // Method isBroadcast:()Z
      11: invokestatic  #20                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      14: areturn
      15: aload_1
      16: getstatic     #8                  // Field io/netty/channel/ChannelOption.SO_RCVBUF:Lio/netty/channel/ChannelOption;
      19: if_acmpne     30
      22: aload_0
      23: invokevirtual #21                 // Method getReceiveBufferSize:()I
      26: invokestatic  #22                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      29: areturn
      30: aload_1
      31: getstatic     #9                  // Field io/netty/channel/ChannelOption.SO_SNDBUF:Lio/netty/channel/ChannelOption;
      34: if_acmpne     45
      37: aload_0
      38: invokevirtual #23                 // Method getSendBufferSize:()I
      41: invokestatic  #22                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      44: areturn
      45: aload_1
      46: getstatic     #10                 // Field io/netty/channel/ChannelOption.SO_REUSEADDR:Lio/netty/channel/ChannelOption;
      49: if_acmpne     60
      52: aload_0
      53: invokevirtual #24                 // Method isReuseAddress:()Z
      56: invokestatic  #20                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      59: areturn
      60: aload_1
      61: getstatic     #11                 // Field io/netty/channel/ChannelOption.IP_MULTICAST_LOOP_DISABLED:Lio/netty/channel/ChannelOption;
      64: if_acmpne     75
      67: aload_0
      68: invokevirtual #25                 // Method isLoopbackModeDisabled:()Z
      71: invokestatic  #20                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      74: areturn
      75: aload_1
      76: getstatic     #12                 // Field io/netty/channel/ChannelOption.IP_MULTICAST_ADDR:Lio/netty/channel/ChannelOption;
      79: if_acmpne     87
      82: aload_0
      83: invokevirtual #26                 // Method getInterface:()Ljava/net/InetAddress;
      86: areturn
      87: aload_1
      88: getstatic     #13                 // Field io/netty/channel/ChannelOption.IP_MULTICAST_IF:Lio/netty/channel/ChannelOption;
      91: if_acmpne     99
      94: aload_0
      95: invokevirtual #27                 // Method getNetworkInterface:()Ljava/net/NetworkInterface;
      98: areturn
      99: aload_1
     100: getstatic     #14                 // Field io/netty/channel/ChannelOption.IP_MULTICAST_TTL:Lio/netty/channel/ChannelOption;
     103: if_acmpne     114
     106: aload_0
     107: invokevirtual #28                 // Method getTimeToLive:()I
     110: invokestatic  #22                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     113: areturn
     114: aload_1
     115: getstatic     #15                 // Field io/netty/channel/ChannelOption.IP_TOS:Lio/netty/channel/ChannelOption;
     118: if_acmpne     129
     121: aload_0
     122: invokevirtual #29                 // Method getTrafficClass:()I
     125: invokestatic  #22                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     128: areturn
     129: aload_1
     130: getstatic     #16                 // Field io/netty/channel/ChannelOption.DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION:Lio/netty/channel/ChannelOption;
     133: if_acmpne     144
     136: aload_0
     137: getfield      #30                 // Field activeOnOpen:Z
     140: invokestatic  #20                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
     143: areturn
     144: aload_1
     145: getstatic     #17                 // Field io/netty/channel/unix/UnixChannelOption.SO_REUSEPORT:Lio/netty/channel/ChannelOption;
     148: if_acmpne     159
     151: aload_0
     152: invokevirtual #31                 // Method isReusePort:()Z
     155: invokestatic  #20                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
     158: areturn
     159: aload_0
     160: aload_1
     161: invokespecial #32                 // Method io/netty/channel/kqueue/KQueueChannelConfig.getOption:(Lio/netty/channel/ChannelOption;)Ljava/lang/Object;
     164: areturn

  public <T> boolean setOption(io.netty.channel.ChannelOption<T>, T);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #33                 // Method validate:(Lio/netty/channel/ChannelOption;Ljava/lang/Object;)V
       6: aload_1
       7: getstatic     #7                  // Field io/netty/channel/ChannelOption.SO_BROADCAST:Lio/netty/channel/ChannelOption;
      10: if_acmpne     28
      13: aload_0
      14: aload_2
      15: checkcast     #34                 // class java/lang/Boolean
      18: invokevirtual #35                 // Method java/lang/Boolean.booleanValue:()Z
      21: invokevirtual #36                 // Method setBroadcast:(Z)Lio/netty/channel/kqueue/KQueueDatagramChannelConfig;
      24: pop
      25: goto          248
      28: aload_1
      29: getstatic     #8                  // Field io/netty/channel/ChannelOption.SO_RCVBUF:Lio/netty/channel/ChannelOption;
      32: if_acmpne     50
      35: aload_0
      36: aload_2
      37: checkcast     #37                 // class java/lang/Integer
      40: invokevirtual #38                 // Method java/lang/Integer.intValue:()I
      43: invokevirtual #39                 // Method setReceiveBufferSize:(I)Lio/netty/channel/kqueue/KQueueDatagramChannelConfig;
      46: pop
      47: goto          248
      50: aload_1
      51: getstatic     #9                  // Field io/netty/channel/ChannelOption.SO_SNDBUF:Lio/netty/channel/ChannelOption;
      54: if_acmpne     72
      57: aload_0
      58: aload_2
      59: checkcast     #37                 // class java/lang/Integer
      62: invokevirtual #38                 // Method java/lang/Integer.intValue:()I
      65: invokevirtual #40                 // Method setSendBufferSize:(I)Lio/netty/channel/kqueue/KQueueDatagramChannelConfig;
      68: pop
      69: goto          248
      72: aload_1
      73: getstatic     #10                 // Field io/netty/channel/ChannelOption.SO_REUSEADDR:Lio/netty/channel/ChannelOption;
      76: if_acmpne     94
      79: aload_0
      80: aload_2
      81: checkcast     #34                 // class java/lang/Boolean
      84: invokevirtual #35                 // Method java/lang/Boolean.booleanValue:()Z
      87: invokevirtual #41                 // Method setReuseAddress:(Z)Lio/netty/channel/kqueue/KQueueDatagramChannelConfig;
      90: pop
      91: goto          248
      94: aload_1
      95: getstatic     #11                 // Field io/netty/channel/ChannelOption.IP_MULTICAST_LOOP_DISABLED:Lio/netty/channel/ChannelOption;
      98: if_acmpne     116
     101: aload_0
     102: aload_2
     103: checkcast     #34                 // class java/lang/Boolean
     106: invokevirtual #35                 // Method java/lang/Boolean.booleanValue:()Z
     109: invokevirtual #42                 // Method setLoopbackModeDisabled:(Z)Lio/netty/channel/socket/DatagramChannelConfig;
     112: pop
     113: goto          248
     116: aload_1
     117: getstatic     #12                 // Field io/netty/channel/ChannelOption.IP_MULTICAST_ADDR:Lio/netty/channel/ChannelOption;
     120: if_acmpne     135
     123: aload_0
     124: aload_2
     125: checkcast     #43                 // class java/net/InetAddress
     128: invokevirtual #44                 // Method setInterface:(Ljava/net/InetAddress;)Lio/netty/channel/kqueue/KQueueDatagramChannelConfig;
     131: pop
     132: goto          248
     135: aload_1
     136: getstatic     #13                 // Field io/netty/channel/ChannelOption.IP_MULTICAST_IF:Lio/netty/channel/ChannelOption;
     139: if_acmpne     154
     142: aload_0
     143: aload_2
     144: checkcast     #45                 // class java/net/NetworkInterface
     147: invokevirtual #46                 // Method setNetworkInterface:(Ljava/net/NetworkInterface;)Lio/netty/channel/kqueue/KQueueDatagramChannelConfig;
     150: pop
     151: goto          248
     154: aload_1
     155: getstatic     #14                 // Field io/netty/channel/ChannelOption.IP_MULTICAST_TTL:Lio/netty/channel/ChannelOption;
     158: if_acmpne     176
     161: aload_0
     162: aload_2
     163: checkcast     #37                 // class java/lang/Integer
     166: invokevirtual #38                 // Method java/lang/Integer.intValue:()I
     169: invokevirtual #47                 // Method setTimeToLive:(I)Lio/netty/channel/kqueue/KQueueDatagramChannelConfig;
     172: pop
     173: goto          248
     176: aload_1
     177: getstatic     #15                 // Field io/netty/channel/ChannelOption.IP_TOS:Lio/netty/channel/ChannelOption;
     180: if_acmpne     198
     183: aload_0
     184: aload_2
     185: checkcast     #37                 // class java/lang/Integer
     188: invokevirtual #38                 // Method java/lang/Integer.intValue:()I
     191: invokevirtual #48                 // Method setTrafficClass:(I)Lio/netty/channel/kqueue/KQueueDatagramChannelConfig;
     194: pop
     195: goto          248
     198: aload_1
     199: getstatic     #16                 // Field io/netty/channel/ChannelOption.DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION:Lio/netty/channel/ChannelOption;
     202: if_acmpne     219
     205: aload_0
     206: aload_2
     207: checkcast     #34                 // class java/lang/Boolean
     210: invokevirtual #35                 // Method java/lang/Boolean.booleanValue:()Z
     213: invokespecial #49                 // Method setActiveOnOpen:(Z)V
     216: goto          248
     219: aload_1
     220: getstatic     #17                 // Field io/netty/channel/unix/UnixChannelOption.SO_REUSEPORT:Lio/netty/channel/ChannelOption;
     223: if_acmpne     241
     226: aload_0
     227: aload_2
     228: checkcast     #34                 // class java/lang/Boolean
     231: invokevirtual #35                 // Method java/lang/Boolean.booleanValue:()Z
     234: invokevirtual #50                 // Method setReusePort:(Z)Lio/netty/channel/kqueue/KQueueDatagramChannelConfig;
     237: pop
     238: goto          248
     241: aload_0
     242: aload_1
     243: aload_2
     244: invokespecial #51                 // Method io/netty/channel/kqueue/KQueueChannelConfig.setOption:(Lio/netty/channel/ChannelOption;Ljava/lang/Object;)Z
     247: ireturn
     248: iconst_1
     249: ireturn

  private void setActiveOnOpen(boolean);
    Code:
       0: aload_0
       1: getfield      #52                 // Field channel:Lio/netty/channel/kqueue/AbstractKQueueChannel;
       4: invokevirtual #53                 // Method io/netty/channel/kqueue/AbstractKQueueChannel.isRegistered:()Z
       7: ifeq          20
      10: new           #54                 // class java/lang/IllegalStateException
      13: dup
      14: ldc           #55                 // String Can only changed before channel was registered
      16: invokespecial #56                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      19: athrow
      20: aload_0
      21: iload_1
      22: putfield      #30                 // Field activeOnOpen:Z
      25: return

  boolean getActiveOnOpen();
    Code:
       0: aload_0
       1: getfield      #30                 // Field activeOnOpen:Z
       4: ireturn

  public boolean isReusePort();
    Code:
       0: aload_0
       1: getfield      #2                  // Field datagramChannel:Lio/netty/channel/kqueue/KQueueDatagramChannel;
       4: getfield      #57                 // Field io/netty/channel/kqueue/KQueueDatagramChannel.socket:Lio/netty/channel/kqueue/BsdSocket;
       7: invokevirtual #58                 // Method io/netty/channel/kqueue/BsdSocket.isReusePort:()Z
      10: ireturn
      11: astore_1
      12: new           #60                 // class io/netty/channel/ChannelException
      15: dup
      16: aload_1
      17: invokespecial #61                 // Method io/netty/channel/ChannelException."<init>":(Ljava/lang/Throwable;)V
      20: athrow
    Exception table:
       from    to  target type
           0    10    11   Class java/io/IOException

  public io.netty.channel.kqueue.KQueueDatagramChannelConfig setReusePort(boolean);
    Code:
       0: aload_0
       1: getfield      #2                  // Field datagramChannel:Lio/netty/channel/kqueue/KQueueDatagramChannel;
       4: getfield      #57                 // Field io/netty/channel/kqueue/KQueueDatagramChannel.socket:Lio/netty/channel/kqueue/BsdSocket;
       7: iload_1
       8: invokevirtual #62                 // Method io/netty/channel/kqueue/BsdSocket.setReusePort:(Z)V
      11: aload_0
      12: areturn
      13: astore_2
      14: new           #60                 // class io/netty/channel/ChannelException
      17: dup
      18: aload_2
      19: invokespecial #61                 // Method io/netty/channel/ChannelException."<init>":(Ljava/lang/Throwable;)V
      22: athrow
    Exception table:
       from    to  target type
           0    12    13   Class java/io/IOException

  public io.netty.channel.kqueue.KQueueDatagramChannelConfig setRcvAllocTransportProvidesGuess(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #63                 // Method io/netty/channel/kqueue/KQueueChannelConfig.setRcvAllocTransportProvidesGuess:(Z)Lio/netty/channel/kqueue/KQueueChannelConfig;
       5: pop
       6: aload_0
       7: areturn

  public io.netty.channel.kqueue.KQueueDatagramChannelConfig setMessageSizeEstimator(io.netty.channel.MessageSizeEstimator);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #64                 // Method io/netty/channel/kqueue/KQueueChannelConfig.setMessageSizeEstimator:(Lio/netty/channel/MessageSizeEstimator;)Lio/netty/channel/kqueue/KQueueChannelConfig;
       5: pop
       6: aload_0
       7: areturn

  public io.netty.channel.kqueue.KQueueDatagramChannelConfig setWriteBufferLowWaterMark(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #65                 // Method io/netty/channel/kqueue/KQueueChannelConfig.setWriteBufferLowWaterMark:(I)Lio/netty/channel/kqueue/KQueueChannelConfig;
       5: pop
       6: aload_0
       7: areturn

  public io.netty.channel.kqueue.KQueueDatagramChannelConfig setWriteBufferHighWaterMark(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #66                 // Method io/netty/channel/kqueue/KQueueChannelConfig.setWriteBufferHighWaterMark:(I)Lio/netty/channel/kqueue/KQueueChannelConfig;
       5: pop
       6: aload_0
       7: areturn

  public io.netty.channel.kqueue.KQueueDatagramChannelConfig setWriteBufferWaterMark(io.netty.channel.WriteBufferWaterMark);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #67                 // Method io/netty/channel/kqueue/KQueueChannelConfig.setWriteBufferWaterMark:(Lio/netty/channel/WriteBufferWaterMark;)Lio/netty/channel/kqueue/KQueueChannelConfig;
       5: pop
       6: aload_0
       7: areturn

  public io.netty.channel.kqueue.KQueueDatagramChannelConfig setAutoClose(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #68                 // Method io/netty/channel/kqueue/KQueueChannelConfig.setAutoClose:(Z)Lio/netty/channel/ChannelConfig;
       5: pop
       6: aload_0
       7: areturn

  public io.netty.channel.kqueue.KQueueDatagramChannelConfig setAutoRead(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #69                 // Method io/netty/channel/kqueue/KQueueChannelConfig.setAutoRead:(Z)Lio/netty/channel/kqueue/KQueueChannelConfig;
       5: pop
       6: aload_0
       7: areturn

  public io.netty.channel.kqueue.KQueueDatagramChannelConfig setRecvByteBufAllocator(io.netty.channel.RecvByteBufAllocator);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #70                 // Method io/netty/channel/kqueue/KQueueChannelConfig.setRecvByteBufAllocator:(Lio/netty/channel/RecvByteBufAllocator;)Lio/netty/channel/kqueue/KQueueChannelConfig;
       5: pop
       6: aload_0
       7: areturn

  public io.netty.channel.kqueue.KQueueDatagramChannelConfig setWriteSpinCount(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #71                 // Method io/netty/channel/kqueue/KQueueChannelConfig.setWriteSpinCount:(I)Lio/netty/channel/kqueue/KQueueChannelConfig;
       5: pop
       6: aload_0
       7: areturn

  public io.netty.channel.kqueue.KQueueDatagramChannelConfig setAllocator(io.netty.buffer.ByteBufAllocator);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #72                 // Method io/netty/channel/kqueue/KQueueChannelConfig.setAllocator:(Lio/netty/buffer/ByteBufAllocator;)Lio/netty/channel/kqueue/KQueueChannelConfig;
       5: pop
       6: aload_0
       7: areturn

  public io.netty.channel.kqueue.KQueueDatagramChannelConfig setConnectTimeoutMillis(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #73                 // Method io/netty/channel/kqueue/KQueueChannelConfig.setConnectTimeoutMillis:(I)Lio/netty/channel/kqueue/KQueueChannelConfig;
       5: pop
       6: aload_0
       7: areturn

  public io.netty.channel.kqueue.KQueueDatagramChannelConfig setMaxMessagesPerRead(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #74                 // Method io/netty/channel/kqueue/KQueueChannelConfig.setMaxMessagesPerRead:(I)Lio/netty/channel/kqueue/KQueueChannelConfig;
       5: pop
       6: aload_0
       7: areturn

  public int getSendBufferSize();
    Code:
       0: aload_0
       1: getfield      #2                  // Field datagramChannel:Lio/netty/channel/kqueue/KQueueDatagramChannel;
       4: getfield      #57                 // Field io/netty/channel/kqueue/KQueueDatagramChannel.socket:Lio/netty/channel/kqueue/BsdSocket;
       7: invokevirtual #75                 // Method io/netty/channel/kqueue/BsdSocket.getSendBufferSize:()I
      10: ireturn
      11: astore_1
      12: new           #60                 // class io/netty/channel/ChannelException
      15: dup
      16: aload_1
      17: invokespecial #61                 // Method io/netty/channel/ChannelException."<init>":(Ljava/lang/Throwable;)V
      20: athrow
    Exception table:
       from    to  target type
           0    10    11   Class java/io/IOException

  public io.netty.channel.kqueue.KQueueDatagramChannelConfig setSendBufferSize(int);
    Code:
       0: aload_0
       1: getfield      #2                  // Field datagramChannel:Lio/netty/channel/kqueue/KQueueDatagramChannel;
       4: getfield      #57                 // Field io/netty/channel/kqueue/KQueueDatagramChannel.socket:Lio/netty/channel/kqueue/BsdSocket;
       7: iload_1
       8: invokevirtual #76                 // Method io/netty/channel/kqueue/BsdSocket.setSendBufferSize:(I)V
      11: aload_0
      12: areturn
      13: astore_2
      14: new           #60                 // class io/netty/channel/ChannelException
      17: dup
      18: aload_2
      19: invokespecial #61                 // Method io/netty/channel/ChannelException."<init>":(Ljava/lang/Throwable;)V
      22: athrow
    Exception table:
       from    to  target type
           0    12    13   Class java/io/IOException

  public int getReceiveBufferSize();
    Code:
       0: aload_0
       1: getfield      #2                  // Field datagramChannel:Lio/netty/channel/kqueue/KQueueDatagramChannel;
       4: getfield      #57                 // Field io/netty/channel/kqueue/KQueueDatagramChannel.socket:Lio/netty/channel/kqueue/BsdSocket;
       7: invokevirtual #77                 // Method io/netty/channel/kqueue/BsdSocket.getReceiveBufferSize:()I
      10: ireturn
      11: astore_1
      12: new           #60                 // class io/netty/channel/ChannelException
      15: dup
      16: aload_1
      17: invokespecial #61                 // Method io/netty/channel/ChannelException."<init>":(Ljava/lang/Throwable;)V
      20: athrow
    Exception table:
       from    to  target type
           0    10    11   Class java/io/IOException

  public io.netty.channel.kqueue.KQueueDatagramChannelConfig setReceiveBufferSize(int);
    Code:
       0: aload_0
       1: getfield      #2                  // Field datagramChannel:Lio/netty/channel/kqueue/KQueueDatagramChannel;
       4: getfield      #57                 // Field io/netty/channel/kqueue/KQueueDatagramChannel.socket:Lio/netty/channel/kqueue/BsdSocket;
       7: iload_1
       8: invokevirtual #78                 // Method io/netty/channel/kqueue/BsdSocket.setReceiveBufferSize:(I)V
      11: aload_0
      12: areturn
      13: astore_2
      14: new           #60                 // class io/netty/channel/ChannelException
      17: dup
      18: aload_2
      19: invokespecial #61                 // Method io/netty/channel/ChannelException."<init>":(Ljava/lang/Throwable;)V
      22: athrow
    Exception table:
       from    to  target type
           0    12    13   Class java/io/IOException

  public int getTrafficClass();
    Code:
       0: aload_0
       1: getfield      #2                  // Field datagramChannel:Lio/netty/channel/kqueue/KQueueDatagramChannel;
       4: getfield      #57                 // Field io/netty/channel/kqueue/KQueueDatagramChannel.socket:Lio/netty/channel/kqueue/BsdSocket;
       7: invokevirtual #79                 // Method io/netty/channel/kqueue/BsdSocket.getTrafficClass:()I
      10: ireturn
      11: astore_1
      12: new           #60                 // class io/netty/channel/ChannelException
      15: dup
      16: aload_1
      17: invokespecial #61                 // Method io/netty/channel/ChannelException."<init>":(Ljava/lang/Throwable;)V
      20: athrow
    Exception table:
       from    to  target type
           0    10    11   Class java/io/IOException

  public io.netty.channel.kqueue.KQueueDatagramChannelConfig setTrafficClass(int);
    Code:
       0: aload_0
       1: getfield      #2                  // Field datagramChannel:Lio/netty/channel/kqueue/KQueueDatagramChannel;
       4: getfield      #57                 // Field io/netty/channel/kqueue/KQueueDatagramChannel.socket:Lio/netty/channel/kqueue/BsdSocket;
       7: iload_1
       8: invokevirtual #80                 // Method io/netty/channel/kqueue/BsdSocket.setTrafficClass:(I)V
      11: aload_0
      12: areturn
      13: astore_2
      14: new           #60                 // class io/netty/channel/ChannelException
      17: dup
      18: aload_2
      19: invokespecial #61                 // Method io/netty/channel/ChannelException."<init>":(Ljava/lang/Throwable;)V
      22: athrow
    Exception table:
       from    to  target type
           0    12    13   Class java/io/IOException

  public boolean isReuseAddress();
    Code:
       0: aload_0
       1: getfield      #2                  // Field datagramChannel:Lio/netty/channel/kqueue/KQueueDatagramChannel;
       4: getfield      #57                 // Field io/netty/channel/kqueue/KQueueDatagramChannel.socket:Lio/netty/channel/kqueue/BsdSocket;
       7: invokevirtual #81                 // Method io/netty/channel/kqueue/BsdSocket.isReuseAddress:()Z
      10: ireturn
      11: astore_1
      12: new           #60                 // class io/netty/channel/ChannelException
      15: dup
      16: aload_1
      17: invokespecial #61                 // Method io/netty/channel/ChannelException."<init>":(Ljava/lang/Throwable;)V
      20: athrow
    Exception table:
       from    to  target type
           0    10    11   Class java/io/IOException

  public io.netty.channel.kqueue.KQueueDatagramChannelConfig setReuseAddress(boolean);
    Code:
       0: aload_0
       1: getfield      #2                  // Field datagramChannel:Lio/netty/channel/kqueue/KQueueDatagramChannel;
       4: getfield      #57                 // Field io/netty/channel/kqueue/KQueueDatagramChannel.socket:Lio/netty/channel/kqueue/BsdSocket;
       7: iload_1
       8: invokevirtual #82                 // Method io/netty/channel/kqueue/BsdSocket.setReuseAddress:(Z)V
      11: aload_0
      12: areturn
      13: astore_2
      14: new           #60                 // class io/netty/channel/ChannelException
      17: dup
      18: aload_2
      19: invokespecial #61                 // Method io/netty/channel/ChannelException."<init>":(Ljava/lang/Throwable;)V
      22: athrow
    Exception table:
       from    to  target type
           0    12    13   Class java/io/IOException

  public boolean isBroadcast();
    Code:
       0: aload_0
       1: getfield      #2                  // Field datagramChannel:Lio/netty/channel/kqueue/KQueueDatagramChannel;
       4: getfield      #57                 // Field io/netty/channel/kqueue/KQueueDatagramChannel.socket:Lio/netty/channel/kqueue/BsdSocket;
       7: invokevirtual #83                 // Method io/netty/channel/kqueue/BsdSocket.isBroadcast:()Z
      10: ireturn
      11: astore_1
      12: new           #60                 // class io/netty/channel/ChannelException
      15: dup
      16: aload_1
      17: invokespecial #61                 // Method io/netty/channel/ChannelException."<init>":(Ljava/lang/Throwable;)V
      20: athrow
    Exception table:
       from    to  target type
           0    10    11   Class java/io/IOException

  public io.netty.channel.kqueue.KQueueDatagramChannelConfig setBroadcast(boolean);
    Code:
       0: aload_0
       1: getfield      #2                  // Field datagramChannel:Lio/netty/channel/kqueue/KQueueDatagramChannel;
       4: getfield      #57                 // Field io/netty/channel/kqueue/KQueueDatagramChannel.socket:Lio/netty/channel/kqueue/BsdSocket;
       7: iload_1
       8: invokevirtual #84                 // Method io/netty/channel/kqueue/BsdSocket.setBroadcast:(Z)V
      11: aload_0
      12: areturn
      13: astore_2
      14: new           #60                 // class io/netty/channel/ChannelException
      17: dup
      18: aload_2
      19: invokespecial #61                 // Method io/netty/channel/ChannelException."<init>":(Ljava/lang/Throwable;)V
      22: athrow
    Exception table:
       from    to  target type
           0    12    13   Class java/io/IOException

  public boolean isLoopbackModeDisabled();
    Code:
       0: iconst_0
       1: ireturn

  public io.netty.channel.socket.DatagramChannelConfig setLoopbackModeDisabled(boolean);
    Code:
       0: new           #85                 // class java/lang/UnsupportedOperationException
       3: dup
       4: ldc           #86                 // String Multicast not supported
       6: invokespecial #87                 // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
       9: athrow

  public int getTimeToLive();
    Code:
       0: iconst_m1
       1: ireturn

  public io.netty.channel.kqueue.KQueueDatagramChannelConfig setTimeToLive(int);
    Code:
       0: new           #85                 // class java/lang/UnsupportedOperationException
       3: dup
       4: ldc           #86                 // String Multicast not supported
       6: invokespecial #87                 // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
       9: athrow

  public java.net.InetAddress getInterface();
    Code:
       0: aconst_null
       1: areturn

  public io.netty.channel.kqueue.KQueueDatagramChannelConfig setInterface(java.net.InetAddress);
    Code:
       0: new           #85                 // class java/lang/UnsupportedOperationException
       3: dup
       4: ldc           #86                 // String Multicast not supported
       6: invokespecial #87                 // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
       9: athrow

  public java.net.NetworkInterface getNetworkInterface();
    Code:
       0: aconst_null
       1: areturn

  public io.netty.channel.kqueue.KQueueDatagramChannelConfig setNetworkInterface(java.net.NetworkInterface);
    Code:
       0: new           #85                 // class java/lang/UnsupportedOperationException
       3: dup
       4: ldc           #86                 // String Multicast not supported
       6: invokespecial #87                 // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
       9: athrow

  public io.netty.channel.kqueue.KQueueChannelConfig setMessageSizeEstimator(io.netty.channel.MessageSizeEstimator);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #88                 // Method setMessageSizeEstimator:(Lio/netty/channel/MessageSizeEstimator;)Lio/netty/channel/kqueue/KQueueDatagramChannelConfig;
       5: areturn

  public io.netty.channel.kqueue.KQueueChannelConfig setWriteBufferWaterMark(io.netty.channel.WriteBufferWaterMark);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #89                 // Method setWriteBufferWaterMark:(Lio/netty/channel/WriteBufferWaterMark;)Lio/netty/channel/kqueue/KQueueDatagramChannelConfig;
       5: areturn

  public io.netty.channel.kqueue.KQueueChannelConfig setWriteBufferLowWaterMark(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #90                 // Method setWriteBufferLowWaterMark:(I)Lio/netty/channel/kqueue/KQueueDatagramChannelConfig;
       5: areturn

  public io.netty.channel.kqueue.KQueueChannelConfig setWriteBufferHighWaterMark(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #91                 // Method setWriteBufferHighWaterMark:(I)Lio/netty/channel/kqueue/KQueueDatagramChannelConfig;
       5: areturn

  public io.netty.channel.kqueue.KQueueChannelConfig setAutoRead(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #92                 // Method setAutoRead:(Z)Lio/netty/channel/kqueue/KQueueDatagramChannelConfig;
       5: areturn

  public io.netty.channel.kqueue.KQueueChannelConfig setRecvByteBufAllocator(io.netty.channel.RecvByteBufAllocator);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #4                  // Method setRecvByteBufAllocator:(Lio/netty/channel/RecvByteBufAllocator;)Lio/netty/channel/kqueue/KQueueDatagramChannelConfig;
       5: areturn

  public io.netty.channel.kqueue.KQueueChannelConfig setAllocator(io.netty.buffer.ByteBufAllocator);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #93                 // Method setAllocator:(Lio/netty/buffer/ByteBufAllocator;)Lio/netty/channel/kqueue/KQueueDatagramChannelConfig;
       5: areturn

  public io.netty.channel.kqueue.KQueueChannelConfig setWriteSpinCount(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #94                 // Method setWriteSpinCount:(I)Lio/netty/channel/kqueue/KQueueDatagramChannelConfig;
       5: areturn

  public io.netty.channel.kqueue.KQueueChannelConfig setMaxMessagesPerRead(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #95                 // Method setMaxMessagesPerRead:(I)Lio/netty/channel/kqueue/KQueueDatagramChannelConfig;
       5: areturn

  public io.netty.channel.kqueue.KQueueChannelConfig setConnectTimeoutMillis(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #96                 // Method setConnectTimeoutMillis:(I)Lio/netty/channel/kqueue/KQueueDatagramChannelConfig;
       5: areturn

  public io.netty.channel.kqueue.KQueueChannelConfig setRcvAllocTransportProvidesGuess(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #97                 // Method setRcvAllocTransportProvidesGuess:(Z)Lio/netty/channel/kqueue/KQueueDatagramChannelConfig;
       5: areturn

  public io.netty.channel.ChannelConfig setMessageSizeEstimator(io.netty.channel.MessageSizeEstimator);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #88                 // Method setMessageSizeEstimator:(Lio/netty/channel/MessageSizeEstimator;)Lio/netty/channel/kqueue/KQueueDatagramChannelConfig;
       5: areturn

  public io.netty.channel.ChannelConfig setWriteBufferWaterMark(io.netty.channel.WriteBufferWaterMark);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #89                 // Method setWriteBufferWaterMark:(Lio/netty/channel/WriteBufferWaterMark;)Lio/netty/channel/kqueue/KQueueDatagramChannelConfig;
       5: areturn

  public io.netty.channel.ChannelConfig setWriteBufferLowWaterMark(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #90                 // Method setWriteBufferLowWaterMark:(I)Lio/netty/channel/kqueue/KQueueDatagramChannelConfig;
       5: areturn

  public io.netty.channel.ChannelConfig setWriteBufferHighWaterMark(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #91                 // Method setWriteBufferHighWaterMark:(I)Lio/netty/channel/kqueue/KQueueDatagramChannelConfig;
       5: areturn

  public io.netty.channel.ChannelConfig setAutoClose(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #98                 // Method setAutoClose:(Z)Lio/netty/channel/kqueue/KQueueDatagramChannelConfig;
       5: areturn

  public io.netty.channel.ChannelConfig setAutoRead(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #92                 // Method setAutoRead:(Z)Lio/netty/channel/kqueue/KQueueDatagramChannelConfig;
       5: areturn

  public io.netty.channel.ChannelConfig setRecvByteBufAllocator(io.netty.channel.RecvByteBufAllocator);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #4                  // Method setRecvByteBufAllocator:(Lio/netty/channel/RecvByteBufAllocator;)Lio/netty/channel/kqueue/KQueueDatagramChannelConfig;
       5: areturn

  public io.netty.channel.ChannelConfig setAllocator(io.netty.buffer.ByteBufAllocator);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #93                 // Method setAllocator:(Lio/netty/buffer/ByteBufAllocator;)Lio/netty/channel/kqueue/KQueueDatagramChannelConfig;
       5: areturn

  public io.netty.channel.ChannelConfig setWriteSpinCount(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #94                 // Method setWriteSpinCount:(I)Lio/netty/channel/kqueue/KQueueDatagramChannelConfig;
       5: areturn

  public io.netty.channel.ChannelConfig setMaxMessagesPerRead(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #95                 // Method setMaxMessagesPerRead:(I)Lio/netty/channel/kqueue/KQueueDatagramChannelConfig;
       5: areturn

  public io.netty.channel.ChannelConfig setConnectTimeoutMillis(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #96                 // Method setConnectTimeoutMillis:(I)Lio/netty/channel/kqueue/KQueueDatagramChannelConfig;
       5: areturn

  public io.netty.channel.socket.DatagramChannelConfig setWriteBufferWaterMark(io.netty.channel.WriteBufferWaterMark);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #89                 // Method setWriteBufferWaterMark:(Lio/netty/channel/WriteBufferWaterMark;)Lio/netty/channel/kqueue/KQueueDatagramChannelConfig;
       5: areturn

  public io.netty.channel.socket.DatagramChannelConfig setMessageSizeEstimator(io.netty.channel.MessageSizeEstimator);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #88                 // Method setMessageSizeEstimator:(Lio/netty/channel/MessageSizeEstimator;)Lio/netty/channel/kqueue/KQueueDatagramChannelConfig;
       5: areturn

  public io.netty.channel.socket.DatagramChannelConfig setAutoClose(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #98                 // Method setAutoClose:(Z)Lio/netty/channel/kqueue/KQueueDatagramChannelConfig;
       5: areturn

  public io.netty.channel.socket.DatagramChannelConfig setAutoRead(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #92                 // Method setAutoRead:(Z)Lio/netty/channel/kqueue/KQueueDatagramChannelConfig;
       5: areturn

  public io.netty.channel.socket.DatagramChannelConfig setRecvByteBufAllocator(io.netty.channel.RecvByteBufAllocator);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #4                  // Method setRecvByteBufAllocator:(Lio/netty/channel/RecvByteBufAllocator;)Lio/netty/channel/kqueue/KQueueDatagramChannelConfig;
       5: areturn

  public io.netty.channel.socket.DatagramChannelConfig setAllocator(io.netty.buffer.ByteBufAllocator);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #93                 // Method setAllocator:(Lio/netty/buffer/ByteBufAllocator;)Lio/netty/channel/kqueue/KQueueDatagramChannelConfig;
       5: areturn

  public io.netty.channel.socket.DatagramChannelConfig setConnectTimeoutMillis(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #96                 // Method setConnectTimeoutMillis:(I)Lio/netty/channel/kqueue/KQueueDatagramChannelConfig;
       5: areturn

  public io.netty.channel.socket.DatagramChannelConfig setWriteSpinCount(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #94                 // Method setWriteSpinCount:(I)Lio/netty/channel/kqueue/KQueueDatagramChannelConfig;
       5: areturn

  public io.netty.channel.socket.DatagramChannelConfig setMaxMessagesPerRead(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #95                 // Method setMaxMessagesPerRead:(I)Lio/netty/channel/kqueue/KQueueDatagramChannelConfig;
       5: areturn

  public io.netty.channel.socket.DatagramChannelConfig setNetworkInterface(java.net.NetworkInterface);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #46                 // Method setNetworkInterface:(Ljava/net/NetworkInterface;)Lio/netty/channel/kqueue/KQueueDatagramChannelConfig;
       5: areturn

  public io.netty.channel.socket.DatagramChannelConfig setInterface(java.net.InetAddress);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #44                 // Method setInterface:(Ljava/net/InetAddress;)Lio/netty/channel/kqueue/KQueueDatagramChannelConfig;
       5: areturn

  public io.netty.channel.socket.DatagramChannelConfig setTimeToLive(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #47                 // Method setTimeToLive:(I)Lio/netty/channel/kqueue/KQueueDatagramChannelConfig;
       5: areturn

  public io.netty.channel.socket.DatagramChannelConfig setBroadcast(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #36                 // Method setBroadcast:(Z)Lio/netty/channel/kqueue/KQueueDatagramChannelConfig;
       5: areturn

  public io.netty.channel.socket.DatagramChannelConfig setReuseAddress(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #41                 // Method setReuseAddress:(Z)Lio/netty/channel/kqueue/KQueueDatagramChannelConfig;
       5: areturn

  public io.netty.channel.socket.DatagramChannelConfig setTrafficClass(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #48                 // Method setTrafficClass:(I)Lio/netty/channel/kqueue/KQueueDatagramChannelConfig;
       5: areturn

  public io.netty.channel.socket.DatagramChannelConfig setReceiveBufferSize(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #39                 // Method setReceiveBufferSize:(I)Lio/netty/channel/kqueue/KQueueDatagramChannelConfig;
       5: areturn

  public io.netty.channel.socket.DatagramChannelConfig setSendBufferSize(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #40                 // Method setSendBufferSize:(I)Lio/netty/channel/kqueue/KQueueDatagramChannelConfig;
       5: areturn

  static {};
    Code:
       0: new           #99                 // class io/netty/channel/FixedRecvByteBufAllocator
       3: dup
       4: sipush        2048
       7: invokespecial #100                // Method io/netty/channel/FixedRecvByteBufAllocator."<init>":(I)V
      10: putstatic     #3                  // Field DEFAULT_RCVBUF_ALLOCATOR:Lio/netty/channel/RecvByteBufAllocator;
      13: return
}
