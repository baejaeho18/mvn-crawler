Compiled from "AbstractKQueueChannel.java"
abstract class io.netty.channel.kqueue.AbstractKQueueChannel$AbstractKQueueUnsafe extends io.netty.channel.AbstractChannel$AbstractUnsafe {
  boolean readPending;

  boolean maybeMoreDataToRead;

  private io.netty.channel.kqueue.KQueueRecvByteAllocatorHandle allocHandle;

  private final java.lang.Runnable readReadyRunnable;

  static final boolean $assertionsDisabled;

  final io.netty.channel.kqueue.AbstractKQueueChannel this$0;

  io.netty.channel.kqueue.AbstractKQueueChannel$AbstractKQueueUnsafe(io.netty.channel.kqueue.AbstractKQueueChannel);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lio/netty/channel/kqueue/AbstractKQueueChannel;
       5: aload_0
       6: aload_1
       7: invokespecial #2                  // Method io/netty/channel/AbstractChannel$AbstractUnsafe."<init>":(Lio/netty/channel/AbstractChannel;)V
      10: aload_0
      11: new           #3                  // class io/netty/channel/kqueue/AbstractKQueueChannel$AbstractKQueueUnsafe$1
      14: dup
      15: aload_0
      16: invokespecial #4                  // Method io/netty/channel/kqueue/AbstractKQueueChannel$AbstractKQueueUnsafe$1."<init>":(Lio/netty/channel/kqueue/AbstractKQueueChannel$AbstractKQueueUnsafe;)V
      19: putfield      #5                  // Field readReadyRunnable:Ljava/lang/Runnable;
      22: return

  final void readReady(long);
    Code:
       0: aload_0
       1: invokevirtual #6                  // Method recvBufAllocHandle:()Lio/netty/channel/kqueue/KQueueRecvByteAllocatorHandle;
       4: astore_3
       5: aload_3
       6: lload_1
       7: invokevirtual #7                  // Method io/netty/channel/kqueue/KQueueRecvByteAllocatorHandle.numberBytesPending:(J)V
      10: aload_0
      11: aload_3
      12: invokevirtual #8                  // Method readReady:(Lio/netty/channel/kqueue/KQueueRecvByteAllocatorHandle;)V
      15: return

  abstract void readReady(io.netty.channel.kqueue.KQueueRecvByteAllocatorHandle);

  final void readReadyBefore();
    Code:
       0: aload_0
       1: iconst_0
       2: putfield      #9                  // Field maybeMoreDataToRead:Z
       5: return

  final void readReadyFinally(io.netty.channel.ChannelConfig);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #10                 // Field allocHandle:Lio/netty/channel/kqueue/KQueueRecvByteAllocatorHandle;
       5: invokevirtual #11                 // Method io/netty/channel/kqueue/KQueueRecvByteAllocatorHandle.maybeMoreDataToRead:()Z
       8: putfield      #9                  // Field maybeMoreDataToRead:Z
      11: aload_0
      12: getfield      #12                 // Field readPending:Z
      15: ifne          34
      18: aload_1
      19: invokeinterface #13,  1           // InterfaceMethod io/netty/channel/ChannelConfig.isAutoRead:()Z
      24: ifne          34
      27: aload_0
      28: invokevirtual #14                 // Method clearReadFilter0:()V
      31: goto          53
      34: aload_0
      35: getfield      #12                 // Field readPending:Z
      38: ifeq          53
      41: aload_0
      42: getfield      #9                  // Field maybeMoreDataToRead:Z
      45: ifeq          53
      48: aload_0
      49: aload_1
      50: invokevirtual #15                 // Method executeReadReadyRunnable:(Lio/netty/channel/ChannelConfig;)V
      53: return

  void writeReady();
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lio/netty/channel/kqueue/AbstractKQueueChannel;
       4: getfield      #16                 // Field io/netty/channel/kqueue/AbstractKQueueChannel.socket:Lio/netty/channel/kqueue/BsdSocket;
       7: invokevirtual #17                 // Method io/netty/channel/kqueue/BsdSocket.isOutputShutdown:()Z
      10: ifeq          14
      13: return
      14: aload_0
      15: invokespecial #18                 // Method io/netty/channel/AbstractChannel$AbstractUnsafe.flush0:()V
      18: return

  void shutdownInput(boolean);
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lio/netty/channel/kqueue/AbstractKQueueChannel;
       4: getfield      #16                 // Field io/netty/channel/kqueue/AbstractKQueueChannel.socket:Lio/netty/channel/kqueue/BsdSocket;
       7: invokevirtual #19                 // Method io/netty/channel/kqueue/BsdSocket.isInputShutdown:()Z
      10: ifne          85
      13: aload_0
      14: getfield      #1                  // Field this$0:Lio/netty/channel/kqueue/AbstractKQueueChannel;
      17: aload_0
      18: getfield      #1                  // Field this$0:Lio/netty/channel/kqueue/AbstractKQueueChannel;
      21: invokevirtual #20                 // Method io/netty/channel/kqueue/AbstractKQueueChannel.config:()Lio/netty/channel/kqueue/KQueueChannelConfig;
      24: invokevirtual #21                 // Method io/netty/channel/kqueue/AbstractKQueueChannel.isAllowHalfClosure:(Lio/netty/channel/ChannelConfig;)Z
      27: ifeq          74
      30: aload_0
      31: getfield      #1                  // Field this$0:Lio/netty/channel/kqueue/AbstractKQueueChannel;
      34: getfield      #16                 // Field io/netty/channel/kqueue/AbstractKQueueChannel.socket:Lio/netty/channel/kqueue/BsdSocket;
      37: iconst_1
      38: iconst_0
      39: invokevirtual #22                 // Method io/netty/channel/kqueue/BsdSocket.shutdown:(ZZ)V
      42: goto          55
      45: astore_2
      46: aload_0
      47: getstatic     #24                 // Field io/netty/channel/socket/ChannelInputShutdownEvent.INSTANCE:Lio/netty/channel/socket/ChannelInputShutdownEvent;
      50: invokespecial #25                 // Method fireEventAndClose:(Ljava/lang/Object;)V
      53: return
      54: astore_2
      55: aload_0
      56: getfield      #1                  // Field this$0:Lio/netty/channel/kqueue/AbstractKQueueChannel;
      59: invokevirtual #27                 // Method io/netty/channel/kqueue/AbstractKQueueChannel.pipeline:()Lio/netty/channel/ChannelPipeline;
      62: getstatic     #24                 // Field io/netty/channel/socket/ChannelInputShutdownEvent.INSTANCE:Lio/netty/channel/socket/ChannelInputShutdownEvent;
      65: invokeinterface #28,  2           // InterfaceMethod io/netty/channel/ChannelPipeline.fireUserEventTriggered:(Ljava/lang/Object;)Lio/netty/channel/ChannelPipeline;
      70: pop
      71: goto          113
      74: aload_0
      75: aload_0
      76: invokevirtual #29                 // Method voidPromise:()Lio/netty/channel/ChannelPromise;
      79: invokevirtual #30                 // Method close:(Lio/netty/channel/ChannelPromise;)V
      82: goto          113
      85: iload_1
      86: ifne          113
      89: aload_0
      90: getfield      #1                  // Field this$0:Lio/netty/channel/kqueue/AbstractKQueueChannel;
      93: iconst_1
      94: putfield      #31                 // Field io/netty/channel/kqueue/AbstractKQueueChannel.inputClosedSeenErrorOnRead:Z
      97: aload_0
      98: getfield      #1                  // Field this$0:Lio/netty/channel/kqueue/AbstractKQueueChannel;
     101: invokevirtual #27                 // Method io/netty/channel/kqueue/AbstractKQueueChannel.pipeline:()Lio/netty/channel/ChannelPipeline;
     104: getstatic     #32                 // Field io/netty/channel/socket/ChannelInputShutdownReadComplete.INSTANCE:Lio/netty/channel/socket/ChannelInputShutdownReadComplete;
     107: invokeinterface #28,  2           // InterfaceMethod io/netty/channel/ChannelPipeline.fireUserEventTriggered:(Ljava/lang/Object;)Lio/netty/channel/ChannelPipeline;
     112: pop
     113: return
    Exception table:
       from    to  target type
          30    42    45   Class java/io/IOException
          30    42    54   Class java/nio/channels/NotYetConnectedException

  final void readEOF();
    Code:
       0: aload_0
       1: invokevirtual #6                  // Method recvBufAllocHandle:()Lio/netty/channel/kqueue/KQueueRecvByteAllocatorHandle;
       4: astore_1
       5: aload_1
       6: invokevirtual #33                 // Method io/netty/channel/kqueue/KQueueRecvByteAllocatorHandle.readEOF:()V
       9: aload_0
      10: getfield      #1                  // Field this$0:Lio/netty/channel/kqueue/AbstractKQueueChannel;
      13: invokevirtual #34                 // Method io/netty/channel/kqueue/AbstractKQueueChannel.isActive:()Z
      16: ifeq          27
      19: aload_0
      20: aload_1
      21: invokevirtual #8                  // Method readReady:(Lio/netty/channel/kqueue/KQueueRecvByteAllocatorHandle;)V
      24: goto          32
      27: aload_0
      28: iconst_1
      29: invokevirtual #35                 // Method shutdownInput:(Z)V
      32: return

  public io.netty.channel.kqueue.KQueueRecvByteAllocatorHandle recvBufAllocHandle();
    Code:
       0: aload_0
       1: getfield      #10                 // Field allocHandle:Lio/netty/channel/kqueue/KQueueRecvByteAllocatorHandle;
       4: ifnonnull     25
       7: aload_0
       8: new           #36                 // class io/netty/channel/kqueue/KQueueRecvByteAllocatorHandle
      11: dup
      12: aload_0
      13: invokespecial #37                 // Method io/netty/channel/AbstractChannel$AbstractUnsafe.recvBufAllocHandle:()Lio/netty/channel/RecvByteBufAllocator$Handle;
      16: checkcast     #38                 // class io/netty/channel/RecvByteBufAllocator$ExtendedHandle
      19: invokespecial #39                 // Method io/netty/channel/kqueue/KQueueRecvByteAllocatorHandle."<init>":(Lio/netty/channel/RecvByteBufAllocator$ExtendedHandle;)V
      22: putfield      #10                 // Field allocHandle:Lio/netty/channel/kqueue/KQueueRecvByteAllocatorHandle;
      25: aload_0
      26: getfield      #10                 // Field allocHandle:Lio/netty/channel/kqueue/KQueueRecvByteAllocatorHandle;
      29: areturn

  final void executeReadReadyRunnable(io.netty.channel.ChannelConfig);
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lio/netty/channel/kqueue/AbstractKQueueChannel;
       4: getfield      #40                 // Field io/netty/channel/kqueue/AbstractKQueueChannel.readReadyRunnablePending:Z
       7: ifne          31
      10: aload_0
      11: getfield      #1                  // Field this$0:Lio/netty/channel/kqueue/AbstractKQueueChannel;
      14: invokevirtual #34                 // Method io/netty/channel/kqueue/AbstractKQueueChannel.isActive:()Z
      17: ifeq          31
      20: aload_0
      21: getfield      #1                  // Field this$0:Lio/netty/channel/kqueue/AbstractKQueueChannel;
      24: aload_1
      25: invokevirtual #41                 // Method io/netty/channel/kqueue/AbstractKQueueChannel.shouldBreakReadReady:(Lio/netty/channel/ChannelConfig;)Z
      28: ifeq          32
      31: return
      32: aload_0
      33: getfield      #1                  // Field this$0:Lio/netty/channel/kqueue/AbstractKQueueChannel;
      36: iconst_1
      37: putfield      #40                 // Field io/netty/channel/kqueue/AbstractKQueueChannel.readReadyRunnablePending:Z
      40: aload_0
      41: getfield      #1                  // Field this$0:Lio/netty/channel/kqueue/AbstractKQueueChannel;
      44: invokevirtual #42                 // Method io/netty/channel/kqueue/AbstractKQueueChannel.eventLoop:()Lio/netty/channel/EventLoop;
      47: aload_0
      48: getfield      #5                  // Field readReadyRunnable:Ljava/lang/Runnable;
      51: invokeinterface #43,  2           // InterfaceMethod io/netty/channel/EventLoop.execute:(Ljava/lang/Runnable;)V
      56: return

  protected final void clearReadFilter0();
    Code:
       0: getstatic     #44                 // Field $assertionsDisabled:Z
       3: ifne          29
       6: aload_0
       7: getfield      #1                  // Field this$0:Lio/netty/channel/kqueue/AbstractKQueueChannel;
      10: invokevirtual #42                 // Method io/netty/channel/kqueue/AbstractKQueueChannel.eventLoop:()Lio/netty/channel/EventLoop;
      13: invokeinterface #45,  1           // InterfaceMethod io/netty/channel/EventLoop.inEventLoop:()Z
      18: ifne          29
      21: new           #46                 // class java/lang/AssertionError
      24: dup
      25: invokespecial #47                 // Method java/lang/AssertionError."<init>":()V
      28: athrow
      29: aload_0
      30: iconst_0
      31: putfield      #12                 // Field readPending:Z
      34: aload_0
      35: getfield      #1                  // Field this$0:Lio/netty/channel/kqueue/AbstractKQueueChannel;
      38: iconst_0
      39: invokevirtual #48                 // Method io/netty/channel/kqueue/AbstractKQueueChannel.readFilter:(Z)V
      42: goto          84
      45: astore_1
      46: aload_0
      47: getfield      #1                  // Field this$0:Lio/netty/channel/kqueue/AbstractKQueueChannel;
      50: invokevirtual #27                 // Method io/netty/channel/kqueue/AbstractKQueueChannel.pipeline:()Lio/netty/channel/ChannelPipeline;
      53: aload_1
      54: invokeinterface #49,  2           // InterfaceMethod io/netty/channel/ChannelPipeline.fireExceptionCaught:(Ljava/lang/Throwable;)Lio/netty/channel/ChannelPipeline;
      59: pop
      60: aload_0
      61: getfield      #1                  // Field this$0:Lio/netty/channel/kqueue/AbstractKQueueChannel;
      64: invokevirtual #50                 // Method io/netty/channel/kqueue/AbstractKQueueChannel.unsafe:()Lio/netty/channel/Channel$Unsafe;
      67: aload_0
      68: getfield      #1                  // Field this$0:Lio/netty/channel/kqueue/AbstractKQueueChannel;
      71: invokevirtual #50                 // Method io/netty/channel/kqueue/AbstractKQueueChannel.unsafe:()Lio/netty/channel/Channel$Unsafe;
      74: invokeinterface #51,  1           // InterfaceMethod io/netty/channel/Channel$Unsafe.voidPromise:()Lio/netty/channel/ChannelPromise;
      79: invokeinterface #52,  2           // InterfaceMethod io/netty/channel/Channel$Unsafe.close:(Lio/netty/channel/ChannelPromise;)V
      84: return
    Exception table:
       from    to  target type
          29    42    45   Class java/io/IOException

  private void fireEventAndClose(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lio/netty/channel/kqueue/AbstractKQueueChannel;
       4: invokevirtual #27                 // Method io/netty/channel/kqueue/AbstractKQueueChannel.pipeline:()Lio/netty/channel/ChannelPipeline;
       7: aload_1
       8: invokeinterface #28,  2           // InterfaceMethod io/netty/channel/ChannelPipeline.fireUserEventTriggered:(Ljava/lang/Object;)Lio/netty/channel/ChannelPipeline;
      13: pop
      14: aload_0
      15: aload_0
      16: invokevirtual #29                 // Method voidPromise:()Lio/netty/channel/ChannelPromise;
      19: invokevirtual #30                 // Method close:(Lio/netty/channel/ChannelPromise;)V
      22: return

  public io.netty.channel.RecvByteBufAllocator$Handle recvBufAllocHandle();
    Code:
       0: aload_0
       1: invokevirtual #6                  // Method recvBufAllocHandle:()Lio/netty/channel/kqueue/KQueueRecvByteAllocatorHandle;
       4: areturn

  static {};
    Code:
       0: ldc           #53                 // class io/netty/channel/kqueue/AbstractKQueueChannel
       2: invokevirtual #54                 // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #44                 // Field $assertionsDisabled:Z
      16: return
}
