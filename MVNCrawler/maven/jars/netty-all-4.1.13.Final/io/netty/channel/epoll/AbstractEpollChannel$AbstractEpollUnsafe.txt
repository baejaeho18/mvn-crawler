Compiled from "AbstractEpollChannel.java"
public abstract class io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe extends io.netty.channel.AbstractChannel$AbstractUnsafe {
  boolean readPending;

  boolean maybeMoreDataToRead;

  private io.netty.channel.epoll.EpollRecvByteAllocatorHandle allocHandle;

  private final java.lang.Runnable epollInReadyRunnable;

  static final boolean $assertionsDisabled;

  final io.netty.channel.epoll.AbstractEpollChannel this$0;

  protected io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe(io.netty.channel.epoll.AbstractEpollChannel);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
       5: aload_0
       6: aload_1
       7: invokespecial #2                  // Method io/netty/channel/AbstractChannel$AbstractUnsafe."<init>":(Lio/netty/channel/AbstractChannel;)V
      10: aload_0
      11: new           #3                  // class io/netty/channel/epoll/AbstractEpollChannel$AbstractEpollUnsafe$1
      14: dup
      15: aload_0
      16: invokespecial #4                  // Method io/netty/channel/epoll/AbstractEpollChannel$AbstractEpollUnsafe$1."<init>":(Lio/netty/channel/epoll/AbstractEpollChannel$AbstractEpollUnsafe;)V
      19: putfield      #5                  // Field epollInReadyRunnable:Ljava/lang/Runnable;
      22: return

  abstract void epollInReady();

  final void epollInBefore();
    Code:
       0: aload_0
       1: iconst_0
       2: putfield      #6                  // Field maybeMoreDataToRead:Z
       5: return

  final void epollInFinally(io.netty.channel.ChannelConfig);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #7                  // Field allocHandle:Lio/netty/channel/epoll/EpollRecvByteAllocatorHandle;
       5: invokevirtual #8                  // Method io/netty/channel/epoll/EpollRecvByteAllocatorHandle.isEdgeTriggered:()Z
       8: ifeq          25
      11: aload_0
      12: getfield      #7                  // Field allocHandle:Lio/netty/channel/epoll/EpollRecvByteAllocatorHandle;
      15: invokevirtual #9                  // Method io/netty/channel/epoll/EpollRecvByteAllocatorHandle.maybeMoreDataToRead:()Z
      18: ifeq          25
      21: iconst_1
      22: goto          26
      25: iconst_0
      26: putfield      #6                  // Field maybeMoreDataToRead:Z
      29: aload_0
      30: getfield      #10                 // Field readPending:Z
      33: ifne          55
      36: aload_1
      37: invokeinterface #11,  1           // InterfaceMethod io/netty/channel/ChannelConfig.isAutoRead:()Z
      42: ifne          55
      45: aload_0
      46: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      49: invokevirtual #12                 // Method io/netty/channel/epoll/AbstractEpollChannel.clearEpollIn:()V
      52: goto          74
      55: aload_0
      56: getfield      #10                 // Field readPending:Z
      59: ifeq          74
      62: aload_0
      63: getfield      #6                  // Field maybeMoreDataToRead:Z
      66: ifeq          74
      69: aload_0
      70: aload_1
      71: invokevirtual #13                 // Method executeEpollInReadyRunnable:(Lio/netty/channel/ChannelConfig;)V
      74: return

  final void executeEpollInReadyRunnable(io.netty.channel.ChannelConfig);
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
       4: getfield      #14                 // Field io/netty/channel/epoll/AbstractEpollChannel.epollInReadyRunnablePending:Z
       7: ifne          31
      10: aload_0
      11: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      14: invokevirtual #15                 // Method io/netty/channel/epoll/AbstractEpollChannel.isActive:()Z
      17: ifeq          31
      20: aload_0
      21: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      24: aload_1
      25: invokevirtual #16                 // Method io/netty/channel/epoll/AbstractEpollChannel.shouldBreakEpollInReady:(Lio/netty/channel/ChannelConfig;)Z
      28: ifeq          32
      31: return
      32: aload_0
      33: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      36: iconst_1
      37: putfield      #14                 // Field io/netty/channel/epoll/AbstractEpollChannel.epollInReadyRunnablePending:Z
      40: aload_0
      41: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      44: invokevirtual #17                 // Method io/netty/channel/epoll/AbstractEpollChannel.eventLoop:()Lio/netty/channel/EventLoop;
      47: aload_0
      48: getfield      #5                  // Field epollInReadyRunnable:Ljava/lang/Runnable;
      51: invokeinterface #18,  2           // InterfaceMethod io/netty/channel/EventLoop.execute:(Ljava/lang/Runnable;)V
      56: return

  final void epollRdHupReady();
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method recvBufAllocHandle:()Lio/netty/channel/epoll/EpollRecvByteAllocatorHandle;
       4: invokevirtual #20                 // Method io/netty/channel/epoll/EpollRecvByteAllocatorHandle.receivedRdHup:()V
       7: aload_0
       8: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      11: invokevirtual #15                 // Method io/netty/channel/epoll/AbstractEpollChannel.isActive:()Z
      14: ifeq          24
      17: aload_0
      18: invokevirtual #21                 // Method epollInReady:()V
      21: goto          29
      24: aload_0
      25: iconst_1
      26: invokevirtual #22                 // Method shutdownInput:(Z)V
      29: aload_0
      30: invokespecial #23                 // Method clearEpollRdHup:()V
      33: return

  private void clearEpollRdHup();
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
       4: getstatic     #24                 // Field io/netty/channel/epoll/Native.EPOLLRDHUP:I
       7: invokevirtual #25                 // Method io/netty/channel/epoll/AbstractEpollChannel.clearFlag:(I)V
      10: goto          36
      13: astore_1
      14: aload_0
      15: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      18: invokevirtual #27                 // Method io/netty/channel/epoll/AbstractEpollChannel.pipeline:()Lio/netty/channel/ChannelPipeline;
      21: aload_1
      22: invokeinterface #28,  2           // InterfaceMethod io/netty/channel/ChannelPipeline.fireExceptionCaught:(Ljava/lang/Throwable;)Lio/netty/channel/ChannelPipeline;
      27: pop
      28: aload_0
      29: aload_0
      30: invokevirtual #29                 // Method voidPromise:()Lio/netty/channel/ChannelPromise;
      33: invokevirtual #30                 // Method close:(Lio/netty/channel/ChannelPromise;)V
      36: return
    Exception table:
       from    to  target type
           0    10    13   Class java/io/IOException

  void shutdownInput(boolean);
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
       4: getfield      #31                 // Field io/netty/channel/epoll/AbstractEpollChannel.socket:Lio/netty/channel/epoll/LinuxSocket;
       7: invokevirtual #32                 // Method io/netty/channel/epoll/LinuxSocket.isInputShutdown:()Z
      10: ifne          92
      13: aload_0
      14: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      17: aload_0
      18: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      21: invokevirtual #33                 // Method io/netty/channel/epoll/AbstractEpollChannel.config:()Lio/netty/channel/epoll/EpollChannelConfig;
      24: invokevirtual #34                 // Method io/netty/channel/epoll/AbstractEpollChannel.isAllowHalfClosure:(Lio/netty/channel/ChannelConfig;)Z
      27: ifeq          81
      30: aload_0
      31: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      34: getfield      #31                 // Field io/netty/channel/epoll/AbstractEpollChannel.socket:Lio/netty/channel/epoll/LinuxSocket;
      37: iconst_1
      38: iconst_0
      39: invokevirtual #35                 // Method io/netty/channel/epoll/LinuxSocket.shutdown:(ZZ)V
      42: goto          55
      45: astore_2
      46: aload_0
      47: getstatic     #36                 // Field io/netty/channel/socket/ChannelInputShutdownEvent.INSTANCE:Lio/netty/channel/socket/ChannelInputShutdownEvent;
      50: invokespecial #37                 // Method fireEventAndClose:(Ljava/lang/Object;)V
      53: return
      54: astore_2
      55: aload_0
      56: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      59: invokevirtual #12                 // Method io/netty/channel/epoll/AbstractEpollChannel.clearEpollIn:()V
      62: aload_0
      63: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      66: invokevirtual #27                 // Method io/netty/channel/epoll/AbstractEpollChannel.pipeline:()Lio/netty/channel/ChannelPipeline;
      69: getstatic     #36                 // Field io/netty/channel/socket/ChannelInputShutdownEvent.INSTANCE:Lio/netty/channel/socket/ChannelInputShutdownEvent;
      72: invokeinterface #39,  2           // InterfaceMethod io/netty/channel/ChannelPipeline.fireUserEventTriggered:(Ljava/lang/Object;)Lio/netty/channel/ChannelPipeline;
      77: pop
      78: goto          120
      81: aload_0
      82: aload_0
      83: invokevirtual #29                 // Method voidPromise:()Lio/netty/channel/ChannelPromise;
      86: invokevirtual #30                 // Method close:(Lio/netty/channel/ChannelPromise;)V
      89: goto          120
      92: iload_1
      93: ifne          120
      96: aload_0
      97: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
     100: iconst_1
     101: putfield      #40                 // Field io/netty/channel/epoll/AbstractEpollChannel.inputClosedSeenErrorOnRead:Z
     104: aload_0
     105: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
     108: invokevirtual #27                 // Method io/netty/channel/epoll/AbstractEpollChannel.pipeline:()Lio/netty/channel/ChannelPipeline;
     111: getstatic     #41                 // Field io/netty/channel/socket/ChannelInputShutdownReadComplete.INSTANCE:Lio/netty/channel/socket/ChannelInputShutdownReadComplete;
     114: invokeinterface #39,  2           // InterfaceMethod io/netty/channel/ChannelPipeline.fireUserEventTriggered:(Ljava/lang/Object;)Lio/netty/channel/ChannelPipeline;
     119: pop
     120: return
    Exception table:
       from    to  target type
          30    42    45   Class java/io/IOException
          30    42    54   Class java/nio/channels/NotYetConnectedException

  private void fireEventAndClose(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
       4: invokevirtual #27                 // Method io/netty/channel/epoll/AbstractEpollChannel.pipeline:()Lio/netty/channel/ChannelPipeline;
       7: aload_1
       8: invokeinterface #39,  2           // InterfaceMethod io/netty/channel/ChannelPipeline.fireUserEventTriggered:(Ljava/lang/Object;)Lio/netty/channel/ChannelPipeline;
      13: pop
      14: aload_0
      15: aload_0
      16: invokevirtual #29                 // Method voidPromise:()Lio/netty/channel/ChannelPromise;
      19: invokevirtual #30                 // Method close:(Lio/netty/channel/ChannelPromise;)V
      22: return

  public io.netty.channel.epoll.EpollRecvByteAllocatorHandle recvBufAllocHandle();
    Code:
       0: aload_0
       1: getfield      #7                  // Field allocHandle:Lio/netty/channel/epoll/EpollRecvByteAllocatorHandle;
       4: ifnonnull     22
       7: aload_0
       8: aload_0
       9: aload_0
      10: invokespecial #42                 // Method io/netty/channel/AbstractChannel$AbstractUnsafe.recvBufAllocHandle:()Lio/netty/channel/RecvByteBufAllocator$Handle;
      13: checkcast     #43                 // class io/netty/channel/RecvByteBufAllocator$ExtendedHandle
      16: invokevirtual #44                 // Method newEpollHandle:(Lio/netty/channel/RecvByteBufAllocator$ExtendedHandle;)Lio/netty/channel/epoll/EpollRecvByteAllocatorHandle;
      19: putfield      #7                  // Field allocHandle:Lio/netty/channel/epoll/EpollRecvByteAllocatorHandle;
      22: aload_0
      23: getfield      #7                  // Field allocHandle:Lio/netty/channel/epoll/EpollRecvByteAllocatorHandle;
      26: areturn

  io.netty.channel.epoll.EpollRecvByteAllocatorHandle newEpollHandle(io.netty.channel.RecvByteBufAllocator$ExtendedHandle);
    Code:
       0: new           #45                 // class io/netty/channel/epoll/EpollRecvByteAllocatorHandle
       3: dup
       4: aload_1
       5: invokespecial #46                 // Method io/netty/channel/epoll/EpollRecvByteAllocatorHandle."<init>":(Lio/netty/channel/RecvByteBufAllocator$ExtendedHandle;)V
       8: areturn

  protected void flush0();
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
       4: getstatic     #47                 // Field io/netty/channel/epoll/Native.EPOLLOUT:I
       7: invokevirtual #48                 // Method io/netty/channel/epoll/AbstractEpollChannel.isFlagSet:(I)Z
      10: ifeq          14
      13: return
      14: aload_0
      15: invokespecial #49                 // Method io/netty/channel/AbstractChannel$AbstractUnsafe.flush0:()V
      18: return

  void epollOutReady();
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
       4: getfield      #31                 // Field io/netty/channel/epoll/AbstractEpollChannel.socket:Lio/netty/channel/epoll/LinuxSocket;
       7: invokevirtual #50                 // Method io/netty/channel/epoll/LinuxSocket.isOutputShutdown:()Z
      10: ifeq          14
      13: return
      14: aload_0
      15: invokespecial #49                 // Method io/netty/channel/AbstractChannel$AbstractUnsafe.flush0:()V
      18: return

  protected final void clearEpollIn0();
    Code:
       0: getstatic     #51                 // Field $assertionsDisabled:Z
       3: ifne          29
       6: aload_0
       7: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      10: invokevirtual #17                 // Method io/netty/channel/epoll/AbstractEpollChannel.eventLoop:()Lio/netty/channel/EventLoop;
      13: invokeinterface #52,  1           // InterfaceMethod io/netty/channel/EventLoop.inEventLoop:()Z
      18: ifne          29
      21: new           #53                 // class java/lang/AssertionError
      24: dup
      25: invokespecial #54                 // Method java/lang/AssertionError."<init>":()V
      28: athrow
      29: aload_0
      30: iconst_0
      31: putfield      #10                 // Field readPending:Z
      34: aload_0
      35: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      38: aload_0
      39: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      42: invokestatic  #55                 // Method io/netty/channel/epoll/AbstractEpollChannel.access$000:(Lio/netty/channel/epoll/AbstractEpollChannel;)I
      45: invokevirtual #25                 // Method io/netty/channel/epoll/AbstractEpollChannel.clearFlag:(I)V
      48: goto          90
      51: astore_1
      52: aload_0
      53: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      56: invokevirtual #27                 // Method io/netty/channel/epoll/AbstractEpollChannel.pipeline:()Lio/netty/channel/ChannelPipeline;
      59: aload_1
      60: invokeinterface #28,  2           // InterfaceMethod io/netty/channel/ChannelPipeline.fireExceptionCaught:(Ljava/lang/Throwable;)Lio/netty/channel/ChannelPipeline;
      65: pop
      66: aload_0
      67: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      70: invokevirtual #56                 // Method io/netty/channel/epoll/AbstractEpollChannel.unsafe:()Lio/netty/channel/Channel$Unsafe;
      73: aload_0
      74: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      77: invokevirtual #56                 // Method io/netty/channel/epoll/AbstractEpollChannel.unsafe:()Lio/netty/channel/Channel$Unsafe;
      80: invokeinterface #57,  1           // InterfaceMethod io/netty/channel/Channel$Unsafe.voidPromise:()Lio/netty/channel/ChannelPromise;
      85: invokeinterface #58,  2           // InterfaceMethod io/netty/channel/Channel$Unsafe.close:(Lio/netty/channel/ChannelPromise;)V
      90: return
    Exception table:
       from    to  target type
          29    48    51   Class java/io/IOException

  public io.netty.channel.RecvByteBufAllocator$Handle recvBufAllocHandle();
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method recvBufAllocHandle:()Lio/netty/channel/epoll/EpollRecvByteAllocatorHandle;
       4: areturn

  static {};
    Code:
       0: ldc           #59                 // class io/netty/channel/epoll/AbstractEpollChannel
       2: invokevirtual #60                 // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #51                 // Field $assertionsDisabled:Z
      16: return
}
