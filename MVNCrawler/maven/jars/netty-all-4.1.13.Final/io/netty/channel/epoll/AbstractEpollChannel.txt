Compiled from "AbstractEpollChannel.java"
abstract class io.netty.channel.epoll.AbstractEpollChannel extends io.netty.channel.AbstractChannel implements io.netty.channel.unix.UnixChannel {
  private static final io.netty.channel.ChannelMetadata METADATA;

  private final int readFlag;

  final io.netty.channel.epoll.LinuxSocket socket;

  protected int flags;

  boolean inputClosedSeenErrorOnRead;

  boolean epollInReadyRunnablePending;

  protected volatile boolean active;

  io.netty.channel.epoll.AbstractEpollChannel(io.netty.channel.epoll.LinuxSocket, int);
    Code:
       0: aload_0
       1: aconst_null
       2: aload_1
       3: iload_2
       4: iconst_0
       5: invokespecial #2                  // Method "<init>":(Lio/netty/channel/Channel;Lio/netty/channel/epoll/LinuxSocket;IZ)V
       8: return

  io.netty.channel.epoll.AbstractEpollChannel(io.netty.channel.Channel, io.netty.channel.epoll.LinuxSocket, int, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #3                  // Method io/netty/channel/AbstractChannel."<init>":(Lio/netty/channel/Channel;)V
       5: aload_0
       6: getstatic     #4                  // Field io/netty/channel/epoll/Native.EPOLLET:I
       9: putfield      #5                  // Field flags:I
      12: aload_0
      13: aload_2
      14: ldc           #6                  // String fd
      16: invokestatic  #7                  // Method io/netty/util/internal/ObjectUtil.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      19: checkcast     #8                  // class io/netty/channel/epoll/LinuxSocket
      22: putfield      #9                  // Field socket:Lio/netty/channel/epoll/LinuxSocket;
      25: aload_0
      26: iload_3
      27: putfield      #1                  // Field readFlag:I
      30: aload_0
      31: dup
      32: getfield      #5                  // Field flags:I
      35: iload_3
      36: ior
      37: putfield      #5                  // Field flags:I
      40: aload_0
      41: iload         4
      43: putfield      #10                 // Field active:Z
      46: return

  static boolean isSoErrorZero(io.netty.channel.unix.Socket);
    Code:
       0: aload_0
       1: invokevirtual #11                 // Method io/netty/channel/unix/Socket.getSoError:()I
       4: ifne          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn
      13: astore_1
      14: new           #13                 // class io/netty/channel/ChannelException
      17: dup
      18: aload_1
      19: invokespecial #14                 // Method io/netty/channel/ChannelException."<init>":(Ljava/lang/Throwable;)V
      22: athrow
    Exception table:
       from    to  target type
           0    12    13   Class java/io/IOException

  void setFlag(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #15                 // Method isFlagSet:(I)Z
       5: ifne          22
       8: aload_0
       9: dup
      10: getfield      #5                  // Field flags:I
      13: iload_1
      14: ior
      15: putfield      #5                  // Field flags:I
      18: aload_0
      19: invokespecial #16                 // Method modifyEvents:()V
      22: return

  void clearFlag(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #15                 // Method isFlagSet:(I)Z
       5: ifeq          24
       8: aload_0
       9: dup
      10: getfield      #5                  // Field flags:I
      13: iload_1
      14: iconst_m1
      15: ixor
      16: iand
      17: putfield      #5                  // Field flags:I
      20: aload_0
      21: invokespecial #16                 // Method modifyEvents:()V
      24: return

  boolean isFlagSet(int);
    Code:
       0: aload_0
       1: getfield      #5                  // Field flags:I
       4: iload_1
       5: iand
       6: ifeq          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn

  public final io.netty.channel.unix.FileDescriptor fd();
    Code:
       0: aload_0
       1: getfield      #9                  // Field socket:Lio/netty/channel/epoll/LinuxSocket;
       4: areturn

  public abstract io.netty.channel.epoll.EpollChannelConfig config();

  public boolean isActive();
    Code:
       0: aload_0
       1: getfield      #10                 // Field active:Z
       4: ireturn

  public io.netty.channel.ChannelMetadata metadata();
    Code:
       0: getstatic     #17                 // Field METADATA:Lio/netty/channel/ChannelMetadata;
       3: areturn

  protected void doClose() throws java.lang.Exception;
    Code:
       0: aload_0
       1: iconst_0
       2: putfield      #10                 // Field active:Z
       5: aload_0
       6: iconst_1
       7: putfield      #18                 // Field inputClosedSeenErrorOnRead:Z
      10: aload_0
      11: invokevirtual #19                 // Method isRegistered:()Z
      14: ifeq          21
      17: aload_0
      18: invokevirtual #20                 // Method doDeregister:()V
      21: aload_0
      22: getfield      #9                  // Field socket:Lio/netty/channel/epoll/LinuxSocket;
      25: invokevirtual #21                 // Method io/netty/channel/epoll/LinuxSocket.close:()V
      28: goto          41
      31: astore_1
      32: aload_0
      33: getfield      #9                  // Field socket:Lio/netty/channel/epoll/LinuxSocket;
      36: invokevirtual #21                 // Method io/netty/channel/epoll/LinuxSocket.close:()V
      39: aload_1
      40: athrow
      41: return
    Exception table:
       from    to  target type
          10    21    31   any

  protected void doDisconnect() throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokevirtual #22                 // Method doClose:()V
       4: return

  protected boolean isCompatible(io.netty.channel.EventLoop);
    Code:
       0: aload_1
       1: instanceof    #23                 // class io/netty/channel/epoll/EpollEventLoop
       4: ireturn

  public boolean isOpen();
    Code:
       0: aload_0
       1: getfield      #9                  // Field socket:Lio/netty/channel/epoll/LinuxSocket;
       4: invokevirtual #24                 // Method io/netty/channel/epoll/LinuxSocket.isOpen:()Z
       7: ireturn

  protected void doDeregister() throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokevirtual #25                 // Method eventLoop:()Lio/netty/channel/EventLoop;
       4: checkcast     #23                 // class io/netty/channel/epoll/EpollEventLoop
       7: aload_0
       8: invokevirtual #26                 // Method io/netty/channel/epoll/EpollEventLoop.remove:(Lio/netty/channel/epoll/AbstractEpollChannel;)V
      11: return

  protected final void doBeginRead() throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokevirtual #27                 // Method unsafe:()Lio/netty/channel/Channel$Unsafe;
       4: checkcast     #28                 // class io/netty/channel/epoll/AbstractEpollChannel$AbstractEpollUnsafe
       7: astore_1
       8: aload_1
       9: iconst_1
      10: putfield      #29                 // Field io/netty/channel/epoll/AbstractEpollChannel$AbstractEpollUnsafe.readPending:Z
      13: aload_0
      14: aload_0
      15: getfield      #1                  // Field readFlag:I
      18: invokevirtual #30                 // Method setFlag:(I)V
      21: aload_1
      22: getfield      #31                 // Field io/netty/channel/epoll/AbstractEpollChannel$AbstractEpollUnsafe.maybeMoreDataToRead:Z
      25: ifeq          36
      28: aload_1
      29: aload_0
      30: invokevirtual #32                 // Method config:()Lio/netty/channel/epoll/EpollChannelConfig;
      33: invokevirtual #33                 // Method io/netty/channel/epoll/AbstractEpollChannel$AbstractEpollUnsafe.executeEpollInReadyRunnable:(Lio/netty/channel/ChannelConfig;)V
      36: return

  final boolean shouldBreakEpollInReady(io.netty.channel.ChannelConfig);
    Code:
       0: aload_0
       1: getfield      #9                  // Field socket:Lio/netty/channel/epoll/LinuxSocket;
       4: invokevirtual #34                 // Method io/netty/channel/epoll/LinuxSocket.isInputShutdown:()Z
       7: ifeq          29
      10: aload_0
      11: getfield      #18                 // Field inputClosedSeenErrorOnRead:Z
      14: ifne          25
      17: aload_0
      18: aload_1
      19: invokevirtual #35                 // Method isAllowHalfClosure:(Lio/netty/channel/ChannelConfig;)Z
      22: ifne          29
      25: iconst_1
      26: goto          30
      29: iconst_0
      30: ireturn

  final boolean isAllowHalfClosure(io.netty.channel.ChannelConfig);
    Code:
       0: aload_1
       1: instanceof    #36                 // class io/netty/channel/epoll/EpollSocketChannelConfig
       4: ifeq          21
       7: aload_1
       8: checkcast     #36                 // class io/netty/channel/epoll/EpollSocketChannelConfig
      11: invokevirtual #37                 // Method io/netty/channel/epoll/EpollSocketChannelConfig.isAllowHalfClosure:()Z
      14: ifeq          21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: ireturn

  final void clearEpollIn();
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method isRegistered:()Z
       4: ifeq          54
       7: aload_0
       8: invokevirtual #25                 // Method eventLoop:()Lio/netty/channel/EventLoop;
      11: astore_1
      12: aload_0
      13: invokevirtual #27                 // Method unsafe:()Lio/netty/channel/Channel$Unsafe;
      16: checkcast     #28                 // class io/netty/channel/epoll/AbstractEpollChannel$AbstractEpollUnsafe
      19: astore_2
      20: aload_1
      21: invokeinterface #38,  1           // InterfaceMethod io/netty/channel/EventLoop.inEventLoop:()Z
      26: ifeq          36
      29: aload_2
      30: invokevirtual #39                 // Method io/netty/channel/epoll/AbstractEpollChannel$AbstractEpollUnsafe.clearEpollIn0:()V
      33: goto          51
      36: aload_1
      37: new           #40                 // class io/netty/channel/epoll/AbstractEpollChannel$1
      40: dup
      41: aload_0
      42: aload_2
      43: invokespecial #41                 // Method io/netty/channel/epoll/AbstractEpollChannel$1."<init>":(Lio/netty/channel/epoll/AbstractEpollChannel;Lio/netty/channel/epoll/AbstractEpollChannel$AbstractEpollUnsafe;)V
      46: invokeinterface #42,  2           // InterfaceMethod io/netty/channel/EventLoop.execute:(Ljava/lang/Runnable;)V
      51: goto          69
      54: aload_0
      55: dup
      56: getfield      #5                  // Field flags:I
      59: aload_0
      60: getfield      #1                  // Field readFlag:I
      63: iconst_m1
      64: ixor
      65: iand
      66: putfield      #5                  // Field flags:I
      69: return

  private void modifyEvents() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #43                 // Method isOpen:()Z
       4: ifeq          25
       7: aload_0
       8: invokevirtual #19                 // Method isRegistered:()Z
      11: ifeq          25
      14: aload_0
      15: invokevirtual #25                 // Method eventLoop:()Lio/netty/channel/EventLoop;
      18: checkcast     #23                 // class io/netty/channel/epoll/EpollEventLoop
      21: aload_0
      22: invokevirtual #44                 // Method io/netty/channel/epoll/EpollEventLoop.modify:(Lio/netty/channel/epoll/AbstractEpollChannel;)V
      25: return

  protected void doRegister() throws java.lang.Exception;
    Code:
       0: aload_0
       1: iconst_0
       2: putfield      #45                 // Field epollInReadyRunnablePending:Z
       5: aload_0
       6: invokevirtual #25                 // Method eventLoop:()Lio/netty/channel/EventLoop;
       9: checkcast     #23                 // class io/netty/channel/epoll/EpollEventLoop
      12: aload_0
      13: invokevirtual #46                 // Method io/netty/channel/epoll/EpollEventLoop.add:(Lio/netty/channel/epoll/AbstractEpollChannel;)V
      16: return

  protected abstract io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe newUnsafe();

  protected final io.netty.buffer.ByteBuf newDirectBuffer(io.netty.buffer.ByteBuf);
    Code:
       0: aload_0
       1: aload_1
       2: aload_1
       3: invokevirtual #47                 // Method newDirectBuffer:(Ljava/lang/Object;Lio/netty/buffer/ByteBuf;)Lio/netty/buffer/ByteBuf;
       6: areturn

  protected final io.netty.buffer.ByteBuf newDirectBuffer(java.lang.Object, io.netty.buffer.ByteBuf);
    Code:
       0: aload_2
       1: invokevirtual #48                 // Method io/netty/buffer/ByteBuf.readableBytes:()I
       4: istore_3
       5: iload_3
       6: ifne          17
       9: aload_1
      10: invokestatic  #49                 // Method io/netty/util/ReferenceCountUtil.safeRelease:(Ljava/lang/Object;)V
      13: getstatic     #50                 // Field io/netty/buffer/Unpooled.EMPTY_BUFFER:Lio/netty/buffer/ByteBuf;
      16: areturn
      17: aload_0
      18: invokevirtual #51                 // Method alloc:()Lio/netty/buffer/ByteBufAllocator;
      21: astore        4
      23: aload         4
      25: invokeinterface #52,  1           // InterfaceMethod io/netty/buffer/ByteBufAllocator.isDirectBufferPooled:()Z
      30: ifeq          42
      33: aload_1
      34: aload_2
      35: aload         4
      37: iload_3
      38: invokestatic  #53                 // Method newDirectBuffer0:(Ljava/lang/Object;Lio/netty/buffer/ByteBuf;Lio/netty/buffer/ByteBufAllocator;I)Lio/netty/buffer/ByteBuf;
      41: areturn
      42: invokestatic  #54                 // Method io/netty/buffer/ByteBufUtil.threadLocalDirectBuffer:()Lio/netty/buffer/ByteBuf;
      45: astore        5
      47: aload         5
      49: ifnonnull     61
      52: aload_1
      53: aload_2
      54: aload         4
      56: iload_3
      57: invokestatic  #53                 // Method newDirectBuffer0:(Ljava/lang/Object;Lio/netty/buffer/ByteBuf;Lio/netty/buffer/ByteBufAllocator;I)Lio/netty/buffer/ByteBuf;
      60: areturn
      61: aload         5
      63: aload_2
      64: aload_2
      65: invokevirtual #55                 // Method io/netty/buffer/ByteBuf.readerIndex:()I
      68: iload_3
      69: invokevirtual #56                 // Method io/netty/buffer/ByteBuf.writeBytes:(Lio/netty/buffer/ByteBuf;II)Lio/netty/buffer/ByteBuf;
      72: pop
      73: aload_1
      74: invokestatic  #49                 // Method io/netty/util/ReferenceCountUtil.safeRelease:(Ljava/lang/Object;)V
      77: aload         5
      79: areturn

  private static io.netty.buffer.ByteBuf newDirectBuffer0(java.lang.Object, io.netty.buffer.ByteBuf, io.netty.buffer.ByteBufAllocator, int);
    Code:
       0: aload_2
       1: iload_3
       2: invokeinterface #57,  2           // InterfaceMethod io/netty/buffer/ByteBufAllocator.directBuffer:(I)Lio/netty/buffer/ByteBuf;
       7: astore        4
       9: aload         4
      11: aload_1
      12: aload_1
      13: invokevirtual #55                 // Method io/netty/buffer/ByteBuf.readerIndex:()I
      16: iload_3
      17: invokevirtual #56                 // Method io/netty/buffer/ByteBuf.writeBytes:(Lio/netty/buffer/ByteBuf;II)Lio/netty/buffer/ByteBuf;
      20: pop
      21: aload_0
      22: invokestatic  #49                 // Method io/netty/util/ReferenceCountUtil.safeRelease:(Ljava/lang/Object;)V
      25: aload         4
      27: areturn

  protected static void checkResolvable(java.net.InetSocketAddress);
    Code:
       0: aload_0
       1: invokevirtual #58                 // Method java/net/InetSocketAddress.isUnresolved:()Z
       4: ifeq          15
       7: new           #59                 // class java/nio/channels/UnresolvedAddressException
      10: dup
      11: invokespecial #60                 // Method java/nio/channels/UnresolvedAddressException."<init>":()V
      14: athrow
      15: return

  protected final int doReadBytes(io.netty.buffer.ByteBuf) throws java.lang.Exception;
    Code:
       0: aload_1
       1: invokevirtual #61                 // Method io/netty/buffer/ByteBuf.writerIndex:()I
       4: istore_2
       5: aload_0
       6: invokevirtual #27                 // Method unsafe:()Lio/netty/channel/Channel$Unsafe;
       9: invokeinterface #62,  1           // InterfaceMethod io/netty/channel/Channel$Unsafe.recvBufAllocHandle:()Lio/netty/channel/RecvByteBufAllocator$Handle;
      14: aload_1
      15: invokevirtual #63                 // Method io/netty/buffer/ByteBuf.writableBytes:()I
      18: invokeinterface #64,  2           // InterfaceMethod io/netty/channel/RecvByteBufAllocator$Handle.attemptedBytesRead:(I)V
      23: aload_1
      24: invokevirtual #65                 // Method io/netty/buffer/ByteBuf.hasMemoryAddress:()Z
      27: ifeq          50
      30: aload_0
      31: getfield      #9                  // Field socket:Lio/netty/channel/epoll/LinuxSocket;
      34: aload_1
      35: invokevirtual #66                 // Method io/netty/buffer/ByteBuf.memoryAddress:()J
      38: iload_2
      39: aload_1
      40: invokevirtual #67                 // Method io/netty/buffer/ByteBuf.capacity:()I
      43: invokevirtual #68                 // Method io/netty/channel/epoll/LinuxSocket.readAddress:(JII)I
      46: istore_3
      47: goto          81
      50: aload_1
      51: iload_2
      52: aload_1
      53: invokevirtual #63                 // Method io/netty/buffer/ByteBuf.writableBytes:()I
      56: invokevirtual #69                 // Method io/netty/buffer/ByteBuf.internalNioBuffer:(II)Ljava/nio/ByteBuffer;
      59: astore        4
      61: aload_0
      62: getfield      #9                  // Field socket:Lio/netty/channel/epoll/LinuxSocket;
      65: aload         4
      67: aload         4
      69: invokevirtual #70                 // Method java/nio/ByteBuffer.position:()I
      72: aload         4
      74: invokevirtual #71                 // Method java/nio/ByteBuffer.limit:()I
      77: invokevirtual #72                 // Method io/netty/channel/epoll/LinuxSocket.read:(Ljava/nio/ByteBuffer;II)I
      80: istore_3
      81: iload_3
      82: ifle          93
      85: aload_1
      86: iload_2
      87: iload_3
      88: iadd
      89: invokevirtual #73                 // Method io/netty/buffer/ByteBuf.writerIndex:(I)Lio/netty/buffer/ByteBuf;
      92: pop
      93: iload_3
      94: ireturn

  protected final int doWriteBytes(io.netty.buffer.ByteBuf, int) throws java.lang.Exception;
    Code:
       0: aload_1
       1: invokevirtual #48                 // Method io/netty/buffer/ByteBuf.readableBytes:()I
       4: istore_3
       5: iconst_0
       6: istore        4
       8: aload_1
       9: invokevirtual #65                 // Method io/netty/buffer/ByteBuf.hasMemoryAddress:()Z
      12: ifeq          93
      15: aload_1
      16: invokevirtual #66                 // Method io/netty/buffer/ByteBuf.memoryAddress:()J
      19: lstore        5
      21: aload_1
      22: invokevirtual #55                 // Method io/netty/buffer/ByteBuf.readerIndex:()I
      25: istore        7
      27: aload_1
      28: invokevirtual #61                 // Method io/netty/buffer/ByteBuf.writerIndex:()I
      31: istore        8
      33: iload_2
      34: istore        9
      36: iload         9
      38: ifle          90
      41: aload_0
      42: getfield      #9                  // Field socket:Lio/netty/channel/epoll/LinuxSocket;
      45: lload         5
      47: iload         7
      49: iload         8
      51: invokevirtual #74                 // Method io/netty/channel/epoll/LinuxSocket.writeAddress:(JII)I
      54: istore        10
      56: iload         10
      58: ifle          90
      61: iload         4
      63: iload         10
      65: iadd
      66: istore        4
      68: iload         4
      70: iload_3
      71: if_icmpne     77
      74: iload         4
      76: ireturn
      77: iload         7
      79: iload         10
      81: iadd
      82: istore        7
      84: iinc          9, -1
      87: goto          36
      90: goto          199
      93: aload_1
      94: invokevirtual #75                 // Method io/netty/buffer/ByteBuf.nioBufferCount:()I
      97: iconst_1
      98: if_icmpne     118
     101: aload_1
     102: aload_1
     103: invokevirtual #55                 // Method io/netty/buffer/ByteBuf.readerIndex:()I
     106: aload_1
     107: invokevirtual #48                 // Method io/netty/buffer/ByteBuf.readableBytes:()I
     110: invokevirtual #69                 // Method io/netty/buffer/ByteBuf.internalNioBuffer:(II)Ljava/nio/ByteBuffer;
     113: astore        5
     115: goto          124
     118: aload_1
     119: invokevirtual #76                 // Method io/netty/buffer/ByteBuf.nioBuffer:()Ljava/nio/ByteBuffer;
     122: astore        5
     124: iload_2
     125: istore        6
     127: iload         6
     129: ifle          199
     132: aload         5
     134: invokevirtual #70                 // Method java/nio/ByteBuffer.position:()I
     137: istore        7
     139: aload         5
     141: invokevirtual #71                 // Method java/nio/ByteBuffer.limit:()I
     144: istore        8
     146: aload_0
     147: getfield      #9                  // Field socket:Lio/netty/channel/epoll/LinuxSocket;
     150: aload         5
     152: iload         7
     154: iload         8
     156: invokevirtual #77                 // Method io/netty/channel/epoll/LinuxSocket.write:(Ljava/nio/ByteBuffer;II)I
     159: istore        9
     161: iload         9
     163: ifle          199
     166: aload         5
     168: iload         7
     170: iload         9
     172: iadd
     173: invokevirtual #78                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
     176: pop
     177: iload         4
     179: iload         9
     181: iadd
     182: istore        4
     184: iload         4
     186: iload_3
     187: if_icmpne     193
     190: iload         4
     192: ireturn
     193: iinc          6, -1
     196: goto          127
     199: iload         4
     201: iload_3
     202: if_icmpge     212
     205: aload_0
     206: getstatic     #79                 // Field io/netty/channel/epoll/Native.EPOLLOUT:I
     209: invokevirtual #30                 // Method setFlag:(I)V
     212: iload         4
     214: ireturn

  protected io.netty.channel.AbstractChannel$AbstractUnsafe newUnsafe();
    Code:
       0: aload_0
       1: invokevirtual #80                 // Method newUnsafe:()Lio/netty/channel/epoll/AbstractEpollChannel$AbstractEpollUnsafe;
       4: areturn

  public io.netty.channel.ChannelConfig config();
    Code:
       0: aload_0
       1: invokevirtual #32                 // Method config:()Lio/netty/channel/epoll/EpollChannelConfig;
       4: areturn

  static int access$000(io.netty.channel.epoll.AbstractEpollChannel);
    Code:
       0: aload_0
       1: getfield      #1                  // Field readFlag:I
       4: ireturn

  static {};
    Code:
       0: new           #81                 // class io/netty/channel/ChannelMetadata
       3: dup
       4: iconst_0
       5: invokespecial #82                 // Method io/netty/channel/ChannelMetadata."<init>":(Z)V
       8: putstatic     #17                 // Field METADATA:Lio/netty/channel/ChannelMetadata;
      11: return
}
