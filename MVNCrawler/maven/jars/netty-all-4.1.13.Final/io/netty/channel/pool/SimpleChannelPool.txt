Compiled from "SimpleChannelPool.java"
public class io.netty.channel.pool.SimpleChannelPool implements io.netty.channel.pool.ChannelPool {
  private static final io.netty.util.AttributeKey<io.netty.channel.pool.SimpleChannelPool> POOL_KEY;

  private static final java.lang.IllegalStateException FULL_EXCEPTION;

  private final java.util.Deque<io.netty.channel.Channel> deque;

  private final io.netty.channel.pool.ChannelPoolHandler handler;

  private final io.netty.channel.pool.ChannelHealthChecker healthCheck;

  private final io.netty.bootstrap.Bootstrap bootstrap;

  private final boolean releaseHealthCheck;

  static final boolean $assertionsDisabled;

  public io.netty.channel.pool.SimpleChannelPool(io.netty.bootstrap.Bootstrap, io.netty.channel.pool.ChannelPoolHandler);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: getstatic     #6                  // Field io/netty/channel/pool/ChannelHealthChecker.ACTIVE:Lio/netty/channel/pool/ChannelHealthChecker;
       6: invokespecial #7                  // Method "<init>":(Lio/netty/bootstrap/Bootstrap;Lio/netty/channel/pool/ChannelPoolHandler;Lio/netty/channel/pool/ChannelHealthChecker;)V
       9: return

  public io.netty.channel.pool.SimpleChannelPool(io.netty.bootstrap.Bootstrap, io.netty.channel.pool.ChannelPoolHandler, io.netty.channel.pool.ChannelHealthChecker);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: iconst_1
       5: invokespecial #8                  // Method "<init>":(Lio/netty/bootstrap/Bootstrap;Lio/netty/channel/pool/ChannelPoolHandler;Lio/netty/channel/pool/ChannelHealthChecker;Z)V
       8: return

  public io.netty.channel.pool.SimpleChannelPool(io.netty.bootstrap.Bootstrap, io.netty.channel.pool.ChannelPoolHandler, io.netty.channel.pool.ChannelHealthChecker, boolean);
    Code:
       0: aload_0
       1: invokespecial #9                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: invokestatic  #10                 // Method io/netty/util/internal/PlatformDependent.newConcurrentDeque:()Ljava/util/Deque;
       8: putfield      #11                 // Field deque:Ljava/util/Deque;
      11: aload_0
      12: aload_2
      13: ldc           #12                 // String handler
      15: invokestatic  #13                 // Method io/netty/util/internal/ObjectUtil.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      18: checkcast     #14                 // class io/netty/channel/pool/ChannelPoolHandler
      21: putfield      #15                 // Field handler:Lio/netty/channel/pool/ChannelPoolHandler;
      24: aload_0
      25: aload_3
      26: ldc           #16                 // String healthCheck
      28: invokestatic  #13                 // Method io/netty/util/internal/ObjectUtil.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      31: checkcast     #17                 // class io/netty/channel/pool/ChannelHealthChecker
      34: putfield      #18                 // Field healthCheck:Lio/netty/channel/pool/ChannelHealthChecker;
      37: aload_0
      38: iload         4
      40: putfield      #19                 // Field releaseHealthCheck:Z
      43: aload_0
      44: aload_1
      45: ldc           #20                 // String bootstrap
      47: invokestatic  #13                 // Method io/netty/util/internal/ObjectUtil.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      50: checkcast     #21                 // class io/netty/bootstrap/Bootstrap
      53: invokevirtual #22                 // Method io/netty/bootstrap/Bootstrap.clone:()Lio/netty/bootstrap/Bootstrap;
      56: putfield      #23                 // Field bootstrap:Lio/netty/bootstrap/Bootstrap;
      59: aload_0
      60: getfield      #23                 // Field bootstrap:Lio/netty/bootstrap/Bootstrap;
      63: new           #24                 // class io/netty/channel/pool/SimpleChannelPool$1
      66: dup
      67: aload_0
      68: aload_2
      69: invokespecial #25                 // Method io/netty/channel/pool/SimpleChannelPool$1."<init>":(Lio/netty/channel/pool/SimpleChannelPool;Lio/netty/channel/pool/ChannelPoolHandler;)V
      72: invokevirtual #26                 // Method io/netty/bootstrap/Bootstrap.handler:(Lio/netty/channel/ChannelHandler;)Lio/netty/bootstrap/AbstractBootstrap;
      75: pop
      76: return

  protected io.netty.bootstrap.Bootstrap bootstrap();
    Code:
       0: aload_0
       1: getfield      #23                 // Field bootstrap:Lio/netty/bootstrap/Bootstrap;
       4: areturn

  protected io.netty.channel.pool.ChannelPoolHandler handler();
    Code:
       0: aload_0
       1: getfield      #15                 // Field handler:Lio/netty/channel/pool/ChannelPoolHandler;
       4: areturn

  protected io.netty.channel.pool.ChannelHealthChecker healthChecker();
    Code:
       0: aload_0
       1: getfield      #18                 // Field healthCheck:Lio/netty/channel/pool/ChannelHealthChecker;
       4: areturn

  protected boolean releaseHealthCheck();
    Code:
       0: aload_0
       1: getfield      #19                 // Field releaseHealthCheck:Z
       4: ireturn

  public final io.netty.util.concurrent.Future<io.netty.channel.Channel> acquire();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #23                 // Field bootstrap:Lio/netty/bootstrap/Bootstrap;
       5: invokevirtual #27                 // Method io/netty/bootstrap/Bootstrap.config:()Lio/netty/bootstrap/BootstrapConfig;
       8: invokevirtual #28                 // Method io/netty/bootstrap/BootstrapConfig.group:()Lio/netty/channel/EventLoopGroup;
      11: invokeinterface #29,  1           // InterfaceMethod io/netty/channel/EventLoopGroup.next:()Lio/netty/channel/EventLoop;
      16: invokeinterface #30,  1           // InterfaceMethod io/netty/channel/EventLoop.newPromise:()Lio/netty/util/concurrent/Promise;
      21: invokevirtual #31                 // Method acquire:(Lio/netty/util/concurrent/Promise;)Lio/netty/util/concurrent/Future;
      24: areturn

  public io.netty.util.concurrent.Future<io.netty.channel.Channel> acquire(io.netty.util.concurrent.Promise<io.netty.channel.Channel>);
    Code:
       0: aload_1
       1: ldc           #32                 // String promise
       3: invokestatic  #13                 // Method io/netty/util/internal/ObjectUtil.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: aload_1
       9: invokespecial #33                 // Method acquireHealthyFromPoolOrNew:(Lio/netty/util/concurrent/Promise;)Lio/netty/util/concurrent/Future;
      12: areturn

  private io.netty.util.concurrent.Future<io.netty.channel.Channel> acquireHealthyFromPoolOrNew(io.netty.util.concurrent.Promise<io.netty.channel.Channel>);
    Code:
       0: aload_0
       1: invokevirtual #34                 // Method pollChannel:()Lio/netty/channel/Channel;
       4: astore_2
       5: aload_2
       6: ifnonnull     72
       9: aload_0
      10: getfield      #23                 // Field bootstrap:Lio/netty/bootstrap/Bootstrap;
      13: invokevirtual #22                 // Method io/netty/bootstrap/Bootstrap.clone:()Lio/netty/bootstrap/Bootstrap;
      16: astore_3
      17: aload_3
      18: getstatic     #35                 // Field POOL_KEY:Lio/netty/util/AttributeKey;
      21: aload_0
      22: invokevirtual #36                 // Method io/netty/bootstrap/Bootstrap.attr:(Lio/netty/util/AttributeKey;Ljava/lang/Object;)Lio/netty/bootstrap/AbstractBootstrap;
      25: pop
      26: aload_0
      27: aload_3
      28: invokevirtual #37                 // Method connectChannel:(Lio/netty/bootstrap/Bootstrap;)Lio/netty/channel/ChannelFuture;
      31: astore        4
      33: aload         4
      35: invokeinterface #38,  1           // InterfaceMethod io/netty/channel/ChannelFuture.isDone:()Z
      40: ifeq          53
      43: aload_0
      44: aload         4
      46: aload_1
      47: invokespecial #5                  // Method notifyConnect:(Lio/netty/channel/ChannelFuture;Lio/netty/util/concurrent/Promise;)V
      50: goto          70
      53: aload         4
      55: new           #39                 // class io/netty/channel/pool/SimpleChannelPool$2
      58: dup
      59: aload_0
      60: aload_1
      61: invokespecial #40                 // Method io/netty/channel/pool/SimpleChannelPool$2."<init>":(Lio/netty/channel/pool/SimpleChannelPool;Lio/netty/util/concurrent/Promise;)V
      64: invokeinterface #41,  2           // InterfaceMethod io/netty/channel/ChannelFuture.addListener:(Lio/netty/util/concurrent/GenericFutureListener;)Lio/netty/channel/ChannelFuture;
      69: pop
      70: aload_1
      71: areturn
      72: aload_2
      73: invokeinterface #42,  1           // InterfaceMethod io/netty/channel/Channel.eventLoop:()Lio/netty/channel/EventLoop;
      78: astore_3
      79: aload_3
      80: invokeinterface #43,  1           // InterfaceMethod io/netty/channel/EventLoop.inEventLoop:()Z
      85: ifeq          97
      88: aload_0
      89: aload_2
      90: aload_1
      91: invokespecial #4                  // Method doHealthCheck:(Lio/netty/channel/Channel;Lio/netty/util/concurrent/Promise;)V
      94: goto          113
      97: aload_3
      98: new           #44                 // class io/netty/channel/pool/SimpleChannelPool$3
     101: dup
     102: aload_0
     103: aload_2
     104: aload_1
     105: invokespecial #45                 // Method io/netty/channel/pool/SimpleChannelPool$3."<init>":(Lio/netty/channel/pool/SimpleChannelPool;Lio/netty/channel/Channel;Lio/netty/util/concurrent/Promise;)V
     108: invokeinterface #46,  2           // InterfaceMethod io/netty/channel/EventLoop.execute:(Ljava/lang/Runnable;)V
     113: goto          125
     116: astore_2
     117: aload_1
     118: aload_2
     119: invokeinterface #48,  2           // InterfaceMethod io/netty/util/concurrent/Promise.tryFailure:(Ljava/lang/Throwable;)Z
     124: pop
     125: aload_1
     126: areturn
    Exception table:
       from    to  target type
           0    71   116   Class java/lang/Throwable
          72   113   116   Class java/lang/Throwable

  private void notifyConnect(io.netty.channel.ChannelFuture, io.netty.util.concurrent.Promise<io.netty.channel.Channel>);
    Code:
       0: aload_1
       1: invokeinterface #49,  1           // InterfaceMethod io/netty/channel/ChannelFuture.isSuccess:()Z
       6: ifeq          35
       9: aload_1
      10: invokeinterface #50,  1           // InterfaceMethod io/netty/channel/ChannelFuture.channel:()Lio/netty/channel/Channel;
      15: astore_3
      16: aload_2
      17: aload_3
      18: invokeinterface #51,  2           // InterfaceMethod io/netty/util/concurrent/Promise.trySuccess:(Ljava/lang/Object;)Z
      23: ifne          32
      26: aload_0
      27: aload_3
      28: invokevirtual #52                 // Method release:(Lio/netty/channel/Channel;)Lio/netty/util/concurrent/Future;
      31: pop
      32: goto          48
      35: aload_2
      36: aload_1
      37: invokeinterface #53,  1           // InterfaceMethod io/netty/channel/ChannelFuture.cause:()Ljava/lang/Throwable;
      42: invokeinterface #48,  2           // InterfaceMethod io/netty/util/concurrent/Promise.tryFailure:(Ljava/lang/Throwable;)Z
      47: pop
      48: return

  private void doHealthCheck(io.netty.channel.Channel, io.netty.util.concurrent.Promise<io.netty.channel.Channel>);
    Code:
       0: getstatic     #54                 // Field $assertionsDisabled:Z
       3: ifne          28
       6: aload_1
       7: invokeinterface #42,  1           // InterfaceMethod io/netty/channel/Channel.eventLoop:()Lio/netty/channel/EventLoop;
      12: invokeinterface #43,  1           // InterfaceMethod io/netty/channel/EventLoop.inEventLoop:()Z
      17: ifne          28
      20: new           #55                 // class java/lang/AssertionError
      23: dup
      24: invokespecial #56                 // Method java/lang/AssertionError."<init>":()V
      27: athrow
      28: aload_0
      29: getfield      #18                 // Field healthCheck:Lio/netty/channel/pool/ChannelHealthChecker;
      32: aload_1
      33: invokeinterface #57,  2           // InterfaceMethod io/netty/channel/pool/ChannelHealthChecker.isHealthy:(Lio/netty/channel/Channel;)Lio/netty/util/concurrent/Future;
      38: astore_3
      39: aload_3
      40: invokeinterface #58,  1           // InterfaceMethod io/netty/util/concurrent/Future.isDone:()Z
      45: ifeq          58
      48: aload_0
      49: aload_3
      50: aload_1
      51: aload_2
      52: invokespecial #3                  // Method notifyHealthCheck:(Lio/netty/util/concurrent/Future;Lio/netty/channel/Channel;Lio/netty/util/concurrent/Promise;)V
      55: goto          75
      58: aload_3
      59: new           #59                 // class io/netty/channel/pool/SimpleChannelPool$4
      62: dup
      63: aload_0
      64: aload_1
      65: aload_2
      66: invokespecial #60                 // Method io/netty/channel/pool/SimpleChannelPool$4."<init>":(Lio/netty/channel/pool/SimpleChannelPool;Lio/netty/channel/Channel;Lio/netty/util/concurrent/Promise;)V
      69: invokeinterface #61,  2           // InterfaceMethod io/netty/util/concurrent/Future.addListener:(Lio/netty/util/concurrent/GenericFutureListener;)Lio/netty/util/concurrent/Future;
      74: pop
      75: return

  private void notifyHealthCheck(io.netty.util.concurrent.Future<java.lang.Boolean>, io.netty.channel.Channel, io.netty.util.concurrent.Promise<io.netty.channel.Channel>);
    Code:
       0: getstatic     #54                 // Field $assertionsDisabled:Z
       3: ifne          28
       6: aload_2
       7: invokeinterface #42,  1           // InterfaceMethod io/netty/channel/Channel.eventLoop:()Lio/netty/channel/EventLoop;
      12: invokeinterface #43,  1           // InterfaceMethod io/netty/channel/EventLoop.inEventLoop:()Z
      17: ifne          28
      20: new           #55                 // class java/lang/AssertionError
      23: dup
      24: invokespecial #56                 // Method java/lang/AssertionError."<init>":()V
      27: athrow
      28: aload_1
      29: invokeinterface #62,  1           // InterfaceMethod io/netty/util/concurrent/Future.isSuccess:()Z
      34: ifeq          113
      37: aload_1
      38: invokeinterface #63,  1           // InterfaceMethod io/netty/util/concurrent/Future.getNow:()Ljava/lang/Object;
      43: checkcast     #64                 // class java/lang/Boolean
      46: invokevirtual #65                 // Method java/lang/Boolean.booleanValue:()Z
      49: ifeq          100
      52: aload_2
      53: getstatic     #35                 // Field POOL_KEY:Lio/netty/util/AttributeKey;
      56: invokeinterface #66,  2           // InterfaceMethod io/netty/channel/Channel.attr:(Lio/netty/util/AttributeKey;)Lio/netty/util/Attribute;
      61: aload_0
      62: invokeinterface #67,  2           // InterfaceMethod io/netty/util/Attribute.set:(Ljava/lang/Object;)V
      67: aload_0
      68: getfield      #15                 // Field handler:Lio/netty/channel/pool/ChannelPoolHandler;
      71: aload_2
      72: invokeinterface #68,  2           // InterfaceMethod io/netty/channel/pool/ChannelPoolHandler.channelAcquired:(Lio/netty/channel/Channel;)V
      77: aload_3
      78: aload_2
      79: invokeinterface #69,  2           // InterfaceMethod io/netty/util/concurrent/Promise.setSuccess:(Ljava/lang/Object;)Lio/netty/util/concurrent/Promise;
      84: pop
      85: goto          123
      88: astore        4
      90: aload_2
      91: aload         4
      93: aload_3
      94: invokestatic  #70                 // Method closeAndFail:(Lio/netty/channel/Channel;Ljava/lang/Throwable;Lio/netty/util/concurrent/Promise;)V
      97: goto          123
     100: aload_2
     101: invokestatic  #71                 // Method closeChannel:(Lio/netty/channel/Channel;)V
     104: aload_0
     105: aload_3
     106: invokespecial #33                 // Method acquireHealthyFromPoolOrNew:(Lio/netty/util/concurrent/Promise;)Lio/netty/util/concurrent/Future;
     109: pop
     110: goto          123
     113: aload_2
     114: invokestatic  #71                 // Method closeChannel:(Lio/netty/channel/Channel;)V
     117: aload_0
     118: aload_3
     119: invokespecial #33                 // Method acquireHealthyFromPoolOrNew:(Lio/netty/util/concurrent/Promise;)Lio/netty/util/concurrent/Future;
     122: pop
     123: return
    Exception table:
       from    to  target type
          52    85    88   Class java/lang/Throwable

  protected io.netty.channel.ChannelFuture connectChannel(io.netty.bootstrap.Bootstrap);
    Code:
       0: aload_1
       1: invokevirtual #72                 // Method io/netty/bootstrap/Bootstrap.connect:()Lio/netty/channel/ChannelFuture;
       4: areturn

  public final io.netty.util.concurrent.Future<java.lang.Void> release(io.netty.channel.Channel);
    Code:
       0: aload_0
       1: aload_1
       2: aload_1
       3: invokeinterface #42,  1           // InterfaceMethod io/netty/channel/Channel.eventLoop:()Lio/netty/channel/EventLoop;
       8: invokeinterface #30,  1           // InterfaceMethod io/netty/channel/EventLoop.newPromise:()Lio/netty/util/concurrent/Promise;
      13: invokevirtual #73                 // Method release:(Lio/netty/channel/Channel;Lio/netty/util/concurrent/Promise;)Lio/netty/util/concurrent/Future;
      16: areturn

  public io.netty.util.concurrent.Future<java.lang.Void> release(io.netty.channel.Channel, io.netty.util.concurrent.Promise<java.lang.Void>);
    Code:
       0: aload_1
       1: ldc           #74                 // String channel
       3: invokestatic  #13                 // Method io/netty/util/internal/ObjectUtil.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_2
       8: ldc           #32                 // String promise
      10: invokestatic  #13                 // Method io/netty/util/internal/ObjectUtil.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      13: pop
      14: aload_1
      15: invokeinterface #42,  1           // InterfaceMethod io/netty/channel/Channel.eventLoop:()Lio/netty/channel/EventLoop;
      20: astore_3
      21: aload_3
      22: invokeinterface #43,  1           // InterfaceMethod io/netty/channel/EventLoop.inEventLoop:()Z
      27: ifeq          39
      30: aload_0
      31: aload_1
      32: aload_2
      33: invokespecial #2                  // Method doReleaseChannel:(Lio/netty/channel/Channel;Lio/netty/util/concurrent/Promise;)V
      36: goto          55
      39: aload_3
      40: new           #75                 // class io/netty/channel/pool/SimpleChannelPool$5
      43: dup
      44: aload_0
      45: aload_1
      46: aload_2
      47: invokespecial #76                 // Method io/netty/channel/pool/SimpleChannelPool$5."<init>":(Lio/netty/channel/pool/SimpleChannelPool;Lio/netty/channel/Channel;Lio/netty/util/concurrent/Promise;)V
      50: invokeinterface #46,  2           // InterfaceMethod io/netty/channel/EventLoop.execute:(Ljava/lang/Runnable;)V
      55: goto          65
      58: astore_3
      59: aload_1
      60: aload_3
      61: aload_2
      62: invokestatic  #70                 // Method closeAndFail:(Lio/netty/channel/Channel;Ljava/lang/Throwable;Lio/netty/util/concurrent/Promise;)V
      65: aload_2
      66: areturn
    Exception table:
       from    to  target type
          14    55    58   Class java/lang/Throwable

  private void doReleaseChannel(io.netty.channel.Channel, io.netty.util.concurrent.Promise<java.lang.Void>);
    Code:
       0: getstatic     #54                 // Field $assertionsDisabled:Z
       3: ifne          28
       6: aload_1
       7: invokeinterface #42,  1           // InterfaceMethod io/netty/channel/Channel.eventLoop:()Lio/netty/channel/EventLoop;
      12: invokeinterface #43,  1           // InterfaceMethod io/netty/channel/EventLoop.inEventLoop:()Z
      17: ifne          28
      20: new           #55                 // class java/lang/AssertionError
      23: dup
      24: invokespecial #56                 // Method java/lang/AssertionError."<init>":()V
      27: athrow
      28: aload_1
      29: getstatic     #35                 // Field POOL_KEY:Lio/netty/util/AttributeKey;
      32: invokeinterface #66,  2           // InterfaceMethod io/netty/channel/Channel.attr:(Lio/netty/util/AttributeKey;)Lio/netty/util/Attribute;
      37: aconst_null
      38: invokeinterface #77,  2           // InterfaceMethod io/netty/util/Attribute.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;
      43: aload_0
      44: if_acmpeq     86
      47: aload_1
      48: new           #78                 // class java/lang/IllegalArgumentException
      51: dup
      52: new           #79                 // class java/lang/StringBuilder
      55: dup
      56: invokespecial #80                 // Method java/lang/StringBuilder."<init>":()V
      59: ldc           #81                 // String Channel
      61: invokevirtual #82                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      64: aload_1
      65: invokevirtual #83                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      68: ldc           #84                 // String  was not acquired from this ChannelPool
      70: invokevirtual #82                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      73: invokevirtual #85                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      76: invokespecial #86                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      79: aload_2
      80: invokestatic  #70                 // Method closeAndFail:(Lio/netty/channel/Channel;Ljava/lang/Throwable;Lio/netty/util/concurrent/Promise;)V
      83: goto          118
      86: aload_0
      87: getfield      #19                 // Field releaseHealthCheck:Z
      90: ifeq          102
      93: aload_0
      94: aload_1
      95: aload_2
      96: invokespecial #87                 // Method doHealthCheckOnRelease:(Lio/netty/channel/Channel;Lio/netty/util/concurrent/Promise;)V
      99: goto          108
     102: aload_0
     103: aload_1
     104: aload_2
     105: invokespecial #88                 // Method releaseAndOffer:(Lio/netty/channel/Channel;Lio/netty/util/concurrent/Promise;)V
     108: goto          118
     111: astore_3
     112: aload_1
     113: aload_3
     114: aload_2
     115: invokestatic  #70                 // Method closeAndFail:(Lio/netty/channel/Channel;Ljava/lang/Throwable;Lio/netty/util/concurrent/Promise;)V
     118: return
    Exception table:
       from    to  target type
          86   108   111   Class java/lang/Throwable

  private void doHealthCheckOnRelease(io.netty.channel.Channel, io.netty.util.concurrent.Promise<java.lang.Void>) throws java.lang.Exception;
    Code:
       0: aload_0
       1: getfield      #18                 // Field healthCheck:Lio/netty/channel/pool/ChannelHealthChecker;
       4: aload_1
       5: invokeinterface #57,  2           // InterfaceMethod io/netty/channel/pool/ChannelHealthChecker.isHealthy:(Lio/netty/channel/Channel;)Lio/netty/util/concurrent/Future;
      10: astore_3
      11: aload_3
      12: invokeinterface #58,  1           // InterfaceMethod io/netty/util/concurrent/Future.isDone:()Z
      17: ifeq          30
      20: aload_0
      21: aload_1
      22: aload_2
      23: aload_3
      24: invokespecial #1                  // Method releaseAndOfferIfHealthy:(Lio/netty/channel/Channel;Lio/netty/util/concurrent/Promise;Lio/netty/util/concurrent/Future;)V
      27: goto          48
      30: aload_3
      31: new           #89                 // class io/netty/channel/pool/SimpleChannelPool$6
      34: dup
      35: aload_0
      36: aload_1
      37: aload_2
      38: aload_3
      39: invokespecial #90                 // Method io/netty/channel/pool/SimpleChannelPool$6."<init>":(Lio/netty/channel/pool/SimpleChannelPool;Lio/netty/channel/Channel;Lio/netty/util/concurrent/Promise;Lio/netty/util/concurrent/Future;)V
      42: invokeinterface #61,  2           // InterfaceMethod io/netty/util/concurrent/Future.addListener:(Lio/netty/util/concurrent/GenericFutureListener;)Lio/netty/util/concurrent/Future;
      47: pop
      48: return

  private void releaseAndOfferIfHealthy(io.netty.channel.Channel, io.netty.util.concurrent.Promise<java.lang.Void>, io.netty.util.concurrent.Future<java.lang.Boolean>) throws java.lang.Exception;
    Code:
       0: aload_3
       1: invokeinterface #63,  1           // InterfaceMethod io/netty/util/concurrent/Future.getNow:()Ljava/lang/Object;
       6: checkcast     #64                 // class java/lang/Boolean
       9: invokevirtual #65                 // Method java/lang/Boolean.booleanValue:()Z
      12: ifeq          24
      15: aload_0
      16: aload_1
      17: aload_2
      18: invokespecial #88                 // Method releaseAndOffer:(Lio/netty/channel/Channel;Lio/netty/util/concurrent/Promise;)V
      21: goto          42
      24: aload_0
      25: getfield      #15                 // Field handler:Lio/netty/channel/pool/ChannelPoolHandler;
      28: aload_1
      29: invokeinterface #91,  2           // InterfaceMethod io/netty/channel/pool/ChannelPoolHandler.channelReleased:(Lio/netty/channel/Channel;)V
      34: aload_2
      35: aconst_null
      36: invokeinterface #69,  2           // InterfaceMethod io/netty/util/concurrent/Promise.setSuccess:(Ljava/lang/Object;)Lio/netty/util/concurrent/Promise;
      41: pop
      42: return

  private void releaseAndOffer(io.netty.channel.Channel, io.netty.util.concurrent.Promise<java.lang.Void>) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #92                 // Method offerChannel:(Lio/netty/channel/Channel;)Z
       5: ifeq          29
       8: aload_0
       9: getfield      #15                 // Field handler:Lio/netty/channel/pool/ChannelPoolHandler;
      12: aload_1
      13: invokeinterface #91,  2           // InterfaceMethod io/netty/channel/pool/ChannelPoolHandler.channelReleased:(Lio/netty/channel/Channel;)V
      18: aload_2
      19: aconst_null
      20: invokeinterface #69,  2           // InterfaceMethod io/netty/util/concurrent/Promise.setSuccess:(Ljava/lang/Object;)Lio/netty/util/concurrent/Promise;
      25: pop
      26: goto          37
      29: aload_1
      30: getstatic     #93                 // Field FULL_EXCEPTION:Ljava/lang/IllegalStateException;
      33: aload_2
      34: invokestatic  #70                 // Method closeAndFail:(Lio/netty/channel/Channel;Ljava/lang/Throwable;Lio/netty/util/concurrent/Promise;)V
      37: return

  private static void closeChannel(io.netty.channel.Channel);
    Code:
       0: aload_0
       1: getstatic     #35                 // Field POOL_KEY:Lio/netty/util/AttributeKey;
       4: invokeinterface #66,  2           // InterfaceMethod io/netty/channel/Channel.attr:(Lio/netty/util/AttributeKey;)Lio/netty/util/Attribute;
       9: aconst_null
      10: invokeinterface #77,  2           // InterfaceMethod io/netty/util/Attribute.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;
      15: pop
      16: aload_0
      17: invokeinterface #94,  1           // InterfaceMethod io/netty/channel/Channel.close:()Lio/netty/channel/ChannelFuture;
      22: pop
      23: return

  private static void closeAndFail(io.netty.channel.Channel, java.lang.Throwable, io.netty.util.concurrent.Promise<?>);
    Code:
       0: aload_0
       1: invokestatic  #71                 // Method closeChannel:(Lio/netty/channel/Channel;)V
       4: aload_2
       5: aload_1
       6: invokeinterface #48,  2           // InterfaceMethod io/netty/util/concurrent/Promise.tryFailure:(Ljava/lang/Throwable;)Z
      11: pop
      12: return

  protected io.netty.channel.Channel pollChannel();
    Code:
       0: aload_0
       1: getfield      #11                 // Field deque:Ljava/util/Deque;
       4: invokeinterface #95,  1           // InterfaceMethod java/util/Deque.pollLast:()Ljava/lang/Object;
       9: checkcast     #96                 // class io/netty/channel/Channel
      12: areturn

  protected boolean offerChannel(io.netty.channel.Channel);
    Code:
       0: aload_0
       1: getfield      #11                 // Field deque:Ljava/util/Deque;
       4: aload_1
       5: invokeinterface #97,  2           // InterfaceMethod java/util/Deque.offer:(Ljava/lang/Object;)Z
      10: ireturn

  public void close();
    Code:
       0: aload_0
       1: invokevirtual #34                 // Method pollChannel:()Lio/netty/channel/Channel;
       4: astore_1
       5: aload_1
       6: ifnonnull     12
       9: goto          22
      12: aload_1
      13: invokeinterface #94,  1           // InterfaceMethod io/netty/channel/Channel.close:()Lio/netty/channel/ChannelFuture;
      18: pop
      19: goto          0
      22: return

  static void access$000(io.netty.channel.pool.SimpleChannelPool, io.netty.channel.ChannelFuture, io.netty.util.concurrent.Promise);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #5                  // Method notifyConnect:(Lio/netty/channel/ChannelFuture;Lio/netty/util/concurrent/Promise;)V
       6: return

  static void access$100(io.netty.channel.pool.SimpleChannelPool, io.netty.channel.Channel, io.netty.util.concurrent.Promise);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #4                  // Method doHealthCheck:(Lio/netty/channel/Channel;Lio/netty/util/concurrent/Promise;)V
       6: return

  static void access$200(io.netty.channel.pool.SimpleChannelPool, io.netty.util.concurrent.Future, io.netty.channel.Channel, io.netty.util.concurrent.Promise);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokespecial #3                  // Method notifyHealthCheck:(Lio/netty/util/concurrent/Future;Lio/netty/channel/Channel;Lio/netty/util/concurrent/Promise;)V
       7: return

  static void access$300(io.netty.channel.pool.SimpleChannelPool, io.netty.channel.Channel, io.netty.util.concurrent.Promise);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #2                  // Method doReleaseChannel:(Lio/netty/channel/Channel;Lio/netty/util/concurrent/Promise;)V
       6: return

  static void access$400(io.netty.channel.pool.SimpleChannelPool, io.netty.channel.Channel, io.netty.util.concurrent.Promise, io.netty.util.concurrent.Future) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokespecial #1                  // Method releaseAndOfferIfHealthy:(Lio/netty/channel/Channel;Lio/netty/util/concurrent/Promise;Lio/netty/util/concurrent/Future;)V
       7: return

  static {};
    Code:
       0: ldc           #98                 // class io/netty/channel/pool/SimpleChannelPool
       2: invokevirtual #99                 // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #54                 // Field $assertionsDisabled:Z
      16: ldc           #100                // String channelPool
      18: invokestatic  #101                // Method io/netty/util/AttributeKey.newInstance:(Ljava/lang/String;)Lio/netty/util/AttributeKey;
      21: putstatic     #35                 // Field POOL_KEY:Lio/netty/util/AttributeKey;
      24: new           #102                // class java/lang/IllegalStateException
      27: dup
      28: ldc           #103                // String ChannelPool full
      30: invokespecial #104                // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      33: ldc           #98                 // class io/netty/channel/pool/SimpleChannelPool
      35: ldc           #105                // String releaseAndOffer(...)
      37: invokestatic  #106                // Method io/netty/util/internal/ThrowableUtil.unknownStackTrace:(Ljava/lang/Throwable;Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Throwable;
      40: checkcast     #102                // class java/lang/IllegalStateException
      43: putstatic     #93                 // Field FULL_EXCEPTION:Ljava/lang/IllegalStateException;
      46: return
}
