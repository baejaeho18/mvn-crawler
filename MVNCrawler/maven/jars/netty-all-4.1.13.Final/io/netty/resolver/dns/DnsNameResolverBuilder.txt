Compiled from "DnsNameResolverBuilder.java"
public final class io.netty.resolver.dns.DnsNameResolverBuilder {
  private final io.netty.channel.EventLoop eventLoop;

  private io.netty.channel.ChannelFactory<? extends io.netty.channel.socket.DatagramChannel> channelFactory;

  private io.netty.resolver.dns.DnsCache resolveCache;

  private io.netty.resolver.dns.DnsCache authoritativeDnsServerCache;

  private java.lang.Integer minTtl;

  private java.lang.Integer maxTtl;

  private java.lang.Integer negativeTtl;

  private long queryTimeoutMillis;

  private io.netty.resolver.ResolvedAddressTypes resolvedAddressTypes;

  private boolean recursionDesired;

  private int maxQueriesPerResolve;

  private boolean traceEnabled;

  private int maxPayloadSize;

  private boolean optResourceEnabled;

  private io.netty.resolver.HostsFileEntriesResolver hostsFileEntriesResolver;

  private io.netty.resolver.dns.DnsServerAddressStreamProvider dnsServerAddressStreamProvider;

  private io.netty.resolver.dns.DnsQueryLifecycleObserverFactory dnsQueryLifecycleObserverFactory;

  private java.lang.String[] searchDomains;

  private int ndots;

  private boolean decodeIdn;

  public io.netty.resolver.dns.DnsNameResolverBuilder(io.netty.channel.EventLoop);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: ldc2_w        #2                  // long 5000l
       8: putfield      #4                  // Field queryTimeoutMillis:J
      11: aload_0
      12: getstatic     #5                  // Field io/netty/resolver/dns/DnsNameResolver.DEFAULT_RESOLVE_ADDRESS_TYPES:Lio/netty/resolver/ResolvedAddressTypes;
      15: putfield      #6                  // Field resolvedAddressTypes:Lio/netty/resolver/ResolvedAddressTypes;
      18: aload_0
      19: iconst_1
      20: putfield      #7                  // Field recursionDesired:Z
      23: aload_0
      24: bipush        16
      26: putfield      #8                  // Field maxQueriesPerResolve:I
      29: aload_0
      30: sipush        4096
      33: putfield      #9                  // Field maxPayloadSize:I
      36: aload_0
      37: iconst_1
      38: putfield      #10                 // Field optResourceEnabled:Z
      41: aload_0
      42: getstatic     #11                 // Field io/netty/resolver/HostsFileEntriesResolver.DEFAULT:Lio/netty/resolver/HostsFileEntriesResolver;
      45: putfield      #12                 // Field hostsFileEntriesResolver:Lio/netty/resolver/HostsFileEntriesResolver;
      48: aload_0
      49: invokestatic  #13                 // Method io/netty/resolver/dns/DnsServerAddressStreamProviders.platformDefault:()Lio/netty/resolver/dns/DnsServerAddressStreamProvider;
      52: putfield      #14                 // Field dnsServerAddressStreamProvider:Lio/netty/resolver/dns/DnsServerAddressStreamProvider;
      55: aload_0
      56: getstatic     #15                 // Field io/netty/resolver/dns/NoopDnsQueryLifecycleObserverFactory.INSTANCE:Lio/netty/resolver/dns/NoopDnsQueryLifecycleObserverFactory;
      59: putfield      #16                 // Field dnsQueryLifecycleObserverFactory:Lio/netty/resolver/dns/DnsQueryLifecycleObserverFactory;
      62: aload_0
      63: iconst_m1
      64: putfield      #17                 // Field ndots:I
      67: aload_0
      68: iconst_1
      69: putfield      #18                 // Field decodeIdn:Z
      72: aload_0
      73: aload_1
      74: putfield      #19                 // Field eventLoop:Lio/netty/channel/EventLoop;
      77: return

  public io.netty.resolver.dns.DnsNameResolverBuilder channelFactory(io.netty.channel.ChannelFactory<? extends io.netty.channel.socket.DatagramChannel>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #20                 // Field channelFactory:Lio/netty/channel/ChannelFactory;
       5: aload_0
       6: areturn

  public io.netty.resolver.dns.DnsNameResolverBuilder channelType(java.lang.Class<? extends io.netty.channel.socket.DatagramChannel>);
    Code:
       0: aload_0
       1: new           #21                 // class io/netty/channel/ReflectiveChannelFactory
       4: dup
       5: aload_1
       6: invokespecial #22                 // Method io/netty/channel/ReflectiveChannelFactory."<init>":(Ljava/lang/Class;)V
       9: invokevirtual #23                 // Method channelFactory:(Lio/netty/channel/ChannelFactory;)Lio/netty/resolver/dns/DnsNameResolverBuilder;
      12: areturn

  public io.netty.resolver.dns.DnsNameResolverBuilder resolveCache(io.netty.resolver.dns.DnsCache);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #24                 // Field resolveCache:Lio/netty/resolver/dns/DnsCache;
       5: aload_0
       6: areturn

  public io.netty.resolver.dns.DnsNameResolverBuilder dnsQueryLifecycleObserverFactory(io.netty.resolver.dns.DnsQueryLifecycleObserverFactory);
    Code:
       0: aload_0
       1: aload_1
       2: ldc           #25                 // String lifecycleObserverFactory
       4: invokestatic  #26                 // Method io/netty/util/internal/ObjectUtil.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       7: checkcast     #27                 // class io/netty/resolver/dns/DnsQueryLifecycleObserverFactory
      10: putfield      #16                 // Field dnsQueryLifecycleObserverFactory:Lio/netty/resolver/dns/DnsQueryLifecycleObserverFactory;
      13: aload_0
      14: areturn

  public io.netty.resolver.dns.DnsNameResolverBuilder authoritativeDnsServerCache(io.netty.resolver.dns.DnsCache);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #28                 // Field authoritativeDnsServerCache:Lio/netty/resolver/dns/DnsCache;
       5: aload_0
       6: areturn

  public io.netty.resolver.dns.DnsNameResolverBuilder ttl(int, int);
    Code:
       0: aload_0
       1: iload_2
       2: invokestatic  #29                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       5: putfield      #30                 // Field maxTtl:Ljava/lang/Integer;
       8: aload_0
       9: iload_1
      10: invokestatic  #29                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      13: putfield      #31                 // Field minTtl:Ljava/lang/Integer;
      16: aload_0
      17: areturn

  public io.netty.resolver.dns.DnsNameResolverBuilder negativeTtl(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #29                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       5: putfield      #32                 // Field negativeTtl:Ljava/lang/Integer;
       8: aload_0
       9: areturn

  public io.netty.resolver.dns.DnsNameResolverBuilder queryTimeoutMillis(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #4                  // Field queryTimeoutMillis:J
       5: aload_0
       6: areturn

  public static io.netty.resolver.ResolvedAddressTypes computeResolvedAddressTypes(io.netty.channel.socket.InternetProtocolFamily...);
    Code:
       0: aload_0
       1: ifnull        9
       4: aload_0
       5: arraylength
       6: ifne          13
       9: getstatic     #5                  // Field io/netty/resolver/dns/DnsNameResolver.DEFAULT_RESOLVE_ADDRESS_TYPES:Lio/netty/resolver/ResolvedAddressTypes;
      12: areturn
      13: aload_0
      14: arraylength
      15: iconst_2
      16: if_icmple     29
      19: new           #33                 // class java/lang/IllegalArgumentException
      22: dup
      23: ldc           #34                 // String No more than 2 InternetProtocolFamilies
      25: invokespecial #35                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      28: athrow
      29: getstatic     #36                 // Field io/netty/resolver/dns/DnsNameResolverBuilder$1.$SwitchMap$io$netty$channel$socket$InternetProtocolFamily:[I
      32: aload_0
      33: iconst_0
      34: aaload
      35: invokevirtual #37                 // Method io/netty/channel/socket/InternetProtocolFamily.ordinal:()I
      38: iaload
      39: lookupswitch  { // 2
                     1: 64
                     2: 89
               default: 114
          }
      64: aload_0
      65: arraylength
      66: iconst_2
      67: if_icmplt     85
      70: aload_0
      71: iconst_1
      72: aaload
      73: getstatic     #38                 // Field io/netty/channel/socket/InternetProtocolFamily.IPv6:Lio/netty/channel/socket/InternetProtocolFamily;
      76: if_acmpne     85
      79: getstatic     #39                 // Field io/netty/resolver/ResolvedAddressTypes.IPV4_PREFERRED:Lio/netty/resolver/ResolvedAddressTypes;
      82: goto          88
      85: getstatic     #40                 // Field io/netty/resolver/ResolvedAddressTypes.IPV4_ONLY:Lio/netty/resolver/ResolvedAddressTypes;
      88: areturn
      89: aload_0
      90: arraylength
      91: iconst_2
      92: if_icmplt     110
      95: aload_0
      96: iconst_1
      97: aaload
      98: getstatic     #41                 // Field io/netty/channel/socket/InternetProtocolFamily.IPv4:Lio/netty/channel/socket/InternetProtocolFamily;
     101: if_acmpne     110
     104: getstatic     #42                 // Field io/netty/resolver/ResolvedAddressTypes.IPV6_PREFERRED:Lio/netty/resolver/ResolvedAddressTypes;
     107: goto          113
     110: getstatic     #43                 // Field io/netty/resolver/ResolvedAddressTypes.IPV6_ONLY:Lio/netty/resolver/ResolvedAddressTypes;
     113: areturn
     114: new           #33                 // class java/lang/IllegalArgumentException
     117: dup
     118: ldc           #44                 // String Couldn\'t resolve ResolvedAddressTypes from InternetProtocolFamily array
     120: invokespecial #35                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     123: athrow

  public io.netty.resolver.dns.DnsNameResolverBuilder resolvedAddressTypes(io.netty.resolver.ResolvedAddressTypes);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #6                  // Field resolvedAddressTypes:Lio/netty/resolver/ResolvedAddressTypes;
       5: aload_0
       6: areturn

  public io.netty.resolver.dns.DnsNameResolverBuilder recursionDesired(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #7                  // Field recursionDesired:Z
       5: aload_0
       6: areturn

  public io.netty.resolver.dns.DnsNameResolverBuilder maxQueriesPerResolve(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #8                  // Field maxQueriesPerResolve:I
       5: aload_0
       6: areturn

  public io.netty.resolver.dns.DnsNameResolverBuilder traceEnabled(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #45                 // Field traceEnabled:Z
       5: aload_0
       6: areturn

  public io.netty.resolver.dns.DnsNameResolverBuilder maxPayloadSize(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #9                  // Field maxPayloadSize:I
       5: aload_0
       6: areturn

  public io.netty.resolver.dns.DnsNameResolverBuilder optResourceEnabled(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #10                 // Field optResourceEnabled:Z
       5: aload_0
       6: areturn

  public io.netty.resolver.dns.DnsNameResolverBuilder hostsFileEntriesResolver(io.netty.resolver.HostsFileEntriesResolver);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #12                 // Field hostsFileEntriesResolver:Lio/netty/resolver/HostsFileEntriesResolver;
       5: aload_0
       6: areturn

  public io.netty.resolver.dns.DnsNameResolverBuilder nameServerProvider(io.netty.resolver.dns.DnsServerAddressStreamProvider);
    Code:
       0: aload_0
       1: aload_1
       2: ldc           #46                 // String dnsServerAddressStreamProvider
       4: invokestatic  #26                 // Method io/netty/util/internal/ObjectUtil.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       7: checkcast     #47                 // class io/netty/resolver/dns/DnsServerAddressStreamProvider
      10: putfield      #14                 // Field dnsServerAddressStreamProvider:Lio/netty/resolver/dns/DnsServerAddressStreamProvider;
      13: aload_0
      14: areturn

  public io.netty.resolver.dns.DnsNameResolverBuilder searchDomains(java.lang.Iterable<java.lang.String>);
    Code:
       0: aload_1
       1: ldc           #48                 // String searchDomains
       3: invokestatic  #26                 // Method io/netty/util/internal/ObjectUtil.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: new           #49                 // class java/util/ArrayList
      10: dup
      11: iconst_4
      12: invokespecial #50                 // Method java/util/ArrayList."<init>":(I)V
      15: astore_2
      16: aload_1
      17: invokeinterface #51,  1           // InterfaceMethod java/lang/Iterable.iterator:()Ljava/util/Iterator;
      22: astore_3
      23: aload_3
      24: invokeinterface #52,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      29: ifeq          77
      32: aload_3
      33: invokeinterface #53,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      38: checkcast     #54                 // class java/lang/String
      41: astore        4
      43: aload         4
      45: ifnonnull     51
      48: goto          77
      51: aload_2
      52: aload         4
      54: invokeinterface #55,  2           // InterfaceMethod java/util/List.contains:(Ljava/lang/Object;)Z
      59: ifeq          65
      62: goto          23
      65: aload_2
      66: aload         4
      68: invokeinterface #56,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      73: pop
      74: goto          23
      77: aload_0
      78: aload_2
      79: aload_2
      80: invokeinterface #57,  1           // InterfaceMethod java/util/List.size:()I
      85: anewarray     #54                 // class java/lang/String
      88: invokeinterface #58,  2           // InterfaceMethod java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
      93: checkcast     #59                 // class "[Ljava/lang/String;"
      96: putfield      #60                 // Field searchDomains:[Ljava/lang/String;
      99: aload_0
     100: areturn

  public io.netty.resolver.dns.DnsNameResolverBuilder ndots(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #17                 // Field ndots:I
       5: aload_0
       6: areturn

  private io.netty.resolver.dns.DnsCache newCache();
    Code:
       0: new           #61                 // class io/netty/resolver/dns/DefaultDnsCache
       3: dup
       4: aload_0
       5: getfield      #31                 // Field minTtl:Ljava/lang/Integer;
       8: iconst_0
       9: invokestatic  #62                 // Method io/netty/util/internal/ObjectUtil.intValue:(Ljava/lang/Integer;I)I
      12: aload_0
      13: getfield      #30                 // Field maxTtl:Ljava/lang/Integer;
      16: ldc           #64                 // int 2147483647
      18: invokestatic  #62                 // Method io/netty/util/internal/ObjectUtil.intValue:(Ljava/lang/Integer;I)I
      21: aload_0
      22: getfield      #32                 // Field negativeTtl:Ljava/lang/Integer;
      25: iconst_0
      26: invokestatic  #62                 // Method io/netty/util/internal/ObjectUtil.intValue:(Ljava/lang/Integer;I)I
      29: invokespecial #65                 // Method io/netty/resolver/dns/DefaultDnsCache."<init>":(III)V
      32: areturn

  public io.netty.resolver.dns.DnsNameResolverBuilder decodeIdn(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #18                 // Field decodeIdn:Z
       5: aload_0
       6: areturn

  public io.netty.resolver.dns.DnsNameResolver build();
    Code:
       0: aload_0
       1: getfield      #24                 // Field resolveCache:Lio/netty/resolver/dns/DnsCache;
       4: ifnull        38
       7: aload_0
       8: getfield      #31                 // Field minTtl:Ljava/lang/Integer;
      11: ifnonnull     28
      14: aload_0
      15: getfield      #30                 // Field maxTtl:Ljava/lang/Integer;
      18: ifnonnull     28
      21: aload_0
      22: getfield      #32                 // Field negativeTtl:Ljava/lang/Integer;
      25: ifnull        38
      28: new           #66                 // class java/lang/IllegalStateException
      31: dup
      32: ldc           #67                 // String resolveCache and TTLs are mutually exclusive
      34: invokespecial #68                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      37: athrow
      38: aload_0
      39: getfield      #28                 // Field authoritativeDnsServerCache:Lio/netty/resolver/dns/DnsCache;
      42: ifnull        76
      45: aload_0
      46: getfield      #31                 // Field minTtl:Ljava/lang/Integer;
      49: ifnonnull     66
      52: aload_0
      53: getfield      #30                 // Field maxTtl:Ljava/lang/Integer;
      56: ifnonnull     66
      59: aload_0
      60: getfield      #32                 // Field negativeTtl:Ljava/lang/Integer;
      63: ifnull        76
      66: new           #66                 // class java/lang/IllegalStateException
      69: dup
      70: ldc           #69                 // String authoritativeDnsServerCache and TTLs are mutually exclusive
      72: invokespecial #68                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      75: athrow
      76: aload_0
      77: getfield      #24                 // Field resolveCache:Lio/netty/resolver/dns/DnsCache;
      80: ifnull        90
      83: aload_0
      84: getfield      #24                 // Field resolveCache:Lio/netty/resolver/dns/DnsCache;
      87: goto          94
      90: aload_0
      91: invokespecial #70                 // Method newCache:()Lio/netty/resolver/dns/DnsCache;
      94: astore_1
      95: aload_0
      96: getfield      #28                 // Field authoritativeDnsServerCache:Lio/netty/resolver/dns/DnsCache;
      99: ifnull        109
     102: aload_0
     103: getfield      #28                 // Field authoritativeDnsServerCache:Lio/netty/resolver/dns/DnsCache;
     106: goto          113
     109: aload_0
     110: invokespecial #70                 // Method newCache:()Lio/netty/resolver/dns/DnsCache;
     113: astore_2
     114: new           #71                 // class io/netty/resolver/dns/DnsNameResolver
     117: dup
     118: aload_0
     119: getfield      #19                 // Field eventLoop:Lio/netty/channel/EventLoop;
     122: aload_0
     123: getfield      #20                 // Field channelFactory:Lio/netty/channel/ChannelFactory;
     126: aload_1
     127: aload_2
     128: aload_0
     129: getfield      #16                 // Field dnsQueryLifecycleObserverFactory:Lio/netty/resolver/dns/DnsQueryLifecycleObserverFactory;
     132: aload_0
     133: getfield      #4                  // Field queryTimeoutMillis:J
     136: aload_0
     137: getfield      #6                  // Field resolvedAddressTypes:Lio/netty/resolver/ResolvedAddressTypes;
     140: aload_0
     141: getfield      #7                  // Field recursionDesired:Z
     144: aload_0
     145: getfield      #8                  // Field maxQueriesPerResolve:I
     148: aload_0
     149: getfield      #45                 // Field traceEnabled:Z
     152: aload_0
     153: getfield      #9                  // Field maxPayloadSize:I
     156: aload_0
     157: getfield      #10                 // Field optResourceEnabled:Z
     160: aload_0
     161: getfield      #12                 // Field hostsFileEntriesResolver:Lio/netty/resolver/HostsFileEntriesResolver;
     164: aload_0
     165: getfield      #14                 // Field dnsServerAddressStreamProvider:Lio/netty/resolver/dns/DnsServerAddressStreamProvider;
     168: aload_0
     169: getfield      #60                 // Field searchDomains:[Ljava/lang/String;
     172: aload_0
     173: getfield      #17                 // Field ndots:I
     176: aload_0
     177: getfield      #18                 // Field decodeIdn:Z
     180: invokespecial #72                 // Method io/netty/resolver/dns/DnsNameResolver."<init>":(Lio/netty/channel/EventLoop;Lio/netty/channel/ChannelFactory;Lio/netty/resolver/dns/DnsCache;Lio/netty/resolver/dns/DnsCache;Lio/netty/resolver/dns/DnsQueryLifecycleObserverFactory;JLio/netty/resolver/ResolvedAddressTypes;ZIZIZLio/netty/resolver/HostsFileEntriesResolver;Lio/netty/resolver/dns/DnsServerAddressStreamProvider;[Ljava/lang/String;IZ)V
     183: areturn
}
