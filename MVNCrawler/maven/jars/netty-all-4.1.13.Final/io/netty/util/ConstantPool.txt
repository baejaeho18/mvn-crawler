Compiled from "ConstantPool.java"
public abstract class io.netty.util.ConstantPool<T extends io.netty.util.Constant<T>> {
  private final java.util.concurrent.ConcurrentMap<java.lang.String, T> constants;

  private final java.util.concurrent.atomic.AtomicInteger nextId;

  public io.netty.util.ConstantPool();
    Code:
       0: aload_0
       1: invokespecial #15                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: invokestatic  #21                 // Method io/netty/util/internal/PlatformDependent.newConcurrentHashMap:()Ljava/util/concurrent/ConcurrentMap;
       8: putfield      #23                 // Field constants:Ljava/util/concurrent/ConcurrentMap;
      11: aload_0
      12: new           #25                 // class java/util/concurrent/atomic/AtomicInteger
      15: dup
      16: iconst_1
      17: invokespecial #28                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
      20: putfield      #30                 // Field nextId:Ljava/util/concurrent/atomic/AtomicInteger;
      23: return

  public T valueOf(java.lang.Class<?>, java.lang.String);
    Code:
       0: aload_1
       1: ifnonnull     14
       4: new           #37                 // class java/lang/NullPointerException
       7: dup
       8: ldc           #39                 // String firstNameComponent
      10: invokespecial #42                 // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: aload_2
      15: ifnonnull     28
      18: new           #37                 // class java/lang/NullPointerException
      21: dup
      22: ldc           #44                 // String secondNameComponent
      24: invokespecial #42                 // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      27: athrow
      28: aload_0
      29: new           #46                 // class java/lang/StringBuilder
      32: dup
      33: invokespecial #47                 // Method java/lang/StringBuilder."<init>":()V
      36: aload_1
      37: invokevirtual #53                 // Method java/lang/Class.getName:()Ljava/lang/String;
      40: invokevirtual #57                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      43: bipush        35
      45: invokevirtual #60                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      48: aload_2
      49: invokevirtual #57                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      52: invokevirtual #63                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      55: invokevirtual #66                 // Method valueOf:(Ljava/lang/String;)Lio/netty/util/Constant;
      58: areturn

  public T valueOf(java.lang.String);
    Code:
       0: aload_1
       1: invokestatic  #73                 // Method checkNotNullAndNotEmpty:(Ljava/lang/String;)Ljava/lang/String;
       4: pop
       5: aload_0
       6: aload_1
       7: invokespecial #76                 // Method getOrCreate:(Ljava/lang/String;)Lio/netty/util/Constant;
      10: areturn

  private T getOrCreate(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #23                 // Field constants:Ljava/util/concurrent/ConcurrentMap;
       4: aload_1
       5: invokeinterface #83,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #85                 // class io/netty/util/Constant
      13: astore_2
      14: aload_2
      15: ifnonnull     49
      18: aload_0
      19: aload_0
      20: invokevirtual #88                 // Method nextId:()I
      23: aload_1
      24: invokevirtual #92                 // Method newConstant:(ILjava/lang/String;)Lio/netty/util/Constant;
      27: astore_3
      28: aload_0
      29: getfield      #23                 // Field constants:Ljava/util/concurrent/ConcurrentMap;
      32: aload_1
      33: aload_3
      34: invokeinterface #96,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      39: checkcast     #85                 // class io/netty/util/Constant
      42: astore_2
      43: aload_2
      44: ifnonnull     49
      47: aload_3
      48: areturn
      49: aload_2
      50: areturn

  public boolean exists(java.lang.String);
    Code:
       0: aload_1
       1: invokestatic  #73                 // Method checkNotNullAndNotEmpty:(Ljava/lang/String;)Ljava/lang/String;
       4: pop
       5: aload_0
       6: getfield      #23                 // Field constants:Ljava/util/concurrent/ConcurrentMap;
       9: aload_1
      10: invokeinterface #106,  2          // InterfaceMethod java/util/concurrent/ConcurrentMap.containsKey:(Ljava/lang/Object;)Z
      15: ireturn

  public T newInstance(java.lang.String);
    Code:
       0: aload_1
       1: invokestatic  #73                 // Method checkNotNullAndNotEmpty:(Ljava/lang/String;)Ljava/lang/String;
       4: pop
       5: aload_0
       6: aload_1
       7: invokespecial #110                // Method createOrThrow:(Ljava/lang/String;)Lio/netty/util/Constant;
      10: areturn

  private T createOrThrow(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #23                 // Field constants:Ljava/util/concurrent/ConcurrentMap;
       4: aload_1
       5: invokeinterface #83,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #85                 // class io/netty/util/Constant
      13: astore_2
      14: aload_2
      15: ifnonnull     49
      18: aload_0
      19: aload_0
      20: invokevirtual #88                 // Method nextId:()I
      23: aload_1
      24: invokevirtual #92                 // Method newConstant:(ILjava/lang/String;)Lio/netty/util/Constant;
      27: astore_3
      28: aload_0
      29: getfield      #23                 // Field constants:Ljava/util/concurrent/ConcurrentMap;
      32: aload_1
      33: aload_3
      34: invokeinterface #96,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      39: checkcast     #85                 // class io/netty/util/Constant
      42: astore_2
      43: aload_2
      44: ifnonnull     49
      47: aload_3
      48: areturn
      49: new           #112                // class java/lang/IllegalArgumentException
      52: dup
      53: ldc           #114                // String \'%s\' is already in use
      55: iconst_1
      56: anewarray     #5                  // class java/lang/Object
      59: dup
      60: iconst_0
      61: aload_1
      62: aastore
      63: invokestatic  #120                // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      66: invokespecial #121                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      69: athrow

  private static java.lang.String checkNotNullAndNotEmpty(java.lang.String);
    Code:
       0: aload_0
       1: ldc           #122                // String name
       3: invokestatic  #128                // Method io/netty/util/internal/ObjectUtil.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: invokevirtual #132                // Method java/lang/String.isEmpty:()Z
      11: ifeq          24
      14: new           #112                // class java/lang/IllegalArgumentException
      17: dup
      18: ldc           #134                // String empty name
      20: invokespecial #121                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      23: athrow
      24: aload_0
      25: areturn

  protected abstract T newConstant(int, java.lang.String);

  public final int nextId();
    Code:
       0: aload_0
       1: getfield      #30                 // Field nextId:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #138                // Method java/util/concurrent/atomic/AtomicInteger.getAndIncrement:()I
       7: ireturn
}
