Compiled from "UnpaddedInternalThreadLocalMap.java"
class io.netty.util.internal.UnpaddedInternalThreadLocalMap {
  static final java.lang.ThreadLocal<io.netty.util.internal.InternalThreadLocalMap> slowThreadLocalMap;

  static final java.util.concurrent.atomic.AtomicInteger nextIndex;

  java.lang.Object[] indexedVariables;

  int futureListenerStackDepth;

  int localChannelReaderStackDepth;

  java.util.Map<java.lang.Class<?>, java.lang.Boolean> handlerSharableCache;

  io.netty.util.internal.IntegerHolder counterHashCode;

  io.netty.util.internal.ThreadLocalRandom random;

  java.util.Map<java.lang.Class<?>, io.netty.util.internal.TypeParameterMatcher> typeParameterMatcherGetCache;

  java.util.Map<java.lang.Class<?>, java.util.Map<java.lang.String, io.netty.util.internal.TypeParameterMatcher>> typeParameterMatcherFindCache;

  java.lang.StringBuilder stringBuilder;

  java.util.Map<java.nio.charset.Charset, java.nio.charset.CharsetEncoder> charsetEncoderCache;

  java.util.Map<java.nio.charset.Charset, java.nio.charset.CharsetDecoder> charsetDecoderCache;

  java.util.ArrayList<java.lang.Object> arrayList;

  io.netty.util.internal.UnpaddedInternalThreadLocalMap(java.lang.Object[]);
    Code:
       0: aload_0
       1: invokespecial #40                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #42                 // Field indexedVariables:[Ljava/lang/Object;
       9: return

  static {};
    Code:
       0: new           #47                 // class java/lang/ThreadLocal
       3: dup
       4: invokespecial #48                 // Method java/lang/ThreadLocal."<init>":()V
       7: putstatic     #50                 // Field slowThreadLocalMap:Ljava/lang/ThreadLocal;
      10: new           #52                 // class java/util/concurrent/atomic/AtomicInteger
      13: dup
      14: invokespecial #53                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
      17: putstatic     #55                 // Field nextIndex:Ljava/util/concurrent/atomic/AtomicInteger;
      20: return
}
