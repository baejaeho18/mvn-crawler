Compiled from "HashedWheelTimer.java"
public class io.netty.util.HashedWheelTimer implements io.netty.util.Timer {
  static final io.netty.util.internal.logging.InternalLogger logger;

  private static final java.util.concurrent.atomic.AtomicInteger INSTANCE_COUNTER;

  private static final java.util.concurrent.atomic.AtomicBoolean WARNED_TOO_MANY_INSTANCES;

  private static final int INSTANCE_COUNT_LIMIT;

  private static final io.netty.util.ResourceLeakDetector<io.netty.util.HashedWheelTimer> leakDetector;

  private static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<io.netty.util.HashedWheelTimer> WORKER_STATE_UPDATER;

  private final io.netty.util.ResourceLeakTracker<io.netty.util.HashedWheelTimer> leak;

  private final io.netty.util.HashedWheelTimer$Worker worker;

  private final java.lang.Thread workerThread;

  public static final int WORKER_STATE_INIT;

  public static final int WORKER_STATE_STARTED;

  public static final int WORKER_STATE_SHUTDOWN;

  private volatile int workerState;

  private final long tickDuration;

  private final io.netty.util.HashedWheelTimer$HashedWheelBucket[] wheel;

  private final int mask;

  private final java.util.concurrent.CountDownLatch startTimeInitialized;

  private final java.util.Queue<io.netty.util.HashedWheelTimer$HashedWheelTimeout> timeouts;

  private final java.util.Queue<io.netty.util.HashedWheelTimer$HashedWheelTimeout> cancelledTimeouts;

  private final java.util.concurrent.atomic.AtomicLong pendingTimeouts;

  private final long maxPendingTimeouts;

  private volatile long startTime;

  static final boolean $assertionsDisabled;

  public io.netty.util.HashedWheelTimer();
    Code:
       0: aload_0
       1: invokestatic  #72                 // Method java/util/concurrent/Executors.defaultThreadFactory:()Ljava/util/concurrent/ThreadFactory;
       4: invokespecial #75                 // Method "<init>":(Ljava/util/concurrent/ThreadFactory;)V
       7: return

  public io.netty.util.HashedWheelTimer(long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: invokestatic  #72                 // Method java/util/concurrent/Executors.defaultThreadFactory:()Ljava/util/concurrent/ThreadFactory;
       4: lload_1
       5: aload_3
       6: invokespecial #81                 // Method "<init>":(Ljava/util/concurrent/ThreadFactory;JLjava/util/concurrent/TimeUnit;)V
       9: return

  public io.netty.util.HashedWheelTimer(long, java.util.concurrent.TimeUnit, int);
    Code:
       0: aload_0
       1: invokestatic  #72                 // Method java/util/concurrent/Executors.defaultThreadFactory:()Ljava/util/concurrent/ThreadFactory;
       4: lload_1
       5: aload_3
       6: iload         4
       8: invokespecial #87                 // Method "<init>":(Ljava/util/concurrent/ThreadFactory;JLjava/util/concurrent/TimeUnit;I)V
      11: return

  public io.netty.util.HashedWheelTimer(java.util.concurrent.ThreadFactory);
    Code:
       0: aload_0
       1: aload_1
       2: ldc2_w        #89                 // long 100l
       5: getstatic     #95                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
       8: invokespecial #81                 // Method "<init>":(Ljava/util/concurrent/ThreadFactory;JLjava/util/concurrent/TimeUnit;)V
      11: return

  public io.netty.util.HashedWheelTimer(java.util.concurrent.ThreadFactory, long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: aload_1
       2: lload_2
       3: aload         4
       5: sipush        512
       8: invokespecial #87                 // Method "<init>":(Ljava/util/concurrent/ThreadFactory;JLjava/util/concurrent/TimeUnit;I)V
      11: return

  public io.netty.util.HashedWheelTimer(java.util.concurrent.ThreadFactory, long, java.util.concurrent.TimeUnit, int);
    Code:
       0: aload_0
       1: aload_1
       2: lload_2
       3: aload         4
       5: iload         5
       7: iconst_1
       8: invokespecial #100                // Method "<init>":(Ljava/util/concurrent/ThreadFactory;JLjava/util/concurrent/TimeUnit;IZ)V
      11: return

  public io.netty.util.HashedWheelTimer(java.util.concurrent.ThreadFactory, long, java.util.concurrent.TimeUnit, int, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: lload_2
       3: aload         4
       5: iload         5
       7: iload         6
       9: ldc2_w        #101                // long -1l
      12: invokespecial #105                // Method "<init>":(Ljava/util/concurrent/ThreadFactory;JLjava/util/concurrent/TimeUnit;IZJ)V
      15: return

  public io.netty.util.HashedWheelTimer(java.util.concurrent.ThreadFactory, long, java.util.concurrent.TimeUnit, int, boolean, long);
    Code:
       0: aload_0
       1: invokespecial #108                // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #17                 // class io/netty/util/HashedWheelTimer$Worker
       8: dup
       9: aload_0
      10: aconst_null
      11: invokespecial #111                // Method io/netty/util/HashedWheelTimer$Worker."<init>":(Lio/netty/util/HashedWheelTimer;Lio/netty/util/HashedWheelTimer$1;)V
      14: putfield      #113                // Field worker:Lio/netty/util/HashedWheelTimer$Worker;
      17: aload_0
      18: iconst_0
      19: putfield      #115                // Field workerState:I
      22: aload_0
      23: new           #117                // class java/util/concurrent/CountDownLatch
      26: dup
      27: iconst_1
      28: invokespecial #120                // Method java/util/concurrent/CountDownLatch."<init>":(I)V
      31: putfield      #122                // Field startTimeInitialized:Ljava/util/concurrent/CountDownLatch;
      34: aload_0
      35: invokestatic  #128                // Method io/netty/util/internal/PlatformDependent.newMpscQueue:()Ljava/util/Queue;
      38: putfield      #130                // Field timeouts:Ljava/util/Queue;
      41: aload_0
      42: invokestatic  #128                // Method io/netty/util/internal/PlatformDependent.newMpscQueue:()Ljava/util/Queue;
      45: putfield      #132                // Field cancelledTimeouts:Ljava/util/Queue;
      48: aload_0
      49: new           #134                // class java/util/concurrent/atomic/AtomicLong
      52: dup
      53: lconst_0
      54: invokespecial #137                // Method java/util/concurrent/atomic/AtomicLong."<init>":(J)V
      57: putfield      #139                // Field pendingTimeouts:Ljava/util/concurrent/atomic/AtomicLong;
      60: aload_1
      61: ifnonnull     74
      64: new           #141                // class java/lang/NullPointerException
      67: dup
      68: ldc           #142                // String threadFactory
      70: invokespecial #145                // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      73: athrow
      74: aload         4
      76: ifnonnull     89
      79: new           #141                // class java/lang/NullPointerException
      82: dup
      83: ldc           #148                // String unit
      85: invokespecial #145                // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      88: athrow
      89: lload_2
      90: lconst_0
      91: lcmp
      92: ifgt          122
      95: new           #150                // class java/lang/IllegalArgumentException
      98: dup
      99: new           #152                // class java/lang/StringBuilder
     102: dup
     103: invokespecial #153                // Method java/lang/StringBuilder."<init>":()V
     106: ldc           #155                // String tickDuration must be greater than 0:
     108: invokevirtual #159                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     111: lload_2
     112: invokevirtual #162                // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
     115: invokevirtual #166                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     118: invokespecial #167                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     121: athrow
     122: iload         5
     124: ifgt          155
     127: new           #150                // class java/lang/IllegalArgumentException
     130: dup
     131: new           #152                // class java/lang/StringBuilder
     134: dup
     135: invokespecial #153                // Method java/lang/StringBuilder."<init>":()V
     138: ldc           #169                // String ticksPerWheel must be greater than 0:
     140: invokevirtual #159                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     143: iload         5
     145: invokevirtual #172                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     148: invokevirtual #166                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     151: invokespecial #167                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     154: athrow
     155: aload_0
     156: iload         5
     158: invokestatic  #176                // Method createWheel:(I)[Lio/netty/util/HashedWheelTimer$HashedWheelBucket;
     161: putfield      #178                // Field wheel:[Lio/netty/util/HashedWheelTimer$HashedWheelBucket;
     164: aload_0
     165: aload_0
     166: getfield      #178                // Field wheel:[Lio/netty/util/HashedWheelTimer$HashedWheelBucket;
     169: arraylength
     170: iconst_1
     171: isub
     172: putfield      #180                // Field mask:I
     175: aload_0
     176: aload         4
     178: lload_2
     179: invokevirtual #184                // Method java/util/concurrent/TimeUnit.toNanos:(J)J
     182: putfield      #186                // Field tickDuration:J
     185: aload_0
     186: getfield      #186                // Field tickDuration:J
     189: ldc2_w        #187                // long 9223372036854775807l
     192: aload_0
     193: getfield      #178                // Field wheel:[Lio/netty/util/HashedWheelTimer$HashedWheelBucket;
     196: arraylength
     197: i2l
     198: ldiv
     199: lcmp
     200: iflt          243
     203: new           #150                // class java/lang/IllegalArgumentException
     206: dup
     207: ldc           #190                // String tickDuration: %d (expected: 0 < tickDuration in nanos < %d
     209: iconst_2
     210: anewarray     #4                  // class java/lang/Object
     213: dup
     214: iconst_0
     215: lload_2
     216: invokestatic  #196                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     219: aastore
     220: dup
     221: iconst_1
     222: ldc2_w        #187                // long 9223372036854775807l
     225: aload_0
     226: getfield      #178                // Field wheel:[Lio/netty/util/HashedWheelTimer$HashedWheelBucket;
     229: arraylength
     230: i2l
     231: ldiv
     232: invokestatic  #196                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     235: aastore
     236: invokestatic  #202                // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
     239: invokespecial #167                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     242: athrow
     243: aload_0
     244: aload_1
     245: aload_0
     246: getfield      #113                // Field worker:Lio/netty/util/HashedWheelTimer$Worker;
     249: invokeinterface #206,  2          // InterfaceMethod java/util/concurrent/ThreadFactory.newThread:(Ljava/lang/Runnable;)Ljava/lang/Thread;
     254: putfield      #208                // Field workerThread:Ljava/lang/Thread;
     257: aload_0
     258: iload         6
     260: ifne          273
     263: aload_0
     264: getfield      #208                // Field workerThread:Ljava/lang/Thread;
     267: invokevirtual #214                // Method java/lang/Thread.isDaemon:()Z
     270: ifne          283
     273: getstatic     #216                // Field leakDetector:Lio/netty/util/ResourceLeakDetector;
     276: aload_0
     277: invokevirtual #222                // Method io/netty/util/ResourceLeakDetector.track:(Ljava/lang/Object;)Lio/netty/util/ResourceLeakTracker;
     280: goto          284
     283: aconst_null
     284: putfield      #226                // Field leak:Lio/netty/util/ResourceLeakTracker;
     287: aload_0
     288: lload         7
     290: putfield      #228                // Field maxPendingTimeouts:J
     293: getstatic     #230                // Field INSTANCE_COUNTER:Ljava/util/concurrent/atomic/AtomicInteger;
     296: invokevirtual #236                // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
     299: bipush        64
     301: if_icmple     318
     304: getstatic     #238                // Field WARNED_TOO_MANY_INSTANCES:Ljava/util/concurrent/atomic/AtomicBoolean;
     307: iconst_0
     308: iconst_1
     309: invokevirtual #244                // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z
     312: ifeq          318
     315: invokestatic  #247                // Method reportTooManyInstances:()V
     318: return

  protected void finalize() throws java.lang.Throwable;
    Code:
       0: aload_0
       1: invokespecial #252                // Method java/lang/Object.finalize:()V
       4: getstatic     #254                // Field WORKER_STATE_UPDATER:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       7: aload_0
       8: iconst_2
       9: invokevirtual #260                // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndSet:(Ljava/lang/Object;I)I
      12: iconst_2
      13: if_icmpeq     48
      16: getstatic     #230                // Field INSTANCE_COUNTER:Ljava/util/concurrent/atomic/AtomicInteger;
      19: invokevirtual #263                // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
      22: pop
      23: goto          48
      26: astore_1
      27: getstatic     #254                // Field WORKER_STATE_UPDATER:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      30: aload_0
      31: iconst_2
      32: invokevirtual #260                // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndSet:(Ljava/lang/Object;I)I
      35: iconst_2
      36: if_icmpeq     46
      39: getstatic     #230                // Field INSTANCE_COUNTER:Ljava/util/concurrent/atomic/AtomicInteger;
      42: invokevirtual #263                // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
      45: pop
      46: aload_1
      47: athrow
      48: return
    Exception table:
       from    to  target type
           0     4    26   any

  private static io.netty.util.HashedWheelTimer$HashedWheelBucket[] createWheel(int);
    Code:
       0: iload_0
       1: ifgt          31
       4: new           #150                // class java/lang/IllegalArgumentException
       7: dup
       8: new           #152                // class java/lang/StringBuilder
      11: dup
      12: invokespecial #153                // Method java/lang/StringBuilder."<init>":()V
      15: ldc           #169                // String ticksPerWheel must be greater than 0:
      17: invokevirtual #159                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      20: iload_0
      21: invokevirtual #172                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      24: invokevirtual #166                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      27: invokespecial #167                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      30: athrow
      31: iload_0
      32: ldc_w         #264                // int 1073741824
      35: if_icmple     66
      38: new           #150                // class java/lang/IllegalArgumentException
      41: dup
      42: new           #152                // class java/lang/StringBuilder
      45: dup
      46: invokespecial #153                // Method java/lang/StringBuilder."<init>":()V
      49: ldc_w         #266                // String ticksPerWheel may not be greater than 2^30:
      52: invokevirtual #159                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      55: iload_0
      56: invokevirtual #172                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      59: invokevirtual #166                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      62: invokespecial #167                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      65: athrow
      66: iload_0
      67: invokestatic  #270                // Method normalizeTicksPerWheel:(I)I
      70: istore_0
      71: iload_0
      72: anewarray     #11                 // class io/netty/util/HashedWheelTimer$HashedWheelBucket
      75: astore_1
      76: iconst_0
      77: istore_2
      78: iload_2
      79: aload_1
      80: arraylength
      81: if_icmpge     101
      84: aload_1
      85: iload_2
      86: new           #11                 // class io/netty/util/HashedWheelTimer$HashedWheelBucket
      89: dup
      90: aconst_null
      91: invokespecial #274                // Method io/netty/util/HashedWheelTimer$HashedWheelBucket."<init>":(Lio/netty/util/HashedWheelTimer$1;)V
      94: aastore
      95: iinc          2, 1
      98: goto          78
     101: aload_1
     102: areturn

  private static int normalizeTicksPerWheel(int);
    Code:
       0: iconst_1
       1: istore_1
       2: iload_1
       3: iload_0
       4: if_icmpge     14
       7: iload_1
       8: iconst_1
       9: ishl
      10: istore_1
      11: goto          2
      14: iload_1
      15: ireturn

  public void start();
    Code:
       0: getstatic     #254                // Field WORKER_STATE_UPDATER:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #283                // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.get:(Ljava/lang/Object;)I
       7: tableswitch   { // 0 to 2
                     0: 32
                     1: 54
                     2: 57
               default: 68
          }
      32: getstatic     #254                // Field WORKER_STATE_UPDATER:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      35: aload_0
      36: iconst_0
      37: iconst_1
      38: invokevirtual #286                // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      41: ifeq          79
      44: aload_0
      45: getfield      #208                // Field workerThread:Ljava/lang/Thread;
      48: invokevirtual #288                // Method java/lang/Thread.start:()V
      51: goto          79
      54: goto          79
      57: new           #290                // class java/lang/IllegalStateException
      60: dup
      61: ldc_w         #292                // String cannot be started once stopped
      64: invokespecial #293                // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      67: athrow
      68: new           #295                // class java/lang/Error
      71: dup
      72: ldc_w         #297                // String Invalid WorkerState
      75: invokespecial #298                // Method java/lang/Error."<init>":(Ljava/lang/String;)V
      78: athrow
      79: aload_0
      80: getfield      #300                // Field startTime:J
      83: lconst_0
      84: lcmp
      85: ifne          102
      88: aload_0
      89: getfield      #122                // Field startTimeInitialized:Ljava/util/concurrent/CountDownLatch;
      92: invokevirtual #303                // Method java/util/concurrent/CountDownLatch.await:()V
      95: goto          79
      98: astore_1
      99: goto          79
     102: return
    Exception table:
       from    to  target type
          88    95    98   Class java/lang/InterruptedException

  public java.util.Set<io.netty.util.Timeout> stop();
    Code:
       0: invokestatic  #309                // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
       3: aload_0
       4: getfield      #208                // Field workerThread:Ljava/lang/Thread;
       7: if_acmpne     51
      10: new           #290                // class java/lang/IllegalStateException
      13: dup
      14: new           #152                // class java/lang/StringBuilder
      17: dup
      18: invokespecial #153                // Method java/lang/StringBuilder."<init>":()V
      21: ldc           #2                  // class io/netty/util/HashedWheelTimer
      23: invokevirtual #314                // Method java/lang/Class.getSimpleName:()Ljava/lang/String;
      26: invokevirtual #159                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      29: ldc_w         #316                // String .stop() cannot be called from
      32: invokevirtual #159                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      35: ldc_w         #318                // class io/netty/util/TimerTask
      38: invokevirtual #314                // Method java/lang/Class.getSimpleName:()Ljava/lang/String;
      41: invokevirtual #159                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      44: invokevirtual #166                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      47: invokespecial #293                // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      50: athrow
      51: getstatic     #254                // Field WORKER_STATE_UPDATER:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      54: aload_0
      55: iconst_1
      56: iconst_2
      57: invokevirtual #286                // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      60: ifne          122
      63: getstatic     #254                // Field WORKER_STATE_UPDATER:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      66: aload_0
      67: iconst_2
      68: invokevirtual #260                // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndSet:(Ljava/lang/Object;I)I
      71: iconst_2
      72: if_icmpeq     118
      75: getstatic     #230                // Field INSTANCE_COUNTER:Ljava/util/concurrent/atomic/AtomicInteger;
      78: invokevirtual #263                // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
      81: pop
      82: aload_0
      83: getfield      #226                // Field leak:Lio/netty/util/ResourceLeakTracker;
      86: ifnull        118
      89: aload_0
      90: getfield      #226                // Field leak:Lio/netty/util/ResourceLeakTracker;
      93: aload_0
      94: invokeinterface #322,  2          // InterfaceMethod io/netty/util/ResourceLeakTracker.close:(Ljava/lang/Object;)Z
      99: istore_1
     100: getstatic     #324                // Field $assertionsDisabled:Z
     103: ifne          118
     106: iload_1
     107: ifne          118
     110: new           #326                // class java/lang/AssertionError
     113: dup
     114: invokespecial #327                // Method java/lang/AssertionError."<init>":()V
     117: athrow
     118: invokestatic  #332                // Method java/util/Collections.emptySet:()Ljava/util/Set;
     121: areturn
     122: iconst_0
     123: istore_1
     124: aload_0
     125: getfield      #208                // Field workerThread:Ljava/lang/Thread;
     128: invokevirtual #335                // Method java/lang/Thread.isAlive:()Z
     131: ifeq          160
     134: aload_0
     135: getfield      #208                // Field workerThread:Ljava/lang/Thread;
     138: invokevirtual #338                // Method java/lang/Thread.interrupt:()V
     141: aload_0
     142: getfield      #208                // Field workerThread:Ljava/lang/Thread;
     145: ldc2_w        #89                 // long 100l
     148: invokevirtual #341                // Method java/lang/Thread.join:(J)V
     151: goto          124
     154: astore_2
     155: iconst_1
     156: istore_1
     157: goto          124
     160: iload_1
     161: ifeq          170
     164: invokestatic  #309                // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
     167: invokevirtual #338                // Method java/lang/Thread.interrupt:()V
     170: getstatic     #230                // Field INSTANCE_COUNTER:Ljava/util/concurrent/atomic/AtomicInteger;
     173: invokevirtual #263                // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
     176: pop
     177: aload_0
     178: getfield      #226                // Field leak:Lio/netty/util/ResourceLeakTracker;
     181: ifnull        264
     184: aload_0
     185: getfield      #226                // Field leak:Lio/netty/util/ResourceLeakTracker;
     188: aload_0
     189: invokeinterface #322,  2          // InterfaceMethod io/netty/util/ResourceLeakTracker.close:(Ljava/lang/Object;)Z
     194: istore_1
     195: getstatic     #324                // Field $assertionsDisabled:Z
     198: ifne          213
     201: iload_1
     202: ifne          213
     205: new           #326                // class java/lang/AssertionError
     208: dup
     209: invokespecial #327                // Method java/lang/AssertionError."<init>":()V
     212: athrow
     213: goto          264
     216: astore_3
     217: getstatic     #230                // Field INSTANCE_COUNTER:Ljava/util/concurrent/atomic/AtomicInteger;
     220: invokevirtual #263                // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
     223: pop
     224: aload_0
     225: getfield      #226                // Field leak:Lio/netty/util/ResourceLeakTracker;
     228: ifnull        262
     231: aload_0
     232: getfield      #226                // Field leak:Lio/netty/util/ResourceLeakTracker;
     235: aload_0
     236: invokeinterface #322,  2          // InterfaceMethod io/netty/util/ResourceLeakTracker.close:(Ljava/lang/Object;)Z
     241: istore        4
     243: getstatic     #324                // Field $assertionsDisabled:Z
     246: ifne          262
     249: iload         4
     251: ifne          262
     254: new           #326                // class java/lang/AssertionError
     257: dup
     258: invokespecial #327                // Method java/lang/AssertionError."<init>":()V
     261: athrow
     262: aload_3
     263: athrow
     264: aload_0
     265: getfield      #113                // Field worker:Lio/netty/util/HashedWheelTimer$Worker;
     268: invokevirtual #344                // Method io/netty/util/HashedWheelTimer$Worker.unprocessedTimeouts:()Ljava/util/Set;
     271: areturn
    Exception table:
       from    to  target type
         141   151   154   Class java/lang/InterruptedException
         122   170   216   any

  public io.netty.util.Timeout newTimeout(io.netty.util.TimerTask, long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_1
       1: ifnonnull     15
       4: new           #141                // class java/lang/NullPointerException
       7: dup
       8: ldc_w         #352                // String task
      11: invokespecial #145                // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      14: athrow
      15: aload         4
      17: ifnonnull     30
      20: new           #141                // class java/lang/NullPointerException
      23: dup
      24: ldc           #148                // String unit
      26: invokespecial #145                // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      29: athrow
      30: aload_0
      31: getfield      #139                // Field pendingTimeouts:Ljava/util/concurrent/atomic/AtomicLong;
      34: invokevirtual #355                // Method java/util/concurrent/atomic/AtomicLong.incrementAndGet:()J
      37: lstore        5
      39: aload_0
      40: getfield      #228                // Field maxPendingTimeouts:J
      43: lconst_0
      44: lcmp
      45: ifle          114
      48: lload         5
      50: aload_0
      51: getfield      #228                // Field maxPendingTimeouts:J
      54: lcmp
      55: ifle          114
      58: aload_0
      59: getfield      #139                // Field pendingTimeouts:Ljava/util/concurrent/atomic/AtomicLong;
      62: invokevirtual #357                // Method java/util/concurrent/atomic/AtomicLong.decrementAndGet:()J
      65: pop2
      66: new           #359                // class java/util/concurrent/RejectedExecutionException
      69: dup
      70: new           #152                // class java/lang/StringBuilder
      73: dup
      74: invokespecial #153                // Method java/lang/StringBuilder."<init>":()V
      77: ldc_w         #361                // String Number of pending timeouts (
      80: invokevirtual #159                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      83: lload         5
      85: invokevirtual #162                // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      88: ldc_w         #363                // String ) is greater than or equal to maximum allowed pending timeouts (
      91: invokevirtual #159                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      94: aload_0
      95: getfield      #228                // Field maxPendingTimeouts:J
      98: invokevirtual #162                // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
     101: ldc_w         #365                // String )
     104: invokevirtual #159                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     107: invokevirtual #166                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     110: invokespecial #366                // Method java/util/concurrent/RejectedExecutionException."<init>":(Ljava/lang/String;)V
     113: athrow
     114: aload_0
     115: invokevirtual #367                // Method start:()V
     118: invokestatic  #372                // Method java/lang/System.nanoTime:()J
     121: aload         4
     123: lload_2
     124: invokevirtual #184                // Method java/util/concurrent/TimeUnit.toNanos:(J)J
     127: ladd
     128: aload_0
     129: getfield      #300                // Field startTime:J
     132: lsub
     133: lstore        7
     135: new           #14                 // class io/netty/util/HashedWheelTimer$HashedWheelTimeout
     138: dup
     139: aload_0
     140: aload_1
     141: lload         7
     143: invokespecial #375                // Method io/netty/util/HashedWheelTimer$HashedWheelTimeout."<init>":(Lio/netty/util/HashedWheelTimer;Lio/netty/util/TimerTask;J)V
     146: astore        9
     148: aload_0
     149: getfield      #130                // Field timeouts:Ljava/util/Queue;
     152: aload         9
     154: invokeinterface #380,  2          // InterfaceMethod java/util/Queue.add:(Ljava/lang/Object;)Z
     159: pop
     160: aload         9
     162: areturn

  public long pendingTimeouts();
    Code:
       0: aload_0
       1: getfield      #139                // Field pendingTimeouts:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #388                // Method java/util/concurrent/atomic/AtomicLong.get:()J
       7: lreturn

  private static void reportTooManyInstances();
    Code:
       0: ldc           #2                  // class io/netty/util/HashedWheelTimer
       2: invokestatic  #394                // Method io/netty/util/internal/StringUtil.simpleClassName:(Ljava/lang/Class;)Ljava/lang/String;
       5: astore_0
       6: getstatic     #396                // Field logger:Lio/netty/util/internal/logging/InternalLogger;
       9: new           #152                // class java/lang/StringBuilder
      12: dup
      13: invokespecial #153                // Method java/lang/StringBuilder."<init>":()V
      16: ldc_w         #398                // String You are creating too many
      19: invokevirtual #159                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      22: aload_0
      23: invokevirtual #159                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      26: ldc_w         #400                // String  instances.
      29: invokevirtual #159                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      32: aload_0
      33: invokevirtual #159                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      36: ldc_w         #402                // String  is a shared resource that must be reused across the JVM,so that only a few instances are created.
      39: invokevirtual #159                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      42: invokevirtual #166                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      45: invokeinterface #407,  2          // InterfaceMethod io/netty/util/internal/logging/InternalLogger.error:(Ljava/lang/String;)V
      50: return

  static long access$202(io.netty.util.HashedWheelTimer, long);
    Code:
       0: aload_0
       1: lload_1
       2: dup2_x1
       3: putfield      #300                // Field startTime:J
       6: lreturn

  static long access$200(io.netty.util.HashedWheelTimer);
    Code:
       0: aload_0
       1: getfield      #300                // Field startTime:J
       4: lreturn

  static java.util.concurrent.CountDownLatch access$300(io.netty.util.HashedWheelTimer);
    Code:
       0: aload_0
       1: getfield      #122                // Field startTimeInitialized:Ljava/util/concurrent/CountDownLatch;
       4: areturn

  static int access$400(io.netty.util.HashedWheelTimer);
    Code:
       0: aload_0
       1: getfield      #180                // Field mask:I
       4: ireturn

  static io.netty.util.HashedWheelTimer$HashedWheelBucket[] access$500(io.netty.util.HashedWheelTimer);
    Code:
       0: aload_0
       1: getfield      #178                // Field wheel:[Lio/netty/util/HashedWheelTimer$HashedWheelBucket;
       4: areturn

  static java.util.concurrent.atomic.AtomicIntegerFieldUpdater access$600();
    Code:
       0: getstatic     #254                // Field WORKER_STATE_UPDATER:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: areturn

  static java.util.Queue access$700(io.netty.util.HashedWheelTimer);
    Code:
       0: aload_0
       1: getfield      #130                // Field timeouts:Ljava/util/Queue;
       4: areturn

  static long access$900(io.netty.util.HashedWheelTimer);
    Code:
       0: aload_0
       1: getfield      #186                // Field tickDuration:J
       4: lreturn

  static java.util.Queue access$1000(io.netty.util.HashedWheelTimer);
    Code:
       0: aload_0
       1: getfield      #132                // Field cancelledTimeouts:Ljava/util/Queue;
       4: areturn

  static java.util.concurrent.atomic.AtomicLong access$1100(io.netty.util.HashedWheelTimer);
    Code:
       0: aload_0
       1: getfield      #139                // Field pendingTimeouts:Ljava/util/concurrent/atomic/AtomicLong;
       4: areturn

  static {};
    Code:
       0: ldc           #2                  // class io/netty/util/HashedWheelTimer
       2: invokevirtual #433                // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #324                // Field $assertionsDisabled:Z
      16: ldc           #2                  // class io/netty/util/HashedWheelTimer
      18: invokestatic  #439                // Method io/netty/util/internal/logging/InternalLoggerFactory.getInstance:(Ljava/lang/Class;)Lio/netty/util/internal/logging/InternalLogger;
      21: putstatic     #396                // Field logger:Lio/netty/util/internal/logging/InternalLogger;
      24: new           #232                // class java/util/concurrent/atomic/AtomicInteger
      27: dup
      28: invokespecial #440                // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
      31: putstatic     #230                // Field INSTANCE_COUNTER:Ljava/util/concurrent/atomic/AtomicInteger;
      34: new           #240                // class java/util/concurrent/atomic/AtomicBoolean
      37: dup
      38: invokespecial #441                // Method java/util/concurrent/atomic/AtomicBoolean."<init>":()V
      41: putstatic     #238                // Field WARNED_TOO_MANY_INSTANCES:Ljava/util/concurrent/atomic/AtomicBoolean;
      44: invokestatic  #447                // Method io/netty/util/ResourceLeakDetectorFactory.instance:()Lio/netty/util/ResourceLeakDetectorFactory;
      47: ldc           #2                  // class io/netty/util/HashedWheelTimer
      49: iconst_1
      50: invokevirtual #451                // Method io/netty/util/ResourceLeakDetectorFactory.newResourceLeakDetector:(Ljava/lang/Class;I)Lio/netty/util/ResourceLeakDetector;
      53: putstatic     #216                // Field leakDetector:Lio/netty/util/ResourceLeakDetector;
      56: ldc           #2                  // class io/netty/util/HashedWheelTimer
      58: ldc_w         #452                // String workerState
      61: invokestatic  #456                // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      64: putstatic     #254                // Field WORKER_STATE_UPDATER:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      67: return
}
