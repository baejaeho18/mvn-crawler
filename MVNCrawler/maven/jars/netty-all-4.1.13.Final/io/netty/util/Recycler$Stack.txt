Compiled from "Recycler.java"
final class io.netty.util.Recycler$Stack<T> {
  final io.netty.util.Recycler<T> parent;

  final java.lang.Thread thread;

  final java.util.concurrent.atomic.AtomicInteger availableSharedCapacity;

  final int maxDelayedQueues;

  private final int maxCapacity;

  private final int ratioMask;

  private io.netty.util.Recycler$DefaultHandle<?>[] elements;

  private int size;

  private int handleRecycleCount;

  private io.netty.util.Recycler$WeakOrderQueue cursor;

  private io.netty.util.Recycler$WeakOrderQueue prev;

  private volatile io.netty.util.Recycler$WeakOrderQueue head;

  io.netty.util.Recycler$Stack(io.netty.util.Recycler<T>, java.lang.Thread, int, int, int, int);
    Code:
       0: aload_0
       1: invokespecial #40                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_m1
       6: putfield      #42                 // Field handleRecycleCount:I
       9: aload_0
      10: aload_1
      11: putfield      #44                 // Field parent:Lio/netty/util/Recycler;
      14: aload_0
      15: aload_2
      16: putfield      #46                 // Field thread:Ljava/lang/Thread;
      19: aload_0
      20: iload_3
      21: putfield      #48                 // Field maxCapacity:I
      24: aload_0
      25: new           #50                 // class java/util/concurrent/atomic/AtomicInteger
      28: dup
      29: iload_3
      30: iload         4
      32: idiv
      33: invokestatic  #54                 // Method io/netty/util/Recycler.access$800:()I
      36: invokestatic  #60                 // Method java/lang/Math.max:(II)I
      39: invokespecial #63                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
      42: putfield      #65                 // Field availableSharedCapacity:Ljava/util/concurrent/atomic/AtomicInteger;
      45: aload_0
      46: invokestatic  #68                 // Method io/netty/util/Recycler.access$1600:()I
      49: iload_3
      50: invokestatic  #71                 // Method java/lang/Math.min:(II)I
      53: anewarray     #8                  // class io/netty/util/Recycler$DefaultHandle
      56: putfield      #73                 // Field elements:[Lio/netty/util/Recycler$DefaultHandle;
      59: aload_0
      60: iload         5
      62: putfield      #75                 // Field ratioMask:I
      65: aload_0
      66: iload         6
      68: putfield      #77                 // Field maxDelayedQueues:I
      71: return

  synchronized void setHead(io.netty.util.Recycler$WeakOrderQueue);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #85                 // Field head:Lio/netty/util/Recycler$WeakOrderQueue;
       5: invokestatic  #89                 // Method io/netty/util/Recycler$WeakOrderQueue.access$1700:(Lio/netty/util/Recycler$WeakOrderQueue;Lio/netty/util/Recycler$WeakOrderQueue;)V
       8: aload_0
       9: aload_1
      10: putfield      #85                 // Field head:Lio/netty/util/Recycler$WeakOrderQueue;
      13: return

  int increaseCapacity(int);
    Code:
       0: aload_0
       1: getfield      #73                 // Field elements:[Lio/netty/util/Recycler$DefaultHandle;
       4: arraylength
       5: istore_2
       6: aload_0
       7: getfield      #48                 // Field maxCapacity:I
      10: istore_3
      11: iload_2
      12: iconst_1
      13: ishl
      14: istore_2
      15: iload_2
      16: iload_1
      17: if_icmpge     25
      20: iload_2
      21: iload_3
      22: if_icmplt     11
      25: iload_2
      26: iload_3
      27: invokestatic  #71                 // Method java/lang/Math.min:(II)I
      30: istore_2
      31: iload_2
      32: aload_0
      33: getfield      #73                 // Field elements:[Lio/netty/util/Recycler$DefaultHandle;
      36: arraylength
      37: if_icmpeq     55
      40: aload_0
      41: aload_0
      42: getfield      #73                 // Field elements:[Lio/netty/util/Recycler$DefaultHandle;
      45: iload_2
      46: invokestatic  #98                 // Method java/util/Arrays.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;
      49: checkcast     #99                 // class "[Lio/netty/util/Recycler$DefaultHandle;"
      52: putfield      #73                 // Field elements:[Lio/netty/util/Recycler$DefaultHandle;
      55: iload_2
      56: ireturn

  io.netty.util.Recycler$DefaultHandle<T> pop();
    Code:
       0: aload_0
       1: getfield      #105                // Field size:I
       4: istore_1
       5: iload_1
       6: ifne          23
       9: aload_0
      10: invokevirtual #109                // Method scavenge:()Z
      13: ifne          18
      16: aconst_null
      17: areturn
      18: aload_0
      19: getfield      #105                // Field size:I
      22: istore_1
      23: iinc          1, -1
      26: aload_0
      27: getfield      #73                 // Field elements:[Lio/netty/util/Recycler$DefaultHandle;
      30: iload_1
      31: aaload
      32: astore_2
      33: aload_0
      34: getfield      #73                 // Field elements:[Lio/netty/util/Recycler$DefaultHandle;
      37: iload_1
      38: aconst_null
      39: aastore
      40: aload_2
      41: invokestatic  #113                // Method io/netty/util/Recycler$DefaultHandle.access$1100:(Lio/netty/util/Recycler$DefaultHandle;)I
      44: aload_2
      45: invokestatic  #116                // Method io/netty/util/Recycler$DefaultHandle.access$1500:(Lio/netty/util/Recycler$DefaultHandle;)I
      48: if_icmpeq     61
      51: new           #118                // class java/lang/IllegalStateException
      54: dup
      55: ldc           #120                // String recycled multiple times
      57: invokespecial #123                // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      60: athrow
      61: aload_2
      62: iconst_0
      63: invokestatic  #127                // Method io/netty/util/Recycler$DefaultHandle.access$1502:(Lio/netty/util/Recycler$DefaultHandle;I)I
      66: pop
      67: aload_2
      68: iconst_0
      69: invokestatic  #130                // Method io/netty/util/Recycler$DefaultHandle.access$1102:(Lio/netty/util/Recycler$DefaultHandle;I)I
      72: pop
      73: aload_0
      74: iload_1
      75: putfield      #105                // Field size:I
      78: aload_2
      79: areturn

  boolean scavenge();
    Code:
       0: aload_0
       1: invokevirtual #135                // Method scavengeSome:()Z
       4: ifeq          9
       7: iconst_1
       8: ireturn
       9: aload_0
      10: aconst_null
      11: putfield      #137                // Field prev:Lio/netty/util/Recycler$WeakOrderQueue;
      14: aload_0
      15: aload_0
      16: getfield      #85                 // Field head:Lio/netty/util/Recycler$WeakOrderQueue;
      19: putfield      #139                // Field cursor:Lio/netty/util/Recycler$WeakOrderQueue;
      22: iconst_0
      23: ireturn

  boolean scavengeSome();
    Code:
       0: aload_0
       1: getfield      #139                // Field cursor:Lio/netty/util/Recycler$WeakOrderQueue;
       4: astore_1
       5: aload_1
       6: ifnonnull     22
       9: aconst_null
      10: astore_2
      11: aload_0
      12: getfield      #85                 // Field head:Lio/netty/util/Recycler$WeakOrderQueue;
      15: astore_1
      16: aload_1
      17: ifnonnull     27
      20: iconst_0
      21: ireturn
      22: aload_0
      23: getfield      #137                // Field prev:Lio/netty/util/Recycler$WeakOrderQueue;
      26: astore_2
      27: iconst_0
      28: istore_3
      29: aload_1
      30: aload_0
      31: invokevirtual #143                // Method io/netty/util/Recycler$WeakOrderQueue.transfer:(Lio/netty/util/Recycler$Stack;)Z
      34: ifeq          42
      37: iconst_1
      38: istore_3
      39: goto          104
      42: aload_1
      43: invokestatic  #147                // Method io/netty/util/Recycler$WeakOrderQueue.access$1800:(Lio/netty/util/Recycler$WeakOrderQueue;)Lio/netty/util/Recycler$WeakOrderQueue;
      46: astore        4
      48: aload_1
      49: invokestatic  #151                // Method io/netty/util/Recycler$WeakOrderQueue.access$1900:(Lio/netty/util/Recycler$WeakOrderQueue;)Ljava/lang/ref/WeakReference;
      52: invokevirtual #157                // Method java/lang/ref/WeakReference.get:()Ljava/lang/Object;
      55: ifnonnull     91
      58: aload_1
      59: invokevirtual #160                // Method io/netty/util/Recycler$WeakOrderQueue.hasFinalData:()Z
      62: ifeq          78
      65: aload_1
      66: aload_0
      67: invokevirtual #143                // Method io/netty/util/Recycler$WeakOrderQueue.transfer:(Lio/netty/util/Recycler$Stack;)Z
      70: ifeq          78
      73: iconst_1
      74: istore_3
      75: goto          65
      78: aload_2
      79: ifnull        93
      82: aload_2
      83: aload         4
      85: invokestatic  #89                 // Method io/netty/util/Recycler$WeakOrderQueue.access$1700:(Lio/netty/util/Recycler$WeakOrderQueue;Lio/netty/util/Recycler$WeakOrderQueue;)V
      88: goto          93
      91: aload_1
      92: astore_2
      93: aload         4
      95: astore_1
      96: aload_1
      97: ifnull        104
     100: iload_3
     101: ifeq          29
     104: aload_0
     105: aload_2
     106: putfield      #137                // Field prev:Lio/netty/util/Recycler$WeakOrderQueue;
     109: aload_0
     110: aload_1
     111: putfield      #139                // Field cursor:Lio/netty/util/Recycler$WeakOrderQueue;
     114: iload_3
     115: ireturn

  void push(io.netty.util.Recycler$DefaultHandle<?>);
    Code:
       0: invokestatic  #171                // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
       3: astore_2
       4: aload_0
       5: getfield      #46                 // Field thread:Ljava/lang/Thread;
       8: aload_2
       9: if_acmpne     20
      12: aload_0
      13: aload_1
      14: invokespecial #174                // Method pushNow:(Lio/netty/util/Recycler$DefaultHandle;)V
      17: goto          26
      20: aload_0
      21: aload_1
      22: aload_2
      23: invokespecial #178                // Method pushLater:(Lio/netty/util/Recycler$DefaultHandle;Ljava/lang/Thread;)V
      26: return

  private void pushNow(io.netty.util.Recycler$DefaultHandle<?>);
    Code:
       0: aload_1
       1: invokestatic  #116                // Method io/netty/util/Recycler$DefaultHandle.access$1500:(Lio/netty/util/Recycler$DefaultHandle;)I
       4: aload_1
       5: invokestatic  #113                // Method io/netty/util/Recycler$DefaultHandle.access$1100:(Lio/netty/util/Recycler$DefaultHandle;)I
       8: ior
       9: ifeq          22
      12: new           #118                // class java/lang/IllegalStateException
      15: dup
      16: ldc           #182                // String recycled already
      18: invokespecial #123                // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      21: athrow
      22: aload_1
      23: aload_1
      24: invokestatic  #185                // Method io/netty/util/Recycler.access$2000:()I
      27: invokestatic  #130                // Method io/netty/util/Recycler$DefaultHandle.access$1102:(Lio/netty/util/Recycler$DefaultHandle;I)I
      30: invokestatic  #127                // Method io/netty/util/Recycler$DefaultHandle.access$1502:(Lio/netty/util/Recycler$DefaultHandle;I)I
      33: pop
      34: aload_0
      35: getfield      #105                // Field size:I
      38: istore_2
      39: iload_2
      40: aload_0
      41: getfield      #48                 // Field maxCapacity:I
      44: if_icmpge     55
      47: aload_0
      48: aload_1
      49: invokevirtual #189                // Method dropHandle:(Lio/netty/util/Recycler$DefaultHandle;)Z
      52: ifeq          56
      55: return
      56: iload_2
      57: aload_0
      58: getfield      #73                 // Field elements:[Lio/netty/util/Recycler$DefaultHandle;
      61: arraylength
      62: if_icmpne     89
      65: aload_0
      66: aload_0
      67: getfield      #73                 // Field elements:[Lio/netty/util/Recycler$DefaultHandle;
      70: iload_2
      71: iconst_1
      72: ishl
      73: aload_0
      74: getfield      #48                 // Field maxCapacity:I
      77: invokestatic  #71                 // Method java/lang/Math.min:(II)I
      80: invokestatic  #98                 // Method java/util/Arrays.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;
      83: checkcast     #99                 // class "[Lio/netty/util/Recycler$DefaultHandle;"
      86: putfield      #73                 // Field elements:[Lio/netty/util/Recycler$DefaultHandle;
      89: aload_0
      90: getfield      #73                 // Field elements:[Lio/netty/util/Recycler$DefaultHandle;
      93: iload_2
      94: aload_1
      95: aastore
      96: aload_0
      97: iload_2
      98: iconst_1
      99: iadd
     100: putfield      #105                // Field size:I
     103: return

  private void pushLater(io.netty.util.Recycler$DefaultHandle<?>, java.lang.Thread);
    Code:
       0: invokestatic  #193                // Method io/netty/util/Recycler.access$2100:()Lio/netty/util/concurrent/FastThreadLocal;
       3: invokevirtual #196                // Method io/netty/util/concurrent/FastThreadLocal.get:()Ljava/lang/Object;
       6: checkcast     #198                // class java/util/Map
       9: astore_3
      10: aload_3
      11: aload_0
      12: invokeinterface #201,  2          // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      17: checkcast     #13                 // class io/netty/util/Recycler$WeakOrderQueue
      20: astore        4
      22: aload         4
      24: ifnonnull     77
      27: aload_3
      28: invokeinterface #203,  1          // InterfaceMethod java/util/Map.size:()I
      33: aload_0
      34: getfield      #77                 // Field maxDelayedQueues:I
      37: if_icmplt     52
      40: aload_3
      41: aload_0
      42: getstatic     #206                // Field io/netty/util/Recycler$WeakOrderQueue.DUMMY:Lio/netty/util/Recycler$WeakOrderQueue;
      45: invokeinterface #210,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      50: pop
      51: return
      52: aload_0
      53: aload_2
      54: invokestatic  #214                // Method io/netty/util/Recycler$WeakOrderQueue.allocate:(Lio/netty/util/Recycler$Stack;Ljava/lang/Thread;)Lio/netty/util/Recycler$WeakOrderQueue;
      57: dup
      58: astore        4
      60: ifnonnull     64
      63: return
      64: aload_3
      65: aload_0
      66: aload         4
      68: invokeinterface #210,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      73: pop
      74: goto          86
      77: aload         4
      79: getstatic     #206                // Field io/netty/util/Recycler$WeakOrderQueue.DUMMY:Lio/netty/util/Recycler$WeakOrderQueue;
      82: if_acmpne     86
      85: return
      86: aload         4
      88: aload_1
      89: invokevirtual #217                // Method io/netty/util/Recycler$WeakOrderQueue.add:(Lio/netty/util/Recycler$DefaultHandle;)V
      92: return

  boolean dropHandle(io.netty.util.Recycler$DefaultHandle<?>);
    Code:
       0: aload_1
       1: getfield      #223                // Field io/netty/util/Recycler$DefaultHandle.hasBeenRecycled:Z
       4: ifne          33
       7: aload_0
       8: dup
       9: getfield      #42                 // Field handleRecycleCount:I
      12: iconst_1
      13: iadd
      14: dup_x1
      15: putfield      #42                 // Field handleRecycleCount:I
      18: aload_0
      19: getfield      #75                 // Field ratioMask:I
      22: iand
      23: ifeq          28
      26: iconst_1
      27: ireturn
      28: aload_1
      29: iconst_1
      30: putfield      #223                // Field io/netty/util/Recycler$DefaultHandle.hasBeenRecycled:Z
      33: iconst_0
      34: ireturn

  io.netty.util.Recycler$DefaultHandle<T> newHandle();
    Code:
       0: new           #8                  // class io/netty/util/Recycler$DefaultHandle
       3: dup
       4: aload_0
       5: invokespecial #228                // Method io/netty/util/Recycler$DefaultHandle."<init>":(Lio/netty/util/Recycler$Stack;)V
       8: areturn

  static io.netty.util.Recycler$DefaultHandle[] access$600(io.netty.util.Recycler$Stack);
    Code:
       0: aload_0
       1: getfield      #73                 // Field elements:[Lio/netty/util/Recycler$DefaultHandle;
       4: areturn

  static int access$700(io.netty.util.Recycler$Stack);
    Code:
       0: aload_0
       1: getfield      #105                // Field size:I
       4: ireturn

  static int access$702(io.netty.util.Recycler$Stack, int);
    Code:
       0: aload_0
       1: iload_1
       2: dup_x1
       3: putfield      #105                // Field size:I
       6: ireturn
}
