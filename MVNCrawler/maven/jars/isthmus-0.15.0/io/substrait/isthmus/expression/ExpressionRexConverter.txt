Compiled from "ExpressionRexConverter.java"
public class io.substrait.isthmus.expression.ExpressionRexConverter extends io.substrait.expression.AbstractExpressionVisitor<org.apache.calcite.rex.RexNode, java.lang.RuntimeException> implements io.substrait.expression.FunctionArg$FuncArgVisitor<org.apache.calcite.rex.RexNode, java.lang.RuntimeException> {
  private final org.apache.calcite.rel.type.RelDataTypeFactory typeFactory;

  private final io.substrait.isthmus.TypeConverter typeConverter;

  private final org.apache.calcite.rex.RexBuilder rexBuilder;

  private final io.substrait.isthmus.expression.ScalarFunctionConverter scalarFunctionConverter;

  private final io.substrait.isthmus.expression.AggregateFunctionConverter aggregateFunctionConverter;

  private static final org.apache.calcite.sql.SqlIntervalQualifier YEAR_MONTH_INTERVAL;

  private static final org.apache.calcite.sql.SqlIntervalQualifier DAY_SECOND_INTERVAL;

  private static final long MICROS_IN_DAY;

  public io.substrait.isthmus.expression.ExpressionRexConverter(org.apache.calcite.rel.type.RelDataTypeFactory, io.substrait.isthmus.expression.ScalarFunctionConverter, io.substrait.isthmus.expression.AggregateFunctionConverter, io.substrait.isthmus.TypeConverter);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method io/substrait/expression/AbstractExpressionVisitor."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #7                  // Field typeFactory:Lorg/apache/calcite/rel/type/RelDataTypeFactory;
       9: aload_0
      10: aload         4
      12: putfield      #13                 // Field typeConverter:Lio/substrait/isthmus/TypeConverter;
      15: aload_0
      16: new           #17                 // class org/apache/calcite/rex/RexBuilder
      19: dup
      20: aload_1
      21: invokespecial #19                 // Method org/apache/calcite/rex/RexBuilder."<init>":(Lorg/apache/calcite/rel/type/RelDataTypeFactory;)V
      24: putfield      #22                 // Field rexBuilder:Lorg/apache/calcite/rex/RexBuilder;
      27: aload_0
      28: aload_2
      29: putfield      #26                 // Field scalarFunctionConverter:Lio/substrait/isthmus/expression/ScalarFunctionConverter;
      32: aload_0
      33: aload_3
      34: putfield      #30                 // Field aggregateFunctionConverter:Lio/substrait/isthmus/expression/AggregateFunctionConverter;
      37: return

  public org.apache.calcite.rex.RexNode visit(io.substrait.expression.Expression$NullLiteral) throws java.lang.RuntimeException;
    Code:
       0: aload_0
       1: getfield      #22                 // Field rexBuilder:Lorg/apache/calcite/rex/RexBuilder;
       4: aconst_null
       5: aload_0
       6: getfield      #13                 // Field typeConverter:Lio/substrait/isthmus/TypeConverter;
       9: aload_0
      10: getfield      #7                  // Field typeFactory:Lorg/apache/calcite/rel/type/RelDataTypeFactory;
      13: aload_1
      14: invokevirtual #34                 // Method io/substrait/expression/Expression$NullLiteral.getType:()Lio/substrait/type/Type;
      17: invokevirtual #40                 // Method io/substrait/isthmus/TypeConverter.toCalcite:(Lorg/apache/calcite/rel/type/RelDataTypeFactory;Lio/substrait/function/TypeExpression;)Lorg/apache/calcite/rel/type/RelDataType;
      20: invokevirtual #46                 // Method org/apache/calcite/rex/RexBuilder.makeLiteral:(Ljava/lang/Object;Lorg/apache/calcite/rel/type/RelDataType;)Lorg/apache/calcite/rex/RexLiteral;
      23: areturn

  public org.apache.calcite.rex.RexNode visit(io.substrait.expression.Expression$BoolLiteral) throws java.lang.RuntimeException;
    Code:
       0: aload_0
       1: getfield      #22                 // Field rexBuilder:Lorg/apache/calcite/rex/RexBuilder;
       4: aload_1
       5: invokevirtual #50                 // Method io/substrait/expression/Expression$BoolLiteral.value:()Ljava/lang/Boolean;
       8: invokevirtual #56                 // Method java/lang/Boolean.booleanValue:()Z
      11: invokevirtual #62                 // Method org/apache/calcite/rex/RexBuilder.makeLiteral:(Z)Lorg/apache/calcite/rex/RexLiteral;
      14: areturn

  public org.apache.calcite.rex.RexNode visit(io.substrait.expression.Expression$I8Literal) throws java.lang.RuntimeException;
    Code:
       0: aload_0
       1: getfield      #22                 // Field rexBuilder:Lorg/apache/calcite/rex/RexBuilder;
       4: aload_1
       5: invokevirtual #65                 // Method io/substrait/expression/Expression$I8Literal.value:()I
       8: invokestatic  #70                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      11: aload_0
      12: getfield      #13                 // Field typeConverter:Lio/substrait/isthmus/TypeConverter;
      15: aload_0
      16: getfield      #7                  // Field typeFactory:Lorg/apache/calcite/rel/type/RelDataTypeFactory;
      19: aload_1
      20: invokevirtual #76                 // Method io/substrait/expression/Expression$I8Literal.getType:()Lio/substrait/type/Type;
      23: invokevirtual #40                 // Method io/substrait/isthmus/TypeConverter.toCalcite:(Lorg/apache/calcite/rel/type/RelDataTypeFactory;Lio/substrait/function/TypeExpression;)Lorg/apache/calcite/rel/type/RelDataType;
      26: invokevirtual #46                 // Method org/apache/calcite/rex/RexBuilder.makeLiteral:(Ljava/lang/Object;Lorg/apache/calcite/rel/type/RelDataType;)Lorg/apache/calcite/rex/RexLiteral;
      29: areturn

  public org.apache.calcite.rex.RexNode visit(io.substrait.expression.Expression$I16Literal) throws java.lang.RuntimeException;
    Code:
       0: aload_0
       1: getfield      #22                 // Field rexBuilder:Lorg/apache/calcite/rex/RexBuilder;
       4: aload_1
       5: invokevirtual #77                 // Method io/substrait/expression/Expression$I16Literal.value:()I
       8: invokestatic  #70                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      11: aload_0
      12: getfield      #13                 // Field typeConverter:Lio/substrait/isthmus/TypeConverter;
      15: aload_0
      16: getfield      #7                  // Field typeFactory:Lorg/apache/calcite/rel/type/RelDataTypeFactory;
      19: aload_1
      20: invokevirtual #80                 // Method io/substrait/expression/Expression$I16Literal.getType:()Lio/substrait/type/Type;
      23: invokevirtual #40                 // Method io/substrait/isthmus/TypeConverter.toCalcite:(Lorg/apache/calcite/rel/type/RelDataTypeFactory;Lio/substrait/function/TypeExpression;)Lorg/apache/calcite/rel/type/RelDataType;
      26: invokevirtual #46                 // Method org/apache/calcite/rex/RexBuilder.makeLiteral:(Ljava/lang/Object;Lorg/apache/calcite/rel/type/RelDataType;)Lorg/apache/calcite/rex/RexLiteral;
      29: areturn

  public org.apache.calcite.rex.RexNode visit(io.substrait.expression.Expression$I32Literal) throws java.lang.RuntimeException;
    Code:
       0: aload_0
       1: getfield      #22                 // Field rexBuilder:Lorg/apache/calcite/rex/RexBuilder;
       4: aload_1
       5: invokevirtual #81                 // Method io/substrait/expression/Expression$I32Literal.value:()I
       8: invokestatic  #70                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      11: aload_0
      12: getfield      #13                 // Field typeConverter:Lio/substrait/isthmus/TypeConverter;
      15: aload_0
      16: getfield      #7                  // Field typeFactory:Lorg/apache/calcite/rel/type/RelDataTypeFactory;
      19: aload_1
      20: invokevirtual #84                 // Method io/substrait/expression/Expression$I32Literal.getType:()Lio/substrait/type/Type;
      23: invokevirtual #40                 // Method io/substrait/isthmus/TypeConverter.toCalcite:(Lorg/apache/calcite/rel/type/RelDataTypeFactory;Lio/substrait/function/TypeExpression;)Lorg/apache/calcite/rel/type/RelDataType;
      26: invokevirtual #46                 // Method org/apache/calcite/rex/RexBuilder.makeLiteral:(Ljava/lang/Object;Lorg/apache/calcite/rel/type/RelDataType;)Lorg/apache/calcite/rex/RexLiteral;
      29: areturn

  public org.apache.calcite.rex.RexNode visit(io.substrait.expression.Expression$I64Literal) throws java.lang.RuntimeException;
    Code:
       0: aload_0
       1: getfield      #22                 // Field rexBuilder:Lorg/apache/calcite/rex/RexBuilder;
       4: aload_1
       5: invokevirtual #85                 // Method io/substrait/expression/Expression$I64Literal.value:()J
       8: invokestatic  #90                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      11: aload_0
      12: getfield      #13                 // Field typeConverter:Lio/substrait/isthmus/TypeConverter;
      15: aload_0
      16: getfield      #7                  // Field typeFactory:Lorg/apache/calcite/rel/type/RelDataTypeFactory;
      19: aload_1
      20: invokevirtual #95                 // Method io/substrait/expression/Expression$I64Literal.getType:()Lio/substrait/type/Type;
      23: invokevirtual #40                 // Method io/substrait/isthmus/TypeConverter.toCalcite:(Lorg/apache/calcite/rel/type/RelDataTypeFactory;Lio/substrait/function/TypeExpression;)Lorg/apache/calcite/rel/type/RelDataType;
      26: invokevirtual #46                 // Method org/apache/calcite/rex/RexBuilder.makeLiteral:(Ljava/lang/Object;Lorg/apache/calcite/rel/type/RelDataType;)Lorg/apache/calcite/rex/RexLiteral;
      29: areturn

  public org.apache.calcite.rex.RexNode visit(io.substrait.expression.Expression$FP32Literal) throws java.lang.RuntimeException;
    Code:
       0: aload_0
       1: getfield      #22                 // Field rexBuilder:Lorg/apache/calcite/rex/RexBuilder;
       4: aload_1
       5: invokevirtual #96                 // Method io/substrait/expression/Expression$FP32Literal.value:()F
       8: invokestatic  #101                // Method java/lang/Float.valueOf:(F)Ljava/lang/Float;
      11: aload_0
      12: getfield      #13                 // Field typeConverter:Lio/substrait/isthmus/TypeConverter;
      15: aload_0
      16: getfield      #7                  // Field typeFactory:Lorg/apache/calcite/rel/type/RelDataTypeFactory;
      19: aload_1
      20: invokevirtual #106                // Method io/substrait/expression/Expression$FP32Literal.getType:()Lio/substrait/type/Type;
      23: invokevirtual #40                 // Method io/substrait/isthmus/TypeConverter.toCalcite:(Lorg/apache/calcite/rel/type/RelDataTypeFactory;Lio/substrait/function/TypeExpression;)Lorg/apache/calcite/rel/type/RelDataType;
      26: invokevirtual #46                 // Method org/apache/calcite/rex/RexBuilder.makeLiteral:(Ljava/lang/Object;Lorg/apache/calcite/rel/type/RelDataType;)Lorg/apache/calcite/rex/RexLiteral;
      29: areturn

  public org.apache.calcite.rex.RexNode visit(io.substrait.expression.Expression$FP64Literal) throws java.lang.RuntimeException;
    Code:
       0: aload_0
       1: getfield      #22                 // Field rexBuilder:Lorg/apache/calcite/rex/RexBuilder;
       4: aload_1
       5: invokevirtual #107                // Method io/substrait/expression/Expression$FP64Literal.value:()D
       8: invokestatic  #112                // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      11: aload_0
      12: getfield      #13                 // Field typeConverter:Lio/substrait/isthmus/TypeConverter;
      15: aload_0
      16: getfield      #7                  // Field typeFactory:Lorg/apache/calcite/rel/type/RelDataTypeFactory;
      19: aload_1
      20: invokevirtual #117                // Method io/substrait/expression/Expression$FP64Literal.getType:()Lio/substrait/type/Type;
      23: invokevirtual #40                 // Method io/substrait/isthmus/TypeConverter.toCalcite:(Lorg/apache/calcite/rel/type/RelDataTypeFactory;Lio/substrait/function/TypeExpression;)Lorg/apache/calcite/rel/type/RelDataType;
      26: invokevirtual #46                 // Method org/apache/calcite/rex/RexBuilder.makeLiteral:(Ljava/lang/Object;Lorg/apache/calcite/rel/type/RelDataType;)Lorg/apache/calcite/rex/RexLiteral;
      29: areturn

  public org.apache.calcite.rex.RexNode visit(io.substrait.expression.Expression$FixedCharLiteral) throws java.lang.RuntimeException;
    Code:
       0: aload_0
       1: getfield      #22                 // Field rexBuilder:Lorg/apache/calcite/rex/RexBuilder;
       4: aload_1
       5: invokevirtual #118                // Method io/substrait/expression/Expression$FixedCharLiteral.value:()Ljava/lang/String;
       8: invokevirtual #123                // Method org/apache/calcite/rex/RexBuilder.makeLiteral:(Ljava/lang/String;)Lorg/apache/calcite/rex/RexLiteral;
      11: areturn

  public org.apache.calcite.rex.RexNode visit(io.substrait.expression.Expression$StrLiteral) throws java.lang.RuntimeException;
    Code:
       0: aload_0
       1: getfield      #22                 // Field rexBuilder:Lorg/apache/calcite/rex/RexBuilder;
       4: aload_1
       5: invokevirtual #126                // Method io/substrait/expression/Expression$StrLiteral.value:()Ljava/lang/String;
       8: aload_0
       9: getfield      #13                 // Field typeConverter:Lio/substrait/isthmus/TypeConverter;
      12: aload_0
      13: getfield      #7                  // Field typeFactory:Lorg/apache/calcite/rel/type/RelDataTypeFactory;
      16: aload_1
      17: invokevirtual #129                // Method io/substrait/expression/Expression$StrLiteral.getType:()Lio/substrait/type/Type;
      20: invokevirtual #40                 // Method io/substrait/isthmus/TypeConverter.toCalcite:(Lorg/apache/calcite/rel/type/RelDataTypeFactory;Lio/substrait/function/TypeExpression;)Lorg/apache/calcite/rel/type/RelDataType;
      23: invokevirtual #46                 // Method org/apache/calcite/rex/RexBuilder.makeLiteral:(Ljava/lang/Object;Lorg/apache/calcite/rel/type/RelDataType;)Lorg/apache/calcite/rex/RexLiteral;
      26: areturn

  public org.apache.calcite.rex.RexNode visit(io.substrait.expression.Expression$BinaryLiteral) throws java.lang.RuntimeException;
    Code:
       0: aload_0
       1: getfield      #22                 // Field rexBuilder:Lorg/apache/calcite/rex/RexBuilder;
       4: new           #130                // class org/apache/calcite/avatica/util/ByteString
       7: dup
       8: aload_1
       9: invokevirtual #132                // Method io/substrait/expression/Expression$BinaryLiteral.value:()Lcom/google/protobuf/ByteString;
      12: invokevirtual #137                // Method com/google/protobuf/ByteString.toByteArray:()[B
      15: invokespecial #143                // Method org/apache/calcite/avatica/util/ByteString."<init>":([B)V
      18: aload_0
      19: getfield      #13                 // Field typeConverter:Lio/substrait/isthmus/TypeConverter;
      22: aload_0
      23: getfield      #7                  // Field typeFactory:Lorg/apache/calcite/rel/type/RelDataTypeFactory;
      26: aload_1
      27: invokevirtual #146                // Method io/substrait/expression/Expression$BinaryLiteral.getType:()Lio/substrait/type/Type;
      30: invokevirtual #40                 // Method io/substrait/isthmus/TypeConverter.toCalcite:(Lorg/apache/calcite/rel/type/RelDataTypeFactory;Lio/substrait/function/TypeExpression;)Lorg/apache/calcite/rel/type/RelDataType;
      33: invokevirtual #46                 // Method org/apache/calcite/rex/RexBuilder.makeLiteral:(Ljava/lang/Object;Lorg/apache/calcite/rel/type/RelDataType;)Lorg/apache/calcite/rex/RexLiteral;
      36: areturn

  public org.apache.calcite.rex.RexNode visit(io.substrait.expression.Expression$TimeLiteral) throws java.lang.RuntimeException;
    Code:
       0: aload_1
       1: invokevirtual #147                // Method io/substrait/expression/Expression$TimeLiteral.value:()J
       4: lstore_2
       5: getstatic     #150                // Field java/util/concurrent/TimeUnit.MICROSECONDS:Ljava/util/concurrent/TimeUnit;
       8: lload_2
       9: invokevirtual #156                // Method java/util/concurrent/TimeUnit.toSeconds:(J)J
      12: lstore        4
      14: getstatic     #150                // Field java/util/concurrent/TimeUnit.MICROSECONDS:Ljava/util/concurrent/TimeUnit;
      17: lload_2
      18: invokevirtual #160                // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      21: getstatic     #163                // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
      24: lload         4
      26: invokevirtual #160                // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      29: lsub
      30: l2i
      31: istore        6
      33: getstatic     #163                // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
      36: lload         4
      38: invokevirtual #166                // Method java/util/concurrent/TimeUnit.toMillis:(J)J
      41: l2i
      42: invokestatic  #169                // Method org/apache/calcite/util/TimeString.fromMillisOfDay:(I)Lorg/apache/calcite/util/TimeString;
      45: iload         6
      47: invokevirtual #175                // Method org/apache/calcite/util/TimeString.withNanos:(I)Lorg/apache/calcite/util/TimeString;
      50: astore        7
      52: aload_0
      53: getfield      #22                 // Field rexBuilder:Lorg/apache/calcite/rex/RexBuilder;
      56: aload         7
      58: aload_0
      59: getfield      #13                 // Field typeConverter:Lio/substrait/isthmus/TypeConverter;
      62: aload_0
      63: getfield      #7                  // Field typeFactory:Lorg/apache/calcite/rel/type/RelDataTypeFactory;
      66: aload_1
      67: invokevirtual #178                // Method io/substrait/expression/Expression$TimeLiteral.getType:()Lio/substrait/type/Type;
      70: invokevirtual #40                 // Method io/substrait/isthmus/TypeConverter.toCalcite:(Lorg/apache/calcite/rel/type/RelDataTypeFactory;Lio/substrait/function/TypeExpression;)Lorg/apache/calcite/rel/type/RelDataType;
      73: invokevirtual #46                 // Method org/apache/calcite/rex/RexBuilder.makeLiteral:(Ljava/lang/Object;Lorg/apache/calcite/rel/type/RelDataType;)Lorg/apache/calcite/rex/RexLiteral;
      76: areturn

  public org.apache.calcite.rex.RexNode visit(io.substrait.expression.Expression$SingleOrList) throws java.lang.RuntimeException;
    Code:
       0: aload_1
       1: invokevirtual #179                // Method io/substrait/expression/Expression$SingleOrList.condition:()Lio/substrait/expression/Expression;
       4: aload_0
       5: invokeinterface #185,  2          // InterfaceMethod io/substrait/expression/Expression.accept:(Lio/substrait/expression/ExpressionVisitor;)Ljava/lang/Object;
      10: checkcast     #191                // class org/apache/calcite/rex/RexNode
      13: astore_2
      14: aload_0
      15: getfield      #22                 // Field rexBuilder:Lorg/apache/calcite/rex/RexBuilder;
      18: aload_2
      19: aload_1
      20: invokevirtual #193                // Method io/substrait/expression/Expression$SingleOrList.options:()Ljava/util/List;
      23: invokeinterface #197,  1          // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
      28: aload_0
      29: invokedynamic #203,  0            // InvokeDynamic #0:apply:(Lio/substrait/isthmus/expression/ExpressionRexConverter;)Ljava/util/function/Function;
      34: invokeinterface #207,  2          // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      39: invokestatic  #213                // Method java/util/stream/Collectors.toList:()Ljava/util/stream/Collector;
      42: invokeinterface #219,  2          // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
      47: checkcast     #198                // class java/util/List
      50: invokevirtual #223                // Method org/apache/calcite/rex/RexBuilder.makeIn:(Lorg/apache/calcite/rex/RexNode;Ljava/util/List;)Lorg/apache/calcite/rex/RexNode;
      53: areturn

  public org.apache.calcite.rex.RexNode visit(io.substrait.expression.Expression$DateLiteral) throws java.lang.RuntimeException;
    Code:
       0: aload_0
       1: getfield      #22                 // Field rexBuilder:Lorg/apache/calcite/rex/RexBuilder;
       4: aload_1
       5: invokevirtual #227                // Method io/substrait/expression/Expression$DateLiteral.value:()I
       8: invokestatic  #70                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      11: aload_0
      12: getfield      #13                 // Field typeConverter:Lio/substrait/isthmus/TypeConverter;
      15: aload_0
      16: getfield      #7                  // Field typeFactory:Lorg/apache/calcite/rel/type/RelDataTypeFactory;
      19: aload_1
      20: invokevirtual #230                // Method io/substrait/expression/Expression$DateLiteral.getType:()Lio/substrait/type/Type;
      23: invokevirtual #40                 // Method io/substrait/isthmus/TypeConverter.toCalcite:(Lorg/apache/calcite/rel/type/RelDataTypeFactory;Lio/substrait/function/TypeExpression;)Lorg/apache/calcite/rel/type/RelDataType;
      26: invokevirtual #46                 // Method org/apache/calcite/rex/RexBuilder.makeLiteral:(Ljava/lang/Object;Lorg/apache/calcite/rel/type/RelDataType;)Lorg/apache/calcite/rex/RexLiteral;
      29: areturn

  public org.apache.calcite.rex.RexNode visit(io.substrait.expression.Expression$TimestampLiteral) throws java.lang.RuntimeException;
    Code:
       0: aload_1
       1: invokevirtual #231                // Method io/substrait/expression/Expression$TimestampLiteral.value:()J
       4: lstore_2
       5: getstatic     #150                // Field java/util/concurrent/TimeUnit.MICROSECONDS:Ljava/util/concurrent/TimeUnit;
       8: lload_2
       9: invokevirtual #156                // Method java/util/concurrent/TimeUnit.toSeconds:(J)J
      12: lstore        4
      14: getstatic     #150                // Field java/util/concurrent/TimeUnit.MICROSECONDS:Ljava/util/concurrent/TimeUnit;
      17: lload_2
      18: invokevirtual #160                // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      21: getstatic     #163                // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
      24: lload         4
      26: invokevirtual #160                // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      29: lsub
      30: l2i
      31: istore        6
      33: getstatic     #163                // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
      36: lload         4
      38: invokevirtual #166                // Method java/util/concurrent/TimeUnit.toMillis:(J)J
      41: invokestatic  #234                // Method org/apache/calcite/util/TimestampString.fromMillisSinceEpoch:(J)Lorg/apache/calcite/util/TimestampString;
      44: iload         6
      46: invokevirtual #240                // Method org/apache/calcite/util/TimestampString.withNanos:(I)Lorg/apache/calcite/util/TimestampString;
      49: astore        7
      51: aload_0
      52: getfield      #22                 // Field rexBuilder:Lorg/apache/calcite/rex/RexBuilder;
      55: aload         7
      57: aload_0
      58: getfield      #13                 // Field typeConverter:Lio/substrait/isthmus/TypeConverter;
      61: aload_0
      62: getfield      #7                  // Field typeFactory:Lorg/apache/calcite/rel/type/RelDataTypeFactory;
      65: aload_1
      66: invokevirtual #243                // Method io/substrait/expression/Expression$TimestampLiteral.getType:()Lio/substrait/type/Type;
      69: invokevirtual #40                 // Method io/substrait/isthmus/TypeConverter.toCalcite:(Lorg/apache/calcite/rel/type/RelDataTypeFactory;Lio/substrait/function/TypeExpression;)Lorg/apache/calcite/rel/type/RelDataType;
      72: invokevirtual #46                 // Method org/apache/calcite/rex/RexBuilder.makeLiteral:(Ljava/lang/Object;Lorg/apache/calcite/rel/type/RelDataType;)Lorg/apache/calcite/rex/RexLiteral;
      75: areturn

  public org.apache.calcite.rex.RexNode visit(io.substrait.expression.Expression$IntervalYearLiteral) throws java.lang.RuntimeException;
    Code:
       0: aload_0
       1: getfield      #22                 // Field rexBuilder:Lorg/apache/calcite/rex/RexBuilder;
       4: new           #244                // class java/math/BigDecimal
       7: dup
       8: aload_1
       9: invokevirtual #246                // Method io/substrait/expression/Expression$IntervalYearLiteral.years:()I
      12: bipush        12
      14: imul
      15: aload_1
      16: invokevirtual #251                // Method io/substrait/expression/Expression$IntervalYearLiteral.months:()I
      19: iadd
      20: invokespecial #254                // Method java/math/BigDecimal."<init>":(I)V
      23: getstatic     #257                // Field YEAR_MONTH_INTERVAL:Lorg/apache/calcite/sql/SqlIntervalQualifier;
      26: invokevirtual #261                // Method org/apache/calcite/rex/RexBuilder.makeIntervalLiteral:(Ljava/math/BigDecimal;Lorg/apache/calcite/sql/SqlIntervalQualifier;)Lorg/apache/calcite/rex/RexLiteral;
      29: areturn

  public org.apache.calcite.rex.RexNode visit(io.substrait.expression.Expression$IntervalDayLiteral) throws java.lang.RuntimeException;
    Code:
       0: aload_0
       1: getfield      #22                 // Field rexBuilder:Lorg/apache/calcite/rex/RexBuilder;
       4: new           #244                // class java/math/BigDecimal
       7: dup
       8: aload_1
       9: invokevirtual #265                // Method io/substrait/expression/Expression$IntervalDayLiteral.days:()I
      12: i2l
      13: getstatic     #270                // Field MICROS_IN_DAY:J
      16: lmul
      17: aload_1
      18: invokevirtual #274                // Method io/substrait/expression/Expression$IntervalDayLiteral.seconds:()I
      21: i2l
      22: ldc2_w        #277                // long 1000000l
      25: lmul
      26: ladd
      27: aload_1
      28: invokevirtual #279                // Method io/substrait/expression/Expression$IntervalDayLiteral.microseconds:()I
      31: i2l
      32: ladd
      33: ldc2_w        #282                // long 1000l
      36: ldiv
      37: invokespecial #284                // Method java/math/BigDecimal."<init>":(J)V
      40: getstatic     #287                // Field DAY_SECOND_INTERVAL:Lorg/apache/calcite/sql/SqlIntervalQualifier;
      43: invokevirtual #261                // Method org/apache/calcite/rex/RexBuilder.makeIntervalLiteral:(Ljava/math/BigDecimal;Lorg/apache/calcite/sql/SqlIntervalQualifier;)Lorg/apache/calcite/rex/RexLiteral;
      46: areturn

  public org.apache.calcite.rex.RexNode visit(io.substrait.expression.Expression$DecimalLiteral) throws java.lang.RuntimeException;
    Code:
       0: aload_1
       1: invokevirtual #290                // Method io/substrait/expression/Expression$DecimalLiteral.value:()Lcom/google/protobuf/ByteString;
       4: invokevirtual #137                // Method com/google/protobuf/ByteString.toByteArray:()[B
       7: astore_2
       8: aload_2
       9: aload_1
      10: invokevirtual #293                // Method io/substrait/expression/Expression$DecimalLiteral.scale:()I
      13: bipush        16
      15: invokestatic  #296                // Method io/substrait/util/DecimalUtil.getBigDecimalFromBytes:([BII)Ljava/math/BigDecimal;
      18: astore_3
      19: aload_0
      20: getfield      #22                 // Field rexBuilder:Lorg/apache/calcite/rex/RexBuilder;
      23: aload_3
      24: aload_0
      25: getfield      #13                 // Field typeConverter:Lio/substrait/isthmus/TypeConverter;
      28: aload_0
      29: getfield      #7                  // Field typeFactory:Lorg/apache/calcite/rel/type/RelDataTypeFactory;
      32: aload_1
      33: invokevirtual #302                // Method io/substrait/expression/Expression$DecimalLiteral.getType:()Lio/substrait/type/Type;
      36: invokevirtual #40                 // Method io/substrait/isthmus/TypeConverter.toCalcite:(Lorg/apache/calcite/rel/type/RelDataTypeFactory;Lio/substrait/function/TypeExpression;)Lorg/apache/calcite/rel/type/RelDataType;
      39: invokevirtual #46                 // Method org/apache/calcite/rex/RexBuilder.makeLiteral:(Ljava/lang/Object;Lorg/apache/calcite/rel/type/RelDataType;)Lorg/apache/calcite/rex/RexLiteral;
      42: areturn

  public org.apache.calcite.rex.RexNode visit(io.substrait.expression.Expression$IfThen) throws java.lang.RuntimeException;
    Code:
       0: aload_1
       1: invokevirtual #303                // Method io/substrait/expression/Expression$IfThen.ifClauses:()Ljava/util/List;
       4: invokeinterface #197,  1          // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
       9: aload_0
      10: invokedynamic #308,  0            // InvokeDynamic #1:apply:(Lio/substrait/isthmus/expression/ExpressionRexConverter;)Ljava/util/function/Function;
      15: invokeinterface #309,  2          // InterfaceMethod java/util/stream/Stream.flatMap:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      20: astore_2
      21: aload_1
      22: invokevirtual #312                // Method io/substrait/expression/Expression$IfThen.elseClause:()Lio/substrait/expression/Expression;
      25: aload_0
      26: invokeinterface #185,  2          // InterfaceMethod io/substrait/expression/Expression.accept:(Lio/substrait/expression/ExpressionVisitor;)Ljava/lang/Object;
      31: checkcast     #191                // class org/apache/calcite/rex/RexNode
      34: invokestatic  #315                // InterfaceMethod java/util/stream/Stream.of:(Ljava/lang/Object;)Ljava/util/stream/Stream;
      37: astore_3
      38: aload_2
      39: aload_3
      40: invokestatic  #319                // InterfaceMethod java/util/stream/Stream.concat:(Ljava/util/stream/Stream;Ljava/util/stream/Stream;)Ljava/util/stream/Stream;
      43: invokestatic  #213                // Method java/util/stream/Collectors.toList:()Ljava/util/stream/Collector;
      46: invokeinterface #219,  2          // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
      51: checkcast     #198                // class java/util/List
      54: astore        4
      56: aload_0
      57: getfield      #22                 // Field rexBuilder:Lorg/apache/calcite/rex/RexBuilder;
      60: getstatic     #323                // Field org/apache/calcite/sql/fun/SqlStdOperatorTable.CASE:Lorg/apache/calcite/sql/fun/SqlCaseOperator;
      63: aload         4
      65: invokevirtual #329                // Method org/apache/calcite/rex/RexBuilder.makeCall:(Lorg/apache/calcite/sql/SqlOperator;Ljava/util/List;)Lorg/apache/calcite/rex/RexNode;
      68: areturn

  public org.apache.calcite.rex.RexNode visit(io.substrait.expression.Expression$ScalarFunctionInvocation) throws java.lang.RuntimeException;
    Code:
       0: aload_1
       1: invokevirtual #333                // Method io/substrait/expression/Expression$ScalarFunctionInvocation.arguments:()Ljava/util/List;
       4: astore_2
       5: iconst_0
       6: aload_1
       7: invokevirtual #333                // Method io/substrait/expression/Expression$ScalarFunctionInvocation.arguments:()Ljava/util/List;
      10: invokeinterface #338,  1          // InterfaceMethod java/util/List.size:()I
      15: invokestatic  #341                // InterfaceMethod java/util/stream/IntStream.range:(II)Ljava/util/stream/IntStream;
      18: aload_0
      19: aload_2
      20: aload_1
      21: invokedynamic #347,  0            // InvokeDynamic #2:apply:(Lio/substrait/isthmus/expression/ExpressionRexConverter;Ljava/util/List;Lio/substrait/expression/Expression$ScalarFunctionInvocation;)Ljava/util/function/IntFunction;
      26: invokeinterface #350,  2          // InterfaceMethod java/util/stream/IntStream.mapToObj:(Ljava/util/function/IntFunction;)Ljava/util/stream/Stream;
      31: invokestatic  #213                // Method java/util/stream/Collectors.toList:()Ljava/util/stream/Collector;
      34: invokeinterface #219,  2          // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
      39: checkcast     #198                // class java/util/List
      42: astore_3
      43: aload_0
      44: getfield      #26                 // Field scalarFunctionConverter:Lio/substrait/isthmus/expression/ScalarFunctionConverter;
      47: aload_1
      48: invokevirtual #354                // Method io/substrait/expression/Expression$ScalarFunctionInvocation.declaration:()Lio/substrait/extension/SimpleExtension$ScalarFunctionVariant;
      51: invokevirtual #358                // Method io/substrait/extension/SimpleExtension$ScalarFunctionVariant.key:()Ljava/lang/String;
      54: aload_1
      55: invokevirtual #363                // Method io/substrait/expression/Expression$ScalarFunctionInvocation.outputType:()Lio/substrait/type/Type;
      58: invokevirtual #366                // Method io/substrait/isthmus/expression/ScalarFunctionConverter.getSqlOperatorFromSubstraitFunc:(Ljava/lang/String;Lio/substrait/type/Type;)Ljava/util/Optional;
      61: astore        4
      63: aload         4
      65: invokevirtual #372                // Method java/util/Optional.isPresent:()Z
      68: ifeq          88
      71: aload_0
      72: getfield      #22                 // Field rexBuilder:Lorg/apache/calcite/rex/RexBuilder;
      75: aload         4
      77: invokevirtual #377                // Method java/util/Optional.get:()Ljava/lang/Object;
      80: checkcast     #381                // class org/apache/calcite/sql/SqlOperator
      83: aload_3
      84: invokevirtual #329                // Method org/apache/calcite/rex/RexBuilder.makeCall:(Lorg/apache/calcite/sql/SqlOperator;Ljava/util/List;)Lorg/apache/calcite/rex/RexNode;
      87: areturn
      88: ldc_w         #383                // String Unable to convert scalar function %s(%s).
      91: iconst_2
      92: anewarray     #385                // class java/lang/Object
      95: dup
      96: iconst_0
      97: aload_1
      98: invokevirtual #354                // Method io/substrait/expression/Expression$ScalarFunctionInvocation.declaration:()Lio/substrait/extension/SimpleExtension$ScalarFunctionVariant;
     101: invokevirtual #387                // Method io/substrait/extension/SimpleExtension$ScalarFunctionVariant.name:()Ljava/lang/String;
     104: aastore
     105: dup
     106: iconst_1
     107: aload_1
     108: invokevirtual #333                // Method io/substrait/expression/Expression$ScalarFunctionInvocation.arguments:()Ljava/util/List;
     111: invokeinterface #197,  1          // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
     116: aload_0
     117: invokedynamic #390,  0            // InvokeDynamic #3:apply:(Lio/substrait/isthmus/expression/ExpressionRexConverter;)Ljava/util/function/Function;
     122: invokeinterface #207,  2          // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
     127: ldc_w         #391                // String ,
     130: invokestatic  #393                // Method java/util/stream/Collectors.joining:(Ljava/lang/CharSequence;)Ljava/util/stream/Collector;
     133: invokeinterface #219,  2          // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
     138: aastore
     139: invokestatic  #397                // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
     142: astore        5
     144: new           #403                // class java/lang/IllegalArgumentException
     147: dup
     148: aload         5
     150: invokespecial #405                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     153: athrow

  private java.lang.String convert(io.substrait.expression.FunctionArg);
    Code:
       0: aload_1
       1: instanceof    #408                // class io/substrait/expression/EnumArg
       4: ifeq          27
       7: aload_1
       8: checkcast     #408                // class io/substrait/expression/EnumArg
      11: astore        4
      13: aload         4
      15: invokeinterface #410,  1          // InterfaceMethod io/substrait/expression/EnumArg.value:()Ljava/util/Optional;
      20: invokevirtual #413                // Method java/util/Optional.toString:()Ljava/lang/String;
      23: astore_2
      24: goto          112
      27: aload_1
      28: instanceof    #186                // class io/substrait/expression/Expression
      31: ifeq          66
      34: aload_1
      35: checkcast     #186                // class io/substrait/expression/Expression
      38: astore        5
      40: aload         5
      42: invokeinterface #416,  1          // InterfaceMethod io/substrait/expression/Expression.getType:()Lio/substrait/type/Type;
      47: new           #417                // class io/substrait/type/StringTypeVisitor
      50: dup
      51: invokespecial #419                // Method io/substrait/type/StringTypeVisitor."<init>":()V
      54: invokeinterface #420,  2          // InterfaceMethod io/substrait/type/Type.accept:(Lio/substrait/type/TypeVisitor;)Ljava/lang/Object;
      59: checkcast     #398                // class java/lang/String
      62: astore_2
      63: goto          112
      66: aload_1
      67: instanceof    #421                // class io/substrait/type/Type
      70: ifeq          98
      73: aload_1
      74: checkcast     #421                // class io/substrait/type/Type
      77: astore_3
      78: aload_3
      79: new           #417                // class io/substrait/type/StringTypeVisitor
      82: dup
      83: invokespecial #419                // Method io/substrait/type/StringTypeVisitor."<init>":()V
      86: invokeinterface #420,  2          // InterfaceMethod io/substrait/type/Type.accept:(Lio/substrait/type/TypeVisitor;)Ljava/lang/Object;
      91: checkcast     #398                // class java/lang/String
      94: astore_2
      95: goto          112
      98: new           #425                // class java/lang/IllegalStateException
     101: dup
     102: aload_1
     103: invokedynamic #427,  0            // InvokeDynamic #4:makeConcatWithConstants:(Lio/substrait/expression/FunctionArg;)Ljava/lang/String;
     108: invokespecial #431                // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
     111: athrow
     112: aload_2
     113: areturn

  public org.apache.calcite.rex.RexNode visit(io.substrait.expression.Expression$Cast) throws java.lang.RuntimeException;
    Code:
       0: aload_0
       1: getfield      #22                 // Field rexBuilder:Lorg/apache/calcite/rex/RexBuilder;
       4: aload_0
       5: getfield      #13                 // Field typeConverter:Lio/substrait/isthmus/TypeConverter;
       8: aload_0
       9: getfield      #7                  // Field typeFactory:Lorg/apache/calcite/rel/type/RelDataTypeFactory;
      12: aload_1
      13: invokevirtual #432                // Method io/substrait/expression/Expression$Cast.getType:()Lio/substrait/type/Type;
      16: invokevirtual #40                 // Method io/substrait/isthmus/TypeConverter.toCalcite:(Lorg/apache/calcite/rel/type/RelDataTypeFactory;Lio/substrait/function/TypeExpression;)Lorg/apache/calcite/rel/type/RelDataType;
      19: aload_1
      20: invokevirtual #435                // Method io/substrait/expression/Expression$Cast.input:()Lio/substrait/expression/Expression;
      23: aload_0
      24: invokeinterface #185,  2          // InterfaceMethod io/substrait/expression/Expression.accept:(Lio/substrait/expression/ExpressionVisitor;)Ljava/lang/Object;
      29: checkcast     #191                // class org/apache/calcite/rex/RexNode
      32: invokevirtual #438                // Method org/apache/calcite/rex/RexBuilder.makeAbstractCast:(Lorg/apache/calcite/rel/type/RelDataType;Lorg/apache/calcite/rex/RexNode;)Lorg/apache/calcite/rex/RexNode;
      35: areturn

  public org.apache.calcite.rex.RexNode visit(io.substrait.expression.FieldReference) throws java.lang.RuntimeException;
    Code:
       0: aload_1
       1: invokevirtual #442                // Method io/substrait/expression/FieldReference.isSimpleRootReference:()Z
       4: ifeq          81
       7: aload_1
       8: invokevirtual #447                // Method io/substrait/expression/FieldReference.segments:()Ljava/util/List;
      11: iconst_0
      12: invokeinterface #450,  2          // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      17: checkcast     #453                // class io/substrait/expression/FieldReference$ReferenceSegment
      20: astore_2
      21: aload_2
      22: instanceof    #455                // class io/substrait/expression/FieldReference$StructField
      25: ifeq          65
      28: aload_2
      29: checkcast     #455                // class io/substrait/expression/FieldReference$StructField
      32: astore        4
      34: new           #457                // class org/apache/calcite/rex/RexInputRef
      37: dup
      38: aload         4
      40: invokevirtual #459                // Method io/substrait/expression/FieldReference$StructField.offset:()I
      43: aload_0
      44: getfield      #13                 // Field typeConverter:Lio/substrait/isthmus/TypeConverter;
      47: aload_0
      48: getfield      #7                  // Field typeFactory:Lorg/apache/calcite/rel/type/RelDataTypeFactory;
      51: aload_1
      52: invokevirtual #462                // Method io/substrait/expression/FieldReference.getType:()Lio/substrait/type/Type;
      55: invokevirtual #40                 // Method io/substrait/isthmus/TypeConverter.toCalcite:(Lorg/apache/calcite/rel/type/RelDataTypeFactory;Lio/substrait/function/TypeExpression;)Lorg/apache/calcite/rel/type/RelDataType;
      58: invokespecial #463                // Method org/apache/calcite/rex/RexInputRef."<init>":(ILorg/apache/calcite/rel/type/RelDataType;)V
      61: astore_3
      62: goto          79
      65: new           #403                // class java/lang/IllegalArgumentException
      68: dup
      69: aload_2
      70: invokedynamic #466,  0            // InvokeDynamic #5:makeConcatWithConstants:(Lio/substrait/expression/FieldReference$ReferenceSegment;)Ljava/lang/String;
      75: invokespecial #405                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      78: athrow
      79: aload_3
      80: areturn
      81: aload_0
      82: aload_1
      83: invokevirtual #469                // Method visitFallback:(Lio/substrait/expression/Expression;)Lorg/apache/calcite/rex/RexNode;
      86: areturn

  public org.apache.calcite.rex.RexNode visit(io.substrait.expression.Expression$Window) throws java.lang.RuntimeException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #469                // Method visitFallback:(Lio/substrait/expression/Expression;)Lorg/apache/calcite/rex/RexNode;
       5: areturn

  public org.apache.calcite.rex.RexNode visitFallback(io.substrait.expression.Expression);
    Code:
       0: new           #473                // class java/lang/UnsupportedOperationException
       3: dup
       4: ldc_w         #475                // String Expression %s of type %s not handled by visitor type %s.
       7: iconst_3
       8: anewarray     #385                // class java/lang/Object
      11: dup
      12: iconst_0
      13: aload_1
      14: aastore
      15: dup
      16: iconst_1
      17: aload_1
      18: invokevirtual #477                // Method java/lang/Object.getClass:()Ljava/lang/Class;
      21: invokevirtual #481                // Method java/lang/Class.getCanonicalName:()Ljava/lang/String;
      24: aastore
      25: dup
      26: iconst_2
      27: aload_0
      28: invokevirtual #477                // Method java/lang/Object.getClass:()Ljava/lang/Class;
      31: invokevirtual #481                // Method java/lang/Class.getCanonicalName:()Ljava/lang/String;
      34: aastore
      35: invokestatic  #397                // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      38: invokespecial #486                // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
      41: athrow

  public org.apache.calcite.rex.RexNode visitExpr(io.substrait.extension.SimpleExtension$Function, int, io.substrait.expression.Expression) throws java.lang.RuntimeException;
    Code:
       0: aload_3
       1: aload_0
       2: invokeinterface #185,  2          // InterfaceMethod io/substrait/expression/Expression.accept:(Lio/substrait/expression/ExpressionVisitor;)Ljava/lang/Object;
       7: checkcast     #191                // class org/apache/calcite/rex/RexNode
      10: areturn

  public org.apache.calcite.rex.RexNode visitType(io.substrait.extension.SimpleExtension$Function, int, io.substrait.type.Type) throws java.lang.RuntimeException;
    Code:
       0: new           #473                // class java/lang/UnsupportedOperationException
       3: dup
       4: ldc_w         #487                // String FunctionArg %s not handled by visitor type %s.
       7: iconst_2
       8: anewarray     #385                // class java/lang/Object
      11: dup
      12: iconst_0
      13: aload_3
      14: aastore
      15: dup
      16: iconst_1
      17: aload_0
      18: invokevirtual #477                // Method java/lang/Object.getClass:()Ljava/lang/Class;
      21: invokevirtual #481                // Method java/lang/Class.getCanonicalName:()Ljava/lang/String;
      24: aastore
      25: invokestatic  #397                // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      28: invokespecial #486                // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
      31: athrow

  public org.apache.calcite.rex.RexNode visitEnumArg(io.substrait.extension.SimpleExtension$Function, int, io.substrait.expression.EnumArg) throws java.lang.RuntimeException;
    Code:
       0: aload_0
       1: getfield      #22                 // Field rexBuilder:Lorg/apache/calcite/rex/RexBuilder;
       4: aload_1
       5: iload_2
       6: aload_3
       7: invokestatic  #489                // Method io/substrait/isthmus/expression/EnumConverter.toRex:(Lorg/apache/calcite/rex/RexBuilder;Lio/substrait/extension/SimpleExtension$Function;ILio/substrait/expression/EnumArg;)Ljava/util/Optional;
      10: aload_0
      11: aload_3
      12: invokedynamic #495,  0            // InvokeDynamic #6:get:(Lio/substrait/isthmus/expression/ExpressionRexConverter;Lio/substrait/expression/EnumArg;)Ljava/util/function/Supplier;
      17: invokevirtual #498                // Method java/util/Optional.orElseThrow:(Ljava/util/function/Supplier;)Ljava/lang/Object;
      20: checkcast     #191                // class org/apache/calcite/rex/RexNode
      23: areturn

  public java.lang.Object visit(io.substrait.expression.Expression$Window) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #502                // Method visit:(Lio/substrait/expression/Expression$Window;)Lorg/apache/calcite/rex/RexNode;
       5: areturn

  public java.lang.Object visit(io.substrait.expression.FieldReference) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #506                // Method visit:(Lio/substrait/expression/FieldReference;)Lorg/apache/calcite/rex/RexNode;
       5: areturn

  public java.lang.Object visit(io.substrait.expression.Expression$SingleOrList) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #509                // Method visit:(Lio/substrait/expression/Expression$SingleOrList;)Lorg/apache/calcite/rex/RexNode;
       5: areturn

  public java.lang.Object visit(io.substrait.expression.Expression$Cast) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #512                // Method visit:(Lio/substrait/expression/Expression$Cast;)Lorg/apache/calcite/rex/RexNode;
       5: areturn

  public java.lang.Object visit(io.substrait.expression.Expression$ScalarFunctionInvocation) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #515                // Method visit:(Lio/substrait/expression/Expression$ScalarFunctionInvocation;)Lorg/apache/calcite/rex/RexNode;
       5: areturn

  public java.lang.Object visit(io.substrait.expression.Expression$IfThen) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #518                // Method visit:(Lio/substrait/expression/Expression$IfThen;)Lorg/apache/calcite/rex/RexNode;
       5: areturn

  public java.lang.Object visit(io.substrait.expression.Expression$DecimalLiteral) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #521                // Method visit:(Lio/substrait/expression/Expression$DecimalLiteral;)Lorg/apache/calcite/rex/RexNode;
       5: areturn

  public java.lang.Object visit(io.substrait.expression.Expression$FixedCharLiteral) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #524                // Method visit:(Lio/substrait/expression/Expression$FixedCharLiteral;)Lorg/apache/calcite/rex/RexNode;
       5: areturn

  public java.lang.Object visit(io.substrait.expression.Expression$IntervalDayLiteral) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #527                // Method visit:(Lio/substrait/expression/Expression$IntervalDayLiteral;)Lorg/apache/calcite/rex/RexNode;
       5: areturn

  public java.lang.Object visit(io.substrait.expression.Expression$IntervalYearLiteral) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #530                // Method visit:(Lio/substrait/expression/Expression$IntervalYearLiteral;)Lorg/apache/calcite/rex/RexNode;
       5: areturn

  public java.lang.Object visit(io.substrait.expression.Expression$TimestampLiteral) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #533                // Method visit:(Lio/substrait/expression/Expression$TimestampLiteral;)Lorg/apache/calcite/rex/RexNode;
       5: areturn

  public java.lang.Object visit(io.substrait.expression.Expression$DateLiteral) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #536                // Method visit:(Lio/substrait/expression/Expression$DateLiteral;)Lorg/apache/calcite/rex/RexNode;
       5: areturn

  public java.lang.Object visit(io.substrait.expression.Expression$TimeLiteral) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #539                // Method visit:(Lio/substrait/expression/Expression$TimeLiteral;)Lorg/apache/calcite/rex/RexNode;
       5: areturn

  public java.lang.Object visit(io.substrait.expression.Expression$BinaryLiteral) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #542                // Method visit:(Lio/substrait/expression/Expression$BinaryLiteral;)Lorg/apache/calcite/rex/RexNode;
       5: areturn

  public java.lang.Object visit(io.substrait.expression.Expression$StrLiteral) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #545                // Method visit:(Lio/substrait/expression/Expression$StrLiteral;)Lorg/apache/calcite/rex/RexNode;
       5: areturn

  public java.lang.Object visit(io.substrait.expression.Expression$FP64Literal) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #548                // Method visit:(Lio/substrait/expression/Expression$FP64Literal;)Lorg/apache/calcite/rex/RexNode;
       5: areturn

  public java.lang.Object visit(io.substrait.expression.Expression$FP32Literal) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #551                // Method visit:(Lio/substrait/expression/Expression$FP32Literal;)Lorg/apache/calcite/rex/RexNode;
       5: areturn

  public java.lang.Object visit(io.substrait.expression.Expression$I64Literal) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #554                // Method visit:(Lio/substrait/expression/Expression$I64Literal;)Lorg/apache/calcite/rex/RexNode;
       5: areturn

  public java.lang.Object visit(io.substrait.expression.Expression$I32Literal) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #557                // Method visit:(Lio/substrait/expression/Expression$I32Literal;)Lorg/apache/calcite/rex/RexNode;
       5: areturn

  public java.lang.Object visit(io.substrait.expression.Expression$I16Literal) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #560                // Method visit:(Lio/substrait/expression/Expression$I16Literal;)Lorg/apache/calcite/rex/RexNode;
       5: areturn

  public java.lang.Object visit(io.substrait.expression.Expression$I8Literal) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #563                // Method visit:(Lio/substrait/expression/Expression$I8Literal;)Lorg/apache/calcite/rex/RexNode;
       5: areturn

  public java.lang.Object visit(io.substrait.expression.Expression$BoolLiteral) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #566                // Method visit:(Lio/substrait/expression/Expression$BoolLiteral;)Lorg/apache/calcite/rex/RexNode;
       5: areturn

  public java.lang.Object visit(io.substrait.expression.Expression$NullLiteral) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #569                // Method visit:(Lio/substrait/expression/Expression$NullLiteral;)Lorg/apache/calcite/rex/RexNode;
       5: areturn

  public java.lang.Object visitFallback(io.substrait.expression.Expression);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #469                // Method visitFallback:(Lio/substrait/expression/Expression;)Lorg/apache/calcite/rex/RexNode;
       5: areturn

  public java.lang.Object visitEnumArg(io.substrait.extension.SimpleExtension$Function, int, io.substrait.expression.EnumArg) throws java.lang.Throwable;
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: aload_3
       4: invokevirtual #572                // Method visitEnumArg:(Lio/substrait/extension/SimpleExtension$Function;ILio/substrait/expression/EnumArg;)Lorg/apache/calcite/rex/RexNode;
       7: areturn

  public java.lang.Object visitType(io.substrait.extension.SimpleExtension$Function, int, io.substrait.type.Type) throws java.lang.Throwable;
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: aload_3
       4: invokevirtual #576                // Method visitType:(Lio/substrait/extension/SimpleExtension$Function;ILio/substrait/type/Type;)Lorg/apache/calcite/rex/RexNode;
       7: areturn

  public java.lang.Object visitExpr(io.substrait.extension.SimpleExtension$Function, int, io.substrait.expression.Expression) throws java.lang.Throwable;
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: aload_3
       4: invokevirtual #580                // Method visitExpr:(Lio/substrait/extension/SimpleExtension$Function;ILio/substrait/expression/Expression;)Lorg/apache/calcite/rex/RexNode;
       7: areturn

  private java.lang.UnsupportedOperationException lambda$visitEnumArg$3(io.substrait.expression.EnumArg);
    Code:
       0: new           #473                // class java/lang/UnsupportedOperationException
       3: dup
       4: ldc_w         #584                // String EnumArg(value=%s) not handled by visitor type %s.
       7: iconst_2
       8: anewarray     #385                // class java/lang/Object
      11: dup
      12: iconst_0
      13: aload_1
      14: invokeinterface #410,  1          // InterfaceMethod io/substrait/expression/EnumArg.value:()Ljava/util/Optional;
      19: aastore
      20: dup
      21: iconst_1
      22: aload_0
      23: invokevirtual #477                // Method java/lang/Object.getClass:()Ljava/lang/Class;
      26: invokevirtual #481                // Method java/lang/Class.getCanonicalName:()Ljava/lang/String;
      29: aastore
      30: invokestatic  #397                // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      33: invokespecial #486                // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
      36: areturn

  private org.apache.calcite.rex.RexNode lambda$visit$2(java.util.List, io.substrait.expression.Expression$ScalarFunctionInvocation, int);
    Code:
       0: aload_1
       1: iload_3
       2: invokeinterface #450,  2          // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
       7: checkcast     #586                // class io/substrait/expression/FunctionArg
      10: aload_2
      11: invokevirtual #354                // Method io/substrait/expression/Expression$ScalarFunctionInvocation.declaration:()Lio/substrait/extension/SimpleExtension$ScalarFunctionVariant;
      14: iload_3
      15: aload_0
      16: invokeinterface #588,  4          // InterfaceMethod io/substrait/expression/FunctionArg.accept:(Lio/substrait/extension/SimpleExtension$Function;ILio/substrait/expression/FunctionArg$FuncArgVisitor;)Ljava/lang/Object;
      21: checkcast     #191                // class org/apache/calcite/rex/RexNode
      24: areturn

  private java.util.stream.Stream lambda$visit$1(io.substrait.expression.Expression$IfClause);
    Code:
       0: iconst_2
       1: anewarray     #191                // class org/apache/calcite/rex/RexNode
       4: dup
       5: iconst_0
       6: aload_1
       7: invokevirtual #591                // Method io/substrait/expression/Expression$IfClause.condition:()Lio/substrait/expression/Expression;
      10: aload_0
      11: invokeinterface #185,  2          // InterfaceMethod io/substrait/expression/Expression.accept:(Lio/substrait/expression/ExpressionVisitor;)Ljava/lang/Object;
      16: checkcast     #191                // class org/apache/calcite/rex/RexNode
      19: aastore
      20: dup
      21: iconst_1
      22: aload_1
      23: invokevirtual #594                // Method io/substrait/expression/Expression$IfClause.then:()Lio/substrait/expression/Expression;
      26: aload_0
      27: invokeinterface #185,  2          // InterfaceMethod io/substrait/expression/Expression.accept:(Lio/substrait/expression/ExpressionVisitor;)Ljava/lang/Object;
      32: checkcast     #191                // class org/apache/calcite/rex/RexNode
      35: aastore
      36: invokestatic  #597                // InterfaceMethod java/util/stream/Stream.of:([Ljava/lang/Object;)Ljava/util/stream/Stream;
      39: areturn

  private org.apache.calcite.rex.RexNode lambda$visit$0(io.substrait.expression.Expression);
    Code:
       0: aload_1
       1: aload_0
       2: invokeinterface #185,  2          // InterfaceMethod io/substrait/expression/Expression.accept:(Lio/substrait/expression/ExpressionVisitor;)Ljava/lang/Object;
       7: checkcast     #191                // class org/apache/calcite/rex/RexNode
      10: areturn

  static {};
    Code:
       0: new           #600                // class org/apache/calcite/sql/SqlIntervalQualifier
       3: dup
       4: getstatic     #602                // Field org/apache/calcite/avatica/util/TimeUnit.YEAR:Lorg/apache/calcite/avatica/util/TimeUnit;
       7: iconst_m1
       8: getstatic     #608                // Field org/apache/calcite/avatica/util/TimeUnit.MONTH:Lorg/apache/calcite/avatica/util/TimeUnit;
      11: iconst_m1
      12: getstatic     #611                // Field org/apache/calcite/sql/parser/SqlParserPos.QUOTED_ZERO:Lorg/apache/calcite/sql/parser/SqlParserPos;
      15: invokespecial #617                // Method org/apache/calcite/sql/SqlIntervalQualifier."<init>":(Lorg/apache/calcite/avatica/util/TimeUnit;ILorg/apache/calcite/avatica/util/TimeUnit;ILorg/apache/calcite/sql/parser/SqlParserPos;)V
      18: putstatic     #257                // Field YEAR_MONTH_INTERVAL:Lorg/apache/calcite/sql/SqlIntervalQualifier;
      21: new           #600                // class org/apache/calcite/sql/SqlIntervalQualifier
      24: dup
      25: getstatic     #620                // Field org/apache/calcite/avatica/util/TimeUnit.DAY:Lorg/apache/calcite/avatica/util/TimeUnit;
      28: iconst_m1
      29: getstatic     #623                // Field org/apache/calcite/avatica/util/TimeUnit.SECOND:Lorg/apache/calcite/avatica/util/TimeUnit;
      32: iconst_3
      33: getstatic     #611                // Field org/apache/calcite/sql/parser/SqlParserPos.QUOTED_ZERO:Lorg/apache/calcite/sql/parser/SqlParserPos;
      36: invokespecial #617                // Method org/apache/calcite/sql/SqlIntervalQualifier."<init>":(Lorg/apache/calcite/avatica/util/TimeUnit;ILorg/apache/calcite/avatica/util/TimeUnit;ILorg/apache/calcite/sql/parser/SqlParserPos;)V
      39: putstatic     #287                // Field DAY_SECOND_INTERVAL:Lorg/apache/calcite/sql/SqlIntervalQualifier;
      42: getstatic     #626                // Field java/util/concurrent/TimeUnit.DAYS:Ljava/util/concurrent/TimeUnit;
      45: lconst_1
      46: invokevirtual #629                // Method java/util/concurrent/TimeUnit.toMicros:(J)J
      49: putstatic     #270                // Field MICROS_IN_DAY:J
      52: return
}
