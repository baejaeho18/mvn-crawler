Compiled from "ListSqlOperatorFunctions.java"
public class io.substrait.isthmus.expression.ListSqlOperatorFunctions {
  static final org.slf4j.Logger logger;

  public io.substrait.isthmus.expression.ListSqlOperatorFunctions();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public static void main(java.lang.String[]);
    Code:
       0: ldc           #7                  // class org/apache/calcite/sql/fun/SqlStdOperatorTable
       2: invokevirtual #9                  // Method java/lang/Class.getFields:()[Ljava/lang/reflect/Field;
       5: invokestatic  #15                 // Method java/util/Arrays.stream:([Ljava/lang/Object;)Ljava/util/stream/Stream;
       8: invokedynamic #21,  0             // InvokeDynamic #0:test:()Ljava/util/function/Predicate;
      13: invokeinterface #25,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      18: invokedynamic #31,  0             // InvokeDynamic #1:test:()Ljava/util/function/Predicate;
      23: invokeinterface #25,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      28: invokedynamic #32,  0             // InvokeDynamic #2:apply:()Ljava/util/function/Function;
      33: invokedynamic #36,  0             // InvokeDynamic #3:apply:()Ljava/util/function/Function;
      38: invokestatic  #37                 // Method java/util/stream/Collectors.toMap:(Ljava/util/function/Function;Ljava/util/function/Function;)Ljava/util/stream/Collector;
      41: invokeinterface #43,  2           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
      46: checkcast     #47                 // class java/util/Map
      49: astore_1
      50: aload_1
      51: invokeinterface #49,  1           // InterfaceMethod java/util/Map.keySet:()Ljava/util/Set;
      56: getstatic     #53                 // Field java/lang/System.out:Ljava/io/PrintStream;
      59: dup
      60: invokestatic  #59                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
      63: pop
      64: invokedynamic #65,  0             // InvokeDynamic #4:accept:(Ljava/io/PrintStream;)Ljava/util/function/Consumer;
      69: invokeinterface #69,  2           // InterfaceMethod java/util/Set.forEach:(Ljava/util/function/Consumer;)V
      74: getstatic     #53                 // Field java/lang/System.out:Ljava/io/PrintStream;
      77: aload_1
      78: invokeinterface #75,  1           // InterfaceMethod java/util/Map.size:()I
      83: invokedynamic #79,  0             // InvokeDynamic #5:makeConcatWithConstants:(I)Ljava/lang/String;
      88: invokevirtual #83                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
      91: return

  private static org.apache.calcite.sql.SqlOperator toOp(java.lang.reflect.Field);
    Code:
       0: aload_0
       1: aconst_null
       2: invokevirtual #89                 // Method java/lang/reflect/Field.get:(Ljava/lang/Object;)Ljava/lang/Object;
       5: checkcast     #94                 // class org/apache/calcite/sql/SqlOperator
       8: areturn
       9: astore_1
      10: new           #98                 // class java/lang/RuntimeException
      13: dup
      14: aload_1
      15: invokespecial #100                // Method java/lang/RuntimeException."<init>":(Ljava/lang/Throwable;)V
      18: athrow
    Exception table:
       from    to  target type
           0     8     9   Class java/lang/IllegalAccessException

  private static boolean lambda$main$1(java.lang.reflect.Field);
    Code:
       0: aload_0
       1: invokevirtual #103                // Method java/lang/reflect/Field.getModifiers:()I
       4: invokestatic  #106                // Method java/lang/reflect/Modifier.isStatic:(I)Z
       7: ifeq          24
      10: aload_0
      11: invokevirtual #103                // Method java/lang/reflect/Field.getModifiers:()I
      14: invokestatic  #112                // Method java/lang/reflect/Modifier.isPublic:(I)Z
      17: ifeq          24
      20: iconst_1
      21: goto          25
      24: iconst_0
      25: ireturn

  private static boolean lambda$main$0(java.lang.reflect.Field);
    Code:
       0: ldc           #94                 // class org/apache/calcite/sql/SqlOperator
       2: aload_0
       3: invokevirtual #115                // Method java/lang/reflect/Field.getType:()Ljava/lang/Class;
       6: invokevirtual #119                // Method java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z
       9: ifne          14
      12: iconst_0
      13: ireturn
      14: ldc           #123                // class org/apache/calcite/sql/SqlSetOperator
      16: aload_0
      17: invokevirtual #115                // Method java/lang/reflect/Field.getType:()Ljava/lang/Class;
      20: invokevirtual #119                // Method java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z
      23: ifne          38
      26: ldc           #125                // class org/apache/calcite/sql/fun/SqlMultisetSetOperator
      28: aload_0
      29: invokevirtual #115                // Method java/lang/reflect/Field.getType:()Ljava/lang/Class;
      32: invokevirtual #119                // Method java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z
      35: ifeq          40
      38: iconst_0
      39: ireturn
      40: aload_0
      41: aconst_null
      42: invokevirtual #89                 // Method java/lang/reflect/Field.get:(Ljava/lang/Object;)Ljava/lang/Object;
      45: checkcast     #94                 // class org/apache/calcite/sql/SqlOperator
      48: astore_1
      49: iconst_1
      50: ireturn
      51: astore_1
      52: new           #98                 // class java/lang/RuntimeException
      55: dup
      56: aload_1
      57: invokespecial #100                // Method java/lang/RuntimeException."<init>":(Ljava/lang/Throwable;)V
      60: athrow
    Exception table:
       from    to  target type
          40    50    51   Class java/lang/IllegalAccessException

  static {};
    Code:
       0: ldc           #127                // class io/substrait/isthmus/expression/ListSqlOperatorFunctions
       2: invokestatic  #129                // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #135                // Field logger:Lorg/slf4j/Logger;
       8: return
}
