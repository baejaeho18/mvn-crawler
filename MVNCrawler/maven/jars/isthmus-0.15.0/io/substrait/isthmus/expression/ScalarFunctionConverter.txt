Compiled from "ScalarFunctionConverter.java"
public class io.substrait.isthmus.expression.ScalarFunctionConverter extends io.substrait.isthmus.expression.FunctionConverter<io.substrait.extension.SimpleExtension$ScalarFunctionVariant, io.substrait.expression.Expression, io.substrait.isthmus.expression.ScalarFunctionConverter$WrappedScalarCall> implements io.substrait.isthmus.CallConverter {
  public io.substrait.isthmus.expression.ScalarFunctionConverter(java.util.List<io.substrait.extension.SimpleExtension$ScalarFunctionVariant>, org.apache.calcite.rel.type.RelDataTypeFactory);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #1                  // Method io/substrait/isthmus/expression/FunctionConverter."<init>":(Ljava/util/List;Lorg/apache/calcite/rel/type/RelDataTypeFactory;)V
       6: return

  public io.substrait.isthmus.expression.ScalarFunctionConverter(java.util.List<io.substrait.extension.SimpleExtension$ScalarFunctionVariant>, java.util.List<io.substrait.isthmus.expression.FunctionMappings$Sig>, org.apache.calcite.rel.type.RelDataTypeFactory, io.substrait.isthmus.TypeConverter);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokespecial #7                  // Method io/substrait/isthmus/expression/FunctionConverter."<init>":(Ljava/util/List;Ljava/util/List;Lorg/apache/calcite/rel/type/RelDataTypeFactory;Lio/substrait/isthmus/TypeConverter;)V
       9: return

  protected com.google.common.collect.ImmutableList<io.substrait.isthmus.expression.FunctionMappings$Sig> getSigs();
    Code:
       0: getstatic     #10                 // Field io/substrait/isthmus/expression/FunctionMappings.SCALAR_SIGS:Lcom/google/common/collect/ImmutableList;
       3: areturn

  public java.util.Optional<io.substrait.expression.Expression> convert(org.apache.calcite.rex.RexCall, java.util.function.Function<org.apache.calcite.rex.RexNode, io.substrait.expression.Expression>);
    Code:
       0: aload_0
       1: getfield      #16                 // Field signatures:Ljava/util/Map;
       4: aload_1
       5: getfield      #22                 // Field org/apache/calcite/rex/RexCall.op:Lorg/apache/calcite/sql/SqlOperator;
       8: invokeinterface #28,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      13: checkcast     #34                 // class io/substrait/isthmus/expression/FunctionConverter$FunctionFinder
      16: astore_3
      17: aload_3
      18: ifnonnull     25
      21: invokestatic  #36                 // Method java/util/Optional.empty:()Ljava/util/Optional;
      24: areturn
      25: aload_3
      26: aload_1
      27: invokevirtual #42                 // Method org/apache/calcite/rex/RexCall.getOperands:()Ljava/util/List;
      30: invokeinterface #46,  1           // InterfaceMethod java/util/List.size:()I
      35: invokevirtual #52                 // Method io/substrait/isthmus/expression/FunctionConverter$FunctionFinder.allowedArgCount:(I)Z
      38: ifne          45
      41: invokestatic  #36                 // Method java/util/Optional.empty:()Ljava/util/Optional;
      44: areturn
      45: new           #56                 // class io/substrait/isthmus/expression/ScalarFunctionConverter$WrappedScalarCall
      48: dup
      49: aload_1
      50: invokespecial #58                 // Method io/substrait/isthmus/expression/ScalarFunctionConverter$WrappedScalarCall."<init>":(Lorg/apache/calcite/rex/RexCall;)V
      53: astore        4
      55: aload_3
      56: aload         4
      58: aload_2
      59: invokevirtual #61                 // Method io/substrait/isthmus/expression/FunctionConverter$FunctionFinder.attemptMatch:(Lio/substrait/isthmus/expression/FunctionConverter$GenericCall;Ljava/util/function/Function;)Ljava/util/Optional;
      62: areturn

  protected io.substrait.expression.Expression generateBinding(io.substrait.isthmus.expression.ScalarFunctionConverter$WrappedScalarCall, io.substrait.extension.SimpleExtension$ScalarFunctionVariant, java.util.List<io.substrait.expression.FunctionArg>, io.substrait.type.Type);
    Code:
       0: invokestatic  #65                 // Method io/substrait/expression/Expression$ScalarFunctionInvocation.builder:()Lio/substrait/expression/ImmutableExpression$ScalarFunctionInvocation$Builder;
       3: aload         4
       5: invokevirtual #71                 // Method io/substrait/expression/ImmutableExpression$ScalarFunctionInvocation$Builder.outputType:(Lio/substrait/type/Type;)Lio/substrait/expression/ImmutableExpression$ScalarFunctionInvocation$Builder;
       8: aload_2
       9: invokevirtual #77                 // Method io/substrait/expression/ImmutableExpression$ScalarFunctionInvocation$Builder.declaration:(Lio/substrait/extension/SimpleExtension$ScalarFunctionVariant;)Lio/substrait/expression/ImmutableExpression$ScalarFunctionInvocation$Builder;
      12: aload_3
      13: invokevirtual #81                 // Method io/substrait/expression/ImmutableExpression$ScalarFunctionInvocation$Builder.addAllArguments:(Ljava/lang/Iterable;)Lio/substrait/expression/ImmutableExpression$ScalarFunctionInvocation$Builder;
      16: invokevirtual #85                 // Method io/substrait/expression/ImmutableExpression$ScalarFunctionInvocation$Builder.build:()Lio/substrait/expression/ImmutableExpression$ScalarFunctionInvocation;
      19: areturn

  protected java.lang.Object generateBinding(io.substrait.isthmus.expression.FunctionConverter$GenericCall, io.substrait.extension.SimpleExtension$Function, java.util.List, io.substrait.type.Type);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #56                 // class io/substrait/isthmus/expression/ScalarFunctionConverter$WrappedScalarCall
       5: aload_2
       6: checkcast     #89                 // class io/substrait/extension/SimpleExtension$ScalarFunctionVariant
       9: aload_3
      10: aload         4
      12: invokevirtual #91                 // Method generateBinding:(Lio/substrait/isthmus/expression/ScalarFunctionConverter$WrappedScalarCall;Lio/substrait/extension/SimpleExtension$ScalarFunctionVariant;Ljava/util/List;Lio/substrait/type/Type;)Lio/substrait/expression/Expression;
      15: areturn
}
