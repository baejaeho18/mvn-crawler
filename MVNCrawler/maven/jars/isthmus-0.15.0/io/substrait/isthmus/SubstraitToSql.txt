Compiled from "SubstraitToSql.java"
public class io.substrait.isthmus.SubstraitToSql extends io.substrait.isthmus.SqlConverterBase {
  private static final org.apache.calcite.sql.SqlDialect DEFAULT_SQL_DIALECT;

  public io.substrait.isthmus.SubstraitToSql();
    Code:
       0: aload_0
       1: getstatic     #1                  // Field FEATURES_DEFAULT:Lio/substrait/isthmus/FeatureBoard;
       4: invokespecial #7                  // Method io/substrait/isthmus/SqlConverterBase."<init>":(Lio/substrait/isthmus/FeatureBoard;)V
       7: iconst_0
       8: invokestatic  #13                 // Method org/apache/calcite/jdbc/CalciteSchema.createRootSchema:(Z)Lorg/apache/calcite/jdbc/CalciteSchema;
      11: astore_1
      12: return

  public org.apache.calcite.rel.RelNode substraitRelToCalciteRel(io.substrait.relation.Rel, java.util.List<java.lang.String>) throws org.apache.calcite.sql.parser.SqlParseException;
    Code:
       0: aload_0
       1: aload_2
       2: invokevirtual #19                 // Method registerCreateTables:(Ljava/util/List;)Lorg/apache/calcite/util/Pair;
       5: astore_3
       6: aload_1
       7: aload_0
       8: getfield      #23                 // Field relOptCluster:Lorg/apache/calcite/plan/RelOptCluster;
      11: aload_3
      12: getfield      #27                 // Field org/apache/calcite/util/Pair.right:Ljava/lang/Object;
      15: checkcast     #33                 // class org/apache/calcite/prepare/Prepare$CatalogReader
      18: aload_0
      19: getfield      #35                 // Field parserConfig:Lorg/apache/calcite/sql/parser/SqlParser$Config;
      22: invokestatic  #39                 // Method io/substrait/isthmus/SubstraitRelNodeConverter.convert:(Lio/substrait/relation/Rel;Lorg/apache/calcite/plan/RelOptCluster;Lorg/apache/calcite/prepare/Prepare$CatalogReader;Lorg/apache/calcite/sql/parser/SqlParser$Config;)Lorg/apache/calcite/rel/RelNode;
      25: areturn

  public org.apache.calcite.rel.RelNode substraitRelToCalciteRel(io.substrait.relation.Rel, java.util.function.Function<java.util.List<java.lang.String>, io.substrait.type.NamedStruct>) throws org.apache.calcite.sql.parser.SqlParseException;
    Code:
       0: aload_0
       1: aload_2
       2: invokevirtual #45                 // Method registerCreateTables:(Ljava/util/function/Function;)Lorg/apache/calcite/util/Pair;
       5: astore_3
       6: aload_1
       7: aload_0
       8: getfield      #23                 // Field relOptCluster:Lorg/apache/calcite/plan/RelOptCluster;
      11: aload_3
      12: getfield      #27                 // Field org/apache/calcite/util/Pair.right:Ljava/lang/Object;
      15: checkcast     #33                 // class org/apache/calcite/prepare/Prepare$CatalogReader
      18: aload_0
      19: getfield      #35                 // Field parserConfig:Lorg/apache/calcite/sql/parser/SqlParser$Config;
      22: invokestatic  #39                 // Method io/substrait/isthmus/SubstraitRelNodeConverter.convert:(Lio/substrait/relation/Rel;Lorg/apache/calcite/plan/RelOptCluster;Lorg/apache/calcite/prepare/Prepare$CatalogReader;Lorg/apache/calcite/sql/parser/SqlParser$Config;)Lorg/apache/calcite/rel/RelNode;
      25: areturn

  public static java.lang.String toSql(org.apache.calcite.rel.RelNode);
    Code:
       0: aload_0
       1: getstatic     #48                 // Field DEFAULT_SQL_DIALECT:Lorg/apache/calcite/sql/SqlDialect;
       4: invokestatic  #52                 // Method toSql:(Lorg/apache/calcite/rel/RelNode;Lorg/apache/calcite/sql/SqlDialect;)Ljava/lang/String;
       7: areturn

  public static java.lang.String toSql(org.apache.calcite.rel.RelNode, org.apache.calcite.sql.SqlDialect);
    Code:
       0: aload_0
       1: aload_1
       2: invokedynamic #56,  0             // InvokeDynamic #0:apply:()Ljava/util/function/UnaryOperator;
       7: invokestatic  #60                 // Method toSql:(Lorg/apache/calcite/rel/RelNode;Lorg/apache/calcite/sql/SqlDialect;Ljava/util/function/UnaryOperator;)Ljava/lang/String;
      10: areturn

  private static java.lang.String toSql(org.apache.calcite.rel.RelNode, org.apache.calcite.sql.SqlDialect, java.util.function.UnaryOperator<org.apache.calcite.sql.SqlWriterConfig>);
    Code:
       0: new           #63                 // class org/apache/calcite/rel/rel2sql/RelToSqlConverter
       3: dup
       4: aload_1
       5: invokespecial #65                 // Method org/apache/calcite/rel/rel2sql/RelToSqlConverter."<init>":(Lorg/apache/calcite/sql/SqlDialect;)V
       8: astore_3
       9: aload_3
      10: aload_0
      11: invokevirtual #68                 // Method org/apache/calcite/rel/rel2sql/RelToSqlConverter.visitRoot:(Lorg/apache/calcite/rel/RelNode;)Lorg/apache/calcite/rel/rel2sql/SqlImplementor$Result;
      14: invokevirtual #72                 // Method org/apache/calcite/rel/rel2sql/SqlImplementor$Result.asStatement:()Lorg/apache/calcite/sql/SqlNode;
      17: astore        4
      19: aload         4
      21: aload_2
      22: aload_1
      23: invokedynamic #78,  0             // InvokeDynamic #1:apply:(Ljava/util/function/UnaryOperator;Lorg/apache/calcite/sql/SqlDialect;)Ljava/util/function/UnaryOperator;
      28: invokevirtual #81                 // Method org/apache/calcite/sql/SqlNode.toSqlString:(Ljava/util/function/UnaryOperator;)Lorg/apache/calcite/sql/util/SqlString;
      31: invokevirtual #87                 // Method org/apache/calcite/sql/util/SqlString.getSql:()Ljava/lang/String;
      34: areturn

  private static org.apache.calcite.sql.SqlWriterConfig lambda$toSql$1(java.util.function.UnaryOperator, org.apache.calcite.sql.SqlDialect, org.apache.calcite.sql.SqlWriterConfig);
    Code:
       0: aload_0
       1: aload_2
       2: aload_1
       3: invokeinterface #93,  2           // InterfaceMethod org/apache/calcite/sql/SqlWriterConfig.withDialect:(Lorg/apache/calcite/sql/SqlDialect;)Lorg/apache/calcite/sql/SqlWriterConfig;
       8: invokeinterface #99,  2           // InterfaceMethod java/util/function/UnaryOperator.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      13: checkcast     #94                 // class org/apache/calcite/sql/SqlWriterConfig
      16: areturn

  private static org.apache.calcite.sql.SqlWriterConfig lambda$toSql$0(org.apache.calcite.sql.SqlWriterConfig);
    Code:
       0: aload_0
       1: iconst_0
       2: invokeinterface #104,  2          // InterfaceMethod org/apache/calcite/sql/SqlWriterConfig.withAlwaysUseParentheses:(Z)Lorg/apache/calcite/sql/SqlWriterConfig;
       7: iconst_0
       8: invokeinterface #108,  2          // InterfaceMethod org/apache/calcite/sql/SqlWriterConfig.withSelectListItemsOnSeparateLines:(Z)Lorg/apache/calcite/sql/SqlWriterConfig;
      13: iconst_0
      14: invokeinterface #111,  2          // InterfaceMethod org/apache/calcite/sql/SqlWriterConfig.withUpdateSetListNewline:(Z)Lorg/apache/calcite/sql/SqlWriterConfig;
      19: iconst_0
      20: invokeinterface #114,  2          // InterfaceMethod org/apache/calcite/sql/SqlWriterConfig.withIndentation:(I)Lorg/apache/calcite/sql/SqlWriterConfig;
      25: areturn

  static {};
    Code:
       0: new           #118                // class io/substrait/isthmus/SubstraitToSql$1
       3: dup
       4: getstatic     #120                // Field org/apache/calcite/sql/SqlDialect.EMPTY_CONTEXT:Lorg/apache/calcite/sql/SqlDialect$Context;
       7: invokespecial #126                // Method io/substrait/isthmus/SubstraitToSql$1."<init>":(Lorg/apache/calcite/sql/SqlDialect$Context;)V
      10: putstatic     #48                 // Field DEFAULT_SQL_DIALECT:Lorg/apache/calcite/sql/SqlDialect;
      13: return
}
