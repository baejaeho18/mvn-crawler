Compiled from "LookupCalciteSchema.java"
public class org.apache.calcite.jdbc.LookupCalciteSchema extends org.apache.calcite.jdbc.SimpleCalciteSchema {
  private final java.util.function.Function<java.util.List<java.lang.String>, org.apache.calcite.schema.Table> lookup;

  private final java.util.Map<java.util.List<java.lang.String>, org.apache.calcite.schema.Table> cache;

  org.apache.calcite.jdbc.LookupCalciteSchema(org.apache.calcite.jdbc.CalciteSchema, org.apache.calcite.schema.Schema, java.lang.String, java.util.function.Function<java.util.List<java.lang.String>, org.apache.calcite.schema.Table>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokespecial #1                  // Method org/apache/calcite/jdbc/SimpleCalciteSchema."<init>":(Lorg/apache/calcite/jdbc/CalciteSchema;Lorg/apache/calcite/schema/Schema;Ljava/lang/String;)V
       7: aload_0
       8: invokestatic  #7                  // Method com/google/common/collect/Maps.newHashMap:()Ljava/util/HashMap;
      11: putfield      #13                 // Field cache:Ljava/util/Map;
      14: aload_0
      15: aload         4
      17: putfield      #19                 // Field lookup:Ljava/util/function/Function;
      20: return

  public org.apache.calcite.jdbc.CalciteSchema add(java.lang.String, org.apache.calcite.schema.Schema);
    Code:
       0: new           #14                 // class org/apache/calcite/jdbc/LookupCalciteSchema
       3: dup
       4: aload_0
       5: aload_2
       6: aload_1
       7: aload_0
       8: getfield      #19                 // Field lookup:Ljava/util/function/Function;
      11: invokespecial #23                 // Method "<init>":(Lorg/apache/calcite/jdbc/CalciteSchema;Lorg/apache/calcite/schema/Schema;Ljava/lang/String;Ljava/util/function/Function;)V
      14: astore_3
      15: aload_0
      16: getfield      #26                 // Field subSchemaMap:Lorg/apache/calcite/util/NameMap;
      19: aload_1
      20: aload_3
      21: invokevirtual #30                 // Method org/apache/calcite/util/NameMap.put:(Ljava/lang/String;Ljava/lang/Object;)V
      24: aload_3
      25: areturn

  protected org.apache.calcite.jdbc.CalciteSchema getImplicitSubSchema(java.lang.String, boolean);
    Code:
       0: aload_0
       1: getfield      #13                 // Field cache:Ljava/util/Map;
       4: aload_0
       5: aload_1
       6: invokevirtual #36                 // Method path:(Ljava/lang/String;)Ljava/util/List;
       9: aload_0
      10: getfield      #19                 // Field lookup:Ljava/util/function/Function;
      13: invokeinterface #40,  3           // InterfaceMethod java/util/Map.computeIfAbsent:(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;
      18: ifnull        23
      21: aconst_null
      22: areturn
      23: aload_0
      24: invokevirtual #46                 // Method plus:()Lorg/apache/calcite/schema/SchemaPlus;
      27: aload_1
      28: getstatic     #50                 // Field org/apache/calcite/schema/impl/AbstractSchema$Factory.INSTANCE:Lorg/apache/calcite/schema/impl/AbstractSchema$Factory;
      31: aconst_null
      32: aconst_null
      33: aconst_null
      34: invokevirtual #56                 // Method org/apache/calcite/schema/impl/AbstractSchema$Factory.create:(Lorg/apache/calcite/schema/SchemaPlus;Ljava/lang/String;Ljava/util/Map;)Lorg/apache/calcite/schema/Schema;
      37: invokeinterface #60,  3           // InterfaceMethod org/apache/calcite/schema/SchemaPlus.add:(Ljava/lang/String;Lorg/apache/calcite/schema/Schema;)Lorg/apache/calcite/schema/SchemaPlus;
      42: pop
      43: aload_0
      44: aload_1
      45: iload_2
      46: invokespecial #66                 // Method org/apache/calcite/jdbc/SimpleCalciteSchema.getSubSchema:(Ljava/lang/String;Z)Lorg/apache/calcite/jdbc/CalciteSchema;
      49: areturn

  protected org.apache.calcite.jdbc.CalciteSchema$TableEntry getImplicitTable(java.lang.String, boolean);
    Code:
       0: aload_0
       1: getfield      #13                 // Field cache:Ljava/util/Map;
       4: aload_0
       5: aload_1
       6: invokevirtual #36                 // Method path:(Ljava/lang/String;)Ljava/util/List;
       9: aload_0
      10: getfield      #19                 // Field lookup:Ljava/util/function/Function;
      13: invokeinterface #40,  3           // InterfaceMethod java/util/Map.computeIfAbsent:(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;
      18: checkcast     #70                 // class org/apache/calcite/schema/Table
      21: astore_3
      22: aload_3
      23: ifnonnull     28
      26: aconst_null
      27: areturn
      28: aload_0
      29: aload_1
      30: aload_3
      31: invokevirtual #72                 // Method add:(Ljava/lang/String;Lorg/apache/calcite/schema/Table;)Lorg/apache/calcite/jdbc/CalciteSchema$TableEntry;
      34: pop
      35: aload_0
      36: aload_1
      37: iload_2
      38: invokevirtual #75                 // Method getTable:(Ljava/lang/String;Z)Lorg/apache/calcite/jdbc/CalciteSchema$TableEntry;
      41: areturn

  public static org.apache.calcite.jdbc.CalciteSchema createRootSchema(java.util.function.Function<java.util.List<java.lang.String>, org.apache.calcite.schema.Table>);
    Code:
       0: new           #79                 // class org/apache/calcite/jdbc/CalciteConnectionImpl$RootSchema
       3: dup
       4: invokespecial #81                 // Method org/apache/calcite/jdbc/CalciteConnectionImpl$RootSchema."<init>":()V
       7: astore_1
       8: new           #14                 // class org/apache/calcite/jdbc/LookupCalciteSchema
      11: dup
      12: aconst_null
      13: aload_1
      14: ldc           #84                 // String
      16: aload_0
      17: invokespecial #23                 // Method "<init>":(Lorg/apache/calcite/jdbc/CalciteSchema;Lorg/apache/calcite/schema/Schema;Ljava/lang/String;Ljava/util/function/Function;)V
      20: areturn

  public void setCache(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #86                 // Method org/apache/calcite/jdbc/SimpleCalciteSchema.setCache:(Z)V
       5: return
}
