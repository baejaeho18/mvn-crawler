Compiled from "HttpRequestFrameReader.java"
public class org.smallmind.web.reverse.http1_1.HttpRequestFrameReader extends org.smallmind.web.reverse.http1_1.HttpFrameReader {
  private final java.util.concurrent.atomic.AtomicReference<org.smallmind.web.reverse.http1_1.DestinationTicket> destinationTicketRef;

  private final int connectTimeoutMillis;

  public org.smallmind.web.reverse.http1_1.HttpRequestFrameReader(org.smallmind.web.reverse.http1_1.ReverseProxyService, java.nio.channels.SocketChannel, int);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #1                  // Method org/smallmind/web/reverse/http1_1/HttpFrameReader."<init>":(Lorg/smallmind/web/reverse/http1_1/ReverseProxyService;Ljava/nio/channels/SocketChannel;)V
       6: aload_0
       7: new           #2                  // class java/util/concurrent/atomic/AtomicReference
      10: dup
      11: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicReference."<init>":()V
      14: putfield      #4                  // Field destinationTicketRef:Ljava/util/concurrent/atomic/AtomicReference;
      17: aload_0
      18: iload_3
      19: putfield      #5                  // Field connectTimeoutMillis:I
      22: return

  public void closeChannels();
    Code:
       0: aload_0
       1: invokevirtual #6                  // Method getSourceChannel:()Ljava/nio/channels/SocketChannel;
       4: invokevirtual #7                  // Method java/nio/channels/SocketChannel.close:()V
       7: goto          20
      10: astore_1
      11: ldc           #9                  // class org/smallmind/web/reverse/http1_1/HttpRequestFrameReader
      13: invokestatic  #10                 // Method org/smallmind/scribe/pen/LoggerManager.getLogger:(Ljava/lang/Class;)Lorg/smallmind/scribe/pen/Logger;
      16: aload_1
      17: invokevirtual #11                 // Method org/smallmind/scribe/pen/Logger.error:(Ljava/lang/Throwable;)V
      20: aload_0
      21: getfield      #4                  // Field destinationTicketRef:Ljava/util/concurrent/atomic/AtomicReference;
      24: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      27: checkcast     #13                 // class org/smallmind/web/reverse/http1_1/DestinationTicket
      30: dup
      31: astore_1
      32: ifnull        42
      35: aload_1
      36: invokevirtual #14                 // Method org/smallmind/web/reverse/http1_1/DestinationTicket.getSocketChannel:()Ljava/nio/channels/SocketChannel;
      39: invokevirtual #7                  // Method java/nio/channels/SocketChannel.close:()V
      42: goto          55
      45: astore_1
      46: ldc           #9                  // class org/smallmind/web/reverse/http1_1/HttpRequestFrameReader
      48: invokestatic  #10                 // Method org/smallmind/scribe/pen/LoggerManager.getLogger:(Ljava/lang/Class;)Lorg/smallmind/scribe/pen/Logger;
      51: aload_1
      52: invokevirtual #11                 // Method org/smallmind/scribe/pen/Logger.error:(Ljava/lang/Throwable;)V
      55: return
    Exception table:
       from    to  target type
           0     7    10   Class java/io/IOException
          20    42    45   Class java/io/IOException

  public void registerDestination(org.smallmind.web.reverse.http1_1.ProxyTarget, java.nio.channels.SocketChannel);
    Code:
       0: aload_0
       1: getfield      #4                  // Field destinationTicketRef:Ljava/util/concurrent/atomic/AtomicReference;
       4: dup
       5: astore_3
       6: monitorenter
       7: aload_0
       8: getfield      #4                  // Field destinationTicketRef:Ljava/util/concurrent/atomic/AtomicReference;
      11: new           #13                 // class org/smallmind/web/reverse/http1_1/DestinationTicket
      14: dup
      15: aload_1
      16: aload_2
      17: invokespecial #15                 // Method org/smallmind/web/reverse/http1_1/DestinationTicket."<init>":(Lorg/smallmind/web/reverse/http1_1/ProxyTarget;Ljava/nio/channels/SocketChannel;)V
      20: invokevirtual #16                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
      23: aload_0
      24: getfield      #4                  // Field destinationTicketRef:Ljava/util/concurrent/atomic/AtomicReference;
      27: invokevirtual #17                 // Method java/lang/Object.notify:()V
      30: aload_3
      31: monitorexit
      32: goto          42
      35: astore        4
      37: aload_3
      38: monitorexit
      39: aload         4
      41: athrow
      42: return
    Exception table:
       from    to  target type
           7    32    35   any
          35    39    35   any

  public java.nio.channels.SocketChannel getTargetChannel();
    Code:
       0: aconst_null
       1: astore_1
       2: invokestatic  #18                 // Method java/lang/System.currentTimeMillis:()J
       5: lstore_2
       6: invokestatic  #18                 // Method java/lang/System.currentTimeMillis:()J
       9: lload_2
      10: lsub
      11: dup2
      12: lstore        4
      14: aload_0
      15: getfield      #5                  // Field connectTimeoutMillis:I
      18: i2l
      19: lcmp
      20: ifge          78
      23: aload_0
      24: getfield      #4                  // Field destinationTicketRef:Ljava/util/concurrent/atomic/AtomicReference;
      27: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      30: checkcast     #13                 // class org/smallmind/web/reverse/http1_1/DestinationTicket
      33: dup
      34: astore_1
      35: ifnonnull     78
      38: aload_0
      39: getfield      #4                  // Field destinationTicketRef:Ljava/util/concurrent/atomic/AtomicReference;
      42: dup
      43: astore        6
      45: monitorenter
      46: aload_0
      47: getfield      #4                  // Field destinationTicketRef:Ljava/util/concurrent/atomic/AtomicReference;
      50: aload_0
      51: getfield      #5                  // Field connectTimeoutMillis:I
      54: i2l
      55: lload         4
      57: lsub
      58: invokevirtual #19                 // Method java/lang/Object.wait:(J)V
      61: aload         6
      63: monitorexit
      64: goto          75
      67: astore        7
      69: aload         6
      71: monitorexit
      72: aload         7
      74: athrow
      75: goto          6
      78: goto          93
      81: astore        6
      83: ldc           #9                  // class org/smallmind/web/reverse/http1_1/HttpRequestFrameReader
      85: invokestatic  #10                 // Method org/smallmind/scribe/pen/LoggerManager.getLogger:(Ljava/lang/Class;)Lorg/smallmind/scribe/pen/Logger;
      88: aload         6
      90: invokevirtual #11                 // Method org/smallmind/scribe/pen/Logger.error:(Ljava/lang/Throwable;)V
      93: aload_1
      94: ifnonnull     101
      97: aconst_null
      98: goto          105
     101: aload_1
     102: invokevirtual #14                 // Method org/smallmind/web/reverse/http1_1/DestinationTicket.getSocketChannel:()Ljava/nio/channels/SocketChannel;
     105: areturn
    Exception table:
       from    to  target type
          46    64    67   any
          67    72    67   any
           6    78    81   Class java/lang/InterruptedException

  public java.nio.channels.SocketChannel getDestinationChannel() throws org.smallmind.web.reverse.http1_1.ProtocolException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field destinationTicketRef:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #13                 // class org/smallmind/web/reverse/http1_1/DestinationTicket
      10: dup
      11: astore_1
      12: ifnonnull     26
      15: new           #21                 // class org/smallmind/web/reverse/http1_1/ProtocolException
      18: dup
      19: getstatic     #22                 // Field org/smallmind/web/reverse/http1_1/CannedResponse.BAD_GATEWAY:Lorg/smallmind/web/reverse/http1_1/CannedResponse;
      22: invokespecial #23                 // Method org/smallmind/web/reverse/http1_1/ProtocolException."<init>":(Lorg/smallmind/web/reverse/http1_1/CannedResponse;)V
      25: athrow
      26: aload_1
      27: invokevirtual #14                 // Method org/smallmind/web/reverse/http1_1/DestinationTicket.getSocketChannel:()Ljava/nio/channels/SocketChannel;
      30: areturn

  public org.smallmind.web.reverse.http1_1.HttpRequestFrame getHttpFrame(org.smallmind.web.reverse.http1_1.ReverseProxyService, java.nio.channels.SocketChannel, org.smallmind.web.reverse.http1_1.HttpProtocolInputStream, org.smallmind.web.reverse.http1_1.HttpProtocolOutputStream) throws java.io.IOException, org.smallmind.web.reverse.http1_1.ProtocolException;
    Code:
       0: new           #24                 // class org/smallmind/web/reverse/http1_1/HttpRequestFrame
       3: dup
       4: aload_3
       5: invokespecial #25                 // Method org/smallmind/web/reverse/http1_1/HttpRequestFrame."<init>":(Lorg/smallmind/web/reverse/http1_1/HttpProtocolInputStream;)V
       8: astore        5
      10: aload_1
      11: aload         5
      13: invokevirtual #26                 // Method org/smallmind/web/reverse/http1_1/ReverseProxyService.lookup:(Lorg/smallmind/web/reverse/http1_1/HttpRequestFrame;)Lorg/smallmind/web/reverse/http1_1/ProxyTarget;
      16: astore        6
      18: aload_0
      19: getfield      #4                  // Field destinationTicketRef:Ljava/util/concurrent/atomic/AtomicReference;
      22: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      25: checkcast     #13                 // class org/smallmind/web/reverse/http1_1/DestinationTicket
      28: dup
      29: astore        7
      31: ifnull        58
      34: aload         7
      36: invokevirtual #27                 // Method org/smallmind/web/reverse/http1_1/DestinationTicket.getProxyTarget:()Lorg/smallmind/web/reverse/http1_1/ProxyTarget;
      39: aload         6
      41: invokevirtual #28                 // Method org/smallmind/web/reverse/http1_1/ProxyTarget.equals:(Ljava/lang/Object;)Z
      44: ifeq          58
      47: aload         7
      49: invokevirtual #14                 // Method org/smallmind/web/reverse/http1_1/DestinationTicket.getSocketChannel:()Ljava/nio/channels/SocketChannel;
      52: invokevirtual #29                 // Method java/nio/channels/SocketChannel.isOpen:()Z
      55: ifne          105
      58: aload         7
      60: ifnull        97
      63: aload         7
      65: invokevirtual #14                 // Method org/smallmind/web/reverse/http1_1/DestinationTicket.getSocketChannel:()Ljava/nio/channels/SocketChannel;
      68: invokevirtual #7                  // Method java/nio/channels/SocketChannel.close:()V
      71: goto          86
      74: astore        9
      76: ldc           #9                  // class org/smallmind/web/reverse/http1_1/HttpRequestFrameReader
      78: invokestatic  #10                 // Method org/smallmind/scribe/pen/LoggerManager.getLogger:(Ljava/lang/Class;)Lorg/smallmind/scribe/pen/Logger;
      81: aload         9
      83: invokevirtual #11                 // Method org/smallmind/scribe/pen/Logger.error:(Ljava/lang/Throwable;)V
      86: aload_0
      87: getfield      #4                  // Field destinationTicketRef:Ljava/util/concurrent/atomic/AtomicReference;
      90: aload         7
      92: aconst_null
      93: invokevirtual #30                 // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
      96: pop
      97: aload_1
      98: aload_2
      99: aload_0
     100: aload         6
     102: invokevirtual #31                 // Method org/smallmind/web/reverse/http1_1/ReverseProxyService.connectDestination:(Ljava/nio/channels/SocketChannel;Lorg/smallmind/web/reverse/http1_1/HttpRequestFrameReader;Lorg/smallmind/web/reverse/http1_1/ProxyTarget;)V
     105: aload         5
     107: ldc           #32                 // String Host
     109: invokevirtual #33                 // Method org/smallmind/web/reverse/http1_1/HttpRequestFrame.getHeader:(Ljava/lang/String;)Lorg/smallmind/web/reverse/http1_1/HttpHeader;
     112: dup
     113: astore        8
     115: ifnull        142
     118: aload         8
     120: aload         6
     122: invokevirtual #34                 // Method org/smallmind/web/reverse/http1_1/ProxyTarget.getHost:()Ljava/lang/String;
     125: aload         6
     127: invokevirtual #35                 // Method org/smallmind/web/reverse/http1_1/ProxyTarget.getPort:()I
     130: invokedynamic #36,  0             // InvokeDynamic #0:makeConcatWithConstants:(Ljava/lang/String;I)Ljava/lang/String;
     135: invokevirtual #37                 // Method org/smallmind/web/reverse/http1_1/HttpHeader.setValue:(Ljava/lang/String;)Lorg/smallmind/web/reverse/http1_1/HttpHeader;
     138: pop
     139: goto          178
     142: aload         5
     144: new           #38                 // class org/smallmind/web/reverse/http1_1/HttpHeader
     147: dup
     148: ldc           #32                 // String Host
     150: iconst_0
     151: anewarray     #39                 // class java/lang/String
     154: invokespecial #40                 // Method org/smallmind/web/reverse/http1_1/HttpHeader."<init>":(Ljava/lang/String;[Ljava/lang/String;)V
     157: aload         6
     159: invokevirtual #34                 // Method org/smallmind/web/reverse/http1_1/ProxyTarget.getHost:()Ljava/lang/String;
     162: aload         6
     164: invokevirtual #35                 // Method org/smallmind/web/reverse/http1_1/ProxyTarget.getPort:()I
     167: invokedynamic #36,  0             // InvokeDynamic #0:makeConcatWithConstants:(Ljava/lang/String;I)Ljava/lang/String;
     172: invokevirtual #41                 // Method org/smallmind/web/reverse/http1_1/HttpHeader.addValue:(Ljava/lang/String;)Lorg/smallmind/web/reverse/http1_1/HttpHeader;
     175: invokevirtual #42                 // Method org/smallmind/web/reverse/http1_1/HttpRequestFrame.addHeader:(Lorg/smallmind/web/reverse/http1_1/HttpHeader;)V
     178: aload         5
     180: aload         4
     182: invokevirtual #43                 // Method org/smallmind/web/reverse/http1_1/HttpRequestFrame.toOutputStream:(Ljava/io/OutputStream;)V
     185: aload         5
     187: areturn
    Exception table:
       from    to  target type
          63    71    74   Class java/io/IOException

  public org.smallmind.web.reverse.http1_1.HttpFrame getHttpFrame(org.smallmind.web.reverse.http1_1.ReverseProxyService, java.nio.channels.SocketChannel, org.smallmind.web.reverse.http1_1.HttpProtocolInputStream, org.smallmind.web.reverse.http1_1.HttpProtocolOutputStream) throws java.io.IOException, org.smallmind.web.reverse.http1_1.ProtocolException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokevirtual #44                 // Method getHttpFrame:(Lorg/smallmind/web/reverse/http1_1/ReverseProxyService;Ljava/nio/channels/SocketChannel;Lorg/smallmind/web/reverse/http1_1/HttpProtocolInputStream;Lorg/smallmind/web/reverse/http1_1/HttpProtocolOutputStream;)Lorg/smallmind/web/reverse/http1_1/HttpRequestFrame;
       9: areturn
}
