Compiled from "BaseTupleExprRenderer.java"
public abstract class org.eclipse.rdf4j.queryrender.BaseTupleExprRenderer extends org.eclipse.rdf4j.query.algebra.helpers.AbstractQueryModelVisitor<java.lang.Exception> {
  protected java.util.Map<java.lang.String, org.eclipse.rdf4j.query.algebra.ValueExpr> mExtensions;

  protected java.util.List<org.eclipse.rdf4j.query.algebra.ProjectionElemList> mProjection;

  protected java.util.List<org.eclipse.rdf4j.query.algebra.OrderElem> mOrdering;

  protected boolean mDistinct;

  protected boolean mReduced;

  protected long mLimit;

  protected long mOffset;

  public org.eclipse.rdf4j.queryrender.BaseTupleExprRenderer();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/eclipse/rdf4j/query/algebra/helpers/AbstractQueryModelVisitor."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/HashMap
       8: dup
       9: invokespecial #3                  // Method java/util/HashMap."<init>":()V
      12: putfield      #4                  // Field mExtensions:Ljava/util/Map;
      15: aload_0
      16: new           #5                  // class java/util/ArrayList
      19: dup
      20: invokespecial #6                  // Method java/util/ArrayList."<init>":()V
      23: putfield      #7                  // Field mProjection:Ljava/util/List;
      26: aload_0
      27: new           #5                  // class java/util/ArrayList
      30: dup
      31: invokespecial #6                  // Method java/util/ArrayList."<init>":()V
      34: putfield      #8                  // Field mOrdering:Ljava/util/List;
      37: aload_0
      38: iconst_0
      39: putfield      #9                  // Field mDistinct:Z
      42: aload_0
      43: iconst_0
      44: putfield      #10                 // Field mReduced:Z
      47: aload_0
      48: ldc2_w        #11                 // long -1l
      51: putfield      #13                 // Field mLimit:J
      54: aload_0
      55: ldc2_w        #11                 // long -1l
      58: putfield      #14                 // Field mOffset:J
      61: return

  public void reset();
    Code:
       0: aload_0
       1: aload_0
       2: ldc2_w        #11                 // long -1l
       5: dup2_x1
       6: putfield      #14                 // Field mOffset:J
       9: putfield      #13                 // Field mLimit:J
      12: aload_0
      13: aload_0
      14: iconst_0
      15: dup_x1
      16: putfield      #10                 // Field mReduced:Z
      19: putfield      #9                  // Field mDistinct:Z
      22: aload_0
      23: getfield      #4                  // Field mExtensions:Ljava/util/Map;
      26: invokeinterface #15,  1           // InterfaceMethod java/util/Map.clear:()V
      31: aload_0
      32: getfield      #8                  // Field mOrdering:Ljava/util/List;
      35: invokeinterface #16,  1           // InterfaceMethod java/util/List.clear:()V
      40: aload_0
      41: getfield      #7                  // Field mProjection:Ljava/util/List;
      44: invokeinterface #16,  1           // InterfaceMethod java/util/List.clear:()V
      49: return

  public java.util.Map<java.lang.String, org.eclipse.rdf4j.query.algebra.ValueExpr> getExtensions();
    Code:
       0: aload_0
       1: getfield      #4                  // Field mExtensions:Ljava/util/Map;
       4: areturn

  public java.util.List<org.eclipse.rdf4j.query.algebra.ProjectionElemList> getProjection();
    Code:
       0: aload_0
       1: getfield      #7                  // Field mProjection:Ljava/util/List;
       4: areturn

  public java.util.List<org.eclipse.rdf4j.query.algebra.OrderElem> getOrdering();
    Code:
       0: aload_0
       1: getfield      #8                  // Field mOrdering:Ljava/util/List;
       4: areturn

  public boolean isDistinct();
    Code:
       0: aload_0
       1: getfield      #9                  // Field mDistinct:Z
       4: ireturn

  public boolean isReduced();
    Code:
       0: aload_0
       1: getfield      #10                 // Field mReduced:Z
       4: ireturn

  public long getLimit();
    Code:
       0: aload_0
       1: getfield      #13                 // Field mLimit:J
       4: lreturn

  public long getOffset();
    Code:
       0: aload_0
       1: getfield      #14                 // Field mOffset:J
       4: lreturn

  public java.lang.String render(org.eclipse.rdf4j.query.parser.ParsedQuery) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #17                 // Method org/eclipse/rdf4j/query/parser/ParsedQuery.getTupleExpr:()Lorg/eclipse/rdf4j/query/algebra/TupleExpr;
       5: invokevirtual #18                 // Method render:(Lorg/eclipse/rdf4j/query/algebra/TupleExpr;)Ljava/lang/String;
       8: areturn

  public abstract java.lang.String render(org.eclipse.rdf4j.query.algebra.TupleExpr) throws java.lang.Exception;

  protected abstract java.lang.String renderValueExpr(org.eclipse.rdf4j.query.algebra.ValueExpr) throws java.lang.Exception;

  public org.eclipse.rdf4j.query.algebra.StatementPattern toStatementPattern(org.eclipse.rdf4j.query.algebra.ProjectionElemList) throws java.lang.Exception;
    Code:
       0: aload_1
       1: invokevirtual #19                 // Method org/eclipse/rdf4j/query/algebra/ProjectionElemList.getElements:()Ljava/util/List;
       4: iconst_0
       5: invokeinterface #20,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      10: checkcast     #21                 // class org/eclipse/rdf4j/query/algebra/ProjectionElem
      13: astore_2
      14: aload_1
      15: invokevirtual #19                 // Method org/eclipse/rdf4j/query/algebra/ProjectionElemList.getElements:()Ljava/util/List;
      18: iconst_1
      19: invokeinterface #20,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      24: checkcast     #21                 // class org/eclipse/rdf4j/query/algebra/ProjectionElem
      27: astore_3
      28: aload_1
      29: invokevirtual #19                 // Method org/eclipse/rdf4j/query/algebra/ProjectionElemList.getElements:()Ljava/util/List;
      32: iconst_2
      33: invokeinterface #20,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      38: checkcast     #21                 // class org/eclipse/rdf4j/query/algebra/ProjectionElem
      41: astore        4
      43: new           #22                 // class org/eclipse/rdf4j/query/algebra/StatementPattern
      46: dup
      47: aload_0
      48: getfield      #4                  // Field mExtensions:Ljava/util/Map;
      51: aload_2
      52: invokevirtual #23                 // Method org/eclipse/rdf4j/query/algebra/ProjectionElem.getSourceName:()Ljava/lang/String;
      55: invokeinterface #24,  2           // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
      60: ifeq          100
      63: new           #25                 // class org/eclipse/rdf4j/query/algebra/Var
      66: dup
      67: aload_2
      68: invokevirtual #23                 // Method org/eclipse/rdf4j/query/algebra/ProjectionElem.getSourceName:()Ljava/lang/String;
      71: invokestatic  #26                 // Method scrubVarName:(Ljava/lang/String;)Ljava/lang/String;
      74: aload_0
      75: aload_0
      76: getfield      #4                  // Field mExtensions:Ljava/util/Map;
      79: aload_2
      80: invokevirtual #23                 // Method org/eclipse/rdf4j/query/algebra/ProjectionElem.getSourceName:()Ljava/lang/String;
      83: invokeinterface #27,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      88: checkcast     #28                 // class org/eclipse/rdf4j/query/algebra/ValueExpr
      91: invokespecial #29                 // Method asValue:(Lorg/eclipse/rdf4j/query/algebra/ValueExpr;)Lorg/eclipse/rdf4j/model/Value;
      94: invokespecial #30                 // Method org/eclipse/rdf4j/query/algebra/Var."<init>":(Ljava/lang/String;Lorg/eclipse/rdf4j/model/Value;)V
      97: goto          114
     100: new           #25                 // class org/eclipse/rdf4j/query/algebra/Var
     103: dup
     104: aload_2
     105: invokevirtual #23                 // Method org/eclipse/rdf4j/query/algebra/ProjectionElem.getSourceName:()Ljava/lang/String;
     108: invokestatic  #26                 // Method scrubVarName:(Ljava/lang/String;)Ljava/lang/String;
     111: invokespecial #31                 // Method org/eclipse/rdf4j/query/algebra/Var."<init>":(Ljava/lang/String;)V
     114: aload_0
     115: getfield      #4                  // Field mExtensions:Ljava/util/Map;
     118: aload_3
     119: invokevirtual #23                 // Method org/eclipse/rdf4j/query/algebra/ProjectionElem.getSourceName:()Ljava/lang/String;
     122: invokeinterface #24,  2           // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
     127: ifeq          167
     130: new           #25                 // class org/eclipse/rdf4j/query/algebra/Var
     133: dup
     134: aload_3
     135: invokevirtual #23                 // Method org/eclipse/rdf4j/query/algebra/ProjectionElem.getSourceName:()Ljava/lang/String;
     138: invokestatic  #26                 // Method scrubVarName:(Ljava/lang/String;)Ljava/lang/String;
     141: aload_0
     142: aload_0
     143: getfield      #4                  // Field mExtensions:Ljava/util/Map;
     146: aload_3
     147: invokevirtual #23                 // Method org/eclipse/rdf4j/query/algebra/ProjectionElem.getSourceName:()Ljava/lang/String;
     150: invokeinterface #27,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
     155: checkcast     #28                 // class org/eclipse/rdf4j/query/algebra/ValueExpr
     158: invokespecial #29                 // Method asValue:(Lorg/eclipse/rdf4j/query/algebra/ValueExpr;)Lorg/eclipse/rdf4j/model/Value;
     161: invokespecial #30                 // Method org/eclipse/rdf4j/query/algebra/Var."<init>":(Ljava/lang/String;Lorg/eclipse/rdf4j/model/Value;)V
     164: goto          181
     167: new           #25                 // class org/eclipse/rdf4j/query/algebra/Var
     170: dup
     171: aload_3
     172: invokevirtual #23                 // Method org/eclipse/rdf4j/query/algebra/ProjectionElem.getSourceName:()Ljava/lang/String;
     175: invokestatic  #26                 // Method scrubVarName:(Ljava/lang/String;)Ljava/lang/String;
     178: invokespecial #31                 // Method org/eclipse/rdf4j/query/algebra/Var."<init>":(Ljava/lang/String;)V
     181: aload_0
     182: getfield      #4                  // Field mExtensions:Ljava/util/Map;
     185: aload         4
     187: invokevirtual #23                 // Method org/eclipse/rdf4j/query/algebra/ProjectionElem.getSourceName:()Ljava/lang/String;
     190: invokeinterface #24,  2           // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
     195: ifeq          237
     198: new           #25                 // class org/eclipse/rdf4j/query/algebra/Var
     201: dup
     202: aload         4
     204: invokevirtual #23                 // Method org/eclipse/rdf4j/query/algebra/ProjectionElem.getSourceName:()Ljava/lang/String;
     207: invokestatic  #26                 // Method scrubVarName:(Ljava/lang/String;)Ljava/lang/String;
     210: aload_0
     211: aload_0
     212: getfield      #4                  // Field mExtensions:Ljava/util/Map;
     215: aload         4
     217: invokevirtual #23                 // Method org/eclipse/rdf4j/query/algebra/ProjectionElem.getSourceName:()Ljava/lang/String;
     220: invokeinterface #27,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
     225: checkcast     #28                 // class org/eclipse/rdf4j/query/algebra/ValueExpr
     228: invokespecial #29                 // Method asValue:(Lorg/eclipse/rdf4j/query/algebra/ValueExpr;)Lorg/eclipse/rdf4j/model/Value;
     231: invokespecial #30                 // Method org/eclipse/rdf4j/query/algebra/Var."<init>":(Ljava/lang/String;Lorg/eclipse/rdf4j/model/Value;)V
     234: goto          252
     237: new           #25                 // class org/eclipse/rdf4j/query/algebra/Var
     240: dup
     241: aload         4
     243: invokevirtual #23                 // Method org/eclipse/rdf4j/query/algebra/ProjectionElem.getSourceName:()Ljava/lang/String;
     246: invokestatic  #26                 // Method scrubVarName:(Ljava/lang/String;)Ljava/lang/String;
     249: invokespecial #31                 // Method org/eclipse/rdf4j/query/algebra/Var."<init>":(Ljava/lang/String;)V
     252: invokespecial #32                 // Method org/eclipse/rdf4j/query/algebra/StatementPattern."<init>":(Lorg/eclipse/rdf4j/query/algebra/Var;Lorg/eclipse/rdf4j/query/algebra/Var;Lorg/eclipse/rdf4j/query/algebra/Var;)V
     255: areturn

  public static java.lang.String scrubVarName(java.lang.String);
    Code:
       0: aload_0
       1: ldc           #33                 // String -
       3: ldc           #34                 // String
       5: invokevirtual #35                 // Method java/lang/String.replaceAll:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
       8: areturn

  private org.eclipse.rdf4j.model.Value asValue(org.eclipse.rdf4j.query.algebra.ValueExpr) throws java.lang.Exception;
    Code:
       0: aload_1
       1: instanceof    #36                 // class org/eclipse/rdf4j/query/algebra/ValueConstant
       4: ifeq          15
       7: aload_1
       8: checkcast     #36                 // class org/eclipse/rdf4j/query/algebra/ValueConstant
      11: invokevirtual #37                 // Method org/eclipse/rdf4j/query/algebra/ValueConstant.getValue:()Lorg/eclipse/rdf4j/model/Value;
      14: areturn
      15: aload_1
      16: instanceof    #25                 // class org/eclipse/rdf4j/query/algebra/Var
      19: ifeq          41
      22: aload_1
      23: checkcast     #25                 // class org/eclipse/rdf4j/query/algebra/Var
      26: astore_2
      27: aload_2
      28: invokevirtual #38                 // Method org/eclipse/rdf4j/query/algebra/Var.hasValue:()Z
      31: ifeq          39
      34: aload_2
      35: invokevirtual #39                 // Method org/eclipse/rdf4j/query/algebra/Var.getValue:()Lorg/eclipse/rdf4j/model/Value;
      38: areturn
      39: aconst_null
      40: areturn
      41: aconst_null
      42: areturn

  protected boolean isSelect();
    Code:
       0: iconst_0
       1: istore_1
       2: aload_0
       3: getfield      #7                  // Field mProjection:Ljava/util/List;
       6: invokeinterface #40,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      11: astore_2
      12: aload_2
      13: invokeinterface #41,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      18: ifeq          46
      21: aload_2
      22: invokeinterface #42,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      27: checkcast     #43                 // class org/eclipse/rdf4j/query/algebra/ProjectionElemList
      30: astore_3
      31: aload_3
      32: invokestatic  #44                 // Method isSPOElemList:(Lorg/eclipse/rdf4j/query/algebra/ProjectionElemList;)Z
      35: ifne          43
      38: iconst_1
      39: istore_1
      40: goto          46
      43: goto          12
      46: iload_1
      47: ireturn

  public static boolean isSPOElemList(org.eclipse.rdf4j.query.algebra.ProjectionElemList);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method org/eclipse/rdf4j/query/algebra/ProjectionElemList.getElements:()Ljava/util/List;
       4: invokeinterface #45,  1           // InterfaceMethod java/util/List.size:()I
       9: iconst_3
      10: if_icmpne     89
      13: aload_0
      14: invokevirtual #19                 // Method org/eclipse/rdf4j/query/algebra/ProjectionElemList.getElements:()Ljava/util/List;
      17: iconst_0
      18: invokeinterface #20,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      23: checkcast     #21                 // class org/eclipse/rdf4j/query/algebra/ProjectionElem
      26: invokevirtual #46                 // Method org/eclipse/rdf4j/query/algebra/ProjectionElem.getTargetName:()Ljava/lang/String;
      29: ldc           #47                 // String subject
      31: invokevirtual #48                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      34: ifeq          89
      37: aload_0
      38: invokevirtual #19                 // Method org/eclipse/rdf4j/query/algebra/ProjectionElemList.getElements:()Ljava/util/List;
      41: iconst_1
      42: invokeinterface #20,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      47: checkcast     #21                 // class org/eclipse/rdf4j/query/algebra/ProjectionElem
      50: invokevirtual #46                 // Method org/eclipse/rdf4j/query/algebra/ProjectionElem.getTargetName:()Ljava/lang/String;
      53: ldc           #49                 // String predicate
      55: invokevirtual #48                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      58: ifeq          89
      61: aload_0
      62: invokevirtual #19                 // Method org/eclipse/rdf4j/query/algebra/ProjectionElemList.getElements:()Ljava/util/List;
      65: iconst_2
      66: invokeinterface #20,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      71: checkcast     #21                 // class org/eclipse/rdf4j/query/algebra/ProjectionElem
      74: invokevirtual #46                 // Method org/eclipse/rdf4j/query/algebra/ProjectionElem.getTargetName:()Ljava/lang/String;
      77: ldc           #50                 // String object
      79: invokevirtual #48                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      82: ifeq          89
      85: iconst_1
      86: goto          90
      89: iconst_0
      90: ireturn

  public void meet(org.eclipse.rdf4j.query.algebra.StatementPattern) throws java.lang.Exception;
    Code:
       0: aload_1
       1: aload_0
       2: invokevirtual #51                 // Method org/eclipse/rdf4j/query/algebra/StatementPattern.visitChildren:(Lorg/eclipse/rdf4j/query/algebra/QueryModelVisitor;)V
       5: return

  public void meet(org.eclipse.rdf4j.query.algebra.Slice) throws java.lang.Exception;
    Code:
       0: aload_1
       1: invokevirtual #52                 // Method org/eclipse/rdf4j/query/algebra/Slice.hasOffset:()Z
       4: ifeq          15
       7: aload_0
       8: aload_1
       9: invokevirtual #53                 // Method org/eclipse/rdf4j/query/algebra/Slice.getOffset:()J
      12: putfield      #14                 // Field mOffset:J
      15: aload_1
      16: invokevirtual #54                 // Method org/eclipse/rdf4j/query/algebra/Slice.hasLimit:()Z
      19: ifeq          30
      22: aload_0
      23: aload_1
      24: invokevirtual #55                 // Method org/eclipse/rdf4j/query/algebra/Slice.getLimit:()J
      27: putfield      #13                 // Field mLimit:J
      30: aload_1
      31: aload_0
      32: invokevirtual #56                 // Method org/eclipse/rdf4j/query/algebra/Slice.visitChildren:(Lorg/eclipse/rdf4j/query/algebra/QueryModelVisitor;)V
      35: return

  public void meet(org.eclipse.rdf4j.query.algebra.ExtensionElem) throws java.lang.Exception;
    Code:
       0: aload_0
       1: getfield      #4                  // Field mExtensions:Ljava/util/Map;
       4: aload_1
       5: invokevirtual #57                 // Method org/eclipse/rdf4j/query/algebra/ExtensionElem.getName:()Ljava/lang/String;
       8: aload_1
       9: invokevirtual #58                 // Method org/eclipse/rdf4j/query/algebra/ExtensionElem.getExpr:()Lorg/eclipse/rdf4j/query/algebra/ValueExpr;
      12: invokeinterface #59,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      17: pop
      18: return

  public void meet(org.eclipse.rdf4j.query.algebra.ProjectionElemList) throws java.lang.Exception;
    Code:
       0: aload_1
       1: invokevirtual #19                 // Method org/eclipse/rdf4j/query/algebra/ProjectionElemList.getElements:()Ljava/util/List;
       4: invokeinterface #60,  1           // InterfaceMethod java/util/List.isEmpty:()Z
       9: ifne          26
      12: aload_0
      13: getfield      #7                  // Field mProjection:Ljava/util/List;
      16: aload_1
      17: invokevirtual #61                 // Method org/eclipse/rdf4j/query/algebra/ProjectionElemList.clone:()Lorg/eclipse/rdf4j/query/algebra/ProjectionElemList;
      20: invokeinterface #62,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      25: pop
      26: aload_1
      27: aload_0
      28: invokevirtual #63                 // Method org/eclipse/rdf4j/query/algebra/ProjectionElemList.visitChildren:(Lorg/eclipse/rdf4j/query/algebra/QueryModelVisitor;)V
      31: return

  public void meet(org.eclipse.rdf4j.query.algebra.OrderElem) throws java.lang.Exception;
    Code:
       0: aload_0
       1: getfield      #8                  // Field mOrdering:Ljava/util/List;
       4: aload_1
       5: invokeinterface #62,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      10: pop
      11: return

  public void meet(org.eclipse.rdf4j.query.algebra.Distinct) throws java.lang.Exception;
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #9                  // Field mDistinct:Z
       5: aload_1
       6: invokevirtual #64                 // Method org/eclipse/rdf4j/query/algebra/Distinct.getArg:()Lorg/eclipse/rdf4j/query/algebra/TupleExpr;
       9: aload_0
      10: invokeinterface #65,  2           // InterfaceMethod org/eclipse/rdf4j/query/algebra/TupleExpr.visit:(Lorg/eclipse/rdf4j/query/algebra/QueryModelVisitor;)V
      15: return

  public void meet(org.eclipse.rdf4j.query.algebra.Reduced) throws java.lang.Exception;
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #10                 // Field mReduced:Z
       5: aload_1
       6: aload_0
       7: invokevirtual #66                 // Method org/eclipse/rdf4j/query/algebra/Reduced.visitChildren:(Lorg/eclipse/rdf4j/query/algebra/QueryModelVisitor;)V
      10: return
}
