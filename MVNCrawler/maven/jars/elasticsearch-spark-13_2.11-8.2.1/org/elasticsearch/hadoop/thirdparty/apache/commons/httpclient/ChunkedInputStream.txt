Compiled from "ChunkedInputStream.java"
public class org.elasticsearch.hadoop.thirdparty.apache.commons.httpclient.ChunkedInputStream extends java.io.InputStream {
  private java.io.InputStream in;

  private int chunkSize;

  private int pos;

  private boolean bof;

  private boolean eof;

  private boolean closed;

  private org.elasticsearch.hadoop.thirdparty.apache.commons.httpclient.HttpMethod method;

  private static final org.apache.commons.logging.Log LOG;

  static java.lang.Class class$org$apache$commons$httpclient$ChunkedInputStream;

  public org.elasticsearch.hadoop.thirdparty.apache.commons.httpclient.ChunkedInputStream(java.io.InputStream, org.elasticsearch.hadoop.thirdparty.apache.commons.httpclient.HttpMethod) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #27                 // Method java/io/InputStream."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #29                 // Field bof:Z
       9: aload_0
      10: iconst_0
      11: putfield      #31                 // Field eof:Z
      14: aload_0
      15: iconst_0
      16: putfield      #33                 // Field closed:Z
      19: aload_0
      20: aconst_null
      21: putfield      #35                 // Field method:Lorg/elasticsearch/hadoop/thirdparty/apache/commons/httpclient/HttpMethod;
      24: aload_1
      25: ifnonnull     38
      28: new           #37                 // class java/lang/IllegalArgumentException
      31: dup
      32: ldc           #39                 // String InputStream parameter may not be null
      34: invokespecial #42                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      37: athrow
      38: aload_0
      39: aload_1
      40: putfield      #44                 // Field in:Ljava/io/InputStream;
      43: aload_0
      44: aload_2
      45: putfield      #35                 // Field method:Lorg/elasticsearch/hadoop/thirdparty/apache/commons/httpclient/HttpMethod;
      48: aload_0
      49: iconst_0
      50: putfield      #46                 // Field pos:I
      53: return

  public org.elasticsearch.hadoop.thirdparty.apache.commons.httpclient.ChunkedInputStream(java.io.InputStream) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: invokespecial #51                 // Method "<init>":(Ljava/io/InputStream;Lorg/elasticsearch/hadoop/thirdparty/apache/commons/httpclient/HttpMethod;)V
       6: return

  public int read() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #33                 // Field closed:Z
       4: ifeq          17
       7: new           #24                 // class java/io/IOException
      10: dup
      11: ldc           #55                 // String Attempted read from closed stream.
      13: invokespecial #56                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: getfield      #31                 // Field eof:Z
      21: ifeq          26
      24: iconst_m1
      25: ireturn
      26: aload_0
      27: getfield      #46                 // Field pos:I
      30: aload_0
      31: getfield      #58                 // Field chunkSize:I
      34: if_icmplt     50
      37: aload_0
      38: invokespecial #61                 // Method nextChunk:()V
      41: aload_0
      42: getfield      #31                 // Field eof:Z
      45: ifeq          50
      48: iconst_m1
      49: ireturn
      50: aload_0
      51: dup
      52: getfield      #46                 // Field pos:I
      55: iconst_1
      56: iadd
      57: putfield      #46                 // Field pos:I
      60: aload_0
      61: getfield      #44                 // Field in:Ljava/io/InputStream;
      64: invokevirtual #63                 // Method java/io/InputStream.read:()I
      67: ireturn

  public int read(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #33                 // Field closed:Z
       4: ifeq          17
       7: new           #24                 // class java/io/IOException
      10: dup
      11: ldc           #55                 // String Attempted read from closed stream.
      13: invokespecial #56                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: getfield      #31                 // Field eof:Z
      21: ifeq          26
      24: iconst_m1
      25: ireturn
      26: aload_0
      27: getfield      #46                 // Field pos:I
      30: aload_0
      31: getfield      #58                 // Field chunkSize:I
      34: if_icmplt     50
      37: aload_0
      38: invokespecial #61                 // Method nextChunk:()V
      41: aload_0
      42: getfield      #31                 // Field eof:Z
      45: ifeq          50
      48: iconst_m1
      49: ireturn
      50: iload_3
      51: aload_0
      52: getfield      #58                 // Field chunkSize:I
      55: aload_0
      56: getfield      #46                 // Field pos:I
      59: isub
      60: invokestatic  #70                 // Method java/lang/Math.min:(II)I
      63: istore_3
      64: aload_0
      65: getfield      #44                 // Field in:Ljava/io/InputStream;
      68: aload_1
      69: iload_2
      70: iload_3
      71: invokevirtual #72                 // Method java/io/InputStream.read:([BII)I
      74: istore        4
      76: aload_0
      77: dup
      78: getfield      #46                 // Field pos:I
      81: iload         4
      83: iadd
      84: putfield      #46                 // Field pos:I
      87: iload         4
      89: ireturn

  public int read(byte[]) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_1
       4: arraylength
       5: invokevirtual #79                 // Method read:([BII)I
       8: ireturn

  private void readCRLF() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #44                 // Field in:Ljava/io/InputStream;
       4: invokevirtual #63                 // Method java/io/InputStream.read:()I
       7: istore_1
       8: aload_0
       9: getfield      #44                 // Field in:Ljava/io/InputStream;
      12: invokevirtual #63                 // Method java/io/InputStream.read:()I
      15: istore_2
      16: iload_1
      17: bipush        13
      19: if_icmpne     28
      22: iload_2
      23: bipush        10
      25: if_icmpeq     64
      28: new           #24                 // class java/io/IOException
      31: dup
      32: new           #82                 // class java/lang/StringBuffer
      35: dup
      36: invokespecial #83                 // Method java/lang/StringBuffer."<init>":()V
      39: ldc           #85                 // String CRLF expected at end of chunk:
      41: invokevirtual #89                 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      44: iload_1
      45: invokevirtual #92                 // Method java/lang/StringBuffer.append:(I)Ljava/lang/StringBuffer;
      48: ldc           #94                 // String /
      50: invokevirtual #89                 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      53: iload_2
      54: invokevirtual #92                 // Method java/lang/StringBuffer.append:(I)Ljava/lang/StringBuffer;
      57: invokevirtual #98                 // Method java/lang/StringBuffer.toString:()Ljava/lang/String;
      60: invokespecial #56                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      63: athrow
      64: return

  private void nextChunk() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #29                 // Field bof:Z
       4: ifne          11
       7: aload_0
       8: invokespecial #102                // Method readCRLF:()V
      11: aload_0
      12: aload_0
      13: getfield      #44                 // Field in:Ljava/io/InputStream;
      16: invokestatic  #106                // Method getChunkSizeFromInputStream:(Ljava/io/InputStream;)I
      19: putfield      #58                 // Field chunkSize:I
      22: aload_0
      23: iconst_0
      24: putfield      #29                 // Field bof:Z
      27: aload_0
      28: iconst_0
      29: putfield      #46                 // Field pos:I
      32: aload_0
      33: getfield      #58                 // Field chunkSize:I
      36: ifne          48
      39: aload_0
      40: iconst_1
      41: putfield      #31                 // Field eof:Z
      44: aload_0
      45: invokespecial #109                // Method parseTrailerHeaders:()V
      48: return

  private static int getChunkSizeFromInputStream(java.io.InputStream) throws java.io.IOException;
    Code:
       0: new           #113                // class java/io/ByteArrayOutputStream
       3: dup
       4: invokespecial #114                // Method java/io/ByteArrayOutputStream."<init>":()V
       7: astore_1
       8: iconst_0
       9: istore_2
      10: goto          185
      13: aload_0
      14: invokevirtual #63                 // Method java/io/InputStream.read:()I
      17: istore_3
      18: iload_3
      19: iconst_m1
      20: if_icmpne     33
      23: new           #24                 // class java/io/IOException
      26: dup
      27: ldc           #116                // String chunked stream ended unexpectedly
      29: invokespecial #56                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      32: athrow
      33: iload_2
      34: tableswitch   { // 0 to 2
                     0: 60
                     1: 103
                     2: 124
               default: 175
          }
      60: iload_3
      61: lookupswitch  { // 2
                    13: 88
                    34: 93
               default: 95
          }
      88: iconst_1
      89: istore_2
      90: goto          185
      93: iconst_2
      94: istore_2
      95: aload_1
      96: iload_3
      97: invokevirtual #120                // Method java/io/ByteArrayOutputStream.write:(I)V
     100: goto          185
     103: iload_3
     104: bipush        10
     106: if_icmpne     114
     109: iconst_m1
     110: istore_2
     111: goto          185
     114: new           #24                 // class java/io/IOException
     117: dup
     118: ldc           #122                // String Protocol violation: Unexpected single newline character in chunk size
     120: invokespecial #56                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
     123: athrow
     124: iload_3
     125: lookupswitch  { // 2
                    34: 165
                    92: 152
               default: 167
          }
     152: aload_0
     153: invokevirtual #63                 // Method java/io/InputStream.read:()I
     156: istore_3
     157: aload_1
     158: iload_3
     159: invokevirtual #120                // Method java/io/ByteArrayOutputStream.write:(I)V
     162: goto          185
     165: iconst_0
     166: istore_2
     167: aload_1
     168: iload_3
     169: invokevirtual #120                // Method java/io/ByteArrayOutputStream.write:(I)V
     172: goto          185
     175: new           #124                // class java/lang/RuntimeException
     178: dup
     179: ldc           #126                // String assertion failed
     181: invokespecial #127                // Method java/lang/RuntimeException."<init>":(Ljava/lang/String;)V
     184: athrow
     185: iload_2
     186: iconst_m1
     187: if_icmpne     13
     190: aload_1
     191: invokevirtual #131                // Method java/io/ByteArrayOutputStream.toByteArray:()[B
     194: invokestatic  #137                // Method org/elasticsearch/hadoop/thirdparty/apache/commons/httpclient/util/EncodingUtil.getAsciiString:([B)Ljava/lang/String;
     197: astore_3
     198: aload_3
     199: bipush        59
     201: invokevirtual #143                // Method java/lang/String.indexOf:(I)I
     204: istore        4
     206: iload         4
     208: ifle          224
     211: aload_3
     212: iconst_0
     213: iload         4
     215: invokevirtual #147                // Method java/lang/String.substring:(II)Ljava/lang/String;
     218: invokevirtual #150                // Method java/lang/String.trim:()Ljava/lang/String;
     221: goto          228
     224: aload_3
     225: invokevirtual #150                // Method java/lang/String.trim:()Ljava/lang/String;
     228: astore_3
     229: aload_3
     230: invokevirtual #150                // Method java/lang/String.trim:()Ljava/lang/String;
     233: bipush        16
     235: invokestatic  #156                // Method java/lang/Integer.parseInt:(Ljava/lang/String;I)I
     238: istore        5
     240: goto          272
     243: astore        6
     245: new           #24                 // class java/io/IOException
     248: dup
     249: new           #82                 // class java/lang/StringBuffer
     252: dup
     253: invokespecial #83                 // Method java/lang/StringBuffer."<init>":()V
     256: ldc           #158                // String Bad chunk size:
     258: invokevirtual #89                 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
     261: aload_3
     262: invokevirtual #89                 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
     265: invokevirtual #98                 // Method java/lang/StringBuffer.toString:()Ljava/lang/String;
     268: invokespecial #56                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
     271: athrow
     272: iload         5
     274: ireturn
    Exception table:
       from    to  target type
         229   240   243   Class java/lang/NumberFormatException

  private void parseTrailerHeaders() throws java.io.IOException;
    Code:
       0: aconst_null
       1: astore_1
       2: ldc           #171                // String US-ASCII
       4: astore_2
       5: aload_0
       6: getfield      #35                 // Field method:Lorg/elasticsearch/hadoop/thirdparty/apache/commons/httpclient/HttpMethod;
       9: ifnull        25
      12: aload_0
      13: getfield      #35                 // Field method:Lorg/elasticsearch/hadoop/thirdparty/apache/commons/httpclient/HttpMethod;
      16: invokeinterface #177,  1          // InterfaceMethod org/elasticsearch/hadoop/thirdparty/apache/commons/httpclient/HttpMethod.getParams:()Lorg/elasticsearch/hadoop/thirdparty/apache/commons/httpclient/params/HttpMethodParams;
      21: invokevirtual #182                // Method org/elasticsearch/hadoop/thirdparty/apache/commons/httpclient/params/HttpMethodParams.getHttpElementCharset:()Ljava/lang/String;
      24: astore_2
      25: aload_0
      26: getfield      #44                 // Field in:Ljava/io/InputStream;
      29: aload_2
      30: invokestatic  #188                // Method org/elasticsearch/hadoop/thirdparty/apache/commons/httpclient/HttpParser.parseHeaders:(Ljava/io/InputStream;Ljava/lang/String;)[Lorg/elasticsearch/hadoop/thirdparty/apache/commons/httpclient/Header;
      33: astore_1
      34: goto          68
      37: astore_2
      38: getstatic     #190                // Field LOG:Lorg/apache/commons/logging/Log;
      41: ldc           #192                // String Error parsing trailer headers
      43: aload_2
      44: invokeinterface #198,  3          // InterfaceMethod org/apache/commons/logging/Log.error:(Ljava/lang/Object;Ljava/lang/Throwable;)V
      49: new           #24                 // class java/io/IOException
      52: dup
      53: aload_2
      54: invokevirtual #203                // Method java/lang/Throwable.getMessage:()Ljava/lang/String;
      57: invokespecial #56                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      60: astore_3
      61: aload_3
      62: aload_2
      63: invokestatic  #209                // Method org/elasticsearch/hadoop/thirdparty/apache/commons/httpclient/util/ExceptionUtil.initCause:(Ljava/lang/Throwable;Ljava/lang/Throwable;)V
      66: aload_3
      67: athrow
      68: aload_0
      69: getfield      #35                 // Field method:Lorg/elasticsearch/hadoop/thirdparty/apache/commons/httpclient/HttpMethod;
      72: ifnull        101
      75: iconst_0
      76: istore_2
      77: goto          95
      80: aload_0
      81: getfield      #35                 // Field method:Lorg/elasticsearch/hadoop/thirdparty/apache/commons/httpclient/HttpMethod;
      84: aload_1
      85: iload_2
      86: aaload
      87: invokeinterface #213,  2          // InterfaceMethod org/elasticsearch/hadoop/thirdparty/apache/commons/httpclient/HttpMethod.addResponseFooter:(Lorg/elasticsearch/hadoop/thirdparty/apache/commons/httpclient/Header;)V
      92: iinc          2, 1
      95: iload_2
      96: aload_1
      97: arraylength
      98: if_icmplt     80
     101: return
    Exception table:
       from    to  target type
           2    34    37   Class org/elasticsearch/hadoop/thirdparty/apache/commons/httpclient/HttpException

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #33                 // Field closed:Z
       4: ifne          43
       7: aload_0
       8: getfield      #31                 // Field eof:Z
      11: ifne          18
      14: aload_0
      15: invokestatic  #224                // Method exhaustInputStream:(Ljava/io/InputStream;)V
      18: jsr           30
      21: goto          43
      24: astore_1
      25: jsr           30
      28: aload_1
      29: athrow
      30: astore_2
      31: aload_0
      32: iconst_1
      33: putfield      #31                 // Field eof:Z
      36: aload_0
      37: iconst_1
      38: putfield      #33                 // Field closed:Z
      41: ret           2
      43: return
    Exception table:
       from    to  target type
           7    24    24   any

  static void exhaustInputStream(java.io.InputStream) throws java.io.IOException;
    Code:
       0: sipush        1024
       3: newarray       byte
       5: astore_1
       6: goto          9
       9: aload_0
      10: aload_1
      11: invokevirtual #226                // Method java/io/InputStream.read:([B)I
      14: ifge          9
      17: return

  static java.lang.Class class$(java.lang.String);
    Code:
       0: aload_0
       1: invokestatic  #237                // Method java/lang/Class.forName:(Ljava/lang/String;)Ljava/lang/Class;
       4: areturn
       5: astore_1
       6: new           #239                // class java/lang/NoClassDefFoundError
       9: dup
      10: aload_1
      11: invokevirtual #203                // Method java/lang/Throwable.getMessage:()Ljava/lang/String;
      14: invokespecial #240                // Method java/lang/NoClassDefFoundError."<init>":(Ljava/lang/String;)V
      17: athrow
    Exception table:
       from    to  target type
           0     5     5   Class java/lang/ClassNotFoundException

  static {};
    Code:
       0: getstatic     #246                // Field class$org$apache$commons$httpclient$ChunkedInputStream:Ljava/lang/Class;
       3: ifnonnull     18
       6: ldc           #248                // String org.elasticsearch.hadoop.thirdparty.apache.commons.httpclient.ChunkedInputStream
       8: invokestatic  #250                // Method class$:(Ljava/lang/String;)Ljava/lang/Class;
      11: dup
      12: putstatic     #246                // Field class$org$apache$commons$httpclient$ChunkedInputStream:Ljava/lang/Class;
      15: goto          21
      18: getstatic     #246                // Field class$org$apache$commons$httpclient$ChunkedInputStream:Ljava/lang/Class;
      21: invokestatic  #256                // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
      24: putstatic     #190                // Field LOG:Lorg/apache/commons/logging/Log;
      27: return
}
