Compiled from "DateUtils.java"
public abstract class org.elasticsearch.hadoop.util.DateUtils {
  public static boolean printed;

  private static final boolean jodaTimeAvailable;

  static final java.time.format.DateTimeFormatter DATE_OPTIONAL_TIME_OFFSET;

  public org.elasticsearch.hadoop.util.DateUtils();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public static java.util.Calendar parseDate(java.lang.String);
    Code:
       0: getstatic     #7                  // Field printed:Z
       3: ifne          36
       6: iconst_1
       7: putstatic     #7                  // Field printed:Z
      10: ldc           #8                  // class org/elasticsearch/hadoop/util/DateUtils
      12: invokestatic  #13                 // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
      15: astore_1
      16: getstatic     #19                 // Field jodaTimeAvailable:Z
      19: ifeq          36
      22: invokestatic  #22                 // Method org/elasticsearch/hadoop/util/DateUtils$JodaTime.access$000:()Z
      25: ifeq          36
      28: aload_1
      29: ldc           #28                 // String Joda library available in the classpath; using it for date/time handling...
      31: invokeinterface #30,  2           // InterfaceMethod org/apache/commons/logging/Log.info:(Ljava/lang/Object;)V
      36: getstatic     #19                 // Field jodaTimeAvailable:Z
      39: ifeq          55
      42: invokestatic  #22                 // Method org/elasticsearch/hadoop/util/DateUtils$JodaTime.access$000:()Z
      45: ifeq          55
      48: aload_0
      49: invokestatic  #36                 // Method org/elasticsearch/hadoop/util/DateUtils$JodaTime.parseDate:(Ljava/lang/String;)Ljava/util/Calendar;
      52: goto          59
      55: aload_0
      56: invokestatic  #40                 // Method org/elasticsearch/hadoop/util/DateUtils$Jdk6.parseDate:(Ljava/lang/String;)Ljava/util/Calendar;
      59: areturn

  public static java.sql.Timestamp parseDateNanos(java.lang.String);
    Code:
       0: getstatic     #43                 // Field DATE_OPTIONAL_TIME_OFFSET:Ljava/time/format/DateTimeFormatter;
       3: aload_0
       4: invokedynamic #47,  0             // InvokeDynamic #0:queryFrom:()Ljava/time/temporal/TemporalQuery;
       9: invokevirtual #51                 // Method java/time/format/DateTimeFormatter.parse:(Ljava/lang/CharSequence;Ljava/time/temporal/TemporalQuery;)Ljava/lang/Object;
      12: checkcast     #57                 // class java/sql/Timestamp
      15: areturn

  private static int getOrDefault(java.time.temporal.TemporalAccessor, java.time.temporal.TemporalField, int);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #59,  2           // InterfaceMethod java/time/temporal/TemporalAccessor.isSupported:(Ljava/time/temporal/TemporalField;)Z
       7: ifeq          18
      10: aload_0
      11: aload_1
      12: invokeinterface #65,  2           // InterfaceMethod java/time/temporal/TemporalAccessor.get:(Ljava/time/temporal/TemporalField;)I
      17: ireturn
      18: iload_2
      19: ireturn

  private static java.sql.Timestamp lambda$parseDateNanos$0(java.time.temporal.TemporalAccessor);
    Code:
       0: aload_0
       1: getstatic     #69                 // Field java/time/temporal/ChronoField.YEAR:Ljava/time/temporal/ChronoField;
       4: invokeinterface #65,  2           // InterfaceMethod java/time/temporal/TemporalAccessor.get:(Ljava/time/temporal/TemporalField;)I
       9: istore_1
      10: aload_0
      11: getstatic     #75                 // Field java/time/temporal/ChronoField.MONTH_OF_YEAR:Ljava/time/temporal/ChronoField;
      14: invokeinterface #65,  2           // InterfaceMethod java/time/temporal/TemporalAccessor.get:(Ljava/time/temporal/TemporalField;)I
      19: istore_2
      20: aload_0
      21: getstatic     #78                 // Field java/time/temporal/ChronoField.DAY_OF_MONTH:Ljava/time/temporal/ChronoField;
      24: invokeinterface #65,  2           // InterfaceMethod java/time/temporal/TemporalAccessor.get:(Ljava/time/temporal/TemporalField;)I
      29: istore_3
      30: aload_0
      31: getstatic     #81                 // Field java/time/temporal/ChronoField.HOUR_OF_DAY:Ljava/time/temporal/ChronoField;
      34: iconst_0
      35: invokestatic  #84                 // Method getOrDefault:(Ljava/time/temporal/TemporalAccessor;Ljava/time/temporal/TemporalField;I)I
      38: istore        4
      40: aload_0
      41: getstatic     #88                 // Field java/time/temporal/ChronoField.MINUTE_OF_HOUR:Ljava/time/temporal/ChronoField;
      44: iconst_0
      45: invokestatic  #84                 // Method getOrDefault:(Ljava/time/temporal/TemporalAccessor;Ljava/time/temporal/TemporalField;I)I
      48: istore        5
      50: aload_0
      51: getstatic     #91                 // Field java/time/temporal/ChronoField.SECOND_OF_MINUTE:Ljava/time/temporal/ChronoField;
      54: iconst_0
      55: invokestatic  #84                 // Method getOrDefault:(Ljava/time/temporal/TemporalAccessor;Ljava/time/temporal/TemporalField;I)I
      58: istore        6
      60: aload_0
      61: getstatic     #94                 // Field java/time/temporal/ChronoField.NANO_OF_SECOND:Ljava/time/temporal/ChronoField;
      64: iconst_0
      65: invokestatic  #84                 // Method getOrDefault:(Ljava/time/temporal/TemporalAccessor;Ljava/time/temporal/TemporalField;I)I
      68: istore        7
      70: aload_0
      71: invokestatic  #97                 // Method java/time/temporal/TemporalQueries.zone:()Ljava/time/temporal/TemporalQuery;
      74: invokeinterface #102,  2          // InterfaceMethod java/time/temporal/TemporalAccessor.query:(Ljava/time/temporal/TemporalQuery;)Ljava/lang/Object;
      79: checkcast     #106                // class java/time/ZoneId
      82: astore        8
      84: aload         8
      86: ifnonnull     96
      89: ldc           #108                // String UTC
      91: invokestatic  #110                // Method java/time/ZoneId.of:(Ljava/lang/String;)Ljava/time/ZoneId;
      94: astore        8
      96: iload_1
      97: iload_2
      98: iload_3
      99: iload         4
     101: iload         5
     103: iload         6
     105: iload         7
     107: aload         8
     109: invokestatic  #114                // Method java/time/ZonedDateTime.of:(IIIIIIILjava/time/ZoneId;)Ljava/time/ZonedDateTime;
     112: astore        9
     114: aload         9
     116: invokestatic  #119                // Method java/time/Instant.from:(Ljava/time/temporal/TemporalAccessor;)Ljava/time/Instant;
     119: invokestatic  #125                // Method java/sql/Timestamp.from:(Ljava/time/Instant;)Ljava/sql/Timestamp;
     122: areturn

  static {};
    Code:
       0: iconst_0
       1: putstatic     #7                  // Field printed:Z
       4: ldc           #128                // String org.joda.time.format.ISODateTimeFormat
       6: ldc           #8                  // class org/elasticsearch/hadoop/util/DateUtils
       8: invokevirtual #130                // Method java/lang/Class.getClassLoader:()Ljava/lang/ClassLoader;
      11: invokestatic  #136                // Method org/elasticsearch/hadoop/util/ObjectUtils.isClassPresent:(Ljava/lang/String;Ljava/lang/ClassLoader;)Z
      14: putstatic     #19                 // Field jodaTimeAvailable:Z
      17: ldc           #142                // String uuuu-MM-dd[\'T\'HH:mm:ss][.SSSSSSSSS][.SSSSSS][.SSS][XXX]
      19: invokestatic  #144                // Method java/time/format/DateTimeFormatter.ofPattern:(Ljava/lang/String;)Ljava/time/format/DateTimeFormatter;
      22: putstatic     #43                 // Field DATE_OPTIONAL_TIME_OFFSET:Ljava/time/format/DateTimeFormatter;
      25: return
}
