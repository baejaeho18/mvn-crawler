Compiled from "PropertyTree.scala"
public final class zio.config.PropertyTree$Record<K, V> implements zio.config.PropertyTree<K, V>, scala.Product, scala.Serializable {
  private final scala.collection.immutable.Map<K, zio.config.PropertyTree<K, V>> value;

  public <K1, V1> zio.config.PropertyTree<K1, V1> flatMap(scala.Function1<V, zio.config.PropertyTree<K1, V1>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #22                 // Method zio/config/PropertyTree$class.flatMap:(Lzio/config/PropertyTree;Lscala/Function1;)Lzio/config/PropertyTree;
       5: areturn

  public zio.config.PropertyTree<K, V> leafNotASequence();
    Code:
       0: aload_0
       1: invokestatic  #31                 // Method zio/config/PropertyTree$class.leafNotASequence:(Lzio/config/PropertyTree;)Lzio/config/PropertyTree;
       4: areturn

  public <K1, V1> zio.config.PropertyTree<K1, scala.Tuple2<V, V1>> zip(zio.config.PropertyTree<K1, V1>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #35                 // Method zio/config/PropertyTree$class.zip:(Lzio/config/PropertyTree;Lzio/config/PropertyTree;)Lzio/config/PropertyTree;
       5: areturn

  public final <K1> zio.config.PropertyTree<K1, V> at(zio.config.PropertyTreePath<K1>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #42                 // Method zio/config/PropertyTree$class.at:(Lzio/config/PropertyTree;Lzio/config/PropertyTreePath;)Lzio/config/PropertyTree;
       5: areturn

  public final <K1> scala.Option<zio.config.PropertyTree<K1, V>> atKey(K1);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #49                 // Method zio/config/PropertyTree$class.atKey:(Lzio/config/PropertyTree;Ljava/lang/Object;)Lscala/Option;
       5: areturn

  public final <K1> scala.Option<zio.config.PropertyTree<K1, V>> atIndex(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #56                 // Method zio/config/PropertyTree$class.atIndex:(Lzio/config/PropertyTree;I)Lscala/Option;
       5: areturn

  public final <K1, V1> scala.collection.immutable.Map<scala.collection.immutable.Vector<K1>, scala.collection.immutable.$colon$colon<V1>> flatten();
    Code:
       0: aload_0
       1: invokestatic  #63                 // Method zio/config/PropertyTree$class.flatten:(Lzio/config/PropertyTree;)Lscala/collection/immutable/Map;
       4: areturn

  public final <K1, V1> scala.collection.immutable.Map<java.lang.String, java.lang.String> flattenKeyAndValue(java.lang.String, java.lang.String, scala.Predef$$eq$colon$eq<K1, java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #68                 // Method zio/config/PropertyTree$class.flattenKeyAndValue:(Lzio/config/PropertyTree;Ljava/lang/String;Ljava/lang/String;Lscala/Predef$$eq$colon$eq;)Lscala/collection/immutable/Map;
       7: areturn

  public final <K1, V1> scala.collection.immutable.Map<java.lang.String, scala.collection.immutable.$colon$colon<V1>> flattenKeyWith(scala.Function1<K1, java.lang.String>, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #78                 // Method zio/config/PropertyTree$class.flattenKeyWith:(Lzio/config/PropertyTree;Lscala/Function1;Ljava/lang/String;)Lscala/collection/immutable/Map;
       6: areturn

  public final <K1, V1> scala.collection.immutable.Map<java.lang.String, scala.collection.immutable.$colon$colon<V1>> flattenString(java.lang.String, scala.Predef$$eq$colon$eq<K1, java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #84                 // Method zio/config/PropertyTree$class.flattenString:(Lzio/config/PropertyTree;Ljava/lang/String;Lscala/Predef$$eq$colon$eq;)Lscala/collection/immutable/Map;
       6: areturn

  public final <K1, V1> zio.config.PropertyTree<K1, V1> getOrElse(scala.Function0<zio.config.PropertyTree<K1, V1>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #89                 // Method zio/config/PropertyTree$class.getOrElse:(Lzio/config/PropertyTree;Lscala/Function0;)Lzio/config/PropertyTree;
       5: areturn

  public final <K1> zio.config.PropertyTree<K1, V> getPath(scala.collection.immutable.List<K1>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #96                 // Method zio/config/PropertyTree$class.getPath:(Lzio/config/PropertyTree;Lscala/collection/immutable/List;)Lzio/config/PropertyTree;
       5: areturn

  public final boolean isEmpty();
    Code:
       0: aload_0
       1: invokestatic  #103                // Method zio/config/PropertyTree$class.isEmpty:(Lzio/config/PropertyTree;)Z
       4: ireturn

  public final <K2> zio.config.PropertyTree<K2, V> mapKey(scala.Function1<K, K2>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #106                // Method zio/config/PropertyTree$class.mapKey:(Lzio/config/PropertyTree;Lscala/Function1;)Lzio/config/PropertyTree;
       5: areturn

  public final <V2> zio.config.PropertyTree<K, V2> map(scala.Function1<V, V2>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #109                // Method zio/config/PropertyTree$class.map:(Lzio/config/PropertyTree;Lscala/Function1;)Lzio/config/PropertyTree;
       5: areturn

  public final <E, V2> scala.util.Either<E, zio.config.PropertyTree<K, V2>> mapEither(scala.Function1<V, scala.util.Either<E, V2>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #114                // Method zio/config/PropertyTree$class.mapEither:(Lzio/config/PropertyTree;Lscala/Function1;)Lscala/util/Either;
       5: areturn

  public <K2, V2> zio.config.PropertyTree<K2, V2> bimap(scala.Function1<K, K2>, scala.Function1<V, V2>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #119                // Method zio/config/PropertyTree$class.bimap:(Lzio/config/PropertyTree;Lscala/Function1;Lscala/Function1;)Lzio/config/PropertyTree;
       6: areturn

  public final <K1, V1> scala.collection.immutable.List<zio.config.PropertyTree<K1, V1>> merge(zio.config.PropertyTree<K1, V1>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #125                // Method zio/config/PropertyTree$class.merge:(Lzio/config/PropertyTree;Lzio/config/PropertyTree;)Lscala/collection/immutable/List;
       5: areturn

  public final boolean nonEmpty();
    Code:
       0: aload_0
       1: invokestatic  #128                // Method zio/config/PropertyTree$class.nonEmpty:(Lzio/config/PropertyTree;)Z
       4: ireturn

  public final <K1, V1> java.lang.String flattenKeyAndValue$default$1();
    Code:
       0: aload_0
       1: invokestatic  #133                // Method zio/config/PropertyTree$class.flattenKeyAndValue$default$1:(Lzio/config/PropertyTree;)Ljava/lang/String;
       4: areturn

  public final <K1, V1> java.lang.String flattenKeyAndValue$default$2();
    Code:
       0: aload_0
       1: invokestatic  #136                // Method zio/config/PropertyTree$class.flattenKeyAndValue$default$2:(Lzio/config/PropertyTree;)Ljava/lang/String;
       4: areturn

  public final <K1, V1> java.lang.String flattenString$default$1();
    Code:
       0: aload_0
       1: invokestatic  #139                // Method zio/config/PropertyTree$class.flattenString$default$1:(Lzio/config/PropertyTree;)Ljava/lang/String;
       4: areturn

  public scala.collection.immutable.Map<K, zio.config.PropertyTree<K, V>> value();
    Code:
       0: aload_0
       1: getfield      #141                // Field value:Lscala/collection/immutable/Map;
       4: areturn

  public <K, V> zio.config.PropertyTree$Record<K, V> copy(scala.collection.immutable.Map<K, zio.config.PropertyTree<K, V>>);
    Code:
       0: new           #2                  // class zio/config/PropertyTree$Record
       3: dup
       4: aload_1
       5: invokespecial #147                // Method "<init>":(Lscala/collection/immutable/Map;)V
       8: areturn

  public <K, V> scala.collection.immutable.Map<K, zio.config.PropertyTree<K, V>> copy$default$1();
    Code:
       0: aload_0
       1: invokevirtual #150                // Method value:()Lscala/collection/immutable/Map;
       4: areturn

  public java.lang.String productPrefix();
    Code:
       0: ldc           #153                // String Record
       2: areturn

  public int productArity();
    Code:
       0: iconst_1
       1: ireturn

  public scala.collection.immutable.Map<K, zio.config.PropertyTree<K, V>> productElement(int);
    Code:
       0: iload_1
       1: istore_2
       2: iload_2
       3: tableswitch   { // 0 to 0
                     0: 35
               default: 20
          }
      20: new           #159                // class java/lang/IndexOutOfBoundsException
      23: dup
      24: iload_1
      25: invokestatic  #165                // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
      28: invokevirtual #168                // Method java/lang/Object.toString:()Ljava/lang/String;
      31: invokespecial #171                // Method java/lang/IndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
      34: athrow
      35: aload_0
      36: invokevirtual #150                // Method value:()Lscala/collection/immutable/Map;
      39: areturn

  public scala.collection.Iterator<scala.collection.immutable.Map<K, zio.config.PropertyTree<K, V>>> productIterator();
    Code:
       0: getstatic     #180                // Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
       3: aload_0
       4: invokevirtual #184                // Method scala/runtime/ScalaRunTime$.typedProductIterator:(Lscala/Product;)Lscala/collection/Iterator;
       7: areturn

  public boolean canEqual(java.lang.Object);
    Code:
       0: aload_1
       1: instanceof    #2                  // class zio/config/PropertyTree$Record
       4: ireturn

  public int hashCode();
    Code:
       0: getstatic     #180                // Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
       3: aload_0
       4: invokevirtual #191                // Method scala/runtime/ScalaRunTime$._hashCode:(Lscala/Product;)I
       7: ireturn

  public java.lang.String toString();
    Code:
       0: getstatic     #180                // Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
       3: aload_0
       4: invokevirtual #195                // Method scala/runtime/ScalaRunTime$._toString:(Lscala/Product;)Ljava/lang/String;
       7: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpeq     71
       5: aload_1
       6: astore_2
       7: aload_2
       8: instanceof    #2                  // class zio/config/PropertyTree$Record
      11: ifeq          19
      14: iconst_1
      15: istore_3
      16: goto          21
      19: iconst_0
      20: istore_3
      21: iload_3
      22: ifeq          75
      25: aload_1
      26: checkcast     #2                  // class zio/config/PropertyTree$Record
      29: astore        4
      31: aload_0
      32: invokevirtual #150                // Method value:()Lscala/collection/immutable/Map;
      35: aload         4
      37: invokevirtual #150                // Method value:()Lscala/collection/immutable/Map;
      40: astore        5
      42: dup
      43: ifnonnull     55
      46: pop
      47: aload         5
      49: ifnull        63
      52: goto          67
      55: aload         5
      57: invokevirtual #198                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      60: ifeq          67
      63: iconst_1
      64: goto          68
      67: iconst_0
      68: ifeq          75
      71: iconst_1
      72: goto          76
      75: iconst_0
      76: ireturn

  public java.lang.Object productElement(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #203                // Method productElement:(I)Lscala/collection/immutable/Map;
       5: areturn

  public zio.config.PropertyTree$Record(scala.collection.immutable.Map<K, zio.config.PropertyTree<K, V>>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #141                // Field value:Lscala/collection/immutable/Map;
       5: aload_0
       6: invokespecial #207                // Method java/lang/Object."<init>":()V
       9: aload_0
      10: invokestatic  #211                // Method zio/config/PropertyTree$class.$init$:(Lzio/config/PropertyTree;)V
      13: aload_0
      14: invokestatic  #216                // Method scala/Product$class.$init$:(Lscala/Product;)V
      17: return
}
