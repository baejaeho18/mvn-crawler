Compiled from "PropertyTree.scala"
public final class zio.config.PropertyTree$Leaf<V> implements zio.config.PropertyTree<scala.runtime.Nothing$, V>, scala.Product, scala.Serializable {
  private final V value;

  private final boolean canBeSequence;

  public <K1, V1> zio.config.PropertyTree<K1, V1> flatMap(scala.Function1<V, zio.config.PropertyTree<K1, V1>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #24                 // Method zio/config/PropertyTree$class.flatMap:(Lzio/config/PropertyTree;Lscala/Function1;)Lzio/config/PropertyTree;
       5: areturn

  public zio.config.PropertyTree<scala.runtime.Nothing$, V> leafNotASequence();
    Code:
       0: aload_0
       1: invokestatic  #33                 // Method zio/config/PropertyTree$class.leafNotASequence:(Lzio/config/PropertyTree;)Lzio/config/PropertyTree;
       4: areturn

  public <K1, V1> zio.config.PropertyTree<K1, scala.Tuple2<V, V1>> zip(zio.config.PropertyTree<K1, V1>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #37                 // Method zio/config/PropertyTree$class.zip:(Lzio/config/PropertyTree;Lzio/config/PropertyTree;)Lzio/config/PropertyTree;
       5: areturn

  public final <K1> zio.config.PropertyTree<K1, V> at(zio.config.PropertyTreePath<K1>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #44                 // Method zio/config/PropertyTree$class.at:(Lzio/config/PropertyTree;Lzio/config/PropertyTreePath;)Lzio/config/PropertyTree;
       5: areturn

  public final <K1> scala.Option<zio.config.PropertyTree<K1, V>> atKey(K1);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #51                 // Method zio/config/PropertyTree$class.atKey:(Lzio/config/PropertyTree;Ljava/lang/Object;)Lscala/Option;
       5: areturn

  public final <K1> scala.Option<zio.config.PropertyTree<K1, V>> atIndex(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #57                 // Method zio/config/PropertyTree$class.atIndex:(Lzio/config/PropertyTree;I)Lscala/Option;
       5: areturn

  public final <K1, V1> scala.collection.immutable.Map<scala.collection.immutable.Vector<K1>, scala.collection.immutable.$colon$colon<V1>> flatten();
    Code:
       0: aload_0
       1: invokestatic  #64                 // Method zio/config/PropertyTree$class.flatten:(Lzio/config/PropertyTree;)Lscala/collection/immutable/Map;
       4: areturn

  public final <K1, V1> scala.collection.immutable.Map<java.lang.String, java.lang.String> flattenKeyAndValue(java.lang.String, java.lang.String, scala.Predef$$eq$colon$eq<K1, java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #69                 // Method zio/config/PropertyTree$class.flattenKeyAndValue:(Lzio/config/PropertyTree;Ljava/lang/String;Ljava/lang/String;Lscala/Predef$$eq$colon$eq;)Lscala/collection/immutable/Map;
       7: areturn

  public final <K1, V1> scala.collection.immutable.Map<java.lang.String, scala.collection.immutable.$colon$colon<V1>> flattenKeyWith(scala.Function1<K1, java.lang.String>, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #79                 // Method zio/config/PropertyTree$class.flattenKeyWith:(Lzio/config/PropertyTree;Lscala/Function1;Ljava/lang/String;)Lscala/collection/immutable/Map;
       6: areturn

  public final <K1, V1> scala.collection.immutable.Map<java.lang.String, scala.collection.immutable.$colon$colon<V1>> flattenString(java.lang.String, scala.Predef$$eq$colon$eq<K1, java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #85                 // Method zio/config/PropertyTree$class.flattenString:(Lzio/config/PropertyTree;Ljava/lang/String;Lscala/Predef$$eq$colon$eq;)Lscala/collection/immutable/Map;
       6: areturn

  public final <K1, V1> zio.config.PropertyTree<K1, V1> getOrElse(scala.Function0<zio.config.PropertyTree<K1, V1>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #90                 // Method zio/config/PropertyTree$class.getOrElse:(Lzio/config/PropertyTree;Lscala/Function0;)Lzio/config/PropertyTree;
       5: areturn

  public final <K1> zio.config.PropertyTree<K1, V> getPath(scala.collection.immutable.List<K1>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #97                 // Method zio/config/PropertyTree$class.getPath:(Lzio/config/PropertyTree;Lscala/collection/immutable/List;)Lzio/config/PropertyTree;
       5: areturn

  public final boolean isEmpty();
    Code:
       0: aload_0
       1: invokestatic  #104                // Method zio/config/PropertyTree$class.isEmpty:(Lzio/config/PropertyTree;)Z
       4: ireturn

  public final <K2> zio.config.PropertyTree<K2, V> mapKey(scala.Function1<scala.runtime.Nothing$, K2>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #107                // Method zio/config/PropertyTree$class.mapKey:(Lzio/config/PropertyTree;Lscala/Function1;)Lzio/config/PropertyTree;
       5: areturn

  public final <V2> zio.config.PropertyTree<scala.runtime.Nothing$, V2> map(scala.Function1<V, V2>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #110                // Method zio/config/PropertyTree$class.map:(Lzio/config/PropertyTree;Lscala/Function1;)Lzio/config/PropertyTree;
       5: areturn

  public final <E, V2> scala.util.Either<E, zio.config.PropertyTree<scala.runtime.Nothing$, V2>> mapEither(scala.Function1<V, scala.util.Either<E, V2>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #115                // Method zio/config/PropertyTree$class.mapEither:(Lzio/config/PropertyTree;Lscala/Function1;)Lscala/util/Either;
       5: areturn

  public <K2, V2> zio.config.PropertyTree<K2, V2> bimap(scala.Function1<scala.runtime.Nothing$, K2>, scala.Function1<V, V2>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #120                // Method zio/config/PropertyTree$class.bimap:(Lzio/config/PropertyTree;Lscala/Function1;Lscala/Function1;)Lzio/config/PropertyTree;
       6: areturn

  public final <K1, V1> scala.collection.immutable.List<zio.config.PropertyTree<K1, V1>> merge(zio.config.PropertyTree<K1, V1>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #126                // Method zio/config/PropertyTree$class.merge:(Lzio/config/PropertyTree;Lzio/config/PropertyTree;)Lscala/collection/immutable/List;
       5: areturn

  public final boolean nonEmpty();
    Code:
       0: aload_0
       1: invokestatic  #129                // Method zio/config/PropertyTree$class.nonEmpty:(Lzio/config/PropertyTree;)Z
       4: ireturn

  public final <K1, V1> java.lang.String flattenKeyAndValue$default$1();
    Code:
       0: aload_0
       1: invokestatic  #134                // Method zio/config/PropertyTree$class.flattenKeyAndValue$default$1:(Lzio/config/PropertyTree;)Ljava/lang/String;
       4: areturn

  public final <K1, V1> java.lang.String flattenKeyAndValue$default$2();
    Code:
       0: aload_0
       1: invokestatic  #137                // Method zio/config/PropertyTree$class.flattenKeyAndValue$default$2:(Lzio/config/PropertyTree;)Ljava/lang/String;
       4: areturn

  public final <K1, V1> java.lang.String flattenString$default$1();
    Code:
       0: aload_0
       1: invokestatic  #140                // Method zio/config/PropertyTree$class.flattenString$default$1:(Lzio/config/PropertyTree;)Ljava/lang/String;
       4: areturn

  public V value();
    Code:
       0: aload_0
       1: getfield      #143                // Field value:Ljava/lang/Object;
       4: areturn

  public boolean canBeSequence();
    Code:
       0: aload_0
       1: getfield      #145                // Field canBeSequence:Z
       4: ireturn

  public <V> zio.config.PropertyTree$Leaf<V> copy(V, boolean);
    Code:
       0: new           #2                  // class zio/config/PropertyTree$Leaf
       3: dup
       4: aload_1
       5: iload_2
       6: invokespecial #151                // Method "<init>":(Ljava/lang/Object;Z)V
       9: areturn

  public <V> V copy$default$1();
    Code:
       0: aload_0
       1: invokevirtual #154                // Method value:()Ljava/lang/Object;
       4: areturn

  public <V> boolean copy$default$2();
    Code:
       0: aload_0
       1: invokevirtual #157                // Method canBeSequence:()Z
       4: ireturn

  public java.lang.String productPrefix();
    Code:
       0: ldc           #160                // String Leaf
       2: areturn

  public int productArity();
    Code:
       0: iconst_2
       1: ireturn

  public java.lang.Object productElement(int);
    Code:
       0: iload_1
       1: istore_2
       2: iload_2
       3: tableswitch   { // 0 to 1
                     0: 49
                     1: 39
               default: 24
          }
      24: new           #166                // class java/lang/IndexOutOfBoundsException
      27: dup
      28: iload_1
      29: invokestatic  #172                // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
      32: invokevirtual #175                // Method java/lang/Object.toString:()Ljava/lang/String;
      35: invokespecial #178                // Method java/lang/IndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
      38: athrow
      39: aload_0
      40: invokevirtual #157                // Method canBeSequence:()Z
      43: invokestatic  #182                // Method scala/runtime/BoxesRunTime.boxToBoolean:(Z)Ljava/lang/Boolean;
      46: goto          53
      49: aload_0
      50: invokevirtual #154                // Method value:()Ljava/lang/Object;
      53: areturn

  public scala.collection.Iterator<java.lang.Object> productIterator();
    Code:
       0: getstatic     #191                // Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
       3: aload_0
       4: invokevirtual #195                // Method scala/runtime/ScalaRunTime$.typedProductIterator:(Lscala/Product;)Lscala/collection/Iterator;
       7: areturn

  public boolean canEqual(java.lang.Object);
    Code:
       0: aload_1
       1: instanceof    #2                  // class zio/config/PropertyTree$Leaf
       4: ireturn

  public int hashCode();
    Code:
       0: ldc           #199                // int -889275714
       2: istore_1
       3: iload_1
       4: aload_0
       5: invokevirtual #154                // Method value:()Ljava/lang/Object;
       8: invokestatic  #205                // Method scala/runtime/Statics.anyHash:(Ljava/lang/Object;)I
      11: invokestatic  #209                // Method scala/runtime/Statics.mix:(II)I
      14: istore_1
      15: iload_1
      16: aload_0
      17: invokevirtual #157                // Method canBeSequence:()Z
      20: ifeq          29
      23: sipush        1231
      26: goto          32
      29: sipush        1237
      32: invokestatic  #209                // Method scala/runtime/Statics.mix:(II)I
      35: istore_1
      36: iload_1
      37: iconst_2
      38: invokestatic  #212                // Method scala/runtime/Statics.finalizeHash:(II)I
      41: ireturn

  public java.lang.String toString();
    Code:
       0: getstatic     #191                // Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
       3: aload_0
       4: invokevirtual #216                // Method scala/runtime/ScalaRunTime$._toString:(Lscala/Product;)Ljava/lang/String;
       7: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpeq     66
       5: aload_1
       6: astore_2
       7: aload_2
       8: instanceof    #2                  // class zio/config/PropertyTree$Leaf
      11: ifeq          19
      14: iconst_1
      15: istore_3
      16: goto          21
      19: iconst_0
      20: istore_3
      21: iload_3
      22: ifeq          70
      25: aload_1
      26: checkcast     #2                  // class zio/config/PropertyTree$Leaf
      29: astore        4
      31: aload_0
      32: invokevirtual #154                // Method value:()Ljava/lang/Object;
      35: aload         4
      37: invokevirtual #154                // Method value:()Ljava/lang/Object;
      40: invokestatic  #220                // Method scala/runtime/BoxesRunTime.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z
      43: ifeq          62
      46: aload_0
      47: invokevirtual #157                // Method canBeSequence:()Z
      50: aload         4
      52: invokevirtual #157                // Method canBeSequence:()Z
      55: if_icmpne     62
      58: iconst_1
      59: goto          63
      62: iconst_0
      63: ifeq          70
      66: iconst_1
      67: goto          71
      70: iconst_0
      71: ireturn

  public zio.config.PropertyTree$Leaf(V, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #143                // Field value:Ljava/lang/Object;
       5: aload_0
       6: iload_2
       7: putfield      #145                // Field canBeSequence:Z
      10: aload_0
      11: invokespecial #223                // Method java/lang/Object."<init>":()V
      14: aload_0
      15: invokestatic  #227                // Method zio/config/PropertyTree$class.$init$:(Lzio/config/PropertyTree;)V
      18: aload_0
      19: invokestatic  #232                // Method scala/Product$class.$init$:(Lscala/Product;)V
      22: return
}
