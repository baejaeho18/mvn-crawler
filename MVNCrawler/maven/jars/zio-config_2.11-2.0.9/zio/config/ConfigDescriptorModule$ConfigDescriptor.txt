Compiled from "ConfigDescriptorModule.scala"
public interface zio.config.ConfigDescriptorModule$ConfigDescriptor<A> {
  public abstract <B> zio.config.ConfigDescriptorModule$ConfigDescriptor<B> apply(scala.Function1<A, B>, scala.Function1<B, scala.Option<A>>);

  public abstract <B extends scala.Product> zio.config.ConfigDescriptorModule$ConfigDescriptor<B> to(zio.config.TupleConversion<B, A>);

  public abstract zio.config.ConfigDescriptorModule$ConfigDescriptor<A> $qmark$qmark(java.lang.String);

  public abstract <B, C> zio.config.ConfigDescriptorModule$ConfigDescriptor<C> zip(scala.Function0<zio.config.ConfigDescriptorModule$ConfigDescriptor<B>>, zio.config.InvariantZip<A, B>);

  public abstract zio.config.ConfigDescriptorModule$ConfigDescriptor<A> $less$greater(scala.Function0<zio.config.ConfigDescriptorModule$ConfigDescriptor<A>>);

  public abstract <B> zio.config.ConfigDescriptorModule$ConfigDescriptor<scala.Tuple2<A, B>> $less$times$greater(scala.Function0<zio.config.ConfigDescriptorModule$ConfigDescriptor<B>>);

  public abstract <B> zio.config.ConfigDescriptorModule$ConfigDescriptor<scala.util.Either<A, B>> $less$plus$greater(scala.Function0<zio.config.ConfigDescriptorModule$ConfigDescriptor<B>>);

  public abstract zio.config.ConfigDescriptorModule$ConfigDescriptor<A> default(A);

  public abstract zio.config.ConfigDescriptorModule$ConfigDescriptor<A> describe(java.lang.String);

  public abstract zio.config.ConfigDescriptorModule$ConfigDescriptor<A> from(zio.config.ConfigSourceModule$ConfigSource);

  public abstract <B> zio.config.ConfigDescriptorModule$ConfigDescriptor<B> map(scala.Function1<A, B>);

  public abstract <B> zio.config.ConfigDescriptorModule$ConfigDescriptor<B> mapEither(scala.Function1<A, scala.util.Either<java.lang.String, B>>);

  public abstract zio.config.ConfigDescriptorModule$ConfigDescriptor<A> mapKey(scala.Function1<java.lang.String, java.lang.String>);

  public abstract zio.config.ConfigDescriptorModule$ConfigDescriptor<scala.Option<A>> optional();

  public abstract zio.config.ConfigDescriptorModule$ConfigDescriptor<A> orElse(scala.Function0<zio.config.ConfigDescriptorModule$ConfigDescriptor<A>>);

  public abstract <B> zio.config.ConfigDescriptorModule$ConfigDescriptor<scala.util.Either<A, B>> orElseEither(scala.Function0<zio.config.ConfigDescriptorModule$ConfigDescriptor<B>>);

  public abstract zio.config.ConfigDescriptorModule$ConfigDescriptor<A> unsourced();

  public abstract zio.config.ConfigDescriptorModule$ConfigDescriptor<A> updateSource(scala.Function1<zio.config.ConfigSourceModule$ConfigSource, zio.config.ConfigSourceModule$ConfigSource>);

  public abstract scala.collection.immutable.Set<zio.config.ConfigSourceModule$ConfigSource> sources();

  public abstract <B> zio.config.ConfigDescriptorModule$ConfigDescriptor<B> transform(scala.Function1<A, B>, scala.Function1<B, A>);

  public abstract <B> zio.config.ConfigDescriptorModule$ConfigDescriptor<B> transformOrFail(scala.Function1<A, scala.util.Either<java.lang.String, B>>, scala.Function1<B, scala.util.Either<java.lang.String, A>>);

  public abstract <B> zio.config.ConfigDescriptorModule$ConfigDescriptor<B> transformOrFailLeft(scala.Function1<A, scala.util.Either<java.lang.String, B>>, scala.Function1<B, A>);

  public abstract <B> zio.config.ConfigDescriptorModule$ConfigDescriptor<B> transformOrFailRight(scala.Function1<A, B>, scala.Function1<B, scala.util.Either<java.lang.String, A>>);

  public abstract <B, Out, C> zio.config.ConfigDescriptorModule$ConfigDescriptor<C> zipWith(scala.Function0<zio.config.ConfigDescriptorModule$ConfigDescriptor<B>>, scala.Function1<Out, scala.util.Either<java.lang.String, C>>, scala.Function1<C, scala.util.Either<java.lang.String, Out>>, zio.config.InvariantZip<A, B>);

  public abstract zio.config.ConfigDescriptorModule zio$config$ConfigDescriptorModule$ConfigDescriptor$$$outer();
}
