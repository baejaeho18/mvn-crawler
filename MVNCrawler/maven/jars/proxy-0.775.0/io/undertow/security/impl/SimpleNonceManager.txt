Compiled from "SimpleNonceManager.java"
public class io.undertow.security.impl.SimpleNonceManager implements io.undertow.security.api.SessionNonceManager {
  private static final java.lang.String DEFAULT_HASH_ALG;

  private final java.util.Set<java.lang.String> invalidNonces;

  private final java.util.Map<java.lang.String, io.undertow.security.impl.SimpleNonceManager$Nonce> knownNonces;

  private final java.util.Map<io.undertow.security.impl.SimpleNonceManager$NonceHolder, java.lang.String> forwardMapping;

  private final java.lang.String secret;

  private final java.lang.String hashAlg;

  private final int hashLength;

  private static final long firstUseTimeOut;

  private static final long overallTimeOut;

  private static final java.util.Random rand;

  private static final long cacheTimePostExpiry;

  public io.undertow.security.impl.SimpleNonceManager();
    Code:
       0: aload_0
       1: ldc           #2                  // String MD5
       3: invokespecial #3                  // Method "<init>":(Ljava/lang/String;)V
       6: return

  public io.undertow.security.impl.SimpleNonceManager(java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #4                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #5                  // class java/util/HashSet
       8: dup
       9: invokespecial #6                  // Method java/util/HashSet."<init>":()V
      12: invokestatic  #7                  // Method java/util/Collections.synchronizedSet:(Ljava/util/Set;)Ljava/util/Set;
      15: putfield      #8                  // Field invalidNonces:Ljava/util/Set;
      18: aload_0
      19: new           #9                  // class java/util/HashMap
      22: dup
      23: invokespecial #10                 // Method java/util/HashMap."<init>":()V
      26: invokestatic  #11                 // Method java/util/Collections.synchronizedMap:(Ljava/util/Map;)Ljava/util/Map;
      29: putfield      #12                 // Field knownNonces:Ljava/util/Map;
      32: aload_0
      33: new           #13                 // class java/util/WeakHashMap
      36: dup
      37: invokespecial #14                 // Method java/util/WeakHashMap."<init>":()V
      40: invokestatic  #11                 // Method java/util/Collections.synchronizedMap:(Ljava/util/Map;)Ljava/util/Map;
      43: putfield      #15                 // Field forwardMapping:Ljava/util/Map;
      46: aload_0
      47: aload_1
      48: invokevirtual #16                 // Method getDigest:(Ljava/lang/String;)Ljava/security/MessageDigest;
      51: astore_2
      52: aload_0
      53: aload_1
      54: putfield      #17                 // Field hashAlg:Ljava/lang/String;
      57: aload_0
      58: aload_2
      59: invokevirtual #18                 // Method java/security/MessageDigest.getDigestLength:()I
      62: putfield      #19                 // Field hashLength:I
      65: bipush        32
      67: newarray       byte
      69: astore_3
      70: getstatic     #20                 // Field rand:Ljava/util/Random;
      73: aload_3
      74: invokevirtual #21                 // Method java/util/Random.nextBytes:([B)V
      77: aload_0
      78: aload_2
      79: aload_3
      80: invokevirtual #22                 // Method java/security/MessageDigest.digest:([B)[B
      83: iconst_0
      84: invokestatic  #23                 // Method io/undertow/util/FlexBase64.encodeString:([BZ)Ljava/lang/String;
      87: putfield      #24                 // Field secret:Ljava/lang/String;
      90: return

  private java.security.MessageDigest getDigest(java.lang.String);
    Code:
       0: aload_1
       1: invokestatic  #25                 // Method java/security/MessageDigest.getInstance:(Ljava/lang/String;)Ljava/security/MessageDigest;
       4: areturn
       5: astore_2
       6: getstatic     #27                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
       9: aload_1
      10: invokeinterface #28,  2           // InterfaceMethod io/undertow/UndertowMessages.hashAlgorithmNotFound:(Ljava/lang/String;)Ljava/lang/IllegalArgumentException;
      15: athrow
    Exception table:
       from    to  target type
           0     4     5   Class java/security/NoSuchAlgorithmException

  public java.lang.String nextNonce(java.lang.String, io.undertow.server.HttpServerExchange);
    Code:
       0: aload_1
       1: ifnonnull     9
       4: aload_0
       5: invokevirtual #29                 // Method createNewNonceString:()Ljava/lang/String;
       8: areturn
       9: aload_0
      10: getfield      #8                  // Field invalidNonces:Ljava/util/Set;
      13: aload_1
      14: invokeinterface #30,  2           // InterfaceMethod java/util/Set.contains:(Ljava/lang/Object;)Z
      19: ifeq          27
      22: aload_0
      23: invokevirtual #29                 // Method createNewNonceString:()Ljava/lang/String;
      26: areturn
      27: aload_1
      28: astore_3
      29: aload_0
      30: getfield      #15                 // Field forwardMapping:Ljava/util/Map;
      33: dup
      34: astore        4
      36: monitorenter
      37: new           #31                 // class io/undertow/security/impl/SimpleNonceManager$NonceHolder
      40: dup
      41: aload_1
      42: invokespecial #32                 // Method io/undertow/security/impl/SimpleNonceManager$NonceHolder."<init>":(Ljava/lang/String;)V
      45: astore        5
      47: aload_0
      48: getfield      #15                 // Field forwardMapping:Ljava/util/Map;
      51: aload         5
      53: invokeinterface #33,  2           // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
      58: ifeq          89
      61: aload_0
      62: getfield      #15                 // Field forwardMapping:Ljava/util/Map;
      65: aload         5
      67: invokeinterface #34,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      72: checkcast     #35                 // class java/lang/String
      75: astore_3
      76: new           #31                 // class io/undertow/security/impl/SimpleNonceManager$NonceHolder
      79: dup
      80: aload_3
      81: invokespecial #32                 // Method io/undertow/security/impl/SimpleNonceManager$NonceHolder."<init>":(Ljava/lang/String;)V
      84: astore        5
      86: goto          47
      89: aload_0
      90: getfield      #12                 // Field knownNonces:Ljava/util/Map;
      93: dup
      94: astore        6
      96: monitorenter
      97: aload_0
      98: getfield      #12                 // Field knownNonces:Ljava/util/Map;
     101: aload_3
     102: invokeinterface #34,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
     107: checkcast     #36                 // class io/undertow/security/impl/SimpleNonceManager$Nonce
     110: astore        7
     112: aload         7
     114: ifnonnull     125
     117: aload_0
     118: invokevirtual #29                 // Method createNewNonceString:()Ljava/lang/String;
     121: astore_3
     122: goto          288
     125: invokestatic  #37                 // Method java/lang/System.currentTimeMillis:()J
     128: lstore        8
     130: lload         8
     132: ldc2_w        #38                 // long 300000l
     135: lsub
     136: lstore        10
     138: aload         7
     140: getfield      #40                 // Field io/undertow/security/impl/SimpleNonceManager$Nonce.timeStamp:J
     143: lload         10
     145: lcmp
     146: iflt          160
     149: aload         7
     151: getfield      #40                 // Field io/undertow/security/impl/SimpleNonceManager$Nonce.timeStamp:J
     154: lload         8
     156: lcmp
     157: ifle          288
     160: aload_0
     161: aload         5
     163: invokevirtual #41                 // Method createNewNonce:(Lio/undertow/security/impl/SimpleNonceManager$NonceHolder;)Lio/undertow/security/impl/SimpleNonceManager$Nonce;
     166: astore        12
     168: aload         7
     170: getfield      #42                 // Field io/undertow/security/impl/SimpleNonceManager$Nonce.executorKey:Lorg/xnio/XnioExecutor$Key;
     173: ifnull        187
     176: aload         7
     178: getfield      #42                 // Field io/undertow/security/impl/SimpleNonceManager$Nonce.executorKey:Lorg/xnio/XnioExecutor$Key;
     181: invokeinterface #43,  1           // InterfaceMethod org/xnio/XnioExecutor$Key.remove:()Z
     186: pop
     187: aload         12
     189: getfield      #44                 // Field io/undertow/security/impl/SimpleNonceManager$Nonce.nonce:Ljava/lang/String;
     192: astore_3
     193: aload_0
     194: getfield      #15                 // Field forwardMapping:Ljava/util/Map;
     197: aload         5
     199: aload_3
     200: invokeinterface #45,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     205: pop
     206: aload         12
     208: aload         7
     210: invokevirtual #46                 // Method io/undertow/security/impl/SimpleNonceManager$Nonce.getSessionKey:()[B
     213: invokevirtual #47                 // Method io/undertow/security/impl/SimpleNonceManager$Nonce.setSessionKey:([B)V
     216: aload_0
     217: getfield      #12                 // Field knownNonces:Ljava/util/Map;
     220: aload         5
     222: getfield      #48                 // Field io/undertow/security/impl/SimpleNonceManager$NonceHolder.nonce:Ljava/lang/String;
     225: invokeinterface #49,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
     230: pop
     231: aload_0
     232: getfield      #12                 // Field knownNonces:Ljava/util/Map;
     235: aload_3
     236: aload         12
     238: invokeinterface #45,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     243: pop
     244: lload         8
     246: ldc2_w        #50                 // long 1200000l
     249: lsub
     250: lstore        10
     252: aload         12
     254: getfield      #40                 // Field io/undertow/security/impl/SimpleNonceManager$Nonce.timeStamp:J
     257: lload         10
     259: lsub
     260: lstore        13
     262: aload         12
     264: aload_2
     265: invokevirtual #52                 // Method io/undertow/server/HttpServerExchange.getIoThread:()Lorg/xnio/XnioIoThread;
     268: new           #53                 // class io/undertow/security/impl/SimpleNonceManager$KnownNonceCleaner
     271: dup
     272: aload_0
     273: aload_3
     274: invokespecial #54                 // Method io/undertow/security/impl/SimpleNonceManager$KnownNonceCleaner."<init>":(Lio/undertow/security/impl/SimpleNonceManager;Ljava/lang/String;)V
     277: lload         13
     279: getstatic     #55                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
     282: invokestatic  #56                 // Method io/undertow/util/WorkerUtils.executeAfter:(Lorg/xnio/XnioIoThread;Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lorg/xnio/XnioExecutor$Key;
     285: putfield      #42                 // Field io/undertow/security/impl/SimpleNonceManager$Nonce.executorKey:Lorg/xnio/XnioExecutor$Key;
     288: aload         6
     290: monitorexit
     291: goto          302
     294: astore        15
     296: aload         6
     298: monitorexit
     299: aload         15
     301: athrow
     302: aload         4
     304: monitorexit
     305: goto          316
     308: astore        16
     310: aload         4
     312: monitorexit
     313: aload         16
     315: athrow
     316: aload_3
     317: areturn
    Exception table:
       from    to  target type
          97   291   294   any
         294   299   294   any
          37   305   308   any
         308   313   308   any

  private java.lang.String createNewNonceString();
    Code:
       0: aload_0
       1: aconst_null
       2: invokevirtual #41                 // Method createNewNonce:(Lio/undertow/security/impl/SimpleNonceManager$NonceHolder;)Lio/undertow/security/impl/SimpleNonceManager$Nonce;
       5: getfield      #44                 // Field io/undertow/security/impl/SimpleNonceManager$Nonce.nonce:Ljava/lang/String;
       8: areturn

  private io.undertow.security.impl.SimpleNonceManager$Nonce createNewNonce(io.undertow.security.impl.SimpleNonceManager$NonceHolder);
    Code:
       0: bipush        8
       2: newarray       byte
       4: astore_2
       5: invokestatic  #57                 // Method java/util/concurrent/ThreadLocalRandom.current:()Ljava/util/concurrent/ThreadLocalRandom;
       8: aload_2
       9: invokevirtual #58                 // Method java/util/concurrent/ThreadLocalRandom.nextBytes:([B)V
      12: invokestatic  #37                 // Method java/lang/System.currentTimeMillis:()J
      15: lstore_3
      16: lload_3
      17: invokestatic  #59                 // Method java/lang/Long.toString:(J)Ljava/lang/String;
      20: getstatic     #60                 // Field java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;
      23: invokevirtual #61                 // Method java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B
      26: astore        5
      28: aload_0
      29: aload_2
      30: aload         5
      32: invokevirtual #62                 // Method createNonce:([B[B)Ljava/lang/String;
      35: astore        6
      37: new           #36                 // class io/undertow/security/impl/SimpleNonceManager$Nonce
      40: dup
      41: aload         6
      43: lload_3
      44: aload_1
      45: invokespecial #63                 // Method io/undertow/security/impl/SimpleNonceManager$Nonce."<init>":(Ljava/lang/String;JLio/undertow/security/impl/SimpleNonceManager$NonceHolder;)V
      48: areturn

  public boolean validateNonce(java.lang.String, int, io.undertow.server.HttpServerExchange);
    Code:
       0: iload_2
       1: ifge          19
       4: aload_0
       5: getfield      #8                  // Field invalidNonces:Ljava/util/Set;
       8: aload_1
       9: invokeinterface #30,  2           // InterfaceMethod java/util/Set.contains:(Ljava/lang/Object;)Z
      14: ifeq          72
      17: iconst_0
      18: ireturn
      19: aload_0
      20: getfield      #12                 // Field knownNonces:Ljava/util/Map;
      23: aload_1
      24: invokeinterface #33,  2           // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
      29: ifeq          50
      32: aload_0
      33: new           #36                 // class io/undertow/security/impl/SimpleNonceManager$Nonce
      36: dup
      37: aload_1
      38: invokespecial #64                 // Method io/undertow/security/impl/SimpleNonceManager$Nonce."<init>":(Ljava/lang/String;)V
      41: iload_2
      42: aload_3
      43: invokevirtual #52                 // Method io/undertow/server/HttpServerExchange.getIoThread:()Lorg/xnio/XnioIoThread;
      46: invokevirtual #65                 // Method validateNonceWithCount:(Lio/undertow/security/impl/SimpleNonceManager$Nonce;ILorg/xnio/XnioIoThread;)Z
      49: ireturn
      50: aload_0
      51: getfield      #15                 // Field forwardMapping:Ljava/util/Map;
      54: new           #31                 // class io/undertow/security/impl/SimpleNonceManager$NonceHolder
      57: dup
      58: aload_1
      59: invokespecial #32                 // Method io/undertow/security/impl/SimpleNonceManager$NonceHolder."<init>":(Ljava/lang/String;)V
      62: invokeinterface #33,  2           // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
      67: ifeq          72
      70: iconst_0
      71: ireturn
      72: aload_0
      73: aload_1
      74: iload_2
      75: invokevirtual #66                 // Method verifyUnknownNonce:(Ljava/lang/String;I)Lio/undertow/security/impl/SimpleNonceManager$Nonce;
      78: astore        4
      80: aload         4
      82: ifnonnull     87
      85: iconst_0
      86: ireturn
      87: invokestatic  #37                 // Method java/lang/System.currentTimeMillis:()J
      90: lstore        5
      92: lload         5
      94: ldc2_w        #38                 // long 300000l
      97: lsub
      98: lstore        7
     100: aload         4
     102: getfield      #40                 // Field io/undertow/security/impl/SimpleNonceManager$Nonce.timeStamp:J
     105: lload         7
     107: lcmp
     108: iflt          122
     111: aload         4
     113: getfield      #40                 // Field io/undertow/security/impl/SimpleNonceManager$Nonce.timeStamp:J
     116: lload         5
     118: lcmp
     119: ifle          124
     122: iconst_0
     123: ireturn
     124: iload_2
     125: ifge          139
     128: aload_0
     129: aload         4
     131: aload_3
     132: invokevirtual #52                 // Method io/undertow/server/HttpServerExchange.getIoThread:()Lorg/xnio/XnioIoThread;
     135: invokevirtual #67                 // Method addInvalidNonce:(Lio/undertow/security/impl/SimpleNonceManager$Nonce;Lorg/xnio/XnioExecutor;)Z
     138: ireturn
     139: aload_0
     140: aload         4
     142: iload_2
     143: aload_3
     144: invokevirtual #52                 // Method io/undertow/server/HttpServerExchange.getIoThread:()Lorg/xnio/XnioIoThread;
     147: invokevirtual #65                 // Method validateNonceWithCount:(Lio/undertow/security/impl/SimpleNonceManager$Nonce;ILorg/xnio/XnioIoThread;)Z
     150: ireturn

  private boolean validateNonceWithCount(io.undertow.security.impl.SimpleNonceManager$Nonce, int, org.xnio.XnioIoThread);
    Code:
       0: aload_0
       1: getfield      #12                 // Field knownNonces:Ljava/util/Map;
       4: dup
       5: astore        4
       7: monitorenter
       8: aload_0
       9: getfield      #12                 // Field knownNonces:Ljava/util/Map;
      12: aload_1
      13: getfield      #44                 // Field io/undertow/security/impl/SimpleNonceManager$Nonce.nonce:Ljava/lang/String;
      16: invokeinterface #34,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      21: checkcast     #36                 // class io/undertow/security/impl/SimpleNonceManager$Nonce
      24: astore        5
      26: invokestatic  #37                 // Method java/lang/System.currentTimeMillis:()J
      29: lstore        6
      31: lload         6
      33: ldc2_w        #50                 // long 1200000l
      36: lsub
      37: lstore        8
      39: aload         5
      41: ifnonnull     137
      44: aload_1
      45: getfield      #40                 // Field io/undertow/security/impl/SimpleNonceManager$Nonce.timeStamp:J
      48: lconst_0
      49: lcmp
      50: ifge          58
      53: iconst_0
      54: aload         4
      56: monitorexit
      57: ireturn
      58: aload_1
      59: getfield      #40                 // Field io/undertow/security/impl/SimpleNonceManager$Nonce.timeStamp:J
      62: lload         8
      64: lcmp
      65: ifle          132
      68: aload_1
      69: getfield      #40                 // Field io/undertow/security/impl/SimpleNonceManager$Nonce.timeStamp:J
      72: lload         6
      74: lcmp
      75: ifgt          132
      78: aload_0
      79: getfield      #12                 // Field knownNonces:Ljava/util/Map;
      82: aload_1
      83: getfield      #44                 // Field io/undertow/security/impl/SimpleNonceManager$Nonce.nonce:Ljava/lang/String;
      86: aload_1
      87: invokeinterface #45,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      92: pop
      93: aload_1
      94: getfield      #40                 // Field io/undertow/security/impl/SimpleNonceManager$Nonce.timeStamp:J
      97: lload         8
      99: lsub
     100: lstore        10
     102: aload_1
     103: aload_3
     104: new           #53                 // class io/undertow/security/impl/SimpleNonceManager$KnownNonceCleaner
     107: dup
     108: aload_0
     109: aload_1
     110: getfield      #44                 // Field io/undertow/security/impl/SimpleNonceManager$Nonce.nonce:Ljava/lang/String;
     113: invokespecial #54                 // Method io/undertow/security/impl/SimpleNonceManager$KnownNonceCleaner."<init>":(Lio/undertow/security/impl/SimpleNonceManager;Ljava/lang/String;)V
     116: lload         10
     118: getstatic     #55                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
     121: invokestatic  #56                 // Method io/undertow/util/WorkerUtils.executeAfter:(Lorg/xnio/XnioIoThread;Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lorg/xnio/XnioExecutor$Key;
     124: putfield      #42                 // Field io/undertow/security/impl/SimpleNonceManager$Nonce.executorKey:Lorg/xnio/XnioExecutor$Key;
     127: iconst_1
     128: aload         4
     130: monitorexit
     131: ireturn
     132: iconst_0
     133: aload         4
     135: monitorexit
     136: ireturn
     137: aload         5
     139: getfield      #40                 // Field io/undertow/security/impl/SimpleNonceManager$Nonce.timeStamp:J
     142: lload         8
     144: lcmp
     145: iflt          159
     148: aload         5
     150: getfield      #40                 // Field io/undertow/security/impl/SimpleNonceManager$Nonce.timeStamp:J
     153: lload         6
     155: lcmp
     156: ifle          164
     159: iconst_0
     160: aload         4
     162: monitorexit
     163: ireturn
     164: aload         5
     166: invokevirtual #68                 // Method io/undertow/security/impl/SimpleNonceManager$Nonce.getMaxNonceCount:()I
     169: iload_2
     170: if_icmpge     184
     173: aload         5
     175: iload_2
     176: invokevirtual #69                 // Method io/undertow/security/impl/SimpleNonceManager$Nonce.setMaxNonceCount:(I)V
     179: iconst_1
     180: aload         4
     182: monitorexit
     183: ireturn
     184: iconst_0
     185: aload         4
     187: monitorexit
     188: ireturn
     189: astore        12
     191: aload         4
     193: monitorexit
     194: aload         12
     196: athrow
    Exception table:
       from    to  target type
           8    57   189   any
          58   131   189   any
         132   136   189   any
         137   163   189   any
         164   183   189   any
         184   188   189   any
         189   194   189   any

  private boolean addInvalidNonce(io.undertow.security.impl.SimpleNonceManager$Nonce, org.xnio.XnioExecutor);
    Code:
       0: invokestatic  #37                 // Method java/lang/System.currentTimeMillis:()J
       3: lstore_3
       4: lload_3
       5: ldc2_w        #38                 // long 300000l
       8: lsub
       9: lstore        5
      11: aload_1
      12: getfield      #40                 // Field io/undertow/security/impl/SimpleNonceManager$Nonce.timeStamp:J
      15: lload         5
      17: lsub
      18: lstore        7
      20: lload         7
      22: lconst_0
      23: lcmp
      24: ifle          71
      27: aload_0
      28: getfield      #8                  // Field invalidNonces:Ljava/util/Set;
      31: aload_1
      32: getfield      #44                 // Field io/undertow/security/impl/SimpleNonceManager$Nonce.nonce:Ljava/lang/String;
      35: invokeinterface #70,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      40: ifeq          69
      43: aload_2
      44: new           #71                 // class io/undertow/security/impl/SimpleNonceManager$InvalidNonceCleaner
      47: dup
      48: aload_0
      49: aload_1
      50: getfield      #44                 // Field io/undertow/security/impl/SimpleNonceManager$Nonce.nonce:Ljava/lang/String;
      53: invokespecial #72                 // Method io/undertow/security/impl/SimpleNonceManager$InvalidNonceCleaner."<init>":(Lio/undertow/security/impl/SimpleNonceManager;Ljava/lang/String;)V
      56: lload         7
      58: getstatic     #55                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      61: invokeinterface #73,  5           // InterfaceMethod org/xnio/XnioExecutor.executeAfter:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lorg/xnio/XnioExecutor$Key;
      66: pop
      67: iconst_1
      68: ireturn
      69: iconst_0
      70: ireturn
      71: iconst_0
      72: ireturn

  private io.undertow.security.impl.SimpleNonceManager$Nonce verifyUnknownNonce(java.lang.String, int);
    Code:
       0: aload_1
       1: invokestatic  #74                 // Method io/undertow/util/FlexBase64.decode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;
       4: astore        6
       6: aload         6
       8: invokevirtual #75                 // Method java/nio/ByteBuffer.array:()[B
      11: astore_3
      12: aload         6
      14: invokevirtual #76                 // Method java/nio/ByteBuffer.arrayOffset:()I
      17: istore        4
      19: aload         6
      21: invokevirtual #77                 // Method java/nio/ByteBuffer.limit:()I
      24: iload         4
      26: isub
      27: istore        5
      29: goto          45
      32: astore        6
      34: getstatic     #27                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      37: aload         6
      39: invokeinterface #79,  2           // InterfaceMethod io/undertow/UndertowMessages.invalidBase64Token:(Ljava/io/IOException;)Ljava/lang/IllegalArgumentException;
      44: athrow
      45: aload_3
      46: iload         4
      48: bipush        8
      50: iadd
      51: baload
      52: istore        6
      54: aload_0
      55: getfield      #19                 // Field hashLength:I
      58: ifle          107
      61: bipush        9
      63: iload         6
      65: iadd
      66: aload_0
      67: getfield      #19                 // Field hashLength:I
      70: iadd
      71: istore        7
      73: iload         5
      75: iload         7
      77: if_icmpeq     89
      80: getstatic     #27                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      83: invokeinterface #80,  1           // InterfaceMethod io/undertow/UndertowMessages.invalidNonceReceived:()Ljava/lang/IllegalArgumentException;
      88: athrow
      89: iload         6
      91: iconst_1
      92: iadd
      93: iload         5
      95: if_icmplt     107
      98: getstatic     #27                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
     101: invokeinterface #80,  1           // InterfaceMethod io/undertow/UndertowMessages.invalidNonceReceived:()Ljava/lang/IllegalArgumentException;
     106: athrow
     107: bipush        8
     109: newarray       byte
     111: astore        7
     113: aload_3
     114: iload         4
     116: aload         7
     118: iconst_0
     119: bipush        8
     121: invokestatic  #81                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
     124: iload         6
     126: newarray       byte
     128: astore        8
     130: aload_3
     131: iload         4
     133: bipush        9
     135: iadd
     136: aload         8
     138: iconst_0
     139: aload         8
     141: arraylength
     142: invokestatic  #81                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
     145: aload_0
     146: aload         7
     148: aload         8
     150: invokevirtual #62                 // Method createNonce:([B[B)Ljava/lang/String;
     153: astore        9
     155: aload         9
     157: aload_1
     158: invokevirtual #82                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     161: ifeq          196
     164: new           #35                 // class java/lang/String
     167: dup
     168: aload         8
     170: getstatic     #60                 // Field java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;
     173: invokespecial #83                 // Method java/lang/String."<init>":([BLjava/nio/charset/Charset;)V
     176: invokestatic  #84                 // Method java/lang/Long.parseLong:(Ljava/lang/String;)J
     179: lstore        10
     181: new           #36                 // class io/undertow/security/impl/SimpleNonceManager$Nonce
     184: dup
     185: aload         9
     187: lload         10
     189: iload_2
     190: invokespecial #85                 // Method io/undertow/security/impl/SimpleNonceManager$Nonce."<init>":(Ljava/lang/String;JI)V
     193: areturn
     194: astore        10
     196: aconst_null
     197: areturn
    Exception table:
       from    to  target type
           0    29    32   Class java/io/IOException
         164   193   194   Class java/lang/NumberFormatException

  private java.lang.String createNonce(byte[], byte[]);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #87                 // Method generateHash:([B[B)[B
       6: astore_3
       7: bipush        9
       9: aload_2
      10: arraylength
      11: iadd
      12: aload_3
      13: arraylength
      14: iadd
      15: newarray       byte
      17: astore        4
      19: aload_1
      20: iconst_0
      21: aload         4
      23: iconst_0
      24: bipush        8
      26: invokestatic  #81                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      29: aload         4
      31: bipush        8
      33: aload_2
      34: arraylength
      35: i2b
      36: bastore
      37: aload_2
      38: iconst_0
      39: aload         4
      41: bipush        9
      43: aload_2
      44: arraylength
      45: invokestatic  #81                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      48: aload_3
      49: iconst_0
      50: aload         4
      52: bipush        9
      54: aload_2
      55: arraylength
      56: iadd
      57: aload_3
      58: arraylength
      59: invokestatic  #81                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      62: aload         4
      64: iconst_0
      65: invokestatic  #23                 // Method io/undertow/util/FlexBase64.encodeString:([BZ)Ljava/lang/String;
      68: areturn

  private byte[] generateHash(byte[], byte[]);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #17                 // Field hashAlg:Ljava/lang/String;
       5: invokevirtual #16                 // Method getDigest:(Ljava/lang/String;)Ljava/security/MessageDigest;
       8: astore_3
       9: aload_3
      10: aload_1
      11: invokevirtual #88                 // Method java/security/MessageDigest.update:([B)V
      14: aload_3
      15: aload_2
      16: invokevirtual #88                 // Method java/security/MessageDigest.update:([B)V
      19: aload_3
      20: aload_0
      21: getfield      #24                 // Field secret:Ljava/lang/String;
      24: getstatic     #60                 // Field java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;
      27: invokevirtual #61                 // Method java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B
      30: invokevirtual #22                 // Method java/security/MessageDigest.digest:([B)[B
      33: areturn

  public void associateHash(java.lang.String, byte[]);
    Code:
       0: return

  public byte[] lookupHash(java.lang.String);
    Code:
       0: aconst_null
       1: areturn

  static {};
    Code:
       0: new           #89                 // class java/security/SecureRandom
       3: dup
       4: invokespecial #90                 // Method java/security/SecureRandom."<init>":()V
       7: putstatic     #20                 // Field rand:Ljava/util/Random;
      10: return
}
