Compiled from "Http2FramePriority.java"
class io.undertow.protocols.http2.Http2FramePriority implements io.undertow.server.protocol.framed.FramePriority<io.undertow.protocols.http2.Http2Channel, io.undertow.protocols.http2.AbstractHttp2StreamSourceChannel, io.undertow.protocols.http2.AbstractHttp2StreamSinkChannel> {
  private int nextId;

  io.undertow.protocols.http2.Http2FramePriority(int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iload_1
       6: putfield      #2                  // Field nextId:I
       9: return

  public boolean insertFrame(io.undertow.protocols.http2.AbstractHttp2StreamSinkChannel, java.util.List<io.undertow.protocols.http2.AbstractHttp2StreamSinkChannel>);
    Code:
       0: iconst_0
       1: istore_3
       2: aload_1
       3: invokevirtual #3                  // Method io/undertow/protocols/http2/AbstractHttp2StreamSinkChannel.getChannel:()Lio/undertow/server/protocol/framed/AbstractFramedChannel;
       6: checkcast     #4                  // class io/undertow/protocols/http2/Http2Channel
       9: invokevirtual #5                  // Method io/undertow/protocols/http2/Http2Channel.isClient:()Z
      12: ifeq          22
      15: aload_1
      16: instanceof    #6                  // class io/undertow/protocols/http2/Http2HeadersStreamSinkChannel
      19: ifne          29
      22: aload_1
      23: instanceof    #7                  // class io/undertow/protocols/http2/Http2PushPromiseStreamSinkChannel
      26: ifeq          101
      29: aload_1
      30: instanceof    #7                  // class io/undertow/protocols/http2/Http2PushPromiseStreamSinkChannel
      33: ifeq          70
      36: aload_1
      37: checkcast     #7                  // class io/undertow/protocols/http2/Http2PushPromiseStreamSinkChannel
      40: invokevirtual #8                  // Method io/undertow/protocols/http2/Http2PushPromiseStreamSinkChannel.getPushedStreamId:()I
      43: istore        4
      45: iload         4
      47: aload_0
      48: getfield      #2                  // Field nextId:I
      51: if_icmple     56
      54: iconst_0
      55: ireturn
      56: iload         4
      58: aload_0
      59: getfield      #2                  // Field nextId:I
      62: if_icmpne     67
      65: iconst_1
      66: istore_3
      67: goto          101
      70: aload_1
      71: checkcast     #6                  // class io/undertow/protocols/http2/Http2HeadersStreamSinkChannel
      74: invokevirtual #9                  // Method io/undertow/protocols/http2/Http2HeadersStreamSinkChannel.getStreamId:()I
      77: istore        4
      79: iload         4
      81: aload_0
      82: getfield      #2                  // Field nextId:I
      85: if_icmple     90
      88: iconst_0
      89: ireturn
      90: iload         4
      92: aload_0
      93: getfield      #2                  // Field nextId:I
      96: if_icmpne     101
      99: iconst_1
     100: istore_3
     101: aload_1
     102: instanceof    #10                 // class io/undertow/protocols/http2/Http2StreamSinkChannel
     105: ifeq          166
     108: aload_1
     109: invokevirtual #11                 // Method io/undertow/protocols/http2/AbstractHttp2StreamSinkChannel.isBroken:()Z
     112: ifne          122
     115: aload_1
     116: invokevirtual #12                 // Method io/undertow/protocols/http2/AbstractHttp2StreamSinkChannel.isOpen:()Z
     119: ifne          124
     122: iconst_1
     123: ireturn
     124: aload_1
     125: checkcast     #10                 // class io/undertow/protocols/http2/Http2StreamSinkChannel
     128: invokevirtual #13                 // Method io/undertow/protocols/http2/Http2StreamSinkChannel.generateSendFrameHeader:()Lio/undertow/server/protocol/framed/SendFrameHeader;
     131: astore        4
     133: aload         4
     135: invokevirtual #14                 // Method io/undertow/server/protocol/framed/SendFrameHeader.getByteBuffer:()Lio/undertow/connector/PooledByteBuffer;
     138: ifnonnull     150
     141: aload_1
     142: checkcast     #10                 // class io/undertow/protocols/http2/Http2StreamSinkChannel
     145: invokevirtual #15                 // Method io/undertow/protocols/http2/Http2StreamSinkChannel.clearHeader:()V
     148: iconst_0
     149: ireturn
     150: goto          166
     153: astore        4
     155: getstatic     #17                 // Field io/undertow/UndertowLogger.REQUEST_LOGGER:Lio/undertow/UndertowLogger;
     158: ldc           #18                 // String Failed to generate header %s
     160: aload_1
     161: invokeinterface #19,  3           // InterfaceMethod io/undertow/UndertowLogger.debugf:(Ljava/lang/String;Ljava/lang/Object;)V
     166: aload_2
     167: aload_1
     168: invokeinterface #20,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     173: pop
     174: iload_3
     175: ifeq          188
     178: aload_0
     179: dup
     180: getfield      #2                  // Field nextId:I
     183: iconst_2
     184: iadd
     185: putfield      #2                  // Field nextId:I
     188: iconst_1
     189: ireturn
    Exception table:
       from    to  target type
         124   149   153   Class java/lang/Exception

  public void frameAdded(io.undertow.protocols.http2.AbstractHttp2StreamSinkChannel, java.util.List<io.undertow.protocols.http2.AbstractHttp2StreamSinkChannel>, java.util.Deque<io.undertow.protocols.http2.AbstractHttp2StreamSinkChannel>);
    Code:
       0: aload_3
       1: invokeinterface #21,  1           // InterfaceMethod java/util/Deque.iterator:()Ljava/util/Iterator;
       6: astore        4
       8: aload         4
      10: invokeinterface #22,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      15: ifeq          221
      18: aload         4
      20: invokeinterface #23,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      25: checkcast     #24                 // class io/undertow/protocols/http2/AbstractHttp2StreamSinkChannel
      28: astore        5
      30: iconst_0
      31: istore        6
      33: aload         5
      35: invokevirtual #3                  // Method io/undertow/protocols/http2/AbstractHttp2StreamSinkChannel.getChannel:()Lio/undertow/server/protocol/framed/AbstractFramedChannel;
      38: checkcast     #4                  // class io/undertow/protocols/http2/Http2Channel
      41: invokevirtual #5                  // Method io/undertow/protocols/http2/Http2Channel.isClient:()Z
      44: ifeq          55
      47: aload         5
      49: instanceof    #6                  // class io/undertow/protocols/http2/Http2HeadersStreamSinkChannel
      52: ifne          63
      55: aload         5
      57: instanceof    #7                  // class io/undertow/protocols/http2/Http2PushPromiseStreamSinkChannel
      60: ifeq          142
      63: aload         5
      65: instanceof    #7                  // class io/undertow/protocols/http2/Http2PushPromiseStreamSinkChannel
      68: ifeq          108
      71: aload         5
      73: checkcast     #7                  // class io/undertow/protocols/http2/Http2PushPromiseStreamSinkChannel
      76: invokevirtual #8                  // Method io/undertow/protocols/http2/Http2PushPromiseStreamSinkChannel.getPushedStreamId:()I
      79: istore        7
      81: iload         7
      83: aload_0
      84: getfield      #2                  // Field nextId:I
      87: if_icmple     93
      90: goto          8
      93: iload         7
      95: aload_0
      96: getfield      #2                  // Field nextId:I
      99: if_icmpne     105
     102: iconst_1
     103: istore        6
     105: goto          142
     108: aload         5
     110: checkcast     #6                  // class io/undertow/protocols/http2/Http2HeadersStreamSinkChannel
     113: invokevirtual #9                  // Method io/undertow/protocols/http2/Http2HeadersStreamSinkChannel.getStreamId:()I
     116: istore        7
     118: iload         7
     120: aload_0
     121: getfield      #2                  // Field nextId:I
     124: if_icmple     130
     127: goto          8
     130: iload         7
     132: aload_0
     133: getfield      #2                  // Field nextId:I
     136: if_icmpne     142
     139: iconst_1
     140: istore        6
     142: aload         5
     144: instanceof    #10                 // class io/undertow/protocols/http2/Http2StreamSinkChannel
     147: ifeq          218
     150: aload         5
     152: checkcast     #10                 // class io/undertow/protocols/http2/Http2StreamSinkChannel
     155: invokevirtual #13                 // Method io/undertow/protocols/http2/Http2StreamSinkChannel.generateSendFrameHeader:()Lio/undertow/server/protocol/framed/SendFrameHeader;
     158: astore        7
     160: aload         7
     162: invokevirtual #14                 // Method io/undertow/server/protocol/framed/SendFrameHeader.getByteBuffer:()Lio/undertow/connector/PooledByteBuffer;
     165: ifnull        210
     168: aload_2
     169: aload         5
     171: invokeinterface #20,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     176: pop
     177: aload         4
     179: invokeinterface #25,  1           // InterfaceMethod java/util/Iterator.remove:()V
     184: aload_3
     185: invokeinterface #21,  1           // InterfaceMethod java/util/Deque.iterator:()Ljava/util/Iterator;
     190: astore        4
     192: iload         6
     194: ifeq          218
     197: aload_0
     198: dup
     199: getfield      #2                  // Field nextId:I
     202: iconst_2
     203: iadd
     204: putfield      #2                  // Field nextId:I
     207: goto          218
     210: aload         5
     212: checkcast     #10                 // class io/undertow/protocols/http2/Http2StreamSinkChannel
     215: invokevirtual #15                 // Method io/undertow/protocols/http2/Http2StreamSinkChannel.clearHeader:()V
     218: goto          8
     221: return

  public void frameAdded(io.undertow.server.protocol.framed.AbstractFramedStreamSinkChannel, java.util.List, java.util.Deque);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #24                 // class io/undertow/protocols/http2/AbstractHttp2StreamSinkChannel
       5: aload_2
       6: aload_3
       7: invokevirtual #26                 // Method frameAdded:(Lio/undertow/protocols/http2/AbstractHttp2StreamSinkChannel;Ljava/util/List;Ljava/util/Deque;)V
      10: return

  public boolean insertFrame(io.undertow.server.protocol.framed.AbstractFramedStreamSinkChannel, java.util.List);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #24                 // class io/undertow/protocols/http2/AbstractHttp2StreamSinkChannel
       5: aload_2
       6: invokevirtual #27                 // Method insertFrame:(Lio/undertow/protocols/http2/AbstractHttp2StreamSinkChannel;Ljava/util/List;)Z
       9: ireturn
}
