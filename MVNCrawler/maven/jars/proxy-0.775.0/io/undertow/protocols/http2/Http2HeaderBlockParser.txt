Compiled from "Http2HeaderBlockParser.java"
abstract class io.undertow.protocols.http2.Http2HeaderBlockParser extends io.undertow.protocols.http2.Http2PushBackParser implements io.undertow.protocols.http2.HpackDecoder$HeaderEmitter {
  private final io.undertow.util.HeaderMap headerMap;

  private boolean beforeHeadersHandled;

  private final io.undertow.protocols.http2.HpackDecoder decoder;

  private int frameRemaining;

  private boolean invalid;

  private boolean processingPseudoHeaders;

  private final boolean client;

  private final int maxHeaders;

  private final int maxHeaderListSize;

  private int currentPadding;

  private final int streamId;

  private int headerSize;

  private static final java.util.Set<io.undertow.util.HttpString> SERVER_HEADERS;

  io.undertow.protocols.http2.Http2HeaderBlockParser(int, io.undertow.protocols.http2.HpackDecoder, boolean, int, int, int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #1                  // Method io/undertow/protocols/http2/Http2PushBackParser."<init>":(I)V
       5: aload_0
       6: new           #2                  // class io/undertow/util/HeaderMap
       9: dup
      10: invokespecial #3                  // Method io/undertow/util/HeaderMap."<init>":()V
      13: putfield      #4                  // Field headerMap:Lio/undertow/util/HeaderMap;
      16: aload_0
      17: iconst_0
      18: putfield      #5                  // Field beforeHeadersHandled:Z
      21: aload_0
      22: iconst_m1
      23: putfield      #6                  // Field frameRemaining:I
      26: aload_0
      27: iconst_0
      28: putfield      #7                  // Field invalid:Z
      31: aload_0
      32: iconst_1
      33: putfield      #8                  // Field processingPseudoHeaders:Z
      36: aload_0
      37: aload_2
      38: putfield      #9                  // Field decoder:Lio/undertow/protocols/http2/HpackDecoder;
      41: aload_0
      42: iload_3
      43: putfield      #10                 // Field client:Z
      46: aload_0
      47: iload         4
      49: putfield      #11                 // Field maxHeaders:I
      52: aload_0
      53: iload         5
      55: putfield      #12                 // Field streamId:I
      58: aload_0
      59: iload         6
      61: putfield      #13                 // Field maxHeaderListSize:I
      64: return

  protected void handleData(java.nio.ByteBuffer, io.undertow.protocols.http2.Http2FrameHeaderParser) throws java.io.IOException;
    Code:
       0: aload_2
       1: getfield      #14                 // Field io/undertow/protocols/http2/Http2FrameHeaderParser.flags:I
       4: iconst_4
       5: invokestatic  #16                 // Method org/xnio/Bits.anyAreClear:(II)Z
       8: istore_3
       9: aload_0
      10: getfield      #6                  // Field frameRemaining:I
      13: iconst_m1
      14: if_icmpne     25
      17: aload_0
      18: aload_2
      19: getfield      #17                 // Field io/undertow/protocols/http2/Http2FrameHeaderParser.length:I
      22: putfield      #6                  // Field frameRemaining:I
      25: aload_1
      26: invokevirtual #18                 // Method java/nio/ByteBuffer.remaining:()I
      29: aload_0
      30: getfield      #6                  // Field frameRemaining:I
      33: if_icmpge     40
      36: iconst_1
      37: goto          41
      40: iconst_0
      41: istore        4
      43: aload_1
      44: invokevirtual #19                 // Method java/nio/ByteBuffer.position:()I
      47: istore        5
      49: iconst_0
      50: istore        6
      52: aload_0
      53: getfield      #5                  // Field beforeHeadersHandled:Z
      56: ifne          106
      59: aload_0
      60: aload_1
      61: aload_2
      62: invokevirtual #20                 // Method handleBeforeHeader:(Ljava/nio/ByteBuffer;Lio/undertow/protocols/http2/Http2FrameHeaderParser;)Z
      65: ifne          89
      68: aload_1
      69: invokevirtual #19                 // Method java/nio/ByteBuffer.position:()I
      72: iload         5
      74: isub
      75: istore        7
      77: aload_0
      78: dup
      79: getfield      #6                  // Field frameRemaining:I
      82: iload         7
      84: isub
      85: putfield      #6                  // Field frameRemaining:I
      88: return
      89: aload_0
      90: aload_0
      91: invokevirtual #21                 // Method getPaddingLength:()I
      94: putfield      #22                 // Field currentPadding:I
      97: aload_1
      98: invokevirtual #19                 // Method java/nio/ByteBuffer.position:()I
     101: iload         5
     103: isub
     104: istore        6
     106: aload_0
     107: iconst_1
     108: putfield      #5                  // Field beforeHeadersHandled:Z
     111: aload_0
     112: getfield      #9                  // Field decoder:Lio/undertow/protocols/http2/HpackDecoder;
     115: aload_0
     116: invokevirtual #23                 // Method io/undertow/protocols/http2/HpackDecoder.setHeaderEmitter:(Lio/undertow/protocols/http2/HpackDecoder$HeaderEmitter;)V
     119: iconst_m1
     120: istore        7
     122: aload_0
     123: getfield      #22                 // Field currentPadding:I
     126: ifle          184
     129: aload_0
     130: getfield      #6                  // Field frameRemaining:I
     133: iload         6
     135: isub
     136: aload_0
     137: getfield      #22                 // Field currentPadding:I
     140: isub
     141: istore        8
     143: iload         8
     145: ifge          157
     148: new           #24                 // class io/undertow/protocols/http2/ConnectionErrorException
     151: dup
     152: iconst_1
     153: invokespecial #25                 // Method io/undertow/protocols/http2/ConnectionErrorException."<init>":(I)V
     156: athrow
     157: aload_1
     158: invokevirtual #18                 // Method java/nio/ByteBuffer.remaining:()I
     161: iload         8
     163: if_icmple     184
     166: aload_1
     167: invokevirtual #26                 // Method java/nio/ByteBuffer.limit:()I
     170: istore        7
     172: aload_1
     173: aload_1
     174: invokevirtual #19                 // Method java/nio/ByteBuffer.position:()I
     177: iload         8
     179: iadd
     180: invokevirtual #27                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/ByteBuffer;
     183: pop
     184: aload_0
     185: getfield      #9                  // Field decoder:Lio/undertow/protocols/http2/HpackDecoder;
     188: aload_1
     189: iload         4
     191: ifne          198
     194: iload_3
     195: ifeq          202
     198: iconst_1
     199: goto          203
     202: iconst_0
     203: invokevirtual #28                 // Method io/undertow/protocols/http2/HpackDecoder.decode:(Ljava/nio/ByteBuffer;Z)V
     206: goto          226
     209: astore        8
     211: new           #24                 // class io/undertow/protocols/http2/ConnectionErrorException
     214: dup
     215: aload         8
     217: invokevirtual #30                 // Method io/undertow/protocols/http2/HpackException.getCloseCode:()I
     220: aload         8
     222: invokespecial #31                 // Method io/undertow/protocols/http2/ConnectionErrorException."<init>":(ILjava/lang/Throwable;)V
     225: athrow
     226: aload_0
     227: getfield      #11                 // Field maxHeaders:I
     230: ifle          257
     233: aload_0
     234: getfield      #4                  // Field headerMap:Lio/undertow/util/HeaderMap;
     237: invokevirtual #32                 // Method io/undertow/util/HeaderMap.size:()I
     240: aload_0
     241: getfield      #11                 // Field maxHeaders:I
     244: if_icmple     257
     247: new           #33                 // class io/undertow/protocols/http2/StreamErrorException
     250: dup
     251: bipush        6
     253: invokespecial #34                 // Method io/undertow/protocols/http2/StreamErrorException."<init>":(I)V
     256: athrow
     257: iload         7
     259: iconst_m1
     260: if_icmpeq     314
     263: aload_1
     264: invokevirtual #18                 // Method java/nio/ByteBuffer.remaining:()I
     267: ifne          307
     270: iload         7
     272: aload_1
     273: invokevirtual #26                 // Method java/nio/ByteBuffer.limit:()I
     276: isub
     277: istore        8
     279: aload_0
     280: dup
     281: getfield      #22                 // Field currentPadding:I
     284: iload         8
     286: isub
     287: putfield      #22                 // Field currentPadding:I
     290: aload_1
     291: iload         7
     293: invokevirtual #27                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/ByteBuffer;
     296: pop
     297: aload_1
     298: iload         7
     300: invokevirtual #35                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/ByteBuffer;
     303: pop
     304: goto          314
     307: aload_1
     308: iload         7
     310: invokevirtual #27                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/ByteBuffer;
     313: pop
     314: aload_1
     315: invokevirtual #19                 // Method java/nio/ByteBuffer.position:()I
     318: iload         5
     320: isub
     321: istore        7
     323: aload_0
     324: dup
     325: getfield      #6                  // Field frameRemaining:I
     328: iload         7
     330: isub
     331: putfield      #6                  // Field frameRemaining:I
     334: goto          362
     337: astore        9
     339: aload_1
     340: invokevirtual #19                 // Method java/nio/ByteBuffer.position:()I
     343: iload         5
     345: isub
     346: istore        10
     348: aload_0
     349: dup
     350: getfield      #6                  // Field frameRemaining:I
     353: iload         10
     355: isub
     356: putfield      #6                  // Field frameRemaining:I
     359: aload         9
     361: athrow
     362: return
    Exception table:
       from    to  target type
         184   206   209   Class io/undertow/protocols/http2/HpackException
          52    68   337   any
          89   314   337   any
         337   339   337   any

  protected abstract boolean handleBeforeHeader(java.nio.ByteBuffer, io.undertow.protocols.http2.Http2FrameHeaderParser);

  io.undertow.util.HeaderMap getHeaderMap();
    Code:
       0: aload_0
       1: getfield      #4                  // Field headerMap:Lio/undertow/util/HeaderMap;
       4: areturn

  public void emitHeader(io.undertow.util.HttpString, java.lang.String, boolean) throws io.undertow.protocols.http2.HpackException;
    Code:
       0: aload_0
       1: getfield      #13                 // Field maxHeaderListSize:I
       4: ifle          56
       7: aload_0
       8: dup
       9: getfield      #36                 // Field headerSize:I
      12: aload_1
      13: invokevirtual #37                 // Method io/undertow/util/HttpString.length:()I
      16: aload_2
      17: invokevirtual #38                 // Method java/lang/String.length:()I
      20: iadd
      21: bipush        32
      23: iadd
      24: iadd
      25: putfield      #36                 // Field headerSize:I
      28: aload_0
      29: getfield      #36                 // Field headerSize:I
      32: aload_0
      33: getfield      #13                 // Field maxHeaderListSize:I
      36: if_icmple     56
      39: new           #29                 // class io/undertow/protocols/http2/HpackException
      42: dup
      43: getstatic     #39                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      46: invokeinterface #40,  1           // InterfaceMethod io/undertow/UndertowMessages.headerBlockTooLarge:()Ljava/lang/String;
      51: iconst_1
      52: invokespecial #41                 // Method io/undertow/protocols/http2/HpackException."<init>":(Ljava/lang/String;I)V
      55: athrow
      56: aload_0
      57: getfield      #11                 // Field maxHeaders:I
      60: ifle          78
      63: aload_0
      64: getfield      #4                  // Field headerMap:Lio/undertow/util/HeaderMap;
      67: invokevirtual #32                 // Method io/undertow/util/HeaderMap.size:()I
      70: aload_0
      71: getfield      #11                 // Field maxHeaders:I
      74: if_icmple     78
      77: return
      78: aload_0
      79: getfield      #4                  // Field headerMap:Lio/undertow/util/HeaderMap;
      82: aload_1
      83: aload_2
      84: invokevirtual #42                 // Method io/undertow/util/HeaderMap.add:(Lio/undertow/util/HttpString;Ljava/lang/String;)Lio/undertow/util/HeaderMap;
      87: pop
      88: aload_1
      89: invokevirtual #37                 // Method io/undertow/util/HttpString.length:()I
      92: ifne          104
      95: getstatic     #39                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      98: invokeinterface #43,  1           // InterfaceMethod io/undertow/UndertowMessages.invalidHeader:()Ljava/lang/IllegalArgumentException;
     103: athrow
     104: aload_1
     105: getstatic     #44                 // Field io/undertow/util/Headers.TRANSFER_ENCODING:Lio/undertow/util/HttpString;
     108: invokevirtual #45                 // Method io/undertow/util/HttpString.equals:(Lio/undertow/util/HttpString;)Z
     111: ifeq          123
     114: new           #29                 // class io/undertow/protocols/http2/HpackException
     117: dup
     118: iconst_1
     119: invokespecial #46                 // Method io/undertow/protocols/http2/HpackException."<init>":(I)V
     122: athrow
     123: aload_1
     124: iconst_0
     125: invokevirtual #47                 // Method io/undertow/util/HttpString.byteAt:(I)B
     128: bipush        58
     130: if_icmpne     200
     133: aload_0
     134: getfield      #10                 // Field client:Z
     137: ifeq          158
     140: aload_1
     141: getstatic     #48                 // Field io/undertow/protocols/http2/Http2Channel.STATUS:Lio/undertow/util/HttpString;
     144: invokevirtual #45                 // Method io/undertow/util/HttpString.equals:(Lio/undertow/util/HttpString;)Z
     147: ifne          175
     150: aload_0
     151: iconst_1
     152: putfield      #7                  // Field invalid:Z
     155: goto          175
     158: getstatic     #49                 // Field SERVER_HEADERS:Ljava/util/Set;
     161: aload_1
     162: invokeinterface #50,  2           // InterfaceMethod java/util/Set.contains:(Ljava/lang/Object;)Z
     167: ifne          175
     170: aload_0
     171: iconst_1
     172: putfield      #7                  // Field invalid:Z
     175: aload_0
     176: getfield      #8                  // Field processingPseudoHeaders:Z
     179: ifne          205
     182: new           #29                 // class io/undertow/protocols/http2/HpackException
     185: dup
     186: getstatic     #39                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
     189: aload_1
     190: invokeinterface #51,  2           // InterfaceMethod io/undertow/UndertowMessages.pseudoHeaderInWrongOrder:(Lio/undertow/util/HttpString;)Ljava/lang/String;
     195: iconst_1
     196: invokespecial #41                 // Method io/undertow/protocols/http2/HpackException."<init>":(Ljava/lang/String;I)V
     199: athrow
     200: aload_0
     201: iconst_0
     202: putfield      #8                  // Field processingPseudoHeaders:Z
     205: iconst_0
     206: istore        4
     208: iload         4
     210: aload_1
     211: invokevirtual #37                 // Method io/undertow/util/HttpString.length:()I
     214: if_icmpge     295
     217: aload_1
     218: iload         4
     220: invokevirtual #47                 // Method io/undertow/util/HttpString.byteAt:(I)B
     223: istore        5
     225: iload         5
     227: bipush        65
     229: if_icmplt     258
     232: iload         5
     234: bipush        90
     236: if_icmpgt     258
     239: aload_0
     240: iconst_1
     241: putfield      #7                  // Field invalid:Z
     244: getstatic     #52                 // Field io/undertow/UndertowLogger.REQUEST_LOGGER:Lio/undertow/UndertowLogger;
     247: ldc           #53                 // String Malformed request, header %s contains uppercase characters
     249: aload_1
     250: invokeinterface #54,  3           // InterfaceMethod io/undertow/UndertowLogger.debugf:(Ljava/lang/String;Ljava/lang/Object;)V
     255: goto          289
     258: iload         5
     260: bipush        58
     262: if_icmpeq     289
     265: iload         5
     267: invokestatic  #55                 // Method io/undertow/server/Connectors.isValidTokenCharacter:(B)Z
     270: ifne          289
     273: aload_0
     274: iconst_1
     275: putfield      #7                  // Field invalid:Z
     278: getstatic     #52                 // Field io/undertow/UndertowLogger.REQUEST_LOGGER:Lio/undertow/UndertowLogger;
     281: ldc           #56                 // String Malformed request, header %s contains invalid token character
     283: aload_1
     284: invokeinterface #54,  3           // InterfaceMethod io/undertow/UndertowLogger.debugf:(Ljava/lang/String;Ljava/lang/Object;)V
     289: iinc          4, 1
     292: goto          208
     295: return

  protected abstract int getPaddingLength();

  protected void moreData(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #57                 // Method io/undertow/protocols/http2/Http2PushBackParser.moreData:(I)V
       5: aload_0
       6: dup
       7: getfield      #6                  // Field frameRemaining:I
      10: iload_1
      11: iadd
      12: putfield      #6                  // Field frameRemaining:I
      15: return

  public boolean isInvalid();
    Code:
       0: aload_0
       1: getfield      #7                  // Field invalid:Z
       4: ireturn

  public int getStreamId();
    Code:
       0: aload_0
       1: getfield      #12                 // Field streamId:I
       4: ireturn

  static {};
    Code:
       0: new           #58                 // class java/util/HashSet
       3: dup
       4: invokespecial #59                 // Method java/util/HashSet."<init>":()V
       7: astore_0
       8: aload_0
       9: getstatic     #60                 // Field io/undertow/protocols/http2/Http2Channel.METHOD:Lio/undertow/util/HttpString;
      12: invokeinterface #61,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      17: pop
      18: aload_0
      19: getstatic     #62                 // Field io/undertow/protocols/http2/Http2Channel.AUTHORITY:Lio/undertow/util/HttpString;
      22: invokeinterface #61,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      27: pop
      28: aload_0
      29: getstatic     #63                 // Field io/undertow/protocols/http2/Http2Channel.SCHEME:Lio/undertow/util/HttpString;
      32: invokeinterface #61,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      37: pop
      38: aload_0
      39: getstatic     #64                 // Field io/undertow/protocols/http2/Http2Channel.PATH:Lio/undertow/util/HttpString;
      42: invokeinterface #61,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      47: pop
      48: aload_0
      49: invokestatic  #65                 // Method java/util/Collections.unmodifiableSet:(Ljava/util/Set;)Ljava/util/Set;
      52: putstatic     #49                 // Field SERVER_HEADERS:Ljava/util/Set;
      55: return
}
