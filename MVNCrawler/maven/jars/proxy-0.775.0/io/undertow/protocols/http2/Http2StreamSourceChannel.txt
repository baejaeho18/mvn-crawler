Compiled from "Http2StreamSourceChannel.java"
public class io.undertow.protocols.http2.Http2StreamSourceChannel extends io.undertow.protocols.http2.AbstractHttp2StreamSourceChannel implements io.undertow.protocols.http2.Http2Stream {
  private boolean headersEndStream;

  private boolean rst;

  private final io.undertow.util.HeaderMap headers;

  private final int streamId;

  private io.undertow.protocols.http2.Http2HeadersStreamSinkChannel response;

  private int flowControlWindow;

  private org.xnio.ChannelListener<io.undertow.protocols.http2.Http2StreamSourceChannel> completionListener;

  private int remainingPadding;

  private boolean ignoreForceClose;

  private long contentLengthRemaining;

  private io.undertow.protocols.http2.Http2StreamSourceChannel$TrailersHandler trailersHandler;

  io.undertow.protocols.http2.Http2StreamSourceChannel(io.undertow.protocols.http2.Http2Channel, io.undertow.connector.PooledByteBuffer, long, io.undertow.util.HeaderMap, int);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: lload_3
       4: invokespecial #1                  // Method io/undertow/protocols/http2/AbstractHttp2StreamSourceChannel."<init>":(Lio/undertow/protocols/http2/Http2Channel;Lio/undertow/connector/PooledByteBuffer;J)V
       7: aload_0
       8: iconst_0
       9: putfield      #2                  // Field headersEndStream:Z
      12: aload_0
      13: iconst_0
      14: putfield      #3                  // Field rst:Z
      17: aload_0
      18: iconst_0
      19: putfield      #4                  // Field ignoreForceClose:Z
      22: aload_0
      23: aload         5
      25: putfield      #5                  // Field headers:Lio/undertow/util/HeaderMap;
      28: aload_0
      29: iload         6
      31: putfield      #6                  // Field streamId:I
      34: aload_0
      35: aload_1
      36: invokevirtual #7                  // Method io/undertow/protocols/http2/Http2Channel.getInitialReceiveWindowSize:()I
      39: putfield      #8                  // Field flowControlWindow:I
      42: aload         5
      44: getstatic     #9                  // Field io/undertow/util/Headers.CONTENT_LENGTH:Lio/undertow/util/HttpString;
      47: invokevirtual #10                 // Method io/undertow/util/HeaderMap.getFirst:(Lio/undertow/util/HttpString;)Ljava/lang/String;
      50: astore        7
      52: aload         7
      54: ifnull        69
      57: aload_0
      58: aload         7
      60: invokestatic  #11                 // Method java/lang/Long.parseLong:(Ljava/lang/String;)J
      63: putfield      #12                 // Field contentLengthRemaining:J
      66: goto          76
      69: aload_0
      70: ldc2_w        #13                 // long -1l
      73: putfield      #12                 // Field contentLengthRemaining:J
      76: return

  protected void handleHeaderData(io.undertow.server.protocol.framed.FrameHeaderData);
    Code:
       0: aload_1
       1: checkcast     #15                 // class io/undertow/protocols/http2/Http2FrameHeaderParser
       4: astore_2
       5: aload_2
       6: invokevirtual #16                 // Method io/undertow/protocols/http2/Http2FrameHeaderParser.getParser:()Lio/undertow/protocols/http2/Http2PushBackParser;
       9: astore_3
      10: aload_3
      11: instanceof    #17                 // class io/undertow/protocols/http2/Http2DataFrameParser
      14: ifeq          67
      17: aload_0
      18: aload_3
      19: checkcast     #17                 // class io/undertow/protocols/http2/Http2DataFrameParser
      22: invokevirtual #18                 // Method io/undertow/protocols/http2/Http2DataFrameParser.getPadding:()I
      25: putfield      #19                 // Field remainingPadding:I
      28: aload_0
      29: getfield      #19                 // Field remainingPadding:I
      32: ifle          112
      35: aload_0
      36: aload_0
      37: getfield      #19                 // Field remainingPadding:I
      40: iconst_1
      41: iadd
      42: invokevirtual #20                 // Method updateFlowControlWindow:(I)V
      45: goto          112
      48: astore        4
      50: aload_0
      51: invokevirtual #22                 // Method getFramedChannel:()Lio/undertow/protocols/http2/Http2Channel;
      54: invokestatic  #23                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
      57: new           #24                 // class java/lang/RuntimeException
      60: dup
      61: aload         4
      63: invokespecial #25                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/Throwable;)V
      66: athrow
      67: aload_3
      68: instanceof    #26                 // class io/undertow/protocols/http2/Http2HeadersParser
      71: ifeq          112
      74: aload_0
      75: getfield      #5                  // Field headers:Lio/undertow/util/HeaderMap;
      78: aload_3
      79: checkcast     #26                 // class io/undertow/protocols/http2/Http2HeadersParser
      82: invokevirtual #27                 // Method io/undertow/protocols/http2/Http2HeadersParser.getHeaderMap:()Lio/undertow/util/HeaderMap;
      85: invokevirtual #28                 // Method io/undertow/util/HeaderMap.putAll:(Lio/undertow/util/HeaderMap;)Lio/undertow/util/HeaderMap;
      88: pop
      89: aload_0
      90: getfield      #29                 // Field trailersHandler:Lio/undertow/protocols/http2/Http2StreamSourceChannel$TrailersHandler;
      93: ifnull        112
      96: aload_0
      97: getfield      #29                 // Field trailersHandler:Lio/undertow/protocols/http2/Http2StreamSourceChannel$TrailersHandler;
     100: aload_3
     101: checkcast     #26                 // class io/undertow/protocols/http2/Http2HeadersParser
     104: invokevirtual #27                 // Method io/undertow/protocols/http2/Http2HeadersParser.getHeaderMap:()Lio/undertow/util/HeaderMap;
     107: invokeinterface #30,  2           // InterfaceMethod io/undertow/protocols/http2/Http2StreamSourceChannel$TrailersHandler.handleTrailers:(Lio/undertow/util/HeaderMap;)V
     112: aload_0
     113: aload_2
     114: invokevirtual #31                 // Method handleFinalFrame:(Lio/undertow/protocols/http2/Http2FrameHeaderParser;)V
     117: return
    Exception table:
       from    to  target type
          35    45    48   Class java/io/IOException

  protected long updateFrameDataRemaining(io.undertow.connector.PooledByteBuffer, long);
    Code:
       0: lload_2
       1: aload_0
       2: getfield      #19                 // Field remainingPadding:I
       5: i2l
       6: lsub
       7: lstore        4
       9: aload_1
      10: invokeinterface #32,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
      15: invokevirtual #33                 // Method java/nio/ByteBuffer.remaining:()I
      18: i2l
      19: lload         4
      21: lcmp
      22: ifle          82
      25: aload_1
      26: invokeinterface #32,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
      31: invokevirtual #33                 // Method java/nio/ByteBuffer.remaining:()I
      34: i2l
      35: lload         4
      37: lsub
      38: lstore        6
      40: aload_1
      41: invokeinterface #32,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
      46: aload_1
      47: invokeinterface #32,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
      52: invokevirtual #34                 // Method java/nio/ByteBuffer.position:()I
      55: i2l
      56: lload         4
      58: ladd
      59: l2i
      60: invokevirtual #35                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/ByteBuffer;
      63: pop
      64: aload_0
      65: dup
      66: getfield      #19                 // Field remainingPadding:I
      69: i2l
      70: lload         6
      72: lsub
      73: l2i
      74: putfield      #19                 // Field remainingPadding:I
      77: lload_2
      78: lload         6
      80: lsub
      81: lreturn
      82: lload_2
      83: lreturn

  void handleFinalFrame(io.undertow.protocols.http2.Http2FrameHeaderParser);
    Code:
       0: aload_1
       1: astore_2
       2: aload_2
       3: getfield      #36                 // Field io/undertow/protocols/http2/Http2FrameHeaderParser.type:I
       6: ifne          27
       9: aload_2
      10: getfield      #37                 // Field io/undertow/protocols/http2/Http2FrameHeaderParser.flags:I
      13: iconst_1
      14: invokestatic  #39                 // Method org/xnio/Bits.anyAreSet:(II)Z
      17: ifeq          103
      20: aload_0
      21: invokevirtual #40                 // Method lastFrame:()V
      24: goto          103
      27: aload_2
      28: getfield      #36                 // Field io/undertow/protocols/http2/Http2FrameHeaderParser.type:I
      31: iconst_1
      32: if_icmpne     72
      35: aload_2
      36: getfield      #37                 // Field io/undertow/protocols/http2/Http2FrameHeaderParser.flags:I
      39: iconst_1
      40: invokestatic  #41                 // Method org/xnio/Bits.allAreSet:(II)Z
      43: ifeq          103
      46: aload_2
      47: getfield      #37                 // Field io/undertow/protocols/http2/Http2FrameHeaderParser.flags:I
      50: iconst_4
      51: invokestatic  #41                 // Method org/xnio/Bits.allAreSet:(II)Z
      54: ifeq          64
      57: aload_0
      58: invokevirtual #40                 // Method lastFrame:()V
      61: goto          103
      64: aload_0
      65: iconst_1
      66: putfield      #2                  // Field headersEndStream:Z
      69: goto          103
      72: aload_0
      73: getfield      #2                  // Field headersEndStream:Z
      76: ifeq          103
      79: aload_2
      80: getfield      #36                 // Field io/undertow/protocols/http2/Http2FrameHeaderParser.type:I
      83: bipush        9
      85: if_icmpne     103
      88: aload_2
      89: getfield      #37                 // Field io/undertow/protocols/http2/Http2FrameHeaderParser.flags:I
      92: iconst_4
      93: invokestatic  #39                 // Method org/xnio/Bits.anyAreSet:(II)Z
      96: ifeq          103
      99: aload_0
     100: invokevirtual #40                 // Method lastFrame:()V
     103: return

  public io.undertow.protocols.http2.Http2HeadersStreamSinkChannel getResponseChannel();
    Code:
       0: aload_0
       1: getfield      #42                 // Field response:Lio/undertow/protocols/http2/Http2HeadersStreamSinkChannel;
       4: ifnull        12
       7: aload_0
       8: getfield      #42                 // Field response:Lio/undertow/protocols/http2/Http2HeadersStreamSinkChannel;
      11: areturn
      12: aload_0
      13: new           #43                 // class io/undertow/protocols/http2/Http2HeadersStreamSinkChannel
      16: dup
      17: aload_0
      18: invokevirtual #44                 // Method getHttp2Channel:()Lio/undertow/protocols/http2/Http2Channel;
      21: aload_0
      22: getfield      #6                  // Field streamId:I
      25: invokespecial #45                 // Method io/undertow/protocols/http2/Http2HeadersStreamSinkChannel."<init>":(Lio/undertow/protocols/http2/Http2Channel;I)V
      28: putfield      #42                 // Field response:Lio/undertow/protocols/http2/Http2HeadersStreamSinkChannel;
      31: aload_0
      32: invokevirtual #44                 // Method getHttp2Channel:()Lio/undertow/protocols/http2/Http2Channel;
      35: aload_0
      36: getfield      #42                 // Field response:Lio/undertow/protocols/http2/Http2HeadersStreamSinkChannel;
      39: invokevirtual #46                 // Method io/undertow/protocols/http2/Http2Channel.registerStreamSink:(Lio/undertow/protocols/http2/Http2HeadersStreamSinkChannel;)V
      42: aload_0
      43: getfield      #42                 // Field response:Lio/undertow/protocols/http2/Http2HeadersStreamSinkChannel;
      46: areturn

  public int read(java.nio.ByteBuffer) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #47                 // Method io/undertow/protocols/http2/AbstractHttp2StreamSourceChannel.read:(Ljava/nio/ByteBuffer;)I
       5: istore_2
       6: aload_0
       7: iload_2
       8: invokevirtual #20                 // Method updateFlowControlWindow:(I)V
      11: iload_2
      12: ireturn

  public long read(java.nio.ByteBuffer[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: invokespecial #48                 // Method io/undertow/protocols/http2/AbstractHttp2StreamSourceChannel.read:([Ljava/nio/ByteBuffer;II)J
       7: lstore        4
       9: aload_0
      10: lload         4
      12: l2i
      13: invokevirtual #20                 // Method updateFlowControlWindow:(I)V
      16: lload         4
      18: lreturn

  public long read(java.nio.ByteBuffer[]) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #49                 // Method io/undertow/protocols/http2/AbstractHttp2StreamSourceChannel.read:([Ljava/nio/ByteBuffer;)J
       5: lstore_2
       6: aload_0
       7: lload_2
       8: l2i
       9: invokevirtual #20                 // Method updateFlowControlWindow:(I)V
      12: lload_2
      13: lreturn

  public long transferTo(long, java.nio.ByteBuffer, org.xnio.channels.StreamSinkChannel) throws java.io.IOException;
    Code:
       0: aload_0
       1: lload_1
       2: aload_3
       3: aload         4
       5: invokespecial #50                 // Method io/undertow/protocols/http2/AbstractHttp2StreamSourceChannel.transferTo:(JLjava/nio/ByteBuffer;Lorg/xnio/channels/StreamSinkChannel;)J
       8: lstore        5
      10: aload_0
      11: lload         5
      13: l2i
      14: aload_3
      15: invokevirtual #33                 // Method java/nio/ByteBuffer.remaining:()I
      18: iadd
      19: invokevirtual #20                 // Method updateFlowControlWindow:(I)V
      22: lload         5
      24: lreturn

  public long transferTo(long, long, java.nio.channels.FileChannel) throws java.io.IOException;
    Code:
       0: aload_0
       1: lload_1
       2: lload_3
       3: aload         5
       5: invokespecial #51                 // Method io/undertow/protocols/http2/AbstractHttp2StreamSourceChannel.transferTo:(JJLjava/nio/channels/FileChannel;)J
       8: lstore        6
      10: aload_0
      11: lload         6
      13: l2i
      14: invokevirtual #20                 // Method updateFlowControlWindow:(I)V
      17: lload         6
      19: lreturn

  private void updateFlowControlWindow(int) throws java.io.IOException;
    Code:
       0: iload_1
       1: ifgt          5
       4: return
       5: aload_0
       6: dup
       7: getfield      #8                  // Field flowControlWindow:I
      10: iload_1
      11: isub
      12: putfield      #8                  // Field flowControlWindow:I
      15: aload_0
      16: invokevirtual #44                 // Method getHttp2Channel:()Lio/undertow/protocols/http2/Http2Channel;
      19: astore_2
      20: aload_2
      21: iload_1
      22: invokevirtual #52                 // Method io/undertow/protocols/http2/Http2Channel.updateReceiveFlowControlWindow:(I)V
      25: aload_2
      26: invokevirtual #7                  // Method io/undertow/protocols/http2/Http2Channel.getInitialReceiveWindowSize:()I
      29: istore_3
      30: aload_0
      31: getfield      #8                  // Field flowControlWindow:I
      34: iload_3
      35: iconst_2
      36: idiv
      37: if_icmpge     69
      40: iload_3
      41: aload_0
      42: getfield      #8                  // Field flowControlWindow:I
      45: isub
      46: istore        4
      48: aload_0
      49: dup
      50: getfield      #8                  // Field flowControlWindow:I
      53: iload         4
      55: iadd
      56: putfield      #8                  // Field flowControlWindow:I
      59: aload_2
      60: aload_0
      61: getfield      #6                  // Field streamId:I
      64: iload         4
      66: invokevirtual #53                 // Method io/undertow/protocols/http2/Http2Channel.sendUpdateWindowSize:(II)V
      69: return

  protected void complete() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #54                 // Method io/undertow/protocols/http2/AbstractHttp2StreamSourceChannel.complete:()V
       4: aload_0
       5: getfield      #55                 // Field completionListener:Lorg/xnio/ChannelListener;
       8: ifnull        20
      11: aload_0
      12: aload_0
      13: getfield      #55                 // Field completionListener:Lorg/xnio/ChannelListener;
      16: invokestatic  #56                 // Method org/xnio/ChannelListeners.invokeChannelListener:(Ljava/nio/channels/Channel;Lorg/xnio/ChannelListener;)Z
      19: pop
      20: return

  public io.undertow.util.HeaderMap getHeaders();
    Code:
       0: aload_0
       1: getfield      #5                  // Field headers:Lio/undertow/util/HeaderMap;
       4: areturn

  public org.xnio.ChannelListener<io.undertow.protocols.http2.Http2StreamSourceChannel> getCompletionListener();
    Code:
       0: aload_0
       1: getfield      #55                 // Field completionListener:Lorg/xnio/ChannelListener;
       4: areturn

  public void setCompletionListener(org.xnio.ChannelListener<io.undertow.protocols.http2.Http2StreamSourceChannel>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #55                 // Field completionListener:Lorg/xnio/ChannelListener;
       5: aload_0
       6: invokevirtual #57                 // Method isComplete:()Z
       9: ifeq          18
      12: aload_0
      13: aload_1
      14: invokestatic  #56                 // Method org/xnio/ChannelListeners.invokeChannelListener:(Ljava/nio/channels/Channel;Lorg/xnio/ChannelListener;)Z
      17: pop
      18: return

  void rstStream(int);
    Code:
       0: aload_0
       1: getfield      #3                  // Field rst:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: iconst_1
      10: putfield      #3                  // Field rst:Z
      13: aload_0
      14: invokevirtual #58                 // Method markStreamBroken:()V
      17: return

  protected void channelForciblyClosed();
    Code:
       0: aload_0
       1: getfield      #55                 // Field completionListener:Lorg/xnio/ChannelListener;
       4: ifnull        17
       7: aload_0
       8: getfield      #55                 // Field completionListener:Lorg/xnio/ChannelListener;
      11: aload_0
      12: invokeinterface #59,  2           // InterfaceMethod org/xnio/ChannelListener.handleEvent:(Ljava/nio/channels/Channel;)V
      17: aload_0
      18: getfield      #4                  // Field ignoreForceClose:Z
      21: ifne          37
      24: aload_0
      25: invokevirtual #44                 // Method getHttp2Channel:()Lio/undertow/protocols/http2/Http2Channel;
      28: aload_0
      29: getfield      #6                  // Field streamId:I
      32: bipush        8
      34: invokevirtual #60                 // Method io/undertow/protocols/http2/Http2Channel.sendRstStream:(II)V
      37: aload_0
      38: invokevirtual #58                 // Method markStreamBroken:()V
      41: return

  public void setIgnoreForceClose(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #4                  // Field ignoreForceClose:Z
       5: return

  public boolean isIgnoreForceClose();
    Code:
       0: aload_0
       1: getfield      #4                  // Field ignoreForceClose:Z
       4: ireturn

  public int getStreamId();
    Code:
       0: aload_0
       1: getfield      #6                  // Field streamId:I
       4: ireturn

  boolean isHeadersEndStream();
    Code:
       0: aload_0
       1: getfield      #2                  // Field headersEndStream:Z
       4: ireturn

  public io.undertow.protocols.http2.Http2StreamSourceChannel$TrailersHandler getTrailersHandler();
    Code:
       0: aload_0
       1: getfield      #29                 // Field trailersHandler:Lio/undertow/protocols/http2/Http2StreamSourceChannel$TrailersHandler;
       4: areturn

  public void setTrailersHandler(io.undertow.protocols.http2.Http2StreamSourceChannel$TrailersHandler);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #29                 // Field trailersHandler:Lio/undertow/protocols/http2/Http2StreamSourceChannel$TrailersHandler;
       5: return

  public java.lang.String toString();
    Code:
       0: aload_0
       1: getfield      #5                  // Field headers:Lio/undertow/util/HeaderMap;
       4: invokedynamic #61,  0             // InvokeDynamic #0:makeConcatWithConstants:(Lio/undertow/util/HeaderMap;)Ljava/lang/String;
       9: areturn

  void updateContentSize(long, boolean);
    Code:
       0: aload_0
       1: getfield      #12                 // Field contentLengthRemaining:J
       4: ldc2_w        #13                 // long -1l
       7: lcmp
       8: ifeq          106
      11: aload_0
      12: dup
      13: getfield      #12                 // Field contentLengthRemaining:J
      16: lload_1
      17: lsub
      18: putfield      #12                 // Field contentLengthRemaining:J
      21: aload_0
      22: getfield      #12                 // Field contentLengthRemaining:J
      25: lconst_0
      26: lcmp
      27: ifge          63
      30: getstatic     #62                 // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
      33: ldc           #63                 // String Closing stream %s on %s as data length exceeds content size
      35: aload_0
      36: getfield      #6                  // Field streamId:I
      39: aload_0
      40: invokevirtual #22                 // Method getFramedChannel:()Lio/undertow/protocols/http2/Http2Channel;
      43: invokeinterface #64,  4           // InterfaceMethod io/undertow/UndertowLogger.debugf:(Ljava/lang/String;ILjava/lang/Object;)V
      48: aload_0
      49: invokevirtual #22                 // Method getFramedChannel:()Lio/undertow/protocols/http2/Http2Channel;
      52: aload_0
      53: getfield      #6                  // Field streamId:I
      56: iconst_1
      57: invokevirtual #60                 // Method io/undertow/protocols/http2/Http2Channel.sendRstStream:(II)V
      60: goto          106
      63: iload_3
      64: ifeq          106
      67: aload_0
      68: getfield      #12                 // Field contentLengthRemaining:J
      71: lconst_0
      72: lcmp
      73: ifeq          106
      76: getstatic     #62                 // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
      79: ldc           #65                 // String Closing stream %s on %s as data length was less than content size
      81: aload_0
      82: getfield      #6                  // Field streamId:I
      85: aload_0
      86: invokevirtual #22                 // Method getFramedChannel:()Lio/undertow/protocols/http2/Http2Channel;
      89: invokeinterface #64,  4           // InterfaceMethod io/undertow/UndertowLogger.debugf:(Ljava/lang/String;ILjava/lang/Object;)V
      94: aload_0
      95: invokevirtual #22                 // Method getFramedChannel:()Lio/undertow/protocols/http2/Http2Channel;
      98: aload_0
      99: getfield      #6                  // Field streamId:I
     102: iconst_1
     103: invokevirtual #60                 // Method io/undertow/protocols/http2/Http2Channel.sendRstStream:(II)V
     106: return
}
