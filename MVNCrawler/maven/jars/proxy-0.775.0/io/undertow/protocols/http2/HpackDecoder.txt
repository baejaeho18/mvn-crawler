Compiled from "HpackDecoder.java"
public class io.undertow.protocols.http2.HpackDecoder {
  private static final int DEFAULT_RING_BUFFER_SIZE;

  private io.undertow.protocols.http2.HpackDecoder$HeaderEmitter headerEmitter;

  private io.undertow.protocols.http2.Hpack$HeaderField[] headerTable;

  private int firstSlotPosition;

  private int filledTableSlots;

  private int currentMemorySize;

  private int specifiedMemorySize;

  private final int maxAllowedMemorySize;

  private boolean first;

  private final java.lang.StringBuilder stringBuilder;

  public io.undertow.protocols.http2.HpackDecoder(int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field firstSlotPosition:I
       9: aload_0
      10: iconst_0
      11: putfield      #3                  // Field filledTableSlots:I
      14: aload_0
      15: iconst_0
      16: putfield      #4                  // Field currentMemorySize:I
      19: aload_0
      20: iconst_1
      21: putfield      #5                  // Field first:Z
      24: aload_0
      25: new           #6                  // class java/lang/StringBuilder
      28: dup
      29: invokespecial #7                  // Method java/lang/StringBuilder."<init>":()V
      32: putfield      #8                  // Field stringBuilder:Ljava/lang/StringBuilder;
      35: aload_0
      36: sipush        4096
      39: iload_1
      40: invokestatic  #10                 // Method java/lang/Math.min:(II)I
      43: putfield      #11                 // Field specifiedMemorySize:I
      46: aload_0
      47: iload_1
      48: putfield      #12                 // Field maxAllowedMemorySize:I
      51: aload_0
      52: bipush        10
      54: anewarray     #14                 // class io/undertow/protocols/http2/Hpack$HeaderField
      57: putfield      #15                 // Field headerTable:[Lio/undertow/protocols/http2/Hpack$HeaderField;
      60: return

  public io.undertow.protocols.http2.HpackDecoder();
    Code:
       0: aload_0
       1: sipush        4096
       4: invokespecial #16                 // Method "<init>":(I)V
       7: return

  public void decode(java.nio.ByteBuffer, boolean) throws io.undertow.protocols.http2.HpackException;
    Code:
       0: aload_1
       1: invokevirtual #17                 // Method java/nio/ByteBuffer.hasRemaining:()Z
       4: ifeq          442
       7: aload_1
       8: invokevirtual #18                 // Method java/nio/ByteBuffer.position:()I
      11: istore_3
      12: aload_1
      13: invokevirtual #19                 // Method java/nio/ByteBuffer.get:()B
      16: istore        4
      18: iload         4
      20: sipush        128
      23: iand
      24: ifeq          100
      27: aload_0
      28: iconst_0
      29: putfield      #5                  // Field first:Z
      32: aload_1
      33: aload_1
      34: invokevirtual #18                 // Method java/nio/ByteBuffer.position:()I
      37: iconst_1
      38: isub
      39: invokevirtual #20                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/ByteBuffer;
      42: pop
      43: aload_1
      44: bipush        7
      46: invokestatic  #21                 // Method io/undertow/protocols/http2/Hpack.decodeInteger:(Ljava/nio/ByteBuffer;I)I
      49: istore        5
      51: iload         5
      53: iconst_m1
      54: if_icmpne     77
      57: iload_2
      58: ifne          70
      61: getstatic     #22                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      64: invokeinterface #23,  1           // InterfaceMethod io/undertow/UndertowMessages.hpackFailed:()Lio/undertow/protocols/http2/HpackException;
      69: athrow
      70: aload_1
      71: iload_3
      72: invokevirtual #20                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/ByteBuffer;
      75: pop
      76: return
      77: iload         5
      79: ifne          91
      82: getstatic     #22                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      85: invokeinterface #24,  1           // InterfaceMethod io/undertow/UndertowMessages.zeroNotValidHeaderTableIndex:()Lio/undertow/protocols/http2/HpackException;
      90: athrow
      91: aload_0
      92: iload         5
      94: invokevirtual #25                 // Method handleIndex:(I)V
      97: goto          439
     100: iload         4
     102: bipush        64
     104: iand
     105: ifeq          211
     108: aload_0
     109: iconst_0
     110: putfield      #5                  // Field first:Z
     113: aload_0
     114: aload_1
     115: bipush        6
     117: invokevirtual #26                 // Method readHeaderName:(Ljava/nio/ByteBuffer;I)Lio/undertow/util/HttpString;
     120: astore        5
     122: aload         5
     124: ifnonnull     147
     127: iload_2
     128: ifne          140
     131: getstatic     #22                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
     134: invokeinterface #23,  1           // InterfaceMethod io/undertow/UndertowMessages.hpackFailed:()Lio/undertow/protocols/http2/HpackException;
     139: athrow
     140: aload_1
     141: iload_3
     142: invokevirtual #20                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/ByteBuffer;
     145: pop
     146: return
     147: aload_0
     148: aload_1
     149: invokevirtual #27                 // Method readHpackString:(Ljava/nio/ByteBuffer;)Ljava/lang/String;
     152: astore        6
     154: aload         6
     156: ifnonnull     179
     159: iload_2
     160: ifne          172
     163: getstatic     #22                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
     166: invokeinterface #23,  1           // InterfaceMethod io/undertow/UndertowMessages.hpackFailed:()Lio/undertow/protocols/http2/HpackException;
     171: athrow
     172: aload_1
     173: iload_3
     174: invokevirtual #20                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/ByteBuffer;
     177: pop
     178: return
     179: aload_0
     180: getfield      #28                 // Field headerEmitter:Lio/undertow/protocols/http2/HpackDecoder$HeaderEmitter;
     183: aload         5
     185: aload         6
     187: iconst_0
     188: invokeinterface #29,  4           // InterfaceMethod io/undertow/protocols/http2/HpackDecoder$HeaderEmitter.emitHeader:(Lio/undertow/util/HttpString;Ljava/lang/String;Z)V
     193: aload_0
     194: new           #14                 // class io/undertow/protocols/http2/Hpack$HeaderField
     197: dup
     198: aload         5
     200: aload         6
     202: invokespecial #30                 // Method io/undertow/protocols/http2/Hpack$HeaderField."<init>":(Lio/undertow/util/HttpString;Ljava/lang/String;)V
     205: invokevirtual #31                 // Method addEntryToHeaderTable:(Lio/undertow/protocols/http2/Hpack$HeaderField;)V
     208: goto          439
     211: iload         4
     213: sipush        240
     216: iand
     217: ifne          307
     220: aload_0
     221: iconst_0
     222: putfield      #5                  // Field first:Z
     225: aload_0
     226: aload_1
     227: iconst_4
     228: invokevirtual #26                 // Method readHeaderName:(Ljava/nio/ByteBuffer;I)Lio/undertow/util/HttpString;
     231: astore        5
     233: aload         5
     235: ifnonnull     258
     238: iload_2
     239: ifne          251
     242: getstatic     #22                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
     245: invokeinterface #23,  1           // InterfaceMethod io/undertow/UndertowMessages.hpackFailed:()Lio/undertow/protocols/http2/HpackException;
     250: athrow
     251: aload_1
     252: iload_3
     253: invokevirtual #20                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/ByteBuffer;
     256: pop
     257: return
     258: aload_0
     259: aload_1
     260: invokevirtual #27                 // Method readHpackString:(Ljava/nio/ByteBuffer;)Ljava/lang/String;
     263: astore        6
     265: aload         6
     267: ifnonnull     290
     270: iload_2
     271: ifne          283
     274: getstatic     #22                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
     277: invokeinterface #23,  1           // InterfaceMethod io/undertow/UndertowMessages.hpackFailed:()Lio/undertow/protocols/http2/HpackException;
     282: athrow
     283: aload_1
     284: iload_3
     285: invokevirtual #20                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/ByteBuffer;
     288: pop
     289: return
     290: aload_0
     291: getfield      #28                 // Field headerEmitter:Lio/undertow/protocols/http2/HpackDecoder$HeaderEmitter;
     294: aload         5
     296: aload         6
     298: iconst_0
     299: invokeinterface #29,  4           // InterfaceMethod io/undertow/protocols/http2/HpackDecoder$HeaderEmitter.emitHeader:(Lio/undertow/util/HttpString;Ljava/lang/String;Z)V
     304: goto          439
     307: iload         4
     309: sipush        240
     312: iand
     313: bipush        16
     315: if_icmpne     392
     318: aload_0
     319: iconst_0
     320: putfield      #5                  // Field first:Z
     323: aload_0
     324: aload_1
     325: iconst_4
     326: invokevirtual #26                 // Method readHeaderName:(Ljava/nio/ByteBuffer;I)Lio/undertow/util/HttpString;
     329: astore        5
     331: aload         5
     333: ifnonnull     343
     336: aload_1
     337: iload_3
     338: invokevirtual #20                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/ByteBuffer;
     341: pop
     342: return
     343: aload_0
     344: aload_1
     345: invokevirtual #27                 // Method readHpackString:(Ljava/nio/ByteBuffer;)Ljava/lang/String;
     348: astore        6
     350: aload         6
     352: ifnonnull     375
     355: iload_2
     356: ifne          368
     359: getstatic     #22                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
     362: invokeinterface #23,  1           // InterfaceMethod io/undertow/UndertowMessages.hpackFailed:()Lio/undertow/protocols/http2/HpackException;
     367: athrow
     368: aload_1
     369: iload_3
     370: invokevirtual #20                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/ByteBuffer;
     373: pop
     374: return
     375: aload_0
     376: getfield      #28                 // Field headerEmitter:Lio/undertow/protocols/http2/HpackDecoder$HeaderEmitter;
     379: aload         5
     381: aload         6
     383: iconst_1
     384: invokeinterface #29,  4           // InterfaceMethod io/undertow/protocols/http2/HpackDecoder$HeaderEmitter.emitHeader:(Lio/undertow/util/HttpString;Ljava/lang/String;Z)V
     389: goto          439
     392: iload         4
     394: sipush        224
     397: iand
     398: bipush        32
     400: if_icmpne     428
     403: aload_0
     404: getfield      #5                  // Field first:Z
     407: ifne          418
     410: new           #32                 // class io/undertow/protocols/http2/HpackException
     413: dup
     414: invokespecial #33                 // Method io/undertow/protocols/http2/HpackException."<init>":()V
     417: athrow
     418: aload_0
     419: aload_1
     420: iload_3
     421: invokevirtual #34                 // Method handleMaxMemorySizeChange:(Ljava/nio/ByteBuffer;I)Z
     424: ifne          439
     427: return
     428: getstatic     #22                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
     431: iload         4
     433: invokeinterface #35,  2           // InterfaceMethod io/undertow/UndertowMessages.invalidHpackEncoding:(B)Lio/undertow/protocols/http2/HpackException;
     438: athrow
     439: goto          0
     442: iload_2
     443: ifne          451
     446: aload_0
     447: iconst_1
     448: putfield      #5                  // Field first:Z
     451: return

  private boolean handleMaxMemorySizeChange(java.nio.ByteBuffer, int) throws io.undertow.protocols.http2.HpackException;
    Code:
       0: aload_1
       1: aload_1
       2: invokevirtual #18                 // Method java/nio/ByteBuffer.position:()I
       5: iconst_1
       6: isub
       7: invokevirtual #20                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/ByteBuffer;
      10: pop
      11: aload_1
      12: iconst_5
      13: invokestatic  #21                 // Method io/undertow/protocols/http2/Hpack.decodeInteger:(Ljava/nio/ByteBuffer;I)I
      16: istore_3
      17: iload_3
      18: iconst_m1
      19: if_icmpne     30
      22: aload_1
      23: iload_2
      24: invokevirtual #20                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/ByteBuffer;
      27: pop
      28: iconst_0
      29: ireturn
      30: iload_3
      31: aload_0
      32: getfield      #12                 // Field maxAllowedMemorySize:I
      35: if_icmple     47
      38: new           #32                 // class io/undertow/protocols/http2/HpackException
      41: dup
      42: iconst_1
      43: invokespecial #37                 // Method io/undertow/protocols/http2/HpackException."<init>":(I)V
      46: athrow
      47: aload_0
      48: iload_3
      49: putfield      #11                 // Field specifiedMemorySize:I
      52: aload_0
      53: getfield      #4                  // Field currentMemorySize:I
      56: aload_0
      57: getfield      #11                 // Field specifiedMemorySize:I
      60: if_icmple     166
      63: aload_0
      64: getfield      #3                  // Field filledTableSlots:I
      67: istore        4
      69: aload_0
      70: getfield      #15                 // Field headerTable:[Lio/undertow/protocols/http2/Hpack$HeaderField;
      73: arraylength
      74: istore        5
      76: aload_0
      77: getfield      #4                  // Field currentMemorySize:I
      80: istore        6
      82: iload         6
      84: aload_0
      85: getfield      #11                 // Field specifiedMemorySize:I
      88: if_icmple     154
      91: aload_0
      92: getfield      #2                  // Field firstSlotPosition:I
      95: istore        7
      97: aload_0
      98: dup
      99: getfield      #2                  // Field firstSlotPosition:I
     102: iconst_1
     103: iadd
     104: putfield      #2                  // Field firstSlotPosition:I
     107: aload_0
     108: getfield      #2                  // Field firstSlotPosition:I
     111: iload         5
     113: if_icmpne     121
     116: aload_0
     117: iconst_0
     118: putfield      #2                  // Field firstSlotPosition:I
     121: aload_0
     122: getfield      #15                 // Field headerTable:[Lio/undertow/protocols/http2/Hpack$HeaderField;
     125: iload         7
     127: aaload
     128: astore        8
     130: aload_0
     131: getfield      #15                 // Field headerTable:[Lio/undertow/protocols/http2/Hpack$HeaderField;
     134: iload         7
     136: aconst_null
     137: aastore
     138: iload         6
     140: aload         8
     142: getfield      #38                 // Field io/undertow/protocols/http2/Hpack$HeaderField.size:I
     145: isub
     146: istore        6
     148: iinc          4, -1
     151: goto          82
     154: aload_0
     155: iload         4
     157: putfield      #3                  // Field filledTableSlots:I
     160: aload_0
     161: iload         6
     163: putfield      #4                  // Field currentMemorySize:I
     166: iconst_1
     167: ireturn

  private io.undertow.util.HttpString readHeaderName(java.nio.ByteBuffer, int) throws io.undertow.protocols.http2.HpackException;
    Code:
       0: aload_1
       1: aload_1
       2: invokevirtual #18                 // Method java/nio/ByteBuffer.position:()I
       5: iconst_1
       6: isub
       7: invokevirtual #20                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/ByteBuffer;
      10: pop
      11: aload_1
      12: iload_2
      13: invokestatic  #21                 // Method io/undertow/protocols/http2/Hpack.decodeInteger:(Ljava/nio/ByteBuffer;I)I
      16: istore_3
      17: iload_3
      18: iconst_m1
      19: if_icmpne     24
      22: aconst_null
      23: areturn
      24: iload_3
      25: ifeq          34
      28: aload_0
      29: iload_3
      30: invokevirtual #39                 // Method handleIndexedHeaderName:(I)Lio/undertow/util/HttpString;
      33: areturn
      34: aload_0
      35: aload_1
      36: invokevirtual #27                 // Method readHpackString:(Ljava/nio/ByteBuffer;)Ljava/lang/String;
      39: astore        4
      41: aload         4
      43: ifnonnull     48
      46: aconst_null
      47: areturn
      48: aload         4
      50: invokevirtual #40                 // Method java/lang/String.isEmpty:()Z
      53: ifeq          64
      56: new           #32                 // class io/undertow/protocols/http2/HpackException
      59: dup
      60: invokespecial #33                 // Method io/undertow/protocols/http2/HpackException."<init>":()V
      63: athrow
      64: new           #41                 // class io/undertow/util/HttpString
      67: dup
      68: aload         4
      70: invokespecial #42                 // Method io/undertow/util/HttpString."<init>":(Ljava/lang/String;)V
      73: areturn

  private java.lang.String readHpackString(java.nio.ByteBuffer) throws io.undertow.protocols.http2.HpackException;
    Code:
       0: aload_1
       1: invokevirtual #17                 // Method java/nio/ByteBuffer.hasRemaining:()Z
       4: ifne          9
       7: aconst_null
       8: areturn
       9: aload_1
      10: aload_1
      11: invokevirtual #18                 // Method java/nio/ByteBuffer.position:()I
      14: invokevirtual #43                 // Method java/nio/ByteBuffer.get:(I)B
      17: istore_2
      18: aload_1
      19: bipush        7
      21: invokestatic  #21                 // Method io/undertow/protocols/http2/Hpack.decodeInteger:(Ljava/nio/ByteBuffer;I)I
      24: istore_3
      25: aload_1
      26: invokevirtual #44                 // Method java/nio/ByteBuffer.remaining:()I
      29: iload_3
      30: if_icmplt     38
      33: iload_3
      34: iconst_m1
      35: if_icmpne     40
      38: aconst_null
      39: areturn
      40: iload_2
      41: sipush        128
      44: iand
      45: ifeq          52
      48: iconst_1
      49: goto          53
      52: iconst_0
      53: istore        4
      55: iload         4
      57: ifeq          67
      60: aload_0
      61: iload_3
      62: aload_1
      63: invokevirtual #45                 // Method readHuffmanString:(ILjava/nio/ByteBuffer;)Ljava/lang/String;
      66: areturn
      67: iconst_0
      68: istore        5
      70: iload         5
      72: iload_3
      73: if_icmpge     95
      76: aload_0
      77: getfield      #8                  // Field stringBuilder:Ljava/lang/StringBuilder;
      80: aload_1
      81: invokevirtual #19                 // Method java/nio/ByteBuffer.get:()B
      84: i2c
      85: invokevirtual #46                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      88: pop
      89: iinc          5, 1
      92: goto          70
      95: aload_0
      96: getfield      #8                  // Field stringBuilder:Ljava/lang/StringBuilder;
      99: invokevirtual #47                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     102: astore        5
     104: aload_0
     105: getfield      #8                  // Field stringBuilder:Ljava/lang/StringBuilder;
     108: iconst_0
     109: invokevirtual #48                 // Method java/lang/StringBuilder.setLength:(I)V
     112: aload         5
     114: invokevirtual #40                 // Method java/lang/String.isEmpty:()Z
     117: ifeq          123
     120: ldc           #49                 // String
     122: areturn
     123: aload         5
     125: areturn

  private java.lang.String readHuffmanString(int, java.nio.ByteBuffer) throws io.undertow.protocols.http2.HpackException;
    Code:
       0: aload_2
       1: iload_1
       2: aload_0
       3: getfield      #8                  // Field stringBuilder:Ljava/lang/StringBuilder;
       6: invokestatic  #50                 // Method io/undertow/protocols/http2/HPackHuffman.decode:(Ljava/nio/ByteBuffer;ILjava/lang/StringBuilder;)V
       9: aload_0
      10: getfield      #8                  // Field stringBuilder:Ljava/lang/StringBuilder;
      13: invokevirtual #47                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      16: astore_3
      17: aload_3
      18: invokevirtual #40                 // Method java/lang/String.isEmpty:()Z
      21: ifeq          27
      24: ldc           #49                 // String
      26: areturn
      27: aload_0
      28: getfield      #8                  // Field stringBuilder:Ljava/lang/StringBuilder;
      31: iconst_0
      32: invokevirtual #48                 // Method java/lang/StringBuilder.setLength:(I)V
      35: aload_3
      36: areturn

  private io.undertow.util.HttpString handleIndexedHeaderName(int) throws io.undertow.protocols.http2.HpackException;
    Code:
       0: iload_1
       1: getstatic     #51                 // Field io/undertow/protocols/http2/Hpack.STATIC_TABLE_LENGTH:I
       4: if_icmpgt     16
       7: getstatic     #52                 // Field io/undertow/protocols/http2/Hpack.STATIC_TABLE:[Lio/undertow/protocols/http2/Hpack$HeaderField;
      10: iload_1
      11: aaload
      12: getfield      #53                 // Field io/undertow/protocols/http2/Hpack$HeaderField.name:Lio/undertow/util/HttpString;
      15: areturn
      16: iload_1
      17: getstatic     #51                 // Field io/undertow/protocols/http2/Hpack.STATIC_TABLE_LENGTH:I
      20: aload_0
      21: getfield      #3                  // Field filledTableSlots:I
      24: iadd
      25: if_icmple     36
      28: new           #32                 // class io/undertow/protocols/http2/HpackException
      31: dup
      32: invokespecial #33                 // Method io/undertow/protocols/http2/HpackException."<init>":()V
      35: athrow
      36: aload_0
      37: iload_1
      38: getstatic     #51                 // Field io/undertow/protocols/http2/Hpack.STATIC_TABLE_LENGTH:I
      41: isub
      42: invokevirtual #54                 // Method getRealIndex:(I)I
      45: istore_2
      46: aload_0
      47: getfield      #15                 // Field headerTable:[Lio/undertow/protocols/http2/Hpack$HeaderField;
      50: iload_2
      51: aaload
      52: astore_3
      53: aload_3
      54: ifnonnull     65
      57: new           #32                 // class io/undertow/protocols/http2/HpackException
      60: dup
      61: invokespecial #33                 // Method io/undertow/protocols/http2/HpackException."<init>":()V
      64: athrow
      65: aload_3
      66: getfield      #53                 // Field io/undertow/protocols/http2/Hpack$HeaderField.name:Lio/undertow/util/HttpString;
      69: areturn

  private void handleIndex(int) throws io.undertow.protocols.http2.HpackException;
    Code:
       0: iload_1
       1: getstatic     #51                 // Field io/undertow/protocols/http2/Hpack.STATIC_TABLE_LENGTH:I
       4: if_icmpgt     15
       7: aload_0
       8: iload_1
       9: invokevirtual #55                 // Method addStaticTableEntry:(I)V
      12: goto          50
      15: aload_0
      16: iload_1
      17: getstatic     #51                 // Field io/undertow/protocols/http2/Hpack.STATIC_TABLE_LENGTH:I
      20: isub
      21: invokevirtual #54                 // Method getRealIndex:(I)I
      24: istore_2
      25: aload_0
      26: getfield      #15                 // Field headerTable:[Lio/undertow/protocols/http2/Hpack$HeaderField;
      29: iload_2
      30: aaload
      31: astore_3
      32: aload_0
      33: getfield      #28                 // Field headerEmitter:Lio/undertow/protocols/http2/HpackDecoder$HeaderEmitter;
      36: aload_3
      37: getfield      #53                 // Field io/undertow/protocols/http2/Hpack$HeaderField.name:Lio/undertow/util/HttpString;
      40: aload_3
      41: getfield      #56                 // Field io/undertow/protocols/http2/Hpack$HeaderField.value:Ljava/lang/String;
      44: iconst_0
      45: invokeinterface #29,  4           // InterfaceMethod io/undertow/protocols/http2/HpackDecoder$HeaderEmitter.emitHeader:(Lio/undertow/util/HttpString;Ljava/lang/String;Z)V
      50: return

  int getRealIndex(int) throws io.undertow.protocols.http2.HpackException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field firstSlotPosition:I
       4: aload_0
       5: getfield      #3                  // Field filledTableSlots:I
       8: iload_1
       9: isub
      10: iadd
      11: aload_0
      12: getfield      #15                 // Field headerTable:[Lio/undertow/protocols/http2/Hpack$HeaderField;
      15: arraylength
      16: irem
      17: istore_2
      18: iload_2
      19: ifge          32
      22: getstatic     #22                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      25: iload_1
      26: invokeinterface #57,  2           // InterfaceMethod io/undertow/UndertowMessages.invalidHpackIndex:(I)Lio/undertow/protocols/http2/HpackException;
      31: athrow
      32: iload_2
      33: ireturn

  private void addStaticTableEntry(int) throws io.undertow.protocols.http2.HpackException;
    Code:
       0: getstatic     #52                 // Field io/undertow/protocols/http2/Hpack.STATIC_TABLE:[Lio/undertow/protocols/http2/Hpack$HeaderField;
       3: iload_1
       4: aaload
       5: astore_2
       6: aload_0
       7: getfield      #28                 // Field headerEmitter:Lio/undertow/protocols/http2/HpackDecoder$HeaderEmitter;
      10: aload_2
      11: getfield      #53                 // Field io/undertow/protocols/http2/Hpack$HeaderField.name:Lio/undertow/util/HttpString;
      14: aload_2
      15: getfield      #56                 // Field io/undertow/protocols/http2/Hpack$HeaderField.value:Ljava/lang/String;
      18: ifnonnull     26
      21: ldc           #49                 // String
      23: goto          30
      26: aload_2
      27: getfield      #56                 // Field io/undertow/protocols/http2/Hpack$HeaderField.value:Ljava/lang/String;
      30: iconst_0
      31: invokeinterface #29,  4           // InterfaceMethod io/undertow/protocols/http2/HpackDecoder$HeaderEmitter.emitHeader:(Lio/undertow/util/HttpString;Ljava/lang/String;Z)V
      36: return

  private void addEntryToHeaderTable(io.undertow.protocols.http2.Hpack$HeaderField);
    Code:
       0: aload_1
       1: getfield      #38                 // Field io/undertow/protocols/http2/Hpack$HeaderField.size:I
       4: aload_0
       5: getfield      #11                 // Field specifiedMemorySize:I
       8: if_icmple     74
      11: aload_0
      12: getfield      #3                  // Field filledTableSlots:I
      15: ifle          68
      18: aload_0
      19: getfield      #15                 // Field headerTable:[Lio/undertow/protocols/http2/Hpack$HeaderField;
      22: aload_0
      23: getfield      #2                  // Field firstSlotPosition:I
      26: aconst_null
      27: aastore
      28: aload_0
      29: dup
      30: getfield      #2                  // Field firstSlotPosition:I
      33: iconst_1
      34: iadd
      35: putfield      #2                  // Field firstSlotPosition:I
      38: aload_0
      39: getfield      #2                  // Field firstSlotPosition:I
      42: aload_0
      43: getfield      #15                 // Field headerTable:[Lio/undertow/protocols/http2/Hpack$HeaderField;
      46: arraylength
      47: if_icmpne     55
      50: aload_0
      51: iconst_0
      52: putfield      #2                  // Field firstSlotPosition:I
      55: aload_0
      56: dup
      57: getfield      #3                  // Field filledTableSlots:I
      60: iconst_1
      61: isub
      62: putfield      #3                  // Field filledTableSlots:I
      65: goto          11
      68: aload_0
      69: iconst_0
      70: putfield      #4                  // Field currentMemorySize:I
      73: return
      74: aload_0
      75: invokevirtual #58                 // Method resizeIfRequired:()V
      78: aload_0
      79: getfield      #3                  // Field filledTableSlots:I
      82: iconst_1
      83: iadd
      84: istore_2
      85: aload_0
      86: getfield      #15                 // Field headerTable:[Lio/undertow/protocols/http2/Hpack$HeaderField;
      89: arraylength
      90: istore_3
      91: aload_0
      92: getfield      #2                  // Field firstSlotPosition:I
      95: aload_0
      96: getfield      #3                  // Field filledTableSlots:I
      99: iadd
     100: iload_3
     101: irem
     102: istore        4
     104: aload_0
     105: getfield      #15                 // Field headerTable:[Lio/undertow/protocols/http2/Hpack$HeaderField;
     108: iload         4
     110: aload_1
     111: aastore
     112: aload_0
     113: getfield      #4                  // Field currentMemorySize:I
     116: aload_1
     117: getfield      #38                 // Field io/undertow/protocols/http2/Hpack$HeaderField.size:I
     120: iadd
     121: istore        5
     123: iload         5
     125: aload_0
     126: getfield      #11                 // Field specifiedMemorySize:I
     129: if_icmple     194
     132: aload_0
     133: getfield      #2                  // Field firstSlotPosition:I
     136: istore        6
     138: aload_0
     139: dup
     140: getfield      #2                  // Field firstSlotPosition:I
     143: iconst_1
     144: iadd
     145: putfield      #2                  // Field firstSlotPosition:I
     148: aload_0
     149: getfield      #2                  // Field firstSlotPosition:I
     152: iload_3
     153: if_icmpne     161
     156: aload_0
     157: iconst_0
     158: putfield      #2                  // Field firstSlotPosition:I
     161: aload_0
     162: getfield      #15                 // Field headerTable:[Lio/undertow/protocols/http2/Hpack$HeaderField;
     165: iload         6
     167: aaload
     168: astore        7
     170: aload_0
     171: getfield      #15                 // Field headerTable:[Lio/undertow/protocols/http2/Hpack$HeaderField;
     174: iload         6
     176: aconst_null
     177: aastore
     178: iload         5
     180: aload         7
     182: getfield      #38                 // Field io/undertow/protocols/http2/Hpack$HeaderField.size:I
     185: isub
     186: istore        5
     188: iinc          2, -1
     191: goto          123
     194: aload_0
     195: iload_2
     196: putfield      #3                  // Field filledTableSlots:I
     199: aload_0
     200: iload         5
     202: putfield      #4                  // Field currentMemorySize:I
     205: return

  private void resizeIfRequired();
    Code:
       0: aload_0
       1: getfield      #3                  // Field filledTableSlots:I
       4: aload_0
       5: getfield      #15                 // Field headerTable:[Lio/undertow/protocols/http2/Hpack$HeaderField;
       8: arraylength
       9: if_icmpne     71
      12: aload_0
      13: getfield      #15                 // Field headerTable:[Lio/undertow/protocols/http2/Hpack$HeaderField;
      16: arraylength
      17: bipush        10
      19: iadd
      20: anewarray     #14                 // class io/undertow/protocols/http2/Hpack$HeaderField
      23: astore_1
      24: iconst_0
      25: istore_2
      26: iload_2
      27: aload_0
      28: getfield      #15                 // Field headerTable:[Lio/undertow/protocols/http2/Hpack$HeaderField;
      31: arraylength
      32: if_icmpge     61
      35: aload_1
      36: iload_2
      37: aload_0
      38: getfield      #15                 // Field headerTable:[Lio/undertow/protocols/http2/Hpack$HeaderField;
      41: aload_0
      42: getfield      #2                  // Field firstSlotPosition:I
      45: iload_2
      46: iadd
      47: aload_0
      48: getfield      #15                 // Field headerTable:[Lio/undertow/protocols/http2/Hpack$HeaderField;
      51: arraylength
      52: irem
      53: aaload
      54: aastore
      55: iinc          2, 1
      58: goto          26
      61: aload_0
      62: iconst_0
      63: putfield      #2                  // Field firstSlotPosition:I
      66: aload_0
      67: aload_1
      68: putfield      #15                 // Field headerTable:[Lio/undertow/protocols/http2/Hpack$HeaderField;
      71: return

  public io.undertow.protocols.http2.HpackDecoder$HeaderEmitter getHeaderEmitter();
    Code:
       0: aload_0
       1: getfield      #28                 // Field headerEmitter:Lio/undertow/protocols/http2/HpackDecoder$HeaderEmitter;
       4: areturn

  public void setHeaderEmitter(io.undertow.protocols.http2.HpackDecoder$HeaderEmitter);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #28                 // Field headerEmitter:Lio/undertow/protocols/http2/HpackDecoder$HeaderEmitter;
       5: return

  int getFirstSlotPosition();
    Code:
       0: aload_0
       1: getfield      #2                  // Field firstSlotPosition:I
       4: ireturn

  io.undertow.protocols.http2.Hpack$HeaderField[] getHeaderTable();
    Code:
       0: aload_0
       1: getfield      #15                 // Field headerTable:[Lio/undertow/protocols/http2/Hpack$HeaderField;
       4: areturn

  int getFilledTableSlots();
    Code:
       0: aload_0
       1: getfield      #3                  // Field filledTableSlots:I
       4: ireturn

  int getCurrentMemorySize();
    Code:
       0: aload_0
       1: getfield      #4                  // Field currentMemorySize:I
       4: ireturn

  int getSpecifiedMemorySize();
    Code:
       0: aload_0
       1: getfield      #11                 // Field specifiedMemorySize:I
       4: ireturn
}
