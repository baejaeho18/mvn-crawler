Compiled from "Http2Channel.java"
class io.undertow.protocols.http2.Http2Channel$Http2ControlMessageExceptionHandler implements org.xnio.ChannelExceptionHandler<io.undertow.protocols.http2.AbstractHttp2StreamSinkChannel> {
  final io.undertow.protocols.http2.Http2Channel this$0;

  private io.undertow.protocols.http2.Http2Channel$Http2ControlMessageExceptionHandler(io.undertow.protocols.http2.Http2Channel);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lio/undertow/protocols/http2/Http2Channel;
       5: aload_0
       6: invokespecial #2                  // Method java/lang/Object."<init>":()V
       9: return

  public void handleException(io.undertow.protocols.http2.AbstractHttp2StreamSinkChannel, java.io.IOException);
    Code:
       0: aload_1
       1: invokestatic  #3                  // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
       4: aload_0
       5: getfield      #1                  // Field this$0:Lio/undertow/protocols/http2/Http2Channel;
       8: aload_2
       9: invokevirtual #4                  // Method io/undertow/protocols/http2/Http2Channel.handleBrokenSinkChannel:(Ljava/lang/Throwable;)V
      12: return

  public void handleException(java.nio.channels.Channel, java.io.IOException);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #5                  // class io/undertow/protocols/http2/AbstractHttp2StreamSinkChannel
       5: aload_2
       6: invokevirtual #6                  // Method handleException:(Lio/undertow/protocols/http2/AbstractHttp2StreamSinkChannel;Ljava/io/IOException;)V
       9: return
}
