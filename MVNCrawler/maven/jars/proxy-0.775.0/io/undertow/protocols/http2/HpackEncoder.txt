Compiled from "HpackEncoder.java"
public class io.undertow.protocols.http2.HpackEncoder {
  private static final java.util.Set<io.undertow.util.HttpString> SKIP;

  public static final io.undertow.protocols.http2.HpackEncoder$HpackHeaderFunction DEFAULT_HEADER_FUNCTION;

  private long headersIterator;

  private boolean firstPass;

  private io.undertow.util.HeaderMap currentHeaders;

  private int entryPositionCounter;

  private int newMaxHeaderSize;

  private int minNewMaxHeaderSize;

  private static final java.util.Map<io.undertow.util.HttpString, io.undertow.protocols.http2.HpackEncoder$TableEntry[]> ENCODING_STATIC_TABLE;

  private final java.util.Deque<io.undertow.protocols.http2.HpackEncoder$TableEntry> evictionQueue;

  private final java.util.Map<io.undertow.util.HttpString, java.util.List<io.undertow.protocols.http2.HpackEncoder$TableEntry>> dynamicTable;

  private byte[] overflowData;

  private int overflowPos;

  private int overflowLength;

  private int maxTableSize;

  private int currentTableSize;

  private final io.undertow.protocols.http2.HpackEncoder$HpackHeaderFunction hpackHeaderFunction;

  public io.undertow.protocols.http2.HpackEncoder(int, io.undertow.protocols.http2.HpackEncoder$HpackHeaderFunction);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: ldc2_w        #2                  // long -1l
       8: putfield      #4                  // Field headersIterator:J
      11: aload_0
      12: iconst_1
      13: putfield      #5                  // Field firstPass:Z
      16: aload_0
      17: iconst_m1
      18: putfield      #6                  // Field newMaxHeaderSize:I
      21: aload_0
      22: iconst_m1
      23: putfield      #7                  // Field minNewMaxHeaderSize:I
      26: aload_0
      27: new           #8                  // class java/util/ArrayDeque
      30: dup
      31: invokespecial #9                  // Method java/util/ArrayDeque."<init>":()V
      34: putfield      #10                 // Field evictionQueue:Ljava/util/Deque;
      37: aload_0
      38: new           #11                 // class java/util/HashMap
      41: dup
      42: invokespecial #12                 // Method java/util/HashMap."<init>":()V
      45: putfield      #13                 // Field dynamicTable:Ljava/util/Map;
      48: aload_0
      49: iload_1
      50: putfield      #14                 // Field maxTableSize:I
      53: aload_0
      54: aload_2
      55: putfield      #15                 // Field hpackHeaderFunction:Lio/undertow/protocols/http2/HpackEncoder$HpackHeaderFunction;
      58: return

  public io.undertow.protocols.http2.HpackEncoder(int);
    Code:
       0: aload_0
       1: iload_1
       2: getstatic     #16                 // Field DEFAULT_HEADER_FUNCTION:Lio/undertow/protocols/http2/HpackEncoder$HpackHeaderFunction;
       5: invokespecial #17                 // Method "<init>":(ILio/undertow/protocols/http2/HpackEncoder$HpackHeaderFunction;)V
       8: return

  public io.undertow.protocols.http2.HpackEncoder$State encode(io.undertow.util.HeaderMap, java.nio.ByteBuffer);
    Code:
       0: aload_0
       1: getfield      #18                 // Field overflowData:[B
       4: ifnull        58
       7: aload_0
       8: getfield      #19                 // Field overflowPos:I
      11: istore_3
      12: iload_3
      13: aload_0
      14: getfield      #20                 // Field overflowLength:I
      17: if_icmpge     53
      20: aload_2
      21: invokevirtual #21                 // Method java/nio/ByteBuffer.hasRemaining:()Z
      24: ifne          36
      27: aload_0
      28: iload_3
      29: putfield      #19                 // Field overflowPos:I
      32: getstatic     #22                 // Field io/undertow/protocols/http2/HpackEncoder$State.OVERFLOW:Lio/undertow/protocols/http2/HpackEncoder$State;
      35: areturn
      36: aload_2
      37: aload_0
      38: getfield      #18                 // Field overflowData:[B
      41: iload_3
      42: baload
      43: invokevirtual #23                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;
      46: pop
      47: iinc          3, 1
      50: goto          12
      53: aload_0
      54: aconst_null
      55: putfield      #18                 // Field overflowData:[B
      58: aload_0
      59: getfield      #4                  // Field headersIterator:J
      62: lstore_3
      63: aload_0
      64: getfield      #4                  // Field headersIterator:J
      67: ldc2_w        #2                  // long -1l
      70: lcmp
      71: ifne          92
      74: aload_0
      75: aload_2
      76: invokevirtual #24                 // Method handleTableSizeChange:(Ljava/nio/ByteBuffer;)V
      79: aload_1
      80: invokevirtual #25                 // Method io/undertow/util/HeaderMap.fastIterate:()J
      83: lstore_3
      84: aload_0
      85: aload_1
      86: putfield      #26                 // Field currentHeaders:Lio/undertow/util/HeaderMap;
      89: goto          114
      92: aload_1
      93: aload_0
      94: getfield      #26                 // Field currentHeaders:Lio/undertow/util/HeaderMap;
      97: if_acmpeq     108
     100: new           #27                 // class java/lang/IllegalStateException
     103: dup
     104: invokespecial #28                 // Method java/lang/IllegalStateException."<init>":()V
     107: athrow
     108: aload_1
     109: lload_3
     110: invokevirtual #29                 // Method io/undertow/util/HeaderMap.fiNext:(J)J
     113: lstore_3
     114: lload_3
     115: ldc2_w        #2                  // long -1l
     118: lcmp
     119: ifeq          661
     122: aload_1
     123: lload_3
     124: invokevirtual #30                 // Method io/undertow/util/HeaderMap.fiCurrent:(J)Lio/undertow/util/HeaderValues;
     127: astore        5
     129: iconst_0
     130: istore        6
     132: aload_0
     133: getfield      #5                  // Field firstPass:Z
     136: ifeq          159
     139: aload         5
     141: invokevirtual #31                 // Method io/undertow/util/HeaderValues.getHeaderName:()Lio/undertow/util/HttpString;
     144: iconst_0
     145: invokevirtual #32                 // Method io/undertow/util/HttpString.byteAt:(I)B
     148: bipush        58
     150: if_icmpeq     176
     153: iconst_1
     154: istore        6
     156: goto          176
     159: aload         5
     161: invokevirtual #31                 // Method io/undertow/util/HeaderValues.getHeaderName:()Lio/undertow/util/HttpString;
     164: iconst_0
     165: invokevirtual #32                 // Method io/undertow/util/HttpString.byteAt:(I)B
     168: bipush        58
     170: if_icmpne     176
     173: iconst_1
     174: istore        6
     176: getstatic     #33                 // Field SKIP:Ljava/util/Set;
     179: aload         5
     181: invokevirtual #31                 // Method io/undertow/util/HeaderValues.getHeaderName:()Lio/undertow/util/HttpString;
     184: invokeinterface #34,  2           // InterfaceMethod java/util/Set.contains:(Ljava/lang/Object;)Z
     189: ifeq          195
     192: iconst_1
     193: istore        6
     195: iload         6
     197: ifne          627
     200: iconst_0
     201: istore        7
     203: iload         7
     205: aload         5
     207: invokevirtual #35                 // Method io/undertow/util/HeaderValues.size:()I
     210: if_icmpge     627
     213: aload         5
     215: invokevirtual #31                 // Method io/undertow/util/HeaderValues.getHeaderName:()Lio/undertow/util/HttpString;
     218: astore        8
     220: bipush        11
     222: aload         8
     224: invokevirtual #36                 // Method io/undertow/util/HttpString.length:()I
     227: iadd
     228: istore        9
     230: aload         5
     232: iload         7
     234: invokevirtual #37                 // Method io/undertow/util/HeaderValues.get:(I)Ljava/lang/String;
     237: astore        10
     239: iconst_0
     240: istore        11
     242: iload         11
     244: aload         10
     246: invokevirtual #38                 // Method java/lang/String.length:()I
     249: if_icmpge     302
     252: aload         10
     254: iload         11
     256: invokevirtual #39                 // Method java/lang/String.charAt:(I)C
     259: istore        12
     261: iload         12
     263: bipush        13
     265: if_icmpeq     275
     268: iload         12
     270: bipush        10
     272: if_icmpne     296
     275: aload         10
     277: bipush        13
     279: bipush        32
     281: invokevirtual #40                 // Method java/lang/String.replace:(CC)Ljava/lang/String;
     284: bipush        10
     286: bipush        32
     288: invokevirtual #40                 // Method java/lang/String.replace:(CC)Ljava/lang/String;
     291: astore        10
     293: goto          302
     296: iinc          11, 1
     299: goto          242
     302: aload_0
     303: aload         8
     305: aload         10
     307: invokevirtual #41                 // Method findInTable:(Lio/undertow/util/HttpString;Ljava/lang/String;)Lio/undertow/protocols/http2/HpackEncoder$TableEntry;
     310: astore        11
     312: iload         9
     314: iconst_1
     315: aload         10
     317: invokevirtual #38                 // Method java/lang/String.length:()I
     320: iadd
     321: iadd
     322: istore        9
     324: iconst_0
     325: istore        12
     327: aload_2
     328: astore        13
     330: aload         13
     332: invokevirtual #42                 // Method java/nio/ByteBuffer.remaining:()I
     335: iload         9
     337: if_icmpge     362
     340: iconst_1
     341: istore        12
     343: aload_0
     344: iload         9
     346: newarray       byte
     348: dup_x1
     349: putfield      #18                 // Field overflowData:[B
     352: invokestatic  #43                 // Method java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;
     355: astore        13
     357: aload_0
     358: iconst_0
     359: putfield      #19                 // Field overflowPos:I
     362: aload_0
     363: getfield      #15                 // Field hpackHeaderFunction:Lio/undertow/protocols/http2/HpackEncoder$HpackHeaderFunction;
     366: aload         8
     368: aload         10
     370: invokeinterface #44,  3           // InterfaceMethod io/undertow/protocols/http2/HpackEncoder$HpackHeaderFunction.shouldUseIndexing:(Lio/undertow/util/HttpString;Ljava/lang/String;)Z
     375: ifeq          403
     378: aload         8
     380: invokevirtual #36                 // Method io/undertow/util/HttpString.length:()I
     383: aload         10
     385: invokevirtual #38                 // Method java/lang/String.length:()I
     388: iadd
     389: bipush        32
     391: iadd
     392: aload_0
     393: getfield      #14                 // Field maxTableSize:I
     396: if_icmpge     403
     399: iconst_1
     400: goto          404
     403: iconst_0
     404: istore        14
     406: aload         11
     408: ifnonnull     453
     411: iload         14
     413: ifeq          453
     416: aload         13
     418: bipush        64
     420: invokevirtual #23                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;
     423: pop
     424: aload_0
     425: aload         13
     427: aload         8
     429: invokevirtual #45                 // Method writeHuffmanEncodableName:(Ljava/nio/ByteBuffer;Lio/undertow/util/HttpString;)V
     432: aload_0
     433: aload         13
     435: aload         8
     437: aload         10
     439: invokevirtual #46                 // Method writeHuffmanEncodableValue:(Ljava/nio/ByteBuffer;Lio/undertow/util/HttpString;Ljava/lang/String;)V
     442: aload_0
     443: aload         8
     445: aload         10
     447: invokevirtual #47                 // Method addToDynamicTable:(Lio/undertow/util/HttpString;Ljava/lang/String;)V
     450: goto          598
     453: aload         11
     455: ifnonnull     487
     458: aload         13
     460: bipush        16
     462: invokevirtual #23                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;
     465: pop
     466: aload_0
     467: aload         13
     469: aload         8
     471: invokevirtual #45                 // Method writeHuffmanEncodableName:(Ljava/nio/ByteBuffer;Lio/undertow/util/HttpString;)V
     474: aload_0
     475: aload         13
     477: aload         8
     479: aload         10
     481: invokevirtual #46                 // Method writeHuffmanEncodableValue:(Ljava/nio/ByteBuffer;Lio/undertow/util/HttpString;Ljava/lang/String;)V
     484: goto          598
     487: aload         10
     489: aload         11
     491: getfield      #48                 // Field io/undertow/protocols/http2/HpackEncoder$TableEntry.value:Ljava/lang/String;
     494: invokevirtual #49                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     497: ifeq          523
     500: aload         13
     502: bipush        -128
     504: invokevirtual #23                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;
     507: pop
     508: aload         13
     510: aload         11
     512: invokevirtual #50                 // Method io/undertow/protocols/http2/HpackEncoder$TableEntry.getPosition:()I
     515: bipush        7
     517: invokestatic  #51                 // Method io/undertow/protocols/http2/Hpack.encodeInteger:(Ljava/nio/ByteBuffer;II)V
     520: goto          598
     523: iload         14
     525: ifeq          569
     528: aload         13
     530: bipush        64
     532: invokevirtual #23                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;
     535: pop
     536: aload         13
     538: aload         11
     540: invokevirtual #50                 // Method io/undertow/protocols/http2/HpackEncoder$TableEntry.getPosition:()I
     543: bipush        6
     545: invokestatic  #51                 // Method io/undertow/protocols/http2/Hpack.encodeInteger:(Ljava/nio/ByteBuffer;II)V
     548: aload_0
     549: aload         13
     551: aload         8
     553: aload         10
     555: invokevirtual #46                 // Method writeHuffmanEncodableValue:(Ljava/nio/ByteBuffer;Lio/undertow/util/HttpString;Ljava/lang/String;)V
     558: aload_0
     559: aload         8
     561: aload         10
     563: invokevirtual #47                 // Method addToDynamicTable:(Lio/undertow/util/HttpString;Ljava/lang/String;)V
     566: goto          598
     569: aload         13
     571: bipush        16
     573: invokevirtual #23                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;
     576: pop
     577: aload         13
     579: aload         11
     581: invokevirtual #50                 // Method io/undertow/protocols/http2/HpackEncoder$TableEntry.getPosition:()I
     584: iconst_4
     585: invokestatic  #51                 // Method io/undertow/protocols/http2/Hpack.encodeInteger:(Ljava/nio/ByteBuffer;II)V
     588: aload_0
     589: aload         13
     591: aload         8
     593: aload         10
     595: invokevirtual #46                 // Method writeHuffmanEncodableValue:(Ljava/nio/ByteBuffer;Lio/undertow/util/HttpString;Ljava/lang/String;)V
     598: iload         12
     600: ifeq          621
     603: aload_0
     604: lload_3
     605: putfield      #4                  // Field headersIterator:J
     608: aload_0
     609: aload         13
     611: invokevirtual #52                 // Method java/nio/ByteBuffer.position:()I
     614: putfield      #20                 // Field overflowLength:I
     617: getstatic     #22                 // Field io/undertow/protocols/http2/HpackEncoder$State.OVERFLOW:Lio/undertow/protocols/http2/HpackEncoder$State;
     620: areturn
     621: iinc          7, 1
     624: goto          203
     627: aload_1
     628: lload_3
     629: invokevirtual #29                 // Method io/undertow/util/HeaderMap.fiNext:(J)J
     632: lstore_3
     633: lload_3
     634: ldc2_w        #2                  // long -1l
     637: lcmp
     638: ifne          658
     641: aload_0
     642: getfield      #5                  // Field firstPass:Z
     645: ifeq          658
     648: aload_0
     649: iconst_0
     650: putfield      #5                  // Field firstPass:Z
     653: aload_1
     654: invokevirtual #25                 // Method io/undertow/util/HeaderMap.fastIterate:()J
     657: lstore_3
     658: goto          114
     661: aload_0
     662: ldc2_w        #2                  // long -1l
     665: putfield      #4                  // Field headersIterator:J
     668: aload_0
     669: iconst_1
     670: putfield      #5                  // Field firstPass:Z
     673: getstatic     #53                 // Field io/undertow/protocols/http2/HpackEncoder$State.COMPLETE:Lio/undertow/protocols/http2/HpackEncoder$State;
     676: areturn

  private void writeHuffmanEncodableName(java.nio.ByteBuffer, io.undertow.util.HttpString);
    Code:
       0: aload_0
       1: getfield      #15                 // Field hpackHeaderFunction:Lio/undertow/protocols/http2/HpackEncoder$HpackHeaderFunction;
       4: aload_2
       5: invokeinterface #54,  2           // InterfaceMethod io/undertow/protocols/http2/HpackEncoder$HpackHeaderFunction.shouldUseHuffman:(Lio/undertow/util/HttpString;)Z
      10: ifeq          26
      13: aload_1
      14: aload_2
      15: invokevirtual #55                 // Method io/undertow/util/HttpString.toString:()Ljava/lang/String;
      18: iconst_1
      19: invokestatic  #56                 // Method io/undertow/protocols/http2/HPackHuffman.encode:(Ljava/nio/ByteBuffer;Ljava/lang/String;Z)Z
      22: ifeq          26
      25: return
      26: aload_1
      27: iconst_0
      28: invokevirtual #23                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;
      31: pop
      32: aload_1
      33: aload_2
      34: invokevirtual #36                 // Method io/undertow/util/HttpString.length:()I
      37: bipush        7
      39: invokestatic  #51                 // Method io/undertow/protocols/http2/Hpack.encodeInteger:(Ljava/nio/ByteBuffer;II)V
      42: iconst_0
      43: istore_3
      44: iload_3
      45: aload_2
      46: invokevirtual #36                 // Method io/undertow/util/HttpString.length:()I
      49: if_icmpge     71
      52: aload_1
      53: aload_2
      54: iload_3
      55: invokevirtual #32                 // Method io/undertow/util/HttpString.byteAt:(I)B
      58: invokestatic  #57                 // Method io/undertow/protocols/http2/Hpack.toLower:(B)B
      61: invokevirtual #23                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;
      64: pop
      65: iinc          3, 1
      68: goto          44
      71: return

  private void writeHuffmanEncodableValue(java.nio.ByteBuffer, io.undertow.util.HttpString, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #15                 // Field hpackHeaderFunction:Lio/undertow/protocols/http2/HpackEncoder$HpackHeaderFunction;
       4: aload_2
       5: aload_3
       6: invokeinterface #58,  3           // InterfaceMethod io/undertow/protocols/http2/HpackEncoder$HpackHeaderFunction.shouldUseHuffman:(Lio/undertow/util/HttpString;Ljava/lang/String;)Z
      11: ifeq          32
      14: aload_1
      15: aload_3
      16: iconst_0
      17: invokestatic  #56                 // Method io/undertow/protocols/http2/HPackHuffman.encode:(Ljava/nio/ByteBuffer;Ljava/lang/String;Z)Z
      20: ifne          38
      23: aload_0
      24: aload_1
      25: aload_3
      26: invokevirtual #59                 // Method writeValueString:(Ljava/nio/ByteBuffer;Ljava/lang/String;)V
      29: goto          38
      32: aload_0
      33: aload_1
      34: aload_3
      35: invokevirtual #59                 // Method writeValueString:(Ljava/nio/ByteBuffer;Ljava/lang/String;)V
      38: return

  private void writeValueString(java.nio.ByteBuffer, java.lang.String);
    Code:
       0: aload_1
       1: iconst_0
       2: invokevirtual #23                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;
       5: pop
       6: aload_1
       7: aload_2
       8: invokevirtual #38                 // Method java/lang/String.length:()I
      11: bipush        7
      13: invokestatic  #51                 // Method io/undertow/protocols/http2/Hpack.encodeInteger:(Ljava/nio/ByteBuffer;II)V
      16: iconst_0
      17: istore_3
      18: iload_3
      19: aload_2
      20: invokevirtual #38                 // Method java/lang/String.length:()I
      23: if_icmpge     43
      26: aload_1
      27: aload_2
      28: iload_3
      29: invokevirtual #39                 // Method java/lang/String.charAt:(I)C
      32: i2b
      33: invokevirtual #23                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;
      36: pop
      37: iinc          3, 1
      40: goto          18
      43: return

  private void addToDynamicTable(io.undertow.util.HttpString, java.lang.String);
    Code:
       0: aload_0
       1: dup
       2: getfield      #60                 // Field entryPositionCounter:I
       5: dup_x1
       6: iconst_1
       7: iadd
       8: putfield      #60                 // Field entryPositionCounter:I
      11: istore_3
      12: new           #61                 // class io/undertow/protocols/http2/HpackEncoder$DynamicTableEntry
      15: dup
      16: aload_0
      17: aload_1
      18: aload_2
      19: iload_3
      20: ineg
      21: invokespecial #62                 // Method io/undertow/protocols/http2/HpackEncoder$DynamicTableEntry."<init>":(Lio/undertow/protocols/http2/HpackEncoder;Lio/undertow/util/HttpString;Ljava/lang/String;I)V
      24: astore        4
      26: aload_0
      27: getfield      #13                 // Field dynamicTable:Ljava/util/Map;
      30: aload_1
      31: invokeinterface #63,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      36: checkcast     #64                 // class java/util/List
      39: astore        5
      41: aload         5
      43: ifnonnull     68
      46: aload_0
      47: getfield      #13                 // Field dynamicTable:Ljava/util/Map;
      50: aload_1
      51: new           #65                 // class java/util/ArrayList
      54: dup
      55: iconst_1
      56: invokespecial #66                 // Method java/util/ArrayList."<init>":(I)V
      59: dup
      60: astore        5
      62: invokeinterface #67,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      67: pop
      68: aload         5
      70: aload         4
      72: invokeinterface #68,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      77: pop
      78: aload_0
      79: getfield      #10                 // Field evictionQueue:Ljava/util/Deque;
      82: aload         4
      84: invokeinterface #69,  2           // InterfaceMethod java/util/Deque.add:(Ljava/lang/Object;)Z
      89: pop
      90: aload_0
      91: dup
      92: getfield      #70                 // Field currentTableSize:I
      95: aload         4
      97: getfield      #71                 // Field io/undertow/protocols/http2/HpackEncoder$DynamicTableEntry.size:I
     100: iadd
     101: putfield      #70                 // Field currentTableSize:I
     104: aload_0
     105: invokevirtual #72                 // Method runEvictionIfRequired:()V
     108: aload_0
     109: getfield      #60                 // Field entryPositionCounter:I
     112: ldc           #74                 // int 2147483647
     114: if_icmpne     121
     117: aload_0
     118: invokevirtual #75                 // Method preventPositionRollover:()V
     121: return

  private void preventPositionRollover();
    Code:
       0: aload_0
       1: getfield      #13                 // Field dynamicTable:Ljava/util/Map;
       4: invokeinterface #76,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
       9: invokeinterface #77,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      14: astore_1
      15: aload_1
      16: invokeinterface #78,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      21: ifeq          85
      24: aload_1
      25: invokeinterface #79,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      30: checkcast     #80                 // class java/util/Map$Entry
      33: astore_2
      34: aload_2
      35: invokeinterface #81,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      40: checkcast     #64                 // class java/util/List
      43: invokeinterface #82,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      48: astore_3
      49: aload_3
      50: invokeinterface #78,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      55: ifeq          82
      58: aload_3
      59: invokeinterface #79,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      64: checkcast     #83                 // class io/undertow/protocols/http2/HpackEncoder$TableEntry
      67: astore        4
      69: aload         4
      71: aload         4
      73: invokevirtual #50                 // Method io/undertow/protocols/http2/HpackEncoder$TableEntry.getPosition:()I
      76: putfield      #84                 // Field io/undertow/protocols/http2/HpackEncoder$TableEntry.position:I
      79: goto          49
      82: goto          15
      85: aload_0
      86: iconst_0
      87: putfield      #60                 // Field entryPositionCounter:I
      90: return

  private void runEvictionIfRequired();
    Code:
       0: aload_0
       1: getfield      #70                 // Field currentTableSize:I
       4: aload_0
       5: getfield      #14                 // Field maxTableSize:I
       8: if_icmple     93
      11: aload_0
      12: getfield      #10                 // Field evictionQueue:Ljava/util/Deque;
      15: invokeinterface #85,  1           // InterfaceMethod java/util/Deque.poll:()Ljava/lang/Object;
      20: checkcast     #83                 // class io/undertow/protocols/http2/HpackEncoder$TableEntry
      23: astore_1
      24: aload_1
      25: ifnonnull     29
      28: return
      29: aload_0
      30: dup
      31: getfield      #70                 // Field currentTableSize:I
      34: aload_1
      35: getfield      #86                 // Field io/undertow/protocols/http2/HpackEncoder$TableEntry.size:I
      38: isub
      39: putfield      #70                 // Field currentTableSize:I
      42: aload_0
      43: getfield      #13                 // Field dynamicTable:Ljava/util/Map;
      46: aload_1
      47: getfield      #87                 // Field io/undertow/protocols/http2/HpackEncoder$TableEntry.name:Lio/undertow/util/HttpString;
      50: invokeinterface #63,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      55: checkcast     #64                 // class java/util/List
      58: astore_2
      59: aload_2
      60: aload_1
      61: invokeinterface #88,  2           // InterfaceMethod java/util/List.remove:(Ljava/lang/Object;)Z
      66: pop
      67: aload_2
      68: invokeinterface #89,  1           // InterfaceMethod java/util/List.isEmpty:()Z
      73: ifeq          90
      76: aload_0
      77: getfield      #13                 // Field dynamicTable:Ljava/util/Map;
      80: aload_1
      81: getfield      #87                 // Field io/undertow/protocols/http2/HpackEncoder$TableEntry.name:Lio/undertow/util/HttpString;
      84: invokeinterface #90,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      89: pop
      90: goto          0
      93: return

  private io.undertow.protocols.http2.HpackEncoder$TableEntry findInTable(io.undertow.util.HttpString, java.lang.String);
    Code:
       0: getstatic     #91                 // Field ENCODING_STATIC_TABLE:Ljava/util/Map;
       3: aload_1
       4: invokeinterface #63,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
       9: checkcast     #92                 // class "[Lio/undertow/protocols/http2/HpackEncoder$TableEntry;"
      12: astore_3
      13: aload_3
      14: ifnull        71
      17: aload_3
      18: astore        4
      20: aload         4
      22: arraylength
      23: istore        5
      25: iconst_0
      26: istore        6
      28: iload         6
      30: iload         5
      32: if_icmpge     71
      35: aload         4
      37: iload         6
      39: aaload
      40: astore        7
      42: aload         7
      44: getfield      #48                 // Field io/undertow/protocols/http2/HpackEncoder$TableEntry.value:Ljava/lang/String;
      47: ifnull        65
      50: aload         7
      52: getfield      #48                 // Field io/undertow/protocols/http2/HpackEncoder$TableEntry.value:Ljava/lang/String;
      55: aload_2
      56: invokevirtual #49                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      59: ifeq          65
      62: aload         7
      64: areturn
      65: iinc          6, 1
      68: goto          28
      71: aload_0
      72: getfield      #13                 // Field dynamicTable:Ljava/util/Map;
      75: aload_1
      76: invokeinterface #63,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      81: checkcast     #64                 // class java/util/List
      84: astore        4
      86: aload         4
      88: ifnull        141
      91: iconst_0
      92: istore        5
      94: iload         5
      96: aload         4
      98: invokeinterface #93,  1           // InterfaceMethod java/util/List.size:()I
     103: if_icmpge     141
     106: aload         4
     108: iload         5
     110: invokeinterface #94,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
     115: checkcast     #83                 // class io/undertow/protocols/http2/HpackEncoder$TableEntry
     118: astore        6
     120: aload         6
     122: getfield      #48                 // Field io/undertow/protocols/http2/HpackEncoder$TableEntry.value:Ljava/lang/String;
     125: aload_2
     126: invokevirtual #49                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     129: ifeq          135
     132: aload         6
     134: areturn
     135: iinc          5, 1
     138: goto          94
     141: aload_3
     142: ifnull        149
     145: aload_3
     146: iconst_0
     147: aaload
     148: areturn
     149: aconst_null
     150: areturn

  public void setMaxTableSize(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #6                  // Field newMaxHeaderSize:I
       5: aload_0
       6: getfield      #7                  // Field minNewMaxHeaderSize:I
       9: iconst_m1
      10: if_icmpne     21
      13: aload_0
      14: iload_1
      15: putfield      #7                  // Field minNewMaxHeaderSize:I
      18: goto          33
      21: aload_0
      22: iload_1
      23: aload_0
      24: getfield      #7                  // Field minNewMaxHeaderSize:I
      27: invokestatic  #95                 // Method java/lang/Math.min:(II)I
      30: putfield      #7                  // Field minNewMaxHeaderSize:I
      33: return

  private void handleTableSizeChange(java.nio.ByteBuffer);
    Code:
       0: aload_0
       1: getfield      #6                  // Field newMaxHeaderSize:I
       4: iconst_m1
       5: if_icmpne     9
       8: return
       9: aload_0
      10: getfield      #7                  // Field minNewMaxHeaderSize:I
      13: aload_0
      14: getfield      #6                  // Field newMaxHeaderSize:I
      17: if_icmpeq     36
      20: aload_1
      21: bipush        32
      23: invokevirtual #23                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;
      26: pop
      27: aload_1
      28: aload_0
      29: getfield      #7                  // Field minNewMaxHeaderSize:I
      32: iconst_5
      33: invokestatic  #51                 // Method io/undertow/protocols/http2/Hpack.encodeInteger:(Ljava/nio/ByteBuffer;II)V
      36: aload_1
      37: bipush        32
      39: invokevirtual #23                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;
      42: pop
      43: aload_1
      44: aload_0
      45: getfield      #6                  // Field newMaxHeaderSize:I
      48: iconst_5
      49: invokestatic  #51                 // Method io/undertow/protocols/http2/Hpack.encodeInteger:(Ljava/nio/ByteBuffer;II)V
      52: aload_0
      53: aload_0
      54: getfield      #6                  // Field newMaxHeaderSize:I
      57: putfield      #14                 // Field maxTableSize:I
      60: aload_0
      61: invokevirtual #72                 // Method runEvictionIfRequired:()V
      64: aload_0
      65: iconst_m1
      66: putfield      #6                  // Field newMaxHeaderSize:I
      69: aload_0
      70: iconst_m1
      71: putfield      #7                  // Field minNewMaxHeaderSize:I
      74: return

  static {};
    Code:
       0: new           #96                 // class java/util/HashSet
       3: dup
       4: invokespecial #97                 // Method java/util/HashSet."<init>":()V
       7: astore_0
       8: aload_0
       9: getstatic     #98                 // Field io/undertow/util/Headers.CONNECTION:Lio/undertow/util/HttpString;
      12: invokeinterface #99,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      17: pop
      18: aload_0
      19: getstatic     #100                // Field io/undertow/util/Headers.TRANSFER_ENCODING:Lio/undertow/util/HttpString;
      22: invokeinterface #99,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      27: pop
      28: aload_0
      29: getstatic     #101                // Field io/undertow/util/Headers.KEEP_ALIVE:Lio/undertow/util/HttpString;
      32: invokeinterface #99,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      37: pop
      38: aload_0
      39: getstatic     #102                // Field io/undertow/util/Headers.UPGRADE:Lio/undertow/util/HttpString;
      42: invokeinterface #99,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      47: pop
      48: aload_0
      49: invokestatic  #103                // Method java/util/Collections.unmodifiableSet:(Ljava/util/Set;)Ljava/util/Set;
      52: putstatic     #33                 // Field SKIP:Ljava/util/Set;
      55: new           #104                // class io/undertow/protocols/http2/HpackEncoder$1
      58: dup
      59: invokespecial #105                // Method io/undertow/protocols/http2/HpackEncoder$1."<init>":()V
      62: putstatic     #16                 // Field DEFAULT_HEADER_FUNCTION:Lio/undertow/protocols/http2/HpackEncoder$HpackHeaderFunction;
      65: new           #11                 // class java/util/HashMap
      68: dup
      69: invokespecial #12                 // Method java/util/HashMap."<init>":()V
      72: astore_0
      73: iconst_1
      74: istore_1
      75: iload_1
      76: getstatic     #106                // Field io/undertow/protocols/http2/Hpack.STATIC_TABLE:[Lio/undertow/protocols/http2/Hpack$HeaderField;
      79: arraylength
      80: if_icmpge     203
      83: getstatic     #106                // Field io/undertow/protocols/http2/Hpack.STATIC_TABLE:[Lio/undertow/protocols/http2/Hpack$HeaderField;
      86: iload_1
      87: aaload
      88: astore_2
      89: aload_0
      90: aload_2
      91: getfield      #107                // Field io/undertow/protocols/http2/Hpack$HeaderField.name:Lio/undertow/util/HttpString;
      94: invokeinterface #63,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      99: checkcast     #92                 // class "[Lio/undertow/protocols/http2/HpackEncoder$TableEntry;"
     102: astore_3
     103: aload_3
     104: ifnonnull     144
     107: aload_0
     108: aload_2
     109: getfield      #107                // Field io/undertow/protocols/http2/Hpack$HeaderField.name:Lio/undertow/util/HttpString;
     112: iconst_1
     113: anewarray     #83                 // class io/undertow/protocols/http2/HpackEncoder$TableEntry
     116: dup
     117: iconst_0
     118: new           #83                 // class io/undertow/protocols/http2/HpackEncoder$TableEntry
     121: dup
     122: aload_2
     123: getfield      #107                // Field io/undertow/protocols/http2/Hpack$HeaderField.name:Lio/undertow/util/HttpString;
     126: aload_2
     127: getfield      #108                // Field io/undertow/protocols/http2/Hpack$HeaderField.value:Ljava/lang/String;
     130: iload_1
     131: invokespecial #109                // Method io/undertow/protocols/http2/HpackEncoder$TableEntry."<init>":(Lio/undertow/util/HttpString;Ljava/lang/String;I)V
     134: aastore
     135: invokeinterface #67,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     140: pop
     141: goto          197
     144: aload_3
     145: arraylength
     146: iconst_1
     147: iadd
     148: anewarray     #83                 // class io/undertow/protocols/http2/HpackEncoder$TableEntry
     151: astore        4
     153: aload_3
     154: iconst_0
     155: aload         4
     157: iconst_0
     158: aload_3
     159: arraylength
     160: invokestatic  #110                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
     163: aload         4
     165: aload_3
     166: arraylength
     167: new           #83                 // class io/undertow/protocols/http2/HpackEncoder$TableEntry
     170: dup
     171: aload_2
     172: getfield      #107                // Field io/undertow/protocols/http2/Hpack$HeaderField.name:Lio/undertow/util/HttpString;
     175: aload_2
     176: getfield      #108                // Field io/undertow/protocols/http2/Hpack$HeaderField.value:Ljava/lang/String;
     179: iload_1
     180: invokespecial #109                // Method io/undertow/protocols/http2/HpackEncoder$TableEntry."<init>":(Lio/undertow/util/HttpString;Ljava/lang/String;I)V
     183: aastore
     184: aload_0
     185: aload_2
     186: getfield      #107                // Field io/undertow/protocols/http2/Hpack$HeaderField.name:Lio/undertow/util/HttpString;
     189: aload         4
     191: invokeinterface #67,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     196: pop
     197: iinc          1, 1
     200: goto          75
     203: aload_0
     204: invokestatic  #111                // Method java/util/Collections.unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;
     207: putstatic     #91                 // Field ENCODING_STATIC_TABLE:Ljava/util/Map;
     210: return
}
