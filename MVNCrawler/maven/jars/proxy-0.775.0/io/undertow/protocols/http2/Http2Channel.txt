Compiled from "Http2Channel.java"
public class io.undertow.protocols.http2.Http2Channel extends io.undertow.server.protocol.framed.AbstractFramedChannel<io.undertow.protocols.http2.Http2Channel, io.undertow.protocols.http2.AbstractHttp2StreamSourceChannel, io.undertow.protocols.http2.AbstractHttp2StreamSinkChannel> implements io.undertow.util.Attachable {
  public static final java.lang.String CLEARTEXT_UPGRADE_STRING;

  public static final io.undertow.util.HttpString METHOD;

  public static final io.undertow.util.HttpString PATH;

  public static final io.undertow.util.HttpString SCHEME;

  public static final io.undertow.util.HttpString AUTHORITY;

  public static final io.undertow.util.HttpString STATUS;

  static final int FRAME_TYPE_DATA;

  static final int FRAME_TYPE_HEADERS;

  static final int FRAME_TYPE_PRIORITY;

  static final int FRAME_TYPE_RST_STREAM;

  static final int FRAME_TYPE_SETTINGS;

  static final int FRAME_TYPE_PUSH_PROMISE;

  static final int FRAME_TYPE_PING;

  static final int FRAME_TYPE_GOAWAY;

  static final int FRAME_TYPE_WINDOW_UPDATE;

  static final int FRAME_TYPE_CONTINUATION;

  public static final int ERROR_NO_ERROR;

  public static final int ERROR_PROTOCOL_ERROR;

  public static final int ERROR_INTERNAL_ERROR;

  public static final int ERROR_FLOW_CONTROL_ERROR;

  public static final int ERROR_SETTINGS_TIMEOUT;

  public static final int ERROR_STREAM_CLOSED;

  public static final int ERROR_FRAME_SIZE_ERROR;

  public static final int ERROR_REFUSED_STREAM;

  public static final int ERROR_CANCEL;

  public static final int ERROR_COMPRESSION_ERROR;

  public static final int ERROR_CONNECT_ERROR;

  public static final int ERROR_ENHANCE_YOUR_CALM;

  public static final int ERROR_INADEQUATE_SECURITY;

  static final int DATA_FLAG_END_STREAM;

  static final int DATA_FLAG_END_SEGMENT;

  static final int DATA_FLAG_PADDED;

  static final int PING_FRAME_LENGTH;

  static final int PING_FLAG_ACK;

  static final int HEADERS_FLAG_END_STREAM;

  static final int HEADERS_FLAG_END_SEGMENT;

  static final int HEADERS_FLAG_END_HEADERS;

  static final int HEADERS_FLAG_PADDED;

  static final int HEADERS_FLAG_PRIORITY;

  static final int SETTINGS_FLAG_ACK;

  static final int CONTINUATION_FLAG_END_HEADERS;

  public static final int DEFAULT_INITIAL_WINDOW_SIZE;

  static final byte[] PREFACE_BYTES;

  public static final int DEFAULT_MAX_FRAME_SIZE;

  public static final int MAX_FRAME_SIZE;

  public static final int FLOW_CONTROL_MIN_WINDOW;

  private io.undertow.protocols.http2.Http2FrameHeaderParser frameParser;

  private final java.util.Map<java.lang.Integer, io.undertow.protocols.http2.Http2Channel$StreamHolder> currentStreams;

  private final java.lang.String protocol;

  private final int encoderHeaderTableSize;

  private volatile boolean pushEnabled;

  private volatile int sendMaxConcurrentStreams;

  private final int receiveMaxConcurrentStreams;

  private volatile int sendConcurrentStreams;

  private volatile int receiveConcurrentStreams;

  private final int initialReceiveWindowSize;

  private volatile int sendMaxFrameSize;

  private final int receiveMaxFrameSize;

  private int unackedReceiveMaxFrameSize;

  private final int maxHeaders;

  private final int maxHeaderListSize;

  private static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<io.undertow.protocols.http2.Http2Channel> sendConcurrentStreamsAtomicUpdater;

  private static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<io.undertow.protocols.http2.Http2Channel> receiveConcurrentStreamsAtomicUpdater;

  private boolean thisGoneAway;

  private boolean peerGoneAway;

  private boolean lastDataRead;

  private int streamIdCounter;

  private int lastGoodStreamId;

  private int lastAssignedStreamOtherSide;

  private final io.undertow.protocols.http2.HpackDecoder decoder;

  private final io.undertow.protocols.http2.HpackEncoder encoder;

  private final int maxPadding;

  private final java.util.Random paddingRandom;

  private int prefaceCount;

  private boolean initialSettingsReceived;

  private io.undertow.protocols.http2.Http2HeadersParser continuationParser;

  private boolean initialSettingsSent;

  private final java.util.Map<io.undertow.util.AttachmentKey<?>, java.lang.Object> attachments;

  private final io.undertow.server.protocol.ParseTimeoutUpdater parseTimeoutUpdater;

  private final java.lang.Object flowControlLock;

  private volatile int initialSendWindowSize;

  private volatile long sendWindowSize;

  private volatile int receiveWindowSize;

  public io.undertow.protocols.http2.Http2Channel(org.xnio.StreamConnection, java.lang.String, io.undertow.connector.ByteBufferPool, io.undertow.connector.PooledByteBuffer, boolean, boolean, org.xnio.OptionMap);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: iload         5
       8: iload         6
      10: iconst_1
      11: aconst_null
      12: aload         7
      14: invokespecial #1                  // Method "<init>":(Lorg/xnio/StreamConnection;Ljava/lang/String;Lio/undertow/connector/ByteBufferPool;Lio/undertow/connector/PooledByteBuffer;ZZZLjava/nio/ByteBuffer;Lorg/xnio/OptionMap;)V
      17: return

  public io.undertow.protocols.http2.Http2Channel(org.xnio.StreamConnection, java.lang.String, io.undertow.connector.ByteBufferPool, io.undertow.connector.PooledByteBuffer, boolean, boolean, boolean, org.xnio.OptionMap);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: iload         5
       8: iload         6
      10: iload         7
      12: aconst_null
      13: aload         8
      15: invokespecial #1                  // Method "<init>":(Lorg/xnio/StreamConnection;Ljava/lang/String;Lio/undertow/connector/ByteBufferPool;Lio/undertow/connector/PooledByteBuffer;ZZZLjava/nio/ByteBuffer;Lorg/xnio/OptionMap;)V
      18: return

  public io.undertow.protocols.http2.Http2Channel(org.xnio.StreamConnection, java.lang.String, io.undertow.connector.ByteBufferPool, io.undertow.connector.PooledByteBuffer, boolean, boolean, boolean, java.nio.ByteBuffer, org.xnio.OptionMap);
    Code:
       0: aload_0
       1: aload_1
       2: aload_3
       3: new           #2                  // class io/undertow/protocols/http2/Http2FramePriority
       6: dup
       7: iload         5
       9: ifeq          25
      12: iload         6
      14: ifeq          21
      17: iconst_3
      18: goto          26
      21: iconst_1
      22: goto          26
      25: iconst_2
      26: invokespecial #3                  // Method io/undertow/protocols/http2/Http2FramePriority."<init>":(I)V
      29: aload         4
      31: aload         9
      33: invokespecial #4                  // Method io/undertow/server/protocol/framed/AbstractFramedChannel."<init>":(Lorg/xnio/StreamConnection;Lio/undertow/connector/ByteBufferPool;Lio/undertow/server/protocol/framed/FramePriority;Lio/undertow/connector/PooledByteBuffer;Lorg/xnio/OptionMap;)V
      36: aload_0
      37: new           #5                  // class java/util/concurrent/ConcurrentHashMap
      40: dup
      41: invokespecial #6                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      44: putfield      #7                  // Field currentStreams:Ljava/util/Map;
      47: aload_0
      48: iconst_m1
      49: putfield      #8                  // Field sendMaxConcurrentStreams:I
      52: aload_0
      53: iconst_0
      54: putfield      #9                  // Field sendConcurrentStreams:I
      57: aload_0
      58: iconst_0
      59: putfield      #10                 // Field receiveConcurrentStreams:I
      62: aload_0
      63: sipush        16384
      66: putfield      #12                 // Field sendMaxFrameSize:I
      69: aload_0
      70: sipush        16384
      73: putfield      #13                 // Field unackedReceiveMaxFrameSize:I
      76: aload_0
      77: iconst_0
      78: putfield      #14                 // Field thisGoneAway:Z
      81: aload_0
      82: iconst_0
      83: putfield      #15                 // Field peerGoneAway:Z
      86: aload_0
      87: iconst_0
      88: putfield      #16                 // Field lastDataRead:Z
      91: aload_0
      92: aconst_null
      93: putfield      #17                 // Field continuationParser:Lio/undertow/protocols/http2/Http2HeadersParser;
      96: aload_0
      97: iconst_0
      98: putfield      #18                 // Field initialSettingsSent:Z
     101: aload_0
     102: new           #19                 // class java/util/HashMap
     105: dup
     106: invokespecial #20                 // Method java/util/HashMap."<init>":()V
     109: invokestatic  #21                 // Method java/util/Collections.synchronizedMap:(Ljava/util/Map;)Ljava/util/Map;
     112: putfield      #22                 // Field attachments:Ljava/util/Map;
     115: aload_0
     116: new           #23                 // class java/lang/Object
     119: dup
     120: invokespecial #24                 // Method java/lang/Object."<init>":()V
     123: putfield      #25                 // Field flowControlLock:Ljava/lang/Object;
     126: aload_0
     127: ldc           #26                 // int 65535
     129: putfield      #27                 // Field initialSendWindowSize:I
     132: aload_0
     133: aload_0
     134: getfield      #27                 // Field initialSendWindowSize:I
     137: i2l
     138: putfield      #28                 // Field sendWindowSize:J
     141: aload_0
     142: iload         5
     144: ifeq          160
     147: iload         6
     149: ifeq          156
     152: iconst_3
     153: goto          161
     156: iconst_1
     157: goto          161
     160: iconst_2
     161: putfield      #29                 // Field streamIdCounter:I
     164: aload_0
     165: aload         9
     167: getstatic     #30                 // Field io/undertow/UndertowOptions.HTTP2_SETTINGS_ENABLE_PUSH:Lorg/xnio/Option;
     170: iconst_1
     171: invokevirtual #31                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;Z)Z
     174: putfield      #32                 // Field pushEnabled:Z
     177: aload_0
     178: aload         9
     180: getstatic     #33                 // Field io/undertow/UndertowOptions.HTTP2_SETTINGS_INITIAL_WINDOW_SIZE:Lorg/xnio/Option;
     183: ldc           #26                 // int 65535
     185: invokevirtual #34                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;I)I
     188: putfield      #35                 // Field initialReceiveWindowSize:I
     191: aload_0
     192: aload_0
     193: getfield      #35                 // Field initialReceiveWindowSize:I
     196: putfield      #36                 // Field receiveWindowSize:I
     199: aload_0
     200: aload         9
     202: getstatic     #37                 // Field io/undertow/UndertowOptions.HTTP2_SETTINGS_MAX_CONCURRENT_STREAMS:Lorg/xnio/Option;
     205: iconst_m1
     206: invokevirtual #34                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;I)I
     209: putfield      #38                 // Field receiveMaxConcurrentStreams:I
     212: aload_0
     213: aload_2
     214: ifnonnull     222
     217: ldc           #40                 // String h2
     219: goto          223
     222: aload_2
     223: putfield      #41                 // Field protocol:Ljava/lang/String;
     226: aload_0
     227: aload         9
     229: getstatic     #42                 // Field io/undertow/UndertowOptions.MAX_HEADERS:Lorg/xnio/Option;
     232: iload         5
     234: ifeq          241
     237: iconst_m1
     238: goto          244
     241: sipush        200
     244: invokevirtual #34                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;I)I
     247: putfield      #44                 // Field maxHeaders:I
     250: aload_0
     251: aload         9
     253: getstatic     #45                 // Field io/undertow/UndertowOptions.HTTP2_SETTINGS_HEADER_TABLE_SIZE:Lorg/xnio/Option;
     256: sipush        4096
     259: invokevirtual #34                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;I)I
     262: putfield      #47                 // Field encoderHeaderTableSize:I
     265: aload_0
     266: aload         9
     268: getstatic     #48                 // Field io/undertow/UndertowOptions.HTTP2_SETTINGS_MAX_FRAME_SIZE:Lorg/xnio/Option;
     271: sipush        16384
     274: invokevirtual #34                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;I)I
     277: putfield      #49                 // Field receiveMaxFrameSize:I
     280: aload_0
     281: aload         9
     283: getstatic     #50                 // Field io/undertow/UndertowOptions.HTTP2_PADDING_SIZE:Lorg/xnio/Option;
     286: iconst_0
     287: invokevirtual #34                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;I)I
     290: putfield      #51                 // Field maxPadding:I
     293: aload_0
     294: aload         9
     296: getstatic     #52                 // Field io/undertow/UndertowOptions.HTTP2_SETTINGS_MAX_HEADER_LIST_SIZE:Lorg/xnio/Option;
     299: aload         9
     301: getstatic     #53                 // Field io/undertow/UndertowOptions.MAX_HEADER_SIZE:Lorg/xnio/Option;
     304: iconst_m1
     305: invokevirtual #34                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;I)I
     308: invokevirtual #34                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;I)I
     311: putfield      #54                 // Field maxHeaderListSize:I
     314: aload_0
     315: getfield      #51                 // Field maxPadding:I
     318: ifle          335
     321: aload_0
     322: new           #55                 // class java/security/SecureRandom
     325: dup
     326: invokespecial #56                 // Method java/security/SecureRandom."<init>":()V
     329: putfield      #57                 // Field paddingRandom:Ljava/util/Random;
     332: goto          340
     335: aload_0
     336: aconst_null
     337: putfield      #57                 // Field paddingRandom:Ljava/util/Random;
     340: aload_0
     341: new           #58                 // class io/undertow/protocols/http2/HpackDecoder
     344: dup
     345: aload_0
     346: getfield      #47                 // Field encoderHeaderTableSize:I
     349: invokespecial #59                 // Method io/undertow/protocols/http2/HpackDecoder."<init>":(I)V
     352: putfield      #60                 // Field decoder:Lio/undertow/protocols/http2/HpackDecoder;
     355: aload_0
     356: new           #61                 // class io/undertow/protocols/http2/HpackEncoder
     359: dup
     360: aload_0
     361: getfield      #47                 // Field encoderHeaderTableSize:I
     364: invokespecial #62                 // Method io/undertow/protocols/http2/HpackEncoder."<init>":(I)V
     367: putfield      #63                 // Field encoder:Lio/undertow/protocols/http2/HpackEncoder;
     370: iload         7
     372: ifne          383
     375: aload_0
     376: getstatic     #64                 // Field PREFACE_BYTES:[B
     379: arraylength
     380: putfield      #65                 // Field prefaceCount:I
     383: iload         5
     385: ifeq          460
     388: aload_0
     389: invokevirtual #66                 // Method sendPreface:()V
     392: aload_0
     393: getstatic     #64                 // Field PREFACE_BYTES:[B
     396: arraylength
     397: putfield      #65                 // Field prefaceCount:I
     400: aload_0
     401: invokevirtual #67                 // Method sendSettings:()V
     404: aload_0
     405: iconst_1
     406: putfield      #18                 // Field initialSettingsSent:Z
     409: iload         6
     411: ifeq          474
     414: new           #68                 // class io/undertow/protocols/http2/Http2Channel$StreamHolder
     417: dup
     418: aconst_null
     419: checkcast     #69                 // class io/undertow/protocols/http2/Http2StreamSinkChannel
     422: invokespecial #70                 // Method io/undertow/protocols/http2/Http2Channel$StreamHolder."<init>":(Lio/undertow/protocols/http2/Http2StreamSinkChannel;)V
     425: astore        10
     427: aload         10
     429: iconst_1
     430: putfield      #71                 // Field io/undertow/protocols/http2/Http2Channel$StreamHolder.sinkClosed:Z
     433: getstatic     #72                 // Field sendConcurrentStreamsAtomicUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     436: aload_0
     437: invokevirtual #73                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
     440: pop
     441: aload_0
     442: getfield      #7                  // Field currentStreams:Ljava/util/Map;
     445: iconst_1
     446: invokestatic  #74                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     449: aload         10
     451: invokeinterface #75,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     456: pop
     457: goto          474
     460: iload         6
     462: ifeq          474
     465: aload_0
     466: invokevirtual #67                 // Method sendSettings:()V
     469: aload_0
     470: iconst_1
     471: putfield      #18                 // Field initialSettingsSent:Z
     474: aload         8
     476: ifnull        552
     479: new           #76                 // class io/undertow/protocols/http2/Http2SettingsParser
     482: dup
     483: aload         8
     485: invokevirtual #77                 // Method java/nio/ByteBuffer.remaining:()I
     488: invokespecial #78                 // Method io/undertow/protocols/http2/Http2SettingsParser."<init>":(I)V
     491: astore        10
     493: new           #79                 // class io/undertow/protocols/http2/Http2FrameHeaderParser
     496: dup
     497: aload_0
     498: aconst_null
     499: invokespecial #80                 // Method io/undertow/protocols/http2/Http2FrameHeaderParser."<init>":(Lio/undertow/protocols/http2/Http2Channel;Lio/undertow/protocols/http2/Http2HeadersParser;)V
     502: astore        11
     504: aload         11
     506: aload         8
     508: invokevirtual #77                 // Method java/nio/ByteBuffer.remaining:()I
     511: putfield      #81                 // Field io/undertow/protocols/http2/Http2FrameHeaderParser.length:I
     514: aload         10
     516: aload         8
     518: aload         11
     520: invokevirtual #82                 // Method io/undertow/protocols/http2/Http2SettingsParser.parse:(Ljava/nio/ByteBuffer;Lio/undertow/protocols/http2/Http2FrameHeaderParser;)V
     523: aload_0
     524: aload         10
     526: invokevirtual #83                 // Method io/undertow/protocols/http2/Http2SettingsParser.getSettings:()Ljava/util/List;
     529: invokevirtual #84                 // Method updateSettings:(Ljava/util/List;)Z
     532: pop
     533: goto          552
     536: astore        11
     538: aload_1
     539: invokestatic  #86                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
     542: new           #87                 // class java/lang/RuntimeException
     545: dup
     546: aload         11
     548: invokespecial #88                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/Throwable;)V
     551: athrow
     552: aload         9
     554: getstatic     #89                 // Field io/undertow/UndertowOptions.REQUEST_PARSE_TIMEOUT:Lorg/xnio/Option;
     557: iconst_m1
     558: invokevirtual #34                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;I)I
     561: istore        10
     563: aload         9
     565: getstatic     #90                 // Field io/undertow/UndertowOptions.NO_REQUEST_TIMEOUT:Lorg/xnio/Option;
     568: iconst_m1
     569: invokevirtual #34                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;I)I
     572: istore        11
     574: iload         11
     576: ifge          592
     579: iload         10
     581: ifge          592
     584: aload_0
     585: aconst_null
     586: putfield      #91                 // Field parseTimeoutUpdater:Lio/undertow/server/protocol/ParseTimeoutUpdater;
     589: goto          630
     592: aload_0
     593: new           #92                 // class io/undertow/server/protocol/ParseTimeoutUpdater
     596: dup
     597: aload_0
     598: iload         10
     600: i2l
     601: iload         11
     603: i2l
     604: new           #93                 // class io/undertow/protocols/http2/Http2Channel$1
     607: dup
     608: aload_0
     609: invokespecial #94                 // Method io/undertow/protocols/http2/Http2Channel$1."<init>":(Lio/undertow/protocols/http2/Http2Channel;)V
     612: invokespecial #95                 // Method io/undertow/server/protocol/ParseTimeoutUpdater."<init>":(Lorg/xnio/channels/ConnectedChannel;JJLjava/lang/Runnable;)V
     615: putfield      #91                 // Field parseTimeoutUpdater:Lio/undertow/server/protocol/ParseTimeoutUpdater;
     618: aload_0
     619: new           #96                 // class io/undertow/protocols/http2/Http2Channel$2
     622: dup
     623: aload_0
     624: invokespecial #97                 // Method io/undertow/protocols/http2/Http2Channel$2."<init>":(Lio/undertow/protocols/http2/Http2Channel;)V
     627: invokevirtual #98                 // Method addCloseTask:(Lorg/xnio/ChannelListener;)V
     630: return
    Exception table:
       from    to  target type
         493   533   536   Class java/lang/Throwable

  private void sendSettings();
    Code:
       0: new           #99                 // class java/util/ArrayList
       3: dup
       4: invokespecial #100                // Method java/util/ArrayList."<init>":()V
       7: astore_1
       8: aload_1
       9: new           #101                // class io/undertow/protocols/http2/Http2Setting
      12: dup
      13: iconst_1
      14: aload_0
      15: getfield      #47                 // Field encoderHeaderTableSize:I
      18: i2l
      19: invokespecial #102                // Method io/undertow/protocols/http2/Http2Setting."<init>":(IJ)V
      22: invokeinterface #103,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      27: pop
      28: aload_0
      29: invokevirtual #104                // Method isClient:()Z
      32: ifeq          62
      35: aload_1
      36: new           #101                // class io/undertow/protocols/http2/Http2Setting
      39: dup
      40: iconst_2
      41: aload_0
      42: getfield      #32                 // Field pushEnabled:Z
      45: ifeq          52
      48: lconst_1
      49: goto          53
      52: lconst_0
      53: invokespecial #102                // Method io/undertow/protocols/http2/Http2Setting."<init>":(IJ)V
      56: invokeinterface #103,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      61: pop
      62: aload_1
      63: new           #101                // class io/undertow/protocols/http2/Http2Setting
      66: dup
      67: iconst_5
      68: aload_0
      69: getfield      #49                 // Field receiveMaxFrameSize:I
      72: i2l
      73: invokespecial #102                // Method io/undertow/protocols/http2/Http2Setting."<init>":(IJ)V
      76: invokeinterface #103,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      81: pop
      82: aload_1
      83: new           #101                // class io/undertow/protocols/http2/Http2Setting
      86: dup
      87: iconst_4
      88: aload_0
      89: getfield      #35                 // Field initialReceiveWindowSize:I
      92: i2l
      93: invokespecial #102                // Method io/undertow/protocols/http2/Http2Setting."<init>":(IJ)V
      96: invokeinterface #103,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     101: pop
     102: aload_0
     103: getfield      #54                 // Field maxHeaderListSize:I
     106: ifle          130
     109: aload_1
     110: new           #101                // class io/undertow/protocols/http2/Http2Setting
     113: dup
     114: bipush        6
     116: aload_0
     117: getfield      #54                 // Field maxHeaderListSize:I
     120: i2l
     121: invokespecial #102                // Method io/undertow/protocols/http2/Http2Setting."<init>":(IJ)V
     124: invokeinterface #103,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     129: pop
     130: aload_0
     131: getfield      #38                 // Field receiveMaxConcurrentStreams:I
     134: ifle          157
     137: aload_1
     138: new           #101                // class io/undertow/protocols/http2/Http2Setting
     141: dup
     142: iconst_3
     143: aload_0
     144: getfield      #38                 // Field receiveMaxConcurrentStreams:I
     147: i2l
     148: invokespecial #102                // Method io/undertow/protocols/http2/Http2Setting."<init>":(IJ)V
     151: invokeinterface #103,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     156: pop
     157: new           #105                // class io/undertow/protocols/http2/Http2SettingsStreamSinkChannel
     160: dup
     161: aload_0
     162: aload_1
     163: invokespecial #106                // Method io/undertow/protocols/http2/Http2SettingsStreamSinkChannel."<init>":(Lio/undertow/protocols/http2/Http2Channel;Ljava/util/List;)V
     166: astore_2
     167: aload_0
     168: aload_2
     169: invokevirtual #107                // Method flushChannelIgnoreFailure:(Lorg/xnio/channels/StreamSinkChannel;)V
     172: return

  private void sendSettingsAck();
    Code:
       0: aload_0
       1: getfield      #18                 // Field initialSettingsSent:Z
       4: ifne          16
       7: aload_0
       8: invokevirtual #67                 // Method sendSettings:()V
      11: aload_0
      12: iconst_1
      13: putfield      #18                 // Field initialSettingsSent:Z
      16: new           #105                // class io/undertow/protocols/http2/Http2SettingsStreamSinkChannel
      19: dup
      20: aload_0
      21: invokespecial #108                // Method io/undertow/protocols/http2/Http2SettingsStreamSinkChannel."<init>":(Lio/undertow/protocols/http2/Http2Channel;)V
      24: astore_1
      25: aload_0
      26: aload_1
      27: invokevirtual #107                // Method flushChannelIgnoreFailure:(Lorg/xnio/channels/StreamSinkChannel;)V
      30: return

  private void flushChannelIgnoreFailure(org.xnio.channels.StreamSinkChannel);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #109                // Method flushChannel:(Lorg/xnio/channels/StreamSinkChannel;)V
       5: goto          31
       8: astore_2
       9: getstatic     #111                // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
      12: aload_2
      13: invokeinterface #112,  2          // InterfaceMethod io/undertow/UndertowLogger.ioException:(Ljava/io/IOException;)V
      18: goto          31
      21: astore_2
      22: getstatic     #111                // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
      25: aload_2
      26: invokeinterface #113,  2          // InterfaceMethod io/undertow/UndertowLogger.handleUnexpectedFailure:(Ljava/lang/Throwable;)V
      31: return
    Exception table:
       from    to  target type
           0     5     8   Class java/io/IOException
           0     5    21   Class java/lang/Throwable

  private void flushChannel(org.xnio.channels.StreamSinkChannel) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokeinterface #114,  1          // InterfaceMethod org/xnio/channels/StreamSinkChannel.shutdownWrites:()V
       6: aload_1
       7: invokeinterface #115,  1          // InterfaceMethod org/xnio/channels/StreamSinkChannel.flush:()Z
      12: ifne          40
      15: aload_1
      16: invokeinterface #116,  1          // InterfaceMethod org/xnio/channels/StreamSinkChannel.getWriteSetter:()Lorg/xnio/ChannelListener$Setter;
      21: aconst_null
      22: aload_0
      23: invokevirtual #117                // Method writeExceptionHandler:()Lorg/xnio/ChannelExceptionHandler;
      26: invokestatic  #118                // Method org/xnio/ChannelListeners.flushingChannelListener:(Lorg/xnio/ChannelListener;Lorg/xnio/ChannelExceptionHandler;)Lorg/xnio/ChannelListener;
      29: invokeinterface #119,  2          // InterfaceMethod org/xnio/ChannelListener$Setter.set:(Lorg/xnio/ChannelListener;)V
      34: aload_1
      35: invokeinterface #120,  1          // InterfaceMethod org/xnio/channels/StreamSinkChannel.resumeWrites:()V
      40: return

  private void sendPreface();
    Code:
       0: new           #121                // class io/undertow/protocols/http2/Http2PrefaceStreamSinkChannel
       3: dup
       4: aload_0
       5: invokespecial #122                // Method io/undertow/protocols/http2/Http2PrefaceStreamSinkChannel."<init>":(Lio/undertow/protocols/http2/Http2Channel;)V
       8: astore_1
       9: aload_0
      10: aload_1
      11: invokevirtual #107                // Method flushChannelIgnoreFailure:(Lorg/xnio/channels/StreamSinkChannel;)V
      14: return

  protected io.undertow.protocols.http2.AbstractHttp2StreamSourceChannel createChannel(io.undertow.server.protocol.framed.FrameHeaderData, io.undertow.connector.PooledByteBuffer) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #123                // Method createChannelImpl:(Lio/undertow/server/protocol/framed/FrameHeaderData;Lio/undertow/connector/PooledByteBuffer;)Lio/undertow/protocols/http2/AbstractHttp2StreamSourceChannel;
       6: astore_3
       7: aload_3
       8: instanceof    #124                // class io/undertow/protocols/http2/Http2StreamSourceChannel
      11: ifeq          54
      14: aload_0
      15: getfield      #91                 // Field parseTimeoutUpdater:Lio/undertow/server/protocol/ParseTimeoutUpdater;
      18: ifnull        54
      21: aload_3
      22: ifnull        35
      25: aload_0
      26: getfield      #91                 // Field parseTimeoutUpdater:Lio/undertow/server/protocol/ParseTimeoutUpdater;
      29: invokevirtual #125                // Method io/undertow/server/protocol/ParseTimeoutUpdater.requestStarted:()V
      32: goto          54
      35: aload_0
      36: getfield      #7                  // Field currentStreams:Ljava/util/Map;
      39: invokeinterface #126,  1          // InterfaceMethod java/util/Map.isEmpty:()Z
      44: ifeq          54
      47: aload_0
      48: getfield      #91                 // Field parseTimeoutUpdater:Lio/undertow/server/protocol/ParseTimeoutUpdater;
      51: invokevirtual #127                // Method io/undertow/server/protocol/ParseTimeoutUpdater.failedParse:()V
      54: aload_3
      55: areturn

  protected io.undertow.protocols.http2.AbstractHttp2StreamSourceChannel createChannelImpl(io.undertow.server.protocol.framed.FrameHeaderData, io.undertow.connector.PooledByteBuffer) throws java.io.IOException;
    Code:
       0: aload_1
       1: checkcast     #79                 // class io/undertow/protocols/http2/Http2FrameHeaderParser
       4: astore_3
       5: aload_3
       6: getfield      #128                // Field io/undertow/protocols/http2/Http2FrameHeaderParser.type:I
       9: ifne          38
      12: aload_0
      13: iconst_1
      14: invokevirtual #129                // Method sendGoAway:(I)V
      17: getstatic     #130                // Field io/undertow/UndertowLogger.REQUEST_LOGGER:Lio/undertow/UndertowLogger;
      20: ldc           #131                // String Dropping Frame of length %s for stream %s
      22: aload_3
      23: invokevirtual #132                // Method io/undertow/protocols/http2/Http2FrameHeaderParser.getFrameLength:()J
      26: aload_3
      27: getfield      #133                // Field io/undertow/protocols/http2/Http2FrameHeaderParser.streamId:I
      30: i2l
      31: invokeinterface #134,  6          // InterfaceMethod io/undertow/UndertowLogger.tracef:(Ljava/lang/String;JJ)V
      36: aconst_null
      37: areturn
      38: aload_3
      39: getfield      #128                // Field io/undertow/protocols/http2/Http2FrameHeaderParser.type:I
      42: tableswitch   { // 1 to 9
                     1: 164
                     2: 998
                     3: 587
                     4: 678
                     5: 92
                     6: 774
                     7: 842
                     8: 968
                     9: 92
               default: 1038
          }
      92: aload_3
      93: getfield      #135                // Field io/undertow/protocols/http2/Http2FrameHeaderParser.parser:Lio/undertow/protocols/http2/Http2PushBackParser;
      96: instanceof    #136                // class io/undertow/protocols/http2/Http2PushPromiseParser
      99: ifeq          164
     102: aload_0
     103: invokevirtual #104                // Method isClient:()Z
     106: ifne          123
     109: aload_0
     110: iconst_1
     111: invokevirtual #129                // Method sendGoAway:(I)V
     114: getstatic     #137                // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
     117: invokeinterface #138,  1          // InterfaceMethod io/undertow/UndertowMessages.serverReceivedPushPromise:()Ljava/io/IOException;
     122: athrow
     123: aload_3
     124: getfield      #135                // Field io/undertow/protocols/http2/Http2FrameHeaderParser.parser:Lio/undertow/protocols/http2/Http2PushBackParser;
     127: checkcast     #136                // class io/undertow/protocols/http2/Http2PushPromiseParser
     130: astore        5
     132: new           #139                // class io/undertow/protocols/http2/Http2PushPromiseStreamSourceChannel
     135: dup
     136: aload_0
     137: aload_2
     138: aload_3
     139: invokevirtual #132                // Method io/undertow/protocols/http2/Http2FrameHeaderParser.getFrameLength:()J
     142: aload         5
     144: invokevirtual #140                // Method io/undertow/protocols/http2/Http2PushPromiseParser.getHeaderMap:()Lio/undertow/util/HeaderMap;
     147: aload         5
     149: invokevirtual #141                // Method io/undertow/protocols/http2/Http2PushPromiseParser.getPromisedStreamId:()I
     152: aload_3
     153: getfield      #133                // Field io/undertow/protocols/http2/Http2FrameHeaderParser.streamId:I
     156: invokespecial #142                // Method io/undertow/protocols/http2/Http2PushPromiseStreamSourceChannel."<init>":(Lio/undertow/protocols/http2/Http2Channel;Lio/undertow/connector/PooledByteBuffer;JLio/undertow/util/HeaderMap;II)V
     159: astore        4
     161: goto          1070
     164: aload_0
     165: aload_3
     166: getfield      #133                // Field io/undertow/protocols/http2/Http2FrameHeaderParser.streamId:I
     169: invokevirtual #143                // Method isIdle:(I)Z
     172: ifne          257
     175: aload_0
     176: getfield      #7                  // Field currentStreams:Ljava/util/Map;
     179: aload_3
     180: getfield      #133                // Field io/undertow/protocols/http2/Http2FrameHeaderParser.streamId:I
     183: invokestatic  #74                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     186: invokeinterface #144,  2          // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
     191: checkcast     #68                 // class io/undertow/protocols/http2/Http2Channel$StreamHolder
     194: astore        5
     196: aload         5
     198: ifnull        209
     201: aload         5
     203: getfield      #145                // Field io/undertow/protocols/http2/Http2Channel$StreamHolder.sourceClosed:Z
     206: ifeq          222
     209: aload_0
     210: iconst_1
     211: invokevirtual #129                // Method sendGoAway:(I)V
     214: aload_2
     215: invokeinterface #146,  1          // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
     220: aconst_null
     221: areturn
     222: aload         5
     224: getfield      #147                // Field io/undertow/protocols/http2/Http2Channel$StreamHolder.sourceChannel:Lio/undertow/protocols/http2/Http2StreamSourceChannel;
     227: ifnull        254
     230: aload_3
     231: getfield      #148                // Field io/undertow/protocols/http2/Http2FrameHeaderParser.flags:I
     234: iconst_1
     235: invokestatic  #149                // Method org/xnio/Bits.allAreSet:(II)Z
     238: ifne          254
     241: aload_0
     242: iconst_1
     243: invokevirtual #129                // Method sendGoAway:(I)V
     246: aload_2
     247: invokeinterface #146,  1          // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
     252: aconst_null
     253: areturn
     254: goto          315
     257: aload_3
     258: getfield      #133                // Field io/undertow/protocols/http2/Http2FrameHeaderParser.streamId:I
     261: aload_0
     262: invokevirtual #150                // Method getLastAssignedStreamOtherSide:()I
     265: if_icmpge     281
     268: aload_0
     269: iconst_1
     270: invokevirtual #129                // Method sendGoAway:(I)V
     273: aload_2
     274: invokeinterface #146,  1          // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
     279: aconst_null
     280: areturn
     281: aload_3
     282: getfield      #133                // Field io/undertow/protocols/http2/Http2FrameHeaderParser.streamId:I
     285: iconst_2
     286: irem
     287: aload_0
     288: invokevirtual #104                // Method isClient:()Z
     291: ifeq          298
     294: iconst_1
     295: goto          299
     298: iconst_0
     299: if_icmpne     315
     302: aload_0
     303: iconst_1
     304: invokevirtual #129                // Method sendGoAway:(I)V
     307: aload_2
     308: invokeinterface #146,  1          // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
     313: aconst_null
     314: areturn
     315: aload_3
     316: getfield      #135                // Field io/undertow/protocols/http2/Http2FrameHeaderParser.parser:Lio/undertow/protocols/http2/Http2PushBackParser;
     319: checkcast     #151                // class io/undertow/protocols/http2/Http2HeadersParser
     322: astore        5
     324: new           #124                // class io/undertow/protocols/http2/Http2StreamSourceChannel
     327: dup
     328: aload_0
     329: aload_2
     330: aload_1
     331: invokeinterface #152,  1          // InterfaceMethod io/undertow/server/protocol/framed/FrameHeaderData.getFrameLength:()J
     336: aload         5
     338: invokevirtual #153                // Method io/undertow/protocols/http2/Http2HeadersParser.getHeaderMap:()Lio/undertow/util/HeaderMap;
     341: aload_3
     342: getfield      #133                // Field io/undertow/protocols/http2/Http2FrameHeaderParser.streamId:I
     345: invokespecial #154                // Method io/undertow/protocols/http2/Http2StreamSourceChannel."<init>":(Lio/undertow/protocols/http2/Http2Channel;Lio/undertow/connector/PooledByteBuffer;JLio/undertow/util/HeaderMap;I)V
     348: astore        4
     350: aload_0
     351: aload_3
     352: getfield      #133                // Field io/undertow/protocols/http2/Http2FrameHeaderParser.streamId:I
     355: invokevirtual #155                // Method updateStreamIdsCountersInHeaders:(I)V
     358: aload_0
     359: getfield      #7                  // Field currentStreams:Ljava/util/Map;
     362: aload_3
     363: getfield      #133                // Field io/undertow/protocols/http2/Http2FrameHeaderParser.streamId:I
     366: invokestatic  #74                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     369: invokeinterface #144,  2          // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
     374: checkcast     #68                 // class io/undertow/protocols/http2/Http2Channel$StreamHolder
     377: astore        6
     379: aload         6
     381: ifnonnull     427
     384: getstatic     #156                // Field receiveConcurrentStreamsAtomicUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     387: aload_0
     388: invokevirtual #73                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
     391: pop
     392: aload_0
     393: getfield      #7                  // Field currentStreams:Ljava/util/Map;
     396: aload_3
     397: getfield      #133                // Field io/undertow/protocols/http2/Http2FrameHeaderParser.streamId:I
     400: invokestatic  #74                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     403: new           #68                 // class io/undertow/protocols/http2/Http2Channel$StreamHolder
     406: dup
     407: aload         4
     409: checkcast     #124                // class io/undertow/protocols/http2/Http2StreamSourceChannel
     412: invokespecial #157                // Method io/undertow/protocols/http2/Http2Channel$StreamHolder."<init>":(Lio/undertow/protocols/http2/Http2StreamSourceChannel;)V
     415: dup
     416: astore        6
     418: invokeinterface #75,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     423: pop
     424: goto          437
     427: aload         6
     429: aload         4
     431: checkcast     #124                // class io/undertow/protocols/http2/Http2StreamSourceChannel
     434: putfield      #147                // Field io/undertow/protocols/http2/Http2Channel$StreamHolder.sourceChannel:Lio/undertow/protocols/http2/Http2StreamSourceChannel;
     437: aload         5
     439: invokevirtual #158                // Method io/undertow/protocols/http2/Http2HeadersParser.isHeadersEndStream:()Z
     442: ifeq          532
     445: aload_3
     446: getfield      #148                // Field io/undertow/protocols/http2/Http2FrameHeaderParser.flags:I
     449: iconst_4
     450: invokestatic  #149                // Method org/xnio/Bits.allAreSet:(II)Z
     453: ifeq          532
     456: aload         4
     458: invokevirtual #159                // Method io/undertow/protocols/http2/AbstractHttp2StreamSourceChannel.lastFrame:()V
     461: aload         6
     463: aconst_null
     464: putfield      #147                // Field io/undertow/protocols/http2/Http2Channel$StreamHolder.sourceChannel:Lio/undertow/protocols/http2/Http2StreamSourceChannel;
     467: aload_0
     468: invokevirtual #104                // Method isClient:()Z
     471: ifeq          493
     474: ldc           #160                // String 100
     476: aload         5
     478: invokevirtual #153                // Method io/undertow/protocols/http2/Http2HeadersParser.getHeaderMap:()Lio/undertow/util/HeaderMap;
     481: getstatic     #161                // Field STATUS:Lio/undertow/util/HttpString;
     484: invokevirtual #162                // Method io/undertow/util/HeaderMap.getFirst:(Lio/undertow/util/HttpString;)Ljava/lang/String;
     487: invokevirtual #163                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     490: ifne          532
     493: aload         6
     495: iconst_1
     496: putfield      #145                // Field io/undertow/protocols/http2/Http2Channel$StreamHolder.sourceClosed:Z
     499: aload         6
     501: getfield      #71                 // Field io/undertow/protocols/http2/Http2Channel$StreamHolder.sinkClosed:Z
     504: ifeq          532
     507: getstatic     #156                // Field receiveConcurrentStreamsAtomicUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     510: aload_0
     511: invokevirtual #164                // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndDecrement:(Ljava/lang/Object;)I
     514: pop
     515: aload_0
     516: getfield      #7                  // Field currentStreams:Ljava/util/Map;
     519: aload_3
     520: getfield      #133                // Field io/undertow/protocols/http2/Http2FrameHeaderParser.streamId:I
     523: invokestatic  #74                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     526: invokeinterface #165,  2          // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
     531: pop
     532: aload         5
     534: invokevirtual #166                // Method io/undertow/protocols/http2/Http2HeadersParser.isInvalid:()Z
     537: ifeq          558
     540: aload         4
     542: iconst_1
     543: invokevirtual #167                // Method io/undertow/protocols/http2/AbstractHttp2StreamSourceChannel.rstStream:(I)V
     546: aload_0
     547: aload_3
     548: getfield      #133                // Field io/undertow/protocols/http2/Http2FrameHeaderParser.streamId:I
     551: iconst_1
     552: invokevirtual #168                // Method sendRstStream:(II)V
     555: aconst_null
     556: astore        4
     558: aload         5
     560: invokevirtual #169                // Method io/undertow/protocols/http2/Http2HeadersParser.getDependentStreamId:()I
     563: aload_3
     564: getfield      #133                // Field io/undertow/protocols/http2/Http2FrameHeaderParser.streamId:I
     567: if_icmpne     1070
     570: aload_0
     571: aload_3
     572: getfield      #133                // Field io/undertow/protocols/http2/Http2FrameHeaderParser.streamId:I
     575: iconst_1
     576: invokevirtual #168                // Method sendRstStream:(II)V
     579: aload_2
     580: invokeinterface #146,  1          // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
     585: aconst_null
     586: areturn
     587: aload_3
     588: getfield      #135                // Field io/undertow/protocols/http2/Http2FrameHeaderParser.parser:Lio/undertow/protocols/http2/Http2PushBackParser;
     591: checkcast     #170                // class io/undertow/protocols/http2/Http2RstStreamParser
     594: astore        5
     596: aload_3
     597: getfield      #133                // Field io/undertow/protocols/http2/Http2FrameHeaderParser.streamId:I
     600: ifne          631
     603: aload_2
     604: ifnull        613
     607: aload_2
     608: invokeinterface #146,  1          // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
     613: new           #171                // class io/undertow/protocols/http2/ConnectionErrorException
     616: dup
     617: iconst_1
     618: getstatic     #137                // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
     621: iconst_3
     622: invokeinterface #172,  2          // InterfaceMethod io/undertow/UndertowMessages.streamIdMustNotBeZeroForFrameType:(I)Ljava/lang/String;
     627: invokespecial #173                // Method io/undertow/protocols/http2/ConnectionErrorException."<init>":(ILjava/lang/String;)V
     630: athrow
     631: new           #174                // class io/undertow/protocols/http2/Http2RstStreamStreamSourceChannel
     634: dup
     635: aload_0
     636: aload_2
     637: aload         5
     639: invokevirtual #175                // Method io/undertow/protocols/http2/Http2RstStreamParser.getErrorCode:()I
     642: aload_3
     643: getfield      #133                // Field io/undertow/protocols/http2/Http2FrameHeaderParser.streamId:I
     646: invokespecial #176                // Method io/undertow/protocols/http2/Http2RstStreamStreamSourceChannel."<init>":(Lio/undertow/protocols/http2/Http2Channel;Lio/undertow/connector/PooledByteBuffer;II)V
     649: astore        4
     651: aload_0
     652: aload_3
     653: getfield      #133                // Field io/undertow/protocols/http2/Http2FrameHeaderParser.streamId:I
     656: invokevirtual #177                // Method handleRstStream:(I)V
     659: aload_0
     660: aload_3
     661: getfield      #133                // Field io/undertow/protocols/http2/Http2FrameHeaderParser.streamId:I
     664: invokevirtual #143                // Method isIdle:(I)Z
     667: ifeq          1070
     670: aload_0
     671: iconst_1
     672: invokevirtual #129                // Method sendGoAway:(I)V
     675: goto          1070
     678: aload_3
     679: getfield      #148                // Field io/undertow/protocols/http2/Http2FrameHeaderParser.flags:I
     682: iconst_1
     683: invokestatic  #178                // Method org/xnio/Bits.anyAreSet:(II)Z
     686: ifne          713
     689: aload_0
     690: aload_3
     691: getfield      #135                // Field io/undertow/protocols/http2/Http2FrameHeaderParser.parser:Lio/undertow/protocols/http2/Http2PushBackParser;
     694: checkcast     #76                 // class io/undertow/protocols/http2/Http2SettingsParser
     697: invokevirtual #83                 // Method io/undertow/protocols/http2/Http2SettingsParser.getSettings:()Ljava/util/List;
     700: invokevirtual #84                 // Method updateSettings:(Ljava/util/List;)Z
     703: ifeq          738
     706: aload_0
     707: invokevirtual #179                // Method sendSettingsAck:()V
     710: goto          738
     713: aload_1
     714: invokeinterface #152,  1          // InterfaceMethod io/undertow/server/protocol/framed/FrameHeaderData.getFrameLength:()J
     719: lconst_0
     720: lcmp
     721: ifeq          738
     724: aload_0
     725: bipush        6
     727: invokevirtual #129                // Method sendGoAway:(I)V
     730: aload_2
     731: invokeinterface #146,  1          // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
     736: aconst_null
     737: areturn
     738: new           #180                // class io/undertow/protocols/http2/Http2SettingsStreamSourceChannel
     741: dup
     742: aload_0
     743: aload_2
     744: aload_3
     745: invokevirtual #132                // Method io/undertow/protocols/http2/Http2FrameHeaderParser.getFrameLength:()J
     748: aload_3
     749: getfield      #135                // Field io/undertow/protocols/http2/Http2FrameHeaderParser.parser:Lio/undertow/protocols/http2/Http2PushBackParser;
     752: checkcast     #76                 // class io/undertow/protocols/http2/Http2SettingsParser
     755: invokevirtual #83                 // Method io/undertow/protocols/http2/Http2SettingsParser.getSettings:()Ljava/util/List;
     758: invokespecial #181                // Method io/undertow/protocols/http2/Http2SettingsStreamSourceChannel."<init>":(Lio/undertow/protocols/http2/Http2Channel;Lio/undertow/connector/PooledByteBuffer;JLjava/util/List;)V
     761: astore        4
     763: aload_0
     764: aload_0
     765: getfield      #49                 // Field receiveMaxFrameSize:I
     768: putfield      #13                 // Field unackedReceiveMaxFrameSize:I
     771: goto          1070
     774: aload_3
     775: getfield      #135                // Field io/undertow/protocols/http2/Http2FrameHeaderParser.parser:Lio/undertow/protocols/http2/Http2PushBackParser;
     778: checkcast     #182                // class io/undertow/protocols/http2/Http2PingParser
     781: astore        5
     783: aload_2
     784: invokeinterface #146,  1          // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
     789: aload_3
     790: getfield      #148                // Field io/undertow/protocols/http2/Http2FrameHeaderParser.flags:I
     793: iconst_1
     794: invokestatic  #178                // Method org/xnio/Bits.anyAreSet:(II)Z
     797: istore        6
     799: new           #183                // class io/undertow/protocols/http2/Http2PingStreamSourceChannel
     802: dup
     803: aload_0
     804: aload         5
     806: invokevirtual #184                // Method io/undertow/protocols/http2/Http2PingParser.getData:()[B
     809: iload         6
     811: invokespecial #185                // Method io/undertow/protocols/http2/Http2PingStreamSourceChannel."<init>":(Lio/undertow/protocols/http2/Http2Channel;[BZ)V
     814: astore        4
     816: iload         6
     818: ifne          1070
     821: aload_0
     822: aload         5
     824: invokevirtual #184                // Method io/undertow/protocols/http2/Http2PingParser.getData:()[B
     827: new           #186                // class io/undertow/protocols/http2/Http2Channel$Http2ControlMessageExceptionHandler
     830: dup
     831: aload_0
     832: invokespecial #187                // Method io/undertow/protocols/http2/Http2Channel$Http2ControlMessageExceptionHandler."<init>":(Lio/undertow/protocols/http2/Http2Channel;)V
     835: iconst_1
     836: invokevirtual #188                // Method sendPing:([BLorg/xnio/ChannelExceptionHandler;Z)V
     839: goto          1070
     842: aload_3
     843: getfield      #135                // Field io/undertow/protocols/http2/Http2FrameHeaderParser.parser:Lio/undertow/protocols/http2/Http2PushBackParser;
     846: checkcast     #189                // class io/undertow/protocols/http2/Http2GoAwayParser
     849: astore        5
     851: new           #190                // class io/undertow/protocols/http2/Http2GoAwayStreamSourceChannel
     854: dup
     855: aload_0
     856: aload_2
     857: aload_3
     858: invokevirtual #132                // Method io/undertow/protocols/http2/Http2FrameHeaderParser.getFrameLength:()J
     861: aload         5
     863: invokevirtual #191                // Method io/undertow/protocols/http2/Http2GoAwayParser.getStatusCode:()I
     866: aload         5
     868: invokevirtual #192                // Method io/undertow/protocols/http2/Http2GoAwayParser.getLastGoodStreamId:()I
     871: invokespecial #193                // Method io/undertow/protocols/http2/Http2GoAwayStreamSourceChannel."<init>":(Lio/undertow/protocols/http2/Http2Channel;Lio/undertow/connector/PooledByteBuffer;JII)V
     874: astore        4
     876: aload_0
     877: iconst_1
     878: putfield      #15                 // Field peerGoneAway:Z
     881: aload_0
     882: getfield      #7                  // Field currentStreams:Ljava/util/Map;
     885: invokeinterface #194,  1          // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
     890: invokeinterface #195,  1          // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
     895: astore        6
     897: aload         6
     899: invokeinterface #196,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
     904: ifeq          954
     907: aload         6
     909: invokeinterface #197,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     914: checkcast     #68                 // class io/undertow/protocols/http2/Http2Channel$StreamHolder
     917: astore        7
     919: aload         7
     921: getfield      #147                // Field io/undertow/protocols/http2/Http2Channel$StreamHolder.sourceChannel:Lio/undertow/protocols/http2/Http2StreamSourceChannel;
     924: ifnull        935
     927: aload         7
     929: getfield      #147                // Field io/undertow/protocols/http2/Http2Channel$StreamHolder.sourceChannel:Lio/undertow/protocols/http2/Http2StreamSourceChannel;
     932: invokevirtual #198                // Method io/undertow/protocols/http2/Http2StreamSourceChannel.rstStream:()V
     935: aload         7
     937: getfield      #199                // Field io/undertow/protocols/http2/Http2Channel$StreamHolder.sinkChannel:Lio/undertow/protocols/http2/Http2StreamSinkChannel;
     940: ifnull        951
     943: aload         7
     945: getfield      #199                // Field io/undertow/protocols/http2/Http2Channel$StreamHolder.sinkChannel:Lio/undertow/protocols/http2/Http2StreamSinkChannel;
     948: invokevirtual #200                // Method io/undertow/protocols/http2/Http2StreamSinkChannel.rstStream:()V
     951: goto          897
     954: aload_2
     955: invokeinterface #146,  1          // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
     960: aload_0
     961: iconst_0
     962: invokevirtual #129                // Method sendGoAway:(I)V
     965: goto          1070
     968: aload_3
     969: getfield      #135                // Field io/undertow/protocols/http2/Http2FrameHeaderParser.parser:Lio/undertow/protocols/http2/Http2PushBackParser;
     972: checkcast     #201                // class io/undertow/protocols/http2/Http2WindowUpdateParser
     975: astore        5
     977: aload_0
     978: aload_3
     979: getfield      #133                // Field io/undertow/protocols/http2/Http2FrameHeaderParser.streamId:I
     982: aload         5
     984: invokevirtual #202                // Method io/undertow/protocols/http2/Http2WindowUpdateParser.getDeltaWindowSize:()I
     987: invokevirtual #203                // Method handleWindowUpdate:(II)V
     990: aload_2
     991: invokeinterface #146,  1          // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
     996: aconst_null
     997: areturn
     998: aload_3
     999: getfield      #135                // Field io/undertow/protocols/http2/Http2FrameHeaderParser.parser:Lio/undertow/protocols/http2/Http2PushBackParser;
    1002: checkcast     #204                // class io/undertow/protocols/http2/Http2PriorityParser
    1005: astore        5
    1007: aload         5
    1009: invokevirtual #205                // Method io/undertow/protocols/http2/Http2PriorityParser.getStreamDependency:()I
    1012: aload_3
    1013: getfield      #133                // Field io/undertow/protocols/http2/Http2FrameHeaderParser.streamId:I
    1016: if_icmpne     1030
    1019: aload_0
    1020: aload_3
    1021: getfield      #133                // Field io/undertow/protocols/http2/Http2FrameHeaderParser.streamId:I
    1024: iconst_1
    1025: invokevirtual #168                // Method sendRstStream:(II)V
    1028: aconst_null
    1029: areturn
    1030: aload_2
    1031: invokeinterface #146,  1          // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
    1036: aconst_null
    1037: areturn
    1038: getstatic     #130                // Field io/undertow/UndertowLogger.REQUEST_LOGGER:Lio/undertow/UndertowLogger;
    1041: ldc           #206                // String Dropping frame of length %s and type %s for stream %s as we do not understand this type of frame
    1043: aload_3
    1044: invokevirtual #132                // Method io/undertow/protocols/http2/Http2FrameHeaderParser.getFrameLength:()J
    1047: aload_3
    1048: getfield      #128                // Field io/undertow/protocols/http2/Http2FrameHeaderParser.type:I
    1051: i2l
    1052: aload_3
    1053: getfield      #133                // Field io/undertow/protocols/http2/Http2FrameHeaderParser.streamId:I
    1056: i2l
    1057: invokeinterface #207,  8          // InterfaceMethod io/undertow/UndertowLogger.tracef:(Ljava/lang/String;JJJ)V
    1062: aload_2
    1063: invokeinterface #146,  1          // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
    1068: aconst_null
    1069: areturn
    1070: aload         4
    1072: areturn

  protected io.undertow.server.protocol.framed.FrameHeaderData parseFrame(java.nio.ByteBuffer) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #208                // Method parseFrameNoContinuation:(Ljava/nio/ByteBuffer;)Lio/undertow/protocols/http2/Http2FrameHeaderParser;
       5: astore_2
       6: aload_2
       7: ifnull        24
      10: aload_2
      11: invokevirtual #209                // Method io/undertow/protocols/http2/Http2FrameHeaderParser.getContinuationParser:()Lio/undertow/protocols/http2/Http2HeadersParser;
      14: ifnull        24
      17: aload_1
      18: invokevirtual #210                // Method java/nio/ByteBuffer.hasRemaining:()Z
      21: ifne          0
      24: aload_2
      25: areturn

  private io.undertow.protocols.http2.Http2FrameHeaderParser parseFrameNoContinuation(java.nio.ByteBuffer) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #65                 // Field prefaceCount:I
       4: getstatic     #64                 // Field PREFACE_BYTES:[B
       7: arraylength
       8: if_icmpge     73
      11: aload_1
      12: invokevirtual #210                // Method java/nio/ByteBuffer.hasRemaining:()Z
      15: ifeq          73
      18: aload_0
      19: getfield      #65                 // Field prefaceCount:I
      22: getstatic     #64                 // Field PREFACE_BYTES:[B
      25: arraylength
      26: if_icmpge     73
      29: aload_1
      30: invokevirtual #211                // Method java/nio/ByteBuffer.get:()B
      33: getstatic     #64                 // Field PREFACE_BYTES:[B
      36: aload_0
      37: getfield      #65                 // Field prefaceCount:I
      40: baload
      41: if_icmpeq     60
      44: aload_0
      45: invokevirtual #212                // Method getUnderlyingConnection:()Lorg/xnio/StreamConnection;
      48: invokestatic  #86                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
      51: getstatic     #137                // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      54: invokeinterface #213,  1          // InterfaceMethod io/undertow/UndertowMessages.incorrectHttp2Preface:()Ljava/io/IOException;
      59: athrow
      60: aload_0
      61: dup
      62: getfield      #65                 // Field prefaceCount:I
      65: iconst_1
      66: iadd
      67: putfield      #65                 // Field prefaceCount:I
      70: goto          11
      73: aload_0
      74: getfield      #214                // Field frameParser:Lio/undertow/protocols/http2/Http2FrameHeaderParser;
      77: astore_2
      78: aload_2
      79: ifnonnull     105
      82: aload_0
      83: new           #79                 // class io/undertow/protocols/http2/Http2FrameHeaderParser
      86: dup
      87: aload_0
      88: aload_0
      89: getfield      #17                 // Field continuationParser:Lio/undertow/protocols/http2/Http2HeadersParser;
      92: invokespecial #80                 // Method io/undertow/protocols/http2/Http2FrameHeaderParser."<init>":(Lio/undertow/protocols/http2/Http2Channel;Lio/undertow/protocols/http2/Http2HeadersParser;)V
      95: dup
      96: astore_2
      97: putfield      #214                // Field frameParser:Lio/undertow/protocols/http2/Http2FrameHeaderParser;
     100: aload_0
     101: aconst_null
     102: putfield      #17                 // Field continuationParser:Lio/undertow/protocols/http2/Http2HeadersParser;
     105: aload_2
     106: aload_1
     107: invokevirtual #215                // Method io/undertow/protocols/http2/Http2FrameHeaderParser.handle:(Ljava/nio/ByteBuffer;)Z
     110: ifne          115
     113: aconst_null
     114: areturn
     115: aload_0
     116: getfield      #216                // Field initialSettingsReceived:Z
     119: ifne          161
     122: aload_2
     123: getfield      #128                // Field io/undertow/protocols/http2/Http2FrameHeaderParser.type:I
     126: iconst_4
     127: if_icmpeq     156
     130: getstatic     #111                // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
     133: aload_2
     134: getfield      #128                // Field io/undertow/protocols/http2/Http2FrameHeaderParser.type:I
     137: invokeinterface #217,  2          // InterfaceMethod io/undertow/UndertowLogger.remoteEndpointFailedToSendInitialSettings:(I)V
     142: aload_0
     143: new           #110                // class java/io/IOException
     146: dup
     147: invokespecial #218                // Method java/io/IOException."<init>":()V
     150: invokevirtual #219                // Method markReadsBroken:(Ljava/lang/Throwable;)V
     153: goto          161
     156: aload_0
     157: iconst_1
     158: putfield      #216                // Field initialSettingsReceived:Z
     161: aload_0
     162: aconst_null
     163: putfield      #214                // Field frameParser:Lio/undertow/protocols/http2/Http2FrameHeaderParser;
     166: aload_2
     167: invokevirtual #220                // Method io/undertow/protocols/http2/Http2FrameHeaderParser.getActualLength:()I
     170: aload_0
     171: getfield      #49                 // Field receiveMaxFrameSize:I
     174: if_icmple     203
     177: aload_2
     178: invokevirtual #220                // Method io/undertow/protocols/http2/Http2FrameHeaderParser.getActualLength:()I
     181: aload_0
     182: getfield      #13                 // Field unackedReceiveMaxFrameSize:I
     185: if_icmple     203
     188: aload_0
     189: bipush        6
     191: invokevirtual #129                // Method sendGoAway:(I)V
     194: getstatic     #137                // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
     197: invokeinterface #221,  1          // InterfaceMethod io/undertow/UndertowMessages.http2FrameTooLarge:()Ljava/io/IOException;
     202: athrow
     203: aload_2
     204: invokevirtual #209                // Method io/undertow/protocols/http2/Http2FrameHeaderParser.getContinuationParser:()Lio/undertow/protocols/http2/Http2HeadersParser;
     207: ifnull        218
     210: aload_0
     211: aload_2
     212: invokevirtual #209                // Method io/undertow/protocols/http2/Http2FrameHeaderParser.getContinuationParser:()Lio/undertow/protocols/http2/Http2HeadersParser;
     215: putfield      #17                 // Field continuationParser:Lio/undertow/protocols/http2/Http2HeadersParser;
     218: aload_2
     219: areturn

  protected void lastDataRead();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #16                 // Field lastDataRead:Z
       5: aload_0
       6: getfield      #15                 // Field peerGoneAway:Z
       9: ifne          19
      12: aload_0
      13: invokestatic  #86                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
      16: goto          37
      19: aload_0
      20: iconst_1
      21: putfield      #15                 // Field peerGoneAway:Z
      24: aload_0
      25: getfield      #14                 // Field thisGoneAway:Z
      28: ifne          37
      31: aload_0
      32: bipush        10
      34: invokevirtual #129                // Method sendGoAway:(I)V
      37: return

  protected boolean isLastFrameReceived();
    Code:
       0: aload_0
       1: getfield      #16                 // Field lastDataRead:Z
       4: ireturn

  protected boolean isLastFrameSent();
    Code:
       0: aload_0
       1: getfield      #14                 // Field thisGoneAway:Z
       4: ireturn

  protected void handleBrokenSourceChannel(java.lang.Throwable);
    Code:
       0: getstatic     #130                // Field io/undertow/UndertowLogger.REQUEST_LOGGER:Lio/undertow/UndertowLogger;
       3: aload_1
       4: ldc           #222                // String Closing HTTP2 channel to %s due to broken read side
       6: aload_0
       7: invokevirtual #223                // Method getPeerAddress:()Ljava/net/SocketAddress;
      10: invokeinterface #224,  4          // InterfaceMethod io/undertow/UndertowLogger.debugf:(Ljava/lang/Throwable;Ljava/lang/String;Ljava/lang/Object;)V
      15: aload_1
      16: instanceof    #171                // class io/undertow/protocols/http2/ConnectionErrorException
      19: ifeq          44
      22: aload_0
      23: aload_1
      24: checkcast     #171                // class io/undertow/protocols/http2/ConnectionErrorException
      27: invokevirtual #225                // Method io/undertow/protocols/http2/ConnectionErrorException.getCode:()I
      30: new           #186                // class io/undertow/protocols/http2/Http2Channel$Http2ControlMessageExceptionHandler
      33: dup
      34: aload_0
      35: invokespecial #187                // Method io/undertow/protocols/http2/Http2Channel$Http2ControlMessageExceptionHandler."<init>":(Lio/undertow/protocols/http2/Http2Channel;)V
      38: invokevirtual #226                // Method sendGoAway:(ILorg/xnio/ChannelExceptionHandler;)V
      41: goto          69
      44: aload_0
      45: aload_1
      46: instanceof    #227                // class java/nio/channels/ClosedChannelException
      49: ifeq          57
      52: bipush        10
      54: goto          58
      57: iconst_1
      58: new           #186                // class io/undertow/protocols/http2/Http2Channel$Http2ControlMessageExceptionHandler
      61: dup
      62: aload_0
      63: invokespecial #187                // Method io/undertow/protocols/http2/Http2Channel$Http2ControlMessageExceptionHandler."<init>":(Lio/undertow/protocols/http2/Http2Channel;)V
      66: invokevirtual #226                // Method sendGoAway:(ILorg/xnio/ChannelExceptionHandler;)V
      69: return

  protected void handleBrokenSinkChannel(java.lang.Throwable);
    Code:
       0: getstatic     #130                // Field io/undertow/UndertowLogger.REQUEST_LOGGER:Lio/undertow/UndertowLogger;
       3: aload_1
       4: ldc           #228                // String Closing HTTP2 channel to %s due to broken write side
       6: aload_0
       7: invokevirtual #223                // Method getPeerAddress:()Ljava/net/SocketAddress;
      10: invokeinterface #224,  4          // InterfaceMethod io/undertow/UndertowLogger.debugf:(Ljava/lang/Throwable;Ljava/lang/String;Ljava/lang/Object;)V
      15: aload_0
      16: invokestatic  #86                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
      19: return

  protected void closeSubChannels();
    Code:
       0: aload_0
       1: getfield      #7                  // Field currentStreams:Ljava/util/Map;
       4: invokeinterface #229,  1          // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
       9: invokeinterface #230,  1          // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      14: astore_1
      15: aload_1
      16: invokeinterface #196,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      21: ifeq          108
      24: aload_1
      25: invokeinterface #197,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      30: checkcast     #231                // class java/util/Map$Entry
      33: astore_2
      34: aload_2
      35: invokeinterface #232,  1          // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      40: checkcast     #68                 // class io/undertow/protocols/http2/Http2Channel$StreamHolder
      43: astore_3
      44: aload_3
      45: getfield      #147                // Field io/undertow/protocols/http2/Http2Channel$StreamHolder.sourceChannel:Lio/undertow/protocols/http2/Http2StreamSourceChannel;
      48: astore        4
      50: aload         4
      52: ifnull        60
      55: aload         4
      57: invokevirtual #233                // Method io/undertow/protocols/http2/AbstractHttp2StreamSourceChannel.markStreamBroken:()V
      60: aload_3
      61: getfield      #199                // Field io/undertow/protocols/http2/Http2Channel$StreamHolder.sinkChannel:Lio/undertow/protocols/http2/Http2StreamSinkChannel;
      64: astore        5
      66: aload         5
      68: ifnull        105
      71: aload         5
      73: invokevirtual #234                // Method io/undertow/protocols/http2/Http2StreamSinkChannel.isWritesShutdown:()Z
      76: ifeq          100
      79: aload         5
      81: invokevirtual #235                // Method io/undertow/protocols/http2/Http2StreamSinkChannel.getIoThread:()Lorg/xnio/XnioIoThread;
      84: aload         5
      86: aload         5
      88: invokevirtual #236                // Method io/undertow/protocols/http2/Http2StreamSinkChannel.getWriteSetter:()Lorg/xnio/ChannelListener$Setter;
      91: checkcast     #237                // class org/xnio/ChannelListener$SimpleSetter
      94: invokevirtual #238                // Method org/xnio/ChannelListener$SimpleSetter.get:()Lorg/xnio/ChannelListener;
      97: invokestatic  #239                // Method org/xnio/ChannelListeners.invokeChannelListener:(Ljava/util/concurrent/Executor;Ljava/nio/channels/Channel;Lorg/xnio/ChannelListener;)V
     100: aload         5
     102: invokestatic  #86                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
     105: goto          15
     108: return

  protected java.util.Collection<io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel<io.undertow.protocols.http2.Http2Channel, io.undertow.protocols.http2.AbstractHttp2StreamSourceChannel, io.undertow.protocols.http2.AbstractHttp2StreamSinkChannel>> getReceivers();
    Code:
       0: new           #99                 // class java/util/ArrayList
       3: dup
       4: aload_0
       5: getfield      #7                  // Field currentStreams:Ljava/util/Map;
       8: invokeinterface #240,  1          // InterfaceMethod java/util/Map.size:()I
      13: invokespecial #241                // Method java/util/ArrayList."<init>":(I)V
      16: astore_1
      17: aload_0
      18: getfield      #7                  // Field currentStreams:Ljava/util/Map;
      21: invokeinterface #229,  1          // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      26: invokeinterface #230,  1          // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      31: astore_2
      32: aload_2
      33: invokeinterface #196,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      38: ifeq          88
      41: aload_2
      42: invokeinterface #197,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      47: checkcast     #231                // class java/util/Map$Entry
      50: astore_3
      51: aload_3
      52: invokeinterface #232,  1          // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      57: checkcast     #68                 // class io/undertow/protocols/http2/Http2Channel$StreamHolder
      60: getfield      #145                // Field io/undertow/protocols/http2/Http2Channel$StreamHolder.sourceClosed:Z
      63: ifne          85
      66: aload_1
      67: aload_3
      68: invokeinterface #232,  1          // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      73: checkcast     #68                 // class io/undertow/protocols/http2/Http2Channel$StreamHolder
      76: getfield      #147                // Field io/undertow/protocols/http2/Http2Channel$StreamHolder.sourceChannel:Lio/undertow/protocols/http2/Http2StreamSourceChannel;
      79: invokeinterface #103,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      84: pop
      85: goto          32
      88: aload_1
      89: areturn

  boolean updateSettings(java.util.List<io.undertow.protocols.http2.Http2Setting>);
    Code:
       0: aload_1
       1: invokeinterface #242,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
       6: astore_2
       7: aload_2
       8: invokeinterface #196,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      13: ifeq          276
      16: aload_2
      17: invokeinterface #197,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      22: checkcast     #101                // class io/undertow/protocols/http2/Http2Setting
      25: astore_3
      26: aload_3
      27: invokevirtual #243                // Method io/undertow/protocols/http2/Http2Setting.getId:()I
      30: iconst_4
      31: if_icmpne     89
      34: aload_0
      35: getfield      #25                 // Field flowControlLock:Ljava/lang/Object;
      38: dup
      39: astore        4
      41: monitorenter
      42: aload_3
      43: invokevirtual #244                // Method io/undertow/protocols/http2/Http2Setting.getValue:()J
      46: ldc2_w        #246                // long 2147483647l
      49: lcmp
      50: ifle          63
      53: aload_0
      54: iconst_3
      55: invokevirtual #129                // Method sendGoAway:(I)V
      58: iconst_0
      59: aload         4
      61: monitorexit
      62: ireturn
      63: aload_0
      64: aload_3
      65: invokevirtual #244                // Method io/undertow/protocols/http2/Http2Setting.getValue:()J
      68: l2i
      69: putfield      #27                 // Field initialSendWindowSize:I
      72: aload         4
      74: monitorexit
      75: goto          86
      78: astore        5
      80: aload         4
      82: monitorexit
      83: aload         5
      85: athrow
      86: goto          273
      89: aload_3
      90: invokevirtual #243                // Method io/undertow/protocols/http2/Http2Setting.getId:()I
      93: iconst_5
      94: if_icmpne     155
      97: aload_3
      98: invokevirtual #244                // Method io/undertow/protocols/http2/Http2Setting.getValue:()J
     101: ldc2_w        #248                // long 16777215l
     104: lcmp
     105: ifgt          119
     108: aload_3
     109: invokevirtual #244                // Method io/undertow/protocols/http2/Http2Setting.getValue:()J
     112: ldc2_w        #250                // long 16384l
     115: lcmp
     116: ifge          143
     119: getstatic     #111                // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
     122: aload_3
     123: invokevirtual #244                // Method io/undertow/protocols/http2/Http2Setting.getValue:()J
     126: invokedynamic #252,  0            // InvokeDynamic #0:makeConcatWithConstants:(J)Ljava/lang/String;
     131: invokeinterface #253,  2          // InterfaceMethod io/undertow/UndertowLogger.debug:(Ljava/lang/Object;)V
     136: aload_0
     137: iconst_1
     138: invokevirtual #129                // Method sendGoAway:(I)V
     141: iconst_0
     142: ireturn
     143: aload_0
     144: aload_3
     145: invokevirtual #244                // Method io/undertow/protocols/http2/Http2Setting.getValue:()J
     148: l2i
     149: putfield      #12                 // Field sendMaxFrameSize:I
     152: goto          273
     155: aload_3
     156: invokevirtual #243                // Method io/undertow/protocols/http2/Http2Setting.getId:()I
     159: iconst_1
     160: if_icmpne     197
     163: aload_0
     164: dup
     165: astore        4
     167: monitorenter
     168: aload_0
     169: getfield      #63                 // Field encoder:Lio/undertow/protocols/http2/HpackEncoder;
     172: aload_3
     173: invokevirtual #244                // Method io/undertow/protocols/http2/Http2Setting.getValue:()J
     176: l2i
     177: invokevirtual #254                // Method io/undertow/protocols/http2/HpackEncoder.setMaxTableSize:(I)V
     180: aload         4
     182: monitorexit
     183: goto          194
     186: astore        6
     188: aload         4
     190: monitorexit
     191: aload         6
     193: athrow
     194: goto          273
     197: aload_3
     198: invokevirtual #243                // Method io/undertow/protocols/http2/Http2Setting.getId:()I
     201: iconst_2
     202: if_icmpne     256
     205: aload_3
     206: invokevirtual #244                // Method io/undertow/protocols/http2/Http2Setting.getValue:()J
     209: l2i
     210: istore        4
     212: iload         4
     214: ifne          225
     217: aload_0
     218: iconst_0
     219: putfield      #32                 // Field pushEnabled:Z
     222: goto          253
     225: iload         4
     227: iconst_1
     228: if_icmpeq     253
     231: getstatic     #111                // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
     234: iload         4
     236: invokedynamic #255,  0            // InvokeDynamic #1:makeConcatWithConstants:(I)Ljava/lang/String;
     241: invokeinterface #253,  2          // InterfaceMethod io/undertow/UndertowLogger.debug:(Ljava/lang/Object;)V
     246: aload_0
     247: iconst_1
     248: invokevirtual #129                // Method sendGoAway:(I)V
     251: iconst_0
     252: ireturn
     253: goto          273
     256: aload_3
     257: invokevirtual #243                // Method io/undertow/protocols/http2/Http2Setting.getId:()I
     260: iconst_3
     261: if_icmpne     273
     264: aload_0
     265: aload_3
     266: invokevirtual #244                // Method io/undertow/protocols/http2/Http2Setting.getValue:()J
     269: l2i
     270: putfield      #8                  // Field sendMaxConcurrentStreams:I
     273: goto          7
     276: iconst_1
     277: ireturn
    Exception table:
       from    to  target type
          42    62    78   any
          63    75    78   any
          78    83    78   any
         168   183   186   any
         186   191   186   any

  public int getHttp2Version();
    Code:
       0: iconst_3
       1: ireturn

  public int getInitialSendWindowSize();
    Code:
       0: aload_0
       1: getfield      #27                 // Field initialSendWindowSize:I
       4: ireturn

  public int getInitialReceiveWindowSize();
    Code:
       0: aload_0
       1: getfield      #35                 // Field initialReceiveWindowSize:I
       4: ireturn

  public int getSendMaxConcurrentStreams();
    Code:
       0: aload_0
       1: getfield      #8                  // Field sendMaxConcurrentStreams:I
       4: ireturn

  public void setSendMaxConcurrentStreams(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #8                  // Field sendMaxConcurrentStreams:I
       5: aload_0
       6: invokevirtual #67                 // Method sendSettings:()V
       9: return

  public int getReceiveMaxConcurrentStreams();
    Code:
       0: aload_0
       1: getfield      #38                 // Field receiveMaxConcurrentStreams:I
       4: ireturn

  public void handleWindowUpdate(int, int) throws java.io.IOException;
    Code:
       0: iload_1
       1: ifne          101
       4: iload_2
       5: ifne          25
       8: getstatic     #111                // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
      11: ldc_w         #256                // String Invalid flow-control window increment of 0 received with WINDOW_UPDATE frame for connection
      14: invokeinterface #253,  2          // InterfaceMethod io/undertow/UndertowLogger.debug:(Ljava/lang/Object;)V
      19: aload_0
      20: iconst_1
      21: invokevirtual #129                // Method sendGoAway:(I)V
      24: return
      25: aload_0
      26: getfield      #25                 // Field flowControlLock:Ljava/lang/Object;
      29: dup
      30: astore_3
      31: monitorenter
      32: aload_0
      33: getfield      #28                 // Field sendWindowSize:J
      36: ldc2_w        #257                // long 2l
      39: lcmp
      40: ifgt          47
      43: iconst_1
      44: goto          48
      47: iconst_0
      48: istore        4
      50: aload_0
      51: dup
      52: getfield      #28                 // Field sendWindowSize:J
      55: iload_2
      56: i2l
      57: ladd
      58: putfield      #28                 // Field sendWindowSize:J
      61: iload         4
      63: ifeq          70
      66: aload_0
      67: invokevirtual #259                // Method notifyFlowControlAllowed:()V
      70: aload_0
      71: getfield      #28                 // Field sendWindowSize:J
      74: ldc2_w        #246                // long 2147483647l
      77: lcmp
      78: ifle          86
      81: aload_0
      82: iconst_3
      83: invokevirtual #129                // Method sendGoAway:(I)V
      86: aload_3
      87: monitorexit
      88: goto          98
      91: astore        5
      93: aload_3
      94: monitorexit
      95: aload         5
      97: athrow
      98: goto          184
     101: iload_2
     102: ifne          126
     105: getstatic     #111                // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
     108: iload_1
     109: invokedynamic #260,  0            // InvokeDynamic #2:makeConcatWithConstants:(I)Ljava/lang/String;
     114: invokeinterface #253,  2          // InterfaceMethod io/undertow/UndertowLogger.debug:(Ljava/lang/Object;)V
     119: aload_0
     120: iload_1
     121: iconst_1
     122: invokevirtual #168                // Method sendRstStream:(II)V
     125: return
     126: aload_0
     127: getfield      #7                  // Field currentStreams:Ljava/util/Map;
     130: iload_1
     131: invokestatic  #74                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     134: invokeinterface #144,  2          // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
     139: checkcast     #68                 // class io/undertow/protocols/http2/Http2Channel$StreamHolder
     142: astore_3
     143: aload_3
     144: ifnull        154
     147: aload_3
     148: getfield      #199                // Field io/undertow/protocols/http2/Http2Channel$StreamHolder.sinkChannel:Lio/undertow/protocols/http2/Http2StreamSinkChannel;
     151: goto          155
     154: aconst_null
     155: astore        4
     157: aload         4
     159: ifnonnull     178
     162: aload_0
     163: iload_1
     164: invokevirtual #143                // Method isIdle:(I)Z
     167: ifeq          184
     170: aload_0
     171: iconst_1
     172: invokevirtual #129                // Method sendGoAway:(I)V
     175: goto          184
     178: aload         4
     180: iload_2
     181: invokevirtual #261                // Method io/undertow/protocols/http2/Http2StreamSinkChannel.updateFlowControlWindow:(I)V
     184: return
    Exception table:
       from    to  target type
          32    88    91   any
          91    95    91   any

  synchronized void notifyFlowControlAllowed() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #262                // Method io/undertow/server/protocol/framed/AbstractFramedChannel.recalculateHeldFrames:()V
       4: return

  public void sendPing(byte[]);
    Code:
       0: aload_0
       1: aload_1
       2: new           #186                // class io/undertow/protocols/http2/Http2Channel$Http2ControlMessageExceptionHandler
       5: dup
       6: aload_0
       7: invokespecial #187                // Method io/undertow/protocols/http2/Http2Channel$Http2ControlMessageExceptionHandler."<init>":(Lio/undertow/protocols/http2/Http2Channel;)V
      10: invokevirtual #263                // Method sendPing:([BLorg/xnio/ChannelExceptionHandler;)V
      13: return

  public void sendPing(byte[], org.xnio.ChannelExceptionHandler<io.undertow.protocols.http2.AbstractHttp2StreamSinkChannel>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iconst_0
       4: invokevirtual #188                // Method sendPing:([BLorg/xnio/ChannelExceptionHandler;Z)V
       7: return

  void sendPing(byte[], org.xnio.ChannelExceptionHandler<io.undertow.protocols.http2.AbstractHttp2StreamSinkChannel>, boolean);
    Code:
       0: new           #264                // class io/undertow/protocols/http2/Http2PingStreamSinkChannel
       3: dup
       4: aload_0
       5: aload_1
       6: iload_3
       7: invokespecial #265                // Method io/undertow/protocols/http2/Http2PingStreamSinkChannel."<init>":(Lio/undertow/protocols/http2/Http2Channel;[BZ)V
      10: astore        4
      12: aload         4
      14: invokevirtual #266                // Method io/undertow/protocols/http2/Http2PingStreamSinkChannel.shutdownWrites:()V
      17: aload         4
      19: invokevirtual #267                // Method io/undertow/protocols/http2/Http2PingStreamSinkChannel.flush:()Z
      22: ifne          45
      25: aload         4
      27: invokevirtual #268                // Method io/undertow/protocols/http2/Http2PingStreamSinkChannel.getWriteSetter:()Lorg/xnio/ChannelListener$Setter;
      30: aconst_null
      31: aload_2
      32: invokestatic  #118                // Method org/xnio/ChannelListeners.flushingChannelListener:(Lorg/xnio/ChannelListener;Lorg/xnio/ChannelExceptionHandler;)Lorg/xnio/ChannelListener;
      35: invokeinterface #119,  2          // InterfaceMethod org/xnio/ChannelListener$Setter.set:(Lorg/xnio/ChannelListener;)V
      40: aload         4
      42: invokevirtual #269                // Method io/undertow/protocols/http2/Http2PingStreamSinkChannel.resumeWrites:()V
      45: goto          122
      48: astore        5
      50: aload_2
      51: ifnull        67
      54: aload_2
      55: aload         4
      57: aload         5
      59: invokeinterface #270,  3          // InterfaceMethod org/xnio/ChannelExceptionHandler.handleException:(Ljava/nio/channels/Channel;Ljava/io/IOException;)V
      64: goto          80
      67: getstatic     #130                // Field io/undertow/UndertowLogger.REQUEST_LOGGER:Lio/undertow/UndertowLogger;
      70: ldc_w         #271                // String Failed to send ping and no exception handler set
      73: aload         5
      75: invokeinterface #272,  3          // InterfaceMethod io/undertow/UndertowLogger.debug:(Ljava/lang/Object;Ljava/lang/Throwable;)V
      80: goto          122
      83: astore        5
      85: aload_2
      86: ifnull        109
      89: aload_2
      90: aload         4
      92: new           #110                // class java/io/IOException
      95: dup
      96: aload         5
      98: invokespecial #273                // Method java/io/IOException."<init>":(Ljava/lang/Throwable;)V
     101: invokeinterface #270,  3          // InterfaceMethod org/xnio/ChannelExceptionHandler.handleException:(Ljava/nio/channels/Channel;Ljava/io/IOException;)V
     106: goto          122
     109: getstatic     #130                // Field io/undertow/UndertowLogger.REQUEST_LOGGER:Lio/undertow/UndertowLogger;
     112: ldc_w         #271                // String Failed to send ping and no exception handler set
     115: aload         5
     117: invokeinterface #272,  3          // InterfaceMethod io/undertow/UndertowLogger.debug:(Ljava/lang/Object;Ljava/lang/Throwable;)V
     122: return
    Exception table:
       from    to  target type
          12    45    48   Class java/io/IOException
          12    45    83   Class java/lang/Throwable

  public void sendGoAway(int);
    Code:
       0: aload_0
       1: iload_1
       2: new           #186                // class io/undertow/protocols/http2/Http2Channel$Http2ControlMessageExceptionHandler
       5: dup
       6: aload_0
       7: invokespecial #187                // Method io/undertow/protocols/http2/Http2Channel$Http2ControlMessageExceptionHandler."<init>":(Lio/undertow/protocols/http2/Http2Channel;)V
      10: invokevirtual #226                // Method sendGoAway:(ILorg/xnio/ChannelExceptionHandler;)V
      13: return

  public void sendGoAway(int, org.xnio.ChannelExceptionHandler<io.undertow.protocols.http2.AbstractHttp2StreamSinkChannel>);
    Code:
       0: aload_0
       1: getfield      #14                 // Field thisGoneAway:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: iconst_1
      10: putfield      #14                 // Field thisGoneAway:Z
      13: getstatic     #111                // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
      16: invokeinterface #274,  1          // InterfaceMethod io/undertow/UndertowLogger.isTraceEnabled:()Z
      21: ifeq          43
      24: getstatic     #111                // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
      27: new           #227                // class java/nio/channels/ClosedChannelException
      30: dup
      31: invokespecial #275                // Method java/nio/channels/ClosedChannelException."<init>":()V
      34: ldc_w         #276                // String Sending goaway on channel %s
      37: aload_0
      38: invokeinterface #277,  4          // InterfaceMethod io/undertow/UndertowLogger.tracef:(Ljava/lang/Throwable;Ljava/lang/String;Ljava/lang/Object;)V
      43: new           #278                // class io/undertow/protocols/http2/Http2GoAwayStreamSinkChannel
      46: dup
      47: aload_0
      48: iload_1
      49: aload_0
      50: invokevirtual #279                // Method getLastGoodStreamId:()I
      53: invokespecial #280                // Method io/undertow/protocols/http2/Http2GoAwayStreamSinkChannel."<init>":(Lio/undertow/protocols/http2/Http2Channel;II)V
      56: astore_3
      57: aload_3
      58: invokevirtual #281                // Method io/undertow/protocols/http2/Http2GoAwayStreamSinkChannel.shutdownWrites:()V
      61: aload_3
      62: invokevirtual #282                // Method io/undertow/protocols/http2/Http2GoAwayStreamSinkChannel.flush:()Z
      65: ifne          96
      68: aload_3
      69: invokevirtual #283                // Method io/undertow/protocols/http2/Http2GoAwayStreamSinkChannel.getWriteSetter:()Lorg/xnio/ChannelListener$Setter;
      72: new           #284                // class io/undertow/protocols/http2/Http2Channel$3
      75: dup
      76: aload_0
      77: invokespecial #285                // Method io/undertow/protocols/http2/Http2Channel$3."<init>":(Lio/undertow/protocols/http2/Http2Channel;)V
      80: aload_2
      81: invokestatic  #118                // Method org/xnio/ChannelListeners.flushingChannelListener:(Lorg/xnio/ChannelListener;Lorg/xnio/ChannelExceptionHandler;)Lorg/xnio/ChannelListener;
      84: invokeinterface #119,  2          // InterfaceMethod org/xnio/ChannelListener$Setter.set:(Lorg/xnio/ChannelListener;)V
      89: aload_3
      90: invokevirtual #286                // Method io/undertow/protocols/http2/Http2GoAwayStreamSinkChannel.resumeWrites:()V
      93: goto          100
      96: aload_0
      97: invokestatic  #86                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
     100: goto          135
     103: astore        4
     105: aload_2
     106: aload_3
     107: aload         4
     109: invokeinterface #270,  3          // InterfaceMethod org/xnio/ChannelExceptionHandler.handleException:(Ljava/nio/channels/Channel;Ljava/io/IOException;)V
     114: goto          135
     117: astore        4
     119: aload_2
     120: aload_3
     121: new           #110                // class java/io/IOException
     124: dup
     125: aload         4
     127: invokespecial #273                // Method java/io/IOException."<init>":(Ljava/lang/Throwable;)V
     130: invokeinterface #270,  3          // InterfaceMethod org/xnio/ChannelExceptionHandler.handleException:(Ljava/nio/channels/Channel;Ljava/io/IOException;)V
     135: return
    Exception table:
       from    to  target type
          57   100   103   Class java/io/IOException
          57   100   117   Class java/lang/Throwable

  public void sendUpdateWindowSize(int, int) throws java.io.IOException;
    Code:
       0: new           #287                // class io/undertow/protocols/http2/Http2WindowUpdateStreamSinkChannel
       3: dup
       4: aload_0
       5: iload_1
       6: iload_2
       7: invokespecial #288                // Method io/undertow/protocols/http2/Http2WindowUpdateStreamSinkChannel."<init>":(Lio/undertow/protocols/http2/Http2Channel;II)V
      10: astore_3
      11: aload_0
      12: aload_3
      13: invokevirtual #109                // Method flushChannel:(Lorg/xnio/channels/StreamSinkChannel;)V
      16: return

  public javax.net.ssl.SSLSession getSslSession();
    Code:
       0: aload_0
       1: invokevirtual #212                // Method getUnderlyingConnection:()Lorg/xnio/StreamConnection;
       4: astore_1
       5: aload_1
       6: instanceof    #289                // class org/xnio/ssl/SslConnection
       9: ifeq          20
      12: aload_1
      13: checkcast     #289                // class org/xnio/ssl/SslConnection
      16: invokevirtual #290                // Method org/xnio/ssl/SslConnection.getSslSession:()Ljavax/net/ssl/SSLSession;
      19: areturn
      20: aconst_null
      21: areturn

  public void updateReceiveFlowControlWindow(int) throws java.io.IOException;
    Code:
       0: iload_1
       1: ifgt          5
       4: return
       5: iconst_m1
       6: istore_2
       7: aload_0
       8: getfield      #25                 // Field flowControlLock:Ljava/lang/Object;
      11: dup
      12: astore_3
      13: monitorenter
      14: aload_0
      15: dup
      16: getfield      #36                 // Field receiveWindowSize:I
      19: iload_1
      20: isub
      21: putfield      #36                 // Field receiveWindowSize:I
      24: aload_0
      25: getfield      #35                 // Field initialReceiveWindowSize:I
      28: istore        4
      30: aload_0
      31: getfield      #36                 // Field receiveWindowSize:I
      34: iload         4
      36: iconst_2
      37: idiv
      38: if_icmpge     59
      41: iload         4
      43: aload_0
      44: getfield      #36                 // Field receiveWindowSize:I
      47: isub
      48: istore_2
      49: aload_0
      50: dup
      51: getfield      #36                 // Field receiveWindowSize:I
      54: iload_2
      55: iadd
      56: putfield      #36                 // Field receiveWindowSize:I
      59: aload_3
      60: monitorexit
      61: goto          71
      64: astore        5
      66: aload_3
      67: monitorexit
      68: aload         5
      70: athrow
      71: iload_2
      72: ifle          81
      75: aload_0
      76: iconst_0
      77: iload_2
      78: invokevirtual #291                // Method sendUpdateWindowSize:(II)V
      81: return
    Exception table:
       from    to  target type
          14    61    64   any
          64    68    64   any

  public synchronized io.undertow.protocols.http2.Http2HeadersStreamSinkChannel createStream(io.undertow.util.HeaderMap) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #104                // Method isClient:()Z
       4: ifne          16
       7: getstatic     #137                // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      10: invokeinterface #292,  1          // InterfaceMethod io/undertow/UndertowMessages.headersStreamCanOnlyBeCreatedByClient:()Ljava/io/IOException;
      15: athrow
      16: aload_0
      17: invokevirtual #293                // Method isOpen:()Z
      20: ifne          32
      23: getstatic     #137                // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      26: invokeinterface #294,  1          // InterfaceMethod io/undertow/UndertowMessages.channelIsClosed:()Ljava/nio/channels/ClosedChannelException;
      31: athrow
      32: getstatic     #72                 // Field sendConcurrentStreamsAtomicUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      35: aload_0
      36: invokevirtual #295                // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.incrementAndGet:(Ljava/lang/Object;)I
      39: pop
      40: aload_0
      41: getfield      #8                  // Field sendMaxConcurrentStreams:I
      44: ifle          67
      47: aload_0
      48: getfield      #9                  // Field sendConcurrentStreams:I
      51: aload_0
      52: getfield      #8                  // Field sendMaxConcurrentStreams:I
      55: if_icmple     67
      58: getstatic     #137                // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      61: invokeinterface #296,  1          // InterfaceMethod io/undertow/UndertowMessages.streamLimitExceeded:()Ljava/io/IOException;
      66: athrow
      67: aload_0
      68: getfield      #29                 // Field streamIdCounter:I
      71: istore_2
      72: aload_0
      73: dup
      74: getfield      #29                 // Field streamIdCounter:I
      77: iconst_2
      78: iadd
      79: putfield      #29                 // Field streamIdCounter:I
      82: new           #297                // class io/undertow/protocols/http2/Http2HeadersStreamSinkChannel
      85: dup
      86: aload_0
      87: iload_2
      88: aload_1
      89: invokespecial #298                // Method io/undertow/protocols/http2/Http2HeadersStreamSinkChannel."<init>":(Lio/undertow/protocols/http2/Http2Channel;ILio/undertow/util/HeaderMap;)V
      92: astore_3
      93: aload_0
      94: getfield      #7                  // Field currentStreams:Ljava/util/Map;
      97: iload_2
      98: invokestatic  #74                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     101: new           #68                 // class io/undertow/protocols/http2/Http2Channel$StreamHolder
     104: dup
     105: aload_3
     106: invokespecial #70                 // Method io/undertow/protocols/http2/Http2Channel$StreamHolder."<init>":(Lio/undertow/protocols/http2/Http2StreamSinkChannel;)V
     109: invokeinterface #75,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     114: pop
     115: aload_3
     116: areturn

  public java.lang.String getProtocolRequestId();
    Code:
       0: aload_0
       1: getfield      #29                 // Field streamIdCounter:I
       4: invokestatic  #299                // Method java/lang/Integer.toString:(I)Ljava/lang/String;
       7: areturn

  public synchronized boolean addPushPromiseStream(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #104                // Method isClient:()Z
       4: ifeq          13
       7: iload_1
       8: iconst_2
       9: irem
      10: ifeq          22
      13: getstatic     #137                // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      16: invokeinterface #300,  1          // InterfaceMethod io/undertow/UndertowMessages.pushPromiseCanOnlyBeCreatedByServer:()Ljava/io/IOException;
      21: athrow
      22: aload_0
      23: invokevirtual #293                // Method isOpen:()Z
      26: ifne          38
      29: getstatic     #137                // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      32: invokeinterface #294,  1          // InterfaceMethod io/undertow/UndertowMessages.channelIsClosed:()Ljava/nio/channels/ClosedChannelException;
      37: athrow
      38: aload_0
      39: iload_1
      40: invokevirtual #143                // Method isIdle:(I)Z
      43: ifne          60
      46: getstatic     #111                // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
      49: ldc_w         #301                // String Non idle streamId %d received from the server as a pushed stream.
      52: iload_1
      53: invokeinterface #302,  3          // InterfaceMethod io/undertow/UndertowLogger.debugf:(Ljava/lang/String;I)V
      58: iconst_0
      59: ireturn
      60: new           #68                 // class io/undertow/protocols/http2/Http2Channel$StreamHolder
      63: dup
      64: aconst_null
      65: checkcast     #297                // class io/undertow/protocols/http2/Http2HeadersStreamSinkChannel
      68: invokespecial #70                 // Method io/undertow/protocols/http2/Http2Channel$StreamHolder."<init>":(Lio/undertow/protocols/http2/Http2StreamSinkChannel;)V
      71: astore_2
      72: aload_2
      73: iconst_1
      74: putfield      #71                 // Field io/undertow/protocols/http2/Http2Channel$StreamHolder.sinkClosed:Z
      77: aload_0
      78: aload_0
      79: getfield      #303                // Field lastAssignedStreamOtherSide:I
      82: iload_1
      83: invokestatic  #304                // Method java/lang/Math.max:(II)I
      86: putfield      #303                // Field lastAssignedStreamOtherSide:I
      89: aload_0
      90: getfield      #7                  // Field currentStreams:Ljava/util/Map;
      93: iload_1
      94: invokestatic  #74                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      97: aload_2
      98: invokeinterface #75,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     103: pop
     104: iconst_1
     105: ireturn

  private synchronized int getLastAssignedStreamOtherSide();
    Code:
       0: aload_0
       1: getfield      #303                // Field lastAssignedStreamOtherSide:I
       4: ireturn

  private synchronized int getLastGoodStreamId();
    Code:
       0: aload_0
       1: getfield      #305                // Field lastGoodStreamId:I
       4: ireturn

  private synchronized void updateStreamIdsCountersInHeaders(int);
    Code:
       0: iload_1
       1: iconst_2
       2: irem
       3: ifeq          36
       6: aload_0
       7: aload_0
       8: getfield      #305                // Field lastGoodStreamId:I
      11: iload_1
      12: invokestatic  #304                // Method java/lang/Math.max:(II)I
      15: putfield      #305                // Field lastGoodStreamId:I
      18: aload_0
      19: invokevirtual #104                // Method isClient:()Z
      22: ifne          55
      25: aload_0
      26: aload_0
      27: getfield      #305                // Field lastGoodStreamId:I
      30: putfield      #303                // Field lastAssignedStreamOtherSide:I
      33: goto          55
      36: aload_0
      37: invokevirtual #104                // Method isClient:()Z
      40: ifeq          55
      43: aload_0
      44: aload_0
      45: getfield      #303                // Field lastAssignedStreamOtherSide:I
      48: iload_1
      49: invokestatic  #304                // Method java/lang/Math.max:(II)I
      52: putfield      #303                // Field lastAssignedStreamOtherSide:I
      55: return

  public synchronized io.undertow.protocols.http2.Http2HeadersStreamSinkChannel sendPushPromise(int, io.undertow.util.HeaderMap, io.undertow.util.HeaderMap) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #293                // Method isOpen:()Z
       4: ifne          16
       7: getstatic     #137                // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      10: invokeinterface #294,  1          // InterfaceMethod io/undertow/UndertowMessages.channelIsClosed:()Ljava/nio/channels/ClosedChannelException;
      15: athrow
      16: aload_0
      17: invokevirtual #104                // Method isClient:()Z
      20: ifeq          32
      23: getstatic     #137                // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      26: invokeinterface #300,  1          // InterfaceMethod io/undertow/UndertowMessages.pushPromiseCanOnlyBeCreatedByServer:()Ljava/io/IOException;
      31: athrow
      32: getstatic     #72                 // Field sendConcurrentStreamsAtomicUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      35: aload_0
      36: invokevirtual #295                // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.incrementAndGet:(Ljava/lang/Object;)I
      39: pop
      40: aload_0
      41: getfield      #8                  // Field sendMaxConcurrentStreams:I
      44: ifle          67
      47: aload_0
      48: getfield      #9                  // Field sendConcurrentStreams:I
      51: aload_0
      52: getfield      #8                  // Field sendMaxConcurrentStreams:I
      55: if_icmple     67
      58: getstatic     #137                // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      61: invokeinterface #296,  1          // InterfaceMethod io/undertow/UndertowMessages.streamLimitExceeded:()Ljava/io/IOException;
      66: athrow
      67: aload_0
      68: getfield      #29                 // Field streamIdCounter:I
      71: istore        4
      73: aload_0
      74: dup
      75: getfield      #29                 // Field streamIdCounter:I
      78: iconst_2
      79: iadd
      80: putfield      #29                 // Field streamIdCounter:I
      83: new           #306                // class io/undertow/protocols/http2/Http2PushPromiseStreamSinkChannel
      86: dup
      87: aload_0
      88: aload_2
      89: iload_1
      90: iload         4
      92: invokespecial #307                // Method io/undertow/protocols/http2/Http2PushPromiseStreamSinkChannel."<init>":(Lio/undertow/protocols/http2/Http2Channel;Lio/undertow/util/HeaderMap;II)V
      95: astore        5
      97: aload_0
      98: aload         5
     100: invokevirtual #109                // Method flushChannel:(Lorg/xnio/channels/StreamSinkChannel;)V
     103: new           #297                // class io/undertow/protocols/http2/Http2HeadersStreamSinkChannel
     106: dup
     107: aload_0
     108: iload         4
     110: aload_3
     111: invokespecial #298                // Method io/undertow/protocols/http2/Http2HeadersStreamSinkChannel."<init>":(Lio/undertow/protocols/http2/Http2Channel;ILio/undertow/util/HeaderMap;)V
     114: astore        6
     116: aload_0
     117: getfield      #7                  // Field currentStreams:Ljava/util/Map;
     120: iload         4
     122: invokestatic  #74                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     125: new           #68                 // class io/undertow/protocols/http2/Http2Channel$StreamHolder
     128: dup
     129: aload         6
     131: invokespecial #70                 // Method io/undertow/protocols/http2/Http2Channel$StreamHolder."<init>":(Lio/undertow/protocols/http2/Http2StreamSinkChannel;)V
     134: invokeinterface #75,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     139: pop
     140: aload         6
     142: areturn

  int grabFlowControlBytes(int);
    Code:
       0: iload_1
       1: ifgt          6
       4: iconst_0
       5: ireturn
       6: aload_0
       7: getfield      #25                 // Field flowControlLock:Ljava/lang/Object;
      10: dup
      11: astore_3
      12: monitorenter
      13: iload_1
      14: i2l
      15: aload_0
      16: getfield      #28                 // Field sendWindowSize:J
      19: invokestatic  #308                // Method java/lang/Math.min:(JJ)J
      22: l2i
      23: istore_2
      24: iload_1
      25: iconst_2
      26: if_icmple     38
      29: iload_2
      30: iconst_2
      31: if_icmpgt     38
      34: iconst_0
      35: aload_3
      36: monitorexit
      37: ireturn
      38: aload_0
      39: getfield      #12                 // Field sendMaxFrameSize:I
      42: iload_2
      43: invokestatic  #309                // Method java/lang/Math.min:(II)I
      46: istore_2
      47: aload_0
      48: dup
      49: getfield      #28                 // Field sendWindowSize:J
      52: iload_2
      53: i2l
      54: lsub
      55: putfield      #28                 // Field sendWindowSize:J
      58: aload_3
      59: monitorexit
      60: goto          70
      63: astore        4
      65: aload_3
      66: monitorexit
      67: aload         4
      69: athrow
      70: iload_2
      71: ireturn
    Exception table:
       from    to  target type
          13    37    63   any
          38    60    63   any
          63    67    63   any

  void registerStreamSink(io.undertow.protocols.http2.Http2HeadersStreamSinkChannel);
    Code:
       0: aload_0
       1: getfield      #7                  // Field currentStreams:Ljava/util/Map;
       4: aload_1
       5: invokevirtual #310                // Method io/undertow/protocols/http2/Http2HeadersStreamSinkChannel.getStreamId:()I
       8: invokestatic  #74                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      11: invokeinterface #144,  2          // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      16: checkcast     #68                 // class io/undertow/protocols/http2/Http2Channel$StreamHolder
      19: astore_2
      20: aload_2
      21: ifnonnull     33
      24: getstatic     #137                // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      27: invokeinterface #311,  1          // InterfaceMethod io/undertow/UndertowMessages.streamNotRegistered:()Ljava/lang/IllegalStateException;
      32: athrow
      33: aload_2
      34: aload_1
      35: putfield      #199                // Field io/undertow/protocols/http2/Http2Channel$StreamHolder.sinkChannel:Lio/undertow/protocols/http2/Http2StreamSinkChannel;
      38: return

  void removeStreamSink(int);
    Code:
       0: aload_0
       1: getfield      #7                  // Field currentStreams:Ljava/util/Map;
       4: iload_1
       5: invokestatic  #74                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       8: invokeinterface #144,  2          // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      13: checkcast     #68                 // class io/undertow/protocols/http2/Http2Channel$StreamHolder
      16: astore_2
      17: aload_2
      18: ifnonnull     22
      21: return
      22: aload_2
      23: iconst_1
      24: putfield      #71                 // Field io/undertow/protocols/http2/Http2Channel$StreamHolder.sinkClosed:Z
      27: aload_2
      28: aconst_null
      29: putfield      #199                // Field io/undertow/protocols/http2/Http2Channel$StreamHolder.sinkChannel:Lio/undertow/protocols/http2/Http2StreamSinkChannel;
      32: aload_2
      33: getfield      #145                // Field io/undertow/protocols/http2/Http2Channel$StreamHolder.sourceClosed:Z
      36: ifeq          90
      39: iload_1
      40: iconst_2
      41: irem
      42: aload_0
      43: invokevirtual #104                // Method isClient:()Z
      46: ifeq          53
      49: iconst_1
      50: goto          54
      53: iconst_0
      54: if_icmpne     68
      57: getstatic     #72                 // Field sendConcurrentStreamsAtomicUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      60: aload_0
      61: invokevirtual #164                // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndDecrement:(Ljava/lang/Object;)I
      64: pop
      65: goto          76
      68: getstatic     #156                // Field receiveConcurrentStreamsAtomicUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      71: aload_0
      72: invokevirtual #164                // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndDecrement:(Ljava/lang/Object;)I
      75: pop
      76: aload_0
      77: getfield      #7                  // Field currentStreams:Ljava/util/Map;
      80: iload_1
      81: invokestatic  #74                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      84: invokeinterface #165,  2          // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      89: pop
      90: aload_0
      91: invokevirtual #312                // Method isLastFrameReceived:()Z
      94: ifeq          117
      97: aload_0
      98: getfield      #7                  // Field currentStreams:Ljava/util/Map;
     101: invokeinterface #126,  1          // InterfaceMethod java/util/Map.isEmpty:()Z
     106: ifeq          117
     109: aload_0
     110: iconst_0
     111: invokevirtual #129                // Method sendGoAway:(I)V
     114: goto          143
     117: aload_0
     118: getfield      #91                 // Field parseTimeoutUpdater:Lio/undertow/server/protocol/ParseTimeoutUpdater;
     121: ifnull        143
     124: aload_0
     125: getfield      #7                  // Field currentStreams:Ljava/util/Map;
     128: invokeinterface #126,  1          // InterfaceMethod java/util/Map.isEmpty:()Z
     133: ifeq          143
     136: aload_0
     137: getfield      #91                 // Field parseTimeoutUpdater:Lio/undertow/server/protocol/ParseTimeoutUpdater;
     140: invokevirtual #313                // Method io/undertow/server/protocol/ParseTimeoutUpdater.connectionIdle:()V
     143: return

  public boolean isClient();
    Code:
       0: aload_0
       1: getfield      #29                 // Field streamIdCounter:I
       4: iconst_2
       5: irem
       6: iconst_1
       7: if_icmpne     14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  io.undertow.protocols.http2.HpackEncoder getEncoder();
    Code:
       0: aload_0
       1: getfield      #63                 // Field encoder:Lio/undertow/protocols/http2/HpackEncoder;
       4: areturn

  io.undertow.protocols.http2.HpackDecoder getDecoder();
    Code:
       0: aload_0
       1: getfield      #60                 // Field decoder:Lio/undertow/protocols/http2/HpackDecoder;
       4: areturn

  int getMaxHeaders();
    Code:
       0: aload_0
       1: getfield      #44                 // Field maxHeaders:I
       4: ireturn

  int getPaddingBytes();
    Code:
       0: aload_0
       1: getfield      #57                 // Field paddingRandom:Ljava/util/Random;
       4: ifnonnull     9
       7: iconst_0
       8: ireturn
       9: aload_0
      10: getfield      #57                 // Field paddingRandom:Ljava/util/Random;
      13: aload_0
      14: getfield      #51                 // Field maxPadding:I
      17: invokevirtual #314                // Method java/util/Random.nextInt:(I)I
      20: ireturn

  public <T> T getAttachment(io.undertow.util.AttachmentKey<T>);
    Code:
       0: aload_1
       1: ifnonnull     16
       4: getstatic     #137                // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
       7: ldc_w         #315                // String key
      10: invokeinterface #316,  2          // InterfaceMethod io/undertow/UndertowMessages.argumentCannotBeNull:(Ljava/lang/String;)Ljava/lang/IllegalArgumentException;
      15: athrow
      16: aload_0
      17: getfield      #22                 // Field attachments:Ljava/util/Map;
      20: aload_1
      21: invokeinterface #144,  2          // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      26: areturn

  public <T> java.util.List<T> getAttachmentList(io.undertow.util.AttachmentKey<? extends java.util.List<T>>);
    Code:
       0: aload_1
       1: ifnonnull     16
       4: getstatic     #137                // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
       7: ldc_w         #315                // String key
      10: invokeinterface #316,  2          // InterfaceMethod io/undertow/UndertowMessages.argumentCannotBeNull:(Ljava/lang/String;)Ljava/lang/IllegalArgumentException;
      15: athrow
      16: aload_0
      17: getfield      #22                 // Field attachments:Ljava/util/Map;
      20: aload_1
      21: invokeinterface #144,  2          // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      26: astore_2
      27: aload_2
      28: ifnonnull     35
      31: invokestatic  #317                // Method java/util/Collections.emptyList:()Ljava/util/List;
      34: areturn
      35: aload_2
      36: checkcast     #318                // class java/util/List
      39: areturn

  public <T> T putAttachment(io.undertow.util.AttachmentKey<T>, T);
    Code:
       0: aload_1
       1: ifnonnull     16
       4: getstatic     #137                // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
       7: ldc_w         #315                // String key
      10: invokeinterface #316,  2          // InterfaceMethod io/undertow/UndertowMessages.argumentCannotBeNull:(Ljava/lang/String;)Ljava/lang/IllegalArgumentException;
      15: athrow
      16: aload_1
      17: aload_0
      18: getfield      #22                 // Field attachments:Ljava/util/Map;
      21: aload_1
      22: aload_1
      23: aload_2
      24: invokevirtual #319                // Method io/undertow/util/AttachmentKey.cast:(Ljava/lang/Object;)Ljava/lang/Object;
      27: invokeinterface #75,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      32: invokevirtual #319                // Method io/undertow/util/AttachmentKey.cast:(Ljava/lang/Object;)Ljava/lang/Object;
      35: areturn

  public <T> T removeAttachment(io.undertow.util.AttachmentKey<T>);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #22                 // Field attachments:Ljava/util/Map;
       5: aload_1
       6: invokeinterface #165,  2          // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      11: invokevirtual #319                // Method io/undertow/util/AttachmentKey.cast:(Ljava/lang/Object;)Ljava/lang/Object;
      14: areturn

  public <T> void addToAttachmentList(io.undertow.util.AttachmentKey<io.undertow.util.AttachmentList<T>>, T);
    Code:
       0: aload_1
       1: ifnonnull     16
       4: getstatic     #137                // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
       7: ldc_w         #315                // String key
      10: invokeinterface #316,  2          // InterfaceMethod io/undertow/UndertowMessages.argumentCannotBeNull:(Ljava/lang/String;)Ljava/lang/IllegalArgumentException;
      15: athrow
      16: aload_0
      17: getfield      #22                 // Field attachments:Ljava/util/Map;
      20: astore_3
      21: aload_3
      22: dup
      23: astore        4
      25: monitorenter
      26: aload_1
      27: aload_3
      28: aload_1
      29: invokeinterface #144,  2          // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      34: invokevirtual #319                // Method io/undertow/util/AttachmentKey.cast:(Ljava/lang/Object;)Ljava/lang/Object;
      37: checkcast     #318                // class java/util/List
      40: astore        5
      42: aload         5
      44: ifnonnull     78
      47: new           #320                // class io/undertow/util/AttachmentList
      50: dup
      51: ldc           #23                 // class java/lang/Object
      53: invokespecial #321                // Method io/undertow/util/AttachmentList."<init>":(Ljava/lang/Class;)V
      56: astore        6
      58: aload_3
      59: aload_1
      60: aload         6
      62: invokeinterface #75,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      67: pop
      68: aload         6
      70: aload_2
      71: invokevirtual #322                // Method io/undertow/util/AttachmentList.add:(Ljava/lang/Object;)Z
      74: pop
      75: goto          87
      78: aload         5
      80: aload_2
      81: invokeinterface #103,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      86: pop
      87: aload         4
      89: monitorexit
      90: goto          101
      93: astore        7
      95: aload         4
      97: monitorexit
      98: aload         7
     100: athrow
     101: return
    Exception table:
       from    to  target type
          26    90    93   any
          93    98    93   any

  public void sendRstStream(int, int);
    Code:
       0: aload_0
       1: invokevirtual #293                // Method isOpen:()Z
       4: ifne          8
       7: return
       8: aload_0
       9: iload_1
      10: invokevirtual #177                // Method handleRstStream:(I)V
      13: getstatic     #111                // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
      16: invokeinterface #323,  1          // InterfaceMethod io/undertow/UndertowLogger.isDebugEnabled:()Z
      21: ifeq          47
      24: getstatic     #111                // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
      27: new           #227                // class java/nio/channels/ClosedChannelException
      30: dup
      31: invokespecial #275                // Method java/nio/channels/ClosedChannelException."<init>":()V
      34: ldc_w         #324                // String Sending rststream on channel %s stream %s
      37: aload_0
      38: iload_1
      39: invokestatic  #74                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      42: invokeinterface #325,  5          // InterfaceMethod io/undertow/UndertowLogger.debugf:(Ljava/lang/Throwable;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      47: new           #326                // class io/undertow/protocols/http2/Http2RstStreamSinkChannel
      50: dup
      51: aload_0
      52: iload_1
      53: iload_2
      54: invokespecial #327                // Method io/undertow/protocols/http2/Http2RstStreamSinkChannel."<init>":(Lio/undertow/protocols/http2/Http2Channel;II)V
      57: astore_3
      58: aload_0
      59: aload_3
      60: invokevirtual #107                // Method flushChannelIgnoreFailure:(Lorg/xnio/channels/StreamSinkChannel;)V
      63: return

  private void handleRstStream(int);
    Code:
       0: aload_0
       1: getfield      #7                  // Field currentStreams:Ljava/util/Map;
       4: iload_1
       5: invokestatic  #74                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       8: invokeinterface #165,  2          // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      13: checkcast     #68                 // class io/undertow/protocols/http2/Http2Channel$StreamHolder
      16: astore_2
      17: aload_2
      18: ifnull        86
      21: iload_1
      22: iconst_2
      23: irem
      24: aload_0
      25: invokevirtual #104                // Method isClient:()Z
      28: ifeq          35
      31: iconst_1
      32: goto          36
      35: iconst_0
      36: if_icmpne     50
      39: getstatic     #72                 // Field sendConcurrentStreamsAtomicUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      42: aload_0
      43: invokevirtual #164                // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndDecrement:(Ljava/lang/Object;)I
      46: pop
      47: goto          58
      50: getstatic     #156                // Field receiveConcurrentStreamsAtomicUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      53: aload_0
      54: invokevirtual #164                // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndDecrement:(Ljava/lang/Object;)I
      57: pop
      58: aload_2
      59: getfield      #199                // Field io/undertow/protocols/http2/Http2Channel$StreamHolder.sinkChannel:Lio/undertow/protocols/http2/Http2StreamSinkChannel;
      62: ifnull        72
      65: aload_2
      66: getfield      #199                // Field io/undertow/protocols/http2/Http2Channel$StreamHolder.sinkChannel:Lio/undertow/protocols/http2/Http2StreamSinkChannel;
      69: invokevirtual #200                // Method io/undertow/protocols/http2/Http2StreamSinkChannel.rstStream:()V
      72: aload_2
      73: getfield      #147                // Field io/undertow/protocols/http2/Http2Channel$StreamHolder.sourceChannel:Lio/undertow/protocols/http2/Http2StreamSourceChannel;
      76: ifnull        86
      79: aload_2
      80: getfield      #147                // Field io/undertow/protocols/http2/Http2Channel$StreamHolder.sourceChannel:Lio/undertow/protocols/http2/Http2StreamSourceChannel;
      83: invokevirtual #198                // Method io/undertow/protocols/http2/Http2StreamSourceChannel.rstStream:()V
      86: return

  public synchronized io.undertow.protocols.http2.Http2HeadersStreamSinkChannel createInitialUpgradeResponseStream();
    Code:
       0: aload_0
       1: getfield      #305                // Field lastGoodStreamId:I
       4: ifeq          15
       7: new           #328                // class java/lang/IllegalStateException
      10: dup
      11: invokespecial #329                // Method java/lang/IllegalStateException."<init>":()V
      14: athrow
      15: aload_0
      16: iconst_1
      17: invokevirtual #155                // Method updateStreamIdsCountersInHeaders:(I)V
      20: new           #297                // class io/undertow/protocols/http2/Http2HeadersStreamSinkChannel
      23: dup
      24: aload_0
      25: iconst_1
      26: invokespecial #330                // Method io/undertow/protocols/http2/Http2HeadersStreamSinkChannel."<init>":(Lio/undertow/protocols/http2/Http2Channel;I)V
      29: astore_1
      30: new           #68                 // class io/undertow/protocols/http2/Http2Channel$StreamHolder
      33: dup
      34: aload_1
      35: invokespecial #70                 // Method io/undertow/protocols/http2/Http2Channel$StreamHolder."<init>":(Lio/undertow/protocols/http2/Http2StreamSinkChannel;)V
      38: astore_2
      39: aload_2
      40: iconst_1
      41: putfield      #145                // Field io/undertow/protocols/http2/Http2Channel$StreamHolder.sourceClosed:Z
      44: aload_0
      45: getfield      #7                  // Field currentStreams:Ljava/util/Map;
      48: iconst_1
      49: invokestatic  #74                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      52: aload_2
      53: invokeinterface #75,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      58: pop
      59: getstatic     #156                // Field receiveConcurrentStreamsAtomicUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      62: aload_0
      63: invokevirtual #73                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
      66: pop
      67: aload_1
      68: areturn

  public boolean isPushEnabled();
    Code:
       0: aload_0
       1: getfield      #32                 // Field pushEnabled:Z
       4: ireturn

  public boolean isPeerGoneAway();
    Code:
       0: aload_0
       1: getfield      #15                 // Field peerGoneAway:Z
       4: ireturn

  public boolean isThisGoneAway();
    Code:
       0: aload_0
       1: getfield      #14                 // Field thisGoneAway:Z
       4: ireturn

  io.undertow.protocols.http2.Http2StreamSourceChannel removeStreamSource(int);
    Code:
       0: aload_0
       1: getfield      #7                  // Field currentStreams:Ljava/util/Map;
       4: iload_1
       5: invokestatic  #74                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       8: invokeinterface #144,  2          // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      13: checkcast     #68                 // class io/undertow/protocols/http2/Http2Channel$StreamHolder
      16: astore_2
      17: aload_2
      18: ifnonnull     23
      21: aconst_null
      22: areturn
      23: aload_2
      24: iconst_1
      25: putfield      #145                // Field io/undertow/protocols/http2/Http2Channel$StreamHolder.sourceClosed:Z
      28: aload_2
      29: getfield      #147                // Field io/undertow/protocols/http2/Http2Channel$StreamHolder.sourceChannel:Lio/undertow/protocols/http2/Http2StreamSourceChannel;
      32: astore_3
      33: aload_2
      34: aconst_null
      35: putfield      #147                // Field io/undertow/protocols/http2/Http2Channel$StreamHolder.sourceChannel:Lio/undertow/protocols/http2/Http2StreamSourceChannel;
      38: aload_2
      39: getfield      #71                 // Field io/undertow/protocols/http2/Http2Channel$StreamHolder.sinkClosed:Z
      42: ifeq          96
      45: iload_1
      46: iconst_2
      47: irem
      48: aload_0
      49: invokevirtual #104                // Method isClient:()Z
      52: ifeq          59
      55: iconst_1
      56: goto          60
      59: iconst_0
      60: if_icmpne     74
      63: getstatic     #72                 // Field sendConcurrentStreamsAtomicUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      66: aload_0
      67: invokevirtual #164                // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndDecrement:(Ljava/lang/Object;)I
      70: pop
      71: goto          82
      74: getstatic     #156                // Field receiveConcurrentStreamsAtomicUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      77: aload_0
      78: invokevirtual #164                // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndDecrement:(Ljava/lang/Object;)I
      81: pop
      82: aload_0
      83: getfield      #7                  // Field currentStreams:Ljava/util/Map;
      86: iload_1
      87: invokestatic  #74                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      90: invokeinterface #165,  2          // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      95: pop
      96: aload_3
      97: areturn

  io.undertow.protocols.http2.Http2StreamSourceChannel getIncomingStream(int);
    Code:
       0: aload_0
       1: getfield      #7                  // Field currentStreams:Ljava/util/Map;
       4: iload_1
       5: invokestatic  #74                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       8: invokeinterface #144,  2          // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      13: checkcast     #68                 // class io/undertow/protocols/http2/Http2Channel$StreamHolder
      16: astore_2
      17: aload_2
      18: ifnonnull     23
      21: aconst_null
      22: areturn
      23: aload_2
      24: getfield      #147                // Field io/undertow/protocols/http2/Http2Channel$StreamHolder.sourceChannel:Lio/undertow/protocols/http2/Http2StreamSourceChannel;
      27: areturn

  public int getReceiveMaxFrameSize();
    Code:
       0: aload_0
       1: getfield      #49                 // Field receiveMaxFrameSize:I
       4: ireturn

  public int getSendMaxFrameSize();
    Code:
       0: aload_0
       1: getfield      #12                 // Field sendMaxFrameSize:I
       4: ireturn

  public java.lang.String getProtocol();
    Code:
       0: aload_0
       1: getfield      #41                 // Field protocol:Ljava/lang/String;
       4: areturn

  private synchronized boolean isIdle(int);
    Code:
       0: iload_1
       1: iconst_2
       2: irem
       3: aload_0
       4: getfield      #29                 // Field streamIdCounter:I
       7: iconst_2
       8: irem
       9: if_icmpne     26
      12: iload_1
      13: aload_0
      14: getfield      #29                 // Field streamIdCounter:I
      17: if_icmplt     24
      20: iconst_1
      21: goto          25
      24: iconst_0
      25: ireturn
      26: iload_1
      27: aload_0
      28: getfield      #303                // Field lastAssignedStreamOtherSide:I
      31: if_icmple     38
      34: iconst_1
      35: goto          39
      38: iconst_0
      39: ireturn

  int getMaxHeaderListSize();
    Code:
       0: aload_0
       1: getfield      #54                 // Field maxHeaderListSize:I
       4: ireturn

  protected io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel createChannel(io.undertow.server.protocol.framed.FrameHeaderData, io.undertow.connector.PooledByteBuffer) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #331                // Method createChannel:(Lio/undertow/server/protocol/framed/FrameHeaderData;Lio/undertow/connector/PooledByteBuffer;)Lio/undertow/protocols/http2/AbstractHttp2StreamSourceChannel;
       6: areturn

  static {};
    Code:
       0: new           #332                // class io/undertow/util/HttpString
       3: dup
       4: ldc_w         #333                // String :method
       7: invokespecial #334                // Method io/undertow/util/HttpString."<init>":(Ljava/lang/String;)V
      10: putstatic     #335                // Field METHOD:Lio/undertow/util/HttpString;
      13: new           #332                // class io/undertow/util/HttpString
      16: dup
      17: ldc_w         #336                // String :path
      20: invokespecial #334                // Method io/undertow/util/HttpString."<init>":(Ljava/lang/String;)V
      23: putstatic     #337                // Field PATH:Lio/undertow/util/HttpString;
      26: new           #332                // class io/undertow/util/HttpString
      29: dup
      30: ldc_w         #338                // String :scheme
      33: invokespecial #334                // Method io/undertow/util/HttpString."<init>":(Ljava/lang/String;)V
      36: putstatic     #339                // Field SCHEME:Lio/undertow/util/HttpString;
      39: new           #332                // class io/undertow/util/HttpString
      42: dup
      43: ldc_w         #340                // String :authority
      46: invokespecial #334                // Method io/undertow/util/HttpString."<init>":(Ljava/lang/String;)V
      49: putstatic     #341                // Field AUTHORITY:Lio/undertow/util/HttpString;
      52: new           #332                // class io/undertow/util/HttpString
      55: dup
      56: ldc_w         #342                // String :status
      59: invokespecial #334                // Method io/undertow/util/HttpString."<init>":(Ljava/lang/String;)V
      62: putstatic     #161                // Field STATUS:Lio/undertow/util/HttpString;
      65: bipush        24
      67: newarray       byte
      69: dup
      70: iconst_0
      71: bipush        80
      73: bastore
      74: dup
      75: iconst_1
      76: bipush        82
      78: bastore
      79: dup
      80: iconst_2
      81: bipush        73
      83: bastore
      84: dup
      85: iconst_3
      86: bipush        32
      88: bastore
      89: dup
      90: iconst_4
      91: bipush        42
      93: bastore
      94: dup
      95: iconst_5
      96: bipush        32
      98: bastore
      99: dup
     100: bipush        6
     102: bipush        72
     104: bastore
     105: dup
     106: bipush        7
     108: bipush        84
     110: bastore
     111: dup
     112: bipush        8
     114: bipush        84
     116: bastore
     117: dup
     118: bipush        9
     120: bipush        80
     122: bastore
     123: dup
     124: bipush        10
     126: bipush        47
     128: bastore
     129: dup
     130: bipush        11
     132: bipush        50
     134: bastore
     135: dup
     136: bipush        12
     138: bipush        46
     140: bastore
     141: dup
     142: bipush        13
     144: bipush        48
     146: bastore
     147: dup
     148: bipush        14
     150: bipush        13
     152: bastore
     153: dup
     154: bipush        15
     156: bipush        10
     158: bastore
     159: dup
     160: bipush        16
     162: bipush        13
     164: bastore
     165: dup
     166: bipush        17
     168: bipush        10
     170: bastore
     171: dup
     172: bipush        18
     174: bipush        83
     176: bastore
     177: dup
     178: bipush        19
     180: bipush        77
     182: bastore
     183: dup
     184: bipush        20
     186: bipush        13
     188: bastore
     189: dup
     190: bipush        21
     192: bipush        10
     194: bastore
     195: dup
     196: bipush        22
     198: bipush        13
     200: bastore
     201: dup
     202: bipush        23
     204: bipush        10
     206: bastore
     207: putstatic     #64                 // Field PREFACE_BYTES:[B
     210: ldc           #11                 // class io/undertow/protocols/http2/Http2Channel
     212: ldc_w         #343                // String sendConcurrentStreams
     215: invokestatic  #344                // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     218: putstatic     #72                 // Field sendConcurrentStreamsAtomicUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     221: ldc           #11                 // class io/undertow/protocols/http2/Http2Channel
     223: ldc_w         #345                // String receiveConcurrentStreams
     226: invokestatic  #344                // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     229: putstatic     #156                // Field receiveConcurrentStreamsAtomicUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     232: return
}
