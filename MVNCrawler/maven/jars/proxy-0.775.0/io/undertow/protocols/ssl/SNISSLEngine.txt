Compiled from "SNISSLEngine.java"
class io.undertow.protocols.ssl.SNISSLEngine extends javax.net.ssl.SSLEngine {
  private static final javax.net.ssl.SSLEngineResult UNDERFLOW_UNWRAP;

  private static final javax.net.ssl.SSLEngineResult OK_UNWRAP;

  private final java.util.concurrent.atomic.AtomicReference<javax.net.ssl.SSLEngine> currentRef;

  private java.util.function.Function<javax.net.ssl.SSLEngine, javax.net.ssl.SSLEngine> selectionCallback;

  static final int FL_WANT_C_AUTH;

  static final int FL_NEED_C_AUTH;

  static final int FL_SESSION_CRE;

  static final javax.net.ssl.SSLEngine CLOSED_STATE;

  io.undertow.protocols.ssl.SNISSLEngine(io.undertow.protocols.ssl.SNIContextMatcher);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method javax/net/ssl/SSLEngine."<init>":()V
       4: aload_0
       5: invokestatic  #2                  // InterfaceMethod java/util/function/Function.identity:()Ljava/util/function/Function;
       8: putfield      #3                  // Field selectionCallback:Ljava/util/function/Function;
      11: aload_0
      12: new           #4                  // class java/util/concurrent/atomic/AtomicReference
      15: dup
      16: new           #5                  // class io/undertow/protocols/ssl/SNISSLEngine$InitialState
      19: dup
      20: aload_0
      21: aload_1
      22: invokedynamic #6,  0              // InvokeDynamic #0:apply:()Ljava/util/function/Function;
      27: invokespecial #7                  // Method io/undertow/protocols/ssl/SNISSLEngine$InitialState."<init>":(Lio/undertow/protocols/ssl/SNISSLEngine;Lio/undertow/protocols/ssl/SNIContextMatcher;Ljava/util/function/Function;)V
      30: invokespecial #8                  // Method java/util/concurrent/atomic/AtomicReference."<init>":(Ljava/lang/Object;)V
      33: putfield      #9                  // Field currentRef:Ljava/util/concurrent/atomic/AtomicReference;
      36: return

  io.undertow.protocols.ssl.SNISSLEngine(io.undertow.protocols.ssl.SNIContextMatcher, java.lang.String, int);
    Code:
       0: aload_0
       1: aload_2
       2: iload_3
       3: invokespecial #10                 // Method javax/net/ssl/SSLEngine."<init>":(Ljava/lang/String;I)V
       6: aload_0
       7: invokestatic  #2                  // InterfaceMethod java/util/function/Function.identity:()Ljava/util/function/Function;
      10: putfield      #3                  // Field selectionCallback:Ljava/util/function/Function;
      13: aload_0
      14: new           #4                  // class java/util/concurrent/atomic/AtomicReference
      17: dup
      18: new           #5                  // class io/undertow/protocols/ssl/SNISSLEngine$InitialState
      21: dup
      22: aload_0
      23: aload_1
      24: aload_2
      25: iload_3
      26: invokedynamic #11,  0             // InvokeDynamic #1:apply:(Ljava/lang/String;I)Ljava/util/function/Function;
      31: invokespecial #7                  // Method io/undertow/protocols/ssl/SNISSLEngine$InitialState."<init>":(Lio/undertow/protocols/ssl/SNISSLEngine;Lio/undertow/protocols/ssl/SNIContextMatcher;Ljava/util/function/Function;)V
      34: invokespecial #8                  // Method java/util/concurrent/atomic/AtomicReference."<init>":(Ljava/lang/Object;)V
      37: putfield      #9                  // Field currentRef:Ljava/util/concurrent/atomic/AtomicReference;
      40: return

  public java.util.function.Function<javax.net.ssl.SSLEngine, javax.net.ssl.SSLEngine> getSelectionCallback();
    Code:
       0: aload_0
       1: getfield      #3                  // Field selectionCallback:Ljava/util/function/Function;
       4: areturn

  public void setSelectionCallback(java.util.function.Function<javax.net.ssl.SSLEngine, javax.net.ssl.SSLEngine>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #3                  // Field selectionCallback:Ljava/util/function/Function;
       5: return

  public javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer[], int, int, java.nio.ByteBuffer) throws javax.net.ssl.SSLException;
    Code:
       0: aload_0
       1: getfield      #9                  // Field currentRef:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #13                 // class javax/net/ssl/SSLEngine
      10: aload_1
      11: iload_2
      12: iload_3
      13: aload         4
      15: invokevirtual #14                 // Method javax/net/ssl/SSLEngine.wrap:([Ljava/nio/ByteBuffer;IILjava/nio/ByteBuffer;)Ljavax/net/ssl/SSLEngineResult;
      18: areturn

  public javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer, java.nio.ByteBuffer) throws javax.net.ssl.SSLException;
    Code:
       0: aload_0
       1: getfield      #9                  // Field currentRef:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #13                 // class javax/net/ssl/SSLEngine
      10: aload_1
      11: aload_2
      12: invokevirtual #15                 // Method javax/net/ssl/SSLEngine.wrap:(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)Ljavax/net/ssl/SSLEngineResult;
      15: areturn

  public javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer[], java.nio.ByteBuffer) throws javax.net.ssl.SSLException;
    Code:
       0: aload_0
       1: getfield      #9                  // Field currentRef:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #13                 // class javax/net/ssl/SSLEngine
      10: aload_1
      11: aload_2
      12: invokevirtual #16                 // Method javax/net/ssl/SSLEngine.wrap:([Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)Ljavax/net/ssl/SSLEngineResult;
      15: areturn

  public javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer, java.nio.ByteBuffer[], int, int) throws javax.net.ssl.SSLException;
    Code:
       0: aload_0
       1: getfield      #9                  // Field currentRef:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #13                 // class javax/net/ssl/SSLEngine
      10: aload_1
      11: aload_2
      12: iload_3
      13: iload         4
      15: invokevirtual #17                 // Method javax/net/ssl/SSLEngine.unwrap:(Ljava/nio/ByteBuffer;[Ljava/nio/ByteBuffer;II)Ljavax/net/ssl/SSLEngineResult;
      18: areturn

  public javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer, java.nio.ByteBuffer) throws javax.net.ssl.SSLException;
    Code:
       0: aload_0
       1: getfield      #9                  // Field currentRef:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #13                 // class javax/net/ssl/SSLEngine
      10: aload_1
      11: aload_2
      12: invokevirtual #18                 // Method javax/net/ssl/SSLEngine.unwrap:(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)Ljavax/net/ssl/SSLEngineResult;
      15: areturn

  public javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer, java.nio.ByteBuffer[]) throws javax.net.ssl.SSLException;
    Code:
       0: aload_0
       1: getfield      #9                  // Field currentRef:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #13                 // class javax/net/ssl/SSLEngine
      10: aload_1
      11: aload_2
      12: invokevirtual #19                 // Method javax/net/ssl/SSLEngine.unwrap:(Ljava/nio/ByteBuffer;[Ljava/nio/ByteBuffer;)Ljavax/net/ssl/SSLEngineResult;
      15: areturn

  public java.lang.String getPeerHost();
    Code:
       0: aload_0
       1: getfield      #9                  // Field currentRef:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #13                 // class javax/net/ssl/SSLEngine
      10: invokevirtual #20                 // Method javax/net/ssl/SSLEngine.getPeerHost:()Ljava/lang/String;
      13: areturn

  public int getPeerPort();
    Code:
       0: aload_0
       1: getfield      #9                  // Field currentRef:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #13                 // class javax/net/ssl/SSLEngine
      10: invokevirtual #21                 // Method javax/net/ssl/SSLEngine.getPeerPort:()I
      13: ireturn

  public javax.net.ssl.SSLSession getHandshakeSession();
    Code:
       0: aload_0
       1: getfield      #9                  // Field currentRef:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #13                 // class javax/net/ssl/SSLEngine
      10: invokevirtual #22                 // Method javax/net/ssl/SSLEngine.getHandshakeSession:()Ljavax/net/ssl/SSLSession;
      13: areturn

  public javax.net.ssl.SSLParameters getSSLParameters();
    Code:
       0: aload_0
       1: getfield      #9                  // Field currentRef:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #13                 // class javax/net/ssl/SSLEngine
      10: invokevirtual #23                 // Method javax/net/ssl/SSLEngine.getSSLParameters:()Ljavax/net/ssl/SSLParameters;
      13: areturn

  public void setSSLParameters(javax.net.ssl.SSLParameters);
    Code:
       0: aload_0
       1: getfield      #9                  // Field currentRef:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #13                 // class javax/net/ssl/SSLEngine
      10: aload_1
      11: invokevirtual #24                 // Method javax/net/ssl/SSLEngine.setSSLParameters:(Ljavax/net/ssl/SSLParameters;)V
      14: return

  public java.lang.Runnable getDelegatedTask();
    Code:
       0: aload_0
       1: getfield      #9                  // Field currentRef:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #13                 // class javax/net/ssl/SSLEngine
      10: invokevirtual #25                 // Method javax/net/ssl/SSLEngine.getDelegatedTask:()Ljava/lang/Runnable;
      13: areturn

  public void closeInbound() throws javax.net.ssl.SSLException;
    Code:
       0: aload_0
       1: getfield      #9                  // Field currentRef:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #13                 // class javax/net/ssl/SSLEngine
      10: invokevirtual #26                 // Method javax/net/ssl/SSLEngine.closeInbound:()V
      13: return

  public boolean isInboundDone();
    Code:
       0: aload_0
       1: getfield      #9                  // Field currentRef:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #13                 // class javax/net/ssl/SSLEngine
      10: invokevirtual #27                 // Method javax/net/ssl/SSLEngine.isInboundDone:()Z
      13: ireturn

  public void closeOutbound();
    Code:
       0: aload_0
       1: getfield      #9                  // Field currentRef:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #13                 // class javax/net/ssl/SSLEngine
      10: invokevirtual #28                 // Method javax/net/ssl/SSLEngine.closeOutbound:()V
      13: return

  public boolean isOutboundDone();
    Code:
       0: aload_0
       1: getfield      #9                  // Field currentRef:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #13                 // class javax/net/ssl/SSLEngine
      10: invokevirtual #29                 // Method javax/net/ssl/SSLEngine.isOutboundDone:()Z
      13: ireturn

  public java.lang.String[] getSupportedCipherSuites();
    Code:
       0: aload_0
       1: getfield      #9                  // Field currentRef:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #13                 // class javax/net/ssl/SSLEngine
      10: invokevirtual #30                 // Method javax/net/ssl/SSLEngine.getSupportedCipherSuites:()[Ljava/lang/String;
      13: areturn

  public java.lang.String[] getEnabledCipherSuites();
    Code:
       0: aload_0
       1: getfield      #9                  // Field currentRef:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #13                 // class javax/net/ssl/SSLEngine
      10: invokevirtual #31                 // Method javax/net/ssl/SSLEngine.getEnabledCipherSuites:()[Ljava/lang/String;
      13: areturn

  public void setEnabledCipherSuites(java.lang.String[]);
    Code:
       0: aload_0
       1: getfield      #9                  // Field currentRef:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #13                 // class javax/net/ssl/SSLEngine
      10: aload_1
      11: invokevirtual #32                 // Method javax/net/ssl/SSLEngine.setEnabledCipherSuites:([Ljava/lang/String;)V
      14: return

  public java.lang.String[] getSupportedProtocols();
    Code:
       0: aload_0
       1: getfield      #9                  // Field currentRef:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #13                 // class javax/net/ssl/SSLEngine
      10: invokevirtual #33                 // Method javax/net/ssl/SSLEngine.getSupportedProtocols:()[Ljava/lang/String;
      13: areturn

  public java.lang.String[] getEnabledProtocols();
    Code:
       0: aload_0
       1: getfield      #9                  // Field currentRef:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #13                 // class javax/net/ssl/SSLEngine
      10: invokevirtual #34                 // Method javax/net/ssl/SSLEngine.getEnabledProtocols:()[Ljava/lang/String;
      13: areturn

  public void setEnabledProtocols(java.lang.String[]);
    Code:
       0: aload_0
       1: getfield      #9                  // Field currentRef:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #13                 // class javax/net/ssl/SSLEngine
      10: aload_1
      11: invokevirtual #35                 // Method javax/net/ssl/SSLEngine.setEnabledProtocols:([Ljava/lang/String;)V
      14: return

  public javax.net.ssl.SSLSession getSession();
    Code:
       0: aload_0
       1: getfield      #9                  // Field currentRef:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #13                 // class javax/net/ssl/SSLEngine
      10: invokevirtual #36                 // Method javax/net/ssl/SSLEngine.getSession:()Ljavax/net/ssl/SSLSession;
      13: areturn

  public void beginHandshake() throws javax.net.ssl.SSLException;
    Code:
       0: aload_0
       1: getfield      #9                  // Field currentRef:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #13                 // class javax/net/ssl/SSLEngine
      10: invokevirtual #37                 // Method javax/net/ssl/SSLEngine.beginHandshake:()V
      13: return

  public javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus();
    Code:
       0: aload_0
       1: getfield      #9                  // Field currentRef:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #13                 // class javax/net/ssl/SSLEngine
      10: invokevirtual #38                 // Method javax/net/ssl/SSLEngine.getHandshakeStatus:()Ljavax/net/ssl/SSLEngineResult$HandshakeStatus;
      13: areturn

  public void setUseClientMode(boolean);
    Code:
       0: aload_0
       1: getfield      #9                  // Field currentRef:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #13                 // class javax/net/ssl/SSLEngine
      10: iload_1
      11: invokevirtual #39                 // Method javax/net/ssl/SSLEngine.setUseClientMode:(Z)V
      14: return

  public boolean getUseClientMode();
    Code:
       0: aload_0
       1: getfield      #9                  // Field currentRef:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #13                 // class javax/net/ssl/SSLEngine
      10: invokevirtual #40                 // Method javax/net/ssl/SSLEngine.getUseClientMode:()Z
      13: ireturn

  public void setNeedClientAuth(boolean);
    Code:
       0: aload_0
       1: getfield      #9                  // Field currentRef:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #13                 // class javax/net/ssl/SSLEngine
      10: iload_1
      11: invokevirtual #41                 // Method javax/net/ssl/SSLEngine.setNeedClientAuth:(Z)V
      14: return

  public boolean getNeedClientAuth();
    Code:
       0: aload_0
       1: getfield      #9                  // Field currentRef:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #13                 // class javax/net/ssl/SSLEngine
      10: invokevirtual #42                 // Method javax/net/ssl/SSLEngine.getNeedClientAuth:()Z
      13: ireturn

  public void setWantClientAuth(boolean);
    Code:
       0: aload_0
       1: getfield      #9                  // Field currentRef:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #13                 // class javax/net/ssl/SSLEngine
      10: iload_1
      11: invokevirtual #43                 // Method javax/net/ssl/SSLEngine.setWantClientAuth:(Z)V
      14: return

  public boolean getWantClientAuth();
    Code:
       0: aload_0
       1: getfield      #9                  // Field currentRef:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #13                 // class javax/net/ssl/SSLEngine
      10: invokevirtual #44                 // Method javax/net/ssl/SSLEngine.getWantClientAuth:()Z
      13: ireturn

  public void setEnableSessionCreation(boolean);
    Code:
       0: aload_0
       1: getfield      #9                  // Field currentRef:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #13                 // class javax/net/ssl/SSLEngine
      10: iload_1
      11: invokevirtual #45                 // Method javax/net/ssl/SSLEngine.setEnableSessionCreation:(Z)V
      14: return

  public boolean getEnableSessionCreation();
    Code:
       0: aload_0
       1: getfield      #9                  // Field currentRef:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #13                 // class javax/net/ssl/SSLEngine
      10: invokevirtual #46                 // Method javax/net/ssl/SSLEngine.getEnableSessionCreation:()Z
      13: ireturn

  private static javax.net.ssl.SSLEngine lambda$new$0(java.lang.String, int, javax.net.ssl.SSLContext);
    Code:
       0: aload_2
       1: aload_0
       2: iload_1
       3: invokevirtual #47                 // Method javax/net/ssl/SSLContext.createSSLEngine:(Ljava/lang/String;I)Ljavax/net/ssl/SSLEngine;
       6: areturn

  static {};
    Code:
       0: new           #48                 // class javax/net/ssl/SSLEngineResult
       3: dup
       4: getstatic     #49                 // Field javax/net/ssl/SSLEngineResult$Status.BUFFER_UNDERFLOW:Ljavax/net/ssl/SSLEngineResult$Status;
       7: getstatic     #50                 // Field javax/net/ssl/SSLEngineResult$HandshakeStatus.NEED_UNWRAP:Ljavax/net/ssl/SSLEngineResult$HandshakeStatus;
      10: iconst_0
      11: iconst_0
      12: invokespecial #51                 // Method javax/net/ssl/SSLEngineResult."<init>":(Ljavax/net/ssl/SSLEngineResult$Status;Ljavax/net/ssl/SSLEngineResult$HandshakeStatus;II)V
      15: putstatic     #52                 // Field UNDERFLOW_UNWRAP:Ljavax/net/ssl/SSLEngineResult;
      18: new           #48                 // class javax/net/ssl/SSLEngineResult
      21: dup
      22: getstatic     #53                 // Field javax/net/ssl/SSLEngineResult$Status.OK:Ljavax/net/ssl/SSLEngineResult$Status;
      25: getstatic     #50                 // Field javax/net/ssl/SSLEngineResult$HandshakeStatus.NEED_UNWRAP:Ljavax/net/ssl/SSLEngineResult$HandshakeStatus;
      28: iconst_0
      29: iconst_0
      30: invokespecial #51                 // Method javax/net/ssl/SSLEngineResult."<init>":(Ljavax/net/ssl/SSLEngineResult$Status;Ljavax/net/ssl/SSLEngineResult$HandshakeStatus;II)V
      33: putstatic     #54                 // Field OK_UNWRAP:Ljavax/net/ssl/SSLEngineResult;
      36: new           #55                 // class io/undertow/protocols/ssl/SNISSLEngine$1
      39: dup
      40: invokespecial #56                 // Method io/undertow/protocols/ssl/SNISSLEngine$1."<init>":()V
      43: putstatic     #57                 // Field CLOSED_STATE:Ljavax/net/ssl/SSLEngine;
      46: return
}
