Compiled from "SNISSLEngine.java"
class io.undertow.protocols.ssl.SNISSLEngine$InitialState extends javax.net.ssl.SSLEngine {
  private final io.undertow.protocols.ssl.SNIContextMatcher selector;

  private final java.util.concurrent.atomic.AtomicInteger flags;

  private final java.util.function.Function<javax.net.ssl.SSLContext, javax.net.ssl.SSLEngine> engineFunction;

  private int packetBufferSize;

  private java.lang.String[] enabledSuites;

  private java.lang.String[] enabledProtocols;

  private final javax.net.ssl.SSLSession handshakeSession;

  final io.undertow.protocols.ssl.SNISSLEngine this$0;

  io.undertow.protocols.ssl.SNISSLEngine$InitialState(io.undertow.protocols.ssl.SNIContextMatcher, java.util.function.Function<javax.net.ssl.SSLContext, javax.net.ssl.SSLEngine>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2                  // Field this$0:Lio/undertow/protocols/ssl/SNISSLEngine;
       5: aload_0
       6: invokespecial #3                  // Method javax/net/ssl/SSLEngine."<init>":()V
       9: aload_0
      10: new           #4                  // class java/util/concurrent/atomic/AtomicInteger
      13: dup
      14: iconst_4
      15: invokespecial #5                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
      18: putfield      #6                  // Field flags:Ljava/util/concurrent/atomic/AtomicInteger;
      21: aload_0
      22: iconst_5
      23: putfield      #8                  // Field packetBufferSize:I
      26: aload_0
      27: new           #9                  // class io/undertow/protocols/ssl/SNISSLEngine$InitialState$1
      30: dup
      31: aload_0
      32: invokespecial #10                 // Method io/undertow/protocols/ssl/SNISSLEngine$InitialState$1."<init>":(Lio/undertow/protocols/ssl/SNISSLEngine$InitialState;)V
      35: putfield      #11                 // Field handshakeSession:Ljavax/net/ssl/SSLSession;
      38: aload_0
      39: aload_2
      40: putfield      #12                 // Field selector:Lio/undertow/protocols/ssl/SNIContextMatcher;
      43: aload_0
      44: aload_3
      45: putfield      #13                 // Field engineFunction:Ljava/util/function/Function;
      48: return

  public javax.net.ssl.SSLSession getHandshakeSession();
    Code:
       0: aload_0
       1: getfield      #11                 // Field handshakeSession:Ljavax/net/ssl/SSLSession;
       4: areturn

  public javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer[], int, int, java.nio.ByteBuffer) throws javax.net.ssl.SSLException;
    Code:
       0: getstatic     #14                 // Field io/undertow/protocols/ssl/SNISSLEngine.OK_UNWRAP:Ljavax/net/ssl/SSLEngineResult;
       3: areturn

  public javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer, java.nio.ByteBuffer[], int, int) throws javax.net.ssl.SSLException;
    Code:
       0: aload_1
       1: invokevirtual #15                 // Method java/nio/ByteBuffer.position:()I
       4: istore        6
       6: aload_1
       7: invokevirtual #16                 // Method java/nio/ByteBuffer.remaining:()I
      10: iconst_5
      11: if_icmpge     34
      14: aload_0
      15: iconst_5
      16: putfield      #8                  // Field packetBufferSize:I
      19: getstatic     #17                 // Field io/undertow/protocols/ssl/SNISSLEngine.UNDERFLOW_UNWRAP:Ljavax/net/ssl/SSLEngineResult;
      22: astore        7
      24: aload_1
      25: iload         6
      27: invokevirtual #18                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/ByteBuffer;
      30: pop
      31: aload         7
      33: areturn
      34: aload_1
      35: invokestatic  #19                 // Method io/undertow/protocols/ssl/SNISSLExplorer.getRequiredSize:(Ljava/nio/ByteBuffer;)I
      38: istore        7
      40: aload_1
      41: invokevirtual #16                 // Method java/nio/ByteBuffer.remaining:()I
      44: iload         7
      46: if_icmpge     70
      49: aload_0
      50: iload         7
      52: putfield      #8                  // Field packetBufferSize:I
      55: getstatic     #17                 // Field io/undertow/protocols/ssl/SNISSLEngine.UNDERFLOW_UNWRAP:Ljavax/net/ssl/SSLEngineResult;
      58: astore        8
      60: aload_1
      61: iload         6
      63: invokevirtual #18                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/ByteBuffer;
      66: pop
      67: aload         8
      69: areturn
      70: aload_1
      71: invokestatic  #20                 // Method io/undertow/protocols/ssl/SNISSLExplorer.explore:(Ljava/nio/ByteBuffer;)Ljava/util/List;
      74: astore        8
      76: aload_0
      77: getfield      #12                 // Field selector:Lio/undertow/protocols/ssl/SNIContextMatcher;
      80: aload         8
      82: invokevirtual #21                 // Method io/undertow/protocols/ssl/SNIContextMatcher.getContext:(Ljava/util/List;)Ljavax/net/ssl/SSLContext;
      85: astore        9
      87: aload         9
      89: ifnonnull     101
      92: getstatic     #22                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      95: invokeinterface #23,  1           // InterfaceMethod io/undertow/UndertowMessages.noContextForSslConnection:()Ljavax/net/ssl/SSLException;
     100: athrow
     101: aload_0
     102: getfield      #13                 // Field engineFunction:Ljava/util/function/Function;
     105: aload         9
     107: invokeinterface #24,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
     112: checkcast     #25                 // class javax/net/ssl/SSLEngine
     115: astore        5
     117: aload_0
     118: getfield      #26                 // Field enabledSuites:[Ljava/lang/String;
     121: ifnull        133
     124: aload         5
     126: aload_0
     127: getfield      #26                 // Field enabledSuites:[Ljava/lang/String;
     130: invokevirtual #27                 // Method javax/net/ssl/SSLEngine.setEnabledCipherSuites:([Ljava/lang/String;)V
     133: aload_0
     134: getfield      #28                 // Field enabledProtocols:[Ljava/lang/String;
     137: ifnull        149
     140: aload         5
     142: aload_0
     143: getfield      #28                 // Field enabledProtocols:[Ljava/lang/String;
     146: invokevirtual #29                 // Method javax/net/ssl/SSLEngine.setEnabledProtocols:([Ljava/lang/String;)V
     149: aload         5
     151: iconst_0
     152: invokevirtual #30                 // Method javax/net/ssl/SSLEngine.setUseClientMode:(Z)V
     155: aload_0
     156: getfield      #6                  // Field flags:Ljava/util/concurrent/atomic/AtomicInteger;
     159: invokevirtual #31                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
     162: istore        10
     164: iload         10
     166: iconst_1
     167: iand
     168: ifeq          180
     171: aload         5
     173: iconst_1
     174: invokevirtual #32                 // Method javax/net/ssl/SSLEngine.setWantClientAuth:(Z)V
     177: goto          193
     180: iload         10
     182: iconst_2
     183: iand
     184: ifeq          193
     187: aload         5
     189: iconst_1
     190: invokevirtual #33                 // Method javax/net/ssl/SSLEngine.setNeedClientAuth:(Z)V
     193: iload         10
     195: iconst_4
     196: iand
     197: ifeq          206
     200: aload         5
     202: iconst_1
     203: invokevirtual #34                 // Method javax/net/ssl/SSLEngine.setEnableSessionCreation:(Z)V
     206: aload_0
     207: getfield      #2                  // Field this$0:Lio/undertow/protocols/ssl/SNISSLEngine;
     210: getfield      #35                 // Field io/undertow/protocols/ssl/SNISSLEngine.selectionCallback:Ljava/util/function/Function;
     213: aload         5
     215: invokeinterface #24,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
     220: checkcast     #25                 // class javax/net/ssl/SSLEngine
     223: astore        5
     225: aload_0
     226: getfield      #2                  // Field this$0:Lio/undertow/protocols/ssl/SNISSLEngine;
     229: getfield      #36                 // Field io/undertow/protocols/ssl/SNISSLEngine.currentRef:Ljava/util/concurrent/atomic/AtomicReference;
     232: aload         5
     234: invokevirtual #37                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
     237: aload_1
     238: iload         6
     240: invokevirtual #18                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/ByteBuffer;
     243: pop
     244: goto          259
     247: astore        11
     249: aload_1
     250: iload         6
     252: invokevirtual #18                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/ByteBuffer;
     255: pop
     256: aload         11
     258: athrow
     259: aload         5
     261: aload_1
     262: aload_2
     263: iload_3
     264: iload         4
     266: invokevirtual #38                 // Method javax/net/ssl/SSLEngine.unwrap:(Ljava/nio/ByteBuffer;[Ljava/nio/ByteBuffer;II)Ljavax/net/ssl/SSLEngineResult;
     269: areturn
    Exception table:
       from    to  target type
           6    24   247   any
          34    60   247   any
          70   237   247   any
         247   249   247   any

  public java.lang.Runnable getDelegatedTask();
    Code:
       0: aconst_null
       1: areturn

  public void closeInbound() throws javax.net.ssl.SSLException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field this$0:Lio/undertow/protocols/ssl/SNISSLEngine;
       4: getfield      #36                 // Field io/undertow/protocols/ssl/SNISSLEngine.currentRef:Ljava/util/concurrent/atomic/AtomicReference;
       7: getstatic     #39                 // Field io/undertow/protocols/ssl/SNISSLEngine.CLOSED_STATE:Ljavax/net/ssl/SSLEngine;
      10: invokevirtual #37                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
      13: return

  public boolean isInboundDone();
    Code:
       0: iconst_0
       1: ireturn

  public void closeOutbound();
    Code:
       0: aload_0
       1: getfield      #2                  // Field this$0:Lio/undertow/protocols/ssl/SNISSLEngine;
       4: getfield      #36                 // Field io/undertow/protocols/ssl/SNISSLEngine.currentRef:Ljava/util/concurrent/atomic/AtomicReference;
       7: getstatic     #39                 // Field io/undertow/protocols/ssl/SNISSLEngine.CLOSED_STATE:Ljavax/net/ssl/SSLEngine;
      10: invokevirtual #37                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
      13: return

  public boolean isOutboundDone();
    Code:
       0: iconst_0
       1: ireturn

  public java.lang.String[] getSupportedCipherSuites();
    Code:
       0: aload_0
       1: getfield      #26                 // Field enabledSuites:[Ljava/lang/String;
       4: ifnonnull     12
       7: iconst_0
       8: anewarray     #40                 // class java/lang/String
      11: areturn
      12: aload_0
      13: getfield      #26                 // Field enabledSuites:[Ljava/lang/String;
      16: areturn

  public java.lang.String[] getEnabledCipherSuites();
    Code:
       0: aload_0
       1: getfield      #26                 // Field enabledSuites:[Ljava/lang/String;
       4: areturn

  public void setEnabledCipherSuites(java.lang.String[]);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #26                 // Field enabledSuites:[Ljava/lang/String;
       5: return

  public java.lang.String[] getSupportedProtocols();
    Code:
       0: aload_0
       1: getfield      #28                 // Field enabledProtocols:[Ljava/lang/String;
       4: ifnonnull     12
       7: iconst_0
       8: anewarray     #40                 // class java/lang/String
      11: areturn
      12: aload_0
      13: getfield      #28                 // Field enabledProtocols:[Ljava/lang/String;
      16: areturn

  public java.lang.String[] getEnabledProtocols();
    Code:
       0: aload_0
       1: getfield      #28                 // Field enabledProtocols:[Ljava/lang/String;
       4: areturn

  public void setEnabledProtocols(java.lang.String[]);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #28                 // Field enabledProtocols:[Ljava/lang/String;
       5: return

  public javax.net.ssl.SSLSession getSession();
    Code:
       0: aconst_null
       1: areturn

  public void beginHandshake() throws javax.net.ssl.SSLException;
    Code:
       0: return

  public javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus();
    Code:
       0: getstatic     #41                 // Field javax/net/ssl/SSLEngineResult$HandshakeStatus.NEED_UNWRAP:Ljavax/net/ssl/SSLEngineResult$HandshakeStatus;
       3: areturn

  public void setUseClientMode(boolean);
    Code:
       0: iload_1
       1: ifeq          12
       4: new           #42                 // class java/lang/UnsupportedOperationException
       7: dup
       8: invokespecial #43                 // Method java/lang/UnsupportedOperationException."<init>":()V
      11: athrow
      12: return

  public boolean getUseClientMode();
    Code:
       0: iconst_0
       1: ireturn

  public void setNeedClientAuth(boolean);
    Code:
       0: aload_0
       1: getfield      #6                  // Field flags:Ljava/util/concurrent/atomic/AtomicInteger;
       4: astore_2
       5: aload_2
       6: invokevirtual #31                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
       9: istore_3
      10: iload_3
      11: iconst_2
      12: iand
      13: ifeq          20
      16: iconst_1
      17: goto          21
      20: iconst_0
      21: iload_1
      22: if_icmpne     26
      25: return
      26: iload_3
      27: iconst_4
      28: iand
      29: iconst_2
      30: ior
      31: istore        4
      33: aload_2
      34: iload_3
      35: iload         4
      37: invokevirtual #44                 // Method java/util/concurrent/atomic/AtomicInteger.compareAndSet:(II)Z
      40: ifeq          5
      43: return

  public boolean getNeedClientAuth();
    Code:
       0: aload_0
       1: getfield      #6                  // Field flags:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #31                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
       7: iconst_2
       8: iand
       9: ifeq          16
      12: iconst_1
      13: goto          17
      16: iconst_0
      17: ireturn

  public void setWantClientAuth(boolean);
    Code:
       0: aload_0
       1: getfield      #6                  // Field flags:Ljava/util/concurrent/atomic/AtomicInteger;
       4: astore_2
       5: aload_2
       6: invokevirtual #31                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
       9: istore_3
      10: iload_3
      11: iconst_1
      12: iand
      13: ifeq          20
      16: iconst_1
      17: goto          21
      20: iconst_0
      21: iload_1
      22: if_icmpne     26
      25: return
      26: iload_3
      27: iconst_4
      28: iand
      29: iconst_1
      30: ior
      31: istore        4
      33: aload_2
      34: iload_3
      35: iload         4
      37: invokevirtual #44                 // Method java/util/concurrent/atomic/AtomicInteger.compareAndSet:(II)Z
      40: ifeq          5
      43: return

  public boolean getWantClientAuth();
    Code:
       0: aload_0
       1: getfield      #6                  // Field flags:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #31                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
       7: iconst_1
       8: iand
       9: ifeq          16
      12: iconst_1
      13: goto          17
      16: iconst_0
      17: ireturn

  public void setEnableSessionCreation(boolean);
    Code:
       0: aload_0
       1: getfield      #6                  // Field flags:Ljava/util/concurrent/atomic/AtomicInteger;
       4: astore_2
       5: aload_2
       6: invokevirtual #31                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
       9: istore_3
      10: iload_3
      11: iconst_4
      12: iand
      13: ifeq          20
      16: iconst_1
      17: goto          21
      20: iconst_0
      21: iload_1
      22: if_icmpne     26
      25: return
      26: iload_3
      27: iconst_4
      28: ixor
      29: istore        4
      31: aload_2
      32: iload_3
      33: iload         4
      35: invokevirtual #44                 // Method java/util/concurrent/atomic/AtomicInteger.compareAndSet:(II)Z
      38: ifeq          5
      41: return

  public boolean getEnableSessionCreation();
    Code:
       0: aload_0
       1: getfield      #6                  // Field flags:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #31                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
       7: iconst_4
       8: iand
       9: ifeq          16
      12: iconst_1
      13: goto          17
      16: iconst_0
      17: ireturn
}
