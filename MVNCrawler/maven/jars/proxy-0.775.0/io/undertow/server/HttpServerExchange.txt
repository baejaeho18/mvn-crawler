Compiled from "HttpServerExchange.java"
public final class io.undertow.server.HttpServerExchange extends io.undertow.util.AbstractAttachable {
  private static final org.jboss.logging.Logger log;

  private static final java.lang.RuntimePermission SET_SECURITY_CONTEXT;

  private static final java.lang.String ISO_8859_1;

  private static final java.lang.String HTTPS;

  private static final io.undertow.util.AttachmentKey<java.lang.String> REASON_PHRASE;

  static final io.undertow.util.AttachmentKey<io.undertow.connector.PooledByteBuffer[]> BUFFERED_REQUEST_DATA;

  public static final io.undertow.util.AttachmentKey<java.util.Map<java.lang.String, java.lang.String>> REQUEST_ATTRIBUTES;

  public static final io.undertow.util.AttachmentKey<java.lang.String> REMOTE_USER;

  public static final io.undertow.util.AttachmentKey<java.lang.Boolean> SECURE_REQUEST;

  private final io.undertow.server.ServerConnection connection;

  private final io.undertow.util.HeaderMap requestHeaders;

  private final io.undertow.util.HeaderMap responseHeaders;

  private int exchangeCompletionListenersCount;

  private io.undertow.server.ExchangeCompletionListener[] exchangeCompleteListeners;

  private io.undertow.server.DefaultResponseListener[] defaultResponseListeners;

  private java.util.Map<java.lang.String, java.util.Deque<java.lang.String>> queryParameters;

  private java.util.Map<java.lang.String, java.util.Deque<java.lang.String>> pathParameters;

  private io.undertow.server.DelegatingIterable<io.undertow.server.handlers.Cookie> requestCookies;

  private io.undertow.server.DelegatingIterable<io.undertow.server.handlers.Cookie> responseCookies;

  private java.util.Map<java.lang.String, io.undertow.server.handlers.Cookie> deprecatedRequestCookies;

  private java.util.Map<java.lang.String, io.undertow.server.handlers.Cookie> deprecatedResponseCookies;

  private io.undertow.server.HttpServerExchange$WriteDispatchChannel responseChannel;

  protected io.undertow.server.HttpServerExchange$ReadDispatchChannel requestChannel;

  private io.undertow.server.BlockingHttpExchange blockingHttpExchange;

  private io.undertow.util.HttpString protocol;

  private io.undertow.security.api.SecurityContext securityContext;

  private int state;

  private io.undertow.util.HttpString requestMethod;

  private java.lang.String requestScheme;

  private java.lang.String requestURI;

  private java.lang.String requestPath;

  private java.lang.String relativePath;

  private java.lang.String resolvedPath;

  private java.lang.String queryString;

  private int requestWrapperCount;

  private io.undertow.server.ConduitWrapper<org.xnio.conduits.StreamSourceConduit>[] requestWrappers;

  private int responseWrapperCount;

  private io.undertow.server.ConduitWrapper<org.xnio.conduits.StreamSinkConduit>[] responseWrappers;

  private io.undertow.io.Sender sender;

  private io.undertow.io.Receiver receiver;

  private long requestStartTime;

  private long maxEntitySize;

  private java.lang.Runnable dispatchTask;

  private java.util.concurrent.Executor dispatchExecutor;

  private long responseBytesSent;

  private static final int MASK_RESPONSE_CODE;

  private static final int FLAG_RESPONSE_SENT;

  private static final int FLAG_RESPONSE_TERMINATED;

  private static final int FLAG_REQUEST_TERMINATED;

  private static final int FLAG_PERSISTENT;

  private static final int FLAG_DISPATCHED;

  private static final int FLAG_URI_CONTAINS_HOST;

  private static final int FLAG_IN_CALL;

  private static final int FLAG_SHOULD_RESUME_READS;

  private static final int FLAG_SHOULD_RESUME_WRITES;

  private static final int FLAG_REQUEST_RESET;

  private java.net.InetSocketAddress sourceAddress;

  private java.net.InetSocketAddress destinationAddress;

  private static final java.util.concurrent.atomic.AtomicLong REQUEST_ID_GENERATOR;

  private final java.lang.String requestId;

  public io.undertow.server.HttpServerExchange(io.undertow.server.ServerConnection, long);
    Code:
       0: aload_0
       1: aload_1
       2: new           #1                  // class io/undertow/util/HeaderMap
       5: dup
       6: invokespecial #2                  // Method io/undertow/util/HeaderMap."<init>":()V
       9: new           #1                  // class io/undertow/util/HeaderMap
      12: dup
      13: invokespecial #2                  // Method io/undertow/util/HeaderMap."<init>":()V
      16: lload_2
      17: invokespecial #3                  // Method "<init>":(Lio/undertow/server/ServerConnection;Lio/undertow/util/HeaderMap;Lio/undertow/util/HeaderMap;J)V
      20: return

  public io.undertow.server.HttpServerExchange(io.undertow.server.ServerConnection);
    Code:
       0: aload_0
       1: aload_1
       2: lconst_0
       3: invokespecial #4                  // Method "<init>":(Lio/undertow/server/ServerConnection;J)V
       6: return

  public io.undertow.server.HttpServerExchange(io.undertow.server.ServerConnection, io.undertow.util.HeaderMap, io.undertow.util.HeaderMap, long);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method io/undertow/util/AbstractAttachable."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #6                  // Field exchangeCompletionListenersCount:I
       9: aload_0
      10: sipush        200
      13: putfield      #7                  // Field state:I
      16: aload_0
      17: getstatic     #8                  // Field io/undertow/util/HttpString.EMPTY:Lio/undertow/util/HttpString;
      20: putfield      #9                  // Field requestMethod:Lio/undertow/util/HttpString;
      23: aload_0
      24: ldc           #10                 // String
      26: putfield      #11                 // Field resolvedPath:Ljava/lang/String;
      29: aload_0
      30: ldc           #10                 // String
      32: putfield      #12                 // Field queryString:Ljava/lang/String;
      35: aload_0
      36: iconst_0
      37: putfield      #13                 // Field requestWrapperCount:I
      40: aload_0
      41: iconst_0
      42: putfield      #14                 // Field responseWrapperCount:I
      45: aload_0
      46: ldc2_w        #15                 // long -1l
      49: putfield      #17                 // Field requestStartTime:J
      52: aload_0
      53: lconst_0
      54: putfield      #18                 // Field responseBytesSent:J
      57: aload_0
      58: getstatic     #19                 // Field REQUEST_ID_GENERATOR:Ljava/util/concurrent/atomic/AtomicLong;
      61: invokevirtual #20                 // Method java/util/concurrent/atomic/AtomicLong.incrementAndGet:()J
      64: invokestatic  #21                 // Method java/lang/Long.toString:(J)Ljava/lang/String;
      67: putfield      #22                 // Field requestId:Ljava/lang/String;
      70: aload_0
      71: aload_1
      72: putfield      #23                 // Field connection:Lio/undertow/server/ServerConnection;
      75: aload_0
      76: lload         4
      78: putfield      #24                 // Field maxEntitySize:J
      81: aload_0
      82: aload_2
      83: putfield      #25                 // Field requestHeaders:Lio/undertow/util/HeaderMap;
      86: aload_0
      87: aload_3
      88: putfield      #26                 // Field responseHeaders:Lio/undertow/util/HeaderMap;
      91: return

  public io.undertow.util.HttpString getProtocol();
    Code:
       0: aload_0
       1: getfield      #27                 // Field protocol:Lio/undertow/util/HttpString;
       4: areturn

  public io.undertow.server.HttpServerExchange setProtocol(io.undertow.util.HttpString);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #27                 // Field protocol:Lio/undertow/util/HttpString;
       5: aload_0
       6: areturn

  public boolean isHttp09();
    Code:
       0: aload_0
       1: getfield      #27                 // Field protocol:Lio/undertow/util/HttpString;
       4: getstatic     #28                 // Field io/undertow/util/Protocols.HTTP_0_9:Lio/undertow/util/HttpString;
       7: invokevirtual #29                 // Method io/undertow/util/HttpString.equals:(Lio/undertow/util/HttpString;)Z
      10: ireturn

  public boolean isHttp10();
    Code:
       0: aload_0
       1: getfield      #27                 // Field protocol:Lio/undertow/util/HttpString;
       4: getstatic     #30                 // Field io/undertow/util/Protocols.HTTP_1_0:Lio/undertow/util/HttpString;
       7: invokevirtual #29                 // Method io/undertow/util/HttpString.equals:(Lio/undertow/util/HttpString;)Z
      10: ireturn

  public boolean isHttp11();
    Code:
       0: aload_0
       1: getfield      #27                 // Field protocol:Lio/undertow/util/HttpString;
       4: getstatic     #31                 // Field io/undertow/util/Protocols.HTTP_1_1:Lio/undertow/util/HttpString;
       7: invokevirtual #29                 // Method io/undertow/util/HttpString.equals:(Lio/undertow/util/HttpString;)Z
      10: ireturn

  public boolean isSecure();
    Code:
       0: aload_0
       1: getstatic     #32                 // Field SECURE_REQUEST:Lio/undertow/util/AttachmentKey;
       4: invokevirtual #33                 // Method getAttachment:(Lio/undertow/util/AttachmentKey;)Ljava/lang/Object;
       7: checkcast     #34                 // class java/lang/Boolean
      10: astore_1
      11: aload_1
      12: ifnull        24
      15: aload_1
      16: invokevirtual #35                 // Method java/lang/Boolean.booleanValue:()Z
      19: ifeq          24
      22: iconst_1
      23: ireturn
      24: aload_0
      25: invokevirtual #36                 // Method getRequestScheme:()Ljava/lang/String;
      28: astore_2
      29: aload_2
      30: ifnull        44
      33: aload_2
      34: ldc           #38                 // String https
      36: invokevirtual #39                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      39: ifeq          44
      42: iconst_1
      43: ireturn
      44: iconst_0
      45: ireturn

  public io.undertow.util.HttpString getRequestMethod();
    Code:
       0: aload_0
       1: getfield      #9                  // Field requestMethod:Lio/undertow/util/HttpString;
       4: areturn

  public io.undertow.server.HttpServerExchange setRequestMethod(io.undertow.util.HttpString);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #9                  // Field requestMethod:Lio/undertow/util/HttpString;
       5: aload_0
       6: areturn

  public java.lang.String getRequestScheme();
    Code:
       0: aload_0
       1: getfield      #40                 // Field requestScheme:Ljava/lang/String;
       4: areturn

  public io.undertow.server.HttpServerExchange setRequestScheme(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #40                 // Field requestScheme:Ljava/lang/String;
       5: aload_0
       6: areturn

  public java.lang.String getRequestId();
    Code:
       0: aload_0
       1: getfield      #22                 // Field requestId:Ljava/lang/String;
       4: areturn

  public java.lang.String getRequestURI();
    Code:
       0: aload_0
       1: getfield      #41                 // Field requestURI:Ljava/lang/String;
       4: areturn

  public io.undertow.server.HttpServerExchange setRequestURI(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #41                 // Field requestURI:Ljava/lang/String;
       5: aload_0
       6: areturn

  public io.undertow.server.HttpServerExchange setRequestURI(java.lang.String, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #41                 // Field requestURI:Ljava/lang/String;
       5: iload_2
       6: ifeq          23
       9: aload_0
      10: dup
      11: getfield      #7                  // Field state:I
      14: ldc           #42                 // int 65536
      16: ior
      17: putfield      #7                  // Field state:I
      20: goto          34
      23: aload_0
      24: dup
      25: getfield      #7                  // Field state:I
      28: ldc           #43                 // int -65537
      30: iand
      31: putfield      #7                  // Field state:I
      34: aload_0
      35: areturn

  public boolean isHostIncludedInRequestURI();
    Code:
       0: aload_0
       1: getfield      #7                  // Field state:I
       4: ldc           #42                 // int 65536
       6: invokestatic  #44                 // Method org/xnio/Bits.anyAreSet:(II)Z
       9: ireturn

  public java.lang.String getRequestPath();
    Code:
       0: aload_0
       1: getfield      #45                 // Field requestPath:Ljava/lang/String;
       4: areturn

  public io.undertow.server.HttpServerExchange setRequestPath(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #45                 // Field requestPath:Ljava/lang/String;
       5: aload_0
       6: areturn

  public java.lang.String getRelativePath();
    Code:
       0: aload_0
       1: getfield      #46                 // Field relativePath:Ljava/lang/String;
       4: areturn

  public io.undertow.server.HttpServerExchange setRelativePath(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #46                 // Field relativePath:Ljava/lang/String;
       5: aload_0
       6: areturn

  public java.lang.String getResolvedPath();
    Code:
       0: aload_0
       1: getfield      #11                 // Field resolvedPath:Ljava/lang/String;
       4: areturn

  public io.undertow.server.HttpServerExchange setResolvedPath(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #11                 // Field resolvedPath:Ljava/lang/String;
       5: aload_0
       6: areturn

  public java.lang.String getQueryString();
    Code:
       0: aload_0
       1: getfield      #12                 // Field queryString:Ljava/lang/String;
       4: areturn

  public io.undertow.server.HttpServerExchange setQueryString(java.lang.String);
    Code:
       0: aload_1
       1: invokevirtual #47                 // Method java/lang/String.length:()I
       4: ifle          29
       7: aload_1
       8: iconst_0
       9: invokevirtual #48                 // Method java/lang/String.charAt:(I)C
      12: bipush        63
      14: if_icmpne     29
      17: aload_0
      18: aload_1
      19: iconst_1
      20: invokevirtual #49                 // Method java/lang/String.substring:(I)Ljava/lang/String;
      23: putfield      #12                 // Field queryString:Ljava/lang/String;
      26: goto          34
      29: aload_0
      30: aload_1
      31: putfield      #12                 // Field queryString:Ljava/lang/String;
      34: aload_0
      35: areturn

  public java.lang.String getRequestURL();
    Code:
       0: aload_0
       1: invokevirtual #50                 // Method isHostIncludedInRequestURI:()Z
       4: ifeq          12
       7: aload_0
       8: invokevirtual #51                 // Method getRequestURI:()Ljava/lang/String;
      11: areturn
      12: aload_0
      13: invokevirtual #36                 // Method getRequestScheme:()Ljava/lang/String;
      16: aload_0
      17: invokevirtual #52                 // Method getHostAndPort:()Ljava/lang/String;
      20: aload_0
      21: invokevirtual #51                 // Method getRequestURI:()Ljava/lang/String;
      24: invokedynamic #53,  0             // InvokeDynamic #0:makeConcatWithConstants:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      29: areturn

  public java.lang.String getRequestCharset();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #25                 // Field requestHeaders:Lio/undertow/util/HeaderMap;
       5: invokevirtual #54                 // Method extractCharset:(Lio/undertow/util/HeaderMap;)Ljava/lang/String;
       8: areturn

  public java.lang.String getResponseCharset();
    Code:
       0: aload_0
       1: getfield      #26                 // Field responseHeaders:Lio/undertow/util/HeaderMap;
       4: astore_1
       5: aload_0
       6: aload_1
       7: invokevirtual #54                 // Method extractCharset:(Lio/undertow/util/HeaderMap;)Ljava/lang/String;
      10: areturn

  private java.lang.String extractCharset(io.undertow.util.HeaderMap);
    Code:
       0: aload_1
       1: getstatic     #55                 // Field io/undertow/util/Headers.CONTENT_TYPE:Lio/undertow/util/HttpString;
       4: invokevirtual #56                 // Method io/undertow/util/HeaderMap.getFirst:(Lio/undertow/util/HttpString;)Ljava/lang/String;
       7: astore_2
       8: aload_2
       9: ifnull        25
      12: aload_2
      13: ldc           #57                 // String charset
      15: invokestatic  #58                 // Method io/undertow/util/Headers.extractQuotedValueFromHeader:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      18: astore_3
      19: aload_3
      20: ifnull        25
      23: aload_3
      24: areturn
      25: ldc           #59                 // String ISO-8859-1
      27: areturn

  public java.lang.String getHostName();
    Code:
       0: aload_0
       1: getfield      #25                 // Field requestHeaders:Lio/undertow/util/HeaderMap;
       4: getstatic     #60                 // Field io/undertow/util/Headers.HOST:Lio/undertow/util/HttpString;
       7: invokevirtual #56                 // Method io/undertow/util/HeaderMap.getFirst:(Lio/undertow/util/HttpString;)Ljava/lang/String;
      10: astore_1
      11: aload_1
      12: ifnull        27
      15: ldc           #10                 // String
      17: aload_1
      18: invokevirtual #61                 // Method java/lang/String.trim:()Ljava/lang/String;
      21: invokevirtual #62                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      24: ifeq          38
      27: aload_0
      28: invokevirtual #63                 // Method getDestinationAddress:()Ljava/net/InetSocketAddress;
      31: invokevirtual #64                 // Method java/net/InetSocketAddress.getHostString:()Ljava/lang/String;
      34: astore_1
      35: goto          84
      38: aload_1
      39: ldc           #65                 // String [
      41: invokevirtual #66                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      44: ifeq          62
      47: aload_1
      48: iconst_1
      49: aload_1
      50: bipush        93
      52: invokevirtual #67                 // Method java/lang/String.indexOf:(I)I
      55: invokevirtual #68                 // Method java/lang/String.substring:(II)Ljava/lang/String;
      58: astore_1
      59: goto          84
      62: aload_1
      63: bipush        58
      65: invokevirtual #67                 // Method java/lang/String.indexOf:(I)I
      68: iconst_m1
      69: if_icmpeq     84
      72: aload_1
      73: iconst_0
      74: aload_1
      75: bipush        58
      77: invokevirtual #67                 // Method java/lang/String.indexOf:(I)I
      80: invokevirtual #68                 // Method java/lang/String.substring:(II)Ljava/lang/String;
      83: astore_1
      84: aload_1
      85: areturn

  public java.lang.String getHostAndPort();
    Code:
       0: aload_0
       1: getfield      #25                 // Field requestHeaders:Lio/undertow/util/HeaderMap;
       4: getstatic     #60                 // Field io/undertow/util/Headers.HOST:Lio/undertow/util/HttpString;
       7: invokevirtual #56                 // Method io/undertow/util/HeaderMap.getFirst:(Lio/undertow/util/HttpString;)Ljava/lang/String;
      10: astore_1
      11: aload_1
      12: ifnull        27
      15: ldc           #10                 // String
      17: aload_1
      18: invokevirtual #61                 // Method java/lang/String.trim:()Ljava/lang/String;
      21: invokevirtual #62                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      24: ifeq          90
      27: aload_0
      28: invokevirtual #63                 // Method getDestinationAddress:()Ljava/net/InetSocketAddress;
      31: astore_2
      32: aload_2
      33: invokevirtual #64                 // Method java/net/InetSocketAddress.getHostString:()Ljava/lang/String;
      36: invokestatic  #69                 // Method io/undertow/util/NetworkUtils.formatPossibleIpv6Address:(Ljava/lang/String;)Ljava/lang/String;
      39: astore_1
      40: aload_2
      41: invokevirtual #70                 // Method java/net/InetSocketAddress.getPort:()I
      44: istore_3
      45: aload_0
      46: invokevirtual #36                 // Method getRequestScheme:()Ljava/lang/String;
      49: ldc           #71                 // String http
      51: invokevirtual #62                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      54: ifeq          63
      57: iload_3
      58: bipush        80
      60: if_icmpeq     90
      63: aload_0
      64: invokevirtual #36                 // Method getRequestScheme:()Ljava/lang/String;
      67: ldc           #38                 // String https
      69: invokevirtual #62                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      72: ifeq          82
      75: iload_3
      76: sipush        443
      79: if_icmpeq     90
      82: aload_1
      83: iload_3
      84: invokedynamic #72,  0             // InvokeDynamic #1:makeConcatWithConstants:(Ljava/lang/String;I)Ljava/lang/String;
      89: astore_1
      90: aload_1
      91: areturn

  public int getHostPort();
    Code:
       0: aload_0
       1: getfield      #25                 // Field requestHeaders:Lio/undertow/util/HeaderMap;
       4: getstatic     #60                 // Field io/undertow/util/Headers.HOST:Lio/undertow/util/HttpString;
       7: invokevirtual #56                 // Method io/undertow/util/HeaderMap.getFirst:(Lio/undertow/util/HttpString;)Ljava/lang/String;
      10: astore_1
      11: aload_1
      12: ifnull        95
      15: aload_1
      16: ldc           #65                 // String [
      18: invokevirtual #66                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      21: ifeq          40
      24: aload_1
      25: bipush        58
      27: aload_1
      28: bipush        93
      30: invokevirtual #67                 // Method java/lang/String.indexOf:(I)I
      33: invokevirtual #73                 // Method java/lang/String.indexOf:(II)I
      36: istore_2
      37: goto          47
      40: aload_1
      41: bipush        58
      43: invokevirtual #67                 // Method java/lang/String.indexOf:(I)I
      46: istore_2
      47: iload_2
      48: iconst_m1
      49: if_icmpeq     64
      52: aload_1
      53: iload_2
      54: iconst_1
      55: iadd
      56: invokevirtual #49                 // Method java/lang/String.substring:(I)Ljava/lang/String;
      59: invokestatic  #74                 // Method java/lang/Integer.parseInt:(Ljava/lang/String;)I
      62: ireturn
      63: astore_3
      64: aload_0
      65: invokevirtual #36                 // Method getRequestScheme:()Ljava/lang/String;
      68: ldc           #38                 // String https
      70: invokevirtual #62                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      73: ifeq          80
      76: sipush        443
      79: ireturn
      80: aload_0
      81: invokevirtual #36                 // Method getRequestScheme:()Ljava/lang/String;
      84: ldc           #71                 // String http
      86: invokevirtual #62                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      89: ifeq          95
      92: bipush        80
      94: ireturn
      95: aload_0
      96: invokevirtual #63                 // Method getDestinationAddress:()Ljava/net/InetSocketAddress;
      99: invokevirtual #70                 // Method java/net/InetSocketAddress.getPort:()I
     102: ireturn
    Exception table:
       from    to  target type
          52    62    63   Class java/lang/NumberFormatException

  public io.undertow.server.ServerConnection getConnection();
    Code:
       0: aload_0
       1: getfield      #23                 // Field connection:Lio/undertow/server/ServerConnection;
       4: areturn

  public boolean isPersistent();
    Code:
       0: aload_0
       1: getfield      #7                  // Field state:I
       4: sipush        16384
       7: invokestatic  #44                 // Method org/xnio/Bits.anyAreSet:(II)Z
      10: ireturn

  public boolean isInIoThread();
    Code:
       0: aload_0
       1: invokevirtual #76                 // Method getIoThread:()Lorg/xnio/XnioIoThread;
       4: invokestatic  #77                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
       7: if_acmpne     14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  public boolean isUpgrade();
    Code:
       0: aload_0
       1: invokevirtual #78                 // Method getStatusCode:()I
       4: bipush        101
       6: if_icmpne     13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn

  public long getResponseBytesSent();
    Code:
       0: aload_0
       1: invokestatic  #80                 // Method io/undertow/server/Connectors.isEntityBodyAllowed:(Lio/undertow/server/HttpServerExchange;)Z
       4: ifeq          25
       7: aload_0
       8: invokevirtual #81                 // Method getRequestMethod:()Lio/undertow/util/HttpString;
      11: getstatic     #82                 // Field io/undertow/util/Methods.HEAD:Lio/undertow/util/HttpString;
      14: invokevirtual #29                 // Method io/undertow/util/HttpString.equals:(Lio/undertow/util/HttpString;)Z
      17: ifne          25
      20: aload_0
      21: getfield      #18                 // Field responseBytesSent:J
      24: lreturn
      25: lconst_0
      26: lreturn

  void updateBytesSent(long);
    Code:
       0: aload_0
       1: invokestatic  #80                 // Method io/undertow/server/Connectors.isEntityBodyAllowed:(Lio/undertow/server/HttpServerExchange;)Z
       4: ifeq          30
       7: aload_0
       8: invokevirtual #81                 // Method getRequestMethod:()Lio/undertow/util/HttpString;
      11: getstatic     #82                 // Field io/undertow/util/Methods.HEAD:Lio/undertow/util/HttpString;
      14: invokevirtual #29                 // Method io/undertow/util/HttpString.equals:(Lio/undertow/util/HttpString;)Z
      17: ifne          30
      20: aload_0
      21: dup
      22: getfield      #18                 // Field responseBytesSent:J
      25: lload_1
      26: ladd
      27: putfield      #18                 // Field responseBytesSent:J
      30: return

  public io.undertow.server.HttpServerExchange setPersistent(boolean);
    Code:
       0: iload_1
       1: ifeq          19
       4: aload_0
       5: aload_0
       6: getfield      #7                  // Field state:I
       9: sipush        16384
      12: ior
      13: putfield      #7                  // Field state:I
      16: goto          31
      19: aload_0
      20: aload_0
      21: getfield      #7                  // Field state:I
      24: sipush        -16385
      27: iand
      28: putfield      #7                  // Field state:I
      31: aload_0
      32: areturn

  public boolean isDispatched();
    Code:
       0: aload_0
       1: getfield      #7                  // Field state:I
       4: ldc           #83                 // int 32768
       6: invokestatic  #44                 // Method org/xnio/Bits.anyAreSet:(II)Z
       9: ireturn

  public io.undertow.server.HttpServerExchange unDispatch();
    Code:
       0: aload_0
       1: dup
       2: getfield      #7                  // Field state:I
       5: ldc           #84                 // int -32769
       7: iand
       8: putfield      #7                  // Field state:I
      11: aload_0
      12: aconst_null
      13: putfield      #85                 // Field dispatchTask:Ljava/lang/Runnable;
      16: aload_0
      17: areturn

  public io.undertow.server.HttpServerExchange dispatch();
    Code:
       0: aload_0
       1: dup
       2: getfield      #7                  // Field state:I
       5: ldc           #83                 // int 32768
       7: ior
       8: putfield      #7                  // Field state:I
      11: aload_0
      12: areturn

  public io.undertow.server.HttpServerExchange dispatch(java.lang.Runnable);
    Code:
       0: aload_0
       1: aconst_null
       2: aload_1
       3: invokevirtual #86                 // Method dispatch:(Ljava/util/concurrent/Executor;Ljava/lang/Runnable;)Lio/undertow/server/HttpServerExchange;
       6: pop
       7: aload_0
       8: areturn

  public io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor, java.lang.Runnable);
    Code:
       0: aload_0
       1: invokevirtual #87                 // Method isInCall:()Z
       4: ifeq          56
       7: aload_1
       8: ifnull        16
      11: aload_0
      12: aload_1
      13: putfield      #88                 // Field dispatchExecutor:Ljava/util/concurrent/Executor;
      16: aload_0
      17: dup
      18: getfield      #7                  // Field state:I
      21: ldc           #83                 // int 32768
      23: ior
      24: putfield      #7                  // Field state:I
      27: aload_0
      28: getfield      #7                  // Field state:I
      31: ldc           #89                 // int 786432
      33: invokestatic  #44                 // Method org/xnio/Bits.anyAreSet:(II)Z
      36: ifeq          48
      39: getstatic     #90                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      42: invokeinterface #91,  1           // InterfaceMethod io/undertow/UndertowMessages.resumedAndDispatched:()Ljava/lang/IllegalStateException;
      47: athrow
      48: aload_0
      49: aload_2
      50: putfield      #85                 // Field dispatchTask:Ljava/lang/Runnable;
      53: goto          81
      56: aload_1
      57: ifnonnull     74
      60: aload_0
      61: invokevirtual #92                 // Method getConnection:()Lio/undertow/server/ServerConnection;
      64: invokevirtual #93                 // Method io/undertow/server/ServerConnection.getWorker:()Lorg/xnio/XnioWorker;
      67: aload_2
      68: invokevirtual #94                 // Method org/xnio/XnioWorker.execute:(Ljava/lang/Runnable;)V
      71: goto          81
      74: aload_1
      75: aload_2
      76: invokeinterface #95,  2           // InterfaceMethod java/util/concurrent/Executor.execute:(Ljava/lang/Runnable;)V
      81: aload_0
      82: areturn

  public io.undertow.server.HttpServerExchange dispatch(io.undertow.server.HttpHandler);
    Code:
       0: aload_0
       1: aconst_null
       2: aload_1
       3: invokevirtual #96                 // Method dispatch:(Ljava/util/concurrent/Executor;Lio/undertow/server/HttpHandler;)Lio/undertow/server/HttpServerExchange;
       6: pop
       7: aload_0
       8: areturn

  public io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor, io.undertow.server.HttpHandler);
    Code:
       0: new           #97                 // class io/undertow/server/HttpServerExchange$1
       3: dup
       4: aload_0
       5: aload_2
       6: invokespecial #98                 // Method io/undertow/server/HttpServerExchange$1."<init>":(Lio/undertow/server/HttpServerExchange;Lio/undertow/server/HttpHandler;)V
       9: astore_3
      10: aload_0
      11: aload_1
      12: aload_3
      13: invokevirtual #86                 // Method dispatch:(Ljava/util/concurrent/Executor;Ljava/lang/Runnable;)Lio/undertow/server/HttpServerExchange;
      16: pop
      17: aload_0
      18: areturn

  public io.undertow.server.HttpServerExchange setDispatchExecutor(java.util.concurrent.Executor);
    Code:
       0: aload_1
       1: ifnonnull     12
       4: aload_0
       5: aconst_null
       6: putfield      #88                 // Field dispatchExecutor:Ljava/util/concurrent/Executor;
       9: goto          17
      12: aload_0
      13: aload_1
      14: putfield      #88                 // Field dispatchExecutor:Ljava/util/concurrent/Executor;
      17: aload_0
      18: areturn

  public java.util.concurrent.Executor getDispatchExecutor();
    Code:
       0: aload_0
       1: getfield      #88                 // Field dispatchExecutor:Ljava/util/concurrent/Executor;
       4: areturn

  java.lang.Runnable getDispatchTask();
    Code:
       0: aload_0
       1: getfield      #85                 // Field dispatchTask:Ljava/lang/Runnable;
       4: areturn

  boolean isInCall();
    Code:
       0: aload_0
       1: getfield      #7                  // Field state:I
       4: ldc           #99                 // int 131072
       6: invokestatic  #44                 // Method org/xnio/Bits.anyAreSet:(II)Z
       9: ireturn

  io.undertow.server.HttpServerExchange setInCall(boolean);
    Code:
       0: iload_1
       1: ifeq          18
       4: aload_0
       5: dup
       6: getfield      #7                  // Field state:I
       9: ldc           #99                 // int 131072
      11: ior
      12: putfield      #7                  // Field state:I
      15: goto          29
      18: aload_0
      19: dup
      20: getfield      #7                  // Field state:I
      23: ldc           #100                // int -131073
      25: iand
      26: putfield      #7                  // Field state:I
      29: aload_0
      30: areturn

  public io.undertow.server.HttpServerExchange upgradeChannel(io.undertow.server.HttpUpgradeListener);
    Code:
       0: aload_0
       1: getfield      #23                 // Field connection:Lio/undertow/server/ServerConnection;
       4: invokevirtual #101                // Method io/undertow/server/ServerConnection.isUpgradeSupported:()Z
       7: ifne          19
      10: getstatic     #90                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      13: invokeinterface #102,  1          // InterfaceMethod io/undertow/UndertowMessages.upgradeNotSupported:()Ljava/lang/IllegalStateException;
      18: athrow
      19: aload_0
      20: invokevirtual #103                // Method getRequestHeaders:()Lio/undertow/util/HeaderMap;
      23: getstatic     #104                // Field io/undertow/util/Headers.UPGRADE:Lio/undertow/util/HttpString;
      26: invokevirtual #105                // Method io/undertow/util/HeaderMap.contains:(Lio/undertow/util/HttpString;)Z
      29: ifne          41
      32: getstatic     #90                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      35: invokeinterface #106,  1          // InterfaceMethod io/undertow/UndertowMessages.notAnUpgradeRequest:()Ljava/lang/IllegalStateException;
      40: athrow
      41: getstatic     #107                // Field io/undertow/UndertowLogger.REQUEST_LOGGER:Lio/undertow/UndertowLogger;
      44: ldc           #108                // String Upgrading request %s
      46: aload_0
      47: invokeinterface #109,  3          // InterfaceMethod io/undertow/UndertowLogger.debugf:(Ljava/lang/String;Ljava/lang/Object;)V
      52: aload_0
      53: getfield      #23                 // Field connection:Lio/undertow/server/ServerConnection;
      56: aload_1
      57: invokevirtual #110                // Method io/undertow/server/ServerConnection.setUpgradeListener:(Lio/undertow/server/HttpUpgradeListener;)V
      60: aload_0
      61: bipush        101
      63: invokevirtual #111                // Method setStatusCode:(I)Lio/undertow/server/HttpServerExchange;
      66: pop
      67: aload_0
      68: invokevirtual #112                // Method getResponseHeaders:()Lio/undertow/util/HeaderMap;
      71: getstatic     #113                // Field io/undertow/util/Headers.CONNECTION:Lio/undertow/util/HttpString;
      74: ldc           #115                // String Upgrade
      76: invokevirtual #116                // Method io/undertow/util/HeaderMap.put:(Lio/undertow/util/HttpString;Ljava/lang/String;)Lio/undertow/util/HeaderMap;
      79: pop
      80: aload_0
      81: areturn

  public io.undertow.server.HttpServerExchange upgradeChannel(java.lang.String, io.undertow.server.HttpUpgradeListener);
    Code:
       0: aload_0
       1: getfield      #23                 // Field connection:Lio/undertow/server/ServerConnection;
       4: invokevirtual #101                // Method io/undertow/server/ServerConnection.isUpgradeSupported:()Z
       7: ifne          19
      10: getstatic     #90                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      13: invokeinterface #102,  1          // InterfaceMethod io/undertow/UndertowMessages.upgradeNotSupported:()Ljava/lang/IllegalStateException;
      18: athrow
      19: getstatic     #107                // Field io/undertow/UndertowLogger.REQUEST_LOGGER:Lio/undertow/UndertowLogger;
      22: ldc           #108                // String Upgrading request %s
      24: aload_0
      25: invokeinterface #109,  3          // InterfaceMethod io/undertow/UndertowLogger.debugf:(Ljava/lang/String;Ljava/lang/Object;)V
      30: aload_0
      31: getfield      #23                 // Field connection:Lio/undertow/server/ServerConnection;
      34: aload_2
      35: invokevirtual #110                // Method io/undertow/server/ServerConnection.setUpgradeListener:(Lio/undertow/server/HttpUpgradeListener;)V
      38: aload_0
      39: bipush        101
      41: invokevirtual #111                // Method setStatusCode:(I)Lio/undertow/server/HttpServerExchange;
      44: pop
      45: aload_0
      46: invokevirtual #112                // Method getResponseHeaders:()Lio/undertow/util/HeaderMap;
      49: astore_3
      50: aload_3
      51: getstatic     #104                // Field io/undertow/util/Headers.UPGRADE:Lio/undertow/util/HttpString;
      54: aload_1
      55: invokevirtual #116                // Method io/undertow/util/HeaderMap.put:(Lio/undertow/util/HttpString;Ljava/lang/String;)Lio/undertow/util/HeaderMap;
      58: pop
      59: aload_3
      60: getstatic     #113                // Field io/undertow/util/Headers.CONNECTION:Lio/undertow/util/HttpString;
      63: ldc           #115                // String Upgrade
      65: invokevirtual #116                // Method io/undertow/util/HeaderMap.put:(Lio/undertow/util/HttpString;Ljava/lang/String;)Lio/undertow/util/HeaderMap;
      68: pop
      69: aload_0
      70: areturn

  public io.undertow.server.HttpServerExchange acceptConnectRequest(io.undertow.server.HttpUpgradeListener);
    Code:
       0: aload_0
       1: invokevirtual #81                 // Method getRequestMethod:()Lio/undertow/util/HttpString;
       4: getstatic     #117                // Field io/undertow/util/Methods.CONNECT:Lio/undertow/util/HttpString;
       7: invokevirtual #29                 // Method io/undertow/util/HttpString.equals:(Lio/undertow/util/HttpString;)Z
      10: ifne          22
      13: getstatic     #90                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      16: invokeinterface #118,  1          // InterfaceMethod io/undertow/UndertowMessages.notAConnectRequest:()Ljava/lang/IllegalStateException;
      21: athrow
      22: aload_0
      23: getfield      #23                 // Field connection:Lio/undertow/server/ServerConnection;
      26: aload_1
      27: invokevirtual #119                // Method io/undertow/server/ServerConnection.setConnectListener:(Lio/undertow/server/HttpUpgradeListener;)V
      30: aload_0
      31: areturn

  public io.undertow.server.HttpServerExchange addExchangeCompleteListener(io.undertow.server.ExchangeCompletionListener);
    Code:
       0: aload_0
       1: invokevirtual #120                // Method isComplete:()Z
       4: ifne          15
       7: aload_0
       8: getfield      #6                  // Field exchangeCompletionListenersCount:I
      11: iconst_m1
      12: if_icmpne     24
      15: getstatic     #90                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      18: invokeinterface #121,  1          // InterfaceMethod io/undertow/UndertowMessages.exchangeAlreadyComplete:()Ljava/lang/IllegalStateException;
      23: athrow
      24: aload_0
      25: dup
      26: getfield      #6                  // Field exchangeCompletionListenersCount:I
      29: dup_x1
      30: iconst_1
      31: iadd
      32: putfield      #6                  // Field exchangeCompletionListenersCount:I
      35: istore_2
      36: aload_0
      37: getfield      #122                // Field exchangeCompleteListeners:[Lio/undertow/server/ExchangeCompletionListener;
      40: astore_3
      41: aload_3
      42: ifnull        51
      45: aload_3
      46: arraylength
      47: iload_2
      48: if_icmpne     80
      51: aload_3
      52: astore        4
      54: aload_0
      55: iload_2
      56: iconst_2
      57: iadd
      58: anewarray     #123                // class io/undertow/server/ExchangeCompletionListener
      61: dup
      62: astore_3
      63: putfield      #122                // Field exchangeCompleteListeners:[Lio/undertow/server/ExchangeCompletionListener;
      66: aload         4
      68: ifnull        80
      71: aload         4
      73: iconst_0
      74: aload_3
      75: iconst_0
      76: iload_2
      77: invokestatic  #124                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      80: aload_3
      81: iload_2
      82: aload_1
      83: aastore
      84: aload_0
      85: areturn

  public io.undertow.server.HttpServerExchange addDefaultResponseListener(io.undertow.server.DefaultResponseListener);
    Code:
       0: iconst_0
       1: istore_2
       2: aload_0
       3: getfield      #125                // Field defaultResponseListeners:[Lio/undertow/server/DefaultResponseListener;
       6: ifnonnull     20
       9: aload_0
      10: iconst_2
      11: anewarray     #126                // class io/undertow/server/DefaultResponseListener
      14: putfield      #125                // Field defaultResponseListeners:[Lio/undertow/server/DefaultResponseListener;
      17: goto          84
      20: iload_2
      21: aload_0
      22: getfield      #125                // Field defaultResponseListeners:[Lio/undertow/server/DefaultResponseListener;
      25: arraylength
      26: if_icmpeq     44
      29: aload_0
      30: getfield      #125                // Field defaultResponseListeners:[Lio/undertow/server/DefaultResponseListener;
      33: iload_2
      34: aaload
      35: ifnull        44
      38: iinc          2, 1
      41: goto          20
      44: iload_2
      45: aload_0
      46: getfield      #125                // Field defaultResponseListeners:[Lio/undertow/server/DefaultResponseListener;
      49: arraylength
      50: if_icmpne     84
      53: aload_0
      54: getfield      #125                // Field defaultResponseListeners:[Lio/undertow/server/DefaultResponseListener;
      57: astore_3
      58: aload_0
      59: aload_0
      60: getfield      #125                // Field defaultResponseListeners:[Lio/undertow/server/DefaultResponseListener;
      63: arraylength
      64: iconst_2
      65: iadd
      66: anewarray     #126                // class io/undertow/server/DefaultResponseListener
      69: putfield      #125                // Field defaultResponseListeners:[Lio/undertow/server/DefaultResponseListener;
      72: aload_3
      73: iconst_0
      74: aload_0
      75: getfield      #125                // Field defaultResponseListeners:[Lio/undertow/server/DefaultResponseListener;
      78: iconst_0
      79: aload_3
      80: arraylength
      81: invokestatic  #124                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      84: aload_0
      85: getfield      #125                // Field defaultResponseListeners:[Lio/undertow/server/DefaultResponseListener;
      88: iload_2
      89: aload_1
      90: aastore
      91: aload_0
      92: areturn

  public java.net.InetSocketAddress getSourceAddress();
    Code:
       0: aload_0
       1: getfield      #127                // Field sourceAddress:Ljava/net/InetSocketAddress;
       4: ifnull        12
       7: aload_0
       8: getfield      #127                // Field sourceAddress:Ljava/net/InetSocketAddress;
      11: areturn
      12: aload_0
      13: getfield      #23                 // Field connection:Lio/undertow/server/ServerConnection;
      16: ldc           #128                // class java/net/InetSocketAddress
      18: invokevirtual #129                // Method io/undertow/server/ServerConnection.getPeerAddress:(Ljava/lang/Class;)Ljava/net/SocketAddress;
      21: checkcast     #128                // class java/net/InetSocketAddress
      24: areturn

  public io.undertow.server.HttpServerExchange setSourceAddress(java.net.InetSocketAddress);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #127                // Field sourceAddress:Ljava/net/InetSocketAddress;
       5: aload_0
       6: areturn

  public java.net.InetSocketAddress getDestinationAddress();
    Code:
       0: aload_0
       1: getfield      #130                // Field destinationAddress:Ljava/net/InetSocketAddress;
       4: ifnull        12
       7: aload_0
       8: getfield      #130                // Field destinationAddress:Ljava/net/InetSocketAddress;
      11: areturn
      12: aload_0
      13: getfield      #23                 // Field connection:Lio/undertow/server/ServerConnection;
      16: ldc           #128                // class java/net/InetSocketAddress
      18: invokevirtual #131                // Method io/undertow/server/ServerConnection.getLocalAddress:(Ljava/lang/Class;)Ljava/net/SocketAddress;
      21: checkcast     #128                // class java/net/InetSocketAddress
      24: areturn

  public io.undertow.server.HttpServerExchange setDestinationAddress(java.net.InetSocketAddress);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #130                // Field destinationAddress:Ljava/net/InetSocketAddress;
       5: aload_0
       6: areturn

  public io.undertow.util.HeaderMap getRequestHeaders();
    Code:
       0: aload_0
       1: getfield      #25                 // Field requestHeaders:Lio/undertow/util/HeaderMap;
       4: areturn

  public long getRequestContentLength();
    Code:
       0: aload_0
       1: getfield      #25                 // Field requestHeaders:Lio/undertow/util/HeaderMap;
       4: getstatic     #132                // Field io/undertow/util/Headers.CONTENT_LENGTH:Lio/undertow/util/HttpString;
       7: invokevirtual #56                 // Method io/undertow/util/HeaderMap.getFirst:(Lio/undertow/util/HttpString;)Ljava/lang/String;
      10: astore_1
      11: aload_1
      12: ifnonnull     19
      15: ldc2_w        #15                 // long -1l
      18: lreturn
      19: aload_1
      20: invokestatic  #133                // Method java/lang/Long.parseLong:(Ljava/lang/String;)J
      23: lreturn

  public io.undertow.util.HeaderMap getResponseHeaders();
    Code:
       0: aload_0
       1: getfield      #26                 // Field responseHeaders:Lio/undertow/util/HeaderMap;
       4: areturn

  public long getResponseContentLength();
    Code:
       0: aload_0
       1: getfield      #26                 // Field responseHeaders:Lio/undertow/util/HeaderMap;
       4: getstatic     #132                // Field io/undertow/util/Headers.CONTENT_LENGTH:Lio/undertow/util/HttpString;
       7: invokevirtual #56                 // Method io/undertow/util/HeaderMap.getFirst:(Lio/undertow/util/HttpString;)Ljava/lang/String;
      10: astore_1
      11: aload_1
      12: ifnonnull     19
      15: ldc2_w        #15                 // long -1l
      18: lreturn
      19: aload_1
      20: invokestatic  #133                // Method java/lang/Long.parseLong:(Ljava/lang/String;)J
      23: lreturn

  public io.undertow.server.HttpServerExchange setResponseContentLength(long);
    Code:
       0: lload_1
       1: ldc2_w        #15                 // long -1l
       4: lcmp
       5: ifne          22
       8: aload_0
       9: getfield      #26                 // Field responseHeaders:Lio/undertow/util/HeaderMap;
      12: getstatic     #132                // Field io/undertow/util/Headers.CONTENT_LENGTH:Lio/undertow/util/HttpString;
      15: invokevirtual #134                // Method io/undertow/util/HeaderMap.remove:(Lio/undertow/util/HttpString;)Ljava/util/Collection;
      18: pop
      19: goto          37
      22: aload_0
      23: getfield      #26                 // Field responseHeaders:Lio/undertow/util/HeaderMap;
      26: getstatic     #132                // Field io/undertow/util/Headers.CONTENT_LENGTH:Lio/undertow/util/HttpString;
      29: lload_1
      30: invokestatic  #21                 // Method java/lang/Long.toString:(J)Ljava/lang/String;
      33: invokevirtual #116                // Method io/undertow/util/HeaderMap.put:(Lio/undertow/util/HttpString;Ljava/lang/String;)Lio/undertow/util/HeaderMap;
      36: pop
      37: aload_0
      38: areturn

  public java.util.Map<java.lang.String, java.util.Deque<java.lang.String>> getQueryParameters();
    Code:
       0: aload_0
       1: getfield      #135                // Field queryParameters:Ljava/util/Map;
       4: ifnonnull     18
       7: aload_0
       8: new           #136                // class java/util/TreeMap
      11: dup
      12: invokespecial #137                // Method java/util/TreeMap."<init>":()V
      15: putfield      #135                // Field queryParameters:Ljava/util/Map;
      18: aload_0
      19: getfield      #135                // Field queryParameters:Ljava/util/Map;
      22: areturn

  public io.undertow.server.HttpServerExchange addQueryParam(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #135                // Field queryParameters:Ljava/util/Map;
       4: ifnonnull     18
       7: aload_0
       8: new           #136                // class java/util/TreeMap
      11: dup
      12: invokespecial #137                // Method java/util/TreeMap."<init>":()V
      15: putfield      #135                // Field queryParameters:Ljava/util/Map;
      18: aload_0
      19: getfield      #135                // Field queryParameters:Ljava/util/Map;
      22: aload_1
      23: invokeinterface #138,  2          // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      28: checkcast     #139                // class java/util/Deque
      31: astore_3
      32: aload_3
      33: ifnonnull     57
      36: aload_0
      37: getfield      #135                // Field queryParameters:Ljava/util/Map;
      40: aload_1
      41: new           #140                // class java/util/ArrayDeque
      44: dup
      45: iconst_2
      46: invokespecial #141                // Method java/util/ArrayDeque."<init>":(I)V
      49: dup
      50: astore_3
      51: invokeinterface #142,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      56: pop
      57: aload_3
      58: aload_2
      59: invokeinterface #143,  2          // InterfaceMethod java/util/Deque.add:(Ljava/lang/Object;)Z
      64: pop
      65: aload_0
      66: areturn

  public java.util.Map<java.lang.String, java.util.Deque<java.lang.String>> getPathParameters();
    Code:
       0: aload_0
       1: getfield      #144                // Field pathParameters:Ljava/util/Map;
       4: ifnonnull     18
       7: aload_0
       8: new           #136                // class java/util/TreeMap
      11: dup
      12: invokespecial #137                // Method java/util/TreeMap."<init>":()V
      15: putfield      #144                // Field pathParameters:Ljava/util/Map;
      18: aload_0
      19: getfield      #144                // Field pathParameters:Ljava/util/Map;
      22: areturn

  public io.undertow.server.HttpServerExchange addPathParam(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #144                // Field pathParameters:Ljava/util/Map;
       4: ifnonnull     18
       7: aload_0
       8: new           #136                // class java/util/TreeMap
      11: dup
      12: invokespecial #137                // Method java/util/TreeMap."<init>":()V
      15: putfield      #144                // Field pathParameters:Ljava/util/Map;
      18: aload_0
      19: getfield      #144                // Field pathParameters:Ljava/util/Map;
      22: aload_1
      23: invokeinterface #138,  2          // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      28: checkcast     #139                // class java/util/Deque
      31: astore_3
      32: aload_3
      33: ifnonnull     57
      36: aload_0
      37: getfield      #144                // Field pathParameters:Ljava/util/Map;
      40: aload_1
      41: new           #140                // class java/util/ArrayDeque
      44: dup
      45: iconst_2
      46: invokespecial #141                // Method java/util/ArrayDeque."<init>":(I)V
      49: dup
      50: astore_3
      51: invokeinterface #142,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      56: pop
      57: aload_3
      58: aload_2
      59: invokeinterface #143,  2          // InterfaceMethod java/util/Deque.add:(Ljava/lang/Object;)Z
      64: pop
      65: aload_0
      66: areturn

  public java.util.Map<java.lang.String, io.undertow.server.handlers.Cookie> getRequestCookies();
    Code:
       0: aload_0
       1: getfield      #145                // Field deprecatedRequestCookies:Ljava/util/Map;
       4: ifnonnull     31
       7: aload_0
       8: new           #146                // class io/undertow/server/MapDelegatingToSet
      11: dup
      12: aload_0
      13: invokevirtual #147                // Method requestCookies:()Ljava/lang/Iterable;
      16: checkcast     #148                // class io/undertow/server/DelegatingIterable
      19: invokevirtual #149                // Method io/undertow/server/DelegatingIterable.getDelegate:()Ljava/lang/Iterable;
      22: checkcast     #150                // class java/util/Set
      25: invokespecial #151                // Method io/undertow/server/MapDelegatingToSet."<init>":(Ljava/util/Set;)V
      28: putfield      #145                // Field deprecatedRequestCookies:Ljava/util/Map;
      31: aload_0
      32: getfield      #145                // Field deprecatedRequestCookies:Ljava/util/Map;
      35: areturn

  public io.undertow.server.HttpServerExchange setRequestCookie(io.undertow.server.handlers.Cookie);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aload_0
       5: areturn
       6: aload_0
       7: invokevirtual #92                 // Method getConnection:()Lio/undertow/server/ServerConnection;
      10: invokevirtual #152                // Method io/undertow/server/ServerConnection.getUndertowOptions:()Lorg/xnio/OptionMap;
      13: getstatic     #153                // Field io/undertow/UndertowOptions.ENABLE_RFC6265_COOKIE_VALIDATION:Lorg/xnio/Option;
      16: iconst_0
      17: invokevirtual #155                // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;Z)Z
      20: ifeq          113
      23: aload_1
      24: invokeinterface #156,  1          // InterfaceMethod io/undertow/server/handlers/Cookie.getValue:()Ljava/lang/String;
      29: ifnull        53
      32: aload_1
      33: invokeinterface #156,  1          // InterfaceMethod io/undertow/server/handlers/Cookie.getValue:()Ljava/lang/String;
      38: invokevirtual #157                // Method java/lang/String.isEmpty:()Z
      41: ifne          53
      44: aload_1
      45: invokeinterface #156,  1          // InterfaceMethod io/undertow/server/handlers/Cookie.getValue:()Ljava/lang/String;
      50: invokestatic  #158                // Method io/undertow/util/Rfc6265CookieSupport.validateCookieValue:(Ljava/lang/String;)V
      53: aload_1
      54: invokeinterface #159,  1          // InterfaceMethod io/undertow/server/handlers/Cookie.getPath:()Ljava/lang/String;
      59: ifnull        83
      62: aload_1
      63: invokeinterface #159,  1          // InterfaceMethod io/undertow/server/handlers/Cookie.getPath:()Ljava/lang/String;
      68: invokevirtual #157                // Method java/lang/String.isEmpty:()Z
      71: ifne          83
      74: aload_1
      75: invokeinterface #159,  1          // InterfaceMethod io/undertow/server/handlers/Cookie.getPath:()Ljava/lang/String;
      80: invokestatic  #160                // Method io/undertow/util/Rfc6265CookieSupport.validatePath:(Ljava/lang/String;)V
      83: aload_1
      84: invokeinterface #161,  1          // InterfaceMethod io/undertow/server/handlers/Cookie.getDomain:()Ljava/lang/String;
      89: ifnull        113
      92: aload_1
      93: invokeinterface #161,  1          // InterfaceMethod io/undertow/server/handlers/Cookie.getDomain:()Ljava/lang/String;
      98: invokevirtual #157                // Method java/lang/String.isEmpty:()Z
     101: ifne          113
     104: aload_1
     105: invokeinterface #161,  1          // InterfaceMethod io/undertow/server/handlers/Cookie.getDomain:()Ljava/lang/String;
     110: invokestatic  #162                // Method io/undertow/util/Rfc6265CookieSupport.validateDomain:(Ljava/lang/String;)V
     113: aload_0
     114: invokevirtual #147                // Method requestCookies:()Ljava/lang/Iterable;
     117: checkcast     #148                // class io/undertow/server/DelegatingIterable
     120: invokevirtual #149                // Method io/undertow/server/DelegatingIterable.getDelegate:()Ljava/lang/Iterable;
     123: checkcast     #150                // class java/util/Set
     126: aload_1
     127: invokeinterface #163,  2          // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
     132: pop
     133: aload_0
     134: areturn

  public io.undertow.server.handlers.Cookie getRequestCookie(java.lang.String);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: areturn
       6: aload_0
       7: invokevirtual #147                // Method requestCookies:()Ljava/lang/Iterable;
      10: invokeinterface #164,  1          // InterfaceMethod java/lang/Iterable.iterator:()Ljava/util/Iterator;
      15: astore_2
      16: aload_2
      17: invokeinterface #165,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      22: ifeq          53
      25: aload_2
      26: invokeinterface #166,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      31: checkcast     #167                // class io/undertow/server/handlers/Cookie
      34: astore_3
      35: aload_1
      36: aload_3
      37: invokeinterface #168,  1          // InterfaceMethod io/undertow/server/handlers/Cookie.getName:()Ljava/lang/String;
      42: invokevirtual #62                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      45: ifeq          50
      48: aload_3
      49: areturn
      50: goto          16
      53: aconst_null
      54: areturn

  public java.lang.Iterable<io.undertow.server.handlers.Cookie> requestCookies();
    Code:
       0: aload_0
       1: getfield      #169                // Field requestCookies:Lio/undertow/server/DelegatingIterable;
       4: ifnonnull     71
       7: new           #170                // class io/undertow/server/OverridableTreeSet
      10: dup
      11: invokespecial #171                // Method io/undertow/server/OverridableTreeSet."<init>":()V
      14: astore_1
      15: aload_0
      16: new           #148                // class io/undertow/server/DelegatingIterable
      19: dup
      20: aload_1
      21: invokespecial #172                // Method io/undertow/server/DelegatingIterable."<init>":(Ljava/lang/Iterable;)V
      24: putfield      #169                // Field requestCookies:Lio/undertow/server/DelegatingIterable;
      27: aload_0
      28: invokevirtual #92                 // Method getConnection:()Lio/undertow/server/ServerConnection;
      31: invokevirtual #152                // Method io/undertow/server/ServerConnection.getUndertowOptions:()Lorg/xnio/OptionMap;
      34: getstatic     #173                // Field io/undertow/UndertowOptions.MAX_COOKIES:Lorg/xnio/Option;
      37: sipush        200
      40: invokevirtual #174                // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;I)I
      43: aload_0
      44: invokevirtual #92                 // Method getConnection:()Lio/undertow/server/ServerConnection;
      47: invokevirtual #152                // Method io/undertow/server/ServerConnection.getUndertowOptions:()Lorg/xnio/OptionMap;
      50: getstatic     #175                // Field io/undertow/UndertowOptions.ALLOW_EQUALS_IN_COOKIE_VALUE:Lorg/xnio/Option;
      53: iconst_0
      54: invokevirtual #155                // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;Z)Z
      57: aload_0
      58: getfield      #25                 // Field requestHeaders:Lio/undertow/util/HeaderMap;
      61: getstatic     #176                // Field io/undertow/util/Headers.COOKIE:Lio/undertow/util/HttpString;
      64: invokevirtual #177                // Method io/undertow/util/HeaderMap.get:(Lio/undertow/util/HttpString;)Lio/undertow/util/HeaderValues;
      67: aload_1
      68: invokestatic  #178                // Method io/undertow/util/Cookies.parseRequestCookies:(IZLjava/util/List;Ljava/util/Set;)V
      71: aload_0
      72: getfield      #169                // Field requestCookies:Lio/undertow/server/DelegatingIterable;
      75: areturn

  public io.undertow.server.HttpServerExchange setResponseCookie(io.undertow.server.handlers.Cookie);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aload_0
       5: areturn
       6: aload_0
       7: invokevirtual #92                 // Method getConnection:()Lio/undertow/server/ServerConnection;
      10: invokevirtual #152                // Method io/undertow/server/ServerConnection.getUndertowOptions:()Lorg/xnio/OptionMap;
      13: getstatic     #153                // Field io/undertow/UndertowOptions.ENABLE_RFC6265_COOKIE_VALIDATION:Lorg/xnio/Option;
      16: iconst_0
      17: invokevirtual #155                // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;Z)Z
      20: ifeq          113
      23: aload_1
      24: invokeinterface #156,  1          // InterfaceMethod io/undertow/server/handlers/Cookie.getValue:()Ljava/lang/String;
      29: ifnull        53
      32: aload_1
      33: invokeinterface #156,  1          // InterfaceMethod io/undertow/server/handlers/Cookie.getValue:()Ljava/lang/String;
      38: invokevirtual #157                // Method java/lang/String.isEmpty:()Z
      41: ifne          53
      44: aload_1
      45: invokeinterface #156,  1          // InterfaceMethod io/undertow/server/handlers/Cookie.getValue:()Ljava/lang/String;
      50: invokestatic  #158                // Method io/undertow/util/Rfc6265CookieSupport.validateCookieValue:(Ljava/lang/String;)V
      53: aload_1
      54: invokeinterface #159,  1          // InterfaceMethod io/undertow/server/handlers/Cookie.getPath:()Ljava/lang/String;
      59: ifnull        83
      62: aload_1
      63: invokeinterface #159,  1          // InterfaceMethod io/undertow/server/handlers/Cookie.getPath:()Ljava/lang/String;
      68: invokevirtual #157                // Method java/lang/String.isEmpty:()Z
      71: ifne          83
      74: aload_1
      75: invokeinterface #159,  1          // InterfaceMethod io/undertow/server/handlers/Cookie.getPath:()Ljava/lang/String;
      80: invokestatic  #160                // Method io/undertow/util/Rfc6265CookieSupport.validatePath:(Ljava/lang/String;)V
      83: aload_1
      84: invokeinterface #161,  1          // InterfaceMethod io/undertow/server/handlers/Cookie.getDomain:()Ljava/lang/String;
      89: ifnull        113
      92: aload_1
      93: invokeinterface #161,  1          // InterfaceMethod io/undertow/server/handlers/Cookie.getDomain:()Ljava/lang/String;
      98: invokevirtual #157                // Method java/lang/String.isEmpty:()Z
     101: ifne          113
     104: aload_1
     105: invokeinterface #161,  1          // InterfaceMethod io/undertow/server/handlers/Cookie.getDomain:()Ljava/lang/String;
     110: invokestatic  #162                // Method io/undertow/util/Rfc6265CookieSupport.validateDomain:(Ljava/lang/String;)V
     113: aload_0
     114: invokevirtual #179                // Method responseCookies:()Ljava/lang/Iterable;
     117: checkcast     #148                // class io/undertow/server/DelegatingIterable
     120: invokevirtual #149                // Method io/undertow/server/DelegatingIterable.getDelegate:()Ljava/lang/Iterable;
     123: checkcast     #150                // class java/util/Set
     126: aload_1
     127: invokeinterface #163,  2          // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
     132: pop
     133: aload_0
     134: areturn

  public java.util.Map<java.lang.String, io.undertow.server.handlers.Cookie> getResponseCookies();
    Code:
       0: aload_0
       1: getfield      #180                // Field deprecatedResponseCookies:Ljava/util/Map;
       4: ifnonnull     31
       7: aload_0
       8: new           #146                // class io/undertow/server/MapDelegatingToSet
      11: dup
      12: aload_0
      13: invokevirtual #179                // Method responseCookies:()Ljava/lang/Iterable;
      16: checkcast     #148                // class io/undertow/server/DelegatingIterable
      19: invokevirtual #149                // Method io/undertow/server/DelegatingIterable.getDelegate:()Ljava/lang/Iterable;
      22: checkcast     #150                // class java/util/Set
      25: invokespecial #151                // Method io/undertow/server/MapDelegatingToSet."<init>":(Ljava/util/Set;)V
      28: putfield      #180                // Field deprecatedResponseCookies:Ljava/util/Map;
      31: aload_0
      32: getfield      #180                // Field deprecatedResponseCookies:Ljava/util/Map;
      35: areturn

  public java.lang.Iterable<io.undertow.server.handlers.Cookie> responseCookies();
    Code:
       0: aload_0
       1: getfield      #181                // Field responseCookies:Lio/undertow/server/DelegatingIterable;
       4: ifnonnull     25
       7: aload_0
       8: new           #148                // class io/undertow/server/DelegatingIterable
      11: dup
      12: new           #170                // class io/undertow/server/OverridableTreeSet
      15: dup
      16: invokespecial #171                // Method io/undertow/server/OverridableTreeSet."<init>":()V
      19: invokespecial #172                // Method io/undertow/server/DelegatingIterable."<init>":(Ljava/lang/Iterable;)V
      22: putfield      #181                // Field responseCookies:Lio/undertow/server/DelegatingIterable;
      25: aload_0
      26: getfield      #181                // Field responseCookies:Lio/undertow/server/DelegatingIterable;
      29: areturn

  public boolean isResponseStarted();
    Code:
       0: aload_0
       1: getfield      #7                  // Field state:I
       4: sipush        1024
       7: invokestatic  #182                // Method org/xnio/Bits.allAreSet:(II)Z
      10: ireturn

  public org.xnio.channels.StreamSourceChannel getRequestChannel();
    Code:
       0: aload_0
       1: getfield      #183                // Field requestChannel:Lio/undertow/server/HttpServerExchange$ReadDispatchChannel;
       4: ifnull        37
       7: aload_0
       8: getfield      #7                  // Field state:I
      11: ldc           #184                // int 1048576
      13: invokestatic  #44                 // Method org/xnio/Bits.anyAreSet:(II)Z
      16: ifeq          35
      19: aload_0
      20: dup
      21: getfield      #7                  // Field state:I
      24: ldc           #185                // int -1048577
      26: iand
      27: putfield      #7                  // Field state:I
      30: aload_0
      31: getfield      #183                // Field requestChannel:Lio/undertow/server/HttpServerExchange$ReadDispatchChannel;
      34: areturn
      35: aconst_null
      36: areturn
      37: aload_0
      38: getfield      #7                  // Field state:I
      41: sipush        4096
      44: invokestatic  #44                 // Method org/xnio/Bits.anyAreSet:(II)Z
      47: ifeq          85
      50: aload_0
      51: new           #186                // class io/undertow/server/HttpServerExchange$ReadDispatchChannel
      54: dup
      55: aload_0
      56: new           #187                // class org/xnio/conduits/ConduitStreamSourceChannel
      59: dup
      60: getstatic     #188                // Field org/xnio/channels/Configurable.EMPTY:Lorg/xnio/channels/Configurable;
      63: new           #189                // class io/undertow/conduits/EmptyStreamSourceConduit
      66: dup
      67: aload_0
      68: invokevirtual #76                 // Method getIoThread:()Lorg/xnio/XnioIoThread;
      71: invokespecial #190                // Method io/undertow/conduits/EmptyStreamSourceConduit."<init>":(Lorg/xnio/XnioIoThread;)V
      74: invokespecial #191                // Method org/xnio/conduits/ConduitStreamSourceChannel."<init>":(Lorg/xnio/channels/Configurable;Lorg/xnio/conduits/StreamSourceConduit;)V
      77: invokespecial #192                // Method io/undertow/server/HttpServerExchange$ReadDispatchChannel."<init>":(Lio/undertow/server/HttpServerExchange;Lorg/xnio/conduits/ConduitStreamSourceChannel;)V
      80: dup_x1
      81: putfield      #183                // Field requestChannel:Lio/undertow/server/HttpServerExchange$ReadDispatchChannel;
      84: areturn
      85: aload_0
      86: getfield      #193                // Field requestWrappers:[Lio/undertow/server/ConduitWrapper;
      89: astore_1
      90: aload_0
      91: getfield      #23                 // Field connection:Lio/undertow/server/ServerConnection;
      94: invokevirtual #194                // Method io/undertow/server/ServerConnection.getSourceChannel:()Lorg/xnio/conduits/ConduitStreamSourceChannel;
      97: astore_2
      98: aload_1
      99: ifnull        136
     102: aload_0
     103: aconst_null
     104: putfield      #193                // Field requestWrappers:[Lio/undertow/server/ConduitWrapper;
     107: new           #195                // class io/undertow/server/HttpServerExchange$WrapperConduitFactory
     110: dup
     111: aload_1
     112: aload_0
     113: getfield      #13                 // Field requestWrapperCount:I
     116: aload_2
     117: invokevirtual #196                // Method org/xnio/conduits/ConduitStreamSourceChannel.getConduit:()Lorg/xnio/conduits/StreamSourceConduit;
     120: aload_0
     121: invokespecial #197                // Method io/undertow/server/HttpServerExchange$WrapperConduitFactory."<init>":([Lio/undertow/server/ConduitWrapper;ILorg/xnio/conduits/Conduit;Lio/undertow/server/HttpServerExchange;)V
     124: astore_3
     125: aload_2
     126: aload_3
     127: invokevirtual #198                // Method io/undertow/server/HttpServerExchange$WrapperConduitFactory.create:()Lorg/xnio/conduits/Conduit;
     130: checkcast     #199                // class org/xnio/conduits/StreamSourceConduit
     133: invokevirtual #200                // Method org/xnio/conduits/ConduitStreamSourceChannel.setConduit:(Lorg/xnio/conduits/StreamSourceConduit;)V
     136: aload_0
     137: new           #186                // class io/undertow/server/HttpServerExchange$ReadDispatchChannel
     140: dup
     141: aload_0
     142: aload_2
     143: invokespecial #192                // Method io/undertow/server/HttpServerExchange$ReadDispatchChannel."<init>":(Lio/undertow/server/HttpServerExchange;Lorg/xnio/conduits/ConduitStreamSourceChannel;)V
     146: dup_x1
     147: putfield      #183                // Field requestChannel:Lio/undertow/server/HttpServerExchange$ReadDispatchChannel;
     150: areturn

  void resetRequestChannel();
    Code:
       0: aload_0
       1: dup
       2: getfield      #7                  // Field state:I
       5: ldc           #184                // int 1048576
       7: ior
       8: putfield      #7                  // Field state:I
      11: return

  public boolean isRequestChannelAvailable();
    Code:
       0: aload_0
       1: getfield      #183                // Field requestChannel:Lio/undertow/server/HttpServerExchange$ReadDispatchChannel;
       4: ifnull        19
       7: aload_0
       8: getfield      #7                  // Field state:I
      11: ldc           #184                // int 1048576
      13: invokestatic  #44                 // Method org/xnio/Bits.anyAreSet:(II)Z
      16: ifeq          23
      19: iconst_1
      20: goto          24
      23: iconst_0
      24: ireturn

  public boolean isComplete();
    Code:
       0: aload_0
       1: getfield      #7                  // Field state:I
       4: sipush        6144
       7: invokestatic  #182                // Method org/xnio/Bits.allAreSet:(II)Z
      10: ireturn

  public boolean isRequestComplete();
    Code:
       0: aload_0
       1: getstatic     #201                // Field BUFFERED_REQUEST_DATA:Lio/undertow/util/AttachmentKey;
       4: invokevirtual #33                 // Method getAttachment:(Lio/undertow/util/AttachmentKey;)Ljava/lang/Object;
       7: checkcast     #202                // class "[Lio/undertow/connector/PooledByteBuffer;"
      10: astore_1
      11: aload_1
      12: ifnull        17
      15: iconst_0
      16: ireturn
      17: aload_0
      18: getfield      #7                  // Field state:I
      21: sipush        4096
      24: invokestatic  #182                // Method org/xnio/Bits.allAreSet:(II)Z
      27: ireturn

  public boolean isResponseComplete();
    Code:
       0: aload_0
       1: getfield      #7                  // Field state:I
       4: sipush        2048
       7: invokestatic  #182                // Method org/xnio/Bits.allAreSet:(II)Z
      10: ireturn

  void terminateRequest();
    Code:
       0: aload_0
       1: getfield      #7                  // Field state:I
       4: istore_1
       5: iload_1
       6: sipush        4096
       9: invokestatic  #182                // Method org/xnio/Bits.allAreSet:(II)Z
      12: ifeq          16
      15: return
      16: aload_0
      17: getfield      #183                // Field requestChannel:Lio/undertow/server/HttpServerExchange$ReadDispatchChannel;
      20: ifnull        30
      23: aload_0
      24: getfield      #183                // Field requestChannel:Lio/undertow/server/HttpServerExchange$ReadDispatchChannel;
      27: invokevirtual #203                // Method io/undertow/server/HttpServerExchange$ReadDispatchChannel.requestDone:()V
      30: aload_0
      31: iload_1
      32: sipush        4096
      35: ior
      36: putfield      #7                  // Field state:I
      39: iload_1
      40: sipush        2048
      43: invokestatic  #44                 // Method org/xnio/Bits.anyAreSet:(II)Z
      46: ifeq          53
      49: aload_0
      50: invokevirtual #204                // Method invokeExchangeCompleteListeners:()V
      53: return

  private void invokeExchangeCompleteListeners();
    Code:
       0: aload_0
       1: getfield      #6                  // Field exchangeCompletionListenersCount:I
       4: ifle          49
       7: aload_0
       8: getfield      #6                  // Field exchangeCompletionListenersCount:I
      11: iconst_1
      12: isub
      13: istore_1
      14: aload_0
      15: getfield      #122                // Field exchangeCompleteListeners:[Lio/undertow/server/ExchangeCompletionListener;
      18: iload_1
      19: aaload
      20: astore_2
      21: aload_0
      22: iconst_m1
      23: putfield      #6                  // Field exchangeCompletionListenersCount:I
      26: aload_2
      27: aload_0
      28: new           #205                // class io/undertow/server/HttpServerExchange$ExchangeCompleteNextListener
      31: dup
      32: aload_0
      33: getfield      #122                // Field exchangeCompleteListeners:[Lio/undertow/server/ExchangeCompletionListener;
      36: aload_0
      37: iload_1
      38: invokespecial #206                // Method io/undertow/server/HttpServerExchange$ExchangeCompleteNextListener."<init>":([Lio/undertow/server/ExchangeCompletionListener;Lio/undertow/server/HttpServerExchange;I)V
      41: invokeinterface #207,  3          // InterfaceMethod io/undertow/server/ExchangeCompletionListener.exchangeEvent:(Lio/undertow/server/HttpServerExchange;Lio/undertow/server/ExchangeCompletionListener$NextListener;)V
      46: goto          69
      49: aload_0
      50: getfield      #6                  // Field exchangeCompletionListenersCount:I
      53: ifne          69
      56: aload_0
      57: iconst_m1
      58: putfield      #6                  // Field exchangeCompletionListenersCount:I
      61: aload_0
      62: getfield      #23                 // Field connection:Lio/undertow/server/ServerConnection;
      65: aload_0
      66: invokevirtual #208                // Method io/undertow/server/ServerConnection.exchangeComplete:(Lio/undertow/server/HttpServerExchange;)V
      69: return

  public org.xnio.channels.StreamSinkChannel getResponseChannel();
    Code:
       0: aload_0
       1: getfield      #209                // Field responseChannel:Lio/undertow/server/HttpServerExchange$WriteDispatchChannel;
       4: ifnull        9
       7: aconst_null
       8: areturn
       9: aload_0
      10: getfield      #210                // Field responseWrappers:[Lio/undertow/server/ConduitWrapper;
      13: astore_1
      14: aload_0
      15: aconst_null
      16: putfield      #210                // Field responseWrappers:[Lio/undertow/server/ConduitWrapper;
      19: aload_0
      20: getfield      #23                 // Field connection:Lio/undertow/server/ServerConnection;
      23: invokevirtual #211                // Method io/undertow/server/ServerConnection.getSinkChannel:()Lorg/xnio/conduits/ConduitStreamSinkChannel;
      26: astore_2
      27: aload_2
      28: ifnonnull     33
      31: aconst_null
      32: areturn
      33: aload_1
      34: ifnull        66
      37: new           #212                // class io/undertow/server/HttpServerExchange$WrapperStreamSinkConduitFactory
      40: dup
      41: aload_1
      42: aload_0
      43: getfield      #14                 // Field responseWrapperCount:I
      46: aload_0
      47: aload_2
      48: invokevirtual #213                // Method org/xnio/conduits/ConduitStreamSinkChannel.getConduit:()Lorg/xnio/conduits/StreamSinkConduit;
      51: invokespecial #214                // Method io/undertow/server/HttpServerExchange$WrapperStreamSinkConduitFactory."<init>":([Lio/undertow/server/ConduitWrapper;ILio/undertow/server/HttpServerExchange;Lorg/xnio/conduits/StreamSinkConduit;)V
      54: astore_3
      55: aload_2
      56: aload_3
      57: invokevirtual #215                // Method io/undertow/server/HttpServerExchange$WrapperStreamSinkConduitFactory.create:()Lorg/xnio/conduits/StreamSinkConduit;
      60: invokevirtual #216                // Method org/xnio/conduits/ConduitStreamSinkChannel.setConduit:(Lorg/xnio/conduits/StreamSinkConduit;)V
      63: goto          82
      66: aload_2
      67: aload_0
      68: getfield      #23                 // Field connection:Lio/undertow/server/ServerConnection;
      71: aload_0
      72: aload_2
      73: invokevirtual #213                // Method org/xnio/conduits/ConduitStreamSinkChannel.getConduit:()Lorg/xnio/conduits/StreamSinkConduit;
      76: invokevirtual #217                // Method io/undertow/server/ServerConnection.getSinkConduit:(Lio/undertow/server/HttpServerExchange;Lorg/xnio/conduits/StreamSinkConduit;)Lorg/xnio/conduits/StreamSinkConduit;
      79: invokevirtual #216                // Method org/xnio/conduits/ConduitStreamSinkChannel.setConduit:(Lorg/xnio/conduits/StreamSinkConduit;)V
      82: aload_0
      83: new           #218                // class io/undertow/server/HttpServerExchange$WriteDispatchChannel
      86: dup
      87: aload_0
      88: aload_2
      89: invokespecial #219                // Method io/undertow/server/HttpServerExchange$WriteDispatchChannel."<init>":(Lio/undertow/server/HttpServerExchange;Lorg/xnio/conduits/ConduitStreamSinkChannel;)V
      92: putfield      #209                // Field responseChannel:Lio/undertow/server/HttpServerExchange$WriteDispatchChannel;
      95: aload_0
      96: invokevirtual #220                // Method startResponse:()Lio/undertow/server/HttpServerExchange;
      99: pop
     100: aload_0
     101: getfield      #209                // Field responseChannel:Lio/undertow/server/HttpServerExchange$WriteDispatchChannel;
     104: areturn

  public io.undertow.io.Sender getResponseSender();
    Code:
       0: aload_0
       1: getfield      #221                // Field blockingHttpExchange:Lio/undertow/server/BlockingHttpExchange;
       4: ifnull        17
       7: aload_0
       8: getfield      #221                // Field blockingHttpExchange:Lio/undertow/server/BlockingHttpExchange;
      11: invokeinterface #222,  1          // InterfaceMethod io/undertow/server/BlockingHttpExchange.getSender:()Lio/undertow/io/Sender;
      16: areturn
      17: aload_0
      18: getfield      #223                // Field sender:Lio/undertow/io/Sender;
      21: ifnull        29
      24: aload_0
      25: getfield      #223                // Field sender:Lio/undertow/io/Sender;
      28: areturn
      29: aload_0
      30: new           #224                // class io/undertow/io/AsyncSenderImpl
      33: dup
      34: aload_0
      35: invokespecial #225                // Method io/undertow/io/AsyncSenderImpl."<init>":(Lio/undertow/server/HttpServerExchange;)V
      38: dup_x1
      39: putfield      #223                // Field sender:Lio/undertow/io/Sender;
      42: areturn

  public io.undertow.io.Receiver getRequestReceiver();
    Code:
       0: aload_0
       1: getfield      #221                // Field blockingHttpExchange:Lio/undertow/server/BlockingHttpExchange;
       4: ifnull        17
       7: aload_0
       8: getfield      #221                // Field blockingHttpExchange:Lio/undertow/server/BlockingHttpExchange;
      11: invokeinterface #226,  1          // InterfaceMethod io/undertow/server/BlockingHttpExchange.getReceiver:()Lio/undertow/io/Receiver;
      16: areturn
      17: aload_0
      18: getfield      #227                // Field receiver:Lio/undertow/io/Receiver;
      21: ifnull        29
      24: aload_0
      25: getfield      #227                // Field receiver:Lio/undertow/io/Receiver;
      28: areturn
      29: aload_0
      30: new           #228                // class io/undertow/io/AsyncReceiverImpl
      33: dup
      34: aload_0
      35: invokespecial #229                // Method io/undertow/io/AsyncReceiverImpl."<init>":(Lio/undertow/server/HttpServerExchange;)V
      38: dup_x1
      39: putfield      #227                // Field receiver:Lio/undertow/io/Receiver;
      42: areturn

  public boolean isResponseChannelAvailable();
    Code:
       0: aload_0
       1: getfield      #209                // Field responseChannel:Lio/undertow/server/HttpServerExchange$WriteDispatchChannel;
       4: ifnonnull     11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public int getResponseCode();
    Code:
       0: aload_0
       1: getfield      #7                  // Field state:I
       4: getstatic     #230                // Field MASK_RESPONSE_CODE:I
       7: iand
       8: ireturn

  public io.undertow.server.HttpServerExchange setResponseCode(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #111                // Method setStatusCode:(I)Lio/undertow/server/HttpServerExchange;
       5: areturn

  public int getStatusCode();
    Code:
       0: aload_0
       1: getfield      #7                  // Field state:I
       4: getstatic     #230                // Field MASK_RESPONSE_CODE:I
       7: iand
       8: ireturn

  public io.undertow.server.HttpServerExchange setStatusCode(int);
    Code:
       0: iload_1
       1: iflt          11
       4: iload_1
       5: sipush        999
       8: if_icmple     21
      11: new           #231                // class java/lang/IllegalArgumentException
      14: dup
      15: ldc           #232                // String Invalid response code
      17: invokespecial #233                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      20: athrow
      21: aload_0
      22: getfield      #7                  // Field state:I
      25: istore_2
      26: iload_2
      27: sipush        1024
      30: invokestatic  #182                // Method org/xnio/Bits.allAreSet:(II)Z
      33: ifeq          45
      36: getstatic     #90                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      39: invokeinterface #234,  1          // InterfaceMethod io/undertow/UndertowMessages.responseAlreadyStarted:()Ljava/lang/IllegalStateException;
      44: athrow
      45: iload_1
      46: sipush        500
      49: if_icmplt     82
      52: getstatic     #235                // Field io/undertow/UndertowLogger.ERROR_RESPONSE:Lio/undertow/UndertowLogger;
      55: invokeinterface #236,  1          // InterfaceMethod io/undertow/UndertowLogger.isDebugEnabled:()Z
      60: ifeq          82
      63: getstatic     #235                // Field io/undertow/UndertowLogger.ERROR_RESPONSE:Lio/undertow/UndertowLogger;
      66: new           #237                // class java/lang/RuntimeException
      69: dup
      70: invokespecial #238                // Method java/lang/RuntimeException."<init>":()V
      73: ldc           #239                // String Setting error code %s for exchange %s
      75: iload_1
      76: aload_0
      77: invokeinterface #240,  5          // InterfaceMethod io/undertow/UndertowLogger.debugf:(Ljava/lang/Throwable;Ljava/lang/String;ILjava/lang/Object;)V
      82: aload_0
      83: iload_2
      84: getstatic     #230                // Field MASK_RESPONSE_CODE:I
      87: iconst_m1
      88: ixor
      89: iand
      90: iload_1
      91: getstatic     #230                // Field MASK_RESPONSE_CODE:I
      94: iand
      95: ior
      96: putfield      #7                  // Field state:I
      99: aload_0
     100: areturn

  public io.undertow.server.HttpServerExchange setReasonPhrase(java.lang.String);
    Code:
       0: aload_0
       1: getstatic     #241                // Field REASON_PHRASE:Lio/undertow/util/AttachmentKey;
       4: aload_1
       5: invokevirtual #242                // Method putAttachment:(Lio/undertow/util/AttachmentKey;Ljava/lang/Object;)Ljava/lang/Object;
       8: pop
       9: aload_0
      10: areturn

  public java.lang.String getReasonPhrase();
    Code:
       0: aload_0
       1: getstatic     #241                // Field REASON_PHRASE:Lio/undertow/util/AttachmentKey;
       4: invokevirtual #33                 // Method getAttachment:(Lio/undertow/util/AttachmentKey;)Ljava/lang/Object;
       7: checkcast     #243                // class java/lang/String
      10: areturn

  public io.undertow.server.HttpServerExchange addRequestWrapper(io.undertow.server.ConduitWrapper<org.xnio.conduits.StreamSourceConduit>);
    Code:
       0: aload_0
       1: getfield      #193                // Field requestWrappers:[Lio/undertow/server/ConduitWrapper;
       4: astore_2
       5: aload_0
       6: getfield      #183                // Field requestChannel:Lio/undertow/server/HttpServerExchange$ReadDispatchChannel;
       9: ifnull        21
      12: getstatic     #90                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      15: invokeinterface #244,  1          // InterfaceMethod io/undertow/UndertowMessages.requestChannelAlreadyProvided:()Ljava/lang/IllegalStateException;
      20: athrow
      21: aload_2
      22: ifnonnull     38
      25: aload_0
      26: iconst_2
      27: anewarray     #245                // class io/undertow/server/ConduitWrapper
      30: dup_x1
      31: putfield      #193                // Field requestWrappers:[Lio/undertow/server/ConduitWrapper;
      34: astore_2
      35: goto          75
      38: aload_2
      39: arraylength
      40: aload_0
      41: getfield      #13                 // Field requestWrapperCount:I
      44: if_icmpne     75
      47: aload_0
      48: aload_2
      49: arraylength
      50: iconst_2
      51: iadd
      52: anewarray     #245                // class io/undertow/server/ConduitWrapper
      55: putfield      #193                // Field requestWrappers:[Lio/undertow/server/ConduitWrapper;
      58: aload_2
      59: iconst_0
      60: aload_0
      61: getfield      #193                // Field requestWrappers:[Lio/undertow/server/ConduitWrapper;
      64: iconst_0
      65: aload_2
      66: arraylength
      67: invokestatic  #124                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      70: aload_0
      71: getfield      #193                // Field requestWrappers:[Lio/undertow/server/ConduitWrapper;
      74: astore_2
      75: aload_2
      76: aload_0
      77: dup
      78: getfield      #13                 // Field requestWrapperCount:I
      81: dup_x1
      82: iconst_1
      83: iadd
      84: putfield      #13                 // Field requestWrapperCount:I
      87: aload_1
      88: aastore
      89: aload_0
      90: areturn

  public io.undertow.server.HttpServerExchange addResponseWrapper(io.undertow.server.ConduitWrapper<org.xnio.conduits.StreamSinkConduit>);
    Code:
       0: aload_0
       1: getfield      #210                // Field responseWrappers:[Lio/undertow/server/ConduitWrapper;
       4: astore_2
       5: aload_0
       6: getfield      #209                // Field responseChannel:Lio/undertow/server/HttpServerExchange$WriteDispatchChannel;
       9: ifnull        21
      12: getstatic     #90                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      15: invokeinterface #246,  1          // InterfaceMethod io/undertow/UndertowMessages.responseChannelAlreadyProvided:()Ljava/lang/IllegalStateException;
      20: athrow
      21: aload_2
      22: ifnonnull     38
      25: aload_0
      26: iconst_2
      27: anewarray     #245                // class io/undertow/server/ConduitWrapper
      30: dup
      31: astore_2
      32: putfield      #210                // Field responseWrappers:[Lio/undertow/server/ConduitWrapper;
      35: goto          75
      38: aload_2
      39: arraylength
      40: aload_0
      41: getfield      #14                 // Field responseWrapperCount:I
      44: if_icmpne     75
      47: aload_0
      48: aload_2
      49: arraylength
      50: iconst_2
      51: iadd
      52: anewarray     #245                // class io/undertow/server/ConduitWrapper
      55: putfield      #210                // Field responseWrappers:[Lio/undertow/server/ConduitWrapper;
      58: aload_2
      59: iconst_0
      60: aload_0
      61: getfield      #210                // Field responseWrappers:[Lio/undertow/server/ConduitWrapper;
      64: iconst_0
      65: aload_2
      66: arraylength
      67: invokestatic  #124                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      70: aload_0
      71: getfield      #210                // Field responseWrappers:[Lio/undertow/server/ConduitWrapper;
      74: astore_2
      75: aload_2
      76: aload_0
      77: dup
      78: getfield      #14                 // Field responseWrapperCount:I
      81: dup_x1
      82: iconst_1
      83: iadd
      84: putfield      #14                 // Field responseWrapperCount:I
      87: aload_1
      88: aastore
      89: aload_0
      90: areturn

  public io.undertow.server.BlockingHttpExchange startBlocking();
    Code:
       0: aload_0
       1: getfield      #221                // Field blockingHttpExchange:Lio/undertow/server/BlockingHttpExchange;
       4: astore_1
       5: aload_0
       6: new           #247                // class io/undertow/server/HttpServerExchange$DefaultBlockingHttpExchange
       9: dup
      10: aload_0
      11: invokespecial #248                // Method io/undertow/server/HttpServerExchange$DefaultBlockingHttpExchange."<init>":(Lio/undertow/server/HttpServerExchange;)V
      14: putfield      #221                // Field blockingHttpExchange:Lio/undertow/server/BlockingHttpExchange;
      17: aload_1
      18: areturn

  public io.undertow.server.BlockingHttpExchange startBlocking(io.undertow.server.BlockingHttpExchange);
    Code:
       0: aload_0
       1: getfield      #221                // Field blockingHttpExchange:Lio/undertow/server/BlockingHttpExchange;
       4: astore_2
       5: aload_0
       6: aload_1
       7: putfield      #221                // Field blockingHttpExchange:Lio/undertow/server/BlockingHttpExchange;
      10: aload_2
      11: areturn

  public boolean isBlocking();
    Code:
       0: aload_0
       1: getfield      #221                // Field blockingHttpExchange:Lio/undertow/server/BlockingHttpExchange;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public java.io.InputStream getInputStream();
    Code:
       0: aload_0
       1: getfield      #221                // Field blockingHttpExchange:Lio/undertow/server/BlockingHttpExchange;
       4: ifnonnull     16
       7: getstatic     #90                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      10: invokeinterface #249,  1          // InterfaceMethod io/undertow/UndertowMessages.startBlockingHasNotBeenCalled:()Ljava/lang/IllegalStateException;
      15: athrow
      16: aload_0
      17: getfield      #221                // Field blockingHttpExchange:Lio/undertow/server/BlockingHttpExchange;
      20: invokeinterface #250,  1          // InterfaceMethod io/undertow/server/BlockingHttpExchange.getInputStream:()Ljava/io/InputStream;
      25: areturn

  public java.io.OutputStream getOutputStream();
    Code:
       0: aload_0
       1: getfield      #221                // Field blockingHttpExchange:Lio/undertow/server/BlockingHttpExchange;
       4: ifnonnull     16
       7: getstatic     #90                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      10: invokeinterface #249,  1          // InterfaceMethod io/undertow/UndertowMessages.startBlockingHasNotBeenCalled:()Ljava/lang/IllegalStateException;
      15: athrow
      16: aload_0
      17: getfield      #221                // Field blockingHttpExchange:Lio/undertow/server/BlockingHttpExchange;
      20: invokeinterface #251,  1          // InterfaceMethod io/undertow/server/BlockingHttpExchange.getOutputStream:()Ljava/io/OutputStream;
      25: areturn

  io.undertow.server.HttpServerExchange terminateResponse();
    Code:
       0: aload_0
       1: getfield      #7                  // Field state:I
       4: istore_1
       5: iload_1
       6: sipush        2048
       9: invokestatic  #182                // Method org/xnio/Bits.allAreSet:(II)Z
      12: ifeq          17
      15: aload_0
      16: areturn
      17: aload_0
      18: getfield      #209                // Field responseChannel:Lio/undertow/server/HttpServerExchange$WriteDispatchChannel;
      21: ifnull        31
      24: aload_0
      25: getfield      #209                // Field responseChannel:Lio/undertow/server/HttpServerExchange$WriteDispatchChannel;
      28: invokevirtual #252                // Method io/undertow/server/HttpServerExchange$WriteDispatchChannel.responseDone:()V
      31: aload_0
      32: iload_1
      33: sipush        2048
      36: ior
      37: putfield      #7                  // Field state:I
      40: iload_1
      41: sipush        4096
      44: invokestatic  #44                 // Method org/xnio/Bits.anyAreSet:(II)Z
      47: ifeq          54
      50: aload_0
      51: invokevirtual #204                // Method invokeExchangeCompleteListeners:()V
      54: aload_0
      55: areturn

  public long getRequestStartTime();
    Code:
       0: aload_0
       1: getfield      #17                 // Field requestStartTime:J
       4: lreturn

  io.undertow.server.HttpServerExchange setRequestStartTime(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #17                 // Field requestStartTime:J
       5: aload_0
       6: areturn

  public io.undertow.server.HttpServerExchange endExchange();
    Code:
       0: aload_0
       1: getfield      #7                  // Field state:I
       4: istore_1
       5: iload_1
       6: sipush        6144
       9: invokestatic  #182                // Method org/xnio/Bits.allAreSet:(II)Z
      12: ifeq          31
      15: aload_0
      16: getfield      #221                // Field blockingHttpExchange:Lio/undertow/server/BlockingHttpExchange;
      19: ifnull        29
      22: aload_0
      23: getfield      #221                // Field blockingHttpExchange:Lio/undertow/server/BlockingHttpExchange;
      26: invokestatic  #253                // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
      29: aload_0
      30: areturn
      31: aload_0
      32: getfield      #125                // Field defaultResponseListeners:[Lio/undertow/server/DefaultResponseListener;
      35: ifnull        104
      38: aload_0
      39: getfield      #125                // Field defaultResponseListeners:[Lio/undertow/server/DefaultResponseListener;
      42: arraylength
      43: iconst_1
      44: isub
      45: istore_2
      46: iload_2
      47: iflt          104
      50: aload_0
      51: getfield      #125                // Field defaultResponseListeners:[Lio/undertow/server/DefaultResponseListener;
      54: iload_2
      55: aaload
      56: astore_3
      57: aload_3
      58: ifnull        98
      61: aload_0
      62: getfield      #125                // Field defaultResponseListeners:[Lio/undertow/server/DefaultResponseListener;
      65: iload_2
      66: aconst_null
      67: aastore
      68: aload_3
      69: aload_0
      70: invokeinterface #254,  2          // InterfaceMethod io/undertow/server/DefaultResponseListener.handleDefaultResponse:(Lio/undertow/server/HttpServerExchange;)Z
      75: ifeq          80
      78: aload_0
      79: areturn
      80: goto          98
      83: astore        4
      85: getstatic     #107                // Field io/undertow/UndertowLogger.REQUEST_LOGGER:Lio/undertow/UndertowLogger;
      88: ldc_w         #256                // String Exception running default response listener
      91: aload         4
      93: invokeinterface #257,  3          // InterfaceMethod io/undertow/UndertowLogger.debug:(Ljava/lang/Object;Ljava/lang/Throwable;)V
      98: iinc          2, -1
     101: goto          46
     104: iload_1
     105: sipush        4096
     108: invokestatic  #258                // Method org/xnio/Bits.anyAreClear:(II)Z
     111: ifeq          122
     114: aload_0
     115: getfield      #23                 // Field connection:Lio/undertow/server/ServerConnection;
     118: aload_0
     119: invokevirtual #259                // Method io/undertow/server/ServerConnection.terminateRequestChannel:(Lio/undertow/server/HttpServerExchange;)V
     122: aload_0
     123: getfield      #221                // Field blockingHttpExchange:Lio/undertow/server/BlockingHttpExchange;
     126: ifnull        178
     129: aload_0
     130: getfield      #221                // Field blockingHttpExchange:Lio/undertow/server/BlockingHttpExchange;
     133: invokeinterface #260,  1          // InterfaceMethod io/undertow/server/BlockingHttpExchange.close:()V
     138: goto          178
     141: astore_2
     142: getstatic     #262                // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
     145: aload_2
     146: invokeinterface #263,  2          // InterfaceMethod io/undertow/UndertowLogger.ioException:(Ljava/io/IOException;)V
     151: aload_0
     152: getfield      #23                 // Field connection:Lio/undertow/server/ServerConnection;
     155: invokestatic  #253                // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
     158: goto          178
     161: astore_2
     162: getstatic     #262                // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
     165: aload_2
     166: invokeinterface #264,  2          // InterfaceMethod io/undertow/UndertowLogger.handleUnexpectedFailure:(Ljava/lang/Throwable;)V
     171: aload_0
     172: getfield      #23                 // Field connection:Lio/undertow/server/ServerConnection;
     175: invokestatic  #253                // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
     178: iload_1
     179: sipush        4096
     182: invokestatic  #258                // Method org/xnio/Bits.anyAreClear:(II)Z
     185: ifeq          345
     188: aload_0
     189: getfield      #183                // Field requestChannel:Lio/undertow/server/HttpServerExchange$ReadDispatchChannel;
     192: ifnonnull     200
     195: aload_0
     196: invokevirtual #265                // Method getRequestChannel:()Lorg/xnio/channels/StreamSourceChannel;
     199: pop
     200: iconst_0
     201: istore_2
     202: aload_0
     203: getfield      #183                // Field requestChannel:Lio/undertow/server/HttpServerExchange$ReadDispatchChannel;
     206: ldc2_w        #267                // long 9223372036854775807l
     209: invokestatic  #269                // Method org/xnio/channels/Channels.drain:(Lorg/xnio/channels/StreamSourceChannel;J)J
     212: lstore_3
     213: iload_2
     214: i2l
     215: lload_3
     216: ladd
     217: l2i
     218: istore_2
     219: lload_3
     220: lconst_0
     221: lcmp
     222: ifne          286
     225: aload_0
     226: invokevirtual #78                 // Method getStatusCode:()I
     229: sipush        417
     232: if_icmpne     239
     235: iload_2
     236: ifle          283
     239: aload_0
     240: getfield      #183                // Field requestChannel:Lio/undertow/server/HttpServerExchange$ReadDispatchChannel;
     243: invokevirtual #270                // Method io/undertow/server/HttpServerExchange$ReadDispatchChannel.getReadSetter:()Lorg/xnio/ChannelListener$Setter;
     246: ldc2_w        #267                // long 9223372036854775807l
     249: new           #271                // class io/undertow/server/HttpServerExchange$2
     252: dup
     253: aload_0
     254: iload_1
     255: invokespecial #272                // Method io/undertow/server/HttpServerExchange$2."<init>":(Lio/undertow/server/HttpServerExchange;I)V
     258: new           #273                // class io/undertow/server/HttpServerExchange$3
     261: dup
     262: aload_0
     263: invokespecial #274                // Method io/undertow/server/HttpServerExchange$3."<init>":(Lio/undertow/server/HttpServerExchange;)V
     266: invokestatic  #275                // Method org/xnio/ChannelListeners.drainListener:(JLorg/xnio/ChannelListener;Lorg/xnio/ChannelExceptionHandler;)Lorg/xnio/ChannelListener;
     269: invokeinterface #276,  2          // InterfaceMethod org/xnio/ChannelListener$Setter.set:(Lorg/xnio/ChannelListener;)V
     274: aload_0
     275: getfield      #183                // Field requestChannel:Lio/undertow/server/HttpServerExchange$ReadDispatchChannel;
     278: invokevirtual #277                // Method io/undertow/server/HttpServerExchange$ReadDispatchChannel.resumeReads:()V
     281: aload_0
     282: areturn
     283: goto          345
     286: lload_3
     287: ldc2_w        #15                 // long -1l
     290: lcmp
     291: ifne          297
     294: goto          345
     297: goto          202
     300: astore_3
     301: aload_3
     302: instanceof    #261                // class java/io/IOException
     305: ifeq          323
     308: getstatic     #262                // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
     311: aload_3
     312: checkcast     #261                // class java/io/IOException
     315: invokeinterface #263,  2          // InterfaceMethod io/undertow/UndertowLogger.ioException:(Ljava/io/IOException;)V
     320: goto          332
     323: getstatic     #262                // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
     326: aload_3
     327: invokeinterface #264,  2          // InterfaceMethod io/undertow/UndertowLogger.handleUnexpectedFailure:(Ljava/lang/Throwable;)V
     332: aload_0
     333: invokevirtual #204                // Method invokeExchangeCompleteListeners:()V
     336: aload_0
     337: getfield      #23                 // Field connection:Lio/undertow/server/ServerConnection;
     340: invokestatic  #253                // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
     343: aload_0
     344: areturn
     345: iload_1
     346: sipush        2048
     349: invokestatic  #258                // Method org/xnio/Bits.anyAreClear:(II)Z
     352: ifeq          359
     355: aload_0
     356: invokevirtual #278                // Method closeAndFlushResponse:()V
     359: aload_0
     360: areturn
    Exception table:
       from    to  target type
          68    79    83   Class java/lang/Throwable
         129   138   141   Class java/io/IOException
         129   138   161   Class java/lang/Throwable
         202   282   300   Class java/lang/Throwable
         286   294   300   Class java/lang/Throwable

  private void closeAndFlushResponse();
    Code:
       0: aload_0
       1: getfield      #23                 // Field connection:Lio/undertow/server/ServerConnection;
       4: invokevirtual #279                // Method io/undertow/server/ServerConnection.isOpen:()Z
       7: ifne          20
      10: aload_0
      11: invokevirtual #280                // Method terminateRequest:()V
      14: aload_0
      15: invokevirtual #281                // Method terminateResponse:()Lio/undertow/server/HttpServerExchange;
      18: pop
      19: return
      20: aload_0
      21: invokevirtual #282                // Method isResponseChannelAvailable:()Z
      24: ifeq          95
      27: aload_0
      28: invokevirtual #81                 // Method getRequestMethod:()Lio/undertow/util/HttpString;
      31: getstatic     #117                // Field io/undertow/util/Methods.CONNECT:Lio/undertow/util/HttpString;
      34: invokevirtual #29                 // Method io/undertow/util/HttpString.equals:(Lio/undertow/util/HttpString;)Z
      37: ifne          87
      40: aload_0
      41: invokevirtual #81                 // Method getRequestMethod:()Lio/undertow/util/HttpString;
      44: getstatic     #82                 // Field io/undertow/util/Methods.HEAD:Lio/undertow/util/HttpString;
      47: invokevirtual #29                 // Method io/undertow/util/HttpString.equals:(Lio/undertow/util/HttpString;)Z
      50: ifeq          66
      53: aload_0
      54: invokevirtual #112                // Method getResponseHeaders:()Lio/undertow/util/HeaderMap;
      57: getstatic     #132                // Field io/undertow/util/Headers.CONTENT_LENGTH:Lio/undertow/util/HttpString;
      60: invokevirtual #105                // Method io/undertow/util/HeaderMap.contains:(Lio/undertow/util/HttpString;)Z
      63: ifne          87
      66: aload_0
      67: invokestatic  #80                 // Method io/undertow/server/Connectors.isEntityBodyAllowed:(Lio/undertow/server/HttpServerExchange;)Z
      70: ifeq          87
      73: aload_0
      74: invokevirtual #112                // Method getResponseHeaders:()Lio/undertow/util/HeaderMap;
      77: getstatic     #132                // Field io/undertow/util/Headers.CONTENT_LENGTH:Lio/undertow/util/HttpString;
      80: ldc_w         #283                // String 0
      83: invokevirtual #116                // Method io/undertow/util/HeaderMap.put:(Lio/undertow/util/HttpString;Ljava/lang/String;)Lio/undertow/util/HeaderMap;
      86: pop
      87: aload_0
      88: invokevirtual #284                // Method getResponseChannel:()Lorg/xnio/channels/StreamSinkChannel;
      91: pop
      92: goto          130
      95: aload_0
      96: getfield      #7                  // Field state:I
      99: sipush        2048
     102: invokestatic  #258                // Method org/xnio/Bits.anyAreClear:(II)Z
     105: ifeq          130
     108: aload_0
     109: getfield      #209                // Field responseChannel:Lio/undertow/server/HttpServerExchange$WriteDispatchChannel;
     112: invokevirtual #285                // Method io/undertow/server/HttpServerExchange$WriteDispatchChannel.isOpen:()Z
     115: ifne          130
     118: aload_0
     119: invokevirtual #204                // Method invokeExchangeCompleteListeners:()V
     122: aload_0
     123: getfield      #23                 // Field connection:Lio/undertow/server/ServerConnection;
     126: invokestatic  #253                // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
     129: return
     130: aload_0
     131: getfield      #209                // Field responseChannel:Lio/undertow/server/HttpServerExchange$WriteDispatchChannel;
     134: invokevirtual #286                // Method io/undertow/server/HttpServerExchange$WriteDispatchChannel.shutdownWrites:()V
     137: aload_0
     138: getfield      #209                // Field responseChannel:Lio/undertow/server/HttpServerExchange$WriteDispatchChannel;
     141: invokevirtual #287                // Method io/undertow/server/HttpServerExchange$WriteDispatchChannel.flush:()Z
     144: ifne          188
     147: aload_0
     148: getfield      #209                // Field responseChannel:Lio/undertow/server/HttpServerExchange$WriteDispatchChannel;
     151: invokevirtual #288                // Method io/undertow/server/HttpServerExchange$WriteDispatchChannel.getWriteSetter:()Lorg/xnio/ChannelListener$Setter;
     154: new           #289                // class io/undertow/server/HttpServerExchange$4
     157: dup
     158: aload_0
     159: invokespecial #290                // Method io/undertow/server/HttpServerExchange$4."<init>":(Lio/undertow/server/HttpServerExchange;)V
     162: new           #291                // class io/undertow/server/HttpServerExchange$5
     165: dup
     166: aload_0
     167: invokespecial #292                // Method io/undertow/server/HttpServerExchange$5."<init>":(Lio/undertow/server/HttpServerExchange;)V
     170: invokestatic  #293                // Method org/xnio/ChannelListeners.flushingChannelListener:(Lorg/xnio/ChannelListener;Lorg/xnio/ChannelExceptionHandler;)Lorg/xnio/ChannelListener;
     173: invokeinterface #276,  2          // InterfaceMethod org/xnio/ChannelListener$Setter.set:(Lorg/xnio/ChannelListener;)V
     178: aload_0
     179: getfield      #209                // Field responseChannel:Lio/undertow/server/HttpServerExchange$WriteDispatchChannel;
     182: invokevirtual #294                // Method io/undertow/server/HttpServerExchange$WriteDispatchChannel.resumeWrites:()V
     185: goto          225
     188: aload_0
     189: getfield      #7                  // Field state:I
     192: sipush        2048
     195: invokestatic  #258                // Method org/xnio/Bits.anyAreClear:(II)Z
     198: ifeq          225
     201: aload_0
     202: invokevirtual #204                // Method invokeExchangeCompleteListeners:()V
     205: getstatic     #295                // Field io/undertow/UndertowLogger.ROOT_LOGGER:Lio/undertow/UndertowLogger;
     208: aload_0
     209: getfield      #23                 // Field connection:Lio/undertow/server/ServerConnection;
     212: aload_0
     213: invokeinterface #296,  3          // InterfaceMethod io/undertow/UndertowLogger.responseWasNotTerminated:(Lio/undertow/server/ServerConnection;Lio/undertow/server/HttpServerExchange;)V
     218: aload_0
     219: getfield      #23                 // Field connection:Lio/undertow/server/ServerConnection;
     222: invokestatic  #253                // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
     225: goto          271
     228: astore_1
     229: aload_1
     230: instanceof    #261                // class java/io/IOException
     233: ifeq          251
     236: getstatic     #262                // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
     239: aload_1
     240: checkcast     #261                // class java/io/IOException
     243: invokeinterface #263,  2          // InterfaceMethod io/undertow/UndertowLogger.ioException:(Ljava/io/IOException;)V
     248: goto          260
     251: getstatic     #262                // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
     254: aload_1
     255: invokeinterface #264,  2          // InterfaceMethod io/undertow/UndertowLogger.handleUnexpectedFailure:(Ljava/lang/Throwable;)V
     260: aload_0
     261: invokevirtual #204                // Method invokeExchangeCompleteListeners:()V
     264: aload_0
     265: getfield      #23                 // Field connection:Lio/undertow/server/ServerConnection;
     268: invokestatic  #253                // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
     271: return
    Exception table:
       from    to  target type
          20   129   228   Class java/lang/Throwable
         130   225   228   Class java/lang/Throwable

  io.undertow.server.HttpServerExchange startResponse() throws java.lang.IllegalStateException;
    Code:
       0: aload_0
       1: getfield      #7                  // Field state:I
       4: istore_1
       5: iload_1
       6: sipush        1024
       9: invokestatic  #182                // Method org/xnio/Bits.allAreSet:(II)Z
      12: ifeq          24
      15: getstatic     #90                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      18: invokeinterface #234,  1          // InterfaceMethod io/undertow/UndertowMessages.responseAlreadyStarted:()Ljava/lang/IllegalStateException;
      23: athrow
      24: aload_0
      25: iload_1
      26: sipush        1024
      29: ior
      30: putfield      #7                  // Field state:I
      33: getstatic     #297                // Field log:Lorg/jboss/logging/Logger;
      36: ldc_w         #298                // String Starting to write response for %s
      39: aload_0
      40: invokevirtual #299                // Method org/jboss/logging/Logger.tracef:(Ljava/lang/String;Ljava/lang/Object;)V
      43: aload_0
      44: areturn

  public org.xnio.XnioIoThread getIoThread();
    Code:
       0: aload_0
       1: getfield      #23                 // Field connection:Lio/undertow/server/ServerConnection;
       4: invokevirtual #300                // Method io/undertow/server/ServerConnection.getIoThread:()Lorg/xnio/XnioIoThread;
       7: areturn

  public long getMaxEntitySize();
    Code:
       0: aload_0
       1: getfield      #24                 // Field maxEntitySize:J
       4: lreturn

  public io.undertow.server.HttpServerExchange setMaxEntitySize(long);
    Code:
       0: aload_0
       1: invokevirtual #301                // Method isRequestChannelAvailable:()Z
       4: ifne          16
       7: getstatic     #90                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      10: invokeinterface #244,  1          // InterfaceMethod io/undertow/UndertowMessages.requestChannelAlreadyProvided:()Ljava/lang/IllegalStateException;
      15: athrow
      16: aload_0
      17: lload_1
      18: putfield      #24                 // Field maxEntitySize:J
      21: aload_0
      22: getfield      #23                 // Field connection:Lio/undertow/server/ServerConnection;
      25: aload_0
      26: invokevirtual #302                // Method io/undertow/server/ServerConnection.maxEntitySizeUpdated:(Lio/undertow/server/HttpServerExchange;)V
      29: aload_0
      30: areturn

  public io.undertow.security.api.SecurityContext getSecurityContext();
    Code:
       0: aload_0
       1: getfield      #303                // Field securityContext:Lio/undertow/security/api/SecurityContext;
       4: areturn

  public void setSecurityContext(io.undertow.security.api.SecurityContext);
    Code:
       0: invokestatic  #304                // Method java/lang/System.getSecurityManager:()Ljava/lang/SecurityManager;
       3: astore_2
       4: aload_2
       5: ifnull        15
       8: aload_2
       9: getstatic     #305                // Field SET_SECURITY_CONTEXT:Ljava/lang/RuntimePermission;
      12: invokevirtual #306                // Method java/lang/SecurityManager.checkPermission:(Ljava/security/Permission;)V
      15: aload_0
      16: aload_1
      17: putfield      #303                // Field securityContext:Lio/undertow/security/api/SecurityContext;
      20: return

  public void addResponseCommitListener(io.undertow.server.ResponseCommitListener);
    Code:
       0: aload_0
       1: new           #307                // class io/undertow/server/HttpServerExchange$6
       4: dup
       5: aload_0
       6: aload_1
       7: invokespecial #308                // Method io/undertow/server/HttpServerExchange$6."<init>":(Lio/undertow/server/HttpServerExchange;Lio/undertow/server/ResponseCommitListener;)V
      10: invokevirtual #309                // Method addResponseWrapper:(Lio/undertow/server/ConduitWrapper;)Lio/undertow/server/HttpServerExchange;
      13: pop
      14: return

  boolean runResumeReadWrite();
    Code:
       0: iconst_0
       1: istore_1
       2: aload_0
       3: getfield      #7                  // Field state:I
       6: ldc_w         #310                // int 524288
       9: invokestatic  #44                 // Method org/xnio/Bits.anyAreSet:(II)Z
      12: ifeq          24
      15: aload_0
      16: getfield      #209                // Field responseChannel:Lio/undertow/server/HttpServerExchange$WriteDispatchChannel;
      19: invokevirtual #311                // Method io/undertow/server/HttpServerExchange$WriteDispatchChannel.runResume:()V
      22: iconst_1
      23: istore_1
      24: aload_0
      25: getfield      #7                  // Field state:I
      28: ldc_w         #312                // int 262144
      31: invokestatic  #44                 // Method org/xnio/Bits.anyAreSet:(II)Z
      34: ifeq          46
      37: aload_0
      38: getfield      #183                // Field requestChannel:Lio/undertow/server/HttpServerExchange$ReadDispatchChannel;
      41: invokevirtual #313                // Method io/undertow/server/HttpServerExchange$ReadDispatchChannel.runResume:()V
      44: iconst_1
      45: istore_1
      46: iload_1
      47: ireturn

  boolean isResumed();
    Code:
       0: aload_0
       1: getfield      #7                  // Field state:I
       4: ldc           #89                 // int 786432
       6: invokestatic  #44                 // Method org/xnio/Bits.anyAreSet:(II)Z
       9: ireturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: invokevirtual #81                 // Method getRequestMethod:()Lio/undertow/util/HttpString;
       4: invokevirtual #314                // Method io/undertow/util/HttpString.toString:()Ljava/lang/String;
       7: aload_0
       8: invokevirtual #51                 // Method getRequestURI:()Ljava/lang/String;
      11: invokedynamic #315,  0            // InvokeDynamic #2:makeConcatWithConstants:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      16: areturn

  static {};
    Code:
       0: ldc           #37                 // class io/undertow/server/HttpServerExchange
       2: invokestatic  #316                // Method org/jboss/logging/Logger.getLogger:(Ljava/lang/Class;)Lorg/jboss/logging/Logger;
       5: putstatic     #297                // Field log:Lorg/jboss/logging/Logger;
       8: new           #317                // class java/lang/RuntimePermission
      11: dup
      12: ldc_w         #318                // String io.undertow.SET_SECURITY_CONTEXT
      15: invokespecial #319                // Method java/lang/RuntimePermission."<init>":(Ljava/lang/String;)V
      18: putstatic     #305                // Field SET_SECURITY_CONTEXT:Ljava/lang/RuntimePermission;
      21: ldc           #243                // class java/lang/String
      23: invokestatic  #320                // Method io/undertow/util/AttachmentKey.create:(Ljava/lang/Class;)Lio/undertow/util/AttachmentKey;
      26: putstatic     #241                // Field REASON_PHRASE:Lio/undertow/util/AttachmentKey;
      29: ldc           #202                // class "[Lio/undertow/connector/PooledByteBuffer;"
      31: invokestatic  #320                // Method io/undertow/util/AttachmentKey.create:(Ljava/lang/Class;)Lio/undertow/util/AttachmentKey;
      34: putstatic     #201                // Field BUFFERED_REQUEST_DATA:Lio/undertow/util/AttachmentKey;
      37: ldc_w         #321                // class java/util/Map
      40: invokestatic  #320                // Method io/undertow/util/AttachmentKey.create:(Ljava/lang/Class;)Lio/undertow/util/AttachmentKey;
      43: putstatic     #322                // Field REQUEST_ATTRIBUTES:Lio/undertow/util/AttachmentKey;
      46: ldc           #243                // class java/lang/String
      48: invokestatic  #320                // Method io/undertow/util/AttachmentKey.create:(Ljava/lang/Class;)Lio/undertow/util/AttachmentKey;
      51: putstatic     #323                // Field REMOTE_USER:Lio/undertow/util/AttachmentKey;
      54: ldc           #34                 // class java/lang/Boolean
      56: invokestatic  #320                // Method io/undertow/util/AttachmentKey.create:(Ljava/lang/Class;)Lio/undertow/util/AttachmentKey;
      59: putstatic     #32                 // Field SECURE_REQUEST:Lio/undertow/util/AttachmentKey;
      62: iconst_0
      63: bipush        9
      65: invokestatic  #324                // Method org/xnio/Bits.intBitMask:(II)I
      68: putstatic     #230                // Field MASK_RESPONSE_CODE:I
      71: new           #325                // class java/util/concurrent/atomic/AtomicLong
      74: dup
      75: lconst_0
      76: invokespecial #326                // Method java/util/concurrent/atomic/AtomicLong."<init>":(J)V
      79: putstatic     #19                 // Field REQUEST_ID_GENERATOR:Ljava/util/concurrent/atomic/AtomicLong;
      82: return
}
