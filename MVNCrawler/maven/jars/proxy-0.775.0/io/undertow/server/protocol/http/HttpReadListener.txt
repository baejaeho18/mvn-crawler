Compiled from "HttpReadListener.java"
final class io.undertow.server.protocol.http.HttpReadListener implements org.xnio.ChannelListener<org.xnio.conduits.ConduitStreamSourceChannel>, java.lang.Runnable {
  private static final io.undertow.util.HttpString PRI;

  private static final byte[] PRI_EXPECTED;

  private static final java.lang.String BAD_REQUEST;

  private final io.undertow.server.protocol.http.HttpServerConnection connection;

  private final io.undertow.server.protocol.http.ParseState state;

  private final io.undertow.server.protocol.http.HttpRequestParser parser;

  private io.undertow.server.HttpServerExchange httpServerExchange;

  private int read;

  private final int maxRequestSize;

  private final long maxEntitySize;

  private final boolean recordRequestStartTime;

  private final boolean allowUnknownProtocols;

  private final boolean requireHostHeader;

  private volatile int requestState;

  private static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<io.undertow.server.protocol.http.HttpReadListener> requestStateUpdater;

  private final io.undertow.server.ConnectorStatisticsImpl connectorStatistics;

  private io.undertow.server.protocol.ParseTimeoutUpdater parseTimeoutUpdater;

  io.undertow.server.protocol.http.HttpReadListener(io.undertow.server.protocol.http.HttpServerConnection, io.undertow.server.protocol.http.HttpRequestParser, io.undertow.server.ConnectorStatisticsImpl);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field read:I
       9: aload_0
      10: aload_1
      11: putfield      #3                  // Field connection:Lio/undertow/server/protocol/http/HttpServerConnection;
      14: aload_0
      15: aload_2
      16: putfield      #4                  // Field parser:Lio/undertow/server/protocol/http/HttpRequestParser;
      19: aload_0
      20: aload_3
      21: putfield      #5                  // Field connectorStatistics:Lio/undertow/server/ConnectorStatisticsImpl;
      24: aload_0
      25: aload_1
      26: invokevirtual #6                  // Method io/undertow/server/protocol/http/HttpServerConnection.getUndertowOptions:()Lorg/xnio/OptionMap;
      29: getstatic     #7                  // Field io/undertow/UndertowOptions.MAX_HEADER_SIZE:Lorg/xnio/Option;
      32: ldc           #9                  // int 1048576
      34: invokevirtual #10                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;I)I
      37: putfield      #11                 // Field maxRequestSize:I
      40: aload_0
      41: aload_1
      42: invokevirtual #6                  // Method io/undertow/server/protocol/http/HttpServerConnection.getUndertowOptions:()Lorg/xnio/OptionMap;
      45: getstatic     #12                 // Field io/undertow/UndertowOptions.MAX_ENTITY_SIZE:Lorg/xnio/Option;
      48: ldc2_w        #13                 // long -1l
      51: invokevirtual #15                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;J)J
      54: putfield      #16                 // Field maxEntitySize:J
      57: aload_0
      58: aload_1
      59: invokevirtual #6                  // Method io/undertow/server/protocol/http/HttpServerConnection.getUndertowOptions:()Lorg/xnio/OptionMap;
      62: getstatic     #17                 // Field io/undertow/UndertowOptions.RECORD_REQUEST_START_TIME:Lorg/xnio/Option;
      65: iconst_0
      66: invokevirtual #18                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;Z)Z
      69: putfield      #19                 // Field recordRequestStartTime:Z
      72: aload_0
      73: aload_1
      74: invokevirtual #6                  // Method io/undertow/server/protocol/http/HttpServerConnection.getUndertowOptions:()Lorg/xnio/OptionMap;
      77: getstatic     #20                 // Field io/undertow/UndertowOptions.REQUIRE_HOST_HTTP11:Lorg/xnio/Option;
      80: iconst_1
      81: invokevirtual #18                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;Z)Z
      84: putfield      #21                 // Field requireHostHeader:Z
      87: aload_0
      88: aload_1
      89: invokevirtual #6                  // Method io/undertow/server/protocol/http/HttpServerConnection.getUndertowOptions:()Lorg/xnio/OptionMap;
      92: getstatic     #22                 // Field io/undertow/UndertowOptions.ALLOW_UNKNOWN_PROTOCOLS:Lorg/xnio/Option;
      95: iconst_0
      96: invokevirtual #18                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;Z)Z
      99: putfield      #23                 // Field allowUnknownProtocols:Z
     102: aload_1
     103: invokevirtual #6                  // Method io/undertow/server/protocol/http/HttpServerConnection.getUndertowOptions:()Lorg/xnio/OptionMap;
     106: getstatic     #24                 // Field io/undertow/UndertowOptions.REQUEST_PARSE_TIMEOUT:Lorg/xnio/Option;
     109: iconst_m1
     110: invokevirtual #10                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;I)I
     113: istore        4
     115: aload_1
     116: invokevirtual #6                  // Method io/undertow/server/protocol/http/HttpServerConnection.getUndertowOptions:()Lorg/xnio/OptionMap;
     119: getstatic     #25                 // Field io/undertow/UndertowOptions.NO_REQUEST_TIMEOUT:Lorg/xnio/Option;
     122: iconst_m1
     123: invokevirtual #10                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;I)I
     126: istore        5
     128: iload         5
     130: ifge          146
     133: iload         4
     135: ifge          146
     138: aload_0
     139: aconst_null
     140: putfield      #26                 // Field parseTimeoutUpdater:Lio/undertow/server/protocol/ParseTimeoutUpdater;
     143: goto          172
     146: aload_0
     147: new           #27                 // class io/undertow/server/protocol/ParseTimeoutUpdater
     150: dup
     151: aload_1
     152: iload         4
     154: i2l
     155: iload         5
     157: i2l
     158: invokespecial #28                 // Method io/undertow/server/protocol/ParseTimeoutUpdater."<init>":(Lorg/xnio/channels/ConnectedChannel;JJ)V
     161: putfield      #26                 // Field parseTimeoutUpdater:Lio/undertow/server/protocol/ParseTimeoutUpdater;
     164: aload_1
     165: aload_0
     166: getfield      #26                 // Field parseTimeoutUpdater:Lio/undertow/server/protocol/ParseTimeoutUpdater;
     169: invokevirtual #29                 // Method io/undertow/server/protocol/http/HttpServerConnection.addCloseListener:(Lio/undertow/server/ServerConnection$CloseListener;)V
     172: aload_0
     173: new           #30                 // class io/undertow/server/protocol/http/ParseState
     176: dup
     177: aload_1
     178: invokevirtual #6                  // Method io/undertow/server/protocol/http/HttpServerConnection.getUndertowOptions:()Lorg/xnio/OptionMap;
     181: getstatic     #31                 // Field io/undertow/UndertowOptions.HTTP_HEADERS_CACHE_SIZE:Lorg/xnio/Option;
     184: bipush        15
     186: invokevirtual #10                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;I)I
     189: invokespecial #32                 // Method io/undertow/server/protocol/http/ParseState."<init>":(I)V
     192: putfield      #33                 // Field state:Lio/undertow/server/protocol/http/ParseState;
     195: return

  public void newRequest();
    Code:
       0: aload_0
       1: getfield      #33                 // Field state:Lio/undertow/server/protocol/http/ParseState;
       4: invokevirtual #34                 // Method io/undertow/server/protocol/http/ParseState.reset:()V
       7: aload_0
       8: iconst_0
       9: putfield      #2                  // Field read:I
      12: aload_0
      13: getfield      #26                 // Field parseTimeoutUpdater:Lio/undertow/server/protocol/ParseTimeoutUpdater;
      16: ifnull        26
      19: aload_0
      20: getfield      #26                 // Field parseTimeoutUpdater:Lio/undertow/server/protocol/ParseTimeoutUpdater;
      23: invokevirtual #35                 // Method io/undertow/server/protocol/ParseTimeoutUpdater.connectionIdle:()V
      26: aload_0
      27: getfield      #3                  // Field connection:Lio/undertow/server/protocol/http/HttpServerConnection;
      30: aconst_null
      31: invokevirtual #36                 // Method io/undertow/server/protocol/http/HttpServerConnection.setCurrentExchange:(Lio/undertow/server/HttpServerExchange;)V
      34: return

  public void handleEvent(org.xnio.conduits.ConduitStreamSourceChannel);
    Code:
       0: getstatic     #37                 // Field requestStateUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #38                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.get:(Ljava/lang/Object;)I
       7: ifeq          49
      10: getstatic     #37                 // Field requestStateUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      13: aload_0
      14: iconst_1
      15: iconst_2
      16: invokevirtual #39                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      19: ifeq          0
      22: aload_1
      23: invokevirtual #40                 // Method org/xnio/conduits/ConduitStreamSourceChannel.suspendReads:()V
      26: getstatic     #37                 // Field requestStateUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      29: aload_0
      30: iconst_1
      31: invokevirtual #41                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.set:(Ljava/lang/Object;I)V
      34: goto          48
      37: astore_2
      38: getstatic     #37                 // Field requestStateUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      41: aload_0
      42: iconst_1
      43: invokevirtual #41                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.set:(Ljava/lang/Object;I)V
      46: aload_2
      47: athrow
      48: return
      49: aload_0
      50: aload_1
      51: invokevirtual #42                 // Method handleEventWithNoRunningRequest:(Lorg/xnio/conduits/ConduitStreamSourceChannel;)V
      54: return
    Exception table:
       from    to  target type
          22    26    37   any

  public void handleEventWithNoRunningRequest(org.xnio.conduits.ConduitStreamSourceChannel);
    Code:
       0: aload_0
       1: getfield      #3                  // Field connection:Lio/undertow/server/protocol/http/HttpServerConnection;
       4: invokevirtual #43                 // Method io/undertow/server/protocol/http/HttpServerConnection.getExtraBytes:()Lio/undertow/connector/PooledByteBuffer;
       7: astore_2
       8: aload_2
       9: ifnonnull     27
      12: aload_0
      13: getfield      #3                  // Field connection:Lio/undertow/server/protocol/http/HttpServerConnection;
      16: invokevirtual #44                 // Method io/undertow/server/protocol/http/HttpServerConnection.getOriginalSourceConduit:()Lorg/xnio/conduits/StreamSourceConduit;
      19: invokeinterface #45,  1           // InterfaceMethod org/xnio/conduits/StreamSourceConduit.isReadShutdown:()Z
      24: ifne          42
      27: aload_0
      28: getfield      #3                  // Field connection:Lio/undertow/server/protocol/http/HttpServerConnection;
      31: invokevirtual #46                 // Method io/undertow/server/protocol/http/HttpServerConnection.getOriginalSinkConduit:()Lorg/xnio/conduits/StreamSinkConduit;
      34: invokeinterface #47,  1           // InterfaceMethod org/xnio/conduits/StreamSinkConduit.isWriteShutdown:()Z
      39: ifeq          54
      42: aload_0
      43: getfield      #3                  // Field connection:Lio/undertow/server/protocol/http/HttpServerConnection;
      46: invokestatic  #48                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
      49: aload_1
      50: invokevirtual #40                 // Method org/xnio/conduits/ConduitStreamSourceChannel.suspendReads:()V
      53: return
      54: aload_2
      55: ifnonnull     73
      58: aload_0
      59: getfield      #3                  // Field connection:Lio/undertow/server/protocol/http/HttpServerConnection;
      62: invokevirtual #49                 // Method io/undertow/server/protocol/http/HttpServerConnection.getByteBufferPool:()Lio/undertow/connector/ByteBufferPool;
      65: invokeinterface #50,  1           // InterfaceMethod io/undertow/connector/ByteBufferPool.allocate:()Lio/undertow/connector/PooledByteBuffer;
      70: goto          74
      73: aload_2
      74: astore_3
      75: aload_3
      76: invokeinterface #51,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
      81: astore        4
      83: iconst_1
      84: istore        5
      86: iconst_0
      87: istore        7
      89: aload_2
      90: ifnonnull     143
      93: aload         4
      95: invokevirtual #52                 // Method java/nio/ByteBuffer.clear:()Ljava/nio/ByteBuffer;
      98: pop
      99: aload_1
     100: aload         4
     102: invokevirtual #53                 // Method org/xnio/conduits/ConduitStreamSourceChannel.read:(Ljava/nio/ByteBuffer;)I
     105: istore        6
     107: goto          150
     110: astore        8
     112: getstatic     #55                 // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
     115: ldc           #56                 // String Error reading request
     117: aload         8
     119: invokeinterface #57,  3           // InterfaceMethod io/undertow/UndertowLogger.debug:(Ljava/lang/Object;Ljava/lang/Throwable;)V
     124: aload_0
     125: getfield      #3                  // Field connection:Lio/undertow/server/protocol/http/HttpServerConnection;
     128: invokestatic  #48                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
     131: iload         5
     133: ifeq          142
     136: aload_3
     137: invokeinterface #58,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
     142: return
     143: aload         4
     145: invokevirtual #59                 // Method java/nio/ByteBuffer.remaining:()I
     148: istore        6
     150: iload         6
     152: ifgt          193
     155: iload         7
     157: ifeq          174
     160: aload_0
     161: getfield      #26                 // Field parseTimeoutUpdater:Lio/undertow/server/protocol/ParseTimeoutUpdater;
     164: ifnull        174
     167: aload_0
     168: getfield      #26                 // Field parseTimeoutUpdater:Lio/undertow/server/protocol/ParseTimeoutUpdater;
     171: invokevirtual #60                 // Method io/undertow/server/protocol/ParseTimeoutUpdater.failedParse:()V
     174: aload_0
     175: aload_1
     176: iload         6
     178: invokevirtual #61                 // Method handleFailedRead:(Lorg/xnio/conduits/ConduitStreamSourceChannel;I)V
     181: iload         5
     183: ifeq          192
     186: aload_3
     187: invokeinterface #58,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
     192: return
     193: iconst_1
     194: istore        7
     196: aload_2
     197: ifnull        213
     200: aconst_null
     201: astore_2
     202: aload_0
     203: getfield      #3                  // Field connection:Lio/undertow/server/protocol/http/HttpServerConnection;
     206: aconst_null
     207: invokevirtual #62                 // Method io/undertow/server/protocol/http/HttpServerConnection.setExtraBytes:(Lio/undertow/connector/PooledByteBuffer;)V
     210: goto          219
     213: aload         4
     215: invokevirtual #63                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;
     218: pop
     219: aload         4
     221: invokevirtual #59                 // Method java/nio/ByteBuffer.remaining:()I
     224: istore        8
     226: aload_0
     227: getfield      #64                 // Field httpServerExchange:Lio/undertow/server/HttpServerExchange;
     230: ifnonnull     252
     233: aload_0
     234: new           #65                 // class io/undertow/server/HttpServerExchange
     237: dup
     238: aload_0
     239: getfield      #3                  // Field connection:Lio/undertow/server/protocol/http/HttpServerConnection;
     242: aload_0
     243: getfield      #16                 // Field maxEntitySize:J
     246: invokespecial #66                 // Method io/undertow/server/HttpServerExchange."<init>":(Lio/undertow/server/ServerConnection;J)V
     249: putfield      #64                 // Field httpServerExchange:Lio/undertow/server/HttpServerExchange;
     252: aload_0
     253: getfield      #4                  // Field parser:Lio/undertow/server/protocol/http/HttpRequestParser;
     256: aload         4
     258: aload_0
     259: getfield      #33                 // Field state:Lio/undertow/server/protocol/http/ParseState;
     262: aload_0
     263: getfield      #64                 // Field httpServerExchange:Lio/undertow/server/HttpServerExchange;
     266: invokevirtual #67                 // Method io/undertow/server/protocol/http/HttpRequestParser.handle:(Ljava/nio/ByteBuffer;Lio/undertow/server/protocol/http/ParseState;Lio/undertow/server/HttpServerExchange;)V
     269: aload         4
     271: invokevirtual #68                 // Method java/nio/ByteBuffer.hasRemaining:()Z
     274: ifeq          288
     277: iconst_0
     278: istore        5
     280: aload_0
     281: getfield      #3                  // Field connection:Lio/undertow/server/protocol/http/HttpServerConnection;
     284: aload_3
     285: invokevirtual #62                 // Method io/undertow/server/protocol/http/HttpServerConnection.setExtraBytes:(Lio/undertow/connector/PooledByteBuffer;)V
     288: aload_0
     289: getfield      #2                  // Field read:I
     292: iload         8
     294: aload         4
     296: invokevirtual #59                 // Method java/nio/ByteBuffer.remaining:()I
     299: isub
     300: iadd
     301: istore        9
     303: aload_0
     304: iload         9
     306: putfield      #2                  // Field read:I
     309: aload_0
     310: getfield      #2                  // Field read:I
     313: aload_0
     314: getfield      #11                 // Field maxRequestSize:I
     317: if_icmple     363
     320: getstatic     #69                 // Field io/undertow/UndertowLogger.REQUEST_LOGGER:Lio/undertow/UndertowLogger;
     323: aload_0
     324: getfield      #3                  // Field connection:Lio/undertow/server/protocol/http/HttpServerConnection;
     327: invokevirtual #70                 // Method io/undertow/server/protocol/http/HttpServerConnection.getPeerAddress:()Ljava/net/SocketAddress;
     330: aload_0
     331: getfield      #11                 // Field maxRequestSize:I
     334: invokeinterface #71,  3           // InterfaceMethod io/undertow/UndertowLogger.requestHeaderWasTooLarge:(Ljava/net/SocketAddress;I)V
     339: aload_0
     340: aload_0
     341: getfield      #3                  // Field connection:Lio/undertow/server/protocol/http/HttpServerConnection;
     344: invokevirtual #72                 // Method io/undertow/server/protocol/http/HttpServerConnection.getChannel:()Lorg/xnio/StreamConnection;
     347: aconst_null
     348: invokevirtual #73                 // Method sendBadRequestAndClose:(Lorg/xnio/StreamConnection;Ljava/lang/Throwable;)V
     351: iload         5
     353: ifeq          362
     356: aload_3
     357: invokeinterface #58,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
     362: return
     363: aload_0
     364: getfield      #33                 // Field state:Lio/undertow/server/protocol/http/ParseState;
     367: invokevirtual #74                 // Method io/undertow/server/protocol/http/ParseState.isComplete:()Z
     370: ifeq          89
     373: aload_0
     374: getfield      #26                 // Field parseTimeoutUpdater:Lio/undertow/server/protocol/ParseTimeoutUpdater;
     377: ifnull        387
     380: aload_0
     381: getfield      #26                 // Field parseTimeoutUpdater:Lio/undertow/server/protocol/ParseTimeoutUpdater;
     384: invokevirtual #75                 // Method io/undertow/server/protocol/ParseTimeoutUpdater.requestStarted:()V
     387: aload_0
     388: getfield      #3                  // Field connection:Lio/undertow/server/protocol/http/HttpServerConnection;
     391: invokevirtual #44                 // Method io/undertow/server/protocol/http/HttpServerConnection.getOriginalSourceConduit:()Lorg/xnio/conduits/StreamSourceConduit;
     394: invokeinterface #76,  1           // InterfaceMethod org/xnio/conduits/StreamSourceConduit.suspendReads:()V
     399: aload_0
     400: getfield      #64                 // Field httpServerExchange:Lio/undertow/server/HttpServerExchange;
     403: astore        8
     405: aload         8
     407: aload_0
     408: getfield      #3                  // Field connection:Lio/undertow/server/protocol/http/HttpServerConnection;
     411: invokevirtual #77                 // Method io/undertow/server/protocol/http/HttpServerConnection.getSslSession:()Ljavax/net/ssl/SSLSession;
     414: ifnull        422
     417: ldc           #78                 // String https
     419: goto          424
     422: ldc           #79                 // String http
     424: invokevirtual #80                 // Method io/undertow/server/HttpServerExchange.setRequestScheme:(Ljava/lang/String;)Lio/undertow/server/HttpServerExchange;
     427: pop
     428: aload_0
     429: aconst_null
     430: putfield      #64                 // Field httpServerExchange:Lio/undertow/server/HttpServerExchange;
     433: getstatic     #37                 // Field requestStateUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     436: aload_0
     437: iconst_1
     438: invokevirtual #41                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.set:(Ljava/lang/Object;I)V
     441: aload_0
     442: getfield      #19                 // Field recordRequestStartTime:Z
     445: ifeq          453
     448: aload         8
     450: invokestatic  #81                 // Method io/undertow/server/Connectors.setRequestStartTime:(Lio/undertow/server/HttpServerExchange;)V
     453: aload         8
     455: invokevirtual #82                 // Method io/undertow/server/HttpServerExchange.getProtocol:()Lio/undertow/util/HttpString;
     458: getstatic     #83                 // Field io/undertow/util/Protocols.HTTP_2_0:Lio/undertow/util/HttpString;
     461: if_acmpne     485
     464: aload_0
     465: aload_3
     466: aload         8
     468: invokevirtual #84                 // Method handleHttp2PriorKnowledge:(Lio/undertow/connector/PooledByteBuffer;Lio/undertow/server/HttpServerExchange;)Z
     471: istore        5
     473: iload         5
     475: ifeq          484
     478: aload_3
     479: invokeinterface #58,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
     484: return
     485: aload_0
     486: getfield      #23                 // Field allowUnknownProtocols:Z
     489: ifne          575
     492: aload         8
     494: invokevirtual #82                 // Method io/undertow/server/HttpServerExchange.getProtocol:()Lio/undertow/util/HttpString;
     497: astore        9
     499: aload         9
     501: getstatic     #85                 // Field io/undertow/util/Protocols.HTTP_1_1:Lio/undertow/util/HttpString;
     504: if_acmpeq     575
     507: aload         9
     509: getstatic     #86                 // Field io/undertow/util/Protocols.HTTP_1_0:Lio/undertow/util/HttpString;
     512: if_acmpeq     575
     515: aload         9
     517: getstatic     #87                 // Field io/undertow/util/Protocols.HTTP_0_9:Lio/undertow/util/HttpString;
     520: if_acmpeq     575
     523: getstatic     #55                 // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
     526: ldc           #88                 // String Closing connection from %s due to unknown protocol %s
     528: aload_0
     529: getfield      #3                  // Field connection:Lio/undertow/server/protocol/http/HttpServerConnection;
     532: invokevirtual #72                 // Method io/undertow/server/protocol/http/HttpServerConnection.getChannel:()Lorg/xnio/StreamConnection;
     535: invokevirtual #89                 // Method org/xnio/StreamConnection.getPeerAddress:()Ljava/net/SocketAddress;
     538: aload         9
     540: invokeinterface #90,  4           // InterfaceMethod io/undertow/UndertowLogger.debugf:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
     545: aload_0
     546: aload_0
     547: getfield      #3                  // Field connection:Lio/undertow/server/protocol/http/HttpServerConnection;
     550: invokevirtual #72                 // Method io/undertow/server/protocol/http/HttpServerConnection.getChannel:()Lorg/xnio/StreamConnection;
     553: new           #54                 // class java/io/IOException
     556: dup
     557: invokespecial #91                 // Method java/io/IOException."<init>":()V
     560: invokevirtual #73                 // Method sendBadRequestAndClose:(Lorg/xnio/StreamConnection;Ljava/lang/Throwable;)V
     563: iload         5
     565: ifeq          574
     568: aload_3
     569: invokeinterface #58,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
     574: return
     575: aload         8
     577: invokestatic  #92                 // Method io/undertow/server/protocol/http/HttpTransferEncoding.setupRequest:(Lio/undertow/server/HttpServerExchange;)V
     580: aload_0
     581: getfield      #3                  // Field connection:Lio/undertow/server/protocol/http/HttpServerConnection;
     584: aload         8
     586: invokevirtual #36                 // Method io/undertow/server/protocol/http/HttpServerConnection.setCurrentExchange:(Lio/undertow/server/HttpServerExchange;)V
     589: aload_0
     590: getfield      #5                  // Field connectorStatistics:Lio/undertow/server/ConnectorStatisticsImpl;
     593: ifnull        605
     596: aload_0
     597: getfield      #5                  // Field connectorStatistics:Lio/undertow/server/ConnectorStatisticsImpl;
     600: aload         8
     602: invokevirtual #93                 // Method io/undertow/server/ConnectorStatisticsImpl.setup:(Lio/undertow/server/HttpServerExchange;)V
     605: aload_0
     606: getfield      #3                  // Field connection:Lio/undertow/server/protocol/http/HttpServerConnection;
     609: invokevirtual #77                 // Method io/undertow/server/protocol/http/HttpServerConnection.getSslSession:()Ljavax/net/ssl/SSLSession;
     612: ifnull        619
     615: aload_1
     616: invokevirtual #40                 // Method org/xnio/conduits/ConduitStreamSourceChannel.suspendReads:()V
     619: aload         8
     621: invokevirtual #94                 // Method io/undertow/server/HttpServerExchange.getRequestHeaders:()Lio/undertow/util/HeaderMap;
     624: getstatic     #95                 // Field io/undertow/util/Headers.HOST:Lio/undertow/util/HttpString;
     627: invokevirtual #96                 // Method io/undertow/util/HeaderMap.get:(Lio/undertow/util/HttpString;)Lio/undertow/util/HeaderValues;
     630: astore        9
     632: aload         9
     634: ifnull        677
     637: aload         9
     639: invokevirtual #97                 // Method io/undertow/util/HeaderValues.size:()I
     642: iconst_1
     643: if_icmple     677
     646: aload_0
     647: aload_0
     648: getfield      #3                  // Field connection:Lio/undertow/server/protocol/http/HttpServerConnection;
     651: invokevirtual #72                 // Method io/undertow/server/protocol/http/HttpServerConnection.getChannel:()Lorg/xnio/StreamConnection;
     654: getstatic     #98                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
     657: invokeinterface #99,  1           // InterfaceMethod io/undertow/UndertowMessages.moreThanOneHostHeader:()Ljava/io/IOException;
     662: invokevirtual #73                 // Method sendBadRequestAndClose:(Lorg/xnio/StreamConnection;Ljava/lang/Throwable;)V
     665: iload         5
     667: ifeq          676
     670: aload_3
     671: invokeinterface #58,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
     676: return
     677: aload_0
     678: getfield      #21                 // Field requireHostHeader:Z
     681: ifeq          753
     684: aload         8
     686: invokevirtual #82                 // Method io/undertow/server/HttpServerExchange.getProtocol:()Lio/undertow/util/HttpString;
     689: getstatic     #85                 // Field io/undertow/util/Protocols.HTTP_1_1:Lio/undertow/util/HttpString;
     692: invokevirtual #100                // Method io/undertow/util/HttpString.equals:(Lio/undertow/util/HttpString;)Z
     695: ifeq          753
     698: aload         9
     700: ifnull        722
     703: aload         9
     705: invokevirtual #97                 // Method io/undertow/util/HeaderValues.size:()I
     708: ifeq          722
     711: aload         9
     713: invokevirtual #101                // Method io/undertow/util/HeaderValues.getFirst:()Ljava/lang/String;
     716: invokevirtual #102                // Method java/lang/String.isEmpty:()Z
     719: ifeq          753
     722: aload_0
     723: aload_0
     724: getfield      #3                  // Field connection:Lio/undertow/server/protocol/http/HttpServerConnection;
     727: invokevirtual #72                 // Method io/undertow/server/protocol/http/HttpServerConnection.getChannel:()Lorg/xnio/StreamConnection;
     730: getstatic     #98                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
     733: invokeinterface #103,  1          // InterfaceMethod io/undertow/UndertowMessages.noHostInHttp11Request:()Ljava/io/IOException;
     738: invokevirtual #73                 // Method sendBadRequestAndClose:(Lorg/xnio/StreamConnection;Ljava/lang/Throwable;)V
     741: iload         5
     743: ifeq          752
     746: aload_3
     747: invokeinterface #58,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
     752: return
     753: aload         8
     755: invokevirtual #94                 // Method io/undertow/server/HttpServerExchange.getRequestHeaders:()Lio/undertow/util/HeaderMap;
     758: invokestatic  #104                // Method io/undertow/server/Connectors.areRequestHeadersValid:(Lio/undertow/util/HeaderMap;)Z
     761: ifne          795
     764: aload_0
     765: aload_0
     766: getfield      #3                  // Field connection:Lio/undertow/server/protocol/http/HttpServerConnection;
     769: invokevirtual #72                 // Method io/undertow/server/protocol/http/HttpServerConnection.getChannel:()Lorg/xnio/StreamConnection;
     772: getstatic     #98                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
     775: invokeinterface #105,  1          // InterfaceMethod io/undertow/UndertowMessages.invalidHeaders:()Ljava/lang/IllegalArgumentException;
     780: invokevirtual #73                 // Method sendBadRequestAndClose:(Lorg/xnio/StreamConnection;Ljava/lang/Throwable;)V
     783: iload         5
     785: ifeq          794
     788: aload_3
     789: invokeinterface #58,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
     794: return
     795: aload_0
     796: getfield      #3                  // Field connection:Lio/undertow/server/protocol/http/HttpServerConnection;
     799: invokevirtual #106                // Method io/undertow/server/protocol/http/HttpServerConnection.getRootHandler:()Lio/undertow/server/HttpHandler;
     802: aload         8
     804: invokestatic  #107                // Method io/undertow/server/Connectors.executeRootHandler:(Lio/undertow/server/HttpHandler;Lio/undertow/server/HttpServerExchange;)V
     807: iload         5
     809: ifeq          864
     812: aload_3
     813: invokeinterface #58,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
     818: goto          864
     821: astore        6
     823: aload_0
     824: aload_0
     825: getfield      #3                  // Field connection:Lio/undertow/server/protocol/http/HttpServerConnection;
     828: invokevirtual #72                 // Method io/undertow/server/protocol/http/HttpServerConnection.getChannel:()Lorg/xnio/StreamConnection;
     831: aload         6
     833: invokevirtual #73                 // Method sendBadRequestAndClose:(Lorg/xnio/StreamConnection;Ljava/lang/Throwable;)V
     836: iload         5
     838: ifeq          847
     841: aload_3
     842: invokeinterface #58,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
     847: return
     848: astore        10
     850: iload         5
     852: ifeq          861
     855: aload_3
     856: invokeinterface #58,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
     861: aload         10
     863: athrow
     864: return
    Exception table:
       from    to  target type
          99   107   110   Class java/io/IOException
          86   131   821   Class java/lang/Throwable
         143   181   821   Class java/lang/Throwable
         193   351   821   Class java/lang/Throwable
         363   473   821   Class java/lang/Throwable
         485   563   821   Class java/lang/Throwable
         575   665   821   Class java/lang/Throwable
         677   741   821   Class java/lang/Throwable
         753   783   821   Class java/lang/Throwable
         795   807   821   Class java/lang/Throwable
          86   131   848   any
         143   181   848   any
         193   351   848   any
         363   473   848   any
         485   563   848   any
         575   665   848   any
         677   741   848   any
         753   783   848   any
         795   807   848   any
         821   836   848   any
         848   850   848   any

  private boolean handleHttp2PriorKnowledge(io.undertow.connector.PooledByteBuffer, io.undertow.server.HttpServerExchange) throws java.io.IOException;
    Code:
       0: aload_2
       1: invokevirtual #109                // Method io/undertow/server/HttpServerExchange.getRequestMethod:()Lio/undertow/util/HttpString;
       4: getstatic     #110                // Field PRI:Lio/undertow/util/HttpString;
       7: invokevirtual #100                // Method io/undertow/util/HttpString.equals:(Lio/undertow/util/HttpString;)Z
      10: ifeq          48
      13: aload_0
      14: getfield      #3                  // Field connection:Lio/undertow/server/protocol/http/HttpServerConnection;
      17: invokevirtual #6                  // Method io/undertow/server/protocol/http/HttpServerConnection.getUndertowOptions:()Lorg/xnio/OptionMap;
      20: getstatic     #111                // Field io/undertow/UndertowOptions.ENABLE_HTTP2:Lorg/xnio/Option;
      23: iconst_0
      24: invokevirtual #18                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;Z)Z
      27: ifeq          48
      30: aload_0
      31: aload_0
      32: getfield      #3                  // Field connection:Lio/undertow/server/protocol/http/HttpServerConnection;
      35: invokevirtual #72                 // Method io/undertow/server/protocol/http/HttpServerConnection.getChannel:()Lorg/xnio/StreamConnection;
      38: aload_0
      39: getfield      #3                  // Field connection:Lio/undertow/server/protocol/http/HttpServerConnection;
      42: aload_1
      43: invokevirtual #112                // Method handleHttp2PriorKnowledge:(Lorg/xnio/StreamConnection;Lio/undertow/server/protocol/http/HttpServerConnection;Lio/undertow/connector/PooledByteBuffer;)V
      46: iconst_0
      47: ireturn
      48: aload_0
      49: aload_0
      50: getfield      #3                  // Field connection:Lio/undertow/server/protocol/http/HttpServerConnection;
      53: invokevirtual #72                 // Method io/undertow/server/protocol/http/HttpServerConnection.getChannel:()Lorg/xnio/StreamConnection;
      56: new           #54                 // class java/io/IOException
      59: dup
      60: invokespecial #91                 // Method java/io/IOException."<init>":()V
      63: invokevirtual #73                 // Method sendBadRequestAndClose:(Lorg/xnio/StreamConnection;Ljava/lang/Throwable;)V
      66: iconst_1
      67: ireturn

  private void handleFailedRead(org.xnio.conduits.ConduitStreamSourceChannel, int);
    Code:
       0: iload_2
       1: ifne          16
       4: aload_1
       5: aload_0
       6: invokevirtual #113                // Method org/xnio/conduits/ConduitStreamSourceChannel.setReadListener:(Lorg/xnio/ChannelListener;)V
       9: aload_1
      10: invokevirtual #114                // Method org/xnio/conduits/ConduitStreamSourceChannel.resumeReads:()V
      13: goto          28
      16: iload_2
      17: iconst_m1
      18: if_icmpne     28
      21: aload_0
      22: getfield      #3                  // Field connection:Lio/undertow/server/protocol/http/HttpServerConnection;
      25: invokestatic  #48                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
      28: return

  private void sendBadRequestAndClose(org.xnio.StreamConnection, java.lang.Throwable);
    Code:
       0: getstatic     #55                 // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
       3: aload_2
       4: invokeinterface #115,  2          // InterfaceMethod io/undertow/UndertowLogger.failedToParseRequest:(Ljava/lang/Throwable;)V
       9: aload_1
      10: invokevirtual #116                // Method org/xnio/StreamConnection.getSourceChannel:()Lorg/xnio/conduits/ConduitStreamSourceChannel;
      13: invokevirtual #40                 // Method org/xnio/conduits/ConduitStreamSourceChannel.suspendReads:()V
      16: new           #117                // class io/undertow/server/protocol/http/HttpReadListener$1
      19: dup
      20: aload_0
      21: ldc           #119                // String HTTP/1.1 400 Bad Request\r\nContent-Length: 0\r\nConnection: close\r\n\r\n
      23: aload_1
      24: invokespecial #120                // Method io/undertow/server/protocol/http/HttpReadListener$1."<init>":(Lio/undertow/server/protocol/http/HttpReadListener;Ljava/lang/String;Lorg/xnio/StreamConnection;)V
      27: aload_1
      28: invokevirtual #121                // Method org/xnio/StreamConnection.getSinkChannel:()Lorg/xnio/conduits/ConduitStreamSinkChannel;
      31: invokevirtual #122                // Method io/undertow/server/protocol/http/HttpReadListener$1.setup:(Lorg/xnio/channels/StreamSinkChannel;)V
      34: return

  public void exchangeComplete(io.undertow.server.HttpServerExchange);
    Code:
       0: aload_0
       1: getfield      #3                  // Field connection:Lio/undertow/server/protocol/http/HttpServerConnection;
       4: invokevirtual #123                // Method io/undertow/server/protocol/http/HttpServerConnection.clearChannel:()V
       7: aload_0
       8: getfield      #3                  // Field connection:Lio/undertow/server/protocol/http/HttpServerConnection;
      11: aconst_null
      12: invokevirtual #36                 // Method io/undertow/server/protocol/http/HttpServerConnection.setCurrentExchange:(Lio/undertow/server/HttpServerExchange;)V
      15: aload_0
      16: getfield      #3                  // Field connection:Lio/undertow/server/protocol/http/HttpServerConnection;
      19: astore_2
      20: aload_1
      21: invokevirtual #124                // Method io/undertow/server/HttpServerExchange.isPersistent:()Z
      24: ifeq          327
      27: aload_0
      28: aload_1
      29: invokevirtual #125                // Method isUpgradeOrConnect:(Lio/undertow/server/HttpServerExchange;)Z
      32: ifne          327
      35: aload_2
      36: invokevirtual #72                 // Method io/undertow/server/protocol/http/HttpServerConnection.getChannel:()Lorg/xnio/StreamConnection;
      39: astore_3
      40: aload_2
      41: invokevirtual #43                 // Method io/undertow/server/protocol/http/HttpServerConnection.getExtraBytes:()Lio/undertow/connector/PooledByteBuffer;
      44: ifnonnull     185
      47: aload_1
      48: invokevirtual #126                // Method io/undertow/server/HttpServerExchange.isInIoThread:()Z
      51: ifeq          84
      54: aload_0
      55: invokevirtual #127                // Method newRequest:()V
      58: aload_3
      59: invokevirtual #116                // Method org/xnio/StreamConnection.getSourceChannel:()Lorg/xnio/conduits/ConduitStreamSourceChannel;
      62: aload_0
      63: invokevirtual #113                // Method org/xnio/conduits/ConduitStreamSourceChannel.setReadListener:(Lorg/xnio/ChannelListener;)V
      66: aload_3
      67: invokevirtual #116                // Method org/xnio/StreamConnection.getSourceChannel:()Lorg/xnio/conduits/ConduitStreamSourceChannel;
      70: invokevirtual #114                // Method org/xnio/conduits/ConduitStreamSourceChannel.resumeReads:()V
      73: getstatic     #37                 // Field requestStateUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      76: aload_0
      77: iconst_0
      78: invokevirtual #41                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.set:(Ljava/lang/Object;I)V
      81: goto          324
      84: aload_2
      85: invokevirtual #44                 // Method io/undertow/server/protocol/http/HttpServerConnection.getOriginalSourceConduit:()Lorg/xnio/conduits/StreamSourceConduit;
      88: invokeinterface #45,  1           // InterfaceMethod org/xnio/conduits/StreamSourceConduit.isReadShutdown:()Z
      93: ifne          108
      96: aload_2
      97: invokevirtual #46                 // Method io/undertow/server/protocol/http/HttpServerConnection.getOriginalSinkConduit:()Lorg/xnio/conduits/StreamSinkConduit;
     100: invokeinterface #47,  1           // InterfaceMethod org/xnio/conduits/StreamSinkConduit.isWriteShutdown:()Z
     105: ifeq          127
     108: aload_3
     109: invokevirtual #116                // Method org/xnio/StreamConnection.getSourceChannel:()Lorg/xnio/conduits/ConduitStreamSourceChannel;
     112: invokevirtual #40                 // Method org/xnio/conduits/ConduitStreamSourceChannel.suspendReads:()V
     115: aload_3
     116: invokevirtual #121                // Method org/xnio/StreamConnection.getSinkChannel:()Lorg/xnio/conduits/ConduitStreamSinkChannel;
     119: invokevirtual #128                // Method org/xnio/conduits/ConduitStreamSinkChannel.suspendWrites:()V
     122: aload_2
     123: invokestatic  #48                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
     126: return
     127: getstatic     #37                 // Field requestStateUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     130: aload_0
     131: iconst_1
     132: iconst_2
     133: invokevirtual #39                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
     136: ifeq          84
     139: aload_0
     140: invokevirtual #127                // Method newRequest:()V
     143: aload_3
     144: invokevirtual #116                // Method org/xnio/StreamConnection.getSourceChannel:()Lorg/xnio/conduits/ConduitStreamSourceChannel;
     147: aload_0
     148: invokevirtual #113                // Method org/xnio/conduits/ConduitStreamSourceChannel.setReadListener:(Lorg/xnio/ChannelListener;)V
     151: aload_3
     152: invokevirtual #116                // Method org/xnio/StreamConnection.getSourceChannel:()Lorg/xnio/conduits/ConduitStreamSourceChannel;
     155: invokevirtual #114                // Method org/xnio/conduits/ConduitStreamSourceChannel.resumeReads:()V
     158: getstatic     #37                 // Field requestStateUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     161: aload_0
     162: iconst_0
     163: invokevirtual #41                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.set:(Ljava/lang/Object;I)V
     166: goto          182
     169: astore        4
     171: getstatic     #37                 // Field requestStateUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     174: aload_0
     175: iconst_0
     176: invokevirtual #41                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.set:(Ljava/lang/Object;I)V
     179: aload         4
     181: athrow
     182: goto          324
     185: aload_1
     186: invokevirtual #126                // Method io/undertow/server/HttpServerExchange.isInIoThread:()Z
     189: ifeq          215
     192: getstatic     #37                 // Field requestStateUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     195: aload_0
     196: iconst_0
     197: invokevirtual #41                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.set:(Ljava/lang/Object;I)V
     200: aload_0
     201: invokevirtual #127                // Method newRequest:()V
     204: aload_3
     205: invokevirtual #129                // Method org/xnio/StreamConnection.getIoThread:()Lorg/xnio/XnioIoThread;
     208: aload_0
     209: invokevirtual #130                // Method org/xnio/XnioIoThread.execute:(Ljava/lang/Runnable;)V
     212: goto          324
     215: aload_2
     216: invokevirtual #46                 // Method io/undertow/server/protocol/http/HttpServerConnection.getOriginalSinkConduit:()Lorg/xnio/conduits/StreamSinkConduit;
     219: invokeinterface #47,  1           // InterfaceMethod org/xnio/conduits/StreamSinkConduit.isWriteShutdown:()Z
     224: ifeq          246
     227: aload_3
     228: invokevirtual #116                // Method org/xnio/StreamConnection.getSourceChannel:()Lorg/xnio/conduits/ConduitStreamSourceChannel;
     231: invokevirtual #40                 // Method org/xnio/conduits/ConduitStreamSourceChannel.suspendReads:()V
     234: aload_3
     235: invokevirtual #121                // Method org/xnio/StreamConnection.getSinkChannel:()Lorg/xnio/conduits/ConduitStreamSinkChannel;
     238: invokevirtual #128                // Method org/xnio/conduits/ConduitStreamSinkChannel.suspendWrites:()V
     241: aload_2
     242: invokestatic  #48                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
     245: return
     246: getstatic     #37                 // Field requestStateUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     249: aload_0
     250: iconst_1
     251: iconst_2
     252: invokevirtual #39                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
     255: ifeq          215
     258: aload_0
     259: invokevirtual #127                // Method newRequest:()V
     262: aload_3
     263: invokevirtual #116                // Method org/xnio/StreamConnection.getSourceChannel:()Lorg/xnio/conduits/ConduitStreamSourceChannel;
     266: invokevirtual #40                 // Method org/xnio/conduits/ConduitStreamSourceChannel.suspendReads:()V
     269: getstatic     #37                 // Field requestStateUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     272: aload_0
     273: iconst_0
     274: invokevirtual #41                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.set:(Ljava/lang/Object;I)V
     277: goto          293
     280: astore        5
     282: getstatic     #37                 // Field requestStateUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     285: aload_0
     286: iconst_0
     287: invokevirtual #41                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.set:(Ljava/lang/Object;I)V
     290: aload         5
     292: athrow
     293: goto          296
     296: aload_1
     297: invokevirtual #131                // Method io/undertow/server/HttpServerExchange.getDispatchExecutor:()Ljava/util/concurrent/Executor;
     300: astore        4
     302: aload         4
     304: ifnonnull     316
     307: aload_1
     308: invokevirtual #132                // Method io/undertow/server/HttpServerExchange.getConnection:()Lio/undertow/server/ServerConnection;
     311: invokevirtual #133                // Method io/undertow/server/ServerConnection.getWorker:()Lorg/xnio/XnioWorker;
     314: astore        4
     316: aload         4
     318: aload_0
     319: invokeinterface #134,  2          // InterfaceMethod java/util/concurrent/Executor.execute:(Ljava/lang/Runnable;)V
     324: goto          518
     327: aload_1
     328: invokevirtual #124                // Method io/undertow/server/HttpServerExchange.isPersistent:()Z
     331: ifne          373
     334: aload_2
     335: invokevirtual #43                 // Method io/undertow/server/protocol/http/HttpServerConnection.getExtraBytes:()Lio/undertow/connector/PooledByteBuffer;
     338: ifnull        355
     341: aload_2
     342: invokevirtual #43                 // Method io/undertow/server/protocol/http/HttpServerConnection.getExtraBytes:()Lio/undertow/connector/PooledByteBuffer;
     345: invokeinterface #58,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
     350: aload_2
     351: aconst_null
     352: invokevirtual #62                 // Method io/undertow/server/protocol/http/HttpServerConnection.setExtraBytes:(Lio/undertow/connector/PooledByteBuffer;)V
     355: aload_2
     356: invokevirtual #72                 // Method io/undertow/server/protocol/http/HttpServerConnection.getChannel:()Lorg/xnio/StreamConnection;
     359: iconst_1
     360: anewarray     #135                // class java/io/Closeable
     363: dup
     364: iconst_0
     365: aload_2
     366: aastore
     367: invokestatic  #136                // Method io/undertow/util/ConnectionUtils.cleanClose:(Lorg/xnio/StreamConnection;[Ljava/io/Closeable;)V
     370: goto          518
     373: aload_2
     374: invokevirtual #43                 // Method io/undertow/server/protocol/http/HttpServerConnection.getExtraBytes:()Lio/undertow/connector/PooledByteBuffer;
     377: ifnull        408
     380: aload_2
     381: invokevirtual #72                 // Method io/undertow/server/protocol/http/HttpServerConnection.getChannel:()Lorg/xnio/StreamConnection;
     384: invokevirtual #116                // Method org/xnio/StreamConnection.getSourceChannel:()Lorg/xnio/conduits/ConduitStreamSourceChannel;
     387: new           #137                // class io/undertow/conduits/ReadDataStreamSourceConduit
     390: dup
     391: aload_2
     392: invokevirtual #72                 // Method io/undertow/server/protocol/http/HttpServerConnection.getChannel:()Lorg/xnio/StreamConnection;
     395: invokevirtual #116                // Method org/xnio/StreamConnection.getSourceChannel:()Lorg/xnio/conduits/ConduitStreamSourceChannel;
     398: invokevirtual #138                // Method org/xnio/conduits/ConduitStreamSourceChannel.getConduit:()Lorg/xnio/conduits/StreamSourceConduit;
     401: aload_2
     402: invokespecial #139                // Method io/undertow/conduits/ReadDataStreamSourceConduit."<init>":(Lorg/xnio/conduits/StreamSourceConduit;Lio/undertow/server/AbstractServerConnection;)V
     405: invokevirtual #140                // Method org/xnio/conduits/ConduitStreamSourceChannel.setConduit:(Lorg/xnio/conduits/StreamSourceConduit;)V
     408: aload_2
     409: invokevirtual #72                 // Method io/undertow/server/protocol/http/HttpServerConnection.getChannel:()Lorg/xnio/StreamConnection;
     412: invokevirtual #121                // Method org/xnio/StreamConnection.getSinkChannel:()Lorg/xnio/conduits/ConduitStreamSinkChannel;
     415: invokevirtual #141                // Method org/xnio/conduits/ConduitStreamSinkChannel.flush:()Z
     418: ifne          470
     421: aload_2
     422: invokevirtual #72                 // Method io/undertow/server/protocol/http/HttpServerConnection.getChannel:()Lorg/xnio/StreamConnection;
     425: invokevirtual #121                // Method org/xnio/StreamConnection.getSinkChannel:()Lorg/xnio/conduits/ConduitStreamSinkChannel;
     428: new           #142                // class io/undertow/server/protocol/http/HttpReadListener$2
     431: dup
     432: aload_0
     433: aload_2
     434: aload_1
     435: invokespecial #143                // Method io/undertow/server/protocol/http/HttpReadListener$2."<init>":(Lio/undertow/server/protocol/http/HttpReadListener;Lio/undertow/server/protocol/http/HttpServerConnection;Lio/undertow/server/HttpServerExchange;)V
     438: new           #144                // class io/undertow/util/ClosingChannelExceptionHandler
     441: dup
     442: iconst_1
     443: anewarray     #135                // class java/io/Closeable
     446: dup
     447: iconst_0
     448: aload_2
     449: aastore
     450: invokespecial #145                // Method io/undertow/util/ClosingChannelExceptionHandler."<init>":([Ljava/io/Closeable;)V
     453: invokestatic  #146                // Method org/xnio/ChannelListeners.flushingChannelListener:(Lorg/xnio/ChannelListener;Lorg/xnio/ChannelExceptionHandler;)Lorg/xnio/ChannelListener;
     456: invokevirtual #147                // Method org/xnio/conduits/ConduitStreamSinkChannel.setWriteListener:(Lorg/xnio/ChannelListener;)V
     459: aload_2
     460: invokevirtual #72                 // Method io/undertow/server/protocol/http/HttpServerConnection.getChannel:()Lorg/xnio/StreamConnection;
     463: invokevirtual #121                // Method org/xnio/StreamConnection.getSinkChannel:()Lorg/xnio/conduits/ConduitStreamSinkChannel;
     466: invokevirtual #148                // Method org/xnio/conduits/ConduitStreamSinkChannel.resumeWrites:()V
     469: return
     470: aload_2
     471: invokevirtual #149                // Method io/undertow/server/protocol/http/HttpServerConnection.getUpgradeListener:()Lio/undertow/server/HttpUpgradeListener;
     474: aload_2
     475: invokevirtual #72                 // Method io/undertow/server/protocol/http/HttpServerConnection.getChannel:()Lorg/xnio/StreamConnection;
     478: aload_1
     479: invokeinterface #150,  3          // InterfaceMethod io/undertow/server/HttpUpgradeListener.handleUpgrade:(Lorg/xnio/StreamConnection;Lio/undertow/server/HttpServerExchange;)V
     484: goto          518
     487: astore_3
     488: getstatic     #55                 // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
     491: aload_3
     492: invokeinterface #151,  2          // InterfaceMethod io/undertow/UndertowLogger.ioException:(Ljava/io/IOException;)V
     497: aload_2
     498: invokestatic  #48                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
     501: goto          518
     504: astore_3
     505: getstatic     #55                 // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
     508: aload_3
     509: invokeinterface #152,  2          // InterfaceMethod io/undertow/UndertowLogger.handleUnexpectedFailure:(Ljava/lang/Throwable;)V
     514: aload_2
     515: invokestatic  #48                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
     518: return
    Exception table:
       from    to  target type
         139   158   169   any
         169   171   169   any
         258   269   280   any
         280   282   280   any
         408   469   487   Class java/io/IOException
         470   484   487   Class java/io/IOException
         408   469   504   Class java/lang/Throwable
         470   484   504   Class java/lang/Throwable

  private boolean isUpgradeOrConnect(io.undertow.server.HttpServerExchange);
    Code:
       0: aload_1
       1: invokevirtual #153                // Method io/undertow/server/HttpServerExchange.isUpgrade:()Z
       4: ifne          33
       7: aload_1
       8: invokevirtual #109                // Method io/undertow/server/HttpServerExchange.getRequestMethod:()Lio/undertow/util/HttpString;
      11: getstatic     #154                // Field io/undertow/util/Methods.CONNECT:Lio/undertow/util/HttpString;
      14: invokevirtual #100                // Method io/undertow/util/HttpString.equals:(Lio/undertow/util/HttpString;)Z
      17: ifeq          37
      20: aload_1
      21: invokevirtual #132                // Method io/undertow/server/HttpServerExchange.getConnection:()Lio/undertow/server/ServerConnection;
      24: checkcast     #155                // class io/undertow/server/protocol/http/HttpServerConnection
      27: invokevirtual #156                // Method io/undertow/server/protocol/http/HttpServerConnection.isConnectHandled:()Z
      30: ifeq          37
      33: iconst_1
      34: goto          38
      37: iconst_0
      38: ireturn

  public void run();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field connection:Lio/undertow/server/protocol/http/HttpServerConnection;
       5: invokevirtual #72                 // Method io/undertow/server/protocol/http/HttpServerConnection.getChannel:()Lorg/xnio/StreamConnection;
       8: invokevirtual #116                // Method org/xnio/StreamConnection.getSourceChannel:()Lorg/xnio/conduits/ConduitStreamSourceChannel;
      11: invokevirtual #157                // Method handleEvent:(Lorg/xnio/conduits/ConduitStreamSourceChannel;)V
      14: return

  private void handleHttp2PriorKnowledge(org.xnio.StreamConnection, io.undertow.server.protocol.http.HttpServerConnection, io.undertow.connector.PooledByteBuffer) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokevirtual #116                // Method org/xnio/StreamConnection.getSourceChannel:()Lorg/xnio/conduits/ConduitStreamSourceChannel;
       4: astore        4
       6: getstatic     #158                // Field PRI_EXPECTED:[B
       9: arraylength
      10: newarray       byte
      12: astore        5
      14: aload         5
      16: invokestatic  #159                // Method java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;
      19: astore        6
      21: aload_3
      22: invokeinterface #51,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
      27: invokevirtual #68                 // Method java/nio/ByteBuffer.hasRemaining:()Z
      30: ifeq          71
      33: aload_3
      34: invokeinterface #51,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
      39: invokevirtual #68                 // Method java/nio/ByteBuffer.hasRemaining:()Z
      42: ifeq          71
      45: aload         6
      47: invokevirtual #68                 // Method java/nio/ByteBuffer.hasRemaining:()Z
      50: ifeq          71
      53: aload         6
      55: aload_3
      56: invokeinterface #51,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
      61: invokevirtual #160                // Method java/nio/ByteBuffer.get:()B
      64: invokevirtual #161                // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;
      67: pop
      68: goto          33
      71: aload_3
      72: invokeinterface #51,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
      77: invokevirtual #68                 // Method java/nio/ByteBuffer.hasRemaining:()Z
      80: ifeq          89
      83: aload_3
      84: astore        7
      86: goto          98
      89: aload_3
      90: invokeinterface #58,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
      95: aconst_null
      96: astore        7
      98: aload_0
      99: aload_1
     100: aload         6
     102: aload_2
     103: aload         7
     105: invokevirtual #162                // Method doHttp2PriRead:(Lorg/xnio/StreamConnection;Ljava/nio/ByteBuffer;Lio/undertow/server/protocol/http/HttpServerConnection;Lio/undertow/connector/PooledByteBuffer;)Z
     108: ifne          140
     111: aload         4
     113: invokevirtual #163                // Method org/xnio/conduits/ConduitStreamSourceChannel.getReadSetter:()Lorg/xnio/ChannelListener$Setter;
     116: new           #164                // class io/undertow/server/protocol/http/HttpReadListener$3
     119: dup
     120: aload_0
     121: aload_1
     122: aload         6
     124: aload_2
     125: aload         7
     127: invokespecial #165                // Method io/undertow/server/protocol/http/HttpReadListener$3."<init>":(Lio/undertow/server/protocol/http/HttpReadListener;Lorg/xnio/StreamConnection;Ljava/nio/ByteBuffer;Lio/undertow/server/protocol/http/HttpServerConnection;Lio/undertow/connector/PooledByteBuffer;)V
     130: invokeinterface #166,  2          // InterfaceMethod org/xnio/ChannelListener$Setter.set:(Lorg/xnio/ChannelListener;)V
     135: aload         4
     137: invokevirtual #114                // Method org/xnio/conduits/ConduitStreamSourceChannel.resumeReads:()V
     140: return

  private boolean doHttp2PriRead(org.xnio.StreamConnection, java.nio.ByteBuffer, io.undertow.server.protocol.http.HttpServerConnection, io.undertow.connector.PooledByteBuffer) throws java.io.IOException;
    Code:
       0: aload_2
       1: invokevirtual #68                 // Method java/nio/ByteBuffer.hasRemaining:()Z
       4: ifeq          34
       7: aload_1
       8: invokevirtual #116                // Method org/xnio/StreamConnection.getSourceChannel:()Lorg/xnio/conduits/ConduitStreamSourceChannel;
      11: aload_2
      12: invokevirtual #53                 // Method org/xnio/conduits/ConduitStreamSourceChannel.read:(Ljava/nio/ByteBuffer;)I
      15: istore        5
      17: iload         5
      19: iconst_m1
      20: if_icmpne     25
      23: iconst_1
      24: ireturn
      25: aload_2
      26: invokevirtual #68                 // Method java/nio/ByteBuffer.hasRemaining:()Z
      29: ifeq          34
      32: iconst_0
      33: ireturn
      34: aload_2
      35: invokevirtual #63                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;
      38: pop
      39: iconst_0
      40: istore        5
      42: iload         5
      44: getstatic     #158                // Field PRI_EXPECTED:[B
      47: arraylength
      48: if_icmpge     79
      51: aload_2
      52: invokevirtual #160                // Method java/nio/ByteBuffer.get:()B
      55: getstatic     #158                // Field PRI_EXPECTED:[B
      58: iload         5
      60: baload
      61: if_icmpeq     73
      64: getstatic     #98                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      67: invokeinterface #167,  1          // InterfaceMethod io/undertow/UndertowMessages.http2PriRequestFailed:()Ljava/io/IOException;
      72: athrow
      73: iinc          5, 1
      76: goto          42
      79: new           #168                // class io/undertow/protocols/http2/Http2Channel
      82: dup
      83: aload_1
      84: aconst_null
      85: aload_3
      86: invokevirtual #49                 // Method io/undertow/server/protocol/http/HttpServerConnection.getByteBufferPool:()Lio/undertow/connector/ByteBufferPool;
      89: aload         4
      91: iconst_0
      92: iconst_0
      93: iconst_0
      94: aload_3
      95: invokevirtual #6                  // Method io/undertow/server/protocol/http/HttpServerConnection.getUndertowOptions:()Lorg/xnio/OptionMap;
      98: invokespecial #169                // Method io/undertow/protocols/http2/Http2Channel."<init>":(Lorg/xnio/StreamConnection;Ljava/lang/String;Lio/undertow/connector/ByteBufferPool;Lio/undertow/connector/PooledByteBuffer;ZZZLorg/xnio/OptionMap;)V
     101: astore        5
     103: new           #170                // class io/undertow/server/protocol/http2/Http2ReceiveListener
     106: dup
     107: aload_3
     108: invokevirtual #106                // Method io/undertow/server/protocol/http/HttpServerConnection.getRootHandler:()Lio/undertow/server/HttpHandler;
     111: aload_3
     112: invokevirtual #6                  // Method io/undertow/server/protocol/http/HttpServerConnection.getUndertowOptions:()Lorg/xnio/OptionMap;
     115: aload_3
     116: invokevirtual #171                // Method io/undertow/server/protocol/http/HttpServerConnection.getBufferSize:()I
     119: aconst_null
     120: invokespecial #172                // Method io/undertow/server/protocol/http2/Http2ReceiveListener."<init>":(Lio/undertow/server/HttpHandler;Lorg/xnio/OptionMap;ILio/undertow/server/ConnectorStatisticsImpl;)V
     123: astore        6
     125: aload         5
     127: invokevirtual #173                // Method io/undertow/protocols/http2/Http2Channel.getReceiveSetter:()Lorg/xnio/ChannelListener$Setter;
     130: aload         6
     132: invokeinterface #166,  2          // InterfaceMethod org/xnio/ChannelListener$Setter.set:(Lorg/xnio/ChannelListener;)V
     137: aload         5
     139: invokevirtual #174                // Method io/undertow/protocols/http2/Http2Channel.resumeReceives:()V
     142: iconst_1
     143: ireturn

  public void handleEvent(java.nio.channels.Channel);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #175                // class org/xnio/conduits/ConduitStreamSourceChannel
       5: invokevirtual #157                // Method handleEvent:(Lorg/xnio/conduits/ConduitStreamSourceChannel;)V
       8: return

  static {};
    Code:
       0: new           #176                // class io/undertow/util/HttpString
       3: dup
       4: ldc           #177                // String PRI
       6: invokespecial #178                // Method io/undertow/util/HttpString."<init>":(Ljava/lang/String;)V
       9: putstatic     #110                // Field PRI:Lio/undertow/util/HttpString;
      12: bipush        6
      14: newarray       byte
      16: dup
      17: iconst_0
      18: bipush        83
      20: bastore
      21: dup
      22: iconst_1
      23: bipush        77
      25: bastore
      26: dup
      27: iconst_2
      28: bipush        13
      30: bastore
      31: dup
      32: iconst_3
      33: bipush        10
      35: bastore
      36: dup
      37: iconst_4
      38: bipush        13
      40: bastore
      41: dup
      42: iconst_5
      43: bipush        10
      45: bastore
      46: putstatic     #158                // Field PRI_EXPECTED:[B
      49: ldc           #118                // class io/undertow/server/protocol/http/HttpReadListener
      51: ldc           #179                // String requestState
      53: invokestatic  #180                // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      56: putstatic     #37                 // Field requestStateUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      59: return
}
