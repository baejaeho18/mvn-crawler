Compiled from "HttpServerConnection.java"
public final class io.undertow.server.protocol.http.HttpServerConnection extends io.undertow.server.AbstractServerConnection {
  private io.undertow.server.SSLSessionInfo sslSessionInfo;

  private io.undertow.server.protocol.http.HttpReadListener readListener;

  private io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit pipelineBuffer;

  private io.undertow.server.protocol.http.HttpResponseConduit responseConduit;

  private io.undertow.server.protocol.http.ServerFixedLengthStreamSinkConduit fixedLengthStreamSinkConduit;

  private io.undertow.conduits.ReadDataStreamSourceConduit readDataStreamSourceConduit;

  private io.undertow.server.HttpUpgradeListener upgradeListener;

  private boolean connectHandled;

  public io.undertow.server.protocol.http.HttpServerConnection(org.xnio.StreamConnection, io.undertow.connector.ByteBufferPool, io.undertow.server.HttpHandler, org.xnio.OptionMap, int, io.undertow.server.ConnectorStatisticsImpl);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: iload         5
       8: invokespecial #2                  // Method io/undertow/server/AbstractServerConnection."<init>":(Lorg/xnio/StreamConnection;Lio/undertow/connector/ByteBufferPool;Lio/undertow/server/HttpHandler;Lorg/xnio/OptionMap;I)V
      11: aload_1
      12: instanceof    #3                  // class org/xnio/channels/SslChannel
      15: ifeq          34
      18: aload_0
      19: new           #4                  // class io/undertow/server/ConnectionSSLSessionInfo
      22: dup
      23: aload_1
      24: checkcast     #3                  // class org/xnio/channels/SslChannel
      27: aload_0
      28: invokespecial #5                  // Method io/undertow/server/ConnectionSSLSessionInfo."<init>":(Lorg/xnio/channels/SslChannel;Lio/undertow/server/protocol/http/HttpServerConnection;)V
      31: putfield      #6                  // Field sslSessionInfo:Lio/undertow/server/SSLSessionInfo;
      34: aload_0
      35: new           #7                  // class io/undertow/server/protocol/http/HttpResponseConduit
      38: dup
      39: aload_1
      40: invokevirtual #8                  // Method org/xnio/StreamConnection.getSinkChannel:()Lorg/xnio/conduits/ConduitStreamSinkChannel;
      43: invokevirtual #9                  // Method org/xnio/conduits/ConduitStreamSinkChannel.getConduit:()Lorg/xnio/conduits/StreamSinkConduit;
      46: aload_2
      47: aload_0
      48: invokespecial #10                 // Method io/undertow/server/protocol/http/HttpResponseConduit."<init>":(Lorg/xnio/conduits/StreamSinkConduit;Lio/undertow/connector/ByteBufferPool;Lio/undertow/server/protocol/http/HttpServerConnection;)V
      51: putfield      #11                 // Field responseConduit:Lio/undertow/server/protocol/http/HttpResponseConduit;
      54: aload_0
      55: new           #12                 // class io/undertow/server/protocol/http/ServerFixedLengthStreamSinkConduit
      58: dup
      59: aload_0
      60: getfield      #11                 // Field responseConduit:Lio/undertow/server/protocol/http/HttpResponseConduit;
      63: iconst_0
      64: iconst_0
      65: invokespecial #13                 // Method io/undertow/server/protocol/http/ServerFixedLengthStreamSinkConduit."<init>":(Lorg/xnio/conduits/StreamSinkConduit;ZZ)V
      68: putfield      #14                 // Field fixedLengthStreamSinkConduit:Lio/undertow/server/protocol/http/ServerFixedLengthStreamSinkConduit;
      71: aload_0
      72: new           #15                 // class io/undertow/conduits/ReadDataStreamSourceConduit
      75: dup
      76: aload_1
      77: invokevirtual #16                 // Method org/xnio/StreamConnection.getSourceChannel:()Lorg/xnio/conduits/ConduitStreamSourceChannel;
      80: invokevirtual #17                 // Method org/xnio/conduits/ConduitStreamSourceChannel.getConduit:()Lorg/xnio/conduits/StreamSourceConduit;
      83: aload_0
      84: invokespecial #18                 // Method io/undertow/conduits/ReadDataStreamSourceConduit."<init>":(Lorg/xnio/conduits/StreamSourceConduit;Lio/undertow/server/AbstractServerConnection;)V
      87: putfield      #19                 // Field readDataStreamSourceConduit:Lio/undertow/conduits/ReadDataStreamSourceConduit;
      90: aload_0
      91: new           #20                 // class io/undertow/server/protocol/http/HttpServerConnection$1
      94: dup
      95: aload_0
      96: aload         6
      98: invokespecial #21                 // Method io/undertow/server/protocol/http/HttpServerConnection$1."<init>":(Lio/undertow/server/protocol/http/HttpServerConnection;Lio/undertow/server/ConnectorStatisticsImpl;)V
     101: invokevirtual #22                 // Method addCloseListener:(Lio/undertow/server/ServerConnection$CloseListener;)V
     104: return

  public io.undertow.server.HttpServerExchange sendOutOfBandResponse(io.undertow.server.HttpServerExchange);
    Code:
       0: aload_1
       1: ifnull        11
       4: aload_1
       5: invokestatic  #23                 // Method io/undertow/server/protocol/http/HttpContinue.requiresContinueResponse:(Lio/undertow/server/HttpServerExchange;)Z
       8: ifne          20
      11: getstatic     #24                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      14: invokeinterface #25,  1           // InterfaceMethod io/undertow/UndertowMessages.outOfBandResponseOnlyAllowedFor100Continue:()Ljava/lang/IllegalArgumentException;
      19: athrow
      20: aload_0
      21: invokevirtual #26                 // Method resetChannel:()Lio/undertow/server/AbstractServerConnection$ConduitState;
      24: astore_2
      25: new           #27                 // class io/undertow/server/HttpServerExchange
      28: dup
      29: aload_0
      30: invokespecial #28                 // Method io/undertow/server/HttpServerExchange."<init>":(Lio/undertow/server/ServerConnection;)V
      33: astore_3
      34: aload_1
      35: invokevirtual #29                 // Method io/undertow/server/HttpServerExchange.getRequestHeaders:()Lio/undertow/util/HeaderMap;
      38: invokevirtual #30                 // Method io/undertow/util/HeaderMap.getHeaderNames:()Ljava/util/Collection;
      41: invokeinterface #31,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      46: astore        4
      48: aload         4
      50: invokeinterface #32,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      55: ifeq          92
      58: aload         4
      60: invokeinterface #33,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      65: checkcast     #34                 // class io/undertow/util/HttpString
      68: astore        5
      70: aload_3
      71: invokevirtual #29                 // Method io/undertow/server/HttpServerExchange.getRequestHeaders:()Lio/undertow/util/HeaderMap;
      74: aload         5
      76: aload_1
      77: invokevirtual #29                 // Method io/undertow/server/HttpServerExchange.getRequestHeaders:()Lio/undertow/util/HeaderMap;
      80: aload         5
      82: invokevirtual #35                 // Method io/undertow/util/HeaderMap.get:(Lio/undertow/util/HttpString;)Lio/undertow/util/HeaderValues;
      85: invokevirtual #36                 // Method io/undertow/util/HeaderMap.putAll:(Lio/undertow/util/HttpString;Ljava/util/Collection;)Lio/undertow/util/HeaderMap;
      88: pop
      89: goto          48
      92: aload_3
      93: aload_1
      94: invokevirtual #37                 // Method io/undertow/server/HttpServerExchange.getProtocol:()Lio/undertow/util/HttpString;
      97: invokevirtual #38                 // Method io/undertow/server/HttpServerExchange.setProtocol:(Lio/undertow/util/HttpString;)Lio/undertow/server/HttpServerExchange;
     100: pop
     101: aload_3
     102: aload_1
     103: invokevirtual #39                 // Method io/undertow/server/HttpServerExchange.getRequestMethod:()Lio/undertow/util/HttpString;
     106: invokevirtual #40                 // Method io/undertow/server/HttpServerExchange.setRequestMethod:(Lio/undertow/util/HttpString;)Lio/undertow/server/HttpServerExchange;
     109: pop
     110: aload_1
     111: aload_1
     112: invokevirtual #41                 // Method io/undertow/server/HttpServerExchange.getRequestURI:()Ljava/lang/String;
     115: aload_1
     116: invokevirtual #42                 // Method io/undertow/server/HttpServerExchange.isHostIncludedInRequestURI:()Z
     119: invokevirtual #43                 // Method io/undertow/server/HttpServerExchange.setRequestURI:(Ljava/lang/String;Z)Lio/undertow/server/HttpServerExchange;
     122: pop
     123: aload_1
     124: aload_1
     125: invokevirtual #44                 // Method io/undertow/server/HttpServerExchange.getRequestPath:()Ljava/lang/String;
     128: invokevirtual #45                 // Method io/undertow/server/HttpServerExchange.setRequestPath:(Ljava/lang/String;)Lio/undertow/server/HttpServerExchange;
     131: pop
     132: aload_1
     133: aload_1
     134: invokevirtual #46                 // Method io/undertow/server/HttpServerExchange.getRelativePath:()Ljava/lang/String;
     137: invokevirtual #47                 // Method io/undertow/server/HttpServerExchange.setRelativePath:(Ljava/lang/String;)Lio/undertow/server/HttpServerExchange;
     140: pop
     141: aload_3
     142: invokevirtual #29                 // Method io/undertow/server/HttpServerExchange.getRequestHeaders:()Lio/undertow/util/HeaderMap;
     145: getstatic     #48                 // Field io/undertow/util/Headers.CONNECTION:Lio/undertow/util/HttpString;
     148: getstatic     #49                 // Field io/undertow/util/Headers.KEEP_ALIVE:Lio/undertow/util/HttpString;
     151: invokevirtual #50                 // Method io/undertow/util/HttpString.toString:()Ljava/lang/String;
     154: invokevirtual #51                 // Method io/undertow/util/HeaderMap.put:(Lio/undertow/util/HttpString;Ljava/lang/String;)Lio/undertow/util/HeaderMap;
     157: pop
     158: aload_3
     159: invokevirtual #29                 // Method io/undertow/server/HttpServerExchange.getRequestHeaders:()Lio/undertow/util/HeaderMap;
     162: getstatic     #52                 // Field io/undertow/util/Headers.CONTENT_LENGTH:Lio/undertow/util/HttpString;
     165: lconst_0
     166: invokevirtual #53                 // Method io/undertow/util/HeaderMap.put:(Lio/undertow/util/HttpString;J)Lio/undertow/util/HeaderMap;
     169: pop
     170: aload_3
     171: iconst_1
     172: invokevirtual #54                 // Method io/undertow/server/HttpServerExchange.setPersistent:(Z)Lio/undertow/server/HttpServerExchange;
     175: pop
     176: aload_3
     177: invokestatic  #55                 // Method io/undertow/server/Connectors.terminateRequest:(Lio/undertow/server/HttpServerExchange;)V
     180: aload_3
     181: new           #56                 // class io/undertow/server/protocol/http/HttpServerConnection$2
     184: dup
     185: aload_0
     186: invokespecial #57                 // Method io/undertow/server/protocol/http/HttpServerConnection$2."<init>":(Lio/undertow/server/protocol/http/HttpServerConnection;)V
     189: invokevirtual #58                 // Method io/undertow/server/HttpServerExchange.addResponseWrapper:(Lio/undertow/server/ConduitWrapper;)Lio/undertow/server/HttpServerExchange;
     192: pop
     193: aload_0
     194: getfield      #59                 // Field channel:Lorg/xnio/StreamConnection;
     197: invokevirtual #16                 // Method org/xnio/StreamConnection.getSourceChannel:()Lorg/xnio/conduits/ConduitStreamSourceChannel;
     200: aload_2
     201: invokestatic  #60                 // Method source:(Lio/undertow/server/AbstractServerConnection$ConduitState;)Lorg/xnio/conduits/StreamSourceConduit;
     204: invokevirtual #61                 // Method org/xnio/conduits/ConduitStreamSourceChannel.setConduit:(Lorg/xnio/conduits/StreamSourceConduit;)V
     207: aload_3
     208: new           #62                 // class io/undertow/server/protocol/http/HttpServerConnection$3
     211: dup
     212: aload_0
     213: aload_2
     214: invokespecial #63                 // Method io/undertow/server/protocol/http/HttpServerConnection$3."<init>":(Lio/undertow/server/protocol/http/HttpServerConnection;Lio/undertow/server/AbstractServerConnection$ConduitState;)V
     217: invokevirtual #64                 // Method io/undertow/server/HttpServerExchange.addExchangeCompleteListener:(Lio/undertow/server/ExchangeCompletionListener;)Lio/undertow/server/HttpServerExchange;
     220: pop
     221: aload_3
     222: areturn

  public boolean isContinueResponseSupported();
    Code:
       0: iconst_1
       1: ireturn

  public void terminateRequestChannel(io.undertow.server.HttpServerExchange);
    Code:
       0: aload_1
       1: invokevirtual #65                 // Method io/undertow/server/HttpServerExchange.isPersistent:()Z
       4: ifne          17
       7: aload_0
       8: invokevirtual #66                 // Method getChannel:()Lorg/xnio/StreamConnection;
      11: invokevirtual #16                 // Method org/xnio/StreamConnection.getSourceChannel:()Lorg/xnio/conduits/ConduitStreamSourceChannel;
      14: invokestatic  #67                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
      17: return

  public void ungetRequestBytes(io.undertow.connector.PooledByteBuffer);
    Code:
       0: aload_0
       1: invokevirtual #68                 // Method getExtraBytes:()Lio/undertow/connector/PooledByteBuffer;
       4: ifnonnull     15
       7: aload_0
       8: aload_1
       9: invokevirtual #69                 // Method setExtraBytes:(Lio/undertow/connector/PooledByteBuffer;)V
      12: goto          166
      15: aload_0
      16: invokevirtual #68                 // Method getExtraBytes:()Lio/undertow/connector/PooledByteBuffer;
      19: astore_2
      20: aload_2
      21: invokeinterface #70,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
      26: astore_3
      27: aload_1
      28: invokeinterface #70,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
      33: astore        4
      35: aload         4
      37: invokevirtual #71                 // Method java/nio/ByteBuffer.limit:()I
      40: aload         4
      42: invokevirtual #72                 // Method java/nio/ByteBuffer.remaining:()I
      45: isub
      46: aload_3
      47: invokevirtual #72                 // Method java/nio/ByteBuffer.remaining:()I
      50: if_icmple     86
      53: aload         4
      55: invokevirtual #73                 // Method java/nio/ByteBuffer.compact:()Ljava/nio/ByteBuffer;
      58: pop
      59: aload         4
      61: aload_3
      62: invokevirtual #74                 // Method java/nio/ByteBuffer.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;
      65: pop
      66: aload         4
      68: invokevirtual #75                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;
      71: pop
      72: aload_2
      73: invokeinterface #76,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
      78: aload_0
      79: aload_1
      80: invokevirtual #69                 // Method setExtraBytes:(Lio/undertow/connector/PooledByteBuffer;)V
      83: goto          166
      86: aload         4
      88: invokevirtual #72                 // Method java/nio/ByteBuffer.remaining:()I
      91: aload_3
      92: invokevirtual #72                 // Method java/nio/ByteBuffer.remaining:()I
      95: iadd
      96: newarray       byte
      98: astore        5
     100: aload         4
     102: invokevirtual #72                 // Method java/nio/ByteBuffer.remaining:()I
     105: istore        6
     107: aload         4
     109: aload         5
     111: iconst_0
     112: aload         4
     114: invokevirtual #72                 // Method java/nio/ByteBuffer.remaining:()I
     117: invokevirtual #77                 // Method java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;
     120: pop
     121: aload_3
     122: aload         5
     124: iload         6
     126: aload_3
     127: invokevirtual #72                 // Method java/nio/ByteBuffer.remaining:()I
     130: invokevirtual #77                 // Method java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;
     133: pop
     134: aload_2
     135: invokeinterface #76,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
     140: aload_1
     141: invokeinterface #76,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
     146: aload         5
     148: invokestatic  #78                 // Method java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;
     151: astore        7
     153: aload_0
     154: new           #79                 // class io/undertow/util/ImmediatePooledByteBuffer
     157: dup
     158: aload         7
     160: invokespecial #80                 // Method io/undertow/util/ImmediatePooledByteBuffer."<init>":(Ljava/nio/ByteBuffer;)V
     163: invokevirtual #69                 // Method setExtraBytes:(Lio/undertow/connector/PooledByteBuffer;)V
     166: return

  public io.undertow.server.SSLSessionInfo getSslSessionInfo();
    Code:
       0: aload_0
       1: getfield      #6                  // Field sslSessionInfo:Lio/undertow/server/SSLSessionInfo;
       4: areturn

  public void setSslSessionInfo(io.undertow.server.SSLSessionInfo);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #6                  // Field sslSessionInfo:Lio/undertow/server/SSLSessionInfo;
       5: return

  public javax.net.ssl.SSLSession getSslSession();
    Code:
       0: aload_0
       1: getfield      #59                 // Field channel:Lorg/xnio/StreamConnection;
       4: instanceof    #3                  // class org/xnio/channels/SslChannel
       7: ifeq          23
      10: aload_0
      11: getfield      #59                 // Field channel:Lorg/xnio/StreamConnection;
      14: checkcast     #3                  // class org/xnio/channels/SslChannel
      17: invokeinterface #81,  1           // InterfaceMethod org/xnio/channels/SslChannel.getSslSession:()Ljavax/net/ssl/SSLSession;
      22: areturn
      23: aconst_null
      24: areturn

  protected org.xnio.StreamConnection upgradeChannel();
    Code:
       0: aload_0
       1: invokevirtual #82                 // Method clearChannel:()V
       4: aload_0
       5: getfield      #83                 // Field extraBytes:Lio/undertow/connector/PooledByteBuffer;
       8: ifnull        39
      11: aload_0
      12: getfield      #59                 // Field channel:Lorg/xnio/StreamConnection;
      15: invokevirtual #16                 // Method org/xnio/StreamConnection.getSourceChannel:()Lorg/xnio/conduits/ConduitStreamSourceChannel;
      18: new           #15                 // class io/undertow/conduits/ReadDataStreamSourceConduit
      21: dup
      22: aload_0
      23: getfield      #59                 // Field channel:Lorg/xnio/StreamConnection;
      26: invokevirtual #16                 // Method org/xnio/StreamConnection.getSourceChannel:()Lorg/xnio/conduits/ConduitStreamSourceChannel;
      29: invokevirtual #17                 // Method org/xnio/conduits/ConduitStreamSourceChannel.getConduit:()Lorg/xnio/conduits/StreamSourceConduit;
      32: aload_0
      33: invokespecial #18                 // Method io/undertow/conduits/ReadDataStreamSourceConduit."<init>":(Lorg/xnio/conduits/StreamSourceConduit;Lio/undertow/server/AbstractServerConnection;)V
      36: invokevirtual #61                 // Method org/xnio/conduits/ConduitStreamSourceChannel.setConduit:(Lorg/xnio/conduits/StreamSourceConduit;)V
      39: aload_0
      40: getfield      #59                 // Field channel:Lorg/xnio/StreamConnection;
      43: areturn

  protected org.xnio.conduits.StreamSinkConduit getSinkConduit(io.undertow.server.HttpServerExchange, org.xnio.conduits.StreamSinkConduit);
    Code:
       0: aload_1
       1: invokevirtual #39                 // Method io/undertow/server/HttpServerExchange.getRequestMethod:()Lio/undertow/util/HttpString;
       4: getstatic     #84                 // Field io/undertow/util/Methods.CONNECT:Lio/undertow/util/HttpString;
       7: invokevirtual #85                 // Method io/undertow/util/HttpString.equals:(Lio/undertow/util/HttpString;)Z
      10: ifeq          39
      13: aload_0
      14: getfield      #86                 // Field connectHandled:Z
      17: ifne          39
      20: aload_1
      21: iconst_0
      22: invokevirtual #54                 // Method io/undertow/server/HttpServerExchange.setPersistent:(Z)Lio/undertow/server/HttpServerExchange;
      25: pop
      26: aload_1
      27: invokevirtual #87                 // Method io/undertow/server/HttpServerExchange.getResponseHeaders:()Lio/undertow/util/HeaderMap;
      30: getstatic     #48                 // Field io/undertow/util/Headers.CONNECTION:Lio/undertow/util/HttpString;
      33: ldc           #88                 // String close
      35: invokevirtual #51                 // Method io/undertow/util/HeaderMap.put:(Lio/undertow/util/HttpString;Ljava/lang/String;)Lio/undertow/util/HeaderMap;
      38: pop
      39: aload_1
      40: invokestatic  #89                 // Method io/undertow/server/protocol/http/HttpTransferEncoding.createSinkConduit:(Lio/undertow/server/HttpServerExchange;)Lorg/xnio/conduits/StreamSinkConduit;
      43: areturn

  protected boolean isUpgradeSupported();
    Code:
       0: iconst_1
       1: ireturn

  protected boolean isConnectSupported();
    Code:
       0: iconst_1
       1: ireturn

  void setReadListener(io.undertow.server.protocol.http.HttpReadListener);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #90                 // Field readListener:Lio/undertow/server/protocol/http/HttpReadListener;
       5: return

  protected void exchangeComplete(io.undertow.server.HttpServerExchange);
    Code:
       0: aload_0
       1: getfield      #14                 // Field fixedLengthStreamSinkConduit:Lio/undertow/server/protocol/http/ServerFixedLengthStreamSinkConduit;
       4: ifnull        14
       7: aload_0
       8: getfield      #14                 // Field fixedLengthStreamSinkConduit:Lio/undertow/server/protocol/http/ServerFixedLengthStreamSinkConduit;
      11: invokevirtual #91                 // Method io/undertow/server/protocol/http/ServerFixedLengthStreamSinkConduit.clearExchange:()V
      14: aload_0
      15: getfield      #92                 // Field pipelineBuffer:Lio/undertow/server/protocol/http/PipeliningBufferingStreamSinkConduit;
      18: ifnonnull     32
      21: aload_0
      22: getfield      #90                 // Field readListener:Lio/undertow/server/protocol/http/HttpReadListener;
      25: aload_1
      26: invokevirtual #93                 // Method io/undertow/server/protocol/http/HttpReadListener.exchangeComplete:(Lio/undertow/server/HttpServerExchange;)V
      29: goto          40
      32: aload_0
      33: getfield      #92                 // Field pipelineBuffer:Lio/undertow/server/protocol/http/PipeliningBufferingStreamSinkConduit;
      36: aload_1
      37: invokevirtual #94                 // Method io/undertow/server/protocol/http/PipeliningBufferingStreamSinkConduit.exchangeComplete:(Lio/undertow/server/HttpServerExchange;)V
      40: return

  io.undertow.server.protocol.http.HttpReadListener getReadListener();
    Code:
       0: aload_0
       1: getfield      #90                 // Field readListener:Lio/undertow/server/protocol/http/HttpReadListener;
       4: areturn

  io.undertow.conduits.ReadDataStreamSourceConduit getReadDataStreamSourceConduit();
    Code:
       0: aload_0
       1: getfield      #19                 // Field readDataStreamSourceConduit:Lio/undertow/conduits/ReadDataStreamSourceConduit;
       4: areturn

  public io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit getPipelineBuffer();
    Code:
       0: aload_0
       1: getfield      #92                 // Field pipelineBuffer:Lio/undertow/server/protocol/http/PipeliningBufferingStreamSinkConduit;
       4: areturn

  public io.undertow.server.protocol.http.HttpResponseConduit getResponseConduit();
    Code:
       0: aload_0
       1: getfield      #11                 // Field responseConduit:Lio/undertow/server/protocol/http/HttpResponseConduit;
       4: areturn

  io.undertow.server.protocol.http.ServerFixedLengthStreamSinkConduit getFixedLengthStreamSinkConduit();
    Code:
       0: aload_0
       1: getfield      #14                 // Field fixedLengthStreamSinkConduit:Lio/undertow/server/protocol/http/ServerFixedLengthStreamSinkConduit;
       4: areturn

  protected io.undertow.server.HttpUpgradeListener getUpgradeListener();
    Code:
       0: aload_0
       1: getfield      #95                 // Field upgradeListener:Lio/undertow/server/HttpUpgradeListener;
       4: areturn

  protected void setUpgradeListener(io.undertow.server.HttpUpgradeListener);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #95                 // Field upgradeListener:Lio/undertow/server/HttpUpgradeListener;
       5: return

  protected void setConnectListener(io.undertow.server.HttpUpgradeListener);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #95                 // Field upgradeListener:Lio/undertow/server/HttpUpgradeListener;
       5: aload_0
       6: iconst_1
       7: putfield      #86                 // Field connectHandled:Z
      10: return

  void setCurrentExchange(io.undertow.server.HttpServerExchange);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #96                 // Field current:Lio/undertow/server/HttpServerExchange;
       5: return

  public void setPipelineBuffer(io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #92                 // Field pipelineBuffer:Lio/undertow/server/protocol/http/PipeliningBufferingStreamSinkConduit;
       5: aload_0
       6: new           #7                  // class io/undertow/server/protocol/http/HttpResponseConduit
       9: dup
      10: aload_1
      11: aload_0
      12: getfield      #97                 // Field bufferPool:Lio/undertow/connector/ByteBufferPool;
      15: aload_0
      16: invokespecial #10                 // Method io/undertow/server/protocol/http/HttpResponseConduit."<init>":(Lorg/xnio/conduits/StreamSinkConduit;Lio/undertow/connector/ByteBufferPool;Lio/undertow/server/protocol/http/HttpServerConnection;)V
      19: putfield      #11                 // Field responseConduit:Lio/undertow/server/protocol/http/HttpResponseConduit;
      22: aload_0
      23: new           #12                 // class io/undertow/server/protocol/http/ServerFixedLengthStreamSinkConduit
      26: dup
      27: aload_0
      28: getfield      #11                 // Field responseConduit:Lio/undertow/server/protocol/http/HttpResponseConduit;
      31: iconst_0
      32: iconst_0
      33: invokespecial #13                 // Method io/undertow/server/protocol/http/ServerFixedLengthStreamSinkConduit."<init>":(Lorg/xnio/conduits/StreamSinkConduit;ZZ)V
      36: putfield      #14                 // Field fixedLengthStreamSinkConduit:Lio/undertow/server/protocol/http/ServerFixedLengthStreamSinkConduit;
      39: return

  public java.lang.String getTransportProtocol();
    Code:
       0: ldc           #98                 // String http/1.1
       2: areturn

  public boolean isRequestTrailerFieldsSupported();
    Code:
       0: aload_0
       1: getfield      #96                 // Field current:Lio/undertow/server/HttpServerExchange;
       4: ifnonnull     9
       7: iconst_0
       8: ireturn
       9: aload_0
      10: getfield      #96                 // Field current:Lio/undertow/server/HttpServerExchange;
      13: invokevirtual #29                 // Method io/undertow/server/HttpServerExchange.getRequestHeaders:()Lio/undertow/util/HeaderMap;
      16: getstatic     #99                 // Field io/undertow/util/Headers.TRANSFER_ENCODING:Lio/undertow/util/HttpString;
      19: invokevirtual #100                // Method io/undertow/util/HeaderMap.getFirst:(Lio/undertow/util/HttpString;)Ljava/lang/String;
      22: astore_1
      23: aload_1
      24: ifnonnull     29
      27: iconst_0
      28: ireturn
      29: aload_1
      30: getstatic     #101                // Field io/undertow/util/Headers.CHUNKED:Lio/undertow/util/HttpString;
      33: invokevirtual #50                 // Method io/undertow/util/HttpString.toString:()Ljava/lang/String;
      36: invokevirtual #102                // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      39: ireturn

  boolean isConnectHandled();
    Code:
       0: aload_0
       1: getfield      #86                 // Field connectHandled:Z
       4: ireturn

  static org.xnio.conduits.ConduitStreamSinkChannel access$000(io.undertow.server.protocol.http.HttpServerConnection);
    Code:
       0: aload_0
       1: invokevirtual #1                  // Method getSinkChannel:()Lorg/xnio/conduits/ConduitStreamSinkChannel;
       4: areturn
}
