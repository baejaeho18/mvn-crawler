Compiled from "Http2ServerConnection.java"
class io.undertow.server.protocol.http2.Http2ServerConnection$1 implements io.undertow.server.ConduitWrapper<org.xnio.conduits.StreamSinkConduit> {
  final io.undertow.server.HttpServerExchange val$newExchange;

  final io.undertow.server.protocol.http2.Http2ServerConnection this$0;

  io.undertow.server.protocol.http2.Http2ServerConnection$1(io.undertow.server.protocol.http2.Http2ServerConnection, io.undertow.server.HttpServerExchange);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lio/undertow/server/protocol/http2/Http2ServerConnection;
       5: aload_0
       6: aload_2
       7: putfield      #2                  // Field val$newExchange:Lio/undertow/server/HttpServerExchange;
      10: aload_0
      11: invokespecial #3                  // Method java/lang/Object."<init>":()V
      14: return

  public org.xnio.conduits.StreamSinkConduit wrap(io.undertow.util.ConduitFactory<org.xnio.conduits.StreamSinkConduit>, io.undertow.server.HttpServerExchange);
    Code:
       0: aload_0
       1: getfield      #2                  // Field val$newExchange:Lio/undertow/server/HttpServerExchange;
       4: invokevirtual #4                  // Method io/undertow/server/HttpServerExchange.getResponseHeaders:()Lio/undertow/util/HeaderMap;
       7: astore_3
       8: aload_2
       9: invokestatic  #5                  // Method io/undertow/util/DateUtils.addDateHeaderIfRequired:(Lio/undertow/server/HttpServerExchange;)V
      12: aload_3
      13: getstatic     #6                  // Field io/undertow/server/protocol/http2/Http2ServerConnection.STATUS:Lio/undertow/util/HttpString;
      16: aload_2
      17: invokevirtual #7                  // Method io/undertow/server/HttpServerExchange.getStatusCode:()I
      20: i2l
      21: invokevirtual #8                  // Method io/undertow/util/HeaderMap.add:(Lio/undertow/util/HttpString;J)Lio/undertow/util/HeaderMap;
      24: pop
      25: aload_2
      26: invokestatic  #9                  // Method io/undertow/server/Connectors.flattenCookies:(Lio/undertow/server/HttpServerExchange;)V
      29: new           #10                 // class io/undertow/protocols/http2/Http2HeadersStreamSinkChannel
      32: dup
      33: aload_0
      34: getfield      #1                  // Field this$0:Lio/undertow/server/protocol/http2/Http2ServerConnection;
      37: getfield      #11                 // Field io/undertow/server/protocol/http2/Http2ServerConnection.channel:Lio/undertow/protocols/http2/Http2Channel;
      40: aload_0
      41: getfield      #1                  // Field this$0:Lio/undertow/server/protocol/http2/Http2ServerConnection;
      44: getfield      #12                 // Field io/undertow/server/protocol/http2/Http2ServerConnection.requestChannel:Lio/undertow/protocols/http2/Http2StreamSourceChannel;
      47: invokevirtual #13                 // Method io/undertow/protocols/http2/Http2StreamSourceChannel.getStreamId:()I
      50: aload_3
      51: invokespecial #14                 // Method io/undertow/protocols/http2/Http2HeadersStreamSinkChannel."<init>":(Lio/undertow/protocols/http2/Http2Channel;ILio/undertow/util/HeaderMap;)V
      54: astore        4
      56: new           #15                 // class org/xnio/conduits/StreamSinkChannelWrappingConduit
      59: dup
      60: aload         4
      62: invokespecial #16                 // Method org/xnio/conduits/StreamSinkChannelWrappingConduit."<init>":(Lorg/xnio/channels/StreamSinkChannel;)V
      65: astore        5
      67: aload         5
      69: new           #17                 // class org/xnio/conduits/WriteReadyHandler$ChannelListenerHandler
      72: dup
      73: aload_2
      74: invokestatic  #18                 // Method io/undertow/server/Connectors.getConduitSinkChannel:(Lio/undertow/server/HttpServerExchange;)Lorg/xnio/conduits/ConduitStreamSinkChannel;
      77: invokespecial #19                 // Method org/xnio/conduits/WriteReadyHandler$ChannelListenerHandler."<init>":(Lorg/xnio/channels/SuspendableWriteChannel;)V
      80: invokevirtual #20                 // Method org/xnio/conduits/StreamSinkChannelWrappingConduit.setWriteReadyHandler:(Lorg/xnio/conduits/WriteReadyHandler;)V
      83: aload         5
      85: areturn

  public org.xnio.conduits.Conduit wrap(io.undertow.util.ConduitFactory, io.undertow.server.HttpServerExchange);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #21                 // Method wrap:(Lio/undertow/util/ConduitFactory;Lio/undertow/server/HttpServerExchange;)Lorg/xnio/conduits/StreamSinkConduit;
       6: areturn
}
