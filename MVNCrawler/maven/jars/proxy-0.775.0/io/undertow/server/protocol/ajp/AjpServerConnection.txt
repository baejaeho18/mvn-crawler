Compiled from "AjpServerConnection.java"
public final class io.undertow.server.protocol.ajp.AjpServerConnection extends io.undertow.server.AbstractServerConnection {
  private io.undertow.server.SSLSessionInfo sslSessionInfo;

  private org.xnio.conduits.WriteReadyHandler$ChannelListenerHandler<org.xnio.conduits.ConduitStreamSinkChannel> writeReadyHandler;

  private io.undertow.server.protocol.ajp.AjpReadListener ajpReadListener;

  public io.undertow.server.protocol.ajp.AjpServerConnection(org.xnio.StreamConnection, io.undertow.connector.ByteBufferPool, io.undertow.server.HttpHandler, org.xnio.OptionMap, int);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: iload         5
       8: invokespecial #1                  // Method io/undertow/server/AbstractServerConnection."<init>":(Lorg/xnio/StreamConnection;Lio/undertow/connector/ByteBufferPool;Lio/undertow/server/HttpHandler;Lorg/xnio/OptionMap;I)V
      11: aload_0
      12: new           #2                  // class org/xnio/conduits/WriteReadyHandler$ChannelListenerHandler
      15: dup
      16: aload_1
      17: invokevirtual #3                  // Method org/xnio/StreamConnection.getSinkChannel:()Lorg/xnio/conduits/ConduitStreamSinkChannel;
      20: invokespecial #4                  // Method org/xnio/conduits/WriteReadyHandler$ChannelListenerHandler."<init>":(Lorg/xnio/channels/SuspendableWriteChannel;)V
      23: putfield      #5                  // Field writeReadyHandler:Lorg/xnio/conduits/WriteReadyHandler$ChannelListenerHandler;
      26: return

  public io.undertow.server.HttpServerExchange sendOutOfBandResponse(io.undertow.server.HttpServerExchange);
    Code:
       0: getstatic     #6                  // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
       3: invokeinterface #7,  1            // InterfaceMethod io/undertow/UndertowMessages.outOfBandResponseNotSupported:()Ljava/lang/IllegalStateException;
       8: athrow

  public boolean isContinueResponseSupported();
    Code:
       0: iconst_0
       1: ireturn

  public void terminateRequestChannel(io.undertow.server.HttpServerExchange);
    Code:
       0: aload_1
       1: invokevirtual #8                  // Method io/undertow/server/HttpServerExchange.isPersistent:()Z
       4: ifne          17
       7: aload_0
       8: invokevirtual #9                  // Method getChannel:()Lorg/xnio/StreamConnection;
      11: invokevirtual #10                 // Method org/xnio/StreamConnection.getSourceChannel:()Lorg/xnio/conduits/ConduitStreamSourceChannel;
      14: invokestatic  #11                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
      17: return

  public void restoreChannel(io.undertow.server.AbstractServerConnection$ConduitState);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #12                 // Method io/undertow/server/AbstractServerConnection.restoreChannel:(Lio/undertow/server/AbstractServerConnection$ConduitState;)V
       5: aload_0
       6: getfield      #13                 // Field channel:Lorg/xnio/StreamConnection;
       9: invokevirtual #3                  // Method org/xnio/StreamConnection.getSinkChannel:()Lorg/xnio/conduits/ConduitStreamSinkChannel;
      12: invokevirtual #14                 // Method org/xnio/conduits/ConduitStreamSinkChannel.getConduit:()Lorg/xnio/conduits/StreamSinkConduit;
      15: aload_0
      16: getfield      #5                  // Field writeReadyHandler:Lorg/xnio/conduits/WriteReadyHandler$ChannelListenerHandler;
      19: invokeinterface #15,  2           // InterfaceMethod org/xnio/conduits/StreamSinkConduit.setWriteReadyHandler:(Lorg/xnio/conduits/WriteReadyHandler;)V
      24: return

  public io.undertow.server.AbstractServerConnection$ConduitState resetChannel();
    Code:
       0: aload_0
       1: invokespecial #16                 // Method io/undertow/server/AbstractServerConnection.resetChannel:()Lio/undertow/server/AbstractServerConnection$ConduitState;
       4: astore_1
       5: aload_0
       6: getfield      #13                 // Field channel:Lorg/xnio/StreamConnection;
       9: invokevirtual #3                  // Method org/xnio/StreamConnection.getSinkChannel:()Lorg/xnio/conduits/ConduitStreamSinkChannel;
      12: invokevirtual #14                 // Method org/xnio/conduits/ConduitStreamSinkChannel.getConduit:()Lorg/xnio/conduits/StreamSinkConduit;
      15: aload_0
      16: getfield      #5                  // Field writeReadyHandler:Lorg/xnio/conduits/WriteReadyHandler$ChannelListenerHandler;
      19: invokeinterface #15,  2           // InterfaceMethod org/xnio/conduits/StreamSinkConduit.setWriteReadyHandler:(Lorg/xnio/conduits/WriteReadyHandler;)V
      24: aload_1
      25: areturn

  public void clearChannel();
    Code:
       0: aload_0
       1: invokespecial #17                 // Method io/undertow/server/AbstractServerConnection.clearChannel:()V
       4: aload_0
       5: getfield      #13                 // Field channel:Lorg/xnio/StreamConnection;
       8: invokevirtual #3                  // Method org/xnio/StreamConnection.getSinkChannel:()Lorg/xnio/conduits/ConduitStreamSinkChannel;
      11: invokevirtual #14                 // Method org/xnio/conduits/ConduitStreamSinkChannel.getConduit:()Lorg/xnio/conduits/StreamSinkConduit;
      14: aload_0
      15: getfield      #5                  // Field writeReadyHandler:Lorg/xnio/conduits/WriteReadyHandler$ChannelListenerHandler;
      18: invokeinterface #15,  2           // InterfaceMethod org/xnio/conduits/StreamSinkConduit.setWriteReadyHandler:(Lorg/xnio/conduits/WriteReadyHandler;)V
      23: return

  public io.undertow.server.SSLSessionInfo getSslSessionInfo();
    Code:
       0: aload_0
       1: getfield      #18                 // Field sslSessionInfo:Lio/undertow/server/SSLSessionInfo;
       4: areturn

  public void setSslSessionInfo(io.undertow.server.SSLSessionInfo);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #18                 // Field sslSessionInfo:Lio/undertow/server/SSLSessionInfo;
       5: return

  void setSSLSessionInfo(io.undertow.server.BasicSSLSessionInfo);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #18                 // Field sslSessionInfo:Lio/undertow/server/SSLSessionInfo;
       5: return

  protected org.xnio.StreamConnection upgradeChannel();
    Code:
       0: getstatic     #6                  // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
       3: invokeinterface #19,  1           // InterfaceMethod io/undertow/UndertowMessages.upgradeNotSupported:()Ljava/lang/IllegalStateException;
       8: athrow

  protected org.xnio.conduits.StreamSinkConduit getSinkConduit(io.undertow.server.HttpServerExchange, org.xnio.conduits.StreamSinkConduit);
    Code:
       0: aload_1
       1: invokestatic  #20                 // Method io/undertow/util/DateUtils.addDateHeaderIfRequired:(Lio/undertow/server/HttpServerExchange;)V
       4: aload_2
       5: areturn

  protected boolean isUpgradeSupported();
    Code:
       0: iconst_0
       1: ireturn

  protected boolean isConnectSupported();
    Code:
       0: iconst_0
       1: ireturn

  void setAjpReadListener(io.undertow.server.protocol.ajp.AjpReadListener);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #21                 // Field ajpReadListener:Lio/undertow/server/protocol/ajp/AjpReadListener;
       5: return

  protected void exchangeComplete(io.undertow.server.HttpServerExchange);
    Code:
       0: aload_0
       1: getfield      #21                 // Field ajpReadListener:Lio/undertow/server/protocol/ajp/AjpReadListener;
       4: aload_1
       5: invokevirtual #22                 // Method io/undertow/server/protocol/ajp/AjpReadListener.exchangeComplete:(Lio/undertow/server/HttpServerExchange;)V
       8: return

  protected void setConnectListener(io.undertow.server.HttpUpgradeListener);
    Code:
       0: getstatic     #6                  // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
       3: invokeinterface #23,  1           // InterfaceMethod io/undertow/UndertowMessages.connectNotSupported:()Ljava/lang/IllegalStateException;
       8: athrow

  void setCurrentExchange(io.undertow.server.HttpServerExchange);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #24                 // Field current:Lio/undertow/server/HttpServerExchange;
       5: return

  public java.lang.String getTransportProtocol();
    Code:
       0: ldc           #25                 // String ajp
       2: areturn

  public boolean isRequestTrailerFieldsSupported();
    Code:
       0: iconst_0
       1: ireturn
}
