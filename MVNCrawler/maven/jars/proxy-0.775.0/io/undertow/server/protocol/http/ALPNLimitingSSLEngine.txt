Compiled from "ALPNLimitingSSLEngine.java"
public class io.undertow.server.protocol.http.ALPNLimitingSSLEngine extends javax.net.ssl.SSLEngine {
  private static final javax.net.ssl.SSLEngineResult UNDERFLOW_RESULT;

  private final javax.net.ssl.SSLEngine delegate;

  private final java.lang.Runnable invalidAlpnRunnable;

  private boolean done;

  public io.undertow.server.protocol.http.ALPNLimitingSSLEngine(javax.net.ssl.SSLEngine, java.lang.Runnable);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method javax/net/ssl/SSLEngine."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field delegate:Ljavax/net/ssl/SSLEngine;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field invalidAlpnRunnable:Ljava/lang/Runnable;
      14: return

  public java.lang.String getPeerHost();
    Code:
       0: aload_0
       1: getfield      #2                  // Field delegate:Ljavax/net/ssl/SSLEngine;
       4: invokevirtual #4                  // Method javax/net/ssl/SSLEngine.getPeerHost:()Ljava/lang/String;
       7: areturn

  public int getPeerPort();
    Code:
       0: aload_0
       1: getfield      #2                  // Field delegate:Ljavax/net/ssl/SSLEngine;
       4: invokevirtual #5                  // Method javax/net/ssl/SSLEngine.getPeerPort:()I
       7: ireturn

  public javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer, java.nio.ByteBuffer) throws javax.net.ssl.SSLException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field delegate:Ljavax/net/ssl/SSLEngine;
       4: aload_1
       5: aload_2
       6: invokevirtual #6                  // Method javax/net/ssl/SSLEngine.wrap:(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)Ljavax/net/ssl/SSLEngineResult;
       9: areturn

  public javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer[], java.nio.ByteBuffer) throws javax.net.ssl.SSLException;
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_1
       4: arraylength
       5: aload_2
       6: invokevirtual #7                  // Method wrap:([Ljava/nio/ByteBuffer;IILjava/nio/ByteBuffer;)Ljavax/net/ssl/SSLEngineResult;
       9: areturn

  public javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer, java.nio.ByteBuffer) throws javax.net.ssl.SSLException;
    Code:
       0: aload_0
       1: getfield      #8                  // Field done:Z
       4: ifeq          17
       7: aload_0
       8: getfield      #2                  // Field delegate:Ljavax/net/ssl/SSLEngine;
      11: aload_1
      12: aload_2
      13: invokevirtual #9                  // Method javax/net/ssl/SSLEngine.unwrap:(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)Ljavax/net/ssl/SSLEngineResult;
      16: areturn
      17: aload_1
      18: invokestatic  #10                 // Method io/undertow/server/protocol/http/ALPNOfferedClientHelloExplorer.isIncompleteHeader:(Ljava/nio/ByteBuffer;)Z
      21: ifeq          28
      24: getstatic     #11                 // Field UNDERFLOW_RESULT:Ljavax/net/ssl/SSLEngineResult;
      27: areturn
      28: aload_1
      29: invokestatic  #12                 // Method io/undertow/server/protocol/http/ALPNOfferedClientHelloExplorer.parseClientHello:(Ljava/nio/ByteBuffer;)Ljava/util/List;
      32: astore_3
      33: aload_3
      34: ifnull        50
      37: aload_0
      38: aload_3
      39: invokevirtual #13                 // Method limitCiphers:(Ljava/util/List;)V
      42: aload_0
      43: iconst_1
      44: putfield      #8                  // Field done:Z
      47: goto          55
      50: aload_0
      51: iconst_1
      52: putfield      #8                  // Field done:Z
      55: goto          63
      58: astore_3
      59: getstatic     #11                 // Field UNDERFLOW_RESULT:Ljavax/net/ssl/SSLEngineResult;
      62: areturn
      63: aload_0
      64: getfield      #2                  // Field delegate:Ljavax/net/ssl/SSLEngine;
      67: aload_1
      68: aload_2
      69: invokevirtual #9                  // Method javax/net/ssl/SSLEngine.unwrap:(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)Ljavax/net/ssl/SSLEngineResult;
      72: areturn
    Exception table:
       from    to  target type
          28    55    58   Class java/nio/BufferUnderflowException

  private void limitCiphers(java.util.List<java.lang.Integer>);
    Code:
       0: iconst_0
       1: istore_2
       2: aload_1
       3: invokeinterface #15,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
       8: astore_3
       9: aload_3
      10: invokeinterface #16,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      15: ifeq          44
      18: aload_3
      19: invokeinterface #17,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      24: checkcast     #18                 // class java/lang/Integer
      27: invokevirtual #19                 // Method java/lang/Integer.intValue:()I
      30: istore        4
      32: iload         4
      34: ldc           #20                 // int 49199
      36: if_icmpne     41
      39: iconst_1
      40: istore_2
      41: goto          9
      44: iload_2
      45: ifne          60
      48: aload_0
      49: getfield      #3                  // Field invalidAlpnRunnable:Ljava/lang/Runnable;
      52: invokeinterface #21,  1           // InterfaceMethod java/lang/Runnable.run:()V
      57: goto          147
      60: new           #22                 // class java/util/ArrayList
      63: dup
      64: invokespecial #23                 // Method java/util/ArrayList."<init>":()V
      67: astore_3
      68: aload_0
      69: getfield      #2                  // Field delegate:Ljavax/net/ssl/SSLEngine;
      72: invokevirtual #24                 // Method javax/net/ssl/SSLEngine.getEnabledCipherSuites:()[Ljava/lang/String;
      75: astore        4
      77: aload         4
      79: arraylength
      80: istore        5
      82: iconst_0
      83: istore        6
      85: iload         6
      87: iload         5
      89: if_icmpge     122
      92: aload         4
      94: iload         6
      96: aaload
      97: astore        7
      99: aload         7
     101: invokestatic  #25                 // Method io/undertow/server/protocol/http/ALPNBannedCiphers.isAllowed:(Ljava/lang/String;)Z
     104: ifeq          116
     107: aload_3
     108: aload         7
     110: invokeinterface #26,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     115: pop
     116: iinc          6, 1
     119: goto          85
     122: aload_0
     123: getfield      #2                  // Field delegate:Ljavax/net/ssl/SSLEngine;
     126: aload_3
     127: aload_3
     128: invokeinterface #27,  1           // InterfaceMethod java/util/List.size:()I
     133: anewarray     #28                 // class java/lang/String
     136: invokeinterface #29,  2           // InterfaceMethod java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
     141: checkcast     #30                 // class "[Ljava/lang/String;"
     144: invokevirtual #31                 // Method javax/net/ssl/SSLEngine.setEnabledCipherSuites:([Ljava/lang/String;)V
     147: return

  public javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer, java.nio.ByteBuffer[]) throws javax.net.ssl.SSLException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iconst_0
       4: aload_2
       5: arraylength
       6: invokevirtual #32                 // Method unwrap:(Ljava/nio/ByteBuffer;[Ljava/nio/ByteBuffer;II)Ljavax/net/ssl/SSLEngineResult;
       9: areturn

  public javax.net.ssl.SSLSession getHandshakeSession();
    Code:
       0: aload_0
       1: getfield      #2                  // Field delegate:Ljavax/net/ssl/SSLEngine;
       4: invokevirtual #33                 // Method javax/net/ssl/SSLEngine.getHandshakeSession:()Ljavax/net/ssl/SSLSession;
       7: areturn

  public javax.net.ssl.SSLParameters getSSLParameters();
    Code:
       0: aload_0
       1: getfield      #2                  // Field delegate:Ljavax/net/ssl/SSLEngine;
       4: invokevirtual #34                 // Method javax/net/ssl/SSLEngine.getSSLParameters:()Ljavax/net/ssl/SSLParameters;
       7: areturn

  public void setSSLParameters(javax.net.ssl.SSLParameters);
    Code:
       0: aload_0
       1: getfield      #2                  // Field delegate:Ljavax/net/ssl/SSLEngine;
       4: aload_1
       5: invokevirtual #35                 // Method javax/net/ssl/SSLEngine.setSSLParameters:(Ljavax/net/ssl/SSLParameters;)V
       8: return

  public javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer[], int, int, java.nio.ByteBuffer) throws javax.net.ssl.SSLException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field delegate:Ljavax/net/ssl/SSLEngine;
       4: aload_1
       5: iload_2
       6: iload_3
       7: aload         4
       9: invokevirtual #36                 // Method javax/net/ssl/SSLEngine.wrap:([Ljava/nio/ByteBuffer;IILjava/nio/ByteBuffer;)Ljavax/net/ssl/SSLEngineResult;
      12: areturn

  public javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer, java.nio.ByteBuffer[], int, int) throws javax.net.ssl.SSLException;
    Code:
       0: aload_0
       1: getfield      #8                  // Field done:Z
       4: ifeq          20
       7: aload_0
       8: getfield      #2                  // Field delegate:Ljavax/net/ssl/SSLEngine;
      11: aload_1
      12: aload_2
      13: iload_3
      14: iload         4
      16: invokevirtual #37                 // Method javax/net/ssl/SSLEngine.unwrap:(Ljava/nio/ByteBuffer;[Ljava/nio/ByteBuffer;II)Ljavax/net/ssl/SSLEngineResult;
      19: areturn
      20: aload_1
      21: invokestatic  #10                 // Method io/undertow/server/protocol/http/ALPNOfferedClientHelloExplorer.isIncompleteHeader:(Ljava/nio/ByteBuffer;)Z
      24: ifeq          31
      27: getstatic     #11                 // Field UNDERFLOW_RESULT:Ljavax/net/ssl/SSLEngineResult;
      30: areturn
      31: aload_1
      32: invokestatic  #12                 // Method io/undertow/server/protocol/http/ALPNOfferedClientHelloExplorer.parseClientHello:(Ljava/nio/ByteBuffer;)Ljava/util/List;
      35: astore        5
      37: aload         5
      39: ifnull        56
      42: aload_0
      43: aload         5
      45: invokevirtual #13                 // Method limitCiphers:(Ljava/util/List;)V
      48: aload_0
      49: iconst_1
      50: putfield      #8                  // Field done:Z
      53: goto          61
      56: aload_0
      57: iconst_1
      58: putfield      #8                  // Field done:Z
      61: goto          70
      64: astore        5
      66: getstatic     #11                 // Field UNDERFLOW_RESULT:Ljavax/net/ssl/SSLEngineResult;
      69: areturn
      70: aload_0
      71: getfield      #2                  // Field delegate:Ljavax/net/ssl/SSLEngine;
      74: aload_1
      75: aload_2
      76: iload_3
      77: iload         4
      79: invokevirtual #37                 // Method javax/net/ssl/SSLEngine.unwrap:(Ljava/nio/ByteBuffer;[Ljava/nio/ByteBuffer;II)Ljavax/net/ssl/SSLEngineResult;
      82: areturn
    Exception table:
       from    to  target type
          31    61    64   Class java/nio/BufferUnderflowException

  public java.lang.Runnable getDelegatedTask();
    Code:
       0: aload_0
       1: getfield      #2                  // Field delegate:Ljavax/net/ssl/SSLEngine;
       4: invokevirtual #38                 // Method javax/net/ssl/SSLEngine.getDelegatedTask:()Ljava/lang/Runnable;
       7: areturn

  public void closeInbound() throws javax.net.ssl.SSLException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field delegate:Ljavax/net/ssl/SSLEngine;
       4: invokevirtual #39                 // Method javax/net/ssl/SSLEngine.closeInbound:()V
       7: return

  public boolean isInboundDone();
    Code:
       0: aload_0
       1: getfield      #2                  // Field delegate:Ljavax/net/ssl/SSLEngine;
       4: invokevirtual #40                 // Method javax/net/ssl/SSLEngine.isInboundDone:()Z
       7: ireturn

  public void closeOutbound();
    Code:
       0: aload_0
       1: getfield      #2                  // Field delegate:Ljavax/net/ssl/SSLEngine;
       4: invokevirtual #41                 // Method javax/net/ssl/SSLEngine.closeOutbound:()V
       7: return

  public boolean isOutboundDone();
    Code:
       0: aload_0
       1: getfield      #2                  // Field delegate:Ljavax/net/ssl/SSLEngine;
       4: invokevirtual #42                 // Method javax/net/ssl/SSLEngine.isOutboundDone:()Z
       7: ireturn

  public java.lang.String[] getSupportedCipherSuites();
    Code:
       0: aload_0
       1: getfield      #2                  // Field delegate:Ljavax/net/ssl/SSLEngine;
       4: invokevirtual #43                 // Method javax/net/ssl/SSLEngine.getSupportedCipherSuites:()[Ljava/lang/String;
       7: areturn

  public java.lang.String[] getEnabledCipherSuites();
    Code:
       0: aload_0
       1: getfield      #2                  // Field delegate:Ljavax/net/ssl/SSLEngine;
       4: invokevirtual #24                 // Method javax/net/ssl/SSLEngine.getEnabledCipherSuites:()[Ljava/lang/String;
       7: areturn

  public void setEnabledCipherSuites(java.lang.String[]);
    Code:
       0: aload_0
       1: getfield      #2                  // Field delegate:Ljavax/net/ssl/SSLEngine;
       4: aload_1
       5: invokevirtual #31                 // Method javax/net/ssl/SSLEngine.setEnabledCipherSuites:([Ljava/lang/String;)V
       8: return

  public java.lang.String[] getSupportedProtocols();
    Code:
       0: aload_0
       1: getfield      #2                  // Field delegate:Ljavax/net/ssl/SSLEngine;
       4: invokevirtual #44                 // Method javax/net/ssl/SSLEngine.getSupportedProtocols:()[Ljava/lang/String;
       7: areturn

  public java.lang.String[] getEnabledProtocols();
    Code:
       0: aload_0
       1: getfield      #2                  // Field delegate:Ljavax/net/ssl/SSLEngine;
       4: invokevirtual #45                 // Method javax/net/ssl/SSLEngine.getEnabledProtocols:()[Ljava/lang/String;
       7: areturn

  public void setEnabledProtocols(java.lang.String[]);
    Code:
       0: aload_0
       1: getfield      #2                  // Field delegate:Ljavax/net/ssl/SSLEngine;
       4: aload_1
       5: invokevirtual #46                 // Method javax/net/ssl/SSLEngine.setEnabledProtocols:([Ljava/lang/String;)V
       8: return

  public javax.net.ssl.SSLSession getSession();
    Code:
       0: aload_0
       1: getfield      #2                  // Field delegate:Ljavax/net/ssl/SSLEngine;
       4: invokevirtual #47                 // Method javax/net/ssl/SSLEngine.getSession:()Ljavax/net/ssl/SSLSession;
       7: areturn

  public void beginHandshake() throws javax.net.ssl.SSLException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field delegate:Ljavax/net/ssl/SSLEngine;
       4: invokevirtual #48                 // Method javax/net/ssl/SSLEngine.beginHandshake:()V
       7: return

  public javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus();
    Code:
       0: aload_0
       1: getfield      #2                  // Field delegate:Ljavax/net/ssl/SSLEngine;
       4: invokevirtual #49                 // Method javax/net/ssl/SSLEngine.getHandshakeStatus:()Ljavax/net/ssl/SSLEngineResult$HandshakeStatus;
       7: areturn

  public void setUseClientMode(boolean);
    Code:
       0: iload_1
       1: ifeq          12
       4: new           #50                 // class java/lang/IllegalArgumentException
       7: dup
       8: invokespecial #51                 // Method java/lang/IllegalArgumentException."<init>":()V
      11: athrow
      12: return

  public boolean getUseClientMode();
    Code:
       0: aload_0
       1: getfield      #2                  // Field delegate:Ljavax/net/ssl/SSLEngine;
       4: invokevirtual #52                 // Method javax/net/ssl/SSLEngine.getUseClientMode:()Z
       7: ireturn

  public void setNeedClientAuth(boolean);
    Code:
       0: aload_0
       1: getfield      #2                  // Field delegate:Ljavax/net/ssl/SSLEngine;
       4: iload_1
       5: invokevirtual #53                 // Method javax/net/ssl/SSLEngine.setNeedClientAuth:(Z)V
       8: return

  public boolean getNeedClientAuth();
    Code:
       0: aload_0
       1: getfield      #2                  // Field delegate:Ljavax/net/ssl/SSLEngine;
       4: invokevirtual #54                 // Method javax/net/ssl/SSLEngine.getNeedClientAuth:()Z
       7: ireturn

  public void setWantClientAuth(boolean);
    Code:
       0: aload_0
       1: getfield      #2                  // Field delegate:Ljavax/net/ssl/SSLEngine;
       4: iload_1
       5: invokevirtual #55                 // Method javax/net/ssl/SSLEngine.setWantClientAuth:(Z)V
       8: return

  public boolean getWantClientAuth();
    Code:
       0: aload_0
       1: getfield      #2                  // Field delegate:Ljavax/net/ssl/SSLEngine;
       4: invokevirtual #56                 // Method javax/net/ssl/SSLEngine.getWantClientAuth:()Z
       7: ireturn

  public void setEnableSessionCreation(boolean);
    Code:
       0: aload_0
       1: getfield      #2                  // Field delegate:Ljavax/net/ssl/SSLEngine;
       4: iload_1
       5: invokevirtual #57                 // Method javax/net/ssl/SSLEngine.setEnableSessionCreation:(Z)V
       8: return

  public boolean getEnableSessionCreation();
    Code:
       0: aload_0
       1: getfield      #2                  // Field delegate:Ljavax/net/ssl/SSLEngine;
       4: invokevirtual #58                 // Method javax/net/ssl/SSLEngine.getEnableSessionCreation:()Z
       7: ireturn

  static {};
    Code:
       0: new           #59                 // class javax/net/ssl/SSLEngineResult
       3: dup
       4: getstatic     #60                 // Field javax/net/ssl/SSLEngineResult$Status.BUFFER_UNDERFLOW:Ljavax/net/ssl/SSLEngineResult$Status;
       7: getstatic     #61                 // Field javax/net/ssl/SSLEngineResult$HandshakeStatus.NEED_UNWRAP:Ljavax/net/ssl/SSLEngineResult$HandshakeStatus;
      10: iconst_0
      11: iconst_0
      12: invokespecial #62                 // Method javax/net/ssl/SSLEngineResult."<init>":(Ljavax/net/ssl/SSLEngineResult$Status;Ljavax/net/ssl/SSLEngineResult$HandshakeStatus;II)V
      15: putstatic     #11                 // Field UNDERFLOW_RESULT:Ljavax/net/ssl/SSLEngineResult;
      18: return
}
