Compiled from "Http2ReceiveListener.java"
public class io.undertow.server.protocol.http2.Http2ReceiveListener implements org.xnio.ChannelListener<io.undertow.protocols.http2.Http2Channel> {
  private final io.undertow.server.HttpHandler rootHandler;

  private final long maxEntitySize;

  private final org.xnio.OptionMap undertowOptions;

  private final java.lang.String encoding;

  private final boolean decode;

  private final java.lang.StringBuilder decodeBuffer;

  private final boolean slashDecodingFlag;

  private final int bufferSize;

  private final int maxParameters;

  private final boolean recordRequestStartTime;

  private final boolean allowUnescapedCharactersInUrl;

  private final io.undertow.server.ConnectorStatisticsImpl connectorStatistics;

  public io.undertow.server.protocol.http2.Http2ReceiveListener(io.undertow.server.HttpHandler, org.xnio.OptionMap, int, io.undertow.server.ConnectorStatisticsImpl);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/lang/StringBuilder
       8: dup
       9: invokespecial #3                  // Method java/lang/StringBuilder."<init>":()V
      12: putfield      #4                  // Field decodeBuffer:Ljava/lang/StringBuilder;
      15: aload_0
      16: aload_1
      17: putfield      #5                  // Field rootHandler:Lio/undertow/server/HttpHandler;
      20: aload_0
      21: aload_2
      22: putfield      #6                  // Field undertowOptions:Lorg/xnio/OptionMap;
      25: aload_0
      26: iload_3
      27: putfield      #7                  // Field bufferSize:I
      30: aload_0
      31: aload         4
      33: putfield      #8                  // Field connectorStatistics:Lio/undertow/server/ConnectorStatisticsImpl;
      36: aload_0
      37: aload_2
      38: getstatic     #9                  // Field io/undertow/UndertowOptions.MAX_ENTITY_SIZE:Lorg/xnio/Option;
      41: ldc2_w        #11                 // long -1l
      44: invokevirtual #13                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;J)J
      47: putfield      #14                 // Field maxEntitySize:J
      50: aload_0
      51: aload_2
      52: invokestatic  #15                 // Method io/undertow/util/URLUtils.getSlashDecodingFlag:(Lorg/xnio/OptionMap;)Z
      55: putfield      #16                 // Field slashDecodingFlag:Z
      58: aload_0
      59: aload_2
      60: getstatic     #17                 // Field io/undertow/UndertowOptions.DECODE_URL:Lorg/xnio/Option;
      63: iconst_1
      64: invokevirtual #18                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;Z)Z
      67: putfield      #19                 // Field decode:Z
      70: aload_0
      71: aload_2
      72: getstatic     #20                 // Field io/undertow/UndertowOptions.MAX_PARAMETERS:Lorg/xnio/Option;
      75: sipush        1000
      78: invokevirtual #21                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;I)I
      81: putfield      #22                 // Field maxParameters:I
      84: aload_0
      85: aload_2
      86: getstatic     #23                 // Field io/undertow/UndertowOptions.RECORD_REQUEST_START_TIME:Lorg/xnio/Option;
      89: iconst_0
      90: invokevirtual #18                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;Z)Z
      93: putfield      #24                 // Field recordRequestStartTime:Z
      96: aload_2
      97: getstatic     #17                 // Field io/undertow/UndertowOptions.DECODE_URL:Lorg/xnio/Option;
     100: iconst_1
     101: invokevirtual #18                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;Z)Z
     104: ifeq          130
     107: aload_0
     108: aload_2
     109: getstatic     #25                 // Field io/undertow/UndertowOptions.URL_CHARSET:Lorg/xnio/Option;
     112: getstatic     #26                 // Field java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;
     115: invokevirtual #27                 // Method java/nio/charset/Charset.name:()Ljava/lang/String;
     118: invokevirtual #28                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;Ljava/lang/Object;)Ljava/lang/Object;
     121: checkcast     #29                 // class java/lang/String
     124: putfield      #30                 // Field encoding:Ljava/lang/String;
     127: goto          135
     130: aload_0
     131: aconst_null
     132: putfield      #30                 // Field encoding:Ljava/lang/String;
     135: aload_0
     136: aload_2
     137: getstatic     #31                 // Field io/undertow/UndertowOptions.ALLOW_UNESCAPED_CHARACTERS_IN_URL:Lorg/xnio/Option;
     140: iconst_0
     141: invokevirtual #18                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;Z)Z
     144: putfield      #32                 // Field allowUnescapedCharactersInUrl:Z
     147: return

  public void handleEvent(io.undertow.protocols.http2.Http2Channel);
    Code:
       0: aload_1
       1: invokevirtual #33                 // Method io/undertow/protocols/http2/Http2Channel.receive:()Lio/undertow/server/protocol/framed/AbstractFramedStreamSourceChannel;
       4: checkcast     #34                 // class io/undertow/protocols/http2/AbstractHttp2StreamSourceChannel
       7: astore_2
       8: aload_2
       9: ifnonnull     13
      12: return
      13: aload_2
      14: instanceof    #35                 // class io/undertow/protocols/http2/Http2StreamSourceChannel
      17: ifeq          29
      20: aload_0
      21: aload_1
      22: aload_2
      23: checkcast     #35                 // class io/undertow/protocols/http2/Http2StreamSourceChannel
      26: invokevirtual #36                 // Method handleRequests:(Lio/undertow/protocols/http2/Http2Channel;Lio/undertow/protocols/http2/Http2StreamSourceChannel;)V
      29: goto          63
      32: astore_2
      33: getstatic     #38                 // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
      36: aload_2
      37: invokeinterface #39,  2           // InterfaceMethod io/undertow/UndertowLogger.ioException:(Ljava/io/IOException;)V
      42: aload_1
      43: invokestatic  #40                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
      46: goto          63
      49: astore_2
      50: getstatic     #38                 // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
      53: aload_2
      54: invokeinterface #42,  2           // InterfaceMethod io/undertow/UndertowLogger.handleUnexpectedFailure:(Ljava/lang/Throwable;)V
      59: aload_1
      60: invokestatic  #40                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
      63: return
    Exception table:
       from    to  target type
           0    12    32   Class java/io/IOException
          13    29    32   Class java/io/IOException
           0    12    49   Class java/lang/Throwable
          13    29    49   Class java/lang/Throwable

  private void handleRequests(io.undertow.protocols.http2.Http2Channel, io.undertow.protocols.http2.Http2StreamSourceChannel);
    Code:
       0: aload_2
       1: astore_3
       2: new           #43                 // class io/undertow/server/protocol/http2/Http2ServerConnection
       5: dup
       6: aload_1
       7: aload_3
       8: aload_0
       9: getfield      #6                  // Field undertowOptions:Lorg/xnio/OptionMap;
      12: aload_0
      13: getfield      #7                  // Field bufferSize:I
      16: aload_0
      17: getfield      #5                  // Field rootHandler:Lio/undertow/server/HttpHandler;
      20: invokespecial #44                 // Method io/undertow/server/protocol/http2/Http2ServerConnection."<init>":(Lio/undertow/protocols/http2/Http2Channel;Lio/undertow/protocols/http2/Http2StreamSourceChannel;Lorg/xnio/OptionMap;ILio/undertow/server/HttpHandler;)V
      23: astore        4
      25: aload_0
      26: aload_3
      27: invokevirtual #45                 // Method io/undertow/protocols/http2/Http2StreamSourceChannel.getHeaders:()Lio/undertow/util/HeaderMap;
      30: invokevirtual #46                 // Method checkRequestHeaders:(Lio/undertow/util/HeaderMap;)Z
      33: ifne          59
      36: aload_1
      37: aload_2
      38: invokevirtual #47                 // Method io/undertow/protocols/http2/Http2StreamSourceChannel.getStreamId:()I
      41: iconst_1
      42: invokevirtual #49                 // Method io/undertow/protocols/http2/Http2Channel.sendRstStream:(II)V
      45: aload_2
      46: ldc2_w        #51                 // long 9223372036854775807l
      49: invokestatic  #53                 // Method org/xnio/channels/Channels.drain:(Lorg/xnio/channels/StreamSourceChannel;J)J
      52: pop2
      53: goto          58
      56: astore        5
      58: return
      59: new           #54                 // class io/undertow/server/HttpServerExchange
      62: dup
      63: aload         4
      65: aload_3
      66: invokevirtual #45                 // Method io/undertow/protocols/http2/Http2StreamSourceChannel.getHeaders:()Lio/undertow/util/HeaderMap;
      69: aload_3
      70: invokevirtual #55                 // Method io/undertow/protocols/http2/Http2StreamSourceChannel.getResponseChannel:()Lio/undertow/protocols/http2/Http2HeadersStreamSinkChannel;
      73: invokevirtual #56                 // Method io/undertow/protocols/http2/Http2HeadersStreamSinkChannel.getHeaders:()Lio/undertow/util/HeaderMap;
      76: aload_0
      77: getfield      #14                 // Field maxEntitySize:J
      80: invokespecial #57                 // Method io/undertow/server/HttpServerExchange."<init>":(Lio/undertow/server/ServerConnection;Lio/undertow/util/HeaderMap;Lio/undertow/util/HeaderMap;J)V
      83: astore        5
      85: aload_3
      86: new           #58                 // class io/undertow/server/protocol/http2/Http2ReceiveListener$1
      89: dup
      90: aload_0
      91: aload         5
      93: invokespecial #59                 // Method io/undertow/server/protocol/http2/Http2ReceiveListener$1."<init>":(Lio/undertow/server/protocol/http2/Http2ReceiveListener;Lio/undertow/server/HttpServerExchange;)V
      96: invokevirtual #60                 // Method io/undertow/protocols/http2/Http2StreamSourceChannel.setTrailersHandler:(Lio/undertow/protocols/http2/Http2StreamSourceChannel$TrailersHandler;)V
      99: aload         4
     101: aload         5
     103: invokevirtual #61                 // Method io/undertow/server/protocol/http2/Http2ServerConnection.setExchange:(Lio/undertow/server/HttpServerExchange;)V
     106: aload_3
     107: aload_0
     108: getfield      #14                 // Field maxEntitySize:J
     111: invokevirtual #62                 // Method io/undertow/protocols/http2/Http2StreamSourceChannel.setMaxStreamSize:(J)V
     114: aload         5
     116: aload         5
     118: invokevirtual #63                 // Method io/undertow/server/HttpServerExchange.getRequestHeaders:()Lio/undertow/util/HeaderMap;
     121: getstatic     #64                 // Field io/undertow/protocols/http2/Http2Channel.SCHEME:Lio/undertow/util/HttpString;
     124: invokevirtual #65                 // Method io/undertow/util/HeaderMap.getFirst:(Lio/undertow/util/HttpString;)Ljava/lang/String;
     127: invokevirtual #66                 // Method io/undertow/server/HttpServerExchange.setRequestScheme:(Ljava/lang/String;)Lio/undertow/server/HttpServerExchange;
     130: pop
     131: aload         5
     133: aload         5
     135: invokevirtual #63                 // Method io/undertow/server/HttpServerExchange.getRequestHeaders:()Lio/undertow/util/HeaderMap;
     138: getstatic     #67                 // Field io/undertow/protocols/http2/Http2Channel.METHOD:Lio/undertow/util/HttpString;
     141: invokevirtual #65                 // Method io/undertow/util/HeaderMap.getFirst:(Lio/undertow/util/HttpString;)Ljava/lang/String;
     144: invokestatic  #68                 // Method io/undertow/util/Methods.fromString:(Ljava/lang/String;)Lio/undertow/util/HttpString;
     147: invokevirtual #69                 // Method io/undertow/server/HttpServerExchange.setRequestMethod:(Lio/undertow/util/HttpString;)Lio/undertow/server/HttpServerExchange;
     150: pop
     151: aload         5
     153: invokevirtual #63                 // Method io/undertow/server/HttpServerExchange.getRequestHeaders:()Lio/undertow/util/HeaderMap;
     156: getstatic     #70                 // Field io/undertow/util/Headers.HOST:Lio/undertow/util/HttpString;
     159: aload         5
     161: invokevirtual #63                 // Method io/undertow/server/HttpServerExchange.getRequestHeaders:()Lio/undertow/util/HeaderMap;
     164: getstatic     #71                 // Field io/undertow/protocols/http2/Http2Channel.AUTHORITY:Lio/undertow/util/HttpString;
     167: invokevirtual #65                 // Method io/undertow/util/HeaderMap.getFirst:(Lio/undertow/util/HttpString;)Ljava/lang/String;
     170: invokevirtual #72                 // Method io/undertow/util/HeaderMap.put:(Lio/undertow/util/HttpString;Ljava/lang/String;)Lio/undertow/util/HeaderMap;
     173: pop
     174: aload         5
     176: invokevirtual #63                 // Method io/undertow/server/HttpServerExchange.getRequestHeaders:()Lio/undertow/util/HeaderMap;
     179: invokestatic  #73                 // Method io/undertow/server/Connectors.areRequestHeadersValid:(Lio/undertow/util/HeaderMap;)Z
     182: ifne          206
     185: getstatic     #38                 // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
     188: ldc           #74                 // String Invalid headers in HTTP/2 request, closing connection. Remote peer %s
     190: aload         4
     192: invokevirtual #75                 // Method io/undertow/server/protocol/http2/Http2ServerConnection.getPeerAddress:()Ljava/net/SocketAddress;
     195: invokeinterface #76,  3           // InterfaceMethod io/undertow/UndertowLogger.debugf:(Ljava/lang/String;Ljava/lang/Object;)V
     200: aload_1
     201: iconst_1
     202: invokevirtual #77                 // Method io/undertow/protocols/http2/Http2Channel.sendGoAway:(I)V
     205: return
     206: aload         5
     208: invokevirtual #63                 // Method io/undertow/server/HttpServerExchange.getRequestHeaders:()Lio/undertow/util/HeaderMap;
     211: getstatic     #78                 // Field io/undertow/protocols/http2/Http2Channel.PATH:Lio/undertow/util/HttpString;
     214: invokevirtual #65                 // Method io/undertow/util/HeaderMap.getFirst:(Lio/undertow/util/HttpString;)Ljava/lang/String;
     217: astore        6
     219: aload         6
     221: ifnull        232
     224: aload         6
     226: invokevirtual #79                 // Method java/lang/String.isEmpty:()Z
     229: ifeq          253
     232: getstatic     #38                 // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
     235: ldc           #80                 // String No :path header sent in HTTP/2 request, closing connection. Remote peer %s
     237: aload         4
     239: invokevirtual #75                 // Method io/undertow/server/protocol/http2/Http2ServerConnection.getPeerAddress:()Ljava/net/SocketAddress;
     242: invokeinterface #76,  3           // InterfaceMethod io/undertow/UndertowLogger.debugf:(Ljava/lang/String;Ljava/lang/Object;)V
     247: aload_1
     248: iconst_1
     249: invokevirtual #77                 // Method io/undertow/protocols/http2/Http2Channel.sendGoAway:(I)V
     252: return
     253: aload_0
     254: getfield      #24                 // Field recordRequestStartTime:Z
     257: ifeq          265
     260: aload         5
     262: invokestatic  #81                 // Method io/undertow/server/Connectors.setRequestStartTime:(Lio/undertow/server/HttpServerExchange;)V
     265: aload_0
     266: aload_3
     267: invokevirtual #55                 // Method io/undertow/protocols/http2/Http2StreamSourceChannel.getResponseChannel:()Lio/undertow/protocols/http2/Http2HeadersStreamSinkChannel;
     270: aload         5
     272: aload         4
     274: invokevirtual #82                 // Method handleCommonSetup:(Lio/undertow/protocols/http2/Http2HeadersStreamSinkChannel;Lio/undertow/server/HttpServerExchange;Lio/undertow/server/protocol/http2/Http2ServerConnection;)V
     277: aload_3
     278: invokevirtual #83                 // Method io/undertow/protocols/http2/Http2StreamSourceChannel.isOpen:()Z
     281: ifne          292
     284: aload         5
     286: invokestatic  #84                 // Method io/undertow/server/Connectors.terminateRequest:(Lio/undertow/server/HttpServerExchange;)V
     289: goto          306
     292: aload_3
     293: new           #85                 // class io/undertow/server/protocol/http2/Http2ReceiveListener$2
     296: dup
     297: aload_0
     298: aload         5
     300: invokespecial #86                 // Method io/undertow/server/protocol/http2/Http2ReceiveListener$2."<init>":(Lio/undertow/server/protocol/http2/Http2ReceiveListener;Lio/undertow/server/HttpServerExchange;)V
     303: invokevirtual #87                 // Method io/undertow/protocols/http2/Http2StreamSourceChannel.setCompletionListener:(Lorg/xnio/ChannelListener;)V
     306: aload_0
     307: getfield      #8                  // Field connectorStatistics:Lio/undertow/server/ConnectorStatisticsImpl;
     310: ifnull        322
     313: aload_0
     314: getfield      #8                  // Field connectorStatistics:Lio/undertow/server/ConnectorStatisticsImpl;
     317: aload         5
     319: invokevirtual #88                 // Method io/undertow/server/ConnectorStatisticsImpl.setup:(Lio/undertow/server/HttpServerExchange;)V
     322: aload         5
     324: aload         6
     326: aload_0
     327: getfield      #30                 // Field encoding:Ljava/lang/String;
     330: aload_0
     331: getfield      #19                 // Field decode:Z
     334: aload_0
     335: getfield      #16                 // Field slashDecodingFlag:Z
     338: aload_0
     339: getfield      #4                  // Field decodeBuffer:Ljava/lang/StringBuilder;
     342: aload_0
     343: getfield      #22                 // Field maxParameters:I
     346: invokestatic  #89                 // Method io/undertow/server/Connectors.setExchangeRequestPath:(Lio/undertow/server/HttpServerExchange;Ljava/lang/String;Ljava/lang/String;ZZLjava/lang/StringBuilder;I)V
     349: goto          382
     352: astore        7
     354: getstatic     #38                 // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
     357: ldc           #91                 // String Failed to set request path
     359: aload         7
     361: invokeinterface #92,  3           // InterfaceMethod io/undertow/UndertowLogger.debug:(Ljava/lang/Object;Ljava/lang/Throwable;)V
     366: aload         5
     368: sipush        400
     371: invokevirtual #94                 // Method io/undertow/server/HttpServerExchange.setStatusCode:(I)Lio/undertow/server/HttpServerExchange;
     374: pop
     375: aload         5
     377: invokevirtual #95                 // Method io/undertow/server/HttpServerExchange.endExchange:()Lio/undertow/server/HttpServerExchange;
     380: pop
     381: return
     382: aload         5
     384: invokevirtual #63                 // Method io/undertow/server/HttpServerExchange.getRequestHeaders:()Lio/undertow/util/HeaderMap;
     387: getstatic     #71                 // Field io/undertow/protocols/http2/Http2Channel.AUTHORITY:Lio/undertow/util/HttpString;
     390: invokevirtual #96                 // Method io/undertow/util/HeaderMap.remove:(Lio/undertow/util/HttpString;)Ljava/util/Collection;
     393: pop
     394: aload         5
     396: invokevirtual #63                 // Method io/undertow/server/HttpServerExchange.getRequestHeaders:()Lio/undertow/util/HeaderMap;
     399: getstatic     #78                 // Field io/undertow/protocols/http2/Http2Channel.PATH:Lio/undertow/util/HttpString;
     402: invokevirtual #96                 // Method io/undertow/util/HeaderMap.remove:(Lio/undertow/util/HttpString;)Ljava/util/Collection;
     405: pop
     406: aload         5
     408: invokevirtual #63                 // Method io/undertow/server/HttpServerExchange.getRequestHeaders:()Lio/undertow/util/HeaderMap;
     411: getstatic     #64                 // Field io/undertow/protocols/http2/Http2Channel.SCHEME:Lio/undertow/util/HttpString;
     414: invokevirtual #96                 // Method io/undertow/util/HeaderMap.remove:(Lio/undertow/util/HttpString;)Ljava/util/Collection;
     417: pop
     418: aload         5
     420: invokevirtual #63                 // Method io/undertow/server/HttpServerExchange.getRequestHeaders:()Lio/undertow/util/HeaderMap;
     423: getstatic     #67                 // Field io/undertow/protocols/http2/Http2Channel.METHOD:Lio/undertow/util/HttpString;
     426: invokevirtual #96                 // Method io/undertow/util/HeaderMap.remove:(Lio/undertow/util/HttpString;)Ljava/util/Collection;
     429: pop
     430: aload_0
     431: getfield      #5                  // Field rootHandler:Lio/undertow/server/HttpHandler;
     434: aload         5
     436: invokestatic  #97                 // Method io/undertow/server/Connectors.executeRootHandler:(Lio/undertow/server/HttpHandler;Lio/undertow/server/HttpServerExchange;)V
     439: return
    Exception table:
       from    to  target type
          45    53    56   Class java/io/IOException
         322   349   352   Class io/undertow/util/ParameterLimitException

  void handleInitialRequest(io.undertow.server.HttpServerExchange, io.undertow.protocols.http2.Http2Channel, byte[]);
    Code:
       0: aload_2
       1: invokevirtual #98                 // Method io/undertow/protocols/http2/Http2Channel.createInitialUpgradeResponseStream:()Lio/undertow/protocols/http2/Http2HeadersStreamSinkChannel;
       4: astore        4
       6: new           #43                 // class io/undertow/server/protocol/http2/Http2ServerConnection
       9: dup
      10: aload_2
      11: aload         4
      13: aload_0
      14: getfield      #6                  // Field undertowOptions:Lorg/xnio/OptionMap;
      17: aload_0
      18: getfield      #7                  // Field bufferSize:I
      21: aload_0
      22: getfield      #5                  // Field rootHandler:Lio/undertow/server/HttpHandler;
      25: invokespecial #99                 // Method io/undertow/server/protocol/http2/Http2ServerConnection."<init>":(Lio/undertow/protocols/http2/Http2Channel;Lio/undertow/protocols/http2/Http2DataStreamSinkChannel;Lorg/xnio/OptionMap;ILio/undertow/server/HttpHandler;)V
      28: astore        5
      30: new           #100                // class io/undertow/util/HeaderMap
      33: dup
      34: invokespecial #101                // Method io/undertow/util/HeaderMap."<init>":()V
      37: astore        6
      39: aload_1
      40: invokevirtual #63                 // Method io/undertow/server/HttpServerExchange.getRequestHeaders:()Lio/undertow/util/HeaderMap;
      43: invokevirtual #102                // Method io/undertow/util/HeaderMap.iterator:()Ljava/util/Iterator;
      46: astore        7
      48: aload         7
      50: invokeinterface #103,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      55: ifeq          86
      58: aload         7
      60: invokeinterface #104,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      65: checkcast     #105                // class io/undertow/util/HeaderValues
      68: astore        8
      70: aload         6
      72: aload         8
      74: invokevirtual #106                // Method io/undertow/util/HeaderValues.getHeaderName:()Lio/undertow/util/HttpString;
      77: aload         8
      79: invokevirtual #107                // Method io/undertow/util/HeaderMap.putAll:(Lio/undertow/util/HttpString;Ljava/util/Collection;)Lio/undertow/util/HeaderMap;
      82: pop
      83: goto          48
      86: new           #54                 // class io/undertow/server/HttpServerExchange
      89: dup
      90: aload         5
      92: aload         6
      94: aload         4
      96: invokevirtual #56                 // Method io/undertow/protocols/http2/Http2HeadersStreamSinkChannel.getHeaders:()Lio/undertow/util/HeaderMap;
      99: aload_0
     100: getfield      #14                 // Field maxEntitySize:J
     103: invokespecial #57                 // Method io/undertow/server/HttpServerExchange."<init>":(Lio/undertow/server/ServerConnection;Lio/undertow/util/HeaderMap;Lio/undertow/util/HeaderMap;J)V
     106: astore        7
     108: aload_1
     109: invokevirtual #63                 // Method io/undertow/server/HttpServerExchange.getRequestHeaders:()Lio/undertow/util/HeaderMap;
     112: getstatic     #108                // Field io/undertow/util/Headers.EXPECT:Lio/undertow/util/HttpString;
     115: invokevirtual #109                // Method io/undertow/util/HeaderMap.contains:(Lio/undertow/util/HttpString;)Z
     118: ifeq          126
     121: aload         7
     123: invokestatic  #110                // Method io/undertow/server/protocol/http/HttpContinue.markContinueResponseSent:(Lio/undertow/server/HttpServerExchange;)V
     126: aload_1
     127: getstatic     #111                // Field io/undertow/server/protocol/http/HttpAttachments.REQUEST_TRAILERS:Lio/undertow/util/AttachmentKey;
     130: invokevirtual #112                // Method io/undertow/server/HttpServerExchange.getAttachment:(Lio/undertow/util/AttachmentKey;)Ljava/lang/Object;
     133: ifnull        155
     136: aload         7
     138: getstatic     #111                // Field io/undertow/server/protocol/http/HttpAttachments.REQUEST_TRAILERS:Lio/undertow/util/AttachmentKey;
     141: aload_1
     142: getstatic     #111                // Field io/undertow/server/protocol/http/HttpAttachments.REQUEST_TRAILERS:Lio/undertow/util/AttachmentKey;
     145: invokevirtual #112                // Method io/undertow/server/HttpServerExchange.getAttachment:(Lio/undertow/util/AttachmentKey;)Ljava/lang/Object;
     148: checkcast     #100                // class io/undertow/util/HeaderMap
     151: invokevirtual #113                // Method io/undertow/server/HttpServerExchange.putAttachment:(Lio/undertow/util/AttachmentKey;Ljava/lang/Object;)Ljava/lang/Object;
     154: pop
     155: aload_1
     156: aload         7
     158: invokestatic  #114                // Method io/undertow/server/Connectors.setRequestStartTime:(Lio/undertow/server/HttpServerExchange;Lio/undertow/server/HttpServerExchange;)V
     161: aload         5
     163: aload         7
     165: invokevirtual #61                 // Method io/undertow/server/protocol/http2/Http2ServerConnection.setExchange:(Lio/undertow/server/HttpServerExchange;)V
     168: aload         7
     170: aload_1
     171: invokevirtual #115                // Method io/undertow/server/HttpServerExchange.getRequestScheme:()Ljava/lang/String;
     174: invokevirtual #66                 // Method io/undertow/server/HttpServerExchange.setRequestScheme:(Ljava/lang/String;)Lio/undertow/server/HttpServerExchange;
     177: pop
     178: aload         7
     180: aload_1
     181: invokevirtual #116                // Method io/undertow/server/HttpServerExchange.getRequestMethod:()Lio/undertow/util/HttpString;
     184: invokevirtual #69                 // Method io/undertow/server/HttpServerExchange.setRequestMethod:(Lio/undertow/util/HttpString;)Lio/undertow/server/HttpServerExchange;
     187: pop
     188: aload         7
     190: aload_1
     191: invokevirtual #117                // Method io/undertow/server/HttpServerExchange.getQueryString:()Ljava/lang/String;
     194: invokevirtual #118                // Method io/undertow/server/HttpServerExchange.setQueryString:(Ljava/lang/String;)Lio/undertow/server/HttpServerExchange;
     197: pop
     198: aload_3
     199: ifnull        225
     202: aload         7
     204: iconst_1
     205: anewarray     #119                // class io/undertow/connector/PooledByteBuffer
     208: dup
     209: iconst_0
     210: new           #120                // class io/undertow/util/ImmediatePooledByteBuffer
     213: dup
     214: aload_3
     215: invokestatic  #121                // Method java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;
     218: invokespecial #122                // Method io/undertow/util/ImmediatePooledByteBuffer."<init>":(Ljava/nio/ByteBuffer;)V
     221: aastore
     222: invokestatic  #123                // Method io/undertow/server/Connectors.ungetRequestBytes:(Lio/undertow/server/HttpServerExchange;[Lio/undertow/connector/PooledByteBuffer;)V
     225: aload         7
     227: invokestatic  #84                 // Method io/undertow/server/Connectors.terminateRequest:(Lio/undertow/server/HttpServerExchange;)V
     230: aload         7
     232: invokevirtual #117                // Method io/undertow/server/HttpServerExchange.getQueryString:()Ljava/lang/String;
     235: invokevirtual #79                 // Method java/lang/String.isEmpty:()Z
     238: ifeq          248
     241: aload_1
     242: invokevirtual #124                // Method io/undertow/server/HttpServerExchange.getRequestURI:()Ljava/lang/String;
     245: goto          262
     248: aload_1
     249: invokevirtual #124                // Method io/undertow/server/HttpServerExchange.getRequestURI:()Ljava/lang/String;
     252: aload         7
     254: invokevirtual #117                // Method io/undertow/server/HttpServerExchange.getQueryString:()Ljava/lang/String;
     257: invokedynamic #125,  0            // InvokeDynamic #0:makeConcatWithConstants:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
     262: astore        8
     264: aload         7
     266: aload         8
     268: aload_0
     269: getfield      #30                 // Field encoding:Ljava/lang/String;
     272: aload_0
     273: getfield      #19                 // Field decode:Z
     276: aload_0
     277: getfield      #16                 // Field slashDecodingFlag:Z
     280: aload_0
     281: getfield      #4                  // Field decodeBuffer:Ljava/lang/StringBuilder;
     284: aload_0
     285: getfield      #22                 // Field maxParameters:I
     288: invokestatic  #89                 // Method io/undertow/server/Connectors.setExchangeRequestPath:(Lio/undertow/server/HttpServerExchange;Ljava/lang/String;Ljava/lang/String;ZZLjava/lang/StringBuilder;I)V
     291: goto          312
     294: astore        9
     296: aload         7
     298: sipush        400
     301: invokevirtual #94                 // Method io/undertow/server/HttpServerExchange.setStatusCode:(I)Lio/undertow/server/HttpServerExchange;
     304: pop
     305: aload         7
     307: invokevirtual #95                 // Method io/undertow/server/HttpServerExchange.endExchange:()Lio/undertow/server/HttpServerExchange;
     310: pop
     311: return
     312: aload_0
     313: aload         4
     315: aload         7
     317: aload         5
     319: invokevirtual #82                 // Method handleCommonSetup:(Lio/undertow/protocols/http2/Http2HeadersStreamSinkChannel;Lio/undertow/server/HttpServerExchange;Lio/undertow/server/protocol/http2/Http2ServerConnection;)V
     322: aload_0
     323: getfield      #5                  // Field rootHandler:Lio/undertow/server/HttpHandler;
     326: aload         7
     328: invokestatic  #97                 // Method io/undertow/server/Connectors.executeRootHandler:(Lio/undertow/server/HttpHandler;Lio/undertow/server/HttpServerExchange;)V
     331: return
    Exception table:
       from    to  target type
         264   291   294   Class io/undertow/util/ParameterLimitException

  private void handleCommonSetup(io.undertow.protocols.http2.Http2HeadersStreamSinkChannel, io.undertow.server.HttpServerExchange, io.undertow.server.protocol.http2.Http2ServerConnection);
    Code:
       0: aload_1
       1: invokevirtual #126                // Method io/undertow/protocols/http2/Http2HeadersStreamSinkChannel.getChannel:()Lio/undertow/server/protocol/framed/AbstractFramedChannel;
       4: checkcast     #48                 // class io/undertow/protocols/http2/Http2Channel
       7: astore        4
       9: aload         4
      11: invokevirtual #127                // Method io/undertow/protocols/http2/Http2Channel.getSslSession:()Ljavax/net/ssl/SSLSession;
      14: astore        5
      16: aload         5
      18: ifnull        34
      21: aload_3
      22: new           #128                // class io/undertow/server/protocol/http2/Http2SslSessionInfo
      25: dup
      26: aload         4
      28: invokespecial #129                // Method io/undertow/server/protocol/http2/Http2SslSessionInfo."<init>":(Lio/undertow/protocols/http2/Http2Channel;)V
      31: invokevirtual #130                // Method io/undertow/server/protocol/http2/Http2ServerConnection.setSslSessionInfo:(Lio/undertow/server/SSLSessionInfo;)V
      34: aload_1
      35: new           #131                // class io/undertow/server/protocol/http2/Http2ReceiveListener$3
      38: dup
      39: aload_0
      40: aload_2
      41: invokespecial #132                // Method io/undertow/server/protocol/http2/Http2ReceiveListener$3."<init>":(Lio/undertow/server/protocol/http2/Http2ReceiveListener;Lio/undertow/server/HttpServerExchange;)V
      44: invokevirtual #133                // Method io/undertow/protocols/http2/Http2HeadersStreamSinkChannel.setTrailersProducer:(Lio/undertow/protocols/http2/Http2DataStreamSinkChannel$TrailersProducer;)V
      47: aload_1
      48: new           #134                // class io/undertow/server/protocol/http2/Http2ReceiveListener$4
      51: dup
      52: aload_0
      53: aload_2
      54: invokespecial #135                // Method io/undertow/server/protocol/http2/Http2ReceiveListener$4."<init>":(Lio/undertow/server/protocol/http2/Http2ReceiveListener;Lio/undertow/server/HttpServerExchange;)V
      57: invokevirtual #136                // Method io/undertow/protocols/http2/Http2HeadersStreamSinkChannel.setCompletionListener:(Lorg/xnio/ChannelListener;)V
      60: aload_2
      61: getstatic     #137                // Field io/undertow/util/Protocols.HTTP_2_0:Lio/undertow/util/HttpString;
      64: invokevirtual #138                // Method io/undertow/server/HttpServerExchange.setProtocol:(Lio/undertow/util/HttpString;)Lio/undertow/server/HttpServerExchange;
      67: pop
      68: aload_2
      69: invokevirtual #116                // Method io/undertow/server/HttpServerExchange.getRequestMethod:()Lio/undertow/util/HttpString;
      72: getstatic     #139                // Field io/undertow/util/Methods.HEAD:Lio/undertow/util/HttpString;
      75: invokevirtual #140                // Method io/undertow/util/HttpString.equals:(Lio/undertow/util/HttpString;)Z
      78: ifeq          94
      81: aload_2
      82: new           #141                // class io/undertow/server/protocol/http2/Http2ReceiveListener$5
      85: dup
      86: aload_0
      87: invokespecial #142                // Method io/undertow/server/protocol/http2/Http2ReceiveListener$5."<init>":(Lio/undertow/server/protocol/http2/Http2ReceiveListener;)V
      90: invokevirtual #143                // Method io/undertow/server/HttpServerExchange.addResponseWrapper:(Lio/undertow/server/ConduitWrapper;)Lio/undertow/server/HttpServerExchange;
      93: pop
      94: return

  private boolean checkRequestHeaders(io.undertow.util.HeaderMap);
    Code:
       0: aload_1
       1: getstatic     #67                 // Field io/undertow/protocols/http2/Http2Channel.METHOD:Lio/undertow/util/HttpString;
       4: invokevirtual #144                // Method io/undertow/util/HeaderMap.count:(Lio/undertow/util/HttpString;)I
       7: iconst_1
       8: if_icmpne     21
      11: aload_1
      12: getstatic     #145                // Field io/undertow/util/Headers.CONNECTION:Lio/undertow/util/HttpString;
      15: invokevirtual #109                // Method io/undertow/util/HeaderMap.contains:(Lio/undertow/util/HttpString;)Z
      18: ifeq          23
      21: iconst_0
      22: ireturn
      23: aload_1
      24: getstatic     #67                 // Field io/undertow/protocols/http2/Http2Channel.METHOD:Lio/undertow/util/HttpString;
      27: invokevirtual #146                // Method io/undertow/util/HeaderMap.get:(Lio/undertow/util/HttpString;)Lio/undertow/util/HeaderValues;
      30: ldc           #148                // String CONNECT
      32: invokevirtual #149                // Method io/undertow/util/HeaderValues.contains:(Ljava/lang/Object;)Z
      35: ifeq          71
      38: aload_1
      39: getstatic     #64                 // Field io/undertow/protocols/http2/Http2Channel.SCHEME:Lio/undertow/util/HttpString;
      42: invokevirtual #109                // Method io/undertow/util/HeaderMap.contains:(Lio/undertow/util/HttpString;)Z
      45: ifne          69
      48: aload_1
      49: getstatic     #78                 // Field io/undertow/protocols/http2/Http2Channel.PATH:Lio/undertow/util/HttpString;
      52: invokevirtual #109                // Method io/undertow/util/HeaderMap.contains:(Lio/undertow/util/HttpString;)Z
      55: ifne          69
      58: aload_1
      59: getstatic     #71                 // Field io/undertow/protocols/http2/Http2Channel.AUTHORITY:Lio/undertow/util/HttpString;
      62: invokevirtual #144                // Method io/undertow/util/HeaderMap.count:(Lio/undertow/util/HttpString;)I
      65: iconst_1
      66: if_icmpeq     95
      69: iconst_0
      70: ireturn
      71: aload_1
      72: getstatic     #64                 // Field io/undertow/protocols/http2/Http2Channel.SCHEME:Lio/undertow/util/HttpString;
      75: invokevirtual #144                // Method io/undertow/util/HeaderMap.count:(Lio/undertow/util/HttpString;)I
      78: iconst_1
      79: if_icmpne     93
      82: aload_1
      83: getstatic     #78                 // Field io/undertow/protocols/http2/Http2Channel.PATH:Lio/undertow/util/HttpString;
      86: invokevirtual #144                // Method io/undertow/util/HeaderMap.count:(Lio/undertow/util/HttpString;)I
      89: iconst_1
      90: if_icmpeq     95
      93: iconst_0
      94: ireturn
      95: aload_1
      96: getstatic     #150                // Field io/undertow/util/Headers.TE:Lio/undertow/util/HttpString;
      99: invokevirtual #109                // Method io/undertow/util/HeaderMap.contains:(Lio/undertow/util/HttpString;)Z
     102: ifeq          149
     105: aload_1
     106: getstatic     #150                // Field io/undertow/util/Headers.TE:Lio/undertow/util/HttpString;
     109: invokevirtual #146                // Method io/undertow/util/HeaderMap.get:(Lio/undertow/util/HttpString;)Lio/undertow/util/HeaderValues;
     112: invokevirtual #151                // Method io/undertow/util/HeaderValues.iterator:()Ljava/util/Iterator;
     115: astore_2
     116: aload_2
     117: invokeinterface #103,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
     122: ifeq          149
     125: aload_2
     126: invokeinterface #104,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     131: checkcast     #29                 // class java/lang/String
     134: astore_3
     135: aload_3
     136: ldc           #152                // String trailers
     138: invokevirtual #153                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     141: ifne          146
     144: iconst_0
     145: ireturn
     146: goto          116
     149: aload_1
     150: getstatic     #78                 // Field io/undertow/protocols/http2/Http2Channel.PATH:Lio/undertow/util/HttpString;
     153: invokevirtual #109                // Method io/undertow/util/HeaderMap.contains:(Lio/undertow/util/HttpString;)Z
     156: ifeq          218
     159: aload_1
     160: getstatic     #78                 // Field io/undertow/protocols/http2/Http2Channel.PATH:Lio/undertow/util/HttpString;
     163: invokevirtual #146                // Method io/undertow/util/HeaderMap.get:(Lio/undertow/util/HttpString;)Lio/undertow/util/HeaderValues;
     166: invokevirtual #154                // Method io/undertow/util/HeaderValues.getFirst:()Ljava/lang/String;
     169: getstatic     #155                // Field java/nio/charset/StandardCharsets.ISO_8859_1:Ljava/nio/charset/Charset;
     172: invokevirtual #156                // Method java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B
     175: astore_2
     176: aload_2
     177: arraylength
     178: istore_3
     179: iconst_0
     180: istore        4
     182: iload         4
     184: iload_3
     185: if_icmpge     218
     188: aload_2
     189: iload         4
     191: baload
     192: istore        5
     194: aload_0
     195: getfield      #32                 // Field allowUnescapedCharactersInUrl:Z
     198: ifne          212
     201: iload         5
     203: i2c
     204: invokestatic  #157                // Method io/undertow/server/protocol/http/HttpRequestParser.isTargetCharacterAllowed:(C)Z
     207: ifne          212
     210: iconst_0
     211: ireturn
     212: iinc          4, 1
     215: goto          182
     218: aload_1
     219: getstatic     #64                 // Field io/undertow/protocols/http2/Http2Channel.SCHEME:Lio/undertow/util/HttpString;
     222: invokevirtual #109                // Method io/undertow/util/HeaderMap.contains:(Lio/undertow/util/HttpString;)Z
     225: ifeq          279
     228: aload_1
     229: getstatic     #64                 // Field io/undertow/protocols/http2/Http2Channel.SCHEME:Lio/undertow/util/HttpString;
     232: invokevirtual #146                // Method io/undertow/util/HeaderMap.get:(Lio/undertow/util/HttpString;)Lio/undertow/util/HeaderValues;
     235: invokevirtual #154                // Method io/undertow/util/HeaderValues.getFirst:()Ljava/lang/String;
     238: getstatic     #155                // Field java/nio/charset/StandardCharsets.ISO_8859_1:Ljava/nio/charset/Charset;
     241: invokevirtual #156                // Method java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B
     244: astore_2
     245: aload_2
     246: arraylength
     247: istore_3
     248: iconst_0
     249: istore        4
     251: iload         4
     253: iload_3
     254: if_icmpge     279
     257: aload_2
     258: iload         4
     260: baload
     261: istore        5
     263: iload         5
     265: invokestatic  #158                // Method io/undertow/server/Connectors.isValidSchemeCharacter:(B)Z
     268: ifne          273
     271: iconst_0
     272: ireturn
     273: iinc          4, 1
     276: goto          251
     279: aload_1
     280: getstatic     #71                 // Field io/undertow/protocols/http2/Http2Channel.AUTHORITY:Lio/undertow/util/HttpString;
     283: invokevirtual #109                // Method io/undertow/util/HeaderMap.contains:(Lio/undertow/util/HttpString;)Z
     286: ifeq          341
     289: aload_1
     290: getstatic     #71                 // Field io/undertow/protocols/http2/Http2Channel.AUTHORITY:Lio/undertow/util/HttpString;
     293: invokevirtual #146                // Method io/undertow/util/HeaderMap.get:(Lio/undertow/util/HttpString;)Lio/undertow/util/HeaderValues;
     296: invokevirtual #154                // Method io/undertow/util/HeaderValues.getFirst:()Ljava/lang/String;
     299: getstatic     #155                // Field java/nio/charset/StandardCharsets.ISO_8859_1:Ljava/nio/charset/Charset;
     302: invokevirtual #156                // Method java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B
     305: astore_2
     306: aload_2
     307: arraylength
     308: istore_3
     309: iconst_0
     310: istore        4
     312: iload         4
     314: iload_3
     315: if_icmpge     341
     318: aload_2
     319: iload         4
     321: baload
     322: istore        5
     324: iload         5
     326: i2c
     327: invokestatic  #157                // Method io/undertow/server/protocol/http/HttpRequestParser.isTargetCharacterAllowed:(C)Z
     330: ifne          335
     333: iconst_0
     334: ireturn
     335: iinc          4, 1
     338: goto          312
     341: aload_1
     342: getstatic     #67                 // Field io/undertow/protocols/http2/Http2Channel.METHOD:Lio/undertow/util/HttpString;
     345: invokevirtual #109                // Method io/undertow/util/HeaderMap.contains:(Lio/undertow/util/HttpString;)Z
     348: ifeq          402
     351: aload_1
     352: getstatic     #67                 // Field io/undertow/protocols/http2/Http2Channel.METHOD:Lio/undertow/util/HttpString;
     355: invokevirtual #146                // Method io/undertow/util/HeaderMap.get:(Lio/undertow/util/HttpString;)Lio/undertow/util/HeaderValues;
     358: invokevirtual #154                // Method io/undertow/util/HeaderValues.getFirst:()Ljava/lang/String;
     361: getstatic     #155                // Field java/nio/charset/StandardCharsets.ISO_8859_1:Ljava/nio/charset/Charset;
     364: invokevirtual #156                // Method java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B
     367: astore_2
     368: aload_2
     369: arraylength
     370: istore_3
     371: iconst_0
     372: istore        4
     374: iload         4
     376: iload_3
     377: if_icmpge     402
     380: aload_2
     381: iload         4
     383: baload
     384: istore        5
     386: iload         5
     388: invokestatic  #159                // Method io/undertow/server/Connectors.isValidTokenCharacter:(B)Z
     391: ifne          396
     394: iconst_0
     395: ireturn
     396: iinc          4, 1
     399: goto          374
     402: iconst_1
     403: ireturn

  public void handleEvent(java.nio.channels.Channel);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #48                 // class io/undertow/protocols/http2/Http2Channel
       5: invokevirtual #160                // Method handleEvent:(Lio/undertow/protocols/http2/Http2Channel;)V
       8: return
}
