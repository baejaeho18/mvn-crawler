Compiled from "AjpReadListener.java"
class io.undertow.server.protocol.ajp.AjpReadListener$2 implements org.xnio.ChannelListener<org.xnio.conduits.ConduitStreamSinkChannel> {
  final java.nio.ByteBuffer val$buffer;

  final org.xnio.StreamConnection val$underlyingChannel;

  final io.undertow.server.protocol.ajp.AjpReadListener this$0;

  io.undertow.server.protocol.ajp.AjpReadListener$2(io.undertow.server.protocol.ajp.AjpReadListener, java.nio.ByteBuffer, org.xnio.StreamConnection);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lio/undertow/server/protocol/ajp/AjpReadListener;
       5: aload_0
       6: aload_2
       7: putfield      #2                  // Field val$buffer:Ljava/nio/ByteBuffer;
      10: aload_0
      11: aload_3
      12: putfield      #3                  // Field val$underlyingChannel:Lorg/xnio/StreamConnection;
      15: aload_0
      16: invokespecial #4                  // Method java/lang/Object."<init>":()V
      19: return

  public void handleEvent(org.xnio.conduits.ConduitStreamSinkChannel);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #2                  // Field val$buffer:Ljava/nio/ByteBuffer;
       5: invokevirtual #5                  // Method org/xnio/conduits/ConduitStreamSinkChannel.write:(Ljava/nio/ByteBuffer;)I
       8: istore_2
       9: iload_2
      10: ifne          14
      13: return
      14: goto          37
      17: astore_3
      18: getstatic     #7                  // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
      21: aload_3
      22: invokeinterface #8,  2            // InterfaceMethod io/undertow/UndertowLogger.ioException:(Ljava/io/IOException;)V
      27: aload_0
      28: getfield      #1                  // Field this$0:Lio/undertow/server/protocol/ajp/AjpReadListener;
      31: getfield      #9                  // Field io/undertow/server/protocol/ajp/AjpReadListener.connection:Lio/undertow/server/protocol/ajp/AjpServerConnection;
      34: invokestatic  #10                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
      37: aload_0
      38: getfield      #2                  // Field val$buffer:Ljava/nio/ByteBuffer;
      41: invokevirtual #11                 // Method java/nio/ByteBuffer.hasRemaining:()Z
      44: ifne          0
      47: aload_1
      48: invokevirtual #12                 // Method org/xnio/conduits/ConduitStreamSinkChannel.suspendWrites:()V
      51: aload_0
      52: getfield      #1                  // Field this$0:Lio/undertow/server/protocol/ajp/AjpReadListener;
      55: aload_0
      56: getfield      #3                  // Field val$underlyingChannel:Lorg/xnio/StreamConnection;
      59: invokevirtual #13                 // Method org/xnio/StreamConnection.getSourceChannel:()Lorg/xnio/conduits/ConduitStreamSourceChannel;
      62: invokevirtual #14                 // Method io/undertow/server/protocol/ajp/AjpReadListener.handleEvent:(Lorg/xnio/channels/StreamSourceChannel;)V
      65: return
    Exception table:
       from    to  target type
           0    13    17   Class java/io/IOException

  public void handleEvent(java.nio.channels.Channel);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #15                 // class org/xnio/conduits/ConduitStreamSinkChannel
       5: invokevirtual #16                 // Method handleEvent:(Lorg/xnio/conduits/ConduitStreamSinkChannel;)V
       8: return
}
