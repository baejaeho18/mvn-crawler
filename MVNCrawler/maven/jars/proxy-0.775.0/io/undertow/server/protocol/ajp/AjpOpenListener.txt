Compiled from "AjpOpenListener.java"
public class io.undertow.server.protocol.ajp.AjpOpenListener implements io.undertow.server.OpenListener {
  private static final java.lang.String DEFAULT_AJP_ALLOWED_REQUEST_ATTRIBUTES_PATTERN;

  private final java.util.Set<io.undertow.server.protocol.ajp.AjpServerConnection> connections;

  private final io.undertow.connector.ByteBufferPool bufferPool;

  private final int bufferSize;

  private volatile java.lang.String scheme;

  private volatile io.undertow.server.HttpHandler rootHandler;

  private volatile org.xnio.OptionMap undertowOptions;

  private volatile io.undertow.server.protocol.ajp.AjpRequestParser parser;

  private volatile boolean statisticsEnabled;

  private final io.undertow.server.ConnectorStatisticsImpl connectorStatistics;

  private final io.undertow.server.ServerConnection$CloseListener closeListener;

  public io.undertow.server.protocol.ajp.AjpOpenListener(org.xnio.Pool<java.nio.ByteBuffer>);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #1                  // Field org/xnio/OptionMap.EMPTY:Lorg/xnio/OptionMap;
       5: invokespecial #2                  // Method "<init>":(Lorg/xnio/Pool;Lorg/xnio/OptionMap;)V
       8: return

  public io.undertow.server.protocol.ajp.AjpOpenListener(org.xnio.Pool<java.nio.ByteBuffer>, org.xnio.OptionMap);
    Code:
       0: aload_0
       1: new           #3                  // class io/undertow/server/XnioByteBufferPool
       4: dup
       5: aload_1
       6: invokespecial #4                  // Method io/undertow/server/XnioByteBufferPool."<init>":(Lorg/xnio/Pool;)V
       9: aload_2
      10: invokespecial #5                  // Method "<init>":(Lio/undertow/connector/ByteBufferPool;Lorg/xnio/OptionMap;)V
      13: return

  public io.undertow.server.protocol.ajp.AjpOpenListener(io.undertow.connector.ByteBufferPool);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #1                  // Field org/xnio/OptionMap.EMPTY:Lorg/xnio/OptionMap;
       5: invokespecial #5                  // Method "<init>":(Lio/undertow/connector/ByteBufferPool;Lorg/xnio/OptionMap;)V
       8: return

  public io.undertow.server.protocol.ajp.AjpOpenListener(io.undertow.connector.ByteBufferPool, org.xnio.OptionMap);
    Code:
       0: aload_0
       1: invokespecial #6                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #7                  // class java/util/concurrent/ConcurrentHashMap
       8: dup
       9: invokespecial #8                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      12: invokestatic  #9                  // Method java/util/Collections.newSetFromMap:(Ljava/util/Map;)Ljava/util/Set;
      15: putfield      #10                 // Field connections:Ljava/util/Set;
      18: aload_0
      19: new           #11                 // class io/undertow/server/protocol/ajp/AjpOpenListener$1
      22: dup
      23: aload_0
      24: invokespecial #12                 // Method io/undertow/server/protocol/ajp/AjpOpenListener$1."<init>":(Lio/undertow/server/protocol/ajp/AjpOpenListener;)V
      27: putfield      #13                 // Field closeListener:Lio/undertow/server/ServerConnection$CloseListener;
      30: aload_0
      31: aload_2
      32: putfield      #14                 // Field undertowOptions:Lorg/xnio/OptionMap;
      35: aload_0
      36: aload_1
      37: putfield      #15                 // Field bufferPool:Lio/undertow/connector/ByteBufferPool;
      40: aload_1
      41: invokeinterface #16,  1           // InterfaceMethod io/undertow/connector/ByteBufferPool.allocate:()Lio/undertow/connector/PooledByteBuffer;
      46: astore_3
      47: aload_0
      48: aload_3
      49: invokeinterface #17,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
      54: invokevirtual #18                 // Method java/nio/ByteBuffer.remaining:()I
      57: putfield      #19                 // Field bufferSize:I
      60: aload_3
      61: invokeinterface #20,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
      66: aload_0
      67: new           #21                 // class io/undertow/server/protocol/ajp/AjpRequestParser
      70: dup
      71: aload_2
      72: getstatic     #22                 // Field io/undertow/UndertowOptions.URL_CHARSET:Lorg/xnio/Option;
      75: getstatic     #23                 // Field java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;
      78: invokevirtual #24                 // Method java/nio/charset/Charset.name:()Ljava/lang/String;
      81: invokevirtual #25                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;Ljava/lang/Object;)Ljava/lang/Object;
      84: checkcast     #26                 // class java/lang/String
      87: aload_2
      88: getstatic     #27                 // Field io/undertow/UndertowOptions.DECODE_URL:Lorg/xnio/Option;
      91: iconst_1
      92: invokevirtual #28                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;Z)Z
      95: aload_2
      96: getstatic     #29                 // Field io/undertow/UndertowOptions.MAX_PARAMETERS:Lorg/xnio/Option;
      99: sipush        1000
     102: invokevirtual #31                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;I)I
     105: aload_2
     106: getstatic     #32                 // Field io/undertow/UndertowOptions.MAX_HEADERS:Lorg/xnio/Option;
     109: sipush        200
     112: invokevirtual #31                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;I)I
     115: aload_2
     116: invokestatic  #33                 // Method io/undertow/util/URLUtils.getSlashDecodingFlag:(Lorg/xnio/OptionMap;)Z
     119: aload_2
     120: getstatic     #34                 // Field io/undertow/UndertowOptions.ALLOW_UNESCAPED_CHARACTERS_IN_URL:Lorg/xnio/Option;
     123: iconst_0
     124: invokevirtual #28                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;Z)Z
     127: aload_2
     128: getstatic     #35                 // Field io/undertow/UndertowOptions.AJP_ALLOWED_REQUEST_ATTRIBUTES_PATTERN:Lorg/xnio/Option;
     131: getstatic     #36                 // Field DEFAULT_AJP_ALLOWED_REQUEST_ATTRIBUTES_PATTERN:Ljava/lang/String;
     134: invokevirtual #25                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;Ljava/lang/Object;)Ljava/lang/Object;
     137: checkcast     #26                 // class java/lang/String
     140: invokespecial #37                 // Method io/undertow/server/protocol/ajp/AjpRequestParser."<init>":(Ljava/lang/String;ZIIZZLjava/lang/String;)V
     143: putfield      #38                 // Field parser:Lio/undertow/server/protocol/ajp/AjpRequestParser;
     146: aload_0
     147: new           #39                 // class io/undertow/server/ConnectorStatisticsImpl
     150: dup
     151: invokespecial #40                 // Method io/undertow/server/ConnectorStatisticsImpl."<init>":()V
     154: putfield      #41                 // Field connectorStatistics:Lio/undertow/server/ConnectorStatisticsImpl;
     157: aload_0
     158: aload_2
     159: getstatic     #42                 // Field io/undertow/UndertowOptions.ENABLE_CONNECTOR_STATISTICS:Lorg/xnio/Option;
     162: iconst_0
     163: invokevirtual #28                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;Z)Z
     166: putfield      #43                 // Field statisticsEnabled:Z
     169: return

  public void handleEvent(org.xnio.StreamConnection);
    Code:
       0: getstatic     #44                 // Field io/undertow/UndertowLogger.REQUEST_LOGGER:Lio/undertow/UndertowLogger;
       3: invokeinterface #45,  1           // InterfaceMethod io/undertow/UndertowLogger.isTraceEnabled:()Z
       8: ifeq          25
      11: getstatic     #44                 // Field io/undertow/UndertowLogger.REQUEST_LOGGER:Lio/undertow/UndertowLogger;
      14: ldc           #46                 // String Opened connection with %s
      16: aload_1
      17: invokevirtual #47                 // Method org/xnio/StreamConnection.getPeerAddress:()Ljava/net/SocketAddress;
      20: invokeinterface #48,  3           // InterfaceMethod io/undertow/UndertowLogger.tracef:(Ljava/lang/String;Ljava/lang/Object;)V
      25: aload_1
      26: getstatic     #49                 // Field org/xnio/Options.READ_TIMEOUT:Lorg/xnio/Option;
      29: invokevirtual #50                 // Method org/xnio/StreamConnection.getOption:(Lorg/xnio/Option;)Ljava/lang/Object;
      32: checkcast     #51                 // class java/lang/Integer
      35: astore_2
      36: aload_0
      37: getfield      #14                 // Field undertowOptions:Lorg/xnio/OptionMap;
      40: getstatic     #52                 // Field io/undertow/UndertowOptions.IDLE_TIMEOUT:Lorg/xnio/Option;
      43: invokevirtual #53                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;)Ljava/lang/Object;
      46: checkcast     #51                 // class java/lang/Integer
      49: astore_3
      50: aload_3
      51: ifnull        82
      54: new           #54                 // class io/undertow/conduits/IdleTimeoutConduit
      57: dup
      58: aload_1
      59: invokespecial #55                 // Method io/undertow/conduits/IdleTimeoutConduit."<init>":(Lorg/xnio/StreamConnection;)V
      62: astore        4
      64: aload_1
      65: invokevirtual #56                 // Method org/xnio/StreamConnection.getSourceChannel:()Lorg/xnio/conduits/ConduitStreamSourceChannel;
      68: aload         4
      70: invokevirtual #57                 // Method org/xnio/conduits/ConduitStreamSourceChannel.setConduit:(Lorg/xnio/conduits/StreamSourceConduit;)V
      73: aload_1
      74: invokevirtual #58                 // Method org/xnio/StreamConnection.getSinkChannel:()Lorg/xnio/conduits/ConduitStreamSinkChannel;
      77: aload         4
      79: invokevirtual #59                 // Method org/xnio/conduits/ConduitStreamSinkChannel.setConduit:(Lorg/xnio/conduits/StreamSinkConduit;)V
      82: aload_2
      83: ifnull        116
      86: aload_2
      87: invokevirtual #60                 // Method java/lang/Integer.intValue:()I
      90: ifle          116
      93: aload_1
      94: invokevirtual #56                 // Method org/xnio/StreamConnection.getSourceChannel:()Lorg/xnio/conduits/ConduitStreamSourceChannel;
      97: new           #61                 // class io/undertow/conduits/ReadTimeoutStreamSourceConduit
     100: dup
     101: aload_1
     102: invokevirtual #56                 // Method org/xnio/StreamConnection.getSourceChannel:()Lorg/xnio/conduits/ConduitStreamSourceChannel;
     105: invokevirtual #62                 // Method org/xnio/conduits/ConduitStreamSourceChannel.getConduit:()Lorg/xnio/conduits/StreamSourceConduit;
     108: aload_1
     109: aload_0
     110: invokespecial #63                 // Method io/undertow/conduits/ReadTimeoutStreamSourceConduit."<init>":(Lorg/xnio/conduits/StreamSourceConduit;Lorg/xnio/StreamConnection;Lio/undertow/server/OpenListener;)V
     113: invokevirtual #57                 // Method org/xnio/conduits/ConduitStreamSourceChannel.setConduit:(Lorg/xnio/conduits/StreamSourceConduit;)V
     116: aload_1
     117: getstatic     #64                 // Field org/xnio/Options.WRITE_TIMEOUT:Lorg/xnio/Option;
     120: invokevirtual #50                 // Method org/xnio/StreamConnection.getOption:(Lorg/xnio/Option;)Ljava/lang/Object;
     123: checkcast     #51                 // class java/lang/Integer
     126: astore        4
     128: aload         4
     130: ifnull        164
     133: aload         4
     135: invokevirtual #60                 // Method java/lang/Integer.intValue:()I
     138: ifle          164
     141: aload_1
     142: invokevirtual #58                 // Method org/xnio/StreamConnection.getSinkChannel:()Lorg/xnio/conduits/ConduitStreamSinkChannel;
     145: new           #65                 // class io/undertow/conduits/WriteTimeoutStreamSinkConduit
     148: dup
     149: aload_1
     150: invokevirtual #58                 // Method org/xnio/StreamConnection.getSinkChannel:()Lorg/xnio/conduits/ConduitStreamSinkChannel;
     153: invokevirtual #66                 // Method org/xnio/conduits/ConduitStreamSinkChannel.getConduit:()Lorg/xnio/conduits/StreamSinkConduit;
     156: aload_1
     157: aload_0
     158: invokespecial #67                 // Method io/undertow/conduits/WriteTimeoutStreamSinkConduit."<init>":(Lorg/xnio/conduits/StreamSinkConduit;Lorg/xnio/StreamConnection;Lio/undertow/server/OpenListener;)V
     161: invokevirtual #59                 // Method org/xnio/conduits/ConduitStreamSinkChannel.setConduit:(Lorg/xnio/conduits/StreamSinkConduit;)V
     164: goto          181
     167: astore_2
     168: aload_1
     169: invokestatic  #69                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
     172: getstatic     #70                 // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
     175: aload_2
     176: invokeinterface #71,  2           // InterfaceMethod io/undertow/UndertowLogger.ioException:(Ljava/io/IOException;)V
     181: aload_0
     182: getfield      #43                 // Field statisticsEnabled:Z
     185: ifeq          251
     188: aload_1
     189: invokevirtual #58                 // Method org/xnio/StreamConnection.getSinkChannel:()Lorg/xnio/conduits/ConduitStreamSinkChannel;
     192: new           #72                 // class io/undertow/conduits/BytesSentStreamSinkConduit
     195: dup
     196: aload_1
     197: invokevirtual #58                 // Method org/xnio/StreamConnection.getSinkChannel:()Lorg/xnio/conduits/ConduitStreamSinkChannel;
     200: invokevirtual #66                 // Method org/xnio/conduits/ConduitStreamSinkChannel.getConduit:()Lorg/xnio/conduits/StreamSinkConduit;
     203: aload_0
     204: getfield      #41                 // Field connectorStatistics:Lio/undertow/server/ConnectorStatisticsImpl;
     207: invokevirtual #73                 // Method io/undertow/server/ConnectorStatisticsImpl.sentAccumulator:()Lio/undertow/conduits/ByteActivityCallback;
     210: invokespecial #74                 // Method io/undertow/conduits/BytesSentStreamSinkConduit."<init>":(Lorg/xnio/conduits/StreamSinkConduit;Lio/undertow/conduits/ByteActivityCallback;)V
     213: invokevirtual #59                 // Method org/xnio/conduits/ConduitStreamSinkChannel.setConduit:(Lorg/xnio/conduits/StreamSinkConduit;)V
     216: aload_1
     217: invokevirtual #56                 // Method org/xnio/StreamConnection.getSourceChannel:()Lorg/xnio/conduits/ConduitStreamSourceChannel;
     220: new           #75                 // class io/undertow/conduits/BytesReceivedStreamSourceConduit
     223: dup
     224: aload_1
     225: invokevirtual #56                 // Method org/xnio/StreamConnection.getSourceChannel:()Lorg/xnio/conduits/ConduitStreamSourceChannel;
     228: invokevirtual #62                 // Method org/xnio/conduits/ConduitStreamSourceChannel.getConduit:()Lorg/xnio/conduits/StreamSourceConduit;
     231: aload_0
     232: getfield      #41                 // Field connectorStatistics:Lio/undertow/server/ConnectorStatisticsImpl;
     235: invokevirtual #76                 // Method io/undertow/server/ConnectorStatisticsImpl.receivedAccumulator:()Lio/undertow/conduits/ByteActivityCallback;
     238: invokespecial #77                 // Method io/undertow/conduits/BytesReceivedStreamSourceConduit."<init>":(Lorg/xnio/conduits/StreamSourceConduit;Lio/undertow/conduits/ByteActivityCallback;)V
     241: invokevirtual #57                 // Method org/xnio/conduits/ConduitStreamSourceChannel.setConduit:(Lorg/xnio/conduits/StreamSourceConduit;)V
     244: aload_0
     245: getfield      #41                 // Field connectorStatistics:Lio/undertow/server/ConnectorStatisticsImpl;
     248: invokevirtual #78                 // Method io/undertow/server/ConnectorStatisticsImpl.incrementConnectionCount:()V
     251: new           #79                 // class io/undertow/server/protocol/ajp/AjpServerConnection
     254: dup
     255: aload_1
     256: aload_0
     257: getfield      #15                 // Field bufferPool:Lio/undertow/connector/ByteBufferPool;
     260: aload_0
     261: getfield      #80                 // Field rootHandler:Lio/undertow/server/HttpHandler;
     264: aload_0
     265: getfield      #14                 // Field undertowOptions:Lorg/xnio/OptionMap;
     268: aload_0
     269: getfield      #19                 // Field bufferSize:I
     272: invokespecial #81                 // Method io/undertow/server/protocol/ajp/AjpServerConnection."<init>":(Lorg/xnio/StreamConnection;Lio/undertow/connector/ByteBufferPool;Lio/undertow/server/HttpHandler;Lorg/xnio/OptionMap;I)V
     275: astore_2
     276: new           #82                 // class io/undertow/server/protocol/ajp/AjpReadListener
     279: dup
     280: aload_2
     281: aload_0
     282: getfield      #83                 // Field scheme:Ljava/lang/String;
     285: aload_0
     286: getfield      #38                 // Field parser:Lio/undertow/server/protocol/ajp/AjpRequestParser;
     289: aload_0
     290: getfield      #43                 // Field statisticsEnabled:Z
     293: ifeq          303
     296: aload_0
     297: getfield      #41                 // Field connectorStatistics:Lio/undertow/server/ConnectorStatisticsImpl;
     300: goto          304
     303: aconst_null
     304: invokespecial #84                 // Method io/undertow/server/protocol/ajp/AjpReadListener."<init>":(Lio/undertow/server/protocol/ajp/AjpServerConnection;Ljava/lang/String;Lio/undertow/server/protocol/ajp/AjpRequestParser;Lio/undertow/server/ConnectorStatisticsImpl;)V
     307: astore_3
     308: aload_0
     309: getfield      #43                 // Field statisticsEnabled:Z
     312: ifeq          323
     315: aload_2
     316: aload_0
     317: getfield      #13                 // Field closeListener:Lio/undertow/server/ServerConnection$CloseListener;
     320: invokevirtual #85                 // Method io/undertow/server/protocol/ajp/AjpServerConnection.addCloseListener:(Lio/undertow/server/ServerConnection$CloseListener;)V
     323: aload_2
     324: aload_3
     325: invokevirtual #86                 // Method io/undertow/server/protocol/ajp/AjpServerConnection.setAjpReadListener:(Lio/undertow/server/protocol/ajp/AjpReadListener;)V
     328: aload_0
     329: getfield      #10                 // Field connections:Ljava/util/Set;
     332: aload_2
     333: invokeinterface #87,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
     338: pop
     339: aload_2
     340: new           #88                 // class io/undertow/server/protocol/ajp/AjpOpenListener$2
     343: dup
     344: aload_0
     345: aload_2
     346: invokespecial #89                 // Method io/undertow/server/protocol/ajp/AjpOpenListener$2."<init>":(Lio/undertow/server/protocol/ajp/AjpOpenListener;Lio/undertow/server/protocol/ajp/AjpServerConnection;)V
     349: invokevirtual #85                 // Method io/undertow/server/protocol/ajp/AjpServerConnection.addCloseListener:(Lio/undertow/server/ServerConnection$CloseListener;)V
     352: aload_3
     353: invokevirtual #90                 // Method io/undertow/server/protocol/ajp/AjpReadListener.startRequest:()V
     356: aload_1
     357: invokevirtual #56                 // Method org/xnio/StreamConnection.getSourceChannel:()Lorg/xnio/conduits/ConduitStreamSourceChannel;
     360: aload_3
     361: invokevirtual #91                 // Method org/xnio/conduits/ConduitStreamSourceChannel.setReadListener:(Lorg/xnio/ChannelListener;)V
     364: aload_3
     365: aload_1
     366: invokevirtual #56                 // Method org/xnio/StreamConnection.getSourceChannel:()Lorg/xnio/conduits/ConduitStreamSourceChannel;
     369: invokevirtual #92                 // Method io/undertow/server/protocol/ajp/AjpReadListener.handleEvent:(Lorg/xnio/channels/StreamSourceChannel;)V
     372: return
    Exception table:
       from    to  target type
          25   164   167   Class java/io/IOException

  public io.undertow.server.HttpHandler getRootHandler();
    Code:
       0: aload_0
       1: getfield      #80                 // Field rootHandler:Lio/undertow/server/HttpHandler;
       4: areturn

  public void setRootHandler(io.undertow.server.HttpHandler);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #80                 // Field rootHandler:Lio/undertow/server/HttpHandler;
       5: return

  public org.xnio.OptionMap getUndertowOptions();
    Code:
       0: aload_0
       1: getfield      #14                 // Field undertowOptions:Lorg/xnio/OptionMap;
       4: areturn

  public void setUndertowOptions(org.xnio.OptionMap);
    Code:
       0: aload_1
       1: ifnonnull     15
       4: getstatic     #93                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
       7: ldc           #94                 // String undertowOptions
       9: invokeinterface #95,  2           // InterfaceMethod io/undertow/UndertowMessages.argumentCannotBeNull:(Ljava/lang/String;)Ljava/lang/IllegalArgumentException;
      14: athrow
      15: aload_0
      16: aload_1
      17: putfield      #14                 // Field undertowOptions:Lorg/xnio/OptionMap;
      20: aload_0
      21: aload_1
      22: getstatic     #42                 // Field io/undertow/UndertowOptions.ENABLE_CONNECTOR_STATISTICS:Lorg/xnio/Option;
      25: iconst_0
      26: invokevirtual #28                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;Z)Z
      29: putfield      #43                 // Field statisticsEnabled:Z
      32: aload_0
      33: new           #21                 // class io/undertow/server/protocol/ajp/AjpRequestParser
      36: dup
      37: aload_1
      38: getstatic     #22                 // Field io/undertow/UndertowOptions.URL_CHARSET:Lorg/xnio/Option;
      41: getstatic     #23                 // Field java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;
      44: invokevirtual #24                 // Method java/nio/charset/Charset.name:()Ljava/lang/String;
      47: invokevirtual #25                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;Ljava/lang/Object;)Ljava/lang/Object;
      50: checkcast     #26                 // class java/lang/String
      53: aload_1
      54: getstatic     #27                 // Field io/undertow/UndertowOptions.DECODE_URL:Lorg/xnio/Option;
      57: iconst_1
      58: invokevirtual #28                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;Z)Z
      61: aload_1
      62: getstatic     #29                 // Field io/undertow/UndertowOptions.MAX_PARAMETERS:Lorg/xnio/Option;
      65: sipush        1000
      68: invokevirtual #31                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;I)I
      71: aload_1
      72: getstatic     #32                 // Field io/undertow/UndertowOptions.MAX_HEADERS:Lorg/xnio/Option;
      75: sipush        200
      78: invokevirtual #31                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;I)I
      81: aload_1
      82: invokestatic  #33                 // Method io/undertow/util/URLUtils.getSlashDecodingFlag:(Lorg/xnio/OptionMap;)Z
      85: aload_1
      86: getstatic     #34                 // Field io/undertow/UndertowOptions.ALLOW_UNESCAPED_CHARACTERS_IN_URL:Lorg/xnio/Option;
      89: iconst_0
      90: invokevirtual #28                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;Z)Z
      93: invokespecial #96                 // Method io/undertow/server/protocol/ajp/AjpRequestParser."<init>":(Ljava/lang/String;ZIIZZ)V
      96: putfield      #38                 // Field parser:Lio/undertow/server/protocol/ajp/AjpRequestParser;
      99: return

  public io.undertow.connector.ByteBufferPool getBufferPool();
    Code:
       0: aload_0
       1: getfield      #15                 // Field bufferPool:Lio/undertow/connector/ByteBufferPool;
       4: areturn

  public io.undertow.server.ConnectorStatistics getConnectorStatistics();
    Code:
       0: aload_0
       1: getfield      #43                 // Field statisticsEnabled:Z
       4: ifeq          12
       7: aload_0
       8: getfield      #41                 // Field connectorStatistics:Lio/undertow/server/ConnectorStatisticsImpl;
      11: areturn
      12: aconst_null
      13: areturn

  public void closeConnections();
    Code:
       0: aload_0
       1: getfield      #10                 // Field connections:Ljava/util/Set;
       4: invokeinterface #97,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
       9: astore_1
      10: aload_1
      11: invokeinterface #98,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      16: ifeq          36
      19: aload_1
      20: invokeinterface #99,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      25: checkcast     #79                 // class io/undertow/server/protocol/ajp/AjpServerConnection
      28: astore_2
      29: aload_2
      30: invokestatic  #69                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
      33: goto          10
      36: return

  public java.lang.String getScheme();
    Code:
       0: aload_0
       1: getfield      #83                 // Field scheme:Ljava/lang/String;
       4: areturn

  public void setScheme(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #83                 // Field scheme:Ljava/lang/String;
       5: return

  public void handleEvent(java.nio.channels.Channel);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #100                // class org/xnio/StreamConnection
       5: invokevirtual #101                // Method handleEvent:(Lorg/xnio/StreamConnection;)V
       8: return

  static {};
    Code:
       0: ldc           #102                // String io.undertow.ajp.allowedRequestAttributesPattern
       2: invokestatic  #103                // Method io/undertow/server/protocol/ajp/SecurityActions.getSystemProperty:(Ljava/lang/String;)Ljava/lang/String;
       5: putstatic     #36                 // Field DEFAULT_AJP_ALLOWED_REQUEST_ATTRIBUTES_PATTERN:Ljava/lang/String;
       8: return
}
