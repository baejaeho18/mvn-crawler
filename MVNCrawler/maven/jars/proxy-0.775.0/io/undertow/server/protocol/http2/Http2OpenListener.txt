Compiled from "Http2OpenListener.java"
public final class io.undertow.server.protocol.http2.Http2OpenListener implements org.xnio.ChannelListener<org.xnio.StreamConnection>, io.undertow.server.DelegateOpenListener {
  private final java.util.Set<io.undertow.protocols.http2.Http2Channel> connections;

  public static final java.lang.String HTTP2;

  public static final java.lang.String HTTP2_14;

  private final io.undertow.connector.ByteBufferPool bufferPool;

  private final int bufferSize;

  private final org.xnio.ChannelListener<io.undertow.protocols.http2.Http2Channel> closeTask;

  private volatile io.undertow.server.HttpHandler rootHandler;

  private volatile org.xnio.OptionMap undertowOptions;

  private volatile boolean statisticsEnabled;

  private final io.undertow.server.ConnectorStatisticsImpl connectorStatistics;

  private final java.lang.String protocol;

  public io.undertow.server.protocol.http2.Http2OpenListener(org.xnio.Pool<java.nio.ByteBuffer>);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #1                  // Field org/xnio/OptionMap.EMPTY:Lorg/xnio/OptionMap;
       5: invokespecial #2                  // Method "<init>":(Lorg/xnio/Pool;Lorg/xnio/OptionMap;)V
       8: return

  public io.undertow.server.protocol.http2.Http2OpenListener(org.xnio.Pool<java.nio.ByteBuffer>, org.xnio.OptionMap);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: ldc           #4                  // String h2
       5: invokespecial #5                  // Method "<init>":(Lorg/xnio/Pool;Lorg/xnio/OptionMap;Ljava/lang/String;)V
       8: return

  public io.undertow.server.protocol.http2.Http2OpenListener(org.xnio.Pool<java.nio.ByteBuffer>, org.xnio.OptionMap, java.lang.String);
    Code:
       0: aload_0
       1: new           #6                  // class io/undertow/server/XnioByteBufferPool
       4: dup
       5: aload_1
       6: invokespecial #7                  // Method io/undertow/server/XnioByteBufferPool."<init>":(Lorg/xnio/Pool;)V
       9: aload_2
      10: aload_3
      11: invokespecial #8                  // Method "<init>":(Lio/undertow/connector/ByteBufferPool;Lorg/xnio/OptionMap;Ljava/lang/String;)V
      14: return

  public io.undertow.server.protocol.http2.Http2OpenListener(io.undertow.connector.ByteBufferPool);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #1                  // Field org/xnio/OptionMap.EMPTY:Lorg/xnio/OptionMap;
       5: invokespecial #9                  // Method "<init>":(Lio/undertow/connector/ByteBufferPool;Lorg/xnio/OptionMap;)V
       8: return

  public io.undertow.server.protocol.http2.Http2OpenListener(io.undertow.connector.ByteBufferPool, org.xnio.OptionMap);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: ldc           #4                  // String h2
       5: invokespecial #8                  // Method "<init>":(Lio/undertow/connector/ByteBufferPool;Lorg/xnio/OptionMap;Ljava/lang/String;)V
       8: return

  public io.undertow.server.protocol.http2.Http2OpenListener(io.undertow.connector.ByteBufferPool, org.xnio.OptionMap, java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #10                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #11                 // class java/util/concurrent/ConcurrentHashMap
       8: dup
       9: invokespecial #12                 // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      12: invokestatic  #13                 // Method java/util/Collections.newSetFromMap:(Ljava/util/Map;)Ljava/util/Set;
      15: putfield      #14                 // Field connections:Ljava/util/Set;
      18: aload_0
      19: new           #15                 // class io/undertow/server/protocol/http2/Http2OpenListener$1
      22: dup
      23: aload_0
      24: invokespecial #16                 // Method io/undertow/server/protocol/http2/Http2OpenListener$1."<init>":(Lio/undertow/server/protocol/http2/Http2OpenListener;)V
      27: putfield      #17                 // Field closeTask:Lorg/xnio/ChannelListener;
      30: aload_0
      31: aload_2
      32: putfield      #18                 // Field undertowOptions:Lorg/xnio/OptionMap;
      35: aload_0
      36: aload_1
      37: putfield      #19                 // Field bufferPool:Lio/undertow/connector/ByteBufferPool;
      40: aload_1
      41: invokeinterface #20,  1           // InterfaceMethod io/undertow/connector/ByteBufferPool.allocate:()Lio/undertow/connector/PooledByteBuffer;
      46: astore        4
      48: aload_0
      49: aload         4
      51: invokeinterface #21,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
      56: invokevirtual #22                 // Method java/nio/ByteBuffer.remaining:()I
      59: putfield      #23                 // Field bufferSize:I
      62: aload         4
      64: invokeinterface #24,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
      69: aload_0
      70: new           #25                 // class io/undertow/server/ConnectorStatisticsImpl
      73: dup
      74: invokespecial #26                 // Method io/undertow/server/ConnectorStatisticsImpl."<init>":()V
      77: putfield      #27                 // Field connectorStatistics:Lio/undertow/server/ConnectorStatisticsImpl;
      80: aload_0
      81: aload_2
      82: getstatic     #28                 // Field io/undertow/UndertowOptions.ENABLE_STATISTICS:Lorg/xnio/Option;
      85: iconst_0
      86: invokevirtual #29                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;Z)Z
      89: putfield      #30                 // Field statisticsEnabled:Z
      92: aload_0
      93: aload_3
      94: putfield      #31                 // Field protocol:Ljava/lang/String;
      97: return

  public void handleEvent(org.xnio.StreamConnection, io.undertow.connector.PooledByteBuffer);
    Code:
       0: getstatic     #32                 // Field io/undertow/UndertowLogger.REQUEST_LOGGER:Lio/undertow/UndertowLogger;
       3: invokeinterface #33,  1           // InterfaceMethod io/undertow/UndertowLogger.isTraceEnabled:()Z
       8: ifeq          25
      11: getstatic     #32                 // Field io/undertow/UndertowLogger.REQUEST_LOGGER:Lio/undertow/UndertowLogger;
      14: ldc           #34                 // String Opened HTTP/2 connection with %s
      16: aload_1
      17: invokevirtual #35                 // Method org/xnio/StreamConnection.getPeerAddress:()Ljava/net/SocketAddress;
      20: invokeinterface #36,  3           // InterfaceMethod io/undertow/UndertowLogger.tracef:(Ljava/lang/String;Ljava/lang/Object;)V
      25: new           #37                 // class io/undertow/protocols/http2/Http2Channel
      28: dup
      29: aload_1
      30: aload_0
      31: getfield      #31                 // Field protocol:Ljava/lang/String;
      34: aload_0
      35: getfield      #19                 // Field bufferPool:Lio/undertow/connector/ByteBufferPool;
      38: aload_2
      39: iconst_0
      40: iconst_0
      41: aload_0
      42: getfield      #18                 // Field undertowOptions:Lorg/xnio/OptionMap;
      45: invokespecial #38                 // Method io/undertow/protocols/http2/Http2Channel."<init>":(Lorg/xnio/StreamConnection;Ljava/lang/String;Lio/undertow/connector/ByteBufferPool;Lio/undertow/connector/PooledByteBuffer;ZZLorg/xnio/OptionMap;)V
      48: astore_3
      49: aload_0
      50: getfield      #18                 // Field undertowOptions:Lorg/xnio/OptionMap;
      53: getstatic     #39                 // Field io/undertow/UndertowOptions.IDLE_TIMEOUT:Lorg/xnio/Option;
      56: invokevirtual #40                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;)Ljava/lang/Object;
      59: checkcast     #41                 // class java/lang/Integer
      62: astore        4
      64: aload         4
      66: ifnull        87
      69: aload         4
      71: invokevirtual #42                 // Method java/lang/Integer.intValue:()I
      74: ifle          87
      77: aload_3
      78: aload         4
      80: invokevirtual #42                 // Method java/lang/Integer.intValue:()I
      83: i2l
      84: invokevirtual #43                 // Method io/undertow/protocols/http2/Http2Channel.setIdleTimeout:(J)V
      87: aload_0
      88: getfield      #30                 // Field statisticsEnabled:Z
      91: ifeq          165
      94: aload_1
      95: invokevirtual #44                 // Method org/xnio/StreamConnection.getSinkChannel:()Lorg/xnio/conduits/ConduitStreamSinkChannel;
      98: new           #45                 // class io/undertow/conduits/BytesSentStreamSinkConduit
     101: dup
     102: aload_1
     103: invokevirtual #44                 // Method org/xnio/StreamConnection.getSinkChannel:()Lorg/xnio/conduits/ConduitStreamSinkChannel;
     106: invokevirtual #46                 // Method org/xnio/conduits/ConduitStreamSinkChannel.getConduit:()Lorg/xnio/conduits/StreamSinkConduit;
     109: aload_0
     110: getfield      #27                 // Field connectorStatistics:Lio/undertow/server/ConnectorStatisticsImpl;
     113: invokevirtual #47                 // Method io/undertow/server/ConnectorStatisticsImpl.sentAccumulator:()Lio/undertow/conduits/ByteActivityCallback;
     116: invokespecial #48                 // Method io/undertow/conduits/BytesSentStreamSinkConduit."<init>":(Lorg/xnio/conduits/StreamSinkConduit;Lio/undertow/conduits/ByteActivityCallback;)V
     119: invokevirtual #49                 // Method org/xnio/conduits/ConduitStreamSinkChannel.setConduit:(Lorg/xnio/conduits/StreamSinkConduit;)V
     122: aload_1
     123: invokevirtual #50                 // Method org/xnio/StreamConnection.getSourceChannel:()Lorg/xnio/conduits/ConduitStreamSourceChannel;
     126: new           #51                 // class io/undertow/conduits/BytesReceivedStreamSourceConduit
     129: dup
     130: aload_1
     131: invokevirtual #50                 // Method org/xnio/StreamConnection.getSourceChannel:()Lorg/xnio/conduits/ConduitStreamSourceChannel;
     134: invokevirtual #52                 // Method org/xnio/conduits/ConduitStreamSourceChannel.getConduit:()Lorg/xnio/conduits/StreamSourceConduit;
     137: aload_0
     138: getfield      #27                 // Field connectorStatistics:Lio/undertow/server/ConnectorStatisticsImpl;
     141: invokevirtual #53                 // Method io/undertow/server/ConnectorStatisticsImpl.receivedAccumulator:()Lio/undertow/conduits/ByteActivityCallback;
     144: invokespecial #54                 // Method io/undertow/conduits/BytesReceivedStreamSourceConduit."<init>":(Lorg/xnio/conduits/StreamSourceConduit;Lio/undertow/conduits/ByteActivityCallback;)V
     147: invokevirtual #55                 // Method org/xnio/conduits/ConduitStreamSourceChannel.setConduit:(Lorg/xnio/conduits/StreamSourceConduit;)V
     150: aload_0
     151: getfield      #27                 // Field connectorStatistics:Lio/undertow/server/ConnectorStatisticsImpl;
     154: invokevirtual #56                 // Method io/undertow/server/ConnectorStatisticsImpl.incrementConnectionCount:()V
     157: aload_3
     158: aload_0
     159: getfield      #17                 // Field closeTask:Lorg/xnio/ChannelListener;
     162: invokevirtual #57                 // Method io/undertow/protocols/http2/Http2Channel.addCloseTask:(Lorg/xnio/ChannelListener;)V
     165: aload_0
     166: getfield      #14                 // Field connections:Ljava/util/Set;
     169: aload_3
     170: invokeinterface #58,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
     175: pop
     176: aload_3
     177: new           #59                 // class io/undertow/server/protocol/http2/Http2OpenListener$2
     180: dup
     181: aload_0
     182: invokespecial #60                 // Method io/undertow/server/protocol/http2/Http2OpenListener$2."<init>":(Lio/undertow/server/protocol/http2/Http2OpenListener;)V
     185: invokevirtual #57                 // Method io/undertow/protocols/http2/Http2Channel.addCloseTask:(Lorg/xnio/ChannelListener;)V
     188: aload_3
     189: invokevirtual #61                 // Method io/undertow/protocols/http2/Http2Channel.getReceiveSetter:()Lorg/xnio/ChannelListener$Setter;
     192: new           #62                 // class io/undertow/server/protocol/http2/Http2ReceiveListener
     195: dup
     196: aload_0
     197: getfield      #63                 // Field rootHandler:Lio/undertow/server/HttpHandler;
     200: aload_0
     201: invokevirtual #64                 // Method getUndertowOptions:()Lorg/xnio/OptionMap;
     204: aload_0
     205: getfield      #23                 // Field bufferSize:I
     208: aload_0
     209: getfield      #27                 // Field connectorStatistics:Lio/undertow/server/ConnectorStatisticsImpl;
     212: invokespecial #65                 // Method io/undertow/server/protocol/http2/Http2ReceiveListener."<init>":(Lio/undertow/server/HttpHandler;Lorg/xnio/OptionMap;ILio/undertow/server/ConnectorStatisticsImpl;)V
     215: invokeinterface #66,  2           // InterfaceMethod org/xnio/ChannelListener$Setter.set:(Lorg/xnio/ChannelListener;)V
     220: aload_3
     221: invokevirtual #67                 // Method io/undertow/protocols/http2/Http2Channel.resumeReceives:()V
     224: return

  public io.undertow.server.ConnectorStatistics getConnectorStatistics();
    Code:
       0: aload_0
       1: getfield      #30                 // Field statisticsEnabled:Z
       4: ifeq          12
       7: aload_0
       8: getfield      #27                 // Field connectorStatistics:Lio/undertow/server/ConnectorStatisticsImpl;
      11: areturn
      12: aconst_null
      13: areturn

  public void closeConnections();
    Code:
       0: aload_0
       1: getfield      #14                 // Field connections:Ljava/util/Set;
       4: invokeinterface #68,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
       9: astore_1
      10: aload_1
      11: invokeinterface #69,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      16: ifeq          36
      19: aload_1
      20: invokeinterface #70,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      25: checkcast     #37                 // class io/undertow/protocols/http2/Http2Channel
      28: astore_2
      29: aload_2
      30: invokestatic  #71                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
      33: goto          10
      36: return

  public io.undertow.server.HttpHandler getRootHandler();
    Code:
       0: aload_0
       1: getfield      #63                 // Field rootHandler:Lio/undertow/server/HttpHandler;
       4: areturn

  public void setRootHandler(io.undertow.server.HttpHandler);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #63                 // Field rootHandler:Lio/undertow/server/HttpHandler;
       5: return

  public org.xnio.OptionMap getUndertowOptions();
    Code:
       0: aload_0
       1: getfield      #18                 // Field undertowOptions:Lorg/xnio/OptionMap;
       4: areturn

  public void setUndertowOptions(org.xnio.OptionMap);
    Code:
       0: aload_1
       1: ifnonnull     15
       4: getstatic     #72                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
       7: ldc           #73                 // String undertowOptions
       9: invokeinterface #74,  2           // InterfaceMethod io/undertow/UndertowMessages.argumentCannotBeNull:(Ljava/lang/String;)Ljava/lang/IllegalArgumentException;
      14: athrow
      15: aload_0
      16: aload_1
      17: putfield      #18                 // Field undertowOptions:Lorg/xnio/OptionMap;
      20: aload_0
      21: aload_1
      22: getstatic     #75                 // Field io/undertow/UndertowOptions.ENABLE_CONNECTOR_STATISTICS:Lorg/xnio/Option;
      25: iconst_0
      26: invokevirtual #29                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;Z)Z
      29: putfield      #30                 // Field statisticsEnabled:Z
      32: return

  public io.undertow.connector.ByteBufferPool getBufferPool();
    Code:
       0: aload_0
       1: getfield      #19                 // Field bufferPool:Lio/undertow/connector/ByteBufferPool;
       4: areturn

  public void handleEvent(org.xnio.StreamConnection);
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: invokevirtual #76                 // Method handleEvent:(Lorg/xnio/StreamConnection;Lio/undertow/connector/PooledByteBuffer;)V
       6: return

  public void handleEvent(java.nio.channels.Channel);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #77                 // class org/xnio/StreamConnection
       5: invokevirtual #78                 // Method handleEvent:(Lorg/xnio/StreamConnection;)V
       8: return
}
