Compiled from "AbstractFramedChannel.java"
final class io.undertow.server.protocol.framed.AbstractFramedChannel$FrameReadListener implements org.xnio.ChannelListener<org.xnio.channels.StreamSourceChannel> {
  final io.undertow.server.protocol.framed.AbstractFramedChannel this$0;

  private io.undertow.server.protocol.framed.AbstractFramedChannel$FrameReadListener(io.undertow.server.protocol.framed.AbstractFramedChannel);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lio/undertow/server/protocol/framed/AbstractFramedChannel;
       5: aload_0
       6: invokespecial #2                  // Method java/lang/Object."<init>":()V
       9: return

  public void handleEvent(org.xnio.channels.StreamSourceChannel);
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lio/undertow/server/protocol/framed/AbstractFramedChannel;
       4: getfield      #3                  // Field io/undertow/server/protocol/framed/AbstractFramedChannel.taskRunQueue:Ljava/util/concurrent/LinkedBlockingDeque;
       7: invokevirtual #4                  // Method java/util/concurrent/LinkedBlockingDeque.poll:()Ljava/lang/Object;
      10: checkcast     #5                  // class java/lang/Runnable
      13: dup
      14: astore_2
      15: ifnull        27
      18: aload_2
      19: invokeinterface #6,  1            // InterfaceMethod java/lang/Runnable.run:()V
      24: goto          0
      27: aload_0
      28: getfield      #1                  // Field this$0:Lio/undertow/server/protocol/framed/AbstractFramedChannel;
      31: getfield      #7                  // Field io/undertow/server/protocol/framed/AbstractFramedChannel.receiver:Lio/undertow/server/protocol/framed/AbstractFramedStreamSourceChannel;
      34: astore_3
      35: aload_0
      36: getfield      #1                  // Field this$0:Lio/undertow/server/protocol/framed/AbstractFramedChannel;
      39: getfield      #8                  // Field io/undertow/server/protocol/framed/AbstractFramedChannel.readChannelDone:Z
      42: ifne          55
      45: aload_0
      46: getfield      #1                  // Field this$0:Lio/undertow/server/protocol/framed/AbstractFramedChannel;
      49: invokevirtual #9                  // Method io/undertow/server/protocol/framed/AbstractFramedChannel.isReadsSuspended:()Z
      52: ifeq          66
      55: aload_3
      56: ifnonnull     66
      59: aload_1
      60: invokeinterface #10,  1           // InterfaceMethod org/xnio/channels/StreamSourceChannel.suspendReads:()V
      65: return
      66: aload_0
      67: getfield      #1                  // Field this$0:Lio/undertow/server/protocol/framed/AbstractFramedChannel;
      70: getfield      #11                 // Field io/undertow/server/protocol/framed/AbstractFramedChannel.receiveSetter:Lorg/xnio/ChannelListener$SimpleSetter;
      73: invokevirtual #12                 // Method org/xnio/ChannelListener$SimpleSetter.get:()Lorg/xnio/ChannelListener;
      76: astore        4
      78: aload         4
      80: ifnonnull     88
      83: getstatic     #13                 // Field io/undertow/server/protocol/framed/AbstractFramedChannel.DRAIN_LISTENER:Lorg/xnio/ChannelListener;
      86: astore        4
      88: aload_0
      89: getfield      #1                  // Field this$0:Lio/undertow/server/protocol/framed/AbstractFramedChannel;
      92: aload         4
      94: invokestatic  #14                 // Method org/xnio/ChannelListeners.invokeChannelListener:(Ljava/nio/channels/Channel;Lorg/xnio/ChannelListener;)Z
      97: pop
      98: aload_0
      99: getfield      #1                  // Field this$0:Lio/undertow/server/protocol/framed/AbstractFramedChannel;
     102: dup
     103: astore        5
     105: monitorenter
     106: aload_0
     107: getfield      #1                  // Field this$0:Lio/undertow/server/protocol/framed/AbstractFramedChannel;
     110: getfield      #15                 // Field io/undertow/server/protocol/framed/AbstractFramedChannel.partialRead:Z
     113: istore        4
     115: aload         5
     117: monitorexit
     118: goto          129
     121: astore        6
     123: aload         5
     125: monitorexit
     126: aload         6
     128: athrow
     129: aload_0
     130: getfield      #1                  // Field this$0:Lio/undertow/server/protocol/framed/AbstractFramedChannel;
     133: getfield      #16                 // Field io/undertow/server/protocol/framed/AbstractFramedChannel.readData:Lio/undertow/util/ReferenceCountedPooled;
     136: astore        5
     138: aload         5
     140: ifnull        179
     143: aload         5
     145: invokevirtual #17                 // Method io/undertow/util/ReferenceCountedPooled.isFreed:()Z
     148: ifne          179
     151: aload_1
     152: invokeinterface #18,  1           // InterfaceMethod org/xnio/channels/StreamSourceChannel.isOpen:()Z
     157: ifeq          179
     160: iload         4
     162: ifne          179
     165: aload_0
     166: getfield      #1                  // Field this$0:Lio/undertow/server/protocol/framed/AbstractFramedChannel;
     169: aload_0
     170: aload_1
     171: invokedynamic #19,  0             // InvokeDynamic #0:run:(Lio/undertow/server/protocol/framed/AbstractFramedChannel$FrameReadListener;Lorg/xnio/channels/StreamSourceChannel;)Ljava/lang/Runnable;
     176: invokevirtual #20                 // Method io/undertow/server/protocol/framed/AbstractFramedChannel.runInIoThread:(Ljava/lang/Runnable;)V
     179: aload_0
     180: getfield      #1                  // Field this$0:Lio/undertow/server/protocol/framed/AbstractFramedChannel;
     183: dup
     184: astore        6
     186: monitorenter
     187: aload_0
     188: getfield      #1                  // Field this$0:Lio/undertow/server/protocol/framed/AbstractFramedChannel;
     191: iconst_0
     192: putfield      #15                 // Field io/undertow/server/protocol/framed/AbstractFramedChannel.partialRead:Z
     195: aload         6
     197: monitorexit
     198: goto          209
     201: astore        7
     203: aload         6
     205: monitorexit
     206: aload         7
     208: athrow
     209: return
    Exception table:
       from    to  target type
         106   118   121   any
         121   126   121   any
         187   198   201   any
         201   206   201   any

  public void handleEvent(java.nio.channels.Channel);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #21                 // class org/xnio/channels/StreamSourceChannel
       5: invokevirtual #22                 // Method handleEvent:(Lorg/xnio/channels/StreamSourceChannel;)V
       8: return

  private void lambda$handleEvent$0(org.xnio.channels.StreamSourceChannel);
    Code:
       0: aload_1
       1: aload_0
       2: invokestatic  #14                 // Method org/xnio/ChannelListeners.invokeChannelListener:(Ljava/nio/channels/Channel;Lorg/xnio/ChannelListener;)Z
       5: pop
       6: return
}
