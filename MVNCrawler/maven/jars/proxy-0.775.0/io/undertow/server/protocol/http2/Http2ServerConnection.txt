Compiled from "Http2ServerConnection.java"
public class io.undertow.server.protocol.http2.Http2ServerConnection extends io.undertow.server.ServerConnection {
  private static final io.undertow.util.HttpString STATUS;

  private final io.undertow.protocols.http2.Http2Channel channel;

  private final io.undertow.protocols.http2.Http2StreamSourceChannel requestChannel;

  private final io.undertow.protocols.http2.Http2DataStreamSinkChannel responseChannel;

  private final org.xnio.conduits.ConduitStreamSinkChannel conduitStreamSinkChannel;

  private final org.xnio.conduits.ConduitStreamSourceChannel conduitStreamSourceChannel;

  private final org.xnio.conduits.StreamSinkConduit originalSinkConduit;

  private final org.xnio.conduits.StreamSourceConduit originalSourceConduit;

  private final org.xnio.OptionMap undertowOptions;

  private final int bufferSize;

  private io.undertow.server.SSLSessionInfo sessionInfo;

  private final io.undertow.server.HttpHandler rootHandler;

  private io.undertow.server.HttpServerExchange exchange;

  private boolean continueSent;

  private io.undertow.server.XnioBufferPoolAdaptor poolAdaptor;

  private final java.lang.String protocolRequestId;

  public io.undertow.server.protocol.http2.Http2ServerConnection(io.undertow.protocols.http2.Http2Channel, io.undertow.protocols.http2.Http2StreamSourceChannel, org.xnio.OptionMap, int, io.undertow.server.HttpHandler);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method io/undertow/server/ServerConnection."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field continueSent:Z
       9: aload_0
      10: aload_1
      11: putfield      #3                  // Field channel:Lio/undertow/protocols/http2/Http2Channel;
      14: aload_0
      15: aload_2
      16: putfield      #4                  // Field requestChannel:Lio/undertow/protocols/http2/Http2StreamSourceChannel;
      19: aload_0
      20: aload_3
      21: putfield      #5                  // Field undertowOptions:Lorg/xnio/OptionMap;
      24: aload_0
      25: iload         4
      27: putfield      #6                  // Field bufferSize:I
      30: aload_0
      31: aload         5
      33: putfield      #7                  // Field rootHandler:Lio/undertow/server/HttpHandler;
      36: aload_0
      37: aload_2
      38: invokevirtual #8                  // Method io/undertow/protocols/http2/Http2StreamSourceChannel.getResponseChannel:()Lio/undertow/protocols/http2/Http2HeadersStreamSinkChannel;
      41: putfield      #9                  // Field responseChannel:Lio/undertow/protocols/http2/Http2DataStreamSinkChannel;
      44: aload_0
      45: new           #10                 // class org/xnio/conduits/StreamSinkChannelWrappingConduit
      48: dup
      49: aload_0
      50: getfield      #9                  // Field responseChannel:Lio/undertow/protocols/http2/Http2DataStreamSinkChannel;
      53: invokespecial #11                 // Method org/xnio/conduits/StreamSinkChannelWrappingConduit."<init>":(Lorg/xnio/channels/StreamSinkChannel;)V
      56: putfield      #12                 // Field originalSinkConduit:Lorg/xnio/conduits/StreamSinkConduit;
      59: aload_0
      60: new           #13                 // class org/xnio/conduits/StreamSourceChannelWrappingConduit
      63: dup
      64: aload_2
      65: invokespecial #14                 // Method org/xnio/conduits/StreamSourceChannelWrappingConduit."<init>":(Lorg/xnio/channels/StreamSourceChannel;)V
      68: putfield      #15                 // Field originalSourceConduit:Lorg/xnio/conduits/StreamSourceConduit;
      71: aload_0
      72: new           #16                 // class org/xnio/conduits/ConduitStreamSinkChannel
      75: dup
      76: aload_0
      77: getfield      #9                  // Field responseChannel:Lio/undertow/protocols/http2/Http2DataStreamSinkChannel;
      80: aload_0
      81: getfield      #12                 // Field originalSinkConduit:Lorg/xnio/conduits/StreamSinkConduit;
      84: invokespecial #17                 // Method org/xnio/conduits/ConduitStreamSinkChannel."<init>":(Lorg/xnio/channels/Configurable;Lorg/xnio/conduits/StreamSinkConduit;)V
      87: putfield      #18                 // Field conduitStreamSinkChannel:Lorg/xnio/conduits/ConduitStreamSinkChannel;
      90: aload_0
      91: new           #19                 // class org/xnio/conduits/ConduitStreamSourceChannel
      94: dup
      95: aload_1
      96: aload_0
      97: getfield      #15                 // Field originalSourceConduit:Lorg/xnio/conduits/StreamSourceConduit;
     100: invokespecial #20                 // Method org/xnio/conduits/ConduitStreamSourceChannel."<init>":(Lorg/xnio/channels/Configurable;Lorg/xnio/conduits/StreamSourceConduit;)V
     103: putfield      #21                 // Field conduitStreamSourceChannel:Lorg/xnio/conduits/ConduitStreamSourceChannel;
     106: aload_0
     107: aload_1
     108: invokevirtual #22                 // Method io/undertow/protocols/http2/Http2Channel.getProtocolRequestId:()Ljava/lang/String;
     111: putfield      #23                 // Field protocolRequestId:Ljava/lang/String;
     114: return

  void setExchange(io.undertow.server.HttpServerExchange);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #24                 // Field exchange:Lio/undertow/server/HttpServerExchange;
       5: return

  public io.undertow.server.protocol.http2.Http2ServerConnection(io.undertow.protocols.http2.Http2Channel, io.undertow.protocols.http2.Http2DataStreamSinkChannel, org.xnio.OptionMap, int, io.undertow.server.HttpHandler);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method io/undertow/server/ServerConnection."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field continueSent:Z
       9: aload_0
      10: aload_1
      11: putfield      #3                  // Field channel:Lio/undertow/protocols/http2/Http2Channel;
      14: aload_0
      15: aload         5
      17: putfield      #7                  // Field rootHandler:Lio/undertow/server/HttpHandler;
      20: aload_0
      21: aconst_null
      22: putfield      #4                  // Field requestChannel:Lio/undertow/protocols/http2/Http2StreamSourceChannel;
      25: aload_0
      26: aload_3
      27: putfield      #5                  // Field undertowOptions:Lorg/xnio/OptionMap;
      30: aload_0
      31: iload         4
      33: putfield      #6                  // Field bufferSize:I
      36: aload_0
      37: aload_2
      38: putfield      #9                  // Field responseChannel:Lio/undertow/protocols/http2/Http2DataStreamSinkChannel;
      41: aload_0
      42: new           #10                 // class org/xnio/conduits/StreamSinkChannelWrappingConduit
      45: dup
      46: aload_0
      47: getfield      #9                  // Field responseChannel:Lio/undertow/protocols/http2/Http2DataStreamSinkChannel;
      50: invokespecial #11                 // Method org/xnio/conduits/StreamSinkChannelWrappingConduit."<init>":(Lorg/xnio/channels/StreamSinkChannel;)V
      53: putfield      #12                 // Field originalSinkConduit:Lorg/xnio/conduits/StreamSinkConduit;
      56: aload_0
      57: new           #13                 // class org/xnio/conduits/StreamSourceChannelWrappingConduit
      60: dup
      61: aload_0
      62: getfield      #4                  // Field requestChannel:Lio/undertow/protocols/http2/Http2StreamSourceChannel;
      65: invokespecial #14                 // Method org/xnio/conduits/StreamSourceChannelWrappingConduit."<init>":(Lorg/xnio/channels/StreamSourceChannel;)V
      68: putfield      #15                 // Field originalSourceConduit:Lorg/xnio/conduits/StreamSourceConduit;
      71: aload_0
      72: new           #16                 // class org/xnio/conduits/ConduitStreamSinkChannel
      75: dup
      76: aload_0
      77: getfield      #9                  // Field responseChannel:Lio/undertow/protocols/http2/Http2DataStreamSinkChannel;
      80: aload_0
      81: getfield      #12                 // Field originalSinkConduit:Lorg/xnio/conduits/StreamSinkConduit;
      84: invokespecial #17                 // Method org/xnio/conduits/ConduitStreamSinkChannel."<init>":(Lorg/xnio/channels/Configurable;Lorg/xnio/conduits/StreamSinkConduit;)V
      87: putfield      #18                 // Field conduitStreamSinkChannel:Lorg/xnio/conduits/ConduitStreamSinkChannel;
      90: aload_0
      91: new           #19                 // class org/xnio/conduits/ConduitStreamSourceChannel
      94: dup
      95: getstatic     #25                 // Field org/xnio/channels/Configurable.EMPTY:Lorg/xnio/channels/Configurable;
      98: new           #26                 // class org/xnio/conduits/EmptyStreamSourceConduit
     101: dup
     102: aload_0
     103: invokevirtual #27                 // Method getIoThread:()Lorg/xnio/XnioIoThread;
     106: invokespecial #28                 // Method org/xnio/conduits/EmptyStreamSourceConduit."<init>":(Lorg/xnio/XnioIoThread;)V
     109: invokespecial #20                 // Method org/xnio/conduits/ConduitStreamSourceChannel."<init>":(Lorg/xnio/channels/Configurable;Lorg/xnio/conduits/StreamSourceConduit;)V
     112: putfield      #21                 // Field conduitStreamSourceChannel:Lorg/xnio/conduits/ConduitStreamSourceChannel;
     115: aload_0
     116: aload_1
     117: invokevirtual #22                 // Method io/undertow/protocols/http2/Http2Channel.getProtocolRequestId:()Ljava/lang/String;
     120: putfield      #23                 // Field protocolRequestId:Ljava/lang/String;
     123: return

  public org.xnio.Pool<java.nio.ByteBuffer> getBufferPool();
    Code:
       0: aload_0
       1: getfield      #29                 // Field poolAdaptor:Lio/undertow/server/XnioBufferPoolAdaptor;
       4: ifnonnull     22
       7: aload_0
       8: new           #30                 // class io/undertow/server/XnioBufferPoolAdaptor
      11: dup
      12: aload_0
      13: invokevirtual #31                 // Method getByteBufferPool:()Lio/undertow/connector/ByteBufferPool;
      16: invokespecial #32                 // Method io/undertow/server/XnioBufferPoolAdaptor."<init>":(Lio/undertow/connector/ByteBufferPool;)V
      19: putfield      #29                 // Field poolAdaptor:Lio/undertow/server/XnioBufferPoolAdaptor;
      22: aload_0
      23: getfield      #29                 // Field poolAdaptor:Lio/undertow/server/XnioBufferPoolAdaptor;
      26: areturn

  public java.lang.String getProtocolRequestId();
    Code:
       0: aload_0
       1: getfield      #23                 // Field protocolRequestId:Ljava/lang/String;
       4: areturn

  public javax.net.ssl.SSLSession getSslSession();
    Code:
       0: aload_0
       1: getfield      #3                  // Field channel:Lio/undertow/protocols/http2/Http2Channel;
       4: invokevirtual #33                 // Method io/undertow/protocols/http2/Http2Channel.getSslSession:()Ljavax/net/ssl/SSLSession;
       7: areturn

  public io.undertow.connector.ByteBufferPool getByteBufferPool();
    Code:
       0: aload_0
       1: getfield      #3                  // Field channel:Lio/undertow/protocols/http2/Http2Channel;
       4: invokevirtual #34                 // Method io/undertow/protocols/http2/Http2Channel.getBufferPool:()Lio/undertow/connector/ByteBufferPool;
       7: areturn

  public org.xnio.XnioWorker getWorker();
    Code:
       0: aload_0
       1: getfield      #3                  // Field channel:Lio/undertow/protocols/http2/Http2Channel;
       4: invokevirtual #35                 // Method io/undertow/protocols/http2/Http2Channel.getWorker:()Lorg/xnio/XnioWorker;
       7: areturn

  public org.xnio.XnioIoThread getIoThread();
    Code:
       0: aload_0
       1: getfield      #3                  // Field channel:Lio/undertow/protocols/http2/Http2Channel;
       4: invokevirtual #36                 // Method io/undertow/protocols/http2/Http2Channel.getIoThread:()Lorg/xnio/XnioIoThread;
       7: areturn

  public io.undertow.server.HttpServerExchange sendOutOfBandResponse(io.undertow.server.HttpServerExchange);
    Code:
       0: aload_1
       1: ifnull        11
       4: aload_1
       5: invokestatic  #37                 // Method io/undertow/server/protocol/http/HttpContinue.requiresContinueResponse:(Lio/undertow/server/HttpServerExchange;)Z
       8: ifne          20
      11: getstatic     #38                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      14: invokeinterface #39,  1           // InterfaceMethod io/undertow/UndertowMessages.outOfBandResponseOnlyAllowedFor100Continue:()Ljava/lang/IllegalArgumentException;
      19: athrow
      20: new           #40                 // class io/undertow/server/HttpServerExchange
      23: dup
      24: aload_0
      25: invokespecial #41                 // Method io/undertow/server/HttpServerExchange."<init>":(Lio/undertow/server/ServerConnection;)V
      28: astore_2
      29: aload_1
      30: invokevirtual #42                 // Method io/undertow/server/HttpServerExchange.getRequestHeaders:()Lio/undertow/util/HeaderMap;
      33: invokevirtual #43                 // Method io/undertow/util/HeaderMap.getHeaderNames:()Ljava/util/Collection;
      36: invokeinterface #44,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      41: astore_3
      42: aload_3
      43: invokeinterface #45,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      48: ifeq          84
      51: aload_3
      52: invokeinterface #46,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      57: checkcast     #47                 // class io/undertow/util/HttpString
      60: astore        4
      62: aload_2
      63: invokevirtual #42                 // Method io/undertow/server/HttpServerExchange.getRequestHeaders:()Lio/undertow/util/HeaderMap;
      66: aload         4
      68: aload_1
      69: invokevirtual #42                 // Method io/undertow/server/HttpServerExchange.getRequestHeaders:()Lio/undertow/util/HeaderMap;
      72: aload         4
      74: invokevirtual #48                 // Method io/undertow/util/HeaderMap.get:(Lio/undertow/util/HttpString;)Lio/undertow/util/HeaderValues;
      77: invokevirtual #49                 // Method io/undertow/util/HeaderMap.putAll:(Lio/undertow/util/HttpString;Ljava/util/Collection;)Lio/undertow/util/HeaderMap;
      80: pop
      81: goto          42
      84: aload_2
      85: aload_1
      86: invokevirtual #50                 // Method io/undertow/server/HttpServerExchange.getProtocol:()Lio/undertow/util/HttpString;
      89: invokevirtual #51                 // Method io/undertow/server/HttpServerExchange.setProtocol:(Lio/undertow/util/HttpString;)Lio/undertow/server/HttpServerExchange;
      92: pop
      93: aload_2
      94: aload_1
      95: invokevirtual #52                 // Method io/undertow/server/HttpServerExchange.getRequestMethod:()Lio/undertow/util/HttpString;
      98: invokevirtual #53                 // Method io/undertow/server/HttpServerExchange.setRequestMethod:(Lio/undertow/util/HttpString;)Lio/undertow/server/HttpServerExchange;
     101: pop
     102: aload_1
     103: aload_1
     104: invokevirtual #54                 // Method io/undertow/server/HttpServerExchange.getRequestURI:()Ljava/lang/String;
     107: aload_1
     108: invokevirtual #55                 // Method io/undertow/server/HttpServerExchange.isHostIncludedInRequestURI:()Z
     111: invokevirtual #56                 // Method io/undertow/server/HttpServerExchange.setRequestURI:(Ljava/lang/String;Z)Lio/undertow/server/HttpServerExchange;
     114: pop
     115: aload_1
     116: aload_1
     117: invokevirtual #57                 // Method io/undertow/server/HttpServerExchange.getRequestPath:()Ljava/lang/String;
     120: invokevirtual #58                 // Method io/undertow/server/HttpServerExchange.setRequestPath:(Ljava/lang/String;)Lio/undertow/server/HttpServerExchange;
     123: pop
     124: aload_1
     125: aload_1
     126: invokevirtual #59                 // Method io/undertow/server/HttpServerExchange.getRelativePath:()Ljava/lang/String;
     129: invokevirtual #60                 // Method io/undertow/server/HttpServerExchange.setRelativePath:(Ljava/lang/String;)Lio/undertow/server/HttpServerExchange;
     132: pop
     133: aload_2
     134: iconst_1
     135: invokevirtual #61                 // Method io/undertow/server/HttpServerExchange.setPersistent:(Z)Lio/undertow/server/HttpServerExchange;
     138: pop
     139: aload_2
     140: invokestatic  #62                 // Method io/undertow/server/Connectors.terminateRequest:(Lio/undertow/server/HttpServerExchange;)V
     143: aload_2
     144: new           #63                 // class io/undertow/server/protocol/http2/Http2ServerConnection$1
     147: dup
     148: aload_0
     149: aload_2
     150: invokespecial #64                 // Method io/undertow/server/protocol/http2/Http2ServerConnection$1."<init>":(Lio/undertow/server/protocol/http2/Http2ServerConnection;Lio/undertow/server/HttpServerExchange;)V
     153: invokevirtual #65                 // Method io/undertow/server/HttpServerExchange.addResponseWrapper:(Lio/undertow/server/ConduitWrapper;)Lio/undertow/server/HttpServerExchange;
     156: pop
     157: aload_0
     158: iconst_1
     159: putfield      #2                  // Field continueSent:Z
     162: aload_2
     163: areturn

  public boolean isContinueResponseSupported();
    Code:
       0: iconst_1
       1: ireturn

  public void terminateRequestChannel(io.undertow.server.HttpServerExchange);
    Code:
       0: aload_1
       1: invokevirtual #42                 // Method io/undertow/server/HttpServerExchange.getRequestHeaders:()Lio/undertow/util/HeaderMap;
       4: invokestatic  #66                 // Method io/undertow/server/protocol/http/HttpContinue.requiresContinueResponse:(Lio/undertow/util/HeaderMap;)Z
       7: ifeq          52
      10: aload_0
      11: getfield      #2                  // Field continueSent:Z
      14: ifne          52
      17: aload_0
      18: getfield      #4                  // Field requestChannel:Lio/undertow/protocols/http2/Http2StreamSourceChannel;
      21: ifnull        52
      24: aload_0
      25: getfield      #4                  // Field requestChannel:Lio/undertow/protocols/http2/Http2StreamSourceChannel;
      28: iconst_1
      29: invokevirtual #67                 // Method io/undertow/protocols/http2/Http2StreamSourceChannel.setIgnoreForceClose:(Z)V
      32: aload_0
      33: getfield      #4                  // Field requestChannel:Lio/undertow/protocols/http2/Http2StreamSourceChannel;
      36: invokevirtual #68                 // Method io/undertow/protocols/http2/Http2StreamSourceChannel.close:()V
      39: aload_1
      40: new           #69                 // class io/undertow/server/protocol/http2/Http2ServerConnection$2
      43: dup
      44: aload_0
      45: invokespecial #70                 // Method io/undertow/server/protocol/http2/Http2ServerConnection$2."<init>":(Lio/undertow/server/protocol/http2/Http2ServerConnection;)V
      48: invokevirtual #71                 // Method io/undertow/server/HttpServerExchange.addExchangeCompleteListener:(Lio/undertow/server/ExchangeCompletionListener;)Lio/undertow/server/HttpServerExchange;
      51: pop
      52: return

  public boolean isOpen();
    Code:
       0: aload_0
       1: getfield      #3                  // Field channel:Lio/undertow/protocols/http2/Http2Channel;
       4: invokevirtual #72                 // Method io/undertow/protocols/http2/Http2Channel.isOpen:()Z
       7: ireturn

  public boolean supportsOption(org.xnio.Option<?>);
    Code:
       0: iconst_0
       1: ireturn

  public <T> T getOption(org.xnio.Option<T>) throws java.io.IOException;
    Code:
       0: aconst_null
       1: areturn

  public <T> T setOption(org.xnio.Option<T>, T) throws java.lang.IllegalArgumentException, java.io.IOException;
    Code:
       0: aconst_null
       1: areturn

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field channel:Lio/undertow/protocols/http2/Http2Channel;
       4: aload_0
       5: getfield      #4                  // Field requestChannel:Lio/undertow/protocols/http2/Http2StreamSourceChannel;
       8: invokevirtual #73                 // Method io/undertow/protocols/http2/Http2StreamSourceChannel.getStreamId:()I
      11: bipush        8
      13: invokevirtual #75                 // Method io/undertow/protocols/http2/Http2Channel.sendRstStream:(II)V
      16: return

  public java.net.SocketAddress getPeerAddress();
    Code:
       0: aload_0
       1: getfield      #3                  // Field channel:Lio/undertow/protocols/http2/Http2Channel;
       4: invokevirtual #76                 // Method io/undertow/protocols/http2/Http2Channel.getPeerAddress:()Ljava/net/SocketAddress;
       7: areturn

  public <A extends java.net.SocketAddress> A getPeerAddress(java.lang.Class<A>);
    Code:
       0: aload_0
       1: getfield      #3                  // Field channel:Lio/undertow/protocols/http2/Http2Channel;
       4: aload_1
       5: invokevirtual #77                 // Method io/undertow/protocols/http2/Http2Channel.getPeerAddress:(Ljava/lang/Class;)Ljava/net/SocketAddress;
       8: areturn

  public org.xnio.ChannelListener$Setter<? extends org.xnio.channels.ConnectedChannel> getCloseSetter();
    Code:
       0: aload_0
       1: getfield      #3                  // Field channel:Lio/undertow/protocols/http2/Http2Channel;
       4: invokevirtual #78                 // Method io/undertow/protocols/http2/Http2Channel.getCloseSetter:()Lorg/xnio/ChannelListener$Setter;
       7: areturn

  public java.net.SocketAddress getLocalAddress();
    Code:
       0: aload_0
       1: getfield      #3                  // Field channel:Lio/undertow/protocols/http2/Http2Channel;
       4: invokevirtual #79                 // Method io/undertow/protocols/http2/Http2Channel.getLocalAddress:()Ljava/net/SocketAddress;
       7: areturn

  public <A extends java.net.SocketAddress> A getLocalAddress(java.lang.Class<A>);
    Code:
       0: aload_0
       1: getfield      #3                  // Field channel:Lio/undertow/protocols/http2/Http2Channel;
       4: aload_1
       5: invokevirtual #80                 // Method io/undertow/protocols/http2/Http2Channel.getLocalAddress:(Ljava/lang/Class;)Ljava/net/SocketAddress;
       8: areturn

  public org.xnio.OptionMap getUndertowOptions();
    Code:
       0: aload_0
       1: getfield      #5                  // Field undertowOptions:Lorg/xnio/OptionMap;
       4: areturn

  public int getBufferSize();
    Code:
       0: aload_0
       1: getfield      #6                  // Field bufferSize:I
       4: ireturn

  public io.undertow.server.SSLSessionInfo getSslSessionInfo();
    Code:
       0: aload_0
       1: getfield      #81                 // Field sessionInfo:Lio/undertow/server/SSLSessionInfo;
       4: areturn

  public void setSslSessionInfo(io.undertow.server.SSLSessionInfo);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #81                 // Field sessionInfo:Lio/undertow/server/SSLSessionInfo;
       5: return

  public void addCloseListener(io.undertow.server.ServerConnection$CloseListener);
    Code:
       0: aload_0
       1: getfield      #3                  // Field channel:Lio/undertow/protocols/http2/Http2Channel;
       4: new           #82                 // class io/undertow/server/protocol/http2/Http2ServerConnection$3
       7: dup
       8: aload_0
       9: aload_1
      10: invokespecial #83                 // Method io/undertow/server/protocol/http2/Http2ServerConnection$3."<init>":(Lio/undertow/server/protocol/http2/Http2ServerConnection;Lio/undertow/server/ServerConnection$CloseListener;)V
      13: invokevirtual #84                 // Method io/undertow/protocols/http2/Http2Channel.addCloseTask:(Lorg/xnio/ChannelListener;)V
      16: return

  protected org.xnio.StreamConnection upgradeChannel();
    Code:
       0: getstatic     #38                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
       3: invokeinterface #85,  1           // InterfaceMethod io/undertow/UndertowMessages.upgradeNotSupported:()Ljava/lang/IllegalStateException;
       8: athrow

  protected org.xnio.conduits.ConduitStreamSinkChannel getSinkChannel();
    Code:
       0: aload_0
       1: getfield      #18                 // Field conduitStreamSinkChannel:Lorg/xnio/conduits/ConduitStreamSinkChannel;
       4: areturn

  protected org.xnio.conduits.ConduitStreamSourceChannel getSourceChannel();
    Code:
       0: aload_0
       1: getfield      #21                 // Field conduitStreamSourceChannel:Lorg/xnio/conduits/ConduitStreamSourceChannel;
       4: areturn

  protected org.xnio.conduits.StreamSinkConduit getSinkConduit(io.undertow.server.HttpServerExchange, org.xnio.conduits.StreamSinkConduit);
    Code:
       0: aload_0
       1: getfield      #9                  // Field responseChannel:Lio/undertow/protocols/http2/Http2DataStreamSinkChannel;
       4: invokevirtual #86                 // Method io/undertow/protocols/http2/Http2DataStreamSinkChannel.getHeaders:()Lio/undertow/util/HeaderMap;
       7: astore_3
       8: aload_1
       9: invokestatic  #87                 // Method io/undertow/util/DateUtils.addDateHeaderIfRequired:(Lio/undertow/server/HttpServerExchange;)V
      12: aload_3
      13: getstatic     #88                 // Field STATUS:Lio/undertow/util/HttpString;
      16: aload_1
      17: invokevirtual #89                 // Method io/undertow/server/HttpServerExchange.getStatusCode:()I
      20: i2l
      21: invokevirtual #90                 // Method io/undertow/util/HeaderMap.add:(Lio/undertow/util/HttpString;J)Lio/undertow/util/HeaderMap;
      24: pop
      25: aload_1
      26: invokestatic  #91                 // Method io/undertow/server/Connectors.flattenCookies:(Lio/undertow/server/HttpServerExchange;)V
      29: aload_1
      30: invokestatic  #92                 // Method io/undertow/server/Connectors.isEntityBodyAllowed:(Lio/undertow/server/HttpServerExchange;)Z
      33: ifne          58
      36: aload_1
      37: invokevirtual #93                 // Method io/undertow/server/HttpServerExchange.getResponseHeaders:()Lio/undertow/util/HeaderMap;
      40: getstatic     #94                 // Field io/undertow/util/Headers.CONTENT_LENGTH:Lio/undertow/util/HttpString;
      43: invokevirtual #95                 // Method io/undertow/util/HeaderMap.remove:(Lio/undertow/util/HttpString;)Ljava/util/Collection;
      46: pop
      47: aload_1
      48: invokevirtual #93                 // Method io/undertow/server/HttpServerExchange.getResponseHeaders:()Lio/undertow/util/HeaderMap;
      51: getstatic     #96                 // Field io/undertow/util/Headers.TRANSFER_ENCODING:Lio/undertow/util/HttpString;
      54: invokevirtual #95                 // Method io/undertow/util/HeaderMap.remove:(Lio/undertow/util/HttpString;)Ljava/util/Collection;
      57: pop
      58: aload_0
      59: getfield      #12                 // Field originalSinkConduit:Lorg/xnio/conduits/StreamSinkConduit;
      62: areturn

  protected boolean isUpgradeSupported();
    Code:
       0: iconst_0
       1: ireturn

  protected boolean isConnectSupported();
    Code:
       0: iconst_0
       1: ireturn

  protected void exchangeComplete(io.undertow.server.HttpServerExchange);
    Code:
       0: return

  protected void setUpgradeListener(io.undertow.server.HttpUpgradeListener);
    Code:
       0: getstatic     #38                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
       3: invokeinterface #85,  1           // InterfaceMethod io/undertow/UndertowMessages.upgradeNotSupported:()Ljava/lang/IllegalStateException;
       8: athrow

  protected void setConnectListener(io.undertow.server.HttpUpgradeListener);
    Code:
       0: return

  protected void maxEntitySizeUpdated(io.undertow.server.HttpServerExchange);
    Code:
       0: aload_0
       1: getfield      #4                  // Field requestChannel:Lio/undertow/protocols/http2/Http2StreamSourceChannel;
       4: ifnull        18
       7: aload_0
       8: getfield      #4                  // Field requestChannel:Lio/undertow/protocols/http2/Http2StreamSourceChannel;
      11: aload_1
      12: invokevirtual #97                 // Method io/undertow/server/HttpServerExchange.getMaxEntitySize:()J
      15: invokevirtual #98                 // Method io/undertow/protocols/http2/Http2StreamSourceChannel.setMaxStreamSize:(J)V
      18: return

  public <T> void addToAttachmentList(io.undertow.util.AttachmentKey<io.undertow.util.AttachmentList<T>>, T);
    Code:
       0: aload_0
       1: getfield      #3                  // Field channel:Lio/undertow/protocols/http2/Http2Channel;
       4: aload_1
       5: aload_2
       6: invokevirtual #99                 // Method io/undertow/protocols/http2/Http2Channel.addToAttachmentList:(Lio/undertow/util/AttachmentKey;Ljava/lang/Object;)V
       9: return

  public <T> T removeAttachment(io.undertow.util.AttachmentKey<T>);
    Code:
       0: aload_0
       1: getfield      #3                  // Field channel:Lio/undertow/protocols/http2/Http2Channel;
       4: aload_1
       5: invokevirtual #100                // Method io/undertow/protocols/http2/Http2Channel.removeAttachment:(Lio/undertow/util/AttachmentKey;)Ljava/lang/Object;
       8: areturn

  public <T> T putAttachment(io.undertow.util.AttachmentKey<T>, T);
    Code:
       0: aload_0
       1: getfield      #3                  // Field channel:Lio/undertow/protocols/http2/Http2Channel;
       4: aload_1
       5: aload_2
       6: invokevirtual #101                // Method io/undertow/protocols/http2/Http2Channel.putAttachment:(Lio/undertow/util/AttachmentKey;Ljava/lang/Object;)Ljava/lang/Object;
       9: areturn

  public <T> java.util.List<T> getAttachmentList(io.undertow.util.AttachmentKey<? extends java.util.List<T>>);
    Code:
       0: aload_0
       1: getfield      #3                  // Field channel:Lio/undertow/protocols/http2/Http2Channel;
       4: aload_1
       5: invokevirtual #102                // Method io/undertow/protocols/http2/Http2Channel.getAttachmentList:(Lio/undertow/util/AttachmentKey;)Ljava/util/List;
       8: areturn

  public <T> T getAttachment(io.undertow.util.AttachmentKey<T>);
    Code:
       0: aload_0
       1: getfield      #3                  // Field channel:Lio/undertow/protocols/http2/Http2Channel;
       4: aload_1
       5: invokevirtual #103                // Method io/undertow/protocols/http2/Http2Channel.getAttachment:(Lio/undertow/util/AttachmentKey;)Ljava/lang/Object;
       8: areturn

  public boolean isPushSupported();
    Code:
       0: aload_0
       1: getfield      #3                  // Field channel:Lio/undertow/protocols/http2/Http2Channel;
       4: invokevirtual #104                // Method io/undertow/protocols/http2/Http2Channel.isPushEnabled:()Z
       7: ifeq          42
      10: aload_0
      11: getfield      #24                 // Field exchange:Lio/undertow/server/HttpServerExchange;
      14: invokevirtual #42                 // Method io/undertow/server/HttpServerExchange.getRequestHeaders:()Lio/undertow/util/HeaderMap;
      17: getstatic     #105                // Field io/undertow/util/Headers.X_DISABLE_PUSH:Lio/undertow/util/HttpString;
      20: invokevirtual #106                // Method io/undertow/util/HeaderMap.contains:(Lio/undertow/util/HttpString;)Z
      23: ifne          42
      26: aload_0
      27: getfield      #9                  // Field responseChannel:Lio/undertow/protocols/http2/Http2DataStreamSinkChannel;
      30: invokevirtual #107                // Method io/undertow/protocols/http2/Http2DataStreamSinkChannel.getStreamId:()I
      33: iconst_2
      34: irem
      35: ifeq          42
      38: iconst_1
      39: goto          43
      42: iconst_0
      43: ireturn

  public boolean isRequestTrailerFieldsSupported();
    Code:
       0: iconst_1
       1: ireturn

  public boolean pushResource(java.lang.String, io.undertow.util.HttpString, io.undertow.util.HeaderMap);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload_0
       5: getfield      #7                  // Field rootHandler:Lio/undertow/server/HttpHandler;
       8: invokevirtual #108                // Method pushResource:(Ljava/lang/String;Lio/undertow/util/HttpString;Lio/undertow/util/HeaderMap;Lio/undertow/server/HttpHandler;)Z
      11: ireturn

  public boolean pushResource(java.lang.String, io.undertow.util.HttpString, io.undertow.util.HeaderMap, io.undertow.server.HttpHandler);
    Code:
       0: new           #109                // class io/undertow/util/HeaderMap
       3: dup
       4: invokespecial #110                // Method io/undertow/util/HeaderMap."<init>":()V
       7: astore        5
       9: aload_3
      10: getstatic     #111                // Field io/undertow/protocols/http2/Http2Channel.METHOD:Lio/undertow/util/HttpString;
      13: aload_2
      14: invokevirtual #112                // Method io/undertow/util/HttpString.toString:()Ljava/lang/String;
      17: invokevirtual #113                // Method io/undertow/util/HeaderMap.put:(Lio/undertow/util/HttpString;Ljava/lang/String;)Lio/undertow/util/HeaderMap;
      20: pop
      21: aload_3
      22: getstatic     #114                // Field io/undertow/protocols/http2/Http2Channel.PATH:Lio/undertow/util/HttpString;
      25: aload_1
      26: invokevirtual #115                // Method java/lang/String.toString:()Ljava/lang/String;
      29: invokevirtual #113                // Method io/undertow/util/HeaderMap.put:(Lio/undertow/util/HttpString;Ljava/lang/String;)Lio/undertow/util/HeaderMap;
      32: pop
      33: aload_3
      34: getstatic     #116                // Field io/undertow/protocols/http2/Http2Channel.AUTHORITY:Lio/undertow/util/HttpString;
      37: aload_0
      38: getfield      #24                 // Field exchange:Lio/undertow/server/HttpServerExchange;
      41: invokevirtual #117                // Method io/undertow/server/HttpServerExchange.getHostAndPort:()Ljava/lang/String;
      44: invokevirtual #113                // Method io/undertow/util/HeaderMap.put:(Lio/undertow/util/HttpString;Ljava/lang/String;)Lio/undertow/util/HeaderMap;
      47: pop
      48: aload_3
      49: getstatic     #118                // Field io/undertow/protocols/http2/Http2Channel.SCHEME:Lio/undertow/util/HttpString;
      52: aload_0
      53: getfield      #24                 // Field exchange:Lio/undertow/server/HttpServerExchange;
      56: invokevirtual #119                // Method io/undertow/server/HttpServerExchange.getRequestScheme:()Ljava/lang/String;
      59: invokevirtual #113                // Method io/undertow/util/HeaderMap.put:(Lio/undertow/util/HttpString;Ljava/lang/String;)Lio/undertow/util/HeaderMap;
      62: pop
      63: aload_0
      64: getfield      #3                  // Field channel:Lio/undertow/protocols/http2/Http2Channel;
      67: aload_0
      68: getfield      #9                  // Field responseChannel:Lio/undertow/protocols/http2/Http2DataStreamSinkChannel;
      71: invokevirtual #107                // Method io/undertow/protocols/http2/Http2DataStreamSinkChannel.getStreamId:()I
      74: aload_3
      75: aload         5
      77: invokevirtual #120                // Method io/undertow/protocols/http2/Http2Channel.sendPushPromise:(ILio/undertow/util/HeaderMap;Lio/undertow/util/HeaderMap;)Lio/undertow/protocols/http2/Http2HeadersStreamSinkChannel;
      80: astore        6
      82: new           #121                // class io/undertow/server/protocol/http2/Http2ServerConnection
      85: dup
      86: aload_0
      87: getfield      #3                  // Field channel:Lio/undertow/protocols/http2/Http2Channel;
      90: aload         6
      92: aload_0
      93: invokevirtual #122                // Method getUndertowOptions:()Lorg/xnio/OptionMap;
      96: aload_0
      97: invokevirtual #123                // Method getBufferSize:()I
     100: aload_0
     101: getfield      #7                  // Field rootHandler:Lio/undertow/server/HttpHandler;
     104: invokespecial #124                // Method "<init>":(Lio/undertow/protocols/http2/Http2Channel;Lio/undertow/protocols/http2/Http2DataStreamSinkChannel;Lorg/xnio/OptionMap;ILio/undertow/server/HttpHandler;)V
     107: astore        7
     109: new           #40                 // class io/undertow/server/HttpServerExchange
     112: dup
     113: aload         7
     115: aload_3
     116: aload         5
     118: aload_0
     119: invokevirtual #122                // Method getUndertowOptions:()Lorg/xnio/OptionMap;
     122: getstatic     #125                // Field io/undertow/UndertowOptions.MAX_ENTITY_SIZE:Lorg/xnio/Option;
     125: ldc2_w        #127                // long -1l
     128: invokevirtual #129                // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;J)J
     131: invokespecial #130                // Method io/undertow/server/HttpServerExchange."<init>":(Lio/undertow/server/ServerConnection;Lio/undertow/util/HeaderMap;Lio/undertow/util/HeaderMap;J)V
     134: astore        8
     136: aload         7
     138: aload         8
     140: invokevirtual #131                // Method setExchange:(Lio/undertow/server/HttpServerExchange;)V
     143: aload         8
     145: aload_2
     146: invokevirtual #53                 // Method io/undertow/server/HttpServerExchange.setRequestMethod:(Lio/undertow/util/HttpString;)Lio/undertow/server/HttpServerExchange;
     149: pop
     150: aload         8
     152: getstatic     #132                // Field io/undertow/util/Protocols.HTTP_1_1:Lio/undertow/util/HttpString;
     155: invokevirtual #51                 // Method io/undertow/server/HttpServerExchange.setProtocol:(Lio/undertow/util/HttpString;)Lio/undertow/server/HttpServerExchange;
     158: pop
     159: aload         8
     161: aload_0
     162: getfield      #24                 // Field exchange:Lio/undertow/server/HttpServerExchange;
     165: invokevirtual #119                // Method io/undertow/server/HttpServerExchange.getRequestScheme:()Ljava/lang/String;
     168: invokevirtual #133                // Method io/undertow/server/HttpServerExchange.setRequestScheme:(Ljava/lang/String;)Lio/undertow/server/HttpServerExchange;
     171: pop
     172: aload         8
     174: aload_1
     175: aload_0
     176: invokevirtual #122                // Method getUndertowOptions:()Lorg/xnio/OptionMap;
     179: getstatic     #134                // Field io/undertow/UndertowOptions.URL_CHARSET:Lorg/xnio/Option;
     182: getstatic     #135                // Field java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;
     185: invokevirtual #136                // Method java/nio/charset/Charset.name:()Ljava/lang/String;
     188: invokevirtual #137                // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;Ljava/lang/Object;)Ljava/lang/Object;
     191: checkcast     #138                // class java/lang/String
     194: aload_0
     195: invokevirtual #122                // Method getUndertowOptions:()Lorg/xnio/OptionMap;
     198: getstatic     #139                // Field io/undertow/UndertowOptions.DECODE_URL:Lorg/xnio/Option;
     201: iconst_1
     202: invokevirtual #140                // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;Z)Z
     205: aload_0
     206: invokevirtual #122                // Method getUndertowOptions:()Lorg/xnio/OptionMap;
     209: invokestatic  #141                // Method io/undertow/util/URLUtils.getSlashDecodingFlag:(Lorg/xnio/OptionMap;)Z
     212: new           #142                // class java/lang/StringBuilder
     215: dup
     216: invokespecial #143                // Method java/lang/StringBuilder."<init>":()V
     219: aload_0
     220: invokevirtual #122                // Method getUndertowOptions:()Lorg/xnio/OptionMap;
     223: getstatic     #144                // Field io/undertow/UndertowOptions.MAX_PARAMETERS:Lorg/xnio/Option;
     226: sipush        200
     229: invokevirtual #145                // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;I)I
     232: invokestatic  #146                // Method io/undertow/server/Connectors.setExchangeRequestPath:(Lio/undertow/server/HttpServerExchange;Ljava/lang/String;Ljava/lang/String;ZZLjava/lang/StringBuilder;I)V
     235: goto          269
     238: astore        9
     240: getstatic     #148                // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
     243: ldc           #149                // String Too many parameters in HTTP/2 request
     245: aload         9
     247: invokeinterface #150,  3          // InterfaceMethod io/undertow/UndertowLogger.debug:(Ljava/lang/Object;Ljava/lang/Throwable;)V
     252: aload         8
     254: sipush        400
     257: invokevirtual #152                // Method io/undertow/server/HttpServerExchange.setStatusCode:(I)Lio/undertow/server/HttpServerExchange;
     260: pop
     261: aload         8
     263: invokevirtual #153                // Method io/undertow/server/HttpServerExchange.endExchange:()Lio/undertow/server/HttpServerExchange;
     266: pop
     267: iconst_0
     268: ireturn
     269: aload         6
     271: new           #154                // class io/undertow/server/protocol/http2/Http2ServerConnection$4
     274: dup
     275: aload_0
     276: aload         8
     278: invokespecial #155                // Method io/undertow/server/protocol/http2/Http2ServerConnection$4."<init>":(Lio/undertow/server/protocol/http2/Http2ServerConnection;Lio/undertow/server/HttpServerExchange;)V
     281: invokevirtual #156                // Method io/undertow/protocols/http2/Http2HeadersStreamSinkChannel.setCompletionListener:(Lorg/xnio/ChannelListener;)V
     284: aload         8
     286: invokestatic  #62                 // Method io/undertow/server/Connectors.terminateRequest:(Lio/undertow/server/HttpServerExchange;)V
     289: aload_0
     290: invokevirtual #27                 // Method getIoThread:()Lorg/xnio/XnioIoThread;
     293: new           #157                // class io/undertow/server/protocol/http2/Http2ServerConnection$5
     296: dup
     297: aload_0
     298: aload         4
     300: aload         8
     302: invokespecial #158                // Method io/undertow/server/protocol/http2/Http2ServerConnection$5."<init>":(Lio/undertow/server/protocol/http2/Http2ServerConnection;Lio/undertow/server/HttpHandler;Lio/undertow/server/HttpServerExchange;)V
     305: invokevirtual #159                // Method org/xnio/XnioIoThread.execute:(Ljava/lang/Runnable;)V
     308: iconst_1
     309: ireturn
     310: astore        6
     312: getstatic     #148                // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
     315: aload         6
     317: invokeinterface #161,  2          // InterfaceMethod io/undertow/UndertowLogger.ioException:(Ljava/io/IOException;)V
     322: iconst_0
     323: ireturn
    Exception table:
       from    to  target type
         172   235   238   Class io/undertow/util/ParameterLimitException
           9   268   310   Class java/io/IOException
         269   309   310   Class java/io/IOException

  public java.lang.String getTransportProtocol();
    Code:
       0: aload_0
       1: getfield      #3                  // Field channel:Lio/undertow/protocols/http2/Http2Channel;
       4: invokevirtual #162                // Method io/undertow/protocols/http2/Http2Channel.getProtocol:()Ljava/lang/String;
       7: areturn

  static {};
    Code:
       0: new           #47                 // class io/undertow/util/HttpString
       3: dup
       4: ldc           #163                // String :status
       6: invokespecial #164                // Method io/undertow/util/HttpString."<init>":(Ljava/lang/String;)V
       9: putstatic     #88                 // Field STATUS:Lio/undertow/util/HttpString;
      12: return
}
