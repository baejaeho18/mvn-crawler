Compiled from "ProxyHandler.java"
public class io.undertow.server.handlers.proxy.ProxyHandler$Builder {
  private io.undertow.server.handlers.proxy.ProxyClient proxyClient;

  private int maxRequestTime;

  private final java.util.Map<io.undertow.util.HttpString, io.undertow.attribute.ExchangeAttribute> requestHeaders;

  private io.undertow.server.HttpHandler next;

  private boolean rewriteHostHeader;

  private boolean reuseXForwarded;

  private int maxConnectionRetries;

  private io.undertow.predicate.Predicate idempotentRequestPredicate;

  io.undertow.server.handlers.proxy.ProxyHandler$Builder();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_m1
       6: putfield      #2                  // Field maxRequestTime:I
       9: aload_0
      10: new           #3                  // class io/undertow/util/CopyOnWriteMap
      13: dup
      14: invokespecial #4                  // Method io/undertow/util/CopyOnWriteMap."<init>":()V
      17: putfield      #5                  // Field requestHeaders:Ljava/util/Map;
      20: aload_0
      21: getstatic     #6                  // Field io/undertow/server/handlers/ResponseCodeHandler.HANDLE_404:Lio/undertow/server/handlers/ResponseCodeHandler;
      24: putfield      #7                  // Field next:Lio/undertow/server/HttpHandler;
      27: aload_0
      28: getstatic     #8                  // Field io/undertow/server/handlers/proxy/ProxyHandler.DEFAULT_MAX_RETRY_ATTEMPTS:I
      31: putfield      #9                  // Field maxConnectionRetries:I
      34: aload_0
      35: getstatic     #10                 // Field io/undertow/predicate/IdempotentPredicate.INSTANCE:Lio/undertow/predicate/IdempotentPredicate;
      38: putfield      #11                 // Field idempotentRequestPredicate:Lio/undertow/predicate/Predicate;
      41: return

  public io.undertow.server.handlers.proxy.ProxyClient getProxyClient();
    Code:
       0: aload_0
       1: getfield      #12                 // Field proxyClient:Lio/undertow/server/handlers/proxy/ProxyClient;
       4: areturn

  public io.undertow.server.handlers.proxy.ProxyHandler$Builder setProxyClient(io.undertow.server.handlers.proxy.ProxyClient);
    Code:
       0: aload_1
       1: ifnonnull     15
       4: getstatic     #13                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
       7: ldc           #14                 // String proxyClient
       9: invokeinterface #15,  2           // InterfaceMethod io/undertow/UndertowMessages.argumentCannotBeNull:(Ljava/lang/String;)Ljava/lang/IllegalArgumentException;
      14: athrow
      15: aload_0
      16: aload_1
      17: putfield      #12                 // Field proxyClient:Lio/undertow/server/handlers/proxy/ProxyClient;
      20: aload_0
      21: areturn

  public int getMaxRequestTime();
    Code:
       0: aload_0
       1: getfield      #2                  // Field maxRequestTime:I
       4: ireturn

  public io.undertow.server.handlers.proxy.ProxyHandler$Builder setMaxRequestTime(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #2                  // Field maxRequestTime:I
       5: aload_0
       6: areturn

  public java.util.Map<io.undertow.util.HttpString, io.undertow.attribute.ExchangeAttribute> getRequestHeaders();
    Code:
       0: aload_0
       1: getfield      #5                  // Field requestHeaders:Ljava/util/Map;
       4: invokestatic  #16                 // Method java/util/Collections.unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;
       7: areturn

  public io.undertow.server.handlers.proxy.ProxyHandler$Builder addRequestHeader(io.undertow.util.HttpString, io.undertow.attribute.ExchangeAttribute);
    Code:
       0: aload_0
       1: getfield      #5                  // Field requestHeaders:Ljava/util/Map;
       4: aload_1
       5: aload_2
       6: invokeinterface #17,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      11: pop
      12: aload_0
      13: areturn

  public io.undertow.server.HttpHandler getNext();
    Code:
       0: aload_0
       1: getfield      #7                  // Field next:Lio/undertow/server/HttpHandler;
       4: areturn

  public io.undertow.server.handlers.proxy.ProxyHandler$Builder setNext(io.undertow.server.HttpHandler);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #7                  // Field next:Lio/undertow/server/HttpHandler;
       5: aload_0
       6: areturn

  public boolean isRewriteHostHeader();
    Code:
       0: aload_0
       1: getfield      #18                 // Field rewriteHostHeader:Z
       4: ireturn

  public io.undertow.server.handlers.proxy.ProxyHandler$Builder setRewriteHostHeader(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #18                 // Field rewriteHostHeader:Z
       5: aload_0
       6: areturn

  public boolean isReuseXForwarded();
    Code:
       0: aload_0
       1: getfield      #19                 // Field reuseXForwarded:Z
       4: ireturn

  public io.undertow.server.handlers.proxy.ProxyHandler$Builder setReuseXForwarded(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #19                 // Field reuseXForwarded:Z
       5: aload_0
       6: areturn

  public int getMaxConnectionRetries();
    Code:
       0: aload_0
       1: getfield      #9                  // Field maxConnectionRetries:I
       4: ireturn

  public io.undertow.server.handlers.proxy.ProxyHandler$Builder setMaxConnectionRetries(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #9                  // Field maxConnectionRetries:I
       5: aload_0
       6: areturn

  public io.undertow.predicate.Predicate getIdempotentRequestPredicate();
    Code:
       0: aload_0
       1: getfield      #11                 // Field idempotentRequestPredicate:Lio/undertow/predicate/Predicate;
       4: areturn

  public io.undertow.server.handlers.proxy.ProxyHandler$Builder setIdempotentRequestPredicate(io.undertow.predicate.Predicate);
    Code:
       0: aload_1
       1: ifnonnull     15
       4: getstatic     #13                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
       7: ldc           #20                 // String idempotentRequestPredicate
       9: invokeinterface #15,  2           // InterfaceMethod io/undertow/UndertowMessages.argumentCannotBeNull:(Ljava/lang/String;)Ljava/lang/IllegalArgumentException;
      14: athrow
      15: aload_0
      16: aload_1
      17: putfield      #11                 // Field idempotentRequestPredicate:Lio/undertow/predicate/Predicate;
      20: aload_0
      21: areturn

  public io.undertow.server.handlers.proxy.ProxyHandler build();
    Code:
       0: new           #21                 // class io/undertow/server/handlers/proxy/ProxyHandler
       3: dup
       4: aload_0
       5: invokespecial #22                 // Method io/undertow/server/handlers/proxy/ProxyHandler."<init>":(Lio/undertow/server/handlers/proxy/ProxyHandler$Builder;)V
       8: areturn
}
