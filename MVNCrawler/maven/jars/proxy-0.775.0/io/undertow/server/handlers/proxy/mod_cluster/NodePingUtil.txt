Compiled from "NodePingUtil.java"
class io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil {
  io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  static void pingHost(java.net.InetSocketAddress, io.undertow.server.HttpServerExchange, io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$PingCallback, org.xnio.OptionMap);
    Code:
       0: aload_1
       1: invokevirtual #2                  // Method io/undertow/server/HttpServerExchange.getIoThread:()Lorg/xnio/XnioIoThread;
       4: astore        4
       6: aload         4
       8: invokevirtual #3                  // Method org/xnio/XnioIoThread.getWorker:()Lorg/xnio/XnioWorker;
      11: astore        5
      13: new           #4                  // class io/undertow/server/handlers/proxy/mod_cluster/NodePingUtil$HostPingTask
      16: dup
      17: aload_0
      18: aload         5
      20: aload_2
      21: aload_3
      22: invokespecial #5                  // Method io/undertow/server/handlers/proxy/mod_cluster/NodePingUtil$HostPingTask."<init>":(Ljava/net/InetSocketAddress;Lorg/xnio/XnioWorker;Lio/undertow/server/handlers/proxy/mod_cluster/NodePingUtil$PingCallback;Lorg/xnio/OptionMap;)V
      25: astore        6
      27: aload_1
      28: invokevirtual #2                  // Method io/undertow/server/HttpServerExchange.getIoThread:()Lorg/xnio/XnioIoThread;
      31: aload         6
      33: ldc2_w        #6                  // long 5l
      36: getstatic     #8                  // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
      39: invokestatic  #9                  // Method scheduleCancelTask:(Lorg/xnio/XnioIoThread;Lio/undertow/server/handlers/proxy/mod_cluster/NodePingUtil$CancellableTask;JLjava/util/concurrent/TimeUnit;)V
      42: aload_1
      43: aload_1
      44: invokevirtual #10                 // Method io/undertow/server/HttpServerExchange.isInIoThread:()Z
      47: ifeq          56
      50: getstatic     #11                 // Field io/undertow/util/SameThreadExecutor.INSTANCE:Ljava/util/concurrent/Executor;
      53: goto          58
      56: aload         4
      58: aload         6
      60: invokevirtual #12                 // Method io/undertow/server/HttpServerExchange.dispatch:(Ljava/util/concurrent/Executor;Ljava/lang/Runnable;)Lio/undertow/server/HttpServerExchange;
      63: pop
      64: return

  static void pingHttpClient(java.net.URI, io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$PingCallback, io.undertow.server.HttpServerExchange, io.undertow.client.UndertowClient, org.xnio.ssl.XnioSsl, org.xnio.OptionMap);
    Code:
       0: aload_2
       1: invokevirtual #2                  // Method io/undertow/server/HttpServerExchange.getIoThread:()Lorg/xnio/XnioIoThread;
       4: astore        6
       6: new           #13                 // class io/undertow/server/handlers/proxy/mod_cluster/NodePingUtil$RequestExchangeListener
       9: dup
      10: aload_1
      11: getstatic     #14                 // Field io/undertow/server/handlers/proxy/mod_cluster/NodeHealthChecker.NO_CHECK:Lio/undertow/server/handlers/proxy/mod_cluster/NodeHealthChecker;
      14: iconst_1
      15: invokespecial #15                 // Method io/undertow/server/handlers/proxy/mod_cluster/NodePingUtil$RequestExchangeListener."<init>":(Lio/undertow/server/handlers/proxy/mod_cluster/NodePingUtil$PingCallback;Lio/undertow/server/handlers/proxy/mod_cluster/NodeHealthChecker;Z)V
      18: astore        7
      20: new           #16                 // class io/undertow/server/handlers/proxy/mod_cluster/NodePingUtil$HttpClientPingTask
      23: dup
      24: aload_0
      25: aload         7
      27: aload         6
      29: aload_3
      30: aload         4
      32: aload_2
      33: invokevirtual #17                 // Method io/undertow/server/HttpServerExchange.getConnection:()Lio/undertow/server/ServerConnection;
      36: invokevirtual #18                 // Method io/undertow/server/ServerConnection.getByteBufferPool:()Lio/undertow/connector/ByteBufferPool;
      39: aload         5
      41: invokespecial #19                 // Method io/undertow/server/handlers/proxy/mod_cluster/NodePingUtil$HttpClientPingTask."<init>":(Ljava/net/URI;Lio/undertow/server/handlers/proxy/mod_cluster/NodePingUtil$RequestExchangeListener;Lorg/xnio/XnioIoThread;Lio/undertow/client/UndertowClient;Lorg/xnio/ssl/XnioSsl;Lio/undertow/connector/ByteBufferPool;Lorg/xnio/OptionMap;)V
      44: astore        8
      46: aload_2
      47: aload_2
      48: invokevirtual #10                 // Method io/undertow/server/HttpServerExchange.isInIoThread:()Z
      51: ifeq          60
      54: getstatic     #11                 // Field io/undertow/util/SameThreadExecutor.INSTANCE:Ljava/util/concurrent/Executor;
      57: goto          62
      60: aload         6
      62: aload         8
      64: invokevirtual #12                 // Method io/undertow/server/HttpServerExchange.dispatch:(Ljava/util/concurrent/Executor;Ljava/lang/Runnable;)Lio/undertow/server/HttpServerExchange;
      67: pop
      68: aload_2
      69: invokevirtual #2                  // Method io/undertow/server/HttpServerExchange.getIoThread:()Lorg/xnio/XnioIoThread;
      72: aload         7
      74: ldc2_w        #6                  // long 5l
      77: getstatic     #8                  // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
      80: invokestatic  #9                  // Method scheduleCancelTask:(Lorg/xnio/XnioIoThread;Lio/undertow/server/handlers/proxy/mod_cluster/NodePingUtil$CancellableTask;JLjava/util/concurrent/TimeUnit;)V
      83: return

  static void pingNode(io.undertow.server.handlers.proxy.mod_cluster.Node, io.undertow.server.HttpServerExchange, io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$PingCallback);
    Code:
       0: aload_0
       1: ifnonnull     11
       4: aload_2
       5: invokeinterface #20,  1           // InterfaceMethod io/undertow/server/handlers/proxy/mod_cluster/NodePingUtil$PingCallback.failed:()V
      10: return
      11: aload_0
      12: invokevirtual #21                 // Method io/undertow/server/handlers/proxy/mod_cluster/Node.getNodeConfig:()Lio/undertow/server/handlers/proxy/mod_cluster/NodeConfig;
      15: invokevirtual #22                 // Method io/undertow/server/handlers/proxy/mod_cluster/NodeConfig.getPing:()I
      18: istore_3
      19: aload_1
      20: aload_1
      21: invokevirtual #10                 // Method io/undertow/server/HttpServerExchange.isInIoThread:()Z
      24: ifeq          33
      27: getstatic     #11                 // Field io/undertow/util/SameThreadExecutor.INSTANCE:Ljava/util/concurrent/Executor;
      30: goto          37
      33: aload_1
      34: invokevirtual #2                  // Method io/undertow/server/HttpServerExchange.getIoThread:()Lorg/xnio/XnioIoThread;
      37: new           #23                 // class io/undertow/server/handlers/proxy/mod_cluster/NodePingUtil$1
      40: dup
      41: aload_0
      42: aload_1
      43: aload_2
      44: iload_3
      45: invokespecial #24                 // Method io/undertow/server/handlers/proxy/mod_cluster/NodePingUtil$1."<init>":(Lio/undertow/server/handlers/proxy/mod_cluster/Node;Lio/undertow/server/HttpServerExchange;Lio/undertow/server/handlers/proxy/mod_cluster/NodePingUtil$PingCallback;I)V
      48: invokevirtual #12                 // Method io/undertow/server/HttpServerExchange.dispatch:(Ljava/util/concurrent/Executor;Ljava/lang/Runnable;)Lio/undertow/server/HttpServerExchange;
      51: pop
      52: return

  static void internalPingNode(io.undertow.server.handlers.proxy.mod_cluster.Node, io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$PingCallback, io.undertow.server.handlers.proxy.mod_cluster.NodeHealthChecker, org.xnio.XnioIoThread, io.undertow.connector.ByteBufferPool, io.undertow.client.UndertowClient, org.xnio.ssl.XnioSsl, org.xnio.OptionMap);
    Code:
       0: aload_0
       1: invokevirtual #21                 // Method io/undertow/server/handlers/proxy/mod_cluster/Node.getNodeConfig:()Lio/undertow/server/handlers/proxy/mod_cluster/NodeConfig;
       4: invokevirtual #25                 // Method io/undertow/server/handlers/proxy/mod_cluster/NodeConfig.getConnectionURI:()Ljava/net/URI;
       7: astore        8
       9: aload_0
      10: invokevirtual #21                 // Method io/undertow/server/handlers/proxy/mod_cluster/Node.getNodeConfig:()Lio/undertow/server/handlers/proxy/mod_cluster/NodeConfig;
      13: invokevirtual #22                 // Method io/undertow/server/handlers/proxy/mod_cluster/NodeConfig.getPing:()I
      16: i2l
      17: lstore        9
      19: new           #13                 // class io/undertow/server/handlers/proxy/mod_cluster/NodePingUtil$RequestExchangeListener
      22: dup
      23: aload_1
      24: aload_2
      25: iconst_1
      26: invokespecial #15                 // Method io/undertow/server/handlers/proxy/mod_cluster/NodePingUtil$RequestExchangeListener."<init>":(Lio/undertow/server/handlers/proxy/mod_cluster/NodePingUtil$PingCallback;Lio/undertow/server/handlers/proxy/mod_cluster/NodeHealthChecker;Z)V
      29: astore        11
      31: new           #16                 // class io/undertow/server/handlers/proxy/mod_cluster/NodePingUtil$HttpClientPingTask
      34: dup
      35: aload         8
      37: aload         11
      39: aload_3
      40: aload         5
      42: aload         6
      44: aload         4
      46: aload         7
      48: invokespecial #19                 // Method io/undertow/server/handlers/proxy/mod_cluster/NodePingUtil$HttpClientPingTask."<init>":(Ljava/net/URI;Lio/undertow/server/handlers/proxy/mod_cluster/NodePingUtil$RequestExchangeListener;Lorg/xnio/XnioIoThread;Lio/undertow/client/UndertowClient;Lorg/xnio/ssl/XnioSsl;Lio/undertow/connector/ByteBufferPool;Lorg/xnio/OptionMap;)V
      51: astore        12
      53: aload_3
      54: aload         11
      56: lload         9
      58: getstatic     #8                  // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
      61: invokestatic  #9                  // Method scheduleCancelTask:(Lorg/xnio/XnioIoThread;Lio/undertow/server/handlers/proxy/mod_cluster/NodePingUtil$CancellableTask;JLjava/util/concurrent/TimeUnit;)V
      64: aload_3
      65: aload         12
      67: invokevirtual #26                 // Method org/xnio/XnioIoThread.execute:(Ljava/lang/Runnable;)V
      70: return

  static void scheduleCancelTask(org.xnio.XnioIoThread, io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$CancellableTask, long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: new           #27                 // class io/undertow/server/handlers/proxy/mod_cluster/NodePingUtil$2
       4: dup
       5: aload_1
       6: invokespecial #28                 // Method io/undertow/server/handlers/proxy/mod_cluster/NodePingUtil$2."<init>":(Lio/undertow/server/handlers/proxy/mod_cluster/NodePingUtil$CancellableTask;)V
       9: lload_2
      10: aload         4
      12: invokestatic  #29                 // Method io/undertow/util/WorkerUtils.executeAfter:(Lorg/xnio/XnioIoThread;Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lorg/xnio/XnioExecutor$Key;
      15: astore        5
      17: aload_1
      18: aload         5
      20: invokevirtual #30                 // Method io/undertow/server/handlers/proxy/mod_cluster/NodePingUtil$CancellableTask.setCancelKey:(Lorg/xnio/XnioExecutor$Key;)V
      23: return
}
