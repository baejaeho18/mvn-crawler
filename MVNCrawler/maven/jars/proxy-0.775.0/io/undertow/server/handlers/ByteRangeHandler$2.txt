Compiled from "ByteRangeHandler.java"
class io.undertow.server.handlers.ByteRangeHandler$2 implements io.undertow.server.ConduitWrapper<org.xnio.conduits.StreamSinkConduit> {
  final io.undertow.util.ByteRange val$range;

  final io.undertow.server.handlers.ByteRangeHandler this$0;

  io.undertow.server.handlers.ByteRangeHandler$2(io.undertow.server.handlers.ByteRangeHandler, io.undertow.util.ByteRange);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lio/undertow/server/handlers/ByteRangeHandler;
       5: aload_0
       6: aload_2
       7: putfield      #2                  // Field val$range:Lio/undertow/util/ByteRange;
      10: aload_0
      11: invokespecial #3                  // Method java/lang/Object."<init>":()V
      14: return

  public org.xnio.conduits.StreamSinkConduit wrap(io.undertow.util.ConduitFactory<org.xnio.conduits.StreamSinkConduit>, io.undertow.server.HttpServerExchange);
    Code:
       0: aload_2
       1: invokevirtual #4                  // Method io/undertow/server/HttpServerExchange.getStatusCode:()I
       4: sipush        200
       7: if_icmpeq     20
      10: aload_1
      11: invokeinterface #6,  1            // InterfaceMethod io/undertow/util/ConduitFactory.create:()Lorg/xnio/conduits/Conduit;
      16: checkcast     #7                  // class org/xnio/conduits/StreamSinkConduit
      19: areturn
      20: aload_2
      21: invokevirtual #8                  // Method io/undertow/server/HttpServerExchange.getResponseHeaders:()Lio/undertow/util/HeaderMap;
      24: getstatic     #9                  // Field io/undertow/util/Headers.CONTENT_LENGTH:Lio/undertow/util/HttpString;
      27: invokevirtual #10                 // Method io/undertow/util/HeaderMap.getFirst:(Lio/undertow/util/HttpString;)Ljava/lang/String;
      30: astore_3
      31: aload_3
      32: ifnonnull     45
      35: aload_1
      36: invokeinterface #6,  1            // InterfaceMethod io/undertow/util/ConduitFactory.create:()Lorg/xnio/conduits/Conduit;
      41: checkcast     #7                  // class org/xnio/conduits/StreamSinkConduit
      44: areturn
      45: aload_3
      46: invokestatic  #11                 // Method java/lang/Long.parseLong:(Ljava/lang/String;)J
      49: lstore        4
      51: aload_2
      52: invokevirtual #8                  // Method io/undertow/server/HttpServerExchange.getResponseHeaders:()Lio/undertow/util/HeaderMap;
      55: getstatic     #12                 // Field io/undertow/util/Headers.LAST_MODIFIED:Lio/undertow/util/HttpString;
      58: invokevirtual #10                 // Method io/undertow/util/HeaderMap.getFirst:(Lio/undertow/util/HttpString;)Ljava/lang/String;
      61: astore        6
      63: aload_0
      64: getfield      #2                  // Field val$range:Lio/undertow/util/ByteRange;
      67: lload         4
      69: aload_2
      70: invokevirtual #13                 // Method io/undertow/server/HttpServerExchange.getRequestHeaders:()Lio/undertow/util/HeaderMap;
      73: getstatic     #14                 // Field io/undertow/util/Headers.IF_RANGE:Lio/undertow/util/HttpString;
      76: invokevirtual #10                 // Method io/undertow/util/HeaderMap.getFirst:(Lio/undertow/util/HttpString;)Ljava/lang/String;
      79: aload         6
      81: ifnonnull     88
      84: aconst_null
      85: goto          93
      88: aload         6
      90: invokestatic  #15                 // Method io/undertow/util/DateUtils.parseDate:(Ljava/lang/String;)Ljava/util/Date;
      93: aload_2
      94: invokevirtual #8                  // Method io/undertow/server/HttpServerExchange.getResponseHeaders:()Lio/undertow/util/HeaderMap;
      97: getstatic     #16                 // Field io/undertow/util/Headers.ETAG:Lio/undertow/util/HttpString;
     100: invokevirtual #10                 // Method io/undertow/util/HeaderMap.getFirst:(Lio/undertow/util/HttpString;)Ljava/lang/String;
     103: invokevirtual #17                 // Method io/undertow/util/ByteRange.getResponseResult:(JLjava/lang/String;Ljava/util/Date;Ljava/lang/String;)Lio/undertow/util/ByteRange$RangeResponseResult;
     106: astore        7
     108: aload         7
     110: ifnull        216
     113: aload         7
     115: invokevirtual #18                 // Method io/undertow/util/ByteRange$RangeResponseResult.getStart:()J
     118: lstore        8
     120: aload         7
     122: invokevirtual #19                 // Method io/undertow/util/ByteRange$RangeResponseResult.getEnd:()J
     125: lstore        10
     127: aload_2
     128: aload         7
     130: invokevirtual #20                 // Method io/undertow/util/ByteRange$RangeResponseResult.getStatusCode:()I
     133: invokevirtual #21                 // Method io/undertow/server/HttpServerExchange.setStatusCode:(I)Lio/undertow/server/HttpServerExchange;
     136: pop
     137: aload_2
     138: invokevirtual #8                  // Method io/undertow/server/HttpServerExchange.getResponseHeaders:()Lio/undertow/util/HeaderMap;
     141: getstatic     #22                 // Field io/undertow/util/Headers.CONTENT_RANGE:Lio/undertow/util/HttpString;
     144: aload         7
     146: invokevirtual #23                 // Method io/undertow/util/ByteRange$RangeResponseResult.getContentRange:()Ljava/lang/String;
     149: invokevirtual #24                 // Method io/undertow/util/HeaderMap.put:(Lio/undertow/util/HttpString;Ljava/lang/String;)Lio/undertow/util/HeaderMap;
     152: pop
     153: aload_2
     154: aload         7
     156: invokevirtual #25                 // Method io/undertow/util/ByteRange$RangeResponseResult.getContentLength:()J
     159: invokevirtual #26                 // Method io/undertow/server/HttpServerExchange.setResponseContentLength:(J)Lio/undertow/server/HttpServerExchange;
     162: pop
     163: aload         7
     165: invokevirtual #20                 // Method io/undertow/util/ByteRange$RangeResponseResult.getStatusCode:()I
     168: sipush        416
     171: if_icmpne     193
     174: new           #27                 // class io/undertow/conduits/HeadStreamSinkConduit
     177: dup
     178: aload_1
     179: invokeinterface #6,  1            // InterfaceMethod io/undertow/util/ConduitFactory.create:()Lorg/xnio/conduits/Conduit;
     184: checkcast     #7                  // class org/xnio/conduits/StreamSinkConduit
     187: aconst_null
     188: iconst_1
     189: invokespecial #28                 // Method io/undertow/conduits/HeadStreamSinkConduit."<init>":(Lorg/xnio/conduits/StreamSinkConduit;Lio/undertow/conduits/ConduitListener;Z)V
     192: areturn
     193: new           #29                 // class io/undertow/conduits/RangeStreamSinkConduit
     196: dup
     197: aload_1
     198: invokeinterface #6,  1            // InterfaceMethod io/undertow/util/ConduitFactory.create:()Lorg/xnio/conduits/Conduit;
     203: checkcast     #7                  // class org/xnio/conduits/StreamSinkConduit
     206: lload         8
     208: lload         10
     210: lload         4
     212: invokespecial #30                 // Method io/undertow/conduits/RangeStreamSinkConduit."<init>":(Lorg/xnio/conduits/StreamSinkConduit;JJJ)V
     215: areturn
     216: aload_1
     217: invokeinterface #6,  1            // InterfaceMethod io/undertow/util/ConduitFactory.create:()Lorg/xnio/conduits/Conduit;
     222: checkcast     #7                  // class org/xnio/conduits/StreamSinkConduit
     225: areturn

  public org.xnio.conduits.Conduit wrap(io.undertow.util.ConduitFactory, io.undertow.server.HttpServerExchange);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #31                 // Method wrap:(Lio/undertow/util/ConduitFactory;Lio/undertow/server/HttpServerExchange;)Lorg/xnio/conduits/StreamSinkConduit;
       6: areturn
}
