Compiled from "ModClusterContainer.java"
class io.undertow.server.handlers.proxy.mod_cluster.ModClusterContainer implements io.undertow.server.handlers.proxy.mod_cluster.ModClusterController {
  private final java.util.concurrent.ConcurrentMap<java.lang.String, io.undertow.server.handlers.proxy.mod_cluster.Balancer> balancers;

  private final java.util.concurrent.ConcurrentMap<java.lang.String, io.undertow.server.handlers.proxy.mod_cluster.Node> nodes;

  private final java.util.concurrent.ConcurrentMap<java.lang.String, io.undertow.server.handlers.proxy.mod_cluster.VirtualHost> hosts;

  private final io.undertow.server.handlers.cache.LRUCache<java.lang.String, java.lang.String> failoverDomains;

  private final java.util.concurrent.ConcurrentMap<org.xnio.XnioIoThread, io.undertow.server.handlers.proxy.mod_cluster.ModClusterContainer$HealthCheckTask> healthChecks;

  private final io.undertow.server.handlers.proxy.mod_cluster.ModClusterContainer$UpdateLoadTask updateLoadTask;

  private final org.xnio.ssl.XnioSsl xnioSsl;

  private final io.undertow.client.UndertowClient client;

  private final io.undertow.server.handlers.proxy.ProxyClient proxyClient;

  private final io.undertow.server.handlers.proxy.mod_cluster.ModCluster modCluster;

  private final io.undertow.server.handlers.proxy.mod_cluster.NodeHealthChecker healthChecker;

  private final long removeBrokenNodesThreshold;

  private io.undertow.server.handlers.proxy.RouteIteratorFactory routeIteratorFactory;

  private final org.xnio.OptionMap clientOptions;

  static final boolean $assertionsDisabled;

  io.undertow.server.handlers.proxy.mod_cluster.ModClusterContainer(io.undertow.server.handlers.proxy.mod_cluster.ModCluster, org.xnio.ssl.XnioSsl, io.undertow.client.UndertowClient, org.xnio.OptionMap);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class io/undertow/util/CopyOnWriteMap
       8: dup
       9: invokespecial #3                  // Method io/undertow/util/CopyOnWriteMap."<init>":()V
      12: putfield      #4                  // Field balancers:Ljava/util/concurrent/ConcurrentMap;
      15: aload_0
      16: new           #2                  // class io/undertow/util/CopyOnWriteMap
      19: dup
      20: invokespecial #3                  // Method io/undertow/util/CopyOnWriteMap."<init>":()V
      23: putfield      #5                  // Field nodes:Ljava/util/concurrent/ConcurrentMap;
      26: aload_0
      27: new           #2                  // class io/undertow/util/CopyOnWriteMap
      30: dup
      31: invokespecial #3                  // Method io/undertow/util/CopyOnWriteMap."<init>":()V
      34: putfield      #6                  // Field hosts:Ljava/util/concurrent/ConcurrentMap;
      37: aload_0
      38: new           #7                  // class io/undertow/server/handlers/cache/LRUCache
      41: dup
      42: bipush        100
      44: ldc           #8                  // int 300000
      46: invokespecial #9                  // Method io/undertow/server/handlers/cache/LRUCache."<init>":(II)V
      49: putfield      #10                 // Field failoverDomains:Lio/undertow/server/handlers/cache/LRUCache;
      52: aload_0
      53: new           #2                  // class io/undertow/util/CopyOnWriteMap
      56: dup
      57: invokespecial #3                  // Method io/undertow/util/CopyOnWriteMap."<init>":()V
      60: putfield      #11                 // Field healthChecks:Ljava/util/concurrent/ConcurrentMap;
      63: aload_0
      64: new           #12                 // class io/undertow/server/handlers/proxy/mod_cluster/ModClusterContainer$UpdateLoadTask
      67: dup
      68: aload_0
      69: invokespecial #13                 // Method io/undertow/server/handlers/proxy/mod_cluster/ModClusterContainer$UpdateLoadTask."<init>":(Lio/undertow/server/handlers/proxy/mod_cluster/ModClusterContainer;)V
      72: putfield      #14                 // Field updateLoadTask:Lio/undertow/server/handlers/proxy/mod_cluster/ModClusterContainer$UpdateLoadTask;
      75: aload_0
      76: aload_2
      77: putfield      #15                 // Field xnioSsl:Lorg/xnio/ssl/XnioSsl;
      80: aload_0
      81: aload_3
      82: putfield      #16                 // Field client:Lio/undertow/client/UndertowClient;
      85: aload_0
      86: aload_1
      87: putfield      #17                 // Field modCluster:Lio/undertow/server/handlers/proxy/mod_cluster/ModCluster;
      90: aload_0
      91: aload         4
      93: putfield      #18                 // Field clientOptions:Lorg/xnio/OptionMap;
      96: aload_0
      97: aload_1
      98: invokevirtual #19                 // Method io/undertow/server/handlers/proxy/mod_cluster/ModCluster.getHealthChecker:()Lio/undertow/server/handlers/proxy/mod_cluster/NodeHealthChecker;
     101: putfield      #20                 // Field healthChecker:Lio/undertow/server/handlers/proxy/mod_cluster/NodeHealthChecker;
     104: aload_0
     105: new           #21                 // class io/undertow/server/handlers/proxy/mod_cluster/ModClusterProxyClient
     108: dup
     109: aconst_null
     110: aload_0
     111: invokespecial #22                 // Method io/undertow/server/handlers/proxy/mod_cluster/ModClusterProxyClient."<init>":(Lio/undertow/server/handlers/proxy/ExclusivityChecker;Lio/undertow/server/handlers/proxy/mod_cluster/ModClusterContainer;)V
     114: putfield      #23                 // Field proxyClient:Lio/undertow/server/handlers/proxy/ProxyClient;
     117: aload_0
     118: aload_1
     119: invokevirtual #24                 // Method io/undertow/server/handlers/proxy/mod_cluster/ModCluster.getHealthCheckInterval:()J
     122: aload_1
     123: invokevirtual #25                 // Method io/undertow/server/handlers/proxy/mod_cluster/ModCluster.getRemoveBrokenNodes:()J
     126: invokestatic  #26                 // Method removeThreshold:(JJ)J
     129: putfield      #27                 // Field removeBrokenNodesThreshold:J
     132: aload_0
     133: new           #28                 // class io/undertow/server/handlers/proxy/RouteIteratorFactory
     136: dup
     137: aload_1
     138: invokevirtual #29                 // Method io/undertow/server/handlers/proxy/mod_cluster/ModCluster.routeParsingStrategy:()Lio/undertow/server/handlers/proxy/RouteParsingStrategy;
     141: getstatic     #30                 // Field io/undertow/server/handlers/proxy/RouteIteratorFactory$ParsingCompatibility.MOD_CLUSTER:Lio/undertow/server/handlers/proxy/RouteIteratorFactory$ParsingCompatibility;
     144: aload_1
     145: invokevirtual #31                 // Method io/undertow/server/handlers/proxy/mod_cluster/ModCluster.rankedAffinityDelimiter:()Ljava/lang/String;
     148: invokespecial #32                 // Method io/undertow/server/handlers/proxy/RouteIteratorFactory."<init>":(Lio/undertow/server/handlers/proxy/RouteParsingStrategy;Lio/undertow/server/handlers/proxy/RouteIteratorFactory$ParsingCompatibility;Ljava/lang/String;)V
     151: putfield      #33                 // Field routeIteratorFactory:Lio/undertow/server/handlers/proxy/RouteIteratorFactory;
     154: return

  java.lang.String getServerID();
    Code:
       0: aload_0
       1: getfield      #17                 // Field modCluster:Lio/undertow/server/handlers/proxy/mod_cluster/ModCluster;
       4: invokevirtual #34                 // Method io/undertow/server/handlers/proxy/mod_cluster/ModCluster.getServerID:()Ljava/lang/String;
       7: areturn

  io.undertow.client.UndertowClient getClient();
    Code:
       0: aload_0
       1: getfield      #16                 // Field client:Lio/undertow/client/UndertowClient;
       4: areturn

  org.xnio.ssl.XnioSsl getXnioSsl();
    Code:
       0: aload_0
       1: getfield      #15                 // Field xnioSsl:Lorg/xnio/ssl/XnioSsl;
       4: areturn

  public io.undertow.server.handlers.proxy.ProxyClient getProxyClient();
    Code:
       0: aload_0
       1: getfield      #23                 // Field proxyClient:Lio/undertow/server/handlers/proxy/ProxyClient;
       4: areturn

  java.util.Collection<io.undertow.server.handlers.proxy.mod_cluster.Balancer> getBalancers();
    Code:
       0: aload_0
       1: getfield      #4                  // Field balancers:Ljava/util/concurrent/ConcurrentMap;
       4: invokeinterface #35,  1           // InterfaceMethod java/util/concurrent/ConcurrentMap.values:()Ljava/util/Collection;
       9: invokestatic  #36                 // Method java/util/Collections.unmodifiableCollection:(Ljava/util/Collection;)Ljava/util/Collection;
      12: areturn

  java.util.Collection<io.undertow.server.handlers.proxy.mod_cluster.Node> getNodes();
    Code:
       0: aload_0
       1: getfield      #5                  // Field nodes:Ljava/util/concurrent/ConcurrentMap;
       4: invokeinterface #35,  1           // InterfaceMethod java/util/concurrent/ConcurrentMap.values:()Ljava/util/Collection;
       9: invokestatic  #36                 // Method java/util/Collections.unmodifiableCollection:(Ljava/util/Collection;)Ljava/util/Collection;
      12: areturn

  io.undertow.server.handlers.proxy.mod_cluster.Node getNode(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #5                  // Field nodes:Ljava/util/concurrent/ConcurrentMap;
       4: aload_1
       5: invokeinterface #37,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #38                 // class io/undertow/server/handlers/proxy/mod_cluster/Node
      13: areturn

  public io.undertow.server.handlers.proxy.mod_cluster.ModClusterProxyTarget findTarget(io.undertow.server.HttpServerExchange);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #39                 // Method mapVirtualHost:(Lio/undertow/server/HttpServerExchange;)Lio/undertow/util/PathMatcher$PathMatch;
       5: astore_2
       6: aload_2
       7: ifnonnull     12
      10: aconst_null
      11: areturn
      12: aload_0
      13: getfield      #4                  // Field balancers:Ljava/util/concurrent/ConcurrentMap;
      16: invokeinterface #35,  1           // InterfaceMethod java/util/concurrent/ConcurrentMap.values:()Ljava/util/Collection;
      21: invokeinterface #40,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      26: astore_3
      27: aload_3
      28: invokeinterface #41,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      33: ifeq          251
      36: aload_3
      37: invokeinterface #42,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      42: checkcast     #43                 // class io/undertow/server/handlers/proxy/mod_cluster/Balancer
      45: astore        4
      47: aload         4
      49: invokevirtual #44                 // Method io/undertow/server/handlers/proxy/mod_cluster/Balancer.isStickySession:()Z
      52: ifeq          248
      55: aload_1
      56: invokevirtual #45                 // Method io/undertow/server/HttpServerExchange.requestCookies:()Ljava/lang/Iterable;
      59: invokeinterface #46,  1           // InterfaceMethod java/lang/Iterable.iterator:()Ljava/util/Iterator;
      64: astore        5
      66: aload         5
      68: invokeinterface #41,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      73: ifeq          161
      76: aload         5
      78: invokeinterface #42,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      83: checkcast     #47                 // class io/undertow/server/handlers/Cookie
      86: astore        6
      88: aload         4
      90: invokevirtual #48                 // Method io/undertow/server/handlers/proxy/mod_cluster/Balancer.getStickySessionCookie:()Ljava/lang/String;
      93: aload         6
      95: invokeinterface #49,  1           // InterfaceMethod io/undertow/server/handlers/Cookie.getName:()Ljava/lang/String;
     100: invokevirtual #50                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     103: ifeq          158
     106: aload         6
     108: invokeinterface #51,  1           // InterfaceMethod io/undertow/server/handlers/Cookie.getValue:()Ljava/lang/String;
     113: astore        7
     115: aload_0
     116: aload         7
     118: invokevirtual #52                 // Method parseRoutes:(Ljava/lang/String;)Ljava/util/Iterator;
     121: astore        8
     123: aload         8
     125: invokeinterface #41,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     130: ifeq          158
     133: new           #53                 // class io/undertow/server/handlers/proxy/mod_cluster/ModClusterProxyTarget$ExistingSessionTarget
     136: dup
     137: aload         7
     139: aload         8
     141: aload_2
     142: invokevirtual #54                 // Method io/undertow/util/PathMatcher$PathMatch.getValue:()Ljava/lang/Object;
     145: checkcast     #55                 // class io/undertow/server/handlers/proxy/mod_cluster/VirtualHost$HostEntry
     148: aload_0
     149: aload         4
     151: invokevirtual #56                 // Method io/undertow/server/handlers/proxy/mod_cluster/Balancer.isStickySessionForce:()Z
     154: invokespecial #57                 // Method io/undertow/server/handlers/proxy/mod_cluster/ModClusterProxyTarget$ExistingSessionTarget."<init>":(Ljava/lang/String;Ljava/util/Iterator;Lio/undertow/server/handlers/proxy/mod_cluster/VirtualHost$HostEntry;Lio/undertow/server/handlers/proxy/mod_cluster/ModClusterContainer;Z)V
     157: areturn
     158: goto          66
     161: aload_1
     162: invokevirtual #58                 // Method io/undertow/server/HttpServerExchange.getPathParameters:()Ljava/util/Map;
     165: aload         4
     167: invokevirtual #59                 // Method io/undertow/server/handlers/proxy/mod_cluster/Balancer.getStickySessionPath:()Ljava/lang/String;
     170: invokeinterface #60,  2           // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
     175: ifeq          248
     178: aload_1
     179: invokevirtual #58                 // Method io/undertow/server/HttpServerExchange.getPathParameters:()Ljava/util/Map;
     182: aload         4
     184: invokevirtual #59                 // Method io/undertow/server/handlers/proxy/mod_cluster/Balancer.getStickySessionPath:()Ljava/lang/String;
     187: invokeinterface #61,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
     192: checkcast     #62                 // class java/util/Deque
     195: invokeinterface #63,  1           // InterfaceMethod java/util/Deque.getFirst:()Ljava/lang/Object;
     200: checkcast     #64                 // class java/lang/String
     203: astore        5
     205: aload_0
     206: aload         5
     208: invokevirtual #52                 // Method parseRoutes:(Ljava/lang/String;)Ljava/util/Iterator;
     211: astore        6
     213: aload         6
     215: invokeinterface #41,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     220: ifeq          248
     223: new           #53                 // class io/undertow/server/handlers/proxy/mod_cluster/ModClusterProxyTarget$ExistingSessionTarget
     226: dup
     227: aload         5
     229: aload         6
     231: aload_2
     232: invokevirtual #54                 // Method io/undertow/util/PathMatcher$PathMatch.getValue:()Ljava/lang/Object;
     235: checkcast     #55                 // class io/undertow/server/handlers/proxy/mod_cluster/VirtualHost$HostEntry
     238: aload_0
     239: aload         4
     241: invokevirtual #56                 // Method io/undertow/server/handlers/proxy/mod_cluster/Balancer.isStickySessionForce:()Z
     244: invokespecial #57                 // Method io/undertow/server/handlers/proxy/mod_cluster/ModClusterProxyTarget$ExistingSessionTarget."<init>":(Ljava/lang/String;Ljava/util/Iterator;Lio/undertow/server/handlers/proxy/mod_cluster/VirtualHost$HostEntry;Lio/undertow/server/handlers/proxy/mod_cluster/ModClusterContainer;Z)V
     247: areturn
     248: goto          27
     251: new           #65                 // class io/undertow/server/handlers/proxy/mod_cluster/ModClusterProxyTarget$BasicTarget
     254: dup
     255: aload_2
     256: invokevirtual #54                 // Method io/undertow/util/PathMatcher$PathMatch.getValue:()Ljava/lang/Object;
     259: checkcast     #55                 // class io/undertow/server/handlers/proxy/mod_cluster/VirtualHost$HostEntry
     262: aload_0
     263: invokespecial #66                 // Method io/undertow/server/handlers/proxy/mod_cluster/ModClusterProxyTarget$BasicTarget."<init>":(Lio/undertow/server/handlers/proxy/mod_cluster/VirtualHost$HostEntry;Lio/undertow/server/handlers/proxy/mod_cluster/ModClusterContainer;)V
     266: areturn

  public synchronized boolean addNode(io.undertow.server.handlers.proxy.mod_cluster.NodeConfig, io.undertow.server.handlers.proxy.mod_cluster.Balancer$BalancerBuilder, org.xnio.XnioIoThread, io.undertow.connector.ByteBufferPool);
    Code:
       0: aload_1
       1: invokevirtual #67                 // Method io/undertow/server/handlers/proxy/mod_cluster/NodeConfig.getJvmRoute:()Ljava/lang/String;
       4: astore        5
       6: aload_0
       7: getfield      #5                  // Field nodes:Ljava/util/concurrent/ConcurrentMap;
      10: aload         5
      12: invokeinterface #37,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      17: checkcast     #38                 // class io/undertow/server/handlers/proxy/mod_cluster/Node
      20: astore        6
      22: aload         6
      24: ifnull        73
      27: aload_1
      28: invokevirtual #68                 // Method io/undertow/server/handlers/proxy/mod_cluster/NodeConfig.getConnectionURI:()Ljava/net/URI;
      31: aload         6
      33: invokevirtual #69                 // Method io/undertow/server/handlers/proxy/mod_cluster/Node.getNodeConfig:()Lio/undertow/server/handlers/proxy/mod_cluster/NodeConfig;
      36: invokevirtual #68                 // Method io/undertow/server/handlers/proxy/mod_cluster/NodeConfig.getConnectionURI:()Ljava/net/URI;
      39: invokevirtual #70                 // Method java/net/URI.equals:(Ljava/lang/Object;)Z
      42: ifeq          52
      45: aload         6
      47: invokevirtual #71                 // Method io/undertow/server/handlers/proxy/mod_cluster/Node.resetState:()V
      50: iconst_1
      51: ireturn
      52: aload         6
      54: invokevirtual #72                 // Method io/undertow/server/handlers/proxy/mod_cluster/Node.markRemoved:()V
      57: aload_0
      58: aload         6
      60: invokevirtual #73                 // Method removeNode:(Lio/undertow/server/handlers/proxy/mod_cluster/Node;)V
      63: aload         6
      65: invokevirtual #74                 // Method io/undertow/server/handlers/proxy/mod_cluster/Node.isInErrorState:()Z
      68: ifne          73
      71: iconst_0
      72: ireturn
      73: aload_1
      74: invokevirtual #75                 // Method io/undertow/server/handlers/proxy/mod_cluster/NodeConfig.getBalancer:()Ljava/lang/String;
      77: astore        7
      79: aload_0
      80: getfield      #4                  // Field balancers:Ljava/util/concurrent/ConcurrentMap;
      83: aload         7
      85: invokeinterface #37,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      90: checkcast     #43                 // class io/undertow/server/handlers/proxy/mod_cluster/Balancer
      93: astore        8
      95: aload         8
      97: ifnull        112
     100: getstatic     #76                 // Field io/undertow/UndertowLogger.ROOT_LOGGER:Lio/undertow/UndertowLogger;
     103: ldc           #77                 // String Balancer %s already exists, replacing
     105: aload         7
     107: invokeinterface #78,  3           // InterfaceMethod io/undertow/UndertowLogger.debugf:(Ljava/lang/String;Ljava/lang/Object;)V
     112: aload_2
     113: invokevirtual #79                 // Method io/undertow/server/handlers/proxy/mod_cluster/Balancer$BalancerBuilder.build:()Lio/undertow/server/handlers/proxy/mod_cluster/Balancer;
     116: astore        8
     118: aload_0
     119: getfield      #4                  // Field balancers:Ljava/util/concurrent/ConcurrentMap;
     122: aload         7
     124: aload         8
     126: invokeinterface #80,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     131: pop
     132: new           #38                 // class io/undertow/server/handlers/proxy/mod_cluster/Node
     135: dup
     136: aload_1
     137: aload         8
     139: aload_3
     140: aload         4
     142: aload_0
     143: invokespecial #81                 // Method io/undertow/server/handlers/proxy/mod_cluster/Node."<init>":(Lio/undertow/server/handlers/proxy/mod_cluster/NodeConfig;Lio/undertow/server/handlers/proxy/mod_cluster/Balancer;Lorg/xnio/XnioIoThread;Lio/undertow/connector/ByteBufferPool;Lio/undertow/server/handlers/proxy/mod_cluster/ModClusterContainer;)V
     146: astore        9
     148: aload_0
     149: getfield      #5                  // Field nodes:Ljava/util/concurrent/ConcurrentMap;
     152: aload         5
     154: aload         9
     156: invokeinterface #80,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     161: pop
     162: aload_0
     163: aload         9
     165: aload_3
     166: invokevirtual #82                 // Method scheduleHealthCheck:(Lio/undertow/server/handlers/proxy/mod_cluster/Node;Lorg/xnio/XnioIoThread;)V
     169: aload_0
     170: getfield      #14                 // Field updateLoadTask:Lio/undertow/server/handlers/proxy/mod_cluster/ModClusterContainer$UpdateLoadTask;
     173: getfield      #83                 // Field io/undertow/server/handlers/proxy/mod_cluster/ModClusterContainer$UpdateLoadTask.cancelKey:Lorg/xnio/XnioExecutor$Key;
     176: ifnonnull     204
     179: aload_0
     180: getfield      #14                 // Field updateLoadTask:Lio/undertow/server/handlers/proxy/mod_cluster/ModClusterContainer$UpdateLoadTask;
     183: aload_3
     184: aload_0
     185: getfield      #14                 // Field updateLoadTask:Lio/undertow/server/handlers/proxy/mod_cluster/ModClusterContainer$UpdateLoadTask;
     188: aload_0
     189: getfield      #17                 // Field modCluster:Lio/undertow/server/handlers/proxy/mod_cluster/ModCluster;
     192: invokevirtual #24                 // Method io/undertow/server/handlers/proxy/mod_cluster/ModCluster.getHealthCheckInterval:()J
     195: getstatic     #84                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
     198: invokevirtual #85                 // Method org/xnio/XnioIoThread.executeAtInterval:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lorg/xnio/XnioExecutor$Key;
     201: putfield      #83                 // Field io/undertow/server/handlers/proxy/mod_cluster/ModClusterContainer$UpdateLoadTask.cancelKey:Lorg/xnio/XnioExecutor$Key;
     204: aload_0
     205: getfield      #10                 // Field failoverDomains:Lio/undertow/server/handlers/cache/LRUCache;
     208: aload         9
     210: invokevirtual #86                 // Method io/undertow/server/handlers/proxy/mod_cluster/Node.getJvmRoute:()Ljava/lang/String;
     213: invokevirtual #87                 // Method io/undertow/server/handlers/cache/LRUCache.remove:(Ljava/lang/Object;)Ljava/lang/Object;
     216: pop
     217: getstatic     #76                 // Field io/undertow/UndertowLogger.ROOT_LOGGER:Lio/undertow/UndertowLogger;
     220: aload         5
     222: aload_1
     223: invokevirtual #68                 // Method io/undertow/server/handlers/proxy/mod_cluster/NodeConfig.getConnectionURI:()Ljava/net/URI;
     226: invokeinterface #88,  3           // InterfaceMethod io/undertow/UndertowLogger.registeringNode:(Ljava/lang/String;Ljava/net/URI;)V
     231: iconst_1
     232: ireturn

  public synchronized boolean enableNode(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #5                  // Field nodes:Ljava/util/concurrent/ConcurrentMap;
       4: aload_1
       5: invokeinterface #37,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #38                 // class io/undertow/server/handlers/proxy/mod_cluster/Node
      13: astore_2
      14: aload_2
      15: ifnull        58
      18: aload_2
      19: invokevirtual #89                 // Method io/undertow/server/handlers/proxy/mod_cluster/Node.getContexts:()Ljava/util/Collection;
      22: invokeinterface #40,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      27: astore_3
      28: aload_3
      29: invokeinterface #41,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      34: ifeq          56
      37: aload_3
      38: invokeinterface #42,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      43: checkcast     #90                 // class io/undertow/server/handlers/proxy/mod_cluster/Context
      46: astore        4
      48: aload         4
      50: invokevirtual #91                 // Method io/undertow/server/handlers/proxy/mod_cluster/Context.enable:()V
      53: goto          28
      56: iconst_1
      57: ireturn
      58: iconst_0
      59: ireturn

  public synchronized boolean disableNode(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #5                  // Field nodes:Ljava/util/concurrent/ConcurrentMap;
       4: aload_1
       5: invokeinterface #37,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #38                 // class io/undertow/server/handlers/proxy/mod_cluster/Node
      13: astore_2
      14: aload_2
      15: ifnull        58
      18: aload_2
      19: invokevirtual #89                 // Method io/undertow/server/handlers/proxy/mod_cluster/Node.getContexts:()Ljava/util/Collection;
      22: invokeinterface #40,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      27: astore_3
      28: aload_3
      29: invokeinterface #41,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      34: ifeq          56
      37: aload_3
      38: invokeinterface #42,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      43: checkcast     #90                 // class io/undertow/server/handlers/proxy/mod_cluster/Context
      46: astore        4
      48: aload         4
      50: invokevirtual #92                 // Method io/undertow/server/handlers/proxy/mod_cluster/Context.disable:()V
      53: goto          28
      56: iconst_1
      57: ireturn
      58: iconst_0
      59: ireturn

  public synchronized boolean stopNode(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #5                  // Field nodes:Ljava/util/concurrent/ConcurrentMap;
       4: aload_1
       5: invokeinterface #37,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #38                 // class io/undertow/server/handlers/proxy/mod_cluster/Node
      13: astore_2
      14: aload_2
      15: ifnull        58
      18: aload_2
      19: invokevirtual #89                 // Method io/undertow/server/handlers/proxy/mod_cluster/Node.getContexts:()Ljava/util/Collection;
      22: invokeinterface #40,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      27: astore_3
      28: aload_3
      29: invokeinterface #41,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      34: ifeq          56
      37: aload_3
      38: invokeinterface #42,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      43: checkcast     #90                 // class io/undertow/server/handlers/proxy/mod_cluster/Context
      46: astore        4
      48: aload         4
      50: invokevirtual #93                 // Method io/undertow/server/handlers/proxy/mod_cluster/Context.stop:()V
      53: goto          28
      56: iconst_1
      57: ireturn
      58: iconst_0
      59: ireturn

  public synchronized io.undertow.server.handlers.proxy.mod_cluster.Node removeNode(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #5                  // Field nodes:Ljava/util/concurrent/ConcurrentMap;
       4: aload_1
       5: invokeinterface #37,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #38                 // class io/undertow/server/handlers/proxy/mod_cluster/Node
      13: astore_2
      14: aload_2
      15: ifnull        23
      18: aload_0
      19: aload_2
      20: invokevirtual #73                 // Method removeNode:(Lio/undertow/server/handlers/proxy/mod_cluster/Node;)V
      23: aload_2
      24: areturn

  protected void removeNode(io.undertow.server.handlers.proxy.mod_cluster.Node);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: invokevirtual #94                 // Method removeNode:(Lio/undertow/server/handlers/proxy/mod_cluster/Node;Z)V
       6: return

  protected synchronized void removeNode(io.undertow.server.handlers.proxy.mod_cluster.Node, boolean);
    Code:
       0: iload_2
       1: ifeq          12
       4: aload_1
       5: invokevirtual #74                 // Method io/undertow/server/handlers/proxy/mod_cluster/Node.isInErrorState:()Z
       8: ifne          12
      11: return
      12: aload_1
      13: invokevirtual #86                 // Method io/undertow/server/handlers/proxy/mod_cluster/Node.getJvmRoute:()Ljava/lang/String;
      16: astore_3
      17: aload_1
      18: invokevirtual #72                 // Method io/undertow/server/handlers/proxy/mod_cluster/Node.markRemoved:()V
      21: aload_0
      22: getfield      #5                  // Field nodes:Ljava/util/concurrent/ConcurrentMap;
      25: aload_3
      26: aload_1
      27: invokeinterface #95,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.remove:(Ljava/lang/Object;Ljava/lang/Object;)Z
      32: ifeq          215
      35: getstatic     #76                 // Field io/undertow/UndertowLogger.ROOT_LOGGER:Lio/undertow/UndertowLogger;
      38: aload_3
      39: invokeinterface #96,  2           // InterfaceMethod io/undertow/UndertowLogger.removingNode:(Ljava/lang/String;)V
      44: aload_1
      45: invokevirtual #72                 // Method io/undertow/server/handlers/proxy/mod_cluster/Node.markRemoved:()V
      48: aload_0
      49: aload_1
      50: aload_1
      51: invokevirtual #97                 // Method io/undertow/server/handlers/proxy/mod_cluster/Node.getIoThread:()Lorg/xnio/XnioIoThread;
      54: invokevirtual #98                 // Method removeHealthCheck:(Lio/undertow/server/handlers/proxy/mod_cluster/Node;Lorg/xnio/XnioIoThread;)V
      57: aload_1
      58: invokevirtual #89                 // Method io/undertow/server/handlers/proxy/mod_cluster/Node.getContexts:()Ljava/util/Collection;
      61: invokeinterface #40,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      66: astore        4
      68: aload         4
      70: invokeinterface #41,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      75: ifeq          109
      78: aload         4
      80: invokeinterface #42,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      85: checkcast     #90                 // class io/undertow/server/handlers/proxy/mod_cluster/Context
      88: astore        5
      90: aload_0
      91: aload         5
      93: invokevirtual #99                 // Method io/undertow/server/handlers/proxy/mod_cluster/Context.getPath:()Ljava/lang/String;
      96: aload_1
      97: aload         5
      99: invokevirtual #100                // Method io/undertow/server/handlers/proxy/mod_cluster/Context.getVirtualHosts:()Ljava/util/List;
     102: invokevirtual #101                // Method removeContext:(Ljava/lang/String;Lio/undertow/server/handlers/proxy/mod_cluster/Node;Ljava/util/List;)Z
     105: pop
     106: goto          68
     109: aload_1
     110: invokevirtual #69                 // Method io/undertow/server/handlers/proxy/mod_cluster/Node.getNodeConfig:()Lio/undertow/server/handlers/proxy/mod_cluster/NodeConfig;
     113: invokevirtual #102                // Method io/undertow/server/handlers/proxy/mod_cluster/NodeConfig.getDomain:()Ljava/lang/String;
     116: astore        4
     118: aload         4
     120: ifnull        136
     123: aload_0
     124: getfield      #10                 // Field failoverDomains:Lio/undertow/server/handlers/cache/LRUCache;
     127: aload_1
     128: invokevirtual #86                 // Method io/undertow/server/handlers/proxy/mod_cluster/Node.getJvmRoute:()Ljava/lang/String;
     131: aload         4
     133: invokevirtual #103                // Method io/undertow/server/handlers/cache/LRUCache.add:(Ljava/lang/Object;Ljava/lang/Object;)V
     136: aload_1
     137: invokevirtual #104                // Method io/undertow/server/handlers/proxy/mod_cluster/Node.getBalancer:()Lio/undertow/server/handlers/proxy/mod_cluster/Balancer;
     140: invokevirtual #105                // Method io/undertow/server/handlers/proxy/mod_cluster/Balancer.getName:()Ljava/lang/String;
     143: astore        5
     145: aload_0
     146: getfield      #5                  // Field nodes:Ljava/util/concurrent/ConcurrentMap;
     149: invokeinterface #35,  1           // InterfaceMethod java/util/concurrent/ConcurrentMap.values:()Ljava/util/Collection;
     154: invokeinterface #40,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
     159: astore        6
     161: aload         6
     163: invokeinterface #41,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     168: ifeq          203
     171: aload         6
     173: invokeinterface #42,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     178: checkcast     #38                 // class io/undertow/server/handlers/proxy/mod_cluster/Node
     181: astore        7
     183: aload         7
     185: invokevirtual #104                // Method io/undertow/server/handlers/proxy/mod_cluster/Node.getBalancer:()Lio/undertow/server/handlers/proxy/mod_cluster/Balancer;
     188: invokevirtual #105                // Method io/undertow/server/handlers/proxy/mod_cluster/Balancer.getName:()Ljava/lang/String;
     191: aload         5
     193: invokevirtual #50                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     196: ifeq          200
     199: return
     200: goto          161
     203: aload_0
     204: getfield      #4                  // Field balancers:Ljava/util/concurrent/ConcurrentMap;
     207: aload         5
     209: invokeinterface #106,  2          // InterfaceMethod java/util/concurrent/ConcurrentMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
     214: pop
     215: aload_0
     216: getfield      #5                  // Field nodes:Ljava/util/concurrent/ConcurrentMap;
     219: invokeinterface #107,  1          // InterfaceMethod java/util/concurrent/ConcurrentMap.size:()I
     224: ifne          248
     227: aload_0
     228: getfield      #14                 // Field updateLoadTask:Lio/undertow/server/handlers/proxy/mod_cluster/ModClusterContainer$UpdateLoadTask;
     231: getfield      #83                 // Field io/undertow/server/handlers/proxy/mod_cluster/ModClusterContainer$UpdateLoadTask.cancelKey:Lorg/xnio/XnioExecutor$Key;
     234: invokeinterface #108,  1          // InterfaceMethod org/xnio/XnioExecutor$Key.remove:()Z
     239: pop
     240: aload_0
     241: getfield      #14                 // Field updateLoadTask:Lio/undertow/server/handlers/proxy/mod_cluster/ModClusterContainer$UpdateLoadTask;
     244: aconst_null
     245: putfield      #83                 // Field io/undertow/server/handlers/proxy/mod_cluster/ModClusterContainer$UpdateLoadTask.cancelKey:Lorg/xnio/XnioExecutor$Key;
     248: return

  public synchronized boolean enableContext(java.lang.String, java.lang.String, java.util.List<java.lang.String>);
    Code:
       0: aload_0
       1: getfield      #5                  // Field nodes:Ljava/util/concurrent/ConcurrentMap;
       4: aload_2
       5: invokeinterface #37,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #38                 // class io/undertow/server/handlers/proxy/mod_cluster/Node
      13: astore        4
      15: aload         4
      17: ifnull        38
      20: aload_0
      21: aload_1
      22: aload_2
      23: aload_3
      24: aload         4
      26: invokevirtual #109                // Method getOrRegisterContext:(Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Lio/undertow/server/handlers/proxy/mod_cluster/Node;)Lio/undertow/server/handlers/proxy/mod_cluster/Context;
      29: astore        5
      31: aload         5
      33: invokevirtual #91                 // Method io/undertow/server/handlers/proxy/mod_cluster/Context.enable:()V
      36: iconst_1
      37: ireturn
      38: iconst_0
      39: ireturn

  public synchronized boolean disableContext(java.lang.String, java.lang.String, java.util.List<java.lang.String>);
    Code:
       0: aload_0
       1: getfield      #5                  // Field nodes:Ljava/util/concurrent/ConcurrentMap;
       4: aload_2
       5: invokeinterface #37,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #38                 // class io/undertow/server/handlers/proxy/mod_cluster/Node
      13: astore        4
      15: aload         4
      17: ifnull        38
      20: aload_0
      21: aload_1
      22: aload_2
      23: aload_3
      24: aload         4
      26: invokevirtual #109                // Method getOrRegisterContext:(Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Lio/undertow/server/handlers/proxy/mod_cluster/Node;)Lio/undertow/server/handlers/proxy/mod_cluster/Context;
      29: astore        5
      31: aload         5
      33: invokevirtual #92                 // Method io/undertow/server/handlers/proxy/mod_cluster/Context.disable:()V
      36: iconst_1
      37: ireturn
      38: iconst_0
      39: ireturn

  synchronized int stopContext(java.lang.String, java.lang.String, java.util.List<java.lang.String>);
    Code:
       0: aload_0
       1: getfield      #5                  // Field nodes:Ljava/util/concurrent/ConcurrentMap;
       4: aload_2
       5: invokeinterface #37,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #38                 // class io/undertow/server/handlers/proxy/mod_cluster/Node
      13: astore        4
      15: aload         4
      17: ifnull        42
      20: aload_0
      21: aload_1
      22: aload_2
      23: aload_3
      24: aload         4
      26: invokevirtual #109                // Method getOrRegisterContext:(Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Lio/undertow/server/handlers/proxy/mod_cluster/Node;)Lio/undertow/server/handlers/proxy/mod_cluster/Context;
      29: astore        5
      31: aload         5
      33: invokevirtual #93                 // Method io/undertow/server/handlers/proxy/mod_cluster/Context.stop:()V
      36: aload         5
      38: invokevirtual #110                // Method io/undertow/server/handlers/proxy/mod_cluster/Context.getActiveRequests:()I
      41: ireturn
      42: iconst_m1
      43: ireturn

  synchronized boolean removeContext(java.lang.String, java.lang.String, java.util.List<java.lang.String>);
    Code:
       0: aload_0
       1: getfield      #5                  // Field nodes:Ljava/util/concurrent/ConcurrentMap;
       4: aload_2
       5: invokeinterface #37,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #38                 // class io/undertow/server/handlers/proxy/mod_cluster/Node
      13: astore        4
      15: aload         4
      17: ifnull        29
      20: aload_0
      21: aload_1
      22: aload         4
      24: aload_3
      25: invokevirtual #101                // Method removeContext:(Ljava/lang/String;Lio/undertow/server/handlers/proxy/mod_cluster/Node;Ljava/util/List;)Z
      28: ireturn
      29: iconst_0
      30: ireturn

  public synchronized boolean removeContext(java.lang.String, io.undertow.server.handlers.proxy.mod_cluster.Node, java.util.List<java.lang.String>);
    Code:
       0: aload_2
       1: ifnonnull     6
       4: iconst_0
       5: ireturn
       6: aload_2
       7: invokevirtual #86                 // Method io/undertow/server/handlers/proxy/mod_cluster/Node.getJvmRoute:()Ljava/lang/String;
      10: astore        4
      12: getstatic     #76                 // Field io/undertow/UndertowLogger.ROOT_LOGGER:Lio/undertow/UndertowLogger;
      15: aload_1
      16: aload         4
      18: invokeinterface #111,  3          // InterfaceMethod io/undertow/UndertowLogger.unregisteringContext:(Ljava/lang/String;Ljava/lang/String;)V
      23: aload_2
      24: aload_1
      25: aload_3
      26: invokevirtual #112                // Method io/undertow/server/handlers/proxy/mod_cluster/Node.removeContext:(Ljava/lang/String;Ljava/util/List;)Lio/undertow/server/handlers/proxy/mod_cluster/Context;
      29: astore        5
      31: aload         5
      33: ifnonnull     38
      36: iconst_0
      37: ireturn
      38: aload         5
      40: invokevirtual #93                 // Method io/undertow/server/handlers/proxy/mod_cluster/Context.stop:()V
      43: aload         5
      45: invokevirtual #100                // Method io/undertow/server/handlers/proxy/mod_cluster/Context.getVirtualHosts:()Ljava/util/List;
      48: invokeinterface #113,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      53: astore        6
      55: aload         6
      57: invokeinterface #41,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      62: ifeq          131
      65: aload         6
      67: invokeinterface #42,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      72: checkcast     #64                 // class java/lang/String
      75: astore        7
      77: aload_0
      78: getfield      #6                  // Field hosts:Ljava/util/concurrent/ConcurrentMap;
      81: aload         7
      83: invokeinterface #37,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      88: checkcast     #114                // class io/undertow/server/handlers/proxy/mod_cluster/VirtualHost
      91: astore        8
      93: aload         8
      95: ifnull        128
      98: aload         8
     100: aload_1
     101: aload         4
     103: aload         5
     105: invokevirtual #115                // Method io/undertow/server/handlers/proxy/mod_cluster/VirtualHost.removeContext:(Ljava/lang/String;Ljava/lang/String;Lio/undertow/server/handlers/proxy/mod_cluster/Context;)V
     108: aload         8
     110: invokevirtual #116                // Method io/undertow/server/handlers/proxy/mod_cluster/VirtualHost.isEmpty:()Z
     113: ifeq          128
     116: aload_0
     117: getfield      #6                  // Field hosts:Ljava/util/concurrent/ConcurrentMap;
     120: aload         7
     122: invokeinterface #106,  2          // InterfaceMethod java/util/concurrent/ConcurrentMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
     127: pop
     128: goto          55
     131: iconst_1
     132: ireturn

  private io.undertow.server.handlers.proxy.mod_cluster.Context getOrRegisterContext(java.lang.String, java.lang.String, java.util.List<java.lang.String>, io.undertow.server.handlers.proxy.mod_cluster.Node);
    Code:
       0: aload         4
       2: aload_1
       3: aload_3
       4: invokevirtual #117                // Method io/undertow/server/handlers/proxy/mod_cluster/Node.getContext:(Ljava/lang/String;Ljava/util/List;)Lio/undertow/server/handlers/proxy/mod_cluster/Context;
       7: astore        5
       9: aload         5
      11: ifnonnull     130
      14: aload         4
      16: aload_1
      17: aload_3
      18: invokevirtual #118                // Method io/undertow/server/handlers/proxy/mod_cluster/Node.registerContext:(Ljava/lang/String;Ljava/util/List;)Lio/undertow/server/handlers/proxy/mod_cluster/Context;
      21: astore        5
      23: getstatic     #76                 // Field io/undertow/UndertowLogger.ROOT_LOGGER:Lio/undertow/UndertowLogger;
      26: aload_1
      27: aload_2
      28: invokeinterface #119,  3          // InterfaceMethod io/undertow/UndertowLogger.registeringContext:(Ljava/lang/String;Ljava/lang/String;)V
      33: getstatic     #76                 // Field io/undertow/UndertowLogger.ROOT_LOGGER:Lio/undertow/UndertowLogger;
      36: aload_1
      37: aload_2
      38: aload_3
      39: invokeinterface #120,  4          // InterfaceMethod io/undertow/UndertowLogger.registeringContext:(Ljava/lang/String;Ljava/lang/String;Ljava/util/List;)V
      44: aload_3
      45: invokeinterface #113,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      50: astore        6
      52: aload         6
      54: invokeinterface #41,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      59: ifeq          130
      62: aload         6
      64: invokeinterface #42,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      69: checkcast     #64                 // class java/lang/String
      72: astore        7
      74: aload_0
      75: getfield      #6                  // Field hosts:Ljava/util/concurrent/ConcurrentMap;
      78: aload         7
      80: invokeinterface #37,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      85: checkcast     #114                // class io/undertow/server/handlers/proxy/mod_cluster/VirtualHost
      88: astore        8
      90: aload         8
      92: ifnonnull     118
      95: new           #114                // class io/undertow/server/handlers/proxy/mod_cluster/VirtualHost
      98: dup
      99: invokespecial #121                // Method io/undertow/server/handlers/proxy/mod_cluster/VirtualHost."<init>":()V
     102: astore        8
     104: aload_0
     105: getfield      #6                  // Field hosts:Ljava/util/concurrent/ConcurrentMap;
     108: aload         7
     110: aload         8
     112: invokeinterface #80,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     117: pop
     118: aload         8
     120: aload_1
     121: aload_2
     122: aload         5
     124: invokevirtual #122                // Method io/undertow/server/handlers/proxy/mod_cluster/VirtualHost.registerContext:(Ljava/lang/String;Ljava/lang/String;Lio/undertow/server/handlers/proxy/mod_cluster/Context;)V
     127: goto          52
     130: aload         5
     132: areturn

  io.undertow.server.handlers.proxy.mod_cluster.Context findNewNode(io.undertow.server.handlers.proxy.mod_cluster.VirtualHost$HostEntry);
    Code:
       0: aload_1
       1: invokevirtual #123                // Method io/undertow/server/handlers/proxy/mod_cluster/VirtualHost$HostEntry.getContexts:()Ljava/util/Collection;
       4: iconst_0
       5: aconst_null
       6: invokestatic  #124                // Method electNode:(Ljava/lang/Iterable;ZLjava/lang/String;)Lio/undertow/server/handlers/proxy/mod_cluster/Context;
       9: areturn

  io.undertow.server.handlers.proxy.mod_cluster.Context findFailoverNode(io.undertow.server.handlers.proxy.mod_cluster.VirtualHost$HostEntry, java.lang.String, java.lang.String, java.lang.String, boolean);
    Code:
       0: aload_0
       1: getfield      #17                 // Field modCluster:Lio/undertow/server/handlers/proxy/mod_cluster/ModCluster;
       4: invokevirtual #125                // Method io/undertow/server/handlers/proxy/mod_cluster/ModCluster.isDeterministicFailover:()Z
       7: ifeq          288
      10: new           #126                // class java/util/ArrayList
      13: dup
      14: aload_1
      15: invokevirtual #127                // Method io/undertow/server/handlers/proxy/mod_cluster/VirtualHost$HostEntry.getNodes:()Ljava/util/Collection;
      18: invokeinterface #128,  1          // InterfaceMethod java/util/Collection.size:()I
      23: invokespecial #129                // Method java/util/ArrayList."<init>":(I)V
      26: astore        6
      28: aload_1
      29: invokevirtual #127                // Method io/undertow/server/handlers/proxy/mod_cluster/VirtualHost$HostEntry.getNodes:()Ljava/util/Collection;
      32: invokeinterface #40,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      37: astore        7
      39: aload         7
      41: invokeinterface #41,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      46: ifeq          111
      49: aload         7
      51: invokeinterface #42,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      56: checkcast     #64                 // class java/lang/String
      59: astore        8
      61: aload_0
      62: getfield      #5                  // Field nodes:Ljava/util/concurrent/ConcurrentMap;
      65: aload         8
      67: invokeinterface #37,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      72: checkcast     #38                 // class io/undertow/server/handlers/proxy/mod_cluster/Node
      75: astore        9
      77: aload         9
      79: ifnull        108
      82: aload         9
      84: invokevirtual #74                 // Method io/undertow/server/handlers/proxy/mod_cluster/Node.isInErrorState:()Z
      87: ifne          108
      90: aload         9
      92: invokevirtual #130                // Method io/undertow/server/handlers/proxy/mod_cluster/Node.isHotStandby:()Z
      95: ifne          108
      98: aload         6
     100: aload         8
     102: invokeinterface #131,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     107: pop
     108: goto          39
     111: aload         6
     113: invokeinterface #132,  1          // InterfaceMethod java/util/List.isEmpty:()Z
     118: ifeq          204
     121: aload_1
     122: invokevirtual #127                // Method io/undertow/server/handlers/proxy/mod_cluster/VirtualHost$HostEntry.getNodes:()Ljava/util/Collection;
     125: invokeinterface #40,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
     130: astore        7
     132: aload         7
     134: invokeinterface #41,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     139: ifeq          204
     142: aload         7
     144: invokeinterface #42,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     149: checkcast     #64                 // class java/lang/String
     152: astore        8
     154: aload_0
     155: getfield      #5                  // Field nodes:Ljava/util/concurrent/ConcurrentMap;
     158: aload         8
     160: invokeinterface #37,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
     165: checkcast     #38                 // class io/undertow/server/handlers/proxy/mod_cluster/Node
     168: astore        9
     170: aload         9
     172: ifnull        201
     175: aload         9
     177: invokevirtual #74                 // Method io/undertow/server/handlers/proxy/mod_cluster/Node.isInErrorState:()Z
     180: ifne          201
     183: aload         9
     185: invokevirtual #130                // Method io/undertow/server/handlers/proxy/mod_cluster/Node.isHotStandby:()Z
     188: ifeq          201
     191: aload         6
     193: aload         8
     195: invokeinterface #131,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     200: pop
     201: goto          132
     204: aload         6
     206: invokeinterface #132,  1          // InterfaceMethod java/util/List.isEmpty:()Z
     211: ifeq          216
     214: aconst_null
     215: areturn
     216: aload_3
     217: iconst_0
     218: aload_3
     219: bipush        46
     221: invokevirtual #133                // Method java/lang/String.indexOf:(I)I
     224: invokevirtual #134                // Method java/lang/String.substring:(II)Ljava/lang/String;
     227: astore        7
     229: aload         7
     231: invokevirtual #135                // Method java/lang/String.hashCode:()I
     234: i2l
     235: invokestatic  #136                // Method java/lang/Math.abs:(J)J
     238: aload         6
     240: invokeinterface #137,  1          // InterfaceMethod java/util/List.size:()I
     245: i2l
     246: lrem
     247: l2i
     248: istore        8
     250: aload         6
     252: invokestatic  #138                // Method java/util/Collections.sort:(Ljava/util/List;)V
     255: aload         6
     257: iload         8
     259: invokeinterface #139,  2          // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
     264: checkcast     #64                 // class java/lang/String
     267: astore        9
     269: getstatic     #76                 // Field io/undertow/UndertowLogger.ROOT_LOGGER:Lio/undertow/UndertowLogger;
     272: ldc           #140                // String Using deterministic failover target: %s
     274: aload         9
     276: invokeinterface #78,  3           // InterfaceMethod io/undertow/UndertowLogger.debugf:(Ljava/lang/String;Ljava/lang/Object;)V
     281: aload_1
     282: aload         9
     284: invokevirtual #141                // Method io/undertow/server/handlers/proxy/mod_cluster/VirtualHost$HostEntry.getContextForNode:(Ljava/lang/String;)Lio/undertow/server/handlers/proxy/mod_cluster/Context;
     287: areturn
     288: aconst_null
     289: astore        6
     291: aload_2
     292: ifnonnull     348
     295: aload_0
     296: getfield      #5                  // Field nodes:Ljava/util/concurrent/ConcurrentMap;
     299: aload         4
     301: invokeinterface #37,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
     306: checkcast     #38                 // class io/undertow/server/handlers/proxy/mod_cluster/Node
     309: astore        7
     311: aload         7
     313: ifnull        326
     316: aload         7
     318: invokevirtual #69                 // Method io/undertow/server/handlers/proxy/mod_cluster/Node.getNodeConfig:()Lio/undertow/server/handlers/proxy/mod_cluster/NodeConfig;
     321: invokevirtual #102                // Method io/undertow/server/handlers/proxy/mod_cluster/NodeConfig.getDomain:()Ljava/lang/String;
     324: astore        6
     326: aload         6
     328: ifnonnull     345
     331: aload_0
     332: getfield      #10                 // Field failoverDomains:Lio/undertow/server/handlers/cache/LRUCache;
     335: aload         4
     337: invokevirtual #142                // Method io/undertow/server/handlers/cache/LRUCache.get:(Ljava/lang/Object;)Ljava/lang/Object;
     340: checkcast     #64                 // class java/lang/String
     343: astore        6
     345: goto          351
     348: aload_2
     349: astore        6
     351: aload_1
     352: invokevirtual #123                // Method io/undertow/server/handlers/proxy/mod_cluster/VirtualHost$HostEntry.getContexts:()Ljava/util/Collection;
     355: astore        7
     357: aload         6
     359: ifnull        380
     362: aload         7
     364: iconst_1
     365: aload         6
     367: invokestatic  #124                // Method electNode:(Ljava/lang/Iterable;ZLjava/lang/String;)Lio/undertow/server/handlers/proxy/mod_cluster/Context;
     370: astore        8
     372: aload         8
     374: ifnull        380
     377: aload         8
     379: areturn
     380: iload         5
     382: ifeq          387
     385: aconst_null
     386: areturn
     387: aload         7
     389: iconst_0
     390: aconst_null
     391: invokestatic  #124                // Method electNode:(Ljava/lang/Iterable;ZLjava/lang/String;)Lio/undertow/server/handlers/proxy/mod_cluster/Context;
     394: areturn

  private io.undertow.util.PathMatcher$PathMatch<io.undertow.server.handlers.proxy.mod_cluster.VirtualHost$HostEntry> mapVirtualHost(io.undertow.server.HttpServerExchange);
    Code:
       0: aload_1
       1: invokevirtual #143                // Method io/undertow/server/HttpServerExchange.getRelativePath:()Ljava/lang/String;
       4: astore_2
       5: aload_0
       6: getfield      #17                 // Field modCluster:Lio/undertow/server/handlers/proxy/mod_cluster/ModCluster;
       9: invokevirtual #144                // Method io/undertow/server/handlers/proxy/mod_cluster/ModCluster.isUseAlias:()Z
      12: ifeq          133
      15: aload_1
      16: invokevirtual #145                // Method io/undertow/server/HttpServerExchange.getRequestHeaders:()Lio/undertow/util/HeaderMap;
      19: getstatic     #146                // Field io/undertow/util/Headers.HOST:Lio/undertow/util/HttpString;
      22: invokevirtual #147                // Method io/undertow/util/HeaderMap.getFirst:(Lio/undertow/util/HttpString;)Ljava/lang/String;
      25: astore_3
      26: aload_3
      27: ifnull        130
      30: aload_3
      31: ldc           #148                // String :
      33: invokevirtual #149                // Method java/lang/String.indexOf:(Ljava/lang/String;)I
      36: istore        4
      38: iload         4
      40: ifle          87
      43: aload_0
      44: getfield      #6                  // Field hosts:Ljava/util/concurrent/ConcurrentMap;
      47: aload_3
      48: iconst_0
      49: iload         4
      51: invokevirtual #134                // Method java/lang/String.substring:(II)Ljava/lang/String;
      54: invokeinterface #37,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      59: checkcast     #114                // class io/undertow/server/handlers/proxy/mod_cluster/VirtualHost
      62: astore        5
      64: aload         5
      66: ifnonnull     102
      69: aload_0
      70: getfield      #6                  // Field hosts:Ljava/util/concurrent/ConcurrentMap;
      73: aload_3
      74: invokeinterface #37,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      79: checkcast     #114                // class io/undertow/server/handlers/proxy/mod_cluster/VirtualHost
      82: astore        5
      84: goto          102
      87: aload_0
      88: getfield      #6                  // Field hosts:Ljava/util/concurrent/ConcurrentMap;
      91: aload_3
      92: invokeinterface #37,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      97: checkcast     #114                // class io/undertow/server/handlers/proxy/mod_cluster/VirtualHost
     100: astore        5
     102: aload         5
     104: ifnonnull     109
     107: aconst_null
     108: areturn
     109: aload         5
     111: aload_2
     112: invokevirtual #150                // Method io/undertow/server/handlers/proxy/mod_cluster/VirtualHost.match:(Ljava/lang/String;)Lio/undertow/util/PathMatcher$PathMatch;
     115: astore        6
     117: aload         6
     119: invokevirtual #54                 // Method io/undertow/util/PathMatcher$PathMatch.getValue:()Ljava/lang/Object;
     122: ifnonnull     127
     125: aconst_null
     126: areturn
     127: aload         6
     129: areturn
     130: goto          198
     133: aload_0
     134: getfield      #6                  // Field hosts:Ljava/util/concurrent/ConcurrentMap;
     137: invokeinterface #151,  1          // InterfaceMethod java/util/concurrent/ConcurrentMap.entrySet:()Ljava/util/Set;
     142: invokeinterface #152,  1          // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
     147: astore_3
     148: aload_3
     149: invokeinterface #41,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     154: ifeq          198
     157: aload_3
     158: invokeinterface #42,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     163: checkcast     #153                // class java/util/Map$Entry
     166: astore        4
     168: aload         4
     170: invokeinterface #154,  1          // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
     175: checkcast     #114                // class io/undertow/server/handlers/proxy/mod_cluster/VirtualHost
     178: aload_2
     179: invokevirtual #150                // Method io/undertow/server/handlers/proxy/mod_cluster/VirtualHost.match:(Ljava/lang/String;)Lio/undertow/util/PathMatcher$PathMatch;
     182: astore        5
     184: aload         5
     186: invokevirtual #54                 // Method io/undertow/util/PathMatcher$PathMatch.getValue:()Ljava/lang/Object;
     189: ifnull        195
     192: aload         5
     194: areturn
     195: goto          148
     198: aconst_null
     199: areturn

  org.xnio.OptionMap getClientOptions();
    Code:
       0: aload_0
       1: getfield      #18                 // Field clientOptions:Lorg/xnio/OptionMap;
       4: areturn

  private java.util.Iterator<java.lang.CharSequence> parseRoutes(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #33                 // Field routeIteratorFactory:Lio/undertow/server/handlers/proxy/RouteIteratorFactory;
       4: aload_1
       5: invokevirtual #155                // Method io/undertow/server/handlers/proxy/RouteIteratorFactory.iterator:(Ljava/lang/String;)Ljava/util/Iterator;
       8: areturn

  static io.undertow.server.handlers.proxy.mod_cluster.Context electNode(java.lang.Iterable<io.undertow.server.handlers.proxy.mod_cluster.Context>, boolean, java.lang.String);
    Code:
       0: aconst_null
       1: astore_3
       2: aconst_null
       3: astore        4
       5: iconst_0
       6: istore        5
       8: aload_0
       9: invokeinterface #46,  1           // InterfaceMethod java/lang/Iterable.iterator:()Ljava/util/Iterator;
      14: astore        6
      16: aload         6
      18: invokeinterface #41,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      23: ifeq          191
      26: aload         6
      28: invokeinterface #42,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      33: checkcast     #90                 // class io/undertow/server/handlers/proxy/mod_cluster/Context
      36: astore        7
      38: aload         7
      40: iload_1
      41: invokevirtual #156                // Method io/undertow/server/handlers/proxy/mod_cluster/Context.checkAvailable:(Z)Z
      44: ifeq          188
      47: aload         7
      49: invokevirtual #157                // Method io/undertow/server/handlers/proxy/mod_cluster/Context.getNode:()Lio/undertow/server/handlers/proxy/mod_cluster/Node;
      52: astore        8
      54: aload         8
      56: invokevirtual #130                // Method io/undertow/server/handlers/proxy/mod_cluster/Node.isHotStandby:()Z
      59: istore        9
      61: aload_2
      62: ifnull        83
      65: aload_2
      66: aload         8
      68: invokevirtual #69                 // Method io/undertow/server/handlers/proxy/mod_cluster/Node.getNodeConfig:()Lio/undertow/server/handlers/proxy/mod_cluster/NodeConfig;
      71: invokevirtual #102                // Method io/undertow/server/handlers/proxy/mod_cluster/NodeConfig.getDomain:()Ljava/lang/String;
      74: invokevirtual #50                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      77: ifne          83
      80: goto          16
      83: aload         4
      85: ifnull        177
      88: iload         5
      90: ifeq          135
      93: iload         9
      95: ifeq          121
      98: aload         4
     100: invokevirtual #158                // Method io/undertow/server/handlers/proxy/mod_cluster/Node.getElectedDiff:()I
     103: aload         8
     105: invokevirtual #158                // Method io/undertow/server/handlers/proxy/mod_cluster/Node.getElectedDiff:()I
     108: if_icmple     188
     111: aload         8
     113: astore        4
     115: aload         7
     117: astore_3
     118: goto          188
     121: aload         8
     123: astore        4
     125: aload         7
     127: astore_3
     128: iload         9
     130: istore        5
     132: goto          188
     135: iload         9
     137: ifeq          143
     140: goto          16
     143: aload         4
     145: invokevirtual #159                // Method io/undertow/server/handlers/proxy/mod_cluster/Node.getLoadStatus:()I
     148: istore        10
     150: aload         8
     152: invokevirtual #159                // Method io/undertow/server/handlers/proxy/mod_cluster/Node.getLoadStatus:()I
     155: istore        11
     157: iload         10
     159: iload         11
     161: if_icmple     174
     164: aload         8
     166: astore        4
     168: aload         7
     170: astore_3
     171: iconst_0
     172: istore        5
     174: goto          188
     177: aload         8
     179: astore        4
     181: aload         7
     183: astore_3
     184: iload         9
     186: istore        5
     188: goto          16
     191: aload         4
     193: ifnull        201
     196: aload         4
     198: invokevirtual #160                // Method io/undertow/server/handlers/proxy/mod_cluster/Node.elected:()V
     201: aload_3
     202: areturn

  void scheduleHealthCheck(io.undertow.server.handlers.proxy.mod_cluster.Node, org.xnio.XnioIoThread);
    Code:
       0: getstatic     #161                // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokestatic  #162                // Method java/lang/Thread.holdsLock:(Ljava/lang/Object;)Z
      10: ifne          21
      13: new           #163                // class java/lang/AssertionError
      16: dup
      17: invokespecial #164                // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: getfield      #11                 // Field healthChecks:Ljava/util/concurrent/ConcurrentMap;
      25: aload_2
      26: invokeinterface #37,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      31: checkcast     #165                // class io/undertow/server/handlers/proxy/mod_cluster/ModClusterContainer$HealthCheckTask
      34: astore_3
      35: aload_3
      36: ifnonnull     86
      39: new           #165                // class io/undertow/server/handlers/proxy/mod_cluster/ModClusterContainer$HealthCheckTask
      42: dup
      43: aload_0
      44: getfield      #27                 // Field removeBrokenNodesThreshold:J
      47: aload_0
      48: getfield      #20                 // Field healthChecker:Lio/undertow/server/handlers/proxy/mod_cluster/NodeHealthChecker;
      51: invokespecial #166                // Method io/undertow/server/handlers/proxy/mod_cluster/ModClusterContainer$HealthCheckTask."<init>":(JLio/undertow/server/handlers/proxy/mod_cluster/NodeHealthChecker;)V
      54: astore_3
      55: aload_0
      56: getfield      #11                 // Field healthChecks:Ljava/util/concurrent/ConcurrentMap;
      59: aload_2
      60: aload_3
      61: invokeinterface #80,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      66: pop
      67: aload_3
      68: aload_2
      69: aload_3
      70: aload_0
      71: getfield      #17                 // Field modCluster:Lio/undertow/server/handlers/proxy/mod_cluster/ModCluster;
      74: invokevirtual #24                 // Method io/undertow/server/handlers/proxy/mod_cluster/ModCluster.getHealthCheckInterval:()J
      77: getstatic     #84                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      80: invokevirtual #85                 // Method org/xnio/XnioIoThread.executeAtInterval:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lorg/xnio/XnioExecutor$Key;
      83: putfield      #167                // Field io/undertow/server/handlers/proxy/mod_cluster/ModClusterContainer$HealthCheckTask.cancelKey:Lorg/xnio/XnioExecutor$Key;
      86: aload_3
      87: getfield      #168                // Field io/undertow/server/handlers/proxy/mod_cluster/ModClusterContainer$HealthCheckTask.nodes:Ljava/util/ArrayList;
      90: aload_1
      91: invokevirtual #169                // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
      94: pop
      95: return

  void removeHealthCheck(io.undertow.server.handlers.proxy.mod_cluster.Node, org.xnio.XnioIoThread);
    Code:
       0: getstatic     #161                // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokestatic  #162                // Method java/lang/Thread.holdsLock:(Ljava/lang/Object;)Z
      10: ifne          21
      13: new           #163                // class java/lang/AssertionError
      16: dup
      17: invokespecial #164                // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: getfield      #11                 // Field healthChecks:Ljava/util/concurrent/ConcurrentMap;
      25: aload_2
      26: invokeinterface #37,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      31: checkcast     #165                // class io/undertow/server/handlers/proxy/mod_cluster/ModClusterContainer$HealthCheckTask
      34: astore_3
      35: aload_3
      36: ifnonnull     40
      39: return
      40: aload_3
      41: getfield      #168                // Field io/undertow/server/handlers/proxy/mod_cluster/ModClusterContainer$HealthCheckTask.nodes:Ljava/util/ArrayList;
      44: aload_1
      45: invokevirtual #170                // Method java/util/ArrayList.remove:(Ljava/lang/Object;)Z
      48: pop
      49: aload_3
      50: getfield      #168                // Field io/undertow/server/handlers/proxy/mod_cluster/ModClusterContainer$HealthCheckTask.nodes:Ljava/util/ArrayList;
      53: invokevirtual #171                // Method java/util/ArrayList.size:()I
      56: ifne          80
      59: aload_0
      60: getfield      #11                 // Field healthChecks:Ljava/util/concurrent/ConcurrentMap;
      63: aload_2
      64: invokeinterface #106,  2          // InterfaceMethod java/util/concurrent/ConcurrentMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      69: pop
      70: aload_3
      71: getfield      #167                // Field io/undertow/server/handlers/proxy/mod_cluster/ModClusterContainer$HealthCheckTask.cancelKey:Lorg/xnio/XnioExecutor$Key;
      74: invokeinterface #108,  1          // InterfaceMethod org/xnio/XnioExecutor$Key.remove:()Z
      79: pop
      80: return

  static long removeThreshold(long, long);
    Code:
       0: lload_0
       1: lconst_0
       2: lcmp
       3: ifle          42
       6: lload_2
       7: lconst_0
       8: lcmp
       9: ifle          42
      12: lload_2
      13: lload_0
      14: ldiv
      15: lstore        4
      17: lload         4
      19: ldc2_w        #172                // long 1000l
      22: lcmp
      23: ifle          30
      26: ldc2_w        #172                // long 1000l
      29: lreturn
      30: lload         4
      32: lconst_1
      33: lcmp
      34: ifge          39
      37: lconst_1
      38: lreturn
      39: lload         4
      41: lreturn
      42: ldc2_w        #174                // long -1l
      45: lreturn

  public io.undertow.server.handlers.proxy.mod_cluster.ModClusterStatus getStatus();
    Code:
       0: new           #126                // class java/util/ArrayList
       3: dup
       4: invokespecial #176                // Method java/util/ArrayList."<init>":()V
       7: astore_1
       8: aload_0
       9: getfield      #4                  // Field balancers:Ljava/util/concurrent/ConcurrentMap;
      12: invokeinterface #151,  1          // InterfaceMethod java/util/concurrent/ConcurrentMap.entrySet:()Ljava/util/Set;
      17: invokeinterface #152,  1          // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      22: astore_2
      23: aload_2
      24: invokeinterface #41,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      29: ifeq          217
      32: aload_2
      33: invokeinterface #42,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      38: checkcast     #153                // class java/util/Map$Entry
      41: astore_3
      42: new           #126                // class java/util/ArrayList
      45: dup
      46: invokespecial #176                // Method java/util/ArrayList."<init>":()V
      49: astore        4
      51: aload_0
      52: invokevirtual #177                // Method getNodes:()Ljava/util/Collection;
      55: invokeinterface #40,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      60: astore        5
      62: aload         5
      64: invokeinterface #41,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      69: ifeq          189
      72: aload         5
      74: invokeinterface #42,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      79: checkcast     #38                 // class io/undertow/server/handlers/proxy/mod_cluster/Node
      82: astore        6
      84: aload         6
      86: invokevirtual #104                // Method io/undertow/server/handlers/proxy/mod_cluster/Node.getBalancer:()Lio/undertow/server/handlers/proxy/mod_cluster/Balancer;
      89: invokevirtual #105                // Method io/undertow/server/handlers/proxy/mod_cluster/Balancer.getName:()Ljava/lang/String;
      92: aload_3
      93: invokeinterface #178,  1          // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      98: invokevirtual #50                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     101: ifeq          186
     104: new           #126                // class java/util/ArrayList
     107: dup
     108: invokespecial #176                // Method java/util/ArrayList."<init>":()V
     111: astore        7
     113: aload         6
     115: invokevirtual #89                 // Method io/undertow/server/handlers/proxy/mod_cluster/Node.getContexts:()Ljava/util/Collection;
     118: invokeinterface #40,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
     123: astore        8
     125: aload         8
     127: invokeinterface #41,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     132: ifeq          167
     135: aload         8
     137: invokeinterface #42,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     142: checkcast     #90                 // class io/undertow/server/handlers/proxy/mod_cluster/Context
     145: astore        9
     147: aload         7
     149: new           #179                // class io/undertow/server/handlers/proxy/mod_cluster/ModClusterContainer$ContextImpl
     152: dup
     153: aload         9
     155: invokespecial #180                // Method io/undertow/server/handlers/proxy/mod_cluster/ModClusterContainer$ContextImpl."<init>":(Lio/undertow/server/handlers/proxy/mod_cluster/Context;)V
     158: invokeinterface #131,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     163: pop
     164: goto          125
     167: aload         4
     169: new           #181                // class io/undertow/server/handlers/proxy/mod_cluster/ModClusterContainer$NodeImpl
     172: dup
     173: aload         6
     175: aload         7
     177: invokespecial #182                // Method io/undertow/server/handlers/proxy/mod_cluster/ModClusterContainer$NodeImpl."<init>":(Lio/undertow/server/handlers/proxy/mod_cluster/Node;Ljava/util/List;)V
     180: invokeinterface #131,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     185: pop
     186: goto          62
     189: aload_1
     190: new           #183                // class io/undertow/server/handlers/proxy/mod_cluster/ModClusterContainer$BalancerImpl
     193: dup
     194: aload_3
     195: invokeinterface #154,  1          // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
     200: checkcast     #43                 // class io/undertow/server/handlers/proxy/mod_cluster/Balancer
     203: aload         4
     205: invokespecial #184                // Method io/undertow/server/handlers/proxy/mod_cluster/ModClusterContainer$BalancerImpl."<init>":(Lio/undertow/server/handlers/proxy/mod_cluster/Balancer;Ljava/util/List;)V
     208: invokeinterface #131,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     213: pop
     214: goto          23
     217: new           #185                // class io/undertow/server/handlers/proxy/mod_cluster/ModClusterContainer$ModClusterStatusImpl
     220: dup
     221: aload_1
     222: invokespecial #186                // Method io/undertow/server/handlers/proxy/mod_cluster/ModClusterContainer$ModClusterStatusImpl."<init>":(Ljava/util/List;)V
     225: areturn

  static {};
    Code:
       0: ldc           #187                // class io/undertow/server/handlers/proxy/mod_cluster/ModClusterContainer
       2: invokevirtual #188                // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #161                // Field $assertionsDisabled:Z
      16: return
}
