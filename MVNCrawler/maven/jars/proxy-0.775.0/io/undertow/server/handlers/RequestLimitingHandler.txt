Compiled from "RequestLimitingHandler.java"
public final class io.undertow.server.handlers.RequestLimitingHandler implements io.undertow.server.HttpHandler {
  private final io.undertow.server.HttpHandler nextHandler;

  private final io.undertow.server.handlers.RequestLimit requestLimit;

  public io.undertow.server.handlers.RequestLimitingHandler(int, io.undertow.server.HttpHandler);
    Code:
       0: aload_0
       1: iload_1
       2: iconst_m1
       3: aload_2
       4: invokespecial #1                  // Method "<init>":(IILio/undertow/server/HttpHandler;)V
       7: return

  public io.undertow.server.handlers.RequestLimitingHandler(int, int, io.undertow.server.HttpHandler);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: ldc           #3                  // String nextHandler
       6: aload_3
       7: invokestatic  #4                  // Method org/wildfly/common/Assert.checkNotNullParam:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;
      10: pop
      11: iload_1
      12: iconst_1
      13: if_icmpge     26
      16: new           #5                  // class java/lang/IllegalArgumentException
      19: dup
      20: ldc           #6                  // String Maximum concurrent requests must be at least 1
      22: invokespecial #7                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      25: athrow
      26: aload_0
      27: new           #8                  // class io/undertow/server/handlers/RequestLimit
      30: dup
      31: iload_1
      32: iload_2
      33: invokespecial #9                  // Method io/undertow/server/handlers/RequestLimit."<init>":(II)V
      36: putfield      #10                 // Field requestLimit:Lio/undertow/server/handlers/RequestLimit;
      39: aload_0
      40: aload_3
      41: putfield      #11                 // Field nextHandler:Lio/undertow/server/HttpHandler;
      44: return

  public io.undertow.server.handlers.RequestLimitingHandler(io.undertow.server.handlers.RequestLimit, io.undertow.server.HttpHandler);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: ldc           #3                  // String nextHandler
       6: aload_2
       7: invokestatic  #4                  // Method org/wildfly/common/Assert.checkNotNullParam:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;
      10: pop
      11: aload_0
      12: aload_1
      13: putfield      #10                 // Field requestLimit:Lio/undertow/server/handlers/RequestLimit;
      16: aload_0
      17: aload_2
      18: putfield      #11                 // Field nextHandler:Lio/undertow/server/HttpHandler;
      21: return

  public void handleRequest(io.undertow.server.HttpServerExchange) throws java.lang.Exception;
    Code:
       0: aload_0
       1: getfield      #10                 // Field requestLimit:Lio/undertow/server/handlers/RequestLimit;
       4: aload_1
       5: aload_0
       6: getfield      #11                 // Field nextHandler:Lio/undertow/server/HttpHandler;
       9: invokevirtual #12                 // Method io/undertow/server/handlers/RequestLimit.handleRequest:(Lio/undertow/server/HttpServerExchange;Lio/undertow/server/HttpHandler;)V
      12: return

  public io.undertow.server.handlers.RequestLimit getRequestLimit();
    Code:
       0: aload_0
       1: getfield      #10                 // Field requestLimit:Lio/undertow/server/handlers/RequestLimit;
       4: areturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: getfield      #10                 // Field requestLimit:Lio/undertow/server/handlers/RequestLimit;
       4: invokevirtual #13                 // Method io/undertow/server/handlers/RequestLimit.getMaximumConcurrentRequests:()I
       7: invokedynamic #14,  0             // InvokeDynamic #0:makeConcatWithConstants:(I)Ljava/lang/String;
      12: areturn
}
