Compiled from "AccessControlListHandler.java"
class io.undertow.server.handlers.AccessControlListHandler$Wrapper implements io.undertow.server.HandlerWrapper {
  private final java.util.List<io.undertow.server.handlers.AccessControlListHandler$AclMatch> peerMatches;

  private final boolean defaultAllow;

  private final io.undertow.attribute.ExchangeAttribute attribute;

  private io.undertow.server.handlers.AccessControlListHandler$Wrapper(java.util.List<io.undertow.server.handlers.AccessControlListHandler$AclMatch>, boolean, io.undertow.attribute.ExchangeAttribute);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field peerMatches:Ljava/util/List;
       9: aload_0
      10: iload_2
      11: putfield      #3                  // Field defaultAllow:Z
      14: aload_0
      15: aload_3
      16: putfield      #4                  // Field attribute:Lio/undertow/attribute/ExchangeAttribute;
      19: return

  public io.undertow.server.HttpHandler wrap(io.undertow.server.HttpHandler);
    Code:
       0: new           #5                  // class io/undertow/server/handlers/AccessControlListHandler
       3: dup
       4: aload_1
       5: aload_0
       6: getfield      #4                  // Field attribute:Lio/undertow/attribute/ExchangeAttribute;
       9: invokespecial #6                  // Method io/undertow/server/handlers/AccessControlListHandler."<init>":(Lio/undertow/server/HttpHandler;Lio/undertow/attribute/ExchangeAttribute;)V
      12: astore_2
      13: aload_0
      14: getfield      #2                  // Field peerMatches:Ljava/util/List;
      17: invokeinterface #7,  1            // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      22: astore_3
      23: aload_3
      24: invokeinterface #8,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z
      29: ifeq          83
      32: aload_3
      33: invokeinterface #9,  1            // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      38: checkcast     #10                 // class io/undertow/server/handlers/AccessControlListHandler$AclMatch
      41: astore        4
      43: aload         4
      45: getfield      #11                 // Field io/undertow/server/handlers/AccessControlListHandler$AclMatch.deny:Z
      48: ifeq          67
      51: aload_2
      52: aload         4
      54: getfield      #12                 // Field io/undertow/server/handlers/AccessControlListHandler$AclMatch.pattern:Ljava/util/regex/Pattern;
      57: invokevirtual #13                 // Method java/util/regex/Pattern.pattern:()Ljava/lang/String;
      60: invokevirtual #14                 // Method io/undertow/server/handlers/AccessControlListHandler.addDeny:(Ljava/lang/String;)Lio/undertow/server/handlers/AccessControlListHandler;
      63: pop
      64: goto          80
      67: aload_2
      68: aload         4
      70: getfield      #12                 // Field io/undertow/server/handlers/AccessControlListHandler$AclMatch.pattern:Ljava/util/regex/Pattern;
      73: invokevirtual #13                 // Method java/util/regex/Pattern.pattern:()Ljava/lang/String;
      76: invokevirtual #15                 // Method io/undertow/server/handlers/AccessControlListHandler.addAllow:(Ljava/lang/String;)Lio/undertow/server/handlers/AccessControlListHandler;
      79: pop
      80: goto          23
      83: aload_2
      84: aload_0
      85: getfield      #3                  // Field defaultAllow:Z
      88: invokevirtual #16                 // Method io/undertow/server/handlers/AccessControlListHandler.setDefaultAllow:(Z)Lio/undertow/server/handlers/AccessControlListHandler;
      91: pop
      92: aload_2
      93: areturn
}
