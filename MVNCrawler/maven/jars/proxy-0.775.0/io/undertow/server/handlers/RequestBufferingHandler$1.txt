Compiled from "RequestBufferingHandler.java"
class io.undertow.server.handlers.RequestBufferingHandler$1 implements org.xnio.ChannelListener<org.xnio.channels.StreamSourceChannel> {
  io.undertow.connector.PooledByteBuffer buffer;

  int readBuffers;

  final io.undertow.connector.PooledByteBuffer val$finalBuffer;

  final int val$finalReadBuffers;

  final io.undertow.connector.PooledByteBuffer[] val$bufferedData;

  final io.undertow.server.HttpServerExchange val$exchange;

  final io.undertow.server.handlers.RequestBufferingHandler this$0;

  io.undertow.server.handlers.RequestBufferingHandler$1(io.undertow.server.handlers.RequestBufferingHandler, io.undertow.connector.PooledByteBuffer, int, io.undertow.connector.PooledByteBuffer[], io.undertow.server.HttpServerExchange);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lio/undertow/server/handlers/RequestBufferingHandler;
       5: aload_0
       6: aload_2
       7: putfield      #2                  // Field val$finalBuffer:Lio/undertow/connector/PooledByteBuffer;
      10: aload_0
      11: iload_3
      12: putfield      #3                  // Field val$finalReadBuffers:I
      15: aload_0
      16: aload         4
      18: putfield      #4                  // Field val$bufferedData:[Lio/undertow/connector/PooledByteBuffer;
      21: aload_0
      22: aload         5
      24: putfield      #5                  // Field val$exchange:Lio/undertow/server/HttpServerExchange;
      27: aload_0
      28: invokespecial #6                  // Method java/lang/Object."<init>":()V
      31: aload_0
      32: aload_0
      33: getfield      #2                  // Field val$finalBuffer:Lio/undertow/connector/PooledByteBuffer;
      36: putfield      #7                  // Field buffer:Lio/undertow/connector/PooledByteBuffer;
      39: aload_0
      40: aload_0
      41: getfield      #3                  // Field val$finalReadBuffers:I
      44: putfield      #8                  // Field readBuffers:I
      47: return

  public void handleEvent(org.xnio.channels.StreamSourceChannel);
    Code:
       0: aload_0
       1: getfield      #7                  // Field buffer:Lio/undertow/connector/PooledByteBuffer;
       4: invokeinterface #9,  1            // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
       9: astore_3
      10: aload_1
      11: aload_3
      12: invokeinterface #10,  2           // InterfaceMethod org/xnio/channels/StreamSourceChannel.read:(Ljava/nio/ByteBuffer;)I
      17: istore_2
      18: iload_2
      19: iconst_m1
      20: if_icmpne     111
      23: aload_3
      24: invokevirtual #11                 // Method java/nio/ByteBuffer.position:()I
      27: ifne          42
      30: aload_0
      31: getfield      #7                  // Field buffer:Lio/undertow/connector/PooledByteBuffer;
      34: invokeinterface #12,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
      39: goto          60
      42: aload_3
      43: invokevirtual #13                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;
      46: pop
      47: aload_0
      48: getfield      #4                  // Field val$bufferedData:[Lio/undertow/connector/PooledByteBuffer;
      51: aload_0
      52: getfield      #8                  // Field readBuffers:I
      55: aload_0
      56: getfield      #7                  // Field buffer:Lio/undertow/connector/PooledByteBuffer;
      59: aastore
      60: aload_0
      61: getfield      #5                  // Field val$exchange:Lio/undertow/server/HttpServerExchange;
      64: aload_0
      65: getfield      #4                  // Field val$bufferedData:[Lio/undertow/connector/PooledByteBuffer;
      68: invokestatic  #14                 // Method io/undertow/server/Connectors.ungetRequestBytes:(Lio/undertow/server/HttpServerExchange;[Lio/undertow/connector/PooledByteBuffer;)V
      71: aload_0
      72: getfield      #5                  // Field val$exchange:Lio/undertow/server/HttpServerExchange;
      75: invokestatic  #15                 // Method io/undertow/server/Connectors.resetRequestChannel:(Lio/undertow/server/HttpServerExchange;)V
      78: aload_1
      79: invokeinterface #16,  1           // InterfaceMethod org/xnio/channels/StreamSourceChannel.getReadSetter:()Lorg/xnio/ChannelListener$Setter;
      84: aconst_null
      85: invokeinterface #17,  2           // InterfaceMethod org/xnio/ChannelListener$Setter.set:(Lorg/xnio/ChannelListener;)V
      90: aload_1
      91: invokeinterface #18,  1           // InterfaceMethod org/xnio/channels/StreamSourceChannel.suspendReads:()V
      96: aload_0
      97: getfield      #1                  // Field this$0:Lio/undertow/server/handlers/RequestBufferingHandler;
     100: getfield      #19                 // Field io/undertow/server/handlers/RequestBufferingHandler.next:Lio/undertow/server/HttpHandler;
     103: aload_0
     104: getfield      #5                  // Field val$exchange:Lio/undertow/server/HttpServerExchange;
     107: invokestatic  #20                 // Method io/undertow/server/Connectors.executeRootHandler:(Lio/undertow/server/HttpHandler;Lio/undertow/server/HttpServerExchange;)V
     110: return
     111: iload_2
     112: ifne          116
     115: return
     116: aload_3
     117: invokevirtual #21                 // Method java/nio/ByteBuffer.hasRemaining:()Z
     120: ifne          232
     123: aload_3
     124: invokevirtual #13                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;
     127: pop
     128: aload_0
     129: getfield      #4                  // Field val$bufferedData:[Lio/undertow/connector/PooledByteBuffer;
     132: aload_0
     133: dup
     134: getfield      #8                  // Field readBuffers:I
     137: dup_x1
     138: iconst_1
     139: iadd
     140: putfield      #8                  // Field readBuffers:I
     143: aload_0
     144: getfield      #7                  // Field buffer:Lio/undertow/connector/PooledByteBuffer;
     147: aastore
     148: aload_0
     149: getfield      #8                  // Field readBuffers:I
     152: aload_0
     153: getfield      #1                  // Field this$0:Lio/undertow/server/handlers/RequestBufferingHandler;
     156: getfield      #22                 // Field io/undertow/server/handlers/RequestBufferingHandler.maxBuffers:I
     159: if_icmpne     213
     162: aload_0
     163: getfield      #5                  // Field val$exchange:Lio/undertow/server/HttpServerExchange;
     166: aload_0
     167: getfield      #4                  // Field val$bufferedData:[Lio/undertow/connector/PooledByteBuffer;
     170: invokestatic  #14                 // Method io/undertow/server/Connectors.ungetRequestBytes:(Lio/undertow/server/HttpServerExchange;[Lio/undertow/connector/PooledByteBuffer;)V
     173: aload_0
     174: getfield      #5                  // Field val$exchange:Lio/undertow/server/HttpServerExchange;
     177: invokestatic  #15                 // Method io/undertow/server/Connectors.resetRequestChannel:(Lio/undertow/server/HttpServerExchange;)V
     180: aload_1
     181: invokeinterface #16,  1           // InterfaceMethod org/xnio/channels/StreamSourceChannel.getReadSetter:()Lorg/xnio/ChannelListener$Setter;
     186: aconst_null
     187: invokeinterface #17,  2           // InterfaceMethod org/xnio/ChannelListener$Setter.set:(Lorg/xnio/ChannelListener;)V
     192: aload_1
     193: invokeinterface #18,  1           // InterfaceMethod org/xnio/channels/StreamSourceChannel.suspendReads:()V
     198: aload_0
     199: getfield      #1                  // Field this$0:Lio/undertow/server/handlers/RequestBufferingHandler;
     202: getfield      #19                 // Field io/undertow/server/handlers/RequestBufferingHandler.next:Lio/undertow/server/HttpHandler;
     205: aload_0
     206: getfield      #5                  // Field val$exchange:Lio/undertow/server/HttpServerExchange;
     209: invokestatic  #20                 // Method io/undertow/server/Connectors.executeRootHandler:(Lio/undertow/server/HttpHandler;Lio/undertow/server/HttpServerExchange;)V
     212: return
     213: aload_0
     214: aload_0
     215: getfield      #5                  // Field val$exchange:Lio/undertow/server/HttpServerExchange;
     218: invokevirtual #23                 // Method io/undertow/server/HttpServerExchange.getConnection:()Lio/undertow/server/ServerConnection;
     221: invokevirtual #24                 // Method io/undertow/server/ServerConnection.getByteBufferPool:()Lio/undertow/connector/ByteBufferPool;
     224: invokeinterface #25,  1           // InterfaceMethod io/undertow/connector/ByteBufferPool.allocate:()Lio/undertow/connector/PooledByteBuffer;
     229: putfield      #7                  // Field buffer:Lio/undertow/connector/PooledByteBuffer;
     232: goto          0
     235: astore_2
     236: aload_2
     237: instanceof    #27                 // class java/io/IOException
     240: ifeq          258
     243: getstatic     #28                 // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
     246: aload_2
     247: checkcast     #27                 // class java/io/IOException
     250: invokeinterface #29,  2           // InterfaceMethod io/undertow/UndertowLogger.ioException:(Ljava/io/IOException;)V
     255: goto          267
     258: getstatic     #28                 // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
     261: aload_2
     262: invokeinterface #30,  2           // InterfaceMethod io/undertow/UndertowLogger.handleUnexpectedFailure:(Ljava/lang/Throwable;)V
     267: iconst_0
     268: istore_3
     269: iload_3
     270: aload_0
     271: getfield      #4                  // Field val$bufferedData:[Lio/undertow/connector/PooledByteBuffer;
     274: arraylength
     275: if_icmpge     293
     278: aload_0
     279: getfield      #4                  // Field val$bufferedData:[Lio/undertow/connector/PooledByteBuffer;
     282: iload_3
     283: aaload
     284: invokestatic  #31                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
     287: iinc          3, 1
     290: goto          269
     293: aload_0
     294: getfield      #7                  // Field buffer:Lio/undertow/connector/PooledByteBuffer;
     297: ifnull        319
     300: aload_0
     301: getfield      #7                  // Field buffer:Lio/undertow/connector/PooledByteBuffer;
     304: invokeinterface #32,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.isOpen:()Z
     309: ifeq          319
     312: aload_0
     313: getfield      #7                  // Field buffer:Lio/undertow/connector/PooledByteBuffer;
     316: invokestatic  #31                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
     319: aload_0
     320: getfield      #5                  // Field val$exchange:Lio/undertow/server/HttpServerExchange;
     323: invokevirtual #33                 // Method io/undertow/server/HttpServerExchange.endExchange:()Lio/undertow/server/HttpServerExchange;
     326: pop
     327: return
    Exception table:
       from    to  target type
           0   110   235   Class java/lang/Throwable
         111   115   235   Class java/lang/Throwable
         116   212   235   Class java/lang/Throwable
         213   235   235   Class java/lang/Throwable

  public void handleEvent(java.nio.channels.Channel);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #34                 // class org/xnio/channels/StreamSourceChannel
       5: invokevirtual #35                 // Method handleEvent:(Lorg/xnio/channels/StreamSourceChannel;)V
       8: return
}
