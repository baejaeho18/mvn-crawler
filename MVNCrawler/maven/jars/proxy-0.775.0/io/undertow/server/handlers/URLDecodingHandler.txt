Compiled from "URLDecodingHandler.java"
public class io.undertow.server.handlers.URLDecodingHandler implements io.undertow.server.HttpHandler {
  private static final java.lang.ThreadLocal<java.lang.StringBuilder> DECODING_BUFFER_CACHE;

  private static final io.undertow.util.AttachmentKey<java.lang.Object> ALREADY_DECODED;

  private final io.undertow.server.HttpHandler next;

  private final java.lang.String charset;

  public io.undertow.server.handlers.URLDecodingHandler(io.undertow.server.HttpHandler, java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field next:Lio/undertow/server/HttpHandler;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field charset:Ljava/lang/String;
      14: return

  public void handleRequest(io.undertow.server.HttpServerExchange) throws java.lang.Exception;
    Code:
       0: aload_1
       1: invokestatic  #4                  // Method shouldDecode:(Lio/undertow/server/HttpServerExchange;)Z
       4: ifeq          39
       7: aload_1
       8: invokestatic  #5                  // Method getStringBuilderForDecoding:(Lio/undertow/server/HttpServerExchange;)Ljava/lang/StringBuilder;
      11: astore_2
      12: aload_1
      13: aload_0
      14: getfield      #3                  // Field charset:Ljava/lang/String;
      17: aload_2
      18: invokestatic  #6                  // Method decodePath:(Lio/undertow/server/HttpServerExchange;Ljava/lang/String;Ljava/lang/StringBuilder;)V
      21: aload_1
      22: aload_0
      23: getfield      #3                  // Field charset:Ljava/lang/String;
      26: aload_2
      27: invokestatic  #7                  // Method decodeQueryString:(Lio/undertow/server/HttpServerExchange;Ljava/lang/String;Ljava/lang/StringBuilder;)V
      30: aload_1
      31: aload_0
      32: getfield      #3                  // Field charset:Ljava/lang/String;
      35: aload_2
      36: invokestatic  #8                  // Method decodePathTemplateMatch:(Lio/undertow/server/HttpServerExchange;Ljava/lang/String;Ljava/lang/StringBuilder;)V
      39: aload_0
      40: getfield      #2                  // Field next:Lio/undertow/server/HttpHandler;
      43: aload_1
      44: invokeinterface #9,  2            // InterfaceMethod io/undertow/server/HttpHandler.handleRequest:(Lio/undertow/server/HttpServerExchange;)V
      49: return

  private static boolean shouldDecode(io.undertow.server.HttpServerExchange);
    Code:
       0: aload_0
       1: invokevirtual #10                 // Method io/undertow/server/HttpServerExchange.getConnection:()Lio/undertow/server/ServerConnection;
       4: invokevirtual #11                 // Method io/undertow/server/ServerConnection.getUndertowOptions:()Lorg/xnio/OptionMap;
       7: getstatic     #12                 // Field io/undertow/UndertowOptions.DECODE_URL:Lorg/xnio/Option;
      10: iconst_1
      11: invokevirtual #13                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;Z)Z
      14: ifne          34
      17: aload_0
      18: getstatic     #14                 // Field ALREADY_DECODED:Lio/undertow/util/AttachmentKey;
      21: getstatic     #15                 // Field java/lang/Boolean.TRUE:Ljava/lang/Boolean;
      24: invokevirtual #16                 // Method io/undertow/server/HttpServerExchange.putAttachment:(Lio/undertow/util/AttachmentKey;Ljava/lang/Object;)Ljava/lang/Object;
      27: ifnonnull     34
      30: iconst_1
      31: goto          35
      34: iconst_0
      35: ireturn

  private static void decodePath(io.undertow.server.HttpServerExchange, java.lang.String, java.lang.StringBuilder);
    Code:
       0: aload_0
       1: invokevirtual #10                 // Method io/undertow/server/HttpServerExchange.getConnection:()Lio/undertow/server/ServerConnection;
       4: invokevirtual #11                 // Method io/undertow/server/ServerConnection.getUndertowOptions:()Lorg/xnio/OptionMap;
       7: invokestatic  #17                 // Method io/undertow/util/URLUtils.getSlashDecodingFlag:(Lorg/xnio/OptionMap;)Z
      10: istore_3
      11: aload_0
      12: aload_0
      13: invokevirtual #18                 // Method io/undertow/server/HttpServerExchange.getRequestPath:()Ljava/lang/String;
      16: aload_1
      17: iload_3
      18: iconst_0
      19: aload_2
      20: invokestatic  #19                 // Method io/undertow/util/URLUtils.decode:(Ljava/lang/String;Ljava/lang/String;ZZLjava/lang/StringBuilder;)Ljava/lang/String;
      23: invokevirtual #20                 // Method io/undertow/server/HttpServerExchange.setRequestPath:(Ljava/lang/String;)Lio/undertow/server/HttpServerExchange;
      26: pop
      27: aload_0
      28: aload_0
      29: invokevirtual #21                 // Method io/undertow/server/HttpServerExchange.getRelativePath:()Ljava/lang/String;
      32: aload_1
      33: iload_3
      34: iconst_0
      35: aload_2
      36: invokestatic  #19                 // Method io/undertow/util/URLUtils.decode:(Ljava/lang/String;Ljava/lang/String;ZZLjava/lang/StringBuilder;)Ljava/lang/String;
      39: invokevirtual #22                 // Method io/undertow/server/HttpServerExchange.setRelativePath:(Ljava/lang/String;)Lio/undertow/server/HttpServerExchange;
      42: pop
      43: aload_0
      44: aload_0
      45: invokevirtual #23                 // Method io/undertow/server/HttpServerExchange.getResolvedPath:()Ljava/lang/String;
      48: aload_1
      49: iload_3
      50: iconst_0
      51: aload_2
      52: invokestatic  #19                 // Method io/undertow/util/URLUtils.decode:(Ljava/lang/String;Ljava/lang/String;ZZLjava/lang/StringBuilder;)Ljava/lang/String;
      55: invokevirtual #24                 // Method io/undertow/server/HttpServerExchange.setResolvedPath:(Ljava/lang/String;)Lio/undertow/server/HttpServerExchange;
      58: pop
      59: return

  private static void decodeQueryString(io.undertow.server.HttpServerExchange, java.lang.String, java.lang.StringBuilder);
    Code:
       0: aload_0
       1: invokevirtual #25                 // Method io/undertow/server/HttpServerExchange.getQueryString:()Ljava/lang/String;
       4: invokevirtual #26                 // Method java/lang/String.isEmpty:()Z
       7: ifne          185
      10: new           #27                 // class java/util/TreeMap
      13: dup
      14: invokespecial #28                 // Method java/util/TreeMap."<init>":()V
      17: astore_3
      18: aload_0
      19: invokevirtual #29                 // Method io/undertow/server/HttpServerExchange.getQueryParameters:()Ljava/util/Map;
      22: invokeinterface #30,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      27: invokeinterface #31,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      32: astore        4
      34: aload         4
      36: invokeinterface #32,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      41: ifeq          166
      44: aload         4
      46: invokeinterface #33,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      51: checkcast     #34                 // class java/util/Map$Entry
      54: astore        5
      56: new           #35                 // class java/util/ArrayDeque
      59: dup
      60: aload         5
      62: invokeinterface #36,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      67: checkcast     #37                 // class java/util/Deque
      70: invokeinterface #38,  1           // InterfaceMethod java/util/Deque.size:()I
      75: invokespecial #39                 // Method java/util/ArrayDeque."<init>":(I)V
      78: astore        6
      80: aload         5
      82: invokeinterface #36,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      87: checkcast     #37                 // class java/util/Deque
      90: invokeinterface #40,  1           // InterfaceMethod java/util/Deque.iterator:()Ljava/util/Iterator;
      95: astore        7
      97: aload         7
      99: invokeinterface #32,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     104: ifeq          139
     107: aload         7
     109: invokeinterface #33,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     114: checkcast     #41                 // class java/lang/String
     117: astore        8
     119: aload         6
     121: aload         8
     123: aload_1
     124: iconst_1
     125: iconst_1
     126: aload_2
     127: invokestatic  #19                 // Method io/undertow/util/URLUtils.decode:(Ljava/lang/String;Ljava/lang/String;ZZLjava/lang/StringBuilder;)Ljava/lang/String;
     130: invokeinterface #42,  2           // InterfaceMethod java/util/Deque.add:(Ljava/lang/Object;)Z
     135: pop
     136: goto          97
     139: aload_3
     140: aload         5
     142: invokeinterface #43,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
     147: checkcast     #41                 // class java/lang/String
     150: aload_1
     151: iconst_1
     152: iconst_1
     153: aload_2
     154: invokestatic  #19                 // Method io/undertow/util/URLUtils.decode:(Ljava/lang/String;Ljava/lang/String;ZZLjava/lang/StringBuilder;)Ljava/lang/String;
     157: aload         6
     159: invokevirtual #44                 // Method java/util/TreeMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     162: pop
     163: goto          34
     166: aload_0
     167: invokevirtual #29                 // Method io/undertow/server/HttpServerExchange.getQueryParameters:()Ljava/util/Map;
     170: invokeinterface #45,  1           // InterfaceMethod java/util/Map.clear:()V
     175: aload_0
     176: invokevirtual #29                 // Method io/undertow/server/HttpServerExchange.getQueryParameters:()Ljava/util/Map;
     179: aload_3
     180: invokeinterface #46,  2           // InterfaceMethod java/util/Map.putAll:(Ljava/util/Map;)V
     185: return

  private static void decodePathTemplateMatch(io.undertow.server.HttpServerExchange, java.lang.String, java.lang.StringBuilder);
    Code:
       0: aload_0
       1: getstatic     #47                 // Field io/undertow/util/PathTemplateMatch.ATTACHMENT_KEY:Lio/undertow/util/AttachmentKey;
       4: invokevirtual #48                 // Method io/undertow/server/HttpServerExchange.getAttachment:(Lio/undertow/util/AttachmentKey;)Ljava/lang/Object;
       7: checkcast     #49                 // class io/undertow/util/PathTemplateMatch
      10: astore_3
      11: aload_3
      12: ifnull        90
      15: aload_3
      16: invokevirtual #50                 // Method io/undertow/util/PathTemplateMatch.getParameters:()Ljava/util/Map;
      19: astore        4
      21: aload         4
      23: ifnull        90
      26: aload         4
      28: invokeinterface #30,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      33: invokeinterface #31,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      38: astore        5
      40: aload         5
      42: invokeinterface #32,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      47: ifeq          90
      50: aload         5
      52: invokeinterface #33,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      57: checkcast     #34                 // class java/util/Map$Entry
      60: astore        6
      62: aload         6
      64: aload         6
      66: invokeinterface #36,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      71: checkcast     #41                 // class java/lang/String
      74: aload_1
      75: iconst_1
      76: iconst_0
      77: aload_2
      78: invokestatic  #19                 // Method io/undertow/util/URLUtils.decode:(Ljava/lang/String;Ljava/lang/String;ZZLjava/lang/StringBuilder;)Ljava/lang/String;
      81: invokeinterface #51,  2           // InterfaceMethod java/util/Map$Entry.setValue:(Ljava/lang/Object;)Ljava/lang/Object;
      86: pop
      87: goto          40
      90: return

  private static java.lang.StringBuilder getStringBuilderForDecoding(io.undertow.server.HttpServerExchange);
    Code:
       0: aload_0
       1: invokevirtual #52                 // Method io/undertow/server/HttpServerExchange.isInIoThread:()Z
       4: ifeq          17
       7: getstatic     #53                 // Field DECODING_BUFFER_CACHE:Ljava/lang/ThreadLocal;
      10: invokevirtual #54                 // Method java/lang/ThreadLocal.get:()Ljava/lang/Object;
      13: checkcast     #55                 // class java/lang/StringBuilder
      16: areturn
      17: new           #55                 // class java/lang/StringBuilder
      20: dup
      21: invokespecial #56                 // Method java/lang/StringBuilder."<init>":()V
      24: areturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: getfield      #3                  // Field charset:Ljava/lang/String;
       4: invokedynamic #57,  0             // InvokeDynamic #0:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;
       9: areturn

  static {};
    Code:
       0: invokedynamic #58,  0             // InvokeDynamic #1:get:()Ljava/util/function/Supplier;
       5: invokestatic  #59                 // Method java/lang/ThreadLocal.withInitial:(Ljava/util/function/Supplier;)Ljava/lang/ThreadLocal;
       8: putstatic     #53                 // Field DECODING_BUFFER_CACHE:Ljava/lang/ThreadLocal;
      11: ldc           #60                 // class java/lang/Object
      13: invokestatic  #61                 // Method io/undertow/util/AttachmentKey.create:(Ljava/lang/Class;)Lio/undertow/util/AttachmentKey;
      16: putstatic     #14                 // Field ALREADY_DECODED:Lio/undertow/util/AttachmentKey;
      19: return
}
