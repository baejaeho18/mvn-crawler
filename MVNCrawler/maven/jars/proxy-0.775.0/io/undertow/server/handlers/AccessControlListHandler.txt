Compiled from "AccessControlListHandler.java"
public class io.undertow.server.handlers.AccessControlListHandler implements io.undertow.server.HttpHandler {
  private volatile io.undertow.server.HttpHandler next;

  private volatile boolean defaultAllow;

  private final io.undertow.attribute.ExchangeAttribute attribute;

  private final java.util.List<io.undertow.server.handlers.AccessControlListHandler$AclMatch> acl;

  public io.undertow.server.handlers.AccessControlListHandler(io.undertow.server.HttpHandler, io.undertow.attribute.ExchangeAttribute);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field defaultAllow:Z
       9: aload_0
      10: new           #3                  // class java/util/concurrent/CopyOnWriteArrayList
      13: dup
      14: invokespecial #4                  // Method java/util/concurrent/CopyOnWriteArrayList."<init>":()V
      17: putfield      #5                  // Field acl:Ljava/util/List;
      20: aload_0
      21: aload_1
      22: putfield      #6                  // Field next:Lio/undertow/server/HttpHandler;
      25: aload_0
      26: aload_2
      27: putfield      #7                  // Field attribute:Lio/undertow/attribute/ExchangeAttribute;
      30: return

  public io.undertow.server.handlers.AccessControlListHandler(io.undertow.attribute.ExchangeAttribute);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field defaultAllow:Z
       9: aload_0
      10: new           #3                  // class java/util/concurrent/CopyOnWriteArrayList
      13: dup
      14: invokespecial #4                  // Method java/util/concurrent/CopyOnWriteArrayList."<init>":()V
      17: putfield      #5                  // Field acl:Ljava/util/List;
      20: aload_0
      21: aload_1
      22: putfield      #7                  // Field attribute:Lio/undertow/attribute/ExchangeAttribute;
      25: aload_0
      26: getstatic     #8                  // Field io/undertow/server/handlers/ResponseCodeHandler.HANDLE_404:Lio/undertow/server/handlers/ResponseCodeHandler;
      29: putfield      #6                  // Field next:Lio/undertow/server/HttpHandler;
      32: return

  public void handleRequest(io.undertow.server.HttpServerExchange) throws java.lang.Exception;
    Code:
       0: aload_0
       1: getfield      #7                  // Field attribute:Lio/undertow/attribute/ExchangeAttribute;
       4: aload_1
       5: invokeinterface #9,  2            // InterfaceMethod io/undertow/attribute/ExchangeAttribute.readAttribute:(Lio/undertow/server/HttpServerExchange;)Ljava/lang/String;
      10: astore_2
      11: aload_0
      12: aload_2
      13: invokevirtual #10                 // Method isAllowed:(Ljava/lang/String;)Z
      16: ifeq          32
      19: aload_0
      20: getfield      #6                  // Field next:Lio/undertow/server/HttpHandler;
      23: aload_1
      24: invokeinterface #11,  2           // InterfaceMethod io/undertow/server/HttpHandler.handleRequest:(Lio/undertow/server/HttpServerExchange;)V
      29: goto          45
      32: aload_1
      33: sipush        403
      36: invokevirtual #13                 // Method io/undertow/server/HttpServerExchange.setStatusCode:(I)Lio/undertow/server/HttpServerExchange;
      39: pop
      40: aload_1
      41: invokevirtual #14                 // Method io/undertow/server/HttpServerExchange.endExchange:()Lio/undertow/server/HttpServerExchange;
      44: pop
      45: return

  boolean isAllowed(java.lang.String);
    Code:
       0: aload_1
       1: ifnull        57
       4: aload_0
       5: getfield      #5                  // Field acl:Ljava/util/List;
       8: invokeinterface #15,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      13: astore_2
      14: aload_2
      15: invokeinterface #16,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      20: ifeq          57
      23: aload_2
      24: invokeinterface #17,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      29: checkcast     #18                 // class io/undertow/server/handlers/AccessControlListHandler$AclMatch
      32: astore_3
      33: aload_3
      34: aload_1
      35: invokevirtual #19                 // Method io/undertow/server/handlers/AccessControlListHandler$AclMatch.matches:(Ljava/lang/String;)Z
      38: ifeq          54
      41: aload_3
      42: invokevirtual #20                 // Method io/undertow/server/handlers/AccessControlListHandler$AclMatch.isDeny:()Z
      45: ifne          52
      48: iconst_1
      49: goto          53
      52: iconst_0
      53: ireturn
      54: goto          14
      57: aload_0
      58: getfield      #2                  // Field defaultAllow:Z
      61: ireturn

  public boolean isDefaultAllow();
    Code:
       0: aload_0
       1: getfield      #2                  // Field defaultAllow:Z
       4: ireturn

  public io.undertow.server.handlers.AccessControlListHandler setDefaultAllow(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #2                  // Field defaultAllow:Z
       5: aload_0
       6: areturn

  public io.undertow.server.HttpHandler getNext();
    Code:
       0: aload_0
       1: getfield      #6                  // Field next:Lio/undertow/server/HttpHandler;
       4: areturn

  public io.undertow.server.handlers.AccessControlListHandler setNext(io.undertow.server.HttpHandler);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #6                  // Field next:Lio/undertow/server/HttpHandler;
       5: aload_0
       6: areturn

  public io.undertow.server.handlers.AccessControlListHandler addAllow(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: invokevirtual #21                 // Method addRule:(Ljava/lang/String;Z)Lio/undertow/server/handlers/AccessControlListHandler;
       6: areturn

  public io.undertow.server.handlers.AccessControlListHandler addDeny(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_1
       3: invokevirtual #21                 // Method addRule:(Ljava/lang/String;Z)Lio/undertow/server/handlers/AccessControlListHandler;
       6: areturn

  public io.undertow.server.handlers.AccessControlListHandler clearRules();
    Code:
       0: aload_0
       1: getfield      #5                  // Field acl:Ljava/util/List;
       4: invokeinterface #22,  1           // InterfaceMethod java/util/List.clear:()V
       9: aload_0
      10: areturn

  private io.undertow.server.handlers.AccessControlListHandler addRule(java.lang.String, boolean);
    Code:
       0: aload_0
       1: getfield      #5                  // Field acl:Ljava/util/List;
       4: new           #18                 // class io/undertow/server/handlers/AccessControlListHandler$AclMatch
       7: dup
       8: iload_2
       9: aload_1
      10: invokespecial #23                 // Method io/undertow/server/handlers/AccessControlListHandler$AclMatch."<init>":(ZLjava/lang/String;)V
      13: invokeinterface #24,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      18: pop
      19: aload_0
      20: areturn
}
