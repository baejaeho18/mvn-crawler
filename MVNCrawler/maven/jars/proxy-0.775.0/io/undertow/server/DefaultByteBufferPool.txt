Compiled from "DefaultByteBufferPool.java"
public class io.undertow.server.DefaultByteBufferPool implements io.undertow.connector.ByteBufferPool {
  private final java.lang.ThreadLocal<io.undertow.server.DefaultByteBufferPool$ThreadLocalData> threadLocalCache;

  private final java.util.List<java.lang.ref.WeakReference<io.undertow.server.DefaultByteBufferPool$ThreadLocalData>> threadLocalDataList;

  private final java.util.concurrent.ConcurrentLinkedQueue<java.nio.ByteBuffer> queue;

  private final boolean direct;

  private final int bufferSize;

  private final int maximumPoolSize;

  private final int threadLocalCacheSize;

  private final int leakDectionPercent;

  private int count;

  private volatile int currentQueueLength;

  private static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<io.undertow.server.DefaultByteBufferPool> currentQueueLengthUpdater;

  private volatile int reclaimedThreadLocals;

  private static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<io.undertow.server.DefaultByteBufferPool> reclaimedThreadLocalsUpdater;

  private volatile boolean closed;

  private final io.undertow.server.DefaultByteBufferPool arrayBackedPool;

  public io.undertow.server.DefaultByteBufferPool(boolean, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: iconst_m1
       4: bipush        12
       6: iconst_0
       7: invokespecial #1                  // Method "<init>":(ZIIII)V
      10: return

  public io.undertow.server.DefaultByteBufferPool(boolean, int, int, int, int);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #3                  // class java/lang/ThreadLocal
       8: dup
       9: invokespecial #4                  // Method java/lang/ThreadLocal."<init>":()V
      12: putfield      #5                  // Field threadLocalCache:Ljava/lang/ThreadLocal;
      15: aload_0
      16: new           #6                  // class java/util/ArrayList
      19: dup
      20: invokespecial #7                  // Method java/util/ArrayList."<init>":()V
      23: putfield      #8                  // Field threadLocalDataList:Ljava/util/List;
      26: aload_0
      27: new           #9                  // class java/util/concurrent/ConcurrentLinkedQueue
      30: dup
      31: invokespecial #10                 // Method java/util/concurrent/ConcurrentLinkedQueue."<init>":()V
      34: putfield      #11                 // Field queue:Ljava/util/concurrent/ConcurrentLinkedQueue;
      37: aload_0
      38: iconst_0
      39: putfield      #12                 // Field currentQueueLength:I
      42: aload_0
      43: iconst_0
      44: putfield      #13                 // Field reclaimedThreadLocals:I
      47: aload_0
      48: iload_1
      49: putfield      #14                 // Field direct:Z
      52: aload_0
      53: iload_2
      54: putfield      #15                 // Field bufferSize:I
      57: aload_0
      58: iload_3
      59: putfield      #16                 // Field maximumPoolSize:I
      62: aload_0
      63: iload         4
      65: putfield      #17                 // Field threadLocalCacheSize:I
      68: aload_0
      69: iload         5
      71: putfield      #18                 // Field leakDectionPercent:I
      74: iload_1
      75: ifeq          98
      78: aload_0
      79: new           #19                 // class io/undertow/server/DefaultByteBufferPool
      82: dup
      83: iconst_0
      84: iload_2
      85: iload_3
      86: iconst_0
      87: iload         5
      89: invokespecial #1                  // Method "<init>":(ZIIII)V
      92: putfield      #20                 // Field arrayBackedPool:Lio/undertow/server/DefaultByteBufferPool;
      95: goto          103
      98: aload_0
      99: aload_0
     100: putfield      #20                 // Field arrayBackedPool:Lio/undertow/server/DefaultByteBufferPool;
     103: return

  public io.undertow.server.DefaultByteBufferPool(boolean, int, int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: iload_3
       4: iload         4
       6: iconst_0
       7: invokespecial #1                  // Method "<init>":(ZIIII)V
      10: return

  public int getBufferSize();
    Code:
       0: aload_0
       1: getfield      #15                 // Field bufferSize:I
       4: ireturn

  public boolean isDirect();
    Code:
       0: aload_0
       1: getfield      #14                 // Field direct:Z
       4: ireturn

  public io.undertow.connector.PooledByteBuffer allocate();
    Code:
       0: aload_0
       1: getfield      #21                 // Field closed:Z
       4: ifeq          16
       7: getstatic     #22                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      10: invokeinterface #23,  1           // InterfaceMethod io/undertow/UndertowMessages.poolIsClosed:()Ljava/lang/IllegalStateException;
      15: athrow
      16: aconst_null
      17: astore_1
      18: aconst_null
      19: astore_2
      20: aload_0
      21: getfield      #17                 // Field threadLocalCacheSize:I
      24: ifle          130
      27: aload_0
      28: getfield      #5                  // Field threadLocalCache:Ljava/lang/ThreadLocal;
      31: invokevirtual #24                 // Method java/lang/ThreadLocal.get:()Ljava/lang/Object;
      34: checkcast     #25                 // class io/undertow/server/DefaultByteBufferPool$ThreadLocalData
      37: astore_2
      38: aload_2
      39: ifnull        56
      42: aload_2
      43: getfield      #26                 // Field io/undertow/server/DefaultByteBufferPool$ThreadLocalData.buffers:Ljava/util/ArrayDeque;
      46: invokevirtual #27                 // Method java/util/ArrayDeque.poll:()Ljava/lang/Object;
      49: checkcast     #28                 // class java/nio/ByteBuffer
      52: astore_1
      53: goto          130
      56: new           #25                 // class io/undertow/server/DefaultByteBufferPool$ThreadLocalData
      59: dup
      60: aload_0
      61: invokespecial #29                 // Method io/undertow/server/DefaultByteBufferPool$ThreadLocalData."<init>":(Lio/undertow/server/DefaultByteBufferPool;)V
      64: astore_2
      65: aload_0
      66: getfield      #8                  // Field threadLocalDataList:Ljava/util/List;
      69: dup
      70: astore_3
      71: monitorenter
      72: aload_0
      73: getfield      #21                 // Field closed:Z
      76: ifeq          88
      79: getstatic     #22                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      82: invokeinterface #23,  1           // InterfaceMethod io/undertow/UndertowMessages.poolIsClosed:()Ljava/lang/IllegalStateException;
      87: athrow
      88: aload_0
      89: invokevirtual #30                 // Method cleanupThreadLocalData:()V
      92: aload_0
      93: getfield      #8                  // Field threadLocalDataList:Ljava/util/List;
      96: new           #31                 // class java/lang/ref/WeakReference
      99: dup
     100: aload_2
     101: invokespecial #32                 // Method java/lang/ref/WeakReference."<init>":(Ljava/lang/Object;)V
     104: invokeinterface #33,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     109: pop
     110: aload_0
     111: getfield      #5                  // Field threadLocalCache:Ljava/lang/ThreadLocal;
     114: aload_2
     115: invokevirtual #34                 // Method java/lang/ThreadLocal.set:(Ljava/lang/Object;)V
     118: aload_3
     119: monitorexit
     120: goto          130
     123: astore        4
     125: aload_3
     126: monitorexit
     127: aload         4
     129: athrow
     130: aload_1
     131: ifnonnull     157
     134: aload_0
     135: getfield      #11                 // Field queue:Ljava/util/concurrent/ConcurrentLinkedQueue;
     138: invokevirtual #35                 // Method java/util/concurrent/ConcurrentLinkedQueue.poll:()Ljava/lang/Object;
     141: checkcast     #28                 // class java/nio/ByteBuffer
     144: astore_1
     145: aload_1
     146: ifnull        157
     149: getstatic     #36                 // Field currentQueueLengthUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     152: aload_0
     153: invokevirtual #37                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.decrementAndGet:(Ljava/lang/Object;)I
     156: pop
     157: aload_1
     158: ifnonnull     187
     161: aload_0
     162: getfield      #14                 // Field direct:Z
     165: ifeq          179
     168: aload_0
     169: getfield      #15                 // Field bufferSize:I
     172: invokestatic  #38                 // Method java/nio/ByteBuffer.allocateDirect:(I)Ljava/nio/ByteBuffer;
     175: astore_1
     176: goto          187
     179: aload_0
     180: getfield      #15                 // Field bufferSize:I
     183: invokestatic  #39                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;
     186: astore_1
     187: aload_2
     188: ifnull        212
     191: aload_2
     192: getfield      #40                 // Field io/undertow/server/DefaultByteBufferPool$ThreadLocalData.allocationDepth:I
     195: aload_0
     196: getfield      #17                 // Field threadLocalCacheSize:I
     199: if_icmpge     212
     202: aload_2
     203: dup
     204: getfield      #40                 // Field io/undertow/server/DefaultByteBufferPool$ThreadLocalData.allocationDepth:I
     207: iconst_1
     208: iadd
     209: putfield      #40                 // Field io/undertow/server/DefaultByteBufferPool$ThreadLocalData.allocationDepth:I
     212: aload_1
     213: invokevirtual #41                 // Method java/nio/ByteBuffer.clear:()Ljava/nio/ByteBuffer;
     216: pop
     217: new           #42                 // class io/undertow/server/DefaultByteBufferPool$DefaultPooledBuffer
     220: dup
     221: aload_0
     222: aload_1
     223: aload_0
     224: getfield      #18                 // Field leakDectionPercent:I
     227: ifne          234
     230: iconst_0
     231: goto          260
     234: aload_0
     235: dup
     236: getfield      #43                 // Field count:I
     239: iconst_1
     240: iadd
     241: dup_x1
     242: putfield      #43                 // Field count:I
     245: bipush        100
     247: irem
     248: aload_0
     249: getfield      #18                 // Field leakDectionPercent:I
     252: if_icmpge     259
     255: iconst_1
     256: goto          260
     259: iconst_0
     260: invokespecial #44                 // Method io/undertow/server/DefaultByteBufferPool$DefaultPooledBuffer."<init>":(Lio/undertow/server/DefaultByteBufferPool;Ljava/nio/ByteBuffer;Z)V
     263: areturn
    Exception table:
       from    to  target type
          72   120   123   any
         123   127   123   any

  public io.undertow.connector.ByteBufferPool getArrayBackedPool();
    Code:
       0: aload_0
       1: getfield      #20                 // Field arrayBackedPool:Lio/undertow/server/DefaultByteBufferPool;
       4: areturn

  private void cleanupThreadLocalData();
    Code:
       0: aload_0
       1: getfield      #8                  // Field threadLocalDataList:Ljava/util/List;
       4: invokeinterface #45,  1           // InterfaceMethod java/util/List.size:()I
       9: istore_1
      10: aload_0
      11: getfield      #13                 // Field reclaimedThreadLocals:I
      14: iload_1
      15: iconst_4
      16: idiv
      17: if_icmple     113
      20: iconst_0
      21: istore_2
      22: iconst_0
      23: istore_3
      24: iload_3
      25: iload_1
      26: if_icmpge     74
      29: aload_0
      30: getfield      #8                  // Field threadLocalDataList:Ljava/util/List;
      33: iload_3
      34: invokeinterface #46,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      39: checkcast     #31                 // class java/lang/ref/WeakReference
      42: astore        4
      44: aload         4
      46: invokevirtual #47                 // Method java/lang/ref/WeakReference.get:()Ljava/lang/Object;
      49: ifnull        68
      52: aload_0
      53: getfield      #8                  // Field threadLocalDataList:Ljava/util/List;
      56: iload_2
      57: iinc          2, 1
      60: aload         4
      62: invokeinterface #48,  3           // InterfaceMethod java/util/List.set:(ILjava/lang/Object;)Ljava/lang/Object;
      67: pop
      68: iinc          3, 1
      71: goto          24
      74: iload_1
      75: iconst_1
      76: isub
      77: istore_3
      78: iload_3
      79: iload_2
      80: if_icmplt     100
      83: aload_0
      84: getfield      #8                  // Field threadLocalDataList:Ljava/util/List;
      87: iload_3
      88: invokeinterface #49,  2           // InterfaceMethod java/util/List.remove:(I)Ljava/lang/Object;
      93: pop
      94: iinc          3, -1
      97: goto          78
     100: getstatic     #50                 // Field reclaimedThreadLocalsUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     103: aload_0
     104: iconst_m1
     105: iload_1
     106: iload_2
     107: isub
     108: imul
     109: invokevirtual #51                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.addAndGet:(Ljava/lang/Object;I)I
     112: pop
     113: return

  private void freeInternal(java.nio.ByteBuffer);
    Code:
       0: aload_0
       1: getfield      #21                 // Field closed:Z
       4: ifeq          12
       7: aload_1
       8: invokestatic  #52                 // Method io/undertow/server/DirectByteBufferDeallocator.free:(Ljava/nio/ByteBuffer;)V
      11: return
      12: aload_0
      13: getfield      #5                  // Field threadLocalCache:Ljava/lang/ThreadLocal;
      16: invokevirtual #24                 // Method java/lang/ThreadLocal.get:()Ljava/lang/Object;
      19: checkcast     #25                 // class io/undertow/server/DefaultByteBufferPool$ThreadLocalData
      22: astore_2
      23: aload_2
      24: ifnull        68
      27: aload_2
      28: getfield      #40                 // Field io/undertow/server/DefaultByteBufferPool$ThreadLocalData.allocationDepth:I
      31: ifle          68
      34: aload_2
      35: dup
      36: getfield      #40                 // Field io/undertow/server/DefaultByteBufferPool$ThreadLocalData.allocationDepth:I
      39: iconst_1
      40: isub
      41: putfield      #40                 // Field io/undertow/server/DefaultByteBufferPool$ThreadLocalData.allocationDepth:I
      44: aload_2
      45: getfield      #26                 // Field io/undertow/server/DefaultByteBufferPool$ThreadLocalData.buffers:Ljava/util/ArrayDeque;
      48: invokevirtual #53                 // Method java/util/ArrayDeque.size:()I
      51: aload_0
      52: getfield      #17                 // Field threadLocalCacheSize:I
      55: if_icmpge     68
      58: aload_2
      59: getfield      #26                 // Field io/undertow/server/DefaultByteBufferPool$ThreadLocalData.buffers:Ljava/util/ArrayDeque;
      62: aload_1
      63: invokevirtual #54                 // Method java/util/ArrayDeque.add:(Ljava/lang/Object;)Z
      66: pop
      67: return
      68: aload_0
      69: aload_1
      70: invokevirtual #55                 // Method queueIfUnderMax:(Ljava/nio/ByteBuffer;)V
      73: return

  private void queueIfUnderMax(java.nio.ByteBuffer);
    Code:
       0: aload_0
       1: getfield      #12                 // Field currentQueueLength:I
       4: istore_2
       5: iload_2
       6: aload_0
       7: getfield      #16                 // Field maximumPoolSize:I
      10: if_icmple     18
      13: aload_1
      14: invokestatic  #52                 // Method io/undertow/server/DirectByteBufferDeallocator.free:(Ljava/nio/ByteBuffer;)V
      17: return
      18: getstatic     #36                 // Field currentQueueLengthUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      21: aload_0
      22: iload_2
      23: iload_2
      24: iconst_1
      25: iadd
      26: invokevirtual #56                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      29: ifeq          0
      32: aload_0
      33: getfield      #11                 // Field queue:Ljava/util/concurrent/ConcurrentLinkedQueue;
      36: aload_1
      37: invokevirtual #57                 // Method java/util/concurrent/ConcurrentLinkedQueue.add:(Ljava/lang/Object;)Z
      40: pop
      41: return

  public void close();
    Code:
       0: aload_0
       1: getfield      #21                 // Field closed:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: iconst_1
      10: putfield      #21                 // Field closed:Z
      13: aload_0
      14: getfield      #11                 // Field queue:Ljava/util/concurrent/ConcurrentLinkedQueue;
      17: invokevirtual #58                 // Method java/util/concurrent/ConcurrentLinkedQueue.clear:()V
      20: aload_0
      21: getfield      #8                  // Field threadLocalDataList:Ljava/util/List;
      24: dup
      25: astore_1
      26: monitorenter
      27: aload_0
      28: getfield      #8                  // Field threadLocalDataList:Ljava/util/List;
      31: invokeinterface #59,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      36: astore_2
      37: aload_2
      38: invokeinterface #60,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      43: ifeq          85
      46: aload_2
      47: invokeinterface #61,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      52: checkcast     #31                 // class java/lang/ref/WeakReference
      55: astore_3
      56: aload_3
      57: invokevirtual #47                 // Method java/lang/ref/WeakReference.get:()Ljava/lang/Object;
      60: checkcast     #25                 // class io/undertow/server/DefaultByteBufferPool$ThreadLocalData
      63: astore        4
      65: aload         4
      67: ifnull        78
      70: aload         4
      72: getfield      #26                 // Field io/undertow/server/DefaultByteBufferPool$ThreadLocalData.buffers:Ljava/util/ArrayDeque;
      75: invokevirtual #62                 // Method java/util/ArrayDeque.clear:()V
      78: aload_3
      79: invokevirtual #63                 // Method java/lang/ref/WeakReference.clear:()V
      82: goto          37
      85: aload_0
      86: getfield      #8                  // Field threadLocalDataList:Ljava/util/List;
      89: invokeinterface #64,  1           // InterfaceMethod java/util/List.clear:()V
      94: aload_1
      95: monitorexit
      96: goto          106
      99: astore        5
     101: aload_1
     102: monitorexit
     103: aload         5
     105: athrow
     106: return
    Exception table:
       from    to  target type
          27    96    99   any
          99   103    99   any

  protected void finalize() throws java.lang.Throwable;
    Code:
       0: aload_0
       1: invokevirtual #65                 // Method close:()V
       4: aload_0
       5: invokespecial #66                 // Method java/lang/Object.finalize:()V
       8: goto          18
      11: astore_1
      12: aload_0
      13: invokespecial #66                 // Method java/lang/Object.finalize:()V
      16: aload_1
      17: athrow
      18: return
    Exception table:
       from    to  target type
           0     4    11   any

  static {};
    Code:
       0: ldc           #19                 // class io/undertow/server/DefaultByteBufferPool
       2: ldc           #67                 // String currentQueueLength
       4: invokestatic  #68                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       7: putstatic     #36                 // Field currentQueueLengthUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: ldc           #19                 // class io/undertow/server/DefaultByteBufferPool
      12: ldc           #69                 // String reclaimedThreadLocals
      14: invokestatic  #68                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      17: putstatic     #50                 // Field reclaimedThreadLocalsUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      20: return
}
