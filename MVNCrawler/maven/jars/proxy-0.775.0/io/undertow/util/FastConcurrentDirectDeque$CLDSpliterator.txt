Compiled from "FastConcurrentDirectDeque.java"
final class io.undertow.util.FastConcurrentDirectDeque$CLDSpliterator implements java.util.Spliterator<E> {
  static final int MAX_BATCH;

  io.undertow.util.FastConcurrentDirectDeque$Node<E> current;

  int batch;

  boolean exhausted;

  final io.undertow.util.FastConcurrentDirectDeque this$0;

  io.undertow.util.FastConcurrentDirectDeque$CLDSpliterator(io.undertow.util.FastConcurrentDirectDeque);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lio/undertow/util/FastConcurrentDirectDeque;
       5: aload_0
       6: invokespecial #2                  // Method java/lang/Object."<init>":()V
       9: return

  public java.util.Spliterator<E> trySplit();
    Code:
       0: aload_0
       1: invokevirtual #3                  // Method current:()Lio/undertow/util/FastConcurrentDirectDeque$Node;
       4: dup
       5: astore_1
       6: ifnull        18
       9: aload_1
      10: getfield      #4                  // Field io/undertow/util/FastConcurrentDirectDeque$Node.next:Lio/undertow/util/FastConcurrentDirectDeque$Node;
      13: dup
      14: astore_2
      15: ifnonnull     20
      18: aconst_null
      19: areturn
      20: iconst_0
      21: istore_3
      22: aload_0
      23: aload_0
      24: getfield      #5                  // Field batch:I
      27: iconst_1
      28: iadd
      29: ldc           #7                  // int 33554432
      31: invokestatic  #8                  // Method java/lang/Math.min:(II)I
      34: dup_x1
      35: putfield      #5                  // Field batch:I
      38: istore        4
      40: aconst_null
      41: astore        5
      43: aload_1
      44: getfield      #9                  // Field io/undertow/util/FastConcurrentDirectDeque$Node.item:Ljava/lang/Object;
      47: dup
      48: astore        6
      50: ifnull        74
      53: aload         5
      55: ifnonnull     65
      58: iload         4
      60: anewarray     #10                 // class java/lang/Object
      63: astore        5
      65: aload         5
      67: iload_3
      68: iinc          3, 1
      71: aload         6
      73: aastore
      74: aload_1
      75: aload_2
      76: dup
      77: astore_1
      78: if_acmpne     89
      81: aload_0
      82: getfield      #1                  // Field this$0:Lio/undertow/util/FastConcurrentDirectDeque;
      85: invokevirtual #11                 // Method io/undertow/util/FastConcurrentDirectDeque.first:()Lio/undertow/util/FastConcurrentDirectDeque$Node;
      88: astore_1
      89: aload_1
      90: ifnull        108
      93: aload_1
      94: getfield      #4                  // Field io/undertow/util/FastConcurrentDirectDeque$Node.next:Lio/undertow/util/FastConcurrentDirectDeque$Node;
      97: dup
      98: astore_2
      99: ifnull        108
     102: iload_3
     103: iload         4
     105: if_icmplt     43
     108: aload_0
     109: aload_1
     110: invokevirtual #12                 // Method setCurrent:(Lio/undertow/util/FastConcurrentDirectDeque$Node;)V
     113: iload_3
     114: ifne          121
     117: aconst_null
     118: goto          131
     121: aload         5
     123: iconst_0
     124: iload_3
     125: sipush        4368
     128: invokestatic  #14                 // Method java/util/Spliterators.spliterator:([Ljava/lang/Object;III)Ljava/util/Spliterator;
     131: areturn

  public void forEachRemaining(java.util.function.Consumer<? super E>);
    Code:
       0: aload_1
       1: invokestatic  #15                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: aload_0
       6: invokevirtual #3                  // Method current:()Lio/undertow/util/FastConcurrentDirectDeque$Node;
       9: dup
      10: astore_2
      11: ifnull        62
      14: aload_0
      15: aconst_null
      16: putfield      #16                 // Field current:Lio/undertow/util/FastConcurrentDirectDeque$Node;
      19: aload_0
      20: iconst_1
      21: putfield      #17                 // Field exhausted:Z
      24: aload_2
      25: getfield      #9                  // Field io/undertow/util/FastConcurrentDirectDeque$Node.item:Ljava/lang/Object;
      28: dup
      29: astore_3
      30: ifnull        40
      33: aload_1
      34: aload_3
      35: invokeinterface #18,  2           // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V
      40: aload_2
      41: aload_2
      42: getfield      #4                  // Field io/undertow/util/FastConcurrentDirectDeque$Node.next:Lio/undertow/util/FastConcurrentDirectDeque$Node;
      45: dup
      46: astore_2
      47: if_acmpne     58
      50: aload_0
      51: getfield      #1                  // Field this$0:Lio/undertow/util/FastConcurrentDirectDeque;
      54: invokevirtual #11                 // Method io/undertow/util/FastConcurrentDirectDeque.first:()Lio/undertow/util/FastConcurrentDirectDeque$Node;
      57: astore_2
      58: aload_2
      59: ifnonnull     24
      62: return

  public boolean tryAdvance(java.util.function.Consumer<? super E>);
    Code:
       0: aload_1
       1: invokestatic  #15                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: aload_0
       6: invokevirtual #3                  // Method current:()Lio/undertow/util/FastConcurrentDirectDeque$Node;
       9: dup
      10: astore_2
      11: ifnull        63
      14: aload_2
      15: getfield      #9                  // Field io/undertow/util/FastConcurrentDirectDeque$Node.item:Ljava/lang/Object;
      18: astore_3
      19: aload_2
      20: aload_2
      21: getfield      #4                  // Field io/undertow/util/FastConcurrentDirectDeque$Node.next:Lio/undertow/util/FastConcurrentDirectDeque$Node;
      24: dup
      25: astore_2
      26: if_acmpne     37
      29: aload_0
      30: getfield      #1                  // Field this$0:Lio/undertow/util/FastConcurrentDirectDeque;
      33: invokevirtual #11                 // Method io/undertow/util/FastConcurrentDirectDeque.first:()Lio/undertow/util/FastConcurrentDirectDeque$Node;
      36: astore_2
      37: aload_3
      38: ifnonnull     45
      41: aload_2
      42: ifnonnull     14
      45: aload_0
      46: aload_2
      47: invokevirtual #12                 // Method setCurrent:(Lio/undertow/util/FastConcurrentDirectDeque$Node;)V
      50: aload_3
      51: ifnull        63
      54: aload_1
      55: aload_3
      56: invokeinterface #18,  2           // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V
      61: iconst_1
      62: ireturn
      63: iconst_0
      64: ireturn

  private void setCurrent(io.undertow.util.FastConcurrentDirectDeque$Node<E>);
    Code:
       0: aload_0
       1: aload_1
       2: dup_x1
       3: putfield      #16                 // Field current:Lio/undertow/util/FastConcurrentDirectDeque$Node;
       6: ifnonnull     14
       9: aload_0
      10: iconst_1
      11: putfield      #17                 // Field exhausted:Z
      14: return

  private io.undertow.util.FastConcurrentDirectDeque$Node<E> current();
    Code:
       0: aload_0
       1: getfield      #16                 // Field current:Lio/undertow/util/FastConcurrentDirectDeque$Node;
       4: dup
       5: astore_1
       6: ifnonnull     29
       9: aload_0
      10: getfield      #17                 // Field exhausted:Z
      13: ifne          29
      16: aload_0
      17: aload_0
      18: getfield      #1                  // Field this$0:Lio/undertow/util/FastConcurrentDirectDeque;
      21: invokevirtual #11                 // Method io/undertow/util/FastConcurrentDirectDeque.first:()Lio/undertow/util/FastConcurrentDirectDeque$Node;
      24: dup
      25: astore_1
      26: invokevirtual #12                 // Method setCurrent:(Lio/undertow/util/FastConcurrentDirectDeque$Node;)V
      29: aload_1
      30: areturn

  public long estimateSize();
    Code:
       0: ldc2_w        #20                 // long 9223372036854775807l
       3: lreturn

  public int characteristics();
    Code:
       0: sipush        4368
       3: ireturn
}
