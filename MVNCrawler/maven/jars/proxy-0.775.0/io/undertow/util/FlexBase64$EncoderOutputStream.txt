Compiled from "FlexBase64.java"
public class io.undertow.util.FlexBase64$EncoderOutputStream extends java.io.OutputStream {
  private final java.io.OutputStream output;

  private final byte[] buffer;

  private final io.undertow.util.FlexBase64$Encoder encoder;

  private int pos;

  private byte[] one;

  private io.undertow.util.FlexBase64$EncoderOutputStream(java.io.OutputStream);
    Code:
       0: aload_0
       1: aload_1
       2: sipush        8192
       5: iconst_1
       6: invokespecial #1                  // Method "<init>":(Ljava/io/OutputStream;IZ)V
       9: return

  private io.undertow.util.FlexBase64$EncoderOutputStream(java.io.OutputStream, int, boolean);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/io/OutputStream."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #3                  // Field pos:I
       9: aload_0
      10: aload_1
      11: putfield      #4                  // Field output:Ljava/io/OutputStream;
      14: aload_0
      15: iload_2
      16: newarray       byte
      18: putfield      #5                  // Field buffer:[B
      21: aload_0
      22: iload_3
      23: invokestatic  #6                  // Method io/undertow/util/FlexBase64.createEncoder:(Z)Lio/undertow/util/FlexBase64$Encoder;
      26: putfield      #7                  // Field encoder:Lio/undertow/util/FlexBase64$Encoder;
      29: return

  public void write(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #5                  // Field buffer:[B
       4: astore        4
       6: aload_0
       7: getfield      #7                  // Field encoder:Lio/undertow/util/FlexBase64$Encoder;
      10: astore        5
      12: aload_0
      13: getfield      #3                  // Field pos:I
      16: istore        6
      18: iload_2
      19: iload_3
      20: iadd
      21: istore        7
      23: iload_2
      24: istore        8
      26: iload         8
      28: iload         7
      30: if_icmpge     96
      33: aload         5
      35: aload_1
      36: iload         8
      38: iload         7
      40: aload         4
      42: iload         6
      44: aload         4
      46: arraylength
      47: invokevirtual #8                  // Method io/undertow/util/FlexBase64$Encoder.encode:([BII[BII)I
      50: istore        6
      52: aload         5
      54: invokevirtual #9                  // Method io/undertow/util/FlexBase64$Encoder.getLastInputPosition:()I
      57: istore        9
      59: iload         9
      61: iload         8
      63: if_icmpeq     74
      66: iload         6
      68: aload         4
      70: arraylength
      71: if_icmplt     89
      74: aload_0
      75: getfield      #4                  // Field output:Ljava/io/OutputStream;
      78: aload         4
      80: iconst_0
      81: iload         6
      83: invokevirtual #10                 // Method java/io/OutputStream.write:([BII)V
      86: iconst_0
      87: istore        6
      89: iload         9
      91: istore        8
      93: goto          26
      96: aload_0
      97: iload         6
      99: putfield      #3                  // Field pos:I
     102: return

  public void write(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #11                 // Field one:[B
       4: astore_2
       5: aload_2
       6: ifnonnull     18
       9: aload_0
      10: iconst_1
      11: newarray       byte
      13: dup
      14: astore_2
      15: putfield      #11                 // Field one:[B
      18: aload_2
      19: iconst_0
      20: iload_1
      21: i2b
      22: bastore
      23: aload_0
      24: aload_2
      25: iconst_0
      26: iconst_1
      27: invokevirtual #12                 // Method write:([BII)V
      30: return

  public void flush() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field output:Ljava/io/OutputStream;
       4: astore_1
       5: aload_1
       6: aload_0
       7: getfield      #5                  // Field buffer:[B
      10: iconst_0
      11: aload_0
      12: getfield      #3                  // Field pos:I
      15: invokevirtual #10                 // Method java/io/OutputStream.write:([BII)V
      18: aload_1
      19: invokevirtual #13                 // Method java/io/OutputStream.flush:()V
      22: return

  public void complete() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field output:Ljava/io/OutputStream;
       4: astore_1
       5: aload_0
       6: getfield      #5                  // Field buffer:[B
       9: astore_2
      10: aload_0
      11: getfield      #3                  // Field pos:I
      14: istore_3
      15: iconst_0
      16: istore        4
      18: aload_2
      19: arraylength
      20: iload_3
      21: isub
      22: aload_0
      23: getfield      #7                  // Field encoder:Lio/undertow/util/FlexBase64$Encoder;
      26: getfield      #14                 // Field io/undertow/util/FlexBase64$Encoder.wrap:Z
      29: ifeq          36
      32: iconst_2
      33: goto          37
      36: iconst_4
      37: if_icmplt     56
      40: aload_0
      41: aload_0
      42: getfield      #7                  // Field encoder:Lio/undertow/util/FlexBase64$Encoder;
      45: aload_2
      46: iload_3
      47: invokevirtual #15                 // Method io/undertow/util/FlexBase64$Encoder.complete:([BI)I
      50: putfield      #3                  // Field pos:I
      53: iconst_1
      54: istore        4
      56: aload_0
      57: invokevirtual #16                 // Method flush:()V
      60: iload         4
      62: ifne          88
      65: aload_0
      66: getfield      #7                  // Field encoder:Lio/undertow/util/FlexBase64$Encoder;
      69: aload_2
      70: iconst_0
      71: invokevirtual #15                 // Method io/undertow/util/FlexBase64$Encoder.complete:([BI)I
      74: istore        5
      76: aload_1
      77: aload_2
      78: iconst_0
      79: iload         5
      81: invokevirtual #10                 // Method java/io/OutputStream.write:([BII)V
      84: aload_1
      85: invokevirtual #13                 // Method java/io/OutputStream.flush:()V
      88: return

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #17                 // Method complete:()V
       4: goto          8
       7: astore_1
       8: aload_0
       9: getfield      #4                  // Field output:Ljava/io/OutputStream;
      12: invokevirtual #13                 // Method java/io/OutputStream.flush:()V
      15: goto          19
      18: astore_1
      19: aload_0
      20: getfield      #4                  // Field output:Ljava/io/OutputStream;
      23: invokevirtual #19                 // Method java/io/OutputStream.close:()V
      26: return
    Exception table:
       from    to  target type
           0     4     7   Class java/io/IOException
           8    15    18   Class java/io/IOException
}
