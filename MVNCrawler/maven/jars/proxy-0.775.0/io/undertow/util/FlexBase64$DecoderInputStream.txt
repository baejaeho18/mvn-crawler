Compiled from "FlexBase64.java"
public class io.undertow.util.FlexBase64$DecoderInputStream extends java.io.InputStream {
  private final java.io.InputStream input;

  private final byte[] buffer;

  private final io.undertow.util.FlexBase64$Decoder decoder;

  private int pos;

  private int limit;

  private byte[] one;

  private io.undertow.util.FlexBase64$DecoderInputStream(java.io.InputStream);
    Code:
       0: aload_0
       1: aload_1
       2: sipush        8192
       5: invokespecial #1                  // Method "<init>":(Ljava/io/InputStream;I)V
       8: return

  private io.undertow.util.FlexBase64$DecoderInputStream(java.io.InputStream, int);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/io/InputStream."<init>":()V
       4: aload_0
       5: invokestatic  #3                  // Method io/undertow/util/FlexBase64.createDecoder:()Lio/undertow/util/FlexBase64$Decoder;
       8: putfield      #4                  // Field decoder:Lio/undertow/util/FlexBase64$Decoder;
      11: aload_0
      12: iconst_0
      13: putfield      #5                  // Field pos:I
      16: aload_0
      17: iconst_0
      18: putfield      #6                  // Field limit:I
      21: aload_0
      22: aload_1
      23: putfield      #7                  // Field input:Ljava/io/InputStream;
      26: aload_0
      27: iload_2
      28: newarray       byte
      30: putfield      #8                  // Field buffer:[B
      33: return

  private int fill() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #8                  // Field buffer:[B
       4: astore_1
       5: aload_0
       6: getfield      #7                  // Field input:Ljava/io/InputStream;
       9: aload_1
      10: iconst_0
      11: aload_1
      12: arraylength
      13: invokevirtual #9                  // Method java/io/InputStream.read:([BII)I
      16: istore_2
      17: aload_0
      18: iconst_0
      19: putfield      #5                  // Field pos:I
      22: aload_0
      23: iload_2
      24: putfield      #6                  // Field limit:I
      27: iload_2
      28: ireturn

  public int read(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #8                  // Field buffer:[B
       4: astore        4
       6: aload_0
       7: getfield      #5                  // Field pos:I
      10: istore        5
      12: aload_0
      13: getfield      #6                  // Field limit:I
      16: istore        6
      18: iconst_1
      19: istore        7
      21: iload         5
      23: iload         6
      25: if_icmplt     79
      28: iload_3
      29: aload         4
      31: arraylength
      32: if_icmple     62
      35: iload_3
      36: newarray       byte
      38: astore        4
      40: aload_0
      41: getfield      #7                  // Field input:Ljava/io/InputStream;
      44: aload         4
      46: iconst_0
      47: iload_3
      48: invokevirtual #9                  // Method java/io/InputStream.read:([BII)I
      51: istore        6
      53: iconst_0
      54: istore        5
      56: iconst_0
      57: istore        7
      59: goto          71
      62: aload_0
      63: invokevirtual #10                 // Method fill:()I
      66: istore        6
      68: iconst_0
      69: istore        5
      71: iload         6
      73: iconst_m1
      74: if_icmpne     79
      77: iconst_m1
      78: ireturn
      79: iload_3
      80: iload         5
      82: iadd
      83: istore        8
      85: iload         6
      87: iload         8
      89: if_icmple     97
      92: iload         8
      94: goto          99
      97: iload         6
      99: istore        6
     101: aload_0
     102: getfield      #4                  // Field decoder:Lio/undertow/util/FlexBase64$Decoder;
     105: aload         4
     107: iload         5
     109: iload         6
     111: aload_1
     112: iload_2
     113: iload_2
     114: iload_3
     115: iadd
     116: invokevirtual #11                 // Method io/undertow/util/FlexBase64$Decoder.decode:([BII[BII)I
     119: iload_2
     120: isub
     121: istore        9
     123: iload         7
     125: ifeq          139
     128: aload_0
     129: aload_0
     130: getfield      #4                  // Field decoder:Lio/undertow/util/FlexBase64$Decoder;
     133: invokevirtual #12                 // Method io/undertow/util/FlexBase64$Decoder.getLastInputPosition:()I
     136: putfield      #5                  // Field pos:I
     139: iload         9
     141: ifle          147
     144: iload         9
     146: ireturn
     147: goto          0

  public int read() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #13                 // Field one:[B
       4: astore_1
       5: aload_1
       6: ifnonnull     18
       9: aload_0
      10: iconst_1
      11: newarray       byte
      13: dup_x1
      14: putfield      #13                 // Field one:[B
      17: astore_1
      18: aload_0
      19: aload_1
      20: iconst_0
      21: iconst_1
      22: invokevirtual #14                 // Method read:([BII)I
      25: istore_2
      26: iload_2
      27: ifle          40
      30: aload_1
      31: iconst_0
      32: baload
      33: sipush        255
      36: iand
      37: goto          41
      40: iconst_m1
      41: ireturn

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #7                  // Field input:Ljava/io/InputStream;
       4: invokevirtual #15                 // Method java/io/InputStream.close:()V
       7: return
}
