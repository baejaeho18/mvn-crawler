Compiled from "SimpleObjectPool.java"
final class io.undertow.util.SimpleObjectPool$SimplePooledObject<T> implements io.undertow.util.PooledObject<T> {
  private static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<io.undertow.util.SimpleObjectPool$SimplePooledObject> closedUpdater;

  private volatile int closed;

  private final T object;

  private final io.undertow.util.SimpleObjectPool<T> objectPool;

  io.undertow.util.SimpleObjectPool$SimplePooledObject(T, io.undertow.util.SimpleObjectPool<T>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field object:Ljava/lang/Object;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field objectPool:Lio/undertow/util/SimpleObjectPool;
      14: return

  public T getObject();
    Code:
       0: getstatic     #4                  // Field closedUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #5                  // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.get:(Ljava/lang/Object;)I
       7: ifeq          19
      10: getstatic     #6                  // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      13: invokeinterface #7,  1            // InterfaceMethod io/undertow/UndertowMessages.objectIsClosed:()Ljava/lang/IllegalStateException;
      18: athrow
      19: aload_0
      20: getfield      #2                  // Field object:Ljava/lang/Object;
      23: areturn

  public void close();
    Code:
       0: getstatic     #4                  // Field closedUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: iconst_0
       5: iconst_1
       6: invokevirtual #8                  // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
       9: ifeq          61
      12: aload_0
      13: getfield      #3                  // Field objectPool:Lio/undertow/util/SimpleObjectPool;
      16: getfield      #9                  // Field io/undertow/util/SimpleObjectPool.recycler:Ljava/util/function/Consumer;
      19: aload_0
      20: getfield      #2                  // Field object:Ljava/lang/Object;
      23: invokeinterface #10,  2           // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V
      28: aload_0
      29: getfield      #3                  // Field objectPool:Lio/undertow/util/SimpleObjectPool;
      32: getfield      #11                 // Field io/undertow/util/SimpleObjectPool.pool:Ljava/util/concurrent/LinkedBlockingDeque;
      35: aload_0
      36: getfield      #2                  // Field object:Ljava/lang/Object;
      39: invokevirtual #12                 // Method java/util/concurrent/LinkedBlockingDeque.offer:(Ljava/lang/Object;)Z
      42: ifne          61
      45: aload_0
      46: getfield      #3                  // Field objectPool:Lio/undertow/util/SimpleObjectPool;
      49: getfield      #13                 // Field io/undertow/util/SimpleObjectPool.consumer:Ljava/util/function/Consumer;
      52: aload_0
      53: getfield      #2                  // Field object:Ljava/lang/Object;
      56: invokeinterface #10,  2           // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V
      61: return

  static {};
    Code:
       0: ldc           #14                 // class io/undertow/util/SimpleObjectPool$SimplePooledObject
       2: ldc           #15                 // String closed
       4: invokestatic  #16                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       7: putstatic     #4                  // Field closedUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: return
}
