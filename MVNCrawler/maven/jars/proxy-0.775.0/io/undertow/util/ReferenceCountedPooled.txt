Compiled from "ReferenceCountedPooled.java"
public class io.undertow.util.ReferenceCountedPooled implements io.undertow.connector.PooledByteBuffer {
  private final io.undertow.connector.PooledByteBuffer underlying;

  private volatile int referenceCount;

  boolean mainFreed;

  private java.nio.ByteBuffer slice;

  private final io.undertow.util.ReferenceCountedPooled$FreeNotifier freeNotifier;

  private static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<io.undertow.util.ReferenceCountedPooled> referenceCountUpdater;

  public io.undertow.util.ReferenceCountedPooled(io.undertow.connector.PooledByteBuffer, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: aconst_null
       4: invokespecial #1                  // Method "<init>":(Lio/undertow/connector/PooledByteBuffer;ILio/undertow/util/ReferenceCountedPooled$FreeNotifier;)V
       7: return

  public io.undertow.util.ReferenceCountedPooled(io.undertow.connector.PooledByteBuffer, int, io.undertow.util.ReferenceCountedPooled$FreeNotifier);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #3                  // Field mainFreed:Z
       9: aload_0
      10: aconst_null
      11: putfield      #4                  // Field slice:Ljava/nio/ByteBuffer;
      14: aload_0
      15: aload_1
      16: putfield      #5                  // Field underlying:Lio/undertow/connector/PooledByteBuffer;
      19: aload_0
      20: iload_2
      21: putfield      #6                  // Field referenceCount:I
      24: aload_0
      25: aload_3
      26: putfield      #7                  // Field freeNotifier:Lio/undertow/util/ReferenceCountedPooled$FreeNotifier;
      29: return

  public void close();
    Code:
       0: aload_0
       1: getfield      #3                  // Field mainFreed:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: iconst_1
      10: putfield      #3                  // Field mainFreed:Z
      13: aload_0
      14: invokevirtual #8                  // Method freeInternal:()V
      17: return

  public boolean isOpen();
    Code:
       0: aload_0
       1: getfield      #3                  // Field mainFreed:Z
       4: ifne          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public boolean isFreed();
    Code:
       0: aload_0
       1: getfield      #3                  // Field mainFreed:Z
       4: ireturn

  public boolean tryUnfree();
    Code:
       0: getstatic     #9                  // Field referenceCountUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #10                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.get:(Ljava/lang/Object;)I
       7: istore_1
       8: iload_1
       9: ifgt          14
      12: iconst_0
      13: ireturn
      14: getstatic     #9                  // Field referenceCountUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      17: aload_0
      18: iload_1
      19: iload_1
      20: iconst_1
      21: iadd
      22: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      25: ifeq          0
      28: aload_0
      29: getfield      #4                  // Field slice:Ljava/nio/ByteBuffer;
      32: ifnull        42
      35: aload_0
      36: getfield      #4                  // Field slice:Ljava/nio/ByteBuffer;
      39: goto          51
      42: aload_0
      43: getfield      #5                  // Field underlying:Lio/undertow/connector/PooledByteBuffer;
      46: invokeinterface #12,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
      51: astore_2
      52: aload_2
      53: aload_2
      54: invokevirtual #13                 // Method java/nio/ByteBuffer.limit:()I
      57: invokevirtual #14                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/ByteBuffer;
      60: pop
      61: aload_2
      62: aload_2
      63: invokevirtual #15                 // Method java/nio/ByteBuffer.capacity:()I
      66: invokevirtual #16                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/ByteBuffer;
      69: pop
      70: aload_0
      71: aload_2
      72: invokevirtual #17                 // Method java/nio/ByteBuffer.slice:()Ljava/nio/ByteBuffer;
      75: putfield      #4                  // Field slice:Ljava/nio/ByteBuffer;
      78: aload_0
      79: iconst_0
      80: putfield      #3                  // Field mainFreed:Z
      83: iconst_1
      84: ireturn

  private void freeInternal();
    Code:
       0: getstatic     #9                  // Field referenceCountUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #18                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.decrementAndGet:(Ljava/lang/Object;)I
       7: ifne          35
      10: aload_0
      11: getfield      #5                  // Field underlying:Lio/undertow/connector/PooledByteBuffer;
      14: invokeinterface #19,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
      19: aload_0
      20: getfield      #7                  // Field freeNotifier:Lio/undertow/util/ReferenceCountedPooled$FreeNotifier;
      23: ifnull        35
      26: aload_0
      27: getfield      #7                  // Field freeNotifier:Lio/undertow/util/ReferenceCountedPooled$FreeNotifier;
      30: invokeinterface #20,  1           // InterfaceMethod io/undertow/util/ReferenceCountedPooled$FreeNotifier.freed:()V
      35: return

  public java.nio.ByteBuffer getBuffer() throws java.lang.IllegalStateException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field mainFreed:Z
       4: ifeq          16
       7: getstatic     #21                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      10: invokeinterface #22,  1           // InterfaceMethod io/undertow/UndertowMessages.bufferAlreadyFreed:()Ljava/lang/IllegalStateException;
      15: athrow
      16: aload_0
      17: getfield      #4                  // Field slice:Ljava/nio/ByteBuffer;
      20: ifnull        28
      23: aload_0
      24: getfield      #4                  // Field slice:Ljava/nio/ByteBuffer;
      27: areturn
      28: aload_0
      29: getfield      #5                  // Field underlying:Lio/undertow/connector/PooledByteBuffer;
      32: invokeinterface #12,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
      37: areturn

  public io.undertow.connector.PooledByteBuffer createView(int);
    Code:
       0: aload_0
       1: invokevirtual #23                 // Method getBuffer:()Ljava/nio/ByteBuffer;
       4: invokevirtual #24                 // Method java/nio/ByteBuffer.duplicate:()Ljava/nio/ByteBuffer;
       7: astore_2
       8: aload_2
       9: aload_2
      10: invokevirtual #25                 // Method java/nio/ByteBuffer.position:()I
      13: iload_1
      14: iadd
      15: invokevirtual #16                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/ByteBuffer;
      18: pop
      19: aload_2
      20: invokevirtual #17                 // Method java/nio/ByteBuffer.slice:()Ljava/nio/ByteBuffer;
      23: astore_3
      24: aload_0
      25: invokevirtual #23                 // Method getBuffer:()Ljava/nio/ByteBuffer;
      28: invokevirtual #24                 // Method java/nio/ByteBuffer.duplicate:()Ljava/nio/ByteBuffer;
      31: astore        4
      33: aload         4
      35: aload         4
      37: invokevirtual #25                 // Method java/nio/ByteBuffer.position:()I
      40: iload_1
      41: iadd
      42: invokevirtual #14                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/ByteBuffer;
      45: pop
      46: aload         4
      48: invokevirtual #26                 // Method java/nio/ByteBuffer.remaining:()I
      51: istore        5
      53: aload         4
      55: aload         4
      57: invokevirtual #15                 // Method java/nio/ByteBuffer.capacity:()I
      60: invokevirtual #16                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/ByteBuffer;
      63: pop
      64: aload         4
      66: invokevirtual #17                 // Method java/nio/ByteBuffer.slice:()Ljava/nio/ByteBuffer;
      69: astore        4
      71: aload         4
      73: aload         4
      75: invokevirtual #25                 // Method java/nio/ByteBuffer.position:()I
      78: iload         5
      80: iadd
      81: invokevirtual #16                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/ByteBuffer;
      84: pop
      85: aload_0
      86: aload         4
      88: putfield      #4                  // Field slice:Ljava/nio/ByteBuffer;
      91: aload_0
      92: invokevirtual #27                 // Method increaseReferenceCount:()V
      95: new           #28                 // class io/undertow/util/ReferenceCountedPooled$1
      98: dup
      99: aload_0
     100: aload_3
     101: invokespecial #29                 // Method io/undertow/util/ReferenceCountedPooled$1."<init>":(Lio/undertow/util/ReferenceCountedPooled;Ljava/nio/ByteBuffer;)V
     104: areturn

  public io.undertow.connector.PooledByteBuffer createView();
    Code:
       0: aload_0
       1: aload_0
       2: invokevirtual #23                 // Method getBuffer:()Ljava/nio/ByteBuffer;
       5: invokevirtual #26                 // Method java/nio/ByteBuffer.remaining:()I
       8: invokevirtual #30                 // Method createView:(I)Lio/undertow/connector/PooledByteBuffer;
      11: areturn

  public void increaseReferenceCount();
    Code:
       0: getstatic     #9                  // Field referenceCountUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #10                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.get:(Ljava/lang/Object;)I
       7: istore_1
       8: iload_1
       9: ifne          21
      12: getstatic     #21                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      15: invokeinterface #31,  1           // InterfaceMethod io/undertow/UndertowMessages.objectWasFreed:()Ljava/lang/IllegalStateException;
      20: athrow
      21: getstatic     #9                  // Field referenceCountUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      24: aload_0
      25: iload_1
      26: iload_1
      27: iconst_1
      28: iadd
      29: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      32: ifeq          0
      35: return

  public java.lang.String toString();
    Code:
       0: aload_0
       1: getfield      #5                  // Field underlying:Lio/undertow/connector/PooledByteBuffer;
       4: aload_0
       5: getfield      #6                  // Field referenceCount:I
       8: aload_0
       9: getfield      #3                  // Field mainFreed:Z
      12: aload_0
      13: getfield      #4                  // Field slice:Ljava/nio/ByteBuffer;
      16: invokedynamic #32,  0             // InvokeDynamic #0:makeConcatWithConstants:(Lio/undertow/connector/PooledByteBuffer;IZLjava/nio/ByteBuffer;)Ljava/lang/String;
      21: areturn

  static {};
    Code:
       0: ldc           #33                 // class io/undertow/util/ReferenceCountedPooled
       2: ldc           #34                 // String referenceCount
       4: invokestatic  #35                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       7: putstatic     #9                  // Field referenceCountUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: return
}
