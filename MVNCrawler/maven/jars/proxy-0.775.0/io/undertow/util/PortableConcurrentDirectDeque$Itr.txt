Compiled from "PortableConcurrentDirectDeque.java"
class io.undertow.util.PortableConcurrentDirectDeque$Itr extends io.undertow.util.PortableConcurrentDirectDeque<E>.AbstractItr {
  final io.undertow.util.PortableConcurrentDirectDeque this$0;

  private io.undertow.util.PortableConcurrentDirectDeque$Itr(io.undertow.util.PortableConcurrentDirectDeque);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lio/undertow/util/PortableConcurrentDirectDeque;
       5: aload_0
       6: aload_1
       7: invokespecial #2                  // Method io/undertow/util/PortableConcurrentDirectDeque$AbstractItr."<init>":(Lio/undertow/util/PortableConcurrentDirectDeque;)V
      10: return

  io.undertow.util.PortableConcurrentDirectDeque$Node<E> startNode();
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lio/undertow/util/PortableConcurrentDirectDeque;
       4: invokevirtual #3                  // Method io/undertow/util/PortableConcurrentDirectDeque.first:()Lio/undertow/util/PortableConcurrentDirectDeque$Node;
       7: areturn

  io.undertow.util.PortableConcurrentDirectDeque$Node<E> nextNode(io.undertow.util.PortableConcurrentDirectDeque$Node<E>);
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lio/undertow/util/PortableConcurrentDirectDeque;
       4: aload_1
       5: invokevirtual #4                  // Method io/undertow/util/PortableConcurrentDirectDeque.succ:(Lio/undertow/util/PortableConcurrentDirectDeque$Node;)Lio/undertow/util/PortableConcurrentDirectDeque$Node;
       8: areturn
}
