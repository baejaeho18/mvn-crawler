Compiled from "PerMessageDeflateFunction.java"
public class io.undertow.websockets.extensions.PerMessageDeflateFunction implements io.undertow.websockets.extensions.ExtensionFunction {
  private static final byte[] TAIL;

  private final int deflaterLevel;

  private final boolean compressContextTakeover;

  private final boolean decompressContextTakeover;

  private final java.util.zip.Inflater decompress;

  private final java.util.zip.Deflater compress;

  private io.undertow.websockets.core.StreamSourceFrameChannel currentReadChannel;

  public io.undertow.websockets.extensions.PerMessageDeflateFunction(int, boolean, boolean);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iload_1
       6: putfield      #2                  // Field deflaterLevel:I
       9: aload_0
      10: new           #3                  // class java/util/zip/Inflater
      13: dup
      14: iconst_1
      15: invokespecial #4                  // Method java/util/zip/Inflater."<init>":(Z)V
      18: putfield      #5                  // Field decompress:Ljava/util/zip/Inflater;
      21: aload_0
      22: new           #6                  // class java/util/zip/Deflater
      25: dup
      26: aload_0
      27: getfield      #2                  // Field deflaterLevel:I
      30: iconst_1
      31: invokespecial #7                  // Method java/util/zip/Deflater."<init>":(IZ)V
      34: putfield      #8                  // Field compress:Ljava/util/zip/Deflater;
      37: aload_0
      38: iload_2
      39: putfield      #9                  // Field compressContextTakeover:Z
      42: aload_0
      43: iload_3
      44: putfield      #10                 // Field decompressContextTakeover:Z
      47: return

  public int writeRsv(int);
    Code:
       0: iload_1
       1: iconst_4
       2: ior
       3: ireturn

  public boolean hasExtensionOpCode();
    Code:
       0: iconst_0
       1: ireturn

  public synchronized io.undertow.connector.PooledByteBuffer transformForWrite(io.undertow.connector.PooledByteBuffer, io.undertow.websockets.core.StreamSinkFrameChannel, boolean) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokeinterface #12,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
       6: astore        4
       8: aconst_null
       9: astore        5
      11: aload         4
      13: invokevirtual #13                 // Method java/nio/ByteBuffer.hasArray:()Z
      16: ifeq          50
      19: aload_0
      20: getfield      #8                  // Field compress:Ljava/util/zip/Deflater;
      23: aload         4
      25: invokevirtual #14                 // Method java/nio/ByteBuffer.array:()[B
      28: aload         4
      30: invokevirtual #15                 // Method java/nio/ByteBuffer.arrayOffset:()I
      33: aload         4
      35: invokevirtual #16                 // Method java/nio/ByteBuffer.position:()I
      38: iadd
      39: aload         4
      41: invokevirtual #17                 // Method java/nio/ByteBuffer.remaining:()I
      44: invokevirtual #18                 // Method java/util/zip/Deflater.setInput:([BII)V
      47: goto          113
      50: aload_0
      51: aload         4
      53: aload_2
      54: invokevirtual #19                 // Method io/undertow/websockets/core/StreamSinkFrameChannel.getWebSocketChannel:()Lio/undertow/websockets/core/WebSocketChannel;
      57: invokevirtual #20                 // Method io/undertow/websockets/core/WebSocketChannel.getBufferPool:()Lio/undertow/connector/ByteBufferPool;
      60: invokevirtual #21                 // Method toArrayBacked:(Ljava/nio/ByteBuffer;Lio/undertow/connector/ByteBufferPool;)Lio/undertow/connector/PooledByteBuffer;
      63: astore        5
      65: aload_0
      66: getfield      #8                  // Field compress:Ljava/util/zip/Deflater;
      69: aload         5
      71: invokeinterface #12,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
      76: invokevirtual #14                 // Method java/nio/ByteBuffer.array:()[B
      79: aload         5
      81: invokeinterface #12,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
      86: invokevirtual #15                 // Method java/nio/ByteBuffer.arrayOffset:()I
      89: aload         5
      91: invokeinterface #12,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
      96: invokevirtual #16                 // Method java/nio/ByteBuffer.position:()I
      99: iadd
     100: aload         5
     102: invokeinterface #12,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
     107: invokevirtual #17                 // Method java/nio/ByteBuffer.remaining:()I
     110: invokevirtual #18                 // Method java/util/zip/Deflater.setInput:([BII)V
     113: aload_0
     114: aload_2
     115: invokevirtual #19                 // Method io/undertow/websockets/core/StreamSinkFrameChannel.getWebSocketChannel:()Lio/undertow/websockets/core/WebSocketChannel;
     118: iconst_0
     119: invokevirtual #22                 // Method allocateBufferWithArray:(Lio/undertow/websockets/core/WebSocketChannel;I)Lio/undertow/connector/PooledByteBuffer;
     122: astore        6
     124: aload         6
     126: invokeinterface #12,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
     131: astore        7
     133: iconst_1
     134: istore        8
     136: aload_0
     137: getfield      #8                  // Field compress:Ljava/util/zip/Deflater;
     140: invokevirtual #23                 // Method java/util/zip/Deflater.needsInput:()Z
     143: ifne          156
     146: aload_0
     147: getfield      #8                  // Field compress:Ljava/util/zip/Deflater;
     150: invokevirtual #24                 // Method java/util/zip/Deflater.finished:()Z
     153: ifeq          173
     156: aload         7
     158: invokevirtual #25                 // Method java/nio/ByteBuffer.hasRemaining:()Z
     161: ifeq          173
     164: iload         8
     166: ifeq          268
     169: iload_3
     170: ifeq          268
     173: iconst_0
     174: istore        8
     176: aload         7
     178: invokevirtual #25                 // Method java/nio/ByteBuffer.hasRemaining:()Z
     181: ifne          212
     184: aload_0
     185: aload         6
     187: aload_2
     188: invokevirtual #19                 // Method io/undertow/websockets/core/StreamSinkFrameChannel.getWebSocketChannel:()Lio/undertow/websockets/core/WebSocketChannel;
     191: aload         7
     193: invokevirtual #26                 // Method java/nio/ByteBuffer.capacity:()I
     196: iconst_2
     197: imul
     198: invokevirtual #27                 // Method largerBuffer:(Lio/undertow/connector/PooledByteBuffer;Lio/undertow/websockets/core/WebSocketChannel;I)Lio/undertow/connector/PooledByteBuffer;
     201: astore        6
     203: aload         6
     205: invokeinterface #12,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
     210: astore        7
     212: aload_0
     213: getfield      #8                  // Field compress:Ljava/util/zip/Deflater;
     216: aload         7
     218: invokevirtual #14                 // Method java/nio/ByteBuffer.array:()[B
     221: aload         7
     223: invokevirtual #15                 // Method java/nio/ByteBuffer.arrayOffset:()I
     226: aload         7
     228: invokevirtual #16                 // Method java/nio/ByteBuffer.position:()I
     231: iadd
     232: aload         7
     234: invokevirtual #17                 // Method java/nio/ByteBuffer.remaining:()I
     237: iload_3
     238: ifeq          245
     241: iconst_2
     242: goto          246
     245: iconst_0
     246: invokevirtual #28                 // Method java/util/zip/Deflater.deflate:([BIII)I
     249: istore        9
     251: aload         7
     253: aload         7
     255: invokevirtual #16                 // Method java/nio/ByteBuffer.position:()I
     258: iload         9
     260: iadd
     261: invokevirtual #29                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/ByteBuffer;
     264: pop
     265: goto          136
     268: iconst_2
     269: anewarray     #30                 // class java/io/Closeable
     272: dup
     273: iconst_0
     274: aload_1
     275: aastore
     276: dup
     277: iconst_1
     278: aload         5
     280: aastore
     281: invokestatic  #31                 // Method org/xnio/IoUtils.safeClose:([Ljava/io/Closeable;)V
     284: goto          308
     287: astore        10
     289: iconst_2
     290: anewarray     #30                 // class java/io/Closeable
     293: dup
     294: iconst_0
     295: aload_1
     296: aastore
     297: dup
     298: iconst_1
     299: aload         5
     301: aastore
     302: invokestatic  #31                 // Method org/xnio/IoUtils.safeClose:([Ljava/io/Closeable;)V
     305: aload         10
     307: athrow
     308: iload_3
     309: ifeq          333
     312: aload         7
     314: iconst_0
     315: invokevirtual #32                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;
     318: pop
     319: aload_0
     320: getfield      #9                  // Field compressContextTakeover:Z
     323: ifne          333
     326: aload_0
     327: getfield      #8                  // Field compress:Ljava/util/zip/Deflater;
     330: invokevirtual #33                 // Method java/util/zip/Deflater.reset:()V
     333: aload         7
     335: invokevirtual #34                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;
     338: pop
     339: aload         6
     341: areturn
    Exception table:
       from    to  target type
         136   268   287   any
         287   289   287   any

  private io.undertow.connector.PooledByteBuffer toArrayBacked(java.nio.ByteBuffer, io.undertow.connector.ByteBufferPool);
    Code:
       0: aload_2
       1: invokeinterface #35,  1           // InterfaceMethod io/undertow/connector/ByteBufferPool.getBufferSize:()I
       6: aload_1
       7: invokevirtual #17                 // Method java/nio/ByteBuffer.remaining:()I
      10: if_icmpge     28
      13: new           #36                 // class io/undertow/util/ImmediatePooledByteBuffer
      16: dup
      17: aload_1
      18: invokestatic  #37                 // Method org/xnio/Buffers.take:(Ljava/nio/ByteBuffer;)[B
      21: invokestatic  #38                 // Method java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;
      24: invokespecial #39                 // Method io/undertow/util/ImmediatePooledByteBuffer."<init>":(Ljava/nio/ByteBuffer;)V
      27: areturn
      28: aload_2
      29: invokeinterface #40,  1           // InterfaceMethod io/undertow/connector/ByteBufferPool.getArrayBackedPool:()Lio/undertow/connector/ByteBufferPool;
      34: invokeinterface #41,  1           // InterfaceMethod io/undertow/connector/ByteBufferPool.allocate:()Lio/undertow/connector/PooledByteBuffer;
      39: astore_3
      40: aload_3
      41: invokeinterface #12,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
      46: aload_1
      47: invokevirtual #42                 // Method java/nio/ByteBuffer.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;
      50: pop
      51: aload_3
      52: invokeinterface #12,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
      57: invokevirtual #34                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;
      60: pop
      61: aload_3
      62: areturn

  private io.undertow.connector.PooledByteBuffer largerBuffer(io.undertow.connector.PooledByteBuffer, io.undertow.websockets.core.WebSocketChannel, int);
    Code:
       0: aload_1
       1: invokeinterface #12,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
       6: astore        4
       8: aload         4
      10: invokevirtual #34                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;
      13: pop
      14: aload_0
      15: aload_2
      16: iload_3
      17: invokevirtual #22                 // Method allocateBufferWithArray:(Lio/undertow/websockets/core/WebSocketChannel;I)Lio/undertow/connector/PooledByteBuffer;
      20: astore        5
      22: aload         5
      24: invokeinterface #12,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
      29: aload         4
      31: invokevirtual #42                 // Method java/nio/ByteBuffer.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;
      34: pop
      35: aload_1
      36: invokeinterface #43,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
      41: aload         5
      43: areturn

  private io.undertow.connector.PooledByteBuffer allocateBufferWithArray(io.undertow.websockets.core.WebSocketChannel, int);
    Code:
       0: iload_2
       1: ifle          29
       4: iload_2
       5: aload_1
       6: invokevirtual #20                 // Method io/undertow/websockets/core/WebSocketChannel.getBufferPool:()Lio/undertow/connector/ByteBufferPool;
       9: invokeinterface #35,  1           // InterfaceMethod io/undertow/connector/ByteBufferPool.getBufferSize:()I
      14: if_icmple     29
      17: new           #36                 // class io/undertow/util/ImmediatePooledByteBuffer
      20: dup
      21: iload_2
      22: invokestatic  #44                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;
      25: invokespecial #39                 // Method io/undertow/util/ImmediatePooledByteBuffer."<init>":(Ljava/nio/ByteBuffer;)V
      28: areturn
      29: aload_1
      30: invokevirtual #20                 // Method io/undertow/websockets/core/WebSocketChannel.getBufferPool:()Lio/undertow/connector/ByteBufferPool;
      33: invokeinterface #40,  1           // InterfaceMethod io/undertow/connector/ByteBufferPool.getArrayBackedPool:()Lio/undertow/connector/ByteBufferPool;
      38: invokeinterface #41,  1           // InterfaceMethod io/undertow/connector/ByteBufferPool.allocate:()Lio/undertow/connector/PooledByteBuffer;
      43: areturn

  public synchronized io.undertow.connector.PooledByteBuffer transformForRead(io.undertow.connector.PooledByteBuffer, io.undertow.websockets.core.StreamSourceFrameChannel, boolean) throws java.io.IOException;
    Code:
       0: aload_2
       1: invokevirtual #45                 // Method io/undertow/websockets/core/StreamSourceFrameChannel.getRsv:()I
       4: iconst_4
       5: iand
       6: ifne          11
       9: aload_1
      10: areturn
      11: aload_0
      12: aload_2
      13: invokevirtual #46                 // Method io/undertow/websockets/core/StreamSourceFrameChannel.getWebSocketChannel:()Lio/undertow/websockets/core/WebSocketChannel;
      16: iconst_0
      17: invokevirtual #22                 // Method allocateBufferWithArray:(Lio/undertow/websockets/core/WebSocketChannel;I)Lio/undertow/connector/PooledByteBuffer;
      20: astore        4
      22: aconst_null
      23: astore        5
      25: aload_0
      26: getfield      #47                 // Field currentReadChannel:Lio/undertow/websockets/core/StreamSourceFrameChannel;
      29: ifnull        62
      32: aload_0
      33: getfield      #47                 // Field currentReadChannel:Lio/undertow/websockets/core/StreamSourceFrameChannel;
      36: aload_2
      37: if_acmpeq     62
      40: aload_0
      41: getfield      #5                  // Field decompress:Ljava/util/zip/Inflater;
      44: getstatic     #48                 // Field TAIL:[B
      47: invokevirtual #49                 // Method java/util/zip/Inflater.setInput:([B)V
      50: aload_0
      51: aload_2
      52: invokevirtual #46                 // Method io/undertow/websockets/core/StreamSourceFrameChannel.getWebSocketChannel:()Lio/undertow/websockets/core/WebSocketChannel;
      55: aload         4
      57: invokevirtual #50                 // Method decompress:(Lio/undertow/websockets/core/WebSocketChannel;Lio/undertow/connector/PooledByteBuffer;)Lio/undertow/connector/PooledByteBuffer;
      60: astore        4
      62: aload_1
      63: invokeinterface #12,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
      68: astore        6
      70: aload         6
      72: invokevirtual #13                 // Method java/nio/ByteBuffer.hasArray:()Z
      75: ifeq          109
      78: aload_0
      79: getfield      #5                  // Field decompress:Ljava/util/zip/Inflater;
      82: aload         6
      84: invokevirtual #14                 // Method java/nio/ByteBuffer.array:()[B
      87: aload         6
      89: invokevirtual #15                 // Method java/nio/ByteBuffer.arrayOffset:()I
      92: aload         6
      94: invokevirtual #16                 // Method java/nio/ByteBuffer.position:()I
      97: iadd
      98: aload         6
     100: invokevirtual #17                 // Method java/nio/ByteBuffer.remaining:()I
     103: invokevirtual #51                 // Method java/util/zip/Inflater.setInput:([BII)V
     106: goto          172
     109: aload_0
     110: aload         6
     112: aload_2
     113: invokevirtual #46                 // Method io/undertow/websockets/core/StreamSourceFrameChannel.getWebSocketChannel:()Lio/undertow/websockets/core/WebSocketChannel;
     116: invokevirtual #20                 // Method io/undertow/websockets/core/WebSocketChannel.getBufferPool:()Lio/undertow/connector/ByteBufferPool;
     119: invokevirtual #21                 // Method toArrayBacked:(Ljava/nio/ByteBuffer;Lio/undertow/connector/ByteBufferPool;)Lio/undertow/connector/PooledByteBuffer;
     122: astore        5
     124: aload_0
     125: getfield      #5                  // Field decompress:Ljava/util/zip/Inflater;
     128: aload         5
     130: invokeinterface #12,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
     135: invokevirtual #14                 // Method java/nio/ByteBuffer.array:()[B
     138: aload         5
     140: invokeinterface #12,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
     145: invokevirtual #15                 // Method java/nio/ByteBuffer.arrayOffset:()I
     148: aload         5
     150: invokeinterface #12,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
     155: invokevirtual #16                 // Method java/nio/ByteBuffer.position:()I
     158: iadd
     159: aload         5
     161: invokeinterface #12,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
     166: invokevirtual #17                 // Method java/nio/ByteBuffer.remaining:()I
     169: invokevirtual #51                 // Method java/util/zip/Inflater.setInput:([BII)V
     172: aload_0
     173: aload_2
     174: invokevirtual #46                 // Method io/undertow/websockets/core/StreamSourceFrameChannel.getWebSocketChannel:()Lio/undertow/websockets/core/WebSocketChannel;
     177: aload         4
     179: invokevirtual #50                 // Method decompress:(Lio/undertow/websockets/core/WebSocketChannel;Lio/undertow/connector/PooledByteBuffer;)Lio/undertow/connector/PooledByteBuffer;
     182: astore        4
     184: iconst_2
     185: anewarray     #30                 // class java/io/Closeable
     188: dup
     189: iconst_0
     190: aload         5
     192: aastore
     193: dup
     194: iconst_1
     195: aload_1
     196: aastore
     197: invokestatic  #31                 // Method org/xnio/IoUtils.safeClose:([Ljava/io/Closeable;)V
     200: goto          224
     203: astore        7
     205: iconst_2
     206: anewarray     #30                 // class java/io/Closeable
     209: dup
     210: iconst_0
     211: aload         5
     213: aastore
     214: dup
     215: iconst_1
     216: aload_1
     217: aastore
     218: invokestatic  #31                 // Method org/xnio/IoUtils.safeClose:([Ljava/io/Closeable;)V
     221: aload         7
     223: athrow
     224: iload_3
     225: ifeq          258
     228: aload_0
     229: getfield      #5                  // Field decompress:Ljava/util/zip/Inflater;
     232: getstatic     #48                 // Field TAIL:[B
     235: invokevirtual #49                 // Method java/util/zip/Inflater.setInput:([B)V
     238: aload_0
     239: aload_2
     240: invokevirtual #46                 // Method io/undertow/websockets/core/StreamSourceFrameChannel.getWebSocketChannel:()Lio/undertow/websockets/core/WebSocketChannel;
     243: aload         4
     245: invokevirtual #50                 // Method decompress:(Lio/undertow/websockets/core/WebSocketChannel;Lio/undertow/connector/PooledByteBuffer;)Lio/undertow/connector/PooledByteBuffer;
     248: astore        4
     250: aload_0
     251: aconst_null
     252: putfield      #47                 // Field currentReadChannel:Lio/undertow/websockets/core/StreamSourceFrameChannel;
     255: goto          263
     258: aload_0
     259: aload_2
     260: putfield      #47                 // Field currentReadChannel:Lio/undertow/websockets/core/StreamSourceFrameChannel;
     263: aload         4
     265: invokeinterface #12,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
     270: invokevirtual #34                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;
     273: pop
     274: aload         4
     276: areturn
    Exception table:
       from    to  target type
         172   184   203   any
         203   205   203   any

  private io.undertow.connector.PooledByteBuffer decompress(io.undertow.websockets.core.WebSocketChannel, io.undertow.connector.PooledByteBuffer) throws java.io.IOException;
    Code:
       0: aload_2
       1: invokeinterface #12,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
       6: astore_3
       7: aload_0
       8: getfield      #5                  // Field decompress:Ljava/util/zip/Inflater;
      11: invokevirtual #52                 // Method java/util/zip/Inflater.needsInput:()Z
      14: ifne          126
      17: aload_0
      18: getfield      #5                  // Field decompress:Ljava/util/zip/Inflater;
      21: invokevirtual #53                 // Method java/util/zip/Inflater.finished:()Z
      24: ifne          126
      27: aload_3
      28: invokevirtual #25                 // Method java/nio/ByteBuffer.hasRemaining:()Z
      31: ifne          54
      34: aload_0
      35: aload_2
      36: aload_1
      37: aload_3
      38: invokevirtual #26                 // Method java/nio/ByteBuffer.capacity:()I
      41: iconst_2
      42: imul
      43: invokevirtual #27                 // Method largerBuffer:(Lio/undertow/connector/PooledByteBuffer;Lio/undertow/websockets/core/WebSocketChannel;I)Lio/undertow/connector/PooledByteBuffer;
      46: astore_2
      47: aload_2
      48: invokeinterface #12,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
      53: astore_3
      54: aload_0
      55: getfield      #5                  // Field decompress:Ljava/util/zip/Inflater;
      58: aload_3
      59: invokevirtual #14                 // Method java/nio/ByteBuffer.array:()[B
      62: aload_3
      63: invokevirtual #15                 // Method java/nio/ByteBuffer.arrayOffset:()I
      66: aload_3
      67: invokevirtual #16                 // Method java/nio/ByteBuffer.position:()I
      70: iadd
      71: aload_3
      72: invokevirtual #17                 // Method java/nio/ByteBuffer.remaining:()I
      75: invokevirtual #54                 // Method java/util/zip/Inflater.inflate:([BII)I
      78: istore        4
      80: goto          111
      83: astore        5
      85: getstatic     #56                 // Field io/undertow/websockets/core/WebSocketLogger.EXTENSION_LOGGER:Lio/undertow/websockets/core/WebSocketLogger;
      88: aload         5
      90: invokevirtual #57                 // Method java/util/zip/DataFormatException.getMessage:()Ljava/lang/String;
      93: aload         5
      95: invokeinterface #58,  3           // InterfaceMethod io/undertow/websockets/core/WebSocketLogger.debug:(Ljava/lang/Object;Ljava/lang/Throwable;)V
     100: getstatic     #59                 // Field io/undertow/websockets/core/WebSocketMessages.MESSAGES:Lio/undertow/websockets/core/WebSocketMessages;
     103: aload         5
     105: invokeinterface #60,  2           // InterfaceMethod io/undertow/websockets/core/WebSocketMessages.badCompressedPayload:(Ljava/util/zip/DataFormatException;)Ljava/io/IOException;
     110: athrow
     111: aload_3
     112: aload_3
     113: invokevirtual #16                 // Method java/nio/ByteBuffer.position:()I
     116: iload         4
     118: iadd
     119: invokevirtual #29                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/ByteBuffer;
     122: pop
     123: goto          7
     126: aload_2
     127: areturn
    Exception table:
       from    to  target type
          54    80    83   Class java/util/zip/DataFormatException

  public void dispose();
    Code:
       0: aload_0
       1: getfield      #8                  // Field compress:Ljava/util/zip/Deflater;
       4: invokevirtual #61                 // Method java/util/zip/Deflater.end:()V
       7: aload_0
       8: getfield      #5                  // Field decompress:Ljava/util/zip/Inflater;
      11: invokevirtual #62                 // Method java/util/zip/Inflater.end:()V
      14: return

  static {};
    Code:
       0: iconst_4
       1: newarray       byte
       3: dup
       4: iconst_0
       5: iconst_0
       6: bastore
       7: dup
       8: iconst_1
       9: iconst_0
      10: bastore
      11: dup
      12: iconst_2
      13: iconst_m1
      14: bastore
      15: dup
      16: iconst_3
      17: iconst_m1
      18: bastore
      19: putstatic     #48                 // Field TAIL:[B
      22: return
}
