Compiled from "InflatingStreamSourceConduit.java"
public class io.undertow.conduits.InflatingStreamSourceConduit extends org.xnio.conduits.AbstractStreamSourceConduit<org.xnio.conduits.StreamSourceConduit> {
  public static final io.undertow.server.ConduitWrapper<org.xnio.conduits.StreamSourceConduit> WRAPPER;

  private volatile java.util.zip.Inflater inflater;

  private final io.undertow.util.PooledObject<java.util.zip.Inflater> pooledObject;

  private final io.undertow.server.HttpServerExchange exchange;

  private io.undertow.connector.PooledByteBuffer compressed;

  private io.undertow.connector.PooledByteBuffer uncompressed;

  private boolean nextDone;

  private boolean headerDone;

  public io.undertow.conduits.InflatingStreamSourceConduit(io.undertow.server.HttpServerExchange, org.xnio.conduits.StreamSourceConduit);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1                  // Method newInstanceInflaterPool:()Lio/undertow/util/ObjectPool;
       6: invokespecial #2                  // Method "<init>":(Lio/undertow/server/HttpServerExchange;Lorg/xnio/conduits/StreamSourceConduit;Lio/undertow/util/ObjectPool;)V
       9: return

  public io.undertow.conduits.InflatingStreamSourceConduit(io.undertow.server.HttpServerExchange, org.xnio.conduits.StreamSourceConduit, io.undertow.util.ObjectPool<java.util.zip.Inflater>);
    Code:
       0: aload_0
       1: aload_2
       2: invokespecial #3                  // Method org/xnio/conduits/AbstractStreamSourceConduit."<init>":(Lorg/xnio/conduits/StreamSourceConduit;)V
       5: aload_0
       6: iconst_0
       7: putfield      #4                  // Field nextDone:Z
      10: aload_0
      11: iconst_0
      12: putfield      #5                  // Field headerDone:Z
      15: aload_0
      16: aload_1
      17: putfield      #6                  // Field exchange:Lio/undertow/server/HttpServerExchange;
      20: aload_0
      21: aload_3
      22: invokeinterface #7,  1            // InterfaceMethod io/undertow/util/ObjectPool.allocate:()Lio/undertow/util/PooledObject;
      27: putfield      #8                  // Field pooledObject:Lio/undertow/util/PooledObject;
      30: aload_0
      31: aload_0
      32: getfield      #8                  // Field pooledObject:Lio/undertow/util/PooledObject;
      35: invokeinterface #9,  1            // InterfaceMethod io/undertow/util/PooledObject.getObject:()Ljava/lang/Object;
      40: checkcast     #10                 // class java/util/zip/Inflater
      43: putfield      #11                 // Field inflater:Ljava/util/zip/Inflater;
      46: return

  public static io.undertow.util.ObjectPool<java.util.zip.Inflater> newInstanceInflaterPool();
    Code:
       0: new           #12                 // class io/undertow/util/NewInstanceObjectPool
       3: dup
       4: invokedynamic #13,  0             // InvokeDynamic #0:get:()Ljava/util/function/Supplier;
       9: invokedynamic #14,  0             // InvokeDynamic #1:accept:()Ljava/util/function/Consumer;
      14: invokespecial #15                 // Method io/undertow/util/NewInstanceObjectPool."<init>":(Ljava/util/function/Supplier;Ljava/util/function/Consumer;)V
      17: areturn

  public static io.undertow.util.ObjectPool<java.util.zip.Inflater> simpleInflaterPool(int);
    Code:
       0: new           #16                 // class io/undertow/util/SimpleObjectPool
       3: dup
       4: iload_0
       5: invokedynamic #17,  0             // InvokeDynamic #2:get:()Ljava/util/function/Supplier;
      10: invokedynamic #18,  0             // InvokeDynamic #3:accept:()Ljava/util/function/Consumer;
      15: invokedynamic #14,  0             // InvokeDynamic #1:accept:()Ljava/util/function/Consumer;
      20: invokespecial #19                 // Method io/undertow/util/SimpleObjectPool."<init>":(ILjava/util/function/Supplier;Ljava/util/function/Consumer;Ljava/util/function/Consumer;)V
      23: areturn

  public int read(java.nio.ByteBuffer) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #20                 // Method isReadShutdown:()Z
       4: ifeq          15
       7: new           #21                 // class java/nio/channels/ClosedChannelException
      10: dup
      11: invokespecial #22                 // Method java/nio/channels/ClosedChannelException."<init>":()V
      14: athrow
      15: aload_0
      16: getfield      #23                 // Field uncompressed:Lio/undertow/connector/PooledByteBuffer;
      19: ifnull        67
      22: aload_1
      23: aload_0
      24: getfield      #23                 // Field uncompressed:Lio/undertow/connector/PooledByteBuffer;
      27: invokeinterface #24,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
      32: invokestatic  #25                 // Method org/xnio/Buffers.copy:(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)I
      35: istore_2
      36: aload_0
      37: getfield      #23                 // Field uncompressed:Lio/undertow/connector/PooledByteBuffer;
      40: invokeinterface #24,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
      45: invokevirtual #26                 // Method java/nio/ByteBuffer.hasRemaining:()Z
      48: ifne          65
      51: aload_0
      52: getfield      #23                 // Field uncompressed:Lio/undertow/connector/PooledByteBuffer;
      55: invokeinterface #27,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
      60: aload_0
      61: aconst_null
      62: putfield      #23                 // Field uncompressed:Lio/undertow/connector/PooledByteBuffer;
      65: iload_2
      66: ireturn
      67: aload_0
      68: getfield      #28                 // Field compressed:Lio/undertow/connector/PooledByteBuffer;
      71: ifnonnull     221
      74: aload_0
      75: getfield      #4                  // Field nextDone:Z
      78: ifne          221
      81: aload_0
      82: aload_0
      83: getfield      #6                  // Field exchange:Lio/undertow/server/HttpServerExchange;
      86: invokevirtual #29                 // Method io/undertow/server/HttpServerExchange.getConnection:()Lio/undertow/server/ServerConnection;
      89: invokevirtual #30                 // Method io/undertow/server/ServerConnection.getByteBufferPool:()Lio/undertow/connector/ByteBufferPool;
      92: invokeinterface #31,  1           // InterfaceMethod io/undertow/connector/ByteBufferPool.getArrayBackedPool:()Lio/undertow/connector/ByteBufferPool;
      97: invokeinterface #32,  1           // InterfaceMethod io/undertow/connector/ByteBufferPool.allocate:()Lio/undertow/connector/PooledByteBuffer;
     102: putfield      #28                 // Field compressed:Lio/undertow/connector/PooledByteBuffer;
     105: aload_0
     106: getfield      #28                 // Field compressed:Lio/undertow/connector/PooledByteBuffer;
     109: invokeinterface #24,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
     114: astore_2
     115: aload_0
     116: getfield      #33                 // Field next:Lorg/xnio/conduits/Conduit;
     119: checkcast     #34                 // class org/xnio/conduits/StreamSourceConduit
     122: aload_2
     123: invokeinterface #35,  2           // InterfaceMethod org/xnio/conduits/StreamSourceConduit.read:(Ljava/nio/ByteBuffer;)I
     128: istore_3
     129: iload_3
     130: iconst_m1
     131: if_icmpne     156
     134: aload_0
     135: iconst_1
     136: putfield      #4                  // Field nextDone:Z
     139: aload_0
     140: getfield      #28                 // Field compressed:Lio/undertow/connector/PooledByteBuffer;
     143: invokeinterface #27,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
     148: aload_0
     149: aconst_null
     150: putfield      #28                 // Field compressed:Lio/undertow/connector/PooledByteBuffer;
     153: goto          221
     156: iload_3
     157: ifne          176
     160: aload_0
     161: getfield      #28                 // Field compressed:Lio/undertow/connector/PooledByteBuffer;
     164: invokeinterface #27,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
     169: aload_0
     170: aconst_null
     171: putfield      #28                 // Field compressed:Lio/undertow/connector/PooledByteBuffer;
     174: iconst_0
     175: ireturn
     176: aload_2
     177: invokevirtual #36                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;
     180: pop
     181: aload_0
     182: getfield      #5                  // Field headerDone:Z
     185: ifne          197
     188: aload_0
     189: aload_0
     190: aload_2
     191: invokevirtual #37                 // Method readHeader:(Ljava/nio/ByteBuffer;)Z
     194: putfield      #5                  // Field headerDone:Z
     197: aload_0
     198: getfield      #11                 // Field inflater:Ljava/util/zip/Inflater;
     201: aload_2
     202: invokevirtual #38                 // Method java/nio/ByteBuffer.array:()[B
     205: aload_2
     206: invokevirtual #39                 // Method java/nio/ByteBuffer.arrayOffset:()I
     209: aload_2
     210: invokevirtual #40                 // Method java/nio/ByteBuffer.position:()I
     213: iadd
     214: aload_2
     215: invokevirtual #41                 // Method java/nio/ByteBuffer.remaining:()I
     218: invokevirtual #42                 // Method java/util/zip/Inflater.setInput:([BII)V
     221: aload_0
     222: getfield      #4                  // Field nextDone:Z
     225: ifeq          257
     228: aload_0
     229: getfield      #11                 // Field inflater:Ljava/util/zip/Inflater;
     232: invokevirtual #43                 // Method java/util/zip/Inflater.needsInput:()Z
     235: ifeq          257
     238: aload_0
     239: getfield      #11                 // Field inflater:Ljava/util/zip/Inflater;
     242: invokevirtual #44                 // Method java/util/zip/Inflater.finished:()Z
     245: ifne          257
     248: getstatic     #45                 // Field io/undertow/UndertowLogger.ROOT_LOGGER:Lio/undertow/UndertowLogger;
     251: invokeinterface #46,  1           // InterfaceMethod io/undertow/UndertowLogger.unexpectedEndOfCompressedInput:()Ljava/io/IOException;
     256: athrow
     257: aload_0
     258: getfield      #4                  // Field nextDone:Z
     261: ifeq          280
     264: aload_0
     265: getfield      #11                 // Field inflater:Ljava/util/zip/Inflater;
     268: invokevirtual #44                 // Method java/util/zip/Inflater.finished:()Z
     271: ifeq          280
     274: aload_0
     275: invokevirtual #47                 // Method done:()V
     278: iconst_m1
     279: ireturn
     280: aload_0
     281: getfield      #11                 // Field inflater:Ljava/util/zip/Inflater;
     284: invokevirtual #44                 // Method java/util/zip/Inflater.finished:()Z
     287: ifeq          404
     290: aload_0
     291: getfield      #28                 // Field compressed:Lio/undertow/connector/PooledByteBuffer;
     294: ifnull        404
     297: aload_0
     298: getfield      #11                 // Field inflater:Ljava/util/zip/Inflater;
     301: invokevirtual #48                 // Method java/util/zip/Inflater.getRemaining:()I
     304: istore_2
     305: aload_0
     306: getfield      #28                 // Field compressed:Lio/undertow/connector/PooledByteBuffer;
     309: invokeinterface #24,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
     314: astore_3
     315: aload_3
     316: aload_3
     317: invokevirtual #49                 // Method java/nio/ByteBuffer.limit:()I
     320: iload_2
     321: isub
     322: invokevirtual #50                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/ByteBuffer;
     325: pop
     326: aload_0
     327: aload_3
     328: invokevirtual #51                 // Method readFooter:(Ljava/nio/ByteBuffer;)V
     331: aload_3
     332: invokevirtual #52                 // Method java/nio/ByteBuffer.clear:()Ljava/nio/ByteBuffer;
     335: pop
     336: aload_0
     337: getfield      #33                 // Field next:Lorg/xnio/conduits/Conduit;
     340: checkcast     #34                 // class org/xnio/conduits/StreamSourceConduit
     343: aload_3
     344: invokeinterface #35,  2           // InterfaceMethod org/xnio/conduits/StreamSourceConduit.read:(Ljava/nio/ByteBuffer;)I
     349: istore        4
     351: aload_3
     352: invokevirtual #36                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;
     355: pop
     356: iload         4
     358: iconst_m1
     359: if_icmpne     373
     362: aload_0
     363: invokevirtual #47                 // Method done:()V
     366: aload_0
     367: iconst_1
     368: putfield      #4                  // Field nextDone:Z
     371: iconst_m1
     372: ireturn
     373: iload         4
     375: ifle          383
     378: aload_0
     379: aload_3
     380: invokevirtual #51                 // Method readFooter:(Ljava/nio/ByteBuffer;)V
     383: iload         4
     385: ifne          331
     388: aload_0
     389: getfield      #28                 // Field compressed:Lio/undertow/connector/PooledByteBuffer;
     392: invokeinterface #27,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
     397: aload_0
     398: aconst_null
     399: putfield      #28                 // Field compressed:Lio/undertow/connector/PooledByteBuffer;
     402: iconst_0
     403: ireturn
     404: aload_0
     405: getfield      #28                 // Field compressed:Lio/undertow/connector/PooledByteBuffer;
     408: ifnonnull     419
     411: new           #53                 // class java/lang/RuntimeException
     414: dup
     415: invokespecial #54                 // Method java/lang/RuntimeException."<init>":()V
     418: athrow
     419: aload_0
     420: aload_0
     421: getfield      #6                  // Field exchange:Lio/undertow/server/HttpServerExchange;
     424: invokevirtual #29                 // Method io/undertow/server/HttpServerExchange.getConnection:()Lio/undertow/server/ServerConnection;
     427: invokevirtual #30                 // Method io/undertow/server/ServerConnection.getByteBufferPool:()Lio/undertow/connector/ByteBufferPool;
     430: invokeinterface #31,  1           // InterfaceMethod io/undertow/connector/ByteBufferPool.getArrayBackedPool:()Lio/undertow/connector/ByteBufferPool;
     435: invokeinterface #32,  1           // InterfaceMethod io/undertow/connector/ByteBufferPool.allocate:()Lio/undertow/connector/PooledByteBuffer;
     440: putfield      #23                 // Field uncompressed:Lio/undertow/connector/PooledByteBuffer;
     443: aload_0
     444: getfield      #11                 // Field inflater:Ljava/util/zip/Inflater;
     447: aload_0
     448: getfield      #23                 // Field uncompressed:Lio/undertow/connector/PooledByteBuffer;
     451: invokeinterface #24,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
     456: invokevirtual #38                 // Method java/nio/ByteBuffer.array:()[B
     459: aload_0
     460: getfield      #23                 // Field uncompressed:Lio/undertow/connector/PooledByteBuffer;
     463: invokeinterface #24,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
     468: invokevirtual #39                 // Method java/nio/ByteBuffer.arrayOffset:()I
     471: aload_0
     472: getfield      #23                 // Field uncompressed:Lio/undertow/connector/PooledByteBuffer;
     475: invokeinterface #24,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
     480: invokevirtual #49                 // Method java/nio/ByteBuffer.limit:()I
     483: invokevirtual #55                 // Method java/util/zip/Inflater.inflate:([BII)I
     486: istore_2
     487: aload_0
     488: getfield      #23                 // Field uncompressed:Lio/undertow/connector/PooledByteBuffer;
     491: invokeinterface #24,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
     496: iload_2
     497: invokevirtual #56                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/ByteBuffer;
     500: pop
     501: aload_0
     502: aload_0
     503: getfield      #23                 // Field uncompressed:Lio/undertow/connector/PooledByteBuffer;
     506: invokeinterface #24,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
     511: invokevirtual #38                 // Method java/nio/ByteBuffer.array:()[B
     514: aload_0
     515: getfield      #23                 // Field uncompressed:Lio/undertow/connector/PooledByteBuffer;
     518: invokeinterface #24,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
     523: invokevirtual #39                 // Method java/nio/ByteBuffer.arrayOffset:()I
     526: iload_2
     527: invokevirtual #57                 // Method dataDeflated:([BII)V
     530: aload_0
     531: getfield      #11                 // Field inflater:Ljava/util/zip/Inflater;
     534: invokevirtual #43                 // Method java/util/zip/Inflater.needsInput:()Z
     537: ifeq          554
     540: aload_0
     541: getfield      #28                 // Field compressed:Lio/undertow/connector/PooledByteBuffer;
     544: invokeinterface #27,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
     549: aload_0
     550: aconst_null
     551: putfield      #28                 // Field compressed:Lio/undertow/connector/PooledByteBuffer;
     554: aload_1
     555: aload_0
     556: getfield      #23                 // Field uncompressed:Lio/undertow/connector/PooledByteBuffer;
     559: invokeinterface #24,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
     564: invokestatic  #25                 // Method org/xnio/Buffers.copy:(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)I
     567: istore_3
     568: aload_0
     569: getfield      #23                 // Field uncompressed:Lio/undertow/connector/PooledByteBuffer;
     572: invokeinterface #24,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
     577: invokevirtual #26                 // Method java/nio/ByteBuffer.hasRemaining:()Z
     580: ifne          597
     583: aload_0
     584: getfield      #23                 // Field uncompressed:Lio/undertow/connector/PooledByteBuffer;
     587: invokeinterface #27,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
     592: aload_0
     593: aconst_null
     594: putfield      #23                 // Field uncompressed:Lio/undertow/connector/PooledByteBuffer;
     597: iload_3
     598: ifle          603
     601: iload_3
     602: ireturn
     603: goto          67
     606: astore_2
     607: aload_0
     608: invokevirtual #47                 // Method done:()V
     611: new           #59                 // class java/io/IOException
     614: dup
     615: aload_2
     616: invokespecial #60                 // Method java/io/IOException."<init>":(Ljava/lang/Throwable;)V
     619: athrow
    Exception table:
       from    to  target type
         443   602   606   Class java/util/zip/DataFormatException

  protected void readFooter(java.nio.ByteBuffer) throws java.io.IOException;
    Code:
       0: return

  protected boolean readHeader(java.nio.ByteBuffer) throws java.io.IOException;
    Code:
       0: iconst_1
       1: ireturn

  protected void dataDeflated(byte[], int, int);
    Code:
       0: return

  private void done();
    Code:
       0: aload_0
       1: getfield      #28                 // Field compressed:Lio/undertow/connector/PooledByteBuffer;
       4: ifnull        16
       7: aload_0
       8: getfield      #28                 // Field compressed:Lio/undertow/connector/PooledByteBuffer;
      11: invokeinterface #27,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
      16: aload_0
      17: getfield      #23                 // Field uncompressed:Lio/undertow/connector/PooledByteBuffer;
      20: ifnull        32
      23: aload_0
      24: getfield      #23                 // Field uncompressed:Lio/undertow/connector/PooledByteBuffer;
      27: invokeinterface #27,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
      32: aload_0
      33: getfield      #11                 // Field inflater:Ljava/util/zip/Inflater;
      36: ifnull        53
      39: aload_0
      40: getfield      #8                  // Field pooledObject:Lio/undertow/util/PooledObject;
      43: invokeinterface #61,  1           // InterfaceMethod io/undertow/util/PooledObject.close:()V
      48: aload_0
      49: aconst_null
      50: putfield      #11                 // Field inflater:Ljava/util/zip/Inflater;
      53: return

  public long transferTo(long, long, java.nio.channels.FileChannel) throws java.io.IOException;
    Code:
       0: aload         5
       2: new           #62                 // class org/xnio/conduits/ConduitReadableByteChannel
       5: dup
       6: aload_0
       7: invokespecial #63                 // Method org/xnio/conduits/ConduitReadableByteChannel."<init>":(Lorg/xnio/conduits/StreamSourceConduit;)V
      10: lload_1
      11: lload_3
      12: invokevirtual #64                 // Method java/nio/channels/FileChannel.transferFrom:(Ljava/nio/channels/ReadableByteChannel;JJ)J
      15: lreturn
      16: astore        6
      18: aload_0
      19: getfield      #6                  // Field exchange:Lio/undertow/server/HttpServerExchange;
      22: invokevirtual #29                 // Method io/undertow/server/HttpServerExchange.getConnection:()Lio/undertow/server/ServerConnection;
      25: invokestatic  #66                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
      28: aload         6
      30: athrow
    Exception table:
       from    to  target type
           0    15    16   Class java/io/IOException
           0    15    16   Class java/lang/RuntimeException
           0    15    16   Class java/lang/Error

  public long transferTo(long, java.nio.ByteBuffer, org.xnio.channels.StreamSinkChannel) throws java.io.IOException;
    Code:
       0: new           #62                 // class org/xnio/conduits/ConduitReadableByteChannel
       3: dup
       4: aload_0
       5: invokespecial #63                 // Method org/xnio/conduits/ConduitReadableByteChannel."<init>":(Lorg/xnio/conduits/StreamSourceConduit;)V
       8: lload_1
       9: aload_3
      10: aload         4
      12: invokestatic  #67                 // Method org/xnio/IoUtils.transfer:(Ljava/nio/channels/ReadableByteChannel;JLjava/nio/ByteBuffer;Ljava/nio/channels/WritableByteChannel;)J
      15: lreturn
      16: astore        5
      18: aload_0
      19: getfield      #6                  // Field exchange:Lio/undertow/server/HttpServerExchange;
      22: invokevirtual #29                 // Method io/undertow/server/HttpServerExchange.getConnection:()Lio/undertow/server/ServerConnection;
      25: invokestatic  #66                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
      28: aload         5
      30: athrow
    Exception table:
       from    to  target type
           0    15    16   Class java/io/IOException
           0    15    16   Class java/lang/RuntimeException
           0    15    16   Class java/lang/Error

  public long read(java.nio.ByteBuffer[], int, int) throws java.io.IOException;
    Code:
       0: iload_2
       1: istore        4
       3: iload         4
       5: iload_3
       6: if_icmpge     35
       9: aload_1
      10: iload         4
      12: aaload
      13: invokevirtual #26                 // Method java/nio/ByteBuffer.hasRemaining:()Z
      16: ifeq          29
      19: aload_0
      20: aload_1
      21: iload         4
      23: aaload
      24: invokevirtual #68                 // Method read:(Ljava/nio/ByteBuffer;)I
      27: i2l
      28: lreturn
      29: iinc          4, 1
      32: goto          3
      35: lconst_0
      36: lreturn

  public void terminateReads() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #47                 // Method done:()V
       4: aload_0
       5: getfield      #33                 // Field next:Lorg/xnio/conduits/Conduit;
       8: checkcast     #34                 // class org/xnio/conduits/StreamSourceConduit
      11: invokeinterface #69,  1           // InterfaceMethod org/xnio/conduits/StreamSourceConduit.terminateReads:()V
      16: return

  private static java.util.zip.Inflater lambda$simpleInflaterPool$1();
    Code:
       0: new           #10                 // class java/util/zip/Inflater
       3: dup
       4: iconst_1
       5: invokespecial #70                 // Method java/util/zip/Inflater."<init>":(Z)V
       8: areturn

  private static java.util.zip.Inflater lambda$newInstanceInflaterPool$0();
    Code:
       0: new           #10                 // class java/util/zip/Inflater
       3: dup
       4: iconst_1
       5: invokespecial #70                 // Method java/util/zip/Inflater."<init>":(Z)V
       8: areturn

  static {};
    Code:
       0: new           #71                 // class io/undertow/conduits/InflatingStreamSourceConduit$1
       3: dup
       4: invokespecial #72                 // Method io/undertow/conduits/InflatingStreamSourceConduit$1."<init>":()V
       7: putstatic     #73                 // Field WRAPPER:Lio/undertow/server/ConduitWrapper;
      10: return
}
