Compiled from "Http2ClientConnection.java"
public class io.undertow.client.http2.Http2ClientConnection implements io.undertow.client.ClientConnection {
  private final io.undertow.protocols.http2.Http2Channel http2Channel;

  private final org.xnio.ChannelListener$SimpleSetter<io.undertow.client.ClientConnection> closeSetter;

  private final java.util.Map<java.lang.Integer, io.undertow.client.http2.Http2ClientExchange> currentExchanges;

  private static final java.util.concurrent.atomic.AtomicLong PING_COUNTER;

  private boolean initialUpgradeRequest;

  private final java.lang.String defaultHost;

  private final io.undertow.client.ClientStatistics clientStatistics;

  private final java.util.List<org.xnio.ChannelListener<io.undertow.client.ClientConnection>> closeListeners;

  private final boolean secure;

  private final java.util.Map<io.undertow.client.http2.Http2ClientConnection$PingKey, io.undertow.client.ClientConnection$PingListener> outstandingPings;

  private final org.xnio.ChannelListener<io.undertow.protocols.http2.Http2Channel> closeTask;

  public io.undertow.client.http2.Http2ClientConnection(io.undertow.protocols.http2.Http2Channel, boolean, java.lang.String, io.undertow.client.ClientStatistics, boolean);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class org/xnio/ChannelListener$SimpleSetter
       8: dup
       9: invokespecial #3                  // Method org/xnio/ChannelListener$SimpleSetter."<init>":()V
      12: putfield      #4                  // Field closeSetter:Lorg/xnio/ChannelListener$SimpleSetter;
      15: aload_0
      16: new           #5                  // class java/util/concurrent/ConcurrentHashMap
      19: dup
      20: invokespecial #6                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      23: putfield      #7                  // Field currentExchanges:Ljava/util/Map;
      26: aload_0
      27: new           #8                  // class java/util/concurrent/CopyOnWriteArrayList
      30: dup
      31: invokespecial #9                  // Method java/util/concurrent/CopyOnWriteArrayList."<init>":()V
      34: putfield      #10                 // Field closeListeners:Ljava/util/List;
      37: aload_0
      38: new           #11                 // class java/util/HashMap
      41: dup
      42: invokespecial #12                 // Method java/util/HashMap."<init>":()V
      45: putfield      #13                 // Field outstandingPings:Ljava/util/Map;
      48: aload_0
      49: new           #14                 // class io/undertow/client/http2/Http2ClientConnection$1
      52: dup
      53: aload_0
      54: invokespecial #15                 // Method io/undertow/client/http2/Http2ClientConnection$1."<init>":(Lio/undertow/client/http2/Http2ClientConnection;)V
      57: putfield      #16                 // Field closeTask:Lorg/xnio/ChannelListener;
      60: aload_0
      61: aload_1
      62: putfield      #17                 // Field http2Channel:Lio/undertow/protocols/http2/Http2Channel;
      65: aload_0
      66: aload_3
      67: putfield      #18                 // Field defaultHost:Ljava/lang/String;
      70: aload_0
      71: aload         4
      73: putfield      #19                 // Field clientStatistics:Lio/undertow/client/ClientStatistics;
      76: aload_0
      77: iload         5
      79: putfield      #20                 // Field secure:Z
      82: aload_1
      83: invokevirtual #21                 // Method io/undertow/protocols/http2/Http2Channel.getReceiveSetter:()Lorg/xnio/ChannelListener$Setter;
      86: new           #22                 // class io/undertow/client/http2/Http2ClientConnection$Http2ReceiveListener
      89: dup
      90: aload_0
      91: invokespecial #23                 // Method io/undertow/client/http2/Http2ClientConnection$Http2ReceiveListener."<init>":(Lio/undertow/client/http2/Http2ClientConnection;)V
      94: invokeinterface #24,  2           // InterfaceMethod org/xnio/ChannelListener$Setter.set:(Lorg/xnio/ChannelListener;)V
      99: aload_1
     100: invokevirtual #25                 // Method io/undertow/protocols/http2/Http2Channel.resumeReceives:()V
     103: aload_1
     104: aload_0
     105: getfield      #16                 // Field closeTask:Lorg/xnio/ChannelListener;
     108: invokevirtual #26                 // Method io/undertow/protocols/http2/Http2Channel.addCloseTask:(Lorg/xnio/ChannelListener;)V
     111: aload_0
     112: iload_2
     113: putfield      #27                 // Field initialUpgradeRequest:Z
     116: return

  public io.undertow.client.http2.Http2ClientConnection(io.undertow.protocols.http2.Http2Channel, io.undertow.client.ClientCallback<io.undertow.client.ClientExchange>, io.undertow.client.ClientRequest, java.lang.String, io.undertow.client.ClientStatistics, boolean);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class org/xnio/ChannelListener$SimpleSetter
       8: dup
       9: invokespecial #3                  // Method org/xnio/ChannelListener$SimpleSetter."<init>":()V
      12: putfield      #4                  // Field closeSetter:Lorg/xnio/ChannelListener$SimpleSetter;
      15: aload_0
      16: new           #5                  // class java/util/concurrent/ConcurrentHashMap
      19: dup
      20: invokespecial #6                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      23: putfield      #7                  // Field currentExchanges:Ljava/util/Map;
      26: aload_0
      27: new           #8                  // class java/util/concurrent/CopyOnWriteArrayList
      30: dup
      31: invokespecial #9                  // Method java/util/concurrent/CopyOnWriteArrayList."<init>":()V
      34: putfield      #10                 // Field closeListeners:Ljava/util/List;
      37: aload_0
      38: new           #11                 // class java/util/HashMap
      41: dup
      42: invokespecial #12                 // Method java/util/HashMap."<init>":()V
      45: putfield      #13                 // Field outstandingPings:Ljava/util/Map;
      48: aload_0
      49: new           #14                 // class io/undertow/client/http2/Http2ClientConnection$1
      52: dup
      53: aload_0
      54: invokespecial #15                 // Method io/undertow/client/http2/Http2ClientConnection$1."<init>":(Lio/undertow/client/http2/Http2ClientConnection;)V
      57: putfield      #16                 // Field closeTask:Lorg/xnio/ChannelListener;
      60: aload_0
      61: aload_1
      62: putfield      #17                 // Field http2Channel:Lio/undertow/protocols/http2/Http2Channel;
      65: aload_0
      66: aload         4
      68: putfield      #18                 // Field defaultHost:Ljava/lang/String;
      71: aload_0
      72: aload         5
      74: putfield      #19                 // Field clientStatistics:Lio/undertow/client/ClientStatistics;
      77: aload_0
      78: iload         6
      80: putfield      #20                 // Field secure:Z
      83: aload_1
      84: invokevirtual #21                 // Method io/undertow/protocols/http2/Http2Channel.getReceiveSetter:()Lorg/xnio/ChannelListener$Setter;
      87: new           #22                 // class io/undertow/client/http2/Http2ClientConnection$Http2ReceiveListener
      90: dup
      91: aload_0
      92: invokespecial #23                 // Method io/undertow/client/http2/Http2ClientConnection$Http2ReceiveListener."<init>":(Lio/undertow/client/http2/Http2ClientConnection;)V
      95: invokeinterface #24,  2           // InterfaceMethod org/xnio/ChannelListener$Setter.set:(Lorg/xnio/ChannelListener;)V
     100: aload_1
     101: invokevirtual #25                 // Method io/undertow/protocols/http2/Http2Channel.resumeReceives:()V
     104: aload_1
     105: aload_0
     106: getfield      #16                 // Field closeTask:Lorg/xnio/ChannelListener;
     109: invokevirtual #26                 // Method io/undertow/protocols/http2/Http2Channel.addCloseTask:(Lorg/xnio/ChannelListener;)V
     112: aload_0
     113: iconst_0
     114: putfield      #27                 // Field initialUpgradeRequest:Z
     117: new           #28                 // class io/undertow/client/http2/Http2ClientExchange
     120: dup
     121: aload_0
     122: aconst_null
     123: aload_3
     124: invokespecial #29                 // Method io/undertow/client/http2/Http2ClientExchange."<init>":(Lio/undertow/client/ClientConnection;Lio/undertow/protocols/http2/Http2StreamSinkChannel;Lio/undertow/client/ClientRequest;)V
     127: astore        7
     129: aload         7
     131: aload_2
     132: invokevirtual #30                 // Method io/undertow/client/http2/Http2ClientExchange.setResponseListener:(Lio/undertow/client/ClientCallback;)V
     135: aload_0
     136: getfield      #7                  // Field currentExchanges:Ljava/util/Map;
     139: iconst_1
     140: invokestatic  #31                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     143: aload         7
     145: invokeinterface #32,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     150: pop
     151: return

  public void sendRequest(io.undertow.client.ClientRequest, io.undertow.client.ClientCallback<io.undertow.client.ClientExchange>);
    Code:
       0: aload_0
       1: getfield      #17                 // Field http2Channel:Lio/undertow/protocols/http2/Http2Channel;
       4: invokevirtual #33                 // Method io/undertow/protocols/http2/Http2Channel.isOpen:()Z
       7: ifne          24
      10: aload_2
      11: new           #34                 // class java/nio/channels/ClosedChannelException
      14: dup
      15: invokespecial #35                 // Method java/nio/channels/ClosedChannelException."<init>":()V
      18: invokeinterface #36,  2           // InterfaceMethod io/undertow/client/ClientCallback.failed:(Ljava/io/IOException;)V
      23: return
      24: aload_1
      25: invokevirtual #37                 // Method io/undertow/client/ClientRequest.getRequestHeaders:()Lio/undertow/util/HeaderMap;
      28: getstatic     #38                 // Field io/undertow/protocols/http2/Http2Channel.METHOD:Lio/undertow/util/HttpString;
      31: aload_1
      32: invokevirtual #39                 // Method io/undertow/client/ClientRequest.getMethod:()Lio/undertow/util/HttpString;
      35: invokevirtual #40                 // Method io/undertow/util/HttpString.toString:()Ljava/lang/String;
      38: invokevirtual #41                 // Method io/undertow/util/HeaderMap.put:(Lio/undertow/util/HttpString;Ljava/lang/String;)Lio/undertow/util/HeaderMap;
      41: pop
      42: aload_1
      43: invokevirtual #39                 // Method io/undertow/client/ClientRequest.getMethod:()Lio/undertow/util/HttpString;
      46: getstatic     #42                 // Field io/undertow/util/Methods.CONNECT:Lio/undertow/util/HttpString;
      49: invokevirtual #43                 // Method io/undertow/util/HttpString.equals:(Lio/undertow/util/HttpString;)Z
      52: istore_3
      53: iload_3
      54: ifne          97
      57: aload_1
      58: invokevirtual #37                 // Method io/undertow/client/ClientRequest.getRequestHeaders:()Lio/undertow/util/HeaderMap;
      61: getstatic     #44                 // Field io/undertow/protocols/http2/Http2Channel.PATH:Lio/undertow/util/HttpString;
      64: aload_1
      65: invokevirtual #45                 // Method io/undertow/client/ClientRequest.getPath:()Ljava/lang/String;
      68: invokevirtual #41                 // Method io/undertow/util/HeaderMap.put:(Lio/undertow/util/HttpString;Ljava/lang/String;)Lio/undertow/util/HeaderMap;
      71: pop
      72: aload_1
      73: invokevirtual #37                 // Method io/undertow/client/ClientRequest.getRequestHeaders:()Lio/undertow/util/HeaderMap;
      76: getstatic     #46                 // Field io/undertow/protocols/http2/Http2Channel.SCHEME:Lio/undertow/util/HttpString;
      79: aload_0
      80: getfield      #20                 // Field secure:Z
      83: ifeq          91
      86: ldc           #47                 // String https
      88: goto          93
      91: ldc           #48                 // String http
      93: invokevirtual #41                 // Method io/undertow/util/HeaderMap.put:(Lio/undertow/util/HttpString;Ljava/lang/String;)Lio/undertow/util/HeaderMap;
      96: pop
      97: aload_1
      98: invokevirtual #37                 // Method io/undertow/client/ClientRequest.getRequestHeaders:()Lio/undertow/util/HeaderMap;
     101: getstatic     #49                 // Field io/undertow/util/Headers.HOST:Lio/undertow/util/HttpString;
     104: invokevirtual #50                 // Method io/undertow/util/HeaderMap.getFirst:(Lio/undertow/util/HttpString;)Ljava/lang/String;
     107: astore        4
     109: aload         4
     111: ifnull        130
     114: aload_1
     115: invokevirtual #37                 // Method io/undertow/client/ClientRequest.getRequestHeaders:()Lio/undertow/util/HeaderMap;
     118: getstatic     #51                 // Field io/undertow/protocols/http2/Http2Channel.AUTHORITY:Lio/undertow/util/HttpString;
     121: aload         4
     123: invokevirtual #41                 // Method io/undertow/util/HeaderMap.put:(Lio/undertow/util/HttpString;Ljava/lang/String;)Lio/undertow/util/HeaderMap;
     126: pop
     127: goto          145
     130: aload_1
     131: invokevirtual #37                 // Method io/undertow/client/ClientRequest.getRequestHeaders:()Lio/undertow/util/HeaderMap;
     134: getstatic     #51                 // Field io/undertow/protocols/http2/Http2Channel.AUTHORITY:Lio/undertow/util/HttpString;
     137: aload_0
     138: getfield      #18                 // Field defaultHost:Ljava/lang/String;
     141: invokevirtual #41                 // Method io/undertow/util/HeaderMap.put:(Lio/undertow/util/HttpString;Ljava/lang/String;)Lio/undertow/util/HeaderMap;
     144: pop
     145: aload_1
     146: invokevirtual #37                 // Method io/undertow/client/ClientRequest.getRequestHeaders:()Lio/undertow/util/HeaderMap;
     149: getstatic     #49                 // Field io/undertow/util/Headers.HOST:Lio/undertow/util/HttpString;
     152: invokevirtual #52                 // Method io/undertow/util/HeaderMap.remove:(Lio/undertow/util/HttpString;)Ljava/util/Collection;
     155: pop
     156: iconst_1
     157: istore        5
     159: aload_1
     160: invokevirtual #37                 // Method io/undertow/client/ClientRequest.getRequestHeaders:()Lio/undertow/util/HeaderMap;
     163: getstatic     #53                 // Field io/undertow/util/Headers.CONTENT_LENGTH:Lio/undertow/util/HttpString;
     166: invokevirtual #50                 // Method io/undertow/util/HeaderMap.getFirst:(Lio/undertow/util/HttpString;)Ljava/lang/String;
     169: astore        6
     171: aload_1
     172: invokevirtual #37                 // Method io/undertow/client/ClientRequest.getRequestHeaders:()Lio/undertow/util/HeaderMap;
     175: getstatic     #54                 // Field io/undertow/util/Headers.TRANSFER_ENCODING:Lio/undertow/util/HttpString;
     178: invokevirtual #55                 // Method io/undertow/util/HeaderMap.getLast:(Lio/undertow/util/HttpString;)Ljava/lang/String;
     181: astore        7
     183: aload         6
     185: ifnull        228
     188: aload         6
     190: invokestatic  #56                 // Method java/lang/Long.parseLong:(Ljava/lang/String;)J
     193: lstore        8
     195: lload         8
     197: lconst_0
     198: lcmp
     199: ifeq          206
     202: iconst_1
     203: goto          207
     206: iconst_0
     207: istore        5
     209: goto          240
     212: astore        8
     214: aload_0
     215: new           #58                 // class java/io/IOException
     218: dup
     219: aload         8
     221: invokespecial #59                 // Method java/io/IOException."<init>":(Ljava/lang/Throwable;)V
     224: invokevirtual #60                 // Method handleError:(Ljava/lang/Throwable;)V
     227: return
     228: aload         7
     230: ifnonnull     240
     233: iload_3
     234: ifne          240
     237: iconst_0
     238: istore        5
     240: aload_1
     241: invokevirtual #37                 // Method io/undertow/client/ClientRequest.getRequestHeaders:()Lio/undertow/util/HeaderMap;
     244: getstatic     #61                 // Field io/undertow/util/Headers.CONNECTION:Lio/undertow/util/HttpString;
     247: invokevirtual #52                 // Method io/undertow/util/HeaderMap.remove:(Lio/undertow/util/HttpString;)Ljava/util/Collection;
     250: pop
     251: aload_1
     252: invokevirtual #37                 // Method io/undertow/client/ClientRequest.getRequestHeaders:()Lio/undertow/util/HeaderMap;
     255: getstatic     #62                 // Field io/undertow/util/Headers.KEEP_ALIVE:Lio/undertow/util/HttpString;
     258: invokevirtual #52                 // Method io/undertow/util/HeaderMap.remove:(Lio/undertow/util/HttpString;)Ljava/util/Collection;
     261: pop
     262: aload_1
     263: invokevirtual #37                 // Method io/undertow/client/ClientRequest.getRequestHeaders:()Lio/undertow/util/HeaderMap;
     266: getstatic     #54                 // Field io/undertow/util/Headers.TRANSFER_ENCODING:Lio/undertow/util/HttpString;
     269: invokevirtual #52                 // Method io/undertow/util/HeaderMap.remove:(Lio/undertow/util/HttpString;)Ljava/util/Collection;
     272: pop
     273: aload_0
     274: getfield      #17                 // Field http2Channel:Lio/undertow/protocols/http2/Http2Channel;
     277: aload_1
     278: invokevirtual #37                 // Method io/undertow/client/ClientRequest.getRequestHeaders:()Lio/undertow/util/HeaderMap;
     281: invokevirtual #63                 // Method io/undertow/protocols/http2/Http2Channel.createStream:(Lio/undertow/util/HeaderMap;)Lio/undertow/protocols/http2/Http2HeadersStreamSinkChannel;
     284: astore        8
     286: goto          327
     289: astore        9
     291: aload         9
     293: instanceof    #58                 // class java/io/IOException
     296: ifeq          307
     299: aload         9
     301: checkcast     #58                 // class java/io/IOException
     304: goto          316
     307: new           #58                 // class java/io/IOException
     310: dup
     311: aload         9
     313: invokespecial #59                 // Method java/io/IOException."<init>":(Ljava/lang/Throwable;)V
     316: astore        10
     318: aload_2
     319: aload         10
     321: invokeinterface #36,  2           // InterfaceMethod io/undertow/client/ClientCallback.failed:(Ljava/io/IOException;)V
     326: return
     327: new           #28                 // class io/undertow/client/http2/Http2ClientExchange
     330: dup
     331: aload_0
     332: aload         8
     334: aload_1
     335: invokespecial #29                 // Method io/undertow/client/http2/Http2ClientExchange."<init>":(Lio/undertow/client/ClientConnection;Lio/undertow/protocols/http2/Http2StreamSinkChannel;Lio/undertow/client/ClientRequest;)V
     338: astore        9
     340: aload_0
     341: getfield      #7                  // Field currentExchanges:Ljava/util/Map;
     344: aload         8
     346: invokevirtual #65                 // Method io/undertow/protocols/http2/Http2HeadersStreamSinkChannel.getStreamId:()I
     349: invokestatic  #31                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     352: aload         9
     354: invokeinterface #32,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     359: pop
     360: aload         8
     362: new           #66                 // class io/undertow/client/http2/Http2ClientConnection$2
     365: dup
     366: aload_0
     367: aload         9
     369: invokespecial #67                 // Method io/undertow/client/http2/Http2ClientConnection$2."<init>":(Lio/undertow/client/http2/Http2ClientConnection;Lio/undertow/client/http2/Http2ClientExchange;)V
     372: invokevirtual #68                 // Method io/undertow/protocols/http2/Http2HeadersStreamSinkChannel.setTrailersProducer:(Lio/undertow/protocols/http2/Http2DataStreamSinkChannel$TrailersProducer;)V
     375: aload_2
     376: ifnull        387
     379: aload_2
     380: aload         9
     382: invokeinterface #69,  2           // InterfaceMethod io/undertow/client/ClientCallback.completed:(Ljava/lang/Object;)V
     387: iload         5
     389: ifne          443
     392: aload         8
     394: invokevirtual #70                 // Method io/undertow/protocols/http2/Http2HeadersStreamSinkChannel.shutdownWrites:()V
     397: aload         8
     399: invokevirtual #71                 // Method io/undertow/protocols/http2/Http2HeadersStreamSinkChannel.flush:()Z
     402: ifne          432
     405: aload         8
     407: invokevirtual #72                 // Method io/undertow/protocols/http2/Http2HeadersStreamSinkChannel.getWriteSetter:()Lorg/xnio/ChannelListener$Setter;
     410: aconst_null
     411: new           #73                 // class io/undertow/client/http2/Http2ClientConnection$3
     414: dup
     415: aload_0
     416: invokespecial #74                 // Method io/undertow/client/http2/Http2ClientConnection$3."<init>":(Lio/undertow/client/http2/Http2ClientConnection;)V
     419: invokestatic  #75                 // Method org/xnio/ChannelListeners.flushingChannelListener:(Lorg/xnio/ChannelListener;Lorg/xnio/ChannelExceptionHandler;)Lorg/xnio/ChannelListener;
     422: invokeinterface #24,  2           // InterfaceMethod org/xnio/ChannelListener$Setter.set:(Lorg/xnio/ChannelListener;)V
     427: aload         8
     429: invokevirtual #76                 // Method io/undertow/protocols/http2/Http2HeadersStreamSinkChannel.resumeWrites:()V
     432: goto          443
     435: astore        10
     437: aload_0
     438: aload         10
     440: invokevirtual #60                 // Method handleError:(Ljava/lang/Throwable;)V
     443: return
    Exception table:
       from    to  target type
         188   209   212   Class java/lang/NumberFormatException
         273   286   289   Class java/lang/Throwable
         392   432   435   Class java/lang/Throwable

  private void handleError(java.lang.Throwable);
    Code:
       0: aload_1
       1: instanceof    #58                 // class java/io/IOException
       4: ifeq          14
       7: aload_1
       8: checkcast     #58                 // class java/io/IOException
      11: goto          22
      14: new           #58                 // class java/io/IOException
      17: dup
      18: aload_1
      19: invokespecial #59                 // Method java/io/IOException."<init>":(Ljava/lang/Throwable;)V
      22: astore_2
      23: getstatic     #77                 // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
      26: aload_2
      27: invokeinterface #78,  2           // InterfaceMethod io/undertow/UndertowLogger.ioException:(Ljava/io/IOException;)V
      32: aload_0
      33: invokestatic  #79                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
      36: aload_0
      37: getfield      #7                  // Field currentExchanges:Ljava/util/Map;
      40: invokeinterface #80,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      45: invokeinterface #81,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      50: astore_3
      51: aload_3
      52: invokeinterface #82,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      57: ifeq          110
      60: aload_3
      61: invokeinterface #83,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      66: checkcast     #84                 // class java/util/Map$Entry
      69: astore        4
      71: aload         4
      73: invokeinterface #85,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      78: checkcast     #28                 // class io/undertow/client/http2/Http2ClientExchange
      81: aload_2
      82: invokevirtual #86                 // Method io/undertow/client/http2/Http2ClientExchange.failed:(Ljava/io/IOException;)V
      85: goto          107
      88: astore        5
      90: getstatic     #77                 // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
      93: new           #58                 // class java/io/IOException
      96: dup
      97: aload         5
      99: invokespecial #59                 // Method java/io/IOException."<init>":(Ljava/lang/Throwable;)V
     102: invokeinterface #78,  2           // InterfaceMethod io/undertow/UndertowLogger.ioException:(Ljava/io/IOException;)V
     107: goto          51
     110: return
    Exception table:
       from    to  target type
          71    85    88   Class java/lang/Exception

  public org.xnio.StreamConnection performUpgrade() throws java.io.IOException;
    Code:
       0: getstatic     #88                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
       3: invokeinterface #89,  1           // InterfaceMethod io/undertow/UndertowMessages.upgradeNotSupported:()Ljava/lang/IllegalStateException;
       8: athrow

  public io.undertow.connector.ByteBufferPool getBufferPool();
    Code:
       0: aload_0
       1: getfield      #17                 // Field http2Channel:Lio/undertow/protocols/http2/Http2Channel;
       4: invokevirtual #90                 // Method io/undertow/protocols/http2/Http2Channel.getBufferPool:()Lio/undertow/connector/ByteBufferPool;
       7: areturn

  public java.net.SocketAddress getPeerAddress();
    Code:
       0: aload_0
       1: getfield      #17                 // Field http2Channel:Lio/undertow/protocols/http2/Http2Channel;
       4: invokevirtual #91                 // Method io/undertow/protocols/http2/Http2Channel.getPeerAddress:()Ljava/net/SocketAddress;
       7: areturn

  public <A extends java.net.SocketAddress> A getPeerAddress(java.lang.Class<A>);
    Code:
       0: aload_0
       1: getfield      #17                 // Field http2Channel:Lio/undertow/protocols/http2/Http2Channel;
       4: aload_1
       5: invokevirtual #92                 // Method io/undertow/protocols/http2/Http2Channel.getPeerAddress:(Ljava/lang/Class;)Ljava/net/SocketAddress;
       8: areturn

  public org.xnio.ChannelListener$Setter<? extends io.undertow.client.ClientConnection> getCloseSetter();
    Code:
       0: aload_0
       1: getfield      #4                  // Field closeSetter:Lorg/xnio/ChannelListener$SimpleSetter;
       4: areturn

  public java.net.SocketAddress getLocalAddress();
    Code:
       0: aload_0
       1: getfield      #17                 // Field http2Channel:Lio/undertow/protocols/http2/Http2Channel;
       4: invokevirtual #93                 // Method io/undertow/protocols/http2/Http2Channel.getLocalAddress:()Ljava/net/SocketAddress;
       7: areturn

  public <A extends java.net.SocketAddress> A getLocalAddress(java.lang.Class<A>);
    Code:
       0: aload_0
       1: getfield      #17                 // Field http2Channel:Lio/undertow/protocols/http2/Http2Channel;
       4: aload_1
       5: invokevirtual #94                 // Method io/undertow/protocols/http2/Http2Channel.getLocalAddress:(Ljava/lang/Class;)Ljava/net/SocketAddress;
       8: areturn

  public org.xnio.XnioWorker getWorker();
    Code:
       0: aload_0
       1: getfield      #17                 // Field http2Channel:Lio/undertow/protocols/http2/Http2Channel;
       4: invokevirtual #95                 // Method io/undertow/protocols/http2/Http2Channel.getWorker:()Lorg/xnio/XnioWorker;
       7: areturn

  public org.xnio.XnioIoThread getIoThread();
    Code:
       0: aload_0
       1: getfield      #17                 // Field http2Channel:Lio/undertow/protocols/http2/Http2Channel;
       4: invokevirtual #96                 // Method io/undertow/protocols/http2/Http2Channel.getIoThread:()Lorg/xnio/XnioIoThread;
       7: areturn

  public boolean isOpen();
    Code:
       0: aload_0
       1: getfield      #17                 // Field http2Channel:Lio/undertow/protocols/http2/Http2Channel;
       4: invokevirtual #33                 // Method io/undertow/protocols/http2/Http2Channel.isOpen:()Z
       7: ifeq          34
      10: aload_0
      11: getfield      #17                 // Field http2Channel:Lio/undertow/protocols/http2/Http2Channel;
      14: invokevirtual #97                 // Method io/undertow/protocols/http2/Http2Channel.isPeerGoneAway:()Z
      17: ifne          34
      20: aload_0
      21: getfield      #17                 // Field http2Channel:Lio/undertow/protocols/http2/Http2Channel;
      24: invokevirtual #98                 // Method io/undertow/protocols/http2/Http2Channel.isThisGoneAway:()Z
      27: ifne          34
      30: iconst_1
      31: goto          35
      34: iconst_0
      35: ireturn

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #17                 // Field http2Channel:Lio/undertow/protocols/http2/Http2Channel;
       4: iconst_0
       5: invokevirtual #99                 // Method io/undertow/protocols/http2/Http2Channel.sendGoAway:(I)V
       8: aload_0
       9: getfield      #7                  // Field currentExchanges:Ljava/util/Map;
      12: invokeinterface #80,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      17: invokeinterface #81,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      22: astore_1
      23: aload_1
      24: invokeinterface #82,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      29: ifeq          64
      32: aload_1
      33: invokeinterface #83,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      38: checkcast     #84                 // class java/util/Map$Entry
      41: astore_2
      42: aload_2
      43: invokeinterface #85,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      48: checkcast     #28                 // class io/undertow/client/http2/Http2ClientExchange
      51: new           #34                 // class java/nio/channels/ClosedChannelException
      54: dup
      55: invokespecial #35                 // Method java/nio/channels/ClosedChannelException."<init>":()V
      58: invokevirtual #86                 // Method io/undertow/client/http2/Http2ClientExchange.failed:(Ljava/io/IOException;)V
      61: goto          23
      64: aload_0
      65: getfield      #7                  // Field currentExchanges:Ljava/util/Map;
      68: invokeinterface #100,  1          // InterfaceMethod java/util/Map.clear:()V
      73: goto          149
      76: astore_3
      77: aload_0
      78: getfield      #7                  // Field currentExchanges:Ljava/util/Map;
      81: invokeinterface #80,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      86: invokeinterface #81,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      91: astore        4
      93: aload         4
      95: invokeinterface #82,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     100: ifeq          138
     103: aload         4
     105: invokeinterface #83,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     110: checkcast     #84                 // class java/util/Map$Entry
     113: astore        5
     115: aload         5
     117: invokeinterface #85,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
     122: checkcast     #28                 // class io/undertow/client/http2/Http2ClientExchange
     125: new           #34                 // class java/nio/channels/ClosedChannelException
     128: dup
     129: invokespecial #35                 // Method java/nio/channels/ClosedChannelException."<init>":()V
     132: invokevirtual #86                 // Method io/undertow/client/http2/Http2ClientExchange.failed:(Ljava/io/IOException;)V
     135: goto          93
     138: aload_0
     139: getfield      #7                  // Field currentExchanges:Ljava/util/Map;
     142: invokeinterface #100,  1          // InterfaceMethod java/util/Map.clear:()V
     147: aload_3
     148: athrow
     149: return
    Exception table:
       from    to  target type
           0     8    76   any

  public boolean supportsOption(org.xnio.Option<?>);
    Code:
       0: iconst_0
       1: ireturn

  public <T> T getOption(org.xnio.Option<T>) throws java.io.IOException;
    Code:
       0: aconst_null
       1: areturn

  public <T> T setOption(org.xnio.Option<T>, T) throws java.lang.IllegalArgumentException, java.io.IOException;
    Code:
       0: aconst_null
       1: areturn

  public boolean isUpgraded();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isPushSupported();
    Code:
       0: iconst_1
       1: ireturn

  public boolean isMultiplexingSupported();
    Code:
       0: iconst_1
       1: ireturn

  public io.undertow.client.ClientStatistics getStatistics();
    Code:
       0: aload_0
       1: getfield      #19                 // Field clientStatistics:Lio/undertow/client/ClientStatistics;
       4: areturn

  public boolean isUpgradeSupported();
    Code:
       0: iconst_0
       1: ireturn

  public void addCloseListener(org.xnio.ChannelListener<io.undertow.client.ClientConnection>);
    Code:
       0: aload_0
       1: getfield      #10                 // Field closeListeners:Ljava/util/List;
       4: aload_1
       5: invokeinterface #101,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      10: pop
      11: return

  public boolean isPingSupported();
    Code:
       0: iconst_1
       1: ireturn

  public void sendPing(io.undertow.client.ClientConnection$PingListener, long, java.util.concurrent.TimeUnit);
    Code:
       0: getstatic     #102                // Field PING_COUNTER:Ljava/util/concurrent/atomic/AtomicLong;
       3: invokevirtual #103                // Method java/util/concurrent/atomic/AtomicLong.incrementAndGet:()J
       6: lstore        5
       8: bipush        8
      10: newarray       byte
      12: astore        7
      14: aload         7
      16: iconst_0
      17: lload         5
      19: l2i
      20: i2b
      21: bastore
      22: aload         7
      24: iconst_1
      25: lload         5
      27: bipush        8
      29: lshl
      30: l2i
      31: i2b
      32: bastore
      33: aload         7
      35: iconst_2
      36: lload         5
      38: bipush        16
      40: lshl
      41: l2i
      42: i2b
      43: bastore
      44: aload         7
      46: iconst_3
      47: lload         5
      49: bipush        24
      51: lshl
      52: l2i
      53: i2b
      54: bastore
      55: aload         7
      57: iconst_4
      58: lload         5
      60: bipush        32
      62: lshl
      63: l2i
      64: i2b
      65: bastore
      66: aload         7
      68: iconst_5
      69: lload         5
      71: bipush        40
      73: lshl
      74: l2i
      75: i2b
      76: bastore
      77: aload         7
      79: bipush        6
      81: lload         5
      83: bipush        48
      85: lshl
      86: l2i
      87: i2b
      88: bastore
      89: aload         7
      91: bipush        7
      93: lload         5
      95: bipush        54
      97: lshl
      98: l2i
      99: i2b
     100: bastore
     101: new           #104                // class io/undertow/client/http2/Http2ClientConnection$PingKey
     104: dup
     105: aload         7
     107: invokespecial #105                // Method io/undertow/client/http2/Http2ClientConnection$PingKey."<init>":([B)V
     110: astore        8
     112: aload_0
     113: getfield      #13                 // Field outstandingPings:Ljava/util/Map;
     116: aload         8
     118: aload_1
     119: invokeinterface #32,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     124: pop
     125: lload_2
     126: lconst_0
     127: lcmp
     128: ifle          153
     131: aload_0
     132: getfield      #17                 // Field http2Channel:Lio/undertow/protocols/http2/Http2Channel;
     135: invokevirtual #96                 // Method io/undertow/protocols/http2/Http2Channel.getIoThread:()Lorg/xnio/XnioIoThread;
     138: aload_0
     139: aload         8
     141: invokedynamic #106,  0            // InvokeDynamic #0:run:(Lio/undertow/client/http2/Http2ClientConnection;Lio/undertow/client/http2/Http2ClientConnection$PingKey;)Ljava/lang/Runnable;
     146: lload_2
     147: aload         4
     149: invokevirtual #107                // Method org/xnio/XnioIoThread.executeAfter:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lorg/xnio/XnioExecutor$Key;
     152: pop
     153: aload_0
     154: getfield      #17                 // Field http2Channel:Lio/undertow/protocols/http2/Http2Channel;
     157: aload         7
     159: aload_1
     160: invokedynamic #108,  0            // InvokeDynamic #1:handleException:(Lio/undertow/client/ClientConnection$PingListener;)Lorg/xnio/ChannelExceptionHandler;
     165: invokevirtual #109                // Method io/undertow/protocols/http2/Http2Channel.sendPing:([BLorg/xnio/ChannelExceptionHandler;)V
     168: return

  private static void lambda$sendPing$1(io.undertow.client.ClientConnection$PingListener, io.undertow.protocols.http2.AbstractHttp2StreamSinkChannel, java.io.IOException);
    Code:
       0: aload_0
       1: aload_2
       2: invokeinterface #110,  2          // InterfaceMethod io/undertow/client/ClientConnection$PingListener.failed:(Ljava/io/IOException;)V
       7: return

  private void lambda$sendPing$0(io.undertow.client.http2.Http2ClientConnection$PingKey);
    Code:
       0: aload_0
       1: getfield      #13                 // Field outstandingPings:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #111,  2          // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #112                // class io/undertow/client/ClientConnection$PingListener
      13: astore_2
      14: aload_2
      15: ifnull        32
      18: aload_2
      19: getstatic     #88                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      22: invokeinterface #113,  1          // InterfaceMethod io/undertow/UndertowMessages.pingTimeout:()Ljava/io/IOException;
      27: invokeinterface #110,  2          // InterfaceMethod io/undertow/client/ClientConnection$PingListener.failed:(Ljava/io/IOException;)V
      32: return

  static {};
    Code:
       0: new           #114                // class java/util/concurrent/atomic/AtomicLong
       3: dup
       4: invokespecial #115                // Method java/util/concurrent/atomic/AtomicLong."<init>":()V
       7: putstatic     #102                // Field PING_COUNTER:Ljava/util/concurrent/atomic/AtomicLong;
      10: return
}
