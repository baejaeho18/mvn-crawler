Compiled from "WebsocketFilter.java"
class io.fluxcapacitor.proxy.WebsocketFilter$1 extends jakarta.servlet.http.HttpServletRequestWrapper {
  final jakarta.servlet.http.HttpServletRequest val$r;

  final io.fluxcapacitor.proxy.WebsocketFilter this$0;

  io.fluxcapacitor.proxy.WebsocketFilter$1(io.fluxcapacitor.proxy.WebsocketFilter, jakarta.servlet.http.HttpServletRequest, jakarta.servlet.http.HttpServletRequest);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #3                  // Field this$0:Lio/fluxcapacitor/proxy/WebsocketFilter;
       5: aload_0
       6: aload_3
       7: putfield      #9                  // Field val$r:Ljakarta/servlet/http/HttpServletRequest;
      10: aload_0
      11: aload_2
      12: invokespecial #13                 // Method jakarta/servlet/http/HttpServletRequestWrapper."<init>":(Ljakarta/servlet/http/HttpServletRequest;)V
      15: return

  public java.util.Map<java.lang.String, java.lang.String[]> getParameterMap();
    Code:
       0: new           #19                 // class java/util/HashMap
       3: dup
       4: aload_0
       5: getfield      #9                  // Field val$r:Ljakarta/servlet/http/HttpServletRequest;
       8: invokeinterface #21,  1           // InterfaceMethod jakarta/servlet/http/HttpServletRequest.getParameterMap:()Ljava/util/Map;
      13: invokespecial #27                 // Method java/util/HashMap."<init>":(Ljava/util/Map;)V
      16: astore_1
      17: invokestatic  #30                 // Method io/fluxcapacitor/javaclient/web/WebRequest.builder:()Lio/fluxcapacitor/javaclient/web/WebRequest$Builder;
      20: aload_0
      21: getfield      #9                  // Field val$r:Ljakarta/servlet/http/HttpServletRequest;
      24: invokeinterface #36,  1           // InterfaceMethod jakarta/servlet/http/HttpServletRequest.getServletPath:()Ljava/lang/String;
      29: aload_0
      30: getfield      #9                  // Field val$r:Ljakarta/servlet/http/HttpServletRequest;
      33: invokeinterface #40,  1           // InterfaceMethod jakarta/servlet/http/HttpServletRequest.getQueryString:()Ljava/lang/String;
      38: ifnonnull     46
      41: ldc           #43                 // String
      43: goto          60
      46: aload_0
      47: getfield      #9                  // Field val$r:Ljakarta/servlet/http/HttpServletRequest;
      50: invokeinterface #40,  1           // InterfaceMethod jakarta/servlet/http/HttpServletRequest.getQueryString:()Ljava/lang/String;
      55: invokedynamic #45,  0             // InvokeDynamic #0:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;
      60: invokedynamic #49,  0             // InvokeDynamic #1:makeConcatWithConstants:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      65: invokevirtual #52                 // Method io/fluxcapacitor/javaclient/web/WebRequest$Builder.url:(Ljava/lang/String;)Lio/fluxcapacitor/javaclient/web/WebRequest$Builder;
      68: aload_0
      69: getfield      #9                  // Field val$r:Ljakarta/servlet/http/HttpServletRequest;
      72: invokeinterface #58,  1           // InterfaceMethod jakarta/servlet/http/HttpServletRequest.getMethod:()Ljava/lang/String;
      77: invokestatic  #61                 // Method io/fluxcapacitor/javaclient/web/HttpRequestMethod.valueOf:(Ljava/lang/String;)Lio/fluxcapacitor/javaclient/web/HttpRequestMethod;
      80: invokevirtual #67                 // Method io/fluxcapacitor/javaclient/web/WebRequest$Builder.method:(Lio/fluxcapacitor/javaclient/web/HttpRequestMethod;)Lio/fluxcapacitor/javaclient/web/WebRequest$Builder;
      83: astore_2
      84: aload_0
      85: getfield      #9                  // Field val$r:Ljakarta/servlet/http/HttpServletRequest;
      88: invokeinterface #71,  1           // InterfaceMethod jakarta/servlet/http/HttpServletRequest.getHeaderNames:()Ljava/util/Enumeration;
      93: invokeinterface #75,  1           // InterfaceMethod java/util/Enumeration.asIterator:()Ljava/util/Iterator;
      98: aload_0
      99: getfield      #9                  // Field val$r:Ljakarta/servlet/http/HttpServletRequest;
     102: aload_2
     103: invokedynamic #81,  0             // InvokeDynamic #2:accept:(Ljakarta/servlet/http/HttpServletRequest;Lio/fluxcapacitor/javaclient/web/WebRequest$Builder;)Ljava/util/function/Consumer;
     108: invokeinterface #85,  2           // InterfaceMethod java/util/Iterator.forEachRemaining:(Ljava/util/function/Consumer;)V
     113: aload_2
     114: invokevirtual #91                 // Method io/fluxcapacitor/javaclient/web/WebRequest$Builder.build:()Lio/fluxcapacitor/javaclient/web/WebRequest;
     117: invokevirtual #95                 // Method io/fluxcapacitor/javaclient/web/WebRequest.getMetadata:()Lio/fluxcapacitor/common/api/Metadata;
     120: invokevirtual #99                 // Method io/fluxcapacitor/common/api/Metadata.getEntries:()Ljava/util/Map;
     123: aload_1
     124: invokedynamic #104,  0            // InvokeDynamic #3:accept:(Ljava/util/HashMap;)Ljava/util/function/BiConsumer;
     129: invokeinterface #107,  2          // InterfaceMethod java/util/Map.forEach:(Ljava/util/function/BiConsumer;)V
     134: aload_1
     135: areturn

  private static void lambda$getParameterMap$2(java.util.HashMap, java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokedynamic #113,  0            // InvokeDynamic #4:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;
       7: iconst_1
       8: anewarray     #114                // class java/lang/String
      11: dup
      12: iconst_0
      13: aload_2
      14: aastore
      15: invokevirtual #116                // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      18: pop
      19: return

  private static void lambda$getParameterMap$1(jakarta.servlet.http.HttpServletRequest, io.fluxcapacitor.javaclient.web.WebRequest$Builder, java.lang.String);
    Code:
       0: aload_0
       1: aload_2
       2: invokeinterface #120,  2          // InterfaceMethod jakarta/servlet/http/HttpServletRequest.getHeaders:(Ljava/lang/String;)Ljava/util/Enumeration;
       7: invokeinterface #75,  1           // InterfaceMethod java/util/Enumeration.asIterator:()Ljava/util/Iterator;
      12: aload_1
      13: aload_2
      14: invokedynamic #124,  0            // InvokeDynamic #5:accept:(Lio/fluxcapacitor/javaclient/web/WebRequest$Builder;Ljava/lang/String;)Ljava/util/function/Consumer;
      19: invokeinterface #85,  2           // InterfaceMethod java/util/Iterator.forEachRemaining:(Ljava/util/function/Consumer;)V
      24: return

  private static void lambda$getParameterMap$0(io.fluxcapacitor.javaclient.web.WebRequest$Builder, java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #127                // Method io/fluxcapacitor/javaclient/web/WebUtils.fixHeaderName:(Ljava/lang/String;)Ljava/lang/String;
       5: aload_2
       6: invokevirtual #132                // Method io/fluxcapacitor/javaclient/web/WebRequest$Builder.header:(Ljava/lang/String;Ljava/lang/String;)Lio/fluxcapacitor/javaclient/web/WebRequest$Builder;
       9: pop
      10: return
}
