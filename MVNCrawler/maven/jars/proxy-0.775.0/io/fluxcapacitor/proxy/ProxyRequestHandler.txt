Compiled from "ProxyRequestHandler.java"
public class io.fluxcapacitor.proxy.ProxyRequestHandler implements io.undertow.server.HttpHandler,java.lang.AutoCloseable {
  private static final org.slf4j.Logger log;

  private final io.fluxcapacitor.proxy.ProxySerializer serializer;

  private final io.fluxcapacitor.javaclient.publishing.client.GatewayClient requestGateway;

  private final io.fluxcapacitor.javaclient.publishing.RequestHandler requestHandler;

  private final io.fluxcapacitor.proxy.WebsocketEndpoint websocketEndpoint;

  private final io.undertow.server.HttpHandler websocketHandler;

  private final java.util.concurrent.atomic.AtomicBoolean closed;

  public io.fluxcapacitor.proxy.ProxyRequestHandler(io.fluxcapacitor.javaclient.configuration.client.Client);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #7                  // class io/fluxcapacitor/proxy/ProxySerializer
       8: dup
       9: invokespecial #9                  // Method io/fluxcapacitor/proxy/ProxySerializer."<init>":()V
      12: putfield      #10                 // Field serializer:Lio/fluxcapacitor/proxy/ProxySerializer;
      15: aload_0
      16: new           #16                 // class java/util/concurrent/atomic/AtomicBoolean
      19: dup
      20: invokespecial #18                 // Method java/util/concurrent/atomic/AtomicBoolean."<init>":()V
      23: putfield      #19                 // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;
      26: aload_0
      27: aload_1
      28: getstatic     #23                 // Field io/fluxcapacitor/common/MessageType.WEBREQUEST:Lio/fluxcapacitor/common/MessageType;
      31: invokeinterface #29,  2           // InterfaceMethod io/fluxcapacitor/javaclient/configuration/client/Client.getGatewayClient:(Lio/fluxcapacitor/common/MessageType;)Lio/fluxcapacitor/javaclient/publishing/client/GatewayClient;
      36: putfield      #35                 // Field requestGateway:Lio/fluxcapacitor/javaclient/publishing/client/GatewayClient;
      39: aload_0
      40: new           #39                 // class io/fluxcapacitor/javaclient/publishing/DefaultRequestHandler
      43: dup
      44: aload_1
      45: getstatic     #41                 // Field io/fluxcapacitor/common/MessageType.WEBRESPONSE:Lio/fluxcapacitor/common/MessageType;
      48: ldc2_w        #44                 // long 200l
      51: invokestatic  #46                 // Method java/time/Duration.ofSeconds:(J)Ljava/time/Duration;
      54: ldc           #52                 // String %s_%s
      56: iconst_2
      57: anewarray     #2                  // class java/lang/Object
      60: dup
      61: iconst_0
      62: aload_1
      63: invokeinterface #54,  1           // InterfaceMethod io/fluxcapacitor/javaclient/configuration/client/Client.name:()Ljava/lang/String;
      68: aastore
      69: dup
      70: iconst_1
      71: ldc           #58                 // String $proxy-request-handler
      73: aastore
      74: invokestatic  #60                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      77: invokespecial #66                 // Method io/fluxcapacitor/javaclient/publishing/DefaultRequestHandler."<init>":(Lio/fluxcapacitor/javaclient/configuration/client/Client;Lio/fluxcapacitor/common/MessageType;Ljava/time/Duration;Ljava/lang/String;)V
      80: putfield      #69                 // Field requestHandler:Lio/fluxcapacitor/javaclient/publishing/RequestHandler;
      83: aload_0
      84: new           #73                 // class io/fluxcapacitor/proxy/WebsocketEndpoint
      87: dup
      88: aload_1
      89: invokespecial #75                 // Method io/fluxcapacitor/proxy/WebsocketEndpoint."<init>":(Lio/fluxcapacitor/javaclient/configuration/client/Client;)V
      92: putfield      #78                 // Field websocketEndpoint:Lio/fluxcapacitor/proxy/WebsocketEndpoint;
      95: aload_0
      96: aload_0
      97: invokevirtual #82                 // Method createWebsocketHandler:()Lio/undertow/server/HttpHandler;
     100: putfield      #86                 // Field websocketHandler:Lio/undertow/server/HttpHandler;
     103: return

  public void handleRequest(io.undertow.server.HttpServerExchange);
    Code:
       0: aload_0
       1: getfield      #19                 // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: invokevirtual #90                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
       7: ifeq          20
      10: new           #94                 // class java/lang/IllegalStateException
      13: dup
      14: ldc           #96                 // String Request handler has been shut down and is not accepting new requests
      16: invokespecial #98                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      19: athrow
      20: aload_1
      21: invokevirtual #101                // Method io/undertow/server/HttpServerExchange.isInIoThread:()Z
      24: ifeq          34
      27: aload_1
      28: aload_0
      29: invokevirtual #106                // Method io/undertow/server/HttpServerExchange.dispatch:(Lio/undertow/server/HttpHandler;)Lio/undertow/server/HttpServerExchange;
      32: pop
      33: return
      34: aload_1
      35: invokevirtual #110                // Method io/undertow/server/HttpServerExchange.getRequestReceiver:()Lio/undertow/io/Receiver;
      38: aload_0
      39: invokedynamic #114,  0            // InvokeDynamic #0:handle:(Lio/fluxcapacitor/proxy/ProxyRequestHandler;)Lio/undertow/io/Receiver$FullBytesCallback;
      44: aload_0
      45: invokedynamic #118,  0            // InvokeDynamic #1:error:(Lio/fluxcapacitor/proxy/ProxyRequestHandler;)Lio/undertow/io/Receiver$ErrorCallback;
      50: invokeinterface #122,  3          // InterfaceMethod io/undertow/io/Receiver.receiveFullBytes:(Lio/undertow/io/Receiver$FullBytesCallback;Lio/undertow/io/Receiver$ErrorCallback;)V
      55: goto          61
      58: astore_2
      59: aload_2
      60: athrow
      61: return
    Exception table:
       from    to  target type
           0    33    58   Class java/lang/Throwable
          34    55    58   Class java/lang/Throwable

  protected io.fluxcapacitor.javaclient.web.WebRequest createWebRequest(io.undertow.server.HttpServerExchange, byte[]);
    Code:
       0: invokestatic  #136                // Method io/fluxcapacitor/javaclient/web/WebRequest.builder:()Lio/fluxcapacitor/javaclient/web/WebRequest$Builder;
       3: aload_1
       4: invokevirtual #142                // Method io/undertow/server/HttpServerExchange.getRelativePath:()Ljava/lang/String;
       7: aload_1
       8: invokevirtual #145                // Method io/undertow/server/HttpServerExchange.getQueryString:()Ljava/lang/String;
      11: invokevirtual #148                // Method java/lang/String.isBlank:()Z
      14: ifeq          22
      17: ldc           #151                // String
      19: goto          31
      22: aload_1
      23: invokevirtual #145                // Method io/undertow/server/HttpServerExchange.getQueryString:()Ljava/lang/String;
      26: invokedynamic #153,  0            // InvokeDynamic #2:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;
      31: invokedynamic #157,  0            // InvokeDynamic #3:makeConcatWithConstants:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      36: invokevirtual #160                // Method io/fluxcapacitor/javaclient/web/WebRequest$Builder.url:(Ljava/lang/String;)Lio/fluxcapacitor/javaclient/web/WebRequest$Builder;
      39: aload_1
      40: invokevirtual #166                // Method io/undertow/server/HttpServerExchange.getRequestMethod:()Lio/undertow/util/HttpString;
      43: invokevirtual #170                // Method io/undertow/util/HttpString.toString:()Ljava/lang/String;
      46: invokestatic  #175                // Method io/fluxcapacitor/javaclient/web/HttpRequestMethod.valueOf:(Ljava/lang/String;)Lio/fluxcapacitor/javaclient/web/HttpRequestMethod;
      49: invokevirtual #181                // Method io/fluxcapacitor/javaclient/web/WebRequest$Builder.method:(Lio/fluxcapacitor/javaclient/web/HttpRequestMethod;)Lio/fluxcapacitor/javaclient/web/WebRequest$Builder;
      52: aload_2
      53: invokevirtual #185                // Method io/fluxcapacitor/javaclient/web/WebRequest$Builder.payload:(Ljava/lang/Object;)Lio/fluxcapacitor/javaclient/web/WebRequest$Builder;
      56: iconst_0
      57: invokevirtual #189                // Method io/fluxcapacitor/javaclient/web/WebRequest$Builder.acceptGzipEncoding:(Z)Lio/fluxcapacitor/javaclient/web/WebRequest$Builder;
      60: astore_3
      61: aload_1
      62: invokevirtual #193                // Method io/undertow/server/HttpServerExchange.getRequestHeaders:()Lio/undertow/util/HeaderMap;
      65: aload_3
      66: invokedynamic #197,  0            // InvokeDynamic #4:accept:(Lio/fluxcapacitor/javaclient/web/WebRequest$Builder;)Ljava/util/function/Consumer;
      71: invokevirtual #201                // Method io/undertow/util/HeaderMap.forEach:(Ljava/util/function/Consumer;)V
      74: aload_0
      75: aload_3
      76: invokevirtual #207                // Method io/fluxcapacitor/javaclient/web/WebRequest$Builder.build:()Lio/fluxcapacitor/javaclient/web/WebRequest;
      79: invokevirtual #211                // Method tryUpgrade:(Lio/fluxcapacitor/javaclient/web/WebRequest;)Lio/fluxcapacitor/javaclient/web/WebRequest;
      82: areturn

  protected io.fluxcapacitor.javaclient.web.WebRequest tryUpgrade(io.fluxcapacitor.javaclient.web.WebRequest);
    Code:
       0: aload_1
       1: invokevirtual #215                // Method io/fluxcapacitor/javaclient/web/WebRequest.getMethod:()Lio/fluxcapacitor/javaclient/web/HttpRequestMethod;
       4: getstatic     #219                // Field io/fluxcapacitor/javaclient/web/HttpRequestMethod.GET:Lio/fluxcapacitor/javaclient/web/HttpRequestMethod;
       7: if_acmpne     52
      10: ldc           #223                // String Upgrade
      12: aload_1
      13: ldc           #225                // String Connection
      15: invokevirtual #227                // Method io/fluxcapacitor/javaclient/web/WebRequest.getHeader:(Ljava/lang/String;)Ljava/lang/String;
      18: invokevirtual #230                // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      21: ifeq          52
      24: ldc           #234                // String websocket
      26: aload_1
      27: ldc           #223                // String Upgrade
      29: invokevirtual #227                // Method io/fluxcapacitor/javaclient/web/WebRequest.getHeader:(Ljava/lang/String;)Ljava/lang/String;
      32: invokevirtual #230                // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      35: ifeq          52
      38: aload_1
      39: invokevirtual #236                // Method io/fluxcapacitor/javaclient/web/WebRequest.toBuilder:()Lio/fluxcapacitor/javaclient/web/WebRequest$Builder;
      42: getstatic     #239                // Field io/fluxcapacitor/javaclient/web/HttpRequestMethod.WS_HANDSHAKE:Lio/fluxcapacitor/javaclient/web/HttpRequestMethod;
      45: invokevirtual #181                // Method io/fluxcapacitor/javaclient/web/WebRequest$Builder.method:(Lio/fluxcapacitor/javaclient/web/HttpRequestMethod;)Lio/fluxcapacitor/javaclient/web/WebRequest$Builder;
      48: invokevirtual #207                // Method io/fluxcapacitor/javaclient/web/WebRequest$Builder.build:()Lio/fluxcapacitor/javaclient/web/WebRequest;
      51: areturn
      52: aload_1
      53: areturn

  protected void sendWebRequest(io.undertow.server.HttpServerExchange, io.fluxcapacitor.javaclient.web.WebRequest);
    Code:
       0: aload_2
       1: aload_0
       2: getfield      #10                 // Field serializer:Lio/fluxcapacitor/proxy/ProxySerializer;
       5: invokevirtual #242                // Method io/fluxcapacitor/javaclient/web/WebRequest.serialize:(Lio/fluxcapacitor/javaclient/common/serialization/Serializer;)Lio/fluxcapacitor/common/api/SerializedMessage;
       8: astore_3
       9: aload_0
      10: getfield      #69                 // Field requestHandler:Lio/fluxcapacitor/javaclient/publishing/RequestHandler;
      13: aload_3
      14: aload_0
      15: invokedynamic #246,  0            // InvokeDynamic #5:accept:(Lio/fluxcapacitor/proxy/ProxyRequestHandler;)Ljava/util/function/Consumer;
      20: invokeinterface #249,  3          // InterfaceMethod io/fluxcapacitor/javaclient/publishing/RequestHandler.sendRequest:(Lio/fluxcapacitor/common/api/SerializedMessage;Ljava/util/function/Consumer;)Ljava/util/concurrent/CompletableFuture;
      25: aload_0
      26: aload_2
      27: aload_1
      28: invokedynamic #255,  0            // InvokeDynamic #6:accept:(Lio/fluxcapacitor/proxy/ProxyRequestHandler;Lio/fluxcapacitor/javaclient/web/WebRequest;Lio/undertow/server/HttpServerExchange;)Ljava/util/function/BiConsumer;
      33: invokevirtual #258                // Method java/util/concurrent/CompletableFuture.whenComplete:(Ljava/util/function/BiConsumer;)Ljava/util/concurrent/CompletableFuture;
      36: pop
      37: return

  protected void handleResponse(io.fluxcapacitor.common.api.SerializedMessage, io.fluxcapacitor.javaclient.web.WebRequest, io.undertow.server.HttpServerExchange);
    Code:
       0: aload_1
       1: invokevirtual #264                // Method io/fluxcapacitor/common/api/SerializedMessage.getMetadata:()Lio/fluxcapacitor/common/api/Metadata;
       4: invokestatic  #270                // Method io/fluxcapacitor/javaclient/web/WebResponse.getStatusCode:(Lio/fluxcapacitor/common/api/Metadata;)Ljava/lang/Integer;
       7: invokevirtual #276                // Method java/lang/Integer.intValue:()I
      10: istore        4
      12: iload         4
      14: sipush        300
      17: if_icmpge     77
      20: aload_2
      21: invokevirtual #215                // Method io/fluxcapacitor/javaclient/web/WebRequest.getMethod:()Lio/fluxcapacitor/javaclient/web/HttpRequestMethod;
      24: getstatic     #239                // Field io/fluxcapacitor/javaclient/web/HttpRequestMethod.WS_HANDSHAKE:Lio/fluxcapacitor/javaclient/web/HttpRequestMethod;
      27: if_acmpne     77
      30: aload_3
      31: ldc_w         #282                // String _clientId
      34: aload_1
      35: invokevirtual #264                // Method io/fluxcapacitor/common/api/SerializedMessage.getMetadata:()Lio/fluxcapacitor/common/api/Metadata;
      38: ldc_w         #284                // String clientId
      41: invokevirtual #286                // Method io/fluxcapacitor/common/api/Metadata.get:(Ljava/lang/Object;)Ljava/lang/String;
      44: invokevirtual #291                // Method io/undertow/server/HttpServerExchange.addQueryParam:(Ljava/lang/String;Ljava/lang/String;)Lio/undertow/server/HttpServerExchange;
      47: pop
      48: aload_3
      49: ldc_w         #295                // String _trackerId
      52: aload_1
      53: invokevirtual #264                // Method io/fluxcapacitor/common/api/SerializedMessage.getMetadata:()Lio/fluxcapacitor/common/api/Metadata;
      56: ldc_w         #297                // String trackerId
      59: invokevirtual #286                // Method io/fluxcapacitor/common/api/Metadata.get:(Ljava/lang/Object;)Ljava/lang/String;
      62: invokevirtual #291                // Method io/undertow/server/HttpServerExchange.addQueryParam:(Ljava/lang/String;Ljava/lang/String;)Lio/undertow/server/HttpServerExchange;
      65: pop
      66: aload_0
      67: getfield      #86                 // Field websocketHandler:Lio/undertow/server/HttpHandler;
      70: aload_3
      71: invokeinterface #299,  2          // InterfaceMethod io/undertow/server/HttpHandler.handleRequest:(Lio/undertow/server/HttpServerExchange;)V
      76: return
      77: aload_3
      78: invokevirtual #305                // Method io/undertow/server/HttpServerExchange.getProtocol:()Lio/undertow/util/HttpString;
      81: getstatic     #308                // Field io/undertow/util/Protocols.HTTP_1_1:Lio/undertow/util/HttpString;
      84: invokevirtual #314                // Method io/undertow/util/HttpString.compareTo:(Lio/undertow/util/HttpString;)I
      87: ifle          94
      90: iconst_1
      91: goto          95
      94: iconst_0
      95: istore        5
      97: aload_3
      98: iload         4
     100: invokevirtual #318                // Method io/undertow/server/HttpServerExchange.setStatusCode:(I)Lio/undertow/server/HttpServerExchange;
     103: pop
     104: aload_1
     105: invokevirtual #264                // Method io/fluxcapacitor/common/api/SerializedMessage.getMetadata:()Lio/fluxcapacitor/common/api/Metadata;
     108: invokestatic  #322                // Method io/fluxcapacitor/javaclient/web/WebResponse.getHeaders:(Lio/fluxcapacitor/common/api/Metadata;)Ljava/util/Map;
     111: iload         5
     113: aload_3
     114: invokedynamic #326,  0            // InvokeDynamic #7:accept:(ZLio/undertow/server/HttpServerExchange;)Ljava/util/function/BiConsumer;
     119: invokeinterface #329,  2          // InterfaceMethod java/util/Map.forEach:(Ljava/util/function/BiConsumer;)V
     124: aload_1
     125: invokevirtual #334                // Method io/fluxcapacitor/common/api/SerializedMessage.getData:()Lio/fluxcapacitor/common/api/Data;
     128: invokevirtual #338                // Method io/fluxcapacitor/common/api/Data.getFormat:()Ljava/lang/String;
     131: invokestatic  #343                // Method java/util/Optional.ofNullable:(Ljava/lang/Object;)Ljava/util/Optional;
     134: aload_3
     135: invokedynamic #349,  0            // InvokeDynamic #8:accept:(Lio/undertow/server/HttpServerExchange;)Ljava/util/function/Consumer;
     140: invokevirtual #352                // Method java/util/Optional.ifPresent:(Ljava/util/function/Consumer;)V
     143: aload_3
     144: invokevirtual #355                // Method io/undertow/server/HttpServerExchange.getResponseSender:()Lio/undertow/io/Sender;
     147: aload_1
     148: invokevirtual #334                // Method io/fluxcapacitor/common/api/SerializedMessage.getData:()Lio/fluxcapacitor/common/api/Data;
     151: invokevirtual #359                // Method io/fluxcapacitor/common/api/Data.getValue:()Ljava/lang/Object;
     154: checkcast     #363                // class "[B"
     157: invokestatic  #365                // Method java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;
     160: invokeinterface #371,  2          // InterfaceMethod io/undertow/io/Sender.send:(Ljava/nio/ByteBuffer;)V
     165: goto          173
     168: astore        4
     170: aload         4
     172: athrow
     173: return
    Exception table:
       from    to  target type
           0    76   168   Class java/lang/Throwable
          77   165   168   Class java/lang/Throwable

  protected void sendServerError(io.undertow.server.HttpServerExchange);
    Code:
       0: aload_1
       1: sipush        500
       4: invokevirtual #318                // Method io/undertow/server/HttpServerExchange.setStatusCode:(I)Lio/undertow/server/HttpServerExchange;
       7: pop
       8: aload_1
       9: invokevirtual #355                // Method io/undertow/server/HttpServerExchange.getResponseSender:()Lio/undertow/io/Sender;
      12: ldc_w         #377                // String Request could not be handled due to a server side error
      15: invokeinterface #379,  2          // InterfaceMethod io/undertow/io/Sender.send:(Ljava/lang/String;)V
      20: return

  protected void sendGatewayTimeout(io.undertow.server.HttpServerExchange);
    Code:
       0: aload_1
       1: sipush        504
       4: invokevirtual #318                // Method io/undertow/server/HttpServerExchange.setStatusCode:(I)Lio/undertow/server/HttpServerExchange;
       7: pop
       8: aload_1
       9: invokevirtual #355                // Method io/undertow/server/HttpServerExchange.getResponseSender:()Lio/undertow/io/Sender;
      12: ldc_w         #381                // String Did not receive a response in time
      15: invokeinterface #379,  2          // InterfaceMethod io/undertow/io/Sender.send:(Ljava/lang/String;)V
      20: return

  public void close();
    Code:
       0: aload_0
       1: getfield      #19                 // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: iconst_0
       5: iconst_1
       6: invokevirtual #383                // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z
       9: ifeq          37
      12: aload_0
      13: getfield      #78                 // Field websocketEndpoint:Lio/fluxcapacitor/proxy/WebsocketEndpoint;
      16: invokevirtual #387                // Method io/fluxcapacitor/proxy/WebsocketEndpoint.shutDown:()V
      19: aload_0
      20: getfield      #69                 // Field requestHandler:Lio/fluxcapacitor/javaclient/publishing/RequestHandler;
      23: invokeinterface #390,  1          // InterfaceMethod io/fluxcapacitor/javaclient/publishing/RequestHandler.close:()V
      28: aload_0
      29: getfield      #35                 // Field requestGateway:Lio/fluxcapacitor/javaclient/publishing/client/GatewayClient;
      32: invokeinterface #393,  1          // InterfaceMethod io/fluxcapacitor/javaclient/publishing/client/GatewayClient.close:()V
      37: return

  protected io.undertow.server.HttpHandler createWebsocketHandler();
    Code:
       0: invokestatic  #396                // Method io/undertow/servlet/Servlets.defaultContainer:()Lio/undertow/servlet/api/ServletContainer;
       3: invokestatic  #402                // Method io/undertow/servlet/Servlets.deployment:()Lio/undertow/servlet/api/DeploymentInfo;
       6: ldc_w         #406                // String /**
       9: invokevirtual #408                // Method io/undertow/servlet/api/DeploymentInfo.setContextPath:(Ljava/lang/String;)Lio/undertow/servlet/api/DeploymentInfo;
      12: ldc_w         #416                // String io.undertow.websockets.jsr.WebSocketDeploymentInfo
      15: new           #414                // class io/undertow/websockets/jsr/WebSocketDeploymentInfo
      18: dup
      19: invokespecial #418                // Method io/undertow/websockets/jsr/WebSocketDeploymentInfo."<init>":()V
      22: new           #419                // class io/undertow/server/DefaultByteBufferPool
      25: dup
      26: iconst_0
      27: sipush        1024
      30: bipush        100
      32: bipush        12
      34: invokespecial #421                // Method io/undertow/server/DefaultByteBufferPool."<init>":(ZIII)V
      37: invokevirtual #424                // Method io/undertow/websockets/jsr/WebSocketDeploymentInfo.setBuffers:(Lio/undertow/connector/ByteBufferPool;)Lio/undertow/websockets/jsr/WebSocketDeploymentInfo;
      40: invokestatic  #428                // Method org/xnio/Xnio.getInstance:()Lorg/xnio/Xnio;
      43: getstatic     #434                // Field org/xnio/Options.THREAD_DAEMON:Lorg/xnio/Option;
      46: iconst_1
      47: invokestatic  #440                // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      50: invokestatic  #445                // Method org/xnio/OptionMap.create:(Lorg/xnio/Option;Ljava/lang/Object;)Lorg/xnio/OptionMap;
      53: invokevirtual #451                // Method org/xnio/Xnio.createWorker:(Lorg/xnio/OptionMap;)Lorg/xnio/XnioWorker;
      56: invokevirtual #455                // Method io/undertow/websockets/jsr/WebSocketDeploymentInfo.setWorker:(Lorg/xnio/XnioWorker;)Lio/undertow/websockets/jsr/WebSocketDeploymentInfo;
      59: ldc           #73                 // class io/fluxcapacitor/proxy/WebsocketEndpoint
      61: ldc_w         #406                // String /**
      64: invokestatic  #459                // Method jakarta/websocket/server/ServerEndpointConfig$Builder.create:(Ljava/lang/Class;Ljava/lang/String;)Ljakarta/websocket/server/ServerEndpointConfig$Builder;
      67: new           #464                // class io/fluxcapacitor/proxy/ProxyRequestHandler$1
      70: dup
      71: aload_0
      72: invokespecial #466                // Method io/fluxcapacitor/proxy/ProxyRequestHandler$1."<init>":(Lio/fluxcapacitor/proxy/ProxyRequestHandler;)V
      75: invokevirtual #469                // Method jakarta/websocket/server/ServerEndpointConfig$Builder.configurator:(Ljakarta/websocket/server/ServerEndpointConfig$Configurator;)Ljakarta/websocket/server/ServerEndpointConfig$Builder;
      78: invokevirtual #473                // Method jakarta/websocket/server/ServerEndpointConfig$Builder.build:()Ljakarta/websocket/server/ServerEndpointConfig;
      81: invokevirtual #476                // Method io/undertow/websockets/jsr/WebSocketDeploymentInfo.addEndpoint:(Ljakarta/websocket/server/ServerEndpointConfig;)Lio/undertow/websockets/jsr/WebSocketDeploymentInfo;
      84: invokevirtual #480                // Method io/undertow/servlet/api/DeploymentInfo.addServletContextAttribute:(Ljava/lang/String;Ljava/lang/Object;)Lio/undertow/servlet/api/DeploymentInfo;
      87: ldc           #234                // String websocket
      89: invokevirtual #484                // Method io/undertow/servlet/api/DeploymentInfo.setDeploymentName:(Ljava/lang/String;)Lio/undertow/servlet/api/DeploymentInfo;
      92: new           #487                // class io/undertow/servlet/api/FilterInfo
      95: dup
      96: ldc_w         #489                // String websocketFilter
      99: ldc_w         #491                // class io/fluxcapacitor/proxy/WebsocketFilter
     102: invokespecial #493                // Method io/undertow/servlet/api/FilterInfo."<init>":(Ljava/lang/String;Ljava/lang/Class;)V
     105: invokevirtual #496                // Method io/undertow/servlet/api/DeploymentInfo.addFilter:(Lio/undertow/servlet/api/FilterInfo;)Lio/undertow/servlet/api/DeploymentInfo;
     108: ldc_w         #489                // String websocketFilter
     111: ldc_w         #500                // String *
     114: getstatic     #502                // Field jakarta/servlet/DispatcherType.REQUEST:Ljakarta/servlet/DispatcherType;
     117: invokevirtual #508                // Method io/undertow/servlet/api/DeploymentInfo.addFilterUrlMapping:(Ljava/lang/String;Ljava/lang/String;Ljakarta/servlet/DispatcherType;)Lio/undertow/servlet/api/DeploymentInfo;
     120: ldc_w         #512                // class io/undertow/Undertow
     123: invokevirtual #514                // Method java/lang/Class.getClassLoader:()Ljava/lang/ClassLoader;
     126: invokevirtual #520                // Method io/undertow/servlet/api/DeploymentInfo.setClassLoader:(Ljava/lang/ClassLoader;)Lio/undertow/servlet/api/DeploymentInfo;
     129: invokeinterface #524,  2          // InterfaceMethod io/undertow/servlet/api/ServletContainer.addDeployment:(Lio/undertow/servlet/api/DeploymentInfo;)Lio/undertow/servlet/api/DeploymentManager;
     134: astore_1
     135: aload_1
     136: invokeinterface #530,  1          // InterfaceMethod io/undertow/servlet/api/DeploymentManager.deploy:()V
     141: aload_1
     142: invokeinterface #535,  1          // InterfaceMethod io/undertow/servlet/api/DeploymentManager.start:()Lio/undertow/server/HttpHandler;
     147: areturn
     148: astore_1
     149: aload_1
     150: athrow
    Exception table:
       from    to  target type
           0   147   148   Class java/lang/Throwable

  private static void lambda$handleResponse$9(io.undertow.server.HttpServerExchange, java.lang.String);
    Code:
       0: aload_0
       1: invokevirtual #538                // Method io/undertow/server/HttpServerExchange.getResponseHeaders:()Lio/undertow/util/HeaderMap;
       4: new           #171                // class io/undertow/util/HttpString
       7: dup
       8: ldc_w         #541                // String Content-Type
      11: invokespecial #543                // Method io/undertow/util/HttpString."<init>":(Ljava/lang/String;)V
      14: aload_1
      15: invokevirtual #544                // Method io/undertow/util/HeaderMap.add:(Lio/undertow/util/HttpString;Ljava/lang/String;)Lio/undertow/util/HeaderMap;
      18: pop
      19: return

  private static void lambda$handleResponse$8(boolean, io.undertow.server.HttpServerExchange, java.lang.String, java.util.List);
    Code:
       0: iload_0
       1: ifne          14
       4: aload_2
       5: ldc_w         #548                // String :
       8: invokevirtual #550                // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      11: ifne          31
      14: aload_1
      15: invokevirtual #538                // Method io/undertow/server/HttpServerExchange.getResponseHeaders:()Lio/undertow/util/HeaderMap;
      18: new           #171                // class io/undertow/util/HttpString
      21: dup
      22: aload_2
      23: invokespecial #543                // Method io/undertow/util/HttpString."<init>":(Ljava/lang/String;)V
      26: aload_3
      27: invokevirtual #553                // Method io/undertow/util/HeaderMap.addAll:(Lio/undertow/util/HttpString;Ljava/util/Collection;)Lio/undertow/util/HeaderMap;
      30: pop
      31: return

  private void lambda$sendWebRequest$7(io.fluxcapacitor.javaclient.web.WebRequest, io.undertow.server.HttpServerExchange, io.fluxcapacitor.common.api.SerializedMessage, java.lang.Throwable);
    Code:
       0: aload         4
       2: invokestatic  #557                // Method io/fluxcapacitor/common/ObjectUtils.unwrapException:(Ljava/lang/Throwable;)Ljava/lang/Throwable;
       5: astore        4
       7: aload         4
       9: ifnonnull     22
      12: aload_0
      13: aload_3
      14: aload_1
      15: aload_2
      16: invokevirtual #563                // Method handleResponse:(Lio/fluxcapacitor/common/api/SerializedMessage;Lio/fluxcapacitor/javaclient/web/WebRequest;Lio/undertow/server/HttpServerExchange;)V
      19: goto          105
      22: aload         4
      24: instanceof    #567                // class java/util/concurrent/TimeoutException
      27: ifeq          69
      30: getstatic     #569                // Field log:Lorg/slf4j/Logger;
      33: ldc_w         #573                // String Request {} timed out (messageId: {}). This is possibly due to a missing handler.
      36: iconst_3
      37: anewarray     #2                  // class java/lang/Object
      40: dup
      41: iconst_0
      42: aload_1
      43: aastore
      44: dup
      45: iconst_1
      46: aload_1
      47: invokevirtual #575                // Method io/fluxcapacitor/javaclient/web/WebRequest.getMessageId:()Ljava/lang/String;
      50: aastore
      51: dup
      52: iconst_2
      53: aload         4
      55: aastore
      56: invokeinterface #578,  3          // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;[Ljava/lang/Object;)V
      61: aload_0
      62: aload_2
      63: invokevirtual #584                // Method sendGatewayTimeout:(Lio/undertow/server/HttpServerExchange;)V
      66: goto          105
      69: getstatic     #569                // Field log:Lorg/slf4j/Logger;
      72: ldc_w         #587                // String Failed to complete {} (messageId: {})
      75: iconst_3
      76: anewarray     #2                  // class java/lang/Object
      79: dup
      80: iconst_0
      81: aload_1
      82: aastore
      83: dup
      84: iconst_1
      85: aload_1
      86: invokevirtual #575                // Method io/fluxcapacitor/javaclient/web/WebRequest.getMessageId:()Ljava/lang/String;
      89: aastore
      90: dup
      91: iconst_2
      92: aload         4
      94: aastore
      95: invokeinterface #589,  3          // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;[Ljava/lang/Object;)V
     100: aload_0
     101: aload_2
     102: invokevirtual #591                // Method sendServerError:(Lio/undertow/server/HttpServerExchange;)V
     105: goto          148
     108: astore        5
     110: getstatic     #569                // Field log:Lorg/slf4j/Logger;
     113: ldc_w         #594                // String Failed to process response {} to request {}
     116: iconst_3
     117: anewarray     #2                  // class java/lang/Object
     120: dup
     121: iconst_0
     122: aload         4
     124: ifnonnull     131
     127: aload_3
     128: goto          133
     131: aload         4
     133: aastore
     134: dup
     135: iconst_1
     136: aload_1
     137: aastore
     138: dup
     139: iconst_2
     140: aload         5
     142: aastore
     143: invokeinterface #589,  3          // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;[Ljava/lang/Object;)V
     148: return
    Exception table:
       from    to  target type
           0   105   108   Class java/lang/Throwable

  private void lambda$sendWebRequest$6(io.fluxcapacitor.common.api.SerializedMessage);
    Code:
       0: aload_0
       1: getfield      #35                 // Field requestGateway:Lio/fluxcapacitor/javaclient/publishing/client/GatewayClient;
       4: getstatic     #596                // Field io/fluxcapacitor/common/Guarantee.SENT:Lio/fluxcapacitor/common/Guarantee;
       7: iconst_1
       8: anewarray     #265                // class io/fluxcapacitor/common/api/SerializedMessage
      11: dup
      12: iconst_0
      13: aload_1
      14: aastore
      15: invokeinterface #602,  3          // InterfaceMethod io/fluxcapacitor/javaclient/publishing/client/GatewayClient.send:(Lio/fluxcapacitor/common/Guarantee;[Lio/fluxcapacitor/common/api/SerializedMessage;)Ljava/util/concurrent/CompletableFuture;
      20: pop
      21: return

  private static void lambda$createWebRequest$5(io.fluxcapacitor.javaclient.web.WebRequest$Builder, io.undertow.util.HeaderValues);
    Code:
       0: aload_1
       1: aload_0
       2: aload_1
       3: invokedynamic #605,  0            // InvokeDynamic #9:accept:(Lio/fluxcapacitor/javaclient/web/WebRequest$Builder;Lio/undertow/util/HeaderValues;)Ljava/util/function/Consumer;
       8: invokevirtual #608                // Method io/undertow/util/HeaderValues.forEach:(Ljava/util/function/Consumer;)V
      11: return

  private static void lambda$createWebRequest$4(io.fluxcapacitor.javaclient.web.WebRequest$Builder, io.undertow.util.HeaderValues, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #611                // Method io/undertow/util/HeaderValues.getHeaderName:()Lio/undertow/util/HttpString;
       5: invokevirtual #170                // Method io/undertow/util/HttpString.toString:()Ljava/lang/String;
       8: invokestatic  #614                // Method io/fluxcapacitor/javaclient/web/WebUtils.fixHeaderName:(Ljava/lang/String;)Ljava/lang/String;
      11: aload_2
      12: invokevirtual #619                // Method io/fluxcapacitor/javaclient/web/WebRequest$Builder.header:(Ljava/lang/String;Ljava/lang/String;)Lio/fluxcapacitor/javaclient/web/WebRequest$Builder;
      15: pop
      16: return

  private void lambda$handleRequest$3(io.undertow.server.HttpServerExchange, java.io.IOException);
    Code:
       0: aload_1
       1: aload_0
       2: aload_2
       3: aload_1
       4: invokedynamic #623,  0            // InvokeDynamic #10:run:(Lio/fluxcapacitor/proxy/ProxyRequestHandler;Ljava/io/IOException;Lio/undertow/server/HttpServerExchange;)Ljava/lang/Runnable;
       9: invokevirtual #627                // Method io/undertow/server/HttpServerExchange.dispatch:(Ljava/lang/Runnable;)Lio/undertow/server/HttpServerExchange;
      12: pop
      13: return

  private void lambda$handleRequest$2(java.io.IOException, io.undertow.server.HttpServerExchange);
    Code:
       0: getstatic     #569                // Field log:Lorg/slf4j/Logger;
       3: ldc_w         #630                // String Failed to read incoming message
       6: aload_1
       7: invokeinterface #632,  3          // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;Ljava/lang/Throwable;)V
      12: aload_0
      13: aload_2
      14: invokevirtual #591                // Method sendServerError:(Lio/undertow/server/HttpServerExchange;)V
      17: return

  private void lambda$handleRequest$1(io.undertow.server.HttpServerExchange, byte[]);
    Code:
       0: aload_1
       1: aload_0
       2: aload_1
       3: aload_2
       4: invokedynamic #635,  0            // InvokeDynamic #11:run:(Lio/fluxcapacitor/proxy/ProxyRequestHandler;Lio/undertow/server/HttpServerExchange;[B)Ljava/lang/Runnable;
       9: invokevirtual #627                // Method io/undertow/server/HttpServerExchange.dispatch:(Ljava/lang/Runnable;)Lio/undertow/server/HttpServerExchange;
      12: pop
      13: return

  private void lambda$handleRequest$0(io.undertow.server.HttpServerExchange, byte[]);
    Code:
       0: aload_0
       1: aload_1
       2: aload_0
       3: aload_1
       4: aload_2
       5: invokevirtual #638                // Method createWebRequest:(Lio/undertow/server/HttpServerExchange;[B)Lio/fluxcapacitor/javaclient/web/WebRequest;
       8: invokevirtual #642                // Method sendWebRequest:(Lio/undertow/server/HttpServerExchange;Lio/fluxcapacitor/javaclient/web/WebRequest;)V
      11: goto          32
      14: astore_3
      15: getstatic     #569                // Field log:Lorg/slf4j/Logger;
      18: ldc_w         #646                // String Failed to create request
      21: aload_3
      22: invokeinterface #632,  3          // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;Ljava/lang/Throwable;)V
      27: aload_0
      28: aload_1
      29: invokevirtual #591                // Method sendServerError:(Lio/undertow/server/HttpServerExchange;)V
      32: return
    Exception table:
       from    to  target type
           0    11    14   Class java/lang/Throwable

  static {};
    Code:
       0: ldc           #11                 // class io/fluxcapacitor/proxy/ProxyRequestHandler
       2: invokestatic  #648                // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #569                // Field log:Lorg/slf4j/Logger;
       8: return
}
