Compiled from "ObjectUtils.java"
class io.fluxcapacitor.common.ObjectUtils$PrefixedThreadFactory implements java.util.concurrent.ThreadFactory {
  private static final java.util.Map<java.lang.String, java.util.concurrent.atomic.AtomicInteger> poolCount;

  private final java.lang.ThreadGroup group;

  private final java.util.concurrent.atomic.AtomicInteger threadNumber;

  private final java.lang.String namePrefix;

  public io.fluxcapacitor.common.ObjectUtils$PrefixedThreadFactory(java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: invokestatic  #7                  // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
       8: invokevirtual #13                 // Method java/lang/Thread.getThreadGroup:()Ljava/lang/ThreadGroup;
      11: putfield      #17                 // Field group:Ljava/lang/ThreadGroup;
      14: aload_0
      15: new           #23                 // class java/util/concurrent/atomic/AtomicInteger
      18: dup
      19: iconst_1
      20: invokespecial #25                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
      23: putfield      #28                 // Field threadNumber:Ljava/util/concurrent/atomic/AtomicInteger;
      26: aload_0
      27: aload_1
      28: getstatic     #32                 // Field poolCount:Ljava/util/Map;
      31: aload_1
      32: invokedynamic #36,  0             // InvokeDynamic #0:apply:()Ljava/util/function/Function;
      37: invokeinterface #40,  3           // InterfaceMethod java/util/Map.computeIfAbsent:(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;
      42: checkcast     #23                 // class java/util/concurrent/atomic/AtomicInteger
      45: invokevirtual #46                 // Method java/util/concurrent/atomic/AtomicInteger.getAndIncrement:()I
      48: invokedynamic #50,  0             // InvokeDynamic #1:makeConcatWithConstants:(Ljava/lang/String;I)Ljava/lang/String;
      53: putfield      #54                 // Field namePrefix:Ljava/lang/String;
      56: return

  public java.lang.Thread newThread(java.lang.Runnable);
    Code:
       0: new           #8                  // class java/lang/Thread
       3: dup
       4: aload_0
       5: getfield      #17                 // Field group:Ljava/lang/ThreadGroup;
       8: aload_1
       9: aload_0
      10: getfield      #54                 // Field namePrefix:Ljava/lang/String;
      13: aload_0
      14: getfield      #28                 // Field threadNumber:Ljava/util/concurrent/atomic/AtomicInteger;
      17: invokevirtual #46                 // Method java/util/concurrent/atomic/AtomicInteger.getAndIncrement:()I
      20: invokedynamic #58,  0             // InvokeDynamic #2:makeConcatWithConstants:(Ljava/lang/String;I)Ljava/lang/String;
      25: lconst_0
      26: invokespecial #59                 // Method java/lang/Thread."<init>":(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;J)V
      29: astore_2
      30: aload_2
      31: invokevirtual #62                 // Method java/lang/Thread.isDaemon:()Z
      34: ifeq          42
      37: aload_2
      38: iconst_0
      39: invokevirtual #66                 // Method java/lang/Thread.setDaemon:(Z)V
      42: aload_2
      43: invokevirtual #70                 // Method java/lang/Thread.getPriority:()I
      46: iconst_5
      47: if_icmpeq     55
      50: aload_2
      51: iconst_5
      52: invokevirtual #73                 // Method java/lang/Thread.setPriority:(I)V
      55: aload_2
      56: areturn

  private static java.util.concurrent.atomic.AtomicInteger lambda$new$0(java.lang.String);
    Code:
       0: new           #23                 // class java/util/concurrent/atomic/AtomicInteger
       3: dup
       4: iconst_1
       5: invokespecial #25                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
       8: areturn

  static {};
    Code:
       0: new           #76                 // class java/util/concurrent/ConcurrentHashMap
       3: dup
       4: invokespecial #78                 // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
       7: putstatic     #32                 // Field poolCount:Ljava/util/Map;
      10: return
}
