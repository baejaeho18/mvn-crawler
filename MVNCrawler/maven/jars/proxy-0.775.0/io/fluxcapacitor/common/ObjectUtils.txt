Compiled from "ObjectUtils.java"
public class io.fluxcapacitor.common.ObjectUtils {
  private static final java.util.function.Predicate<java.lang.Object> noOpPredicate;

  private static final java.util.function.BiPredicate<java.lang.Object, java.lang.Object> noOpBiPredicate;

  private static final java.util.concurrent.atomic.AtomicInteger threadNumber;

  public io.fluxcapacitor.common.ObjectUtils();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public static <T> java.util.function.Predicate<T> noOpPredicate();
    Code:
       0: getstatic     #7                  // Field noOpPredicate:Ljava/util/function/Predicate;
       3: areturn

  public static <T, U> java.util.function.BiPredicate<T, U> noOpBiPredicate();
    Code:
       0: getstatic     #13                 // Field noOpBiPredicate:Ljava/util/function/BiPredicate;
       3: areturn

  public static <T> java.util.function.Predicate<T> distinctByKey(java.util.function.Function<? super T, ?>);
    Code:
       0: invokestatic  #17                 // Method java/util/concurrent/ConcurrentHashMap.newKeySet:()Ljava/util/concurrent/ConcurrentHashMap$KeySetView;
       3: astore_1
       4: aload_1
       5: aload_0
       6: invokedynamic #23,  0             // InvokeDynamic #0:test:(Ljava/util/Set;Ljava/util/function/Function;)Ljava/util/function/Predicate;
      11: areturn

  public static <T> java.util.stream.Stream<T> iterate(T, java.util.function.UnaryOperator<T>, java.util.function.Predicate<T>);
    Code:
       0: new           #27                 // class io/fluxcapacitor/common/ObjectUtils$BreakingSpliterator
       3: dup
       4: aload_0
       5: aload_1
       6: invokestatic  #29                 // InterfaceMethod java/util/stream/Stream.iterate:(Ljava/lang/Object;Ljava/util/function/UnaryOperator;)Ljava/util/stream/Stream;
       9: aload_2
      10: invokespecial #35                 // Method io/fluxcapacitor/common/ObjectUtils$BreakingSpliterator."<init>":(Ljava/util/stream/Stream;Ljava/util/function/Predicate;)V
      13: iconst_0
      14: invokestatic  #38                 // Method java/util/stream/StreamSupport.stream:(Ljava/util/Spliterator;Z)Ljava/util/stream/Stream;
      17: areturn

  public static <T> java.util.List<T> deduplicate(java.util.List<T>);
    Code:
       0: aload_0
       1: invokestatic  #44                 // InterfaceMethod java/util/function/UnaryOperator.identity:()Ljava/util/function/UnaryOperator;
       4: invokestatic  #50                 // Method deduplicate:(Ljava/util/List;Ljava/util/function/Function;)Ljava/util/List;
       7: areturn

  public static <T> java.util.List<T> deduplicate(java.util.List<T>, java.util.function.Function<T, ?>);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: invokestatic  #54                 // Method deduplicate:(Ljava/util/List;Ljava/util/function/Function;Z)Ljava/util/List;
       6: areturn

  public static <T> java.util.List<T> deduplicate(java.util.List<T>, java.util.function.Function<T, ?>, boolean);
    Code:
       0: new           #57                 // class java/util/ArrayList
       3: dup
       4: aload_0
       5: invokespecial #59                 // Method java/util/ArrayList."<init>":(Ljava/util/Collection;)V
       8: astore_0
       9: new           #62                 // class java/util/HashSet
      12: dup
      13: invokespecial #64                 // Method java/util/HashSet."<init>":()V
      16: astore_3
      17: iload_2
      18: ifeq          38
      21: aload_0
      22: aload_3
      23: aload_1
      24: invokedynamic #65,  0             // InvokeDynamic #1:test:(Ljava/util/Set;Ljava/util/function/Function;)Ljava/util/function/Predicate;
      29: invokeinterface #66,  2           // InterfaceMethod java/util/List.removeIf:(Ljava/util/function/Predicate;)Z
      34: pop
      35: goto          94
      38: aload_0
      39: aload_0
      40: invokeinterface #72,  1           // InterfaceMethod java/util/List.size:()I
      45: invokeinterface #76,  2           // InterfaceMethod java/util/List.listIterator:(I)Ljava/util/ListIterator;
      50: astore        4
      52: aload         4
      54: invokeinterface #80,  1           // InterfaceMethod java/util/ListIterator.hasPrevious:()Z
      59: ifeq          94
      62: aload_3
      63: aload_1
      64: aload         4
      66: invokeinterface #86,  1           // InterfaceMethod java/util/ListIterator.previous:()Ljava/lang/Object;
      71: invokeinterface #90,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      76: invokeinterface #96,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      81: ifne          52
      84: aload         4
      86: invokeinterface #102,  1          // InterfaceMethod java/util/ListIterator.remove:()V
      91: goto          52
      94: aload_0
      95: areturn

  public static java.util.stream.Stream<?> asStream(java.lang.Object);
    Code:
       0: aload_0
       1: ifnonnull     8
       4: invokestatic  #105                // InterfaceMethod java/util/stream/Stream.empty:()Ljava/util/stream/Stream;
       7: areturn
       8: aload_0
       9: instanceof    #109                // class java/util/Collection
      12: ifeq          25
      15: aload_0
      16: checkcast     #109                // class java/util/Collection
      19: invokeinterface #111,  1          // InterfaceMethod java/util/Collection.stream:()Ljava/util/stream/Stream;
      24: areturn
      25: aload_0
      26: instanceof    #30                 // class java/util/stream/Stream
      29: ifeq          37
      32: aload_0
      33: checkcast     #30                 // class java/util/stream/Stream
      36: areturn
      37: aload_0
      38: instanceof    #113                // class java/util/Optional
      41: ifeq          52
      44: aload_0
      45: checkcast     #113                // class java/util/Optional
      48: invokevirtual #115                // Method java/util/Optional.stream:()Ljava/util/stream/Stream;
      51: areturn
      52: aload_0
      53: invokestatic  #116                // InterfaceMethod java/util/stream/Stream.of:(Ljava/lang/Object;)Ljava/util/stream/Stream;
      56: areturn

  public static java.util.function.Consumer<java.lang.Runnable> ifTrue(boolean);
    Code:
       0: iload_0
       1: ifeq          12
       4: invokedynamic #120,  0            // InvokeDynamic #2:accept:()Ljava/util/function/Consumer;
       9: goto          17
      12: invokedynamic #124,  0            // InvokeDynamic #3:accept:()Ljava/util/function/Consumer;
      17: areturn

  public static java.lang.Object forceThrow(java.lang.Throwable);
    Code:
       0: aload_0
       1: athrow
       2: astore_1
       3: aload_1
       4: athrow
    Exception table:
       from    to  target type
           0     2     2   Class java/lang/Throwable

  public static <T> T safelyCall(java.util.concurrent.Callable<T>);
    Code:
       0: aload_0
       1: invokeinterface #133,  1          // InterfaceMethod java/util/concurrent/Callable.call:()Ljava/lang/Object;
       6: areturn
       7: astore_1
       8: aload_1
       9: athrow
    Exception table:
       from    to  target type
           0     6     7   Class java/lang/Throwable

  public static <T> java.util.function.Supplier<T> safelySupply(java.util.concurrent.Callable<T>);
    Code:
       0: aload_0
       1: invokedynamic #138,  0            // InvokeDynamic #4:get:(Ljava/util/concurrent/Callable;)Ljava/util/function/Supplier;
       6: areturn

  public static java.lang.Runnable asRunnable(java.util.concurrent.Callable<?>);
    Code:
       0: aload_0
       1: invokedynamic #142,  0            // InvokeDynamic #5:run:(Ljava/util/concurrent/Callable;)Ljava/lang/Runnable;
       6: areturn

  public static byte[] getBytes(java.nio.ByteBuffer);
    Code:
       0: aload_0
       1: invokevirtual #146                // Method java/nio/ByteBuffer.duplicate:()Ljava/nio/ByteBuffer;
       4: astore_0
       5: aload_0
       6: invokevirtual #152                // Method java/nio/ByteBuffer.remaining:()I
       9: newarray       byte
      11: astore_1
      12: aload_0
      13: aload_1
      14: invokevirtual #155                // Method java/nio/ByteBuffer.get:([B)Ljava/nio/ByteBuffer;
      17: pop
      18: aload_1
      19: areturn

  public static java.lang.Throwable unwrapException(java.lang.Throwable);
    Code:
       0: aload_0
       1: ifnonnull     6
       4: aconst_null
       5: areturn
       6: aload_0
       7: instanceof    #158                // class java/util/concurrent/CompletionException
      10: ifne          20
      13: aload_0
      14: instanceof    #160                // class java/util/concurrent/ExecutionException
      17: ifeq          28
      20: aload_0
      21: invokevirtual #162                // Method java/lang/Throwable.getCause:()Ljava/lang/Throwable;
      24: invokestatic  #166                // Method unwrapException:(Ljava/lang/Throwable;)Ljava/lang/Throwable;
      27: areturn
      28: aload_0
      29: areturn

  public static java.util.Properties asProperties(java.lang.String);
    Code:
       0: new           #170                // class java/util/Properties
       3: dup
       4: invokespecial #172                // Method java/util/Properties."<init>":()V
       7: astore_1
       8: aload_1
       9: new           #173                // class java/io/StringReader
      12: dup
      13: aload_0
      14: invokespecial #175                // Method java/io/StringReader."<init>":(Ljava/lang/String;)V
      17: invokevirtual #178                // Method java/util/Properties.load:(Ljava/io/Reader;)V
      20: aload_1
      21: areturn
      22: astore_1
      23: aload_1
      24: athrow
    Exception table:
       from    to  target type
           0    21    22   Class java/lang/Throwable

  public static java.util.Properties copyOf(java.util.Properties);
    Code:
       0: new           #170                // class java/util/Properties
       3: dup
       4: invokespecial #172                // Method java/util/Properties."<init>":()V
       7: astore_1
       8: aload_1
       9: aload_0
      10: invokevirtual #182                // Method java/util/Properties.putAll:(Ljava/util/Map;)V
      13: aload_1
      14: areturn

  public static java.util.Properties merge(java.util.Properties, java.util.Properties);
    Code:
       0: aload_0
       1: invokestatic  #186                // Method copyOf:(Ljava/util/Properties;)Ljava/util/Properties;
       4: astore_2
       5: aload_2
       6: aload_1
       7: invokevirtual #182                // Method java/util/Properties.putAll:(Ljava/util/Map;)V
      10: aload_2
      11: areturn

  public static <T> io.fluxcapacitor.common.MemoizingSupplier<T> memoize(java.util.function.Supplier<T>);
    Code:
       0: aload_0
       1: instanceof    #190                // class io/fluxcapacitor/common/MemoizingSupplier
       4: ifeq          16
       7: aload_0
       8: checkcast     #190                // class io/fluxcapacitor/common/MemoizingSupplier
      11: astore_1
      12: aload_1
      13: goto          24
      16: new           #190                // class io/fluxcapacitor/common/MemoizingSupplier
      19: dup
      20: aload_0
      21: invokespecial #192                // Method io/fluxcapacitor/common/MemoizingSupplier."<init>":(Ljava/util/function/Supplier;)V
      24: areturn

  public static <K, V> io.fluxcapacitor.common.MemoizingFunction<K, V> memoize(java.util.function.Function<K, V>);
    Code:
       0: aload_0
       1: instanceof    #195                // class io/fluxcapacitor/common/MemoizingFunction
       4: ifeq          16
       7: aload_0
       8: checkcast     #195                // class io/fluxcapacitor/common/MemoizingFunction
      11: astore_1
      12: aload_1
      13: goto          24
      16: new           #195                // class io/fluxcapacitor/common/MemoizingFunction
      19: dup
      20: aload_0
      21: invokespecial #197                // Method io/fluxcapacitor/common/MemoizingFunction."<init>":(Ljava/util/function/Function;)V
      24: areturn

  public static <T, U, R> io.fluxcapacitor.common.MemoizingBiFunction<T, U, R> memoize(java.util.function.BiFunction<T, U, R>);
    Code:
       0: aload_0
       1: instanceof    #200                // class io/fluxcapacitor/common/MemoizingBiFunction
       4: ifeq          16
       7: aload_0
       8: checkcast     #200                // class io/fluxcapacitor/common/MemoizingBiFunction
      11: astore_1
      12: aload_1
      13: goto          24
      16: new           #200                // class io/fluxcapacitor/common/MemoizingBiFunction
      19: dup
      20: aload_0
      21: invokespecial #202                // Method io/fluxcapacitor/common/MemoizingBiFunction."<init>":(Ljava/util/function/BiFunction;)V
      24: areturn

  public static java.lang.String newThreadName(java.lang.String);
    Code:
       0: aload_0
       1: getstatic     #205                // Field threadNumber:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #209                // Method java/util/concurrent/atomic/AtomicInteger.getAndIncrement:()I
       7: invokedynamic #214,  0            // InvokeDynamic #6:makeConcatWithConstants:(Ljava/lang/String;I)Ljava/lang/String;
      12: areturn

  public static java.util.concurrent.ThreadFactory newThreadFactory(java.lang.String);
    Code:
       0: new           #218                // class io/fluxcapacitor/common/ObjectUtils$PrefixedThreadFactory
       3: dup
       4: aload_0
       5: invokespecial #220                // Method io/fluxcapacitor/common/ObjectUtils$PrefixedThreadFactory."<init>":(Ljava/lang/String;)V
       8: areturn

  public static java.util.concurrent.ExecutorService newNamedWorkStealingPool(int, java.lang.String);
    Code:
       0: new           #221                // class java/util/concurrent/ForkJoinPool
       3: dup
       4: iload_0
       5: aload_1
       6: invokedynamic #223,  0            // InvokeDynamic #7:newThread:(Ljava/lang/String;)Ljava/util/concurrent/ForkJoinPool$ForkJoinWorkerThreadFactory;
      11: aconst_null
      12: iconst_1
      13: invokespecial #227                // Method java/util/concurrent/ForkJoinPool."<init>":(ILjava/util/concurrent/ForkJoinPool$ForkJoinWorkerThreadFactory;Ljava/lang/Thread$UncaughtExceptionHandler;Z)V
      16: areturn

  private static java.util.concurrent.ForkJoinWorkerThread lambda$newNamedWorkStealingPool$7(java.lang.String, java.util.concurrent.ForkJoinPool);
    Code:
       0: getstatic     #230                // Field java/util/concurrent/ForkJoinPool.defaultForkJoinWorkerThreadFactory:Ljava/util/concurrent/ForkJoinPool$ForkJoinWorkerThreadFactory;
       3: aload_1
       4: invokeinterface #234,  2          // InterfaceMethod java/util/concurrent/ForkJoinPool$ForkJoinWorkerThreadFactory.newThread:(Ljava/util/concurrent/ForkJoinPool;)Ljava/util/concurrent/ForkJoinWorkerThread;
       9: astore_2
      10: aload_2
      11: aload_0
      12: aload_2
      13: invokevirtual #239                // Method java/util/concurrent/ForkJoinWorkerThread.getPoolIndex:()I
      16: invokedynamic #244,  0            // InvokeDynamic #8:makeConcatWithConstants:(Ljava/lang/String;I)Ljava/lang/String;
      21: invokevirtual #245                // Method java/util/concurrent/ForkJoinWorkerThread.setName:(Ljava/lang/String;)V
      24: aload_2
      25: areturn

  private static void lambda$asRunnable$6(java.util.concurrent.Callable);
    Code:
       0: aload_0
       1: invokestatic  #248                // Method safelyCall:(Ljava/util/concurrent/Callable;)Ljava/lang/Object;
       4: pop
       5: return

  private static java.lang.Object lambda$safelySupply$5(java.util.concurrent.Callable);
    Code:
       0: aload_0
       1: invokestatic  #248                // Method safelyCall:(Ljava/util/concurrent/Callable;)Ljava/lang/Object;
       4: areturn

  private static void lambda$ifTrue$4(java.lang.Runnable);
    Code:
       0: return

  private static boolean lambda$deduplicate$3(java.util.Set, java.util.function.Function, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokeinterface #90,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
       8: invokeinterface #96,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      13: ifne          20
      16: iconst_1
      17: goto          21
      20: iconst_0
      21: ireturn

  private static boolean lambda$distinctByKey$2(java.util.Set, java.util.function.Function, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokeinterface #90,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
       8: invokeinterface #96,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      13: ireturn

  private static boolean lambda$static$1(java.lang.Object, java.lang.Object);
    Code:
       0: iconst_1
       1: ireturn

  private static boolean lambda$static$0(java.lang.Object);
    Code:
       0: iconst_1
       1: ireturn

  static {};
    Code:
       0: invokedynamic #252,  0            // InvokeDynamic #9:test:()Ljava/util/function/Predicate;
       5: putstatic     #7                  // Field noOpPredicate:Ljava/util/function/Predicate;
       8: invokedynamic #255,  0            // InvokeDynamic #10:test:()Ljava/util/function/BiPredicate;
      13: putstatic     #13                 // Field noOpBiPredicate:Ljava/util/function/BiPredicate;
      16: new           #210                // class java/util/concurrent/atomic/AtomicInteger
      19: dup
      20: iconst_1
      21: invokespecial #258                // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
      24: putstatic     #205                // Field threadNumber:Ljava/util/concurrent/atomic/AtomicInteger;
      27: return
}
