Compiled from "ThrowingBiConsumer.java"
public interface io.fluxcapacitor.common.ThrowingBiConsumer<T, U> {
  public abstract void accept(T, U) throws java.lang.Exception;

  public default io.fluxcapacitor.common.ThrowingBiConsumer<T, U> andThen(io.fluxcapacitor.common.ThrowingBiConsumer<? super T, ? super U>);
    Code:
       0: aload_1
       1: ifnonnull     14
       4: new           #1                  // class java/lang/NullPointerException
       7: dup
       8: ldc           #3                  // String after is marked non-null but is null
      10: invokespecial #5                  // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: aload_0
      15: aload_1
      16: invokedynamic #9,  0              // InvokeDynamic #0:accept:(Lio/fluxcapacitor/common/ThrowingBiConsumer;Lio/fluxcapacitor/common/ThrowingBiConsumer;)Lio/fluxcapacitor/common/ThrowingBiConsumer;
      21: areturn

  private void lambda$andThen$0(io.fluxcapacitor.common.ThrowingBiConsumer, java.lang.Object, java.lang.Object) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_2
       2: aload_3
       3: invokeinterface #13,  3           // InterfaceMethod accept:(Ljava/lang/Object;Ljava/lang/Object;)V
       8: aload_1
       9: aload_2
      10: aload_3
      11: invokeinterface #13,  3           // InterfaceMethod accept:(Ljava/lang/Object;Ljava/lang/Object;)V
      16: return
}
