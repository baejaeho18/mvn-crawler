Compiled from "ThrowingBiFunction.java"
public interface io.fluxcapacitor.common.ThrowingBiFunction<T, U, R> {
  public abstract R apply(T, U) throws java.lang.Exception;

  public default <V> io.fluxcapacitor.common.ThrowingBiFunction<T, U, V> andThen(io.fluxcapacitor.common.ThrowingFunction<? super R, ? extends V>);
    Code:
       0: aload_1
       1: ifnonnull     14
       4: new           #1                  // class java/lang/NullPointerException
       7: dup
       8: ldc           #3                  // String after is marked non-null but is null
      10: invokespecial #5                  // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: aload_0
      15: aload_1
      16: invokedynamic #9,  0              // InvokeDynamic #0:apply:(Lio/fluxcapacitor/common/ThrowingBiFunction;Lio/fluxcapacitor/common/ThrowingFunction;)Lio/fluxcapacitor/common/ThrowingBiFunction;
      21: areturn

  private java.lang.Object lambda$andThen$0(io.fluxcapacitor.common.ThrowingFunction, java.lang.Object, java.lang.Object) throws java.lang.Exception;
    Code:
       0: aload_1
       1: aload_0
       2: aload_2
       3: aload_3
       4: invokeinterface #13,  3           // InterfaceMethod apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       9: invokeinterface #18,  2           // InterfaceMethod io/fluxcapacitor/common/ThrowingFunction.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      14: areturn
}
