Compiled from "HandlerFilter.java"
public interface io.fluxcapacitor.common.handling.HandlerFilter {
  public static final io.fluxcapacitor.common.handling.HandlerFilter ALWAYS_HANDLE;

  public abstract boolean test(java.lang.Class<?>, java.lang.reflect.Executable);

  public default io.fluxcapacitor.common.handling.HandlerFilter and(io.fluxcapacitor.common.handling.HandlerFilter);
    Code:
       0: aload_1
       1: ifnonnull     14
       4: new           #1                  // class java/lang/NullPointerException
       7: dup
       8: ldc           #3                  // String other is marked non-null but is null
      10: invokespecial #5                  // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: aload_0
      15: aload_1
      16: invokedynamic #9,  0              // InvokeDynamic #0:test:(Lio/fluxcapacitor/common/handling/HandlerFilter;Lio/fluxcapacitor/common/handling/HandlerFilter;)Lio/fluxcapacitor/common/handling/HandlerFilter;
      21: areturn

  public default io.fluxcapacitor.common.handling.HandlerFilter negate();
    Code:
       0: aload_0
       1: invokedynamic #13,  0             // InvokeDynamic #1:test:(Lio/fluxcapacitor/common/handling/HandlerFilter;)Lio/fluxcapacitor/common/handling/HandlerFilter;
       6: areturn

  public default io.fluxcapacitor.common.handling.HandlerFilter or(io.fluxcapacitor.common.handling.HandlerFilter);
    Code:
       0: aload_1
       1: ifnonnull     14
       4: new           #1                  // class java/lang/NullPointerException
       7: dup
       8: ldc           #3                  // String other is marked non-null but is null
      10: invokespecial #5                  // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: aload_0
      15: aload_1
      16: invokedynamic #16,  0             // InvokeDynamic #2:test:(Lio/fluxcapacitor/common/handling/HandlerFilter;Lio/fluxcapacitor/common/handling/HandlerFilter;)Lio/fluxcapacitor/common/handling/HandlerFilter;
      21: areturn

  private boolean lambda$or$3(io.fluxcapacitor.common.handling.HandlerFilter, java.lang.Class, java.lang.reflect.Executable);
    Code:
       0: aload_0
       1: aload_2
       2: aload_3
       3: invokeinterface #17,  3           // InterfaceMethod test:(Ljava/lang/Class;Ljava/lang/reflect/Executable;)Z
       8: ifne          22
      11: aload_1
      12: aload_2
      13: aload_3
      14: invokeinterface #17,  3           // InterfaceMethod test:(Ljava/lang/Class;Ljava/lang/reflect/Executable;)Z
      19: ifeq          26
      22: iconst_1
      23: goto          27
      26: iconst_0
      27: ireturn

  private boolean lambda$negate$2(java.lang.Class, java.lang.reflect.Executable);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokeinterface #17,  3           // InterfaceMethod test:(Ljava/lang/Class;Ljava/lang/reflect/Executable;)Z
       8: ifne          15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: ireturn

  private boolean lambda$and$1(io.fluxcapacitor.common.handling.HandlerFilter, java.lang.Class, java.lang.reflect.Executable);
    Code:
       0: aload_0
       1: aload_2
       2: aload_3
       3: invokeinterface #17,  3           // InterfaceMethod test:(Ljava/lang/Class;Ljava/lang/reflect/Executable;)Z
       8: ifeq          26
      11: aload_1
      12: aload_2
      13: aload_3
      14: invokeinterface #17,  3           // InterfaceMethod test:(Ljava/lang/Class;Ljava/lang/reflect/Executable;)Z
      19: ifeq          26
      22: iconst_1
      23: goto          27
      26: iconst_0
      27: ireturn

  private static boolean lambda$static$0(java.lang.Class, java.lang.reflect.Executable);
    Code:
       0: iconst_1
       1: ireturn

  static {};
    Code:
       0: invokedynamic #22,  0             // InvokeDynamic #3:test:()Lio/fluxcapacitor/common/handling/HandlerFilter;
       5: putstatic     #25                 // Field ALWAYS_HANDLE:Lio/fluxcapacitor/common/handling/HandlerFilter;
       8: return
}
