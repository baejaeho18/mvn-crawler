Compiled from "HandlerInspector.java"
public class io.fluxcapacitor.common.handling.HandlerInspector$DefaultHandler<M> implements io.fluxcapacitor.common.handling.Handler<M> {
  private static final org.slf4j.Logger log;

  private final java.util.function.Supplier<?> targetSupplier;

  private final io.fluxcapacitor.common.handling.HandlerMatcher<java.lang.Object, M> invoker;

  public java.lang.Object getTarget();
    Code:
       0: aload_0
       1: getfield      #1                  // Field targetSupplier:Ljava/util/function/Supplier;
       4: invokeinterface #7,  1            // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
       9: areturn

  public java.util.Optional<io.fluxcapacitor.common.handling.HandlerInvoker> findInvoker(M);
    Code:
       0: aload_0
       1: getfield      #13                 // Field invoker:Lio/fluxcapacitor/common/handling/HandlerMatcher;
       4: aload_0
       5: invokevirtual #17                 // Method getTarget:()Ljava/lang/Object;
       8: aload_1
       9: invokeinterface #20,  3           // InterfaceMethod io/fluxcapacitor/common/handling/HandlerMatcher.findInvoker:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Optional;
      14: areturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: invokevirtual #17                 // Method getTarget:()Ljava/lang/Object;
       4: invokestatic  #26                 // Method java/util/Optional.ofNullable:(Ljava/lang/Object;)Ljava/util/Optional;
       7: invokedynamic #32,  0             // InvokeDynamic #0:apply:()Ljava/util/function/Function;
      12: invokevirtual #36                 // Method java/util/Optional.map:(Ljava/util/function/Function;)Ljava/util/Optional;
      15: ldc           #40                 // String DefaultHandler
      17: invokevirtual #42                 // Method java/util/Optional.orElse:(Ljava/lang/Object;)Ljava/lang/Object;
      20: checkcast     #46                 // class java/lang/String
      23: areturn

  public io.fluxcapacitor.common.handling.HandlerInspector$DefaultHandler(java.util.function.Supplier<?>, io.fluxcapacitor.common.handling.HandlerMatcher<java.lang.Object, M>);
    Code:
       0: aload_0
       1: invokespecial #48                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #1                  // Field targetSupplier:Ljava/util/function/Supplier;
       9: aload_0
      10: aload_2
      11: putfield      #13                 // Field invoker:Lio/fluxcapacitor/common/handling/HandlerMatcher;
      14: return

  private static java.lang.String lambda$toString$0(java.lang.Object);
    Code:
       0: aload_0
       1: invokevirtual #54                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
       4: invokevirtual #58                 // Method java/lang/Class.getSimpleName:()Ljava/lang/String;
       7: astore_1
       8: ldc           #64                 // String \"%s\"
      10: iconst_1
      11: anewarray     #49                 // class java/lang/Object
      14: dup
      15: iconst_0
      16: aload_1
      17: invokevirtual #66                 // Method java/lang/String.isEmpty:()Z
      20: ifeq          30
      23: aload_0
      24: invokevirtual #54                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      27: goto          31
      30: aload_1
      31: aastore
      32: invokestatic  #70                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      35: areturn

  static {};
    Code:
       0: ldc           #2                  // class io/fluxcapacitor/common/handling/HandlerInspector$DefaultHandler
       2: invokestatic  #74                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #80                 // Field log:Lorg/slf4j/Logger;
       8: return
}
