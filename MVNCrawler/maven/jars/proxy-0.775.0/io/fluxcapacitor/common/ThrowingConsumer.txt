Compiled from "ThrowingConsumer.java"
public interface io.fluxcapacitor.common.ThrowingConsumer<T> {
  public abstract void accept(T) throws java.lang.Exception;

  public default io.fluxcapacitor.common.ThrowingConsumer<T> andThen(io.fluxcapacitor.common.ThrowingConsumer<? super T>);
    Code:
       0: aload_1
       1: ifnonnull     14
       4: new           #1                  // class java/lang/NullPointerException
       7: dup
       8: ldc           #3                  // String after is marked non-null but is null
      10: invokespecial #5                  // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: aload_0
      15: aload_1
      16: invokedynamic #9,  0              // InvokeDynamic #0:accept:(Lio/fluxcapacitor/common/ThrowingConsumer;Lio/fluxcapacitor/common/ThrowingConsumer;)Lio/fluxcapacitor/common/ThrowingConsumer;
      21: areturn

  private void lambda$andThen$0(io.fluxcapacitor.common.ThrowingConsumer, java.lang.Object) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_2
       2: invokeinterface #13,  2           // InterfaceMethod accept:(Ljava/lang/Object;)V
       7: aload_1
       8: aload_2
       9: invokeinterface #13,  2           // InterfaceMethod accept:(Ljava/lang/Object;)V
      14: return
}
