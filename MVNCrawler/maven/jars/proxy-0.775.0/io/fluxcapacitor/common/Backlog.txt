Compiled from "Backlog.java"
public class io.fluxcapacitor.common.Backlog<T> implements io.fluxcapacitor.common.Monitored<java.util.List<T>> {
  private static final org.slf4j.Logger log;

  private final int maxBatchSize;

  private final java.util.Queue<T> queue;

  private final io.fluxcapacitor.common.ThrowingFunction<java.util.List<T>, java.util.concurrent.CompletableFuture<?>> consumer;

  private final io.fluxcapacitor.common.ErrorHandler<java.util.List<T>> errorHandler;

  private final java.util.concurrent.ExecutorService executorService;

  private final java.util.concurrent.atomic.AtomicBoolean flushing;

  private final java.util.concurrent.atomic.AtomicLong insertPosition;

  private final java.util.concurrent.atomic.AtomicLong flushPosition;

  private final java.util.concurrent.ConcurrentSkipListMap<java.lang.Long, java.util.concurrent.CompletableFuture<java.lang.Void>> results;

  private final java.util.Collection<java.util.function.Consumer<java.util.List<T>>> monitors;

  public static <T> io.fluxcapacitor.common.Backlog<T> forConsumer(io.fluxcapacitor.common.ThrowingConsumer<java.util.List<T>>);
    Code:
       0: aload_0
       1: sipush        1024
       4: invokestatic  #1                  // Method forConsumer:(Lio/fluxcapacitor/common/ThrowingConsumer;I)Lio/fluxcapacitor/common/Backlog;
       7: areturn

  public static <T> io.fluxcapacitor.common.Backlog<T> forConsumer(io.fluxcapacitor.common.ThrowingConsumer<java.util.List<T>>, int);
    Code:
       0: aload_0
       1: iload_1
       2: aload_0
       3: invokedynamic #7,  0              // InvokeDynamic #0:handleError:(Lio/fluxcapacitor/common/ThrowingConsumer;)Lio/fluxcapacitor/common/ErrorHandler;
       8: invokestatic  #11                 // Method forConsumer:(Lio/fluxcapacitor/common/ThrowingConsumer;ILio/fluxcapacitor/common/ErrorHandler;)Lio/fluxcapacitor/common/Backlog;
      11: areturn

  public static <T> io.fluxcapacitor.common.Backlog<T> forConsumer(io.fluxcapacitor.common.ThrowingConsumer<java.util.List<T>>, int, io.fluxcapacitor.common.ErrorHandler<java.util.List<T>>);
    Code:
       0: new           #2                  // class io/fluxcapacitor/common/Backlog
       3: dup
       4: aload_0
       5: invokedynamic #14,  0             // InvokeDynamic #1:apply:(Lio/fluxcapacitor/common/ThrowingConsumer;)Lio/fluxcapacitor/common/ThrowingFunction;
      10: iload_1
      11: aload_2
      12: invokespecial #18                 // Method "<init>":(Lio/fluxcapacitor/common/ThrowingFunction;ILio/fluxcapacitor/common/ErrorHandler;)V
      15: areturn

  public static <T> io.fluxcapacitor.common.Backlog<T> forAsyncConsumer(io.fluxcapacitor.common.ThrowingFunction<java.util.List<T>, java.util.concurrent.CompletableFuture<?>>);
    Code:
       0: aload_0
       1: sipush        1024
       4: invokestatic  #22                 // Method forAsyncConsumer:(Lio/fluxcapacitor/common/ThrowingFunction;I)Lio/fluxcapacitor/common/Backlog;
       7: areturn

  public static <T> io.fluxcapacitor.common.Backlog<T> forAsyncConsumer(io.fluxcapacitor.common.ThrowingFunction<java.util.List<T>, java.util.concurrent.CompletableFuture<?>>, int);
    Code:
       0: aload_0
       1: iload_1
       2: aload_0
       3: invokedynamic #26,  0             // InvokeDynamic #2:handleError:(Lio/fluxcapacitor/common/ThrowingFunction;)Lio/fluxcapacitor/common/ErrorHandler;
       8: invokestatic  #29                 // Method forAsyncConsumer:(Lio/fluxcapacitor/common/ThrowingFunction;ILio/fluxcapacitor/common/ErrorHandler;)Lio/fluxcapacitor/common/Backlog;
      11: areturn

  public static <T> io.fluxcapacitor.common.Backlog<T> forAsyncConsumer(io.fluxcapacitor.common.ThrowingFunction<java.util.List<T>, java.util.concurrent.CompletableFuture<?>>, int, io.fluxcapacitor.common.ErrorHandler<java.util.List<T>>);
    Code:
       0: new           #2                  // class io/fluxcapacitor/common/Backlog
       3: dup
       4: aload_0
       5: iload_1
       6: aload_2
       7: invokespecial #18                 // Method "<init>":(Lio/fluxcapacitor/common/ThrowingFunction;ILio/fluxcapacitor/common/ErrorHandler;)V
      10: areturn

  protected io.fluxcapacitor.common.Backlog(io.fluxcapacitor.common.ThrowingFunction<java.util.List<T>, java.util.concurrent.CompletableFuture<?>>);
    Code:
       0: aload_0
       1: aload_1
       2: sipush        1024
       5: invokespecial #32                 // Method "<init>":(Lio/fluxcapacitor/common/ThrowingFunction;I)V
       8: return

  protected io.fluxcapacitor.common.Backlog(io.fluxcapacitor.common.ThrowingFunction<java.util.List<T>, java.util.concurrent.CompletableFuture<?>>, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: aload_1
       4: invokedynamic #35,  0             // InvokeDynamic #3:handleError:(Lio/fluxcapacitor/common/ThrowingFunction;)Lio/fluxcapacitor/common/ErrorHandler;
       9: invokespecial #18                 // Method "<init>":(Lio/fluxcapacitor/common/ThrowingFunction;ILio/fluxcapacitor/common/ErrorHandler;)V
      12: return

  protected io.fluxcapacitor.common.Backlog(io.fluxcapacitor.common.ThrowingFunction<java.util.List<T>, java.util.concurrent.CompletableFuture<?>>, int, io.fluxcapacitor.common.ErrorHandler<java.util.List<T>>);
    Code:
       0: aload_0
       1: invokespecial #36                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #41                 // class java/util/concurrent/ConcurrentLinkedQueue
       8: dup
       9: invokespecial #43                 // Method java/util/concurrent/ConcurrentLinkedQueue."<init>":()V
      12: putfield      #44                 // Field queue:Ljava/util/Queue;
      15: aload_0
      16: new           #48                 // class java/util/concurrent/atomic/AtomicBoolean
      19: dup
      20: invokespecial #50                 // Method java/util/concurrent/atomic/AtomicBoolean."<init>":()V
      23: putfield      #51                 // Field flushing:Ljava/util/concurrent/atomic/AtomicBoolean;
      26: aload_0
      27: new           #55                 // class java/util/concurrent/atomic/AtomicLong
      30: dup
      31: invokespecial #57                 // Method java/util/concurrent/atomic/AtomicLong."<init>":()V
      34: putfield      #58                 // Field insertPosition:Ljava/util/concurrent/atomic/AtomicLong;
      37: aload_0
      38: new           #55                 // class java/util/concurrent/atomic/AtomicLong
      41: dup
      42: invokespecial #57                 // Method java/util/concurrent/atomic/AtomicLong."<init>":()V
      45: putfield      #62                 // Field flushPosition:Ljava/util/concurrent/atomic/AtomicLong;
      48: aload_0
      49: new           #65                 // class java/util/concurrent/ConcurrentSkipListMap
      52: dup
      53: invokespecial #67                 // Method java/util/concurrent/ConcurrentSkipListMap."<init>":()V
      56: putfield      #68                 // Field results:Ljava/util/concurrent/ConcurrentSkipListMap;
      59: aload_0
      60: new           #72                 // class java/util/concurrent/CopyOnWriteArraySet
      63: dup
      64: invokespecial #74                 // Method java/util/concurrent/CopyOnWriteArraySet."<init>":()V
      67: putfield      #75                 // Field monitors:Ljava/util/Collection;
      70: aload_0
      71: iload_2
      72: putfield      #79                 // Field maxBatchSize:I
      75: aload_0
      76: aload_1
      77: putfield      #83                 // Field consumer:Lio/fluxcapacitor/common/ThrowingFunction;
      80: aload_0
      81: ldc           #87                 // String Backlog
      83: invokestatic  #89                 // Method io/fluxcapacitor/common/ObjectUtils.newThreadFactory:(Ljava/lang/String;)Ljava/util/concurrent/ThreadFactory;
      86: invokestatic  #95                 // Method java/util/concurrent/Executors.newSingleThreadExecutor:(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;
      89: putfield      #101                // Field executorService:Ljava/util/concurrent/ExecutorService;
      92: aload_0
      93: aload_3
      94: putfield      #105                // Field errorHandler:Lio/fluxcapacitor/common/ErrorHandler;
      97: return

  public final java.util.concurrent.CompletableFuture<java.lang.Void> add(T...);
    Code:
       0: aload_0
       1: getfield      #44                 // Field queue:Ljava/util/Queue;
       4: aload_1
       5: invokestatic  #109                // Method java/util/Collections.addAll:(Ljava/util/Collection;[Ljava/lang/Object;)Z
       8: pop
       9: aload_1
      10: arraylength
      11: ifne          21
      14: aconst_null
      15: invokestatic  #115                // Method java/util/concurrent/CompletableFuture.completedFuture:(Ljava/lang/Object;)Ljava/util/concurrent/CompletableFuture;
      18: goto          38
      21: aload_0
      22: aload_0
      23: getfield      #58                 // Field insertPosition:Ljava/util/concurrent/atomic/AtomicLong;
      26: aload_1
      27: invokedynamic #121,  0            // InvokeDynamic #4:applyAsLong:([Ljava/lang/Object;)Ljava/util/function/LongUnaryOperator;
      32: invokevirtual #125                // Method java/util/concurrent/atomic/AtomicLong.updateAndGet:(Ljava/util/function/LongUnaryOperator;)J
      35: invokevirtual #129                // Method awaitFlush:(J)Ljava/util/concurrent/CompletableFuture;
      38: areturn

  public java.util.concurrent.CompletableFuture<java.lang.Void> add(java.util.Collection<? extends T>);
    Code:
       0: aload_0
       1: getfield      #44                 // Field queue:Ljava/util/Queue;
       4: aload_1
       5: invokeinterface #133,  2          // InterfaceMethod java/util/Queue.addAll:(Ljava/util/Collection;)Z
      10: pop
      11: aload_1
      12: invokeinterface #138,  1          // InterfaceMethod java/util/Collection.isEmpty:()Z
      17: ifeq          27
      20: aconst_null
      21: invokestatic  #115                // Method java/util/concurrent/CompletableFuture.completedFuture:(Ljava/lang/Object;)Ljava/util/concurrent/CompletableFuture;
      24: goto          44
      27: aload_0
      28: aload_0
      29: getfield      #58                 // Field insertPosition:Ljava/util/concurrent/atomic/AtomicLong;
      32: aload_1
      33: invokedynamic #144,  0            // InvokeDynamic #5:applyAsLong:(Ljava/util/Collection;)Ljava/util/function/LongUnaryOperator;
      38: invokevirtual #125                // Method java/util/concurrent/atomic/AtomicLong.updateAndGet:(Ljava/util/function/LongUnaryOperator;)J
      41: invokevirtual #129                // Method awaitFlush:(J)Ljava/util/concurrent/CompletableFuture;
      44: areturn

  private java.util.concurrent.CompletableFuture<java.lang.Void> awaitFlush(long);
    Code:
       0: new           #116                // class java/util/concurrent/CompletableFuture
       3: dup
       4: invokespecial #147                // Method java/util/concurrent/CompletableFuture."<init>":()V
       7: astore_3
       8: aload_0
       9: getfield      #68                 // Field results:Ljava/util/concurrent/ConcurrentSkipListMap;
      12: lload_1
      13: invokestatic  #148                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      16: aload_3
      17: invokevirtual #154                // Method java/util/concurrent/ConcurrentSkipListMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      20: pop
      21: aload_0
      22: invokevirtual #158                // Method flushIfNotFlushing:()V
      25: aload_3
      26: areturn

  private void flushIfNotFlushing();
    Code:
       0: aload_0
       1: getfield      #51                 // Field flushing:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: iconst_0
       5: iconst_1
       6: invokevirtual #161                // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z
       9: ifeq          27
      12: aload_0
      13: getfield      #101                // Field executorService:Ljava/util/concurrent/ExecutorService;
      16: aload_0
      17: invokedynamic #165,  0            // InvokeDynamic #6:run:(Lio/fluxcapacitor/common/Backlog;)Ljava/lang/Runnable;
      22: invokeinterface #169,  2          // InterfaceMethod java/util/concurrent/ExecutorService.execute:(Ljava/lang/Runnable;)V
      27: return

  private void flush();
    Code:
       0: aload_0
       1: getfield      #44                 // Field queue:Ljava/util/Queue;
       4: invokeinterface #175,  1          // InterfaceMethod java/util/Queue.isEmpty:()Z
       9: ifne          157
      12: new           #176                // class java/util/ArrayList
      15: dup
      16: aload_0
      17: getfield      #79                 // Field maxBatchSize:I
      20: invokespecial #178                // Method java/util/ArrayList."<init>":(I)V
      23: astore_1
      24: aload_1
      25: invokeinterface #181,  1          // InterfaceMethod java/util/List.size:()I
      30: aload_0
      31: getfield      #79                 // Field maxBatchSize:I
      34: if_icmpge     65
      37: aload_0
      38: getfield      #44                 // Field queue:Ljava/util/Queue;
      41: invokeinterface #187,  1          // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
      46: astore_2
      47: aload_2
      48: ifnonnull     54
      51: goto          65
      54: aload_1
      55: aload_2
      56: invokeinterface #191,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      61: pop
      62: goto          24
      65: aload_0
      66: getfield      #83                 // Field consumer:Lio/fluxcapacitor/common/ThrowingFunction;
      69: aload_1
      70: invokeinterface #195,  2          // InterfaceMethod io/fluxcapacitor/common/ThrowingFunction.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      75: checkcast     #116                // class java/util/concurrent/CompletableFuture
      78: astore_2
      79: goto          99
      82: astore_3
      83: aload_3
      84: invokestatic  #202                // Method java/util/concurrent/CompletableFuture.failedFuture:(Ljava/lang/Throwable;)Ljava/util/concurrent/CompletableFuture;
      87: astore_2
      88: aload_0
      89: getfield      #105                // Field errorHandler:Lio/fluxcapacitor/common/ErrorHandler;
      92: aload_3
      93: aload_1
      94: invokeinterface #206,  3          // InterfaceMethod io/fluxcapacitor/common/ErrorHandler.handleError:(Ljava/lang/Throwable;Ljava/lang/Object;)V
      99: aload_0
     100: getfield      #62                 // Field flushPosition:Ljava/util/concurrent/atomic/AtomicLong;
     103: aload_1
     104: invokeinterface #181,  1          // InterfaceMethod java/util/List.size:()I
     109: i2l
     110: invokevirtual #211                // Method java/util/concurrent/atomic/AtomicLong.addAndGet:(J)J
     113: lstore_3
     114: aload_2
     115: ifnonnull     127
     118: aload_0
     119: lload_3
     120: aconst_null
     121: invokevirtual #215                // Method completeResults:(JLjava/lang/Throwable;)V
     124: goto          139
     127: aload_2
     128: aload_0
     129: lload_3
     130: invokedynamic #219,  0            // InvokeDynamic #7:accept:(Lio/fluxcapacitor/common/Backlog;J)Ljava/util/function/BiConsumer;
     135: invokevirtual #223                // Method java/util/concurrent/CompletableFuture.whenComplete:(Ljava/util/function/BiConsumer;)Ljava/util/concurrent/CompletableFuture;
     138: pop
     139: aload_0
     140: getfield      #75                 // Field monitors:Ljava/util/Collection;
     143: aload_1
     144: invokedynamic #227,  0            // InvokeDynamic #8:accept:(Ljava/util/List;)Ljava/util/function/Consumer;
     149: invokeinterface #230,  2          // InterfaceMethod java/util/Collection.forEach:(Ljava/util/function/Consumer;)V
     154: goto          0
     157: aload_0
     158: getfield      #51                 // Field flushing:Ljava/util/concurrent/atomic/AtomicBoolean;
     161: iconst_0
     162: invokevirtual #234                // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V
     165: aload_0
     166: getfield      #44                 // Field queue:Ljava/util/Queue;
     169: invokeinterface #175,  1          // InterfaceMethod java/util/Queue.isEmpty:()Z
     174: ifne          181
     177: aload_0
     178: invokevirtual #158                // Method flushIfNotFlushing:()V
     181: goto          206
     184: astore_1
     185: getstatic     #238                // Field log:Lorg/slf4j/Logger;
     188: ldc           #242                // String Failed to flush the backlog
     190: aload_1
     191: invokeinterface #244,  3          // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;Ljava/lang/Throwable;)V
     196: aload_0
     197: getfield      #51                 // Field flushing:Ljava/util/concurrent/atomic/AtomicBoolean;
     200: iconst_0
     201: invokevirtual #234                // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V
     204: aload_1
     205: athrow
     206: return
    Exception table:
       from    to  target type
          65    79    82   Class java/lang/Throwable
           0   181   184   Class java/lang/Throwable

  protected void completeResults(long, java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #68                 // Field results:Ljava/util/concurrent/ConcurrentSkipListMap;
       4: lload_1
       5: invokestatic  #148                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
       8: iconst_1
       9: invokevirtual #250                // Method java/util/concurrent/ConcurrentSkipListMap.headMap:(Ljava/lang/Object;Z)Ljava/util/concurrent/ConcurrentNavigableMap;
      12: astore        4
      14: aload         4
      16: aload_3
      17: invokedynamic #254,  0            // InvokeDynamic #9:accept:(Ljava/lang/Throwable;)Ljava/util/function/BiConsumer;
      22: invokeinterface #257,  2          // InterfaceMethod java/util/concurrent/ConcurrentNavigableMap.forEach:(Ljava/util/function/BiConsumer;)V
      27: aload         4
      29: invokeinterface #262,  1          // InterfaceMethod java/util/concurrent/ConcurrentNavigableMap.clear:()V
      34: return

  public io.fluxcapacitor.common.Registration registerMonitor(java.util.function.Consumer<java.util.List<T>>);
    Code:
       0: aload_0
       1: getfield      #75                 // Field monitors:Ljava/util/Collection;
       4: aload_1
       5: invokeinterface #265,  2          // InterfaceMethod java/util/Collection.add:(Ljava/lang/Object;)Z
      10: pop
      11: aload_0
      12: aload_1
      13: invokedynamic #266,  0            // InvokeDynamic #10:cancel:(Lio/fluxcapacitor/common/Backlog;Ljava/util/function/Consumer;)Lio/fluxcapacitor/common/Registration;
      18: areturn

  public void shutDown();
    Code:
       0: aload_0
       1: getfield      #101                // Field executorService:Ljava/util/concurrent/ExecutorService;
       4: invokeinterface #270,  1          // InterfaceMethod java/util/concurrent/ExecutorService.shutdown:()V
       9: aload_0
      10: getfield      #101                // Field executorService:Ljava/util/concurrent/ExecutorService;
      13: lconst_1
      14: getstatic     #273                // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
      17: invokeinterface #279,  4          // InterfaceMethod java/util/concurrent/ExecutorService.awaitTermination:(JLjava/util/concurrent/TimeUnit;)Z
      22: pop
      23: goto          45
      26: astore_1
      27: getstatic     #238                // Field log:Lorg/slf4j/Logger;
      30: ldc_w         #285                // String Shutdown of executor was interrupted
      33: aload_1
      34: invokeinterface #287,  3          // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Throwable;)V
      39: invokestatic  #290                // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      42: invokevirtual #296                // Method java/lang/Thread.interrupt:()V
      45: return
    Exception table:
       from    to  target type
           9    23    26   Class java/lang/InterruptedException

  private void lambda$registerMonitor$9(java.util.function.Consumer);
    Code:
       0: aload_0
       1: getfield      #75                 // Field monitors:Ljava/util/Collection;
       4: aload_1
       5: invokeinterface #299,  2          // InterfaceMethod java/util/Collection.remove:(Ljava/lang/Object;)Z
      10: pop
      11: return

  private static void lambda$completeResults$8(java.lang.Throwable, java.lang.Long, java.util.concurrent.CompletableFuture);
    Code:
       0: aload_0
       1: ifnonnull     13
       4: aload_2
       5: aconst_null
       6: invokevirtual #302                // Method java/util/concurrent/CompletableFuture.complete:(Ljava/lang/Object;)Z
       9: pop
      10: goto          19
      13: aload_2
      14: aload_0
      15: invokevirtual #305                // Method java/util/concurrent/CompletableFuture.completeExceptionally:(Ljava/lang/Throwable;)Z
      18: pop
      19: return

  private static void lambda$flush$7(java.util.List, java.util.function.Consumer);
    Code:
       0: aload_1
       1: aload_0
       2: invokeinterface #309,  2          // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V
       7: return

  private void lambda$flush$6(long, java.lang.Object, java.lang.Throwable);
    Code:
       0: aload_0
       1: lload_1
       2: aload         4
       4: invokevirtual #215                // Method completeResults:(JLjava/lang/Throwable;)V
       7: return

  private static long lambda$add$5(java.util.Collection, long);
    Code:
       0: lload_1
       1: aload_0
       2: invokeinterface #314,  1          // InterfaceMethod java/util/Collection.size:()I
       7: i2l
       8: ladd
       9: lreturn

  private static long lambda$add$4(java.lang.Object[], long);
    Code:
       0: lload_1
       1: aload_0
       2: arraylength
       3: i2l
       4: ladd
       5: lreturn

  private static void lambda$new$3(io.fluxcapacitor.common.ThrowingFunction, java.lang.Throwable, java.util.List);
    Code:
       0: getstatic     #238                // Field log:Lorg/slf4j/Logger;
       3: ldc_w         #315                // String Consumer {} failed to handle batch {}. Continuing with next batch.
       6: iconst_3
       7: anewarray     #37                 // class java/lang/Object
      10: dup
      11: iconst_0
      12: aload_0
      13: aastore
      14: dup
      15: iconst_1
      16: aload_2
      17: aastore
      18: dup
      19: iconst_2
      20: aload_1
      21: aastore
      22: invokeinterface #317,  3          // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;[Ljava/lang/Object;)V
      27: return

  private static void lambda$forAsyncConsumer$2(io.fluxcapacitor.common.ThrowingFunction, java.lang.Throwable, java.util.List);
    Code:
       0: getstatic     #238                // Field log:Lorg/slf4j/Logger;
       3: ldc_w         #320                // String Consumer {} failed to handle batch of size {}. Continuing with next batch.
       6: iconst_3
       7: anewarray     #37                 // class java/lang/Object
      10: dup
      11: iconst_0
      12: aload_0
      13: aastore
      14: dup
      15: iconst_1
      16: aload_2
      17: invokeinterface #181,  1          // InterfaceMethod java/util/List.size:()I
      22: invokestatic  #322                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      25: aastore
      26: dup
      27: iconst_2
      28: aload_1
      29: aastore
      30: invokeinterface #317,  3          // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;[Ljava/lang/Object;)V
      35: return

  private static java.util.concurrent.CompletableFuture lambda$forConsumer$1(io.fluxcapacitor.common.ThrowingConsumer, java.util.List) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #327,  2          // InterfaceMethod io/fluxcapacitor/common/ThrowingConsumer.accept:(Ljava/lang/Object;)V
       7: aconst_null
       8: areturn

  private static void lambda$forConsumer$0(io.fluxcapacitor.common.ThrowingConsumer, java.lang.Throwable, java.util.List);
    Code:
       0: getstatic     #238                // Field log:Lorg/slf4j/Logger;
       3: ldc_w         #320                // String Consumer {} failed to handle batch of size {}. Continuing with next batch.
       6: iconst_3
       7: anewarray     #37                 // class java/lang/Object
      10: dup
      11: iconst_0
      12: aload_0
      13: aastore
      14: dup
      15: iconst_1
      16: aload_2
      17: invokeinterface #181,  1          // InterfaceMethod java/util/List.size:()I
      22: invokestatic  #322                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      25: aastore
      26: dup
      27: iconst_2
      28: aload_1
      29: aastore
      30: invokeinterface #317,  3          // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;[Ljava/lang/Object;)V
      35: return

  static {};
    Code:
       0: ldc           #2                  // class io/fluxcapacitor/common/Backlog
       2: invokestatic  #330                // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #238                // Field log:Lorg/slf4j/Logger;
       8: return
}
