Compiled from "StallingBatchInterceptor.java"
public class io.fluxcapacitor.javaclient.tracking.StallingBatchInterceptor implements io.fluxcapacitor.javaclient.tracking.BatchInterceptor {
  private static final org.slf4j.Logger log;

  private final int desiredBatchSize;

  private final java.time.Duration maximumStallingDuration;

  private final java.time.Duration retryFrequency;

  private final java.util.concurrent.atomic.AtomicReference<java.time.Instant> firstRefusal;

  public java.util.function.Consumer<io.fluxcapacitor.common.api.tracking.MessageBatch> intercept(java.util.function.Consumer<io.fluxcapacitor.common.api.tracking.MessageBatch>, io.fluxcapacitor.javaclient.tracking.Tracker);
    Code:
       0: aload_0
       1: aload_1
       2: invokedynamic #1,  0              // InvokeDynamic #0:accept:(Lio/fluxcapacitor/javaclient/tracking/StallingBatchInterceptor;Ljava/util/function/Consumer;)Ljava/util/function/Consumer;
       7: areturn

  protected boolean hasPassedDeadline();
    Code:
       0: aload_0
       1: getfield      #5                  // Field firstRefusal:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #17                 // class java/time/Instant
      10: invokestatic  #19                 // Method java/util/Optional.ofNullable:(Ljava/lang/Object;)Ljava/util/Optional;
      13: aload_0
      14: invokedynamic #25,  0             // InvokeDynamic #1:test:(Lio/fluxcapacitor/javaclient/tracking/StallingBatchInterceptor;)Ljava/util/function/Predicate;
      19: invokevirtual #29                 // Method java/util/Optional.filter:(Ljava/util/function/Predicate;)Ljava/util/Optional;
      22: invokevirtual #33                 // Method java/util/Optional.isPresent:()Z
      25: ireturn

  protected void stall();
    Code:
       0: aload_0
       1: getfield      #5                  // Field firstRefusal:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokedynamic #37,  0             // InvokeDynamic #2:apply:()Ljava/util/function/UnaryOperator;
       9: invokevirtual #41                 // Method java/util/concurrent/atomic/AtomicReference.updateAndGet:(Ljava/util/function/UnaryOperator;)Ljava/lang/Object;
      12: pop
      13: aload_0
      14: getfield      #45                 // Field retryFrequency:Ljava/time/Duration;
      17: invokevirtual #49                 // Method java/time/Duration.toMillis:()J
      20: invokestatic  #55                 // Method java/lang/Thread.sleep:(J)V
      23: goto          33
      26: astore_1
      27: invokestatic  #63                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      30: invokevirtual #67                 // Method java/lang/Thread.interrupt:()V
      33: return
    Exception table:
       from    to  target type
          13    23    26   Class java/lang/InterruptedException

  private static int $default$desiredBatchSize();
    Code:
       0: sipush        512
       3: ireturn

  private static java.time.Duration $default$maximumStallingDuration();
    Code:
       0: ldc2_w        #71                 // long 60l
       3: invokestatic  #73                 // Method java/time/Duration.ofSeconds:(J)Ljava/time/Duration;
       6: areturn

  private static java.time.Duration $default$retryFrequency();
    Code:
       0: lconst_1
       1: invokestatic  #73                 // Method java/time/Duration.ofSeconds:(J)Ljava/time/Duration;
       4: areturn

  io.fluxcapacitor.javaclient.tracking.StallingBatchInterceptor(int, java.time.Duration, java.time.Duration);
    Code:
       0: aload_0
       1: invokespecial #77                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #12                 // class java/util/concurrent/atomic/AtomicReference
       8: dup
       9: invokespecial #82                 // Method java/util/concurrent/atomic/AtomicReference."<init>":()V
      12: putfield      #5                  // Field firstRefusal:Ljava/util/concurrent/atomic/AtomicReference;
      15: aload_2
      16: ifnonnull     29
      19: new           #83                 // class java/lang/NullPointerException
      22: dup
      23: ldc           #85                 // String maximumStallingDuration is marked non-null but is null
      25: invokespecial #87                 // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      28: athrow
      29: aload_3
      30: ifnonnull     43
      33: new           #83                 // class java/lang/NullPointerException
      36: dup
      37: ldc           #90                 // String retryFrequency is marked non-null but is null
      39: invokespecial #87                 // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      42: athrow
      43: aload_0
      44: iload_1
      45: putfield      #92                 // Field desiredBatchSize:I
      48: aload_0
      49: aload_2
      50: putfield      #96                 // Field maximumStallingDuration:Ljava/time/Duration;
      53: aload_0
      54: aload_3
      55: putfield      #45                 // Field retryFrequency:Ljava/time/Duration;
      58: return

  public static io.fluxcapacitor.javaclient.tracking.StallingBatchInterceptor$StallingBatchInterceptorBuilder builder();
    Code:
       0: new           #99                 // class io/fluxcapacitor/javaclient/tracking/StallingBatchInterceptor$StallingBatchInterceptorBuilder
       3: dup
       4: invokespecial #101                // Method io/fluxcapacitor/javaclient/tracking/StallingBatchInterceptor$StallingBatchInterceptorBuilder."<init>":()V
       7: areturn

  private static java.time.Instant lambda$stall$2(java.time.Instant);
    Code:
       0: aload_0
       1: ifnonnull     10
       4: invokestatic  #102                // InterfaceMethod io/fluxcapacitor/javaclient/FluxCapacitor.currentTime:()Ljava/time/Instant;
       7: goto          11
      10: aload_0
      11: areturn

  private boolean lambda$hasPassedDeadline$1(java.time.Instant);
    Code:
       0: invokestatic  #102                // InterfaceMethod io/fluxcapacitor/javaclient/FluxCapacitor.currentTime:()Ljava/time/Instant;
       3: aload_1
       4: aload_0
       5: getfield      #96                 // Field maximumStallingDuration:Ljava/time/Duration;
       8: invokevirtual #108                // Method java/time/Instant.plus:(Ljava/time/temporal/TemporalAmount;)Ljava/time/Instant;
      11: invokevirtual #112                // Method java/time/Instant.isBefore:(Ljava/time/Instant;)Z
      14: ifne          21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: ireturn

  private void lambda$intercept$0(java.util.function.Consumer, io.fluxcapacitor.common.api.tracking.MessageBatch);
    Code:
       0: aload_2
       1: invokevirtual #116                // Method io/fluxcapacitor/common/api/tracking/MessageBatch.getSize:()I
       4: aload_0
       5: getfield      #92                 // Field desiredBatchSize:I
       8: if_icmpge     18
      11: aload_0
      12: invokevirtual #122                // Method hasPassedDeadline:()Z
      15: ifeq          36
      18: aload_1
      19: aload_2
      20: invokeinterface #125,  2          // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V
      25: aload_0
      26: getfield      #5                  // Field firstRefusal:Ljava/util/concurrent/atomic/AtomicReference;
      29: aconst_null
      30: invokevirtual #130                // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
      33: goto          40
      36: aload_0
      37: invokevirtual #133                // Method stall:()V
      40: return

  static {};
    Code:
       0: ldc           #6                  // class io/fluxcapacitor/javaclient/tracking/StallingBatchInterceptor
       2: invokestatic  #136                // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #142                // Field log:Lorg/slf4j/Logger;
       8: return
}
