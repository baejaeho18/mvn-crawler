Compiled from "JacksonContentFilter.java"
public class io.fluxcapacitor.javaclient.common.serialization.jackson.JacksonContentFilter$FilteringSerializer extends com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object> {
  private static final org.slf4j.Logger log;

  protected static final java.lang.ThreadLocal<java.lang.Object> rootValue;

  private final java.util.function.Function<java.lang.Class<?>, io.fluxcapacitor.common.handling.HandlerMatcher<java.lang.Object, java.lang.Object>> matcherCache;

  private final com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object> defaultSerializer;

  public void serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_0
       4: aload_2
       5: aload_3
       6: invokedynamic #1,  0              // InvokeDynamic #0:accept:(Lio/fluxcapacitor/javaclient/common/serialization/jackson/JacksonContentFilter$FilteringSerializer;Lcom/fasterxml/jackson/core/JsonGenerator;Lcom/fasterxml/jackson/databind/SerializerProvider;)Lio/fluxcapacitor/common/ThrowingConsumer;
      11: invokevirtual #5                  // Method serializeAndThen:(Ljava/lang/Object;Lcom/fasterxml/jackson/core/JsonGenerator;Lio/fluxcapacitor/common/ThrowingConsumer;)V
      14: goto          22
      17: astore        4
      19: aload         4
      21: athrow
      22: return
    Exception table:
       from    to  target type
           0    14    17   Class java/lang/Throwable

  public void serializeWithType(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_0
       4: aload_2
       5: aload_3
       6: aload         4
       8: invokedynamic #19,  0             // InvokeDynamic #1:accept:(Lio/fluxcapacitor/javaclient/common/serialization/jackson/JacksonContentFilter$FilteringSerializer;Lcom/fasterxml/jackson/core/JsonGenerator;Lcom/fasterxml/jackson/databind/SerializerProvider;Lcom/fasterxml/jackson/databind/jsontype/TypeSerializer;)Lio/fluxcapacitor/common/ThrowingConsumer;
      13: invokevirtual #5                  // Method serializeAndThen:(Ljava/lang/Object;Lcom/fasterxml/jackson/core/JsonGenerator;Lio/fluxcapacitor/common/ThrowingConsumer;)V
      16: return

  public void serializeAndThen(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, io.fluxcapacitor.common.ThrowingConsumer<java.lang.Object>);
    Code:
       0: aload_1
       1: astore        4
       3: aload         4
       5: ifnull        83
       8: aload_0
       9: getfield      #22                 // Field matcherCache:Ljava/util/function/Function;
      12: aload         4
      14: invokevirtual #26                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      17: invokeinterface #32,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      22: checkcast     #38                 // class io/fluxcapacitor/common/handling/HandlerMatcher
      25: aload         4
      27: getstatic     #40                 // Field rootValue:Ljava/lang/ThreadLocal;
      30: invokevirtual #44                 // Method java/lang/ThreadLocal.get:()Ljava/lang/Object;
      33: invokeinterface #50,  3           // InterfaceMethod io/fluxcapacitor/common/handling/HandlerMatcher.findInvoker:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Optional;
      38: astore        5
      40: aload         5
      42: invokevirtual #54                 // Method java/util/Optional.isPresent:()Z
      45: ifeq          83
      48: aload         5
      50: invokevirtual #60                 // Method java/util/Optional.get:()Ljava/lang/Object;
      53: checkcast     #61                 // class io/fluxcapacitor/common/handling/HandlerInvoker
      56: invokeinterface #63,  1           // InterfaceMethod io/fluxcapacitor/common/handling/HandlerInvoker.invoke:()Ljava/lang/Object;
      61: astore        4
      63: aload         4
      65: ifnonnull     83
      68: aload_2
      69: invokevirtual #66                 // Method com/fasterxml/jackson/core/JsonGenerator.getOutputContext:()Lcom/fasterxml/jackson/core/JsonStreamContext;
      72: invokevirtual #72                 // Method com/fasterxml/jackson/core/JsonStreamContext.inArray:()Z
      75: ifne          82
      78: aload_2
      79: invokevirtual #77                 // Method com/fasterxml/jackson/core/JsonGenerator.writeNull:()V
      82: return
      83: goto          120
      86: astore        5
      88: getstatic     #83                 // Field log:Lorg/slf4j/Logger;
      91: ldc           #87                 // String Failed to filter content (type {}) for viewer {}
      93: iconst_3
      94: anewarray     #27                 // class java/lang/Object
      97: dup
      98: iconst_0
      99: aload_1
     100: invokevirtual #26                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
     103: aastore
     104: dup
     105: iconst_1
     106: invokestatic  #89                 // InterfaceMethod io/fluxcapacitor/javaclient/tracking/handling/authentication/User.getCurrent:()Lio/fluxcapacitor/javaclient/tracking/handling/authentication/User;
     109: aastore
     110: dup
     111: iconst_2
     112: aload         5
     114: aastore
     115: invokeinterface #95,  3           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;[Ljava/lang/Object;)V
     120: aload_3
     121: aload         4
     123: invokeinterface #101,  2          // InterfaceMethod io/fluxcapacitor/common/ThrowingConsumer.accept:(Ljava/lang/Object;)V
     128: goto          136
     131: astore        4
     133: aload         4
     135: athrow
     136: return
    Exception table:
       from    to  target type
           3    82    86   Class java/lang/Exception
           0    82   131   Class java/lang/Throwable
          83   128   131   Class java/lang/Throwable

  public boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #106                // Method com/fasterxml/jackson/databind/JsonSerializer.isEmpty:(Lcom/fasterxml/jackson/databind/SerializerProvider;Ljava/lang/Object;)Z
       6: ifeq          11
       9: iconst_1
      10: ireturn
      11: aload_0
      12: getfield      #22                 // Field matcherCache:Ljava/util/function/Function;
      15: aload_2
      16: invokevirtual #26                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      19: invokeinterface #32,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      24: checkcast     #38                 // class io/fluxcapacitor/common/handling/HandlerMatcher
      27: aload_2
      28: getstatic     #40                 // Field rootValue:Ljava/lang/ThreadLocal;
      31: invokevirtual #44                 // Method java/lang/ThreadLocal.get:()Ljava/lang/Object;
      34: invokeinterface #50,  3           // InterfaceMethod io/fluxcapacitor/common/handling/HandlerMatcher.findInvoker:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Optional;
      39: invokedynamic #112,  0            // InvokeDynamic #2:test:()Ljava/util/function/Predicate;
      44: invokevirtual #116                // Method java/util/Optional.filter:(Ljava/util/function/Predicate;)Ljava/util/Optional;
      47: invokevirtual #54                 // Method java/util/Optional.isPresent:()Z
      50: ireturn
      51: astore_3
      52: iconst_0
      53: ireturn
    Exception table:
       from    to  target type
          11    50    51   Class java/lang/Exception

  public io.fluxcapacitor.javaclient.common.serialization.jackson.JacksonContentFilter$FilteringSerializer(com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>);
    Code:
       0: aload_0
       1: invokespecial #120                // Method com/fasterxml/jackson/databind/JsonSerializer."<init>":()V
       4: aload_0
       5: invokedynamic #123,  0            // InvokeDynamic #3:apply:()Ljava/util/function/Function;
      10: invokestatic  #126                // Method io/fluxcapacitor/common/ObjectUtils.memoize:(Ljava/util/function/Function;)Lio/fluxcapacitor/common/MemoizingFunction;
      13: putfield      #22                 // Field matcherCache:Ljava/util/function/Function;
      16: aload_0
      17: aload_1
      18: putfield      #132                // Field defaultSerializer:Lcom/fasterxml/jackson/databind/JsonSerializer;
      21: return

  private static boolean lambda$isEmpty$3(io.fluxcapacitor.common.handling.HandlerInvoker);
    Code:
       0: aload_0
       1: invokeinterface #63,  1           // InterfaceMethod io/fluxcapacitor/common/handling/HandlerInvoker.invoke:()Ljava/lang/Object;
       6: ifnonnull     13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn

  private void lambda$serializeWithType$2(com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer, java.lang.Object) throws java.lang.Exception;
    Code:
       0: aload_0
       1: getfield      #132                // Field defaultSerializer:Lcom/fasterxml/jackson/databind/JsonSerializer;
       4: aload         4
       6: aload_1
       7: aload_2
       8: aload_3
       9: invokevirtual #136                // Method com/fasterxml/jackson/databind/JsonSerializer.serializeWithType:(Ljava/lang/Object;Lcom/fasterxml/jackson/core/JsonGenerator;Lcom/fasterxml/jackson/databind/SerializerProvider;Lcom/fasterxml/jackson/databind/jsontype/TypeSerializer;)V
      12: return

  private void lambda$serialize$1(com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, java.lang.Object) throws java.lang.Exception;
    Code:
       0: aload_0
       1: getfield      #132                // Field defaultSerializer:Lcom/fasterxml/jackson/databind/JsonSerializer;
       4: aload_3
       5: aload_1
       6: aload_2
       7: invokevirtual #140                // Method com/fasterxml/jackson/databind/JsonSerializer.serialize:(Ljava/lang/Object;Lcom/fasterxml/jackson/core/JsonGenerator;Lcom/fasterxml/jackson/databind/SerializerProvider;)V
      10: return

  private static io.fluxcapacitor.common.handling.HandlerMatcher lambda$new$0(java.lang.Class);
    Code:
       0: aload_0
       1: new           #144                // class io/fluxcapacitor/javaclient/tracking/handling/authentication/CurrentUserParameterResolver
       4: dup
       5: invokespecial #146                // Method io/fluxcapacitor/javaclient/tracking/handling/authentication/CurrentUserParameterResolver."<init>":()V
       8: new           #147                // class io/fluxcapacitor/javaclient/tracking/handling/InputParameterResolver
      11: dup
      12: invokespecial #149                // Method io/fluxcapacitor/javaclient/tracking/handling/InputParameterResolver."<init>":()V
      15: invokestatic  #150                // InterfaceMethod java/util/List.of:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/List;
      18: ldc           #156                // class io/fluxcapacitor/javaclient/common/serialization/FilterContent
      20: invokestatic  #158                // Method io/fluxcapacitor/common/handling/HandlerInspector.inspect:(Ljava/lang/Class;Ljava/util/List;Ljava/lang/Class;)Lio/fluxcapacitor/common/handling/HandlerMatcher;
      23: areturn

  static {};
    Code:
       0: ldc           #6                  // class io/fluxcapacitor/javaclient/common/serialization/jackson/JacksonContentFilter$FilteringSerializer
       2: invokestatic  #164                // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #83                 // Field log:Lorg/slf4j/Logger;
       8: new           #45                 // class java/lang/ThreadLocal
      11: dup
      12: invokespecial #170                // Method java/lang/ThreadLocal."<init>":()V
      15: putstatic     #40                 // Field rootValue:Ljava/lang/ThreadLocal;
      18: return
}
