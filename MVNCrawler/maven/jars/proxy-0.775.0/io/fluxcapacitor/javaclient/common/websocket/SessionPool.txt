Compiled from "SessionPool.java"
public class io.fluxcapacitor.javaclient.common.websocket.SessionPool implements java.util.function.Supplier<jakarta.websocket.Session>, java.lang.AutoCloseable {
  private static final org.slf4j.Logger log;

  private final java.util.List<java.util.concurrent.atomic.AtomicReference<jakarta.websocket.Session>> sessions;

  private final int size;

  private final java.util.concurrent.atomic.AtomicInteger counter;

  private final java.util.function.Supplier<jakarta.websocket.Session> sessionFactory;

  private final java.util.concurrent.atomic.AtomicBoolean shuttingDown;

  public io.fluxcapacitor.javaclient.common.websocket.SessionPool(int, java.util.function.Supplier<jakarta.websocket.Session>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #7                  // class java/util/concurrent/atomic/AtomicInteger
       8: dup
       9: invokespecial #9                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
      12: putfield      #10                 // Field counter:Ljava/util/concurrent/atomic/AtomicInteger;
      15: aload_0
      16: new           #16                 // class java/util/concurrent/atomic/AtomicBoolean
      19: dup
      20: invokespecial #18                 // Method java/util/concurrent/atomic/AtomicBoolean."<init>":()V
      23: putfield      #19                 // Field shuttingDown:Ljava/util/concurrent/atomic/AtomicBoolean;
      26: aload_0
      27: aload_2
      28: putfield      #23                 // Field sessionFactory:Ljava/util/function/Supplier;
      31: aload_0
      32: iconst_0
      33: aload_0
      34: iload_1
      35: dup_x1
      36: putfield      #27                 // Field size:I
      39: invokestatic  #31                 // InterfaceMethod java/util/stream/IntStream.range:(II)Ljava/util/stream/IntStream;
      42: invokedynamic #37,  0             // InvokeDynamic #0:apply:()Ljava/util/function/IntFunction;
      47: invokeinterface #41,  2           // InterfaceMethod java/util/stream/IntStream.mapToObj:(Ljava/util/function/IntFunction;)Ljava/util/stream/Stream;
      52: invokedynamic #45,  0             // InvokeDynamic #1:get:()Ljava/util/function/Supplier;
      57: invokestatic  #49                 // Method java/util/stream/Collectors.toCollection:(Ljava/util/function/Supplier;)Ljava/util/stream/Collector;
      60: invokeinterface #55,  2           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
      65: checkcast     #61                 // class java/util/List
      68: putfield      #63                 // Field sessions:Ljava/util/List;
      71: return

  public jakarta.websocket.Session get();
    Code:
       0: aload_0
       1: getfield      #63                 // Field sessions:Ljava/util/List;
       4: aload_0
       5: getfield      #10                 // Field counter:Ljava/util/concurrent/atomic/AtomicInteger;
       8: iconst_1
       9: aload_0
      10: invokedynamic #67,  0             // InvokeDynamic #2:applyAsInt:(Lio/fluxcapacitor/javaclient/common/websocket/SessionPool;)Ljava/util/function/IntBinaryOperator;
      15: invokevirtual #71                 // Method java/util/concurrent/atomic/AtomicInteger.getAndAccumulate:(ILjava/util/function/IntBinaryOperator;)I
      18: invokeinterface #75,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      23: checkcast     #78                 // class java/util/concurrent/atomic/AtomicReference
      26: astore_1
      27: aload_1
      28: aload_0
      29: invokedynamic #80,  0             // InvokeDynamic #3:apply:(Lio/fluxcapacitor/javaclient/common/websocket/SessionPool;)Ljava/util/function/UnaryOperator;
      34: invokevirtual #83                 // Method java/util/concurrent/atomic/AtomicReference.updateAndGet:(Ljava/util/function/UnaryOperator;)Ljava/lang/Object;
      37: checkcast     #87                 // class jakarta/websocket/Session
      40: areturn

  public void close();
    Code:
       0: aload_0
       1: getfield      #19                 // Field shuttingDown:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: iconst_0
       5: iconst_1
       6: invokevirtual #89                 // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z
       9: ifeq          58
      12: aload_0
      13: getfield      #19                 // Field shuttingDown:Ljava/util/concurrent/atomic/AtomicBoolean;
      16: dup
      17: astore_1
      18: monitorenter
      19: aload_0
      20: getfield      #63                 // Field sessions:Ljava/util/List;
      23: invokeinterface #93,  1           // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
      28: invokedynamic #97,  0             // InvokeDynamic #4:apply:()Ljava/util/function/Function;
      33: invokeinterface #100,  2          // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      38: invokedynamic #104,  0            // InvokeDynamic #5:accept:()Ljava/util/function/Consumer;
      43: invokeinterface #108,  2          // InterfaceMethod java/util/stream/Stream.forEach:(Ljava/util/function/Consumer;)V
      48: aload_1
      49: monitorexit
      50: goto          58
      53: astore_2
      54: aload_1
      55: monitorexit
      56: aload_2
      57: athrow
      58: return
    Exception table:
       from    to  target type
          19    50    53   any
          53    56    53   any

  private static boolean isClosed(jakarta.websocket.Session);
    Code:
       0: aload_0
       1: ifnull        13
       4: aload_0
       5: invokeinterface #112,  1          // InterfaceMethod jakarta/websocket/Session.isOpen:()Z
      10: ifne          17
      13: iconst_1
      14: goto          18
      17: iconst_0
      18: ireturn
      19: astore_1
      20: getstatic     #118                // Field log:Lorg/slf4j/Logger;
      23: ldc           #122                // String Failed to check if session is open
      25: aload_1
      26: invokeinterface #124,  3          // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;Ljava/lang/Throwable;)V
      31: iconst_1
      32: ireturn
    Exception table:
       from    to  target type
           0    18    19   Class java/lang/Exception

  public java.lang.Object get();
    Code:
       0: aload_0
       1: invokevirtual #130                // Method get:()Ljakarta/websocket/Session;
       4: areturn

  private static void lambda$close$3(jakarta.websocket.Session);
    Code:
       0: aload_0
       1: invokestatic  #133                // Method isClosed:(Ljakarta/websocket/Session;)Z
       4: ifne          37
       7: aload_0
       8: invokeinterface #137,  1          // InterfaceMethod jakarta/websocket/Session.close:()V
      13: goto          37
      16: astore_1
      17: getstatic     #118                // Field log:Lorg/slf4j/Logger;
      20: ldc           #140                // String Failed to closed websocket session connected to endpoint {}. Reason: {}
      22: aload_0
      23: invokeinterface #142,  1          // InterfaceMethod jakarta/websocket/Session.getRequestURI:()Ljava/net/URI;
      28: aload_1
      29: invokevirtual #146                // Method java/lang/Exception.getMessage:()Ljava/lang/String;
      32: invokeinterface #150,  4          // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      37: return
    Exception table:
       from    to  target type
           7    13    16   Class java/lang/Exception

  private jakarta.websocket.Session lambda$get$2(jakarta.websocket.Session);
    Code:
       0: aload_1
       1: invokestatic  #133                // Method isClosed:(Ljakarta/websocket/Session;)Z
       4: ifeq          67
       7: aload_0
       8: getfield      #19                 // Field shuttingDown:Ljava/util/concurrent/atomic/AtomicBoolean;
      11: dup
      12: astore_2
      13: monitorenter
      14: aload_1
      15: invokestatic  #133                // Method isClosed:(Ljakarta/websocket/Session;)Z
      18: ifeq          57
      21: aload_0
      22: getfield      #19                 // Field shuttingDown:Ljava/util/concurrent/atomic/AtomicBoolean;
      25: invokevirtual #154                // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
      28: ifeq          41
      31: new           #156                // class java/lang/IllegalStateException
      34: dup
      35: ldc           #158                // String Cannot provide session. This client has closed
      37: invokespecial #160                // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      40: athrow
      41: aload_0
      42: getfield      #23                 // Field sessionFactory:Ljava/util/function/Supplier;
      45: invokeinterface #163,  1          // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      50: checkcast     #87                 // class jakarta/websocket/Session
      53: astore_1
      54: goto          14
      57: aload_2
      58: monitorexit
      59: goto          67
      62: astore_3
      63: aload_2
      64: monitorexit
      65: aload_3
      66: athrow
      67: aload_1
      68: areturn
    Exception table:
       from    to  target type
          14    59    62   any
          62    65    62   any

  private int lambda$get$1(int, int);
    Code:
       0: iload_1
       1: iload_2
       2: iadd
       3: istore_3
       4: iload_3
       5: aload_0
       6: getfield      #27                 // Field size:I
       9: if_icmplt     16
      12: iconst_0
      13: goto          17
      16: iload_3
      17: ireturn

  private static java.util.concurrent.atomic.AtomicReference lambda$new$0(int);
    Code:
       0: new           #78                 // class java/util/concurrent/atomic/AtomicReference
       3: dup
       4: invokespecial #168                // Method java/util/concurrent/atomic/AtomicReference."<init>":()V
       7: areturn

  static {};
    Code:
       0: ldc           #11                 // class io/fluxcapacitor/javaclient/common/websocket/SessionPool
       2: invokestatic  #169                // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #118                // Field log:Lorg/slf4j/Logger;
       8: return
}
