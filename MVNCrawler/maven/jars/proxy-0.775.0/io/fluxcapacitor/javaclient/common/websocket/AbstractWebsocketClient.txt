Compiled from "AbstractWebsocketClient.java"
public abstract class io.fluxcapacitor.javaclient.common.websocket.AbstractWebsocketClient implements java.lang.AutoCloseable {
  private static final org.slf4j.Logger log;

  public static jakarta.websocket.WebSocketContainer defaultWebSocketContainer;

  public static com.fasterxml.jackson.databind.ObjectMapper defaultObjectMapper;

  private final io.fluxcapacitor.javaclient.common.websocket.SessionPool sessionPool;

  private final io.fluxcapacitor.javaclient.configuration.client.WebSocketClient$ClientConfig clientConfig;

  private final com.fasterxml.jackson.databind.ObjectMapper objectMapper;

  private final java.util.Map<java.lang.Long, io.fluxcapacitor.javaclient.common.websocket.AbstractWebsocketClient$WebSocketRequest> requests;

  private final java.util.Map<java.lang.String, io.fluxcapacitor.common.Backlog<io.fluxcapacitor.common.api.JsonType>> sessionBacklogs;

  private final java.util.concurrent.atomic.AtomicBoolean closed;

  private final java.util.concurrent.ExecutorService resultExecutor;

  private final boolean sendMetrics;

  public io.fluxcapacitor.javaclient.common.websocket.AbstractWebsocketClient(java.net.URI, io.fluxcapacitor.javaclient.configuration.client.WebSocketClient$ClientConfig, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iload_3
       4: iconst_1
       5: invokespecial #1                  // Method "<init>":(Ljava/net/URI;Lio/fluxcapacitor/javaclient/configuration/client/WebSocketClient$ClientConfig;ZI)V
       8: return

  public io.fluxcapacitor.javaclient.common.websocket.AbstractWebsocketClient(java.net.URI, io.fluxcapacitor.javaclient.configuration.client.WebSocketClient$ClientConfig, boolean, int);
    Code:
       0: aload_0
       1: getstatic     #7                  // Field defaultWebSocketContainer:Ljakarta/websocket/WebSocketContainer;
       4: aload_1
       5: aload_2
       6: iload_3
       7: lconst_1
       8: invokestatic  #11                 // Method java/time/Duration.ofSeconds:(J)Ljava/time/Duration;
      11: getstatic     #17                 // Field defaultObjectMapper:Lcom/fasterxml/jackson/databind/ObjectMapper;
      14: iload         4
      16: invokespecial #21                 // Method "<init>":(Ljakarta/websocket/WebSocketContainer;Ljava/net/URI;Lio/fluxcapacitor/javaclient/configuration/client/WebSocketClient$ClientConfig;ZLjava/time/Duration;Lcom/fasterxml/jackson/databind/ObjectMapper;I)V
      19: return

  public io.fluxcapacitor.javaclient.common.websocket.AbstractWebsocketClient(jakarta.websocket.WebSocketContainer, java.net.URI, io.fluxcapacitor.javaclient.configuration.client.WebSocketClient$ClientConfig, boolean, java.time.Duration, com.fasterxml.jackson.databind.ObjectMapper, int);
    Code:
       0: aload_0
       1: invokespecial #24                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #29                 // class java/util/concurrent/ConcurrentHashMap
       8: dup
       9: invokespecial #31                 // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      12: putfield      #32                 // Field requests:Ljava/util/Map;
      15: aload_0
      16: new           #29                 // class java/util/concurrent/ConcurrentHashMap
      19: dup
      20: invokespecial #31                 // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      23: putfield      #36                 // Field sessionBacklogs:Ljava/util/Map;
      26: aload_0
      27: new           #39                 // class java/util/concurrent/atomic/AtomicBoolean
      30: dup
      31: invokespecial #41                 // Method java/util/concurrent/atomic/AtomicBoolean."<init>":()V
      34: putfield      #42                 // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;
      37: aload_0
      38: bipush        8
      40: aload_0
      41: invokevirtual #46                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      44: invokevirtual #50                 // Method java/lang/Class.getSimpleName:()Ljava/lang/String;
      47: invokedynamic #56,  0             // InvokeDynamic #0:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;
      52: invokestatic  #60                 // Method io/fluxcapacitor/common/ObjectUtils.newThreadFactory:(Ljava/lang/String;)Ljava/util/concurrent/ThreadFactory;
      55: invokestatic  #66                 // Method java/util/concurrent/Executors.newFixedThreadPool:(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;
      58: putfield      #72                 // Field resultExecutor:Ljava/util/concurrent/ExecutorService;
      61: aload_0
      62: aload_3
      63: putfield      #76                 // Field clientConfig:Lio/fluxcapacitor/javaclient/configuration/client/WebSocketClient$ClientConfig;
      66: aload_0
      67: aload         6
      69: putfield      #80                 // Field objectMapper:Lcom/fasterxml/jackson/databind/ObjectMapper;
      72: aload_0
      73: iload         4
      75: putfield      #83                 // Field sendMetrics:Z
      78: aload_0
      79: new           #87                 // class io/fluxcapacitor/javaclient/common/websocket/SessionPool
      82: dup
      83: iload         7
      85: aload_0
      86: aload_1
      87: aload_2
      88: aload         5
      90: invokedynamic #89,  0             // InvokeDynamic #1:get:(Lio/fluxcapacitor/javaclient/common/websocket/AbstractWebsocketClient;Ljakarta/websocket/WebSocketContainer;Ljava/net/URI;Ljava/time/Duration;)Ljava/util/function/Supplier;
      95: invokespecial #93                 // Method io/fluxcapacitor/javaclient/common/websocket/SessionPool."<init>":(ILjava/util/function/Supplier;)V
      98: putfield      #96                 // Field sessionPool:Lio/fluxcapacitor/javaclient/common/websocket/SessionPool;
     101: return

  protected <R extends io.fluxcapacitor.common.api.QueryResult> java.util.concurrent.CompletableFuture<R> send(io.fluxcapacitor.common.api.Request);
    Code:
       0: new           #100                // class io/fluxcapacitor/javaclient/common/websocket/AbstractWebsocketClient$WebSocketRequest
       3: dup
       4: aload_0
       5: aload_1
       6: invokestatic  #102                // InterfaceMethod io/fluxcapacitor/javaclient/FluxCapacitor.currentCorrelationData:()Ljava/util/Map;
       9: invokespecial #108                // Method io/fluxcapacitor/javaclient/common/websocket/AbstractWebsocketClient$WebSocketRequest."<init>":(Lio/fluxcapacitor/javaclient/common/websocket/AbstractWebsocketClient;Lio/fluxcapacitor/common/api/Request;Ljava/util/Map;)V
      12: invokevirtual #111                // Method io/fluxcapacitor/javaclient/common/websocket/AbstractWebsocketClient$WebSocketRequest.send:()Ljava/util/concurrent/CompletableFuture;
      15: areturn

  protected <R extends io.fluxcapacitor.common.api.QueryResult> R sendAndWait(io.fluxcapacitor.common.api.Request);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #115                // Method send:(Lio/fluxcapacitor/common/api/Request;)Ljava/util/concurrent/CompletableFuture;
       5: invokevirtual #118                // Method java/util/concurrent/CompletableFuture.get:()Ljava/lang/Object;
       8: checkcast     #123                // class io/fluxcapacitor/common/api/QueryResult
      11: areturn
      12: astore_2
      13: aload_2
      14: athrow
    Exception table:
       from    to  target type
           0    11    12   Class java/lang/Throwable

  protected java.util.concurrent.CompletableFuture<java.lang.Void> sendCommand(io.fluxcapacitor.common.api.Command);
    Code:
       0: getstatic     #133                // Field io/fluxcapacitor/javaclient/common/websocket/AbstractWebsocketClient$1.$SwitchMap$io$fluxcapacitor$common$Guarantee:[I
       3: aload_1
       4: invokevirtual #139                // Method io/fluxcapacitor/common/api/Command.getGuarantee:()Lio/fluxcapacitor/common/Guarantee;
       7: invokevirtual #145                // Method io/fluxcapacitor/common/Guarantee.ordinal:()I
      10: iaload
      11: lookupswitch  { // 2
                     1: 36
                     2: 47
               default: 53
          }
      36: aload_0
      37: aload_1
      38: invokevirtual #151                // Method sendAndForget:(Lio/fluxcapacitor/common/api/JsonType;)Ljava/util/concurrent/CompletableFuture;
      41: pop
      42: aconst_null
      43: invokestatic  #155                // Method java/util/concurrent/CompletableFuture.completedFuture:(Ljava/lang/Object;)Ljava/util/concurrent/CompletableFuture;
      46: areturn
      47: aload_0
      48: aload_1
      49: invokevirtual #151                // Method sendAndForget:(Lio/fluxcapacitor/common/api/JsonType;)Ljava/util/concurrent/CompletableFuture;
      52: areturn
      53: aload_0
      54: aload_1
      55: invokevirtual #115                // Method send:(Lio/fluxcapacitor/common/api/Request;)Ljava/util/concurrent/CompletableFuture;
      58: invokedynamic #159,  0            // InvokeDynamic #2:apply:()Ljava/util/function/Function;
      63: invokevirtual #163                // Method java/util/concurrent/CompletableFuture.thenApply:(Ljava/util/function/Function;)Ljava/util/concurrent/CompletableFuture;
      66: areturn

  private java.util.concurrent.CompletableFuture<java.lang.Void> sendAndForget(io.fluxcapacitor.common.api.JsonType);
    Code:
       0: aload_0
       1: aload_1
       2: aload_0
       3: getfield      #96                 // Field sessionPool:Lio/fluxcapacitor/javaclient/common/websocket/SessionPool;
       6: invokevirtual #167                // Method io/fluxcapacitor/javaclient/common/websocket/SessionPool.get:()Ljakarta/websocket/Session;
       9: invokevirtual #170                // Method send:(Lio/fluxcapacitor/common/api/JsonType;Ljakarta/websocket/Session;)Ljava/util/concurrent/CompletableFuture;
      12: areturn
      13: astore_2
      14: aload_2
      15: athrow
    Exception table:
       from    to  target type
           0    12    13   Class java/lang/Throwable

  private java.util.concurrent.CompletableFuture<java.lang.Void> send(io.fluxcapacitor.common.api.JsonType, jakarta.websocket.Session);
    Code:
       0: aload_0
       1: getfield      #36                 // Field sessionBacklogs:Ljava/util/Map;
       4: aload_2
       5: invokeinterface #173,  1          // InterfaceMethod jakarta/websocket/Session.getId:()Ljava/lang/String;
      10: aload_0
      11: aload_2
      12: invokedynamic #178,  0            // InvokeDynamic #3:apply:(Lio/fluxcapacitor/javaclient/common/websocket/AbstractWebsocketClient;Ljakarta/websocket/Session;)Ljava/util/function/Function;
      17: invokeinterface #181,  3          // InterfaceMethod java/util/Map.computeIfAbsent:(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;
      22: checkcast     #187                // class io/fluxcapacitor/common/Backlog
      25: iconst_1
      26: anewarray     #189                // class io/fluxcapacitor/common/api/JsonType
      29: dup
      30: iconst_0
      31: aload_1
      32: aastore
      33: invokevirtual #191                // Method io/fluxcapacitor/common/Backlog.add:([Ljava/lang/Object;)Ljava/util/concurrent/CompletableFuture;
      36: astore_3
      37: aload_0
      38: aload_1
      39: aload_1
      40: instanceof    #195                // class io/fluxcapacitor/common/api/Request
      43: ifeq          68
      46: aload_0
      47: invokevirtual #197                // Method metricsMetadata:()Lio/fluxcapacitor/common/api/Metadata;
      50: ldc           #201                // String requestId
      52: aload_1
      53: checkcast     #195                // class io/fluxcapacitor/common/api/Request
      56: invokevirtual #203                // Method io/fluxcapacitor/common/api/Request.getRequestId:()J
      59: invokestatic  #207                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      62: invokevirtual #213                // Method io/fluxcapacitor/common/api/Metadata.with:(Ljava/lang/Object;Ljava/lang/Object;)Lio/fluxcapacitor/common/api/Metadata;
      65: goto          72
      68: aload_0
      69: invokevirtual #197                // Method metricsMetadata:()Lio/fluxcapacitor/common/api/Metadata;
      72: invokevirtual #219                // Method tryPublishMetrics:(Lio/fluxcapacitor/common/api/JsonType;Lio/fluxcapacitor/common/api/Metadata;)V
      75: aload_3
      76: areturn
      77: astore        4
      79: aload_0
      80: aload_1
      81: aload_1
      82: instanceof    #195                // class io/fluxcapacitor/common/api/Request
      85: ifeq          110
      88: aload_0
      89: invokevirtual #197                // Method metricsMetadata:()Lio/fluxcapacitor/common/api/Metadata;
      92: ldc           #201                // String requestId
      94: aload_1
      95: checkcast     #195                // class io/fluxcapacitor/common/api/Request
      98: invokevirtual #203                // Method io/fluxcapacitor/common/api/Request.getRequestId:()J
     101: invokestatic  #207                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     104: invokevirtual #213                // Method io/fluxcapacitor/common/api/Metadata.with:(Ljava/lang/Object;Ljava/lang/Object;)Lio/fluxcapacitor/common/api/Metadata;
     107: goto          114
     110: aload_0
     111: invokevirtual #197                // Method metricsMetadata:()Lio/fluxcapacitor/common/api/Metadata;
     114: invokevirtual #219                // Method tryPublishMetrics:(Lio/fluxcapacitor/common/api/JsonType;Lio/fluxcapacitor/common/api/Metadata;)V
     117: aload         4
     119: athrow
     120: astore_3
     121: aload_3
     122: athrow
    Exception table:
       from    to  target type
           0    37    77   any
          77    79    77   any
           0    75   120   Class java/lang/Throwable
          77   120   120   Class java/lang/Throwable

  private void sendBatch(java.util.List<io.fluxcapacitor.common.api.JsonType>, jakarta.websocket.Session);
    Code:
       0: aload_1
       1: invokeinterface #223,  1          // InterfaceMethod java/util/List.size:()I
       6: iconst_1
       7: if_icmpne     23
      10: aload_1
      11: iconst_0
      12: invokeinterface #228,  2          // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      17: checkcast     #189                // class io/fluxcapacitor/common/api/JsonType
      20: goto          31
      23: new           #231                // class io/fluxcapacitor/common/api/RequestBatch
      26: dup
      27: aload_1
      28: invokespecial #233                // Method io/fluxcapacitor/common/api/RequestBatch."<init>":(Ljava/util/List;)V
      31: astore_3
      32: aload_2
      33: invokeinterface #236,  1          // InterfaceMethod jakarta/websocket/Session.getBasicRemote:()Ljakarta/websocket/RemoteEndpoint$Basic;
      38: invokeinterface #240,  1          // InterfaceMethod jakarta/websocket/RemoteEndpoint$Basic.getSendStream:()Ljava/io/OutputStream;
      43: astore        4
      45: aload_0
      46: getfield      #80                 // Field objectMapper:Lcom/fasterxml/jackson/databind/ObjectMapper;
      49: aload_3
      50: invokevirtual #246                // Method com/fasterxml/jackson/databind/ObjectMapper.writeValueAsBytes:(Ljava/lang/Object;)[B
      53: astore        5
      55: aload         4
      57: aload         5
      59: aload_0
      60: getfield      #76                 // Field clientConfig:Lio/fluxcapacitor/javaclient/configuration/client/WebSocketClient$ClientConfig;
      63: invokevirtual #252                // Method io/fluxcapacitor/javaclient/configuration/client/WebSocketClient$ClientConfig.getCompression:()Lio/fluxcapacitor/common/serialization/compression/CompressionAlgorithm;
      66: invokestatic  #258                // Method io/fluxcapacitor/common/serialization/compression/CompressionUtils.compress:([BLio/fluxcapacitor/common/serialization/compression/CompressionAlgorithm;)[B
      69: invokevirtual #264                // Method java/io/OutputStream.write:([B)V
      72: aload         4
      74: ifnull        112
      77: aload         4
      79: invokevirtual #270                // Method java/io/OutputStream.close:()V
      82: goto          112
      85: astore        5
      87: aload         4
      89: ifnull        109
      92: aload         4
      94: invokevirtual #270                // Method java/io/OutputStream.close:()V
      97: goto          109
     100: astore        6
     102: aload         5
     104: aload         6
     106: invokevirtual #273                // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
     109: aload         5
     111: athrow
     112: goto          134
     115: astore        4
     117: getstatic     #279                // Field log:Lorg/slf4j/Logger;
     120: ldc_w         #283                // String Failed to send request {}
     123: aload_3
     124: aload         4
     126: invokeinterface #285,  4          // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
     131: aload         4
     133: athrow
     134: goto          140
     137: astore_3
     138: aload_3
     139: athrow
     140: return
    Exception table:
       from    to  target type
          45    72    85   Class java/lang/Throwable
          92    97   100   Class java/lang/Throwable
          32   112   115   Class java/lang/Exception
           0   134   137   Class java/lang/Throwable

  public void onMessage(byte[]);
    Code:
       0: aload_0
       1: getfield      #72                 // Field resultExecutor:Ljava/util/concurrent/ExecutorService;
       4: aload_0
       5: aload_1
       6: invokedynamic #291,  0            // InvokeDynamic #4:run:(Lio/fluxcapacitor/javaclient/common/websocket/AbstractWebsocketClient;[B)Ljava/lang/Runnable;
      11: invokeinterface #295,  2          // InterfaceMethod java/util/concurrent/ExecutorService.execute:(Ljava/lang/Runnable;)V
      16: goto          22
      19: astore_2
      20: aload_2
      21: athrow
      22: return
    Exception table:
       from    to  target type
           0    16    19   Class java/lang/Throwable

  protected void handleResult(io.fluxcapacitor.common.api.QueryResult, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #32                 // Field requests:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #301,  1          // InterfaceMethod io/fluxcapacitor/common/api/QueryResult.getRequestId:()J
      10: invokestatic  #207                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      13: invokeinterface #302,  2          // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      18: checkcast     #100                // class io/fluxcapacitor/javaclient/common/websocket/AbstractWebsocketClient$WebSocketRequest
      21: astore_3
      22: aload_3
      23: ifnonnull     49
      26: getstatic     #279                // Field log:Lorg/slf4j/Logger;
      29: ldc_w         #306                // String Could not find outstanding read request for id {}
      32: aload_1
      33: invokeinterface #301,  1          // InterfaceMethod io/fluxcapacitor/common/api/QueryResult.getRequestId:()J
      38: invokestatic  #207                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      41: invokeinterface #308,  3          // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;)V
      46: goto          156
      49: aload_0
      50: invokevirtual #197                // Method metricsMetadata:()Lio/fluxcapacitor/common/api/Metadata;
      53: iconst_4
      54: anewarray     #25                 // class java/lang/Object
      57: dup
      58: iconst_0
      59: ldc           #201                // String requestId
      61: aastore
      62: dup
      63: iconst_1
      64: aload_3
      65: getfield      #312                // Field io/fluxcapacitor/javaclient/common/websocket/AbstractWebsocketClient$WebSocketRequest.request:Lio/fluxcapacitor/common/api/Request;
      68: invokevirtual #203                // Method io/fluxcapacitor/common/api/Request.getRequestId:()J
      71: invokestatic  #207                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      74: aastore
      75: dup
      76: iconst_2
      77: ldc_w         #316                // String msDuration
      80: aastore
      81: dup
      82: iconst_3
      83: invokestatic  #318                // Method java/lang/System.currentTimeMillis:()J
      86: aload_3
      87: getfield      #323                // Field io/fluxcapacitor/javaclient/common/websocket/AbstractWebsocketClient$WebSocketRequest.sendTimestamp:J
      90: lsub
      91: invokestatic  #207                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      94: aastore
      95: invokevirtual #327                // Method io/fluxcapacitor/common/api/Metadata.with:([Ljava/lang/Object;)Lio/fluxcapacitor/common/api/Metadata;
      98: aload_3
      99: getfield      #330                // Field io/fluxcapacitor/javaclient/common/websocket/AbstractWebsocketClient$WebSocketRequest.correlationData:Ljava/util/Map;
     102: invokevirtual #333                // Method io/fluxcapacitor/common/api/Metadata.with:(Ljava/util/Map;)Lio/fluxcapacitor/common/api/Metadata;
     105: astore        4
     107: aload_0
     108: aload_1
     109: aload_2
     110: ifnonnull     118
     113: aload         4
     115: goto          127
     118: aload         4
     120: ldc_w         #336                // String batchId
     123: aload_2
     124: invokevirtual #213                // Method io/fluxcapacitor/common/api/Metadata.with:(Ljava/lang/Object;Ljava/lang/Object;)Lio/fluxcapacitor/common/api/Metadata;
     127: invokevirtual #219                // Method tryPublishMetrics:(Lio/fluxcapacitor/common/api/JsonType;Lio/fluxcapacitor/common/api/Metadata;)V
     130: aload_3
     131: getfield      #338                // Field io/fluxcapacitor/javaclient/common/websocket/AbstractWebsocketClient$WebSocketRequest.result:Ljava/util/concurrent/CompletableFuture;
     134: aload_1
     135: invokevirtual #342                // Method java/util/concurrent/CompletableFuture.complete:(Ljava/lang/Object;)Z
     138: pop
     139: goto          156
     142: astore        5
     144: aload_3
     145: getfield      #338                // Field io/fluxcapacitor/javaclient/common/websocket/AbstractWebsocketClient$WebSocketRequest.result:Ljava/util/concurrent/CompletableFuture;
     148: aload_1
     149: invokevirtual #342                // Method java/util/concurrent/CompletableFuture.complete:(Ljava/lang/Object;)Z
     152: pop
     153: aload         5
     155: athrow
     156: goto          173
     159: astore_3
     160: getstatic     #279                // Field log:Lorg/slf4j/Logger;
     163: ldc_w         #346                // String Failed to handle result {}
     166: aload_1
     167: aload_3
     168: invokeinterface #285,  4          // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
     173: return
    Exception table:
       from    to  target type
          49   130   142   any
         142   144   142   any
           0   156   159   Class java/lang/Throwable

  public void onClose(jakarta.websocket.Session, jakarta.websocket.CloseReason);
    Code:
       0: aload_0
       1: getfield      #36                 // Field sessionBacklogs:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #173,  1          // InterfaceMethod jakarta/websocket/Session.getId:()Ljava/lang/String;
      10: invokeinterface #302,  2          // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      15: pop
      16: aload_2
      17: invokevirtual #348                // Method jakarta/websocket/CloseReason.getCloseCode:()Ljakarta/websocket/CloseReason$CloseCode;
      20: invokeinterface #354,  1          // InterfaceMethod jakarta/websocket/CloseReason$CloseCode.getCode:()I
      25: getstatic     #359                // Field jakarta/websocket/CloseReason$CloseCodes.NO_STATUS_CODE:Ljakarta/websocket/CloseReason$CloseCodes;
      28: invokevirtual #365                // Method jakarta/websocket/CloseReason$CloseCodes.getCode:()I
      31: if_icmple     52
      34: getstatic     #279                // Field log:Lorg/slf4j/Logger;
      37: ldc_w         #366                // String Connection to endpoint {} closed with reason {}
      40: aload_1
      41: invokeinterface #368,  1          // InterfaceMethod jakarta/websocket/Session.getRequestURI:()Ljava/net/URI;
      46: aload_2
      47: invokeinterface #372,  4          // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      52: aload_0
      53: aload_1
      54: invokeinterface #173,  1          // InterfaceMethod jakarta/websocket/Session.getId:()Ljava/lang/String;
      59: invokevirtual #374                // Method retryOutstandingRequests:(Ljava/lang/String;)V
      62: return

  protected void retryOutstandingRequests(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #42                 // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: invokevirtual #378                // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
       7: ifne          85
      10: aload_0
      11: getfield      #32                 // Field requests:Ljava/util/Map;
      14: invokeinterface #381,  1          // InterfaceMethod java/util/Map.isEmpty:()Z
      19: ifne          85
      22: ldc2_w        #384                // long 1000l
      25: invokestatic  #386                // Method java/lang/Thread.sleep:(J)V
      28: goto          50
      31: astore_2
      32: invokestatic  #394                // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      35: invokevirtual #398                // Method java/lang/Thread.interrupt:()V
      38: new           #401                // class java/lang/IllegalStateException
      41: dup
      42: ldc_w         #403                // String Thread interrupted while trying to retry outstanding requests
      45: aload_2
      46: invokespecial #405                // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      49: athrow
      50: aload_0
      51: getfield      #32                 // Field requests:Ljava/util/Map;
      54: invokeinterface #408,  1          // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
      59: invokeinterface #412,  1          // InterfaceMethod java/util/Collection.stream:()Ljava/util/stream/Stream;
      64: aload_1
      65: invokedynamic #418,  0            // InvokeDynamic #5:test:(Ljava/lang/String;)Ljava/util/function/Predicate;
      70: invokeinterface #422,  2          // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      75: invokedynamic #428,  0            // InvokeDynamic #6:accept:()Ljava/util/function/Consumer;
      80: invokeinterface #432,  2          // InterfaceMethod java/util/stream/Stream.forEach:(Ljava/util/function/Consumer;)V
      85: return
    Exception table:
       from    to  target type
          22    28    31   Class java/lang/InterruptedException

  public void onError(jakarta.websocket.Session, java.lang.Throwable);
    Code:
       0: getstatic     #279                // Field log:Lorg/slf4j/Logger;
       3: ldc_w         #436                // String Client side error for web socket connected to endpoint {}
       6: aload_1
       7: invokeinterface #368,  1          // InterfaceMethod jakarta/websocket/Session.getRequestURI:()Ljava/net/URI;
      12: aload_2
      13: invokeinterface #285,  4          // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      18: return

  public void close();
    Code:
       0: aload_0
       1: iconst_0
       2: invokevirtual #438                // Method close:(Z)V
       5: return

  protected void close(boolean);
    Code:
       0: aload_0
       1: getfield      #42                 // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: iconst_0
       5: iconst_1
       6: invokevirtual #441                // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z
       9: ifeq          91
      12: aload_0
      13: getfield      #42                 // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;
      16: dup
      17: astore_2
      18: monitorenter
      19: iload_1
      20: ifeq          32
      23: aload_0
      24: getfield      #32                 // Field requests:Ljava/util/Map;
      27: invokeinterface #445,  1          // InterfaceMethod java/util/Map.clear:()V
      32: aload_0
      33: getfield      #96                 // Field sessionPool:Lio/fluxcapacitor/javaclient/common/websocket/SessionPool;
      36: invokevirtual #448                // Method io/fluxcapacitor/javaclient/common/websocket/SessionPool.close:()V
      39: aload_0
      40: getfield      #32                 // Field requests:Ljava/util/Map;
      43: invokeinterface #381,  1          // InterfaceMethod java/util/Map.isEmpty:()Z
      48: ifne          81
      51: getstatic     #279                // Field log:Lorg/slf4j/Logger;
      54: ldc_w         #449                // String {}: Closed websocket session to endpoint with {} outstanding requests
      57: aload_0
      58: invokevirtual #46                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      61: invokevirtual #50                 // Method java/lang/Class.getSimpleName:()Ljava/lang/String;
      64: aload_0
      65: getfield      #32                 // Field requests:Ljava/util/Map;
      68: invokeinterface #451,  1          // InterfaceMethod java/util/Map.size:()I
      73: invokestatic  #452                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      76: invokeinterface #372,  4          // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      81: aload_2
      82: monitorexit
      83: goto          91
      86: astore_3
      87: aload_2
      88: monitorexit
      89: aload_3
      90: athrow
      91: return
    Exception table:
       from    to  target type
          19    83    86   any
          86    89    86   any

  protected void tryPublishMetrics(io.fluxcapacitor.common.api.JsonType, io.fluxcapacitor.common.api.Metadata);
    Code:
       0: aload_1
       1: invokeinterface #457,  1          // InterfaceMethod io/fluxcapacitor/common/api/JsonType.toMetric:()Ljava/lang/Object;
       6: astore_3
       7: aload_0
       8: getfield      #83                 // Field sendMetrics:Z
      11: ifeq          31
      14: aload_3
      15: ifnull        31
      18: invokestatic  #460                // InterfaceMethod io/fluxcapacitor/javaclient/FluxCapacitor.getOptionally:()Ljava/util/Optional;
      21: aload_3
      22: aload_2
      23: invokedynamic #464,  0            // InvokeDynamic #7:accept:(Ljava/lang/Object;Lio/fluxcapacitor/common/api/Metadata;)Ljava/util/function/Consumer;
      28: invokevirtual #467                // Method java/util/Optional.ifPresent:(Ljava/util/function/Consumer;)V
      31: return

  protected io.fluxcapacitor.common.api.Metadata metricsMetadata();
    Code:
       0: invokestatic  #472                // Method io/fluxcapacitor/common/api/Metadata.empty:()Lio/fluxcapacitor/common/api/Metadata;
       3: areturn

  private static void lambda$tryPublishMetrics$12(java.lang.Object, io.fluxcapacitor.common.api.Metadata, io.fluxcapacitor.javaclient.FluxCapacitor);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #475                // InterfaceMethod io/fluxcapacitor/javaclient/FluxCapacitor.publishMetrics:(Ljava/lang/Object;Lio/fluxcapacitor/common/api/Metadata;)V
       5: return

  private static boolean lambda$retryOutstandingRequests$11(java.lang.String, io.fluxcapacitor.javaclient.common.websocket.AbstractWebsocketClient$WebSocketRequest);
    Code:
       0: aload_0
       1: aload_1
       2: getfield      #479                // Field io/fluxcapacitor/javaclient/common/websocket/AbstractWebsocketClient$WebSocketRequest.sessionId:Ljava/lang/String;
       5: invokevirtual #483                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
       8: ireturn

  private void lambda$onMessage$10(byte[]);
    Code:
       0: aload_0
       1: getfield      #80                 // Field objectMapper:Lcom/fasterxml/jackson/databind/ObjectMapper;
       4: aload_1
       5: aload_0
       6: getfield      #76                 // Field clientConfig:Lio/fluxcapacitor/javaclient/configuration/client/WebSocketClient$ClientConfig;
       9: invokevirtual #252                // Method io/fluxcapacitor/javaclient/configuration/client/WebSocketClient$ClientConfig.getCompression:()Lio/fluxcapacitor/common/serialization/compression/CompressionAlgorithm;
      12: invokestatic  #488                // Method io/fluxcapacitor/common/serialization/compression/CompressionUtils.decompress:([BLio/fluxcapacitor/common/serialization/compression/CompressionAlgorithm;)[B
      15: ldc           #189                // class io/fluxcapacitor/common/api/JsonType
      17: invokevirtual #491                // Method com/fasterxml/jackson/databind/ObjectMapper.readValue:([BLjava/lang/Class;)Ljava/lang/Object;
      20: checkcast     #189                // class io/fluxcapacitor/common/api/JsonType
      23: astore_2
      24: goto          41
      27: astore_3
      28: getstatic     #279                // Field log:Lorg/slf4j/Logger;
      31: ldc_w         #495                // String Could not parse input. Expected a Json message.
      34: aload_3
      35: invokeinterface #497,  3          // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;Ljava/lang/Throwable;)V
      40: return
      41: aload_2
      42: instanceof    #499                // class io/fluxcapacitor/common/api/ResultBatch
      45: ifeq          74
      48: invokestatic  #501                // InterfaceMethod io/fluxcapacitor/javaclient/FluxCapacitor.generateId:()Ljava/lang/String;
      51: astore_3
      52: aload_2
      53: checkcast     #499                // class io/fluxcapacitor/common/api/ResultBatch
      56: invokevirtual #504                // Method io/fluxcapacitor/common/api/ResultBatch.getResults:()Ljava/util/List;
      59: aload_0
      60: aload_3
      61: invokedynamic #508,  0            // InvokeDynamic #8:accept:(Lio/fluxcapacitor/javaclient/common/websocket/AbstractWebsocketClient;Ljava/lang/String;)Ljava/util/function/Consumer;
      66: invokeinterface #511,  2          // InterfaceMethod java/util/List.forEach:(Ljava/util/function/Consumer;)V
      71: goto          83
      74: aload_0
      75: aload_2
      76: checkcast     #123                // class io/fluxcapacitor/common/api/QueryResult
      79: aconst_null
      80: invokevirtual #512                // Method handleResult:(Lio/fluxcapacitor/common/api/QueryResult;Ljava/lang/String;)V
      83: return
    Exception table:
       from    to  target type
           0    24    27   Class java/lang/Exception

  private void lambda$onMessage$9(java.lang.String, io.fluxcapacitor.common.api.QueryResult);
    Code:
       0: aload_0
       1: getfield      #72                 // Field resultExecutor:Ljava/util/concurrent/ExecutorService;
       4: aload_0
       5: aload_2
       6: aload_1
       7: invokedynamic #516,  0            // InvokeDynamic #9:run:(Lio/fluxcapacitor/javaclient/common/websocket/AbstractWebsocketClient;Lio/fluxcapacitor/common/api/QueryResult;Ljava/lang/String;)Ljava/lang/Runnable;
      12: invokeinterface #295,  2          // InterfaceMethod java/util/concurrent/ExecutorService.execute:(Ljava/lang/Runnable;)V
      17: return

  private void lambda$onMessage$8(io.fluxcapacitor.common.api.QueryResult, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #512                // Method handleResult:(Lio/fluxcapacitor/common/api/QueryResult;Ljava/lang/String;)V
       6: return

  private io.fluxcapacitor.common.Backlog lambda$send$7(jakarta.websocket.Session, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokedynamic #519,  0            // InvokeDynamic #10:accept:(Lio/fluxcapacitor/javaclient/common/websocket/AbstractWebsocketClient;Ljakarta/websocket/Session;)Lio/fluxcapacitor/common/ThrowingConsumer;
       7: invokestatic  #522                // Method io/fluxcapacitor/common/Backlog.forConsumer:(Lio/fluxcapacitor/common/ThrowingConsumer;)Lio/fluxcapacitor/common/Backlog;
      10: areturn

  private void lambda$send$6(jakarta.websocket.Session, java.util.List) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_2
       2: aload_1
       3: invokevirtual #526                // Method sendBatch:(Ljava/util/List;Ljakarta/websocket/Session;)V
       6: return

  private static java.lang.Void lambda$sendCommand$5(io.fluxcapacitor.common.api.QueryResult);
    Code:
       0: aconst_null
       1: areturn

  private jakarta.websocket.Session lambda$new$4(jakarta.websocket.WebSocketContainer, java.net.URI, java.time.Duration);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokedynamic #530,  0            // InvokeDynamic #11:call:(Lio/fluxcapacitor/javaclient/common/websocket/AbstractWebsocketClient;Ljakarta/websocket/WebSocketContainer;Ljava/net/URI;)Ljava/util/concurrent/Callable;
       8: invokestatic  #534                // Method io/fluxcapacitor/common/RetryConfiguration.builder:()Lio/fluxcapacitor/common/RetryConfiguration$Builder;
      11: aload_3
      12: invokevirtual #540                // Method io/fluxcapacitor/common/RetryConfiguration$Builder.delay:(Ljava/time/Duration;)Lio/fluxcapacitor/common/RetryConfiguration$Builder;
      15: aload_0
      16: invokedynamic #546,  0            // InvokeDynamic #12:test:(Lio/fluxcapacitor/javaclient/common/websocket/AbstractWebsocketClient;)Ljava/util/function/Predicate;
      21: invokevirtual #549                // Method io/fluxcapacitor/common/RetryConfiguration$Builder.errorTest:(Ljava/util/function/Predicate;)Lio/fluxcapacitor/common/RetryConfiguration$Builder;
      24: aload_2
      25: invokedynamic #553,  0            // InvokeDynamic #13:accept:(Ljava/net/URI;)Ljava/util/function/Consumer;
      30: invokevirtual #556                // Method io/fluxcapacitor/common/RetryConfiguration$Builder.successLogger:(Ljava/util/function/Consumer;)Lio/fluxcapacitor/common/RetryConfiguration$Builder;
      33: aload_2
      34: invokedynamic #560,  0            // InvokeDynamic #14:accept:(Ljava/net/URI;)Ljava/util/function/Consumer;
      39: invokevirtual #561                // Method io/fluxcapacitor/common/RetryConfiguration$Builder.exceptionLogger:(Ljava/util/function/Consumer;)Lio/fluxcapacitor/common/RetryConfiguration$Builder;
      42: invokevirtual #564                // Method io/fluxcapacitor/common/RetryConfiguration$Builder.build:()Lio/fluxcapacitor/common/RetryConfiguration;
      45: invokestatic  #568                // Method io/fluxcapacitor/common/TimingUtils.retryOnFailure:(Ljava/util/concurrent/Callable;Lio/fluxcapacitor/common/RetryConfiguration;)Ljava/lang/Object;
      48: checkcast     #174                // class jakarta/websocket/Session
      51: areturn

  private static void lambda$new$3(java.net.URI, io.fluxcapacitor.common.RetryStatus);
    Code:
       0: aload_1
       1: invokevirtual #574                // Method io/fluxcapacitor/common/RetryStatus.getNumberOfTimesRetried:()I
       4: ifne          55
       7: getstatic     #279                // Field log:Lorg/slf4j/Logger;
      10: ldc_w         #579                // String Failed to connect to endpoint {}; reason: {}. Retrying every {} ms...
      13: iconst_3
      14: anewarray     #25                 // class java/lang/Object
      17: dup
      18: iconst_0
      19: aload_0
      20: aastore
      21: dup
      22: iconst_1
      23: aload_1
      24: invokevirtual #581                // Method io/fluxcapacitor/common/RetryStatus.getException:()Ljava/lang/Exception;
      27: invokevirtual #585                // Method java/lang/Exception.getMessage:()Ljava/lang/String;
      30: aastore
      31: dup
      32: iconst_2
      33: aload_1
      34: invokevirtual #588                // Method io/fluxcapacitor/common/RetryStatus.getRetryConfiguration:()Lio/fluxcapacitor/common/RetryConfiguration;
      37: invokevirtual #591                // Method io/fluxcapacitor/common/RetryConfiguration.getDelay:()Ljava/time/Duration;
      40: invokevirtual #595                // Method java/time/Duration.toMillis:()J
      43: invokestatic  #207                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      46: aastore
      47: invokeinterface #598,  3          // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;[Ljava/lang/Object;)V
      52: goto          84
      55: aload_1
      56: invokevirtual #574                // Method io/fluxcapacitor/common/RetryStatus.getNumberOfTimesRetried:()I
      59: bipush        100
      61: irem
      62: ifne          84
      65: getstatic     #279                // Field log:Lorg/slf4j/Logger;
      68: ldc_w         #601                // String Still trying to connect to endpoint {}. Last error: {}.
      71: aload_0
      72: aload_1
      73: invokevirtual #581                // Method io/fluxcapacitor/common/RetryStatus.getException:()Ljava/lang/Exception;
      76: invokevirtual #585                // Method java/lang/Exception.getMessage:()Ljava/lang/String;
      79: invokeinterface #372,  4          // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      84: return

  private static void lambda$new$2(java.net.URI, io.fluxcapacitor.common.RetryStatus);
    Code:
       0: getstatic     #279                // Field log:Lorg/slf4j/Logger;
       3: ldc_w         #603                // String Successfully reconnected to endpoint {}
       6: aload_0
       7: invokeinterface #605,  3          // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;Ljava/lang/Object;)V
      12: return

  private boolean lambda$new$1(java.lang.Exception);
    Code:
       0: aload_0
       1: getfield      #42                 // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: invokevirtual #378                // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
       7: ifne          14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  private jakarta.websocket.Session lambda$new$0(jakarta.websocket.WebSocketContainer, java.net.URI) throws java.lang.Exception;
    Code:
       0: aload_1
       1: aload_0
       2: aload_2
       3: invokeinterface #608,  3          // InterfaceMethod jakarta/websocket/WebSocketContainer.connectToServer:(Ljava/lang/Object;Ljava/net/URI;)Ljakarta/websocket/Session;
       8: areturn

  static {};
    Code:
       0: ldc           #2                  // class io/fluxcapacitor/javaclient/common/websocket/AbstractWebsocketClient
       2: invokestatic  #614                // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #279                // Field log:Lorg/slf4j/Logger;
       8: invokestatic  #620                // Method jakarta/websocket/ContainerProvider.getWebSocketContainer:()Ljakarta/websocket/WebSocketContainer;
      11: putstatic     #7                  // Field defaultWebSocketContainer:Ljakarta/websocket/WebSocketContainer;
      14: invokestatic  #626                // Method com/fasterxml/jackson/databind/json/JsonMapper.builder:()Lcom/fasterxml/jackson/databind/json/JsonMapper$Builder;
      17: iconst_1
      18: anewarray     #631                // class com/fasterxml/jackson/databind/DeserializationFeature
      21: dup
      22: iconst_0
      23: getstatic     #633                // Field com/fasterxml/jackson/databind/DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES:Lcom/fasterxml/jackson/databind/DeserializationFeature;
      26: aastore
      27: invokevirtual #637                // Method com/fasterxml/jackson/databind/json/JsonMapper$Builder.disable:([Lcom/fasterxml/jackson/databind/DeserializationFeature;)Lcom/fasterxml/jackson/databind/cfg/MapperBuilder;
      30: checkcast     #638                // class com/fasterxml/jackson/databind/json/JsonMapper$Builder
      33: invokevirtual #643                // Method com/fasterxml/jackson/databind/json/JsonMapper$Builder.findAndAddModules:()Lcom/fasterxml/jackson/databind/cfg/MapperBuilder;
      36: checkcast     #638                // class com/fasterxml/jackson/databind/json/JsonMapper$Builder
      39: iconst_1
      40: anewarray     #647                // class com/fasterxml/jackson/databind/SerializationFeature
      43: dup
      44: iconst_0
      45: getstatic     #649                // Field com/fasterxml/jackson/databind/SerializationFeature.WRITE_DATES_AS_TIMESTAMPS:Lcom/fasterxml/jackson/databind/SerializationFeature;
      48: aastore
      49: invokevirtual #653                // Method com/fasterxml/jackson/databind/json/JsonMapper$Builder.disable:([Lcom/fasterxml/jackson/databind/SerializationFeature;)Lcom/fasterxml/jackson/databind/cfg/MapperBuilder;
      52: checkcast     #638                // class com/fasterxml/jackson/databind/json/JsonMapper$Builder
      55: invokevirtual #656                // Method com/fasterxml/jackson/databind/json/JsonMapper$Builder.build:()Lcom/fasterxml/jackson/databind/ObjectMapper;
      58: putstatic     #17                 // Field defaultObjectMapper:Lcom/fasterxml/jackson/databind/ObjectMapper;
      61: return
}
