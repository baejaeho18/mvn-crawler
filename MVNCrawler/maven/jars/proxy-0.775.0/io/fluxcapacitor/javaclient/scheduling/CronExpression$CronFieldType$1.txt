Compiled from "CronExpression.java"
final class io.fluxcapacitor.javaclient.scheduling.CronExpression$CronFieldType$1 extends io.fluxcapacitor.javaclient.scheduling.CronExpression$CronFieldType {
  private io.fluxcapacitor.javaclient.scheduling.CronExpression$CronFieldType$1(java.lang.String, int, int, int, java.util.List);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: iload         4
       6: aload         5
       8: invokespecial #1                  // Method io/fluxcapacitor/javaclient/scheduling/CronExpression$CronFieldType."<init>":(Ljava/lang/String;IIILjava/util/List;)V
      11: return

  int getValue(java.time.ZonedDateTime);
    Code:
       0: aload_1
       1: invokevirtual #7                  // Method java/time/ZonedDateTime.getSecond:()I
       4: ireturn

  java.time.ZonedDateTime setValue(java.time.ZonedDateTime, int);
    Code:
       0: aload_1
       1: iload_2
       2: invokevirtual #13                 // Method java/time/ZonedDateTime.withSecond:(I)Ljava/time/ZonedDateTime;
       5: iconst_0
       6: invokevirtual #17                 // Method java/time/ZonedDateTime.withNano:(I)Ljava/time/ZonedDateTime;
       9: areturn

  java.time.ZonedDateTime overflow(java.time.ZonedDateTime);
    Code:
       0: aload_1
       1: lconst_1
       2: invokevirtual #20                 // Method java/time/ZonedDateTime.plusMinutes:(J)Ljava/time/ZonedDateTime;
       5: iconst_0
       6: invokevirtual #13                 // Method java/time/ZonedDateTime.withSecond:(I)Ljava/time/ZonedDateTime;
       9: iconst_0
      10: invokevirtual #17                 // Method java/time/ZonedDateTime.withNano:(I)Ljava/time/ZonedDateTime;
      13: areturn
}
