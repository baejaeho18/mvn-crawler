Compiled from "DefaultScheduler.java"
public class io.fluxcapacitor.javaclient.scheduling.DefaultScheduler implements io.fluxcapacitor.javaclient.scheduling.Scheduler {
  private final io.fluxcapacitor.javaclient.scheduling.client.SchedulingClient client;

  private final io.fluxcapacitor.javaclient.common.serialization.Serializer serializer;

  private final io.fluxcapacitor.javaclient.publishing.DispatchInterceptor dispatchInterceptor;

  private final io.fluxcapacitor.javaclient.publishing.DispatchInterceptor commandDispatchInterceptor;

  private final io.fluxcapacitor.javaclient.tracking.handling.HandlerRegistry localHandlerRegistry;

  public void schedule(io.fluxcapacitor.javaclient.scheduling.Schedule, boolean);
    Code:
       0: invokestatic  #1                  // InterfaceMethod io/fluxcapacitor/javaclient/modeling/Entity.isLoading:()Z
       3: ifeq          7
       6: return
       7: aload_0
       8: getfield      #7                  // Field dispatchInterceptor:Lio/fluxcapacitor/javaclient/publishing/DispatchInterceptor;
      11: aload_1
      12: getstatic     #13                 // Field io/fluxcapacitor/common/MessageType.SCHEDULE:Lio/fluxcapacitor/common/MessageType;
      15: invokeinterface #19,  3           // InterfaceMethod io/fluxcapacitor/javaclient/publishing/DispatchInterceptor.interceptDispatch:(Lio/fluxcapacitor/javaclient/common/Message;Lio/fluxcapacitor/common/MessageType;)Lio/fluxcapacitor/javaclient/common/Message;
      20: checkcast     #25                 // class io/fluxcapacitor/javaclient/scheduling/Schedule
      23: astore_1
      24: aload_1
      25: ifnonnull     29
      28: return
      29: aload_0
      30: getfield      #7                  // Field dispatchInterceptor:Lio/fluxcapacitor/javaclient/publishing/DispatchInterceptor;
      33: aload_1
      34: aload_0
      35: getfield      #27                 // Field serializer:Lio/fluxcapacitor/javaclient/common/serialization/Serializer;
      38: invokevirtual #31                 // Method io/fluxcapacitor/javaclient/scheduling/Schedule.serialize:(Lio/fluxcapacitor/javaclient/common/serialization/Serializer;)Lio/fluxcapacitor/common/api/SerializedMessage;
      41: aload_1
      42: getstatic     #13                 // Field io/fluxcapacitor/common/MessageType.SCHEDULE:Lio/fluxcapacitor/common/MessageType;
      45: invokeinterface #35,  4           // InterfaceMethod io/fluxcapacitor/javaclient/publishing/DispatchInterceptor.modifySerializedMessage:(Lio/fluxcapacitor/common/api/SerializedMessage;Lio/fluxcapacitor/javaclient/common/Message;Lio/fluxcapacitor/common/MessageType;)Lio/fluxcapacitor/common/api/SerializedMessage;
      50: astore_3
      51: aload_3
      52: ifnonnull     56
      55: return
      56: aload_0
      57: getfield      #39                 // Field client:Lio/fluxcapacitor/javaclient/scheduling/client/SchedulingClient;
      60: iconst_1
      61: anewarray     #43                 // class io/fluxcapacitor/common/api/scheduling/SerializedSchedule
      64: dup
      65: iconst_0
      66: new           #43                 // class io/fluxcapacitor/common/api/scheduling/SerializedSchedule
      69: dup
      70: aload_1
      71: invokevirtual #45                 // Method io/fluxcapacitor/javaclient/scheduling/Schedule.getScheduleId:()Ljava/lang/String;
      74: aload_1
      75: invokevirtual #49                 // Method io/fluxcapacitor/javaclient/scheduling/Schedule.getDeadline:()Ljava/time/Instant;
      78: invokevirtual #53                 // Method java/time/Instant.toEpochMilli:()J
      81: aload_3
      82: iload_2
      83: invokespecial #59                 // Method io/fluxcapacitor/common/api/scheduling/SerializedSchedule."<init>":(Ljava/lang/String;JLio/fluxcapacitor/common/api/SerializedMessage;Z)V
      86: aastore
      87: invokeinterface #63,  2           // InterfaceMethod io/fluxcapacitor/javaclient/scheduling/client/SchedulingClient.schedule:([Lio/fluxcapacitor/common/api/scheduling/SerializedSchedule;)Ljava/util/concurrent/CompletableFuture;
      92: invokevirtual #69                 // Method java/util/concurrent/CompletableFuture.get:()Ljava/lang/Object;
      95: pop
      96: goto          132
      99: astore_3
     100: new           #77                 // class io/fluxcapacitor/javaclient/scheduling/SchedulerException
     103: dup
     104: ldc           #79                 // String Failed to schedule message %s for %s
     106: iconst_2
     107: anewarray     #81                 // class java/lang/Object
     110: dup
     111: iconst_0
     112: aload_1
     113: invokevirtual #83                 // Method io/fluxcapacitor/javaclient/scheduling/Schedule.getPayload:()Ljava/lang/Object;
     116: aastore
     117: dup
     118: iconst_1
     119: aload_1
     120: invokevirtual #49                 // Method io/fluxcapacitor/javaclient/scheduling/Schedule.getDeadline:()Ljava/time/Instant;
     123: aastore
     124: invokestatic  #86                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
     127: aload_3
     128: invokespecial #92                 // Method io/fluxcapacitor/javaclient/scheduling/SchedulerException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
     131: athrow
     132: return
    Exception table:
       from    to  target type
           0     6    99   Class java/lang/Exception
           7    28    99   Class java/lang/Exception
          29    55    99   Class java/lang/Exception
          56    96    99   Class java/lang/Exception

  public void scheduleCommand(io.fluxcapacitor.javaclient.scheduling.Schedule, boolean);
    Code:
       0: aload_0
       1: getfield      #95                 // Field commandDispatchInterceptor:Lio/fluxcapacitor/javaclient/publishing/DispatchInterceptor;
       4: aload_1
       5: getstatic     #98                 // Field io/fluxcapacitor/common/MessageType.COMMAND:Lio/fluxcapacitor/common/MessageType;
       8: invokeinterface #19,  3           // InterfaceMethod io/fluxcapacitor/javaclient/publishing/DispatchInterceptor.interceptDispatch:(Lio/fluxcapacitor/javaclient/common/Message;Lio/fluxcapacitor/common/MessageType;)Lio/fluxcapacitor/javaclient/common/Message;
      13: astore_3
      14: aload_3
      15: ifnonnull     19
      18: return
      19: aload_1
      20: aload_3
      21: invokevirtual #101                // Method io/fluxcapacitor/javaclient/common/Message.getPayload:()Ljava/lang/Object;
      24: invokevirtual #104                // Method io/fluxcapacitor/javaclient/scheduling/Schedule.withPayload:(Ljava/lang/Object;)Lio/fluxcapacitor/javaclient/scheduling/Schedule;
      27: aload_3
      28: invokevirtual #108                // Method io/fluxcapacitor/javaclient/common/Message.getMetadata:()Lio/fluxcapacitor/common/api/Metadata;
      31: invokevirtual #112                // Method io/fluxcapacitor/javaclient/scheduling/Schedule.withMetadata:(Lio/fluxcapacitor/common/api/Metadata;)Lio/fluxcapacitor/javaclient/scheduling/Schedule;
      34: astore_1
      35: aload_0
      36: getfield      #95                 // Field commandDispatchInterceptor:Lio/fluxcapacitor/javaclient/publishing/DispatchInterceptor;
      39: aload_1
      40: aload_0
      41: getfield      #27                 // Field serializer:Lio/fluxcapacitor/javaclient/common/serialization/Serializer;
      44: invokevirtual #31                 // Method io/fluxcapacitor/javaclient/scheduling/Schedule.serialize:(Lio/fluxcapacitor/javaclient/common/serialization/Serializer;)Lio/fluxcapacitor/common/api/SerializedMessage;
      47: aload_1
      48: getstatic     #98                 // Field io/fluxcapacitor/common/MessageType.COMMAND:Lio/fluxcapacitor/common/MessageType;
      51: invokeinterface #35,  4           // InterfaceMethod io/fluxcapacitor/javaclient/publishing/DispatchInterceptor.modifySerializedMessage:(Lio/fluxcapacitor/common/api/SerializedMessage;Lio/fluxcapacitor/javaclient/common/Message;Lio/fluxcapacitor/common/MessageType;)Lio/fluxcapacitor/common/api/SerializedMessage;
      56: astore        4
      58: aload         4
      60: ifnonnull     64
      63: return
      64: aload_0
      65: aload_1
      66: new           #116                // class io/fluxcapacitor/javaclient/scheduling/ScheduledCommand
      69: dup
      70: aload         4
      72: invokespecial #118                // Method io/fluxcapacitor/javaclient/scheduling/ScheduledCommand."<init>":(Lio/fluxcapacitor/common/api/SerializedMessage;)V
      75: invokevirtual #104                // Method io/fluxcapacitor/javaclient/scheduling/Schedule.withPayload:(Ljava/lang/Object;)Lio/fluxcapacitor/javaclient/scheduling/Schedule;
      78: ldc           #121                // String $commandType
      80: aload_1
      81: invokevirtual #123                // Method io/fluxcapacitor/javaclient/scheduling/Schedule.getPayloadClass:()Ljava/lang/Class;
      84: invokevirtual #127                // Method java/lang/Class.getName:()Ljava/lang/String;
      87: invokevirtual #132                // Method io/fluxcapacitor/javaclient/scheduling/Schedule.addMetadata:(Ljava/lang/String;Ljava/lang/Object;)Lio/fluxcapacitor/javaclient/scheduling/Schedule;
      90: iload_2
      91: invokevirtual #136                // Method schedule:(Lio/fluxcapacitor/javaclient/scheduling/Schedule;Z)V
      94: return

  public void cancelSchedule(java.lang.String);
    Code:
       0: invokestatic  #1                  // InterfaceMethod io/fluxcapacitor/javaclient/modeling/Entity.isLoading:()Z
       3: ifeq          7
       6: return
       7: aload_0
       8: getfield      #39                 // Field client:Lio/fluxcapacitor/javaclient/scheduling/client/SchedulingClient;
      11: aload_1
      12: invokeinterface #139,  2          // InterfaceMethod io/fluxcapacitor/javaclient/scheduling/client/SchedulingClient.cancelSchedule:(Ljava/lang/String;)Ljava/util/concurrent/CompletableFuture;
      17: invokevirtual #69                 // Method java/util/concurrent/CompletableFuture.get:()Ljava/lang/Object;
      20: pop
      21: goto          47
      24: astore_2
      25: new           #77                 // class io/fluxcapacitor/javaclient/scheduling/SchedulerException
      28: dup
      29: ldc           #143                // String Failed to cancel schedule with id %s
      31: iconst_1
      32: anewarray     #81                 // class java/lang/Object
      35: dup
      36: iconst_0
      37: aload_1
      38: aastore
      39: invokestatic  #86                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      42: aload_2
      43: invokespecial #92                 // Method io/fluxcapacitor/javaclient/scheduling/SchedulerException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      46: athrow
      47: return
    Exception table:
       from    to  target type
           0     6    24   Class java/lang/Exception
           7    21    24   Class java/lang/Exception

  public java.util.Optional<io.fluxcapacitor.javaclient.scheduling.Schedule> getSchedule(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #39                 // Field client:Lio/fluxcapacitor/javaclient/scheduling/client/SchedulingClient;
       4: aload_1
       5: invokeinterface #145,  2          // InterfaceMethod io/fluxcapacitor/javaclient/scheduling/client/SchedulingClient.getSchedule:(Ljava/lang/String;)Lio/fluxcapacitor/common/api/scheduling/SerializedSchedule;
      10: invokestatic  #149                // Method java/util/Optional.ofNullable:(Ljava/lang/Object;)Ljava/util/Optional;
      13: aload_0
      14: invokedynamic #155,  0            // InvokeDynamic #0:apply:(Lio/fluxcapacitor/javaclient/scheduling/DefaultScheduler;)Ljava/util/function/Function;
      19: invokevirtual #159                // Method java/util/Optional.flatMap:(Ljava/util/function/Function;)Ljava/util/Optional;
      22: areturn

  public io.fluxcapacitor.common.Registration registerHandler(java.lang.Object, io.fluxcapacitor.common.handling.HandlerFilter);
    Code:
       0: aload_0
       1: getfield      #163                // Field localHandlerRegistry:Lio/fluxcapacitor/javaclient/tracking/handling/HandlerRegistry;
       4: aload_1
       5: aload_2
       6: invokeinterface #167,  3          // InterfaceMethod io/fluxcapacitor/javaclient/tracking/handling/HandlerRegistry.registerHandler:(Ljava/lang/Object;Lio/fluxcapacitor/common/handling/HandlerFilter;)Lio/fluxcapacitor/common/Registration;
      11: areturn

  public void handleLocally(io.fluxcapacitor.javaclient.scheduling.Schedule);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #27                 // Field serializer:Lio/fluxcapacitor/javaclient/common/serialization/Serializer;
       5: invokevirtual #31                 // Method io/fluxcapacitor/javaclient/scheduling/Schedule.serialize:(Lio/fluxcapacitor/javaclient/common/serialization/Serializer;)Lio/fluxcapacitor/common/api/SerializedMessage;
       8: astore_2
       9: aload_2
      10: aload_1
      11: invokevirtual #49                 // Method io/fluxcapacitor/javaclient/scheduling/Schedule.getDeadline:()Ljava/time/Instant;
      14: invokestatic  #173                // Method io/fluxcapacitor/javaclient/tracking/IndexUtils.indexFromTimestamp:(Ljava/time/Instant;)J
      17: invokestatic  #179                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      20: invokevirtual #185                // Method io/fluxcapacitor/common/api/SerializedMessage.setIndex:(Ljava/lang/Long;)V
      23: aload_0
      24: getfield      #163                // Field localHandlerRegistry:Lio/fluxcapacitor/javaclient/tracking/handling/HandlerRegistry;
      27: new           #191                // class io/fluxcapacitor/javaclient/common/serialization/DeserializingMessage
      30: dup
      31: aload_2
      32: aload_0
      33: aload_1
      34: invokedynamic #193,  0            // InvokeDynamic #1:apply:(Lio/fluxcapacitor/javaclient/scheduling/DefaultScheduler;Lio/fluxcapacitor/javaclient/scheduling/Schedule;)Ljava/util/function/Function;
      39: getstatic     #13                 // Field io/fluxcapacitor/common/MessageType.SCHEDULE:Lio/fluxcapacitor/common/MessageType;
      42: invokespecial #196                // Method io/fluxcapacitor/javaclient/common/serialization/DeserializingMessage."<init>":(Lio/fluxcapacitor/common/api/SerializedMessage;Ljava/util/function/Function;Lio/fluxcapacitor/common/MessageType;)V
      45: invokeinterface #199,  2          // InterfaceMethod io/fluxcapacitor/javaclient/tracking/handling/HandlerRegistry.handle:(Lio/fluxcapacitor/javaclient/common/serialization/DeserializingMessage;)Ljava/util/Optional;
      50: pop
      51: return

  public io.fluxcapacitor.javaclient.scheduling.DefaultScheduler(io.fluxcapacitor.javaclient.scheduling.client.SchedulingClient, io.fluxcapacitor.javaclient.common.serialization.Serializer, io.fluxcapacitor.javaclient.publishing.DispatchInterceptor, io.fluxcapacitor.javaclient.publishing.DispatchInterceptor, io.fluxcapacitor.javaclient.tracking.handling.HandlerRegistry);
    Code:
       0: aload_0
       1: invokespecial #203                // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #39                 // Field client:Lio/fluxcapacitor/javaclient/scheduling/client/SchedulingClient;
       9: aload_0
      10: aload_2
      11: putfield      #27                 // Field serializer:Lio/fluxcapacitor/javaclient/common/serialization/Serializer;
      14: aload_0
      15: aload_3
      16: putfield      #7                  // Field dispatchInterceptor:Lio/fluxcapacitor/javaclient/publishing/DispatchInterceptor;
      19: aload_0
      20: aload         4
      22: putfield      #95                 // Field commandDispatchInterceptor:Lio/fluxcapacitor/javaclient/publishing/DispatchInterceptor;
      25: aload_0
      26: aload         5
      28: putfield      #163                // Field localHandlerRegistry:Lio/fluxcapacitor/javaclient/tracking/handling/HandlerRegistry;
      31: return

  private java.lang.Object lambda$handleLocally$2(io.fluxcapacitor.javaclient.scheduling.Schedule, java.lang.Class);
    Code:
       0: aload_0
       1: getfield      #27                 // Field serializer:Lio/fluxcapacitor/javaclient/common/serialization/Serializer;
       4: aload_1
       5: invokevirtual #83                 // Method io/fluxcapacitor/javaclient/scheduling/Schedule.getPayload:()Ljava/lang/Object;
       8: aload_2
       9: invokeinterface #206,  3          // InterfaceMethod io/fluxcapacitor/javaclient/common/serialization/Serializer.convert:(Ljava/lang/Object;Ljava/lang/Class;)Ljava/lang/Object;
      14: areturn

  private java.util.Optional lambda$getSchedule$1(io.fluxcapacitor.common.api.scheduling.SerializedSchedule);
    Code:
       0: aload_0
       1: getfield      #27                 // Field serializer:Lio/fluxcapacitor/javaclient/common/serialization/Serializer;
       4: aload_1
       5: invokevirtual #212                // Method io/fluxcapacitor/common/api/scheduling/SerializedSchedule.getMessage:()Lio/fluxcapacitor/common/api/SerializedMessage;
       8: invokestatic  #216                // InterfaceMethod java/util/stream/Stream.of:(Ljava/lang/Object;)Ljava/util/stream/Stream;
      11: getstatic     #13                 // Field io/fluxcapacitor/common/MessageType.SCHEDULE:Lio/fluxcapacitor/common/MessageType;
      14: invokeinterface #222,  3          // InterfaceMethod io/fluxcapacitor/javaclient/common/serialization/Serializer.deserializeMessages:(Ljava/util/stream/Stream;Lio/fluxcapacitor/common/MessageType;)Ljava/util/stream/Stream;
      19: invokeinterface #226,  1          // InterfaceMethod java/util/stream/Stream.findFirst:()Ljava/util/Optional;
      24: invokedynamic #230,  0            // InvokeDynamic #2:apply:()Ljava/util/function/Function;
      29: invokevirtual #233                // Method java/util/Optional.map:(Ljava/util/function/Function;)Ljava/util/Optional;
      32: aload_1
      33: invokedynamic #236,  0            // InvokeDynamic #3:apply:(Lio/fluxcapacitor/common/api/scheduling/SerializedSchedule;)Ljava/util/function/Function;
      38: invokevirtual #233                // Method java/util/Optional.map:(Ljava/util/function/Function;)Ljava/util/Optional;
      41: areturn

  private static io.fluxcapacitor.javaclient.scheduling.Schedule lambda$getSchedule$0(io.fluxcapacitor.common.api.scheduling.SerializedSchedule, io.fluxcapacitor.javaclient.common.Message);
    Code:
       0: new           #25                 // class io/fluxcapacitor/javaclient/scheduling/Schedule
       3: dup
       4: aload_1
       5: invokevirtual #101                // Method io/fluxcapacitor/javaclient/common/Message.getPayload:()Ljava/lang/Object;
       8: aload_1
       9: invokevirtual #108                // Method io/fluxcapacitor/javaclient/common/Message.getMetadata:()Lio/fluxcapacitor/common/api/Metadata;
      12: aload_1
      13: invokevirtual #239                // Method io/fluxcapacitor/javaclient/common/Message.getMessageId:()Ljava/lang/String;
      16: aload_1
      17: invokevirtual #242                // Method io/fluxcapacitor/javaclient/common/Message.getTimestamp:()Ljava/time/Instant;
      20: aload_0
      21: invokevirtual #245                // Method io/fluxcapacitor/common/api/scheduling/SerializedSchedule.getScheduleId:()Ljava/lang/String;
      24: aload_0
      25: invokevirtual #246                // Method io/fluxcapacitor/common/api/scheduling/SerializedSchedule.getTimestamp:()J
      28: invokestatic  #248                // Method java/time/Instant.ofEpochMilli:(J)Ljava/time/Instant;
      31: invokespecial #252                // Method io/fluxcapacitor/javaclient/scheduling/Schedule."<init>":(Ljava/lang/Object;Lio/fluxcapacitor/common/api/Metadata;Ljava/lang/String;Ljava/time/Instant;Ljava/lang/String;Ljava/time/Instant;)V
      34: areturn
}
