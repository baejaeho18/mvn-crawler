Compiled from "SchedulingClient.java"
public interface io.fluxcapacitor.javaclient.scheduling.client.SchedulingClient extends java.lang.AutoCloseable {
  public default java.util.concurrent.CompletableFuture<java.lang.Void> schedule(io.fluxcapacitor.common.api.scheduling.SerializedSchedule...);
    Code:
       0: aload_0
       1: getstatic     #1                  // Field io/fluxcapacitor/common/Guarantee.SENT:Lio/fluxcapacitor/common/Guarantee;
       4: aload_1
       5: invokeinterface #7,  3            // InterfaceMethod schedule:(Lio/fluxcapacitor/common/Guarantee;[Lio/fluxcapacitor/common/api/scheduling/SerializedSchedule;)Ljava/util/concurrent/CompletableFuture;
      10: areturn

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> schedule(io.fluxcapacitor.common.Guarantee, io.fluxcapacitor.common.api.scheduling.SerializedSchedule...);

  public default java.util.concurrent.CompletableFuture<java.lang.Void> cancelSchedule(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #1                  // Field io/fluxcapacitor/common/Guarantee.SENT:Lio/fluxcapacitor/common/Guarantee;
       5: invokeinterface #13,  3           // InterfaceMethod cancelSchedule:(Ljava/lang/String;Lio/fluxcapacitor/common/Guarantee;)Ljava/util/concurrent/CompletableFuture;
      10: areturn

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> cancelSchedule(java.lang.String, io.fluxcapacitor.common.Guarantee);

  public abstract io.fluxcapacitor.common.api.scheduling.SerializedSchedule getSchedule(java.lang.String);

  public abstract void close();
}
