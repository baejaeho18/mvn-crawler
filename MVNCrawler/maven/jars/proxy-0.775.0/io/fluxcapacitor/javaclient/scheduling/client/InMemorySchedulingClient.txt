Compiled from "InMemorySchedulingClient.java"
public class io.fluxcapacitor.javaclient.scheduling.client.InMemorySchedulingClient extends io.fluxcapacitor.javaclient.tracking.client.InMemoryMessageStore implements io.fluxcapacitor.javaclient.scheduling.client.SchedulingClient {
  private static final org.slf4j.Logger log;

  private final java.lang.Object $lock;

  private final java.util.concurrent.ConcurrentSkipListMap<java.lang.Long, java.lang.String> scheduleIdsByIndex;

  private volatile java.time.Clock clock;

  public io.fluxcapacitor.javaclient.scheduling.client.InMemorySchedulingClient();
    Code:
       0: aload_0
       1: getstatic     #1                  // Field io/fluxcapacitor/common/MessageType.SCHEDULE:Lio/fluxcapacitor/common/MessageType;
       4: invokespecial #7                  // Method io/fluxcapacitor/javaclient/tracking/client/InMemoryMessageStore."<init>":(Lio/fluxcapacitor/common/MessageType;)V
       7: aload_0
       8: iconst_0
       9: anewarray     #13                 // class java/lang/Object
      12: putfield      #15                 // Field $lock:Ljava/lang/Object;
      15: aload_0
      16: new           #21                 // class java/util/concurrent/ConcurrentSkipListMap
      19: dup
      20: invokespecial #23                 // Method java/util/concurrent/ConcurrentSkipListMap."<init>":()V
      23: putfield      #26                 // Field scheduleIdsByIndex:Ljava/util/concurrent/ConcurrentSkipListMap;
      26: aload_0
      27: invokestatic  #30                 // Method java/time/Clock.systemUTC:()Ljava/time/Clock;
      30: putfield      #36                 // Field clock:Ljava/time/Clock;
      33: return

  public io.fluxcapacitor.javaclient.scheduling.client.InMemorySchedulingClient(java.time.Duration);
    Code:
       0: aload_0
       1: getstatic     #1                  // Field io/fluxcapacitor/common/MessageType.SCHEDULE:Lio/fluxcapacitor/common/MessageType;
       4: aload_1
       5: invokespecial #40                 // Method io/fluxcapacitor/javaclient/tracking/client/InMemoryMessageStore."<init>":(Lio/fluxcapacitor/common/MessageType;Ljava/time/Duration;)V
       8: aload_0
       9: iconst_0
      10: anewarray     #13                 // class java/lang/Object
      13: putfield      #15                 // Field $lock:Ljava/lang/Object;
      16: aload_0
      17: new           #21                 // class java/util/concurrent/ConcurrentSkipListMap
      20: dup
      21: invokespecial #23                 // Method java/util/concurrent/ConcurrentSkipListMap."<init>":()V
      24: putfield      #26                 // Field scheduleIdsByIndex:Ljava/util/concurrent/ConcurrentSkipListMap;
      27: aload_0
      28: invokestatic  #30                 // Method java/time/Clock.systemUTC:()Ljava/time/Clock;
      31: putfield      #36                 // Field clock:Ljava/time/Clock;
      34: return

  protected java.util.Collection<io.fluxcapacitor.common.api.SerializedMessage> filterMessages(java.util.Collection<io.fluxcapacitor.common.api.SerializedMessage>);
    Code:
       0: aload_0
       1: getfield      #36                 // Field clock:Ljava/time/Clock;
       4: invokevirtual #43                 // Method java/time/Clock.millis:()J
       7: invokestatic  #47                 // Method io/fluxcapacitor/javaclient/tracking/IndexUtils.indexFromMillis:(J)J
      10: lstore_2
      11: aload_0
      12: aload_1
      13: invokespecial #53                 // Method io/fluxcapacitor/javaclient/tracking/client/InMemoryMessageStore.filterMessages:(Ljava/util/Collection;)Ljava/util/Collection;
      16: invokeinterface #57,  1           // InterfaceMethod java/util/Collection.stream:()Ljava/util/stream/Stream;
      21: aload_0
      22: lload_2
      23: invokedynamic #63,  0             // InvokeDynamic #0:test:(Lio/fluxcapacitor/javaclient/scheduling/client/InMemorySchedulingClient;J)Ljava/util/function/Predicate;
      28: invokeinterface #67,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      33: invokestatic  #73                 // Method java/util/stream/Collectors.toList:()Ljava/util/stream/Collector;
      36: invokeinterface #79,  2           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
      41: checkcast     #58                 // class java/util/Collection
      44: areturn

  public java.util.concurrent.CompletableFuture<java.lang.Void> schedule(io.fluxcapacitor.common.Guarantee, io.fluxcapacitor.common.api.scheduling.SerializedSchedule...);
    Code:
       0: aload_0
       1: getfield      #15                 // Field $lock:Ljava/lang/Object;
       4: dup
       5: astore_3
       6: monitorenter
       7: aload_2
       8: invokestatic  #83                 // Method java/util/Arrays.stream:([Ljava/lang/Object;)Ljava/util/stream/Stream;
      11: aload_0
      12: invokedynamic #88,  0             // InvokeDynamic #1:test:(Lio/fluxcapacitor/javaclient/scheduling/client/InMemorySchedulingClient;)Ljava/util/function/Predicate;
      17: invokeinterface #67,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      22: invokeinterface #91,  1           // InterfaceMethod java/util/stream/Stream.toList:()Ljava/util/List;
      27: astore        4
      29: aload         4
      31: invokeinterface #94,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      36: astore        5
      38: aload         5
      40: invokeinterface #100,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      45: ifeq          125
      48: aload         5
      50: invokeinterface #106,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      55: checkcast     #110                // class io/fluxcapacitor/common/api/scheduling/SerializedSchedule
      58: astore        6
      60: aload_0
      61: aload         6
      63: invokevirtual #112                // Method io/fluxcapacitor/common/api/scheduling/SerializedSchedule.getScheduleId:()Ljava/lang/String;
      66: invokevirtual #116                // Method cancelSchedule:(Ljava/lang/String;)Ljava/util/concurrent/CompletableFuture;
      69: pop
      70: aload         6
      72: invokevirtual #120                // Method io/fluxcapacitor/common/api/scheduling/SerializedSchedule.getTimestamp:()J
      75: invokestatic  #47                 // Method io/fluxcapacitor/javaclient/tracking/IndexUtils.indexFromMillis:(J)J
      78: lstore        7
      80: aload_0
      81: getfield      #26                 // Field scheduleIdsByIndex:Ljava/util/concurrent/ConcurrentSkipListMap;
      84: lload         7
      86: invokestatic  #123                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      89: aload         6
      91: invokevirtual #112                // Method io/fluxcapacitor/common/api/scheduling/SerializedSchedule.getScheduleId:()Ljava/lang/String;
      94: invokevirtual #129                // Method java/util/concurrent/ConcurrentSkipListMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      97: ifnull        109
     100: lload         7
     102: lconst_1
     103: ladd
     104: lstore        7
     106: goto          80
     109: aload         6
     111: invokevirtual #133                // Method io/fluxcapacitor/common/api/scheduling/SerializedSchedule.getMessage:()Lio/fluxcapacitor/common/api/SerializedMessage;
     114: lload         7
     116: invokestatic  #123                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     119: invokevirtual #137                // Method io/fluxcapacitor/common/api/SerializedMessage.setIndex:(Ljava/lang/Long;)V
     122: goto          38
     125: aload_0
     126: getstatic     #143                // Field io/fluxcapacitor/common/Guarantee.SENT:Lio/fluxcapacitor/common/Guarantee;
     129: aload         4
     131: invokeinterface #149,  1          // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
     136: invokedynamic #150,  0            // InvokeDynamic #2:apply:()Ljava/util/function/Function;
     141: invokeinterface #154,  2          // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
     146: invokedynamic #158,  0            // InvokeDynamic #3:apply:()Ljava/util/function/IntFunction;
     151: invokeinterface #161,  2          // InterfaceMethod java/util/stream/Stream.toArray:(Ljava/util/function/IntFunction;)[Ljava/lang/Object;
     156: checkcast     #165                // class "[Lio/fluxcapacitor/common/api/SerializedMessage;"
     159: invokespecial #167                // Method io/fluxcapacitor/javaclient/tracking/client/InMemoryMessageStore.send:(Lio/fluxcapacitor/common/Guarantee;[Lio/fluxcapacitor/common/api/SerializedMessage;)Ljava/util/concurrent/CompletableFuture;
     162: pop
     163: aconst_null
     164: invokestatic  #171                // Method java/util/concurrent/CompletableFuture.completedFuture:(Ljava/lang/Object;)Ljava/util/concurrent/CompletableFuture;
     167: aload_3
     168: monitorexit
     169: areturn
     170: astore        9
     172: aload_3
     173: monitorexit
     174: aload         9
     176: athrow
    Exception table:
       from    to  target type
           7   169   170   any
         170   174   170   any

  public java.util.concurrent.CompletableFuture<java.lang.Void> cancelSchedule(java.lang.String, io.fluxcapacitor.common.Guarantee);
    Code:
       0: aload_0
       1: getfield      #15                 // Field $lock:Ljava/lang/Object;
       4: dup
       5: astore_3
       6: monitorenter
       7: aload_0
       8: getfield      #26                 // Field scheduleIdsByIndex:Ljava/util/concurrent/ConcurrentSkipListMap;
      11: invokevirtual #177                // Method java/util/concurrent/ConcurrentSkipListMap.values:()Ljava/util/Collection;
      14: aload_1
      15: invokedynamic #181,  0            // InvokeDynamic #4:test:(Ljava/lang/String;)Ljava/util/function/Predicate;
      20: invokeinterface #184,  2          // InterfaceMethod java/util/Collection.removeIf:(Ljava/util/function/Predicate;)Z
      25: pop
      26: aconst_null
      27: invokestatic  #171                // Method java/util/concurrent/CompletableFuture.completedFuture:(Ljava/lang/Object;)Ljava/util/concurrent/CompletableFuture;
      30: aload_3
      31: monitorexit
      32: areturn
      33: astore        4
      35: aload_3
      36: monitorexit
      37: aload         4
      39: athrow
    Exception table:
       from    to  target type
           7    32    33   any
          33    37    33   any

  public io.fluxcapacitor.common.api.scheduling.SerializedSchedule getSchedule(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #15                 // Field $lock:Ljava/lang/Object;
       4: dup
       5: astore_2
       6: monitorenter
       7: aload_0
       8: getfield      #26                 // Field scheduleIdsByIndex:Ljava/util/concurrent/ConcurrentSkipListMap;
      11: invokevirtual #188                // Method java/util/concurrent/ConcurrentSkipListMap.entrySet:()Ljava/util/Set;
      14: invokeinterface #192,  1          // InterfaceMethod java/util/Set.stream:()Ljava/util/stream/Stream;
      19: aload_1
      20: invokedynamic #195,  0            // InvokeDynamic #5:test:(Ljava/lang/String;)Ljava/util/function/Predicate;
      25: invokeinterface #67,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      30: invokeinterface #196,  1          // InterfaceMethod java/util/stream/Stream.findFirst:()Ljava/util/Optional;
      35: aload_0
      36: aload_1
      37: invokedynamic #200,  0            // InvokeDynamic #6:apply:(Lio/fluxcapacitor/javaclient/scheduling/client/InMemorySchedulingClient;Ljava/lang/String;)Ljava/util/function/Function;
      42: invokevirtual #203                // Method java/util/Optional.map:(Ljava/util/function/Function;)Ljava/util/Optional;
      45: aconst_null
      46: invokevirtual #208                // Method java/util/Optional.orElse:(Ljava/lang/Object;)Ljava/lang/Object;
      49: checkcast     #110                // class io/fluxcapacitor/common/api/scheduling/SerializedSchedule
      52: aload_2
      53: monitorexit
      54: areturn
      55: astore_3
      56: aload_2
      57: monitorexit
      58: aload_3
      59: athrow
    Exception table:
       from    to  target type
           7    54    55   any
          55    58    55   any

  public java.util.concurrent.CompletableFuture<java.lang.Void> send(io.fluxcapacitor.common.Guarantee, io.fluxcapacitor.common.api.SerializedMessage...);
    Code:
       0: new           #212                // class java/lang/UnsupportedOperationException
       3: dup
       4: ldc           #214                // String Use method #schedule instead
       6: invokespecial #216                // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
       9: athrow

  public void setClock(java.time.Clock);
    Code:
       0: aload_0
       1: getfield      #15                 // Field $lock:Ljava/lang/Object;
       4: dup
       5: astore_2
       6: monitorenter
       7: aload_1
       8: ifnonnull     21
      11: new           #219                // class java/lang/NullPointerException
      14: dup
      15: ldc           #221                // String clock is marked non-null but is null
      17: invokespecial #223                // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      20: athrow
      21: aload_0
      22: dup
      23: astore_3
      24: monitorenter
      25: aload_0
      26: aload_1
      27: putfield      #36                 // Field clock:Ljava/time/Clock;
      30: aload_0
      31: invokevirtual #224                // Method java/lang/Object.notifyAll:()V
      34: aload_3
      35: monitorexit
      36: goto          46
      39: astore        4
      41: aload_3
      42: monitorexit
      43: aload         4
      45: athrow
      46: aload_2
      47: monitorexit
      48: goto          58
      51: astore        5
      53: aload_2
      54: monitorexit
      55: aload         5
      57: athrow
      58: return
    Exception table:
       from    to  target type
          25    36    39   any
          39    43    39   any
           7    48    51   any
          51    55    51   any

  public java.util.List<io.fluxcapacitor.javaclient.scheduling.Schedule> getSchedules(io.fluxcapacitor.javaclient.common.serialization.Serializer);
    Code:
       0: aload_0
       1: getfield      #15                 // Field $lock:Ljava/lang/Object;
       4: dup
       5: astore_2
       6: monitorenter
       7: aload_0
       8: aload_0
       9: getfield      #26                 // Field scheduleIdsByIndex:Ljava/util/concurrent/ConcurrentSkipListMap;
      12: aload_1
      13: invokevirtual #227                // Method asList:(Ljava/util/Map;Lio/fluxcapacitor/javaclient/common/serialization/Serializer;)Ljava/util/List;
      16: aload_2
      17: monitorexit
      18: areturn
      19: astore_3
      20: aload_2
      21: monitorexit
      22: aload_3
      23: athrow
    Exception table:
       from    to  target type
           7    18    19   any
          19    22    19   any

  public java.util.List<io.fluxcapacitor.javaclient.scheduling.Schedule> removeExpiredSchedules(io.fluxcapacitor.javaclient.common.serialization.Serializer);
    Code:
       0: aload_0
       1: getfield      #15                 // Field $lock:Ljava/lang/Object;
       4: dup
       5: astore_2
       6: monitorenter
       7: aload_0
       8: getfield      #26                 // Field scheduleIdsByIndex:Ljava/util/concurrent/ConcurrentSkipListMap;
      11: aload_0
      12: getfield      #36                 // Field clock:Ljava/time/Clock;
      15: invokevirtual #43                 // Method java/time/Clock.millis:()J
      18: invokestatic  #47                 // Method io/fluxcapacitor/javaclient/tracking/IndexUtils.indexFromMillis:(J)J
      21: invokestatic  #123                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      24: iconst_1
      25: invokevirtual #231                // Method java/util/concurrent/ConcurrentSkipListMap.headMap:(Ljava/lang/Object;Z)Ljava/util/concurrent/ConcurrentNavigableMap;
      28: astore_3
      29: aload_0
      30: aload_3
      31: aload_1
      32: invokevirtual #227                // Method asList:(Ljava/util/Map;Lio/fluxcapacitor/javaclient/common/serialization/Serializer;)Ljava/util/List;
      35: astore        4
      37: aload_3
      38: invokeinterface #235,  1          // InterfaceMethod java/util/Map.clear:()V
      43: aload         4
      45: aload_2
      46: monitorexit
      47: areturn
      48: astore        5
      50: aload_2
      51: monitorexit
      52: aload         5
      54: athrow
    Exception table:
       from    to  target type
           7    47    48   any
          48    52    48   any

  protected java.util.List<io.fluxcapacitor.javaclient.scheduling.Schedule> asList(java.util.Map<java.lang.Long, java.lang.String>, io.fluxcapacitor.javaclient.common.serialization.Serializer);
    Code:
       0: aload_1
       1: invokeinterface #240,  1          // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
       6: invokeinterface #192,  1          // InterfaceMethod java/util/Set.stream:()Ljava/util/stream/Stream;
      11: aload_0
      12: aload_2
      13: invokedynamic #241,  0            // InvokeDynamic #7:apply:(Lio/fluxcapacitor/javaclient/scheduling/client/InMemorySchedulingClient;Lio/fluxcapacitor/javaclient/common/serialization/Serializer;)Ljava/util/function/Function;
      18: invokeinterface #154,  2          // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      23: invokeinterface #91,  1           // InterfaceMethod java/util/stream/Stream.toList:()Ljava/util/List;
      28: areturn

  protected void purgeExpiredMessages(java.time.Duration);
    Code:
       0: aload_0
       1: getfield      #26                 // Field scheduleIdsByIndex:Ljava/util/concurrent/ConcurrentSkipListMap;
       4: aload_0
       5: getfield      #36                 // Field clock:Ljava/time/Clock;
       8: invokevirtual #43                 // Method java/time/Clock.millis:()J
      11: aload_1
      12: invokevirtual #244                // Method java/time/Duration.toMillis:()J
      15: lsub
      16: invokestatic  #47                 // Method io/fluxcapacitor/javaclient/tracking/IndexUtils.indexFromMillis:(J)J
      19: invokestatic  #123                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      22: invokevirtual #249                // Method java/util/concurrent/ConcurrentSkipListMap.headMap:(Ljava/lang/Object;)Ljava/util/concurrent/ConcurrentNavigableMap;
      25: invokeinterface #252,  1          // InterfaceMethod java/util/concurrent/ConcurrentNavigableMap.clear:()V
      30: aload_0
      31: aload_1
      32: invokespecial #255                // Method io/fluxcapacitor/javaclient/tracking/client/InMemoryMessageStore.purgeExpiredMessages:(Ljava/time/Duration;)V
      35: return

  private io.fluxcapacitor.javaclient.scheduling.Schedule lambda$asList$6(io.fluxcapacitor.javaclient.common.serialization.Serializer, java.util.Map$Entry);
    Code:
       0: aload_0
       1: aload_2
       2: invokeinterface #259,  1          // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
       7: checkcast     #124                // class java/lang/Long
      10: invokevirtual #264                // Method java/lang/Long.longValue:()J
      13: invokevirtual #267                // Method getMessage:(J)Lio/fluxcapacitor/common/api/SerializedMessage;
      16: astore_3
      17: new           #270                // class io/fluxcapacitor/javaclient/scheduling/Schedule
      20: dup
      21: aload_1
      22: aload_3
      23: invokestatic  #272                // InterfaceMethod java/util/stream/Stream.of:(Ljava/lang/Object;)Ljava/util/stream/Stream;
      26: getstatic     #1                  // Field io/fluxcapacitor/common/MessageType.SCHEDULE:Lio/fluxcapacitor/common/MessageType;
      29: invokeinterface #276,  3          // InterfaceMethod io/fluxcapacitor/javaclient/common/serialization/Serializer.deserializeMessages:(Ljava/util/stream/Stream;Lio/fluxcapacitor/common/MessageType;)Ljava/util/stream/Stream;
      34: invokeinterface #196,  1          // InterfaceMethod java/util/stream/Stream.findFirst:()Ljava/util/Optional;
      39: invokevirtual #282                // Method java/util/Optional.get:()Ljava/lang/Object;
      42: checkcast     #285                // class io/fluxcapacitor/javaclient/common/serialization/DeserializingMessage
      45: invokevirtual #287                // Method io/fluxcapacitor/javaclient/common/serialization/DeserializingMessage.getPayload:()Ljava/lang/Object;
      48: aload_3
      49: invokevirtual #290                // Method io/fluxcapacitor/common/api/SerializedMessage.getMetadata:()Lio/fluxcapacitor/common/api/Metadata;
      52: aload_2
      53: invokeinterface #294,  1          // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      58: checkcast     #297                // class java/lang/String
      61: aload_2
      62: invokeinterface #259,  1          // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      67: checkcast     #124                // class java/lang/Long
      70: invokevirtual #264                // Method java/lang/Long.longValue:()J
      73: invokestatic  #299                // Method io/fluxcapacitor/javaclient/tracking/IndexUtils.timestampFromIndex:(J)Ljava/time/Instant;
      76: invokespecial #303                // Method io/fluxcapacitor/javaclient/scheduling/Schedule."<init>":(Ljava/lang/Object;Lio/fluxcapacitor/common/api/Metadata;Ljava/lang/String;Ljava/time/Instant;)V
      79: areturn

  private io.fluxcapacitor.common.api.scheduling.SerializedSchedule lambda$getSchedule$5(java.lang.String, java.util.Map$Entry);
    Code:
       0: aload_0
       1: aload_2
       2: invokeinterface #259,  1          // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
       7: checkcast     #124                // class java/lang/Long
      10: invokevirtual #264                // Method java/lang/Long.longValue:()J
      13: invokevirtual #267                // Method getMessage:(J)Lio/fluxcapacitor/common/api/SerializedMessage;
      16: astore_3
      17: new           #110                // class io/fluxcapacitor/common/api/scheduling/SerializedSchedule
      20: dup
      21: aload_1
      22: aload_2
      23: invokeinterface #259,  1          // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      28: checkcast     #124                // class java/lang/Long
      31: invokevirtual #264                // Method java/lang/Long.longValue:()J
      34: invokestatic  #306                // Method io/fluxcapacitor/javaclient/tracking/IndexUtils.millisFromIndex:(J)J
      37: aload_3
      38: iconst_0
      39: invokespecial #309                // Method io/fluxcapacitor/common/api/scheduling/SerializedSchedule."<init>":(Ljava/lang/String;JLio/fluxcapacitor/common/api/SerializedMessage;Z)V
      42: areturn

  private static boolean lambda$getSchedule$4(java.lang.String, java.util.Map$Entry);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #294,  1          // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
       7: invokevirtual #312                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      10: ireturn

  private static boolean lambda$cancelSchedule$3(java.lang.String, java.lang.String);
    Code:
       0: aload_1
       1: aload_0
       2: invokevirtual #312                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
       5: ireturn

  private static io.fluxcapacitor.common.api.SerializedMessage[] lambda$schedule$2(int);
    Code:
       0: iload_0
       1: anewarray     #138                // class io/fluxcapacitor/common/api/SerializedMessage
       4: areturn

  private boolean lambda$schedule$1(io.fluxcapacitor.common.api.scheduling.SerializedSchedule);
    Code:
       0: aload_1
       1: invokevirtual #316                // Method io/fluxcapacitor/common/api/scheduling/SerializedSchedule.isIfAbsent:()Z
       4: ifeq          21
       7: aload_0
       8: getfield      #26                 // Field scheduleIdsByIndex:Ljava/util/concurrent/ConcurrentSkipListMap;
      11: aload_1
      12: invokevirtual #112                // Method io/fluxcapacitor/common/api/scheduling/SerializedSchedule.getScheduleId:()Ljava/lang/String;
      15: invokevirtual #319                // Method java/util/concurrent/ConcurrentSkipListMap.containsValue:(Ljava/lang/Object;)Z
      18: ifne          25
      21: iconst_1
      22: goto          26
      25: iconst_0
      26: ireturn

  private boolean lambda$filterMessages$0(long, io.fluxcapacitor.common.api.SerializedMessage);
    Code:
       0: aload_3
       1: invokevirtual #322                // Method io/fluxcapacitor/common/api/SerializedMessage.getIndex:()Ljava/lang/Long;
       4: invokevirtual #264                // Method java/lang/Long.longValue:()J
       7: lload_1
       8: lcmp
       9: ifgt          30
      12: aload_0
      13: getfield      #26                 // Field scheduleIdsByIndex:Ljava/util/concurrent/ConcurrentSkipListMap;
      16: aload_3
      17: invokevirtual #322                // Method io/fluxcapacitor/common/api/SerializedMessage.getIndex:()Ljava/lang/Long;
      20: invokevirtual #326                // Method java/util/concurrent/ConcurrentSkipListMap.containsKey:(Ljava/lang/Object;)Z
      23: ifeq          30
      26: iconst_1
      27: goto          31
      30: iconst_0
      31: ireturn

  static {};
    Code:
       0: ldc           #16                 // class io/fluxcapacitor/javaclient/scheduling/client/InMemorySchedulingClient
       2: invokestatic  #329                // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #335                // Field log:Lorg/slf4j/Logger;
       8: return
}
