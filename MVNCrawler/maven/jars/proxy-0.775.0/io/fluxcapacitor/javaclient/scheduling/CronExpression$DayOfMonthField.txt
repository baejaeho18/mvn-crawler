Compiled from "CronExpression.java"
class io.fluxcapacitor.javaclient.scheduling.CronExpression$DayOfMonthField extends io.fluxcapacitor.javaclient.scheduling.CronExpression$BasicField {
  io.fluxcapacitor.javaclient.scheduling.CronExpression$DayOfMonthField(java.lang.String);
    Code:
       0: aload_0
       1: getstatic     #1                  // Field io/fluxcapacitor/javaclient/scheduling/CronExpression$CronFieldType.DAY_OF_MONTH:Lio/fluxcapacitor/javaclient/scheduling/CronExpression$CronFieldType;
       4: aload_1
       5: invokespecial #7                  // Method io/fluxcapacitor/javaclient/scheduling/CronExpression$BasicField."<init>":(Lio/fluxcapacitor/javaclient/scheduling/CronExpression$CronFieldType;Ljava/lang/String;)V
       8: return

  boolean matches(java.time.LocalDate);
    Code:
       0: aload_0
       1: getfield      #13                 // Field parts:Ljava/util/List;
       4: invokeinterface #19,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
       9: astore_2
      10: aload_2
      11: invokeinterface #25,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      16: ifeq          209
      19: aload_2
      20: invokeinterface #31,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      25: checkcast     #35                 // class io/fluxcapacitor/javaclient/scheduling/CronExpression$FieldPart
      28: astore_3
      29: ldc           #37                 // String L
      31: aload_3
      32: getfield      #39                 // Field io/fluxcapacitor/javaclient/scheduling/CronExpression$FieldPart.modifier:Ljava/lang/String;
      35: invokevirtual #43                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      38: ifeq          92
      41: aload_1
      42: invokevirtual #49                 // Method java/time/LocalDate.getYear:()I
      45: aload_1
      46: invokevirtual #55                 // Method java/time/LocalDate.getMonth:()Ljava/time/Month;
      49: invokevirtual #59                 // Method java/time/Month.getValue:()I
      52: invokestatic  #64                 // Method java/time/YearMonth.of:(II)Ljava/time/YearMonth;
      55: astore        4
      57: aload_1
      58: invokevirtual #70                 // Method java/time/LocalDate.getDayOfMonth:()I
      61: aload         4
      63: invokevirtual #73                 // Method java/time/YearMonth.lengthOfMonth:()I
      66: aload_3
      67: getfield      #76                 // Field io/fluxcapacitor/javaclient/scheduling/CronExpression$FieldPart.from:I
      70: iconst_m1
      71: if_icmpne     78
      74: iconst_0
      75: goto          82
      78: aload_3
      79: getfield      #76                 // Field io/fluxcapacitor/javaclient/scheduling/CronExpression$FieldPart.from:I
      82: isub
      83: if_icmpne     90
      86: iconst_1
      87: goto          91
      90: iconst_0
      91: ireturn
      92: ldc           #80                 // String W
      94: aload_3
      95: getfield      #39                 // Field io/fluxcapacitor/javaclient/scheduling/CronExpression$FieldPart.modifier:Ljava/lang/String;
      98: invokevirtual #43                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     101: ifeq          192
     104: aload_1
     105: invokevirtual #82                 // Method java/time/LocalDate.getDayOfWeek:()Ljava/time/DayOfWeek;
     108: invokevirtual #86                 // Method java/time/DayOfWeek.getValue:()I
     111: iconst_5
     112: if_icmpgt     206
     115: aload_1
     116: invokevirtual #70                 // Method java/time/LocalDate.getDayOfMonth:()I
     119: aload_3
     120: getfield      #76                 // Field io/fluxcapacitor/javaclient/scheduling/CronExpression$FieldPart.from:I
     123: if_icmpne     128
     126: iconst_1
     127: ireturn
     128: aload_1
     129: invokevirtual #82                 // Method java/time/LocalDate.getDayOfWeek:()Ljava/time/DayOfWeek;
     132: invokevirtual #86                 // Method java/time/DayOfWeek.getValue:()I
     135: iconst_5
     136: if_icmpne     160
     139: aload_1
     140: lconst_1
     141: invokevirtual #89                 // Method java/time/LocalDate.plusDays:(J)Ljava/time/LocalDate;
     144: invokevirtual #70                 // Method java/time/LocalDate.getDayOfMonth:()I
     147: aload_3
     148: getfield      #76                 // Field io/fluxcapacitor/javaclient/scheduling/CronExpression$FieldPart.from:I
     151: if_icmpne     158
     154: iconst_1
     155: goto          159
     158: iconst_0
     159: ireturn
     160: aload_1
     161: invokevirtual #82                 // Method java/time/LocalDate.getDayOfWeek:()Ljava/time/DayOfWeek;
     164: invokevirtual #86                 // Method java/time/DayOfWeek.getValue:()I
     167: iconst_1
     168: if_icmpne     206
     171: aload_1
     172: lconst_1
     173: invokevirtual #93                 // Method java/time/LocalDate.minusDays:(J)Ljava/time/LocalDate;
     176: invokevirtual #70                 // Method java/time/LocalDate.getDayOfMonth:()I
     179: aload_3
     180: getfield      #76                 // Field io/fluxcapacitor/javaclient/scheduling/CronExpression$FieldPart.from:I
     183: if_icmpne     190
     186: iconst_1
     187: goto          191
     190: iconst_0
     191: ireturn
     192: aload_0
     193: aload_1
     194: invokevirtual #70                 // Method java/time/LocalDate.getDayOfMonth:()I
     197: aload_3
     198: invokevirtual #96                 // Method matches:(ILio/fluxcapacitor/javaclient/scheduling/CronExpression$FieldPart;)Z
     201: ifeq          206
     204: iconst_1
     205: ireturn
     206: goto          10
     209: iconst_0
     210: ireturn

  protected void validatePart(io.fluxcapacitor.javaclient.scheduling.CronExpression$FieldPart);
    Code:
       0: aload_1
       1: getfield      #39                 // Field io/fluxcapacitor/javaclient/scheduling/CronExpression$FieldPart.modifier:Ljava/lang/String;
       4: ifnull        66
       7: iconst_3
       8: anewarray     #44                 // class java/lang/String
      11: dup
      12: iconst_0
      13: ldc           #37                 // String L
      15: aastore
      16: dup
      17: iconst_1
      18: ldc           #80                 // String W
      20: aastore
      21: dup
      22: iconst_2
      23: ldc           #100                // String ?
      25: aastore
      26: invokestatic  #102                // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
      29: aload_1
      30: getfield      #39                 // Field io/fluxcapacitor/javaclient/scheduling/CronExpression$FieldPart.modifier:Ljava/lang/String;
      33: invokeinterface #108,  2          // InterfaceMethod java/util/List.indexOf:(Ljava/lang/Object;)I
      38: iconst_m1
      39: if_icmpne     66
      42: new           #112                // class java/lang/IllegalArgumentException
      45: dup
      46: ldc           #114                // String Invalid modifier [%s]
      48: iconst_1
      49: anewarray     #116                // class java/lang/Object
      52: dup
      53: iconst_0
      54: aload_1
      55: getfield      #39                 // Field io/fluxcapacitor/javaclient/scheduling/CronExpression$FieldPart.modifier:Ljava/lang/String;
      58: aastore
      59: invokestatic  #118                // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      62: invokespecial #122                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      65: athrow
      66: aload_1
      67: getfield      #125                // Field io/fluxcapacitor/javaclient/scheduling/CronExpression$FieldPart.incrementModifier:Ljava/lang/String;
      70: ifnull        109
      73: ldc           #128                // String /
      75: aload_1
      76: getfield      #125                // Field io/fluxcapacitor/javaclient/scheduling/CronExpression$FieldPart.incrementModifier:Ljava/lang/String;
      79: invokevirtual #43                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      82: ifne          109
      85: new           #112                // class java/lang/IllegalArgumentException
      88: dup
      89: ldc           #130                // String Invalid increment modifier [%s]
      91: iconst_1
      92: anewarray     #116                // class java/lang/Object
      95: dup
      96: iconst_0
      97: aload_1
      98: getfield      #125                // Field io/fluxcapacitor/javaclient/scheduling/CronExpression$FieldPart.incrementModifier:Ljava/lang/String;
     101: aastore
     102: invokestatic  #118                // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
     105: invokespecial #122                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     108: athrow
     109: return

  protected boolean matches(int, io.fluxcapacitor.javaclient.scheduling.CronExpression$FieldPart);
    Code:
       0: ldc           #100                // String ?
       2: aload_2
       3: getfield      #39                 // Field io/fluxcapacitor/javaclient/scheduling/CronExpression$FieldPart.modifier:Ljava/lang/String;
       6: invokevirtual #43                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
       9: ifne          21
      12: aload_0
      13: iload_1
      14: aload_2
      15: invokespecial #132                // Method io/fluxcapacitor/javaclient/scheduling/CronExpression$BasicField.matches:(ILio/fluxcapacitor/javaclient/scheduling/CronExpression$FieldPart;)Z
      18: ifeq          25
      21: iconst_1
      22: goto          26
      25: iconst_0
      26: ireturn
}
