Compiled from "AggregateEventStream.java"
public class io.fluxcapacitor.javaclient.persisting.eventsourcing.AggregateEventStream<T> implements java.util.stream.Stream<T> {
  private final java.util.stream.Stream<T> eventStream;

  private final java.lang.String aggregateId;

  private final java.util.function.Supplier<java.lang.Long> lastSequenceNumber;

  public <O> io.fluxcapacitor.javaclient.persisting.eventsourcing.AggregateEventStream<O> convert(java.util.function.Function<java.util.stream.Stream<T>, java.util.stream.Stream<O>>);
    Code:
       0: new           #1                  // class io/fluxcapacitor/javaclient/persisting/eventsourcing/AggregateEventStream
       3: dup
       4: aload_1
       5: aload_0
       6: getfield      #3                  // Field eventStream:Ljava/util/stream/Stream;
       9: invokeinterface #7,  2            // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      14: checkcast     #13                 // class java/util/stream/Stream
      17: aload_0
      18: getfield      #15                 // Field aggregateId:Ljava/lang/String;
      21: aload_0
      22: getfield      #19                 // Field lastSequenceNumber:Ljava/util/function/Supplier;
      25: invokespecial #23                 // Method "<init>":(Ljava/util/stream/Stream;Ljava/lang/String;Ljava/util/function/Supplier;)V
      28: areturn

  public java.util.Optional<java.lang.Long> getLastSequenceNumber();
    Code:
       0: aload_0
       1: getfield      #19                 // Field lastSequenceNumber:Ljava/util/function/Supplier;
       4: invokeinterface #27,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
       9: checkcast     #33                 // class java/lang/Long
      12: invokestatic  #35                 // Method java/util/Optional.ofNullable:(Ljava/lang/Object;)Ljava/util/Optional;
      15: areturn

  public java.util.stream.Stream<T> getEventStream();
    Code:
       0: aload_0
       1: getfield      #3                  // Field eventStream:Ljava/util/stream/Stream;
       4: areturn

  public java.lang.String getAggregateId();
    Code:
       0: aload_0
       1: getfield      #15                 // Field aggregateId:Ljava/lang/String;
       4: areturn

  public io.fluxcapacitor.javaclient.persisting.eventsourcing.AggregateEventStream(java.util.stream.Stream<T>, java.lang.String, java.util.function.Supplier<java.lang.Long>);
    Code:
       0: aload_0
       1: invokespecial #41                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #3                  // Field eventStream:Ljava/util/stream/Stream;
       9: aload_0
      10: aload_2
      11: putfield      #15                 // Field aggregateId:Ljava/lang/String;
      14: aload_0
      15: aload_3
      16: putfield      #19                 // Field lastSequenceNumber:Ljava/util/function/Supplier;
      19: return

  public java.util.stream.Stream<T> filter(java.util.function.Predicate<? super T>);
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method getEventStream:()Ljava/util/stream/Stream;
       4: aload_1
       5: invokeinterface #50,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      10: areturn

  public <R> java.util.stream.Stream<R> map(java.util.function.Function<? super T, ? extends R>);
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method getEventStream:()Ljava/util/stream/Stream;
       4: aload_1
       5: invokeinterface #54,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      10: areturn

  public java.util.stream.IntStream mapToInt(java.util.function.ToIntFunction<? super T>);
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method getEventStream:()Ljava/util/stream/Stream;
       4: aload_1
       5: invokeinterface #58,  2           // InterfaceMethod java/util/stream/Stream.mapToInt:(Ljava/util/function/ToIntFunction;)Ljava/util/stream/IntStream;
      10: areturn

  public java.util.stream.LongStream mapToLong(java.util.function.ToLongFunction<? super T>);
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method getEventStream:()Ljava/util/stream/Stream;
       4: aload_1
       5: invokeinterface #62,  2           // InterfaceMethod java/util/stream/Stream.mapToLong:(Ljava/util/function/ToLongFunction;)Ljava/util/stream/LongStream;
      10: areturn

  public java.util.stream.DoubleStream mapToDouble(java.util.function.ToDoubleFunction<? super T>);
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method getEventStream:()Ljava/util/stream/Stream;
       4: aload_1
       5: invokeinterface #66,  2           // InterfaceMethod java/util/stream/Stream.mapToDouble:(Ljava/util/function/ToDoubleFunction;)Ljava/util/stream/DoubleStream;
      10: areturn

  public <R> java.util.stream.Stream<R> flatMap(java.util.function.Function<? super T, ? extends java.util.stream.Stream<? extends R>>);
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method getEventStream:()Ljava/util/stream/Stream;
       4: aload_1
       5: invokeinterface #70,  2           // InterfaceMethod java/util/stream/Stream.flatMap:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      10: areturn

  public java.util.stream.IntStream flatMapToInt(java.util.function.Function<? super T, ? extends java.util.stream.IntStream>);
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method getEventStream:()Ljava/util/stream/Stream;
       4: aload_1
       5: invokeinterface #73,  2           // InterfaceMethod java/util/stream/Stream.flatMapToInt:(Ljava/util/function/Function;)Ljava/util/stream/IntStream;
      10: areturn

  public java.util.stream.LongStream flatMapToLong(java.util.function.Function<? super T, ? extends java.util.stream.LongStream>);
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method getEventStream:()Ljava/util/stream/Stream;
       4: aload_1
       5: invokeinterface #77,  2           // InterfaceMethod java/util/stream/Stream.flatMapToLong:(Ljava/util/function/Function;)Ljava/util/stream/LongStream;
      10: areturn

  public java.util.stream.DoubleStream flatMapToDouble(java.util.function.Function<? super T, ? extends java.util.stream.DoubleStream>);
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method getEventStream:()Ljava/util/stream/Stream;
       4: aload_1
       5: invokeinterface #81,  2           // InterfaceMethod java/util/stream/Stream.flatMapToDouble:(Ljava/util/function/Function;)Ljava/util/stream/DoubleStream;
      10: areturn

  public <R> java.util.stream.Stream<R> mapMulti(java.util.function.BiConsumer<? super T, ? super java.util.function.Consumer<R>>);
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method getEventStream:()Ljava/util/stream/Stream;
       4: aload_1
       5: invokeinterface #85,  2           // InterfaceMethod java/util/stream/Stream.mapMulti:(Ljava/util/function/BiConsumer;)Ljava/util/stream/Stream;
      10: areturn

  public java.util.stream.IntStream mapMultiToInt(java.util.function.BiConsumer<? super T, ? super java.util.function.IntConsumer>);
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method getEventStream:()Ljava/util/stream/Stream;
       4: aload_1
       5: invokeinterface #89,  2           // InterfaceMethod java/util/stream/Stream.mapMultiToInt:(Ljava/util/function/BiConsumer;)Ljava/util/stream/IntStream;
      10: areturn

  public java.util.stream.LongStream mapMultiToLong(java.util.function.BiConsumer<? super T, ? super java.util.function.LongConsumer>);
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method getEventStream:()Ljava/util/stream/Stream;
       4: aload_1
       5: invokeinterface #93,  2           // InterfaceMethod java/util/stream/Stream.mapMultiToLong:(Ljava/util/function/BiConsumer;)Ljava/util/stream/LongStream;
      10: areturn

  public java.util.stream.DoubleStream mapMultiToDouble(java.util.function.BiConsumer<? super T, ? super java.util.function.DoubleConsumer>);
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method getEventStream:()Ljava/util/stream/Stream;
       4: aload_1
       5: invokeinterface #97,  2           // InterfaceMethod java/util/stream/Stream.mapMultiToDouble:(Ljava/util/function/BiConsumer;)Ljava/util/stream/DoubleStream;
      10: areturn

  public java.util.stream.Stream<T> distinct();
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method getEventStream:()Ljava/util/stream/Stream;
       4: invokeinterface #101,  1          // InterfaceMethod java/util/stream/Stream.distinct:()Ljava/util/stream/Stream;
       9: areturn

  public java.util.stream.Stream<T> sorted();
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method getEventStream:()Ljava/util/stream/Stream;
       4: invokeinterface #104,  1          // InterfaceMethod java/util/stream/Stream.sorted:()Ljava/util/stream/Stream;
       9: areturn

  public java.util.stream.Stream<T> sorted(java.util.Comparator<? super T>);
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method getEventStream:()Ljava/util/stream/Stream;
       4: aload_1
       5: invokeinterface #107,  2          // InterfaceMethod java/util/stream/Stream.sorted:(Ljava/util/Comparator;)Ljava/util/stream/Stream;
      10: areturn

  public java.util.stream.Stream<T> peek(java.util.function.Consumer<? super T>);
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method getEventStream:()Ljava/util/stream/Stream;
       4: aload_1
       5: invokeinterface #110,  2          // InterfaceMethod java/util/stream/Stream.peek:(Ljava/util/function/Consumer;)Ljava/util/stream/Stream;
      10: areturn

  public java.util.stream.Stream<T> limit(long);
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method getEventStream:()Ljava/util/stream/Stream;
       4: lload_1
       5: invokeinterface #114,  3          // InterfaceMethod java/util/stream/Stream.limit:(J)Ljava/util/stream/Stream;
      10: areturn

  public java.util.stream.Stream<T> skip(long);
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method getEventStream:()Ljava/util/stream/Stream;
       4: lload_1
       5: invokeinterface #118,  3          // InterfaceMethod java/util/stream/Stream.skip:(J)Ljava/util/stream/Stream;
      10: areturn

  public java.util.stream.Stream<T> takeWhile(java.util.function.Predicate<? super T>);
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method getEventStream:()Ljava/util/stream/Stream;
       4: aload_1
       5: invokeinterface #121,  2          // InterfaceMethod java/util/stream/Stream.takeWhile:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      10: areturn

  public java.util.stream.Stream<T> dropWhile(java.util.function.Predicate<? super T>);
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method getEventStream:()Ljava/util/stream/Stream;
       4: aload_1
       5: invokeinterface #124,  2          // InterfaceMethod java/util/stream/Stream.dropWhile:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      10: areturn

  public void forEach(java.util.function.Consumer<? super T>);
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method getEventStream:()Ljava/util/stream/Stream;
       4: aload_1
       5: invokeinterface #127,  2          // InterfaceMethod java/util/stream/Stream.forEach:(Ljava/util/function/Consumer;)V
      10: return

  public void forEachOrdered(java.util.function.Consumer<? super T>);
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method getEventStream:()Ljava/util/stream/Stream;
       4: aload_1
       5: invokeinterface #131,  2          // InterfaceMethod java/util/stream/Stream.forEachOrdered:(Ljava/util/function/Consumer;)V
      10: return

  public java.lang.Object[] toArray();
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method getEventStream:()Ljava/util/stream/Stream;
       4: invokeinterface #134,  1          // InterfaceMethod java/util/stream/Stream.toArray:()[Ljava/lang/Object;
       9: areturn

  public <A> A[] toArray(java.util.function.IntFunction<A[]>);
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method getEventStream:()Ljava/util/stream/Stream;
       4: aload_1
       5: invokeinterface #138,  2          // InterfaceMethod java/util/stream/Stream.toArray:(Ljava/util/function/IntFunction;)[Ljava/lang/Object;
      10: areturn

  public T reduce(T, java.util.function.BinaryOperator<T>);
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method getEventStream:()Ljava/util/stream/Stream;
       4: aload_1
       5: aload_2
       6: invokeinterface #141,  3          // InterfaceMethod java/util/stream/Stream.reduce:(Ljava/lang/Object;Ljava/util/function/BinaryOperator;)Ljava/lang/Object;
      11: areturn

  public java.util.Optional<T> reduce(java.util.function.BinaryOperator<T>);
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method getEventStream:()Ljava/util/stream/Stream;
       4: aload_1
       5: invokeinterface #145,  2          // InterfaceMethod java/util/stream/Stream.reduce:(Ljava/util/function/BinaryOperator;)Ljava/util/Optional;
      10: areturn

  public <U> U reduce(U, java.util.function.BiFunction<U, ? super T, U>, java.util.function.BinaryOperator<U>);
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method getEventStream:()Ljava/util/stream/Stream;
       4: aload_1
       5: aload_2
       6: aload_3
       7: invokeinterface #148,  4          // InterfaceMethod java/util/stream/Stream.reduce:(Ljava/lang/Object;Ljava/util/function/BiFunction;Ljava/util/function/BinaryOperator;)Ljava/lang/Object;
      12: areturn

  public <R> R collect(java.util.function.Supplier<R>, java.util.function.BiConsumer<R, ? super T>, java.util.function.BiConsumer<R, R>);
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method getEventStream:()Ljava/util/stream/Stream;
       4: aload_1
       5: aload_2
       6: aload_3
       7: invokeinterface #151,  4          // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/function/Supplier;Ljava/util/function/BiConsumer;Ljava/util/function/BiConsumer;)Ljava/lang/Object;
      12: areturn

  public <R, A> R collect(java.util.stream.Collector<? super T, A, R>);
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method getEventStream:()Ljava/util/stream/Stream;
       4: aload_1
       5: invokeinterface #155,  2          // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
      10: areturn

  public java.util.List<T> toList();
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method getEventStream:()Ljava/util/stream/Stream;
       4: invokeinterface #158,  1          // InterfaceMethod java/util/stream/Stream.toList:()Ljava/util/List;
       9: areturn

  public java.util.Optional<T> min(java.util.Comparator<? super T>);
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method getEventStream:()Ljava/util/stream/Stream;
       4: aload_1
       5: invokeinterface #162,  2          // InterfaceMethod java/util/stream/Stream.min:(Ljava/util/Comparator;)Ljava/util/Optional;
      10: areturn

  public java.util.Optional<T> max(java.util.Comparator<? super T>);
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method getEventStream:()Ljava/util/stream/Stream;
       4: aload_1
       5: invokeinterface #166,  2          // InterfaceMethod java/util/stream/Stream.max:(Ljava/util/Comparator;)Ljava/util/Optional;
      10: areturn

  public long count();
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method getEventStream:()Ljava/util/stream/Stream;
       4: invokeinterface #169,  1          // InterfaceMethod java/util/stream/Stream.count:()J
       9: lreturn

  public boolean anyMatch(java.util.function.Predicate<? super T>);
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method getEventStream:()Ljava/util/stream/Stream;
       4: aload_1
       5: invokeinterface #173,  2          // InterfaceMethod java/util/stream/Stream.anyMatch:(Ljava/util/function/Predicate;)Z
      10: ireturn

  public boolean allMatch(java.util.function.Predicate<? super T>);
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method getEventStream:()Ljava/util/stream/Stream;
       4: aload_1
       5: invokeinterface #177,  2          // InterfaceMethod java/util/stream/Stream.allMatch:(Ljava/util/function/Predicate;)Z
      10: ireturn

  public boolean noneMatch(java.util.function.Predicate<? super T>);
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method getEventStream:()Ljava/util/stream/Stream;
       4: aload_1
       5: invokeinterface #180,  2          // InterfaceMethod java/util/stream/Stream.noneMatch:(Ljava/util/function/Predicate;)Z
      10: ireturn

  public java.util.Optional<T> findFirst();
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method getEventStream:()Ljava/util/stream/Stream;
       4: invokeinterface #183,  1          // InterfaceMethod java/util/stream/Stream.findFirst:()Ljava/util/Optional;
       9: areturn

  public java.util.Optional<T> findAny();
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method getEventStream:()Ljava/util/stream/Stream;
       4: invokeinterface #187,  1          // InterfaceMethod java/util/stream/Stream.findAny:()Ljava/util/Optional;
       9: areturn

  public java.util.Iterator<T> iterator();
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method getEventStream:()Ljava/util/stream/Stream;
       4: invokeinterface #190,  1          // InterfaceMethod java/util/stream/Stream.iterator:()Ljava/util/Iterator;
       9: areturn

  public java.util.Spliterator<T> spliterator();
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method getEventStream:()Ljava/util/stream/Stream;
       4: invokeinterface #194,  1          // InterfaceMethod java/util/stream/Stream.spliterator:()Ljava/util/Spliterator;
       9: areturn

  public boolean isParallel();
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method getEventStream:()Ljava/util/stream/Stream;
       4: invokeinterface #198,  1          // InterfaceMethod java/util/stream/Stream.isParallel:()Z
       9: ireturn

  public java.util.stream.Stream<T> sequential();
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method getEventStream:()Ljava/util/stream/Stream;
       4: invokeinterface #202,  1          // InterfaceMethod java/util/stream/Stream.sequential:()Ljava/util/stream/BaseStream;
       9: checkcast     #13                 // class java/util/stream/Stream
      12: areturn

  public java.util.stream.Stream<T> parallel();
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method getEventStream:()Ljava/util/stream/Stream;
       4: invokeinterface #206,  1          // InterfaceMethod java/util/stream/Stream.parallel:()Ljava/util/stream/BaseStream;
       9: checkcast     #13                 // class java/util/stream/Stream
      12: areturn

  public java.util.stream.Stream<T> unordered();
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method getEventStream:()Ljava/util/stream/Stream;
       4: invokeinterface #209,  1          // InterfaceMethod java/util/stream/Stream.unordered:()Ljava/util/stream/BaseStream;
       9: checkcast     #13                 // class java/util/stream/Stream
      12: areturn

  public java.util.stream.Stream<T> onClose(java.lang.Runnable);
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method getEventStream:()Ljava/util/stream/Stream;
       4: aload_1
       5: invokeinterface #212,  2          // InterfaceMethod java/util/stream/Stream.onClose:(Ljava/lang/Runnable;)Ljava/util/stream/BaseStream;
      10: checkcast     #13                 // class java/util/stream/Stream
      13: areturn

  public void close();
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method getEventStream:()Ljava/util/stream/Stream;
       4: invokeinterface #216,  1          // InterfaceMethod java/util/stream/Stream.close:()V
       9: return

  public java.util.stream.BaseStream onClose(java.lang.Runnable);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #219                // Method onClose:(Ljava/lang/Runnable;)Ljava/util/stream/Stream;
       5: areturn

  public java.util.stream.BaseStream unordered();
    Code:
       0: aload_0
       1: invokevirtual #222                // Method unordered:()Ljava/util/stream/Stream;
       4: areturn

  public java.util.stream.BaseStream parallel();
    Code:
       0: aload_0
       1: invokevirtual #224                // Method parallel:()Ljava/util/stream/Stream;
       4: areturn

  public java.util.stream.BaseStream sequential();
    Code:
       0: aload_0
       1: invokevirtual #226                // Method sequential:()Ljava/util/stream/Stream;
       4: areturn
}
