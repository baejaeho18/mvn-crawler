Compiled from "WebSocketEventStoreClient.java"
public class io.fluxcapacitor.javaclient.persisting.eventsourcing.client.WebSocketEventStoreClient extends io.fluxcapacitor.javaclient.common.websocket.AbstractWebsocketClient implements io.fluxcapacitor.javaclient.persisting.eventsourcing.client.EventStoreClient {
  private final int fetchBatchSize;

  public io.fluxcapacitor.javaclient.persisting.eventsourcing.client.WebSocketEventStoreClient(java.lang.String, io.fluxcapacitor.javaclient.configuration.client.WebSocketClient$ClientConfig);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1                  // Method java/net/URI.create:(Ljava/lang/String;)Ljava/net/URI;
       5: sipush        8192
       8: aload_2
       9: invokespecial #7                  // Method "<init>":(Ljava/net/URI;ILio/fluxcapacitor/javaclient/configuration/client/WebSocketClient$ClientConfig;)V
      12: return

  public io.fluxcapacitor.javaclient.persisting.eventsourcing.client.WebSocketEventStoreClient(java.net.URI, int, io.fluxcapacitor.javaclient.configuration.client.WebSocketClient$ClientConfig);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: aload_3
       4: iconst_1
       5: invokespecial #13                 // Method "<init>":(Ljava/net/URI;ILio/fluxcapacitor/javaclient/configuration/client/WebSocketClient$ClientConfig;Z)V
       8: return

  public io.fluxcapacitor.javaclient.persisting.eventsourcing.client.WebSocketEventStoreClient(java.net.URI, int, io.fluxcapacitor.javaclient.configuration.client.WebSocketClient$ClientConfig, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: aload_3
       3: iload         4
       5: aload_3
       6: invokevirtual #16                 // Method io/fluxcapacitor/javaclient/configuration/client/WebSocketClient$ClientConfig.getEventSourcingSessions:()I
       9: invokespecial #22                 // Method io/fluxcapacitor/javaclient/common/websocket/AbstractWebsocketClient."<init>":(Ljava/net/URI;Lio/fluxcapacitor/javaclient/configuration/client/WebSocketClient$ClientConfig;ZI)V
      12: aload_0
      13: iload_2
      14: putfield      #27                 // Field fetchBatchSize:I
      17: return

  public java.util.concurrent.CompletableFuture<java.lang.Void> storeEvents(java.lang.String, java.util.List<io.fluxcapacitor.common.api.SerializedMessage>, boolean, io.fluxcapacitor.common.Guarantee);
    Code:
       0: aload_0
       1: new           #31                 // class io/fluxcapacitor/common/api/eventsourcing/AppendEvents
       4: dup
       5: new           #33                 // class io/fluxcapacitor/common/api/eventsourcing/EventBatch
       8: dup
       9: aload_1
      10: aload_2
      11: iload_3
      12: invokespecial #35                 // Method io/fluxcapacitor/common/api/eventsourcing/EventBatch."<init>":(Ljava/lang/String;Ljava/util/List;Z)V
      15: invokestatic  #38                 // InterfaceMethod java/util/List.of:(Ljava/lang/Object;)Ljava/util/List;
      18: aload         4
      20: invokespecial #44                 // Method io/fluxcapacitor/common/api/eventsourcing/AppendEvents."<init>":(Ljava/util/List;Lio/fluxcapacitor/common/Guarantee;)V
      23: invokevirtual #47                 // Method sendCommand:(Lio/fluxcapacitor/common/api/Command;)Ljava/util/concurrent/CompletableFuture;
      26: areturn

  public io.fluxcapacitor.javaclient.persisting.eventsourcing.AggregateEventStream<io.fluxcapacitor.common.api.SerializedMessage> getEvents(java.lang.String, long);
    Code:
       0: new           #51                 // class java/util/concurrent/atomic/AtomicReference
       3: dup
       4: invokespecial #53                 // Method java/util/concurrent/atomic/AtomicReference."<init>":()V
       7: astore        4
       9: aload_0
      10: new           #56                 // class io/fluxcapacitor/common/api/eventsourcing/GetEvents
      13: dup
      14: aload_1
      15: lload_2
      16: invokestatic  #58                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      19: aload_0
      20: getfield      #27                 // Field fetchBatchSize:I
      23: invokespecial #64                 // Method io/fluxcapacitor/common/api/eventsourcing/GetEvents."<init>":(Ljava/lang/String;Ljava/lang/Long;I)V
      26: invokevirtual #67                 // Method sendAndWait:(Lio/fluxcapacitor/common/api/Request;)Lio/fluxcapacitor/common/api/QueryResult;
      29: checkcast     #71                 // class io/fluxcapacitor/common/api/eventsourcing/GetEventsResult
      32: astore        5
      34: aload         5
      36: aload_0
      37: aload_1
      38: invokedynamic #73,  0             // InvokeDynamic #0:apply:(Lio/fluxcapacitor/javaclient/persisting/eventsourcing/client/WebSocketEventStoreClient;Ljava/lang/String;)Ljava/util/function/UnaryOperator;
      43: aload_0
      44: invokedynamic #77,  0             // InvokeDynamic #1:test:(Lio/fluxcapacitor/javaclient/persisting/eventsourcing/client/WebSocketEventStoreClient;)Ljava/util/function/Predicate;
      49: invokestatic  #81                 // Method io/fluxcapacitor/common/ObjectUtils.iterate:(Ljava/lang/Object;Ljava/util/function/UnaryOperator;Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      52: aload         4
      54: invokedynamic #87,  0             // InvokeDynamic #2:apply:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/util/function/Function;
      59: invokeinterface #90,  2           // InterfaceMethod java/util/stream/Stream.flatMap:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      64: astore        6
      66: new           #96                 // class io/fluxcapacitor/javaclient/persisting/eventsourcing/AggregateEventStream
      69: dup
      70: aload         6
      72: aload_1
      73: aload         4
      75: dup
      76: invokestatic  #98                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
      79: pop
      80: invokedynamic #104,  0            // InvokeDynamic #3:get:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/util/function/Supplier;
      85: invokespecial #108                // Method io/fluxcapacitor/javaclient/persisting/eventsourcing/AggregateEventStream."<init>":(Ljava/util/stream/Stream;Ljava/lang/String;Ljava/util/function/Supplier;)V
      88: areturn

  public java.util.concurrent.CompletableFuture<java.lang.Void> updateRelationships(io.fluxcapacitor.common.api.modeling.UpdateRelationships);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #47                 // Method sendCommand:(Lio/fluxcapacitor/common/api/Command;)Ljava/util/concurrent/CompletableFuture;
       5: areturn

  public java.util.concurrent.CompletableFuture<java.lang.Void> repairRelationships(io.fluxcapacitor.common.api.modeling.RepairRelationships);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #47                 // Method sendCommand:(Lio/fluxcapacitor/common/api/Command;)Ljava/util/concurrent/CompletableFuture;
       5: areturn

  public java.util.Map<java.lang.String, java.lang.String> getAggregateIds(io.fluxcapacitor.common.api.modeling.GetAggregateIds);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #67                 // Method sendAndWait:(Lio/fluxcapacitor/common/api/Request;)Lio/fluxcapacitor/common/api/QueryResult;
       5: checkcast     #111                // class io/fluxcapacitor/common/api/modeling/GetAggregateIdsResult
       8: invokevirtual #113                // Method io/fluxcapacitor/common/api/modeling/GetAggregateIdsResult.getAggregateIds:()Ljava/util/Map;
      11: areturn

  public java.util.List<io.fluxcapacitor.common.api.modeling.Relationship> getRelationships(io.fluxcapacitor.common.api.modeling.GetRelationships);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #67                 // Method sendAndWait:(Lio/fluxcapacitor/common/api/Request;)Lio/fluxcapacitor/common/api/QueryResult;
       5: checkcast     #117                // class io/fluxcapacitor/common/api/modeling/GetRelationshipsResult
       8: invokevirtual #119                // Method io/fluxcapacitor/common/api/modeling/GetRelationshipsResult.getRelationships:()Ljava/util/List;
      11: areturn

  public java.util.concurrent.CompletableFuture<java.lang.Void> deleteEvents(java.lang.String, io.fluxcapacitor.common.Guarantee);
    Code:
       0: aload_0
       1: new           #123                // class io/fluxcapacitor/common/api/eventsourcing/DeleteEvents
       4: dup
       5: aload_1
       6: aload_2
       7: invokespecial #125                // Method io/fluxcapacitor/common/api/eventsourcing/DeleteEvents."<init>":(Ljava/lang/String;Lio/fluxcapacitor/common/Guarantee;)V
      10: invokevirtual #47                 // Method sendCommand:(Lio/fluxcapacitor/common/api/Command;)Ljava/util/concurrent/CompletableFuture;
      13: areturn

  private static java.util.stream.Stream lambda$getEvents$2(java.util.concurrent.atomic.AtomicReference, io.fluxcapacitor.common.api.eventsourcing.GetEventsResult);
    Code:
       0: aload_1
       1: invokevirtual #128                // Method io/fluxcapacitor/common/api/eventsourcing/GetEventsResult.getEventBatch:()Lio/fluxcapacitor/common/api/eventsourcing/EventBatch;
       4: invokevirtual #132                // Method io/fluxcapacitor/common/api/eventsourcing/EventBatch.isEmpty:()Z
       7: ifne          21
      10: aload_0
      11: aload_1
      12: invokevirtual #136                // Method io/fluxcapacitor/common/api/eventsourcing/GetEventsResult.getLastSequenceNumber:()J
      15: invokestatic  #58                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      18: invokevirtual #140                // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
      21: aload_1
      22: invokevirtual #128                // Method io/fluxcapacitor/common/api/eventsourcing/GetEventsResult.getEventBatch:()Lio/fluxcapacitor/common/api/eventsourcing/EventBatch;
      25: invokevirtual #144                // Method io/fluxcapacitor/common/api/eventsourcing/EventBatch.getEvents:()Ljava/util/List;
      28: invokeinterface #147,  1          // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
      33: areturn

  private boolean lambda$getEvents$1(io.fluxcapacitor.common.api.eventsourcing.GetEventsResult);
    Code:
       0: aload_1
       1: invokevirtual #128                // Method io/fluxcapacitor/common/api/eventsourcing/GetEventsResult.getEventBatch:()Lio/fluxcapacitor/common/api/eventsourcing/EventBatch;
       4: invokevirtual #144                // Method io/fluxcapacitor/common/api/eventsourcing/EventBatch.getEvents:()Ljava/util/List;
       7: invokeinterface #151,  1          // InterfaceMethod java/util/List.size:()I
      12: aload_0
      13: getfield      #27                 // Field fetchBatchSize:I
      16: if_icmpge     23
      19: iconst_1
      20: goto          24
      23: iconst_0
      24: ireturn

  private io.fluxcapacitor.common.api.eventsourcing.GetEventsResult lambda$getEvents$0(java.lang.String, io.fluxcapacitor.common.api.eventsourcing.GetEventsResult);
    Code:
       0: aload_0
       1: new           #56                 // class io/fluxcapacitor/common/api/eventsourcing/GetEvents
       4: dup
       5: aload_1
       6: aload_2
       7: invokevirtual #136                // Method io/fluxcapacitor/common/api/eventsourcing/GetEventsResult.getLastSequenceNumber:()J
      10: invokestatic  #58                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      13: aload_0
      14: getfield      #27                 // Field fetchBatchSize:I
      17: invokespecial #64                 // Method io/fluxcapacitor/common/api/eventsourcing/GetEvents."<init>":(Ljava/lang/String;Ljava/lang/Long;I)V
      20: invokevirtual #67                 // Method sendAndWait:(Lio/fluxcapacitor/common/api/Request;)Lio/fluxcapacitor/common/api/QueryResult;
      23: checkcast     #71                 // class io/fluxcapacitor/common/api/eventsourcing/GetEventsResult
      26: areturn
}
