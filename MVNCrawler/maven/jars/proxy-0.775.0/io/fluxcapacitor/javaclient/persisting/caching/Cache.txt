Compiled from "Cache.java"
public interface io.fluxcapacitor.javaclient.persisting.caching.Cache extends java.lang.AutoCloseable {
  public abstract java.lang.Object put(java.lang.Object, java.lang.Object);

  public abstract java.lang.Object putIfAbsent(java.lang.Object, java.lang.Object);

  public abstract <T> T computeIfAbsent(java.lang.Object, java.util.function.Function<? super java.lang.Object, T>);

  public abstract <T> T computeIfPresent(java.lang.Object, java.util.function.BiFunction<? super java.lang.Object, ? super T, ? extends T>);

  public abstract <T> T compute(java.lang.Object, java.util.function.BiFunction<? super java.lang.Object, ? super T, ? extends T>);

  public abstract <T> T get(java.lang.Object);

  public default <T> T getOrDefault(java.lang.Object, T);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #1,  2            // InterfaceMethod get:(Ljava/lang/Object;)Ljava/lang/Object;
       7: invokestatic  #7                  // Method java/util/Optional.ofNullable:(Ljava/lang/Object;)Ljava/util/Optional;
      10: aload_2
      11: invokevirtual #13                 // Method java/util/Optional.orElse:(Ljava/lang/Object;)Ljava/lang/Object;
      14: areturn

  public abstract boolean containsKey(java.lang.Object);

  public abstract <T> T remove(java.lang.Object);

  public abstract void clear();

  public abstract int size();

  public default boolean isEmpty();
    Code:
       0: aload_0
       1: invokeinterface #16,  1           // InterfaceMethod size:()I
       6: iconst_1
       7: if_icmpge     14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  public abstract io.fluxcapacitor.common.Registration registerEvictionListener(java.util.function.Consumer<io.fluxcapacitor.javaclient.persisting.caching.CacheEvictionEvent>);

  public abstract void close();
}
