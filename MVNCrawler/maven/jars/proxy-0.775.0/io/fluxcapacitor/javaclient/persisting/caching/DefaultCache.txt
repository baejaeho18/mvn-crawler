Compiled from "DefaultCache.java"
public class io.fluxcapacitor.javaclient.persisting.caching.DefaultCache implements io.fluxcapacitor.javaclient.persisting.caching.Cache {
  private static final org.slf4j.Logger log;

  protected static final java.lang.String mutexPrecursor;

  final java.util.Map<java.lang.Object, io.fluxcapacitor.javaclient.persisting.caching.DefaultCache$CacheReference> valueMap;

  private final java.util.concurrent.Executor evictionNotifier;

  private final java.util.Collection<java.util.function.Consumer<io.fluxcapacitor.javaclient.persisting.caching.CacheEvictionEvent>> evictionListeners;

  private final java.util.concurrent.ExecutorService referencePurger;

  private final java.lang.ref.ReferenceQueue<java.lang.Object> referenceQueue;

  public io.fluxcapacitor.javaclient.persisting.caching.DefaultCache();
    Code:
       0: aload_0
       1: ldc           #1                  // int 1000000
       3: invokespecial #2                  // Method "<init>":(I)V
       6: return

  public io.fluxcapacitor.javaclient.persisting.caching.DefaultCache(int);
    Code:
       0: aload_0
       1: iload_1
       2: ldc           #8                  // String DefaultCache-evictionNotifier
       4: invokestatic  #10                 // Method io/fluxcapacitor/common/ObjectUtils.newThreadFactory:(Ljava/lang/String;)Ljava/util/concurrent/ThreadFactory;
       7: invokestatic  #16                 // Method java/util/concurrent/Executors.newSingleThreadExecutor:(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;
      10: invokespecial #22                 // Method "<init>":(ILjava/util/concurrent/Executor;)V
      13: return

  public io.fluxcapacitor.javaclient.persisting.caching.DefaultCache(int, java.util.concurrent.Executor);
    Code:
       0: aload_0
       1: invokespecial #25                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #30                 // class java/util/concurrent/CopyOnWriteArrayList
       8: dup
       9: invokespecial #32                 // Method java/util/concurrent/CopyOnWriteArrayList."<init>":()V
      12: putfield      #33                 // Field evictionListeners:Ljava/util/Collection;
      15: aload_0
      16: ldc           #37                 // String DefaultCache-referencePurger
      18: invokestatic  #10                 // Method io/fluxcapacitor/common/ObjectUtils.newThreadFactory:(Ljava/lang/String;)Ljava/util/concurrent/ThreadFactory;
      21: invokestatic  #16                 // Method java/util/concurrent/Executors.newSingleThreadExecutor:(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;
      24: putfield      #39                 // Field referencePurger:Ljava/util/concurrent/ExecutorService;
      27: aload_0
      28: new           #43                 // class java/lang/ref/ReferenceQueue
      31: dup
      32: invokespecial #45                 // Method java/lang/ref/ReferenceQueue."<init>":()V
      35: putfield      #46                 // Field referenceQueue:Ljava/lang/ref/ReferenceQueue;
      38: aload_0
      39: new           #50                 // class io/fluxcapacitor/javaclient/persisting/caching/DefaultCache$1
      42: dup
      43: aload_0
      44: sipush        128
      47: iload_1
      48: invokestatic  #52                 // Method java/lang/Math.min:(II)I
      51: ldc           #58                 // float 0.75f
      53: iconst_1
      54: iload_1
      55: invokespecial #59                 // Method io/fluxcapacitor/javaclient/persisting/caching/DefaultCache$1."<init>":(Lio/fluxcapacitor/javaclient/persisting/caching/DefaultCache;IFZI)V
      58: invokestatic  #62                 // Method java/util/Collections.synchronizedMap:(Ljava/util/Map;)Ljava/util/Map;
      61: putfield      #68                 // Field valueMap:Ljava/util/Map;
      64: aload_0
      65: aload_2
      66: putfield      #72                 // Field evictionNotifier:Ljava/util/concurrent/Executor;
      69: aload_0
      70: getfield      #39                 // Field referencePurger:Ljava/util/concurrent/ExecutorService;
      73: aload_0
      74: invokedynamic #76,  0             // InvokeDynamic #0:run:(Lio/fluxcapacitor/javaclient/persisting/caching/DefaultCache;)Ljava/lang/Runnable;
      79: invokeinterface #80,  2           // InterfaceMethod java/util/concurrent/ExecutorService.execute:(Ljava/lang/Runnable;)V
      84: return

  public <T> T compute(java.lang.Object, java.util.function.BiFunction<? super java.lang.Object, ? super T, ? extends T>);
    Code:
       0: aload_1
       1: invokedynamic #86,  0             // InvokeDynamic #1:makeConcatWithConstants:(Ljava/lang/Object;)Ljava/lang/String;
       6: invokevirtual #90                 // Method java/lang/String.intern:()Ljava/lang/String;
       9: dup
      10: astore_3
      11: monitorenter
      12: aload_0
      13: getfield      #68                 // Field valueMap:Ljava/util/Map;
      16: aload_1
      17: invokeinterface #96,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      22: checkcast     #102                // class io/fluxcapacitor/javaclient/persisting/caching/DefaultCache$CacheReference
      25: astore        4
      27: aload_0
      28: aload_1
      29: aload_2
      30: aload_1
      31: aload_0
      32: aload         4
      34: invokevirtual #104                // Method unwrap:(Lio/fluxcapacitor/javaclient/persisting/caching/DefaultCache$CacheReference;)Ljava/lang/Object;
      37: invokeinterface #108,  3          // InterfaceMethod java/util/function/BiFunction.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      42: invokevirtual #114                // Method wrap:(Ljava/lang/Object;Ljava/lang/Object;)Lio/fluxcapacitor/javaclient/persisting/caching/DefaultCache$CacheReference;
      45: astore        5
      47: aload         5
      49: ifnonnull     87
      52: aload_0
      53: getfield      #68                 // Field valueMap:Ljava/util/Map;
      56: aload_1
      57: invokeinterface #118,  2          // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      62: pop
      63: aload         4
      65: ifnull        100
      68: aload         4
      70: invokevirtual #121                // Method io/fluxcapacitor/javaclient/persisting/caching/DefaultCache$CacheReference.get:()Ljava/lang/Object;
      73: ifnull        100
      76: aload_0
      77: aload_1
      78: getstatic     #124                // Field io/fluxcapacitor/javaclient/persisting/caching/CacheEvictionEvent$Reason.manual:Lio/fluxcapacitor/javaclient/persisting/caching/CacheEvictionEvent$Reason;
      81: invokevirtual #130                // Method notifyEvictionListeners:(Ljava/lang/Object;Lio/fluxcapacitor/javaclient/persisting/caching/CacheEvictionEvent$Reason;)V
      84: goto          100
      87: aload_0
      88: getfield      #68                 // Field valueMap:Ljava/util/Map;
      91: aload_1
      92: aload         5
      94: invokeinterface #134,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      99: pop
     100: aload_0
     101: aload         5
     103: invokevirtual #104                // Method unwrap:(Lio/fluxcapacitor/javaclient/persisting/caching/DefaultCache$CacheReference;)Ljava/lang/Object;
     106: aload_3
     107: monitorexit
     108: areturn
     109: astore        6
     111: aload_3
     112: monitorexit
     113: aload         6
     115: athrow
    Exception table:
       from    to  target type
          12   108   109   any
         109   113   109   any

  public java.lang.Object put(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokedynamic #137,  0            // InvokeDynamic #2:apply:(Ljava/lang/Object;)Ljava/util/function/BiFunction;
       8: invokevirtual #140                // Method compute:(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;
      11: areturn

  public java.lang.Object putIfAbsent(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokedynamic #144,  0            // InvokeDynamic #3:apply:(Ljava/lang/Object;)Ljava/util/function/Function;
       8: invokevirtual #147                // Method computeIfAbsent:(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;
      11: areturn

  public <T> T computeIfAbsent(java.lang.Object, java.util.function.Function<? super java.lang.Object, T>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokedynamic #151,  0            // InvokeDynamic #4:apply:(Ljava/util/function/Function;)Ljava/util/function/BiFunction;
       8: invokevirtual #140                // Method compute:(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;
      11: areturn

  public <T> T computeIfPresent(java.lang.Object, java.util.function.BiFunction<? super java.lang.Object, ? super T, ? extends T>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokedynamic #154,  0            // InvokeDynamic #5:apply:(Ljava/util/function/BiFunction;)Ljava/util/function/BiFunction;
       8: invokevirtual #140                // Method compute:(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;
      11: areturn

  public <T> T remove(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokedynamic #157,  0            // InvokeDynamic #6:apply:()Ljava/util/function/BiFunction;
       7: invokevirtual #140                // Method compute:(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;
      10: areturn

  public <T> T get(java.lang.Object);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #68                 // Field valueMap:Ljava/util/Map;
       5: aload_1
       6: invokeinterface #96,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      11: checkcast     #102                // class io/fluxcapacitor/javaclient/persisting/caching/DefaultCache$CacheReference
      14: invokevirtual #104                // Method unwrap:(Lio/fluxcapacitor/javaclient/persisting/caching/DefaultCache$CacheReference;)Ljava/lang/Object;
      17: areturn

  public boolean containsKey(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #68                 // Field valueMap:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #160,  2          // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
      10: ireturn

  public void clear();
    Code:
       0: aload_0
       1: getfield      #68                 // Field valueMap:Ljava/util/Map;
       4: invokeinterface #164,  1          // InterfaceMethod java/util/Map.clear:()V
       9: aload_0
      10: aconst_null
      11: getstatic     #124                // Field io/fluxcapacitor/javaclient/persisting/caching/CacheEvictionEvent$Reason.manual:Lio/fluxcapacitor/javaclient/persisting/caching/CacheEvictionEvent$Reason;
      14: invokevirtual #130                // Method notifyEvictionListeners:(Ljava/lang/Object;Lio/fluxcapacitor/javaclient/persisting/caching/CacheEvictionEvent$Reason;)V
      17: return

  public int size();
    Code:
       0: aload_0
       1: getfield      #68                 // Field valueMap:Ljava/util/Map;
       4: invokeinterface #167,  1          // InterfaceMethod java/util/Map.size:()I
       9: ireturn

  public io.fluxcapacitor.common.Registration registerEvictionListener(java.util.function.Consumer<io.fluxcapacitor.javaclient.persisting.caching.CacheEvictionEvent>);
    Code:
       0: aload_0
       1: getfield      #33                 // Field evictionListeners:Ljava/util/Collection;
       4: aload_1
       5: invokeinterface #171,  2          // InterfaceMethod java/util/Collection.add:(Ljava/lang/Object;)Z
      10: pop
      11: aload_0
      12: aload_1
      13: invokedynamic #176,  0            // InvokeDynamic #7:cancel:(Lio/fluxcapacitor/javaclient/persisting/caching/DefaultCache;Ljava/util/function/Consumer;)Lio/fluxcapacitor/common/Registration;
      18: areturn

  public void close();
    Code:
       0: aload_0
       1: getfield      #72                 // Field evictionNotifier:Ljava/util/concurrent/Executor;
       4: astore_2
       5: aload_2
       6: instanceof    #81                 // class java/util/concurrent/ExecutorService
       9: ifeq          24
      12: aload_2
      13: checkcast     #81                 // class java/util/concurrent/ExecutorService
      16: astore_1
      17: aload_1
      18: invokeinterface #180,  1          // InterfaceMethod java/util/concurrent/ExecutorService.shutdownNow:()Ljava/util/List;
      23: pop
      24: aload_0
      25: getfield      #39                 // Field referencePurger:Ljava/util/concurrent/ExecutorService;
      28: invokeinterface #180,  1          // InterfaceMethod java/util/concurrent/ExecutorService.shutdownNow:()Ljava/util/List;
      33: pop
      34: goto          38
      37: astore_1
      38: return
    Exception table:
       from    to  target type
           0    34    37   Class java/lang/Throwable

  protected io.fluxcapacitor.javaclient.persisting.caching.DefaultCache$CacheReference wrap(java.lang.Object, java.lang.Object);
    Code:
       0: aload_2
       1: ifnonnull     8
       4: aconst_null
       5: goto          18
       8: new           #102                // class io/fluxcapacitor/javaclient/persisting/caching/DefaultCache$CacheReference
      11: dup
      12: aload_0
      13: aload_1
      14: aload_2
      15: invokespecial #186                // Method io/fluxcapacitor/javaclient/persisting/caching/DefaultCache$CacheReference."<init>":(Lio/fluxcapacitor/javaclient/persisting/caching/DefaultCache;Ljava/lang/Object;Ljava/lang/Object;)V
      18: areturn

  protected <T> T unwrap(io.fluxcapacitor.javaclient.persisting.caching.DefaultCache$CacheReference);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: areturn
       6: aload_1
       7: invokevirtual #121                // Method io/fluxcapacitor/javaclient/persisting/caching/DefaultCache$CacheReference.get:()Ljava/lang/Object;
      10: astore_2
      11: aload_2
      12: instanceof    #189                // class java/util/Optional
      15: ifeq          27
      18: aload_2
      19: checkcast     #189                // class java/util/Optional
      22: aconst_null
      23: invokevirtual #191                // Method java/util/Optional.orElse:(Ljava/lang/Object;)Ljava/lang/Object;
      26: astore_2
      27: aload_2
      28: areturn

  protected void pollReferenceQueue();
    Code:
       0: aload_0
       1: getfield      #46                 // Field referenceQueue:Ljava/lang/ref/ReferenceQueue;
       4: invokevirtual #194                // Method java/lang/ref/ReferenceQueue.remove:()Ljava/lang/ref/Reference;
       7: dup
       8: astore_1
       9: ifnull        47
      12: aload_1
      13: instanceof    #102                // class io/fluxcapacitor/javaclient/persisting/caching/DefaultCache$CacheReference
      16: ifeq          44
      19: aload_1
      20: checkcast     #102                // class io/fluxcapacitor/javaclient/persisting/caching/DefaultCache$CacheReference
      23: astore_2
      24: aload_0
      25: aload_2
      26: getfield      #197                // Field io/fluxcapacitor/javaclient/persisting/caching/DefaultCache$CacheReference.id:Ljava/lang/Object;
      29: invokevirtual #201                // Method remove:(Ljava/lang/Object;)Ljava/lang/Object;
      32: pop
      33: aload_0
      34: aload_2
      35: getfield      #197                // Field io/fluxcapacitor/javaclient/persisting/caching/DefaultCache$CacheReference.id:Ljava/lang/Object;
      38: getstatic     #202                // Field io/fluxcapacitor/javaclient/persisting/caching/CacheEvictionEvent$Reason.memoryPressure:Lio/fluxcapacitor/javaclient/persisting/caching/CacheEvictionEvent$Reason;
      41: invokevirtual #130                // Method notifyEvictionListeners:(Ljava/lang/Object;Lio/fluxcapacitor/javaclient/persisting/caching/CacheEvictionEvent$Reason;)V
      44: goto          0
      47: goto          57
      50: astore_1
      51: invokestatic  #207                // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      54: invokevirtual #213                // Method java/lang/Thread.interrupt:()V
      57: return
    Exception table:
       from    to  target type
           0    47    50   Class java/lang/InterruptedException

  protected void notifyEvictionListeners(java.lang.Object, io.fluxcapacitor.javaclient.persisting.caching.CacheEvictionEvent$Reason);
    Code:
       0: new           #216                // class io/fluxcapacitor/javaclient/persisting/caching/CacheEvictionEvent
       3: dup
       4: aload_1
       5: aload_2
       6: invokespecial #218                // Method io/fluxcapacitor/javaclient/persisting/caching/CacheEvictionEvent."<init>":(Ljava/lang/Object;Lio/fluxcapacitor/javaclient/persisting/caching/CacheEvictionEvent$Reason;)V
       9: astore_3
      10: aload_0
      11: getfield      #72                 // Field evictionNotifier:Ljava/util/concurrent/Executor;
      14: aload_0
      15: aload_3
      16: invokedynamic #220,  0            // InvokeDynamic #8:run:(Lio/fluxcapacitor/javaclient/persisting/caching/DefaultCache;Lio/fluxcapacitor/javaclient/persisting/caching/CacheEvictionEvent;)Ljava/lang/Runnable;
      21: invokeinterface #223,  2          // InterfaceMethod java/util/concurrent/Executor.execute:(Ljava/lang/Runnable;)V
      26: return

  public io.fluxcapacitor.javaclient.persisting.caching.DefaultCache(java.util.Map<java.lang.Object, io.fluxcapacitor.javaclient.persisting.caching.DefaultCache$CacheReference>, java.util.concurrent.Executor);
    Code:
       0: aload_0
       1: invokespecial #25                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #30                 // class java/util/concurrent/CopyOnWriteArrayList
       8: dup
       9: invokespecial #32                 // Method java/util/concurrent/CopyOnWriteArrayList."<init>":()V
      12: putfield      #33                 // Field evictionListeners:Ljava/util/Collection;
      15: aload_0
      16: ldc           #37                 // String DefaultCache-referencePurger
      18: invokestatic  #10                 // Method io/fluxcapacitor/common/ObjectUtils.newThreadFactory:(Ljava/lang/String;)Ljava/util/concurrent/ThreadFactory;
      21: invokestatic  #16                 // Method java/util/concurrent/Executors.newSingleThreadExecutor:(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;
      24: putfield      #39                 // Field referencePurger:Ljava/util/concurrent/ExecutorService;
      27: aload_0
      28: new           #43                 // class java/lang/ref/ReferenceQueue
      31: dup
      32: invokespecial #45                 // Method java/lang/ref/ReferenceQueue."<init>":()V
      35: putfield      #46                 // Field referenceQueue:Ljava/lang/ref/ReferenceQueue;
      38: aload_0
      39: aload_1
      40: putfield      #68                 // Field valueMap:Ljava/util/Map;
      43: aload_0
      44: aload_2
      45: putfield      #72                 // Field evictionNotifier:Ljava/util/concurrent/Executor;
      48: return

  private void lambda$notifyEvictionListeners$7(io.fluxcapacitor.javaclient.persisting.caching.CacheEvictionEvent);
    Code:
       0: aload_0
       1: getfield      #33                 // Field evictionListeners:Ljava/util/Collection;
       4: aload_1
       5: invokedynamic #226,  0            // InvokeDynamic #9:accept:(Lio/fluxcapacitor/javaclient/persisting/caching/CacheEvictionEvent;)Ljava/util/function/Consumer;
      10: invokeinterface #230,  2          // InterfaceMethod java/util/Collection.forEach:(Ljava/util/function/Consumer;)V
      15: return

  private static void lambda$notifyEvictionListeners$6(io.fluxcapacitor.javaclient.persisting.caching.CacheEvictionEvent, java.util.function.Consumer);
    Code:
       0: aload_1
       1: aload_0
       2: invokeinterface #234,  2          // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V
       7: return

  private void lambda$registerEvictionListener$5(java.util.function.Consumer);
    Code:
       0: aload_0
       1: getfield      #33                 // Field evictionListeners:Ljava/util/Collection;
       4: aload_1
       5: invokeinterface #239,  2          // InterfaceMethod java/util/Collection.remove:(Ljava/lang/Object;)Z
      10: pop
      11: return

  private static java.lang.Object lambda$remove$4(java.lang.Object, java.lang.Object);
    Code:
       0: aconst_null
       1: areturn

  private static java.lang.Object lambda$computeIfPresent$3(java.util.function.BiFunction, java.lang.Object, java.lang.Object);
    Code:
       0: aload_2
       1: ifnonnull     8
       4: aconst_null
       5: goto          16
       8: aload_0
       9: aload_1
      10: aload_2
      11: invokeinterface #108,  3          // InterfaceMethod java/util/function/BiFunction.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      16: areturn

  private static java.lang.Object lambda$computeIfAbsent$2(java.util.function.Function, java.lang.Object, java.lang.Object);
    Code:
       0: aload_2
       1: ifnonnull     14
       4: aload_0
       5: aload_1
       6: invokeinterface #241,  2          // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      11: goto          15
      14: aload_2
      15: areturn

  private static java.lang.Object lambda$putIfAbsent$1(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: ifnonnull     10
       4: invokestatic  #245                // Method java/util/Optional.empty:()Ljava/util/Optional;
       7: goto          11
      10: aload_0
      11: areturn

  private static java.lang.Object lambda$put$0(java.lang.Object, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: ifnonnull     10
       4: invokestatic  #245                // Method java/util/Optional.empty:()Ljava/util/Optional;
       7: goto          11
      10: aload_0
      11: areturn

  static {};
    Code:
       0: ldc           #3                  // class io/fluxcapacitor/javaclient/persisting/caching/DefaultCache
       2: invokestatic  #249                // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #255                // Field log:Lorg/slf4j/Logger;
       8: return
}
