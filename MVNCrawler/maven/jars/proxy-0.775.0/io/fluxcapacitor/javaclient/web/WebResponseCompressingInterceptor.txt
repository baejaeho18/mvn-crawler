Compiled from "WebResponseCompressingInterceptor.java"
public class io.fluxcapacitor.javaclient.web.WebResponseCompressingInterceptor implements io.fluxcapacitor.javaclient.publishing.DispatchInterceptor {
  private final int minimumLength;

  public io.fluxcapacitor.javaclient.web.WebResponseCompressingInterceptor();
    Code:
       0: aload_0
       1: sipush        2048
       4: invokespecial #1                  // Method "<init>":(I)V
       7: return

  public io.fluxcapacitor.javaclient.web.WebResponseCompressingInterceptor(int);
    Code:
       0: aload_0
       1: invokespecial #7                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iload_1
       6: putfield      #12                 // Field minimumLength:I
       9: return

  public io.fluxcapacitor.common.api.SerializedMessage modifySerializedMessage(io.fluxcapacitor.common.api.SerializedMessage, io.fluxcapacitor.javaclient.common.Message, io.fluxcapacitor.common.MessageType);
    Code:
       0: aload_0
       1: invokevirtual #16                 // Method acceptCompression:()Z
       4: ifeq          23
       7: aload_0
       8: aload_1
       9: invokevirtual #20                 // Method shouldCompress:(Lio/fluxcapacitor/common/api/SerializedMessage;)Z
      12: ifeq          23
      15: aload_0
      16: aload_1
      17: invokevirtual #24                 // Method compress:(Lio/fluxcapacitor/common/api/SerializedMessage;)Lio/fluxcapacitor/common/api/SerializedMessage;
      20: goto          24
      23: aload_1
      24: areturn

  protected boolean acceptCompression();
    Code:
       0: invokestatic  #28                 // Method io/fluxcapacitor/javaclient/common/serialization/DeserializingMessage.getCurrent:()Lio/fluxcapacitor/javaclient/common/serialization/DeserializingMessage;
       3: astore_1
       4: aload_1
       5: ifnull        18
       8: aload_1
       9: invokevirtual #34                 // Method io/fluxcapacitor/javaclient/common/serialization/DeserializingMessage.getMessageType:()Lio/fluxcapacitor/common/MessageType;
      12: getstatic     #38                 // Field io/fluxcapacitor/common/MessageType.WEBREQUEST:Lio/fluxcapacitor/common/MessageType;
      15: if_acmpeq     20
      18: iconst_0
      19: ireturn
      20: aload_1
      21: invokevirtual #44                 // Method io/fluxcapacitor/javaclient/common/serialization/DeserializingMessage.getMetadata:()Lio/fluxcapacitor/common/api/Metadata;
      24: invokestatic  #48                 // Method io/fluxcapacitor/javaclient/web/WebRequest.getMethod:(Lio/fluxcapacitor/common/api/Metadata;)Lio/fluxcapacitor/javaclient/web/HttpRequestMethod;
      27: astore_2
      28: aload_2
      29: ifnull        39
      32: aload_2
      33: invokevirtual #54                 // Method io/fluxcapacitor/javaclient/web/HttpRequestMethod.isWebsocket:()Z
      36: ifeq          41
      39: iconst_0
      40: ireturn
      41: aload_1
      42: invokevirtual #44                 // Method io/fluxcapacitor/javaclient/common/serialization/DeserializingMessage.getMetadata:()Lio/fluxcapacitor/common/api/Metadata;
      45: invokestatic  #59                 // Method io/fluxcapacitor/javaclient/web/WebRequest.getHeaders:(Lio/fluxcapacitor/common/api/Metadata;)Ljava/util/Map;
      48: ldc           #63                 // String Accept-Encoding
      50: invokestatic  #65                 // Method java/util/Collections.emptyList:()Ljava/util/List;
      53: invokeinterface #71,  3           // InterfaceMethod java/util/Map.getOrDefault:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      58: checkcast     #77                 // class java/util/List
      61: invokeinterface #79,  1           // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
      66: invokedynamic #83,  0             // InvokeDynamic #0:apply:()Ljava/util/function/Function;
      71: invokeinterface #87,  2           // InterfaceMethod java/util/stream/Stream.flatMap:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      76: invokeinterface #93,  1           // InterfaceMethod java/util/stream/Stream.toList:()Ljava/util/List;
      81: ldc           #96                 // String gzip
      83: invokeinterface #98,  2           // InterfaceMethod java/util/List.contains:(Ljava/lang/Object;)Z
      88: ireturn

  protected boolean shouldCompress(io.fluxcapacitor.common.api.SerializedMessage);
    Code:
       0: aload_1
       1: invokevirtual #102                // Method io/fluxcapacitor/common/api/SerializedMessage.getMetadata:()Lio/fluxcapacitor/common/api/Metadata;
       4: invokestatic  #105                // Method io/fluxcapacitor/javaclient/web/WebResponse.getHeaders:(Lio/fluxcapacitor/common/api/Metadata;)Ljava/util/Map;
       7: ldc           #108                // String Content-Encoding
       9: invokeinterface #110,  2          // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
      14: ifne          39
      17: aload_1
      18: invokevirtual #113                // Method io/fluxcapacitor/common/api/SerializedMessage.getData:()Lio/fluxcapacitor/common/api/Data;
      21: invokevirtual #117                // Method io/fluxcapacitor/common/api/Data.getValue:()Ljava/lang/Object;
      24: checkcast     #123                // class "[B"
      27: arraylength
      28: aload_0
      29: getfield      #12                 // Field minimumLength:I
      32: if_icmplt     39
      35: iconst_1
      36: goto          40
      39: iconst_0
      40: ireturn

  protected io.fluxcapacitor.common.api.SerializedMessage compress(io.fluxcapacitor.common.api.SerializedMessage);
    Code:
       0: aload_1
       1: aload_1
       2: invokevirtual #113                // Method io/fluxcapacitor/common/api/SerializedMessage.getData:()Lio/fluxcapacitor/common/api/Data;
       5: invokedynamic #125,  0            // InvokeDynamic #1:apply:()Lio/fluxcapacitor/common/ThrowingFunction;
      10: invokevirtual #128                // Method io/fluxcapacitor/common/api/Data.map:(Lio/fluxcapacitor/common/ThrowingFunction;)Lio/fluxcapacitor/common/api/Data;
      13: invokevirtual #132                // Method io/fluxcapacitor/common/api/SerializedMessage.withData:(Lio/fluxcapacitor/common/api/Data;)Lio/fluxcapacitor/common/api/SerializedMessage;
      16: astore_2
      17: new           #136                // class java/util/LinkedHashMap
      20: dup
      21: aload_2
      22: invokevirtual #102                // Method io/fluxcapacitor/common/api/SerializedMessage.getMetadata:()Lio/fluxcapacitor/common/api/Metadata;
      25: ldc           #138                // String headers
      27: ldc           #72                 // class java/util/Map
      29: invokevirtual #140                // Method io/fluxcapacitor/common/api/Metadata.get:(Ljava/lang/Object;Ljava/lang/Class;)Ljava/lang/Object;
      32: checkcast     #72                 // class java/util/Map
      35: invokespecial #146                // Method java/util/LinkedHashMap."<init>":(Ljava/util/Map;)V
      38: astore_3
      39: aload_3
      40: ldc           #108                // String Content-Encoding
      42: ldc           #96                 // String gzip
      44: invokestatic  #149                // InterfaceMethod java/util/List.of:(Ljava/lang/Object;)Ljava/util/List;
      47: invokevirtual #153                // Method java/util/LinkedHashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      50: pop
      51: aload_2
      52: aload_2
      53: invokevirtual #102                // Method io/fluxcapacitor/common/api/SerializedMessage.getMetadata:()Lio/fluxcapacitor/common/api/Metadata;
      56: ldc           #138                // String headers
      58: aload_3
      59: invokevirtual #156                // Method io/fluxcapacitor/common/api/Metadata.with:(Ljava/lang/Object;Ljava/lang/Object;)Lio/fluxcapacitor/common/api/Metadata;
      62: invokevirtual #160                // Method io/fluxcapacitor/common/api/SerializedMessage.setMetadata:(Lio/fluxcapacitor/common/api/Metadata;)V
      65: aload_2
      66: areturn

  public io.fluxcapacitor.javaclient.common.Message interceptDispatch(io.fluxcapacitor.javaclient.common.Message, io.fluxcapacitor.common.MessageType);
    Code:
       0: aload_1
       1: areturn

  private static byte[] lambda$compress$1(byte[]) throws java.lang.Exception;
    Code:
       0: aload_0
       1: getstatic     #164                // Field io/fluxcapacitor/common/serialization/compression/CompressionAlgorithm.GZIP:Lio/fluxcapacitor/common/serialization/compression/CompressionAlgorithm;
       4: invokestatic  #170                // Method io/fluxcapacitor/common/serialization/compression/CompressionUtils.compress:([BLio/fluxcapacitor/common/serialization/compression/CompressionAlgorithm;)[B
       7: areturn

  private static java.util.stream.Stream lambda$acceptCompression$0(java.lang.String);
    Code:
       0: aload_0
       1: ldc           #175                // String ,
       3: invokevirtual #177                // Method java/lang/String.split:(Ljava/lang/String;)[Ljava/lang/String;
       6: invokestatic  #183                // Method java/util/Arrays.stream:([Ljava/lang/Object;)Ljava/util/stream/Stream;
       9: invokedynamic #188,  0            // InvokeDynamic #2:apply:()Ljava/util/function/Function;
      14: invokeinterface #189,  2          // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      19: areturn
}
