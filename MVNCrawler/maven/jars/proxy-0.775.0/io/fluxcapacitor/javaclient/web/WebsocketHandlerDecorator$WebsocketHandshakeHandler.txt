Compiled from "WebsocketHandlerDecorator.java"
public class io.fluxcapacitor.javaclient.web.WebsocketHandlerDecorator$WebsocketHandshakeHandler implements io.fluxcapacitor.common.handling.Handler<io.fluxcapacitor.javaclient.common.serialization.DeserializingMessage> {
  private final io.fluxcapacitor.common.handling.Handler<io.fluxcapacitor.javaclient.common.serialization.DeserializingMessage> delegate;

  private final java.util.Collection<java.lang.String> paths;

  private final io.fluxcapacitor.common.handling.HandlerInvoker handshakeInvoker;

  public io.fluxcapacitor.javaclient.web.WebsocketHandlerDecorator$WebsocketHandshakeHandler(io.fluxcapacitor.common.handling.Handler<io.fluxcapacitor.javaclient.common.serialization.DeserializingMessage>, java.util.Collection<java.lang.String>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #7                  // Field delegate:Lio/fluxcapacitor/common/handling/Handler;
       9: aload_0
      10: aload_2
      11: putfield      #13                 // Field paths:Ljava/util/Collection;
      14: aload_0
      15: new           #17                 // class io/fluxcapacitor/javaclient/web/WebsocketHandlerDecorator$HandshakeInvoker
      18: dup
      19: aload_1
      20: invokeinterface #19,  1           // InterfaceMethod io/fluxcapacitor/common/handling/Handler.getTarget:()Ljava/lang/Object;
      25: invokespecial #25                 // Method io/fluxcapacitor/javaclient/web/WebsocketHandlerDecorator$HandshakeInvoker."<init>":(Ljava/lang/Object;)V
      28: putfield      #28                 // Field handshakeInvoker:Lio/fluxcapacitor/common/handling/HandlerInvoker;
      31: return

  public java.util.Optional<io.fluxcapacitor.common.handling.HandlerInvoker> findInvoker(io.fluxcapacitor.javaclient.common.serialization.DeserializingMessage);
    Code:
       0: aload_0
       1: getfield      #7                  // Field delegate:Lio/fluxcapacitor/common/handling/Handler;
       4: aload_1
       5: invokeinterface #32,  2           // InterfaceMethod io/fluxcapacitor/common/handling/Handler.findInvoker:(Ljava/lang/Object;)Ljava/util/Optional;
      10: aload_0
      11: aload_1
      12: invokedynamic #36,  0             // InvokeDynamic #0:get:(Lio/fluxcapacitor/javaclient/web/WebsocketHandlerDecorator$WebsocketHandshakeHandler;Lio/fluxcapacitor/javaclient/common/serialization/DeserializingMessage;)Ljava/util/function/Supplier;
      17: invokevirtual #40                 // Method java/util/Optional.or:(Ljava/util/function/Supplier;)Ljava/util/Optional;
      20: areturn

  protected boolean matches(io.fluxcapacitor.javaclient.common.serialization.DeserializingMessage);
    Code:
       0: aload_1
       1: invokevirtual #46                 // Method io/fluxcapacitor/javaclient/common/serialization/DeserializingMessage.getMessageType:()Lio/fluxcapacitor/common/MessageType;
       4: getstatic     #52                 // Field io/fluxcapacitor/common/MessageType.WEBREQUEST:Lio/fluxcapacitor/common/MessageType;
       7: if_acmpne     46
      10: aload_1
      11: invokevirtual #58                 // Method io/fluxcapacitor/javaclient/common/serialization/DeserializingMessage.getMetadata:()Lio/fluxcapacitor/common/api/Metadata;
      14: invokestatic  #62                 // Method io/fluxcapacitor/javaclient/web/WebRequest.getMethod:(Lio/fluxcapacitor/common/api/Metadata;)Lio/fluxcapacitor/javaclient/web/HttpRequestMethod;
      17: getstatic     #68                 // Field io/fluxcapacitor/javaclient/web/HttpRequestMethod.WS_HANDSHAKE:Lio/fluxcapacitor/javaclient/web/HttpRequestMethod;
      20: if_acmpne     46
      23: aload_0
      24: getfield      #13                 // Field paths:Ljava/util/Collection;
      27: aload_1
      28: invokevirtual #58                 // Method io/fluxcapacitor/javaclient/common/serialization/DeserializingMessage.getMetadata:()Lio/fluxcapacitor/common/api/Metadata;
      31: invokestatic  #74                 // Method io/fluxcapacitor/javaclient/web/WebRequest.getUrl:(Lio/fluxcapacitor/common/api/Metadata;)Ljava/lang/String;
      34: invokeinterface #78,  2           // InterfaceMethod java/util/Collection.contains:(Ljava/lang/Object;)Z
      39: ifeq          46
      42: iconst_1
      43: goto          47
      46: iconst_0
      47: ireturn

  public java.lang.Object getTarget();
    Code:
       0: aload_0
       1: getfield      #7                  // Field delegate:Lio/fluxcapacitor/common/handling/Handler;
       4: invokeinterface #19,  1           // InterfaceMethod io/fluxcapacitor/common/handling/Handler.getTarget:()Ljava/lang/Object;
       9: areturn

  public java.util.Optional findInvoker(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #47                 // class io/fluxcapacitor/javaclient/common/serialization/DeserializingMessage
       5: invokevirtual #84                 // Method findInvoker:(Lio/fluxcapacitor/javaclient/common/serialization/DeserializingMessage;)Ljava/util/Optional;
       8: areturn

  private java.util.Optional lambda$findInvoker$0(io.fluxcapacitor.javaclient.common.serialization.DeserializingMessage);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #87                 // Method matches:(Lio/fluxcapacitor/javaclient/common/serialization/DeserializingMessage;)Z
       5: ifeq          18
       8: aload_0
       9: getfield      #28                 // Field handshakeInvoker:Lio/fluxcapacitor/common/handling/HandlerInvoker;
      12: invokestatic  #91                 // Method java/util/Optional.of:(Ljava/lang/Object;)Ljava/util/Optional;
      15: goto          21
      18: invokestatic  #94                 // Method java/util/Optional.empty:()Ljava/util/Optional;
      21: areturn
}
