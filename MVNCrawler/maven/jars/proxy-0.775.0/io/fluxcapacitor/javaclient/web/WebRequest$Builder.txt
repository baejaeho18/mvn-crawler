Compiled from "WebRequest.java"
public class io.fluxcapacitor.javaclient.web.WebRequest$Builder {
  private java.lang.String url;

  private io.fluxcapacitor.javaclient.web.HttpRequestMethod method;

  private java.util.Map<java.lang.String, java.util.List<java.lang.String>> headers;

  private boolean acceptGzipEncoding;

  private java.util.List<java.net.HttpCookie> cookies;

  private java.lang.Object payload;

  protected io.fluxcapacitor.javaclient.web.WebRequest$Builder(io.fluxcapacitor.javaclient.web.WebRequest);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #7                  // class java/util/LinkedHashMap
       8: dup
       9: invokespecial #9                  // Method java/util/LinkedHashMap."<init>":()V
      12: putfield      #10                 // Field headers:Ljava/util/Map;
      15: aload_0
      16: iconst_1
      17: putfield      #16                 // Field acceptGzipEncoding:Z
      20: aload_0
      21: new           #20                 // class java/util/ArrayList
      24: dup
      25: invokespecial #22                 // Method java/util/ArrayList."<init>":()V
      28: putfield      #23                 // Field cookies:Ljava/util/List;
      31: aload_0
      32: aload_1
      33: invokevirtual #27                 // Method io/fluxcapacitor/javaclient/web/WebRequest.getMethod:()Lio/fluxcapacitor/javaclient/web/HttpRequestMethod;
      36: invokevirtual #33                 // Method method:(Lio/fluxcapacitor/javaclient/web/HttpRequestMethod;)Lio/fluxcapacitor/javaclient/web/WebRequest$Builder;
      39: pop
      40: aload_0
      41: aload_1
      42: invokevirtual #37                 // Method io/fluxcapacitor/javaclient/web/WebRequest.getPath:()Ljava/lang/String;
      45: invokevirtual #41                 // Method url:(Ljava/lang/String;)Lio/fluxcapacitor/javaclient/web/WebRequest$Builder;
      48: pop
      49: aload_0
      50: aload_1
      51: invokevirtual #45                 // Method io/fluxcapacitor/javaclient/web/WebRequest.getPayload:()Ljava/lang/Object;
      54: invokevirtual #49                 // Method payload:(Ljava/lang/Object;)Lio/fluxcapacitor/javaclient/web/WebRequest$Builder;
      57: pop
      58: aload_1
      59: invokevirtual #53                 // Method io/fluxcapacitor/javaclient/web/WebRequest.getHeaders:()Ljava/util/Map;
      62: aload_0
      63: invokedynamic #57,  0             // InvokeDynamic #0:accept:(Lio/fluxcapacitor/javaclient/web/WebRequest$Builder;)Ljava/util/function/BiConsumer;
      68: invokeinterface #61,  2           // InterfaceMethod java/util/Map.forEach:(Ljava/util/function/BiConsumer;)V
      73: aload_0
      74: getfield      #23                 // Field cookies:Ljava/util/List;
      77: aload_0
      78: getfield      #10                 // Field headers:Ljava/util/Map;
      81: ldc           #67                 // String Cookie
      83: invokeinterface #69,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      88: checkcast     #73                 // class java/util/List
      91: invokestatic  #75                 // Method java/util/Optional.ofNullable:(Ljava/lang/Object;)Ljava/util/Optional;
      94: invokedynamic #81,  0             // InvokeDynamic #1:get:()Ljava/util/function/Supplier;
      99: invokevirtual #85                 // Method java/util/Optional.orElseGet:(Ljava/util/function/Supplier;)Ljava/lang/Object;
     102: checkcast     #73                 // class java/util/List
     105: invokeinterface #89,  1           // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
     110: invokeinterface #93,  1           // InterfaceMethod java/util/stream/Stream.findFirst:()Ljava/util/Optional;
     115: aconst_null
     116: invokevirtual #99                 // Method java/util/Optional.orElse:(Ljava/lang/Object;)Ljava/lang/Object;
     119: checkcast     #102                // class java/lang/String
     122: invokestatic  #104                // Method io/fluxcapacitor/javaclient/web/WebUtils.parseRequestCookieHeader:(Ljava/lang/String;)Ljava/util/List;
     125: invokeinterface #110,  2          // InterfaceMethod java/util/List.addAll:(Ljava/util/Collection;)Z
     130: pop
     131: return

  public io.fluxcapacitor.javaclient.web.WebRequest$Builder header(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #10                 // Field headers:Ljava/util/Map;
       4: aload_1
       5: invokedynamic #114,  0            // InvokeDynamic #2:apply:()Ljava/util/function/Function;
      10: invokeinterface #118,  3          // InterfaceMethod java/util/Map.computeIfAbsent:(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;
      15: checkcast     #73                 // class java/util/List
      18: aload_2
      19: invokeinterface #122,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      24: pop
      25: aload_0
      26: areturn

  public io.fluxcapacitor.javaclient.web.WebRequest$Builder cookie(java.net.HttpCookie);
    Code:
       0: aload_0
       1: getfield      #23                 // Field cookies:Ljava/util/List;
       4: aload_1
       5: invokeinterface #122,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      10: pop
      11: aload_0
      12: areturn

  public io.fluxcapacitor.javaclient.web.WebRequest$Builder contentType(java.lang.String);
    Code:
       0: aload_0
       1: ldc           #126                // String Content-Type
       3: aload_1
       4: invokevirtual #128                // Method header:(Ljava/lang/String;Ljava/lang/String;)Lio/fluxcapacitor/javaclient/web/WebRequest$Builder;
       7: areturn

  public io.fluxcapacitor.javaclient.web.WebRequest$Builder payload(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #132                // Field payload:Ljava/lang/Object;
       5: aload_0
       6: areturn

  public java.util.Map<java.lang.String, java.util.List<java.lang.String>> headers();
    Code:
       0: new           #7                  // class java/util/LinkedHashMap
       3: dup
       4: aload_0
       5: getfield      #10                 // Field headers:Ljava/util/Map;
       8: invokespecial #135                // Method java/util/LinkedHashMap."<init>":(Ljava/util/Map;)V
      11: astore_1
      12: aload_0
      13: getfield      #16                 // Field acceptGzipEncoding:Z
      16: ifeq          31
      19: aload_1
      20: ldc           #138                // String Accept-Encoding
      22: invokedynamic #140,  0            // InvokeDynamic #3:apply:()Ljava/util/function/Function;
      27: invokevirtual #141                // Method java/util/LinkedHashMap.computeIfAbsent:(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;
      30: pop
      31: aload_1
      32: ldc           #126                // String Content-Type
      34: invokevirtual #142                // Method java/util/LinkedHashMap.containsKey:(Ljava/lang/Object;)Z
      37: ifne          87
      40: aload_0
      41: getfield      #132                // Field payload:Ljava/lang/Object;
      44: instanceof    #102                // class java/lang/String
      47: ifeq          65
      50: aload_1
      51: ldc           #126                // String Content-Type
      53: ldc           #145                // String text/plain
      55: invokestatic  #147                // InterfaceMethod java/util/List.of:(Ljava/lang/Object;)Ljava/util/List;
      58: invokevirtual #151                // Method java/util/LinkedHashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      61: pop
      62: goto          87
      65: aload_0
      66: getfield      #132                // Field payload:Ljava/lang/Object;
      69: instanceof    #155                // class "[B"
      72: ifeq          87
      75: aload_1
      76: ldc           #126                // String Content-Type
      78: ldc           #157                // String application/octet-stream
      80: invokestatic  #147                // InterfaceMethod java/util/List.of:(Ljava/lang/Object;)Ljava/util/List;
      83: invokevirtual #151                // Method java/util/LinkedHashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      86: pop
      87: aload_0
      88: getfield      #23                 // Field cookies:Ljava/util/List;
      91: invokeinterface #159,  1          // InterfaceMethod java/util/List.isEmpty:()Z
      96: ifne          141
      99: aload_1
     100: ldc           #67                 // String Cookie
     102: aload_0
     103: getfield      #23                 // Field cookies:Ljava/util/List;
     106: invokeinterface #89,  1           // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
     111: invokedynamic #163,  0            // InvokeDynamic #4:apply:()Ljava/util/function/Function;
     116: invokeinterface #164,  2          // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
     121: ldc           #168                // String ;
     123: invokestatic  #170                // Method java/util/stream/Collectors.joining:(Ljava/lang/CharSequence;)Ljava/util/stream/Collector;
     126: invokeinterface #176,  2          // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
     131: checkcast     #102                // class java/lang/String
     134: invokestatic  #147                // InterfaceMethod java/util/List.of:(Ljava/lang/Object;)Ljava/util/List;
     137: invokevirtual #151                // Method java/util/LinkedHashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     140: pop
     141: aload_1
     142: areturn

  public io.fluxcapacitor.javaclient.web.WebRequest build();
    Code:
       0: aload_0
       1: getfield      #180                // Field method:Lio/fluxcapacitor/javaclient/web/HttpRequestMethod;
       4: ifnonnull     17
       7: new           #183                // class java/lang/IllegalStateException
      10: dup
      11: ldc           #185                // String HTTP request method not set
      13: invokespecial #187                // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: new           #28                 // class io/fluxcapacitor/javaclient/web/WebRequest
      20: dup
      21: aload_0
      22: invokespecial #190                // Method io/fluxcapacitor/javaclient/web/WebRequest."<init>":(Lio/fluxcapacitor/javaclient/web/WebRequest$Builder;)V
      25: areturn

  public java.lang.String url();
    Code:
       0: aload_0
       1: getfield      #193                // Field url:Ljava/lang/String;
       4: areturn

  public io.fluxcapacitor.javaclient.web.HttpRequestMethod method();
    Code:
       0: aload_0
       1: getfield      #180                // Field method:Lio/fluxcapacitor/javaclient/web/HttpRequestMethod;
       4: areturn

  public boolean acceptGzipEncoding();
    Code:
       0: aload_0
       1: getfield      #16                 // Field acceptGzipEncoding:Z
       4: ireturn

  public java.util.List<java.net.HttpCookie> cookies();
    Code:
       0: aload_0
       1: getfield      #23                 // Field cookies:Ljava/util/List;
       4: areturn

  public java.lang.Object payload();
    Code:
       0: aload_0
       1: getfield      #132                // Field payload:Ljava/lang/Object;
       4: areturn

  public io.fluxcapacitor.javaclient.web.WebRequest$Builder url(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #193                // Field url:Ljava/lang/String;
       5: aload_0
       6: areturn

  public io.fluxcapacitor.javaclient.web.WebRequest$Builder method(io.fluxcapacitor.javaclient.web.HttpRequestMethod);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #180                // Field method:Lio/fluxcapacitor/javaclient/web/HttpRequestMethod;
       5: aload_0
       6: areturn

  public io.fluxcapacitor.javaclient.web.WebRequest$Builder headers(java.util.Map<java.lang.String, java.util.List<java.lang.String>>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #10                 // Field headers:Ljava/util/Map;
       5: aload_0
       6: areturn

  public io.fluxcapacitor.javaclient.web.WebRequest$Builder acceptGzipEncoding(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #16                 // Field acceptGzipEncoding:Z
       5: aload_0
       6: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: aload_0
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: instanceof    #11                 // class io/fluxcapacitor/javaclient/web/WebRequest$Builder
      11: ifne          16
      14: iconst_0
      15: ireturn
      16: aload_1
      17: checkcast     #11                 // class io/fluxcapacitor/javaclient/web/WebRequest$Builder
      20: astore_2
      21: aload_2
      22: aload_0
      23: invokevirtual #196                // Method canEqual:(Ljava/lang/Object;)Z
      26: ifne          31
      29: iconst_0
      30: ireturn
      31: aload_0
      32: invokevirtual #199                // Method acceptGzipEncoding:()Z
      35: aload_2
      36: invokevirtual #199                // Method acceptGzipEncoding:()Z
      39: if_icmpeq     44
      42: iconst_0
      43: ireturn
      44: aload_0
      45: invokevirtual #201                // Method url:()Ljava/lang/String;
      48: astore_3
      49: aload_2
      50: invokevirtual #201                // Method url:()Ljava/lang/String;
      53: astore        4
      55: aload_3
      56: ifnonnull     67
      59: aload         4
      61: ifnull        78
      64: goto          76
      67: aload_3
      68: aload         4
      70: invokevirtual #203                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      73: ifne          78
      76: iconst_0
      77: ireturn
      78: aload_0
      79: invokevirtual #206                // Method method:()Lio/fluxcapacitor/javaclient/web/HttpRequestMethod;
      82: astore        5
      84: aload_2
      85: invokevirtual #206                // Method method:()Lio/fluxcapacitor/javaclient/web/HttpRequestMethod;
      88: astore        6
      90: aload         5
      92: ifnonnull     103
      95: aload         6
      97: ifnull        115
     100: goto          113
     103: aload         5
     105: aload         6
     107: invokevirtual #203                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
     110: ifne          115
     113: iconst_0
     114: ireturn
     115: aload_0
     116: invokevirtual #208                // Method headers:()Ljava/util/Map;
     119: astore        7
     121: aload_2
     122: invokevirtual #208                // Method headers:()Ljava/util/Map;
     125: astore        8
     127: aload         7
     129: ifnonnull     140
     132: aload         8
     134: ifnull        152
     137: goto          150
     140: aload         7
     142: aload         8
     144: invokevirtual #203                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
     147: ifne          152
     150: iconst_0
     151: ireturn
     152: aload_0
     153: invokevirtual #210                // Method cookies:()Ljava/util/List;
     156: astore        9
     158: aload_2
     159: invokevirtual #210                // Method cookies:()Ljava/util/List;
     162: astore        10
     164: aload         9
     166: ifnonnull     177
     169: aload         10
     171: ifnull        189
     174: goto          187
     177: aload         9
     179: aload         10
     181: invokevirtual #203                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
     184: ifne          189
     187: iconst_0
     188: ireturn
     189: aload_0
     190: invokevirtual #213                // Method payload:()Ljava/lang/Object;
     193: astore        11
     195: aload_2
     196: invokevirtual #213                // Method payload:()Ljava/lang/Object;
     199: astore        12
     201: aload         11
     203: ifnonnull     214
     206: aload         12
     208: ifnull        226
     211: goto          224
     214: aload         11
     216: aload         12
     218: invokevirtual #203                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
     221: ifne          226
     224: iconst_0
     225: ireturn
     226: iconst_1
     227: ireturn

  protected boolean canEqual(java.lang.Object);
    Code:
       0: aload_1
       1: instanceof    #11                 // class io/fluxcapacitor/javaclient/web/WebRequest$Builder
       4: ireturn

  public int hashCode();
    Code:
       0: bipush        59
       2: istore_1
       3: iconst_1
       4: istore_2
       5: iload_2
       6: bipush        59
       8: imul
       9: aload_0
      10: invokevirtual #199                // Method acceptGzipEncoding:()Z
      13: ifeq          21
      16: bipush        79
      18: goto          23
      21: bipush        97
      23: iadd
      24: istore_2
      25: aload_0
      26: invokevirtual #201                // Method url:()Ljava/lang/String;
      29: astore_3
      30: iload_2
      31: bipush        59
      33: imul
      34: aload_3
      35: ifnonnull     43
      38: bipush        43
      40: goto          47
      43: aload_3
      44: invokevirtual #215                // Method java/lang/Object.hashCode:()I
      47: iadd
      48: istore_2
      49: aload_0
      50: invokevirtual #206                // Method method:()Lio/fluxcapacitor/javaclient/web/HttpRequestMethod;
      53: astore        4
      55: iload_2
      56: bipush        59
      58: imul
      59: aload         4
      61: ifnonnull     69
      64: bipush        43
      66: goto          74
      69: aload         4
      71: invokevirtual #215                // Method java/lang/Object.hashCode:()I
      74: iadd
      75: istore_2
      76: aload_0
      77: invokevirtual #208                // Method headers:()Ljava/util/Map;
      80: astore        5
      82: iload_2
      83: bipush        59
      85: imul
      86: aload         5
      88: ifnonnull     96
      91: bipush        43
      93: goto          101
      96: aload         5
      98: invokevirtual #215                // Method java/lang/Object.hashCode:()I
     101: iadd
     102: istore_2
     103: aload_0
     104: invokevirtual #210                // Method cookies:()Ljava/util/List;
     107: astore        6
     109: iload_2
     110: bipush        59
     112: imul
     113: aload         6
     115: ifnonnull     123
     118: bipush        43
     120: goto          128
     123: aload         6
     125: invokevirtual #215                // Method java/lang/Object.hashCode:()I
     128: iadd
     129: istore_2
     130: aload_0
     131: invokevirtual #213                // Method payload:()Ljava/lang/Object;
     134: astore        7
     136: iload_2
     137: bipush        59
     139: imul
     140: aload         7
     142: ifnonnull     150
     145: bipush        43
     147: goto          155
     150: aload         7
     152: invokevirtual #215                // Method java/lang/Object.hashCode:()I
     155: iadd
     156: istore_2
     157: iload_2
     158: ireturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: invokevirtual #201                // Method url:()Ljava/lang/String;
       4: aload_0
       5: invokevirtual #206                // Method method:()Lio/fluxcapacitor/javaclient/web/HttpRequestMethod;
       8: aload_0
       9: invokevirtual #208                // Method headers:()Ljava/util/Map;
      12: aload_0
      13: invokevirtual #199                // Method acceptGzipEncoding:()Z
      16: aload_0
      17: invokevirtual #210                // Method cookies:()Ljava/util/List;
      20: aload_0
      21: invokevirtual #213                // Method payload:()Ljava/lang/Object;
      24: invokedynamic #219,  0            // InvokeDynamic #5:makeConcatWithConstants:(Ljava/lang/String;Lio/fluxcapacitor/javaclient/web/HttpRequestMethod;Ljava/util/Map;ZLjava/util/List;Ljava/lang/Object;)Ljava/lang/String;
      29: areturn

  public io.fluxcapacitor.javaclient.web.WebRequest$Builder();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #7                  // class java/util/LinkedHashMap
       8: dup
       9: invokespecial #9                  // Method java/util/LinkedHashMap."<init>":()V
      12: putfield      #10                 // Field headers:Ljava/util/Map;
      15: aload_0
      16: iconst_1
      17: putfield      #16                 // Field acceptGzipEncoding:Z
      20: aload_0
      21: new           #20                 // class java/util/ArrayList
      24: dup
      25: invokespecial #22                 // Method java/util/ArrayList."<init>":()V
      28: putfield      #23                 // Field cookies:Ljava/util/List;
      31: return

  private static java.util.List lambda$headers$2(java.lang.String);
    Code:
       0: ldc           #223                // String gzip
       2: invokestatic  #147                // InterfaceMethod java/util/List.of:(Ljava/lang/Object;)Ljava/util/List;
       5: areturn

  private static java.util.List lambda$header$1(java.lang.String);
    Code:
       0: new           #20                 // class java/util/ArrayList
       3: dup
       4: invokespecial #22                 // Method java/util/ArrayList."<init>":()V
       7: areturn

  private void lambda$new$0(java.lang.String, java.util.List);
    Code:
       0: aload_0
       1: getfield      #10                 // Field headers:Ljava/util/Map;
       4: aload_1
       5: new           #20                 // class java/util/ArrayList
       8: dup
       9: aload_2
      10: invokespecial #225                // Method java/util/ArrayList."<init>":(Ljava/util/Collection;)V
      13: invokeinterface #228,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      18: pop
      19: return
}
