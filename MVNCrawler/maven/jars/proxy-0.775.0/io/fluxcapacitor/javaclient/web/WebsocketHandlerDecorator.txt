Compiled from "WebsocketHandlerDecorator.java"
public class io.fluxcapacitor.javaclient.web.WebsocketHandlerDecorator implements io.fluxcapacitor.javaclient.tracking.handling.HandlerDecorator {
  private final java.util.Set<java.lang.String> websocketPaths;

  public io.fluxcapacitor.javaclient.web.WebsocketHandlerDecorator();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #7                  // class java/util/concurrent/CopyOnWriteArraySet
       8: dup
       9: invokespecial #9                  // Method java/util/concurrent/CopyOnWriteArraySet."<init>":()V
      12: putfield      #10                 // Field websocketPaths:Ljava/util/Set;
      15: return

  public io.fluxcapacitor.common.handling.Handler<io.fluxcapacitor.javaclient.common.serialization.DeserializingMessage> wrap(io.fluxcapacitor.common.handling.Handler<io.fluxcapacitor.javaclient.common.serialization.DeserializingMessage>);
    Code:
       0: aload_1
       1: invokeinterface #16,  1           // InterfaceMethod io/fluxcapacitor/common/handling/Handler.getTarget:()Ljava/lang/Object;
       6: invokevirtual #22                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
       9: invokestatic  #26                 // Method io/fluxcapacitor/common/reflection/ReflectionUtils.getAllMethods:(Ljava/lang/Class;)Ljava/util/List;
      12: invokeinterface #32,  1           // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
      17: invokedynamic #38,  0             // InvokeDynamic #0:apply:()Ljava/util/function/Function;
      22: invokeinterface #42,  2           // InterfaceMethod java/util/stream/Stream.flatMap:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      27: invokedynamic #48,  0             // InvokeDynamic #1:test:()Ljava/util/function/Predicate;
      32: invokeinterface #52,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      37: invokeinterface #56,  1           // InterfaceMethod java/util/stream/Stream.toList:()Ljava/util/List;
      42: astore_2
      43: aload_2
      44: invokeinterface #60,  1           // InterfaceMethod java/util/List.isEmpty:()Z
      49: ifne          167
      52: aload_2
      53: invokeinterface #32,  1           // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
      58: invokedynamic #64,  0             // InvokeDynamic #2:test:()Ljava/util/function/Predicate;
      63: invokeinterface #52,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      68: invokedynamic #65,  0             // InvokeDynamic #3:apply:()Ljava/util/function/Function;
      73: invokeinterface #66,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      78: invokeinterface #69,  1           // InterfaceMethod java/util/stream/Stream.distinct:()Ljava/util/stream/Stream;
      83: aload_0
      84: getfield      #10                 // Field websocketPaths:Ljava/util/Set;
      87: dup
      88: invokestatic  #72                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
      91: pop
      92: invokedynamic #78,  0             // InvokeDynamic #4:accept:(Ljava/util/Set;)Ljava/util/function/Consumer;
      97: invokeinterface #82,  2           // InterfaceMethod java/util/stream/Stream.forEach:(Ljava/util/function/Consumer;)V
     102: aload_2
     103: invokeinterface #32,  1           // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
     108: invokedynamic #65,  0             // InvokeDynamic #3:apply:()Ljava/util/function/Function;
     113: invokeinterface #66,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
     118: invokeinterface #69,  1           // InterfaceMethod java/util/stream/Stream.distinct:()Ljava/util/stream/Stream;
     123: aload_0
     124: getfield      #10                 // Field websocketPaths:Ljava/util/Set;
     127: dup
     128: invokestatic  #72                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
     131: pop
     132: invokedynamic #86,  0             // InvokeDynamic #5:test:(Ljava/util/Set;)Ljava/util/function/Predicate;
     137: invokeinterface #52,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
     142: invokeinterface #56,  1           // InterfaceMethod java/util/stream/Stream.toList:()Ljava/util/List;
     147: astore_3
     148: aload_3
     149: invokeinterface #60,  1           // InterfaceMethod java/util/List.isEmpty:()Z
     154: ifne          167
     157: new           #89                 // class io/fluxcapacitor/javaclient/web/WebsocketHandlerDecorator$WebsocketHandshakeHandler
     160: dup
     161: aload_1
     162: aload_3
     163: invokespecial #91                 // Method io/fluxcapacitor/javaclient/web/WebsocketHandlerDecorator$WebsocketHandshakeHandler."<init>":(Lio/fluxcapacitor/common/handling/Handler;Ljava/util/Collection;)V
     166: areturn
     167: aload_1
     168: areturn

  private static boolean lambda$wrap$2(io.fluxcapacitor.javaclient.web.WebParameters);
    Code:
       0: aload_0
       1: invokevirtual #94                 // Method io/fluxcapacitor/javaclient/web/WebParameters.getMethod:()Lio/fluxcapacitor/javaclient/web/HttpRequestMethod;
       4: getstatic     #100                // Field io/fluxcapacitor/javaclient/web/HttpRequestMethod.WS_HANDSHAKE:Lio/fluxcapacitor/javaclient/web/HttpRequestMethod;
       7: if_acmpne     14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  private static boolean lambda$wrap$1(io.fluxcapacitor.javaclient.web.WebParameters);
    Code:
       0: aload_0
       1: invokevirtual #94                 // Method io/fluxcapacitor/javaclient/web/WebParameters.getMethod:()Lio/fluxcapacitor/javaclient/web/HttpRequestMethod;
       4: invokevirtual #106                // Method io/fluxcapacitor/javaclient/web/HttpRequestMethod.isWebsocket:()Z
       7: ireturn

  private static java.util.stream.Stream lambda$wrap$0(java.lang.reflect.Method);
    Code:
       0: aload_0
       1: invokestatic  #109                // Method io/fluxcapacitor/javaclient/web/WebUtils.getWebParameters:(Ljava/lang/reflect/Executable;)Ljava/util/Optional;
       4: invokevirtual #115                // Method java/util/Optional.stream:()Ljava/util/stream/Stream;
       7: areturn
}
