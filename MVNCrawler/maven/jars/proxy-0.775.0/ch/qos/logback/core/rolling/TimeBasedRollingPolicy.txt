Compiled from "TimeBasedRollingPolicy.java"
public class ch.qos.logback.core.rolling.TimeBasedRollingPolicy<E> extends ch.qos.logback.core.rolling.RollingPolicyBase implements ch.qos.logback.core.rolling.TriggeringPolicy<E> {
  static final java.lang.String FNP_NOT_SET;

  ch.qos.logback.core.rolling.helper.FileNamePattern fileNamePatternWithoutCompSuffix;

  private ch.qos.logback.core.rolling.helper.Compressor compressor;

  private ch.qos.logback.core.rolling.helper.RenameUtil renameUtil;

  java.util.concurrent.Future<?> compressionFuture;

  java.util.concurrent.Future<?> cleanUpFuture;

  private int maxHistory;

  protected ch.qos.logback.core.util.FileSize totalSizeCap;

  private ch.qos.logback.core.rolling.helper.ArchiveRemover archiveRemover;

  ch.qos.logback.core.rolling.TimeBasedFileNamingAndTriggeringPolicy<E> timeBasedFileNamingAndTriggeringPolicy;

  boolean cleanHistoryOnStart;

  public ch.qos.logback.core.rolling.TimeBasedRollingPolicy();
    Code:
       0: aload_0
       1: invokespecial #3                  // Method ch/qos/logback/core/rolling/RollingPolicyBase."<init>":()V
       4: aload_0
       5: new           #9                  // class ch/qos/logback/core/rolling/helper/RenameUtil
       8: dup
       9: invokespecial #11                 // Method ch/qos/logback/core/rolling/helper/RenameUtil."<init>":()V
      12: putfield      #12                 // Field renameUtil:Lch/qos/logback/core/rolling/helper/RenameUtil;
      15: aload_0
      16: iconst_0
      17: putfield      #18                 // Field maxHistory:I
      20: aload_0
      21: new           #22                 // class ch/qos/logback/core/util/FileSize
      24: dup
      25: lconst_0
      26: invokespecial #24                 // Method ch/qos/logback/core/util/FileSize."<init>":(J)V
      29: putfield      #27                 // Field totalSizeCap:Lch/qos/logback/core/util/FileSize;
      32: aload_0
      33: iconst_0
      34: putfield      #31                 // Field cleanHistoryOnStart:Z
      37: return

  public void start();
    Code:
       0: aload_0
       1: getfield      #12                 // Field renameUtil:Lch/qos/logback/core/rolling/helper/RenameUtil;
       4: aload_0
       5: getfield      #35                 // Field context:Lch/qos/logback/core/Context;
       8: invokevirtual #39                 // Method ch/qos/logback/core/rolling/helper/RenameUtil.setContext:(Lch/qos/logback/core/Context;)V
      11: aload_0
      12: getfield      #43                 // Field fileNamePatternStr:Ljava/lang/String;
      15: ifnull        44
      18: aload_0
      19: new           #47                 // class ch/qos/logback/core/rolling/helper/FileNamePattern
      22: dup
      23: aload_0
      24: getfield      #43                 // Field fileNamePatternStr:Ljava/lang/String;
      27: aload_0
      28: getfield      #35                 // Field context:Lch/qos/logback/core/Context;
      31: invokespecial #49                 // Method ch/qos/logback/core/rolling/helper/FileNamePattern."<init>":(Ljava/lang/String;Lch/qos/logback/core/Context;)V
      34: putfield      #52                 // Field fileNamePattern:Lch/qos/logback/core/rolling/helper/FileNamePattern;
      37: aload_0
      38: invokevirtual #56                 // Method determineCompressionMode:()V
      41: goto          66
      44: aload_0
      45: ldc           #59                 // String The FileNamePattern option must be set before using TimeBasedRollingPolicy.
      47: invokevirtual #61                 // Method addWarn:(Ljava/lang/String;)V
      50: aload_0
      51: ldc           #65                 // String See also http://logback.qos.ch/codes.html#tbr_fnp_not_set
      53: invokevirtual #61                 // Method addWarn:(Ljava/lang/String;)V
      56: new           #67                 // class java/lang/IllegalStateException
      59: dup
      60: ldc           #69                 // String The FileNamePattern option must be set before using TimeBasedRollingPolicy. See also http://logback.qos.ch/codes.html#tbr_fnp_not_set
      62: invokespecial #71                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      65: athrow
      66: aload_0
      67: new           #73                 // class ch/qos/logback/core/rolling/helper/Compressor
      70: dup
      71: aload_0
      72: getfield      #75                 // Field compressionMode:Lch/qos/logback/core/rolling/helper/CompressionMode;
      75: invokespecial #79                 // Method ch/qos/logback/core/rolling/helper/Compressor."<init>":(Lch/qos/logback/core/rolling/helper/CompressionMode;)V
      78: putfield      #82                 // Field compressor:Lch/qos/logback/core/rolling/helper/Compressor;
      81: aload_0
      82: getfield      #82                 // Field compressor:Lch/qos/logback/core/rolling/helper/Compressor;
      85: aload_0
      86: getfield      #35                 // Field context:Lch/qos/logback/core/Context;
      89: invokevirtual #86                 // Method ch/qos/logback/core/rolling/helper/Compressor.setContext:(Lch/qos/logback/core/Context;)V
      92: aload_0
      93: new           #47                 // class ch/qos/logback/core/rolling/helper/FileNamePattern
      96: dup
      97: aload_0
      98: getfield      #43                 // Field fileNamePatternStr:Ljava/lang/String;
     101: aload_0
     102: getfield      #75                 // Field compressionMode:Lch/qos/logback/core/rolling/helper/CompressionMode;
     105: invokestatic  #87                 // Method ch/qos/logback/core/rolling/helper/Compressor.computeFileNameStrWithoutCompSuffix:(Ljava/lang/String;Lch/qos/logback/core/rolling/helper/CompressionMode;)Ljava/lang/String;
     108: aload_0
     109: getfield      #35                 // Field context:Lch/qos/logback/core/Context;
     112: invokespecial #49                 // Method ch/qos/logback/core/rolling/helper/FileNamePattern."<init>":(Ljava/lang/String;Lch/qos/logback/core/Context;)V
     115: putfield      #91                 // Field fileNamePatternWithoutCompSuffix:Lch/qos/logback/core/rolling/helper/FileNamePattern;
     118: aload_0
     119: aload_0
     120: getfield      #91                 // Field fileNamePatternWithoutCompSuffix:Lch/qos/logback/core/rolling/helper/FileNamePattern;
     123: invokestatic  #94                 // Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;
     126: invokedynamic #100,  0            // InvokeDynamic #0:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;
     131: invokevirtual #104                // Method addInfo:(Ljava/lang/String;)V
     134: aload_0
     135: getfield      #75                 // Field compressionMode:Lch/qos/logback/core/rolling/helper/CompressionMode;
     138: getstatic     #107                // Field ch/qos/logback/core/rolling/helper/CompressionMode.ZIP:Lch/qos/logback/core/rolling/helper/CompressionMode;
     141: if_acmpne     169
     144: aload_0
     145: aload_0
     146: getfield      #43                 // Field fileNamePatternStr:Ljava/lang/String;
     149: invokevirtual #112                // Method transformFileNamePattern2ZipEntry:(Ljava/lang/String;)Ljava/lang/String;
     152: astore_1
     153: aload_0
     154: new           #47                 // class ch/qos/logback/core/rolling/helper/FileNamePattern
     157: dup
     158: aload_1
     159: aload_0
     160: getfield      #35                 // Field context:Lch/qos/logback/core/Context;
     163: invokespecial #49                 // Method ch/qos/logback/core/rolling/helper/FileNamePattern."<init>":(Ljava/lang/String;Lch/qos/logback/core/Context;)V
     166: putfield      #115                // Field zipEntryFileNamePattern:Lch/qos/logback/core/rolling/helper/FileNamePattern;
     169: aload_0
     170: getfield      #118                // Field timeBasedFileNamingAndTriggeringPolicy:Lch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy;
     173: ifnonnull     187
     176: aload_0
     177: new           #122                // class ch/qos/logback/core/rolling/DefaultTimeBasedFileNamingAndTriggeringPolicy
     180: dup
     181: invokespecial #124                // Method ch/qos/logback/core/rolling/DefaultTimeBasedFileNamingAndTriggeringPolicy."<init>":()V
     184: putfield      #118                // Field timeBasedFileNamingAndTriggeringPolicy:Lch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy;
     187: aload_0
     188: getfield      #118                // Field timeBasedFileNamingAndTriggeringPolicy:Lch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy;
     191: aload_0
     192: getfield      #35                 // Field context:Lch/qos/logback/core/Context;
     195: invokeinterface #125,  2          // InterfaceMethod ch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy.setContext:(Lch/qos/logback/core/Context;)V
     200: aload_0
     201: getfield      #118                // Field timeBasedFileNamingAndTriggeringPolicy:Lch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy;
     204: aload_0
     205: invokeinterface #128,  2          // InterfaceMethod ch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy.setTimeBasedRollingPolicy:(Lch/qos/logback/core/rolling/TimeBasedRollingPolicy;)V
     210: aload_0
     211: getfield      #118                // Field timeBasedFileNamingAndTriggeringPolicy:Lch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy;
     214: invokeinterface #132,  1          // InterfaceMethod ch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy.start:()V
     219: aload_0
     220: getfield      #118                // Field timeBasedFileNamingAndTriggeringPolicy:Lch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy;
     223: invokeinterface #135,  1          // InterfaceMethod ch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy.isStarted:()Z
     228: ifne          238
     231: aload_0
     232: ldc           #139                // String Subcomponent did not start. TimeBasedRollingPolicy will not start.
     234: invokevirtual #61                 // Method addWarn:(Ljava/lang/String;)V
     237: return
     238: aload_0
     239: getfield      #18                 // Field maxHistory:I
     242: ifeq          330
     245: aload_0
     246: aload_0
     247: getfield      #118                // Field timeBasedFileNamingAndTriggeringPolicy:Lch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy;
     250: invokeinterface #141,  1          // InterfaceMethod ch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy.getArchiveRemover:()Lch/qos/logback/core/rolling/helper/ArchiveRemover;
     255: putfield      #145                // Field archiveRemover:Lch/qos/logback/core/rolling/helper/ArchiveRemover;
     258: aload_0
     259: getfield      #145                // Field archiveRemover:Lch/qos/logback/core/rolling/helper/ArchiveRemover;
     262: aload_0
     263: getfield      #18                 // Field maxHistory:I
     266: invokeinterface #149,  2          // InterfaceMethod ch/qos/logback/core/rolling/helper/ArchiveRemover.setMaxHistory:(I)V
     271: aload_0
     272: getfield      #145                // Field archiveRemover:Lch/qos/logback/core/rolling/helper/ArchiveRemover;
     275: aload_0
     276: getfield      #27                 // Field totalSizeCap:Lch/qos/logback/core/util/FileSize;
     279: invokevirtual #155                // Method ch/qos/logback/core/util/FileSize.getSize:()J
     282: invokeinterface #159,  3          // InterfaceMethod ch/qos/logback/core/rolling/helper/ArchiveRemover.setTotalSizeCap:(J)V
     287: aload_0
     288: getfield      #31                 // Field cleanHistoryOnStart:Z
     291: ifeq          353
     294: aload_0
     295: ldc           #162                // String Cleaning on start up
     297: invokevirtual #104                // Method addInfo:(Ljava/lang/String;)V
     300: aload_0
     301: getfield      #118                // Field timeBasedFileNamingAndTriggeringPolicy:Lch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy;
     304: invokeinterface #164,  1          // InterfaceMethod ch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy.getCurrentTime:()J
     309: invokestatic  #167                // Method java/time/Instant.ofEpochMilli:(J)Ljava/time/Instant;
     312: astore_1
     313: aload_0
     314: aload_0
     315: getfield      #145                // Field archiveRemover:Lch/qos/logback/core/rolling/helper/ArchiveRemover;
     318: aload_1
     319: invokeinterface #173,  2          // InterfaceMethod ch/qos/logback/core/rolling/helper/ArchiveRemover.cleanAsynchronously:(Ljava/time/Instant;)Ljava/util/concurrent/Future;
     324: putfield      #177                // Field cleanUpFuture:Ljava/util/concurrent/Future;
     327: goto          353
     330: aload_0
     331: invokevirtual #181                // Method isUnboundedTotalSizeCap:()Z
     334: ifne          353
     337: aload_0
     338: aload_0
     339: getfield      #27                 // Field totalSizeCap:Lch/qos/logback/core/util/FileSize;
     342: invokestatic  #94                 // Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;
     345: invokedynamic #184,  0            // InvokeDynamic #1:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;
     350: invokevirtual #61                 // Method addWarn:(Ljava/lang/String;)V
     353: aload_0
     354: invokespecial #185                // Method ch/qos/logback/core/rolling/RollingPolicyBase.start:()V
     357: return

  protected boolean isUnboundedTotalSizeCap();
    Code:
       0: aload_0
       1: getfield      #27                 // Field totalSizeCap:Lch/qos/logback/core/util/FileSize;
       4: invokevirtual #155                // Method ch/qos/logback/core/util/FileSize.getSize:()J
       7: lconst_0
       8: lcmp
       9: ifne          16
      12: iconst_1
      13: goto          17
      16: iconst_0
      17: ireturn

  public void stop();
    Code:
       0: aload_0
       1: invokevirtual #186                // Method isStarted:()Z
       4: ifne          8
       7: return
       8: aload_0
       9: aload_0
      10: getfield      #187                // Field compressionFuture:Ljava/util/concurrent/Future;
      13: ldc           #190                // String compression
      15: invokevirtual #192                // Method waitForAsynchronousJobToStop:(Ljava/util/concurrent/Future;Ljava/lang/String;)V
      18: aload_0
      19: aload_0
      20: getfield      #177                // Field cleanUpFuture:Ljava/util/concurrent/Future;
      23: ldc           #196                // String clean-up
      25: invokevirtual #192                // Method waitForAsynchronousJobToStop:(Ljava/util/concurrent/Future;Ljava/lang/String;)V
      28: aload_0
      29: invokespecial #198                // Method ch/qos/logback/core/rolling/RollingPolicyBase.stop:()V
      32: return

  private void waitForAsynchronousJobToStop(java.util.concurrent.Future<?>, java.lang.String);
    Code:
       0: aload_1
       1: ifnull        47
       4: aload_1
       5: ldc2_w        #201                // long 30l
       8: getstatic     #203                // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
      11: invokeinterface #209,  4          // InterfaceMethod java/util/concurrent/Future.get:(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;
      16: pop
      17: goto          47
      20: astore_3
      21: aload_0
      22: aload_2
      23: invokedynamic #217,  0            // InvokeDynamic #2:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;
      28: aload_3
      29: invokevirtual #218                // Method addError:(Ljava/lang/String;Ljava/lang/Throwable;)V
      32: goto          47
      35: astore_3
      36: aload_0
      37: aload_2
      38: invokedynamic #224,  0            // InvokeDynamic #3:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;
      43: aload_3
      44: invokevirtual #218                // Method addError:(Ljava/lang/String;Ljava/lang/Throwable;)V
      47: return
    Exception table:
       from    to  target type
           4    17    20   Class java/util/concurrent/TimeoutException
           4    17    35   Class java/lang/Exception

  private java.lang.String transformFileNamePattern2ZipEntry(java.lang.String);
    Code:
       0: aload_1
       1: invokestatic  #225                // Method ch/qos/logback/core/rolling/helper/FileFilterUtil.slashify:(Ljava/lang/String;)Ljava/lang/String;
       4: astore_2
       5: aload_2
       6: invokestatic  #230                // Method ch/qos/logback/core/rolling/helper/FileFilterUtil.afterLastSlash:(Ljava/lang/String;)Ljava/lang/String;
       9: areturn

  public void setTimeBasedFileNamingAndTriggeringPolicy(ch.qos.logback.core.rolling.TimeBasedFileNamingAndTriggeringPolicy<E>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #118                // Field timeBasedFileNamingAndTriggeringPolicy:Lch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy;
       5: return

  public ch.qos.logback.core.rolling.TimeBasedFileNamingAndTriggeringPolicy<E> getTimeBasedFileNamingAndTriggeringPolicy();
    Code:
       0: aload_0
       1: getfield      #118                // Field timeBasedFileNamingAndTriggeringPolicy:Lch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy;
       4: areturn

  public void rollover() throws ch.qos.logback.core.rolling.RolloverFailure;
    Code:
       0: aload_0
       1: getfield      #118                // Field timeBasedFileNamingAndTriggeringPolicy:Lch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy;
       4: invokeinterface #233,  1          // InterfaceMethod ch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy.getElapsedPeriodsFileName:()Ljava/lang/String;
       9: astore_1
      10: aload_1
      11: invokestatic  #230                // Method ch/qos/logback/core/rolling/helper/FileFilterUtil.afterLastSlash:(Ljava/lang/String;)Ljava/lang/String;
      14: astore_2
      15: aload_0
      16: getfield      #75                 // Field compressionMode:Lch/qos/logback/core/rolling/helper/CompressionMode;
      19: getstatic     #237                // Field ch/qos/logback/core/rolling/helper/CompressionMode.NONE:Lch/qos/logback/core/rolling/helper/CompressionMode;
      22: if_acmpne     47
      25: aload_0
      26: invokevirtual #240                // Method getParentsRawFileProperty:()Ljava/lang/String;
      29: ifnull        81
      32: aload_0
      33: getfield      #12                 // Field renameUtil:Lch/qos/logback/core/rolling/helper/RenameUtil;
      36: aload_0
      37: invokevirtual #240                // Method getParentsRawFileProperty:()Ljava/lang/String;
      40: aload_1
      41: invokevirtual #243                // Method ch/qos/logback/core/rolling/helper/RenameUtil.rename:(Ljava/lang/String;Ljava/lang/String;)V
      44: goto          81
      47: aload_0
      48: invokevirtual #240                // Method getParentsRawFileProperty:()Ljava/lang/String;
      51: ifnonnull     71
      54: aload_0
      55: aload_0
      56: getfield      #82                 // Field compressor:Lch/qos/logback/core/rolling/helper/Compressor;
      59: aload_1
      60: aload_1
      61: aload_2
      62: invokevirtual #247                // Method ch/qos/logback/core/rolling/helper/Compressor.asyncCompress:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/util/concurrent/Future;
      65: putfield      #187                // Field compressionFuture:Ljava/util/concurrent/Future;
      68: goto          81
      71: aload_0
      72: aload_0
      73: aload_1
      74: aload_2
      75: invokevirtual #251                // Method renameRawAndAsyncCompress:(Ljava/lang/String;Ljava/lang/String;)Ljava/util/concurrent/Future;
      78: putfield      #187                // Field compressionFuture:Ljava/util/concurrent/Future;
      81: aload_0
      82: getfield      #145                // Field archiveRemover:Lch/qos/logback/core/rolling/helper/ArchiveRemover;
      85: ifnull        115
      88: aload_0
      89: getfield      #118                // Field timeBasedFileNamingAndTriggeringPolicy:Lch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy;
      92: invokeinterface #164,  1          // InterfaceMethod ch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy.getCurrentTime:()J
      97: invokestatic  #167                // Method java/time/Instant.ofEpochMilli:(J)Ljava/time/Instant;
     100: astore_3
     101: aload_0
     102: aload_0
     103: getfield      #145                // Field archiveRemover:Lch/qos/logback/core/rolling/helper/ArchiveRemover;
     106: aload_3
     107: invokeinterface #173,  2          // InterfaceMethod ch/qos/logback/core/rolling/helper/ArchiveRemover.cleanAsynchronously:(Ljava/time/Instant;)Ljava/util/concurrent/Future;
     112: putfield      #177                // Field cleanUpFuture:Ljava/util/concurrent/Future;
     115: return

  java.util.concurrent.Future<?> renameRawAndAsyncCompress(java.lang.String, java.lang.String) throws ch.qos.logback.core.rolling.RolloverFailure;
    Code:
       0: aload_0
       1: invokevirtual #240                // Method getParentsRawFileProperty:()Ljava/lang/String;
       4: astore_3
       5: aload_1
       6: invokestatic  #255                // Method java/lang/System.nanoTime:()J
       9: invokedynamic #260,  0            // InvokeDynamic #4:makeConcatWithConstants:(Ljava/lang/String;J)Ljava/lang/String;
      14: astore        4
      16: aload_0
      17: getfield      #12                 // Field renameUtil:Lch/qos/logback/core/rolling/helper/RenameUtil;
      20: aload_3
      21: aload         4
      23: invokevirtual #243                // Method ch/qos/logback/core/rolling/helper/RenameUtil.rename:(Ljava/lang/String;Ljava/lang/String;)V
      26: aload_0
      27: getfield      #82                 // Field compressor:Lch/qos/logback/core/rolling/helper/Compressor;
      30: aload         4
      32: aload_1
      33: aload_2
      34: invokevirtual #247                // Method ch/qos/logback/core/rolling/helper/Compressor.asyncCompress:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/util/concurrent/Future;
      37: areturn

  public java.lang.String getActiveFileName();
    Code:
       0: aload_0
       1: invokevirtual #240                // Method getParentsRawFileProperty:()Ljava/lang/String;
       4: astore_1
       5: aload_1
       6: ifnull        11
       9: aload_1
      10: areturn
      11: aload_0
      12: getfield      #118                // Field timeBasedFileNamingAndTriggeringPolicy:Lch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy;
      15: invokeinterface #263,  1          // InterfaceMethod ch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy.getCurrentPeriodsFileNameWithoutCompressionSuffix:()Ljava/lang/String;
      20: areturn

  public boolean isTriggeringEvent(java.io.File, E);
    Code:
       0: aload_0
       1: getfield      #118                // Field timeBasedFileNamingAndTriggeringPolicy:Lch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy;
       4: aload_1
       5: aload_2
       6: invokeinterface #266,  3          // InterfaceMethod ch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy.isTriggeringEvent:(Ljava/io/File;Ljava/lang/Object;)Z
      11: ireturn

  public int getMaxHistory();
    Code:
       0: aload_0
       1: getfield      #18                 // Field maxHistory:I
       4: ireturn

  public void setMaxHistory(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #18                 // Field maxHistory:I
       5: return

  public boolean isCleanHistoryOnStart();
    Code:
       0: aload_0
       1: getfield      #31                 // Field cleanHistoryOnStart:Z
       4: ireturn

  public void setCleanHistoryOnStart(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #31                 // Field cleanHistoryOnStart:Z
       5: return

  public java.lang.String toString();
    Code:
       0: aload_0
       1: invokevirtual #270                // Method java/lang/Object.hashCode:()I
       4: invokedynamic #276,  0            // InvokeDynamic #5:makeConcatWithConstants:(I)Ljava/lang/String;
       9: areturn

  public void setTotalSizeCap(ch.qos.logback.core.util.FileSize);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #279                // Method ch/qos/logback/core/util/FileSize.toString:()Ljava/lang/String;
       5: invokedynamic #282,  0            // InvokeDynamic #6:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;
      10: invokevirtual #104                // Method addInfo:(Ljava/lang/String;)V
      13: aload_0
      14: aload_1
      15: putfield      #27                 // Field totalSizeCap:Lch/qos/logback/core/util/FileSize;
      18: return
}
