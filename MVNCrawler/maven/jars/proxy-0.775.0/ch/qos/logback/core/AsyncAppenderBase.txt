Compiled from "AsyncAppenderBase.java"
public class ch.qos.logback.core.AsyncAppenderBase<E> extends ch.qos.logback.core.UnsynchronizedAppenderBase<E> implements ch.qos.logback.core.spi.AppenderAttachable<E> {
  ch.qos.logback.core.spi.AppenderAttachableImpl<E> aai;

  java.util.concurrent.BlockingQueue<E> blockingQueue;

  public static final int DEFAULT_QUEUE_SIZE;

  int queueSize;

  int appenderCount;

  static final int UNDEFINED;

  int discardingThreshold;

  boolean neverBlock;

  ch.qos.logback.core.AsyncAppenderBase<E>.Worker worker;

  public static final int DEFAULT_MAX_FLUSH_TIME;

  int maxFlushTime;

  public ch.qos.logback.core.AsyncAppenderBase();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method ch/qos/logback/core/UnsynchronizedAppenderBase."<init>":()V
       4: aload_0
       5: new           #7                  // class ch/qos/logback/core/spi/AppenderAttachableImpl
       8: dup
       9: invokespecial #9                  // Method ch/qos/logback/core/spi/AppenderAttachableImpl."<init>":()V
      12: putfield      #10                 // Field aai:Lch/qos/logback/core/spi/AppenderAttachableImpl;
      15: aload_0
      16: sipush        256
      19: putfield      #16                 // Field queueSize:I
      22: aload_0
      23: iconst_0
      24: putfield      #20                 // Field appenderCount:I
      27: aload_0
      28: iconst_m1
      29: putfield      #23                 // Field discardingThreshold:I
      32: aload_0
      33: iconst_0
      34: putfield      #26                 // Field neverBlock:Z
      37: aload_0
      38: new           #30                 // class ch/qos/logback/core/AsyncAppenderBase$Worker
      41: dup
      42: aload_0
      43: invokespecial #32                 // Method ch/qos/logback/core/AsyncAppenderBase$Worker."<init>":(Lch/qos/logback/core/AsyncAppenderBase;)V
      46: putfield      #35                 // Field worker:Lch/qos/logback/core/AsyncAppenderBase$Worker;
      49: aload_0
      50: sipush        1000
      53: putfield      #39                 // Field maxFlushTime:I
      56: return

  protected boolean isDiscardable(E);
    Code:
       0: iconst_0
       1: ireturn

  protected void preprocess(E);
    Code:
       0: return

  public void start();
    Code:
       0: aload_0
       1: invokevirtual #42                 // Method isStarted:()Z
       4: ifeq          8
       7: return
       8: aload_0
       9: getfield      #20                 // Field appenderCount:I
      12: ifne          22
      15: aload_0
      16: ldc           #46                 // String No attached appenders found.
      18: invokevirtual #48                 // Method addError:(Ljava/lang/String;)V
      21: return
      22: aload_0
      23: getfield      #16                 // Field queueSize:I
      26: iconst_1
      27: if_icmpge     44
      30: aload_0
      31: aload_0
      32: getfield      #16                 // Field queueSize:I
      35: invokedynamic #52,  0             // InvokeDynamic #0:makeConcatWithConstants:(I)Ljava/lang/String;
      40: invokevirtual #48                 // Method addError:(Ljava/lang/String;)V
      43: return
      44: aload_0
      45: new           #56                 // class java/util/concurrent/ArrayBlockingQueue
      48: dup
      49: aload_0
      50: getfield      #16                 // Field queueSize:I
      53: invokespecial #58                 // Method java/util/concurrent/ArrayBlockingQueue."<init>":(I)V
      56: putfield      #61                 // Field blockingQueue:Ljava/util/concurrent/BlockingQueue;
      59: aload_0
      60: getfield      #23                 // Field discardingThreshold:I
      63: iconst_m1
      64: if_icmpne     77
      67: aload_0
      68: aload_0
      69: getfield      #16                 // Field queueSize:I
      72: iconst_5
      73: idiv
      74: putfield      #23                 // Field discardingThreshold:I
      77: aload_0
      78: aload_0
      79: getfield      #23                 // Field discardingThreshold:I
      82: invokedynamic #65,  0             // InvokeDynamic #1:makeConcatWithConstants:(I)Ljava/lang/String;
      87: invokevirtual #66                 // Method addInfo:(Ljava/lang/String;)V
      90: aload_0
      91: getfield      #35                 // Field worker:Lch/qos/logback/core/AsyncAppenderBase$Worker;
      94: iconst_1
      95: invokevirtual #69                 // Method ch/qos/logback/core/AsyncAppenderBase$Worker.setDaemon:(Z)V
      98: aload_0
      99: getfield      #35                 // Field worker:Lch/qos/logback/core/AsyncAppenderBase$Worker;
     102: aload_0
     103: invokevirtual #73                 // Method getName:()Ljava/lang/String;
     106: invokedynamic #77,  0             // InvokeDynamic #2:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;
     111: invokevirtual #80                 // Method ch/qos/logback/core/AsyncAppenderBase$Worker.setName:(Ljava/lang/String;)V
     114: aload_0
     115: invokespecial #83                 // Method ch/qos/logback/core/UnsynchronizedAppenderBase.start:()V
     118: aload_0
     119: getfield      #35                 // Field worker:Lch/qos/logback/core/AsyncAppenderBase$Worker;
     122: invokevirtual #86                 // Method ch/qos/logback/core/AsyncAppenderBase$Worker.start:()V
     125: return

  public void stop();
    Code:
       0: aload_0
       1: invokevirtual #42                 // Method isStarted:()Z
       4: ifne          8
       7: return
       8: aload_0
       9: invokespecial #87                 // Method ch/qos/logback/core/UnsynchronizedAppenderBase.stop:()V
      12: aload_0
      13: getfield      #35                 // Field worker:Lch/qos/logback/core/AsyncAppenderBase$Worker;
      16: invokevirtual #90                 // Method ch/qos/logback/core/AsyncAppenderBase$Worker.interrupt:()V
      19: new           #93                 // class ch/qos/logback/core/util/InterruptUtil
      22: dup
      23: aload_0
      24: getfield      #95                 // Field context:Lch/qos/logback/core/Context;
      27: invokespecial #99                 // Method ch/qos/logback/core/util/InterruptUtil."<init>":(Lch/qos/logback/core/Context;)V
      30: astore_1
      31: aload_1
      32: invokevirtual #102                // Method ch/qos/logback/core/util/InterruptUtil.maskInterruptFlag:()V
      35: aload_0
      36: getfield      #35                 // Field worker:Lch/qos/logback/core/AsyncAppenderBase$Worker;
      39: aload_0
      40: getfield      #39                 // Field maxFlushTime:I
      43: i2l
      44: invokevirtual #105                // Method ch/qos/logback/core/AsyncAppenderBase$Worker.join:(J)V
      47: aload_0
      48: getfield      #35                 // Field worker:Lch/qos/logback/core/AsyncAppenderBase$Worker;
      51: invokevirtual #109                // Method ch/qos/logback/core/AsyncAppenderBase$Worker.isAlive:()Z
      54: ifeq          82
      57: aload_0
      58: aload_0
      59: getfield      #39                 // Field maxFlushTime:I
      62: aload_0
      63: getfield      #61                 // Field blockingQueue:Ljava/util/concurrent/BlockingQueue;
      66: invokeinterface #112,  1          // InterfaceMethod java/util/concurrent/BlockingQueue.size:()I
      71: invokedynamic #118,  0            // InvokeDynamic #3:makeConcatWithConstants:(II)Ljava/lang/String;
      76: invokevirtual #121                // Method addWarn:(Ljava/lang/String;)V
      79: goto          88
      82: aload_0
      83: ldc           #124                // String Queue flush finished successfully within timeout.
      85: invokevirtual #66                 // Method addInfo:(Ljava/lang/String;)V
      88: aload_1
      89: invokevirtual #126                // Method ch/qos/logback/core/util/InterruptUtil.unmaskInterruptFlag:()V
      92: goto          133
      95: astore_2
      96: aload_0
      97: getfield      #61                 // Field blockingQueue:Ljava/util/concurrent/BlockingQueue;
     100: invokeinterface #112,  1          // InterfaceMethod java/util/concurrent/BlockingQueue.size:()I
     105: istore_3
     106: aload_0
     107: iload_3
     108: invokedynamic #131,  0            // InvokeDynamic #4:makeConcatWithConstants:(I)Ljava/lang/String;
     113: aload_2
     114: invokevirtual #132                // Method addError:(Ljava/lang/String;Ljava/lang/Throwable;)V
     117: aload_1
     118: invokevirtual #126                // Method ch/qos/logback/core/util/InterruptUtil.unmaskInterruptFlag:()V
     121: goto          133
     124: astore        4
     126: aload_1
     127: invokevirtual #126                // Method ch/qos/logback/core/util/InterruptUtil.unmaskInterruptFlag:()V
     130: aload         4
     132: athrow
     133: return
    Exception table:
       from    to  target type
          31    88    95   Class java/lang/InterruptedException
          31    88   124   any
          95   117   124   any
         124   126   124   any

  protected void append(E);
    Code:
       0: aload_0
       1: invokevirtual #135                // Method isQueueBelowDiscardingThreshold:()Z
       4: ifeq          16
       7: aload_0
       8: aload_1
       9: invokevirtual #138                // Method isDiscardable:(Ljava/lang/Object;)Z
      12: ifeq          16
      15: return
      16: aload_0
      17: aload_1
      18: invokevirtual #142                // Method preprocess:(Ljava/lang/Object;)V
      21: aload_0
      22: aload_1
      23: invokevirtual #146                // Method put:(Ljava/lang/Object;)V
      26: return

  private boolean isQueueBelowDiscardingThreshold();
    Code:
       0: aload_0
       1: getfield      #61                 // Field blockingQueue:Ljava/util/concurrent/BlockingQueue;
       4: invokeinterface #149,  1          // InterfaceMethod java/util/concurrent/BlockingQueue.remainingCapacity:()I
       9: aload_0
      10: getfield      #23                 // Field discardingThreshold:I
      13: if_icmpge     20
      16: iconst_1
      17: goto          21
      20: iconst_0
      21: ireturn

  private void put(E);
    Code:
       0: aload_0
       1: getfield      #26                 // Field neverBlock:Z
       4: ifeq          21
       7: aload_0
       8: getfield      #61                 // Field blockingQueue:Ljava/util/concurrent/BlockingQueue;
      11: aload_1
      12: invokeinterface #152,  2          // InterfaceMethod java/util/concurrent/BlockingQueue.offer:(Ljava/lang/Object;)Z
      17: pop
      18: goto          26
      21: aload_0
      22: aload_1
      23: invokevirtual #155                // Method putUninterruptibly:(Ljava/lang/Object;)V
      26: return

  private void putUninterruptibly(E);
    Code:
       0: iconst_0
       1: istore_2
       2: aload_0
       3: getfield      #61                 // Field blockingQueue:Ljava/util/concurrent/BlockingQueue;
       6: aload_1
       7: invokeinterface #158,  2          // InterfaceMethod java/util/concurrent/BlockingQueue.put:(Ljava/lang/Object;)V
      12: goto          21
      15: astore_3
      16: iconst_1
      17: istore_2
      18: goto          2
      21: iload_2
      22: ifeq          49
      25: invokestatic  #159                // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      28: invokevirtual #165                // Method java/lang/Thread.interrupt:()V
      31: goto          49
      34: astore        4
      36: iload_2
      37: ifeq          46
      40: invokestatic  #159                // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      43: invokevirtual #165                // Method java/lang/Thread.interrupt:()V
      46: aload         4
      48: athrow
      49: return
    Exception table:
       from    to  target type
           2    12    15   Class java/lang/InterruptedException
           2    21    34   any
          34    36    34   any

  public int getQueueSize();
    Code:
       0: aload_0
       1: getfield      #16                 // Field queueSize:I
       4: ireturn

  public void setQueueSize(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #16                 // Field queueSize:I
       5: return

  public int getDiscardingThreshold();
    Code:
       0: aload_0
       1: getfield      #23                 // Field discardingThreshold:I
       4: ireturn

  public void setDiscardingThreshold(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #23                 // Field discardingThreshold:I
       5: return

  public int getMaxFlushTime();
    Code:
       0: aload_0
       1: getfield      #39                 // Field maxFlushTime:I
       4: ireturn

  public void setMaxFlushTime(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #39                 // Field maxFlushTime:I
       5: return

  public int getNumberOfElementsInQueue();
    Code:
       0: aload_0
       1: getfield      #61                 // Field blockingQueue:Ljava/util/concurrent/BlockingQueue;
       4: invokeinterface #112,  1          // InterfaceMethod java/util/concurrent/BlockingQueue.size:()I
       9: ireturn

  public void setNeverBlock(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #26                 // Field neverBlock:Z
       5: return

  public boolean isNeverBlock();
    Code:
       0: aload_0
       1: getfield      #26                 // Field neverBlock:Z
       4: ireturn

  public int getRemainingCapacity();
    Code:
       0: aload_0
       1: getfield      #61                 // Field blockingQueue:Ljava/util/concurrent/BlockingQueue;
       4: invokeinterface #149,  1          // InterfaceMethod java/util/concurrent/BlockingQueue.remainingCapacity:()I
       9: ireturn

  public void addAppender(ch.qos.logback.core.Appender<E>);
    Code:
       0: aload_0
       1: getfield      #20                 // Field appenderCount:I
       4: ifne          43
       7: aload_0
       8: dup
       9: getfield      #20                 // Field appenderCount:I
      12: iconst_1
      13: iadd
      14: putfield      #20                 // Field appenderCount:I
      17: aload_0
      18: aload_1
      19: invokeinterface #166,  1          // InterfaceMethod ch/qos/logback/core/Appender.getName:()Ljava/lang/String;
      24: invokedynamic #169,  0            // InvokeDynamic #5:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;
      29: invokevirtual #66                 // Method addInfo:(Ljava/lang/String;)V
      32: aload_0
      33: getfield      #10                 // Field aai:Lch/qos/logback/core/spi/AppenderAttachableImpl;
      36: aload_1
      37: invokevirtual #170                // Method ch/qos/logback/core/spi/AppenderAttachableImpl.addAppender:(Lch/qos/logback/core/Appender;)V
      40: goto          64
      43: aload_0
      44: ldc           #174                // String One and only one appender may be attached to AsyncAppender.
      46: invokevirtual #121                // Method addWarn:(Ljava/lang/String;)V
      49: aload_0
      50: aload_1
      51: invokeinterface #166,  1          // InterfaceMethod ch/qos/logback/core/Appender.getName:()Ljava/lang/String;
      56: invokedynamic #176,  0            // InvokeDynamic #6:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;
      61: invokevirtual #121                // Method addWarn:(Ljava/lang/String;)V
      64: return

  public java.util.Iterator<ch.qos.logback.core.Appender<E>> iteratorForAppenders();
    Code:
       0: aload_0
       1: getfield      #10                 // Field aai:Lch/qos/logback/core/spi/AppenderAttachableImpl;
       4: invokevirtual #177                // Method ch/qos/logback/core/spi/AppenderAttachableImpl.iteratorForAppenders:()Ljava/util/Iterator;
       7: areturn

  public ch.qos.logback.core.Appender<E> getAppender(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #10                 // Field aai:Lch/qos/logback/core/spi/AppenderAttachableImpl;
       4: aload_1
       5: invokevirtual #181                // Method ch/qos/logback/core/spi/AppenderAttachableImpl.getAppender:(Ljava/lang/String;)Lch/qos/logback/core/Appender;
       8: areturn

  public boolean isAttached(ch.qos.logback.core.Appender<E>);
    Code:
       0: aload_0
       1: getfield      #10                 // Field aai:Lch/qos/logback/core/spi/AppenderAttachableImpl;
       4: aload_1
       5: invokevirtual #185                // Method ch/qos/logback/core/spi/AppenderAttachableImpl.isAttached:(Lch/qos/logback/core/Appender;)Z
       8: ireturn

  public void detachAndStopAllAppenders();
    Code:
       0: aload_0
       1: getfield      #10                 // Field aai:Lch/qos/logback/core/spi/AppenderAttachableImpl;
       4: invokevirtual #189                // Method ch/qos/logback/core/spi/AppenderAttachableImpl.detachAndStopAllAppenders:()V
       7: return

  public boolean detachAppender(ch.qos.logback.core.Appender<E>);
    Code:
       0: aload_0
       1: getfield      #10                 // Field aai:Lch/qos/logback/core/spi/AppenderAttachableImpl;
       4: aload_1
       5: invokevirtual #192                // Method ch/qos/logback/core/spi/AppenderAttachableImpl.detachAppender:(Lch/qos/logback/core/Appender;)Z
       8: ireturn

  public boolean detachAppender(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #10                 // Field aai:Lch/qos/logback/core/spi/AppenderAttachableImpl;
       4: aload_1
       5: invokevirtual #195                // Method ch/qos/logback/core/spi/AppenderAttachableImpl.detachAppender:(Ljava/lang/String;)Z
       8: ireturn
}
