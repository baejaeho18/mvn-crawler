Compiled from "TimeBasedFileNamingAndTriggeringPolicyBase.java"
public abstract class ch.qos.logback.core.rolling.TimeBasedFileNamingAndTriggeringPolicyBase<E> extends ch.qos.logback.core.spi.ContextAwareBase implements ch.qos.logback.core.rolling.TimeBasedFileNamingAndTriggeringPolicy<E> {
  private static java.lang.String COLLIDING_DATE_FORMAT_URL;

  protected ch.qos.logback.core.rolling.TimeBasedRollingPolicy<E> tbrp;

  protected ch.qos.logback.core.rolling.helper.ArchiveRemover archiveRemover;

  protected java.lang.String elapsedPeriodsFileName;

  protected ch.qos.logback.core.rolling.helper.RollingCalendar rc;

  protected long artificialCurrentTime;

  protected java.util.concurrent.atomic.AtomicLong atomicNextCheck;

  protected java.time.Instant dateInCurrentPeriod;

  protected boolean started;

  protected boolean errorFree;

  public ch.qos.logback.core.rolling.TimeBasedFileNamingAndTriggeringPolicyBase();
    Code:
       0: aload_0
       1: invokespecial #3                  // Method ch/qos/logback/core/spi/ContextAwareBase."<init>":()V
       4: aload_0
       5: aconst_null
       6: putfield      #9                  // Field archiveRemover:Lch/qos/logback/core/rolling/helper/ArchiveRemover;
       9: aload_0
      10: ldc2_w        #15                 // long -1l
      13: putfield      #17                 // Field artificialCurrentTime:J
      16: aload_0
      17: new           #21                 // class java/util/concurrent/atomic/AtomicLong
      20: dup
      21: lconst_0
      22: invokespecial #23                 // Method java/util/concurrent/atomic/AtomicLong."<init>":(J)V
      25: putfield      #26                 // Field atomicNextCheck:Ljava/util/concurrent/atomic/AtomicLong;
      28: aload_0
      29: aconst_null
      30: putfield      #30                 // Field dateInCurrentPeriod:Ljava/time/Instant;
      33: aload_0
      34: iconst_0
      35: putfield      #34                 // Field started:Z
      38: aload_0
      39: iconst_1
      40: putfield      #38                 // Field errorFree:Z
      43: return

  public boolean isStarted();
    Code:
       0: aload_0
       1: getfield      #34                 // Field started:Z
       4: ireturn

  public void start();
    Code:
       0: aload_0
       1: getfield      #41                 // Field tbrp:Lch/qos/logback/core/rolling/TimeBasedRollingPolicy;
       4: getfield      #45                 // Field ch/qos/logback/core/rolling/TimeBasedRollingPolicy.fileNamePattern:Lch/qos/logback/core/rolling/helper/FileNamePattern;
       7: invokevirtual #51                 // Method ch/qos/logback/core/rolling/helper/FileNamePattern.getPrimaryDateTokenConverter:()Lch/qos/logback/core/rolling/helper/DateTokenConverter;
      10: astore_1
      11: aload_1
      12: ifnonnull     38
      15: new           #57                 // class java/lang/IllegalStateException
      18: dup
      19: aload_0
      20: getfield      #41                 // Field tbrp:Lch/qos/logback/core/rolling/TimeBasedRollingPolicy;
      23: getfield      #45                 // Field ch/qos/logback/core/rolling/TimeBasedRollingPolicy.fileNamePattern:Lch/qos/logback/core/rolling/helper/FileNamePattern;
      26: invokevirtual #59                 // Method ch/qos/logback/core/rolling/helper/FileNamePattern.getPattern:()Ljava/lang/String;
      29: invokedynamic #63,  0             // InvokeDynamic #0:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;
      34: invokespecial #67                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      37: athrow
      38: aload_1
      39: invokevirtual #70                 // Method ch/qos/logback/core/rolling/helper/DateTokenConverter.getZoneId:()Ljava/time/ZoneId;
      42: ifnull        75
      45: aload_1
      46: invokevirtual #70                 // Method ch/qos/logback/core/rolling/helper/DateTokenConverter.getZoneId:()Ljava/time/ZoneId;
      49: invokestatic  #76                 // Method java/util/TimeZone.getTimeZone:(Ljava/time/ZoneId;)Ljava/util/TimeZone;
      52: astore_2
      53: aload_0
      54: new           #82                 // class ch/qos/logback/core/rolling/helper/RollingCalendar
      57: dup
      58: aload_1
      59: invokevirtual #84                 // Method ch/qos/logback/core/rolling/helper/DateTokenConverter.getDatePattern:()Ljava/lang/String;
      62: aload_2
      63: invokestatic  #87                 // Method java/util/Locale.getDefault:()Ljava/util/Locale;
      66: invokespecial #93                 // Method ch/qos/logback/core/rolling/helper/RollingCalendar."<init>":(Ljava/lang/String;Ljava/util/TimeZone;Ljava/util/Locale;)V
      69: putfield      #96                 // Field rc:Lch/qos/logback/core/rolling/helper/RollingCalendar;
      72: goto          90
      75: aload_0
      76: new           #82                 // class ch/qos/logback/core/rolling/helper/RollingCalendar
      79: dup
      80: aload_1
      81: invokevirtual #84                 // Method ch/qos/logback/core/rolling/helper/DateTokenConverter.getDatePattern:()Ljava/lang/String;
      84: invokespecial #100                // Method ch/qos/logback/core/rolling/helper/RollingCalendar."<init>":(Ljava/lang/String;)V
      87: putfield      #96                 // Field rc:Lch/qos/logback/core/rolling/helper/RollingCalendar;
      90: aload_0
      91: aload_1
      92: invokevirtual #84                 // Method ch/qos/logback/core/rolling/helper/DateTokenConverter.getDatePattern:()Ljava/lang/String;
      95: aload_0
      96: getfield      #41                 // Field tbrp:Lch/qos/logback/core/rolling/TimeBasedRollingPolicy;
      99: getfield      #45                 // Field ch/qos/logback/core/rolling/TimeBasedRollingPolicy.fileNamePattern:Lch/qos/logback/core/rolling/helper/FileNamePattern;
     102: invokevirtual #59                 // Method ch/qos/logback/core/rolling/helper/FileNamePattern.getPattern:()Ljava/lang/String;
     105: invokedynamic #101,  0            // InvokeDynamic #1:makeConcatWithConstants:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
     110: invokevirtual #104                // Method addInfo:(Ljava/lang/String;)V
     113: aload_0
     114: getfield      #96                 // Field rc:Lch/qos/logback/core/rolling/helper/RollingCalendar;
     117: aload_0
     118: invokevirtual #107                // Method ch/qos/logback/core/rolling/helper/RollingCalendar.printPeriodicity:(Lch/qos/logback/core/spi/ContextAwareBase;)V
     121: aload_0
     122: getfield      #96                 // Field rc:Lch/qos/logback/core/rolling/helper/RollingCalendar;
     125: invokevirtual #111                // Method ch/qos/logback/core/rolling/helper/RollingCalendar.isCollisionFree:()Z
     128: ifne          154
     131: aload_0
     132: ldc           #115                // String The date format in FileNamePattern will result in collisions in the names of archived log files.
     134: invokevirtual #117                // Method addError:(Ljava/lang/String;)V
     137: aload_0
     138: getstatic     #120                // Field COLLIDING_DATE_FORMAT_URL:Ljava/lang/String;
     141: invokedynamic #124,  0            // InvokeDynamic #2:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;
     146: invokevirtual #117                // Method addError:(Ljava/lang/String;)V
     149: aload_0
     150: invokevirtual #125                // Method withErrors:()V
     153: return
     154: aload_0
     155: invokevirtual #128                // Method getCurrentTime:()J
     158: lstore_2
     159: aload_0
     160: lload_2
     161: invokevirtual #132                // Method setDateInCurrentPeriod:(J)V
     164: aload_0
     165: getfield      #41                 // Field tbrp:Lch/qos/logback/core/rolling/TimeBasedRollingPolicy;
     168: invokevirtual #135                // Method ch/qos/logback/core/rolling/TimeBasedRollingPolicy.getParentsRawFileProperty:()Ljava/lang/String;
     171: ifnull        217
     174: new           #138                // class java/io/File
     177: dup
     178: aload_0
     179: getfield      #41                 // Field tbrp:Lch/qos/logback/core/rolling/TimeBasedRollingPolicy;
     182: invokevirtual #135                // Method ch/qos/logback/core/rolling/TimeBasedRollingPolicy.getParentsRawFileProperty:()Ljava/lang/String;
     185: invokespecial #140                // Method java/io/File."<init>":(Ljava/lang/String;)V
     188: astore        4
     190: aload         4
     192: invokevirtual #141                // Method java/io/File.exists:()Z
     195: ifeq          217
     198: aload         4
     200: invokevirtual #144                // Method java/io/File.canRead:()Z
     203: ifeq          217
     206: aload         4
     208: invokevirtual #147                // Method java/io/File.lastModified:()J
     211: lstore_2
     212: aload_0
     213: lload_2
     214: invokevirtual #132                // Method setDateInCurrentPeriod:(J)V
     217: aload_0
     218: aload_0
     219: getfield      #30                 // Field dateInCurrentPeriod:Ljava/time/Instant;
     222: invokestatic  #150                // Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;
     225: invokedynamic #156,  0            // InvokeDynamic #3:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;
     230: invokevirtual #104                // Method addInfo:(Ljava/lang/String;)V
     233: aload_0
     234: lload_2
     235: invokevirtual #157                // Method computeNextCheck:(J)J
     238: lstore        4
     240: aload_0
     241: getfield      #26                 // Field atomicNextCheck:Ljava/util/concurrent/atomic/AtomicLong;
     244: lload         4
     246: invokevirtual #161                // Method java/util/concurrent/atomic/AtomicLong.set:(J)V
     249: return

  public void stop();
    Code:
       0: aload_0
       1: iconst_0
       2: putfield      #34                 // Field started:Z
       5: return

  protected long computeNextCheck(long);
    Code:
       0: aload_0
       1: getfield      #96                 // Field rc:Lch/qos/logback/core/rolling/helper/RollingCalendar;
       4: lload_1
       5: invokestatic  #164                // Method java/time/Instant.ofEpochMilli:(J)Ljava/time/Instant;
       8: invokevirtual #170                // Method ch/qos/logback/core/rolling/helper/RollingCalendar.getNextTriggeringDate:(Ljava/time/Instant;)Ljava/time/Instant;
      11: invokevirtual #174                // Method java/time/Instant.toEpochMilli:()J
      14: lreturn

  public java.lang.String getElapsedPeriodsFileName();
    Code:
       0: aload_0
       1: getfield      #177                // Field elapsedPeriodsFileName:Ljava/lang/String;
       4: areturn

  public java.lang.String getCurrentPeriodsFileNameWithoutCompressionSuffix();
    Code:
       0: aload_0
       1: getfield      #41                 // Field tbrp:Lch/qos/logback/core/rolling/TimeBasedRollingPolicy;
       4: getfield      #180                // Field ch/qos/logback/core/rolling/TimeBasedRollingPolicy.fileNamePatternWithoutCompSuffix:Lch/qos/logback/core/rolling/helper/FileNamePattern;
       7: aload_0
       8: getfield      #30                 // Field dateInCurrentPeriod:Ljava/time/Instant;
      11: invokevirtual #183                // Method ch/qos/logback/core/rolling/helper/FileNamePattern.convert:(Ljava/lang/Object;)Ljava/lang/String;
      14: areturn

  protected void setDateInCurrentPeriod(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokestatic  #164                // Method java/time/Instant.ofEpochMilli:(J)Ljava/time/Instant;
       5: putfield      #30                 // Field dateInCurrentPeriod:Ljava/time/Instant;
       8: return

  public void setCurrentTime(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #17                 // Field artificialCurrentTime:J
       5: return

  public long getCurrentTime();
    Code:
       0: aload_0
       1: getfield      #17                 // Field artificialCurrentTime:J
       4: lconst_0
       5: lcmp
       6: iflt          14
       9: aload_0
      10: getfield      #17                 // Field artificialCurrentTime:J
      13: lreturn
      14: invokestatic  #186                // Method java/lang/System.currentTimeMillis:()J
      17: lreturn

  public void setTimeBasedRollingPolicy(ch.qos.logback.core.rolling.TimeBasedRollingPolicy<E>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #41                 // Field tbrp:Lch/qos/logback/core/rolling/TimeBasedRollingPolicy;
       5: return

  public ch.qos.logback.core.rolling.helper.ArchiveRemover getArchiveRemover();
    Code:
       0: aload_0
       1: getfield      #9                  // Field archiveRemover:Lch/qos/logback/core/rolling/helper/ArchiveRemover;
       4: areturn

  protected void withErrors();
    Code:
       0: aload_0
       1: iconst_0
       2: putfield      #38                 // Field errorFree:Z
       5: return

  protected boolean isErrorFree();
    Code:
       0: aload_0
       1: getfield      #38                 // Field errorFree:Z
       4: ireturn

  static {};
    Code:
       0: ldc           #191                // String http://logback.qos.ch/codes.html#rfa_collision_in_dateFormat
       2: putstatic     #120                // Field COLLIDING_DATE_FORMAT_URL:Ljava/lang/String;
       5: return
}
