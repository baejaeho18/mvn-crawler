Compiled from "LogbackMDCAdapter.java"
public class ch.qos.logback.classic.util.LogbackMDCAdapter implements org.slf4j.spi.MDCAdapter {
  final java.lang.ThreadLocal<java.util.Map<java.lang.String, java.lang.String>> readWriteThreadLocalMap;

  final java.lang.ThreadLocal<java.util.Map<java.lang.String, java.lang.String>> readOnlyThreadLocalMap;

  private final org.slf4j.helpers.ThreadLocalMapOfStacks threadLocalMapOfDeques;

  public ch.qos.logback.classic.util.LogbackMDCAdapter();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #7                  // class java/lang/ThreadLocal
       8: dup
       9: invokespecial #9                  // Method java/lang/ThreadLocal."<init>":()V
      12: putfield      #10                 // Field readWriteThreadLocalMap:Ljava/lang/ThreadLocal;
      15: aload_0
      16: new           #7                  // class java/lang/ThreadLocal
      19: dup
      20: invokespecial #9                  // Method java/lang/ThreadLocal."<init>":()V
      23: putfield      #16                 // Field readOnlyThreadLocalMap:Ljava/lang/ThreadLocal;
      26: aload_0
      27: new           #19                 // class org/slf4j/helpers/ThreadLocalMapOfStacks
      30: dup
      31: invokespecial #21                 // Method org/slf4j/helpers/ThreadLocalMapOfStacks."<init>":()V
      34: putfield      #22                 // Field threadLocalMapOfDeques:Lorg/slf4j/helpers/ThreadLocalMapOfStacks;
      37: return

  public void put(java.lang.String, java.lang.String) throws java.lang.IllegalArgumentException;
    Code:
       0: aload_1
       1: ifnonnull     14
       4: new           #26                 // class java/lang/IllegalArgumentException
       7: dup
       8: ldc           #28                 // String key cannot be null
      10: invokespecial #30                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: aload_0
      15: getfield      #10                 // Field readWriteThreadLocalMap:Ljava/lang/ThreadLocal;
      18: invokevirtual #33                 // Method java/lang/ThreadLocal.get:()Ljava/lang/Object;
      21: checkcast     #37                 // class java/util/Map
      24: astore_3
      25: aload_3
      26: ifnonnull     45
      29: new           #39                 // class java/util/HashMap
      32: dup
      33: invokespecial #41                 // Method java/util/HashMap."<init>":()V
      36: astore_3
      37: aload_0
      38: getfield      #10                 // Field readWriteThreadLocalMap:Ljava/lang/ThreadLocal;
      41: aload_3
      42: invokevirtual #42                 // Method java/lang/ThreadLocal.set:(Ljava/lang/Object;)V
      45: aload_3
      46: aload_1
      47: aload_2
      48: invokeinterface #46,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      53: pop
      54: aload_0
      55: invokevirtual #50                 // Method nullifyReadOnlyThreadLocalMap:()V
      58: return

  public java.lang.String get(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #10                 // Field readWriteThreadLocalMap:Ljava/lang/ThreadLocal;
       4: invokevirtual #33                 // Method java/lang/ThreadLocal.get:()Ljava/lang/Object;
       7: checkcast     #37                 // class java/util/Map
      10: astore_2
      11: aload_2
      12: ifnull        30
      15: aload_1
      16: ifnull        30
      19: aload_2
      20: aload_1
      21: invokeinterface #53,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      26: checkcast     #56                 // class java/lang/String
      29: areturn
      30: aconst_null
      31: areturn

  public void remove(java.lang.String);
    Code:
       0: aload_1
       1: ifnonnull     5
       4: return
       5: aload_0
       6: getfield      #10                 // Field readWriteThreadLocalMap:Ljava/lang/ThreadLocal;
       9: invokevirtual #33                 // Method java/lang/ThreadLocal.get:()Ljava/lang/Object;
      12: checkcast     #37                 // class java/util/Map
      15: astore_2
      16: aload_2
      17: ifnull        32
      20: aload_2
      21: aload_1
      22: invokeinterface #58,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      27: pop
      28: aload_0
      29: invokevirtual #50                 // Method nullifyReadOnlyThreadLocalMap:()V
      32: return

  private void nullifyReadOnlyThreadLocalMap();
    Code:
       0: aload_0
       1: getfield      #16                 // Field readOnlyThreadLocalMap:Ljava/lang/ThreadLocal;
       4: aconst_null
       5: invokevirtual #42                 // Method java/lang/ThreadLocal.set:(Ljava/lang/Object;)V
       8: return

  public void clear();
    Code:
       0: aload_0
       1: getfield      #10                 // Field readWriteThreadLocalMap:Ljava/lang/ThreadLocal;
       4: aconst_null
       5: invokevirtual #42                 // Method java/lang/ThreadLocal.set:(Ljava/lang/Object;)V
       8: aload_0
       9: invokevirtual #50                 // Method nullifyReadOnlyThreadLocalMap:()V
      12: return

  public java.util.Map<java.lang.String, java.lang.String> getPropertyMap();
    Code:
       0: aload_0
       1: getfield      #16                 // Field readOnlyThreadLocalMap:Ljava/lang/ThreadLocal;
       4: invokevirtual #33                 // Method java/lang/ThreadLocal.get:()Ljava/lang/Object;
       7: checkcast     #37                 // class java/util/Map
      10: astore_1
      11: aload_1
      12: ifnonnull     52
      15: aload_0
      16: getfield      #10                 // Field readWriteThreadLocalMap:Ljava/lang/ThreadLocal;
      19: invokevirtual #33                 // Method java/lang/ThreadLocal.get:()Ljava/lang/Object;
      22: checkcast     #37                 // class java/util/Map
      25: astore_2
      26: aload_2
      27: ifnull        52
      30: new           #39                 // class java/util/HashMap
      33: dup
      34: aload_2
      35: invokespecial #61                 // Method java/util/HashMap."<init>":(Ljava/util/Map;)V
      38: astore_3
      39: aload_3
      40: invokestatic  #64                 // Method java/util/Collections.unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;
      43: astore_1
      44: aload_0
      45: getfield      #16                 // Field readOnlyThreadLocalMap:Ljava/lang/ThreadLocal;
      48: aload_1
      49: invokevirtual #42                 // Method java/lang/ThreadLocal.set:(Ljava/lang/Object;)V
      52: aload_1
      53: areturn

  public java.util.Map getCopyOfContextMap();
    Code:
       0: aload_0
       1: invokevirtual #70                 // Method getPropertyMap:()Ljava/util/Map;
       4: astore_1
       5: aload_1
       6: ifnonnull     11
       9: aconst_null
      10: areturn
      11: new           #39                 // class java/util/HashMap
      14: dup
      15: aload_1
      16: invokespecial #61                 // Method java/util/HashMap."<init>":(Ljava/util/Map;)V
      19: areturn

  public java.util.Set<java.lang.String> getKeys();
    Code:
       0: aload_0
       1: invokevirtual #70                 // Method getPropertyMap:()Ljava/util/Map;
       4: astore_1
       5: aload_1
       6: ifnull        16
       9: aload_1
      10: invokeinterface #74,  1           // InterfaceMethod java/util/Map.keySet:()Ljava/util/Set;
      15: areturn
      16: aconst_null
      17: areturn

  public void setContextMap(java.util.Map);
    Code:
       0: aload_1
       1: ifnull        22
       4: aload_0
       5: getfield      #10                 // Field readWriteThreadLocalMap:Ljava/lang/ThreadLocal;
       8: new           #39                 // class java/util/HashMap
      11: dup
      12: aload_1
      13: invokespecial #61                 // Method java/util/HashMap."<init>":(Ljava/util/Map;)V
      16: invokevirtual #42                 // Method java/lang/ThreadLocal.set:(Ljava/lang/Object;)V
      19: goto          30
      22: aload_0
      23: getfield      #10                 // Field readWriteThreadLocalMap:Ljava/lang/ThreadLocal;
      26: aconst_null
      27: invokevirtual #42                 // Method java/lang/ThreadLocal.set:(Ljava/lang/Object;)V
      30: aload_0
      31: invokevirtual #50                 // Method nullifyReadOnlyThreadLocalMap:()V
      34: return

  public void pushByKey(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #22                 // Field threadLocalMapOfDeques:Lorg/slf4j/helpers/ThreadLocalMapOfStacks;
       4: aload_1
       5: aload_2
       6: invokevirtual #78                 // Method org/slf4j/helpers/ThreadLocalMapOfStacks.pushByKey:(Ljava/lang/String;Ljava/lang/String;)V
       9: return

  public java.lang.String popByKey(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #22                 // Field threadLocalMapOfDeques:Lorg/slf4j/helpers/ThreadLocalMapOfStacks;
       4: aload_1
       5: invokevirtual #82                 // Method org/slf4j/helpers/ThreadLocalMapOfStacks.popByKey:(Ljava/lang/String;)Ljava/lang/String;
       8: areturn

  public java.util.Deque<java.lang.String> getCopyOfDequeByKey(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #22                 // Field threadLocalMapOfDeques:Lorg/slf4j/helpers/ThreadLocalMapOfStacks;
       4: aload_1
       5: invokevirtual #86                 // Method org/slf4j/helpers/ThreadLocalMapOfStacks.getCopyOfDequeByKey:(Ljava/lang/String;)Ljava/util/Deque;
       8: areturn

  public void clearDequeByKey(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #22                 // Field threadLocalMapOfDeques:Lorg/slf4j/helpers/ThreadLocalMapOfStacks;
       4: aload_1
       5: invokevirtual #90                 // Method org/slf4j/helpers/ThreadLocalMapOfStacks.clearDequeByKey:(Ljava/lang/String;)V
       8: return
}
