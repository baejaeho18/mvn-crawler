Compiled from "TriFunction.java"
public interface org.apache.commons.lang3.function.TriFunction<T, U, V, R> {
  public abstract R apply(T, U, V);

  public default <W> org.apache.commons.lang3.function.TriFunction<T, U, V, W> andThen(java.util.function.Function<? super R, ? extends W>);
    Code:
       0: aload_1
       1: invokestatic  #1                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: aload_0
       6: aload_1
       7: invokedynamic #2,  0              // InvokeDynamic #0:apply:(Lorg/apache/commons/lang3/function/TriFunction;Ljava/util/function/Function;)Lorg/apache/commons/lang3/function/TriFunction;
      12: areturn

  private java.lang.Object lambda$andThen$0(java.util.function.Function, java.lang.Object, java.lang.Object, java.lang.Object);
    Code:
       0: aload_1
       1: aload_0
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokeinterface #3,  4            // InterfaceMethod apply:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      11: invokeinterface #4,  2            // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      16: areturn
}
