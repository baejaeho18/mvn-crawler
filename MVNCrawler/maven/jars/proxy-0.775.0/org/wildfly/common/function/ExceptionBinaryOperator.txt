Compiled from "ExceptionBinaryOperator.java"
public interface org.wildfly.common.function.ExceptionBinaryOperator<T, E extends java.lang.Exception> extends org.wildfly.common.function.ExceptionBiFunction<T, T, T, E> {
  public default org.wildfly.common.function.ExceptionBinaryOperator<T, E> andThen(org.wildfly.common.function.ExceptionUnaryOperator<T, ? extends E>);
    Code:
       0: ldc           #1                  // String after
       2: aload_1
       3: invokestatic  #2                  // Method org/wildfly/common/Assert.checkNotNullParam:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: aload_1
       9: invokedynamic #3,  0              // InvokeDynamic #0:apply:(Lorg/wildfly/common/function/ExceptionBinaryOperator;Lorg/wildfly/common/function/ExceptionUnaryOperator;)Lorg/wildfly/common/function/ExceptionBinaryOperator;
      14: areturn

  private java.lang.Object lambda$andThen$0(org.wildfly.common.function.ExceptionUnaryOperator, java.lang.Object, java.lang.Object) throws java.lang.Exception;
    Code:
       0: aload_1
       1: aload_0
       2: aload_2
       3: aload_3
       4: invokeinterface #4,  3            // InterfaceMethod apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       9: invokeinterface #5,  2            // InterfaceMethod org/wildfly/common/function/ExceptionUnaryOperator.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      14: areturn
}
