Compiled from "ImmutableBinaryValueImpl.java"
public class org.msgpack.value.impl.ImmutableBinaryValueImpl extends org.msgpack.value.impl.AbstractImmutableRawValue implements org.msgpack.value.ImmutableBinaryValue {
  public org.msgpack.value.impl.ImmutableBinaryValueImpl(byte[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method org/msgpack/value/impl/AbstractImmutableRawValue."<init>":([B)V
       5: return

  public org.msgpack.value.ValueType getValueType();
    Code:
       0: getstatic     #2                  // Field org/msgpack/value/ValueType.BINARY:Lorg/msgpack/value/ValueType;
       3: areturn

  public org.msgpack.value.ImmutableBinaryValue immutableValue();
    Code:
       0: aload_0
       1: areturn

  public org.msgpack.value.ImmutableBinaryValue asBinaryValue();
    Code:
       0: aload_0
       1: areturn

  public void writeTo(org.msgpack.core.MessagePacker) throws java.io.IOException;
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #3                  // Field data:[B
       5: arraylength
       6: invokevirtual #4                  // Method org/msgpack/core/MessagePacker.packBinaryHeader:(I)Lorg/msgpack/core/MessagePacker;
       9: pop
      10: aload_1
      11: aload_0
      12: getfield      #3                  // Field data:[B
      15: invokevirtual #5                  // Method org/msgpack/core/MessagePacker.writePayload:([B)Lorg/msgpack/core/MessagePacker;
      18: pop
      19: return

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: instanceof    #6                  // class org/msgpack/value/Value
      11: ifne          16
      14: iconst_0
      15: ireturn
      16: aload_1
      17: checkcast     #6                  // class org/msgpack/value/Value
      20: astore_2
      21: aload_2
      22: invokeinterface #7,  1            // InterfaceMethod org/msgpack/value/Value.isBinaryValue:()Z
      27: ifne          32
      30: iconst_0
      31: ireturn
      32: aload_2
      33: instanceof    #8                  // class org/msgpack/value/impl/ImmutableBinaryValueImpl
      36: ifeq          56
      39: aload_2
      40: checkcast     #8                  // class org/msgpack/value/impl/ImmutableBinaryValueImpl
      43: astore_3
      44: aload_0
      45: getfield      #3                  // Field data:[B
      48: aload_3
      49: getfield      #3                  // Field data:[B
      52: invokestatic  #9                  // Method java/util/Arrays.equals:([B[B)Z
      55: ireturn
      56: aload_0
      57: getfield      #3                  // Field data:[B
      60: aload_2
      61: invokeinterface #10,  1           // InterfaceMethod org/msgpack/value/Value.asBinaryValue:()Lorg/msgpack/value/BinaryValue;
      66: invokeinterface #11,  1           // InterfaceMethod org/msgpack/value/BinaryValue.asByteArray:()[B
      71: invokestatic  #9                  // Method java/util/Arrays.equals:([B[B)Z
      74: ireturn

  public int hashCode();
    Code:
       0: aload_0
       1: getfield      #3                  // Field data:[B
       4: invokestatic  #12                 // Method java/util/Arrays.hashCode:([B)I
       7: ireturn

  public org.msgpack.value.BinaryValue asBinaryValue();
    Code:
       0: aload_0
       1: invokevirtual #13                 // Method asBinaryValue:()Lorg/msgpack/value/ImmutableBinaryValue;
       4: areturn

  public org.msgpack.value.ImmutableValue immutableValue();
    Code:
       0: aload_0
       1: invokevirtual #14                 // Method immutableValue:()Lorg/msgpack/value/ImmutableBinaryValue;
       4: areturn
}
