Compiled from "MessageBufferU.java"
public class org.msgpack.core.buffer.MessageBufferU extends org.msgpack.core.buffer.MessageBuffer {
  private final java.nio.ByteBuffer wrap;

  static final boolean $assertionsDisabled;

  org.msgpack.core.buffer.MessageBufferU(byte[], int, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: invokespecial #1                  // Method org/msgpack/core/buffer/MessageBuffer."<init>":([BII)V
       7: aload_0
       8: aload_1
       9: iload_2
      10: iload_3
      11: invokestatic  #2                  // Method java/nio/ByteBuffer.wrap:([BII)Ljava/nio/ByteBuffer;
      14: invokevirtual #3                  // Method java/nio/ByteBuffer.slice:()Ljava/nio/ByteBuffer;
      17: putfield      #4                  // Field wrap:Ljava/nio/ByteBuffer;
      20: return

  org.msgpack.core.buffer.MessageBufferU(java.nio.ByteBuffer);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #5                  // Method org/msgpack/core/buffer/MessageBuffer."<init>":(Ljava/nio/ByteBuffer;)V
       5: aload_0
       6: aload_1
       7: invokevirtual #3                  // Method java/nio/ByteBuffer.slice:()Ljava/nio/ByteBuffer;
      10: putfield      #4                  // Field wrap:Ljava/nio/ByteBuffer;
      13: return

  private org.msgpack.core.buffer.MessageBufferU(java.lang.Object, long, int, java.nio.ByteBuffer);
    Code:
       0: aload_0
       1: aload_1
       2: lload_2
       3: iload         4
       5: invokespecial #6                  // Method org/msgpack/core/buffer/MessageBuffer."<init>":(Ljava/lang/Object;JI)V
       8: aload_0
       9: aload         5
      11: putfield      #4                  // Field wrap:Ljava/nio/ByteBuffer;
      14: return

  public org.msgpack.core.buffer.MessageBufferU slice(int, int);
    Code:
       0: iload_1
       1: ifne          14
       4: iload_2
       5: aload_0
       6: invokevirtual #7                  // Method size:()I
       9: if_icmpne     14
      12: aload_0
      13: areturn
      14: iload_1
      15: iload_2
      16: iadd
      17: aload_0
      18: invokevirtual #7                  // Method size:()I
      21: if_icmpgt     28
      24: iconst_1
      25: goto          29
      28: iconst_0
      29: invokestatic  #8                  // Method org/msgpack/core/Preconditions.checkArgument:(Z)V
      32: aload_0
      33: getfield      #4                  // Field wrap:Ljava/nio/ByteBuffer;
      36: iload_1
      37: invokevirtual #9                  // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      40: pop
      41: aload_0
      42: getfield      #4                  // Field wrap:Ljava/nio/ByteBuffer;
      45: iload_1
      46: iload_2
      47: iadd
      48: invokevirtual #10                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;
      51: pop
      52: new           #11                 // class org/msgpack/core/buffer/MessageBufferU
      55: dup
      56: aload_0
      57: getfield      #12                 // Field base:Ljava/lang/Object;
      60: aload_0
      61: getfield      #13                 // Field address:J
      64: iload_1
      65: i2l
      66: ladd
      67: iload_2
      68: aload_0
      69: getfield      #4                  // Field wrap:Ljava/nio/ByteBuffer;
      72: invokevirtual #3                  // Method java/nio/ByteBuffer.slice:()Ljava/nio/ByteBuffer;
      75: invokespecial #14                 // Method "<init>":(Ljava/lang/Object;JILjava/nio/ByteBuffer;)V
      78: astore_3
      79: aload_0
      80: invokespecial #15                 // Method resetBufferPosition:()V
      83: aload_3
      84: areturn
      85: astore        4
      87: aload_0
      88: invokespecial #15                 // Method resetBufferPosition:()V
      91: aload         4
      93: athrow
    Exception table:
       from    to  target type
          32    79    85   any
          85    87    85   any

  private void resetBufferPosition();
    Code:
       0: aload_0
       1: getfield      #4                  // Field wrap:Ljava/nio/ByteBuffer;
       4: iconst_0
       5: invokevirtual #9                  // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
       8: pop
       9: aload_0
      10: getfield      #4                  // Field wrap:Ljava/nio/ByteBuffer;
      13: aload_0
      14: getfield      #16                 // Field size:I
      17: invokevirtual #10                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;
      20: pop
      21: return

  public byte getByte(int);
    Code:
       0: aload_0
       1: getfield      #4                  // Field wrap:Ljava/nio/ByteBuffer;
       4: iload_1
       5: invokevirtual #17                 // Method java/nio/ByteBuffer.get:(I)B
       8: ireturn

  public boolean getBoolean(int);
    Code:
       0: aload_0
       1: getfield      #4                  // Field wrap:Ljava/nio/ByteBuffer;
       4: iload_1
       5: invokevirtual #17                 // Method java/nio/ByteBuffer.get:(I)B
       8: ifeq          15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: ireturn

  public short getShort(int);
    Code:
       0: aload_0
       1: getfield      #4                  // Field wrap:Ljava/nio/ByteBuffer;
       4: iload_1
       5: invokevirtual #18                 // Method java/nio/ByteBuffer.getShort:(I)S
       8: ireturn

  public int getInt(int);
    Code:
       0: aload_0
       1: getfield      #4                  // Field wrap:Ljava/nio/ByteBuffer;
       4: iload_1
       5: invokevirtual #19                 // Method java/nio/ByteBuffer.getInt:(I)I
       8: ireturn

  public float getFloat(int);
    Code:
       0: aload_0
       1: getfield      #4                  // Field wrap:Ljava/nio/ByteBuffer;
       4: iload_1
       5: invokevirtual #20                 // Method java/nio/ByteBuffer.getFloat:(I)F
       8: freturn

  public long getLong(int);
    Code:
       0: aload_0
       1: getfield      #4                  // Field wrap:Ljava/nio/ByteBuffer;
       4: iload_1
       5: invokevirtual #21                 // Method java/nio/ByteBuffer.getLong:(I)J
       8: lreturn

  public double getDouble(int);
    Code:
       0: aload_0
       1: getfield      #4                  // Field wrap:Ljava/nio/ByteBuffer;
       4: iload_1
       5: invokevirtual #22                 // Method java/nio/ByteBuffer.getDouble:(I)D
       8: dreturn

  public void getBytes(int, int, java.nio.ByteBuffer);
    Code:
       0: aload_0
       1: getfield      #4                  // Field wrap:Ljava/nio/ByteBuffer;
       4: iload_1
       5: invokevirtual #9                  // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
       8: pop
       9: aload_0
      10: getfield      #4                  // Field wrap:Ljava/nio/ByteBuffer;
      13: iload_1
      14: iload_2
      15: iadd
      16: invokevirtual #10                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;
      19: pop
      20: aload_3
      21: aload_0
      22: getfield      #4                  // Field wrap:Ljava/nio/ByteBuffer;
      25: invokevirtual #23                 // Method java/nio/ByteBuffer.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;
      28: pop
      29: aload_0
      30: invokespecial #15                 // Method resetBufferPosition:()V
      33: goto          45
      36: astore        4
      38: aload_0
      39: invokespecial #15                 // Method resetBufferPosition:()V
      42: aload         4
      44: athrow
      45: return
    Exception table:
       from    to  target type
           0    29    36   any
          36    38    36   any

  public void putByte(int, byte);
    Code:
       0: aload_0
       1: getfield      #4                  // Field wrap:Ljava/nio/ByteBuffer;
       4: iload_1
       5: iload_2
       6: invokevirtual #24                 // Method java/nio/ByteBuffer.put:(IB)Ljava/nio/ByteBuffer;
       9: pop
      10: return

  public void putBoolean(int, boolean);
    Code:
       0: aload_0
       1: getfield      #4                  // Field wrap:Ljava/nio/ByteBuffer;
       4: iload_1
       5: iload_2
       6: ifeq          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: invokevirtual #24                 // Method java/nio/ByteBuffer.put:(IB)Ljava/nio/ByteBuffer;
      17: pop
      18: return

  public void putShort(int, short);
    Code:
       0: aload_0
       1: getfield      #4                  // Field wrap:Ljava/nio/ByteBuffer;
       4: iload_1
       5: iload_2
       6: invokevirtual #25                 // Method java/nio/ByteBuffer.putShort:(IS)Ljava/nio/ByteBuffer;
       9: pop
      10: return

  public void putInt(int, int);
    Code:
       0: aload_0
       1: getfield      #4                  // Field wrap:Ljava/nio/ByteBuffer;
       4: iload_1
       5: iload_2
       6: invokevirtual #26                 // Method java/nio/ByteBuffer.putInt:(II)Ljava/nio/ByteBuffer;
       9: pop
      10: return

  public void putFloat(int, float);
    Code:
       0: aload_0
       1: getfield      #4                  // Field wrap:Ljava/nio/ByteBuffer;
       4: iload_1
       5: fload_2
       6: invokevirtual #27                 // Method java/nio/ByteBuffer.putFloat:(IF)Ljava/nio/ByteBuffer;
       9: pop
      10: return

  public void putLong(int, long);
    Code:
       0: aload_0
       1: getfield      #4                  // Field wrap:Ljava/nio/ByteBuffer;
       4: iload_1
       5: lload_2
       6: invokevirtual #28                 // Method java/nio/ByteBuffer.putLong:(IJ)Ljava/nio/ByteBuffer;
       9: pop
      10: return

  public void putDouble(int, double);
    Code:
       0: aload_0
       1: getfield      #4                  // Field wrap:Ljava/nio/ByteBuffer;
       4: iload_1
       5: dload_2
       6: invokevirtual #29                 // Method java/nio/ByteBuffer.putDouble:(ID)Ljava/nio/ByteBuffer;
       9: pop
      10: return

  public java.nio.ByteBuffer sliceAsByteBuffer(int, int);
    Code:
       0: aload_0
       1: getfield      #4                  // Field wrap:Ljava/nio/ByteBuffer;
       4: iload_1
       5: invokevirtual #9                  // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
       8: pop
       9: aload_0
      10: getfield      #4                  // Field wrap:Ljava/nio/ByteBuffer;
      13: iload_1
      14: iload_2
      15: iadd
      16: invokevirtual #10                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;
      19: pop
      20: aload_0
      21: getfield      #4                  // Field wrap:Ljava/nio/ByteBuffer;
      24: invokevirtual #3                  // Method java/nio/ByteBuffer.slice:()Ljava/nio/ByteBuffer;
      27: astore_3
      28: aload_0
      29: invokespecial #15                 // Method resetBufferPosition:()V
      32: aload_3
      33: areturn
      34: astore        4
      36: aload_0
      37: invokespecial #15                 // Method resetBufferPosition:()V
      40: aload         4
      42: athrow
    Exception table:
       from    to  target type
           0    28    34   any
          34    36    34   any

  public java.nio.ByteBuffer sliceAsByteBuffer();
    Code:
       0: aload_0
       1: iconst_0
       2: aload_0
       3: getfield      #16                 // Field size:I
       6: invokevirtual #30                 // Method sliceAsByteBuffer:(II)Ljava/nio/ByteBuffer;
       9: areturn

  public void getBytes(int, byte[], int, int);
    Code:
       0: aload_0
       1: getfield      #4                  // Field wrap:Ljava/nio/ByteBuffer;
       4: iload_1
       5: invokevirtual #9                  // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
       8: pop
       9: aload_0
      10: getfield      #4                  // Field wrap:Ljava/nio/ByteBuffer;
      13: aload_2
      14: iload_3
      15: iload         4
      17: invokevirtual #31                 // Method java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;
      20: pop
      21: aload_0
      22: invokespecial #15                 // Method resetBufferPosition:()V
      25: goto          37
      28: astore        5
      30: aload_0
      31: invokespecial #15                 // Method resetBufferPosition:()V
      34: aload         5
      36: athrow
      37: return
    Exception table:
       from    to  target type
           0    21    28   any
          28    30    28   any

  public void putByteBuffer(int, java.nio.ByteBuffer, int);
    Code:
       0: getstatic     #32                 // Field $assertionsDisabled:Z
       3: ifne          22
       6: iload_3
       7: aload_2
       8: invokevirtual #33                 // Method java/nio/ByteBuffer.remaining:()I
      11: if_icmple     22
      14: new           #34                 // class java/lang/AssertionError
      17: dup
      18: invokespecial #35                 // Method java/lang/AssertionError."<init>":()V
      21: athrow
      22: aload_2
      23: invokevirtual #36                 // Method java/nio/ByteBuffer.hasArray:()Z
      26: ifeq          62
      29: aload_0
      30: iload_1
      31: aload_2
      32: invokevirtual #37                 // Method java/nio/ByteBuffer.array:()[B
      35: aload_2
      36: invokevirtual #38                 // Method java/nio/ByteBuffer.position:()I
      39: aload_2
      40: invokevirtual #39                 // Method java/nio/ByteBuffer.arrayOffset:()I
      43: iadd
      44: iload_3
      45: invokevirtual #40                 // Method putBytes:(I[BII)V
      48: aload_2
      49: aload_2
      50: invokevirtual #38                 // Method java/nio/ByteBuffer.position:()I
      53: iload_3
      54: iadd
      55: invokevirtual #9                  // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      58: pop
      59: goto          119
      62: aload_2
      63: invokevirtual #41                 // Method java/nio/ByteBuffer.limit:()I
      66: istore        4
      68: aload_2
      69: aload_2
      70: invokevirtual #38                 // Method java/nio/ByteBuffer.position:()I
      73: iload_3
      74: iadd
      75: invokevirtual #10                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;
      78: pop
      79: aload_0
      80: getfield      #4                  // Field wrap:Ljava/nio/ByteBuffer;
      83: iload_1
      84: invokevirtual #9                  // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      87: pop
      88: aload_0
      89: getfield      #4                  // Field wrap:Ljava/nio/ByteBuffer;
      92: aload_2
      93: invokevirtual #23                 // Method java/nio/ByteBuffer.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;
      96: pop
      97: aload_2
      98: iload         4
     100: invokevirtual #10                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;
     103: pop
     104: goto          119
     107: astore        5
     109: aload_2
     110: iload         4
     112: invokevirtual #10                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;
     115: pop
     116: aload         5
     118: athrow
     119: return
    Exception table:
       from    to  target type
          68    97   107   any
         107   109   107   any

  public void putBytes(int, byte[], int, int);
    Code:
       0: aload_0
       1: getfield      #4                  // Field wrap:Ljava/nio/ByteBuffer;
       4: iload_1
       5: invokevirtual #9                  // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
       8: pop
       9: aload_0
      10: getfield      #4                  // Field wrap:Ljava/nio/ByteBuffer;
      13: aload_2
      14: iload_3
      15: iload         4
      17: invokevirtual #42                 // Method java/nio/ByteBuffer.put:([BII)Ljava/nio/ByteBuffer;
      20: pop
      21: aload_0
      22: invokespecial #15                 // Method resetBufferPosition:()V
      25: goto          37
      28: astore        5
      30: aload_0
      31: invokespecial #15                 // Method resetBufferPosition:()V
      34: aload         5
      36: athrow
      37: return
    Exception table:
       from    to  target type
           0    21    28   any
          28    30    28   any

  public void copyTo(int, org.msgpack.core.buffer.MessageBuffer, int, int);
    Code:
       0: aload_0
       1: getfield      #4                  // Field wrap:Ljava/nio/ByteBuffer;
       4: iload_1
       5: invokevirtual #9                  // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
       8: pop
       9: aload_2
      10: iload_3
      11: aload_0
      12: getfield      #4                  // Field wrap:Ljava/nio/ByteBuffer;
      15: iload         4
      17: invokevirtual #43                 // Method org/msgpack/core/buffer/MessageBuffer.putByteBuffer:(ILjava/nio/ByteBuffer;I)V
      20: aload_0
      21: invokespecial #15                 // Method resetBufferPosition:()V
      24: goto          36
      27: astore        5
      29: aload_0
      30: invokespecial #15                 // Method resetBufferPosition:()V
      33: aload         5
      35: athrow
      36: return
    Exception table:
       from    to  target type
           0    20    27   any
          27    29    27   any

  public void putMessageBuffer(int, org.msgpack.core.buffer.MessageBuffer, int, int);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: iload_3
       4: iload         4
       6: invokevirtual #44                 // Method org/msgpack/core/buffer/MessageBuffer.sliceAsByteBuffer:(II)Ljava/nio/ByteBuffer;
       9: iload         4
      11: invokevirtual #45                 // Method putByteBuffer:(ILjava/nio/ByteBuffer;I)V
      14: return

  public byte[] toByteArray();
    Code:
       0: aload_0
       1: invokevirtual #7                  // Method size:()I
       4: newarray       byte
       6: astore_1
       7: aload_0
       8: iconst_0
       9: aload_1
      10: iconst_0
      11: aload_1
      12: arraylength
      13: invokevirtual #46                 // Method getBytes:(I[BII)V
      16: aload_1
      17: areturn

  public boolean hasArray();
    Code:
       0: aload_0
       1: getfield      #4                  // Field wrap:Ljava/nio/ByteBuffer;
       4: invokevirtual #47                 // Method java/nio/ByteBuffer.isDirect:()Z
       7: ifne          14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  public byte[] array();
    Code:
       0: aload_0
       1: invokevirtual #48                 // Method hasArray:()Z
       4: ifeq          17
       7: aload_0
       8: getfield      #4                  // Field wrap:Ljava/nio/ByteBuffer;
      11: invokevirtual #37                 // Method java/nio/ByteBuffer.array:()[B
      14: goto          18
      17: aconst_null
      18: areturn

  public org.msgpack.core.buffer.MessageBuffer slice(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokevirtual #49                 // Method slice:(II)Lorg/msgpack/core/buffer/MessageBufferU;
       6: areturn

  static {};
    Code:
       0: ldc           #11                 // class org/msgpack/core/buffer/MessageBufferU
       2: invokevirtual #50                 // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #32                 // Field $assertionsDisabled:Z
      16: return
}
