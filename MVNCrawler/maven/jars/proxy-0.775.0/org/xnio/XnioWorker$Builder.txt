Compiled from "XnioWorker.java"
public class org.xnio.XnioWorker$Builder {
  private final org.xnio.Xnio xnio;

  private java.util.concurrent.ExecutorService externalExecutorService;

  private java.lang.Runnable terminationTask;

  private java.lang.String workerName;

  private int coreWorkerPoolSize;

  private int maxWorkerPoolSize;

  private java.lang.ThreadGroup threadGroup;

  private boolean daemon;

  private int workerKeepAlive;

  private int workerIoThreads;

  private long workerStackSize;

  private org.wildfly.common.net.CidrAddressTable<java.net.InetSocketAddress> bindAddressConfigurations;

  protected org.xnio.XnioWorker$Builder(org.xnio.Xnio);
    Code:
       0: aload_0
       1: invokespecial #35                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_4
       6: putfield      #37                 // Field coreWorkerPoolSize:I
       9: aload_0
      10: bipush        16
      12: putfield      #39                 // Field maxWorkerPoolSize:I
      15: aload_0
      16: ldc           #40                 // int 60000
      18: putfield      #42                 // Field workerKeepAlive:I
      21: aload_0
      22: iconst_1
      23: putfield      #44                 // Field workerIoThreads:I
      26: aload_0
      27: lconst_0
      28: putfield      #46                 // Field workerStackSize:J
      31: aload_0
      32: new           #48                 // class org/wildfly/common/net/CidrAddressTable
      35: dup
      36: invokespecial #49                 // Method org/wildfly/common/net/CidrAddressTable."<init>":()V
      39: putfield      #51                 // Field bindAddressConfigurations:Lorg/wildfly/common/net/CidrAddressTable;
      42: aload_0
      43: aload_1
      44: putfield      #53                 // Field xnio:Lorg/xnio/Xnio;
      47: return

  public org.xnio.Xnio getXnio();
    Code:
       0: aload_0
       1: getfield      #53                 // Field xnio:Lorg/xnio/Xnio;
       4: areturn

  public org.xnio.XnioWorker$Builder populateFromOptions(org.xnio.OptionMap);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #65                 // Field org/xnio/Options.WORKER_NAME:Lorg/xnio/Option;
       5: invokevirtual #71                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;)Ljava/lang/Object;
       8: checkcast     #73                 // class java/lang/String
      11: invokevirtual #77                 // Method setWorkerName:(Ljava/lang/String;)Lorg/xnio/XnioWorker$Builder;
      14: pop
      15: aload_0
      16: aload_1
      17: getstatic     #80                 // Field org/xnio/Options.WORKER_TASK_CORE_THREADS:Lorg/xnio/Option;
      20: aload_0
      21: getfield      #37                 // Field coreWorkerPoolSize:I
      24: invokevirtual #83                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;I)I
      27: invokevirtual #87                 // Method setCoreWorkerPoolSize:(I)Lorg/xnio/XnioWorker$Builder;
      30: pop
      31: aload_0
      32: aload_1
      33: getstatic     #90                 // Field org/xnio/Options.WORKER_TASK_MAX_THREADS:Lorg/xnio/Option;
      36: aload_0
      37: getfield      #39                 // Field maxWorkerPoolSize:I
      40: invokevirtual #83                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;I)I
      43: invokevirtual #93                 // Method setMaxWorkerPoolSize:(I)Lorg/xnio/XnioWorker$Builder;
      46: pop
      47: aload_0
      48: aload_1
      49: getstatic     #96                 // Field org/xnio/Options.THREAD_DAEMON:Lorg/xnio/Option;
      52: aload_0
      53: getfield      #98                 // Field daemon:Z
      56: invokevirtual #101                // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;Z)Z
      59: invokevirtual #105                // Method setDaemon:(Z)Lorg/xnio/XnioWorker$Builder;
      62: pop
      63: aload_0
      64: aload_1
      65: getstatic     #108                // Field org/xnio/Options.WORKER_TASK_KEEPALIVE:Lorg/xnio/Option;
      68: aload_0
      69: getfield      #42                 // Field workerKeepAlive:I
      72: invokevirtual #83                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;I)I
      75: invokevirtual #111                // Method setWorkerKeepAlive:(I)Lorg/xnio/XnioWorker$Builder;
      78: pop
      79: aload_1
      80: getstatic     #114                // Field org/xnio/Options.WORKER_IO_THREADS:Lorg/xnio/Option;
      83: invokevirtual #118                // Method org/xnio/OptionMap.contains:(Lorg/xnio/Option;)Z
      86: ifeq          105
      89: aload_0
      90: aload_1
      91: getstatic     #114                // Field org/xnio/Options.WORKER_IO_THREADS:Lorg/xnio/Option;
      94: iconst_1
      95: invokevirtual #83                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;I)I
      98: invokevirtual #121                // Method setWorkerIoThreads:(I)Lorg/xnio/XnioWorker$Builder;
     101: pop
     102: goto          149
     105: aload_1
     106: getstatic     #124                // Field org/xnio/Options.WORKER_READ_THREADS:Lorg/xnio/Option;
     109: invokevirtual #118                // Method org/xnio/OptionMap.contains:(Lorg/xnio/Option;)Z
     112: ifne          125
     115: aload_1
     116: getstatic     #127                // Field org/xnio/Options.WORKER_WRITE_THREADS:Lorg/xnio/Option;
     119: invokevirtual #118                // Method org/xnio/OptionMap.contains:(Lorg/xnio/Option;)Z
     122: ifeq          149
     125: aload_0
     126: aload_1
     127: getstatic     #124                // Field org/xnio/Options.WORKER_READ_THREADS:Lorg/xnio/Option;
     130: iconst_1
     131: invokevirtual #83                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;I)I
     134: aload_1
     135: getstatic     #127                // Field org/xnio/Options.WORKER_WRITE_THREADS:Lorg/xnio/Option;
     138: iconst_1
     139: invokevirtual #83                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;I)I
     142: invokestatic  #133                // Method java/lang/Math.max:(II)I
     145: invokevirtual #121                // Method setWorkerIoThreads:(I)Lorg/xnio/XnioWorker$Builder;
     148: pop
     149: aload_0
     150: aload_1
     151: getstatic     #136                // Field org/xnio/Options.STACK_SIZE:Lorg/xnio/Option;
     154: aload_0
     155: getfield      #46                 // Field workerStackSize:J
     158: invokevirtual #139                // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;J)J
     161: invokevirtual #143                // Method setWorkerStackSize:(J)Lorg/xnio/XnioWorker$Builder;
     164: pop
     165: aload_0
     166: areturn

  public org.xnio.XnioWorker$Builder addBindAddressConfiguration(org.wildfly.common.net.CidrAddress, java.net.InetAddress);
    Code:
       0: aload_0
       1: aload_1
       2: new           #149                // class java/net/InetSocketAddress
       5: dup
       6: aload_2
       7: iconst_0
       8: invokespecial #152                // Method java/net/InetSocketAddress."<init>":(Ljava/net/InetAddress;I)V
      11: invokevirtual #155                // Method addBindAddressConfiguration:(Lorg/wildfly/common/net/CidrAddress;Ljava/net/InetSocketAddress;)Lorg/xnio/XnioWorker$Builder;
      14: areturn

  public org.xnio.XnioWorker$Builder addBindAddressConfiguration(org.wildfly.common.net.CidrAddress, java.net.InetSocketAddress);
    Code:
       0: aload_1
       1: invokevirtual #165                // Method org/wildfly/common/net/CidrAddress.getNetworkAddress:()Ljava/net/InetAddress;
       4: invokevirtual #169                // Method java/lang/Object.getClass:()Ljava/lang/Class;
       7: astore_3
       8: aload_2
       9: invokevirtual #173                // Method java/net/InetSocketAddress.isUnresolved:()Z
      12: ifeq          25
      15: getstatic     #179                // Field org/xnio/_private/Messages.msg:Lorg/xnio/_private/Messages;
      18: aload_2
      19: invokeinterface #183,  2          // InterfaceMethod org/xnio/_private/Messages.addressUnresolved:(Ljava/net/InetSocketAddress;)Ljava/lang/IllegalArgumentException;
      24: athrow
      25: aload_3
      26: aload_2
      27: invokevirtual #188                // Method java/net/InetSocketAddress.getAddress:()Ljava/net/InetAddress;
      30: invokevirtual #169                // Method java/lang/Object.getClass:()Ljava/lang/Class;
      33: if_acmpeq     53
      36: getstatic     #179                // Field org/xnio/_private/Messages.msg:Lorg/xnio/_private/Messages;
      39: aload_3
      40: aload_2
      41: invokevirtual #188                // Method java/net/InetSocketAddress.getAddress:()Ljava/net/InetAddress;
      44: invokevirtual #169                // Method java/lang/Object.getClass:()Ljava/lang/Class;
      47: invokeinterface #192,  3          // InterfaceMethod org/xnio/_private/Messages.mismatchAddressType:(Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/IllegalArgumentException;
      52: athrow
      53: aload_0
      54: getfield      #51                 // Field bindAddressConfigurations:Lorg/wildfly/common/net/CidrAddressTable;
      57: aload_1
      58: aload_2
      59: invokevirtual #196                // Method org/wildfly/common/net/CidrAddressTable.put:(Lorg/wildfly/common/net/CidrAddress;Ljava/lang/Object;)Ljava/lang/Object;
      62: pop
      63: aload_0
      64: areturn

  public org.xnio.XnioWorker$Builder setBindAddressConfigurations(org.wildfly.common.net.CidrAddressTable<java.net.InetSocketAddress>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #51                 // Field bindAddressConfigurations:Lorg/wildfly/common/net/CidrAddressTable;
       5: aload_0
       6: areturn

  public org.wildfly.common.net.CidrAddressTable<java.net.InetSocketAddress> getBindAddressConfigurations();
    Code:
       0: aload_0
       1: getfield      #51                 // Field bindAddressConfigurations:Lorg/wildfly/common/net/CidrAddressTable;
       4: areturn

  public java.lang.Runnable getTerminationTask();
    Code:
       0: aload_0
       1: getfield      #211                // Field terminationTask:Ljava/lang/Runnable;
       4: areturn

  public org.xnio.XnioWorker$Builder setTerminationTask(java.lang.Runnable);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #211                // Field terminationTask:Ljava/lang/Runnable;
       5: aload_0
       6: areturn

  public java.lang.String getWorkerName();
    Code:
       0: aload_0
       1: getfield      #217                // Field workerName:Ljava/lang/String;
       4: areturn

  public org.xnio.XnioWorker$Builder setWorkerName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #217                // Field workerName:Ljava/lang/String;
       5: aload_0
       6: areturn

  public int getCoreWorkerPoolSize();
    Code:
       0: aload_0
       1: getfield      #37                 // Field coreWorkerPoolSize:I
       4: ireturn

  public org.xnio.XnioWorker$Builder setCoreWorkerPoolSize(int);
    Code:
       0: ldc           #220                // String coreWorkerPoolSize
       2: iconst_0
       3: iload_1
       4: invokestatic  #226                // Method org/wildfly/common/Assert.checkMinimumParameter:(Ljava/lang/String;II)V
       7: aload_0
       8: iload_1
       9: putfield      #37                 // Field coreWorkerPoolSize:I
      12: aload_0
      13: areturn

  public int getMaxWorkerPoolSize();
    Code:
       0: aload_0
       1: getfield      #39                 // Field maxWorkerPoolSize:I
       4: ireturn

  public org.xnio.XnioWorker$Builder setMaxWorkerPoolSize(int);
    Code:
       0: ldc           #228                // String maxWorkerPoolSize
       2: iconst_0
       3: iload_1
       4: invokestatic  #226                // Method org/wildfly/common/Assert.checkMinimumParameter:(Ljava/lang/String;II)V
       7: aload_0
       8: iload_1
       9: putfield      #39                 // Field maxWorkerPoolSize:I
      12: aload_0
      13: areturn

  public java.lang.ThreadGroup getThreadGroup();
    Code:
       0: aload_0
       1: getfield      #232                // Field threadGroup:Ljava/lang/ThreadGroup;
       4: areturn

  public org.xnio.XnioWorker$Builder setThreadGroup(java.lang.ThreadGroup);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #232                // Field threadGroup:Ljava/lang/ThreadGroup;
       5: aload_0
       6: areturn

  public boolean isDaemon();
    Code:
       0: aload_0
       1: getfield      #98                 // Field daemon:Z
       4: ireturn

  public org.xnio.XnioWorker$Builder setDaemon(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #98                 // Field daemon:Z
       5: aload_0
       6: areturn

  public long getWorkerKeepAlive();
    Code:
       0: aload_0
       1: getfield      #42                 // Field workerKeepAlive:I
       4: i2l
       5: lreturn

  public org.xnio.XnioWorker$Builder setWorkerKeepAlive(int);
    Code:
       0: ldc           #238                // String workerKeepAlive
       2: iconst_0
       3: iload_1
       4: invokestatic  #226                // Method org/wildfly/common/Assert.checkMinimumParameter:(Ljava/lang/String;II)V
       7: aload_0
       8: iload_1
       9: putfield      #42                 // Field workerKeepAlive:I
      12: aload_0
      13: areturn

  public int getWorkerIoThreads();
    Code:
       0: aload_0
       1: getfield      #44                 // Field workerIoThreads:I
       4: ireturn

  public org.xnio.XnioWorker$Builder setWorkerIoThreads(int);
    Code:
       0: ldc           #240                // String workerIoThreads
       2: iconst_0
       3: iload_1
       4: invokestatic  #226                // Method org/wildfly/common/Assert.checkMinimumParameter:(Ljava/lang/String;II)V
       7: aload_0
       8: iload_1
       9: putfield      #44                 // Field workerIoThreads:I
      12: aload_0
      13: areturn

  public long getWorkerStackSize();
    Code:
       0: aload_0
       1: getfield      #46                 // Field workerStackSize:J
       4: lreturn

  public org.xnio.XnioWorker$Builder setWorkerStackSize(long);
    Code:
       0: ldc           #242                // String workerStackSize
       2: lconst_0
       3: lload_1
       4: invokestatic  #245                // Method org/wildfly/common/Assert.checkMinimumParameter:(Ljava/lang/String;JJ)V
       7: aload_0
       8: lload_1
       9: putfield      #46                 // Field workerStackSize:J
      12: aload_0
      13: areturn

  public java.util.concurrent.ExecutorService getExternalExecutorService();
    Code:
       0: aload_0
       1: getfield      #249                // Field externalExecutorService:Ljava/util/concurrent/ExecutorService;
       4: areturn

  public org.xnio.XnioWorker$Builder setExternalExecutorService(java.util.concurrent.ExecutorService);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #249                // Field externalExecutorService:Ljava/util/concurrent/ExecutorService;
       5: aload_0
       6: areturn

  public org.xnio.XnioWorker build();
    Code:
       0: invokestatic  #258                // Method org/xnio/XnioWorker.access$300:()Lorg/jboss/logging/Logger;
       3: ldc_w         #260                // String Creating worker:%s, pool size:%s, max pool size:%s, keep alive:%s, io threads:%s, stack size:%s
       6: bipush        6
       8: anewarray     #4                  // class java/lang/Object
      11: dup
      12: iconst_0
      13: aload_0
      14: getfield      #217                // Field workerName:Ljava/lang/String;
      17: aastore
      18: dup
      19: iconst_1
      20: aload_0
      21: getfield      #37                 // Field coreWorkerPoolSize:I
      24: invokestatic  #266                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      27: aastore
      28: dup
      29: iconst_2
      30: aload_0
      31: getfield      #39                 // Field maxWorkerPoolSize:I
      34: invokestatic  #266                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      37: aastore
      38: dup
      39: iconst_3
      40: aload_0
      41: getfield      #42                 // Field workerKeepAlive:I
      44: invokestatic  #266                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      47: aastore
      48: dup
      49: iconst_4
      50: aload_0
      51: getfield      #44                 // Field workerIoThreads:I
      54: invokestatic  #266                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      57: aastore
      58: dup
      59: iconst_5
      60: aload_0
      61: getfield      #46                 // Field workerStackSize:J
      64: invokestatic  #271                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      67: aastore
      68: invokevirtual #277                // Method org/jboss/logging/Logger.debugf:(Ljava/lang/String;[Ljava/lang/Object;)V
      71: aload_0
      72: getfield      #53                 // Field xnio:Lorg/xnio/Xnio;
      75: aload_0
      76: invokevirtual #282                // Method org/xnio/Xnio.build:(Lorg/xnio/XnioWorker$Builder;)Lorg/xnio/XnioWorker;
      79: areturn

  static org.xnio.Xnio access$000(org.xnio.XnioWorker$Builder);
    Code:
       0: aload_0
       1: getfield      #53                 // Field xnio:Lorg/xnio/Xnio;
       4: areturn

  static java.lang.Runnable access$100(org.xnio.XnioWorker$Builder);
    Code:
       0: aload_0
       1: getfield      #211                // Field terminationTask:Ljava/lang/Runnable;
       4: areturn
}
