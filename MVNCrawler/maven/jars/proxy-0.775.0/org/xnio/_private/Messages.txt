Compiled from "Messages.java"
public interface org.xnio._private.Messages extends org.jboss.logging.BasicLogger {
  public static final org.xnio._private.Messages msg;

  public static final org.xnio._private.Messages futureMsg;

  public static final org.xnio._private.Messages optionParseMsg;

  public static final org.xnio._private.Messages closeMsg;

  public static final org.xnio._private.Messages listenerMsg;

  public abstract void greeting(java.lang.String);

  public abstract java.lang.IllegalArgumentException nullParameter(java.lang.String);

  public abstract java.lang.IllegalArgumentException minRange(java.lang.String, int);

  public abstract java.lang.IllegalArgumentException badSockType(java.lang.Class<? extends java.net.SocketAddress>);

  public abstract java.lang.IllegalArgumentException nullArrayIndex(java.lang.String, int);

  public abstract java.lang.IllegalArgumentException mismatchSockType(java.lang.Class<? extends java.net.SocketAddress>, java.lang.Class<? extends java.net.SocketAddress>);

  public abstract java.lang.IllegalArgumentException noField(java.lang.String, java.lang.Class<?>);

  public abstract java.lang.IllegalArgumentException optionClassNotFound(java.lang.String, java.lang.ClassLoader);

  public abstract java.lang.IllegalArgumentException fieldNotAccessible(java.lang.String, java.lang.Class<?>);

  public abstract java.lang.IllegalArgumentException fieldNotStatic(java.lang.String, java.lang.Class<?>);

  public abstract java.lang.UnsupportedOperationException copyNegative();

  public abstract void invalidOptionInProperty(java.lang.String, java.lang.String, java.lang.Throwable);

  public abstract java.nio.ReadOnlyBufferException readOnlyBuffer();

  public abstract java.nio.BufferUnderflowException bufferUnderflow();

  public abstract java.nio.BufferOverflowException bufferOverflow();

  public abstract java.lang.IllegalArgumentException parameterOutOfRange(java.lang.String);

  public abstract java.lang.IllegalArgumentException mixedDirectAndHeap();

  public abstract java.lang.IllegalStateException bufferFreed();

  public abstract java.lang.IllegalStateException randomWrongThread();

  public abstract java.lang.IllegalStateException channelNotAvailable();

  public abstract java.lang.IllegalArgumentException noOptionParser();

  public abstract java.lang.IllegalArgumentException invalidOptionPropertyFormat(java.lang.String);

  public abstract java.lang.IllegalArgumentException classNotFound(java.lang.String, java.lang.ClassNotFoundException);

  public abstract java.lang.IllegalArgumentException classNotInstance(java.lang.String, java.lang.Class<?>);

  public abstract java.lang.IllegalArgumentException invalidOptionName(java.lang.String);

  public abstract java.lang.IllegalArgumentException invalidNullOption(java.lang.String);

  public abstract java.io.IOException readAppendNotSupported();

  public abstract java.io.IOException openModeRequires7();

  public abstract java.lang.IllegalStateException xnioThreadRequired();

  public abstract java.lang.IllegalArgumentException badCompressionFormat();

  public abstract java.lang.IllegalArgumentException differentWorkers();

  public abstract java.lang.IllegalArgumentException oneChannelMustBeConnection();

  public abstract java.lang.IllegalArgumentException oneChannelMustBeSSL();

  public abstract java.lang.IllegalArgumentException invalidQop(java.lang.String);

  public abstract java.lang.IllegalArgumentException cantInstantiate(java.lang.Class<?>, java.lang.Throwable);

  public abstract org.xnio.channels.ConcurrentStreamChannelAccessException concurrentAccess();

  public abstract java.io.CharConversionException malformedInput();

  public abstract java.io.CharConversionException unmappableCharacter();

  public abstract java.io.CharConversionException characterDecodingProblem();

  public abstract java.lang.IllegalArgumentException mismatchAddressType(java.lang.Class<? extends java.net.InetAddress>, java.lang.Class<? extends java.net.InetAddress>);

  public abstract java.lang.IllegalArgumentException invalidStrength(java.lang.String);

  public abstract java.lang.IllegalArgumentException addressUnresolved(java.net.InetSocketAddress);

  public abstract java.lang.IllegalArgumentException missingSslProvider();

  public abstract java.lang.IllegalArgumentException invalidURLScheme(java.lang.String);

  public abstract javax.security.sasl.SaslException extraChallenge();

  public abstract javax.security.sasl.SaslException extraResponse();

  public abstract java.lang.IllegalArgumentException socketBufferTooSmall();

  public abstract java.lang.IllegalArgumentException appBufferTooSmall();

  public abstract java.io.IOException wrongBufferExpansion();

  public abstract java.io.IOException unexpectedWrapResult(javax.net.ssl.SSLEngineResult$Status);

  public abstract java.io.IOException unexpectedHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus);

  public abstract java.io.IOException unexpectedUnwrapResult(javax.net.ssl.SSLEngineResult$Status);

  public abstract java.lang.IllegalArgumentException notFromThisProvider();

  public abstract void failedToCloseSSLEngine(java.lang.Throwable, java.lang.Exception);

  public abstract org.xnio.channels.ReadTimeoutException readTimeout();

  public abstract org.xnio.channels.WriteTimeoutException writeTimeout();

  public abstract org.xnio.channels.FixedLengthOverflowException fixedOverflow();

  public abstract org.xnio.channels.FixedLengthUnderflowException fixedUnderflow(long);

  public abstract java.io.IOException recvInvalidMsgLength(int);

  public abstract java.io.EOFException writeShutDown();

  public abstract java.io.IOException txMsgTooLarge();

  public abstract java.io.IOException unflushedData();

  public abstract java.io.InterruptedIOException interruptedIO();

  public abstract java.io.InterruptedIOException interruptedIO(int);

  public abstract java.io.IOException flushSmallBuffer();

  public abstract java.io.IOException deflaterState();

  public abstract java.io.IOException inflaterNeedsDictionary();

  public abstract java.io.EOFException connectionClosedEarly();

  public abstract java.io.IOException streamClosed();

  public abstract java.io.IOException markNotSet();

  public abstract java.lang.String redirect();

  public abstract java.lang.UnsupportedOperationException unsupported(java.lang.String);

  public abstract java.lang.IllegalStateException blockingNotAllowed();

  public abstract java.lang.IllegalArgumentException noProviderFound();

  public abstract java.util.concurrent.CancellationException opCancelled();

  public abstract void notifierFailed(java.lang.Throwable, org.xnio.IoFuture$Notifier<?, ?>, java.lang.Object);

  public abstract java.util.concurrent.TimeoutException opTimedOut();

  public abstract java.lang.SecurityException propReadForbidden();

  public abstract void failedToInvokeFileWatchCallback(java.lang.Throwable);

  public abstract void listenerException(java.lang.Throwable);

  public abstract void exceptionHandlerException(java.lang.Throwable);

  public abstract void acceptFailed(org.xnio.channels.AcceptingChannel<? extends org.xnio.channels.ConnectedChannel>, java.io.IOException);

  public abstract void executorSubmitFailed(java.util.concurrent.RejectedExecutionException, java.nio.channels.Channel);

  public abstract void closingResource(java.lang.Object);

  public abstract void resourceCloseFailed(java.lang.Throwable, java.lang.Object);

  public abstract void resourceReadShutdownFailed(java.lang.Throwable, java.lang.Object);

  public abstract void expandedSslBufferEnabled(int);

  public abstract void connectionNotifyReadClosedFailed(java.lang.Throwable, org.xnio.StreamConnection);

  public abstract void connectionNotifyWriteClosedFailed(java.lang.Throwable, org.xnio.StreamConnection);

  static {};
    Code:
       0: ldc           #2                  // class org/xnio/_private/Messages
       2: ldc_w         #359                // String org.xnio
       5: invokestatic  #363                // Method org/jboss/logging/Logger.getMessageLogger:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Object;
       8: checkcast     #2                  // class org/xnio/_private/Messages
      11: putstatic     #365                // Field msg:Lorg/xnio/_private/Messages;
      14: ldc           #2                  // class org/xnio/_private/Messages
      16: ldc_w         #367                // String org.xnio.future
      19: invokestatic  #363                // Method org/jboss/logging/Logger.getMessageLogger:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Object;
      22: checkcast     #2                  // class org/xnio/_private/Messages
      25: putstatic     #369                // Field futureMsg:Lorg/xnio/_private/Messages;
      28: ldc           #2                  // class org/xnio/_private/Messages
      30: ldc_w         #371                // String org.xnio.option.parse
      33: invokestatic  #363                // Method org/jboss/logging/Logger.getMessageLogger:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Object;
      36: checkcast     #2                  // class org/xnio/_private/Messages
      39: putstatic     #373                // Field optionParseMsg:Lorg/xnio/_private/Messages;
      42: ldc           #2                  // class org/xnio/_private/Messages
      44: ldc_w         #375                // String org.xnio.safe-close
      47: invokestatic  #363                // Method org/jboss/logging/Logger.getMessageLogger:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Object;
      50: checkcast     #2                  // class org/xnio/_private/Messages
      53: putstatic     #377                // Field closeMsg:Lorg/xnio/_private/Messages;
      56: ldc           #2                  // class org/xnio/_private/Messages
      58: ldc_w         #379                // String org.xnio.listener
      61: invokestatic  #363                // Method org/jboss/logging/Logger.getMessageLogger:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Object;
      64: checkcast     #2                  // class org/xnio/_private/Messages
      67: putstatic     #381                // Field listenerMsg:Lorg/xnio/_private/Messages;
      70: return
}
