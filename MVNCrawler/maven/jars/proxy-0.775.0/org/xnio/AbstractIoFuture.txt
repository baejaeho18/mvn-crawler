Compiled from "AbstractIoFuture.java"
public abstract class org.xnio.AbstractIoFuture<T> implements org.xnio.IoFuture<T> {
  private final java.util.concurrent.atomic.AtomicReference<org.xnio.AbstractIoFuture$State<T>> stateRef;

  private static final org.xnio.AbstractIoFuture$State<?> ST_INITIAL;

  private static final org.xnio.AbstractIoFuture$State<?> ST_CANCELLED;

  protected org.xnio.AbstractIoFuture();
    Code:
       0: aload_0
       1: invokespecial #57                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #59                 // class java/util/concurrent/atomic/AtomicReference
       8: dup
       9: getstatic     #61                 // Field ST_INITIAL:Lorg/xnio/AbstractIoFuture$State;
      12: invokespecial #64                 // Method java/util/concurrent/atomic/AtomicReference."<init>":(Ljava/lang/Object;)V
      15: putfield      #66                 // Field stateRef:Ljava/util/concurrent/atomic/AtomicReference;
      18: return

  public org.xnio.IoFuture$Status getStatus();
    Code:
       0: aload_0
       1: invokespecial #75                 // Method getState:()Lorg/xnio/AbstractIoFuture$State;
       4: invokevirtual #77                 // Method org/xnio/AbstractIoFuture$State.getStatus:()Lorg/xnio/IoFuture$Status;
       7: areturn

  private org.xnio.AbstractIoFuture$State<T> getState();
    Code:
       0: aload_0
       1: getfield      #66                 // Field stateRef:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #82                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #39                 // class org/xnio/AbstractIoFuture$State
      10: areturn

  private boolean compareAndSetState(org.xnio.AbstractIoFuture$State<T>, org.xnio.AbstractIoFuture$State<T>);
    Code:
       0: aload_0
       1: getfield      #66                 // Field stateRef:Ljava/util/concurrent/atomic/AtomicReference;
       4: aload_1
       5: aload_2
       6: invokevirtual #89                 // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
       9: ireturn

  public org.xnio.IoFuture$Status await();
    Code:
       0: invokestatic  #99                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
       3: astore_1
       4: aload_0
       5: invokespecial #75                 // Method getState:()Lorg/xnio/AbstractIoFuture$State;
       8: astore_2
       9: aload_2
      10: invokevirtual #77                 // Method org/xnio/AbstractIoFuture$State.getStatus:()Lorg/xnio/IoFuture$Status;
      13: getstatic     #103                // Field org/xnio/IoFuture$Status.WAITING:Lorg/xnio/IoFuture$Status;
      16: if_acmpeq     24
      19: aload_2
      20: invokevirtual #77                 // Method org/xnio/AbstractIoFuture$State.getStatus:()Lorg/xnio/IoFuture$Status;
      23: areturn
      24: invokestatic  #108                // Method org/xnio/Xnio.checkBlockingAllowed:()V
      27: aload_2
      28: aload_1
      29: invokevirtual #112                // Method org/xnio/AbstractIoFuture$State.withWaiter:(Ljava/lang/Thread;)Lorg/xnio/AbstractIoFuture$State;
      32: astore_3
      33: aload_0
      34: aload_2
      35: aload_3
      36: invokespecial #114                // Method compareAndSetState:(Lorg/xnio/AbstractIoFuture$State;Lorg/xnio/AbstractIoFuture$State;)Z
      39: ifeq          107
      42: invokestatic  #118                // Method java/lang/Thread.interrupted:()Z
      45: istore        4
      47: aload_0
      48: invokestatic  #123                // Method java/util/concurrent/locks/LockSupport.park:(Ljava/lang/Object;)V
      51: invokestatic  #118                // Method java/lang/Thread.interrupted:()Z
      54: ifeq          60
      57: iconst_1
      58: istore        4
      60: aload_0
      61: invokespecial #75                 // Method getState:()Lorg/xnio/AbstractIoFuture$State;
      64: astore_2
      65: aload_2
      66: invokevirtual #77                 // Method org/xnio/AbstractIoFuture$State.getStatus:()Lorg/xnio/IoFuture$Status;
      69: getstatic     #103                // Field org/xnio/IoFuture$Status.WAITING:Lorg/xnio/IoFuture$Status;
      72: if_acmpeq     47
      75: aload_2
      76: invokevirtual #77                 // Method org/xnio/AbstractIoFuture$State.getStatus:()Lorg/xnio/IoFuture$Status;
      79: astore        5
      81: iload         4
      83: ifeq          90
      86: aload_1
      87: invokevirtual #126                // Method java/lang/Thread.interrupt:()V
      90: aload         5
      92: areturn
      93: astore        6
      95: iload         4
      97: ifeq          104
     100: aload_1
     101: invokevirtual #126                // Method java/lang/Thread.interrupt:()V
     104: aload         6
     106: athrow
     107: goto          4
    Exception table:
       from    to  target type
          47    81    93   any
          93    95    93   any

  public org.xnio.IoFuture$Status await(long, java.util.concurrent.TimeUnit);
    Code:
       0: lload_1
       1: lconst_0
       2: lcmp
       3: ifge          8
       6: lconst_0
       7: lstore_1
       8: aload_3
       9: lload_1
      10: invokevirtual #140                // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      13: lstore        4
      15: invokestatic  #146                // Method java/lang/System.nanoTime:()J
      18: lstore        6
      20: invokestatic  #99                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      23: astore        10
      25: aload_0
      26: invokespecial #75                 // Method getState:()Lorg/xnio/AbstractIoFuture$State;
      29: astore        11
      31: aload         11
      33: invokevirtual #77                 // Method org/xnio/AbstractIoFuture$State.getStatus:()Lorg/xnio/IoFuture$Status;
      36: getstatic     #103                // Field org/xnio/IoFuture$Status.WAITING:Lorg/xnio/IoFuture$Status;
      39: if_acmpne     49
      42: lload         4
      44: lconst_0
      45: lcmp
      46: ifne          55
      49: aload         11
      51: invokevirtual #77                 // Method org/xnio/AbstractIoFuture$State.getStatus:()Lorg/xnio/IoFuture$Status;
      54: areturn
      55: invokestatic  #108                // Method org/xnio/Xnio.checkBlockingAllowed:()V
      58: aload         11
      60: aload         10
      62: invokevirtual #112                // Method org/xnio/AbstractIoFuture$State.withWaiter:(Ljava/lang/Thread;)Lorg/xnio/AbstractIoFuture$State;
      65: astore        12
      67: aload_0
      68: aload         11
      70: aload         12
      72: invokespecial #114                // Method compareAndSetState:(Lorg/xnio/AbstractIoFuture$State;Lorg/xnio/AbstractIoFuture$State;)Z
      75: ifeq          175
      78: invokestatic  #118                // Method java/lang/Thread.interrupted:()Z
      81: istore        13
      83: aload_0
      84: lload         4
      86: invokestatic  #150                // Method java/util/concurrent/locks/LockSupport.parkNanos:(Ljava/lang/Object;J)V
      89: invokestatic  #118                // Method java/lang/Thread.interrupted:()Z
      92: ifeq          98
      95: iconst_1
      96: istore        13
      98: aload_0
      99: invokespecial #75                 // Method getState:()Lorg/xnio/AbstractIoFuture$State;
     102: astore        11
     104: lload         4
     106: invokestatic  #146                // Method java/lang/System.nanoTime:()J
     109: dup2
     110: lstore        8
     112: lload         6
     114: lsub
     115: lsub
     116: lstore        4
     118: lload         8
     120: lstore        6
     122: aload         11
     124: invokevirtual #77                 // Method org/xnio/AbstractIoFuture$State.getStatus:()Lorg/xnio/IoFuture$Status;
     127: getstatic     #103                // Field org/xnio/IoFuture$Status.WAITING:Lorg/xnio/IoFuture$Status;
     130: if_acmpne     140
     133: lload         4
     135: lconst_0
     136: lcmp
     137: ifgt          83
     140: aload         11
     142: invokevirtual #77                 // Method org/xnio/AbstractIoFuture$State.getStatus:()Lorg/xnio/IoFuture$Status;
     145: astore        14
     147: iload         13
     149: ifeq          157
     152: aload         10
     154: invokevirtual #126                // Method java/lang/Thread.interrupt:()V
     157: aload         14
     159: areturn
     160: astore        15
     162: iload         13
     164: ifeq          172
     167: aload         10
     169: invokevirtual #126                // Method java/lang/Thread.interrupt:()V
     172: aload         15
     174: athrow
     175: goto          25
    Exception table:
       from    to  target type
          83   147   160   any
         160   162   160   any

  public org.xnio.IoFuture$Status awaitInterruptibly() throws java.lang.InterruptedException;
    Code:
       0: invokestatic  #99                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
       3: astore_1
       4: aload_0
       5: invokespecial #75                 // Method getState:()Lorg/xnio/AbstractIoFuture$State;
       8: astore_2
       9: aload_2
      10: invokevirtual #77                 // Method org/xnio/AbstractIoFuture$State.getStatus:()Lorg/xnio/IoFuture$Status;
      13: getstatic     #103                // Field org/xnio/IoFuture$Status.WAITING:Lorg/xnio/IoFuture$Status;
      16: if_acmpeq     24
      19: aload_2
      20: invokevirtual #77                 // Method org/xnio/AbstractIoFuture$State.getStatus:()Lorg/xnio/IoFuture$Status;
      23: areturn
      24: invokestatic  #108                // Method org/xnio/Xnio.checkBlockingAllowed:()V
      27: invokestatic  #118                // Method java/lang/Thread.interrupted:()Z
      30: ifeq          41
      33: new           #160                // class java/lang/InterruptedException
      36: dup
      37: invokespecial #161                // Method java/lang/InterruptedException."<init>":()V
      40: athrow
      41: aload_2
      42: aload_1
      43: invokevirtual #112                // Method org/xnio/AbstractIoFuture$State.withWaiter:(Ljava/lang/Thread;)Lorg/xnio/AbstractIoFuture$State;
      46: astore_3
      47: aload_0
      48: aload_2
      49: aload_3
      50: invokespecial #114                // Method compareAndSetState:(Lorg/xnio/AbstractIoFuture$State;Lorg/xnio/AbstractIoFuture$State;)Z
      53: ifeq          94
      56: aload_0
      57: invokestatic  #123                // Method java/util/concurrent/locks/LockSupport.park:(Ljava/lang/Object;)V
      60: invokestatic  #118                // Method java/lang/Thread.interrupted:()Z
      63: ifeq          74
      66: new           #160                // class java/lang/InterruptedException
      69: dup
      70: invokespecial #161                // Method java/lang/InterruptedException."<init>":()V
      73: athrow
      74: aload_0
      75: invokespecial #75                 // Method getState:()Lorg/xnio/AbstractIoFuture$State;
      78: astore_2
      79: aload_2
      80: invokevirtual #77                 // Method org/xnio/AbstractIoFuture$State.getStatus:()Lorg/xnio/IoFuture$Status;
      83: getstatic     #103                // Field org/xnio/IoFuture$Status.WAITING:Lorg/xnio/IoFuture$Status;
      86: if_acmpeq     56
      89: aload_2
      90: invokevirtual #77                 // Method org/xnio/AbstractIoFuture$State.getStatus:()Lorg/xnio/IoFuture$Status;
      93: areturn
      94: goto          4

  public org.xnio.IoFuture$Status awaitInterruptibly(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException;
    Code:
       0: lload_1
       1: lconst_0
       2: lcmp
       3: ifge          8
       6: lconst_0
       7: lstore_1
       8: aload_3
       9: lload_1
      10: invokevirtual #140                // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      13: lstore        4
      15: invokestatic  #146                // Method java/lang/System.nanoTime:()J
      18: lstore        6
      20: invokestatic  #99                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      23: astore        10
      25: aload_0
      26: invokespecial #75                 // Method getState:()Lorg/xnio/AbstractIoFuture$State;
      29: astore        11
      31: aload         11
      33: invokevirtual #77                 // Method org/xnio/AbstractIoFuture$State.getStatus:()Lorg/xnio/IoFuture$Status;
      36: getstatic     #103                // Field org/xnio/IoFuture$Status.WAITING:Lorg/xnio/IoFuture$Status;
      39: if_acmpne     49
      42: lload         4
      44: lconst_0
      45: lcmp
      46: ifne          55
      49: aload         11
      51: invokevirtual #77                 // Method org/xnio/AbstractIoFuture$State.getStatus:()Lorg/xnio/IoFuture$Status;
      54: areturn
      55: invokestatic  #108                // Method org/xnio/Xnio.checkBlockingAllowed:()V
      58: invokestatic  #118                // Method java/lang/Thread.interrupted:()Z
      61: ifeq          72
      64: new           #160                // class java/lang/InterruptedException
      67: dup
      68: invokespecial #161                // Method java/lang/InterruptedException."<init>":()V
      71: athrow
      72: aload         11
      74: aload         10
      76: invokevirtual #112                // Method org/xnio/AbstractIoFuture$State.withWaiter:(Ljava/lang/Thread;)Lorg/xnio/AbstractIoFuture$State;
      79: astore        12
      81: aload_0
      82: aload         11
      84: aload         12
      86: invokespecial #114                // Method compareAndSetState:(Lorg/xnio/AbstractIoFuture$State;Lorg/xnio/AbstractIoFuture$State;)Z
      89: ifeq          160
      92: aload_0
      93: lload         4
      95: invokestatic  #150                // Method java/util/concurrent/locks/LockSupport.parkNanos:(Ljava/lang/Object;J)V
      98: invokestatic  #118                // Method java/lang/Thread.interrupted:()Z
     101: ifeq          112
     104: new           #160                // class java/lang/InterruptedException
     107: dup
     108: invokespecial #161                // Method java/lang/InterruptedException."<init>":()V
     111: athrow
     112: aload_0
     113: invokespecial #75                 // Method getState:()Lorg/xnio/AbstractIoFuture$State;
     116: astore        11
     118: lload         4
     120: invokestatic  #146                // Method java/lang/System.nanoTime:()J
     123: dup2
     124: lstore        8
     126: lload         6
     128: lsub
     129: lsub
     130: lstore        4
     132: lload         8
     134: lstore        6
     136: aload         11
     138: invokevirtual #77                 // Method org/xnio/AbstractIoFuture$State.getStatus:()Lorg/xnio/IoFuture$Status;
     141: getstatic     #103                // Field org/xnio/IoFuture$Status.WAITING:Lorg/xnio/IoFuture$Status;
     144: if_acmpne     154
     147: lload         4
     149: lconst_0
     150: lcmp
     151: ifgt          92
     154: aload         11
     156: invokevirtual #77                 // Method org/xnio/AbstractIoFuture$State.getStatus:()Lorg/xnio/IoFuture$Status;
     159: areturn
     160: goto          25

  public T get() throws java.io.IOException, java.util.concurrent.CancellationException;
    Code:
       0: getstatic     #170                // Field org/xnio/AbstractIoFuture$1.$SwitchMap$org$xnio$IoFuture$Status:[I
       3: aload_0
       4: invokevirtual #172                // Method await:()Lorg/xnio/IoFuture$Status;
       7: invokevirtual #176                // Method org/xnio/IoFuture$Status.ordinal:()I
      10: iaload
      11: tableswitch   { // 1 to 3
                     1: 36
                     2: 44
                     3: 52
               default: 61
          }
      36: aload_0
      37: invokespecial #75                 // Method getState:()Lorg/xnio/AbstractIoFuture$State;
      40: invokevirtual #179                // Method org/xnio/AbstractIoFuture$State.getResult:()Ljava/lang/Object;
      43: areturn
      44: aload_0
      45: invokespecial #75                 // Method getState:()Lorg/xnio/AbstractIoFuture$State;
      48: invokevirtual #183                // Method org/xnio/AbstractIoFuture$State.getException:()Ljava/io/IOException;
      51: athrow
      52: getstatic     #189                // Field org/xnio/_private/Messages.futureMsg:Lorg/xnio/_private/Messages;
      55: invokeinterface #193,  1          // InterfaceMethod org/xnio/_private/Messages.opCancelled:()Ljava/util/concurrent/CancellationException;
      60: athrow
      61: new           #195                // class java/lang/IllegalStateException
      64: dup
      65: invokespecial #196                // Method java/lang/IllegalStateException."<init>":()V
      68: athrow

  public T getInterruptibly() throws java.io.IOException, java.lang.InterruptedException, java.util.concurrent.CancellationException;
    Code:
       0: getstatic     #170                // Field org/xnio/AbstractIoFuture$1.$SwitchMap$org$xnio$IoFuture$Status:[I
       3: aload_0
       4: invokevirtual #199                // Method awaitInterruptibly:()Lorg/xnio/IoFuture$Status;
       7: invokevirtual #176                // Method org/xnio/IoFuture$Status.ordinal:()I
      10: iaload
      11: tableswitch   { // 1 to 3
                     1: 36
                     2: 44
                     3: 52
               default: 61
          }
      36: aload_0
      37: invokespecial #75                 // Method getState:()Lorg/xnio/AbstractIoFuture$State;
      40: invokevirtual #179                // Method org/xnio/AbstractIoFuture$State.getResult:()Ljava/lang/Object;
      43: areturn
      44: aload_0
      45: invokespecial #75                 // Method getState:()Lorg/xnio/AbstractIoFuture$State;
      48: invokevirtual #183                // Method org/xnio/AbstractIoFuture$State.getException:()Ljava/io/IOException;
      51: athrow
      52: getstatic     #189                // Field org/xnio/_private/Messages.futureMsg:Lorg/xnio/_private/Messages;
      55: invokeinterface #193,  1          // InterfaceMethod org/xnio/_private/Messages.opCancelled:()Ljava/util/concurrent/CancellationException;
      60: athrow
      61: new           #195                // class java/lang/IllegalStateException
      64: dup
      65: invokespecial #196                // Method java/lang/IllegalStateException."<init>":()V
      68: athrow

  public java.io.IOException getException() throws java.lang.IllegalStateException;
    Code:
       0: aload_0
       1: invokespecial #75                 // Method getState:()Lorg/xnio/AbstractIoFuture$State;
       4: invokevirtual #183                // Method org/xnio/AbstractIoFuture$State.getException:()Ljava/io/IOException;
       7: areturn

  public <A> org.xnio.IoFuture<T> addNotifier(org.xnio.IoFuture$Notifier<? super T, A>, A);
    Code:
       0: aload_0
       1: invokespecial #75                 // Method getState:()Lorg/xnio/AbstractIoFuture$State;
       4: astore_3
       5: aload_3
       6: aload_0
       7: invokevirtual #206                // Method getNotifierExecutor:()Ljava/util/concurrent/Executor;
      10: aload_0
      11: aload_1
      12: aload_2
      13: invokevirtual #210                // Method org/xnio/AbstractIoFuture$State.withNotifier:(Ljava/util/concurrent/Executor;Lorg/xnio/AbstractIoFuture;Lorg/xnio/IoFuture$Notifier;Ljava/lang/Object;)Lorg/xnio/AbstractIoFuture$State;
      16: astore        4
      18: aload_0
      19: aload_3
      20: aload         4
      22: invokespecial #114                // Method compareAndSetState:(Lorg/xnio/AbstractIoFuture$State;Lorg/xnio/AbstractIoFuture$State;)Z
      25: ifeq          0
      28: aload_0
      29: areturn

  protected boolean setException(java.io.IOException);
    Code:
       0: aload_0
       1: invokespecial #75                 // Method getState:()Lorg/xnio/AbstractIoFuture$State;
       4: astore_2
       5: aload_2
       6: invokevirtual #77                 // Method org/xnio/AbstractIoFuture$State.getStatus:()Lorg/xnio/IoFuture$Status;
       9: getstatic     #103                // Field org/xnio/IoFuture$Status.WAITING:Lorg/xnio/IoFuture$Status;
      12: if_acmpeq     17
      15: iconst_0
      16: ireturn
      17: new           #30                 // class org/xnio/AbstractIoFuture$FailedState
      20: dup
      21: aload_1
      22: invokespecial #223                // Method org/xnio/AbstractIoFuture$FailedState."<init>":(Ljava/io/IOException;)V
      25: astore_3
      26: aload_0
      27: aload_2
      28: aload_3
      29: invokespecial #114                // Method compareAndSetState:(Lorg/xnio/AbstractIoFuture$State;Lorg/xnio/AbstractIoFuture$State;)Z
      32: ifne          52
      35: aload_0
      36: invokespecial #75                 // Method getState:()Lorg/xnio/AbstractIoFuture$State;
      39: astore_2
      40: aload_2
      41: invokevirtual #77                 // Method org/xnio/AbstractIoFuture$State.getStatus:()Lorg/xnio/IoFuture$Status;
      44: getstatic     #103                // Field org/xnio/IoFuture$Status.WAITING:Lorg/xnio/IoFuture$Status;
      47: if_acmpeq     26
      50: iconst_0
      51: ireturn
      52: aload_2
      53: aload_0
      54: aload_1
      55: invokevirtual #227                // Method org/xnio/AbstractIoFuture$State.notifyFailed:(Lorg/xnio/AbstractIoFuture;Ljava/io/IOException;)V
      58: iconst_1
      59: ireturn

  protected boolean setResult(T);
    Code:
       0: aload_0
       1: invokespecial #75                 // Method getState:()Lorg/xnio/AbstractIoFuture$State;
       4: astore_2
       5: aload_2
       6: invokevirtual #77                 // Method org/xnio/AbstractIoFuture$State.getStatus:()Lorg/xnio/IoFuture$Status;
       9: getstatic     #103                // Field org/xnio/IoFuture$Status.WAITING:Lorg/xnio/IoFuture$Status;
      12: if_acmpeq     17
      15: iconst_0
      16: ireturn
      17: new           #33                 // class org/xnio/AbstractIoFuture$CompleteState
      20: dup
      21: aload_1
      22: invokespecial #233                // Method org/xnio/AbstractIoFuture$CompleteState."<init>":(Ljava/lang/Object;)V
      25: astore_3
      26: aload_0
      27: aload_2
      28: aload_3
      29: invokespecial #114                // Method compareAndSetState:(Lorg/xnio/AbstractIoFuture$State;Lorg/xnio/AbstractIoFuture$State;)Z
      32: ifne          52
      35: aload_0
      36: invokespecial #75                 // Method getState:()Lorg/xnio/AbstractIoFuture$State;
      39: astore_2
      40: aload_2
      41: invokevirtual #77                 // Method org/xnio/AbstractIoFuture$State.getStatus:()Lorg/xnio/IoFuture$Status;
      44: getstatic     #103                // Field org/xnio/IoFuture$Status.WAITING:Lorg/xnio/IoFuture$Status;
      47: if_acmpeq     26
      50: iconst_0
      51: ireturn
      52: aload_2
      53: aload_0
      54: aload_1
      55: invokevirtual #237                // Method org/xnio/AbstractIoFuture$State.notifyDone:(Lorg/xnio/AbstractIoFuture;Ljava/lang/Object;)V
      58: iconst_1
      59: ireturn

  protected boolean setCancelled();
    Code:
       0: aload_0
       1: invokespecial #75                 // Method getState:()Lorg/xnio/AbstractIoFuture$State;
       4: astore_1
       5: aload_1
       6: invokevirtual #77                 // Method org/xnio/AbstractIoFuture$State.getStatus:()Lorg/xnio/IoFuture$Status;
       9: getstatic     #103                // Field org/xnio/IoFuture$Status.WAITING:Lorg/xnio/IoFuture$Status;
      12: if_acmpeq     17
      15: iconst_0
      16: ireturn
      17: getstatic     #242                // Field ST_CANCELLED:Lorg/xnio/AbstractIoFuture$State;
      20: astore_2
      21: aload_0
      22: aload_1
      23: aload_2
      24: invokespecial #114                // Method compareAndSetState:(Lorg/xnio/AbstractIoFuture$State;Lorg/xnio/AbstractIoFuture$State;)Z
      27: ifne          47
      30: aload_0
      31: invokespecial #75                 // Method getState:()Lorg/xnio/AbstractIoFuture$State;
      34: astore_1
      35: aload_1
      36: invokevirtual #77                 // Method org/xnio/AbstractIoFuture$State.getStatus:()Lorg/xnio/IoFuture$Status;
      39: getstatic     #103                // Field org/xnio/IoFuture$Status.WAITING:Lorg/xnio/IoFuture$Status;
      42: if_acmpeq     21
      45: iconst_0
      46: ireturn
      47: aload_1
      48: aload_0
      49: invokevirtual #246                // Method org/xnio/AbstractIoFuture$State.notifyCancelled:(Lorg/xnio/AbstractIoFuture;)V
      52: iconst_1
      53: ireturn

  public org.xnio.IoFuture<T> cancel();
    Code:
       0: aload_0
       1: invokespecial #75                 // Method getState:()Lorg/xnio/AbstractIoFuture$State;
       4: astore_1
       5: aload_1
       6: invokevirtual #77                 // Method org/xnio/AbstractIoFuture$State.getStatus:()Lorg/xnio/IoFuture$Status;
       9: getstatic     #103                // Field org/xnio/IoFuture$Status.WAITING:Lorg/xnio/IoFuture$Status;
      12: if_acmpne     22
      15: aload_1
      16: invokevirtual #252                // Method org/xnio/AbstractIoFuture$State.cancelRequested:()Z
      19: ifeq          24
      22: aload_0
      23: areturn
      24: aload_0
      25: aload_1
      26: new           #15                 // class org/xnio/AbstractIoFuture$CancelRequestedState
      29: dup
      30: aload_1
      31: invokespecial #255                // Method org/xnio/AbstractIoFuture$CancelRequestedState."<init>":(Lorg/xnio/AbstractIoFuture$State;)V
      34: invokespecial #114                // Method compareAndSetState:(Lorg/xnio/AbstractIoFuture$State;Lorg/xnio/AbstractIoFuture$State;)Z
      37: ifeq          0
      40: aload_1
      41: invokevirtual #257                // Method org/xnio/AbstractIoFuture$State.cancel:()V
      44: aload_0
      45: areturn

  protected void addCancelHandler(org.xnio.Cancellable);
    Code:
       0: aload_0
       1: invokespecial #75                 // Method getState:()Lorg/xnio/AbstractIoFuture$State;
       4: astore_2
       5: aload_2
       6: invokevirtual #77                 // Method org/xnio/AbstractIoFuture$State.getStatus:()Lorg/xnio/IoFuture$Status;
       9: getstatic     #103                // Field org/xnio/IoFuture$Status.WAITING:Lorg/xnio/IoFuture$Status;
      12: if_acmpne     22
      15: aload_2
      16: invokevirtual #252                // Method org/xnio/AbstractIoFuture$State.cancelRequested:()Z
      19: ifeq          35
      22: aload_1
      23: invokeinterface #264,  1          // InterfaceMethod org/xnio/Cancellable.cancel:()Lorg/xnio/Cancellable;
      28: pop
      29: goto          34
      32: astore        4
      34: return
      35: aload_2
      36: aload_1
      37: invokevirtual #268                // Method org/xnio/AbstractIoFuture$State.withCancelHandler:(Lorg/xnio/Cancellable;)Lorg/xnio/AbstractIoFuture$State;
      40: astore_3
      41: aload_2
      42: aload_3
      43: if_acmpne     47
      46: return
      47: aload_0
      48: aload_2
      49: aload_3
      50: invokespecial #114                // Method compareAndSetState:(Lorg/xnio/AbstractIoFuture$State;Lorg/xnio/AbstractIoFuture$State;)Z
      53: ifeq          0
      56: return
    Exception table:
       from    to  target type
          22    29    32   Class java/lang/Throwable

  protected void runNotifier(java.lang.Runnable);
    Code:
       0: aload_0
       1: invokevirtual #206                // Method getNotifierExecutor:()Ljava/util/concurrent/Executor;
       4: aload_1
       5: invokeinterface #277,  2          // InterfaceMethod java/util/concurrent/Executor.execute:(Ljava/lang/Runnable;)V
      10: return

  protected java.util.concurrent.Executor getNotifierExecutor();
    Code:
       0: invokestatic  #284                // Method org/xnio/IoUtils.directExecutor:()Ljava/util/concurrent/Executor;
       3: areturn

  public org.xnio.Cancellable cancel();
    Code:
       0: aload_0
       1: invokevirtual #286                // Method cancel:()Lorg/xnio/IoFuture;
       4: areturn

  static {};
    Code:
       0: new           #36                 // class org/xnio/AbstractIoFuture$InitialState
       3: dup
       4: invokespecial #288                // Method org/xnio/AbstractIoFuture$InitialState."<init>":()V
       7: putstatic     #61                 // Field ST_INITIAL:Lorg/xnio/AbstractIoFuture$State;
      10: new           #27                 // class org/xnio/AbstractIoFuture$CancelledState
      13: dup
      14: invokespecial #289                // Method org/xnio/AbstractIoFuture$CancelledState."<init>":()V
      17: putstatic     #242                // Field ST_CANCELLED:Lorg/xnio/AbstractIoFuture$State;
      20: return
}
