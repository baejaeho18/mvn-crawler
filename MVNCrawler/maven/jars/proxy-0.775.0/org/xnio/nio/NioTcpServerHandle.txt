Compiled from "NioTcpServerHandle.java"
final class org.xnio.nio.NioTcpServerHandle extends org.xnio.nio.NioHandle implements org.xnio.nio.ChannelClosed {
  private static final java.lang.String FQCN;

  private final java.lang.Runnable freeTask;

  private final org.xnio.nio.NioTcpServer server;

  private int count;

  private int low;

  private int high;

  private int tokenCount;

  private boolean stopped;

  private boolean backOff;

  private int backOffTime;

  static final boolean $assertionsDisabled;

  org.xnio.nio.NioTcpServerHandle(org.xnio.nio.NioTcpServer, java.nio.channels.SelectionKey, org.xnio.nio.WorkerThread, int, int);
    Code:
       0: aload_0
       1: aload_3
       2: aload_2
       3: invokespecial #2                  // Method org/xnio/nio/NioHandle."<init>":(Lorg/xnio/nio/WorkerThread;Ljava/nio/channels/SelectionKey;)V
       6: aload_0
       7: iconst_m1
       8: putfield      #3                  // Field tokenCount:I
      11: aload_0
      12: iconst_0
      13: putfield      #4                  // Field backOffTime:I
      16: aload_0
      17: aload_1
      18: putfield      #1                  // Field server:Lorg/xnio/nio/NioTcpServer;
      21: aload_0
      22: iload         4
      24: putfield      #5                  // Field low:I
      27: aload_0
      28: iload         5
      30: putfield      #6                  // Field high:I
      33: aload_0
      34: new           #7                  // class org/xnio/nio/NioTcpServerHandle$1
      37: dup
      38: aload_0
      39: invokespecial #8                  // Method org/xnio/nio/NioTcpServerHandle$1."<init>":(Lorg/xnio/nio/NioTcpServerHandle;)V
      42: putfield      #9                  // Field freeTask:Ljava/lang/Runnable;
      45: return

  void handleReady(int);
    Code:
       0: aload_0
       1: getfield      #1                  // Field server:Lorg/xnio/nio/NioTcpServer;
       4: aload_0
       5: getfield      #1                  // Field server:Lorg/xnio/nio/NioTcpServer;
       8: invokevirtual #10                 // Method org/xnio/nio/NioTcpServer.getAcceptListener:()Lorg/xnio/ChannelListener;
      11: invokestatic  #11                 // Method org/xnio/ChannelListeners.invokeChannelListener:(Ljava/nio/channels/Channel;Lorg/xnio/ChannelListener;)Z
      14: pop
      15: return

  void forceTermination();
    Code:
       0: aload_0
       1: getfield      #1                  // Field server:Lorg/xnio/nio/NioTcpServer;
       4: invokestatic  #12                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
       7: return

  void terminated();
    Code:
       0: aload_0
       1: getfield      #1                  // Field server:Lorg/xnio/nio/NioTcpServer;
       4: invokevirtual #13                 // Method org/xnio/nio/NioTcpServer.invokeCloseHandler:()V
       7: return

  java.lang.Runnable getFreeTask();
    Code:
       0: aload_0
       1: getfield      #9                  // Field freeTask:Ljava/lang/Runnable;
       4: areturn

  void resume();
    Code:
       0: aload_0
       1: invokevirtual #14                 // Method getWorkerThread:()Lorg/xnio/nio/WorkerThread;
       4: astore_1
       5: aload_1
       6: invokestatic  #15                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
       9: if_acmpne     45
      12: aload_0
      13: getfield      #16                 // Field stopped:Z
      16: ifne          57
      19: aload_0
      20: getfield      #17                 // Field backOff:Z
      23: ifne          57
      26: aload_0
      27: getfield      #1                  // Field server:Lorg/xnio/nio/NioTcpServer;
      30: getfield      #18                 // Field org/xnio/nio/NioTcpServer.resumed:Z
      33: ifeq          57
      36: aload_0
      37: bipush        16
      39: invokespecial #20                 // Method org/xnio/nio/NioHandle.resume:(I)V
      42: goto          57
      45: aload_1
      46: new           #21                 // class org/xnio/nio/NioTcpServerHandle$2
      49: dup
      50: aload_0
      51: invokespecial #22                 // Method org/xnio/nio/NioTcpServerHandle$2."<init>":(Lorg/xnio/nio/NioTcpServerHandle;)V
      54: invokevirtual #23                 // Method org/xnio/nio/WorkerThread.execute:(Ljava/lang/Runnable;)V
      57: return

  void suspend();
    Code:
       0: aload_0
       1: invokevirtual #14                 // Method getWorkerThread:()Lorg/xnio/nio/WorkerThread;
       4: astore_1
       5: aload_1
       6: invokestatic  #15                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
       9: if_acmpne     45
      12: aload_0
      13: getfield      #16                 // Field stopped:Z
      16: ifne          36
      19: aload_0
      20: getfield      #17                 // Field backOff:Z
      23: ifne          36
      26: aload_0
      27: getfield      #1                  // Field server:Lorg/xnio/nio/NioTcpServer;
      30: getfield      #18                 // Field org/xnio/nio/NioTcpServer.resumed:Z
      33: ifne          57
      36: aload_0
      37: bipush        16
      39: invokespecial #24                 // Method org/xnio/nio/NioHandle.suspend:(I)V
      42: goto          57
      45: aload_1
      46: new           #25                 // class org/xnio/nio/NioTcpServerHandle$3
      49: dup
      50: aload_0
      51: invokespecial #26                 // Method org/xnio/nio/NioTcpServerHandle$3."<init>":(Lorg/xnio/nio/NioTcpServerHandle;)V
      54: invokevirtual #23                 // Method org/xnio/nio/WorkerThread.execute:(Ljava/lang/Runnable;)V
      57: return

  public void channelClosed();
    Code:
       0: aload_0
       1: invokevirtual #14                 // Method getWorkerThread:()Lorg/xnio/nio/WorkerThread;
       4: astore_1
       5: aload_1
       6: invokestatic  #15                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
       9: if_acmpne     19
      12: aload_0
      13: invokevirtual #27                 // Method freeConnection:()V
      16: goto          27
      19: aload_1
      20: aload_0
      21: getfield      #9                  // Field freeTask:Ljava/lang/Runnable;
      24: invokevirtual #23                 // Method org/xnio/nio/WorkerThread.execute:(Ljava/lang/Runnable;)V
      27: return

  void freeConnection();
    Code:
       0: getstatic     #28                 // Field $assertionsDisabled:Z
       3: ifne          24
       6: invokestatic  #15                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
       9: aload_0
      10: invokevirtual #14                 // Method getWorkerThread:()Lorg/xnio/nio/WorkerThread;
      13: if_acmpeq     24
      16: new           #29                 // class java/lang/AssertionError
      19: dup
      20: invokespecial #30                 // Method java/lang/AssertionError."<init>":()V
      23: athrow
      24: aload_0
      25: dup
      26: getfield      #31                 // Field count:I
      29: dup_x1
      30: iconst_1
      31: isub
      32: putfield      #31                 // Field count:I
      35: aload_0
      36: getfield      #5                  // Field low:I
      39: if_icmpgt     103
      42: aload_0
      43: getfield      #3                  // Field tokenCount:I
      46: ifeq          103
      49: aload_0
      50: getfield      #16                 // Field stopped:Z
      53: ifeq          103
      56: getstatic     #32                 // Field org/xnio/nio/Log.tcpServerConnectionLimitLog:Lorg/xnio/nio/Log;
      59: getstatic     #33                 // Field FQCN:Ljava/lang/String;
      62: getstatic     #34                 // Field org/jboss/logging/Logger$Level.DEBUG:Lorg/jboss/logging/Logger$Level;
      65: aconst_null
      66: ldc           #35                 // String Connection freed, resuming accept connections
      68: iconst_0
      69: anewarray     #36                 // class java/lang/Object
      72: invokeinterface #37,  6           // InterfaceMethod org/xnio/nio/Log.logf:(Ljava/lang/String;Lorg/jboss/logging/Logger$Level;Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V
      77: aload_0
      78: iconst_0
      79: putfield      #16                 // Field stopped:Z
      82: aload_0
      83: getfield      #1                  // Field server:Lorg/xnio/nio/NioTcpServer;
      86: getfield      #18                 // Field org/xnio/nio/NioTcpServer.resumed:Z
      89: ifeq          103
      92: aload_0
      93: iconst_0
      94: putfield      #17                 // Field backOff:Z
      97: aload_0
      98: bipush        16
     100: invokespecial #20                 // Method org/xnio/nio/NioHandle.resume:(I)V
     103: return

  void setTokenCount(int);
    Code:
       0: aload_0
       1: invokevirtual #14                 // Method getWorkerThread:()Lorg/xnio/nio/WorkerThread;
       4: astore_2
       5: aload_2
       6: invokestatic  #15                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
       9: if_acmpne     76
      12: aload_0
      13: getfield      #3                  // Field tokenCount:I
      16: ifne          71
      19: aload_0
      20: iload_1
      21: putfield      #3                  // Field tokenCount:I
      24: aload_0
      25: getfield      #31                 // Field count:I
      28: aload_0
      29: getfield      #5                  // Field low:I
      32: if_icmpgt     70
      35: aload_0
      36: getfield      #16                 // Field stopped:Z
      39: ifeq          70
      42: aload_0
      43: iconst_0
      44: putfield      #16                 // Field stopped:Z
      47: aload_0
      48: getfield      #1                  // Field server:Lorg/xnio/nio/NioTcpServer;
      51: getfield      #18                 // Field org/xnio/nio/NioTcpServer.resumed:Z
      54: ifeq          70
      57: aload_0
      58: getfield      #17                 // Field backOff:Z
      61: ifne          70
      64: aload_0
      65: bipush        16
      67: invokespecial #20                 // Method org/xnio/nio/NioHandle.resume:(I)V
      70: return
      71: aload_2
      72: invokevirtual #38                 // Method org/xnio/nio/WorkerThread.getNextThread:()Lorg/xnio/nio/WorkerThread;
      75: astore_2
      76: aload_0
      77: aload_2
      78: iload_1
      79: invokespecial #39                 // Method setThreadNewCount:(Lorg/xnio/nio/WorkerThread;I)V
      82: return

  void startBackOff();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #17                 // Field backOff:Z
       5: aload_0
       6: sipush        250
       9: sipush        30000
      12: aload_0
      13: getfield      #4                  // Field backOffTime:I
      16: iconst_2
      17: ishl
      18: invokestatic  #40                 // Method java/lang/Math.min:(II)I
      21: invokestatic  #41                 // Method java/lang/Math.max:(II)I
      24: putfield      #4                  // Field backOffTime:I
      27: aload_0
      28: invokevirtual #42                 // Method suspend:()V
      31: aload_0
      32: invokevirtual #14                 // Method getWorkerThread:()Lorg/xnio/nio/WorkerThread;
      35: aload_0
      36: invokedynamic #43,  0             // InvokeDynamic #0:run:(Lorg/xnio/nio/NioTcpServerHandle;)Ljava/lang/Runnable;
      41: aload_0
      42: getfield      #4                  // Field backOffTime:I
      45: i2l
      46: getstatic     #44                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      49: invokevirtual #45                 // Method org/xnio/nio/WorkerThread.executeAfter:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lorg/xnio/XnioExecutor$Key;
      52: pop
      53: return

  void endBackOff();
    Code:
       0: aload_0
       1: iconst_0
       2: putfield      #17                 // Field backOff:Z
       5: aload_0
       6: invokevirtual #46                 // Method resume:()V
       9: return

  void resetBackOff();
    Code:
       0: aload_0
       1: iconst_0
       2: putfield      #4                  // Field backOffTime:I
       5: return

  private void setThreadNewCount(org.xnio.nio.WorkerThread, int);
    Code:
       0: aload_1
       1: invokevirtual #47                 // Method org/xnio/nio/WorkerThread.getNumber:()I
       4: istore_3
       5: aload_1
       6: new           #48                 // class org/xnio/nio/NioTcpServerHandle$4
       9: dup
      10: aload_0
      11: iload_3
      12: iload_2
      13: invokespecial #49                 // Method org/xnio/nio/NioTcpServerHandle$4."<init>":(Lorg/xnio/nio/NioTcpServerHandle;II)V
      16: invokevirtual #23                 // Method org/xnio/nio/WorkerThread.execute:(Ljava/lang/Runnable;)V
      19: return

  void initializeTokenCount(int);
    Code:
       0: aload_0
       1: invokevirtual #14                 // Method getWorkerThread:()Lorg/xnio/nio/WorkerThread;
       4: astore_2
       5: aload_2
       6: invokevirtual #47                 // Method org/xnio/nio/WorkerThread.getNumber:()I
       9: istore_3
      10: aload_2
      11: invokestatic  #15                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      14: if_acmpne     40
      17: aload_0
      18: iload_1
      19: putfield      #3                  // Field tokenCount:I
      22: iload_1
      23: ifne          54
      26: aload_0
      27: iconst_1
      28: putfield      #16                 // Field stopped:Z
      31: aload_0
      32: bipush        16
      34: invokespecial #24                 // Method org/xnio/nio/NioHandle.suspend:(I)V
      37: goto          54
      40: aload_2
      41: new           #50                 // class org/xnio/nio/NioTcpServerHandle$5
      44: dup
      45: aload_0
      46: iload_3
      47: iload_1
      48: invokespecial #51                 // Method org/xnio/nio/NioTcpServerHandle$5."<init>":(Lorg/xnio/nio/NioTcpServerHandle;II)V
      51: invokevirtual #23                 // Method org/xnio/nio/WorkerThread.execute:(Ljava/lang/Runnable;)V
      54: return

  boolean getConnection();
    Code:
       0: getstatic     #28                 // Field $assertionsDisabled:Z
       3: ifne          24
       6: invokestatic  #15                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
       9: aload_0
      10: invokevirtual #14                 // Method getWorkerThread:()Lorg/xnio/nio/WorkerThread;
      13: if_acmpeq     24
      16: new           #29                 // class java/lang/AssertionError
      19: dup
      20: invokespecial #30                 // Method java/lang/AssertionError."<init>":()V
      23: athrow
      24: aload_0
      25: getfield      #16                 // Field stopped:Z
      28: ifne          38
      31: aload_0
      32: getfield      #17                 // Field backOff:Z
      35: ifeq          71
      38: getstatic     #32                 // Field org/xnio/nio/Log.tcpServerConnectionLimitLog:Lorg/xnio/nio/Log;
      41: getstatic     #33                 // Field FQCN:Ljava/lang/String;
      44: getstatic     #34                 // Field org/jboss/logging/Logger$Level.DEBUG:Lorg/jboss/logging/Logger$Level;
      47: aconst_null
      48: ldc           #52                 // String Refusing accepting request (temporarily stopped: %s, backed off: %s)
      50: aload_0
      51: getfield      #16                 // Field stopped:Z
      54: invokestatic  #53                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      57: aload_0
      58: getfield      #17                 // Field backOff:Z
      61: invokestatic  #53                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      64: invokeinterface #54,  7           // InterfaceMethod org/xnio/nio/Log.logf:(Ljava/lang/String;Lorg/jboss/logging/Logger$Level;Ljava/lang/Throwable;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      69: iconst_0
      70: ireturn
      71: aload_0
      72: getfield      #3                  // Field tokenCount:I
      75: iconst_m1
      76: if_icmpeq     111
      79: aload_0
      80: dup
      81: getfield      #3                  // Field tokenCount:I
      84: iconst_1
      85: isub
      86: dup_x1
      87: putfield      #3                  // Field tokenCount:I
      90: ifne          111
      93: aload_0
      94: aload_0
      95: invokevirtual #14                 // Method getWorkerThread:()Lorg/xnio/nio/WorkerThread;
      98: invokevirtual #38                 // Method org/xnio/nio/WorkerThread.getNextThread:()Lorg/xnio/nio/WorkerThread;
     101: aload_0
     102: getfield      #1                  // Field server:Lorg/xnio/nio/NioTcpServer;
     105: invokevirtual #55                 // Method org/xnio/nio/NioTcpServer.getTokenConnectionCount:()I
     108: invokespecial #39                 // Method setThreadNewCount:(Lorg/xnio/nio/WorkerThread;I)V
     111: aload_0
     112: dup
     113: getfield      #31                 // Field count:I
     116: iconst_1
     117: iadd
     118: dup_x1
     119: putfield      #31                 // Field count:I
     122: aload_0
     123: getfield      #6                  // Field high:I
     126: if_icmpge     136
     129: aload_0
     130: getfield      #3                  // Field tokenCount:I
     133: ifne          193
     136: getstatic     #56                 // Field org/xnio/nio/Log.tcpServerLog:Lorg/xnio/nio/Log;
     139: invokeinterface #57,  1           // InterfaceMethod org/xnio/nio/Log.isDebugEnabled:()Z
     144: ifeq          182
     147: aload_0
     148: getfield      #31                 // Field count:I
     151: aload_0
     152: getfield      #6                  // Field high:I
     155: if_icmplt     182
     158: getstatic     #32                 // Field org/xnio/nio/Log.tcpServerConnectionLimitLog:Lorg/xnio/nio/Log;
     161: getstatic     #33                 // Field FQCN:Ljava/lang/String;
     164: getstatic     #34                 // Field org/jboss/logging/Logger$Level.DEBUG:Lorg/jboss/logging/Logger$Level;
     167: aconst_null
     168: ldc           #58                 // String Total open connections reach high water limit (%s) by this new accepting request. Temporarily stopping accept connections
     170: aload_0
     171: getfield      #6                  // Field high:I
     174: invokestatic  #59                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     177: invokeinterface #60,  6           // InterfaceMethod org/xnio/nio/Log.logf:(Ljava/lang/String;Lorg/jboss/logging/Logger$Level;Ljava/lang/Throwable;Ljava/lang/String;Ljava/lang/Object;)V
     182: aload_0
     183: iconst_1
     184: putfield      #16                 // Field stopped:Z
     187: aload_0
     188: bipush        16
     190: invokespecial #24                 // Method org/xnio/nio/NioHandle.suspend:(I)V
     193: iconst_1
     194: ireturn

  public void executeSetTask(int, int);
    Code:
       0: aload_0
       1: invokevirtual #14                 // Method getWorkerThread:()Lorg/xnio/nio/WorkerThread;
       4: astore_3
       5: aload_3
       6: invokestatic  #15                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
       9: if_acmpne     93
      12: aload_0
      13: iload_1
      14: putfield      #6                  // Field high:I
      17: aload_0
      18: iload_2
      19: putfield      #5                  // Field low:I
      22: aload_0
      23: getfield      #31                 // Field count:I
      26: iload_1
      27: if_icmplt     49
      30: aload_0
      31: getfield      #16                 // Field stopped:Z
      34: ifne          49
      37: aload_0
      38: iconst_1
      39: putfield      #16                 // Field stopped:Z
      42: aload_0
      43: invokevirtual #42                 // Method suspend:()V
      46: goto          107
      49: aload_0
      50: getfield      #31                 // Field count:I
      53: iload_2
      54: if_icmpgt     107
      57: aload_0
      58: getfield      #16                 // Field stopped:Z
      61: ifeq          107
      64: aload_0
      65: iconst_0
      66: putfield      #16                 // Field stopped:Z
      69: aload_0
      70: getfield      #1                  // Field server:Lorg/xnio/nio/NioTcpServer;
      73: getfield      #18                 // Field org/xnio/nio/NioTcpServer.resumed:Z
      76: ifeq          107
      79: aload_0
      80: getfield      #17                 // Field backOff:Z
      83: ifne          107
      86: aload_0
      87: invokevirtual #46                 // Method resume:()V
      90: goto          107
      93: aload_3
      94: new           #61                 // class org/xnio/nio/NioTcpServerHandle$6
      97: dup
      98: aload_0
      99: iload_1
     100: iload_2
     101: invokespecial #62                 // Method org/xnio/nio/NioTcpServerHandle$6."<init>":(Lorg/xnio/nio/NioTcpServerHandle;II)V
     104: invokevirtual #23                 // Method org/xnio/nio/WorkerThread.execute:(Ljava/lang/Runnable;)V
     107: return

  int getConnectionCount();
    Code:
       0: getstatic     #28                 // Field $assertionsDisabled:Z
       3: ifne          24
       6: invokestatic  #15                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
       9: aload_0
      10: invokevirtual #14                 // Method getWorkerThread:()Lorg/xnio/nio/WorkerThread;
      13: if_acmpeq     24
      16: new           #29                 // class java/lang/AssertionError
      19: dup
      20: invokespecial #30                 // Method java/lang/AssertionError."<init>":()V
      23: athrow
      24: aload_0
      25: getfield      #31                 // Field count:I
      28: ireturn

  int getBackOffTime();
    Code:
       0: aload_0
       1: getfield      #4                  // Field backOffTime:I
       4: ireturn

  static org.xnio.nio.NioTcpServer access$000(org.xnio.nio.NioTcpServerHandle);
    Code:
       0: aload_0
       1: getfield      #1                  // Field server:Lorg/xnio/nio/NioTcpServer;
       4: areturn

  static {};
    Code:
       0: ldc           #63                 // class org/xnio/nio/NioTcpServerHandle
       2: invokevirtual #64                 // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #28                 // Field $assertionsDisabled:Z
      16: ldc           #63                 // class org/xnio/nio/NioTcpServerHandle
      18: invokevirtual #65                 // Method java/lang/Class.getName:()Ljava/lang/String;
      21: putstatic     #33                 // Field FQCN:Ljava/lang/String;
      24: return
}
