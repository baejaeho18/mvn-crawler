Compiled from "QueuedNioTcpServer2.java"
final class org.xnio.nio.QueuedNioTcpServer2 extends org.xnio.nio.AbstractNioChannel<org.xnio.nio.QueuedNioTcpServer2> implements org.xnio.channels.AcceptingChannel<org.xnio.StreamConnection>, org.xnio.channels.AcceptListenerSettable<org.xnio.nio.QueuedNioTcpServer2> {
  private final org.xnio.nio.NioTcpServer realServer;

  private final java.util.List<java.util.Queue<org.xnio.StreamConnection>> acceptQueues;

  private final java.lang.Runnable acceptTask;

  private volatile org.xnio.ChannelListener<? super org.xnio.nio.QueuedNioTcpServer2> acceptListener;

  static final boolean $assertionsDisabled;

  org.xnio.nio.QueuedNioTcpServer2(org.xnio.nio.NioTcpServer);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #1                  // Method org/xnio/nio/NioTcpServer.getWorker:()Lorg/xnio/nio/NioXnioWorker;
       5: invokespecial #2                  // Method org/xnio/nio/AbstractNioChannel."<init>":(Lorg/xnio/nio/NioXnioWorker;)V
       8: aload_0
       9: aload_0
      10: invokedynamic #3,  0              // InvokeDynamic #0:run:(Lorg/xnio/nio/QueuedNioTcpServer2;)Ljava/lang/Runnable;
      15: putfield      #4                  // Field acceptTask:Ljava/lang/Runnable;
      18: aload_0
      19: aload_1
      20: putfield      #5                  // Field realServer:Lorg/xnio/nio/NioTcpServer;
      23: aload_1
      24: invokevirtual #1                  // Method org/xnio/nio/NioTcpServer.getWorker:()Lorg/xnio/nio/NioXnioWorker;
      27: astore_2
      28: aload_2
      29: invokevirtual #6                  // Method org/xnio/nio/NioXnioWorker.getIoThreadCount:()I
      32: istore_3
      33: aload_0
      34: new           #7                  // class java/util/ArrayList
      37: dup
      38: iload_3
      39: invokespecial #8                  // Method java/util/ArrayList."<init>":(I)V
      42: putfield      #9                  // Field acceptQueues:Ljava/util/List;
      45: iconst_0
      46: istore        4
      48: iload         4
      50: iload_3
      51: if_icmpge     77
      54: aload_0
      55: getfield      #9                  // Field acceptQueues:Ljava/util/List;
      58: new           #10                 // class java/util/concurrent/LinkedBlockingQueue
      61: dup
      62: invokespecial #11                 // Method java/util/concurrent/LinkedBlockingQueue."<init>":()V
      65: invokeinterface #12,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      70: pop
      71: iinc          4, 1
      74: goto          48
      77: aload_1
      78: invokevirtual #13                 // Method org/xnio/nio/NioTcpServer.getCloseSetter:()Lorg/xnio/ChannelListener$Setter;
      81: aload_0
      82: invokedynamic #14,  0             // InvokeDynamic #1:handleEvent:(Lorg/xnio/nio/QueuedNioTcpServer2;)Lorg/xnio/ChannelListener;
      87: invokeinterface #15,  2           // InterfaceMethod org/xnio/ChannelListener$Setter.set:(Lorg/xnio/ChannelListener;)V
      92: aload_1
      93: invokevirtual #16                 // Method org/xnio/nio/NioTcpServer.getAcceptSetter:()Lorg/xnio/ChannelListener$Setter;
      96: aload_0
      97: invokedynamic #17,  0             // InvokeDynamic #2:handleEvent:(Lorg/xnio/nio/QueuedNioTcpServer2;)Lorg/xnio/ChannelListener;
     102: invokeinterface #15,  2           // InterfaceMethod org/xnio/ChannelListener$Setter.set:(Lorg/xnio/ChannelListener;)V
     107: return

  public org.xnio.StreamConnection accept() throws java.io.IOException;
    Code:
       0: invokestatic  #18                 // Method org/xnio/nio/WorkerThread.getCurrent:()Lorg/xnio/nio/WorkerThread;
       3: astore_1
       4: aload_1
       5: ifnonnull     10
       8: aconst_null
       9: areturn
      10: aload_0
      11: getfield      #9                  // Field acceptQueues:Ljava/util/List;
      14: aload_1
      15: invokevirtual #19                 // Method org/xnio/nio/WorkerThread.getNumber:()I
      18: invokeinterface #20,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      23: checkcast     #21                 // class java/util/Queue
      26: astore_2
      27: aload_2
      28: invokeinterface #22,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
      33: checkcast     #23                 // class org/xnio/StreamConnection
      36: astore_3
      37: aload_3
      38: ifnonnull     59
      41: aload_0
      42: getfield      #5                  // Field realServer:Lorg/xnio/nio/NioTcpServer;
      45: invokevirtual #24                 // Method org/xnio/nio/NioTcpServer.isOpen:()Z
      48: ifne          59
      51: new           #25                 // class java/nio/channels/ClosedChannelException
      54: dup
      55: invokespecial #26                 // Method java/nio/channels/ClosedChannelException."<init>":()V
      58: athrow
      59: aload_3
      60: areturn

  public org.xnio.ChannelListener<? super org.xnio.nio.QueuedNioTcpServer2> getAcceptListener();
    Code:
       0: aload_0
       1: getfield      #27                 // Field acceptListener:Lorg/xnio/ChannelListener;
       4: areturn

  public void setAcceptListener(org.xnio.ChannelListener<? super org.xnio.nio.QueuedNioTcpServer2>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #27                 // Field acceptListener:Lorg/xnio/ChannelListener;
       5: return

  public org.xnio.ChannelListener$Setter<org.xnio.nio.QueuedNioTcpServer2> getAcceptSetter();
    Code:
       0: new           #28                 // class org/xnio/channels/AcceptListenerSettable$Setter
       3: dup
       4: aload_0
       5: invokespecial #29                 // Method org/xnio/channels/AcceptListenerSettable$Setter."<init>":(Lorg/xnio/channels/AcceptListenerSettable;)V
       8: areturn

  public java.net.SocketAddress getLocalAddress();
    Code:
       0: aload_0
       1: getfield      #5                  // Field realServer:Lorg/xnio/nio/NioTcpServer;
       4: invokevirtual #30                 // Method org/xnio/nio/NioTcpServer.getLocalAddress:()Ljava/net/SocketAddress;
       7: areturn

  public <A extends java.net.SocketAddress> A getLocalAddress(java.lang.Class<A>);
    Code:
       0: aload_0
       1: getfield      #5                  // Field realServer:Lorg/xnio/nio/NioTcpServer;
       4: aload_1
       5: invokevirtual #31                 // Method org/xnio/nio/NioTcpServer.getLocalAddress:(Ljava/lang/Class;)Ljava/net/SocketAddress;
       8: areturn

  public void suspendAccepts();
    Code:
       0: aload_0
       1: getfield      #5                  // Field realServer:Lorg/xnio/nio/NioTcpServer;
       4: invokevirtual #32                 // Method org/xnio/nio/NioTcpServer.suspendAccepts:()V
       7: return

  public void resumeAccepts();
    Code:
       0: aload_0
       1: getfield      #5                  // Field realServer:Lorg/xnio/nio/NioTcpServer;
       4: invokevirtual #33                 // Method org/xnio/nio/NioTcpServer.resumeAccepts:()V
       7: return

  public boolean isAcceptResumed();
    Code:
       0: aload_0
       1: getfield      #5                  // Field realServer:Lorg/xnio/nio/NioTcpServer;
       4: invokevirtual #34                 // Method org/xnio/nio/NioTcpServer.isAcceptResumed:()Z
       7: ireturn

  public void wakeupAccepts();
    Code:
       0: aload_0
       1: getfield      #5                  // Field realServer:Lorg/xnio/nio/NioTcpServer;
       4: invokevirtual #35                 // Method org/xnio/nio/NioTcpServer.wakeupAccepts:()V
       7: return

  public void awaitAcceptable();
    Code:
       0: invokestatic  #36                 // Method org/wildfly/common/Assert.unsupported:()Ljava/lang/UnsupportedOperationException;
       3: athrow

  public void awaitAcceptable(long, java.util.concurrent.TimeUnit);
    Code:
       0: invokestatic  #36                 // Method org/wildfly/common/Assert.unsupported:()Ljava/lang/UnsupportedOperationException;
       3: athrow

  public org.xnio.XnioExecutor getAcceptThread();
    Code:
       0: aload_0
       1: invokevirtual #37                 // Method getIoThread:()Lorg/xnio/XnioIoThread;
       4: areturn

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #5                  // Field realServer:Lorg/xnio/nio/NioTcpServer;
       4: invokevirtual #38                 // Method org/xnio/nio/NioTcpServer.close:()V
       7: return

  public boolean isOpen();
    Code:
       0: aload_0
       1: getfield      #5                  // Field realServer:Lorg/xnio/nio/NioTcpServer;
       4: invokevirtual #24                 // Method org/xnio/nio/NioTcpServer.isOpen:()Z
       7: ireturn

  public boolean supportsOption(org.xnio.Option<?>);
    Code:
       0: aload_0
       1: getfield      #5                  // Field realServer:Lorg/xnio/nio/NioTcpServer;
       4: aload_1
       5: invokevirtual #39                 // Method org/xnio/nio/NioTcpServer.supportsOption:(Lorg/xnio/Option;)Z
       8: ireturn

  public <T> T getOption(org.xnio.Option<T>) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #5                  // Field realServer:Lorg/xnio/nio/NioTcpServer;
       4: aload_1
       5: invokevirtual #40                 // Method org/xnio/nio/NioTcpServer.getOption:(Lorg/xnio/Option;)Ljava/lang/Object;
       8: areturn

  public <T> T setOption(org.xnio.Option<T>, T) throws java.lang.IllegalArgumentException, java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #5                  // Field realServer:Lorg/xnio/nio/NioTcpServer;
       4: aload_1
       5: aload_2
       6: invokevirtual #41                 // Method org/xnio/nio/NioTcpServer.setOption:(Lorg/xnio/Option;Ljava/lang/Object;)Ljava/lang/Object;
       9: areturn

  void handleReady();
    Code:
       0: aload_0
       1: getfield      #5                  // Field realServer:Lorg/xnio/nio/NioTcpServer;
       4: astore_1
       5: aload_1
       6: invokevirtual #42                 // Method org/xnio/nio/NioTcpServer.accept:()Lorg/xnio/nio/NioSocketStreamConnection;
       9: astore_2
      10: goto          15
      13: astore_3
      14: return
      15: aload_2
      16: ifnull        89
      19: iconst_0
      20: istore        4
      22: aload_0
      23: getfield      #4                  // Field acceptTask:Ljava/lang/Runnable;
      26: astore        5
      28: aload_2
      29: invokevirtual #43                 // Method org/xnio/nio/NioSocketStreamConnection.getIoThread:()Lorg/xnio/XnioIoThread;
      32: astore_3
      33: aload_0
      34: getfield      #9                  // Field acceptQueues:Ljava/util/List;
      37: aload_3
      38: invokevirtual #44                 // Method org/xnio/XnioIoThread.getNumber:()I
      41: invokeinterface #20,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      46: checkcast     #21                 // class java/util/Queue
      49: aload_2
      50: invokeinterface #45,  2           // InterfaceMethod java/util/Queue.add:(Ljava/lang/Object;)Z
      55: pop
      56: aload_3
      57: aload         5
      59: invokevirtual #46                 // Method org/xnio/XnioIoThread.execute:(Ljava/lang/Runnable;)V
      62: iinc          4, 1
      65: iload         4
      67: sipush        128
      70: if_icmpne     74
      73: return
      74: aload_1
      75: invokevirtual #42                 // Method org/xnio/nio/NioTcpServer.accept:()Lorg/xnio/nio/NioSocketStreamConnection;
      78: astore_2
      79: goto          85
      82: astore        6
      84: return
      85: aload_2
      86: ifnonnull     28
      89: return
    Exception table:
       from    to  target type
           5    10    13   Class java/nio/channels/ClosedChannelException
          74    79    82   Class java/nio/channels/ClosedChannelException

  void acceptTask();
    Code:
       0: invokestatic  #18                 // Method org/xnio/nio/WorkerThread.getCurrent:()Lorg/xnio/nio/WorkerThread;
       3: astore_1
       4: getstatic     #47                 // Field $assertionsDisabled:Z
       7: ifne          22
      10: aload_1
      11: ifnonnull     22
      14: new           #48                 // class java/lang/AssertionError
      17: dup
      18: invokespecial #49                 // Method java/lang/AssertionError."<init>":()V
      21: athrow
      22: aload_0
      23: getfield      #9                  // Field acceptQueues:Ljava/util/List;
      26: aload_1
      27: invokevirtual #19                 // Method org/xnio/nio/WorkerThread.getNumber:()I
      30: invokeinterface #20,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      35: checkcast     #21                 // class java/util/Queue
      38: astore_2
      39: aload_0
      40: aload_0
      41: invokevirtual #50                 // Method getAcceptListener:()Lorg/xnio/ChannelListener;
      44: invokestatic  #51                 // Method org/xnio/ChannelListeners.invokeChannelListener:(Ljava/nio/channels/Channel;Lorg/xnio/ChannelListener;)Z
      47: pop
      48: aload_2
      49: invokeinterface #52,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
      54: ifne          65
      57: aload_1
      58: aload_0
      59: getfield      #4                  // Field acceptTask:Ljava/lang/Runnable;
      62: invokevirtual #53                 // Method org/xnio/nio/WorkerThread.execute:(Ljava/lang/Runnable;)V
      65: return

  public org.xnio.channels.ConnectedChannel accept() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #54                 // Method accept:()Lorg/xnio/StreamConnection;
       4: areturn

  public org.xnio.channels.CloseableChannel accept() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #54                 // Method accept:()Lorg/xnio/StreamConnection;
       4: areturn

  private void lambda$new$1(org.xnio.nio.NioTcpServer);
    Code:
       0: aload_0
       1: invokevirtual #55                 // Method handleReady:()V
       4: return

  private void lambda$new$0(org.xnio.nio.NioTcpServer);
    Code:
       0: aload_0
       1: invokevirtual #56                 // Method invokeCloseHandler:()V
       4: return

  static {};
    Code:
       0: ldc           #57                 // class org/xnio/nio/QueuedNioTcpServer2
       2: invokevirtual #58                 // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #47                 // Field $assertionsDisabled:Z
      16: return
}
