Compiled from "EnhancedQueueExecutor.java"
public final class org.jboss.threads.EnhancedQueueExecutor extends org.jboss.threads.EnhancedQueueExecutorBase6 implements org.jboss.threads.management.ManageableThreadPoolExecutorService,java.util.concurrent.ScheduledExecutorService {
  private static final java.lang.Thread[] NO_THREADS;

  public static final boolean DISABLE_HINT;

  static final boolean UPDATE_STATISTICS;

  static final boolean UPDATE_ACTIVE_COUNT;

  static final boolean NO_QUEUE_LIMIT;

  static final boolean REGISTER_MBEAN;

  static final boolean DISABLE_MBEAN;

  static final int PARK_SPINS;

  static final int YIELD_FACTOR;

  static final java.util.concurrent.Executor DEFAULT_HANDLER;

  private final java.util.concurrent.ThreadFactory threadFactory;

  private final java.util.Set<java.lang.Thread> runningThreads;

  private final org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl mxBean;

  private final java.lang.Object handle;

  private volatile java.security.AccessControlContext acc;

  private final org.jboss.threads.ContextHandler<?> contextHandler;

  private final org.jboss.threads.EnhancedQueueExecutor$SchedulerTask schedulerTask;

  private final java.lang.Thread schedulerThread;

  volatile org.jboss.threads.Waiter terminationWaiters;

  volatile long queueSize;

  volatile long timeoutNanos;

  volatile float growthResistance;

  volatile java.util.concurrent.Executor handoffExecutor;

  volatile java.lang.Thread$UncaughtExceptionHandler exceptionHandler;

  volatile java.lang.Runnable terminationTask;

  volatile int peakThreadCount;

  volatile int peakQueueSize;

  private final java.util.concurrent.atomic.LongAdder submittedTaskCounter;

  private final java.util.concurrent.atomic.LongAdder completedTaskCounter;

  private final java.util.concurrent.atomic.LongAdder rejectedTaskCounter;

  private final java.util.concurrent.atomic.LongAdder spinMisses;

  volatile int activeCount;

  private static final long terminationWaitersOffset;

  private static final long queueSizeOffset;

  private static final long peakThreadCountOffset;

  private static final long activeCountOffset;

  private static final long peakQueueSizeOffset;

  private static final long TS_THREAD_CNT_MASK;

  private static final long TS_CURRENT_SHIFT;

  private static final long TS_CORE_SHIFT;

  private static final long TS_MAX_SHIFT;

  private static final long TS_ALLOW_CORE_TIMEOUT;

  private static final long TS_SHUTDOWN_REQUESTED;

  private static final long TS_SHUTDOWN_INTERRUPT;

  private static final long TS_SHUTDOWN_COMPLETE;

  private static final int EXE_OK;

  private static final int EXE_REJECT_QUEUE_FULL;

  private static final int EXE_REJECT_SHUTDOWN;

  private static final int EXE_CREATE_THREAD;

  private static final int AT_YES;

  private static final int AT_NO;

  private static final int AT_SHUTDOWN;

  static final org.jboss.threads.EnhancedQueueExecutor$QNode TERMINATE_REQUESTED;

  static final org.jboss.threads.EnhancedQueueExecutor$QNode TERMINATE_COMPLETE;

  static final org.jboss.threads.Waiter TERMINATE_COMPLETE_WAITER;

  static final java.lang.Runnable WAITING;

  static final java.lang.Runnable GAVE_UP;

  static final java.lang.Runnable ACCEPTED;

  static final java.lang.Runnable EXIT;

  static final java.util.concurrent.atomic.AtomicInteger sequence;

  static final int ASF_ST_WAITING;

  static final int ASF_ST_CANCELLED;

  static final int ASF_ST_SUBMITTED;

  static final int ASF_ST_RUNNING;

  static final int ASF_ST_FINISHED;

  static final int ASF_ST_FAILED;

  static final int ASF_ST_REJECTED;

  static final org.jboss.threads.EnhancedQueueExecutor$AbstractScheduledFuture<?>[] NO_FUTURES;

  static final java.util.concurrent.atomic.AtomicLong SCHEDULED_TASK_SEQ;

  static final boolean $assertionsDisabled;

  org.jboss.threads.EnhancedQueueExecutor(org.jboss.threads.EnhancedQueueExecutor$Builder);
    Code:
       0: aload_0
       1: invokespecial #9                  // Method org/jboss/threads/EnhancedQueueExecutorBase6."<init>":()V
       4: aload_0
       5: new           #10                 // class java/util/concurrent/ConcurrentHashMap
       8: dup
       9: invokespecial #11                 // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      12: invokestatic  #12                 // Method java/util/Collections.newSetFromMap:(Ljava/util/Map;)Ljava/util/Set;
      15: putfield      #7                  // Field runningThreads:Ljava/util/Set;
      18: aload_0
      19: new           #13                 // class org/jboss/threads/EnhancedQueueExecutor$SchedulerTask
      22: dup
      23: aload_0
      24: invokespecial #14                 // Method org/jboss/threads/EnhancedQueueExecutor$SchedulerTask."<init>":(Lorg/jboss/threads/EnhancedQueueExecutor;)V
      27: putfield      #4                  // Field schedulerTask:Lorg/jboss/threads/EnhancedQueueExecutor$SchedulerTask;
      30: aload_0
      31: new           #15                 // class java/util/concurrent/atomic/LongAdder
      34: dup
      35: invokespecial #16                 // Method java/util/concurrent/atomic/LongAdder."<init>":()V
      38: putfield      #2                  // Field submittedTaskCounter:Ljava/util/concurrent/atomic/LongAdder;
      41: aload_0
      42: new           #15                 // class java/util/concurrent/atomic/LongAdder
      45: dup
      46: invokespecial #16                 // Method java/util/concurrent/atomic/LongAdder."<init>":()V
      49: putfield      #5                  // Field completedTaskCounter:Ljava/util/concurrent/atomic/LongAdder;
      52: aload_0
      53: new           #15                 // class java/util/concurrent/atomic/LongAdder
      56: dup
      57: invokespecial #16                 // Method java/util/concurrent/atomic/LongAdder."<init>":()V
      60: putfield      #1                  // Field rejectedTaskCounter:Ljava/util/concurrent/atomic/LongAdder;
      63: aload_0
      64: new           #15                 // class java/util/concurrent/atomic/LongAdder
      67: dup
      68: invokespecial #16                 // Method java/util/concurrent/atomic/LongAdder."<init>":()V
      71: putfield      #8                  // Field spinMisses:Ljava/util/concurrent/atomic/LongAdder;
      74: aload_1
      75: invokevirtual #17                 // Method org/jboss/threads/EnhancedQueueExecutor$Builder.getMaximumPoolSize:()I
      78: istore_2
      79: aload_1
      80: invokevirtual #18                 // Method org/jboss/threads/EnhancedQueueExecutor$Builder.getCorePoolSize:()I
      83: iload_2
      84: invokestatic  #19                 // Method java/lang/Math.min:(II)I
      87: istore_3
      88: aload_0
      89: aload_1
      90: invokevirtual #20                 // Method org/jboss/threads/EnhancedQueueExecutor$Builder.getHandoffExecutor:()Ljava/util/concurrent/Executor;
      93: putfield      #21                 // Field handoffExecutor:Ljava/util/concurrent/Executor;
      96: aload_0
      97: aload_1
      98: invokevirtual #22                 // Method org/jboss/threads/EnhancedQueueExecutor$Builder.getExceptionHandler:()Ljava/lang/Thread$UncaughtExceptionHandler;
     101: putfield      #23                 // Field exceptionHandler:Ljava/lang/Thread$UncaughtExceptionHandler;
     104: aload_0
     105: aload_1
     106: invokevirtual #24                 // Method org/jboss/threads/EnhancedQueueExecutor$Builder.getThreadFactory:()Ljava/util/concurrent/ThreadFactory;
     109: putfield      #25                 // Field threadFactory:Ljava/util/concurrent/ThreadFactory;
     112: aload_0
     113: aload_0
     114: getfield      #25                 // Field threadFactory:Ljava/util/concurrent/ThreadFactory;
     117: aload_0
     118: getfield      #4                  // Field schedulerTask:Lorg/jboss/threads/EnhancedQueueExecutor$SchedulerTask;
     121: invokeinterface #26,  2           // InterfaceMethod java/util/concurrent/ThreadFactory.newThread:(Ljava/lang/Runnable;)Ljava/lang/Thread;
     126: putfield      #27                 // Field schedulerThread:Ljava/lang/Thread;
     129: aload_0
     130: getfield      #27                 // Field schedulerThread:Ljava/lang/Thread;
     133: invokevirtual #28                 // Method java/lang/Thread.getName:()Ljava/lang/String;
     136: astore        4
     138: aload_0
     139: getfield      #27                 // Field schedulerThread:Ljava/lang/Thread;
     142: new           #29                 // class java/lang/StringBuilder
     145: dup
     146: invokespecial #30                 // Method java/lang/StringBuilder."<init>":()V
     149: aload         4
     151: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     154: ldc           #32                 // String  (scheduler)
     156: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     159: invokevirtual #33                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     162: invokevirtual #34                 // Method java/lang/Thread.setName:(Ljava/lang/String;)V
     165: aload_0
     166: aload_1
     167: invokevirtual #35                 // Method org/jboss/threads/EnhancedQueueExecutor$Builder.getTerminationTask:()Ljava/lang/Runnable;
     170: putfield      #36                 // Field terminationTask:Ljava/lang/Runnable;
     173: aload_0
     174: aload_1
     175: invokevirtual #37                 // Method org/jboss/threads/EnhancedQueueExecutor$Builder.getGrowthResistance:()F
     178: putfield      #38                 // Field growthResistance:F
     181: aload_0
     182: aload_1
     183: invokevirtual #39                 // Method org/jboss/threads/EnhancedQueueExecutor$Builder.getContextHandler:()Lorg/jboss/threads/ContextHandler;
     186: putfield      #6                  // Field contextHandler:Lorg/jboss/threads/ContextHandler;
     189: aload_1
     190: invokevirtual #40                 // Method org/jboss/threads/EnhancedQueueExecutor$Builder.getKeepAliveTime:()Ljava/time/Duration;
     193: astore        5
     195: aload_0
     196: lconst_0
     197: aload_1
     198: invokevirtual #41                 // Method org/jboss/threads/EnhancedQueueExecutor$Builder.allowsCoreThreadTimeOut:()Z
     201: invokestatic  #42                 // Method withAllowCoreTimeout:(JZ)J
     204: iload_2
     205: invokestatic  #43                 // Method withMaxSize:(JI)J
     208: iload_3
     209: invokestatic  #44                 // Method withCoreSize:(JI)J
     212: putfield      #45                 // Field threadStatus:J
     215: aload_0
     216: aload         5
     218: invokestatic  #46                 // Method org/jboss/threads/TimeUtil.clampedPositiveNanos:(Ljava/time/Duration;)J
     221: putfield      #47                 // Field timeoutNanos:J
     224: aload_0
     225: lconst_0
     226: iconst_0
     227: invokestatic  #48                 // Method withCurrentQueueSize:(JI)J
     230: aload_1
     231: invokevirtual #49                 // Method org/jboss/threads/EnhancedQueueExecutor$Builder.getMaximumQueueSize:()I
     234: invokestatic  #50                 // Method withMaxQueueSize:(JI)J
     237: putfield      #51                 // Field queueSize:J
     240: aload_0
     241: new           #52                 // class org/jboss/threads/EnhancedQueueExecutor$MXBeanImpl
     244: dup
     245: aload_0
     246: invokespecial #53                 // Method org/jboss/threads/EnhancedQueueExecutor$MXBeanImpl."<init>":(Lorg/jboss/threads/EnhancedQueueExecutor;)V
     249: putfield      #54                 // Field mxBean:Lorg/jboss/threads/EnhancedQueueExecutor$MXBeanImpl;
     252: getstatic     #55                 // Field DISABLE_MBEAN:Z
     255: ifne          341
     258: aload_1
     259: invokevirtual #56                 // Method org/jboss/threads/EnhancedQueueExecutor$Builder.isRegisterMBean:()Z
     262: ifeq          341
     265: aload_0
     266: invokestatic  #57                 // Method java/security/AccessController.getContext:()Ljava/security/AccessControlContext;
     269: putfield      #58                 // Field acc:Ljava/security/AccessControlContext;
     272: aload_1
     273: invokevirtual #59                 // Method org/jboss/threads/EnhancedQueueExecutor$Builder.getMBeanName:()Ljava/lang/String;
     276: astore        6
     278: aload         6
     280: ifnull        288
     283: aload         6
     285: goto          312
     288: new           #29                 // class java/lang/StringBuilder
     291: dup
     292: invokespecial #30                 // Method java/lang/StringBuilder."<init>":()V
     295: ldc           #60                 // String threadpool-
     297: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     300: getstatic     #61                 // Field sequence:Ljava/util/concurrent/atomic/AtomicInteger;
     303: invokevirtual #62                 // Method java/util/concurrent/atomic/AtomicInteger.getAndIncrement:()I
     306: invokevirtual #63                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     309: invokevirtual #33                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     312: astore        7
     314: aload_0
     315: new           #64                 // class org/jboss/threads/EnhancedQueueExecutor$MBeanRegisterAction
     318: dup
     319: aload         7
     321: aload_0
     322: getfield      #54                 // Field mxBean:Lorg/jboss/threads/EnhancedQueueExecutor$MXBeanImpl;
     325: invokespecial #65                 // Method org/jboss/threads/EnhancedQueueExecutor$MBeanRegisterAction."<init>":(Ljava/lang/String;Lorg/jboss/threads/EnhancedQueueExecutor$MXBeanImpl;)V
     328: aload_0
     329: getfield      #58                 // Field acc:Ljava/security/AccessControlContext;
     332: invokestatic  #66                 // Method java/security/AccessController.doPrivileged:(Ljava/security/PrivilegedAction;Ljava/security/AccessControlContext;)Ljava/lang/Object;
     335: putfield      #67                 // Field handle:Ljava/lang/Object;
     338: goto          351
     341: aload_0
     342: aconst_null
     343: putfield      #67                 // Field handle:Ljava/lang/Object;
     346: aload_0
     347: aconst_null
     348: putfield      #58                 // Field acc:Ljava/security/AccessControlContext;
     351: return

  public void execute(java.lang.Runnable);
    Code:
       0: ldc           #68                 // String runnable
       2: aload_1
       3: invokestatic  #69                 // Method org/wildfly/common/Assert.checkNotNullParam:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;
       6: pop
       7: new           #70                 // class org/jboss/threads/EnhancedQueueExecutor$Task
      10: dup
      11: aload_0
      12: aload_1
      13: aload_0
      14: getfield      #6                  // Field contextHandler:Lorg/jboss/threads/ContextHandler;
      17: invokeinterface #71,  1           // InterfaceMethod org/jboss/threads/ContextHandler.captureContext:()Ljava/lang/Object;
      22: invokespecial #72                 // Method org/jboss/threads/EnhancedQueueExecutor$Task."<init>":(Lorg/jboss/threads/EnhancedQueueExecutor;Ljava/lang/Runnable;Ljava/lang/Object;)V
      25: astore_2
      26: aload_0
      27: aload_2
      28: invokespecial #3                  // Method tryExecute:(Lorg/jboss/threads/EnhancedQueueExecutor$Task;)I
      31: istore_3
      32: iconst_0
      33: istore        4
      35: iload_3
      36: ifne          83
      39: aload_0
      40: getfield      #45                 // Field threadStatus:J
      43: invokestatic  #73                 // Method currentSizeOf:(J)I
      46: ifne          69
      49: aload_0
      50: fconst_0
      51: invokevirtual #74                 // Method tryAllocateThread:(F)I
      54: ifne          69
      57: aload_0
      58: aconst_null
      59: invokevirtual #75                 // Method doStartThread:(Lorg/jboss/threads/EnhancedQueueExecutor$Task;)Z
      62: ifne          69
      65: aload_0
      66: invokevirtual #76                 // Method deallocateThread:()V
      69: getstatic     #77                 // Field UPDATE_STATISTICS:Z
      72: ifeq          82
      75: aload_0
      76: getfield      #2                  // Field submittedTaskCounter:Ljava/util/concurrent/atomic/LongAdder;
      79: invokevirtual #78                 // Method java/util/concurrent/atomic/LongAdder.increment:()V
      82: return
      83: iload_3
      84: iconst_3
      85: if_icmpne     124
      88: aload_0
      89: aload_2
      90: invokevirtual #75                 // Method doStartThread:(Lorg/jboss/threads/EnhancedQueueExecutor$Task;)Z
      93: istore        4
      95: iload         4
      97: ifne          121
     100: aload_0
     101: invokevirtual #76                 // Method deallocateThread:()V
     104: goto          121
     107: astore        5
     109: iload         4
     111: ifne          118
     114: aload_0
     115: invokevirtual #76                 // Method deallocateThread:()V
     118: aload         5
     120: athrow
     121: goto          174
     124: getstatic     #77                 // Field UPDATE_STATISTICS:Z
     127: ifeq          137
     130: aload_0
     131: getfield      #1                  // Field rejectedTaskCounter:Ljava/util/concurrent/atomic/LongAdder;
     134: invokevirtual #78                 // Method java/util/concurrent/atomic/LongAdder.increment:()V
     137: iload_3
     138: iconst_2
     139: if_icmpne     150
     142: aload_0
     143: aload_2
     144: invokevirtual #80                 // Method rejectShutdown:(Lorg/jboss/threads/EnhancedQueueExecutor$Task;)V
     147: goto          174
     150: getstatic     #81                 // Field $assertionsDisabled:Z
     153: ifne          169
     156: iload_3
     157: iconst_1
     158: if_icmpeq     169
     161: new           #82                 // class java/lang/AssertionError
     164: dup
     165: invokespecial #83                 // Method java/lang/AssertionError."<init>":()V
     168: athrow
     169: aload_0
     170: aload_2
     171: invokevirtual #84                 // Method rejectQueueFull:(Lorg/jboss/threads/EnhancedQueueExecutor$Task;)V
     174: return
    Exception table:
       from    to  target type
          88    95   107   any
         107   109   107   any

  public void shutdown();
    Code:
       0: aload_0
       1: iconst_0
       2: invokevirtual #85                 // Method shutdown:(Z)V
       5: return

  public java.util.List<java.lang.Runnable> shutdownNow();
    Code:
       0: aload_0
       1: iconst_1
       2: invokevirtual #85                 // Method shutdown:(Z)V
       5: new           #86                 // class java/util/ArrayList
       8: dup
       9: invokespecial #87                 // Method java/util/ArrayList."<init>":()V
      12: astore_1
      13: aload_0
      14: getfield      #88                 // Field head:Lorg/jboss/threads/EnhancedQueueExecutor$TaskNode;
      17: astore_2
      18: aload_2
      19: invokevirtual #89                 // Method org/jboss/threads/EnhancedQueueExecutor$TaskNode.getNext:()Lorg/jboss/threads/EnhancedQueueExecutor$QNode;
      22: astore_3
      23: aload_3
      24: aload_2
      25: if_acmpne     36
      28: aload_0
      29: getfield      #88                 // Field head:Lorg/jboss/threads/EnhancedQueueExecutor$TaskNode;
      32: astore_2
      33: goto          18
      36: aload_3
      37: instanceof    #90                 // class org/jboss/threads/EnhancedQueueExecutor$TaskNode
      40: ifeq          93
      43: aload_3
      44: checkcast     #90                 // class org/jboss/threads/EnhancedQueueExecutor$TaskNode
      47: astore        4
      49: aload_0
      50: aload_2
      51: aload         4
      53: invokevirtual #91                 // Method compareAndSetHead:(Lorg/jboss/threads/EnhancedQueueExecutor$TaskNode;Lorg/jboss/threads/EnhancedQueueExecutor$TaskNode;)Z
      56: ifeq          90
      59: aload_2
      60: aload_2
      61: invokevirtual #92                 // Method org/jboss/threads/EnhancedQueueExecutor$TaskNode.setNextOrdered:(Lorg/jboss/threads/EnhancedQueueExecutor$QNode;)V
      64: getstatic     #93                 // Field NO_QUEUE_LIMIT:Z
      67: ifne          74
      70: aload_0
      71: invokevirtual #94                 // Method decreaseQueueSize:()V
      74: aload         4
      76: astore_2
      77: aload_1
      78: aload         4
      80: getfield      #95                 // Field org/jboss/threads/EnhancedQueueExecutor$TaskNode.task:Lorg/jboss/threads/EnhancedQueueExecutor$Task;
      83: invokevirtual #96                 // Method org/jboss/threads/EnhancedQueueExecutor$Task.handoff:()Ljava/lang/Runnable;
      86: invokevirtual #97                 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
      89: pop
      90: goto          18
      93: aload_1
      94: areturn

  public boolean isShutdown();
    Code:
       0: aload_0
       1: getfield      #45                 // Field threadStatus:J
       4: invokestatic  #98                 // Method isShutdownRequested:(J)Z
       7: ireturn

  public boolean isTerminated();
    Code:
       0: aload_0
       1: getfield      #45                 // Field threadStatus:J
       4: invokestatic  #99                 // Method isShutdownComplete:(J)Z
       7: ireturn

  public boolean awaitTermination(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException;
    Code:
       0: ldc           #100                // String timeout
       2: lconst_0
       3: lload_1
       4: invokestatic  #101                // Method org/wildfly/common/Assert.checkMinimumParameter:(Ljava/lang/String;JJ)V
       7: ldc           #102                // String unit
       9: aload_3
      10: invokestatic  #69                 // Method org/wildfly/common/Assert.checkNotNullParam:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;
      13: pop
      14: lload_1
      15: lconst_0
      16: lcmp
      17: ifle          162
      20: invokestatic  #103                // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      23: astore        4
      25: aload_0
      26: getfield      #7                  // Field runningThreads:Ljava/util/Set;
      29: aload         4
      31: invokeinterface #104,  2          // InterfaceMethod java/util/Set.contains:(Ljava/lang/Object;)Z
      36: ifne          48
      39: aload         4
      41: aload_0
      42: getfield      #27                 // Field schedulerThread:Ljava/lang/Thread;
      45: if_acmpne     57
      48: getstatic     #105                // Field org/jboss/threads/Messages.msg:Lorg/jboss/threads/Messages;
      51: invokeinterface #106,  1          // InterfaceMethod org/jboss/threads/Messages.cannotAwaitWithin:()Ljava/lang/IllegalStateException;
      56: athrow
      57: aload_0
      58: getfield      #107                // Field terminationWaiters:Lorg/jboss/threads/Waiter;
      61: astore        5
      63: aload         5
      65: getstatic     #108                // Field TERMINATE_COMPLETE_WAITER:Lorg/jboss/threads/Waiter;
      68: if_acmpne     73
      71: iconst_1
      72: ireturn
      73: new           #109                // class org/jboss/threads/Waiter
      76: dup
      77: aload         5
      79: invokespecial #110                // Method org/jboss/threads/Waiter."<init>":(Lorg/jboss/threads/Waiter;)V
      82: astore        6
      84: aload         6
      86: invokestatic  #103                // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      89: invokevirtual #111                // Method org/jboss/threads/Waiter.setThread:(Ljava/lang/Thread;)Lorg/jboss/threads/Waiter;
      92: pop
      93: aload_0
      94: aload         5
      96: aload         6
      98: invokevirtual #112                // Method compareAndSetTerminationWaiters:(Lorg/jboss/threads/Waiter;Lorg/jboss/threads/Waiter;)Z
     101: ifne          131
     104: aload_0
     105: getfield      #107                // Field terminationWaiters:Lorg/jboss/threads/Waiter;
     108: astore        5
     110: aload         5
     112: getstatic     #108                // Field TERMINATE_COMPLETE_WAITER:Lorg/jboss/threads/Waiter;
     115: if_acmpne     120
     118: iconst_1
     119: ireturn
     120: aload         6
     122: aload         5
     124: invokevirtual #113                // Method org/jboss/threads/Waiter.setNext:(Lorg/jboss/threads/Waiter;)Lorg/jboss/threads/Waiter;
     127: pop
     128: goto          93
     131: aload_0
     132: aload_3
     133: lload_1
     134: invokevirtual #114                // Method java/util/concurrent/TimeUnit.toNanos:(J)J
     137: invokestatic  #115                // Method java/util/concurrent/locks/LockSupport.parkNanos:(Ljava/lang/Object;J)V
     140: aload         6
     142: aconst_null
     143: invokevirtual #111                // Method org/jboss/threads/Waiter.setThread:(Ljava/lang/Thread;)Lorg/jboss/threads/Waiter;
     146: pop
     147: goto          162
     150: astore        7
     152: aload         6
     154: aconst_null
     155: invokevirtual #111                // Method org/jboss/threads/Waiter.setThread:(Ljava/lang/Thread;)Lorg/jboss/threads/Waiter;
     158: pop
     159: aload         7
     161: athrow
     162: invokestatic  #116                // Method java/lang/Thread.interrupted:()Z
     165: ifeq          176
     168: new           #117                // class java/lang/InterruptedException
     171: dup
     172: invokespecial #118                // Method java/lang/InterruptedException."<init>":()V
     175: athrow
     176: aload_0
     177: invokevirtual #119                // Method isTerminated:()Z
     180: ireturn
    Exception table:
       from    to  target type
         131   140   150   any
         150   152   150   any

  public java.util.concurrent.ScheduledFuture<?> schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: invokespecial #120                // Method startScheduleThread:()V
       4: aload_0
       5: getfield      #4                  // Field schedulerTask:Lorg/jboss/threads/EnhancedQueueExecutor$SchedulerTask;
       8: new           #121                // class org/jboss/threads/EnhancedQueueExecutor$RunnableScheduledFuture
      11: dup
      12: aload_0
      13: aload_1
      14: lload_2
      15: aload         4
      17: invokespecial #122                // Method org/jboss/threads/EnhancedQueueExecutor$RunnableScheduledFuture."<init>":(Lorg/jboss/threads/EnhancedQueueExecutor;Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)V
      20: invokevirtual #123                // Method org/jboss/threads/EnhancedQueueExecutor$SchedulerTask.schedule:(Lorg/jboss/threads/EnhancedQueueExecutor$AbstractScheduledFuture;)Lorg/jboss/threads/EnhancedQueueExecutor$AbstractScheduledFuture;
      23: areturn

  public <V> java.util.concurrent.ScheduledFuture<V> schedule(java.util.concurrent.Callable<V>, long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: invokespecial #120                // Method startScheduleThread:()V
       4: aload_0
       5: getfield      #4                  // Field schedulerTask:Lorg/jboss/threads/EnhancedQueueExecutor$SchedulerTask;
       8: new           #124                // class org/jboss/threads/EnhancedQueueExecutor$CallableScheduledFuture
      11: dup
      12: aload_0
      13: aload_1
      14: lload_2
      15: aload         4
      17: invokespecial #125                // Method org/jboss/threads/EnhancedQueueExecutor$CallableScheduledFuture."<init>":(Lorg/jboss/threads/EnhancedQueueExecutor;Ljava/util/concurrent/Callable;JLjava/util/concurrent/TimeUnit;)V
      20: invokevirtual #123                // Method org/jboss/threads/EnhancedQueueExecutor$SchedulerTask.schedule:(Lorg/jboss/threads/EnhancedQueueExecutor$AbstractScheduledFuture;)Lorg/jboss/threads/EnhancedQueueExecutor$AbstractScheduledFuture;
      23: areturn

  public java.util.concurrent.ScheduledFuture<?> scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: invokespecial #120                // Method startScheduleThread:()V
       4: aload_0
       5: getfield      #4                  // Field schedulerTask:Lorg/jboss/threads/EnhancedQueueExecutor$SchedulerTask;
       8: new           #126                // class org/jboss/threads/EnhancedQueueExecutor$FixedRateRunnableScheduledFuture
      11: dup
      12: aload_0
      13: aload_1
      14: lload_2
      15: lload         4
      17: aload         6
      19: invokespecial #127                // Method org/jboss/threads/EnhancedQueueExecutor$FixedRateRunnableScheduledFuture."<init>":(Lorg/jboss/threads/EnhancedQueueExecutor;Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)V
      22: invokevirtual #123                // Method org/jboss/threads/EnhancedQueueExecutor$SchedulerTask.schedule:(Lorg/jboss/threads/EnhancedQueueExecutor$AbstractScheduledFuture;)Lorg/jboss/threads/EnhancedQueueExecutor$AbstractScheduledFuture;
      25: areturn

  public java.util.concurrent.ScheduledFuture<?> scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: invokespecial #120                // Method startScheduleThread:()V
       4: aload_0
       5: getfield      #4                  // Field schedulerTask:Lorg/jboss/threads/EnhancedQueueExecutor$SchedulerTask;
       8: new           #128                // class org/jboss/threads/EnhancedQueueExecutor$FixedDelayRunnableScheduledFuture
      11: dup
      12: aload_0
      13: aload_1
      14: lload_2
      15: lload         4
      17: aload         6
      19: invokespecial #129                // Method org/jboss/threads/EnhancedQueueExecutor$FixedDelayRunnableScheduledFuture."<init>":(Lorg/jboss/threads/EnhancedQueueExecutor;Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)V
      22: invokevirtual #123                // Method org/jboss/threads/EnhancedQueueExecutor$SchedulerTask.schedule:(Lorg/jboss/threads/EnhancedQueueExecutor$AbstractScheduledFuture;)Lorg/jboss/threads/EnhancedQueueExecutor$AbstractScheduledFuture;
      25: areturn

  private void startScheduleThread();
    Code:
       0: aload_0
       1: getfield      #27                 // Field schedulerThread:Ljava/lang/Thread;
       4: invokevirtual #130                // Method java/lang/Thread.getState:()Ljava/lang/Thread$State;
       7: getstatic     #131                // Field java/lang/Thread$State.NEW:Ljava/lang/Thread$State;
      10: if_acmpne     24
      13: aload_0
      14: getfield      #27                 // Field schedulerThread:Ljava/lang/Thread;
      17: invokevirtual #132                // Method java/lang/Thread.start:()V
      20: goto          24
      23: astore_1
      24: return
    Exception table:
       from    to  target type
          13    20    23   Class java/lang/IllegalThreadStateException

  public org.jboss.threads.management.StandardThreadPoolMXBean getThreadPoolMXBean();
    Code:
       0: aload_0
       1: getfield      #54                 // Field mxBean:Lorg/jboss/threads/EnhancedQueueExecutor$MXBeanImpl;
       4: areturn

  public void shutdown(boolean);
    Code:
       0: aload_0
       1: getfield      #45                 // Field threadStatus:J
       4: lstore_2
       5: lload_2
       6: invokestatic  #134                // Method withShutdownRequested:(J)J
       9: lstore        4
      11: iload_1
      12: ifeq          22
      15: lload         4
      17: invokestatic  #135                // Method withShutdownInterrupt:(J)J
      20: lstore        4
      22: lload_2
      23: invokestatic  #73                 // Method currentSizeOf:(J)I
      26: ifne          36
      29: lload         4
      31: invokestatic  #136                // Method withShutdownComplete:(J)J
      34: lstore        4
      36: lload         4
      38: lload_2
      39: lcmp
      40: ifne          44
      43: return
      44: aload_0
      45: lload_2
      46: lload         4
      48: invokevirtual #137                // Method compareAndSetThreadStatus:(JJ)Z
      51: ifeq          0
      54: getstatic     #81                 // Field $assertionsDisabled:Z
      57: ifne          75
      60: lload_2
      61: lload         4
      63: lcmp
      64: ifne          75
      67: new           #82                 // class java/lang/AssertionError
      70: dup
      71: invokespecial #83                 // Method java/lang/AssertionError."<init>":()V
      74: athrow
      75: lload         4
      77: invokestatic  #98                 // Method isShutdownRequested:(J)Z
      80: lload_2
      81: invokestatic  #98                 // Method isShutdownRequested:(J)Z
      84: if_icmpeq     229
      87: getstatic     #81                 // Field $assertionsDisabled:Z
      90: ifne          108
      93: lload_2
      94: invokestatic  #98                 // Method isShutdownRequested:(J)Z
      97: ifeq          108
     100: new           #82                 // class java/lang/AssertionError
     103: dup
     104: invokespecial #83                 // Method java/lang/AssertionError."<init>":()V
     107: athrow
     108: aload_0
     109: getfield      #4                  // Field schedulerTask:Lorg/jboss/threads/EnhancedQueueExecutor$SchedulerTask;
     112: invokevirtual #138                // Method org/jboss/threads/EnhancedQueueExecutor$SchedulerTask.shutdown:()V
     115: aload_0
     116: getfield      #139                // Field tail:Lorg/jboss/threads/EnhancedQueueExecutor$TaskNode;
     119: astore        6
     121: aload         6
     123: invokevirtual #89                 // Method org/jboss/threads/EnhancedQueueExecutor$TaskNode.getNext:()Lorg/jboss/threads/EnhancedQueueExecutor$QNode;
     126: astore        7
     128: aload         7
     130: instanceof    #90                 // class org/jboss/threads/EnhancedQueueExecutor$TaskNode
     133: ifeq          146
     136: aload         7
     138: checkcast     #90                 // class org/jboss/threads/EnhancedQueueExecutor$TaskNode
     141: astore        6
     143: goto          121
     146: aload         7
     148: instanceof    #140                // class org/jboss/threads/EnhancedQueueExecutor$PoolThreadNode
     151: ifne          159
     154: aload         7
     156: ifnonnull     214
     159: aload         7
     161: checkcast     #140                // class org/jboss/threads/EnhancedQueueExecutor$PoolThreadNode
     164: astore        8
     166: aload         6
     168: aload         8
     170: getstatic     #141                // Field TERMINATE_REQUESTED:Lorg/jboss/threads/EnhancedQueueExecutor$QNode;
     173: invokevirtual #142                // Method org/jboss/threads/EnhancedQueueExecutor$TaskNode.compareAndSetNext:(Lorg/jboss/threads/EnhancedQueueExecutor$QNode;Lorg/jboss/threads/EnhancedQueueExecutor$QNode;)Z
     176: ifeq          211
     179: aload         8
     181: ifnull        229
     184: aload         8
     186: getstatic     #143                // Field WAITING:Ljava/lang/Runnable;
     189: getstatic     #144                // Field EXIT:Ljava/lang/Runnable;
     192: invokevirtual #145                // Method org/jboss/threads/EnhancedQueueExecutor$PoolThreadNode.compareAndSetTask:(Ljava/lang/Runnable;Ljava/lang/Runnable;)Z
     195: pop
     196: aload         8
     198: invokevirtual #146                // Method org/jboss/threads/EnhancedQueueExecutor$PoolThreadNode.unpark:()V
     201: aload         8
     203: invokevirtual #147                // Method org/jboss/threads/EnhancedQueueExecutor$PoolThreadNode.getNext:()Lorg/jboss/threads/EnhancedQueueExecutor$PoolThreadNode;
     206: astore        8
     208: goto          179
     211: goto          121
     214: aload         7
     216: instanceof    #148                // class org/jboss/threads/EnhancedQueueExecutor$TerminateWaiterNode
     219: ifeq          225
     222: goto          229
     225: invokestatic  #149                // Method org/wildfly/common/Assert.unreachableCode:()Ljava/lang/IllegalStateException;
     228: athrow
     229: lload         4
     231: invokestatic  #150                // Method isShutdownInterrupt:(J)Z
     234: lload_2
     235: invokestatic  #150                // Method isShutdownInterrupt:(J)Z
     238: if_icmpeq     303
     241: getstatic     #81                 // Field $assertionsDisabled:Z
     244: ifne          262
     247: lload_2
     248: invokestatic  #150                // Method isShutdownInterrupt:(J)Z
     251: ifeq          262
     254: new           #82                 // class java/lang/AssertionError
     257: dup
     258: invokespecial #83                 // Method java/lang/AssertionError."<init>":()V
     261: athrow
     262: aload_0
     263: getfield      #7                  // Field runningThreads:Ljava/util/Set;
     266: invokeinterface #151,  1          // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
     271: astore        6
     273: aload         6
     275: invokeinterface #152,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
     280: ifeq          303
     283: aload         6
     285: invokeinterface #153,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     290: checkcast     #154                // class java/lang/Thread
     293: astore        7
     295: aload         7
     297: invokevirtual #155                // Method java/lang/Thread.interrupt:()V
     300: goto          273
     303: lload         4
     305: invokestatic  #99                 // Method isShutdownComplete:(J)Z
     308: lload_2
     309: invokestatic  #99                 // Method isShutdownComplete:(J)Z
     312: if_icmpeq     340
     315: getstatic     #81                 // Field $assertionsDisabled:Z
     318: ifne          336
     321: lload_2
     322: invokestatic  #99                 // Method isShutdownComplete:(J)Z
     325: ifeq          336
     328: new           #82                 // class java/lang/AssertionError
     331: dup
     332: invokespecial #83                 // Method java/lang/AssertionError."<init>":()V
     335: athrow
     336: aload_0
     337: invokevirtual #156                // Method completeTermination:()V
     340: return

  public boolean isTerminating();
    Code:
       0: aload_0
       1: getfield      #45                 // Field threadStatus:J
       4: lstore_1
       5: lload_1
       6: invokestatic  #98                 // Method isShutdownRequested:(J)Z
       9: ifeq          23
      12: lload_1
      13: invokestatic  #99                 // Method isShutdownComplete:(J)Z
      16: ifne          23
      19: iconst_1
      20: goto          24
      23: iconst_0
      24: ireturn

  public boolean prestartCoreThread();
    Code:
       0: aload_0
       1: fconst_1
       2: invokevirtual #74                 // Method tryAllocateThread:(F)I
       5: ifeq          10
       8: iconst_0
       9: ireturn
      10: aload_0
      11: aconst_null
      12: invokevirtual #75                 // Method doStartThread:(Lorg/jboss/threads/EnhancedQueueExecutor$Task;)Z
      15: ifeq          20
      18: iconst_1
      19: ireturn
      20: aload_0
      21: invokevirtual #76                 // Method deallocateThread:()V
      24: iconst_0
      25: ireturn

  public int prestartAllCoreThreads();
    Code:
       0: iconst_0
       1: istore_1
       2: aload_0
       3: invokevirtual #157                // Method prestartCoreThread:()Z
       6: ifeq          15
       9: iinc          1, 1
      12: goto          2
      15: iload_1
      16: ireturn

  public float getGrowthResistance();
    Code:
       0: aload_0
       1: getfield      #38                 // Field growthResistance:F
       4: freturn

  public void setGrowthResistance(float);
    Code:
       0: ldc           #158                // String growthResistance
       2: fconst_0
       3: fload_1
       4: invokestatic  #159                // Method org/wildfly/common/Assert.checkMinimumParameter:(Ljava/lang/String;FF)V
       7: ldc           #158                // String growthResistance
       9: fconst_1
      10: fload_1
      11: invokestatic  #160                // Method org/wildfly/common/Assert.checkMaximumParameter:(Ljava/lang/String;FF)V
      14: aload_0
      15: fload_1
      16: putfield      #38                 // Field growthResistance:F
      19: return

  public int getCorePoolSize();
    Code:
       0: aload_0
       1: getfield      #45                 // Field threadStatus:J
       4: invokestatic  #161                // Method coreSizeOf:(J)I
       7: ireturn

  public void setCorePoolSize(int);
    Code:
       0: ldc           #162                // String corePoolSize
       2: iconst_0
       3: iload_1
       4: invokestatic  #163                // Method org/wildfly/common/Assert.checkMinimumParameter:(Ljava/lang/String;II)V
       7: ldc           #162                // String corePoolSize
       9: ldc2_w        #164                // long 1048575l
      12: iload_1
      13: i2l
      14: invokestatic  #166                // Method org/wildfly/common/Assert.checkMaximumParameter:(Ljava/lang/String;JJ)V
      17: aload_0
      18: getfield      #45                 // Field threadStatus:J
      21: lstore_2
      22: iload_1
      23: lload_2
      24: invokestatic  #167                // Method maxSizeOf:(J)I
      27: if_icmple     44
      30: lload_2
      31: iload_1
      32: invokestatic  #43                 // Method withMaxSize:(JI)J
      35: iload_1
      36: invokestatic  #44                 // Method withCoreSize:(JI)J
      39: lstore        4
      41: goto          51
      44: lload_2
      45: iload_1
      46: invokestatic  #44                 // Method withCoreSize:(JI)J
      49: lstore        4
      51: aload_0
      52: lload_2
      53: lload         4
      55: invokevirtual #137                // Method compareAndSetThreadStatus:(JJ)Z
      58: ifeq          17
      61: lload         4
      63: invokestatic  #167                // Method maxSizeOf:(J)I
      66: lload_2
      67: invokestatic  #167                // Method maxSizeOf:(J)I
      70: if_icmplt     85
      73: lload         4
      75: invokestatic  #161                // Method coreSizeOf:(J)I
      78: lload_2
      79: invokestatic  #161                // Method coreSizeOf:(J)I
      82: if_icmpge     126
      85: aload_0
      86: getfield      #7                  // Field runningThreads:Ljava/util/Set;
      89: invokeinterface #151,  1          // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      94: astore        6
      96: aload         6
      98: invokeinterface #152,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
     103: ifeq          126
     106: aload         6
     108: invokeinterface #153,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     113: checkcast     #154                // class java/lang/Thread
     116: astore        7
     118: aload         7
     120: invokestatic  #168                // Method java/util/concurrent/locks/LockSupport.unpark:(Ljava/lang/Thread;)V
     123: goto          96
     126: return

  public int getMaximumPoolSize();
    Code:
       0: aload_0
       1: getfield      #45                 // Field threadStatus:J
       4: invokestatic  #167                // Method maxSizeOf:(J)I
       7: ireturn

  public void setMaximumPoolSize(int);
    Code:
       0: ldc           #169                // String maxPoolSize
       2: iconst_0
       3: iload_1
       4: invokestatic  #163                // Method org/wildfly/common/Assert.checkMinimumParameter:(Ljava/lang/String;II)V
       7: ldc           #169                // String maxPoolSize
       9: ldc2_w        #164                // long 1048575l
      12: iload_1
      13: i2l
      14: invokestatic  #166                // Method org/wildfly/common/Assert.checkMaximumParameter:(Ljava/lang/String;JJ)V
      17: aload_0
      18: getfield      #45                 // Field threadStatus:J
      21: lstore_2
      22: iload_1
      23: lload_2
      24: invokestatic  #161                // Method coreSizeOf:(J)I
      27: if_icmpge     44
      30: lload_2
      31: iload_1
      32: invokestatic  #43                 // Method withMaxSize:(JI)J
      35: iload_1
      36: invokestatic  #44                 // Method withCoreSize:(JI)J
      39: lstore        4
      41: goto          51
      44: lload_2
      45: iload_1
      46: invokestatic  #43                 // Method withMaxSize:(JI)J
      49: lstore        4
      51: aload_0
      52: lload_2
      53: lload         4
      55: invokevirtual #137                // Method compareAndSetThreadStatus:(JJ)Z
      58: ifeq          17
      61: lload         4
      63: invokestatic  #167                // Method maxSizeOf:(J)I
      66: lload_2
      67: invokestatic  #167                // Method maxSizeOf:(J)I
      70: if_icmplt     85
      73: lload         4
      75: invokestatic  #161                // Method coreSizeOf:(J)I
      78: lload_2
      79: invokestatic  #161                // Method coreSizeOf:(J)I
      82: if_icmpge     126
      85: aload_0
      86: getfield      #7                  // Field runningThreads:Ljava/util/Set;
      89: invokeinterface #151,  1          // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      94: astore        6
      96: aload         6
      98: invokeinterface #152,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
     103: ifeq          126
     106: aload         6
     108: invokeinterface #153,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     113: checkcast     #154                // class java/lang/Thread
     116: astore        7
     118: aload         7
     120: invokestatic  #168                // Method java/util/concurrent/locks/LockSupport.unpark:(Ljava/lang/Thread;)V
     123: goto          96
     126: return

  public boolean allowsCoreThreadTimeOut();
    Code:
       0: aload_0
       1: getfield      #45                 // Field threadStatus:J
       4: invokestatic  #170                // Method isAllowCoreTimeout:(J)Z
       7: ireturn

  public void allowCoreThreadTimeOut(boolean);
    Code:
       0: aload_0
       1: getfield      #45                 // Field threadStatus:J
       4: lstore_2
       5: lload_2
       6: iload_1
       7: invokestatic  #42                 // Method withAllowCoreTimeout:(JZ)J
      10: lstore        4
      12: lload_2
      13: lload         4
      15: lcmp
      16: ifne          20
      19: return
      20: aload_0
      21: lload_2
      22: lload         4
      24: invokevirtual #137                // Method compareAndSetThreadStatus:(JJ)Z
      27: ifeq          0
      30: iload_1
      31: ifeq          75
      34: aload_0
      35: getfield      #7                  // Field runningThreads:Ljava/util/Set;
      38: invokeinterface #151,  1          // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      43: astore        6
      45: aload         6
      47: invokeinterface #152,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      52: ifeq          75
      55: aload         6
      57: invokeinterface #153,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      62: checkcast     #154                // class java/lang/Thread
      65: astore        7
      67: aload         7
      69: invokestatic  #168                // Method java/util/concurrent/locks/LockSupport.unpark:(Ljava/lang/Thread;)V
      72: goto          45
      75: return

  public long getKeepAliveTime(java.util.concurrent.TimeUnit);
    Code:
       0: ldc           #171                // String keepAliveUnits
       2: aload_1
       3: invokestatic  #69                 // Method org/wildfly/common/Assert.checkNotNullParam:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;
       6: pop
       7: aload_1
       8: aload_0
       9: getfield      #47                 // Field timeoutNanos:J
      12: getstatic     #172                // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
      15: invokevirtual #173                // Method java/util/concurrent/TimeUnit.convert:(JLjava/util/concurrent/TimeUnit;)J
      18: lreturn

  public java.time.Duration getKeepAliveTime();
    Code:
       0: aload_0
       1: getfield      #47                 // Field timeoutNanos:J
       4: getstatic     #174                // Field java/time/temporal/ChronoUnit.NANOS:Ljava/time/temporal/ChronoUnit;
       7: invokestatic  #175                // Method java/time/Duration.of:(JLjava/time/temporal/TemporalUnit;)Ljava/time/Duration;
      10: areturn

  public void setKeepAliveTime(long, java.util.concurrent.TimeUnit);
    Code:
       0: ldc           #176                // String keepAliveTime
       2: lconst_1
       3: lload_1
       4: invokestatic  #101                // Method org/wildfly/common/Assert.checkMinimumParameter:(Ljava/lang/String;JJ)V
       7: ldc           #171                // String keepAliveUnits
       9: aload_3
      10: invokestatic  #69                 // Method org/wildfly/common/Assert.checkNotNullParam:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;
      13: pop
      14: aload_0
      15: lconst_1
      16: aload_3
      17: lload_1
      18: invokevirtual #114                // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      21: invokestatic  #177                // Method java/lang/Math.max:(JJ)J
      24: putfield      #47                 // Field timeoutNanos:J
      27: return

  public void setKeepAliveTime(java.time.Duration);
    Code:
       0: ldc           #176                // String keepAliveTime
       2: aload_1
       3: invokestatic  #69                 // Method org/wildfly/common/Assert.checkNotNullParam:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: aload_1
       9: invokestatic  #46                 // Method org/jboss/threads/TimeUtil.clampedPositiveNanos:(Ljava/time/Duration;)J
      12: putfield      #47                 // Field timeoutNanos:J
      15: return

  public int getMaximumQueueSize();
    Code:
       0: aload_0
       1: getfield      #51                 // Field queueSize:J
       4: invokestatic  #178                // Method maxQueueSizeOf:(J)I
       7: ireturn

  public void setMaximumQueueSize(int);
    Code:
       0: ldc           #179                // String maxQueueSize
       2: iconst_0
       3: iload_1
       4: invokestatic  #163                // Method org/wildfly/common/Assert.checkMinimumParameter:(Ljava/lang/String;II)V
       7: ldc           #179                // String maxQueueSize
       9: ldc           #181                // int 2147483647
      11: iload_1
      12: invokestatic  #182                // Method org/wildfly/common/Assert.checkMaximumParameter:(Ljava/lang/String;II)V
      15: getstatic     #93                 // Field NO_QUEUE_LIMIT:Z
      18: ifeq          22
      21: return
      22: aload_0
      23: getfield      #51                 // Field queueSize:J
      26: lstore_2
      27: aload_0
      28: lload_2
      29: lload_2
      30: iload_1
      31: invokestatic  #50                 // Method withMaxQueueSize:(JI)J
      34: invokevirtual #183                // Method compareAndSetQueueSize:(JJ)Z
      37: ifeq          22
      40: return

  public java.util.concurrent.Executor getHandoffExecutor();
    Code:
       0: aload_0
       1: getfield      #21                 // Field handoffExecutor:Ljava/util/concurrent/Executor;
       4: areturn

  public void setHandoffExecutor(java.util.concurrent.Executor);
    Code:
       0: ldc           #184                // String handoffExecutor
       2: aload_1
       3: invokestatic  #69                 // Method org/wildfly/common/Assert.checkNotNullParam:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: aload_1
       9: putfield      #21                 // Field handoffExecutor:Ljava/util/concurrent/Executor;
      12: return

  public java.lang.Thread$UncaughtExceptionHandler getExceptionHandler();
    Code:
       0: aload_0
       1: getfield      #23                 // Field exceptionHandler:Ljava/lang/Thread$UncaughtExceptionHandler;
       4: areturn

  public void setExceptionHandler(java.lang.Thread$UncaughtExceptionHandler);
    Code:
       0: ldc           #185                // String exceptionHandler
       2: aload_1
       3: invokestatic  #69                 // Method org/wildfly/common/Assert.checkNotNullParam:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: aload_1
       9: putfield      #23                 // Field exceptionHandler:Ljava/lang/Thread$UncaughtExceptionHandler;
      12: return

  public void setTerminationTask(java.lang.Runnable);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #36                 // Field terminationTask:Ljava/lang/Runnable;
       5: return

  public int getQueueSize();
    Code:
       0: getstatic     #93                 // Field NO_QUEUE_LIMIT:Z
       3: ifeq          10
       6: iconst_m1
       7: goto          17
      10: aload_0
      11: getfield      #51                 // Field queueSize:J
      14: invokestatic  #186                // Method currentQueueSizeOf:(J)I
      17: ireturn

  public int getLargestPoolSize();
    Code:
       0: getstatic     #77                 // Field UPDATE_STATISTICS:Z
       3: ifeq          13
       6: aload_0
       7: getfield      #187                // Field peakThreadCount:I
      10: goto          14
      13: iconst_m1
      14: ireturn

  public int getActiveCount();
    Code:
       0: getstatic     #188                // Field UPDATE_ACTIVE_COUNT:Z
       3: ifeq          13
       6: aload_0
       7: getfield      #189                // Field activeCount:I
      10: goto          14
      13: iconst_m1
      14: ireturn

  public int getLargestQueueSize();
    Code:
       0: getstatic     #77                 // Field UPDATE_STATISTICS:Z
       3: ifeq          19
       6: getstatic     #93                 // Field NO_QUEUE_LIMIT:Z
       9: ifne          19
      12: aload_0
      13: getfield      #190                // Field peakQueueSize:I
      16: goto          20
      19: iconst_m1
      20: ireturn

  public long getSubmittedTaskCount();
    Code:
       0: getstatic     #77                 // Field UPDATE_STATISTICS:Z
       3: ifeq          16
       6: aload_0
       7: getfield      #2                  // Field submittedTaskCounter:Ljava/util/concurrent/atomic/LongAdder;
      10: invokevirtual #191                // Method java/util/concurrent/atomic/LongAdder.longValue:()J
      13: goto          19
      16: ldc2_w        #192                // long -1l
      19: lreturn

  public long getRejectedTaskCount();
    Code:
       0: getstatic     #77                 // Field UPDATE_STATISTICS:Z
       3: ifeq          16
       6: aload_0
       7: getfield      #1                  // Field rejectedTaskCounter:Ljava/util/concurrent/atomic/LongAdder;
      10: invokevirtual #191                // Method java/util/concurrent/atomic/LongAdder.longValue:()J
      13: goto          19
      16: ldc2_w        #192                // long -1l
      19: lreturn

  public long getCompletedTaskCount();
    Code:
       0: getstatic     #77                 // Field UPDATE_STATISTICS:Z
       3: ifeq          16
       6: aload_0
       7: getfield      #5                  // Field completedTaskCounter:Ljava/util/concurrent/atomic/LongAdder;
      10: invokevirtual #191                // Method java/util/concurrent/atomic/LongAdder.longValue:()J
      13: goto          19
      16: ldc2_w        #192                // long -1l
      19: lreturn

  public int getPoolSize();
    Code:
       0: aload_0
       1: getfield      #45                 // Field threadStatus:J
       4: invokestatic  #73                 // Method currentSizeOf:(J)I
       7: ireturn

  public java.lang.Thread[] getRunningThreads();
    Code:
       0: aload_0
       1: getfield      #7                  // Field runningThreads:Ljava/util/Set;
       4: getstatic     #194                // Field NO_THREADS:[Ljava/lang/Thread;
       7: invokeinterface #195,  2          // InterfaceMethod java/util/Set.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
      12: checkcast     #196                // class "[Ljava/lang/Thread;"
      15: areturn

  int tryAllocateThread(float);
    Code:
       0: aload_0
       1: getfield      #45                 // Field threadStatus:J
       4: lstore_3
       5: lload_3
       6: invokestatic  #98                 // Method isShutdownRequested:(J)Z
       9: ifeq          14
      12: iconst_2
      13: ireturn
      14: lload_3
      15: invokestatic  #73                 // Method currentSizeOf:(J)I
      18: istore_2
      19: iload_2
      20: lload_3
      21: invokestatic  #167                // Method maxSizeOf:(J)I
      24: if_icmplt     29
      27: iconst_1
      28: ireturn
      29: iload_2
      30: lload_3
      31: invokestatic  #161                // Method coreSizeOf:(J)I
      34: if_icmplt     66
      37: iload_2
      38: ifle          66
      41: fload_1
      42: fconst_0
      43: fcmpl
      44: ifeq          66
      47: fload_1
      48: fconst_1
      49: fcmpl
      50: ifeq          64
      53: invokestatic  #197                // Method java/util/concurrent/ThreadLocalRandom.current:()Ljava/util/concurrent/ThreadLocalRandom;
      56: invokevirtual #198                // Method java/util/concurrent/ThreadLocalRandom.nextFloat:()F
      59: fload_1
      60: fcmpg
      61: ifge          66
      64: iconst_1
      65: ireturn
      66: iload_2
      67: iconst_1
      68: iadd
      69: istore        5
      71: aload_0
      72: lload_3
      73: lload_3
      74: iload         5
      76: invokestatic  #199                // Method withCurrentSize:(JI)J
      79: invokevirtual #137                // Method compareAndSetThreadStatus:(JJ)Z
      82: ifeq          120
      85: getstatic     #77                 // Field UPDATE_STATISTICS:Z
      88: ifeq          118
      91: aload_0
      92: getfield      #187                // Field peakThreadCount:I
      95: istore        6
      97: iload         6
      99: iload         5
     101: if_icmplt     107
     104: goto          118
     107: aload_0
     108: iload         6
     110: iload         5
     112: invokevirtual #200                // Method compareAndSetPeakThreadCount:(II)Z
     115: ifeq          91
     118: iconst_0
     119: ireturn
     120: getstatic     #77                 // Field UPDATE_STATISTICS:Z
     123: ifeq          133
     126: aload_0
     127: getfield      #8                  // Field spinMisses:Ljava/util/concurrent/atomic/LongAdder;
     130: invokevirtual #78                 // Method java/util/concurrent/atomic/LongAdder.increment:()V
     133: goto          0

  void deallocateThread();
    Code:
       0: aload_0
       1: getfield      #45                 // Field threadStatus:J
       4: lstore_1
       5: aload_0
       6: lload_1
       7: invokevirtual #201                // Method tryDeallocateThread:(J)Z
      10: ifeq          0
      13: return

  boolean tryDeallocateThread(long);
    Code:
       0: lload_1
       1: lload_1
       2: invokestatic  #73                 // Method currentSizeOf:(J)I
       5: iconst_1
       6: isub
       7: invokestatic  #199                // Method withCurrentSize:(JI)J
      10: lstore_3
      11: lload_3
      12: invokestatic  #73                 // Method currentSizeOf:(J)I
      15: ifne          30
      18: lload_1
      19: invokestatic  #98                 // Method isShutdownRequested:(J)Z
      22: ifeq          30
      25: lload_3
      26: invokestatic  #136                // Method withShutdownComplete:(J)J
      29: lstore_3
      30: aload_0
      31: lload_1
      32: lload_3
      33: invokevirtual #137                // Method compareAndSetThreadStatus:(JJ)Z
      36: ifne          41
      39: iconst_0
      40: ireturn
      41: lload_3
      42: invokestatic  #99                 // Method isShutdownComplete:(J)Z
      45: ifeq          52
      48: aload_0
      49: invokevirtual #156                // Method completeTermination:()V
      52: iconst_1
      53: ireturn

  boolean doStartThread(org.jboss.threads.EnhancedQueueExecutor$Task) throws java.util.concurrent.RejectedExecutionException;
    Code:
       0: aload_0
       1: getfield      #25                 // Field threadFactory:Ljava/util/concurrent/ThreadFactory;
       4: new           #202                // class org/jboss/threads/EnhancedQueueExecutor$ThreadBody
       7: dup
       8: aload_0
       9: aload_1
      10: invokespecial #203                // Method org/jboss/threads/EnhancedQueueExecutor$ThreadBody."<init>":(Lorg/jboss/threads/EnhancedQueueExecutor;Lorg/jboss/threads/EnhancedQueueExecutor$Task;)V
      13: invokeinterface #26,  2           // InterfaceMethod java/util/concurrent/ThreadFactory.newThread:(Ljava/lang/Runnable;)Ljava/lang/Thread;
      18: astore_2
      19: goto          48
      22: astore_3
      23: aload_1
      24: ifnull        46
      27: getstatic     #77                 // Field UPDATE_STATISTICS:Z
      30: ifeq          40
      33: aload_0
      34: getfield      #1                  // Field rejectedTaskCounter:Ljava/util/concurrent/atomic/LongAdder;
      37: invokevirtual #78                 // Method java/util/concurrent/atomic/LongAdder.increment:()V
      40: aload_0
      41: aload_1
      42: aload_3
      43: invokevirtual #205                // Method rejectException:(Lorg/jboss/threads/EnhancedQueueExecutor$Task;Ljava/lang/Throwable;)V
      46: iconst_0
      47: ireturn
      48: aload_2
      49: ifnonnull     76
      52: aload_1
      53: ifnull        74
      56: getstatic     #77                 // Field UPDATE_STATISTICS:Z
      59: ifeq          69
      62: aload_0
      63: getfield      #1                  // Field rejectedTaskCounter:Ljava/util/concurrent/atomic/LongAdder;
      66: invokevirtual #78                 // Method java/util/concurrent/atomic/LongAdder.increment:()V
      69: aload_0
      70: aload_1
      71: invokevirtual #206                // Method rejectNoThread:(Lorg/jboss/threads/EnhancedQueueExecutor$Task;)V
      74: iconst_0
      75: ireturn
      76: aload_2
      77: invokevirtual #132                // Method java/lang/Thread.start:()V
      80: goto          109
      83: astore_3
      84: aload_1
      85: ifnull        107
      88: getstatic     #77                 // Field UPDATE_STATISTICS:Z
      91: ifeq          101
      94: aload_0
      95: getfield      #1                  // Field rejectedTaskCounter:Ljava/util/concurrent/atomic/LongAdder;
      98: invokevirtual #78                 // Method java/util/concurrent/atomic/LongAdder.increment:()V
     101: aload_0
     102: aload_1
     103: aload_3
     104: invokevirtual #205                // Method rejectException:(Lorg/jboss/threads/EnhancedQueueExecutor$Task;Ljava/lang/Throwable;)V
     107: iconst_0
     108: ireturn
     109: iconst_1
     110: ireturn
    Exception table:
       from    to  target type
           0    19    22   Class java/lang/Throwable
          76    80    83   Class java/lang/Throwable

  private int tryExecute(org.jboss.threads.EnhancedQueueExecutor$Task);
    Code:
       0: aload_0
       1: getfield      #139                // Field tail:Lorg/jboss/threads/EnhancedQueueExecutor$TaskNode;
       4: astore_3
       5: aconst_null
       6: astore        4
       8: aload_3
       9: invokevirtual #89                 // Method org/jboss/threads/EnhancedQueueExecutor$TaskNode.getNext:()Lorg/jboss/threads/EnhancedQueueExecutor$QNode;
      12: astore_2
      13: aload_2
      14: aload_3
      15: if_acmpne     21
      18: goto          311
      21: aload_2
      22: ifnonnull     175
      25: aload_0
      26: aload_0
      27: getfield      #38                 // Field growthResistance:F
      30: invokevirtual #74                 // Method tryAllocateThread:(F)I
      33: istore        5
      35: iload         5
      37: ifne          42
      40: iconst_3
      41: ireturn
      42: iload         5
      44: iconst_2
      45: if_icmpne     50
      48: iconst_2
      49: ireturn
      50: getstatic     #81                 // Field $assertionsDisabled:Z
      53: ifne          70
      56: iload         5
      58: iconst_1
      59: if_icmpeq     70
      62: new           #82                 // class java/lang/AssertionError
      65: dup
      66: invokespecial #83                 // Method java/lang/AssertionError."<init>":()V
      69: athrow
      70: getstatic     #93                 // Field NO_QUEUE_LIMIT:Z
      73: ifne          127
      76: aload_0
      77: invokevirtual #207                // Method increaseQueueSize:()Z
      80: ifne          127
      83: aload_0
      84: fconst_0
      85: invokevirtual #74                 // Method tryAllocateThread:(F)I
      88: istore        5
      90: iload         5
      92: ifne          97
      95: iconst_3
      96: ireturn
      97: iload         5
      99: iconst_2
     100: if_icmpne     105
     103: iconst_2
     104: ireturn
     105: getstatic     #81                 // Field $assertionsDisabled:Z
     108: ifne          125
     111: iload         5
     113: iconst_1
     114: if_icmpeq     125
     117: new           #82                 // class java/lang/AssertionError
     120: dup
     121: invokespecial #83                 // Method java/lang/AssertionError."<init>":()V
     124: athrow
     125: iconst_1
     126: ireturn
     127: aload         4
     129: ifnonnull     142
     132: new           #90                 // class org/jboss/threads/EnhancedQueueExecutor$TaskNode
     135: dup
     136: aload_1
     137: invokespecial #208                // Method org/jboss/threads/EnhancedQueueExecutor$TaskNode."<init>":(Lorg/jboss/threads/EnhancedQueueExecutor$Task;)V
     140: astore        4
     142: aload_3
     143: aconst_null
     144: aload         4
     146: invokevirtual #142                // Method org/jboss/threads/EnhancedQueueExecutor$TaskNode.compareAndSetNext:(Lorg/jboss/threads/EnhancedQueueExecutor$QNode;Lorg/jboss/threads/EnhancedQueueExecutor$QNode;)Z
     149: ifeq          162
     152: aload_0
     153: aload_3
     154: aload         4
     156: invokevirtual #209                // Method compareAndSetTail:(Lorg/jboss/threads/EnhancedQueueExecutor$TaskNode;Lorg/jboss/threads/EnhancedQueueExecutor$TaskNode;)Z
     159: pop
     160: iconst_0
     161: ireturn
     162: getstatic     #93                 // Field NO_QUEUE_LIMIT:Z
     165: ifne          172
     168: aload_0
     169: invokevirtual #94                 // Method decreaseQueueSize:()V
     172: goto          311
     175: aload_2
     176: instanceof    #140                // class org/jboss/threads/EnhancedQueueExecutor$PoolThreadNode
     179: ifeq          256
     182: aload_2
     183: invokevirtual #210                // Method org/jboss/threads/EnhancedQueueExecutor$QNode.getNext:()Lorg/jboss/threads/EnhancedQueueExecutor$QNode;
     186: astore        5
     188: aload_3
     189: aload_2
     190: aload         5
     192: invokevirtual #142                // Method org/jboss/threads/EnhancedQueueExecutor$TaskNode.compareAndSetNext:(Lorg/jboss/threads/EnhancedQueueExecutor$QNode;Lorg/jboss/threads/EnhancedQueueExecutor$QNode;)Z
     195: ifeq          253
     198: getstatic     #81                 // Field $assertionsDisabled:Z
     201: ifne          219
     204: aload_3
     205: instanceof    #90                 // class org/jboss/threads/EnhancedQueueExecutor$TaskNode
     208: ifne          219
     211: new           #82                 // class java/lang/AssertionError
     214: dup
     215: invokespecial #83                 // Method java/lang/AssertionError."<init>":()V
     218: athrow
     219: aload_2
     220: checkcast     #140                // class org/jboss/threads/EnhancedQueueExecutor$PoolThreadNode
     223: astore        6
     225: aload         6
     227: getstatic     #143                // Field WAITING:Ljava/lang/Runnable;
     230: aload_1
     231: invokevirtual #145                // Method org/jboss/threads/EnhancedQueueExecutor$PoolThreadNode.compareAndSetTask:(Ljava/lang/Runnable;Ljava/lang/Runnable;)Z
     234: ifeq          253
     237: aload         6
     239: aload         5
     241: aconst_null
     242: invokevirtual #211                // Method org/jboss/threads/EnhancedQueueExecutor$PoolThreadNode.compareAndSetNext:(Lorg/jboss/threads/EnhancedQueueExecutor$QNode;Lorg/jboss/threads/EnhancedQueueExecutor$QNode;)Z
     245: pop
     246: aload         6
     248: invokevirtual #146                // Method org/jboss/threads/EnhancedQueueExecutor$PoolThreadNode.unpark:()V
     251: iconst_0
     252: ireturn
     253: goto          311
     256: aload_2
     257: instanceof    #90                 // class org/jboss/threads/EnhancedQueueExecutor$TaskNode
     260: ifeq          288
     263: aload_2
     264: checkcast     #90                 // class org/jboss/threads/EnhancedQueueExecutor$TaskNode
     267: astore        5
     269: aload_0
     270: aload_3
     271: aload         5
     273: invokevirtual #209                // Method compareAndSetTail:(Lorg/jboss/threads/EnhancedQueueExecutor$TaskNode;Lorg/jboss/threads/EnhancedQueueExecutor$TaskNode;)Z
     276: ifeq          285
     279: aload         5
     281: astore_3
     282: goto          8
     285: goto          311
     288: getstatic     #81                 // Field $assertionsDisabled:Z
     291: ifne          309
     294: aload_2
     295: instanceof    #148                // class org/jboss/threads/EnhancedQueueExecutor$TerminateWaiterNode
     298: ifne          309
     301: new           #82                 // class java/lang/AssertionError
     304: dup
     305: invokespecial #83                 // Method java/lang/AssertionError."<init>":()V
     308: athrow
     309: iconst_2
     310: ireturn
     311: getstatic     #77                 // Field UPDATE_STATISTICS:Z
     314: ifeq          324
     317: aload_0
     318: getfield      #8                  // Field spinMisses:Ljava/util/concurrent/atomic/LongAdder;
     321: invokevirtual #78                 // Method java/util/concurrent/atomic/LongAdder.increment:()V
     324: aload_0
     325: getfield      #139                // Field tail:Lorg/jboss/threads/EnhancedQueueExecutor$TaskNode;
     328: astore_3
     329: goto          8

  void completeTermination();
    Code:
       0: invokestatic  #116                // Method java/lang/Thread.interrupted:()Z
       3: istore_1
       4: aload_0
       5: getfield      #36                 // Field terminationTask:Ljava/lang/Runnable;
       8: invokestatic  #212                // Method org/jboss/threads/JBossExecutors.classLoaderPreservingTask:(Ljava/lang/Runnable;)Ljava/lang/Runnable;
      11: astore_2
      12: aload_0
      13: aconst_null
      14: putfield      #36                 // Field terminationTask:Ljava/lang/Runnable;
      17: aload_2
      18: invokeinterface #213,  1          // InterfaceMethod java/lang/Runnable.run:()V
      23: goto          45
      26: astore_3
      27: aload_0
      28: getfield      #23                 // Field exceptionHandler:Ljava/lang/Thread$UncaughtExceptionHandler;
      31: invokestatic  #103                // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      34: aload_3
      35: invokeinterface #214,  3          // InterfaceMethod java/lang/Thread$UncaughtExceptionHandler.uncaughtException:(Ljava/lang/Thread;Ljava/lang/Throwable;)V
      40: goto          45
      43: astore        4
      45: aload_0
      46: getstatic     #108                // Field TERMINATE_COMPLETE_WAITER:Lorg/jboss/threads/Waiter;
      49: invokevirtual #215                // Method getAndSetTerminationWaiters:(Lorg/jboss/threads/Waiter;)Lorg/jboss/threads/Waiter;
      52: astore_3
      53: aload_3
      54: ifnull        72
      57: aload_3
      58: invokevirtual #216                // Method org/jboss/threads/Waiter.getThread:()Ljava/lang/Thread;
      61: invokestatic  #168                // Method java/util/concurrent/locks/LockSupport.unpark:(Ljava/lang/Thread;)V
      64: aload_3
      65: invokevirtual #217                // Method org/jboss/threads/Waiter.getNext:()Lorg/jboss/threads/Waiter;
      68: astore_3
      69: goto          53
      72: aload_0
      73: getfield      #139                // Field tail:Lorg/jboss/threads/EnhancedQueueExecutor$TaskNode;
      76: getstatic     #218                // Field TERMINATE_COMPLETE:Lorg/jboss/threads/EnhancedQueueExecutor$QNode;
      79: invokevirtual #219                // Method org/jboss/threads/EnhancedQueueExecutor$TaskNode.setNext:(Lorg/jboss/threads/EnhancedQueueExecutor$QNode;)V
      82: getstatic     #55                 // Field DISABLE_MBEAN:Z
      85: ifne          144
      88: aload_0
      89: getfield      #58                 // Field acc:Ljava/security/AccessControlContext;
      92: ifnull        144
      95: aload_0
      96: getfield      #67                 // Field handle:Ljava/lang/Object;
      99: astore        4
     101: aload         4
     103: ifnull        139
     106: iload_1
     107: ifne          116
     110: invokestatic  #116                // Method java/lang/Thread.interrupted:()Z
     113: ifeq          120
     116: iconst_1
     117: goto          121
     120: iconst_0
     121: istore_1
     122: new           #220                // class org/jboss/threads/EnhancedQueueExecutor$MBeanUnregisterAction
     125: dup
     126: aload         4
     128: invokespecial #221                // Method org/jboss/threads/EnhancedQueueExecutor$MBeanUnregisterAction."<init>":(Ljava/lang/Object;)V
     131: aload_0
     132: getfield      #58                 // Field acc:Ljava/security/AccessControlContext;
     135: invokestatic  #66                 // Method java/security/AccessController.doPrivileged:(Ljava/security/PrivilegedAction;Ljava/security/AccessControlContext;)Ljava/lang/Object;
     138: pop
     139: aload_0
     140: aconst_null
     141: putfield      #58                 // Field acc:Ljava/security/AccessControlContext;
     144: iload_1
     145: ifeq          172
     148: invokestatic  #103                // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
     151: invokevirtual #155                // Method java/lang/Thread.interrupt:()V
     154: goto          172
     157: astore        5
     159: iload_1
     160: ifeq          169
     163: invokestatic  #103                // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
     166: invokevirtual #155                // Method java/lang/Thread.interrupt:()V
     169: aload         5
     171: athrow
     172: return
    Exception table:
       from    to  target type
          17    23    26   Class java/lang/Throwable
          27    40    43   Class java/lang/Throwable
           4   144   157   any
         157   159   157   any

  void incrementActiveCount();
    Code:
       0: getstatic     #222                // Field org/jboss/threads/JBossExecutors.unsafe:Lsun/misc/Unsafe;
       3: aload_0
       4: getstatic     #223                // Field activeCountOffset:J
       7: iconst_1
       8: invokevirtual #224                // Method sun/misc/Unsafe.getAndAddInt:(Ljava/lang/Object;JI)I
      11: pop
      12: return

  void decrementActiveCount();
    Code:
       0: getstatic     #222                // Field org/jboss/threads/JBossExecutors.unsafe:Lsun/misc/Unsafe;
       3: aload_0
       4: getstatic     #223                // Field activeCountOffset:J
       7: iconst_m1
       8: invokevirtual #224                // Method sun/misc/Unsafe.getAndAddInt:(Ljava/lang/Object;JI)I
      11: pop
      12: return

  boolean compareAndSetPeakThreadCount(int, int);
    Code:
       0: getstatic     #222                // Field org/jboss/threads/JBossExecutors.unsafe:Lsun/misc/Unsafe;
       3: aload_0
       4: getstatic     #225                // Field peakThreadCountOffset:J
       7: iload_1
       8: iload_2
       9: invokevirtual #226                // Method sun/misc/Unsafe.compareAndSwapInt:(Ljava/lang/Object;JII)Z
      12: ireturn

  boolean compareAndSetPeakQueueSize(int, int);
    Code:
       0: getstatic     #222                // Field org/jboss/threads/JBossExecutors.unsafe:Lsun/misc/Unsafe;
       3: aload_0
       4: getstatic     #227                // Field peakQueueSizeOffset:J
       7: iload_1
       8: iload_2
       9: invokevirtual #226                // Method sun/misc/Unsafe.compareAndSwapInt:(Ljava/lang/Object;JII)Z
      12: ireturn

  boolean compareAndSetQueueSize(long, long);
    Code:
       0: getstatic     #222                // Field org/jboss/threads/JBossExecutors.unsafe:Lsun/misc/Unsafe;
       3: aload_0
       4: getstatic     #228                // Field queueSizeOffset:J
       7: lload_1
       8: lload_3
       9: invokevirtual #229                // Method sun/misc/Unsafe.compareAndSwapLong:(Ljava/lang/Object;JJJ)Z
      12: ireturn

  boolean compareAndSetTerminationWaiters(org.jboss.threads.Waiter, org.jboss.threads.Waiter);
    Code:
       0: getstatic     #222                // Field org/jboss/threads/JBossExecutors.unsafe:Lsun/misc/Unsafe;
       3: aload_0
       4: getstatic     #230                // Field terminationWaitersOffset:J
       7: aload_1
       8: aload_2
       9: invokevirtual #231                // Method sun/misc/Unsafe.compareAndSwapObject:(Ljava/lang/Object;JLjava/lang/Object;Ljava/lang/Object;)Z
      12: ireturn

  org.jboss.threads.Waiter getAndSetTerminationWaiters(org.jboss.threads.Waiter);
    Code:
       0: getstatic     #222                // Field org/jboss/threads/JBossExecutors.unsafe:Lsun/misc/Unsafe;
       3: aload_0
       4: getstatic     #230                // Field terminationWaitersOffset:J
       7: aload_1
       8: invokevirtual #232                // Method sun/misc/Unsafe.getAndSetObject:(Ljava/lang/Object;JLjava/lang/Object;)Ljava/lang/Object;
      11: checkcast     #109                // class org/jboss/threads/Waiter
      14: areturn

  boolean increaseQueueSize();
    Code:
       0: aload_0
       1: getfield      #51                 // Field queueSize:J
       4: lstore_1
       5: lload_1
       6: invokestatic  #186                // Method currentQueueSizeOf:(J)I
       9: istore_3
      10: iload_3
      11: lload_1
      12: invokestatic  #178                // Method maxQueueSizeOf:(J)I
      15: if_icmplt     20
      18: iconst_0
      19: ireturn
      20: iload_3
      21: iconst_1
      22: iadd
      23: istore        4
      25: aload_0
      26: lload_1
      27: lload_1
      28: iload         4
      30: invokestatic  #48                 // Method withCurrentQueueSize:(JI)J
      33: invokevirtual #183                // Method compareAndSetQueueSize:(JJ)Z
      36: ifne          80
      39: getstatic     #77                 // Field UPDATE_STATISTICS:Z
      42: ifeq          52
      45: aload_0
      46: getfield      #8                  // Field spinMisses:Ljava/util/concurrent/atomic/LongAdder;
      49: invokevirtual #78                 // Method java/util/concurrent/atomic/LongAdder.increment:()V
      52: aload_0
      53: getfield      #51                 // Field queueSize:J
      56: lstore_1
      57: lload_1
      58: invokestatic  #186                // Method currentQueueSizeOf:(J)I
      61: istore_3
      62: iload_3
      63: lload_1
      64: invokestatic  #178                // Method maxQueueSizeOf:(J)I
      67: if_icmplt     72
      70: iconst_0
      71: ireturn
      72: iload_3
      73: iconst_1
      74: iadd
      75: istore        4
      77: goto          25
      80: getstatic     #77                 // Field UPDATE_STATISTICS:Z
      83: ifeq          110
      86: aload_0
      87: getfield      #190                // Field peakQueueSize:I
      90: istore_3
      91: iload         4
      93: iload_3
      94: if_icmpgt     100
      97: goto          110
     100: aload_0
     101: iload_3
     102: iload         4
     104: invokevirtual #233                // Method compareAndSetPeakQueueSize:(II)Z
     107: ifeq          86
     110: iconst_1
     111: ireturn

  void decreaseQueueSize();
    Code:
       0: aload_0
       1: getfield      #51                 // Field queueSize:J
       4: lstore_1
       5: getstatic     #81                 // Field $assertionsDisabled:Z
       8: ifne          26
      11: lload_1
      12: invokestatic  #186                // Method currentQueueSizeOf:(J)I
      15: ifgt          26
      18: new           #82                 // class java/lang/AssertionError
      21: dup
      22: invokespecial #83                 // Method java/lang/AssertionError."<init>":()V
      25: athrow
      26: aload_0
      27: lload_1
      28: lload_1
      29: lload_1
      30: invokestatic  #186                // Method currentQueueSizeOf:(J)I
      33: iconst_1
      34: isub
      35: invokestatic  #48                 // Method withCurrentQueueSize:(JI)J
      38: invokevirtual #183                // Method compareAndSetQueueSize:(JJ)Z
      41: ifne          83
      44: getstatic     #77                 // Field UPDATE_STATISTICS:Z
      47: ifeq          57
      50: aload_0
      51: getfield      #8                  // Field spinMisses:Ljava/util/concurrent/atomic/LongAdder;
      54: invokevirtual #78                 // Method java/util/concurrent/atomic/LongAdder.increment:()V
      57: aload_0
      58: getfield      #51                 // Field queueSize:J
      61: lstore_1
      62: getstatic     #81                 // Field $assertionsDisabled:Z
      65: ifne          26
      68: lload_1
      69: invokestatic  #186                // Method currentQueueSizeOf:(J)I
      72: ifgt          26
      75: new           #82                 // class java/lang/AssertionError
      78: dup
      79: invokespecial #83                 // Method java/lang/AssertionError."<init>":()V
      82: athrow
      83: return

  static int currentQueueSizeOf(long);
    Code:
       0: lload_0
       1: ldc2_w        #234                // long 2147483647l
       4: land
       5: l2i
       6: ireturn

  static long withCurrentQueueSize(long, int);
    Code:
       0: getstatic     #81                 // Field $assertionsDisabled:Z
       3: ifne          18
       6: iload_2
       7: ifge          18
      10: new           #82                 // class java/lang/AssertionError
      13: dup
      14: invokespecial #83                 // Method java/lang/AssertionError."<init>":()V
      17: athrow
      18: lload_0
      19: ldc2_w        #236                // long -4294967296l
      22: land
      23: iload_2
      24: i2l
      25: lor
      26: lreturn

  static int maxQueueSizeOf(long);
    Code:
       0: lload_0
       1: bipush        32
       3: lushr
       4: ldc2_w        #234                // long 2147483647l
       7: land
       8: l2i
       9: ireturn

  static long withMaxQueueSize(long, int);
    Code:
       0: getstatic     #81                 // Field $assertionsDisabled:Z
       3: ifne          18
       6: iload_2
       7: ifge          18
      10: new           #82                 // class java/lang/AssertionError
      13: dup
      14: invokespecial #83                 // Method java/lang/AssertionError."<init>":()V
      17: athrow
      18: lload_0
      19: ldc2_w        #238                // long 4294967295l
      22: land
      23: iload_2
      24: i2l
      25: bipush        32
      27: lshl
      28: lor
      29: lreturn

  static int coreSizeOf(long);
    Code:
       0: lload_0
       1: bipush        20
       3: lushr
       4: ldc2_w        #164                // long 1048575l
       7: land
       8: l2i
       9: ireturn

  static int maxSizeOf(long);
    Code:
       0: lload_0
       1: bipush        40
       3: lushr
       4: ldc2_w        #164                // long 1048575l
       7: land
       8: l2i
       9: ireturn

  static int currentSizeOf(long);
    Code:
       0: lload_0
       1: iconst_0
       2: lushr
       3: ldc2_w        #164                // long 1048575l
       6: land
       7: l2i
       8: ireturn

  static long withCoreSize(long, int);
    Code:
       0: getstatic     #81                 // Field $assertionsDisabled:Z
       3: ifne          28
       6: iconst_0
       7: iload_2
       8: if_icmpgt     20
      11: iload_2
      12: i2l
      13: ldc2_w        #164                // long 1048575l
      16: lcmp
      17: ifle          28
      20: new           #82                 // class java/lang/AssertionError
      23: dup
      24: invokespecial #83                 // Method java/lang/AssertionError."<init>":()V
      27: athrow
      28: lload_0
      29: ldc2_w        #240                // long -1099510579201l
      32: land
      33: iload_2
      34: i2l
      35: bipush        20
      37: lshl
      38: lor
      39: lreturn

  static long withCurrentSize(long, int);
    Code:
       0: getstatic     #81                 // Field $assertionsDisabled:Z
       3: ifne          28
       6: iconst_0
       7: iload_2
       8: if_icmpgt     20
      11: iload_2
      12: i2l
      13: ldc2_w        #164                // long 1048575l
      16: lcmp
      17: ifle          28
      20: new           #82                 // class java/lang/AssertionError
      23: dup
      24: invokespecial #83                 // Method java/lang/AssertionError."<init>":()V
      27: athrow
      28: lload_0
      29: ldc2_w        #242                // long -1048576l
      32: land
      33: iload_2
      34: i2l
      35: iconst_0
      36: lshl
      37: lor
      38: lreturn

  static long withMaxSize(long, int);
    Code:
       0: getstatic     #81                 // Field $assertionsDisabled:Z
       3: ifne          28
       6: iconst_0
       7: iload_2
       8: if_icmpgt     20
      11: iload_2
      12: i2l
      13: ldc2_w        #164                // long 1048575l
      16: lcmp
      17: ifle          28
      20: new           #82                 // class java/lang/AssertionError
      23: dup
      24: invokespecial #83                 // Method java/lang/AssertionError."<init>":()V
      27: athrow
      28: lload_0
      29: ldc2_w        #244                // long -1152920405095219201l
      32: land
      33: iload_2
      34: i2l
      35: bipush        40
      37: lshl
      38: lor
      39: lreturn

  static long withShutdownRequested(long);
    Code:
       0: lload_0
       1: ldc2_w        #246                // long 2305843009213693952l
       4: lor
       5: lreturn

  static long withShutdownComplete(long);
    Code:
       0: lload_0
       1: ldc2_w        #248                // long -9223372036854775808l
       4: lor
       5: lreturn

  static long withShutdownInterrupt(long);
    Code:
       0: lload_0
       1: ldc2_w        #250                // long 4611686018427387904l
       4: lor
       5: lreturn

  static long withAllowCoreTimeout(long, boolean);
    Code:
       0: iload_2
       1: ifeq          12
       4: lload_0
       5: ldc2_w        #252                // long 1152921504606846976l
       8: lor
       9: goto          17
      12: lload_0
      13: ldc2_w        #254                // long -1152921504606846977l
      16: land
      17: lreturn

  static boolean isShutdownRequested(long);
    Code:
       0: lload_0
       1: ldc2_w        #246                // long 2305843009213693952l
       4: land
       5: lconst_0
       6: lcmp
       7: ifeq          14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  static boolean isShutdownComplete(long);
    Code:
       0: lload_0
       1: ldc2_w        #248                // long -9223372036854775808l
       4: land
       5: lconst_0
       6: lcmp
       7: ifeq          14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  static boolean isShutdownInterrupt(long);
    Code:
       0: lload_0
       1: ldc2_w        #250                // long 4611686018427387904l
       4: land
       5: lconst_0
       6: lcmp
       7: ifeq          14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  static boolean isAllowCoreTimeout(long);
    Code:
       0: lload_0
       1: ldc2_w        #252                // long 1152921504606846976l
       4: land
       5: lconst_0
       6: lcmp
       7: ifeq          14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  void rejectException(org.jboss.threads.EnhancedQueueExecutor$Task, java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #21                 // Field handoffExecutor:Ljava/util/concurrent/Executor;
       4: aload_1
       5: invokevirtual #96                 // Method org/jboss/threads/EnhancedQueueExecutor$Task.handoff:()Ljava/lang/Runnable;
       8: invokeinterface #256,  2          // InterfaceMethod java/util/concurrent/Executor.execute:(Ljava/lang/Runnable;)V
      13: goto          24
      16: astore_3
      17: aload_3
      18: aload_2
      19: invokevirtual #257                // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
      22: aload_3
      23: athrow
      24: return
    Exception table:
       from    to  target type
           0    13    16   Class java/lang/Throwable

  void rejectNoThread(org.jboss.threads.EnhancedQueueExecutor$Task);
    Code:
       0: aload_0
       1: getfield      #21                 // Field handoffExecutor:Ljava/util/concurrent/Executor;
       4: aload_1
       5: invokevirtual #96                 // Method org/jboss/threads/EnhancedQueueExecutor$Task.handoff:()Ljava/lang/Runnable;
       8: invokeinterface #256,  2          // InterfaceMethod java/util/concurrent/Executor.execute:(Ljava/lang/Runnable;)V
      13: goto          33
      16: astore_2
      17: aload_2
      18: new           #258                // class java/util/concurrent/RejectedExecutionException
      21: dup
      22: ldc_w         #259                // String No threads available
      25: invokespecial #260                // Method java/util/concurrent/RejectedExecutionException."<init>":(Ljava/lang/String;)V
      28: invokevirtual #257                // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
      31: aload_2
      32: athrow
      33: return
    Exception table:
       from    to  target type
           0    13    16   Class java/lang/Throwable

  void rejectQueueFull(org.jboss.threads.EnhancedQueueExecutor$Task);
    Code:
       0: aload_0
       1: getfield      #21                 // Field handoffExecutor:Ljava/util/concurrent/Executor;
       4: aload_1
       5: invokevirtual #96                 // Method org/jboss/threads/EnhancedQueueExecutor$Task.handoff:()Ljava/lang/Runnable;
       8: invokeinterface #256,  2          // InterfaceMethod java/util/concurrent/Executor.execute:(Ljava/lang/Runnable;)V
      13: goto          33
      16: astore_2
      17: aload_2
      18: new           #258                // class java/util/concurrent/RejectedExecutionException
      21: dup
      22: ldc_w         #261                // String Queue is full
      25: invokespecial #260                // Method java/util/concurrent/RejectedExecutionException."<init>":(Ljava/lang/String;)V
      28: invokevirtual #257                // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
      31: aload_2
      32: athrow
      33: return
    Exception table:
       from    to  target type
           0    13    16   Class java/lang/Throwable

  void rejectShutdown(org.jboss.threads.EnhancedQueueExecutor$Task);
    Code:
       0: aload_0
       1: getfield      #21                 // Field handoffExecutor:Ljava/util/concurrent/Executor;
       4: aload_1
       5: invokevirtual #96                 // Method org/jboss/threads/EnhancedQueueExecutor$Task.handoff:()Ljava/lang/Runnable;
       8: invokeinterface #256,  2          // InterfaceMethod java/util/concurrent/Executor.execute:(Ljava/lang/Runnable;)V
      13: goto          33
      16: astore_2
      17: aload_2
      18: new           #258                // class java/util/concurrent/RejectedExecutionException
      21: dup
      22: ldc_w         #262                // String Executor is being shut down
      25: invokespecial #260                // Method java/util/concurrent/RejectedExecutionException."<init>":(Ljava/lang/String;)V
      28: invokevirtual #257                // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
      31: aload_2
      32: athrow
      33: return
    Exception table:
       from    to  target type
           0    13    16   Class java/lang/Throwable

  static java.lang.Runnable nullToNop(java.lang.Runnable);
    Code:
       0: aload_0
       1: ifnonnull     10
       4: invokestatic  #263                // Method org/jboss/threads/NullRunnable.getInstance:()Lorg/jboss/threads/NullRunnable;
       7: goto          11
      10: aload_0
      11: areturn

  static int wrongType() throws java.lang.ClassCastException;
    Code:
       0: new           #264                // class java/lang/ClassCastException
       3: dup
       4: ldc_w         #265                // String Wrong task type for comparison
       7: invokespecial #266                // Method java/lang/ClassCastException."<init>":(Ljava/lang/String;)V
      10: athrow

  static java.util.concurrent.atomic.LongAdder access$000(org.jboss.threads.EnhancedQueueExecutor);
    Code:
       0: aload_0
       1: getfield      #8                  // Field spinMisses:Ljava/util/concurrent/atomic/LongAdder;
       4: areturn

  static java.util.Set access$100(org.jboss.threads.EnhancedQueueExecutor);
    Code:
       0: aload_0
       1: getfield      #7                  // Field runningThreads:Ljava/util/Set;
       4: areturn

  static org.jboss.threads.ContextHandler access$200(org.jboss.threads.EnhancedQueueExecutor);
    Code:
       0: aload_0
       1: getfield      #6                  // Field contextHandler:Lorg/jboss/threads/ContextHandler;
       4: areturn

  static java.util.concurrent.atomic.LongAdder access$300(org.jboss.threads.EnhancedQueueExecutor);
    Code:
       0: aload_0
       1: getfield      #5                  // Field completedTaskCounter:Ljava/util/concurrent/atomic/LongAdder;
       4: areturn

  static org.jboss.threads.EnhancedQueueExecutor$SchedulerTask access$400(org.jboss.threads.EnhancedQueueExecutor);
    Code:
       0: aload_0
       1: getfield      #4                  // Field schedulerTask:Lorg/jboss/threads/EnhancedQueueExecutor$SchedulerTask;
       4: areturn

  static int access$500(org.jboss.threads.EnhancedQueueExecutor, org.jboss.threads.EnhancedQueueExecutor$Task);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #3                  // Method tryExecute:(Lorg/jboss/threads/EnhancedQueueExecutor$Task;)I
       5: ireturn

  static java.util.concurrent.atomic.LongAdder access$600(org.jboss.threads.EnhancedQueueExecutor);
    Code:
       0: aload_0
       1: getfield      #2                  // Field submittedTaskCounter:Ljava/util/concurrent/atomic/LongAdder;
       4: areturn

  static java.util.concurrent.atomic.LongAdder access$700(org.jboss.threads.EnhancedQueueExecutor);
    Code:
       0: aload_0
       1: getfield      #1                  // Field rejectedTaskCounter:Ljava/util/concurrent/atomic/LongAdder;
       4: areturn

  static {};
    Code:
       0: ldc           #79                 // class org/jboss/threads/EnhancedQueueExecutor
       2: invokevirtual #267                // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #81                 // Field $assertionsDisabled:Z
      16: iconst_0
      17: anewarray     #154                // class java/lang/Thread
      20: putstatic     #194                // Field NO_THREADS:[Ljava/lang/Thread;
      23: invokestatic  #268                // Method org/jboss/threads/Version.getVersionString:()Ljava/lang/String;
      26: pop
      27: invokestatic  #269                // Method org/jboss/threads/EnhancedQueueExecutor$MBeanUnregisterAction.forceInit:()V
      30: ldc_w         #270                // String disable
      33: iconst_0
      34: invokestatic  #271                // Method readBooleanPropertyPrefixed:(Ljava/lang/String;Z)Z
      37: putstatic     #272                // Field DISABLE_HINT:Z
      40: ldc_w         #273                // String statistics
      43: iconst_0
      44: invokestatic  #271                // Method readBooleanPropertyPrefixed:(Ljava/lang/String;Z)Z
      47: putstatic     #77                 // Field UPDATE_STATISTICS:Z
      50: getstatic     #77                 // Field UPDATE_STATISTICS:Z
      53: ifne          66
      56: ldc_w         #274                // String statistics.active-count
      59: iconst_0
      60: invokestatic  #271                // Method readBooleanPropertyPrefixed:(Ljava/lang/String;Z)Z
      63: ifeq          70
      66: iconst_1
      67: goto          71
      70: iconst_0
      71: putstatic     #188                // Field UPDATE_ACTIVE_COUNT:Z
      74: ldc_w         #275                // String unlimited-queue
      77: iconst_0
      78: invokestatic  #271                // Method readBooleanPropertyPrefixed:(Ljava/lang/String;Z)Z
      81: putstatic     #93                 // Field NO_QUEUE_LIMIT:Z
      84: ldc_w         #276                // String register-mbean
      87: iconst_1
      88: invokestatic  #271                // Method readBooleanPropertyPrefixed:(Ljava/lang/String;Z)Z
      91: putstatic     #277                // Field REGISTER_MBEAN:Z
      94: ldc_w         #278                // String disable-mbean
      97: ldc_w         #279                // String org.graalvm.nativeimage.imagecode
     100: aconst_null
     101: invokestatic  #280                // Method readProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
     104: ifnull        111
     107: iconst_1
     108: goto          112
     111: iconst_0
     112: invokestatic  #271                // Method readBooleanPropertyPrefixed:(Ljava/lang/String;Z)Z
     115: putstatic     #55                 // Field DISABLE_MBEAN:Z
     118: ldc_w         #281                // String park-spins
     121: invokestatic  #282                // Method org/wildfly/common/cpu/ProcessorInfo.availableProcessors:()I
     124: iconst_1
     125: if_icmpne     132
     128: iconst_0
     129: goto          135
     132: sipush        128
     135: invokestatic  #283                // Method readIntPropertyPrefixed:(Ljava/lang/String;I)I
     138: putstatic     #284                // Field PARK_SPINS:I
     141: ldc_w         #285                // String park-yields
     144: iconst_1
     145: invokestatic  #283                // Method readIntPropertyPrefixed:(Ljava/lang/String;I)I
     148: getstatic     #284                // Field PARK_SPINS:I
     151: invokestatic  #19                 // Method java/lang/Math.min:(II)I
     154: iconst_0
     155: invokestatic  #286                // Method java/lang/Math.max:(II)I
     158: putstatic     #287                // Field YIELD_FACTOR:I
     161: invokestatic  #288                // Method org/jboss/threads/JBossExecutors.rejectingExecutor:()Ljava/util/concurrent/Executor;
     164: putstatic     #289                // Field DEFAULT_HANDLER:Ljava/util/concurrent/Executor;
     167: getstatic     #222                // Field org/jboss/threads/JBossExecutors.unsafe:Lsun/misc/Unsafe;
     170: ldc           #79                 // class org/jboss/threads/EnhancedQueueExecutor
     172: ldc_w         #290                // String terminationWaiters
     175: invokevirtual #291                // Method java/lang/Class.getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;
     178: invokevirtual #292                // Method sun/misc/Unsafe.objectFieldOffset:(Ljava/lang/reflect/Field;)J
     181: putstatic     #230                // Field terminationWaitersOffset:J
     184: getstatic     #222                // Field org/jboss/threads/JBossExecutors.unsafe:Lsun/misc/Unsafe;
     187: ldc           #79                 // class org/jboss/threads/EnhancedQueueExecutor
     189: ldc_w         #293                // String queueSize
     192: invokevirtual #291                // Method java/lang/Class.getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;
     195: invokevirtual #292                // Method sun/misc/Unsafe.objectFieldOffset:(Ljava/lang/reflect/Field;)J
     198: putstatic     #228                // Field queueSizeOffset:J
     201: getstatic     #222                // Field org/jboss/threads/JBossExecutors.unsafe:Lsun/misc/Unsafe;
     204: ldc           #79                 // class org/jboss/threads/EnhancedQueueExecutor
     206: ldc_w         #294                // String peakThreadCount
     209: invokevirtual #291                // Method java/lang/Class.getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;
     212: invokevirtual #292                // Method sun/misc/Unsafe.objectFieldOffset:(Ljava/lang/reflect/Field;)J
     215: putstatic     #225                // Field peakThreadCountOffset:J
     218: getstatic     #222                // Field org/jboss/threads/JBossExecutors.unsafe:Lsun/misc/Unsafe;
     221: ldc           #79                 // class org/jboss/threads/EnhancedQueueExecutor
     223: ldc_w         #295                // String activeCount
     226: invokevirtual #291                // Method java/lang/Class.getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;
     229: invokevirtual #292                // Method sun/misc/Unsafe.objectFieldOffset:(Ljava/lang/reflect/Field;)J
     232: putstatic     #223                // Field activeCountOffset:J
     235: getstatic     #222                // Field org/jboss/threads/JBossExecutors.unsafe:Lsun/misc/Unsafe;
     238: ldc           #79                 // class org/jboss/threads/EnhancedQueueExecutor
     240: ldc_w         #296                // String peakQueueSize
     243: invokevirtual #291                // Method java/lang/Class.getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;
     246: invokevirtual #292                // Method sun/misc/Unsafe.objectFieldOffset:(Ljava/lang/reflect/Field;)J
     249: putstatic     #227                // Field peakQueueSizeOffset:J
     252: goto          268
     255: astore_0
     256: new           #298                // class java/lang/NoSuchFieldError
     259: dup
     260: aload_0
     261: invokevirtual #299                // Method java/lang/NoSuchFieldException.getMessage:()Ljava/lang/String;
     264: invokespecial #300                // Method java/lang/NoSuchFieldError."<init>":(Ljava/lang/String;)V
     267: athrow
     268: new           #148                // class org/jboss/threads/EnhancedQueueExecutor$TerminateWaiterNode
     271: dup
     272: invokespecial #301                // Method org/jboss/threads/EnhancedQueueExecutor$TerminateWaiterNode."<init>":()V
     275: putstatic     #141                // Field TERMINATE_REQUESTED:Lorg/jboss/threads/EnhancedQueueExecutor$QNode;
     278: new           #148                // class org/jboss/threads/EnhancedQueueExecutor$TerminateWaiterNode
     281: dup
     282: invokespecial #301                // Method org/jboss/threads/EnhancedQueueExecutor$TerminateWaiterNode."<init>":()V
     285: putstatic     #218                // Field TERMINATE_COMPLETE:Lorg/jboss/threads/EnhancedQueueExecutor$QNode;
     288: new           #109                // class org/jboss/threads/Waiter
     291: dup
     292: aconst_null
     293: invokespecial #110                // Method org/jboss/threads/Waiter."<init>":(Lorg/jboss/threads/Waiter;)V
     296: putstatic     #108                // Field TERMINATE_COMPLETE_WAITER:Lorg/jboss/threads/Waiter;
     299: new           #302                // class org/jboss/threads/NullRunnable
     302: dup
     303: invokespecial #303                // Method org/jboss/threads/NullRunnable."<init>":()V
     306: putstatic     #143                // Field WAITING:Ljava/lang/Runnable;
     309: new           #302                // class org/jboss/threads/NullRunnable
     312: dup
     313: invokespecial #303                // Method org/jboss/threads/NullRunnable."<init>":()V
     316: putstatic     #304                // Field GAVE_UP:Ljava/lang/Runnable;
     319: new           #302                // class org/jboss/threads/NullRunnable
     322: dup
     323: invokespecial #303                // Method org/jboss/threads/NullRunnable."<init>":()V
     326: putstatic     #305                // Field ACCEPTED:Ljava/lang/Runnable;
     329: new           #302                // class org/jboss/threads/NullRunnable
     332: dup
     333: invokespecial #303                // Method org/jboss/threads/NullRunnable."<init>":()V
     336: putstatic     #144                // Field EXIT:Ljava/lang/Runnable;
     339: new           #306                // class java/util/concurrent/atomic/AtomicInteger
     342: dup
     343: iconst_1
     344: invokespecial #307                // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
     347: putstatic     #61                 // Field sequence:Ljava/util/concurrent/atomic/AtomicInteger;
     350: iconst_0
     351: anewarray     #308                // class org/jboss/threads/EnhancedQueueExecutor$AbstractScheduledFuture
     354: putstatic     #309                // Field NO_FUTURES:[Lorg/jboss/threads/EnhancedQueueExecutor$AbstractScheduledFuture;
     357: new           #310                // class java/util/concurrent/atomic/AtomicLong
     360: dup
     361: invokespecial #311                // Method java/util/concurrent/atomic/AtomicLong."<init>":()V
     364: putstatic     #312                // Field SCHEDULED_TASK_SEQ:Ljava/util/concurrent/atomic/AtomicLong;
     367: return
    Exception table:
       from    to  target type
         167   252   255   Class java/lang/NoSuchFieldException
}
