Compiled from "ServletRequest.java"
public interface jakarta.servlet.ServletRequest {
  public abstract java.lang.Object getAttribute(java.lang.String);

  public abstract java.util.Enumeration<java.lang.String> getAttributeNames();

  public abstract java.lang.String getCharacterEncoding();

  public abstract void setCharacterEncoding(java.lang.String) throws java.io.UnsupportedEncodingException;

  public abstract int getContentLength();

  public abstract long getContentLengthLong();

  public abstract java.lang.String getContentType();

  public abstract jakarta.servlet.ServletInputStream getInputStream() throws java.io.IOException;

  public abstract java.lang.String getParameter(java.lang.String);

  public abstract java.util.Enumeration<java.lang.String> getParameterNames();

  public abstract java.lang.String[] getParameterValues(java.lang.String);

  public abstract java.util.Map<java.lang.String, java.lang.String[]> getParameterMap();

  public abstract java.lang.String getProtocol();

  public abstract java.lang.String getScheme();

  public abstract java.lang.String getServerName();

  public abstract int getServerPort();

  public abstract java.io.BufferedReader getReader() throws java.io.IOException;

  public abstract java.lang.String getRemoteAddr();

  public abstract java.lang.String getRemoteHost();

  public abstract void setAttribute(java.lang.String, java.lang.Object);

  public abstract void removeAttribute(java.lang.String);

  public abstract java.util.Locale getLocale();

  public abstract java.util.Enumeration<java.util.Locale> getLocales();

  public abstract boolean isSecure();

  public abstract jakarta.servlet.RequestDispatcher getRequestDispatcher(java.lang.String);

  public abstract int getRemotePort();

  public abstract java.lang.String getLocalName();

  public abstract java.lang.String getLocalAddr();

  public abstract int getLocalPort();

  public abstract jakarta.servlet.ServletContext getServletContext();

  public abstract jakarta.servlet.AsyncContext startAsync() throws java.lang.IllegalStateException;

  public abstract jakarta.servlet.AsyncContext startAsync(jakarta.servlet.ServletRequest, jakarta.servlet.ServletResponse) throws java.lang.IllegalStateException;

  public abstract boolean isAsyncStarted();

  public abstract boolean isAsyncSupported();

  public abstract jakarta.servlet.AsyncContext getAsyncContext();

  public abstract jakarta.servlet.DispatcherType getDispatcherType();

  public abstract java.lang.String getRequestId();

  public abstract java.lang.String getProtocolRequestId();

  public abstract jakarta.servlet.ServletConnection getServletConnection();
}
