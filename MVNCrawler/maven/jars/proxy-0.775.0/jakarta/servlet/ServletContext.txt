Compiled from "ServletContext.java"
public interface jakarta.servlet.ServletContext {
  public static final java.lang.String TEMPDIR;

  public static final java.lang.String ORDERED_LIBS;

  public abstract java.lang.String getContextPath();

  public abstract jakarta.servlet.ServletContext getContext(java.lang.String);

  public abstract int getMajorVersion();

  public abstract int getMinorVersion();

  public abstract int getEffectiveMajorVersion();

  public abstract int getEffectiveMinorVersion();

  public abstract java.lang.String getMimeType(java.lang.String);

  public abstract java.util.Set<java.lang.String> getResourcePaths(java.lang.String);

  public abstract java.net.URL getResource(java.lang.String) throws java.net.MalformedURLException;

  public abstract java.io.InputStream getResourceAsStream(java.lang.String);

  public abstract jakarta.servlet.RequestDispatcher getRequestDispatcher(java.lang.String);

  public abstract jakarta.servlet.RequestDispatcher getNamedDispatcher(java.lang.String);

  public abstract void log(java.lang.String);

  public abstract void log(java.lang.String, java.lang.Throwable);

  public abstract java.lang.String getRealPath(java.lang.String);

  public abstract java.lang.String getServerInfo();

  public abstract java.lang.String getInitParameter(java.lang.String);

  public abstract java.util.Enumeration<java.lang.String> getInitParameterNames();

  public abstract boolean setInitParameter(java.lang.String, java.lang.String);

  public abstract java.lang.Object getAttribute(java.lang.String);

  public abstract java.util.Enumeration<java.lang.String> getAttributeNames();

  public abstract void setAttribute(java.lang.String, java.lang.Object);

  public abstract void removeAttribute(java.lang.String);

  public abstract java.lang.String getServletContextName();

  public abstract jakarta.servlet.ServletRegistration$Dynamic addServlet(java.lang.String, java.lang.String);

  public abstract jakarta.servlet.ServletRegistration$Dynamic addServlet(java.lang.String, jakarta.servlet.Servlet);

  public abstract jakarta.servlet.ServletRegistration$Dynamic addServlet(java.lang.String, java.lang.Class<? extends jakarta.servlet.Servlet>);

  public abstract jakarta.servlet.ServletRegistration$Dynamic addJspFile(java.lang.String, java.lang.String);

  public abstract <T extends jakarta.servlet.Servlet> T createServlet(java.lang.Class<T>) throws jakarta.servlet.ServletException;

  public abstract jakarta.servlet.ServletRegistration getServletRegistration(java.lang.String);

  public abstract java.util.Map<java.lang.String, ? extends jakarta.servlet.ServletRegistration> getServletRegistrations();

  public abstract jakarta.servlet.FilterRegistration$Dynamic addFilter(java.lang.String, java.lang.String);

  public abstract jakarta.servlet.FilterRegistration$Dynamic addFilter(java.lang.String, jakarta.servlet.Filter);

  public abstract jakarta.servlet.FilterRegistration$Dynamic addFilter(java.lang.String, java.lang.Class<? extends jakarta.servlet.Filter>);

  public abstract <T extends jakarta.servlet.Filter> T createFilter(java.lang.Class<T>) throws jakarta.servlet.ServletException;

  public abstract jakarta.servlet.FilterRegistration getFilterRegistration(java.lang.String);

  public abstract java.util.Map<java.lang.String, ? extends jakarta.servlet.FilterRegistration> getFilterRegistrations();

  public abstract jakarta.servlet.SessionCookieConfig getSessionCookieConfig();

  public abstract void setSessionTrackingModes(java.util.Set<jakarta.servlet.SessionTrackingMode>);

  public abstract java.util.Set<jakarta.servlet.SessionTrackingMode> getDefaultSessionTrackingModes();

  public abstract java.util.Set<jakarta.servlet.SessionTrackingMode> getEffectiveSessionTrackingModes();

  public abstract void addListener(java.lang.String);

  public abstract <T extends java.util.EventListener> void addListener(T);

  public abstract void addListener(java.lang.Class<? extends java.util.EventListener>);

  public abstract <T extends java.util.EventListener> T createListener(java.lang.Class<T>) throws jakarta.servlet.ServletException;

  public abstract jakarta.servlet.descriptor.JspConfigDescriptor getJspConfigDescriptor();

  public abstract java.lang.ClassLoader getClassLoader();

  public abstract void declareRoles(java.lang.String...);

  public abstract java.lang.String getVirtualServerName();

  public abstract int getSessionTimeout();

  public abstract void setSessionTimeout(int);

  public abstract java.lang.String getRequestCharacterEncoding();

  public abstract void setRequestCharacterEncoding(java.lang.String);

  public abstract java.lang.String getResponseCharacterEncoding();

  public abstract void setResponseCharacterEncoding(java.lang.String);
}
