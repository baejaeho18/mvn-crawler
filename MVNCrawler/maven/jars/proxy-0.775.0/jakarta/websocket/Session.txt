Compiled from "Session.java"
public interface jakarta.websocket.Session extends java.io.Closeable {
  public abstract jakarta.websocket.WebSocketContainer getContainer();

  public abstract void addMessageHandler(jakarta.websocket.MessageHandler) throws java.lang.IllegalStateException;

  public abstract <T> void addMessageHandler(java.lang.Class<T>, jakarta.websocket.MessageHandler$Whole<T>);

  public abstract <T> void addMessageHandler(java.lang.Class<T>, jakarta.websocket.MessageHandler$Partial<T>);

  public abstract java.util.Set<jakarta.websocket.MessageHandler> getMessageHandlers();

  public abstract void removeMessageHandler(jakarta.websocket.MessageHandler);

  public abstract java.lang.String getProtocolVersion();

  public abstract java.lang.String getNegotiatedSubprotocol();

  public abstract java.util.List<jakarta.websocket.Extension> getNegotiatedExtensions();

  public abstract boolean isSecure();

  public abstract boolean isOpen();

  public abstract long getMaxIdleTimeout();

  public abstract void setMaxIdleTimeout(long);

  public abstract void setMaxBinaryMessageBufferSize(int);

  public abstract int getMaxBinaryMessageBufferSize();

  public abstract void setMaxTextMessageBufferSize(int);

  public abstract int getMaxTextMessageBufferSize();

  public abstract jakarta.websocket.RemoteEndpoint$Async getAsyncRemote();

  public abstract jakarta.websocket.RemoteEndpoint$Basic getBasicRemote();

  public abstract java.lang.String getId();

  public abstract void close() throws java.io.IOException;

  public abstract void close(jakarta.websocket.CloseReason) throws java.io.IOException;

  public abstract java.net.URI getRequestURI();

  public abstract java.util.Map<java.lang.String, java.util.List<java.lang.String>> getRequestParameterMap();

  public abstract java.lang.String getQueryString();

  public abstract java.util.Map<java.lang.String, java.lang.String> getPathParameters();

  public abstract java.util.Map<java.lang.String, java.lang.Object> getUserProperties();

  public abstract java.security.Principal getUserPrincipal();

  public abstract java.util.Set<jakarta.websocket.Session> getOpenSessions();
}
