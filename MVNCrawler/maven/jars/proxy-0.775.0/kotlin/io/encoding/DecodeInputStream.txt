Compiled from "Base64IOStream.kt"
final class kotlin.io.encoding.DecodeInputStream extends java.io.InputStream {
  private final java.io.InputStream input;

  private final kotlin.io.encoding.Base64 base64;

  private boolean isClosed;

  private boolean isEOF;

  private final byte[] singleByteBuffer;

  private final byte[] symbolBuffer;

  private final byte[] byteBuffer;

  private int byteBufferStartIndex;

  private int byteBufferEndIndex;

  public kotlin.io.encoding.DecodeInputStream(java.io.InputStream, kotlin.io.encoding.Base64);
    Code:
       0: aload_1
       1: ldc           #9                  // String input
       3: invokestatic  #15                 // Method kotlin/jvm/internal/Intrinsics.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_2
       7: ldc           #17                 // String base64
       9: invokestatic  #15                 // Method kotlin/jvm/internal/Intrinsics.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V
      12: aload_0
      13: invokespecial #20                 // Method java/io/InputStream."<init>":()V
      16: aload_0
      17: aload_1
      18: putfield      #23                 // Field input:Ljava/io/InputStream;
      21: aload_0
      22: aload_2
      23: putfield      #26                 // Field base64:Lkotlin/io/encoding/Base64;
      26: aload_0
      27: iconst_1
      28: newarray       byte
      30: putfield      #30                 // Field singleByteBuffer:[B
      33: aload_0
      34: sipush        1024
      37: newarray       byte
      39: putfield      #33                 // Field symbolBuffer:[B
      42: aload_0
      43: sipush        1024
      46: newarray       byte
      48: putfield      #36                 // Field byteBuffer:[B
      51: return

  private final int getByteBufferLength();
    Code:
       0: aload_0
       1: getfield      #44                 // Field byteBufferEndIndex:I
       4: aload_0
       5: getfield      #47                 // Field byteBufferStartIndex:I
       8: isub
       9: ireturn

  public int read();
    Code:
       0: aload_0
       1: getfield      #47                 // Field byteBufferStartIndex:I
       4: aload_0
       5: getfield      #44                 // Field byteBufferEndIndex:I
       8: if_icmpge     41
      11: aload_0
      12: getfield      #36                 // Field byteBuffer:[B
      15: aload_0
      16: getfield      #47                 // Field byteBufferStartIndex:I
      19: baload
      20: sipush        255
      23: iand
      24: istore_1
      25: aload_0
      26: aload_0
      27: getfield      #47                 // Field byteBufferStartIndex:I
      30: iconst_1
      31: iadd
      32: putfield      #47                 // Field byteBufferStartIndex:I
      35: aload_0
      36: invokespecial #51                 // Method resetByteBufferIfEmpty:()V
      39: iload_1
      40: ireturn
      41: aload_0
      42: aload_0
      43: getfield      #30                 // Field singleByteBuffer:[B
      46: iconst_0
      47: iconst_1
      48: invokevirtual #54                 // Method read:([BII)I
      51: tableswitch   { // -1 to 1
                    -1: 76
                     0: 93
                     1: 80
               default: 93
          }
      76: iconst_m1
      77: goto          106
      80: aload_0
      81: getfield      #30                 // Field singleByteBuffer:[B
      84: iconst_0
      85: baload
      86: sipush        255
      89: iand
      90: goto          106
      93: new           #56                 // class java/lang/IllegalStateException
      96: dup
      97: ldc           #58                 // String Unreachable
      99: invokevirtual #64                 // Method java/lang/Object.toString:()Ljava/lang/String;
     102: invokespecial #67                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
     105: athrow
     106: ireturn

  public int read(byte[], int, int);
    Code:
       0: aload_1
       1: ldc           #70                 // String destination
       3: invokestatic  #15                 // Method kotlin/jvm/internal/Intrinsics.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V
       6: iload_2
       7: iflt          22
      10: iload_3
      11: iflt          22
      14: iload_2
      15: iload_3
      16: iadd
      17: aload_1
      18: arraylength
      19: if_icmple     68
      22: new           #72                 // class java/lang/IndexOutOfBoundsException
      25: dup
      26: new           #74                 // class java/lang/StringBuilder
      29: dup
      30: invokespecial #75                 // Method java/lang/StringBuilder."<init>":()V
      33: ldc           #77                 // String offset:
      35: invokevirtual #81                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      38: iload_2
      39: invokevirtual #84                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      42: ldc           #86                 // String , length:
      44: invokevirtual #81                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      47: iload_3
      48: invokevirtual #84                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      51: ldc           #88                 // String , buffer size:
      53: invokevirtual #81                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      56: aload_1
      57: arraylength
      58: invokevirtual #84                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      61: invokevirtual #89                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      64: invokespecial #90                 // Method java/lang/IndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
      67: athrow
      68: aload_0
      69: getfield      #94                 // Field isClosed:Z
      72: ifeq          85
      75: new           #96                 // class java/io/IOException
      78: dup
      79: ldc           #98                 // String The input stream is closed.
      81: invokespecial #99                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      84: athrow
      85: aload_0
      86: getfield      #102                // Field isEOF:Z
      89: ifeq          94
      92: iconst_m1
      93: ireturn
      94: iload_3
      95: ifne          100
      98: iconst_0
      99: ireturn
     100: aload_0
     101: invokespecial #104                // Method getByteBufferLength:()I
     104: iload_3
     105: if_icmplt     117
     108: aload_0
     109: aload_1
     110: iload_2
     111: iload_3
     112: invokespecial #108                // Method copyByteBufferInto:([BII)V
     115: iload_3
     116: ireturn
     117: iload_3
     118: aload_0
     119: invokespecial #104                // Method getByteBufferLength:()I
     122: isub
     123: istore        4
     125: iload         4
     127: iconst_3
     128: iadd
     129: iconst_1
     130: isub
     131: iconst_3
     132: idiv
     133: istore        5
     135: iload         5
     137: iconst_4
     138: imul
     139: istore        6
     141: iload_2
     142: istore        7
     144: aload_0
     145: getfield      #102                // Field isEOF:Z
     148: ifne          331
     151: iload         6
     153: ifle          331
     156: iconst_0
     157: istore        8
     159: aload_0
     160: getfield      #33                 // Field symbolBuffer:[B
     163: arraylength
     164: iload         6
     166: invokestatic  #114                // Method java/lang/Math.min:(II)I
     169: istore        9
     171: aload_0
     172: getfield      #102                // Field isEOF:Z
     175: ifne          261
     178: iload         8
     180: iload         9
     182: if_icmpge     261
     185: aload_0
     186: invokespecial #117                // Method readNextSymbol:()I
     189: istore        10
     191: iload         10
     193: lookupswitch  { // 2
                    -1: 220
                    61: 228
               default: 244
          }
     220: aload_0
     221: iconst_1
     222: putfield      #102                // Field isEOF:Z
     225: goto          171
     228: aload_0
     229: iload         8
     231: invokespecial #121                // Method handlePaddingSymbol:(I)I
     234: istore        8
     236: aload_0
     237: iconst_1
     238: putfield      #102                // Field isEOF:Z
     241: goto          171
     244: aload_0
     245: getfield      #33                 // Field symbolBuffer:[B
     248: iload         8
     250: iload         10
     252: i2b
     253: bastore
     254: iinc          8, 1
     257: nop
     258: goto          171
     261: aload_0
     262: getfield      #102                // Field isEOF:Z
     265: ifne          275
     268: iload         8
     270: iload         9
     272: if_icmpne     279
     275: iconst_1
     276: goto          280
     279: iconst_0
     280: istore        10
     282: iload         10
     284: ifne          304
     287: ldc           #123                // String Check failed.
     289: astore        11
     291: new           #56                 // class java/lang/IllegalStateException
     294: dup
     295: aload         11
     297: invokevirtual #64                 // Method java/lang/Object.toString:()Ljava/lang/String;
     300: invokespecial #67                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
     303: athrow
     304: iload         6
     306: iload         8
     308: isub
     309: istore        6
     311: iload         7
     313: aload_0
     314: aload_1
     315: iload         7
     317: iload_3
     318: iload_2
     319: iadd
     320: iload         8
     322: invokespecial #127                // Method decodeSymbolBufferInto:([BIII)I
     325: iadd
     326: istore        7
     328: goto          144
     331: iload         7
     333: iload_2
     334: if_icmpne     348
     337: aload_0
     338: getfield      #102                // Field isEOF:Z
     341: ifeq          348
     344: iconst_m1
     345: goto          352
     348: iload         7
     350: iload_2
     351: isub
     352: ireturn

  public void close();
    Code:
       0: aload_0
       1: getfield      #94                 // Field isClosed:Z
       4: ifne          19
       7: aload_0
       8: iconst_1
       9: putfield      #94                 // Field isClosed:Z
      12: aload_0
      13: getfield      #23                 // Field input:Ljava/io/InputStream;
      16: invokevirtual #140                // Method java/io/InputStream.close:()V
      19: return

  private final int decodeSymbolBufferInto(byte[], int, int, int);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #44                 // Field byteBufferEndIndex:I
       5: aload_0
       6: getfield      #26                 // Field base64:Lkotlin/io/encoding/Base64;
       9: aload_0
      10: getfield      #33                 // Field symbolBuffer:[B
      13: aload_0
      14: getfield      #36                 // Field byteBuffer:[B
      17: aload_0
      18: getfield      #44                 // Field byteBufferEndIndex:I
      21: iconst_0
      22: iload         4
      24: invokevirtual #146                // Method kotlin/io/encoding/Base64.decodeIntoByteArray:([B[BIII)I
      27: iadd
      28: putfield      #44                 // Field byteBufferEndIndex:I
      31: aload_0
      32: invokespecial #104                // Method getByteBufferLength:()I
      35: iload_3
      36: iload_2
      37: isub
      38: invokestatic  #114                // Method java/lang/Math.min:(II)I
      41: istore        5
      43: aload_0
      44: aload_1
      45: iload_2
      46: iload         5
      48: invokespecial #108                // Method copyByteBufferInto:([BII)V
      51: aload_0
      52: invokespecial #149                // Method shiftByteBufferToStartIfNeeded:()V
      55: iload         5
      57: ireturn

  private final void copyByteBufferInto(byte[], int, int);
    Code:
       0: aload_0
       1: getfield      #36                 // Field byteBuffer:[B
       4: aload_1
       5: iload_2
       6: aload_0
       7: getfield      #47                 // Field byteBufferStartIndex:I
      10: aload_0
      11: getfield      #47                 // Field byteBufferStartIndex:I
      14: iload_3
      15: iadd
      16: invokestatic  #158                // Method kotlin/collections/ArraysKt.copyInto:([B[BIII)[B
      19: pop
      20: aload_0
      21: aload_0
      22: getfield      #47                 // Field byteBufferStartIndex:I
      25: iload_3
      26: iadd
      27: putfield      #47                 // Field byteBufferStartIndex:I
      30: aload_0
      31: invokespecial #51                 // Method resetByteBufferIfEmpty:()V
      34: return

  private final void resetByteBufferIfEmpty();
    Code:
       0: aload_0
       1: getfield      #47                 // Field byteBufferStartIndex:I
       4: aload_0
       5: getfield      #44                 // Field byteBufferEndIndex:I
       8: if_icmpne     21
      11: aload_0
      12: iconst_0
      13: putfield      #47                 // Field byteBufferStartIndex:I
      16: aload_0
      17: iconst_0
      18: putfield      #44                 // Field byteBufferEndIndex:I
      21: return

  private final void shiftByteBufferToStartIfNeeded();
    Code:
       0: aload_0
       1: getfield      #36                 // Field byteBuffer:[B
       4: arraylength
       5: aload_0
       6: getfield      #44                 // Field byteBufferEndIndex:I
       9: isub
      10: istore_1
      11: aload_0
      12: getfield      #33                 // Field symbolBuffer:[B
      15: arraylength
      16: iconst_4
      17: idiv
      18: iconst_3
      19: imul
      20: istore_2
      21: iload_2
      22: iload_1
      23: if_icmple     65
      26: aload_0
      27: getfield      #36                 // Field byteBuffer:[B
      30: aload_0
      31: getfield      #36                 // Field byteBuffer:[B
      34: iconst_0
      35: aload_0
      36: getfield      #47                 // Field byteBufferStartIndex:I
      39: aload_0
      40: getfield      #44                 // Field byteBufferEndIndex:I
      43: invokestatic  #158                // Method kotlin/collections/ArraysKt.copyInto:([B[BIII)[B
      46: pop
      47: aload_0
      48: aload_0
      49: getfield      #44                 // Field byteBufferEndIndex:I
      52: aload_0
      53: getfield      #47                 // Field byteBufferStartIndex:I
      56: isub
      57: putfield      #44                 // Field byteBufferEndIndex:I
      60: aload_0
      61: iconst_0
      62: putfield      #47                 // Field byteBufferStartIndex:I
      65: return

  private final int handlePaddingSymbol(int);
    Code:
       0: aload_0
       1: getfield      #33                 // Field symbolBuffer:[B
       4: iload_1
       5: bipush        61
       7: bastore
       8: iload_1
       9: iconst_3
      10: iand
      11: iconst_2
      12: if_icmpne     40
      15: aload_0
      16: invokespecial #117                // Method readNextSymbol:()I
      19: istore_2
      20: iload_2
      21: iflt          34
      24: aload_0
      25: getfield      #33                 // Field symbolBuffer:[B
      28: iload_1
      29: iconst_1
      30: iadd
      31: iload_2
      32: i2b
      33: bastore
      34: iload_1
      35: iconst_2
      36: iadd
      37: goto          43
      40: iload_1
      41: iconst_1
      42: iadd
      43: ireturn

  private final int readNextSymbol();
    Code:
       0: aload_0
       1: getfield      #26                 // Field base64:Lkotlin/io/encoding/Base64;
       4: invokevirtual #165                // Method kotlin/io/encoding/Base64.isMimeScheme$kotlin_stdlib:()Z
       7: ifne          18
      10: aload_0
      11: getfield      #23                 // Field input:Ljava/io/InputStream;
      14: invokevirtual #167                // Method java/io/InputStream.read:()I
      17: ireturn
      18: iconst_0
      19: istore_1
      20: aload_0
      21: getfield      #23                 // Field input:Ljava/io/InputStream;
      24: invokevirtual #167                // Method java/io/InputStream.read:()I
      27: istore_1
      28: iload_1
      29: iconst_m1
      30: if_icmpeq     40
      33: iload_1
      34: invokestatic  #173                // Method kotlin/io/encoding/Base64Kt.isInMimeAlphabet:(I)Z
      37: ifeq          20
      40: iload_1
      41: ireturn
}
