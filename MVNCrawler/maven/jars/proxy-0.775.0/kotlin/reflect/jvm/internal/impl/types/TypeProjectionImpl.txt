Compiled from "TypeProjectionImpl.java"
public class kotlin.reflect.jvm.internal.impl.types.TypeProjectionImpl extends kotlin.reflect.jvm.internal.impl.types.TypeProjectionBase {
  private final kotlin.reflect.jvm.internal.impl.types.Variance projection;

  private final kotlin.reflect.jvm.internal.impl.types.KotlinType type;

  public kotlin.reflect.jvm.internal.impl.types.TypeProjectionImpl(kotlin.reflect.jvm.internal.impl.types.Variance, kotlin.reflect.jvm.internal.impl.types.KotlinType);
    Code:
       0: aload_1
       1: ifnonnull     8
       4: iconst_0
       5: invokestatic  #30                 // Method $$$reportNull$$$0:(I)V
       8: aload_2
       9: ifnonnull     16
      12: iconst_1
      13: invokestatic  #30                 // Method $$$reportNull$$$0:(I)V
      16: aload_0
      17: invokespecial #29                 // Method kotlin/reflect/jvm/internal/impl/types/TypeProjectionBase."<init>":()V
      20: aload_0
      21: aload_1
      22: putfield      #23                 // Field projection:Lkotlin/reflect/jvm/internal/impl/types/Variance;
      25: aload_0
      26: aload_2
      27: putfield      #24                 // Field type:Lkotlin/reflect/jvm/internal/impl/types/KotlinType;
      30: return

  public kotlin.reflect.jvm.internal.impl.types.TypeProjectionImpl(kotlin.reflect.jvm.internal.impl.types.KotlinType);
    Code:
       0: aload_1
       1: ifnonnull     8
       4: iconst_2
       5: invokestatic  #30                 // Method $$$reportNull$$$0:(I)V
       8: aload_0
       9: getstatic     #25                 // Field kotlin/reflect/jvm/internal/impl/types/Variance.INVARIANT:Lkotlin/reflect/jvm/internal/impl/types/Variance;
      12: aload_1
      13: invokespecial #31                 // Method "<init>":(Lkotlin/reflect/jvm/internal/impl/types/Variance;Lkotlin/reflect/jvm/internal/impl/types/KotlinType;)V
      16: return

  public kotlin.reflect.jvm.internal.impl.types.Variance getProjectionKind();
    Code:
       0: aload_0
       1: getfield      #23                 // Field projection:Lkotlin/reflect/jvm/internal/impl/types/Variance;
       4: dup
       5: ifnonnull     12
       8: iconst_4
       9: invokestatic  #30                 // Method $$$reportNull$$$0:(I)V
      12: areturn

  public kotlin.reflect.jvm.internal.impl.types.KotlinType getType();
    Code:
       0: aload_0
       1: getfield      #24                 // Field type:Lkotlin/reflect/jvm/internal/impl/types/KotlinType;
       4: dup
       5: ifnonnull     12
       8: iconst_5
       9: invokestatic  #30                 // Method $$$reportNull$$$0:(I)V
      12: areturn

  public boolean isStarProjection();
    Code:
       0: iconst_0
       1: ireturn

  public kotlin.reflect.jvm.internal.impl.types.TypeProjection refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner);
    Code:
       0: aload_1
       1: ifnonnull     9
       4: bipush        6
       6: invokestatic  #30                 // Method $$$reportNull$$$0:(I)V
       9: new           #20                 // class kotlin/reflect/jvm/internal/impl/types/TypeProjectionImpl
      12: dup
      13: aload_0
      14: getfield      #23                 // Field projection:Lkotlin/reflect/jvm/internal/impl/types/Variance;
      17: aload_1
      18: aload_0
      19: getfield      #24                 // Field type:Lkotlin/reflect/jvm/internal/impl/types/KotlinType;
      22: invokevirtual #32                 // Method kotlin/reflect/jvm/internal/impl/types/checker/KotlinTypeRefiner.refineType:(Lkotlin/reflect/jvm/internal/impl/types/model/KotlinTypeMarker;)Lkotlin/reflect/jvm/internal/impl/types/KotlinType;
      25: invokespecial #31                 // Method "<init>":(Lkotlin/reflect/jvm/internal/impl/types/Variance;Lkotlin/reflect/jvm/internal/impl/types/KotlinType;)V
      28: areturn

  private static void $$$reportNull$$$0(int);
    Code:
       0: iload_0
       1: tableswitch   { // 0 to 6
                     0: 44
                     1: 44
                     2: 44
                     3: 44
                     4: 49
                     5: 49
                     6: 44
               default: 44
          }
      44: ldc           #3                  // String Argument for @NotNull parameter \'%s\' of %s.%s must not be null
      46: goto          54
      49: ldc           #2                  // String @NotNull method %s.%s must not return null
      51: goto          54
      54: iload_0
      55: tableswitch   { // 0 to 6
                     0: 96
                     1: 96
                     2: 96
                     3: 96
                     4: 100
                     5: 100
                     6: 96
               default: 96
          }
      96: iconst_3
      97: goto          104
     100: iconst_2
     101: goto          104
     104: anewarray     #15                 // class java/lang/Object
     107: iload_0
     108: tableswitch   { // 0 to 6
                     0: 152
                     1: 160
                     2: 160
                     3: 160
                     4: 168
                     5: 168
                     6: 176
               default: 152
          }
     152: dup
     153: iconst_0
     154: ldc           #8                  // String projection
     156: aastore
     157: goto          184
     160: dup
     161: iconst_0
     162: ldc           #11                 // String type
     164: aastore
     165: goto          184
     168: dup
     169: iconst_0
     170: ldc           #6                  // String kotlin/reflect/jvm/internal/impl/types/TypeProjectionImpl
     172: aastore
     173: goto          184
     176: dup
     177: iconst_0
     178: ldc           #7                  // String kotlinTypeRefiner
     180: aastore
     181: goto          184
     184: iload_0
     185: tableswitch   { // 0 to 6
                     0: 228
                     1: 228
                     2: 228
                     3: 228
                     4: 236
                     5: 244
                     6: 228
               default: 228
          }
     228: dup
     229: iconst_1
     230: ldc           #6                  // String kotlin/reflect/jvm/internal/impl/types/TypeProjectionImpl
     232: aastore
     233: goto          252
     236: dup
     237: iconst_1
     238: ldc           #4                  // String getProjectionKind
     240: aastore
     241: goto          252
     244: dup
     245: iconst_1
     246: ldc           #5                  // String getType
     248: aastore
     249: goto          252
     252: iload_0
     253: tableswitch   { // 0 to 6
                     0: 296
                     1: 296
                     2: 296
                     3: 304
                     4: 312
                     5: 312
                     6: 315
               default: 296
          }
     296: dup
     297: iconst_2
     298: ldc           #1                  // String <init>
     300: aastore
     301: goto          323
     304: dup
     305: iconst_2
     306: ldc           #10                 // String replaceType
     308: aastore
     309: goto          323
     312: goto          323
     315: dup
     316: iconst_2
     317: ldc           #9                  // String refine
     319: aastore
     320: goto          323
     323: invokestatic  #28                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
     326: iload_0
     327: tableswitch   { // 0 to 6
                     0: 368
                     1: 368
                     2: 368
                     3: 368
                     4: 379
                     5: 379
                     6: 368
               default: 368
          }
     368: new           #13                 // class java/lang/IllegalArgumentException
     371: dup_x1
     372: swap
     373: invokespecial #26                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     376: goto          390
     379: new           #14                 // class java/lang/IllegalStateException
     382: dup_x1
     383: swap
     384: invokespecial #27                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
     387: goto          390
     390: athrow
}
