Compiled from "LockBasedStorageManager.java"
class kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$CacheWithNotNullValuesBasedOnMemoizedFunction<K, V> extends kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$CacheWithNullableValuesBasedOnMemoizedFunction<K, V> implements kotlin.reflect.jvm.internal.impl.storage.CacheWithNotNullValues<K, V> {
  static final boolean $assertionsDisabled;

  private kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$CacheWithNotNullValuesBasedOnMemoizedFunction(kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager, java.util.concurrent.ConcurrentMap<kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$KeyWithComputation<K, V>, java.lang.Object>);
    Code:
       0: aload_1
       1: ifnonnull     8
       4: iconst_0
       5: invokestatic  #37                 // Method $$$reportNull$$$0:(I)V
       8: aload_2
       9: ifnonnull     16
      12: iconst_1
      13: invokestatic  #37                 // Method $$$reportNull$$$0:(I)V
      16: aload_0
      17: aload_1
      18: aload_2
      19: aconst_null
      20: invokespecial #40                 // Method kotlin/reflect/jvm/internal/impl/storage/LockBasedStorageManager$CacheWithNullableValuesBasedOnMemoizedFunction."<init>":(Lkotlin/reflect/jvm/internal/impl/storage/LockBasedStorageManager;Ljava/util/concurrent/ConcurrentMap;Lkotlin/reflect/jvm/internal/impl/storage/LockBasedStorageManager$1;)V
      23: return

  public V computeIfAbsent(K, kotlin.jvm.functions.Function0<? extends V>);
    Code:
       0: aload_2
       1: ifnonnull     8
       4: iconst_2
       5: invokestatic  #37                 // Method $$$reportNull$$$0:(I)V
       8: aload_0
       9: aload_1
      10: aload_2
      11: invokespecial #41                 // Method kotlin/reflect/jvm/internal/impl/storage/LockBasedStorageManager$CacheWithNullableValuesBasedOnMemoizedFunction.computeIfAbsent:(Ljava/lang/Object;Lkotlin/jvm/functions/Function0;)Ljava/lang/Object;
      14: astore_3
      15: getstatic     #27                 // Field $assertionsDisabled:Z
      18: ifne          55
      21: aload_3
      22: ifnonnull     55
      25: new           #11                 // class java/lang/AssertionError
      28: dup
      29: new           #18                 // class java/lang/StringBuilder
      32: dup
      33: invokespecial #33                 // Method java/lang/StringBuilder."<init>":()V
      36: ldc           #6                  // String computeIfAbsent() returned null under
      38: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      41: aload_0
      42: invokevirtual #39                 // Method getStorageManager:()Lkotlin/reflect/jvm/internal/impl/storage/LockBasedStorageManager;
      45: invokevirtual #34                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      48: invokevirtual #36                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      51: invokespecial #28                 // Method java/lang/AssertionError."<init>":(Ljava/lang/Object;)V
      54: athrow
      55: aload_3
      56: dup
      57: ifnonnull     64
      60: iconst_3
      61: invokestatic  #37                 // Method $$$reportNull$$$0:(I)V
      64: areturn

  kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$CacheWithNotNullValuesBasedOnMemoizedFunction(kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager, java.util.concurrent.ConcurrentMap, kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #38                 // Method "<init>":(Lkotlin/reflect/jvm/internal/impl/storage/LockBasedStorageManager;Ljava/util/concurrent/ConcurrentMap;)V
       6: return

  static {};
    Code:
       0: ldc           #22                 // class kotlin/reflect/jvm/internal/impl/storage/LockBasedStorageManager
       2: invokevirtual #29                 // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #27                 // Field $assertionsDisabled:Z
      16: return

  private static void $$$reportNull$$$0(int);
    Code:
       0: iload_0
       1: tableswitch   { // 0 to 3
                     0: 32
                     1: 32
                     2: 32
                     3: 37
               default: 32
          }
      32: ldc           #3                  // String Argument for @NotNull parameter \'%s\' of %s.%s must not be null
      34: goto          42
      37: ldc           #2                  // String @NotNull method %s.%s must not return null
      39: goto          42
      42: iload_0
      43: tableswitch   { // 0 to 3
                     0: 72
                     1: 72
                     2: 72
                     3: 76
               default: 72
          }
      72: iconst_3
      73: goto          80
      76: iconst_2
      77: goto          80
      80: anewarray     #15                 // class java/lang/Object
      83: iload_0
      84: tableswitch   { // 0 to 3
                     0: 116
                     1: 124
                     2: 132
                     3: 140
               default: 116
          }
     116: dup
     117: iconst_0
     118: ldc           #9                  // String storageManager
     120: aastore
     121: goto          148
     124: dup
     125: iconst_0
     126: ldc           #8                  // String map
     128: aastore
     129: goto          148
     132: dup
     133: iconst_0
     134: ldc           #4                  // String computation
     136: aastore
     137: goto          148
     140: dup
     141: iconst_0
     142: ldc           #7                  // String kotlin/reflect/jvm/internal/impl/storage/LockBasedStorageManager$CacheWithNotNullValuesBasedOnMemoizedFunction
     144: aastore
     145: goto          148
     148: iload_0
     149: tableswitch   { // 0 to 3
                     0: 180
                     1: 180
                     2: 180
                     3: 188
               default: 180
          }
     180: dup
     181: iconst_1
     182: ldc           #7                  // String kotlin/reflect/jvm/internal/impl/storage/LockBasedStorageManager$CacheWithNotNullValuesBasedOnMemoizedFunction
     184: aastore
     185: goto          196
     188: dup
     189: iconst_1
     190: ldc           #5                  // String computeIfAbsent
     192: aastore
     193: goto          196
     196: iload_0
     197: tableswitch   { // 0 to 3
                     0: 228
                     1: 228
                     2: 236
                     3: 244
               default: 228
          }
     228: dup
     229: iconst_2
     230: ldc           #1                  // String <init>
     232: aastore
     233: goto          247
     236: dup
     237: iconst_2
     238: ldc           #5                  // String computeIfAbsent
     240: aastore
     241: goto          247
     244: goto          247
     247: invokestatic  #32                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
     250: iload_0
     251: tableswitch   { // 0 to 3
                     0: 280
                     1: 280
                     2: 280
                     3: 291
               default: 280
          }
     280: new           #13                 // class java/lang/IllegalArgumentException
     283: dup_x1
     284: swap
     285: invokespecial #30                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     288: goto          302
     291: new           #14                 // class java/lang/IllegalStateException
     294: dup_x1
     295: swap
     296: invokespecial #31                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
     299: goto          302
     302: athrow
}
