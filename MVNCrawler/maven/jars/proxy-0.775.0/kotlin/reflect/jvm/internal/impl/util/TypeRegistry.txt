Compiled from "ArrayMapOwner.kt"
public abstract class kotlin.reflect.jvm.internal.impl.util.TypeRegistry<K, V> {
  private final java.util.concurrent.ConcurrentHashMap<java.lang.String, java.lang.Integer> idPerType;

  private final java.util.concurrent.atomic.AtomicInteger idCounter;

  public kotlin.reflect.jvm.internal.impl.util.TypeRegistry();
    Code:
       0: aload_0
       1: invokespecial #15                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #5                  // class java/util/concurrent/ConcurrentHashMap
       8: dup
       9: invokespecial #16                 // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      12: putfield      #14                 // Field idPerType:Ljava/util/concurrent/ConcurrentHashMap;
      15: aload_0
      16: new           #6                  // class java/util/concurrent/atomic/AtomicInteger
      19: dup
      20: iconst_0
      21: invokespecial #18                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
      24: putfield      #13                 // Field idCounter:Ljava/util/concurrent/atomic/AtomicInteger;
      27: return

  public final <T extends V, KK extends K> kotlin.reflect.jvm.internal.impl.util.NullableArrayMapAccessor<K, V, T> generateNullableAccessor(kotlin.reflect.KClass<KK>);
    Code:
       0: aload_1
       1: ldc           #2                  // String kClass
       3: invokestatic  #21                 // Method kotlin/jvm/internal/Intrinsics.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V
       6: new           #10                 // class kotlin/reflect/jvm/internal/impl/util/NullableArrayMapAccessor
       9: dup
      10: aload_0
      11: aload_1
      12: invokevirtual #25                 // Method getId:(Lkotlin/reflect/KClass;)I
      15: invokespecial #22                 // Method kotlin/reflect/jvm/internal/impl/util/NullableArrayMapAccessor."<init>":(I)V
      18: areturn

  public final <T extends K> int getId(kotlin.reflect.KClass<T>);
    Code:
       0: aload_1
       1: ldc           #2                  // String kClass
       3: invokestatic  #21                 // Method kotlin/jvm/internal/Intrinsics.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: aload_1
       8: invokeinterface #27,  1           // InterfaceMethod kotlin/reflect/KClass.getQualifiedName:()Ljava/lang/String;
      13: dup
      14: invokestatic  #19                 // Method kotlin/jvm/internal/Intrinsics.checkNotNull:(Ljava/lang/Object;)V
      17: invokevirtual #24                 // Method getId:(Ljava/lang/String;)I
      20: ireturn

  public final int getId(java.lang.String);
    Code:
       0: aload_1
       1: ldc           #3                  // String keyQualifiedName
       3: invokestatic  #21                 // Method kotlin/jvm/internal/Intrinsics.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: aload_0
       8: getfield      #14                 // Field idPerType:Ljava/util/concurrent/ConcurrentHashMap;
      11: aload_1
      12: new           #12                 // class kotlin/reflect/jvm/internal/impl/util/TypeRegistry$getId$1
      15: dup
      16: aload_0
      17: invokespecial #26                 // Method kotlin/reflect/jvm/internal/impl/util/TypeRegistry$getId$1."<init>":(Lkotlin/reflect/jvm/internal/impl/util/TypeRegistry;)V
      20: checkcast     #7                  // class kotlin/jvm/functions/Function1
      23: invokevirtual #23                 // Method customComputeIfAbsent:(Ljava/util/concurrent/ConcurrentHashMap;Ljava/lang/String;Lkotlin/jvm/functions/Function1;)I
      26: ireturn

  public abstract int customComputeIfAbsent(java.util.concurrent.ConcurrentHashMap<java.lang.String, java.lang.Integer>, java.lang.String, kotlin.jvm.functions.Function1<? super java.lang.String, java.lang.Integer>);

  protected final java.util.Collection<java.lang.Integer> getIndices();
    Code:
       0: aload_0
       1: getfield      #14                 // Field idPerType:Ljava/util/concurrent/ConcurrentHashMap;
       4: invokevirtual #17                 // Method java/util/concurrent/ConcurrentHashMap.values:()Ljava/util/Collection;
       7: dup
       8: ldc           #1                  // String idPerType.values
      10: invokestatic  #20                 // Method kotlin/jvm/internal/Intrinsics.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V
      13: areturn

  public static final java.util.concurrent.atomic.AtomicInteger access$getIdCounter$p(kotlin.reflect.jvm.internal.impl.util.TypeRegistry);
    Code:
       0: aload_0
       1: getfield      #13                 // Field idCounter:Ljava/util/concurrent/atomic/AtomicInteger;
       4: areturn
}
