Compiled from "ByteBufferUtils.java"
public final class net.jpountz.util.ByteBufferUtils extends java.lang.Enum<net.jpountz.util.ByteBufferUtils> {
  private static final net.jpountz.util.ByteBufferUtils[] $VALUES;

  static final boolean $assertionsDisabled;

  public static net.jpountz.util.ByteBufferUtils[] values();
    Code:
       0: getstatic     #1                  // Field $VALUES:[Lnet/jpountz/util/ByteBufferUtils;
       3: invokevirtual #2                  // Method "[Lnet/jpountz/util/ByteBufferUtils;".clone:()Ljava/lang/Object;
       6: checkcast     #3                  // class "[Lnet/jpountz/util/ByteBufferUtils;"
       9: areturn

  public static net.jpountz.util.ByteBufferUtils valueOf(java.lang.String);
    Code:
       0: ldc_w         #4                  // class net/jpountz/util/ByteBufferUtils
       3: aload_0
       4: invokestatic  #5                  // Method java/lang/Enum.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;
       7: checkcast     #4                  // class net/jpountz/util/ByteBufferUtils
      10: areturn

  private net.jpountz.util.ByteBufferUtils();
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokespecial #6                  // Method java/lang/Enum."<init>":(Ljava/lang/String;I)V
       6: return

  public static void checkRange(java.nio.ByteBuffer, int, int);
    Code:
       0: iload_2
       1: invokestatic  #7                  // Method net/jpountz/util/SafeUtils.checkLength:(I)V
       4: iload_2
       5: ifle          22
       8: aload_0
       9: iload_1
      10: invokestatic  #8                  // Method checkRange:(Ljava/nio/ByteBuffer;I)V
      13: aload_0
      14: iload_1
      15: iload_2
      16: iadd
      17: iconst_1
      18: isub
      19: invokestatic  #8                  // Method checkRange:(Ljava/nio/ByteBuffer;I)V
      22: return

  public static void checkRange(java.nio.ByteBuffer, int);
    Code:
       0: iload_1
       1: iflt          12
       4: iload_1
       5: aload_0
       6: invokevirtual #9                  // Method java/nio/ByteBuffer.capacity:()I
       9: if_icmplt     21
      12: new           #10                 // class java/lang/ArrayIndexOutOfBoundsException
      15: dup
      16: iload_1
      17: invokespecial #11                 // Method java/lang/ArrayIndexOutOfBoundsException."<init>":(I)V
      20: athrow
      21: return

  public static java.nio.ByteBuffer inLittleEndianOrder(java.nio.ByteBuffer);
    Code:
       0: aload_0
       1: invokevirtual #12                 // Method java/nio/ByteBuffer.order:()Ljava/nio/ByteOrder;
       4: getstatic     #13                 // Field java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;
       7: invokevirtual #14                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      10: ifeq          15
      13: aload_0
      14: areturn
      15: aload_0
      16: invokevirtual #15                 // Method java/nio/ByteBuffer.duplicate:()Ljava/nio/ByteBuffer;
      19: getstatic     #13                 // Field java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;
      22: invokevirtual #16                 // Method java/nio/ByteBuffer.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;
      25: areturn

  public static java.nio.ByteBuffer inNativeByteOrder(java.nio.ByteBuffer);
    Code:
       0: aload_0
       1: invokevirtual #12                 // Method java/nio/ByteBuffer.order:()Ljava/nio/ByteOrder;
       4: getstatic     #17                 // Field net/jpountz/util/Utils.NATIVE_BYTE_ORDER:Ljava/nio/ByteOrder;
       7: invokevirtual #14                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      10: ifeq          15
      13: aload_0
      14: areturn
      15: aload_0
      16: invokevirtual #15                 // Method java/nio/ByteBuffer.duplicate:()Ljava/nio/ByteBuffer;
      19: getstatic     #17                 // Field net/jpountz/util/Utils.NATIVE_BYTE_ORDER:Ljava/nio/ByteOrder;
      22: invokevirtual #16                 // Method java/nio/ByteBuffer.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;
      25: areturn

  public static byte readByte(java.nio.ByteBuffer, int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #18                 // Method java/nio/ByteBuffer.get:(I)B
       5: ireturn

  public static void writeInt(java.nio.ByteBuffer, int, int);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          24
       6: aload_0
       7: invokevirtual #12                 // Method java/nio/ByteBuffer.order:()Ljava/nio/ByteOrder;
      10: getstatic     #17                 // Field net/jpountz/util/Utils.NATIVE_BYTE_ORDER:Ljava/nio/ByteOrder;
      13: if_acmpeq     24
      16: new           #20                 // class java/lang/AssertionError
      19: dup
      20: invokespecial #21                 // Method java/lang/AssertionError."<init>":()V
      23: athrow
      24: aload_0
      25: iload_1
      26: iload_2
      27: invokevirtual #22                 // Method java/nio/ByteBuffer.putInt:(II)Ljava/nio/ByteBuffer;
      30: pop
      31: return

  public static int readInt(java.nio.ByteBuffer, int);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          24
       6: aload_0
       7: invokevirtual #12                 // Method java/nio/ByteBuffer.order:()Ljava/nio/ByteOrder;
      10: getstatic     #17                 // Field net/jpountz/util/Utils.NATIVE_BYTE_ORDER:Ljava/nio/ByteOrder;
      13: if_acmpeq     24
      16: new           #20                 // class java/lang/AssertionError
      19: dup
      20: invokespecial #21                 // Method java/lang/AssertionError."<init>":()V
      23: athrow
      24: aload_0
      25: iload_1
      26: invokevirtual #23                 // Method java/nio/ByteBuffer.getInt:(I)I
      29: ireturn

  public static int readIntLE(java.nio.ByteBuffer, int);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          24
       6: aload_0
       7: invokevirtual #12                 // Method java/nio/ByteBuffer.order:()Ljava/nio/ByteOrder;
      10: getstatic     #13                 // Field java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;
      13: if_acmpeq     24
      16: new           #20                 // class java/lang/AssertionError
      19: dup
      20: invokespecial #21                 // Method java/lang/AssertionError."<init>":()V
      23: athrow
      24: aload_0
      25: iload_1
      26: invokevirtual #23                 // Method java/nio/ByteBuffer.getInt:(I)I
      29: ireturn

  public static void writeLong(java.nio.ByteBuffer, int, long);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          24
       6: aload_0
       7: invokevirtual #12                 // Method java/nio/ByteBuffer.order:()Ljava/nio/ByteOrder;
      10: getstatic     #17                 // Field net/jpountz/util/Utils.NATIVE_BYTE_ORDER:Ljava/nio/ByteOrder;
      13: if_acmpeq     24
      16: new           #20                 // class java/lang/AssertionError
      19: dup
      20: invokespecial #21                 // Method java/lang/AssertionError."<init>":()V
      23: athrow
      24: aload_0
      25: iload_1
      26: lload_2
      27: invokevirtual #24                 // Method java/nio/ByteBuffer.putLong:(IJ)Ljava/nio/ByteBuffer;
      30: pop
      31: return

  public static long readLong(java.nio.ByteBuffer, int);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          24
       6: aload_0
       7: invokevirtual #12                 // Method java/nio/ByteBuffer.order:()Ljava/nio/ByteOrder;
      10: getstatic     #17                 // Field net/jpountz/util/Utils.NATIVE_BYTE_ORDER:Ljava/nio/ByteOrder;
      13: if_acmpeq     24
      16: new           #20                 // class java/lang/AssertionError
      19: dup
      20: invokespecial #21                 // Method java/lang/AssertionError."<init>":()V
      23: athrow
      24: aload_0
      25: iload_1
      26: invokevirtual #25                 // Method java/nio/ByteBuffer.getLong:(I)J
      29: lreturn

  public static long readLongLE(java.nio.ByteBuffer, int);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          24
       6: aload_0
       7: invokevirtual #12                 // Method java/nio/ByteBuffer.order:()Ljava/nio/ByteOrder;
      10: getstatic     #13                 // Field java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;
      13: if_acmpeq     24
      16: new           #20                 // class java/lang/AssertionError
      19: dup
      20: invokespecial #21                 // Method java/lang/AssertionError."<init>":()V
      23: athrow
      24: aload_0
      25: iload_1
      26: invokevirtual #25                 // Method java/nio/ByteBuffer.getLong:(I)J
      29: lreturn

  public static void writeByte(java.nio.ByteBuffer, int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: i2b
       4: invokevirtual #26                 // Method java/nio/ByteBuffer.put:(IB)Ljava/nio/ByteBuffer;
       7: pop
       8: return

  public static void writeShortLE(java.nio.ByteBuffer, int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: i2b
       4: invokevirtual #26                 // Method java/nio/ByteBuffer.put:(IB)Ljava/nio/ByteBuffer;
       7: pop
       8: aload_0
       9: iload_1
      10: iconst_1
      11: iadd
      12: iload_2
      13: bipush        8
      15: iushr
      16: i2b
      17: invokevirtual #26                 // Method java/nio/ByteBuffer.put:(IB)Ljava/nio/ByteBuffer;
      20: pop
      21: return

  public static void checkNotReadOnly(java.nio.ByteBuffer);
    Code:
       0: aload_0
       1: invokevirtual #27                 // Method java/nio/ByteBuffer.isReadOnly:()Z
       4: ifeq          15
       7: new           #28                 // class java/nio/ReadOnlyBufferException
      10: dup
      11: invokespecial #29                 // Method java/nio/ReadOnlyBufferException."<init>":()V
      14: athrow
      15: return

  public static int readShortLE(java.nio.ByteBuffer, int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #18                 // Method java/nio/ByteBuffer.get:(I)B
       5: sipush        255
       8: iand
       9: aload_0
      10: iload_1
      11: iconst_1
      12: iadd
      13: invokevirtual #18                 // Method java/nio/ByteBuffer.get:(I)B
      16: sipush        255
      19: iand
      20: bipush        8
      22: ishl
      23: ior
      24: ireturn

  static {};
    Code:
       0: ldc_w         #4                  // class net/jpountz/util/ByteBufferUtils
       3: invokevirtual #30                 // Method java/lang/Class.desiredAssertionStatus:()Z
       6: ifne          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: putstatic     #19                 // Field $assertionsDisabled:Z
      17: iconst_0
      18: anewarray     #4                  // class net/jpountz/util/ByteBufferUtils
      21: putstatic     #1                  // Field $VALUES:[Lnet/jpountz/util/ByteBufferUtils;
      24: return
}
