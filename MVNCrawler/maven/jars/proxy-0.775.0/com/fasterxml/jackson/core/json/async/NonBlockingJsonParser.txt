Compiled from "NonBlockingJsonParser.java"
public class com.fasterxml.jackson.core.json.async.NonBlockingJsonParser extends com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase implements com.fasterxml.jackson.core.async.ByteArrayFeeder {
  private byte[] _inputBuffer;

  public com.fasterxml.jackson.core.json.async.NonBlockingJsonParser(com.fasterxml.jackson.core.io.IOContext, int, com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: aload_3
       4: invokespecial #1                  // Method com/fasterxml/jackson/core/json/async/NonBlockingUtf8JsonParserBase."<init>":(Lcom/fasterxml/jackson/core/io/IOContext;ILcom/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer;)V
       7: aload_0
       8: getstatic     #2                  // Field NO_BYTES:[B
      11: putfield      #3                  // Field _inputBuffer:[B
      14: return

  public com.fasterxml.jackson.core.async.ByteArrayFeeder getNonBlockingInputFeeder();
    Code:
       0: aload_0
       1: areturn

  public void feedInput(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field _inputPtr:I
       4: aload_0
       5: getfield      #5                  // Field _inputEnd:I
       8: if_icmpge     29
      11: aload_0
      12: ldc           #6                  // String Still have %d undecoded bytes, should not call \'feedInput\'
      14: aload_0
      15: getfield      #5                  // Field _inputEnd:I
      18: aload_0
      19: getfield      #4                  // Field _inputPtr:I
      22: isub
      23: invokestatic  #7                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      26: invokevirtual #8                  // Method _reportError:(Ljava/lang/String;Ljava/lang/Object;)V
      29: iload_3
      30: iload_2
      31: if_icmpge     48
      34: aload_0
      35: ldc           #9                  // String Input end (%d) may not be before start (%d)
      37: iload_3
      38: invokestatic  #7                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      41: iload_2
      42: invokestatic  #7                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      45: invokevirtual #10                 // Method _reportError:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      48: aload_0
      49: getfield      #11                 // Field _endOfInput:Z
      52: ifeq          61
      55: aload_0
      56: ldc           #12                 // String Already closed, can not feed more input
      58: invokevirtual #13                 // Method _reportError:(Ljava/lang/String;)V
      61: aload_0
      62: dup
      63: getfield      #14                 // Field _currInputProcessed:J
      66: aload_0
      67: getfield      #15                 // Field _origBufferLen:I
      70: i2l
      71: ladd
      72: putfield      #14                 // Field _currInputProcessed:J
      75: aload_0
      76: iload_2
      77: aload_0
      78: getfield      #5                  // Field _inputEnd:I
      81: aload_0
      82: getfield      #16                 // Field _currInputRowStart:I
      85: isub
      86: isub
      87: putfield      #16                 // Field _currInputRowStart:I
      90: aload_0
      91: iload_2
      92: putfield      #17                 // Field _currBufferStart:I
      95: aload_0
      96: aload_1
      97: putfield      #3                  // Field _inputBuffer:[B
     100: aload_0
     101: iload_2
     102: putfield      #4                  // Field _inputPtr:I
     105: aload_0
     106: iload_3
     107: putfield      #5                  // Field _inputEnd:I
     110: aload_0
     111: iload_3
     112: iload_2
     113: isub
     114: putfield      #15                 // Field _origBufferLen:I
     117: return

  public int releaseBuffered(java.io.OutputStream) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #5                  // Field _inputEnd:I
       4: aload_0
       5: getfield      #4                  // Field _inputPtr:I
       8: isub
       9: istore_2
      10: iload_2
      11: ifle          27
      14: aload_1
      15: aload_0
      16: getfield      #3                  // Field _inputBuffer:[B
      19: aload_0
      20: getfield      #4                  // Field _inputPtr:I
      23: iload_2
      24: invokevirtual #18                 // Method java/io/OutputStream.write:([BII)V
      27: iload_2
      28: ireturn

  protected byte getNextSignedByteFromBuffer();
    Code:
       0: aload_0
       1: getfield      #3                  // Field _inputBuffer:[B
       4: aload_0
       5: dup
       6: getfield      #4                  // Field _inputPtr:I
       9: dup_x1
      10: iconst_1
      11: iadd
      12: putfield      #4                  // Field _inputPtr:I
      15: baload
      16: ireturn

  protected int getNextUnsignedByteFromBuffer();
    Code:
       0: aload_0
       1: getfield      #3                  // Field _inputBuffer:[B
       4: aload_0
       5: dup
       6: getfield      #4                  // Field _inputPtr:I
       9: dup_x1
      10: iconst_1
      11: iadd
      12: putfield      #4                  // Field _inputPtr:I
      15: baload
      16: sipush        255
      19: iand
      20: ireturn

  protected byte getByteFromBuffer(int);
    Code:
       0: aload_0
       1: getfield      #3                  // Field _inputBuffer:[B
       4: iload_1
       5: baload
       6: ireturn

  public com.fasterxml.jackson.core.async.NonBlockingInputFeeder getNonBlockingInputFeeder();
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method getNonBlockingInputFeeder:()Lcom/fasterxml/jackson/core/async/ByteArrayFeeder;
       4: areturn
}
