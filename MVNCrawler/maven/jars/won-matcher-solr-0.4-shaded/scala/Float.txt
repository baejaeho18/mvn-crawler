Compiled from "Float.scala"
public abstract class scala.Float {
  public static double float2double(float);
    Code:
       0: getstatic     #16                 // Field scala/Float$.MODULE$:Lscala/Float$;
       3: fload_0
       4: invokevirtual #18                 // Method scala/Float$.float2double:(F)D
       7: dreturn

  public static java.lang.String toString();
    Code:
       0: getstatic     #16                 // Field scala/Float$.MODULE$:Lscala/Float$;
       3: invokevirtual #22                 // Method scala/Float$.toString:()Ljava/lang/String;
       6: areturn

  public static float unbox(java.lang.Object);
    Code:
       0: getstatic     #16                 // Field scala/Float$.MODULE$:Lscala/Float$;
       3: aload_0
       4: invokevirtual #26                 // Method scala/Float$.unbox:(Ljava/lang/Object;)F
       7: freturn

  public static java.lang.Float box(float);
    Code:
       0: getstatic     #16                 // Field scala/Float$.MODULE$:Lscala/Float$;
       3: fload_0
       4: invokevirtual #30                 // Method scala/Float$.box:(F)Ljava/lang/Float;
       7: areturn

  public static float MaxValue();
    Code:
       0: getstatic     #16                 // Field scala/Float$.MODULE$:Lscala/Float$;
       3: invokevirtual #34                 // Method scala/Float$.MaxValue:()F
       6: freturn

  public static float MinValue();
    Code:
       0: getstatic     #16                 // Field scala/Float$.MODULE$:Lscala/Float$;
       3: invokevirtual #37                 // Method scala/Float$.MinValue:()F
       6: freturn

  public static float NegativeInfinity();
    Code:
       0: getstatic     #16                 // Field scala/Float$.MODULE$:Lscala/Float$;
       3: invokevirtual #40                 // Method scala/Float$.NegativeInfinity:()F
       6: freturn

  public static float PositiveInfinity();
    Code:
       0: getstatic     #16                 // Field scala/Float$.MODULE$:Lscala/Float$;
       3: invokevirtual #43                 // Method scala/Float$.PositiveInfinity:()F
       6: freturn

  public static float NaN();
    Code:
       0: getstatic     #16                 // Field scala/Float$.MODULE$:Lscala/Float$;
       3: invokevirtual #46                 // Method scala/Float$.NaN:()F
       6: freturn

  public static float MinPositiveValue();
    Code:
       0: getstatic     #16                 // Field scala/Float$.MODULE$:Lscala/Float$;
       3: invokevirtual #49                 // Method scala/Float$.MinPositiveValue:()F
       6: freturn

  public scala.Float();
    Code:
       0: aload_0
       1: invokespecial #53                 // Method java/lang/Object."<init>":()V
       4: return

  public abstract byte toByte();

  public abstract short toShort();

  public abstract char toChar();

  public abstract int toInt();

  public abstract long toLong();

  public abstract float toFloat();

  public abstract double toDouble();

  public abstract float unary_$plus();

  public abstract float unary_$minus();

  public abstract java.lang.String $plus(java.lang.String);

  public abstract boolean $eq$eq(byte);

  public abstract boolean $eq$eq(short);

  public abstract boolean $eq$eq(char);

  public abstract boolean $eq$eq(int);

  public abstract boolean $eq$eq(long);

  public abstract boolean $eq$eq(float);

  public abstract boolean $eq$eq(double);

  public abstract boolean $bang$eq(byte);

  public abstract boolean $bang$eq(short);

  public abstract boolean $bang$eq(char);

  public abstract boolean $bang$eq(int);

  public abstract boolean $bang$eq(long);

  public abstract boolean $bang$eq(float);

  public abstract boolean $bang$eq(double);

  public abstract boolean $less(byte);

  public abstract boolean $less(short);

  public abstract boolean $less(char);

  public abstract boolean $less(int);

  public abstract boolean $less(long);

  public abstract boolean $less(float);

  public abstract boolean $less(double);

  public abstract boolean $less$eq(byte);

  public abstract boolean $less$eq(short);

  public abstract boolean $less$eq(char);

  public abstract boolean $less$eq(int);

  public abstract boolean $less$eq(long);

  public abstract boolean $less$eq(float);

  public abstract boolean $less$eq(double);

  public abstract boolean $greater(byte);

  public abstract boolean $greater(short);

  public abstract boolean $greater(char);

  public abstract boolean $greater(int);

  public abstract boolean $greater(long);

  public abstract boolean $greater(float);

  public abstract boolean $greater(double);

  public abstract boolean $greater$eq(byte);

  public abstract boolean $greater$eq(short);

  public abstract boolean $greater$eq(char);

  public abstract boolean $greater$eq(int);

  public abstract boolean $greater$eq(long);

  public abstract boolean $greater$eq(float);

  public abstract boolean $greater$eq(double);

  public abstract float $plus(byte);

  public abstract float $plus(short);

  public abstract float $plus(char);

  public abstract float $plus(int);

  public abstract float $plus(long);

  public abstract float $plus(float);

  public abstract double $plus(double);

  public abstract float $minus(byte);

  public abstract float $minus(short);

  public abstract float $minus(char);

  public abstract float $minus(int);

  public abstract float $minus(long);

  public abstract float $minus(float);

  public abstract double $minus(double);

  public abstract float $times(byte);

  public abstract float $times(short);

  public abstract float $times(char);

  public abstract float $times(int);

  public abstract float $times(long);

  public abstract float $times(float);

  public abstract double $times(double);

  public abstract float $div(byte);

  public abstract float $div(short);

  public abstract float $div(char);

  public abstract float $div(int);

  public abstract float $div(long);

  public abstract float $div(float);

  public abstract double $div(double);

  public abstract float $percent(byte);

  public abstract float $percent(short);

  public abstract float $percent(char);

  public abstract float $percent(int);

  public abstract float $percent(long);

  public abstract float $percent(float);

  public abstract double $percent(double);
}
