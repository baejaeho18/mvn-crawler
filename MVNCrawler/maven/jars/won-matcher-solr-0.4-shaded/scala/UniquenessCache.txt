Compiled from "Symbol.scala"
public abstract class scala.UniquenessCache<K, V> {
  private final java.util.concurrent.locks.ReentrantReadWriteLock rwl;

  private final java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock rlock;

  private final java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock wlock;

  private final java.util.WeakHashMap<K, java.lang.ref.WeakReference<V>> map;

  private java.util.concurrent.locks.ReentrantReadWriteLock rwl();
    Code:
       0: aload_0
       1: getfield      #21                 // Field rwl:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
       4: areturn

  private java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock rlock();
    Code:
       0: aload_0
       1: getfield      #26                 // Field rlock:Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;
       4: areturn

  private java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock wlock();
    Code:
       0: aload_0
       1: getfield      #29                 // Field wlock:Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;
       4: areturn

  private java.util.WeakHashMap<K, java.lang.ref.WeakReference<V>> map();
    Code:
       0: aload_0
       1: getfield      #32                 // Field map:Ljava/util/WeakHashMap;
       4: areturn

  public abstract V valueFromKey(K);

  public abstract scala.Option<K> keyFromValue(V);

  public V apply(K);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #40                 // Method cached$1:(Ljava/lang/Object;)Ljava/lang/Object;
       5: astore_2
       6: aload_2
       7: ifnonnull     18
      10: aload_0
      11: aload_1
      12: invokespecial #43                 // Method updateCache$1:(Ljava/lang/Object;)Ljava/lang/Object;
      15: goto          19
      18: aload_2
      19: areturn

  public scala.Option<K> unapply(V);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #49                 // Method keyFromValue:(Ljava/lang/Object;)Lscala/Option;
       5: areturn

  private final java.lang.Object cached$1(java.lang.Object);
    Code:
       0: aload_0
       1: invokespecial #52                 // Method rlock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;
       4: invokevirtual #58                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock:()V
       7: aload_0
       8: invokespecial #60                 // Method map:()Ljava/util/WeakHashMap;
      11: aload_1
      12: invokevirtual #65                 // Method java/util/WeakHashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      15: checkcast     #67                 // class java/lang/ref/WeakReference
      18: astore_3
      19: aload_3
      20: ifnonnull     27
      23: aconst_null
      24: goto          31
      27: aload_3
      28: invokevirtual #70                 // Method java/lang/ref/WeakReference.get:()Ljava/lang/Object;
      31: aload_0
      32: invokespecial #52                 // Method rlock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;
      35: invokevirtual #73                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock:()V
      38: areturn
      39: astore_2
      40: aload_0
      41: invokespecial #52                 // Method rlock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;
      44: invokevirtual #73                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock:()V
      47: aload_2
      48: athrow
    Exception table:
       from    to  target type
           7    31    39   any

  private final java.lang.Object updateCache$1(java.lang.Object);
    Code:
       0: aload_0
       1: invokespecial #80                 // Method wlock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;
       4: invokevirtual #83                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock.lock:()V
       7: aload_0
       8: aload_1
       9: invokespecial #40                 // Method cached$1:(Ljava/lang/Object;)Ljava/lang/Object;
      12: astore_3
      13: aload_3
      14: ifnonnull     56
      17: aload_0
      18: invokespecial #60                 // Method map:()Ljava/util/WeakHashMap;
      21: aload_1
      22: invokevirtual #86                 // Method java/util/WeakHashMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      25: pop
      26: aload_0
      27: aload_1
      28: invokevirtual #88                 // Method valueFromKey:(Ljava/lang/Object;)Ljava/lang/Object;
      31: astore        4
      33: aload_0
      34: invokespecial #60                 // Method map:()Ljava/util/WeakHashMap;
      37: aload_1
      38: new           #67                 // class java/lang/ref/WeakReference
      41: dup
      42: aload         4
      44: invokespecial #92                 // Method java/lang/ref/WeakReference."<init>":(Ljava/lang/Object;)V
      47: invokevirtual #96                 // Method java/util/WeakHashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      50: pop
      51: aload         4
      53: goto          57
      56: aload_3
      57: aload_0
      58: invokespecial #80                 // Method wlock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;
      61: invokevirtual #97                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock.unlock:()V
      64: areturn
      65: astore_2
      66: aload_0
      67: invokespecial #80                 // Method wlock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;
      70: invokevirtual #97                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock.unlock:()V
      73: aload_2
      74: athrow
    Exception table:
       from    to  target type
           7    57    65   any

  public scala.UniquenessCache();
    Code:
       0: aload_0
       1: invokespecial #100                // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #102                // class java/util/concurrent/locks/ReentrantReadWriteLock
       8: dup
       9: invokespecial #103                // Method java/util/concurrent/locks/ReentrantReadWriteLock."<init>":()V
      12: putfield      #21                 // Field rwl:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
      15: aload_0
      16: aload_0
      17: invokespecial #105                // Method rwl:()Ljava/util/concurrent/locks/ReentrantReadWriteLock;
      20: invokevirtual #108                // Method java/util/concurrent/locks/ReentrantReadWriteLock.readLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;
      23: putfield      #26                 // Field rlock:Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;
      26: aload_0
      27: aload_0
      28: invokespecial #105                // Method rwl:()Ljava/util/concurrent/locks/ReentrantReadWriteLock;
      31: invokevirtual #111                // Method java/util/concurrent/locks/ReentrantReadWriteLock.writeLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;
      34: putfield      #29                 // Field wlock:Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;
      37: aload_0
      38: new           #62                 // class java/util/WeakHashMap
      41: dup
      42: invokespecial #112                // Method java/util/WeakHashMap."<init>":()V
      45: putfield      #32                 // Field map:Ljava/util/WeakHashMap;
      48: return
}
