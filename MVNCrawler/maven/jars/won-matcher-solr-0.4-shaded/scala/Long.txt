Compiled from "Long.scala"
public abstract class scala.Long {
  public static double long2double(long);
    Code:
       0: getstatic     #16                 // Field scala/Long$.MODULE$:Lscala/Long$;
       3: lload_0
       4: invokevirtual #18                 // Method scala/Long$.long2double:(J)D
       7: dreturn

  public static float long2float(long);
    Code:
       0: getstatic     #16                 // Field scala/Long$.MODULE$:Lscala/Long$;
       3: lload_0
       4: invokevirtual #22                 // Method scala/Long$.long2float:(J)F
       7: freturn

  public static java.lang.String toString();
    Code:
       0: getstatic     #16                 // Field scala/Long$.MODULE$:Lscala/Long$;
       3: invokevirtual #26                 // Method scala/Long$.toString:()Ljava/lang/String;
       6: areturn

  public static long unbox(java.lang.Object);
    Code:
       0: getstatic     #16                 // Field scala/Long$.MODULE$:Lscala/Long$;
       3: aload_0
       4: invokevirtual #30                 // Method scala/Long$.unbox:(Ljava/lang/Object;)J
       7: lreturn

  public static java.lang.Long box(long);
    Code:
       0: getstatic     #16                 // Field scala/Long$.MODULE$:Lscala/Long$;
       3: lload_0
       4: invokevirtual #34                 // Method scala/Long$.box:(J)Ljava/lang/Long;
       7: areturn

  public static long MaxValue();
    Code:
       0: getstatic     #16                 // Field scala/Long$.MODULE$:Lscala/Long$;
       3: invokevirtual #38                 // Method scala/Long$.MaxValue:()J
       6: lreturn

  public static long MinValue();
    Code:
       0: getstatic     #16                 // Field scala/Long$.MODULE$:Lscala/Long$;
       3: invokevirtual #41                 // Method scala/Long$.MinValue:()J
       6: lreturn

  public scala.Long();
    Code:
       0: aload_0
       1: invokespecial #45                 // Method java/lang/Object."<init>":()V
       4: return

  public abstract byte toByte();

  public abstract short toShort();

  public abstract char toChar();

  public abstract int toInt();

  public abstract long toLong();

  public abstract float toFloat();

  public abstract double toDouble();

  public abstract long unary_$tilde();

  public abstract long unary_$plus();

  public abstract long unary_$minus();

  public abstract java.lang.String $plus(java.lang.String);

  public abstract long $less$less(int);

  public abstract long $less$less(long);

  public abstract long $greater$greater$greater(int);

  public abstract long $greater$greater$greater(long);

  public abstract long $greater$greater(int);

  public abstract long $greater$greater(long);

  public abstract boolean $eq$eq(byte);

  public abstract boolean $eq$eq(short);

  public abstract boolean $eq$eq(char);

  public abstract boolean $eq$eq(int);

  public abstract boolean $eq$eq(long);

  public abstract boolean $eq$eq(float);

  public abstract boolean $eq$eq(double);

  public abstract boolean $bang$eq(byte);

  public abstract boolean $bang$eq(short);

  public abstract boolean $bang$eq(char);

  public abstract boolean $bang$eq(int);

  public abstract boolean $bang$eq(long);

  public abstract boolean $bang$eq(float);

  public abstract boolean $bang$eq(double);

  public abstract boolean $less(byte);

  public abstract boolean $less(short);

  public abstract boolean $less(char);

  public abstract boolean $less(int);

  public abstract boolean $less(long);

  public abstract boolean $less(float);

  public abstract boolean $less(double);

  public abstract boolean $less$eq(byte);

  public abstract boolean $less$eq(short);

  public abstract boolean $less$eq(char);

  public abstract boolean $less$eq(int);

  public abstract boolean $less$eq(long);

  public abstract boolean $less$eq(float);

  public abstract boolean $less$eq(double);

  public abstract boolean $greater(byte);

  public abstract boolean $greater(short);

  public abstract boolean $greater(char);

  public abstract boolean $greater(int);

  public abstract boolean $greater(long);

  public abstract boolean $greater(float);

  public abstract boolean $greater(double);

  public abstract boolean $greater$eq(byte);

  public abstract boolean $greater$eq(short);

  public abstract boolean $greater$eq(char);

  public abstract boolean $greater$eq(int);

  public abstract boolean $greater$eq(long);

  public abstract boolean $greater$eq(float);

  public abstract boolean $greater$eq(double);

  public abstract long $bar(byte);

  public abstract long $bar(short);

  public abstract long $bar(char);

  public abstract long $bar(int);

  public abstract long $bar(long);

  public abstract long $amp(byte);

  public abstract long $amp(short);

  public abstract long $amp(char);

  public abstract long $amp(int);

  public abstract long $amp(long);

  public abstract long $up(byte);

  public abstract long $up(short);

  public abstract long $up(char);

  public abstract long $up(int);

  public abstract long $up(long);

  public abstract long $plus(byte);

  public abstract long $plus(short);

  public abstract long $plus(char);

  public abstract long $plus(int);

  public abstract long $plus(long);

  public abstract float $plus(float);

  public abstract double $plus(double);

  public abstract long $minus(byte);

  public abstract long $minus(short);

  public abstract long $minus(char);

  public abstract long $minus(int);

  public abstract long $minus(long);

  public abstract float $minus(float);

  public abstract double $minus(double);

  public abstract long $times(byte);

  public abstract long $times(short);

  public abstract long $times(char);

  public abstract long $times(int);

  public abstract long $times(long);

  public abstract float $times(float);

  public abstract double $times(double);

  public abstract long $div(byte);

  public abstract long $div(short);

  public abstract long $div(char);

  public abstract long $div(int);

  public abstract long $div(long);

  public abstract float $div(float);

  public abstract double $div(double);

  public abstract long $percent(byte);

  public abstract long $percent(short);

  public abstract long $percent(char);

  public abstract long $percent(int);

  public abstract long $percent(long);

  public abstract float $percent(float);

  public abstract double $percent(double);
}
