Compiled from "Responder.scala"
public final class scala.Responder$$anonfun$loopWhile$1 extends scala.runtime.AbstractFunction1<scala.runtime.BoxedUnit, scala.Responder<scala.runtime.BoxedUnit>> implements scala.Serializable {
  public static final long serialVersionUID;

  private final scala.Function0 cond$1;

  private final scala.Responder r$2;

  public final scala.Responder<scala.runtime.BoxedUnit> apply(scala.runtime.BoxedUnit);
    Code:
       0: getstatic     #27                 // Field scala/Responder$.MODULE$:Lscala/Responder$;
       3: aload_0
       4: getfield      #29                 // Field cond$1:Lscala/Function0;
       7: aload_0
       8: getfield      #31                 // Field r$2:Lscala/Responder;
      11: invokevirtual #32                 // Method scala/Responder$.loopWhile:(Lscala/Function0;Lscala/Responder;)Lscala/Responder;
      14: new           #34                 // class scala/Responder$$anonfun$loopWhile$1$$anonfun$apply$2
      17: dup
      18: aload_0
      19: invokespecial #38                 // Method scala/Responder$$anonfun$loopWhile$1$$anonfun$apply$2."<init>":(Lscala/Responder$$anonfun$loopWhile$1;)V
      22: invokevirtual #44                 // Method scala/Responder.map:(Lscala/Function1;)Lscala/Responder;
      25: areturn

  public final java.lang.Object apply(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #51                 // class scala/runtime/BoxedUnit
       5: invokevirtual #53                 // Method apply:(Lscala/runtime/BoxedUnit;)Lscala/Responder;
       8: areturn

  public scala.Responder$$anonfun$loopWhile$1(scala.Function0, scala.Responder);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #29                 // Field cond$1:Lscala/Function0;
       5: aload_0
       6: aload_2
       7: putfield      #31                 // Field r$2:Lscala/Responder;
      10: aload_0
      11: invokespecial #59                 // Method scala/runtime/AbstractFunction1."<init>":()V
      14: return
}
