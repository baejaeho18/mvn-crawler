Compiled from "RichDouble.scala"
public final class scala.runtime.RichDouble$ {
  public static final scala.runtime.RichDouble$ MODULE$;

  public static {};
    Code:
       0: new           #2                  // class scala/runtime/RichDouble$
       3: invokespecial #12                 // Method "<init>":()V
       6: return

  public final scala.math.Numeric$DoubleIsFractional$ num$extension(double);
    Code:
       0: getstatic     #19                 // Field scala/math/Numeric$DoubleIsFractional$.MODULE$:Lscala/math/Numeric$DoubleIsFractional$;
       3: areturn

  public final scala.math.Ordering$Double$ ord$extension(double);
    Code:
       0: getstatic     #29                 // Field scala/math/Ordering$Double$.MODULE$:Lscala/math/Ordering$Double$;
       3: areturn

  public final scala.math.Numeric$DoubleAsIfIntegral$ integralNum$extension(double);
    Code:
       0: getstatic     #36                 // Field scala/math/Numeric$DoubleAsIfIntegral$.MODULE$:Lscala/math/Numeric$DoubleAsIfIntegral$;
       3: areturn

  public final double doubleValue$extension(double);
    Code:
       0: dload_1
       1: dreturn

  public final float floatValue$extension(double);
    Code:
       0: dload_1
       1: d2f
       2: freturn

  public final long longValue$extension(double);
    Code:
       0: dload_1
       1: d2l
       2: lreturn

  public final int intValue$extension(double);
    Code:
       0: dload_1
       1: d2i
       2: ireturn

  public final byte byteValue$extension(double);
    Code:
       0: dload_1
       1: d2i
       2: i2b
       3: ireturn

  public final short shortValue$extension(double);
    Code:
       0: dload_1
       1: d2i
       2: i2s
       3: ireturn

  public final boolean isWhole$extension(double);
    Code:
       0: dload_1
       1: d2l
       2: lstore_3
       3: lload_3
       4: l2d
       5: dload_1
       6: dcmpl
       7: ifeq          42
      10: lload_3
      11: ldc2_w        #51                 // long 9223372036854775807l
      14: lcmp
      15: ifne          26
      18: dload_1
      19: ldc2_w        #53                 // double Infinityd
      22: dcmpg
      23: iflt          42
      26: lload_3
      27: ldc2_w        #55                 // long -9223372036854775808l
      30: lcmp
      31: ifne          46
      34: dload_1
      35: ldc2_w        #57                 // double -Infinityd
      38: dcmpl
      39: ifle          46
      42: iconst_1
      43: goto          47
      46: iconst_0
      47: ireturn

  public final boolean isValidByte$extension(double);
    Code:
       0: dload_1
       1: d2i
       2: i2b
       3: i2d
       4: dload_1
       5: dcmpl
       6: ifne          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn

  public final boolean isValidShort$extension(double);
    Code:
       0: dload_1
       1: d2i
       2: i2s
       3: i2d
       4: dload_1
       5: dcmpl
       6: ifne          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn

  public final boolean isValidChar$extension(double);
    Code:
       0: dload_1
       1: d2i
       2: i2c
       3: i2d
       4: dload_1
       5: dcmpl
       6: ifne          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn

  public final boolean isValidInt$extension(double);
    Code:
       0: dload_1
       1: d2i
       2: i2d
       3: dload_1
       4: dcmpl
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: ireturn

  public final boolean isNaN$extension(double);
    Code:
       0: dload_1
       1: invokestatic  #70                 // Method java/lang/Double.isNaN:(D)Z
       4: ireturn

  public final boolean isInfinity$extension(double);
    Code:
       0: dload_1
       1: invokestatic  #74                 // Method java/lang/Double.isInfinite:(D)Z
       4: ireturn

  public final boolean isPosInfinity$extension(double);
    Code:
       0: ldc2_w        #53                 // double Infinityd
       3: dload_1
       4: dcmpl
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: ireturn

  public final boolean isNegInfinity$extension(double);
    Code:
       0: ldc2_w        #57                 // double -Infinityd
       3: dload_1
       4: dcmpl
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: ireturn

  public final double abs$extension(double);
    Code:
       0: getstatic     #82                 // Field scala/math/package$.MODULE$:Lscala/math/package$;
       3: dload_1
       4: invokevirtual #85                 // Method scala/math/package$.abs:(D)D
       7: dreturn

  public final double max$extension(double, double);
    Code:
       0: getstatic     #82                 // Field scala/math/package$.MODULE$:Lscala/math/package$;
       3: dload_1
       4: dload_3
       5: invokevirtual #90                 // Method scala/math/package$.max:(DD)D
       8: dreturn

  public final double min$extension(double, double);
    Code:
       0: getstatic     #82                 // Field scala/math/package$.MODULE$:Lscala/math/package$;
       3: dload_1
       4: dload_3
       5: invokevirtual #95                 // Method scala/math/package$.min:(DD)D
       8: dreturn

  public final int signum$extension(double);
    Code:
       0: getstatic     #82                 // Field scala/math/package$.MODULE$:Lscala/math/package$;
       3: dload_1
       4: invokevirtual #99                 // Method scala/math/package$.signum:(D)D
       7: d2i
       8: ireturn

  public final long round$extension(double);
    Code:
       0: getstatic     #82                 // Field scala/math/package$.MODULE$:Lscala/math/package$;
       3: dload_1
       4: invokevirtual #103                // Method scala/math/package$.round:(D)J
       7: lreturn

  public final double ceil$extension(double);
    Code:
       0: getstatic     #82                 // Field scala/math/package$.MODULE$:Lscala/math/package$;
       3: dload_1
       4: invokevirtual #107                // Method scala/math/package$.ceil:(D)D
       7: dreturn

  public final double floor$extension(double);
    Code:
       0: getstatic     #82                 // Field scala/math/package$.MODULE$:Lscala/math/package$;
       3: dload_1
       4: invokevirtual #111                // Method scala/math/package$.floor:(D)D
       7: dreturn

  public final double toRadians$extension(double);
    Code:
       0: getstatic     #82                 // Field scala/math/package$.MODULE$:Lscala/math/package$;
       3: dload_1
       4: invokevirtual #115                // Method scala/math/package$.toRadians:(D)D
       7: dreturn

  public final double toDegrees$extension(double);
    Code:
       0: getstatic     #82                 // Field scala/math/package$.MODULE$:Lscala/math/package$;
       3: dload_1
       4: invokevirtual #119                // Method scala/math/package$.toDegrees:(D)D
       7: dreturn

  public final int hashCode$extension(double);
    Code:
       0: dload_1
       1: invokestatic  #126                // Method scala/runtime/BoxesRunTime.boxToDouble:(D)Ljava/lang/Double;
       4: invokevirtual #130                // Method java/lang/Object.hashCode:()I
       7: ireturn

  public final boolean equals$extension(double, java.lang.Object);
    Code:
       0: aload_3
       1: instanceof    #134                // class scala/runtime/RichDouble
       4: ifeq          13
       7: iconst_1
       8: istore        4
      10: goto          16
      13: iconst_0
      14: istore        4
      16: iload         4
      18: ifeq          49
      21: aload_3
      22: checkcast     #134                // class scala/runtime/RichDouble
      25: invokevirtual #138                // Method scala/runtime/RichDouble.self:()D
      28: dstore        5
      30: dload_1
      31: dload         5
      33: dcmpl
      34: ifne          41
      37: iconst_1
      38: goto          42
      41: iconst_0
      42: ifeq          49
      45: iconst_1
      46: goto          50
      49: iconst_0
      50: ireturn

  private scala.runtime.RichDouble$();
    Code:
       0: aload_0
       1: invokespecial #141                // Method java/lang/Object."<init>":()V
       4: aload_0
       5: putstatic     #143                // Field MODULE$:Lscala/runtime/RichDouble$;
       8: return
}
