Compiled from "RichFloat.scala"
public final class scala.runtime.RichFloat$ {
  public static final scala.runtime.RichFloat$ MODULE$;

  public static {};
    Code:
       0: new           #2                  // class scala/runtime/RichFloat$
       3: invokespecial #12                 // Method "<init>":()V
       6: return

  public final scala.math.Numeric$FloatIsFractional$ num$extension(float);
    Code:
       0: getstatic     #19                 // Field scala/math/Numeric$FloatIsFractional$.MODULE$:Lscala/math/Numeric$FloatIsFractional$;
       3: areturn

  public final scala.math.Ordering$Float$ ord$extension(float);
    Code:
       0: getstatic     #29                 // Field scala/math/Ordering$Float$.MODULE$:Lscala/math/Ordering$Float$;
       3: areturn

  public final scala.math.Numeric$FloatAsIfIntegral$ integralNum$extension(float);
    Code:
       0: getstatic     #36                 // Field scala/math/Numeric$FloatAsIfIntegral$.MODULE$:Lscala/math/Numeric$FloatAsIfIntegral$;
       3: areturn

  public final double doubleValue$extension(float);
    Code:
       0: fload_1
       1: f2d
       2: dreturn

  public final float floatValue$extension(float);
    Code:
       0: fload_1
       1: freturn

  public final long longValue$extension(float);
    Code:
       0: fload_1
       1: f2l
       2: lreturn

  public final int intValue$extension(float);
    Code:
       0: fload_1
       1: f2i
       2: ireturn

  public final byte byteValue$extension(float);
    Code:
       0: fload_1
       1: f2i
       2: i2b
       3: ireturn

  public final short shortValue$extension(float);
    Code:
       0: fload_1
       1: f2i
       2: i2s
       3: ireturn

  public final boolean isWhole$extension(float);
    Code:
       0: fload_1
       1: f2l
       2: lstore_2
       3: lload_2
       4: l2f
       5: fload_1
       6: fcmpl
       7: ifeq          40
      10: lload_2
      11: ldc2_w        #51                 // long 9223372036854775807l
      14: lcmp
      15: ifne          25
      18: fload_1
      19: ldc           #53                 // float Infinityf
      21: fcmpg
      22: iflt          40
      25: lload_2
      26: ldc2_w        #54                 // long -9223372036854775808l
      29: lcmp
      30: ifne          44
      33: fload_1
      34: ldc           #56                 // float -Infinityf
      36: fcmpl
      37: ifle          44
      40: iconst_1
      41: goto          45
      44: iconst_0
      45: ireturn

  public final boolean isValidByte$extension(float);
    Code:
       0: fload_1
       1: f2i
       2: i2b
       3: i2f
       4: fload_1
       5: fcmpl
       6: ifne          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn

  public final boolean isValidShort$extension(float);
    Code:
       0: fload_1
       1: f2i
       2: i2s
       3: i2f
       4: fload_1
       5: fcmpl
       6: ifne          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn

  public final boolean isValidChar$extension(float);
    Code:
       0: fload_1
       1: f2i
       2: i2c
       3: i2f
       4: fload_1
       5: fcmpl
       6: ifne          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn

  public final boolean isValidInt$extension(float);
    Code:
       0: fload_1
       1: f2i
       2: istore_2
       3: iload_2
       4: i2f
       5: fload_1
       6: fcmpl
       7: ifne          20
      10: iload_2
      11: ldc           #63                 // int 2147483647
      13: if_icmpeq     20
      16: iconst_1
      17: goto          21
      20: iconst_0
      21: ireturn

  public final boolean isNaN$extension(float);
    Code:
       0: fload_1
       1: invokestatic  #71                 // Method java/lang/Float.isNaN:(F)Z
       4: ireturn

  public final boolean isInfinity$extension(float);
    Code:
       0: fload_1
       1: invokestatic  #75                 // Method java/lang/Float.isInfinite:(F)Z
       4: ireturn

  public final boolean isPosInfinity$extension(float);
    Code:
       0: ldc           #53                 // float Infinityf
       2: fload_1
       3: fcmpl
       4: ifne          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public final boolean isNegInfinity$extension(float);
    Code:
       0: ldc           #56                 // float -Infinityf
       2: fload_1
       3: fcmpl
       4: ifne          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public final float abs$extension(float);
    Code:
       0: getstatic     #83                 // Field scala/math/package$.MODULE$:Lscala/math/package$;
       3: fload_1
       4: invokevirtual #86                 // Method scala/math/package$.abs:(F)F
       7: freturn

  public final float max$extension(float, float);
    Code:
       0: getstatic     #83                 // Field scala/math/package$.MODULE$:Lscala/math/package$;
       3: fload_1
       4: fload_2
       5: invokevirtual #91                 // Method scala/math/package$.max:(FF)F
       8: freturn

  public final float min$extension(float, float);
    Code:
       0: getstatic     #83                 // Field scala/math/package$.MODULE$:Lscala/math/package$;
       3: fload_1
       4: fload_2
       5: invokevirtual #96                 // Method scala/math/package$.min:(FF)F
       8: freturn

  public final int signum$extension(float);
    Code:
       0: getstatic     #83                 // Field scala/math/package$.MODULE$:Lscala/math/package$;
       3: fload_1
       4: invokevirtual #100                // Method scala/math/package$.signum:(F)F
       7: f2i
       8: ireturn

  public final int round$extension(float);
    Code:
       0: getstatic     #83                 // Field scala/math/package$.MODULE$:Lscala/math/package$;
       3: fload_1
       4: invokevirtual #104                // Method scala/math/package$.round:(F)I
       7: ireturn

  public final float ceil$extension(float);
    Code:
       0: getstatic     #83                 // Field scala/math/package$.MODULE$:Lscala/math/package$;
       3: fload_1
       4: f2d
       5: invokevirtual #109                // Method scala/math/package$.ceil:(D)D
       8: d2f
       9: freturn

  public final float floor$extension(float);
    Code:
       0: getstatic     #83                 // Field scala/math/package$.MODULE$:Lscala/math/package$;
       3: fload_1
       4: f2d
       5: invokevirtual #113                // Method scala/math/package$.floor:(D)D
       8: d2f
       9: freturn

  public final float toRadians$extension(float);
    Code:
       0: getstatic     #83                 // Field scala/math/package$.MODULE$:Lscala/math/package$;
       3: fload_1
       4: f2d
       5: invokevirtual #117                // Method scala/math/package$.toRadians:(D)D
       8: d2f
       9: freturn

  public final float toDegrees$extension(float);
    Code:
       0: getstatic     #83                 // Field scala/math/package$.MODULE$:Lscala/math/package$;
       3: fload_1
       4: f2d
       5: invokevirtual #121                // Method scala/math/package$.toDegrees:(D)D
       8: d2f
       9: freturn

  public final int hashCode$extension(float);
    Code:
       0: fload_1
       1: invokestatic  #128                // Method scala/runtime/BoxesRunTime.boxToFloat:(F)Ljava/lang/Float;
       4: invokevirtual #132                // Method java/lang/Object.hashCode:()I
       7: ireturn

  public final boolean equals$extension(float, java.lang.Object);
    Code:
       0: aload_2
       1: instanceof    #136                // class scala/runtime/RichFloat
       4: ifeq          12
       7: iconst_1
       8: istore_3
       9: goto          14
      12: iconst_0
      13: istore_3
      14: iload_3
      15: ifeq          46
      18: aload_2
      19: checkcast     #136                // class scala/runtime/RichFloat
      22: invokevirtual #140                // Method scala/runtime/RichFloat.self:()F
      25: fstore        4
      27: fload_1
      28: fload         4
      30: fcmpl
      31: ifne          38
      34: iconst_1
      35: goto          39
      38: iconst_0
      39: ifeq          46
      42: iconst_1
      43: goto          47
      46: iconst_0
      47: ireturn

  private scala.runtime.RichFloat$();
    Code:
       0: aload_0
       1: invokespecial #143                // Method java/lang/Object."<init>":()V
       4: aload_0
       5: putstatic     #145                // Field MODULE$:Lscala/runtime/RichFloat$;
       8: return
}
