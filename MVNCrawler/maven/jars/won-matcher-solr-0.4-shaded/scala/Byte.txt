Compiled from "Byte.scala"
public abstract class scala.Byte {
  public static double byte2double(byte);
    Code:
       0: getstatic     #16                 // Field scala/Byte$.MODULE$:Lscala/Byte$;
       3: iload_0
       4: invokevirtual #18                 // Method scala/Byte$.byte2double:(B)D
       7: dreturn

  public static float byte2float(byte);
    Code:
       0: getstatic     #16                 // Field scala/Byte$.MODULE$:Lscala/Byte$;
       3: iload_0
       4: invokevirtual #22                 // Method scala/Byte$.byte2float:(B)F
       7: freturn

  public static long byte2long(byte);
    Code:
       0: getstatic     #16                 // Field scala/Byte$.MODULE$:Lscala/Byte$;
       3: iload_0
       4: invokevirtual #26                 // Method scala/Byte$.byte2long:(B)J
       7: lreturn

  public static int byte2int(byte);
    Code:
       0: getstatic     #16                 // Field scala/Byte$.MODULE$:Lscala/Byte$;
       3: iload_0
       4: invokevirtual #30                 // Method scala/Byte$.byte2int:(B)I
       7: ireturn

  public static short byte2short(byte);
    Code:
       0: getstatic     #16                 // Field scala/Byte$.MODULE$:Lscala/Byte$;
       3: iload_0
       4: invokevirtual #34                 // Method scala/Byte$.byte2short:(B)S
       7: ireturn

  public static java.lang.String toString();
    Code:
       0: getstatic     #16                 // Field scala/Byte$.MODULE$:Lscala/Byte$;
       3: invokevirtual #38                 // Method scala/Byte$.toString:()Ljava/lang/String;
       6: areturn

  public static byte unbox(java.lang.Object);
    Code:
       0: getstatic     #16                 // Field scala/Byte$.MODULE$:Lscala/Byte$;
       3: aload_0
       4: invokevirtual #42                 // Method scala/Byte$.unbox:(Ljava/lang/Object;)B
       7: ireturn

  public static java.lang.Byte box(byte);
    Code:
       0: getstatic     #16                 // Field scala/Byte$.MODULE$:Lscala/Byte$;
       3: iload_0
       4: invokevirtual #46                 // Method scala/Byte$.box:(B)Ljava/lang/Byte;
       7: areturn

  public static byte MaxValue();
    Code:
       0: getstatic     #16                 // Field scala/Byte$.MODULE$:Lscala/Byte$;
       3: invokevirtual #50                 // Method scala/Byte$.MaxValue:()B
       6: ireturn

  public static byte MinValue();
    Code:
       0: getstatic     #16                 // Field scala/Byte$.MODULE$:Lscala/Byte$;
       3: invokevirtual #53                 // Method scala/Byte$.MinValue:()B
       6: ireturn

  public scala.Byte();
    Code:
       0: aload_0
       1: invokespecial #57                 // Method java/lang/Object."<init>":()V
       4: return

  public abstract byte toByte();

  public abstract short toShort();

  public abstract char toChar();

  public abstract int toInt();

  public abstract long toLong();

  public abstract float toFloat();

  public abstract double toDouble();

  public abstract int unary_$tilde();

  public abstract int unary_$plus();

  public abstract int unary_$minus();

  public abstract java.lang.String $plus(java.lang.String);

  public abstract int $less$less(int);

  public abstract int $less$less(long);

  public abstract int $greater$greater$greater(int);

  public abstract int $greater$greater$greater(long);

  public abstract int $greater$greater(int);

  public abstract int $greater$greater(long);

  public abstract boolean $eq$eq(byte);

  public abstract boolean $eq$eq(short);

  public abstract boolean $eq$eq(char);

  public abstract boolean $eq$eq(int);

  public abstract boolean $eq$eq(long);

  public abstract boolean $eq$eq(float);

  public abstract boolean $eq$eq(double);

  public abstract boolean $bang$eq(byte);

  public abstract boolean $bang$eq(short);

  public abstract boolean $bang$eq(char);

  public abstract boolean $bang$eq(int);

  public abstract boolean $bang$eq(long);

  public abstract boolean $bang$eq(float);

  public abstract boolean $bang$eq(double);

  public abstract boolean $less(byte);

  public abstract boolean $less(short);

  public abstract boolean $less(char);

  public abstract boolean $less(int);

  public abstract boolean $less(long);

  public abstract boolean $less(float);

  public abstract boolean $less(double);

  public abstract boolean $less$eq(byte);

  public abstract boolean $less$eq(short);

  public abstract boolean $less$eq(char);

  public abstract boolean $less$eq(int);

  public abstract boolean $less$eq(long);

  public abstract boolean $less$eq(float);

  public abstract boolean $less$eq(double);

  public abstract boolean $greater(byte);

  public abstract boolean $greater(short);

  public abstract boolean $greater(char);

  public abstract boolean $greater(int);

  public abstract boolean $greater(long);

  public abstract boolean $greater(float);

  public abstract boolean $greater(double);

  public abstract boolean $greater$eq(byte);

  public abstract boolean $greater$eq(short);

  public abstract boolean $greater$eq(char);

  public abstract boolean $greater$eq(int);

  public abstract boolean $greater$eq(long);

  public abstract boolean $greater$eq(float);

  public abstract boolean $greater$eq(double);

  public abstract int $bar(byte);

  public abstract int $bar(short);

  public abstract int $bar(char);

  public abstract int $bar(int);

  public abstract long $bar(long);

  public abstract int $amp(byte);

  public abstract int $amp(short);

  public abstract int $amp(char);

  public abstract int $amp(int);

  public abstract long $amp(long);

  public abstract int $up(byte);

  public abstract int $up(short);

  public abstract int $up(char);

  public abstract int $up(int);

  public abstract long $up(long);

  public abstract int $plus(byte);

  public abstract int $plus(short);

  public abstract int $plus(char);

  public abstract int $plus(int);

  public abstract long $plus(long);

  public abstract float $plus(float);

  public abstract double $plus(double);

  public abstract int $minus(byte);

  public abstract int $minus(short);

  public abstract int $minus(char);

  public abstract int $minus(int);

  public abstract long $minus(long);

  public abstract float $minus(float);

  public abstract double $minus(double);

  public abstract int $times(byte);

  public abstract int $times(short);

  public abstract int $times(char);

  public abstract int $times(int);

  public abstract long $times(long);

  public abstract float $times(float);

  public abstract double $times(double);

  public abstract int $div(byte);

  public abstract int $div(short);

  public abstract int $div(char);

  public abstract int $div(int);

  public abstract long $div(long);

  public abstract float $div(float);

  public abstract double $div(double);

  public abstract int $percent(byte);

  public abstract int $percent(short);

  public abstract int $percent(char);

  public abstract int $percent(int);

  public abstract long $percent(long);

  public abstract float $percent(float);

  public abstract double $percent(double);
}
