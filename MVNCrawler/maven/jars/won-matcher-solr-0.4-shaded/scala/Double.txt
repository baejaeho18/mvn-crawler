Compiled from "Double.scala"
public abstract class scala.Double {
  public static java.lang.String toString();
    Code:
       0: getstatic     #16                 // Field scala/Double$.MODULE$:Lscala/Double$;
       3: invokevirtual #18                 // Method scala/Double$.toString:()Ljava/lang/String;
       6: areturn

  public static double unbox(java.lang.Object);
    Code:
       0: getstatic     #16                 // Field scala/Double$.MODULE$:Lscala/Double$;
       3: aload_0
       4: invokevirtual #22                 // Method scala/Double$.unbox:(Ljava/lang/Object;)D
       7: dreturn

  public static java.lang.Double box(double);
    Code:
       0: getstatic     #16                 // Field scala/Double$.MODULE$:Lscala/Double$;
       3: dload_0
       4: invokevirtual #26                 // Method scala/Double$.box:(D)Ljava/lang/Double;
       7: areturn

  public static double MaxValue();
    Code:
       0: getstatic     #16                 // Field scala/Double$.MODULE$:Lscala/Double$;
       3: invokevirtual #30                 // Method scala/Double$.MaxValue:()D
       6: dreturn

  public static double MinValue();
    Code:
       0: getstatic     #16                 // Field scala/Double$.MODULE$:Lscala/Double$;
       3: invokevirtual #33                 // Method scala/Double$.MinValue:()D
       6: dreturn

  public static double NegativeInfinity();
    Code:
       0: getstatic     #16                 // Field scala/Double$.MODULE$:Lscala/Double$;
       3: invokevirtual #36                 // Method scala/Double$.NegativeInfinity:()D
       6: dreturn

  public static double PositiveInfinity();
    Code:
       0: getstatic     #16                 // Field scala/Double$.MODULE$:Lscala/Double$;
       3: invokevirtual #39                 // Method scala/Double$.PositiveInfinity:()D
       6: dreturn

  public static double NaN();
    Code:
       0: getstatic     #16                 // Field scala/Double$.MODULE$:Lscala/Double$;
       3: invokevirtual #42                 // Method scala/Double$.NaN:()D
       6: dreturn

  public static double MinPositiveValue();
    Code:
       0: getstatic     #16                 // Field scala/Double$.MODULE$:Lscala/Double$;
       3: invokevirtual #45                 // Method scala/Double$.MinPositiveValue:()D
       6: dreturn

  public scala.Double();
    Code:
       0: aload_0
       1: invokespecial #49                 // Method java/lang/Object."<init>":()V
       4: return

  public abstract byte toByte();

  public abstract short toShort();

  public abstract char toChar();

  public abstract int toInt();

  public abstract long toLong();

  public abstract float toFloat();

  public abstract double toDouble();

  public abstract double unary_$plus();

  public abstract double unary_$minus();

  public abstract java.lang.String $plus(java.lang.String);

  public abstract boolean $eq$eq(byte);

  public abstract boolean $eq$eq(short);

  public abstract boolean $eq$eq(char);

  public abstract boolean $eq$eq(int);

  public abstract boolean $eq$eq(long);

  public abstract boolean $eq$eq(float);

  public abstract boolean $eq$eq(double);

  public abstract boolean $bang$eq(byte);

  public abstract boolean $bang$eq(short);

  public abstract boolean $bang$eq(char);

  public abstract boolean $bang$eq(int);

  public abstract boolean $bang$eq(long);

  public abstract boolean $bang$eq(float);

  public abstract boolean $bang$eq(double);

  public abstract boolean $less(byte);

  public abstract boolean $less(short);

  public abstract boolean $less(char);

  public abstract boolean $less(int);

  public abstract boolean $less(long);

  public abstract boolean $less(float);

  public abstract boolean $less(double);

  public abstract boolean $less$eq(byte);

  public abstract boolean $less$eq(short);

  public abstract boolean $less$eq(char);

  public abstract boolean $less$eq(int);

  public abstract boolean $less$eq(long);

  public abstract boolean $less$eq(float);

  public abstract boolean $less$eq(double);

  public abstract boolean $greater(byte);

  public abstract boolean $greater(short);

  public abstract boolean $greater(char);

  public abstract boolean $greater(int);

  public abstract boolean $greater(long);

  public abstract boolean $greater(float);

  public abstract boolean $greater(double);

  public abstract boolean $greater$eq(byte);

  public abstract boolean $greater$eq(short);

  public abstract boolean $greater$eq(char);

  public abstract boolean $greater$eq(int);

  public abstract boolean $greater$eq(long);

  public abstract boolean $greater$eq(float);

  public abstract boolean $greater$eq(double);

  public abstract double $plus(byte);

  public abstract double $plus(short);

  public abstract double $plus(char);

  public abstract double $plus(int);

  public abstract double $plus(long);

  public abstract double $plus(float);

  public abstract double $plus(double);

  public abstract double $minus(byte);

  public abstract double $minus(short);

  public abstract double $minus(char);

  public abstract double $minus(int);

  public abstract double $minus(long);

  public abstract double $minus(float);

  public abstract double $minus(double);

  public abstract double $times(byte);

  public abstract double $times(short);

  public abstract double $times(char);

  public abstract double $times(int);

  public abstract double $times(long);

  public abstract double $times(float);

  public abstract double $times(double);

  public abstract double $div(byte);

  public abstract double $div(short);

  public abstract double $div(char);

  public abstract double $div(int);

  public abstract double $div(long);

  public abstract double $div(float);

  public abstract double $div(double);

  public abstract double $percent(byte);

  public abstract double $percent(short);

  public abstract double $percent(char);

  public abstract double $percent(int);

  public abstract double $percent(long);

  public abstract double $percent(float);

  public abstract double $percent(double);
}
