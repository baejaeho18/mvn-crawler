Compiled from "SeqProxyLike.scala"
public interface scala.collection.SeqProxyLike<A, Repr extends scala.collection.SeqLike<A, Repr> & scala.collection.Seq<A>> extends scala.collection.SeqLike<A, Repr>, scala.collection.IterableProxyLike<A, Repr> {
  public abstract int size();

  public abstract scala.collection.Seq<A> toSeq();

  public abstract int length();

  public abstract A apply(int);

  public abstract int lengthCompare(int);

  public abstract boolean isDefinedAt(int);

  public abstract int segmentLength(scala.Function1<A, java.lang.Object>, int);

  public abstract int prefixLength(scala.Function1<A, java.lang.Object>);

  public abstract int indexWhere(scala.Function1<A, java.lang.Object>);

  public abstract int indexWhere(scala.Function1<A, java.lang.Object>, int);

  public abstract <B> int indexOf(B);

  public abstract <B> int indexOf(B, int);

  public abstract <B> int lastIndexOf(B);

  public abstract <B> int lastIndexOf(B, int);

  public abstract int lastIndexWhere(scala.Function1<A, java.lang.Object>);

  public abstract int lastIndexWhere(scala.Function1<A, java.lang.Object>, int);

  public abstract Repr reverse();

  public abstract <B, That> That reverseMap(scala.Function1<A, B>, scala.collection.generic.CanBuildFrom<Repr, B, That>);

  public abstract scala.collection.Iterator<A> reverseIterator();

  public abstract <B> boolean startsWith(scala.collection.GenSeq<B>, int);

  public abstract <B> boolean startsWith(scala.collection.GenSeq<B>);

  public abstract <B> boolean endsWith(scala.collection.GenSeq<B>);

  public abstract <B> int indexOfSlice(scala.collection.GenSeq<B>);

  public abstract <B> int indexOfSlice(scala.collection.GenSeq<B>, int);

  public abstract <B> int lastIndexOfSlice(scala.collection.GenSeq<B>);

  public abstract <B> int lastIndexOfSlice(scala.collection.GenSeq<B>, int);

  public abstract <B> boolean containsSlice(scala.collection.GenSeq<B>);

  public abstract <A1> boolean contains(A1);

  public abstract <B, That> That union(scala.collection.GenSeq<B>, scala.collection.generic.CanBuildFrom<Repr, B, That>);

  public abstract <B> Repr diff(scala.collection.GenSeq<B>);

  public abstract <B> Repr intersect(scala.collection.GenSeq<B>);

  public abstract Repr distinct();

  public abstract <B, That> That patch(int, scala.collection.GenSeq<B>, int, scala.collection.generic.CanBuildFrom<Repr, B, That>);

  public abstract <B, That> That updated(int, B, scala.collection.generic.CanBuildFrom<Repr, B, That>);

  public abstract <B, That> That $plus$colon(B, scala.collection.generic.CanBuildFrom<Repr, B, That>);

  public abstract <B, That> That $colon$plus(B, scala.collection.generic.CanBuildFrom<Repr, B, That>);

  public abstract <B, That> That padTo(int, B, scala.collection.generic.CanBuildFrom<Repr, B, That>);

  public abstract <B> boolean corresponds(scala.collection.GenSeq<B>, scala.Function2<A, B, java.lang.Object>);

  public abstract Repr sortWith(scala.Function2<A, A, java.lang.Object>);

  public abstract <B> Repr sortBy(scala.Function1<A, B>, scala.math.Ordering<B>);

  public abstract <B> Repr sorted(scala.math.Ordering<B>);

  public abstract scala.collection.immutable.Range indices();

  public abstract java.lang.Object view();

  public abstract scala.collection.SeqView<A, Repr> view(int, int);
}
