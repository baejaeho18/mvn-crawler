Compiled from "IterableViewLike.scala"
public interface scala.collection.IterableViewLike<A, Coll, This extends scala.collection.IterableView<A, Coll> & scala.collection.IterableViewLike<A, Coll, This>> extends scala.collection.Iterable<A>, scala.collection.TraversableView<A, Coll> {
  public abstract <B> scala.collection.IterableViewLike<A, Coll, This>.Transformed<scala.Tuple2<A, B>> newZipped(scala.collection.GenIterable<B>);

  public abstract <A1, B> scala.collection.IterableViewLike<A, Coll, This>.Transformed<scala.Tuple2<A1, B>> newZippedAll(scala.collection.GenIterable<B>, A1, B);

  public abstract <B> scala.collection.IterableViewLike<A, Coll, This>.Transformed<B> newForced(scala.Function0<scala.collection.GenSeq<B>>);

  public abstract <B> scala.collection.IterableViewLike<A, Coll, This>.Transformed<B> newAppended(scala.collection.GenTraversable<B>);

  public abstract <B> scala.collection.IterableViewLike<A, Coll, This>.Transformed<B> newMapped(scala.Function1<A, B>);

  public abstract <B> scala.collection.IterableViewLike<A, Coll, This>.Transformed<B> newFlatMapped(scala.Function1<A, scala.collection.GenTraversableOnce<B>>);

  public abstract scala.collection.IterableViewLike<A, Coll, This>.Transformed<A> newFiltered(scala.Function1<A, java.lang.Object>);

  public abstract scala.collection.IterableViewLike<A, Coll, This>.Transformed<A> newSliced(scala.collection.generic.SliceInterval);

  public abstract scala.collection.IterableViewLike<A, Coll, This>.Transformed<A> newDroppedWhile(scala.Function1<A, java.lang.Object>);

  public abstract scala.collection.IterableViewLike<A, Coll, This>.Transformed<A> newTakenWhile(scala.Function1<A, java.lang.Object>);

  public abstract scala.collection.IterableViewLike<A, Coll, This>.Transformed<A> newTaken(int);

  public abstract scala.collection.IterableViewLike<A, Coll, This>.Transformed<A> newDropped(int);

  public abstract This drop(int);

  public abstract This take(int);

  public abstract <A1, B, That> That zip(scala.collection.GenIterable<B>, scala.collection.generic.CanBuildFrom<This, scala.Tuple2<A1, B>, That>);

  public abstract <A1, That> That zipWithIndex(scala.collection.generic.CanBuildFrom<This, scala.Tuple2<A1, java.lang.Object>, That>);

  public abstract <B, A1, That> That zipAll(scala.collection.GenIterable<B>, A1, B, scala.collection.generic.CanBuildFrom<This, scala.Tuple2<A1, B>, That>);

  public abstract scala.collection.Iterator<This> grouped(int);

  public abstract scala.collection.Iterator<This> sliding(int, int);

  public abstract scala.collection.Iterator<This> sliding(int);

  public abstract This dropRight(int);

  public abstract This takeRight(int);

  public abstract java.lang.String stringPrefix();
}
