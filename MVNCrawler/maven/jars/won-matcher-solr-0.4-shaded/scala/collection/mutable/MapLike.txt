Compiled from "MapLike.scala"
public interface scala.collection.mutable.MapLike<A, B, This extends scala.collection.mutable.MapLike<A, B, This> & scala.collection.mutable.Map<A, B>> extends scala.collection.MapLike<A, B, This>, scala.collection.mutable.Builder<scala.Tuple2<A, B>, This>, scala.collection.generic.Shrinkable<A>, scala.collection.mutable.Cloneable<This> {
  public abstract scala.collection.mutable.Builder<scala.Tuple2<A, B>, This> newBuilder();

  public abstract scala.collection.parallel.Combiner<scala.Tuple2<A, B>, scala.collection.parallel.mutable.ParMap<A, B>> parCombiner();

  public abstract scala.Option<B> put(A, B);

  public abstract void update(A, B);

  public abstract scala.collection.mutable.MapLike<A, B, This> $plus$eq(scala.Tuple2<A, B>);

  public abstract <B1> scala.collection.mutable.Map<A, B1> updated(A, B1);

  public abstract <B1> scala.collection.mutable.Map<A, B1> $plus(scala.Tuple2<A, B1>);

  public abstract <B1> scala.collection.mutable.Map<A, B1> $plus(scala.Tuple2<A, B1>, scala.Tuple2<A, B1>, scala.collection.Seq<scala.Tuple2<A, B1>>);

  public abstract <B1> scala.collection.mutable.Map<A, B1> $plus$plus(scala.collection.GenTraversableOnce<scala.Tuple2<A, B1>>);

  public abstract scala.Option<B> remove(A);

  public abstract scala.collection.mutable.MapLike<A, B, This> $minus$eq(A);

  public abstract This $minus(A);

  public abstract void clear();

  public abstract B getOrElseUpdate(A, scala.Function0<B>);

  public abstract scala.collection.mutable.MapLike<A, B, This> transform(scala.Function2<A, B, B>);

  public abstract scala.collection.mutable.MapLike<A, B, This> retain(scala.Function2<A, B, java.lang.Object>);

  public abstract This clone();

  public abstract This result();

  public abstract This $minus(A, A, scala.collection.Seq<A>);

  public abstract This $minus$minus(scala.collection.GenTraversableOnce<A>);
}
