Compiled from "FlatHashTable.scala"
public interface scala.collection.mutable.FlatHashTable<A> extends scala.collection.mutable.FlatHashTable$HashUtils<A> {
  public abstract int _loadFactor();

  public abstract void _loadFactor_$eq(int);

  public abstract java.lang.Object[] table();

  public abstract void table_$eq(java.lang.Object[]);

  public abstract int tableSize();

  public abstract void tableSize_$eq(int);

  public abstract int threshold();

  public abstract void threshold_$eq(int);

  public abstract int[] sizemap();

  public abstract void sizemap_$eq(int[]);

  public abstract int seedvalue();

  public abstract void seedvalue_$eq(int);

  public abstract int capacity(int);

  public abstract int initialSize();

  public abstract int randomSeed();

  public abstract int tableSizeSeed();

  public abstract void init(java.io.ObjectInputStream, scala.Function1<A, scala.runtime.BoxedUnit>);

  public abstract void serializeTo(java.io.ObjectOutputStream);

  public abstract scala.Option<A> findEntry(A);

  public abstract boolean containsElem(A);

  public abstract boolean addElem(A);

  public abstract boolean addEntry(java.lang.Object);

  public abstract boolean removeElem(A);

  public abstract scala.collection.Iterator<A> iterator();

  public abstract void nnSizeMapAdd(int);

  public abstract void nnSizeMapRemove(int);

  public abstract void nnSizeMapReset(int);

  public abstract int totalSizeMapBuckets();

  public abstract int calcSizeMapSize(int);

  public abstract void sizeMapInit(int);

  public abstract void sizeMapInitAndRebuild();

  public abstract void printSizeMap();

  public abstract void printContents();

  public abstract void sizeMapDisable();

  public abstract boolean isSizeMapDefined();

  public abstract boolean alwaysInitSizeMap();

  public abstract int index(int);

  public abstract void clearTable();

  public abstract scala.collection.mutable.FlatHashTable$Contents<A> hashTableContents();

  public abstract void initWithContents(scala.collection.mutable.FlatHashTable$Contents<A>);
}
