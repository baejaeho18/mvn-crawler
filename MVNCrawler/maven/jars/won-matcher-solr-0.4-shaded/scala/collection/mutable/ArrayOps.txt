Compiled from "ArrayOps.scala"
public interface scala.collection.mutable.ArrayOps<T> extends scala.collection.mutable.ArrayLike<T, java.lang.Object>, scala.collection.CustomParallelizable<T, scala.collection.parallel.mutable.ParArray<T>> {
  public abstract java.lang.Object scala$collection$mutable$ArrayOps$$super$toArray(scala.reflect.ClassTag);

  public abstract <U> void copyToArray(java.lang.Object, int, int);

  public abstract <U> java.lang.Object toArray(scala.reflect.ClassTag<U>);

  public abstract <B> java.lang.Object $colon$plus(B, scala.reflect.ClassTag<B>);

  public abstract <B> java.lang.Object $plus$colon(B, scala.reflect.ClassTag<B>);

  public abstract scala.collection.parallel.mutable.ParArray<T> par();

  public abstract <U> java.lang.Object flatten(scala.Function1<T, scala.collection.Traversable<U>>, scala.reflect.ClassTag<U>);

  public abstract <U> java.lang.Object[] transpose(scala.Function1<T, java.lang.Object>);

  public abstract <T1, T2> scala.Tuple2<java.lang.Object, java.lang.Object> unzip(scala.Function1<T, scala.Tuple2<T1, T2>>, scala.reflect.ClassTag<T1>, scala.reflect.ClassTag<T2>);

  public abstract <T1, T2, T3> scala.Tuple3<java.lang.Object, java.lang.Object, java.lang.Object> unzip3(scala.Function1<T, scala.Tuple3<T1, T2, T3>>, scala.reflect.ClassTag<T1>, scala.reflect.ClassTag<T2>, scala.reflect.ClassTag<T3>);

  public abstract scala.collection.mutable.IndexedSeq<T> seq();
}
