Compiled from "IndexedSeqOptimized.scala"
public interface scala.collection.IndexedSeqOptimized<A, Repr> extends scala.collection.IndexedSeqLike<A, Repr> {
  public abstract java.lang.Object scala$collection$IndexedSeqOptimized$$super$reduceLeft(scala.Function2);

  public abstract java.lang.Object scala$collection$IndexedSeqOptimized$$super$reduceRight(scala.Function2);

  public abstract java.lang.Object scala$collection$IndexedSeqOptimized$$super$zip(scala.collection.GenIterable, scala.collection.generic.CanBuildFrom);

  public abstract java.lang.Object scala$collection$IndexedSeqOptimized$$super$head();

  public abstract java.lang.Object scala$collection$IndexedSeqOptimized$$super$tail();

  public abstract java.lang.Object scala$collection$IndexedSeqOptimized$$super$last();

  public abstract java.lang.Object scala$collection$IndexedSeqOptimized$$super$init();

  public abstract boolean scala$collection$IndexedSeqOptimized$$super$sameElements(scala.collection.GenIterable);

  public abstract boolean scala$collection$IndexedSeqOptimized$$super$endsWith(scala.collection.GenSeq);

  public abstract boolean isEmpty();

  public abstract <U> void foreach(scala.Function1<A, U>);

  public abstract boolean forall(scala.Function1<A, java.lang.Object>);

  public abstract boolean exists(scala.Function1<A, java.lang.Object>);

  public abstract scala.Option<A> find(scala.Function1<A, java.lang.Object>);

  public abstract <B> B foldLeft(B, scala.Function2<B, A, B>);

  public abstract <B> B foldRight(B, scala.Function2<A, B, B>);

  public abstract <B> B reduceLeft(scala.Function2<B, A, B>);

  public abstract <B> B reduceRight(scala.Function2<A, B, B>);

  public abstract <A1, B, That> That zip(scala.collection.GenIterable<B>, scala.collection.generic.CanBuildFrom<Repr, scala.Tuple2<A1, B>, That>);

  public abstract <A1, That> That zipWithIndex(scala.collection.generic.CanBuildFrom<Repr, scala.Tuple2<A1, java.lang.Object>, That>);

  public abstract Repr slice(int, int);

  public abstract A head();

  public abstract Repr tail();

  public abstract A last();

  public abstract Repr init();

  public abstract Repr take(int);

  public abstract Repr drop(int);

  public abstract Repr takeRight(int);

  public abstract Repr dropRight(int);

  public abstract scala.Tuple2<Repr, Repr> splitAt(int);

  public abstract Repr takeWhile(scala.Function1<A, java.lang.Object>);

  public abstract Repr dropWhile(scala.Function1<A, java.lang.Object>);

  public abstract scala.Tuple2<Repr, Repr> span(scala.Function1<A, java.lang.Object>);

  public abstract <B> boolean sameElements(scala.collection.GenIterable<B>);

  public abstract <B> void copyToArray(java.lang.Object, int, int);

  public abstract int lengthCompare(int);

  public abstract int segmentLength(scala.Function1<A, java.lang.Object>, int);

  public abstract int indexWhere(scala.Function1<A, java.lang.Object>, int);

  public abstract int lastIndexWhere(scala.Function1<A, java.lang.Object>, int);

  public abstract Repr reverse();

  public abstract scala.collection.Iterator<A> reverseIterator();

  public abstract <B> boolean startsWith(scala.collection.GenSeq<B>, int);

  public abstract <B> boolean endsWith(scala.collection.GenSeq<B>);
}
