Compiled from "LinearSeqOptimized.scala"
public interface scala.collection.LinearSeqOptimized<A, Repr extends scala.collection.LinearSeqOptimized<A, Repr>> extends scala.collection.LinearSeqLike<A, Repr> {
  public abstract boolean scala$collection$LinearSeqOptimized$$super$sameElements(scala.collection.GenIterable);

  public abstract boolean isEmpty();

  public abstract A head();

  public abstract Repr tail();

  public abstract int length();

  public abstract A apply(int);

  public abstract <U> void foreach(scala.Function1<A, U>);

  public abstract boolean forall(scala.Function1<A, java.lang.Object>);

  public abstract boolean exists(scala.Function1<A, java.lang.Object>);

  public abstract <A1> boolean contains(A1);

  public abstract scala.Option<A> find(scala.Function1<A, java.lang.Object>);

  public abstract <B> B foldLeft(B, scala.Function2<B, A, B>);

  public abstract <B> B foldRight(B, scala.Function2<A, B, B>);

  public abstract <B> B reduceLeft(scala.Function2<B, A, B>);

  public abstract <B> B reduceRight(scala.Function2<A, B, B>);

  public abstract A last();

  public abstract Repr take(int);

  public abstract Repr drop(int);

  public abstract Repr dropRight(int);

  public abstract Repr slice(int, int);

  public abstract Repr takeWhile(scala.Function1<A, java.lang.Object>);

  public abstract scala.Tuple2<Repr, Repr> span(scala.Function1<A, java.lang.Object>);

  public abstract <B> boolean sameElements(scala.collection.GenIterable<B>);

  public abstract int lengthCompare(int);

  public abstract boolean isDefinedAt(int);

  public abstract int segmentLength(scala.Function1<A, java.lang.Object>, int);

  public abstract int indexWhere(scala.Function1<A, java.lang.Object>, int);

  public abstract int lastIndexWhere(scala.Function1<A, java.lang.Object>, int);
}
