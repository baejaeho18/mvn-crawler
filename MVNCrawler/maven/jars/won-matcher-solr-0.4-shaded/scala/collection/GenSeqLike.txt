Compiled from "GenSeqLike.scala"
public interface scala.collection.GenSeqLike<A, Repr> extends scala.collection.GenIterableLike<A, Repr>, scala.Equals {
  public abstract scala.collection.Seq<A> seq();

  public abstract A apply(int);

  public abstract int length();

  public abstract boolean isDefinedAt(int);

  public abstract int segmentLength(scala.Function1<A, java.lang.Object>, int);

  public abstract int prefixLength(scala.Function1<A, java.lang.Object>);

  public abstract int indexWhere(scala.Function1<A, java.lang.Object>, int);

  public abstract int indexWhere(scala.Function1<A, java.lang.Object>);

  public abstract <B> int indexOf(B);

  public abstract <B> int indexOf(B, int);

  public abstract <B> int lastIndexOf(B);

  public abstract <B> int lastIndexOf(B, int);

  public abstract int lastIndexWhere(scala.Function1<A, java.lang.Object>);

  public abstract int lastIndexWhere(scala.Function1<A, java.lang.Object>, int);

  public abstract Repr reverse();

  public abstract <B, That> That reverseMap(scala.Function1<A, B>, scala.collection.generic.CanBuildFrom<Repr, B, That>);

  public abstract <B> boolean startsWith(scala.collection.GenSeq<B>);

  public abstract <B> boolean startsWith(scala.collection.GenSeq<B>, int);

  public abstract <B> boolean endsWith(scala.collection.GenSeq<B>);

  public abstract <B, That> That patch(int, scala.collection.GenSeq<B>, int, scala.collection.generic.CanBuildFrom<Repr, B, That>);

  public abstract <B, That> That updated(int, B, scala.collection.generic.CanBuildFrom<Repr, B, That>);

  public abstract <B, That> That $plus$colon(B, scala.collection.generic.CanBuildFrom<Repr, B, That>);

  public abstract <B, That> That $colon$plus(B, scala.collection.generic.CanBuildFrom<Repr, B, That>);

  public abstract <B, That> That padTo(int, B, scala.collection.generic.CanBuildFrom<Repr, B, That>);

  public abstract <B> boolean corresponds(scala.collection.GenSeq<B>, scala.Function2<A, B, java.lang.Object>);

  public abstract scala.collection.GenSeq<A> toSeq();

  public abstract <B, That> That union(scala.collection.GenSeq<B>, scala.collection.generic.CanBuildFrom<Repr, B, That>);

  public abstract <B> Repr diff(scala.collection.GenSeq<B>);

  public abstract <B> Repr intersect(scala.collection.GenSeq<B>);

  public abstract Repr distinct();

  public abstract int hashCode();

  public abstract boolean equals(java.lang.Object);
}
