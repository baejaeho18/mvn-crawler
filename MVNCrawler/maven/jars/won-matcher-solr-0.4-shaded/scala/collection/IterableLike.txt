Compiled from "IterableLike.scala"
public interface scala.collection.IterableLike<A, Repr> extends scala.Equals, scala.collection.TraversableLike<A, Repr>, scala.collection.GenIterableLike<A, Repr> {
  public abstract scala.collection.Iterable<A> thisCollection();

  public abstract scala.collection.Iterable<A> toCollection(Repr);

  public abstract scala.collection.Iterator<A> iterator();

  public abstract <U> void foreach(scala.Function1<A, U>);

  public abstract boolean forall(scala.Function1<A, java.lang.Object>);

  public abstract boolean exists(scala.Function1<A, java.lang.Object>);

  public abstract scala.Option<A> find(scala.Function1<A, java.lang.Object>);

  public abstract boolean isEmpty();

  public abstract <B> B foldRight(B, scala.Function2<A, B, B>);

  public abstract <B> B reduceRight(scala.Function2<A, B, B>);

  public abstract scala.collection.Iterable<A> toIterable();

  public abstract scala.collection.Iterator<A> toIterator();

  public abstract A head();

  public abstract Repr slice(int, int);

  public abstract Repr take(int);

  public abstract Repr drop(int);

  public abstract Repr takeWhile(scala.Function1<A, java.lang.Object>);

  public abstract scala.collection.Iterator<Repr> grouped(int);

  public abstract scala.collection.Iterator<Repr> sliding(int);

  public abstract scala.collection.Iterator<Repr> sliding(int, int);

  public abstract Repr takeRight(int);

  public abstract Repr dropRight(int);

  public abstract <B> void copyToArray(java.lang.Object, int, int);

  public abstract <A1, B, That> That zip(scala.collection.GenIterable<B>, scala.collection.generic.CanBuildFrom<Repr, scala.Tuple2<A1, B>, That>);

  public abstract <B, A1, That> That zipAll(scala.collection.GenIterable<B>, A1, B, scala.collection.generic.CanBuildFrom<Repr, scala.Tuple2<A1, B>, That>);

  public abstract <A1, That> That zipWithIndex(scala.collection.generic.CanBuildFrom<Repr, scala.Tuple2<A1, java.lang.Object>, That>);

  public abstract <B> boolean sameElements(scala.collection.GenIterable<B>);

  public abstract scala.collection.immutable.Stream<A> toStream();

  public abstract boolean canEqual(java.lang.Object);

  public abstract java.lang.Object view();

  public abstract scala.collection.IterableView<A, Repr> view(int, int);
}
