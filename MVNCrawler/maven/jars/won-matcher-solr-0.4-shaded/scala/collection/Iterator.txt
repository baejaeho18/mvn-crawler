Compiled from "Iterator.scala"
public interface scala.collection.Iterator<A> extends scala.collection.TraversableOnce<A> {
  public abstract scala.collection.Iterator<A> seq();

  public abstract boolean hasNext();

  public abstract A next();

  public abstract boolean isEmpty();

  public abstract boolean isTraversableAgain();

  public abstract boolean hasDefiniteSize();

  public abstract scala.collection.Iterator<A> take(int);

  public abstract scala.collection.Iterator<A> drop(int);

  public abstract scala.collection.Iterator<A> slice(int, int);

  public abstract <B> scala.collection.Iterator<B> map(scala.Function1<A, B>);

  public abstract <B> scala.collection.Iterator<B> $plus$plus(scala.Function0<scala.collection.GenTraversableOnce<B>>);

  public abstract <B> scala.collection.Iterator<B> flatMap(scala.Function1<A, scala.collection.GenTraversableOnce<B>>);

  public abstract scala.collection.Iterator<A> filter(scala.Function1<A, java.lang.Object>);

  public abstract <B> boolean corresponds(scala.collection.GenTraversableOnce<B>, scala.Function2<A, B, java.lang.Object>);

  public abstract scala.collection.Iterator<A> withFilter(scala.Function1<A, java.lang.Object>);

  public abstract scala.collection.Iterator<A> filterNot(scala.Function1<A, java.lang.Object>);

  public abstract <B> scala.collection.Iterator<B> collect(scala.PartialFunction<A, B>);

  public abstract <B> scala.collection.Iterator<B> scanLeft(B, scala.Function2<B, A, B>);

  public abstract <B> scala.collection.Iterator<B> scanRight(B, scala.Function2<A, B, B>);

  public abstract scala.collection.Iterator<A> takeWhile(scala.Function1<A, java.lang.Object>);

  public abstract scala.Tuple2<scala.collection.Iterator<A>, scala.collection.Iterator<A>> partition(scala.Function1<A, java.lang.Object>);

  public abstract scala.Tuple2<scala.collection.Iterator<A>, scala.collection.Iterator<A>> span(scala.Function1<A, java.lang.Object>);

  public abstract scala.collection.Iterator<A> dropWhile(scala.Function1<A, java.lang.Object>);

  public abstract <B> scala.collection.Iterator<scala.Tuple2<A, B>> zip(scala.collection.Iterator<B>);

  public abstract <A1> scala.collection.Iterator<A1> padTo(int, A1);

  public abstract scala.collection.Iterator<scala.Tuple2<A, java.lang.Object>> zipWithIndex();

  public abstract <B, A1, B1> scala.collection.Iterator<scala.Tuple2<A1, B1>> zipAll(scala.collection.Iterator<B>, A1, B1);

  public abstract <U> void foreach(scala.Function1<A, U>);

  public abstract boolean forall(scala.Function1<A, java.lang.Object>);

  public abstract boolean exists(scala.Function1<A, java.lang.Object>);

  public abstract boolean contains(java.lang.Object);

  public abstract scala.Option<A> find(scala.Function1<A, java.lang.Object>);

  public abstract int indexWhere(scala.Function1<A, java.lang.Object>);

  public abstract <B> int indexOf(B);

  public abstract scala.collection.BufferedIterator<A> buffered();

  public abstract <B> scala.collection.Iterator<A>.GroupedIterator<B> grouped(int);

  public abstract <B> scala.collection.Iterator<A>.GroupedIterator<B> sliding(int, int);

  public abstract <B> int sliding$default$2();

  public abstract int length();

  public abstract scala.Tuple2<scala.collection.Iterator<A>, scala.collection.Iterator<A>> duplicate();

  public abstract <B> scala.collection.Iterator<B> patch(int, scala.collection.Iterator<B>, int);

  public abstract <B> void copyToArray(java.lang.Object, int, int);

  public abstract boolean sameElements(scala.collection.Iterator<?>);

  public abstract scala.collection.Traversable<A> toTraversable();

  public abstract scala.collection.Iterator<A> toIterator();

  public abstract scala.collection.immutable.Stream<A> toStream();

  public abstract java.lang.String toString();
}
