Compiled from "MapProxyLike.scala"
public interface scala.collection.MapProxyLike<A, B, This extends scala.collection.MapLike<A, B, This> & scala.collection.Map<A, B>> extends scala.collection.MapLike<A, B, This>, scala.collection.IterableProxyLike<scala.Tuple2<A, B>, This> {
  public abstract scala.Option<B> get(A);

  public abstract scala.collection.Iterator<scala.Tuple2<A, B>> iterator();

  public abstract <B1> scala.collection.Map<A, B1> $plus(scala.Tuple2<A, B1>);

  public abstract This $minus(A);

  public abstract boolean isEmpty();

  public abstract <B1> B1 getOrElse(A, scala.Function0<B1>);

  public abstract B apply(A);

  public abstract boolean contains(A);

  public abstract boolean isDefinedAt(A);

  public abstract scala.collection.Set<A> keySet();

  public abstract scala.collection.Iterator<A> keysIterator();

  public abstract scala.collection.Iterable<A> keys();

  public abstract scala.collection.Iterable<B> values();

  public abstract scala.collection.Iterator<B> valuesIterator();

  public abstract B default(A);

  public abstract scala.collection.Map<A, B> filterKeys(scala.Function1<A, java.lang.Object>);

  public abstract <C> scala.collection.Map<A, C> mapValues(scala.Function1<B, C>);

  public abstract <B1> scala.collection.Map<A, B1> updated(A, B1);

  public abstract <B1> scala.collection.Map<A, B1> $plus(scala.Tuple2<A, B1>, scala.Tuple2<A, B1>, scala.collection.Seq<scala.Tuple2<A, B1>>);

  public abstract <B1> scala.collection.Map<A, B1> $plus$plus(scala.collection.GenTraversableOnce<scala.Tuple2<A, B1>>);

  public abstract This filterNot(scala.Function1<scala.Tuple2<A, B>, java.lang.Object>);

  public abstract scala.collection.mutable.StringBuilder addString(scala.collection.mutable.StringBuilder, java.lang.String, java.lang.String, java.lang.String);
}
