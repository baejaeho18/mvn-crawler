Compiled from "ParSeqLike.scala"
public class scala.collection.parallel.ParSeqLike$Corresponds<S> implements scala.collection.parallel.ParSeqLike<T, Repr, Sequential>.Accessor<java.lang.Object, scala.collection.parallel.ParSeqLike<T, Repr, Sequential>.Corresponds<S>> {
  public final scala.Function2<T, S, java.lang.Object> scala$collection$parallel$ParSeqLike$Corresponds$$corr;

  private final scala.collection.parallel.SeqSplitter<T> pit;

  private final scala.collection.parallel.SeqSplitter<S> otherpit;

  private volatile boolean result;

  public final scala.collection.parallel.ParSeqLike $outer;

  private volatile java.lang.Throwable throwable;

  public java.lang.String scala$collection$parallel$ParIterableLike$Accessor$$super$toString();
    Code:
       0: aload_0
       1: invokespecial #27                 // Method java/lang/Object.toString:()Ljava/lang/String;
       4: areturn

  public boolean shouldSplitFurther();
    Code:
       0: aload_0
       1: invokestatic  #36                 // Method scala/collection/parallel/ParIterableLike$Accessor$class.shouldSplitFurther:(Lscala/collection/parallel/ParIterableLike$Accessor;)Z
       4: ireturn

  public void signalAbort();
    Code:
       0: aload_0
       1: invokestatic  #41                 // Method scala/collection/parallel/ParIterableLike$Accessor$class.signalAbort:(Lscala/collection/parallel/ParIterableLike$Accessor;)V
       4: return

  public java.lang.String toString();
    Code:
       0: aload_0
       1: invokestatic  #44                 // Method scala/collection/parallel/ParIterableLike$Accessor$class.toString:(Lscala/collection/parallel/ParIterableLike$Accessor;)Ljava/lang/String;
       4: areturn

  public java.lang.Throwable throwable();
    Code:
       0: aload_0
       1: getfield      #47                 // Field throwable:Ljava/lang/Throwable;
       4: areturn

  public void throwable_$eq(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #47                 // Field throwable:Ljava/lang/Throwable;
       5: return

  public java.lang.Object repr();
    Code:
       0: aload_0
       1: invokestatic  #57                 // Method scala/collection/parallel/Task$class.repr:(Lscala/collection/parallel/Task;)Ljava/lang/Object;
       4: areturn

  public void forwardThrowable();
    Code:
       0: aload_0
       1: invokestatic  #61                 // Method scala/collection/parallel/Task$class.forwardThrowable:(Lscala/collection/parallel/Task;)V
       4: return

  public void tryLeaf(scala.Option<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #66                 // Method scala/collection/parallel/Task$class.tryLeaf:(Lscala/collection/parallel/Task;Lscala/Option;)V
       5: return

  public void tryMerge(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #73                 // Method scala/collection/parallel/Task$class.tryMerge:(Lscala/collection/parallel/Task;Ljava/lang/Object;)V
       5: return

  public void mergeThrowables(scala.collection.parallel.Task<?, ?>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #79                 // Method scala/collection/parallel/Task$class.mergeThrowables:(Lscala/collection/parallel/Task;Lscala/collection/parallel/Task;)V
       5: return

  public scala.collection.parallel.SeqSplitter<T> pit();
    Code:
       0: aload_0
       1: getfield      #84                 // Field pit:Lscala/collection/parallel/SeqSplitter;
       4: areturn

  public scala.collection.parallel.SeqSplitter<S> otherpit();
    Code:
       0: aload_0
       1: getfield      #86                 // Field otherpit:Lscala/collection/parallel/SeqSplitter;
       4: areturn

  public boolean result();
    Code:
       0: aload_0
       1: getfield      #88                 // Field result:Z
       4: ireturn

  public void result_$eq(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #88                 // Field result:Z
       5: return

  public void leaf(scala.Option<java.lang.Object>);
    Code:
       0: aload_0
       1: invokevirtual #93                 // Method pit:()Lscala/collection/parallel/SeqSplitter;
       4: invokeinterface #98,  1           // InterfaceMethod scala/collection/parallel/SeqSplitter.isAborted:()Z
       9: ifne          49
      12: aload_0
      13: aload_0
      14: invokevirtual #93                 // Method pit:()Lscala/collection/parallel/SeqSplitter;
      17: aload_0
      18: getfield      #100                // Field scala$collection$parallel$ParSeqLike$Corresponds$$corr:Lscala/Function2;
      21: aload_0
      22: invokevirtual #102                // Method otherpit:()Lscala/collection/parallel/SeqSplitter;
      25: invokeinterface #106,  3          // InterfaceMethod scala/collection/parallel/SeqSplitter.corresponds:(Lscala/Function2;Lscala/collection/Iterator;)Z
      30: invokevirtual #108                // Method result_$eq:(Z)V
      33: aload_0
      34: invokevirtual #110                // Method result:()Z
      37: ifne          49
      40: aload_0
      41: invokevirtual #93                 // Method pit:()Lscala/collection/parallel/SeqSplitter;
      44: invokeinterface #113,  1          // InterfaceMethod scala/collection/parallel/SeqSplitter.abort:()V
      49: return

  public scala.runtime.Nothing$ newSubtask(scala.collection.parallel.IterableSplitter<T>);
    Code:
       0: getstatic     #122                // Field scala/collection/parallel/package$.MODULE$:Lscala/collection/parallel/package$;
       3: invokevirtual #126                // Method scala/collection/parallel/package$.unsupported:()Lscala/runtime/Nothing$;
       6: areturn

  public scala.collection.Seq<scala.collection.parallel.Task<java.lang.Object, scala.collection.parallel.ParSeqLike<T, Repr, Sequential>.Corresponds<S>>> split();
    Code:
       0: aload_0
       1: invokevirtual #93                 // Method pit:()Lscala/collection/parallel/SeqSplitter;
       4: invokeinterface #134,  1          // InterfaceMethod scala/collection/parallel/SeqSplitter.remaining:()I
       9: iconst_2
      10: idiv
      11: istore_1
      12: aload_0
      13: invokevirtual #93                 // Method pit:()Lscala/collection/parallel/SeqSplitter;
      16: invokeinterface #134,  1          // InterfaceMethod scala/collection/parallel/SeqSplitter.remaining:()I
      21: iload_1
      22: isub
      23: istore_2
      24: aload_0
      25: invokevirtual #93                 // Method pit:()Lscala/collection/parallel/SeqSplitter;
      28: getstatic     #139                // Field scala/Predef$.MODULE$:Lscala/Predef$;
      31: iconst_2
      32: newarray       int
      34: dup
      35: iconst_0
      36: iload_1
      37: iastore
      38: dup
      39: iconst_1
      40: iload_2
      41: iastore
      42: invokevirtual #143                // Method scala/Predef$.wrapIntArray:([I)Lscala/collection/mutable/WrappedArray;
      45: invokeinterface #147,  2          // InterfaceMethod scala/collection/parallel/SeqSplitter.psplitWithSignalling:(Lscala/collection/Seq;)Lscala/collection/Seq;
      50: aload_0
      51: invokevirtual #102                // Method otherpit:()Lscala/collection/parallel/SeqSplitter;
      54: getstatic     #139                // Field scala/Predef$.MODULE$:Lscala/Predef$;
      57: iconst_2
      58: newarray       int
      60: dup
      61: iconst_0
      62: iload_1
      63: iastore
      64: dup
      65: iconst_1
      66: iload_2
      67: iastore
      68: invokevirtual #143                // Method scala/Predef$.wrapIntArray:([I)Lscala/collection/mutable/WrappedArray;
      71: invokeinterface #147,  2          // InterfaceMethod scala/collection/parallel/SeqSplitter.psplitWithSignalling:(Lscala/collection/Seq;)Lscala/collection/Seq;
      76: getstatic     #152                // Field scala/collection/Seq$.MODULE$:Lscala/collection/Seq$;
      79: invokevirtual #156                // Method scala/collection/Seq$.canBuildFrom:()Lscala/collection/generic/CanBuildFrom;
      82: invokeinterface #162,  3          // InterfaceMethod scala/collection/Seq.zip:(Lscala/collection/GenIterable;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
      87: checkcast     #164                // class scala/collection/TraversableLike
      90: new           #166                // class scala/collection/parallel/ParSeqLike$Corresponds$$anonfun$split$15
      93: dup
      94: aload_0
      95: invokespecial #170                // Method scala/collection/parallel/ParSeqLike$Corresponds$$anonfun$split$15."<init>":(Lscala/collection/parallel/ParSeqLike$Corresponds;)V
      98: invokeinterface #174,  2          // InterfaceMethod scala/collection/TraversableLike.withFilter:(Lscala/Function1;)Lscala/collection/generic/FilterMonadic;
     103: new           #176                // class scala/collection/parallel/ParSeqLike$Corresponds$$anonfun$split$16
     106: dup
     107: aload_0
     108: invokespecial #177                // Method scala/collection/parallel/ParSeqLike$Corresponds$$anonfun$split$16."<init>":(Lscala/collection/parallel/ParSeqLike$Corresponds;)V
     111: getstatic     #152                // Field scala/collection/Seq$.MODULE$:Lscala/collection/Seq$;
     114: invokevirtual #156                // Method scala/collection/Seq$.canBuildFrom:()Lscala/collection/generic/CanBuildFrom;
     117: invokeinterface #183,  3          // InterfaceMethod scala/collection/generic/FilterMonadic.map:(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
     122: checkcast     #158                // class scala/collection/Seq
     125: areturn

  public void merge(scala.collection.parallel.ParSeqLike<T, Repr, Sequential>.Corresponds<S>);
    Code:
       0: aload_0
       1: aload_0
       2: invokevirtual #110                // Method result:()Z
       5: ifeq          19
       8: aload_1
       9: invokevirtual #110                // Method result:()Z
      12: ifeq          19
      15: iconst_1
      16: goto          20
      19: iconst_0
      20: invokevirtual #108                // Method result_$eq:(Z)V
      23: return

  public boolean requiresStrictSplitters();
    Code:
       0: iconst_1
       1: ireturn

  public scala.collection.parallel.ParSeqLike scala$collection$parallel$ParSeqLike$Corresponds$$$outer();
    Code:
       0: aload_0
       1: getfield      #192                // Field $outer:Lscala/collection/parallel/ParSeqLike;
       4: areturn

  public scala.collection.parallel.ParIterableLike scala$collection$parallel$ParIterableLike$Accessor$$$outer();
    Code:
       0: aload_0
       1: invokevirtual #196                // Method scala$collection$parallel$ParSeqLike$Corresponds$$$outer:()Lscala/collection/parallel/ParSeqLike;
       4: areturn

  public scala.collection.parallel.ParIterableLike scala$collection$parallel$ParIterableLike$StrictSplitterCheckTask$$$outer();
    Code:
       0: aload_0
       1: invokevirtual #196                // Method scala$collection$parallel$ParSeqLike$Corresponds$$$outer:()Lscala/collection/parallel/ParSeqLike;
       4: areturn

  public void merge(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #2                  // class scala/collection/parallel/ParSeqLike$Corresponds
       5: invokevirtual #199                // Method merge:(Lscala/collection/parallel/ParSeqLike$Corresponds;)V
       8: return

  public scala.collection.parallel.ParIterableLike$Accessor newSubtask(scala.collection.parallel.IterableSplitter);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #202                // Method newSubtask:(Lscala/collection/parallel/IterableSplitter;)Lscala/runtime/Nothing$;
       5: athrow

  public void result_$eq(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #208                // Method scala/runtime/BoxesRunTime.unboxToBoolean:(Ljava/lang/Object;)Z
       5: invokevirtual #108                // Method result_$eq:(Z)V
       8: return

  public java.lang.Object result();
    Code:
       0: aload_0
       1: invokevirtual #110                // Method result:()Z
       4: invokestatic  #212                // Method scala/runtime/BoxesRunTime.boxToBoolean:(Z)Ljava/lang/Boolean;
       7: areturn

  public scala.collection.parallel.IterableSplitter pit();
    Code:
       0: aload_0
       1: invokevirtual #93                 // Method pit:()Lscala/collection/parallel/SeqSplitter;
       4: areturn

  public scala.collection.parallel.ParSeqLike$Corresponds(scala.collection.parallel.ParSeqLike<T, Repr, Sequential>, scala.Function2<T, S, java.lang.Object>, scala.collection.parallel.SeqSplitter<T>, scala.collection.parallel.SeqSplitter<S>);
    Code:
       0: aload_0
       1: aload_2
       2: putfield      #100                // Field scala$collection$parallel$ParSeqLike$Corresponds$$corr:Lscala/Function2;
       5: aload_0
       6: aload_3
       7: putfield      #84                 // Field pit:Lscala/collection/parallel/SeqSplitter;
      10: aload_0
      11: aload         4
      13: putfield      #86                 // Field otherpit:Lscala/collection/parallel/SeqSplitter;
      16: aload_1
      17: ifnonnull     22
      20: aconst_null
      21: athrow
      22: aload_0
      23: aload_1
      24: putfield      #192                // Field $outer:Lscala/collection/parallel/ParSeqLike;
      27: aload_0
      28: invokespecial #216                // Method java/lang/Object."<init>":()V
      31: aload_0
      32: invokestatic  #219                // Method scala/collection/parallel/Task$class.$init$:(Lscala/collection/parallel/Task;)V
      35: aload_0
      36: invokestatic  #224                // Method scala/collection/parallel/ParIterableLike$StrictSplitterCheckTask$class.$init$:(Lscala/collection/parallel/ParIterableLike$StrictSplitterCheckTask;)V
      39: aload_0
      40: invokestatic  #226                // Method scala/collection/parallel/ParIterableLike$Accessor$class.$init$:(Lscala/collection/parallel/ParIterableLike$Accessor;)V
      43: aload_0
      44: iconst_1
      45: putfield      #88                 // Field result:Z
      48: return
}
