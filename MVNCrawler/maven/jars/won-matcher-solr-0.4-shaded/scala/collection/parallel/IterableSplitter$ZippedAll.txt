Compiled from "RemainsIterator.scala"
public class scala.collection.parallel.IterableSplitter$ZippedAll<U, S> implements scala.collection.parallel.IterableSplitter<scala.Tuple2<U, S>> {
  private final scala.collection.parallel.SeqSplitter<S> that;

  private final U thiselem;

  private final S thatelem;

  public final scala.collection.parallel.IterableSplitter $outer;

  private scala.collection.generic.Signalling signalDelegate;

  public scala.collection.generic.Signalling signalDelegate();
    Code:
       0: aload_0
       1: getfield      #23                 // Field signalDelegate:Lscala/collection/generic/Signalling;
       4: areturn

  public void signalDelegate_$eq(scala.collection.generic.Signalling);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #23                 // Field signalDelegate:Lscala/collection/generic/Signalling;
       5: return

  public scala.collection.Seq<scala.collection.parallel.IterableSplitter<scala.Tuple2<U, S>>> splitWithSignalling();
    Code:
       0: aload_0
       1: invokestatic  #36                 // Method scala/collection/parallel/IterableSplitter$class.splitWithSignalling:(Lscala/collection/parallel/IterableSplitter;)Lscala/collection/Seq;
       4: areturn

  public <S> boolean shouldSplitFurther(scala.collection.parallel.ParIterable<S>, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #41                 // Method scala/collection/parallel/IterableSplitter$class.shouldSplitFurther:(Lscala/collection/parallel/IterableSplitter;Lscala/collection/parallel/ParIterable;I)Z
       6: ireturn

  public java.lang.String buildString(scala.Function1<scala.Function1<java.lang.String, scala.runtime.BoxedUnit>, scala.runtime.BoxedUnit>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #50                 // Method scala/collection/parallel/IterableSplitter$class.buildString:(Lscala/collection/parallel/IterableSplitter;Lscala/Function1;)Ljava/lang/String;
       5: areturn

  public java.lang.String debugInformation();
    Code:
       0: aload_0
       1: invokestatic  #57                 // Method scala/collection/parallel/IterableSplitter$class.debugInformation:(Lscala/collection/parallel/IterableSplitter;)Ljava/lang/String;
       4: areturn

  public scala.collection.parallel.IterableSplitter<scala.Tuple2<U, S>>.Taken newTaken(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #62                 // Method scala/collection/parallel/IterableSplitter$class.newTaken:(Lscala/collection/parallel/IterableSplitter;I)Lscala/collection/parallel/IterableSplitter$Taken;
       5: areturn

  public <U extends scala.collection.parallel.IterableSplitter<scala.Tuple2<U, S>>.Taken> U newSliceInternal(U, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #68                 // Method scala/collection/parallel/IterableSplitter$class.newSliceInternal:(Lscala/collection/parallel/IterableSplitter;Lscala/collection/parallel/IterableSplitter$Taken;I)Lscala/collection/parallel/IterableSplitter$Taken;
       6: areturn

  public scala.collection.parallel.IterableSplitter<scala.Tuple2<U, S>> take(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #76                 // Method scala/collection/parallel/IterableSplitter$class.take:(Lscala/collection/parallel/IterableSplitter;I)Lscala/collection/parallel/IterableSplitter;
       5: areturn

  public scala.collection.parallel.IterableSplitter<scala.Tuple2<U, S>> slice(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokestatic  #82                 // Method scala/collection/parallel/IterableSplitter$class.slice:(Lscala/collection/parallel/IterableSplitter;II)Lscala/collection/parallel/IterableSplitter;
       6: areturn

  public <S> scala.collection.parallel.IterableSplitter<scala.Tuple2<U, S>>.Mapped<S> map(scala.Function1<scala.Tuple2<U, S>, S>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #88                 // Method scala/collection/parallel/IterableSplitter$class.map:(Lscala/collection/parallel/IterableSplitter;Lscala/Function1;)Lscala/collection/parallel/IterableSplitter$Mapped;
       5: areturn

  public <U, PI extends scala.collection.parallel.IterableSplitter<U>> scala.collection.parallel.IterableSplitter<scala.Tuple2<U, S>>.Appended<U, PI> appendParIterable(PI);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #94                 // Method scala/collection/parallel/IterableSplitter$class.appendParIterable:(Lscala/collection/parallel/IterableSplitter;Lscala/collection/parallel/IterableSplitter;)Lscala/collection/parallel/IterableSplitter$Appended;
       5: areturn

  public <S> scala.collection.parallel.IterableSplitter<scala.Tuple2<U, S>>.Zipped<S> zipParSeq(scala.collection.parallel.SeqSplitter<S>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #99                 // Method scala/collection/parallel/IterableSplitter$class.zipParSeq:(Lscala/collection/parallel/IterableSplitter;Lscala/collection/parallel/SeqSplitter;)Lscala/collection/parallel/IterableSplitter$Zipped;
       5: areturn

  public <S, U, R> scala.collection.parallel.IterableSplitter<scala.Tuple2<U, S>>.ZippedAll<U, R> zipAllParSeq(scala.collection.parallel.SeqSplitter<S>, U, R);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #104                // Method scala/collection/parallel/IterableSplitter$class.zipAllParSeq:(Lscala/collection/parallel/IterableSplitter;Lscala/collection/parallel/SeqSplitter;Ljava/lang/Object;Ljava/lang/Object;)Lscala/collection/parallel/IterableSplitter$ZippedAll;
       7: areturn

  public boolean isAborted();
    Code:
       0: aload_0
       1: invokestatic  #113                // Method scala/collection/generic/DelegatedSignalling$class.isAborted:(Lscala/collection/generic/DelegatedSignalling;)Z
       4: ireturn

  public void abort();
    Code:
       0: aload_0
       1: invokestatic  #118                // Method scala/collection/generic/DelegatedSignalling$class.abort:(Lscala/collection/generic/DelegatedSignalling;)V
       4: return

  public int indexFlag();
    Code:
       0: aload_0
       1: invokestatic  #123                // Method scala/collection/generic/DelegatedSignalling$class.indexFlag:(Lscala/collection/generic/DelegatedSignalling;)I
       4: ireturn

  public void setIndexFlag(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #128                // Method scala/collection/generic/DelegatedSignalling$class.setIndexFlag:(Lscala/collection/generic/DelegatedSignalling;I)V
       5: return

  public void setIndexFlagIfGreater(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #131                // Method scala/collection/generic/DelegatedSignalling$class.setIndexFlagIfGreater:(Lscala/collection/generic/DelegatedSignalling;I)V
       5: return

  public void setIndexFlagIfLesser(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #134                // Method scala/collection/generic/DelegatedSignalling$class.setIndexFlagIfLesser:(Lscala/collection/generic/DelegatedSignalling;I)V
       5: return

  public int tag();
    Code:
       0: aload_0
       1: invokestatic  #137                // Method scala/collection/generic/DelegatedSignalling$class.tag:(Lscala/collection/generic/DelegatedSignalling;)I
       4: ireturn

  public int count(scala.Function1<scala.Tuple2<U, S>, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #144                // Method scala/collection/parallel/AugmentedIterableIterator$class.count:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/Function1;)I
       5: ireturn

  public <U> U reduce(scala.Function2<U, U, U>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #150                // Method scala/collection/parallel/AugmentedIterableIterator$class.reduce:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/Function2;)Ljava/lang/Object;
       5: areturn

  public <U> U fold(U, scala.Function2<U, U, U>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #157                // Method scala/collection/parallel/AugmentedIterableIterator$class.fold:(Lscala/collection/parallel/AugmentedIterableIterator;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
       6: areturn

  public <U> U sum(scala.math.Numeric<U>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #163                // Method scala/collection/parallel/AugmentedIterableIterator$class.sum:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/math/Numeric;)Ljava/lang/Object;
       5: areturn

  public <U> U product(scala.math.Numeric<U>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #168                // Method scala/collection/parallel/AugmentedIterableIterator$class.product:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/math/Numeric;)Ljava/lang/Object;
       5: areturn

  public java.lang.Object min(scala.math.Ordering);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #173                // Method scala/collection/parallel/AugmentedIterableIterator$class.min:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/math/Ordering;)Ljava/lang/Object;
       5: areturn

  public java.lang.Object max(scala.math.Ordering);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #178                // Method scala/collection/parallel/AugmentedIterableIterator$class.max:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/math/Ordering;)Ljava/lang/Object;
       5: areturn

  public <U> void copyToArray(java.lang.Object, int, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: invokestatic  #183                // Method scala/collection/parallel/AugmentedIterableIterator$class.copyToArray:(Lscala/collection/parallel/AugmentedIterableIterator;Ljava/lang/Object;II)V
       7: return

  public <U> U reduceLeft(int, scala.Function2<U, U, U>);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokestatic  #191                // Method scala/collection/parallel/AugmentedIterableIterator$class.reduceLeft:(Lscala/collection/parallel/AugmentedIterableIterator;ILscala/Function2;)Ljava/lang/Object;
       6: areturn

  public <S, That> scala.collection.parallel.Combiner<S, That> map2combiner(scala.Function1<scala.Tuple2<U, S>, S>, scala.collection.parallel.Combiner<S, That>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #197                // Method scala/collection/parallel/AugmentedIterableIterator$class.map2combiner:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/Function1;Lscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
       6: areturn

  public <S, That> scala.collection.parallel.Combiner<S, That> collect2combiner(scala.PartialFunction<scala.Tuple2<U, S>, S>, scala.collection.parallel.Combiner<S, That>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #204                // Method scala/collection/parallel/AugmentedIterableIterator$class.collect2combiner:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/PartialFunction;Lscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
       6: areturn

  public <S, That> scala.collection.parallel.Combiner<S, That> flatmap2combiner(scala.Function1<scala.Tuple2<U, S>, scala.collection.GenTraversableOnce<S>>, scala.collection.parallel.Combiner<S, That>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #209                // Method scala/collection/parallel/AugmentedIterableIterator$class.flatmap2combiner:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/Function1;Lscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
       6: areturn

  public <U, Coll, Bld extends scala.collection.mutable.Builder<U, Coll>> Bld copy2builder(Bld);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #214                // Method scala/collection/parallel/AugmentedIterableIterator$class.copy2builder:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/collection/mutable/Builder;)Lscala/collection/mutable/Builder;
       5: areturn

  public <U, This> scala.collection.parallel.Combiner<U, This> filter2combiner(scala.Function1<scala.Tuple2<U, S>, java.lang.Object>, scala.collection.parallel.Combiner<U, This>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #219                // Method scala/collection/parallel/AugmentedIterableIterator$class.filter2combiner:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/Function1;Lscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
       6: areturn

  public <U, This> scala.collection.parallel.Combiner<U, This> filterNot2combiner(scala.Function1<scala.Tuple2<U, S>, java.lang.Object>, scala.collection.parallel.Combiner<U, This>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #223                // Method scala/collection/parallel/AugmentedIterableIterator$class.filterNot2combiner:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/Function1;Lscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
       6: areturn

  public <U, This> scala.Tuple2<scala.collection.parallel.Combiner<U, This>, scala.collection.parallel.Combiner<U, This>> partition2combiners(scala.Function1<scala.Tuple2<U, S>, java.lang.Object>, scala.collection.parallel.Combiner<U, This>, scala.collection.parallel.Combiner<U, This>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #228                // Method scala/collection/parallel/AugmentedIterableIterator$class.partition2combiners:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/Function1;Lscala/collection/parallel/Combiner;Lscala/collection/parallel/Combiner;)Lscala/Tuple2;
       7: areturn

  public <U, This> scala.collection.parallel.Combiner<U, This> take2combiner(int, scala.collection.parallel.Combiner<U, This>);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokestatic  #235                // Method scala/collection/parallel/AugmentedIterableIterator$class.take2combiner:(Lscala/collection/parallel/AugmentedIterableIterator;ILscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
       6: areturn

  public <U, This> scala.collection.parallel.Combiner<U, This> drop2combiner(int, scala.collection.parallel.Combiner<U, This>);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokestatic  #238                // Method scala/collection/parallel/AugmentedIterableIterator$class.drop2combiner:(Lscala/collection/parallel/AugmentedIterableIterator;ILscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
       6: areturn

  public <U, This> scala.collection.parallel.Combiner<U, This> slice2combiner(int, int, scala.collection.parallel.Combiner<U, This>);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: aload_3
       4: invokestatic  #243                // Method scala/collection/parallel/AugmentedIterableIterator$class.slice2combiner:(Lscala/collection/parallel/AugmentedIterableIterator;IILscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
       7: areturn

  public <U, This> scala.Tuple2<scala.collection.parallel.Combiner<U, This>, scala.collection.parallel.Combiner<U, This>> splitAt2combiners(int, scala.collection.parallel.Combiner<U, This>, scala.collection.parallel.Combiner<U, This>);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #248                // Method scala/collection/parallel/AugmentedIterableIterator$class.splitAt2combiners:(Lscala/collection/parallel/AugmentedIterableIterator;ILscala/collection/parallel/Combiner;Lscala/collection/parallel/Combiner;)Lscala/Tuple2;
       7: areturn

  public <U, This> scala.Tuple2<scala.collection.parallel.Combiner<U, This>, java.lang.Object> takeWhile2combiner(scala.Function1<scala.Tuple2<U, S>, java.lang.Object>, scala.collection.parallel.Combiner<U, This>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #256                // Method scala/collection/parallel/AugmentedIterableIterator$class.takeWhile2combiner:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/Function1;Lscala/collection/parallel/Combiner;)Lscala/Tuple2;
       6: areturn

  public <U, This> scala.Tuple2<scala.collection.parallel.Combiner<U, This>, scala.collection.parallel.Combiner<U, This>> span2combiners(scala.Function1<scala.Tuple2<U, S>, java.lang.Object>, scala.collection.parallel.Combiner<U, This>, scala.collection.parallel.Combiner<U, This>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #259                // Method scala/collection/parallel/AugmentedIterableIterator$class.span2combiners:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/Function1;Lscala/collection/parallel/Combiner;Lscala/collection/parallel/Combiner;)Lscala/Tuple2;
       7: areturn

  public <U, A> void scanToArray(U, scala.Function2<U, U, U>, java.lang.Object, int);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: iload         4
       6: invokestatic  #264                // Method scala/collection/parallel/AugmentedIterableIterator$class.scanToArray:(Lscala/collection/parallel/AugmentedIterableIterator;Ljava/lang/Object;Lscala/Function2;Ljava/lang/Object;I)V
       9: return

  public <U, That> scala.collection.parallel.Combiner<U, That> scanToCombiner(U, scala.Function2<U, U, U>, scala.collection.parallel.Combiner<U, That>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #269                // Method scala/collection/parallel/AugmentedIterableIterator$class.scanToCombiner:(Lscala/collection/parallel/AugmentedIterableIterator;Ljava/lang/Object;Lscala/Function2;Lscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
       7: areturn

  public <U, That> scala.collection.parallel.Combiner<U, That> scanToCombiner(int, U, scala.Function2<U, U, U>, scala.collection.parallel.Combiner<U, That>);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #274                // Method scala/collection/parallel/AugmentedIterableIterator$class.scanToCombiner:(Lscala/collection/parallel/AugmentedIterableIterator;ILjava/lang/Object;Lscala/Function2;Lscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
       9: areturn

  public <U, S, That> scala.collection.parallel.Combiner<scala.Tuple2<U, S>, That> zip2combiner(scala.collection.parallel.RemainsIterator<S>, scala.collection.parallel.Combiner<scala.Tuple2<U, S>, That>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #279                // Method scala/collection/parallel/AugmentedIterableIterator$class.zip2combiner:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/collection/parallel/RemainsIterator;Lscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
       6: areturn

  public <U, S, That> scala.collection.parallel.Combiner<scala.Tuple2<U, S>, That> zipAll2combiner(scala.collection.parallel.RemainsIterator<S>, U, S, scala.collection.parallel.Combiner<scala.Tuple2<U, S>, That>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #286                // Method scala/collection/parallel/AugmentedIterableIterator$class.zipAll2combiner:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/collection/parallel/RemainsIterator;Ljava/lang/Object;Ljava/lang/Object;Lscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
       9: areturn

  public boolean isRemainingCheap();
    Code:
       0: aload_0
       1: invokestatic  #292                // Method scala/collection/parallel/RemainsIterator$class.isRemainingCheap:(Lscala/collection/parallel/RemainsIterator;)Z
       4: ireturn

  public scala.collection.Iterator<scala.Tuple2<U, S>> seq();
    Code:
       0: aload_0
       1: invokestatic  #299                // Method scala/collection/Iterator$class.seq:(Lscala/collection/Iterator;)Lscala/collection/Iterator;
       4: areturn

  public boolean isEmpty();
    Code:
       0: aload_0
       1: invokestatic  #303                // Method scala/collection/Iterator$class.isEmpty:(Lscala/collection/Iterator;)Z
       4: ireturn

  public boolean isTraversableAgain();
    Code:
       0: aload_0
       1: invokestatic  #306                // Method scala/collection/Iterator$class.isTraversableAgain:(Lscala/collection/Iterator;)Z
       4: ireturn

  public boolean hasDefiniteSize();
    Code:
       0: aload_0
       1: invokestatic  #309                // Method scala/collection/Iterator$class.hasDefiniteSize:(Lscala/collection/Iterator;)Z
       4: ireturn

  public scala.collection.Iterator<scala.Tuple2<U, S>> drop(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #314                // Method scala/collection/Iterator$class.drop:(Lscala/collection/Iterator;I)Lscala/collection/Iterator;
       5: areturn

  public <B> scala.collection.Iterator<B> $plus$plus(scala.Function0<scala.collection.GenTraversableOnce<B>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #319                // Method scala/collection/Iterator$class.$plus$plus:(Lscala/collection/Iterator;Lscala/Function0;)Lscala/collection/Iterator;
       5: areturn

  public <B> scala.collection.Iterator<B> flatMap(scala.Function1<scala.Tuple2<U, S>, scala.collection.GenTraversableOnce<B>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #325                // Method scala/collection/Iterator$class.flatMap:(Lscala/collection/Iterator;Lscala/Function1;)Lscala/collection/Iterator;
       5: areturn

  public scala.collection.Iterator<scala.Tuple2<U, S>> filter(scala.Function1<scala.Tuple2<U, S>, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #328                // Method scala/collection/Iterator$class.filter:(Lscala/collection/Iterator;Lscala/Function1;)Lscala/collection/Iterator;
       5: areturn

  public <B> boolean corresponds(scala.collection.GenTraversableOnce<B>, scala.Function2<scala.Tuple2<U, S>, B, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #333                // Method scala/collection/Iterator$class.corresponds:(Lscala/collection/Iterator;Lscala/collection/GenTraversableOnce;Lscala/Function2;)Z
       6: ireturn

  public scala.collection.Iterator<scala.Tuple2<U, S>> withFilter(scala.Function1<scala.Tuple2<U, S>, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #337                // Method scala/collection/Iterator$class.withFilter:(Lscala/collection/Iterator;Lscala/Function1;)Lscala/collection/Iterator;
       5: areturn

  public scala.collection.Iterator<scala.Tuple2<U, S>> filterNot(scala.Function1<scala.Tuple2<U, S>, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #340                // Method scala/collection/Iterator$class.filterNot:(Lscala/collection/Iterator;Lscala/Function1;)Lscala/collection/Iterator;
       5: areturn

  public <B> scala.collection.Iterator<B> collect(scala.PartialFunction<scala.Tuple2<U, S>, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #345                // Method scala/collection/Iterator$class.collect:(Lscala/collection/Iterator;Lscala/PartialFunction;)Lscala/collection/Iterator;
       5: areturn

  public <B> scala.collection.Iterator<B> scanLeft(B, scala.Function2<B, scala.Tuple2<U, S>, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #350                // Method scala/collection/Iterator$class.scanLeft:(Lscala/collection/Iterator;Ljava/lang/Object;Lscala/Function2;)Lscala/collection/Iterator;
       6: areturn

  public <B> scala.collection.Iterator<B> scanRight(B, scala.Function2<scala.Tuple2<U, S>, B, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #353                // Method scala/collection/Iterator$class.scanRight:(Lscala/collection/Iterator;Ljava/lang/Object;Lscala/Function2;)Lscala/collection/Iterator;
       6: areturn

  public scala.collection.Iterator<scala.Tuple2<U, S>> takeWhile(scala.Function1<scala.Tuple2<U, S>, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #356                // Method scala/collection/Iterator$class.takeWhile:(Lscala/collection/Iterator;Lscala/Function1;)Lscala/collection/Iterator;
       5: areturn

  public scala.Tuple2<scala.collection.Iterator<scala.Tuple2<U, S>>, scala.collection.Iterator<scala.Tuple2<U, S>>> partition(scala.Function1<scala.Tuple2<U, S>, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #361                // Method scala/collection/Iterator$class.partition:(Lscala/collection/Iterator;Lscala/Function1;)Lscala/Tuple2;
       5: areturn

  public scala.Tuple2<scala.collection.Iterator<scala.Tuple2<U, S>>, scala.collection.Iterator<scala.Tuple2<U, S>>> span(scala.Function1<scala.Tuple2<U, S>, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #364                // Method scala/collection/Iterator$class.span:(Lscala/collection/Iterator;Lscala/Function1;)Lscala/Tuple2;
       5: areturn

  public scala.collection.Iterator<scala.Tuple2<U, S>> dropWhile(scala.Function1<scala.Tuple2<U, S>, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #367                // Method scala/collection/Iterator$class.dropWhile:(Lscala/collection/Iterator;Lscala/Function1;)Lscala/collection/Iterator;
       5: areturn

  public <B> scala.collection.Iterator<scala.Tuple2<scala.Tuple2<U, S>, B>> zip(scala.collection.Iterator<B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #371                // Method scala/collection/Iterator$class.zip:(Lscala/collection/Iterator;Lscala/collection/Iterator;)Lscala/collection/Iterator;
       5: areturn

  public <A1> scala.collection.Iterator<A1> padTo(int, A1);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokestatic  #377                // Method scala/collection/Iterator$class.padTo:(Lscala/collection/Iterator;ILjava/lang/Object;)Lscala/collection/Iterator;
       6: areturn

  public scala.collection.Iterator<scala.Tuple2<scala.Tuple2<U, S>, java.lang.Object>> zipWithIndex();
    Code:
       0: aload_0
       1: invokestatic  #381                // Method scala/collection/Iterator$class.zipWithIndex:(Lscala/collection/Iterator;)Lscala/collection/Iterator;
       4: areturn

  public <B, A1, B1> scala.collection.Iterator<scala.Tuple2<A1, B1>> zipAll(scala.collection.Iterator<B>, A1, B1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #386                // Method scala/collection/Iterator$class.zipAll:(Lscala/collection/Iterator;Lscala/collection/Iterator;Ljava/lang/Object;Ljava/lang/Object;)Lscala/collection/Iterator;
       7: areturn

  public <U> void foreach(scala.Function1<scala.Tuple2<U, S>, U>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #391                // Method scala/collection/Iterator$class.foreach:(Lscala/collection/Iterator;Lscala/Function1;)V
       5: return

  public boolean forall(scala.Function1<scala.Tuple2<U, S>, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #396                // Method scala/collection/Iterator$class.forall:(Lscala/collection/Iterator;Lscala/Function1;)Z
       5: ireturn

  public boolean exists(scala.Function1<scala.Tuple2<U, S>, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #399                // Method scala/collection/Iterator$class.exists:(Lscala/collection/Iterator;Lscala/Function1;)Z
       5: ireturn

  public boolean contains(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #404                // Method scala/collection/Iterator$class.contains:(Lscala/collection/Iterator;Ljava/lang/Object;)Z
       5: ireturn

  public scala.Option<scala.Tuple2<U, S>> find(scala.Function1<scala.Tuple2<U, S>, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #409                // Method scala/collection/Iterator$class.find:(Lscala/collection/Iterator;Lscala/Function1;)Lscala/Option;
       5: areturn

  public int indexWhere(scala.Function1<scala.Tuple2<U, S>, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #413                // Method scala/collection/Iterator$class.indexWhere:(Lscala/collection/Iterator;Lscala/Function1;)I
       5: ireturn

  public <B> int indexOf(B);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #418                // Method scala/collection/Iterator$class.indexOf:(Lscala/collection/Iterator;Ljava/lang/Object;)I
       5: ireturn

  public scala.collection.BufferedIterator<scala.Tuple2<U, S>> buffered();
    Code:
       0: aload_0
       1: invokestatic  #423                // Method scala/collection/Iterator$class.buffered:(Lscala/collection/Iterator;)Lscala/collection/BufferedIterator;
       4: areturn

  public <B> scala.collection.Iterator<scala.Tuple2<U, S>>.GroupedIterator<B> grouped(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #428                // Method scala/collection/Iterator$class.grouped:(Lscala/collection/Iterator;I)Lscala/collection/Iterator$GroupedIterator;
       5: areturn

  public <B> scala.collection.Iterator<scala.Tuple2<U, S>>.GroupedIterator<B> sliding(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokestatic  #434                // Method scala/collection/Iterator$class.sliding:(Lscala/collection/Iterator;II)Lscala/collection/Iterator$GroupedIterator;
       6: areturn

  public int length();
    Code:
       0: aload_0
       1: invokestatic  #439                // Method scala/collection/Iterator$class.length:(Lscala/collection/Iterator;)I
       4: ireturn

  public scala.Tuple2<scala.collection.Iterator<scala.Tuple2<U, S>>, scala.collection.Iterator<scala.Tuple2<U, S>>> duplicate();
    Code:
       0: aload_0
       1: invokestatic  #444                // Method scala/collection/Iterator$class.duplicate:(Lscala/collection/Iterator;)Lscala/Tuple2;
       4: areturn

  public <B> scala.collection.Iterator<B> patch(int, scala.collection.Iterator<B>, int);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: iload_3
       4: invokestatic  #449                // Method scala/collection/Iterator$class.patch:(Lscala/collection/Iterator;ILscala/collection/Iterator;I)Lscala/collection/Iterator;
       7: areturn

  public boolean sameElements(scala.collection.Iterator<?>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #455                // Method scala/collection/Iterator$class.sameElements:(Lscala/collection/Iterator;Lscala/collection/Iterator;)Z
       5: ireturn

  public scala.collection.Traversable<scala.Tuple2<U, S>> toTraversable();
    Code:
       0: aload_0
       1: invokestatic  #460                // Method scala/collection/Iterator$class.toTraversable:(Lscala/collection/Iterator;)Lscala/collection/Traversable;
       4: areturn

  public scala.collection.Iterator<scala.Tuple2<U, S>> toIterator();
    Code:
       0: aload_0
       1: invokestatic  #463                // Method scala/collection/Iterator$class.toIterator:(Lscala/collection/Iterator;)Lscala/collection/Iterator;
       4: areturn

  public scala.collection.immutable.Stream<scala.Tuple2<U, S>> toStream();
    Code:
       0: aload_0
       1: invokestatic  #468                // Method scala/collection/Iterator$class.toStream:(Lscala/collection/Iterator;)Lscala/collection/immutable/Stream;
       4: areturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: invokestatic  #472                // Method scala/collection/Iterator$class.toString:(Lscala/collection/Iterator;)Ljava/lang/String;
       4: areturn

  public <B> int sliding$default$2();
    Code:
       0: aload_0
       1: invokestatic  #475                // Method scala/collection/Iterator$class.sliding$default$2:(Lscala/collection/Iterator;)I
       4: ireturn

  public scala.collection.immutable.List<scala.Tuple2<U, S>> reversed();
    Code:
       0: aload_0
       1: invokestatic  #482                // Method scala/collection/TraversableOnce$class.reversed:(Lscala/collection/TraversableOnce;)Lscala/collection/immutable/List;
       4: areturn

  public int size();
    Code:
       0: aload_0
       1: invokestatic  #485                // Method scala/collection/TraversableOnce$class.size:(Lscala/collection/TraversableOnce;)I
       4: ireturn

  public boolean nonEmpty();
    Code:
       0: aload_0
       1: invokestatic  #489                // Method scala/collection/TraversableOnce$class.nonEmpty:(Lscala/collection/TraversableOnce;)Z
       4: ireturn

  public <B> scala.Option<B> collectFirst(scala.PartialFunction<scala.Tuple2<U, S>, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #494                // Method scala/collection/TraversableOnce$class.collectFirst:(Lscala/collection/TraversableOnce;Lscala/PartialFunction;)Lscala/Option;
       5: areturn

  public <B> B $div$colon(B, scala.Function2<B, scala.Tuple2<U, S>, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #498                // Method scala/collection/TraversableOnce$class.$div$colon:(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
       6: areturn

  public <B> B $colon$bslash(B, scala.Function2<scala.Tuple2<U, S>, B, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #501                // Method scala/collection/TraversableOnce$class.$colon$bslash:(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
       6: areturn

  public <B> B foldLeft(B, scala.Function2<B, scala.Tuple2<U, S>, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #504                // Method scala/collection/TraversableOnce$class.foldLeft:(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
       6: areturn

  public <B> B foldRight(B, scala.Function2<scala.Tuple2<U, S>, B, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #507                // Method scala/collection/TraversableOnce$class.foldRight:(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
       6: areturn

  public <B> B reduceLeft(scala.Function2<B, scala.Tuple2<U, S>, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #510                // Method scala/collection/TraversableOnce$class.reduceLeft:(Lscala/collection/TraversableOnce;Lscala/Function2;)Ljava/lang/Object;
       5: areturn

  public <B> B reduceRight(scala.Function2<scala.Tuple2<U, S>, B, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #513                // Method scala/collection/TraversableOnce$class.reduceRight:(Lscala/collection/TraversableOnce;Lscala/Function2;)Ljava/lang/Object;
       5: areturn

  public <B> scala.Option<B> reduceLeftOption(scala.Function2<B, scala.Tuple2<U, S>, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #518                // Method scala/collection/TraversableOnce$class.reduceLeftOption:(Lscala/collection/TraversableOnce;Lscala/Function2;)Lscala/Option;
       5: areturn

  public <B> scala.Option<B> reduceRightOption(scala.Function2<scala.Tuple2<U, S>, B, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #521                // Method scala/collection/TraversableOnce$class.reduceRightOption:(Lscala/collection/TraversableOnce;Lscala/Function2;)Lscala/Option;
       5: areturn

  public <A1> scala.Option<A1> reduceOption(scala.Function2<A1, A1, A1>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #524                // Method scala/collection/TraversableOnce$class.reduceOption:(Lscala/collection/TraversableOnce;Lscala/Function2;)Lscala/Option;
       5: areturn

  public <B> B aggregate(scala.Function0<B>, scala.Function2<B, scala.Tuple2<U, S>, B>, scala.Function2<B, B, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #529                // Method scala/collection/TraversableOnce$class.aggregate:(Lscala/collection/TraversableOnce;Lscala/Function0;Lscala/Function2;Lscala/Function2;)Ljava/lang/Object;
       7: areturn

  public java.lang.Object maxBy(scala.Function1, scala.math.Ordering);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #536                // Method scala/collection/TraversableOnce$class.maxBy:(Lscala/collection/TraversableOnce;Lscala/Function1;Lscala/math/Ordering;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object minBy(scala.Function1, scala.math.Ordering);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #540                // Method scala/collection/TraversableOnce$class.minBy:(Lscala/collection/TraversableOnce;Lscala/Function1;Lscala/math/Ordering;)Ljava/lang/Object;
       6: areturn

  public <B> void copyToBuffer(scala.collection.mutable.Buffer<B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #545                // Method scala/collection/TraversableOnce$class.copyToBuffer:(Lscala/collection/TraversableOnce;Lscala/collection/mutable/Buffer;)V
       5: return

  public <B> void copyToArray(java.lang.Object, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #551                // Method scala/collection/TraversableOnce$class.copyToArray:(Lscala/collection/TraversableOnce;Ljava/lang/Object;I)V
       6: return

  public <B> void copyToArray(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #557                // Method scala/collection/TraversableOnce$class.copyToArray:(Lscala/collection/TraversableOnce;Ljava/lang/Object;)V
       5: return

  public <B> java.lang.Object toArray(scala.reflect.ClassTag<B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #562                // Method scala/collection/TraversableOnce$class.toArray:(Lscala/collection/TraversableOnce;Lscala/reflect/ClassTag;)Ljava/lang/Object;
       5: areturn

  public scala.collection.immutable.List<scala.Tuple2<U, S>> toList();
    Code:
       0: aload_0
       1: invokestatic  #567                // Method scala/collection/TraversableOnce$class.toList:(Lscala/collection/TraversableOnce;)Lscala/collection/immutable/List;
       4: areturn

  public scala.collection.Iterable<scala.Tuple2<U, S>> toIterable();
    Code:
       0: aload_0
       1: invokestatic  #572                // Method scala/collection/TraversableOnce$class.toIterable:(Lscala/collection/TraversableOnce;)Lscala/collection/Iterable;
       4: areturn

  public scala.collection.Seq<scala.Tuple2<U, S>> toSeq();
    Code:
       0: aload_0
       1: invokestatic  #576                // Method scala/collection/TraversableOnce$class.toSeq:(Lscala/collection/TraversableOnce;)Lscala/collection/Seq;
       4: areturn

  public scala.collection.immutable.IndexedSeq<scala.Tuple2<U, S>> toIndexedSeq();
    Code:
       0: aload_0
       1: invokestatic  #581                // Method scala/collection/TraversableOnce$class.toIndexedSeq:(Lscala/collection/TraversableOnce;)Lscala/collection/immutable/IndexedSeq;
       4: areturn

  public <B> scala.collection.mutable.Buffer<B> toBuffer();
    Code:
       0: aload_0
       1: invokestatic  #586                // Method scala/collection/TraversableOnce$class.toBuffer:(Lscala/collection/TraversableOnce;)Lscala/collection/mutable/Buffer;
       4: areturn

  public <B> scala.collection.immutable.Set<B> toSet();
    Code:
       0: aload_0
       1: invokestatic  #591                // Method scala/collection/TraversableOnce$class.toSet:(Lscala/collection/TraversableOnce;)Lscala/collection/immutable/Set;
       4: areturn

  public scala.collection.immutable.Vector<scala.Tuple2<U, S>> toVector();
    Code:
       0: aload_0
       1: invokestatic  #596                // Method scala/collection/TraversableOnce$class.toVector:(Lscala/collection/TraversableOnce;)Lscala/collection/immutable/Vector;
       4: areturn

  public <Col> Col to(scala.collection.generic.CanBuildFrom<scala.runtime.Nothing$, scala.Tuple2<U, S>, Col>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #601                // Method scala/collection/TraversableOnce$class.to:(Lscala/collection/TraversableOnce;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
       5: areturn

  public <T, U> scala.collection.immutable.Map<T, U> toMap(scala.Predef$$less$colon$less<scala.Tuple2<U, S>, scala.Tuple2<T, U>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #608                // Method scala/collection/TraversableOnce$class.toMap:(Lscala/collection/TraversableOnce;Lscala/Predef$$less$colon$less;)Lscala/collection/immutable/Map;
       5: areturn

  public java.lang.String mkString(java.lang.String, java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #615                // Method scala/collection/TraversableOnce$class.mkString:(Lscala/collection/TraversableOnce;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
       7: areturn

  public java.lang.String mkString(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #622                // Method scala/collection/TraversableOnce$class.mkString:(Lscala/collection/TraversableOnce;Ljava/lang/String;)Ljava/lang/String;
       5: areturn

  public java.lang.String mkString();
    Code:
       0: aload_0
       1: invokestatic  #625                // Method scala/collection/TraversableOnce$class.mkString:(Lscala/collection/TraversableOnce;)Ljava/lang/String;
       4: areturn

  public scala.collection.mutable.StringBuilder addString(scala.collection.mutable.StringBuilder, java.lang.String, java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #630                // Method scala/collection/TraversableOnce$class.addString:(Lscala/collection/TraversableOnce;Lscala/collection/mutable/StringBuilder;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lscala/collection/mutable/StringBuilder;
       9: areturn

  public scala.collection.mutable.StringBuilder addString(scala.collection.mutable.StringBuilder, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #635                // Method scala/collection/TraversableOnce$class.addString:(Lscala/collection/TraversableOnce;Lscala/collection/mutable/StringBuilder;Ljava/lang/String;)Lscala/collection/mutable/StringBuilder;
       6: areturn

  public scala.collection.mutable.StringBuilder addString(scala.collection.mutable.StringBuilder);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #639                // Method scala/collection/TraversableOnce$class.addString:(Lscala/collection/TraversableOnce;Lscala/collection/mutable/StringBuilder;)Lscala/collection/mutable/StringBuilder;
       5: areturn

  public scala.collection.parallel.SeqSplitter<S> that();
    Code:
       0: aload_0
       1: getfield      #642                // Field that:Lscala/collection/parallel/SeqSplitter;
       4: areturn

  public U thiselem();
    Code:
       0: aload_0
       1: getfield      #645                // Field thiselem:Ljava/lang/Object;
       4: areturn

  public S thatelem();
    Code:
       0: aload_0
       1: getfield      #647                // Field thatelem:Ljava/lang/Object;
       4: areturn

  public boolean hasNext();
    Code:
       0: aload_0
       1: invokevirtual #652                // Method scala$collection$parallel$IterableSplitter$ZippedAll$$$outer:()Lscala/collection/parallel/IterableSplitter;
       4: invokeinterface #654,  1          // InterfaceMethod scala/collection/parallel/IterableSplitter.hasNext:()Z
       9: ifne          24
      12: aload_0
      13: invokevirtual #656                // Method that:()Lscala/collection/parallel/SeqSplitter;
      16: invokeinterface #659,  1          // InterfaceMethod scala/collection/parallel/SeqSplitter.hasNext:()Z
      21: ifeq          28
      24: iconst_1
      25: goto          29
      28: iconst_0
      29: ireturn

  public scala.Tuple2<U, S> next();
    Code:
       0: aload_0
       1: invokevirtual #652                // Method scala$collection$parallel$IterableSplitter$ZippedAll$$$outer:()Lscala/collection/parallel/IterableSplitter;
       4: invokeinterface #654,  1          // InterfaceMethod scala/collection/parallel/IterableSplitter.hasNext:()Z
       9: ifeq          75
      12: aload_0
      13: invokevirtual #656                // Method that:()Lscala/collection/parallel/SeqSplitter;
      16: invokeinterface #659,  1          // InterfaceMethod scala/collection/parallel/SeqSplitter.hasNext:()Z
      21: ifeq          52
      24: new           #662                // class scala/Tuple2
      27: dup
      28: aload_0
      29: invokevirtual #652                // Method scala$collection$parallel$IterableSplitter$ZippedAll$$$outer:()Lscala/collection/parallel/IterableSplitter;
      32: invokeinterface #664,  1          // InterfaceMethod scala/collection/parallel/IterableSplitter.next:()Ljava/lang/Object;
      37: aload_0
      38: invokevirtual #656                // Method that:()Lscala/collection/parallel/SeqSplitter;
      41: invokeinterface #665,  1          // InterfaceMethod scala/collection/parallel/SeqSplitter.next:()Ljava/lang/Object;
      46: invokespecial #669                // Method scala/Tuple2."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
      49: goto          95
      52: new           #662                // class scala/Tuple2
      55: dup
      56: aload_0
      57: invokevirtual #652                // Method scala$collection$parallel$IterableSplitter$ZippedAll$$$outer:()Lscala/collection/parallel/IterableSplitter;
      60: invokeinterface #664,  1          // InterfaceMethod scala/collection/parallel/IterableSplitter.next:()Ljava/lang/Object;
      65: aload_0
      66: invokevirtual #671                // Method thatelem:()Ljava/lang/Object;
      69: invokespecial #669                // Method scala/Tuple2."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
      72: goto          95
      75: new           #662                // class scala/Tuple2
      78: dup
      79: aload_0
      80: invokevirtual #673                // Method thiselem:()Ljava/lang/Object;
      83: aload_0
      84: invokevirtual #656                // Method that:()Lscala/collection/parallel/SeqSplitter;
      87: invokeinterface #665,  1          // InterfaceMethod scala/collection/parallel/SeqSplitter.next:()Ljava/lang/Object;
      92: invokespecial #669                // Method scala/Tuple2."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
      95: areturn

  public int remaining();
    Code:
       0: getstatic     #680                // Field scala/runtime/RichInt$.MODULE$:Lscala/runtime/RichInt$;
       3: getstatic     #685                // Field scala/Predef$.MODULE$:Lscala/Predef$;
       6: aload_0
       7: invokevirtual #652                // Method scala$collection$parallel$IterableSplitter$ZippedAll$$$outer:()Lscala/collection/parallel/IterableSplitter;
      10: invokeinterface #687,  1          // InterfaceMethod scala/collection/parallel/IterableSplitter.remaining:()I
      15: istore_2
      16: astore_1
      17: iload_2
      18: aload_0
      19: invokevirtual #656                // Method that:()Lscala/collection/parallel/SeqSplitter;
      22: invokeinterface #688,  1          // InterfaceMethod scala/collection/parallel/SeqSplitter.remaining:()I
      27: invokevirtual #692                // Method scala/runtime/RichInt$.max$extension:(II)I
      30: ireturn

  public scala.collection.parallel.IterableSplitter<scala.Tuple2<U, S>> dup();
    Code:
       0: aload_0
       1: invokevirtual #652                // Method scala$collection$parallel$IterableSplitter$ZippedAll$$$outer:()Lscala/collection/parallel/IterableSplitter;
       4: invokeinterface #695,  1          // InterfaceMethod scala/collection/parallel/IterableSplitter.dup:()Lscala/collection/parallel/IterableSplitter;
       9: aload_0
      10: invokevirtual #656                // Method that:()Lscala/collection/parallel/SeqSplitter;
      13: aload_0
      14: invokevirtual #673                // Method thiselem:()Ljava/lang/Object;
      17: aload_0
      18: invokevirtual #671                // Method thatelem:()Ljava/lang/Object;
      21: invokeinterface #697,  4          // InterfaceMethod scala/collection/parallel/IterableSplitter.zipAllParSeq:(Lscala/collection/parallel/SeqSplitter;Ljava/lang/Object;Ljava/lang/Object;)Lscala/collection/parallel/IterableSplitter$ZippedAll;
      26: areturn

  public scala.collection.Seq<scala.collection.parallel.IterableSplitter<scala.Tuple2<U, S>>> split();
    Code:
       0: aload_0
       1: invokevirtual #652                // Method scala$collection$parallel$IterableSplitter$ZippedAll$$$outer:()Lscala/collection/parallel/IterableSplitter;
       4: invokeinterface #687,  1          // InterfaceMethod scala/collection/parallel/IterableSplitter.remaining:()I
       9: istore_1
      10: aload_0
      11: invokevirtual #656                // Method that:()Lscala/collection/parallel/SeqSplitter;
      14: invokeinterface #688,  1          // InterfaceMethod scala/collection/parallel/SeqSplitter.remaining:()I
      19: istore_2
      20: iload_1
      21: iload_2
      22: if_icmpge     53
      25: aload_0
      26: invokevirtual #652                // Method scala$collection$parallel$IterableSplitter$ZippedAll$$$outer:()Lscala/collection/parallel/IterableSplitter;
      29: getstatic     #703                // Field scala/collection/parallel/immutable/package$.MODULE$:Lscala/collection/parallel/immutable/package$;
      32: aload_0
      33: invokevirtual #673                // Method thiselem:()Ljava/lang/Object;
      36: iload_2
      37: iload_1
      38: isub
      39: invokevirtual #707                // Method scala/collection/parallel/immutable/package$.repetition:(Ljava/lang/Object;I)Lscala/collection/parallel/immutable/Repetition;
      42: invokevirtual #713                // Method scala/collection/parallel/immutable/Repetition.splitter:()Lscala/collection/parallel/immutable/Repetition$ParIterator;
      45: invokeinterface #715,  2          // InterfaceMethod scala/collection/parallel/IterableSplitter.appendParIterable:(Lscala/collection/parallel/IterableSplitter;)Lscala/collection/parallel/IterableSplitter$Appended;
      50: goto          57
      53: aload_0
      54: invokevirtual #652                // Method scala$collection$parallel$IterableSplitter$ZippedAll$$$outer:()Lscala/collection/parallel/IterableSplitter;
      57: astore_3
      58: iload_1
      59: iload_2
      60: if_icmple     91
      63: aload_0
      64: invokevirtual #656                // Method that:()Lscala/collection/parallel/SeqSplitter;
      67: getstatic     #703                // Field scala/collection/parallel/immutable/package$.MODULE$:Lscala/collection/parallel/immutable/package$;
      70: aload_0
      71: invokevirtual #671                // Method thatelem:()Ljava/lang/Object;
      74: iload_1
      75: iload_2
      76: isub
      77: invokevirtual #707                // Method scala/collection/parallel/immutable/package$.repetition:(Ljava/lang/Object;I)Lscala/collection/parallel/immutable/Repetition;
      80: invokevirtual #713                // Method scala/collection/parallel/immutable/Repetition.splitter:()Lscala/collection/parallel/immutable/Repetition$ParIterator;
      83: invokeinterface #719,  2          // InterfaceMethod scala/collection/parallel/SeqSplitter.appendParSeq:(Lscala/collection/parallel/SeqSplitter;)Lscala/collection/parallel/SeqSplitter$Appended;
      88: goto          95
      91: aload_0
      92: invokevirtual #656                // Method that:()Lscala/collection/parallel/SeqSplitter;
      95: astore        4
      97: aload_3
      98: aload         4
     100: invokeinterface #721,  2          // InterfaceMethod scala/collection/parallel/IterableSplitter.zipParSeq:(Lscala/collection/parallel/SeqSplitter;)Lscala/collection/parallel/IterableSplitter$Zipped;
     105: astore        5
     107: aload         5
     109: invokevirtual #725                // Method scala/collection/parallel/IterableSplitter$Zipped.split:()Lscala/collection/Seq;
     112: areturn

  public scala.collection.parallel.IterableSplitter scala$collection$parallel$IterableSplitter$ZippedAll$$$outer();
    Code:
       0: aload_0
       1: getfield      #733                // Field $outer:Lscala/collection/parallel/IterableSplitter;
       4: areturn

  public scala.collection.GenMap toMap(scala.Predef$$less$colon$less);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #736                // Method toMap:(Lscala/Predef$$less$colon$less;)Lscala/collection/immutable/Map;
       5: areturn

  public scala.collection.GenSet toSet();
    Code:
       0: aload_0
       1: invokevirtual #739                // Method toSet:()Lscala/collection/immutable/Set;
       4: areturn

  public scala.collection.GenSeq toSeq();
    Code:
       0: aload_0
       1: invokevirtual #742                // Method toSeq:()Lscala/collection/Seq;
       4: areturn

  public scala.collection.GenIterable toIterable();
    Code:
       0: aload_0
       1: invokevirtual #745                // Method toIterable:()Lscala/collection/Iterable;
       4: areturn

  public scala.collection.GenTraversable toTraversable();
    Code:
       0: aload_0
       1: invokevirtual #748                // Method toTraversable:()Lscala/collection/Traversable;
       4: areturn

  public scala.collection.TraversableOnce seq();
    Code:
       0: aload_0
       1: invokevirtual #751                // Method seq:()Lscala/collection/Iterator;
       4: areturn

  public scala.collection.Iterator map(scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #753                // Method map:(Lscala/Function1;)Lscala/collection/parallel/IterableSplitter$Mapped;
       5: areturn

  public scala.collection.Iterator slice(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokevirtual #756                // Method slice:(II)Lscala/collection/parallel/IterableSplitter;
       6: areturn

  public scala.collection.Iterator take(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #758                // Method take:(I)Lscala/collection/parallel/IterableSplitter;
       5: areturn

  public java.lang.Object next();
    Code:
       0: aload_0
       1: invokevirtual #760                // Method next:()Lscala/Tuple2;
       4: areturn

  public scala.collection.parallel.IterableSplitter$ZippedAll(scala.collection.parallel.IterableSplitter<T>, scala.collection.parallel.SeqSplitter<S>, U, S);
    Code:
       0: aload_0
       1: aload_2
       2: putfield      #642                // Field that:Lscala/collection/parallel/SeqSplitter;
       5: aload_0
       6: aload_3
       7: putfield      #645                // Field thiselem:Ljava/lang/Object;
      10: aload_0
      11: aload         4
      13: putfield      #647                // Field thatelem:Ljava/lang/Object;
      16: aload_1
      17: ifnonnull     22
      20: aconst_null
      21: athrow
      22: aload_0
      23: aload_1
      24: putfield      #733                // Field $outer:Lscala/collection/parallel/IterableSplitter;
      27: aload_0
      28: invokespecial #763                // Method java/lang/Object."<init>":()V
      31: aload_0
      32: invokestatic  #767                // Method scala/collection/TraversableOnce$class.$init$:(Lscala/collection/TraversableOnce;)V
      35: aload_0
      36: invokestatic  #770                // Method scala/collection/Iterator$class.$init$:(Lscala/collection/Iterator;)V
      39: aload_0
      40: invokestatic  #773                // Method scala/collection/parallel/RemainsIterator$class.$init$:(Lscala/collection/parallel/RemainsIterator;)V
      43: aload_0
      44: invokestatic  #776                // Method scala/collection/parallel/AugmentedIterableIterator$class.$init$:(Lscala/collection/parallel/AugmentedIterableIterator;)V
      47: aload_0
      48: invokestatic  #778                // Method scala/collection/generic/DelegatedSignalling$class.$init$:(Lscala/collection/generic/DelegatedSignalling;)V
      51: aload_0
      52: invokestatic  #781                // Method scala/collection/parallel/IterableSplitter$class.$init$:(Lscala/collection/parallel/IterableSplitter;)V
      55: aload_0
      56: aload_1
      57: invokeinterface #783,  1          // InterfaceMethod scala/collection/parallel/IterableSplitter.signalDelegate:()Lscala/collection/generic/Signalling;
      62: invokevirtual #785                // Method signalDelegate_$eq:(Lscala/collection/generic/Signalling;)V
      65: return
}
