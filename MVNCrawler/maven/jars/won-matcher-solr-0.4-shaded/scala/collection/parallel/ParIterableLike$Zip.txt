Compiled from "ParIterableLike.scala"
public class scala.collection.parallel.ParIterableLike$Zip<U, S, That> implements scala.collection.parallel.ParIterableLike<T, Repr, Sequential>.Transformer<scala.collection.parallel.Combiner<scala.Tuple2<U, S>, That>, scala.collection.parallel.ParIterableLike<T, Repr, Sequential>.Zip<U, S, That>> {
  public final scala.collection.parallel.CombinerFactory<scala.Tuple2<U, S>, That> scala$collection$parallel$ParIterableLike$Zip$$pbf;

  private final scala.collection.parallel.IterableSplitter<T> pit;

  private final scala.collection.parallel.SeqSplitter<S> othpit;

  private volatile scala.collection.parallel.Combiner<scala.Tuple2<U, S>, That> result;

  public final scala.collection.parallel.ParIterableLike $outer;

  private volatile java.lang.Throwable throwable;

  public java.lang.String scala$collection$parallel$ParIterableLike$Accessor$$super$toString();
    Code:
       0: aload_0
       1: invokespecial #29                 // Method java/lang/Object.toString:()Ljava/lang/String;
       4: areturn

  public boolean shouldSplitFurther();
    Code:
       0: aload_0
       1: invokestatic  #38                 // Method scala/collection/parallel/ParIterableLike$Accessor$class.shouldSplitFurther:(Lscala/collection/parallel/ParIterableLike$Accessor;)Z
       4: ireturn

  public void signalAbort();
    Code:
       0: aload_0
       1: invokestatic  #43                 // Method scala/collection/parallel/ParIterableLike$Accessor$class.signalAbort:(Lscala/collection/parallel/ParIterableLike$Accessor;)V
       4: return

  public java.lang.String toString();
    Code:
       0: aload_0
       1: invokestatic  #46                 // Method scala/collection/parallel/ParIterableLike$Accessor$class.toString:(Lscala/collection/parallel/ParIterableLike$Accessor;)Ljava/lang/String;
       4: areturn

  public java.lang.Throwable throwable();
    Code:
       0: aload_0
       1: getfield      #49                 // Field throwable:Ljava/lang/Throwable;
       4: areturn

  public void throwable_$eq(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #49                 // Field throwable:Ljava/lang/Throwable;
       5: return

  public java.lang.Object repr();
    Code:
       0: aload_0
       1: invokestatic  #59                 // Method scala/collection/parallel/Task$class.repr:(Lscala/collection/parallel/Task;)Ljava/lang/Object;
       4: areturn

  public void forwardThrowable();
    Code:
       0: aload_0
       1: invokestatic  #63                 // Method scala/collection/parallel/Task$class.forwardThrowable:(Lscala/collection/parallel/Task;)V
       4: return

  public void tryLeaf(scala.Option<scala.collection.parallel.Combiner<scala.Tuple2<U, S>, That>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #68                 // Method scala/collection/parallel/Task$class.tryLeaf:(Lscala/collection/parallel/Task;Lscala/Option;)V
       5: return

  public void tryMerge(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #75                 // Method scala/collection/parallel/Task$class.tryMerge:(Lscala/collection/parallel/Task;Ljava/lang/Object;)V
       5: return

  public void mergeThrowables(scala.collection.parallel.Task<?, ?>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #81                 // Method scala/collection/parallel/Task$class.mergeThrowables:(Lscala/collection/parallel/Task;Lscala/collection/parallel/Task;)V
       5: return

  public scala.collection.parallel.IterableSplitter<T> pit();
    Code:
       0: aload_0
       1: getfield      #86                 // Field pit:Lscala/collection/parallel/IterableSplitter;
       4: areturn

  public scala.collection.parallel.SeqSplitter<S> othpit();
    Code:
       0: aload_0
       1: getfield      #89                 // Field othpit:Lscala/collection/parallel/SeqSplitter;
       4: areturn

  public scala.collection.parallel.Combiner<scala.Tuple2<U, S>, That> result();
    Code:
       0: aload_0
       1: getfield      #92                 // Field result:Lscala/collection/parallel/Combiner;
       4: areturn

  public void result_$eq(scala.collection.parallel.Combiner<scala.Tuple2<U, S>, That>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #92                 // Field result:Lscala/collection/parallel/Combiner;
       5: return

  public void leaf(scala.Option<scala.collection.parallel.Combiner<scala.Tuple2<U, S>, That>>);
    Code:
       0: aload_0
       1: aload_0
       2: invokevirtual #97                 // Method pit:()Lscala/collection/parallel/IterableSplitter;
       5: aload_0
       6: invokevirtual #99                 // Method othpit:()Lscala/collection/parallel/SeqSplitter;
       9: aload_0
      10: getfield      #101                // Field scala$collection$parallel$ParIterableLike$Zip$$pbf:Lscala/collection/parallel/CombinerFactory;
      13: invokeinterface #106,  1          // InterfaceMethod scala/collection/parallel/CombinerFactory.apply:()Lscala/collection/parallel/Combiner;
      18: invokeinterface #112,  3          // InterfaceMethod scala/collection/parallel/IterableSplitter.zip2combiner:(Lscala/collection/parallel/RemainsIterator;Lscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
      23: invokevirtual #114                // Method result_$eq:(Lscala/collection/parallel/Combiner;)V
      26: return

  public scala.runtime.Nothing$ newSubtask(scala.collection.parallel.IterableSplitter<T>);
    Code:
       0: getstatic     #123                // Field scala/collection/parallel/package$.MODULE$:Lscala/collection/parallel/package$;
       3: invokevirtual #127                // Method scala/collection/parallel/package$.unsupported:()Lscala/runtime/Nothing$;
       6: areturn

  public scala.collection.Seq<scala.collection.parallel.Task<scala.collection.parallel.Combiner<scala.Tuple2<U, S>, That>, scala.collection.parallel.ParIterableLike<T, Repr, Sequential>.Zip<U, S, That>>> split();
    Code:
       0: aload_0
       1: invokevirtual #97                 // Method pit:()Lscala/collection/parallel/IterableSplitter;
       4: invokeinterface #133,  1          // InterfaceMethod scala/collection/parallel/IterableSplitter.splitWithSignalling:()Lscala/collection/Seq;
       9: astore_1
      10: aload_1
      11: new           #135                // class scala/collection/parallel/ParIterableLike$Zip$$anonfun$16
      14: dup
      15: aload_0
      16: invokespecial #139                // Method scala/collection/parallel/ParIterableLike$Zip$$anonfun$16."<init>":(Lscala/collection/parallel/ParIterableLike$Zip;)V
      19: getstatic     #144                // Field scala/collection/Seq$.MODULE$:Lscala/collection/Seq$;
      22: invokevirtual #148                // Method scala/collection/Seq$.canBuildFrom:()Lscala/collection/generic/CanBuildFrom;
      25: invokeinterface #154,  3          // InterfaceMethod scala/collection/Seq.map:(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
      30: checkcast     #150                // class scala/collection/Seq
      33: astore_2
      34: aload_0
      35: invokevirtual #99                 // Method othpit:()Lscala/collection/parallel/SeqSplitter;
      38: aload_2
      39: invokeinterface #160,  2          // InterfaceMethod scala/collection/parallel/SeqSplitter.psplitWithSignalling:(Lscala/collection/Seq;)Lscala/collection/Seq;
      44: astore_3
      45: aload_1
      46: aload_3
      47: getstatic     #144                // Field scala/collection/Seq$.MODULE$:Lscala/collection/Seq$;
      50: invokevirtual #148                // Method scala/collection/Seq$.canBuildFrom:()Lscala/collection/generic/CanBuildFrom;
      53: invokeinterface #164,  3          // InterfaceMethod scala/collection/Seq.zip:(Lscala/collection/GenIterable;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
      58: checkcast     #166                // class scala/collection/TraversableLike
      61: new           #168                // class scala/collection/parallel/ParIterableLike$Zip$$anonfun$split$19
      64: dup
      65: aload_0
      66: invokespecial #169                // Method scala/collection/parallel/ParIterableLike$Zip$$anonfun$split$19."<init>":(Lscala/collection/parallel/ParIterableLike$Zip;)V
      69: getstatic     #144                // Field scala/collection/Seq$.MODULE$:Lscala/collection/Seq$;
      72: invokevirtual #148                // Method scala/collection/Seq$.canBuildFrom:()Lscala/collection/generic/CanBuildFrom;
      75: invokeinterface #170,  3          // InterfaceMethod scala/collection/TraversableLike.map:(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
      80: checkcast     #150                // class scala/collection/Seq
      83: areturn

  public void merge(scala.collection.parallel.ParIterableLike<T, Repr, Sequential>.Zip<U, S, That>);
    Code:
       0: aload_0
       1: aload_0
       2: invokevirtual #177                // Method result:()Lscala/collection/parallel/Combiner;
       5: aload_1
       6: invokevirtual #177                // Method result:()Lscala/collection/parallel/Combiner;
       9: invokeinterface #183,  2          // InterfaceMethod scala/collection/parallel/Combiner.combine:(Lscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
      14: invokevirtual #114                // Method result_$eq:(Lscala/collection/parallel/Combiner;)V
      17: return

  public boolean requiresStrictSplitters();
    Code:
       0: iconst_1
       1: ireturn

  public scala.collection.parallel.ParIterableLike scala$collection$parallel$ParIterableLike$Zip$$$outer();
    Code:
       0: aload_0
       1: getfield      #188                // Field $outer:Lscala/collection/parallel/ParIterableLike;
       4: areturn

  public scala.collection.parallel.ParIterableLike scala$collection$parallel$ParIterableLike$Accessor$$$outer();
    Code:
       0: aload_0
       1: invokevirtual #191                // Method scala$collection$parallel$ParIterableLike$Zip$$$outer:()Lscala/collection/parallel/ParIterableLike;
       4: areturn

  public scala.collection.parallel.ParIterableLike scala$collection$parallel$ParIterableLike$StrictSplitterCheckTask$$$outer();
    Code:
       0: aload_0
       1: invokevirtual #191                // Method scala$collection$parallel$ParIterableLike$Zip$$$outer:()Lscala/collection/parallel/ParIterableLike;
       4: areturn

  public void merge(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #2                  // class scala/collection/parallel/ParIterableLike$Zip
       5: invokevirtual #194                // Method merge:(Lscala/collection/parallel/ParIterableLike$Zip;)V
       8: return

  public scala.collection.parallel.ParIterableLike$Accessor newSubtask(scala.collection.parallel.IterableSplitter);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #197                // Method newSubtask:(Lscala/collection/parallel/IterableSplitter;)Lscala/runtime/Nothing$;
       5: athrow

  public void result_$eq(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #179                // class scala/collection/parallel/Combiner
       5: invokevirtual #114                // Method result_$eq:(Lscala/collection/parallel/Combiner;)V
       8: return

  public java.lang.Object result();
    Code:
       0: aload_0
       1: invokevirtual #177                // Method result:()Lscala/collection/parallel/Combiner;
       4: areturn

  public scala.collection.parallel.ParIterableLike$Zip(scala.collection.parallel.ParIterableLike<T, Repr, Sequential>, scala.collection.parallel.CombinerFactory<scala.Tuple2<U, S>, That>, scala.collection.parallel.IterableSplitter<T>, scala.collection.parallel.SeqSplitter<S>);
    Code:
       0: aload_0
       1: aload_2
       2: putfield      #101                // Field scala$collection$parallel$ParIterableLike$Zip$$pbf:Lscala/collection/parallel/CombinerFactory;
       5: aload_0
       6: aload_3
       7: putfield      #86                 // Field pit:Lscala/collection/parallel/IterableSplitter;
      10: aload_0
      11: aload         4
      13: putfield      #89                 // Field othpit:Lscala/collection/parallel/SeqSplitter;
      16: aload_1
      17: ifnonnull     22
      20: aconst_null
      21: athrow
      22: aload_0
      23: aload_1
      24: putfield      #188                // Field $outer:Lscala/collection/parallel/ParIterableLike;
      27: aload_0
      28: invokespecial #200                // Method java/lang/Object."<init>":()V
      31: aload_0
      32: invokestatic  #203                // Method scala/collection/parallel/Task$class.$init$:(Lscala/collection/parallel/Task;)V
      35: aload_0
      36: invokestatic  #208                // Method scala/collection/parallel/ParIterableLike$StrictSplitterCheckTask$class.$init$:(Lscala/collection/parallel/ParIterableLike$StrictSplitterCheckTask;)V
      39: aload_0
      40: invokestatic  #210                // Method scala/collection/parallel/ParIterableLike$Accessor$class.$init$:(Lscala/collection/parallel/ParIterableLike$Accessor;)V
      43: aload_0
      44: aconst_null
      45: putfield      #92                 // Field result:Lscala/collection/parallel/Combiner;
      48: return
}
