Compiled from "ParHashTable.scala"
public abstract class scala.collection.parallel.mutable.ParHashTable$EntryIterator<T, IterRepr extends scala.collection.parallel.IterableSplitter<T>> implements scala.collection.parallel.IterableSplitter<T>, scala.collection.parallel.mutable.SizeMapUtils {
  private int scala$collection$parallel$mutable$ParHashTable$EntryIterator$$idx;

  private final int scala$collection$parallel$mutable$ParHashTable$EntryIterator$$until;

  private final int scala$collection$parallel$mutable$ParHashTable$EntryIterator$$totalsize;

  private Entry scala$collection$parallel$mutable$ParHashTable$EntryIterator$$es;

  private final scala.collection.mutable.HashEntry<K, Entry>[] scala$collection$parallel$mutable$ParHashTable$EntryIterator$$itertable;

  private int scala$collection$parallel$mutable$ParHashTable$EntryIterator$$traversed;

  public final scala.collection.parallel.mutable.ParHashTable $outer;

  private scala.collection.generic.Signalling signalDelegate;

  public int calcNumElems(int, int, int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: iload_3
       4: iload         4
       6: invokestatic  #32                 // Method scala/collection/parallel/mutable/SizeMapUtils$class.calcNumElems:(Lscala/collection/parallel/mutable/SizeMapUtils;IIII)I
       9: ireturn

  public scala.collection.generic.Signalling signalDelegate();
    Code:
       0: aload_0
       1: getfield      #41                 // Field signalDelegate:Lscala/collection/generic/Signalling;
       4: areturn

  public void signalDelegate_$eq(scala.collection.generic.Signalling);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #41                 // Field signalDelegate:Lscala/collection/generic/Signalling;
       5: return

  public scala.collection.Seq<scala.collection.parallel.IterableSplitter<T>> splitWithSignalling();
    Code:
       0: aload_0
       1: invokestatic  #52                 // Method scala/collection/parallel/IterableSplitter$class.splitWithSignalling:(Lscala/collection/parallel/IterableSplitter;)Lscala/collection/Seq;
       4: areturn

  public <S> boolean shouldSplitFurther(scala.collection.parallel.ParIterable<S>, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #57                 // Method scala/collection/parallel/IterableSplitter$class.shouldSplitFurther:(Lscala/collection/parallel/IterableSplitter;Lscala/collection/parallel/ParIterable;I)Z
       6: ireturn

  public java.lang.String buildString(scala.Function1<scala.Function1<java.lang.String, scala.runtime.BoxedUnit>, scala.runtime.BoxedUnit>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #65                 // Method scala/collection/parallel/IterableSplitter$class.buildString:(Lscala/collection/parallel/IterableSplitter;Lscala/Function1;)Ljava/lang/String;
       5: areturn

  public scala.collection.parallel.IterableSplitter<T>.Taken newTaken(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #72                 // Method scala/collection/parallel/IterableSplitter$class.newTaken:(Lscala/collection/parallel/IterableSplitter;I)Lscala/collection/parallel/IterableSplitter$Taken;
       5: areturn

  public <U extends scala.collection.parallel.IterableSplitter<T>.Taken> U newSliceInternal(U, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #77                 // Method scala/collection/parallel/IterableSplitter$class.newSliceInternal:(Lscala/collection/parallel/IterableSplitter;Lscala/collection/parallel/IterableSplitter$Taken;I)Lscala/collection/parallel/IterableSplitter$Taken;
       6: areturn

  public scala.collection.parallel.IterableSplitter<T> take(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #85                 // Method scala/collection/parallel/IterableSplitter$class.take:(Lscala/collection/parallel/IterableSplitter;I)Lscala/collection/parallel/IterableSplitter;
       5: areturn

  public scala.collection.parallel.IterableSplitter<T> slice(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokestatic  #91                 // Method scala/collection/parallel/IterableSplitter$class.slice:(Lscala/collection/parallel/IterableSplitter;II)Lscala/collection/parallel/IterableSplitter;
       6: areturn

  public <S> scala.collection.parallel.IterableSplitter<T>.Mapped<S> map(scala.Function1<T, S>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #97                 // Method scala/collection/parallel/IterableSplitter$class.map:(Lscala/collection/parallel/IterableSplitter;Lscala/Function1;)Lscala/collection/parallel/IterableSplitter$Mapped;
       5: areturn

  public <U, PI extends scala.collection.parallel.IterableSplitter<U>> scala.collection.parallel.IterableSplitter<T>.Appended<U, PI> appendParIterable(PI);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #103                // Method scala/collection/parallel/IterableSplitter$class.appendParIterable:(Lscala/collection/parallel/IterableSplitter;Lscala/collection/parallel/IterableSplitter;)Lscala/collection/parallel/IterableSplitter$Appended;
       5: areturn

  public <S> scala.collection.parallel.IterableSplitter<T>.Zipped<S> zipParSeq(scala.collection.parallel.SeqSplitter<S>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #110                // Method scala/collection/parallel/IterableSplitter$class.zipParSeq:(Lscala/collection/parallel/IterableSplitter;Lscala/collection/parallel/SeqSplitter;)Lscala/collection/parallel/IterableSplitter$Zipped;
       5: areturn

  public <S, U, R> scala.collection.parallel.IterableSplitter<T>.ZippedAll<U, R> zipAllParSeq(scala.collection.parallel.SeqSplitter<S>, U, R);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #116                // Method scala/collection/parallel/IterableSplitter$class.zipAllParSeq:(Lscala/collection/parallel/IterableSplitter;Lscala/collection/parallel/SeqSplitter;Ljava/lang/Object;Ljava/lang/Object;)Lscala/collection/parallel/IterableSplitter$ZippedAll;
       7: areturn

  public boolean isAborted();
    Code:
       0: aload_0
       1: invokestatic  #126                // Method scala/collection/generic/DelegatedSignalling$class.isAborted:(Lscala/collection/generic/DelegatedSignalling;)Z
       4: ireturn

  public void abort();
    Code:
       0: aload_0
       1: invokestatic  #131                // Method scala/collection/generic/DelegatedSignalling$class.abort:(Lscala/collection/generic/DelegatedSignalling;)V
       4: return

  public int indexFlag();
    Code:
       0: aload_0
       1: invokestatic  #136                // Method scala/collection/generic/DelegatedSignalling$class.indexFlag:(Lscala/collection/generic/DelegatedSignalling;)I
       4: ireturn

  public void setIndexFlag(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #141                // Method scala/collection/generic/DelegatedSignalling$class.setIndexFlag:(Lscala/collection/generic/DelegatedSignalling;I)V
       5: return

  public void setIndexFlagIfGreater(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #144                // Method scala/collection/generic/DelegatedSignalling$class.setIndexFlagIfGreater:(Lscala/collection/generic/DelegatedSignalling;I)V
       5: return

  public void setIndexFlagIfLesser(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #147                // Method scala/collection/generic/DelegatedSignalling$class.setIndexFlagIfLesser:(Lscala/collection/generic/DelegatedSignalling;I)V
       5: return

  public int tag();
    Code:
       0: aload_0
       1: invokestatic  #150                // Method scala/collection/generic/DelegatedSignalling$class.tag:(Lscala/collection/generic/DelegatedSignalling;)I
       4: ireturn

  public int count(scala.Function1<T, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #157                // Method scala/collection/parallel/AugmentedIterableIterator$class.count:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/Function1;)I
       5: ireturn

  public <U> U reduce(scala.Function2<U, U, U>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #163                // Method scala/collection/parallel/AugmentedIterableIterator$class.reduce:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/Function2;)Ljava/lang/Object;
       5: areturn

  public <U> U fold(U, scala.Function2<U, U, U>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #170                // Method scala/collection/parallel/AugmentedIterableIterator$class.fold:(Lscala/collection/parallel/AugmentedIterableIterator;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
       6: areturn

  public <U> U sum(scala.math.Numeric<U>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #176                // Method scala/collection/parallel/AugmentedIterableIterator$class.sum:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/math/Numeric;)Ljava/lang/Object;
       5: areturn

  public <U> U product(scala.math.Numeric<U>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #181                // Method scala/collection/parallel/AugmentedIterableIterator$class.product:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/math/Numeric;)Ljava/lang/Object;
       5: areturn

  public <U> T min(scala.math.Ordering<U>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #186                // Method scala/collection/parallel/AugmentedIterableIterator$class.min:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/math/Ordering;)Ljava/lang/Object;
       5: areturn

  public <U> T max(scala.math.Ordering<U>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #191                // Method scala/collection/parallel/AugmentedIterableIterator$class.max:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/math/Ordering;)Ljava/lang/Object;
       5: areturn

  public <U> void copyToArray(java.lang.Object, int, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: invokestatic  #196                // Method scala/collection/parallel/AugmentedIterableIterator$class.copyToArray:(Lscala/collection/parallel/AugmentedIterableIterator;Ljava/lang/Object;II)V
       7: return

  public <U> U reduceLeft(int, scala.Function2<U, U, U>);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokestatic  #203                // Method scala/collection/parallel/AugmentedIterableIterator$class.reduceLeft:(Lscala/collection/parallel/AugmentedIterableIterator;ILscala/Function2;)Ljava/lang/Object;
       6: areturn

  public <S, That> scala.collection.parallel.Combiner<S, That> map2combiner(scala.Function1<T, S>, scala.collection.parallel.Combiner<S, That>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #209                // Method scala/collection/parallel/AugmentedIterableIterator$class.map2combiner:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/Function1;Lscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
       6: areturn

  public <S, That> scala.collection.parallel.Combiner<S, That> collect2combiner(scala.PartialFunction<T, S>, scala.collection.parallel.Combiner<S, That>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #216                // Method scala/collection/parallel/AugmentedIterableIterator$class.collect2combiner:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/PartialFunction;Lscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
       6: areturn

  public <S, That> scala.collection.parallel.Combiner<S, That> flatmap2combiner(scala.Function1<T, scala.collection.GenTraversableOnce<S>>, scala.collection.parallel.Combiner<S, That>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #221                // Method scala/collection/parallel/AugmentedIterableIterator$class.flatmap2combiner:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/Function1;Lscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
       6: areturn

  public <U, Coll, Bld extends scala.collection.mutable.Builder<U, Coll>> Bld copy2builder(Bld);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #226                // Method scala/collection/parallel/AugmentedIterableIterator$class.copy2builder:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/collection/mutable/Builder;)Lscala/collection/mutable/Builder;
       5: areturn

  public <U, This> scala.collection.parallel.Combiner<U, This> filter2combiner(scala.Function1<T, java.lang.Object>, scala.collection.parallel.Combiner<U, This>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #231                // Method scala/collection/parallel/AugmentedIterableIterator$class.filter2combiner:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/Function1;Lscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
       6: areturn

  public <U, This> scala.collection.parallel.Combiner<U, This> filterNot2combiner(scala.Function1<T, java.lang.Object>, scala.collection.parallel.Combiner<U, This>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #235                // Method scala/collection/parallel/AugmentedIterableIterator$class.filterNot2combiner:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/Function1;Lscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
       6: areturn

  public <U, This> scala.Tuple2<scala.collection.parallel.Combiner<U, This>, scala.collection.parallel.Combiner<U, This>> partition2combiners(scala.Function1<T, java.lang.Object>, scala.collection.parallel.Combiner<U, This>, scala.collection.parallel.Combiner<U, This>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #240                // Method scala/collection/parallel/AugmentedIterableIterator$class.partition2combiners:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/Function1;Lscala/collection/parallel/Combiner;Lscala/collection/parallel/Combiner;)Lscala/Tuple2;
       7: areturn

  public <U, This> scala.collection.parallel.Combiner<U, This> take2combiner(int, scala.collection.parallel.Combiner<U, This>);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokestatic  #247                // Method scala/collection/parallel/AugmentedIterableIterator$class.take2combiner:(Lscala/collection/parallel/AugmentedIterableIterator;ILscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
       6: areturn

  public <U, This> scala.collection.parallel.Combiner<U, This> drop2combiner(int, scala.collection.parallel.Combiner<U, This>);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokestatic  #250                // Method scala/collection/parallel/AugmentedIterableIterator$class.drop2combiner:(Lscala/collection/parallel/AugmentedIterableIterator;ILscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
       6: areturn

  public <U, This> scala.collection.parallel.Combiner<U, This> slice2combiner(int, int, scala.collection.parallel.Combiner<U, This>);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: aload_3
       4: invokestatic  #255                // Method scala/collection/parallel/AugmentedIterableIterator$class.slice2combiner:(Lscala/collection/parallel/AugmentedIterableIterator;IILscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
       7: areturn

  public <U, This> scala.Tuple2<scala.collection.parallel.Combiner<U, This>, scala.collection.parallel.Combiner<U, This>> splitAt2combiners(int, scala.collection.parallel.Combiner<U, This>, scala.collection.parallel.Combiner<U, This>);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #260                // Method scala/collection/parallel/AugmentedIterableIterator$class.splitAt2combiners:(Lscala/collection/parallel/AugmentedIterableIterator;ILscala/collection/parallel/Combiner;Lscala/collection/parallel/Combiner;)Lscala/Tuple2;
       7: areturn

  public <U, This> scala.Tuple2<scala.collection.parallel.Combiner<U, This>, java.lang.Object> takeWhile2combiner(scala.Function1<T, java.lang.Object>, scala.collection.parallel.Combiner<U, This>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #268                // Method scala/collection/parallel/AugmentedIterableIterator$class.takeWhile2combiner:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/Function1;Lscala/collection/parallel/Combiner;)Lscala/Tuple2;
       6: areturn

  public <U, This> scala.Tuple2<scala.collection.parallel.Combiner<U, This>, scala.collection.parallel.Combiner<U, This>> span2combiners(scala.Function1<T, java.lang.Object>, scala.collection.parallel.Combiner<U, This>, scala.collection.parallel.Combiner<U, This>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #271                // Method scala/collection/parallel/AugmentedIterableIterator$class.span2combiners:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/Function1;Lscala/collection/parallel/Combiner;Lscala/collection/parallel/Combiner;)Lscala/Tuple2;
       7: areturn

  public <U, A> void scanToArray(U, scala.Function2<U, U, U>, java.lang.Object, int);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: iload         4
       6: invokestatic  #276                // Method scala/collection/parallel/AugmentedIterableIterator$class.scanToArray:(Lscala/collection/parallel/AugmentedIterableIterator;Ljava/lang/Object;Lscala/Function2;Ljava/lang/Object;I)V
       9: return

  public <U, That> scala.collection.parallel.Combiner<U, That> scanToCombiner(U, scala.Function2<U, U, U>, scala.collection.parallel.Combiner<U, That>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #281                // Method scala/collection/parallel/AugmentedIterableIterator$class.scanToCombiner:(Lscala/collection/parallel/AugmentedIterableIterator;Ljava/lang/Object;Lscala/Function2;Lscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
       7: areturn

  public <U, That> scala.collection.parallel.Combiner<U, That> scanToCombiner(int, U, scala.Function2<U, U, U>, scala.collection.parallel.Combiner<U, That>);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #286                // Method scala/collection/parallel/AugmentedIterableIterator$class.scanToCombiner:(Lscala/collection/parallel/AugmentedIterableIterator;ILjava/lang/Object;Lscala/Function2;Lscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
       9: areturn

  public <U, S, That> scala.collection.parallel.Combiner<scala.Tuple2<U, S>, That> zip2combiner(scala.collection.parallel.RemainsIterator<S>, scala.collection.parallel.Combiner<scala.Tuple2<U, S>, That>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #291                // Method scala/collection/parallel/AugmentedIterableIterator$class.zip2combiner:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/collection/parallel/RemainsIterator;Lscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
       6: areturn

  public <U, S, That> scala.collection.parallel.Combiner<scala.Tuple2<U, S>, That> zipAll2combiner(scala.collection.parallel.RemainsIterator<S>, U, S, scala.collection.parallel.Combiner<scala.Tuple2<U, S>, That>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #298                // Method scala/collection/parallel/AugmentedIterableIterator$class.zipAll2combiner:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/collection/parallel/RemainsIterator;Ljava/lang/Object;Ljava/lang/Object;Lscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
       9: areturn

  public boolean isRemainingCheap();
    Code:
       0: aload_0
       1: invokestatic  #306                // Method scala/collection/parallel/RemainsIterator$class.isRemainingCheap:(Lscala/collection/parallel/RemainsIterator;)Z
       4: ireturn

  public scala.collection.Iterator<T> seq();
    Code:
       0: aload_0
       1: invokestatic  #313                // Method scala/collection/Iterator$class.seq:(Lscala/collection/Iterator;)Lscala/collection/Iterator;
       4: areturn

  public boolean isEmpty();
    Code:
       0: aload_0
       1: invokestatic  #317                // Method scala/collection/Iterator$class.isEmpty:(Lscala/collection/Iterator;)Z
       4: ireturn

  public boolean isTraversableAgain();
    Code:
       0: aload_0
       1: invokestatic  #320                // Method scala/collection/Iterator$class.isTraversableAgain:(Lscala/collection/Iterator;)Z
       4: ireturn

  public boolean hasDefiniteSize();
    Code:
       0: aload_0
       1: invokestatic  #323                // Method scala/collection/Iterator$class.hasDefiniteSize:(Lscala/collection/Iterator;)Z
       4: ireturn

  public scala.collection.Iterator<T> drop(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #328                // Method scala/collection/Iterator$class.drop:(Lscala/collection/Iterator;I)Lscala/collection/Iterator;
       5: areturn

  public <B> scala.collection.Iterator<B> $plus$plus(scala.Function0<scala.collection.GenTraversableOnce<B>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #333                // Method scala/collection/Iterator$class.$plus$plus:(Lscala/collection/Iterator;Lscala/Function0;)Lscala/collection/Iterator;
       5: areturn

  public <B> scala.collection.Iterator<B> flatMap(scala.Function1<T, scala.collection.GenTraversableOnce<B>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #339                // Method scala/collection/Iterator$class.flatMap:(Lscala/collection/Iterator;Lscala/Function1;)Lscala/collection/Iterator;
       5: areturn

  public scala.collection.Iterator<T> filter(scala.Function1<T, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #342                // Method scala/collection/Iterator$class.filter:(Lscala/collection/Iterator;Lscala/Function1;)Lscala/collection/Iterator;
       5: areturn

  public <B> boolean corresponds(scala.collection.GenTraversableOnce<B>, scala.Function2<T, B, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #347                // Method scala/collection/Iterator$class.corresponds:(Lscala/collection/Iterator;Lscala/collection/GenTraversableOnce;Lscala/Function2;)Z
       6: ireturn

  public scala.collection.Iterator<T> withFilter(scala.Function1<T, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #351                // Method scala/collection/Iterator$class.withFilter:(Lscala/collection/Iterator;Lscala/Function1;)Lscala/collection/Iterator;
       5: areturn

  public scala.collection.Iterator<T> filterNot(scala.Function1<T, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #354                // Method scala/collection/Iterator$class.filterNot:(Lscala/collection/Iterator;Lscala/Function1;)Lscala/collection/Iterator;
       5: areturn

  public <B> scala.collection.Iterator<B> collect(scala.PartialFunction<T, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #359                // Method scala/collection/Iterator$class.collect:(Lscala/collection/Iterator;Lscala/PartialFunction;)Lscala/collection/Iterator;
       5: areturn

  public <B> scala.collection.Iterator<B> scanLeft(B, scala.Function2<B, T, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #364                // Method scala/collection/Iterator$class.scanLeft:(Lscala/collection/Iterator;Ljava/lang/Object;Lscala/Function2;)Lscala/collection/Iterator;
       6: areturn

  public <B> scala.collection.Iterator<B> scanRight(B, scala.Function2<T, B, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #367                // Method scala/collection/Iterator$class.scanRight:(Lscala/collection/Iterator;Ljava/lang/Object;Lscala/Function2;)Lscala/collection/Iterator;
       6: areturn

  public scala.collection.Iterator<T> takeWhile(scala.Function1<T, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #370                // Method scala/collection/Iterator$class.takeWhile:(Lscala/collection/Iterator;Lscala/Function1;)Lscala/collection/Iterator;
       5: areturn

  public scala.Tuple2<scala.collection.Iterator<T>, scala.collection.Iterator<T>> partition(scala.Function1<T, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #375                // Method scala/collection/Iterator$class.partition:(Lscala/collection/Iterator;Lscala/Function1;)Lscala/Tuple2;
       5: areturn

  public scala.Tuple2<scala.collection.Iterator<T>, scala.collection.Iterator<T>> span(scala.Function1<T, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #378                // Method scala/collection/Iterator$class.span:(Lscala/collection/Iterator;Lscala/Function1;)Lscala/Tuple2;
       5: areturn

  public scala.collection.Iterator<T> dropWhile(scala.Function1<T, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #381                // Method scala/collection/Iterator$class.dropWhile:(Lscala/collection/Iterator;Lscala/Function1;)Lscala/collection/Iterator;
       5: areturn

  public <B> scala.collection.Iterator<scala.Tuple2<T, B>> zip(scala.collection.Iterator<B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #385                // Method scala/collection/Iterator$class.zip:(Lscala/collection/Iterator;Lscala/collection/Iterator;)Lscala/collection/Iterator;
       5: areturn

  public <A1> scala.collection.Iterator<A1> padTo(int, A1);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokestatic  #391                // Method scala/collection/Iterator$class.padTo:(Lscala/collection/Iterator;ILjava/lang/Object;)Lscala/collection/Iterator;
       6: areturn

  public scala.collection.Iterator<scala.Tuple2<T, java.lang.Object>> zipWithIndex();
    Code:
       0: aload_0
       1: invokestatic  #395                // Method scala/collection/Iterator$class.zipWithIndex:(Lscala/collection/Iterator;)Lscala/collection/Iterator;
       4: areturn

  public <B, A1, B1> scala.collection.Iterator<scala.Tuple2<A1, B1>> zipAll(scala.collection.Iterator<B>, A1, B1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #400                // Method scala/collection/Iterator$class.zipAll:(Lscala/collection/Iterator;Lscala/collection/Iterator;Ljava/lang/Object;Ljava/lang/Object;)Lscala/collection/Iterator;
       7: areturn

  public <U> void foreach(scala.Function1<T, U>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #405                // Method scala/collection/Iterator$class.foreach:(Lscala/collection/Iterator;Lscala/Function1;)V
       5: return

  public boolean forall(scala.Function1<T, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #410                // Method scala/collection/Iterator$class.forall:(Lscala/collection/Iterator;Lscala/Function1;)Z
       5: ireturn

  public boolean exists(scala.Function1<T, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #413                // Method scala/collection/Iterator$class.exists:(Lscala/collection/Iterator;Lscala/Function1;)Z
       5: ireturn

  public boolean contains(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #418                // Method scala/collection/Iterator$class.contains:(Lscala/collection/Iterator;Ljava/lang/Object;)Z
       5: ireturn

  public scala.Option<T> find(scala.Function1<T, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #423                // Method scala/collection/Iterator$class.find:(Lscala/collection/Iterator;Lscala/Function1;)Lscala/Option;
       5: areturn

  public int indexWhere(scala.Function1<T, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #427                // Method scala/collection/Iterator$class.indexWhere:(Lscala/collection/Iterator;Lscala/Function1;)I
       5: ireturn

  public <B> int indexOf(B);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #432                // Method scala/collection/Iterator$class.indexOf:(Lscala/collection/Iterator;Ljava/lang/Object;)I
       5: ireturn

  public scala.collection.BufferedIterator<T> buffered();
    Code:
       0: aload_0
       1: invokestatic  #437                // Method scala/collection/Iterator$class.buffered:(Lscala/collection/Iterator;)Lscala/collection/BufferedIterator;
       4: areturn

  public <B> scala.collection.Iterator<T>.GroupedIterator<B> grouped(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #442                // Method scala/collection/Iterator$class.grouped:(Lscala/collection/Iterator;I)Lscala/collection/Iterator$GroupedIterator;
       5: areturn

  public <B> scala.collection.Iterator<T>.GroupedIterator<B> sliding(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokestatic  #448                // Method scala/collection/Iterator$class.sliding:(Lscala/collection/Iterator;II)Lscala/collection/Iterator$GroupedIterator;
       6: areturn

  public int length();
    Code:
       0: aload_0
       1: invokestatic  #453                // Method scala/collection/Iterator$class.length:(Lscala/collection/Iterator;)I
       4: ireturn

  public scala.Tuple2<scala.collection.Iterator<T>, scala.collection.Iterator<T>> duplicate();
    Code:
       0: aload_0
       1: invokestatic  #458                // Method scala/collection/Iterator$class.duplicate:(Lscala/collection/Iterator;)Lscala/Tuple2;
       4: areturn

  public <B> scala.collection.Iterator<B> patch(int, scala.collection.Iterator<B>, int);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: iload_3
       4: invokestatic  #463                // Method scala/collection/Iterator$class.patch:(Lscala/collection/Iterator;ILscala/collection/Iterator;I)Lscala/collection/Iterator;
       7: areturn

  public boolean sameElements(scala.collection.Iterator<?>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #469                // Method scala/collection/Iterator$class.sameElements:(Lscala/collection/Iterator;Lscala/collection/Iterator;)Z
       5: ireturn

  public scala.collection.Traversable<T> toTraversable();
    Code:
       0: aload_0
       1: invokestatic  #474                // Method scala/collection/Iterator$class.toTraversable:(Lscala/collection/Iterator;)Lscala/collection/Traversable;
       4: areturn

  public scala.collection.Iterator<T> toIterator();
    Code:
       0: aload_0
       1: invokestatic  #477                // Method scala/collection/Iterator$class.toIterator:(Lscala/collection/Iterator;)Lscala/collection/Iterator;
       4: areturn

  public scala.collection.immutable.Stream<T> toStream();
    Code:
       0: aload_0
       1: invokestatic  #482                // Method scala/collection/Iterator$class.toStream:(Lscala/collection/Iterator;)Lscala/collection/immutable/Stream;
       4: areturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: invokestatic  #487                // Method scala/collection/Iterator$class.toString:(Lscala/collection/Iterator;)Ljava/lang/String;
       4: areturn

  public <B> int sliding$default$2();
    Code:
       0: aload_0
       1: invokestatic  #490                // Method scala/collection/Iterator$class.sliding$default$2:(Lscala/collection/Iterator;)I
       4: ireturn

  public scala.collection.immutable.List<T> reversed();
    Code:
       0: aload_0
       1: invokestatic  #497                // Method scala/collection/TraversableOnce$class.reversed:(Lscala/collection/TraversableOnce;)Lscala/collection/immutable/List;
       4: areturn

  public int size();
    Code:
       0: aload_0
       1: invokestatic  #500                // Method scala/collection/TraversableOnce$class.size:(Lscala/collection/TraversableOnce;)I
       4: ireturn

  public boolean nonEmpty();
    Code:
       0: aload_0
       1: invokestatic  #504                // Method scala/collection/TraversableOnce$class.nonEmpty:(Lscala/collection/TraversableOnce;)Z
       4: ireturn

  public <B> scala.Option<B> collectFirst(scala.PartialFunction<T, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #509                // Method scala/collection/TraversableOnce$class.collectFirst:(Lscala/collection/TraversableOnce;Lscala/PartialFunction;)Lscala/Option;
       5: areturn

  public <B> B $div$colon(B, scala.Function2<B, T, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #513                // Method scala/collection/TraversableOnce$class.$div$colon:(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
       6: areturn

  public <B> B $colon$bslash(B, scala.Function2<T, B, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #516                // Method scala/collection/TraversableOnce$class.$colon$bslash:(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
       6: areturn

  public <B> B foldLeft(B, scala.Function2<B, T, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #519                // Method scala/collection/TraversableOnce$class.foldLeft:(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
       6: areturn

  public <B> B foldRight(B, scala.Function2<T, B, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #522                // Method scala/collection/TraversableOnce$class.foldRight:(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
       6: areturn

  public <B> B reduceLeft(scala.Function2<B, T, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #525                // Method scala/collection/TraversableOnce$class.reduceLeft:(Lscala/collection/TraversableOnce;Lscala/Function2;)Ljava/lang/Object;
       5: areturn

  public <B> B reduceRight(scala.Function2<T, B, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #528                // Method scala/collection/TraversableOnce$class.reduceRight:(Lscala/collection/TraversableOnce;Lscala/Function2;)Ljava/lang/Object;
       5: areturn

  public <B> scala.Option<B> reduceLeftOption(scala.Function2<B, T, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #533                // Method scala/collection/TraversableOnce$class.reduceLeftOption:(Lscala/collection/TraversableOnce;Lscala/Function2;)Lscala/Option;
       5: areturn

  public <B> scala.Option<B> reduceRightOption(scala.Function2<T, B, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #536                // Method scala/collection/TraversableOnce$class.reduceRightOption:(Lscala/collection/TraversableOnce;Lscala/Function2;)Lscala/Option;
       5: areturn

  public <A1> scala.Option<A1> reduceOption(scala.Function2<A1, A1, A1>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #539                // Method scala/collection/TraversableOnce$class.reduceOption:(Lscala/collection/TraversableOnce;Lscala/Function2;)Lscala/Option;
       5: areturn

  public <B> B aggregate(scala.Function0<B>, scala.Function2<B, T, B>, scala.Function2<B, B, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #544                // Method scala/collection/TraversableOnce$class.aggregate:(Lscala/collection/TraversableOnce;Lscala/Function0;Lscala/Function2;Lscala/Function2;)Ljava/lang/Object;
       7: areturn

  public <B> T maxBy(scala.Function1<T, B>, scala.math.Ordering<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #551                // Method scala/collection/TraversableOnce$class.maxBy:(Lscala/collection/TraversableOnce;Lscala/Function1;Lscala/math/Ordering;)Ljava/lang/Object;
       6: areturn

  public <B> T minBy(scala.Function1<T, B>, scala.math.Ordering<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #555                // Method scala/collection/TraversableOnce$class.minBy:(Lscala/collection/TraversableOnce;Lscala/Function1;Lscala/math/Ordering;)Ljava/lang/Object;
       6: areturn

  public <B> void copyToBuffer(scala.collection.mutable.Buffer<B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #560                // Method scala/collection/TraversableOnce$class.copyToBuffer:(Lscala/collection/TraversableOnce;Lscala/collection/mutable/Buffer;)V
       5: return

  public <B> void copyToArray(java.lang.Object, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #566                // Method scala/collection/TraversableOnce$class.copyToArray:(Lscala/collection/TraversableOnce;Ljava/lang/Object;I)V
       6: return

  public <B> void copyToArray(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #572                // Method scala/collection/TraversableOnce$class.copyToArray:(Lscala/collection/TraversableOnce;Ljava/lang/Object;)V
       5: return

  public <B> java.lang.Object toArray(scala.reflect.ClassTag<B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #577                // Method scala/collection/TraversableOnce$class.toArray:(Lscala/collection/TraversableOnce;Lscala/reflect/ClassTag;)Ljava/lang/Object;
       5: areturn

  public scala.collection.immutable.List<T> toList();
    Code:
       0: aload_0
       1: invokestatic  #582                // Method scala/collection/TraversableOnce$class.toList:(Lscala/collection/TraversableOnce;)Lscala/collection/immutable/List;
       4: areturn

  public scala.collection.Iterable<T> toIterable();
    Code:
       0: aload_0
       1: invokestatic  #587                // Method scala/collection/TraversableOnce$class.toIterable:(Lscala/collection/TraversableOnce;)Lscala/collection/Iterable;
       4: areturn

  public scala.collection.Seq<T> toSeq();
    Code:
       0: aload_0
       1: invokestatic  #591                // Method scala/collection/TraversableOnce$class.toSeq:(Lscala/collection/TraversableOnce;)Lscala/collection/Seq;
       4: areturn

  public scala.collection.immutable.IndexedSeq<T> toIndexedSeq();
    Code:
       0: aload_0
       1: invokestatic  #596                // Method scala/collection/TraversableOnce$class.toIndexedSeq:(Lscala/collection/TraversableOnce;)Lscala/collection/immutable/IndexedSeq;
       4: areturn

  public <B> scala.collection.mutable.Buffer<B> toBuffer();
    Code:
       0: aload_0
       1: invokestatic  #601                // Method scala/collection/TraversableOnce$class.toBuffer:(Lscala/collection/TraversableOnce;)Lscala/collection/mutable/Buffer;
       4: areturn

  public <B> scala.collection.immutable.Set<B> toSet();
    Code:
       0: aload_0
       1: invokestatic  #606                // Method scala/collection/TraversableOnce$class.toSet:(Lscala/collection/TraversableOnce;)Lscala/collection/immutable/Set;
       4: areturn

  public scala.collection.immutable.Vector<T> toVector();
    Code:
       0: aload_0
       1: invokestatic  #611                // Method scala/collection/TraversableOnce$class.toVector:(Lscala/collection/TraversableOnce;)Lscala/collection/immutable/Vector;
       4: areturn

  public <Col> Col to(scala.collection.generic.CanBuildFrom<scala.runtime.Nothing$, T, Col>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #616                // Method scala/collection/TraversableOnce$class.to:(Lscala/collection/TraversableOnce;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
       5: areturn

  public <T, U> scala.collection.immutable.Map<T, U> toMap(scala.Predef$$less$colon$less<T, scala.Tuple2<T, U>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #623                // Method scala/collection/TraversableOnce$class.toMap:(Lscala/collection/TraversableOnce;Lscala/Predef$$less$colon$less;)Lscala/collection/immutable/Map;
       5: areturn

  public java.lang.String mkString(java.lang.String, java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #630                // Method scala/collection/TraversableOnce$class.mkString:(Lscala/collection/TraversableOnce;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
       7: areturn

  public java.lang.String mkString(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #637                // Method scala/collection/TraversableOnce$class.mkString:(Lscala/collection/TraversableOnce;Ljava/lang/String;)Ljava/lang/String;
       5: areturn

  public java.lang.String mkString();
    Code:
       0: aload_0
       1: invokestatic  #640                // Method scala/collection/TraversableOnce$class.mkString:(Lscala/collection/TraversableOnce;)Ljava/lang/String;
       4: areturn

  public scala.collection.mutable.StringBuilder addString(scala.collection.mutable.StringBuilder, java.lang.String, java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #645                // Method scala/collection/TraversableOnce$class.addString:(Lscala/collection/TraversableOnce;Lscala/collection/mutable/StringBuilder;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lscala/collection/mutable/StringBuilder;
       9: areturn

  public scala.collection.mutable.StringBuilder addString(scala.collection.mutable.StringBuilder, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #650                // Method scala/collection/TraversableOnce$class.addString:(Lscala/collection/TraversableOnce;Lscala/collection/mutable/StringBuilder;Ljava/lang/String;)Lscala/collection/mutable/StringBuilder;
       6: areturn

  public scala.collection.mutable.StringBuilder addString(scala.collection.mutable.StringBuilder);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #654                // Method scala/collection/TraversableOnce$class.addString:(Lscala/collection/TraversableOnce;Lscala/collection/mutable/StringBuilder;)Lscala/collection/mutable/StringBuilder;
       5: areturn

  public int scala$collection$parallel$mutable$ParHashTable$EntryIterator$$idx();
    Code:
       0: aload_0
       1: getfield      #656                // Field scala$collection$parallel$mutable$ParHashTable$EntryIterator$$idx:I
       4: ireturn

  private void scala$collection$parallel$mutable$ParHashTable$EntryIterator$$idx_$eq(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #656                // Field scala$collection$parallel$mutable$ParHashTable$EntryIterator$$idx:I
       5: return

  public int scala$collection$parallel$mutable$ParHashTable$EntryIterator$$until();
    Code:
       0: aload_0
       1: getfield      #659                // Field scala$collection$parallel$mutable$ParHashTable$EntryIterator$$until:I
       4: ireturn

  public int scala$collection$parallel$mutable$ParHashTable$EntryIterator$$totalsize();
    Code:
       0: aload_0
       1: getfield      #661                // Field scala$collection$parallel$mutable$ParHashTable$EntryIterator$$totalsize:I
       4: ireturn

  public Entry scala$collection$parallel$mutable$ParHashTable$EntryIterator$$es();
    Code:
       0: aload_0
       1: getfield      #664                // Field scala$collection$parallel$mutable$ParHashTable$EntryIterator$$es:Lscala/collection/mutable/HashEntry;
       4: areturn

  private void scala$collection$parallel$mutable$ParHashTable$EntryIterator$$es_$eq(Entry);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #664                // Field scala$collection$parallel$mutable$ParHashTable$EntryIterator$$es:Lscala/collection/mutable/HashEntry;
       5: return

  public scala.collection.mutable.HashEntry<K, Entry>[] scala$collection$parallel$mutable$ParHashTable$EntryIterator$$itertable();
    Code:
       0: aload_0
       1: getfield      #669                // Field scala$collection$parallel$mutable$ParHashTable$EntryIterator$$itertable:[Lscala/collection/mutable/HashEntry;
       4: areturn

  public int scala$collection$parallel$mutable$ParHashTable$EntryIterator$$traversed();
    Code:
       0: aload_0
       1: getfield      #671                // Field scala$collection$parallel$mutable$ParHashTable$EntryIterator$$traversed:I
       4: ireturn

  private void scala$collection$parallel$mutable$ParHashTable$EntryIterator$$traversed_$eq(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #671                // Field scala$collection$parallel$mutable$ParHashTable$EntryIterator$$traversed:I
       5: return

  public abstract T entry2item(Entry);

  public abstract IterRepr newIterator(int, int, int, Entry);

  public boolean hasNext();
    Code:
       0: aload_0
       1: invokevirtual #679                // Method scala$collection$parallel$mutable$ParHashTable$EntryIterator$$es:()Lscala/collection/mutable/HashEntry;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public T next();
    Code:
       0: aload_0
       1: invokevirtual #679                // Method scala$collection$parallel$mutable$ParHashTable$EntryIterator$$es:()Lscala/collection/mutable/HashEntry;
       4: astore_1
       5: aload_0
       6: aload_0
       7: invokevirtual #679                // Method scala$collection$parallel$mutable$ParHashTable$EntryIterator$$es:()Lscala/collection/mutable/HashEntry;
      10: invokeinterface #685,  1          // InterfaceMethod scala/collection/mutable/HashEntry.next:()Ljava/lang/Object;
      15: checkcast     #683                // class scala/collection/mutable/HashEntry
      18: invokespecial #687                // Method scala$collection$parallel$mutable$ParHashTable$EntryIterator$$es_$eq:(Lscala/collection/mutable/HashEntry;)V
      21: aload_0
      22: invokevirtual #690                // Method scan:()V
      25: aload_0
      26: aload_0
      27: invokevirtual #692                // Method scala$collection$parallel$mutable$ParHashTable$EntryIterator$$traversed:()I
      30: iconst_1
      31: iadd
      32: invokespecial #694                // Method scala$collection$parallel$mutable$ParHashTable$EntryIterator$$traversed_$eq:(I)V
      35: aload_0
      36: aload_1
      37: invokevirtual #696                // Method entry2item:(Lscala/collection/mutable/HashEntry;)Ljava/lang/Object;
      40: areturn

  public void scan();
    Code:
       0: aload_0
       1: invokevirtual #679                // Method scala$collection$parallel$mutable$ParHashTable$EntryIterator$$es:()Lscala/collection/mutable/HashEntry;
       4: ifnonnull     44
       7: aload_0
       8: invokevirtual #699                // Method scala$collection$parallel$mutable$ParHashTable$EntryIterator$$idx:()I
      11: aload_0
      12: invokevirtual #701                // Method scala$collection$parallel$mutable$ParHashTable$EntryIterator$$until:()I
      15: if_icmpge     44
      18: aload_0
      19: aload_0
      20: invokevirtual #703                // Method scala$collection$parallel$mutable$ParHashTable$EntryIterator$$itertable:()[Lscala/collection/mutable/HashEntry;
      23: aload_0
      24: invokevirtual #699                // Method scala$collection$parallel$mutable$ParHashTable$EntryIterator$$idx:()I
      27: aaload
      28: invokespecial #687                // Method scala$collection$parallel$mutable$ParHashTable$EntryIterator$$es_$eq:(Lscala/collection/mutable/HashEntry;)V
      31: aload_0
      32: aload_0
      33: invokevirtual #699                // Method scala$collection$parallel$mutable$ParHashTable$EntryIterator$$idx:()I
      36: iconst_1
      37: iadd
      38: invokespecial #705                // Method scala$collection$parallel$mutable$ParHashTable$EntryIterator$$idx_$eq:(I)V
      41: goto          0
      44: return

  public int remaining();
    Code:
       0: aload_0
       1: invokevirtual #708                // Method scala$collection$parallel$mutable$ParHashTable$EntryIterator$$totalsize:()I
       4: aload_0
       5: invokevirtual #692                // Method scala$collection$parallel$mutable$ParHashTable$EntryIterator$$traversed:()I
       8: isub
       9: ireturn

  public java.lang.String debugInformation();
    Code:
       0: aload_0
       1: new           #711                // class scala/collection/parallel/mutable/ParHashTable$EntryIterator$$anonfun$debugInformation$1
       4: dup
       5: aload_0
       6: invokespecial #715                // Method scala/collection/parallel/mutable/ParHashTable$EntryIterator$$anonfun$debugInformation$1."<init>":(Lscala/collection/parallel/mutable/ParHashTable$EntryIterator;)V
       9: invokevirtual #717                // Method buildString:(Lscala/Function1;)Ljava/lang/String;
      12: areturn

  public IterRepr dup();
    Code:
       0: aload_0
       1: aload_0
       2: invokevirtual #699                // Method scala$collection$parallel$mutable$ParHashTable$EntryIterator$$idx:()I
       5: aload_0
       6: invokevirtual #701                // Method scala$collection$parallel$mutable$ParHashTable$EntryIterator$$until:()I
       9: aload_0
      10: invokevirtual #708                // Method scala$collection$parallel$mutable$ParHashTable$EntryIterator$$totalsize:()I
      13: aload_0
      14: invokevirtual #679                // Method scala$collection$parallel$mutable$ParHashTable$EntryIterator$$es:()Lscala/collection/mutable/HashEntry;
      17: invokevirtual #721                // Method newIterator:(IIILscala/collection/mutable/HashEntry;)Lscala/collection/parallel/IterableSplitter;
      20: areturn

  public scala.collection.Seq<scala.collection.parallel.IterableSplitter<T>> split();
    Code:
       0: aload_0
       1: invokevirtual #724                // Method remaining:()I
       4: iconst_1
       5: if_icmple     205
       8: aload_0
       9: invokevirtual #701                // Method scala$collection$parallel$mutable$ParHashTable$EntryIterator$$until:()I
      12: aload_0
      13: invokevirtual #699                // Method scala$collection$parallel$mutable$ParHashTable$EntryIterator$$idx:()I
      16: if_icmple     166
      19: aload_0
      20: invokevirtual #701                // Method scala$collection$parallel$mutable$ParHashTable$EntryIterator$$until:()I
      23: aload_0
      24: invokevirtual #699                // Method scala$collection$parallel$mutable$ParHashTable$EntryIterator$$idx:()I
      27: isub
      28: iconst_2
      29: idiv
      30: istore_1
      31: aload_0
      32: invokevirtual #699                // Method scala$collection$parallel$mutable$ParHashTable$EntryIterator$$idx:()I
      35: iload_1
      36: iadd
      37: iconst_1
      38: iadd
      39: istore_2
      40: aload_0
      41: invokevirtual #701                // Method scala$collection$parallel$mutable$ParHashTable$EntryIterator$$until:()I
      44: istore_3
      45: aload_0
      46: invokevirtual #703                // Method scala$collection$parallel$mutable$ParHashTable$EntryIterator$$itertable:()[Lscala/collection/mutable/HashEntry;
      49: iload_2
      50: iconst_1
      51: isub
      52: aaload
      53: astore        4
      55: aload_0
      56: iload_2
      57: iconst_1
      58: isub
      59: iload_3
      60: aload_0
      61: invokevirtual #728                // Method scala$collection$parallel$mutable$ParHashTable$EntryIterator$$$outer:()Lscala/collection/parallel/mutable/ParHashTable;
      64: invokeinterface #733,  1          // InterfaceMethod scala/collection/parallel/mutable/ParHashTable.table:()[Lscala/collection/mutable/HashEntry;
      69: arraylength
      70: aload_0
      71: invokevirtual #728                // Method scala$collection$parallel$mutable$ParHashTable$EntryIterator$$$outer:()Lscala/collection/parallel/mutable/ParHashTable;
      74: invokeinterface #735,  1          // InterfaceMethod scala/collection/parallel/mutable/ParHashTable.sizeMapBucketSize:()I
      79: invokevirtual #737                // Method calcNumElems:(IIII)I
      82: istore        5
      84: aload_0
      85: invokevirtual #699                // Method scala$collection$parallel$mutable$ParHashTable$EntryIterator$$idx:()I
      88: istore        6
      90: aload_0
      91: invokevirtual #699                // Method scala$collection$parallel$mutable$ParHashTable$EntryIterator$$idx:()I
      94: iload_1
      95: iadd
      96: istore        7
      98: aload_0
      99: invokevirtual #679                // Method scala$collection$parallel$mutable$ParHashTable$EntryIterator$$es:()Lscala/collection/mutable/HashEntry;
     102: astore        8
     104: aload_0
     105: invokevirtual #708                // Method scala$collection$parallel$mutable$ParHashTable$EntryIterator$$totalsize:()I
     108: iload         5
     110: isub
     111: istore        9
     113: getstatic     #743                // Field scala/collection/Seq$.MODULE$:Lscala/collection/Seq$;
     116: getstatic     #748                // Field scala/Predef$.MODULE$:Lscala/Predef$;
     119: iconst_2
     120: anewarray     #7                  // class scala/collection/parallel/IterableSplitter
     123: dup
     124: iconst_0
     125: aload_0
     126: iload         6
     128: iload         7
     130: iload         9
     132: aload         8
     134: invokevirtual #721                // Method newIterator:(IIILscala/collection/mutable/HashEntry;)Lscala/collection/parallel/IterableSplitter;
     137: aastore
     138: dup
     139: iconst_1
     140: aload_0
     141: iload_2
     142: iload_3
     143: iload         5
     145: aload         4
     147: invokevirtual #721                // Method newIterator:(IIILscala/collection/mutable/HashEntry;)Lscala/collection/parallel/IterableSplitter;
     150: aastore
     151: checkcast     #750                // class "[Ljava/lang/Object;"
     154: invokevirtual #754                // Method scala/Predef$.wrapRefArray:([Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
     157: invokevirtual #758                // Method scala/collection/Seq$.apply:(Lscala/collection/Seq;)Lscala/collection/GenTraversable;
     160: checkcast     #760                // class scala/collection/Seq
     163: goto          231
     166: aload_0
     167: aload_0
     168: invokevirtual #679                // Method scala$collection$parallel$mutable$ParHashTable$EntryIterator$$es:()Lscala/collection/mutable/HashEntry;
     171: invokespecial #764                // Method convertToArrayBuffer:(Lscala/collection/mutable/HashEntry;)Lscala/collection/mutable/ArrayBuffer;
     174: astore        10
     176: new           #766                // class scala/collection/parallel/BufferSplitter
     179: dup
     180: aload         10
     182: iconst_0
     183: aload         10
     185: invokevirtual #770                // Method scala/collection/mutable/ArrayBuffer.length:()I
     188: aload_0
     189: invokevirtual #772                // Method signalDelegate:()Lscala/collection/generic/Signalling;
     192: invokespecial #775                // Method scala/collection/parallel/BufferSplitter."<init>":(Lscala/collection/mutable/ArrayBuffer;IILscala/collection/generic/Signalling;)V
     195: astore        11
     197: aload         11
     199: invokevirtual #777                // Method scala/collection/parallel/BufferSplitter.split:()Lscala/collection/Seq;
     202: goto          231
     205: getstatic     #743                // Field scala/collection/Seq$.MODULE$:Lscala/collection/Seq$;
     208: getstatic     #748                // Field scala/Predef$.MODULE$:Lscala/Predef$;
     211: iconst_1
     212: anewarray     #7                  // class scala/collection/parallel/IterableSplitter
     215: dup
     216: iconst_0
     217: aload_0
     218: aastore
     219: checkcast     #750                // class "[Ljava/lang/Object;"
     222: invokevirtual #754                // Method scala/Predef$.wrapRefArray:([Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
     225: invokevirtual #758                // Method scala/collection/Seq$.apply:(Lscala/collection/Seq;)Lscala/collection/GenTraversable;
     228: checkcast     #760                // class scala/collection/Seq
     231: areturn

  private scala.collection.mutable.ArrayBuffer<T> convertToArrayBuffer(Entry);
    Code:
       0: getstatic     #795                // Field scala/collection/mutable/ArrayBuffer$.MODULE$:Lscala/collection/mutable/ArrayBuffer$;
       3: getstatic     #800                // Field scala/collection/immutable/Nil$.MODULE$:Lscala/collection/immutable/Nil$;
       6: invokevirtual #801                // Method scala/collection/mutable/ArrayBuffer$.apply:(Lscala/collection/Seq;)Lscala/collection/GenTraversable;
       9: checkcast     #768                // class scala/collection/mutable/ArrayBuffer
      12: astore_2
      13: aload_1
      14: astore_3
      15: aload_3
      16: ifnull        38
      19: aload_2
      20: aload_3
      21: invokevirtual #805                // Method scala/collection/mutable/ArrayBuffer.$plus$eq:(Ljava/lang/Object;)Lscala/collection/mutable/ArrayBuffer;
      24: pop
      25: aload_3
      26: invokeinterface #685,  1          // InterfaceMethod scala/collection/mutable/HashEntry.next:()Ljava/lang/Object;
      31: checkcast     #683                // class scala/collection/mutable/HashEntry
      34: astore_3
      35: goto          15
      38: aload_2
      39: new           #807                // class scala/collection/parallel/mutable/ParHashTable$EntryIterator$$anonfun$convertToArrayBuffer$1
      42: dup
      43: aload_0
      44: invokespecial #808                // Method scala/collection/parallel/mutable/ParHashTable$EntryIterator$$anonfun$convertToArrayBuffer$1."<init>":(Lscala/collection/parallel/mutable/ParHashTable$EntryIterator;)V
      47: getstatic     #795                // Field scala/collection/mutable/ArrayBuffer$.MODULE$:Lscala/collection/mutable/ArrayBuffer$;
      50: invokevirtual #812                // Method scala/collection/mutable/ArrayBuffer$.canBuildFrom:()Lscala/collection/generic/CanBuildFrom;
      53: invokevirtual #815                // Method scala/collection/mutable/ArrayBuffer.map:(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
      56: checkcast     #768                // class scala/collection/mutable/ArrayBuffer
      59: areturn

  public int countElems(int, int);
    Code:
       0: iconst_0
       1: istore_3
       2: iload_1
       3: istore        4
       5: iload         4
       7: iload_2
       8: if_icmpge     53
      11: aload_0
      12: invokevirtual #703                // Method scala$collection$parallel$mutable$ParHashTable$EntryIterator$$itertable:()[Lscala/collection/mutable/HashEntry;
      15: iload         4
      17: aaload
      18: astore        5
      20: aload         5
      22: ifnull        44
      25: iload_3
      26: iconst_1
      27: iadd
      28: istore_3
      29: aload         5
      31: invokeinterface #685,  1          // InterfaceMethod scala/collection/mutable/HashEntry.next:()Ljava/lang/Object;
      36: checkcast     #683                // class scala/collection/mutable/HashEntry
      39: astore        5
      41: goto          20
      44: iload         4
      46: iconst_1
      47: iadd
      48: istore        4
      50: goto          5
      53: iload_3
      54: ireturn

  public int countBucketSizes(int, int);
    Code:
       0: iconst_0
       1: istore_3
       2: iload_1
       3: istore        4
       5: iload         4
       7: iload_2
       8: if_icmpge     35
      11: iload_3
      12: aload_0
      13: invokevirtual #728                // Method scala$collection$parallel$mutable$ParHashTable$EntryIterator$$$outer:()Lscala/collection/parallel/mutable/ParHashTable;
      16: invokeinterface #828,  1          // InterfaceMethod scala/collection/parallel/mutable/ParHashTable.sizemap:()[I
      21: iload         4
      23: iaload
      24: iadd
      25: istore_3
      26: iload         4
      28: iconst_1
      29: iadd
      30: istore        4
      32: goto          5
      35: iload_3
      36: ireturn

  public scala.collection.parallel.mutable.ParHashTable scala$collection$parallel$mutable$ParHashTable$EntryIterator$$$outer();
    Code:
       0: aload_0
       1: getfield      #832                // Field $outer:Lscala/collection/parallel/mutable/ParHashTable;
       4: areturn

  public scala.collection.GenMap toMap(scala.Predef$$less$colon$less);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #835                // Method toMap:(Lscala/Predef$$less$colon$less;)Lscala/collection/immutable/Map;
       5: areturn

  public scala.collection.GenSet toSet();
    Code:
       0: aload_0
       1: invokevirtual #838                // Method toSet:()Lscala/collection/immutable/Set;
       4: areturn

  public scala.collection.GenSeq toSeq();
    Code:
       0: aload_0
       1: invokevirtual #841                // Method toSeq:()Lscala/collection/Seq;
       4: areturn

  public scala.collection.GenIterable toIterable();
    Code:
       0: aload_0
       1: invokevirtual #844                // Method toIterable:()Lscala/collection/Iterable;
       4: areturn

  public scala.collection.GenTraversable toTraversable();
    Code:
       0: aload_0
       1: invokevirtual #847                // Method toTraversable:()Lscala/collection/Traversable;
       4: areturn

  public scala.collection.TraversableOnce seq();
    Code:
       0: aload_0
       1: invokevirtual #850                // Method seq:()Lscala/collection/Iterator;
       4: areturn

  public scala.collection.Iterator map(scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #852                // Method map:(Lscala/Function1;)Lscala/collection/parallel/IterableSplitter$Mapped;
       5: areturn

  public scala.collection.Iterator slice(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokevirtual #855                // Method slice:(II)Lscala/collection/parallel/IterableSplitter;
       6: areturn

  public scala.collection.Iterator take(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #857                // Method take:(I)Lscala/collection/parallel/IterableSplitter;
       5: areturn

  public scala.collection.parallel.mutable.ParHashTable$EntryIterator(scala.collection.parallel.mutable.ParHashTable<K, Entry>, int, int, int, Entry);
    Code:
       0: aload_0
       1: iload_2
       2: putfield      #656                // Field scala$collection$parallel$mutable$ParHashTable$EntryIterator$$idx:I
       5: aload_0
       6: iload_3
       7: putfield      #659                // Field scala$collection$parallel$mutable$ParHashTable$EntryIterator$$until:I
      10: aload_0
      11: iload         4
      13: putfield      #661                // Field scala$collection$parallel$mutable$ParHashTable$EntryIterator$$totalsize:I
      16: aload_0
      17: aload         5
      19: putfield      #664                // Field scala$collection$parallel$mutable$ParHashTable$EntryIterator$$es:Lscala/collection/mutable/HashEntry;
      22: aload_1
      23: ifnonnull     28
      26: aconst_null
      27: athrow
      28: aload_0
      29: aload_1
      30: putfield      #832                // Field $outer:Lscala/collection/parallel/mutable/ParHashTable;
      33: aload_0
      34: invokespecial #860                // Method java/lang/Object."<init>":()V
      37: aload_0
      38: invokestatic  #864                // Method scala/collection/TraversableOnce$class.$init$:(Lscala/collection/TraversableOnce;)V
      41: aload_0
      42: invokestatic  #867                // Method scala/collection/Iterator$class.$init$:(Lscala/collection/Iterator;)V
      45: aload_0
      46: invokestatic  #870                // Method scala/collection/parallel/RemainsIterator$class.$init$:(Lscala/collection/parallel/RemainsIterator;)V
      49: aload_0
      50: invokestatic  #873                // Method scala/collection/parallel/AugmentedIterableIterator$class.$init$:(Lscala/collection/parallel/AugmentedIterableIterator;)V
      53: aload_0
      54: invokestatic  #875                // Method scala/collection/generic/DelegatedSignalling$class.$init$:(Lscala/collection/generic/DelegatedSignalling;)V
      57: aload_0
      58: invokestatic  #878                // Method scala/collection/parallel/IterableSplitter$class.$init$:(Lscala/collection/parallel/IterableSplitter;)V
      61: aload_0
      62: invokestatic  #881                // Method scala/collection/parallel/mutable/SizeMapUtils$class.$init$:(Lscala/collection/parallel/mutable/SizeMapUtils;)V
      65: aload_0
      66: aload_1
      67: invokeinterface #733,  1          // InterfaceMethod scala/collection/parallel/mutable/ParHashTable.table:()[Lscala/collection/mutable/HashEntry;
      72: putfield      #669                // Field scala$collection$parallel$mutable$ParHashTable$EntryIterator$$itertable:[Lscala/collection/mutable/HashEntry;
      75: aload_0
      76: iconst_0
      77: putfield      #671                // Field scala$collection$parallel$mutable$ParHashTable$EntryIterator$$traversed:I
      80: aload_0
      81: invokevirtual #690                // Method scan:()V
      84: return
}
