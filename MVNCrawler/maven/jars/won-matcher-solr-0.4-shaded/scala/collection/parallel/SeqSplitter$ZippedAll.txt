Compiled from "RemainsIterator.scala"
public class scala.collection.parallel.SeqSplitter$ZippedAll<U, S> extends scala.collection.parallel.IterableSplitter<T>.ZippedAll<U, S> implements scala.collection.parallel.SeqSplitter<scala.Tuple2<U, S>> {
  public scala.collection.Seq<scala.collection.parallel.SeqSplitter<scala.Tuple2<U, S>>> splitWithSignalling();
    Code:
       0: aload_0
       1: invokestatic  #15                 // Method scala/collection/parallel/SeqSplitter$class.splitWithSignalling:(Lscala/collection/parallel/SeqSplitter;)Lscala/collection/Seq;
       4: areturn

  public scala.collection.Seq<scala.collection.parallel.SeqSplitter<scala.Tuple2<U, S>>> psplitWithSignalling(scala.collection.Seq<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #22                 // Method scala/collection/parallel/SeqSplitter$class.psplitWithSignalling:(Lscala/collection/parallel/SeqSplitter;Lscala/collection/Seq;)Lscala/collection/Seq;
       5: areturn

  public scala.collection.parallel.SeqSplitter<scala.Tuple2<U, S>>.Taken newTaken(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #29                 // Method scala/collection/parallel/SeqSplitter$class.newTaken:(Lscala/collection/parallel/SeqSplitter;I)Lscala/collection/parallel/SeqSplitter$Taken;
       5: areturn

  public scala.collection.parallel.SeqSplitter<scala.Tuple2<U, S>> take(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #36                 // Method scala/collection/parallel/SeqSplitter$class.take:(Lscala/collection/parallel/SeqSplitter;I)Lscala/collection/parallel/SeqSplitter;
       5: areturn

  public scala.collection.parallel.SeqSplitter<scala.Tuple2<U, S>> slice(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokestatic  #42                 // Method scala/collection/parallel/SeqSplitter$class.slice:(Lscala/collection/parallel/SeqSplitter;II)Lscala/collection/parallel/SeqSplitter;
       6: areturn

  public <S> scala.collection.parallel.SeqSplitter<scala.Tuple2<U, S>>.Mapped<S> map(scala.Function1<scala.Tuple2<U, S>, S>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #49                 // Method scala/collection/parallel/SeqSplitter$class.map:(Lscala/collection/parallel/SeqSplitter;Lscala/Function1;)Lscala/collection/parallel/SeqSplitter$Mapped;
       5: areturn

  public <U, PI extends scala.collection.parallel.SeqSplitter<U>> scala.collection.parallel.SeqSplitter<scala.Tuple2<U, S>>.Appended<U, PI> appendParSeq(PI);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #56                 // Method scala/collection/parallel/SeqSplitter$class.appendParSeq:(Lscala/collection/parallel/SeqSplitter;Lscala/collection/parallel/SeqSplitter;)Lscala/collection/parallel/SeqSplitter$Appended;
       5: areturn

  public <S> scala.collection.parallel.SeqSplitter<scala.Tuple2<U, S>>.Zipped<S> zipParSeq(scala.collection.parallel.SeqSplitter<S>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #63                 // Method scala/collection/parallel/SeqSplitter$class.zipParSeq:(Lscala/collection/parallel/SeqSplitter;Lscala/collection/parallel/SeqSplitter;)Lscala/collection/parallel/SeqSplitter$Zipped;
       5: areturn

  public <S, U, R> scala.collection.parallel.SeqSplitter<scala.Tuple2<U, S>>.ZippedAll<U, R> zipAllParSeq(scala.collection.parallel.SeqSplitter<S>, U, R);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #68                 // Method scala/collection/parallel/SeqSplitter$class.zipAllParSeq:(Lscala/collection/parallel/SeqSplitter;Lscala/collection/parallel/SeqSplitter;Ljava/lang/Object;Ljava/lang/Object;)Lscala/collection/parallel/SeqSplitter$ZippedAll;
       7: areturn

  public scala.collection.parallel.SeqSplitter<scala.Tuple2<U, S>> reverse();
    Code:
       0: aload_0
       1: invokestatic  #76                 // Method scala/collection/parallel/SeqSplitter$class.reverse:(Lscala/collection/parallel/SeqSplitter;)Lscala/collection/parallel/SeqSplitter;
       4: areturn

  public <U> scala.collection.parallel.SeqSplitter<scala.Tuple2<U, S>>.Patched<U> patchParSeq(int, scala.collection.parallel.SeqSplitter<U>, int);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: iload_3
       4: invokestatic  #81                 // Method scala/collection/parallel/SeqSplitter$class.patchParSeq:(Lscala/collection/parallel/SeqSplitter;ILscala/collection/parallel/SeqSplitter;I)Lscala/collection/parallel/SeqSplitter$Patched;
       7: areturn

  public int prefixLength(scala.Function1<scala.Tuple2<U, S>, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #91                 // Method scala/collection/parallel/AugmentedSeqIterator$class.prefixLength:(Lscala/collection/parallel/AugmentedSeqIterator;Lscala/Function1;)I
       5: ireturn

  public int indexWhere(scala.Function1<scala.Tuple2<U, S>, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #95                 // Method scala/collection/parallel/AugmentedSeqIterator$class.indexWhere:(Lscala/collection/parallel/AugmentedSeqIterator;Lscala/Function1;)I
       5: ireturn

  public int lastIndexWhere(scala.Function1<scala.Tuple2<U, S>, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #98                 // Method scala/collection/parallel/AugmentedSeqIterator$class.lastIndexWhere:(Lscala/collection/parallel/AugmentedSeqIterator;Lscala/Function1;)I
       5: ireturn

  public <S> boolean corresponds(scala.Function2<scala.Tuple2<U, S>, S, java.lang.Object>, scala.collection.Iterator<S>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #103                // Method scala/collection/parallel/AugmentedSeqIterator$class.corresponds:(Lscala/collection/parallel/AugmentedSeqIterator;Lscala/Function2;Lscala/collection/Iterator;)Z
       6: ireturn

  public <U, This> scala.collection.parallel.Combiner<U, This> reverse2combiner(scala.collection.parallel.Combiner<U, This>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #111                // Method scala/collection/parallel/AugmentedSeqIterator$class.reverse2combiner:(Lscala/collection/parallel/AugmentedSeqIterator;Lscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
       5: areturn

  public <S, That> scala.collection.parallel.Combiner<S, That> reverseMap2combiner(scala.Function1<scala.Tuple2<U, S>, S>, scala.collection.parallel.Combiner<S, That>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #118                // Method scala/collection/parallel/AugmentedSeqIterator$class.reverseMap2combiner:(Lscala/collection/parallel/AugmentedSeqIterator;Lscala/Function1;Lscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
       6: areturn

  public <U, That> scala.collection.parallel.Combiner<U, That> updated2combiner(int, U, scala.collection.parallel.Combiner<U, That>);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #123                // Method scala/collection/parallel/AugmentedSeqIterator$class.updated2combiner:(Lscala/collection/parallel/AugmentedSeqIterator;ILjava/lang/Object;Lscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
       7: areturn

  public scala.collection.parallel.SeqSplitter<scala.Tuple2<U, S>> dup();
    Code:
       0: aload_0
       1: invokespecial #129                // Method scala/collection/parallel/IterableSplitter$ZippedAll.dup:()Lscala/collection/parallel/IterableSplitter;
       4: checkcast     #7                  // class scala/collection/parallel/SeqSplitter
       7: areturn

  private scala.Tuple2<scala.collection.parallel.SeqSplitter<U>, scala.collection.parallel.SeqSplitter<S>> patchem();
    Code:
       0: aload_0
       1: invokevirtual #134                // Method scala$collection$parallel$SeqSplitter$ZippedAll$$$outer:()Lscala/collection/parallel/SeqSplitter;
       4: invokeinterface #138,  1          // InterfaceMethod scala/collection/parallel/SeqSplitter.remaining:()I
       9: istore_1
      10: aload_0
      11: invokevirtual #140                // Method that:()Lscala/collection/parallel/SeqSplitter;
      14: invokeinterface #138,  1          // InterfaceMethod scala/collection/parallel/SeqSplitter.remaining:()I
      19: istore_2
      20: iload_1
      21: iload_2
      22: if_icmpge     53
      25: aload_0
      26: invokevirtual #134                // Method scala$collection$parallel$SeqSplitter$ZippedAll$$$outer:()Lscala/collection/parallel/SeqSplitter;
      29: getstatic     #146                // Field scala/collection/parallel/immutable/package$.MODULE$:Lscala/collection/parallel/immutable/package$;
      32: aload_0
      33: invokevirtual #150                // Method thiselem:()Ljava/lang/Object;
      36: iload_2
      37: iload_1
      38: isub
      39: invokevirtual #154                // Method scala/collection/parallel/immutable/package$.repetition:(Ljava/lang/Object;I)Lscala/collection/parallel/immutable/Repetition;
      42: invokevirtual #160                // Method scala/collection/parallel/immutable/Repetition.splitter:()Lscala/collection/parallel/immutable/Repetition$ParIterator;
      45: invokeinterface #162,  2          // InterfaceMethod scala/collection/parallel/SeqSplitter.appendParSeq:(Lscala/collection/parallel/SeqSplitter;)Lscala/collection/parallel/SeqSplitter$Appended;
      50: goto          57
      53: aload_0
      54: invokevirtual #134                // Method scala$collection$parallel$SeqSplitter$ZippedAll$$$outer:()Lscala/collection/parallel/SeqSplitter;
      57: astore_3
      58: iload_1
      59: iload_2
      60: if_icmple     91
      63: aload_0
      64: invokevirtual #140                // Method that:()Lscala/collection/parallel/SeqSplitter;
      67: getstatic     #146                // Field scala/collection/parallel/immutable/package$.MODULE$:Lscala/collection/parallel/immutable/package$;
      70: aload_0
      71: invokevirtual #165                // Method thatelem:()Ljava/lang/Object;
      74: iload_1
      75: iload_2
      76: isub
      77: invokevirtual #154                // Method scala/collection/parallel/immutable/package$.repetition:(Ljava/lang/Object;I)Lscala/collection/parallel/immutable/Repetition;
      80: invokevirtual #160                // Method scala/collection/parallel/immutable/Repetition.splitter:()Lscala/collection/parallel/immutable/Repetition$ParIterator;
      83: invokeinterface #162,  2          // InterfaceMethod scala/collection/parallel/SeqSplitter.appendParSeq:(Lscala/collection/parallel/SeqSplitter;)Lscala/collection/parallel/SeqSplitter$Appended;
      88: goto          95
      91: aload_0
      92: invokevirtual #140                // Method that:()Lscala/collection/parallel/SeqSplitter;
      95: astore        4
      97: new           #167                // class scala/Tuple2
     100: dup
     101: aload_3
     102: aload         4
     104: invokespecial #171                // Method scala/Tuple2."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
     107: areturn

  public scala.collection.Seq<scala.collection.parallel.SeqSplitter<scala.Tuple2<U, S>>> split();
    Code:
       0: aload_0
       1: invokespecial #178                // Method patchem:()Lscala/Tuple2;
       4: astore        5
       6: aload         5
       8: ifnull        60
      11: new           #167                // class scala/Tuple2
      14: dup
      15: aload         5
      17: invokevirtual #181                // Method scala/Tuple2._1:()Ljava/lang/Object;
      20: aload         5
      22: invokevirtual #184                // Method scala/Tuple2._2:()Ljava/lang/Object;
      25: invokespecial #171                // Method scala/Tuple2."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
      28: astore_1
      29: aload_1
      30: invokevirtual #181                // Method scala/Tuple2._1:()Ljava/lang/Object;
      33: checkcast     #7                  // class scala/collection/parallel/SeqSplitter
      36: astore_2
      37: aload_1
      38: invokevirtual #184                // Method scala/Tuple2._2:()Ljava/lang/Object;
      41: checkcast     #7                  // class scala/collection/parallel/SeqSplitter
      44: astore_3
      45: aload_2
      46: aload_3
      47: invokeinterface #186,  2          // InterfaceMethod scala/collection/parallel/SeqSplitter.zipParSeq:(Lscala/collection/parallel/SeqSplitter;)Lscala/collection/parallel/SeqSplitter$Zipped;
      52: astore        4
      54: aload         4
      56: invokevirtual #190                // Method scala/collection/parallel/SeqSplitter$Zipped.split:()Lscala/collection/Seq;
      59: areturn
      60: new           #192                // class scala/MatchError
      63: dup
      64: aload         5
      66: invokespecial #195                // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      69: athrow

  public scala.collection.Seq<scala.collection.parallel.SeqSplitter<scala.Tuple2<U, S>>> psplit(scala.collection.Seq<java.lang.Object>);
    Code:
       0: aload_0
       1: invokespecial #178                // Method patchem:()Lscala/Tuple2;
       4: astore        6
       6: aload         6
       8: ifnull        63
      11: new           #167                // class scala/Tuple2
      14: dup
      15: aload         6
      17: invokevirtual #181                // Method scala/Tuple2._1:()Ljava/lang/Object;
      20: aload         6
      22: invokevirtual #184                // Method scala/Tuple2._2:()Ljava/lang/Object;
      25: invokespecial #171                // Method scala/Tuple2."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
      28: astore_2
      29: aload_2
      30: invokevirtual #181                // Method scala/Tuple2._1:()Ljava/lang/Object;
      33: checkcast     #7                  // class scala/collection/parallel/SeqSplitter
      36: astore_3
      37: aload_2
      38: invokevirtual #184                // Method scala/Tuple2._2:()Ljava/lang/Object;
      41: checkcast     #7                  // class scala/collection/parallel/SeqSplitter
      44: astore        4
      46: aload_3
      47: aload         4
      49: invokeinterface #186,  2          // InterfaceMethod scala/collection/parallel/SeqSplitter.zipParSeq:(Lscala/collection/parallel/SeqSplitter;)Lscala/collection/parallel/SeqSplitter$Zipped;
      54: astore        5
      56: aload         5
      58: aload_1
      59: invokevirtual #200                // Method scala/collection/parallel/SeqSplitter$Zipped.psplit:(Lscala/collection/Seq;)Lscala/collection/Seq;
      62: areturn
      63: new           #192                // class scala/MatchError
      66: dup
      67: aload         6
      69: invokespecial #195                // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      72: athrow

  public scala.collection.parallel.SeqSplitter scala$collection$parallel$SeqSplitter$ZippedAll$$$outer();
    Code:
       0: aload_0
       1: getfield      #206                // Field $outer:Lscala/collection/parallel/IterableSplitter;
       4: checkcast     #7                  // class scala/collection/parallel/SeqSplitter
       7: areturn

  public scala.collection.parallel.IterableSplitter$ZippedAll zipAllParSeq(scala.collection.parallel.SeqSplitter, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokevirtual #209                // Method zipAllParSeq:(Lscala/collection/parallel/SeqSplitter;Ljava/lang/Object;Ljava/lang/Object;)Lscala/collection/parallel/SeqSplitter$ZippedAll;
       7: areturn

  public scala.collection.parallel.IterableSplitter$Zipped zipParSeq(scala.collection.parallel.SeqSplitter);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #211                // Method zipParSeq:(Lscala/collection/parallel/SeqSplitter;)Lscala/collection/parallel/SeqSplitter$Zipped;
       5: areturn

  public scala.collection.Iterator map(scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #214                // Method map:(Lscala/Function1;)Lscala/collection/parallel/SeqSplitter$Mapped;
       5: areturn

  public scala.collection.parallel.IterableSplitter$Mapped map(scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #214                // Method map:(Lscala/Function1;)Lscala/collection/parallel/SeqSplitter$Mapped;
       5: areturn

  public scala.collection.Iterator slice(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokevirtual #218                // Method slice:(II)Lscala/collection/parallel/SeqSplitter;
       6: areturn

  public scala.collection.parallel.IterableSplitter slice(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokevirtual #218                // Method slice:(II)Lscala/collection/parallel/SeqSplitter;
       6: areturn

  public scala.collection.Iterator take(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #222                // Method take:(I)Lscala/collection/parallel/SeqSplitter;
       5: areturn

  public scala.collection.parallel.IterableSplitter take(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #222                // Method take:(I)Lscala/collection/parallel/SeqSplitter;
       5: areturn

  public scala.collection.parallel.IterableSplitter$Taken newTaken(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #226                // Method newTaken:(I)Lscala/collection/parallel/SeqSplitter$Taken;
       5: areturn

  public scala.collection.parallel.IterableSplitter dup();
    Code:
       0: aload_0
       1: invokevirtual #228                // Method dup:()Lscala/collection/parallel/SeqSplitter;
       4: areturn

  public scala.collection.parallel.SeqSplitter$ZippedAll(scala.collection.parallel.SeqSplitter<T>, scala.collection.parallel.SeqSplitter<S>, U, S);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokespecial #232                // Method scala/collection/parallel/IterableSplitter$ZippedAll."<init>":(Lscala/collection/parallel/IterableSplitter;Lscala/collection/parallel/SeqSplitter;Ljava/lang/Object;Ljava/lang/Object;)V
       9: aload_0
      10: invokestatic  #236                // Method scala/collection/parallel/AugmentedSeqIterator$class.$init$:(Lscala/collection/parallel/AugmentedSeqIterator;)V
      13: aload_0
      14: invokestatic  #239                // Method scala/collection/parallel/SeqSplitter$class.$init$:(Lscala/collection/parallel/SeqSplitter;)V
      17: return
}
