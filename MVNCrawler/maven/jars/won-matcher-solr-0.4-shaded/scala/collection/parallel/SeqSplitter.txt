Compiled from "RemainsIterator.scala"
public interface scala.collection.parallel.SeqSplitter<T> extends scala.collection.parallel.IterableSplitter<T>, scala.collection.parallel.AugmentedSeqIterator<T>, scala.collection.parallel.PreciseSplitter<T> {
  public abstract scala.collection.parallel.SeqSplitter<T> dup();

  public abstract scala.collection.Seq<scala.collection.parallel.SeqSplitter<T>> split();

  public abstract scala.collection.Seq<scala.collection.parallel.SeqSplitter<T>> psplit(scala.collection.Seq<java.lang.Object>);

  public abstract scala.collection.Seq<scala.collection.parallel.SeqSplitter<T>> splitWithSignalling();

  public abstract scala.collection.Seq<scala.collection.parallel.SeqSplitter<T>> psplitWithSignalling(scala.collection.Seq<java.lang.Object>);

  public abstract int remaining();

  public abstract scala.collection.parallel.SeqSplitter<T>.Taken newTaken(int);

  public abstract scala.collection.parallel.SeqSplitter<T> take(int);

  public abstract scala.collection.parallel.SeqSplitter<T> slice(int, int);

  public abstract <S> scala.collection.parallel.SeqSplitter<T>.Mapped<S> map(scala.Function1<T, S>);

  public abstract <U, PI extends scala.collection.parallel.SeqSplitter<U>> scala.collection.parallel.SeqSplitter<T>.Appended<U, PI> appendParSeq(PI);

  public abstract <S> scala.collection.parallel.SeqSplitter<T>.Zipped<S> zipParSeq(scala.collection.parallel.SeqSplitter<S>);

  public abstract <S, U, R> scala.collection.parallel.SeqSplitter<T>.ZippedAll<U, R> zipAllParSeq(scala.collection.parallel.SeqSplitter<S>, U, R);

  public abstract scala.collection.parallel.SeqSplitter<T> reverse();

  public abstract <U> scala.collection.parallel.SeqSplitter<T>.Patched<U> patchParSeq(int, scala.collection.parallel.SeqSplitter<U>, int);
}
