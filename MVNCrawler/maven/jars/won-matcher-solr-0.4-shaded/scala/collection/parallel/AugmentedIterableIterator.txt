Compiled from "RemainsIterator.scala"
public interface scala.collection.parallel.AugmentedIterableIterator<T> extends scala.collection.parallel.RemainsIterator<T> {
  public abstract int count(scala.Function1<T, java.lang.Object>);

  public abstract <U> U reduce(scala.Function2<U, U, U>);

  public abstract <U> U fold(U, scala.Function2<U, U, U>);

  public abstract <U> U sum(scala.math.Numeric<U>);

  public abstract <U> U product(scala.math.Numeric<U>);

  public abstract <U> T min(scala.math.Ordering<U>);

  public abstract <U> T max(scala.math.Ordering<U>);

  public abstract <U> void copyToArray(java.lang.Object, int, int);

  public abstract <U> U reduceLeft(int, scala.Function2<U, U, U>);

  public abstract <S, That> scala.collection.parallel.Combiner<S, That> map2combiner(scala.Function1<T, S>, scala.collection.parallel.Combiner<S, That>);

  public abstract <S, That> scala.collection.parallel.Combiner<S, That> collect2combiner(scala.PartialFunction<T, S>, scala.collection.parallel.Combiner<S, That>);

  public abstract <S, That> scala.collection.parallel.Combiner<S, That> flatmap2combiner(scala.Function1<T, scala.collection.GenTraversableOnce<S>>, scala.collection.parallel.Combiner<S, That>);

  public abstract <U, Coll, Bld extends scala.collection.mutable.Builder<U, Coll>> Bld copy2builder(Bld);

  public abstract <U, This> scala.collection.parallel.Combiner<U, This> filter2combiner(scala.Function1<T, java.lang.Object>, scala.collection.parallel.Combiner<U, This>);

  public abstract <U, This> scala.collection.parallel.Combiner<U, This> filterNot2combiner(scala.Function1<T, java.lang.Object>, scala.collection.parallel.Combiner<U, This>);

  public abstract <U, This> scala.Tuple2<scala.collection.parallel.Combiner<U, This>, scala.collection.parallel.Combiner<U, This>> partition2combiners(scala.Function1<T, java.lang.Object>, scala.collection.parallel.Combiner<U, This>, scala.collection.parallel.Combiner<U, This>);

  public abstract <U, This> scala.collection.parallel.Combiner<U, This> take2combiner(int, scala.collection.parallel.Combiner<U, This>);

  public abstract <U, This> scala.collection.parallel.Combiner<U, This> drop2combiner(int, scala.collection.parallel.Combiner<U, This>);

  public abstract <U, This> scala.collection.parallel.Combiner<U, This> slice2combiner(int, int, scala.collection.parallel.Combiner<U, This>);

  public abstract <U, This> scala.Tuple2<scala.collection.parallel.Combiner<U, This>, scala.collection.parallel.Combiner<U, This>> splitAt2combiners(int, scala.collection.parallel.Combiner<U, This>, scala.collection.parallel.Combiner<U, This>);

  public abstract <U, This> scala.Tuple2<scala.collection.parallel.Combiner<U, This>, java.lang.Object> takeWhile2combiner(scala.Function1<T, java.lang.Object>, scala.collection.parallel.Combiner<U, This>);

  public abstract <U, This> scala.Tuple2<scala.collection.parallel.Combiner<U, This>, scala.collection.parallel.Combiner<U, This>> span2combiners(scala.Function1<T, java.lang.Object>, scala.collection.parallel.Combiner<U, This>, scala.collection.parallel.Combiner<U, This>);

  public abstract <U, A> void scanToArray(U, scala.Function2<U, U, U>, java.lang.Object, int);

  public abstract <U, That> scala.collection.parallel.Combiner<U, That> scanToCombiner(U, scala.Function2<U, U, U>, scala.collection.parallel.Combiner<U, That>);

  public abstract <U, That> scala.collection.parallel.Combiner<U, That> scanToCombiner(int, U, scala.Function2<U, U, U>, scala.collection.parallel.Combiner<U, That>);

  public abstract <U, S, That> scala.collection.parallel.Combiner<scala.Tuple2<U, S>, That> zip2combiner(scala.collection.parallel.RemainsIterator<S>, scala.collection.parallel.Combiner<scala.Tuple2<U, S>, That>);

  public abstract <U, S, That> scala.collection.parallel.Combiner<scala.Tuple2<U, S>, That> zipAll2combiner(scala.collection.parallel.RemainsIterator<S>, U, S, scala.collection.parallel.Combiner<scala.Tuple2<U, S>, That>);
}
