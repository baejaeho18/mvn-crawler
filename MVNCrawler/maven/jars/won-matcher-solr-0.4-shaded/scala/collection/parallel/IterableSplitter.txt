Compiled from "RemainsIterator.scala"
public interface scala.collection.parallel.IterableSplitter<T> extends scala.collection.parallel.AugmentedIterableIterator<T>, scala.collection.parallel.Splitter<T>, scala.collection.generic.DelegatedSignalling {
  public abstract scala.collection.generic.Signalling signalDelegate();

  public abstract void signalDelegate_$eq(scala.collection.generic.Signalling);

  public abstract scala.collection.parallel.IterableSplitter<T> dup();

  public abstract scala.collection.Seq<scala.collection.parallel.IterableSplitter<T>> split();

  public abstract scala.collection.Seq<scala.collection.parallel.IterableSplitter<T>> splitWithSignalling();

  public abstract <S> boolean shouldSplitFurther(scala.collection.parallel.ParIterable<S>, int);

  public abstract int remaining();

  public abstract java.lang.String buildString(scala.Function1<scala.Function1<java.lang.String, scala.runtime.BoxedUnit>, scala.runtime.BoxedUnit>);

  public abstract java.lang.String debugInformation();

  public abstract scala.collection.parallel.IterableSplitter<T>.Taken newTaken(int);

  public abstract <U extends scala.collection.parallel.IterableSplitter<T>.Taken> U newSliceInternal(U, int);

  public abstract scala.collection.parallel.IterableSplitter<T> take(int);

  public abstract scala.collection.parallel.IterableSplitter<T> slice(int, int);

  public abstract <S> scala.collection.parallel.IterableSplitter<T>.Mapped<S> map(scala.Function1<T, S>);

  public abstract <U, PI extends scala.collection.parallel.IterableSplitter<U>> scala.collection.parallel.IterableSplitter<T>.Appended<U, PI> appendParIterable(PI);

  public abstract <S> scala.collection.parallel.IterableSplitter<T>.Zipped<S> zipParSeq(scala.collection.parallel.SeqSplitter<S>);

  public abstract <S, U, R> scala.collection.parallel.IterableSplitter<T>.ZippedAll<U, R> zipAllParSeq(scala.collection.parallel.SeqSplitter<S>, U, R);
}
