Compiled from "ParSeqLike.scala"
public class scala.collection.parallel.ParSeqLike$Zip<U, S, That> implements scala.collection.parallel.ParSeqLike<T, Repr, Sequential>.Transformer<scala.collection.parallel.Combiner<scala.Tuple2<U, S>, That>, scala.collection.parallel.ParSeqLike<T, Repr, Sequential>.Zip<U, S, That>> {
  private final int len;

  private final scala.collection.parallel.CombinerFactory<scala.Tuple2<U, S>, That> cf;

  private final scala.collection.parallel.SeqSplitter<T> pit;

  private final scala.collection.parallel.SeqSplitter<S> otherpit;

  private volatile scala.collection.parallel.Combiner<scala.Tuple2<U, S>, That> result;

  public final scala.collection.parallel.ParSeqLike $outer;

  private volatile java.lang.Throwable throwable;

  public java.lang.String scala$collection$parallel$ParIterableLike$Accessor$$super$toString();
    Code:
       0: aload_0
       1: invokespecial #30                 // Method java/lang/Object.toString:()Ljava/lang/String;
       4: areturn

  public boolean shouldSplitFurther();
    Code:
       0: aload_0
       1: invokestatic  #39                 // Method scala/collection/parallel/ParIterableLike$Accessor$class.shouldSplitFurther:(Lscala/collection/parallel/ParIterableLike$Accessor;)Z
       4: ireturn

  public void signalAbort();
    Code:
       0: aload_0
       1: invokestatic  #44                 // Method scala/collection/parallel/ParIterableLike$Accessor$class.signalAbort:(Lscala/collection/parallel/ParIterableLike$Accessor;)V
       4: return

  public java.lang.String toString();
    Code:
       0: aload_0
       1: invokestatic  #47                 // Method scala/collection/parallel/ParIterableLike$Accessor$class.toString:(Lscala/collection/parallel/ParIterableLike$Accessor;)Ljava/lang/String;
       4: areturn

  public boolean requiresStrictSplitters();
    Code:
       0: aload_0
       1: invokestatic  #53                 // Method scala/collection/parallel/ParIterableLike$StrictSplitterCheckTask$class.requiresStrictSplitters:(Lscala/collection/parallel/ParIterableLike$StrictSplitterCheckTask;)Z
       4: ireturn

  public java.lang.Throwable throwable();
    Code:
       0: aload_0
       1: getfield      #56                 // Field throwable:Ljava/lang/Throwable;
       4: areturn

  public void throwable_$eq(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #56                 // Field throwable:Ljava/lang/Throwable;
       5: return

  public java.lang.Object repr();
    Code:
       0: aload_0
       1: invokestatic  #66                 // Method scala/collection/parallel/Task$class.repr:(Lscala/collection/parallel/Task;)Ljava/lang/Object;
       4: areturn

  public void forwardThrowable();
    Code:
       0: aload_0
       1: invokestatic  #70                 // Method scala/collection/parallel/Task$class.forwardThrowable:(Lscala/collection/parallel/Task;)V
       4: return

  public void tryLeaf(scala.Option<scala.collection.parallel.Combiner<scala.Tuple2<U, S>, That>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #75                 // Method scala/collection/parallel/Task$class.tryLeaf:(Lscala/collection/parallel/Task;Lscala/Option;)V
       5: return

  public void tryMerge(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #82                 // Method scala/collection/parallel/Task$class.tryMerge:(Lscala/collection/parallel/Task;Ljava/lang/Object;)V
       5: return

  public void mergeThrowables(scala.collection.parallel.Task<?, ?>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #88                 // Method scala/collection/parallel/Task$class.mergeThrowables:(Lscala/collection/parallel/Task;Lscala/collection/parallel/Task;)V
       5: return

  public scala.collection.parallel.SeqSplitter<T> pit();
    Code:
       0: aload_0
       1: getfield      #93                 // Field pit:Lscala/collection/parallel/SeqSplitter;
       4: areturn

  public scala.collection.parallel.SeqSplitter<S> otherpit();
    Code:
       0: aload_0
       1: getfield      #95                 // Field otherpit:Lscala/collection/parallel/SeqSplitter;
       4: areturn

  public scala.collection.parallel.Combiner<scala.Tuple2<U, S>, That> result();
    Code:
       0: aload_0
       1: getfield      #98                 // Field result:Lscala/collection/parallel/Combiner;
       4: areturn

  public void result_$eq(scala.collection.parallel.Combiner<scala.Tuple2<U, S>, That>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #98                 // Field result:Lscala/collection/parallel/Combiner;
       5: return

  public void leaf(scala.Option<scala.collection.parallel.Combiner<scala.Tuple2<U, S>, That>>);
    Code:
       0: aload_0
       1: aload_0
       2: invokevirtual #103                // Method pit:()Lscala/collection/parallel/SeqSplitter;
       5: aload_0
       6: invokevirtual #105                // Method otherpit:()Lscala/collection/parallel/SeqSplitter;
       9: aload_0
      10: getfield      #107                // Field cf:Lscala/collection/parallel/CombinerFactory;
      13: invokeinterface #112,  1          // InterfaceMethod scala/collection/parallel/CombinerFactory.apply:()Lscala/collection/parallel/Combiner;
      18: invokeinterface #118,  3          // InterfaceMethod scala/collection/parallel/SeqSplitter.zip2combiner:(Lscala/collection/parallel/RemainsIterator;Lscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
      23: invokevirtual #120                // Method result_$eq:(Lscala/collection/parallel/Combiner;)V
      26: return

  public scala.runtime.Nothing$ newSubtask(scala.collection.parallel.IterableSplitter<T>);
    Code:
       0: getstatic     #129                // Field scala/collection/parallel/package$.MODULE$:Lscala/collection/parallel/package$;
       3: invokevirtual #133                // Method scala/collection/parallel/package$.unsupported:()Lscala/runtime/Nothing$;
       6: areturn

  public scala.collection.Seq<scala.collection.parallel.ParSeqLike<T, Repr, Sequential>.Zip<U, S, That>> split();
    Code:
       0: aload_0
       1: getfield      #139                // Field len:I
       4: iconst_2
       5: idiv
       6: istore_1
       7: aload_0
       8: getfield      #139                // Field len:I
      11: aload_0
      12: getfield      #139                // Field len:I
      15: iconst_2
      16: idiv
      17: isub
      18: istore_2
      19: aload_0
      20: invokevirtual #103                // Method pit:()Lscala/collection/parallel/SeqSplitter;
      23: getstatic     #144                // Field scala/Predef$.MODULE$:Lscala/Predef$;
      26: iconst_2
      27: newarray       int
      29: dup
      30: iconst_0
      31: iload_1
      32: iastore
      33: dup
      34: iconst_1
      35: iload_2
      36: iastore
      37: invokevirtual #148                // Method scala/Predef$.wrapIntArray:([I)Lscala/collection/mutable/WrappedArray;
      40: invokeinterface #152,  2          // InterfaceMethod scala/collection/parallel/SeqSplitter.psplitWithSignalling:(Lscala/collection/Seq;)Lscala/collection/Seq;
      45: astore_3
      46: aload_0
      47: invokevirtual #105                // Method otherpit:()Lscala/collection/parallel/SeqSplitter;
      50: getstatic     #144                // Field scala/Predef$.MODULE$:Lscala/Predef$;
      53: iconst_2
      54: newarray       int
      56: dup
      57: iconst_0
      58: iload_1
      59: iastore
      60: dup
      61: iconst_1
      62: iload_2
      63: iastore
      64: invokevirtual #148                // Method scala/Predef$.wrapIntArray:([I)Lscala/collection/mutable/WrappedArray;
      67: invokeinterface #152,  2          // InterfaceMethod scala/collection/parallel/SeqSplitter.psplitWithSignalling:(Lscala/collection/Seq;)Lscala/collection/Seq;
      72: astore        4
      74: getstatic     #157                // Field scala/collection/Seq$.MODULE$:Lscala/collection/Seq$;
      77: getstatic     #144                // Field scala/Predef$.MODULE$:Lscala/Predef$;
      80: iconst_2
      81: anewarray     #2                  // class scala/collection/parallel/ParSeqLike$Zip
      84: dup
      85: iconst_0
      86: new           #2                  // class scala/collection/parallel/ParSeqLike$Zip
      89: dup
      90: aload_0
      91: invokevirtual #161                // Method scala$collection$parallel$ParSeqLike$Zip$$$outer:()Lscala/collection/parallel/ParSeqLike;
      94: iload_1
      95: aload_0
      96: getfield      #107                // Field cf:Lscala/collection/parallel/CombinerFactory;
      99: aload_3
     100: iconst_0
     101: invokeinterface #166,  2          // InterfaceMethod scala/collection/Seq.apply:(I)Ljava/lang/Object;
     106: checkcast     #114                // class scala/collection/parallel/SeqSplitter
     109: aload         4
     111: iconst_0
     112: invokeinterface #166,  2          // InterfaceMethod scala/collection/Seq.apply:(I)Ljava/lang/Object;
     117: checkcast     #114                // class scala/collection/parallel/SeqSplitter
     120: invokespecial #170                // Method "<init>":(Lscala/collection/parallel/ParSeqLike;ILscala/collection/parallel/CombinerFactory;Lscala/collection/parallel/SeqSplitter;Lscala/collection/parallel/SeqSplitter;)V
     123: aastore
     124: dup
     125: iconst_1
     126: new           #2                  // class scala/collection/parallel/ParSeqLike$Zip
     129: dup
     130: aload_0
     131: invokevirtual #161                // Method scala$collection$parallel$ParSeqLike$Zip$$$outer:()Lscala/collection/parallel/ParSeqLike;
     134: iload_2
     135: aload_0
     136: getfield      #107                // Field cf:Lscala/collection/parallel/CombinerFactory;
     139: aload_3
     140: iconst_1
     141: invokeinterface #166,  2          // InterfaceMethod scala/collection/Seq.apply:(I)Ljava/lang/Object;
     146: checkcast     #114                // class scala/collection/parallel/SeqSplitter
     149: aload         4
     151: iconst_1
     152: invokeinterface #166,  2          // InterfaceMethod scala/collection/Seq.apply:(I)Ljava/lang/Object;
     157: checkcast     #114                // class scala/collection/parallel/SeqSplitter
     160: invokespecial #170                // Method "<init>":(Lscala/collection/parallel/ParSeqLike;ILscala/collection/parallel/CombinerFactory;Lscala/collection/parallel/SeqSplitter;Lscala/collection/parallel/SeqSplitter;)V
     163: aastore
     164: checkcast     #172                // class "[Ljava/lang/Object;"
     167: invokevirtual #176                // Method scala/Predef$.wrapRefArray:([Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
     170: invokevirtual #179                // Method scala/collection/Seq$.apply:(Lscala/collection/Seq;)Lscala/collection/GenTraversable;
     173: checkcast     #163                // class scala/collection/Seq
     176: areturn

  public void merge(scala.collection.parallel.ParSeqLike<T, Repr, Sequential>.Zip<U, S, That>);
    Code:
       0: aload_0
       1: aload_0
       2: invokevirtual #188                // Method result:()Lscala/collection/parallel/Combiner;
       5: aload_1
       6: invokevirtual #188                // Method result:()Lscala/collection/parallel/Combiner;
       9: invokeinterface #194,  2          // InterfaceMethod scala/collection/parallel/Combiner.combine:(Lscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
      14: invokevirtual #120                // Method result_$eq:(Lscala/collection/parallel/Combiner;)V
      17: return

  public scala.collection.parallel.ParSeqLike scala$collection$parallel$ParSeqLike$Zip$$$outer();
    Code:
       0: aload_0
       1: getfield      #196                // Field $outer:Lscala/collection/parallel/ParSeqLike;
       4: areturn

  public scala.collection.parallel.ParIterableLike scala$collection$parallel$ParIterableLike$Accessor$$$outer();
    Code:
       0: aload_0
       1: invokevirtual #161                // Method scala$collection$parallel$ParSeqLike$Zip$$$outer:()Lscala/collection/parallel/ParSeqLike;
       4: areturn

  public scala.collection.parallel.ParIterableLike scala$collection$parallel$ParIterableLike$StrictSplitterCheckTask$$$outer();
    Code:
       0: aload_0
       1: invokevirtual #161                // Method scala$collection$parallel$ParSeqLike$Zip$$$outer:()Lscala/collection/parallel/ParSeqLike;
       4: areturn

  public void merge(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #2                  // class scala/collection/parallel/ParSeqLike$Zip
       5: invokevirtual #201                // Method merge:(Lscala/collection/parallel/ParSeqLike$Zip;)V
       8: return

  public scala.collection.parallel.ParIterableLike$Accessor newSubtask(scala.collection.parallel.IterableSplitter);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #204                // Method newSubtask:(Lscala/collection/parallel/IterableSplitter;)Lscala/runtime/Nothing$;
       5: athrow

  public void result_$eq(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #190                // class scala/collection/parallel/Combiner
       5: invokevirtual #120                // Method result_$eq:(Lscala/collection/parallel/Combiner;)V
       8: return

  public java.lang.Object result();
    Code:
       0: aload_0
       1: invokevirtual #188                // Method result:()Lscala/collection/parallel/Combiner;
       4: areturn

  public scala.collection.parallel.IterableSplitter pit();
    Code:
       0: aload_0
       1: invokevirtual #103                // Method pit:()Lscala/collection/parallel/SeqSplitter;
       4: areturn

  public scala.collection.parallel.ParSeqLike$Zip(scala.collection.parallel.ParSeqLike<T, Repr, Sequential>, int, scala.collection.parallel.CombinerFactory<scala.Tuple2<U, S>, That>, scala.collection.parallel.SeqSplitter<T>, scala.collection.parallel.SeqSplitter<S>);
    Code:
       0: aload_0
       1: iload_2
       2: putfield      #139                // Field len:I
       5: aload_0
       6: aload_3
       7: putfield      #107                // Field cf:Lscala/collection/parallel/CombinerFactory;
      10: aload_0
      11: aload         4
      13: putfield      #93                 // Field pit:Lscala/collection/parallel/SeqSplitter;
      16: aload_0
      17: aload         5
      19: putfield      #95                 // Field otherpit:Lscala/collection/parallel/SeqSplitter;
      22: aload_1
      23: ifnonnull     28
      26: aconst_null
      27: athrow
      28: aload_0
      29: aload_1
      30: putfield      #196                // Field $outer:Lscala/collection/parallel/ParSeqLike;
      33: aload_0
      34: invokespecial #207                // Method java/lang/Object."<init>":()V
      37: aload_0
      38: invokestatic  #210                // Method scala/collection/parallel/Task$class.$init$:(Lscala/collection/parallel/Task;)V
      41: aload_0
      42: invokestatic  #213                // Method scala/collection/parallel/ParIterableLike$StrictSplitterCheckTask$class.$init$:(Lscala/collection/parallel/ParIterableLike$StrictSplitterCheckTask;)V
      45: aload_0
      46: invokestatic  #215                // Method scala/collection/parallel/ParIterableLike$Accessor$class.$init$:(Lscala/collection/parallel/ParIterableLike$Accessor;)V
      49: aload_0
      50: aconst_null
      51: putfield      #98                 // Field result:Lscala/collection/parallel/Combiner;
      54: return
}
