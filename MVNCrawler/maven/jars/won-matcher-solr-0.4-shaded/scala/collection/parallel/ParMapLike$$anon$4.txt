Compiled from "ParMapLike.scala"
public final class scala.collection.parallel.ParMapLike$$anon$4 implements scala.collection.parallel.IterableSplitter<V> {
  private final scala.collection.parallel.IterableSplitter<scala.Tuple2<K, V>> iter;

  private final scala.collection.parallel.ParMapLike $outer;

  private scala.collection.generic.Signalling signalDelegate;

  public scala.collection.generic.Signalling signalDelegate();
    Code:
       0: aload_0
       1: getfield      #20                 // Field signalDelegate:Lscala/collection/generic/Signalling;
       4: areturn

  public void signalDelegate_$eq(scala.collection.generic.Signalling);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #20                 // Field signalDelegate:Lscala/collection/generic/Signalling;
       5: return

  public scala.collection.Seq<scala.collection.parallel.IterableSplitter<V>> splitWithSignalling();
    Code:
       0: aload_0
       1: invokestatic  #32                 // Method scala/collection/parallel/IterableSplitter$class.splitWithSignalling:(Lscala/collection/parallel/IterableSplitter;)Lscala/collection/Seq;
       4: areturn

  public <S> boolean shouldSplitFurther(scala.collection.parallel.ParIterable<S>, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #37                 // Method scala/collection/parallel/IterableSplitter$class.shouldSplitFurther:(Lscala/collection/parallel/IterableSplitter;Lscala/collection/parallel/ParIterable;I)Z
       6: ireturn

  public java.lang.String buildString(scala.Function1<scala.Function1<java.lang.String, scala.runtime.BoxedUnit>, scala.runtime.BoxedUnit>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #46                 // Method scala/collection/parallel/IterableSplitter$class.buildString:(Lscala/collection/parallel/IterableSplitter;Lscala/Function1;)Ljava/lang/String;
       5: areturn

  public java.lang.String debugInformation();
    Code:
       0: aload_0
       1: invokestatic  #53                 // Method scala/collection/parallel/IterableSplitter$class.debugInformation:(Lscala/collection/parallel/IterableSplitter;)Ljava/lang/String;
       4: areturn

  public scala.collection.parallel.IterableSplitter<V>.Taken newTaken(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #58                 // Method scala/collection/parallel/IterableSplitter$class.newTaken:(Lscala/collection/parallel/IterableSplitter;I)Lscala/collection/parallel/IterableSplitter$Taken;
       5: areturn

  public <U extends scala.collection.parallel.IterableSplitter<V>.Taken> U newSliceInternal(U, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #64                 // Method scala/collection/parallel/IterableSplitter$class.newSliceInternal:(Lscala/collection/parallel/IterableSplitter;Lscala/collection/parallel/IterableSplitter$Taken;I)Lscala/collection/parallel/IterableSplitter$Taken;
       6: areturn

  public scala.collection.parallel.IterableSplitter<V> take(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #72                 // Method scala/collection/parallel/IterableSplitter$class.take:(Lscala/collection/parallel/IterableSplitter;I)Lscala/collection/parallel/IterableSplitter;
       5: areturn

  public scala.collection.parallel.IterableSplitter<V> slice(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokestatic  #78                 // Method scala/collection/parallel/IterableSplitter$class.slice:(Lscala/collection/parallel/IterableSplitter;II)Lscala/collection/parallel/IterableSplitter;
       6: areturn

  public <S> scala.collection.parallel.IterableSplitter<V>.Mapped<S> map(scala.Function1<V, S>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #84                 // Method scala/collection/parallel/IterableSplitter$class.map:(Lscala/collection/parallel/IterableSplitter;Lscala/Function1;)Lscala/collection/parallel/IterableSplitter$Mapped;
       5: areturn

  public <U, PI extends scala.collection.parallel.IterableSplitter<U>> scala.collection.parallel.IterableSplitter<V>.Appended<U, PI> appendParIterable(PI);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #90                 // Method scala/collection/parallel/IterableSplitter$class.appendParIterable:(Lscala/collection/parallel/IterableSplitter;Lscala/collection/parallel/IterableSplitter;)Lscala/collection/parallel/IterableSplitter$Appended;
       5: areturn

  public <S> scala.collection.parallel.IterableSplitter<V>.Zipped<S> zipParSeq(scala.collection.parallel.SeqSplitter<S>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #96                 // Method scala/collection/parallel/IterableSplitter$class.zipParSeq:(Lscala/collection/parallel/IterableSplitter;Lscala/collection/parallel/SeqSplitter;)Lscala/collection/parallel/IterableSplitter$Zipped;
       5: areturn

  public <S, U, R> scala.collection.parallel.IterableSplitter<V>.ZippedAll<U, R> zipAllParSeq(scala.collection.parallel.SeqSplitter<S>, U, R);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #102                // Method scala/collection/parallel/IterableSplitter$class.zipAllParSeq:(Lscala/collection/parallel/IterableSplitter;Lscala/collection/parallel/SeqSplitter;Ljava/lang/Object;Ljava/lang/Object;)Lscala/collection/parallel/IterableSplitter$ZippedAll;
       7: areturn

  public boolean isAborted();
    Code:
       0: aload_0
       1: invokestatic  #112                // Method scala/collection/generic/DelegatedSignalling$class.isAborted:(Lscala/collection/generic/DelegatedSignalling;)Z
       4: ireturn

  public void abort();
    Code:
       0: aload_0
       1: invokestatic  #117                // Method scala/collection/generic/DelegatedSignalling$class.abort:(Lscala/collection/generic/DelegatedSignalling;)V
       4: return

  public int indexFlag();
    Code:
       0: aload_0
       1: invokestatic  #122                // Method scala/collection/generic/DelegatedSignalling$class.indexFlag:(Lscala/collection/generic/DelegatedSignalling;)I
       4: ireturn

  public void setIndexFlag(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #127                // Method scala/collection/generic/DelegatedSignalling$class.setIndexFlag:(Lscala/collection/generic/DelegatedSignalling;I)V
       5: return

  public void setIndexFlagIfGreater(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #130                // Method scala/collection/generic/DelegatedSignalling$class.setIndexFlagIfGreater:(Lscala/collection/generic/DelegatedSignalling;I)V
       5: return

  public void setIndexFlagIfLesser(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #133                // Method scala/collection/generic/DelegatedSignalling$class.setIndexFlagIfLesser:(Lscala/collection/generic/DelegatedSignalling;I)V
       5: return

  public int tag();
    Code:
       0: aload_0
       1: invokestatic  #136                // Method scala/collection/generic/DelegatedSignalling$class.tag:(Lscala/collection/generic/DelegatedSignalling;)I
       4: ireturn

  public int count(scala.Function1<V, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #143                // Method scala/collection/parallel/AugmentedIterableIterator$class.count:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/Function1;)I
       5: ireturn

  public <U> U reduce(scala.Function2<U, U, U>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #149                // Method scala/collection/parallel/AugmentedIterableIterator$class.reduce:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/Function2;)Ljava/lang/Object;
       5: areturn

  public <U> U fold(U, scala.Function2<U, U, U>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #156                // Method scala/collection/parallel/AugmentedIterableIterator$class.fold:(Lscala/collection/parallel/AugmentedIterableIterator;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
       6: areturn

  public <U> U sum(scala.math.Numeric<U>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #162                // Method scala/collection/parallel/AugmentedIterableIterator$class.sum:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/math/Numeric;)Ljava/lang/Object;
       5: areturn

  public <U> U product(scala.math.Numeric<U>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #167                // Method scala/collection/parallel/AugmentedIterableIterator$class.product:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/math/Numeric;)Ljava/lang/Object;
       5: areturn

  public <U> V min(scala.math.Ordering<U>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #172                // Method scala/collection/parallel/AugmentedIterableIterator$class.min:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/math/Ordering;)Ljava/lang/Object;
       5: areturn

  public <U> V max(scala.math.Ordering<U>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #177                // Method scala/collection/parallel/AugmentedIterableIterator$class.max:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/math/Ordering;)Ljava/lang/Object;
       5: areturn

  public <U> void copyToArray(java.lang.Object, int, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: invokestatic  #182                // Method scala/collection/parallel/AugmentedIterableIterator$class.copyToArray:(Lscala/collection/parallel/AugmentedIterableIterator;Ljava/lang/Object;II)V
       7: return

  public <U> U reduceLeft(int, scala.Function2<U, U, U>);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokestatic  #190                // Method scala/collection/parallel/AugmentedIterableIterator$class.reduceLeft:(Lscala/collection/parallel/AugmentedIterableIterator;ILscala/Function2;)Ljava/lang/Object;
       6: areturn

  public <S, That> scala.collection.parallel.Combiner<S, That> map2combiner(scala.Function1<V, S>, scala.collection.parallel.Combiner<S, That>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #196                // Method scala/collection/parallel/AugmentedIterableIterator$class.map2combiner:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/Function1;Lscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
       6: areturn

  public <S, That> scala.collection.parallel.Combiner<S, That> collect2combiner(scala.PartialFunction<V, S>, scala.collection.parallel.Combiner<S, That>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #203                // Method scala/collection/parallel/AugmentedIterableIterator$class.collect2combiner:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/PartialFunction;Lscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
       6: areturn

  public <S, That> scala.collection.parallel.Combiner<S, That> flatmap2combiner(scala.Function1<V, scala.collection.GenTraversableOnce<S>>, scala.collection.parallel.Combiner<S, That>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #208                // Method scala/collection/parallel/AugmentedIterableIterator$class.flatmap2combiner:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/Function1;Lscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
       6: areturn

  public <U, Coll, Bld extends scala.collection.mutable.Builder<U, Coll>> Bld copy2builder(Bld);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #213                // Method scala/collection/parallel/AugmentedIterableIterator$class.copy2builder:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/collection/mutable/Builder;)Lscala/collection/mutable/Builder;
       5: areturn

  public <U, This> scala.collection.parallel.Combiner<U, This> filter2combiner(scala.Function1<V, java.lang.Object>, scala.collection.parallel.Combiner<U, This>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #218                // Method scala/collection/parallel/AugmentedIterableIterator$class.filter2combiner:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/Function1;Lscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
       6: areturn

  public <U, This> scala.collection.parallel.Combiner<U, This> filterNot2combiner(scala.Function1<V, java.lang.Object>, scala.collection.parallel.Combiner<U, This>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #222                // Method scala/collection/parallel/AugmentedIterableIterator$class.filterNot2combiner:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/Function1;Lscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
       6: areturn

  public <U, This> scala.Tuple2<scala.collection.parallel.Combiner<U, This>, scala.collection.parallel.Combiner<U, This>> partition2combiners(scala.Function1<V, java.lang.Object>, scala.collection.parallel.Combiner<U, This>, scala.collection.parallel.Combiner<U, This>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #227                // Method scala/collection/parallel/AugmentedIterableIterator$class.partition2combiners:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/Function1;Lscala/collection/parallel/Combiner;Lscala/collection/parallel/Combiner;)Lscala/Tuple2;
       7: areturn

  public <U, This> scala.collection.parallel.Combiner<U, This> take2combiner(int, scala.collection.parallel.Combiner<U, This>);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokestatic  #234                // Method scala/collection/parallel/AugmentedIterableIterator$class.take2combiner:(Lscala/collection/parallel/AugmentedIterableIterator;ILscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
       6: areturn

  public <U, This> scala.collection.parallel.Combiner<U, This> drop2combiner(int, scala.collection.parallel.Combiner<U, This>);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokestatic  #237                // Method scala/collection/parallel/AugmentedIterableIterator$class.drop2combiner:(Lscala/collection/parallel/AugmentedIterableIterator;ILscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
       6: areturn

  public <U, This> scala.collection.parallel.Combiner<U, This> slice2combiner(int, int, scala.collection.parallel.Combiner<U, This>);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: aload_3
       4: invokestatic  #242                // Method scala/collection/parallel/AugmentedIterableIterator$class.slice2combiner:(Lscala/collection/parallel/AugmentedIterableIterator;IILscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
       7: areturn

  public <U, This> scala.Tuple2<scala.collection.parallel.Combiner<U, This>, scala.collection.parallel.Combiner<U, This>> splitAt2combiners(int, scala.collection.parallel.Combiner<U, This>, scala.collection.parallel.Combiner<U, This>);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #247                // Method scala/collection/parallel/AugmentedIterableIterator$class.splitAt2combiners:(Lscala/collection/parallel/AugmentedIterableIterator;ILscala/collection/parallel/Combiner;Lscala/collection/parallel/Combiner;)Lscala/Tuple2;
       7: areturn

  public <U, This> scala.Tuple2<scala.collection.parallel.Combiner<U, This>, java.lang.Object> takeWhile2combiner(scala.Function1<V, java.lang.Object>, scala.collection.parallel.Combiner<U, This>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #255                // Method scala/collection/parallel/AugmentedIterableIterator$class.takeWhile2combiner:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/Function1;Lscala/collection/parallel/Combiner;)Lscala/Tuple2;
       6: areturn

  public <U, This> scala.Tuple2<scala.collection.parallel.Combiner<U, This>, scala.collection.parallel.Combiner<U, This>> span2combiners(scala.Function1<V, java.lang.Object>, scala.collection.parallel.Combiner<U, This>, scala.collection.parallel.Combiner<U, This>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #258                // Method scala/collection/parallel/AugmentedIterableIterator$class.span2combiners:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/Function1;Lscala/collection/parallel/Combiner;Lscala/collection/parallel/Combiner;)Lscala/Tuple2;
       7: areturn

  public <U, A> void scanToArray(U, scala.Function2<U, U, U>, java.lang.Object, int);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: iload         4
       6: invokestatic  #263                // Method scala/collection/parallel/AugmentedIterableIterator$class.scanToArray:(Lscala/collection/parallel/AugmentedIterableIterator;Ljava/lang/Object;Lscala/Function2;Ljava/lang/Object;I)V
       9: return

  public <U, That> scala.collection.parallel.Combiner<U, That> scanToCombiner(U, scala.Function2<U, U, U>, scala.collection.parallel.Combiner<U, That>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #268                // Method scala/collection/parallel/AugmentedIterableIterator$class.scanToCombiner:(Lscala/collection/parallel/AugmentedIterableIterator;Ljava/lang/Object;Lscala/Function2;Lscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
       7: areturn

  public <U, That> scala.collection.parallel.Combiner<U, That> scanToCombiner(int, U, scala.Function2<U, U, U>, scala.collection.parallel.Combiner<U, That>);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #273                // Method scala/collection/parallel/AugmentedIterableIterator$class.scanToCombiner:(Lscala/collection/parallel/AugmentedIterableIterator;ILjava/lang/Object;Lscala/Function2;Lscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
       9: areturn

  public <U, S, That> scala.collection.parallel.Combiner<scala.Tuple2<U, S>, That> zip2combiner(scala.collection.parallel.RemainsIterator<S>, scala.collection.parallel.Combiner<scala.Tuple2<U, S>, That>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #278                // Method scala/collection/parallel/AugmentedIterableIterator$class.zip2combiner:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/collection/parallel/RemainsIterator;Lscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
       6: areturn

  public <U, S, That> scala.collection.parallel.Combiner<scala.Tuple2<U, S>, That> zipAll2combiner(scala.collection.parallel.RemainsIterator<S>, U, S, scala.collection.parallel.Combiner<scala.Tuple2<U, S>, That>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #285                // Method scala/collection/parallel/AugmentedIterableIterator$class.zipAll2combiner:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/collection/parallel/RemainsIterator;Ljava/lang/Object;Ljava/lang/Object;Lscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
       9: areturn

  public boolean isRemainingCheap();
    Code:
       0: aload_0
       1: invokestatic  #293                // Method scala/collection/parallel/RemainsIterator$class.isRemainingCheap:(Lscala/collection/parallel/RemainsIterator;)Z
       4: ireturn

  public scala.collection.Iterator<V> seq();
    Code:
       0: aload_0
       1: invokestatic  #300                // Method scala/collection/Iterator$class.seq:(Lscala/collection/Iterator;)Lscala/collection/Iterator;
       4: areturn

  public boolean isEmpty();
    Code:
       0: aload_0
       1: invokestatic  #304                // Method scala/collection/Iterator$class.isEmpty:(Lscala/collection/Iterator;)Z
       4: ireturn

  public boolean isTraversableAgain();
    Code:
       0: aload_0
       1: invokestatic  #307                // Method scala/collection/Iterator$class.isTraversableAgain:(Lscala/collection/Iterator;)Z
       4: ireturn

  public boolean hasDefiniteSize();
    Code:
       0: aload_0
       1: invokestatic  #310                // Method scala/collection/Iterator$class.hasDefiniteSize:(Lscala/collection/Iterator;)Z
       4: ireturn

  public scala.collection.Iterator<V> drop(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #315                // Method scala/collection/Iterator$class.drop:(Lscala/collection/Iterator;I)Lscala/collection/Iterator;
       5: areturn

  public <B> scala.collection.Iterator<B> $plus$plus(scala.Function0<scala.collection.GenTraversableOnce<B>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #320                // Method scala/collection/Iterator$class.$plus$plus:(Lscala/collection/Iterator;Lscala/Function0;)Lscala/collection/Iterator;
       5: areturn

  public <B> scala.collection.Iterator<B> flatMap(scala.Function1<V, scala.collection.GenTraversableOnce<B>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #326                // Method scala/collection/Iterator$class.flatMap:(Lscala/collection/Iterator;Lscala/Function1;)Lscala/collection/Iterator;
       5: areturn

  public scala.collection.Iterator<V> filter(scala.Function1<V, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #329                // Method scala/collection/Iterator$class.filter:(Lscala/collection/Iterator;Lscala/Function1;)Lscala/collection/Iterator;
       5: areturn

  public <B> boolean corresponds(scala.collection.GenTraversableOnce<B>, scala.Function2<V, B, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #334                // Method scala/collection/Iterator$class.corresponds:(Lscala/collection/Iterator;Lscala/collection/GenTraversableOnce;Lscala/Function2;)Z
       6: ireturn

  public scala.collection.Iterator<V> withFilter(scala.Function1<V, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #338                // Method scala/collection/Iterator$class.withFilter:(Lscala/collection/Iterator;Lscala/Function1;)Lscala/collection/Iterator;
       5: areturn

  public scala.collection.Iterator<V> filterNot(scala.Function1<V, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #341                // Method scala/collection/Iterator$class.filterNot:(Lscala/collection/Iterator;Lscala/Function1;)Lscala/collection/Iterator;
       5: areturn

  public <B> scala.collection.Iterator<B> collect(scala.PartialFunction<V, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #346                // Method scala/collection/Iterator$class.collect:(Lscala/collection/Iterator;Lscala/PartialFunction;)Lscala/collection/Iterator;
       5: areturn

  public <B> scala.collection.Iterator<B> scanLeft(B, scala.Function2<B, V, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #351                // Method scala/collection/Iterator$class.scanLeft:(Lscala/collection/Iterator;Ljava/lang/Object;Lscala/Function2;)Lscala/collection/Iterator;
       6: areturn

  public <B> scala.collection.Iterator<B> scanRight(B, scala.Function2<V, B, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #354                // Method scala/collection/Iterator$class.scanRight:(Lscala/collection/Iterator;Ljava/lang/Object;Lscala/Function2;)Lscala/collection/Iterator;
       6: areturn

  public scala.collection.Iterator<V> takeWhile(scala.Function1<V, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #357                // Method scala/collection/Iterator$class.takeWhile:(Lscala/collection/Iterator;Lscala/Function1;)Lscala/collection/Iterator;
       5: areturn

  public scala.Tuple2<scala.collection.Iterator<V>, scala.collection.Iterator<V>> partition(scala.Function1<V, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #362                // Method scala/collection/Iterator$class.partition:(Lscala/collection/Iterator;Lscala/Function1;)Lscala/Tuple2;
       5: areturn

  public scala.Tuple2<scala.collection.Iterator<V>, scala.collection.Iterator<V>> span(scala.Function1<V, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #365                // Method scala/collection/Iterator$class.span:(Lscala/collection/Iterator;Lscala/Function1;)Lscala/Tuple2;
       5: areturn

  public scala.collection.Iterator<V> dropWhile(scala.Function1<V, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #368                // Method scala/collection/Iterator$class.dropWhile:(Lscala/collection/Iterator;Lscala/Function1;)Lscala/collection/Iterator;
       5: areturn

  public <B> scala.collection.Iterator<scala.Tuple2<V, B>> zip(scala.collection.Iterator<B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #372                // Method scala/collection/Iterator$class.zip:(Lscala/collection/Iterator;Lscala/collection/Iterator;)Lscala/collection/Iterator;
       5: areturn

  public <A1> scala.collection.Iterator<A1> padTo(int, A1);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokestatic  #378                // Method scala/collection/Iterator$class.padTo:(Lscala/collection/Iterator;ILjava/lang/Object;)Lscala/collection/Iterator;
       6: areturn

  public scala.collection.Iterator<scala.Tuple2<V, java.lang.Object>> zipWithIndex();
    Code:
       0: aload_0
       1: invokestatic  #382                // Method scala/collection/Iterator$class.zipWithIndex:(Lscala/collection/Iterator;)Lscala/collection/Iterator;
       4: areturn

  public <B, A1, B1> scala.collection.Iterator<scala.Tuple2<A1, B1>> zipAll(scala.collection.Iterator<B>, A1, B1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #387                // Method scala/collection/Iterator$class.zipAll:(Lscala/collection/Iterator;Lscala/collection/Iterator;Ljava/lang/Object;Ljava/lang/Object;)Lscala/collection/Iterator;
       7: areturn

  public <U> void foreach(scala.Function1<V, U>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #392                // Method scala/collection/Iterator$class.foreach:(Lscala/collection/Iterator;Lscala/Function1;)V
       5: return

  public boolean forall(scala.Function1<V, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #397                // Method scala/collection/Iterator$class.forall:(Lscala/collection/Iterator;Lscala/Function1;)Z
       5: ireturn

  public boolean exists(scala.Function1<V, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #400                // Method scala/collection/Iterator$class.exists:(Lscala/collection/Iterator;Lscala/Function1;)Z
       5: ireturn

  public boolean contains(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #405                // Method scala/collection/Iterator$class.contains:(Lscala/collection/Iterator;Ljava/lang/Object;)Z
       5: ireturn

  public scala.Option<V> find(scala.Function1<V, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #410                // Method scala/collection/Iterator$class.find:(Lscala/collection/Iterator;Lscala/Function1;)Lscala/Option;
       5: areturn

  public int indexWhere(scala.Function1<V, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #414                // Method scala/collection/Iterator$class.indexWhere:(Lscala/collection/Iterator;Lscala/Function1;)I
       5: ireturn

  public <B> int indexOf(B);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #419                // Method scala/collection/Iterator$class.indexOf:(Lscala/collection/Iterator;Ljava/lang/Object;)I
       5: ireturn

  public scala.collection.BufferedIterator<V> buffered();
    Code:
       0: aload_0
       1: invokestatic  #424                // Method scala/collection/Iterator$class.buffered:(Lscala/collection/Iterator;)Lscala/collection/BufferedIterator;
       4: areturn

  public <B> scala.collection.Iterator<V>.GroupedIterator<B> grouped(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #429                // Method scala/collection/Iterator$class.grouped:(Lscala/collection/Iterator;I)Lscala/collection/Iterator$GroupedIterator;
       5: areturn

  public <B> scala.collection.Iterator<V>.GroupedIterator<B> sliding(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokestatic  #435                // Method scala/collection/Iterator$class.sliding:(Lscala/collection/Iterator;II)Lscala/collection/Iterator$GroupedIterator;
       6: areturn

  public int length();
    Code:
       0: aload_0
       1: invokestatic  #440                // Method scala/collection/Iterator$class.length:(Lscala/collection/Iterator;)I
       4: ireturn

  public scala.Tuple2<scala.collection.Iterator<V>, scala.collection.Iterator<V>> duplicate();
    Code:
       0: aload_0
       1: invokestatic  #445                // Method scala/collection/Iterator$class.duplicate:(Lscala/collection/Iterator;)Lscala/Tuple2;
       4: areturn

  public <B> scala.collection.Iterator<B> patch(int, scala.collection.Iterator<B>, int);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: iload_3
       4: invokestatic  #450                // Method scala/collection/Iterator$class.patch:(Lscala/collection/Iterator;ILscala/collection/Iterator;I)Lscala/collection/Iterator;
       7: areturn

  public boolean sameElements(scala.collection.Iterator<?>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #456                // Method scala/collection/Iterator$class.sameElements:(Lscala/collection/Iterator;Lscala/collection/Iterator;)Z
       5: ireturn

  public scala.collection.Traversable<V> toTraversable();
    Code:
       0: aload_0
       1: invokestatic  #461                // Method scala/collection/Iterator$class.toTraversable:(Lscala/collection/Iterator;)Lscala/collection/Traversable;
       4: areturn

  public scala.collection.Iterator<V> toIterator();
    Code:
       0: aload_0
       1: invokestatic  #464                // Method scala/collection/Iterator$class.toIterator:(Lscala/collection/Iterator;)Lscala/collection/Iterator;
       4: areturn

  public scala.collection.immutable.Stream<V> toStream();
    Code:
       0: aload_0
       1: invokestatic  #469                // Method scala/collection/Iterator$class.toStream:(Lscala/collection/Iterator;)Lscala/collection/immutable/Stream;
       4: areturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: invokestatic  #473                // Method scala/collection/Iterator$class.toString:(Lscala/collection/Iterator;)Ljava/lang/String;
       4: areturn

  public <B> int sliding$default$2();
    Code:
       0: aload_0
       1: invokestatic  #476                // Method scala/collection/Iterator$class.sliding$default$2:(Lscala/collection/Iterator;)I
       4: ireturn

  public scala.collection.immutable.List<V> reversed();
    Code:
       0: aload_0
       1: invokestatic  #483                // Method scala/collection/TraversableOnce$class.reversed:(Lscala/collection/TraversableOnce;)Lscala/collection/immutable/List;
       4: areturn

  public int size();
    Code:
       0: aload_0
       1: invokestatic  #486                // Method scala/collection/TraversableOnce$class.size:(Lscala/collection/TraversableOnce;)I
       4: ireturn

  public boolean nonEmpty();
    Code:
       0: aload_0
       1: invokestatic  #490                // Method scala/collection/TraversableOnce$class.nonEmpty:(Lscala/collection/TraversableOnce;)Z
       4: ireturn

  public <B> scala.Option<B> collectFirst(scala.PartialFunction<V, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #495                // Method scala/collection/TraversableOnce$class.collectFirst:(Lscala/collection/TraversableOnce;Lscala/PartialFunction;)Lscala/Option;
       5: areturn

  public <B> B $div$colon(B, scala.Function2<B, V, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #499                // Method scala/collection/TraversableOnce$class.$div$colon:(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
       6: areturn

  public <B> B $colon$bslash(B, scala.Function2<V, B, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #502                // Method scala/collection/TraversableOnce$class.$colon$bslash:(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
       6: areturn

  public <B> B foldLeft(B, scala.Function2<B, V, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #505                // Method scala/collection/TraversableOnce$class.foldLeft:(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
       6: areturn

  public <B> B foldRight(B, scala.Function2<V, B, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #508                // Method scala/collection/TraversableOnce$class.foldRight:(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
       6: areturn

  public <B> B reduceLeft(scala.Function2<B, V, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #511                // Method scala/collection/TraversableOnce$class.reduceLeft:(Lscala/collection/TraversableOnce;Lscala/Function2;)Ljava/lang/Object;
       5: areturn

  public <B> B reduceRight(scala.Function2<V, B, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #514                // Method scala/collection/TraversableOnce$class.reduceRight:(Lscala/collection/TraversableOnce;Lscala/Function2;)Ljava/lang/Object;
       5: areturn

  public <B> scala.Option<B> reduceLeftOption(scala.Function2<B, V, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #519                // Method scala/collection/TraversableOnce$class.reduceLeftOption:(Lscala/collection/TraversableOnce;Lscala/Function2;)Lscala/Option;
       5: areturn

  public <B> scala.Option<B> reduceRightOption(scala.Function2<V, B, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #522                // Method scala/collection/TraversableOnce$class.reduceRightOption:(Lscala/collection/TraversableOnce;Lscala/Function2;)Lscala/Option;
       5: areturn

  public <A1> scala.Option<A1> reduceOption(scala.Function2<A1, A1, A1>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #525                // Method scala/collection/TraversableOnce$class.reduceOption:(Lscala/collection/TraversableOnce;Lscala/Function2;)Lscala/Option;
       5: areturn

  public <B> B aggregate(scala.Function0<B>, scala.Function2<B, V, B>, scala.Function2<B, B, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #530                // Method scala/collection/TraversableOnce$class.aggregate:(Lscala/collection/TraversableOnce;Lscala/Function0;Lscala/Function2;Lscala/Function2;)Ljava/lang/Object;
       7: areturn

  public <B> V maxBy(scala.Function1<V, B>, scala.math.Ordering<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #537                // Method scala/collection/TraversableOnce$class.maxBy:(Lscala/collection/TraversableOnce;Lscala/Function1;Lscala/math/Ordering;)Ljava/lang/Object;
       6: areturn

  public <B> V minBy(scala.Function1<V, B>, scala.math.Ordering<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #541                // Method scala/collection/TraversableOnce$class.minBy:(Lscala/collection/TraversableOnce;Lscala/Function1;Lscala/math/Ordering;)Ljava/lang/Object;
       6: areturn

  public <B> void copyToBuffer(scala.collection.mutable.Buffer<B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #546                // Method scala/collection/TraversableOnce$class.copyToBuffer:(Lscala/collection/TraversableOnce;Lscala/collection/mutable/Buffer;)V
       5: return

  public <B> void copyToArray(java.lang.Object, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #552                // Method scala/collection/TraversableOnce$class.copyToArray:(Lscala/collection/TraversableOnce;Ljava/lang/Object;I)V
       6: return

  public <B> void copyToArray(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #558                // Method scala/collection/TraversableOnce$class.copyToArray:(Lscala/collection/TraversableOnce;Ljava/lang/Object;)V
       5: return

  public <B> java.lang.Object toArray(scala.reflect.ClassTag<B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #563                // Method scala/collection/TraversableOnce$class.toArray:(Lscala/collection/TraversableOnce;Lscala/reflect/ClassTag;)Ljava/lang/Object;
       5: areturn

  public scala.collection.immutable.List<V> toList();
    Code:
       0: aload_0
       1: invokestatic  #568                // Method scala/collection/TraversableOnce$class.toList:(Lscala/collection/TraversableOnce;)Lscala/collection/immutable/List;
       4: areturn

  public scala.collection.Iterable<V> toIterable();
    Code:
       0: aload_0
       1: invokestatic  #573                // Method scala/collection/TraversableOnce$class.toIterable:(Lscala/collection/TraversableOnce;)Lscala/collection/Iterable;
       4: areturn

  public scala.collection.Seq<V> toSeq();
    Code:
       0: aload_0
       1: invokestatic  #577                // Method scala/collection/TraversableOnce$class.toSeq:(Lscala/collection/TraversableOnce;)Lscala/collection/Seq;
       4: areturn

  public scala.collection.immutable.IndexedSeq<V> toIndexedSeq();
    Code:
       0: aload_0
       1: invokestatic  #582                // Method scala/collection/TraversableOnce$class.toIndexedSeq:(Lscala/collection/TraversableOnce;)Lscala/collection/immutable/IndexedSeq;
       4: areturn

  public <B> scala.collection.mutable.Buffer<B> toBuffer();
    Code:
       0: aload_0
       1: invokestatic  #587                // Method scala/collection/TraversableOnce$class.toBuffer:(Lscala/collection/TraversableOnce;)Lscala/collection/mutable/Buffer;
       4: areturn

  public <B> scala.collection.immutable.Set<B> toSet();
    Code:
       0: aload_0
       1: invokestatic  #592                // Method scala/collection/TraversableOnce$class.toSet:(Lscala/collection/TraversableOnce;)Lscala/collection/immutable/Set;
       4: areturn

  public scala.collection.immutable.Vector<V> toVector();
    Code:
       0: aload_0
       1: invokestatic  #597                // Method scala/collection/TraversableOnce$class.toVector:(Lscala/collection/TraversableOnce;)Lscala/collection/immutable/Vector;
       4: areturn

  public <Col> Col to(scala.collection.generic.CanBuildFrom<scala.runtime.Nothing$, V, Col>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #602                // Method scala/collection/TraversableOnce$class.to:(Lscala/collection/TraversableOnce;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
       5: areturn

  public <T, U> scala.collection.immutable.Map<T, U> toMap(scala.Predef$$less$colon$less<V, scala.Tuple2<T, U>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #609                // Method scala/collection/TraversableOnce$class.toMap:(Lscala/collection/TraversableOnce;Lscala/Predef$$less$colon$less;)Lscala/collection/immutable/Map;
       5: areturn

  public java.lang.String mkString(java.lang.String, java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #616                // Method scala/collection/TraversableOnce$class.mkString:(Lscala/collection/TraversableOnce;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
       7: areturn

  public java.lang.String mkString(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #623                // Method scala/collection/TraversableOnce$class.mkString:(Lscala/collection/TraversableOnce;Ljava/lang/String;)Ljava/lang/String;
       5: areturn

  public java.lang.String mkString();
    Code:
       0: aload_0
       1: invokestatic  #626                // Method scala/collection/TraversableOnce$class.mkString:(Lscala/collection/TraversableOnce;)Ljava/lang/String;
       4: areturn

  public scala.collection.mutable.StringBuilder addString(scala.collection.mutable.StringBuilder, java.lang.String, java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #631                // Method scala/collection/TraversableOnce$class.addString:(Lscala/collection/TraversableOnce;Lscala/collection/mutable/StringBuilder;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lscala/collection/mutable/StringBuilder;
       9: areturn

  public scala.collection.mutable.StringBuilder addString(scala.collection.mutable.StringBuilder, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #636                // Method scala/collection/TraversableOnce$class.addString:(Lscala/collection/TraversableOnce;Lscala/collection/mutable/StringBuilder;Ljava/lang/String;)Lscala/collection/mutable/StringBuilder;
       6: areturn

  public scala.collection.mutable.StringBuilder addString(scala.collection.mutable.StringBuilder);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #640                // Method scala/collection/TraversableOnce$class.addString:(Lscala/collection/TraversableOnce;Lscala/collection/mutable/StringBuilder;)Lscala/collection/mutable/StringBuilder;
       5: areturn

  private scala.collection.parallel.IterableSplitter<scala.Tuple2<K, V>> iter();
    Code:
       0: aload_0
       1: getfield      #643                // Field iter:Lscala/collection/parallel/IterableSplitter;
       4: areturn

  public boolean hasNext();
    Code:
       0: aload_0
       1: invokespecial #646                // Method iter:()Lscala/collection/parallel/IterableSplitter;
       4: invokeinterface #648,  1          // InterfaceMethod scala/collection/parallel/IterableSplitter.hasNext:()Z
       9: ireturn

  public V next();
    Code:
       0: aload_0
       1: invokespecial #646                // Method iter:()Lscala/collection/parallel/IterableSplitter;
       4: invokeinterface #652,  1          // InterfaceMethod scala/collection/parallel/IterableSplitter.next:()Ljava/lang/Object;
       9: checkcast     #654                // class scala/Tuple2
      12: invokevirtual #657                // Method scala/Tuple2._2:()Ljava/lang/Object;
      15: areturn

  public scala.collection.Seq<scala.collection.parallel.IterableSplitter<V>> split();
    Code:
       0: aload_0
       1: invokespecial #646                // Method iter:()Lscala/collection/parallel/IterableSplitter;
       4: invokeinterface #660,  1          // InterfaceMethod scala/collection/parallel/IterableSplitter.split:()Lscala/collection/Seq;
       9: new           #662                // class scala/collection/parallel/ParMapLike$$anon$4$$anonfun$2
      12: dup
      13: aload_0
      14: invokespecial #666                // Method scala/collection/parallel/ParMapLike$$anon$4$$anonfun$2."<init>":(Lscala/collection/parallel/ParMapLike$$anon$4;)V
      17: getstatic     #672                // Field scala/collection/Seq$.MODULE$:Lscala/collection/Seq$;
      20: invokevirtual #676                // Method scala/collection/Seq$.canBuildFrom:()Lscala/collection/generic/CanBuildFrom;
      23: invokeinterface #681,  3          // InterfaceMethod scala/collection/Seq.map:(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
      28: checkcast     #678                // class scala/collection/Seq
      31: astore_1
      32: aload_1
      33: new           #683                // class scala/collection/parallel/ParMapLike$$anon$4$$anonfun$split$2
      36: dup
      37: aload_0
      38: invokespecial #684                // Method scala/collection/parallel/ParMapLike$$anon$4$$anonfun$split$2."<init>":(Lscala/collection/parallel/ParMapLike$$anon$4;)V
      41: invokeinterface #686,  2          // InterfaceMethod scala/collection/Seq.foreach:(Lscala/Function1;)V
      46: aload_1
      47: areturn

  public int remaining();
    Code:
       0: aload_0
       1: invokespecial #646                // Method iter:()Lscala/collection/parallel/IterableSplitter;
       4: invokeinterface #691,  1          // InterfaceMethod scala/collection/parallel/IterableSplitter.remaining:()I
       9: ireturn

  public scala.collection.parallel.IterableSplitter<V> dup();
    Code:
       0: aload_0
       1: getfield      #694                // Field $outer:Lscala/collection/parallel/ParMapLike;
       4: aload_0
       5: invokespecial #646                // Method iter:()Lscala/collection/parallel/IterableSplitter;
       8: invokeinterface #696,  1          // InterfaceMethod scala/collection/parallel/IterableSplitter.dup:()Lscala/collection/parallel/IterableSplitter;
      13: invokestatic  #702                // Method scala/collection/parallel/ParMapLike$class.scala$collection$parallel$ParMapLike$$valuesIterator:(Lscala/collection/parallel/ParMapLike;Lscala/collection/parallel/IterableSplitter;)Lscala/collection/parallel/IterableSplitter;
      16: areturn

  public scala.collection.parallel.ParMapLike scala$collection$parallel$ParMapLike$$anon$$$outer();
    Code:
       0: aload_0
       1: getfield      #694                // Field $outer:Lscala/collection/parallel/ParMapLike;
       4: areturn

  public scala.collection.GenMap toMap(scala.Predef$$less$colon$less);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #707                // Method toMap:(Lscala/Predef$$less$colon$less;)Lscala/collection/immutable/Map;
       5: areturn

  public scala.collection.GenSet toSet();
    Code:
       0: aload_0
       1: invokevirtual #710                // Method toSet:()Lscala/collection/immutable/Set;
       4: areturn

  public scala.collection.GenSeq toSeq();
    Code:
       0: aload_0
       1: invokevirtual #713                // Method toSeq:()Lscala/collection/Seq;
       4: areturn

  public scala.collection.GenIterable toIterable();
    Code:
       0: aload_0
       1: invokevirtual #716                // Method toIterable:()Lscala/collection/Iterable;
       4: areturn

  public scala.collection.GenTraversable toTraversable();
    Code:
       0: aload_0
       1: invokevirtual #719                // Method toTraversable:()Lscala/collection/Traversable;
       4: areturn

  public scala.collection.TraversableOnce seq();
    Code:
       0: aload_0
       1: invokevirtual #722                // Method seq:()Lscala/collection/Iterator;
       4: areturn

  public scala.collection.Iterator map(scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #724                // Method map:(Lscala/Function1;)Lscala/collection/parallel/IterableSplitter$Mapped;
       5: areturn

  public scala.collection.Iterator slice(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokevirtual #727                // Method slice:(II)Lscala/collection/parallel/IterableSplitter;
       6: areturn

  public scala.collection.Iterator take(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #729                // Method take:(I)Lscala/collection/parallel/IterableSplitter;
       5: areturn

  public scala.collection.parallel.ParMapLike$$anon$4(scala.collection.parallel.ParMapLike);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: athrow
       6: aload_0
       7: aload_1
       8: putfield      #694                // Field $outer:Lscala/collection/parallel/ParMapLike;
      11: aload_0
      12: invokespecial #732                // Method java/lang/Object."<init>":()V
      15: aload_0
      16: invokestatic  #736                // Method scala/collection/TraversableOnce$class.$init$:(Lscala/collection/TraversableOnce;)V
      19: aload_0
      20: invokestatic  #739                // Method scala/collection/Iterator$class.$init$:(Lscala/collection/Iterator;)V
      23: aload_0
      24: invokestatic  #742                // Method scala/collection/parallel/RemainsIterator$class.$init$:(Lscala/collection/parallel/RemainsIterator;)V
      27: aload_0
      28: invokestatic  #745                // Method scala/collection/parallel/AugmentedIterableIterator$class.$init$:(Lscala/collection/parallel/AugmentedIterableIterator;)V
      31: aload_0
      32: invokestatic  #747                // Method scala/collection/generic/DelegatedSignalling$class.$init$:(Lscala/collection/generic/DelegatedSignalling;)V
      35: aload_0
      36: invokestatic  #750                // Method scala/collection/parallel/IterableSplitter$class.$init$:(Lscala/collection/parallel/IterableSplitter;)V
      39: aload_0
      40: aload_2
      41: putfield      #643                // Field iter:Lscala/collection/parallel/IterableSplitter;
      44: return
}
