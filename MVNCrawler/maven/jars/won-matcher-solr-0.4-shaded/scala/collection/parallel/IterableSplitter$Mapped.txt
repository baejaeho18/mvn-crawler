Compiled from "RemainsIterator.scala"
public class scala.collection.parallel.IterableSplitter$Mapped<S> implements scala.collection.parallel.IterableSplitter<S> {
  public final scala.Function1<T, S> scala$collection$parallel$IterableSplitter$Mapped$$f;

  public final scala.collection.parallel.IterableSplitter $outer;

  private scala.collection.generic.Signalling signalDelegate;

  public scala.collection.generic.Signalling signalDelegate();
    Code:
       0: aload_0
       1: getfield      #18                 // Field signalDelegate:Lscala/collection/generic/Signalling;
       4: areturn

  public void signalDelegate_$eq(scala.collection.generic.Signalling);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #18                 // Field signalDelegate:Lscala/collection/generic/Signalling;
       5: return

  public scala.collection.Seq<scala.collection.parallel.IterableSplitter<S>> splitWithSignalling();
    Code:
       0: aload_0
       1: invokestatic  #31                 // Method scala/collection/parallel/IterableSplitter$class.splitWithSignalling:(Lscala/collection/parallel/IterableSplitter;)Lscala/collection/Seq;
       4: areturn

  public <S> boolean shouldSplitFurther(scala.collection.parallel.ParIterable<S>, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #36                 // Method scala/collection/parallel/IterableSplitter$class.shouldSplitFurther:(Lscala/collection/parallel/IterableSplitter;Lscala/collection/parallel/ParIterable;I)Z
       6: ireturn

  public java.lang.String buildString(scala.Function1<scala.Function1<java.lang.String, scala.runtime.BoxedUnit>, scala.runtime.BoxedUnit>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #45                 // Method scala/collection/parallel/IterableSplitter$class.buildString:(Lscala/collection/parallel/IterableSplitter;Lscala/Function1;)Ljava/lang/String;
       5: areturn

  public java.lang.String debugInformation();
    Code:
       0: aload_0
       1: invokestatic  #51                 // Method scala/collection/parallel/IterableSplitter$class.debugInformation:(Lscala/collection/parallel/IterableSplitter;)Ljava/lang/String;
       4: areturn

  public scala.collection.parallel.IterableSplitter<S>.Taken newTaken(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #56                 // Method scala/collection/parallel/IterableSplitter$class.newTaken:(Lscala/collection/parallel/IterableSplitter;I)Lscala/collection/parallel/IterableSplitter$Taken;
       5: areturn

  public <U extends scala.collection.parallel.IterableSplitter<S>.Taken> U newSliceInternal(U, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #62                 // Method scala/collection/parallel/IterableSplitter$class.newSliceInternal:(Lscala/collection/parallel/IterableSplitter;Lscala/collection/parallel/IterableSplitter$Taken;I)Lscala/collection/parallel/IterableSplitter$Taken;
       6: areturn

  public scala.collection.parallel.IterableSplitter<S> take(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #70                 // Method scala/collection/parallel/IterableSplitter$class.take:(Lscala/collection/parallel/IterableSplitter;I)Lscala/collection/parallel/IterableSplitter;
       5: areturn

  public scala.collection.parallel.IterableSplitter<S> slice(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokestatic  #76                 // Method scala/collection/parallel/IterableSplitter$class.slice:(Lscala/collection/parallel/IterableSplitter;II)Lscala/collection/parallel/IterableSplitter;
       6: areturn

  public <S> scala.collection.parallel.IterableSplitter<S>.Mapped<S> map(scala.Function1<S, S>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #82                 // Method scala/collection/parallel/IterableSplitter$class.map:(Lscala/collection/parallel/IterableSplitter;Lscala/Function1;)Lscala/collection/parallel/IterableSplitter$Mapped;
       5: areturn

  public <U, PI extends scala.collection.parallel.IterableSplitter<U>> scala.collection.parallel.IterableSplitter<S>.Appended<U, PI> appendParIterable(PI);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #88                 // Method scala/collection/parallel/IterableSplitter$class.appendParIterable:(Lscala/collection/parallel/IterableSplitter;Lscala/collection/parallel/IterableSplitter;)Lscala/collection/parallel/IterableSplitter$Appended;
       5: areturn

  public <S> scala.collection.parallel.IterableSplitter<S>.Zipped<S> zipParSeq(scala.collection.parallel.SeqSplitter<S>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #94                 // Method scala/collection/parallel/IterableSplitter$class.zipParSeq:(Lscala/collection/parallel/IterableSplitter;Lscala/collection/parallel/SeqSplitter;)Lscala/collection/parallel/IterableSplitter$Zipped;
       5: areturn

  public <S, U, R> scala.collection.parallel.IterableSplitter<S>.ZippedAll<U, R> zipAllParSeq(scala.collection.parallel.SeqSplitter<S>, U, R);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #100                // Method scala/collection/parallel/IterableSplitter$class.zipAllParSeq:(Lscala/collection/parallel/IterableSplitter;Lscala/collection/parallel/SeqSplitter;Ljava/lang/Object;Ljava/lang/Object;)Lscala/collection/parallel/IterableSplitter$ZippedAll;
       7: areturn

  public boolean isAborted();
    Code:
       0: aload_0
       1: invokestatic  #110                // Method scala/collection/generic/DelegatedSignalling$class.isAborted:(Lscala/collection/generic/DelegatedSignalling;)Z
       4: ireturn

  public void abort();
    Code:
       0: aload_0
       1: invokestatic  #115                // Method scala/collection/generic/DelegatedSignalling$class.abort:(Lscala/collection/generic/DelegatedSignalling;)V
       4: return

  public int indexFlag();
    Code:
       0: aload_0
       1: invokestatic  #120                // Method scala/collection/generic/DelegatedSignalling$class.indexFlag:(Lscala/collection/generic/DelegatedSignalling;)I
       4: ireturn

  public void setIndexFlag(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #125                // Method scala/collection/generic/DelegatedSignalling$class.setIndexFlag:(Lscala/collection/generic/DelegatedSignalling;I)V
       5: return

  public void setIndexFlagIfGreater(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #128                // Method scala/collection/generic/DelegatedSignalling$class.setIndexFlagIfGreater:(Lscala/collection/generic/DelegatedSignalling;I)V
       5: return

  public void setIndexFlagIfLesser(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #131                // Method scala/collection/generic/DelegatedSignalling$class.setIndexFlagIfLesser:(Lscala/collection/generic/DelegatedSignalling;I)V
       5: return

  public int tag();
    Code:
       0: aload_0
       1: invokestatic  #134                // Method scala/collection/generic/DelegatedSignalling$class.tag:(Lscala/collection/generic/DelegatedSignalling;)I
       4: ireturn

  public int count(scala.Function1<S, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #141                // Method scala/collection/parallel/AugmentedIterableIterator$class.count:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/Function1;)I
       5: ireturn

  public <U> U reduce(scala.Function2<U, U, U>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #147                // Method scala/collection/parallel/AugmentedIterableIterator$class.reduce:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/Function2;)Ljava/lang/Object;
       5: areturn

  public <U> U fold(U, scala.Function2<U, U, U>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #154                // Method scala/collection/parallel/AugmentedIterableIterator$class.fold:(Lscala/collection/parallel/AugmentedIterableIterator;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
       6: areturn

  public <U> U sum(scala.math.Numeric<U>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #160                // Method scala/collection/parallel/AugmentedIterableIterator$class.sum:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/math/Numeric;)Ljava/lang/Object;
       5: areturn

  public <U> U product(scala.math.Numeric<U>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #165                // Method scala/collection/parallel/AugmentedIterableIterator$class.product:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/math/Numeric;)Ljava/lang/Object;
       5: areturn

  public <U> S min(scala.math.Ordering<U>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #170                // Method scala/collection/parallel/AugmentedIterableIterator$class.min:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/math/Ordering;)Ljava/lang/Object;
       5: areturn

  public <U> S max(scala.math.Ordering<U>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #175                // Method scala/collection/parallel/AugmentedIterableIterator$class.max:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/math/Ordering;)Ljava/lang/Object;
       5: areturn

  public <U> void copyToArray(java.lang.Object, int, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: invokestatic  #180                // Method scala/collection/parallel/AugmentedIterableIterator$class.copyToArray:(Lscala/collection/parallel/AugmentedIterableIterator;Ljava/lang/Object;II)V
       7: return

  public <U> U reduceLeft(int, scala.Function2<U, U, U>);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokestatic  #188                // Method scala/collection/parallel/AugmentedIterableIterator$class.reduceLeft:(Lscala/collection/parallel/AugmentedIterableIterator;ILscala/Function2;)Ljava/lang/Object;
       6: areturn

  public <S, That> scala.collection.parallel.Combiner<S, That> map2combiner(scala.Function1<S, S>, scala.collection.parallel.Combiner<S, That>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #194                // Method scala/collection/parallel/AugmentedIterableIterator$class.map2combiner:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/Function1;Lscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
       6: areturn

  public <S, That> scala.collection.parallel.Combiner<S, That> collect2combiner(scala.PartialFunction<S, S>, scala.collection.parallel.Combiner<S, That>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #201                // Method scala/collection/parallel/AugmentedIterableIterator$class.collect2combiner:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/PartialFunction;Lscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
       6: areturn

  public <S, That> scala.collection.parallel.Combiner<S, That> flatmap2combiner(scala.Function1<S, scala.collection.GenTraversableOnce<S>>, scala.collection.parallel.Combiner<S, That>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #206                // Method scala/collection/parallel/AugmentedIterableIterator$class.flatmap2combiner:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/Function1;Lscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
       6: areturn

  public <U, Coll, Bld extends scala.collection.mutable.Builder<U, Coll>> Bld copy2builder(Bld);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #211                // Method scala/collection/parallel/AugmentedIterableIterator$class.copy2builder:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/collection/mutable/Builder;)Lscala/collection/mutable/Builder;
       5: areturn

  public <U, This> scala.collection.parallel.Combiner<U, This> filter2combiner(scala.Function1<S, java.lang.Object>, scala.collection.parallel.Combiner<U, This>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #216                // Method scala/collection/parallel/AugmentedIterableIterator$class.filter2combiner:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/Function1;Lscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
       6: areturn

  public <U, This> scala.collection.parallel.Combiner<U, This> filterNot2combiner(scala.Function1<S, java.lang.Object>, scala.collection.parallel.Combiner<U, This>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #220                // Method scala/collection/parallel/AugmentedIterableIterator$class.filterNot2combiner:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/Function1;Lscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
       6: areturn

  public <U, This> scala.Tuple2<scala.collection.parallel.Combiner<U, This>, scala.collection.parallel.Combiner<U, This>> partition2combiners(scala.Function1<S, java.lang.Object>, scala.collection.parallel.Combiner<U, This>, scala.collection.parallel.Combiner<U, This>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #225                // Method scala/collection/parallel/AugmentedIterableIterator$class.partition2combiners:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/Function1;Lscala/collection/parallel/Combiner;Lscala/collection/parallel/Combiner;)Lscala/Tuple2;
       7: areturn

  public <U, This> scala.collection.parallel.Combiner<U, This> take2combiner(int, scala.collection.parallel.Combiner<U, This>);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokestatic  #232                // Method scala/collection/parallel/AugmentedIterableIterator$class.take2combiner:(Lscala/collection/parallel/AugmentedIterableIterator;ILscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
       6: areturn

  public <U, This> scala.collection.parallel.Combiner<U, This> drop2combiner(int, scala.collection.parallel.Combiner<U, This>);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokestatic  #235                // Method scala/collection/parallel/AugmentedIterableIterator$class.drop2combiner:(Lscala/collection/parallel/AugmentedIterableIterator;ILscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
       6: areturn

  public <U, This> scala.collection.parallel.Combiner<U, This> slice2combiner(int, int, scala.collection.parallel.Combiner<U, This>);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: aload_3
       4: invokestatic  #240                // Method scala/collection/parallel/AugmentedIterableIterator$class.slice2combiner:(Lscala/collection/parallel/AugmentedIterableIterator;IILscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
       7: areturn

  public <U, This> scala.Tuple2<scala.collection.parallel.Combiner<U, This>, scala.collection.parallel.Combiner<U, This>> splitAt2combiners(int, scala.collection.parallel.Combiner<U, This>, scala.collection.parallel.Combiner<U, This>);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #245                // Method scala/collection/parallel/AugmentedIterableIterator$class.splitAt2combiners:(Lscala/collection/parallel/AugmentedIterableIterator;ILscala/collection/parallel/Combiner;Lscala/collection/parallel/Combiner;)Lscala/Tuple2;
       7: areturn

  public <U, This> scala.Tuple2<scala.collection.parallel.Combiner<U, This>, java.lang.Object> takeWhile2combiner(scala.Function1<S, java.lang.Object>, scala.collection.parallel.Combiner<U, This>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #253                // Method scala/collection/parallel/AugmentedIterableIterator$class.takeWhile2combiner:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/Function1;Lscala/collection/parallel/Combiner;)Lscala/Tuple2;
       6: areturn

  public <U, This> scala.Tuple2<scala.collection.parallel.Combiner<U, This>, scala.collection.parallel.Combiner<U, This>> span2combiners(scala.Function1<S, java.lang.Object>, scala.collection.parallel.Combiner<U, This>, scala.collection.parallel.Combiner<U, This>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #256                // Method scala/collection/parallel/AugmentedIterableIterator$class.span2combiners:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/Function1;Lscala/collection/parallel/Combiner;Lscala/collection/parallel/Combiner;)Lscala/Tuple2;
       7: areturn

  public <U, A> void scanToArray(U, scala.Function2<U, U, U>, java.lang.Object, int);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: iload         4
       6: invokestatic  #261                // Method scala/collection/parallel/AugmentedIterableIterator$class.scanToArray:(Lscala/collection/parallel/AugmentedIterableIterator;Ljava/lang/Object;Lscala/Function2;Ljava/lang/Object;I)V
       9: return

  public <U, That> scala.collection.parallel.Combiner<U, That> scanToCombiner(U, scala.Function2<U, U, U>, scala.collection.parallel.Combiner<U, That>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #266                // Method scala/collection/parallel/AugmentedIterableIterator$class.scanToCombiner:(Lscala/collection/parallel/AugmentedIterableIterator;Ljava/lang/Object;Lscala/Function2;Lscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
       7: areturn

  public <U, That> scala.collection.parallel.Combiner<U, That> scanToCombiner(int, U, scala.Function2<U, U, U>, scala.collection.parallel.Combiner<U, That>);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #271                // Method scala/collection/parallel/AugmentedIterableIterator$class.scanToCombiner:(Lscala/collection/parallel/AugmentedIterableIterator;ILjava/lang/Object;Lscala/Function2;Lscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
       9: areturn

  public <U, S, That> scala.collection.parallel.Combiner<scala.Tuple2<U, S>, That> zip2combiner(scala.collection.parallel.RemainsIterator<S>, scala.collection.parallel.Combiner<scala.Tuple2<U, S>, That>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #276                // Method scala/collection/parallel/AugmentedIterableIterator$class.zip2combiner:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/collection/parallel/RemainsIterator;Lscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
       6: areturn

  public <U, S, That> scala.collection.parallel.Combiner<scala.Tuple2<U, S>, That> zipAll2combiner(scala.collection.parallel.RemainsIterator<S>, U, S, scala.collection.parallel.Combiner<scala.Tuple2<U, S>, That>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #283                // Method scala/collection/parallel/AugmentedIterableIterator$class.zipAll2combiner:(Lscala/collection/parallel/AugmentedIterableIterator;Lscala/collection/parallel/RemainsIterator;Ljava/lang/Object;Ljava/lang/Object;Lscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
       9: areturn

  public boolean isRemainingCheap();
    Code:
       0: aload_0
       1: invokestatic  #291                // Method scala/collection/parallel/RemainsIterator$class.isRemainingCheap:(Lscala/collection/parallel/RemainsIterator;)Z
       4: ireturn

  public scala.collection.Iterator<S> seq();
    Code:
       0: aload_0
       1: invokestatic  #298                // Method scala/collection/Iterator$class.seq:(Lscala/collection/Iterator;)Lscala/collection/Iterator;
       4: areturn

  public boolean isEmpty();
    Code:
       0: aload_0
       1: invokestatic  #302                // Method scala/collection/Iterator$class.isEmpty:(Lscala/collection/Iterator;)Z
       4: ireturn

  public boolean isTraversableAgain();
    Code:
       0: aload_0
       1: invokestatic  #305                // Method scala/collection/Iterator$class.isTraversableAgain:(Lscala/collection/Iterator;)Z
       4: ireturn

  public boolean hasDefiniteSize();
    Code:
       0: aload_0
       1: invokestatic  #308                // Method scala/collection/Iterator$class.hasDefiniteSize:(Lscala/collection/Iterator;)Z
       4: ireturn

  public scala.collection.Iterator<S> drop(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #313                // Method scala/collection/Iterator$class.drop:(Lscala/collection/Iterator;I)Lscala/collection/Iterator;
       5: areturn

  public <B> scala.collection.Iterator<B> $plus$plus(scala.Function0<scala.collection.GenTraversableOnce<B>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #318                // Method scala/collection/Iterator$class.$plus$plus:(Lscala/collection/Iterator;Lscala/Function0;)Lscala/collection/Iterator;
       5: areturn

  public <B> scala.collection.Iterator<B> flatMap(scala.Function1<S, scala.collection.GenTraversableOnce<B>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #324                // Method scala/collection/Iterator$class.flatMap:(Lscala/collection/Iterator;Lscala/Function1;)Lscala/collection/Iterator;
       5: areturn

  public scala.collection.Iterator<S> filter(scala.Function1<S, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #327                // Method scala/collection/Iterator$class.filter:(Lscala/collection/Iterator;Lscala/Function1;)Lscala/collection/Iterator;
       5: areturn

  public <B> boolean corresponds(scala.collection.GenTraversableOnce<B>, scala.Function2<S, B, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #332                // Method scala/collection/Iterator$class.corresponds:(Lscala/collection/Iterator;Lscala/collection/GenTraversableOnce;Lscala/Function2;)Z
       6: ireturn

  public scala.collection.Iterator<S> withFilter(scala.Function1<S, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #336                // Method scala/collection/Iterator$class.withFilter:(Lscala/collection/Iterator;Lscala/Function1;)Lscala/collection/Iterator;
       5: areturn

  public scala.collection.Iterator<S> filterNot(scala.Function1<S, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #339                // Method scala/collection/Iterator$class.filterNot:(Lscala/collection/Iterator;Lscala/Function1;)Lscala/collection/Iterator;
       5: areturn

  public <B> scala.collection.Iterator<B> collect(scala.PartialFunction<S, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #344                // Method scala/collection/Iterator$class.collect:(Lscala/collection/Iterator;Lscala/PartialFunction;)Lscala/collection/Iterator;
       5: areturn

  public <B> scala.collection.Iterator<B> scanLeft(B, scala.Function2<B, S, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #349                // Method scala/collection/Iterator$class.scanLeft:(Lscala/collection/Iterator;Ljava/lang/Object;Lscala/Function2;)Lscala/collection/Iterator;
       6: areturn

  public <B> scala.collection.Iterator<B> scanRight(B, scala.Function2<S, B, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #352                // Method scala/collection/Iterator$class.scanRight:(Lscala/collection/Iterator;Ljava/lang/Object;Lscala/Function2;)Lscala/collection/Iterator;
       6: areturn

  public scala.collection.Iterator<S> takeWhile(scala.Function1<S, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #355                // Method scala/collection/Iterator$class.takeWhile:(Lscala/collection/Iterator;Lscala/Function1;)Lscala/collection/Iterator;
       5: areturn

  public scala.Tuple2<scala.collection.Iterator<S>, scala.collection.Iterator<S>> partition(scala.Function1<S, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #360                // Method scala/collection/Iterator$class.partition:(Lscala/collection/Iterator;Lscala/Function1;)Lscala/Tuple2;
       5: areturn

  public scala.Tuple2<scala.collection.Iterator<S>, scala.collection.Iterator<S>> span(scala.Function1<S, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #363                // Method scala/collection/Iterator$class.span:(Lscala/collection/Iterator;Lscala/Function1;)Lscala/Tuple2;
       5: areturn

  public scala.collection.Iterator<S> dropWhile(scala.Function1<S, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #366                // Method scala/collection/Iterator$class.dropWhile:(Lscala/collection/Iterator;Lscala/Function1;)Lscala/collection/Iterator;
       5: areturn

  public <B> scala.collection.Iterator<scala.Tuple2<S, B>> zip(scala.collection.Iterator<B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #370                // Method scala/collection/Iterator$class.zip:(Lscala/collection/Iterator;Lscala/collection/Iterator;)Lscala/collection/Iterator;
       5: areturn

  public <A1> scala.collection.Iterator<A1> padTo(int, A1);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokestatic  #376                // Method scala/collection/Iterator$class.padTo:(Lscala/collection/Iterator;ILjava/lang/Object;)Lscala/collection/Iterator;
       6: areturn

  public scala.collection.Iterator<scala.Tuple2<S, java.lang.Object>> zipWithIndex();
    Code:
       0: aload_0
       1: invokestatic  #380                // Method scala/collection/Iterator$class.zipWithIndex:(Lscala/collection/Iterator;)Lscala/collection/Iterator;
       4: areturn

  public <B, A1, B1> scala.collection.Iterator<scala.Tuple2<A1, B1>> zipAll(scala.collection.Iterator<B>, A1, B1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #385                // Method scala/collection/Iterator$class.zipAll:(Lscala/collection/Iterator;Lscala/collection/Iterator;Ljava/lang/Object;Ljava/lang/Object;)Lscala/collection/Iterator;
       7: areturn

  public <U> void foreach(scala.Function1<S, U>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #390                // Method scala/collection/Iterator$class.foreach:(Lscala/collection/Iterator;Lscala/Function1;)V
       5: return

  public boolean forall(scala.Function1<S, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #395                // Method scala/collection/Iterator$class.forall:(Lscala/collection/Iterator;Lscala/Function1;)Z
       5: ireturn

  public boolean exists(scala.Function1<S, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #398                // Method scala/collection/Iterator$class.exists:(Lscala/collection/Iterator;Lscala/Function1;)Z
       5: ireturn

  public boolean contains(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #403                // Method scala/collection/Iterator$class.contains:(Lscala/collection/Iterator;Ljava/lang/Object;)Z
       5: ireturn

  public scala.Option<S> find(scala.Function1<S, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #408                // Method scala/collection/Iterator$class.find:(Lscala/collection/Iterator;Lscala/Function1;)Lscala/Option;
       5: areturn

  public int indexWhere(scala.Function1<S, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #412                // Method scala/collection/Iterator$class.indexWhere:(Lscala/collection/Iterator;Lscala/Function1;)I
       5: ireturn

  public <B> int indexOf(B);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #417                // Method scala/collection/Iterator$class.indexOf:(Lscala/collection/Iterator;Ljava/lang/Object;)I
       5: ireturn

  public scala.collection.BufferedIterator<S> buffered();
    Code:
       0: aload_0
       1: invokestatic  #422                // Method scala/collection/Iterator$class.buffered:(Lscala/collection/Iterator;)Lscala/collection/BufferedIterator;
       4: areturn

  public <B> scala.collection.Iterator<S>.GroupedIterator<B> grouped(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #427                // Method scala/collection/Iterator$class.grouped:(Lscala/collection/Iterator;I)Lscala/collection/Iterator$GroupedIterator;
       5: areturn

  public <B> scala.collection.Iterator<S>.GroupedIterator<B> sliding(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokestatic  #433                // Method scala/collection/Iterator$class.sliding:(Lscala/collection/Iterator;II)Lscala/collection/Iterator$GroupedIterator;
       6: areturn

  public int length();
    Code:
       0: aload_0
       1: invokestatic  #438                // Method scala/collection/Iterator$class.length:(Lscala/collection/Iterator;)I
       4: ireturn

  public scala.Tuple2<scala.collection.Iterator<S>, scala.collection.Iterator<S>> duplicate();
    Code:
       0: aload_0
       1: invokestatic  #443                // Method scala/collection/Iterator$class.duplicate:(Lscala/collection/Iterator;)Lscala/Tuple2;
       4: areturn

  public <B> scala.collection.Iterator<B> patch(int, scala.collection.Iterator<B>, int);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: iload_3
       4: invokestatic  #448                // Method scala/collection/Iterator$class.patch:(Lscala/collection/Iterator;ILscala/collection/Iterator;I)Lscala/collection/Iterator;
       7: areturn

  public boolean sameElements(scala.collection.Iterator<?>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #454                // Method scala/collection/Iterator$class.sameElements:(Lscala/collection/Iterator;Lscala/collection/Iterator;)Z
       5: ireturn

  public scala.collection.Traversable<S> toTraversable();
    Code:
       0: aload_0
       1: invokestatic  #459                // Method scala/collection/Iterator$class.toTraversable:(Lscala/collection/Iterator;)Lscala/collection/Traversable;
       4: areturn

  public scala.collection.Iterator<S> toIterator();
    Code:
       0: aload_0
       1: invokestatic  #462                // Method scala/collection/Iterator$class.toIterator:(Lscala/collection/Iterator;)Lscala/collection/Iterator;
       4: areturn

  public scala.collection.immutable.Stream<S> toStream();
    Code:
       0: aload_0
       1: invokestatic  #467                // Method scala/collection/Iterator$class.toStream:(Lscala/collection/Iterator;)Lscala/collection/immutable/Stream;
       4: areturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: invokestatic  #471                // Method scala/collection/Iterator$class.toString:(Lscala/collection/Iterator;)Ljava/lang/String;
       4: areturn

  public <B> int sliding$default$2();
    Code:
       0: aload_0
       1: invokestatic  #474                // Method scala/collection/Iterator$class.sliding$default$2:(Lscala/collection/Iterator;)I
       4: ireturn

  public scala.collection.immutable.List<S> reversed();
    Code:
       0: aload_0
       1: invokestatic  #481                // Method scala/collection/TraversableOnce$class.reversed:(Lscala/collection/TraversableOnce;)Lscala/collection/immutable/List;
       4: areturn

  public int size();
    Code:
       0: aload_0
       1: invokestatic  #484                // Method scala/collection/TraversableOnce$class.size:(Lscala/collection/TraversableOnce;)I
       4: ireturn

  public boolean nonEmpty();
    Code:
       0: aload_0
       1: invokestatic  #488                // Method scala/collection/TraversableOnce$class.nonEmpty:(Lscala/collection/TraversableOnce;)Z
       4: ireturn

  public <B> scala.Option<B> collectFirst(scala.PartialFunction<S, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #493                // Method scala/collection/TraversableOnce$class.collectFirst:(Lscala/collection/TraversableOnce;Lscala/PartialFunction;)Lscala/Option;
       5: areturn

  public <B> B $div$colon(B, scala.Function2<B, S, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #497                // Method scala/collection/TraversableOnce$class.$div$colon:(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
       6: areturn

  public <B> B $colon$bslash(B, scala.Function2<S, B, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #500                // Method scala/collection/TraversableOnce$class.$colon$bslash:(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
       6: areturn

  public <B> B foldLeft(B, scala.Function2<B, S, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #503                // Method scala/collection/TraversableOnce$class.foldLeft:(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
       6: areturn

  public <B> B foldRight(B, scala.Function2<S, B, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #506                // Method scala/collection/TraversableOnce$class.foldRight:(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
       6: areturn

  public <B> B reduceLeft(scala.Function2<B, S, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #509                // Method scala/collection/TraversableOnce$class.reduceLeft:(Lscala/collection/TraversableOnce;Lscala/Function2;)Ljava/lang/Object;
       5: areturn

  public <B> B reduceRight(scala.Function2<S, B, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #512                // Method scala/collection/TraversableOnce$class.reduceRight:(Lscala/collection/TraversableOnce;Lscala/Function2;)Ljava/lang/Object;
       5: areturn

  public <B> scala.Option<B> reduceLeftOption(scala.Function2<B, S, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #517                // Method scala/collection/TraversableOnce$class.reduceLeftOption:(Lscala/collection/TraversableOnce;Lscala/Function2;)Lscala/Option;
       5: areturn

  public <B> scala.Option<B> reduceRightOption(scala.Function2<S, B, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #520                // Method scala/collection/TraversableOnce$class.reduceRightOption:(Lscala/collection/TraversableOnce;Lscala/Function2;)Lscala/Option;
       5: areturn

  public <A1> scala.Option<A1> reduceOption(scala.Function2<A1, A1, A1>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #523                // Method scala/collection/TraversableOnce$class.reduceOption:(Lscala/collection/TraversableOnce;Lscala/Function2;)Lscala/Option;
       5: areturn

  public <B> B aggregate(scala.Function0<B>, scala.Function2<B, S, B>, scala.Function2<B, B, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #528                // Method scala/collection/TraversableOnce$class.aggregate:(Lscala/collection/TraversableOnce;Lscala/Function0;Lscala/Function2;Lscala/Function2;)Ljava/lang/Object;
       7: areturn

  public <B> S maxBy(scala.Function1<S, B>, scala.math.Ordering<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #535                // Method scala/collection/TraversableOnce$class.maxBy:(Lscala/collection/TraversableOnce;Lscala/Function1;Lscala/math/Ordering;)Ljava/lang/Object;
       6: areturn

  public <B> S minBy(scala.Function1<S, B>, scala.math.Ordering<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #539                // Method scala/collection/TraversableOnce$class.minBy:(Lscala/collection/TraversableOnce;Lscala/Function1;Lscala/math/Ordering;)Ljava/lang/Object;
       6: areturn

  public <B> void copyToBuffer(scala.collection.mutable.Buffer<B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #544                // Method scala/collection/TraversableOnce$class.copyToBuffer:(Lscala/collection/TraversableOnce;Lscala/collection/mutable/Buffer;)V
       5: return

  public <B> void copyToArray(java.lang.Object, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #550                // Method scala/collection/TraversableOnce$class.copyToArray:(Lscala/collection/TraversableOnce;Ljava/lang/Object;I)V
       6: return

  public <B> void copyToArray(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #556                // Method scala/collection/TraversableOnce$class.copyToArray:(Lscala/collection/TraversableOnce;Ljava/lang/Object;)V
       5: return

  public <B> java.lang.Object toArray(scala.reflect.ClassTag<B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #561                // Method scala/collection/TraversableOnce$class.toArray:(Lscala/collection/TraversableOnce;Lscala/reflect/ClassTag;)Ljava/lang/Object;
       5: areturn

  public scala.collection.immutable.List<S> toList();
    Code:
       0: aload_0
       1: invokestatic  #566                // Method scala/collection/TraversableOnce$class.toList:(Lscala/collection/TraversableOnce;)Lscala/collection/immutable/List;
       4: areturn

  public scala.collection.Iterable<S> toIterable();
    Code:
       0: aload_0
       1: invokestatic  #571                // Method scala/collection/TraversableOnce$class.toIterable:(Lscala/collection/TraversableOnce;)Lscala/collection/Iterable;
       4: areturn

  public scala.collection.Seq<S> toSeq();
    Code:
       0: aload_0
       1: invokestatic  #575                // Method scala/collection/TraversableOnce$class.toSeq:(Lscala/collection/TraversableOnce;)Lscala/collection/Seq;
       4: areturn

  public scala.collection.immutable.IndexedSeq<S> toIndexedSeq();
    Code:
       0: aload_0
       1: invokestatic  #580                // Method scala/collection/TraversableOnce$class.toIndexedSeq:(Lscala/collection/TraversableOnce;)Lscala/collection/immutable/IndexedSeq;
       4: areturn

  public <B> scala.collection.mutable.Buffer<B> toBuffer();
    Code:
       0: aload_0
       1: invokestatic  #585                // Method scala/collection/TraversableOnce$class.toBuffer:(Lscala/collection/TraversableOnce;)Lscala/collection/mutable/Buffer;
       4: areturn

  public <B> scala.collection.immutable.Set<B> toSet();
    Code:
       0: aload_0
       1: invokestatic  #590                // Method scala/collection/TraversableOnce$class.toSet:(Lscala/collection/TraversableOnce;)Lscala/collection/immutable/Set;
       4: areturn

  public scala.collection.immutable.Vector<S> toVector();
    Code:
       0: aload_0
       1: invokestatic  #595                // Method scala/collection/TraversableOnce$class.toVector:(Lscala/collection/TraversableOnce;)Lscala/collection/immutable/Vector;
       4: areturn

  public <Col> Col to(scala.collection.generic.CanBuildFrom<scala.runtime.Nothing$, S, Col>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #600                // Method scala/collection/TraversableOnce$class.to:(Lscala/collection/TraversableOnce;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
       5: areturn

  public <T, U> scala.collection.immutable.Map<T, U> toMap(scala.Predef$$less$colon$less<S, scala.Tuple2<T, U>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #607                // Method scala/collection/TraversableOnce$class.toMap:(Lscala/collection/TraversableOnce;Lscala/Predef$$less$colon$less;)Lscala/collection/immutable/Map;
       5: areturn

  public java.lang.String mkString(java.lang.String, java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #614                // Method scala/collection/TraversableOnce$class.mkString:(Lscala/collection/TraversableOnce;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
       7: areturn

  public java.lang.String mkString(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #621                // Method scala/collection/TraversableOnce$class.mkString:(Lscala/collection/TraversableOnce;Ljava/lang/String;)Ljava/lang/String;
       5: areturn

  public java.lang.String mkString();
    Code:
       0: aload_0
       1: invokestatic  #624                // Method scala/collection/TraversableOnce$class.mkString:(Lscala/collection/TraversableOnce;)Ljava/lang/String;
       4: areturn

  public scala.collection.mutable.StringBuilder addString(scala.collection.mutable.StringBuilder, java.lang.String, java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #629                // Method scala/collection/TraversableOnce$class.addString:(Lscala/collection/TraversableOnce;Lscala/collection/mutable/StringBuilder;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lscala/collection/mutable/StringBuilder;
       9: areturn

  public scala.collection.mutable.StringBuilder addString(scala.collection.mutable.StringBuilder, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #634                // Method scala/collection/TraversableOnce$class.addString:(Lscala/collection/TraversableOnce;Lscala/collection/mutable/StringBuilder;Ljava/lang/String;)Lscala/collection/mutable/StringBuilder;
       6: areturn

  public scala.collection.mutable.StringBuilder addString(scala.collection.mutable.StringBuilder);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #638                // Method scala/collection/TraversableOnce$class.addString:(Lscala/collection/TraversableOnce;Lscala/collection/mutable/StringBuilder;)Lscala/collection/mutable/StringBuilder;
       5: areturn

  public boolean hasNext();
    Code:
       0: aload_0
       1: invokevirtual #643                // Method scala$collection$parallel$IterableSplitter$Mapped$$$outer:()Lscala/collection/parallel/IterableSplitter;
       4: invokeinterface #645,  1          // InterfaceMethod scala/collection/parallel/IterableSplitter.hasNext:()Z
       9: ireturn

  public S next();
    Code:
       0: aload_0
       1: getfield      #649                // Field scala$collection$parallel$IterableSplitter$Mapped$$f:Lscala/Function1;
       4: aload_0
       5: invokevirtual #643                // Method scala$collection$parallel$IterableSplitter$Mapped$$$outer:()Lscala/collection/parallel/IterableSplitter;
       8: invokeinterface #651,  1          // InterfaceMethod scala/collection/parallel/IterableSplitter.next:()Ljava/lang/Object;
      13: invokeinterface #657,  2          // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      18: areturn

  public int remaining();
    Code:
       0: aload_0
       1: invokevirtual #643                // Method scala$collection$parallel$IterableSplitter$Mapped$$$outer:()Lscala/collection/parallel/IterableSplitter;
       4: invokeinterface #660,  1          // InterfaceMethod scala/collection/parallel/IterableSplitter.remaining:()I
       9: ireturn

  public scala.collection.parallel.IterableSplitter<S> dup();
    Code:
       0: aload_0
       1: invokevirtual #643                // Method scala$collection$parallel$IterableSplitter$Mapped$$$outer:()Lscala/collection/parallel/IterableSplitter;
       4: invokeinterface #663,  1          // InterfaceMethod scala/collection/parallel/IterableSplitter.dup:()Lscala/collection/parallel/IterableSplitter;
       9: aload_0
      10: getfield      #649                // Field scala$collection$parallel$IterableSplitter$Mapped$$f:Lscala/Function1;
      13: invokeinterface #665,  2          // InterfaceMethod scala/collection/parallel/IterableSplitter.map:(Lscala/Function1;)Lscala/collection/parallel/IterableSplitter$Mapped;
      18: areturn

  public scala.collection.Seq<scala.collection.parallel.IterableSplitter<S>> split();
    Code:
       0: aload_0
       1: invokevirtual #643                // Method scala$collection$parallel$IterableSplitter$Mapped$$$outer:()Lscala/collection/parallel/IterableSplitter;
       4: invokeinterface #668,  1          // InterfaceMethod scala/collection/parallel/IterableSplitter.split:()Lscala/collection/Seq;
       9: new           #670                // class scala/collection/parallel/IterableSplitter$Mapped$$anonfun$split$2
      12: dup
      13: aload_0
      14: invokespecial #674                // Method scala/collection/parallel/IterableSplitter$Mapped$$anonfun$split$2."<init>":(Lscala/collection/parallel/IterableSplitter$Mapped;)V
      17: getstatic     #680                // Field scala/collection/Seq$.MODULE$:Lscala/collection/Seq$;
      20: invokevirtual #684                // Method scala/collection/Seq$.canBuildFrom:()Lscala/collection/generic/CanBuildFrom;
      23: invokeinterface #689,  3          // InterfaceMethod scala/collection/Seq.map:(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
      28: checkcast     #686                // class scala/collection/Seq
      31: areturn

  public scala.collection.parallel.IterableSplitter scala$collection$parallel$IterableSplitter$Mapped$$$outer();
    Code:
       0: aload_0
       1: getfield      #691                // Field $outer:Lscala/collection/parallel/IterableSplitter;
       4: areturn

  public scala.collection.GenMap toMap(scala.Predef$$less$colon$less);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #694                // Method toMap:(Lscala/Predef$$less$colon$less;)Lscala/collection/immutable/Map;
       5: areturn

  public scala.collection.GenSet toSet();
    Code:
       0: aload_0
       1: invokevirtual #697                // Method toSet:()Lscala/collection/immutable/Set;
       4: areturn

  public scala.collection.GenSeq toSeq();
    Code:
       0: aload_0
       1: invokevirtual #700                // Method toSeq:()Lscala/collection/Seq;
       4: areturn

  public scala.collection.GenIterable toIterable();
    Code:
       0: aload_0
       1: invokevirtual #703                // Method toIterable:()Lscala/collection/Iterable;
       4: areturn

  public scala.collection.GenTraversable toTraversable();
    Code:
       0: aload_0
       1: invokevirtual #706                // Method toTraversable:()Lscala/collection/Traversable;
       4: areturn

  public scala.collection.TraversableOnce seq();
    Code:
       0: aload_0
       1: invokevirtual #709                // Method seq:()Lscala/collection/Iterator;
       4: areturn

  public scala.collection.Iterator map(scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #710                // Method map:(Lscala/Function1;)Lscala/collection/parallel/IterableSplitter$Mapped;
       5: areturn

  public scala.collection.Iterator slice(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokevirtual #713                // Method slice:(II)Lscala/collection/parallel/IterableSplitter;
       6: areturn

  public scala.collection.Iterator take(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #715                // Method take:(I)Lscala/collection/parallel/IterableSplitter;
       5: areturn

  public scala.collection.parallel.IterableSplitter$Mapped(scala.collection.parallel.IterableSplitter<T>, scala.Function1<T, S>);
    Code:
       0: aload_0
       1: aload_2
       2: putfield      #649                // Field scala$collection$parallel$IterableSplitter$Mapped$$f:Lscala/Function1;
       5: aload_1
       6: ifnonnull     11
       9: aconst_null
      10: athrow
      11: aload_0
      12: aload_1
      13: putfield      #691                // Field $outer:Lscala/collection/parallel/IterableSplitter;
      16: aload_0
      17: invokespecial #718                // Method java/lang/Object."<init>":()V
      20: aload_0
      21: invokestatic  #722                // Method scala/collection/TraversableOnce$class.$init$:(Lscala/collection/TraversableOnce;)V
      24: aload_0
      25: invokestatic  #725                // Method scala/collection/Iterator$class.$init$:(Lscala/collection/Iterator;)V
      28: aload_0
      29: invokestatic  #728                // Method scala/collection/parallel/RemainsIterator$class.$init$:(Lscala/collection/parallel/RemainsIterator;)V
      32: aload_0
      33: invokestatic  #731                // Method scala/collection/parallel/AugmentedIterableIterator$class.$init$:(Lscala/collection/parallel/AugmentedIterableIterator;)V
      36: aload_0
      37: invokestatic  #733                // Method scala/collection/generic/DelegatedSignalling$class.$init$:(Lscala/collection/generic/DelegatedSignalling;)V
      40: aload_0
      41: invokestatic  #736                // Method scala/collection/parallel/IterableSplitter$class.$init$:(Lscala/collection/parallel/IterableSplitter;)V
      44: aload_0
      45: aload_1
      46: invokeinterface #738,  1          // InterfaceMethod scala/collection/parallel/IterableSplitter.signalDelegate:()Lscala/collection/generic/Signalling;
      51: invokevirtual #740                // Method signalDelegate_$eq:(Lscala/collection/generic/Signalling;)V
      54: return
}
