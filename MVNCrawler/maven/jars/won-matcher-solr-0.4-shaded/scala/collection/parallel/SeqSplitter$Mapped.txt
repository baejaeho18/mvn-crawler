Compiled from "RemainsIterator.scala"
public class scala.collection.parallel.SeqSplitter$Mapped<S> extends scala.collection.parallel.IterableSplitter<T>.Mapped<S> implements scala.collection.parallel.SeqSplitter<S> {
  public final scala.Function1<T, S> scala$collection$parallel$SeqSplitter$Mapped$$f;

  public scala.collection.Seq<scala.collection.parallel.SeqSplitter<S>> splitWithSignalling();
    Code:
       0: aload_0
       1: invokestatic  #18                 // Method scala/collection/parallel/SeqSplitter$class.splitWithSignalling:(Lscala/collection/parallel/SeqSplitter;)Lscala/collection/Seq;
       4: areturn

  public scala.collection.Seq<scala.collection.parallel.SeqSplitter<S>> psplitWithSignalling(scala.collection.Seq<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #25                 // Method scala/collection/parallel/SeqSplitter$class.psplitWithSignalling:(Lscala/collection/parallel/SeqSplitter;Lscala/collection/Seq;)Lscala/collection/Seq;
       5: areturn

  public scala.collection.parallel.SeqSplitter<S>.Taken newTaken(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #32                 // Method scala/collection/parallel/SeqSplitter$class.newTaken:(Lscala/collection/parallel/SeqSplitter;I)Lscala/collection/parallel/SeqSplitter$Taken;
       5: areturn

  public scala.collection.parallel.SeqSplitter<S> take(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #39                 // Method scala/collection/parallel/SeqSplitter$class.take:(Lscala/collection/parallel/SeqSplitter;I)Lscala/collection/parallel/SeqSplitter;
       5: areturn

  public scala.collection.parallel.SeqSplitter<S> slice(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokestatic  #45                 // Method scala/collection/parallel/SeqSplitter$class.slice:(Lscala/collection/parallel/SeqSplitter;II)Lscala/collection/parallel/SeqSplitter;
       6: areturn

  public <S> scala.collection.parallel.SeqSplitter<S>.Mapped<S> map(scala.Function1<S, S>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #52                 // Method scala/collection/parallel/SeqSplitter$class.map:(Lscala/collection/parallel/SeqSplitter;Lscala/Function1;)Lscala/collection/parallel/SeqSplitter$Mapped;
       5: areturn

  public <U, PI extends scala.collection.parallel.SeqSplitter<U>> scala.collection.parallel.SeqSplitter<S>.Appended<U, PI> appendParSeq(PI);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #58                 // Method scala/collection/parallel/SeqSplitter$class.appendParSeq:(Lscala/collection/parallel/SeqSplitter;Lscala/collection/parallel/SeqSplitter;)Lscala/collection/parallel/SeqSplitter$Appended;
       5: areturn

  public <S> scala.collection.parallel.SeqSplitter<S>.Zipped<S> zipParSeq(scala.collection.parallel.SeqSplitter<S>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #65                 // Method scala/collection/parallel/SeqSplitter$class.zipParSeq:(Lscala/collection/parallel/SeqSplitter;Lscala/collection/parallel/SeqSplitter;)Lscala/collection/parallel/SeqSplitter$Zipped;
       5: areturn

  public <S, U, R> scala.collection.parallel.SeqSplitter<S>.ZippedAll<U, R> zipAllParSeq(scala.collection.parallel.SeqSplitter<S>, U, R);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #70                 // Method scala/collection/parallel/SeqSplitter$class.zipAllParSeq:(Lscala/collection/parallel/SeqSplitter;Lscala/collection/parallel/SeqSplitter;Ljava/lang/Object;Ljava/lang/Object;)Lscala/collection/parallel/SeqSplitter$ZippedAll;
       7: areturn

  public scala.collection.parallel.SeqSplitter<S> reverse();
    Code:
       0: aload_0
       1: invokestatic  #78                 // Method scala/collection/parallel/SeqSplitter$class.reverse:(Lscala/collection/parallel/SeqSplitter;)Lscala/collection/parallel/SeqSplitter;
       4: areturn

  public <U> scala.collection.parallel.SeqSplitter<S>.Patched<U> patchParSeq(int, scala.collection.parallel.SeqSplitter<U>, int);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: iload_3
       4: invokestatic  #83                 // Method scala/collection/parallel/SeqSplitter$class.patchParSeq:(Lscala/collection/parallel/SeqSplitter;ILscala/collection/parallel/SeqSplitter;I)Lscala/collection/parallel/SeqSplitter$Patched;
       7: areturn

  public int prefixLength(scala.Function1<S, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #93                 // Method scala/collection/parallel/AugmentedSeqIterator$class.prefixLength:(Lscala/collection/parallel/AugmentedSeqIterator;Lscala/Function1;)I
       5: ireturn

  public int indexWhere(scala.Function1<S, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #97                 // Method scala/collection/parallel/AugmentedSeqIterator$class.indexWhere:(Lscala/collection/parallel/AugmentedSeqIterator;Lscala/Function1;)I
       5: ireturn

  public int lastIndexWhere(scala.Function1<S, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #100                // Method scala/collection/parallel/AugmentedSeqIterator$class.lastIndexWhere:(Lscala/collection/parallel/AugmentedSeqIterator;Lscala/Function1;)I
       5: ireturn

  public <S> boolean corresponds(scala.Function2<S, S, java.lang.Object>, scala.collection.Iterator<S>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #105                // Method scala/collection/parallel/AugmentedSeqIterator$class.corresponds:(Lscala/collection/parallel/AugmentedSeqIterator;Lscala/Function2;Lscala/collection/Iterator;)Z
       6: ireturn

  public <U, This> scala.collection.parallel.Combiner<U, This> reverse2combiner(scala.collection.parallel.Combiner<U, This>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #113                // Method scala/collection/parallel/AugmentedSeqIterator$class.reverse2combiner:(Lscala/collection/parallel/AugmentedSeqIterator;Lscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
       5: areturn

  public <S, That> scala.collection.parallel.Combiner<S, That> reverseMap2combiner(scala.Function1<S, S>, scala.collection.parallel.Combiner<S, That>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #120                // Method scala/collection/parallel/AugmentedSeqIterator$class.reverseMap2combiner:(Lscala/collection/parallel/AugmentedSeqIterator;Lscala/Function1;Lscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
       6: areturn

  public <U, That> scala.collection.parallel.Combiner<U, That> updated2combiner(int, U, scala.collection.parallel.Combiner<U, That>);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #125                // Method scala/collection/parallel/AugmentedSeqIterator$class.updated2combiner:(Lscala/collection/parallel/AugmentedSeqIterator;ILjava/lang/Object;Lscala/collection/parallel/Combiner;)Lscala/collection/parallel/Combiner;
       7: areturn

  public scala.collection.parallel.SeqSplitter<S> dup();
    Code:
       0: aload_0
       1: invokespecial #131                // Method scala/collection/parallel/IterableSplitter$Mapped.dup:()Lscala/collection/parallel/IterableSplitter;
       4: checkcast     #7                  // class scala/collection/parallel/SeqSplitter
       7: areturn

  public scala.collection.Seq<scala.collection.parallel.SeqSplitter<S>> split();
    Code:
       0: aload_0
       1: invokespecial #134                // Method scala/collection/parallel/IterableSplitter$Mapped.split:()Lscala/collection/Seq;
       4: areturn

  public scala.collection.Seq<scala.collection.parallel.SeqSplitter<S>> psplit(scala.collection.Seq<java.lang.Object>);
    Code:
       0: aload_0
       1: invokevirtual #138                // Method scala$collection$parallel$SeqSplitter$Mapped$$$outer:()Lscala/collection/parallel/SeqSplitter;
       4: aload_1
       5: invokeinterface #140,  2          // InterfaceMethod scala/collection/parallel/SeqSplitter.psplit:(Lscala/collection/Seq;)Lscala/collection/Seq;
      10: new           #142                // class scala/collection/parallel/SeqSplitter$Mapped$$anonfun$psplit$2
      13: dup
      14: aload_0
      15: invokespecial #146                // Method scala/collection/parallel/SeqSplitter$Mapped$$anonfun$psplit$2."<init>":(Lscala/collection/parallel/SeqSplitter$Mapped;)V
      18: getstatic     #152                // Field scala/collection/Seq$.MODULE$:Lscala/collection/Seq$;
      21: invokevirtual #156                // Method scala/collection/Seq$.canBuildFrom:()Lscala/collection/generic/CanBuildFrom;
      24: invokeinterface #161,  3          // InterfaceMethod scala/collection/Seq.map:(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
      29: checkcast     #158                // class scala/collection/Seq
      32: areturn

  public scala.collection.parallel.SeqSplitter scala$collection$parallel$SeqSplitter$Mapped$$$outer();
    Code:
       0: aload_0
       1: getfield      #165                // Field $outer:Lscala/collection/parallel/IterableSplitter;
       4: checkcast     #7                  // class scala/collection/parallel/SeqSplitter
       7: areturn

  public scala.collection.parallel.IterableSplitter$ZippedAll zipAllParSeq(scala.collection.parallel.SeqSplitter, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokevirtual #168                // Method zipAllParSeq:(Lscala/collection/parallel/SeqSplitter;Ljava/lang/Object;Ljava/lang/Object;)Lscala/collection/parallel/SeqSplitter$ZippedAll;
       7: areturn

  public scala.collection.parallel.IterableSplitter$Zipped zipParSeq(scala.collection.parallel.SeqSplitter);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #171                // Method zipParSeq:(Lscala/collection/parallel/SeqSplitter;)Lscala/collection/parallel/SeqSplitter$Zipped;
       5: areturn

  public scala.collection.Iterator map(scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #174                // Method map:(Lscala/Function1;)Lscala/collection/parallel/SeqSplitter$Mapped;
       5: areturn

  public scala.collection.parallel.IterableSplitter$Mapped map(scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #174                // Method map:(Lscala/Function1;)Lscala/collection/parallel/SeqSplitter$Mapped;
       5: areturn

  public scala.collection.Iterator slice(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokevirtual #178                // Method slice:(II)Lscala/collection/parallel/SeqSplitter;
       6: areturn

  public scala.collection.parallel.IterableSplitter slice(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokevirtual #178                // Method slice:(II)Lscala/collection/parallel/SeqSplitter;
       6: areturn

  public scala.collection.Iterator take(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #182                // Method take:(I)Lscala/collection/parallel/SeqSplitter;
       5: areturn

  public scala.collection.parallel.IterableSplitter take(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #182                // Method take:(I)Lscala/collection/parallel/SeqSplitter;
       5: areturn

  public scala.collection.parallel.IterableSplitter$Taken newTaken(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #186                // Method newTaken:(I)Lscala/collection/parallel/SeqSplitter$Taken;
       5: areturn

  public scala.collection.parallel.IterableSplitter dup();
    Code:
       0: aload_0
       1: invokevirtual #188                // Method dup:()Lscala/collection/parallel/SeqSplitter;
       4: areturn

  public scala.collection.parallel.SeqSplitter$Mapped(scala.collection.parallel.SeqSplitter<T>, scala.Function1<T, S>);
    Code:
       0: aload_0
       1: aload_2
       2: putfield      #191                // Field scala$collection$parallel$SeqSplitter$Mapped$$f:Lscala/Function1;
       5: aload_0
       6: aload_1
       7: aload_2
       8: invokespecial #194                // Method scala/collection/parallel/IterableSplitter$Mapped."<init>":(Lscala/collection/parallel/IterableSplitter;Lscala/Function1;)V
      11: aload_0
      12: invokestatic  #198                // Method scala/collection/parallel/AugmentedSeqIterator$class.$init$:(Lscala/collection/parallel/AugmentedSeqIterator;)V
      15: aload_0
      16: invokestatic  #201                // Method scala/collection/parallel/SeqSplitter$class.$init$:(Lscala/collection/parallel/SeqSplitter;)V
      19: return
}
