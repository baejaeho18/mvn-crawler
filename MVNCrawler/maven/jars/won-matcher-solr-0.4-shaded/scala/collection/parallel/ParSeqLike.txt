Compiled from "ParSeqLike.scala"
public interface scala.collection.parallel.ParSeqLike<T, Repr extends scala.collection.parallel.ParSeq<T>, Sequential extends scala.collection.Seq<T> & scala.collection.SeqLike<T, Sequential>> extends scala.collection.GenSeqLike<T, Repr>, scala.collection.parallel.ParIterableLike<T, Repr, Sequential> {
  public abstract java.lang.Object scala$collection$parallel$ParSeqLike$$super$zip(scala.collection.GenIterable, scala.collection.generic.CanBuildFrom);

  public abstract scala.collection.parallel.SeqSplitter<T> splitter();

  public abstract scala.collection.parallel.PreciseSplitter<T> iterator();

  public abstract int size();

  public abstract int segmentLength(scala.Function1<T, java.lang.Object>, int);

  public abstract int indexWhere(scala.Function1<T, java.lang.Object>, int);

  public abstract int lastIndexWhere(scala.Function1<T, java.lang.Object>, int);

  public abstract Repr reverse();

  public abstract <S, That> That reverseMap(scala.Function1<T, S>, scala.collection.generic.CanBuildFrom<Repr, S, That>);

  public abstract <S> boolean startsWith(scala.collection.GenSeq<S>, int);

  public abstract <U> boolean sameElements(scala.collection.GenIterable<U>);

  public abstract <S> boolean endsWith(scala.collection.GenSeq<S>);

  public abstract <U, That> That patch(int, scala.collection.GenSeq<U>, int, scala.collection.generic.CanBuildFrom<Repr, U, That>);

  public abstract <U, That> That updated(int, U, scala.collection.generic.CanBuildFrom<Repr, U, That>);

  public abstract <U, That> That $plus$colon(U, scala.collection.generic.CanBuildFrom<Repr, U, That>);

  public abstract <U, That> That $colon$plus(U, scala.collection.generic.CanBuildFrom<Repr, U, That>);

  public abstract <U, That> That padTo(int, U, scala.collection.generic.CanBuildFrom<Repr, U, That>);

  public abstract <U, S, That> That zip(scala.collection.GenIterable<S>, scala.collection.generic.CanBuildFrom<Repr, scala.Tuple2<U, S>, That>);

  public abstract <S> boolean corresponds(scala.collection.GenSeq<S>, scala.Function2<T, S, java.lang.Object>);

  public abstract <U> Repr diff(scala.collection.GenSeq<U>);

  public abstract <U> Repr intersect(scala.collection.GenSeq<U>);

  public abstract Repr distinct();

  public abstract java.lang.String toString();

  public abstract scala.collection.parallel.ParSeq<T> toSeq();

  public abstract java.lang.Object view();

  public abstract scala.collection.parallel.SeqSplitter<T> down(scala.collection.parallel.IterableSplitter<?>);
}
