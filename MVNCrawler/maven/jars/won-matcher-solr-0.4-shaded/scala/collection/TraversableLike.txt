Compiled from "TraversableLike.scala"
public interface scala.collection.TraversableLike<A, Repr> extends scala.collection.generic.HasNewBuilder<A, Repr>, scala.collection.generic.FilterMonadic<A, Repr>, scala.collection.TraversableOnce<A>, scala.collection.GenTraversableLike<A, Repr> {
  public abstract Repr repr();

  public abstract boolean isTraversableAgain();

  public abstract scala.collection.Traversable<A> thisCollection();

  public abstract scala.collection.Traversable<A> toCollection(Repr);

  public abstract scala.collection.mutable.Builder<A, Repr> newBuilder();

  public abstract scala.collection.parallel.Combiner<A, scala.collection.parallel.ParIterable<A>> parCombiner();

  public abstract <U> void foreach(scala.Function1<A, U>);

  public abstract boolean isEmpty();

  public abstract boolean hasDefiniteSize();

  public abstract <B, That> That $plus$plus(scala.collection.GenTraversableOnce<B>, scala.collection.generic.CanBuildFrom<Repr, B, That>);

  public abstract <B, That> That $plus$plus$colon(scala.collection.TraversableOnce<B>, scala.collection.generic.CanBuildFrom<Repr, B, That>);

  public abstract <B, That> That $plus$plus$colon(scala.collection.Traversable<B>, scala.collection.generic.CanBuildFrom<Repr, B, That>);

  public abstract <B, That> That map(scala.Function1<A, B>, scala.collection.generic.CanBuildFrom<Repr, B, That>);

  public abstract <B, That> That flatMap(scala.Function1<A, scala.collection.GenTraversableOnce<B>>, scala.collection.generic.CanBuildFrom<Repr, B, That>);

  public abstract Repr filter(scala.Function1<A, java.lang.Object>);

  public abstract Repr filterNot(scala.Function1<A, java.lang.Object>);

  public abstract <B, That> That collect(scala.PartialFunction<A, B>, scala.collection.generic.CanBuildFrom<Repr, B, That>);

  public abstract scala.Tuple2<Repr, Repr> partition(scala.Function1<A, java.lang.Object>);

  public abstract <K> scala.collection.immutable.Map<K, Repr> groupBy(scala.Function1<A, K>);

  public abstract boolean forall(scala.Function1<A, java.lang.Object>);

  public abstract boolean exists(scala.Function1<A, java.lang.Object>);

  public abstract scala.Option<A> find(scala.Function1<A, java.lang.Object>);

  public abstract <B, That> That scan(B, scala.Function2<B, B, B>, scala.collection.generic.CanBuildFrom<Repr, B, That>);

  public abstract <B, That> That scanLeft(B, scala.Function2<B, A, B>, scala.collection.generic.CanBuildFrom<Repr, B, That>);

  public abstract <B, That> That scanRight(B, scala.Function2<A, B, B>, scala.collection.generic.CanBuildFrom<Repr, B, That>);

  public abstract A head();

  public abstract scala.Option<A> headOption();

  public abstract Repr tail();

  public abstract A last();

  public abstract scala.Option<A> lastOption();

  public abstract Repr init();

  public abstract Repr take(int);

  public abstract Repr drop(int);

  public abstract Repr slice(int, int);

  public abstract Repr sliceWithKnownDelta(int, int, int);

  public abstract Repr sliceWithKnownBound(int, int);

  public abstract Repr takeWhile(scala.Function1<A, java.lang.Object>);

  public abstract Repr dropWhile(scala.Function1<A, java.lang.Object>);

  public abstract scala.Tuple2<Repr, Repr> span(scala.Function1<A, java.lang.Object>);

  public abstract scala.Tuple2<Repr, Repr> splitAt(int);

  public abstract scala.collection.Iterator<Repr> tails();

  public abstract scala.collection.Iterator<Repr> inits();

  public abstract <B> void copyToArray(java.lang.Object, int, int);

  public abstract scala.collection.Traversable<A> toTraversable();

  public abstract scala.collection.Iterator<A> toIterator();

  public abstract scala.collection.immutable.Stream<A> toStream();

  public abstract <Col> Col to(scala.collection.generic.CanBuildFrom<scala.runtime.Nothing$, A, Col>);

  public abstract java.lang.String toString();

  public abstract java.lang.String stringPrefix();

  public abstract java.lang.Object view();

  public abstract scala.collection.TraversableView<A, Repr> view(int, int);

  public abstract scala.collection.generic.FilterMonadic<A, Repr> withFilter(scala.Function1<A, java.lang.Object>);
}
