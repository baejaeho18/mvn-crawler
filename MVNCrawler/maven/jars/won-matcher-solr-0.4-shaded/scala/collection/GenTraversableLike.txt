Compiled from "GenTraversableLike.scala"
public interface scala.collection.GenTraversableLike<A, Repr> extends scala.collection.GenTraversableOnce<A>, scala.collection.Parallelizable<A, scala.collection.parallel.ParIterable<A>> {
  public abstract Repr repr();

  public abstract int size();

  public abstract A head();

  public abstract scala.Option<A> headOption();

  public abstract boolean isTraversableAgain();

  public abstract Repr tail();

  public abstract A last();

  public abstract scala.Option<A> lastOption();

  public abstract Repr init();

  public abstract <B, That> That scan(B, scala.Function2<B, B, B>, scala.collection.generic.CanBuildFrom<Repr, B, That>);

  public abstract <B, That> That scanLeft(B, scala.Function2<B, A, B>, scala.collection.generic.CanBuildFrom<Repr, B, That>);

  public abstract <B, That> That scanRight(B, scala.Function2<A, B, B>, scala.collection.generic.CanBuildFrom<Repr, B, That>);

  public abstract <U> void foreach(scala.Function1<A, U>);

  public abstract <B, That> That map(scala.Function1<A, B>, scala.collection.generic.CanBuildFrom<Repr, B, That>);

  public abstract <B, That> That collect(scala.PartialFunction<A, B>, scala.collection.generic.CanBuildFrom<Repr, B, That>);

  public abstract <B, That> That flatMap(scala.Function1<A, scala.collection.GenTraversableOnce<B>>, scala.collection.generic.CanBuildFrom<Repr, B, That>);

  public abstract <B, That> That $plus$plus(scala.collection.GenTraversableOnce<B>, scala.collection.generic.CanBuildFrom<Repr, B, That>);

  public abstract Repr filter(scala.Function1<A, java.lang.Object>);

  public abstract Repr filterNot(scala.Function1<A, java.lang.Object>);

  public abstract scala.Tuple2<Repr, Repr> partition(scala.Function1<A, java.lang.Object>);

  public abstract <K> scala.collection.GenMap<K, Repr> groupBy(scala.Function1<A, K>);

  public abstract Repr take(int);

  public abstract Repr drop(int);

  public abstract Repr slice(int, int);

  public abstract scala.Tuple2<Repr, Repr> splitAt(int);

  public abstract Repr takeWhile(scala.Function1<A, java.lang.Object>);

  public abstract scala.Tuple2<Repr, Repr> span(scala.Function1<A, java.lang.Object>);

  public abstract Repr dropWhile(scala.Function1<A, java.lang.Object>);

  public abstract java.lang.String stringPrefix();
}
