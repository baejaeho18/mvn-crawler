Compiled from "RedBlackTree.scala"
public final class scala.collection.immutable.RedBlackTree {
  public static <A, B> scala.None$ valuesIterator$default$2();
    Code:
       0: getstatic     #16                 // Field scala/collection/immutable/RedBlackTree$.MODULE$:Lscala/collection/immutable/RedBlackTree$;
       3: invokevirtual #18                 // Method scala/collection/immutable/RedBlackTree$.valuesIterator$default$2:()Lscala/None$;
       6: areturn

  public static <A> scala.None$ keysIterator$default$2();
    Code:
       0: getstatic     #16                 // Field scala/collection/immutable/RedBlackTree$.MODULE$:Lscala/collection/immutable/RedBlackTree$;
       3: invokevirtual #21                 // Method scala/collection/immutable/RedBlackTree$.keysIterator$default$2:()Lscala/None$;
       6: areturn

  public static <A, B> scala.None$ iterator$default$2();
    Code:
       0: getstatic     #16                 // Field scala/collection/immutable/RedBlackTree$.MODULE$:Lscala/collection/immutable/RedBlackTree$;
       3: invokevirtual #24                 // Method scala/collection/immutable/RedBlackTree$.iterator$default$2:()Lscala/None$;
       6: areturn

  public static boolean isBlack(scala.collection.immutable.RedBlackTree$Tree<?, ?>);
    Code:
       0: getstatic     #16                 // Field scala/collection/immutable/RedBlackTree$.MODULE$:Lscala/collection/immutable/RedBlackTree$;
       3: aload_0
       4: invokevirtual #28                 // Method scala/collection/immutable/RedBlackTree$.isBlack:(Lscala/collection/immutable/RedBlackTree$Tree;)Z
       7: ireturn

  public static <A, B> scala.collection.immutable.RedBlackTree$Tree<A, B> nth(scala.collection.immutable.RedBlackTree$Tree<A, B>, int);
    Code:
       0: getstatic     #16                 // Field scala/collection/immutable/RedBlackTree$.MODULE$:Lscala/collection/immutable/RedBlackTree$;
       3: aload_0
       4: iload_1
       5: invokevirtual #32                 // Method scala/collection/immutable/RedBlackTree$.nth:(Lscala/collection/immutable/RedBlackTree$Tree;I)Lscala/collection/immutable/RedBlackTree$Tree;
       8: areturn

  public static <A, B> scala.collection.Iterator<B> valuesIterator(scala.collection.immutable.RedBlackTree$Tree<A, B>, scala.Option<A>, scala.math.Ordering<A>);
    Code:
       0: getstatic     #16                 // Field scala/collection/immutable/RedBlackTree$.MODULE$:Lscala/collection/immutable/RedBlackTree$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #36                 // Method scala/collection/immutable/RedBlackTree$.valuesIterator:(Lscala/collection/immutable/RedBlackTree$Tree;Lscala/Option;Lscala/math/Ordering;)Lscala/collection/Iterator;
       9: areturn

  public static <A> scala.collection.Iterator<A> keysIterator(scala.collection.immutable.RedBlackTree$Tree<A, ?>, scala.Option<A>, scala.math.Ordering<A>);
    Code:
       0: getstatic     #16                 // Field scala/collection/immutable/RedBlackTree$.MODULE$:Lscala/collection/immutable/RedBlackTree$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #39                 // Method scala/collection/immutable/RedBlackTree$.keysIterator:(Lscala/collection/immutable/RedBlackTree$Tree;Lscala/Option;Lscala/math/Ordering;)Lscala/collection/Iterator;
       9: areturn

  public static <A, B> scala.collection.Iterator<scala.Tuple2<A, B>> iterator(scala.collection.immutable.RedBlackTree$Tree<A, B>, scala.Option<A>, scala.math.Ordering<A>);
    Code:
       0: getstatic     #16                 // Field scala/collection/immutable/RedBlackTree$.MODULE$:Lscala/collection/immutable/RedBlackTree$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #42                 // Method scala/collection/immutable/RedBlackTree$.iterator:(Lscala/collection/immutable/RedBlackTree$Tree;Lscala/Option;Lscala/math/Ordering;)Lscala/collection/Iterator;
       9: areturn

  public static <A, U> void foreachKey(scala.collection.immutable.RedBlackTree$Tree<A, ?>, scala.Function1<A, U>);
    Code:
       0: getstatic     #16                 // Field scala/collection/immutable/RedBlackTree$.MODULE$:Lscala/collection/immutable/RedBlackTree$;
       3: aload_0
       4: aload_1
       5: invokevirtual #46                 // Method scala/collection/immutable/RedBlackTree$.foreachKey:(Lscala/collection/immutable/RedBlackTree$Tree;Lscala/Function1;)V
       8: return

  public static <A, B, U> void foreach(scala.collection.immutable.RedBlackTree$Tree<A, B>, scala.Function1<scala.Tuple2<A, B>, U>);
    Code:
       0: getstatic     #16                 // Field scala/collection/immutable/RedBlackTree$.MODULE$:Lscala/collection/immutable/RedBlackTree$;
       3: aload_0
       4: aload_1
       5: invokevirtual #49                 // Method scala/collection/immutable/RedBlackTree$.foreach:(Lscala/collection/immutable/RedBlackTree$Tree;Lscala/Function1;)V
       8: return

  public static <A, B> scala.collection.immutable.RedBlackTree$Tree<A, B> greatest(scala.collection.immutable.RedBlackTree$Tree<A, B>);
    Code:
       0: getstatic     #16                 // Field scala/collection/immutable/RedBlackTree$.MODULE$:Lscala/collection/immutable/RedBlackTree$;
       3: aload_0
       4: invokevirtual #53                 // Method scala/collection/immutable/RedBlackTree$.greatest:(Lscala/collection/immutable/RedBlackTree$Tree;)Lscala/collection/immutable/RedBlackTree$Tree;
       7: areturn

  public static <A, B> scala.collection.immutable.RedBlackTree$Tree<A, B> smallest(scala.collection.immutable.RedBlackTree$Tree<A, B>);
    Code:
       0: getstatic     #16                 // Field scala/collection/immutable/RedBlackTree$.MODULE$:Lscala/collection/immutable/RedBlackTree$;
       3: aload_0
       4: invokevirtual #56                 // Method scala/collection/immutable/RedBlackTree$.smallest:(Lscala/collection/immutable/RedBlackTree$Tree;)Lscala/collection/immutable/RedBlackTree$Tree;
       7: areturn

  public static <A, B> scala.collection.immutable.RedBlackTree$Tree<A, B> slice(scala.collection.immutable.RedBlackTree$Tree<A, B>, int, int, scala.math.Ordering<A>);
    Code:
       0: getstatic     #16                 // Field scala/collection/immutable/RedBlackTree$.MODULE$:Lscala/collection/immutable/RedBlackTree$;
       3: aload_0
       4: iload_1
       5: iload_2
       6: aload_3
       7: invokevirtual #60                 // Method scala/collection/immutable/RedBlackTree$.slice:(Lscala/collection/immutable/RedBlackTree$Tree;IILscala/math/Ordering;)Lscala/collection/immutable/RedBlackTree$Tree;
      10: areturn

  public static <A, B> scala.collection.immutable.RedBlackTree$Tree<A, B> take(scala.collection.immutable.RedBlackTree$Tree<A, B>, int, scala.math.Ordering<A>);
    Code:
       0: getstatic     #16                 // Field scala/collection/immutable/RedBlackTree$.MODULE$:Lscala/collection/immutable/RedBlackTree$;
       3: aload_0
       4: iload_1
       5: aload_2
       6: invokevirtual #64                 // Method scala/collection/immutable/RedBlackTree$.take:(Lscala/collection/immutable/RedBlackTree$Tree;ILscala/math/Ordering;)Lscala/collection/immutable/RedBlackTree$Tree;
       9: areturn

  public static <A, B> scala.collection.immutable.RedBlackTree$Tree<A, B> drop(scala.collection.immutable.RedBlackTree$Tree<A, B>, int, scala.math.Ordering<A>);
    Code:
       0: getstatic     #16                 // Field scala/collection/immutable/RedBlackTree$.MODULE$:Lscala/collection/immutable/RedBlackTree$;
       3: aload_0
       4: iload_1
       5: aload_2
       6: invokevirtual #67                 // Method scala/collection/immutable/RedBlackTree$.drop:(Lscala/collection/immutable/RedBlackTree$Tree;ILscala/math/Ordering;)Lscala/collection/immutable/RedBlackTree$Tree;
       9: areturn

  public static <A, B> scala.collection.immutable.RedBlackTree$Tree<A, B> until(scala.collection.immutable.RedBlackTree$Tree<A, B>, A, scala.math.Ordering<A>);
    Code:
       0: getstatic     #16                 // Field scala/collection/immutable/RedBlackTree$.MODULE$:Lscala/collection/immutable/RedBlackTree$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #71                 // Method scala/collection/immutable/RedBlackTree$.until:(Lscala/collection/immutable/RedBlackTree$Tree;Ljava/lang/Object;Lscala/math/Ordering;)Lscala/collection/immutable/RedBlackTree$Tree;
       9: areturn

  public static <A, B> scala.collection.immutable.RedBlackTree$Tree<A, B> to(scala.collection.immutable.RedBlackTree$Tree<A, B>, A, scala.math.Ordering<A>);
    Code:
       0: getstatic     #16                 // Field scala/collection/immutable/RedBlackTree$.MODULE$:Lscala/collection/immutable/RedBlackTree$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #74                 // Method scala/collection/immutable/RedBlackTree$.to:(Lscala/collection/immutable/RedBlackTree$Tree;Ljava/lang/Object;Lscala/math/Ordering;)Lscala/collection/immutable/RedBlackTree$Tree;
       9: areturn

  public static <A, B> scala.collection.immutable.RedBlackTree$Tree<A, B> from(scala.collection.immutable.RedBlackTree$Tree<A, B>, A, scala.math.Ordering<A>);
    Code:
       0: getstatic     #16                 // Field scala/collection/immutable/RedBlackTree$.MODULE$:Lscala/collection/immutable/RedBlackTree$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #77                 // Method scala/collection/immutable/RedBlackTree$.from:(Lscala/collection/immutable/RedBlackTree$Tree;Ljava/lang/Object;Lscala/math/Ordering;)Lscala/collection/immutable/RedBlackTree$Tree;
       9: areturn

  public static <A, B> scala.collection.immutable.RedBlackTree$Tree<A, B> range(scala.collection.immutable.RedBlackTree$Tree<A, B>, A, A, scala.math.Ordering<A>);
    Code:
       0: getstatic     #16                 // Field scala/collection/immutable/RedBlackTree$.MODULE$:Lscala/collection/immutable/RedBlackTree$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: aload_3
       7: invokevirtual #81                 // Method scala/collection/immutable/RedBlackTree$.range:(Lscala/collection/immutable/RedBlackTree$Tree;Ljava/lang/Object;Ljava/lang/Object;Lscala/math/Ordering;)Lscala/collection/immutable/RedBlackTree$Tree;
      10: areturn

  public static <A, B> scala.collection.immutable.RedBlackTree$Tree<A, B> rangeImpl(scala.collection.immutable.RedBlackTree$Tree<A, B>, scala.Option<A>, scala.Option<A>, scala.math.Ordering<A>);
    Code:
       0: getstatic     #16                 // Field scala/collection/immutable/RedBlackTree$.MODULE$:Lscala/collection/immutable/RedBlackTree$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: aload_3
       7: invokevirtual #85                 // Method scala/collection/immutable/RedBlackTree$.rangeImpl:(Lscala/collection/immutable/RedBlackTree$Tree;Lscala/Option;Lscala/Option;Lscala/math/Ordering;)Lscala/collection/immutable/RedBlackTree$Tree;
      10: areturn

  public static <A, B> scala.collection.immutable.RedBlackTree$Tree<A, B> delete(scala.collection.immutable.RedBlackTree$Tree<A, B>, A, scala.math.Ordering<A>);
    Code:
       0: getstatic     #16                 // Field scala/collection/immutable/RedBlackTree$.MODULE$:Lscala/collection/immutable/RedBlackTree$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #88                 // Method scala/collection/immutable/RedBlackTree$.delete:(Lscala/collection/immutable/RedBlackTree$Tree;Ljava/lang/Object;Lscala/math/Ordering;)Lscala/collection/immutable/RedBlackTree$Tree;
       9: areturn

  public static <A, B, B1> scala.collection.immutable.RedBlackTree$Tree<A, B1> update(scala.collection.immutable.RedBlackTree$Tree<A, B>, A, B1, boolean, scala.math.Ordering<A>);
    Code:
       0: getstatic     #16                 // Field scala/collection/immutable/RedBlackTree$.MODULE$:Lscala/collection/immutable/RedBlackTree$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: iload_3
       7: aload         4
       9: invokevirtual #92                 // Method scala/collection/immutable/RedBlackTree$.update:(Lscala/collection/immutable/RedBlackTree$Tree;Ljava/lang/Object;Ljava/lang/Object;ZLscala/math/Ordering;)Lscala/collection/immutable/RedBlackTree$Tree;
      12: areturn

  public static <A> int countInRange(scala.collection.immutable.RedBlackTree$Tree<A, ?>, scala.Option<A>, scala.Option<A>, scala.math.Ordering<A>);
    Code:
       0: getstatic     #16                 // Field scala/collection/immutable/RedBlackTree$.MODULE$:Lscala/collection/immutable/RedBlackTree$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: aload_3
       7: invokevirtual #96                 // Method scala/collection/immutable/RedBlackTree$.countInRange:(Lscala/collection/immutable/RedBlackTree$Tree;Lscala/Option;Lscala/Option;Lscala/math/Ordering;)I
      10: ireturn

  public static int count(scala.collection.immutable.RedBlackTree$Tree<?, ?>);
    Code:
       0: getstatic     #16                 // Field scala/collection/immutable/RedBlackTree$.MODULE$:Lscala/collection/immutable/RedBlackTree$;
       3: aload_0
       4: invokevirtual #100                // Method scala/collection/immutable/RedBlackTree$.count:(Lscala/collection/immutable/RedBlackTree$Tree;)I
       7: ireturn

  public static <A, B> scala.collection.immutable.RedBlackTree$Tree<A, B> lookup(scala.collection.immutable.RedBlackTree$Tree<A, B>, A, scala.math.Ordering<A>);
    Code:
       0: getstatic     #16                 // Field scala/collection/immutable/RedBlackTree$.MODULE$:Lscala/collection/immutable/RedBlackTree$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #103                // Method scala/collection/immutable/RedBlackTree$.lookup:(Lscala/collection/immutable/RedBlackTree$Tree;Ljava/lang/Object;Lscala/math/Ordering;)Lscala/collection/immutable/RedBlackTree$Tree;
       9: areturn

  public static <A, B> scala.Option<B> get(scala.collection.immutable.RedBlackTree$Tree<A, B>, A, scala.math.Ordering<A>);
    Code:
       0: getstatic     #16                 // Field scala/collection/immutable/RedBlackTree$.MODULE$:Lscala/collection/immutable/RedBlackTree$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #107                // Method scala/collection/immutable/RedBlackTree$.get:(Lscala/collection/immutable/RedBlackTree$Tree;Ljava/lang/Object;Lscala/math/Ordering;)Lscala/Option;
       9: areturn

  public static <A> boolean contains(scala.collection.immutable.RedBlackTree$Tree<A, ?>, A, scala.math.Ordering<A>);
    Code:
       0: getstatic     #16                 // Field scala/collection/immutable/RedBlackTree$.MODULE$:Lscala/collection/immutable/RedBlackTree$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #111                // Method scala/collection/immutable/RedBlackTree$.contains:(Lscala/collection/immutable/RedBlackTree$Tree;Ljava/lang/Object;Lscala/math/Ordering;)Z
       9: ireturn

  public static boolean isEmpty(scala.collection.immutable.RedBlackTree$Tree<?, ?>);
    Code:
       0: getstatic     #16                 // Field scala/collection/immutable/RedBlackTree$.MODULE$:Lscala/collection/immutable/RedBlackTree$;
       3: aload_0
       4: invokevirtual #114                // Method scala/collection/immutable/RedBlackTree$.isEmpty:(Lscala/collection/immutable/RedBlackTree$Tree;)Z
       7: ireturn
}
