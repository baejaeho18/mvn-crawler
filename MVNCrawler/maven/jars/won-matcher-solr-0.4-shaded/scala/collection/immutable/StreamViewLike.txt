Compiled from "StreamViewLike.scala"
public interface scala.collection.immutable.StreamViewLike<A, Coll, This extends scala.collection.immutable.StreamView<A, Coll> & scala.collection.immutable.StreamViewLike<A, Coll, This>> extends scala.collection.SeqView<A, Coll> {
  public abstract <B, That> That force(scala.collection.generic.CanBuildFrom<Coll, B, That>);

  public abstract <B> scala.collection.immutable.StreamViewLike<A, Coll, This>.Transformed<B> newForced(scala.Function0<scala.collection.GenSeq<B>>);

  public abstract <B> scala.collection.immutable.StreamViewLike<A, Coll, This>.Transformed<B> newAppended(scala.collection.GenTraversable<B>);

  public abstract <B> scala.collection.immutable.StreamViewLike<A, Coll, This>.Transformed<B> newMapped(scala.Function1<A, B>);

  public abstract <B> scala.collection.immutable.StreamViewLike<A, Coll, This>.Transformed<B> newFlatMapped(scala.Function1<A, scala.collection.GenTraversableOnce<B>>);

  public abstract scala.collection.immutable.StreamViewLike<A, Coll, This>.Transformed<A> newFiltered(scala.Function1<A, java.lang.Object>);

  public abstract scala.collection.immutable.StreamViewLike<A, Coll, This>.Transformed<A> newSliced(scala.collection.generic.SliceInterval);

  public abstract scala.collection.immutable.StreamViewLike<A, Coll, This>.Transformed<A> newDroppedWhile(scala.Function1<A, java.lang.Object>);

  public abstract scala.collection.immutable.StreamViewLike<A, Coll, This>.Transformed<A> newTakenWhile(scala.Function1<A, java.lang.Object>);

  public abstract <B> scala.collection.immutable.StreamViewLike<A, Coll, This>.Transformed<scala.Tuple2<A, B>> newZipped(scala.collection.GenIterable<B>);

  public abstract <A1, B> scala.collection.immutable.StreamViewLike<A, Coll, This>.Transformed<scala.Tuple2<A1, B>> newZippedAll(scala.collection.GenIterable<B>, A1, B);

  public abstract scala.collection.immutable.StreamViewLike<A, Coll, This>.Transformed<A> newReversed();

  public abstract <B> scala.collection.immutable.StreamViewLike<A, Coll, This>.Transformed<B> newPatched(int, scala.collection.GenSeq<B>, int);

  public abstract <B> scala.collection.immutable.StreamViewLike<A, Coll, This>.Transformed<B> newPrepended(B);

  public abstract java.lang.String stringPrefix();
}
