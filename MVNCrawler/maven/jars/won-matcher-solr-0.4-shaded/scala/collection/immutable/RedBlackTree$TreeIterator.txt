Compiled from "RedBlackTree.scala"
public abstract class scala.collection.immutable.RedBlackTree$TreeIterator<A, B, R> implements scala.collection.Iterator<R> {
  public final scala.collection.immutable.RedBlackTree$Tree<A, B> scala$collection$immutable$RedBlackTree$TreeIterator$$root;

  private final scala.math.Ordering<A> ordering;

  private scala.collection.immutable.RedBlackTree$Tree<A, B>[] stackOfNexts;

  private int index;

  private scala.collection.immutable.RedBlackTree$Tree<A, B> lookahead;

  public scala.collection.Iterator<R> seq();
    Code:
       0: aload_0
       1: invokestatic  #27                 // Method scala/collection/Iterator$class.seq:(Lscala/collection/Iterator;)Lscala/collection/Iterator;
       4: areturn

  public boolean isEmpty();
    Code:
       0: aload_0
       1: invokestatic  #34                 // Method scala/collection/Iterator$class.isEmpty:(Lscala/collection/Iterator;)Z
       4: ireturn

  public boolean isTraversableAgain();
    Code:
       0: aload_0
       1: invokestatic  #37                 // Method scala/collection/Iterator$class.isTraversableAgain:(Lscala/collection/Iterator;)Z
       4: ireturn

  public boolean hasDefiniteSize();
    Code:
       0: aload_0
       1: invokestatic  #40                 // Method scala/collection/Iterator$class.hasDefiniteSize:(Lscala/collection/Iterator;)Z
       4: ireturn

  public scala.collection.Iterator<R> take(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #45                 // Method scala/collection/Iterator$class.take:(Lscala/collection/Iterator;I)Lscala/collection/Iterator;
       5: areturn

  public scala.collection.Iterator<R> drop(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #49                 // Method scala/collection/Iterator$class.drop:(Lscala/collection/Iterator;I)Lscala/collection/Iterator;
       5: areturn

  public scala.collection.Iterator<R> slice(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokestatic  #54                 // Method scala/collection/Iterator$class.slice:(Lscala/collection/Iterator;II)Lscala/collection/Iterator;
       6: areturn

  public <B> scala.collection.Iterator<B> map(scala.Function1<R, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #61                 // Method scala/collection/Iterator$class.map:(Lscala/collection/Iterator;Lscala/Function1;)Lscala/collection/Iterator;
       5: areturn

  public <B> scala.collection.Iterator<B> $plus$plus(scala.Function0<scala.collection.GenTraversableOnce<B>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #68                 // Method scala/collection/Iterator$class.$plus$plus:(Lscala/collection/Iterator;Lscala/Function0;)Lscala/collection/Iterator;
       5: areturn

  public <B> scala.collection.Iterator<B> flatMap(scala.Function1<R, scala.collection.GenTraversableOnce<B>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #73                 // Method scala/collection/Iterator$class.flatMap:(Lscala/collection/Iterator;Lscala/Function1;)Lscala/collection/Iterator;
       5: areturn

  public scala.collection.Iterator<R> filter(scala.Function1<R, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #76                 // Method scala/collection/Iterator$class.filter:(Lscala/collection/Iterator;Lscala/Function1;)Lscala/collection/Iterator;
       5: areturn

  public <B> boolean corresponds(scala.collection.GenTraversableOnce<B>, scala.Function2<R, B, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #82                 // Method scala/collection/Iterator$class.corresponds:(Lscala/collection/Iterator;Lscala/collection/GenTraversableOnce;Lscala/Function2;)Z
       6: ireturn

  public scala.collection.Iterator<R> withFilter(scala.Function1<R, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #87                 // Method scala/collection/Iterator$class.withFilter:(Lscala/collection/Iterator;Lscala/Function1;)Lscala/collection/Iterator;
       5: areturn

  public scala.collection.Iterator<R> filterNot(scala.Function1<R, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #90                 // Method scala/collection/Iterator$class.filterNot:(Lscala/collection/Iterator;Lscala/Function1;)Lscala/collection/Iterator;
       5: areturn

  public <B> scala.collection.Iterator<B> collect(scala.PartialFunction<R, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #95                 // Method scala/collection/Iterator$class.collect:(Lscala/collection/Iterator;Lscala/PartialFunction;)Lscala/collection/Iterator;
       5: areturn

  public <B> scala.collection.Iterator<B> scanLeft(B, scala.Function2<B, R, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #102                // Method scala/collection/Iterator$class.scanLeft:(Lscala/collection/Iterator;Ljava/lang/Object;Lscala/Function2;)Lscala/collection/Iterator;
       6: areturn

  public <B> scala.collection.Iterator<B> scanRight(B, scala.Function2<R, B, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #108                // Method scala/collection/Iterator$class.scanRight:(Lscala/collection/Iterator;Ljava/lang/Object;Lscala/Function2;)Lscala/collection/Iterator;
       6: areturn

  public scala.collection.Iterator<R> takeWhile(scala.Function1<R, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #111                // Method scala/collection/Iterator$class.takeWhile:(Lscala/collection/Iterator;Lscala/Function1;)Lscala/collection/Iterator;
       5: areturn

  public scala.Tuple2<scala.collection.Iterator<R>, scala.collection.Iterator<R>> partition(scala.Function1<R, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #116                // Method scala/collection/Iterator$class.partition:(Lscala/collection/Iterator;Lscala/Function1;)Lscala/Tuple2;
       5: areturn

  public scala.Tuple2<scala.collection.Iterator<R>, scala.collection.Iterator<R>> span(scala.Function1<R, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #119                // Method scala/collection/Iterator$class.span:(Lscala/collection/Iterator;Lscala/Function1;)Lscala/Tuple2;
       5: areturn

  public scala.collection.Iterator<R> dropWhile(scala.Function1<R, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #122                // Method scala/collection/Iterator$class.dropWhile:(Lscala/collection/Iterator;Lscala/Function1;)Lscala/collection/Iterator;
       5: areturn

  public <B> scala.collection.Iterator<scala.Tuple2<R, B>> zip(scala.collection.Iterator<B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #126                // Method scala/collection/Iterator$class.zip:(Lscala/collection/Iterator;Lscala/collection/Iterator;)Lscala/collection/Iterator;
       5: areturn

  public <A1> scala.collection.Iterator<A1> padTo(int, A1);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokestatic  #132                // Method scala/collection/Iterator$class.padTo:(Lscala/collection/Iterator;ILjava/lang/Object;)Lscala/collection/Iterator;
       6: areturn

  public scala.collection.Iterator<scala.Tuple2<R, java.lang.Object>> zipWithIndex();
    Code:
       0: aload_0
       1: invokestatic  #137                // Method scala/collection/Iterator$class.zipWithIndex:(Lscala/collection/Iterator;)Lscala/collection/Iterator;
       4: areturn

  public <B, A1, B1> scala.collection.Iterator<scala.Tuple2<A1, B1>> zipAll(scala.collection.Iterator<B>, A1, B1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #142                // Method scala/collection/Iterator$class.zipAll:(Lscala/collection/Iterator;Lscala/collection/Iterator;Ljava/lang/Object;Ljava/lang/Object;)Lscala/collection/Iterator;
       7: areturn

  public <U> void foreach(scala.Function1<R, U>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #149                // Method scala/collection/Iterator$class.foreach:(Lscala/collection/Iterator;Lscala/Function1;)V
       5: return

  public boolean forall(scala.Function1<R, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #154                // Method scala/collection/Iterator$class.forall:(Lscala/collection/Iterator;Lscala/Function1;)Z
       5: ireturn

  public boolean exists(scala.Function1<R, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #157                // Method scala/collection/Iterator$class.exists:(Lscala/collection/Iterator;Lscala/Function1;)Z
       5: ireturn

  public boolean contains(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #162                // Method scala/collection/Iterator$class.contains:(Lscala/collection/Iterator;Ljava/lang/Object;)Z
       5: ireturn

  public scala.Option<R> find(scala.Function1<R, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #167                // Method scala/collection/Iterator$class.find:(Lscala/collection/Iterator;Lscala/Function1;)Lscala/Option;
       5: areturn

  public int indexWhere(scala.Function1<R, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #172                // Method scala/collection/Iterator$class.indexWhere:(Lscala/collection/Iterator;Lscala/Function1;)I
       5: ireturn

  public <B> int indexOf(B);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #177                // Method scala/collection/Iterator$class.indexOf:(Lscala/collection/Iterator;Ljava/lang/Object;)I
       5: ireturn

  public scala.collection.BufferedIterator<R> buffered();
    Code:
       0: aload_0
       1: invokestatic  #182                // Method scala/collection/Iterator$class.buffered:(Lscala/collection/Iterator;)Lscala/collection/BufferedIterator;
       4: areturn

  public <B> scala.collection.Iterator<R>.GroupedIterator<B> grouped(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #187                // Method scala/collection/Iterator$class.grouped:(Lscala/collection/Iterator;I)Lscala/collection/Iterator$GroupedIterator;
       5: areturn

  public <B> scala.collection.Iterator<R>.GroupedIterator<B> sliding(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokestatic  #193                // Method scala/collection/Iterator$class.sliding:(Lscala/collection/Iterator;II)Lscala/collection/Iterator$GroupedIterator;
       6: areturn

  public int length();
    Code:
       0: aload_0
       1: invokestatic  #199                // Method scala/collection/Iterator$class.length:(Lscala/collection/Iterator;)I
       4: ireturn

  public scala.Tuple2<scala.collection.Iterator<R>, scala.collection.Iterator<R>> duplicate();
    Code:
       0: aload_0
       1: invokestatic  #204                // Method scala/collection/Iterator$class.duplicate:(Lscala/collection/Iterator;)Lscala/Tuple2;
       4: areturn

  public <B> scala.collection.Iterator<B> patch(int, scala.collection.Iterator<B>, int);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: iload_3
       4: invokestatic  #209                // Method scala/collection/Iterator$class.patch:(Lscala/collection/Iterator;ILscala/collection/Iterator;I)Lscala/collection/Iterator;
       7: areturn

  public <B> void copyToArray(java.lang.Object, int, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: invokestatic  #216                // Method scala/collection/Iterator$class.copyToArray:(Lscala/collection/Iterator;Ljava/lang/Object;II)V
       7: return

  public boolean sameElements(scala.collection.Iterator<?>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #222                // Method scala/collection/Iterator$class.sameElements:(Lscala/collection/Iterator;Lscala/collection/Iterator;)Z
       5: ireturn

  public scala.collection.Traversable<R> toTraversable();
    Code:
       0: aload_0
       1: invokestatic  #227                // Method scala/collection/Iterator$class.toTraversable:(Lscala/collection/Iterator;)Lscala/collection/Traversable;
       4: areturn

  public scala.collection.Iterator<R> toIterator();
    Code:
       0: aload_0
       1: invokestatic  #230                // Method scala/collection/Iterator$class.toIterator:(Lscala/collection/Iterator;)Lscala/collection/Iterator;
       4: areturn

  public scala.collection.immutable.Stream<R> toStream();
    Code:
       0: aload_0
       1: invokestatic  #235                // Method scala/collection/Iterator$class.toStream:(Lscala/collection/Iterator;)Lscala/collection/immutable/Stream;
       4: areturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: invokestatic  #240                // Method scala/collection/Iterator$class.toString:(Lscala/collection/Iterator;)Ljava/lang/String;
       4: areturn

  public <B> int sliding$default$2();
    Code:
       0: aload_0
       1: invokestatic  #243                // Method scala/collection/Iterator$class.sliding$default$2:(Lscala/collection/Iterator;)I
       4: ireturn

  public scala.collection.immutable.List<R> reversed();
    Code:
       0: aload_0
       1: invokestatic  #250                // Method scala/collection/TraversableOnce$class.reversed:(Lscala/collection/TraversableOnce;)Lscala/collection/immutable/List;
       4: areturn

  public int size();
    Code:
       0: aload_0
       1: invokestatic  #253                // Method scala/collection/TraversableOnce$class.size:(Lscala/collection/TraversableOnce;)I
       4: ireturn

  public boolean nonEmpty();
    Code:
       0: aload_0
       1: invokestatic  #257                // Method scala/collection/TraversableOnce$class.nonEmpty:(Lscala/collection/TraversableOnce;)Z
       4: ireturn

  public int count(scala.Function1<R, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #261                // Method scala/collection/TraversableOnce$class.count:(Lscala/collection/TraversableOnce;Lscala/Function1;)I
       5: ireturn

  public <B> scala.Option<B> collectFirst(scala.PartialFunction<R, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #266                // Method scala/collection/TraversableOnce$class.collectFirst:(Lscala/collection/TraversableOnce;Lscala/PartialFunction;)Lscala/Option;
       5: areturn

  public <B> B $div$colon(B, scala.Function2<B, R, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #271                // Method scala/collection/TraversableOnce$class.$div$colon:(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
       6: areturn

  public <B> B $colon$bslash(B, scala.Function2<R, B, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #274                // Method scala/collection/TraversableOnce$class.$colon$bslash:(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
       6: areturn

  public <B> B foldLeft(B, scala.Function2<B, R, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #277                // Method scala/collection/TraversableOnce$class.foldLeft:(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
       6: areturn

  public <B> B foldRight(B, scala.Function2<R, B, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #280                // Method scala/collection/TraversableOnce$class.foldRight:(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
       6: areturn

  public <B> B reduceLeft(scala.Function2<B, R, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #285                // Method scala/collection/TraversableOnce$class.reduceLeft:(Lscala/collection/TraversableOnce;Lscala/Function2;)Ljava/lang/Object;
       5: areturn

  public <B> B reduceRight(scala.Function2<R, B, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #288                // Method scala/collection/TraversableOnce$class.reduceRight:(Lscala/collection/TraversableOnce;Lscala/Function2;)Ljava/lang/Object;
       5: areturn

  public <B> scala.Option<B> reduceLeftOption(scala.Function2<B, R, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #293                // Method scala/collection/TraversableOnce$class.reduceLeftOption:(Lscala/collection/TraversableOnce;Lscala/Function2;)Lscala/Option;
       5: areturn

  public <B> scala.Option<B> reduceRightOption(scala.Function2<R, B, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #296                // Method scala/collection/TraversableOnce$class.reduceRightOption:(Lscala/collection/TraversableOnce;Lscala/Function2;)Lscala/Option;
       5: areturn

  public <A1> A1 reduce(scala.Function2<A1, A1, A1>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #299                // Method scala/collection/TraversableOnce$class.reduce:(Lscala/collection/TraversableOnce;Lscala/Function2;)Ljava/lang/Object;
       5: areturn

  public <A1> scala.Option<A1> reduceOption(scala.Function2<A1, A1, A1>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #302                // Method scala/collection/TraversableOnce$class.reduceOption:(Lscala/collection/TraversableOnce;Lscala/Function2;)Lscala/Option;
       5: areturn

  public <A1> A1 fold(A1, scala.Function2<A1, A1, A1>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #305                // Method scala/collection/TraversableOnce$class.fold:(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
       6: areturn

  public <B> B aggregate(scala.Function0<B>, scala.Function2<B, R, B>, scala.Function2<B, B, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #310                // Method scala/collection/TraversableOnce$class.aggregate:(Lscala/collection/TraversableOnce;Lscala/Function0;Lscala/Function2;Lscala/Function2;)Ljava/lang/Object;
       7: areturn

  public <B> B sum(scala.math.Numeric<B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #317                // Method scala/collection/TraversableOnce$class.sum:(Lscala/collection/TraversableOnce;Lscala/math/Numeric;)Ljava/lang/Object;
       5: areturn

  public <B> B product(scala.math.Numeric<B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #322                // Method scala/collection/TraversableOnce$class.product:(Lscala/collection/TraversableOnce;Lscala/math/Numeric;)Ljava/lang/Object;
       5: areturn

  public <B> R min(scala.math.Ordering<B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #327                // Method scala/collection/TraversableOnce$class.min:(Lscala/collection/TraversableOnce;Lscala/math/Ordering;)Ljava/lang/Object;
       5: areturn

  public <B> R max(scala.math.Ordering<B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #331                // Method scala/collection/TraversableOnce$class.max:(Lscala/collection/TraversableOnce;Lscala/math/Ordering;)Ljava/lang/Object;
       5: areturn

  public <B> R maxBy(scala.Function1<R, B>, scala.math.Ordering<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #336                // Method scala/collection/TraversableOnce$class.maxBy:(Lscala/collection/TraversableOnce;Lscala/Function1;Lscala/math/Ordering;)Ljava/lang/Object;
       6: areturn

  public <B> R minBy(scala.Function1<R, B>, scala.math.Ordering<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #339                // Method scala/collection/TraversableOnce$class.minBy:(Lscala/collection/TraversableOnce;Lscala/Function1;Lscala/math/Ordering;)Ljava/lang/Object;
       6: areturn

  public <B> void copyToBuffer(scala.collection.mutable.Buffer<B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #344                // Method scala/collection/TraversableOnce$class.copyToBuffer:(Lscala/collection/TraversableOnce;Lscala/collection/mutable/Buffer;)V
       5: return

  public <B> void copyToArray(java.lang.Object, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #350                // Method scala/collection/TraversableOnce$class.copyToArray:(Lscala/collection/TraversableOnce;Ljava/lang/Object;I)V
       6: return

  public <B> void copyToArray(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #354                // Method scala/collection/TraversableOnce$class.copyToArray:(Lscala/collection/TraversableOnce;Ljava/lang/Object;)V
       5: return

  public <B> java.lang.Object toArray(scala.reflect.ClassTag<B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #359                // Method scala/collection/TraversableOnce$class.toArray:(Lscala/collection/TraversableOnce;Lscala/reflect/ClassTag;)Ljava/lang/Object;
       5: areturn

  public scala.collection.immutable.List<R> toList();
    Code:
       0: aload_0
       1: invokestatic  #364                // Method scala/collection/TraversableOnce$class.toList:(Lscala/collection/TraversableOnce;)Lscala/collection/immutable/List;
       4: areturn

  public scala.collection.Iterable<R> toIterable();
    Code:
       0: aload_0
       1: invokestatic  #369                // Method scala/collection/TraversableOnce$class.toIterable:(Lscala/collection/TraversableOnce;)Lscala/collection/Iterable;
       4: areturn

  public scala.collection.Seq<R> toSeq();
    Code:
       0: aload_0
       1: invokestatic  #374                // Method scala/collection/TraversableOnce$class.toSeq:(Lscala/collection/TraversableOnce;)Lscala/collection/Seq;
       4: areturn

  public scala.collection.immutable.IndexedSeq<R> toIndexedSeq();
    Code:
       0: aload_0
       1: invokestatic  #379                // Method scala/collection/TraversableOnce$class.toIndexedSeq:(Lscala/collection/TraversableOnce;)Lscala/collection/immutable/IndexedSeq;
       4: areturn

  public <B> scala.collection.mutable.Buffer<B> toBuffer();
    Code:
       0: aload_0
       1: invokestatic  #384                // Method scala/collection/TraversableOnce$class.toBuffer:(Lscala/collection/TraversableOnce;)Lscala/collection/mutable/Buffer;
       4: areturn

  public <B> scala.collection.immutable.Set<B> toSet();
    Code:
       0: aload_0
       1: invokestatic  #389                // Method scala/collection/TraversableOnce$class.toSet:(Lscala/collection/TraversableOnce;)Lscala/collection/immutable/Set;
       4: areturn

  public scala.collection.immutable.Vector<R> toVector();
    Code:
       0: aload_0
       1: invokestatic  #394                // Method scala/collection/TraversableOnce$class.toVector:(Lscala/collection/TraversableOnce;)Lscala/collection/immutable/Vector;
       4: areturn

  public <Col> Col to(scala.collection.generic.CanBuildFrom<scala.runtime.Nothing$, R, Col>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #399                // Method scala/collection/TraversableOnce$class.to:(Lscala/collection/TraversableOnce;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
       5: areturn

  public <T, U> scala.collection.immutable.Map<T, U> toMap(scala.Predef$$less$colon$less<R, scala.Tuple2<T, U>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #406                // Method scala/collection/TraversableOnce$class.toMap:(Lscala/collection/TraversableOnce;Lscala/Predef$$less$colon$less;)Lscala/collection/immutable/Map;
       5: areturn

  public java.lang.String mkString(java.lang.String, java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #413                // Method scala/collection/TraversableOnce$class.mkString:(Lscala/collection/TraversableOnce;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
       7: areturn

  public java.lang.String mkString(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #420                // Method scala/collection/TraversableOnce$class.mkString:(Lscala/collection/TraversableOnce;Ljava/lang/String;)Ljava/lang/String;
       5: areturn

  public java.lang.String mkString();
    Code:
       0: aload_0
       1: invokestatic  #423                // Method scala/collection/TraversableOnce$class.mkString:(Lscala/collection/TraversableOnce;)Ljava/lang/String;
       4: areturn

  public scala.collection.mutable.StringBuilder addString(scala.collection.mutable.StringBuilder, java.lang.String, java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #428                // Method scala/collection/TraversableOnce$class.addString:(Lscala/collection/TraversableOnce;Lscala/collection/mutable/StringBuilder;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lscala/collection/mutable/StringBuilder;
       9: areturn

  public scala.collection.mutable.StringBuilder addString(scala.collection.mutable.StringBuilder, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #434                // Method scala/collection/TraversableOnce$class.addString:(Lscala/collection/TraversableOnce;Lscala/collection/mutable/StringBuilder;Ljava/lang/String;)Lscala/collection/mutable/StringBuilder;
       6: areturn

  public scala.collection.mutable.StringBuilder addString(scala.collection.mutable.StringBuilder);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #438                // Method scala/collection/TraversableOnce$class.addString:(Lscala/collection/TraversableOnce;Lscala/collection/mutable/StringBuilder;)Lscala/collection/mutable/StringBuilder;
       5: areturn

  public abstract R nextResult(scala.collection.immutable.RedBlackTree$Tree<A, B>);

  public boolean hasNext();
    Code:
       0: aload_0
       1: getfield      #443                // Field lookahead:Lscala/collection/immutable/RedBlackTree$Tree;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public R next();
    Code:
       0: aload_0
       1: getfield      #443                // Field lookahead:Lscala/collection/immutable/RedBlackTree$Tree;
       4: astore_1
       5: aload_1
       6: ifnonnull     20
       9: new           #447                // class java/util/NoSuchElementException
      12: dup
      13: ldc_w         #449                // String next on empty iterator
      16: invokespecial #453                // Method java/util/NoSuchElementException."<init>":(Ljava/lang/String;)V
      19: athrow
      20: aload_0
      21: aload_0
      22: aload_0
      23: aload_1
      24: invokespecial #457                // Method goRight:(Lscala/collection/immutable/RedBlackTree$Tree;)Lscala/collection/immutable/RedBlackTree$Tree;
      27: invokevirtual #460                // Method scala$collection$immutable$RedBlackTree$TreeIterator$$findLeftMostOrPopOnEmpty:(Lscala/collection/immutable/RedBlackTree$Tree;)Lscala/collection/immutable/RedBlackTree$Tree;
      30: putfield      #443                // Field lookahead:Lscala/collection/immutable/RedBlackTree$Tree;
      33: aload_0
      34: aload_1
      35: invokevirtual #462                // Method nextResult:(Lscala/collection/immutable/RedBlackTree$Tree;)Ljava/lang/Object;
      38: areturn

  public scala.collection.immutable.RedBlackTree$Tree<A, B> scala$collection$immutable$RedBlackTree$TreeIterator$$findLeftMostOrPopOnEmpty(scala.collection.immutable.RedBlackTree$Tree<A, B>);
    Code:
       0: aload_1
       1: ifnonnull     11
       4: aload_0
       5: invokespecial #468                // Method popNext:()Lscala/collection/immutable/RedBlackTree$Tree;
       8: goto          19
      11: aload_1
      12: invokevirtual #471                // Method scala/collection/immutable/RedBlackTree$Tree.left:()Lscala/collection/immutable/RedBlackTree$Tree;
      15: ifnonnull     20
      18: aload_1
      19: areturn
      20: aload_0
      21: aload_1
      22: invokespecial #474                // Method goLeft:(Lscala/collection/immutable/RedBlackTree$Tree;)Lscala/collection/immutable/RedBlackTree$Tree;
      25: astore_1
      26: goto          0

  private void pushNext(scala.collection.immutable.RedBlackTree$Tree<A, B>);
    Code:
       0: aload_0
       1: getfield      #481                // Field stackOfNexts:[Lscala/collection/immutable/RedBlackTree$Tree;
       4: aload_0
       5: getfield      #483                // Field index:I
       8: aload_1
       9: aastore
      10: aload_0
      11: aload_0
      12: getfield      #483                // Field index:I
      15: iconst_1
      16: iadd
      17: putfield      #483                // Field index:I
      20: getstatic     #489                // Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
      23: goto          88
      26: pop
      27: getstatic     #495                // Field scala/Predef$.MODULE$:Lscala/Predef$;
      30: aload_0
      31: getfield      #483                // Field index:I
      34: aload_0
      35: getfield      #481                // Field stackOfNexts:[Lscala/collection/immutable/RedBlackTree$Tree;
      38: arraylength
      39: if_icmplt     46
      42: iconst_1
      43: goto          47
      46: iconst_0
      47: invokevirtual #499                // Method scala/Predef$.assert:(Z)V
      50: aload_0
      51: getstatic     #495                // Field scala/Predef$.MODULE$:Lscala/Predef$;
      54: aload_0
      55: getfield      #481                // Field stackOfNexts:[Lscala/collection/immutable/RedBlackTree$Tree;
      58: checkcast     #501                // class "[Ljava/lang/Object;"
      61: invokevirtual #505                // Method scala/Predef$.refArrayOps:([Ljava/lang/Object;)Lscala/collection/mutable/ArrayOps;
      64: aconst_null
      65: getstatic     #510                // Field scala/reflect/ClassTag$.MODULE$:Lscala/reflect/ClassTag$;
      68: ldc_w         #464                // class scala/collection/immutable/RedBlackTree$Tree
      71: invokevirtual #514                // Method scala/reflect/ClassTag$.apply:(Ljava/lang/Class;)Lscala/reflect/ClassTag;
      74: invokeinterface #520,  3          // InterfaceMethod scala/collection/mutable/ArrayOps.$colon$plus:(Ljava/lang/Object;Lscala/reflect/ClassTag;)Ljava/lang/Object;
      79: checkcast     #521                // class "[Lscala/collection/immutable/RedBlackTree$Tree;"
      82: putfield      #481                // Field stackOfNexts:[Lscala/collection/immutable/RedBlackTree$Tree;
      85: goto          0
      88: pop
      89: return
    Exception table:
       from    to  target type
           0    26    26   Class java/lang/ArrayIndexOutOfBoundsException

  private scala.collection.immutable.RedBlackTree$Tree<A, B> popNext();
    Code:
       0: aload_0
       1: getfield      #483                // Field index:I
       4: iconst_0
       5: if_icmpne     12
       8: aconst_null
       9: goto          31
      12: aload_0
      13: aload_0
      14: getfield      #483                // Field index:I
      17: iconst_1
      18: isub
      19: putfield      #483                // Field index:I
      22: aload_0
      23: getfield      #481                // Field stackOfNexts:[Lscala/collection/immutable/RedBlackTree$Tree;
      26: aload_0
      27: getfield      #483                // Field index:I
      30: aaload
      31: areturn

  public scala.collection.immutable.RedBlackTree$Tree<A, B> scala$collection$immutable$RedBlackTree$TreeIterator$$startFrom(A);
    Code:
       0: aload_0
       1: getfield      #525                // Field scala$collection$immutable$RedBlackTree$TreeIterator$$root:Lscala/collection/immutable/RedBlackTree$Tree;
       4: ifnonnull     11
       7: aconst_null
       8: goto          20
      11: aload_0
      12: aload_0
      13: getfield      #525                // Field scala$collection$immutable$RedBlackTree$TreeIterator$$root:Lscala/collection/immutable/RedBlackTree$Tree;
      16: aload_1
      17: invokespecial #529                // Method find$1:(Lscala/collection/immutable/RedBlackTree$Tree;Ljava/lang/Object;)Lscala/collection/immutable/RedBlackTree$Tree;
      20: areturn

  private scala.collection.immutable.RedBlackTree$Tree<A, B> goLeft(scala.collection.immutable.RedBlackTree$Tree<A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #532                // Method pushNext:(Lscala/collection/immutable/RedBlackTree$Tree;)V
       5: aload_1
       6: invokevirtual #471                // Method scala/collection/immutable/RedBlackTree$Tree.left:()Lscala/collection/immutable/RedBlackTree$Tree;
       9: areturn

  private scala.collection.immutable.RedBlackTree$Tree<A, B> goRight(scala.collection.immutable.RedBlackTree$Tree<A, B>);
    Code:
       0: aload_1
       1: invokevirtual #535                // Method scala/collection/immutable/RedBlackTree$Tree.right:()Lscala/collection/immutable/RedBlackTree$Tree;
       4: areturn

  public scala.collection.GenMap toMap(scala.Predef$$less$colon$less);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #538                // Method toMap:(Lscala/Predef$$less$colon$less;)Lscala/collection/immutable/Map;
       5: areturn

  public scala.collection.GenSet toSet();
    Code:
       0: aload_0
       1: invokevirtual #541                // Method toSet:()Lscala/collection/immutable/Set;
       4: areturn

  public scala.collection.GenSeq toSeq();
    Code:
       0: aload_0
       1: invokevirtual #544                // Method toSeq:()Lscala/collection/Seq;
       4: areturn

  public scala.collection.GenIterable toIterable();
    Code:
       0: aload_0
       1: invokevirtual #547                // Method toIterable:()Lscala/collection/Iterable;
       4: areturn

  public scala.collection.GenTraversable toTraversable();
    Code:
       0: aload_0
       1: invokevirtual #550                // Method toTraversable:()Lscala/collection/Traversable;
       4: areturn

  public scala.collection.TraversableOnce seq();
    Code:
       0: aload_0
       1: invokevirtual #553                // Method seq:()Lscala/collection/Iterator;
       4: areturn

  private final scala.collection.immutable.RedBlackTree$Tree find$1(scala.collection.immutable.RedBlackTree$Tree, java.lang.Object);
    Code:
       0: aload_1
       1: ifnonnull     9
       4: aload_0
       5: invokespecial #468                // Method popNext:()Lscala/collection/immutable/RedBlackTree$Tree;
       8: areturn
       9: aload_0
      10: getfield      #555                // Field ordering:Lscala/math/Ordering;
      13: aload_2
      14: aload_1
      15: invokevirtual #557                // Method scala/collection/immutable/RedBlackTree$Tree.key:()Ljava/lang/Object;
      18: invokeinterface #563,  3          // InterfaceMethod scala/math/Ordering.lteq:(Ljava/lang/Object;Ljava/lang/Object;)Z
      23: ifeq          34
      26: aload_0
      27: aload_1
      28: invokespecial #474                // Method goLeft:(Lscala/collection/immutable/RedBlackTree$Tree;)Lscala/collection/immutable/RedBlackTree$Tree;
      31: goto          39
      34: aload_0
      35: aload_1
      36: invokespecial #457                // Method goRight:(Lscala/collection/immutable/RedBlackTree$Tree;)Lscala/collection/immutable/RedBlackTree$Tree;
      39: astore_1
      40: goto          0

  public scala.collection.immutable.RedBlackTree$TreeIterator(scala.collection.immutable.RedBlackTree$Tree<A, B>, scala.Option<A>, scala.math.Ordering<A>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #525                // Field scala$collection$immutable$RedBlackTree$TreeIterator$$root:Lscala/collection/immutable/RedBlackTree$Tree;
       5: aload_0
       6: aload_3
       7: putfield      #555                // Field ordering:Lscala/math/Ordering;
      10: aload_0
      11: invokespecial #568                // Method java/lang/Object."<init>":()V
      14: aload_0
      15: invokestatic  #572                // Method scala/collection/TraversableOnce$class.$init$:(Lscala/collection/TraversableOnce;)V
      18: aload_0
      19: invokestatic  #575                // Method scala/collection/Iterator$class.$init$:(Lscala/collection/Iterator;)V
      22: aload_0
      23: aload_1
      24: ifnonnull     31
      27: aconst_null
      28: goto          58
      31: iconst_2
      32: bipush        32
      34: aload_1
      35: invokevirtual #577                // Method scala/collection/immutable/RedBlackTree$Tree.count:()I
      38: iconst_2
      39: iadd
      40: iconst_1
      41: isub
      42: invokestatic  #583                // Method java/lang/Integer.numberOfLeadingZeros:(I)I
      45: isub
      46: imul
      47: iconst_2
      48: isub
      49: iconst_1
      50: isub
      51: istore        4
      53: iload         4
      55: anewarray     #464                // class scala/collection/immutable/RedBlackTree$Tree
      58: putfield      #481                // Field stackOfNexts:[Lscala/collection/immutable/RedBlackTree$Tree;
      61: aload_0
      62: iconst_0
      63: putfield      #483                // Field index:I
      66: aload_0
      67: aload_2
      68: invokevirtual #587                // Method scala/Option.isEmpty:()Z
      71: ifeq          80
      74: getstatic     #592                // Field scala/None$.MODULE$:Lscala/None$;
      77: goto          99
      80: new           #594                // class scala/Some
      83: dup
      84: aload_2
      85: invokevirtual #597                // Method scala/Option.get:()Ljava/lang/Object;
      88: astore        5
      90: aload_0
      91: aload         5
      93: invokevirtual #599                // Method scala$collection$immutable$RedBlackTree$TreeIterator$$startFrom:(Ljava/lang/Object;)Lscala/collection/immutable/RedBlackTree$Tree;
      96: invokespecial #601                // Method scala/Some."<init>":(Ljava/lang/Object;)V
      99: dup
     100: astore        6
     102: invokevirtual #587                // Method scala/Option.isEmpty:()Z
     105: ifeq          119
     108: aload_0
     109: aload_0
     110: getfield      #525                // Field scala$collection$immutable$RedBlackTree$TreeIterator$$root:Lscala/collection/immutable/RedBlackTree$Tree;
     113: invokevirtual #460                // Method scala$collection$immutable$RedBlackTree$TreeIterator$$findLeftMostOrPopOnEmpty:(Lscala/collection/immutable/RedBlackTree$Tree;)Lscala/collection/immutable/RedBlackTree$Tree;
     116: goto          124
     119: aload         6
     121: invokevirtual #597                // Method scala/Option.get:()Ljava/lang/Object;
     124: checkcast     #464                // class scala/collection/immutable/RedBlackTree$Tree
     127: putfield      #443                // Field lookahead:Lscala/collection/immutable/RedBlackTree$Tree;
     130: return
}
