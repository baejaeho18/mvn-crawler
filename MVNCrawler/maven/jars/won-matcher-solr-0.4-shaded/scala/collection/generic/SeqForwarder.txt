Compiled from "SeqForwarder.scala"
public interface scala.collection.generic.SeqForwarder<A> extends scala.collection.Seq<A>, scala.collection.generic.IterableForwarder<A> {
  public abstract scala.collection.Seq<A> underlying();

  public abstract int length();

  public abstract A apply(int);

  public abstract int lengthCompare(int);

  public abstract boolean isDefinedAt(int);

  public abstract int segmentLength(scala.Function1<A, java.lang.Object>, int);

  public abstract int prefixLength(scala.Function1<A, java.lang.Object>);

  public abstract int indexWhere(scala.Function1<A, java.lang.Object>);

  public abstract int indexWhere(scala.Function1<A, java.lang.Object>, int);

  public abstract <B> int indexOf(B);

  public abstract <B> int indexOf(B, int);

  public abstract <B> int lastIndexOf(B);

  public abstract <B> int lastIndexOf(B, int);

  public abstract int lastIndexWhere(scala.Function1<A, java.lang.Object>);

  public abstract int lastIndexWhere(scala.Function1<A, java.lang.Object>, int);

  public abstract scala.collection.Iterator<A> reverseIterator();

  public abstract <B> boolean startsWith(scala.collection.GenSeq<B>, int);

  public abstract <B> boolean startsWith(scala.collection.GenSeq<B>);

  public abstract <B> boolean endsWith(scala.collection.GenSeq<B>);

  public abstract <B> int indexOfSlice(scala.collection.GenSeq<B>);

  public abstract <B> int indexOfSlice(scala.collection.GenSeq<B>, int);

  public abstract <B> int lastIndexOfSlice(scala.collection.GenSeq<B>);

  public abstract <B> int lastIndexOfSlice(scala.collection.GenSeq<B>, int);

  public abstract <B> boolean containsSlice(scala.collection.GenSeq<B>);

  public abstract <A1> boolean contains(A1);

  public abstract <B> boolean corresponds(scala.collection.GenSeq<B>, scala.Function2<A, B, java.lang.Object>);

  public abstract scala.collection.immutable.Range indices();
}
