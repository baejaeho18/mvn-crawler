Compiled from "TraversableViewLike.scala"
public interface scala.collection.TraversableViewLike<A, Coll, This extends scala.collection.TraversableView<A, Coll> & scala.collection.TraversableViewLike<A, Coll, This>> extends scala.collection.Traversable<A>, scala.collection.ViewMkString<A> {
  public abstract scala.collection.TraversableView scala$collection$TraversableViewLike$$super$tail();

  public abstract Coll underlying();

  public abstract java.lang.String viewIdentifier();

  public abstract java.lang.String viewIdString();

  public abstract java.lang.String viewToString();

  public abstract java.lang.String stringPrefix();

  public abstract scala.collection.mutable.Builder<A, This> newBuilder();

  public abstract <B, That> That force(scala.collection.generic.CanBuildFrom<Coll, B, That>);

  public abstract <B, That> That $plus$plus(scala.collection.GenTraversableOnce<B>, scala.collection.generic.CanBuildFrom<This, B, That>);

  public abstract <B, That> That map(scala.Function1<A, B>, scala.collection.generic.CanBuildFrom<This, B, That>);

  public abstract <B, That> That collect(scala.PartialFunction<A, B>, scala.collection.generic.CanBuildFrom<This, B, That>);

  public abstract <B, That> That flatMap(scala.Function1<A, scala.collection.GenTraversableOnce<B>>, scala.collection.generic.CanBuildFrom<This, B, That>);

  public abstract <B> scala.collection.TraversableViewLike<A, Coll, This>.Transformed<B> flatten(scala.Function1<A, scala.collection.GenTraversableOnce<B>>);

  public abstract <B> scala.collection.TraversableViewLike<A, Coll, This>.Transformed<B> newForced(scala.Function0<scala.collection.GenSeq<B>>);

  public abstract <B> scala.collection.TraversableViewLike<A, Coll, This>.Transformed<B> newAppended(scala.collection.GenTraversable<B>);

  public abstract <B> scala.collection.TraversableViewLike<A, Coll, This>.Transformed<B> newMapped(scala.Function1<A, B>);

  public abstract <B> scala.collection.TraversableViewLike<A, Coll, This>.Transformed<B> newFlatMapped(scala.Function1<A, scala.collection.GenTraversableOnce<B>>);

  public abstract scala.collection.TraversableViewLike<A, Coll, This>.Transformed<A> newFiltered(scala.Function1<A, java.lang.Object>);

  public abstract scala.collection.TraversableViewLike<A, Coll, This>.Transformed<A> newSliced(scala.collection.generic.SliceInterval);

  public abstract scala.collection.TraversableViewLike<A, Coll, This>.Transformed<A> newDroppedWhile(scala.Function1<A, java.lang.Object>);

  public abstract scala.collection.TraversableViewLike<A, Coll, This>.Transformed<A> newTakenWhile(scala.Function1<A, java.lang.Object>);

  public abstract scala.collection.TraversableViewLike<A, Coll, This>.Transformed<A> newTaken(int);

  public abstract scala.collection.TraversableViewLike<A, Coll, This>.Transformed<A> newDropped(int);

  public abstract This filter(scala.Function1<A, java.lang.Object>);

  public abstract This withFilter(scala.Function1<A, java.lang.Object>);

  public abstract scala.Tuple2<This, This> partition(scala.Function1<A, java.lang.Object>);

  public abstract This init();

  public abstract This drop(int);

  public abstract This take(int);

  public abstract This slice(int, int);

  public abstract This dropWhile(scala.Function1<A, java.lang.Object>);

  public abstract This takeWhile(scala.Function1<A, java.lang.Object>);

  public abstract scala.Tuple2<This, This> span(scala.Function1<A, java.lang.Object>);

  public abstract scala.Tuple2<This, This> splitAt(int);

  public abstract <B, That> That scanLeft(B, scala.Function2<B, A, B>, scala.collection.generic.CanBuildFrom<This, B, That>);

  public abstract <B, That> That scanRight(B, scala.Function2<A, B, B>, scala.collection.generic.CanBuildFrom<This, B, That>);

  public abstract <K> scala.collection.immutable.Map<K, This> groupBy(scala.Function1<A, K>);

  public abstract <A1, A2> scala.Tuple2<scala.collection.TraversableViewLike<A, Coll, This>.Transformed<A1>, scala.collection.TraversableViewLike<A, Coll, This>.Transformed<A2>> unzip(scala.Function1<A, scala.Tuple2<A1, A2>>);

  public abstract <A1, A2, A3> scala.Tuple3<scala.collection.TraversableViewLike<A, Coll, This>.Transformed<A1>, scala.collection.TraversableViewLike<A, Coll, This>.Transformed<A2>, scala.collection.TraversableViewLike<A, Coll, This>.Transformed<A3>> unzip3(scala.Function1<A, scala.Tuple3<A1, A2, A3>>);

  public abstract This filterNot(scala.Function1<A, java.lang.Object>);

  public abstract scala.collection.Iterator<This> inits();

  public abstract scala.collection.Iterator<This> tails();

  public abstract This tail();

  public abstract java.lang.String toString();
}
