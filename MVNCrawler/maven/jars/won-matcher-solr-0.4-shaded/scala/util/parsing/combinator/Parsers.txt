Compiled from "Parsers.scala"
public interface scala.util.parsing.combinator.Parsers {
  public abstract scala.util.parsing.combinator.Parsers$Success$ Success();

  public abstract scala.util.DynamicVariable<scala.Option<scala.util.parsing.combinator.Parsers$NoSuccess>> scala$util$parsing$combinator$Parsers$$lastNoSuccessVar();

  public abstract scala.util.parsing.combinator.Parsers$NoSuccess$ NoSuccess();

  public abstract scala.util.parsing.combinator.Parsers$Failure$ Failure();

  public abstract scala.util.parsing.combinator.Parsers$Error$ Error();

  public abstract <T> scala.util.parsing.combinator.Parsers$Parser<T> Parser(scala.Function1<scala.util.parsing.input.Reader<java.lang.Object>, scala.util.parsing.combinator.Parsers$ParseResult<T>>);

  public abstract <T> scala.util.parsing.combinator.Parsers$Parser<T> OnceParser(scala.Function1<scala.util.parsing.input.Reader<java.lang.Object>, scala.util.parsing.combinator.Parsers$ParseResult<T>>);

  public abstract <T> scala.util.parsing.combinator.Parsers$Parser<T> commit(scala.Function0<scala.util.parsing.combinator.Parsers$Parser<T>>);

  public abstract scala.util.parsing.combinator.Parsers$Parser<java.lang.Object> elem(java.lang.String, scala.Function1<java.lang.Object, java.lang.Object>);

  public abstract scala.util.parsing.combinator.Parsers$Parser<java.lang.Object> elem(java.lang.Object);

  public abstract scala.util.parsing.combinator.Parsers$Parser<java.lang.Object> accept(java.lang.Object);

  public abstract <ES> scala.util.parsing.combinator.Parsers$Parser<scala.collection.immutable.List<java.lang.Object>> accept(ES, scala.Function1<ES, scala.collection.immutable.List<java.lang.Object>>);

  public abstract <U> scala.util.parsing.combinator.Parsers$Parser<U> accept(java.lang.String, scala.PartialFunction<java.lang.Object, U>);

  public abstract scala.util.parsing.combinator.Parsers$Parser<java.lang.Object> acceptIf(scala.Function1<java.lang.Object, java.lang.Object>, scala.Function1<java.lang.Object, java.lang.String>);

  public abstract <U> scala.util.parsing.combinator.Parsers$Parser<U> acceptMatch(java.lang.String, scala.PartialFunction<java.lang.Object, U>);

  public abstract <ES> scala.util.parsing.combinator.Parsers$Parser<scala.collection.immutable.List<java.lang.Object>> acceptSeq(ES, scala.Function1<ES, scala.collection.Iterable<java.lang.Object>>);

  public abstract scala.util.parsing.combinator.Parsers$Parser<scala.runtime.Nothing$> failure(java.lang.String);

  public abstract scala.util.parsing.combinator.Parsers$Parser<scala.runtime.Nothing$> err(java.lang.String);

  public abstract <T> scala.util.parsing.combinator.Parsers$Parser<T> success(T);

  public abstract <T> scala.util.parsing.combinator.Parsers$Parser<T> log(scala.Function0<scala.util.parsing.combinator.Parsers$Parser<T>>, java.lang.String);

  public abstract <T> scala.util.parsing.combinator.Parsers$Parser<scala.collection.immutable.List<T>> rep(scala.Function0<scala.util.parsing.combinator.Parsers$Parser<T>>);

  public abstract <T> scala.util.parsing.combinator.Parsers$Parser<scala.collection.immutable.List<T>> repsep(scala.Function0<scala.util.parsing.combinator.Parsers$Parser<T>>, scala.Function0<scala.util.parsing.combinator.Parsers$Parser<java.lang.Object>>);

  public abstract <T> scala.util.parsing.combinator.Parsers$Parser<scala.collection.immutable.List<T>> rep1(scala.Function0<scala.util.parsing.combinator.Parsers$Parser<T>>);

  public abstract <T> scala.util.parsing.combinator.Parsers$Parser<scala.collection.immutable.List<T>> rep1(scala.Function0<scala.util.parsing.combinator.Parsers$Parser<T>>, scala.Function0<scala.util.parsing.combinator.Parsers$Parser<T>>);

  public abstract <T> scala.util.parsing.combinator.Parsers$Parser<scala.collection.immutable.List<T>> repN(int, scala.Function0<scala.util.parsing.combinator.Parsers$Parser<T>>);

  public abstract <T> scala.util.parsing.combinator.Parsers$Parser<scala.collection.immutable.List<T>> rep1sep(scala.Function0<scala.util.parsing.combinator.Parsers$Parser<T>>, scala.Function0<scala.util.parsing.combinator.Parsers$Parser<java.lang.Object>>);

  public abstract <T> scala.util.parsing.combinator.Parsers$Parser<T> chainl1(scala.Function0<scala.util.parsing.combinator.Parsers$Parser<T>>, scala.Function0<scala.util.parsing.combinator.Parsers$Parser<scala.Function2<T, T, T>>>);

  public abstract <T, U> scala.util.parsing.combinator.Parsers$Parser<T> chainl1(scala.Function0<scala.util.parsing.combinator.Parsers$Parser<T>>, scala.Function0<scala.util.parsing.combinator.Parsers$Parser<U>>, scala.Function0<scala.util.parsing.combinator.Parsers$Parser<scala.Function2<T, U, T>>>);

  public abstract <T, U> scala.util.parsing.combinator.Parsers$Parser<U> chainr1(scala.Function0<scala.util.parsing.combinator.Parsers$Parser<T>>, scala.Function0<scala.util.parsing.combinator.Parsers$Parser<scala.Function2<T, U, U>>>, scala.Function2<T, U, U>, U);

  public abstract <T> scala.util.parsing.combinator.Parsers$Parser<scala.Option<T>> opt(scala.Function0<scala.util.parsing.combinator.Parsers$Parser<T>>);

  public abstract <T> scala.util.parsing.combinator.Parsers$Parser<scala.runtime.BoxedUnit> not(scala.Function0<scala.util.parsing.combinator.Parsers$Parser<T>>);

  public abstract <T> scala.util.parsing.combinator.Parsers$Parser<T> guard(scala.Function0<scala.util.parsing.combinator.Parsers$Parser<T>>);

  public abstract <T extends scala.util.parsing.input.Positional> scala.util.parsing.combinator.Parsers$Parser<T> positioned(scala.Function0<scala.util.parsing.combinator.Parsers$Parser<T>>);

  public abstract <T> scala.util.parsing.combinator.Parsers$Parser<T> phrase(scala.util.parsing.combinator.Parsers$Parser<T>);

  public abstract <T> scala.Function1<scala.util.parsing.combinator.Parsers$$tilde<T, scala.collection.immutable.List<T>>, scala.collection.immutable.List<T>> mkList();

  public abstract scala.util.parsing.combinator.Parsers$$tilde$ $tilde();
}
