Compiled from "RegexParsers.scala"
public interface scala.util.parsing.combinator.RegexParsers extends scala.util.parsing.combinator.Parsers {
  public abstract void scala$util$parsing$combinator$RegexParsers$_setter_$whiteSpace_$eq(scala.util.matching.Regex);

  public abstract scala.util.parsing.combinator.Parsers$Parser scala$util$parsing$combinator$RegexParsers$$super$positioned(scala.Function0);

  public abstract scala.util.parsing.combinator.Parsers$Parser scala$util$parsing$combinator$RegexParsers$$super$phrase(scala.util.parsing.combinator.Parsers$Parser);

  public abstract scala.util.matching.Regex whiteSpace();

  public abstract boolean skipWhitespace();

  public abstract int handleWhiteSpace(java.lang.CharSequence, int);

  public abstract scala.util.parsing.combinator.Parsers$Parser<java.lang.String> literal(java.lang.String);

  public abstract scala.util.parsing.combinator.Parsers$Parser<java.lang.String> regex(scala.util.matching.Regex);

  public abstract <T extends scala.util.parsing.input.Positional> scala.util.parsing.combinator.Parsers$Parser<T> positioned(scala.Function0<scala.util.parsing.combinator.Parsers$Parser<T>>);

  public abstract <T> scala.util.parsing.combinator.Parsers$Parser<T> phrase(scala.util.parsing.combinator.Parsers$Parser<T>);

  public abstract <T> scala.util.parsing.combinator.Parsers$ParseResult<T> parse(scala.util.parsing.combinator.Parsers$Parser<T>, scala.util.parsing.input.Reader<java.lang.Object>);

  public abstract <T> scala.util.parsing.combinator.Parsers$ParseResult<T> parse(scala.util.parsing.combinator.Parsers$Parser<T>, java.lang.CharSequence);

  public abstract <T> scala.util.parsing.combinator.Parsers$ParseResult<T> parse(scala.util.parsing.combinator.Parsers$Parser<T>, java.io.Reader);

  public abstract <T> scala.util.parsing.combinator.Parsers$ParseResult<T> parseAll(scala.util.parsing.combinator.Parsers$Parser<T>, scala.util.parsing.input.Reader<java.lang.Object>);

  public abstract <T> scala.util.parsing.combinator.Parsers$ParseResult<T> parseAll(scala.util.parsing.combinator.Parsers$Parser<T>, java.io.Reader);

  public abstract <T> scala.util.parsing.combinator.Parsers$ParseResult<T> parseAll(scala.util.parsing.combinator.Parsers$Parser<T>, java.lang.CharSequence);
}
