Compiled from "Properties.scala"
public interface scala.util.PropertiesTrait {
  public abstract void scala$util$PropertiesTrait$_setter_$propFilename_$eq(java.lang.String);

  public abstract void scala$util$PropertiesTrait$_setter_$releaseVersion_$eq(scala.Option);

  public abstract void scala$util$PropertiesTrait$_setter_$developmentVersion_$eq(scala.Option);

  public abstract void scala$util$PropertiesTrait$_setter_$versionString_$eq(java.lang.String);

  public abstract void scala$util$PropertiesTrait$_setter_$copyrightString_$eq(java.lang.String);

  public abstract java.lang.String propCategory();

  public abstract java.lang.Class<?> pickJarBasedOn();

  public abstract java.lang.String propFilename();

  public abstract java.util.Properties scalaProps();

  public abstract boolean propIsSet(java.lang.String);

  public abstract boolean propIsSetTo(java.lang.String, java.lang.String);

  public abstract java.lang.String propOrElse(java.lang.String, java.lang.String);

  public abstract java.lang.String propOrEmpty(java.lang.String);

  public abstract java.lang.String propOrNull(java.lang.String);

  public abstract scala.Option<java.lang.String> propOrNone(java.lang.String);

  public abstract boolean propOrFalse(java.lang.String);

  public abstract java.lang.String setProp(java.lang.String, java.lang.String);

  public abstract java.lang.String clearProp(java.lang.String);

  public abstract java.lang.String envOrElse(java.lang.String, java.lang.String);

  public abstract scala.Option<java.lang.String> envOrNone(java.lang.String);

  public abstract scala.Option<java.lang.String> envOrSome(java.lang.String, scala.Option<java.lang.String>);

  public abstract java.lang.String scalaPropOrElse(java.lang.String, java.lang.String);

  public abstract java.lang.String scalaPropOrEmpty(java.lang.String);

  public abstract scala.Option<java.lang.String> scalaPropOrNone(java.lang.String);

  public abstract scala.Option<java.lang.String> releaseVersion();

  public abstract scala.Option<java.lang.String> developmentVersion();

  public abstract java.lang.String versionNumberString();

  public abstract java.lang.String versionString();

  public abstract java.lang.String copyrightString();

  public abstract java.lang.String sourceEncoding();

  public abstract java.lang.String sourceReader();

  public abstract java.lang.String encodingString();

  public abstract java.lang.String lineSeparator();

  public abstract java.lang.String javaClassPath();

  public abstract java.lang.String javaHome();

  public abstract java.lang.String javaVendor();

  public abstract java.lang.String javaVersion();

  public abstract java.lang.String javaVmInfo();

  public abstract java.lang.String javaVmName();

  public abstract java.lang.String javaVmVendor();

  public abstract java.lang.String javaVmVersion();

  public abstract java.lang.String javaSpecVersion();

  public abstract java.lang.String javaSpecVendor();

  public abstract java.lang.String javaSpecName();

  public abstract java.lang.String osName();

  public abstract java.lang.String scalaHome();

  public abstract java.lang.String tmpDir();

  public abstract java.lang.String userDir();

  public abstract java.lang.String userHome();

  public abstract java.lang.String userName();

  public abstract boolean isWin();

  public abstract boolean isMac();

  public abstract boolean isAvian();

  public abstract java.lang.String jdkHome();

  public abstract java.lang.String versionMsg();

  public abstract java.lang.String scalaCmd();

  public abstract java.lang.String scalacCmd();

  public abstract boolean isJavaAtLeast(java.lang.String);

  public abstract void main(java.lang.String[]);
}
