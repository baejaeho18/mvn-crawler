Compiled from "Exception.scala"
public final class scala.util.control.Exception {
  public static <T> scala.util.control.Exception$Catch<T> unwrapping(scala.collection.Seq<java.lang.Class<?>>);
    Code:
       0: getstatic     #16                 // Field scala/util/control/Exception$.MODULE$:Lscala/util/control/Exception$;
       3: aload_0
       4: invokevirtual #18                 // Method scala/util/control/Exception$.unwrapping:(Lscala/collection/Seq;)Lscala/util/control/Exception$Catch;
       7: areturn

  public static <T> scala.util.control.Exception$Catch<T> ultimately(scala.Function0<scala.runtime.BoxedUnit>);
    Code:
       0: getstatic     #16                 // Field scala/util/control/Exception$.MODULE$:Lscala/util/control/Exception$;
       3: aload_0
       4: invokevirtual #22                 // Method scala/util/control/Exception$.ultimately:(Lscala/Function0;)Lscala/util/control/Exception$Catch;
       7: areturn

  public static <T> scala.util.control.Exception$By<scala.Function1<java.lang.Throwable, T>, scala.util.control.Exception$Catch<T>> handling(scala.collection.Seq<java.lang.Class<?>>);
    Code:
       0: getstatic     #16                 // Field scala/util/control/Exception$.MODULE$:Lscala/util/control/Exception$;
       3: aload_0
       4: invokevirtual #26                 // Method scala/util/control/Exception$.handling:(Lscala/collection/Seq;)Lscala/util/control/Exception$By;
       7: areturn

  public static <T> scala.util.control.Exception$Catch<T> failAsValue(scala.collection.Seq<java.lang.Class<?>>, scala.Function0<T>);
    Code:
       0: getstatic     #16                 // Field scala/util/control/Exception$.MODULE$:Lscala/util/control/Exception$;
       3: aload_0
       4: aload_1
       5: invokevirtual #30                 // Method scala/util/control/Exception$.failAsValue:(Lscala/collection/Seq;Lscala/Function0;)Lscala/util/control/Exception$Catch;
       8: areturn

  public static <T> scala.util.control.Exception$Catch<scala.Option<T>> failing(scala.collection.Seq<java.lang.Class<?>>);
    Code:
       0: getstatic     #16                 // Field scala/util/control/Exception$.MODULE$:Lscala/util/control/Exception$;
       3: aload_0
       4: invokevirtual #33                 // Method scala/util/control/Exception$.failing:(Lscala/collection/Seq;)Lscala/util/control/Exception$Catch;
       7: areturn

  public static scala.util.control.Exception$Catch<scala.runtime.BoxedUnit> ignoring(scala.collection.Seq<java.lang.Class<?>>);
    Code:
       0: getstatic     #16                 // Field scala/util/control/Exception$.MODULE$:Lscala/util/control/Exception$;
       3: aload_0
       4: invokevirtual #36                 // Method scala/util/control/Exception$.ignoring:(Lscala/collection/Seq;)Lscala/util/control/Exception$Catch;
       7: areturn

  public static <T> scala.util.control.Exception$Catch<T> catchingPromiscuously(scala.PartialFunction<java.lang.Throwable, T>);
    Code:
       0: getstatic     #16                 // Field scala/util/control/Exception$.MODULE$:Lscala/util/control/Exception$;
       3: aload_0
       4: invokevirtual #40                 // Method scala/util/control/Exception$.catchingPromiscuously:(Lscala/PartialFunction;)Lscala/util/control/Exception$Catch;
       7: areturn

  public static <T> scala.util.control.Exception$Catch<T> catchingPromiscuously(scala.collection.Seq<java.lang.Class<?>>);
    Code:
       0: getstatic     #16                 // Field scala/util/control/Exception$.MODULE$:Lscala/util/control/Exception$;
       3: aload_0
       4: invokevirtual #42                 // Method scala/util/control/Exception$.catchingPromiscuously:(Lscala/collection/Seq;)Lscala/util/control/Exception$Catch;
       7: areturn

  public static <T> scala.util.control.Exception$Catch<T> catching(scala.PartialFunction<java.lang.Throwable, T>);
    Code:
       0: getstatic     #16                 // Field scala/util/control/Exception$.MODULE$:Lscala/util/control/Exception$;
       3: aload_0
       4: invokevirtual #45                 // Method scala/util/control/Exception$.catching:(Lscala/PartialFunction;)Lscala/util/control/Exception$Catch;
       7: areturn

  public static <T> scala.util.control.Exception$Catch<T> catching(scala.collection.Seq<java.lang.Class<?>>);
    Code:
       0: getstatic     #16                 // Field scala/util/control/Exception$.MODULE$:Lscala/util/control/Exception$;
       3: aload_0
       4: invokevirtual #47                 // Method scala/util/control/Exception$.catching:(Lscala/collection/Seq;)Lscala/util/control/Exception$Catch;
       7: areturn

  public static <T> scala.util.control.Exception$Catch<T> nonFatalCatch();
    Code:
       0: getstatic     #16                 // Field scala/util/control/Exception$.MODULE$:Lscala/util/control/Exception$;
       3: invokevirtual #51                 // Method scala/util/control/Exception$.nonFatalCatch:()Lscala/util/control/Exception$Catch;
       6: areturn

  public static <T> scala.util.control.Exception$Catch<T> allCatch();
    Code:
       0: getstatic     #16                 // Field scala/util/control/Exception$.MODULE$:Lscala/util/control/Exception$;
       3: invokevirtual #54                 // Method scala/util/control/Exception$.allCatch:()Lscala/util/control/Exception$Catch;
       6: areturn

  public static scala.util.control.Exception$Catch<scala.runtime.Nothing$> noCatch();
    Code:
       0: getstatic     #16                 // Field scala/util/control/Exception$.MODULE$:Lscala/util/control/Exception$;
       3: invokevirtual #57                 // Method scala/util/control/Exception$.noCatch:()Lscala/util/control/Exception$Catch;
       6: areturn

  public static <T> scala.PartialFunction<java.lang.Throwable, T> allCatcher();
    Code:
       0: getstatic     #16                 // Field scala/util/control/Exception$.MODULE$:Lscala/util/control/Exception$;
       3: invokevirtual #61                 // Method scala/util/control/Exception$.allCatcher:()Lscala/PartialFunction;
       6: areturn

  public static <T> scala.PartialFunction<java.lang.Throwable, T> nonFatalCatcher();
    Code:
       0: getstatic     #16                 // Field scala/util/control/Exception$.MODULE$:Lscala/util/control/Exception$;
       3: invokevirtual #64                 // Method scala/util/control/Exception$.nonFatalCatcher:()Lscala/PartialFunction;
       6: areturn

  public static scala.PartialFunction<java.lang.Throwable, scala.runtime.Nothing$> nothingCatcher();
    Code:
       0: getstatic     #16                 // Field scala/util/control/Exception$.MODULE$:Lscala/util/control/Exception$;
       3: invokevirtual #67                 // Method scala/util/control/Exception$.nothingCatcher:()Lscala/PartialFunction;
       6: areturn

  public static boolean shouldRethrow(java.lang.Throwable);
    Code:
       0: getstatic     #16                 // Field scala/util/control/Exception$.MODULE$:Lscala/util/control/Exception$;
       3: aload_0
       4: invokevirtual #71                 // Method scala/util/control/Exception$.shouldRethrow:(Ljava/lang/Throwable;)Z
       7: ireturn

  public static <Ex extends java.lang.Throwable, T> java.lang.Object throwableSubtypeToCatcher(scala.PartialFunction<Ex, T>, scala.reflect.ClassTag<Ex>);
    Code:
       0: getstatic     #16                 // Field scala/util/control/Exception$.MODULE$:Lscala/util/control/Exception$;
       3: aload_0
       4: aload_1
       5: invokevirtual #75                 // Method scala/util/control/Exception$.throwableSubtypeToCatcher:(Lscala/PartialFunction;Lscala/reflect/ClassTag;)Lscala/PartialFunction;
       8: areturn

  public static <T> java.lang.Object mkThrowableCatcher(scala.Function1<java.lang.Throwable, java.lang.Object>, scala.Function1<java.lang.Throwable, T>);
    Code:
       0: getstatic     #16                 // Field scala/util/control/Exception$.MODULE$:Lscala/util/control/Exception$;
       3: aload_0
       4: aload_1
       5: invokevirtual #79                 // Method scala/util/control/Exception$.mkThrowableCatcher:(Lscala/Function1;Lscala/Function1;)Lscala/PartialFunction;
       8: areturn

  public static <Ex extends java.lang.Throwable, T> java.lang.Object mkCatcher(scala.Function1<Ex, java.lang.Object>, scala.Function1<Ex, T>, scala.reflect.ClassTag<Ex>);
    Code:
       0: getstatic     #16                 // Field scala/util/control/Exception$.MODULE$:Lscala/util/control/Exception$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #83                 // Method scala/util/control/Exception$.mkCatcher:(Lscala/Function1;Lscala/Function1;Lscala/reflect/ClassTag;)Lscala/PartialFunction;
       9: areturn
}
