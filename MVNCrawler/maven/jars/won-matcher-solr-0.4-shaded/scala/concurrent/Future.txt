Compiled from "Future.scala"
public interface scala.concurrent.Future<T> extends scala.concurrent.Awaitable<T> {
  public abstract <U> void onSuccess(scala.PartialFunction<T, U>, scala.concurrent.ExecutionContext);

  public abstract <U> void onFailure(scala.PartialFunction<java.lang.Throwable, U>, scala.concurrent.ExecutionContext);

  public abstract <U> void onComplete(scala.Function1<scala.util.Try<T>, U>, scala.concurrent.ExecutionContext);

  public abstract boolean isCompleted();

  public abstract scala.Option<scala.util.Try<T>> value();

  public abstract scala.concurrent.Future<java.lang.Throwable> failed();

  public abstract <U> void foreach(scala.Function1<T, U>, scala.concurrent.ExecutionContext);

  public abstract <S> scala.concurrent.Future<S> transform(scala.Function1<T, S>, scala.Function1<java.lang.Throwable, java.lang.Throwable>, scala.concurrent.ExecutionContext);

  public abstract <S> scala.concurrent.Future<S> map(scala.Function1<T, S>, scala.concurrent.ExecutionContext);

  public abstract <S> scala.concurrent.Future<S> flatMap(scala.Function1<T, scala.concurrent.Future<S>>, scala.concurrent.ExecutionContext);

  public abstract scala.concurrent.Future<T> filter(scala.Function1<T, java.lang.Object>, scala.concurrent.ExecutionContext);

  public abstract scala.concurrent.Future<T> withFilter(scala.Function1<T, java.lang.Object>, scala.concurrent.ExecutionContext);

  public abstract <S> scala.concurrent.Future<S> collect(scala.PartialFunction<T, S>, scala.concurrent.ExecutionContext);

  public abstract <U> scala.concurrent.Future<U> recover(scala.PartialFunction<java.lang.Throwable, U>, scala.concurrent.ExecutionContext);

  public abstract <U> scala.concurrent.Future<U> recoverWith(scala.PartialFunction<java.lang.Throwable, scala.concurrent.Future<U>>, scala.concurrent.ExecutionContext);

  public abstract <U> scala.concurrent.Future<scala.Tuple2<T, U>> zip(scala.concurrent.Future<U>);

  public abstract <U> scala.concurrent.Future<U> fallbackTo(scala.concurrent.Future<U>);

  public abstract <S> scala.concurrent.Future<S> mapTo(scala.reflect.ClassTag<S>);

  public abstract <U> scala.concurrent.Future<T> andThen(scala.PartialFunction<scala.util.Try<T>, U>, scala.concurrent.ExecutionContext);
}
