Compiled from "Promise.scala"
public abstract class scala.concurrent.Promise$class {
  private static scala.concurrent.ExecutionContext internalExecutor(scala.concurrent.Promise);
    Code:
       0: getstatic     #13                 // Field scala/concurrent/Future$InternalCallbackExecutor$.MODULE$:Lscala/concurrent/Future$InternalCallbackExecutor$;
       3: areturn

  public static scala.concurrent.Promise complete(scala.concurrent.Promise, scala.util.Try);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #23,  2           // InterfaceMethod scala/concurrent/Promise.tryComplete:(Lscala/util/Try;)Z
       7: ifeq          12
      10: aload_0
      11: areturn
      12: new           #25                 // class java/lang/IllegalStateException
      15: dup
      16: ldc           #27                 // String Promise already completed.
      18: invokespecial #31                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      21: athrow

  public static final scala.concurrent.Promise completeWith(scala.concurrent.Promise, scala.concurrent.Future);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #39,  2           // InterfaceMethod scala/concurrent/Promise.tryCompleteWith:(Lscala/concurrent/Future;)Lscala/concurrent/Promise;
       7: areturn

  public static final scala.concurrent.Promise tryCompleteWith(scala.concurrent.Promise, scala.concurrent.Future);
    Code:
       0: aload_1
       1: new           #43                 // class scala/concurrent/Promise$$anonfun$tryCompleteWith$1
       4: dup
       5: aload_0
       6: invokespecial #46                 // Method scala/concurrent/Promise$$anonfun$tryCompleteWith$1."<init>":(Lscala/concurrent/Promise;)V
       9: aload_0
      10: invokestatic  #48                 // Method internalExecutor:(Lscala/concurrent/Promise;)Lscala/concurrent/ExecutionContext;
      13: invokeinterface #54,  3           // InterfaceMethod scala/concurrent/Future.onComplete:(Lscala/Function1;Lscala/concurrent/ExecutionContext;)V
      18: aload_0
      19: areturn

  public static scala.concurrent.Promise success(scala.concurrent.Promise, java.lang.Object);
    Code:
       0: aload_0
       1: new           #58                 // class scala/util/Success
       4: dup
       5: aload_1
       6: invokespecial #61                 // Method scala/util/Success."<init>":(Ljava/lang/Object;)V
       9: invokeinterface #64,  2           // InterfaceMethod scala/concurrent/Promise.complete:(Lscala/util/Try;)Lscala/concurrent/Promise;
      14: areturn

  public static boolean trySuccess(scala.concurrent.Promise, java.lang.Object);
    Code:
       0: aload_0
       1: new           #58                 // class scala/util/Success
       4: dup
       5: aload_1
       6: invokespecial #61                 // Method scala/util/Success."<init>":(Ljava/lang/Object;)V
       9: invokeinterface #23,  2           // InterfaceMethod scala/concurrent/Promise.tryComplete:(Lscala/util/Try;)Z
      14: ireturn

  public static scala.concurrent.Promise failure(scala.concurrent.Promise, java.lang.Throwable);
    Code:
       0: aload_0
       1: new           #72                 // class scala/util/Failure
       4: dup
       5: aload_1
       6: invokespecial #75                 // Method scala/util/Failure."<init>":(Ljava/lang/Throwable;)V
       9: invokeinterface #64,  2           // InterfaceMethod scala/concurrent/Promise.complete:(Lscala/util/Try;)Lscala/concurrent/Promise;
      14: areturn

  public static boolean tryFailure(scala.concurrent.Promise, java.lang.Throwable);
    Code:
       0: aload_0
       1: new           #72                 // class scala/util/Failure
       4: dup
       5: aload_1
       6: invokespecial #75                 // Method scala/util/Failure."<init>":(Ljava/lang/Throwable;)V
       9: invokeinterface #23,  2           // InterfaceMethod scala/concurrent/Promise.tryComplete:(Lscala/util/Try;)Z
      14: ireturn

  public static void $init$(scala.concurrent.Promise);
    Code:
       0: return
}
