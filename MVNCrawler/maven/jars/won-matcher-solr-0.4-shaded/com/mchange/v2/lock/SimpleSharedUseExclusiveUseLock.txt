Compiled from "SimpleSharedUseExclusiveUseLock.java"
public class com.mchange.v2.lock.SimpleSharedUseExclusiveUseLock implements com.mchange.v2.lock.SharedUseExclusiveUseLock {
  private int waiting_readers;

  private int active_readers;

  private int waiting_writers;

  private boolean writer_active;

  public com.mchange.v2.lock.SimpleSharedUseExclusiveUseLock();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field waiting_readers:I
       9: aload_0
      10: iconst_0
      11: putfield      #3                  // Field active_readers:I
      14: aload_0
      15: iconst_0
      16: putfield      #4                  // Field waiting_writers:I
      19: aload_0
      20: iconst_0
      21: putfield      #5                  // Field writer_active:Z
      24: return

  public synchronized void acquireShared() throws java.lang.InterruptedException;
    Code:
       0: aload_0
       1: dup
       2: getfield      #2                  // Field waiting_readers:I
       5: iconst_1
       6: iadd
       7: putfield      #2                  // Field waiting_readers:I
      10: aload_0
      11: invokespecial #6                  // Method okayToRead:()Z
      14: ifne          24
      17: aload_0
      18: invokevirtual #7                  // Method java/lang/Object.wait:()V
      21: goto          10
      24: aload_0
      25: dup
      26: getfield      #3                  // Field active_readers:I
      29: iconst_1
      30: iadd
      31: putfield      #3                  // Field active_readers:I
      34: aload_0
      35: dup
      36: getfield      #2                  // Field waiting_readers:I
      39: iconst_1
      40: isub
      41: putfield      #2                  // Field waiting_readers:I
      44: goto          60
      47: astore_1
      48: aload_0
      49: dup
      50: getfield      #2                  // Field waiting_readers:I
      53: iconst_1
      54: isub
      55: putfield      #2                  // Field waiting_readers:I
      58: aload_1
      59: athrow
      60: return
    Exception table:
       from    to  target type
           0    34    47   any

  public synchronized void relinquishShared();
    Code:
       0: aload_0
       1: dup
       2: getfield      #3                  // Field active_readers:I
       5: iconst_1
       6: isub
       7: putfield      #3                  // Field active_readers:I
      10: aload_0
      11: invokevirtual #8                  // Method java/lang/Object.notifyAll:()V
      14: return

  public synchronized void acquireExclusive() throws java.lang.InterruptedException;
    Code:
       0: aload_0
       1: dup
       2: getfield      #4                  // Field waiting_writers:I
       5: iconst_1
       6: iadd
       7: putfield      #4                  // Field waiting_writers:I
      10: aload_0
      11: invokespecial #9                  // Method okayToWrite:()Z
      14: ifne          24
      17: aload_0
      18: invokevirtual #7                  // Method java/lang/Object.wait:()V
      21: goto          10
      24: aload_0
      25: iconst_1
      26: putfield      #5                  // Field writer_active:Z
      29: aload_0
      30: dup
      31: getfield      #4                  // Field waiting_writers:I
      34: iconst_1
      35: isub
      36: putfield      #4                  // Field waiting_writers:I
      39: goto          55
      42: astore_1
      43: aload_0
      44: dup
      45: getfield      #4                  // Field waiting_writers:I
      48: iconst_1
      49: isub
      50: putfield      #4                  // Field waiting_writers:I
      53: aload_1
      54: athrow
      55: return
    Exception table:
       from    to  target type
           0    29    42   any

  public synchronized void relinquishExclusive();
    Code:
       0: aload_0
       1: iconst_0
       2: putfield      #5                  // Field writer_active:Z
       5: aload_0
       6: invokevirtual #8                  // Method java/lang/Object.notifyAll:()V
       9: return

  private boolean okayToRead();
    Code:
       0: aload_0
       1: getfield      #5                  // Field writer_active:Z
       4: ifne          18
       7: aload_0
       8: getfield      #4                  // Field waiting_writers:I
      11: ifne          18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: ireturn

  private boolean okayToWrite();
    Code:
       0: aload_0
       1: getfield      #3                  // Field active_readers:I
       4: ifne          18
       7: aload_0
       8: getfield      #5                  // Field writer_active:Z
      11: ifne          18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: ireturn
}
