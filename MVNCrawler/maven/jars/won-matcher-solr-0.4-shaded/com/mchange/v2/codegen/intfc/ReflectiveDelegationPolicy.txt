Compiled from "ReflectiveDelegationPolicy.java"
public final class com.mchange.v2.codegen.intfc.ReflectiveDelegationPolicy {
  public static final com.mchange.v2.codegen.intfc.ReflectiveDelegationPolicy USE_MAIN_DELEGATE_INTERFACE;

  public static final com.mchange.v2.codegen.intfc.ReflectiveDelegationPolicy USE_RUNTIME_CLASS;

  java.lang.Class delegateClass;

  private com.mchange.v2.codegen.intfc.ReflectiveDelegationPolicy();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aconst_null
       6: putfield      #2                  // Field delegateClass:Ljava/lang/Class;
       9: return

  public com.mchange.v2.codegen.intfc.ReflectiveDelegationPolicy(java.lang.Class);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_1
       5: ifnonnull     18
       8: new           #3                  // class java/lang/IllegalArgumentException
      11: dup
      12: ldc           #4                  // String Class for reflective delegation cannot be null!
      14: invokespecial #5                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      17: athrow
      18: aload_0
      19: aload_1
      20: putfield      #2                  // Field delegateClass:Ljava/lang/Class;
      23: return

  public java.lang.String toString();
    Code:
       0: aload_0
       1: getstatic     #6                  // Field USE_MAIN_DELEGATE_INTERFACE:Lcom/mchange/v2/codegen/intfc/ReflectiveDelegationPolicy;
       4: if_acmpne     10
       7: ldc           #7                  // String [ReflectiveDelegationPolicy: Reflectively delegate via the main delegate interface.]
       9: areturn
      10: aload_0
      11: getstatic     #8                  // Field USE_RUNTIME_CLASS:Lcom/mchange/v2/codegen/intfc/ReflectiveDelegationPolicy;
      14: if_acmpne     20
      17: ldc           #9                  // String [ReflectiveDelegationPolicy: Reflectively delegate via the runtime class of the delegate object.]
      19: areturn
      20: new           #10                 // class java/lang/StringBuilder
      23: dup
      24: invokespecial #11                 // Method java/lang/StringBuilder."<init>":()V
      27: ldc           #12                 // String [ReflectiveDelegationPolicy: Reflectively delegate via
      29: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      32: aload_0
      33: getfield      #2                  // Field delegateClass:Ljava/lang/Class;
      36: invokevirtual #14                 // Method java/lang/Class.getName:()Ljava/lang/String;
      39: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      42: ldc           #15                 // String .]
      44: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      47: invokevirtual #16                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      50: areturn

  static {};
    Code:
       0: new           #17                 // class com/mchange/v2/codegen/intfc/ReflectiveDelegationPolicy
       3: dup
       4: invokespecial #18                 // Method "<init>":()V
       7: putstatic     #6                  // Field USE_MAIN_DELEGATE_INTERFACE:Lcom/mchange/v2/codegen/intfc/ReflectiveDelegationPolicy;
      10: new           #17                 // class com/mchange/v2/codegen/intfc/ReflectiveDelegationPolicy
      13: dup
      14: invokespecial #18                 // Method "<init>":()V
      17: putstatic     #8                  // Field USE_RUNTIME_CLASS:Lcom/mchange/v2/codegen/intfc/ReflectiveDelegationPolicy;
      20: return
}
