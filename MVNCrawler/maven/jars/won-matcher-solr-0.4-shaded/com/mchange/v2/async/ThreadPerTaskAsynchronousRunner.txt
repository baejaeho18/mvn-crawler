Compiled from "ThreadPerTaskAsynchronousRunner.java"
public class com.mchange.v2.async.ThreadPerTaskAsynchronousRunner implements com.mchange.v2.async.AsynchronousRunner {
  static final int PRESUME_DEADLOCKED_MULTIPLE;

  static final com.mchange.v2.log.MLogger logger;

  final int max_task_threads;

  final long interrupt_task_delay;

  java.util.LinkedList queue;

  java.util.ArrayList running;

  java.util.ArrayList deadlockSnapshot;

  boolean still_open;

  java.lang.Thread dispatchThread;

  java.util.Timer interruptAndDeadlockTimer;

  public com.mchange.v2.async.ThreadPerTaskAsynchronousRunner(int);
    Code:
       0: aload_0
       1: iload_1
       2: lconst_0
       3: invokespecial #4                  // Method "<init>":(IJ)V
       6: return

  public com.mchange.v2.async.ThreadPerTaskAsynchronousRunner(int, long);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #6                  // class java/util/LinkedList
       8: dup
       9: invokespecial #7                  // Method java/util/LinkedList."<init>":()V
      12: putfield      #8                  // Field queue:Ljava/util/LinkedList;
      15: aload_0
      16: new           #9                  // class java/util/ArrayList
      19: dup
      20: invokespecial #10                 // Method java/util/ArrayList."<init>":()V
      23: putfield      #11                 // Field running:Ljava/util/ArrayList;
      26: aload_0
      27: aconst_null
      28: putfield      #12                 // Field deadlockSnapshot:Ljava/util/ArrayList;
      31: aload_0
      32: iconst_1
      33: putfield      #13                 // Field still_open:Z
      36: aload_0
      37: new           #14                 // class com/mchange/v2/async/ThreadPerTaskAsynchronousRunner$DispatchThread
      40: dup
      41: aload_0
      42: invokespecial #15                 // Method com/mchange/v2/async/ThreadPerTaskAsynchronousRunner$DispatchThread."<init>":(Lcom/mchange/v2/async/ThreadPerTaskAsynchronousRunner;)V
      45: putfield      #16                 // Field dispatchThread:Ljava/lang/Thread;
      48: aload_0
      49: iload_1
      50: putfield      #17                 // Field max_task_threads:I
      53: aload_0
      54: lload_2
      55: putfield      #18                 // Field interrupt_task_delay:J
      58: aload_0
      59: invokespecial #2                  // Method hasIdTimer:()Z
      62: ifeq          107
      65: aload_0
      66: new           #19                 // class java/util/Timer
      69: dup
      70: iconst_1
      71: invokespecial #20                 // Method java/util/Timer."<init>":(Z)V
      74: putfield      #21                 // Field interruptAndDeadlockTimer:Ljava/util/Timer;
      77: new           #22                 // class com/mchange/v2/async/ThreadPerTaskAsynchronousRunner$1
      80: dup
      81: aload_0
      82: invokespecial #23                 // Method com/mchange/v2/async/ThreadPerTaskAsynchronousRunner$1."<init>":(Lcom/mchange/v2/async/ThreadPerTaskAsynchronousRunner;)V
      85: astore        4
      87: lload_2
      88: ldc2_w        #25                 // long 3l
      91: lmul
      92: lstore        5
      94: aload_0
      95: getfield      #21                 // Field interruptAndDeadlockTimer:Ljava/util/Timer;
      98: aload         4
     100: lload         5
     102: lload         5
     104: invokevirtual #27                 // Method java/util/Timer.schedule:(Ljava/util/TimerTask;JJ)V
     107: aload_0
     108: getfield      #16                 // Field dispatchThread:Ljava/lang/Thread;
     111: invokevirtual #28                 // Method java/lang/Thread.start:()V
     114: return

  private boolean hasIdTimer();
    Code:
       0: aload_0
       1: getfield      #18                 // Field interrupt_task_delay:J
       4: lconst_0
       5: lcmp
       6: ifle          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn

  public synchronized void postRunnable(java.lang.Runnable);
    Code:
       0: aload_0
       1: getfield      #13                 // Field still_open:Z
       4: ifeq          23
       7: aload_0
       8: getfield      #8                  // Field queue:Ljava/util/LinkedList;
      11: aload_1
      12: invokevirtual #29                 // Method java/util/LinkedList.add:(Ljava/lang/Object;)Z
      15: pop
      16: aload_0
      17: invokevirtual #30                 // Method java/lang/Object.notifyAll:()V
      20: goto          33
      23: new           #31                 // class com/mchange/v2/util/ResourceClosedException
      26: dup
      27: ldc           #32                 // String Attempted to use a ThreadPerTaskAsynchronousRunner in a closed or broken state.
      29: invokespecial #33                 // Method com/mchange/v2/util/ResourceClosedException."<init>":(Ljava/lang/String;)V
      32: athrow
      33: return

  public void close();
    Code:
       0: aload_0
       1: iconst_1
       2: invokevirtual #34                 // Method close:(Z)V
       5: return

  public synchronized void close(boolean);
    Code:
       0: aload_0
       1: getfield      #13                 // Field still_open:Z
       4: ifeq          59
       7: aload_0
       8: iconst_0
       9: putfield      #13                 // Field still_open:Z
      12: iload_1
      13: ifeq          59
      16: aload_0
      17: getfield      #8                  // Field queue:Ljava/util/LinkedList;
      20: invokevirtual #35                 // Method java/util/LinkedList.clear:()V
      23: aload_0
      24: getfield      #11                 // Field running:Ljava/util/ArrayList;
      27: invokevirtual #36                 // Method java/util/ArrayList.iterator:()Ljava/util/Iterator;
      30: astore_2
      31: aload_2
      32: invokeinterface #37,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      37: ifeq          55
      40: aload_2
      41: invokeinterface #38,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      46: checkcast     #39                 // class java/lang/Thread
      49: invokevirtual #40                 // Method java/lang/Thread.interrupt:()V
      52: goto          31
      55: aload_0
      56: invokespecial #41                 // Method closeThreadResources:()V
      59: return

  public synchronized int getRunningCount();
    Code:
       0: aload_0
       1: getfield      #11                 // Field running:Ljava/util/ArrayList;
       4: invokevirtual #42                 // Method java/util/ArrayList.size:()I
       7: ireturn

  public synchronized java.util.Collection getRunningTasks();
    Code:
       0: aload_0
       1: getfield      #11                 // Field running:Ljava/util/ArrayList;
       4: invokevirtual #43                 // Method java/util/ArrayList.clone:()Ljava/lang/Object;
       7: checkcast     #44                 // class java/util/Collection
      10: areturn

  public synchronized int getWaitingCount();
    Code:
       0: aload_0
       1: getfield      #8                  // Field queue:Ljava/util/LinkedList;
       4: invokevirtual #45                 // Method java/util/LinkedList.size:()I
       7: ireturn

  public synchronized java.util.Collection getWaitingTasks();
    Code:
       0: aload_0
       1: getfield      #8                  // Field queue:Ljava/util/LinkedList;
       4: invokevirtual #46                 // Method java/util/LinkedList.clone:()Ljava/lang/Object;
       7: checkcast     #44                 // class java/util/Collection
      10: areturn

  public synchronized boolean isClosed();
    Code:
       0: aload_0
       1: getfield      #13                 // Field still_open:Z
       4: ifne          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public synchronized boolean isDoneAndGone();
    Code:
       0: aload_0
       1: getfield      #16                 // Field dispatchThread:Ljava/lang/Thread;
       4: invokevirtual #47                 // Method java/lang/Thread.isAlive:()Z
       7: ifne          31
      10: aload_0
      11: getfield      #11                 // Field running:Ljava/util/ArrayList;
      14: invokevirtual #48                 // Method java/util/ArrayList.isEmpty:()Z
      17: ifeq          31
      20: aload_0
      21: getfield      #21                 // Field interruptAndDeadlockTimer:Ljava/util/Timer;
      24: ifnonnull     31
      27: iconst_1
      28: goto          32
      31: iconst_0
      32: ireturn

  private synchronized void acknowledgeComplete(com.mchange.v2.async.ThreadPerTaskAsynchronousRunner$TaskThread);
    Code:
       0: aload_1
       1: invokevirtual #49                 // Method com/mchange/v2/async/ThreadPerTaskAsynchronousRunner$TaskThread.isCompleted:()Z
       4: ifne          55
       7: aload_0
       8: getfield      #11                 // Field running:Ljava/util/ArrayList;
      11: aload_1
      12: invokevirtual #50                 // Method java/util/ArrayList.remove:(Ljava/lang/Object;)Z
      15: pop
      16: aload_1
      17: invokevirtual #51                 // Method com/mchange/v2/async/ThreadPerTaskAsynchronousRunner$TaskThread.markCompleted:()V
      20: aload_0
      21: invokevirtual #30                 // Method java/lang/Object.notifyAll:()V
      24: aload_0
      25: getfield      #13                 // Field still_open:Z
      28: ifne          55
      31: aload_0
      32: getfield      #8                  // Field queue:Ljava/util/LinkedList;
      35: invokevirtual #52                 // Method java/util/LinkedList.isEmpty:()Z
      38: ifeq          55
      41: aload_0
      42: getfield      #11                 // Field running:Ljava/util/ArrayList;
      45: invokevirtual #48                 // Method java/util/ArrayList.isEmpty:()Z
      48: ifeq          55
      51: aload_0
      52: invokespecial #41                 // Method closeThreadResources:()V
      55: return

  private synchronized void checkForDeadlock();
    Code:
       0: aload_0
       1: getfield      #12                 // Field deadlockSnapshot:Ljava/util/ArrayList;
       4: ifnonnull     38
       7: aload_0
       8: getfield      #11                 // Field running:Ljava/util/ArrayList;
      11: invokevirtual #42                 // Method java/util/ArrayList.size:()I
      14: aload_0
      15: getfield      #17                 // Field max_task_threads:I
      18: if_icmpne     259
      21: aload_0
      22: aload_0
      23: getfield      #11                 // Field running:Ljava/util/ArrayList;
      26: invokevirtual #43                 // Method java/util/ArrayList.clone:()Ljava/lang/Object;
      29: checkcast     #9                  // class java/util/ArrayList
      32: putfield      #12                 // Field deadlockSnapshot:Ljava/util/ArrayList;
      35: goto          259
      38: aload_0
      39: getfield      #11                 // Field running:Ljava/util/ArrayList;
      42: invokevirtual #42                 // Method java/util/ArrayList.size:()I
      45: aload_0
      46: getfield      #17                 // Field max_task_threads:I
      49: if_icmpge     60
      52: aload_0
      53: aconst_null
      54: putfield      #12                 // Field deadlockSnapshot:Ljava/util/ArrayList;
      57: goto          259
      60: aload_0
      61: getfield      #12                 // Field deadlockSnapshot:Ljava/util/ArrayList;
      64: aload_0
      65: getfield      #11                 // Field running:Ljava/util/ArrayList;
      68: invokevirtual #53                 // Method java/util/ArrayList.equals:(Ljava/lang/Object;)Z
      71: ifeq          245
      74: getstatic     #54                 // Field logger:Lcom/mchange/v2/log/MLogger;
      77: getstatic     #55                 // Field com/mchange/v2/log/MLevel.WARNING:Lcom/mchange/v2/log/MLevel;
      80: invokeinterface #56,  2           // InterfaceMethod com/mchange/v2/log/MLogger.isLoggable:(Lcom/mchange/v2/log/MLevel;)Z
      85: ifeq          201
      88: new           #57                 // class java/lang/StringBuffer
      91: dup
      92: sipush        1024
      95: invokespecial #58                 // Method java/lang/StringBuffer."<init>":(I)V
      98: astore_1
      99: aload_1
     100: ldc           #59                 // String APPARENT DEADLOCK! (
     102: invokevirtual #60                 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
     105: pop
     106: aload_1
     107: aload_0
     108: invokevirtual #61                 // Method java/lang/StringBuffer.append:(Ljava/lang/Object;)Ljava/lang/StringBuffer;
     111: pop
     112: aload_1
     113: ldc           #62                 // String ) Deadlocked threads (unresponsive to interrupt()) are being set aside as hopeless and up to
     115: invokevirtual #60                 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
     118: pop
     119: aload_1
     120: aload_0
     121: getfield      #17                 // Field max_task_threads:I
     124: invokevirtual #63                 // Method java/lang/StringBuffer.append:(I)Ljava/lang/StringBuffer;
     127: pop
     128: aload_1
     129: ldc           #64                 // String  may now be spawned for new tasks. If tasks continue to deadlock, you may run out of memory. Deadlocked task list:
     131: invokevirtual #60                 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
     134: pop
     135: iconst_0
     136: istore_2
     137: aload_0
     138: getfield      #12                 // Field deadlockSnapshot:Ljava/util/ArrayList;
     141: invokevirtual #42                 // Method java/util/ArrayList.size:()I
     144: istore_3
     145: iload_2
     146: iload_3
     147: if_icmpge     186
     150: iload_2
     151: ifeq          161
     154: aload_1
     155: ldc           #65                 // String ,
     157: invokevirtual #60                 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
     160: pop
     161: aload_1
     162: aload_0
     163: getfield      #12                 // Field deadlockSnapshot:Ljava/util/ArrayList;
     166: iload_2
     167: invokevirtual #66                 // Method java/util/ArrayList.get:(I)Ljava/lang/Object;
     170: checkcast     #67                 // class com/mchange/v2/async/ThreadPerTaskAsynchronousRunner$TaskThread
     173: invokevirtual #68                 // Method com/mchange/v2/async/ThreadPerTaskAsynchronousRunner$TaskThread.getTask:()Ljava/lang/Runnable;
     176: invokevirtual #61                 // Method java/lang/StringBuffer.append:(Ljava/lang/Object;)Ljava/lang/StringBuffer;
     179: pop
     180: iinc          2, 1
     183: goto          145
     186: getstatic     #54                 // Field logger:Lcom/mchange/v2/log/MLogger;
     189: getstatic     #55                 // Field com/mchange/v2/log/MLevel.WARNING:Lcom/mchange/v2/log/MLevel;
     192: aload_1
     193: invokevirtual #69                 // Method java/lang/StringBuffer.toString:()Ljava/lang/String;
     196: invokeinterface #70,  3           // InterfaceMethod com/mchange/v2/log/MLogger.log:(Lcom/mchange/v2/log/MLevel;Ljava/lang/String;)V
     201: iconst_0
     202: istore_1
     203: aload_0
     204: getfield      #12                 // Field deadlockSnapshot:Ljava/util/ArrayList;
     207: invokevirtual #42                 // Method java/util/ArrayList.size:()I
     210: istore_2
     211: iload_1
     212: iload_2
     213: if_icmpge     237
     216: aload_0
     217: aload_0
     218: getfield      #12                 // Field deadlockSnapshot:Ljava/util/ArrayList;
     221: iload_1
     222: invokevirtual #66                 // Method java/util/ArrayList.get:(I)Ljava/lang/Object;
     225: checkcast     #67                 // class com/mchange/v2/async/ThreadPerTaskAsynchronousRunner$TaskThread
     228: invokespecial #1                  // Method acknowledgeComplete:(Lcom/mchange/v2/async/ThreadPerTaskAsynchronousRunner$TaskThread;)V
     231: iinc          1, 1
     234: goto          211
     237: aload_0
     238: aconst_null
     239: putfield      #12                 // Field deadlockSnapshot:Ljava/util/ArrayList;
     242: goto          259
     245: aload_0
     246: aload_0
     247: getfield      #11                 // Field running:Ljava/util/ArrayList;
     250: invokevirtual #43                 // Method java/util/ArrayList.clone:()Ljava/lang/Object;
     253: checkcast     #9                  // class java/util/ArrayList
     256: putfield      #12                 // Field deadlockSnapshot:Ljava/util/ArrayList;
     259: return

  private void closeThreadResources();
    Code:
       0: aload_0
       1: getfield      #21                 // Field interruptAndDeadlockTimer:Ljava/util/Timer;
       4: ifnull        19
       7: aload_0
       8: getfield      #21                 // Field interruptAndDeadlockTimer:Ljava/util/Timer;
      11: invokevirtual #71                 // Method java/util/Timer.cancel:()V
      14: aload_0
      15: aconst_null
      16: putfield      #21                 // Field interruptAndDeadlockTimer:Ljava/util/Timer;
      19: aload_0
      20: getfield      #16                 // Field dispatchThread:Ljava/lang/Thread;
      23: invokevirtual #40                 // Method java/lang/Thread.interrupt:()V
      26: return

  static void access$000(com.mchange.v2.async.ThreadPerTaskAsynchronousRunner);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method checkForDeadlock:()V
       4: return

  static boolean access$100(com.mchange.v2.async.ThreadPerTaskAsynchronousRunner);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method hasIdTimer:()Z
       4: ireturn

  static void access$200(com.mchange.v2.async.ThreadPerTaskAsynchronousRunner, com.mchange.v2.async.ThreadPerTaskAsynchronousRunner$TaskThread);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method acknowledgeComplete:(Lcom/mchange/v2/async/ThreadPerTaskAsynchronousRunner$TaskThread;)V
       5: return

  static {};
    Code:
       0: ldc           #24                 // class com/mchange/v2/async/ThreadPerTaskAsynchronousRunner
       2: invokestatic  #72                 // Method com/mchange/v2/log/MLog.getLogger:(Ljava/lang/Class;)Lcom/mchange/v2/log/MLogger;
       5: putstatic     #54                 // Field logger:Lcom/mchange/v2/log/MLogger;
       8: return
}
