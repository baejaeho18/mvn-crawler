Compiled from "SimpleWritableCachedStore.java"
class com.mchange.v1.cachedstore.SimpleWritableCachedStore implements com.mchange.v1.cachedstore.WritableCachedStore {
  private static final java.lang.Object REMOVE_TOKEN;

  com.mchange.v1.cachedstore.TweakableCachedStore readOnlyCache;

  com.mchange.v1.cachedstore.WritableCachedStore$Manager manager;

  java.util.HashMap writeCache;

  java.util.Set failedWrites;

  com.mchange.v1.cachedstore.SimpleWritableCachedStore(com.mchange.v1.cachedstore.TweakableCachedStore, com.mchange.v1.cachedstore.WritableCachedStore$Manager);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/HashMap
       8: dup
       9: invokespecial #3                  // Method java/util/HashMap."<init>":()V
      12: putfield      #4                  // Field writeCache:Ljava/util/HashMap;
      15: aload_0
      16: aconst_null
      17: putfield      #5                  // Field failedWrites:Ljava/util/Set;
      20: aload_0
      21: aload_1
      22: putfield      #6                  // Field readOnlyCache:Lcom/mchange/v1/cachedstore/TweakableCachedStore;
      25: aload_0
      26: aload_2
      27: putfield      #7                  // Field manager:Lcom/mchange/v1/cachedstore/WritableCachedStore$Manager;
      30: return

  public java.lang.Object find(java.lang.Object) throws com.mchange.v1.cachedstore.CachedStoreException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field writeCache:Ljava/util/HashMap;
       4: aload_1
       5: invokevirtual #8                  // Method java/util/HashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
       8: astore_2
       9: aload_2
      10: ifnonnull     24
      13: aload_0
      14: getfield      #6                  // Field readOnlyCache:Lcom/mchange/v1/cachedstore/TweakableCachedStore;
      17: aload_1
      18: invokeinterface #9,  2            // InterfaceMethod com/mchange/v1/cachedstore/TweakableCachedStore.find:(Ljava/lang/Object;)Ljava/lang/Object;
      23: astore_2
      24: aload_2
      25: getstatic     #10                 // Field REMOVE_TOKEN:Ljava/lang/Object;
      28: if_acmpne     35
      31: aconst_null
      32: goto          36
      35: aload_2
      36: areturn

  public void write(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #4                  // Field writeCache:Ljava/util/HashMap;
       4: aload_1
       5: aload_2
       6: invokevirtual #11                 // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       9: pop
      10: return

  public void remove(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #10                 // Field REMOVE_TOKEN:Ljava/lang/Object;
       5: invokevirtual #12                 // Method write:(Ljava/lang/Object;Ljava/lang/Object;)V
       8: return

  public void flushWrites() throws com.mchange.v1.cachedstore.CacheFlushException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field writeCache:Ljava/util/HashMap;
       4: invokevirtual #13                 // Method java/util/HashMap.clone:()Ljava/lang/Object;
       7: checkcast     #2                  // class java/util/HashMap
      10: astore_1
      11: aload_1
      12: invokevirtual #14                 // Method java/util/HashMap.keySet:()Ljava/util/Set;
      15: invokeinterface #15,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      20: astore_2
      21: aload_2
      22: invokeinterface #16,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      27: ifeq          185
      30: aload_2
      31: invokeinterface #17,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      36: astore_3
      37: aload_1
      38: aload_3
      39: invokevirtual #8                  // Method java/util/HashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      42: astore        4
      44: aload         4
      46: getstatic     #10                 // Field REMOVE_TOKEN:Ljava/lang/Object;
      49: if_acmpne     65
      52: aload_0
      53: getfield      #7                  // Field manager:Lcom/mchange/v1/cachedstore/WritableCachedStore$Manager;
      56: aload_3
      57: invokeinterface #18,  2           // InterfaceMethod com/mchange/v1/cachedstore/WritableCachedStore$Manager.removeFromStorage:(Ljava/lang/Object;)V
      62: goto          77
      65: aload_0
      66: getfield      #7                  // Field manager:Lcom/mchange/v1/cachedstore/WritableCachedStore$Manager;
      69: aload_3
      70: aload         4
      72: invokeinterface #19,  3           // InterfaceMethod com/mchange/v1/cachedstore/WritableCachedStore$Manager.writeToStorage:(Ljava/lang/Object;Ljava/lang/Object;)V
      77: aload_0
      78: getfield      #6                  // Field readOnlyCache:Lcom/mchange/v1/cachedstore/TweakableCachedStore;
      81: aload_3
      82: aload         4
      84: invokeinterface #20,  3           // InterfaceMethod com/mchange/v1/cachedstore/TweakableCachedStore.setCachedValue:(Ljava/lang/Object;Ljava/lang/Object;)V
      89: aload_0
      90: getfield      #4                  // Field writeCache:Ljava/util/HashMap;
      93: aload_3
      94: invokevirtual #21                 // Method java/util/HashMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      97: pop
      98: aload_0
      99: getfield      #5                  // Field failedWrites:Ljava/util/Set;
     102: ifnull        133
     105: aload_0
     106: getfield      #5                  // Field failedWrites:Ljava/util/Set;
     109: aload_3
     110: invokeinterface #22,  2           // InterfaceMethod java/util/Set.remove:(Ljava/lang/Object;)Z
     115: pop
     116: aload_0
     117: getfield      #5                  // Field failedWrites:Ljava/util/Set;
     120: invokeinterface #23,  1           // InterfaceMethod java/util/Set.size:()I
     125: ifne          133
     128: aload_0
     129: aconst_null
     130: putfield      #5                  // Field failedWrites:Ljava/util/Set;
     133: goto          148
     136: astore        5
     138: new           #25                 // class com/mchange/v1/cachedstore/CachedStoreError
     141: dup
     142: ldc           #26                 // String SimpleWritableCachedStore: Internal cache is broken!
     144: invokespecial #27                 // Method com/mchange/v1/cachedstore/CachedStoreError."<init>":(Ljava/lang/String;)V
     147: athrow
     148: goto          182
     151: astore        5
     153: aload_0
     154: getfield      #5                  // Field failedWrites:Ljava/util/Set;
     157: ifnonnull     171
     160: aload_0
     161: new           #29                 // class java/util/HashSet
     164: dup
     165: invokespecial #30                 // Method java/util/HashSet."<init>":()V
     168: putfield      #5                  // Field failedWrites:Ljava/util/Set;
     171: aload_0
     172: getfield      #5                  // Field failedWrites:Ljava/util/Set;
     175: aload_3
     176: invokeinterface #31,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
     181: pop
     182: goto          21
     185: aload_0
     186: getfield      #5                  // Field failedWrites:Ljava/util/Set;
     189: ifnull        202
     192: new           #32                 // class com/mchange/v1/cachedstore/CacheFlushException
     195: dup
     196: ldc           #33                 // String Some keys failed to write!
     198: invokespecial #34                 // Method com/mchange/v1/cachedstore/CacheFlushException."<init>":(Ljava/lang/String;)V
     201: athrow
     202: return
    Exception table:
       from    to  target type
          77   133   136   Class com/mchange/v1/cachedstore/CachedStoreException
          44   148   151   Class java/lang/Exception

  public java.util.Set getFailedWrites();
    Code:
       0: aload_0
       1: getfield      #5                  // Field failedWrites:Ljava/util/Set;
       4: ifnonnull     11
       7: aconst_null
       8: goto          18
      11: aload_0
      12: getfield      #5                  // Field failedWrites:Ljava/util/Set;
      15: invokestatic  #35                 // Method java/util/Collections.unmodifiableSet:(Ljava/util/Set;)Ljava/util/Set;
      18: areturn

  public void clearPendingWrites();
    Code:
       0: aload_0
       1: getfield      #4                  // Field writeCache:Ljava/util/HashMap;
       4: invokevirtual #36                 // Method java/util/HashMap.clear:()V
       7: aload_0
       8: aconst_null
       9: putfield      #5                  // Field failedWrites:Ljava/util/Set;
      12: return

  public void reset() throws com.mchange.v1.cachedstore.CachedStoreException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field writeCache:Ljava/util/HashMap;
       4: invokevirtual #36                 // Method java/util/HashMap.clear:()V
       7: aload_0
       8: getfield      #6                  // Field readOnlyCache:Lcom/mchange/v1/cachedstore/TweakableCachedStore;
      11: invokeinterface #37,  1           // InterfaceMethod com/mchange/v1/cachedstore/TweakableCachedStore.reset:()V
      16: aload_0
      17: aconst_null
      18: putfield      #5                  // Field failedWrites:Ljava/util/Set;
      21: return

  public void sync() throws com.mchange.v1.cachedstore.CachedStoreException;
    Code:
       0: aload_0
       1: invokevirtual #38                 // Method flushWrites:()V
       4: aload_0
       5: invokevirtual #39                 // Method reset:()V
       8: return

  static {};
    Code:
       0: new           #40                 // class java/lang/Object
       3: dup
       4: invokespecial #1                  // Method java/lang/Object."<init>":()V
       7: putstatic     #10                 // Field REMOVE_TOKEN:Ljava/lang/Object;
      10: return
}
