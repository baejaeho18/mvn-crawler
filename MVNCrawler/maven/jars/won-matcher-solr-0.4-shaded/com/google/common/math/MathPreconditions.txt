Compiled from "MathPreconditions.java"
final class com.google.common.math.MathPreconditions {
  static int checkPositive(java.lang.String, int);
    Code:
       0: iload_1
       1: ifgt          40
       4: new           #1                  // class java/lang/IllegalArgumentException
       7: dup
       8: new           #2                  // class java/lang/StringBuilder
      11: dup
      12: invokespecial #3                  // Method java/lang/StringBuilder."<init>":()V
      15: aload_0
      16: invokevirtual #4                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      19: ldc           #5                  // String  (
      21: invokevirtual #4                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: iload_1
      25: invokevirtual #6                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      28: ldc           #7                  // String ) must be > 0
      30: invokevirtual #4                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      33: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      36: invokespecial #9                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      39: athrow
      40: iload_1
      41: ireturn

  static long checkPositive(java.lang.String, long);
    Code:
       0: lload_1
       1: lconst_0
       2: lcmp
       3: ifgt          42
       6: new           #1                  // class java/lang/IllegalArgumentException
       9: dup
      10: new           #2                  // class java/lang/StringBuilder
      13: dup
      14: invokespecial #3                  // Method java/lang/StringBuilder."<init>":()V
      17: aload_0
      18: invokevirtual #4                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      21: ldc           #5                  // String  (
      23: invokevirtual #4                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      26: lload_1
      27: invokevirtual #10                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      30: ldc           #7                  // String ) must be > 0
      32: invokevirtual #4                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      35: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      38: invokespecial #9                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      41: athrow
      42: lload_1
      43: lreturn

  static java.math.BigInteger checkPositive(java.lang.String, java.math.BigInteger);
    Code:
       0: aload_1
       1: invokevirtual #11                 // Method java/math/BigInteger.signum:()I
       4: ifgt          43
       7: new           #1                  // class java/lang/IllegalArgumentException
      10: dup
      11: new           #2                  // class java/lang/StringBuilder
      14: dup
      15: invokespecial #3                  // Method java/lang/StringBuilder."<init>":()V
      18: aload_0
      19: invokevirtual #4                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      22: ldc           #5                  // String  (
      24: invokevirtual #4                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      27: aload_1
      28: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      31: ldc           #7                  // String ) must be > 0
      33: invokevirtual #4                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      36: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      39: invokespecial #9                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      42: athrow
      43: aload_1
      44: areturn

  static int checkNonNegative(java.lang.String, int);
    Code:
       0: iload_1
       1: ifge          40
       4: new           #1                  // class java/lang/IllegalArgumentException
       7: dup
       8: new           #2                  // class java/lang/StringBuilder
      11: dup
      12: invokespecial #3                  // Method java/lang/StringBuilder."<init>":()V
      15: aload_0
      16: invokevirtual #4                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      19: ldc           #5                  // String  (
      21: invokevirtual #4                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: iload_1
      25: invokevirtual #6                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      28: ldc           #13                 // String ) must be >= 0
      30: invokevirtual #4                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      33: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      36: invokespecial #9                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      39: athrow
      40: iload_1
      41: ireturn

  static long checkNonNegative(java.lang.String, long);
    Code:
       0: lload_1
       1: lconst_0
       2: lcmp
       3: ifge          42
       6: new           #1                  // class java/lang/IllegalArgumentException
       9: dup
      10: new           #2                  // class java/lang/StringBuilder
      13: dup
      14: invokespecial #3                  // Method java/lang/StringBuilder."<init>":()V
      17: aload_0
      18: invokevirtual #4                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      21: ldc           #5                  // String  (
      23: invokevirtual #4                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      26: lload_1
      27: invokevirtual #10                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      30: ldc           #13                 // String ) must be >= 0
      32: invokevirtual #4                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      35: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      38: invokespecial #9                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      41: athrow
      42: lload_1
      43: lreturn

  static java.math.BigInteger checkNonNegative(java.lang.String, java.math.BigInteger);
    Code:
       0: aload_1
       1: invokevirtual #11                 // Method java/math/BigInteger.signum:()I
       4: ifge          43
       7: new           #1                  // class java/lang/IllegalArgumentException
      10: dup
      11: new           #2                  // class java/lang/StringBuilder
      14: dup
      15: invokespecial #3                  // Method java/lang/StringBuilder."<init>":()V
      18: aload_0
      19: invokevirtual #4                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      22: ldc           #5                  // String  (
      24: invokevirtual #4                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      27: aload_1
      28: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      31: ldc           #13                 // String ) must be >= 0
      33: invokevirtual #4                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      36: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      39: invokespecial #9                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      42: athrow
      43: aload_1
      44: areturn

  static double checkNonNegative(java.lang.String, double);
    Code:
       0: dload_1
       1: dconst_0
       2: dcmpl
       3: ifge          42
       6: new           #1                  // class java/lang/IllegalArgumentException
       9: dup
      10: new           #2                  // class java/lang/StringBuilder
      13: dup
      14: invokespecial #3                  // Method java/lang/StringBuilder."<init>":()V
      17: aload_0
      18: invokevirtual #4                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      21: ldc           #5                  // String  (
      23: invokevirtual #4                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      26: dload_1
      27: invokevirtual #14                 // Method java/lang/StringBuilder.append:(D)Ljava/lang/StringBuilder;
      30: ldc           #13                 // String ) must be >= 0
      32: invokevirtual #4                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      35: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      38: invokespecial #9                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      41: athrow
      42: dload_1
      43: dreturn

  static void checkRoundingUnnecessary(boolean);
    Code:
       0: iload_0
       1: ifne          14
       4: new           #15                 // class java/lang/ArithmeticException
       7: dup
       8: ldc           #16                 // String mode was UNNECESSARY, but rounding was necessary
      10: invokespecial #17                 // Method java/lang/ArithmeticException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: return

  static void checkInRange(boolean);
    Code:
       0: iload_0
       1: ifne          14
       4: new           #15                 // class java/lang/ArithmeticException
       7: dup
       8: ldc           #18                 // String not in range
      10: invokespecial #17                 // Method java/lang/ArithmeticException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: return

  static void checkNoOverflow(boolean);
    Code:
       0: iload_0
       1: ifne          14
       4: new           #15                 // class java/lang/ArithmeticException
       7: dup
       8: ldc           #19                 // String overflow
      10: invokespecial #17                 // Method java/lang/ArithmeticException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: return

  private com.google.common.math.MathPreconditions();
    Code:
       0: aload_0
       1: invokespecial #20                 // Method java/lang/Object."<init>":()V
       4: return
}
