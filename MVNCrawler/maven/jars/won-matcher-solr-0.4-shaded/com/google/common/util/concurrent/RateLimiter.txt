Compiled from "RateLimiter.java"
public abstract class com.google.common.util.concurrent.RateLimiter {
  private final com.google.common.util.concurrent.RateLimiter$SleepingTicker ticker;

  private final long offsetNanos;

  double storedPermits;

  double maxPermits;

  volatile double stableIntervalMicros;

  private final java.lang.Object mutex;

  private long nextFreeTicketMicros;

  public static com.google.common.util.concurrent.RateLimiter create(double);
    Code:
       0: getstatic     #2                  // Field com/google/common/util/concurrent/RateLimiter$SleepingTicker.SYSTEM_TICKER:Lcom/google/common/util/concurrent/RateLimiter$SleepingTicker;
       3: dload_0
       4: invokestatic  #3                  // Method create:(Lcom/google/common/util/concurrent/RateLimiter$SleepingTicker;D)Lcom/google/common/util/concurrent/RateLimiter;
       7: areturn

  static com.google.common.util.concurrent.RateLimiter create(com.google.common.util.concurrent.RateLimiter$SleepingTicker, double);
    Code:
       0: new           #4                  // class com/google/common/util/concurrent/RateLimiter$Bursty
       3: dup
       4: aload_0
       5: dconst_1
       6: invokespecial #5                  // Method com/google/common/util/concurrent/RateLimiter$Bursty."<init>":(Lcom/google/common/util/concurrent/RateLimiter$SleepingTicker;D)V
       9: astore_3
      10: aload_3
      11: dload_1
      12: invokevirtual #6                  // Method setRate:(D)V
      15: aload_3
      16: areturn

  public static com.google.common.util.concurrent.RateLimiter create(double, long, java.util.concurrent.TimeUnit);
    Code:
       0: getstatic     #2                  // Field com/google/common/util/concurrent/RateLimiter$SleepingTicker.SYSTEM_TICKER:Lcom/google/common/util/concurrent/RateLimiter$SleepingTicker;
       3: dload_0
       4: lload_2
       5: aload         4
       7: invokestatic  #7                  // Method create:(Lcom/google/common/util/concurrent/RateLimiter$SleepingTicker;DJLjava/util/concurrent/TimeUnit;)Lcom/google/common/util/concurrent/RateLimiter;
      10: areturn

  static com.google.common.util.concurrent.RateLimiter create(com.google.common.util.concurrent.RateLimiter$SleepingTicker, double, long, java.util.concurrent.TimeUnit);
    Code:
       0: new           #8                  // class com/google/common/util/concurrent/RateLimiter$WarmingUp
       3: dup
       4: aload_0
       5: lload_3
       6: aload         5
       8: invokespecial #9                  // Method com/google/common/util/concurrent/RateLimiter$WarmingUp."<init>":(Lcom/google/common/util/concurrent/RateLimiter$SleepingTicker;JLjava/util/concurrent/TimeUnit;)V
      11: astore        6
      13: aload         6
      15: dload_1
      16: invokevirtual #6                  // Method setRate:(D)V
      19: aload         6
      21: areturn

  static com.google.common.util.concurrent.RateLimiter createWithCapacity(com.google.common.util.concurrent.RateLimiter$SleepingTicker, double, long, java.util.concurrent.TimeUnit);
    Code:
       0: aload         5
       2: lload_3
       3: invokevirtual #10                 // Method java/util/concurrent/TimeUnit.toNanos:(J)J
       6: l2d
       7: ldc2_w        #11                 // double 1.0E9d
      10: ddiv
      11: dstore        6
      13: new           #4                  // class com/google/common/util/concurrent/RateLimiter$Bursty
      16: dup
      17: aload_0
      18: dload         6
      20: invokespecial #5                  // Method com/google/common/util/concurrent/RateLimiter$Bursty."<init>":(Lcom/google/common/util/concurrent/RateLimiter$SleepingTicker;D)V
      23: astore        8
      25: aload         8
      27: dload_1
      28: invokevirtual #13                 // Method com/google/common/util/concurrent/RateLimiter$Bursty.setRate:(D)V
      31: aload         8
      33: areturn

  private com.google.common.util.concurrent.RateLimiter(com.google.common.util.concurrent.RateLimiter$SleepingTicker);
    Code:
       0: aload_0
       1: invokespecial #14                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #15                 // class java/lang/Object
       8: dup
       9: invokespecial #14                 // Method java/lang/Object."<init>":()V
      12: putfield      #16                 // Field mutex:Ljava/lang/Object;
      15: aload_0
      16: lconst_0
      17: putfield      #17                 // Field nextFreeTicketMicros:J
      20: aload_0
      21: aload_1
      22: putfield      #18                 // Field ticker:Lcom/google/common/util/concurrent/RateLimiter$SleepingTicker;
      25: aload_0
      26: aload_1
      27: invokevirtual #19                 // Method com/google/common/util/concurrent/RateLimiter$SleepingTicker.read:()J
      30: putfield      #20                 // Field offsetNanos:J
      33: return

  public final void setRate(double);
    Code:
       0: dload_1
       1: dconst_0
       2: dcmpl
       3: ifle          17
       6: dload_1
       7: invokestatic  #21                 // Method java/lang/Double.isNaN:(D)Z
      10: ifne          17
      13: iconst_1
      14: goto          18
      17: iconst_0
      18: ldc           #22                 // String rate must be positive
      20: invokestatic  #23                 // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/Object;)V
      23: aload_0
      24: getfield      #16                 // Field mutex:Ljava/lang/Object;
      27: dup
      28: astore_3
      29: monitorenter
      30: aload_0
      31: aload_0
      32: invokespecial #24                 // Method readSafeMicros:()J
      35: invokespecial #25                 // Method resync:(J)V
      38: getstatic     #26                 // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
      41: lconst_1
      42: invokevirtual #27                 // Method java/util/concurrent/TimeUnit.toMicros:(J)J
      45: l2d
      46: dload_1
      47: ddiv
      48: dstore        4
      50: aload_0
      51: dload         4
      53: putfield      #28                 // Field stableIntervalMicros:D
      56: aload_0
      57: dload_1
      58: dload         4
      60: invokevirtual #29                 // Method doSetRate:(DD)V
      63: aload_3
      64: monitorexit
      65: goto          75
      68: astore        6
      70: aload_3
      71: monitorexit
      72: aload         6
      74: athrow
      75: return
    Exception table:
       from    to  target type
          30    65    68   any
          68    72    68   any

  abstract void doSetRate(double, double);

  public final double getRate();
    Code:
       0: getstatic     #26                 // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
       3: lconst_1
       4: invokevirtual #27                 // Method java/util/concurrent/TimeUnit.toMicros:(J)J
       7: l2d
       8: aload_0
       9: getfield      #28                 // Field stableIntervalMicros:D
      12: ddiv
      13: dreturn

  public void acquire();
    Code:
       0: aload_0
       1: iconst_1
       2: invokevirtual #30                 // Method acquire:(I)V
       5: return

  public void acquire(int);
    Code:
       0: iload_1
       1: invokestatic  #31                 // Method checkPermits:(I)V
       4: aload_0
       5: getfield      #16                 // Field mutex:Ljava/lang/Object;
       8: dup
       9: astore        4
      11: monitorenter
      12: aload_0
      13: iload_1
      14: i2d
      15: aload_0
      16: invokespecial #24                 // Method readSafeMicros:()J
      19: invokespecial #32                 // Method reserveNextTicket:(DJ)J
      22: lstore_2
      23: aload         4
      25: monitorexit
      26: goto          37
      29: astore        5
      31: aload         4
      33: monitorexit
      34: aload         5
      36: athrow
      37: aload_0
      38: getfield      #18                 // Field ticker:Lcom/google/common/util/concurrent/RateLimiter$SleepingTicker;
      41: lload_2
      42: invokevirtual #33                 // Method com/google/common/util/concurrent/RateLimiter$SleepingTicker.sleepMicrosUninterruptibly:(J)V
      45: return
    Exception table:
       from    to  target type
          12    26    29   any
          29    34    29   any

  public boolean tryAcquire(long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: iconst_1
       2: lload_1
       3: aload_3
       4: invokevirtual #34                 // Method tryAcquire:(IJLjava/util/concurrent/TimeUnit;)Z
       7: ireturn

  public boolean tryAcquire(int);
    Code:
       0: aload_0
       1: iload_1
       2: lconst_0
       3: getstatic     #35                 // Field java/util/concurrent/TimeUnit.MICROSECONDS:Ljava/util/concurrent/TimeUnit;
       6: invokevirtual #34                 // Method tryAcquire:(IJLjava/util/concurrent/TimeUnit;)Z
       9: ireturn

  public boolean tryAcquire();
    Code:
       0: aload_0
       1: iconst_1
       2: lconst_0
       3: getstatic     #35                 // Field java/util/concurrent/TimeUnit.MICROSECONDS:Ljava/util/concurrent/TimeUnit;
       6: invokevirtual #34                 // Method tryAcquire:(IJLjava/util/concurrent/TimeUnit;)Z
       9: ireturn

  public boolean tryAcquire(int, long, java.util.concurrent.TimeUnit);
    Code:
       0: aload         4
       2: lload_2
       3: invokevirtual #27                 // Method java/util/concurrent/TimeUnit.toMicros:(J)J
       6: lstore        5
       8: iload_1
       9: invokestatic  #31                 // Method checkPermits:(I)V
      12: aload_0
      13: getfield      #16                 // Field mutex:Ljava/lang/Object;
      16: dup
      17: astore        9
      19: monitorenter
      20: aload_0
      21: invokespecial #24                 // Method readSafeMicros:()J
      24: lstore        10
      26: aload_0
      27: getfield      #17                 // Field nextFreeTicketMicros:J
      30: lload         10
      32: lload         5
      34: ladd
      35: lcmp
      36: ifle          44
      39: iconst_0
      40: aload         9
      42: monitorexit
      43: ireturn
      44: aload_0
      45: iload_1
      46: i2d
      47: lload         10
      49: invokespecial #32                 // Method reserveNextTicket:(DJ)J
      52: lstore        7
      54: aload         9
      56: monitorexit
      57: goto          68
      60: astore        12
      62: aload         9
      64: monitorexit
      65: aload         12
      67: athrow
      68: aload_0
      69: getfield      #18                 // Field ticker:Lcom/google/common/util/concurrent/RateLimiter$SleepingTicker;
      72: lload         7
      74: invokevirtual #33                 // Method com/google/common/util/concurrent/RateLimiter$SleepingTicker.sleepMicrosUninterruptibly:(J)V
      77: iconst_1
      78: ireturn
    Exception table:
       from    to  target type
          20    43    60   any
          44    57    60   any
          60    65    60   any

  private static void checkPermits(int);
    Code:
       0: iload_0
       1: ifle          8
       4: iconst_1
       5: goto          9
       8: iconst_0
       9: ldc           #36                 // String Requested permits must be positive
      11: invokestatic  #23                 // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/Object;)V
      14: return

  private long reserveNextTicket(double, long);
    Code:
       0: aload_0
       1: lload_3
       2: invokespecial #25                 // Method resync:(J)V
       5: aload_0
       6: getfield      #17                 // Field nextFreeTicketMicros:J
       9: lload_3
      10: lsub
      11: lstore        5
      13: dload_1
      14: aload_0
      15: getfield      #37                 // Field storedPermits:D
      18: invokestatic  #38                 // Method java/lang/Math.min:(DD)D
      21: dstore        7
      23: dload_1
      24: dload         7
      26: dsub
      27: dstore        9
      29: aload_0
      30: aload_0
      31: getfield      #37                 // Field storedPermits:D
      34: dload         7
      36: invokevirtual #39                 // Method storedPermitsToWaitTime:(DD)J
      39: dload         9
      41: aload_0
      42: getfield      #28                 // Field stableIntervalMicros:D
      45: dmul
      46: d2l
      47: ladd
      48: lstore        11
      50: aload_0
      51: aload_0
      52: getfield      #17                 // Field nextFreeTicketMicros:J
      55: lload         11
      57: ladd
      58: putfield      #17                 // Field nextFreeTicketMicros:J
      61: aload_0
      62: dup
      63: getfield      #37                 // Field storedPermits:D
      66: dload         7
      68: dsub
      69: putfield      #37                 // Field storedPermits:D
      72: lload         5
      74: lreturn

  abstract long storedPermitsToWaitTime(double, double);

  private void resync(long);
    Code:
       0: lload_1
       1: aload_0
       2: getfield      #17                 // Field nextFreeTicketMicros:J
       5: lcmp
       6: ifle          42
       9: aload_0
      10: aload_0
      11: getfield      #40                 // Field maxPermits:D
      14: aload_0
      15: getfield      #37                 // Field storedPermits:D
      18: lload_1
      19: aload_0
      20: getfield      #17                 // Field nextFreeTicketMicros:J
      23: lsub
      24: l2d
      25: aload_0
      26: getfield      #28                 // Field stableIntervalMicros:D
      29: ddiv
      30: dadd
      31: invokestatic  #38                 // Method java/lang/Math.min:(DD)D
      34: putfield      #37                 // Field storedPermits:D
      37: aload_0
      38: lload_1
      39: putfield      #17                 // Field nextFreeTicketMicros:J
      42: return

  private long readSafeMicros();
    Code:
       0: getstatic     #41                 // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
       3: aload_0
       4: getfield      #18                 // Field ticker:Lcom/google/common/util/concurrent/RateLimiter$SleepingTicker;
       7: invokevirtual #19                 // Method com/google/common/util/concurrent/RateLimiter$SleepingTicker.read:()J
      10: aload_0
      11: getfield      #20                 // Field offsetNanos:J
      14: lsub
      15: invokevirtual #27                 // Method java/util/concurrent/TimeUnit.toMicros:(J)J
      18: lreturn

  public java.lang.String toString();
    Code:
       0: ldc           #42                 // String RateLimiter[stableRate=%3.1fqps]
       2: iconst_1
       3: anewarray     #15                 // class java/lang/Object
       6: dup
       7: iconst_0
       8: ldc2_w        #43                 // double 1000000.0d
      11: aload_0
      12: getfield      #28                 // Field stableIntervalMicros:D
      15: ddiv
      16: invokestatic  #45                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      19: aastore
      20: invokestatic  #46                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      23: areturn

  com.google.common.util.concurrent.RateLimiter(com.google.common.util.concurrent.RateLimiter$SleepingTicker, com.google.common.util.concurrent.RateLimiter$1);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method "<init>":(Lcom/google/common/util/concurrent/RateLimiter$SleepingTicker;)V
       5: return
}
