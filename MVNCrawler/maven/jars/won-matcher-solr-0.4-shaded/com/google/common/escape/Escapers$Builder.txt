Compiled from "Escapers.java"
public final class com.google.common.escape.Escapers$Builder {
  private final java.util.Map<java.lang.Character, java.lang.String> replacementMap;

  private char safeMin;

  private char safeMax;

  private java.lang.String unsafeReplacement;

  private com.google.common.escape.Escapers$Builder();
    Code:
       0: aload_0
       1: invokespecial #5                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #6                  // class java/util/HashMap
       8: dup
       9: invokespecial #7                  // Method java/util/HashMap."<init>":()V
      12: putfield      #8                  // Field replacementMap:Ljava/util/Map;
      15: aload_0
      16: iconst_0
      17: putfield      #9                  // Field safeMin:C
      20: aload_0
      21: ldc           #10                 // int 65535
      23: putfield      #11                 // Field safeMax:C
      26: aload_0
      27: aconst_null
      28: putfield      #3                  // Field unsafeReplacement:Ljava/lang/String;
      31: return

  public com.google.common.escape.Escapers$Builder setSafeRange(char, char);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #9                  // Field safeMin:C
       5: aload_0
       6: iload_2
       7: putfield      #11                 // Field safeMax:C
      10: aload_0
      11: areturn

  public com.google.common.escape.Escapers$Builder setUnsafeReplacement(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #3                  // Field unsafeReplacement:Ljava/lang/String;
       5: aload_0
       6: areturn

  public com.google.common.escape.Escapers$Builder addEscape(char, java.lang.String);
    Code:
       0: aload_2
       1: invokestatic  #12                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: aload_0
       6: getfield      #8                  // Field replacementMap:Ljava/util/Map;
       9: iload_1
      10: invokestatic  #13                 // Method java/lang/Character.valueOf:(C)Ljava/lang/Character;
      13: aload_2
      14: invokeinterface #14,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      19: pop
      20: aload_0
      21: areturn

  public com.google.common.escape.Escaper build();
    Code:
       0: new           #15                 // class com/google/common/escape/Escapers$Builder$1
       3: dup
       4: aload_0
       5: aload_0
       6: getfield      #8                  // Field replacementMap:Ljava/util/Map;
       9: aload_0
      10: getfield      #9                  // Field safeMin:C
      13: aload_0
      14: getfield      #11                 // Field safeMax:C
      17: invokespecial #16                 // Method com/google/common/escape/Escapers$Builder$1."<init>":(Lcom/google/common/escape/Escapers$Builder;Ljava/util/Map;CC)V
      20: areturn

  com.google.common.escape.Escapers$Builder(com.google.common.escape.Escapers$1);
    Code:
       0: aload_0
       1: invokespecial #4                  // Method "<init>":()V
       4: return

  static java.lang.String access$100(com.google.common.escape.Escapers$Builder);
    Code:
       0: aload_0
       1: getfield      #3                  // Field unsafeReplacement:Ljava/lang/String;
       4: areturn
}
