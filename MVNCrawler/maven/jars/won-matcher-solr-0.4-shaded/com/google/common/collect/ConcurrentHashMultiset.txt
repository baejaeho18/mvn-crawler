Compiled from "ConcurrentHashMultiset.java"
public final class com.google.common.collect.ConcurrentHashMultiset<E> extends com.google.common.collect.AbstractMultiset<E> implements java.io.Serializable {
  private final transient java.util.concurrent.ConcurrentMap<E, java.util.concurrent.atomic.AtomicInteger> countMap;

  private transient com.google.common.collect.ConcurrentHashMultiset<E>.EntrySet entrySet;

  private static final long serialVersionUID;

  public static <E> com.google.common.collect.ConcurrentHashMultiset<E> create();
    Code:
       0: new           #2                  // class com/google/common/collect/ConcurrentHashMultiset
       3: dup
       4: new           #3                  // class java/util/concurrent/ConcurrentHashMap
       7: dup
       8: invokespecial #4                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      11: invokespecial #5                  // Method "<init>":(Ljava/util/concurrent/ConcurrentMap;)V
      14: areturn

  public static <E> com.google.common.collect.ConcurrentHashMultiset<E> create(java.lang.Iterable<? extends E>);
    Code:
       0: invokestatic  #6                  // Method create:()Lcom/google/common/collect/ConcurrentHashMultiset;
       3: astore_1
       4: aload_1
       5: aload_0
       6: invokestatic  #7                  // Method com/google/common/collect/Iterables.addAll:(Ljava/util/Collection;Ljava/lang/Iterable;)Z
       9: pop
      10: aload_1
      11: areturn

  public static <E> com.google.common.collect.ConcurrentHashMultiset<E> create(com.google.common.collect.MapMaker);
    Code:
       0: new           #2                  // class com/google/common/collect/ConcurrentHashMultiset
       3: dup
       4: aload_0
       5: invokevirtual #8                  // Method com/google/common/collect/MapMaker.makeMap:()Ljava/util/concurrent/ConcurrentMap;
       8: invokespecial #5                  // Method "<init>":(Ljava/util/concurrent/ConcurrentMap;)V
      11: areturn

  com.google.common.collect.ConcurrentHashMultiset(java.util.concurrent.ConcurrentMap<E, java.util.concurrent.atomic.AtomicInteger>);
    Code:
       0: aload_0
       1: invokespecial #9                  // Method com/google/common/collect/AbstractMultiset."<init>":()V
       4: aload_1
       5: invokeinterface #10,  1           // InterfaceMethod java/util/concurrent/ConcurrentMap.isEmpty:()Z
      10: invokestatic  #11                 // Method com/google/common/base/Preconditions.checkArgument:(Z)V
      13: aload_0
      14: aload_1
      15: putfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
      18: return

  public int count(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
       4: aload_1
       5: invokestatic  #12                 // Method com/google/common/collect/Maps.safeGet:(Ljava/util/Map;Ljava/lang/Object;)Ljava/lang/Object;
       8: checkcast     #13                 // class java/util/concurrent/atomic/AtomicInteger
      11: astore_2
      12: aload_2
      13: ifnonnull     20
      16: iconst_0
      17: goto          24
      20: aload_2
      21: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      24: ireturn

  public int size();
    Code:
       0: lconst_0
       1: lstore_1
       2: aload_0
       3: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
       6: invokeinterface #15,  1           // InterfaceMethod java/util/concurrent/ConcurrentMap.values:()Ljava/util/Collection;
      11: invokeinterface #16,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      16: astore_3
      17: aload_3
      18: invokeinterface #17,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      23: ifeq          49
      26: aload_3
      27: invokeinterface #18,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      32: checkcast     #13                 // class java/util/concurrent/atomic/AtomicInteger
      35: astore        4
      37: lload_1
      38: aload         4
      40: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      43: i2l
      44: ladd
      45: lstore_1
      46: goto          17
      49: lload_1
      50: invokestatic  #19                 // Method com/google/common/primitives/Ints.saturatedCast:(J)I
      53: ireturn

  public java.lang.Object[] toArray();
    Code:
       0: aload_0
       1: invokespecial #20                 // Method snapshot:()Ljava/util/List;
       4: invokeinterface #21,  1           // InterfaceMethod java/util/List.toArray:()[Ljava/lang/Object;
       9: areturn

  public <T> T[] toArray(T[]);
    Code:
       0: aload_0
       1: invokespecial #20                 // Method snapshot:()Ljava/util/List;
       4: aload_1
       5: invokeinterface #22,  2           // InterfaceMethod java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
      10: areturn

  private java.util.List<E> snapshot();
    Code:
       0: aload_0
       1: invokevirtual #23                 // Method size:()I
       4: invokestatic  #24                 // Method com/google/common/collect/Lists.newArrayListWithExpectedSize:(I)Ljava/util/ArrayList;
       7: astore_1
       8: aload_0
       9: invokevirtual #25                 // Method entrySet:()Ljava/util/Set;
      12: invokeinterface #26,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      17: astore_2
      18: aload_2
      19: invokeinterface #17,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      24: ifeq          76
      27: aload_2
      28: invokeinterface #18,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      33: checkcast     #27                 // class com/google/common/collect/Multiset$Entry
      36: astore_3
      37: aload_3
      38: invokeinterface #28,  1           // InterfaceMethod com/google/common/collect/Multiset$Entry.getElement:()Ljava/lang/Object;
      43: astore        4
      45: aload_3
      46: invokeinterface #29,  1           // InterfaceMethod com/google/common/collect/Multiset$Entry.getCount:()I
      51: istore        5
      53: iload         5
      55: ifle          73
      58: aload_1
      59: aload         4
      61: invokeinterface #30,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      66: pop
      67: iinc          5, -1
      70: goto          53
      73: goto          18
      76: aload_1
      77: areturn

  public int add(E, int);
    Code:
       0: aload_1
       1: invokestatic  #31                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: iload_2
       6: ifne          15
       9: aload_0
      10: aload_1
      11: invokevirtual #32                 // Method count:(Ljava/lang/Object;)I
      14: ireturn
      15: iload_2
      16: ifle          23
      19: iconst_1
      20: goto          24
      23: iconst_0
      24: ldc           #33                 // String Invalid occurrences: %s
      26: iconst_1
      27: anewarray     #34                 // class java/lang/Object
      30: dup
      31: iconst_0
      32: iload_2
      33: invokestatic  #35                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      36: aastore
      37: invokestatic  #36                 // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/String;[Ljava/lang/Object;)V
      40: aload_0
      41: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
      44: aload_1
      45: invokestatic  #12                 // Method com/google/common/collect/Maps.safeGet:(Ljava/util/Map;Ljava/lang/Object;)Ljava/lang/Object;
      48: checkcast     #13                 // class java/util/concurrent/atomic/AtomicInteger
      51: astore_3
      52: aload_3
      53: ifnonnull     84
      56: aload_0
      57: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
      60: aload_1
      61: new           #13                 // class java/util/concurrent/atomic/AtomicInteger
      64: dup
      65: iload_2
      66: invokespecial #37                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
      69: invokeinterface #38,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      74: checkcast     #13                 // class java/util/concurrent/atomic/AtomicInteger
      77: astore_3
      78: aload_3
      79: ifnonnull     84
      82: iconst_0
      83: ireturn
      84: aload_3
      85: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      88: istore        4
      90: iload         4
      92: ifeq          159
      95: iload         4
      97: iload_2
      98: invokestatic  #39                 // Method com/google/common/math/IntMath.checkedAdd:(II)I
     101: istore        5
     103: aload_3
     104: iload         4
     106: iload         5
     108: invokevirtual #40                 // Method java/util/concurrent/atomic/AtomicInteger.compareAndSet:(II)Z
     111: ifeq          117
     114: iload         4
     116: ireturn
     117: goto          202
     120: astore        5
     122: new           #42                 // class java/lang/IllegalArgumentException
     125: dup
     126: new           #43                 // class java/lang/StringBuilder
     129: dup
     130: invokespecial #44                 // Method java/lang/StringBuilder."<init>":()V
     133: ldc           #45                 // String Overflow adding
     135: invokevirtual #46                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     138: iload_2
     139: invokevirtual #47                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     142: ldc           #48                 // String  occurrences to a count of
     144: invokevirtual #46                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     147: iload         4
     149: invokevirtual #47                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     152: invokevirtual #49                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     155: invokespecial #50                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     158: athrow
     159: new           #13                 // class java/util/concurrent/atomic/AtomicInteger
     162: dup
     163: iload_2
     164: invokespecial #37                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
     167: astore        5
     169: aload_0
     170: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
     173: aload_1
     174: aload         5
     176: invokeinterface #38,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     181: ifnull        200
     184: aload_0
     185: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
     188: aload_1
     189: aload_3
     190: aload         5
     192: invokeinterface #51,  4           // InterfaceMethod java/util/concurrent/ConcurrentMap.replace:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
     197: ifeq          205
     200: iconst_0
     201: ireturn
     202: goto          84
     205: goto          40
    Exception table:
       from    to  target type
          95   116   120   Class java/lang/ArithmeticException

  public int remove(java.lang.Object, int);
    Code:
       0: iload_2
       1: ifne          10
       4: aload_0
       5: aload_1
       6: invokevirtual #32                 // Method count:(Ljava/lang/Object;)I
       9: ireturn
      10: iload_2
      11: ifle          18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: ldc           #33                 // String Invalid occurrences: %s
      21: iconst_1
      22: anewarray     #34                 // class java/lang/Object
      25: dup
      26: iconst_0
      27: iload_2
      28: invokestatic  #35                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      31: aastore
      32: invokestatic  #36                 // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/String;[Ljava/lang/Object;)V
      35: aload_0
      36: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
      39: aload_1
      40: invokestatic  #12                 // Method com/google/common/collect/Maps.safeGet:(Ljava/util/Map;Ljava/lang/Object;)Ljava/lang/Object;
      43: checkcast     #13                 // class java/util/concurrent/atomic/AtomicInteger
      46: astore_3
      47: aload_3
      48: ifnonnull     53
      51: iconst_0
      52: ireturn
      53: aload_3
      54: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      57: istore        4
      59: iload         4
      61: ifeq          108
      64: iconst_0
      65: iload         4
      67: iload_2
      68: isub
      69: invokestatic  #52                 // Method java/lang/Math.max:(II)I
      72: istore        5
      74: aload_3
      75: iload         4
      77: iload         5
      79: invokevirtual #40                 // Method java/util/concurrent/atomic/AtomicInteger.compareAndSet:(II)Z
      82: ifeq          105
      85: iload         5
      87: ifne          102
      90: aload_0
      91: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
      94: aload_1
      95: aload_3
      96: invokeinterface #53,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.remove:(Ljava/lang/Object;Ljava/lang/Object;)Z
     101: pop
     102: iload         4
     104: ireturn
     105: goto          110
     108: iconst_0
     109: ireturn
     110: goto          53

  public boolean removeExactly(java.lang.Object, int);
    Code:
       0: iload_2
       1: ifne          6
       4: iconst_1
       5: ireturn
       6: iload_2
       7: ifle          14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ldc           #33                 // String Invalid occurrences: %s
      17: iconst_1
      18: anewarray     #34                 // class java/lang/Object
      21: dup
      22: iconst_0
      23: iload_2
      24: invokestatic  #35                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      27: aastore
      28: invokestatic  #36                 // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/String;[Ljava/lang/Object;)V
      31: aload_0
      32: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
      35: aload_1
      36: invokestatic  #12                 // Method com/google/common/collect/Maps.safeGet:(Ljava/util/Map;Ljava/lang/Object;)Ljava/lang/Object;
      39: checkcast     #13                 // class java/util/concurrent/atomic/AtomicInteger
      42: astore_3
      43: aload_3
      44: ifnonnull     49
      47: iconst_0
      48: ireturn
      49: aload_3
      50: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      53: istore        4
      55: iload         4
      57: iload_2
      58: if_icmpge     63
      61: iconst_0
      62: ireturn
      63: iload         4
      65: iload_2
      66: isub
      67: istore        5
      69: aload_3
      70: iload         4
      72: iload         5
      74: invokevirtual #40                 // Method java/util/concurrent/atomic/AtomicInteger.compareAndSet:(II)Z
      77: ifeq          99
      80: iload         5
      82: ifne          97
      85: aload_0
      86: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
      89: aload_1
      90: aload_3
      91: invokeinterface #53,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.remove:(Ljava/lang/Object;Ljava/lang/Object;)Z
      96: pop
      97: iconst_1
      98: ireturn
      99: goto          49

  public int setCount(E, int);
    Code:
       0: aload_1
       1: invokestatic  #31                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: iload_2
       6: ldc           #54                 // String count
       8: invokestatic  #55                 // Method com/google/common/collect/CollectPreconditions.checkNonnegative:(ILjava/lang/String;)I
      11: pop
      12: aload_0
      13: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
      16: aload_1
      17: invokestatic  #12                 // Method com/google/common/collect/Maps.safeGet:(Ljava/util/Map;Ljava/lang/Object;)Ljava/lang/Object;
      20: checkcast     #13                 // class java/util/concurrent/atomic/AtomicInteger
      23: astore_3
      24: aload_3
      25: ifnonnull     62
      28: iload_2
      29: ifne          34
      32: iconst_0
      33: ireturn
      34: aload_0
      35: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
      38: aload_1
      39: new           #13                 // class java/util/concurrent/atomic/AtomicInteger
      42: dup
      43: iload_2
      44: invokespecial #37                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
      47: invokeinterface #38,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      52: checkcast     #13                 // class java/util/concurrent/atomic/AtomicInteger
      55: astore_3
      56: aload_3
      57: ifnonnull     62
      60: iconst_0
      61: ireturn
      62: aload_3
      63: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      66: istore        4
      68: iload         4
      70: ifne          125
      73: iload_2
      74: ifne          79
      77: iconst_0
      78: ireturn
      79: new           #13                 // class java/util/concurrent/atomic/AtomicInteger
      82: dup
      83: iload_2
      84: invokespecial #37                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
      87: astore        5
      89: aload_0
      90: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
      93: aload_1
      94: aload         5
      96: invokeinterface #38,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     101: ifnull        120
     104: aload_0
     105: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
     108: aload_1
     109: aload_3
     110: aload         5
     112: invokeinterface #51,  4           // InterfaceMethod java/util/concurrent/ConcurrentMap.replace:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
     117: ifeq          122
     120: iconst_0
     121: ireturn
     122: goto          157
     125: aload_3
     126: iload         4
     128: iload_2
     129: invokevirtual #40                 // Method java/util/concurrent/atomic/AtomicInteger.compareAndSet:(II)Z
     132: ifeq          154
     135: iload_2
     136: ifne          151
     139: aload_0
     140: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
     143: aload_1
     144: aload_3
     145: invokeinterface #53,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.remove:(Ljava/lang/Object;Ljava/lang/Object;)Z
     150: pop
     151: iload         4
     153: ireturn
     154: goto          62
     157: goto          12

  public boolean setCount(E, int, int);
    Code:
       0: aload_1
       1: invokestatic  #31                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: iload_2
       6: ldc           #56                 // String oldCount
       8: invokestatic  #55                 // Method com/google/common/collect/CollectPreconditions.checkNonnegative:(ILjava/lang/String;)I
      11: pop
      12: iload_3
      13: ldc           #57                 // String newCount
      15: invokestatic  #55                 // Method com/google/common/collect/CollectPreconditions.checkNonnegative:(ILjava/lang/String;)I
      18: pop
      19: aload_0
      20: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
      23: aload_1
      24: invokestatic  #12                 // Method com/google/common/collect/Maps.safeGet:(Ljava/util/Map;Ljava/lang/Object;)Ljava/lang/Object;
      27: checkcast     #13                 // class java/util/concurrent/atomic/AtomicInteger
      30: astore        4
      32: aload         4
      34: ifnonnull     76
      37: iload_2
      38: ifeq          43
      41: iconst_0
      42: ireturn
      43: iload_3
      44: ifne          49
      47: iconst_1
      48: ireturn
      49: aload_0
      50: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
      53: aload_1
      54: new           #13                 // class java/util/concurrent/atomic/AtomicInteger
      57: dup
      58: iload_3
      59: invokespecial #37                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
      62: invokeinterface #38,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      67: ifnonnull     74
      70: iconst_1
      71: goto          75
      74: iconst_0
      75: ireturn
      76: aload         4
      78: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      81: istore        5
      83: iload         5
      85: iload_2
      86: if_icmpne     191
      89: iload         5
      91: ifne          161
      94: iload_3
      95: ifne          113
      98: aload_0
      99: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
     102: aload_1
     103: aload         4
     105: invokeinterface #53,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.remove:(Ljava/lang/Object;Ljava/lang/Object;)Z
     110: pop
     111: iconst_1
     112: ireturn
     113: new           #13                 // class java/util/concurrent/atomic/AtomicInteger
     116: dup
     117: iload_3
     118: invokespecial #37                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
     121: astore        6
     123: aload_0
     124: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
     127: aload_1
     128: aload         6
     130: invokeinterface #38,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     135: ifnull        155
     138: aload_0
     139: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
     142: aload_1
     143: aload         4
     145: aload         6
     147: invokeinterface #51,  4           // InterfaceMethod java/util/concurrent/ConcurrentMap.replace:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
     152: ifeq          159
     155: iconst_1
     156: goto          160
     159: iconst_0
     160: ireturn
     161: aload         4
     163: iload         5
     165: iload_3
     166: invokevirtual #40                 // Method java/util/concurrent/atomic/AtomicInteger.compareAndSet:(II)Z
     169: ifeq          191
     172: iload_3
     173: ifne          189
     176: aload_0
     177: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
     180: aload_1
     181: aload         4
     183: invokeinterface #53,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.remove:(Ljava/lang/Object;Ljava/lang/Object;)Z
     188: pop
     189: iconst_1
     190: ireturn
     191: iconst_0
     192: ireturn

  java.util.Set<E> createElementSet();
    Code:
       0: aload_0
       1: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
       4: invokeinterface #58,  1           // InterfaceMethod java/util/concurrent/ConcurrentMap.keySet:()Ljava/util/Set;
       9: astore_1
      10: new           #59                 // class com/google/common/collect/ConcurrentHashMultiset$1
      13: dup
      14: aload_0
      15: aload_1
      16: invokespecial #60                 // Method com/google/common/collect/ConcurrentHashMultiset$1."<init>":(Lcom/google/common/collect/ConcurrentHashMultiset;Ljava/util/Set;)V
      19: areturn

  public java.util.Set<com.google.common.collect.Multiset$Entry<E>> entrySet();
    Code:
       0: aload_0
       1: getfield      #61                 // Field entrySet:Lcom/google/common/collect/ConcurrentHashMultiset$EntrySet;
       4: astore_1
       5: aload_1
       6: ifnonnull     24
       9: aload_0
      10: new           #62                 // class com/google/common/collect/ConcurrentHashMultiset$EntrySet
      13: dup
      14: aload_0
      15: aconst_null
      16: invokespecial #63                 // Method com/google/common/collect/ConcurrentHashMultiset$EntrySet."<init>":(Lcom/google/common/collect/ConcurrentHashMultiset;Lcom/google/common/collect/ConcurrentHashMultiset$1;)V
      19: dup
      20: astore_1
      21: putfield      #61                 // Field entrySet:Lcom/google/common/collect/ConcurrentHashMultiset$EntrySet;
      24: aload_1
      25: areturn

  int distinctElements();
    Code:
       0: aload_0
       1: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
       4: invokeinterface #64,  1           // InterfaceMethod java/util/concurrent/ConcurrentMap.size:()I
       9: ireturn

  public boolean isEmpty();
    Code:
       0: aload_0
       1: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
       4: invokeinterface #10,  1           // InterfaceMethod java/util/concurrent/ConcurrentMap.isEmpty:()Z
       9: ireturn

  java.util.Iterator<com.google.common.collect.Multiset$Entry<E>> entryIterator();
    Code:
       0: new           #65                 // class com/google/common/collect/ConcurrentHashMultiset$2
       3: dup
       4: aload_0
       5: invokespecial #66                 // Method com/google/common/collect/ConcurrentHashMultiset$2."<init>":(Lcom/google/common/collect/ConcurrentHashMultiset;)V
       8: astore_1
       9: new           #67                 // class com/google/common/collect/ConcurrentHashMultiset$3
      12: dup
      13: aload_0
      14: aload_1
      15: invokespecial #68                 // Method com/google/common/collect/ConcurrentHashMultiset$3."<init>":(Lcom/google/common/collect/ConcurrentHashMultiset;Ljava/util/Iterator;)V
      18: areturn

  public void clear();
    Code:
       0: aload_0
       1: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
       4: invokeinterface #69,  1           // InterfaceMethod java/util/concurrent/ConcurrentMap.clear:()V
       9: return

  private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokevirtual #70                 // Method java/io/ObjectOutputStream.defaultWriteObject:()V
       4: aload_1
       5: aload_0
       6: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
       9: invokevirtual #71                 // Method java/io/ObjectOutputStream.writeObject:(Ljava/lang/Object;)V
      12: return

  private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException;
    Code:
       0: aload_1
       1: invokevirtual #72                 // Method java/io/ObjectInputStream.defaultReadObject:()V
       4: aload_1
       5: invokevirtual #73                 // Method java/io/ObjectInputStream.readObject:()Ljava/lang/Object;
       8: checkcast     #74                 // class java/util/concurrent/ConcurrentMap
      11: astore_2
      12: getstatic     #75                 // Field com/google/common/collect/ConcurrentHashMultiset$FieldSettersHolder.COUNT_MAP_FIELD_SETTER:Lcom/google/common/collect/Serialization$FieldSetter;
      15: aload_0
      16: aload_2
      17: invokevirtual #76                 // Method com/google/common/collect/Serialization$FieldSetter.set:(Ljava/lang/Object;Ljava/lang/Object;)V
      20: return

  public java.lang.String toString();
    Code:
       0: aload_0
       1: invokespecial #77                 // Method com/google/common/collect/AbstractMultiset.toString:()Ljava/lang/String;
       4: areturn

  public int hashCode();
    Code:
       0: aload_0
       1: invokespecial #78                 // Method com/google/common/collect/AbstractMultiset.hashCode:()I
       4: ireturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #79                 // Method com/google/common/collect/AbstractMultiset.equals:(Ljava/lang/Object;)Z
       5: ireturn

  public java.util.Set elementSet();
    Code:
       0: aload_0
       1: invokespecial #80                 // Method com/google/common/collect/AbstractMultiset.elementSet:()Ljava/util/Set;
       4: areturn

  public boolean retainAll(java.util.Collection);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #81                 // Method com/google/common/collect/AbstractMultiset.retainAll:(Ljava/util/Collection;)Z
       5: ireturn

  public boolean removeAll(java.util.Collection);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #82                 // Method com/google/common/collect/AbstractMultiset.removeAll:(Ljava/util/Collection;)Z
       5: ireturn

  public boolean addAll(java.util.Collection);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #83                 // Method com/google/common/collect/AbstractMultiset.addAll:(Ljava/util/Collection;)Z
       5: ireturn

  public boolean remove(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #84                 // Method com/google/common/collect/AbstractMultiset.remove:(Ljava/lang/Object;)Z
       5: ireturn

  public boolean add(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #85                 // Method com/google/common/collect/AbstractMultiset.add:(Ljava/lang/Object;)Z
       5: ireturn

  public java.util.Iterator iterator();
    Code:
       0: aload_0
       1: invokespecial #86                 // Method com/google/common/collect/AbstractMultiset.iterator:()Ljava/util/Iterator;
       4: areturn

  public boolean contains(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #87                 // Method com/google/common/collect/AbstractMultiset.contains:(Ljava/lang/Object;)Z
       5: ireturn

  static java.util.concurrent.ConcurrentMap access$100(com.google.common.collect.ConcurrentHashMultiset);
    Code:
       0: aload_0
       1: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
       4: areturn
}
