Compiled from "Config.java"
public interface com.typesafe.config.Config extends com.typesafe.config.ConfigMergeable {
  public abstract com.typesafe.config.ConfigObject root();

  public abstract com.typesafe.config.ConfigOrigin origin();

  public abstract com.typesafe.config.Config withFallback(com.typesafe.config.ConfigMergeable);

  public abstract com.typesafe.config.Config resolve();

  public abstract com.typesafe.config.Config resolve(com.typesafe.config.ConfigResolveOptions);

  public abstract boolean isResolved();

  public abstract com.typesafe.config.Config resolveWith(com.typesafe.config.Config);

  public abstract com.typesafe.config.Config resolveWith(com.typesafe.config.Config, com.typesafe.config.ConfigResolveOptions);

  public abstract void checkValid(com.typesafe.config.Config, java.lang.String...);

  public abstract boolean hasPath(java.lang.String);

  public abstract boolean hasPathOrNull(java.lang.String);

  public abstract boolean isEmpty();

  public abstract java.util.Set<java.util.Map$Entry<java.lang.String, com.typesafe.config.ConfigValue>> entrySet();

  public abstract boolean getIsNull(java.lang.String);

  public abstract boolean getBoolean(java.lang.String);

  public abstract java.lang.Number getNumber(java.lang.String);

  public abstract int getInt(java.lang.String);

  public abstract long getLong(java.lang.String);

  public abstract double getDouble(java.lang.String);

  public abstract java.lang.String getString(java.lang.String);

  public abstract com.typesafe.config.ConfigObject getObject(java.lang.String);

  public abstract com.typesafe.config.Config getConfig(java.lang.String);

  public abstract java.lang.Object getAnyRef(java.lang.String);

  public abstract com.typesafe.config.ConfigValue getValue(java.lang.String);

  public abstract java.lang.Long getBytes(java.lang.String);

  public abstract com.typesafe.config.ConfigMemorySize getMemorySize(java.lang.String);

  public abstract java.lang.Long getMilliseconds(java.lang.String);

  public abstract java.lang.Long getNanoseconds(java.lang.String);

  public abstract long getDuration(java.lang.String, java.util.concurrent.TimeUnit);

  public abstract java.time.Duration getDuration(java.lang.String);

  public abstract com.typesafe.config.ConfigList getList(java.lang.String);

  public abstract java.util.List<java.lang.Boolean> getBooleanList(java.lang.String);

  public abstract java.util.List<java.lang.Number> getNumberList(java.lang.String);

  public abstract java.util.List<java.lang.Integer> getIntList(java.lang.String);

  public abstract java.util.List<java.lang.Long> getLongList(java.lang.String);

  public abstract java.util.List<java.lang.Double> getDoubleList(java.lang.String);

  public abstract java.util.List<java.lang.String> getStringList(java.lang.String);

  public abstract java.util.List<? extends com.typesafe.config.ConfigObject> getObjectList(java.lang.String);

  public abstract java.util.List<? extends com.typesafe.config.Config> getConfigList(java.lang.String);

  public abstract java.util.List<? extends java.lang.Object> getAnyRefList(java.lang.String);

  public abstract java.util.List<java.lang.Long> getBytesList(java.lang.String);

  public abstract java.util.List<com.typesafe.config.ConfigMemorySize> getMemorySizeList(java.lang.String);

  public abstract java.util.List<java.lang.Long> getMillisecondsList(java.lang.String);

  public abstract java.util.List<java.lang.Long> getNanosecondsList(java.lang.String);

  public abstract java.util.List<java.lang.Long> getDurationList(java.lang.String, java.util.concurrent.TimeUnit);

  public abstract java.util.List<java.time.Duration> getDurationList(java.lang.String);

  public abstract com.typesafe.config.Config withOnlyPath(java.lang.String);

  public abstract com.typesafe.config.Config withoutPath(java.lang.String);

  public abstract com.typesafe.config.Config atPath(java.lang.String);

  public abstract com.typesafe.config.Config atKey(java.lang.String);

  public abstract com.typesafe.config.Config withValue(java.lang.String, com.typesafe.config.ConfigValue);
}
