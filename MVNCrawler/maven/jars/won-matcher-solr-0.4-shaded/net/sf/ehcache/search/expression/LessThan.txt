Compiled from "LessThan.java"
public class net.sf.ehcache.search.expression.LessThan extends net.sf.ehcache.search.expression.ComparableValue {
  private final java.lang.Comparable comparableValue;

  public net.sf.ehcache.search.expression.LessThan(java.lang.String, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #1                  // Method net/sf/ehcache/search/expression/ComparableValue."<init>":(Ljava/lang/String;Ljava/lang/Object;)V
       6: aload_0
       7: aload_2
       8: checkcast     #2                  // class java/lang/Comparable
      11: putfield      #3                  // Field comparableValue:Ljava/lang/Comparable;
      14: return

  protected boolean executeComparable(java.lang.Comparable);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #3                  // Field comparableValue:Ljava/lang/Comparable;
       5: invokeinterface #4,  2            // InterfaceMethod java/lang/Comparable.compareTo:(Ljava/lang/Object;)I
      10: ifge          17
      13: iconst_1
      14: goto          18
      17: iconst_0
      18: ireturn

  protected boolean executeComparableString(java.lang.Comparable);
    Code:
       0: aload_1
       1: invokevirtual #5                  // Method java/lang/Object.toString:()Ljava/lang/String;
       4: aload_0
       5: getfield      #3                  // Field comparableValue:Ljava/lang/Comparable;
       8: invokevirtual #5                  // Method java/lang/Object.toString:()Ljava/lang/String;
      11: invokestatic  #6                  // Method luceneStringCompare:(Ljava/lang/String;Ljava/lang/String;)I
      14: ifge          21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: ireturn

  public java.lang.Comparable getComparableValue();
    Code:
       0: aload_0
       1: getfield      #3                  // Field comparableValue:Ljava/lang/Comparable;
       4: areturn
}
