Compiled from "ReadWriteLockSync.java"
public class net.sf.ehcache.concurrent.ReadWriteLockSync implements net.sf.ehcache.concurrent.Sync {
  private final java.util.concurrent.locks.ReentrantReadWriteLock rrwl;

  public net.sf.ehcache.concurrent.ReadWriteLockSync();
    Code:
       0: aload_0
       1: new           #1                  // class java/util/concurrent/locks/ReentrantReadWriteLock
       4: dup
       5: invokespecial #2                  // Method java/util/concurrent/locks/ReentrantReadWriteLock."<init>":()V
       8: invokespecial #3                  // Method "<init>":(Ljava/util/concurrent/locks/ReentrantReadWriteLock;)V
      11: return

  public net.sf.ehcache.concurrent.ReadWriteLockSync(java.util.concurrent.locks.ReentrantReadWriteLock);
    Code:
       0: aload_0
       1: invokespecial #4                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #5                  // Field rrwl:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
       9: return

  public void lock(net.sf.ehcache.concurrent.LockType);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #6                  // Method getLock:(Lnet/sf/ehcache/concurrent/LockType;)Ljava/util/concurrent/locks/Lock;
       5: invokeinterface #7,  1            // InterfaceMethod java/util/concurrent/locks/Lock.lock:()V
      10: return

  public boolean tryLock(net.sf.ehcache.concurrent.LockType, long) throws java.lang.InterruptedException;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #6                  // Method getLock:(Lnet/sf/ehcache/concurrent/LockType;)Ljava/util/concurrent/locks/Lock;
       5: lload_2
       6: getstatic     #8                  // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
       9: invokeinterface #9,  4            // InterfaceMethod java/util/concurrent/locks/Lock.tryLock:(JLjava/util/concurrent/TimeUnit;)Z
      14: ireturn

  public void unlock(net.sf.ehcache.concurrent.LockType);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #6                  // Method getLock:(Lnet/sf/ehcache/concurrent/LockType;)Ljava/util/concurrent/locks/Lock;
       5: invokeinterface #10,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      10: return

  private java.util.concurrent.locks.Lock getLock(net.sf.ehcache.concurrent.LockType);
    Code:
       0: getstatic     #11                 // Field net/sf/ehcache/concurrent/ReadWriteLockSync$1.$SwitchMap$net$sf$ehcache$concurrent$LockType:[I
       3: aload_1
       4: invokevirtual #12                 // Method net/sf/ehcache/concurrent/LockType.ordinal:()I
       7: iaload
       8: lookupswitch  { // 2
                     1: 36
                     2: 44
               default: 52
          }
      36: aload_0
      37: getfield      #5                  // Field rrwl:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
      40: invokevirtual #13                 // Method java/util/concurrent/locks/ReentrantReadWriteLock.readLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;
      43: areturn
      44: aload_0
      45: getfield      #5                  // Field rrwl:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
      48: invokevirtual #14                 // Method java/util/concurrent/locks/ReentrantReadWriteLock.writeLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;
      51: areturn
      52: new           #15                 // class java/lang/IllegalArgumentException
      55: dup
      56: ldc           #16                 // String We don\'t support any other lock type than READ or WRITE!
      58: invokespecial #17                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      61: athrow

  public java.util.concurrent.locks.ReadWriteLock getReadWriteLock();
    Code:
       0: aload_0
       1: getfield      #5                  // Field rrwl:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
       4: areturn

  public boolean isHeldByCurrentThread(net.sf.ehcache.concurrent.LockType);
    Code:
       0: getstatic     #11                 // Field net/sf/ehcache/concurrent/ReadWriteLockSync$1.$SwitchMap$net$sf$ehcache$concurrent$LockType:[I
       3: aload_1
       4: invokevirtual #12                 // Method net/sf/ehcache/concurrent/LockType.ordinal:()I
       7: iaload
       8: lookupswitch  { // 2
                     1: 36
                     2: 46
               default: 54
          }
      36: new           #18                 // class java/lang/UnsupportedOperationException
      39: dup
      40: ldc           #19                 // String Querying of read lock is not supported.
      42: invokespecial #20                 // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
      45: athrow
      46: aload_0
      47: getfield      #5                  // Field rrwl:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
      50: invokevirtual #21                 // Method java/util/concurrent/locks/ReentrantReadWriteLock.isWriteLockedByCurrentThread:()Z
      53: ireturn
      54: new           #15                 // class java/lang/IllegalArgumentException
      57: dup
      58: ldc           #16                 // String We don\'t support any other lock type than READ or WRITE!
      60: invokespecial #17                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      63: athrow
}
