Compiled from "NonstopThreadPool.java"
public class net.sf.ehcache.constructs.nonstop.NonstopThreadPool {
  private static final long POLL_TIME_MILLIS;

  private static final long NUM_OF_POLLS_BEFORE_CHECK_THREADS_ALIVE;

  private final java.util.concurrent.ThreadFactory threadFactory;

  private final java.util.Map<java.lang.Thread, net.sf.ehcache.constructs.nonstop.NonstopThreadPool$WorkerThreadLocal> workers;

  private final java.lang.Object workersLock;

  private final java.util.concurrent.atomic.AtomicReference<net.sf.ehcache.constructs.nonstop.NonstopThreadPool$State> state;

  private final java.lang.ref.ReferenceQueue<java.lang.Thread> gcedThreadsReferenceQueue;

  private final net.sf.ehcache.util.lang.VicariousThreadLocal<net.sf.ehcache.constructs.nonstop.NonstopThreadPool$WorkerThreadLocal> workerThreadLocal;

  public net.sf.ehcache.constructs.nonstop.NonstopThreadPool(java.util.concurrent.ThreadFactory);
    Code:
       0: aload_0
       1: invokespecial #7                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #8                  // class java/util/WeakHashMap
       8: dup
       9: invokespecial #9                  // Method java/util/WeakHashMap."<init>":()V
      12: putfield      #1                  // Field workers:Ljava/util/Map;
      15: aload_0
      16: new           #10                 // class java/lang/Object
      19: dup
      20: invokespecial #7                  // Method java/lang/Object."<init>":()V
      23: putfield      #6                  // Field workersLock:Ljava/lang/Object;
      26: aload_0
      27: new           #11                 // class java/util/concurrent/atomic/AtomicReference
      30: dup
      31: getstatic     #12                 // Field net/sf/ehcache/constructs/nonstop/NonstopThreadPool$State.RUNNING:Lnet/sf/ehcache/constructs/nonstop/NonstopThreadPool$State;
      34: invokespecial #13                 // Method java/util/concurrent/atomic/AtomicReference."<init>":(Ljava/lang/Object;)V
      37: putfield      #5                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      40: aload_0
      41: new           #14                 // class java/lang/ref/ReferenceQueue
      44: dup
      45: invokespecial #15                 // Method java/lang/ref/ReferenceQueue."<init>":()V
      48: putfield      #2                  // Field gcedThreadsReferenceQueue:Ljava/lang/ref/ReferenceQueue;
      51: aload_0
      52: new           #16                 // class net/sf/ehcache/constructs/nonstop/NonstopThreadPool$1
      55: dup
      56: aload_0
      57: invokespecial #17                 // Method net/sf/ehcache/constructs/nonstop/NonstopThreadPool$1."<init>":(Lnet/sf/ehcache/constructs/nonstop/NonstopThreadPool;)V
      60: putfield      #18                 // Field workerThreadLocal:Lnet/sf/ehcache/util/lang/VicariousThreadLocal;
      63: aload_0
      64: aload_1
      65: putfield      #3                  // Field threadFactory:Ljava/util/concurrent/ThreadFactory;
      68: aload_0
      69: invokespecial #19                 // Method startReaperThread:()V
      72: return

  private void startReaperThread();
    Code:
       0: new           #20                 // class java/lang/Thread
       3: dup
       4: new           #21                 // class net/sf/ehcache/constructs/nonstop/NonstopThreadPool$ReaperThread
       7: dup
       8: aload_0
       9: aconst_null
      10: invokespecial #22                 // Method net/sf/ehcache/constructs/nonstop/NonstopThreadPool$ReaperThread."<init>":(Lnet/sf/ehcache/constructs/nonstop/NonstopThreadPool;Lnet/sf/ehcache/constructs/nonstop/NonstopThreadPool$1;)V
      13: ldc           #23                 // String non stop reaper thread
      15: invokespecial #24                 // Method java/lang/Thread."<init>":(Ljava/lang/Runnable;Ljava/lang/String;)V
      18: astore_1
      19: aload_1
      20: iconst_1
      21: invokevirtual #25                 // Method java/lang/Thread.setDaemon:(Z)V
      24: aload_1
      25: invokevirtual #26                 // Method java/lang/Thread.start:()V
      28: return

  private void rejectExecutionAfterShutdown();
    Code:
       0: new           #27                 // class java/util/concurrent/RejectedExecutionException
       3: dup
       4: ldc           #28                 // String The thread pool has already shut down.
       6: invokespecial #29                 // Method java/util/concurrent/RejectedExecutionException."<init>":(Ljava/lang/String;)V
       9: athrow

  public <T> java.util.concurrent.Future<T> submit(java.util.concurrent.Callable<T>);
    Code:
       0: aload_1
       1: ifnonnull     14
       4: new           #30                 // class java/lang/NullPointerException
       7: dup
       8: ldc           #31                 // String Task cannot be null
      10: invokespecial #32                 // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: aload_0
      15: getfield      #18                 // Field workerThreadLocal:Lnet/sf/ehcache/util/lang/VicariousThreadLocal;
      18: invokevirtual #33                 // Method net/sf/ehcache/util/lang/VicariousThreadLocal.get:()Ljava/lang/Object;
      21: checkcast     #34                 // class net/sf/ehcache/constructs/nonstop/NonstopThreadPool$WorkerThreadLocal
      24: aload_1
      25: invokevirtual #35                 // Method net/sf/ehcache/constructs/nonstop/NonstopThreadPool$WorkerThreadLocal.submit:(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;
      28: areturn

  public void shutdownNow();
    Code:
       0: aload_0
       1: getfield      #5                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       4: getstatic     #36                 // Field net/sf/ehcache/constructs/nonstop/NonstopThreadPool$State.SHUTDOWN:Lnet/sf/ehcache/constructs/nonstop/NonstopThreadPool$State;
       7: invokevirtual #37                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
      10: aload_0
      11: getfield      #6                  // Field workersLock:Ljava/lang/Object;
      14: dup
      15: astore_1
      16: monitorenter
      17: aload_0
      18: getfield      #1                  // Field workers:Ljava/util/Map;
      21: invokeinterface #38,  1           // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
      26: invokeinterface #39,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      31: astore_2
      32: aload_2
      33: invokeinterface #40,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      38: ifeq          58
      41: aload_2
      42: invokeinterface #41,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      47: checkcast     #34                 // class net/sf/ehcache/constructs/nonstop/NonstopThreadPool$WorkerThreadLocal
      50: astore_3
      51: aload_3
      52: invokevirtual #42                 // Method net/sf/ehcache/constructs/nonstop/NonstopThreadPool$WorkerThreadLocal.shutdownNow:()V
      55: goto          32
      58: aload_1
      59: monitorexit
      60: goto          70
      63: astore        4
      65: aload_1
      66: monitorexit
      67: aload         4
      69: athrow
      70: return
    Exception table:
       from    to  target type
          17    60    63   any
          63    67    63   any

  public java.lang.StackTraceElement[] getNonstopThreadStackTrace();
    Code:
       0: aload_0
       1: getfield      #18                 // Field workerThreadLocal:Lnet/sf/ehcache/util/lang/VicariousThreadLocal;
       4: invokevirtual #33                 // Method net/sf/ehcache/util/lang/VicariousThreadLocal.get:()Ljava/lang/Object;
       7: checkcast     #34                 // class net/sf/ehcache/constructs/nonstop/NonstopThreadPool$WorkerThreadLocal
      10: invokevirtual #43                 // Method net/sf/ehcache/constructs/nonstop/NonstopThreadPool$WorkerThreadLocal.getStackTrace:()[Ljava/lang/StackTraceElement;
      13: areturn

  static java.lang.Object access$000(net.sf.ehcache.constructs.nonstop.NonstopThreadPool);
    Code:
       0: aload_0
       1: getfield      #6                  // Field workersLock:Ljava/lang/Object;
       4: areturn

  static java.util.concurrent.atomic.AtomicReference access$100(net.sf.ehcache.constructs.nonstop.NonstopThreadPool);
    Code:
       0: aload_0
       1: getfield      #5                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       4: areturn

  static void access$200(net.sf.ehcache.constructs.nonstop.NonstopThreadPool);
    Code:
       0: aload_0
       1: invokespecial #4                  // Method rejectExecutionAfterShutdown:()V
       4: return

  static java.util.concurrent.ThreadFactory access$300(net.sf.ehcache.constructs.nonstop.NonstopThreadPool);
    Code:
       0: aload_0
       1: getfield      #3                  // Field threadFactory:Ljava/util/concurrent/ThreadFactory;
       4: areturn

  static java.lang.ref.ReferenceQueue access$400(net.sf.ehcache.constructs.nonstop.NonstopThreadPool);
    Code:
       0: aload_0
       1: getfield      #2                  // Field gcedThreadsReferenceQueue:Ljava/lang/ref/ReferenceQueue;
       4: areturn

  static java.util.Map access$500(net.sf.ehcache.constructs.nonstop.NonstopThreadPool);
    Code:
       0: aload_0
       1: getfield      #1                  // Field workers:Ljava/util/Map;
       4: areturn
}
