Compiled from "CacheConfiguration.java"
public class net.sf.ehcache.config.CacheConfiguration implements java.lang.Cloneable {
  public static final boolean DEFAULT_CLEAR_ON_FLUSH;

  public static final long DEFAULT_EXPIRY_THREAD_INTERVAL_SECONDS;

  public static final int DEFAULT_SPOOL_BUFFER_SIZE;

  public static final int DEFAULT_DISK_ACCESS_STRIPES;

  public static final boolean DEFAULT_LOGGING;

  public static final net.sf.ehcache.store.MemoryStoreEvictionPolicy DEFAULT_MEMORY_STORE_EVICTION_POLICY;

  public static final net.sf.ehcache.config.CacheWriterConfiguration DEFAULT_CACHE_WRITER_CONFIGURATION;

  public static final boolean DEFAULT_COPY_ON_READ;

  public static final boolean DEFAULT_COPY_ON_WRITE;

  public static final long DEFAULT_TTL;

  public static final long DEFAULT_TTI;

  public static final int DEFAULT_MAX_ELEMENTS_ON_DISK;

  public static final net.sf.ehcache.config.CacheConfiguration$TransactionalMode DEFAULT_TRANSACTIONAL_MODE;

  public static final boolean DEFAULT_STATISTICS;

  public static final boolean DEFAULT_DISK_PERSISTENT;

  public static final net.sf.ehcache.config.CopyStrategyConfiguration DEFAULT_COPY_STRATEGY_CONFIGURATION;

  public static final long DEFAULT_MAX_BYTES_ON_HEAP;

  public static final long DEFAULT_MAX_BYTES_OFF_HEAP;

  public static final long DEFAULT_MAX_BYTES_ON_DISK;

  public static final boolean DEFAULT_ETERNAL_VALUE;

  private static final org.slf4j.Logger LOG;

  private static final int HUNDRED_PERCENT;

  private static final int MINIMUM_RECOMMENDED_IN_MEMORY;

  protected volatile java.lang.String name;

  protected volatile long cacheLoaderTimeoutMillis;

  protected volatile java.lang.Integer maxEntriesLocalHeap;

  protected volatile int maxElementsOnDisk;

  protected volatile net.sf.ehcache.store.MemoryStoreEvictionPolicy memoryStoreEvictionPolicy;

  protected volatile boolean clearOnFlush;

  protected volatile boolean eternal;

  protected volatile long timeToIdleSeconds;

  protected volatile long timeToLiveSeconds;

  protected volatile java.lang.Boolean overflowToDisk;

  protected volatile java.lang.Boolean diskPersistent;

  protected volatile int diskSpoolBufferSizeMB;

  protected volatile int diskAccessStripes;

  protected volatile long diskExpiryThreadIntervalSeconds;

  protected volatile boolean logging;

  protected volatile java.lang.Boolean overflowToOffHeap;

  protected volatile java.util.List<net.sf.ehcache.config.CacheConfiguration$CacheEventListenerFactoryConfiguration> cacheEventListenerConfigurations;

  protected volatile java.util.List<net.sf.ehcache.config.CacheConfiguration$CacheExtensionFactoryConfiguration> cacheExtensionConfigurations;

  protected net.sf.ehcache.config.CacheConfiguration$BootstrapCacheLoaderFactoryConfiguration bootstrapCacheLoaderFactoryConfiguration;

  protected net.sf.ehcache.config.CacheConfiguration$CacheExceptionHandlerFactoryConfiguration cacheExceptionHandlerFactoryConfiguration;

  protected net.sf.ehcache.config.TerracottaConfiguration terracottaConfiguration;

  protected volatile net.sf.ehcache.config.PinningConfiguration pinningConfiguration;

  protected net.sf.ehcache.config.CacheWriterConfiguration cacheWriterConfiguration;

  protected volatile java.util.List<net.sf.ehcache.config.CacheConfiguration$CacheLoaderFactoryConfiguration> cacheLoaderConfigurations;

  protected volatile java.util.List<net.sf.ehcache.config.CacheConfiguration$CacheDecoratorFactoryConfiguration> cacheDecoratorConfigurations;

  protected volatile java.util.Set<net.sf.ehcache.config.CacheConfigurationListener> listeners;

  private volatile java.util.Set<net.sf.ehcache.config.DynamicSearchListener> dynamicSearchListeners;

  private net.sf.ehcache.search.attribute.DynamicAttributesExtractor flexIndexer;

  private volatile boolean frozen;

  private volatile net.sf.ehcache.config.CacheConfiguration$TransactionalMode transactionalMode;

  private volatile boolean statistics;

  private volatile net.sf.ehcache.config.CopyStrategyConfiguration copyStrategyConfiguration;

  private volatile net.sf.ehcache.config.SizeOfPolicyConfiguration sizeOfPolicyConfiguration;

  private volatile net.sf.ehcache.config.PersistenceConfiguration persistenceConfiguration;

  private volatile net.sf.ehcache.config.ElementValueComparatorConfiguration elementValueComparatorConfiguration;

  private volatile java.lang.Boolean copyOnRead;

  private volatile java.lang.Boolean copyOnWrite;

  private volatile boolean conflictingEternalValuesWarningLogged;

  private volatile net.sf.ehcache.config.Searchable searchable;

  private java.lang.String maxBytesLocalHeapInput;

  private java.lang.String maxBytesLocalOffHeapInput;

  private java.lang.String maxBytesLocalDiskInput;

  private java.lang.Long maxBytesLocalHeap;

  private java.lang.Long maxBytesLocalOffHeap;

  private java.lang.Long maxBytesLocalDisk;

  private java.lang.Integer maxBytesLocalHeapPercentage;

  private java.lang.Integer maxBytesLocalOffHeapPercentage;

  private java.lang.Integer maxBytesLocalDiskPercentage;

  private net.sf.ehcache.config.CacheConfiguration$PoolUsage onHeapPoolUsage;

  private net.sf.ehcache.config.CacheConfiguration$PoolUsage offHeapPoolUsage;

  private net.sf.ehcache.config.CacheConfiguration$PoolUsage onDiskPoolUsage;

  private volatile boolean maxEntriesLocalDiskExplicitlySet;

  private volatile boolean maxBytesLocalDiskExplicitlySet;

  private volatile boolean maxBytesLocalOffHeapExplicitlySet;

  public net.sf.ehcache.config.CacheConfiguration();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field maxElementsOnDisk:I
       9: aload_0
      10: getstatic     #3                  // Field DEFAULT_MEMORY_STORE_EVICTION_POLICY:Lnet/sf/ehcache/store/MemoryStoreEvictionPolicy;
      13: putfield      #4                  // Field memoryStoreEvictionPolicy:Lnet/sf/ehcache/store/MemoryStoreEvictionPolicy;
      16: aload_0
      17: iconst_1
      18: putfield      #5                  // Field clearOnFlush:Z
      21: aload_0
      22: iconst_0
      23: putfield      #6                  // Field eternal:Z
      26: aload_0
      27: lconst_0
      28: putfield      #7                  // Field timeToIdleSeconds:J
      31: aload_0
      32: lconst_0
      33: putfield      #8                  // Field timeToLiveSeconds:J
      36: aload_0
      37: bipush        30
      39: putfield      #9                  // Field diskSpoolBufferSizeMB:I
      42: aload_0
      43: iconst_1
      44: putfield      #10                 // Field diskAccessStripes:I
      47: aload_0
      48: ldc2_w        #11                 // long 120l
      51: putfield      #13                 // Field diskExpiryThreadIntervalSeconds:J
      54: aload_0
      55: iconst_0
      56: putfield      #14                 // Field logging:Z
      59: aload_0
      60: new           #15                 // class java/util/ArrayList
      63: dup
      64: invokespecial #16                 // Method java/util/ArrayList."<init>":()V
      67: putfield      #17                 // Field cacheEventListenerConfigurations:Ljava/util/List;
      70: aload_0
      71: new           #15                 // class java/util/ArrayList
      74: dup
      75: invokespecial #16                 // Method java/util/ArrayList."<init>":()V
      78: putfield      #18                 // Field cacheExtensionConfigurations:Ljava/util/List;
      81: aload_0
      82: getstatic     #19                 // Field DEFAULT_CACHE_WRITER_CONFIGURATION:Lnet/sf/ehcache/config/CacheWriterConfiguration;
      85: putfield      #20                 // Field cacheWriterConfiguration:Lnet/sf/ehcache/config/CacheWriterConfiguration;
      88: aload_0
      89: new           #15                 // class java/util/ArrayList
      92: dup
      93: invokespecial #16                 // Method java/util/ArrayList."<init>":()V
      96: putfield      #21                 // Field cacheLoaderConfigurations:Ljava/util/List;
      99: aload_0
     100: new           #15                 // class java/util/ArrayList
     103: dup
     104: invokespecial #16                 // Method java/util/ArrayList."<init>":()V
     107: putfield      #22                 // Field cacheDecoratorConfigurations:Ljava/util/List;
     110: aload_0
     111: new           #23                 // class java/util/concurrent/CopyOnWriteArraySet
     114: dup
     115: invokespecial #24                 // Method java/util/concurrent/CopyOnWriteArraySet."<init>":()V
     118: putfield      #25                 // Field listeners:Ljava/util/Set;
     121: aload_0
     122: new           #23                 // class java/util/concurrent/CopyOnWriteArraySet
     125: dup
     126: invokespecial #24                 // Method java/util/concurrent/CopyOnWriteArraySet."<init>":()V
     129: putfield      #26                 // Field dynamicSearchListeners:Ljava/util/Set;
     132: aload_0
     133: iconst_0
     134: putfield      #27                 // Field statistics:Z
     137: aload_0
     138: getstatic     #28                 // Field DEFAULT_COPY_STRATEGY_CONFIGURATION:Lnet/sf/ehcache/config/CopyStrategyConfiguration;
     141: invokevirtual #29                 // Method net/sf/ehcache/config/CopyStrategyConfiguration.copy:()Lnet/sf/ehcache/config/CopyStrategyConfiguration;
     144: putfield      #30                 // Field copyStrategyConfiguration:Lnet/sf/ehcache/config/CopyStrategyConfiguration;
     147: aload_0
     148: new           #31                 // class net/sf/ehcache/config/ElementValueComparatorConfiguration
     151: dup
     152: invokespecial #32                 // Method net/sf/ehcache/config/ElementValueComparatorConfiguration."<init>":()V
     155: putfield      #33                 // Field elementValueComparatorConfiguration:Lnet/sf/ehcache/config/ElementValueComparatorConfiguration;
     158: return

  public net.sf.ehcache.config.CacheConfiguration(java.lang.String, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field maxElementsOnDisk:I
       9: aload_0
      10: getstatic     #3                  // Field DEFAULT_MEMORY_STORE_EVICTION_POLICY:Lnet/sf/ehcache/store/MemoryStoreEvictionPolicy;
      13: putfield      #4                  // Field memoryStoreEvictionPolicy:Lnet/sf/ehcache/store/MemoryStoreEvictionPolicy;
      16: aload_0
      17: iconst_1
      18: putfield      #5                  // Field clearOnFlush:Z
      21: aload_0
      22: iconst_0
      23: putfield      #6                  // Field eternal:Z
      26: aload_0
      27: lconst_0
      28: putfield      #7                  // Field timeToIdleSeconds:J
      31: aload_0
      32: lconst_0
      33: putfield      #8                  // Field timeToLiveSeconds:J
      36: aload_0
      37: bipush        30
      39: putfield      #9                  // Field diskSpoolBufferSizeMB:I
      42: aload_0
      43: iconst_1
      44: putfield      #10                 // Field diskAccessStripes:I
      47: aload_0
      48: ldc2_w        #11                 // long 120l
      51: putfield      #13                 // Field diskExpiryThreadIntervalSeconds:J
      54: aload_0
      55: iconst_0
      56: putfield      #14                 // Field logging:Z
      59: aload_0
      60: new           #15                 // class java/util/ArrayList
      63: dup
      64: invokespecial #16                 // Method java/util/ArrayList."<init>":()V
      67: putfield      #17                 // Field cacheEventListenerConfigurations:Ljava/util/List;
      70: aload_0
      71: new           #15                 // class java/util/ArrayList
      74: dup
      75: invokespecial #16                 // Method java/util/ArrayList."<init>":()V
      78: putfield      #18                 // Field cacheExtensionConfigurations:Ljava/util/List;
      81: aload_0
      82: getstatic     #19                 // Field DEFAULT_CACHE_WRITER_CONFIGURATION:Lnet/sf/ehcache/config/CacheWriterConfiguration;
      85: putfield      #20                 // Field cacheWriterConfiguration:Lnet/sf/ehcache/config/CacheWriterConfiguration;
      88: aload_0
      89: new           #15                 // class java/util/ArrayList
      92: dup
      93: invokespecial #16                 // Method java/util/ArrayList."<init>":()V
      96: putfield      #21                 // Field cacheLoaderConfigurations:Ljava/util/List;
      99: aload_0
     100: new           #15                 // class java/util/ArrayList
     103: dup
     104: invokespecial #16                 // Method java/util/ArrayList."<init>":()V
     107: putfield      #22                 // Field cacheDecoratorConfigurations:Ljava/util/List;
     110: aload_0
     111: new           #23                 // class java/util/concurrent/CopyOnWriteArraySet
     114: dup
     115: invokespecial #24                 // Method java/util/concurrent/CopyOnWriteArraySet."<init>":()V
     118: putfield      #25                 // Field listeners:Ljava/util/Set;
     121: aload_0
     122: new           #23                 // class java/util/concurrent/CopyOnWriteArraySet
     125: dup
     126: invokespecial #24                 // Method java/util/concurrent/CopyOnWriteArraySet."<init>":()V
     129: putfield      #26                 // Field dynamicSearchListeners:Ljava/util/Set;
     132: aload_0
     133: iconst_0
     134: putfield      #27                 // Field statistics:Z
     137: aload_0
     138: getstatic     #28                 // Field DEFAULT_COPY_STRATEGY_CONFIGURATION:Lnet/sf/ehcache/config/CopyStrategyConfiguration;
     141: invokevirtual #29                 // Method net/sf/ehcache/config/CopyStrategyConfiguration.copy:()Lnet/sf/ehcache/config/CopyStrategyConfiguration;
     144: putfield      #30                 // Field copyStrategyConfiguration:Lnet/sf/ehcache/config/CopyStrategyConfiguration;
     147: aload_0
     148: new           #31                 // class net/sf/ehcache/config/ElementValueComparatorConfiguration
     151: dup
     152: invokespecial #32                 // Method net/sf/ehcache/config/ElementValueComparatorConfiguration."<init>":()V
     155: putfield      #33                 // Field elementValueComparatorConfiguration:Lnet/sf/ehcache/config/ElementValueComparatorConfiguration;
     158: aload_0
     159: aload_1
     160: putfield      #34                 // Field name:Ljava/lang/String;
     163: aload_0
     164: iload_2
     165: invokestatic  #35                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     168: putfield      #36                 // Field maxEntriesLocalHeap:Ljava/lang/Integer;
     171: return

  public net.sf.ehcache.config.CacheConfiguration clone();
    Code:
       0: aload_0
       1: invokespecial #37                 // Method java/lang/Object.clone:()Ljava/lang/Object;
       4: checkcast     #38                 // class net/sf/ehcache/config/CacheConfiguration
       7: astore_1
       8: goto          21
      11: astore_2
      12: new           #40                 // class java/lang/RuntimeException
      15: dup
      16: aload_2
      17: invokespecial #41                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/Throwable;)V
      20: athrow
      21: aload_0
      22: aload_1
      23: invokespecial #42                 // Method cloneCacheEventListenerConfigurations:(Lnet/sf/ehcache/config/CacheConfiguration;)V
      26: aload_0
      27: aload_1
      28: invokespecial #43                 // Method cloneCacheExtensionConfigurations:(Lnet/sf/ehcache/config/CacheConfiguration;)V
      31: aload_0
      32: getfield      #44                 // Field bootstrapCacheLoaderFactoryConfiguration:Lnet/sf/ehcache/config/CacheConfiguration$BootstrapCacheLoaderFactoryConfiguration;
      35: ifnull        52
      38: aload_1
      39: aload_0
      40: getfield      #44                 // Field bootstrapCacheLoaderFactoryConfiguration:Lnet/sf/ehcache/config/CacheConfiguration$BootstrapCacheLoaderFactoryConfiguration;
      43: invokevirtual #45                 // Method net/sf/ehcache/config/CacheConfiguration$BootstrapCacheLoaderFactoryConfiguration.clone:()Lnet/sf/ehcache/config/FactoryConfiguration;
      46: checkcast     #46                 // class net/sf/ehcache/config/CacheConfiguration$BootstrapCacheLoaderFactoryConfiguration
      49: putfield      #44                 // Field bootstrapCacheLoaderFactoryConfiguration:Lnet/sf/ehcache/config/CacheConfiguration$BootstrapCacheLoaderFactoryConfiguration;
      52: aload_0
      53: getfield      #47                 // Field cacheExceptionHandlerFactoryConfiguration:Lnet/sf/ehcache/config/CacheConfiguration$CacheExceptionHandlerFactoryConfiguration;
      56: ifnull        73
      59: aload_1
      60: aload_0
      61: getfield      #47                 // Field cacheExceptionHandlerFactoryConfiguration:Lnet/sf/ehcache/config/CacheConfiguration$CacheExceptionHandlerFactoryConfiguration;
      64: invokevirtual #48                 // Method net/sf/ehcache/config/CacheConfiguration$CacheExceptionHandlerFactoryConfiguration.clone:()Lnet/sf/ehcache/config/FactoryConfiguration;
      67: checkcast     #49                 // class net/sf/ehcache/config/CacheConfiguration$CacheExceptionHandlerFactoryConfiguration
      70: putfield      #47                 // Field cacheExceptionHandlerFactoryConfiguration:Lnet/sf/ehcache/config/CacheConfiguration$CacheExceptionHandlerFactoryConfiguration;
      73: aload_0
      74: getfield      #50                 // Field terracottaConfiguration:Lnet/sf/ehcache/config/TerracottaConfiguration;
      77: ifnull        91
      80: aload_1
      81: aload_0
      82: getfield      #50                 // Field terracottaConfiguration:Lnet/sf/ehcache/config/TerracottaConfiguration;
      85: invokevirtual #51                 // Method net/sf/ehcache/config/TerracottaConfiguration.clone:()Lnet/sf/ehcache/config/TerracottaConfiguration;
      88: putfield      #50                 // Field terracottaConfiguration:Lnet/sf/ehcache/config/TerracottaConfiguration;
      91: aload_0
      92: getfield      #20                 // Field cacheWriterConfiguration:Lnet/sf/ehcache/config/CacheWriterConfiguration;
      95: ifnull        109
      98: aload_1
      99: aload_0
     100: getfield      #20                 // Field cacheWriterConfiguration:Lnet/sf/ehcache/config/CacheWriterConfiguration;
     103: invokevirtual #52                 // Method net/sf/ehcache/config/CacheWriterConfiguration.clone:()Lnet/sf/ehcache/config/CacheWriterConfiguration;
     106: putfield      #20                 // Field cacheWriterConfiguration:Lnet/sf/ehcache/config/CacheWriterConfiguration;
     109: aload_0
     110: aload_1
     111: invokespecial #53                 // Method cloneCacheLoaderConfigurations:(Lnet/sf/ehcache/config/CacheConfiguration;)V
     114: aload_0
     115: aload_1
     116: invokespecial #54                 // Method cloneCacheDecoratorConfigurations:(Lnet/sf/ehcache/config/CacheConfiguration;)V
     119: aload_1
     120: new           #23                 // class java/util/concurrent/CopyOnWriteArraySet
     123: dup
     124: invokespecial #24                 // Method java/util/concurrent/CopyOnWriteArraySet."<init>":()V
     127: putfield      #25                 // Field listeners:Ljava/util/Set;
     130: aload_1
     131: new           #23                 // class java/util/concurrent/CopyOnWriteArraySet
     134: dup
     135: invokespecial #24                 // Method java/util/concurrent/CopyOnWriteArraySet."<init>":()V
     138: putfield      #26                 // Field dynamicSearchListeners:Ljava/util/Set;
     141: aload_1
     142: areturn
    Exception table:
       from    to  target type
           0     8    11   Class java/lang/CloneNotSupportedException

  private void cloneCacheEventListenerConfigurations(net.sf.ehcache.config.CacheConfiguration);
    Code:
       0: aload_0
       1: getfield      #17                 // Field cacheEventListenerConfigurations:Ljava/util/List;
       4: invokeinterface #55,  1           // InterfaceMethod java/util/List.size:()I
       9: ifle          70
      12: new           #15                 // class java/util/ArrayList
      15: dup
      16: invokespecial #16                 // Method java/util/ArrayList."<init>":()V
      19: astore_2
      20: aload_0
      21: getfield      #17                 // Field cacheEventListenerConfigurations:Ljava/util/List;
      24: invokeinterface #56,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      29: astore_3
      30: aload_3
      31: invokeinterface #57,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      36: ifeq          65
      39: aload_3
      40: invokeinterface #58,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      45: checkcast     #59                 // class net/sf/ehcache/config/CacheConfiguration$CacheEventListenerFactoryConfiguration
      48: astore        4
      50: aload_2
      51: aload         4
      53: invokevirtual #60                 // Method net/sf/ehcache/config/CacheConfiguration$CacheEventListenerFactoryConfiguration.clone:()Lnet/sf/ehcache/config/FactoryConfiguration;
      56: invokeinterface #61,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      61: pop
      62: goto          30
      65: aload_1
      66: aload_2
      67: putfield      #17                 // Field cacheEventListenerConfigurations:Ljava/util/List;
      70: return

  private void cloneCacheExtensionConfigurations(net.sf.ehcache.config.CacheConfiguration);
    Code:
       0: aload_0
       1: getfield      #18                 // Field cacheExtensionConfigurations:Ljava/util/List;
       4: invokeinterface #55,  1           // InterfaceMethod java/util/List.size:()I
       9: ifle          70
      12: new           #15                 // class java/util/ArrayList
      15: dup
      16: invokespecial #16                 // Method java/util/ArrayList."<init>":()V
      19: astore_2
      20: aload_0
      21: getfield      #18                 // Field cacheExtensionConfigurations:Ljava/util/List;
      24: invokeinterface #56,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      29: astore_3
      30: aload_3
      31: invokeinterface #57,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      36: ifeq          65
      39: aload_3
      40: invokeinterface #58,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      45: checkcast     #62                 // class net/sf/ehcache/config/CacheConfiguration$CacheExtensionFactoryConfiguration
      48: astore        4
      50: aload_2
      51: aload         4
      53: invokevirtual #63                 // Method net/sf/ehcache/config/CacheConfiguration$CacheExtensionFactoryConfiguration.clone:()Lnet/sf/ehcache/config/FactoryConfiguration;
      56: invokeinterface #61,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      61: pop
      62: goto          30
      65: aload_1
      66: aload_2
      67: putfield      #18                 // Field cacheExtensionConfigurations:Ljava/util/List;
      70: return

  private void cloneCacheLoaderConfigurations(net.sf.ehcache.config.CacheConfiguration);
    Code:
       0: aload_0
       1: getfield      #21                 // Field cacheLoaderConfigurations:Ljava/util/List;
       4: invokeinterface #55,  1           // InterfaceMethod java/util/List.size:()I
       9: ifle          70
      12: new           #15                 // class java/util/ArrayList
      15: dup
      16: invokespecial #16                 // Method java/util/ArrayList."<init>":()V
      19: astore_2
      20: aload_0
      21: getfield      #21                 // Field cacheLoaderConfigurations:Ljava/util/List;
      24: invokeinterface #56,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      29: astore_3
      30: aload_3
      31: invokeinterface #57,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      36: ifeq          65
      39: aload_3
      40: invokeinterface #58,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      45: checkcast     #64                 // class net/sf/ehcache/config/CacheConfiguration$CacheLoaderFactoryConfiguration
      48: astore        4
      50: aload_2
      51: aload         4
      53: invokevirtual #65                 // Method net/sf/ehcache/config/CacheConfiguration$CacheLoaderFactoryConfiguration.clone:()Lnet/sf/ehcache/config/FactoryConfiguration;
      56: invokeinterface #61,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      61: pop
      62: goto          30
      65: aload_1
      66: aload_2
      67: putfield      #21                 // Field cacheLoaderConfigurations:Ljava/util/List;
      70: return

  private void cloneCacheDecoratorConfigurations(net.sf.ehcache.config.CacheConfiguration);
    Code:
       0: aload_0
       1: getfield      #22                 // Field cacheDecoratorConfigurations:Ljava/util/List;
       4: invokeinterface #55,  1           // InterfaceMethod java/util/List.size:()I
       9: ifle          70
      12: new           #15                 // class java/util/ArrayList
      15: dup
      16: invokespecial #16                 // Method java/util/ArrayList."<init>":()V
      19: astore_2
      20: aload_0
      21: getfield      #22                 // Field cacheDecoratorConfigurations:Ljava/util/List;
      24: invokeinterface #56,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      29: astore_3
      30: aload_3
      31: invokeinterface #57,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      36: ifeq          65
      39: aload_3
      40: invokeinterface #58,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      45: checkcast     #66                 // class net/sf/ehcache/config/CacheConfiguration$CacheDecoratorFactoryConfiguration
      48: astore        4
      50: aload_2
      51: aload         4
      53: invokevirtual #67                 // Method net/sf/ehcache/config/CacheConfiguration$CacheDecoratorFactoryConfiguration.clone:()Lnet/sf/ehcache/config/FactoryConfiguration;
      56: invokeinterface #61,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      61: pop
      62: goto          30
      65: aload_1
      66: aload_2
      67: putfield      #22                 // Field cacheDecoratorConfigurations:Ljava/util/List;
      70: return

  private void assertArgumentNotNull(java.lang.String, java.lang.Object);
    Code:
       0: aload_2
       1: ifnonnull     31
       4: new           #68                 // class java/lang/IllegalArgumentException
       7: dup
       8: new           #69                 // class java/lang/StringBuilder
      11: dup
      12: invokespecial #70                 // Method java/lang/StringBuilder."<init>":()V
      15: aload_1
      16: invokevirtual #71                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      19: ldc           #72                 // String  cannot be null
      21: invokevirtual #71                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: invokevirtual #73                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      27: invokespecial #74                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      30: athrow
      31: return

  public final void setName(java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #75                 // Method checkDynamicChange:()V
       4: aload_0
       5: ldc           #76                 // String Cache name
       7: aload_1
       8: invokespecial #77                 // Method assertArgumentNotNull:(Ljava/lang/String;Ljava/lang/Object;)V
      11: aload_0
      12: aload_1
      13: putfield      #34                 // Field name:Ljava/lang/String;
      16: return

  public final net.sf.ehcache.config.CacheConfiguration name(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #78                 // Method setName:(Ljava/lang/String;)V
       5: aload_0
       6: areturn

  public final void setLogging(boolean);
    Code:
       0: aload_0
       1: invokespecial #75                 // Method checkDynamicChange:()V
       4: aload_0
       5: getfield      #14                 // Field logging:Z
       8: istore_2
       9: aload_0
      10: iload_1
      11: putfield      #14                 // Field logging:Z
      14: aload_0
      15: iload_2
      16: iload_1
      17: invokespecial #79                 // Method fireLoggingChanged:(ZZ)V
      20: return

  public final void setOverflowToOffHeap(boolean);
    Code:
       0: aload_0
       1: invokespecial #75                 // Method checkDynamicChange:()V
       4: aload_0
       5: iload_1
       6: invokestatic  #80                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
       9: putfield      #81                 // Field overflowToOffHeap:Ljava/lang/Boolean;
      12: return

  public net.sf.ehcache.config.CacheConfiguration overflowToOffHeap(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #82                 // Method setOverflowToOffHeap:(Z)V
       5: aload_0
       6: areturn

  public void addSizeOfPolicy(net.sf.ehcache.config.SizeOfPolicyConfiguration);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #83                 // Field sizeOfPolicyConfiguration:Lnet/sf/ehcache/config/SizeOfPolicyConfiguration;
       5: return

  public net.sf.ehcache.config.CacheConfiguration sizeOfPolicy(net.sf.ehcache.config.SizeOfPolicyConfiguration);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #84                 // Method addSizeOfPolicy:(Lnet/sf/ehcache/config/SizeOfPolicyConfiguration;)V
       5: aload_0
       6: areturn

  public void addPersistence(net.sf.ehcache.config.PersistenceConfiguration);
    Code:
       0: aload_0
       1: getfield      #85                 // Field diskPersistent:Ljava/lang/Boolean;
       4: ifnull        17
       7: new           #86                 // class net/sf/ehcache/config/InvalidConfigurationException
      10: dup
      11: ldc           #87                 // String Cannot use both <persistence ...> and diskPersistent in a single cache configuration.
      13: invokespecial #88                 // Method net/sf/ehcache/config/InvalidConfigurationException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: getstatic     #89                 // Field java/lang/Boolean.TRUE:Ljava/lang/Boolean;
      20: aload_0
      21: getfield      #90                 // Field overflowToDisk:Ljava/lang/Boolean;
      24: invokevirtual #91                 // Method java/lang/Boolean.equals:(Ljava/lang/Object;)Z
      27: ifeq          40
      30: new           #86                 // class net/sf/ehcache/config/InvalidConfigurationException
      33: dup
      34: ldc           #92                 // String Cannot use both <persistence ...> and overflowToDisk in a single cache configuration.
      36: invokespecial #88                 // Method net/sf/ehcache/config/InvalidConfigurationException."<init>":(Ljava/lang/String;)V
      39: athrow
      40: aload_0
      41: aload_1
      42: putfield      #93                 // Field persistenceConfiguration:Lnet/sf/ehcache/config/PersistenceConfiguration;
      45: return

  public net.sf.ehcache.config.CacheConfiguration persistence(net.sf.ehcache.config.PersistenceConfiguration);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #94                 // Method addPersistence:(Lnet/sf/ehcache/config/PersistenceConfiguration;)V
       5: aload_0
       6: areturn

  public final void setMaxMemoryOffHeap(java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #75                 // Method checkDynamicChange:()V
       4: aload_0
       5: ldc           #95                 // String Cache maxMemoryOffHeap
       7: aload_1
       8: invokespecial #77                 // Method assertArgumentNotNull:(Ljava/lang/String;Ljava/lang/Object;)V
      11: aload_0
      12: aload_1
      13: invokevirtual #96                 // Method setMaxBytesLocalOffHeap:(Ljava/lang/String;)V
      16: return

  public net.sf.ehcache.config.CacheConfiguration maxMemoryOffHeap(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #97                 // Method setMaxMemoryOffHeap:(Ljava/lang/String;)V
       5: aload_0
       6: areturn

  public final net.sf.ehcache.config.CacheConfiguration logging(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #98                 // Method setLogging:(Z)V
       5: aload_0
       6: areturn

  public final void setMaxElementsInMemory(int);
    Code:
       0: aload_0
       1: iload_1
       2: i2l
       3: invokevirtual #99                 // Method setMaxEntriesLocalHeap:(J)V
       6: return

  public final void setMaxEntriesLocalHeap(long);
    Code:
       0: lload_1
       1: lconst_0
       2: lcmp
       3: ifge          16
       6: new           #86                 // class net/sf/ehcache/config/InvalidConfigurationException
       9: dup
      10: ldc           #100                // String Number of entries on local heap cannot be negative
      12: invokespecial #88                 // Method net/sf/ehcache/config/InvalidConfigurationException."<init>":(Ljava/lang/String;)V
      15: athrow
      16: lload_1
      17: ldc2_w        #101                // long 2147483647l
      20: lcmp
      21: ifle          34
      24: new           #68                 // class java/lang/IllegalArgumentException
      27: dup
      28: ldc           #103                // String Values larger than Integer.MAX_VALUE are not currently supported.
      30: invokespecial #74                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      33: athrow
      34: aload_0
      35: invokespecial #75                 // Method checkDynamicChange:()V
      38: aload_0
      39: getfield      #104                // Field onHeapPoolUsage:Lnet/sf/ehcache/config/CacheConfiguration$PoolUsage;
      42: ifnull        65
      45: aload_0
      46: getfield      #104                // Field onHeapPoolUsage:Lnet/sf/ehcache/config/CacheConfiguration$PoolUsage;
      49: getstatic     #105                // Field net/sf/ehcache/config/CacheConfiguration$PoolUsage.None:Lnet/sf/ehcache/config/CacheConfiguration$PoolUsage;
      52: if_acmpeq     65
      55: new           #86                 // class net/sf/ehcache/config/InvalidConfigurationException
      58: dup
      59: ldc           #106                // String MaxEntriesLocalHeap is not compatible with MaxBytesLocalHeap set on cache
      61: invokespecial #88                 // Method net/sf/ehcache/config/InvalidConfigurationException."<init>":(Ljava/lang/String;)V
      64: athrow
      65: aload_0
      66: getfield      #36                 // Field maxEntriesLocalHeap:Ljava/lang/Integer;
      69: ifnonnull     76
      72: iconst_0
      73: goto          83
      76: aload_0
      77: getfield      #36                 // Field maxEntriesLocalHeap:Ljava/lang/Integer;
      80: invokevirtual #107                // Method java/lang/Integer.intValue:()I
      83: istore_3
      84: lload_1
      85: l2i
      86: istore        4
      88: aload_0
      89: lload_1
      90: l2i
      91: invokestatic  #35                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      94: putfield      #36                 // Field maxEntriesLocalHeap:Ljava/lang/Integer;
      97: aload_0
      98: iload_3
      99: iload         4
     101: invokespecial #108                // Method fireMemoryCapacityChanged:(II)V
     104: return

  public final net.sf.ehcache.config.CacheConfiguration maxElementsInMemory(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #109                // Method setMaxElementsInMemory:(I)V
       5: aload_0
       6: areturn

  public final net.sf.ehcache.config.CacheConfiguration maxEntriesLocalHeap(int);
    Code:
       0: aload_0
       1: iload_1
       2: i2l
       3: invokevirtual #99                 // Method setMaxEntriesLocalHeap:(J)V
       6: aload_0
       7: areturn

  public final void setCacheLoaderTimeoutMillis(long);
    Code:
       0: aload_0
       1: invokespecial #75                 // Method checkDynamicChange:()V
       4: aload_0
       5: lload_1
       6: putfield      #110                // Field cacheLoaderTimeoutMillis:J
       9: return

  public net.sf.ehcache.config.CacheConfiguration timeoutMillis(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #111                // Method setCacheLoaderTimeoutMillis:(J)V
       5: aload_0
       6: areturn

  public final void setMemoryStoreEvictionPolicy(java.lang.String);
    Code:
       0: aload_0
       1: ldc           #112                // String Cache memoryStoreEvictionPolicy
       3: aload_1
       4: invokespecial #77                 // Method assertArgumentNotNull:(Ljava/lang/String;Ljava/lang/Object;)V
       7: aload_0
       8: aload_1
       9: invokestatic  #113                // Method net/sf/ehcache/store/MemoryStoreEvictionPolicy.fromString:(Ljava/lang/String;)Lnet/sf/ehcache/store/MemoryStoreEvictionPolicy;
      12: invokevirtual #114                // Method setMemoryStoreEvictionPolicyFromObject:(Lnet/sf/ehcache/store/MemoryStoreEvictionPolicy;)V
      15: return

  public final net.sf.ehcache.config.CacheConfiguration memoryStoreEvictionPolicy(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #115                // Method setMemoryStoreEvictionPolicy:(Ljava/lang/String;)V
       5: aload_0
       6: areturn

  public final void setMemoryStoreEvictionPolicyFromObject(net.sf.ehcache.store.MemoryStoreEvictionPolicy);
    Code:
       0: aload_0
       1: invokespecial #75                 // Method checkDynamicChange:()V
       4: aconst_null
       5: aload_1
       6: if_acmpne     19
       9: aload_0
      10: getstatic     #3                  // Field DEFAULT_MEMORY_STORE_EVICTION_POLICY:Lnet/sf/ehcache/store/MemoryStoreEvictionPolicy;
      13: putfield      #4                  // Field memoryStoreEvictionPolicy:Lnet/sf/ehcache/store/MemoryStoreEvictionPolicy;
      16: goto          24
      19: aload_0
      20: aload_1
      21: putfield      #4                  // Field memoryStoreEvictionPolicy:Lnet/sf/ehcache/store/MemoryStoreEvictionPolicy;
      24: return

  public final net.sf.ehcache.config.CacheConfiguration memoryStoreEvictionPolicy(net.sf.ehcache.store.MemoryStoreEvictionPolicy);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #114                // Method setMemoryStoreEvictionPolicyFromObject:(Lnet/sf/ehcache/store/MemoryStoreEvictionPolicy;)V
       5: aload_0
       6: areturn

  public final void setClearOnFlush(boolean);
    Code:
       0: aload_0
       1: invokespecial #75                 // Method checkDynamicChange:()V
       4: aload_0
       5: iload_1
       6: putfield      #5                  // Field clearOnFlush:Z
       9: return

  public final net.sf.ehcache.config.CacheConfiguration clearOnFlush(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #116                // Method setClearOnFlush:(Z)V
       5: aload_0
       6: areturn

  public final void setEternal(boolean);
    Code:
       0: aload_0
       1: invokespecial #75                 // Method checkDynamicChange:()V
       4: aload_0
       5: iload_1
       6: aload_0
       7: invokevirtual #117                // Method getTimeToLiveSeconds:()J
      10: aload_0
      11: invokevirtual #118                // Method getTimeToIdleSeconds:()J
      14: invokespecial #119                // Method isEternalValueConflictingWithTTIOrTTL:(ZJJ)Z
      17: pop
      18: aload_0
      19: iload_1
      20: putfield      #6                  // Field eternal:Z
      23: iload_1
      24: ifeq          37
      27: aload_0
      28: lconst_0
      29: invokevirtual #120                // Method setTimeToIdleSeconds:(J)V
      32: aload_0
      33: lconst_0
      34: invokevirtual #121                // Method setTimeToLiveSeconds:(J)V
      37: return

  private boolean isEternalValueConflictingWithTTIOrTTL(boolean, long, long);
    Code:
       0: iconst_0
       1: istore        6
       3: iload_1
       4: ifeq          23
       7: lload_2
       8: lconst_0
       9: lcmp
      10: ifne          20
      13: lload         4
      15: lconst_0
      16: lcmp
      17: ifeq          23
      20: iconst_1
      21: istore        6
      23: iload         6
      25: ifeq          111
      28: aload_0
      29: getfield      #122                // Field conflictingEternalValuesWarningLogged:Z
      32: ifne          111
      35: aload_0
      36: iconst_1
      37: putfield      #122                // Field conflictingEternalValuesWarningLogged:Z
      40: getstatic     #123                // Field LOG:Lorg/slf4j/Logger;
      43: new           #69                 // class java/lang/StringBuilder
      46: dup
      47: invokespecial #70                 // Method java/lang/StringBuilder."<init>":()V
      50: ldc           #124                // String Cache \'
      52: invokevirtual #71                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      55: aload_0
      56: invokevirtual #125                // Method getName:()Ljava/lang/String;
      59: invokevirtual #71                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      62: ldc           #126                // String \' is set to eternal but also has TTI/TTL set.
      64: invokevirtual #71                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      67: ldc           #127                // String  To avoid this warning, clean up the config
      69: invokevirtual #71                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      72: ldc           #128                // String removing conflicting values of eternal,
      74: invokevirtual #71                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      77: ldc           #129                // String  TTI and TTL. Effective configuration for Cache \'
      79: invokevirtual #71                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      82: aload_0
      83: invokevirtual #125                // Method getName:()Ljava/lang/String;
      86: invokevirtual #71                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      89: ldc           #130                // String \' will be eternal=\'
      91: invokevirtual #71                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      94: iload_1
      95: invokevirtual #131                // Method java/lang/StringBuilder.append:(Z)Ljava/lang/StringBuilder;
      98: ldc           #132                // String \', timeToIdleSeconds=\'0\', timeToLiveSeconds=\'0\'.
     100: invokevirtual #71                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     103: invokevirtual #73                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     106: invokeinterface #133,  2          // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;)V
     111: iload         6
     113: ireturn

  public final net.sf.ehcache.config.CacheConfiguration eternal(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #134                // Method setEternal:(Z)V
       5: aload_0
       6: areturn

  public final void setTimeToIdleSeconds(long);
    Code:
       0: aload_0
       1: invokespecial #75                 // Method checkDynamicChange:()V
       4: aload_0
       5: aload_0
       6: getfield      #6                  // Field eternal:Z
       9: lconst_0
      10: lload_1
      11: invokespecial #119                // Method isEternalValueConflictingWithTTIOrTTL:(ZJJ)Z
      14: ifne          37
      17: aload_0
      18: getfield      #7                  // Field timeToIdleSeconds:J
      21: lstore_3
      22: lload_1
      23: lstore        5
      25: aload_0
      26: lload_1
      27: putfield      #7                  // Field timeToIdleSeconds:J
      30: aload_0
      31: lload_3
      32: lload         5
      34: invokespecial #135                // Method fireTtiChanged:(JJ)V
      37: return

  public final net.sf.ehcache.config.CacheConfiguration timeToIdleSeconds(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #120                // Method setTimeToIdleSeconds:(J)V
       5: aload_0
       6: areturn

  public final void setTimeToLiveSeconds(long);
    Code:
       0: aload_0
       1: invokespecial #75                 // Method checkDynamicChange:()V
       4: aload_0
       5: aload_0
       6: getfield      #6                  // Field eternal:Z
       9: lload_1
      10: lconst_0
      11: invokespecial #119                // Method isEternalValueConflictingWithTTIOrTTL:(ZJJ)Z
      14: ifne          37
      17: aload_0
      18: getfield      #8                  // Field timeToLiveSeconds:J
      21: lstore_3
      22: lload_1
      23: lstore        5
      25: aload_0
      26: lload_1
      27: putfield      #8                  // Field timeToLiveSeconds:J
      30: aload_0
      31: lload_3
      32: lload         5
      34: invokespecial #136                // Method fireTtlChanged:(JJ)V
      37: return

  public final net.sf.ehcache.config.CacheConfiguration timeToLiveSeconds(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #121                // Method setTimeToLiveSeconds:(J)V
       5: aload_0
       6: areturn

  public final void setOverflowToDisk(boolean);
    Code:
       0: aload_0
       1: invokespecial #75                 // Method checkDynamicChange:()V
       4: aload_0
       5: getfield      #93                 // Field persistenceConfiguration:Lnet/sf/ehcache/config/PersistenceConfiguration;
       8: ifnull        34
      11: getstatic     #89                 // Field java/lang/Boolean.TRUE:Ljava/lang/Boolean;
      14: iload_1
      15: invokestatic  #80                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      18: invokevirtual #91                 // Method java/lang/Boolean.equals:(Ljava/lang/Object;)Z
      21: ifeq          34
      24: new           #86                 // class net/sf/ehcache/config/InvalidConfigurationException
      27: dup
      28: ldc           #92                 // String Cannot use both <persistence ...> and overflowToDisk in a single cache configuration.
      30: invokespecial #88                 // Method net/sf/ehcache/config/InvalidConfigurationException."<init>":(Ljava/lang/String;)V
      33: athrow
      34: aload_0
      35: iload_1
      36: invokestatic  #80                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      39: putfield      #90                 // Field overflowToDisk:Ljava/lang/Boolean;
      42: aload_0
      43: invokevirtual #137                // Method validateConfiguration:()V
      46: return

  public final net.sf.ehcache.config.CacheConfiguration overflowToDisk(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #138                // Method setOverflowToDisk:(Z)V
       5: aload_0
       6: areturn

  public final void setDiskPersistent(boolean);
    Code:
       0: aload_0
       1: invokespecial #75                 // Method checkDynamicChange:()V
       4: aload_0
       5: getfield      #93                 // Field persistenceConfiguration:Lnet/sf/ehcache/config/PersistenceConfiguration;
       8: ifnull        21
      11: new           #86                 // class net/sf/ehcache/config/InvalidConfigurationException
      14: dup
      15: ldc           #87                 // String Cannot use both <persistence ...> and diskPersistent in a single cache configuration.
      17: invokespecial #88                 // Method net/sf/ehcache/config/InvalidConfigurationException."<init>":(Ljava/lang/String;)V
      20: athrow
      21: aload_0
      22: iload_1
      23: invokestatic  #80                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      26: putfield      #85                 // Field diskPersistent:Ljava/lang/Boolean;
      29: aload_0
      30: invokevirtual #137                // Method validateConfiguration:()V
      33: return

  public final net.sf.ehcache.config.CacheConfiguration diskPersistent(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #139                // Method setDiskPersistent:(Z)V
       5: aload_0
       6: areturn

  public void setDiskSpoolBufferSizeMB(int);
    Code:
       0: aload_0
       1: invokespecial #75                 // Method checkDynamicChange:()V
       4: iload_1
       5: ifgt          17
       8: aload_0
       9: bipush        30
      11: putfield      #9                  // Field diskSpoolBufferSizeMB:I
      14: goto          22
      17: aload_0
      18: iload_1
      19: putfield      #9                  // Field diskSpoolBufferSizeMB:I
      22: return

  public final net.sf.ehcache.config.CacheConfiguration diskSpoolBufferSizeMB(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #140                // Method setDiskSpoolBufferSizeMB:(I)V
       5: aload_0
       6: areturn

  public void setDiskAccessStripes(int);
    Code:
       0: aload_0
       1: invokespecial #75                 // Method checkDynamicChange:()V
       4: iload_1
       5: ifgt          16
       8: aload_0
       9: iconst_1
      10: putfield      #10                 // Field diskAccessStripes:I
      13: goto          21
      16: aload_0
      17: iload_1
      18: putfield      #10                 // Field diskAccessStripes:I
      21: return

  public final net.sf.ehcache.config.CacheConfiguration diskAccessStripes(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #141                // Method setDiskAccessStripes:(I)V
       5: aload_0
       6: areturn

  public void setMaxElementsOnDisk(int);
    Code:
       0: aload_0
       1: getfield      #142                // Field onDiskPoolUsage:Lnet/sf/ehcache/config/CacheConfiguration$PoolUsage;
       4: ifnull        27
       7: aload_0
       8: getfield      #142                // Field onDiskPoolUsage:Lnet/sf/ehcache/config/CacheConfiguration$PoolUsage;
      11: getstatic     #105                // Field net/sf/ehcache/config/CacheConfiguration$PoolUsage.None:Lnet/sf/ehcache/config/CacheConfiguration$PoolUsage;
      14: if_acmpeq     27
      17: new           #86                 // class net/sf/ehcache/config/InvalidConfigurationException
      20: dup
      21: ldc           #143                // String MaxEntriesLocalDisk is not compatible with MaxBytesLocalDisk set on cache
      23: invokespecial #88                 // Method net/sf/ehcache/config/InvalidConfigurationException."<init>":(Ljava/lang/String;)V
      26: athrow
      27: aload_0
      28: invokespecial #75                 // Method checkDynamicChange:()V
      31: aload_0
      32: getfield      #2                  // Field maxElementsOnDisk:I
      35: istore_2
      36: aload_0
      37: iload_1
      38: putfield      #2                  // Field maxElementsOnDisk:I
      41: aload_0
      42: iload_2
      43: aload_0
      44: getfield      #2                  // Field maxElementsOnDisk:I
      47: invokespecial #144                // Method fireDiskCapacityChanged:(II)V
      50: return

  public void setMaxEntriesLocalDisk(long);
    Code:
       0: lload_1
       1: lconst_0
       2: lcmp
       3: ifge          16
       6: new           #86                 // class net/sf/ehcache/config/InvalidConfigurationException
       9: dup
      10: ldc           #145                // String Number of entries on disk cannot be negative
      12: invokespecial #88                 // Method net/sf/ehcache/config/InvalidConfigurationException."<init>":(Ljava/lang/String;)V
      15: athrow
      16: lload_1
      17: ldc2_w        #101                // long 2147483647l
      20: lcmp
      21: ifle          34
      24: new           #68                 // class java/lang/IllegalArgumentException
      27: dup
      28: ldc           #146                // String Values greater than Integer.MAX_VALUE are not currently supported.
      30: invokespecial #74                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      33: athrow
      34: aload_0
      35: getfield      #142                // Field onDiskPoolUsage:Lnet/sf/ehcache/config/CacheConfiguration$PoolUsage;
      38: ifnull        58
      41: aload_0
      42: invokevirtual #147                // Method isTerracottaClustered:()Z
      45: ifeq          58
      48: new           #148                // class java/lang/IllegalStateException
      51: dup
      52: ldc           #149                // String Can\'t use local disks with Terracotta clustered caches!
      54: invokespecial #150                // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      57: athrow
      58: aload_0
      59: iconst_1
      60: putfield      #151                // Field maxEntriesLocalDiskExplicitlySet:Z
      63: aload_0
      64: lload_1
      65: l2i
      66: invokevirtual #152                // Method setMaxElementsOnDisk:(I)V
      69: return

  public final net.sf.ehcache.config.CacheConfiguration maxElementsOnDisk(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #152                // Method setMaxElementsOnDisk:(I)V
       5: aload_0
       6: areturn

  public final net.sf.ehcache.config.CacheConfiguration maxEntriesLocalDisk(int);
    Code:
       0: aload_0
       1: iload_1
       2: i2l
       3: invokevirtual #153                // Method setMaxEntriesLocalDisk:(J)V
       6: aload_0
       7: areturn

  public final void setDiskExpiryThreadIntervalSeconds(long);
    Code:
       0: aload_0
       1: invokespecial #75                 // Method checkDynamicChange:()V
       4: lload_1
       5: lconst_0
       6: lcmp
       7: ifgt          20
      10: aload_0
      11: ldc2_w        #11                 // long 120l
      14: putfield      #13                 // Field diskExpiryThreadIntervalSeconds:J
      17: goto          25
      20: aload_0
      21: lload_1
      22: putfield      #13                 // Field diskExpiryThreadIntervalSeconds:J
      25: return

  public final net.sf.ehcache.config.CacheConfiguration diskExpiryThreadIntervalSeconds(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #154                // Method setDiskExpiryThreadIntervalSeconds:(J)V
       5: aload_0
       6: areturn

  public void freezeConfiguration();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #155                // Field frozen:Z
       5: aload_0
       6: getfield      #156                // Field searchable:Lnet/sf/ehcache/config/Searchable;
       9: ifnull        19
      12: aload_0
      13: getfield      #156                // Field searchable:Lnet/sf/ehcache/config/Searchable;
      16: invokevirtual #157                // Method net/sf/ehcache/config/Searchable.freezeConfiguration:()V
      19: return

  public boolean isFrozen();
    Code:
       0: aload_0
       1: getfield      #155                // Field frozen:Z
       4: ireturn

  public net.sf.ehcache.store.compound.ReadWriteCopyStrategy<net.sf.ehcache.Element> getCopyStrategy();
    Code:
       0: aload_0
       1: getfield      #30                 // Field copyStrategyConfiguration:Lnet/sf/ehcache/config/CopyStrategyConfiguration;
       4: invokevirtual #158                // Method net/sf/ehcache/config/CopyStrategyConfiguration.getCopyStrategyInstance:()Lnet/sf/ehcache/store/compound/ReadWriteCopyStrategy;
       7: areturn

  public net.sf.ehcache.config.CacheConfiguration copyOnRead(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #159                // Method setCopyOnRead:(Z)V
       5: aload_0
       6: areturn

  public boolean isCopyOnRead();
    Code:
       0: aload_0
       1: invokespecial #160                // Method validateTransactionalSettings:()V
       4: aload_0
       5: getfield      #161                // Field copyOnRead:Ljava/lang/Boolean;
       8: invokevirtual #162                // Method java/lang/Boolean.booleanValue:()Z
      11: ireturn

  public void setCopyOnRead(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #80                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
       5: putfield      #161                // Field copyOnRead:Ljava/lang/Boolean;
       8: return

  public net.sf.ehcache.config.CacheConfiguration copyOnWrite(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #80                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
       5: putfield      #163                // Field copyOnWrite:Ljava/lang/Boolean;
       8: aload_0
       9: areturn

  public boolean isCopyOnWrite();
    Code:
       0: aload_0
       1: invokespecial #160                // Method validateTransactionalSettings:()V
       4: aload_0
       5: getfield      #163                // Field copyOnWrite:Ljava/lang/Boolean;
       8: invokevirtual #162                // Method java/lang/Boolean.booleanValue:()Z
      11: ireturn

  public void setCopyOnWrite(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #80                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
       5: putfield      #163                // Field copyOnWrite:Ljava/lang/Boolean;
       8: return

  public void addCopyStrategy(net.sf.ehcache.config.CopyStrategyConfiguration);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #30                 // Field copyStrategyConfiguration:Lnet/sf/ehcache/config/CopyStrategyConfiguration;
       5: return

  public void addElementValueComparator(net.sf.ehcache.config.ElementValueComparatorConfiguration);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #33                 // Field elementValueComparatorConfiguration:Lnet/sf/ehcache/config/ElementValueComparatorConfiguration;
       5: return

  public final void addSearchable(net.sf.ehcache.config.Searchable);
    Code:
       0: aload_0
       1: invokespecial #75                 // Method checkDynamicChange:()V
       4: aload_0
       5: aload_1
       6: putfield      #156                // Field searchable:Lnet/sf/ehcache/config/Searchable;
       9: return

  public long getMaxBytesLocalHeap();
    Code:
       0: aload_0
       1: getfield      #164                // Field maxBytesLocalHeap:Ljava/lang/Long;
       4: ifnonnull     11
       7: lconst_0
       8: goto          18
      11: aload_0
      12: getfield      #164                // Field maxBytesLocalHeap:Ljava/lang/Long;
      15: invokevirtual #165                // Method java/lang/Long.longValue:()J
      18: lreturn

  public void setMaxBytesLocalHeap(java.lang.String);
    Code:
       0: aload_0
       1: ldc           #166                // String Cache maxBytesLocalHeap
       3: aload_1
       4: invokespecial #77                 // Method assertArgumentNotNull:(Ljava/lang/String;Ljava/lang/Object;)V
       7: aload_0
       8: aload_1
       9: invokespecial #167                // Method isPercentage:(Ljava/lang/String;)Z
      12: ifeq          30
      15: aload_0
      16: aload_0
      17: aload_1
      18: invokespecial #168                // Method parsePercentage:(Ljava/lang/String;)I
      21: invokestatic  #35                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      24: putfield      #169                // Field maxBytesLocalHeapPercentage:Ljava/lang/Integer;
      27: goto          41
      30: aload_0
      31: aload_1
      32: invokestatic  #170                // Method net/sf/ehcache/config/MemoryUnit.parseSizeInBytes:(Ljava/lang/String;)J
      35: invokestatic  #171                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      38: invokevirtual #172                // Method setMaxBytesLocalHeap:(Ljava/lang/Long;)V
      41: aload_0
      42: aload_1
      43: putfield      #173                // Field maxBytesLocalHeapInput:Ljava/lang/String;
      46: return

  public void setMaxBytesLocalHeap(java.lang.Long);
    Code:
       0: aload_0
       1: getfield      #104                // Field onHeapPoolUsage:Lnet/sf/ehcache/config/CacheConfiguration$PoolUsage;
       4: ifnull        26
       7: aload_0
       8: invokevirtual #174                // Method getMaxEntriesLocalHeap:()J
      11: lconst_0
      12: lcmp
      13: ifle          26
      16: new           #86                 // class net/sf/ehcache/config/InvalidConfigurationException
      19: dup
      20: ldc           #106                // String MaxEntriesLocalHeap is not compatible with MaxBytesLocalHeap set on cache
      22: invokespecial #88                 // Method net/sf/ehcache/config/InvalidConfigurationException."<init>":(Ljava/lang/String;)V
      25: athrow
      26: aload_0
      27: getfield      #104                // Field onHeapPoolUsage:Lnet/sf/ehcache/config/CacheConfiguration$PoolUsage;
      30: ifnull        53
      33: aload_0
      34: getfield      #104                // Field onHeapPoolUsage:Lnet/sf/ehcache/config/CacheConfiguration$PoolUsage;
      37: getstatic     #175                // Field net/sf/ehcache/config/CacheConfiguration$PoolUsage.Cache:Lnet/sf/ehcache/config/CacheConfiguration$PoolUsage;
      40: if_acmpeq     53
      43: new           #148                // class java/lang/IllegalStateException
      46: dup
      47: ldc           #176                // String A Cache can\'t switch memory pool!
      49: invokespecial #150                // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      52: athrow
      53: aload_0
      54: aload_1
      55: ldc           #177                // String maxBytesLocalHeap
      57: invokespecial #178                // Method verifyGreaterThanZero:(Ljava/lang/Long;Ljava/lang/String;)V
      60: aload_0
      61: getfield      #164                // Field maxBytesLocalHeap:Ljava/lang/Long;
      64: astore_2
      65: aload_0
      66: aload_1
      67: putfield      #164                // Field maxBytesLocalHeap:Ljava/lang/Long;
      70: aload_0
      71: aload_2
      72: aload_1
      73: invokespecial #179                // Method fireMaxBytesOnLocalHeapChanged:(Ljava/lang/Long;Ljava/lang/Long;)V
      76: return

  private void fireMaxBytesOnLocalHeapChanged(java.lang.Long, java.lang.Long);
    Code:
       0: aload_1
       1: ifnull        12
       4: aload_1
       5: aload_2
       6: invokevirtual #180                // Method java/lang/Long.equals:(Ljava/lang/Object;)Z
       9: ifeq          24
      12: aload_2
      13: ifnull        80
      16: aload_2
      17: aload_1
      18: invokevirtual #180                // Method java/lang/Long.equals:(Ljava/lang/Object;)Z
      21: ifne          80
      24: aload_0
      25: getfield      #25                 // Field listeners:Ljava/util/Set;
      28: invokeinterface #181,  1          // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      33: astore_3
      34: aload_3
      35: invokeinterface #57,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      40: ifeq          80
      43: aload_3
      44: invokeinterface #58,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      49: checkcast     #182                // class net/sf/ehcache/config/CacheConfigurationListener
      52: astore        4
      54: aload         4
      56: aload_1
      57: ifnull        67
      60: aload_1
      61: invokevirtual #165                // Method java/lang/Long.longValue:()J
      64: goto          68
      67: lconst_0
      68: aload_2
      69: invokevirtual #165                // Method java/lang/Long.longValue:()J
      72: invokeinterface #183,  5          // InterfaceMethod net/sf/ehcache/config/CacheConfigurationListener.maxBytesLocalHeapChanged:(JJ)V
      77: goto          34
      80: return

  private void fireMaxBytesOnLocalDiskChanged(java.lang.Long, java.lang.Long);
    Code:
       0: aload_1
       1: ifnull        12
       4: aload_1
       5: aload_2
       6: invokevirtual #180                // Method java/lang/Long.equals:(Ljava/lang/Object;)Z
       9: ifeq          24
      12: aload_2
      13: ifnull        80
      16: aload_2
      17: aload_1
      18: invokevirtual #180                // Method java/lang/Long.equals:(Ljava/lang/Object;)Z
      21: ifne          80
      24: aload_0
      25: getfield      #25                 // Field listeners:Ljava/util/Set;
      28: invokeinterface #181,  1          // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      33: astore_3
      34: aload_3
      35: invokeinterface #57,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      40: ifeq          80
      43: aload_3
      44: invokeinterface #58,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      49: checkcast     #182                // class net/sf/ehcache/config/CacheConfigurationListener
      52: astore        4
      54: aload         4
      56: aload_1
      57: ifnull        67
      60: aload_1
      61: invokevirtual #165                // Method java/lang/Long.longValue:()J
      64: goto          68
      67: lconst_0
      68: aload_2
      69: invokevirtual #165                // Method java/lang/Long.longValue:()J
      72: invokeinterface #184,  5          // InterfaceMethod net/sf/ehcache/config/CacheConfigurationListener.maxBytesLocalDiskChanged:(JJ)V
      77: goto          34
      80: return

  private void fireDynamicAttributesExtractorAdded(net.sf.ehcache.search.attribute.DynamicAttributesExtractor, net.sf.ehcache.search.attribute.DynamicAttributesExtractor);
    Code:
       0: aload_1
       1: aload_2
       2: if_acmpeq     47
       5: aload_0
       6: getfield      #26                 // Field dynamicSearchListeners:Ljava/util/Set;
       9: invokeinterface #181,  1          // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      14: astore_3
      15: aload_3
      16: invokeinterface #57,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      21: ifeq          47
      24: aload_3
      25: invokeinterface #58,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      30: checkcast     #185                // class net/sf/ehcache/config/DynamicSearchListener
      33: astore        4
      35: aload         4
      37: aload_1
      38: aload_2
      39: invokeinterface #186,  3          // InterfaceMethod net/sf/ehcache/config/DynamicSearchListener.extractorChanged:(Lnet/sf/ehcache/search/attribute/DynamicAttributesExtractor;Lnet/sf/ehcache/search/attribute/DynamicAttributesExtractor;)V
      44: goto          15
      47: return

  public net.sf.ehcache.config.CacheConfiguration maxBytesLocalHeap(long, net.sf.ehcache.config.MemoryUnit);
    Code:
       0: aload_0
       1: aload_3
       2: lload_1
       3: invokevirtual #187                // Method net/sf/ehcache/config/MemoryUnit.toBytes:(J)J
       6: invokestatic  #171                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
       9: invokevirtual #172                // Method setMaxBytesLocalHeap:(Ljava/lang/Long;)V
      12: aload_0
      13: areturn

  public long getMaxBytesLocalOffHeap();
    Code:
       0: aload_0
       1: getfield      #188                // Field maxBytesLocalOffHeap:Ljava/lang/Long;
       4: ifnonnull     11
       7: lconst_0
       8: goto          18
      11: aload_0
      12: getfield      #188                // Field maxBytesLocalOffHeap:Ljava/lang/Long;
      15: invokevirtual #165                // Method java/lang/Long.longValue:()J
      18: lreturn

  public java.lang.String getMaxBytesLocalOffHeapAsString();
    Code:
       0: aload_0
       1: getfield      #189                // Field maxBytesLocalOffHeapInput:Ljava/lang/String;
       4: ifnull        14
       7: aload_0
       8: getfield      #189                // Field maxBytesLocalOffHeapInput:Ljava/lang/String;
      11: goto          21
      14: aload_0
      15: invokevirtual #190                // Method getMaxBytesLocalOffHeap:()J
      18: invokestatic  #191                // Method java/lang/Long.toString:(J)Ljava/lang/String;
      21: areturn

  public void setMaxBytesLocalOffHeap(java.lang.String);
    Code:
       0: aload_0
       1: ldc           #192                // String Cache maxBytesLocalOffHeap
       3: aload_1
       4: invokespecial #77                 // Method assertArgumentNotNull:(Ljava/lang/String;Ljava/lang/Object;)V
       7: aload_0
       8: aload_1
       9: invokespecial #167                // Method isPercentage:(Ljava/lang/String;)Z
      12: ifeq          30
      15: aload_0
      16: aload_0
      17: aload_1
      18: invokespecial #168                // Method parsePercentage:(Ljava/lang/String;)I
      21: invokestatic  #35                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      24: putfield      #193                // Field maxBytesLocalOffHeapPercentage:Ljava/lang/Integer;
      27: goto          41
      30: aload_0
      31: aload_1
      32: invokestatic  #170                // Method net/sf/ehcache/config/MemoryUnit.parseSizeInBytes:(Ljava/lang/String;)J
      35: invokestatic  #171                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      38: invokevirtual #194                // Method setMaxBytesLocalOffHeap:(Ljava/lang/Long;)V
      41: aload_0
      42: aload_1
      43: putfield      #189                // Field maxBytesLocalOffHeapInput:Ljava/lang/String;
      46: aload_0
      47: iconst_1
      48: putfield      #195                // Field maxBytesLocalOffHeapExplicitlySet:Z
      51: return

  public java.lang.Integer getMaxBytesLocalOffHeapPercentage();
    Code:
       0: aload_0
       1: getfield      #193                // Field maxBytesLocalOffHeapPercentage:Ljava/lang/Integer;
       4: areturn

  public java.lang.Integer getMaxBytesLocalHeapPercentage();
    Code:
       0: aload_0
       1: getfield      #169                // Field maxBytesLocalHeapPercentage:Ljava/lang/Integer;
       4: areturn

  public java.lang.String getMaxBytesLocalHeapAsString();
    Code:
       0: aload_0
       1: getfield      #173                // Field maxBytesLocalHeapInput:Ljava/lang/String;
       4: ifnull        14
       7: aload_0
       8: getfield      #173                // Field maxBytesLocalHeapInput:Ljava/lang/String;
      11: goto          21
      14: aload_0
      15: invokevirtual #196                // Method getMaxBytesLocalHeap:()J
      18: invokestatic  #191                // Method java/lang/Long.toString:(J)Ljava/lang/String;
      21: areturn

  public java.lang.Integer getMaxBytesLocalDiskPercentage();
    Code:
       0: aload_0
       1: getfield      #197                // Field maxBytesLocalDiskPercentage:Ljava/lang/Integer;
       4: areturn

  private int parsePercentage(java.lang.String);
    Code:
       0: aload_1
       1: invokevirtual #198                // Method java/lang/String.trim:()Ljava/lang/String;
       4: astore_2
       5: aload_2
       6: iconst_0
       7: aload_2
       8: invokevirtual #199                // Method java/lang/String.length:()I
      11: iconst_1
      12: isub
      13: invokevirtual #200                // Method java/lang/String.substring:(II)Ljava/lang/String;
      16: invokestatic  #201                // Method java/lang/Integer.parseInt:(Ljava/lang/String;)I
      19: istore_3
      20: iload_3
      21: bipush        100
      23: if_icmpgt     30
      26: iload_3
      27: ifge          57
      30: new           #68                 // class java/lang/IllegalArgumentException
      33: dup
      34: new           #69                 // class java/lang/StringBuilder
      37: dup
      38: invokespecial #70                 // Method java/lang/StringBuilder."<init>":()V
      41: ldc           #202                // String Percentage need values need to be between 0 and 100 inclusive, but got :
      43: invokevirtual #71                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      46: iload_3
      47: invokevirtual #203                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      50: invokevirtual #73                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      53: invokespecial #74                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      56: athrow
      57: iload_3
      58: ireturn

  private boolean isPercentage(java.lang.String);
    Code:
       0: aload_1
       1: invokevirtual #198                // Method java/lang/String.trim:()Ljava/lang/String;
       4: astore_2
       5: aload_2
       6: aload_2
       7: invokevirtual #199                // Method java/lang/String.length:()I
      10: iconst_1
      11: isub
      12: invokevirtual #204                // Method java/lang/String.charAt:(I)C
      15: bipush        37
      17: if_icmpne     24
      20: iconst_1
      21: goto          25
      24: iconst_0
      25: ireturn

  public void setMaxBytesLocalOffHeap(java.lang.Long);
    Code:
       0: aload_0
       1: getfield      #205                // Field offHeapPoolUsage:Lnet/sf/ehcache/config/CacheConfiguration$PoolUsage;
       4: ifnull        17
       7: new           #148                // class java/lang/IllegalStateException
      10: dup
      11: ldc           #206                // String OffHeap can\'t be set dynamically!
      13: invokespecial #150                // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: aload_1
      19: ldc           #207                // String maxBytesLocalOffHeap
      21: invokespecial #178                // Method verifyGreaterThanZero:(Ljava/lang/Long;Ljava/lang/String;)V
      24: aload_0
      25: iconst_1
      26: putfield      #195                // Field maxBytesLocalOffHeapExplicitlySet:Z
      29: aload_0
      30: aload_1
      31: putfield      #188                // Field maxBytesLocalOffHeap:Ljava/lang/Long;
      34: return

  public net.sf.ehcache.config.CacheConfiguration maxBytesLocalOffHeap(long, net.sf.ehcache.config.MemoryUnit);
    Code:
       0: aload_0
       1: aload_3
       2: lload_1
       3: invokevirtual #187                // Method net/sf/ehcache/config/MemoryUnit.toBytes:(J)J
       6: invokestatic  #171                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
       9: invokevirtual #194                // Method setMaxBytesLocalOffHeap:(Ljava/lang/Long;)V
      12: aload_0
      13: areturn

  public long getMaxBytesLocalDisk();
    Code:
       0: aload_0
       1: getfield      #208                // Field maxBytesLocalDisk:Ljava/lang/Long;
       4: ifnonnull     11
       7: lconst_0
       8: goto          18
      11: aload_0
      12: getfield      #208                // Field maxBytesLocalDisk:Ljava/lang/Long;
      15: invokevirtual #165                // Method java/lang/Long.longValue:()J
      18: lreturn

  public java.lang.String getMaxBytesLocalDiskAsString();
    Code:
       0: aload_0
       1: getfield      #209                // Field maxBytesLocalDiskInput:Ljava/lang/String;
       4: ifnull        14
       7: aload_0
       8: getfield      #209                // Field maxBytesLocalDiskInput:Ljava/lang/String;
      11: goto          21
      14: aload_0
      15: invokevirtual #210                // Method getMaxBytesLocalDisk:()J
      18: invokestatic  #191                // Method java/lang/Long.toString:(J)Ljava/lang/String;
      21: areturn

  public void setMaxBytesLocalDisk(java.lang.String);
    Code:
       0: aload_0
       1: ldc           #211                // String Cache maxBytesLocalDisk
       3: aload_1
       4: invokespecial #77                 // Method assertArgumentNotNull:(Ljava/lang/String;Ljava/lang/Object;)V
       7: aload_0
       8: aload_1
       9: invokespecial #167                // Method isPercentage:(Ljava/lang/String;)Z
      12: ifeq          30
      15: aload_0
      16: aload_0
      17: aload_1
      18: invokespecial #168                // Method parsePercentage:(Ljava/lang/String;)I
      21: invokestatic  #35                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      24: putfield      #197                // Field maxBytesLocalDiskPercentage:Ljava/lang/Integer;
      27: goto          41
      30: aload_0
      31: aload_1
      32: invokestatic  #170                // Method net/sf/ehcache/config/MemoryUnit.parseSizeInBytes:(Ljava/lang/String;)J
      35: invokestatic  #171                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      38: invokevirtual #212                // Method setMaxBytesLocalDisk:(Ljava/lang/Long;)V
      41: aload_0
      42: iconst_1
      43: putfield      #213                // Field maxBytesLocalDiskExplicitlySet:Z
      46: aload_0
      47: aload_1
      48: putfield      #209                // Field maxBytesLocalDiskInput:Ljava/lang/String;
      51: return

  public void setMaxBytesLocalDisk(java.lang.Long);
    Code:
       0: aload_0
       1: getfield      #142                // Field onDiskPoolUsage:Lnet/sf/ehcache/config/CacheConfiguration$PoolUsage;
       4: ifnull        26
       7: aload_0
       8: invokevirtual #214                // Method getMaxEntriesLocalDisk:()J
      11: lconst_0
      12: lcmp
      13: ifle          26
      16: new           #86                 // class net/sf/ehcache/config/InvalidConfigurationException
      19: dup
      20: ldc           #143                // String MaxEntriesLocalDisk is not compatible with MaxBytesLocalDisk set on cache
      22: invokespecial #88                 // Method net/sf/ehcache/config/InvalidConfigurationException."<init>":(Ljava/lang/String;)V
      25: athrow
      26: aload_0
      27: getfield      #142                // Field onDiskPoolUsage:Lnet/sf/ehcache/config/CacheConfiguration$PoolUsage;
      30: ifnull        53
      33: aload_0
      34: getfield      #142                // Field onDiskPoolUsage:Lnet/sf/ehcache/config/CacheConfiguration$PoolUsage;
      37: getstatic     #175                // Field net/sf/ehcache/config/CacheConfiguration$PoolUsage.Cache:Lnet/sf/ehcache/config/CacheConfiguration$PoolUsage;
      40: if_acmpeq     53
      43: new           #148                // class java/lang/IllegalStateException
      46: dup
      47: ldc           #215                // String A Cache can\'t switch disk pool!
      49: invokespecial #150                // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      52: athrow
      53: aload_0
      54: aload_1
      55: ldc           #216                // String maxBytesLocalDisk
      57: invokespecial #178                // Method verifyGreaterThanZero:(Ljava/lang/Long;Ljava/lang/String;)V
      60: aload_0
      61: iconst_1
      62: putfield      #213                // Field maxBytesLocalDiskExplicitlySet:Z
      65: aload_0
      66: getfield      #208                // Field maxBytesLocalDisk:Ljava/lang/Long;
      69: astore_2
      70: aload_0
      71: aload_1
      72: putfield      #208                // Field maxBytesLocalDisk:Ljava/lang/Long;
      75: aload_0
      76: aload_2
      77: aload_1
      78: invokespecial #217                // Method fireMaxBytesOnLocalDiskChanged:(Ljava/lang/Long;Ljava/lang/Long;)V
      81: return

  public net.sf.ehcache.config.CacheConfiguration maxBytesLocalDisk(long, net.sf.ehcache.config.MemoryUnit);
    Code:
       0: aload_0
       1: aload_3
       2: lload_1
       3: invokevirtual #187                // Method net/sf/ehcache/config/MemoryUnit.toBytes:(J)J
       6: invokestatic  #171                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
       9: invokevirtual #212                // Method setMaxBytesLocalDisk:(Ljava/lang/Long;)V
      12: aload_0
      13: areturn

  public void setDynamicAttributesExtractor(net.sf.ehcache.search.attribute.DynamicAttributesExtractor);
    Code:
       0: aload_0
       1: getfield      #156                // Field searchable:Lnet/sf/ehcache/config/Searchable;
       4: ifnull        17
       7: aload_0
       8: getfield      #156                // Field searchable:Lnet/sf/ehcache/config/Searchable;
      11: invokevirtual #218                // Method net/sf/ehcache/config/Searchable.isDynamicIndexingAllowed:()Z
      14: ifne          27
      17: new           #68                 // class java/lang/IllegalArgumentException
      20: dup
      21: ldc           #219                // String Dynamic search attribute extraction not supported
      23: invokespecial #74                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      26: athrow
      27: aload_1
      28: ifnonnull     48
      31: aload_0
      32: getfield      #220                // Field flexIndexer:Lnet/sf/ehcache/search/attribute/DynamicAttributesExtractor;
      35: ifnull        48
      38: new           #68                 // class java/lang/IllegalArgumentException
      41: dup
      42: ldc           #221                // String Dynamic search attributes extractor cannot be set to null by user
      44: invokespecial #74                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      47: athrow
      48: aload_0
      49: getfield      #220                // Field flexIndexer:Lnet/sf/ehcache/search/attribute/DynamicAttributesExtractor;
      52: astore_2
      53: aload_0
      54: aload_1
      55: putfield      #220                // Field flexIndexer:Lnet/sf/ehcache/search/attribute/DynamicAttributesExtractor;
      58: aload_0
      59: aload_2
      60: aload_0
      61: getfield      #220                // Field flexIndexer:Lnet/sf/ehcache/search/attribute/DynamicAttributesExtractor;
      64: invokespecial #222                // Method fireDynamicAttributesExtractorAdded:(Lnet/sf/ehcache/search/attribute/DynamicAttributesExtractor;Lnet/sf/ehcache/search/attribute/DynamicAttributesExtractor;)V
      67: return

  public net.sf.ehcache.config.CacheConfiguration dynamicAttributeExtractor(net.sf.ehcache.search.attribute.DynamicAttributesExtractor);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #223                // Method setDynamicAttributesExtractor:(Lnet/sf/ehcache/search/attribute/DynamicAttributesExtractor;)V
       5: aload_0
       6: areturn

  private void verifyGreaterThanZero(java.lang.Long, java.lang.String);
    Code:
       0: aload_1
       1: ifnull        40
       4: aload_1
       5: invokevirtual #165                // Method java/lang/Long.longValue:()J
       8: lconst_1
       9: lcmp
      10: ifge          40
      13: new           #68                 // class java/lang/IllegalArgumentException
      16: dup
      17: new           #69                 // class java/lang/StringBuilder
      20: dup
      21: invokespecial #70                 // Method java/lang/StringBuilder."<init>":()V
      24: aload_2
      25: invokevirtual #71                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      28: ldc           #224                // String  has to be larger than 0
      30: invokevirtual #71                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      33: invokevirtual #73                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      36: invokespecial #74                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      39: athrow
      40: return

  public net.sf.ehcache.config.CopyStrategyConfiguration getCopyStrategyConfiguration();
    Code:
       0: aload_0
       1: getfield      #30                 // Field copyStrategyConfiguration:Lnet/sf/ehcache/config/CopyStrategyConfiguration;
       4: areturn

  public net.sf.ehcache.config.ElementValueComparatorConfiguration getElementValueComparatorConfiguration();
    Code:
       0: aload_0
       1: getfield      #33                 // Field elementValueComparatorConfiguration:Lnet/sf/ehcache/config/ElementValueComparatorConfiguration;
       4: areturn

  public boolean isMaxBytesLocalHeapPercentageSet();
    Code:
       0: aload_0
       1: getfield      #169                // Field maxBytesLocalHeapPercentage:Ljava/lang/Integer;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public boolean isMaxBytesLocalOffHeapPercentageSet();
    Code:
       0: aload_0
       1: getfield      #193                // Field maxBytesLocalOffHeapPercentage:Ljava/lang/Integer;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public boolean isMaxBytesLocalDiskPercentageSet();
    Code:
       0: aload_0
       1: getfield      #197                // Field maxBytesLocalDiskPercentage:Ljava/lang/Integer;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public void setupFor(net.sf.ehcache.CacheManager);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_1
       3: invokevirtual #225                // Method setupFor:(Lnet/sf/ehcache/CacheManager;Z)V
       6: return

  public void setupFor(net.sf.ehcache.CacheManager, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #226                // Method net/sf/ehcache/CacheManager.getConfiguration:()Lnet/sf/ehcache/config/Configuration;
       5: invokevirtual #227                // Method validate:(Lnet/sf/ehcache/config/Configuration;)Ljava/util/Collection;
       8: astore_3
       9: aload_0
      10: aload_1
      11: invokevirtual #226                // Method net/sf/ehcache/CacheManager.getConfiguration:()Lnet/sf/ehcache/config/Configuration;
      14: invokevirtual #228                // Method configCachePools:(Lnet/sf/ehcache/config/Configuration;)V
      17: aload_3
      18: aload_0
      19: aload_1
      20: aload_1
      21: invokevirtual #226                // Method net/sf/ehcache/CacheManager.getConfiguration:()Lnet/sf/ehcache/config/Configuration;
      24: invokevirtual #229                // Method net/sf/ehcache/config/Configuration.getMaxBytesLocalHeap:()J
      27: aload_1
      28: invokevirtual #226                // Method net/sf/ehcache/CacheManager.getConfiguration:()Lnet/sf/ehcache/config/Configuration;
      31: invokevirtual #230                // Method net/sf/ehcache/config/Configuration.getMaxBytesLocalOffHeap:()J
      34: aload_1
      35: invokevirtual #226                // Method net/sf/ehcache/CacheManager.getConfiguration:()Lnet/sf/ehcache/config/Configuration;
      38: invokevirtual #231                // Method net/sf/ehcache/config/Configuration.getMaxBytesLocalDisk:()J
      41: invokevirtual #232                // Method verifyPoolAllocationsBeforeAddingTo:(Lnet/sf/ehcache/CacheManager;JJJ)Ljava/util/List;
      44: invokeinterface #233,  2          // InterfaceMethod java/util/Collection.addAll:(Ljava/util/Collection;)Z
      49: pop
      50: aload_3
      51: invokeinterface #234,  1          // InterfaceMethod java/util/Collection.isEmpty:()Z
      56: ifne          68
      59: new           #86                 // class net/sf/ehcache/config/InvalidConfigurationException
      62: dup
      63: aload_3
      64: invokespecial #235                // Method net/sf/ehcache/config/InvalidConfigurationException."<init>":(Ljava/util/Collection;)V
      67: athrow
      68: aload_0
      69: invokevirtual #147                // Method isTerracottaClustered:()Z
      72: ifne          80
      75: aload_0
      76: aload_1
      77: invokespecial #236                // Method updateCacheManagerPoolSizes:(Lnet/sf/ehcache/CacheManager;)V
      80: iload_2
      81: ifeq          89
      84: aload_0
      85: aload_1
      86: invokespecial #237                // Method registerCacheConfiguration:(Lnet/sf/ehcache/CacheManager;)V
      89: aload_1
      90: invokevirtual #226                // Method net/sf/ehcache/CacheManager.getConfiguration:()Lnet/sf/ehcache/config/Configuration;
      93: invokevirtual #238                // Method net/sf/ehcache/config/Configuration.isMaxBytesLocalHeapSet:()Z
      96: ifne          109
      99: aload_1
     100: invokevirtual #226                // Method net/sf/ehcache/CacheManager.getConfiguration:()Lnet/sf/ehcache/config/Configuration;
     103: invokevirtual #239                // Method net/sf/ehcache/config/Configuration.isMaxBytesLocalDiskSet:()Z
     106: ifeq          123
     109: aload_0
     110: new           #240                // class net/sf/ehcache/config/CacheConfiguration$1
     113: dup
     114: aload_0
     115: aload_1
     116: invokespecial #241                // Method net/sf/ehcache/config/CacheConfiguration$1."<init>":(Lnet/sf/ehcache/config/CacheConfiguration;Lnet/sf/ehcache/CacheManager;)V
     119: invokevirtual #242                // Method addConfigurationListener:(Lnet/sf/ehcache/config/CacheConfigurationListener;)Z
     122: pop
     123: aload_0
     124: aload_1
     125: invokespecial #243                // Method consolidatePersistenceSettings:(Lnet/sf/ehcache/CacheManager;)V
     128: aload_0
     129: getfield      #81                 // Field overflowToOffHeap:Ljava/lang/Boolean;
     132: ifnonnull     162
     135: aload_1
     136: invokevirtual #226                // Method net/sf/ehcache/CacheManager.getConfiguration:()Lnet/sf/ehcache/config/Configuration;
     139: invokevirtual #244                // Method net/sf/ehcache/config/Configuration.isMaxBytesLocalOffHeapSet:()Z
     142: ifne          154
     145: aload_0
     146: invokevirtual #190                // Method getMaxBytesLocalOffHeap:()J
     149: lconst_0
     150: lcmp
     151: ifle          162
     154: aload_0
     155: iconst_1
     156: invokestatic  #80                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
     159: putfield      #81                 // Field overflowToOffHeap:Ljava/lang/Boolean;
     162: aload_0
     163: getfield      #93                 // Field persistenceConfiguration:Lnet/sf/ehcache/config/PersistenceConfiguration;
     166: ifnull        193
     169: getstatic     #245                // Field net/sf/ehcache/config/PersistenceConfiguration$Strategy.LOCALTEMPSWAP:Lnet/sf/ehcache/config/PersistenceConfiguration$Strategy;
     172: aload_0
     173: getfield      #93                 // Field persistenceConfiguration:Lnet/sf/ehcache/config/PersistenceConfiguration;
     176: invokevirtual #246                // Method net/sf/ehcache/config/PersistenceConfiguration.getStrategy:()Lnet/sf/ehcache/config/PersistenceConfiguration$Strategy;
     179: invokevirtual #247                // Method net/sf/ehcache/config/PersistenceConfiguration$Strategy.equals:(Ljava/lang/Object;)Z
     182: ifeq          193
     185: aload_0
     186: iconst_1
     187: invokestatic  #80                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
     190: putfield      #90                 // Field overflowToDisk:Ljava/lang/Boolean;
     193: aload_0
     194: getfield      #90                 // Field overflowToDisk:Ljava/lang/Boolean;
     197: ifnonnull     210
     200: aload_1
     201: invokevirtual #226                // Method net/sf/ehcache/CacheManager.getConfiguration:()Lnet/sf/ehcache/config/Configuration;
     204: invokevirtual #239                // Method net/sf/ehcache/config/Configuration.isMaxBytesLocalDiskSet:()Z
     207: ifne          219
     210: aload_0
     211: invokevirtual #210                // Method getMaxBytesLocalDisk:()J
     214: lconst_0
     215: lcmp
     216: ifle          260
     219: aload_0
     220: getfield      #93                 // Field persistenceConfiguration:Lnet/sf/ehcache/config/PersistenceConfiguration;
     223: ifnull        252
     226: getstatic     #248                // Field net/sf/ehcache/config/PersistenceConfiguration$Strategy.LOCALRESTARTABLE:Lnet/sf/ehcache/config/PersistenceConfiguration$Strategy;
     229: aload_0
     230: getfield      #93                 // Field persistenceConfiguration:Lnet/sf/ehcache/config/PersistenceConfiguration;
     233: invokevirtual #246                // Method net/sf/ehcache/config/PersistenceConfiguration.getStrategy:()Lnet/sf/ehcache/config/PersistenceConfiguration$Strategy;
     236: invokevirtual #247                // Method net/sf/ehcache/config/PersistenceConfiguration$Strategy.equals:(Ljava/lang/Object;)Z
     239: ifeq          252
     242: new           #86                 // class net/sf/ehcache/config/InvalidConfigurationException
     245: dup
     246: ldc           #249                // String Cannot use localRestartable persistence and disk overflow in the same cache
     248: invokespecial #88                 // Method net/sf/ehcache/config/InvalidConfigurationException."<init>":(Ljava/lang/String;)V
     251: athrow
     252: aload_0
     253: iconst_1
     254: invokestatic  #80                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
     257: putfield      #90                 // Field overflowToDisk:Ljava/lang/Boolean;
     260: aload_0
     261: iload_2
     262: aload_1
     263: invokespecial #250                // Method warnMaxEntriesLocalHeap:(ZLnet/sf/ehcache/CacheManager;)V
     266: aload_0
     267: iload_2
     268: invokespecial #251                // Method warnMaxEntriesForOverflowToOffHeap:(Z)V
     271: aload_0
     272: invokespecial #252                // Method warnSizeOfPolicyConfiguration:()V
     275: aload_0
     276: aload_1
     277: invokespecial #253                // Method freezePoolUsages:(Lnet/sf/ehcache/CacheManager;)V
     280: return

  private void consolidatePersistenceSettings(net.sf.ehcache.CacheManager);
    Code:
       0: aload_0
       1: getfield      #93                 // Field persistenceConfiguration:Lnet/sf/ehcache/config/PersistenceConfiguration;
       4: ifnonnull     37
       7: aload_0
       8: getfield      #85                 // Field diskPersistent:Ljava/lang/Boolean;
      11: getstatic     #89                 // Field java/lang/Boolean.TRUE:Ljava/lang/Boolean;
      14: if_acmpne     117
      17: aload_0
      18: new           #254                // class net/sf/ehcache/config/PersistenceConfiguration
      21: dup
      22: invokespecial #255                // Method net/sf/ehcache/config/PersistenceConfiguration."<init>":()V
      25: getstatic     #245                // Field net/sf/ehcache/config/PersistenceConfiguration$Strategy.LOCALTEMPSWAP:Lnet/sf/ehcache/config/PersistenceConfiguration$Strategy;
      28: invokevirtual #256                // Method net/sf/ehcache/config/PersistenceConfiguration.strategy:(Lnet/sf/ehcache/config/PersistenceConfiguration$Strategy;)Lnet/sf/ehcache/config/PersistenceConfiguration;
      31: putfield      #93                 // Field persistenceConfiguration:Lnet/sf/ehcache/config/PersistenceConfiguration;
      34: goto          117
      37: getstatic     #257                // Field net/sf/ehcache/config/CacheConfiguration$2.$SwitchMap$net$sf$ehcache$config$PersistenceConfiguration$Strategy:[I
      40: aload_0
      41: getfield      #93                 // Field persistenceConfiguration:Lnet/sf/ehcache/config/PersistenceConfiguration;
      44: invokevirtual #246                // Method net/sf/ehcache/config/PersistenceConfiguration.getStrategy:()Lnet/sf/ehcache/config/PersistenceConfiguration$Strategy;
      47: invokevirtual #258                // Method net/sf/ehcache/config/PersistenceConfiguration$Strategy.ordinal:()I
      50: iaload
      51: tableswitch   { // 1 to 4
                     1: 80
                     2: 80
                     3: 90
                     4: 107
               default: 117
          }
      80: aload_0
      81: getstatic     #259                // Field java/lang/Boolean.FALSE:Ljava/lang/Boolean;
      84: putfield      #85                 // Field diskPersistent:Ljava/lang/Boolean;
      87: goto          117
      90: aload_0
      91: getfield      #85                 // Field diskPersistent:Ljava/lang/Boolean;
      94: ifnonnull     117
      97: aload_0
      98: getstatic     #259                // Field java/lang/Boolean.FALSE:Ljava/lang/Boolean;
     101: putfield      #85                 // Field diskPersistent:Ljava/lang/Boolean;
     104: goto          117
     107: aload_0
     108: getstatic     #89                 // Field java/lang/Boolean.TRUE:Ljava/lang/Boolean;
     111: putfield      #85                 // Field diskPersistent:Ljava/lang/Boolean;
     114: goto          117
     117: aload_0
     118: getfield      #93                 // Field persistenceConfiguration:Lnet/sf/ehcache/config/PersistenceConfiguration;
     121: ifnull        187
     124: aload_0
     125: getfield      #93                 // Field persistenceConfiguration:Lnet/sf/ehcache/config/PersistenceConfiguration;
     128: invokevirtual #260                // Method net/sf/ehcache/config/PersistenceConfiguration.getSynchronousWrites:()Z
     131: ifeq          187
     134: getstatic     #257                // Field net/sf/ehcache/config/CacheConfiguration$2.$SwitchMap$net$sf$ehcache$config$PersistenceConfiguration$Strategy:[I
     137: aload_0
     138: getfield      #93                 // Field persistenceConfiguration:Lnet/sf/ehcache/config/PersistenceConfiguration;
     141: invokevirtual #246                // Method net/sf/ehcache/config/PersistenceConfiguration.getStrategy:()Lnet/sf/ehcache/config/PersistenceConfiguration$Strategy;
     144: invokevirtual #258                // Method net/sf/ehcache/config/PersistenceConfiguration$Strategy.ordinal:()I
     147: iaload
     148: lookupswitch  { // 2
                     2: 176
                     3: 176
               default: 187
          }
     176: new           #86                 // class net/sf/ehcache/config/InvalidConfigurationException
     179: dup
     180: ldc_w         #261                // String Persistence: synchronousWrites=\"true\" is not supported with strategy \"localTempSwap\" or \"none\"
     183: invokespecial #88                 // Method net/sf/ehcache/config/InvalidConfigurationException."<init>":(Ljava/lang/String;)V
     186: athrow
     187: return

  private void warnMaxEntriesForOverflowToOffHeap(boolean);
    Code:
       0: aload_0
       1: getfield      #81                 // Field overflowToOffHeap:Ljava/lang/Boolean;
       4: ifnull        108
       7: aload_0
       8: getfield      #81                 // Field overflowToOffHeap:Ljava/lang/Boolean;
      11: invokevirtual #162                // Method java/lang/Boolean.booleanValue:()Z
      14: ifeq          108
      17: iload_1
      18: ifeq          108
      21: aload_0
      22: invokevirtual #174                // Method getMaxEntriesLocalHeap:()J
      25: lconst_0
      26: lcmp
      27: ifle          108
      30: aload_0
      31: invokevirtual #174                // Method getMaxEntriesLocalHeap:()J
      34: ldc2_w        #262                // long 100l
      37: lcmp
      38: ifge          108
      41: getstatic     #123                // Field LOG:Lorg/slf4j/Logger;
      44: new           #69                 // class java/lang/StringBuilder
      47: dup
      48: invokespecial #70                 // Method java/lang/StringBuilder."<init>":()V
      51: ldc_w         #264                // String The
      54: invokevirtual #71                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      57: aload_0
      58: invokevirtual #125                // Method getName:()Ljava/lang/String;
      61: invokevirtual #71                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      64: ldc_w         #265                // String  cache is configured for off-heap and has a maxEntriesLocalHeap/maxElementsInMemory of
      67: invokevirtual #71                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      70: aload_0
      71: invokevirtual #174                // Method getMaxEntriesLocalHeap:()J
      74: invokevirtual #266                // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      77: ldc_w         #267                // String .  It is recommended to set maxEntriesLocalHeap/maxElementsInMemory to at least
      80: invokevirtual #71                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      83: bipush        100
      85: invokevirtual #203                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      88: ldc_w         #268                // String  elements when using an off-heap store, otherwise performance
      91: invokevirtual #71                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      94: ldc_w         #269                // String will be seriously degraded.
      97: invokevirtual #71                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     100: invokevirtual #73                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     103: invokeinterface #133,  2          // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;)V
     108: return

  private void warnMaxEntriesLocalHeap(boolean, net.sf.ehcache.CacheManager);
    Code:
       0: aload_0
       1: invokevirtual #174                // Method getMaxEntriesLocalHeap:()J
       4: lconst_0
       5: lcmp
       6: ifne          87
       9: iload_1
      10: ifeq          87
      13: aload_0
      14: invokevirtual #196                // Method getMaxBytesLocalHeap:()J
      17: lconst_0
      18: lcmp
      19: ifne          87
      22: aload_2
      23: invokevirtual #226                // Method net/sf/ehcache/CacheManager.getConfiguration:()Lnet/sf/ehcache/config/Configuration;
      26: invokevirtual #238                // Method net/sf/ehcache/config/Configuration.isMaxBytesLocalHeapSet:()Z
      29: ifne          87
      32: getstatic     #123                // Field LOG:Lorg/slf4j/Logger;
      35: new           #69                 // class java/lang/StringBuilder
      38: dup
      39: invokespecial #70                 // Method java/lang/StringBuilder."<init>":()V
      42: ldc_w         #270                // String Cache:
      45: invokevirtual #71                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      48: aload_0
      49: invokevirtual #125                // Method getName:()Ljava/lang/String;
      52: invokevirtual #71                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      55: ldc_w         #271                // String  has a maxElementsInMemory of 0. This might lead to performance degradation or OutOfMemoryError at Terracotta client.
      58: invokevirtual #71                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      61: ldc_w         #272                // String From Ehcache 2.0 onwards this has been changed to mean a store
      64: invokevirtual #71                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      67: ldc_w         #273                // String  with no capacity limit. Set it to 1 if you want
      70: invokevirtual #71                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      73: ldc_w         #274                // String  no elements cached in memory
      76: invokevirtual #71                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      79: invokevirtual #73                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      82: invokeinterface #133,  2          // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;)V
      87: return

  private void warnSizeOfPolicyConfiguration();
    Code:
       0: aload_0
       1: invokevirtual #147                // Method isTerracottaClustered:()Z
       4: ifeq          57
       7: aload_0
       8: invokevirtual #275                // Method getSizeOfPolicyConfiguration:()Lnet/sf/ehcache/config/SizeOfPolicyConfiguration;
      11: ifnull        57
      14: getstatic     #123                // Field LOG:Lorg/slf4j/Logger;
      17: new           #69                 // class java/lang/StringBuilder
      20: dup
      21: invokespecial #70                 // Method java/lang/StringBuilder."<init>":()V
      24: ldc_w         #276                // String Terracotta clustered cache:
      27: invokevirtual #71                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      30: aload_0
      31: invokevirtual #125                // Method getName:()Ljava/lang/String;
      34: invokevirtual #71                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      37: ldc_w         #277                // String  has a sizeOf policy configuration specificed.
      40: invokevirtual #71                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      43: ldc_w         #278                // String SizeOfPolicyConfiguration is unsupported for Terracotta clustered caches.
      46: invokevirtual #71                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      49: invokevirtual #73                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      52: invokeinterface #133,  2          // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;)V
      57: return

  private void freezePoolUsages(net.sf.ehcache.CacheManager);
    Code:
       0: aload_0
       1: invokevirtual #196                // Method getMaxBytesLocalHeap:()J
       4: lconst_0
       5: lcmp
       6: ifle          19
       9: aload_0
      10: getstatic     #175                // Field net/sf/ehcache/config/CacheConfiguration$PoolUsage.Cache:Lnet/sf/ehcache/config/CacheConfiguration$PoolUsage;
      13: putfield      #104                // Field onHeapPoolUsage:Lnet/sf/ehcache/config/CacheConfiguration$PoolUsage;
      16: goto          46
      19: aload_1
      20: invokevirtual #226                // Method net/sf/ehcache/CacheManager.getConfiguration:()Lnet/sf/ehcache/config/Configuration;
      23: invokevirtual #238                // Method net/sf/ehcache/config/Configuration.isMaxBytesLocalHeapSet:()Z
      26: ifeq          39
      29: aload_0
      30: getstatic     #279                // Field net/sf/ehcache/config/CacheConfiguration$PoolUsage.CacheManager:Lnet/sf/ehcache/config/CacheConfiguration$PoolUsage;
      33: putfield      #104                // Field onHeapPoolUsage:Lnet/sf/ehcache/config/CacheConfiguration$PoolUsage;
      36: goto          46
      39: aload_0
      40: getstatic     #105                // Field net/sf/ehcache/config/CacheConfiguration$PoolUsage.None:Lnet/sf/ehcache/config/CacheConfiguration$PoolUsage;
      43: putfield      #104                // Field onHeapPoolUsage:Lnet/sf/ehcache/config/CacheConfiguration$PoolUsage;
      46: aload_0
      47: invokevirtual #190                // Method getMaxBytesLocalOffHeap:()J
      50: lconst_0
      51: lcmp
      52: ifle          65
      55: aload_0
      56: getstatic     #175                // Field net/sf/ehcache/config/CacheConfiguration$PoolUsage.Cache:Lnet/sf/ehcache/config/CacheConfiguration$PoolUsage;
      59: putfield      #205                // Field offHeapPoolUsage:Lnet/sf/ehcache/config/CacheConfiguration$PoolUsage;
      62: goto          92
      65: aload_1
      66: invokevirtual #226                // Method net/sf/ehcache/CacheManager.getConfiguration:()Lnet/sf/ehcache/config/Configuration;
      69: invokevirtual #244                // Method net/sf/ehcache/config/Configuration.isMaxBytesLocalOffHeapSet:()Z
      72: ifeq          85
      75: aload_0
      76: getstatic     #279                // Field net/sf/ehcache/config/CacheConfiguration$PoolUsage.CacheManager:Lnet/sf/ehcache/config/CacheConfiguration$PoolUsage;
      79: putfield      #205                // Field offHeapPoolUsage:Lnet/sf/ehcache/config/CacheConfiguration$PoolUsage;
      82: goto          92
      85: aload_0
      86: getstatic     #105                // Field net/sf/ehcache/config/CacheConfiguration$PoolUsage.None:Lnet/sf/ehcache/config/CacheConfiguration$PoolUsage;
      89: putfield      #205                // Field offHeapPoolUsage:Lnet/sf/ehcache/config/CacheConfiguration$PoolUsage;
      92: aload_0
      93: invokevirtual #147                // Method isTerracottaClustered:()Z
      96: ifeq          109
      99: aload_0
     100: getstatic     #105                // Field net/sf/ehcache/config/CacheConfiguration$PoolUsage.None:Lnet/sf/ehcache/config/CacheConfiguration$PoolUsage;
     103: putfield      #142                // Field onDiskPoolUsage:Lnet/sf/ehcache/config/CacheConfiguration$PoolUsage;
     106: goto          155
     109: aload_0
     110: invokevirtual #210                // Method getMaxBytesLocalDisk:()J
     113: lconst_0
     114: lcmp
     115: ifle          128
     118: aload_0
     119: getstatic     #175                // Field net/sf/ehcache/config/CacheConfiguration$PoolUsage.Cache:Lnet/sf/ehcache/config/CacheConfiguration$PoolUsage;
     122: putfield      #142                // Field onDiskPoolUsage:Lnet/sf/ehcache/config/CacheConfiguration$PoolUsage;
     125: goto          155
     128: aload_1
     129: invokevirtual #226                // Method net/sf/ehcache/CacheManager.getConfiguration:()Lnet/sf/ehcache/config/Configuration;
     132: invokevirtual #239                // Method net/sf/ehcache/config/Configuration.isMaxBytesLocalDiskSet:()Z
     135: ifeq          148
     138: aload_0
     139: getstatic     #279                // Field net/sf/ehcache/config/CacheConfiguration$PoolUsage.CacheManager:Lnet/sf/ehcache/config/CacheConfiguration$PoolUsage;
     142: putfield      #142                // Field onDiskPoolUsage:Lnet/sf/ehcache/config/CacheConfiguration$PoolUsage;
     145: goto          155
     148: aload_0
     149: getstatic     #105                // Field net/sf/ehcache/config/CacheConfiguration$PoolUsage.None:Lnet/sf/ehcache/config/CacheConfiguration$PoolUsage;
     152: putfield      #142                // Field onDiskPoolUsage:Lnet/sf/ehcache/config/CacheConfiguration$PoolUsage;
     155: return

  private void registerCacheConfiguration(net.sf.ehcache.CacheManager);
    Code:
       0: aload_1
       1: invokevirtual #226                // Method net/sf/ehcache/CacheManager.getConfiguration:()Lnet/sf/ehcache/config/Configuration;
       4: invokevirtual #280                // Method net/sf/ehcache/config/Configuration.getCacheConfigurations:()Ljava/util/Map;
       7: astore_2
       8: aload_2
       9: aload_0
      10: invokevirtual #125                // Method getName:()Ljava/lang/String;
      13: invokeinterface #281,  2          // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
      18: ifne          30
      21: aload_1
      22: invokevirtual #226                // Method net/sf/ehcache/CacheManager.getConfiguration:()Lnet/sf/ehcache/config/Configuration;
      25: aload_0
      26: iconst_0
      27: invokevirtual #282                // Method net/sf/ehcache/config/Configuration.addCache:(Lnet/sf/ehcache/config/CacheConfiguration;Z)V
      30: return

  private void updateCacheManagerPoolSizes(net.sf.ehcache.CacheManager);
    Code:
       0: aload_1
       1: invokevirtual #283                // Method net/sf/ehcache/CacheManager.getOnHeapPool:()Lnet/sf/ehcache/pool/Pool;
       4: ifnull        30
       7: aload_1
       8: invokevirtual #283                // Method net/sf/ehcache/CacheManager.getOnHeapPool:()Lnet/sf/ehcache/pool/Pool;
      11: aload_1
      12: invokevirtual #283                // Method net/sf/ehcache/CacheManager.getOnHeapPool:()Lnet/sf/ehcache/pool/Pool;
      15: invokeinterface #284,  1          // InterfaceMethod net/sf/ehcache/pool/Pool.getMaxSize:()J
      20: aload_0
      21: invokevirtual #196                // Method getMaxBytesLocalHeap:()J
      24: lsub
      25: invokeinterface #285,  3          // InterfaceMethod net/sf/ehcache/pool/Pool.setMaxSize:(J)V
      30: aload_1
      31: invokevirtual #286                // Method net/sf/ehcache/CacheManager.getOnDiskPool:()Lnet/sf/ehcache/pool/Pool;
      34: ifnull        60
      37: aload_1
      38: invokevirtual #286                // Method net/sf/ehcache/CacheManager.getOnDiskPool:()Lnet/sf/ehcache/pool/Pool;
      41: aload_1
      42: invokevirtual #286                // Method net/sf/ehcache/CacheManager.getOnDiskPool:()Lnet/sf/ehcache/pool/Pool;
      45: invokeinterface #284,  1          // InterfaceMethod net/sf/ehcache/pool/Pool.getMaxSize:()J
      50: aload_0
      51: invokevirtual #210                // Method getMaxBytesLocalDisk:()J
      54: lsub
      55: invokeinterface #285,  3          // InterfaceMethod net/sf/ehcache/pool/Pool.setMaxSize:(J)V
      60: return

  java.util.List<net.sf.ehcache.config.ConfigError> verifyPoolAllocationsBeforeAddingTo(net.sf.ehcache.CacheManager, long, long, long);
    Code:
       0: new           #15                 // class java/util/ArrayList
       3: dup
       4: invokespecial #16                 // Method java/util/ArrayList."<init>":()V
       7: astore        8
       9: lconst_0
      10: lstore        9
      12: lconst_0
      13: lstore        11
      15: lconst_0
      16: lstore        13
      18: iconst_0
      19: istore        15
      21: aload_1
      22: invokestatic  #287                // Method net/sf/ehcache/config/Configuration.getAllActiveCaches:(Lnet/sf/ehcache/CacheManager;)Ljava/util/Set;
      25: invokeinterface #181,  1          // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      30: astore        16
      32: aload         16
      34: invokeinterface #57,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      39: ifeq          121
      42: aload         16
      44: invokeinterface #58,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      49: checkcast     #288                // class net/sf/ehcache/Cache
      52: astore        17
      54: aload         17
      56: invokevirtual #289                // Method net/sf/ehcache/Cache.getName:()Ljava/lang/String;
      59: aload_0
      60: invokevirtual #125                // Method getName:()Ljava/lang/String;
      63: invokevirtual #290                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      66: ifne          74
      69: iload         15
      71: ifeq          78
      74: iconst_1
      75: goto          79
      78: iconst_0
      79: istore        15
      81: aload         17
      83: invokevirtual #291                // Method net/sf/ehcache/Cache.getCacheConfiguration:()Lnet/sf/ehcache/config/CacheConfiguration;
      86: astore        18
      88: lload         9
      90: aload         18
      92: invokevirtual #196                // Method getMaxBytesLocalHeap:()J
      95: ladd
      96: lstore        9
      98: lload         11
     100: aload         18
     102: invokevirtual #190                // Method getMaxBytesLocalOffHeap:()J
     105: ladd
     106: lstore        11
     108: lload         13
     110: aload         18
     112: invokevirtual #210                // Method getMaxBytesLocalDisk:()J
     115: ladd
     116: lstore        13
     118: goto          32
     121: iload         15
     123: ifne          153
     126: lload         9
     128: aload_0
     129: invokevirtual #196                // Method getMaxBytesLocalHeap:()J
     132: ladd
     133: lstore        9
     135: lload         11
     137: aload_0
     138: invokevirtual #190                // Method getMaxBytesLocalOffHeap:()J
     141: ladd
     142: lstore        11
     144: lload         13
     146: aload_0
     147: invokevirtual #210                // Method getMaxBytesLocalDisk:()J
     150: ladd
     151: lstore        13
     153: aload_0
     154: lload_2
     155: aload         8
     157: lload         9
     159: invokespecial #292                // Method verifyLocalHeap:(JLjava/util/List;J)V
     162: aload_0
     163: lload         4
     165: aload         8
     167: lload         11
     169: invokespecial #293                // Method verifyLocalOffHeap:(JLjava/util/List;J)V
     172: aload_0
     173: lload         6
     175: aload         8
     177: lload         13
     179: invokespecial #294                // Method verifyLocalDisk:(JLjava/util/List;J)V
     182: lload_2
     183: lconst_0
     184: lcmp
     185: ifle          208
     188: lload_2
     189: lload         9
     191: lsub
     192: lconst_0
     193: lcmp
     194: ifne          208
     197: getstatic     #123                // Field LOG:Lorg/slf4j/Logger;
     200: ldc_w         #295                // String All the onHeap memory has been assigned, there is none left for dynamically added caches
     203: invokeinterface #133,  2          // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;)V
     208: invokestatic  #296                // Method java/lang/Runtime.getRuntime:()Ljava/lang/Runtime;
     211: invokevirtual #297                // Method java/lang/Runtime.maxMemory:()J
     214: lload         9
     216: lsub
     217: lconst_0
     218: lcmp
     219: ifge          240
     222: aload         8
     224: new           #298                // class net/sf/ehcache/config/ConfigError
     227: dup
     228: ldc_w         #299                // String You\'ve assigned more memory to the on-heap than the VM can sustain, please adjust your -Xmx setting accordingly
     231: invokespecial #300                // Method net/sf/ehcache/config/ConfigError."<init>":(Ljava/lang/String;)V
     234: invokeinterface #61,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     239: pop
     240: lload         9
     242: l2f
     243: invokestatic  #296                // Method java/lang/Runtime.getRuntime:()Ljava/lang/Runtime;
     246: invokevirtual #297                // Method java/lang/Runtime.maxMemory:()J
     249: l2f
     250: fdiv
     251: f2d
     252: ldc2_w        #301                // double 0.8d
     255: dcmpl
     256: ifle          270
     259: getstatic     #123                // Field LOG:Lorg/slf4j/Logger;
     262: ldc_w         #303                // String You\'ve assigned over 80% of your VM\'s heap to be used by the cache!
     265: invokeinterface #133,  2          // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;)V
     270: aload         8
     272: areturn

  private void verifyLocalDisk(long, java.util.List<net.sf.ehcache.config.ConfigError>, long);
    Code:
       0: aload_0
       1: invokevirtual #304                // Method isMaxBytesLocalDiskPercentageSet:()Z
       4: ifne          16
       7: aload_0
       8: invokevirtual #210                // Method getMaxBytesLocalDisk:()J
      11: lconst_0
      12: lcmp
      13: ifle          73
      16: lload_1
      17: lconst_0
      18: lcmp
      19: ifle          73
      22: lload_1
      23: lload         4
      25: lsub
      26: lconst_0
      27: lcmp
      28: ifge          73
      31: aload_3
      32: new           #298                // class net/sf/ehcache/config/ConfigError
      35: dup
      36: new           #69                 // class java/lang/StringBuilder
      39: dup
      40: invokespecial #70                 // Method java/lang/StringBuilder."<init>":()V
      43: ldc           #124                // String Cache \'
      45: invokevirtual #71                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      48: aload_0
      49: invokevirtual #125                // Method getName:()Ljava/lang/String;
      52: invokevirtual #71                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      55: ldc_w         #305                // String \' over-allocates CacheManager\'s localOnDisk limit!
      58: invokevirtual #71                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      61: invokevirtual #73                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      64: invokespecial #300                // Method net/sf/ehcache/config/ConfigError."<init>":(Ljava/lang/String;)V
      67: invokeinterface #61,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      72: pop
      73: return

  private void verifyLocalOffHeap(long, java.util.List<net.sf.ehcache.config.ConfigError>, long);
    Code:
       0: aload_0
       1: invokevirtual #306                // Method isMaxBytesLocalOffHeapPercentageSet:()Z
       4: ifne          16
       7: aload_0
       8: invokevirtual #190                // Method getMaxBytesLocalOffHeap:()J
      11: lconst_0
      12: lcmp
      13: ifle          73
      16: lload_1
      17: lconst_0
      18: lcmp
      19: ifle          73
      22: lload_1
      23: lload         4
      25: lsub
      26: lconst_0
      27: lcmp
      28: ifge          73
      31: aload_3
      32: new           #298                // class net/sf/ehcache/config/ConfigError
      35: dup
      36: new           #69                 // class java/lang/StringBuilder
      39: dup
      40: invokespecial #70                 // Method java/lang/StringBuilder."<init>":()V
      43: ldc           #124                // String Cache \'
      45: invokevirtual #71                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      48: aload_0
      49: invokevirtual #125                // Method getName:()Ljava/lang/String;
      52: invokevirtual #71                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      55: ldc_w         #307                // String \' over-allocates CacheManager\'s localOffHeap limit!
      58: invokevirtual #71                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      61: invokevirtual #73                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      64: invokespecial #300                // Method net/sf/ehcache/config/ConfigError."<init>":(Ljava/lang/String;)V
      67: invokeinterface #61,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      72: pop
      73: return

  private void verifyLocalHeap(long, java.util.List<net.sf.ehcache.config.ConfigError>, long);
    Code:
       0: aload_0
       1: invokevirtual #308                // Method isMaxBytesLocalHeapPercentageSet:()Z
       4: ifne          16
       7: aload_0
       8: invokevirtual #196                // Method getMaxBytesLocalHeap:()J
      11: lconst_0
      12: lcmp
      13: ifle          73
      16: lload_1
      17: lconst_0
      18: lcmp
      19: ifle          73
      22: lload_1
      23: lload         4
      25: lsub
      26: lconst_0
      27: lcmp
      28: ifge          73
      31: aload_3
      32: new           #298                // class net/sf/ehcache/config/ConfigError
      35: dup
      36: new           #69                 // class java/lang/StringBuilder
      39: dup
      40: invokespecial #70                 // Method java/lang/StringBuilder."<init>":()V
      43: ldc           #124                // String Cache \'
      45: invokevirtual #71                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      48: aload_0
      49: invokevirtual #125                // Method getName:()Ljava/lang/String;
      52: invokevirtual #71                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      55: ldc_w         #309                // String \' over-allocates CacheManager\'s localOnHeap limit!
      58: invokevirtual #71                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      61: invokevirtual #73                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      64: invokespecial #300                // Method net/sf/ehcache/config/ConfigError."<init>":(Ljava/lang/String;)V
      67: invokeinterface #61,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      72: pop
      73: return

  void configCachePools(net.sf.ehcache.config.Configuration);
    Code:
       0: aload_0
       1: invokevirtual #310                // Method getMaxBytesLocalHeapPercentage:()Ljava/lang/Integer;
       4: ifnull        33
       7: aload_1
       8: invokevirtual #229                // Method net/sf/ehcache/config/Configuration.getMaxBytesLocalHeap:()J
      11: aload_0
      12: invokevirtual #310                // Method getMaxBytesLocalHeapPercentage:()Ljava/lang/Integer;
      15: invokevirtual #107                // Method java/lang/Integer.intValue:()I
      18: i2l
      19: lmul
      20: ldc2_w        #262                // long 100l
      23: ldiv
      24: lstore_2
      25: aload_0
      26: lload_2
      27: invokestatic  #171                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      30: invokevirtual #172                // Method setMaxBytesLocalHeap:(Ljava/lang/Long;)V
      33: aload_0
      34: getfield      #205                // Field offHeapPoolUsage:Lnet/sf/ehcache/config/CacheConfiguration$PoolUsage;
      37: ifnonnull     73
      40: aload_0
      41: invokevirtual #311                // Method getMaxBytesLocalOffHeapPercentage:()Ljava/lang/Integer;
      44: ifnull        73
      47: aload_1
      48: invokevirtual #230                // Method net/sf/ehcache/config/Configuration.getMaxBytesLocalOffHeap:()J
      51: aload_0
      52: invokevirtual #311                // Method getMaxBytesLocalOffHeapPercentage:()Ljava/lang/Integer;
      55: invokevirtual #107                // Method java/lang/Integer.intValue:()I
      58: i2l
      59: lmul
      60: ldc2_w        #262                // long 100l
      63: ldiv
      64: lstore_2
      65: aload_0
      66: lload_2
      67: invokestatic  #171                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      70: invokevirtual #194                // Method setMaxBytesLocalOffHeap:(Ljava/lang/Long;)V
      73: aload_0
      74: invokevirtual #312                // Method getMaxBytesLocalDiskPercentage:()Ljava/lang/Integer;
      77: ifnull        106
      80: aload_1
      81: invokevirtual #231                // Method net/sf/ehcache/config/Configuration.getMaxBytesLocalDisk:()J
      84: aload_0
      85: invokevirtual #312                // Method getMaxBytesLocalDiskPercentage:()Ljava/lang/Integer;
      88: invokevirtual #107                // Method java/lang/Integer.intValue:()I
      91: i2l
      92: lmul
      93: ldc2_w        #262                // long 100l
      96: ldiv
      97: lstore_2
      98: aload_0
      99: lload_2
     100: invokestatic  #171                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     103: invokevirtual #212                // Method setMaxBytesLocalDisk:(Ljava/lang/Long;)V
     106: return

  public java.util.Collection<net.sf.ehcache.config.ConfigError> validate(net.sf.ehcache.config.Configuration);
    Code:
       0: new           #15                 // class java/util/ArrayList
       3: dup
       4: invokespecial #16                 // Method java/util/ArrayList."<init>":()V
       7: astore_2
       8: aload_0
       9: aload_1
      10: aload_2
      11: invokespecial #313                // Method verifyClusteredCacheConfiguration:(Lnet/sf/ehcache/config/Configuration;Ljava/util/Collection;)V
      14: aload_0
      15: getfield      #36                 // Field maxEntriesLocalHeap:Ljava/lang/Integer;
      18: ifnonnull     56
      21: aload_1
      22: invokevirtual #238                // Method net/sf/ehcache/config/Configuration.isMaxBytesLocalHeapSet:()Z
      25: ifne          56
      28: aload_0
      29: getfield      #164                // Field maxBytesLocalHeap:Ljava/lang/Long;
      32: ifnonnull     56
      35: aload_2
      36: new           #314                // class net/sf/ehcache/config/CacheConfigError
      39: dup
      40: ldc_w         #315                // String If your CacheManager has no maxBytesLocalHeap set, you need to either set maxEntriesLocalHeap or maxBytesLocalHeap at the Cache level
      43: aload_0
      44: invokevirtual #125                // Method getName:()Ljava/lang/String;
      47: invokespecial #316                // Method net/sf/ehcache/config/CacheConfigError."<init>":(Ljava/lang/String;Ljava/lang/String;)V
      50: invokeinterface #317,  2          // InterfaceMethod java/util/Collection.add:(Ljava/lang/Object;)Z
      55: pop
      56: aload_1
      57: invokevirtual #238                // Method net/sf/ehcache/config/Configuration.isMaxBytesLocalHeapSet:()Z
      60: ifeq          96
      63: invokestatic  #296                // Method java/lang/Runtime.getRuntime:()Ljava/lang/Runtime;
      66: invokevirtual #297                // Method java/lang/Runtime.maxMemory:()J
      69: aload_1
      70: invokevirtual #229                // Method net/sf/ehcache/config/Configuration.getMaxBytesLocalHeap:()J
      73: lsub
      74: lconst_0
      75: lcmp
      76: ifge          96
      79: aload_2
      80: new           #298                // class net/sf/ehcache/config/ConfigError
      83: dup
      84: ldc_w         #299                // String You\'ve assigned more memory to the on-heap than the VM can sustain, please adjust your -Xmx setting accordingly
      87: invokespecial #300                // Method net/sf/ehcache/config/ConfigError."<init>":(Ljava/lang/String;)V
      90: invokeinterface #317,  2          // InterfaceMethod java/util/Collection.add:(Ljava/lang/Object;)Z
      95: pop
      96: aload_0
      97: getfield      #93                 // Field persistenceConfiguration:Lnet/sf/ehcache/config/PersistenceConfiguration;
     100: ifnull        130
     103: aload_0
     104: getfield      #93                 // Field persistenceConfiguration:Lnet/sf/ehcache/config/PersistenceConfiguration;
     107: invokevirtual #246                // Method net/sf/ehcache/config/PersistenceConfiguration.getStrategy:()Lnet/sf/ehcache/config/PersistenceConfiguration$Strategy;
     110: ifnonnull     130
     113: aload_2
     114: new           #298                // class net/sf/ehcache/config/ConfigError
     117: dup
     118: ldc_w         #318                // String Persistence configuration found with no strategy set.
     121: invokespecial #300                // Method net/sf/ehcache/config/ConfigError."<init>":(Ljava/lang/String;)V
     124: invokeinterface #317,  2          // InterfaceMethod java/util/Collection.add:(Ljava/lang/Object;)Z
     129: pop
     130: aload_2
     131: aload_0
     132: aload_1
     133: invokevirtual #319                // Method validateCachePools:(Lnet/sf/ehcache/config/Configuration;)Ljava/util/List;
     136: invokeinterface #233,  2          // InterfaceMethod java/util/Collection.addAll:(Ljava/util/Collection;)Z
     141: pop
     142: aload_2
     143: areturn

  private void verifyClusteredCacheConfiguration(net.sf.ehcache.config.Configuration, java.util.Collection<net.sf.ehcache.config.ConfigError>);
    Code:
       0: aload_0
       1: invokevirtual #147                // Method isTerracottaClustered:()Z
       4: ifne          8
       7: return
       8: aload_0
       9: invokevirtual #320                // Method getPinningConfiguration:()Lnet/sf/ehcache/config/PinningConfiguration;
      12: ifnull        56
      15: aload_0
      16: invokevirtual #320                // Method getPinningConfiguration:()Lnet/sf/ehcache/config/PinningConfiguration;
      19: invokevirtual #321                // Method net/sf/ehcache/config/PinningConfiguration.getStore:()Lnet/sf/ehcache/config/PinningConfiguration$Store;
      22: getstatic     #322                // Field net/sf/ehcache/config/PinningConfiguration$Store.INCACHE:Lnet/sf/ehcache/config/PinningConfiguration$Store;
      25: if_acmpne     56
      28: aload_0
      29: invokevirtual #323                // Method getMaxElementsOnDisk:()I
      32: ifeq          56
      35: aload_2
      36: new           #314                // class net/sf/ehcache/config/CacheConfigError
      39: dup
      40: ldc_w         #324                // String maxElementsOnDisk may not be used on a pinned cache.
      43: aload_0
      44: invokevirtual #125                // Method getName:()Ljava/lang/String;
      47: invokespecial #316                // Method net/sf/ehcache/config/CacheConfigError."<init>":(Ljava/lang/String;Ljava/lang/String;)V
      50: invokeinterface #317,  2          // InterfaceMethod java/util/Collection.add:(Ljava/lang/Object;)Z
      55: pop
      56: aload_0
      57: getfield      #151                // Field maxEntriesLocalDiskExplicitlySet:Z
      60: ifeq          84
      63: aload_2
      64: new           #314                // class net/sf/ehcache/config/CacheConfigError
      67: dup
      68: ldc_w         #325                // String You can\'t set maxEntriesLocalDisk when clustering your cache with Terracotta, local disks won\'t be used! To control elements going in the cache cluster wide, use maxElementsOnDisk instead
      71: aload_0
      72: invokevirtual #125                // Method getName:()Ljava/lang/String;
      75: invokespecial #316                // Method net/sf/ehcache/config/CacheConfigError."<init>":(Ljava/lang/String;Ljava/lang/String;)V
      78: invokeinterface #317,  2          // InterfaceMethod java/util/Collection.add:(Ljava/lang/Object;)Z
      83: pop
      84: aload_0
      85: getfield      #213                // Field maxBytesLocalDiskExplicitlySet:Z
      88: ifeq          112
      91: aload_2
      92: new           #314                // class net/sf/ehcache/config/CacheConfigError
      95: dup
      96: ldc_w         #326                // String You can\'t set maxBytesLocalDisk when clustering your cache with Terracotta
      99: aload_0
     100: invokevirtual #125                // Method getName:()Ljava/lang/String;
     103: invokespecial #316                // Method net/sf/ehcache/config/CacheConfigError."<init>":(Ljava/lang/String;Ljava/lang/String;)V
     106: invokeinterface #317,  2          // InterfaceMethod java/util/Collection.add:(Ljava/lang/Object;)Z
     111: pop
     112: aload_0
     113: aload_1
     114: aload_2
     115: invokespecial #327                // Method validateTerracottaConfig:(Lnet/sf/ehcache/config/Configuration;Ljava/util/Collection;)V
     118: return

  java.util.List<net.sf.ehcache.config.CacheConfigError> validateCachePools(net.sf.ehcache.config.Configuration);
    Code:
       0: new           #15                 // class java/util/ArrayList
       3: dup
       4: invokespecial #16                 // Method java/util/ArrayList."<init>":()V
       7: astore_2
       8: aload_1
       9: invokevirtual #238                // Method net/sf/ehcache/config/Configuration.isMaxBytesLocalHeapSet:()Z
      12: ifeq          45
      15: aload_0
      16: invokevirtual #174                // Method getMaxEntriesLocalHeap:()J
      19: lconst_0
      20: lcmp
      21: ifle          45
      24: aload_2
      25: new           #314                // class net/sf/ehcache/config/CacheConfigError
      28: dup
      29: ldc_w         #328                // String MaxElementsInMemory is not compatible with MaxBytesLocalHeap set on cache manager
      32: aload_0
      33: invokevirtual #125                // Method getName:()Ljava/lang/String;
      36: invokespecial #316                // Method net/sf/ehcache/config/CacheConfigError."<init>":(Ljava/lang/String;Ljava/lang/String;)V
      39: invokeinterface #61,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      44: pop
      45: aload_0
      46: invokevirtual #196                // Method getMaxBytesLocalHeap:()J
      49: lconst_0
      50: lcmp
      51: ifle          84
      54: aload_0
      55: invokevirtual #174                // Method getMaxEntriesLocalHeap:()J
      58: lconst_0
      59: lcmp
      60: ifle          84
      63: aload_2
      64: new           #314                // class net/sf/ehcache/config/CacheConfigError
      67: dup
      68: ldc_w         #329                // String MaxElementsInMemory is not compatible with MaxBytesLocalHeap set on cache
      71: aload_0
      72: invokevirtual #125                // Method getName:()Ljava/lang/String;
      75: invokespecial #316                // Method net/sf/ehcache/config/CacheConfigError."<init>":(Ljava/lang/String;Ljava/lang/String;)V
      78: invokeinterface #61,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      83: pop
      84: aload_0
      85: invokevirtual #308                // Method isMaxBytesLocalHeapPercentageSet:()Z
      88: ifeq          119
      91: aload_1
      92: invokevirtual #238                // Method net/sf/ehcache/config/Configuration.isMaxBytesLocalHeapSet:()Z
      95: ifne          119
      98: aload_2
      99: new           #314                // class net/sf/ehcache/config/CacheConfigError
     102: dup
     103: ldc_w         #330                // String Defines a percentage maxBytesOnHeap value but no CacheManager wide value was configured
     106: aload_0
     107: invokevirtual #125                // Method getName:()Ljava/lang/String;
     110: invokespecial #316                // Method net/sf/ehcache/config/CacheConfigError."<init>":(Ljava/lang/String;Ljava/lang/String;)V
     113: invokeinterface #61,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     118: pop
     119: aload_0
     120: invokevirtual #306                // Method isMaxBytesLocalOffHeapPercentageSet:()Z
     123: ifeq          154
     126: aload_1
     127: invokevirtual #244                // Method net/sf/ehcache/config/Configuration.isMaxBytesLocalOffHeapSet:()Z
     130: ifne          154
     133: aload_2
     134: new           #314                // class net/sf/ehcache/config/CacheConfigError
     137: dup
     138: ldc_w         #331                // String Defines a percentage maxBytesOffHeap value but no CacheManager wide value was configured
     141: aload_0
     142: invokevirtual #125                // Method getName:()Ljava/lang/String;
     145: invokespecial #316                // Method net/sf/ehcache/config/CacheConfigError."<init>":(Ljava/lang/String;Ljava/lang/String;)V
     148: invokeinterface #61,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     153: pop
     154: aload_0
     155: invokevirtual #304                // Method isMaxBytesLocalDiskPercentageSet:()Z
     158: ifeq          189
     161: aload_1
     162: invokevirtual #239                // Method net/sf/ehcache/config/Configuration.isMaxBytesLocalDiskSet:()Z
     165: ifne          189
     168: aload_2
     169: new           #314                // class net/sf/ehcache/config/CacheConfigError
     172: dup
     173: ldc_w         #332                // String Defines a percentage maxBytesOnDisk value but no CacheManager wide value was configured
     176: aload_0
     177: invokevirtual #125                // Method getName:()Ljava/lang/String;
     180: invokespecial #316                // Method net/sf/ehcache/config/CacheConfigError."<init>":(Ljava/lang/String;Ljava/lang/String;)V
     183: invokeinterface #61,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     188: pop
     189: aload_2
     190: areturn

  private void validateTerracottaConfig(net.sf.ehcache.config.Configuration, java.util.Collection<net.sf.ehcache.config.ConfigError>);
    Code:
       0: aload_1
       1: invokevirtual #333                // Method net/sf/ehcache/config/Configuration.getTerracottaConfiguration:()Lnet/sf/ehcache/config/TerracottaClientConfiguration;
       4: astore_3
       5: aload_3
       6: ifnull        47
       9: aload_3
      10: invokevirtual #334                // Method net/sf/ehcache/config/TerracottaClientConfiguration.isRejoin:()Z
      13: ifeq          47
      16: aload_0
      17: invokevirtual #335                // Method getTerracottaConfiguration:()Lnet/sf/ehcache/config/TerracottaConfiguration;
      20: invokevirtual #336                // Method net/sf/ehcache/config/TerracottaConfiguration.isNonstopEnabled:()Z
      23: ifne          47
      26: aload_2
      27: new           #314                // class net/sf/ehcache/config/CacheConfigError
      30: dup
      31: ldc_w         #337                // String Terracotta clustered caches must be nonstop when rejoin is enabled.
      34: aload_0
      35: invokevirtual #125                // Method getName:()Ljava/lang/String;
      38: invokespecial #316                // Method net/sf/ehcache/config/CacheConfigError."<init>":(Ljava/lang/String;Ljava/lang/String;)V
      41: invokeinterface #317,  2          // InterfaceMethod java/util/Collection.add:(Ljava/lang/Object;)Z
      46: pop
      47: return

  public boolean isCountBasedTuned();
    Code:
       0: aload_0
       1: getfield      #36                 // Field maxEntriesLocalHeap:Ljava/lang/Integer;
       4: ifnull        17
       7: aload_0
       8: getfield      #36                 // Field maxEntriesLocalHeap:Ljava/lang/Integer;
      11: invokevirtual #107                // Method java/lang/Integer.intValue:()I
      14: ifgt          24
      17: aload_0
      18: getfield      #2                  // Field maxElementsOnDisk:I
      21: ifle          28
      24: iconst_1
      25: goto          29
      28: iconst_0
      29: ireturn

  public boolean isOverflowToOffHeapSet();
    Code:
       0: aload_0
       1: getfield      #81                 // Field overflowToOffHeap:Ljava/lang/Boolean;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public final void addCacheEventListenerFactory(net.sf.ehcache.config.CacheConfiguration$CacheEventListenerFactoryConfiguration);
    Code:
       0: aload_0
       1: invokespecial #75                 // Method checkDynamicChange:()V
       4: aload_0
       5: getfield      #17                 // Field cacheEventListenerConfigurations:Ljava/util/List;
       8: aload_1
       9: invokeinterface #61,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      14: pop
      15: aload_0
      16: invokevirtual #137                // Method validateConfiguration:()V
      19: return

  public final net.sf.ehcache.config.CacheConfiguration cacheEventListenerFactory(net.sf.ehcache.config.CacheConfiguration$CacheEventListenerFactoryConfiguration);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #338                // Method addCacheEventListenerFactory:(Lnet/sf/ehcache/config/CacheConfiguration$CacheEventListenerFactoryConfiguration;)V
       5: aload_0
       6: areturn

  public final void addCacheExtensionFactory(net.sf.ehcache.config.CacheConfiguration$CacheExtensionFactoryConfiguration);
    Code:
       0: aload_0
       1: invokespecial #75                 // Method checkDynamicChange:()V
       4: aload_0
       5: getfield      #18                 // Field cacheExtensionConfigurations:Ljava/util/List;
       8: aload_1
       9: invokeinterface #61,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      14: pop
      15: return

  public final net.sf.ehcache.config.CacheConfiguration cacheExtensionFactory(net.sf.ehcache.config.CacheConfiguration$CacheExtensionFactoryConfiguration);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #339                // Method addCacheExtensionFactory:(Lnet/sf/ehcache/config/CacheConfiguration$CacheExtensionFactoryConfiguration;)V
       5: aload_0
       6: areturn

  public final void addBootstrapCacheLoaderFactory(net.sf.ehcache.config.CacheConfiguration$BootstrapCacheLoaderFactoryConfiguration);
    Code:
       0: aload_0
       1: invokespecial #75                 // Method checkDynamicChange:()V
       4: aload_0
       5: aload_1
       6: putfield      #44                 // Field bootstrapCacheLoaderFactoryConfiguration:Lnet/sf/ehcache/config/CacheConfiguration$BootstrapCacheLoaderFactoryConfiguration;
       9: return

  public final net.sf.ehcache.config.CacheConfiguration bootstrapCacheLoaderFactory(net.sf.ehcache.config.CacheConfiguration$BootstrapCacheLoaderFactoryConfiguration);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #340                // Method addBootstrapCacheLoaderFactory:(Lnet/sf/ehcache/config/CacheConfiguration$BootstrapCacheLoaderFactoryConfiguration;)V
       5: aload_0
       6: areturn

  public final void addCacheExceptionHandlerFactory(net.sf.ehcache.config.CacheConfiguration$CacheExceptionHandlerFactoryConfiguration);
    Code:
       0: aload_0
       1: invokespecial #75                 // Method checkDynamicChange:()V
       4: aload_0
       5: aload_1
       6: putfield      #47                 // Field cacheExceptionHandlerFactoryConfiguration:Lnet/sf/ehcache/config/CacheConfiguration$CacheExceptionHandlerFactoryConfiguration;
       9: return

  public final net.sf.ehcache.config.CacheConfiguration cacheExceptionHandlerFactory(net.sf.ehcache.config.CacheConfiguration$CacheExceptionHandlerFactoryConfiguration);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #341                // Method addCacheExceptionHandlerFactory:(Lnet/sf/ehcache/config/CacheConfiguration$CacheExceptionHandlerFactoryConfiguration;)V
       5: aload_0
       6: areturn

  public final void addCacheLoaderFactory(net.sf.ehcache.config.CacheConfiguration$CacheLoaderFactoryConfiguration);
    Code:
       0: aload_0
       1: invokespecial #75                 // Method checkDynamicChange:()V
       4: aload_0
       5: getfield      #21                 // Field cacheLoaderConfigurations:Ljava/util/List;
       8: aload_1
       9: invokeinterface #61,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      14: pop
      15: return

  public final void addCacheDecoratorFactory(net.sf.ehcache.config.CacheConfiguration$CacheDecoratorFactoryConfiguration);
    Code:
       0: aload_0
       1: invokespecial #75                 // Method checkDynamicChange:()V
       4: aload_0
       5: getfield      #22                 // Field cacheDecoratorConfigurations:Ljava/util/List;
       8: aload_1
       9: invokeinterface #61,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      14: pop
      15: return

  public final net.sf.ehcache.config.CacheConfiguration cacheLoaderFactory(net.sf.ehcache.config.CacheConfiguration$CacheLoaderFactoryConfiguration);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #342                // Method addCacheLoaderFactory:(Lnet/sf/ehcache/config/CacheConfiguration$CacheLoaderFactoryConfiguration;)V
       5: aload_0
       6: areturn

  public final void addTerracotta(net.sf.ehcache.config.TerracottaConfiguration);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #50                 // Field terracottaConfiguration:Lnet/sf/ehcache/config/TerracottaConfiguration;
       5: aload_0
       6: invokevirtual #137                // Method validateConfiguration:()V
       9: return

  public final void addPinning(net.sf.ehcache.config.PinningConfiguration);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #343                // Field pinningConfiguration:Lnet/sf/ehcache/config/PinningConfiguration;
       5: aload_0
       6: invokevirtual #137                // Method validateConfiguration:()V
       9: return

  public final net.sf.ehcache.config.CacheConfiguration pinning(net.sf.ehcache.config.PinningConfiguration);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #344                // Method addPinning:(Lnet/sf/ehcache/config/PinningConfiguration;)V
       5: aload_0
       6: areturn

  public final net.sf.ehcache.config.CacheConfiguration terracotta(net.sf.ehcache.config.TerracottaConfiguration);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #345                // Method addTerracotta:(Lnet/sf/ehcache/config/TerracottaConfiguration;)V
       5: aload_0
       6: areturn

  public final net.sf.ehcache.config.CacheConfiguration searchable(net.sf.ehcache.config.Searchable);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #346                // Method addSearchable:(Lnet/sf/ehcache/config/Searchable;)V
       5: aload_0
       6: areturn

  public final void addCacheWriter(net.sf.ehcache.config.CacheWriterConfiguration);
    Code:
       0: aconst_null
       1: aload_1
       2: if_acmpne     19
       5: aload_0
       6: new           #347                // class net/sf/ehcache/config/CacheWriterConfiguration
       9: dup
      10: invokespecial #348                // Method net/sf/ehcache/config/CacheWriterConfiguration."<init>":()V
      13: putfield      #20                 // Field cacheWriterConfiguration:Lnet/sf/ehcache/config/CacheWriterConfiguration;
      16: goto          24
      19: aload_0
      20: aload_1
      21: putfield      #20                 // Field cacheWriterConfiguration:Lnet/sf/ehcache/config/CacheWriterConfiguration;
      24: return

  public final net.sf.ehcache.config.CacheConfiguration cacheWriter(net.sf.ehcache.config.CacheWriterConfiguration);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #349                // Method addCacheWriter:(Lnet/sf/ehcache/config/CacheWriterConfiguration;)V
       5: aload_0
       6: areturn

  public final void setTransactionalMode(java.lang.String);
    Code:
       0: aload_0
       1: ldc_w         #350                // String Cache transactionalMode
       4: aload_1
       5: invokespecial #77                 // Method assertArgumentNotNull:(Ljava/lang/String;Ljava/lang/Object;)V
       8: aload_0
       9: aload_1
      10: invokevirtual #351                // Method java/lang/String.toUpperCase:()Ljava/lang/String;
      13: invokestatic  #352                // Method net/sf/ehcache/config/CacheConfiguration$TransactionalMode.valueOf:(Ljava/lang/String;)Lnet/sf/ehcache/config/CacheConfiguration$TransactionalMode;
      16: invokevirtual #353                // Method transactionalMode:(Lnet/sf/ehcache/config/CacheConfiguration$TransactionalMode;)Lnet/sf/ehcache/config/CacheConfiguration;
      19: pop
      20: return

  public final net.sf.ehcache.config.CacheConfiguration transactionalMode(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #354                // Method setTransactionalMode:(Ljava/lang/String;)V
       5: aload_0
       6: areturn

  public final net.sf.ehcache.config.CacheConfiguration transactionalMode(net.sf.ehcache.config.CacheConfiguration$TransactionalMode);
    Code:
       0: aload_1
       1: ifnonnull     15
       4: new           #68                 // class java/lang/IllegalArgumentException
       7: dup
       8: ldc_w         #355                // String TransactionalMode value must be non-null
      11: invokespecial #74                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      14: athrow
      15: aload_0
      16: getfield      #356                // Field transactionalMode:Lnet/sf/ehcache/config/CacheConfiguration$TransactionalMode;
      19: ifnull        33
      22: new           #86                 // class net/sf/ehcache/config/InvalidConfigurationException
      25: dup
      26: ldc_w         #357                // String transactionalMode cannot be changed once set
      29: invokespecial #88                 // Method net/sf/ehcache/config/InvalidConfigurationException."<init>":(Ljava/lang/String;)V
      32: athrow
      33: aload_0
      34: aload_1
      35: putfield      #356                // Field transactionalMode:Lnet/sf/ehcache/config/CacheConfiguration$TransactionalMode;
      38: aload_0
      39: areturn

  public final void setStatistics(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #27                 // Field statistics:Z
       5: return

  public final net.sf.ehcache.config.CacheConfiguration statistics(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #358                // Method setStatistics:(Z)V
       5: aload_0
       6: areturn

  public final boolean getStatistics();
    Code:
       0: aload_0
       1: getfield      #27                 // Field statistics:Z
       4: ireturn

  public void validateCompleteConfiguration();
    Code:
       0: aload_0
       1: invokevirtual #137                // Method validateConfiguration:()V
       4: aload_0
       5: getfield      #34                 // Field name:Ljava/lang/String;
       8: ifnonnull     22
      11: new           #86                 // class net/sf/ehcache/config/InvalidConfigurationException
      14: dup
      15: ldc_w         #359                // String Caches must be named.
      18: invokespecial #88                 // Method net/sf/ehcache/config/InvalidConfigurationException."<init>":(Ljava/lang/String;)V
      21: athrow
      22: return

  public void validateConfiguration();
    Code:
       0: aload_0
       1: getfield      #50                 // Field terracottaConfiguration:Lnet/sf/ehcache/config/TerracottaConfiguration;
       4: ifnull        240
       7: aload_0
       8: getfield      #50                 // Field terracottaConfiguration:Lnet/sf/ehcache/config/TerracottaConfiguration;
      11: invokevirtual #360                // Method net/sf/ehcache/config/TerracottaConfiguration.isClustered:()Z
      14: ifeq          240
      17: aload_0
      18: getfield      #90                 // Field overflowToDisk:Ljava/lang/Boolean;
      21: ifnull        45
      24: aload_0
      25: getfield      #90                 // Field overflowToDisk:Ljava/lang/Boolean;
      28: invokevirtual #162                // Method java/lang/Boolean.booleanValue:()Z
      31: ifeq          45
      34: new           #86                 // class net/sf/ehcache/config/InvalidConfigurationException
      37: dup
      38: ldc_w         #361                // String overflowToDisk isn\'t supported for a clustered Terracotta cache
      41: invokespecial #88                 // Method net/sf/ehcache/config/InvalidConfigurationException."<init>":(Ljava/lang/String;)V
      44: athrow
      45: aload_0
      46: getfield      #85                 // Field diskPersistent:Ljava/lang/Boolean;
      49: getstatic     #89                 // Field java/lang/Boolean.TRUE:Ljava/lang/Boolean;
      52: if_acmpne     66
      55: new           #86                 // class net/sf/ehcache/config/InvalidConfigurationException
      58: dup
      59: ldc_w         #362                // String diskPersistent isn\'t supported for a clustered Terracotta cache
      62: invokespecial #88                 // Method net/sf/ehcache/config/InvalidConfigurationException."<init>":(Ljava/lang/String;)V
      65: athrow
      66: aload_0
      67: getfield      #93                 // Field persistenceConfiguration:Lnet/sf/ehcache/config/PersistenceConfiguration;
      70: ifnull        123
      73: getstatic     #363                // Field net/sf/ehcache/config/PersistenceConfiguration$Strategy.DISTRIBUTED:Lnet/sf/ehcache/config/PersistenceConfiguration$Strategy;
      76: aload_0
      77: getfield      #93                 // Field persistenceConfiguration:Lnet/sf/ehcache/config/PersistenceConfiguration;
      80: invokevirtual #246                // Method net/sf/ehcache/config/PersistenceConfiguration.getStrategy:()Lnet/sf/ehcache/config/PersistenceConfiguration$Strategy;
      83: invokevirtual #247                // Method net/sf/ehcache/config/PersistenceConfiguration$Strategy.equals:(Ljava/lang/Object;)Z
      86: ifne          123
      89: new           #86                 // class net/sf/ehcache/config/InvalidConfigurationException
      92: dup
      93: new           #69                 // class java/lang/StringBuilder
      96: dup
      97: invokespecial #70                 // Method java/lang/StringBuilder."<init>":()V
     100: aload_0
     101: getfield      #93                 // Field persistenceConfiguration:Lnet/sf/ehcache/config/PersistenceConfiguration;
     104: invokevirtual #246                // Method net/sf/ehcache/config/PersistenceConfiguration.getStrategy:()Lnet/sf/ehcache/config/PersistenceConfiguration$Strategy;
     107: invokevirtual #364                // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     110: ldc_w         #365                // String  persistence strategy isn\'t supported for a clustered Terracotta cache
     113: invokevirtual #71                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     116: invokevirtual #73                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     119: invokespecial #88                 // Method net/sf/ehcache/config/InvalidConfigurationException."<init>":(Ljava/lang/String;)V
     122: athrow
     123: aload_0
     124: getfield      #17                 // Field cacheEventListenerConfigurations:Ljava/util/List;
     127: ifnull        240
     130: aload_0
     131: getfield      #17                 // Field cacheEventListenerConfigurations:Ljava/util/List;
     134: invokeinterface #56,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
     139: astore_1
     140: aload_1
     141: invokeinterface #57,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     146: ifeq          240
     149: aload_1
     150: invokeinterface #58,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     155: checkcast     #59                 // class net/sf/ehcache/config/CacheConfiguration$CacheEventListenerFactoryConfiguration
     158: astore_2
     159: aconst_null
     160: aload_2
     161: invokevirtual #366                // Method net/sf/ehcache/config/CacheConfiguration$CacheEventListenerFactoryConfiguration.getFullyQualifiedClassPath:()Ljava/lang/String;
     164: if_acmpne     170
     167: goto          140
     170: aload_2
     171: invokevirtual #366                // Method net/sf/ehcache/config/CacheConfiguration$CacheEventListenerFactoryConfiguration.getFullyQualifiedClassPath:()Ljava/lang/String;
     174: ldc_w         #367                // String net.sf.ehcache.
     177: invokevirtual #368                // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
     180: ifne          237
     183: getstatic     #123                // Field LOG:Lorg/slf4j/Logger;
     186: invokeinterface #369,  1          // InterfaceMethod org/slf4j/Logger.isWarnEnabled:()Z
     191: ifeq          237
     194: getstatic     #123                // Field LOG:Lorg/slf4j/Logger;
     197: new           #69                 // class java/lang/StringBuilder
     200: dup
     201: invokespecial #70                 // Method java/lang/StringBuilder."<init>":()V
     204: ldc_w         #370                // String The non-standard CacheEventListenerFactory \'
     207: invokevirtual #71                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     210: aload_2
     211: invokevirtual #366                // Method net/sf/ehcache/config/CacheConfiguration$CacheEventListenerFactoryConfiguration.getFullyQualifiedClassPath:()Ljava/lang/String;
     214: invokevirtual #71                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     217: ldc_w         #371                // String \' is used with a clustered Terracotta cache,
     220: invokevirtual #71                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     223: ldc_w         #372                // String if the purpose of this listener is replication it is not supported in a clustered context
     226: invokevirtual #71                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     229: invokevirtual #73                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     232: invokeinterface #133,  2          // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;)V
     237: goto          140
     240: aload_0
     241: getfield      #20                 // Field cacheWriterConfiguration:Lnet/sf/ehcache/config/CacheWriterConfiguration;
     244: ifnull        279
     247: aload_0
     248: getfield      #20                 // Field cacheWriterConfiguration:Lnet/sf/ehcache/config/CacheWriterConfiguration;
     251: invokevirtual #373                // Method net/sf/ehcache/config/CacheWriterConfiguration.getWriteBatching:()Z
     254: ifne          279
     257: aload_0
     258: getfield      #20                 // Field cacheWriterConfiguration:Lnet/sf/ehcache/config/CacheWriterConfiguration;
     261: invokevirtual #374                // Method net/sf/ehcache/config/CacheWriterConfiguration.getWriteBatchSize:()I
     264: iconst_1
     265: if_icmpeq     279
     268: new           #86                 // class net/sf/ehcache/config/InvalidConfigurationException
     271: dup
     272: ldc_w         #375                // String CacheWriter Batch Size !=1 and CacheWriter Batching turned off
     275: invokespecial #88                 // Method net/sf/ehcache/config/InvalidConfigurationException."<init>":(Ljava/lang/String;)V
     278: athrow
     279: return

  private void validateTransactionalSettings();
    Code:
       0: aload_0
       1: invokevirtual #376                // Method getTransactionalMode:()Lnet/sf/ehcache/config/CacheConfiguration$TransactionalMode;
       4: invokevirtual #377                // Method net/sf/ehcache/config/CacheConfiguration$TransactionalMode.isTransactional:()Z
       7: istore_1
       8: aload_0
       9: getfield      #161                // Field copyOnRead:Ljava/lang/Boolean;
      12: ifnonnull     57
      15: aload_0
      16: getfield      #50                 // Field terracottaConfiguration:Lnet/sf/ehcache/config/TerracottaConfiguration;
      19: ifnull        49
      22: aload_0
      23: getfield      #50                 // Field terracottaConfiguration:Lnet/sf/ehcache/config/TerracottaConfiguration;
      26: invokevirtual #378                // Method net/sf/ehcache/config/TerracottaConfiguration.isCopyOnReadSet:()Z
      29: ifeq          49
      32: aload_0
      33: aload_0
      34: getfield      #50                 // Field terracottaConfiguration:Lnet/sf/ehcache/config/TerracottaConfiguration;
      37: invokevirtual #379                // Method net/sf/ehcache/config/TerracottaConfiguration.isCopyOnRead:()Z
      40: invokestatic  #80                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      43: putfield      #161                // Field copyOnRead:Ljava/lang/Boolean;
      46: goto          57
      49: aload_0
      50: iload_1
      51: invokestatic  #80                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      54: putfield      #161                // Field copyOnRead:Ljava/lang/Boolean;
      57: aload_0
      58: getfield      #163                // Field copyOnWrite:Ljava/lang/Boolean;
      61: ifnonnull     72
      64: aload_0
      65: iload_1
      66: invokestatic  #80                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      69: putfield      #163                // Field copyOnWrite:Ljava/lang/Boolean;
      72: iload_1
      73: ifeq          107
      76: aload_0
      77: getfield      #161                // Field copyOnRead:Ljava/lang/Boolean;
      80: invokevirtual #162                // Method java/lang/Boolean.booleanValue:()Z
      83: ifeq          96
      86: aload_0
      87: getfield      #163                // Field copyOnWrite:Ljava/lang/Boolean;
      90: invokevirtual #162                // Method java/lang/Boolean.booleanValue:()Z
      93: ifne          107
      96: new           #86                 // class net/sf/ehcache/config/InvalidConfigurationException
      99: dup
     100: ldc_w         #380                // String A transactional cache has to be copyOnRead and copyOnWrite!
     103: invokespecial #88                 // Method net/sf/ehcache/config/InvalidConfigurationException."<init>":(Ljava/lang/String;)V
     106: athrow
     107: return

  public java.lang.String getName();
    Code:
       0: aload_0
       1: getfield      #34                 // Field name:Ljava/lang/String;
       4: areturn

  public int getMaxElementsInMemory();
    Code:
       0: aload_0
       1: invokevirtual #174                // Method getMaxEntriesLocalHeap:()J
       4: l2i
       5: ireturn

  public long getCacheLoaderTimeoutMillis();
    Code:
       0: aload_0
       1: getfield      #110                // Field cacheLoaderTimeoutMillis:J
       4: lreturn

  public int getMaxElementsOnDisk();
    Code:
       0: aload_0
       1: getfield      #2                  // Field maxElementsOnDisk:I
       4: ireturn

  public long getMaxEntriesLocalDisk();
    Code:
       0: aload_0
       1: getfield      #2                  // Field maxElementsOnDisk:I
       4: i2l
       5: lreturn

  public long getMaxEntriesLocalHeap();
    Code:
       0: aload_0
       1: getfield      #36                 // Field maxEntriesLocalHeap:Ljava/lang/Integer;
       4: ifnonnull     11
       7: lconst_0
       8: goto          19
      11: aload_0
      12: getfield      #36                 // Field maxEntriesLocalHeap:Ljava/lang/Integer;
      15: invokevirtual #107                // Method java/lang/Integer.intValue:()I
      18: i2l
      19: lreturn

  public net.sf.ehcache.store.MemoryStoreEvictionPolicy getMemoryStoreEvictionPolicy();
    Code:
       0: aload_0
       1: getfield      #4                  // Field memoryStoreEvictionPolicy:Lnet/sf/ehcache/store/MemoryStoreEvictionPolicy;
       4: areturn

  public boolean isClearOnFlush();
    Code:
       0: aload_0
       1: getfield      #5                  // Field clearOnFlush:Z
       4: ireturn

  public boolean isEternal();
    Code:
       0: aload_0
       1: getfield      #6                  // Field eternal:Z
       4: ireturn

  public long getTimeToIdleSeconds();
    Code:
       0: aload_0
       1: getfield      #7                  // Field timeToIdleSeconds:J
       4: lreturn

  public long getTimeToLiveSeconds();
    Code:
       0: aload_0
       1: getfield      #8                  // Field timeToLiveSeconds:J
       4: lreturn

  public boolean isOverflowToDisk();
    Code:
       0: aload_0
       1: getfield      #90                 // Field overflowToDisk:Ljava/lang/Boolean;
       4: ifnonnull     11
       7: iconst_0
       8: goto          18
      11: aload_0
      12: getfield      #90                 // Field overflowToDisk:Ljava/lang/Boolean;
      15: invokevirtual #162                // Method java/lang/Boolean.booleanValue:()Z
      18: ireturn

  public boolean isDiskPersistent();
    Code:
       0: aload_0
       1: getfield      #85                 // Field diskPersistent:Ljava/lang/Boolean;
       4: astore_1
       5: aload_0
       6: getfield      #85                 // Field diskPersistent:Ljava/lang/Boolean;
       9: ifnonnull     16
      12: iconst_0
      13: goto          20
      16: aload_1
      17: invokevirtual #162                // Method java/lang/Boolean.booleanValue:()Z
      20: ireturn

  public boolean isSearchable();
    Code:
       0: aload_0
       1: getfield      #156                // Field searchable:Lnet/sf/ehcache/config/Searchable;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public int getDiskSpoolBufferSizeMB();
    Code:
       0: aload_0
       1: getfield      #9                  // Field diskSpoolBufferSizeMB:I
       4: ireturn

  public long getDiskExpiryThreadIntervalSeconds();
    Code:
       0: aload_0
       1: getfield      #13                 // Field diskExpiryThreadIntervalSeconds:J
       4: lreturn

  public int getDiskAccessStripes();
    Code:
       0: aload_0
       1: getfield      #10                 // Field diskAccessStripes:I
       4: ireturn

  public net.sf.ehcache.search.attribute.DynamicAttributesExtractor getDynamicExtractor();
    Code:
       0: aload_0
       1: getfield      #220                // Field flexIndexer:Lnet/sf/ehcache/search/attribute/DynamicAttributesExtractor;
       4: areturn

  public boolean getLogging();
    Code:
       0: aload_0
       1: getfield      #14                 // Field logging:Z
       4: ireturn

  public boolean isOverflowToOffHeap();
    Code:
       0: aload_0
       1: getfield      #81                 // Field overflowToOffHeap:Ljava/lang/Boolean;
       4: ifnonnull     11
       7: iconst_0
       8: goto          18
      11: aload_0
      12: getfield      #81                 // Field overflowToOffHeap:Ljava/lang/Boolean;
      15: invokevirtual #162                // Method java/lang/Boolean.booleanValue:()Z
      18: ireturn

  public net.sf.ehcache.config.SizeOfPolicyConfiguration getSizeOfPolicyConfiguration();
    Code:
       0: aload_0
       1: getfield      #83                 // Field sizeOfPolicyConfiguration:Lnet/sf/ehcache/config/SizeOfPolicyConfiguration;
       4: areturn

  public net.sf.ehcache.config.PersistenceConfiguration getPersistenceConfiguration();
    Code:
       0: aload_0
       1: getfield      #93                 // Field persistenceConfiguration:Lnet/sf/ehcache/config/PersistenceConfiguration;
       4: areturn

  public java.lang.String getMaxMemoryOffHeap();
    Code:
       0: aload_0
       1: getfield      #189                // Field maxBytesLocalOffHeapInput:Ljava/lang/String;
       4: areturn

  public long getMaxMemoryOffHeapInBytes();
    Code:
       0: aload_0
       1: invokevirtual #190                // Method getMaxBytesLocalOffHeap:()J
       4: lreturn

  public java.util.List getCacheEventListenerConfigurations();
    Code:
       0: aload_0
       1: getfield      #17                 // Field cacheEventListenerConfigurations:Ljava/util/List;
       4: areturn

  public java.util.List getCacheExtensionConfigurations();
    Code:
       0: aload_0
       1: getfield      #18                 // Field cacheExtensionConfigurations:Ljava/util/List;
       4: areturn

  public java.util.List getCacheLoaderConfigurations();
    Code:
       0: aload_0
       1: getfield      #21                 // Field cacheLoaderConfigurations:Ljava/util/List;
       4: areturn

  public java.util.List<net.sf.ehcache.config.CacheConfiguration$CacheDecoratorFactoryConfiguration> getCacheDecoratorConfigurations();
    Code:
       0: aload_0
       1: getfield      #22                 // Field cacheDecoratorConfigurations:Ljava/util/List;
       4: areturn

  public net.sf.ehcache.config.CacheConfiguration$BootstrapCacheLoaderFactoryConfiguration getBootstrapCacheLoaderFactoryConfiguration();
    Code:
       0: aload_0
       1: getfield      #44                 // Field bootstrapCacheLoaderFactoryConfiguration:Lnet/sf/ehcache/config/CacheConfiguration$BootstrapCacheLoaderFactoryConfiguration;
       4: areturn

  public net.sf.ehcache.config.CacheConfiguration$CacheExceptionHandlerFactoryConfiguration getCacheExceptionHandlerFactoryConfiguration();
    Code:
       0: aload_0
       1: getfield      #47                 // Field cacheExceptionHandlerFactoryConfiguration:Lnet/sf/ehcache/config/CacheConfiguration$CacheExceptionHandlerFactoryConfiguration;
       4: areturn

  public net.sf.ehcache.config.TerracottaConfiguration getTerracottaConfiguration();
    Code:
       0: aload_0
       1: getfield      #50                 // Field terracottaConfiguration:Lnet/sf/ehcache/config/TerracottaConfiguration;
       4: areturn

  public net.sf.ehcache.config.PinningConfiguration getPinningConfiguration();
    Code:
       0: aload_0
       1: getfield      #343                // Field pinningConfiguration:Lnet/sf/ehcache/config/PinningConfiguration;
       4: areturn

  public net.sf.ehcache.config.CacheWriterConfiguration getCacheWriterConfiguration();
    Code:
       0: aload_0
       1: getfield      #20                 // Field cacheWriterConfiguration:Lnet/sf/ehcache/config/CacheWriterConfiguration;
       4: areturn

  public boolean isTerracottaClustered();
    Code:
       0: aload_0
       1: getfield      #50                 // Field terracottaConfiguration:Lnet/sf/ehcache/config/TerracottaConfiguration;
       4: ifnull        21
       7: aload_0
       8: getfield      #50                 // Field terracottaConfiguration:Lnet/sf/ehcache/config/TerracottaConfiguration;
      11: invokevirtual #360                // Method net/sf/ehcache/config/TerracottaConfiguration.isClustered:()Z
      14: ifeq          21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: ireturn

  public net.sf.ehcache.config.TerracottaConfiguration$Consistency getTerracottaConsistency();
    Code:
       0: aload_0
       1: getfield      #50                 // Field terracottaConfiguration:Lnet/sf/ehcache/config/TerracottaConfiguration;
       4: ifnull        17
       7: aload_0
       8: getfield      #50                 // Field terracottaConfiguration:Lnet/sf/ehcache/config/TerracottaConfiguration;
      11: invokevirtual #381                // Method net/sf/ehcache/config/TerracottaConfiguration.getConsistency:()Lnet/sf/ehcache/config/TerracottaConfiguration$Consistency;
      14: goto          18
      17: aconst_null
      18: areturn

  public final net.sf.ehcache.config.CacheConfiguration$TransactionalMode getTransactionalMode();
    Code:
       0: aload_0
       1: getfield      #356                // Field transactionalMode:Lnet/sf/ehcache/config/CacheConfiguration$TransactionalMode;
       4: ifnonnull     11
       7: getstatic     #382                // Field DEFAULT_TRANSACTIONAL_MODE:Lnet/sf/ehcache/config/CacheConfiguration$TransactionalMode;
      10: areturn
      11: aload_0
      12: getfield      #356                // Field transactionalMode:Lnet/sf/ehcache/config/CacheConfiguration$TransactionalMode;
      15: areturn

  public boolean isXaStrictTransactional();
    Code:
       0: aload_0
       1: invokespecial #160                // Method validateTransactionalSettings:()V
       4: aload_0
       5: invokevirtual #376                // Method getTransactionalMode:()Lnet/sf/ehcache/config/CacheConfiguration$TransactionalMode;
       8: getstatic     #383                // Field net/sf/ehcache/config/CacheConfiguration$TransactionalMode.XA_STRICT:Lnet/sf/ehcache/config/CacheConfiguration$TransactionalMode;
      11: invokevirtual #384                // Method net/sf/ehcache/config/CacheConfiguration$TransactionalMode.equals:(Ljava/lang/Object;)Z
      14: ireturn

  public boolean isLocalTransactional();
    Code:
       0: aload_0
       1: invokespecial #160                // Method validateTransactionalSettings:()V
       4: aload_0
       5: invokevirtual #376                // Method getTransactionalMode:()Lnet/sf/ehcache/config/CacheConfiguration$TransactionalMode;
       8: getstatic     #385                // Field net/sf/ehcache/config/CacheConfiguration$TransactionalMode.LOCAL:Lnet/sf/ehcache/config/CacheConfiguration$TransactionalMode;
      11: invokevirtual #384                // Method net/sf/ehcache/config/CacheConfiguration$TransactionalMode.equals:(Ljava/lang/Object;)Z
      14: ireturn

  public boolean isXaTransactional();
    Code:
       0: aload_0
       1: invokespecial #160                // Method validateTransactionalSettings:()V
       4: aload_0
       5: invokevirtual #376                // Method getTransactionalMode:()Lnet/sf/ehcache/config/CacheConfiguration$TransactionalMode;
       8: getstatic     #386                // Field net/sf/ehcache/config/CacheConfiguration$TransactionalMode.XA:Lnet/sf/ehcache/config/CacheConfiguration$TransactionalMode;
      11: invokevirtual #384                // Method net/sf/ehcache/config/CacheConfiguration$TransactionalMode.equals:(Ljava/lang/Object;)Z
      14: ireturn

  public boolean addConfigurationListener(net.sf.ehcache.config.CacheConfigurationListener);
    Code:
       0: aload_0
       1: getfield      #25                 // Field listeners:Ljava/util/Set;
       4: aload_1
       5: invokeinterface #387,  2          // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      10: istore_2
      11: iload_2
      12: ifeq          22
      15: aload_1
      16: aload_0
      17: invokeinterface #388,  2          // InterfaceMethod net/sf/ehcache/config/CacheConfigurationListener.registered:(Lnet/sf/ehcache/config/CacheConfiguration;)V
      22: iload_2
      23: ireturn

  public boolean addDynamicSearchListener(net.sf.ehcache.config.DynamicSearchListener);
    Code:
       0: aload_0
       1: getfield      #26                 // Field dynamicSearchListeners:Ljava/util/Set;
       4: aload_1
       5: invokeinterface #387,  2          // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      10: ireturn

  public boolean removeConfigurationListener(net.sf.ehcache.config.CacheConfigurationListener);
    Code:
       0: aload_0
       1: getfield      #25                 // Field listeners:Ljava/util/Set;
       4: aload_1
       5: invokeinterface #389,  2          // InterfaceMethod java/util/Set.remove:(Ljava/lang/Object;)Z
      10: istore_2
      11: iload_2
      12: ifeq          22
      15: aload_1
      16: aload_0
      17: invokeinterface #390,  2          // InterfaceMethod net/sf/ehcache/config/CacheConfigurationListener.deregistered:(Lnet/sf/ehcache/config/CacheConfiguration;)V
      22: iload_2
      23: ireturn

  private void fireTtiChanged(long, long);
    Code:
       0: lload_1
       1: lload_3
       2: lcmp
       3: ifeq          51
       6: aload_0
       7: getfield      #25                 // Field listeners:Ljava/util/Set;
      10: invokeinterface #181,  1          // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      15: astore        5
      17: aload         5
      19: invokeinterface #57,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      24: ifeq          51
      27: aload         5
      29: invokeinterface #58,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      34: checkcast     #182                // class net/sf/ehcache/config/CacheConfigurationListener
      37: astore        6
      39: aload         6
      41: lload_1
      42: lload_3
      43: invokeinterface #391,  5          // InterfaceMethod net/sf/ehcache/config/CacheConfigurationListener.timeToIdleChanged:(JJ)V
      48: goto          17
      51: return

  private void fireTtlChanged(long, long);
    Code:
       0: lload_1
       1: lload_3
       2: lcmp
       3: ifeq          51
       6: aload_0
       7: getfield      #25                 // Field listeners:Ljava/util/Set;
      10: invokeinterface #181,  1          // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      15: astore        5
      17: aload         5
      19: invokeinterface #57,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      24: ifeq          51
      27: aload         5
      29: invokeinterface #58,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      34: checkcast     #182                // class net/sf/ehcache/config/CacheConfigurationListener
      37: astore        6
      39: aload         6
      41: lload_1
      42: lload_3
      43: invokeinterface #392,  5          // InterfaceMethod net/sf/ehcache/config/CacheConfigurationListener.timeToLiveChanged:(JJ)V
      48: goto          17
      51: return

  private void fireLoggingChanged(boolean, boolean);
    Code:
       0: iload_1
       1: iload_2
       2: if_icmpeq     47
       5: aload_0
       6: getfield      #25                 // Field listeners:Ljava/util/Set;
       9: invokeinterface #181,  1          // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      14: astore_3
      15: aload_3
      16: invokeinterface #57,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      21: ifeq          47
      24: aload_3
      25: invokeinterface #58,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      30: checkcast     #182                // class net/sf/ehcache/config/CacheConfigurationListener
      33: astore        4
      35: aload         4
      37: iload_1
      38: iload_2
      39: invokeinterface #393,  3          // InterfaceMethod net/sf/ehcache/config/CacheConfigurationListener.loggingChanged:(ZZ)V
      44: goto          15
      47: return

  private void fireDiskCapacityChanged(int, int);
    Code:
       0: iload_1
       1: iload_2
       2: if_icmpeq     47
       5: aload_0
       6: getfield      #25                 // Field listeners:Ljava/util/Set;
       9: invokeinterface #181,  1          // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      14: astore_3
      15: aload_3
      16: invokeinterface #57,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      21: ifeq          47
      24: aload_3
      25: invokeinterface #58,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      30: checkcast     #182                // class net/sf/ehcache/config/CacheConfigurationListener
      33: astore        4
      35: aload         4
      37: iload_1
      38: iload_2
      39: invokeinterface #394,  3          // InterfaceMethod net/sf/ehcache/config/CacheConfigurationListener.diskCapacityChanged:(II)V
      44: goto          15
      47: return

  private void fireMemoryCapacityChanged(int, int);
    Code:
       0: iload_1
       1: iload_2
       2: if_icmpeq     47
       5: aload_0
       6: getfield      #25                 // Field listeners:Ljava/util/Set;
       9: invokeinterface #181,  1          // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      14: astore_3
      15: aload_3
      16: invokeinterface #57,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      21: ifeq          47
      24: aload_3
      25: invokeinterface #58,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      30: checkcast     #182                // class net/sf/ehcache/config/CacheConfigurationListener
      33: astore        4
      35: aload         4
      37: iload_1
      38: iload_2
      39: invokeinterface #395,  3          // InterfaceMethod net/sf/ehcache/config/CacheConfigurationListener.memoryCapacityChanged:(II)V
      44: goto          15
      47: return

  private void checkDynamicChange();
    Code:
       0: aload_0
       1: getfield      #155                // Field frozen:Z
       4: ifeq          18
       7: new           #396                // class net/sf/ehcache/CacheException
      10: dup
      11: ldc_w         #397                // String Dynamic configuration changes are disabled for this cache
      14: invokespecial #398                // Method net/sf/ehcache/CacheException."<init>":(Ljava/lang/String;)V
      17: athrow
      18: return

  public void internalSetTimeToIdle(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #7                  // Field timeToIdleSeconds:J
       5: return

  public void internalSetTimeToLive(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #8                  // Field timeToLiveSeconds:J
       5: return

  public void internalSetMemCapacity(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #35                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       5: putfield      #36                 // Field maxEntriesLocalHeap:Ljava/lang/Integer;
       8: return

  public void internalSetMemCapacityInBytes(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokestatic  #171                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
       5: putfield      #164                // Field maxBytesLocalHeap:Ljava/lang/Long;
       8: return

  public void internalSetDiskCapacity(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #2                  // Field maxElementsOnDisk:I
       5: return

  public void internalSetLogging(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #14                 // Field logging:Z
       5: return

  public java.util.Map<java.lang.String, net.sf.ehcache.config.SearchAttribute> getSearchAttributes();
    Code:
       0: aload_0
       1: getfield      #156                // Field searchable:Lnet/sf/ehcache/config/Searchable;
       4: ifnonnull     11
       7: invokestatic  #399                // Method java/util/Collections.emptyMap:()Ljava/util/Map;
      10: areturn
      11: aload_0
      12: getfield      #156                // Field searchable:Lnet/sf/ehcache/config/Searchable;
      15: invokevirtual #400                // Method net/sf/ehcache/config/Searchable.getSearchAttributes:()Ljava/util/Map;
      18: areturn

  public net.sf.ehcache.config.Searchable getSearchable();
    Code:
       0: aload_0
       1: getfield      #156                // Field searchable:Lnet/sf/ehcache/config/Searchable;
       4: areturn

  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
    Code:
       0: aload_0
       1: invokevirtual #401                // Method clone:()Lnet/sf/ehcache/config/CacheConfiguration;
       4: areturn

  static {};
    Code:
       0: getstatic     #402                // Field net/sf/ehcache/store/MemoryStoreEvictionPolicy.LRU:Lnet/sf/ehcache/store/MemoryStoreEvictionPolicy;
       3: putstatic     #3                  // Field DEFAULT_MEMORY_STORE_EVICTION_POLICY:Lnet/sf/ehcache/store/MemoryStoreEvictionPolicy;
       6: new           #347                // class net/sf/ehcache/config/CacheWriterConfiguration
       9: dup
      10: invokespecial #348                // Method net/sf/ehcache/config/CacheWriterConfiguration."<init>":()V
      13: putstatic     #19                 // Field DEFAULT_CACHE_WRITER_CONFIGURATION:Lnet/sf/ehcache/config/CacheWriterConfiguration;
      16: getstatic     #403                // Field net/sf/ehcache/config/CacheConfiguration$TransactionalMode.OFF:Lnet/sf/ehcache/config/CacheConfiguration$TransactionalMode;
      19: putstatic     #382                // Field DEFAULT_TRANSACTIONAL_MODE:Lnet/sf/ehcache/config/CacheConfiguration$TransactionalMode;
      22: new           #404                // class net/sf/ehcache/config/CopyStrategyConfiguration
      25: dup
      26: invokespecial #405                // Method net/sf/ehcache/config/CopyStrategyConfiguration."<init>":()V
      29: putstatic     #28                 // Field DEFAULT_COPY_STRATEGY_CONFIGURATION:Lnet/sf/ehcache/config/CopyStrategyConfiguration;
      32: ldc_w         #38                 // class net/sf/ehcache/config/CacheConfiguration
      35: invokevirtual #406                // Method java/lang/Class.getName:()Ljava/lang/String;
      38: invokestatic  #407                // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/String;)Lorg/slf4j/Logger;
      41: putstatic     #123                // Field LOG:Lorg/slf4j/Logger;
      44: return
}
