Compiled from "SampledCounterConfig.java"
public class net.sf.ehcache.util.counter.sampled.SampledCounterConfig extends net.sf.ehcache.util.counter.CounterConfig {
  private final int intervalSecs;

  private final int historySize;

  private final boolean isReset;

  public net.sf.ehcache.util.counter.sampled.SampledCounterConfig(int, int, boolean, long);
    Code:
       0: aload_0
       1: lload         4
       3: invokespecial #1                  // Method net/sf/ehcache/util/counter/CounterConfig."<init>":(J)V
       6: iload_1
       7: iconst_1
       8: if_icmpge     43
      11: new           #2                  // class java/lang/IllegalArgumentException
      14: dup
      15: new           #3                  // class java/lang/StringBuilder
      18: dup
      19: invokespecial #4                  // Method java/lang/StringBuilder."<init>":()V
      22: ldc           #5                  // String Interval (
      24: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      27: iload_1
      28: invokevirtual #7                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      31: ldc           #8                  // String ) must be greater than or equal to 1
      33: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      36: invokevirtual #9                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      39: invokespecial #10                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      42: athrow
      43: iload_2
      44: iconst_1
      45: if_icmpge     80
      48: new           #2                  // class java/lang/IllegalArgumentException
      51: dup
      52: new           #3                  // class java/lang/StringBuilder
      55: dup
      56: invokespecial #4                  // Method java/lang/StringBuilder."<init>":()V
      59: ldc           #11                 // String History size (
      61: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      64: iload_2
      65: invokevirtual #7                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      68: ldc           #8                  // String ) must be greater than or equal to 1
      70: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      73: invokevirtual #9                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      76: invokespecial #10                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      79: athrow
      80: aload_0
      81: iload_1
      82: putfield      #12                 // Field intervalSecs:I
      85: aload_0
      86: iload_2
      87: putfield      #13                 // Field historySize:I
      90: aload_0
      91: iload_3
      92: putfield      #14                 // Field isReset:Z
      95: return

  public int getHistorySize();
    Code:
       0: aload_0
       1: getfield      #13                 // Field historySize:I
       4: ireturn

  public int getIntervalSecs();
    Code:
       0: aload_0
       1: getfield      #12                 // Field intervalSecs:I
       4: ireturn

  public boolean isResetOnSample();
    Code:
       0: aload_0
       1: getfield      #14                 // Field isReset:Z
       4: ireturn

  public net.sf.ehcache.util.counter.Counter createCounter();
    Code:
       0: new           #15                 // class net/sf/ehcache/util/counter/sampled/SampledCounterImpl
       3: dup
       4: aload_0
       5: invokespecial #16                 // Method net/sf/ehcache/util/counter/sampled/SampledCounterImpl."<init>":(Lnet/sf/ehcache/util/counter/sampled/SampledCounterConfig;)V
       8: areturn
}
