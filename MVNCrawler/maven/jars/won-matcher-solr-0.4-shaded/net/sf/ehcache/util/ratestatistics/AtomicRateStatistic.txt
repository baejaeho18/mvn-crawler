Compiled from "AtomicRateStatistic.java"
public class net.sf.ehcache.util.ratestatistics.AtomicRateStatistic extends net.sf.ehcache.util.ratestatistics.AbstractRateStatistic {
  private static final int SAMPLE_TIME_FLAG_BITS;

  private static final long CALCULATION_FLAG;

  private final java.util.concurrent.atomic.AtomicLong count;

  private final java.util.concurrent.atomic.AtomicLong rateSampleTime;

  private volatile float rateSample;

  private volatile long sampleRateMask;

  private volatile long previousSample;

  public net.sf.ehcache.util.ratestatistics.AtomicRateStatistic(long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: lload_1
       2: aload_3
       3: invokespecial #1                  // Method net/sf/ehcache/util/ratestatistics/AbstractRateStatistic."<init>":(JLjava/util/concurrent/TimeUnit;)V
       6: aload_0
       7: new           #2                  // class java/util/concurrent/atomic/AtomicLong
      10: dup
      11: lconst_0
      12: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicLong."<init>":(J)V
      15: putfield      #4                  // Field count:Ljava/util/concurrent/atomic/AtomicLong;
      18: aload_0
      19: new           #2                  // class java/util/concurrent/atomic/AtomicLong
      22: dup
      23: invokestatic  #5                  // Method getTime:()J
      26: iconst_1
      27: lshl
      28: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicLong."<init>":(J)V
      31: putfield      #6                  // Field rateSampleTime:Ljava/util/concurrent/atomic/AtomicLong;
      34: aload_0
      35: fconst_0
      36: putfield      #7                  // Field rateSample:F
      39: return

  public void event();
    Code:
       0: aload_0
       1: getfield      #4                  // Field count:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #8                  // Method java/util/concurrent/atomic/AtomicLong.incrementAndGet:()J
       7: lstore_1
       8: lload_1
       9: aload_0
      10: getfield      #9                  // Field sampleRateMask:J
      13: land
      14: lconst_0
      15: lcmp
      16: ifne          139
      19: invokestatic  #5                  // Method getTime:()J
      22: lstore_3
      23: aload_0
      24: lload_3
      25: invokespecial #10                 // Method startIncrementTime:(J)J
      28: lstore        5
      30: lload_3
      31: lload         5
      33: lcmp
      34: ifeq          121
      37: lload_1
      38: aload_0
      39: getfield      #11                 // Field previousSample:J
      42: lcmp
      43: ifle          121
      46: lload_1
      47: aload_0
      48: getfield      #11                 // Field previousSample:J
      51: lsub
      52: l2f
      53: lload_3
      54: lload         5
      56: lsub
      57: l2f
      58: fdiv
      59: fstore        7
      61: aload_0
      62: aload_0
      63: fload         7
      65: lload_3
      66: aload_0
      67: getfield      #7                  // Field rateSample:F
      70: lload         5
      72: invokevirtual #12                 // Method iterateMovingAverage:(FJFJ)F
      75: putfield      #7                  // Field rateSample:F
      78: aload_0
      79: lload_1
      80: putfield      #11                 // Field previousSample:J
      83: lconst_1
      84: aload_0
      85: invokevirtual #13                 // Method getRateAveragePeriod:()J
      88: l2f
      89: aload_0
      90: getfield      #7                  // Field rateSample:F
      93: fmul
      94: f2l
      95: invokestatic  #14                 // Method java/lang/Math.max:(JJ)J
      98: invokestatic  #15                 // Method java/lang/Long.highestOneBit:(J)J
     101: lconst_1
     102: lsub
     103: lstore        8
     105: lload         8
     107: aload_0
     108: getfield      #9                  // Field sampleRateMask:J
     111: lcmp
     112: ifeq          121
     115: aload_0
     116: lload         8
     118: putfield      #9                  // Field sampleRateMask:J
     121: aload_0
     122: lload_3
     123: invokespecial #16                 // Method finishIncrementTime:(J)V
     126: goto          139
     129: astore        10
     131: aload_0
     132: lload_3
     133: invokespecial #16                 // Method finishIncrementTime:(J)V
     136: aload         10
     138: athrow
     139: return
    Exception table:
       from    to  target type
          30   121   129   any
         129   131   129   any

  public long getCount();
    Code:
       0: aload_0
       1: getfield      #4                  // Field count:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #17                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
       7: lreturn

  public float getRate();
    Code:
       0: aload_0
       1: invokespecial #18                 // Method startReadTime:()J
       4: lstore_1
       5: aload_0
       6: getfield      #11                 // Field previousSample:J
       9: lstore_3
      10: aload_0
      11: getfield      #7                  // Field rateSample:F
      14: fstore        5
      16: aload_0
      17: lload_1
      18: invokespecial #19                 // Method validateTimeRead:(J)Z
      21: ifeq          0
      24: invokestatic  #5                  // Method getTime:()J
      27: lstore        6
      29: lload         6
      31: lload_1
      32: lcmp
      33: ifne          39
      36: fload         5
      38: freturn
      39: aload_0
      40: getfield      #4                  // Field count:Ljava/util/concurrent/atomic/AtomicLong;
      43: invokevirtual #17                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
      46: lload_3
      47: lsub
      48: l2f
      49: lload         6
      51: lload_1
      52: lsub
      53: l2f
      54: fdiv
      55: fstore        8
      57: aload_0
      58: fload         8
      60: lload         6
      62: fload         5
      64: lload_1
      65: invokevirtual #12                 // Method iterateMovingAverage:(FJFJ)F
      68: getstatic     #20                 // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
      71: lconst_1
      72: invokevirtual #21                 // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      75: l2f
      76: fmul
      77: fstore        9
      79: fload         9
      81: invokestatic  #22                 // Method java/lang/Float.isNaN:(F)Z
      84: ifeq          100
      87: fload         5
      89: invokestatic  #22                 // Method java/lang/Float.isNaN:(F)Z
      92: ifeq          97
      95: fconst_0
      96: freturn
      97: fload         5
      99: freturn
     100: fload         9
     102: freturn

  private long startIncrementTime(long);
    Code:
       0: aload_0
       1: getfield      #6                  // Field rateSampleTime:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #17                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
       7: lstore_3
       8: lload_3
       9: lconst_1
      10: land
      11: lconst_0
      12: lcmp
      13: ifne          36
      16: aload_0
      17: getfield      #6                  // Field rateSampleTime:Ljava/util/concurrent/atomic/AtomicLong;
      20: lload_3
      21: lload_1
      22: iconst_1
      23: lshl
      24: lconst_1
      25: lor
      26: invokevirtual #23                 // Method java/util/concurrent/atomic/AtomicLong.compareAndSet:(JJ)Z
      29: ifeq          36
      32: lload_3
      33: iconst_1
      34: lushr
      35: lreturn
      36: goto          0

  private void finishIncrementTime(long);
    Code:
       0: aload_0
       1: getfield      #6                  // Field rateSampleTime:Ljava/util/concurrent/atomic/AtomicLong;
       4: lload_1
       5: iconst_1
       6: lshl
       7: lconst_1
       8: lor
       9: lload_1
      10: iconst_1
      11: lshl
      12: invokevirtual #23                 // Method java/util/concurrent/atomic/AtomicLong.compareAndSet:(JJ)Z
      15: ifne          26
      18: new           #24                 // class java/lang/AssertionError
      21: dup
      22: invokespecial #25                 // Method java/lang/AssertionError."<init>":()V
      25: athrow
      26: return

  private long startReadTime();
    Code:
       0: aload_0
       1: getfield      #6                  // Field rateSampleTime:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #17                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
       7: lstore_1
       8: lload_1
       9: lconst_1
      10: land
      11: lconst_0
      12: lcmp
      13: ifne          20
      16: lload_1
      17: iconst_1
      18: lushr
      19: lreturn
      20: goto          0

  private boolean validateTimeRead(long);
    Code:
       0: aload_0
       1: getfield      #6                  // Field rateSampleTime:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #17                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
       7: lload_1
       8: iconst_1
       9: lshl
      10: lcmp
      11: ifne          18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: ireturn

  private static long getTime();
    Code:
       0: invokestatic  #26                 // Method java/lang/System.nanoTime:()J
       3: lreturn
}
