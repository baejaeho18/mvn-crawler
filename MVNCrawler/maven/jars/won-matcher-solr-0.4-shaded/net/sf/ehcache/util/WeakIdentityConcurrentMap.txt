Compiled from "WeakIdentityConcurrentMap.java"
public final class net.sf.ehcache.util.WeakIdentityConcurrentMap<K, V> {
  private final java.util.concurrent.ConcurrentMap<java.lang.ref.WeakReference<K>, V> map;

  private final java.lang.ref.ReferenceQueue<K> queue;

  private final net.sf.ehcache.util.WeakIdentityConcurrentMap$CleanUpTask<V> cleanUpTask;

  public net.sf.ehcache.util.WeakIdentityConcurrentMap();
    Code:
       0: aload_0
       1: aconst_null
       2: invokespecial #1                  // Method "<init>":(Lnet/sf/ehcache/util/WeakIdentityConcurrentMap$CleanUpTask;)V
       5: return

  public net.sf.ehcache.util.WeakIdentityConcurrentMap(net.sf.ehcache.util.WeakIdentityConcurrentMap$CleanUpTask<V>);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #3                  // class java/util/concurrent/ConcurrentHashMap
       8: dup
       9: invokespecial #4                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      12: putfield      #5                  // Field map:Ljava/util/concurrent/ConcurrentMap;
      15: aload_0
      16: new           #6                  // class java/lang/ref/ReferenceQueue
      19: dup
      20: invokespecial #7                  // Method java/lang/ref/ReferenceQueue."<init>":()V
      23: putfield      #8                  // Field queue:Ljava/lang/ref/ReferenceQueue;
      26: aload_0
      27: aload_1
      28: putfield      #9                  // Field cleanUpTask:Lnet/sf/ehcache/util/WeakIdentityConcurrentMap$CleanUpTask;
      31: return

  public V put(K, V);
    Code:
       0: aload_0
       1: invokevirtual #10                 // Method cleanUp:()V
       4: aload_0
       5: getfield      #5                  // Field map:Ljava/util/concurrent/ConcurrentMap;
       8: new           #11                 // class net/sf/ehcache/util/WeakIdentityConcurrentMap$IdentityWeakReference
      11: dup
      12: aload_1
      13: aload_0
      14: getfield      #8                  // Field queue:Ljava/lang/ref/ReferenceQueue;
      17: invokespecial #12                 // Method net/sf/ehcache/util/WeakIdentityConcurrentMap$IdentityWeakReference."<init>":(Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)V
      20: aload_2
      21: invokeinterface #13,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      26: areturn

  public V remove(K);
    Code:
       0: aload_0
       1: invokevirtual #10                 // Method cleanUp:()V
       4: aload_0
       5: getfield      #5                  // Field map:Ljava/util/concurrent/ConcurrentMap;
       8: new           #11                 // class net/sf/ehcache/util/WeakIdentityConcurrentMap$IdentityWeakReference
      11: dup
      12: aload_1
      13: aload_0
      14: getfield      #8                  // Field queue:Ljava/lang/ref/ReferenceQueue;
      17: invokespecial #12                 // Method net/sf/ehcache/util/WeakIdentityConcurrentMap$IdentityWeakReference."<init>":(Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)V
      20: invokeinterface #14,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      25: areturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: invokevirtual #10                 // Method cleanUp:()V
       4: aload_0
       5: getfield      #5                  // Field map:Ljava/util/concurrent/ConcurrentMap;
       8: invokevirtual #15                 // Method java/lang/Object.toString:()Ljava/lang/String;
      11: areturn

  public V putIfAbsent(K, V);
    Code:
       0: aload_0
       1: invokevirtual #10                 // Method cleanUp:()V
       4: aload_0
       5: getfield      #5                  // Field map:Ljava/util/concurrent/ConcurrentMap;
       8: new           #11                 // class net/sf/ehcache/util/WeakIdentityConcurrentMap$IdentityWeakReference
      11: dup
      12: aload_1
      13: aload_0
      14: getfield      #8                  // Field queue:Ljava/lang/ref/ReferenceQueue;
      17: invokespecial #12                 // Method net/sf/ehcache/util/WeakIdentityConcurrentMap$IdentityWeakReference."<init>":(Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)V
      20: aload_2
      21: invokeinterface #16,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      26: areturn

  public V get(K);
    Code:
       0: aload_0
       1: invokevirtual #10                 // Method cleanUp:()V
       4: aload_0
       5: getfield      #5                  // Field map:Ljava/util/concurrent/ConcurrentMap;
       8: new           #11                 // class net/sf/ehcache/util/WeakIdentityConcurrentMap$IdentityWeakReference
      11: dup
      12: aload_1
      13: invokespecial #17                 // Method net/sf/ehcache/util/WeakIdentityConcurrentMap$IdentityWeakReference."<init>":(Ljava/lang/Object;)V
      16: invokeinterface #18,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      21: areturn

  public void cleanUp();
    Code:
       0: aload_0
       1: getfield      #8                  // Field queue:Ljava/lang/ref/ReferenceQueue;
       4: invokevirtual #19                 // Method java/lang/ref/ReferenceQueue.poll:()Ljava/lang/ref/Reference;
       7: dup
       8: astore_1
       9: ifnull        47
      12: aload_0
      13: getfield      #5                  // Field map:Ljava/util/concurrent/ConcurrentMap;
      16: aload_1
      17: invokeinterface #14,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      22: astore_2
      23: aload_0
      24: getfield      #9                  // Field cleanUpTask:Lnet/sf/ehcache/util/WeakIdentityConcurrentMap$CleanUpTask;
      27: ifnull        44
      30: aload_2
      31: ifnull        44
      34: aload_0
      35: getfield      #9                  // Field cleanUpTask:Lnet/sf/ehcache/util/WeakIdentityConcurrentMap$CleanUpTask;
      38: aload_2
      39: invokeinterface #20,  2           // InterfaceMethod net/sf/ehcache/util/WeakIdentityConcurrentMap$CleanUpTask.cleanUp:(Ljava/lang/Object;)V
      44: goto          0
      47: return

  public java.util.Set<K> keySet();
    Code:
       0: aload_0
       1: invokevirtual #10                 // Method cleanUp:()V
       4: new           #21                 // class java/util/HashSet
       7: dup
       8: invokespecial #22                 // Method java/util/HashSet."<init>":()V
      11: astore_2
      12: aload_0
      13: getfield      #5                  // Field map:Ljava/util/concurrent/ConcurrentMap;
      16: invokeinterface #23,  1           // InterfaceMethod java/util/concurrent/ConcurrentMap.keySet:()Ljava/util/Set;
      21: invokeinterface #24,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      26: astore_3
      27: aload_3
      28: invokeinterface #25,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      33: ifeq          66
      36: aload_3
      37: invokeinterface #26,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      42: checkcast     #27                 // class java/lang/ref/WeakReference
      45: astore        4
      47: aload         4
      49: invokevirtual #28                 // Method java/lang/ref/WeakReference.get:()Ljava/lang/Object;
      52: astore_1
      53: aload_1
      54: ifnull        63
      57: aload_2
      58: aload_1
      59: invokevirtual #29                 // Method java/util/HashSet.add:(Ljava/lang/Object;)Z
      62: pop
      63: goto          27
      66: aload_2
      67: areturn
}
