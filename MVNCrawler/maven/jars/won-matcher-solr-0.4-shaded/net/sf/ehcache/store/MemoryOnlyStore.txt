Compiled from "MemoryOnlyStore.java"
public class net.sf.ehcache.store.MemoryOnlyStore extends net.sf.ehcache.store.FrontEndCacheTier<net.sf.ehcache.store.NullStore, net.sf.ehcache.store.MemoryStore> {
  private static final java.lang.Object[] EMPTY_OBJECT_ARRAY;

  protected net.sf.ehcache.store.MemoryOnlyStore(net.sf.ehcache.config.CacheConfiguration, net.sf.ehcache.store.MemoryStore, net.sf.ehcache.search.impl.SearchManager);
    Code:
       0: aload_0
       1: invokestatic  #2                  // Method net/sf/ehcache/store/NullStore.create:()Lnet/sf/ehcache/store/NullStore;
       4: aload_2
       5: aload_1
       6: invokevirtual #3                  // Method net/sf/ehcache/config/CacheConfiguration.getCopyStrategy:()Lnet/sf/ehcache/store/compound/ReadWriteCopyStrategy;
       9: aload_3
      10: aload_1
      11: invokevirtual #4                  // Method net/sf/ehcache/config/CacheConfiguration.isCopyOnWrite:()Z
      14: aload_1
      15: invokevirtual #5                  // Method net/sf/ehcache/config/CacheConfiguration.isCopyOnRead:()Z
      18: invokespecial #6                  // Method net/sf/ehcache/store/FrontEndCacheTier."<init>":(Lnet/sf/ehcache/store/TierableStore;Lnet/sf/ehcache/store/TierableStore;Lnet/sf/ehcache/store/compound/ReadWriteCopyStrategy;Lnet/sf/ehcache/search/impl/SearchManager;ZZ)V
      21: return

  public static net.sf.ehcache.store.Store create(net.sf.ehcache.Ehcache, net.sf.ehcache.pool.Pool);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #7                  // Method net/sf/ehcache/store/NotifyingMemoryStore.create:(Lnet/sf/ehcache/Ehcache;Lnet/sf/ehcache/pool/Pool;)Lnet/sf/ehcache/store/NotifyingMemoryStore;
       5: astore_2
       6: new           #8                  // class net/sf/ehcache/store/MemoryOnlyStore$BruteForceSearchManager
       9: dup
      10: invokespecial #9                  // Method net/sf/ehcache/store/MemoryOnlyStore$BruteForceSearchManager."<init>":()V
      13: astore_3
      14: new           #10                 // class net/sf/ehcache/store/MemoryOnlyStore
      17: dup
      18: aload_0
      19: invokeinterface #11,  1           // InterfaceMethod net/sf/ehcache/Ehcache.getCacheConfiguration:()Lnet/sf/ehcache/config/CacheConfiguration;
      24: aload_2
      25: aload_3
      26: invokespecial #12                 // Method "<init>":(Lnet/sf/ehcache/config/CacheConfiguration;Lnet/sf/ehcache/store/MemoryStore;Lnet/sf/ehcache/search/impl/SearchManager;)V
      29: astore        4
      31: aload_3
      32: aload         4
      34: invokevirtual #13                 // Method net/sf/ehcache/store/MemoryOnlyStore$BruteForceSearchManager.setMemoryStore:(Lnet/sf/ehcache/store/MemoryOnlyStore;)V
      37: aload         4
      39: areturn

  java.util.Collection<net.sf.ehcache.Element> elementSet();
    Code:
       0: aload_0
       1: getfield      #14                 // Field authority:Lnet/sf/ehcache/store/TierableStore;
       4: checkcast     #15                 // class net/sf/ehcache/store/MemoryStore
       7: invokevirtual #16                 // Method net/sf/ehcache/store/MemoryStore.elementSet:()Ljava/util/Collection;
      10: areturn

  public net.sf.ehcache.Element get(java.lang.Object);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: areturn
       6: aload_0
       7: aload_1
       8: invokevirtual #17                 // Method getLockFor:(Ljava/lang/Object;)Ljava/util/concurrent/locks/ReadWriteLock;
      11: invokeinterface #18,  1           // InterfaceMethod java/util/concurrent/locks/ReadWriteLock.readLock:()Ljava/util/concurrent/locks/Lock;
      16: astore_2
      17: aload_2
      18: invokeinterface #19,  1           // InterfaceMethod java/util/concurrent/locks/Lock.lock:()V
      23: aload_0
      24: aload_0
      25: getfield      #14                 // Field authority:Lnet/sf/ehcache/store/TierableStore;
      28: checkcast     #15                 // class net/sf/ehcache/store/MemoryStore
      31: aload_1
      32: invokevirtual #20                 // Method net/sf/ehcache/store/MemoryStore.get:(Ljava/lang/Object;)Lnet/sf/ehcache/Element;
      35: invokevirtual #21                 // Method copyElementForReadIfNeeded:(Lnet/sf/ehcache/Element;)Lnet/sf/ehcache/Element;
      38: astore_3
      39: aload_2
      40: invokeinterface #22,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      45: aload_3
      46: areturn
      47: astore        4
      49: aload_2
      50: invokeinterface #22,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      55: aload         4
      57: athrow
    Exception table:
       from    to  target type
          23    39    47   any
          47    49    47   any

  public net.sf.ehcache.Element getQuiet(java.lang.Object);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: areturn
       6: aload_0
       7: aload_1
       8: invokevirtual #17                 // Method getLockFor:(Ljava/lang/Object;)Ljava/util/concurrent/locks/ReadWriteLock;
      11: invokeinterface #18,  1           // InterfaceMethod java/util/concurrent/locks/ReadWriteLock.readLock:()Ljava/util/concurrent/locks/Lock;
      16: astore_2
      17: aload_2
      18: invokeinterface #19,  1           // InterfaceMethod java/util/concurrent/locks/Lock.lock:()V
      23: aload_0
      24: aload_0
      25: getfield      #14                 // Field authority:Lnet/sf/ehcache/store/TierableStore;
      28: checkcast     #15                 // class net/sf/ehcache/store/MemoryStore
      31: aload_1
      32: invokevirtual #23                 // Method net/sf/ehcache/store/MemoryStore.getQuiet:(Ljava/lang/Object;)Lnet/sf/ehcache/Element;
      35: invokevirtual #21                 // Method copyElementForReadIfNeeded:(Lnet/sf/ehcache/Element;)Lnet/sf/ehcache/Element;
      38: astore_3
      39: aload_2
      40: invokeinterface #22,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      45: aload_3
      46: areturn
      47: astore        4
      49: aload_2
      50: invokeinterface #22,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      55: aload         4
      57: athrow
    Exception table:
       from    to  target type
          23    39    47   any
          47    49    47   any

  public void setInMemoryEvictionPolicy(net.sf.ehcache.store.Policy);
    Code:
       0: aload_0
       1: getfield      #14                 // Field authority:Lnet/sf/ehcache/store/TierableStore;
       4: checkcast     #15                 // class net/sf/ehcache/store/MemoryStore
       7: aload_1
       8: invokevirtual #24                 // Method net/sf/ehcache/store/MemoryStore.setInMemoryEvictionPolicy:(Lnet/sf/ehcache/store/Policy;)V
      11: return

  public net.sf.ehcache.store.Policy getInMemoryEvictionPolicy();
    Code:
       0: aload_0
       1: getfield      #14                 // Field authority:Lnet/sf/ehcache/store/TierableStore;
       4: checkcast     #15                 // class net/sf/ehcache/store/MemoryStore
       7: invokevirtual #25                 // Method net/sf/ehcache/store/MemoryStore.getInMemoryEvictionPolicy:()Lnet/sf/ehcache/store/Policy;
      10: areturn

  public java.lang.Object getMBean();
    Code:
       0: aconst_null
       1: areturn

  static java.lang.Object[] access$000();
    Code:
       0: getstatic     #1                  // Field EMPTY_OBJECT_ARRAY:[Ljava/lang/Object;
       3: areturn

  static {};
    Code:
       0: iconst_0
       1: anewarray     #26                 // class java/lang/Object
       4: putstatic     #1                  // Field EMPTY_OBJECT_ARRAY:[Ljava/lang/Object;
       7: return
}
