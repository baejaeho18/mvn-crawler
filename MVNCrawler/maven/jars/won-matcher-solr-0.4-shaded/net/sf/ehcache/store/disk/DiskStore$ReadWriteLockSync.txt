Compiled from "DiskStore.java"
final class net.sf.ehcache.store.disk.DiskStore$ReadWriteLockSync implements net.sf.ehcache.concurrent.Sync {
  private final java.util.concurrent.locks.ReentrantReadWriteLock lock;

  private net.sf.ehcache.store.disk.DiskStore$ReadWriteLockSync(java.util.concurrent.locks.ReentrantReadWriteLock);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #3                  // Field lock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
       9: return

  public void lock(net.sf.ehcache.concurrent.LockType);
    Code:
       0: getstatic     #4                  // Field net/sf/ehcache/store/disk/DiskStore$1.$SwitchMap$net$sf$ehcache$concurrent$LockType:[I
       3: aload_1
       4: invokevirtual #5                  // Method net/sf/ehcache/concurrent/LockType.ordinal:()I
       7: iaload
       8: lookupswitch  { // 2
                     1: 36
                     2: 49
               default: 62
          }
      36: aload_0
      37: getfield      #3                  // Field lock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
      40: invokevirtual #6                  // Method java/util/concurrent/locks/ReentrantReadWriteLock.readLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;
      43: invokevirtual #7                  // Method java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock:()V
      46: goto          72
      49: aload_0
      50: getfield      #3                  // Field lock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
      53: invokevirtual #8                  // Method java/util/concurrent/locks/ReentrantReadWriteLock.writeLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;
      56: invokevirtual #9                  // Method java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock.lock:()V
      59: goto          72
      62: new           #10                 // class java/lang/IllegalArgumentException
      65: dup
      66: ldc           #11                 // String We don\'t support any other lock type than READ or WRITE!
      68: invokespecial #12                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      71: athrow
      72: return

  public boolean tryLock(net.sf.ehcache.concurrent.LockType, long) throws java.lang.InterruptedException;
    Code:
       0: getstatic     #4                  // Field net/sf/ehcache/store/disk/DiskStore$1.$SwitchMap$net$sf$ehcache$concurrent$LockType:[I
       3: aload_1
       4: invokevirtual #5                  // Method net/sf/ehcache/concurrent/LockType.ordinal:()I
       7: iaload
       8: lookupswitch  { // 2
                     1: 36
                     2: 51
               default: 66
          }
      36: aload_0
      37: getfield      #3                  // Field lock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
      40: invokevirtual #6                  // Method java/util/concurrent/locks/ReentrantReadWriteLock.readLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;
      43: lload_2
      44: getstatic     #13                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      47: invokevirtual #14                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.tryLock:(JLjava/util/concurrent/TimeUnit;)Z
      50: ireturn
      51: aload_0
      52: getfield      #3                  // Field lock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
      55: invokevirtual #8                  // Method java/util/concurrent/locks/ReentrantReadWriteLock.writeLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;
      58: lload_2
      59: getstatic     #13                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      62: invokevirtual #15                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock.tryLock:(JLjava/util/concurrent/TimeUnit;)Z
      65: ireturn
      66: new           #10                 // class java/lang/IllegalArgumentException
      69: dup
      70: ldc           #11                 // String We don\'t support any other lock type than READ or WRITE!
      72: invokespecial #12                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      75: athrow

  public void unlock(net.sf.ehcache.concurrent.LockType);
    Code:
       0: getstatic     #4                  // Field net/sf/ehcache/store/disk/DiskStore$1.$SwitchMap$net$sf$ehcache$concurrent$LockType:[I
       3: aload_1
       4: invokevirtual #5                  // Method net/sf/ehcache/concurrent/LockType.ordinal:()I
       7: iaload
       8: lookupswitch  { // 2
                     1: 36
                     2: 49
               default: 62
          }
      36: aload_0
      37: getfield      #3                  // Field lock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
      40: invokevirtual #6                  // Method java/util/concurrent/locks/ReentrantReadWriteLock.readLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;
      43: invokevirtual #16                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock:()V
      46: goto          72
      49: aload_0
      50: getfield      #3                  // Field lock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
      53: invokevirtual #8                  // Method java/util/concurrent/locks/ReentrantReadWriteLock.writeLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;
      56: invokevirtual #17                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock.unlock:()V
      59: goto          72
      62: new           #10                 // class java/lang/IllegalArgumentException
      65: dup
      66: ldc           #11                 // String We don\'t support any other lock type than READ or WRITE!
      68: invokespecial #12                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      71: athrow
      72: return

  public boolean isHeldByCurrentThread(net.sf.ehcache.concurrent.LockType);
    Code:
       0: getstatic     #4                  // Field net/sf/ehcache/store/disk/DiskStore$1.$SwitchMap$net$sf$ehcache$concurrent$LockType:[I
       3: aload_1
       4: invokevirtual #5                  // Method net/sf/ehcache/concurrent/LockType.ordinal:()I
       7: iaload
       8: lookupswitch  { // 2
                     1: 36
                     2: 46
               default: 54
          }
      36: new           #18                 // class java/lang/UnsupportedOperationException
      39: dup
      40: ldc           #19                 // String Querying of read lock is not supported.
      42: invokespecial #20                 // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
      45: athrow
      46: aload_0
      47: getfield      #3                  // Field lock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
      50: invokevirtual #21                 // Method java/util/concurrent/locks/ReentrantReadWriteLock.isWriteLockedByCurrentThread:()Z
      53: ireturn
      54: new           #10                 // class java/lang/IllegalArgumentException
      57: dup
      58: ldc           #11                 // String We don\'t support any other lock type than READ or WRITE!
      60: invokespecial #12                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      63: athrow

  net.sf.ehcache.store.disk.DiskStore$ReadWriteLockSync(java.util.concurrent.locks.ReentrantReadWriteLock, net.sf.ehcache.store.disk.DiskStore$1);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method "<init>":(Ljava/util/concurrent/locks/ReentrantReadWriteLock;)V
       5: return
}
