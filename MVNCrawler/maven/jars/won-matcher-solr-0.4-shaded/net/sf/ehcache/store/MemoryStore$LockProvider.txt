Compiled from "MemoryStore.java"
class net.sf.ehcache.store.MemoryStore$LockProvider implements net.sf.ehcache.concurrent.CacheLockProvider {
  final net.sf.ehcache.store.MemoryStore this$0;

  private net.sf.ehcache.store.MemoryStore$LockProvider(net.sf.ehcache.store.MemoryStore);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2                  // Field this$0:Lnet/sf/ehcache/store/MemoryStore;
       5: aload_0
       6: invokespecial #3                  // Method java/lang/Object."<init>":()V
       9: return

  public net.sf.ehcache.concurrent.Sync getSyncForKey(java.lang.Object);
    Code:
       0: new           #4                  // class net/sf/ehcache/concurrent/ReadWriteLockSync
       3: dup
       4: aload_0
       5: getfield      #2                  // Field this$0:Lnet/sf/ehcache/store/MemoryStore;
       8: invokestatic  #5                  // Method net/sf/ehcache/store/MemoryStore.access$100:(Lnet/sf/ehcache/store/MemoryStore;)Lnet/sf/ehcache/store/chm/SelectableConcurrentHashMap;
      11: aload_1
      12: invokevirtual #6                  // Method net/sf/ehcache/store/chm/SelectableConcurrentHashMap.lockFor:(Ljava/lang/Object;)Ljava/util/concurrent/locks/ReentrantReadWriteLock;
      15: invokespecial #7                  // Method net/sf/ehcache/concurrent/ReadWriteLockSync."<init>":(Ljava/util/concurrent/locks/ReentrantReadWriteLock;)V
      18: areturn

  net.sf.ehcache.store.MemoryStore$LockProvider(net.sf.ehcache.store.MemoryStore, net.sf.ehcache.store.MemoryStore$1);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method "<init>":(Lnet/sf/ehcache/store/MemoryStore;)V
       5: return
}
