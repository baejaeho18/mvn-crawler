Compiled from "LruMemoryStore.java"
public class net.sf.ehcache.store.LruMemoryStore extends net.sf.ehcache.store.AbstractStore {
  private static final org.slf4j.Logger LOG;

  protected net.sf.ehcache.Ehcache cache;

  protected java.util.Map map;

  protected final net.sf.ehcache.store.Store diskStore;

  protected net.sf.ehcache.Status status;

  protected long maximumSize;

  private final boolean cachePinned;

  private final boolean elementPinningEnabled;

  public net.sf.ehcache.store.LruMemoryStore(net.sf.ehcache.Ehcache, net.sf.ehcache.store.Store);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method net/sf/ehcache/store/AbstractStore."<init>":()V
       4: aload_0
       5: getstatic     #4                  // Field net/sf/ehcache/Status.STATUS_UNINITIALISED:Lnet/sf/ehcache/Status;
       8: putfield      #5                  // Field status:Lnet/sf/ehcache/Status;
      11: aload_0
      12: aload_1
      13: invokeinterface #6,  1            // InterfaceMethod net/sf/ehcache/Ehcache.getCacheConfiguration:()Lnet/sf/ehcache/config/CacheConfiguration;
      18: invokevirtual #7                  // Method net/sf/ehcache/config/CacheConfiguration.getMaxEntriesLocalHeap:()J
      21: putfield      #8                  // Field maximumSize:J
      24: aload_0
      25: aload_0
      26: aload_1
      27: invokeinterface #6,  1            // InterfaceMethod net/sf/ehcache/Ehcache.getCacheConfiguration:()Lnet/sf/ehcache/config/CacheConfiguration;
      32: invokespecial #9                  // Method determineCachePinned:(Lnet/sf/ehcache/config/CacheConfiguration;)Z
      35: putfield      #2                  // Field cachePinned:Z
      38: aload_0
      39: aload_1
      40: invokeinterface #6,  1            // InterfaceMethod net/sf/ehcache/Ehcache.getCacheConfiguration:()Lnet/sf/ehcache/config/CacheConfiguration;
      45: invokevirtual #10                 // Method net/sf/ehcache/config/CacheConfiguration.isOverflowToOffHeap:()Z
      48: ifne          55
      51: iconst_1
      52: goto          56
      55: iconst_0
      56: putfield      #1                  // Field elementPinningEnabled:Z
      59: aload_0
      60: aload_1
      61: putfield      #11                 // Field cache:Lnet/sf/ehcache/Ehcache;
      64: aload_0
      65: aload_2
      66: putfield      #12                 // Field diskStore:Lnet/sf/ehcache/store/Store;
      69: aload_0
      70: new           #13                 // class net/sf/ehcache/store/LruMemoryStore$SpoolingLinkedHashMap
      73: dup
      74: aload_0
      75: invokespecial #14                 // Method net/sf/ehcache/store/LruMemoryStore$SpoolingLinkedHashMap."<init>":(Lnet/sf/ehcache/store/LruMemoryStore;)V
      78: putfield      #15                 // Field map:Ljava/util/Map;
      81: aload_0
      82: getstatic     #16                 // Field net/sf/ehcache/Status.STATUS_ALIVE:Lnet/sf/ehcache/Status;
      85: putfield      #5                  // Field status:Lnet/sf/ehcache/Status;
      88: return

  public synchronized void unpinAll();
    Code:
       0: aload_0
       1: getfield      #15                 // Field map:Ljava/util/Map;
       4: checkcast     #13                 // class net/sf/ehcache/store/LruMemoryStore$SpoolingLinkedHashMap
       7: invokevirtual #17                 // Method net/sf/ehcache/store/LruMemoryStore$SpoolingLinkedHashMap.unpinAll:()V
      10: return

  public synchronized boolean isPinned(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #15                 // Field map:Ljava/util/Map;
       4: checkcast     #13                 // class net/sf/ehcache/store/LruMemoryStore$SpoolingLinkedHashMap
       7: aload_1
       8: invokevirtual #18                 // Method net/sf/ehcache/store/LruMemoryStore$SpoolingLinkedHashMap.isPinned:(Ljava/lang/Object;)Z
      11: ireturn

  public synchronized void setPinned(java.lang.Object, boolean);
    Code:
       0: aload_0
       1: getfield      #15                 // Field map:Ljava/util/Map;
       4: checkcast     #13                 // class net/sf/ehcache/store/LruMemoryStore$SpoolingLinkedHashMap
       7: aload_1
       8: iload_2
       9: invokevirtual #19                 // Method net/sf/ehcache/store/LruMemoryStore$SpoolingLinkedHashMap.setPinning:(Ljava/lang/Object;Z)V
      12: return

  private boolean determineCachePinned(net.sf.ehcache.config.CacheConfiguration);
    Code:
       0: aload_1
       1: invokevirtual #20                 // Method net/sf/ehcache/config/CacheConfiguration.getPinningConfiguration:()Lnet/sf/ehcache/config/PinningConfiguration;
       4: astore_2
       5: aload_2
       6: ifnonnull     11
       9: iconst_0
      10: ireturn
      11: getstatic     #21                 // Field net/sf/ehcache/store/LruMemoryStore$1.$SwitchMap$net$sf$ehcache$config$PinningConfiguration$Store:[I
      14: aload_2
      15: invokevirtual #22                 // Method net/sf/ehcache/config/PinningConfiguration.getStore:()Lnet/sf/ehcache/config/PinningConfiguration$Store;
      18: invokevirtual #23                 // Method net/sf/ehcache/config/PinningConfiguration$Store.ordinal:()I
      21: iaload
      22: tableswitch   { // 1 to 3
                     1: 48
                     2: 50
                     3: 63
               default: 83
          }
      48: iconst_1
      49: ireturn
      50: aload_1
      51: invokevirtual #10                 // Method net/sf/ehcache/config/CacheConfiguration.isOverflowToOffHeap:()Z
      54: ifne          61
      57: iconst_1
      58: goto          62
      61: iconst_0
      62: ireturn
      63: aload_1
      64: invokevirtual #10                 // Method net/sf/ehcache/config/CacheConfiguration.isOverflowToOffHeap:()Z
      67: ifne          81
      70: aload_1
      71: invokevirtual #24                 // Method net/sf/ehcache/config/CacheConfiguration.isOverflowToDisk:()Z
      74: ifne          81
      77: iconst_1
      78: goto          82
      81: iconst_0
      82: ireturn
      83: new           #25                 // class java/lang/IllegalArgumentException
      86: dup
      87: invokespecial #26                 // Method java/lang/IllegalArgumentException."<init>":()V
      90: athrow

  public final boolean put(net.sf.ehcache.Element) throws net.sf.ehcache.CacheException;
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: invokespecial #27                 // Method putInternal:(Lnet/sf/ehcache/Element;Lnet/sf/ehcache/writer/CacheWriterManager;)Z
       6: ireturn

  public final boolean putWithWriter(net.sf.ehcache.Element, net.sf.ehcache.writer.CacheWriterManager) throws net.sf.ehcache.CacheException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #27                 // Method putInternal:(Lnet/sf/ehcache/Element;Lnet/sf/ehcache/writer/CacheWriterManager;)Z
       6: ireturn

  private synchronized boolean putInternal(net.sf.ehcache.Element, net.sf.ehcache.writer.CacheWriterManager) throws net.sf.ehcache.CacheException;
    Code:
       0: iconst_1
       1: istore_3
       2: aload_1
       3: ifnull        45
       6: aload_0
       7: getfield      #15                 // Field map:Ljava/util/Map;
      10: aload_1
      11: invokevirtual #28                 // Method net/sf/ehcache/Element.getObjectKey:()Ljava/lang/Object;
      14: aload_1
      15: invokeinterface #29,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      20: ifnonnull     27
      23: iconst_1
      24: goto          28
      27: iconst_0
      28: istore_3
      29: aload_2
      30: ifnull        40
      33: aload_2
      34: aload_1
      35: invokeinterface #30,  2           // InterfaceMethod net/sf/ehcache/writer/CacheWriterManager.put:(Lnet/sf/ehcache/Element;)V
      40: aload_0
      41: aload_1
      42: invokevirtual #31                 // Method doPut:(Lnet/sf/ehcache/Element;)V
      45: iload_3
      46: ireturn

  protected void doPut(net.sf.ehcache.Element) throws net.sf.ehcache.CacheException;
    Code:
       0: return

  public final synchronized net.sf.ehcache.Element get(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #15                 // Field map:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #32,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #33                 // class net/sf/ehcache/Element
      13: areturn

  public final synchronized net.sf.ehcache.Element getQuiet(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #34                 // Method get:(Ljava/lang/Object;)Lnet/sf/ehcache/Element;
       5: areturn

  public final net.sf.ehcache.Element remove(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: invokespecial #35                 // Method removeInternal:(Ljava/lang/Object;Lnet/sf/ehcache/writer/CacheWriterManager;)Lnet/sf/ehcache/Element;
       6: areturn

  public final net.sf.ehcache.Element removeWithWriter(java.lang.Object, net.sf.ehcache.writer.CacheWriterManager) throws net.sf.ehcache.CacheException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #35                 // Method removeInternal:(Ljava/lang/Object;Lnet/sf/ehcache/writer/CacheWriterManager;)Lnet/sf/ehcache/Element;
       6: areturn

  private synchronized net.sf.ehcache.Element removeInternal(java.lang.Object, net.sf.ehcache.writer.CacheWriterManager) throws net.sf.ehcache.CacheException;
    Code:
       0: aload_0
       1: getfield      #15                 // Field map:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #36,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #33                 // class net/sf/ehcache/Element
      13: astore_3
      14: aload_2
      15: ifnull        33
      18: aload_2
      19: new           #37                 // class net/sf/ehcache/CacheEntry
      22: dup
      23: aload_1
      24: aload_3
      25: invokespecial #38                 // Method net/sf/ehcache/CacheEntry."<init>":(Ljava/lang/Object;Lnet/sf/ehcache/Element;)V
      28: invokeinterface #39,  2           // InterfaceMethod net/sf/ehcache/writer/CacheWriterManager.remove:(Lnet/sf/ehcache/CacheEntry;)V
      33: aload_3
      34: ifnull        39
      37: aload_3
      38: areturn
      39: aconst_null
      40: areturn

  public final synchronized void removeAll() throws net.sf.ehcache.CacheException;
    Code:
       0: aload_0
       1: invokevirtual #40                 // Method clear:()V
       4: return

  protected final void clear();
    Code:
       0: aload_0
       1: getfield      #15                 // Field map:Ljava/util/Map;
       4: invokeinterface #41,  1           // InterfaceMethod java/util/Map.clear:()V
       9: return

  public final synchronized void dispose();
    Code:
       0: aload_0
       1: getfield      #5                  // Field status:Lnet/sf/ehcache/Status;
       4: getstatic     #42                 // Field net/sf/ehcache/Status.STATUS_SHUTDOWN:Lnet/sf/ehcache/Status;
       7: invokevirtual #43                 // Method net/sf/ehcache/Status.equals:(Lnet/sf/ehcache/Status;)Z
      10: ifeq          14
      13: return
      14: aload_0
      15: getstatic     #42                 // Field net/sf/ehcache/Status.STATUS_SHUTDOWN:Lnet/sf/ehcache/Status;
      18: putfield      #5                  // Field status:Lnet/sf/ehcache/Status;
      21: aload_0
      22: invokevirtual #44                 // Method flush:()V
      25: aload_0
      26: aconst_null
      27: putfield      #11                 // Field cache:Lnet/sf/ehcache/Ehcache;
      30: return

  public final void flush();
    Code:
       0: aload_0
       1: getfield      #11                 // Field cache:Lnet/sf/ehcache/Ehcache;
       4: invokeinterface #6,  1            // InterfaceMethod net/sf/ehcache/Ehcache.getCacheConfiguration:()Lnet/sf/ehcache/config/CacheConfiguration;
       9: invokevirtual #45                 // Method net/sf/ehcache/config/CacheConfiguration.isDiskPersistent:()Z
      12: ifeq          82
      15: getstatic     #46                 // Field LOG:Lorg/slf4j/Logger;
      18: invokeinterface #47,  1           // InterfaceMethod org/slf4j/Logger.isDebugEnabled:()Z
      23: ifeq          78
      26: getstatic     #46                 // Field LOG:Lorg/slf4j/Logger;
      29: new           #48                 // class java/lang/StringBuilder
      32: dup
      33: invokespecial #49                 // Method java/lang/StringBuilder."<init>":()V
      36: aload_0
      37: getfield      #11                 // Field cache:Lnet/sf/ehcache/Ehcache;
      40: invokeinterface #50,  1           // InterfaceMethod net/sf/ehcache/Ehcache.getName:()Ljava/lang/String;
      45: invokevirtual #51                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      48: ldc           #52                 // String  is persistent. Spooling
      50: invokevirtual #51                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      53: aload_0
      54: getfield      #15                 // Field map:Ljava/util/Map;
      57: invokeinterface #53,  1           // InterfaceMethod java/util/Map.size:()I
      62: invokevirtual #54                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      65: ldc           #55                 // String  elements to the disk store.
      67: invokevirtual #51                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      70: invokevirtual #56                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      73: invokeinterface #57,  2           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;)V
      78: aload_0
      79: invokevirtual #58                 // Method spoolAllToDisk:()V
      82: aload_0
      83: getfield      #11                 // Field cache:Lnet/sf/ehcache/Ehcache;
      86: invokeinterface #6,  1            // InterfaceMethod net/sf/ehcache/Ehcache.getCacheConfiguration:()Lnet/sf/ehcache/config/CacheConfiguration;
      91: invokevirtual #59                 // Method net/sf/ehcache/config/CacheConfiguration.isClearOnFlush:()Z
      94: ifeq          101
      97: aload_0
      98: invokevirtual #40                 // Method clear:()V
     101: return

  protected final void spoolAllToDisk();
    Code:
       0: aload_0
       1: getfield      #11                 // Field cache:Lnet/sf/ehcache/Ehcache;
       4: invokeinterface #6,  1            // InterfaceMethod net/sf/ehcache/Ehcache.getCacheConfiguration:()Lnet/sf/ehcache/config/CacheConfiguration;
       9: invokevirtual #59                 // Method net/sf/ehcache/config/CacheConfiguration.isClearOnFlush:()Z
      12: istore_1
      13: aload_0
      14: invokevirtual #60                 // Method getKeys:()Ljava/util/List;
      17: invokeinterface #61,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      22: astore_2
      23: aload_2
      24: invokeinterface #62,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      29: ifeq          136
      32: aload_2
      33: invokeinterface #63,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      38: astore_3
      39: aload_0
      40: getfield      #15                 // Field map:Ljava/util/Map;
      43: aload_3
      44: invokeinterface #32,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      49: checkcast     #33                 // class net/sf/ehcache/Element
      52: astore        4
      54: aload         4
      56: ifnull        133
      59: aload         4
      61: invokevirtual #64                 // Method net/sf/ehcache/Element.isSerializable:()Z
      64: ifne          117
      67: getstatic     #46                 // Field LOG:Lorg/slf4j/Logger;
      70: invokeinterface #65,  1           // InterfaceMethod org/slf4j/Logger.isWarnEnabled:()Z
      75: ifeq          133
      78: getstatic     #46                 // Field LOG:Lorg/slf4j/Logger;
      81: new           #48                 // class java/lang/StringBuilder
      84: dup
      85: invokespecial #49                 // Method java/lang/StringBuilder."<init>":()V
      88: ldc           #66                 // String Object with key
      90: invokevirtual #51                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      93: aload         4
      95: invokevirtual #28                 // Method net/sf/ehcache/Element.getObjectKey:()Ljava/lang/Object;
      98: invokevirtual #67                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     101: ldc           #68                 // String  is not Serializable and is not being overflowed to disk.
     103: invokevirtual #51                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     106: invokevirtual #56                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     109: invokeinterface #69,  2           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;)V
     114: goto          133
     117: aload_0
     118: aload         4
     120: invokevirtual #70                 // Method spoolToDisk:(Lnet/sf/ehcache/Element;)V
     123: iload_1
     124: ifeq          133
     127: aload_0
     128: aload_3
     129: invokevirtual #71                 // Method remove:(Ljava/lang/Object;)Lnet/sf/ehcache/Element;
     132: pop
     133: goto          23
     136: return

  protected void spoolToDisk(net.sf.ehcache.Element);
    Code:
       0: aload_0
       1: getfield      #12                 // Field diskStore:Lnet/sf/ehcache/store/Store;
       4: aload_1
       5: invokeinterface #72,  2           // InterfaceMethod net/sf/ehcache/store/Store.put:(Lnet/sf/ehcache/Element;)Z
      10: pop
      11: getstatic     #46                 // Field LOG:Lorg/slf4j/Logger;
      14: invokeinterface #47,  1           // InterfaceMethod org/slf4j/Logger.isDebugEnabled:()Z
      19: ifeq          64
      22: getstatic     #46                 // Field LOG:Lorg/slf4j/Logger;
      25: new           #48                 // class java/lang/StringBuilder
      28: dup
      29: invokespecial #49                 // Method java/lang/StringBuilder."<init>":()V
      32: aload_0
      33: getfield      #11                 // Field cache:Lnet/sf/ehcache/Ehcache;
      36: invokeinterface #50,  1           // InterfaceMethod net/sf/ehcache/Ehcache.getName:()Ljava/lang/String;
      41: invokevirtual #51                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      44: ldc           #73                 // String Cache: spool to disk done for:
      46: invokevirtual #51                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      49: aload_1
      50: invokevirtual #28                 // Method net/sf/ehcache/Element.getObjectKey:()Ljava/lang/Object;
      53: invokevirtual #67                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      56: invokevirtual #56                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      59: invokeinterface #57,  2           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;)V
      64: return

  public final net.sf.ehcache.Status getStatus();
    Code:
       0: aload_0
       1: getfield      #5                  // Field status:Lnet/sf/ehcache/Status;
       4: areturn

  public final synchronized java.util.List getKeys();
    Code:
       0: new           #74                 // class java/util/ArrayList
       3: dup
       4: aload_0
       5: getfield      #15                 // Field map:Ljava/util/Map;
       8: invokeinterface #75,  1           // InterfaceMethod java/util/Map.keySet:()Ljava/util/Set;
      13: invokespecial #76                 // Method java/util/ArrayList."<init>":(Ljava/util/Collection;)V
      16: areturn

  public final int getSize();
    Code:
       0: aload_0
       1: getfield      #15                 // Field map:Ljava/util/Map;
       4: invokeinterface #53,  1           // InterfaceMethod java/util/Map.size:()I
       9: ireturn

  public final int getTerracottaClusteredSize();
    Code:
       0: iconst_0
       1: ireturn

  public final boolean containsKey(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #15                 // Field map:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #77,  2           // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
      10: ireturn

  public final synchronized long getSizeInBytes() throws net.sf.ehcache.CacheException;
    Code:
       0: new           #78                 // class net/sf/ehcache/pool/impl/DefaultSizeOfEngine
       3: dup
       4: aload_0
       5: getfield      #11                 // Field cache:Lnet/sf/ehcache/Ehcache;
       8: invokestatic  #79                 // Method net/sf/ehcache/config/SizeOfPolicyConfiguration.resolveMaxDepth:(Lnet/sf/ehcache/Ehcache;)I
      11: aload_0
      12: getfield      #11                 // Field cache:Lnet/sf/ehcache/Ehcache;
      15: invokestatic  #80                 // Method net/sf/ehcache/config/SizeOfPolicyConfiguration.resolveBehavior:(Lnet/sf/ehcache/Ehcache;)Lnet/sf/ehcache/config/SizeOfPolicyConfiguration$MaxDepthExceededBehavior;
      18: getstatic     #81                 // Field net/sf/ehcache/config/SizeOfPolicyConfiguration$MaxDepthExceededBehavior.ABORT:Lnet/sf/ehcache/config/SizeOfPolicyConfiguration$MaxDepthExceededBehavior;
      21: invokevirtual #82                 // Method net/sf/ehcache/config/SizeOfPolicyConfiguration$MaxDepthExceededBehavior.equals:(Ljava/lang/Object;)Z
      24: invokespecial #83                 // Method net/sf/ehcache/pool/impl/DefaultSizeOfEngine."<init>":(IZ)V
      27: astore_1
      28: lconst_0
      29: lstore_2
      30: aload_0
      31: getfield      #15                 // Field map:Ljava/util/Map;
      34: invokeinterface #84,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      39: invokeinterface #85,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      44: astore        4
      46: aload         4
      48: invokeinterface #62,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      53: ifeq          116
      56: aload         4
      58: invokeinterface #63,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      63: astore        5
      65: aload         5
      67: checkcast     #86                 // class java/util/Map$Entry
      70: astore        6
      72: aload         6
      74: invokeinterface #87,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      79: checkcast     #33                 // class net/sf/ehcache/Element
      82: astore        7
      84: aload         7
      86: ifnull        113
      89: aload_1
      90: aload         6
      92: invokeinterface #88,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      97: aload         7
      99: aconst_null
     100: invokevirtual #89                 // Method net/sf/ehcache/pool/impl/DefaultSizeOfEngine.sizeOf:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lnet/sf/ehcache/pool/Size;
     103: astore        8
     105: lload_2
     106: aload         8
     108: invokevirtual #90                 // Method net/sf/ehcache/pool/Size.getCalculated:()J
     111: ladd
     112: lstore_2
     113: goto          46
     116: lload_2
     117: lreturn

  protected final void evict(net.sf.ehcache.Element) throws net.sf.ehcache.CacheException;
    Code:
       0: iconst_0
       1: istore_2
       2: aload_0
       3: getfield      #11                 // Field cache:Lnet/sf/ehcache/Ehcache;
       6: invokeinterface #6,  1            // InterfaceMethod net/sf/ehcache/Ehcache.getCacheConfiguration:()Lnet/sf/ehcache/config/CacheConfiguration;
      11: invokevirtual #24                 // Method net/sf/ehcache/config/CacheConfiguration.isOverflowToDisk:()Z
      14: ifeq          77
      17: aload_1
      18: invokevirtual #64                 // Method net/sf/ehcache/Element.isSerializable:()Z
      21: ifne          70
      24: getstatic     #46                 // Field LOG:Lorg/slf4j/Logger;
      27: invokeinterface #65,  1           // InterfaceMethod org/slf4j/Logger.isWarnEnabled:()Z
      32: ifeq          77
      35: getstatic     #46                 // Field LOG:Lorg/slf4j/Logger;
      38: new           #48                 // class java/lang/StringBuilder
      41: dup
      42: ldc           #66                 // String Object with key
      44: invokespecial #91                 // Method java/lang/StringBuilder."<init>":(Ljava/lang/String;)V
      47: aload_1
      48: invokevirtual #28                 // Method net/sf/ehcache/Element.getObjectKey:()Ljava/lang/Object;
      51: invokevirtual #67                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      54: ldc           #92                 // String  is not Serializable and cannot be overflowed to disk
      56: invokevirtual #51                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      59: invokevirtual #56                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      62: invokeinterface #69,  2           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;)V
      67: goto          77
      70: aload_0
      71: aload_1
      72: invokevirtual #70                 // Method spoolToDisk:(Lnet/sf/ehcache/Element;)V
      75: iconst_1
      76: istore_2
      77: iload_2
      78: ifne          95
      81: aload_0
      82: getfield      #11                 // Field cache:Lnet/sf/ehcache/Ehcache;
      85: invokeinterface #93,  1           // InterfaceMethod net/sf/ehcache/Ehcache.getCacheEventNotificationService:()Lnet/sf/ehcache/event/RegisteredEventListeners;
      90: aload_1
      91: iconst_0
      92: invokevirtual #94                 // Method net/sf/ehcache/event/RegisteredEventListeners.notifyElementEvicted:(Lnet/sf/ehcache/Element;Z)V
      95: return

  protected final void notifyExpiry(net.sf.ehcache.Element);
    Code:
       0: aload_0
       1: getfield      #11                 // Field cache:Lnet/sf/ehcache/Ehcache;
       4: invokeinterface #93,  1           // InterfaceMethod net/sf/ehcache/Ehcache.getCacheEventNotificationService:()Lnet/sf/ehcache/event/RegisteredEventListeners;
       9: aload_1
      10: iconst_0
      11: invokevirtual #95                 // Method net/sf/ehcache/event/RegisteredEventListeners.notifyElementExpiry:(Lnet/sf/ehcache/Element;Z)V
      14: return

  protected final boolean isFull();
    Code:
       0: aload_0
       1: getfield      #8                  // Field maximumSize:J
       4: lconst_0
       5: lcmp
       6: ifle          31
       9: aload_0
      10: getfield      #15                 // Field map:Ljava/util/Map;
      13: invokeinterface #53,  1           // InterfaceMethod java/util/Map.size:()I
      18: i2l
      19: aload_0
      20: getfield      #8                  // Field maximumSize:J
      23: lcmp
      24: ifle          31
      27: iconst_1
      28: goto          32
      31: iconst_0
      32: ireturn

  public void expireElements();
    Code:
       0: return

  public boolean bufferFull();
    Code:
       0: iconst_0
       1: ireturn

  java.util.Map getBackingMap();
    Code:
       0: aload_0
       1: getfield      #15                 // Field map:Ljava/util/Map;
       4: areturn

  public java.lang.Object getMBean();
    Code:
       0: aconst_null
       1: areturn

  public net.sf.ehcache.store.Policy getEvictionPolicy();
    Code:
       0: new           #96                 // class net/sf/ehcache/store/LruPolicy
       3: dup
       4: invokespecial #97                 // Method net/sf/ehcache/store/LruPolicy."<init>":()V
       7: areturn

  public void setEvictionPolicy(net.sf.ehcache.store.Policy);
    Code:
       0: new           #98                 // class java/lang/UnsupportedOperationException
       3: dup
       4: ldc           #99                 // String This store is LRU only. It does not support changing the eviction strategy.
       6: invokespecial #100                // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
       9: athrow

  public java.lang.Object getInternalContext();
    Code:
       0: aconst_null
       1: areturn

  public boolean containsKeyInMemory(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #101                // Method containsKey:(Ljava/lang/Object;)Z
       5: ireturn

  public boolean containsKeyOffHeap(java.lang.Object);
    Code:
       0: iconst_0
       1: ireturn

  public boolean containsKeyOnDisk(java.lang.Object);
    Code:
       0: iconst_0
       1: ireturn

  public net.sf.ehcache.store.Policy getInMemoryEvictionPolicy();
    Code:
       0: aload_0
       1: invokevirtual #102                // Method getEvictionPolicy:()Lnet/sf/ehcache/store/Policy;
       4: areturn

  public int getInMemorySize();
    Code:
       0: aload_0
       1: invokevirtual #103                // Method getSize:()I
       4: ireturn

  public long getInMemorySizeInBytes();
    Code:
       0: aload_0
       1: invokevirtual #104                // Method getSizeInBytes:()J
       4: lreturn

  public int getOffHeapSize();
    Code:
       0: iconst_0
       1: ireturn

  public long getOffHeapSizeInBytes();
    Code:
       0: lconst_0
       1: lreturn

  public int getOnDiskSize();
    Code:
       0: iconst_0
       1: ireturn

  public long getOnDiskSizeInBytes();
    Code:
       0: lconst_0
       1: lreturn

  public void setInMemoryEvictionPolicy(net.sf.ehcache.store.Policy);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #105                // Method setEvictionPolicy:(Lnet/sf/ehcache/store/Policy;)V
       5: return

  public net.sf.ehcache.Element putIfAbsent(net.sf.ehcache.Element) throws java.lang.NullPointerException;
    Code:
       0: new           #98                 // class java/lang/UnsupportedOperationException
       3: dup
       4: invokespecial #106                // Method java/lang/UnsupportedOperationException."<init>":()V
       7: athrow

  public net.sf.ehcache.Element removeElement(net.sf.ehcache.Element, net.sf.ehcache.store.ElementValueComparator) throws java.lang.NullPointerException;
    Code:
       0: new           #98                 // class java/lang/UnsupportedOperationException
       3: dup
       4: invokespecial #106                // Method java/lang/UnsupportedOperationException."<init>":()V
       7: athrow

  public boolean replace(net.sf.ehcache.Element, net.sf.ehcache.Element, net.sf.ehcache.store.ElementValueComparator) throws java.lang.NullPointerException, java.lang.IllegalArgumentException;
    Code:
       0: new           #98                 // class java/lang/UnsupportedOperationException
       3: dup
       4: invokespecial #106                // Method java/lang/UnsupportedOperationException."<init>":()V
       7: athrow

  public net.sf.ehcache.Element replace(net.sf.ehcache.Element) throws java.lang.NullPointerException;
    Code:
       0: new           #98                 // class java/lang/UnsupportedOperationException
       3: dup
       4: invokespecial #106                // Method java/lang/UnsupportedOperationException."<init>":()V
       7: athrow

  static boolean access$000(net.sf.ehcache.store.LruMemoryStore);
    Code:
       0: aload_0
       1: getfield      #2                  // Field cachePinned:Z
       4: ireturn

  static boolean access$100(net.sf.ehcache.store.LruMemoryStore);
    Code:
       0: aload_0
       1: getfield      #1                  // Field elementPinningEnabled:Z
       4: ireturn

  static {};
    Code:
       0: ldc_w         #107                // class net/sf/ehcache/store/LruMemoryStore
       3: invokevirtual #108                // Method java/lang/Class.getName:()Ljava/lang/String;
       6: invokestatic  #109                // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/String;)Lorg/slf4j/Logger;
       9: putstatic     #46                 // Field LOG:Lorg/slf4j/Logger;
      12: return
}
