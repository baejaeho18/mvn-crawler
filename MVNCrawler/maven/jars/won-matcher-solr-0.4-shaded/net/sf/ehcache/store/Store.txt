Compiled from "Store.java"
public interface net.sf.ehcache.store.Store {
  public static final java.lang.String CLUSTER_COHERENT;

  public static final java.lang.String NODE_COHERENT;

  public abstract void unpinAll();

  public abstract boolean isPinned(java.lang.Object);

  public abstract void setPinned(java.lang.Object, boolean);

  public abstract void addStoreListener(net.sf.ehcache.store.StoreListener);

  public abstract void removeStoreListener(net.sf.ehcache.store.StoreListener);

  public abstract boolean put(net.sf.ehcache.Element) throws net.sf.ehcache.CacheException;

  public abstract void putAll(java.util.Collection<net.sf.ehcache.Element>) throws net.sf.ehcache.CacheException;

  public abstract boolean putWithWriter(net.sf.ehcache.Element, net.sf.ehcache.writer.CacheWriterManager) throws net.sf.ehcache.CacheException;

  public abstract net.sf.ehcache.Element get(java.lang.Object);

  public abstract net.sf.ehcache.Element getQuiet(java.lang.Object);

  public abstract java.util.List getKeys();

  public abstract net.sf.ehcache.Element remove(java.lang.Object);

  public abstract void removeAll(java.util.Collection<?>);

  public abstract net.sf.ehcache.Element removeWithWriter(java.lang.Object, net.sf.ehcache.writer.CacheWriterManager) throws net.sf.ehcache.CacheException;

  public abstract void removeAll() throws net.sf.ehcache.CacheException;

  public abstract net.sf.ehcache.Element putIfAbsent(net.sf.ehcache.Element) throws java.lang.NullPointerException;

  public abstract net.sf.ehcache.Element removeElement(net.sf.ehcache.Element, net.sf.ehcache.store.ElementValueComparator) throws java.lang.NullPointerException;

  public abstract boolean replace(net.sf.ehcache.Element, net.sf.ehcache.Element, net.sf.ehcache.store.ElementValueComparator) throws java.lang.NullPointerException, java.lang.IllegalArgumentException;

  public abstract net.sf.ehcache.Element replace(net.sf.ehcache.Element) throws java.lang.NullPointerException;

  public abstract void dispose();

  public abstract int getSize();

  public abstract int getInMemorySize();

  public abstract int getOffHeapSize();

  public abstract int getOnDiskSize();

  public abstract int getTerracottaClusteredSize();

  public abstract long getInMemorySizeInBytes();

  public abstract long getOffHeapSizeInBytes();

  public abstract long getOnDiskSizeInBytes();

  public abstract boolean hasAbortedSizeOf();

  public abstract net.sf.ehcache.Status getStatus();

  public abstract boolean containsKey(java.lang.Object);

  public abstract boolean containsKeyOnDisk(java.lang.Object);

  public abstract boolean containsKeyOffHeap(java.lang.Object);

  public abstract boolean containsKeyInMemory(java.lang.Object);

  public abstract void expireElements();

  public abstract void flush() throws java.io.IOException;

  public abstract boolean bufferFull();

  public abstract net.sf.ehcache.store.Policy getInMemoryEvictionPolicy();

  public abstract void setInMemoryEvictionPolicy(net.sf.ehcache.store.Policy);

  public abstract java.lang.Object getInternalContext();

  public abstract boolean isCacheCoherent();

  public abstract boolean isClusterCoherent() throws net.sf.ehcache.terracotta.TerracottaNotRunningException;

  public abstract boolean isNodeCoherent() throws net.sf.ehcache.terracotta.TerracottaNotRunningException;

  public abstract void setNodeCoherent(boolean) throws java.lang.UnsupportedOperationException, net.sf.ehcache.terracotta.TerracottaNotRunningException;

  public abstract void waitUntilClusterCoherent() throws java.lang.UnsupportedOperationException, net.sf.ehcache.terracotta.TerracottaNotRunningException, java.lang.InterruptedException;

  public abstract java.lang.Object getMBean();

  public abstract void setAttributeExtractors(java.util.Map<java.lang.String, net.sf.ehcache.search.attribute.AttributeExtractor>);

  public abstract net.sf.ehcache.search.Results executeQuery(net.sf.ehcache.store.StoreQuery) throws net.sf.ehcache.search.SearchException;

  public abstract <T> net.sf.ehcache.search.Attribute<T> getSearchAttribute(java.lang.String);

  public abstract java.util.Map<java.lang.Object, net.sf.ehcache.Element> getAllQuiet(java.util.Collection<?>);

  public abstract java.util.Map<java.lang.Object, net.sf.ehcache.Element> getAll(java.util.Collection<?>);

  public abstract void recalculateSize(java.lang.Object);
}
