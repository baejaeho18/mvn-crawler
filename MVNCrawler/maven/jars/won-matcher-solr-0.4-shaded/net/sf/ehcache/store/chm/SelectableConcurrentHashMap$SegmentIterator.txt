Compiled from "SelectableConcurrentHashMap.java"
class net.sf.ehcache.store.chm.SelectableConcurrentHashMap$SegmentIterator implements java.util.Iterator<net.sf.ehcache.store.chm.SelectableConcurrentHashMap$HashEntry> {
  int nextTableIndex;

  net.sf.ehcache.store.chm.SelectableConcurrentHashMap$HashEntry[] currentTable;

  net.sf.ehcache.store.chm.SelectableConcurrentHashMap$HashEntry nextEntry;

  private final net.sf.ehcache.store.chm.SelectableConcurrentHashMap$Segment seg;

  private net.sf.ehcache.store.chm.SelectableConcurrentHashMap$SegmentIterator(net.sf.ehcache.store.chm.SelectableConcurrentHashMap$Segment);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_m1
       6: putfield      #3                  // Field nextTableIndex:I
       9: aload_0
      10: aload_1
      11: putfield      #4                  // Field seg:Lnet/sf/ehcache/store/chm/SelectableConcurrentHashMap$Segment;
      14: aload_0
      15: invokevirtual #5                  // Method advance:()V
      18: return

  public boolean hasNext();
    Code:
       0: aload_0
       1: getfield      #6                  // Field nextEntry:Lnet/sf/ehcache/store/chm/SelectableConcurrentHashMap$HashEntry;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public net.sf.ehcache.store.chm.SelectableConcurrentHashMap$HashEntry next();
    Code:
       0: aload_0
       1: getfield      #6                  // Field nextEntry:Lnet/sf/ehcache/store/chm/SelectableConcurrentHashMap$HashEntry;
       4: ifnonnull     9
       7: aconst_null
       8: areturn
       9: aload_0
      10: getfield      #6                  // Field nextEntry:Lnet/sf/ehcache/store/chm/SelectableConcurrentHashMap$HashEntry;
      13: astore_1
      14: aload_0
      15: invokevirtual #5                  // Method advance:()V
      18: aload_1
      19: areturn

  public void remove();
    Code:
       0: new           #7                  // class java/lang/UnsupportedOperationException
       3: dup
       4: ldc           #8                  // String remove is not supported
       6: invokespecial #9                  // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
       9: athrow

  final void advance();
    Code:
       0: aload_0
       1: getfield      #6                  // Field nextEntry:Lnet/sf/ehcache/store/chm/SelectableConcurrentHashMap$HashEntry;
       4: ifnull        23
       7: aload_0
       8: aload_0
       9: getfield      #6                  // Field nextEntry:Lnet/sf/ehcache/store/chm/SelectableConcurrentHashMap$HashEntry;
      12: getfield      #10                 // Field net/sf/ehcache/store/chm/SelectableConcurrentHashMap$HashEntry.next:Lnet/sf/ehcache/store/chm/SelectableConcurrentHashMap$HashEntry;
      15: dup_x1
      16: putfield      #6                  // Field nextEntry:Lnet/sf/ehcache/store/chm/SelectableConcurrentHashMap$HashEntry;
      19: ifnull        23
      22: return
      23: aload_0
      24: getfield      #3                  // Field nextTableIndex:I
      27: iflt          55
      30: aload_0
      31: aload_0
      32: getfield      #11                 // Field currentTable:[Lnet/sf/ehcache/store/chm/SelectableConcurrentHashMap$HashEntry;
      35: aload_0
      36: dup
      37: getfield      #3                  // Field nextTableIndex:I
      40: dup_x1
      41: iconst_1
      42: isub
      43: putfield      #3                  // Field nextTableIndex:I
      46: aaload
      47: dup_x1
      48: putfield      #6                  // Field nextEntry:Lnet/sf/ehcache/store/chm/SelectableConcurrentHashMap$HashEntry;
      51: ifnull        23
      54: return
      55: aload_0
      56: getfield      #4                  // Field seg:Lnet/sf/ehcache/store/chm/SelectableConcurrentHashMap$Segment;
      59: getfield      #12                 // Field net/sf/ehcache/store/chm/SelectableConcurrentHashMap$Segment.count:I
      62: ifeq          116
      65: aload_0
      66: aload_0
      67: getfield      #4                  // Field seg:Lnet/sf/ehcache/store/chm/SelectableConcurrentHashMap$Segment;
      70: getfield      #13                 // Field net/sf/ehcache/store/chm/SelectableConcurrentHashMap$Segment.table:[Lnet/sf/ehcache/store/chm/SelectableConcurrentHashMap$HashEntry;
      73: putfield      #11                 // Field currentTable:[Lnet/sf/ehcache/store/chm/SelectableConcurrentHashMap$HashEntry;
      76: aload_0
      77: getfield      #11                 // Field currentTable:[Lnet/sf/ehcache/store/chm/SelectableConcurrentHashMap$HashEntry;
      80: arraylength
      81: iconst_1
      82: isub
      83: istore_1
      84: iload_1
      85: iflt          116
      88: aload_0
      89: aload_0
      90: getfield      #11                 // Field currentTable:[Lnet/sf/ehcache/store/chm/SelectableConcurrentHashMap$HashEntry;
      93: iload_1
      94: aaload
      95: dup_x1
      96: putfield      #6                  // Field nextEntry:Lnet/sf/ehcache/store/chm/SelectableConcurrentHashMap$HashEntry;
      99: ifnull        110
     102: aload_0
     103: iload_1
     104: iconst_1
     105: isub
     106: putfield      #3                  // Field nextTableIndex:I
     109: return
     110: iinc          1, -1
     113: goto          84
     116: return

  public java.lang.Object next();
    Code:
       0: aload_0
       1: invokevirtual #14                 // Method next:()Lnet/sf/ehcache/store/chm/SelectableConcurrentHashMap$HashEntry;
       4: areturn

  net.sf.ehcache.store.chm.SelectableConcurrentHashMap$SegmentIterator(net.sf.ehcache.store.chm.SelectableConcurrentHashMap$Segment, net.sf.ehcache.store.chm.SelectableConcurrentHashMap$1);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method "<init>":(Lnet/sf/ehcache/store/chm/SelectableConcurrentHashMap$Segment;)V
       5: return
}
