Compiled from "AbstractBalancedAccessEvictor.java"
final class net.sf.ehcache.pool.impl.AbstractBalancedAccessEvictor$EvictionCostComparator implements java.util.Comparator<T> {
  private final long unloadedSize;

  private final java.util.Map<T, java.lang.Float> evictionCostCache;

  final net.sf.ehcache.pool.impl.AbstractBalancedAccessEvictor this$0;

  public net.sf.ehcache.pool.impl.AbstractBalancedAccessEvictor$EvictionCostComparator(net.sf.ehcache.pool.impl.AbstractBalancedAccessEvictor, long, int);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lnet/sf/ehcache/pool/impl/AbstractBalancedAccessEvictor;
       5: aload_0
       6: invokespecial #2                  // Method java/lang/Object."<init>":()V
       9: aload_0
      10: lload_2
      11: putfield      #3                  // Field unloadedSize:J
      14: aload_0
      15: new           #4                  // class java/util/IdentityHashMap
      18: dup
      19: iload         4
      21: invokespecial #5                  // Method java/util/IdentityHashMap."<init>":(I)V
      24: putfield      #6                  // Field evictionCostCache:Ljava/util/Map;
      27: return

  public int compare(T, T);
    Code:
       0: aload_0
       1: getfield      #6                  // Field evictionCostCache:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #7,  2            // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #8                  // class java/lang/Float
      13: astore_3
      14: aload_3
      15: ifnonnull     46
      18: aload_0
      19: getfield      #1                  // Field this$0:Lnet/sf/ehcache/pool/impl/AbstractBalancedAccessEvictor;
      22: aload_1
      23: aload_0
      24: getfield      #3                  // Field unloadedSize:J
      27: invokestatic  #9                  // Method net/sf/ehcache/pool/impl/AbstractBalancedAccessEvictor.access$000:(Lnet/sf/ehcache/pool/impl/AbstractBalancedAccessEvictor;Ljava/lang/Object;J)F
      30: invokestatic  #10                 // Method java/lang/Float.valueOf:(F)Ljava/lang/Float;
      33: astore_3
      34: aload_0
      35: getfield      #6                  // Field evictionCostCache:Ljava/util/Map;
      38: aload_1
      39: aload_3
      40: invokeinterface #11,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      45: pop
      46: aload_0
      47: getfield      #6                  // Field evictionCostCache:Ljava/util/Map;
      50: aload_2
      51: invokeinterface #7,  2            // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      56: checkcast     #8                  // class java/lang/Float
      59: astore        4
      61: aload         4
      63: ifnonnull     96
      66: aload_0
      67: getfield      #1                  // Field this$0:Lnet/sf/ehcache/pool/impl/AbstractBalancedAccessEvictor;
      70: aload_2
      71: aload_0
      72: getfield      #3                  // Field unloadedSize:J
      75: invokestatic  #9                  // Method net/sf/ehcache/pool/impl/AbstractBalancedAccessEvictor.access$000:(Lnet/sf/ehcache/pool/impl/AbstractBalancedAccessEvictor;Ljava/lang/Object;J)F
      78: invokestatic  #10                 // Method java/lang/Float.valueOf:(F)Ljava/lang/Float;
      81: astore        4
      83: aload_0
      84: getfield      #6                  // Field evictionCostCache:Ljava/util/Map;
      87: aload_2
      88: aload         4
      90: invokeinterface #11,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      95: pop
      96: aload_3
      97: invokevirtual #12                 // Method java/lang/Float.floatValue:()F
     100: aload         4
     102: invokevirtual #12                 // Method java/lang/Float.floatValue:()F
     105: invokestatic  #13                 // Method java/lang/Float.compare:(FF)I
     108: ireturn
}
