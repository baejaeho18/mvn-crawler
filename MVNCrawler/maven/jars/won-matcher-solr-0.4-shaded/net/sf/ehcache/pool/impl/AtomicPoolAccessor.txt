Compiled from "AtomicPoolAccessor.java"
final class net.sf.ehcache.pool.impl.AtomicPoolAccessor extends net.sf.ehcache.pool.impl.AbstractPoolAccessor<net.sf.ehcache.pool.PoolableStore> {
  private final java.util.concurrent.atomic.AtomicLong size;

  net.sf.ehcache.pool.impl.AtomicPoolAccessor(net.sf.ehcache.pool.Pool<net.sf.ehcache.pool.PoolableStore>, net.sf.ehcache.pool.PoolableStore, net.sf.ehcache.pool.SizeOfEngine, long);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokespecial #1                  // Method net/sf/ehcache/pool/impl/AbstractPoolAccessor."<init>":(Lnet/sf/ehcache/pool/Pool;Ljava/lang/Object;Lnet/sf/ehcache/pool/SizeOfEngine;)V
       7: aload_0
       8: new           #2                  // class java/util/concurrent/atomic/AtomicLong
      11: dup
      12: lload         4
      14: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicLong."<init>":(J)V
      17: putfield      #4                  // Field size:Ljava/util/concurrent/atomic/AtomicLong;
      20: return

  protected long add(long, boolean);
    Code:
       0: aload_0
       1: invokevirtual #5                  // Method getPool:()Lnet/sf/ehcache/pool/Pool;
       4: invokeinterface #6,  1            // InterfaceMethod net/sf/ehcache/pool/Pool.getSize:()J
       9: lload_1
      10: ladd
      11: lstore        4
      13: lload         4
      15: aload_0
      16: invokevirtual #5                  // Method getPool:()Lnet/sf/ehcache/pool/Pool;
      19: invokeinterface #7,  1            // InterfaceMethod net/sf/ehcache/pool/Pool.getMaxSize:()J
      24: lcmp
      25: ifgt          39
      28: aload_0
      29: getfield      #4                  // Field size:Ljava/util/concurrent/atomic/AtomicLong;
      32: lload_1
      33: invokevirtual #8                  // Method java/util/concurrent/atomic/AtomicLong.addAndGet:(J)J
      36: pop2
      37: lload_1
      38: lreturn
      39: iload_3
      40: ifne          61
      43: lload_1
      44: aload_0
      45: invokevirtual #5                  // Method getPool:()Lnet/sf/ehcache/pool/Pool;
      48: invokeinterface #7,  1            // InterfaceMethod net/sf/ehcache/pool/Pool.getMaxSize:()J
      53: lcmp
      54: ifle          61
      57: ldc2_w        #9                  // long -1l
      60: lreturn
      61: lload         4
      63: aload_0
      64: invokevirtual #5                  // Method getPool:()Lnet/sf/ehcache/pool/Pool;
      67: invokeinterface #7,  1            // InterfaceMethod net/sf/ehcache/pool/Pool.getMaxSize:()J
      72: lsub
      73: lstore        6
      75: aload_0
      76: invokevirtual #5                  // Method getPool:()Lnet/sf/ehcache/pool/Pool;
      79: invokeinterface #11,  1           // InterfaceMethod net/sf/ehcache/pool/Pool.getEvictor:()Lnet/sf/ehcache/pool/PoolEvictor;
      84: aload_0
      85: invokevirtual #5                  // Method getPool:()Lnet/sf/ehcache/pool/Pool;
      88: invokeinterface #12,  1           // InterfaceMethod net/sf/ehcache/pool/Pool.getPoolableStores:()Ljava/util/Collection;
      93: lload         6
      95: invokeinterface #13,  4           // InterfaceMethod net/sf/ehcache/pool/PoolEvictor.freeSpace:(Ljava/util/Collection;J)Z
     100: ifne          107
     103: iload_3
     104: ifeq          118
     107: aload_0
     108: getfield      #4                  // Field size:Ljava/util/concurrent/atomic/AtomicLong;
     111: lload_1
     112: invokevirtual #8                  // Method java/util/concurrent/atomic/AtomicLong.addAndGet:(J)J
     115: pop2
     116: lload_1
     117: lreturn
     118: ldc2_w        #9                  // long -1l
     121: lreturn

  protected boolean canAddWithoutEvicting(long);
    Code:
       0: aload_0
       1: invokevirtual #5                  // Method getPool:()Lnet/sf/ehcache/pool/Pool;
       4: invokeinterface #6,  1            // InterfaceMethod net/sf/ehcache/pool/Pool.getSize:()J
       9: lload_1
      10: ladd
      11: lstore_3
      12: lload_3
      13: aload_0
      14: invokevirtual #5                  // Method getPool:()Lnet/sf/ehcache/pool/Pool;
      17: invokeinterface #7,  1            // InterfaceMethod net/sf/ehcache/pool/Pool.getMaxSize:()J
      22: lcmp
      23: ifgt          30
      26: iconst_1
      27: goto          31
      30: iconst_0
      31: ireturn

  public long delete(long);
    Code:
       0: aload_0
       1: invokevirtual #14                 // Method checkLinked:()V
       4: aload_0
       5: getfield      #4                  // Field size:Ljava/util/concurrent/atomic/AtomicLong;
       8: lload_1
       9: lneg
      10: invokevirtual #8                  // Method java/util/concurrent/atomic/AtomicLong.addAndGet:(J)J
      13: pop2
      14: lload_1
      15: lreturn

  public long getSize();
    Code:
       0: aload_0
       1: getfield      #4                  // Field size:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #15                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
       7: lreturn

  protected void doClear();
    Code:
       0: aload_0
       1: getfield      #4                  // Field size:Ljava/util/concurrent/atomic/AtomicLong;
       4: lconst_0
       5: invokevirtual #16                 // Method java/util/concurrent/atomic/AtomicLong.set:(J)V
       8: return
}
