Compiled from "AbstractPoolAccessor.java"
public abstract class net.sf.ehcache.pool.impl.AbstractPoolAccessor<T> implements net.sf.ehcache.pool.PoolAccessor<T> {
  protected final net.sf.ehcache.pool.SizeOfEngine sizeOfEngine;

  private final java.util.concurrent.atomic.AtomicBoolean unlinked;

  private final net.sf.ehcache.pool.Pool<T> pool;

  private final T store;

  private volatile boolean abortedSizeOf;

  public net.sf.ehcache.pool.impl.AbstractPoolAccessor(net.sf.ehcache.pool.Pool<T>, T, net.sf.ehcache.pool.SizeOfEngine);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/concurrent/atomic/AtomicBoolean
       8: dup
       9: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicBoolean."<init>":()V
      12: putfield      #4                  // Field unlinked:Ljava/util/concurrent/atomic/AtomicBoolean;
      15: aload_0
      16: iconst_0
      17: putfield      #5                  // Field abortedSizeOf:Z
      20: aload_0
      21: aload_1
      22: putfield      #6                  // Field pool:Lnet/sf/ehcache/pool/Pool;
      25: aload_0
      26: aload_2
      27: putfield      #7                  // Field store:Ljava/lang/Object;
      30: aload_0
      31: aload_3
      32: putfield      #8                  // Field sizeOfEngine:Lnet/sf/ehcache/pool/SizeOfEngine;
      35: return

  public final long add(java.lang.Object, java.lang.Object, java.lang.Object, boolean);
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method checkLinked:()V
       4: aload_0
       5: getfield      #8                  // Field sizeOfEngine:Lnet/sf/ehcache/pool/SizeOfEngine;
       8: aload_1
       9: aload_2
      10: aload_3
      11: invokeinterface #10,  4           // InterfaceMethod net/sf/ehcache/pool/SizeOfEngine.sizeOf:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lnet/sf/ehcache/pool/Size;
      16: astore        5
      18: aload         5
      20: invokevirtual #11                 // Method net/sf/ehcache/pool/Size.isExact:()Z
      23: ifne          31
      26: aload_0
      27: iconst_1
      28: putfield      #5                  // Field abortedSizeOf:Z
      31: aload_0
      32: aload         5
      34: invokevirtual #12                 // Method net/sf/ehcache/pool/Size.getCalculated:()J
      37: iload         4
      39: invokevirtual #13                 // Method add:(JZ)J
      42: lreturn

  public final boolean canAddWithoutEvicting(java.lang.Object, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #8                  // Field sizeOfEngine:Lnet/sf/ehcache/pool/SizeOfEngine;
       4: aload_1
       5: aload_2
       6: aload_3
       7: invokeinterface #10,  4           // InterfaceMethod net/sf/ehcache/pool/SizeOfEngine.sizeOf:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lnet/sf/ehcache/pool/Size;
      12: astore        4
      14: aload_0
      15: aload         4
      17: invokevirtual #12                 // Method net/sf/ehcache/pool/Size.getCalculated:()J
      20: invokevirtual #14                 // Method canAddWithoutEvicting:(J)Z
      23: ireturn

  protected abstract long add(long, boolean);

  protected abstract boolean canAddWithoutEvicting(long);

  public final long replace(long, java.lang.Object, java.lang.Object, java.lang.Object, boolean);
    Code:
       0: aload_0
       1: getfield      #8                  // Field sizeOfEngine:Lnet/sf/ehcache/pool/SizeOfEngine;
       4: aload_3
       5: aload         4
       7: aload         5
       9: invokeinterface #10,  4           // InterfaceMethod net/sf/ehcache/pool/SizeOfEngine.sizeOf:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lnet/sf/ehcache/pool/Size;
      14: astore        7
      16: aload         7
      18: invokevirtual #12                 // Method net/sf/ehcache/pool/Size.getCalculated:()J
      21: lload_1
      22: lsub
      23: lstore        8
      25: lload         8
      27: lconst_0
      28: lcmp
      29: ifge          41
      32: aload_0
      33: lload         8
      35: lneg
      36: invokevirtual #15                 // Method delete:(J)J
      39: lneg
      40: lreturn
      41: aload_0
      42: lload         8
      44: iload         6
      46: invokevirtual #13                 // Method add:(JZ)J
      49: lreturn

  public final void clear();
    Code:
       0: aload_0
       1: invokevirtual #16                 // Method doClear:()V
       4: aload_0
       5: iconst_0
       6: putfield      #5                  // Field abortedSizeOf:Z
       9: return

  protected abstract void doClear();

  public final void unlink();
    Code:
       0: aload_0
       1: getfield      #4                  // Field unlinked:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: iconst_0
       5: iconst_1
       6: invokevirtual #17                 // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z
       9: ifeq          22
      12: aload_0
      13: invokevirtual #18                 // Method getPool:()Lnet/sf/ehcache/pool/Pool;
      16: aload_0
      17: invokeinterface #19,  2           // InterfaceMethod net/sf/ehcache/pool/Pool.removePoolAccessor:(Lnet/sf/ehcache/pool/PoolAccessor;)V
      22: return

  public final T getStore();
    Code:
       0: aload_0
       1: getfield      #7                  // Field store:Ljava/lang/Object;
       4: areturn

  public void setMaxSize(long);
    Code:
       0: aload_0
       1: getfield      #6                  // Field pool:Lnet/sf/ehcache/pool/Pool;
       4: lload_1
       5: invokeinterface #20,  3           // InterfaceMethod net/sf/ehcache/pool/Pool.setMaxSize:(J)V
      10: return

  protected final void checkLinked() throws java.lang.IllegalStateException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field unlinked:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: invokevirtual #21                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
       7: ifeq          20
      10: new           #22                 // class java/lang/IllegalStateException
      13: dup
      14: ldc           #23                 // String BoundedPoolAccessor has been unlinked
      16: invokespecial #24                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      19: athrow
      20: return

  protected final net.sf.ehcache.pool.Pool<T> getPool();
    Code:
       0: aload_0
       1: getfield      #6                  // Field pool:Lnet/sf/ehcache/pool/Pool;
       4: areturn

  public boolean hasAbortedSizeOf();
    Code:
       0: aload_0
       1: getfield      #5                  // Field abortedSizeOf:Z
       4: ireturn
}
