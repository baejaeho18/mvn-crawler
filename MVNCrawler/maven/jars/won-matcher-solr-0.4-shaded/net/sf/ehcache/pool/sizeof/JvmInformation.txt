Compiled from "JvmInformation.java"
public abstract class net.sf.ehcache.pool.sizeof.JvmInformation extends java.lang.Enum<net.sf.ehcache.pool.sizeof.JvmInformation> {
  public static final net.sf.ehcache.pool.sizeof.JvmInformation HOTSPOT_32_BIT;

  public static final net.sf.ehcache.pool.sizeof.JvmInformation HOTSPOT_32_BIT_WITH_CONCURRENT_MARK_AND_SWEEP;

  public static final net.sf.ehcache.pool.sizeof.JvmInformation HOTSPOT_64_BIT;

  public static final net.sf.ehcache.pool.sizeof.JvmInformation HOTSPOT_64_BIT_WITH_CONCURRENT_MARK_AND_SWEEP;

  public static final net.sf.ehcache.pool.sizeof.JvmInformation HOTSPOT_64_BIT_WITH_COMPRESSED_OOPS;

  public static final net.sf.ehcache.pool.sizeof.JvmInformation HOTSPOT_64_BIT_WITH_COMPRESSED_OOPS_AND_CONCURRENT_MARK_AND_SWEEP;

  public static final net.sf.ehcache.pool.sizeof.JvmInformation JROCKIT_32_BIT;

  public static final net.sf.ehcache.pool.sizeof.JvmInformation JROCKIT_64_BIT;

  public static final net.sf.ehcache.pool.sizeof.JvmInformation JROCKIT_64_BIT_WITH_4GB_COMPRESSED_REFS;

  public static final net.sf.ehcache.pool.sizeof.JvmInformation JROCKIT_64_BIT_WITH_32GB_COMPRESSED_REFS;

  public static final net.sf.ehcache.pool.sizeof.JvmInformation JROCKIT_64_BIT_WITH_64GB_COMPRESSED_REFS;

  public static final net.sf.ehcache.pool.sizeof.JvmInformation IBM_64_BIT_WITH_COMPRESSED_REFS;

  public static final net.sf.ehcache.pool.sizeof.JvmInformation IBM_64_BIT;

  public static final net.sf.ehcache.pool.sizeof.JvmInformation IBM_32_BIT;

  public static final net.sf.ehcache.pool.sizeof.JvmInformation UNKNOWN_32_BIT;

  public static final net.sf.ehcache.pool.sizeof.JvmInformation UNKNOWN_64_BIT;

  public static final net.sf.ehcache.pool.sizeof.JvmInformation CURRENT_JVM_INFORMATION;

  private static final org.slf4j.Logger LOGGER;

  private static final long THREE_GB;

  private static final long TWENTY_FIVE_GB;

  private static final long FIFTY_SEVEN_GB;

  private static final net.sf.ehcache.pool.sizeof.JvmInformation[] $VALUES;

  public static net.sf.ehcache.pool.sizeof.JvmInformation[] values();
    Code:
       0: getstatic     #2                  // Field $VALUES:[Lnet/sf/ehcache/pool/sizeof/JvmInformation;
       3: invokevirtual #3                  // Method "[Lnet/sf/ehcache/pool/sizeof/JvmInformation;".clone:()Ljava/lang/Object;
       6: checkcast     #4                  // class "[Lnet/sf/ehcache/pool/sizeof/JvmInformation;"
       9: areturn

  public static net.sf.ehcache.pool.sizeof.JvmInformation valueOf(java.lang.String);
    Code:
       0: ldc_w         #5                  // class net/sf/ehcache/pool/sizeof/JvmInformation
       3: aload_0
       4: invokestatic  #6                  // Method java/lang/Enum.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;
       7: checkcast     #5                  // class net/sf/ehcache/pool/sizeof/JvmInformation
      10: areturn

  private net.sf.ehcache.pool.sizeof.JvmInformation();
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokespecial #7                  // Method java/lang/Enum."<init>":(Ljava/lang/String;I)V
       6: return

  public abstract int getPointerSize();

  public abstract int getJavaPointerSize();

  public int getMinimumObjectSize();
    Code:
       0: aload_0
       1: invokevirtual #8                  // Method getObjectAlignment:()I
       4: ireturn

  public int getObjectAlignment();
    Code:
       0: bipush        8
       2: ireturn

  public int getObjectHeaderSize();
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method getPointerSize:()I
       4: aload_0
       5: invokevirtual #10                 // Method getJavaPointerSize:()I
       8: iadd
       9: ireturn

  public int getFieldOffsetAdjustment();
    Code:
       0: iconst_0
       1: ireturn

  public int getAgentSizeOfAdjustment();
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsAgentSizeOf();
    Code:
       0: iconst_1
       1: ireturn

  public boolean supportsUnsafeSizeOf();
    Code:
       0: iconst_1
       1: ireturn

  public boolean supportsReflectionSizeOf();
    Code:
       0: iconst_1
       1: ireturn

  public abstract java.lang.String getJvmDescription();

  private static net.sf.ehcache.pool.sizeof.JvmInformation getJvmInformation();
    Code:
       0: aconst_null
       1: astore_0
       2: invokestatic  #11                 // Method detectHotSpot:()Lnet/sf/ehcache/pool/sizeof/JvmInformation;
       5: astore_0
       6: aload_0
       7: ifnonnull     14
      10: invokestatic  #12                 // Method detectJRockit:()Lnet/sf/ehcache/pool/sizeof/JvmInformation;
      13: astore_0
      14: aload_0
      15: ifnonnull     22
      18: invokestatic  #13                 // Method detectIBM:()Lnet/sf/ehcache/pool/sizeof/JvmInformation;
      21: astore_0
      22: aload_0
      23: ifnonnull     39
      26: invokestatic  #14                 // Method is64Bit:()Z
      29: ifeq          39
      32: getstatic     #15                 // Field UNKNOWN_64_BIT:Lnet/sf/ehcache/pool/sizeof/JvmInformation;
      35: astore_0
      36: goto          47
      39: aload_0
      40: ifnonnull     47
      43: getstatic     #16                 // Field UNKNOWN_32_BIT:Lnet/sf/ehcache/pool/sizeof/JvmInformation;
      46: astore_0
      47: aload_0
      48: areturn

  private static net.sf.ehcache.pool.sizeof.JvmInformation detectHotSpot();
    Code:
       0: aconst_null
       1: astore_0
       2: invokestatic  #17                 // Method isHotspot:()Z
       5: ifeq          70
       8: invokestatic  #14                 // Method is64Bit:()Z
      11: ifeq          66
      14: invokestatic  #18                 // Method isHotspotCompressedOops:()Z
      17: ifeq          33
      20: invokestatic  #19                 // Method isHotspotConcurrentMarkSweepGC:()Z
      23: ifeq          33
      26: getstatic     #20                 // Field HOTSPOT_64_BIT_WITH_COMPRESSED_OOPS_AND_CONCURRENT_MARK_AND_SWEEP:Lnet/sf/ehcache/pool/sizeof/JvmInformation;
      29: astore_0
      30: goto          70
      33: invokestatic  #18                 // Method isHotspotCompressedOops:()Z
      36: ifeq          46
      39: getstatic     #21                 // Field HOTSPOT_64_BIT_WITH_COMPRESSED_OOPS:Lnet/sf/ehcache/pool/sizeof/JvmInformation;
      42: astore_0
      43: goto          70
      46: invokestatic  #19                 // Method isHotspotConcurrentMarkSweepGC:()Z
      49: ifeq          59
      52: getstatic     #22                 // Field HOTSPOT_64_BIT_WITH_CONCURRENT_MARK_AND_SWEEP:Lnet/sf/ehcache/pool/sizeof/JvmInformation;
      55: astore_0
      56: goto          70
      59: getstatic     #23                 // Field HOTSPOT_64_BIT:Lnet/sf/ehcache/pool/sizeof/JvmInformation;
      62: astore_0
      63: goto          70
      66: getstatic     #24                 // Field HOTSPOT_32_BIT:Lnet/sf/ehcache/pool/sizeof/JvmInformation;
      69: astore_0
      70: aload_0
      71: areturn

  private static net.sf.ehcache.pool.sizeof.JvmInformation detectJRockit();
    Code:
       0: aconst_null
       1: astore_0
       2: invokestatic  #25                 // Method isJRockit:()Z
       5: ifeq          64
       8: invokestatic  #14                 // Method is64Bit:()Z
      11: ifeq          60
      14: invokestatic  #26                 // Method isJRockit4GBCompression:()Z
      17: ifeq          27
      20: getstatic     #27                 // Field JROCKIT_64_BIT_WITH_4GB_COMPRESSED_REFS:Lnet/sf/ehcache/pool/sizeof/JvmInformation;
      23: astore_0
      24: goto          64
      27: invokestatic  #28                 // Method isJRockit32GBCompression:()Z
      30: ifeq          40
      33: getstatic     #29                 // Field JROCKIT_64_BIT_WITH_32GB_COMPRESSED_REFS:Lnet/sf/ehcache/pool/sizeof/JvmInformation;
      36: astore_0
      37: goto          64
      40: invokestatic  #30                 // Method isJRockit64GBCompression:()Z
      43: ifeq          53
      46: getstatic     #31                 // Field JROCKIT_64_BIT_WITH_64GB_COMPRESSED_REFS:Lnet/sf/ehcache/pool/sizeof/JvmInformation;
      49: astore_0
      50: goto          64
      53: getstatic     #32                 // Field JROCKIT_64_BIT:Lnet/sf/ehcache/pool/sizeof/JvmInformation;
      56: astore_0
      57: goto          64
      60: getstatic     #33                 // Field JROCKIT_32_BIT:Lnet/sf/ehcache/pool/sizeof/JvmInformation;
      63: astore_0
      64: aload_0
      65: areturn

  private static net.sf.ehcache.pool.sizeof.JvmInformation detectIBM();
    Code:
       0: aconst_null
       1: astore_0
       2: invokestatic  #34                 // Method isIBM:()Z
       5: ifeq          38
       8: invokestatic  #14                 // Method is64Bit:()Z
      11: ifeq          34
      14: invokestatic  #35                 // Method isIBMCompressedRefs:()Z
      17: ifeq          27
      20: getstatic     #36                 // Field IBM_64_BIT_WITH_COMPRESSED_REFS:Lnet/sf/ehcache/pool/sizeof/JvmInformation;
      23: astore_0
      24: goto          38
      27: getstatic     #37                 // Field IBM_64_BIT:Lnet/sf/ehcache/pool/sizeof/JvmInformation;
      30: astore_0
      31: goto          38
      34: getstatic     #38                 // Field IBM_32_BIT:Lnet/sf/ehcache/pool/sizeof/JvmInformation;
      37: astore_0
      38: aload_0
      39: areturn

  private static boolean isJRockit32GBCompression();
    Code:
       0: invokestatic  #39                 // Method getJRockitVmArgs:()Ljava/lang/String;
       3: ldc           #40                 // String -XXcompressedRefs:enable=false
       5: invokevirtual #41                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
       8: ifeq          13
      11: iconst_0
      12: ireturn
      13: invokestatic  #39                 // Method getJRockitVmArgs:()Ljava/lang/String;
      16: ldc           #42                 // String -XXcompressedRefs:size=64GB
      18: invokevirtual #41                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
      21: ifne          35
      24: invokestatic  #39                 // Method getJRockitVmArgs:()Ljava/lang/String;
      27: ldc           #43                 // String -XXcompressedRefs:size=4GB
      29: invokevirtual #41                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
      32: ifeq          37
      35: iconst_0
      36: ireturn
      37: invokestatic  #39                 // Method getJRockitVmArgs:()Ljava/lang/String;
      40: ldc           #44                 // String -XXcompressedRefs:size=32GB
      42: invokevirtual #41                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
      45: ifeq          50
      48: iconst_1
      49: ireturn
      50: invokestatic  #45                 // Method java/lang/Runtime.getRuntime:()Ljava/lang/Runtime;
      53: invokevirtual #46                 // Method java/lang/Runtime.maxMemory:()J
      56: ldc2_w        #47                 // long 3221225472l
      59: lcmp
      60: ifle          89
      63: invokestatic  #45                 // Method java/lang/Runtime.getRuntime:()Ljava/lang/Runtime;
      66: invokevirtual #46                 // Method java/lang/Runtime.maxMemory:()J
      69: ldc2_w        #49                 // long 26843545600l
      72: lcmp
      73: ifgt          89
      76: invokestatic  #39                 // Method getJRockitVmArgs:()Ljava/lang/String;
      79: ldc           #51                 // String -XXcompressedRefs:enable=true
      81: invokevirtual #41                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
      84: ifeq          89
      87: iconst_1
      88: ireturn
      89: iconst_0
      90: ireturn

  private static boolean isJRockit64GBCompression();
    Code:
       0: invokestatic  #39                 // Method getJRockitVmArgs:()Ljava/lang/String;
       3: ldc           #40                 // String -XXcompressedRefs:enable=false
       5: invokevirtual #41                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
       8: ifeq          13
      11: iconst_0
      12: ireturn
      13: invokestatic  #39                 // Method getJRockitVmArgs:()Ljava/lang/String;
      16: ldc           #43                 // String -XXcompressedRefs:size=4GB
      18: invokevirtual #41                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
      21: ifne          35
      24: invokestatic  #39                 // Method getJRockitVmArgs:()Ljava/lang/String;
      27: ldc           #44                 // String -XXcompressedRefs:size=32GB
      29: invokevirtual #41                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
      32: ifeq          37
      35: iconst_0
      36: ireturn
      37: invokestatic  #39                 // Method getJRockitVmArgs:()Ljava/lang/String;
      40: ldc           #42                 // String -XXcompressedRefs:size=64GB
      42: invokevirtual #41                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
      45: ifeq          50
      48: iconst_1
      49: ireturn
      50: invokestatic  #45                 // Method java/lang/Runtime.getRuntime:()Ljava/lang/Runtime;
      53: invokevirtual #46                 // Method java/lang/Runtime.maxMemory:()J
      56: ldc2_w        #49                 // long 26843545600l
      59: lcmp
      60: ifle          89
      63: invokestatic  #45                 // Method java/lang/Runtime.getRuntime:()Ljava/lang/Runtime;
      66: invokevirtual #46                 // Method java/lang/Runtime.maxMemory:()J
      69: ldc2_w        #52                 // long 61203283968l
      72: lcmp
      73: ifgt          89
      76: invokestatic  #39                 // Method getJRockitVmArgs:()Ljava/lang/String;
      79: ldc           #51                 // String -XXcompressedRefs:enable=true
      81: invokevirtual #41                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
      84: ifeq          89
      87: iconst_1
      88: ireturn
      89: iconst_0
      90: ireturn

  private static boolean isJRockit4GBCompression();
    Code:
       0: invokestatic  #39                 // Method getJRockitVmArgs:()Ljava/lang/String;
       3: ldc           #40                 // String -XXcompressedRefs:enable=false
       5: invokevirtual #41                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
       8: ifeq          13
      11: iconst_0
      12: ireturn
      13: invokestatic  #39                 // Method getJRockitVmArgs:()Ljava/lang/String;
      16: ldc           #42                 // String -XXcompressedRefs:size=64GB
      18: invokevirtual #41                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
      21: ifne          35
      24: invokestatic  #39                 // Method getJRockitVmArgs:()Ljava/lang/String;
      27: ldc           #44                 // String -XXcompressedRefs:size=32GB
      29: invokevirtual #41                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
      32: ifeq          37
      35: iconst_0
      36: ireturn
      37: invokestatic  #39                 // Method getJRockitVmArgs:()Ljava/lang/String;
      40: ldc           #43                 // String -XXcompressedRefs:size=4GB
      42: invokevirtual #41                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
      45: ifeq          50
      48: iconst_1
      49: ireturn
      50: invokestatic  #45                 // Method java/lang/Runtime.getRuntime:()Ljava/lang/Runtime;
      53: invokevirtual #46                 // Method java/lang/Runtime.maxMemory:()J
      56: ldc2_w        #47                 // long 3221225472l
      59: lcmp
      60: ifgt          65
      63: iconst_1
      64: ireturn
      65: iconst_0
      66: ireturn

  public static boolean isJRockit();
    Code:
       0: ldc           #54                 // String jrockit.version
       2: invokestatic  #55                 // Method java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;
       5: ifnonnull     26
       8: ldc           #56                 // String java.vm.name
      10: ldc           #57                 // String
      12: invokestatic  #58                 // Method java/lang/System.getProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      15: invokevirtual #59                 // Method java/lang/String.toLowerCase:()Ljava/lang/String;
      18: ldc           #60                 // String jrockit
      20: invokevirtual #61                 // Method java/lang/String.indexOf:(Ljava/lang/String;)I
      23: iflt          30
      26: iconst_1
      27: goto          31
      30: iconst_0
      31: ireturn

  public static boolean isOSX();
    Code:
       0: ldc           #62                 // String java.vm.vendor
       2: invokestatic  #55                 // Method java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;
       5: astore_0
       6: aload_0
       7: ifnull        23
      10: aload_0
      11: ldc           #63                 // String Apple
      13: invokevirtual #64                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      16: ifeq          23
      19: iconst_1
      20: goto          24
      23: iconst_0
      24: ireturn

  public static boolean isHotspot();
    Code:
       0: ldc           #56                 // String java.vm.name
       2: ldc           #57                 // String
       4: invokestatic  #58                 // Method java/lang/System.getProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
       7: invokevirtual #59                 // Method java/lang/String.toLowerCase:()Ljava/lang/String;
      10: ldc           #65                 // String hotspot
      12: invokevirtual #41                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
      15: ireturn

  public static boolean isIBM();
    Code:
       0: ldc           #56                 // String java.vm.name
       2: ldc           #57                 // String
       4: invokestatic  #58                 // Method java/lang/System.getProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
       7: ldc           #66                 // String IBM
       9: invokevirtual #41                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
      12: ifeq          32
      15: ldc           #62                 // String java.vm.vendor
      17: invokestatic  #55                 // Method java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;
      20: ldc           #66                 // String IBM
      22: invokevirtual #41                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
      25: ifeq          32
      28: iconst_1
      29: goto          33
      32: iconst_0
      33: ireturn

  private static boolean isIBMCompressedRefs();
    Code:
       0: ldc           #67                 // String com.ibm.oti.vm.bootstrap.library.path
       2: ldc           #57                 // String
       4: invokestatic  #58                 // Method java/lang/System.getProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
       7: ldc           #68                 // String compressedrefs
       9: invokevirtual #41                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
      12: ireturn

  private static boolean isHotspotCompressedOops();
    Code:
       0: ldc           #69                 // String UseCompressedOops
       2: invokestatic  #70                 // Method getHotSpotVmOptionValue:(Ljava/lang/String;)Ljava/lang/String;
       5: astore_0
       6: aload_0
       7: ifnonnull     12
      10: iconst_0
      11: ireturn
      12: aload_0
      13: invokestatic  #71                 // Method java/lang/Boolean.valueOf:(Ljava/lang/String;)Ljava/lang/Boolean;
      16: invokevirtual #72                 // Method java/lang/Boolean.booleanValue:()Z
      19: ireturn

  private static java.lang.String getHotSpotVmOptionValue(java.lang.String);
    Code:
       0: invokestatic  #73                 // Method java/lang/management/ManagementFactory.getPlatformMBeanServer:()Ljavax/management/MBeanServer;
       3: astore_1
       4: ldc           #74                 // String com.sun.management:type=HotSpotDiagnostic
       6: invokestatic  #75                 // Method javax/management/ObjectName.getInstance:(Ljava/lang/String;)Ljavax/management/ObjectName;
       9: astore_2
      10: aload_1
      11: aload_2
      12: ldc           #76                 // String getVMOption
      14: iconst_1
      15: anewarray     #77                 // class java/lang/Object
      18: dup
      19: iconst_0
      20: aload_0
      21: aastore
      22: iconst_1
      23: anewarray     #78                 // class java/lang/String
      26: dup
      27: iconst_0
      28: ldc           #79                 // String java.lang.String
      30: aastore
      31: invokeinterface #80,  5           // InterfaceMethod javax/management/MBeanServer.invoke:(Ljavax/management/ObjectName;Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/String;)Ljava/lang/Object;
      36: astore_3
      37: aload_3
      38: checkcast     #81                 // class javax/management/openmbean/CompositeData
      41: ldc           #82                 // String value
      43: invokeinterface #83,  2           // InterfaceMethod javax/management/openmbean/CompositeData.get:(Ljava/lang/String;)Ljava/lang/Object;
      48: checkcast     #78                 // class java/lang/String
      51: areturn
      52: astore_1
      53: aconst_null
      54: areturn
    Exception table:
       from    to  target type
           0    51    52   Class java/lang/Throwable

  private static java.lang.String getPlatformMBeanAttribute(java.lang.String, java.lang.String);
    Code:
       0: invokestatic  #73                 // Method java/lang/management/ManagementFactory.getPlatformMBeanServer:()Ljavax/management/MBeanServer;
       3: astore_2
       4: aload_0
       5: invokestatic  #75                 // Method javax/management/ObjectName.getInstance:(Ljava/lang/String;)Ljavax/management/ObjectName;
       8: astore_3
       9: aload_2
      10: aload_3
      11: aload_1
      12: invokeinterface #85,  3           // InterfaceMethod javax/management/MBeanServer.getAttribute:(Ljavax/management/ObjectName;Ljava/lang/String;)Ljava/lang/Object;
      17: invokevirtual #86                 // Method java/lang/Object.toString:()Ljava/lang/String;
      20: astore        4
      22: aload         4
      24: ifnull        33
      27: aload         4
      29: invokevirtual #86                 // Method java/lang/Object.toString:()Ljava/lang/String;
      32: areturn
      33: aconst_null
      34: areturn
      35: astore_2
      36: aconst_null
      37: areturn
    Exception table:
       from    to  target type
           0    32    35   Class java/lang/Throwable
          33    34    35   Class java/lang/Throwable

  private static java.lang.String getJRockitVmArgs();
    Code:
       0: ldc           #87                 // String oracle.jrockit.management:type=PerfCounters
       2: ldc           #88                 // String java.rt.vmArgs
       4: invokestatic  #89                 // Method getPlatformMBeanAttribute:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
       7: areturn

  private static boolean isHotspotConcurrentMarkSweepGC();
    Code:
       0: invokestatic  #90                 // Method java/lang/management/ManagementFactory.getGarbageCollectorMXBeans:()Ljava/util/List;
       3: invokeinterface #91,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
       8: astore_0
       9: aload_0
      10: invokeinterface #92,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      15: ifeq          47
      18: aload_0
      19: invokeinterface #93,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      24: checkcast     #94                 // class java/lang/management/GarbageCollectorMXBean
      27: astore_1
      28: ldc           #95                 // String ConcurrentMarkSweep
      30: aload_1
      31: invokeinterface #96,  1           // InterfaceMethod java/lang/management/GarbageCollectorMXBean.getName:()Ljava/lang/String;
      36: invokevirtual #97                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      39: ifeq          44
      42: iconst_1
      43: ireturn
      44: goto          9
      47: iconst_0
      48: ireturn

  private static boolean is64Bit();
    Code:
       0: ldc           #98                 // String com.ibm.vm.bitmode
       2: invokestatic  #55                 // Method java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;
       5: astore_0
       6: aload_0
       7: ifnull        17
      10: aload_0
      11: ldc           #99                 // String 64
      13: invokevirtual #97                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      16: ireturn
      17: ldc           #100                // String sun.arch.data.model
      19: invokestatic  #55                 // Method java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;
      22: astore_0
      23: aload_0
      24: ifnull        34
      27: aload_0
      28: ldc           #99                 // String 64
      30: invokevirtual #97                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      33: ireturn
      34: ldc           #101                // String java.vm.version
      36: invokestatic  #55                 // Method java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;
      39: astore_0
      40: aload_0
      41: ifnull        51
      44: aload_0
      45: ldc           #102                // String _64
      47: invokevirtual #41                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
      50: ireturn
      51: iconst_0
      52: ireturn

  net.sf.ehcache.pool.sizeof.JvmInformation(java.lang.String, int, net.sf.ehcache.pool.sizeof.JvmInformation$1);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokespecial #1                  // Method "<init>":(Ljava/lang/String;I)V
       6: return

  static {};
    Code:
       0: new           #103                // class net/sf/ehcache/pool/sizeof/JvmInformation$1
       3: dup
       4: ldc           #104                // String HOTSPOT_32_BIT
       6: iconst_0
       7: invokespecial #105                // Method net/sf/ehcache/pool/sizeof/JvmInformation$1."<init>":(Ljava/lang/String;I)V
      10: putstatic     #24                 // Field HOTSPOT_32_BIT:Lnet/sf/ehcache/pool/sizeof/JvmInformation;
      13: new           #106                // class net/sf/ehcache/pool/sizeof/JvmInformation$2
      16: dup
      17: ldc           #107                // String HOTSPOT_32_BIT_WITH_CONCURRENT_MARK_AND_SWEEP
      19: iconst_1
      20: invokespecial #108                // Method net/sf/ehcache/pool/sizeof/JvmInformation$2."<init>":(Ljava/lang/String;I)V
      23: putstatic     #109                // Field HOTSPOT_32_BIT_WITH_CONCURRENT_MARK_AND_SWEEP:Lnet/sf/ehcache/pool/sizeof/JvmInformation;
      26: new           #110                // class net/sf/ehcache/pool/sizeof/JvmInformation$3
      29: dup
      30: ldc           #111                // String HOTSPOT_64_BIT
      32: iconst_2
      33: invokespecial #112                // Method net/sf/ehcache/pool/sizeof/JvmInformation$3."<init>":(Ljava/lang/String;I)V
      36: putstatic     #23                 // Field HOTSPOT_64_BIT:Lnet/sf/ehcache/pool/sizeof/JvmInformation;
      39: new           #113                // class net/sf/ehcache/pool/sizeof/JvmInformation$4
      42: dup
      43: ldc           #114                // String HOTSPOT_64_BIT_WITH_CONCURRENT_MARK_AND_SWEEP
      45: iconst_3
      46: invokespecial #115                // Method net/sf/ehcache/pool/sizeof/JvmInformation$4."<init>":(Ljava/lang/String;I)V
      49: putstatic     #22                 // Field HOTSPOT_64_BIT_WITH_CONCURRENT_MARK_AND_SWEEP:Lnet/sf/ehcache/pool/sizeof/JvmInformation;
      52: new           #116                // class net/sf/ehcache/pool/sizeof/JvmInformation$5
      55: dup
      56: ldc           #117                // String HOTSPOT_64_BIT_WITH_COMPRESSED_OOPS
      58: iconst_4
      59: invokespecial #118                // Method net/sf/ehcache/pool/sizeof/JvmInformation$5."<init>":(Ljava/lang/String;I)V
      62: putstatic     #21                 // Field HOTSPOT_64_BIT_WITH_COMPRESSED_OOPS:Lnet/sf/ehcache/pool/sizeof/JvmInformation;
      65: new           #119                // class net/sf/ehcache/pool/sizeof/JvmInformation$6
      68: dup
      69: ldc           #120                // String HOTSPOT_64_BIT_WITH_COMPRESSED_OOPS_AND_CONCURRENT_MARK_AND_SWEEP
      71: iconst_5
      72: invokespecial #121                // Method net/sf/ehcache/pool/sizeof/JvmInformation$6."<init>":(Ljava/lang/String;I)V
      75: putstatic     #20                 // Field HOTSPOT_64_BIT_WITH_COMPRESSED_OOPS_AND_CONCURRENT_MARK_AND_SWEEP:Lnet/sf/ehcache/pool/sizeof/JvmInformation;
      78: new           #122                // class net/sf/ehcache/pool/sizeof/JvmInformation$7
      81: dup
      82: ldc           #123                // String JROCKIT_32_BIT
      84: bipush        6
      86: invokespecial #124                // Method net/sf/ehcache/pool/sizeof/JvmInformation$7."<init>":(Ljava/lang/String;I)V
      89: putstatic     #33                 // Field JROCKIT_32_BIT:Lnet/sf/ehcache/pool/sizeof/JvmInformation;
      92: new           #125                // class net/sf/ehcache/pool/sizeof/JvmInformation$8
      95: dup
      96: ldc           #126                // String JROCKIT_64_BIT
      98: bipush        7
     100: invokespecial #127                // Method net/sf/ehcache/pool/sizeof/JvmInformation$8."<init>":(Ljava/lang/String;I)V
     103: putstatic     #32                 // Field JROCKIT_64_BIT:Lnet/sf/ehcache/pool/sizeof/JvmInformation;
     106: new           #128                // class net/sf/ehcache/pool/sizeof/JvmInformation$9
     109: dup
     110: ldc           #129                // String JROCKIT_64_BIT_WITH_4GB_COMPRESSED_REFS
     112: bipush        8
     114: invokespecial #130                // Method net/sf/ehcache/pool/sizeof/JvmInformation$9."<init>":(Ljava/lang/String;I)V
     117: putstatic     #27                 // Field JROCKIT_64_BIT_WITH_4GB_COMPRESSED_REFS:Lnet/sf/ehcache/pool/sizeof/JvmInformation;
     120: new           #131                // class net/sf/ehcache/pool/sizeof/JvmInformation$10
     123: dup
     124: ldc           #132                // String JROCKIT_64_BIT_WITH_32GB_COMPRESSED_REFS
     126: bipush        9
     128: invokespecial #133                // Method net/sf/ehcache/pool/sizeof/JvmInformation$10."<init>":(Ljava/lang/String;I)V
     131: putstatic     #29                 // Field JROCKIT_64_BIT_WITH_32GB_COMPRESSED_REFS:Lnet/sf/ehcache/pool/sizeof/JvmInformation;
     134: new           #134                // class net/sf/ehcache/pool/sizeof/JvmInformation$11
     137: dup
     138: ldc           #135                // String JROCKIT_64_BIT_WITH_64GB_COMPRESSED_REFS
     140: bipush        10
     142: invokespecial #136                // Method net/sf/ehcache/pool/sizeof/JvmInformation$11."<init>":(Ljava/lang/String;I)V
     145: putstatic     #31                 // Field JROCKIT_64_BIT_WITH_64GB_COMPRESSED_REFS:Lnet/sf/ehcache/pool/sizeof/JvmInformation;
     148: new           #137                // class net/sf/ehcache/pool/sizeof/JvmInformation$12
     151: dup
     152: ldc           #138                // String IBM_64_BIT_WITH_COMPRESSED_REFS
     154: bipush        11
     156: invokespecial #139                // Method net/sf/ehcache/pool/sizeof/JvmInformation$12."<init>":(Ljava/lang/String;I)V
     159: putstatic     #36                 // Field IBM_64_BIT_WITH_COMPRESSED_REFS:Lnet/sf/ehcache/pool/sizeof/JvmInformation;
     162: new           #140                // class net/sf/ehcache/pool/sizeof/JvmInformation$13
     165: dup
     166: ldc           #141                // String IBM_64_BIT
     168: bipush        12
     170: invokespecial #142                // Method net/sf/ehcache/pool/sizeof/JvmInformation$13."<init>":(Ljava/lang/String;I)V
     173: putstatic     #37                 // Field IBM_64_BIT:Lnet/sf/ehcache/pool/sizeof/JvmInformation;
     176: new           #143                // class net/sf/ehcache/pool/sizeof/JvmInformation$14
     179: dup
     180: ldc           #144                // String IBM_32_BIT
     182: bipush        13
     184: invokespecial #145                // Method net/sf/ehcache/pool/sizeof/JvmInformation$14."<init>":(Ljava/lang/String;I)V
     187: putstatic     #38                 // Field IBM_32_BIT:Lnet/sf/ehcache/pool/sizeof/JvmInformation;
     190: new           #146                // class net/sf/ehcache/pool/sizeof/JvmInformation$15
     193: dup
     194: ldc           #147                // String UNKNOWN_32_BIT
     196: bipush        14
     198: invokespecial #148                // Method net/sf/ehcache/pool/sizeof/JvmInformation$15."<init>":(Ljava/lang/String;I)V
     201: putstatic     #16                 // Field UNKNOWN_32_BIT:Lnet/sf/ehcache/pool/sizeof/JvmInformation;
     204: new           #149                // class net/sf/ehcache/pool/sizeof/JvmInformation$16
     207: dup
     208: ldc           #150                // String UNKNOWN_64_BIT
     210: bipush        15
     212: invokespecial #151                // Method net/sf/ehcache/pool/sizeof/JvmInformation$16."<init>":(Ljava/lang/String;I)V
     215: putstatic     #15                 // Field UNKNOWN_64_BIT:Lnet/sf/ehcache/pool/sizeof/JvmInformation;
     218: bipush        16
     220: anewarray     #5                  // class net/sf/ehcache/pool/sizeof/JvmInformation
     223: dup
     224: iconst_0
     225: getstatic     #24                 // Field HOTSPOT_32_BIT:Lnet/sf/ehcache/pool/sizeof/JvmInformation;
     228: aastore
     229: dup
     230: iconst_1
     231: getstatic     #109                // Field HOTSPOT_32_BIT_WITH_CONCURRENT_MARK_AND_SWEEP:Lnet/sf/ehcache/pool/sizeof/JvmInformation;
     234: aastore
     235: dup
     236: iconst_2
     237: getstatic     #23                 // Field HOTSPOT_64_BIT:Lnet/sf/ehcache/pool/sizeof/JvmInformation;
     240: aastore
     241: dup
     242: iconst_3
     243: getstatic     #22                 // Field HOTSPOT_64_BIT_WITH_CONCURRENT_MARK_AND_SWEEP:Lnet/sf/ehcache/pool/sizeof/JvmInformation;
     246: aastore
     247: dup
     248: iconst_4
     249: getstatic     #21                 // Field HOTSPOT_64_BIT_WITH_COMPRESSED_OOPS:Lnet/sf/ehcache/pool/sizeof/JvmInformation;
     252: aastore
     253: dup
     254: iconst_5
     255: getstatic     #20                 // Field HOTSPOT_64_BIT_WITH_COMPRESSED_OOPS_AND_CONCURRENT_MARK_AND_SWEEP:Lnet/sf/ehcache/pool/sizeof/JvmInformation;
     258: aastore
     259: dup
     260: bipush        6
     262: getstatic     #33                 // Field JROCKIT_32_BIT:Lnet/sf/ehcache/pool/sizeof/JvmInformation;
     265: aastore
     266: dup
     267: bipush        7
     269: getstatic     #32                 // Field JROCKIT_64_BIT:Lnet/sf/ehcache/pool/sizeof/JvmInformation;
     272: aastore
     273: dup
     274: bipush        8
     276: getstatic     #27                 // Field JROCKIT_64_BIT_WITH_4GB_COMPRESSED_REFS:Lnet/sf/ehcache/pool/sizeof/JvmInformation;
     279: aastore
     280: dup
     281: bipush        9
     283: getstatic     #29                 // Field JROCKIT_64_BIT_WITH_32GB_COMPRESSED_REFS:Lnet/sf/ehcache/pool/sizeof/JvmInformation;
     286: aastore
     287: dup
     288: bipush        10
     290: getstatic     #31                 // Field JROCKIT_64_BIT_WITH_64GB_COMPRESSED_REFS:Lnet/sf/ehcache/pool/sizeof/JvmInformation;
     293: aastore
     294: dup
     295: bipush        11
     297: getstatic     #36                 // Field IBM_64_BIT_WITH_COMPRESSED_REFS:Lnet/sf/ehcache/pool/sizeof/JvmInformation;
     300: aastore
     301: dup
     302: bipush        12
     304: getstatic     #37                 // Field IBM_64_BIT:Lnet/sf/ehcache/pool/sizeof/JvmInformation;
     307: aastore
     308: dup
     309: bipush        13
     311: getstatic     #38                 // Field IBM_32_BIT:Lnet/sf/ehcache/pool/sizeof/JvmInformation;
     314: aastore
     315: dup
     316: bipush        14
     318: getstatic     #16                 // Field UNKNOWN_32_BIT:Lnet/sf/ehcache/pool/sizeof/JvmInformation;
     321: aastore
     322: dup
     323: bipush        15
     325: getstatic     #15                 // Field UNKNOWN_64_BIT:Lnet/sf/ehcache/pool/sizeof/JvmInformation;
     328: aastore
     329: putstatic     #2                  // Field $VALUES:[Lnet/sf/ehcache/pool/sizeof/JvmInformation;
     332: ldc_w         #5                  // class net/sf/ehcache/pool/sizeof/JvmInformation
     335: invokestatic  #152                // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
     338: putstatic     #153                // Field LOGGER:Lorg/slf4j/Logger;
     341: invokestatic  #154                // Method getJvmInformation:()Lnet/sf/ehcache/pool/sizeof/JvmInformation;
     344: putstatic     #155                // Field CURRENT_JVM_INFORMATION:Lnet/sf/ehcache/pool/sizeof/JvmInformation;
     347: getstatic     #153                // Field LOGGER:Lorg/slf4j/Logger;
     350: new           #156                // class java/lang/StringBuilder
     353: dup
     354: invokespecial #157                // Method java/lang/StringBuilder."<init>":()V
     357: ldc           #158                // String Detected JVM data model settings of:
     359: invokevirtual #159                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     362: getstatic     #155                // Field CURRENT_JVM_INFORMATION:Lnet/sf/ehcache/pool/sizeof/JvmInformation;
     365: invokevirtual #160                // Method getJvmDescription:()Ljava/lang/String;
     368: invokevirtual #159                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     371: invokevirtual #161                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     374: invokeinterface #162,  2          // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;)V
     379: return
}
