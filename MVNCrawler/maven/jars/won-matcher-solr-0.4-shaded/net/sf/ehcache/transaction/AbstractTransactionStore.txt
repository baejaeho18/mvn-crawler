Compiled from "AbstractTransactionStore.java"
public abstract class net.sf.ehcache.transaction.AbstractTransactionStore extends net.sf.ehcache.store.AbstractStore implements net.sf.ehcache.store.TerracottaStore {
  protected final net.sf.ehcache.store.Store underlyingStore;

  protected final net.sf.ehcache.store.compound.ReadWriteCopyStrategy<net.sf.ehcache.Element> copyStrategy;

  protected net.sf.ehcache.transaction.AbstractTransactionStore(net.sf.ehcache.store.Store, net.sf.ehcache.store.compound.ReadWriteCopyStrategy<net.sf.ehcache.Element>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method net/sf/ehcache/store/AbstractStore."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field underlyingStore:Lnet/sf/ehcache/store/Store;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field copyStrategy:Lnet/sf/ehcache/store/compound/ReadWriteCopyStrategy;
      14: return

  public void unpinAll();
    Code:
       0: aload_0
       1: getfield      #2                  // Field underlyingStore:Lnet/sf/ehcache/store/Store;
       4: invokeinterface #4,  1            // InterfaceMethod net/sf/ehcache/store/Store.unpinAll:()V
       9: return

  public boolean isPinned(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #2                  // Field underlyingStore:Lnet/sf/ehcache/store/Store;
       4: aload_1
       5: invokeinterface #5,  2            // InterfaceMethod net/sf/ehcache/store/Store.isPinned:(Ljava/lang/Object;)Z
      10: ireturn

  public void setPinned(java.lang.Object, boolean);
    Code:
       0: aload_0
       1: getfield      #2                  // Field underlyingStore:Lnet/sf/ehcache/store/Store;
       4: aload_1
       5: iload_2
       6: invokeinterface #6,  3            // InterfaceMethod net/sf/ehcache/store/Store.setPinned:(Ljava/lang/Object;Z)V
      11: return

  protected net.sf.ehcache.Element copyElementForRead(net.sf.ehcache.Element);
    Code:
       0: aload_0
       1: getfield      #3                  // Field copyStrategy:Lnet/sf/ehcache/store/compound/ReadWriteCopyStrategy;
       4: aload_1
       5: invokeinterface #7,  2            // InterfaceMethod net/sf/ehcache/store/compound/ReadWriteCopyStrategy.copyForRead:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #8                  // class net/sf/ehcache/Element
      13: areturn

  protected net.sf.ehcache.Element copyElementForWrite(net.sf.ehcache.Element);
    Code:
       0: aload_0
       1: getfield      #3                  // Field copyStrategy:Lnet/sf/ehcache/store/compound/ReadWriteCopyStrategy;
       4: aload_1
       5: invokeinterface #9,  2            // InterfaceMethod net/sf/ehcache/store/compound/ReadWriteCopyStrategy.copyForWrite:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #8                  // class net/sf/ehcache/Element
      13: areturn

  public net.sf.ehcache.search.Results executeQuery(net.sf.ehcache.store.StoreQuery);
    Code:
       0: aload_0
       1: getfield      #2                  // Field underlyingStore:Lnet/sf/ehcache/store/Store;
       4: aload_1
       5: invokeinterface #10,  2           // InterfaceMethod net/sf/ehcache/store/Store.executeQuery:(Lnet/sf/ehcache/store/StoreQuery;)Lnet/sf/ehcache/search/Results;
      10: astore_2
      11: aload_2
      12: instanceof    #11                 // class net/sf/ehcache/transaction/AbstractTransactionStore$TxSearchResults
      15: ifeq          20
      18: aload_2
      19: areturn
      20: new           #11                 // class net/sf/ehcache/transaction/AbstractTransactionStore$TxSearchResults
      23: dup
      24: aload_0
      25: aload_2
      26: invokespecial #12                 // Method net/sf/ehcache/transaction/AbstractTransactionStore$TxSearchResults."<init>":(Lnet/sf/ehcache/transaction/AbstractTransactionStore;Lnet/sf/ehcache/search/Results;)V
      29: areturn

  public int getInMemorySize();
    Code:
       0: aload_0
       1: getfield      #2                  // Field underlyingStore:Lnet/sf/ehcache/store/Store;
       4: invokeinterface #13,  1           // InterfaceMethod net/sf/ehcache/store/Store.getInMemorySize:()I
       9: ireturn

  public int getOffHeapSize();
    Code:
       0: aload_0
       1: getfield      #2                  // Field underlyingStore:Lnet/sf/ehcache/store/Store;
       4: invokeinterface #14,  1           // InterfaceMethod net/sf/ehcache/store/Store.getOffHeapSize:()I
       9: ireturn

  public int getOnDiskSize();
    Code:
       0: aload_0
       1: getfield      #2                  // Field underlyingStore:Lnet/sf/ehcache/store/Store;
       4: invokeinterface #15,  1           // InterfaceMethod net/sf/ehcache/store/Store.getOnDiskSize:()I
       9: ireturn

  public long getInMemorySizeInBytes();
    Code:
       0: aload_0
       1: getfield      #2                  // Field underlyingStore:Lnet/sf/ehcache/store/Store;
       4: invokeinterface #16,  1           // InterfaceMethod net/sf/ehcache/store/Store.getInMemorySizeInBytes:()J
       9: lreturn

  public long getOffHeapSizeInBytes();
    Code:
       0: aload_0
       1: getfield      #2                  // Field underlyingStore:Lnet/sf/ehcache/store/Store;
       4: invokeinterface #17,  1           // InterfaceMethod net/sf/ehcache/store/Store.getOffHeapSizeInBytes:()J
       9: lreturn

  public long getOnDiskSizeInBytes();
    Code:
       0: aload_0
       1: getfield      #2                  // Field underlyingStore:Lnet/sf/ehcache/store/Store;
       4: invokeinterface #18,  1           // InterfaceMethod net/sf/ehcache/store/Store.getOnDiskSizeInBytes:()J
       9: lreturn

  public boolean containsKeyOnDisk(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #2                  // Field underlyingStore:Lnet/sf/ehcache/store/Store;
       4: aload_1
       5: invokeinterface #19,  2           // InterfaceMethod net/sf/ehcache/store/Store.containsKeyOnDisk:(Ljava/lang/Object;)Z
      10: ireturn

  public boolean containsKeyOffHeap(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #2                  // Field underlyingStore:Lnet/sf/ehcache/store/Store;
       4: aload_1
       5: invokeinterface #20,  2           // InterfaceMethod net/sf/ehcache/store/Store.containsKeyOffHeap:(Ljava/lang/Object;)Z
      10: ireturn

  public boolean containsKeyInMemory(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #2                  // Field underlyingStore:Lnet/sf/ehcache/store/Store;
       4: aload_1
       5: invokeinterface #21,  2           // InterfaceMethod net/sf/ehcache/store/Store.containsKeyInMemory:(Ljava/lang/Object;)Z
      10: ireturn

  public void dispose();
    Code:
       0: aload_0
       1: getfield      #2                  // Field underlyingStore:Lnet/sf/ehcache/store/Store;
       4: invokeinterface #22,  1           // InterfaceMethod net/sf/ehcache/store/Store.dispose:()V
       9: return

  public net.sf.ehcache.Status getStatus();
    Code:
       0: aload_0
       1: getfield      #2                  // Field underlyingStore:Lnet/sf/ehcache/store/Store;
       4: invokeinterface #23,  1           // InterfaceMethod net/sf/ehcache/store/Store.getStatus:()Lnet/sf/ehcache/Status;
       9: areturn

  public void expireElements();
    Code:
       0: aload_0
       1: getfield      #2                  // Field underlyingStore:Lnet/sf/ehcache/store/Store;
       4: invokeinterface #24,  1           // InterfaceMethod net/sf/ehcache/store/Store.expireElements:()V
       9: return

  public void flush() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field underlyingStore:Lnet/sf/ehcache/store/Store;
       4: invokeinterface #25,  1           // InterfaceMethod net/sf/ehcache/store/Store.flush:()V
       9: return

  public boolean bufferFull();
    Code:
       0: aload_0
       1: getfield      #2                  // Field underlyingStore:Lnet/sf/ehcache/store/Store;
       4: invokeinterface #26,  1           // InterfaceMethod net/sf/ehcache/store/Store.bufferFull:()Z
       9: ireturn

  public net.sf.ehcache.store.Policy getInMemoryEvictionPolicy();
    Code:
       0: aload_0
       1: getfield      #2                  // Field underlyingStore:Lnet/sf/ehcache/store/Store;
       4: invokeinterface #27,  1           // InterfaceMethod net/sf/ehcache/store/Store.getInMemoryEvictionPolicy:()Lnet/sf/ehcache/store/Policy;
       9: areturn

  public void setInMemoryEvictionPolicy(net.sf.ehcache.store.Policy);
    Code:
       0: aload_0
       1: getfield      #2                  // Field underlyingStore:Lnet/sf/ehcache/store/Store;
       4: aload_1
       5: invokeinterface #28,  2           // InterfaceMethod net/sf/ehcache/store/Store.setInMemoryEvictionPolicy:(Lnet/sf/ehcache/store/Policy;)V
      10: return

  public java.lang.Object getInternalContext();
    Code:
       0: aload_0
       1: getfield      #2                  // Field underlyingStore:Lnet/sf/ehcache/store/Store;
       4: invokeinterface #29,  1           // InterfaceMethod net/sf/ehcache/store/Store.getInternalContext:()Ljava/lang/Object;
       9: areturn

  public java.lang.Object getMBean();
    Code:
       0: aload_0
       1: getfield      #2                  // Field underlyingStore:Lnet/sf/ehcache/store/Store;
       4: invokeinterface #30,  1           // InterfaceMethod net/sf/ehcache/store/Store.getMBean:()Ljava/lang/Object;
       9: areturn

  public void setNodeCoherent(boolean);
    Code:
       0: iload_1
       1: ifne          14
       4: new           #31                 // class net/sf/ehcache/config/InvalidConfigurationException
       7: dup
       8: ldc           #32                 // String a transactional cache cannot be incoherent
      10: invokespecial #33                 // Method net/sf/ehcache/config/InvalidConfigurationException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: aload_0
      15: getfield      #2                  // Field underlyingStore:Lnet/sf/ehcache/store/Store;
      18: iload_1
      19: invokeinterface #34,  2           // InterfaceMethod net/sf/ehcache/store/Store.setNodeCoherent:(Z)V
      24: return

  public boolean isNodeCoherent();
    Code:
       0: aload_0
       1: getfield      #2                  // Field underlyingStore:Lnet/sf/ehcache/store/Store;
       4: invokeinterface #35,  1           // InterfaceMethod net/sf/ehcache/store/Store.isNodeCoherent:()Z
       9: ireturn

  public boolean isCacheCoherent();
    Code:
       0: aload_0
       1: getfield      #2                  // Field underlyingStore:Lnet/sf/ehcache/store/Store;
       4: invokeinterface #36,  1           // InterfaceMethod net/sf/ehcache/store/Store.isCacheCoherent:()Z
       9: ireturn

  public boolean isClusterCoherent();
    Code:
       0: aload_0
       1: getfield      #2                  // Field underlyingStore:Lnet/sf/ehcache/store/Store;
       4: invokeinterface #37,  1           // InterfaceMethod net/sf/ehcache/store/Store.isClusterCoherent:()Z
       9: ireturn

  public void waitUntilClusterCoherent() throws net.sf.ehcache.terracotta.TerracottaNotRunningException, java.lang.UnsupportedOperationException, java.lang.InterruptedException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field underlyingStore:Lnet/sf/ehcache/store/Store;
       4: invokeinterface #38,  1           // InterfaceMethod net/sf/ehcache/store/Store.waitUntilClusterCoherent:()V
       9: return

  public void setAttributeExtractors(java.util.Map<java.lang.String, net.sf.ehcache.search.attribute.AttributeExtractor>);
    Code:
       0: aload_0
       1: getfield      #2                  // Field underlyingStore:Lnet/sf/ehcache/store/Store;
       4: aload_1
       5: invokeinterface #39,  2           // InterfaceMethod net/sf/ehcache/store/Store.setAttributeExtractors:(Ljava/util/Map;)V
      10: return

  public <T> net.sf.ehcache.search.Attribute<T> getSearchAttribute(java.lang.String) throws net.sf.ehcache.CacheException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field underlyingStore:Lnet/sf/ehcache/store/Store;
       4: aload_1
       5: invokeinterface #40,  2           // InterfaceMethod net/sf/ehcache/store/Store.getSearchAttribute:(Ljava/lang/String;)Lnet/sf/ehcache/search/Attribute;
      10: areturn

  public boolean hasAbortedSizeOf();
    Code:
       0: aload_0
       1: getfield      #2                  // Field underlyingStore:Lnet/sf/ehcache/store/Store;
       4: invokeinterface #41,  1           // InterfaceMethod net/sf/ehcache/store/Store.hasAbortedSizeOf:()Z
       9: ireturn

  public net.sf.ehcache.Element unsafeGet(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #2                  // Field underlyingStore:Lnet/sf/ehcache/store/Store;
       4: instanceof    #42                 // class net/sf/ehcache/store/TerracottaStore
       7: ifeq          24
      10: aload_0
      11: getfield      #2                  // Field underlyingStore:Lnet/sf/ehcache/store/Store;
      14: checkcast     #42                 // class net/sf/ehcache/store/TerracottaStore
      17: aload_1
      18: invokeinterface #43,  2           // InterfaceMethod net/sf/ehcache/store/TerracottaStore.unsafeGet:(Ljava/lang/Object;)Lnet/sf/ehcache/Element;
      23: areturn
      24: new           #44                 // class net/sf/ehcache/CacheException
      27: dup
      28: ldc           #45                 // String underlying store is not an instance of TerracottaStore
      30: invokespecial #46                 // Method net/sf/ehcache/CacheException."<init>":(Ljava/lang/String;)V
      33: athrow

  public net.sf.ehcache.Element unsafeGetQuiet(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #2                  // Field underlyingStore:Lnet/sf/ehcache/store/Store;
       4: instanceof    #42                 // class net/sf/ehcache/store/TerracottaStore
       7: ifeq          24
      10: aload_0
      11: getfield      #2                  // Field underlyingStore:Lnet/sf/ehcache/store/Store;
      14: checkcast     #42                 // class net/sf/ehcache/store/TerracottaStore
      17: aload_1
      18: invokeinterface #47,  2           // InterfaceMethod net/sf/ehcache/store/TerracottaStore.unsafeGetQuiet:(Ljava/lang/Object;)Lnet/sf/ehcache/Element;
      23: areturn
      24: new           #44                 // class net/sf/ehcache/CacheException
      27: dup
      28: ldc           #45                 // String underlying store is not an instance of TerracottaStore
      30: invokespecial #46                 // Method net/sf/ehcache/CacheException."<init>":(Ljava/lang/String;)V
      33: athrow

  public net.sf.ehcache.Element unlockedGet(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #2                  // Field underlyingStore:Lnet/sf/ehcache/store/Store;
       4: instanceof    #42                 // class net/sf/ehcache/store/TerracottaStore
       7: ifeq          24
      10: aload_0
      11: getfield      #2                  // Field underlyingStore:Lnet/sf/ehcache/store/Store;
      14: checkcast     #42                 // class net/sf/ehcache/store/TerracottaStore
      17: aload_1
      18: invokeinterface #48,  2           // InterfaceMethod net/sf/ehcache/store/TerracottaStore.unlockedGet:(Ljava/lang/Object;)Lnet/sf/ehcache/Element;
      23: areturn
      24: new           #44                 // class net/sf/ehcache/CacheException
      27: dup
      28: ldc           #45                 // String underlying store is not an instance of TerracottaStore
      30: invokespecial #46                 // Method net/sf/ehcache/CacheException."<init>":(Ljava/lang/String;)V
      33: athrow

  public net.sf.ehcache.Element unlockedGetQuiet(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #2                  // Field underlyingStore:Lnet/sf/ehcache/store/Store;
       4: instanceof    #42                 // class net/sf/ehcache/store/TerracottaStore
       7: ifeq          24
      10: aload_0
      11: getfield      #2                  // Field underlyingStore:Lnet/sf/ehcache/store/Store;
      14: checkcast     #42                 // class net/sf/ehcache/store/TerracottaStore
      17: aload_1
      18: invokeinterface #49,  2           // InterfaceMethod net/sf/ehcache/store/TerracottaStore.unlockedGetQuiet:(Ljava/lang/Object;)Lnet/sf/ehcache/Element;
      23: areturn
      24: new           #44                 // class net/sf/ehcache/CacheException
      27: dup
      28: ldc           #45                 // String underlying store is not an instance of TerracottaStore
      30: invokespecial #46                 // Method net/sf/ehcache/CacheException."<init>":(Ljava/lang/String;)V
      33: athrow

  public java.util.Set getLocalKeys();
    Code:
       0: aload_0
       1: getfield      #2                  // Field underlyingStore:Lnet/sf/ehcache/store/Store;
       4: instanceof    #42                 // class net/sf/ehcache/store/TerracottaStore
       7: ifeq          23
      10: aload_0
      11: getfield      #2                  // Field underlyingStore:Lnet/sf/ehcache/store/Store;
      14: checkcast     #42                 // class net/sf/ehcache/store/TerracottaStore
      17: invokeinterface #50,  1           // InterfaceMethod net/sf/ehcache/store/TerracottaStore.getLocalKeys:()Ljava/util/Set;
      22: areturn
      23: new           #44                 // class net/sf/ehcache/CacheException
      26: dup
      27: ldc           #45                 // String underlying store is not an instance of TerracottaStore
      29: invokespecial #46                 // Method net/sf/ehcache/CacheException."<init>":(Ljava/lang/String;)V
      32: athrow

  public net.sf.ehcache.config.CacheConfiguration$TransactionalMode getTransactionalMode();
    Code:
       0: aload_0
       1: getfield      #2                  // Field underlyingStore:Lnet/sf/ehcache/store/Store;
       4: instanceof    #42                 // class net/sf/ehcache/store/TerracottaStore
       7: ifeq          23
      10: aload_0
      11: getfield      #2                  // Field underlyingStore:Lnet/sf/ehcache/store/Store;
      14: checkcast     #42                 // class net/sf/ehcache/store/TerracottaStore
      17: invokeinterface #51,  1           // InterfaceMethod net/sf/ehcache/store/TerracottaStore.getTransactionalMode:()Lnet/sf/ehcache/config/CacheConfiguration$TransactionalMode;
      22: areturn
      23: new           #44                 // class net/sf/ehcache/CacheException
      26: dup
      27: ldc           #45                 // String underlying store is not an instance of TerracottaStore
      29: invokespecial #46                 // Method net/sf/ehcache/CacheException."<init>":(Ljava/lang/String;)V
      32: athrow
}
