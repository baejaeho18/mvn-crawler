Compiled from "DelegatingTransactionIDFactory.java"
public class net.sf.ehcache.transaction.DelegatingTransactionIDFactory implements net.sf.ehcache.transaction.TransactionIDFactory {
  private final net.sf.ehcache.FeaturesManager featuresManager;

  private final net.sf.ehcache.terracotta.TerracottaClient terracottaClient;

  private final java.lang.String cacheManagerName;

  private volatile net.sf.ehcache.terracotta.ClusteredInstanceFactory clusteredInstanceFactory;

  private volatile java.util.concurrent.atomic.AtomicReference<net.sf.ehcache.transaction.TransactionIDFactory> transactionIDFactory;

  public net.sf.ehcache.transaction.DelegatingTransactionIDFactory(net.sf.ehcache.FeaturesManager, net.sf.ehcache.terracotta.TerracottaClient, java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/concurrent/atomic/AtomicReference
       8: dup
       9: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicReference."<init>":()V
      12: putfield      #4                  // Field transactionIDFactory:Ljava/util/concurrent/atomic/AtomicReference;
      15: aload_0
      16: aload_1
      17: putfield      #5                  // Field featuresManager:Lnet/sf/ehcache/FeaturesManager;
      20: aload_0
      21: aload_2
      22: putfield      #6                  // Field terracottaClient:Lnet/sf/ehcache/terracotta/TerracottaClient;
      25: aload_0
      26: aload_3
      27: putfield      #7                  // Field cacheManagerName:Ljava/lang/String;
      30: return

  private net.sf.ehcache.transaction.TransactionIDFactory get();
    Code:
       0: aload_0
       1: getfield      #6                  // Field terracottaClient:Lnet/sf/ehcache/terracotta/TerracottaClient;
       4: invokevirtual #8                  // Method net/sf/ehcache/terracotta/TerracottaClient.getClusteredInstanceFactory:()Lnet/sf/ehcache/terracotta/ClusteredInstanceFactory;
       7: astore_1
       8: aload_1
       9: ifnull        48
      12: aload_1
      13: aload_0
      14: getfield      #9                  // Field clusteredInstanceFactory:Lnet/sf/ehcache/terracotta/ClusteredInstanceFactory;
      17: if_acmpeq     48
      20: aload_0
      21: getfield      #4                  // Field transactionIDFactory:Ljava/util/concurrent/atomic/AtomicReference;
      24: aload_1
      25: invokestatic  #10                 // Method java/util/UUID.randomUUID:()Ljava/util/UUID;
      28: invokevirtual #11                 // Method java/util/UUID.toString:()Ljava/lang/String;
      31: aload_0
      32: getfield      #7                  // Field cacheManagerName:Ljava/lang/String;
      35: invokeinterface #12,  3           // InterfaceMethod net/sf/ehcache/terracotta/ClusteredInstanceFactory.createTransactionIDFactory:(Ljava/lang/String;Ljava/lang/String;)Lnet/sf/ehcache/transaction/TransactionIDFactory;
      40: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
      43: aload_0
      44: aload_1
      45: putfield      #9                  // Field clusteredInstanceFactory:Lnet/sf/ehcache/terracotta/ClusteredInstanceFactory;
      48: aload_0
      49: getfield      #4                  // Field transactionIDFactory:Ljava/util/concurrent/atomic/AtomicReference;
      52: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      55: ifnonnull     111
      58: aload_0
      59: getfield      #5                  // Field featuresManager:Lnet/sf/ehcache/FeaturesManager;
      62: ifnonnull     76
      65: new           #15                 // class net/sf/ehcache/transaction/TransactionIDFactoryImpl
      68: dup
      69: invokespecial #16                 // Method net/sf/ehcache/transaction/TransactionIDFactoryImpl."<init>":()V
      72: astore_2
      73: goto          86
      76: aload_0
      77: getfield      #5                  // Field featuresManager:Lnet/sf/ehcache/FeaturesManager;
      80: invokeinterface #17,  1           // InterfaceMethod net/sf/ehcache/FeaturesManager.createTransactionIDFactory:()Lnet/sf/ehcache/transaction/TransactionIDFactory;
      85: astore_2
      86: aload_0
      87: getfield      #4                  // Field transactionIDFactory:Ljava/util/concurrent/atomic/AtomicReference;
      90: aconst_null
      91: aload_2
      92: invokevirtual #18                 // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
      95: ifeq          100
      98: aload_2
      99: areturn
     100: aload_0
     101: getfield      #4                  // Field transactionIDFactory:Ljava/util/concurrent/atomic/AtomicReference;
     104: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
     107: checkcast     #19                 // class net/sf/ehcache/transaction/TransactionIDFactory
     110: areturn
     111: aload_0
     112: getfield      #4                  // Field transactionIDFactory:Ljava/util/concurrent/atomic/AtomicReference;
     115: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
     118: checkcast     #19                 // class net/sf/ehcache/transaction/TransactionIDFactory
     121: areturn

  public net.sf.ehcache.transaction.TransactionID createTransactionID();
    Code:
       0: aload_0
       1: invokespecial #20                 // Method get:()Lnet/sf/ehcache/transaction/TransactionIDFactory;
       4: invokeinterface #21,  1           // InterfaceMethod net/sf/ehcache/transaction/TransactionIDFactory.createTransactionID:()Lnet/sf/ehcache/transaction/TransactionID;
       9: areturn

  public net.sf.ehcache.transaction.TransactionID restoreTransactionID(net.sf.ehcache.transaction.TransactionIDSerializedForm);
    Code:
       0: aload_0
       1: invokespecial #20                 // Method get:()Lnet/sf/ehcache/transaction/TransactionIDFactory;
       4: aload_1
       5: invokeinterface #22,  2           // InterfaceMethod net/sf/ehcache/transaction/TransactionIDFactory.restoreTransactionID:(Lnet/sf/ehcache/transaction/TransactionIDSerializedForm;)Lnet/sf/ehcache/transaction/TransactionID;
      10: areturn

  public net.sf.ehcache.transaction.xa.XidTransactionID createXidTransactionID(javax.transaction.xa.Xid, net.sf.ehcache.Ehcache);
    Code:
       0: aload_0
       1: invokespecial #20                 // Method get:()Lnet/sf/ehcache/transaction/TransactionIDFactory;
       4: aload_1
       5: aload_2
       6: invokeinterface #23,  3           // InterfaceMethod net/sf/ehcache/transaction/TransactionIDFactory.createXidTransactionID:(Ljavax/transaction/xa/Xid;Lnet/sf/ehcache/Ehcache;)Lnet/sf/ehcache/transaction/xa/XidTransactionID;
      11: areturn

  public net.sf.ehcache.transaction.xa.XidTransactionID restoreXidTransactionID(net.sf.ehcache.transaction.XidTransactionIDSerializedForm);
    Code:
       0: aload_0
       1: invokespecial #20                 // Method get:()Lnet/sf/ehcache/transaction/TransactionIDFactory;
       4: aload_1
       5: invokeinterface #24,  2           // InterfaceMethod net/sf/ehcache/transaction/TransactionIDFactory.restoreXidTransactionID:(Lnet/sf/ehcache/transaction/XidTransactionIDSerializedForm;)Lnet/sf/ehcache/transaction/xa/XidTransactionID;
      10: areturn

  public void markForCommit(net.sf.ehcache.transaction.TransactionID);
    Code:
       0: aload_0
       1: invokespecial #20                 // Method get:()Lnet/sf/ehcache/transaction/TransactionIDFactory;
       4: aload_1
       5: invokeinterface #25,  2           // InterfaceMethod net/sf/ehcache/transaction/TransactionIDFactory.markForCommit:(Lnet/sf/ehcache/transaction/TransactionID;)V
      10: return

  public void markForRollback(net.sf.ehcache.transaction.xa.XidTransactionID);
    Code:
       0: aload_0
       1: invokespecial #20                 // Method get:()Lnet/sf/ehcache/transaction/TransactionIDFactory;
       4: aload_1
       5: invokeinterface #26,  2           // InterfaceMethod net/sf/ehcache/transaction/TransactionIDFactory.markForRollback:(Lnet/sf/ehcache/transaction/xa/XidTransactionID;)V
      10: return

  public boolean isDecisionCommit(net.sf.ehcache.transaction.TransactionID);
    Code:
       0: aload_0
       1: invokespecial #20                 // Method get:()Lnet/sf/ehcache/transaction/TransactionIDFactory;
       4: aload_1
       5: invokeinterface #27,  2           // InterfaceMethod net/sf/ehcache/transaction/TransactionIDFactory.isDecisionCommit:(Lnet/sf/ehcache/transaction/TransactionID;)Z
      10: ireturn

  public void clear(net.sf.ehcache.transaction.TransactionID);
    Code:
       0: aload_0
       1: invokespecial #20                 // Method get:()Lnet/sf/ehcache/transaction/TransactionIDFactory;
       4: aload_1
       5: invokeinterface #28,  2           // InterfaceMethod net/sf/ehcache/transaction/TransactionIDFactory.clear:(Lnet/sf/ehcache/transaction/TransactionID;)V
      10: return

  public java.util.Set<net.sf.ehcache.transaction.xa.XidTransactionID> getAllXidTransactionIDsFor(net.sf.ehcache.Ehcache);
    Code:
       0: aload_0
       1: invokespecial #20                 // Method get:()Lnet/sf/ehcache/transaction/TransactionIDFactory;
       4: aload_1
       5: invokeinterface #29,  2           // InterfaceMethod net/sf/ehcache/transaction/TransactionIDFactory.getAllXidTransactionIDsFor:(Lnet/sf/ehcache/Ehcache;)Ljava/util/Set;
      10: areturn

  public java.util.Set<net.sf.ehcache.transaction.TransactionID> getAllTransactionIDs();
    Code:
       0: aload_0
       1: invokespecial #20                 // Method get:()Lnet/sf/ehcache/transaction/TransactionIDFactory;
       4: invokeinterface #30,  1           // InterfaceMethod net/sf/ehcache/transaction/TransactionIDFactory.getAllTransactionIDs:()Ljava/util/Set;
       9: areturn

  public boolean isExpired(net.sf.ehcache.transaction.TransactionID);
    Code:
       0: aload_0
       1: invokespecial #20                 // Method get:()Lnet/sf/ehcache/transaction/TransactionIDFactory;
       4: aload_1
       5: invokeinterface #31,  2           // InterfaceMethod net/sf/ehcache/transaction/TransactionIDFactory.isExpired:(Lnet/sf/ehcache/transaction/TransactionID;)Z
      10: ireturn

  public java.lang.Boolean isPersistent();
    Code:
       0: aload_0
       1: getfield      #4                  // Field transactionIDFactory:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: ifnonnull     12
      10: aconst_null
      11: areturn
      12: aload_0
      13: invokespecial #20                 // Method get:()Lnet/sf/ehcache/transaction/TransactionIDFactory;
      16: invokeinterface #32,  1           // InterfaceMethod net/sf/ehcache/transaction/TransactionIDFactory.isPersistent:()Ljava/lang/Boolean;
      21: areturn
}
