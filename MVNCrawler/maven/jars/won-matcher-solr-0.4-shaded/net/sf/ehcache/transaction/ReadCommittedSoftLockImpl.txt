Compiled from "ReadCommittedSoftLockImpl.java"
public class net.sf.ehcache.transaction.ReadCommittedSoftLockImpl implements net.sf.ehcache.transaction.SoftLock {
  private static final int PRIME;

  private final net.sf.ehcache.transaction.SoftLockManager manager;

  private final java.util.concurrent.locks.ReentrantLock lock;

  private final java.util.concurrent.locks.ReentrantReadWriteLock freezeLock;

  private final java.lang.Object key;

  private volatile boolean expired;

  net.sf.ehcache.transaction.ReadCommittedSoftLockImpl(net.sf.ehcache.transaction.SoftLockManager, java.lang.Object);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field manager:Lnet/sf/ehcache/transaction/SoftLockManager;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field key:Ljava/lang/Object;
      14: aload_0
      15: new           #4                  // class java/util/concurrent/locks/ReentrantLock
      18: dup
      19: invokespecial #5                  // Method java/util/concurrent/locks/ReentrantLock."<init>":()V
      22: putfield      #6                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      25: aload_0
      26: new           #7                  // class java/util/concurrent/locks/ReentrantReadWriteLock
      29: dup
      30: invokespecial #8                  // Method java/util/concurrent/locks/ReentrantReadWriteLock."<init>":()V
      33: putfield      #9                  // Field freezeLock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
      36: return

  public java.lang.Object getKey();
    Code:
       0: aload_0
       1: getfield      #3                  // Field key:Ljava/lang/Object;
       4: areturn

  public net.sf.ehcache.Element getElement(net.sf.ehcache.transaction.TransactionID, net.sf.ehcache.transaction.SoftLockID);
    Code:
       0: aload_0
       1: getfield      #9                  // Field freezeLock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
       4: invokevirtual #10                 // Method java/util/concurrent/locks/ReentrantReadWriteLock.readLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;
       7: invokevirtual #11                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock:()V
      10: aload_2
      11: invokevirtual #12                 // Method net/sf/ehcache/transaction/SoftLockID.getTransactionID:()Lnet/sf/ehcache/transaction/TransactionID;
      14: aload_1
      15: invokevirtual #13                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      18: ifeq          38
      21: aload_2
      22: invokevirtual #14                 // Method net/sf/ehcache/transaction/SoftLockID.getNewElement:()Lnet/sf/ehcache/Element;
      25: astore_3
      26: aload_0
      27: getfield      #9                  // Field freezeLock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
      30: invokevirtual #10                 // Method java/util/concurrent/locks/ReentrantReadWriteLock.readLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;
      33: invokevirtual #15                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock:()V
      36: aload_3
      37: areturn
      38: aload_2
      39: invokevirtual #16                 // Method net/sf/ehcache/transaction/SoftLockID.getOldElement:()Lnet/sf/ehcache/Element;
      42: astore_3
      43: aload_0
      44: getfield      #9                  // Field freezeLock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
      47: invokevirtual #10                 // Method java/util/concurrent/locks/ReentrantReadWriteLock.readLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;
      50: invokevirtual #15                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock:()V
      53: aload_3
      54: areturn
      55: astore        4
      57: aload_0
      58: getfield      #9                  // Field freezeLock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
      61: invokevirtual #10                 // Method java/util/concurrent/locks/ReentrantReadWriteLock.readLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;
      64: invokevirtual #15                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock:()V
      67: aload         4
      69: athrow
    Exception table:
       from    to  target type
          10    26    55   any
          38    43    55   any
          55    57    55   any

  public void lock();
    Code:
       0: aload_0
       1: getfield      #6                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
       4: invokevirtual #17                 // Method java/util/concurrent/locks/ReentrantLock.lock:()V
       7: return

  public boolean tryLock(long) throws java.lang.InterruptedException;
    Code:
       0: aload_0
       1: getfield      #6                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
       4: lload_1
       5: getstatic     #18                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
       8: invokevirtual #19                 // Method java/util/concurrent/locks/ReentrantLock.tryLock:(JLjava/util/concurrent/TimeUnit;)Z
      11: ireturn

  public void clearTryLock();
    Code:
       0: aload_0
       1: getfield      #6                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
       4: invokevirtual #20                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
       7: return

  public void unlock();
    Code:
       0: aload_0
       1: getfield      #6                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
       4: invokevirtual #20                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
       7: aload_0
       8: invokespecial #21                 // Method clear:()V
      11: return

  private boolean isLocked();
    Code:
       0: aload_0
       1: getfield      #6                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
       4: invokevirtual #22                 // Method java/util/concurrent/locks/ReentrantLock.isLocked:()Z
       7: ireturn

  public void freeze();
    Code:
       0: aload_0
       1: invokespecial #23                 // Method isLocked:()Z
       4: ifne          17
       7: new           #24                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #25                 // String cannot freeze an unlocked soft lock
      13: invokespecial #26                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: getfield      #9                  // Field freezeLock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
      21: invokevirtual #27                 // Method java/util/concurrent/locks/ReentrantReadWriteLock.writeLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;
      24: invokevirtual #28                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock.lock:()V
      27: return

  public void unfreeze();
    Code:
       0: aload_0
       1: getfield      #9                  // Field freezeLock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
       4: invokevirtual #27                 // Method java/util/concurrent/locks/ReentrantReadWriteLock.writeLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;
       7: invokevirtual #29                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock.unlock:()V
      10: return

  private boolean isFrozen();
    Code:
       0: aload_0
       1: getfield      #9                  // Field freezeLock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
       4: invokevirtual #30                 // Method java/util/concurrent/locks/ReentrantReadWriteLock.isWriteLocked:()Z
       7: ireturn

  public boolean isExpired();
    Code:
       0: aload_0
       1: getfield      #31                 // Field expired:Z
       4: ifne          30
       7: aload_0
       8: aload_0
       9: invokespecial #32                 // Method isFrozen:()Z
      12: ifne          26
      15: aload_0
      16: invokespecial #23                 // Method isLocked:()Z
      19: ifne          26
      22: iconst_1
      23: goto          27
      26: iconst_0
      27: putfield      #31                 // Field expired:Z
      30: aload_0
      31: getfield      #31                 // Field expired:Z
      34: ireturn

  private void clear();
    Code:
       0: aload_0
       1: getfield      #2                  // Field manager:Lnet/sf/ehcache/transaction/SoftLockManager;
       4: aload_0
       5: invokeinterface #33,  2           // InterfaceMethod net/sf/ehcache/transaction/SoftLockManager.clearSoftLock:(Lnet/sf/ehcache/transaction/SoftLock;)V
      10: return

  public java.lang.String toString();
    Code:
       0: new           #34                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #35                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #36                 // String Soft Lock [clustered: false, isolation: rc, key:
       9: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: getfield      #3                  // Field key:Ljava/lang/Object;
      16: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      19: ldc           #39                 // String ]
      21: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: invokevirtual #40                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      27: areturn
}
