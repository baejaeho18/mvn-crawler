Compiled from "GraphCollection.java"
public class de.uni_koblenz.aggrimm.icp.crypto.sign.graph.GraphCollection {
  private java.util.LinkedList<de.uni_koblenz.aggrimm.icp.crypto.sign.graph.Prefix> prefixes;

  private java.util.LinkedList<de.uni_koblenz.aggrimm.icp.crypto.sign.graph.NamedGraph> graphs;

  private de.uni_koblenz.aggrimm.icp.crypto.sign.graph.SignatureData signature;

  public de.uni_koblenz.aggrimm.icp.crypto.sign.graph.GraphCollection();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/LinkedList
       8: dup
       9: invokespecial #3                  // Method java/util/LinkedList."<init>":()V
      12: putfield      #4                  // Field prefixes:Ljava/util/LinkedList;
      15: aload_0
      16: new           #2                  // class java/util/LinkedList
      19: dup
      20: invokespecial #3                  // Method java/util/LinkedList."<init>":()V
      23: putfield      #5                  // Field graphs:Ljava/util/LinkedList;
      26: return

  public java.util.LinkedList<de.uni_koblenz.aggrimm.icp.crypto.sign.graph.Prefix> getPrefixes();
    Code:
       0: aload_0
       1: getfield      #4                  // Field prefixes:Ljava/util/LinkedList;
       4: areturn

  public java.util.LinkedList<de.uni_koblenz.aggrimm.icp.crypto.sign.graph.NamedGraph> getGraphs();
    Code:
       0: aload_0
       1: getfield      #5                  // Field graphs:Ljava/util/LinkedList;
       4: areturn

  public void setGraphs(java.util.LinkedList<de.uni_koblenz.aggrimm.icp.crypto.sign.graph.NamedGraph>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #5                  // Field graphs:Ljava/util/LinkedList;
       5: return

  public de.uni_koblenz.aggrimm.icp.crypto.sign.graph.SignatureData getSignature();
    Code:
       0: aload_0
       1: getfield      #6                  // Field signature:Lde/uni_koblenz/aggrimm/icp/crypto/sign/graph/SignatureData;
       4: ifnonnull     18
       7: aload_0
       8: new           #7                  // class de/uni_koblenz/aggrimm/icp/crypto/sign/graph/SignatureData
      11: dup
      12: invokespecial #8                  // Method de/uni_koblenz/aggrimm/icp/crypto/sign/graph/SignatureData."<init>":()V
      15: putfield      #6                  // Field signature:Lde/uni_koblenz/aggrimm/icp/crypto/sign/graph/SignatureData;
      18: aload_0
      19: getfield      #6                  // Field signature:Lde/uni_koblenz/aggrimm/icp/crypto/sign/graph/SignatureData;
      22: areturn

  public void setSignature(de.uni_koblenz.aggrimm.icp.crypto.sign.graph.SignatureData);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #6                  // Field signature:Lde/uni_koblenz/aggrimm/icp/crypto/sign/graph/SignatureData;
       5: return

  public boolean hasSignature();
    Code:
       0: aload_0
       1: getfield      #6                  // Field signature:Lde/uni_koblenz/aggrimm/icp/crypto/sign/graph/SignatureData;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public void addPrefix(de.uni_koblenz.aggrimm.icp.crypto.sign.graph.Prefix);
    Code:
       0: aload_1
       1: invokevirtual #9                  // Method de/uni_koblenz/aggrimm/icp/crypto/sign/graph/Prefix.getPrefix:()Ljava/lang/String;
       4: astore_2
       5: aload_1
       6: invokevirtual #10                 // Method de/uni_koblenz/aggrimm/icp/crypto/sign/graph/Prefix.getIri:()Ljava/lang/String;
       9: astore_3
      10: aload_0
      11: getfield      #4                  // Field prefixes:Ljava/util/LinkedList;
      14: invokevirtual #11                 // Method java/util/LinkedList.iterator:()Ljava/util/Iterator;
      17: astore        4
      19: aload         4
      21: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      26: ifeq          69
      29: aload         4
      31: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      36: checkcast     #14                 // class de/uni_koblenz/aggrimm/icp/crypto/sign/graph/Prefix
      39: astore        5
      41: aload         5
      43: invokevirtual #9                  // Method de/uni_koblenz/aggrimm/icp/crypto/sign/graph/Prefix.getPrefix:()Ljava/lang/String;
      46: aload_2
      47: invokevirtual #15                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      50: ifeq          66
      53: aload         5
      55: invokevirtual #10                 // Method de/uni_koblenz/aggrimm/icp/crypto/sign/graph/Prefix.getIri:()Ljava/lang/String;
      58: aload_3
      59: invokevirtual #15                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      62: ifeq          66
      65: return
      66: goto          19
      69: aload_0
      70: getfield      #4                  // Field prefixes:Ljava/util/LinkedList;
      73: aload_1
      74: invokevirtual #16                 // Method java/util/LinkedList.add:(Ljava/lang/Object;)Z
      77: pop
      78: return

  public void addGraph(de.uni_koblenz.aggrimm.icp.crypto.sign.graph.NamedGraph);
    Code:
       0: aload_0
       1: getfield      #5                  // Field graphs:Ljava/util/LinkedList;
       4: aload_1
       5: invokevirtual #16                 // Method java/util/LinkedList.add:(Ljava/lang/Object;)Z
       8: pop
       9: return

  public boolean hasTriples();
    Code:
       0: aload_0
       1: getfield      #5                  // Field graphs:Ljava/util/LinkedList;
       4: invokevirtual #11                 // Method java/util/LinkedList.iterator:()Ljava/util/Iterator;
       7: astore_1
       8: aload_1
       9: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      14: ifeq          40
      17: aload_1
      18: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      23: checkcast     #17                 // class de/uni_koblenz/aggrimm/icp/crypto/sign/graph/NamedGraph
      26: astore_2
      27: aload_2
      28: iconst_1
      29: invokevirtual #18                 // Method de/uni_koblenz/aggrimm/icp/crypto/sign/graph/NamedGraph.tripleCount:(Z)I
      32: ifle          37
      35: iconst_1
      36: ireturn
      37: goto          8
      40: iconst_0
      41: ireturn

  public int tripleCount();
    Code:
       0: iconst_0
       1: istore_1
       2: aload_0
       3: getfield      #5                  // Field graphs:Ljava/util/LinkedList;
       6: invokevirtual #11                 // Method java/util/LinkedList.iterator:()Ljava/util/Iterator;
       9: astore_2
      10: aload_2
      11: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      16: ifeq          40
      19: aload_2
      20: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      25: checkcast     #17                 // class de/uni_koblenz/aggrimm/icp/crypto/sign/graph/NamedGraph
      28: astore_3
      29: iload_1
      30: aload_3
      31: iconst_1
      32: invokevirtual #18                 // Method de/uni_koblenz/aggrimm/icp/crypto/sign/graph/NamedGraph.tripleCount:(Z)I
      35: iadd
      36: istore_1
      37: goto          10
      40: iload_1
      41: ireturn

  public java.util.ArrayList<de.uni_koblenz.aggrimm.icp.crypto.sign.graph.Triple> getRootTriples();
    Code:
       0: aload_0
       1: getfield      #5                  // Field graphs:Ljava/util/LinkedList;
       4: invokevirtual #11                 // Method java/util/LinkedList.iterator:()Ljava/util/Iterator;
       7: astore_1
       8: aload_1
       9: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      14: ifeq          53
      17: aload_1
      18: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      23: checkcast     #17                 // class de/uni_koblenz/aggrimm/icp/crypto/sign/graph/NamedGraph
      26: astore_2
      27: aload_2
      28: invokevirtual #19                 // Method de/uni_koblenz/aggrimm/icp/crypto/sign/graph/NamedGraph.getDepth:()I
      31: iconst_m1
      32: if_icmpne     50
      35: aload_2
      36: invokevirtual #20                 // Method de/uni_koblenz/aggrimm/icp/crypto/sign/graph/NamedGraph.getName:()Ljava/lang/String;
      39: invokevirtual #21                 // Method java/lang/String.length:()I
      42: ifne          50
      45: aload_2
      46: invokevirtual #22                 // Method de/uni_koblenz/aggrimm/icp/crypto/sign/graph/NamedGraph.getTriples:()Ljava/util/ArrayList;
      49: areturn
      50: goto          8
      53: new           #23                 // class java/util/ArrayList
      56: dup
      57: invokespecial #24                 // Method java/util/ArrayList."<init>":()V
      60: areturn

  public int blankNodeCount(boolean, boolean);
    Code:
       0: iconst_0
       1: istore_3
       2: aload_0
       3: getfield      #5                  // Field graphs:Ljava/util/LinkedList;
       6: invokevirtual #11                 // Method java/util/LinkedList.iterator:()Ljava/util/Iterator;
       9: astore        4
      11: aload         4
      13: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      18: ifeq          46
      21: aload         4
      23: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      28: checkcast     #17                 // class de/uni_koblenz/aggrimm/icp/crypto/sign/graph/NamedGraph
      31: astore        5
      33: iload_3
      34: aload         5
      36: iload_1
      37: iload_2
      38: invokevirtual #25                 // Method de/uni_koblenz/aggrimm/icp/crypto/sign/graph/NamedGraph.blankNodeCount:(ZZ)I
      41: iadd
      42: istore_3
      43: goto          11
      46: iload_3
      47: ireturn

  public int[] getStats();
    Code:
       0: bipush        6
       2: newarray       int
       4: astore_1
       5: aload_0
       6: getfield      #5                  // Field graphs:Ljava/util/LinkedList;
       9: invokevirtual #11                 // Method java/util/LinkedList.iterator:()Ljava/util/Iterator;
      12: astore_2
      13: aload_2
      14: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      19: ifeq          70
      22: aload_2
      23: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      28: checkcast     #17                 // class de/uni_koblenz/aggrimm/icp/crypto/sign/graph/NamedGraph
      31: astore_3
      32: aload_3
      33: iconst_1
      34: invokevirtual #26                 // Method de/uni_koblenz/aggrimm/icp/crypto/sign/graph/NamedGraph.getStats:(Z)[I
      37: astore        4
      39: iconst_0
      40: istore        5
      42: iload         5
      44: aload_1
      45: arraylength
      46: if_icmpge     67
      49: aload_1
      50: iload         5
      52: dup2
      53: iaload
      54: aload         4
      56: iload         5
      58: iaload
      59: iadd
      60: iastore
      61: iinc          5, 1
      64: goto          42
      67: goto          13
      70: aload_1
      71: areturn

  public int countPredicate(java.lang.String);
    Code:
       0: iconst_0
       1: istore_2
       2: aload_0
       3: getfield      #5                  // Field graphs:Ljava/util/LinkedList;
       6: invokevirtual #11                 // Method java/util/LinkedList.iterator:()Ljava/util/Iterator;
       9: astore_3
      10: aload_3
      11: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      16: ifeq          42
      19: aload_3
      20: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      25: checkcast     #17                 // class de/uni_koblenz/aggrimm/icp/crypto/sign/graph/NamedGraph
      28: astore        4
      30: iload_2
      31: aload         4
      33: aload_1
      34: invokevirtual #27                 // Method de/uni_koblenz/aggrimm/icp/crypto/sign/graph/NamedGraph.countPredicate:(Ljava/lang/String;)I
      37: iadd
      38: istore_2
      39: goto          10
      42: iload_2
      43: ireturn

  public int countDuplicates();
    Code:
       0: iconst_0
       1: istore_1
       2: aload_0
       3: getfield      #5                  // Field graphs:Ljava/util/LinkedList;
       6: invokevirtual #11                 // Method java/util/LinkedList.iterator:()Ljava/util/Iterator;
       9: astore_2
      10: aload_2
      11: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      16: ifeq          39
      19: aload_2
      20: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      25: checkcast     #17                 // class de/uni_koblenz/aggrimm/icp/crypto/sign/graph/NamedGraph
      28: astore_3
      29: iload_1
      30: aload_3
      31: invokevirtual #28                 // Method de/uni_koblenz/aggrimm/icp/crypto/sign/graph/NamedGraph.countDuplicates:()I
      34: iadd
      35: istore_1
      36: goto          10
      39: iload_1
      40: ireturn

  public void resolvePrefixes();
    Code:
       0: aload_0
       1: getfield      #5                  // Field graphs:Ljava/util/LinkedList;
       4: invokevirtual #11                 // Method java/util/LinkedList.iterator:()Ljava/util/Iterator;
       7: astore_1
       8: aload_1
       9: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      14: ifeq          38
      17: aload_1
      18: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      23: checkcast     #17                 // class de/uni_koblenz/aggrimm/icp/crypto/sign/graph/NamedGraph
      26: astore_2
      27: aload_2
      28: aload_0
      29: getfield      #4                  // Field prefixes:Ljava/util/LinkedList;
      32: invokevirtual #29                 // Method de/uni_koblenz/aggrimm/icp/crypto/sign/graph/NamedGraph.resolvePrefixes:(Ljava/util/LinkedList;)V
      35: goto          8
      38: return

  public void applyPrefixes();
    Code:
       0: aload_0
       1: getfield      #5                  // Field graphs:Ljava/util/LinkedList;
       4: invokevirtual #11                 // Method java/util/LinkedList.iterator:()Ljava/util/Iterator;
       7: astore_1
       8: aload_1
       9: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      14: ifeq          38
      17: aload_1
      18: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      23: checkcast     #17                 // class de/uni_koblenz/aggrimm/icp/crypto/sign/graph/NamedGraph
      26: astore_2
      27: aload_2
      28: aload_0
      29: getfield      #4                  // Field prefixes:Ljava/util/LinkedList;
      32: invokevirtual #30                 // Method de/uni_koblenz/aggrimm/icp/crypto/sign/graph/NamedGraph.applyPrefixes:(Ljava/util/LinkedList;)V
      35: goto          8
      38: return

  public void sortGraphs();
    Code:
       0: aload_0
       1: getfield      #5                  // Field graphs:Ljava/util/LinkedList;
       4: invokestatic  #31                 // Method java/util/Collections.sort:(Ljava/util/List;)V
       7: aload_0
       8: getfield      #5                  // Field graphs:Ljava/util/LinkedList;
      11: invokevirtual #11                 // Method java/util/LinkedList.iterator:()Ljava/util/Iterator;
      14: astore_1
      15: aload_1
      16: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      21: ifeq          41
      24: aload_1
      25: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      30: checkcast     #17                 // class de/uni_koblenz/aggrimm/icp/crypto/sign/graph/NamedGraph
      33: astore_2
      34: aload_2
      35: invokevirtual #32                 // Method de/uni_koblenz/aggrimm/icp/crypto/sign/graph/NamedGraph.sortGraphs:()V
      38: goto          15
      41: return

  public boolean isHashed();
    Code:
       0: aload_0
       1: getfield      #6                  // Field signature:Lde/uni_koblenz/aggrimm/icp/crypto/sign/graph/SignatureData;
       4: ifnull        22
       7: aload_0
       8: getfield      #6                  // Field signature:Lde/uni_koblenz/aggrimm/icp/crypto/sign/graph/SignatureData;
      11: invokevirtual #33                 // Method de/uni_koblenz/aggrimm/icp/crypto/sign/graph/SignatureData.getGraphDigestMethod:()Ljava/lang/String;
      14: invokevirtual #21                 // Method java/lang/String.length:()I
      17: ifle          22
      20: iconst_1
      21: ireturn
      22: iconst_0
      23: ireturn

  public boolean isUsingMSGs();
    Code:
       0: aload_0
       1: getfield      #5                  // Field graphs:Ljava/util/LinkedList;
       4: invokevirtual #11                 // Method java/util/LinkedList.iterator:()Ljava/util/Iterator;
       7: astore_1
       8: aload_1
       9: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      14: ifeq          39
      17: aload_1
      18: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      23: checkcast     #17                 // class de/uni_koblenz/aggrimm/icp/crypto/sign/graph/NamedGraph
      26: astore_2
      27: aload_2
      28: invokevirtual #34                 // Method de/uni_koblenz/aggrimm/icp/crypto/sign/graph/NamedGraph.isUsingMSGs:()Z
      31: ifeq          36
      34: iconst_1
      35: ireturn
      36: goto          8
      39: iconst_0
      40: ireturn

  public boolean isValid() throws java.lang.Exception;
    Code:
       0: iconst_0
       1: istore_1
       2: iconst_0
       3: istore_2
       4: aload_0
       5: getfield      #5                  // Field graphs:Ljava/util/LinkedList;
       8: invokevirtual #11                 // Method java/util/LinkedList.iterator:()Ljava/util/Iterator;
      11: astore_3
      12: aload_3
      13: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      18: ifeq          101
      21: aload_3
      22: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      27: checkcast     #17                 // class de/uni_koblenz/aggrimm/icp/crypto/sign/graph/NamedGraph
      30: astore        4
      32: aload         4
      34: invokevirtual #19                 // Method de/uni_koblenz/aggrimm/icp/crypto/sign/graph/NamedGraph.getDepth:()I
      37: iconst_m1
      38: if_icmpne     59
      41: iinc          1, 1
      44: iload_1
      45: iconst_1
      46: if_icmple     59
      49: new           #35                 // class java/lang/Exception
      52: dup
      53: ldc           #36                 // String Multiple virtual graphs
      55: invokespecial #37                 // Method java/lang/Exception."<init>":(Ljava/lang/String;)V
      58: athrow
      59: aload         4
      61: invokevirtual #20                 // Method de/uni_koblenz/aggrimm/icp/crypto/sign/graph/NamedGraph.getName:()Ljava/lang/String;
      64: invokevirtual #21                 // Method java/lang/String.length:()I
      67: ifne          88
      70: iinc          2, 1
      73: iload_2
      74: iconst_1
      75: if_icmple     88
      78: new           #35                 // class java/lang/Exception
      81: dup
      82: ldc           #38                 // String Multiple default/nameless graphs
      84: invokespecial #37                 // Method java/lang/Exception."<init>":(Ljava/lang/String;)V
      87: athrow
      88: aload         4
      90: invokevirtual #39                 // Method de/uni_koblenz/aggrimm/icp/crypto/sign/graph/NamedGraph.isValid:()Z
      93: ifne          98
      96: iconst_0
      97: ireturn
      98: goto          12
     101: iconst_1
     102: ireturn

  public void clear();
    Code:
       0: aload_0
       1: getfield      #5                  // Field graphs:Ljava/util/LinkedList;
       4: invokevirtual #11                 // Method java/util/LinkedList.iterator:()Ljava/util/Iterator;
       7: astore_1
       8: aload_1
       9: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      14: ifeq          34
      17: aload_1
      18: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      23: checkcast     #17                 // class de/uni_koblenz/aggrimm/icp/crypto/sign/graph/NamedGraph
      26: astore_2
      27: aload_2
      28: invokevirtual #40                 // Method de/uni_koblenz/aggrimm/icp/crypto/sign/graph/NamedGraph.clear:()V
      31: goto          8
      34: return

  public void updateDepths();
    Code:
       0: aload_0
       1: getfield      #5                  // Field graphs:Ljava/util/LinkedList;
       4: invokevirtual #11                 // Method java/util/LinkedList.iterator:()Ljava/util/Iterator;
       7: astore_1
       8: aload_1
       9: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      14: ifeq          36
      17: aload_1
      18: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      23: checkcast     #17                 // class de/uni_koblenz/aggrimm/icp/crypto/sign/graph/NamedGraph
      26: astore_2
      27: aload_2
      28: iconst_0
      29: aconst_null
      30: invokevirtual #41                 // Method de/uni_koblenz/aggrimm/icp/crypto/sign/graph/NamedGraph.updateDepths:(ILde/uni_koblenz/aggrimm/icp/crypto/sign/graph/NamedGraph;)V
      33: goto          8
      36: return

  public java.lang.String toString();
    Code:
       0: ldc           #42                 // String
       2: astore_1
       3: aload_0
       4: getfield      #4                  // Field prefixes:Ljava/util/LinkedList;
       7: invokevirtual #11                 // Method java/util/LinkedList.iterator:()Ljava/util/Iterator;
      10: astore_2
      11: aload_2
      12: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      17: ifeq          52
      20: aload_2
      21: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      26: checkcast     #14                 // class de/uni_koblenz/aggrimm/icp/crypto/sign/graph/Prefix
      29: astore_3
      30: new           #43                 // class java/lang/StringBuilder
      33: dup
      34: invokespecial #44                 // Method java/lang/StringBuilder."<init>":()V
      37: aload_1
      38: invokevirtual #45                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      41: aload_3
      42: invokevirtual #46                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      45: invokevirtual #47                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      48: astore_1
      49: goto          11
      52: aload_0
      53: getfield      #5                  // Field graphs:Ljava/util/LinkedList;
      56: invokevirtual #11                 // Method java/util/LinkedList.iterator:()Ljava/util/Iterator;
      59: astore_2
      60: aload_2
      61: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      66: ifeq          104
      69: aload_2
      70: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      75: checkcast     #17                 // class de/uni_koblenz/aggrimm/icp/crypto/sign/graph/NamedGraph
      78: astore_3
      79: new           #43                 // class java/lang/StringBuilder
      82: dup
      83: invokespecial #44                 // Method java/lang/StringBuilder."<init>":()V
      86: aload_1
      87: invokevirtual #45                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      90: aload_3
      91: invokevirtual #48                 // Method de/uni_koblenz/aggrimm/icp/crypto/sign/graph/NamedGraph.toString:()Ljava/lang/String;
      94: invokevirtual #45                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      97: invokevirtual #47                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     100: astore_1
     101: goto          60
     104: aload_1
     105: areturn
}
