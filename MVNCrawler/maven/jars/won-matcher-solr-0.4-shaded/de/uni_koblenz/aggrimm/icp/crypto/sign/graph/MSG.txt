Compiled from "MSG.java"
public class de.uni_koblenz.aggrimm.icp.crypto.sign.graph.MSG {
  private java.util.ArrayList<de.uni_koblenz.aggrimm.icp.crypto.sign.graph.Triple> triples;

  private java.math.BigInteger hash;

  private java.lang.String signature;

  private java.lang.String certificate;

  public de.uni_koblenz.aggrimm.icp.crypto.sign.graph.MSG();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/ArrayList
       8: dup
       9: invokespecial #3                  // Method java/util/ArrayList."<init>":()V
      12: putfield      #4                  // Field triples:Ljava/util/ArrayList;
      15: return

  public de.uni_koblenz.aggrimm.icp.crypto.sign.graph.MSG(de.uni_koblenz.aggrimm.icp.crypto.sign.graph.Triple);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/ArrayList
       8: dup
       9: iconst_1
      10: invokespecial #5                  // Method java/util/ArrayList."<init>":(I)V
      13: putfield      #4                  // Field triples:Ljava/util/ArrayList;
      16: aload_0
      17: getfield      #4                  // Field triples:Ljava/util/ArrayList;
      20: aload_1
      21: invokevirtual #6                  // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
      24: pop
      25: return

  public de.uni_koblenz.aggrimm.icp.crypto.sign.graph.MSG(java.util.ArrayList<de.uni_koblenz.aggrimm.icp.crypto.sign.graph.Triple>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #4                  // Field triples:Ljava/util/ArrayList;
       9: return

  public java.util.ArrayList<de.uni_koblenz.aggrimm.icp.crypto.sign.graph.Triple> getTriples();
    Code:
       0: aload_0
       1: getfield      #4                  // Field triples:Ljava/util/ArrayList;
       4: areturn

  public void setTriples(java.util.ArrayList<de.uni_koblenz.aggrimm.icp.crypto.sign.graph.Triple>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #4                  // Field triples:Ljava/util/ArrayList;
       5: return

  public java.math.BigInteger getHash();
    Code:
       0: aload_0
       1: getfield      #7                  // Field hash:Ljava/math/BigInteger;
       4: areturn

  public void setHash(java.math.BigInteger);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #7                  // Field hash:Ljava/math/BigInteger;
       5: return

  public java.lang.String getSignature();
    Code:
       0: aload_0
       1: getfield      #8                  // Field signature:Ljava/lang/String;
       4: areturn

  public void setSignature(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #8                  // Field signature:Ljava/lang/String;
       5: return

  public java.lang.String getCertificate();
    Code:
       0: aload_0
       1: getfield      #9                  // Field certificate:Ljava/lang/String;
       4: areturn

  public void setCertificate(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #9                  // Field certificate:Ljava/lang/String;
       5: return

  public void addTriple(de.uni_koblenz.aggrimm.icp.crypto.sign.graph.Triple);
    Code:
       0: aload_0
       1: getfield      #4                  // Field triples:Ljava/util/ArrayList;
       4: aload_1
       5: invokevirtual #6                  // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
       8: pop
       9: return

  public void addTriples(java.util.ArrayList<de.uni_koblenz.aggrimm.icp.crypto.sign.graph.Triple>);
    Code:
       0: aload_0
       1: getfield      #4                  // Field triples:Ljava/util/ArrayList;
       4: aload_1
       5: invokevirtual #10                 // Method java/util/ArrayList.addAll:(Ljava/util/Collection;)Z
       8: pop
       9: return

  public boolean containsTriple(java.lang.String[]);
    Code:
       0: aload_0
       1: getfield      #4                  // Field triples:Ljava/util/ArrayList;
       4: invokevirtual #11                 // Method java/util/ArrayList.iterator:()Ljava/util/Iterator;
       7: astore_2
       8: aload_2
       9: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      14: ifeq          40
      17: aload_2
      18: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      23: checkcast     #14                 // class de/uni_koblenz/aggrimm/icp/crypto/sign/graph/Triple
      26: astore_3
      27: aload_3
      28: aload_1
      29: invokevirtual #15                 // Method de/uni_koblenz/aggrimm/icp/crypto/sign/graph/Triple.isSPOequal:([Ljava/lang/String;)Z
      32: ifeq          37
      35: iconst_1
      36: ireturn
      37: goto          8
      40: iconst_0
      41: ireturn

  public java.lang.String toString();
    Code:
       0: ldc           #16                 // String
       2: astore_1
       3: aload_0
       4: getfield      #4                  // Field triples:Ljava/util/ArrayList;
       7: invokevirtual #11                 // Method java/util/ArrayList.iterator:()Ljava/util/Iterator;
      10: astore_2
      11: aload_2
      12: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      17: ifeq          57
      20: aload_2
      21: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      26: checkcast     #14                 // class de/uni_koblenz/aggrimm/icp/crypto/sign/graph/Triple
      29: astore_3
      30: new           #17                 // class java/lang/StringBuilder
      33: dup
      34: invokespecial #18                 // Method java/lang/StringBuilder."<init>":()V
      37: aload_1
      38: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      41: aload_3
      42: invokevirtual #20                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      45: ldc           #21                 // String \n
      47: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      50: invokevirtual #22                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      53: astore_1
      54: goto          11
      57: aload_1
      58: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: iconst_0
       5: ireturn
       6: aload_0
       7: aload_1
       8: if_acmpne     13
      11: iconst_1
      12: ireturn
      13: aload_0
      14: invokevirtual #23                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      17: aload_1
      18: invokevirtual #23                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      21: if_acmpeq     26
      24: iconst_0
      25: ireturn
      26: aload_0
      27: invokevirtual #24                 // Method getTriples:()Ljava/util/ArrayList;
      30: aload_1
      31: checkcast     #25                 // class de/uni_koblenz/aggrimm/icp/crypto/sign/graph/MSG
      34: invokevirtual #24                 // Method getTriples:()Ljava/util/ArrayList;
      37: invokevirtual #26                 // Method java/util/ArrayList.equals:(Ljava/lang/Object;)Z
      40: ireturn
}
