Compiled from "KeyPairAliasDerivationStrategyFactory.java"
public class won.cryptography.keymanagement.KeyPairAliasDerivationStrategyFactory {
  private static final org.slf4j.Logger logger;

  private java.lang.String predefinedAlias;

  public won.cryptography.keymanagement.KeyPairAliasDerivationStrategyFactory();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aconst_null
       6: putfield      #2                  // Field predefinedAlias:Ljava/lang/String;
       9: return

  public won.cryptography.keymanagement.KeyPairAliasDerivationStrategy create();
    Code:
       0: aload_0
       1: getfield      #2                  // Field predefinedAlias:Ljava/lang/String;
       4: ifnull        20
       7: aload_0
       8: getfield      #2                  // Field predefinedAlias:Ljava/lang/String;
      11: invokevirtual #3                  // Method java/lang/String.trim:()Ljava/lang/String;
      14: invokevirtual #4                  // Method java/lang/String.length:()I
      17: ifne          38
      20: getstatic     #5                  // Field logger:Lorg/slf4j/Logger;
      23: ldc           #6                  // String There is no predefined alias specified for the key pairs that will be used for atoms. This causes each atom to be created with a new key pair, which is slow and may not be intended. To set the predefined alias and thus only use one key pair for all atoms, use the property key \'owner.fixedPrivateKeyAlias=your-key-alias\'
      25: invokeinterface #7,  2            // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;)V
      30: new           #8                  // class won/cryptography/keymanagement/AtomUriAsAliasStrategy
      33: dup
      34: invokespecial #9                  // Method won/cryptography/keymanagement/AtomUriAsAliasStrategy."<init>":()V
      37: areturn
      38: getstatic     #5                  // Field logger:Lorg/slf4j/Logger;
      41: ldc           #10                 // String There is a predefined alias specified for the key pair that will be used for atoms. This is fast, but each atom created will have the same public key, which might be a privacy risk and may not be intended. To remove the predefined alias and thus use a new key pair for each atom, set the property key \'owner.fixedPrivateKeyAlias=\' (i.e., set it to an emptyv alue )
      43: invokeinterface #7,  2            // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;)V
      48: new           #11                 // class won/cryptography/keymanagement/PredefinedAliasStrategy
      51: dup
      52: aload_0
      53: getfield      #2                  // Field predefinedAlias:Ljava/lang/String;
      56: invokespecial #12                 // Method won/cryptography/keymanagement/PredefinedAliasStrategy."<init>":(Ljava/lang/String;)V
      59: areturn

  public void setPredefinedAlias(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2                  // Field predefinedAlias:Ljava/lang/String;
       5: return

  static {};
    Code:
       0: invokestatic  #13                 // Method java/lang/invoke/MethodHandles.lookup:()Ljava/lang/invoke/MethodHandles$Lookup;
       3: invokevirtual #14                 // Method java/lang/invoke/MethodHandles$Lookup.lookupClass:()Ljava/lang/Class;
       6: invokestatic  #15                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       9: putstatic     #5                  // Field logger:Lorg/slf4j/Logger;
      12: return
}
