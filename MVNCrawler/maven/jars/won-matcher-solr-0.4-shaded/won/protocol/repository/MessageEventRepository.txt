Compiled from "MessageEventRepository.java"
public interface won.protocol.repository.MessageEventRepository extends won.protocol.repository.WonRepository<won.protocol.model.MessageEventPlaceholder> {
  public abstract won.protocol.model.MessageEventPlaceholder findOneByMessageURI(java.net.URI);

  public abstract boolean isReadPermittedForWebID(java.net.URI, java.net.URI);

  public abstract java.util.List<won.protocol.model.unread.UnreadMessageInfoForConnection> getUnreadInfoForAtom(java.net.URI, java.util.Collection<java.net.URI>);

  public abstract void lockAtomAndMessageContainerByContainedMessageForUpdate(java.net.URI);

  public abstract void lockConnectionAndMessageContainerByContainedMessageForUpdate(java.net.URI);

  public abstract won.protocol.model.MessageEventPlaceholder findOneByMessageURIforUpdate(java.net.URI);

  public abstract java.util.List<won.protocol.model.MessageEventPlaceholder> findByParentURI(java.net.URI);

  public abstract java.util.List<won.protocol.model.MessageEventPlaceholder> findByParentURIAndMessageTypeForUpdate(java.net.URI, won.protocol.message.WonMessageType);

  public abstract long countByParentURIAndMessageType(java.net.URI, won.protocol.message.WonMessageType);

  public abstract java.util.List<won.protocol.model.MessageEventPlaceholder> findByParentURIAndMessageType(java.net.URI, won.protocol.message.WonMessageType);

  public abstract won.protocol.model.MessageEventPlaceholder findNewestByParentURIforUpdate(java.net.URI);

  public abstract won.protocol.model.MessageEventPlaceholder findNewestByParentURI(java.net.URI);

  public abstract won.protocol.model.MessageEventPlaceholder findOldestByParentURIforUpdate(java.net.URI);

  public abstract java.util.List<won.protocol.model.MessageEventPlaceholder> findByParentURIAndNotReferencedByOtherMessageForUpdate(java.net.URI);

  public abstract java.util.List<won.protocol.model.MessageEventPlaceholder> findByParentURIAndNotReferencedByOtherMessage(java.net.URI);

  public abstract org.springframework.data.domain.Slice<won.protocol.model.MessageEventPlaceholder> findByParentURI(java.net.URI, org.springframework.data.domain.Pageable);

  public abstract org.springframework.data.domain.Slice<won.protocol.model.MessageEventPlaceholder> findByParentURIFetchDatasetEagerly(java.net.URI, org.springframework.data.domain.Pageable);

  public abstract org.springframework.data.domain.Slice<java.net.URI> getMessageURIsByParentURI(java.net.URI, won.protocol.message.WonMessageType, org.springframework.data.domain.Pageable);

  public abstract org.springframework.data.domain.Slice<won.protocol.model.MessageEventPlaceholder> findByParentURIAndType(java.net.URI, won.protocol.message.WonMessageType, org.springframework.data.domain.Pageable);

  public abstract org.springframework.data.domain.Slice<won.protocol.model.MessageEventPlaceholder> findByParentURIAndTypeFetchDatasetEagerly(java.net.URI, won.protocol.message.WonMessageType, org.springframework.data.domain.Pageable);

  public abstract org.springframework.data.domain.Slice<java.net.URI> getMessageURIsByParentURIBefore(java.net.URI, java.util.Date, org.springframework.data.domain.Pageable);

  public abstract org.springframework.data.domain.Slice<won.protocol.model.MessageEventPlaceholder> findByParentURIBefore(java.net.URI, java.util.Date, org.springframework.data.domain.Pageable);

  public abstract org.springframework.data.domain.Slice<won.protocol.model.MessageEventPlaceholder> findByParentURIBeforeFetchDatasetEagerly(java.net.URI, java.util.Date, org.springframework.data.domain.Pageable);

  public abstract org.springframework.data.domain.Slice<won.protocol.model.MessageEventPlaceholder> findByParentURIBeforeFetchDatasetEagerly(java.net.URI, java.net.URI, org.springframework.data.domain.Pageable);

  public abstract org.springframework.data.domain.Slice<java.net.URI> getMessageURIsByParentURIBefore(java.net.URI, java.util.Date, won.protocol.message.WonMessageType, org.springframework.data.domain.Pageable);

  public abstract org.springframework.data.domain.Slice<won.protocol.model.MessageEventPlaceholder> findByParentURIAndTypeBefore(java.net.URI, java.util.Date, won.protocol.message.WonMessageType, org.springframework.data.domain.Pageable);

  public abstract org.springframework.data.domain.Slice<won.protocol.model.MessageEventPlaceholder> findByParentURIAndTypeBeforeFetchDatasetEagerly(java.net.URI, java.util.Date, won.protocol.message.WonMessageType, org.springframework.data.domain.Pageable);

  public abstract org.springframework.data.domain.Slice<won.protocol.model.MessageEventPlaceholder> findByParentURIAndTypeBeforeFetchDatasetEagerly(java.net.URI, java.net.URI, won.protocol.message.WonMessageType, org.springframework.data.domain.Pageable);

  public abstract org.springframework.data.domain.Slice<java.net.URI> getMessageURIsByParentURIAfter(java.net.URI, java.util.Date, org.springframework.data.domain.Pageable);

  public abstract org.springframework.data.domain.Slice<won.protocol.model.MessageEventPlaceholder> findByParentURIAfter(java.net.URI, java.util.Date, org.springframework.data.domain.Pageable);

  public abstract org.springframework.data.domain.Slice<won.protocol.model.MessageEventPlaceholder> findByParentURIAfterFetchDatasetEagerly(java.net.URI, java.util.Date, org.springframework.data.domain.Pageable);

  public abstract org.springframework.data.domain.Slice<java.net.URI> getMessageURIsByParentURIAfter(java.net.URI, java.util.Date, won.protocol.message.WonMessageType, org.springframework.data.domain.Pageable);

  public abstract org.springframework.data.domain.Slice<won.protocol.model.MessageEventPlaceholder> findByParentURIAndTypeAfter(java.net.URI, java.util.Date, won.protocol.message.WonMessageType, org.springframework.data.domain.Pageable);

  public abstract org.springframework.data.domain.Slice<won.protocol.model.MessageEventPlaceholder> findByParentURIAndTypeAfterFetchDatasetEagerly(java.net.URI, java.util.Date, won.protocol.message.WonMessageType, org.springframework.data.domain.Pageable);

  public abstract won.protocol.model.MessageEventPlaceholder findOneByCorrespondingRemoteMessageURI(java.net.URI);

  public abstract java.util.Date findMaxActivityDateOfParentAtTime(java.net.URI, java.util.Date);

  public abstract java.util.Date findMaxActivityDateOfParentAtTime(java.net.URI, won.protocol.message.WonMessageType, java.util.Date);

  public abstract boolean existEarlierMessageWithSameInnermostMessageURIAndRecipientAtomURI(java.net.URI);

  public abstract boolean isReceivedSameInnermostMessageFromSender(java.net.URI, java.net.URI);

  public abstract void deleteByParentURI(java.net.URI);
}
