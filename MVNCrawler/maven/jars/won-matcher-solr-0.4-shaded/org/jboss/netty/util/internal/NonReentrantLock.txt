Compiled from "NonReentrantLock.java"
public final class org.jboss.netty.util.internal.NonReentrantLock extends java.util.concurrent.locks.AbstractQueuedSynchronizer implements java.util.concurrent.locks.Lock {
  private static final long serialVersionUID;

  private java.lang.Thread owner;

  public org.jboss.netty.util.internal.NonReentrantLock();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/util/concurrent/locks/AbstractQueuedSynchronizer."<init>":()V
       4: return

  public void lock();
    Code:
       0: aload_0
       1: iconst_1
       2: invokevirtual #2                  // Method acquire:(I)V
       5: return

  public void lockInterruptibly() throws java.lang.InterruptedException;
    Code:
       0: aload_0
       1: iconst_1
       2: invokevirtual #3                  // Method acquireInterruptibly:(I)V
       5: return

  public boolean tryLock();
    Code:
       0: aload_0
       1: iconst_1
       2: invokevirtual #4                  // Method tryAcquire:(I)Z
       5: ireturn

  public boolean tryLock(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException;
    Code:
       0: aload_0
       1: iconst_1
       2: aload_3
       3: lload_1
       4: invokevirtual #5                  // Method java/util/concurrent/TimeUnit.toNanos:(J)J
       7: invokevirtual #6                  // Method tryAcquireNanos:(IJ)Z
      10: ireturn

  public void unlock();
    Code:
       0: aload_0
       1: iconst_1
       2: invokevirtual #7                  // Method release:(I)Z
       5: pop
       6: return

  public boolean isHeldByCurrentThread();
    Code:
       0: aload_0
       1: invokevirtual #8                  // Method isHeldExclusively:()Z
       4: ireturn

  public java.util.concurrent.locks.Condition newCondition();
    Code:
       0: new           #9                  // class java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject
       3: dup
       4: aload_0
       5: invokespecial #10                 // Method java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject."<init>":(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer;)V
       8: areturn

  protected boolean tryAcquire(int);
    Code:
       0: aload_0
       1: iconst_0
       2: iconst_1
       3: invokevirtual #11                 // Method compareAndSetState:(II)Z
       6: ifeq          18
       9: aload_0
      10: invokestatic  #12                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      13: putfield      #13                 // Field owner:Ljava/lang/Thread;
      16: iconst_1
      17: ireturn
      18: iconst_0
      19: ireturn

  protected boolean tryRelease(int);
    Code:
       0: invokestatic  #12                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
       3: aload_0
       4: getfield      #13                 // Field owner:Ljava/lang/Thread;
       7: if_acmpeq     18
      10: new           #14                 // class java/lang/IllegalMonitorStateException
      13: dup
      14: invokespecial #15                 // Method java/lang/IllegalMonitorStateException."<init>":()V
      17: athrow
      18: aload_0
      19: aconst_null
      20: putfield      #13                 // Field owner:Ljava/lang/Thread;
      23: aload_0
      24: iconst_0
      25: invokevirtual #16                 // Method setState:(I)V
      28: iconst_1
      29: ireturn

  protected boolean isHeldExclusively();
    Code:
       0: aload_0
       1: invokevirtual #17                 // Method getState:()I
       4: ifeq          21
       7: aload_0
       8: getfield      #13                 // Field owner:Ljava/lang/Thread;
      11: invokestatic  #12                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      14: if_acmpne     21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: ireturn
}
