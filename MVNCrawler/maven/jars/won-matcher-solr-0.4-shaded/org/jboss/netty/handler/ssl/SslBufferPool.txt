Compiled from "SslBufferPool.java"
public class org.jboss.netty.handler.ssl.SslBufferPool {
  private static final int MAX_PACKET_SIZE_ALIGNED;

  private static final int DEFAULT_POOL_SIZE;

  private final java.nio.ByteBuffer preallocated;

  private final java.util.concurrent.BlockingQueue<java.nio.ByteBuffer> pool;

  private final int maxBufferCount;

  private final boolean allocateDirect;

  private final java.util.concurrent.atomic.AtomicInteger numAllocations;

  public org.jboss.netty.handler.ssl.SslBufferPool();
    Code:
       0: aload_0
       1: ldc           #1                  // int 19267584
       3: invokespecial #2                  // Method "<init>":(I)V
       6: return

  public org.jboss.netty.handler.ssl.SslBufferPool(boolean, boolean);
    Code:
       0: aload_0
       1: ldc           #1                  // int 19267584
       3: iload_1
       4: iload_2
       5: invokespecial #3                  // Method "<init>":(IZZ)V
       8: return

  public org.jboss.netty.handler.ssl.SslBufferPool(int);
    Code:
       0: aload_0
       1: iload_1
       2: iconst_0
       3: iconst_0
       4: invokespecial #3                  // Method "<init>":(IZZ)V
       7: return

  public org.jboss.netty.handler.ssl.SslBufferPool(int, boolean, boolean);
    Code:
       0: aload_0
       1: invokespecial #4                  // Method java/lang/Object."<init>":()V
       4: iload_1
       5: ifgt          35
       8: new           #5                  // class java/lang/IllegalArgumentException
      11: dup
      12: new           #6                  // class java/lang/StringBuilder
      15: dup
      16: invokespecial #7                  // Method java/lang/StringBuilder."<init>":()V
      19: ldc           #8                  // String maxPoolSize:
      21: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: iload_1
      25: invokevirtual #10                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      28: invokevirtual #11                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      31: invokespecial #12                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      34: athrow
      35: iload_1
      36: sipush        18816
      39: idiv
      40: istore        4
      42: iload_1
      43: sipush        18816
      46: irem
      47: ifeq          53
      50: iinc          4, 1
      53: aload_0
      54: iload         4
      56: putfield      #13                 // Field maxBufferCount:I
      59: aload_0
      60: iload_3
      61: putfield      #14                 // Field allocateDirect:Z
      64: aload_0
      65: new           #15                 // class java/util/concurrent/ArrayBlockingQueue
      68: dup
      69: iload         4
      71: invokespecial #16                 // Method java/util/concurrent/ArrayBlockingQueue."<init>":(I)V
      74: putfield      #17                 // Field pool:Ljava/util/concurrent/BlockingQueue;
      77: iload_2
      78: ifeq          166
      81: aload_0
      82: aload_0
      83: iload         4
      85: sipush        18816
      88: imul
      89: invokespecial #18                 // Method allocate:(I)Ljava/nio/ByteBuffer;
      92: putfield      #19                 // Field preallocated:Ljava/nio/ByteBuffer;
      95: aload_0
      96: aconst_null
      97: putfield      #20                 // Field numAllocations:Ljava/util/concurrent/atomic/AtomicInteger;
     100: iconst_0
     101: istore        5
     103: iload         5
     105: iload         4
     107: if_icmpge     163
     110: iload         5
     112: sipush        18816
     115: imul
     116: istore        6
     118: aload_0
     119: getfield      #19                 // Field preallocated:Ljava/nio/ByteBuffer;
     122: invokevirtual #21                 // Method java/nio/ByteBuffer.clear:()Ljava/nio/Buffer;
     125: iload         6
     127: invokevirtual #22                 // Method java/nio/Buffer.position:(I)Ljava/nio/Buffer;
     130: iload         6
     132: sipush        18816
     135: iadd
     136: invokevirtual #23                 // Method java/nio/Buffer.limit:(I)Ljava/nio/Buffer;
     139: pop
     140: aload_0
     141: getfield      #17                 // Field pool:Ljava/util/concurrent/BlockingQueue;
     144: aload_0
     145: getfield      #19                 // Field preallocated:Ljava/nio/ByteBuffer;
     148: invokevirtual #24                 // Method java/nio/ByteBuffer.slice:()Ljava/nio/ByteBuffer;
     151: invokeinterface #25,  2           // InterfaceMethod java/util/concurrent/BlockingQueue.add:(Ljava/lang/Object;)Z
     156: pop
     157: iinc          5, 1
     160: goto          103
     163: goto          182
     166: aload_0
     167: aconst_null
     168: putfield      #19                 // Field preallocated:Ljava/nio/ByteBuffer;
     171: aload_0
     172: new           #26                 // class java/util/concurrent/atomic/AtomicInteger
     175: dup
     176: invokespecial #27                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
     179: putfield      #20                 // Field numAllocations:Ljava/util/concurrent/atomic/AtomicInteger;
     182: return

  public int getMaxPoolSize();
    Code:
       0: aload_0
       1: getfield      #13                 // Field maxBufferCount:I
       4: sipush        18816
       7: imul
       8: ireturn

  public int getUnacquiredPoolSize();
    Code:
       0: aload_0
       1: getfield      #17                 // Field pool:Ljava/util/concurrent/BlockingQueue;
       4: invokeinterface #28,  1           // InterfaceMethod java/util/concurrent/BlockingQueue.size:()I
       9: sipush        18816
      12: imul
      13: ireturn

  public java.nio.ByteBuffer acquireBuffer();
    Code:
       0: aload_0
       1: getfield      #19                 // Field preallocated:Ljava/nio/ByteBuffer;
       4: ifnonnull     21
       7: aload_0
       8: getfield      #20                 // Field numAllocations:Ljava/util/concurrent/atomic/AtomicInteger;
      11: invokevirtual #29                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      14: aload_0
      15: getfield      #13                 // Field maxBufferCount:I
      18: if_icmplt     58
      21: iconst_0
      22: istore_2
      23: aload_0
      24: getfield      #17                 // Field pool:Ljava/util/concurrent/BlockingQueue;
      27: invokeinterface #30,  1           // InterfaceMethod java/util/concurrent/BlockingQueue.take:()Ljava/lang/Object;
      32: checkcast     #31                 // class java/nio/ByteBuffer
      35: astore_1
      36: goto          45
      39: astore_3
      40: iconst_1
      41: istore_2
      42: goto          23
      45: iload_2
      46: ifeq          55
      49: invokestatic  #33                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      52: invokevirtual #34                 // Method java/lang/Thread.interrupt:()V
      55: goto          91
      58: aload_0
      59: getfield      #17                 // Field pool:Ljava/util/concurrent/BlockingQueue;
      62: invokeinterface #35,  1           // InterfaceMethod java/util/concurrent/BlockingQueue.poll:()Ljava/lang/Object;
      67: checkcast     #31                 // class java/nio/ByteBuffer
      70: astore_1
      71: aload_1
      72: ifnonnull     91
      75: aload_0
      76: getfield      #20                 // Field numAllocations:Ljava/util/concurrent/atomic/AtomicInteger;
      79: invokevirtual #36                 // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
      82: pop
      83: aload_0
      84: sipush        18713
      87: invokespecial #18                 // Method allocate:(I)Ljava/nio/ByteBuffer;
      90: astore_1
      91: aload_1
      92: invokevirtual #21                 // Method java/nio/ByteBuffer.clear:()Ljava/nio/Buffer;
      95: pop
      96: aload_1
      97: areturn
    Exception table:
       from    to  target type
          23    36    39   Class java/lang/InterruptedException

  public void releaseBuffer(java.nio.ByteBuffer);
    Code:
       0: aload_0
       1: getfield      #17                 // Field pool:Ljava/util/concurrent/BlockingQueue;
       4: aload_1
       5: invokeinterface #37,  2           // InterfaceMethod java/util/concurrent/BlockingQueue.offer:(Ljava/lang/Object;)Z
      10: pop
      11: return

  private java.nio.ByteBuffer allocate(int);
    Code:
       0: aload_0
       1: getfield      #14                 // Field allocateDirect:Z
       4: ifeq          12
       7: iload_1
       8: invokestatic  #38                 // Method java/nio/ByteBuffer.allocateDirect:(I)Ljava/nio/ByteBuffer;
      11: areturn
      12: iload_1
      13: invokestatic  #39                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;
      16: areturn
}
