Compiled from "ReferenceMap.java"
abstract class org.jboss.netty.handler.codec.serialization.ReferenceMap<K, V> implements java.util.Map<K, V> {
  private final java.util.Map<K, java.lang.ref.Reference<V>> delegate;

  protected org.jboss.netty.handler.codec.serialization.ReferenceMap(java.util.Map<K, java.lang.ref.Reference<V>>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field delegate:Ljava/util/Map;
       9: return

  abstract java.lang.ref.Reference<V> fold(V);

  private V unfold(java.lang.ref.Reference<V>);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: areturn
       6: aload_1
       7: invokevirtual #3                  // Method java/lang/ref/Reference.get:()Ljava/lang/Object;
      10: areturn

  public int size();
    Code:
       0: aload_0
       1: getfield      #2                  // Field delegate:Ljava/util/Map;
       4: invokeinterface #4,  1            // InterfaceMethod java/util/Map.size:()I
       9: ireturn

  public boolean isEmpty();
    Code:
       0: aload_0
       1: getfield      #2                  // Field delegate:Ljava/util/Map;
       4: invokeinterface #5,  1            // InterfaceMethod java/util/Map.isEmpty:()Z
       9: ireturn

  public boolean containsKey(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #2                  // Field delegate:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #6,  2            // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
      10: ireturn

  public boolean containsValue(java.lang.Object);
    Code:
       0: new           #7                  // class java/lang/UnsupportedOperationException
       3: dup
       4: invokespecial #8                  // Method java/lang/UnsupportedOperationException."<init>":()V
       7: athrow

  public V get(java.lang.Object);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #2                  // Field delegate:Ljava/util/Map;
       5: aload_1
       6: invokeinterface #9,  2            // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      11: checkcast     #10                 // class java/lang/ref/Reference
      14: invokespecial #11                 // Method unfold:(Ljava/lang/ref/Reference;)Ljava/lang/Object;
      17: areturn

  public V put(K, V);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #2                  // Field delegate:Ljava/util/Map;
       5: aload_1
       6: aload_0
       7: aload_2
       8: invokevirtual #12                 // Method fold:(Ljava/lang/Object;)Ljava/lang/ref/Reference;
      11: invokeinterface #13,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      16: checkcast     #10                 // class java/lang/ref/Reference
      19: invokespecial #11                 // Method unfold:(Ljava/lang/ref/Reference;)Ljava/lang/Object;
      22: areturn

  public V remove(java.lang.Object);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #2                  // Field delegate:Ljava/util/Map;
       5: aload_1
       6: invokeinterface #14,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      11: checkcast     #10                 // class java/lang/ref/Reference
      14: invokespecial #11                 // Method unfold:(Ljava/lang/ref/Reference;)Ljava/lang/Object;
      17: areturn

  public void putAll(java.util.Map<? extends K, ? extends V>);
    Code:
       0: aload_1
       1: invokeinterface #15,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
       6: invokeinterface #16,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      11: astore_2
      12: aload_2
      13: invokeinterface #17,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      18: ifeq          60
      21: aload_2
      22: invokeinterface #18,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      27: checkcast     #19                 // class java/util/Map$Entry
      30: astore_3
      31: aload_0
      32: getfield      #2                  // Field delegate:Ljava/util/Map;
      35: aload_3
      36: invokeinterface #20,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      41: aload_0
      42: aload_3
      43: invokeinterface #21,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      48: invokevirtual #12                 // Method fold:(Ljava/lang/Object;)Ljava/lang/ref/Reference;
      51: invokeinterface #13,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      56: pop
      57: goto          12
      60: return

  public void clear();
    Code:
       0: aload_0
       1: getfield      #2                  // Field delegate:Ljava/util/Map;
       4: invokeinterface #22,  1           // InterfaceMethod java/util/Map.clear:()V
       9: return

  public java.util.Set<K> keySet();
    Code:
       0: aload_0
       1: getfield      #2                  // Field delegate:Ljava/util/Map;
       4: invokeinterface #23,  1           // InterfaceMethod java/util/Map.keySet:()Ljava/util/Set;
       9: areturn

  public java.util.Collection<V> values();
    Code:
       0: new           #7                  // class java/lang/UnsupportedOperationException
       3: dup
       4: invokespecial #8                  // Method java/lang/UnsupportedOperationException."<init>":()V
       7: athrow

  public java.util.Set<java.util.Map$Entry<K, V>> entrySet();
    Code:
       0: new           #7                  // class java/lang/UnsupportedOperationException
       3: dup
       4: invokespecial #8                  // Method java/lang/UnsupportedOperationException."<init>":()V
       7: athrow
}
