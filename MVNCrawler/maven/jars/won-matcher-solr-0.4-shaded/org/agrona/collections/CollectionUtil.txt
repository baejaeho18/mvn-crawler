Compiled from "CollectionUtil.java"
public class org.agrona.collections.CollectionUtil {
  public org.agrona.collections.CollectionUtil();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public static <K, V> V getOrDefault(java.util.Map<K, V>, K, java.util.function.Function<K, V>);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #2,  2            // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
       7: astore_3
       8: aload_3
       9: ifnonnull     29
      12: aload_2
      13: aload_1
      14: invokeinterface #3,  2            // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      19: astore_3
      20: aload_0
      21: aload_1
      22: aload_3
      23: invokeinterface #4,  3            // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      28: pop
      29: aload_3
      30: areturn

  public static <V> int sum(java.util.List<V>, java.util.function.ToIntFunction<V>);
    Code:
       0: iconst_0
       1: istore_2
       2: aload_0
       3: invokeinterface #5,  1            // InterfaceMethod java/util/List.size:()I
       8: istore_3
       9: iconst_0
      10: istore        4
      12: iload         4
      14: iload_3
      15: if_icmpge     45
      18: aload_0
      19: iload         4
      21: invokeinterface #6,  2            // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      26: astore        5
      28: iload_2
      29: aload_1
      30: aload         5
      32: invokeinterface #7,  2            // InterfaceMethod java/util/function/ToIntFunction.applyAsInt:(Ljava/lang/Object;)I
      37: iadd
      38: istore_2
      39: iinc          4, 1
      42: goto          12
      45: iload_2
      46: ireturn

  public static void validateLoadFactor(float);
    Code:
       0: fload_0
       1: fconst_0
       2: fcmpg
       3: ifle          13
       6: fload_0
       7: f2d
       8: dconst_1
       9: dcmpl
      10: iflt          23
      13: new           #8                  // class java/lang/IllegalArgumentException
      16: dup
      17: ldc           #9                  // String Load factors must be > 0.0 and < 1.0
      19: invokespecial #10                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      22: athrow
      23: return

  public static void validatePositivePowerOfTwo(int);
    Code:
       0: iload_0
       1: ifle          23
       4: iconst_1
       5: iload_0
       6: iload_0
       7: iconst_1
       8: isub
       9: iand
      10: if_icmpne     23
      13: new           #11                 // class java/lang/IllegalStateException
      16: dup
      17: ldc           #12                 // String Value must be a positive power of two
      19: invokespecial #13                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      22: athrow
      23: return
}
