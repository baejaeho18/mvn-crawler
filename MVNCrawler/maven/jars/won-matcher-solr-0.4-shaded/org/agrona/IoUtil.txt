Compiled from "IoUtil.java"
public class org.agrona.IoUtil {
  public static final int BLOCK_SIZE;

  private static final int MAP_READ_ONLY;

  private static final int MAP_READ_WRITE;

  private static final int MAP_PRIVATE;

  private static final java.lang.reflect.Method MAP_ADDRESS;

  private static final java.lang.reflect.Method UNMAP_ADDRESS;

  private static final java.lang.reflect.Method UNMAP_BUFFER;

  public org.agrona.IoUtil();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  private static java.lang.reflect.Method getFileChannelMethod(java.lang.String, java.lang.Class<?>...);
    Code:
       0: aconst_null
       1: astore_2
       2: ldc           #2                  // class sun/nio/ch/FileChannelImpl
       4: aload_0
       5: aload_1
       6: invokevirtual #3                  // Method java/lang/Class.getDeclaredMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;
       9: astore_2
      10: aload_2
      11: iconst_1
      12: invokevirtual #4                  // Method java/lang/reflect/Method.setAccessible:(Z)V
      15: goto          23
      18: astore_3
      19: aload_3
      20: invokestatic  #6                  // Method org/agrona/LangUtil.rethrowUnchecked:(Ljava/lang/Throwable;)V
      23: aload_2
      24: areturn
    Exception table:
       from    to  target type
           2    15    18   Class java/lang/NoSuchMethodException

  public static void fill(java.nio.channels.FileChannel, long, long, byte);
    Code:
       0: sipush        4096
       3: newarray       byte
       5: astore        6
       7: aload         6
       9: iload         5
      11: invokestatic  #8                  // Method java/util/Arrays.fill:([BB)V
      14: aload         6
      16: invokestatic  #9                  // Method java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;
      19: astore        7
      21: aload_0
      22: lload_1
      23: invokevirtual #10                 // Method java/nio/channels/FileChannel.position:(J)Ljava/nio/channels/FileChannel;
      26: pop
      27: lload_3
      28: ldc2_w        #11                 // long 4096l
      31: ldiv
      32: l2i
      33: istore        8
      35: lload_3
      36: ldc2_w        #11                 // long 4096l
      39: lrem
      40: l2i
      41: istore        9
      43: iconst_0
      44: istore        10
      46: iload         10
      48: iload         8
      50: if_icmpge     73
      53: aload         7
      55: iconst_0
      56: invokevirtual #13                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      59: pop
      60: aload_0
      61: aload         7
      63: invokevirtual #14                 // Method java/nio/channels/FileChannel.write:(Ljava/nio/ByteBuffer;)I
      66: pop
      67: iinc          10, 1
      70: goto          46
      73: iload         9
      75: ifle          100
      78: aload         7
      80: iconst_0
      81: invokevirtual #13                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      84: pop
      85: aload         7
      87: iload         9
      89: invokevirtual #15                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;
      92: pop
      93: aload_0
      94: aload         7
      96: invokevirtual #14                 // Method java/nio/channels/FileChannel.write:(Ljava/nio/ByteBuffer;)I
      99: pop
     100: goto          110
     103: astore        6
     105: aload         6
     107: invokestatic  #6                  // Method org/agrona/LangUtil.rethrowUnchecked:(Ljava/lang/Throwable;)V
     110: return
    Exception table:
       from    to  target type
           0   100   103   Class java/io/IOException

  public static void delete(java.io.File, boolean);
    Code:
       0: aload_0
       1: invokevirtual #17                 // Method java/io/File.isDirectory:()Z
       4: ifeq          51
       7: aload_0
       8: invokevirtual #18                 // Method java/io/File.listFiles:()[Ljava/io/File;
      11: astore_2
      12: aconst_null
      13: aload_2
      14: if_acmpeq     51
      17: aload_2
      18: astore_3
      19: aload_3
      20: arraylength
      21: istore        4
      23: iconst_0
      24: istore        5
      26: iload         5
      28: iload         4
      30: if_icmpge     51
      33: aload_3
      34: iload         5
      36: aaload
      37: astore        6
      39: aload         6
      41: iload_1
      42: invokestatic  #19                 // Method delete:(Ljava/io/File;Z)V
      45: iinc          5, 1
      48: goto          26
      51: aload_0
      52: invokevirtual #20                 // Method java/io/File.delete:()Z
      55: ifne          77
      58: iload_1
      59: ifne          77
      62: aload_0
      63: invokevirtual #21                 // Method java/io/File.toPath:()Ljava/nio/file/Path;
      66: invokestatic  #22                 // Method java/nio/file/Files.delete:(Ljava/nio/file/Path;)V
      69: goto          77
      72: astore_2
      73: aload_2
      74: invokestatic  #6                  // Method org/agrona/LangUtil.rethrowUnchecked:(Ljava/lang/Throwable;)V
      77: return
    Exception table:
       from    to  target type
          62    69    72   Class java/io/IOException

  public static void ensureDirectoryExists(java.io.File, java.lang.String);
    Code:
       0: aload_0
       1: invokevirtual #23                 // Method java/io/File.exists:()Z
       4: ifne          50
       7: aload_0
       8: invokevirtual #24                 // Method java/io/File.mkdirs:()Z
      11: ifne          50
      14: new           #25                 // class java/lang/IllegalArgumentException
      17: dup
      18: new           #26                 // class java/lang/StringBuilder
      21: dup
      22: invokespecial #27                 // Method java/lang/StringBuilder."<init>":()V
      25: ldc           #28                 // String could not create
      27: invokevirtual #29                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      30: aload_1
      31: invokevirtual #29                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      34: ldc           #30                 // String  directory:
      36: invokevirtual #29                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      39: aload_0
      40: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      43: invokevirtual #32                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      46: invokespecial #33                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      49: athrow
      50: return

  public static void ensureDirectoryIsRecreated(java.io.File, java.lang.String, java.util.function.BiConsumer<java.lang.String, java.lang.String>);
    Code:
       0: aload_0
       1: invokevirtual #23                 // Method java/io/File.exists:()Z
       4: ifeq          23
       7: aload_0
       8: iconst_0
       9: invokestatic  #19                 // Method delete:(Ljava/io/File;Z)V
      12: aload_2
      13: aload_0
      14: invokevirtual #34                 // Method java/io/File.getAbsolutePath:()Ljava/lang/String;
      17: aload_1
      18: invokeinterface #35,  3           // InterfaceMethod java/util/function/BiConsumer.accept:(Ljava/lang/Object;Ljava/lang/Object;)V
      23: aload_0
      24: invokevirtual #24                 // Method java/io/File.mkdirs:()Z
      27: ifne          66
      30: new           #25                 // class java/lang/IllegalArgumentException
      33: dup
      34: new           #26                 // class java/lang/StringBuilder
      37: dup
      38: invokespecial #27                 // Method java/lang/StringBuilder."<init>":()V
      41: ldc           #28                 // String could not create
      43: invokevirtual #29                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      46: aload_1
      47: invokevirtual #29                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      50: ldc           #30                 // String  directory:
      52: invokevirtual #29                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      55: aload_0
      56: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      59: invokevirtual #32                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      62: invokespecial #33                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      65: athrow
      66: return

  public static void deleteIfExists(java.io.File);
    Code:
       0: aload_0
       1: invokevirtual #23                 // Method java/io/File.exists:()Z
       4: ifeq          22
       7: aload_0
       8: invokevirtual #21                 // Method java/io/File.toPath:()Ljava/nio/file/Path;
      11: invokestatic  #22                 // Method java/nio/file/Files.delete:(Ljava/nio/file/Path;)V
      14: goto          22
      17: astore_1
      18: aload_1
      19: invokestatic  #6                  // Method org/agrona/LangUtil.rethrowUnchecked:(Ljava/lang/Throwable;)V
      22: return
    Exception table:
       from    to  target type
           7    14    17   Class java/io/IOException

  public static java.nio.channels.FileChannel createEmptyFile(java.io.File, long);
    Code:
       0: aload_0
       1: invokevirtual #36                 // Method java/io/File.getParentFile:()Ljava/io/File;
       4: aload_0
       5: invokevirtual #37                 // Method java/io/File.getParent:()Ljava/lang/String;
       8: invokestatic  #38                 // Method ensureDirectoryExists:(Ljava/io/File;Ljava/lang/String;)V
      11: aconst_null
      12: astore_3
      13: new           #39                 // class java/io/RandomAccessFile
      16: dup
      17: aload_0
      18: ldc           #40                 // String rw
      20: invokespecial #41                 // Method java/io/RandomAccessFile."<init>":(Ljava/io/File;Ljava/lang/String;)V
      23: astore        4
      25: aload         4
      27: lload_1
      28: invokevirtual #42                 // Method java/io/RandomAccessFile.setLength:(J)V
      31: aload         4
      33: invokevirtual #43                 // Method java/io/RandomAccessFile.getChannel:()Ljava/nio/channels/FileChannel;
      36: astore_3
      37: aload_3
      38: lconst_0
      39: lload_1
      40: iconst_0
      41: invokestatic  #44                 // Method fill:(Ljava/nio/channels/FileChannel;JJB)V
      44: goto          54
      47: astore        4
      49: aload         4
      51: invokestatic  #6                  // Method org/agrona/LangUtil.rethrowUnchecked:(Ljava/lang/Throwable;)V
      54: aload_3
      55: areturn
    Exception table:
       from    to  target type
          13    44    47   Class java/io/IOException

  public static java.nio.MappedByteBuffer mapExistingFile(java.io.File, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #45                 // Method checkFileExists:(Ljava/io/File;Ljava/lang/String;)V
       5: aconst_null
       6: astore_2
       7: new           #39                 // class java/io/RandomAccessFile
      10: dup
      11: aload_0
      12: ldc           #40                 // String rw
      14: invokespecial #41                 // Method java/io/RandomAccessFile."<init>":(Ljava/io/File;Ljava/lang/String;)V
      17: astore_3
      18: aconst_null
      19: astore        4
      21: aload_3
      22: invokevirtual #43                 // Method java/io/RandomAccessFile.getChannel:()Ljava/nio/channels/FileChannel;
      25: astore        5
      27: aconst_null
      28: astore        6
      30: aload         5
      32: getstatic     #46                 // Field java/nio/channels/FileChannel$MapMode.READ_WRITE:Ljava/nio/channels/FileChannel$MapMode;
      35: lconst_0
      36: aload         5
      38: invokevirtual #47                 // Method java/nio/channels/FileChannel.size:()J
      41: invokevirtual #48                 // Method java/nio/channels/FileChannel.map:(Ljava/nio/channels/FileChannel$MapMode;JJ)Ljava/nio/MappedByteBuffer;
      44: astore_2
      45: aload         5
      47: ifnull        132
      50: aload         6
      52: ifnull        75
      55: aload         5
      57: invokevirtual #49                 // Method java/nio/channels/FileChannel.close:()V
      60: goto          132
      63: astore        7
      65: aload         6
      67: aload         7
      69: invokevirtual #51                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
      72: goto          132
      75: aload         5
      77: invokevirtual #49                 // Method java/nio/channels/FileChannel.close:()V
      80: goto          132
      83: astore        7
      85: aload         7
      87: astore        6
      89: aload         7
      91: athrow
      92: astore        8
      94: aload         5
      96: ifnull        129
      99: aload         6
     101: ifnull        124
     104: aload         5
     106: invokevirtual #49                 // Method java/nio/channels/FileChannel.close:()V
     109: goto          129
     112: astore        9
     114: aload         6
     116: aload         9
     118: invokevirtual #51                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
     121: goto          129
     124: aload         5
     126: invokevirtual #49                 // Method java/nio/channels/FileChannel.close:()V
     129: aload         8
     131: athrow
     132: aload_3
     133: ifnull        213
     136: aload         4
     138: ifnull        160
     141: aload_3
     142: invokevirtual #52                 // Method java/io/RandomAccessFile.close:()V
     145: goto          213
     148: astore        5
     150: aload         4
     152: aload         5
     154: invokevirtual #51                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
     157: goto          213
     160: aload_3
     161: invokevirtual #52                 // Method java/io/RandomAccessFile.close:()V
     164: goto          213
     167: astore        5
     169: aload         5
     171: astore        4
     173: aload         5
     175: athrow
     176: astore        10
     178: aload_3
     179: ifnull        210
     182: aload         4
     184: ifnull        206
     187: aload_3
     188: invokevirtual #52                 // Method java/io/RandomAccessFile.close:()V
     191: goto          210
     194: astore        11
     196: aload         4
     198: aload         11
     200: invokevirtual #51                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
     203: goto          210
     206: aload_3
     207: invokevirtual #52                 // Method java/io/RandomAccessFile.close:()V
     210: aload         10
     212: athrow
     213: goto          221
     216: astore_3
     217: aload_3
     218: invokestatic  #6                  // Method org/agrona/LangUtil.rethrowUnchecked:(Ljava/lang/Throwable;)V
     221: aload_2
     222: areturn
    Exception table:
       from    to  target type
          55    60    63   Class java/lang/Throwable
          30    45    83   Class java/lang/Throwable
          30    45    92   any
         104   109   112   Class java/lang/Throwable
          83    94    92   any
         141   145   148   Class java/lang/Throwable
          21   132   167   Class java/lang/Throwable
          21   132   176   any
         187   191   194   Class java/lang/Throwable
         167   178   176   any
           7   213   216   Class java/io/IOException

  public static java.nio.MappedByteBuffer mapExistingFile(java.io.File, java.lang.String, long, long);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #45                 // Method checkFileExists:(Ljava/io/File;Ljava/lang/String;)V
       5: aconst_null
       6: astore        6
       8: new           #39                 // class java/io/RandomAccessFile
      11: dup
      12: aload_0
      13: ldc           #40                 // String rw
      15: invokespecial #41                 // Method java/io/RandomAccessFile."<init>":(Ljava/io/File;Ljava/lang/String;)V
      18: astore        7
      20: aconst_null
      21: astore        8
      23: aload         7
      25: invokevirtual #43                 // Method java/io/RandomAccessFile.getChannel:()Ljava/nio/channels/FileChannel;
      28: astore        9
      30: aconst_null
      31: astore        10
      33: aload         9
      35: getstatic     #46                 // Field java/nio/channels/FileChannel$MapMode.READ_WRITE:Ljava/nio/channels/FileChannel$MapMode;
      38: lload_2
      39: lload         4
      41: invokevirtual #48                 // Method java/nio/channels/FileChannel.map:(Ljava/nio/channels/FileChannel$MapMode;JJ)Ljava/nio/MappedByteBuffer;
      44: astore        6
      46: aload         9
      48: ifnull        133
      51: aload         10
      53: ifnull        76
      56: aload         9
      58: invokevirtual #49                 // Method java/nio/channels/FileChannel.close:()V
      61: goto          133
      64: astore        11
      66: aload         10
      68: aload         11
      70: invokevirtual #51                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
      73: goto          133
      76: aload         9
      78: invokevirtual #49                 // Method java/nio/channels/FileChannel.close:()V
      81: goto          133
      84: astore        11
      86: aload         11
      88: astore        10
      90: aload         11
      92: athrow
      93: astore        12
      95: aload         9
      97: ifnull        130
     100: aload         10
     102: ifnull        125
     105: aload         9
     107: invokevirtual #49                 // Method java/nio/channels/FileChannel.close:()V
     110: goto          130
     113: astore        13
     115: aload         10
     117: aload         13
     119: invokevirtual #51                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
     122: goto          130
     125: aload         9
     127: invokevirtual #49                 // Method java/nio/channels/FileChannel.close:()V
     130: aload         12
     132: athrow
     133: aload         7
     135: ifnull        220
     138: aload         8
     140: ifnull        163
     143: aload         7
     145: invokevirtual #52                 // Method java/io/RandomAccessFile.close:()V
     148: goto          220
     151: astore        9
     153: aload         8
     155: aload         9
     157: invokevirtual #51                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
     160: goto          220
     163: aload         7
     165: invokevirtual #52                 // Method java/io/RandomAccessFile.close:()V
     168: goto          220
     171: astore        9
     173: aload         9
     175: astore        8
     177: aload         9
     179: athrow
     180: astore        14
     182: aload         7
     184: ifnull        217
     187: aload         8
     189: ifnull        212
     192: aload         7
     194: invokevirtual #52                 // Method java/io/RandomAccessFile.close:()V
     197: goto          217
     200: astore        15
     202: aload         8
     204: aload         15
     206: invokevirtual #51                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
     209: goto          217
     212: aload         7
     214: invokevirtual #52                 // Method java/io/RandomAccessFile.close:()V
     217: aload         14
     219: athrow
     220: goto          230
     223: astore        7
     225: aload         7
     227: invokestatic  #6                  // Method org/agrona/LangUtil.rethrowUnchecked:(Ljava/lang/Throwable;)V
     230: aload         6
     232: areturn
    Exception table:
       from    to  target type
          56    61    64   Class java/lang/Throwable
          33    46    84   Class java/lang/Throwable
          33    46    93   any
         105   110   113   Class java/lang/Throwable
          84    95    93   any
         143   148   151   Class java/lang/Throwable
          23   133   171   Class java/lang/Throwable
          23   133   180   any
         192   197   200   Class java/lang/Throwable
         171   182   180   any
           8   220   223   Class java/io/IOException

  public static java.nio.MappedByteBuffer mapNewFile(java.io.File, long);
    Code:
       0: aconst_null
       1: astore_3
       2: aload_0
       3: lload_1
       4: invokestatic  #53                 // Method createEmptyFile:(Ljava/io/File;J)Ljava/nio/channels/FileChannel;
       7: astore        4
       9: aconst_null
      10: astore        5
      12: aload         4
      14: getstatic     #46                 // Field java/nio/channels/FileChannel$MapMode.READ_WRITE:Ljava/nio/channels/FileChannel$MapMode;
      17: lconst_0
      18: lload_1
      19: invokevirtual #48                 // Method java/nio/channels/FileChannel.map:(Ljava/nio/channels/FileChannel$MapMode;JJ)Ljava/nio/MappedByteBuffer;
      22: astore_3
      23: aload         4
      25: ifnull        110
      28: aload         5
      30: ifnull        53
      33: aload         4
      35: invokevirtual #49                 // Method java/nio/channels/FileChannel.close:()V
      38: goto          110
      41: astore        6
      43: aload         5
      45: aload         6
      47: invokevirtual #51                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
      50: goto          110
      53: aload         4
      55: invokevirtual #49                 // Method java/nio/channels/FileChannel.close:()V
      58: goto          110
      61: astore        6
      63: aload         6
      65: astore        5
      67: aload         6
      69: athrow
      70: astore        7
      72: aload         4
      74: ifnull        107
      77: aload         5
      79: ifnull        102
      82: aload         4
      84: invokevirtual #49                 // Method java/nio/channels/FileChannel.close:()V
      87: goto          107
      90: astore        8
      92: aload         5
      94: aload         8
      96: invokevirtual #51                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
      99: goto          107
     102: aload         4
     104: invokevirtual #49                 // Method java/nio/channels/FileChannel.close:()V
     107: aload         7
     109: athrow
     110: goto          120
     113: astore        4
     115: aload         4
     117: invokestatic  #6                  // Method org/agrona/LangUtil.rethrowUnchecked:(Ljava/lang/Throwable;)V
     120: aload_3
     121: areturn
    Exception table:
       from    to  target type
          33    38    41   Class java/lang/Throwable
          12    23    61   Class java/lang/Throwable
          12    23    70   any
          82    87    90   Class java/lang/Throwable
          61    72    70   any
           2   110   113   Class java/io/IOException

  public static void checkFileExists(java.io.File, java.lang.String);
    Code:
       0: aload_0
       1: invokevirtual #23                 // Method java/io/File.exists:()Z
       4: ifne          37
       7: ldc           #54                 // String Missing file for %1$s: %2$s
       9: iconst_2
      10: anewarray     #55                 // class java/lang/Object
      13: dup
      14: iconst_0
      15: aload_1
      16: aastore
      17: dup
      18: iconst_1
      19: aload_0
      20: invokevirtual #34                 // Method java/io/File.getAbsolutePath:()Ljava/lang/String;
      23: aastore
      24: invokestatic  #56                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      27: astore_2
      28: new           #57                 // class java/lang/IllegalStateException
      31: dup
      32: aload_2
      33: invokespecial #58                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      36: athrow
      37: return

  public static void unmap(java.nio.MappedByteBuffer);
    Code:
       0: aconst_null
       1: aload_0
       2: if_acmpeq     29
       5: getstatic     #59                 // Field UNMAP_BUFFER:Ljava/lang/reflect/Method;
       8: aconst_null
       9: iconst_1
      10: anewarray     #55                 // class java/lang/Object
      13: dup
      14: iconst_0
      15: aload_0
      16: aastore
      17: invokevirtual #60                 // Method java/lang/reflect/Method.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;
      20: pop
      21: goto          29
      24: astore_1
      25: aload_1
      26: invokestatic  #6                  // Method org/agrona/LangUtil.rethrowUnchecked:(Ljava/lang/Throwable;)V
      29: return
    Exception table:
       from    to  target type
           5    21    24   Class java/lang/Exception

  public static long map(java.nio.channels.FileChannel, java.nio.channels.FileChannel$MapMode, long, long);
    Code:
       0: getstatic     #62                 // Field MAP_ADDRESS:Ljava/lang/reflect/Method;
       3: aload_0
       4: iconst_3
       5: anewarray     #55                 // class java/lang/Object
       8: dup
       9: iconst_0
      10: aload_1
      11: invokestatic  #63                 // Method getMode:(Ljava/nio/channels/FileChannel$MapMode;)I
      14: invokestatic  #64                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      17: aastore
      18: dup
      19: iconst_1
      20: lload_2
      21: invokestatic  #65                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      24: aastore
      25: dup
      26: iconst_2
      27: lload         4
      29: invokestatic  #65                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      32: aastore
      33: invokevirtual #60                 // Method java/lang/reflect/Method.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;
      36: checkcast     #66                 // class java/lang/Long
      39: invokevirtual #67                 // Method java/lang/Long.longValue:()J
      42: lreturn
      43: astore        6
      45: aload         6
      47: invokestatic  #6                  // Method org/agrona/LangUtil.rethrowUnchecked:(Ljava/lang/Throwable;)V
      50: lconst_0
      51: lreturn
    Exception table:
       from    to  target type
           0    42    43   Class java/lang/IllegalAccessException
           0    42    43   Class java/lang/reflect/InvocationTargetException

  public static void unmap(java.nio.channels.FileChannel, long, long);
    Code:
       0: getstatic     #70                 // Field UNMAP_ADDRESS:Ljava/lang/reflect/Method;
       3: aload_0
       4: iconst_2
       5: anewarray     #55                 // class java/lang/Object
       8: dup
       9: iconst_0
      10: lload_1
      11: invokestatic  #65                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      14: aastore
      15: dup
      16: iconst_1
      17: lload_3
      18: invokestatic  #65                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      21: aastore
      22: invokevirtual #60                 // Method java/lang/reflect/Method.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;
      25: pop
      26: goto          36
      29: astore        5
      31: aload         5
      33: invokestatic  #6                  // Method org/agrona/LangUtil.rethrowUnchecked:(Ljava/lang/Throwable;)V
      36: return
    Exception table:
       from    to  target type
           0    26    29   Class java/lang/IllegalAccessException
           0    26    29   Class java/lang/reflect/InvocationTargetException

  private static int getMode(java.nio.channels.FileChannel$MapMode);
    Code:
       0: aload_0
       1: getstatic     #71                 // Field java/nio/channels/FileChannel$MapMode.READ_ONLY:Ljava/nio/channels/FileChannel$MapMode;
       4: if_acmpne     9
       7: iconst_0
       8: ireturn
       9: aload_0
      10: getstatic     #46                 // Field java/nio/channels/FileChannel$MapMode.READ_WRITE:Ljava/nio/channels/FileChannel$MapMode;
      13: if_acmpne     18
      16: iconst_1
      17: ireturn
      18: iconst_2
      19: ireturn

  public static void unmap(java.nio.ByteBuffer);
    Code:
       0: aload_0
       1: instanceof    #72                 // class java/nio/MappedByteBuffer
       4: ifeq          14
       7: aload_0
       8: checkcast     #72                 // class java/nio/MappedByteBuffer
      11: invokestatic  #73                 // Method unmap:(Ljava/nio/MappedByteBuffer;)V
      14: return

  public static java.lang.String tmpDirName();
    Code:
       0: ldc           #74                 // String java.io.tmpdir
       2: invokestatic  #75                 // Method java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;
       5: astore_0
       6: aload_0
       7: getstatic     #76                 // Field java/io/File.separator:Ljava/lang/String;
      10: invokevirtual #77                 // Method java/lang/String.endsWith:(Ljava/lang/String;)Z
      13: ifne          37
      16: new           #26                 // class java/lang/StringBuilder
      19: dup
      20: invokespecial #27                 // Method java/lang/StringBuilder."<init>":()V
      23: aload_0
      24: invokevirtual #29                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      27: getstatic     #76                 // Field java/io/File.separator:Ljava/lang/String;
      30: invokevirtual #29                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      33: invokevirtual #32                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      36: astore_0
      37: aload_0
      38: areturn

  static {};
    Code:
       0: ldc           #78                 // String map0
       2: iconst_3
       3: anewarray     #79                 // class java/lang/Class
       6: dup
       7: iconst_0
       8: getstatic     #80                 // Field java/lang/Integer.TYPE:Ljava/lang/Class;
      11: aastore
      12: dup
      13: iconst_1
      14: getstatic     #81                 // Field java/lang/Long.TYPE:Ljava/lang/Class;
      17: aastore
      18: dup
      19: iconst_2
      20: getstatic     #81                 // Field java/lang/Long.TYPE:Ljava/lang/Class;
      23: aastore
      24: invokestatic  #82                 // Method getFileChannelMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;
      27: putstatic     #62                 // Field MAP_ADDRESS:Ljava/lang/reflect/Method;
      30: ldc           #83                 // String unmap0
      32: iconst_2
      33: anewarray     #79                 // class java/lang/Class
      36: dup
      37: iconst_0
      38: getstatic     #81                 // Field java/lang/Long.TYPE:Ljava/lang/Class;
      41: aastore
      42: dup
      43: iconst_1
      44: getstatic     #81                 // Field java/lang/Long.TYPE:Ljava/lang/Class;
      47: aastore
      48: invokestatic  #82                 // Method getFileChannelMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;
      51: putstatic     #70                 // Field UNMAP_ADDRESS:Ljava/lang/reflect/Method;
      54: ldc           #84                 // String unmap
      56: iconst_1
      57: anewarray     #79                 // class java/lang/Class
      60: dup
      61: iconst_0
      62: ldc           #72                 // class java/nio/MappedByteBuffer
      64: aastore
      65: invokestatic  #82                 // Method getFileChannelMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;
      68: putstatic     #59                 // Field UNMAP_BUFFER:Ljava/lang/reflect/Method;
      71: return
}
