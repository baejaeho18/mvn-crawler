Compiled from "RecordBuffer.java"
public class org.agrona.concurrent.RecordBuffer {
  public static final int DID_NOT_CLAIM_RECORD;

  private static final int UNUSED;

  private static final int PENDING;

  private static final int COMMITTED;

  private static final int SIZE_OF_POSITION_FIELD;

  private static final int SIZE_OF_STATUS_FIELD;

  private static final int SIZE_OF_KEY_FIELD;

  private static final int SIZE_OF_RECORD_FRAME;

  public static final long PAUSE_TIME_NS;

  private final org.agrona.concurrent.AtomicBuffer buffer;

  private final int positionFieldOffset;

  private final int endOfPositionField;

  private final int slotSize;

  public org.agrona.concurrent.RecordBuffer(org.agrona.concurrent.AtomicBuffer, int, int);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #4                  // Field buffer:Lorg/agrona/concurrent/AtomicBuffer;
       9: aload_0
      10: iload_2
      11: putfield      #5                  // Field positionFieldOffset:I
      14: aload_0
      15: iload_2
      16: iconst_4
      17: iadd
      18: putfield      #6                  // Field endOfPositionField:I
      21: aload_0
      22: iload_3
      23: bipush        8
      25: iadd
      26: putfield      #7                  // Field slotSize:I
      29: return

  public void initialise();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #6                  // Field endOfPositionField:I
       5: invokespecial #8                  // Method movePosition:(I)I
       8: pop
       9: return

  public boolean isInitialised();
    Code:
       0: aload_0
       1: invokespecial #9                  // Method position:()I
       4: ifeq          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public void forEach(org.agrona.concurrent.RecordBuffer$RecordHandler);
    Code:
       0: aload_0
       1: getfield      #6                  // Field endOfPositionField:I
       4: istore_2
       5: aload_0
       6: invokespecial #9                  // Method position:()I
       9: istore_3
      10: iload_2
      11: iload_3
      12: if_icmpge     53
      15: aload_0
      16: iload_2
      17: invokespecial #10                 // Method statusVolatile:(I)I
      20: iconst_2
      21: if_icmpne     43
      24: aload_0
      25: iload_2
      26: invokespecial #11                 // Method key:(I)I
      29: istore        4
      31: aload_1
      32: iload         4
      34: iload_2
      35: bipush        8
      37: iadd
      38: invokeinterface #12,  3           // InterfaceMethod org/agrona/concurrent/RecordBuffer$RecordHandler.onRecord:(II)V
      43: iload_2
      44: aload_0
      45: getfield      #7                  // Field slotSize:I
      48: iadd
      49: istore_2
      50: goto          10
      53: return

  public int get(int);
    Code:
       0: aload_0
       1: getfield      #6                  // Field endOfPositionField:I
       4: istore_2
       5: aload_0
       6: invokespecial #9                  // Method position:()I
       9: istore_3
      10: iload_2
      11: iload_3
      12: if_icmpge     48
      15: aload_0
      16: iload_2
      17: invokespecial #10                 // Method statusVolatile:(I)I
      20: iconst_2
      21: if_icmpne     38
      24: iload_1
      25: aload_0
      26: iload_2
      27: invokespecial #11                 // Method key:(I)I
      30: if_icmpne     38
      33: iload_2
      34: bipush        8
      36: iadd
      37: ireturn
      38: iload_2
      39: aload_0
      40: getfield      #7                  // Field slotSize:I
      43: iadd
      44: istore_2
      45: goto          10
      48: iconst_m1
      49: ireturn

  public boolean withRecord(int, org.agrona.concurrent.RecordBuffer$RecordWriter);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #13                 // Method claimRecord:(I)I
       5: istore_3
       6: iload_3
       7: iconst_m1
       8: if_icmpne     13
      11: iconst_0
      12: ireturn
      13: aload_2
      14: iload_3
      15: invokeinterface #14,  2           // InterfaceMethod org/agrona/concurrent/RecordBuffer$RecordWriter.writeRecord:(I)V
      20: aload_0
      21: iload_3
      22: invokevirtual #15                 // Method commit:(I)V
      25: goto          38
      28: astore        4
      30: aload_0
      31: iload_3
      32: invokevirtual #15                 // Method commit:(I)V
      35: aload         4
      37: athrow
      38: iconst_1
      39: ireturn
    Exception table:
       from    to  target type
          13    20    28   any
          28    30    28   any

  public int claimRecord(int);
    Code:
       0: aload_0
       1: getfield      #6                  // Field endOfPositionField:I
       4: istore_2
       5: iload_2
       6: aload_0
       7: invokespecial #9                  // Method position:()I
      10: if_icmpge     55
      13: iload_1
      14: aload_0
      15: iload_2
      16: invokespecial #11                 // Method key:(I)I
      19: if_icmpne     45
      22: aload_0
      23: iload_2
      24: invokespecial #10                 // Method statusVolatile:(I)I
      27: iconst_1
      28: if_icmpne     33
      31: iconst_m1
      32: ireturn
      33: aload_0
      34: iload_2
      35: iconst_2
      36: iconst_1
      37: invokespecial #16                 // Method compareAndSetStatus:(III)V
      40: iload_2
      41: bipush        8
      43: iadd
      44: ireturn
      45: iload_2
      46: aload_0
      47: getfield      #7                  // Field slotSize:I
      50: iadd
      51: istore_2
      52: goto          5
      55: iload_2
      56: aload_0
      57: getfield      #7                  // Field slotSize:I
      60: iadd
      61: aload_0
      62: getfield      #4                  // Field buffer:Lorg/agrona/concurrent/AtomicBuffer;
      65: invokeinterface #17,  1           // InterfaceMethod org/agrona/concurrent/AtomicBuffer.capacity:()I
      70: if_icmple     75
      73: iconst_m1
      74: ireturn
      75: aload_0
      76: aload_0
      77: getfield      #7                  // Field slotSize:I
      80: invokespecial #8                  // Method movePosition:(I)I
      83: istore_3
      84: aload_0
      85: iload_3
      86: iconst_0
      87: iconst_1
      88: invokespecial #16                 // Method compareAndSetStatus:(III)V
      91: aload_0
      92: iload_3
      93: iload_1
      94: invokespecial #18                 // Method key:(II)V
      97: iload_3
      98: bipush        8
     100: iadd
     101: ireturn

  public void commit(int);
    Code:
       0: aload_0
       1: iload_1
       2: bipush        8
       4: isub
       5: iconst_1
       6: iconst_2
       7: invokespecial #16                 // Method compareAndSetStatus:(III)V
      10: return

  private int statusVolatile(int);
    Code:
       0: aload_0
       1: getfield      #4                  // Field buffer:Lorg/agrona/concurrent/AtomicBuffer;
       4: iload_1
       5: invokeinterface #19,  2           // InterfaceMethod org/agrona/concurrent/AtomicBuffer.getIntVolatile:(I)I
      10: ireturn

  private void compareAndSetStatus(int, int, int);
    Code:
       0: aload_0
       1: getfield      #4                  // Field buffer:Lorg/agrona/concurrent/AtomicBuffer;
       4: iload_1
       5: iload_2
       6: iload_3
       7: invokeinterface #20,  4           // InterfaceMethod org/agrona/concurrent/AtomicBuffer.compareAndSetInt:(III)Z
      12: ifne          24
      15: getstatic     #21                 // Field PAUSE_TIME_NS:J
      18: invokestatic  #22                 // Method java/util/concurrent/locks/LockSupport.parkNanos:(J)V
      21: goto          0
      24: return

  private int key(int);
    Code:
       0: aload_0
       1: getfield      #4                  // Field buffer:Lorg/agrona/concurrent/AtomicBuffer;
       4: iload_1
       5: iconst_4
       6: iadd
       7: invokeinterface #23,  2           // InterfaceMethod org/agrona/concurrent/AtomicBuffer.getInt:(I)I
      12: ireturn

  private void key(int, int);
    Code:
       0: aload_0
       1: getfield      #4                  // Field buffer:Lorg/agrona/concurrent/AtomicBuffer;
       4: iload_1
       5: iconst_4
       6: iadd
       7: iload_2
       8: invokeinterface #24,  3           // InterfaceMethod org/agrona/concurrent/AtomicBuffer.putInt:(II)V
      13: return

  private int position();
    Code:
       0: aload_0
       1: getfield      #4                  // Field buffer:Lorg/agrona/concurrent/AtomicBuffer;
       4: aload_0
       5: getfield      #5                  // Field positionFieldOffset:I
       8: invokeinterface #19,  2           // InterfaceMethod org/agrona/concurrent/AtomicBuffer.getIntVolatile:(I)I
      13: ireturn

  private int movePosition(int);
    Code:
       0: aload_0
       1: getfield      #4                  // Field buffer:Lorg/agrona/concurrent/AtomicBuffer;
       4: aload_0
       5: getfield      #5                  // Field positionFieldOffset:I
       8: iload_1
       9: invokeinterface #25,  3           // InterfaceMethod org/agrona/concurrent/AtomicBuffer.getAndAddInt:(II)I
      14: ireturn

  static {};
    Code:
       0: getstatic     #26                 // Field java/util/concurrent/TimeUnit.MICROSECONDS:Ljava/util/concurrent/TimeUnit;
       3: lconst_1
       4: invokevirtual #27                 // Method java/util/concurrent/TimeUnit.toNanos:(J)J
       7: putstatic     #21                 // Field PAUSE_TIME_NS:J
      10: return
}
