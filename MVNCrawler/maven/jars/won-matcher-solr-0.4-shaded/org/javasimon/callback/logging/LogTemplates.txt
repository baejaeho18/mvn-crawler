Compiled from "LogTemplates.java"
public class org.javasimon.callback.logging.LogTemplates {
  public org.javasimon.callback.logging.LogTemplates();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public static <C> org.javasimon.callback.logging.DisabledLogTemplate<C> disabled();
    Code:
       0: invokestatic  #2                  // Method org/javasimon/callback/logging/DisabledLogTemplate.getInstance:()Lorg/javasimon/callback/logging/DisabledLogTemplate;
       3: areturn

  public static <C> org.javasimon.callback.logging.CounterLogTemplate<C> everyNSplits(org.javasimon.callback.logging.LogTemplate<C>, int);
    Code:
       0: new           #3                  // class org/javasimon/callback/logging/CounterLogTemplate
       3: dup
       4: aload_0
       5: iload_1
       6: invokespecial #4                  // Method org/javasimon/callback/logging/CounterLogTemplate."<init>":(Lorg/javasimon/callback/logging/LogTemplate;I)V
       9: areturn

  public static <C> org.javasimon.callback.logging.PeriodicLogTemplate<C> everyNMilliseconds(org.javasimon.callback.logging.LogTemplate<C>, long);
    Code:
       0: new           #5                  // class org/javasimon/callback/logging/PeriodicLogTemplate
       3: dup
       4: aload_0
       5: lload_1
       6: invokespecial #6                  // Method org/javasimon/callback/logging/PeriodicLogTemplate."<init>":(Lorg/javasimon/callback/logging/LogTemplate;J)V
       9: areturn

  public static <C> org.javasimon.callback.logging.PeriodicLogTemplate<C> everyNSeconds(org.javasimon.callback.logging.LogTemplate<C>, long);
    Code:
       0: aload_0
       1: lload_1
       2: ldc2_w        #7                  // long 1000l
       5: lmul
       6: invokestatic  #9                  // Method everyNMilliseconds:(Lorg/javasimon/callback/logging/LogTemplate;J)Lorg/javasimon/callback/logging/PeriodicLogTemplate;
       9: areturn

  public static <C> org.javasimon.callback.logging.SLF4JLogTemplate<C> toSLF4J(java.lang.String, java.lang.String, java.lang.String);
    Code:
       0: aload_1
       1: invokevirtual #10                 // Method java/lang/String.toLowerCase:()Ljava/lang/String;
       4: astore_1
       5: ldc           #11                 // String debug
       7: aload_1
       8: invokevirtual #12                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      11: ifeq          24
      14: new           #13                 // class org/javasimon/callback/logging/SLF4JLogTemplate$Debug
      17: dup
      18: aload_0
      19: aload_2
      20: invokespecial #14                 // Method org/javasimon/callback/logging/SLF4JLogTemplate$Debug."<init>":(Ljava/lang/String;Ljava/lang/String;)V
      23: areturn
      24: ldc           #15                 // String info
      26: aload_1
      27: invokevirtual #12                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      30: ifeq          43
      33: new           #16                 // class org/javasimon/callback/logging/SLF4JLogTemplate$Info
      36: dup
      37: aload_0
      38: aload_2
      39: invokespecial #17                 // Method org/javasimon/callback/logging/SLF4JLogTemplate$Info."<init>":(Ljava/lang/String;Ljava/lang/String;)V
      42: areturn
      43: ldc           #18                 // String warn
      45: aload_1
      46: invokevirtual #12                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      49: ifeq          62
      52: new           #19                 // class org/javasimon/callback/logging/SLF4JLogTemplate$Warn
      55: dup
      56: aload_0
      57: aload_2
      58: invokespecial #20                 // Method org/javasimon/callback/logging/SLF4JLogTemplate$Warn."<init>":(Ljava/lang/String;Ljava/lang/String;)V
      61: areturn
      62: new           #21                 // class java/lang/IllegalArgumentException
      65: dup
      66: new           #22                 // class java/lang/StringBuilder
      69: dup
      70: invokespecial #23                 // Method java/lang/StringBuilder."<init>":()V
      73: ldc           #24                 // String Invalid level name
      75: invokevirtual #25                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      78: aload_1
      79: invokevirtual #25                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      82: invokevirtual #26                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      85: invokespecial #27                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      88: athrow

  public static <C> org.javasimon.callback.logging.SLF4JLogTemplate<C> toSLF4J(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: invokestatic  #28                 // Method toSLF4J:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lorg/javasimon/callback/logging/SLF4JLogTemplate;
       6: areturn

  public static <C> org.javasimon.callback.logging.JULLogTemplate<C> toJUL(java.lang.String, java.util.logging.Level);
    Code:
       0: new           #29                 // class org/javasimon/callback/logging/JULLogTemplate
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #30                 // Method org/javasimon/callback/logging/JULLogTemplate."<init>":(Ljava/lang/String;Ljava/util/logging/Level;)V
       9: areturn

  public static org.javasimon.callback.logging.SplitThresholdLogTemplate whenSplitLongerThanNanoseconds(org.javasimon.callback.logging.LogTemplate<org.javasimon.Split>, long);
    Code:
       0: new           #31                 // class org/javasimon/callback/logging/SplitThresholdLogTemplate
       3: dup
       4: aload_0
       5: lload_1
       6: invokespecial #32                 // Method org/javasimon/callback/logging/SplitThresholdLogTemplate."<init>":(Lorg/javasimon/callback/logging/LogTemplate;J)V
       9: areturn

  public static org.javasimon.callback.logging.SplitThresholdLogTemplate whenSplitLongerThanMilliseconds(org.javasimon.callback.logging.LogTemplate<org.javasimon.Split>, long);
    Code:
       0: aload_0
       1: lload_1
       2: ldc2_w        #33                 // long 1000000l
       5: lmul
       6: invokestatic  #35                 // Method whenSplitLongerThanNanoseconds:(Lorg/javasimon/callback/logging/LogTemplate;J)Lorg/javasimon/callback/logging/SplitThresholdLogTemplate;
       9: areturn
}
