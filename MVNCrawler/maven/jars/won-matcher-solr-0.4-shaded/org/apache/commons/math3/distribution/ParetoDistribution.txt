Compiled from "ParetoDistribution.java"
public class org.apache.commons.math3.distribution.ParetoDistribution extends org.apache.commons.math3.distribution.AbstractRealDistribution {
  public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY;

  private static final long serialVersionUID;

  private final double scale;

  private final double shape;

  private final double solverAbsoluteAccuracy;

  public org.apache.commons.math3.distribution.ParetoDistribution();
    Code:
       0: aload_0
       1: dconst_1
       2: dconst_1
       3: invokespecial #1                  // Method "<init>":(DD)V
       6: return

  public org.apache.commons.math3.distribution.ParetoDistribution(double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException;
    Code:
       0: aload_0
       1: dload_1
       2: dload_3
       3: ldc2_w        #2                  // double 1.0E-9d
       6: invokespecial #4                  // Method "<init>":(DDD)V
       9: return

  public org.apache.commons.math3.distribution.ParetoDistribution(double, double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException;
    Code:
       0: aload_0
       1: new           #5                  // class org/apache/commons/math3/random/Well19937c
       4: dup
       5: invokespecial #6                  // Method org/apache/commons/math3/random/Well19937c."<init>":()V
       8: dload_1
       9: dload_3
      10: dload         5
      12: invokespecial #7                  // Method "<init>":(Lorg/apache/commons/math3/random/RandomGenerator;DDD)V
      15: return

  public org.apache.commons.math3.distribution.ParetoDistribution(org.apache.commons.math3.random.RandomGenerator, double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException;
    Code:
       0: aload_0
       1: aload_1
       2: dload_2
       3: dload         4
       5: ldc2_w        #2                  // double 1.0E-9d
       8: invokespecial #7                  // Method "<init>":(Lorg/apache/commons/math3/random/RandomGenerator;DDD)V
      11: return

  public org.apache.commons.math3.distribution.ParetoDistribution(org.apache.commons.math3.random.RandomGenerator, double, double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #8                  // Method org/apache/commons/math3/distribution/AbstractRealDistribution."<init>":(Lorg/apache/commons/math3/random/RandomGenerator;)V
       5: dload_2
       6: dconst_0
       7: dcmpg
       8: ifgt          26
      11: new           #9                  // class org/apache/commons/math3/exception/NotStrictlyPositiveException
      14: dup
      15: getstatic     #10                 // Field org/apache/commons/math3/exception/util/LocalizedFormats.SCALE:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
      18: dload_2
      19: invokestatic  #11                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      22: invokespecial #12                 // Method org/apache/commons/math3/exception/NotStrictlyPositiveException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;Ljava/lang/Number;)V
      25: athrow
      26: dload         4
      28: dconst_0
      29: dcmpg
      30: ifgt          49
      33: new           #9                  // class org/apache/commons/math3/exception/NotStrictlyPositiveException
      36: dup
      37: getstatic     #13                 // Field org/apache/commons/math3/exception/util/LocalizedFormats.SHAPE:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
      40: dload         4
      42: invokestatic  #11                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      45: invokespecial #12                 // Method org/apache/commons/math3/exception/NotStrictlyPositiveException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;Ljava/lang/Number;)V
      48: athrow
      49: aload_0
      50: dload_2
      51: putfield      #14                 // Field scale:D
      54: aload_0
      55: dload         4
      57: putfield      #15                 // Field shape:D
      60: aload_0
      61: dload         6
      63: putfield      #16                 // Field solverAbsoluteAccuracy:D
      66: return

  public double getScale();
    Code:
       0: aload_0
       1: getfield      #14                 // Field scale:D
       4: dreturn

  public double getShape();
    Code:
       0: aload_0
       1: getfield      #15                 // Field shape:D
       4: dreturn

  public double density(double);
    Code:
       0: dload_1
       1: aload_0
       2: getfield      #14                 // Field scale:D
       5: dcmpg
       6: ifge          11
       9: dconst_0
      10: dreturn
      11: aload_0
      12: getfield      #14                 // Field scale:D
      15: aload_0
      16: getfield      #15                 // Field shape:D
      19: invokestatic  #17                 // Method org/apache/commons/math3/util/FastMath.pow:(DD)D
      22: dload_1
      23: aload_0
      24: getfield      #15                 // Field shape:D
      27: dconst_1
      28: dadd
      29: invokestatic  #17                 // Method org/apache/commons/math3/util/FastMath.pow:(DD)D
      32: ddiv
      33: aload_0
      34: getfield      #15                 // Field shape:D
      37: dmul
      38: dreturn

  public double logDensity(double);
    Code:
       0: dload_1
       1: aload_0
       2: getfield      #14                 // Field scale:D
       5: dcmpg
       6: ifge          13
       9: ldc2_w        #18                 // double -Infinityd
      12: dreturn
      13: aload_0
      14: getfield      #14                 // Field scale:D
      17: invokestatic  #20                 // Method org/apache/commons/math3/util/FastMath.log:(D)D
      20: aload_0
      21: getfield      #15                 // Field shape:D
      24: dmul
      25: dload_1
      26: invokestatic  #20                 // Method org/apache/commons/math3/util/FastMath.log:(D)D
      29: aload_0
      30: getfield      #15                 // Field shape:D
      33: dconst_1
      34: dadd
      35: dmul
      36: dsub
      37: aload_0
      38: getfield      #15                 // Field shape:D
      41: invokestatic  #20                 // Method org/apache/commons/math3/util/FastMath.log:(D)D
      44: dadd
      45: dreturn

  public double cumulativeProbability(double);
    Code:
       0: dload_1
       1: aload_0
       2: getfield      #14                 // Field scale:D
       5: dcmpg
       6: ifgt          11
       9: dconst_0
      10: dreturn
      11: dconst_1
      12: aload_0
      13: getfield      #14                 // Field scale:D
      16: dload_1
      17: ddiv
      18: aload_0
      19: getfield      #15                 // Field shape:D
      22: invokestatic  #17                 // Method org/apache/commons/math3/util/FastMath.pow:(DD)D
      25: dsub
      26: dreturn

  public double cumulativeProbability(double, double) throws org.apache.commons.math3.exception.NumberIsTooLargeException;
    Code:
       0: aload_0
       1: dload_1
       2: dload_3
       3: invokevirtual #21                 // Method probability:(DD)D
       6: dreturn

  protected double getSolverAbsoluteAccuracy();
    Code:
       0: aload_0
       1: getfield      #16                 // Field solverAbsoluteAccuracy:D
       4: dreturn

  public double getNumericalMean();
    Code:
       0: aload_0
       1: getfield      #15                 // Field shape:D
       4: dconst_1
       5: dcmpg
       6: ifgt          13
       9: ldc2_w        #22                 // double Infinityd
      12: dreturn
      13: aload_0
      14: getfield      #15                 // Field shape:D
      17: aload_0
      18: getfield      #14                 // Field scale:D
      21: dmul
      22: aload_0
      23: getfield      #15                 // Field shape:D
      26: dconst_1
      27: dsub
      28: ddiv
      29: dreturn

  public double getNumericalVariance();
    Code:
       0: aload_0
       1: getfield      #15                 // Field shape:D
       4: ldc2_w        #24                 // double 2.0d
       7: dcmpg
       8: ifgt          15
      11: ldc2_w        #22                 // double Infinityd
      14: dreturn
      15: aload_0
      16: getfield      #15                 // Field shape:D
      19: dconst_1
      20: dsub
      21: dstore_1
      22: aload_0
      23: getfield      #14                 // Field scale:D
      26: aload_0
      27: getfield      #14                 // Field scale:D
      30: dmul
      31: aload_0
      32: getfield      #15                 // Field shape:D
      35: dmul
      36: dload_1
      37: dload_1
      38: dmul
      39: ddiv
      40: aload_0
      41: getfield      #15                 // Field shape:D
      44: ldc2_w        #24                 // double 2.0d
      47: dsub
      48: ddiv
      49: dreturn

  public double getSupportLowerBound();
    Code:
       0: aload_0
       1: getfield      #14                 // Field scale:D
       4: dreturn

  public double getSupportUpperBound();
    Code:
       0: ldc2_w        #22                 // double Infinityd
       3: dreturn

  public boolean isSupportLowerBoundInclusive();
    Code:
       0: iconst_1
       1: ireturn

  public boolean isSupportUpperBoundInclusive();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isSupportConnected();
    Code:
       0: iconst_1
       1: ireturn

  public double sample();
    Code:
       0: aload_0
       1: getfield      #26                 // Field random:Lorg/apache/commons/math3/random/RandomGenerator;
       4: invokeinterface #27,  1           // InterfaceMethod org/apache/commons/math3/random/RandomGenerator.nextDouble:()D
       9: dstore_1
      10: aload_0
      11: getfield      #14                 // Field scale:D
      14: dload_1
      15: dconst_1
      16: aload_0
      17: getfield      #15                 // Field shape:D
      20: ddiv
      21: invokestatic  #17                 // Method org/apache/commons/math3/util/FastMath.pow:(DD)D
      24: ddiv
      25: dreturn
}
