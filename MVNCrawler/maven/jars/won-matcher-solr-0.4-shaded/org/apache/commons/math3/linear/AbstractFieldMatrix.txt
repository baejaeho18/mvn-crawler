Compiled from "AbstractFieldMatrix.java"
public abstract class org.apache.commons.math3.linear.AbstractFieldMatrix<T extends org.apache.commons.math3.FieldElement<T>> implements org.apache.commons.math3.linear.FieldMatrix<T> {
  private final org.apache.commons.math3.Field<T> field;

  protected org.apache.commons.math3.linear.AbstractFieldMatrix();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aconst_null
       6: putfield      #2                  // Field field:Lorg/apache/commons/math3/Field;
       9: return

  protected org.apache.commons.math3.linear.AbstractFieldMatrix(org.apache.commons.math3.Field<T>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field field:Lorg/apache/commons/math3/Field;
       9: return

  protected org.apache.commons.math3.linear.AbstractFieldMatrix(org.apache.commons.math3.Field<T>, int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException;
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: iload_2
       5: ifgt          23
       8: new           #3                  // class org/apache/commons/math3/exception/NotStrictlyPositiveException
      11: dup
      12: getstatic     #4                  // Field org/apache/commons/math3/exception/util/LocalizedFormats.DIMENSION:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
      15: iload_2
      16: invokestatic  #5                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      19: invokespecial #6                  // Method org/apache/commons/math3/exception/NotStrictlyPositiveException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;Ljava/lang/Number;)V
      22: athrow
      23: iload_3
      24: ifgt          42
      27: new           #3                  // class org/apache/commons/math3/exception/NotStrictlyPositiveException
      30: dup
      31: getstatic     #4                  // Field org/apache/commons/math3/exception/util/LocalizedFormats.DIMENSION:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
      34: iload_3
      35: invokestatic  #5                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      38: invokespecial #6                  // Method org/apache/commons/math3/exception/NotStrictlyPositiveException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;Ljava/lang/Number;)V
      41: athrow
      42: aload_0
      43: aload_1
      44: putfield      #2                  // Field field:Lorg/apache/commons/math3/Field;
      47: return

  protected static <T extends org.apache.commons.math3.FieldElement<T>> org.apache.commons.math3.Field<T> extractField(T[][]) throws org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.NullArgumentException;
    Code:
       0: aload_0
       1: ifnonnull     12
       4: new           #7                  // class org/apache/commons/math3/exception/NullArgumentException
       7: dup
       8: invokespecial #8                  // Method org/apache/commons/math3/exception/NullArgumentException."<init>":()V
      11: athrow
      12: aload_0
      13: arraylength
      14: ifne          28
      17: new           #9                  // class org/apache/commons/math3/exception/NoDataException
      20: dup
      21: getstatic     #10                 // Field org/apache/commons/math3/exception/util/LocalizedFormats.AT_LEAST_ONE_ROW:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
      24: invokespecial #11                 // Method org/apache/commons/math3/exception/NoDataException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;)V
      27: athrow
      28: aload_0
      29: iconst_0
      30: aaload
      31: arraylength
      32: ifne          46
      35: new           #9                  // class org/apache/commons/math3/exception/NoDataException
      38: dup
      39: getstatic     #12                 // Field org/apache/commons/math3/exception/util/LocalizedFormats.AT_LEAST_ONE_COLUMN:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
      42: invokespecial #11                 // Method org/apache/commons/math3/exception/NoDataException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;)V
      45: athrow
      46: aload_0
      47: iconst_0
      48: aaload
      49: iconst_0
      50: aaload
      51: invokeinterface #13,  1           // InterfaceMethod org/apache/commons/math3/FieldElement.getField:()Lorg/apache/commons/math3/Field;
      56: areturn

  protected static <T extends org.apache.commons.math3.FieldElement<T>> org.apache.commons.math3.Field<T> extractField(T[]) throws org.apache.commons.math3.exception.NoDataException;
    Code:
       0: aload_0
       1: arraylength
       2: ifne          16
       5: new           #9                  // class org/apache/commons/math3/exception/NoDataException
       8: dup
       9: getstatic     #10                 // Field org/apache/commons/math3/exception/util/LocalizedFormats.AT_LEAST_ONE_ROW:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
      12: invokespecial #11                 // Method org/apache/commons/math3/exception/NoDataException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;)V
      15: athrow
      16: aload_0
      17: iconst_0
      18: aaload
      19: invokeinterface #13,  1           // InterfaceMethod org/apache/commons/math3/FieldElement.getField:()Lorg/apache/commons/math3/Field;
      24: areturn

  protected static <T extends org.apache.commons.math3.FieldElement<T>> T[][] buildArray(org.apache.commons.math3.Field<T>, int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokestatic  #14                 // Method org/apache/commons/math3/util/MathArrays.buildArray:(Lorg/apache/commons/math3/Field;II)[[Ljava/lang/Object;
       6: checkcast     #15                 // class "[[Lorg/apache/commons/math3/FieldElement;"
       9: areturn

  protected static <T extends org.apache.commons.math3.FieldElement<T>> T[] buildArray(org.apache.commons.math3.Field<T>, int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #16                 // Method org/apache/commons/math3/util/MathArrays.buildArray:(Lorg/apache/commons/math3/Field;I)[Ljava/lang/Object;
       5: checkcast     #17                 // class "[Lorg/apache/commons/math3/FieldElement;"
       8: areturn

  public org.apache.commons.math3.Field<T> getField();
    Code:
       0: aload_0
       1: getfield      #2                  // Field field:Lorg/apache/commons/math3/Field;
       4: areturn

  public abstract org.apache.commons.math3.linear.FieldMatrix<T> createMatrix(int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException;

  public abstract org.apache.commons.math3.linear.FieldMatrix<T> copy();

  public org.apache.commons.math3.linear.FieldMatrix<T> add(org.apache.commons.math3.linear.FieldMatrix<T>) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #18                 // Method checkAdditionCompatible:(Lorg/apache/commons/math3/linear/FieldMatrix;)V
       5: aload_0
       6: invokevirtual #19                 // Method getRowDimension:()I
       9: istore_2
      10: aload_0
      11: invokevirtual #20                 // Method getColumnDimension:()I
      14: istore_3
      15: aload_0
      16: iload_2
      17: iload_3
      18: invokevirtual #21                 // Method createMatrix:(II)Lorg/apache/commons/math3/linear/FieldMatrix;
      21: astore        4
      23: iconst_0
      24: istore        5
      26: iload         5
      28: iload_2
      29: if_icmpge     90
      32: iconst_0
      33: istore        6
      35: iload         6
      37: iload_3
      38: if_icmpge     84
      41: aload         4
      43: iload         5
      45: iload         6
      47: aload_0
      48: iload         5
      50: iload         6
      52: invokevirtual #22                 // Method getEntry:(II)Lorg/apache/commons/math3/FieldElement;
      55: aload_1
      56: iload         5
      58: iload         6
      60: invokeinterface #23,  3           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrix.getEntry:(II)Lorg/apache/commons/math3/FieldElement;
      65: invokeinterface #24,  2           // InterfaceMethod org/apache/commons/math3/FieldElement.add:(Ljava/lang/Object;)Ljava/lang/Object;
      70: checkcast     #25                 // class org/apache/commons/math3/FieldElement
      73: invokeinterface #26,  4           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrix.setEntry:(IILorg/apache/commons/math3/FieldElement;)V
      78: iinc          6, 1
      81: goto          35
      84: iinc          5, 1
      87: goto          26
      90: aload         4
      92: areturn

  public org.apache.commons.math3.linear.FieldMatrix<T> subtract(org.apache.commons.math3.linear.FieldMatrix<T>) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #27                 // Method checkSubtractionCompatible:(Lorg/apache/commons/math3/linear/FieldMatrix;)V
       5: aload_0
       6: invokevirtual #19                 // Method getRowDimension:()I
       9: istore_2
      10: aload_0
      11: invokevirtual #20                 // Method getColumnDimension:()I
      14: istore_3
      15: aload_0
      16: iload_2
      17: iload_3
      18: invokevirtual #21                 // Method createMatrix:(II)Lorg/apache/commons/math3/linear/FieldMatrix;
      21: astore        4
      23: iconst_0
      24: istore        5
      26: iload         5
      28: iload_2
      29: if_icmpge     90
      32: iconst_0
      33: istore        6
      35: iload         6
      37: iload_3
      38: if_icmpge     84
      41: aload         4
      43: iload         5
      45: iload         6
      47: aload_0
      48: iload         5
      50: iload         6
      52: invokevirtual #22                 // Method getEntry:(II)Lorg/apache/commons/math3/FieldElement;
      55: aload_1
      56: iload         5
      58: iload         6
      60: invokeinterface #23,  3           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrix.getEntry:(II)Lorg/apache/commons/math3/FieldElement;
      65: invokeinterface #28,  2           // InterfaceMethod org/apache/commons/math3/FieldElement.subtract:(Ljava/lang/Object;)Ljava/lang/Object;
      70: checkcast     #25                 // class org/apache/commons/math3/FieldElement
      73: invokeinterface #26,  4           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrix.setEntry:(IILorg/apache/commons/math3/FieldElement;)V
      78: iinc          6, 1
      81: goto          35
      84: iinc          5, 1
      87: goto          26
      90: aload         4
      92: areturn

  public org.apache.commons.math3.linear.FieldMatrix<T> scalarAdd(T);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method getRowDimension:()I
       4: istore_2
       5: aload_0
       6: invokevirtual #20                 // Method getColumnDimension:()I
       9: istore_3
      10: aload_0
      11: iload_2
      12: iload_3
      13: invokevirtual #21                 // Method createMatrix:(II)Lorg/apache/commons/math3/linear/FieldMatrix;
      16: astore        4
      18: iconst_0
      19: istore        5
      21: iload         5
      23: iload_2
      24: if_icmpge     76
      27: iconst_0
      28: istore        6
      30: iload         6
      32: iload_3
      33: if_icmpge     70
      36: aload         4
      38: iload         5
      40: iload         6
      42: aload_0
      43: iload         5
      45: iload         6
      47: invokevirtual #22                 // Method getEntry:(II)Lorg/apache/commons/math3/FieldElement;
      50: aload_1
      51: invokeinterface #24,  2           // InterfaceMethod org/apache/commons/math3/FieldElement.add:(Ljava/lang/Object;)Ljava/lang/Object;
      56: checkcast     #25                 // class org/apache/commons/math3/FieldElement
      59: invokeinterface #26,  4           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrix.setEntry:(IILorg/apache/commons/math3/FieldElement;)V
      64: iinc          6, 1
      67: goto          30
      70: iinc          5, 1
      73: goto          21
      76: aload         4
      78: areturn

  public org.apache.commons.math3.linear.FieldMatrix<T> scalarMultiply(T);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method getRowDimension:()I
       4: istore_2
       5: aload_0
       6: invokevirtual #20                 // Method getColumnDimension:()I
       9: istore_3
      10: aload_0
      11: iload_2
      12: iload_3
      13: invokevirtual #21                 // Method createMatrix:(II)Lorg/apache/commons/math3/linear/FieldMatrix;
      16: astore        4
      18: iconst_0
      19: istore        5
      21: iload         5
      23: iload_2
      24: if_icmpge     76
      27: iconst_0
      28: istore        6
      30: iload         6
      32: iload_3
      33: if_icmpge     70
      36: aload         4
      38: iload         5
      40: iload         6
      42: aload_0
      43: iload         5
      45: iload         6
      47: invokevirtual #22                 // Method getEntry:(II)Lorg/apache/commons/math3/FieldElement;
      50: aload_1
      51: invokeinterface #29,  2           // InterfaceMethod org/apache/commons/math3/FieldElement.multiply:(Ljava/lang/Object;)Ljava/lang/Object;
      56: checkcast     #25                 // class org/apache/commons/math3/FieldElement
      59: invokeinterface #26,  4           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrix.setEntry:(IILorg/apache/commons/math3/FieldElement;)V
      64: iinc          6, 1
      67: goto          30
      70: iinc          5, 1
      73: goto          21
      76: aload         4
      78: areturn

  public org.apache.commons.math3.linear.FieldMatrix<T> multiply(org.apache.commons.math3.linear.FieldMatrix<T>) throws org.apache.commons.math3.exception.DimensionMismatchException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #30                 // Method checkMultiplicationCompatible:(Lorg/apache/commons/math3/linear/FieldMatrix;)V
       5: aload_0
       6: invokevirtual #19                 // Method getRowDimension:()I
       9: istore_2
      10: aload_1
      11: invokeinterface #31,  1           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrix.getColumnDimension:()I
      16: istore_3
      17: aload_0
      18: invokevirtual #20                 // Method getColumnDimension:()I
      21: istore        4
      23: aload_0
      24: iload_2
      25: iload_3
      26: invokevirtual #21                 // Method createMatrix:(II)Lorg/apache/commons/math3/linear/FieldMatrix;
      29: astore        5
      31: iconst_0
      32: istore        6
      34: iload         6
      36: iload_2
      37: if_icmpge     139
      40: iconst_0
      41: istore        7
      43: iload         7
      45: iload_3
      46: if_icmpge     133
      49: aload_0
      50: getfield      #2                  // Field field:Lorg/apache/commons/math3/Field;
      53: invokeinterface #32,  1           // InterfaceMethod org/apache/commons/math3/Field.getZero:()Ljava/lang/Object;
      58: checkcast     #25                 // class org/apache/commons/math3/FieldElement
      61: astore        8
      63: iconst_0
      64: istore        9
      66: iload         9
      68: iload         4
      70: if_icmpge     114
      73: aload         8
      75: aload_0
      76: iload         6
      78: iload         9
      80: invokevirtual #22                 // Method getEntry:(II)Lorg/apache/commons/math3/FieldElement;
      83: aload_1
      84: iload         9
      86: iload         7
      88: invokeinterface #23,  3           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrix.getEntry:(II)Lorg/apache/commons/math3/FieldElement;
      93: invokeinterface #29,  2           // InterfaceMethod org/apache/commons/math3/FieldElement.multiply:(Ljava/lang/Object;)Ljava/lang/Object;
      98: invokeinterface #24,  2           // InterfaceMethod org/apache/commons/math3/FieldElement.add:(Ljava/lang/Object;)Ljava/lang/Object;
     103: checkcast     #25                 // class org/apache/commons/math3/FieldElement
     106: astore        8
     108: iinc          9, 1
     111: goto          66
     114: aload         5
     116: iload         6
     118: iload         7
     120: aload         8
     122: invokeinterface #26,  4           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrix.setEntry:(IILorg/apache/commons/math3/FieldElement;)V
     127: iinc          7, 1
     130: goto          43
     133: iinc          6, 1
     136: goto          34
     139: aload         5
     141: areturn

  public org.apache.commons.math3.linear.FieldMatrix<T> preMultiply(org.apache.commons.math3.linear.FieldMatrix<T>) throws org.apache.commons.math3.exception.DimensionMismatchException;
    Code:
       0: aload_1
       1: aload_0
       2: invokeinterface #33,  2           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrix.multiply:(Lorg/apache/commons/math3/linear/FieldMatrix;)Lorg/apache/commons/math3/linear/FieldMatrix;
       7: areturn

  public org.apache.commons.math3.linear.FieldMatrix<T> power(int) throws org.apache.commons.math3.linear.NonSquareMatrixException, org.apache.commons.math3.exception.NotPositiveException;
    Code:
       0: iload_1
       1: ifge          16
       4: new           #34                 // class org/apache/commons/math3/exception/NotPositiveException
       7: dup
       8: iload_1
       9: invokestatic  #5                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      12: invokespecial #35                 // Method org/apache/commons/math3/exception/NotPositiveException."<init>":(Ljava/lang/Number;)V
      15: athrow
      16: aload_0
      17: invokevirtual #36                 // Method isSquare:()Z
      20: ifne          39
      23: new           #37                 // class org/apache/commons/math3/linear/NonSquareMatrixException
      26: dup
      27: aload_0
      28: invokevirtual #19                 // Method getRowDimension:()I
      31: aload_0
      32: invokevirtual #20                 // Method getColumnDimension:()I
      35: invokespecial #38                 // Method org/apache/commons/math3/linear/NonSquareMatrixException."<init>":(II)V
      38: athrow
      39: iload_1
      40: ifne          55
      43: aload_0
      44: invokevirtual #39                 // Method getField:()Lorg/apache/commons/math3/Field;
      47: aload_0
      48: invokevirtual #19                 // Method getRowDimension:()I
      51: invokestatic  #40                 // Method org/apache/commons/math3/linear/MatrixUtils.createFieldIdentityMatrix:(Lorg/apache/commons/math3/Field;I)Lorg/apache/commons/math3/linear/FieldMatrix;
      54: areturn
      55: iload_1
      56: iconst_1
      57: if_icmpne     65
      60: aload_0
      61: invokevirtual #41                 // Method copy:()Lorg/apache/commons/math3/linear/FieldMatrix;
      64: areturn
      65: iload_1
      66: iconst_1
      67: isub
      68: istore_2
      69: iload_2
      70: invokestatic  #42                 // Method java/lang/Integer.toBinaryString:(I)Ljava/lang/String;
      73: invokevirtual #43                 // Method java/lang/String.toCharArray:()[C
      76: astore_3
      77: new           #44                 // class java/util/ArrayList
      80: dup
      81: invokespecial #45                 // Method java/util/ArrayList."<init>":()V
      84: astore        4
      86: iconst_0
      87: istore        5
      89: iload         5
      91: aload_3
      92: arraylength
      93: if_icmpge     131
      96: aload_3
      97: iload         5
      99: caload
     100: bipush        49
     102: if_icmpne     125
     105: aload_3
     106: arraylength
     107: iload         5
     109: isub
     110: iconst_1
     111: isub
     112: istore        6
     114: aload         4
     116: iload         6
     118: invokestatic  #5                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     121: invokevirtual #46                 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
     124: pop
     125: iinc          5, 1
     128: goto          89
     131: new           #44                 // class java/util/ArrayList
     134: dup
     135: aload_3
     136: arraylength
     137: invokespecial #47                 // Method java/util/ArrayList."<init>":(I)V
     140: astore        5
     142: aload         5
     144: iconst_0
     145: aload_0
     146: invokevirtual #41                 // Method copy:()Lorg/apache/commons/math3/linear/FieldMatrix;
     149: invokevirtual #48                 // Method java/util/ArrayList.add:(ILjava/lang/Object;)V
     152: iconst_1
     153: istore        6
     155: iload         6
     157: aload_3
     158: arraylength
     159: if_icmpge     202
     162: aload         5
     164: iload         6
     166: iconst_1
     167: isub
     168: invokevirtual #49                 // Method java/util/ArrayList.get:(I)Ljava/lang/Object;
     171: checkcast     #50                 // class org/apache/commons/math3/linear/FieldMatrix
     174: astore        7
     176: aload         7
     178: aload         7
     180: invokeinterface #33,  2           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrix.multiply:(Lorg/apache/commons/math3/linear/FieldMatrix;)Lorg/apache/commons/math3/linear/FieldMatrix;
     185: astore        8
     187: aload         5
     189: iload         6
     191: aload         8
     193: invokevirtual #48                 // Method java/util/ArrayList.add:(ILjava/lang/Object;)V
     196: iinc          6, 1
     199: goto          155
     202: aload_0
     203: invokevirtual #41                 // Method copy:()Lorg/apache/commons/math3/linear/FieldMatrix;
     206: astore        6
     208: aload         4
     210: invokevirtual #51                 // Method java/util/ArrayList.iterator:()Ljava/util/Iterator;
     213: astore        7
     215: aload         7
     217: invokeinterface #52,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     222: ifeq          262
     225: aload         7
     227: invokeinterface #53,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     232: checkcast     #54                 // class java/lang/Integer
     235: astore        8
     237: aload         6
     239: aload         5
     241: aload         8
     243: invokevirtual #55                 // Method java/lang/Integer.intValue:()I
     246: invokevirtual #49                 // Method java/util/ArrayList.get:(I)Ljava/lang/Object;
     249: checkcast     #50                 // class org/apache/commons/math3/linear/FieldMatrix
     252: invokeinterface #33,  2           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrix.multiply:(Lorg/apache/commons/math3/linear/FieldMatrix;)Lorg/apache/commons/math3/linear/FieldMatrix;
     257: astore        6
     259: goto          215
     262: aload         6
     264: areturn

  public T[][] getData();
    Code:
       0: aload_0
       1: getfield      #2                  // Field field:Lorg/apache/commons/math3/Field;
       4: aload_0
       5: invokevirtual #19                 // Method getRowDimension:()I
       8: aload_0
       9: invokevirtual #20                 // Method getColumnDimension:()I
      12: invokestatic  #14                 // Method org/apache/commons/math3/util/MathArrays.buildArray:(Lorg/apache/commons/math3/Field;II)[[Ljava/lang/Object;
      15: checkcast     #15                 // class "[[Lorg/apache/commons/math3/FieldElement;"
      18: astore_1
      19: iconst_0
      20: istore_2
      21: iload_2
      22: aload_1
      23: arraylength
      24: if_icmpge     64
      27: aload_1
      28: iload_2
      29: aaload
      30: astore_3
      31: iconst_0
      32: istore        4
      34: iload         4
      36: aload_3
      37: arraylength
      38: if_icmpge     58
      41: aload_3
      42: iload         4
      44: aload_0
      45: iload_2
      46: iload         4
      48: invokevirtual #22                 // Method getEntry:(II)Lorg/apache/commons/math3/FieldElement;
      51: aastore
      52: iinc          4, 1
      55: goto          34
      58: iinc          2, 1
      61: goto          21
      64: aload_1
      65: areturn

  public org.apache.commons.math3.linear.FieldMatrix<T> getSubMatrix(int, int, int, int) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException;
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: iload_3
       4: iload         4
       6: invokevirtual #56                 // Method checkSubMatrixIndex:(IIII)V
       9: aload_0
      10: iload_2
      11: iload_1
      12: isub
      13: iconst_1
      14: iadd
      15: iload         4
      17: iload_3
      18: isub
      19: iconst_1
      20: iadd
      21: invokevirtual #21                 // Method createMatrix:(II)Lorg/apache/commons/math3/linear/FieldMatrix;
      24: astore        5
      26: iload_1
      27: istore        6
      29: iload         6
      31: iload_2
      32: if_icmpgt     80
      35: iload_3
      36: istore        7
      38: iload         7
      40: iload         4
      42: if_icmpgt     74
      45: aload         5
      47: iload         6
      49: iload_1
      50: isub
      51: iload         7
      53: iload_3
      54: isub
      55: aload_0
      56: iload         6
      58: iload         7
      60: invokevirtual #22                 // Method getEntry:(II)Lorg/apache/commons/math3/FieldElement;
      63: invokeinterface #26,  4           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrix.setEntry:(IILorg/apache/commons/math3/FieldElement;)V
      68: iinc          7, 1
      71: goto          38
      74: iinc          6, 1
      77: goto          29
      80: aload         5
      82: areturn

  public org.apache.commons.math3.linear.FieldMatrix<T> getSubMatrix(int[], int[]) throws org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.OutOfRangeException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #57                 // Method checkSubMatrixIndex:([I[I)V
       6: aload_0
       7: aload_1
       8: arraylength
       9: aload_2
      10: arraylength
      11: invokevirtual #21                 // Method createMatrix:(II)Lorg/apache/commons/math3/linear/FieldMatrix;
      14: astore_3
      15: aload_3
      16: new           #58                 // class org/apache/commons/math3/linear/AbstractFieldMatrix$1
      19: dup
      20: aload_0
      21: aload_0
      22: getfield      #2                  // Field field:Lorg/apache/commons/math3/Field;
      25: invokeinterface #32,  1           // InterfaceMethod org/apache/commons/math3/Field.getZero:()Ljava/lang/Object;
      30: checkcast     #25                 // class org/apache/commons/math3/FieldElement
      33: aload_1
      34: aload_2
      35: invokespecial #59                 // Method org/apache/commons/math3/linear/AbstractFieldMatrix$1."<init>":(Lorg/apache/commons/math3/linear/AbstractFieldMatrix;Lorg/apache/commons/math3/FieldElement;[I[I)V
      38: invokeinterface #60,  2           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrix.walkInOptimizedOrder:(Lorg/apache/commons/math3/linear/FieldMatrixChangingVisitor;)Lorg/apache/commons/math3/FieldElement;
      43: pop
      44: aload_3
      45: areturn

  public void copySubMatrix(int, int, int, int, T[][]) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException;
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: iload_3
       4: iload         4
       6: invokevirtual #56                 // Method checkSubMatrixIndex:(IIII)V
       9: iload_2
      10: iconst_1
      11: iadd
      12: iload_1
      13: isub
      14: istore        6
      16: iload         4
      18: iconst_1
      19: iadd
      20: iload_3
      21: isub
      22: istore        7
      24: aload         5
      26: arraylength
      27: iload         6
      29: if_icmplt     42
      32: aload         5
      34: iconst_0
      35: aaload
      36: arraylength
      37: iload         7
      39: if_icmpge     62
      42: new           #61                 // class org/apache/commons/math3/linear/MatrixDimensionMismatchException
      45: dup
      46: aload         5
      48: arraylength
      49: aload         5
      51: iconst_0
      52: aaload
      53: arraylength
      54: iload         6
      56: iload         7
      58: invokespecial #62                 // Method org/apache/commons/math3/linear/MatrixDimensionMismatchException."<init>":(IIII)V
      61: athrow
      62: aload_0
      63: new           #63                 // class org/apache/commons/math3/linear/AbstractFieldMatrix$2
      66: dup
      67: aload_0
      68: aload_0
      69: getfield      #2                  // Field field:Lorg/apache/commons/math3/Field;
      72: invokeinterface #32,  1           // InterfaceMethod org/apache/commons/math3/Field.getZero:()Ljava/lang/Object;
      77: checkcast     #25                 // class org/apache/commons/math3/FieldElement
      80: aload         5
      82: invokespecial #64                 // Method org/apache/commons/math3/linear/AbstractFieldMatrix$2."<init>":(Lorg/apache/commons/math3/linear/AbstractFieldMatrix;Lorg/apache/commons/math3/FieldElement;[[Lorg/apache/commons/math3/FieldElement;)V
      85: iload_1
      86: iload_2
      87: iload_3
      88: iload         4
      90: invokevirtual #65                 // Method walkInOptimizedOrder:(Lorg/apache/commons/math3/linear/FieldMatrixPreservingVisitor;IIII)Lorg/apache/commons/math3/FieldElement;
      93: pop
      94: return

  public void copySubMatrix(int[], int[], T[][]) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException, org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.OutOfRangeException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #57                 // Method checkSubMatrixIndex:([I[I)V
       6: aload_3
       7: arraylength
       8: aload_1
       9: arraylength
      10: if_icmplt     22
      13: aload_3
      14: iconst_0
      15: aaload
      16: arraylength
      17: aload_2
      18: arraylength
      19: if_icmpge     40
      22: new           #61                 // class org/apache/commons/math3/linear/MatrixDimensionMismatchException
      25: dup
      26: aload_3
      27: arraylength
      28: aload_3
      29: iconst_0
      30: aaload
      31: arraylength
      32: aload_1
      33: arraylength
      34: aload_2
      35: arraylength
      36: invokespecial #62                 // Method org/apache/commons/math3/linear/MatrixDimensionMismatchException."<init>":(IIII)V
      39: athrow
      40: iconst_0
      41: istore        4
      43: iload         4
      45: aload_1
      46: arraylength
      47: if_icmpge     95
      50: aload_3
      51: iload         4
      53: aaload
      54: astore        5
      56: iconst_0
      57: istore        6
      59: iload         6
      61: aload_2
      62: arraylength
      63: if_icmpge     89
      66: aload         5
      68: iload         6
      70: aload_0
      71: aload_1
      72: iload         4
      74: iaload
      75: aload_2
      76: iload         6
      78: iaload
      79: invokevirtual #22                 // Method getEntry:(II)Lorg/apache/commons/math3/FieldElement;
      82: aastore
      83: iinc          6, 1
      86: goto          59
      89: iinc          4, 1
      92: goto          43
      95: return

  public void setSubMatrix(T[][], int, int) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.NullArgumentException;
    Code:
       0: aload_1
       1: ifnonnull     12
       4: new           #7                  // class org/apache/commons/math3/exception/NullArgumentException
       7: dup
       8: invokespecial #8                  // Method org/apache/commons/math3/exception/NullArgumentException."<init>":()V
      11: athrow
      12: aload_1
      13: arraylength
      14: istore        4
      16: iload         4
      18: ifne          32
      21: new           #9                  // class org/apache/commons/math3/exception/NoDataException
      24: dup
      25: getstatic     #10                 // Field org/apache/commons/math3/exception/util/LocalizedFormats.AT_LEAST_ONE_ROW:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
      28: invokespecial #11                 // Method org/apache/commons/math3/exception/NoDataException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;)V
      31: athrow
      32: aload_1
      33: iconst_0
      34: aaload
      35: arraylength
      36: istore        5
      38: iload         5
      40: ifne          54
      43: new           #9                  // class org/apache/commons/math3/exception/NoDataException
      46: dup
      47: getstatic     #12                 // Field org/apache/commons/math3/exception/util/LocalizedFormats.AT_LEAST_ONE_COLUMN:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
      50: invokespecial #11                 // Method org/apache/commons/math3/exception/NoDataException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;)V
      53: athrow
      54: iconst_1
      55: istore        6
      57: iload         6
      59: iload         4
      61: if_icmpge     95
      64: aload_1
      65: iload         6
      67: aaload
      68: arraylength
      69: iload         5
      71: if_icmpeq     89
      74: new           #66                 // class org/apache/commons/math3/exception/DimensionMismatchException
      77: dup
      78: iload         5
      80: aload_1
      81: iload         6
      83: aaload
      84: arraylength
      85: invokespecial #67                 // Method org/apache/commons/math3/exception/DimensionMismatchException."<init>":(II)V
      88: athrow
      89: iinc          6, 1
      92: goto          57
      95: aload_0
      96: iload_2
      97: invokevirtual #68                 // Method checkRowIndex:(I)V
     100: aload_0
     101: iload_3
     102: invokevirtual #69                 // Method checkColumnIndex:(I)V
     105: aload_0
     106: iload         4
     108: iload_2
     109: iadd
     110: iconst_1
     111: isub
     112: invokevirtual #68                 // Method checkRowIndex:(I)V
     115: aload_0
     116: iload         5
     118: iload_3
     119: iadd
     120: iconst_1
     121: isub
     122: invokevirtual #69                 // Method checkColumnIndex:(I)V
     125: iconst_0
     126: istore        6
     128: iload         6
     130: iload         4
     132: if_icmpge     176
     135: iconst_0
     136: istore        7
     138: iload         7
     140: iload         5
     142: if_icmpge     170
     145: aload_0
     146: iload_2
     147: iload         6
     149: iadd
     150: iload_3
     151: iload         7
     153: iadd
     154: aload_1
     155: iload         6
     157: aaload
     158: iload         7
     160: aaload
     161: invokevirtual #70                 // Method setEntry:(IILorg/apache/commons/math3/FieldElement;)V
     164: iinc          7, 1
     167: goto          138
     170: iinc          6, 1
     173: goto          128
     176: return

  public org.apache.commons.math3.linear.FieldMatrix<T> getRowMatrix(int) throws org.apache.commons.math3.exception.OutOfRangeException;
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #68                 // Method checkRowIndex:(I)V
       5: aload_0
       6: invokevirtual #20                 // Method getColumnDimension:()I
       9: istore_2
      10: aload_0
      11: iconst_1
      12: iload_2
      13: invokevirtual #21                 // Method createMatrix:(II)Lorg/apache/commons/math3/linear/FieldMatrix;
      16: astore_3
      17: iconst_0
      18: istore        4
      20: iload         4
      22: iload_2
      23: if_icmpge     48
      26: aload_3
      27: iconst_0
      28: iload         4
      30: aload_0
      31: iload_1
      32: iload         4
      34: invokevirtual #22                 // Method getEntry:(II)Lorg/apache/commons/math3/FieldElement;
      37: invokeinterface #26,  4           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrix.setEntry:(IILorg/apache/commons/math3/FieldElement;)V
      42: iinc          4, 1
      45: goto          20
      48: aload_3
      49: areturn

  public void setRowMatrix(int, org.apache.commons.math3.linear.FieldMatrix<T>) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.linear.MatrixDimensionMismatchException;
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #68                 // Method checkRowIndex:(I)V
       5: aload_0
       6: invokevirtual #20                 // Method getColumnDimension:()I
       9: istore_3
      10: aload_2
      11: invokeinterface #71,  1           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrix.getRowDimension:()I
      16: iconst_1
      17: if_icmpne     30
      20: aload_2
      21: invokeinterface #31,  1           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrix.getColumnDimension:()I
      26: iload_3
      27: if_icmpeq     52
      30: new           #61                 // class org/apache/commons/math3/linear/MatrixDimensionMismatchException
      33: dup
      34: aload_2
      35: invokeinterface #71,  1           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrix.getRowDimension:()I
      40: aload_2
      41: invokeinterface #31,  1           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrix.getColumnDimension:()I
      46: iconst_1
      47: iload_3
      48: invokespecial #62                 // Method org/apache/commons/math3/linear/MatrixDimensionMismatchException."<init>":(IIII)V
      51: athrow
      52: iconst_0
      53: istore        4
      55: iload         4
      57: iload_3
      58: if_icmpge     83
      61: aload_0
      62: iload_1
      63: iload         4
      65: aload_2
      66: iconst_0
      67: iload         4
      69: invokeinterface #23,  3           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrix.getEntry:(II)Lorg/apache/commons/math3/FieldElement;
      74: invokevirtual #70                 // Method setEntry:(IILorg/apache/commons/math3/FieldElement;)V
      77: iinc          4, 1
      80: goto          55
      83: return

  public org.apache.commons.math3.linear.FieldMatrix<T> getColumnMatrix(int) throws org.apache.commons.math3.exception.OutOfRangeException;
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #69                 // Method checkColumnIndex:(I)V
       5: aload_0
       6: invokevirtual #19                 // Method getRowDimension:()I
       9: istore_2
      10: aload_0
      11: iload_2
      12: iconst_1
      13: invokevirtual #21                 // Method createMatrix:(II)Lorg/apache/commons/math3/linear/FieldMatrix;
      16: astore_3
      17: iconst_0
      18: istore        4
      20: iload         4
      22: iload_2
      23: if_icmpge     48
      26: aload_3
      27: iload         4
      29: iconst_0
      30: aload_0
      31: iload         4
      33: iload_1
      34: invokevirtual #22                 // Method getEntry:(II)Lorg/apache/commons/math3/FieldElement;
      37: invokeinterface #26,  4           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrix.setEntry:(IILorg/apache/commons/math3/FieldElement;)V
      42: iinc          4, 1
      45: goto          20
      48: aload_3
      49: areturn

  public void setColumnMatrix(int, org.apache.commons.math3.linear.FieldMatrix<T>) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.linear.MatrixDimensionMismatchException;
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #69                 // Method checkColumnIndex:(I)V
       5: aload_0
       6: invokevirtual #19                 // Method getRowDimension:()I
       9: istore_3
      10: aload_2
      11: invokeinterface #71,  1           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrix.getRowDimension:()I
      16: iload_3
      17: if_icmpne     30
      20: aload_2
      21: invokeinterface #31,  1           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrix.getColumnDimension:()I
      26: iconst_1
      27: if_icmpeq     52
      30: new           #61                 // class org/apache/commons/math3/linear/MatrixDimensionMismatchException
      33: dup
      34: aload_2
      35: invokeinterface #71,  1           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrix.getRowDimension:()I
      40: aload_2
      41: invokeinterface #31,  1           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrix.getColumnDimension:()I
      46: iload_3
      47: iconst_1
      48: invokespecial #62                 // Method org/apache/commons/math3/linear/MatrixDimensionMismatchException."<init>":(IIII)V
      51: athrow
      52: iconst_0
      53: istore        4
      55: iload         4
      57: iload_3
      58: if_icmpge     83
      61: aload_0
      62: iload         4
      64: iload_1
      65: aload_2
      66: iload         4
      68: iconst_0
      69: invokeinterface #23,  3           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrix.getEntry:(II)Lorg/apache/commons/math3/FieldElement;
      74: invokevirtual #70                 // Method setEntry:(IILorg/apache/commons/math3/FieldElement;)V
      77: iinc          4, 1
      80: goto          55
      83: return

  public org.apache.commons.math3.linear.FieldVector<T> getRowVector(int) throws org.apache.commons.math3.exception.OutOfRangeException;
    Code:
       0: new           #72                 // class org/apache/commons/math3/linear/ArrayFieldVector
       3: dup
       4: aload_0
       5: getfield      #2                  // Field field:Lorg/apache/commons/math3/Field;
       8: aload_0
       9: iload_1
      10: invokevirtual #73                 // Method getRow:(I)[Lorg/apache/commons/math3/FieldElement;
      13: iconst_0
      14: invokespecial #74                 // Method org/apache/commons/math3/linear/ArrayFieldVector."<init>":(Lorg/apache/commons/math3/Field;[Lorg/apache/commons/math3/FieldElement;Z)V
      17: areturn

  public void setRowVector(int, org.apache.commons.math3.linear.FieldVector<T>) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.linear.MatrixDimensionMismatchException;
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #68                 // Method checkRowIndex:(I)V
       5: aload_0
       6: invokevirtual #20                 // Method getColumnDimension:()I
       9: istore_3
      10: aload_2
      11: invokeinterface #75,  1           // InterfaceMethod org/apache/commons/math3/linear/FieldVector.getDimension:()I
      16: iload_3
      17: if_icmpeq     37
      20: new           #61                 // class org/apache/commons/math3/linear/MatrixDimensionMismatchException
      23: dup
      24: iconst_1
      25: aload_2
      26: invokeinterface #75,  1           // InterfaceMethod org/apache/commons/math3/linear/FieldVector.getDimension:()I
      31: iconst_1
      32: iload_3
      33: invokespecial #62                 // Method org/apache/commons/math3/linear/MatrixDimensionMismatchException."<init>":(IIII)V
      36: athrow
      37: iconst_0
      38: istore        4
      40: iload         4
      42: iload_3
      43: if_icmpge     67
      46: aload_0
      47: iload_1
      48: iload         4
      50: aload_2
      51: iload         4
      53: invokeinterface #76,  2           // InterfaceMethod org/apache/commons/math3/linear/FieldVector.getEntry:(I)Lorg/apache/commons/math3/FieldElement;
      58: invokevirtual #70                 // Method setEntry:(IILorg/apache/commons/math3/FieldElement;)V
      61: iinc          4, 1
      64: goto          40
      67: return

  public org.apache.commons.math3.linear.FieldVector<T> getColumnVector(int) throws org.apache.commons.math3.exception.OutOfRangeException;
    Code:
       0: new           #72                 // class org/apache/commons/math3/linear/ArrayFieldVector
       3: dup
       4: aload_0
       5: getfield      #2                  // Field field:Lorg/apache/commons/math3/Field;
       8: aload_0
       9: iload_1
      10: invokevirtual #77                 // Method getColumn:(I)[Lorg/apache/commons/math3/FieldElement;
      13: iconst_0
      14: invokespecial #74                 // Method org/apache/commons/math3/linear/ArrayFieldVector."<init>":(Lorg/apache/commons/math3/Field;[Lorg/apache/commons/math3/FieldElement;Z)V
      17: areturn

  public void setColumnVector(int, org.apache.commons.math3.linear.FieldVector<T>) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.linear.MatrixDimensionMismatchException;
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #69                 // Method checkColumnIndex:(I)V
       5: aload_0
       6: invokevirtual #19                 // Method getRowDimension:()I
       9: istore_3
      10: aload_2
      11: invokeinterface #75,  1           // InterfaceMethod org/apache/commons/math3/linear/FieldVector.getDimension:()I
      16: iload_3
      17: if_icmpeq     37
      20: new           #61                 // class org/apache/commons/math3/linear/MatrixDimensionMismatchException
      23: dup
      24: aload_2
      25: invokeinterface #75,  1           // InterfaceMethod org/apache/commons/math3/linear/FieldVector.getDimension:()I
      30: iconst_1
      31: iload_3
      32: iconst_1
      33: invokespecial #62                 // Method org/apache/commons/math3/linear/MatrixDimensionMismatchException."<init>":(IIII)V
      36: athrow
      37: iconst_0
      38: istore        4
      40: iload         4
      42: iload_3
      43: if_icmpge     67
      46: aload_0
      47: iload         4
      49: iload_1
      50: aload_2
      51: iload         4
      53: invokeinterface #76,  2           // InterfaceMethod org/apache/commons/math3/linear/FieldVector.getEntry:(I)Lorg/apache/commons/math3/FieldElement;
      58: invokevirtual #70                 // Method setEntry:(IILorg/apache/commons/math3/FieldElement;)V
      61: iinc          4, 1
      64: goto          40
      67: return

  public T[] getRow(int) throws org.apache.commons.math3.exception.OutOfRangeException;
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #68                 // Method checkRowIndex:(I)V
       5: aload_0
       6: invokevirtual #20                 // Method getColumnDimension:()I
       9: istore_2
      10: aload_0
      11: getfield      #2                  // Field field:Lorg/apache/commons/math3/Field;
      14: iload_2
      15: invokestatic  #16                 // Method org/apache/commons/math3/util/MathArrays.buildArray:(Lorg/apache/commons/math3/Field;I)[Ljava/lang/Object;
      18: checkcast     #17                 // class "[Lorg/apache/commons/math3/FieldElement;"
      21: astore_3
      22: iconst_0
      23: istore        4
      25: iload         4
      27: iload_2
      28: if_icmpge     48
      31: aload_3
      32: iload         4
      34: aload_0
      35: iload_1
      36: iload         4
      38: invokevirtual #22                 // Method getEntry:(II)Lorg/apache/commons/math3/FieldElement;
      41: aastore
      42: iinc          4, 1
      45: goto          25
      48: aload_3
      49: areturn

  public void setRow(int, T[]) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.linear.MatrixDimensionMismatchException;
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #68                 // Method checkRowIndex:(I)V
       5: aload_0
       6: invokevirtual #20                 // Method getColumnDimension:()I
       9: istore_3
      10: aload_2
      11: arraylength
      12: iload_3
      13: if_icmpeq     29
      16: new           #61                 // class org/apache/commons/math3/linear/MatrixDimensionMismatchException
      19: dup
      20: iconst_1
      21: aload_2
      22: arraylength
      23: iconst_1
      24: iload_3
      25: invokespecial #62                 // Method org/apache/commons/math3/linear/MatrixDimensionMismatchException."<init>":(IIII)V
      28: athrow
      29: iconst_0
      30: istore        4
      32: iload         4
      34: iload_3
      35: if_icmpge     55
      38: aload_0
      39: iload_1
      40: iload         4
      42: aload_2
      43: iload         4
      45: aaload
      46: invokevirtual #70                 // Method setEntry:(IILorg/apache/commons/math3/FieldElement;)V
      49: iinc          4, 1
      52: goto          32
      55: return

  public T[] getColumn(int) throws org.apache.commons.math3.exception.OutOfRangeException;
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #69                 // Method checkColumnIndex:(I)V
       5: aload_0
       6: invokevirtual #19                 // Method getRowDimension:()I
       9: istore_2
      10: aload_0
      11: getfield      #2                  // Field field:Lorg/apache/commons/math3/Field;
      14: iload_2
      15: invokestatic  #16                 // Method org/apache/commons/math3/util/MathArrays.buildArray:(Lorg/apache/commons/math3/Field;I)[Ljava/lang/Object;
      18: checkcast     #17                 // class "[Lorg/apache/commons/math3/FieldElement;"
      21: astore_3
      22: iconst_0
      23: istore        4
      25: iload         4
      27: iload_2
      28: if_icmpge     48
      31: aload_3
      32: iload         4
      34: aload_0
      35: iload         4
      37: iload_1
      38: invokevirtual #22                 // Method getEntry:(II)Lorg/apache/commons/math3/FieldElement;
      41: aastore
      42: iinc          4, 1
      45: goto          25
      48: aload_3
      49: areturn

  public void setColumn(int, T[]) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.linear.MatrixDimensionMismatchException;
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #69                 // Method checkColumnIndex:(I)V
       5: aload_0
       6: invokevirtual #19                 // Method getRowDimension:()I
       9: istore_3
      10: aload_2
      11: arraylength
      12: iload_3
      13: if_icmpeq     29
      16: new           #61                 // class org/apache/commons/math3/linear/MatrixDimensionMismatchException
      19: dup
      20: aload_2
      21: arraylength
      22: iconst_1
      23: iload_3
      24: iconst_1
      25: invokespecial #62                 // Method org/apache/commons/math3/linear/MatrixDimensionMismatchException."<init>":(IIII)V
      28: athrow
      29: iconst_0
      30: istore        4
      32: iload         4
      34: iload_3
      35: if_icmpge     55
      38: aload_0
      39: iload         4
      41: iload_1
      42: aload_2
      43: iload         4
      45: aaload
      46: invokevirtual #70                 // Method setEntry:(IILorg/apache/commons/math3/FieldElement;)V
      49: iinc          4, 1
      52: goto          32
      55: return

  public abstract T getEntry(int, int) throws org.apache.commons.math3.exception.OutOfRangeException;

  public abstract void setEntry(int, int, T) throws org.apache.commons.math3.exception.OutOfRangeException;

  public abstract void addToEntry(int, int, T) throws org.apache.commons.math3.exception.OutOfRangeException;

  public abstract void multiplyEntry(int, int, T) throws org.apache.commons.math3.exception.OutOfRangeException;

  public org.apache.commons.math3.linear.FieldMatrix<T> transpose();
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method getRowDimension:()I
       4: istore_1
       5: aload_0
       6: invokevirtual #20                 // Method getColumnDimension:()I
       9: istore_2
      10: aload_0
      11: iload_2
      12: iload_1
      13: invokevirtual #21                 // Method createMatrix:(II)Lorg/apache/commons/math3/linear/FieldMatrix;
      16: astore_3
      17: aload_0
      18: new           #78                 // class org/apache/commons/math3/linear/AbstractFieldMatrix$3
      21: dup
      22: aload_0
      23: aload_0
      24: getfield      #2                  // Field field:Lorg/apache/commons/math3/Field;
      27: invokeinterface #32,  1           // InterfaceMethod org/apache/commons/math3/Field.getZero:()Ljava/lang/Object;
      32: checkcast     #25                 // class org/apache/commons/math3/FieldElement
      35: aload_3
      36: invokespecial #79                 // Method org/apache/commons/math3/linear/AbstractFieldMatrix$3."<init>":(Lorg/apache/commons/math3/linear/AbstractFieldMatrix;Lorg/apache/commons/math3/FieldElement;Lorg/apache/commons/math3/linear/FieldMatrix;)V
      39: invokevirtual #80                 // Method walkInOptimizedOrder:(Lorg/apache/commons/math3/linear/FieldMatrixPreservingVisitor;)Lorg/apache/commons/math3/FieldElement;
      42: pop
      43: aload_3
      44: areturn

  public boolean isSquare();
    Code:
       0: aload_0
       1: invokevirtual #20                 // Method getColumnDimension:()I
       4: aload_0
       5: invokevirtual #19                 // Method getRowDimension:()I
       8: if_icmpne     15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: ireturn

  public abstract int getRowDimension();

  public abstract int getColumnDimension();

  public T getTrace() throws org.apache.commons.math3.linear.NonSquareMatrixException;
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method getRowDimension:()I
       4: istore_1
       5: aload_0
       6: invokevirtual #20                 // Method getColumnDimension:()I
       9: istore_2
      10: iload_1
      11: iload_2
      12: if_icmpeq     25
      15: new           #37                 // class org/apache/commons/math3/linear/NonSquareMatrixException
      18: dup
      19: iload_1
      20: iload_2
      21: invokespecial #38                 // Method org/apache/commons/math3/linear/NonSquareMatrixException."<init>":(II)V
      24: athrow
      25: aload_0
      26: getfield      #2                  // Field field:Lorg/apache/commons/math3/Field;
      29: invokeinterface #32,  1           // InterfaceMethod org/apache/commons/math3/Field.getZero:()Ljava/lang/Object;
      34: checkcast     #25                 // class org/apache/commons/math3/FieldElement
      37: astore_3
      38: iconst_0
      39: istore        4
      41: iload         4
      43: iload_1
      44: if_icmpge     71
      47: aload_3
      48: aload_0
      49: iload         4
      51: iload         4
      53: invokevirtual #22                 // Method getEntry:(II)Lorg/apache/commons/math3/FieldElement;
      56: invokeinterface #24,  2           // InterfaceMethod org/apache/commons/math3/FieldElement.add:(Ljava/lang/Object;)Ljava/lang/Object;
      61: checkcast     #25                 // class org/apache/commons/math3/FieldElement
      64: astore_3
      65: iinc          4, 1
      68: goto          41
      71: aload_3
      72: areturn

  public T[] operate(T[]) throws org.apache.commons.math3.exception.DimensionMismatchException;
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method getRowDimension:()I
       4: istore_2
       5: aload_0
       6: invokevirtual #20                 // Method getColumnDimension:()I
       9: istore_3
      10: aload_1
      11: arraylength
      12: iload_3
      13: if_icmpeq     27
      16: new           #66                 // class org/apache/commons/math3/exception/DimensionMismatchException
      19: dup
      20: aload_1
      21: arraylength
      22: iload_3
      23: invokespecial #67                 // Method org/apache/commons/math3/exception/DimensionMismatchException."<init>":(II)V
      26: athrow
      27: aload_0
      28: getfield      #2                  // Field field:Lorg/apache/commons/math3/Field;
      31: iload_2
      32: invokestatic  #16                 // Method org/apache/commons/math3/util/MathArrays.buildArray:(Lorg/apache/commons/math3/Field;I)[Ljava/lang/Object;
      35: checkcast     #17                 // class "[Lorg/apache/commons/math3/FieldElement;"
      38: astore        4
      40: iconst_0
      41: istore        5
      43: iload         5
      45: iload_2
      46: if_icmpge     120
      49: aload_0
      50: getfield      #2                  // Field field:Lorg/apache/commons/math3/Field;
      53: invokeinterface #32,  1           // InterfaceMethod org/apache/commons/math3/Field.getZero:()Ljava/lang/Object;
      58: checkcast     #25                 // class org/apache/commons/math3/FieldElement
      61: astore        6
      63: iconst_0
      64: istore        7
      66: iload         7
      68: iload_3
      69: if_icmpge     107
      72: aload         6
      74: aload_0
      75: iload         5
      77: iload         7
      79: invokevirtual #22                 // Method getEntry:(II)Lorg/apache/commons/math3/FieldElement;
      82: aload_1
      83: iload         7
      85: aaload
      86: invokeinterface #29,  2           // InterfaceMethod org/apache/commons/math3/FieldElement.multiply:(Ljava/lang/Object;)Ljava/lang/Object;
      91: invokeinterface #24,  2           // InterfaceMethod org/apache/commons/math3/FieldElement.add:(Ljava/lang/Object;)Ljava/lang/Object;
      96: checkcast     #25                 // class org/apache/commons/math3/FieldElement
      99: astore        6
     101: iinc          7, 1
     104: goto          66
     107: aload         4
     109: iload         5
     111: aload         6
     113: aastore
     114: iinc          5, 1
     117: goto          43
     120: aload         4
     122: areturn

  public org.apache.commons.math3.linear.FieldVector<T> operate(org.apache.commons.math3.linear.FieldVector<T>) throws org.apache.commons.math3.exception.DimensionMismatchException;
    Code:
       0: new           #72                 // class org/apache/commons/math3/linear/ArrayFieldVector
       3: dup
       4: aload_0
       5: getfield      #2                  // Field field:Lorg/apache/commons/math3/Field;
       8: aload_0
       9: aload_1
      10: checkcast     #72                 // class org/apache/commons/math3/linear/ArrayFieldVector
      13: invokevirtual #81                 // Method org/apache/commons/math3/linear/ArrayFieldVector.getDataRef:()[Lorg/apache/commons/math3/FieldElement;
      16: invokevirtual #82                 // Method operate:([Lorg/apache/commons/math3/FieldElement;)[Lorg/apache/commons/math3/FieldElement;
      19: iconst_0
      20: invokespecial #74                 // Method org/apache/commons/math3/linear/ArrayFieldVector."<init>":(Lorg/apache/commons/math3/Field;[Lorg/apache/commons/math3/FieldElement;Z)V
      23: areturn
      24: astore_2
      25: aload_0
      26: invokevirtual #19                 // Method getRowDimension:()I
      29: istore_3
      30: aload_0
      31: invokevirtual #20                 // Method getColumnDimension:()I
      34: istore        4
      36: aload_1
      37: invokeinterface #75,  1           // InterfaceMethod org/apache/commons/math3/linear/FieldVector.getDimension:()I
      42: iload         4
      44: if_icmpeq     63
      47: new           #66                 // class org/apache/commons/math3/exception/DimensionMismatchException
      50: dup
      51: aload_1
      52: invokeinterface #75,  1           // InterfaceMethod org/apache/commons/math3/linear/FieldVector.getDimension:()I
      57: iload         4
      59: invokespecial #67                 // Method org/apache/commons/math3/exception/DimensionMismatchException."<init>":(II)V
      62: athrow
      63: aload_0
      64: getfield      #2                  // Field field:Lorg/apache/commons/math3/Field;
      67: iload_3
      68: invokestatic  #16                 // Method org/apache/commons/math3/util/MathArrays.buildArray:(Lorg/apache/commons/math3/Field;I)[Ljava/lang/Object;
      71: checkcast     #17                 // class "[Lorg/apache/commons/math3/FieldElement;"
      74: astore        5
      76: iconst_0
      77: istore        6
      79: iload         6
      81: iload_3
      82: if_icmpge     161
      85: aload_0
      86: getfield      #2                  // Field field:Lorg/apache/commons/math3/Field;
      89: invokeinterface #32,  1           // InterfaceMethod org/apache/commons/math3/Field.getZero:()Ljava/lang/Object;
      94: checkcast     #25                 // class org/apache/commons/math3/FieldElement
      97: astore        7
      99: iconst_0
     100: istore        8
     102: iload         8
     104: iload         4
     106: if_icmpge     148
     109: aload         7
     111: aload_0
     112: iload         6
     114: iload         8
     116: invokevirtual #22                 // Method getEntry:(II)Lorg/apache/commons/math3/FieldElement;
     119: aload_1
     120: iload         8
     122: invokeinterface #76,  2           // InterfaceMethod org/apache/commons/math3/linear/FieldVector.getEntry:(I)Lorg/apache/commons/math3/FieldElement;
     127: invokeinterface #29,  2           // InterfaceMethod org/apache/commons/math3/FieldElement.multiply:(Ljava/lang/Object;)Ljava/lang/Object;
     132: invokeinterface #24,  2           // InterfaceMethod org/apache/commons/math3/FieldElement.add:(Ljava/lang/Object;)Ljava/lang/Object;
     137: checkcast     #25                 // class org/apache/commons/math3/FieldElement
     140: astore        7
     142: iinc          8, 1
     145: goto          102
     148: aload         5
     150: iload         6
     152: aload         7
     154: aastore
     155: iinc          6, 1
     158: goto          79
     161: new           #72                 // class org/apache/commons/math3/linear/ArrayFieldVector
     164: dup
     165: aload_0
     166: getfield      #2                  // Field field:Lorg/apache/commons/math3/Field;
     169: aload         5
     171: iconst_0
     172: invokespecial #74                 // Method org/apache/commons/math3/linear/ArrayFieldVector."<init>":(Lorg/apache/commons/math3/Field;[Lorg/apache/commons/math3/FieldElement;Z)V
     175: areturn
    Exception table:
       from    to  target type
           0    23    24   Class java/lang/ClassCastException

  public T[] preMultiply(T[]) throws org.apache.commons.math3.exception.DimensionMismatchException;
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method getRowDimension:()I
       4: istore_2
       5: aload_0
       6: invokevirtual #20                 // Method getColumnDimension:()I
       9: istore_3
      10: aload_1
      11: arraylength
      12: iload_2
      13: if_icmpeq     27
      16: new           #66                 // class org/apache/commons/math3/exception/DimensionMismatchException
      19: dup
      20: aload_1
      21: arraylength
      22: iload_2
      23: invokespecial #67                 // Method org/apache/commons/math3/exception/DimensionMismatchException."<init>":(II)V
      26: athrow
      27: aload_0
      28: getfield      #2                  // Field field:Lorg/apache/commons/math3/Field;
      31: iload_3
      32: invokestatic  #16                 // Method org/apache/commons/math3/util/MathArrays.buildArray:(Lorg/apache/commons/math3/Field;I)[Ljava/lang/Object;
      35: checkcast     #17                 // class "[Lorg/apache/commons/math3/FieldElement;"
      38: astore        4
      40: iconst_0
      41: istore        5
      43: iload         5
      45: iload_3
      46: if_icmpge     120
      49: aload_0
      50: getfield      #2                  // Field field:Lorg/apache/commons/math3/Field;
      53: invokeinterface #32,  1           // InterfaceMethod org/apache/commons/math3/Field.getZero:()Ljava/lang/Object;
      58: checkcast     #25                 // class org/apache/commons/math3/FieldElement
      61: astore        6
      63: iconst_0
      64: istore        7
      66: iload         7
      68: iload_2
      69: if_icmpge     107
      72: aload         6
      74: aload_0
      75: iload         7
      77: iload         5
      79: invokevirtual #22                 // Method getEntry:(II)Lorg/apache/commons/math3/FieldElement;
      82: aload_1
      83: iload         7
      85: aaload
      86: invokeinterface #29,  2           // InterfaceMethod org/apache/commons/math3/FieldElement.multiply:(Ljava/lang/Object;)Ljava/lang/Object;
      91: invokeinterface #24,  2           // InterfaceMethod org/apache/commons/math3/FieldElement.add:(Ljava/lang/Object;)Ljava/lang/Object;
      96: checkcast     #25                 // class org/apache/commons/math3/FieldElement
      99: astore        6
     101: iinc          7, 1
     104: goto          66
     107: aload         4
     109: iload         5
     111: aload         6
     113: aastore
     114: iinc          5, 1
     117: goto          43
     120: aload         4
     122: areturn

  public org.apache.commons.math3.linear.FieldVector<T> preMultiply(org.apache.commons.math3.linear.FieldVector<T>) throws org.apache.commons.math3.exception.DimensionMismatchException;
    Code:
       0: new           #72                 // class org/apache/commons/math3/linear/ArrayFieldVector
       3: dup
       4: aload_0
       5: getfield      #2                  // Field field:Lorg/apache/commons/math3/Field;
       8: aload_0
       9: aload_1
      10: checkcast     #72                 // class org/apache/commons/math3/linear/ArrayFieldVector
      13: invokevirtual #81                 // Method org/apache/commons/math3/linear/ArrayFieldVector.getDataRef:()[Lorg/apache/commons/math3/FieldElement;
      16: invokevirtual #84                 // Method preMultiply:([Lorg/apache/commons/math3/FieldElement;)[Lorg/apache/commons/math3/FieldElement;
      19: iconst_0
      20: invokespecial #74                 // Method org/apache/commons/math3/linear/ArrayFieldVector."<init>":(Lorg/apache/commons/math3/Field;[Lorg/apache/commons/math3/FieldElement;Z)V
      23: areturn
      24: astore_2
      25: aload_0
      26: invokevirtual #19                 // Method getRowDimension:()I
      29: istore_3
      30: aload_0
      31: invokevirtual #20                 // Method getColumnDimension:()I
      34: istore        4
      36: aload_1
      37: invokeinterface #75,  1           // InterfaceMethod org/apache/commons/math3/linear/FieldVector.getDimension:()I
      42: iload_3
      43: if_icmpeq     61
      46: new           #66                 // class org/apache/commons/math3/exception/DimensionMismatchException
      49: dup
      50: aload_1
      51: invokeinterface #75,  1           // InterfaceMethod org/apache/commons/math3/linear/FieldVector.getDimension:()I
      56: iload_3
      57: invokespecial #67                 // Method org/apache/commons/math3/exception/DimensionMismatchException."<init>":(II)V
      60: athrow
      61: aload_0
      62: getfield      #2                  // Field field:Lorg/apache/commons/math3/Field;
      65: iload         4
      67: invokestatic  #16                 // Method org/apache/commons/math3/util/MathArrays.buildArray:(Lorg/apache/commons/math3/Field;I)[Ljava/lang/Object;
      70: checkcast     #17                 // class "[Lorg/apache/commons/math3/FieldElement;"
      73: astore        5
      75: iconst_0
      76: istore        6
      78: iload         6
      80: iload         4
      82: if_icmpge     160
      85: aload_0
      86: getfield      #2                  // Field field:Lorg/apache/commons/math3/Field;
      89: invokeinterface #32,  1           // InterfaceMethod org/apache/commons/math3/Field.getZero:()Ljava/lang/Object;
      94: checkcast     #25                 // class org/apache/commons/math3/FieldElement
      97: astore        7
      99: iconst_0
     100: istore        8
     102: iload         8
     104: iload_3
     105: if_icmpge     147
     108: aload         7
     110: aload_0
     111: iload         8
     113: iload         6
     115: invokevirtual #22                 // Method getEntry:(II)Lorg/apache/commons/math3/FieldElement;
     118: aload_1
     119: iload         8
     121: invokeinterface #76,  2           // InterfaceMethod org/apache/commons/math3/linear/FieldVector.getEntry:(I)Lorg/apache/commons/math3/FieldElement;
     126: invokeinterface #29,  2           // InterfaceMethod org/apache/commons/math3/FieldElement.multiply:(Ljava/lang/Object;)Ljava/lang/Object;
     131: invokeinterface #24,  2           // InterfaceMethod org/apache/commons/math3/FieldElement.add:(Ljava/lang/Object;)Ljava/lang/Object;
     136: checkcast     #25                 // class org/apache/commons/math3/FieldElement
     139: astore        7
     141: iinc          8, 1
     144: goto          102
     147: aload         5
     149: iload         6
     151: aload         7
     153: aastore
     154: iinc          6, 1
     157: goto          78
     160: new           #72                 // class org/apache/commons/math3/linear/ArrayFieldVector
     163: dup
     164: aload_0
     165: getfield      #2                  // Field field:Lorg/apache/commons/math3/Field;
     168: aload         5
     170: iconst_0
     171: invokespecial #74                 // Method org/apache/commons/math3/linear/ArrayFieldVector."<init>":(Lorg/apache/commons/math3/Field;[Lorg/apache/commons/math3/FieldElement;Z)V
     174: areturn
    Exception table:
       from    to  target type
           0    23    24   Class java/lang/ClassCastException

  public T walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor<T>);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method getRowDimension:()I
       4: istore_2
       5: aload_0
       6: invokevirtual #20                 // Method getColumnDimension:()I
       9: istore_3
      10: aload_1
      11: iload_2
      12: iload_3
      13: iconst_0
      14: iload_2
      15: iconst_1
      16: isub
      17: iconst_0
      18: iload_3
      19: iconst_1
      20: isub
      21: invokeinterface #85,  7           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrixChangingVisitor.start:(IIIIII)V
      26: iconst_0
      27: istore        4
      29: iload         4
      31: iload_2
      32: if_icmpge     90
      35: iconst_0
      36: istore        5
      38: iload         5
      40: iload_3
      41: if_icmpge     84
      44: aload_0
      45: iload         4
      47: iload         5
      49: invokevirtual #22                 // Method getEntry:(II)Lorg/apache/commons/math3/FieldElement;
      52: astore        6
      54: aload_1
      55: iload         4
      57: iload         5
      59: aload         6
      61: invokeinterface #86,  4           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrixChangingVisitor.visit:(IILorg/apache/commons/math3/FieldElement;)Lorg/apache/commons/math3/FieldElement;
      66: astore        7
      68: aload_0
      69: iload         4
      71: iload         5
      73: aload         7
      75: invokevirtual #70                 // Method setEntry:(IILorg/apache/commons/math3/FieldElement;)V
      78: iinc          5, 1
      81: goto          38
      84: iinc          4, 1
      87: goto          29
      90: aload_1
      91: invokeinterface #87,  1           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrixChangingVisitor.end:()Lorg/apache/commons/math3/FieldElement;
      96: areturn

  public T walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor<T>);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method getRowDimension:()I
       4: istore_2
       5: aload_0
       6: invokevirtual #20                 // Method getColumnDimension:()I
       9: istore_3
      10: aload_1
      11: iload_2
      12: iload_3
      13: iconst_0
      14: iload_2
      15: iconst_1
      16: isub
      17: iconst_0
      18: iload_3
      19: iconst_1
      20: isub
      21: invokeinterface #88,  7           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrixPreservingVisitor.start:(IIIIII)V
      26: iconst_0
      27: istore        4
      29: iload         4
      31: iload_2
      32: if_icmpge     74
      35: iconst_0
      36: istore        5
      38: iload         5
      40: iload_3
      41: if_icmpge     68
      44: aload_1
      45: iload         4
      47: iload         5
      49: aload_0
      50: iload         4
      52: iload         5
      54: invokevirtual #22                 // Method getEntry:(II)Lorg/apache/commons/math3/FieldElement;
      57: invokeinterface #89,  4           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrixPreservingVisitor.visit:(IILorg/apache/commons/math3/FieldElement;)V
      62: iinc          5, 1
      65: goto          38
      68: iinc          4, 1
      71: goto          29
      74: aload_1
      75: invokeinterface #90,  1           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrixPreservingVisitor.end:()Lorg/apache/commons/math3/FieldElement;
      80: areturn

  public T walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor<T>, int, int, int, int) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException;
    Code:
       0: aload_0
       1: iload_2
       2: iload_3
       3: iload         4
       5: iload         5
       7: invokevirtual #56                 // Method checkSubMatrixIndex:(IIII)V
      10: aload_1
      11: aload_0
      12: invokevirtual #19                 // Method getRowDimension:()I
      15: aload_0
      16: invokevirtual #20                 // Method getColumnDimension:()I
      19: iload_2
      20: iload_3
      21: iload         4
      23: iload         5
      25: invokeinterface #85,  7           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrixChangingVisitor.start:(IIIIII)V
      30: iload_2
      31: istore        6
      33: iload         6
      35: iload_3
      36: if_icmpgt     96
      39: iload         4
      41: istore        7
      43: iload         7
      45: iload         5
      47: if_icmpgt     90
      50: aload_0
      51: iload         6
      53: iload         7
      55: invokevirtual #22                 // Method getEntry:(II)Lorg/apache/commons/math3/FieldElement;
      58: astore        8
      60: aload_1
      61: iload         6
      63: iload         7
      65: aload         8
      67: invokeinterface #86,  4           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrixChangingVisitor.visit:(IILorg/apache/commons/math3/FieldElement;)Lorg/apache/commons/math3/FieldElement;
      72: astore        9
      74: aload_0
      75: iload         6
      77: iload         7
      79: aload         9
      81: invokevirtual #70                 // Method setEntry:(IILorg/apache/commons/math3/FieldElement;)V
      84: iinc          7, 1
      87: goto          43
      90: iinc          6, 1
      93: goto          33
      96: aload_1
      97: invokeinterface #87,  1           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrixChangingVisitor.end:()Lorg/apache/commons/math3/FieldElement;
     102: areturn

  public T walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor<T>, int, int, int, int) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException;
    Code:
       0: aload_0
       1: iload_2
       2: iload_3
       3: iload         4
       5: iload         5
       7: invokevirtual #56                 // Method checkSubMatrixIndex:(IIII)V
      10: aload_1
      11: aload_0
      12: invokevirtual #19                 // Method getRowDimension:()I
      15: aload_0
      16: invokevirtual #20                 // Method getColumnDimension:()I
      19: iload_2
      20: iload_3
      21: iload         4
      23: iload         5
      25: invokeinterface #88,  7           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrixPreservingVisitor.start:(IIIIII)V
      30: iload_2
      31: istore        6
      33: iload         6
      35: iload_3
      36: if_icmpgt     80
      39: iload         4
      41: istore        7
      43: iload         7
      45: iload         5
      47: if_icmpgt     74
      50: aload_1
      51: iload         6
      53: iload         7
      55: aload_0
      56: iload         6
      58: iload         7
      60: invokevirtual #22                 // Method getEntry:(II)Lorg/apache/commons/math3/FieldElement;
      63: invokeinterface #89,  4           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrixPreservingVisitor.visit:(IILorg/apache/commons/math3/FieldElement;)V
      68: iinc          7, 1
      71: goto          43
      74: iinc          6, 1
      77: goto          33
      80: aload_1
      81: invokeinterface #90,  1           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrixPreservingVisitor.end:()Lorg/apache/commons/math3/FieldElement;
      86: areturn

  public T walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor<T>);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method getRowDimension:()I
       4: istore_2
       5: aload_0
       6: invokevirtual #20                 // Method getColumnDimension:()I
       9: istore_3
      10: aload_1
      11: iload_2
      12: iload_3
      13: iconst_0
      14: iload_2
      15: iconst_1
      16: isub
      17: iconst_0
      18: iload_3
      19: iconst_1
      20: isub
      21: invokeinterface #85,  7           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrixChangingVisitor.start:(IIIIII)V
      26: iconst_0
      27: istore        4
      29: iload         4
      31: iload_3
      32: if_icmpge     90
      35: iconst_0
      36: istore        5
      38: iload         5
      40: iload_2
      41: if_icmpge     84
      44: aload_0
      45: iload         5
      47: iload         4
      49: invokevirtual #22                 // Method getEntry:(II)Lorg/apache/commons/math3/FieldElement;
      52: astore        6
      54: aload_1
      55: iload         5
      57: iload         4
      59: aload         6
      61: invokeinterface #86,  4           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrixChangingVisitor.visit:(IILorg/apache/commons/math3/FieldElement;)Lorg/apache/commons/math3/FieldElement;
      66: astore        7
      68: aload_0
      69: iload         5
      71: iload         4
      73: aload         7
      75: invokevirtual #70                 // Method setEntry:(IILorg/apache/commons/math3/FieldElement;)V
      78: iinc          5, 1
      81: goto          38
      84: iinc          4, 1
      87: goto          29
      90: aload_1
      91: invokeinterface #87,  1           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrixChangingVisitor.end:()Lorg/apache/commons/math3/FieldElement;
      96: areturn

  public T walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor<T>);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method getRowDimension:()I
       4: istore_2
       5: aload_0
       6: invokevirtual #20                 // Method getColumnDimension:()I
       9: istore_3
      10: aload_1
      11: iload_2
      12: iload_3
      13: iconst_0
      14: iload_2
      15: iconst_1
      16: isub
      17: iconst_0
      18: iload_3
      19: iconst_1
      20: isub
      21: invokeinterface #88,  7           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrixPreservingVisitor.start:(IIIIII)V
      26: iconst_0
      27: istore        4
      29: iload         4
      31: iload_3
      32: if_icmpge     74
      35: iconst_0
      36: istore        5
      38: iload         5
      40: iload_2
      41: if_icmpge     68
      44: aload_1
      45: iload         5
      47: iload         4
      49: aload_0
      50: iload         5
      52: iload         4
      54: invokevirtual #22                 // Method getEntry:(II)Lorg/apache/commons/math3/FieldElement;
      57: invokeinterface #89,  4           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrixPreservingVisitor.visit:(IILorg/apache/commons/math3/FieldElement;)V
      62: iinc          5, 1
      65: goto          38
      68: iinc          4, 1
      71: goto          29
      74: aload_1
      75: invokeinterface #90,  1           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrixPreservingVisitor.end:()Lorg/apache/commons/math3/FieldElement;
      80: areturn

  public T walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor<T>, int, int, int, int) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException;
    Code:
       0: aload_0
       1: iload_2
       2: iload_3
       3: iload         4
       5: iload         5
       7: invokevirtual #56                 // Method checkSubMatrixIndex:(IIII)V
      10: aload_1
      11: aload_0
      12: invokevirtual #19                 // Method getRowDimension:()I
      15: aload_0
      16: invokevirtual #20                 // Method getColumnDimension:()I
      19: iload_2
      20: iload_3
      21: iload         4
      23: iload         5
      25: invokeinterface #85,  7           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrixChangingVisitor.start:(IIIIII)V
      30: iload         4
      32: istore        6
      34: iload         6
      36: iload         5
      38: if_icmpgt     96
      41: iload_2
      42: istore        7
      44: iload         7
      46: iload_3
      47: if_icmpgt     90
      50: aload_0
      51: iload         7
      53: iload         6
      55: invokevirtual #22                 // Method getEntry:(II)Lorg/apache/commons/math3/FieldElement;
      58: astore        8
      60: aload_1
      61: iload         7
      63: iload         6
      65: aload         8
      67: invokeinterface #86,  4           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrixChangingVisitor.visit:(IILorg/apache/commons/math3/FieldElement;)Lorg/apache/commons/math3/FieldElement;
      72: astore        9
      74: aload_0
      75: iload         7
      77: iload         6
      79: aload         9
      81: invokevirtual #70                 // Method setEntry:(IILorg/apache/commons/math3/FieldElement;)V
      84: iinc          7, 1
      87: goto          44
      90: iinc          6, 1
      93: goto          34
      96: aload_1
      97: invokeinterface #87,  1           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrixChangingVisitor.end:()Lorg/apache/commons/math3/FieldElement;
     102: areturn

  public T walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor<T>, int, int, int, int) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException;
    Code:
       0: aload_0
       1: iload_2
       2: iload_3
       3: iload         4
       5: iload         5
       7: invokevirtual #56                 // Method checkSubMatrixIndex:(IIII)V
      10: aload_1
      11: aload_0
      12: invokevirtual #19                 // Method getRowDimension:()I
      15: aload_0
      16: invokevirtual #20                 // Method getColumnDimension:()I
      19: iload_2
      20: iload_3
      21: iload         4
      23: iload         5
      25: invokeinterface #88,  7           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrixPreservingVisitor.start:(IIIIII)V
      30: iload         4
      32: istore        6
      34: iload         6
      36: iload         5
      38: if_icmpgt     80
      41: iload_2
      42: istore        7
      44: iload         7
      46: iload_3
      47: if_icmpgt     74
      50: aload_1
      51: iload         7
      53: iload         6
      55: aload_0
      56: iload         7
      58: iload         6
      60: invokevirtual #22                 // Method getEntry:(II)Lorg/apache/commons/math3/FieldElement;
      63: invokeinterface #89,  4           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrixPreservingVisitor.visit:(IILorg/apache/commons/math3/FieldElement;)V
      68: iinc          7, 1
      71: goto          44
      74: iinc          6, 1
      77: goto          34
      80: aload_1
      81: invokeinterface #90,  1           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrixPreservingVisitor.end:()Lorg/apache/commons/math3/FieldElement;
      86: areturn

  public T walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor<T>);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #91                 // Method walkInRowOrder:(Lorg/apache/commons/math3/linear/FieldMatrixChangingVisitor;)Lorg/apache/commons/math3/FieldElement;
       5: areturn

  public T walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor<T>);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #92                 // Method walkInRowOrder:(Lorg/apache/commons/math3/linear/FieldMatrixPreservingVisitor;)Lorg/apache/commons/math3/FieldElement;
       5: areturn

  public T walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor<T>, int, int, int, int) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException;
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: iload         4
       6: iload         5
       8: invokevirtual #93                 // Method walkInRowOrder:(Lorg/apache/commons/math3/linear/FieldMatrixChangingVisitor;IIII)Lorg/apache/commons/math3/FieldElement;
      11: areturn

  public T walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor<T>, int, int, int, int) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException;
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: iload         4
       6: iload         5
       8: invokevirtual #94                 // Method walkInRowOrder:(Lorg/apache/commons/math3/linear/FieldMatrixPreservingVisitor;IIII)Lorg/apache/commons/math3/FieldElement;
      11: areturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method getRowDimension:()I
       4: istore_1
       5: aload_0
       6: invokevirtual #20                 // Method getColumnDimension:()I
       9: istore_2
      10: new           #95                 // class java/lang/StringBuffer
      13: dup
      14: invokespecial #96                 // Method java/lang/StringBuffer."<init>":()V
      17: astore_3
      18: aload_0
      19: invokevirtual #97                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      22: invokevirtual #98                 // Method java/lang/Class.getName:()Ljava/lang/String;
      25: astore        4
      27: aload         4
      29: aload         4
      31: bipush        46
      33: invokevirtual #99                 // Method java/lang/String.lastIndexOf:(I)I
      36: iconst_1
      37: iadd
      38: invokevirtual #100                // Method java/lang/String.substring:(I)Ljava/lang/String;
      41: astore        5
      43: aload_3
      44: aload         5
      46: invokevirtual #101                // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      49: ldc           #102                // String {
      51: invokevirtual #101                // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      54: pop
      55: iconst_0
      56: istore        6
      58: iload         6
      60: iload_1
      61: if_icmpge     136
      64: iload         6
      66: ifle          76
      69: aload_3
      70: ldc           #103                // String ,
      72: invokevirtual #101                // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      75: pop
      76: aload_3
      77: ldc           #102                // String {
      79: invokevirtual #101                // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      82: pop
      83: iconst_0
      84: istore        7
      86: iload         7
      88: iload_2
      89: if_icmpge     123
      92: iload         7
      94: ifle          104
      97: aload_3
      98: ldc           #103                // String ,
     100: invokevirtual #101                // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
     103: pop
     104: aload_3
     105: aload_0
     106: iload         6
     108: iload         7
     110: invokevirtual #22                 // Method getEntry:(II)Lorg/apache/commons/math3/FieldElement;
     113: invokevirtual #104                // Method java/lang/StringBuffer.append:(Ljava/lang/Object;)Ljava/lang/StringBuffer;
     116: pop
     117: iinc          7, 1
     120: goto          86
     123: aload_3
     124: ldc           #105                // String }
     126: invokevirtual #101                // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
     129: pop
     130: iinc          6, 1
     133: goto          58
     136: aload_3
     137: ldc           #105                // String }
     139: invokevirtual #101                // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
     142: pop
     143: aload_3
     144: invokevirtual #106                // Method java/lang/StringBuffer.toString:()Ljava/lang/String;
     147: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: aload_0
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: instanceof    #50                 // class org/apache/commons/math3/linear/FieldMatrix
      11: ifne          16
      14: iconst_0
      15: ireturn
      16: aload_1
      17: checkcast     #50                 // class org/apache/commons/math3/linear/FieldMatrix
      20: astore_2
      21: aload_0
      22: invokevirtual #19                 // Method getRowDimension:()I
      25: istore_3
      26: aload_0
      27: invokevirtual #20                 // Method getColumnDimension:()I
      30: istore        4
      32: aload_2
      33: invokeinterface #31,  1           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrix.getColumnDimension:()I
      38: iload         4
      40: if_icmpne     53
      43: aload_2
      44: invokeinterface #71,  1           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrix.getRowDimension:()I
      49: iload_3
      50: if_icmpeq     55
      53: iconst_0
      54: ireturn
      55: iconst_0
      56: istore        5
      58: iload         5
      60: iload_3
      61: if_icmpge     112
      64: iconst_0
      65: istore        6
      67: iload         6
      69: iload         4
      71: if_icmpge     106
      74: aload_0
      75: iload         5
      77: iload         6
      79: invokevirtual #22                 // Method getEntry:(II)Lorg/apache/commons/math3/FieldElement;
      82: aload_2
      83: iload         5
      85: iload         6
      87: invokeinterface #23,  3           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrix.getEntry:(II)Lorg/apache/commons/math3/FieldElement;
      92: invokevirtual #107                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      95: ifne          100
      98: iconst_0
      99: ireturn
     100: iinc          6, 1
     103: goto          67
     106: iinc          5, 1
     109: goto          58
     112: iconst_1
     113: ireturn

  public int hashCode();
    Code:
       0: ldc           #108                // int 322562
       2: istore_1
       3: aload_0
       4: invokevirtual #19                 // Method getRowDimension:()I
       7: istore_2
       8: aload_0
       9: invokevirtual #20                 // Method getColumnDimension:()I
      12: istore_3
      13: iload_1
      14: bipush        31
      16: imul
      17: iload_2
      18: iadd
      19: istore_1
      20: iload_1
      21: bipush        31
      23: imul
      24: iload_3
      25: iadd
      26: istore_1
      27: iconst_0
      28: istore        4
      30: iload         4
      32: iload_2
      33: if_icmpge     90
      36: iconst_0
      37: istore        5
      39: iload         5
      41: iload_3
      42: if_icmpge     84
      45: iload_1
      46: bipush        31
      48: imul
      49: bipush        11
      51: iload         4
      53: iconst_1
      54: iadd
      55: imul
      56: bipush        17
      58: iload         5
      60: iconst_1
      61: iadd
      62: imul
      63: iadd
      64: aload_0
      65: iload         4
      67: iload         5
      69: invokevirtual #22                 // Method getEntry:(II)Lorg/apache/commons/math3/FieldElement;
      72: invokevirtual #109                // Method java/lang/Object.hashCode:()I
      75: imul
      76: iadd
      77: istore_1
      78: iinc          5, 1
      81: goto          39
      84: iinc          4, 1
      87: goto          30
      90: iload_1
      91: ireturn

  protected void checkRowIndex(int) throws org.apache.commons.math3.exception.OutOfRangeException;
    Code:
       0: iload_1
       1: iflt          12
       4: iload_1
       5: aload_0
       6: invokevirtual #19                 // Method getRowDimension:()I
       9: if_icmplt     40
      12: new           #110                // class org/apache/commons/math3/exception/OutOfRangeException
      15: dup
      16: getstatic     #111                // Field org/apache/commons/math3/exception/util/LocalizedFormats.ROW_INDEX:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
      19: iload_1
      20: invokestatic  #5                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      23: iconst_0
      24: invokestatic  #5                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      27: aload_0
      28: invokevirtual #19                 // Method getRowDimension:()I
      31: iconst_1
      32: isub
      33: invokestatic  #5                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      36: invokespecial #112                // Method org/apache/commons/math3/exception/OutOfRangeException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V
      39: athrow
      40: return

  protected void checkColumnIndex(int) throws org.apache.commons.math3.exception.OutOfRangeException;
    Code:
       0: iload_1
       1: iflt          12
       4: iload_1
       5: aload_0
       6: invokevirtual #20                 // Method getColumnDimension:()I
       9: if_icmplt     40
      12: new           #110                // class org/apache/commons/math3/exception/OutOfRangeException
      15: dup
      16: getstatic     #113                // Field org/apache/commons/math3/exception/util/LocalizedFormats.COLUMN_INDEX:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
      19: iload_1
      20: invokestatic  #5                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      23: iconst_0
      24: invokestatic  #5                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      27: aload_0
      28: invokevirtual #20                 // Method getColumnDimension:()I
      31: iconst_1
      32: isub
      33: invokestatic  #5                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      36: invokespecial #112                // Method org/apache/commons/math3/exception/OutOfRangeException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V
      39: athrow
      40: return

  protected void checkSubMatrixIndex(int, int, int, int) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException;
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #68                 // Method checkRowIndex:(I)V
       5: aload_0
       6: iload_2
       7: invokevirtual #68                 // Method checkRowIndex:(I)V
      10: iload_2
      11: iload_1
      12: if_icmpge     35
      15: new           #114                // class org/apache/commons/math3/exception/NumberIsTooSmallException
      18: dup
      19: getstatic     #115                // Field org/apache/commons/math3/exception/util/LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
      22: iload_2
      23: invokestatic  #5                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      26: iload_1
      27: invokestatic  #5                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      30: iconst_1
      31: invokespecial #116                // Method org/apache/commons/math3/exception/NumberIsTooSmallException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;Ljava/lang/Number;Ljava/lang/Number;Z)V
      34: athrow
      35: aload_0
      36: iload_3
      37: invokevirtual #69                 // Method checkColumnIndex:(I)V
      40: aload_0
      41: iload         4
      43: invokevirtual #69                 // Method checkColumnIndex:(I)V
      46: iload         4
      48: iload_3
      49: if_icmpge     73
      52: new           #114                // class org/apache/commons/math3/exception/NumberIsTooSmallException
      55: dup
      56: getstatic     #117                // Field org/apache/commons/math3/exception/util/LocalizedFormats.INITIAL_COLUMN_AFTER_FINAL_COLUMN:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
      59: iload         4
      61: invokestatic  #5                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      64: iload_3
      65: invokestatic  #5                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      68: iconst_1
      69: invokespecial #116                // Method org/apache/commons/math3/exception/NumberIsTooSmallException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;Ljava/lang/Number;Ljava/lang/Number;Z)V
      72: athrow
      73: return

  protected void checkSubMatrixIndex(int[], int[]) throws org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.OutOfRangeException;
    Code:
       0: aload_1
       1: ifnull        8
       4: aload_2
       5: ifnonnull     16
       8: new           #7                  // class org/apache/commons/math3/exception/NullArgumentException
      11: dup
      12: invokespecial #8                  // Method org/apache/commons/math3/exception/NullArgumentException."<init>":()V
      15: athrow
      16: aload_1
      17: arraylength
      18: ifeq          26
      21: aload_2
      22: arraylength
      23: ifne          34
      26: new           #9                  // class org/apache/commons/math3/exception/NoDataException
      29: dup
      30: invokespecial #118                // Method org/apache/commons/math3/exception/NoDataException."<init>":()V
      33: athrow
      34: aload_1
      35: astore_3
      36: aload_3
      37: arraylength
      38: istore        4
      40: iconst_0
      41: istore        5
      43: iload         5
      45: iload         4
      47: if_icmpge     68
      50: aload_3
      51: iload         5
      53: iaload
      54: istore        6
      56: aload_0
      57: iload         6
      59: invokevirtual #68                 // Method checkRowIndex:(I)V
      62: iinc          5, 1
      65: goto          43
      68: aload_2
      69: astore_3
      70: aload_3
      71: arraylength
      72: istore        4
      74: iconst_0
      75: istore        5
      77: iload         5
      79: iload         4
      81: if_icmpge     102
      84: aload_3
      85: iload         5
      87: iaload
      88: istore        6
      90: aload_0
      91: iload         6
      93: invokevirtual #69                 // Method checkColumnIndex:(I)V
      96: iinc          5, 1
      99: goto          77
     102: return

  protected void checkAdditionCompatible(org.apache.commons.math3.linear.FieldMatrix<T>) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException;
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method getRowDimension:()I
       4: aload_1
       5: invokeinterface #71,  1           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrix.getRowDimension:()I
      10: if_icmpne     26
      13: aload_0
      14: invokevirtual #20                 // Method getColumnDimension:()I
      17: aload_1
      18: invokeinterface #31,  1           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrix.getColumnDimension:()I
      23: if_icmpeq     54
      26: new           #61                 // class org/apache/commons/math3/linear/MatrixDimensionMismatchException
      29: dup
      30: aload_1
      31: invokeinterface #71,  1           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrix.getRowDimension:()I
      36: aload_1
      37: invokeinterface #31,  1           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrix.getColumnDimension:()I
      42: aload_0
      43: invokevirtual #19                 // Method getRowDimension:()I
      46: aload_0
      47: invokevirtual #20                 // Method getColumnDimension:()I
      50: invokespecial #62                 // Method org/apache/commons/math3/linear/MatrixDimensionMismatchException."<init>":(IIII)V
      53: athrow
      54: return

  protected void checkSubtractionCompatible(org.apache.commons.math3.linear.FieldMatrix<T>) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException;
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method getRowDimension:()I
       4: aload_1
       5: invokeinterface #71,  1           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrix.getRowDimension:()I
      10: if_icmpne     26
      13: aload_0
      14: invokevirtual #20                 // Method getColumnDimension:()I
      17: aload_1
      18: invokeinterface #31,  1           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrix.getColumnDimension:()I
      23: if_icmpeq     54
      26: new           #61                 // class org/apache/commons/math3/linear/MatrixDimensionMismatchException
      29: dup
      30: aload_1
      31: invokeinterface #71,  1           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrix.getRowDimension:()I
      36: aload_1
      37: invokeinterface #31,  1           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrix.getColumnDimension:()I
      42: aload_0
      43: invokevirtual #19                 // Method getRowDimension:()I
      46: aload_0
      47: invokevirtual #20                 // Method getColumnDimension:()I
      50: invokespecial #62                 // Method org/apache/commons/math3/linear/MatrixDimensionMismatchException."<init>":(IIII)V
      53: athrow
      54: return

  protected void checkMultiplicationCompatible(org.apache.commons.math3.linear.FieldMatrix<T>) throws org.apache.commons.math3.exception.DimensionMismatchException;
    Code:
       0: aload_0
       1: invokevirtual #20                 // Method getColumnDimension:()I
       4: aload_1
       5: invokeinterface #71,  1           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrix.getRowDimension:()I
      10: if_icmpeq     31
      13: new           #66                 // class org/apache/commons/math3/exception/DimensionMismatchException
      16: dup
      17: aload_1
      18: invokeinterface #71,  1           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrix.getRowDimension:()I
      23: aload_0
      24: invokevirtual #20                 // Method getColumnDimension:()I
      27: invokespecial #67                 // Method org/apache/commons/math3/exception/DimensionMismatchException."<init>":(II)V
      30: athrow
      31: return
}
