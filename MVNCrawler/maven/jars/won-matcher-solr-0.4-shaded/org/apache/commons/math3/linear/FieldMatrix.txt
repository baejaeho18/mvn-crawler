Compiled from "FieldMatrix.java"
public interface org.apache.commons.math3.linear.FieldMatrix<T extends org.apache.commons.math3.FieldElement<T>> extends org.apache.commons.math3.linear.AnyMatrix {
  public abstract org.apache.commons.math3.Field<T> getField();

  public abstract org.apache.commons.math3.linear.FieldMatrix<T> createMatrix(int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException;

  public abstract org.apache.commons.math3.linear.FieldMatrix<T> copy();

  public abstract org.apache.commons.math3.linear.FieldMatrix<T> add(org.apache.commons.math3.linear.FieldMatrix<T>) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException;

  public abstract org.apache.commons.math3.linear.FieldMatrix<T> subtract(org.apache.commons.math3.linear.FieldMatrix<T>) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException;

  public abstract org.apache.commons.math3.linear.FieldMatrix<T> scalarAdd(T);

  public abstract org.apache.commons.math3.linear.FieldMatrix<T> scalarMultiply(T);

  public abstract org.apache.commons.math3.linear.FieldMatrix<T> multiply(org.apache.commons.math3.linear.FieldMatrix<T>) throws org.apache.commons.math3.exception.DimensionMismatchException;

  public abstract org.apache.commons.math3.linear.FieldMatrix<T> preMultiply(org.apache.commons.math3.linear.FieldMatrix<T>) throws org.apache.commons.math3.exception.DimensionMismatchException;

  public abstract org.apache.commons.math3.linear.FieldMatrix<T> power(int) throws org.apache.commons.math3.linear.NonSquareMatrixException, org.apache.commons.math3.exception.NotPositiveException;

  public abstract T[][] getData();

  public abstract org.apache.commons.math3.linear.FieldMatrix<T> getSubMatrix(int, int, int, int) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException;

  public abstract org.apache.commons.math3.linear.FieldMatrix<T> getSubMatrix(int[], int[]) throws org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.OutOfRangeException;

  public abstract void copySubMatrix(int, int, int, int, T[][]) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException;

  public abstract void copySubMatrix(int[], int[], T[][]) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException, org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.OutOfRangeException;

  public abstract void setSubMatrix(T[][], int, int) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.NullArgumentException;

  public abstract org.apache.commons.math3.linear.FieldMatrix<T> getRowMatrix(int) throws org.apache.commons.math3.exception.OutOfRangeException;

  public abstract void setRowMatrix(int, org.apache.commons.math3.linear.FieldMatrix<T>) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException, org.apache.commons.math3.exception.OutOfRangeException;

  public abstract org.apache.commons.math3.linear.FieldMatrix<T> getColumnMatrix(int) throws org.apache.commons.math3.exception.OutOfRangeException;

  public abstract void setColumnMatrix(int, org.apache.commons.math3.linear.FieldMatrix<T>) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException, org.apache.commons.math3.exception.OutOfRangeException;

  public abstract org.apache.commons.math3.linear.FieldVector<T> getRowVector(int) throws org.apache.commons.math3.exception.OutOfRangeException;

  public abstract void setRowVector(int, org.apache.commons.math3.linear.FieldVector<T>) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException, org.apache.commons.math3.exception.OutOfRangeException;

  public abstract org.apache.commons.math3.linear.FieldVector<T> getColumnVector(int) throws org.apache.commons.math3.exception.OutOfRangeException;

  public abstract void setColumnVector(int, org.apache.commons.math3.linear.FieldVector<T>) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException, org.apache.commons.math3.exception.OutOfRangeException;

  public abstract T[] getRow(int) throws org.apache.commons.math3.exception.OutOfRangeException;

  public abstract void setRow(int, T[]) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException, org.apache.commons.math3.exception.OutOfRangeException;

  public abstract T[] getColumn(int) throws org.apache.commons.math3.exception.OutOfRangeException;

  public abstract void setColumn(int, T[]) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException, org.apache.commons.math3.exception.OutOfRangeException;

  public abstract T getEntry(int, int) throws org.apache.commons.math3.exception.OutOfRangeException;

  public abstract void setEntry(int, int, T) throws org.apache.commons.math3.exception.OutOfRangeException;

  public abstract void addToEntry(int, int, T) throws org.apache.commons.math3.exception.OutOfRangeException;

  public abstract void multiplyEntry(int, int, T) throws org.apache.commons.math3.exception.OutOfRangeException;

  public abstract org.apache.commons.math3.linear.FieldMatrix<T> transpose();

  public abstract T getTrace() throws org.apache.commons.math3.linear.NonSquareMatrixException;

  public abstract T[] operate(T[]) throws org.apache.commons.math3.exception.DimensionMismatchException;

  public abstract org.apache.commons.math3.linear.FieldVector<T> operate(org.apache.commons.math3.linear.FieldVector<T>) throws org.apache.commons.math3.exception.DimensionMismatchException;

  public abstract T[] preMultiply(T[]) throws org.apache.commons.math3.exception.DimensionMismatchException;

  public abstract org.apache.commons.math3.linear.FieldVector<T> preMultiply(org.apache.commons.math3.linear.FieldVector<T>) throws org.apache.commons.math3.exception.DimensionMismatchException;

  public abstract T walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor<T>);

  public abstract T walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor<T>);

  public abstract T walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor<T>, int, int, int, int) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NumberIsTooSmallException;

  public abstract T walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor<T>, int, int, int, int) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NumberIsTooSmallException;

  public abstract T walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor<T>);

  public abstract T walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor<T>);

  public abstract T walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor<T>, int, int, int, int) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException;

  public abstract T walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor<T>, int, int, int, int) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException;

  public abstract T walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor<T>);

  public abstract T walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor<T>);

  public abstract T walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor<T>, int, int, int, int) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException;

  public abstract T walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor<T>, int, int, int, int) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException;
}
