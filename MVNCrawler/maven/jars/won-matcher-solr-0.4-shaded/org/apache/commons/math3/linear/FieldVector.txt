Compiled from "FieldVector.java"
public interface org.apache.commons.math3.linear.FieldVector<T extends org.apache.commons.math3.FieldElement<T>> {
  public abstract org.apache.commons.math3.Field<T> getField();

  public abstract org.apache.commons.math3.linear.FieldVector<T> copy();

  public abstract org.apache.commons.math3.linear.FieldVector<T> add(org.apache.commons.math3.linear.FieldVector<T>) throws org.apache.commons.math3.exception.DimensionMismatchException;

  public abstract org.apache.commons.math3.linear.FieldVector<T> subtract(org.apache.commons.math3.linear.FieldVector<T>) throws org.apache.commons.math3.exception.DimensionMismatchException;

  public abstract org.apache.commons.math3.linear.FieldVector<T> mapAdd(T) throws org.apache.commons.math3.exception.NullArgumentException;

  public abstract org.apache.commons.math3.linear.FieldVector<T> mapAddToSelf(T) throws org.apache.commons.math3.exception.NullArgumentException;

  public abstract org.apache.commons.math3.linear.FieldVector<T> mapSubtract(T) throws org.apache.commons.math3.exception.NullArgumentException;

  public abstract org.apache.commons.math3.linear.FieldVector<T> mapSubtractToSelf(T) throws org.apache.commons.math3.exception.NullArgumentException;

  public abstract org.apache.commons.math3.linear.FieldVector<T> mapMultiply(T) throws org.apache.commons.math3.exception.NullArgumentException;

  public abstract org.apache.commons.math3.linear.FieldVector<T> mapMultiplyToSelf(T) throws org.apache.commons.math3.exception.NullArgumentException;

  public abstract org.apache.commons.math3.linear.FieldVector<T> mapDivide(T) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.MathArithmeticException;

  public abstract org.apache.commons.math3.linear.FieldVector<T> mapDivideToSelf(T) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.MathArithmeticException;

  public abstract org.apache.commons.math3.linear.FieldVector<T> mapInv() throws org.apache.commons.math3.exception.MathArithmeticException;

  public abstract org.apache.commons.math3.linear.FieldVector<T> mapInvToSelf() throws org.apache.commons.math3.exception.MathArithmeticException;

  public abstract org.apache.commons.math3.linear.FieldVector<T> ebeMultiply(org.apache.commons.math3.linear.FieldVector<T>) throws org.apache.commons.math3.exception.DimensionMismatchException;

  public abstract org.apache.commons.math3.linear.FieldVector<T> ebeDivide(org.apache.commons.math3.linear.FieldVector<T>) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.MathArithmeticException;

  public abstract T[] getData();

  public abstract T dotProduct(org.apache.commons.math3.linear.FieldVector<T>) throws org.apache.commons.math3.exception.DimensionMismatchException;

  public abstract org.apache.commons.math3.linear.FieldVector<T> projection(org.apache.commons.math3.linear.FieldVector<T>) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.MathArithmeticException;

  public abstract org.apache.commons.math3.linear.FieldMatrix<T> outerProduct(org.apache.commons.math3.linear.FieldVector<T>);

  public abstract T getEntry(int) throws org.apache.commons.math3.exception.OutOfRangeException;

  public abstract void setEntry(int, T) throws org.apache.commons.math3.exception.OutOfRangeException;

  public abstract int getDimension();

  public abstract org.apache.commons.math3.linear.FieldVector<T> append(org.apache.commons.math3.linear.FieldVector<T>);

  public abstract org.apache.commons.math3.linear.FieldVector<T> append(T);

  public abstract org.apache.commons.math3.linear.FieldVector<T> getSubVector(int, int) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NotPositiveException;

  public abstract void setSubVector(int, org.apache.commons.math3.linear.FieldVector<T>) throws org.apache.commons.math3.exception.OutOfRangeException;

  public abstract void set(T);

  public abstract T[] toArray();
}
