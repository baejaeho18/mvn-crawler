Compiled from "SimpsonIntegrator.java"
public class org.apache.commons.math3.analysis.integration.SimpsonIntegrator extends org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator {
  public static final int SIMPSON_MAX_ITERATIONS_COUNT;

  public org.apache.commons.math3.analysis.integration.SimpsonIntegrator(double, double, int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.NumberIsTooLargeException;
    Code:
       0: aload_0
       1: dload_1
       2: dload_3
       3: iload         5
       5: iload         6
       7: invokespecial #1                  // Method org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator."<init>":(DDII)V
      10: iload         6
      12: bipush        64
      14: if_icmple     36
      17: new           #2                  // class org/apache/commons/math3/exception/NumberIsTooLargeException
      20: dup
      21: iload         6
      23: invokestatic  #3                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      26: bipush        64
      28: invokestatic  #3                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      31: iconst_0
      32: invokespecial #4                  // Method org/apache/commons/math3/exception/NumberIsTooLargeException."<init>":(Ljava/lang/Number;Ljava/lang/Number;Z)V
      35: athrow
      36: return

  public org.apache.commons.math3.analysis.integration.SimpsonIntegrator(int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.NumberIsTooLargeException;
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokespecial #5                  // Method org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator."<init>":(II)V
       6: iload_2
       7: bipush        64
       9: if_icmple     30
      12: new           #2                  // class org/apache/commons/math3/exception/NumberIsTooLargeException
      15: dup
      16: iload_2
      17: invokestatic  #3                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      20: bipush        64
      22: invokestatic  #3                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      25: iconst_0
      26: invokespecial #4                  // Method org/apache/commons/math3/exception/NumberIsTooLargeException."<init>":(Ljava/lang/Number;Ljava/lang/Number;Z)V
      29: athrow
      30: return

  public org.apache.commons.math3.analysis.integration.SimpsonIntegrator();
    Code:
       0: aload_0
       1: iconst_3
       2: bipush        64
       4: invokespecial #5                  // Method org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator."<init>":(II)V
       7: return

  protected double doIntegrate() throws org.apache.commons.math3.exception.TooManyEvaluationsException, org.apache.commons.math3.exception.MaxCountExceededException;
    Code:
       0: new           #6                  // class org/apache/commons/math3/analysis/integration/TrapezoidIntegrator
       3: dup
       4: invokespecial #7                  // Method org/apache/commons/math3/analysis/integration/TrapezoidIntegrator."<init>":()V
       7: astore_1
       8: aload_0
       9: invokevirtual #8                  // Method getMinimalIterationCount:()I
      12: iconst_1
      13: if_icmpne     38
      16: ldc2_w        #9                  // double 4.0d
      19: aload_1
      20: aload_0
      21: iconst_1
      22: invokevirtual #11                 // Method org/apache/commons/math3/analysis/integration/TrapezoidIntegrator.stage:(Lorg/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator;I)D
      25: dmul
      26: aload_1
      27: aload_0
      28: iconst_0
      29: invokevirtual #11                 // Method org/apache/commons/math3/analysis/integration/TrapezoidIntegrator.stage:(Lorg/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator;I)D
      32: dsub
      33: ldc2_w        #12                 // double 3.0d
      36: ddiv
      37: dreturn
      38: dconst_0
      39: dstore_2
      40: aload_1
      41: aload_0
      42: iconst_0
      43: invokevirtual #11                 // Method org/apache/commons/math3/analysis/integration/TrapezoidIntegrator.stage:(Lorg/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator;I)D
      46: dstore        4
      48: aload_1
      49: aload_0
      50: aload_0
      51: invokevirtual #14                 // Method getIterations:()I
      54: invokevirtual #11                 // Method org/apache/commons/math3/analysis/integration/TrapezoidIntegrator.stage:(Lorg/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator;I)D
      57: dstore        6
      59: aload_0
      60: invokevirtual #15                 // Method incrementCount:()V
      63: ldc2_w        #9                  // double 4.0d
      66: dload         6
      68: dmul
      69: dload         4
      71: dsub
      72: ldc2_w        #12                 // double 3.0d
      75: ddiv
      76: dstore        8
      78: aload_0
      79: invokevirtual #14                 // Method getIterations:()I
      82: aload_0
      83: invokevirtual #8                  // Method getMinimalIterationCount:()I
      86: if_icmplt     140
      89: dload         8
      91: dload_2
      92: dsub
      93: invokestatic  #16                 // Method org/apache/commons/math3/util/FastMath.abs:(D)D
      96: dstore        10
      98: aload_0
      99: invokevirtual #17                 // Method getRelativeAccuracy:()D
     102: dload_2
     103: invokestatic  #16                 // Method org/apache/commons/math3/util/FastMath.abs:(D)D
     106: dload         8
     108: invokestatic  #16                 // Method org/apache/commons/math3/util/FastMath.abs:(D)D
     111: dadd
     112: dmul
     113: ldc2_w        #18                 // double 0.5d
     116: dmul
     117: dstore        12
     119: dload         10
     121: dload         12
     123: dcmpg
     124: ifle          137
     127: dload         10
     129: aload_0
     130: invokevirtual #20                 // Method getAbsoluteAccuracy:()D
     133: dcmpg
     134: ifgt          140
     137: dload         8
     139: dreturn
     140: dload         8
     142: dstore_2
     143: dload         6
     145: dstore        4
     147: goto          48
}
