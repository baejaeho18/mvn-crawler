Compiled from "Percentile.java"
public class org.apache.commons.math3.stat.descriptive.rank.Percentile extends org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic implements java.io.Serializable {
  private static final long serialVersionUID;

  private static final int MAX_CACHED_LEVELS;

  private static final int PIVOTS_HEAP_LENGTH;

  private final org.apache.commons.math3.util.KthSelector kthSelector;

  private final org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType estimationType;

  private final org.apache.commons.math3.stat.ranking.NaNStrategy nanStrategy;

  private double quantile;

  private int[] cachedPivots;

  public org.apache.commons.math3.stat.descriptive.rank.Percentile();
    Code:
       0: aload_0
       1: ldc2_w        #1                  // double 50.0d
       4: invokespecial #3                  // Method "<init>":(D)V
       7: return

  public org.apache.commons.math3.stat.descriptive.rank.Percentile(double) throws org.apache.commons.math3.exception.MathIllegalArgumentException;
    Code:
       0: aload_0
       1: dload_1
       2: getstatic     #4                  // Field org/apache/commons/math3/stat/descriptive/rank/Percentile$EstimationType.LEGACY:Lorg/apache/commons/math3/stat/descriptive/rank/Percentile$EstimationType;
       5: getstatic     #5                  // Field org/apache/commons/math3/stat/ranking/NaNStrategy.REMOVED:Lorg/apache/commons/math3/stat/ranking/NaNStrategy;
       8: new           #6                  // class org/apache/commons/math3/util/KthSelector
      11: dup
      12: new           #7                  // class org/apache/commons/math3/util/MedianOf3PivotingStrategy
      15: dup
      16: invokespecial #8                  // Method org/apache/commons/math3/util/MedianOf3PivotingStrategy."<init>":()V
      19: invokespecial #9                  // Method org/apache/commons/math3/util/KthSelector."<init>":(Lorg/apache/commons/math3/util/PivotingStrategyInterface;)V
      22: invokespecial #10                 // Method "<init>":(DLorg/apache/commons/math3/stat/descriptive/rank/Percentile$EstimationType;Lorg/apache/commons/math3/stat/ranking/NaNStrategy;Lorg/apache/commons/math3/util/KthSelector;)V
      25: return

  public org.apache.commons.math3.stat.descriptive.rank.Percentile(org.apache.commons.math3.stat.descriptive.rank.Percentile) throws org.apache.commons.math3.exception.NullArgumentException;
    Code:
       0: aload_0
       1: invokespecial #11                 // Method org/apache/commons/math3/stat/descriptive/AbstractUnivariateStatistic."<init>":()V
       4: aload_1
       5: invokestatic  #12                 // Method org/apache/commons/math3/util/MathUtils.checkNotNull:(Ljava/lang/Object;)V
       8: aload_0
       9: aload_1
      10: invokevirtual #13                 // Method getEstimationType:()Lorg/apache/commons/math3/stat/descriptive/rank/Percentile$EstimationType;
      13: putfield      #14                 // Field estimationType:Lorg/apache/commons/math3/stat/descriptive/rank/Percentile$EstimationType;
      16: aload_0
      17: aload_1
      18: invokevirtual #15                 // Method getNaNStrategy:()Lorg/apache/commons/math3/stat/ranking/NaNStrategy;
      21: putfield      #16                 // Field nanStrategy:Lorg/apache/commons/math3/stat/ranking/NaNStrategy;
      24: aload_0
      25: aload_1
      26: invokevirtual #17                 // Method getKthSelector:()Lorg/apache/commons/math3/util/KthSelector;
      29: putfield      #18                 // Field kthSelector:Lorg/apache/commons/math3/util/KthSelector;
      32: aload_0
      33: aload_1
      34: invokevirtual #19                 // Method getDataRef:()[D
      37: invokevirtual #20                 // Method setData:([D)V
      40: aload_1
      41: getfield      #21                 // Field cachedPivots:[I
      44: ifnull        65
      47: aload_1
      48: getfield      #21                 // Field cachedPivots:[I
      51: iconst_0
      52: aload_0
      53: getfield      #21                 // Field cachedPivots:[I
      56: iconst_0
      57: aload_1
      58: getfield      #21                 // Field cachedPivots:[I
      61: arraylength
      62: invokestatic  #22                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      65: aload_0
      66: aload_1
      67: getfield      #23                 // Field quantile:D
      70: invokevirtual #24                 // Method setQuantile:(D)V
      73: return

  protected org.apache.commons.math3.stat.descriptive.rank.Percentile(double, org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType, org.apache.commons.math3.stat.ranking.NaNStrategy, org.apache.commons.math3.util.KthSelector) throws org.apache.commons.math3.exception.MathIllegalArgumentException;
    Code:
       0: aload_0
       1: invokespecial #11                 // Method org/apache/commons/math3/stat/descriptive/AbstractUnivariateStatistic."<init>":()V
       4: aload_0
       5: dload_1
       6: invokevirtual #24                 // Method setQuantile:(D)V
       9: aload_0
      10: aconst_null
      11: putfield      #21                 // Field cachedPivots:[I
      14: aload_3
      15: invokestatic  #12                 // Method org/apache/commons/math3/util/MathUtils.checkNotNull:(Ljava/lang/Object;)V
      18: aload         4
      20: invokestatic  #12                 // Method org/apache/commons/math3/util/MathUtils.checkNotNull:(Ljava/lang/Object;)V
      23: aload         5
      25: invokestatic  #12                 // Method org/apache/commons/math3/util/MathUtils.checkNotNull:(Ljava/lang/Object;)V
      28: aload_0
      29: aload_3
      30: putfield      #14                 // Field estimationType:Lorg/apache/commons/math3/stat/descriptive/rank/Percentile$EstimationType;
      33: aload_0
      34: aload         4
      36: putfield      #16                 // Field nanStrategy:Lorg/apache/commons/math3/stat/ranking/NaNStrategy;
      39: aload_0
      40: aload         5
      42: putfield      #18                 // Field kthSelector:Lorg/apache/commons/math3/util/KthSelector;
      45: return

  public void setData(double[]);
    Code:
       0: aload_1
       1: ifnonnull     12
       4: aload_0
       5: aconst_null
       6: putfield      #21                 // Field cachedPivots:[I
       9: goto          29
      12: aload_0
      13: sipush        512
      16: newarray       int
      18: putfield      #21                 // Field cachedPivots:[I
      21: aload_0
      22: getfield      #21                 // Field cachedPivots:[I
      25: iconst_m1
      26: invokestatic  #25                 // Method java/util/Arrays.fill:([II)V
      29: aload_0
      30: aload_1
      31: invokespecial #26                 // Method org/apache/commons/math3/stat/descriptive/AbstractUnivariateStatistic.setData:([D)V
      34: return

  public void setData(double[], int, int) throws org.apache.commons.math3.exception.MathIllegalArgumentException;
    Code:
       0: aload_1
       1: ifnonnull     12
       4: aload_0
       5: aconst_null
       6: putfield      #21                 // Field cachedPivots:[I
       9: goto          29
      12: aload_0
      13: sipush        512
      16: newarray       int
      18: putfield      #21                 // Field cachedPivots:[I
      21: aload_0
      22: getfield      #21                 // Field cachedPivots:[I
      25: iconst_m1
      26: invokestatic  #25                 // Method java/util/Arrays.fill:([II)V
      29: aload_0
      30: aload_1
      31: iload_2
      32: iload_3
      33: invokespecial #27                 // Method org/apache/commons/math3/stat/descriptive/AbstractUnivariateStatistic.setData:([DII)V
      36: return

  public double evaluate(double) throws org.apache.commons.math3.exception.MathIllegalArgumentException;
    Code:
       0: aload_0
       1: aload_0
       2: invokevirtual #19                 // Method getDataRef:()[D
       5: dload_1
       6: invokevirtual #28                 // Method evaluate:([DD)D
       9: dreturn

  public double evaluate(double[], double) throws org.apache.commons.math3.exception.MathIllegalArgumentException;
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: iconst_0
       4: invokevirtual #29                 // Method test:([DII)Z
       7: pop
       8: aload_0
       9: aload_1
      10: iconst_0
      11: aload_1
      12: arraylength
      13: dload_2
      14: invokevirtual #30                 // Method evaluate:([DIID)D
      17: dreturn

  public double evaluate(double[], int, int) throws org.apache.commons.math3.exception.MathIllegalArgumentException;
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: aload_0
       5: getfield      #23                 // Field quantile:D
       8: invokevirtual #30                 // Method evaluate:([DIID)D
      11: dreturn

  public double evaluate(double[], int, int, double) throws org.apache.commons.math3.exception.MathIllegalArgumentException;
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: invokevirtual #29                 // Method test:([DII)Z
       7: pop
       8: dload         4
      10: ldc2_w        #31                 // double 100.0d
      13: dcmpl
      14: ifgt          24
      17: dload         4
      19: dconst_0
      20: dcmpg
      21: ifgt          49
      24: new           #33                 // class org/apache/commons/math3/exception/OutOfRangeException
      27: dup
      28: getstatic     #34                 // Field org/apache/commons/math3/exception/util/LocalizedFormats.OUT_OF_BOUNDS_QUANTILE_VALUE:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
      31: dload         4
      33: invokestatic  #35                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      36: iconst_0
      37: invokestatic  #36                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      40: bipush        100
      42: invokestatic  #36                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      45: invokespecial #37                 // Method org/apache/commons/math3/exception/OutOfRangeException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V
      48: athrow
      49: iload_3
      50: ifne          57
      53: ldc2_w        #38                 // double NaNd
      56: dreturn
      57: iload_3
      58: iconst_1
      59: if_icmpne     66
      62: aload_1
      63: iload_2
      64: daload
      65: dreturn
      66: aload_0
      67: aload_1
      68: iload_2
      69: iload_3
      70: invokevirtual #40                 // Method getWorkArray:([DII)[D
      73: astore        6
      75: aload_0
      76: aload_1
      77: invokespecial #41                 // Method getPivots:([D)[I
      80: astore        7
      82: aload         6
      84: arraylength
      85: ifne          94
      88: ldc2_w        #38                 // double NaNd
      91: goto          111
      94: aload_0
      95: getfield      #14                 // Field estimationType:Lorg/apache/commons/math3/stat/descriptive/rank/Percentile$EstimationType;
      98: aload         6
     100: aload         7
     102: dload         4
     104: aload_0
     105: getfield      #18                 // Field kthSelector:Lorg/apache/commons/math3/util/KthSelector;
     108: invokevirtual #42                 // Method org/apache/commons/math3/stat/descriptive/rank/Percentile$EstimationType.evaluate:([D[IDLorg/apache/commons/math3/util/KthSelector;)D
     111: dreturn

  int medianOf3(double[], int, int);
    Code:
       0: new           #7                  // class org/apache/commons/math3/util/MedianOf3PivotingStrategy
       3: dup
       4: invokespecial #8                  // Method org/apache/commons/math3/util/MedianOf3PivotingStrategy."<init>":()V
       7: aload_1
       8: iload_2
       9: iload_3
      10: invokevirtual #43                 // Method org/apache/commons/math3/util/MedianOf3PivotingStrategy.pivotIndex:([DII)I
      13: ireturn

  public double getQuantile();
    Code:
       0: aload_0
       1: getfield      #23                 // Field quantile:D
       4: dreturn

  public void setQuantile(double) throws org.apache.commons.math3.exception.MathIllegalArgumentException;
    Code:
       0: dload_1
       1: dconst_0
       2: dcmpg
       3: ifle          14
       6: dload_1
       7: ldc2_w        #31                 // double 100.0d
      10: dcmpl
      11: ifle          38
      14: new           #33                 // class org/apache/commons/math3/exception/OutOfRangeException
      17: dup
      18: getstatic     #34                 // Field org/apache/commons/math3/exception/util/LocalizedFormats.OUT_OF_BOUNDS_QUANTILE_VALUE:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
      21: dload_1
      22: invokestatic  #35                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      25: iconst_0
      26: invokestatic  #36                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      29: bipush        100
      31: invokestatic  #36                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      34: invokespecial #37                 // Method org/apache/commons/math3/exception/OutOfRangeException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V
      37: athrow
      38: aload_0
      39: dload_1
      40: putfield      #23                 // Field quantile:D
      43: return

  public org.apache.commons.math3.stat.descriptive.rank.Percentile copy();
    Code:
       0: new           #44                 // class org/apache/commons/math3/stat/descriptive/rank/Percentile
       3: dup
       4: aload_0
       5: invokespecial #45                 // Method "<init>":(Lorg/apache/commons/math3/stat/descriptive/rank/Percentile;)V
       8: areturn

  public static void copy(org.apache.commons.math3.stat.descriptive.rank.Percentile, org.apache.commons.math3.stat.descriptive.rank.Percentile) throws org.apache.commons.math3.exception.MathUnsupportedOperationException;
    Code:
       0: new           #46                 // class org/apache/commons/math3/exception/MathUnsupportedOperationException
       3: dup
       4: invokespecial #47                 // Method org/apache/commons/math3/exception/MathUnsupportedOperationException."<init>":()V
       7: athrow

  protected double[] getWorkArray(double[], int, int);
    Code:
       0: aload_1
       1: aload_0
       2: invokevirtual #19                 // Method getDataRef:()[D
       5: if_acmpne     17
       8: aload_0
       9: invokevirtual #19                 // Method getDataRef:()[D
      12: astore        4
      14: goto          132
      17: getstatic     #48                 // Field org/apache/commons/math3/stat/descriptive/rank/Percentile$1.$SwitchMap$org$apache$commons$math3$stat$ranking$NaNStrategy:[I
      20: aload_0
      21: getfield      #16                 // Field nanStrategy:Lorg/apache/commons/math3/stat/ranking/NaNStrategy;
      24: invokevirtual #49                 // Method org/apache/commons/math3/stat/ranking/NaNStrategy.ordinal:()I
      27: iaload
      28: tableswitch   { // 1 to 4
                     1: 60
                     2: 77
                     3: 94
                     4: 108
               default: 124
          }
      60: aload_1
      61: iload_2
      62: iload_3
      63: ldc2_w        #38                 // double NaNd
      66: ldc2_w        #50                 // double Infinityd
      69: invokestatic  #52                 // Method replaceAndSlice:([DIIDD)[D
      72: astore        4
      74: goto          132
      77: aload_1
      78: iload_2
      79: iload_3
      80: ldc2_w        #38                 // double NaNd
      83: ldc2_w        #53                 // double -Infinityd
      86: invokestatic  #52                 // Method replaceAndSlice:([DIIDD)[D
      89: astore        4
      91: goto          132
      94: aload_1
      95: iload_2
      96: iload_3
      97: ldc2_w        #38                 // double NaNd
     100: invokestatic  #55                 // Method removeAndSlice:([DIID)[D
     103: astore        4
     105: goto          132
     108: aload_1
     109: iload_2
     110: iload_3
     111: invokestatic  #56                 // Method copyOf:([DII)[D
     114: astore        4
     116: aload         4
     118: invokestatic  #57                 // Method org/apache/commons/math3/util/MathArrays.checkNotNaN:([D)V
     121: goto          132
     124: aload_1
     125: iload_2
     126: iload_3
     127: invokestatic  #56                 // Method copyOf:([DII)[D
     130: astore        4
     132: aload         4
     134: areturn

  private static double[] copyOf(double[], int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokestatic  #58                 // Method org/apache/commons/math3/util/MathArrays.verifyValues:([DII)Z
       6: pop
       7: aload_0
       8: iload_1
       9: iload_1
      10: iload_2
      11: iadd
      12: invokestatic  #59                 // Method org/apache/commons/math3/util/MathArrays.copyOfRange:([DII)[D
      15: areturn

  private static double[] replaceAndSlice(double[], int, int, double, double);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokestatic  #56                 // Method copyOf:([DII)[D
       6: astore        7
       8: iconst_0
       9: istore        8
      11: iload         8
      13: iload_2
      14: if_icmpge     50
      17: aload         7
      19: iload         8
      21: dload_3
      22: aload         7
      24: iload         8
      26: daload
      27: invokestatic  #60                 // Method org/apache/commons/math3/util/Precision.equalsIncludingNaN:(DD)Z
      30: ifeq          38
      33: dload         5
      35: goto          43
      38: aload         7
      40: iload         8
      42: daload
      43: dastore
      44: iinc          8, 1
      47: goto          11
      50: aload         7
      52: areturn

  private static double[] removeAndSlice(double[], int, int, double);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokestatic  #58                 // Method org/apache/commons/math3/util/MathArrays.verifyValues:([DII)Z
       6: pop
       7: new           #61                 // class java/util/BitSet
      10: dup
      11: iload_2
      12: invokespecial #62                 // Method java/util/BitSet."<init>":(I)V
      15: astore        6
      17: iload_1
      18: istore        7
      20: iload         7
      22: iload_1
      23: iload_2
      24: iadd
      25: if_icmpge     54
      28: dload_3
      29: aload_0
      30: iload         7
      32: daload
      33: invokestatic  #60                 // Method org/apache/commons/math3/util/Precision.equalsIncludingNaN:(DD)Z
      36: ifeq          48
      39: aload         6
      41: iload         7
      43: iload_1
      44: isub
      45: invokevirtual #63                 // Method java/util/BitSet.set:(I)V
      48: iinc          7, 1
      51: goto          20
      54: aload         6
      56: invokevirtual #64                 // Method java/util/BitSet.isEmpty:()Z
      59: ifeq          73
      62: aload_0
      63: iload_1
      64: iload_2
      65: invokestatic  #56                 // Method copyOf:([DII)[D
      68: astore        5
      70: goto          194
      73: aload         6
      75: invokevirtual #65                 // Method java/util/BitSet.cardinality:()I
      78: iload_2
      79: if_icmpne     90
      82: iconst_0
      83: newarray       double
      85: astore        5
      87: goto          194
      90: iload_2
      91: aload         6
      93: invokevirtual #65                 // Method java/util/BitSet.cardinality:()I
      96: isub
      97: newarray       double
      99: astore        5
     101: iload_1
     102: istore        7
     104: iconst_0
     105: istore        8
     107: iconst_m1
     108: istore        9
     110: iconst_0
     111: istore        10
     113: aload         6
     115: iload         10
     117: invokevirtual #66                 // Method java/util/BitSet.nextSetBit:(I)I
     120: dup
     121: istore        9
     123: iconst_m1
     124: if_icmpeq     170
     127: iload         9
     129: iload         10
     131: isub
     132: istore        11
     134: aload_0
     135: iload         7
     137: aload         5
     139: iload         8
     141: iload         11
     143: invokestatic  #22                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
     146: iload         8
     148: iload         11
     150: iadd
     151: istore        8
     153: iload_1
     154: aload         6
     156: iload         9
     158: invokevirtual #67                 // Method java/util/BitSet.nextClearBit:(I)I
     161: dup
     162: istore        10
     164: iadd
     165: istore        7
     167: goto          113
     170: iload         7
     172: iload_1
     173: iload_2
     174: iadd
     175: if_icmpge     194
     178: aload_0
     179: iload         7
     181: aload         5
     183: iload         8
     185: iload_1
     186: iload_2
     187: iadd
     188: iload         7
     190: isub
     191: invokestatic  #22                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
     194: aload         5
     196: areturn

  private int[] getPivots(double[]);
    Code:
       0: aload_1
       1: aload_0
       2: invokevirtual #19                 // Method getDataRef:()[D
       5: if_acmpne     16
       8: aload_0
       9: getfield      #21                 // Field cachedPivots:[I
      12: astore_2
      13: goto          27
      16: sipush        512
      19: newarray       int
      21: astore_2
      22: aload_2
      23: iconst_m1
      24: invokestatic  #25                 // Method java/util/Arrays.fill:([II)V
      27: aload_2
      28: areturn

  public org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType getEstimationType();
    Code:
       0: aload_0
       1: getfield      #14                 // Field estimationType:Lorg/apache/commons/math3/stat/descriptive/rank/Percentile$EstimationType;
       4: areturn

  public org.apache.commons.math3.stat.descriptive.rank.Percentile withEstimationType(org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType);
    Code:
       0: new           #44                 // class org/apache/commons/math3/stat/descriptive/rank/Percentile
       3: dup
       4: aload_0
       5: getfield      #23                 // Field quantile:D
       8: aload_1
       9: aload_0
      10: getfield      #16                 // Field nanStrategy:Lorg/apache/commons/math3/stat/ranking/NaNStrategy;
      13: aload_0
      14: getfield      #18                 // Field kthSelector:Lorg/apache/commons/math3/util/KthSelector;
      17: invokespecial #10                 // Method "<init>":(DLorg/apache/commons/math3/stat/descriptive/rank/Percentile$EstimationType;Lorg/apache/commons/math3/stat/ranking/NaNStrategy;Lorg/apache/commons/math3/util/KthSelector;)V
      20: areturn

  public org.apache.commons.math3.stat.ranking.NaNStrategy getNaNStrategy();
    Code:
       0: aload_0
       1: getfield      #16                 // Field nanStrategy:Lorg/apache/commons/math3/stat/ranking/NaNStrategy;
       4: areturn

  public org.apache.commons.math3.stat.descriptive.rank.Percentile withNaNStrategy(org.apache.commons.math3.stat.ranking.NaNStrategy);
    Code:
       0: new           #44                 // class org/apache/commons/math3/stat/descriptive/rank/Percentile
       3: dup
       4: aload_0
       5: getfield      #23                 // Field quantile:D
       8: aload_0
       9: getfield      #14                 // Field estimationType:Lorg/apache/commons/math3/stat/descriptive/rank/Percentile$EstimationType;
      12: aload_1
      13: aload_0
      14: getfield      #18                 // Field kthSelector:Lorg/apache/commons/math3/util/KthSelector;
      17: invokespecial #10                 // Method "<init>":(DLorg/apache/commons/math3/stat/descriptive/rank/Percentile$EstimationType;Lorg/apache/commons/math3/stat/ranking/NaNStrategy;Lorg/apache/commons/math3/util/KthSelector;)V
      20: areturn

  public org.apache.commons.math3.util.KthSelector getKthSelector();
    Code:
       0: aload_0
       1: getfield      #18                 // Field kthSelector:Lorg/apache/commons/math3/util/KthSelector;
       4: areturn

  public org.apache.commons.math3.util.PivotingStrategyInterface getPivotingStrategy();
    Code:
       0: aload_0
       1: getfield      #18                 // Field kthSelector:Lorg/apache/commons/math3/util/KthSelector;
       4: invokevirtual #68                 // Method org/apache/commons/math3/util/KthSelector.getPivotingStrategy:()Lorg/apache/commons/math3/util/PivotingStrategyInterface;
       7: areturn

  public org.apache.commons.math3.stat.descriptive.rank.Percentile withKthSelector(org.apache.commons.math3.util.KthSelector);
    Code:
       0: new           #44                 // class org/apache/commons/math3/stat/descriptive/rank/Percentile
       3: dup
       4: aload_0
       5: getfield      #23                 // Field quantile:D
       8: aload_0
       9: getfield      #14                 // Field estimationType:Lorg/apache/commons/math3/stat/descriptive/rank/Percentile$EstimationType;
      12: aload_0
      13: getfield      #16                 // Field nanStrategy:Lorg/apache/commons/math3/stat/ranking/NaNStrategy;
      16: aload_1
      17: invokespecial #10                 // Method "<init>":(DLorg/apache/commons/math3/stat/descriptive/rank/Percentile$EstimationType;Lorg/apache/commons/math3/stat/ranking/NaNStrategy;Lorg/apache/commons/math3/util/KthSelector;)V
      20: areturn

  public org.apache.commons.math3.stat.descriptive.UnivariateStatistic copy();
    Code:
       0: aload_0
       1: invokevirtual #69                 // Method copy:()Lorg/apache/commons/math3/stat/descriptive/rank/Percentile;
       4: areturn
}
