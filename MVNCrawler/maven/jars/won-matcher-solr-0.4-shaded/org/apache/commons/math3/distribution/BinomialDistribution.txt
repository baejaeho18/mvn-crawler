Compiled from "BinomialDistribution.java"
public class org.apache.commons.math3.distribution.BinomialDistribution extends org.apache.commons.math3.distribution.AbstractIntegerDistribution {
  private static final long serialVersionUID;

  private final int numberOfTrials;

  private final double probabilityOfSuccess;

  public org.apache.commons.math3.distribution.BinomialDistribution(int, double);
    Code:
       0: aload_0
       1: new           #1                  // class org/apache/commons/math3/random/Well19937c
       4: dup
       5: invokespecial #2                  // Method org/apache/commons/math3/random/Well19937c."<init>":()V
       8: iload_1
       9: dload_2
      10: invokespecial #3                  // Method "<init>":(Lorg/apache/commons/math3/random/RandomGenerator;ID)V
      13: return

  public org.apache.commons.math3.distribution.BinomialDistribution(org.apache.commons.math3.random.RandomGenerator, int, double);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #4                  // Method org/apache/commons/math3/distribution/AbstractIntegerDistribution."<init>":(Lorg/apache/commons/math3/random/RandomGenerator;)V
       5: iload_2
       6: ifge          24
       9: new           #5                  // class org/apache/commons/math3/exception/NotPositiveException
      12: dup
      13: getstatic     #6                  // Field org/apache/commons/math3/exception/util/LocalizedFormats.NUMBER_OF_TRIALS:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
      16: iload_2
      17: invokestatic  #7                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      20: invokespecial #8                  // Method org/apache/commons/math3/exception/NotPositiveException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;Ljava/lang/Number;)V
      23: athrow
      24: dload_3
      25: dconst_0
      26: dcmpg
      27: iflt          36
      30: dload_3
      31: dconst_1
      32: dcmpl
      33: ifle          56
      36: new           #9                  // class org/apache/commons/math3/exception/OutOfRangeException
      39: dup
      40: dload_3
      41: invokestatic  #10                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      44: iconst_0
      45: invokestatic  #7                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      48: iconst_1
      49: invokestatic  #7                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      52: invokespecial #11                 // Method org/apache/commons/math3/exception/OutOfRangeException."<init>":(Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V
      55: athrow
      56: aload_0
      57: dload_3
      58: putfield      #12                 // Field probabilityOfSuccess:D
      61: aload_0
      62: iload_2
      63: putfield      #13                 // Field numberOfTrials:I
      66: return

  public int getNumberOfTrials();
    Code:
       0: aload_0
       1: getfield      #13                 // Field numberOfTrials:I
       4: ireturn

  public double getProbabilityOfSuccess();
    Code:
       0: aload_0
       1: getfield      #12                 // Field probabilityOfSuccess:D
       4: dreturn

  public double probability(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #14                 // Method logProbability:(I)D
       5: dstore_2
       6: dload_2
       7: ldc2_w        #15                 // double -Infinityd
      10: dcmpl
      11: ifne          18
      14: dconst_0
      15: goto          22
      18: dload_2
      19: invokestatic  #17                 // Method org/apache/commons/math3/util/FastMath.exp:(D)D
      22: dreturn

  public double logProbability(int);
    Code:
       0: aload_0
       1: getfield      #13                 // Field numberOfTrials:I
       4: ifne          19
       7: iload_1
       8: ifne          15
      11: dconst_0
      12: goto          18
      15: ldc2_w        #15                 // double -Infinityd
      18: dreturn
      19: iload_1
      20: iflt          31
      23: iload_1
      24: aload_0
      25: getfield      #13                 // Field numberOfTrials:I
      28: if_icmple     38
      31: ldc2_w        #15                 // double -Infinityd
      34: dstore_2
      35: goto          57
      38: iload_1
      39: aload_0
      40: getfield      #13                 // Field numberOfTrials:I
      43: aload_0
      44: getfield      #12                 // Field probabilityOfSuccess:D
      47: dconst_1
      48: aload_0
      49: getfield      #12                 // Field probabilityOfSuccess:D
      52: dsub
      53: invokestatic  #18                 // Method org/apache/commons/math3/distribution/SaddlePointExpansion.logBinomialProbability:(IIDD)D
      56: dstore_2
      57: dload_2
      58: dreturn

  public double cumulativeProbability(int);
    Code:
       0: iload_1
       1: ifge          9
       4: dconst_0
       5: dstore_2
       6: goto          43
       9: iload_1
      10: aload_0
      11: getfield      #13                 // Field numberOfTrials:I
      14: if_icmplt     22
      17: dconst_1
      18: dstore_2
      19: goto          43
      22: dconst_1
      23: aload_0
      24: getfield      #12                 // Field probabilityOfSuccess:D
      27: iload_1
      28: i2d
      29: dconst_1
      30: dadd
      31: aload_0
      32: getfield      #13                 // Field numberOfTrials:I
      35: iload_1
      36: isub
      37: i2d
      38: invokestatic  #19                 // Method org/apache/commons/math3/special/Beta.regularizedBeta:(DDD)D
      41: dsub
      42: dstore_2
      43: dload_2
      44: dreturn

  public double getNumericalMean();
    Code:
       0: aload_0
       1: getfield      #13                 // Field numberOfTrials:I
       4: i2d
       5: aload_0
       6: getfield      #12                 // Field probabilityOfSuccess:D
       9: dmul
      10: dreturn

  public double getNumericalVariance();
    Code:
       0: aload_0
       1: getfield      #12                 // Field probabilityOfSuccess:D
       4: dstore_1
       5: aload_0
       6: getfield      #13                 // Field numberOfTrials:I
       9: i2d
      10: dload_1
      11: dmul
      12: dconst_1
      13: dload_1
      14: dsub
      15: dmul
      16: dreturn

  public int getSupportLowerBound();
    Code:
       0: aload_0
       1: getfield      #12                 // Field probabilityOfSuccess:D
       4: dconst_1
       5: dcmpg
       6: ifge          13
       9: iconst_0
      10: goto          17
      13: aload_0
      14: getfield      #13                 // Field numberOfTrials:I
      17: ireturn

  public int getSupportUpperBound();
    Code:
       0: aload_0
       1: getfield      #12                 // Field probabilityOfSuccess:D
       4: dconst_0
       5: dcmpl
       6: ifle          16
       9: aload_0
      10: getfield      #13                 // Field numberOfTrials:I
      13: goto          17
      16: iconst_0
      17: ireturn

  public boolean isSupportConnected();
    Code:
       0: iconst_1
       1: ireturn
}
