Compiled from "SimplexSolver.java"
public class org.apache.commons.math3.optim.linear.SimplexSolver extends org.apache.commons.math3.optim.linear.LinearOptimizer {
  static final int DEFAULT_ULPS;

  static final double DEFAULT_CUT_OFF;

  private static final double DEFAULT_EPSILON;

  private final double epsilon;

  private final int maxUlps;

  private final double cutOff;

  private org.apache.commons.math3.optim.linear.PivotSelectionRule pivotSelection;

  private org.apache.commons.math3.optim.linear.SolutionCallback solutionCallback;

  public org.apache.commons.math3.optim.linear.SimplexSolver();
    Code:
       0: aload_0
       1: ldc2_w        #1                  // double 1.0E-6d
       4: bipush        10
       6: ldc2_w        #3                  // double 1.0E-10d
       9: invokespecial #5                  // Method "<init>":(DID)V
      12: return

  public org.apache.commons.math3.optim.linear.SimplexSolver(double);
    Code:
       0: aload_0
       1: dload_1
       2: bipush        10
       4: ldc2_w        #3                  // double 1.0E-10d
       7: invokespecial #5                  // Method "<init>":(DID)V
      10: return

  public org.apache.commons.math3.optim.linear.SimplexSolver(double, int);
    Code:
       0: aload_0
       1: dload_1
       2: iload_3
       3: ldc2_w        #3                  // double 1.0E-10d
       6: invokespecial #5                  // Method "<init>":(DID)V
       9: return

  public org.apache.commons.math3.optim.linear.SimplexSolver(double, int, double);
    Code:
       0: aload_0
       1: invokespecial #6                  // Method org/apache/commons/math3/optim/linear/LinearOptimizer."<init>":()V
       4: aload_0
       5: dload_1
       6: putfield      #7                  // Field epsilon:D
       9: aload_0
      10: iload_3
      11: putfield      #8                  // Field maxUlps:I
      14: aload_0
      15: dload         4
      17: putfield      #9                  // Field cutOff:D
      20: aload_0
      21: getstatic     #10                 // Field org/apache/commons/math3/optim/linear/PivotSelectionRule.DANTZIG:Lorg/apache/commons/math3/optim/linear/PivotSelectionRule;
      24: putfield      #11                 // Field pivotSelection:Lorg/apache/commons/math3/optim/linear/PivotSelectionRule;
      27: return

  public org.apache.commons.math3.optim.PointValuePair optimize(org.apache.commons.math3.optim.OptimizationData...) throws org.apache.commons.math3.exception.TooManyIterationsException;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #12                 // Method org/apache/commons/math3/optim/linear/LinearOptimizer.optimize:([Lorg/apache/commons/math3/optim/OptimizationData;)Lorg/apache/commons/math3/optim/PointValuePair;
       5: areturn

  protected void parseOptimizationData(org.apache.commons.math3.optim.OptimizationData...);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #13                 // Method org/apache/commons/math3/optim/linear/LinearOptimizer.parseOptimizationData:([Lorg/apache/commons/math3/optim/OptimizationData;)V
       5: aload_0
       6: aconst_null
       7: putfield      #14                 // Field solutionCallback:Lorg/apache/commons/math3/optim/linear/SolutionCallback;
      10: aload_1
      11: astore_2
      12: aload_2
      13: arraylength
      14: istore_3
      15: iconst_0
      16: istore        4
      18: iload         4
      20: iload_3
      21: if_icmpge     76
      24: aload_2
      25: iload         4
      27: aaload
      28: astore        5
      30: aload         5
      32: instanceof    #15                 // class org/apache/commons/math3/optim/linear/SolutionCallback
      35: ifeq          50
      38: aload_0
      39: aload         5
      41: checkcast     #15                 // class org/apache/commons/math3/optim/linear/SolutionCallback
      44: putfield      #14                 // Field solutionCallback:Lorg/apache/commons/math3/optim/linear/SolutionCallback;
      47: goto          70
      50: aload         5
      52: instanceof    #16                 // class org/apache/commons/math3/optim/linear/PivotSelectionRule
      55: ifeq          70
      58: aload_0
      59: aload         5
      61: checkcast     #16                 // class org/apache/commons/math3/optim/linear/PivotSelectionRule
      64: putfield      #11                 // Field pivotSelection:Lorg/apache/commons/math3/optim/linear/PivotSelectionRule;
      67: goto          70
      70: iinc          4, 1
      73: goto          18
      76: return

  private java.lang.Integer getPivotColumn(org.apache.commons.math3.optim.linear.SimplexTableau);
    Code:
       0: dconst_0
       1: dstore_2
       2: aconst_null
       3: astore        4
       5: aload_1
       6: invokevirtual #17                 // Method org/apache/commons/math3/optim/linear/SimplexTableau.getNumObjectiveFunctions:()I
       9: istore        5
      11: iload         5
      13: aload_1
      14: invokevirtual #18                 // Method org/apache/commons/math3/optim/linear/SimplexTableau.getWidth:()I
      17: iconst_1
      18: isub
      19: if_icmpge     77
      22: aload_1
      23: iconst_0
      24: iload         5
      26: invokevirtual #19                 // Method org/apache/commons/math3/optim/linear/SimplexTableau.getEntry:(II)D
      29: dstore        6
      31: dload         6
      33: dload_2
      34: dcmpg
      35: ifge          71
      38: dload         6
      40: dstore_2
      41: iload         5
      43: invokestatic  #20                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      46: astore        4
      48: aload_0
      49: getfield      #11                 // Field pivotSelection:Lorg/apache/commons/math3/optim/linear/PivotSelectionRule;
      52: getstatic     #21                 // Field org/apache/commons/math3/optim/linear/PivotSelectionRule.BLAND:Lorg/apache/commons/math3/optim/linear/PivotSelectionRule;
      55: if_acmpne     71
      58: aload_0
      59: aload_1
      60: iload         5
      62: invokespecial #22                 // Method isValidPivotColumn:(Lorg/apache/commons/math3/optim/linear/SimplexTableau;I)Z
      65: ifeq          71
      68: goto          77
      71: iinc          5, 1
      74: goto          11
      77: aload         4
      79: areturn

  private boolean isValidPivotColumn(org.apache.commons.math3.optim.linear.SimplexTableau, int);
    Code:
       0: aload_1
       1: invokevirtual #17                 // Method org/apache/commons/math3/optim/linear/SimplexTableau.getNumObjectiveFunctions:()I
       4: istore_3
       5: iload_3
       6: aload_1
       7: invokevirtual #23                 // Method org/apache/commons/math3/optim/linear/SimplexTableau.getHeight:()I
      10: if_icmpge     42
      13: aload_1
      14: iload_3
      15: iload_2
      16: invokevirtual #19                 // Method org/apache/commons/math3/optim/linear/SimplexTableau.getEntry:(II)D
      19: dstore        4
      21: dload         4
      23: dconst_0
      24: aload_0
      25: getfield      #9                  // Field cutOff:D
      28: invokestatic  #24                 // Method org/apache/commons/math3/util/Precision.compareTo:(DDD)I
      31: ifle          36
      34: iconst_1
      35: ireturn
      36: iinc          3, 1
      39: goto          5
      42: iconst_0
      43: ireturn

  private java.lang.Integer getPivotRow(org.apache.commons.math3.optim.linear.SimplexTableau, int);
    Code:
       0: new           #25                 // class java/util/ArrayList
       3: dup
       4: invokespecial #26                 // Method java/util/ArrayList."<init>":()V
       7: astore_3
       8: ldc2_w        #27                 // double 1.7976931348623157E308d
      11: dstore        4
      13: aload_1
      14: invokevirtual #17                 // Method org/apache/commons/math3/optim/linear/SimplexTableau.getNumObjectiveFunctions:()I
      17: istore        6
      19: iload         6
      21: aload_1
      22: invokevirtual #23                 // Method org/apache/commons/math3/optim/linear/SimplexTableau.getHeight:()I
      25: if_icmpge     136
      28: aload_1
      29: iload         6
      31: aload_1
      32: invokevirtual #18                 // Method org/apache/commons/math3/optim/linear/SimplexTableau.getWidth:()I
      35: iconst_1
      36: isub
      37: invokevirtual #19                 // Method org/apache/commons/math3/optim/linear/SimplexTableau.getEntry:(II)D
      40: dstore        7
      42: aload_1
      43: iload         6
      45: iload_2
      46: invokevirtual #19                 // Method org/apache/commons/math3/optim/linear/SimplexTableau.getEntry:(II)D
      49: dstore        9
      51: dload         9
      53: dconst_0
      54: aload_0
      55: getfield      #9                  // Field cutOff:D
      58: invokestatic  #24                 // Method org/apache/commons/math3/util/Precision.compareTo:(DDD)I
      61: ifle          130
      64: dload         7
      66: dload         9
      68: ddiv
      69: invokestatic  #29                 // Method org/apache/commons/math3/util/FastMath.abs:(D)D
      72: dstore        11
      74: dload         11
      76: dload         4
      78: invokestatic  #30                 // Method java/lang/Double.compare:(DD)I
      81: istore        13
      83: iload         13
      85: ifne          103
      88: aload_3
      89: iload         6
      91: invokestatic  #20                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      94: invokeinterface #31,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      99: pop
     100: goto          130
     103: iload         13
     105: ifge          130
     108: dload         11
     110: dstore        4
     112: aload_3
     113: invokeinterface #32,  1           // InterfaceMethod java/util/List.clear:()V
     118: aload_3
     119: iload         6
     121: invokestatic  #20                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     124: invokeinterface #31,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     129: pop
     130: iinc          6, 1
     133: goto          19
     136: aload_3
     137: invokeinterface #33,  1           // InterfaceMethod java/util/List.size:()I
     142: ifne          147
     145: aconst_null
     146: areturn
     147: aload_3
     148: invokeinterface #33,  1           // InterfaceMethod java/util/List.size:()I
     153: iconst_1
     154: if_icmple     338
     157: aload_1
     158: invokevirtual #34                 // Method org/apache/commons/math3/optim/linear/SimplexTableau.getNumArtificialVariables:()I
     161: ifle          267
     164: aload_3
     165: invokeinterface #35,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
     170: astore        6
     172: aload         6
     174: invokeinterface #36,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     179: ifeq          267
     182: aload         6
     184: invokeinterface #37,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     189: checkcast     #38                 // class java/lang/Integer
     192: astore        7
     194: iconst_0
     195: istore        8
     197: iload         8
     199: aload_1
     200: invokevirtual #34                 // Method org/apache/commons/math3/optim/linear/SimplexTableau.getNumArtificialVariables:()I
     203: if_icmpge     264
     206: iload         8
     208: aload_1
     209: invokevirtual #39                 // Method org/apache/commons/math3/optim/linear/SimplexTableau.getArtificialVariableOffset:()I
     212: iadd
     213: istore        9
     215: aload_1
     216: aload         7
     218: invokevirtual #40                 // Method java/lang/Integer.intValue:()I
     221: iload         9
     223: invokevirtual #19                 // Method org/apache/commons/math3/optim/linear/SimplexTableau.getEntry:(II)D
     226: dstore        10
     228: dload         10
     230: dconst_1
     231: aload_0
     232: getfield      #8                  // Field maxUlps:I
     235: invokestatic  #41                 // Method org/apache/commons/math3/util/Precision.equals:(DDI)Z
     238: ifeq          258
     241: aload         7
     243: aload_1
     244: iload         9
     246: invokevirtual #42                 // Method org/apache/commons/math3/optim/linear/SimplexTableau.getBasicRow:(I)Ljava/lang/Integer;
     249: invokevirtual #43                 // Method java/lang/Integer.equals:(Ljava/lang/Object;)Z
     252: ifeq          258
     255: aload         7
     257: areturn
     258: iinc          8, 1
     261: goto          197
     264: goto          172
     267: aconst_null
     268: astore        6
     270: aload_1
     271: invokevirtual #18                 // Method org/apache/commons/math3/optim/linear/SimplexTableau.getWidth:()I
     274: istore        7
     276: aload_3
     277: invokeinterface #35,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
     282: astore        8
     284: aload         8
     286: invokeinterface #36,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     291: ifeq          335
     294: aload         8
     296: invokeinterface #37,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     301: checkcast     #38                 // class java/lang/Integer
     304: astore        9
     306: aload_1
     307: aload         9
     309: invokevirtual #40                 // Method java/lang/Integer.intValue:()I
     312: invokevirtual #44                 // Method org/apache/commons/math3/optim/linear/SimplexTableau.getBasicVariable:(I)I
     315: istore        10
     317: iload         10
     319: iload         7
     321: if_icmpge     332
     324: iload         10
     326: istore        7
     328: aload         9
     330: astore        6
     332: goto          284
     335: aload         6
     337: areturn
     338: aload_3
     339: iconst_0
     340: invokeinterface #45,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
     345: checkcast     #38                 // class java/lang/Integer
     348: areturn

  protected void doIteration(org.apache.commons.math3.optim.linear.SimplexTableau) throws org.apache.commons.math3.exception.TooManyIterationsException, org.apache.commons.math3.optim.linear.UnboundedSolutionException;
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method incrementIterationCount:()V
       4: aload_0
       5: aload_1
       6: invokespecial #47                 // Method getPivotColumn:(Lorg/apache/commons/math3/optim/linear/SimplexTableau;)Ljava/lang/Integer;
       9: astore_2
      10: aload_0
      11: aload_1
      12: aload_2
      13: invokevirtual #40                 // Method java/lang/Integer.intValue:()I
      16: invokespecial #48                 // Method getPivotRow:(Lorg/apache/commons/math3/optim/linear/SimplexTableau;I)Ljava/lang/Integer;
      19: astore_3
      20: aload_3
      21: ifnonnull     32
      24: new           #49                 // class org/apache/commons/math3/optim/linear/UnboundedSolutionException
      27: dup
      28: invokespecial #50                 // Method org/apache/commons/math3/optim/linear/UnboundedSolutionException."<init>":()V
      31: athrow
      32: aload_1
      33: aload_2
      34: invokevirtual #40                 // Method java/lang/Integer.intValue:()I
      37: aload_3
      38: invokevirtual #40                 // Method java/lang/Integer.intValue:()I
      41: invokevirtual #51                 // Method org/apache/commons/math3/optim/linear/SimplexTableau.performRowOperations:(II)V
      44: return

  protected void solvePhase1(org.apache.commons.math3.optim.linear.SimplexTableau) throws org.apache.commons.math3.exception.TooManyIterationsException, org.apache.commons.math3.optim.linear.UnboundedSolutionException, org.apache.commons.math3.optim.linear.NoFeasibleSolutionException;
    Code:
       0: aload_1
       1: invokevirtual #34                 // Method org/apache/commons/math3/optim/linear/SimplexTableau.getNumArtificialVariables:()I
       4: ifne          8
       7: return
       8: aload_1
       9: invokevirtual #52                 // Method org/apache/commons/math3/optim/linear/SimplexTableau.isOptimal:()Z
      12: ifne          23
      15: aload_0
      16: aload_1
      17: invokevirtual #53                 // Method doIteration:(Lorg/apache/commons/math3/optim/linear/SimplexTableau;)V
      20: goto          8
      23: aload_1
      24: iconst_0
      25: aload_1
      26: invokevirtual #54                 // Method org/apache/commons/math3/optim/linear/SimplexTableau.getRhsOffset:()I
      29: invokevirtual #19                 // Method org/apache/commons/math3/optim/linear/SimplexTableau.getEntry:(II)D
      32: dconst_0
      33: aload_0
      34: getfield      #7                  // Field epsilon:D
      37: invokestatic  #55                 // Method org/apache/commons/math3/util/Precision.equals:(DDD)Z
      40: ifne          51
      43: new           #56                 // class org/apache/commons/math3/optim/linear/NoFeasibleSolutionException
      46: dup
      47: invokespecial #57                 // Method org/apache/commons/math3/optim/linear/NoFeasibleSolutionException."<init>":()V
      50: athrow
      51: return

  public org.apache.commons.math3.optim.PointValuePair doOptimize() throws org.apache.commons.math3.exception.TooManyIterationsException, org.apache.commons.math3.optim.linear.UnboundedSolutionException, org.apache.commons.math3.optim.linear.NoFeasibleSolutionException;
    Code:
       0: aload_0
       1: getfield      #14                 // Field solutionCallback:Lorg/apache/commons/math3/optim/linear/SolutionCallback;
       4: ifnull        15
       7: aload_0
       8: getfield      #14                 // Field solutionCallback:Lorg/apache/commons/math3/optim/linear/SolutionCallback;
      11: aconst_null
      12: invokevirtual #58                 // Method org/apache/commons/math3/optim/linear/SolutionCallback.setTableau:(Lorg/apache/commons/math3/optim/linear/SimplexTableau;)V
      15: new           #59                 // class org/apache/commons/math3/optim/linear/SimplexTableau
      18: dup
      19: aload_0
      20: invokevirtual #60                 // Method getFunction:()Lorg/apache/commons/math3/optim/linear/LinearObjectiveFunction;
      23: aload_0
      24: invokevirtual #61                 // Method getConstraints:()Ljava/util/Collection;
      27: aload_0
      28: invokevirtual #62                 // Method getGoalType:()Lorg/apache/commons/math3/optim/nonlinear/scalar/GoalType;
      31: aload_0
      32: invokevirtual #63                 // Method isRestrictedToNonNegative:()Z
      35: aload_0
      36: getfield      #7                  // Field epsilon:D
      39: aload_0
      40: getfield      #8                  // Field maxUlps:I
      43: invokespecial #64                 // Method org/apache/commons/math3/optim/linear/SimplexTableau."<init>":(Lorg/apache/commons/math3/optim/linear/LinearObjectiveFunction;Ljava/util/Collection;Lorg/apache/commons/math3/optim/nonlinear/scalar/GoalType;ZDI)V
      46: astore_1
      47: aload_0
      48: aload_1
      49: invokevirtual #65                 // Method solvePhase1:(Lorg/apache/commons/math3/optim/linear/SimplexTableau;)V
      52: aload_1
      53: invokevirtual #66                 // Method org/apache/commons/math3/optim/linear/SimplexTableau.dropPhase1Objective:()V
      56: aload_0
      57: getfield      #14                 // Field solutionCallback:Lorg/apache/commons/math3/optim/linear/SolutionCallback;
      60: ifnull        71
      63: aload_0
      64: getfield      #14                 // Field solutionCallback:Lorg/apache/commons/math3/optim/linear/SolutionCallback;
      67: aload_1
      68: invokevirtual #58                 // Method org/apache/commons/math3/optim/linear/SolutionCallback.setTableau:(Lorg/apache/commons/math3/optim/linear/SimplexTableau;)V
      71: aload_1
      72: invokevirtual #52                 // Method org/apache/commons/math3/optim/linear/SimplexTableau.isOptimal:()Z
      75: ifne          86
      78: aload_0
      79: aload_1
      80: invokevirtual #53                 // Method doIteration:(Lorg/apache/commons/math3/optim/linear/SimplexTableau;)V
      83: goto          71
      86: aload_1
      87: invokevirtual #67                 // Method org/apache/commons/math3/optim/linear/SimplexTableau.getSolution:()Lorg/apache/commons/math3/optim/PointValuePair;
      90: astore_2
      91: aload_0
      92: invokevirtual #63                 // Method isRestrictedToNonNegative:()Z
      95: ifeq          142
      98: aload_2
      99: invokevirtual #68                 // Method org/apache/commons/math3/optim/PointValuePair.getPoint:()[D
     102: astore_3
     103: iconst_0
     104: istore        4
     106: iload         4
     108: aload_3
     109: arraylength
     110: if_icmpge     142
     113: aload_3
     114: iload         4
     116: daload
     117: dconst_0
     118: aload_0
     119: getfield      #7                  // Field epsilon:D
     122: invokestatic  #24                 // Method org/apache/commons/math3/util/Precision.compareTo:(DDD)I
     125: ifge          136
     128: new           #56                 // class org/apache/commons/math3/optim/linear/NoFeasibleSolutionException
     131: dup
     132: invokespecial #57                 // Method org/apache/commons/math3/optim/linear/NoFeasibleSolutionException."<init>":()V
     135: athrow
     136: iinc          4, 1
     139: goto          106
     142: aload_2
     143: areturn

  public java.lang.Object optimize(org.apache.commons.math3.optim.OptimizationData[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #69                 // Method optimize:([Lorg/apache/commons/math3/optim/OptimizationData;)Lorg/apache/commons/math3/optim/PointValuePair;
       5: areturn

  public java.lang.Object doOptimize();
    Code:
       0: aload_0
       1: invokevirtual #70                 // Method doOptimize:()Lorg/apache/commons/math3/optim/PointValuePair;
       4: areturn
}
