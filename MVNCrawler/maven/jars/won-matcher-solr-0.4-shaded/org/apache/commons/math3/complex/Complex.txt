Compiled from "Complex.java"
public class org.apache.commons.math3.complex.Complex implements org.apache.commons.math3.FieldElement<org.apache.commons.math3.complex.Complex>, java.io.Serializable {
  public static final org.apache.commons.math3.complex.Complex I;

  public static final org.apache.commons.math3.complex.Complex NaN;

  public static final org.apache.commons.math3.complex.Complex INF;

  public static final org.apache.commons.math3.complex.Complex ONE;

  public static final org.apache.commons.math3.complex.Complex ZERO;

  private static final long serialVersionUID;

  private final double imaginary;

  private final double real;

  private final transient boolean isNaN;

  private final transient boolean isInfinite;

  public org.apache.commons.math3.complex.Complex(double);
    Code:
       0: aload_0
       1: dload_1
       2: dconst_0
       3: invokespecial #1                  // Method "<init>":(DD)V
       6: return

  public org.apache.commons.math3.complex.Complex(double, double);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: dload_1
       6: putfield      #3                  // Field real:D
       9: aload_0
      10: dload_3
      11: putfield      #4                  // Field imaginary:D
      14: aload_0
      15: dload_1
      16: invokestatic  #5                  // Method java/lang/Double.isNaN:(D)Z
      19: ifne          29
      22: dload_3
      23: invokestatic  #5                  // Method java/lang/Double.isNaN:(D)Z
      26: ifeq          33
      29: iconst_1
      30: goto          34
      33: iconst_0
      34: putfield      #6                  // Field isNaN:Z
      37: aload_0
      38: aload_0
      39: getfield      #6                  // Field isNaN:Z
      42: ifne          63
      45: dload_1
      46: invokestatic  #7                  // Method java/lang/Double.isInfinite:(D)Z
      49: ifne          59
      52: dload_3
      53: invokestatic  #7                  // Method java/lang/Double.isInfinite:(D)Z
      56: ifeq          63
      59: iconst_1
      60: goto          64
      63: iconst_0
      64: putfield      #8                  // Field isInfinite:Z
      67: return

  public double abs();
    Code:
       0: aload_0
       1: getfield      #6                  // Field isNaN:Z
       4: ifeq          11
       7: ldc2_w        #9                  // double NaNd
      10: dreturn
      11: aload_0
      12: invokevirtual #11                 // Method isInfinite:()Z
      15: ifeq          22
      18: ldc2_w        #12                 // double Infinityd
      21: dreturn
      22: aload_0
      23: getfield      #3                  // Field real:D
      26: invokestatic  #14                 // Method org/apache/commons/math3/util/FastMath.abs:(D)D
      29: aload_0
      30: getfield      #4                  // Field imaginary:D
      33: invokestatic  #14                 // Method org/apache/commons/math3/util/FastMath.abs:(D)D
      36: dcmpg
      37: ifge          84
      40: aload_0
      41: getfield      #4                  // Field imaginary:D
      44: dconst_0
      45: dcmpl
      46: ifne          57
      49: aload_0
      50: getfield      #3                  // Field real:D
      53: invokestatic  #14                 // Method org/apache/commons/math3/util/FastMath.abs:(D)D
      56: dreturn
      57: aload_0
      58: getfield      #3                  // Field real:D
      61: aload_0
      62: getfield      #4                  // Field imaginary:D
      65: ddiv
      66: dstore_1
      67: aload_0
      68: getfield      #4                  // Field imaginary:D
      71: invokestatic  #14                 // Method org/apache/commons/math3/util/FastMath.abs:(D)D
      74: dconst_1
      75: dload_1
      76: dload_1
      77: dmul
      78: dadd
      79: invokestatic  #15                 // Method org/apache/commons/math3/util/FastMath.sqrt:(D)D
      82: dmul
      83: dreturn
      84: aload_0
      85: getfield      #3                  // Field real:D
      88: dconst_0
      89: dcmpl
      90: ifne          101
      93: aload_0
      94: getfield      #4                  // Field imaginary:D
      97: invokestatic  #14                 // Method org/apache/commons/math3/util/FastMath.abs:(D)D
     100: dreturn
     101: aload_0
     102: getfield      #4                  // Field imaginary:D
     105: aload_0
     106: getfield      #3                  // Field real:D
     109: ddiv
     110: dstore_1
     111: aload_0
     112: getfield      #3                  // Field real:D
     115: invokestatic  #14                 // Method org/apache/commons/math3/util/FastMath.abs:(D)D
     118: dconst_1
     119: dload_1
     120: dload_1
     121: dmul
     122: dadd
     123: invokestatic  #15                 // Method org/apache/commons/math3/util/FastMath.sqrt:(D)D
     126: dmul
     127: dreturn

  public org.apache.commons.math3.complex.Complex add(org.apache.commons.math3.complex.Complex) throws org.apache.commons.math3.exception.NullArgumentException;
    Code:
       0: aload_1
       1: invokestatic  #16                 // Method org/apache/commons/math3/util/MathUtils.checkNotNull:(Ljava/lang/Object;)V
       4: aload_0
       5: getfield      #6                  // Field isNaN:Z
       8: ifne          18
      11: aload_1
      12: getfield      #6                  // Field isNaN:Z
      15: ifeq          22
      18: getstatic     #17                 // Field NaN:Lorg/apache/commons/math3/complex/Complex;
      21: areturn
      22: aload_0
      23: aload_0
      24: getfield      #3                  // Field real:D
      27: aload_1
      28: invokevirtual #18                 // Method getReal:()D
      31: dadd
      32: aload_0
      33: getfield      #4                  // Field imaginary:D
      36: aload_1
      37: invokevirtual #19                 // Method getImaginary:()D
      40: dadd
      41: invokevirtual #20                 // Method createComplex:(DD)Lorg/apache/commons/math3/complex/Complex;
      44: areturn

  public org.apache.commons.math3.complex.Complex add(double);
    Code:
       0: aload_0
       1: getfield      #6                  // Field isNaN:Z
       4: ifne          14
       7: dload_1
       8: invokestatic  #5                  // Method java/lang/Double.isNaN:(D)Z
      11: ifeq          18
      14: getstatic     #17                 // Field NaN:Lorg/apache/commons/math3/complex/Complex;
      17: areturn
      18: aload_0
      19: aload_0
      20: getfield      #3                  // Field real:D
      23: dload_1
      24: dadd
      25: aload_0
      26: getfield      #4                  // Field imaginary:D
      29: invokevirtual #20                 // Method createComplex:(DD)Lorg/apache/commons/math3/complex/Complex;
      32: areturn

  public org.apache.commons.math3.complex.Complex conjugate();
    Code:
       0: aload_0
       1: getfield      #6                  // Field isNaN:Z
       4: ifeq          11
       7: getstatic     #17                 // Field NaN:Lorg/apache/commons/math3/complex/Complex;
      10: areturn
      11: aload_0
      12: aload_0
      13: getfield      #3                  // Field real:D
      16: aload_0
      17: getfield      #4                  // Field imaginary:D
      20: dneg
      21: invokevirtual #20                 // Method createComplex:(DD)Lorg/apache/commons/math3/complex/Complex;
      24: areturn

  public org.apache.commons.math3.complex.Complex divide(org.apache.commons.math3.complex.Complex) throws org.apache.commons.math3.exception.NullArgumentException;
    Code:
       0: aload_1
       1: invokestatic  #16                 // Method org/apache/commons/math3/util/MathUtils.checkNotNull:(Ljava/lang/Object;)V
       4: aload_0
       5: getfield      #6                  // Field isNaN:Z
       8: ifne          18
      11: aload_1
      12: getfield      #6                  // Field isNaN:Z
      15: ifeq          22
      18: getstatic     #17                 // Field NaN:Lorg/apache/commons/math3/complex/Complex;
      21: areturn
      22: aload_1
      23: invokevirtual #18                 // Method getReal:()D
      26: dstore_2
      27: aload_1
      28: invokevirtual #19                 // Method getImaginary:()D
      31: dstore        4
      33: dload_2
      34: dconst_0
      35: dcmpl
      36: ifne          50
      39: dload         4
      41: dconst_0
      42: dcmpl
      43: ifne          50
      46: getstatic     #17                 // Field NaN:Lorg/apache/commons/math3/complex/Complex;
      49: areturn
      50: aload_1
      51: invokevirtual #11                 // Method isInfinite:()Z
      54: ifeq          68
      57: aload_0
      58: invokevirtual #11                 // Method isInfinite:()Z
      61: ifne          68
      64: getstatic     #21                 // Field ZERO:Lorg/apache/commons/math3/complex/Complex;
      67: areturn
      68: dload_2
      69: invokestatic  #14                 // Method org/apache/commons/math3/util/FastMath.abs:(D)D
      72: dload         4
      74: invokestatic  #14                 // Method org/apache/commons/math3/util/FastMath.abs:(D)D
      77: dcmpg
      78: ifge          131
      81: dload_2
      82: dload         4
      84: ddiv
      85: dstore        6
      87: dload_2
      88: dload         6
      90: dmul
      91: dload         4
      93: dadd
      94: dstore        8
      96: aload_0
      97: aload_0
      98: getfield      #3                  // Field real:D
     101: dload         6
     103: dmul
     104: aload_0
     105: getfield      #4                  // Field imaginary:D
     108: dadd
     109: dload         8
     111: ddiv
     112: aload_0
     113: getfield      #4                  // Field imaginary:D
     116: dload         6
     118: dmul
     119: aload_0
     120: getfield      #3                  // Field real:D
     123: dsub
     124: dload         8
     126: ddiv
     127: invokevirtual #20                 // Method createComplex:(DD)Lorg/apache/commons/math3/complex/Complex;
     130: areturn
     131: dload         4
     133: dload_2
     134: ddiv
     135: dstore        6
     137: dload         4
     139: dload         6
     141: dmul
     142: dload_2
     143: dadd
     144: dstore        8
     146: aload_0
     147: aload_0
     148: getfield      #4                  // Field imaginary:D
     151: dload         6
     153: dmul
     154: aload_0
     155: getfield      #3                  // Field real:D
     158: dadd
     159: dload         8
     161: ddiv
     162: aload_0
     163: getfield      #4                  // Field imaginary:D
     166: aload_0
     167: getfield      #3                  // Field real:D
     170: dload         6
     172: dmul
     173: dsub
     174: dload         8
     176: ddiv
     177: invokevirtual #20                 // Method createComplex:(DD)Lorg/apache/commons/math3/complex/Complex;
     180: areturn

  public org.apache.commons.math3.complex.Complex divide(double);
    Code:
       0: aload_0
       1: getfield      #6                  // Field isNaN:Z
       4: ifne          14
       7: dload_1
       8: invokestatic  #5                  // Method java/lang/Double.isNaN:(D)Z
      11: ifeq          18
      14: getstatic     #17                 // Field NaN:Lorg/apache/commons/math3/complex/Complex;
      17: areturn
      18: dload_1
      19: dconst_0
      20: dcmpl
      21: ifne          28
      24: getstatic     #17                 // Field NaN:Lorg/apache/commons/math3/complex/Complex;
      27: areturn
      28: dload_1
      29: invokestatic  #7                  // Method java/lang/Double.isInfinite:(D)Z
      32: ifeq          52
      35: aload_0
      36: invokevirtual #11                 // Method isInfinite:()Z
      39: ifne          48
      42: getstatic     #21                 // Field ZERO:Lorg/apache/commons/math3/complex/Complex;
      45: goto          51
      48: getstatic     #17                 // Field NaN:Lorg/apache/commons/math3/complex/Complex;
      51: areturn
      52: aload_0
      53: aload_0
      54: getfield      #3                  // Field real:D
      57: dload_1
      58: ddiv
      59: aload_0
      60: getfield      #4                  // Field imaginary:D
      63: dload_1
      64: ddiv
      65: invokevirtual #20                 // Method createComplex:(DD)Lorg/apache/commons/math3/complex/Complex;
      68: areturn

  public org.apache.commons.math3.complex.Complex reciprocal();
    Code:
       0: aload_0
       1: getfield      #6                  // Field isNaN:Z
       4: ifeq          11
       7: getstatic     #17                 // Field NaN:Lorg/apache/commons/math3/complex/Complex;
      10: areturn
      11: aload_0
      12: getfield      #3                  // Field real:D
      15: dconst_0
      16: dcmpl
      17: ifne          33
      20: aload_0
      21: getfield      #4                  // Field imaginary:D
      24: dconst_0
      25: dcmpl
      26: ifne          33
      29: getstatic     #22                 // Field INF:Lorg/apache/commons/math3/complex/Complex;
      32: areturn
      33: aload_0
      34: getfield      #8                  // Field isInfinite:Z
      37: ifeq          44
      40: getstatic     #21                 // Field ZERO:Lorg/apache/commons/math3/complex/Complex;
      43: areturn
      44: aload_0
      45: getfield      #3                  // Field real:D
      48: invokestatic  #14                 // Method org/apache/commons/math3/util/FastMath.abs:(D)D
      51: aload_0
      52: getfield      #4                  // Field imaginary:D
      55: invokestatic  #14                 // Method org/apache/commons/math3/util/FastMath.abs:(D)D
      58: dcmpg
      59: ifge          96
      62: aload_0
      63: getfield      #3                  // Field real:D
      66: aload_0
      67: getfield      #4                  // Field imaginary:D
      70: ddiv
      71: dstore_1
      72: dconst_1
      73: aload_0
      74: getfield      #3                  // Field real:D
      77: dload_1
      78: dmul
      79: aload_0
      80: getfield      #4                  // Field imaginary:D
      83: dadd
      84: ddiv
      85: dstore_3
      86: aload_0
      87: dload_3
      88: dload_1
      89: dmul
      90: dload_3
      91: dneg
      92: invokevirtual #20                 // Method createComplex:(DD)Lorg/apache/commons/math3/complex/Complex;
      95: areturn
      96: aload_0
      97: getfield      #4                  // Field imaginary:D
     100: aload_0
     101: getfield      #3                  // Field real:D
     104: ddiv
     105: dstore_1
     106: dconst_1
     107: aload_0
     108: getfield      #4                  // Field imaginary:D
     111: dload_1
     112: dmul
     113: aload_0
     114: getfield      #3                  // Field real:D
     117: dadd
     118: ddiv
     119: dstore_3
     120: aload_0
     121: dload_3
     122: dload_3
     123: dneg
     124: dload_1
     125: dmul
     126: invokevirtual #20                 // Method createComplex:(DD)Lorg/apache/commons/math3/complex/Complex;
     129: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: instanceof    #23                 // class org/apache/commons/math3/complex/Complex
      11: ifeq          65
      14: aload_1
      15: checkcast     #23                 // class org/apache/commons/math3/complex/Complex
      18: astore_2
      19: aload_2
      20: getfield      #6                  // Field isNaN:Z
      23: ifeq          31
      26: aload_0
      27: getfield      #6                  // Field isNaN:Z
      30: ireturn
      31: aload_0
      32: getfield      #3                  // Field real:D
      35: aload_2
      36: getfield      #3                  // Field real:D
      39: invokestatic  #24                 // Method org/apache/commons/math3/util/MathUtils.equals:(DD)Z
      42: ifeq          63
      45: aload_0
      46: getfield      #4                  // Field imaginary:D
      49: aload_2
      50: getfield      #4                  // Field imaginary:D
      53: invokestatic  #24                 // Method org/apache/commons/math3/util/MathUtils.equals:(DD)Z
      56: ifeq          63
      59: iconst_1
      60: goto          64
      63: iconst_0
      64: ireturn
      65: iconst_0
      66: ireturn

  public static boolean equals(org.apache.commons.math3.complex.Complex, org.apache.commons.math3.complex.Complex, int);
    Code:
       0: aload_0
       1: getfield      #3                  // Field real:D
       4: aload_1
       5: getfield      #3                  // Field real:D
       8: iload_2
       9: invokestatic  #25                 // Method org/apache/commons/math3/util/Precision.equals:(DDI)Z
      12: ifeq          34
      15: aload_0
      16: getfield      #4                  // Field imaginary:D
      19: aload_1
      20: getfield      #4                  // Field imaginary:D
      23: iload_2
      24: invokestatic  #25                 // Method org/apache/commons/math3/util/Precision.equals:(DDI)Z
      27: ifeq          34
      30: iconst_1
      31: goto          35
      34: iconst_0
      35: ireturn

  public static boolean equals(org.apache.commons.math3.complex.Complex, org.apache.commons.math3.complex.Complex);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_1
       3: invokestatic  #26                 // Method equals:(Lorg/apache/commons/math3/complex/Complex;Lorg/apache/commons/math3/complex/Complex;I)Z
       6: ireturn

  public static boolean equals(org.apache.commons.math3.complex.Complex, org.apache.commons.math3.complex.Complex, double);
    Code:
       0: aload_0
       1: getfield      #3                  // Field real:D
       4: aload_1
       5: getfield      #3                  // Field real:D
       8: dload_2
       9: invokestatic  #27                 // Method org/apache/commons/math3/util/Precision.equals:(DDD)Z
      12: ifeq          34
      15: aload_0
      16: getfield      #4                  // Field imaginary:D
      19: aload_1
      20: getfield      #4                  // Field imaginary:D
      23: dload_2
      24: invokestatic  #27                 // Method org/apache/commons/math3/util/Precision.equals:(DDD)Z
      27: ifeq          34
      30: iconst_1
      31: goto          35
      34: iconst_0
      35: ireturn

  public static boolean equalsWithRelativeTolerance(org.apache.commons.math3.complex.Complex, org.apache.commons.math3.complex.Complex, double);
    Code:
       0: aload_0
       1: getfield      #3                  // Field real:D
       4: aload_1
       5: getfield      #3                  // Field real:D
       8: dload_2
       9: invokestatic  #28                 // Method org/apache/commons/math3/util/Precision.equalsWithRelativeTolerance:(DDD)Z
      12: ifeq          34
      15: aload_0
      16: getfield      #4                  // Field imaginary:D
      19: aload_1
      20: getfield      #4                  // Field imaginary:D
      23: dload_2
      24: invokestatic  #28                 // Method org/apache/commons/math3/util/Precision.equalsWithRelativeTolerance:(DDD)Z
      27: ifeq          34
      30: iconst_1
      31: goto          35
      34: iconst_0
      35: ireturn

  public int hashCode();
    Code:
       0: aload_0
       1: getfield      #6                  // Field isNaN:Z
       4: ifeq          10
       7: bipush        7
       9: ireturn
      10: bipush        37
      12: bipush        17
      14: aload_0
      15: getfield      #4                  // Field imaginary:D
      18: invokestatic  #29                 // Method org/apache/commons/math3/util/MathUtils.hash:(D)I
      21: imul
      22: aload_0
      23: getfield      #3                  // Field real:D
      26: invokestatic  #29                 // Method org/apache/commons/math3/util/MathUtils.hash:(D)I
      29: iadd
      30: imul
      31: ireturn

  public double getImaginary();
    Code:
       0: aload_0
       1: getfield      #4                  // Field imaginary:D
       4: dreturn

  public double getReal();
    Code:
       0: aload_0
       1: getfield      #3                  // Field real:D
       4: dreturn

  public boolean isNaN();
    Code:
       0: aload_0
       1: getfield      #6                  // Field isNaN:Z
       4: ireturn

  public boolean isInfinite();
    Code:
       0: aload_0
       1: getfield      #8                  // Field isInfinite:Z
       4: ireturn

  public org.apache.commons.math3.complex.Complex multiply(org.apache.commons.math3.complex.Complex) throws org.apache.commons.math3.exception.NullArgumentException;
    Code:
       0: aload_1
       1: invokestatic  #16                 // Method org/apache/commons/math3/util/MathUtils.checkNotNull:(Ljava/lang/Object;)V
       4: aload_0
       5: getfield      #6                  // Field isNaN:Z
       8: ifne          18
      11: aload_1
      12: getfield      #6                  // Field isNaN:Z
      15: ifeq          22
      18: getstatic     #17                 // Field NaN:Lorg/apache/commons/math3/complex/Complex;
      21: areturn
      22: aload_0
      23: getfield      #3                  // Field real:D
      26: invokestatic  #7                  // Method java/lang/Double.isInfinite:(D)Z
      29: ifne          62
      32: aload_0
      33: getfield      #4                  // Field imaginary:D
      36: invokestatic  #7                  // Method java/lang/Double.isInfinite:(D)Z
      39: ifne          62
      42: aload_1
      43: getfield      #3                  // Field real:D
      46: invokestatic  #7                  // Method java/lang/Double.isInfinite:(D)Z
      49: ifne          62
      52: aload_1
      53: getfield      #4                  // Field imaginary:D
      56: invokestatic  #7                  // Method java/lang/Double.isInfinite:(D)Z
      59: ifeq          66
      62: getstatic     #22                 // Field INF:Lorg/apache/commons/math3/complex/Complex;
      65: areturn
      66: aload_0
      67: aload_0
      68: getfield      #3                  // Field real:D
      71: aload_1
      72: getfield      #3                  // Field real:D
      75: dmul
      76: aload_0
      77: getfield      #4                  // Field imaginary:D
      80: aload_1
      81: getfield      #4                  // Field imaginary:D
      84: dmul
      85: dsub
      86: aload_0
      87: getfield      #3                  // Field real:D
      90: aload_1
      91: getfield      #4                  // Field imaginary:D
      94: dmul
      95: aload_0
      96: getfield      #4                  // Field imaginary:D
      99: aload_1
     100: getfield      #3                  // Field real:D
     103: dmul
     104: dadd
     105: invokevirtual #20                 // Method createComplex:(DD)Lorg/apache/commons/math3/complex/Complex;
     108: areturn

  public org.apache.commons.math3.complex.Complex multiply(int);
    Code:
       0: aload_0
       1: getfield      #6                  // Field isNaN:Z
       4: ifeq          11
       7: getstatic     #17                 // Field NaN:Lorg/apache/commons/math3/complex/Complex;
      10: areturn
      11: aload_0
      12: getfield      #3                  // Field real:D
      15: invokestatic  #7                  // Method java/lang/Double.isInfinite:(D)Z
      18: ifne          31
      21: aload_0
      22: getfield      #4                  // Field imaginary:D
      25: invokestatic  #7                  // Method java/lang/Double.isInfinite:(D)Z
      28: ifeq          35
      31: getstatic     #22                 // Field INF:Lorg/apache/commons/math3/complex/Complex;
      34: areturn
      35: aload_0
      36: aload_0
      37: getfield      #3                  // Field real:D
      40: iload_1
      41: i2d
      42: dmul
      43: aload_0
      44: getfield      #4                  // Field imaginary:D
      47: iload_1
      48: i2d
      49: dmul
      50: invokevirtual #20                 // Method createComplex:(DD)Lorg/apache/commons/math3/complex/Complex;
      53: areturn

  public org.apache.commons.math3.complex.Complex multiply(double);
    Code:
       0: aload_0
       1: getfield      #6                  // Field isNaN:Z
       4: ifne          14
       7: dload_1
       8: invokestatic  #5                  // Method java/lang/Double.isNaN:(D)Z
      11: ifeq          18
      14: getstatic     #17                 // Field NaN:Lorg/apache/commons/math3/complex/Complex;
      17: areturn
      18: aload_0
      19: getfield      #3                  // Field real:D
      22: invokestatic  #7                  // Method java/lang/Double.isInfinite:(D)Z
      25: ifne          45
      28: aload_0
      29: getfield      #4                  // Field imaginary:D
      32: invokestatic  #7                  // Method java/lang/Double.isInfinite:(D)Z
      35: ifne          45
      38: dload_1
      39: invokestatic  #7                  // Method java/lang/Double.isInfinite:(D)Z
      42: ifeq          49
      45: getstatic     #22                 // Field INF:Lorg/apache/commons/math3/complex/Complex;
      48: areturn
      49: aload_0
      50: aload_0
      51: getfield      #3                  // Field real:D
      54: dload_1
      55: dmul
      56: aload_0
      57: getfield      #4                  // Field imaginary:D
      60: dload_1
      61: dmul
      62: invokevirtual #20                 // Method createComplex:(DD)Lorg/apache/commons/math3/complex/Complex;
      65: areturn

  public org.apache.commons.math3.complex.Complex negate();
    Code:
       0: aload_0
       1: getfield      #6                  // Field isNaN:Z
       4: ifeq          11
       7: getstatic     #17                 // Field NaN:Lorg/apache/commons/math3/complex/Complex;
      10: areturn
      11: aload_0
      12: aload_0
      13: getfield      #3                  // Field real:D
      16: dneg
      17: aload_0
      18: getfield      #4                  // Field imaginary:D
      21: dneg
      22: invokevirtual #20                 // Method createComplex:(DD)Lorg/apache/commons/math3/complex/Complex;
      25: areturn

  public org.apache.commons.math3.complex.Complex subtract(org.apache.commons.math3.complex.Complex) throws org.apache.commons.math3.exception.NullArgumentException;
    Code:
       0: aload_1
       1: invokestatic  #16                 // Method org/apache/commons/math3/util/MathUtils.checkNotNull:(Ljava/lang/Object;)V
       4: aload_0
       5: getfield      #6                  // Field isNaN:Z
       8: ifne          18
      11: aload_1
      12: getfield      #6                  // Field isNaN:Z
      15: ifeq          22
      18: getstatic     #17                 // Field NaN:Lorg/apache/commons/math3/complex/Complex;
      21: areturn
      22: aload_0
      23: aload_0
      24: getfield      #3                  // Field real:D
      27: aload_1
      28: invokevirtual #18                 // Method getReal:()D
      31: dsub
      32: aload_0
      33: getfield      #4                  // Field imaginary:D
      36: aload_1
      37: invokevirtual #19                 // Method getImaginary:()D
      40: dsub
      41: invokevirtual #20                 // Method createComplex:(DD)Lorg/apache/commons/math3/complex/Complex;
      44: areturn

  public org.apache.commons.math3.complex.Complex subtract(double);
    Code:
       0: aload_0
       1: getfield      #6                  // Field isNaN:Z
       4: ifne          14
       7: dload_1
       8: invokestatic  #5                  // Method java/lang/Double.isNaN:(D)Z
      11: ifeq          18
      14: getstatic     #17                 // Field NaN:Lorg/apache/commons/math3/complex/Complex;
      17: areturn
      18: aload_0
      19: aload_0
      20: getfield      #3                  // Field real:D
      23: dload_1
      24: dsub
      25: aload_0
      26: getfield      #4                  // Field imaginary:D
      29: invokevirtual #20                 // Method createComplex:(DD)Lorg/apache/commons/math3/complex/Complex;
      32: areturn

  public org.apache.commons.math3.complex.Complex acos();
    Code:
       0: aload_0
       1: getfield      #6                  // Field isNaN:Z
       4: ifeq          11
       7: getstatic     #17                 // Field NaN:Lorg/apache/commons/math3/complex/Complex;
      10: areturn
      11: aload_0
      12: aload_0
      13: invokevirtual #30                 // Method sqrt1z:()Lorg/apache/commons/math3/complex/Complex;
      16: getstatic     #31                 // Field I:Lorg/apache/commons/math3/complex/Complex;
      19: invokevirtual #32                 // Method multiply:(Lorg/apache/commons/math3/complex/Complex;)Lorg/apache/commons/math3/complex/Complex;
      22: invokevirtual #33                 // Method add:(Lorg/apache/commons/math3/complex/Complex;)Lorg/apache/commons/math3/complex/Complex;
      25: invokevirtual #34                 // Method log:()Lorg/apache/commons/math3/complex/Complex;
      28: getstatic     #31                 // Field I:Lorg/apache/commons/math3/complex/Complex;
      31: invokevirtual #35                 // Method negate:()Lorg/apache/commons/math3/complex/Complex;
      34: invokevirtual #32                 // Method multiply:(Lorg/apache/commons/math3/complex/Complex;)Lorg/apache/commons/math3/complex/Complex;
      37: areturn

  public org.apache.commons.math3.complex.Complex asin();
    Code:
       0: aload_0
       1: getfield      #6                  // Field isNaN:Z
       4: ifeq          11
       7: getstatic     #17                 // Field NaN:Lorg/apache/commons/math3/complex/Complex;
      10: areturn
      11: aload_0
      12: invokevirtual #30                 // Method sqrt1z:()Lorg/apache/commons/math3/complex/Complex;
      15: aload_0
      16: getstatic     #31                 // Field I:Lorg/apache/commons/math3/complex/Complex;
      19: invokevirtual #32                 // Method multiply:(Lorg/apache/commons/math3/complex/Complex;)Lorg/apache/commons/math3/complex/Complex;
      22: invokevirtual #33                 // Method add:(Lorg/apache/commons/math3/complex/Complex;)Lorg/apache/commons/math3/complex/Complex;
      25: invokevirtual #34                 // Method log:()Lorg/apache/commons/math3/complex/Complex;
      28: getstatic     #31                 // Field I:Lorg/apache/commons/math3/complex/Complex;
      31: invokevirtual #35                 // Method negate:()Lorg/apache/commons/math3/complex/Complex;
      34: invokevirtual #32                 // Method multiply:(Lorg/apache/commons/math3/complex/Complex;)Lorg/apache/commons/math3/complex/Complex;
      37: areturn

  public org.apache.commons.math3.complex.Complex atan();
    Code:
       0: aload_0
       1: getfield      #6                  // Field isNaN:Z
       4: ifeq          11
       7: getstatic     #17                 // Field NaN:Lorg/apache/commons/math3/complex/Complex;
      10: areturn
      11: aload_0
      12: getstatic     #31                 // Field I:Lorg/apache/commons/math3/complex/Complex;
      15: invokevirtual #33                 // Method add:(Lorg/apache/commons/math3/complex/Complex;)Lorg/apache/commons/math3/complex/Complex;
      18: getstatic     #31                 // Field I:Lorg/apache/commons/math3/complex/Complex;
      21: aload_0
      22: invokevirtual #36                 // Method subtract:(Lorg/apache/commons/math3/complex/Complex;)Lorg/apache/commons/math3/complex/Complex;
      25: invokevirtual #37                 // Method divide:(Lorg/apache/commons/math3/complex/Complex;)Lorg/apache/commons/math3/complex/Complex;
      28: invokevirtual #34                 // Method log:()Lorg/apache/commons/math3/complex/Complex;
      31: getstatic     #31                 // Field I:Lorg/apache/commons/math3/complex/Complex;
      34: aload_0
      35: ldc2_w        #38                 // double 2.0d
      38: dconst_0
      39: invokevirtual #20                 // Method createComplex:(DD)Lorg/apache/commons/math3/complex/Complex;
      42: invokevirtual #37                 // Method divide:(Lorg/apache/commons/math3/complex/Complex;)Lorg/apache/commons/math3/complex/Complex;
      45: invokevirtual #32                 // Method multiply:(Lorg/apache/commons/math3/complex/Complex;)Lorg/apache/commons/math3/complex/Complex;
      48: areturn

  public org.apache.commons.math3.complex.Complex cos();
    Code:
       0: aload_0
       1: getfield      #6                  // Field isNaN:Z
       4: ifeq          11
       7: getstatic     #17                 // Field NaN:Lorg/apache/commons/math3/complex/Complex;
      10: areturn
      11: aload_0
      12: aload_0
      13: getfield      #3                  // Field real:D
      16: invokestatic  #40                 // Method org/apache/commons/math3/util/FastMath.cos:(D)D
      19: aload_0
      20: getfield      #4                  // Field imaginary:D
      23: invokestatic  #41                 // Method org/apache/commons/math3/util/FastMath.cosh:(D)D
      26: dmul
      27: aload_0
      28: getfield      #3                  // Field real:D
      31: invokestatic  #42                 // Method org/apache/commons/math3/util/FastMath.sin:(D)D
      34: dneg
      35: aload_0
      36: getfield      #4                  // Field imaginary:D
      39: invokestatic  #43                 // Method org/apache/commons/math3/util/FastMath.sinh:(D)D
      42: dmul
      43: invokevirtual #20                 // Method createComplex:(DD)Lorg/apache/commons/math3/complex/Complex;
      46: areturn

  public org.apache.commons.math3.complex.Complex cosh();
    Code:
       0: aload_0
       1: getfield      #6                  // Field isNaN:Z
       4: ifeq          11
       7: getstatic     #17                 // Field NaN:Lorg/apache/commons/math3/complex/Complex;
      10: areturn
      11: aload_0
      12: aload_0
      13: getfield      #3                  // Field real:D
      16: invokestatic  #41                 // Method org/apache/commons/math3/util/FastMath.cosh:(D)D
      19: aload_0
      20: getfield      #4                  // Field imaginary:D
      23: invokestatic  #40                 // Method org/apache/commons/math3/util/FastMath.cos:(D)D
      26: dmul
      27: aload_0
      28: getfield      #3                  // Field real:D
      31: invokestatic  #43                 // Method org/apache/commons/math3/util/FastMath.sinh:(D)D
      34: aload_0
      35: getfield      #4                  // Field imaginary:D
      38: invokestatic  #42                 // Method org/apache/commons/math3/util/FastMath.sin:(D)D
      41: dmul
      42: invokevirtual #20                 // Method createComplex:(DD)Lorg/apache/commons/math3/complex/Complex;
      45: areturn

  public org.apache.commons.math3.complex.Complex exp();
    Code:
       0: aload_0
       1: getfield      #6                  // Field isNaN:Z
       4: ifeq          11
       7: getstatic     #17                 // Field NaN:Lorg/apache/commons/math3/complex/Complex;
      10: areturn
      11: aload_0
      12: getfield      #3                  // Field real:D
      15: invokestatic  #44                 // Method org/apache/commons/math3/util/FastMath.exp:(D)D
      18: dstore_1
      19: aload_0
      20: dload_1
      21: aload_0
      22: getfield      #4                  // Field imaginary:D
      25: invokestatic  #40                 // Method org/apache/commons/math3/util/FastMath.cos:(D)D
      28: dmul
      29: dload_1
      30: aload_0
      31: getfield      #4                  // Field imaginary:D
      34: invokestatic  #42                 // Method org/apache/commons/math3/util/FastMath.sin:(D)D
      37: dmul
      38: invokevirtual #20                 // Method createComplex:(DD)Lorg/apache/commons/math3/complex/Complex;
      41: areturn

  public org.apache.commons.math3.complex.Complex log();
    Code:
       0: aload_0
       1: getfield      #6                  // Field isNaN:Z
       4: ifeq          11
       7: getstatic     #17                 // Field NaN:Lorg/apache/commons/math3/complex/Complex;
      10: areturn
      11: aload_0
      12: aload_0
      13: invokevirtual #45                 // Method abs:()D
      16: invokestatic  #46                 // Method org/apache/commons/math3/util/FastMath.log:(D)D
      19: aload_0
      20: getfield      #4                  // Field imaginary:D
      23: aload_0
      24: getfield      #3                  // Field real:D
      27: invokestatic  #47                 // Method org/apache/commons/math3/util/FastMath.atan2:(DD)D
      30: invokevirtual #20                 // Method createComplex:(DD)Lorg/apache/commons/math3/complex/Complex;
      33: areturn

  public org.apache.commons.math3.complex.Complex pow(org.apache.commons.math3.complex.Complex) throws org.apache.commons.math3.exception.NullArgumentException;
    Code:
       0: aload_1
       1: invokestatic  #16                 // Method org/apache/commons/math3/util/MathUtils.checkNotNull:(Ljava/lang/Object;)V
       4: aload_0
       5: invokevirtual #34                 // Method log:()Lorg/apache/commons/math3/complex/Complex;
       8: aload_1
       9: invokevirtual #32                 // Method multiply:(Lorg/apache/commons/math3/complex/Complex;)Lorg/apache/commons/math3/complex/Complex;
      12: invokevirtual #48                 // Method exp:()Lorg/apache/commons/math3/complex/Complex;
      15: areturn

  public org.apache.commons.math3.complex.Complex pow(double);
    Code:
       0: aload_0
       1: invokevirtual #34                 // Method log:()Lorg/apache/commons/math3/complex/Complex;
       4: dload_1
       5: invokevirtual #49                 // Method multiply:(D)Lorg/apache/commons/math3/complex/Complex;
       8: invokevirtual #48                 // Method exp:()Lorg/apache/commons/math3/complex/Complex;
      11: areturn

  public org.apache.commons.math3.complex.Complex sin();
    Code:
       0: aload_0
       1: getfield      #6                  // Field isNaN:Z
       4: ifeq          11
       7: getstatic     #17                 // Field NaN:Lorg/apache/commons/math3/complex/Complex;
      10: areturn
      11: aload_0
      12: aload_0
      13: getfield      #3                  // Field real:D
      16: invokestatic  #42                 // Method org/apache/commons/math3/util/FastMath.sin:(D)D
      19: aload_0
      20: getfield      #4                  // Field imaginary:D
      23: invokestatic  #41                 // Method org/apache/commons/math3/util/FastMath.cosh:(D)D
      26: dmul
      27: aload_0
      28: getfield      #3                  // Field real:D
      31: invokestatic  #40                 // Method org/apache/commons/math3/util/FastMath.cos:(D)D
      34: aload_0
      35: getfield      #4                  // Field imaginary:D
      38: invokestatic  #43                 // Method org/apache/commons/math3/util/FastMath.sinh:(D)D
      41: dmul
      42: invokevirtual #20                 // Method createComplex:(DD)Lorg/apache/commons/math3/complex/Complex;
      45: areturn

  public org.apache.commons.math3.complex.Complex sinh();
    Code:
       0: aload_0
       1: getfield      #6                  // Field isNaN:Z
       4: ifeq          11
       7: getstatic     #17                 // Field NaN:Lorg/apache/commons/math3/complex/Complex;
      10: areturn
      11: aload_0
      12: aload_0
      13: getfield      #3                  // Field real:D
      16: invokestatic  #43                 // Method org/apache/commons/math3/util/FastMath.sinh:(D)D
      19: aload_0
      20: getfield      #4                  // Field imaginary:D
      23: invokestatic  #40                 // Method org/apache/commons/math3/util/FastMath.cos:(D)D
      26: dmul
      27: aload_0
      28: getfield      #3                  // Field real:D
      31: invokestatic  #41                 // Method org/apache/commons/math3/util/FastMath.cosh:(D)D
      34: aload_0
      35: getfield      #4                  // Field imaginary:D
      38: invokestatic  #42                 // Method org/apache/commons/math3/util/FastMath.sin:(D)D
      41: dmul
      42: invokevirtual #20                 // Method createComplex:(DD)Lorg/apache/commons/math3/complex/Complex;
      45: areturn

  public org.apache.commons.math3.complex.Complex sqrt();
    Code:
       0: aload_0
       1: getfield      #6                  // Field isNaN:Z
       4: ifeq          11
       7: getstatic     #17                 // Field NaN:Lorg/apache/commons/math3/complex/Complex;
      10: areturn
      11: aload_0
      12: getfield      #3                  // Field real:D
      15: dconst_0
      16: dcmpl
      17: ifne          36
      20: aload_0
      21: getfield      #4                  // Field imaginary:D
      24: dconst_0
      25: dcmpl
      26: ifne          36
      29: aload_0
      30: dconst_0
      31: dconst_0
      32: invokevirtual #20                 // Method createComplex:(DD)Lorg/apache/commons/math3/complex/Complex;
      35: areturn
      36: aload_0
      37: getfield      #3                  // Field real:D
      40: invokestatic  #14                 // Method org/apache/commons/math3/util/FastMath.abs:(D)D
      43: aload_0
      44: invokevirtual #45                 // Method abs:()D
      47: dadd
      48: ldc2_w        #38                 // double 2.0d
      51: ddiv
      52: invokestatic  #15                 // Method org/apache/commons/math3/util/FastMath.sqrt:(D)D
      55: dstore_1
      56: aload_0
      57: getfield      #3                  // Field real:D
      60: dconst_0
      61: dcmpl
      62: iflt          81
      65: aload_0
      66: dload_1
      67: aload_0
      68: getfield      #4                  // Field imaginary:D
      71: ldc2_w        #38                 // double 2.0d
      74: dload_1
      75: dmul
      76: ddiv
      77: invokevirtual #20                 // Method createComplex:(DD)Lorg/apache/commons/math3/complex/Complex;
      80: areturn
      81: aload_0
      82: aload_0
      83: getfield      #4                  // Field imaginary:D
      86: invokestatic  #14                 // Method org/apache/commons/math3/util/FastMath.abs:(D)D
      89: ldc2_w        #38                 // double 2.0d
      92: dload_1
      93: dmul
      94: ddiv
      95: dconst_1
      96: aload_0
      97: getfield      #4                  // Field imaginary:D
     100: invokestatic  #50                 // Method org/apache/commons/math3/util/FastMath.copySign:(DD)D
     103: dload_1
     104: dmul
     105: invokevirtual #20                 // Method createComplex:(DD)Lorg/apache/commons/math3/complex/Complex;
     108: areturn

  public org.apache.commons.math3.complex.Complex sqrt1z();
    Code:
       0: aload_0
       1: dconst_1
       2: dconst_0
       3: invokevirtual #20                 // Method createComplex:(DD)Lorg/apache/commons/math3/complex/Complex;
       6: aload_0
       7: aload_0
       8: invokevirtual #32                 // Method multiply:(Lorg/apache/commons/math3/complex/Complex;)Lorg/apache/commons/math3/complex/Complex;
      11: invokevirtual #36                 // Method subtract:(Lorg/apache/commons/math3/complex/Complex;)Lorg/apache/commons/math3/complex/Complex;
      14: invokevirtual #51                 // Method sqrt:()Lorg/apache/commons/math3/complex/Complex;
      17: areturn

  public org.apache.commons.math3.complex.Complex tan();
    Code:
       0: aload_0
       1: getfield      #6                  // Field isNaN:Z
       4: ifne          17
       7: aload_0
       8: getfield      #3                  // Field real:D
      11: invokestatic  #7                  // Method java/lang/Double.isInfinite:(D)Z
      14: ifeq          21
      17: getstatic     #17                 // Field NaN:Lorg/apache/commons/math3/complex/Complex;
      20: areturn
      21: aload_0
      22: getfield      #4                  // Field imaginary:D
      25: ldc2_w        #52                 // double 20.0d
      28: dcmpl
      29: ifle          39
      32: aload_0
      33: dconst_0
      34: dconst_1
      35: invokevirtual #20                 // Method createComplex:(DD)Lorg/apache/commons/math3/complex/Complex;
      38: areturn
      39: aload_0
      40: getfield      #4                  // Field imaginary:D
      43: ldc2_w        #54                 // double -20.0d
      46: dcmpg
      47: ifge          59
      50: aload_0
      51: dconst_0
      52: ldc2_w        #56                 // double -1.0d
      55: invokevirtual #20                 // Method createComplex:(DD)Lorg/apache/commons/math3/complex/Complex;
      58: areturn
      59: ldc2_w        #38                 // double 2.0d
      62: aload_0
      63: getfield      #3                  // Field real:D
      66: dmul
      67: dstore_1
      68: ldc2_w        #38                 // double 2.0d
      71: aload_0
      72: getfield      #4                  // Field imaginary:D
      75: dmul
      76: dstore_3
      77: dload_1
      78: invokestatic  #40                 // Method org/apache/commons/math3/util/FastMath.cos:(D)D
      81: dload_3
      82: invokestatic  #41                 // Method org/apache/commons/math3/util/FastMath.cosh:(D)D
      85: dadd
      86: dstore        5
      88: aload_0
      89: dload_1
      90: invokestatic  #42                 // Method org/apache/commons/math3/util/FastMath.sin:(D)D
      93: dload         5
      95: ddiv
      96: dload_3
      97: invokestatic  #43                 // Method org/apache/commons/math3/util/FastMath.sinh:(D)D
     100: dload         5
     102: ddiv
     103: invokevirtual #20                 // Method createComplex:(DD)Lorg/apache/commons/math3/complex/Complex;
     106: areturn

  public org.apache.commons.math3.complex.Complex tanh();
    Code:
       0: aload_0
       1: getfield      #6                  // Field isNaN:Z
       4: ifne          17
       7: aload_0
       8: getfield      #4                  // Field imaginary:D
      11: invokestatic  #7                  // Method java/lang/Double.isInfinite:(D)Z
      14: ifeq          21
      17: getstatic     #17                 // Field NaN:Lorg/apache/commons/math3/complex/Complex;
      20: areturn
      21: aload_0
      22: getfield      #3                  // Field real:D
      25: ldc2_w        #52                 // double 20.0d
      28: dcmpl
      29: ifle          39
      32: aload_0
      33: dconst_1
      34: dconst_0
      35: invokevirtual #20                 // Method createComplex:(DD)Lorg/apache/commons/math3/complex/Complex;
      38: areturn
      39: aload_0
      40: getfield      #3                  // Field real:D
      43: ldc2_w        #54                 // double -20.0d
      46: dcmpg
      47: ifge          59
      50: aload_0
      51: ldc2_w        #56                 // double -1.0d
      54: dconst_0
      55: invokevirtual #20                 // Method createComplex:(DD)Lorg/apache/commons/math3/complex/Complex;
      58: areturn
      59: ldc2_w        #38                 // double 2.0d
      62: aload_0
      63: getfield      #3                  // Field real:D
      66: dmul
      67: dstore_1
      68: ldc2_w        #38                 // double 2.0d
      71: aload_0
      72: getfield      #4                  // Field imaginary:D
      75: dmul
      76: dstore_3
      77: dload_1
      78: invokestatic  #41                 // Method org/apache/commons/math3/util/FastMath.cosh:(D)D
      81: dload_3
      82: invokestatic  #40                 // Method org/apache/commons/math3/util/FastMath.cos:(D)D
      85: dadd
      86: dstore        5
      88: aload_0
      89: dload_1
      90: invokestatic  #43                 // Method org/apache/commons/math3/util/FastMath.sinh:(D)D
      93: dload         5
      95: ddiv
      96: dload_3
      97: invokestatic  #42                 // Method org/apache/commons/math3/util/FastMath.sin:(D)D
     100: dload         5
     102: ddiv
     103: invokevirtual #20                 // Method createComplex:(DD)Lorg/apache/commons/math3/complex/Complex;
     106: areturn

  public double getArgument();
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method getImaginary:()D
       4: aload_0
       5: invokevirtual #18                 // Method getReal:()D
       8: invokestatic  #47                 // Method org/apache/commons/math3/util/FastMath.atan2:(DD)D
      11: dreturn

  public java.util.List<org.apache.commons.math3.complex.Complex> nthRoot(int) throws org.apache.commons.math3.exception.NotPositiveException;
    Code:
       0: iload_1
       1: ifgt          19
       4: new           #58                 // class org/apache/commons/math3/exception/NotPositiveException
       7: dup
       8: getstatic     #59                 // Field org/apache/commons/math3/exception/util/LocalizedFormats.CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
      11: iload_1
      12: invokestatic  #60                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      15: invokespecial #61                 // Method org/apache/commons/math3/exception/NotPositiveException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;Ljava/lang/Number;)V
      18: athrow
      19: new           #62                 // class java/util/ArrayList
      22: dup
      23: invokespecial #63                 // Method java/util/ArrayList."<init>":()V
      26: astore_2
      27: aload_0
      28: getfield      #6                  // Field isNaN:Z
      31: ifeq          46
      34: aload_2
      35: getstatic     #17                 // Field NaN:Lorg/apache/commons/math3/complex/Complex;
      38: invokeinterface #64,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      43: pop
      44: aload_2
      45: areturn
      46: aload_0
      47: invokevirtual #11                 // Method isInfinite:()Z
      50: ifeq          65
      53: aload_2
      54: getstatic     #22                 // Field INF:Lorg/apache/commons/math3/complex/Complex;
      57: invokeinterface #64,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      62: pop
      63: aload_2
      64: areturn
      65: aload_0
      66: invokevirtual #45                 // Method abs:()D
      69: dconst_1
      70: iload_1
      71: i2d
      72: ddiv
      73: invokestatic  #65                 // Method org/apache/commons/math3/util/FastMath.pow:(DD)D
      76: dstore_3
      77: aload_0
      78: invokevirtual #66                 // Method getArgument:()D
      81: iload_1
      82: i2d
      83: ddiv
      84: dstore        5
      86: ldc2_w        #67                 // double 6.283185307179586d
      89: iload_1
      90: i2d
      91: ddiv
      92: dstore        7
      94: dload         5
      96: dstore        9
      98: iconst_0
      99: istore        11
     101: iload         11
     103: iload_1
     104: if_icmpge     153
     107: dload_3
     108: dload         9
     110: invokestatic  #40                 // Method org/apache/commons/math3/util/FastMath.cos:(D)D
     113: dmul
     114: dstore        12
     116: dload_3
     117: dload         9
     119: invokestatic  #42                 // Method org/apache/commons/math3/util/FastMath.sin:(D)D
     122: dmul
     123: dstore        14
     125: aload_2
     126: aload_0
     127: dload         12
     129: dload         14
     131: invokevirtual #20                 // Method createComplex:(DD)Lorg/apache/commons/math3/complex/Complex;
     134: invokeinterface #64,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     139: pop
     140: dload         9
     142: dload         7
     144: dadd
     145: dstore        9
     147: iinc          11, 1
     150: goto          101
     153: aload_2
     154: areturn

  protected org.apache.commons.math3.complex.Complex createComplex(double, double);
    Code:
       0: new           #23                 // class org/apache/commons/math3/complex/Complex
       3: dup
       4: dload_1
       5: dload_3
       6: invokespecial #1                  // Method "<init>":(DD)V
       9: areturn

  public static org.apache.commons.math3.complex.Complex valueOf(double, double);
    Code:
       0: dload_0
       1: invokestatic  #5                  // Method java/lang/Double.isNaN:(D)Z
       4: ifne          14
       7: dload_2
       8: invokestatic  #5                  // Method java/lang/Double.isNaN:(D)Z
      11: ifeq          18
      14: getstatic     #17                 // Field NaN:Lorg/apache/commons/math3/complex/Complex;
      17: areturn
      18: new           #23                 // class org/apache/commons/math3/complex/Complex
      21: dup
      22: dload_0
      23: dload_2
      24: invokespecial #1                  // Method "<init>":(DD)V
      27: areturn

  public static org.apache.commons.math3.complex.Complex valueOf(double);
    Code:
       0: dload_0
       1: invokestatic  #5                  // Method java/lang/Double.isNaN:(D)Z
       4: ifeq          11
       7: getstatic     #17                 // Field NaN:Lorg/apache/commons/math3/complex/Complex;
      10: areturn
      11: new           #23                 // class org/apache/commons/math3/complex/Complex
      14: dup
      15: dload_0
      16: invokespecial #69                 // Method "<init>":(D)V
      19: areturn

  protected final java.lang.Object readResolve();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field real:D
       5: aload_0
       6: getfield      #4                  // Field imaginary:D
       9: invokevirtual #20                 // Method createComplex:(DD)Lorg/apache/commons/math3/complex/Complex;
      12: areturn

  public org.apache.commons.math3.complex.ComplexField getField();
    Code:
       0: invokestatic  #70                 // Method org/apache/commons/math3/complex/ComplexField.getInstance:()Lorg/apache/commons/math3/complex/ComplexField;
       3: areturn

  public java.lang.String toString();
    Code:
       0: new           #71                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #72                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #73                 // String (
       9: invokevirtual #74                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: getfield      #3                  // Field real:D
      16: invokevirtual #75                 // Method java/lang/StringBuilder.append:(D)Ljava/lang/StringBuilder;
      19: ldc           #76                 // String ,
      21: invokevirtual #74                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: aload_0
      25: getfield      #4                  // Field imaginary:D
      28: invokevirtual #75                 // Method java/lang/StringBuilder.append:(D)Ljava/lang/StringBuilder;
      31: ldc           #77                 // String )
      33: invokevirtual #74                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      36: invokevirtual #78                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      39: areturn

  public org.apache.commons.math3.Field getField();
    Code:
       0: aload_0
       1: invokevirtual #79                 // Method getField:()Lorg/apache/commons/math3/complex/ComplexField;
       4: areturn

  public java.lang.Object reciprocal() throws org.apache.commons.math3.exception.MathArithmeticException;
    Code:
       0: aload_0
       1: invokevirtual #80                 // Method reciprocal:()Lorg/apache/commons/math3/complex/Complex;
       4: areturn

  public java.lang.Object divide(java.lang.Object) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.MathArithmeticException;
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #23                 // class org/apache/commons/math3/complex/Complex
       5: invokevirtual #37                 // Method divide:(Lorg/apache/commons/math3/complex/Complex;)Lorg/apache/commons/math3/complex/Complex;
       8: areturn

  public java.lang.Object multiply(java.lang.Object) throws org.apache.commons.math3.exception.NullArgumentException;
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #23                 // class org/apache/commons/math3/complex/Complex
       5: invokevirtual #32                 // Method multiply:(Lorg/apache/commons/math3/complex/Complex;)Lorg/apache/commons/math3/complex/Complex;
       8: areturn

  public java.lang.Object multiply(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #81                 // Method multiply:(I)Lorg/apache/commons/math3/complex/Complex;
       5: areturn

  public java.lang.Object negate();
    Code:
       0: aload_0
       1: invokevirtual #35                 // Method negate:()Lorg/apache/commons/math3/complex/Complex;
       4: areturn

  public java.lang.Object subtract(java.lang.Object) throws org.apache.commons.math3.exception.NullArgumentException;
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #23                 // class org/apache/commons/math3/complex/Complex
       5: invokevirtual #36                 // Method subtract:(Lorg/apache/commons/math3/complex/Complex;)Lorg/apache/commons/math3/complex/Complex;
       8: areturn

  public java.lang.Object add(java.lang.Object) throws org.apache.commons.math3.exception.NullArgumentException;
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #23                 // class org/apache/commons/math3/complex/Complex
       5: invokevirtual #33                 // Method add:(Lorg/apache/commons/math3/complex/Complex;)Lorg/apache/commons/math3/complex/Complex;
       8: areturn

  static {};
    Code:
       0: new           #23                 // class org/apache/commons/math3/complex/Complex
       3: dup
       4: dconst_0
       5: dconst_1
       6: invokespecial #1                  // Method "<init>":(DD)V
       9: putstatic     #31                 // Field I:Lorg/apache/commons/math3/complex/Complex;
      12: new           #23                 // class org/apache/commons/math3/complex/Complex
      15: dup
      16: ldc2_w        #9                  // double NaNd
      19: ldc2_w        #9                  // double NaNd
      22: invokespecial #1                  // Method "<init>":(DD)V
      25: putstatic     #17                 // Field NaN:Lorg/apache/commons/math3/complex/Complex;
      28: new           #23                 // class org/apache/commons/math3/complex/Complex
      31: dup
      32: ldc2_w        #12                 // double Infinityd
      35: ldc2_w        #12                 // double Infinityd
      38: invokespecial #1                  // Method "<init>":(DD)V
      41: putstatic     #22                 // Field INF:Lorg/apache/commons/math3/complex/Complex;
      44: new           #23                 // class org/apache/commons/math3/complex/Complex
      47: dup
      48: dconst_1
      49: dconst_0
      50: invokespecial #1                  // Method "<init>":(DD)V
      53: putstatic     #82                 // Field ONE:Lorg/apache/commons/math3/complex/Complex;
      56: new           #23                 // class org/apache/commons/math3/complex/Complex
      59: dup
      60: dconst_0
      61: dconst_0
      62: invokespecial #1                  // Method "<init>":(DD)V
      65: putstatic     #21                 // Field ZERO:Lorg/apache/commons/math3/complex/Complex;
      68: return
}
