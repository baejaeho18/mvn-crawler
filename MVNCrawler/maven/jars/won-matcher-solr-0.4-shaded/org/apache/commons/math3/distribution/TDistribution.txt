Compiled from "TDistribution.java"
public class org.apache.commons.math3.distribution.TDistribution extends org.apache.commons.math3.distribution.AbstractRealDistribution {
  public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY;

  private static final long serialVersionUID;

  private final double degreesOfFreedom;

  private final double solverAbsoluteAccuracy;

  private final double factor;

  public org.apache.commons.math3.distribution.TDistribution(double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException;
    Code:
       0: aload_0
       1: dload_1
       2: ldc2_w        #1                  // double 1.0E-9d
       5: invokespecial #3                  // Method "<init>":(DD)V
       8: return

  public org.apache.commons.math3.distribution.TDistribution(double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException;
    Code:
       0: aload_0
       1: new           #4                  // class org/apache/commons/math3/random/Well19937c
       4: dup
       5: invokespecial #5                  // Method org/apache/commons/math3/random/Well19937c."<init>":()V
       8: dload_1
       9: dload_3
      10: invokespecial #6                  // Method "<init>":(Lorg/apache/commons/math3/random/RandomGenerator;DD)V
      13: return

  public org.apache.commons.math3.distribution.TDistribution(org.apache.commons.math3.random.RandomGenerator, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException;
    Code:
       0: aload_0
       1: aload_1
       2: dload_2
       3: ldc2_w        #1                  // double 1.0E-9d
       6: invokespecial #6                  // Method "<init>":(Lorg/apache/commons/math3/random/RandomGenerator;DD)V
       9: return

  public org.apache.commons.math3.distribution.TDistribution(org.apache.commons.math3.random.RandomGenerator, double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #7                  // Method org/apache/commons/math3/distribution/AbstractRealDistribution."<init>":(Lorg/apache/commons/math3/random/RandomGenerator;)V
       5: dload_2
       6: dconst_0
       7: dcmpg
       8: ifgt          26
      11: new           #8                  // class org/apache/commons/math3/exception/NotStrictlyPositiveException
      14: dup
      15: getstatic     #9                  // Field org/apache/commons/math3/exception/util/LocalizedFormats.DEGREES_OF_FREEDOM:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
      18: dload_2
      19: invokestatic  #10                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      22: invokespecial #11                 // Method org/apache/commons/math3/exception/NotStrictlyPositiveException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;Ljava/lang/Number;)V
      25: athrow
      26: aload_0
      27: dload_2
      28: putfield      #12                 // Field degreesOfFreedom:D
      31: aload_0
      32: dload         4
      34: putfield      #13                 // Field solverAbsoluteAccuracy:D
      37: dload_2
      38: dstore        6
      40: dload         6
      42: dconst_1
      43: dadd
      44: ldc2_w        #14                 // double 2.0d
      47: ddiv
      48: dstore        8
      50: aload_0
      51: dload         8
      53: invokestatic  #16                 // Method org/apache/commons/math3/special/Gamma.logGamma:(D)D
      56: ldc2_w        #17                 // double 0.5d
      59: ldc2_w        #19                 // double 3.141592653589793d
      62: invokestatic  #21                 // Method org/apache/commons/math3/util/FastMath.log:(D)D
      65: dload         6
      67: invokestatic  #21                 // Method org/apache/commons/math3/util/FastMath.log:(D)D
      70: dadd
      71: dmul
      72: dsub
      73: dload         6
      75: ldc2_w        #14                 // double 2.0d
      78: ddiv
      79: invokestatic  #16                 // Method org/apache/commons/math3/special/Gamma.logGamma:(D)D
      82: dsub
      83: putfield      #22                 // Field factor:D
      86: return

  public double getDegreesOfFreedom();
    Code:
       0: aload_0
       1: getfield      #12                 // Field degreesOfFreedom:D
       4: dreturn

  public double density(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokevirtual #23                 // Method logDensity:(D)D
       5: invokestatic  #24                 // Method org/apache/commons/math3/util/FastMath.exp:(D)D
       8: dreturn

  public double logDensity(double);
    Code:
       0: aload_0
       1: getfield      #12                 // Field degreesOfFreedom:D
       4: dstore_3
       5: dload_3
       6: dconst_1
       7: dadd
       8: ldc2_w        #14                 // double 2.0d
      11: ddiv
      12: dstore        5
      14: aload_0
      15: getfield      #22                 // Field factor:D
      18: dload         5
      20: dconst_1
      21: dload_1
      22: dload_1
      23: dmul
      24: dload_3
      25: ddiv
      26: dadd
      27: invokestatic  #21                 // Method org/apache/commons/math3/util/FastMath.log:(D)D
      30: dmul
      31: dsub
      32: dreturn

  public double cumulativeProbability(double);
    Code:
       0: dload_1
       1: dconst_0
       2: dcmpl
       3: ifne          13
       6: ldc2_w        #17                 // double 0.5d
       9: dstore_3
      10: goto          67
      13: aload_0
      14: getfield      #12                 // Field degreesOfFreedom:D
      17: aload_0
      18: getfield      #12                 // Field degreesOfFreedom:D
      21: dload_1
      22: dload_1
      23: dmul
      24: dadd
      25: ddiv
      26: ldc2_w        #17                 // double 0.5d
      29: aload_0
      30: getfield      #12                 // Field degreesOfFreedom:D
      33: dmul
      34: ldc2_w        #17                 // double 0.5d
      37: invokestatic  #25                 // Method org/apache/commons/math3/special/Beta.regularizedBeta:(DDD)D
      40: dstore        5
      42: dload_1
      43: dconst_0
      44: dcmpg
      45: ifge          58
      48: ldc2_w        #17                 // double 0.5d
      51: dload         5
      53: dmul
      54: dstore_3
      55: goto          67
      58: dconst_1
      59: ldc2_w        #17                 // double 0.5d
      62: dload         5
      64: dmul
      65: dsub
      66: dstore_3
      67: dload_3
      68: dreturn

  protected double getSolverAbsoluteAccuracy();
    Code:
       0: aload_0
       1: getfield      #13                 // Field solverAbsoluteAccuracy:D
       4: dreturn

  public double getNumericalMean();
    Code:
       0: aload_0
       1: invokevirtual #26                 // Method getDegreesOfFreedom:()D
       4: dstore_1
       5: dload_1
       6: dconst_1
       7: dcmpl
       8: ifle          13
      11: dconst_0
      12: dreturn
      13: ldc2_w        #27                 // double NaNd
      16: dreturn

  public double getNumericalVariance();
    Code:
       0: aload_0
       1: invokevirtual #26                 // Method getDegreesOfFreedom:()D
       4: dstore_1
       5: dload_1
       6: ldc2_w        #14                 // double 2.0d
       9: dcmpl
      10: ifle          21
      13: dload_1
      14: dload_1
      15: ldc2_w        #14                 // double 2.0d
      18: dsub
      19: ddiv
      20: dreturn
      21: dload_1
      22: dconst_1
      23: dcmpl
      24: ifle          39
      27: dload_1
      28: ldc2_w        #14                 // double 2.0d
      31: dcmpg
      32: ifgt          39
      35: ldc2_w        #29                 // double Infinityd
      38: dreturn
      39: ldc2_w        #27                 // double NaNd
      42: dreturn

  public double getSupportLowerBound();
    Code:
       0: ldc2_w        #31                 // double -Infinityd
       3: dreturn

  public double getSupportUpperBound();
    Code:
       0: ldc2_w        #29                 // double Infinityd
       3: dreturn

  public boolean isSupportLowerBoundInclusive();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isSupportUpperBoundInclusive();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isSupportConnected();
    Code:
       0: iconst_1
       1: ireturn
}
