Compiled from "Line.java"
public class org.apache.commons.math3.geometry.euclidean.twod.Line implements org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>, org.apache.commons.math3.geometry.partitioning.Embedding<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> {
  private static final double DEFAULT_TOLERANCE;

  private double angle;

  private double cos;

  private double sin;

  private double originOffset;

  private final double tolerance;

  private org.apache.commons.math3.geometry.euclidean.twod.Line reverse;

  public org.apache.commons.math3.geometry.euclidean.twod.Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D, double);
    Code:
       0: aload_0
       1: invokespecial #6                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: aload_2
       7: invokevirtual #7                  // Method reset:(Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;)V
      10: aload_0
      11: dload_3
      12: putfield      #2                  // Field tolerance:D
      15: return

  public org.apache.commons.math3.geometry.euclidean.twod.Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, double, double);
    Code:
       0: aload_0
       1: invokespecial #6                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: dload_2
       7: invokevirtual #8                  // Method reset:(Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;D)V
      10: aload_0
      11: dload         4
      13: putfield      #2                  // Field tolerance:D
      16: return

  private org.apache.commons.math3.geometry.euclidean.twod.Line(double, double, double, double, double);
    Code:
       0: aload_0
       1: invokespecial #6                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: dload_1
       6: putfield      #9                  // Field angle:D
       9: aload_0
      10: dload_3
      11: putfield      #5                  // Field cos:D
      14: aload_0
      15: dload         5
      17: putfield      #4                  // Field sin:D
      20: aload_0
      21: dload         7
      23: putfield      #3                  // Field originOffset:D
      26: aload_0
      27: dload         9
      29: putfield      #2                  // Field tolerance:D
      32: aload_0
      33: aconst_null
      34: putfield      #10                 // Field reverse:Lorg/apache/commons/math3/geometry/euclidean/twod/Line;
      37: return

  public org.apache.commons.math3.geometry.euclidean.twod.Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: ldc2_w        #11                 // double 1.0E-10d
       6: invokespecial #13                 // Method "<init>":(Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;D)V
       9: return

  public org.apache.commons.math3.geometry.euclidean.twod.Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, double);
    Code:
       0: aload_0
       1: aload_1
       2: dload_2
       3: ldc2_w        #11                 // double 1.0E-10d
       6: invokespecial #14                 // Method "<init>":(Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;DD)V
       9: return

  public org.apache.commons.math3.geometry.euclidean.twod.Line(org.apache.commons.math3.geometry.euclidean.twod.Line);
    Code:
       0: aload_0
       1: invokespecial #6                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: getfield      #9                  // Field angle:D
       9: ldc2_w        #15                 // double 3.141592653589793d
      12: invokestatic  #17                 // Method org/apache/commons/math3/util/MathUtils.normalizeAngle:(DD)D
      15: putfield      #9                  // Field angle:D
      18: aload_0
      19: aload_1
      20: getfield      #5                  // Field cos:D
      23: putfield      #5                  // Field cos:D
      26: aload_0
      27: aload_1
      28: getfield      #4                  // Field sin:D
      31: putfield      #4                  // Field sin:D
      34: aload_0
      35: aload_1
      36: getfield      #3                  // Field originOffset:D
      39: putfield      #3                  // Field originOffset:D
      42: aload_0
      43: aload_1
      44: getfield      #2                  // Field tolerance:D
      47: putfield      #2                  // Field tolerance:D
      50: aload_0
      51: aconst_null
      52: putfield      #10                 // Field reverse:Lorg/apache/commons/math3/geometry/euclidean/twod/Line;
      55: return

  public org.apache.commons.math3.geometry.euclidean.twod.Line copySelf();
    Code:
       0: new           #18                 // class org/apache/commons/math3/geometry/euclidean/twod/Line
       3: dup
       4: aload_0
       5: invokespecial #19                 // Method "<init>":(Lorg/apache/commons/math3/geometry/euclidean/twod/Line;)V
       8: areturn

  public void reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D);
    Code:
       0: aload_0
       1: invokespecial #20                 // Method unlinkReverse:()V
       4: aload_2
       5: invokevirtual #21                 // Method org/apache/commons/math3/geometry/euclidean/twod/Vector2D.getX:()D
       8: aload_1
       9: invokevirtual #21                 // Method org/apache/commons/math3/geometry/euclidean/twod/Vector2D.getX:()D
      12: dsub
      13: dstore_3
      14: aload_2
      15: invokevirtual #22                 // Method org/apache/commons/math3/geometry/euclidean/twod/Vector2D.getY:()D
      18: aload_1
      19: invokevirtual #22                 // Method org/apache/commons/math3/geometry/euclidean/twod/Vector2D.getY:()D
      22: dsub
      23: dstore        5
      25: dload_3
      26: dload         5
      28: invokestatic  #23                 // Method org/apache/commons/math3/util/FastMath.hypot:(DD)D
      31: dstore        7
      33: dload         7
      35: dconst_0
      36: dcmpl
      37: ifne          66
      40: aload_0
      41: dconst_0
      42: putfield      #9                  // Field angle:D
      45: aload_0
      46: dconst_1
      47: putfield      #5                  // Field cos:D
      50: aload_0
      51: dconst_0
      52: putfield      #4                  // Field sin:D
      55: aload_0
      56: aload_1
      57: invokevirtual #22                 // Method org/apache/commons/math3/geometry/euclidean/twod/Vector2D.getY:()D
      60: putfield      #3                  // Field originOffset:D
      63: goto          126
      66: aload_0
      67: ldc2_w        #15                 // double 3.141592653589793d
      70: dload         5
      72: dneg
      73: dload_3
      74: dneg
      75: invokestatic  #24                 // Method org/apache/commons/math3/util/FastMath.atan2:(DD)D
      78: dadd
      79: putfield      #9                  // Field angle:D
      82: aload_0
      83: dload_3
      84: dload         7
      86: ddiv
      87: putfield      #5                  // Field cos:D
      90: aload_0
      91: dload         5
      93: dload         7
      95: ddiv
      96: putfield      #4                  // Field sin:D
      99: aload_0
     100: aload_2
     101: invokevirtual #21                 // Method org/apache/commons/math3/geometry/euclidean/twod/Vector2D.getX:()D
     104: aload_1
     105: invokevirtual #22                 // Method org/apache/commons/math3/geometry/euclidean/twod/Vector2D.getY:()D
     108: aload_1
     109: invokevirtual #21                 // Method org/apache/commons/math3/geometry/euclidean/twod/Vector2D.getX:()D
     112: dneg
     113: aload_2
     114: invokevirtual #22                 // Method org/apache/commons/math3/geometry/euclidean/twod/Vector2D.getY:()D
     117: invokestatic  #25                 // Method org/apache/commons/math3/util/MathArrays.linearCombination:(DDDD)D
     120: dload         7
     122: ddiv
     123: putfield      #3                  // Field originOffset:D
     126: return

  public void reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, double);
    Code:
       0: aload_0
       1: invokespecial #20                 // Method unlinkReverse:()V
       4: aload_0
       5: dload_2
       6: ldc2_w        #15                 // double 3.141592653589793d
       9: invokestatic  #17                 // Method org/apache/commons/math3/util/MathUtils.normalizeAngle:(DD)D
      12: putfield      #9                  // Field angle:D
      15: aload_0
      16: aload_0
      17: getfield      #9                  // Field angle:D
      20: invokestatic  #26                 // Method org/apache/commons/math3/util/FastMath.cos:(D)D
      23: putfield      #5                  // Field cos:D
      26: aload_0
      27: aload_0
      28: getfield      #9                  // Field angle:D
      31: invokestatic  #27                 // Method org/apache/commons/math3/util/FastMath.sin:(D)D
      34: putfield      #4                  // Field sin:D
      37: aload_0
      38: aload_0
      39: getfield      #5                  // Field cos:D
      42: aload_1
      43: invokevirtual #22                 // Method org/apache/commons/math3/geometry/euclidean/twod/Vector2D.getY:()D
      46: aload_0
      47: getfield      #4                  // Field sin:D
      50: dneg
      51: aload_1
      52: invokevirtual #21                 // Method org/apache/commons/math3/geometry/euclidean/twod/Vector2D.getX:()D
      55: invokestatic  #25                 // Method org/apache/commons/math3/util/MathArrays.linearCombination:(DDDD)D
      58: putfield      #3                  // Field originOffset:D
      61: return

  public void revertSelf();
    Code:
       0: aload_0
       1: invokespecial #20                 // Method unlinkReverse:()V
       4: aload_0
       5: getfield      #9                  // Field angle:D
       8: ldc2_w        #15                 // double 3.141592653589793d
      11: dcmpg
      12: ifge          30
      15: aload_0
      16: dup
      17: getfield      #9                  // Field angle:D
      20: ldc2_w        #15                 // double 3.141592653589793d
      23: dadd
      24: putfield      #9                  // Field angle:D
      27: goto          42
      30: aload_0
      31: dup
      32: getfield      #9                  // Field angle:D
      35: ldc2_w        #15                 // double 3.141592653589793d
      38: dsub
      39: putfield      #9                  // Field angle:D
      42: aload_0
      43: aload_0
      44: getfield      #5                  // Field cos:D
      47: dneg
      48: putfield      #5                  // Field cos:D
      51: aload_0
      52: aload_0
      53: getfield      #4                  // Field sin:D
      56: dneg
      57: putfield      #4                  // Field sin:D
      60: aload_0
      61: aload_0
      62: getfield      #3                  // Field originOffset:D
      65: dneg
      66: putfield      #3                  // Field originOffset:D
      69: return

  private void unlinkReverse();
    Code:
       0: aload_0
       1: getfield      #10                 // Field reverse:Lorg/apache/commons/math3/geometry/euclidean/twod/Line;
       4: ifnull        15
       7: aload_0
       8: getfield      #10                 // Field reverse:Lorg/apache/commons/math3/geometry/euclidean/twod/Line;
      11: aconst_null
      12: putfield      #10                 // Field reverse:Lorg/apache/commons/math3/geometry/euclidean/twod/Line;
      15: aload_0
      16: aconst_null
      17: putfield      #10                 // Field reverse:Lorg/apache/commons/math3/geometry/euclidean/twod/Line;
      20: return

  public org.apache.commons.math3.geometry.euclidean.twod.Line getReverse();
    Code:
       0: aload_0
       1: getfield      #10                 // Field reverse:Lorg/apache/commons/math3/geometry/euclidean/twod/Line;
       4: ifnonnull     75
       7: aload_0
       8: new           #18                 // class org/apache/commons/math3/geometry/euclidean/twod/Line
      11: dup
      12: aload_0
      13: getfield      #9                  // Field angle:D
      16: ldc2_w        #15                 // double 3.141592653589793d
      19: dcmpg
      20: ifge          34
      23: aload_0
      24: getfield      #9                  // Field angle:D
      27: ldc2_w        #15                 // double 3.141592653589793d
      30: dadd
      31: goto          42
      34: aload_0
      35: getfield      #9                  // Field angle:D
      38: ldc2_w        #15                 // double 3.141592653589793d
      41: dsub
      42: aload_0
      43: getfield      #5                  // Field cos:D
      46: dneg
      47: aload_0
      48: getfield      #4                  // Field sin:D
      51: dneg
      52: aload_0
      53: getfield      #3                  // Field originOffset:D
      56: dneg
      57: aload_0
      58: getfield      #2                  // Field tolerance:D
      61: invokespecial #1                  // Method "<init>":(DDDDD)V
      64: putfield      #10                 // Field reverse:Lorg/apache/commons/math3/geometry/euclidean/twod/Line;
      67: aload_0
      68: getfield      #10                 // Field reverse:Lorg/apache/commons/math3/geometry/euclidean/twod/Line;
      71: aload_0
      72: putfield      #10                 // Field reverse:Lorg/apache/commons/math3/geometry/euclidean/twod/Line;
      75: aload_0
      76: getfield      #10                 // Field reverse:Lorg/apache/commons/math3/geometry/euclidean/twod/Line;
      79: areturn

  public org.apache.commons.math3.geometry.euclidean.oned.Vector1D toSubSpace(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #28                 // Method toSubSpace:(Lorg/apache/commons/math3/geometry/Point;)Lorg/apache/commons/math3/geometry/euclidean/oned/Vector1D;
       5: areturn

  public org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSpace(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #29                 // Method toSpace:(Lorg/apache/commons/math3/geometry/Point;)Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;
       5: areturn

  public org.apache.commons.math3.geometry.euclidean.oned.Vector1D toSubSpace(org.apache.commons.math3.geometry.Point<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>);
    Code:
       0: aload_1
       1: checkcast     #30                 // class org/apache/commons/math3/geometry/euclidean/twod/Vector2D
       4: astore_2
       5: new           #31                 // class org/apache/commons/math3/geometry/euclidean/oned/Vector1D
       8: dup
       9: aload_0
      10: getfield      #5                  // Field cos:D
      13: aload_2
      14: invokevirtual #21                 // Method org/apache/commons/math3/geometry/euclidean/twod/Vector2D.getX:()D
      17: aload_0
      18: getfield      #4                  // Field sin:D
      21: aload_2
      22: invokevirtual #22                 // Method org/apache/commons/math3/geometry/euclidean/twod/Vector2D.getY:()D
      25: invokestatic  #25                 // Method org/apache/commons/math3/util/MathArrays.linearCombination:(DDDD)D
      28: invokespecial #32                 // Method org/apache/commons/math3/geometry/euclidean/oned/Vector1D."<init>":(D)V
      31: areturn

  public org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSpace(org.apache.commons.math3.geometry.Point<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>);
    Code:
       0: aload_1
       1: checkcast     #31                 // class org/apache/commons/math3/geometry/euclidean/oned/Vector1D
       4: invokevirtual #33                 // Method org/apache/commons/math3/geometry/euclidean/oned/Vector1D.getX:()D
       7: dstore_2
       8: new           #30                 // class org/apache/commons/math3/geometry/euclidean/twod/Vector2D
      11: dup
      12: dload_2
      13: aload_0
      14: getfield      #5                  // Field cos:D
      17: aload_0
      18: getfield      #3                  // Field originOffset:D
      21: dneg
      22: aload_0
      23: getfield      #4                  // Field sin:D
      26: invokestatic  #25                 // Method org/apache/commons/math3/util/MathArrays.linearCombination:(DDDD)D
      29: dload_2
      30: aload_0
      31: getfield      #4                  // Field sin:D
      34: aload_0
      35: getfield      #3                  // Field originOffset:D
      38: aload_0
      39: getfield      #5                  // Field cos:D
      42: invokestatic  #25                 // Method org/apache/commons/math3/util/MathArrays.linearCombination:(DDDD)D
      45: invokespecial #34                 // Method org/apache/commons/math3/geometry/euclidean/twod/Vector2D."<init>":(DD)V
      48: areturn

  public org.apache.commons.math3.geometry.euclidean.twod.Vector2D intersection(org.apache.commons.math3.geometry.euclidean.twod.Line);
    Code:
       0: aload_0
       1: getfield      #4                  // Field sin:D
       4: aload_1
       5: getfield      #5                  // Field cos:D
       8: aload_1
       9: getfield      #4                  // Field sin:D
      12: dneg
      13: aload_0
      14: getfield      #5                  // Field cos:D
      17: invokestatic  #25                 // Method org/apache/commons/math3/util/MathArrays.linearCombination:(DDDD)D
      20: dstore_2
      21: dload_2
      22: invokestatic  #35                 // Method org/apache/commons/math3/util/FastMath.abs:(D)D
      25: aload_0
      26: getfield      #2                  // Field tolerance:D
      29: dcmpg
      30: ifge          35
      33: aconst_null
      34: areturn
      35: new           #30                 // class org/apache/commons/math3/geometry/euclidean/twod/Vector2D
      38: dup
      39: aload_0
      40: getfield      #5                  // Field cos:D
      43: aload_1
      44: getfield      #3                  // Field originOffset:D
      47: aload_1
      48: getfield      #5                  // Field cos:D
      51: dneg
      52: aload_0
      53: getfield      #3                  // Field originOffset:D
      56: invokestatic  #25                 // Method org/apache/commons/math3/util/MathArrays.linearCombination:(DDDD)D
      59: dload_2
      60: ddiv
      61: aload_0
      62: getfield      #4                  // Field sin:D
      65: aload_1
      66: getfield      #3                  // Field originOffset:D
      69: aload_1
      70: getfield      #4                  // Field sin:D
      73: dneg
      74: aload_0
      75: getfield      #3                  // Field originOffset:D
      78: invokestatic  #25                 // Method org/apache/commons/math3/util/MathArrays.linearCombination:(DDDD)D
      81: dload_2
      82: ddiv
      83: invokespecial #34                 // Method org/apache/commons/math3/geometry/euclidean/twod/Vector2D."<init>":(DD)V
      86: areturn

  public org.apache.commons.math3.geometry.Point<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> project(org.apache.commons.math3.geometry.Point<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>);
    Code:
       0: aload_0
       1: aload_0
       2: aload_1
       3: invokevirtual #28                 // Method toSubSpace:(Lorg/apache/commons/math3/geometry/Point;)Lorg/apache/commons/math3/geometry/euclidean/oned/Vector1D;
       6: invokevirtual #36                 // Method toSpace:(Lorg/apache/commons/math3/geometry/Vector;)Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;
       9: areturn

  public double getTolerance();
    Code:
       0: aload_0
       1: getfield      #2                  // Field tolerance:D
       4: dreturn

  public org.apache.commons.math3.geometry.euclidean.twod.SubLine wholeHyperplane();
    Code:
       0: new           #37                 // class org/apache/commons/math3/geometry/euclidean/twod/SubLine
       3: dup
       4: aload_0
       5: new           #38                 // class org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet
       8: dup
       9: aload_0
      10: getfield      #2                  // Field tolerance:D
      13: invokespecial #39                 // Method org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet."<init>":(D)V
      16: invokespecial #40                 // Method org/apache/commons/math3/geometry/euclidean/twod/SubLine."<init>":(Lorg/apache/commons/math3/geometry/partitioning/Hyperplane;Lorg/apache/commons/math3/geometry/partitioning/Region;)V
      19: areturn

  public org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet wholeSpace();
    Code:
       0: new           #41                 // class org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet
       3: dup
       4: aload_0
       5: getfield      #2                  // Field tolerance:D
       8: invokespecial #42                 // Method org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet."<init>":(D)V
      11: areturn

  public double getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line);
    Code:
       0: aload_0
       1: getfield      #3                  // Field originOffset:D
       4: aload_0
       5: getfield      #5                  // Field cos:D
       8: aload_1
       9: getfield      #5                  // Field cos:D
      12: aload_0
      13: getfield      #4                  // Field sin:D
      16: aload_1
      17: getfield      #4                  // Field sin:D
      20: invokestatic  #25                 // Method org/apache/commons/math3/util/MathArrays.linearCombination:(DDDD)D
      23: dconst_0
      24: dcmpl
      25: ifle          36
      28: aload_1
      29: getfield      #3                  // Field originOffset:D
      32: dneg
      33: goto          40
      36: aload_1
      37: getfield      #3                  // Field originOffset:D
      40: dadd
      41: dreturn

  public double getOffset(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #43                 // Method getOffset:(Lorg/apache/commons/math3/geometry/Point;)D
       5: dreturn

  public double getOffset(org.apache.commons.math3.geometry.Point<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>);
    Code:
       0: aload_1
       1: checkcast     #30                 // class org/apache/commons/math3/geometry/euclidean/twod/Vector2D
       4: astore_2
       5: aload_0
       6: getfield      #4                  // Field sin:D
       9: aload_2
      10: invokevirtual #21                 // Method org/apache/commons/math3/geometry/euclidean/twod/Vector2D.getX:()D
      13: aload_0
      14: getfield      #5                  // Field cos:D
      17: dneg
      18: aload_2
      19: invokevirtual #22                 // Method org/apache/commons/math3/geometry/euclidean/twod/Vector2D.getY:()D
      22: dconst_1
      23: aload_0
      24: getfield      #3                  // Field originOffset:D
      27: invokestatic  #44                 // Method org/apache/commons/math3/util/MathArrays.linearCombination:(DDDDDD)D
      30: dreturn

  public boolean sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>);
    Code:
       0: aload_1
       1: checkcast     #18                 // class org/apache/commons/math3/geometry/euclidean/twod/Line
       4: astore_2
       5: aload_0
       6: getfield      #4                  // Field sin:D
       9: aload_2
      10: getfield      #4                  // Field sin:D
      13: aload_0
      14: getfield      #5                  // Field cos:D
      17: aload_2
      18: getfield      #5                  // Field cos:D
      21: invokestatic  #25                 // Method org/apache/commons/math3/util/MathArrays.linearCombination:(DDDD)D
      24: dconst_0
      25: dcmpl
      26: iflt          33
      29: iconst_1
      30: goto          34
      33: iconst_0
      34: ireturn

  public org.apache.commons.math3.geometry.euclidean.twod.Vector2D getPointAt(org.apache.commons.math3.geometry.euclidean.oned.Vector1D, double);
    Code:
       0: aload_1
       1: invokevirtual #33                 // Method org/apache/commons/math3/geometry/euclidean/oned/Vector1D.getX:()D
       4: dstore        4
       6: dload_2
       7: aload_0
       8: getfield      #3                  // Field originOffset:D
      11: dsub
      12: dstore        6
      14: new           #30                 // class org/apache/commons/math3/geometry/euclidean/twod/Vector2D
      17: dup
      18: dload         4
      20: aload_0
      21: getfield      #5                  // Field cos:D
      24: dload         6
      26: aload_0
      27: getfield      #4                  // Field sin:D
      30: invokestatic  #25                 // Method org/apache/commons/math3/util/MathArrays.linearCombination:(DDDD)D
      33: dload         4
      35: aload_0
      36: getfield      #4                  // Field sin:D
      39: dload         6
      41: dneg
      42: aload_0
      43: getfield      #5                  // Field cos:D
      46: invokestatic  #25                 // Method org/apache/commons/math3/util/MathArrays.linearCombination:(DDDD)D
      49: invokespecial #34                 // Method org/apache/commons/math3/geometry/euclidean/twod/Vector2D."<init>":(DD)V
      52: areturn

  public boolean contains(org.apache.commons.math3.geometry.euclidean.twod.Vector2D);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #45                 // Method getOffset:(Lorg/apache/commons/math3/geometry/Vector;)D
       5: invokestatic  #35                 // Method org/apache/commons/math3/util/FastMath.abs:(D)D
       8: aload_0
       9: getfield      #2                  // Field tolerance:D
      12: dcmpg
      13: ifge          20
      16: iconst_1
      17: goto          21
      20: iconst_0
      21: ireturn

  public double distance(org.apache.commons.math3.geometry.euclidean.twod.Vector2D);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #45                 // Method getOffset:(Lorg/apache/commons/math3/geometry/Vector;)D
       5: invokestatic  #35                 // Method org/apache/commons/math3/util/FastMath.abs:(D)D
       8: dreturn

  public boolean isParallelTo(org.apache.commons.math3.geometry.euclidean.twod.Line);
    Code:
       0: aload_0
       1: getfield      #4                  // Field sin:D
       4: aload_1
       5: getfield      #5                  // Field cos:D
       8: aload_0
       9: getfield      #5                  // Field cos:D
      12: dneg
      13: aload_1
      14: getfield      #4                  // Field sin:D
      17: invokestatic  #25                 // Method org/apache/commons/math3/util/MathArrays.linearCombination:(DDDD)D
      20: invokestatic  #35                 // Method org/apache/commons/math3/util/FastMath.abs:(D)D
      23: aload_0
      24: getfield      #2                  // Field tolerance:D
      27: dcmpg
      28: ifge          35
      31: iconst_1
      32: goto          36
      35: iconst_0
      36: ireturn

  public void translateToPoint(org.apache.commons.math3.geometry.euclidean.twod.Vector2D);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #5                  // Field cos:D
       5: aload_1
       6: invokevirtual #22                 // Method org/apache/commons/math3/geometry/euclidean/twod/Vector2D.getY:()D
       9: aload_0
      10: getfield      #4                  // Field sin:D
      13: dneg
      14: aload_1
      15: invokevirtual #21                 // Method org/apache/commons/math3/geometry/euclidean/twod/Vector2D.getX:()D
      18: invokestatic  #25                 // Method org/apache/commons/math3/util/MathArrays.linearCombination:(DDDD)D
      21: putfield      #3                  // Field originOffset:D
      24: return

  public double getAngle();
    Code:
       0: aload_0
       1: getfield      #9                  // Field angle:D
       4: ldc2_w        #15                 // double 3.141592653589793d
       7: invokestatic  #17                 // Method org/apache/commons/math3/util/MathUtils.normalizeAngle:(DD)D
      10: dreturn

  public void setAngle(double);
    Code:
       0: aload_0
       1: invokespecial #20                 // Method unlinkReverse:()V
       4: aload_0
       5: dload_1
       6: ldc2_w        #15                 // double 3.141592653589793d
       9: invokestatic  #17                 // Method org/apache/commons/math3/util/MathUtils.normalizeAngle:(DD)D
      12: putfield      #9                  // Field angle:D
      15: aload_0
      16: aload_0
      17: getfield      #9                  // Field angle:D
      20: invokestatic  #26                 // Method org/apache/commons/math3/util/FastMath.cos:(D)D
      23: putfield      #5                  // Field cos:D
      26: aload_0
      27: aload_0
      28: getfield      #9                  // Field angle:D
      31: invokestatic  #27                 // Method org/apache/commons/math3/util/FastMath.sin:(D)D
      34: putfield      #4                  // Field sin:D
      37: return

  public double getOriginOffset();
    Code:
       0: aload_0
       1: getfield      #3                  // Field originOffset:D
       4: dreturn

  public void setOriginOffset(double);
    Code:
       0: aload_0
       1: invokespecial #20                 // Method unlinkReverse:()V
       4: aload_0
       5: dload_1
       6: putfield      #3                  // Field originOffset:D
       9: return

  public static org.apache.commons.math3.geometry.partitioning.Transform<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> getTransform(java.awt.geom.AffineTransform) throws org.apache.commons.math3.exception.MathIllegalArgumentException;
    Code:
       0: bipush        6
       2: newarray       double
       4: astore_1
       5: aload_0
       6: aload_1
       7: invokevirtual #46                 // Method java/awt/geom/AffineTransform.getMatrix:([D)V
      10: new           #47                 // class org/apache/commons/math3/geometry/euclidean/twod/Line$LineTransform
      13: dup
      14: aload_1
      15: iconst_0
      16: daload
      17: aload_1
      18: iconst_1
      19: daload
      20: aload_1
      21: iconst_2
      22: daload
      23: aload_1
      24: iconst_3
      25: daload
      26: aload_1
      27: iconst_4
      28: daload
      29: aload_1
      30: iconst_5
      31: daload
      32: invokespecial #48                 // Method org/apache/commons/math3/geometry/euclidean/twod/Line$LineTransform."<init>":(DDDDDD)V
      35: areturn

  public static org.apache.commons.math3.geometry.partitioning.Transform<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> getTransform(double, double, double, double, double, double) throws org.apache.commons.math3.exception.MathIllegalArgumentException;
    Code:
       0: new           #47                 // class org/apache/commons/math3/geometry/euclidean/twod/Line$LineTransform
       3: dup
       4: dload_0
       5: dload_2
       6: dload         4
       8: dload         6
      10: dload         8
      12: dload         10
      14: invokespecial #48                 // Method org/apache/commons/math3/geometry/euclidean/twod/Line$LineTransform."<init>":(DDDDDD)V
      17: areturn

  public org.apache.commons.math3.geometry.partitioning.Region wholeSpace();
    Code:
       0: aload_0
       1: invokevirtual #49                 // Method wholeSpace:()Lorg/apache/commons/math3/geometry/euclidean/twod/PolygonsSet;
       4: areturn

  public org.apache.commons.math3.geometry.partitioning.SubHyperplane wholeHyperplane();
    Code:
       0: aload_0
       1: invokevirtual #50                 // Method wholeHyperplane:()Lorg/apache/commons/math3/geometry/euclidean/twod/SubLine;
       4: areturn

  public org.apache.commons.math3.geometry.partitioning.Hyperplane copySelf();
    Code:
       0: aload_0
       1: invokevirtual #51                 // Method copySelf:()Lorg/apache/commons/math3/geometry/euclidean/twod/Line;
       4: areturn

  public org.apache.commons.math3.geometry.Point toSpace(org.apache.commons.math3.geometry.Point);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #29                 // Method toSpace:(Lorg/apache/commons/math3/geometry/Point;)Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;
       5: areturn

  public org.apache.commons.math3.geometry.Point toSubSpace(org.apache.commons.math3.geometry.Point);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #28                 // Method toSubSpace:(Lorg/apache/commons/math3/geometry/Point;)Lorg/apache/commons/math3/geometry/euclidean/oned/Vector1D;
       5: areturn

  static double access$000(org.apache.commons.math3.geometry.euclidean.twod.Line);
    Code:
       0: aload_0
       1: getfield      #5                  // Field cos:D
       4: dreturn

  static double access$100(org.apache.commons.math3.geometry.euclidean.twod.Line);
    Code:
       0: aload_0
       1: getfield      #4                  // Field sin:D
       4: dreturn

  static double access$200(org.apache.commons.math3.geometry.euclidean.twod.Line);
    Code:
       0: aload_0
       1: getfield      #3                  // Field originOffset:D
       4: dreturn

  static double access$300(org.apache.commons.math3.geometry.euclidean.twod.Line);
    Code:
       0: aload_0
       1: getfield      #2                  // Field tolerance:D
       4: dreturn

  org.apache.commons.math3.geometry.euclidean.twod.Line(double, double, double, double, double, org.apache.commons.math3.geometry.euclidean.twod.Line$1);
    Code:
       0: aload_0
       1: dload_1
       2: dload_3
       3: dload         5
       5: dload         7
       7: dload         9
       9: invokespecial #1                  // Method "<init>":(DDDDD)V
      12: return
}
