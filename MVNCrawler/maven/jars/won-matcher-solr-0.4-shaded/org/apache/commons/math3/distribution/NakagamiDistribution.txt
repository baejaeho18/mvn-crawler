Compiled from "NakagamiDistribution.java"
public class org.apache.commons.math3.distribution.NakagamiDistribution extends org.apache.commons.math3.distribution.AbstractRealDistribution {
  public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY;

  private static final long serialVersionUID;

  private final double mu;

  private final double omega;

  private final double inverseAbsoluteAccuracy;

  public org.apache.commons.math3.distribution.NakagamiDistribution(double, double);
    Code:
       0: aload_0
       1: dload_1
       2: dload_3
       3: ldc2_w        #1                  // double 1.0E-9d
       6: invokespecial #3                  // Method "<init>":(DDD)V
       9: return

  public org.apache.commons.math3.distribution.NakagamiDistribution(double, double, double);
    Code:
       0: aload_0
       1: new           #4                  // class org/apache/commons/math3/random/Well19937c
       4: dup
       5: invokespecial #5                  // Method org/apache/commons/math3/random/Well19937c."<init>":()V
       8: dload_1
       9: dload_3
      10: dload         5
      12: invokespecial #6                  // Method "<init>":(Lorg/apache/commons/math3/random/RandomGenerator;DDD)V
      15: return

  public org.apache.commons.math3.distribution.NakagamiDistribution(org.apache.commons.math3.random.RandomGenerator, double, double, double);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #7                  // Method org/apache/commons/math3/distribution/AbstractRealDistribution."<init>":(Lorg/apache/commons/math3/random/RandomGenerator;)V
       5: dload_2
       6: ldc2_w        #8                  // double 0.5d
       9: dcmpg
      10: ifge          32
      13: new           #10                 // class org/apache/commons/math3/exception/NumberIsTooSmallException
      16: dup
      17: dload_2
      18: invokestatic  #11                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      21: ldc2_w        #8                  // double 0.5d
      24: invokestatic  #11                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      27: iconst_1
      28: invokespecial #12                 // Method org/apache/commons/math3/exception/NumberIsTooSmallException."<init>":(Ljava/lang/Number;Ljava/lang/Number;Z)V
      31: athrow
      32: dload         4
      34: dconst_0
      35: dcmpg
      36: ifgt          55
      39: new           #13                 // class org/apache/commons/math3/exception/NotStrictlyPositiveException
      42: dup
      43: getstatic     #14                 // Field org/apache/commons/math3/exception/util/LocalizedFormats.NOT_POSITIVE_SCALE:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
      46: dload         4
      48: invokestatic  #11                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      51: invokespecial #15                 // Method org/apache/commons/math3/exception/NotStrictlyPositiveException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;Ljava/lang/Number;)V
      54: athrow
      55: aload_0
      56: dload_2
      57: putfield      #16                 // Field mu:D
      60: aload_0
      61: dload         4
      63: putfield      #17                 // Field omega:D
      66: aload_0
      67: dload         6
      69: putfield      #18                 // Field inverseAbsoluteAccuracy:D
      72: return

  public double getShape();
    Code:
       0: aload_0
       1: getfield      #16                 // Field mu:D
       4: dreturn

  public double getScale();
    Code:
       0: aload_0
       1: getfield      #17                 // Field omega:D
       4: dreturn

  protected double getSolverAbsoluteAccuracy();
    Code:
       0: aload_0
       1: getfield      #18                 // Field inverseAbsoluteAccuracy:D
       4: dreturn

  public double density(double);
    Code:
       0: dload_1
       1: dconst_0
       2: dcmpg
       3: ifgt          8
       6: dconst_0
       7: dreturn
       8: ldc2_w        #19                 // double 2.0d
      11: aload_0
      12: getfield      #16                 // Field mu:D
      15: aload_0
      16: getfield      #16                 // Field mu:D
      19: invokestatic  #21                 // Method org/apache/commons/math3/util/FastMath.pow:(DD)D
      22: dmul
      23: aload_0
      24: getfield      #16                 // Field mu:D
      27: invokestatic  #22                 // Method org/apache/commons/math3/special/Gamma.gamma:(D)D
      30: aload_0
      31: getfield      #17                 // Field omega:D
      34: aload_0
      35: getfield      #16                 // Field mu:D
      38: invokestatic  #21                 // Method org/apache/commons/math3/util/FastMath.pow:(DD)D
      41: dmul
      42: ddiv
      43: dload_1
      44: ldc2_w        #19                 // double 2.0d
      47: aload_0
      48: getfield      #16                 // Field mu:D
      51: dmul
      52: dconst_1
      53: dsub
      54: invokestatic  #21                 // Method org/apache/commons/math3/util/FastMath.pow:(DD)D
      57: dmul
      58: aload_0
      59: getfield      #16                 // Field mu:D
      62: dneg
      63: dload_1
      64: dmul
      65: dload_1
      66: dmul
      67: aload_0
      68: getfield      #17                 // Field omega:D
      71: ddiv
      72: invokestatic  #23                 // Method org/apache/commons/math3/util/FastMath.exp:(D)D
      75: dmul
      76: dreturn

  public double cumulativeProbability(double);
    Code:
       0: aload_0
       1: getfield      #16                 // Field mu:D
       4: aload_0
       5: getfield      #16                 // Field mu:D
       8: dload_1
       9: dmul
      10: dload_1
      11: dmul
      12: aload_0
      13: getfield      #17                 // Field omega:D
      16: ddiv
      17: invokestatic  #24                 // Method org/apache/commons/math3/special/Gamma.regularizedGammaP:(DD)D
      20: dreturn

  public double getNumericalMean();
    Code:
       0: aload_0
       1: getfield      #16                 // Field mu:D
       4: ldc2_w        #8                  // double 0.5d
       7: dadd
       8: invokestatic  #22                 // Method org/apache/commons/math3/special/Gamma.gamma:(D)D
      11: aload_0
      12: getfield      #16                 // Field mu:D
      15: invokestatic  #22                 // Method org/apache/commons/math3/special/Gamma.gamma:(D)D
      18: ddiv
      19: aload_0
      20: getfield      #17                 // Field omega:D
      23: aload_0
      24: getfield      #16                 // Field mu:D
      27: ddiv
      28: invokestatic  #25                 // Method org/apache/commons/math3/util/FastMath.sqrt:(D)D
      31: dmul
      32: dreturn

  public double getNumericalVariance();
    Code:
       0: aload_0
       1: getfield      #16                 // Field mu:D
       4: ldc2_w        #8                  // double 0.5d
       7: dadd
       8: invokestatic  #22                 // Method org/apache/commons/math3/special/Gamma.gamma:(D)D
      11: aload_0
      12: getfield      #16                 // Field mu:D
      15: invokestatic  #22                 // Method org/apache/commons/math3/special/Gamma.gamma:(D)D
      18: ddiv
      19: dstore_1
      20: aload_0
      21: getfield      #17                 // Field omega:D
      24: dconst_1
      25: dconst_1
      26: aload_0
      27: getfield      #16                 // Field mu:D
      30: ddiv
      31: dload_1
      32: dmul
      33: dload_1
      34: dmul
      35: dsub
      36: dmul
      37: dreturn

  public double getSupportLowerBound();
    Code:
       0: dconst_0
       1: dreturn

  public double getSupportUpperBound();
    Code:
       0: ldc2_w        #26                 // double Infinityd
       3: dreturn

  public boolean isSupportLowerBoundInclusive();
    Code:
       0: iconst_1
       1: ireturn

  public boolean isSupportUpperBoundInclusive();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isSupportConnected();
    Code:
       0: iconst_1
       1: ireturn
}
