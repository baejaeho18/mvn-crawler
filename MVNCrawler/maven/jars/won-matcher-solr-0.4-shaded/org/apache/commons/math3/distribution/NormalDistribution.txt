Compiled from "NormalDistribution.java"
public class org.apache.commons.math3.distribution.NormalDistribution extends org.apache.commons.math3.distribution.AbstractRealDistribution {
  public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY;

  private static final long serialVersionUID;

  private static final double SQRT2;

  private final double mean;

  private final double standardDeviation;

  private final double logStandardDeviationPlusHalfLog2Pi;

  private final double solverAbsoluteAccuracy;

  public org.apache.commons.math3.distribution.NormalDistribution();
    Code:
       0: aload_0
       1: dconst_0
       2: dconst_1
       3: invokespecial #1                  // Method "<init>":(DD)V
       6: return

  public org.apache.commons.math3.distribution.NormalDistribution(double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException;
    Code:
       0: aload_0
       1: dload_1
       2: dload_3
       3: ldc2_w        #2                  // double 1.0E-9d
       6: invokespecial #4                  // Method "<init>":(DDD)V
       9: return

  public org.apache.commons.math3.distribution.NormalDistribution(double, double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException;
    Code:
       0: aload_0
       1: new           #5                  // class org/apache/commons/math3/random/Well19937c
       4: dup
       5: invokespecial #6                  // Method org/apache/commons/math3/random/Well19937c."<init>":()V
       8: dload_1
       9: dload_3
      10: dload         5
      12: invokespecial #7                  // Method "<init>":(Lorg/apache/commons/math3/random/RandomGenerator;DDD)V
      15: return

  public org.apache.commons.math3.distribution.NormalDistribution(org.apache.commons.math3.random.RandomGenerator, double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException;
    Code:
       0: aload_0
       1: aload_1
       2: dload_2
       3: dload         4
       5: ldc2_w        #2                  // double 1.0E-9d
       8: invokespecial #7                  // Method "<init>":(Lorg/apache/commons/math3/random/RandomGenerator;DDD)V
      11: return

  public org.apache.commons.math3.distribution.NormalDistribution(org.apache.commons.math3.random.RandomGenerator, double, double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #8                  // Method org/apache/commons/math3/distribution/AbstractRealDistribution."<init>":(Lorg/apache/commons/math3/random/RandomGenerator;)V
       5: dload         4
       7: dconst_0
       8: dcmpg
       9: ifgt          28
      12: new           #9                  // class org/apache/commons/math3/exception/NotStrictlyPositiveException
      15: dup
      16: getstatic     #10                 // Field org/apache/commons/math3/exception/util/LocalizedFormats.STANDARD_DEVIATION:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
      19: dload         4
      21: invokestatic  #11                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      24: invokespecial #12                 // Method org/apache/commons/math3/exception/NotStrictlyPositiveException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;Ljava/lang/Number;)V
      27: athrow
      28: aload_0
      29: dload_2
      30: putfield      #13                 // Field mean:D
      33: aload_0
      34: dload         4
      36: putfield      #14                 // Field standardDeviation:D
      39: aload_0
      40: dload         4
      42: invokestatic  #15                 // Method org/apache/commons/math3/util/FastMath.log:(D)D
      45: ldc2_w        #16                 // double 0.5d
      48: ldc2_w        #18                 // double 6.283185307179586d
      51: invokestatic  #15                 // Method org/apache/commons/math3/util/FastMath.log:(D)D
      54: dmul
      55: dadd
      56: putfield      #20                 // Field logStandardDeviationPlusHalfLog2Pi:D
      59: aload_0
      60: dload         6
      62: putfield      #21                 // Field solverAbsoluteAccuracy:D
      65: return

  public double getMean();
    Code:
       0: aload_0
       1: getfield      #13                 // Field mean:D
       4: dreturn

  public double getStandardDeviation();
    Code:
       0: aload_0
       1: getfield      #14                 // Field standardDeviation:D
       4: dreturn

  public double density(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokevirtual #22                 // Method logDensity:(D)D
       5: invokestatic  #23                 // Method org/apache/commons/math3/util/FastMath.exp:(D)D
       8: dreturn

  public double logDensity(double);
    Code:
       0: dload_1
       1: aload_0
       2: getfield      #13                 // Field mean:D
       5: dsub
       6: dstore_3
       7: dload_3
       8: aload_0
       9: getfield      #14                 // Field standardDeviation:D
      12: ddiv
      13: dstore        5
      15: ldc2_w        #24                 // double -0.5d
      18: dload         5
      20: dmul
      21: dload         5
      23: dmul
      24: aload_0
      25: getfield      #20                 // Field logStandardDeviationPlusHalfLog2Pi:D
      28: dsub
      29: dreturn

  public double cumulativeProbability(double);
    Code:
       0: dload_1
       1: aload_0
       2: getfield      #13                 // Field mean:D
       5: dsub
       6: dstore_3
       7: dload_3
       8: invokestatic  #26                 // Method org/apache/commons/math3/util/FastMath.abs:(D)D
      11: ldc2_w        #27                 // double 40.0d
      14: aload_0
      15: getfield      #14                 // Field standardDeviation:D
      18: dmul
      19: dcmpl
      20: ifle          35
      23: dload_3
      24: dconst_0
      25: dcmpg
      26: ifge          33
      29: dconst_0
      30: goto          34
      33: dconst_1
      34: dreturn
      35: ldc2_w        #16                 // double 0.5d
      38: dload_3
      39: dneg
      40: aload_0
      41: getfield      #14                 // Field standardDeviation:D
      44: getstatic     #29                 // Field SQRT2:D
      47: dmul
      48: ddiv
      49: invokestatic  #30                 // Method org/apache/commons/math3/special/Erf.erfc:(D)D
      52: dmul
      53: dreturn

  public double inverseCumulativeProbability(double) throws org.apache.commons.math3.exception.OutOfRangeException;
    Code:
       0: dload_1
       1: dconst_0
       2: dcmpg
       3: iflt          12
       6: dload_1
       7: dconst_1
       8: dcmpl
       9: ifle          32
      12: new           #31                 // class org/apache/commons/math3/exception/OutOfRangeException
      15: dup
      16: dload_1
      17: invokestatic  #11                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      20: iconst_0
      21: invokestatic  #32                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      24: iconst_1
      25: invokestatic  #32                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      28: invokespecial #33                 // Method org/apache/commons/math3/exception/OutOfRangeException."<init>":(Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V
      31: athrow
      32: aload_0
      33: getfield      #13                 // Field mean:D
      36: aload_0
      37: getfield      #14                 // Field standardDeviation:D
      40: getstatic     #29                 // Field SQRT2:D
      43: dmul
      44: ldc2_w        #34                 // double 2.0d
      47: dload_1
      48: dmul
      49: dconst_1
      50: dsub
      51: invokestatic  #36                 // Method org/apache/commons/math3/special/Erf.erfInv:(D)D
      54: dmul
      55: dadd
      56: dreturn

  public double cumulativeProbability(double, double) throws org.apache.commons.math3.exception.NumberIsTooLargeException;
    Code:
       0: aload_0
       1: dload_1
       2: dload_3
       3: invokevirtual #37                 // Method probability:(DD)D
       6: dreturn

  public double probability(double, double) throws org.apache.commons.math3.exception.NumberIsTooLargeException;
    Code:
       0: dload_1
       1: dload_3
       2: dcmpl
       3: ifle          26
       6: new           #38                 // class org/apache/commons/math3/exception/NumberIsTooLargeException
       9: dup
      10: getstatic     #39                 // Field org/apache/commons/math3/exception/util/LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
      13: dload_1
      14: invokestatic  #11                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      17: dload_3
      18: invokestatic  #11                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      21: iconst_1
      22: invokespecial #40                 // Method org/apache/commons/math3/exception/NumberIsTooLargeException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;Ljava/lang/Number;Ljava/lang/Number;Z)V
      25: athrow
      26: aload_0
      27: getfield      #14                 // Field standardDeviation:D
      30: getstatic     #29                 // Field SQRT2:D
      33: dmul
      34: dstore        5
      36: dload_1
      37: aload_0
      38: getfield      #13                 // Field mean:D
      41: dsub
      42: dload         5
      44: ddiv
      45: dstore        7
      47: dload_3
      48: aload_0
      49: getfield      #13                 // Field mean:D
      52: dsub
      53: dload         5
      55: ddiv
      56: dstore        9
      58: ldc2_w        #16                 // double 0.5d
      61: dload         7
      63: dload         9
      65: invokestatic  #41                 // Method org/apache/commons/math3/special/Erf.erf:(DD)D
      68: dmul
      69: dreturn

  protected double getSolverAbsoluteAccuracy();
    Code:
       0: aload_0
       1: getfield      #21                 // Field solverAbsoluteAccuracy:D
       4: dreturn

  public double getNumericalMean();
    Code:
       0: aload_0
       1: invokevirtual #42                 // Method getMean:()D
       4: dreturn

  public double getNumericalVariance();
    Code:
       0: aload_0
       1: invokevirtual #43                 // Method getStandardDeviation:()D
       4: dstore_1
       5: dload_1
       6: dload_1
       7: dmul
       8: dreturn

  public double getSupportLowerBound();
    Code:
       0: ldc2_w        #44                 // double -Infinityd
       3: dreturn

  public double getSupportUpperBound();
    Code:
       0: ldc2_w        #46                 // double Infinityd
       3: dreturn

  public boolean isSupportLowerBoundInclusive();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isSupportUpperBoundInclusive();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isSupportConnected();
    Code:
       0: iconst_1
       1: ireturn

  public double sample();
    Code:
       0: aload_0
       1: getfield      #14                 // Field standardDeviation:D
       4: aload_0
       5: getfield      #48                 // Field random:Lorg/apache/commons/math3/random/RandomGenerator;
       8: invokeinterface #49,  1           // InterfaceMethod org/apache/commons/math3/random/RandomGenerator.nextGaussian:()D
      13: dmul
      14: aload_0
      15: getfield      #13                 // Field mean:D
      18: dadd
      19: dreturn

  static {};
    Code:
       0: ldc2_w        #34                 // double 2.0d
       3: invokestatic  #50                 // Method org/apache/commons/math3/util/FastMath.sqrt:(D)D
       6: putstatic     #29                 // Field SQRT2:D
       9: return
}
