Compiled from "CSVFormat.java"
public final class org.apache.commons.csv.CSVFormat implements java.io.Serializable {
  public static final org.apache.commons.csv.CSVFormat DEFAULT;

  public static final org.apache.commons.csv.CSVFormat EXCEL;

  public static final org.apache.commons.csv.CSVFormat INFORMIX_UNLOAD;

  public static final org.apache.commons.csv.CSVFormat INFORMIX_UNLOAD_CSV;

  public static final org.apache.commons.csv.CSVFormat MYSQL;

  public static final org.apache.commons.csv.CSVFormat RFC4180;

  private static final long serialVersionUID;

  public static final org.apache.commons.csv.CSVFormat TDF;

  private final boolean allowMissingColumnNames;

  private final java.lang.Character commentMarker;

  private final char delimiter;

  private final java.lang.Character escapeCharacter;

  private final java.lang.String[] header;

  private final java.lang.String[] headerComments;

  private final boolean ignoreEmptyLines;

  private final boolean ignoreHeaderCase;

  private final boolean ignoreSurroundingSpaces;

  private final java.lang.String nullString;

  private final java.lang.Character quoteCharacter;

  private final org.apache.commons.csv.QuoteMode quoteMode;

  private final java.lang.String recordSeparator;

  private final boolean skipHeaderRecord;

  private final boolean trailingDelimiter;

  private final boolean trim;

  private static boolean isLineBreak(char);
    Code:
       0: iload_0
       1: bipush        10
       3: if_icmpeq     12
       6: iload_0
       7: bipush        13
       9: if_icmpne     16
      12: iconst_1
      13: goto          17
      16: iconst_0
      17: ireturn

  private static boolean isLineBreak(java.lang.Character);
    Code:
       0: aload_0
       1: ifnull        18
       4: aload_0
       5: invokevirtual #2                  // Method java/lang/Character.charValue:()C
       8: invokestatic  #3                  // Method isLineBreak:(C)Z
      11: ifeq          18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: ireturn

  public static org.apache.commons.csv.CSVFormat newFormat(char);
    Code:
       0: new           #4                  // class org/apache/commons/csv/CSVFormat
       3: dup
       4: iload_0
       5: aconst_null
       6: aconst_null
       7: aconst_null
       8: aconst_null
       9: iconst_0
      10: iconst_0
      11: aconst_null
      12: aconst_null
      13: aconst_null
      14: aconst_null
      15: iconst_0
      16: iconst_0
      17: iconst_0
      18: iconst_0
      19: iconst_0
      20: invokespecial #5                  // Method "<init>":(CLjava/lang/Character;Lorg/apache/commons/csv/QuoteMode;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/String;ZZZZZ)V
      23: areturn

  public static org.apache.commons.csv.CSVFormat valueOf(java.lang.String);
    Code:
       0: aload_0
       1: invokestatic  #6                  // Method org/apache/commons/csv/CSVFormat$Predefined.valueOf:(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat$Predefined;
       4: invokevirtual #7                  // Method org/apache/commons/csv/CSVFormat$Predefined.getFormat:()Lorg/apache/commons/csv/CSVFormat;
       7: areturn

  private org.apache.commons.csv.CSVFormat(char, java.lang.Character, org.apache.commons.csv.QuoteMode, java.lang.Character, java.lang.Character, boolean, boolean, java.lang.String, java.lang.String, java.lang.Object[], java.lang.String[], boolean, boolean, boolean, boolean, boolean);
    Code:
       0: aload_0
       1: invokespecial #8                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iload_1
       6: putfield      #9                  // Field delimiter:C
       9: aload_0
      10: aload_2
      11: putfield      #10                 // Field quoteCharacter:Ljava/lang/Character;
      14: aload_0
      15: aload_3
      16: putfield      #11                 // Field quoteMode:Lorg/apache/commons/csv/QuoteMode;
      19: aload_0
      20: aload         4
      22: putfield      #12                 // Field commentMarker:Ljava/lang/Character;
      25: aload_0
      26: aload         5
      28: putfield      #13                 // Field escapeCharacter:Ljava/lang/Character;
      31: aload_0
      32: iload         6
      34: putfield      #14                 // Field ignoreSurroundingSpaces:Z
      37: aload_0
      38: iload         13
      40: putfield      #15                 // Field allowMissingColumnNames:Z
      43: aload_0
      44: iload         7
      46: putfield      #16                 // Field ignoreEmptyLines:Z
      49: aload_0
      50: aload         8
      52: putfield      #17                 // Field recordSeparator:Ljava/lang/String;
      55: aload_0
      56: aload         9
      58: putfield      #18                 // Field nullString:Ljava/lang/String;
      61: aload_0
      62: aload_0
      63: aload         10
      65: invokespecial #19                 // Method toStringArray:([Ljava/lang/Object;)[Ljava/lang/String;
      68: putfield      #20                 // Field headerComments:[Ljava/lang/String;
      71: aload_0
      72: aload         11
      74: ifnonnull     81
      77: aconst_null
      78: goto          89
      81: aload         11
      83: invokevirtual #21                 // Method "[Ljava/lang/String;".clone:()Ljava/lang/Object;
      86: checkcast     #22                 // class "[Ljava/lang/String;"
      89: putfield      #23                 // Field header:[Ljava/lang/String;
      92: aload_0
      93: iload         12
      95: putfield      #24                 // Field skipHeaderRecord:Z
      98: aload_0
      99: iload         14
     101: putfield      #25                 // Field ignoreHeaderCase:Z
     104: aload_0
     105: iload         16
     107: putfield      #26                 // Field trailingDelimiter:Z
     110: aload_0
     111: iload         15
     113: putfield      #27                 // Field trim:Z
     116: aload_0
     117: invokespecial #28                 // Method validate:()V
     120: return

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: ifnonnull     13
      11: iconst_0
      12: ireturn
      13: aload_0
      14: invokevirtual #29                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      17: aload_1
      18: invokevirtual #29                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      21: if_acmpeq     26
      24: iconst_0
      25: ireturn
      26: aload_1
      27: checkcast     #4                  // class org/apache/commons/csv/CSVFormat
      30: astore_2
      31: aload_0
      32: getfield      #9                  // Field delimiter:C
      35: aload_2
      36: getfield      #9                  // Field delimiter:C
      39: if_icmpeq     44
      42: iconst_0
      43: ireturn
      44: aload_0
      45: getfield      #11                 // Field quoteMode:Lorg/apache/commons/csv/QuoteMode;
      48: aload_2
      49: getfield      #11                 // Field quoteMode:Lorg/apache/commons/csv/QuoteMode;
      52: if_acmpeq     57
      55: iconst_0
      56: ireturn
      57: aload_0
      58: getfield      #10                 // Field quoteCharacter:Ljava/lang/Character;
      61: ifnonnull     73
      64: aload_2
      65: getfield      #10                 // Field quoteCharacter:Ljava/lang/Character;
      68: ifnull        89
      71: iconst_0
      72: ireturn
      73: aload_0
      74: getfield      #10                 // Field quoteCharacter:Ljava/lang/Character;
      77: aload_2
      78: getfield      #10                 // Field quoteCharacter:Ljava/lang/Character;
      81: invokevirtual #30                 // Method java/lang/Character.equals:(Ljava/lang/Object;)Z
      84: ifne          89
      87: iconst_0
      88: ireturn
      89: aload_0
      90: getfield      #12                 // Field commentMarker:Ljava/lang/Character;
      93: ifnonnull     105
      96: aload_2
      97: getfield      #12                 // Field commentMarker:Ljava/lang/Character;
     100: ifnull        121
     103: iconst_0
     104: ireturn
     105: aload_0
     106: getfield      #12                 // Field commentMarker:Ljava/lang/Character;
     109: aload_2
     110: getfield      #12                 // Field commentMarker:Ljava/lang/Character;
     113: invokevirtual #30                 // Method java/lang/Character.equals:(Ljava/lang/Object;)Z
     116: ifne          121
     119: iconst_0
     120: ireturn
     121: aload_0
     122: getfield      #13                 // Field escapeCharacter:Ljava/lang/Character;
     125: ifnonnull     137
     128: aload_2
     129: getfield      #13                 // Field escapeCharacter:Ljava/lang/Character;
     132: ifnull        153
     135: iconst_0
     136: ireturn
     137: aload_0
     138: getfield      #13                 // Field escapeCharacter:Ljava/lang/Character;
     141: aload_2
     142: getfield      #13                 // Field escapeCharacter:Ljava/lang/Character;
     145: invokevirtual #30                 // Method java/lang/Character.equals:(Ljava/lang/Object;)Z
     148: ifne          153
     151: iconst_0
     152: ireturn
     153: aload_0
     154: getfield      #18                 // Field nullString:Ljava/lang/String;
     157: ifnonnull     169
     160: aload_2
     161: getfield      #18                 // Field nullString:Ljava/lang/String;
     164: ifnull        185
     167: iconst_0
     168: ireturn
     169: aload_0
     170: getfield      #18                 // Field nullString:Ljava/lang/String;
     173: aload_2
     174: getfield      #18                 // Field nullString:Ljava/lang/String;
     177: invokevirtual #31                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     180: ifne          185
     183: iconst_0
     184: ireturn
     185: aload_0
     186: getfield      #23                 // Field header:[Ljava/lang/String;
     189: aload_2
     190: getfield      #23                 // Field header:[Ljava/lang/String;
     193: invokestatic  #32                 // Method java/util/Arrays.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z
     196: ifne          201
     199: iconst_0
     200: ireturn
     201: aload_0
     202: getfield      #14                 // Field ignoreSurroundingSpaces:Z
     205: aload_2
     206: getfield      #14                 // Field ignoreSurroundingSpaces:Z
     209: if_icmpeq     214
     212: iconst_0
     213: ireturn
     214: aload_0
     215: getfield      #16                 // Field ignoreEmptyLines:Z
     218: aload_2
     219: getfield      #16                 // Field ignoreEmptyLines:Z
     222: if_icmpeq     227
     225: iconst_0
     226: ireturn
     227: aload_0
     228: getfield      #24                 // Field skipHeaderRecord:Z
     231: aload_2
     232: getfield      #24                 // Field skipHeaderRecord:Z
     235: if_icmpeq     240
     238: iconst_0
     239: ireturn
     240: aload_0
     241: getfield      #17                 // Field recordSeparator:Ljava/lang/String;
     244: ifnonnull     256
     247: aload_2
     248: getfield      #17                 // Field recordSeparator:Ljava/lang/String;
     251: ifnull        272
     254: iconst_0
     255: ireturn
     256: aload_0
     257: getfield      #17                 // Field recordSeparator:Ljava/lang/String;
     260: aload_2
     261: getfield      #17                 // Field recordSeparator:Ljava/lang/String;
     264: invokevirtual #31                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     267: ifne          272
     270: iconst_0
     271: ireturn
     272: iconst_1
     273: ireturn

  public java.lang.String format(java.lang.Object...);
    Code:
       0: new           #33                 // class java/io/StringWriter
       3: dup
       4: invokespecial #34                 // Method java/io/StringWriter."<init>":()V
       7: astore_2
       8: new           #35                 // class org/apache/commons/csv/CSVPrinter
      11: dup
      12: aload_2
      13: aload_0
      14: invokespecial #36                 // Method org/apache/commons/csv/CSVPrinter."<init>":(Ljava/lang/Appendable;Lorg/apache/commons/csv/CSVFormat;)V
      17: aload_1
      18: invokevirtual #37                 // Method org/apache/commons/csv/CSVPrinter.printRecord:([Ljava/lang/Object;)V
      21: aload_2
      22: invokevirtual #38                 // Method java/io/StringWriter.toString:()Ljava/lang/String;
      25: invokevirtual #39                 // Method java/lang/String.trim:()Ljava/lang/String;
      28: areturn
      29: astore_3
      30: new           #41                 // class java/lang/IllegalStateException
      33: dup
      34: aload_3
      35: invokespecial #42                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/Throwable;)V
      38: athrow
    Exception table:
       from    to  target type
           8    28    29   Class java/io/IOException

  public boolean getAllowMissingColumnNames();
    Code:
       0: aload_0
       1: getfield      #15                 // Field allowMissingColumnNames:Z
       4: ireturn

  public java.lang.Character getCommentMarker();
    Code:
       0: aload_0
       1: getfield      #12                 // Field commentMarker:Ljava/lang/Character;
       4: areturn

  public char getDelimiter();
    Code:
       0: aload_0
       1: getfield      #9                  // Field delimiter:C
       4: ireturn

  public java.lang.Character getEscapeCharacter();
    Code:
       0: aload_0
       1: getfield      #13                 // Field escapeCharacter:Ljava/lang/Character;
       4: areturn

  public java.lang.String[] getHeader();
    Code:
       0: aload_0
       1: getfield      #23                 // Field header:[Ljava/lang/String;
       4: ifnull        20
       7: aload_0
       8: getfield      #23                 // Field header:[Ljava/lang/String;
      11: invokevirtual #43                 // Method "[Ljava/lang/String;".clone:()Ljava/lang/Object;
      14: checkcast     #22                 // class "[Ljava/lang/String;"
      17: goto          21
      20: aconst_null
      21: areturn

  public java.lang.String[] getHeaderComments();
    Code:
       0: aload_0
       1: getfield      #20                 // Field headerComments:[Ljava/lang/String;
       4: ifnull        20
       7: aload_0
       8: getfield      #20                 // Field headerComments:[Ljava/lang/String;
      11: invokevirtual #44                 // Method "[Ljava/lang/String;".clone:()Ljava/lang/Object;
      14: checkcast     #22                 // class "[Ljava/lang/String;"
      17: goto          21
      20: aconst_null
      21: areturn

  public boolean getIgnoreEmptyLines();
    Code:
       0: aload_0
       1: getfield      #16                 // Field ignoreEmptyLines:Z
       4: ireturn

  public boolean getIgnoreHeaderCase();
    Code:
       0: aload_0
       1: getfield      #25                 // Field ignoreHeaderCase:Z
       4: ireturn

  public boolean getIgnoreSurroundingSpaces();
    Code:
       0: aload_0
       1: getfield      #14                 // Field ignoreSurroundingSpaces:Z
       4: ireturn

  public java.lang.String getNullString();
    Code:
       0: aload_0
       1: getfield      #18                 // Field nullString:Ljava/lang/String;
       4: areturn

  public java.lang.Character getQuoteCharacter();
    Code:
       0: aload_0
       1: getfield      #10                 // Field quoteCharacter:Ljava/lang/Character;
       4: areturn

  public org.apache.commons.csv.QuoteMode getQuoteMode();
    Code:
       0: aload_0
       1: getfield      #11                 // Field quoteMode:Lorg/apache/commons/csv/QuoteMode;
       4: areturn

  public java.lang.String getRecordSeparator();
    Code:
       0: aload_0
       1: getfield      #17                 // Field recordSeparator:Ljava/lang/String;
       4: areturn

  public boolean getSkipHeaderRecord();
    Code:
       0: aload_0
       1: getfield      #24                 // Field skipHeaderRecord:Z
       4: ireturn

  public boolean getTrailingDelimiter();
    Code:
       0: aload_0
       1: getfield      #26                 // Field trailingDelimiter:Z
       4: ireturn

  public boolean getTrim();
    Code:
       0: aload_0
       1: getfield      #27                 // Field trim:Z
       4: ireturn

  public int hashCode();
    Code:
       0: bipush        31
       2: istore_1
       3: iconst_1
       4: istore_2
       5: bipush        31
       7: iload_2
       8: imul
       9: aload_0
      10: getfield      #9                  // Field delimiter:C
      13: iadd
      14: istore_2
      15: bipush        31
      17: iload_2
      18: imul
      19: aload_0
      20: getfield      #11                 // Field quoteMode:Lorg/apache/commons/csv/QuoteMode;
      23: ifnonnull     30
      26: iconst_0
      27: goto          37
      30: aload_0
      31: getfield      #11                 // Field quoteMode:Lorg/apache/commons/csv/QuoteMode;
      34: invokevirtual #45                 // Method org/apache/commons/csv/QuoteMode.hashCode:()I
      37: iadd
      38: istore_2
      39: bipush        31
      41: iload_2
      42: imul
      43: aload_0
      44: getfield      #10                 // Field quoteCharacter:Ljava/lang/Character;
      47: ifnonnull     54
      50: iconst_0
      51: goto          61
      54: aload_0
      55: getfield      #10                 // Field quoteCharacter:Ljava/lang/Character;
      58: invokevirtual #46                 // Method java/lang/Character.hashCode:()I
      61: iadd
      62: istore_2
      63: bipush        31
      65: iload_2
      66: imul
      67: aload_0
      68: getfield      #12                 // Field commentMarker:Ljava/lang/Character;
      71: ifnonnull     78
      74: iconst_0
      75: goto          85
      78: aload_0
      79: getfield      #12                 // Field commentMarker:Ljava/lang/Character;
      82: invokevirtual #46                 // Method java/lang/Character.hashCode:()I
      85: iadd
      86: istore_2
      87: bipush        31
      89: iload_2
      90: imul
      91: aload_0
      92: getfield      #13                 // Field escapeCharacter:Ljava/lang/Character;
      95: ifnonnull     102
      98: iconst_0
      99: goto          109
     102: aload_0
     103: getfield      #13                 // Field escapeCharacter:Ljava/lang/Character;
     106: invokevirtual #46                 // Method java/lang/Character.hashCode:()I
     109: iadd
     110: istore_2
     111: bipush        31
     113: iload_2
     114: imul
     115: aload_0
     116: getfield      #18                 // Field nullString:Ljava/lang/String;
     119: ifnonnull     126
     122: iconst_0
     123: goto          133
     126: aload_0
     127: getfield      #18                 // Field nullString:Ljava/lang/String;
     130: invokevirtual #47                 // Method java/lang/String.hashCode:()I
     133: iadd
     134: istore_2
     135: bipush        31
     137: iload_2
     138: imul
     139: aload_0
     140: getfield      #14                 // Field ignoreSurroundingSpaces:Z
     143: ifeq          152
     146: sipush        1231
     149: goto          155
     152: sipush        1237
     155: iadd
     156: istore_2
     157: bipush        31
     159: iload_2
     160: imul
     161: aload_0
     162: getfield      #25                 // Field ignoreHeaderCase:Z
     165: ifeq          174
     168: sipush        1231
     171: goto          177
     174: sipush        1237
     177: iadd
     178: istore_2
     179: bipush        31
     181: iload_2
     182: imul
     183: aload_0
     184: getfield      #16                 // Field ignoreEmptyLines:Z
     187: ifeq          196
     190: sipush        1231
     193: goto          199
     196: sipush        1237
     199: iadd
     200: istore_2
     201: bipush        31
     203: iload_2
     204: imul
     205: aload_0
     206: getfield      #24                 // Field skipHeaderRecord:Z
     209: ifeq          218
     212: sipush        1231
     215: goto          221
     218: sipush        1237
     221: iadd
     222: istore_2
     223: bipush        31
     225: iload_2
     226: imul
     227: aload_0
     228: getfield      #17                 // Field recordSeparator:Ljava/lang/String;
     231: ifnonnull     238
     234: iconst_0
     235: goto          245
     238: aload_0
     239: getfield      #17                 // Field recordSeparator:Ljava/lang/String;
     242: invokevirtual #47                 // Method java/lang/String.hashCode:()I
     245: iadd
     246: istore_2
     247: bipush        31
     249: iload_2
     250: imul
     251: aload_0
     252: getfield      #23                 // Field header:[Ljava/lang/String;
     255: invokestatic  #48                 // Method java/util/Arrays.hashCode:([Ljava/lang/Object;)I
     258: iadd
     259: istore_2
     260: iload_2
     261: ireturn

  public boolean isCommentMarkerSet();
    Code:
       0: aload_0
       1: getfield      #12                 // Field commentMarker:Ljava/lang/Character;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public boolean isEscapeCharacterSet();
    Code:
       0: aload_0
       1: getfield      #13                 // Field escapeCharacter:Ljava/lang/Character;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public boolean isNullStringSet();
    Code:
       0: aload_0
       1: getfield      #18                 // Field nullString:Ljava/lang/String;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public boolean isQuoteCharacterSet();
    Code:
       0: aload_0
       1: getfield      #10                 // Field quoteCharacter:Ljava/lang/Character;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public org.apache.commons.csv.CSVParser parse(java.io.Reader) throws java.io.IOException;
    Code:
       0: new           #49                 // class org/apache/commons/csv/CSVParser
       3: dup
       4: aload_1
       5: aload_0
       6: invokespecial #50                 // Method org/apache/commons/csv/CSVParser."<init>":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V
       9: areturn

  public org.apache.commons.csv.CSVPrinter print(java.lang.Appendable) throws java.io.IOException;
    Code:
       0: new           #35                 // class org/apache/commons/csv/CSVPrinter
       3: dup
       4: aload_1
       5: aload_0
       6: invokespecial #36                 // Method org/apache/commons/csv/CSVPrinter."<init>":(Ljava/lang/Appendable;Lorg/apache/commons/csv/CSVFormat;)V
       9: areturn

  public void print(java.lang.Object, java.lang.Appendable, boolean) throws java.io.IOException;
    Code:
       0: aload_1
       1: ifnonnull     25
       4: aload_0
       5: getfield      #18                 // Field nullString:Ljava/lang/String;
       8: ifnonnull     16
      11: ldc           #51                 // String
      13: goto          20
      16: aload_0
      17: getfield      #18                 // Field nullString:Ljava/lang/String;
      20: astore        4
      22: goto          45
      25: aload_1
      26: instanceof    #52                 // class java/lang/CharSequence
      29: ifeq          39
      32: aload_1
      33: checkcast     #52                 // class java/lang/CharSequence
      36: goto          43
      39: aload_1
      40: invokevirtual #53                 // Method java/lang/Object.toString:()Ljava/lang/String;
      43: astore        4
      45: aload_0
      46: invokevirtual #54                 // Method getTrim:()Z
      49: ifeq          61
      52: aload_0
      53: aload         4
      55: invokespecial #55                 // Method trim:(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;
      58: goto          63
      61: aload         4
      63: astore        4
      65: aload_0
      66: aload_1
      67: aload         4
      69: iconst_0
      70: aload         4
      72: invokeinterface #56,  1           // InterfaceMethod java/lang/CharSequence.length:()I
      77: aload_2
      78: iload_3
      79: invokespecial #57                 // Method print:(Ljava/lang/Object;Ljava/lang/CharSequence;IILjava/lang/Appendable;Z)V
      82: return

  private void print(java.lang.Object, java.lang.CharSequence, int, int, java.lang.Appendable, boolean) throws java.io.IOException;
    Code:
       0: iload         6
       2: ifne          17
       5: aload         5
       7: aload_0
       8: invokevirtual #58                 // Method getDelimiter:()C
      11: invokeinterface #59,  2           // InterfaceMethod java/lang/Appendable.append:(C)Ljava/lang/Appendable;
      16: pop
      17: aload_1
      18: ifnonnull     33
      21: aload         5
      23: aload_2
      24: invokeinterface #60,  2           // InterfaceMethod java/lang/Appendable.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;
      29: pop
      30: goto          90
      33: aload_0
      34: invokevirtual #61                 // Method isQuoteCharacterSet:()Z
      37: ifeq          56
      40: aload_0
      41: aload_1
      42: aload_2
      43: iload_3
      44: iload         4
      46: aload         5
      48: iload         6
      50: invokespecial #62                 // Method printAndQuote:(Ljava/lang/Object;Ljava/lang/CharSequence;IILjava/lang/Appendable;Z)V
      53: goto          90
      56: aload_0
      57: invokevirtual #63                 // Method isEscapeCharacterSet:()Z
      60: ifeq          76
      63: aload_0
      64: aload_2
      65: iload_3
      66: iload         4
      68: aload         5
      70: invokespecial #64                 // Method printAndEscape:(Ljava/lang/CharSequence;IILjava/lang/Appendable;)V
      73: goto          90
      76: aload         5
      78: aload_2
      79: iload_3
      80: iload_3
      81: iload         4
      83: iadd
      84: invokeinterface #65,  4           // InterfaceMethod java/lang/Appendable.append:(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;
      89: pop
      90: return

  private void printAndEscape(java.lang.CharSequence, int, int, java.lang.Appendable) throws java.io.IOException;
    Code:
       0: iload_2
       1: istore        5
       3: iload_2
       4: istore        6
       6: iload_2
       7: iload_3
       8: iadd
       9: istore        7
      11: aload_0
      12: invokevirtual #58                 // Method getDelimiter:()C
      15: istore        8
      17: aload_0
      18: invokevirtual #66                 // Method getEscapeCharacter:()Ljava/lang/Character;
      21: invokevirtual #2                  // Method java/lang/Character.charValue:()C
      24: istore        9
      26: iload         6
      28: iload         7
      30: if_icmpge     148
      33: aload_1
      34: iload         6
      36: invokeinterface #67,  2           // InterfaceMethod java/lang/CharSequence.charAt:(I)C
      41: istore        10
      43: iload         10
      45: bipush        13
      47: if_icmpeq     71
      50: iload         10
      52: bipush        10
      54: if_icmpeq     71
      57: iload         10
      59: iload         8
      61: if_icmpeq     71
      64: iload         10
      66: iload         9
      68: if_icmpne     142
      71: iload         6
      73: iload         5
      75: if_icmple     91
      78: aload         4
      80: aload_1
      81: iload         5
      83: iload         6
      85: invokeinterface #65,  4           // InterfaceMethod java/lang/Appendable.append:(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;
      90: pop
      91: iload         10
      93: bipush        10
      95: if_icmpne     105
      98: bipush        110
     100: istore        10
     102: goto          116
     105: iload         10
     107: bipush        13
     109: if_icmpne     116
     112: bipush        114
     114: istore        10
     116: aload         4
     118: iload         9
     120: invokeinterface #59,  2           // InterfaceMethod java/lang/Appendable.append:(C)Ljava/lang/Appendable;
     125: pop
     126: aload         4
     128: iload         10
     130: invokeinterface #59,  2           // InterfaceMethod java/lang/Appendable.append:(C)Ljava/lang/Appendable;
     135: pop
     136: iload         6
     138: iconst_1
     139: iadd
     140: istore        5
     142: iinc          6, 1
     145: goto          26
     148: iload         6
     150: iload         5
     152: if_icmple     168
     155: aload         4
     157: aload_1
     158: iload         5
     160: iload         6
     162: invokeinterface #65,  4           // InterfaceMethod java/lang/Appendable.append:(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;
     167: pop
     168: return

  private void printAndQuote(java.lang.Object, java.lang.CharSequence, int, int, java.lang.Appendable, boolean) throws java.io.IOException;
    Code:
       0: iconst_0
       1: istore        7
       3: iload_3
       4: istore        8
       6: iload_3
       7: istore        9
       9: iload_3
      10: iload         4
      12: iadd
      13: istore        10
      15: aload_0
      16: invokevirtual #58                 // Method getDelimiter:()C
      19: istore        11
      21: aload_0
      22: invokevirtual #68                 // Method getQuoteCharacter:()Ljava/lang/Character;
      25: invokevirtual #2                  // Method java/lang/Character.charValue:()C
      28: istore        12
      30: aload_0
      31: invokevirtual #69                 // Method getQuoteMode:()Lorg/apache/commons/csv/QuoteMode;
      34: astore        13
      36: aload         13
      38: ifnonnull     46
      41: getstatic     #70                 // Field org/apache/commons/csv/QuoteMode.MINIMAL:Lorg/apache/commons/csv/QuoteMode;
      44: astore        13
      46: getstatic     #71                 // Field org/apache/commons/csv/CSVFormat$1.$SwitchMap$org$apache$commons$csv$QuoteMode:[I
      49: aload         13
      51: invokevirtual #72                 // Method org/apache/commons/csv/QuoteMode.ordinal:()I
      54: iaload
      55: tableswitch   { // 1 to 4
                     1: 84
                     2: 90
                     3: 107
                     4: 118
               default: 317
          }
      84: iconst_1
      85: istore        7
      87: goto          345
      90: aload_1
      91: instanceof    #73                 // class java/lang/Number
      94: ifne          101
      97: iconst_1
      98: goto          102
     101: iconst_0
     102: istore        7
     104: goto          345
     107: aload_0
     108: aload_2
     109: iload_3
     110: iload         4
     112: aload         5
     114: invokespecial #64                 // Method printAndEscape:(Ljava/lang/CharSequence;IILjava/lang/Appendable;)V
     117: return
     118: iload         4
     120: ifgt          134
     123: iload         6
     125: ifeq          298
     128: iconst_1
     129: istore        7
     131: goto          298
     134: aload_2
     135: iload         9
     137: invokeinterface #67,  2           // InterfaceMethod java/lang/CharSequence.charAt:(I)C
     142: istore        14
     144: iload         6
     146: ifeq          197
     149: iload         14
     151: bipush        48
     153: if_icmplt     191
     156: iload         14
     158: bipush        57
     160: if_icmple     170
     163: iload         14
     165: bipush        65
     167: if_icmplt     191
     170: iload         14
     172: bipush        90
     174: if_icmple     184
     177: iload         14
     179: bipush        97
     181: if_icmplt     191
     184: iload         14
     186: bipush        122
     188: if_icmple     197
     191: iconst_1
     192: istore        7
     194: goto          298
     197: iload         14
     199: bipush        35
     201: if_icmpgt     210
     204: iconst_1
     205: istore        7
     207: goto          298
     210: iload         9
     212: iload         10
     214: if_icmpge     267
     217: aload_2
     218: iload         9
     220: invokeinterface #67,  2           // InterfaceMethod java/lang/CharSequence.charAt:(I)C
     225: istore        14
     227: iload         14
     229: bipush        10
     231: if_icmpeq     255
     234: iload         14
     236: bipush        13
     238: if_icmpeq     255
     241: iload         14
     243: iload         12
     245: if_icmpeq     255
     248: iload         14
     250: iload         11
     252: if_icmpne     261
     255: iconst_1
     256: istore        7
     258: goto          267
     261: iinc          9, 1
     264: goto          210
     267: iload         7
     269: ifne          298
     272: iload         10
     274: iconst_1
     275: isub
     276: istore        9
     278: aload_2
     279: iload         9
     281: invokeinterface #67,  2           // InterfaceMethod java/lang/CharSequence.charAt:(I)C
     286: istore        14
     288: iload         14
     290: bipush        32
     292: if_icmpgt     298
     295: iconst_1
     296: istore        7
     298: iload         7
     300: ifne          345
     303: aload         5
     305: aload_2
     306: iload         8
     308: iload         10
     310: invokeinterface #65,  4           // InterfaceMethod java/lang/Appendable.append:(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;
     315: pop
     316: return
     317: new           #41                 // class java/lang/IllegalStateException
     320: dup
     321: new           #74                 // class java/lang/StringBuilder
     324: dup
     325: invokespecial #75                 // Method java/lang/StringBuilder."<init>":()V
     328: ldc           #76                 // String Unexpected Quote value:
     330: invokevirtual #77                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     333: aload         13
     335: invokevirtual #78                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     338: invokevirtual #79                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     341: invokespecial #80                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
     344: athrow
     345: iload         7
     347: ifne          364
     350: aload         5
     352: aload_2
     353: iload         8
     355: iload         10
     357: invokeinterface #65,  4           // InterfaceMethod java/lang/Appendable.append:(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;
     362: pop
     363: return
     364: aload         5
     366: iload         12
     368: invokeinterface #59,  2           // InterfaceMethod java/lang/Appendable.append:(C)Ljava/lang/Appendable;
     373: pop
     374: iload         9
     376: iload         10
     378: if_icmpge     423
     381: aload_2
     382: iload         9
     384: invokeinterface #67,  2           // InterfaceMethod java/lang/CharSequence.charAt:(I)C
     389: istore        14
     391: iload         14
     393: iload         12
     395: if_icmpne     417
     398: aload         5
     400: aload_2
     401: iload         8
     403: iload         9
     405: iconst_1
     406: iadd
     407: invokeinterface #65,  4           // InterfaceMethod java/lang/Appendable.append:(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;
     412: pop
     413: iload         9
     415: istore        8
     417: iinc          9, 1
     420: goto          374
     423: aload         5
     425: aload_2
     426: iload         8
     428: iload         9
     430: invokeinterface #65,  4           // InterfaceMethod java/lang/Appendable.append:(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;
     435: pop
     436: aload         5
     438: iload         12
     440: invokeinterface #59,  2           // InterfaceMethod java/lang/Appendable.append:(C)Ljava/lang/Appendable;
     445: pop
     446: return

  public void println(java.lang.Appendable) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #81                 // Method getTrailingDelimiter:()Z
       4: ifeq          18
       7: aload_1
       8: aload_0
       9: invokevirtual #58                 // Method getDelimiter:()C
      12: invokeinterface #59,  2           // InterfaceMethod java/lang/Appendable.append:(C)Ljava/lang/Appendable;
      17: pop
      18: aload_0
      19: getfield      #17                 // Field recordSeparator:Ljava/lang/String;
      22: ifnull        36
      25: aload_1
      26: aload_0
      27: getfield      #17                 // Field recordSeparator:Ljava/lang/String;
      30: invokeinterface #60,  2           // InterfaceMethod java/lang/Appendable.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;
      35: pop
      36: return

  public void printRecord(java.lang.Appendable, java.lang.Object...) throws java.io.IOException;
    Code:
       0: iconst_0
       1: istore_3
       2: iload_3
       3: aload_2
       4: arraylength
       5: if_icmpge     31
       8: aload_0
       9: aload_2
      10: iload_3
      11: aaload
      12: aload_1
      13: iload_3
      14: ifne          21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: invokevirtual #82                 // Method print:(Ljava/lang/Object;Ljava/lang/Appendable;Z)V
      25: iinc          3, 1
      28: goto          2
      31: aload_0
      32: aload_1
      33: invokevirtual #83                 // Method println:(Ljava/lang/Appendable;)V
      36: return

  public java.lang.String toString();
    Code:
       0: new           #74                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #75                 // Method java/lang/StringBuilder."<init>":()V
       7: astore_1
       8: aload_1
       9: ldc           #84                 // String Delimiter=<
      11: invokevirtual #77                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      14: aload_0
      15: getfield      #9                  // Field delimiter:C
      18: invokevirtual #85                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      21: bipush        62
      23: invokevirtual #85                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      26: pop
      27: aload_0
      28: invokevirtual #63                 // Method isEscapeCharacterSet:()Z
      31: ifeq          60
      34: aload_1
      35: bipush        32
      37: invokevirtual #85                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      40: pop
      41: aload_1
      42: ldc           #86                 // String Escape=<
      44: invokevirtual #77                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      47: aload_0
      48: getfield      #13                 // Field escapeCharacter:Ljava/lang/Character;
      51: invokevirtual #78                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      54: bipush        62
      56: invokevirtual #85                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      59: pop
      60: aload_0
      61: invokevirtual #61                 // Method isQuoteCharacterSet:()Z
      64: ifeq          93
      67: aload_1
      68: bipush        32
      70: invokevirtual #85                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      73: pop
      74: aload_1
      75: ldc           #87                 // String QuoteChar=<
      77: invokevirtual #77                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      80: aload_0
      81: getfield      #10                 // Field quoteCharacter:Ljava/lang/Character;
      84: invokevirtual #78                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      87: bipush        62
      89: invokevirtual #85                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      92: pop
      93: aload_0
      94: invokevirtual #88                 // Method isCommentMarkerSet:()Z
      97: ifeq          126
     100: aload_1
     101: bipush        32
     103: invokevirtual #85                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
     106: pop
     107: aload_1
     108: ldc           #89                 // String CommentStart=<
     110: invokevirtual #77                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     113: aload_0
     114: getfield      #12                 // Field commentMarker:Ljava/lang/Character;
     117: invokevirtual #78                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     120: bipush        62
     122: invokevirtual #85                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
     125: pop
     126: aload_0
     127: invokevirtual #90                 // Method isNullStringSet:()Z
     130: ifeq          159
     133: aload_1
     134: bipush        32
     136: invokevirtual #85                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
     139: pop
     140: aload_1
     141: ldc           #91                 // String NullString=<
     143: invokevirtual #77                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     146: aload_0
     147: getfield      #18                 // Field nullString:Ljava/lang/String;
     150: invokevirtual #77                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     153: bipush        62
     155: invokevirtual #85                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
     158: pop
     159: aload_0
     160: getfield      #17                 // Field recordSeparator:Ljava/lang/String;
     163: ifnull        192
     166: aload_1
     167: bipush        32
     169: invokevirtual #85                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
     172: pop
     173: aload_1
     174: ldc           #92                 // String RecordSeparator=<
     176: invokevirtual #77                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     179: aload_0
     180: getfield      #17                 // Field recordSeparator:Ljava/lang/String;
     183: invokevirtual #77                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     186: bipush        62
     188: invokevirtual #85                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
     191: pop
     192: aload_0
     193: invokevirtual #93                 // Method getIgnoreEmptyLines:()Z
     196: ifeq          206
     199: aload_1
     200: ldc           #94                 // String  EmptyLines:ignored
     202: invokevirtual #77                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     205: pop
     206: aload_0
     207: invokevirtual #95                 // Method getIgnoreSurroundingSpaces:()Z
     210: ifeq          220
     213: aload_1
     214: ldc           #96                 // String  SurroundingSpaces:ignored
     216: invokevirtual #77                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     219: pop
     220: aload_0
     221: invokevirtual #97                 // Method getIgnoreHeaderCase:()Z
     224: ifeq          234
     227: aload_1
     228: ldc           #98                 // String  IgnoreHeaderCase:ignored
     230: invokevirtual #77                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     233: pop
     234: aload_1
     235: ldc           #99                 // String  SkipHeaderRecord:
     237: invokevirtual #77                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     240: aload_0
     241: getfield      #24                 // Field skipHeaderRecord:Z
     244: invokevirtual #100                // Method java/lang/StringBuilder.append:(Z)Ljava/lang/StringBuilder;
     247: pop
     248: aload_0
     249: getfield      #20                 // Field headerComments:[Ljava/lang/String;
     252: ifnull        279
     255: aload_1
     256: bipush        32
     258: invokevirtual #85                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
     261: pop
     262: aload_1
     263: ldc           #101                // String HeaderComments:
     265: invokevirtual #77                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     268: aload_0
     269: getfield      #20                 // Field headerComments:[Ljava/lang/String;
     272: invokestatic  #102                // Method java/util/Arrays.toString:([Ljava/lang/Object;)Ljava/lang/String;
     275: invokevirtual #77                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     278: pop
     279: aload_0
     280: getfield      #23                 // Field header:[Ljava/lang/String;
     283: ifnull        310
     286: aload_1
     287: bipush        32
     289: invokevirtual #85                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
     292: pop
     293: aload_1
     294: ldc           #103                // String Header:
     296: invokevirtual #77                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     299: aload_0
     300: getfield      #23                 // Field header:[Ljava/lang/String;
     303: invokestatic  #102                // Method java/util/Arrays.toString:([Ljava/lang/Object;)Ljava/lang/String;
     306: invokevirtual #77                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     309: pop
     310: aload_1
     311: invokevirtual #79                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     314: areturn

  private java.lang.String[] toStringArray(java.lang.Object[]);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: areturn
       6: aload_1
       7: arraylength
       8: anewarray     #104                // class java/lang/String
      11: astore_2
      12: iconst_0
      13: istore_3
      14: iload_3
      15: aload_1
      16: arraylength
      17: if_icmpge     48
      20: aload_1
      21: iload_3
      22: aaload
      23: astore        4
      25: aload_2
      26: iload_3
      27: aload         4
      29: ifnonnull     36
      32: aconst_null
      33: goto          41
      36: aload         4
      38: invokevirtual #53                 // Method java/lang/Object.toString:()Ljava/lang/String;
      41: aastore
      42: iinc          3, 1
      45: goto          14
      48: aload_2
      49: areturn

  private java.lang.CharSequence trim(java.lang.CharSequence);
    Code:
       0: aload_1
       1: instanceof    #104                // class java/lang/String
       4: ifeq          15
       7: aload_1
       8: checkcast     #104                // class java/lang/String
      11: invokevirtual #39                 // Method java/lang/String.trim:()Ljava/lang/String;
      14: areturn
      15: aload_1
      16: invokeinterface #56,  1           // InterfaceMethod java/lang/CharSequence.length:()I
      21: istore_2
      22: iload_2
      23: istore_3
      24: iconst_0
      25: istore        4
      27: iload         4
      29: iload_3
      30: if_icmpge     52
      33: aload_1
      34: iload         4
      36: invokeinterface #67,  2           // InterfaceMethod java/lang/CharSequence.charAt:(I)C
      41: bipush        32
      43: if_icmpgt     52
      46: iinc          4, 1
      49: goto          27
      52: iload         4
      54: iload_3
      55: if_icmpge     78
      58: aload_1
      59: iload_3
      60: iconst_1
      61: isub
      62: invokeinterface #67,  2           // InterfaceMethod java/lang/CharSequence.charAt:(I)C
      67: bipush        32
      69: if_icmpgt     78
      72: iinc          3, -1
      75: goto          52
      78: iload         4
      80: ifgt          88
      83: iload_3
      84: iload_2
      85: if_icmpge     100
      88: aload_1
      89: iload         4
      91: iload_3
      92: invokeinterface #105,  3          // InterfaceMethod java/lang/CharSequence.subSequence:(II)Ljava/lang/CharSequence;
      97: goto          101
     100: aload_1
     101: areturn

  private void validate() throws java.lang.IllegalArgumentException;
    Code:
       0: aload_0
       1: getfield      #9                  // Field delimiter:C
       4: invokestatic  #3                  // Method isLineBreak:(C)Z
       7: ifeq          20
      10: new           #106                // class java/lang/IllegalArgumentException
      13: dup
      14: ldc           #107                // String The delimiter cannot be a line break
      16: invokespecial #108                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      19: athrow
      20: aload_0
      21: getfield      #10                 // Field quoteCharacter:Ljava/lang/Character;
      24: ifnull        76
      27: aload_0
      28: getfield      #9                  // Field delimiter:C
      31: aload_0
      32: getfield      #10                 // Field quoteCharacter:Ljava/lang/Character;
      35: invokevirtual #2                  // Method java/lang/Character.charValue:()C
      38: if_icmpne     76
      41: new           #106                // class java/lang/IllegalArgumentException
      44: dup
      45: new           #74                 // class java/lang/StringBuilder
      48: dup
      49: invokespecial #75                 // Method java/lang/StringBuilder."<init>":()V
      52: ldc           #109                // String The quoteChar character and the delimiter cannot be the same (\'
      54: invokevirtual #77                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      57: aload_0
      58: getfield      #10                 // Field quoteCharacter:Ljava/lang/Character;
      61: invokevirtual #78                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      64: ldc           #110                // String \')
      66: invokevirtual #77                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      69: invokevirtual #79                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      72: invokespecial #108                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      75: athrow
      76: aload_0
      77: getfield      #13                 // Field escapeCharacter:Ljava/lang/Character;
      80: ifnull        132
      83: aload_0
      84: getfield      #9                  // Field delimiter:C
      87: aload_0
      88: getfield      #13                 // Field escapeCharacter:Ljava/lang/Character;
      91: invokevirtual #2                  // Method java/lang/Character.charValue:()C
      94: if_icmpne     132
      97: new           #106                // class java/lang/IllegalArgumentException
     100: dup
     101: new           #74                 // class java/lang/StringBuilder
     104: dup
     105: invokespecial #75                 // Method java/lang/StringBuilder."<init>":()V
     108: ldc           #111                // String The escape character and the delimiter cannot be the same (\'
     110: invokevirtual #77                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     113: aload_0
     114: getfield      #13                 // Field escapeCharacter:Ljava/lang/Character;
     117: invokevirtual #78                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     120: ldc           #110                // String \')
     122: invokevirtual #77                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     125: invokevirtual #79                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     128: invokespecial #108                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     131: athrow
     132: aload_0
     133: getfield      #12                 // Field commentMarker:Ljava/lang/Character;
     136: ifnull        188
     139: aload_0
     140: getfield      #9                  // Field delimiter:C
     143: aload_0
     144: getfield      #12                 // Field commentMarker:Ljava/lang/Character;
     147: invokevirtual #2                  // Method java/lang/Character.charValue:()C
     150: if_icmpne     188
     153: new           #106                // class java/lang/IllegalArgumentException
     156: dup
     157: new           #74                 // class java/lang/StringBuilder
     160: dup
     161: invokespecial #75                 // Method java/lang/StringBuilder."<init>":()V
     164: ldc           #112                // String The comment start character and the delimiter cannot be the same (\'
     166: invokevirtual #77                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     169: aload_0
     170: getfield      #12                 // Field commentMarker:Ljava/lang/Character;
     173: invokevirtual #78                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     176: ldc           #110                // String \')
     178: invokevirtual #77                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     181: invokevirtual #79                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     184: invokespecial #108                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     187: athrow
     188: aload_0
     189: getfield      #10                 // Field quoteCharacter:Ljava/lang/Character;
     192: ifnull        244
     195: aload_0
     196: getfield      #10                 // Field quoteCharacter:Ljava/lang/Character;
     199: aload_0
     200: getfield      #12                 // Field commentMarker:Ljava/lang/Character;
     203: invokevirtual #30                 // Method java/lang/Character.equals:(Ljava/lang/Object;)Z
     206: ifeq          244
     209: new           #106                // class java/lang/IllegalArgumentException
     212: dup
     213: new           #74                 // class java/lang/StringBuilder
     216: dup
     217: invokespecial #75                 // Method java/lang/StringBuilder."<init>":()V
     220: ldc           #113                // String The comment start character and the quoteChar cannot be the same (\'
     222: invokevirtual #77                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     225: aload_0
     226: getfield      #12                 // Field commentMarker:Ljava/lang/Character;
     229: invokevirtual #78                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     232: ldc           #110                // String \')
     234: invokevirtual #77                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     237: invokevirtual #79                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     240: invokespecial #108                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     243: athrow
     244: aload_0
     245: getfield      #13                 // Field escapeCharacter:Ljava/lang/Character;
     248: ifnull        300
     251: aload_0
     252: getfield      #13                 // Field escapeCharacter:Ljava/lang/Character;
     255: aload_0
     256: getfield      #12                 // Field commentMarker:Ljava/lang/Character;
     259: invokevirtual #30                 // Method java/lang/Character.equals:(Ljava/lang/Object;)Z
     262: ifeq          300
     265: new           #106                // class java/lang/IllegalArgumentException
     268: dup
     269: new           #74                 // class java/lang/StringBuilder
     272: dup
     273: invokespecial #75                 // Method java/lang/StringBuilder."<init>":()V
     276: ldc           #114                // String The comment start and the escape character cannot be the same (\'
     278: invokevirtual #77                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     281: aload_0
     282: getfield      #12                 // Field commentMarker:Ljava/lang/Character;
     285: invokevirtual #78                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     288: ldc           #110                // String \')
     290: invokevirtual #77                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     293: invokevirtual #79                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     296: invokespecial #108                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     299: athrow
     300: aload_0
     301: getfield      #13                 // Field escapeCharacter:Ljava/lang/Character;
     304: ifnonnull     327
     307: aload_0
     308: getfield      #11                 // Field quoteMode:Lorg/apache/commons/csv/QuoteMode;
     311: getstatic     #115                // Field org/apache/commons/csv/QuoteMode.NONE:Lorg/apache/commons/csv/QuoteMode;
     314: if_acmpne     327
     317: new           #106                // class java/lang/IllegalArgumentException
     320: dup
     321: ldc           #116                // String No quotes mode set but no escape character is set
     323: invokespecial #108                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     326: athrow
     327: aload_0
     328: getfield      #23                 // Field header:[Ljava/lang/String;
     331: ifnull        425
     334: new           #117                // class java/util/HashSet
     337: dup
     338: invokespecial #118                // Method java/util/HashSet."<init>":()V
     341: astore_1
     342: aload_0
     343: getfield      #23                 // Field header:[Ljava/lang/String;
     346: astore_2
     347: aload_2
     348: arraylength
     349: istore_3
     350: iconst_0
     351: istore        4
     353: iload         4
     355: iload_3
     356: if_icmpge     425
     359: aload_2
     360: iload         4
     362: aaload
     363: astore        5
     365: aload_1
     366: aload         5
     368: invokeinterface #119,  2          // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
     373: ifne          419
     376: new           #106                // class java/lang/IllegalArgumentException
     379: dup
     380: new           #74                 // class java/lang/StringBuilder
     383: dup
     384: invokespecial #75                 // Method java/lang/StringBuilder."<init>":()V
     387: ldc           #120                // String The header contains a duplicate entry: \'
     389: invokevirtual #77                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     392: aload         5
     394: invokevirtual #77                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     397: ldc           #121                // String \' in
     399: invokevirtual #77                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     402: aload_0
     403: getfield      #23                 // Field header:[Ljava/lang/String;
     406: invokestatic  #102                // Method java/util/Arrays.toString:([Ljava/lang/Object;)Ljava/lang/String;
     409: invokevirtual #77                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     412: invokevirtual #79                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     415: invokespecial #108                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     418: athrow
     419: iinc          4, 1
     422: goto          353
     425: return

  public org.apache.commons.csv.CSVFormat withAllowMissingColumnNames();
    Code:
       0: aload_0
       1: iconst_1
       2: invokevirtual #122                // Method withAllowMissingColumnNames:(Z)Lorg/apache/commons/csv/CSVFormat;
       5: areturn

  public org.apache.commons.csv.CSVFormat withAllowMissingColumnNames(boolean);
    Code:
       0: new           #4                  // class org/apache/commons/csv/CSVFormat
       3: dup
       4: aload_0
       5: getfield      #9                  // Field delimiter:C
       8: aload_0
       9: getfield      #10                 // Field quoteCharacter:Ljava/lang/Character;
      12: aload_0
      13: getfield      #11                 // Field quoteMode:Lorg/apache/commons/csv/QuoteMode;
      16: aload_0
      17: getfield      #12                 // Field commentMarker:Ljava/lang/Character;
      20: aload_0
      21: getfield      #13                 // Field escapeCharacter:Ljava/lang/Character;
      24: aload_0
      25: getfield      #14                 // Field ignoreSurroundingSpaces:Z
      28: aload_0
      29: getfield      #16                 // Field ignoreEmptyLines:Z
      32: aload_0
      33: getfield      #17                 // Field recordSeparator:Ljava/lang/String;
      36: aload_0
      37: getfield      #18                 // Field nullString:Ljava/lang/String;
      40: aload_0
      41: getfield      #20                 // Field headerComments:[Ljava/lang/String;
      44: aload_0
      45: getfield      #23                 // Field header:[Ljava/lang/String;
      48: aload_0
      49: getfield      #24                 // Field skipHeaderRecord:Z
      52: iload_1
      53: aload_0
      54: getfield      #25                 // Field ignoreHeaderCase:Z
      57: aload_0
      58: getfield      #27                 // Field trim:Z
      61: aload_0
      62: getfield      #26                 // Field trailingDelimiter:Z
      65: invokespecial #5                  // Method "<init>":(CLjava/lang/Character;Lorg/apache/commons/csv/QuoteMode;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/String;ZZZZZ)V
      68: areturn

  public org.apache.commons.csv.CSVFormat withCommentMarker(char);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #123                // Method java/lang/Character.valueOf:(C)Ljava/lang/Character;
       5: invokevirtual #124                // Method withCommentMarker:(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;
       8: areturn

  public org.apache.commons.csv.CSVFormat withCommentMarker(java.lang.Character);
    Code:
       0: aload_1
       1: invokestatic  #125                // Method isLineBreak:(Ljava/lang/Character;)Z
       4: ifeq          17
       7: new           #106                // class java/lang/IllegalArgumentException
      10: dup
      11: ldc           #126                // String The comment start marker character cannot be a line break
      13: invokespecial #108                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: new           #4                  // class org/apache/commons/csv/CSVFormat
      20: dup
      21: aload_0
      22: getfield      #9                  // Field delimiter:C
      25: aload_0
      26: getfield      #10                 // Field quoteCharacter:Ljava/lang/Character;
      29: aload_0
      30: getfield      #11                 // Field quoteMode:Lorg/apache/commons/csv/QuoteMode;
      33: aload_1
      34: aload_0
      35: getfield      #13                 // Field escapeCharacter:Ljava/lang/Character;
      38: aload_0
      39: getfield      #14                 // Field ignoreSurroundingSpaces:Z
      42: aload_0
      43: getfield      #16                 // Field ignoreEmptyLines:Z
      46: aload_0
      47: getfield      #17                 // Field recordSeparator:Ljava/lang/String;
      50: aload_0
      51: getfield      #18                 // Field nullString:Ljava/lang/String;
      54: aload_0
      55: getfield      #20                 // Field headerComments:[Ljava/lang/String;
      58: aload_0
      59: getfield      #23                 // Field header:[Ljava/lang/String;
      62: aload_0
      63: getfield      #24                 // Field skipHeaderRecord:Z
      66: aload_0
      67: getfield      #15                 // Field allowMissingColumnNames:Z
      70: aload_0
      71: getfield      #25                 // Field ignoreHeaderCase:Z
      74: aload_0
      75: getfield      #27                 // Field trim:Z
      78: aload_0
      79: getfield      #26                 // Field trailingDelimiter:Z
      82: invokespecial #5                  // Method "<init>":(CLjava/lang/Character;Lorg/apache/commons/csv/QuoteMode;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/String;ZZZZZ)V
      85: areturn

  public org.apache.commons.csv.CSVFormat withDelimiter(char);
    Code:
       0: iload_1
       1: invokestatic  #3                  // Method isLineBreak:(C)Z
       4: ifeq          17
       7: new           #106                // class java/lang/IllegalArgumentException
      10: dup
      11: ldc           #107                // String The delimiter cannot be a line break
      13: invokespecial #108                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: new           #4                  // class org/apache/commons/csv/CSVFormat
      20: dup
      21: iload_1
      22: aload_0
      23: getfield      #10                 // Field quoteCharacter:Ljava/lang/Character;
      26: aload_0
      27: getfield      #11                 // Field quoteMode:Lorg/apache/commons/csv/QuoteMode;
      30: aload_0
      31: getfield      #12                 // Field commentMarker:Ljava/lang/Character;
      34: aload_0
      35: getfield      #13                 // Field escapeCharacter:Ljava/lang/Character;
      38: aload_0
      39: getfield      #14                 // Field ignoreSurroundingSpaces:Z
      42: aload_0
      43: getfield      #16                 // Field ignoreEmptyLines:Z
      46: aload_0
      47: getfield      #17                 // Field recordSeparator:Ljava/lang/String;
      50: aload_0
      51: getfield      #18                 // Field nullString:Ljava/lang/String;
      54: aload_0
      55: getfield      #20                 // Field headerComments:[Ljava/lang/String;
      58: aload_0
      59: getfield      #23                 // Field header:[Ljava/lang/String;
      62: aload_0
      63: getfield      #24                 // Field skipHeaderRecord:Z
      66: aload_0
      67: getfield      #15                 // Field allowMissingColumnNames:Z
      70: aload_0
      71: getfield      #25                 // Field ignoreHeaderCase:Z
      74: aload_0
      75: getfield      #27                 // Field trim:Z
      78: aload_0
      79: getfield      #26                 // Field trailingDelimiter:Z
      82: invokespecial #5                  // Method "<init>":(CLjava/lang/Character;Lorg/apache/commons/csv/QuoteMode;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/String;ZZZZZ)V
      85: areturn

  public org.apache.commons.csv.CSVFormat withEscape(char);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #123                // Method java/lang/Character.valueOf:(C)Ljava/lang/Character;
       5: invokevirtual #127                // Method withEscape:(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;
       8: areturn

  public org.apache.commons.csv.CSVFormat withEscape(java.lang.Character);
    Code:
       0: aload_1
       1: invokestatic  #125                // Method isLineBreak:(Ljava/lang/Character;)Z
       4: ifeq          17
       7: new           #106                // class java/lang/IllegalArgumentException
      10: dup
      11: ldc           #128                // String The escape character cannot be a line break
      13: invokespecial #108                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: new           #4                  // class org/apache/commons/csv/CSVFormat
      20: dup
      21: aload_0
      22: getfield      #9                  // Field delimiter:C
      25: aload_0
      26: getfield      #10                 // Field quoteCharacter:Ljava/lang/Character;
      29: aload_0
      30: getfield      #11                 // Field quoteMode:Lorg/apache/commons/csv/QuoteMode;
      33: aload_0
      34: getfield      #12                 // Field commentMarker:Ljava/lang/Character;
      37: aload_1
      38: aload_0
      39: getfield      #14                 // Field ignoreSurroundingSpaces:Z
      42: aload_0
      43: getfield      #16                 // Field ignoreEmptyLines:Z
      46: aload_0
      47: getfield      #17                 // Field recordSeparator:Ljava/lang/String;
      50: aload_0
      51: getfield      #18                 // Field nullString:Ljava/lang/String;
      54: aload_0
      55: getfield      #20                 // Field headerComments:[Ljava/lang/String;
      58: aload_0
      59: getfield      #23                 // Field header:[Ljava/lang/String;
      62: aload_0
      63: getfield      #24                 // Field skipHeaderRecord:Z
      66: aload_0
      67: getfield      #15                 // Field allowMissingColumnNames:Z
      70: aload_0
      71: getfield      #25                 // Field ignoreHeaderCase:Z
      74: aload_0
      75: getfield      #27                 // Field trim:Z
      78: aload_0
      79: getfield      #26                 // Field trailingDelimiter:Z
      82: invokespecial #5                  // Method "<init>":(CLjava/lang/Character;Lorg/apache/commons/csv/QuoteMode;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/String;ZZZZZ)V
      85: areturn

  public org.apache.commons.csv.CSVFormat withFirstRecordAsHeader();
    Code:
       0: aload_0
       1: iconst_0
       2: anewarray     #104                // class java/lang/String
       5: invokevirtual #129                // Method withHeader:([Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;
       8: invokevirtual #130                // Method withSkipHeaderRecord:()Lorg/apache/commons/csv/CSVFormat;
      11: areturn

  public org.apache.commons.csv.CSVFormat withHeader(java.lang.Class<? extends java.lang.Enum<?>>);
    Code:
       0: aconst_null
       1: astore_2
       2: aload_1
       3: ifnull        47
       6: aload_1
       7: invokevirtual #131                // Method java/lang/Class.getEnumConstants:()[Ljava/lang/Object;
      10: checkcast     #132                // class "[Ljava/lang/Enum;"
      13: astore_3
      14: aload_3
      15: arraylength
      16: anewarray     #104                // class java/lang/String
      19: astore_2
      20: iconst_0
      21: istore        4
      23: iload         4
      25: aload_3
      26: arraylength
      27: if_icmpge     47
      30: aload_2
      31: iload         4
      33: aload_3
      34: iload         4
      36: aaload
      37: invokevirtual #133                // Method java/lang/Enum.name:()Ljava/lang/String;
      40: aastore
      41: iinc          4, 1
      44: goto          23
      47: aload_0
      48: aload_2
      49: invokevirtual #129                // Method withHeader:([Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;
      52: areturn

  public org.apache.commons.csv.CSVFormat withHeader(java.sql.ResultSet) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_1
       2: ifnull        14
       5: aload_1
       6: invokeinterface #134,  1          // InterfaceMethod java/sql/ResultSet.getMetaData:()Ljava/sql/ResultSetMetaData;
      11: goto          15
      14: aconst_null
      15: invokevirtual #135                // Method withHeader:(Ljava/sql/ResultSetMetaData;)Lorg/apache/commons/csv/CSVFormat;
      18: areturn

  public org.apache.commons.csv.CSVFormat withHeader(java.sql.ResultSetMetaData) throws java.sql.SQLException;
    Code:
       0: aconst_null
       1: astore_2
       2: aload_1
       3: ifnull        47
       6: aload_1
       7: invokeinterface #136,  1          // InterfaceMethod java/sql/ResultSetMetaData.getColumnCount:()I
      12: istore_3
      13: iload_3
      14: anewarray     #104                // class java/lang/String
      17: astore_2
      18: iconst_0
      19: istore        4
      21: iload         4
      23: iload_3
      24: if_icmpge     47
      27: aload_2
      28: iload         4
      30: aload_1
      31: iload         4
      33: iconst_1
      34: iadd
      35: invokeinterface #137,  2          // InterfaceMethod java/sql/ResultSetMetaData.getColumnLabel:(I)Ljava/lang/String;
      40: aastore
      41: iinc          4, 1
      44: goto          21
      47: aload_0
      48: aload_2
      49: invokevirtual #129                // Method withHeader:([Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;
      52: areturn

  public org.apache.commons.csv.CSVFormat withHeader(java.lang.String...);
    Code:
       0: new           #4                  // class org/apache/commons/csv/CSVFormat
       3: dup
       4: aload_0
       5: getfield      #9                  // Field delimiter:C
       8: aload_0
       9: getfield      #10                 // Field quoteCharacter:Ljava/lang/Character;
      12: aload_0
      13: getfield      #11                 // Field quoteMode:Lorg/apache/commons/csv/QuoteMode;
      16: aload_0
      17: getfield      #12                 // Field commentMarker:Ljava/lang/Character;
      20: aload_0
      21: getfield      #13                 // Field escapeCharacter:Ljava/lang/Character;
      24: aload_0
      25: getfield      #14                 // Field ignoreSurroundingSpaces:Z
      28: aload_0
      29: getfield      #16                 // Field ignoreEmptyLines:Z
      32: aload_0
      33: getfield      #17                 // Field recordSeparator:Ljava/lang/String;
      36: aload_0
      37: getfield      #18                 // Field nullString:Ljava/lang/String;
      40: aload_0
      41: getfield      #20                 // Field headerComments:[Ljava/lang/String;
      44: aload_1
      45: aload_0
      46: getfield      #24                 // Field skipHeaderRecord:Z
      49: aload_0
      50: getfield      #15                 // Field allowMissingColumnNames:Z
      53: aload_0
      54: getfield      #25                 // Field ignoreHeaderCase:Z
      57: aload_0
      58: getfield      #27                 // Field trim:Z
      61: aload_0
      62: getfield      #26                 // Field trailingDelimiter:Z
      65: invokespecial #5                  // Method "<init>":(CLjava/lang/Character;Lorg/apache/commons/csv/QuoteMode;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/String;ZZZZZ)V
      68: areturn

  public org.apache.commons.csv.CSVFormat withHeaderComments(java.lang.Object...);
    Code:
       0: new           #4                  // class org/apache/commons/csv/CSVFormat
       3: dup
       4: aload_0
       5: getfield      #9                  // Field delimiter:C
       8: aload_0
       9: getfield      #10                 // Field quoteCharacter:Ljava/lang/Character;
      12: aload_0
      13: getfield      #11                 // Field quoteMode:Lorg/apache/commons/csv/QuoteMode;
      16: aload_0
      17: getfield      #12                 // Field commentMarker:Ljava/lang/Character;
      20: aload_0
      21: getfield      #13                 // Field escapeCharacter:Ljava/lang/Character;
      24: aload_0
      25: getfield      #14                 // Field ignoreSurroundingSpaces:Z
      28: aload_0
      29: getfield      #16                 // Field ignoreEmptyLines:Z
      32: aload_0
      33: getfield      #17                 // Field recordSeparator:Ljava/lang/String;
      36: aload_0
      37: getfield      #18                 // Field nullString:Ljava/lang/String;
      40: aload_1
      41: aload_0
      42: getfield      #23                 // Field header:[Ljava/lang/String;
      45: aload_0
      46: getfield      #24                 // Field skipHeaderRecord:Z
      49: aload_0
      50: getfield      #15                 // Field allowMissingColumnNames:Z
      53: aload_0
      54: getfield      #25                 // Field ignoreHeaderCase:Z
      57: aload_0
      58: getfield      #27                 // Field trim:Z
      61: aload_0
      62: getfield      #26                 // Field trailingDelimiter:Z
      65: invokespecial #5                  // Method "<init>":(CLjava/lang/Character;Lorg/apache/commons/csv/QuoteMode;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/String;ZZZZZ)V
      68: areturn

  public org.apache.commons.csv.CSVFormat withIgnoreEmptyLines();
    Code:
       0: aload_0
       1: iconst_1
       2: invokevirtual #138                // Method withIgnoreEmptyLines:(Z)Lorg/apache/commons/csv/CSVFormat;
       5: areturn

  public org.apache.commons.csv.CSVFormat withIgnoreEmptyLines(boolean);
    Code:
       0: new           #4                  // class org/apache/commons/csv/CSVFormat
       3: dup
       4: aload_0
       5: getfield      #9                  // Field delimiter:C
       8: aload_0
       9: getfield      #10                 // Field quoteCharacter:Ljava/lang/Character;
      12: aload_0
      13: getfield      #11                 // Field quoteMode:Lorg/apache/commons/csv/QuoteMode;
      16: aload_0
      17: getfield      #12                 // Field commentMarker:Ljava/lang/Character;
      20: aload_0
      21: getfield      #13                 // Field escapeCharacter:Ljava/lang/Character;
      24: aload_0
      25: getfield      #14                 // Field ignoreSurroundingSpaces:Z
      28: iload_1
      29: aload_0
      30: getfield      #17                 // Field recordSeparator:Ljava/lang/String;
      33: aload_0
      34: getfield      #18                 // Field nullString:Ljava/lang/String;
      37: aload_0
      38: getfield      #20                 // Field headerComments:[Ljava/lang/String;
      41: aload_0
      42: getfield      #23                 // Field header:[Ljava/lang/String;
      45: aload_0
      46: getfield      #24                 // Field skipHeaderRecord:Z
      49: aload_0
      50: getfield      #15                 // Field allowMissingColumnNames:Z
      53: aload_0
      54: getfield      #25                 // Field ignoreHeaderCase:Z
      57: aload_0
      58: getfield      #27                 // Field trim:Z
      61: aload_0
      62: getfield      #26                 // Field trailingDelimiter:Z
      65: invokespecial #5                  // Method "<init>":(CLjava/lang/Character;Lorg/apache/commons/csv/QuoteMode;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/String;ZZZZZ)V
      68: areturn

  public org.apache.commons.csv.CSVFormat withIgnoreHeaderCase();
    Code:
       0: aload_0
       1: iconst_1
       2: invokevirtual #139                // Method withIgnoreHeaderCase:(Z)Lorg/apache/commons/csv/CSVFormat;
       5: areturn

  public org.apache.commons.csv.CSVFormat withIgnoreHeaderCase(boolean);
    Code:
       0: new           #4                  // class org/apache/commons/csv/CSVFormat
       3: dup
       4: aload_0
       5: getfield      #9                  // Field delimiter:C
       8: aload_0
       9: getfield      #10                 // Field quoteCharacter:Ljava/lang/Character;
      12: aload_0
      13: getfield      #11                 // Field quoteMode:Lorg/apache/commons/csv/QuoteMode;
      16: aload_0
      17: getfield      #12                 // Field commentMarker:Ljava/lang/Character;
      20: aload_0
      21: getfield      #13                 // Field escapeCharacter:Ljava/lang/Character;
      24: aload_0
      25: getfield      #14                 // Field ignoreSurroundingSpaces:Z
      28: aload_0
      29: getfield      #16                 // Field ignoreEmptyLines:Z
      32: aload_0
      33: getfield      #17                 // Field recordSeparator:Ljava/lang/String;
      36: aload_0
      37: getfield      #18                 // Field nullString:Ljava/lang/String;
      40: aload_0
      41: getfield      #20                 // Field headerComments:[Ljava/lang/String;
      44: aload_0
      45: getfield      #23                 // Field header:[Ljava/lang/String;
      48: aload_0
      49: getfield      #24                 // Field skipHeaderRecord:Z
      52: aload_0
      53: getfield      #15                 // Field allowMissingColumnNames:Z
      56: iload_1
      57: aload_0
      58: getfield      #27                 // Field trim:Z
      61: aload_0
      62: getfield      #26                 // Field trailingDelimiter:Z
      65: invokespecial #5                  // Method "<init>":(CLjava/lang/Character;Lorg/apache/commons/csv/QuoteMode;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/String;ZZZZZ)V
      68: areturn

  public org.apache.commons.csv.CSVFormat withIgnoreSurroundingSpaces();
    Code:
       0: aload_0
       1: iconst_1
       2: invokevirtual #140                // Method withIgnoreSurroundingSpaces:(Z)Lorg/apache/commons/csv/CSVFormat;
       5: areturn

  public org.apache.commons.csv.CSVFormat withIgnoreSurroundingSpaces(boolean);
    Code:
       0: new           #4                  // class org/apache/commons/csv/CSVFormat
       3: dup
       4: aload_0
       5: getfield      #9                  // Field delimiter:C
       8: aload_0
       9: getfield      #10                 // Field quoteCharacter:Ljava/lang/Character;
      12: aload_0
      13: getfield      #11                 // Field quoteMode:Lorg/apache/commons/csv/QuoteMode;
      16: aload_0
      17: getfield      #12                 // Field commentMarker:Ljava/lang/Character;
      20: aload_0
      21: getfield      #13                 // Field escapeCharacter:Ljava/lang/Character;
      24: iload_1
      25: aload_0
      26: getfield      #16                 // Field ignoreEmptyLines:Z
      29: aload_0
      30: getfield      #17                 // Field recordSeparator:Ljava/lang/String;
      33: aload_0
      34: getfield      #18                 // Field nullString:Ljava/lang/String;
      37: aload_0
      38: getfield      #20                 // Field headerComments:[Ljava/lang/String;
      41: aload_0
      42: getfield      #23                 // Field header:[Ljava/lang/String;
      45: aload_0
      46: getfield      #24                 // Field skipHeaderRecord:Z
      49: aload_0
      50: getfield      #15                 // Field allowMissingColumnNames:Z
      53: aload_0
      54: getfield      #25                 // Field ignoreHeaderCase:Z
      57: aload_0
      58: getfield      #27                 // Field trim:Z
      61: aload_0
      62: getfield      #26                 // Field trailingDelimiter:Z
      65: invokespecial #5                  // Method "<init>":(CLjava/lang/Character;Lorg/apache/commons/csv/QuoteMode;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/String;ZZZZZ)V
      68: areturn

  public org.apache.commons.csv.CSVFormat withNullString(java.lang.String);
    Code:
       0: new           #4                  // class org/apache/commons/csv/CSVFormat
       3: dup
       4: aload_0
       5: getfield      #9                  // Field delimiter:C
       8: aload_0
       9: getfield      #10                 // Field quoteCharacter:Ljava/lang/Character;
      12: aload_0
      13: getfield      #11                 // Field quoteMode:Lorg/apache/commons/csv/QuoteMode;
      16: aload_0
      17: getfield      #12                 // Field commentMarker:Ljava/lang/Character;
      20: aload_0
      21: getfield      #13                 // Field escapeCharacter:Ljava/lang/Character;
      24: aload_0
      25: getfield      #14                 // Field ignoreSurroundingSpaces:Z
      28: aload_0
      29: getfield      #16                 // Field ignoreEmptyLines:Z
      32: aload_0
      33: getfield      #17                 // Field recordSeparator:Ljava/lang/String;
      36: aload_1
      37: aload_0
      38: getfield      #20                 // Field headerComments:[Ljava/lang/String;
      41: aload_0
      42: getfield      #23                 // Field header:[Ljava/lang/String;
      45: aload_0
      46: getfield      #24                 // Field skipHeaderRecord:Z
      49: aload_0
      50: getfield      #15                 // Field allowMissingColumnNames:Z
      53: aload_0
      54: getfield      #25                 // Field ignoreHeaderCase:Z
      57: aload_0
      58: getfield      #27                 // Field trim:Z
      61: aload_0
      62: getfield      #26                 // Field trailingDelimiter:Z
      65: invokespecial #5                  // Method "<init>":(CLjava/lang/Character;Lorg/apache/commons/csv/QuoteMode;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/String;ZZZZZ)V
      68: areturn

  public org.apache.commons.csv.CSVFormat withQuote(char);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #123                // Method java/lang/Character.valueOf:(C)Ljava/lang/Character;
       5: invokevirtual #141                // Method withQuote:(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;
       8: areturn

  public org.apache.commons.csv.CSVFormat withQuote(java.lang.Character);
    Code:
       0: aload_1
       1: invokestatic  #125                // Method isLineBreak:(Ljava/lang/Character;)Z
       4: ifeq          17
       7: new           #106                // class java/lang/IllegalArgumentException
      10: dup
      11: ldc           #142                // String The quoteChar cannot be a line break
      13: invokespecial #108                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: new           #4                  // class org/apache/commons/csv/CSVFormat
      20: dup
      21: aload_0
      22: getfield      #9                  // Field delimiter:C
      25: aload_1
      26: aload_0
      27: getfield      #11                 // Field quoteMode:Lorg/apache/commons/csv/QuoteMode;
      30: aload_0
      31: getfield      #12                 // Field commentMarker:Ljava/lang/Character;
      34: aload_0
      35: getfield      #13                 // Field escapeCharacter:Ljava/lang/Character;
      38: aload_0
      39: getfield      #14                 // Field ignoreSurroundingSpaces:Z
      42: aload_0
      43: getfield      #16                 // Field ignoreEmptyLines:Z
      46: aload_0
      47: getfield      #17                 // Field recordSeparator:Ljava/lang/String;
      50: aload_0
      51: getfield      #18                 // Field nullString:Ljava/lang/String;
      54: aload_0
      55: getfield      #20                 // Field headerComments:[Ljava/lang/String;
      58: aload_0
      59: getfield      #23                 // Field header:[Ljava/lang/String;
      62: aload_0
      63: getfield      #24                 // Field skipHeaderRecord:Z
      66: aload_0
      67: getfield      #15                 // Field allowMissingColumnNames:Z
      70: aload_0
      71: getfield      #25                 // Field ignoreHeaderCase:Z
      74: aload_0
      75: getfield      #27                 // Field trim:Z
      78: aload_0
      79: getfield      #26                 // Field trailingDelimiter:Z
      82: invokespecial #5                  // Method "<init>":(CLjava/lang/Character;Lorg/apache/commons/csv/QuoteMode;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/String;ZZZZZ)V
      85: areturn

  public org.apache.commons.csv.CSVFormat withQuoteMode(org.apache.commons.csv.QuoteMode);
    Code:
       0: new           #4                  // class org/apache/commons/csv/CSVFormat
       3: dup
       4: aload_0
       5: getfield      #9                  // Field delimiter:C
       8: aload_0
       9: getfield      #10                 // Field quoteCharacter:Ljava/lang/Character;
      12: aload_1
      13: aload_0
      14: getfield      #12                 // Field commentMarker:Ljava/lang/Character;
      17: aload_0
      18: getfield      #13                 // Field escapeCharacter:Ljava/lang/Character;
      21: aload_0
      22: getfield      #14                 // Field ignoreSurroundingSpaces:Z
      25: aload_0
      26: getfield      #16                 // Field ignoreEmptyLines:Z
      29: aload_0
      30: getfield      #17                 // Field recordSeparator:Ljava/lang/String;
      33: aload_0
      34: getfield      #18                 // Field nullString:Ljava/lang/String;
      37: aload_0
      38: getfield      #20                 // Field headerComments:[Ljava/lang/String;
      41: aload_0
      42: getfield      #23                 // Field header:[Ljava/lang/String;
      45: aload_0
      46: getfield      #24                 // Field skipHeaderRecord:Z
      49: aload_0
      50: getfield      #15                 // Field allowMissingColumnNames:Z
      53: aload_0
      54: getfield      #25                 // Field ignoreHeaderCase:Z
      57: aload_0
      58: getfield      #27                 // Field trim:Z
      61: aload_0
      62: getfield      #26                 // Field trailingDelimiter:Z
      65: invokespecial #5                  // Method "<init>":(CLjava/lang/Character;Lorg/apache/commons/csv/QuoteMode;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/String;ZZZZZ)V
      68: areturn

  public org.apache.commons.csv.CSVFormat withRecordSeparator(char);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #143                // Method java/lang/String.valueOf:(C)Ljava/lang/String;
       5: invokevirtual #144                // Method withRecordSeparator:(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;
       8: areturn

  public org.apache.commons.csv.CSVFormat withRecordSeparator(java.lang.String);
    Code:
       0: new           #4                  // class org/apache/commons/csv/CSVFormat
       3: dup
       4: aload_0
       5: getfield      #9                  // Field delimiter:C
       8: aload_0
       9: getfield      #10                 // Field quoteCharacter:Ljava/lang/Character;
      12: aload_0
      13: getfield      #11                 // Field quoteMode:Lorg/apache/commons/csv/QuoteMode;
      16: aload_0
      17: getfield      #12                 // Field commentMarker:Ljava/lang/Character;
      20: aload_0
      21: getfield      #13                 // Field escapeCharacter:Ljava/lang/Character;
      24: aload_0
      25: getfield      #14                 // Field ignoreSurroundingSpaces:Z
      28: aload_0
      29: getfield      #16                 // Field ignoreEmptyLines:Z
      32: aload_1
      33: aload_0
      34: getfield      #18                 // Field nullString:Ljava/lang/String;
      37: aload_0
      38: getfield      #20                 // Field headerComments:[Ljava/lang/String;
      41: aload_0
      42: getfield      #23                 // Field header:[Ljava/lang/String;
      45: aload_0
      46: getfield      #24                 // Field skipHeaderRecord:Z
      49: aload_0
      50: getfield      #15                 // Field allowMissingColumnNames:Z
      53: aload_0
      54: getfield      #25                 // Field ignoreHeaderCase:Z
      57: aload_0
      58: getfield      #27                 // Field trim:Z
      61: aload_0
      62: getfield      #26                 // Field trailingDelimiter:Z
      65: invokespecial #5                  // Method "<init>":(CLjava/lang/Character;Lorg/apache/commons/csv/QuoteMode;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/String;ZZZZZ)V
      68: areturn

  public org.apache.commons.csv.CSVFormat withSkipHeaderRecord();
    Code:
       0: aload_0
       1: iconst_1
       2: invokevirtual #145                // Method withSkipHeaderRecord:(Z)Lorg/apache/commons/csv/CSVFormat;
       5: areturn

  public org.apache.commons.csv.CSVFormat withSkipHeaderRecord(boolean);
    Code:
       0: new           #4                  // class org/apache/commons/csv/CSVFormat
       3: dup
       4: aload_0
       5: getfield      #9                  // Field delimiter:C
       8: aload_0
       9: getfield      #10                 // Field quoteCharacter:Ljava/lang/Character;
      12: aload_0
      13: getfield      #11                 // Field quoteMode:Lorg/apache/commons/csv/QuoteMode;
      16: aload_0
      17: getfield      #12                 // Field commentMarker:Ljava/lang/Character;
      20: aload_0
      21: getfield      #13                 // Field escapeCharacter:Ljava/lang/Character;
      24: aload_0
      25: getfield      #14                 // Field ignoreSurroundingSpaces:Z
      28: aload_0
      29: getfield      #16                 // Field ignoreEmptyLines:Z
      32: aload_0
      33: getfield      #17                 // Field recordSeparator:Ljava/lang/String;
      36: aload_0
      37: getfield      #18                 // Field nullString:Ljava/lang/String;
      40: aload_0
      41: getfield      #20                 // Field headerComments:[Ljava/lang/String;
      44: aload_0
      45: getfield      #23                 // Field header:[Ljava/lang/String;
      48: iload_1
      49: aload_0
      50: getfield      #15                 // Field allowMissingColumnNames:Z
      53: aload_0
      54: getfield      #25                 // Field ignoreHeaderCase:Z
      57: aload_0
      58: getfield      #27                 // Field trim:Z
      61: aload_0
      62: getfield      #26                 // Field trailingDelimiter:Z
      65: invokespecial #5                  // Method "<init>":(CLjava/lang/Character;Lorg/apache/commons/csv/QuoteMode;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/String;ZZZZZ)V
      68: areturn

  public org.apache.commons.csv.CSVFormat withTrailingDelimiter();
    Code:
       0: aload_0
       1: iconst_1
       2: invokevirtual #146                // Method withTrailingDelimiter:(Z)Lorg/apache/commons/csv/CSVFormat;
       5: areturn

  public org.apache.commons.csv.CSVFormat withTrailingDelimiter(boolean);
    Code:
       0: new           #4                  // class org/apache/commons/csv/CSVFormat
       3: dup
       4: aload_0
       5: getfield      #9                  // Field delimiter:C
       8: aload_0
       9: getfield      #10                 // Field quoteCharacter:Ljava/lang/Character;
      12: aload_0
      13: getfield      #11                 // Field quoteMode:Lorg/apache/commons/csv/QuoteMode;
      16: aload_0
      17: getfield      #12                 // Field commentMarker:Ljava/lang/Character;
      20: aload_0
      21: getfield      #13                 // Field escapeCharacter:Ljava/lang/Character;
      24: aload_0
      25: getfield      #14                 // Field ignoreSurroundingSpaces:Z
      28: aload_0
      29: getfield      #16                 // Field ignoreEmptyLines:Z
      32: aload_0
      33: getfield      #17                 // Field recordSeparator:Ljava/lang/String;
      36: aload_0
      37: getfield      #18                 // Field nullString:Ljava/lang/String;
      40: aload_0
      41: getfield      #20                 // Field headerComments:[Ljava/lang/String;
      44: aload_0
      45: getfield      #23                 // Field header:[Ljava/lang/String;
      48: aload_0
      49: getfield      #24                 // Field skipHeaderRecord:Z
      52: aload_0
      53: getfield      #15                 // Field allowMissingColumnNames:Z
      56: aload_0
      57: getfield      #25                 // Field ignoreHeaderCase:Z
      60: aload_0
      61: getfield      #27                 // Field trim:Z
      64: iload_1
      65: invokespecial #5                  // Method "<init>":(CLjava/lang/Character;Lorg/apache/commons/csv/QuoteMode;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/String;ZZZZZ)V
      68: areturn

  public org.apache.commons.csv.CSVFormat withTrim();
    Code:
       0: aload_0
       1: iconst_1
       2: invokevirtual #147                // Method withTrim:(Z)Lorg/apache/commons/csv/CSVFormat;
       5: areturn

  public org.apache.commons.csv.CSVFormat withTrim(boolean);
    Code:
       0: new           #4                  // class org/apache/commons/csv/CSVFormat
       3: dup
       4: aload_0
       5: getfield      #9                  // Field delimiter:C
       8: aload_0
       9: getfield      #10                 // Field quoteCharacter:Ljava/lang/Character;
      12: aload_0
      13: getfield      #11                 // Field quoteMode:Lorg/apache/commons/csv/QuoteMode;
      16: aload_0
      17: getfield      #12                 // Field commentMarker:Ljava/lang/Character;
      20: aload_0
      21: getfield      #13                 // Field escapeCharacter:Ljava/lang/Character;
      24: aload_0
      25: getfield      #14                 // Field ignoreSurroundingSpaces:Z
      28: aload_0
      29: getfield      #16                 // Field ignoreEmptyLines:Z
      32: aload_0
      33: getfield      #17                 // Field recordSeparator:Ljava/lang/String;
      36: aload_0
      37: getfield      #18                 // Field nullString:Ljava/lang/String;
      40: aload_0
      41: getfield      #20                 // Field headerComments:[Ljava/lang/String;
      44: aload_0
      45: getfield      #23                 // Field header:[Ljava/lang/String;
      48: aload_0
      49: getfield      #24                 // Field skipHeaderRecord:Z
      52: aload_0
      53: getfield      #15                 // Field allowMissingColumnNames:Z
      56: aload_0
      57: getfield      #25                 // Field ignoreHeaderCase:Z
      60: iload_1
      61: aload_0
      62: getfield      #26                 // Field trailingDelimiter:Z
      65: invokespecial #5                  // Method "<init>":(CLjava/lang/Character;Lorg/apache/commons/csv/QuoteMode;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/String;ZZZZZ)V
      68: areturn

  static {};
    Code:
       0: new           #4                  // class org/apache/commons/csv/CSVFormat
       3: dup
       4: bipush        44
       6: getstatic     #148                // Field org/apache/commons/csv/Constants.DOUBLE_QUOTE_CHAR:Ljava/lang/Character;
       9: aconst_null
      10: aconst_null
      11: aconst_null
      12: iconst_0
      13: iconst_1
      14: ldc           #149                // String \r\n
      16: aconst_null
      17: aconst_null
      18: aconst_null
      19: iconst_0
      20: iconst_0
      21: iconst_0
      22: iconst_0
      23: iconst_0
      24: invokespecial #5                  // Method "<init>":(CLjava/lang/Character;Lorg/apache/commons/csv/QuoteMode;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/String;ZZZZZ)V
      27: putstatic     #150                // Field DEFAULT:Lorg/apache/commons/csv/CSVFormat;
      30: getstatic     #150                // Field DEFAULT:Lorg/apache/commons/csv/CSVFormat;
      33: iconst_0
      34: invokevirtual #138                // Method withIgnoreEmptyLines:(Z)Lorg/apache/commons/csv/CSVFormat;
      37: invokevirtual #151                // Method withAllowMissingColumnNames:()Lorg/apache/commons/csv/CSVFormat;
      40: putstatic     #152                // Field EXCEL:Lorg/apache/commons/csv/CSVFormat;
      43: getstatic     #150                // Field DEFAULT:Lorg/apache/commons/csv/CSVFormat;
      46: bipush        124
      48: invokevirtual #153                // Method withDelimiter:(C)Lorg/apache/commons/csv/CSVFormat;
      51: bipush        92
      53: invokevirtual #154                // Method withEscape:(C)Lorg/apache/commons/csv/CSVFormat;
      56: getstatic     #148                // Field org/apache/commons/csv/Constants.DOUBLE_QUOTE_CHAR:Ljava/lang/Character;
      59: invokevirtual #141                // Method withQuote:(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;
      62: bipush        10
      64: invokevirtual #155                // Method withRecordSeparator:(C)Lorg/apache/commons/csv/CSVFormat;
      67: putstatic     #156                // Field INFORMIX_UNLOAD:Lorg/apache/commons/csv/CSVFormat;
      70: getstatic     #150                // Field DEFAULT:Lorg/apache/commons/csv/CSVFormat;
      73: bipush        44
      75: invokevirtual #153                // Method withDelimiter:(C)Lorg/apache/commons/csv/CSVFormat;
      78: getstatic     #148                // Field org/apache/commons/csv/Constants.DOUBLE_QUOTE_CHAR:Ljava/lang/Character;
      81: invokevirtual #141                // Method withQuote:(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;
      84: bipush        10
      86: invokevirtual #155                // Method withRecordSeparator:(C)Lorg/apache/commons/csv/CSVFormat;
      89: putstatic     #157                // Field INFORMIX_UNLOAD_CSV:Lorg/apache/commons/csv/CSVFormat;
      92: getstatic     #150                // Field DEFAULT:Lorg/apache/commons/csv/CSVFormat;
      95: bipush        9
      97: invokevirtual #153                // Method withDelimiter:(C)Lorg/apache/commons/csv/CSVFormat;
     100: bipush        92
     102: invokevirtual #154                // Method withEscape:(C)Lorg/apache/commons/csv/CSVFormat;
     105: iconst_0
     106: invokevirtual #138                // Method withIgnoreEmptyLines:(Z)Lorg/apache/commons/csv/CSVFormat;
     109: aconst_null
     110: invokevirtual #141                // Method withQuote:(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;
     113: bipush        10
     115: invokevirtual #155                // Method withRecordSeparator:(C)Lorg/apache/commons/csv/CSVFormat;
     118: ldc           #158                // String \\N
     120: invokevirtual #159                // Method withNullString:(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;
     123: putstatic     #160                // Field MYSQL:Lorg/apache/commons/csv/CSVFormat;
     126: getstatic     #150                // Field DEFAULT:Lorg/apache/commons/csv/CSVFormat;
     129: iconst_0
     130: invokevirtual #138                // Method withIgnoreEmptyLines:(Z)Lorg/apache/commons/csv/CSVFormat;
     133: putstatic     #161                // Field RFC4180:Lorg/apache/commons/csv/CSVFormat;
     136: getstatic     #150                // Field DEFAULT:Lorg/apache/commons/csv/CSVFormat;
     139: bipush        9
     141: invokevirtual #153                // Method withDelimiter:(C)Lorg/apache/commons/csv/CSVFormat;
     144: invokevirtual #162                // Method withIgnoreSurroundingSpaces:()Lorg/apache/commons/csv/CSVFormat;
     147: putstatic     #163                // Field TDF:Lorg/apache/commons/csv/CSVFormat;
     150: return
}
