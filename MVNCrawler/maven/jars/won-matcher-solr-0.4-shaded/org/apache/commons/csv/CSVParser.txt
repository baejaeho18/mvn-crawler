Compiled from "CSVParser.java"
public final class org.apache.commons.csv.CSVParser implements java.lang.Iterable<org.apache.commons.csv.CSVRecord>, java.io.Closeable {
  private final org.apache.commons.csv.CSVFormat format;

  private final java.util.Map<java.lang.String, java.lang.Integer> headerMap;

  private final org.apache.commons.csv.Lexer lexer;

  private final java.util.List<java.lang.String> record;

  private long recordNumber;

  private final long characterOffset;

  private final org.apache.commons.csv.Token reusableToken;

  public static org.apache.commons.csv.CSVParser parse(java.io.File, java.nio.charset.Charset, org.apache.commons.csv.CSVFormat) throws java.io.IOException;
    Code:
       0: aload_0
       1: ldc           #1                  // String file
       3: invokestatic  #2                  // Method org/apache/commons/csv/Assertions.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_2
       7: ldc           #3                  // String format
       9: invokestatic  #2                  // Method org/apache/commons/csv/Assertions.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      12: new           #4                  // class org/apache/commons/csv/CSVParser
      15: dup
      16: new           #5                  // class java/io/InputStreamReader
      19: dup
      20: new           #6                  // class java/io/FileInputStream
      23: dup
      24: aload_0
      25: invokespecial #7                  // Method java/io/FileInputStream."<init>":(Ljava/io/File;)V
      28: aload_1
      29: invokespecial #8                  // Method java/io/InputStreamReader."<init>":(Ljava/io/InputStream;Ljava/nio/charset/Charset;)V
      32: aload_2
      33: invokespecial #9                  // Method "<init>":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V
      36: areturn

  public static org.apache.commons.csv.CSVParser parse(java.lang.String, org.apache.commons.csv.CSVFormat) throws java.io.IOException;
    Code:
       0: aload_0
       1: ldc           #10                 // String string
       3: invokestatic  #2                  // Method org/apache/commons/csv/Assertions.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_1
       7: ldc           #3                  // String format
       9: invokestatic  #2                  // Method org/apache/commons/csv/Assertions.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      12: new           #4                  // class org/apache/commons/csv/CSVParser
      15: dup
      16: new           #11                 // class java/io/StringReader
      19: dup
      20: aload_0
      21: invokespecial #12                 // Method java/io/StringReader."<init>":(Ljava/lang/String;)V
      24: aload_1
      25: invokespecial #9                  // Method "<init>":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V
      28: areturn

  public static org.apache.commons.csv.CSVParser parse(java.net.URL, java.nio.charset.Charset, org.apache.commons.csv.CSVFormat) throws java.io.IOException;
    Code:
       0: aload_0
       1: ldc           #13                 // String url
       3: invokestatic  #2                  // Method org/apache/commons/csv/Assertions.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_1
       7: ldc           #14                 // String charset
       9: invokestatic  #2                  // Method org/apache/commons/csv/Assertions.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      12: aload_2
      13: ldc           #3                  // String format
      15: invokestatic  #2                  // Method org/apache/commons/csv/Assertions.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      18: new           #4                  // class org/apache/commons/csv/CSVParser
      21: dup
      22: new           #5                  // class java/io/InputStreamReader
      25: dup
      26: aload_0
      27: invokevirtual #15                 // Method java/net/URL.openStream:()Ljava/io/InputStream;
      30: aload_1
      31: invokespecial #8                  // Method java/io/InputStreamReader."<init>":(Ljava/io/InputStream;Ljava/nio/charset/Charset;)V
      34: aload_2
      35: invokespecial #9                  // Method "<init>":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V
      38: areturn

  public org.apache.commons.csv.CSVParser(java.io.Reader, org.apache.commons.csv.CSVFormat) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: lconst_0
       4: lconst_1
       5: invokespecial #16                 // Method "<init>":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;JJ)V
       8: return

  public org.apache.commons.csv.CSVParser(java.io.Reader, org.apache.commons.csv.CSVFormat, long, long) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #17                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #18                 // class java/util/ArrayList
       8: dup
       9: invokespecial #19                 // Method java/util/ArrayList."<init>":()V
      12: putfield      #20                 // Field record:Ljava/util/List;
      15: aload_0
      16: new           #21                 // class org/apache/commons/csv/Token
      19: dup
      20: invokespecial #22                 // Method org/apache/commons/csv/Token."<init>":()V
      23: putfield      #23                 // Field reusableToken:Lorg/apache/commons/csv/Token;
      26: aload_1
      27: ldc           #24                 // String reader
      29: invokestatic  #2                  // Method org/apache/commons/csv/Assertions.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      32: aload_2
      33: ldc           #3                  // String format
      35: invokestatic  #2                  // Method org/apache/commons/csv/Assertions.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      38: aload_0
      39: aload_2
      40: putfield      #25                 // Field format:Lorg/apache/commons/csv/CSVFormat;
      43: aload_0
      44: new           #26                 // class org/apache/commons/csv/Lexer
      47: dup
      48: aload_2
      49: new           #27                 // class org/apache/commons/csv/ExtendedBufferedReader
      52: dup
      53: aload_1
      54: invokespecial #28                 // Method org/apache/commons/csv/ExtendedBufferedReader."<init>":(Ljava/io/Reader;)V
      57: invokespecial #29                 // Method org/apache/commons/csv/Lexer."<init>":(Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V
      60: putfield      #30                 // Field lexer:Lorg/apache/commons/csv/Lexer;
      63: aload_0
      64: aload_0
      65: invokespecial #31                 // Method initializeHeader:()Ljava/util/Map;
      68: putfield      #32                 // Field headerMap:Ljava/util/Map;
      71: aload_0
      72: lload_3
      73: putfield      #33                 // Field characterOffset:J
      76: aload_0
      77: lload         5
      79: lconst_1
      80: lsub
      81: putfield      #34                 // Field recordNumber:J
      84: return

  private void addRecordValue(boolean);
    Code:
       0: aload_0
       1: getfield      #23                 // Field reusableToken:Lorg/apache/commons/csv/Token;
       4: getfield      #35                 // Field org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;
       7: invokevirtual #36                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      10: astore_2
      11: aload_0
      12: getfield      #25                 // Field format:Lorg/apache/commons/csv/CSVFormat;
      15: invokevirtual #37                 // Method org/apache/commons/csv/CSVFormat.getTrim:()Z
      18: ifeq          28
      21: aload_2
      22: invokevirtual #38                 // Method java/lang/String.trim:()Ljava/lang/String;
      25: goto          29
      28: aload_2
      29: astore_3
      30: iload_1
      31: ifeq          52
      34: aload_3
      35: invokevirtual #39                 // Method java/lang/String.isEmpty:()Z
      38: ifeq          52
      41: aload_0
      42: getfield      #25                 // Field format:Lorg/apache/commons/csv/CSVFormat;
      45: invokevirtual #40                 // Method org/apache/commons/csv/CSVFormat.getTrailingDelimiter:()Z
      48: ifeq          52
      51: return
      52: aload_0
      53: getfield      #25                 // Field format:Lorg/apache/commons/csv/CSVFormat;
      56: invokevirtual #41                 // Method org/apache/commons/csv/CSVFormat.getNullString:()Ljava/lang/String;
      59: astore        4
      61: aload_0
      62: getfield      #20                 // Field record:Ljava/util/List;
      65: aload_3
      66: aload         4
      68: invokevirtual #42                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      71: ifeq          78
      74: aconst_null
      75: goto          79
      78: aload_3
      79: invokeinterface #43,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      84: pop
      85: return

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #30                 // Field lexer:Lorg/apache/commons/csv/Lexer;
       4: ifnull        14
       7: aload_0
       8: getfield      #30                 // Field lexer:Lorg/apache/commons/csv/Lexer;
      11: invokevirtual #44                 // Method org/apache/commons/csv/Lexer.close:()V
      14: return

  public long getCurrentLineNumber();
    Code:
       0: aload_0
       1: getfield      #30                 // Field lexer:Lorg/apache/commons/csv/Lexer;
       4: invokevirtual #45                 // Method org/apache/commons/csv/Lexer.getCurrentLineNumber:()J
       7: lreturn

  public java.util.Map<java.lang.String, java.lang.Integer> getHeaderMap();
    Code:
       0: aload_0
       1: getfield      #32                 // Field headerMap:Ljava/util/Map;
       4: ifnonnull     11
       7: aconst_null
       8: goto          22
      11: new           #46                 // class java/util/LinkedHashMap
      14: dup
      15: aload_0
      16: getfield      #32                 // Field headerMap:Ljava/util/Map;
      19: invokespecial #47                 // Method java/util/LinkedHashMap."<init>":(Ljava/util/Map;)V
      22: areturn

  public long getRecordNumber();
    Code:
       0: aload_0
       1: getfield      #34                 // Field recordNumber:J
       4: lreturn

  public java.util.List<org.apache.commons.csv.CSVRecord> getRecords() throws java.io.IOException;
    Code:
       0: new           #18                 // class java/util/ArrayList
       3: dup
       4: invokespecial #19                 // Method java/util/ArrayList."<init>":()V
       7: astore_2
       8: aload_0
       9: invokevirtual #48                 // Method nextRecord:()Lorg/apache/commons/csv/CSVRecord;
      12: dup
      13: astore_1
      14: ifnull        28
      17: aload_2
      18: aload_1
      19: invokeinterface #43,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      24: pop
      25: goto          8
      28: aload_2
      29: areturn

  private java.util.Map<java.lang.String, java.lang.Integer> initializeHeader() throws java.io.IOException;
    Code:
       0: aconst_null
       1: astore_1
       2: aload_0
       3: getfield      #25                 // Field format:Lorg/apache/commons/csv/CSVFormat;
       6: invokevirtual #49                 // Method org/apache/commons/csv/CSVFormat.getHeader:()[Ljava/lang/String;
       9: astore_2
      10: aload_2
      11: ifnull        222
      14: aload_0
      15: getfield      #25                 // Field format:Lorg/apache/commons/csv/CSVFormat;
      18: invokevirtual #50                 // Method org/apache/commons/csv/CSVFormat.getIgnoreHeaderCase:()Z
      21: ifeq          37
      24: new           #51                 // class java/util/TreeMap
      27: dup
      28: getstatic     #52                 // Field java/lang/String.CASE_INSENSITIVE_ORDER:Ljava/util/Comparator;
      31: invokespecial #53                 // Method java/util/TreeMap."<init>":(Ljava/util/Comparator;)V
      34: goto          44
      37: new           #46                 // class java/util/LinkedHashMap
      40: dup
      41: invokespecial #54                 // Method java/util/LinkedHashMap."<init>":()V
      44: astore_1
      45: aconst_null
      46: astore_3
      47: aload_2
      48: arraylength
      49: ifne          72
      52: aload_0
      53: invokevirtual #48                 // Method nextRecord:()Lorg/apache/commons/csv/CSVRecord;
      56: astore        4
      58: aload         4
      60: ifnull        69
      63: aload         4
      65: invokevirtual #55                 // Method org/apache/commons/csv/CSVRecord.values:()[Ljava/lang/String;
      68: astore_3
      69: goto          89
      72: aload_0
      73: getfield      #25                 // Field format:Lorg/apache/commons/csv/CSVFormat;
      76: invokevirtual #56                 // Method org/apache/commons/csv/CSVFormat.getSkipHeaderRecord:()Z
      79: ifeq          87
      82: aload_0
      83: invokevirtual #48                 // Method nextRecord:()Lorg/apache/commons/csv/CSVRecord;
      86: pop
      87: aload_2
      88: astore_3
      89: aload_3
      90: ifnull        222
      93: iconst_0
      94: istore        4
      96: iload         4
      98: aload_3
      99: arraylength
     100: if_icmpge     222
     103: aload_3
     104: iload         4
     106: aaload
     107: astore        5
     109: aload_1
     110: aload         5
     112: invokeinterface #57,  2           // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
     117: istore        6
     119: aload         5
     121: ifnull        135
     124: aload         5
     126: invokevirtual #38                 // Method java/lang/String.trim:()Ljava/lang/String;
     129: invokevirtual #39                 // Method java/lang/String.isEmpty:()Z
     132: ifeq          139
     135: iconst_1
     136: goto          140
     139: iconst_0
     140: istore        7
     142: iload         6
     144: ifeq          202
     147: iload         7
     149: ifeq          162
     152: aload_0
     153: getfield      #25                 // Field format:Lorg/apache/commons/csv/CSVFormat;
     156: invokevirtual #58                 // Method org/apache/commons/csv/CSVFormat.getAllowMissingColumnNames:()Z
     159: ifne          202
     162: new           #59                 // class java/lang/IllegalArgumentException
     165: dup
     166: new           #60                 // class java/lang/StringBuilder
     169: dup
     170: invokespecial #61                 // Method java/lang/StringBuilder."<init>":()V
     173: ldc           #62                 // String The header contains a duplicate name: \"
     175: invokevirtual #63                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     178: aload         5
     180: invokevirtual #63                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     183: ldc           #64                 // String \" in
     185: invokevirtual #63                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     188: aload_3
     189: invokestatic  #65                 // Method java/util/Arrays.toString:([Ljava/lang/Object;)Ljava/lang/String;
     192: invokevirtual #63                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     195: invokevirtual #36                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     198: invokespecial #66                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     201: athrow
     202: aload_1
     203: aload         5
     205: iload         4
     207: invokestatic  #67                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     210: invokeinterface #68,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     215: pop
     216: iinc          4, 1
     219: goto          96
     222: aload_1
     223: areturn

  public boolean isClosed();
    Code:
       0: aload_0
       1: getfield      #30                 // Field lexer:Lorg/apache/commons/csv/Lexer;
       4: invokevirtual #69                 // Method org/apache/commons/csv/Lexer.isClosed:()Z
       7: ireturn

  public java.util.Iterator<org.apache.commons.csv.CSVRecord> iterator();
    Code:
       0: new           #70                 // class org/apache/commons/csv/CSVParser$1
       3: dup
       4: aload_0
       5: invokespecial #71                 // Method org/apache/commons/csv/CSVParser$1."<init>":(Lorg/apache/commons/csv/CSVParser;)V
       8: areturn

  org.apache.commons.csv.CSVRecord nextRecord() throws java.io.IOException;
    Code:
       0: aconst_null
       1: astore_1
       2: aload_0
       3: getfield      #20                 // Field record:Ljava/util/List;
       6: invokeinterface #72,  1           // InterfaceMethod java/util/List.clear:()V
      11: aconst_null
      12: astore_2
      13: aload_0
      14: getfield      #30                 // Field lexer:Lorg/apache/commons/csv/Lexer;
      17: invokevirtual #73                 // Method org/apache/commons/csv/Lexer.getCharacterPosition:()J
      20: aload_0
      21: getfield      #33                 // Field characterOffset:J
      24: ladd
      25: lstore_3
      26: aload_0
      27: getfield      #23                 // Field reusableToken:Lorg/apache/commons/csv/Token;
      30: invokevirtual #74                 // Method org/apache/commons/csv/Token.reset:()V
      33: aload_0
      34: getfield      #30                 // Field lexer:Lorg/apache/commons/csv/Lexer;
      37: aload_0
      38: getfield      #23                 // Field reusableToken:Lorg/apache/commons/csv/Token;
      41: invokevirtual #75                 // Method org/apache/commons/csv/Lexer.nextToken:(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;
      44: pop
      45: getstatic     #76                 // Field org/apache/commons/csv/CSVParser$2.$SwitchMap$org$apache$commons$csv$Token$Type:[I
      48: aload_0
      49: getfield      #23                 // Field reusableToken:Lorg/apache/commons/csv/Token;
      52: getfield      #77                 // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;
      55: invokevirtual #78                 // Method org/apache/commons/csv/Token$Type.ordinal:()I
      58: iaload
      59: tableswitch   { // 1 to 5
                     1: 92
                     2: 100
                     3: 108
                     4: 126
                     5: 161
               default: 208
          }
      92: aload_0
      93: iconst_0
      94: invokespecial #79                 // Method addRecordValue:(Z)V
      97: goto          241
     100: aload_0
     101: iconst_1
     102: invokespecial #79                 // Method addRecordValue:(Z)V
     105: goto          241
     108: aload_0
     109: getfield      #23                 // Field reusableToken:Lorg/apache/commons/csv/Token;
     112: getfield      #80                 // Field org/apache/commons/csv/Token.isReady:Z
     115: ifeq          241
     118: aload_0
     119: iconst_1
     120: invokespecial #79                 // Method addRecordValue:(Z)V
     123: goto          241
     126: new           #81                 // class java/io/IOException
     129: dup
     130: new           #60                 // class java/lang/StringBuilder
     133: dup
     134: invokespecial #61                 // Method java/lang/StringBuilder."<init>":()V
     137: ldc           #82                 // String (line
     139: invokevirtual #63                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     142: aload_0
     143: invokevirtual #83                 // Method getCurrentLineNumber:()J
     146: invokevirtual #84                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
     149: ldc           #85                 // String ) invalid parse sequence
     151: invokevirtual #63                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     154: invokevirtual #36                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     157: invokespecial #86                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
     160: athrow
     161: aload_2
     162: ifnonnull     176
     165: new           #60                 // class java/lang/StringBuilder
     168: dup
     169: invokespecial #61                 // Method java/lang/StringBuilder."<init>":()V
     172: astore_2
     173: goto          183
     176: aload_2
     177: bipush        10
     179: invokevirtual #88                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
     182: pop
     183: aload_2
     184: aload_0
     185: getfield      #23                 // Field reusableToken:Lorg/apache/commons/csv/Token;
     188: getfield      #35                 // Field org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;
     191: invokevirtual #89                 // Method java/lang/StringBuilder.append:(Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;
     194: pop
     195: aload_0
     196: getfield      #23                 // Field reusableToken:Lorg/apache/commons/csv/Token;
     199: getstatic     #90                 // Field org/apache/commons/csv/Token$Type.TOKEN:Lorg/apache/commons/csv/Token$Type;
     202: putfield      #77                 // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;
     205: goto          241
     208: new           #91                 // class java/lang/IllegalStateException
     211: dup
     212: new           #60                 // class java/lang/StringBuilder
     215: dup
     216: invokespecial #61                 // Method java/lang/StringBuilder."<init>":()V
     219: ldc           #92                 // String Unexpected Token type:
     221: invokevirtual #63                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     224: aload_0
     225: getfield      #23                 // Field reusableToken:Lorg/apache/commons/csv/Token;
     228: getfield      #77                 // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;
     231: invokevirtual #93                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     234: invokevirtual #36                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     237: invokespecial #94                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
     240: athrow
     241: aload_0
     242: getfield      #23                 // Field reusableToken:Lorg/apache/commons/csv/Token;
     245: getfield      #77                 // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;
     248: getstatic     #90                 // Field org/apache/commons/csv/Token$Type.TOKEN:Lorg/apache/commons/csv/Token$Type;
     251: if_acmpeq     26
     254: aload_0
     255: getfield      #20                 // Field record:Ljava/util/List;
     258: invokeinterface #95,  1           // InterfaceMethod java/util/List.isEmpty:()Z
     263: ifne          333
     266: aload_0
     267: dup
     268: getfield      #34                 // Field recordNumber:J
     271: lconst_1
     272: ladd
     273: putfield      #34                 // Field recordNumber:J
     276: aload_2
     277: ifnonnull     284
     280: aconst_null
     281: goto          288
     284: aload_2
     285: invokevirtual #36                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     288: astore        5
     290: new           #96                 // class org/apache/commons/csv/CSVRecord
     293: dup
     294: aload_0
     295: getfield      #20                 // Field record:Ljava/util/List;
     298: aload_0
     299: getfield      #20                 // Field record:Ljava/util/List;
     302: invokeinterface #97,  1           // InterfaceMethod java/util/List.size:()I
     307: anewarray     #98                 // class java/lang/String
     310: invokeinterface #99,  2           // InterfaceMethod java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
     315: checkcast     #100                // class "[Ljava/lang/String;"
     318: aload_0
     319: getfield      #32                 // Field headerMap:Ljava/util/Map;
     322: aload         5
     324: aload_0
     325: getfield      #34                 // Field recordNumber:J
     328: lload_3
     329: invokespecial #101                // Method org/apache/commons/csv/CSVRecord."<init>":([Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;JJ)V
     332: astore_1
     333: aload_1
     334: areturn
}
