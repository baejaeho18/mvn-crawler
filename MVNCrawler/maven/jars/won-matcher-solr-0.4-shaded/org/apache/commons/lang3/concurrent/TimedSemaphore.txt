Compiled from "TimedSemaphore.java"
public class org.apache.commons.lang3.concurrent.TimedSemaphore {
  public static final int NO_LIMIT;

  private static final int THREAD_POOL_SIZE;

  private final java.util.concurrent.ScheduledExecutorService executorService;

  private final long period;

  private final java.util.concurrent.TimeUnit unit;

  private final boolean ownExecutor;

  private java.util.concurrent.ScheduledFuture<?> task;

  private long totalAcquireCount;

  private long periodCount;

  private int limit;

  private int acquireCount;

  private int lastCallsPerPeriod;

  private boolean shutdown;

  public org.apache.commons.lang3.concurrent.TimedSemaphore(long, java.util.concurrent.TimeUnit, int);
    Code:
       0: aload_0
       1: aconst_null
       2: lload_1
       3: aload_3
       4: iload         4
       6: invokespecial #1                  // Method "<init>":(Ljava/util/concurrent/ScheduledExecutorService;JLjava/util/concurrent/TimeUnit;I)V
       9: return

  public org.apache.commons.lang3.concurrent.TimedSemaphore(java.util.concurrent.ScheduledExecutorService, long, java.util.concurrent.TimeUnit, int);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: lconst_1
       5: ldc2_w        #3                  // long 9223372036854775807l
       8: lload_2
       9: ldc           #5                  // String Time period must be greater than 0!
      11: invokestatic  #6                  // Method org/apache/commons/lang3/Validate.inclusiveBetween:(JJJLjava/lang/String;)V
      14: aload_0
      15: lload_2
      16: putfield      #7                  // Field period:J
      19: aload_0
      20: aload         4
      22: putfield      #8                  // Field unit:Ljava/util/concurrent/TimeUnit;
      25: aload_1
      26: ifnull        42
      29: aload_0
      30: aload_1
      31: putfield      #9                  // Field executorService:Ljava/util/concurrent/ScheduledExecutorService;
      34: aload_0
      35: iconst_0
      36: putfield      #10                 // Field ownExecutor:Z
      39: goto          75
      42: new           #11                 // class java/util/concurrent/ScheduledThreadPoolExecutor
      45: dup
      46: iconst_1
      47: invokespecial #12                 // Method java/util/concurrent/ScheduledThreadPoolExecutor."<init>":(I)V
      50: astore        6
      52: aload         6
      54: iconst_0
      55: invokevirtual #13                 // Method java/util/concurrent/ScheduledThreadPoolExecutor.setContinueExistingPeriodicTasksAfterShutdownPolicy:(Z)V
      58: aload         6
      60: iconst_0
      61: invokevirtual #14                 // Method java/util/concurrent/ScheduledThreadPoolExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy:(Z)V
      64: aload_0
      65: aload         6
      67: putfield      #9                  // Field executorService:Ljava/util/concurrent/ScheduledExecutorService;
      70: aload_0
      71: iconst_1
      72: putfield      #10                 // Field ownExecutor:Z
      75: aload_0
      76: iload         5
      78: invokevirtual #15                 // Method setLimit:(I)V
      81: return

  public final synchronized int getLimit();
    Code:
       0: aload_0
       1: getfield      #16                 // Field limit:I
       4: ireturn

  public final synchronized void setLimit(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #16                 // Field limit:I
       5: return

  public synchronized void shutdown();
    Code:
       0: aload_0
       1: getfield      #17                 // Field shutdown:Z
       4: ifne          47
       7: aload_0
       8: getfield      #10                 // Field ownExecutor:Z
      11: ifeq          24
      14: aload_0
      15: invokevirtual #18                 // Method getExecutorService:()Ljava/util/concurrent/ScheduledExecutorService;
      18: invokeinterface #19,  1           // InterfaceMethod java/util/concurrent/ScheduledExecutorService.shutdownNow:()Ljava/util/List;
      23: pop
      24: aload_0
      25: getfield      #20                 // Field task:Ljava/util/concurrent/ScheduledFuture;
      28: ifnull        42
      31: aload_0
      32: getfield      #20                 // Field task:Ljava/util/concurrent/ScheduledFuture;
      35: iconst_0
      36: invokeinterface #21,  2           // InterfaceMethod java/util/concurrent/ScheduledFuture.cancel:(Z)Z
      41: pop
      42: aload_0
      43: iconst_1
      44: putfield      #17                 // Field shutdown:Z
      47: return

  public synchronized boolean isShutdown();
    Code:
       0: aload_0
       1: getfield      #17                 // Field shutdown:Z
       4: ireturn

  public synchronized void acquire() throws java.lang.InterruptedException;
    Code:
       0: aload_0
       1: invokevirtual #22                 // Method isShutdown:()Z
       4: ifeq          17
       7: new           #23                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #24                 // String TimedSemaphore is shut down!
      13: invokespecial #25                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: getfield      #20                 // Field task:Ljava/util/concurrent/ScheduledFuture;
      21: ifnonnull     32
      24: aload_0
      25: aload_0
      26: invokevirtual #26                 // Method startTimer:()Ljava/util/concurrent/ScheduledFuture;
      29: putfield      #20                 // Field task:Ljava/util/concurrent/ScheduledFuture;
      32: iconst_0
      33: istore_1
      34: aload_0
      35: invokevirtual #27                 // Method getLimit:()I
      38: ifle          52
      41: aload_0
      42: getfield      #28                 // Field acquireCount:I
      45: aload_0
      46: invokevirtual #27                 // Method getLimit:()I
      49: if_icmpge     56
      52: iconst_1
      53: goto          57
      56: iconst_0
      57: istore_1
      58: iload_1
      59: ifne          69
      62: aload_0
      63: invokevirtual #29                 // Method java/lang/Object.wait:()V
      66: goto          79
      69: aload_0
      70: dup
      71: getfield      #28                 // Field acquireCount:I
      74: iconst_1
      75: iadd
      76: putfield      #28                 // Field acquireCount:I
      79: iload_1
      80: ifeq          34
      83: return

  public synchronized int getLastAcquiresPerPeriod();
    Code:
       0: aload_0
       1: getfield      #30                 // Field lastCallsPerPeriod:I
       4: ireturn

  public synchronized int getAcquireCount();
    Code:
       0: aload_0
       1: getfield      #28                 // Field acquireCount:I
       4: ireturn

  public synchronized int getAvailablePermits();
    Code:
       0: aload_0
       1: invokevirtual #27                 // Method getLimit:()I
       4: aload_0
       5: invokevirtual #31                 // Method getAcquireCount:()I
       8: isub
       9: ireturn

  public synchronized double getAverageCallsPerPeriod();
    Code:
       0: aload_0
       1: getfield      #32                 // Field periodCount:J
       4: lconst_0
       5: lcmp
       6: ifne          13
       9: dconst_0
      10: goto          24
      13: aload_0
      14: getfield      #33                 // Field totalAcquireCount:J
      17: l2d
      18: aload_0
      19: getfield      #32                 // Field periodCount:J
      22: l2d
      23: ddiv
      24: dreturn

  public long getPeriod();
    Code:
       0: aload_0
       1: getfield      #7                  // Field period:J
       4: lreturn

  public java.util.concurrent.TimeUnit getUnit();
    Code:
       0: aload_0
       1: getfield      #8                  // Field unit:Ljava/util/concurrent/TimeUnit;
       4: areturn

  protected java.util.concurrent.ScheduledExecutorService getExecutorService();
    Code:
       0: aload_0
       1: getfield      #9                  // Field executorService:Ljava/util/concurrent/ScheduledExecutorService;
       4: areturn

  protected java.util.concurrent.ScheduledFuture<?> startTimer();
    Code:
       0: aload_0
       1: invokevirtual #18                 // Method getExecutorService:()Ljava/util/concurrent/ScheduledExecutorService;
       4: new           #34                 // class org/apache/commons/lang3/concurrent/TimedSemaphore$1
       7: dup
       8: aload_0
       9: invokespecial #35                 // Method org/apache/commons/lang3/concurrent/TimedSemaphore$1."<init>":(Lorg/apache/commons/lang3/concurrent/TimedSemaphore;)V
      12: aload_0
      13: invokevirtual #36                 // Method getPeriod:()J
      16: aload_0
      17: invokevirtual #36                 // Method getPeriod:()J
      20: aload_0
      21: invokevirtual #37                 // Method getUnit:()Ljava/util/concurrent/TimeUnit;
      24: invokeinterface #38,  7           // InterfaceMethod java/util/concurrent/ScheduledExecutorService.scheduleAtFixedRate:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;
      29: areturn

  synchronized void endOfPeriod();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #28                 // Field acquireCount:I
       5: putfield      #30                 // Field lastCallsPerPeriod:I
       8: aload_0
       9: dup
      10: getfield      #33                 // Field totalAcquireCount:J
      13: aload_0
      14: getfield      #28                 // Field acquireCount:I
      17: i2l
      18: ladd
      19: putfield      #33                 // Field totalAcquireCount:J
      22: aload_0
      23: dup
      24: getfield      #32                 // Field periodCount:J
      27: lconst_1
      28: ladd
      29: putfield      #32                 // Field periodCount:J
      32: aload_0
      33: iconst_0
      34: putfield      #28                 // Field acquireCount:I
      37: aload_0
      38: invokevirtual #39                 // Method java/lang/Object.notifyAll:()V
      41: return
}
