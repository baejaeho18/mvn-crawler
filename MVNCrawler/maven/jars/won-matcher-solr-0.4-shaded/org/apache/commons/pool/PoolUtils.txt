Compiled from "PoolUtils.java"
public final class org.apache.commons.pool.PoolUtils {
  private static java.util.Timer MIN_IDLE_TIMER;

  public org.apache.commons.pool.PoolUtils();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public static void checkRethrow(java.lang.Throwable);
    Code:
       0: aload_0
       1: instanceof    #2                  // class java/lang/ThreadDeath
       4: ifeq          12
       7: aload_0
       8: checkcast     #2                  // class java/lang/ThreadDeath
      11: athrow
      12: aload_0
      13: instanceof    #3                  // class java/lang/VirtualMachineError
      16: ifeq          24
      19: aload_0
      20: checkcast     #3                  // class java/lang/VirtualMachineError
      23: athrow
      24: return

  public static <V> org.apache.commons.pool.PoolableObjectFactory<V> adapt(org.apache.commons.pool.KeyedPoolableObjectFactory<java.lang.Object, V>) throws java.lang.IllegalArgumentException;
    Code:
       0: aload_0
       1: new           #4                  // class java/lang/Object
       4: dup
       5: invokespecial #1                  // Method java/lang/Object."<init>":()V
       8: invokestatic  #5                  // Method adapt:(Lorg/apache/commons/pool/KeyedPoolableObjectFactory;Ljava/lang/Object;)Lorg/apache/commons/pool/PoolableObjectFactory;
      11: areturn

  public static <K, V> org.apache.commons.pool.PoolableObjectFactory<V> adapt(org.apache.commons.pool.KeyedPoolableObjectFactory<K, V>, K) throws java.lang.IllegalArgumentException;
    Code:
       0: new           #6                  // class org/apache/commons/pool/PoolUtils$PoolableObjectFactoryAdaptor
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #7                  // Method org/apache/commons/pool/PoolUtils$PoolableObjectFactoryAdaptor."<init>":(Lorg/apache/commons/pool/KeyedPoolableObjectFactory;Ljava/lang/Object;)V
       9: areturn

  public static <K, V> org.apache.commons.pool.KeyedPoolableObjectFactory<K, V> adapt(org.apache.commons.pool.PoolableObjectFactory<V>) throws java.lang.IllegalArgumentException;
    Code:
       0: new           #8                  // class org/apache/commons/pool/PoolUtils$KeyedPoolableObjectFactoryAdaptor
       3: dup
       4: aload_0
       5: invokespecial #9                  // Method org/apache/commons/pool/PoolUtils$KeyedPoolableObjectFactoryAdaptor."<init>":(Lorg/apache/commons/pool/PoolableObjectFactory;)V
       8: areturn

  public static <V> org.apache.commons.pool.ObjectPool<V> adapt(org.apache.commons.pool.KeyedObjectPool<java.lang.Object, V>) throws java.lang.IllegalArgumentException;
    Code:
       0: aload_0
       1: new           #4                  // class java/lang/Object
       4: dup
       5: invokespecial #1                  // Method java/lang/Object."<init>":()V
       8: invokestatic  #10                 // Method adapt:(Lorg/apache/commons/pool/KeyedObjectPool;Ljava/lang/Object;)Lorg/apache/commons/pool/ObjectPool;
      11: areturn

  public static <V> org.apache.commons.pool.ObjectPool<V> adapt(org.apache.commons.pool.KeyedObjectPool<java.lang.Object, V>, java.lang.Object) throws java.lang.IllegalArgumentException;
    Code:
       0: new           #11                 // class org/apache/commons/pool/PoolUtils$ObjectPoolAdaptor
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #12                 // Method org/apache/commons/pool/PoolUtils$ObjectPoolAdaptor."<init>":(Lorg/apache/commons/pool/KeyedObjectPool;Ljava/lang/Object;)V
       9: areturn

  public static <K, V> org.apache.commons.pool.KeyedObjectPool<K, V> adapt(org.apache.commons.pool.ObjectPool<V>) throws java.lang.IllegalArgumentException;
    Code:
       0: new           #13                 // class org/apache/commons/pool/PoolUtils$KeyedObjectPoolAdaptor
       3: dup
       4: aload_0
       5: invokespecial #14                 // Method org/apache/commons/pool/PoolUtils$KeyedObjectPoolAdaptor."<init>":(Lorg/apache/commons/pool/ObjectPool;)V
       8: areturn

  public static <T> org.apache.commons.pool.ObjectPool<T> checkedPool(org.apache.commons.pool.ObjectPool<T>, java.lang.Class<T>);
    Code:
       0: aload_0
       1: ifnonnull     14
       4: new           #15                 // class java/lang/IllegalArgumentException
       7: dup
       8: ldc           #16                 // String pool must not be null.
      10: invokespecial #17                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: aload_1
      15: ifnonnull     28
      18: new           #15                 // class java/lang/IllegalArgumentException
      21: dup
      22: ldc           #18                 // String type must not be null.
      24: invokespecial #17                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      27: athrow
      28: new           #19                 // class org/apache/commons/pool/PoolUtils$CheckedObjectPool
      31: dup
      32: aload_0
      33: aload_1
      34: invokespecial #20                 // Method org/apache/commons/pool/PoolUtils$CheckedObjectPool."<init>":(Lorg/apache/commons/pool/ObjectPool;Ljava/lang/Class;)V
      37: areturn

  public static <K, V> org.apache.commons.pool.KeyedObjectPool<K, V> checkedPool(org.apache.commons.pool.KeyedObjectPool<K, V>, java.lang.Class<V>);
    Code:
       0: aload_0
       1: ifnonnull     14
       4: new           #15                 // class java/lang/IllegalArgumentException
       7: dup
       8: ldc           #21                 // String keyedPool must not be null.
      10: invokespecial #17                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: aload_1
      15: ifnonnull     28
      18: new           #15                 // class java/lang/IllegalArgumentException
      21: dup
      22: ldc           #18                 // String type must not be null.
      24: invokespecial #17                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      27: athrow
      28: new           #22                 // class org/apache/commons/pool/PoolUtils$CheckedKeyedObjectPool
      31: dup
      32: aload_0
      33: aload_1
      34: invokespecial #23                 // Method org/apache/commons/pool/PoolUtils$CheckedKeyedObjectPool."<init>":(Lorg/apache/commons/pool/KeyedObjectPool;Ljava/lang/Class;)V
      37: areturn

  public static <T> java.util.TimerTask checkMinIdle(org.apache.commons.pool.ObjectPool<T>, int, long) throws java.lang.IllegalArgumentException;
    Code:
       0: aload_0
       1: ifnonnull     14
       4: new           #15                 // class java/lang/IllegalArgumentException
       7: dup
       8: ldc           #21                 // String keyedPool must not be null.
      10: invokespecial #17                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: iload_1
      15: ifge          28
      18: new           #15                 // class java/lang/IllegalArgumentException
      21: dup
      22: ldc           #24                 // String minIdle must be non-negative.
      24: invokespecial #17                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      27: athrow
      28: new           #25                 // class org/apache/commons/pool/PoolUtils$ObjectPoolMinIdleTimerTask
      31: dup
      32: aload_0
      33: iload_1
      34: invokespecial #26                 // Method org/apache/commons/pool/PoolUtils$ObjectPoolMinIdleTimerTask."<init>":(Lorg/apache/commons/pool/ObjectPool;I)V
      37: astore        4
      39: invokestatic  #27                 // Method getMinIdleTimer:()Ljava/util/Timer;
      42: aload         4
      44: lconst_0
      45: lload_2
      46: invokevirtual #28                 // Method java/util/Timer.schedule:(Ljava/util/TimerTask;JJ)V
      49: aload         4
      51: areturn

  public static <K, V> java.util.TimerTask checkMinIdle(org.apache.commons.pool.KeyedObjectPool<K, V>, K, int, long) throws java.lang.IllegalArgumentException;
    Code:
       0: aload_0
       1: ifnonnull     14
       4: new           #15                 // class java/lang/IllegalArgumentException
       7: dup
       8: ldc           #21                 // String keyedPool must not be null.
      10: invokespecial #17                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: aload_1
      15: ifnonnull     28
      18: new           #15                 // class java/lang/IllegalArgumentException
      21: dup
      22: ldc           #29                 // String key must not be null.
      24: invokespecial #17                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      27: athrow
      28: iload_2
      29: ifge          42
      32: new           #15                 // class java/lang/IllegalArgumentException
      35: dup
      36: ldc           #24                 // String minIdle must be non-negative.
      38: invokespecial #17                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      41: athrow
      42: new           #30                 // class org/apache/commons/pool/PoolUtils$KeyedObjectPoolMinIdleTimerTask
      45: dup
      46: aload_0
      47: aload_1
      48: iload_2
      49: invokespecial #31                 // Method org/apache/commons/pool/PoolUtils$KeyedObjectPoolMinIdleTimerTask."<init>":(Lorg/apache/commons/pool/KeyedObjectPool;Ljava/lang/Object;I)V
      52: astore        5
      54: invokestatic  #27                 // Method getMinIdleTimer:()Ljava/util/Timer;
      57: aload         5
      59: lconst_0
      60: lload_3
      61: invokevirtual #28                 // Method java/util/Timer.schedule:(Ljava/util/TimerTask;JJ)V
      64: aload         5
      66: areturn

  public static <K, V> java.util.Map<K, java.util.TimerTask> checkMinIdle(org.apache.commons.pool.KeyedObjectPool<K, V>, java.util.Collection<? extends K>, int, long) throws java.lang.IllegalArgumentException;
    Code:
       0: aload_1
       1: ifnonnull     14
       4: new           #15                 // class java/lang/IllegalArgumentException
       7: dup
       8: ldc           #32                 // String keys must not be null.
      10: invokespecial #17                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: new           #33                 // class java/util/HashMap
      17: dup
      18: aload_1
      19: invokeinterface #34,  1           // InterfaceMethod java/util/Collection.size:()I
      24: invokespecial #35                 // Method java/util/HashMap."<init>":(I)V
      27: astore        5
      29: aload_1
      30: invokeinterface #36,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      35: astore        6
      37: aload         6
      39: invokeinterface #37,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      44: ifeq          81
      47: aload         6
      49: invokeinterface #38,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      54: astore        7
      56: aload_0
      57: aload         7
      59: iload_2
      60: lload_3
      61: invokestatic  #39                 // Method checkMinIdle:(Lorg/apache/commons/pool/KeyedObjectPool;Ljava/lang/Object;IJ)Ljava/util/TimerTask;
      64: astore        8
      66: aload         5
      68: aload         7
      70: aload         8
      72: invokeinterface #40,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      77: pop
      78: goto          37
      81: aload         5
      83: areturn

  public static <T> void prefill(org.apache.commons.pool.ObjectPool<T>, int) throws java.lang.Exception, java.lang.IllegalArgumentException;
    Code:
       0: aload_0
       1: ifnonnull     14
       4: new           #15                 // class java/lang/IllegalArgumentException
       7: dup
       8: ldc           #16                 // String pool must not be null.
      10: invokespecial #17                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: iconst_0
      15: istore_2
      16: iload_2
      17: iload_1
      18: if_icmpge     33
      21: aload_0
      22: invokeinterface #41,  1           // InterfaceMethod org/apache/commons/pool/ObjectPool.addObject:()V
      27: iinc          2, 1
      30: goto          16
      33: return

  public static <K, V> void prefill(org.apache.commons.pool.KeyedObjectPool<K, V>, K, int) throws java.lang.Exception, java.lang.IllegalArgumentException;
    Code:
       0: aload_0
       1: ifnonnull     14
       4: new           #15                 // class java/lang/IllegalArgumentException
       7: dup
       8: ldc           #21                 // String keyedPool must not be null.
      10: invokespecial #17                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: aload_1
      15: ifnonnull     28
      18: new           #15                 // class java/lang/IllegalArgumentException
      21: dup
      22: ldc           #29                 // String key must not be null.
      24: invokespecial #17                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      27: athrow
      28: iconst_0
      29: istore_3
      30: iload_3
      31: iload_2
      32: if_icmpge     48
      35: aload_0
      36: aload_1
      37: invokeinterface #42,  2           // InterfaceMethod org/apache/commons/pool/KeyedObjectPool.addObject:(Ljava/lang/Object;)V
      42: iinc          3, 1
      45: goto          30
      48: return

  public static <K, V> void prefill(org.apache.commons.pool.KeyedObjectPool<K, V>, java.util.Collection<? extends K>, int) throws java.lang.Exception, java.lang.IllegalArgumentException;
    Code:
       0: aload_1
       1: ifnonnull     14
       4: new           #15                 // class java/lang/IllegalArgumentException
       7: dup
       8: ldc           #32                 // String keys must not be null.
      10: invokespecial #17                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: aload_1
      15: invokeinterface #36,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      20: astore_3
      21: aload_3
      22: invokeinterface #37,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      27: ifeq          44
      30: aload_0
      31: aload_3
      32: invokeinterface #38,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      37: iload_2
      38: invokestatic  #43                 // Method prefill:(Lorg/apache/commons/pool/KeyedObjectPool;Ljava/lang/Object;I)V
      41: goto          21
      44: return

  public static <T> org.apache.commons.pool.ObjectPool<T> synchronizedPool(org.apache.commons.pool.ObjectPool<T>);
    Code:
       0: aload_0
       1: ifnonnull     14
       4: new           #15                 // class java/lang/IllegalArgumentException
       7: dup
       8: ldc           #16                 // String pool must not be null.
      10: invokespecial #17                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: new           #44                 // class org/apache/commons/pool/PoolUtils$SynchronizedObjectPool
      17: dup
      18: aload_0
      19: invokespecial #45                 // Method org/apache/commons/pool/PoolUtils$SynchronizedObjectPool."<init>":(Lorg/apache/commons/pool/ObjectPool;)V
      22: areturn

  public static <K, V> org.apache.commons.pool.KeyedObjectPool<K, V> synchronizedPool(org.apache.commons.pool.KeyedObjectPool<K, V>);
    Code:
       0: aload_0
       1: ifnonnull     14
       4: new           #15                 // class java/lang/IllegalArgumentException
       7: dup
       8: ldc           #21                 // String keyedPool must not be null.
      10: invokespecial #17                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: new           #46                 // class org/apache/commons/pool/PoolUtils$SynchronizedKeyedObjectPool
      17: dup
      18: aload_0
      19: invokespecial #47                 // Method org/apache/commons/pool/PoolUtils$SynchronizedKeyedObjectPool."<init>":(Lorg/apache/commons/pool/KeyedObjectPool;)V
      22: areturn

  public static <T> org.apache.commons.pool.PoolableObjectFactory<T> synchronizedPoolableFactory(org.apache.commons.pool.PoolableObjectFactory<T>);
    Code:
       0: new           #48                 // class org/apache/commons/pool/PoolUtils$SynchronizedPoolableObjectFactory
       3: dup
       4: aload_0
       5: invokespecial #49                 // Method org/apache/commons/pool/PoolUtils$SynchronizedPoolableObjectFactory."<init>":(Lorg/apache/commons/pool/PoolableObjectFactory;)V
       8: areturn

  public static <K, V> org.apache.commons.pool.KeyedPoolableObjectFactory<K, V> synchronizedPoolableFactory(org.apache.commons.pool.KeyedPoolableObjectFactory<K, V>);
    Code:
       0: new           #50                 // class org/apache/commons/pool/PoolUtils$SynchronizedKeyedPoolableObjectFactory
       3: dup
       4: aload_0
       5: invokespecial #51                 // Method org/apache/commons/pool/PoolUtils$SynchronizedKeyedPoolableObjectFactory."<init>":(Lorg/apache/commons/pool/KeyedPoolableObjectFactory;)V
       8: areturn

  public static <T> org.apache.commons.pool.ObjectPool<T> erodingPool(org.apache.commons.pool.ObjectPool<T>);
    Code:
       0: aload_0
       1: fconst_1
       2: invokestatic  #52                 // Method erodingPool:(Lorg/apache/commons/pool/ObjectPool;F)Lorg/apache/commons/pool/ObjectPool;
       5: areturn

  public static <T> org.apache.commons.pool.ObjectPool<T> erodingPool(org.apache.commons.pool.ObjectPool<T>, float);
    Code:
       0: aload_0
       1: ifnonnull     14
       4: new           #15                 // class java/lang/IllegalArgumentException
       7: dup
       8: ldc           #16                 // String pool must not be null.
      10: invokespecial #17                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: fload_1
      15: fconst_0
      16: fcmpg
      17: ifgt          30
      20: new           #15                 // class java/lang/IllegalArgumentException
      23: dup
      24: ldc           #53                 // String factor must be positive.
      26: invokespecial #17                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      29: athrow
      30: new           #54                 // class org/apache/commons/pool/PoolUtils$ErodingObjectPool
      33: dup
      34: aload_0
      35: fload_1
      36: invokespecial #55                 // Method org/apache/commons/pool/PoolUtils$ErodingObjectPool."<init>":(Lorg/apache/commons/pool/ObjectPool;F)V
      39: areturn

  public static <K, V> org.apache.commons.pool.KeyedObjectPool<K, V> erodingPool(org.apache.commons.pool.KeyedObjectPool<K, V>);
    Code:
       0: aload_0
       1: fconst_1
       2: invokestatic  #56                 // Method erodingPool:(Lorg/apache/commons/pool/KeyedObjectPool;F)Lorg/apache/commons/pool/KeyedObjectPool;
       5: areturn

  public static <K, V> org.apache.commons.pool.KeyedObjectPool<K, V> erodingPool(org.apache.commons.pool.KeyedObjectPool<K, V>, float);
    Code:
       0: aload_0
       1: fload_1
       2: iconst_0
       3: invokestatic  #57                 // Method erodingPool:(Lorg/apache/commons/pool/KeyedObjectPool;FZ)Lorg/apache/commons/pool/KeyedObjectPool;
       6: areturn

  public static <K, V> org.apache.commons.pool.KeyedObjectPool<K, V> erodingPool(org.apache.commons.pool.KeyedObjectPool<K, V>, float, boolean);
    Code:
       0: aload_0
       1: ifnonnull     14
       4: new           #15                 // class java/lang/IllegalArgumentException
       7: dup
       8: ldc           #21                 // String keyedPool must not be null.
      10: invokespecial #17                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: fload_1
      15: fconst_0
      16: fcmpg
      17: ifgt          30
      20: new           #15                 // class java/lang/IllegalArgumentException
      23: dup
      24: ldc           #53                 // String factor must be positive.
      26: invokespecial #17                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      29: athrow
      30: iload_2
      31: ifeq          44
      34: new           #58                 // class org/apache/commons/pool/PoolUtils$ErodingPerKeyKeyedObjectPool
      37: dup
      38: aload_0
      39: fload_1
      40: invokespecial #59                 // Method org/apache/commons/pool/PoolUtils$ErodingPerKeyKeyedObjectPool."<init>":(Lorg/apache/commons/pool/KeyedObjectPool;F)V
      43: areturn
      44: new           #60                 // class org/apache/commons/pool/PoolUtils$ErodingKeyedObjectPool
      47: dup
      48: aload_0
      49: fload_1
      50: invokespecial #61                 // Method org/apache/commons/pool/PoolUtils$ErodingKeyedObjectPool."<init>":(Lorg/apache/commons/pool/KeyedObjectPool;F)V
      53: areturn

  private static synchronized java.util.Timer getMinIdleTimer();
    Code:
       0: getstatic     #62                 // Field MIN_IDLE_TIMER:Ljava/util/Timer;
       3: ifnonnull     17
       6: new           #63                 // class java/util/Timer
       9: dup
      10: iconst_1
      11: invokespecial #64                 // Method java/util/Timer."<init>":(Z)V
      14: putstatic     #62                 // Field MIN_IDLE_TIMER:Ljava/util/Timer;
      17: getstatic     #62                 // Field MIN_IDLE_TIMER:Ljava/util/Timer;
      20: areturn
}
