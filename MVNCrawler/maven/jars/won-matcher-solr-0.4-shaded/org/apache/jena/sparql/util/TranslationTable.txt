Compiled from "TranslationTable.java"
public class org.apache.jena.sparql.util.TranslationTable<X> {
  java.util.Map<java.lang.String, X> map;

  boolean ignoreCase;

  public org.apache.jena.sparql.util.TranslationTable();
    Code:
       0: aload_0
       1: iconst_0
       2: invokespecial #1                  // Method "<init>":(Z)V
       5: return

  public org.apache.jena.sparql.util.TranslationTable(boolean);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #3                  // class java/util/HashMap
       8: dup
       9: invokespecial #4                  // Method java/util/HashMap."<init>":()V
      12: putfield      #5                  // Field map:Ljava/util/Map;
      15: aload_0
      16: iconst_0
      17: putfield      #6                  // Field ignoreCase:Z
      20: aload_0
      21: iload_1
      22: putfield      #6                  // Field ignoreCase:Z
      25: return

  public X lookup(java.lang.String);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: areturn
       6: aload_0
       7: getfield      #5                  // Field map:Ljava/util/Map;
      10: invokeinterface #7,  1            // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      15: invokeinterface #8,  1            // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      20: astore_2
      21: aload_2
      22: invokeinterface #9,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z
      27: ifeq          93
      30: aload_2
      31: invokeinterface #10,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      36: checkcast     #11                 // class java/util/Map$Entry
      39: astore_3
      40: aload_3
      41: invokeinterface #12,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      46: checkcast     #13                 // class java/lang/String
      49: astore        4
      51: aload_0
      52: getfield      #6                  // Field ignoreCase:Z
      55: ifeq          74
      58: aload         4
      60: aload_1
      61: invokevirtual #14                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      64: ifeq          90
      67: aload_3
      68: invokeinterface #15,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      73: areturn
      74: aload         4
      76: aload_1
      77: invokevirtual #16                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      80: ifeq          90
      83: aload_3
      84: invokeinterface #15,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      89: areturn
      90: goto          21
      93: aconst_null
      94: areturn

  public void put(java.lang.String, X);
    Code:
       0: aload_0
       1: getfield      #5                  // Field map:Ljava/util/Map;
       4: aload_1
       5: aload_2
       6: invokeinterface #17,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      11: pop
      12: return

  public java.util.Iterator<java.lang.String> keys();
    Code:
       0: aload_0
       1: getfield      #5                  // Field map:Ljava/util/Map;
       4: invokeinterface #18,  1           // InterfaceMethod java/util/Map.keySet:()Ljava/util/Set;
       9: invokeinterface #8,  1            // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      14: areturn

  public java.util.Iterator<X> values();
    Code:
       0: aload_0
       1: getfield      #5                  // Field map:Ljava/util/Map;
       4: invokeinterface #19,  1           // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
       9: invokeinterface #20,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      14: areturn
}
