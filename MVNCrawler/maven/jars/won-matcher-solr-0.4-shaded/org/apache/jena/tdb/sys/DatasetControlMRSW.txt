Compiled from "DatasetControlMRSW.java"
public class org.apache.jena.tdb.sys.DatasetControlMRSW implements org.apache.jena.tdb.sys.DatasetControl {
  private final boolean concurrencyChecking;

  private final java.util.concurrent.atomic.AtomicLong epoch;

  private final java.util.concurrent.atomic.AtomicLong readCounter;

  private final java.util.concurrent.atomic.AtomicLong writeCounter;

  public org.apache.jena.tdb.sys.DatasetControlMRSW();
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #3                  // Field concurrencyChecking:Z
       9: aload_0
      10: new           #4                  // class java/util/concurrent/atomic/AtomicLong
      13: dup
      14: ldc2_w        #5                  // long 5l
      17: invokespecial #7                  // Method java/util/concurrent/atomic/AtomicLong."<init>":(J)V
      20: putfield      #8                  // Field epoch:Ljava/util/concurrent/atomic/AtomicLong;
      23: aload_0
      24: new           #4                  // class java/util/concurrent/atomic/AtomicLong
      27: dup
      28: lconst_0
      29: invokespecial #7                  // Method java/util/concurrent/atomic/AtomicLong."<init>":(J)V
      32: putfield      #9                  // Field readCounter:Ljava/util/concurrent/atomic/AtomicLong;
      35: aload_0
      36: new           #4                  // class java/util/concurrent/atomic/AtomicLong
      39: dup
      40: lconst_0
      41: invokespecial #7                  // Method java/util/concurrent/atomic/AtomicLong."<init>":(J)V
      44: putfield      #10                 // Field writeCounter:Ljava/util/concurrent/atomic/AtomicLong;
      47: return

  public void startRead();
    Code:
       0: aload_0
       1: getfield      #9                  // Field readCounter:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicLong.getAndIncrement:()J
       7: pop2
       8: aload_0
       9: invokespecial #12                 // Method checkConcurrency:()V
      12: return

  public void finishRead();
    Code:
       0: aload_0
       1: getfield      #9                  // Field readCounter:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicLong.decrementAndGet:()J
       7: pop2
       8: return

  public void startUpdate();
    Code:
       0: aload_0
       1: getfield      #8                  // Field epoch:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicLong.getAndIncrement:()J
       7: pop2
       8: aload_0
       9: getfield      #10                 // Field writeCounter:Ljava/util/concurrent/atomic/AtomicLong;
      12: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicLong.getAndIncrement:()J
      15: pop2
      16: aload_0
      17: invokespecial #12                 // Method checkConcurrency:()V
      20: return

  public void finishUpdate();
    Code:
       0: aload_0
       1: getfield      #10                 // Field writeCounter:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicLong.decrementAndGet:()J
       7: pop2
       8: return

  private void checkConcurrency();
    Code:
       0: aload_0
       1: dup
       2: astore        5
       4: monitorenter
       5: aload_0
       6: getfield      #9                  // Field readCounter:Ljava/util/concurrent/atomic/AtomicLong;
       9: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
      12: lstore_1
      13: aload_0
      14: getfield      #10                 // Field writeCounter:Ljava/util/concurrent/atomic/AtomicLong;
      17: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
      20: lstore_3
      21: aload         5
      23: monitorexit
      24: goto          35
      27: astore        6
      29: aload         5
      31: monitorexit
      32: aload         6
      34: athrow
      35: lload_1
      36: lconst_0
      37: lcmp
      38: ifle          52
      41: lload_3
      42: lconst_0
      43: lcmp
      44: ifle          52
      47: lload_1
      48: lload_3
      49: invokestatic  #15                 // Method policyError:(JJ)V
      52: lload_3
      53: lconst_1
      54: lcmp
      55: ifle          63
      58: lload_1
      59: lload_3
      60: invokestatic  #15                 // Method policyError:(JJ)V
      63: return
    Exception table:
       from    to  target type
           5    24    27   any
          27    32    27   any

  public <T> java.util.Iterator<T> iteratorControl(java.util.Iterator<T>);
    Code:
       0: new           #16                 // class org/apache/jena/tdb/sys/DatasetControlMRSW$IteratorCheckNotConcurrent
       3: dup
       4: aload_1
       5: aload_0
       6: getfield      #8                  // Field epoch:Ljava/util/concurrent/atomic/AtomicLong;
       9: invokespecial #17                 // Method org/apache/jena/tdb/sys/DatasetControlMRSW$IteratorCheckNotConcurrent."<init>":(Ljava/util/Iterator;Ljava/util/concurrent/atomic/AtomicLong;)V
      12: areturn

  private static void policyError(long, long);
    Code:
       0: ldc           #18                 // String Reader = %d, Writer = %d
       2: iconst_2
       3: anewarray     #19                 // class java/lang/Object
       6: dup
       7: iconst_0
       8: lload_0
       9: invokestatic  #20                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      12: aastore
      13: dup
      14: iconst_1
      15: lload_2
      16: invokestatic  #20                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      19: aastore
      20: invokestatic  #21                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      23: invokestatic  #1                  // Method policyError:(Ljava/lang/String;)V
      26: return

  private static void policyError(java.lang.String);
    Code:
       0: new           #22                 // class java/util/ConcurrentModificationException
       3: dup
       4: aload_0
       5: invokespecial #23                 // Method java/util/ConcurrentModificationException."<init>":(Ljava/lang/String;)V
       8: athrow

  static void access$000(java.lang.String);
    Code:
       0: aload_0
       1: invokestatic  #1                  // Method policyError:(Ljava/lang/String;)V
       4: return
}
