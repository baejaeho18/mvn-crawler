Compiled from "ArrayBasedUnicodeEscaper.java"
public abstract class org.apache.jena.ext.com.google.common.escape.ArrayBasedUnicodeEscaper extends org.apache.jena.ext.com.google.common.escape.UnicodeEscaper {
  private final char[][] replacements;

  private final int replacementsLength;

  private final int safeMin;

  private final int safeMax;

  private final char safeMinChar;

  private final char safeMaxChar;

  protected org.apache.jena.ext.com.google.common.escape.ArrayBasedUnicodeEscaper(java.util.Map<java.lang.Character, java.lang.String>, int, int, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #25                 // Method org/apache/jena/ext/com/google/common/escape/ArrayBasedEscaperMap.create:(Ljava/util/Map;)Lorg/apache/jena/ext/com/google/common/escape/ArrayBasedEscaperMap;
       5: iload_2
       6: iload_3
       7: aload         4
       9: invokespecial #28                 // Method "<init>":(Lorg/apache/jena/ext/com/google/common/escape/ArrayBasedEscaperMap;IILjava/lang/String;)V
      12: return

  protected org.apache.jena.ext.com.google.common.escape.ArrayBasedUnicodeEscaper(org.apache.jena.ext.com.google.common.escape.ArrayBasedEscaperMap, int, int, java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #38                 // Method org/apache/jena/ext/com/google/common/escape/UnicodeEscaper."<init>":()V
       4: aload_1
       5: invokestatic  #44                 // Method org/apache/jena/ext/com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       8: pop
       9: aload_0
      10: aload_1
      11: invokevirtual #48                 // Method org/apache/jena/ext/com/google/common/escape/ArrayBasedEscaperMap.getReplacementArray:()[[C
      14: putfield      #50                 // Field replacements:[[C
      17: aload_0
      18: aload_0
      19: getfield      #50                 // Field replacements:[[C
      22: arraylength
      23: putfield      #52                 // Field replacementsLength:I
      26: iload_3
      27: iload_2
      28: if_icmpge     36
      31: iconst_m1
      32: istore_3
      33: ldc           #53                 // int 2147483647
      35: istore_2
      36: aload_0
      37: iload_2
      38: putfield      #57                 // Field safeMin:I
      41: aload_0
      42: iload_3
      43: putfield      #59                 // Field safeMax:I
      46: iload_2
      47: ldc           #60                 // int 55296
      49: if_icmplt     66
      52: aload_0
      53: ldc           #61                 // int 65535
      55: putfield      #63                 // Field safeMinChar:C
      58: aload_0
      59: iconst_0
      60: putfield      #65                 // Field safeMaxChar:C
      63: goto          83
      66: aload_0
      67: iload_2
      68: i2c
      69: putfield      #63                 // Field safeMinChar:C
      72: aload_0
      73: iload_3
      74: ldc           #66                 // int 55295
      76: invokestatic  #72                 // Method java/lang/Math.min:(II)I
      79: i2c
      80: putfield      #65                 // Field safeMaxChar:C
      83: return

  public final java.lang.String escape(java.lang.String);
    Code:
       0: aload_1
       1: invokestatic  #44                 // Method org/apache/jena/ext/com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: iconst_0
       6: istore_2
       7: iload_2
       8: aload_1
       9: invokevirtual #80                 // Method java/lang/String.length:()I
      12: if_icmpge     67
      15: aload_1
      16: iload_2
      17: invokevirtual #84                 // Method java/lang/String.charAt:(I)C
      20: istore_3
      21: iload_3
      22: aload_0
      23: getfield      #52                 // Field replacementsLength:I
      26: if_icmpge     38
      29: aload_0
      30: getfield      #50                 // Field replacements:[[C
      33: iload_3
      34: aaload
      35: ifnonnull     54
      38: iload_3
      39: aload_0
      40: getfield      #65                 // Field safeMaxChar:C
      43: if_icmpgt     54
      46: iload_3
      47: aload_0
      48: getfield      #63                 // Field safeMinChar:C
      51: if_icmpge     61
      54: aload_0
      55: aload_1
      56: iload_2
      57: invokevirtual #88                 // Method escapeSlow:(Ljava/lang/String;I)Ljava/lang/String;
      60: areturn
      61: iinc          2, 1
      64: goto          7
      67: aload_1
      68: areturn

  protected final int nextEscapeIndex(java.lang.CharSequence, int, int);
    Code:
       0: iload_2
       1: iload_3
       2: if_icmpge     60
       5: aload_1
       6: iload_2
       7: invokeinterface #96,  2           // InterfaceMethod java/lang/CharSequence.charAt:(I)C
      12: istore        4
      14: iload         4
      16: aload_0
      17: getfield      #52                 // Field replacementsLength:I
      20: if_icmpge     33
      23: aload_0
      24: getfield      #50                 // Field replacements:[[C
      27: iload         4
      29: aaload
      30: ifnonnull     60
      33: iload         4
      35: aload_0
      36: getfield      #65                 // Field safeMaxChar:C
      39: if_icmpgt     60
      42: iload         4
      44: aload_0
      45: getfield      #63                 // Field safeMinChar:C
      48: if_icmpge     54
      51: goto          60
      54: iinc          2, 1
      57: goto          0
      60: iload_2
      61: ireturn

  protected final char[] escape(int);
    Code:
       0: iload_1
       1: aload_0
       2: getfield      #52                 // Field replacementsLength:I
       5: if_icmpge     21
       8: aload_0
       9: getfield      #50                 // Field replacements:[[C
      12: iload_1
      13: aaload
      14: astore_2
      15: aload_2
      16: ifnull        21
      19: aload_2
      20: areturn
      21: iload_1
      22: aload_0
      23: getfield      #57                 // Field safeMin:I
      26: if_icmplt     39
      29: iload_1
      30: aload_0
      31: getfield      #59                 // Field safeMax:I
      34: if_icmpgt     39
      37: aconst_null
      38: areturn
      39: aload_0
      40: iload_1
      41: invokevirtual #104                // Method escapeUnsafe:(I)[C
      44: areturn

  protected abstract char[] escapeUnsafe(int);
}
