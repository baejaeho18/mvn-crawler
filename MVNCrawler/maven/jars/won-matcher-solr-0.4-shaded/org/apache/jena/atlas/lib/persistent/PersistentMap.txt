Compiled from "PersistentMap.java"
public interface org.apache.jena.atlas.lib.persistent.PersistentMap<K, V, SelfType extends org.apache.jena.atlas.lib.persistent.PersistentMap<K, V, SelfType>> {
  public default java.util.Optional<V> get(K);
    Code:
       0: aload_0
       1: invokeinterface #1,  1            // InterfaceMethod entryStream:()Ljava/util/stream/Stream;
       6: aload_1
       7: invokedynamic #2,  0              // InvokeDynamic #0:test:(Ljava/lang/Object;)Ljava/util/function/Predicate;
      12: invokeinterface #3,  2            // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      17: invokedynamic #4,  0              // InvokeDynamic #1:apply:()Ljava/util/function/Function;
      22: invokeinterface #5,  2            // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      27: invokeinterface #6,  1            // InterfaceMethod java/util/stream/Stream.findFirst:()Ljava/util/Optional;
      32: areturn

  public abstract SelfType plus(K, V);

  public abstract SelfType minus(K);

  public default boolean containsKey(K);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #7,  2            // InterfaceMethod get:(Ljava/lang/Object;)Ljava/util/Optional;
       7: invokevirtual #8                  // Method java/util/Optional.isPresent:()Z
      10: ireturn

  public abstract java.util.stream.Stream<java.util.Map$Entry<K, V>> entryStream();

  public default <R> java.util.stream.Stream<R> flatten(java.util.function.BiFunction<K, V, java.util.stream.Stream<R>>);
    Code:
       0: aload_0
       1: invokeinterface #1,  1            // InterfaceMethod entryStream:()Ljava/util/stream/Stream;
       6: aload_1
       7: invokedynamic #9,  0              // InvokeDynamic #2:apply:(Ljava/util/function/BiFunction;)Ljava/util/function/Function;
      12: invokeinterface #10,  2           // InterfaceMethod java/util/stream/Stream.flatMap:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      17: areturn

  private static java.util.stream.Stream lambda$flatten$1(java.util.function.BiFunction, java.util.Map$Entry);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #11,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
       7: aload_1
       8: invokeinterface #12,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      13: invokeinterface #13,  3           // InterfaceMethod java/util/function/BiFunction.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      18: checkcast     #14                 // class java/util/stream/Stream
      21: areturn

  private static boolean lambda$get$0(java.lang.Object, java.util.Map$Entry);
    Code:
       0: aload_1
       1: invokeinterface #11,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
       6: aload_0
       7: invokevirtual #15                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      10: ireturn
}
