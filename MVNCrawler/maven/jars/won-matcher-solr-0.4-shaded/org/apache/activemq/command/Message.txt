Compiled from "Message.java"
public abstract class org.apache.activemq.command.Message extends org.apache.activemq.command.BaseCommand implements org.apache.activemq.command.MarshallAware,org.apache.activemq.broker.region.MessageReference {
  public static final java.lang.String ORIGINAL_EXPIRATION;

  public static final int DEFAULT_MINIMUM_MESSAGE_SIZE;

  protected org.apache.activemq.command.MessageId messageId;

  protected org.apache.activemq.command.ActiveMQDestination originalDestination;

  protected org.apache.activemq.command.TransactionId originalTransactionId;

  protected org.apache.activemq.command.ProducerId producerId;

  protected org.apache.activemq.command.ActiveMQDestination destination;

  protected org.apache.activemq.command.TransactionId transactionId;

  protected long expiration;

  protected long timestamp;

  protected long arrival;

  protected long brokerInTime;

  protected long brokerOutTime;

  protected java.lang.String correlationId;

  protected org.apache.activemq.command.ActiveMQDestination replyTo;

  protected boolean persistent;

  protected java.lang.String type;

  protected byte priority;

  protected java.lang.String groupID;

  protected int groupSequence;

  protected org.apache.activemq.command.ConsumerId targetConsumerId;

  protected boolean compressed;

  protected java.lang.String userID;

  protected org.apache.activemq.util.ByteSequence content;

  protected org.apache.activemq.util.ByteSequence marshalledProperties;

  protected org.apache.activemq.command.DataStructure dataStructure;

  protected int redeliveryCounter;

  protected int size;

  protected java.util.Map<java.lang.String, java.lang.Object> properties;

  protected boolean readOnlyProperties;

  protected boolean readOnlyBody;

  protected transient boolean recievedByDFBridge;

  protected boolean droppable;

  protected boolean jmsXGroupFirstForConsumer;

  private transient short referenceCount;

  private transient org.apache.activemq.ActiveMQConnection connection;

  transient org.apache.activemq.command.Message$MessageDestination regionDestination;

  transient org.apache.activemq.usage.MemoryUsage memoryUsage;

  private org.apache.activemq.command.BrokerId[] brokerPath;

  private org.apache.activemq.command.BrokerId[] cluster;

  public org.apache.activemq.command.Message();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/apache/activemq/command/BaseCommand."<init>":()V
       4: return

  public abstract org.apache.activemq.command.Message copy();

  public abstract void clearBody() throws javax.jms.JMSException;

  public abstract void storeContent();

  public abstract void storeContentAndClear();

  public void clearMarshalledState() throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: aconst_null
       2: putfield      #2                  // Field properties:Ljava/util/Map;
       5: return

  protected void copy(org.apache.activemq.command.Message);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #3                  // Method org/apache/activemq/command/BaseCommand.copy:(Lorg/apache/activemq/command/BaseCommand;)V
       5: aload_1
       6: aload_0
       7: getfield      #4                  // Field producerId:Lorg/apache/activemq/command/ProducerId;
      10: putfield      #4                  // Field producerId:Lorg/apache/activemq/command/ProducerId;
      13: aload_1
      14: aload_0
      15: getfield      #5                  // Field transactionId:Lorg/apache/activemq/command/TransactionId;
      18: putfield      #5                  // Field transactionId:Lorg/apache/activemq/command/TransactionId;
      21: aload_1
      22: aload_0
      23: getfield      #6                  // Field destination:Lorg/apache/activemq/command/ActiveMQDestination;
      26: putfield      #6                  // Field destination:Lorg/apache/activemq/command/ActiveMQDestination;
      29: aload_1
      30: aload_0
      31: getfield      #7                  // Field messageId:Lorg/apache/activemq/command/MessageId;
      34: ifnull        47
      37: aload_0
      38: getfield      #7                  // Field messageId:Lorg/apache/activemq/command/MessageId;
      41: invokevirtual #8                  // Method org/apache/activemq/command/MessageId.copy:()Lorg/apache/activemq/command/MessageId;
      44: goto          48
      47: aconst_null
      48: putfield      #7                  // Field messageId:Lorg/apache/activemq/command/MessageId;
      51: aload_1
      52: aload_0
      53: getfield      #9                  // Field originalDestination:Lorg/apache/activemq/command/ActiveMQDestination;
      56: putfield      #9                  // Field originalDestination:Lorg/apache/activemq/command/ActiveMQDestination;
      59: aload_1
      60: aload_0
      61: getfield      #10                 // Field originalTransactionId:Lorg/apache/activemq/command/TransactionId;
      64: putfield      #10                 // Field originalTransactionId:Lorg/apache/activemq/command/TransactionId;
      67: aload_1
      68: aload_0
      69: getfield      #11                 // Field expiration:J
      72: putfield      #11                 // Field expiration:J
      75: aload_1
      76: aload_0
      77: getfield      #12                 // Field timestamp:J
      80: putfield      #12                 // Field timestamp:J
      83: aload_1
      84: aload_0
      85: getfield      #13                 // Field correlationId:Ljava/lang/String;
      88: putfield      #13                 // Field correlationId:Ljava/lang/String;
      91: aload_1
      92: aload_0
      93: getfield      #14                 // Field replyTo:Lorg/apache/activemq/command/ActiveMQDestination;
      96: putfield      #14                 // Field replyTo:Lorg/apache/activemq/command/ActiveMQDestination;
      99: aload_1
     100: aload_0
     101: getfield      #15                 // Field persistent:Z
     104: putfield      #15                 // Field persistent:Z
     107: aload_1
     108: aload_0
     109: getfield      #16                 // Field redeliveryCounter:I
     112: putfield      #16                 // Field redeliveryCounter:I
     115: aload_1
     116: aload_0
     117: getfield      #17                 // Field type:Ljava/lang/String;
     120: putfield      #17                 // Field type:Ljava/lang/String;
     123: aload_1
     124: aload_0
     125: getfield      #18                 // Field priority:B
     128: putfield      #18                 // Field priority:B
     131: aload_1
     132: aload_0
     133: getfield      #19                 // Field size:I
     136: putfield      #19                 // Field size:I
     139: aload_1
     140: aload_0
     141: getfield      #20                 // Field groupID:Ljava/lang/String;
     144: putfield      #20                 // Field groupID:Ljava/lang/String;
     147: aload_1
     148: aload_0
     149: getfield      #21                 // Field userID:Ljava/lang/String;
     152: putfield      #21                 // Field userID:Ljava/lang/String;
     155: aload_1
     156: aload_0
     157: getfield      #22                 // Field groupSequence:I
     160: putfield      #22                 // Field groupSequence:I
     163: aload_0
     164: getfield      #2                  // Field properties:Ljava/util/Map;
     167: ifnull        200
     170: aload_1
     171: new           #23                 // class java/util/HashMap
     174: dup
     175: aload_0
     176: getfield      #2                  // Field properties:Ljava/util/Map;
     179: invokespecial #24                 // Method java/util/HashMap."<init>":(Ljava/util/Map;)V
     182: putfield      #2                  // Field properties:Ljava/util/Map;
     185: aload_1
     186: getfield      #2                  // Field properties:Ljava/util/Map;
     189: ldc           #25                 // String originalExpiration
     191: invokeinterface #26,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
     196: pop
     197: goto          208
     200: aload_1
     201: aload_0
     202: getfield      #2                  // Field properties:Ljava/util/Map;
     205: putfield      #2                  // Field properties:Ljava/util/Map;
     208: aload_1
     209: aload_0
     210: getfield      #27                 // Field content:Lorg/apache/activemq/util/ByteSequence;
     213: putfield      #27                 // Field content:Lorg/apache/activemq/util/ByteSequence;
     216: aload_1
     217: aload_0
     218: getfield      #28                 // Field marshalledProperties:Lorg/apache/activemq/util/ByteSequence;
     221: putfield      #28                 // Field marshalledProperties:Lorg/apache/activemq/util/ByteSequence;
     224: aload_1
     225: aload_0
     226: getfield      #29                 // Field dataStructure:Lorg/apache/activemq/command/DataStructure;
     229: putfield      #29                 // Field dataStructure:Lorg/apache/activemq/command/DataStructure;
     232: aload_1
     233: aload_0
     234: getfield      #30                 // Field readOnlyProperties:Z
     237: putfield      #30                 // Field readOnlyProperties:Z
     240: aload_1
     241: aload_0
     242: getfield      #31                 // Field readOnlyBody:Z
     245: putfield      #31                 // Field readOnlyBody:Z
     248: aload_1
     249: aload_0
     250: getfield      #32                 // Field compressed:Z
     253: putfield      #32                 // Field compressed:Z
     256: aload_1
     257: aload_0
     258: getfield      #33                 // Field recievedByDFBridge:Z
     261: putfield      #33                 // Field recievedByDFBridge:Z
     264: aload_1
     265: aload_0
     266: getfield      #34                 // Field arrival:J
     269: putfield      #34                 // Field arrival:J
     272: aload_1
     273: aload_0
     274: getfield      #35                 // Field connection:Lorg/apache/activemq/ActiveMQConnection;
     277: putfield      #35                 // Field connection:Lorg/apache/activemq/ActiveMQConnection;
     280: aload_1
     281: aload_0
     282: getfield      #36                 // Field regionDestination:Lorg/apache/activemq/command/Message$MessageDestination;
     285: putfield      #36                 // Field regionDestination:Lorg/apache/activemq/command/Message$MessageDestination;
     288: aload_1
     289: aload_0
     290: getfield      #37                 // Field brokerInTime:J
     293: putfield      #37                 // Field brokerInTime:J
     296: aload_1
     297: aload_0
     298: getfield      #38                 // Field brokerOutTime:J
     301: putfield      #38                 // Field brokerOutTime:J
     304: aload_1
     305: aload_0
     306: getfield      #39                 // Field memoryUsage:Lorg/apache/activemq/usage/MemoryUsage;
     309: putfield      #39                 // Field memoryUsage:Lorg/apache/activemq/usage/MemoryUsage;
     312: aload_1
     313: aload_0
     314: getfield      #40                 // Field brokerPath:[Lorg/apache/activemq/command/BrokerId;
     317: putfield      #40                 // Field brokerPath:[Lorg/apache/activemq/command/BrokerId;
     320: aload_1
     321: aload_0
     322: getfield      #41                 // Field jmsXGroupFirstForConsumer:Z
     325: putfield      #41                 // Field jmsXGroupFirstForConsumer:Z
     328: return

  public java.lang.Object getProperty(java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field properties:Ljava/util/Map;
       4: ifnonnull     28
       7: aload_0
       8: getfield      #28                 // Field marshalledProperties:Lorg/apache/activemq/util/ByteSequence;
      11: ifnonnull     16
      14: aconst_null
      15: areturn
      16: aload_0
      17: aload_0
      18: aload_0
      19: getfield      #28                 // Field marshalledProperties:Lorg/apache/activemq/util/ByteSequence;
      22: invokespecial #42                 // Method unmarsallProperties:(Lorg/apache/activemq/util/ByteSequence;)Ljava/util/Map;
      25: putfield      #2                  // Field properties:Ljava/util/Map;
      28: aload_0
      29: getfield      #2                  // Field properties:Ljava/util/Map;
      32: aload_1
      33: invokeinterface #43,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      38: astore_2
      39: aload_2
      40: instanceof    #44                 // class org/fusesource/hawtbuf/UTF8Buffer
      43: ifeq          51
      46: aload_2
      47: invokevirtual #45                 // Method java/lang/Object.toString:()Ljava/lang/String;
      50: astore_2
      51: aload_2
      52: areturn

  public java.util.Map<java.lang.String, java.lang.Object> getProperties() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field properties:Ljava/util/Map;
       4: ifnonnull     30
       7: aload_0
       8: getfield      #28                 // Field marshalledProperties:Lorg/apache/activemq/util/ByteSequence;
      11: ifnonnull     18
      14: getstatic     #46                 // Field java/util/Collections.EMPTY_MAP:Ljava/util/Map;
      17: areturn
      18: aload_0
      19: aload_0
      20: aload_0
      21: getfield      #28                 // Field marshalledProperties:Lorg/apache/activemq/util/ByteSequence;
      24: invokespecial #42                 // Method unmarsallProperties:(Lorg/apache/activemq/util/ByteSequence;)Ljava/util/Map;
      27: putfield      #2                  // Field properties:Ljava/util/Map;
      30: aload_0
      31: getfield      #2                  // Field properties:Ljava/util/Map;
      34: invokestatic  #47                 // Method java/util/Collections.unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;
      37: areturn

  public void clearProperties();
    Code:
       0: aload_0
       1: aconst_null
       2: putfield      #28                 // Field marshalledProperties:Lorg/apache/activemq/util/ByteSequence;
       5: aload_0
       6: aconst_null
       7: putfield      #2                  // Field properties:Ljava/util/Map;
      10: return

  public void setProperty(java.lang.String, java.lang.Object) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #48                 // Method lazyCreateProperties:()V
       4: aload_0
       5: getfield      #2                  // Field properties:Ljava/util/Map;
       8: aload_1
       9: aload_2
      10: invokeinterface #49,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      15: pop
      16: return

  public void removeProperty(java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #48                 // Method lazyCreateProperties:()V
       4: aload_0
       5: getfield      #2                  // Field properties:Ljava/util/Map;
       8: aload_1
       9: invokeinterface #26,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      14: pop
      15: return

  protected void lazyCreateProperties() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field properties:Ljava/util/Map;
       4: ifnonnull     48
       7: aload_0
       8: getfield      #28                 // Field marshalledProperties:Lorg/apache/activemq/util/ByteSequence;
      11: ifnonnull     28
      14: aload_0
      15: new           #23                 // class java/util/HashMap
      18: dup
      19: invokespecial #50                 // Method java/util/HashMap."<init>":()V
      22: putfield      #2                  // Field properties:Ljava/util/Map;
      25: goto          53
      28: aload_0
      29: aload_0
      30: aload_0
      31: getfield      #28                 // Field marshalledProperties:Lorg/apache/activemq/util/ByteSequence;
      34: invokespecial #42                 // Method unmarsallProperties:(Lorg/apache/activemq/util/ByteSequence;)Ljava/util/Map;
      37: putfield      #2                  // Field properties:Ljava/util/Map;
      40: aload_0
      41: aconst_null
      42: putfield      #28                 // Field marshalledProperties:Lorg/apache/activemq/util/ByteSequence;
      45: goto          53
      48: aload_0
      49: aconst_null
      50: putfield      #28                 // Field marshalledProperties:Lorg/apache/activemq/util/ByteSequence;
      53: return

  private java.util.Map<java.lang.String, java.lang.Object> unmarsallProperties(org.apache.activemq.util.ByteSequence) throws java.io.IOException;
    Code:
       0: new           #51                 // class java/io/DataInputStream
       3: dup
       4: new           #52                 // class org/apache/activemq/util/ByteArrayInputStream
       7: dup
       8: aload_1
       9: invokespecial #53                 // Method org/apache/activemq/util/ByteArrayInputStream."<init>":(Lorg/apache/activemq/util/ByteSequence;)V
      12: invokespecial #54                 // Method java/io/DataInputStream."<init>":(Ljava/io/InputStream;)V
      15: invokestatic  #55                 // Method org/apache/activemq/util/MarshallingSupport.unmarshalPrimitiveMap:(Ljava/io/DataInputStream;)Ljava/util/Map;
      18: areturn

  public void beforeMarshall(org.apache.activemq.wireformat.WireFormat) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #28                 // Field marshalledProperties:Lorg/apache/activemq/util/ByteSequence;
       4: ifnonnull     51
       7: aload_0
       8: getfield      #2                  // Field properties:Ljava/util/Map;
      11: ifnull        51
      14: new           #56                 // class org/apache/activemq/util/ByteArrayOutputStream
      17: dup
      18: invokespecial #57                 // Method org/apache/activemq/util/ByteArrayOutputStream."<init>":()V
      21: astore_2
      22: new           #58                 // class java/io/DataOutputStream
      25: dup
      26: aload_2
      27: invokespecial #59                 // Method java/io/DataOutputStream."<init>":(Ljava/io/OutputStream;)V
      30: astore_3
      31: aload_0
      32: getfield      #2                  // Field properties:Ljava/util/Map;
      35: aload_3
      36: invokestatic  #60                 // Method org/apache/activemq/util/MarshallingSupport.marshalPrimitiveMap:(Ljava/util/Map;Ljava/io/DataOutputStream;)V
      39: aload_3
      40: invokevirtual #61                 // Method java/io/DataOutputStream.close:()V
      43: aload_0
      44: aload_2
      45: invokevirtual #62                 // Method org/apache/activemq/util/ByteArrayOutputStream.toByteSequence:()Lorg/apache/activemq/util/ByteSequence;
      48: putfield      #28                 // Field marshalledProperties:Lorg/apache/activemq/util/ByteSequence;
      51: return

  public void afterMarshall(org.apache.activemq.wireformat.WireFormat) throws java.io.IOException;
    Code:
       0: return

  public void beforeUnmarshall(org.apache.activemq.wireformat.WireFormat) throws java.io.IOException;
    Code:
       0: return

  public void afterUnmarshall(org.apache.activemq.wireformat.WireFormat) throws java.io.IOException;
    Code:
       0: return

  public org.apache.activemq.command.ProducerId getProducerId();
    Code:
       0: aload_0
       1: getfield      #4                  // Field producerId:Lorg/apache/activemq/command/ProducerId;
       4: areturn

  public void setProducerId(org.apache.activemq.command.ProducerId);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #4                  // Field producerId:Lorg/apache/activemq/command/ProducerId;
       5: return

  public org.apache.activemq.command.ActiveMQDestination getDestination();
    Code:
       0: aload_0
       1: getfield      #6                  // Field destination:Lorg/apache/activemq/command/ActiveMQDestination;
       4: areturn

  public void setDestination(org.apache.activemq.command.ActiveMQDestination);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #6                  // Field destination:Lorg/apache/activemq/command/ActiveMQDestination;
       5: return

  public org.apache.activemq.command.TransactionId getTransactionId();
    Code:
       0: aload_0
       1: getfield      #5                  // Field transactionId:Lorg/apache/activemq/command/TransactionId;
       4: areturn

  public void setTransactionId(org.apache.activemq.command.TransactionId);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #5                  // Field transactionId:Lorg/apache/activemq/command/TransactionId;
       5: return

  public boolean isInTransaction();
    Code:
       0: aload_0
       1: getfield      #5                  // Field transactionId:Lorg/apache/activemq/command/TransactionId;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public org.apache.activemq.command.ActiveMQDestination getOriginalDestination();
    Code:
       0: aload_0
       1: getfield      #9                  // Field originalDestination:Lorg/apache/activemq/command/ActiveMQDestination;
       4: areturn

  public void setOriginalDestination(org.apache.activemq.command.ActiveMQDestination);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #9                  // Field originalDestination:Lorg/apache/activemq/command/ActiveMQDestination;
       5: return

  public org.apache.activemq.command.MessageId getMessageId();
    Code:
       0: aload_0
       1: getfield      #7                  // Field messageId:Lorg/apache/activemq/command/MessageId;
       4: areturn

  public void setMessageId(org.apache.activemq.command.MessageId);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #7                  // Field messageId:Lorg/apache/activemq/command/MessageId;
       5: return

  public org.apache.activemq.command.TransactionId getOriginalTransactionId();
    Code:
       0: aload_0
       1: getfield      #10                 // Field originalTransactionId:Lorg/apache/activemq/command/TransactionId;
       4: areturn

  public void setOriginalTransactionId(org.apache.activemq.command.TransactionId);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #10                 // Field originalTransactionId:Lorg/apache/activemq/command/TransactionId;
       5: return

  public java.lang.String getGroupID();
    Code:
       0: aload_0
       1: getfield      #20                 // Field groupID:Ljava/lang/String;
       4: areturn

  public void setGroupID(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #20                 // Field groupID:Ljava/lang/String;
       5: return

  public int getGroupSequence();
    Code:
       0: aload_0
       1: getfield      #22                 // Field groupSequence:I
       4: ireturn

  public void setGroupSequence(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #22                 // Field groupSequence:I
       5: return

  public java.lang.String getCorrelationId();
    Code:
       0: aload_0
       1: getfield      #13                 // Field correlationId:Ljava/lang/String;
       4: areturn

  public void setCorrelationId(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #13                 // Field correlationId:Ljava/lang/String;
       5: return

  public boolean isPersistent();
    Code:
       0: aload_0
       1: getfield      #15                 // Field persistent:Z
       4: ireturn

  public void setPersistent(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #15                 // Field persistent:Z
       5: return

  public long getExpiration();
    Code:
       0: aload_0
       1: getfield      #11                 // Field expiration:J
       4: lreturn

  public void setExpiration(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #11                 // Field expiration:J
       5: return

  public byte getPriority();
    Code:
       0: aload_0
       1: getfield      #18                 // Field priority:B
       4: ireturn

  public void setPriority(byte);
    Code:
       0: iload_1
       1: ifge          12
       4: aload_0
       5: iconst_0
       6: putfield      #18                 // Field priority:B
       9: goto          32
      12: iload_1
      13: bipush        9
      15: if_icmple     27
      18: aload_0
      19: bipush        9
      21: putfield      #18                 // Field priority:B
      24: goto          32
      27: aload_0
      28: iload_1
      29: putfield      #18                 // Field priority:B
      32: return

  public org.apache.activemq.command.ActiveMQDestination getReplyTo();
    Code:
       0: aload_0
       1: getfield      #14                 // Field replyTo:Lorg/apache/activemq/command/ActiveMQDestination;
       4: areturn

  public void setReplyTo(org.apache.activemq.command.ActiveMQDestination);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #14                 // Field replyTo:Lorg/apache/activemq/command/ActiveMQDestination;
       5: return

  public long getTimestamp();
    Code:
       0: aload_0
       1: getfield      #12                 // Field timestamp:J
       4: lreturn

  public void setTimestamp(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #12                 // Field timestamp:J
       5: return

  public java.lang.String getType();
    Code:
       0: aload_0
       1: getfield      #17                 // Field type:Ljava/lang/String;
       4: areturn

  public void setType(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #17                 // Field type:Ljava/lang/String;
       5: return

  public org.apache.activemq.util.ByteSequence getContent();
    Code:
       0: aload_0
       1: getfield      #27                 // Field content:Lorg/apache/activemq/util/ByteSequence;
       4: areturn

  public void setContent(org.apache.activemq.util.ByteSequence);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #27                 // Field content:Lorg/apache/activemq/util/ByteSequence;
       5: return

  public org.apache.activemq.util.ByteSequence getMarshalledProperties();
    Code:
       0: aload_0
       1: getfield      #28                 // Field marshalledProperties:Lorg/apache/activemq/util/ByteSequence;
       4: areturn

  public void setMarshalledProperties(org.apache.activemq.util.ByteSequence);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #28                 // Field marshalledProperties:Lorg/apache/activemq/util/ByteSequence;
       5: return

  public org.apache.activemq.command.DataStructure getDataStructure();
    Code:
       0: aload_0
       1: getfield      #29                 // Field dataStructure:Lorg/apache/activemq/command/DataStructure;
       4: areturn

  public void setDataStructure(org.apache.activemq.command.DataStructure);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #29                 // Field dataStructure:Lorg/apache/activemq/command/DataStructure;
       5: return

  public org.apache.activemq.command.ConsumerId getTargetConsumerId();
    Code:
       0: aload_0
       1: getfield      #63                 // Field targetConsumerId:Lorg/apache/activemq/command/ConsumerId;
       4: areturn

  public void setTargetConsumerId(org.apache.activemq.command.ConsumerId);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #63                 // Field targetConsumerId:Lorg/apache/activemq/command/ConsumerId;
       5: return

  public boolean isExpired();
    Code:
       0: aload_0
       1: invokevirtual #64                 // Method getExpiration:()J
       4: lstore_1
       5: lload_1
       6: lconst_0
       7: lcmp
       8: ifle          23
      11: invokestatic  #65                 // Method java/lang/System.currentTimeMillis:()J
      14: lload_1
      15: lcmp
      16: ifle          23
      19: iconst_1
      20: goto          24
      23: iconst_0
      24: ireturn

  public boolean isAdvisory();
    Code:
       0: aload_0
       1: getfield      #17                 // Field type:Ljava/lang/String;
       4: ifnull        23
       7: aload_0
       8: getfield      #17                 // Field type:Ljava/lang/String;
      11: ldc           #66                 // String Advisory
      13: invokevirtual #67                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      16: ifeq          23
      19: iconst_1
      20: goto          24
      23: iconst_0
      24: ireturn

  public boolean isCompressed();
    Code:
       0: aload_0
       1: getfield      #32                 // Field compressed:Z
       4: ireturn

  public void setCompressed(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #32                 // Field compressed:Z
       5: return

  public boolean isRedelivered();
    Code:
       0: aload_0
       1: getfield      #16                 // Field redeliveryCounter:I
       4: ifle          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public void setRedelivered(boolean);
    Code:
       0: iload_1
       1: ifeq          19
       4: aload_0
       5: invokevirtual #68                 // Method isRedelivered:()Z
       8: ifne          31
      11: aload_0
      12: iconst_1
      13: invokevirtual #69                 // Method setRedeliveryCounter:(I)V
      16: goto          31
      19: aload_0
      20: invokevirtual #68                 // Method isRedelivered:()Z
      23: ifeq          31
      26: aload_0
      27: iconst_0
      28: invokevirtual #69                 // Method setRedeliveryCounter:(I)V
      31: return

  public void incrementRedeliveryCounter();
    Code:
       0: aload_0
       1: dup
       2: getfield      #16                 // Field redeliveryCounter:I
       5: iconst_1
       6: iadd
       7: putfield      #16                 // Field redeliveryCounter:I
      10: return

  public int getRedeliveryCounter();
    Code:
       0: aload_0
       1: getfield      #16                 // Field redeliveryCounter:I
       4: ireturn

  public void setRedeliveryCounter(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #16                 // Field redeliveryCounter:I
       5: return

  public org.apache.activemq.command.BrokerId[] getBrokerPath();
    Code:
       0: aload_0
       1: getfield      #40                 // Field brokerPath:[Lorg/apache/activemq/command/BrokerId;
       4: areturn

  public void setBrokerPath(org.apache.activemq.command.BrokerId[]);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #40                 // Field brokerPath:[Lorg/apache/activemq/command/BrokerId;
       5: return

  public boolean isReadOnlyProperties();
    Code:
       0: aload_0
       1: getfield      #30                 // Field readOnlyProperties:Z
       4: ireturn

  public void setReadOnlyProperties(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #30                 // Field readOnlyProperties:Z
       5: return

  public boolean isReadOnlyBody();
    Code:
       0: aload_0
       1: getfield      #31                 // Field readOnlyBody:Z
       4: ireturn

  public void setReadOnlyBody(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #31                 // Field readOnlyBody:Z
       5: return

  public org.apache.activemq.ActiveMQConnection getConnection();
    Code:
       0: aload_0
       1: getfield      #35                 // Field connection:Lorg/apache/activemq/ActiveMQConnection;
       4: areturn

  public void setConnection(org.apache.activemq.ActiveMQConnection);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #35                 // Field connection:Lorg/apache/activemq/ActiveMQConnection;
       5: return

  public long getArrival();
    Code:
       0: aload_0
       1: getfield      #34                 // Field arrival:J
       4: lreturn

  public void setArrival(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #34                 // Field arrival:J
       5: return

  public java.lang.String getUserID();
    Code:
       0: aload_0
       1: getfield      #21                 // Field userID:Ljava/lang/String;
       4: areturn

  public void setUserID(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #21                 // Field userID:Ljava/lang/String;
       5: return

  public int getReferenceCount();
    Code:
       0: aload_0
       1: getfield      #70                 // Field referenceCount:S
       4: ireturn

  public org.apache.activemq.command.Message getMessageHardRef();
    Code:
       0: aload_0
       1: areturn

  public org.apache.activemq.command.Message getMessage();
    Code:
       0: aload_0
       1: areturn

  public void setRegionDestination(org.apache.activemq.command.Message$MessageDestination);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #36                 // Field regionDestination:Lorg/apache/activemq/command/Message$MessageDestination;
       5: aload_0
       6: getfield      #39                 // Field memoryUsage:Lorg/apache/activemq/usage/MemoryUsage;
       9: ifnonnull     22
      12: aload_0
      13: aload_1
      14: invokeinterface #71,  1           // InterfaceMethod org/apache/activemq/command/Message$MessageDestination.getMemoryUsage:()Lorg/apache/activemq/usage/MemoryUsage;
      19: putfield      #39                 // Field memoryUsage:Lorg/apache/activemq/usage/MemoryUsage;
      22: return

  public org.apache.activemq.command.Message$MessageDestination getRegionDestination();
    Code:
       0: aload_0
       1: getfield      #36                 // Field regionDestination:Lorg/apache/activemq/command/Message$MessageDestination;
       4: areturn

  public org.apache.activemq.usage.MemoryUsage getMemoryUsage();
    Code:
       0: aload_0
       1: getfield      #39                 // Field memoryUsage:Lorg/apache/activemq/usage/MemoryUsage;
       4: areturn

  public void setMemoryUsage(org.apache.activemq.usage.MemoryUsage);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #39                 // Field memoryUsage:Lorg/apache/activemq/usage/MemoryUsage;
       5: return

  public boolean isMarshallAware();
    Code:
       0: iconst_1
       1: ireturn

  public int incrementReferenceCount();
    Code:
       0: aload_0
       1: dup
       2: astore_3
       3: monitorenter
       4: aload_0
       5: dup
       6: getfield      #70                 // Field referenceCount:S
       9: iconst_1
      10: iadd
      11: i2s
      12: dup_x1
      13: putfield      #70                 // Field referenceCount:S
      16: istore_1
      17: aload_0
      18: invokevirtual #72                 // Method getSize:()I
      21: istore_2
      22: aload_3
      23: monitorexit
      24: goto          34
      27: astore        4
      29: aload_3
      30: monitorexit
      31: aload         4
      33: athrow
      34: iload_1
      35: iconst_1
      36: if_icmpne     55
      39: aload_0
      40: invokevirtual #73                 // Method getMemoryUsage:()Lorg/apache/activemq/usage/MemoryUsage;
      43: ifnull        55
      46: aload_0
      47: invokevirtual #73                 // Method getMemoryUsage:()Lorg/apache/activemq/usage/MemoryUsage;
      50: iload_2
      51: i2l
      52: invokevirtual #74                 // Method org/apache/activemq/usage/MemoryUsage.increaseUsage:(J)V
      55: iload_1
      56: ireturn
    Exception table:
       from    to  target type
           4    24    27   any
          27    31    27   any

  public int decrementReferenceCount();
    Code:
       0: aload_0
       1: dup
       2: astore_3
       3: monitorenter
       4: aload_0
       5: dup
       6: getfield      #70                 // Field referenceCount:S
       9: iconst_1
      10: isub
      11: i2s
      12: dup_x1
      13: putfield      #70                 // Field referenceCount:S
      16: istore_1
      17: aload_0
      18: invokevirtual #72                 // Method getSize:()I
      21: istore_2
      22: aload_3
      23: monitorexit
      24: goto          34
      27: astore        4
      29: aload_3
      30: monitorexit
      31: aload         4
      33: athrow
      34: iload_1
      35: ifne          54
      38: aload_0
      39: invokevirtual #73                 // Method getMemoryUsage:()Lorg/apache/activemq/usage/MemoryUsage;
      42: ifnull        54
      45: aload_0
      46: invokevirtual #73                 // Method getMemoryUsage:()Lorg/apache/activemq/usage/MemoryUsage;
      49: iload_2
      50: i2l
      51: invokevirtual #75                 // Method org/apache/activemq/usage/MemoryUsage.decreaseUsage:(J)V
      54: iload_1
      55: ireturn
    Exception table:
       from    to  target type
           4    24    27   any
          27    31    27   any

  public int getSize();
    Code:
       0: aload_0
       1: invokevirtual #76                 // Method getMinimumMessageSize:()I
       4: istore_1
       5: aload_0
       6: getfield      #19                 // Field size:I
       9: iload_1
      10: if_icmplt     20
      13: aload_0
      14: getfield      #19                 // Field size:I
      17: ifne          71
      20: aload_0
      21: iload_1
      22: putfield      #19                 // Field size:I
      25: aload_0
      26: getfield      #28                 // Field marshalledProperties:Lorg/apache/activemq/util/ByteSequence;
      29: ifnull        48
      32: aload_0
      33: dup
      34: getfield      #19                 // Field size:I
      37: aload_0
      38: getfield      #28                 // Field marshalledProperties:Lorg/apache/activemq/util/ByteSequence;
      41: invokevirtual #77                 // Method org/apache/activemq/util/ByteSequence.getLength:()I
      44: iadd
      45: putfield      #19                 // Field size:I
      48: aload_0
      49: getfield      #27                 // Field content:Lorg/apache/activemq/util/ByteSequence;
      52: ifnull        71
      55: aload_0
      56: dup
      57: getfield      #19                 // Field size:I
      60: aload_0
      61: getfield      #27                 // Field content:Lorg/apache/activemq/util/ByteSequence;
      64: invokevirtual #77                 // Method org/apache/activemq/util/ByteSequence.getLength:()I
      67: iadd
      68: putfield      #19                 // Field size:I
      71: aload_0
      72: getfield      #19                 // Field size:I
      75: ireturn

  protected int getMinimumMessageSize();
    Code:
       0: sipush        1024
       3: istore_1
       4: aload_0
       5: getfield      #36                 // Field regionDestination:Lorg/apache/activemq/command/Message$MessageDestination;
       8: astore_2
       9: aload_2
      10: ifnull        20
      13: aload_2
      14: invokeinterface #78,  1           // InterfaceMethod org/apache/activemq/command/Message$MessageDestination.getMinimumMessageSize:()I
      19: istore_1
      20: iload_1
      21: ireturn

  public boolean isRecievedByDFBridge();
    Code:
       0: aload_0
       1: getfield      #33                 // Field recievedByDFBridge:Z
       4: ireturn

  public void setRecievedByDFBridge(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #33                 // Field recievedByDFBridge:Z
       5: return

  public void onMessageRolledBack();
    Code:
       0: aload_0
       1: invokevirtual #79                 // Method incrementRedeliveryCounter:()V
       4: return

  public boolean isDroppable();
    Code:
       0: aload_0
       1: getfield      #80                 // Field droppable:Z
       4: ireturn

  public void setDroppable(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #80                 // Field droppable:Z
       5: return

  public org.apache.activemq.command.BrokerId[] getCluster();
    Code:
       0: aload_0
       1: getfield      #81                 // Field cluster:[Lorg/apache/activemq/command/BrokerId;
       4: areturn

  public void setCluster(org.apache.activemq.command.BrokerId[]);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #81                 // Field cluster:[Lorg/apache/activemq/command/BrokerId;
       5: return

  public boolean isMessage();
    Code:
       0: iconst_1
       1: ireturn

  public long getBrokerInTime();
    Code:
       0: aload_0
       1: getfield      #37                 // Field brokerInTime:J
       4: lreturn

  public void setBrokerInTime(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #37                 // Field brokerInTime:J
       5: return

  public long getBrokerOutTime();
    Code:
       0: aload_0
       1: getfield      #38                 // Field brokerOutTime:J
       4: lreturn

  public void setBrokerOutTime(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #38                 // Field brokerOutTime:J
       5: return

  public boolean isDropped();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isJMSXGroupFirstForConsumer();
    Code:
       0: aload_0
       1: getfield      #41                 // Field jmsXGroupFirstForConsumer:Z
       4: ireturn

  public void setJMSXGroupFirstForConsumer(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #41                 // Field jmsXGroupFirstForConsumer:Z
       5: return

  public void compress() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #82                 // Method isCompressed:()Z
       4: ifne          29
       7: aload_0
       8: invokevirtual #83                 // Method storeContent:()V
      11: aload_0
      12: invokevirtual #82                 // Method isCompressed:()Z
      15: ifne          29
      18: aload_0
      19: invokevirtual #84                 // Method getContent:()Lorg/apache/activemq/util/ByteSequence;
      22: ifnull        29
      25: aload_0
      26: invokevirtual #85                 // Method doCompress:()V
      29: return

  protected void doCompress() throws java.io.IOException;
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #32                 // Field compressed:Z
       5: aload_0
       6: invokevirtual #84                 // Method getContent:()Lorg/apache/activemq/util/ByteSequence;
       9: astore_1
      10: new           #56                 // class org/apache/activemq/util/ByteArrayOutputStream
      13: dup
      14: invokespecial #57                 // Method org/apache/activemq/util/ByteArrayOutputStream."<init>":()V
      17: astore_2
      18: new           #86                 // class java/util/zip/DeflaterOutputStream
      21: dup
      22: aload_2
      23: invokespecial #87                 // Method java/util/zip/DeflaterOutputStream."<init>":(Ljava/io/OutputStream;)V
      26: astore_3
      27: aload_3
      28: aload_1
      29: getfield      #88                 // Field org/apache/activemq/util/ByteSequence.data:[B
      32: aload_1
      33: getfield      #89                 // Field org/apache/activemq/util/ByteSequence.offset:I
      36: aload_1
      37: getfield      #90                 // Field org/apache/activemq/util/ByteSequence.length:I
      40: invokevirtual #91                 // Method java/io/OutputStream.write:([BII)V
      43: aload_3
      44: invokevirtual #92                 // Method java/io/OutputStream.close:()V
      47: aload_0
      48: aload_2
      49: invokevirtual #62                 // Method org/apache/activemq/util/ByteArrayOutputStream.toByteSequence:()Lorg/apache/activemq/util/ByteSequence;
      52: invokevirtual #93                 // Method setContent:(Lorg/apache/activemq/util/ByteSequence;)V
      55: return

  public java.lang.String toString();
    Code:
       0: aload_0
       1: aconst_null
       2: invokevirtual #94                 // Method toString:(Ljava/util/Map;)Ljava/lang/String;
       5: areturn

  public java.lang.String toString(java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_0
       1: invokevirtual #95                 // Method getProperties:()Ljava/util/Map;
       4: pop
       5: goto          9
       8: astore_2
       9: aload_0
      10: aload_1
      11: invokespecial #97                 // Method org/apache/activemq/command/BaseCommand.toString:(Ljava/util/Map;)Ljava/lang/String;
      14: areturn
    Exception table:
       from    to  target type
           0     5     8   Class java/io/IOException
}
