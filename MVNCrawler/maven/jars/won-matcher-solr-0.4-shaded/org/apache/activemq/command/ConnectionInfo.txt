Compiled from "ConnectionInfo.java"
public class org.apache.activemq.command.ConnectionInfo extends org.apache.activemq.command.BaseCommand {
  public static final byte DATA_STRUCTURE_TYPE;

  protected org.apache.activemq.command.ConnectionId connectionId;

  protected java.lang.String clientId;

  protected java.lang.String clientIp;

  protected java.lang.String userName;

  protected java.lang.String password;

  protected org.apache.activemq.command.BrokerId[] brokerPath;

  protected boolean brokerMasterConnector;

  protected boolean manageable;

  protected boolean clientMaster;

  protected boolean faultTolerant;

  protected boolean failoverReconnect;

  protected transient java.lang.Object transportContext;

  public org.apache.activemq.command.ConnectionInfo();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/apache/activemq/command/BaseCommand."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #2                  // Field clientMaster:Z
       9: aload_0
      10: iconst_0
      11: putfield      #3                  // Field faultTolerant:Z
      14: return

  public org.apache.activemq.command.ConnectionInfo(org.apache.activemq.command.ConnectionId);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/apache/activemq/command/BaseCommand."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #2                  // Field clientMaster:Z
       9: aload_0
      10: iconst_0
      11: putfield      #3                  // Field faultTolerant:Z
      14: aload_0
      15: aload_1
      16: putfield      #4                  // Field connectionId:Lorg/apache/activemq/command/ConnectionId;
      19: return

  public byte getDataStructureType();
    Code:
       0: iconst_3
       1: ireturn

  public org.apache.activemq.command.ConnectionInfo copy();
    Code:
       0: new           #5                  // class org/apache/activemq/command/ConnectionInfo
       3: dup
       4: invokespecial #6                  // Method "<init>":()V
       7: astore_1
       8: aload_0
       9: aload_1
      10: invokespecial #7                  // Method copy:(Lorg/apache/activemq/command/ConnectionInfo;)V
      13: aload_1
      14: areturn

  private void copy(org.apache.activemq.command.ConnectionInfo);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #8                  // Method org/apache/activemq/command/BaseCommand.copy:(Lorg/apache/activemq/command/BaseCommand;)V
       5: aload_1
       6: aload_0
       7: getfield      #4                  // Field connectionId:Lorg/apache/activemq/command/ConnectionId;
      10: putfield      #4                  // Field connectionId:Lorg/apache/activemq/command/ConnectionId;
      13: aload_1
      14: aload_0
      15: getfield      #9                  // Field clientId:Ljava/lang/String;
      18: putfield      #9                  // Field clientId:Ljava/lang/String;
      21: aload_1
      22: aload_0
      23: getfield      #10                 // Field userName:Ljava/lang/String;
      26: putfield      #10                 // Field userName:Ljava/lang/String;
      29: aload_1
      30: aload_0
      31: getfield      #11                 // Field password:Ljava/lang/String;
      34: putfield      #11                 // Field password:Ljava/lang/String;
      37: aload_1
      38: aload_0
      39: getfield      #12                 // Field brokerPath:[Lorg/apache/activemq/command/BrokerId;
      42: putfield      #12                 // Field brokerPath:[Lorg/apache/activemq/command/BrokerId;
      45: aload_1
      46: aload_0
      47: getfield      #13                 // Field brokerMasterConnector:Z
      50: putfield      #13                 // Field brokerMasterConnector:Z
      53: aload_1
      54: aload_0
      55: getfield      #14                 // Field manageable:Z
      58: putfield      #14                 // Field manageable:Z
      61: aload_1
      62: aload_0
      63: getfield      #2                  // Field clientMaster:Z
      66: putfield      #2                  // Field clientMaster:Z
      69: aload_1
      70: aload_0
      71: getfield      #15                 // Field transportContext:Ljava/lang/Object;
      74: putfield      #15                 // Field transportContext:Ljava/lang/Object;
      77: aload_1
      78: aload_0
      79: getfield      #3                  // Field faultTolerant:Z
      82: putfield      #3                  // Field faultTolerant:Z
      85: aload_1
      86: aload_0
      87: getfield      #16                 // Field clientIp:Ljava/lang/String;
      90: putfield      #16                 // Field clientIp:Ljava/lang/String;
      93: return

  public org.apache.activemq.command.ConnectionId getConnectionId();
    Code:
       0: aload_0
       1: getfield      #4                  // Field connectionId:Lorg/apache/activemq/command/ConnectionId;
       4: areturn

  public void setConnectionId(org.apache.activemq.command.ConnectionId);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #4                  // Field connectionId:Lorg/apache/activemq/command/ConnectionId;
       5: return

  public java.lang.String getClientId();
    Code:
       0: aload_0
       1: getfield      #9                  // Field clientId:Ljava/lang/String;
       4: areturn

  public void setClientId(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #9                  // Field clientId:Ljava/lang/String;
       5: return

  public org.apache.activemq.command.RemoveInfo createRemoveCommand();
    Code:
       0: new           #17                 // class org/apache/activemq/command/RemoveInfo
       3: dup
       4: aload_0
       5: invokevirtual #18                 // Method getConnectionId:()Lorg/apache/activemq/command/ConnectionId;
       8: invokespecial #19                 // Method org/apache/activemq/command/RemoveInfo."<init>":(Lorg/apache/activemq/command/DataStructure;)V
      11: astore_1
      12: aload_1
      13: aload_0
      14: invokevirtual #20                 // Method isResponseRequired:()Z
      17: invokevirtual #21                 // Method org/apache/activemq/command/RemoveInfo.setResponseRequired:(Z)V
      20: aload_1
      21: areturn

  public java.lang.String getPassword();
    Code:
       0: aload_0
       1: getfield      #11                 // Field password:Ljava/lang/String;
       4: areturn

  public void setPassword(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #11                 // Field password:Ljava/lang/String;
       5: return

  public java.lang.String getUserName();
    Code:
       0: aload_0
       1: getfield      #10                 // Field userName:Ljava/lang/String;
       4: areturn

  public void setUserName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #10                 // Field userName:Ljava/lang/String;
       5: return

  public org.apache.activemq.command.BrokerId[] getBrokerPath();
    Code:
       0: aload_0
       1: getfield      #12                 // Field brokerPath:[Lorg/apache/activemq/command/BrokerId;
       4: areturn

  public void setBrokerPath(org.apache.activemq.command.BrokerId[]);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #12                 // Field brokerPath:[Lorg/apache/activemq/command/BrokerId;
       5: return

  public org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor) throws java.lang.Exception;
    Code:
       0: aload_1
       1: aload_0
       2: invokeinterface #22,  2           // InterfaceMethod org/apache/activemq/state/CommandVisitor.processAddConnection:(Lorg/apache/activemq/command/ConnectionInfo;)Lorg/apache/activemq/command/Response;
       7: areturn

  public boolean isBrokerMasterConnector();
    Code:
       0: aload_0
       1: getfield      #13                 // Field brokerMasterConnector:Z
       4: ireturn

  public void setBrokerMasterConnector(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #13                 // Field brokerMasterConnector:Z
       5: return

  public boolean isManageable();
    Code:
       0: aload_0
       1: getfield      #14                 // Field manageable:Z
       4: ireturn

  public void setManageable(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #14                 // Field manageable:Z
       5: return

  public java.lang.Object getTransportContext();
    Code:
       0: aload_0
       1: getfield      #15                 // Field transportContext:Ljava/lang/Object;
       4: areturn

  public void setTransportContext(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #15                 // Field transportContext:Ljava/lang/Object;
       5: return

  public boolean isClientMaster();
    Code:
       0: aload_0
       1: getfield      #2                  // Field clientMaster:Z
       4: ireturn

  public void setClientMaster(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #2                  // Field clientMaster:Z
       5: return

  public boolean isFaultTolerant();
    Code:
       0: aload_0
       1: getfield      #3                  // Field faultTolerant:Z
       4: ireturn

  public void setFaultTolerant(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #3                  // Field faultTolerant:Z
       5: return

  public boolean isFailoverReconnect();
    Code:
       0: aload_0
       1: getfield      #23                 // Field failoverReconnect:Z
       4: ireturn

  public void setFailoverReconnect(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #23                 // Field failoverReconnect:Z
       5: return

  public java.lang.String getClientIp();
    Code:
       0: aload_0
       1: getfield      #16                 // Field clientIp:Ljava/lang/String;
       4: areturn

  public void setClientIp(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #16                 // Field clientIp:Ljava/lang/String;
       5: return
}
