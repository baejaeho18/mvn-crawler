Compiled from "ActiveMQConnection.java"
public class org.apache.activemq.ActiveMQConnection implements javax.jms.Connection,javax.jms.TopicConnection,javax.jms.QueueConnection,org.apache.activemq.management.StatsCapable,org.apache.activemq.Closeable,org.apache.activemq.StreamConnection,org.apache.activemq.transport.TransportListener,org.apache.activemq.EnhancedConnection {
  public static final java.lang.String DEFAULT_USER;

  public static final java.lang.String DEFAULT_PASSWORD;

  public static final java.lang.String DEFAULT_BROKER_URL;

  public static int DEFAULT_THREAD_POOL_SIZE;

  private static final org.slf4j.Logger LOG;

  public final java.util.concurrent.ConcurrentHashMap<org.apache.activemq.command.ActiveMQTempDestination, org.apache.activemq.command.ActiveMQTempDestination> activeTempDestinations;

  protected boolean dispatchAsync;

  protected boolean alwaysSessionAsync;

  private org.apache.activemq.thread.TaskRunnerFactory sessionTaskRunner;

  private final java.util.concurrent.ThreadPoolExecutor executor;

  private final org.apache.activemq.command.ConnectionInfo info;

  private javax.jms.ExceptionListener exceptionListener;

  private org.apache.activemq.ClientInternalExceptionListener clientInternalExceptionListener;

  private boolean clientIDSet;

  private boolean isConnectionInfoSentToBroker;

  private boolean userSpecifiedClientID;

  private org.apache.activemq.ActiveMQPrefetchPolicy prefetchPolicy;

  private org.apache.activemq.blob.BlobTransferPolicy blobTransferPolicy;

  private org.apache.activemq.broker.region.policy.RedeliveryPolicyMap redeliveryPolicyMap;

  private org.apache.activemq.MessageTransformer transformer;

  private boolean disableTimeStampsByDefault;

  private boolean optimizedMessageDispatch;

  private boolean copyMessageOnSend;

  private boolean useCompression;

  private boolean objectMessageSerializationDefered;

  private boolean useAsyncSend;

  private boolean optimizeAcknowledge;

  private long optimizeAcknowledgeTimeOut;

  private long optimizedAckScheduledAckInterval;

  private boolean nestedMapAndListEnabled;

  private boolean useRetroactiveConsumer;

  private boolean exclusiveConsumer;

  private boolean alwaysSyncSend;

  private int closeTimeout;

  private boolean watchTopicAdvisories;

  private long warnAboutUnstartedConnectionTimeout;

  private int sendTimeout;

  private boolean sendAcksAsync;

  private boolean checkForDuplicates;

  private boolean queueOnlyConnection;

  private final org.apache.activemq.transport.Transport transport;

  private final org.apache.activemq.util.IdGenerator clientIdGenerator;

  private final org.apache.activemq.management.JMSStatsImpl factoryStats;

  private final org.apache.activemq.management.JMSConnectionStatsImpl stats;

  private final java.util.concurrent.atomic.AtomicBoolean started;

  private final java.util.concurrent.atomic.AtomicBoolean closing;

  private final java.util.concurrent.atomic.AtomicBoolean closed;

  private final java.util.concurrent.atomic.AtomicBoolean transportFailed;

  private final java.util.concurrent.CopyOnWriteArrayList<org.apache.activemq.ActiveMQSession> sessions;

  private final java.util.concurrent.CopyOnWriteArrayList<org.apache.activemq.ActiveMQConnectionConsumer> connectionConsumers;

  private final java.util.concurrent.CopyOnWriteArrayList<org.apache.activemq.transport.TransportListener> transportListeners;

  private final java.util.concurrent.CopyOnWriteArrayList<org.apache.activemq.ActiveMQInputStream> inputStreams;

  private final java.util.concurrent.CopyOnWriteArrayList<org.apache.activemq.ActiveMQOutputStream> outputStreams;

  private final java.util.concurrent.ConcurrentHashMap<org.apache.activemq.command.ConsumerId, org.apache.activemq.ActiveMQDispatcher> dispatchers;

  private final java.util.concurrent.ConcurrentHashMap<org.apache.activemq.command.ProducerId, org.apache.activemq.ActiveMQMessageProducer> producers;

  private final org.apache.activemq.util.LongSequenceGenerator sessionIdGenerator;

  private final org.apache.activemq.command.SessionId connectionSessionId;

  private final org.apache.activemq.util.LongSequenceGenerator consumerIdGenerator;

  private final org.apache.activemq.util.LongSequenceGenerator producerIdGenerator;

  private final org.apache.activemq.util.LongSequenceGenerator tempDestinationIdGenerator;

  private final org.apache.activemq.util.LongSequenceGenerator localTransactionIdGenerator;

  private org.apache.activemq.AdvisoryConsumer advisoryConsumer;

  private final java.util.concurrent.CountDownLatch brokerInfoReceived;

  private org.apache.activemq.command.BrokerInfo brokerInfo;

  private java.io.IOException firstFailureError;

  private int producerWindowSize;

  private final java.util.concurrent.atomic.AtomicInteger protocolVersion;

  private final long timeCreated;

  private final org.apache.activemq.ConnectionAudit connectionAudit;

  private org.apache.activemq.advisory.DestinationSource destinationSource;

  private final java.lang.Object ensureConnectionInfoSentMutex;

  private boolean useDedicatedTaskRunner;

  protected java.util.concurrent.atomic.AtomicInteger transportInterruptionProcessingComplete;

  private long consumerFailoverRedeliveryWaitPeriod;

  private org.apache.activemq.thread.Scheduler scheduler;

  private boolean messagePrioritySupported;

  private boolean transactedIndividualAck;

  private boolean nonBlockingRedelivery;

  private boolean rmIdFromConnectionId;

  private int maxThreadPoolSize;

  private java.util.concurrent.RejectedExecutionHandler rejectedTaskHandler;

  protected org.apache.activemq.ActiveMQConnection(org.apache.activemq.transport.Transport, org.apache.activemq.util.IdGenerator, org.apache.activemq.util.IdGenerator, org.apache.activemq.management.JMSStatsImpl) throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokespecial #13                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #14                 // class java/util/concurrent/ConcurrentHashMap
       8: dup
       9: invokespecial #15                 // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      12: putfield      #16                 // Field activeTempDestinations:Ljava/util/concurrent/ConcurrentHashMap;
      15: aload_0
      16: iconst_1
      17: putfield      #17                 // Field dispatchAsync:Z
      20: aload_0
      21: iconst_1
      22: putfield      #18                 // Field alwaysSessionAsync:Z
      25: aload_0
      26: new           #19                 // class org/apache/activemq/ActiveMQPrefetchPolicy
      29: dup
      30: invokespecial #20                 // Method org/apache/activemq/ActiveMQPrefetchPolicy."<init>":()V
      33: putfield      #21                 // Field prefetchPolicy:Lorg/apache/activemq/ActiveMQPrefetchPolicy;
      36: aload_0
      37: iconst_1
      38: putfield      #22                 // Field optimizedMessageDispatch:Z
      41: aload_0
      42: iconst_1
      43: putfield      #23                 // Field copyMessageOnSend:Z
      46: aload_0
      47: lconst_0
      48: putfield      #24                 // Field optimizeAcknowledgeTimeOut:J
      51: aload_0
      52: lconst_0
      53: putfield      #25                 // Field optimizedAckScheduledAckInterval:J
      56: aload_0
      57: iconst_1
      58: putfield      #26                 // Field nestedMapAndListEnabled:Z
      61: aload_0
      62: sipush        15000
      65: putfield      #27                 // Field closeTimeout:I
      68: aload_0
      69: iconst_1
      70: putfield      #28                 // Field watchTopicAdvisories:Z
      73: aload_0
      74: ldc2_w        #29                 // long 500l
      77: putfield      #31                 // Field warnAboutUnstartedConnectionTimeout:J
      80: aload_0
      81: iconst_0
      82: putfield      #32                 // Field sendTimeout:I
      85: aload_0
      86: iconst_1
      87: putfield      #33                 // Field sendAcksAsync:Z
      90: aload_0
      91: iconst_1
      92: putfield      #34                 // Field checkForDuplicates:Z
      95: aload_0
      96: iconst_0
      97: putfield      #35                 // Field queueOnlyConnection:Z
     100: aload_0
     101: new           #36                 // class java/util/concurrent/atomic/AtomicBoolean
     104: dup
     105: iconst_0
     106: invokespecial #37                 // Method java/util/concurrent/atomic/AtomicBoolean."<init>":(Z)V
     109: putfield      #38                 // Field started:Ljava/util/concurrent/atomic/AtomicBoolean;
     112: aload_0
     113: new           #36                 // class java/util/concurrent/atomic/AtomicBoolean
     116: dup
     117: iconst_0
     118: invokespecial #37                 // Method java/util/concurrent/atomic/AtomicBoolean."<init>":(Z)V
     121: putfield      #12                 // Field closing:Ljava/util/concurrent/atomic/AtomicBoolean;
     124: aload_0
     125: new           #36                 // class java/util/concurrent/atomic/AtomicBoolean
     128: dup
     129: iconst_0
     130: invokespecial #37                 // Method java/util/concurrent/atomic/AtomicBoolean."<init>":(Z)V
     133: putfield      #39                 // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;
     136: aload_0
     137: new           #36                 // class java/util/concurrent/atomic/AtomicBoolean
     140: dup
     141: iconst_0
     142: invokespecial #37                 // Method java/util/concurrent/atomic/AtomicBoolean."<init>":(Z)V
     145: putfield      #40                 // Field transportFailed:Ljava/util/concurrent/atomic/AtomicBoolean;
     148: aload_0
     149: new           #41                 // class java/util/concurrent/CopyOnWriteArrayList
     152: dup
     153: invokespecial #42                 // Method java/util/concurrent/CopyOnWriteArrayList."<init>":()V
     156: putfield      #43                 // Field sessions:Ljava/util/concurrent/CopyOnWriteArrayList;
     159: aload_0
     160: new           #41                 // class java/util/concurrent/CopyOnWriteArrayList
     163: dup
     164: invokespecial #42                 // Method java/util/concurrent/CopyOnWriteArrayList."<init>":()V
     167: putfield      #44                 // Field connectionConsumers:Ljava/util/concurrent/CopyOnWriteArrayList;
     170: aload_0
     171: new           #41                 // class java/util/concurrent/CopyOnWriteArrayList
     174: dup
     175: invokespecial #42                 // Method java/util/concurrent/CopyOnWriteArrayList."<init>":()V
     178: putfield      #1                  // Field transportListeners:Ljava/util/concurrent/CopyOnWriteArrayList;
     181: aload_0
     182: new           #41                 // class java/util/concurrent/CopyOnWriteArrayList
     185: dup
     186: invokespecial #42                 // Method java/util/concurrent/CopyOnWriteArrayList."<init>":()V
     189: putfield      #45                 // Field inputStreams:Ljava/util/concurrent/CopyOnWriteArrayList;
     192: aload_0
     193: new           #41                 // class java/util/concurrent/CopyOnWriteArrayList
     196: dup
     197: invokespecial #42                 // Method java/util/concurrent/CopyOnWriteArrayList."<init>":()V
     200: putfield      #46                 // Field outputStreams:Ljava/util/concurrent/CopyOnWriteArrayList;
     203: aload_0
     204: new           #14                 // class java/util/concurrent/ConcurrentHashMap
     207: dup
     208: invokespecial #15                 // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
     211: putfield      #9                  // Field dispatchers:Ljava/util/concurrent/ConcurrentHashMap;
     214: aload_0
     215: new           #14                 // class java/util/concurrent/ConcurrentHashMap
     218: dup
     219: invokespecial #15                 // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
     222: putfield      #8                  // Field producers:Ljava/util/concurrent/ConcurrentHashMap;
     225: aload_0
     226: new           #47                 // class org/apache/activemq/util/LongSequenceGenerator
     229: dup
     230: invokespecial #48                 // Method org/apache/activemq/util/LongSequenceGenerator."<init>":()V
     233: putfield      #49                 // Field sessionIdGenerator:Lorg/apache/activemq/util/LongSequenceGenerator;
     236: aload_0
     237: new           #47                 // class org/apache/activemq/util/LongSequenceGenerator
     240: dup
     241: invokespecial #48                 // Method org/apache/activemq/util/LongSequenceGenerator."<init>":()V
     244: putfield      #50                 // Field consumerIdGenerator:Lorg/apache/activemq/util/LongSequenceGenerator;
     247: aload_0
     248: new           #47                 // class org/apache/activemq/util/LongSequenceGenerator
     251: dup
     252: invokespecial #48                 // Method org/apache/activemq/util/LongSequenceGenerator."<init>":()V
     255: putfield      #51                 // Field producerIdGenerator:Lorg/apache/activemq/util/LongSequenceGenerator;
     258: aload_0
     259: new           #47                 // class org/apache/activemq/util/LongSequenceGenerator
     262: dup
     263: invokespecial #48                 // Method org/apache/activemq/util/LongSequenceGenerator."<init>":()V
     266: putfield      #52                 // Field tempDestinationIdGenerator:Lorg/apache/activemq/util/LongSequenceGenerator;
     269: aload_0
     270: new           #47                 // class org/apache/activemq/util/LongSequenceGenerator
     273: dup
     274: invokespecial #48                 // Method org/apache/activemq/util/LongSequenceGenerator."<init>":()V
     277: putfield      #53                 // Field localTransactionIdGenerator:Lorg/apache/activemq/util/LongSequenceGenerator;
     280: aload_0
     281: new           #54                 // class java/util/concurrent/CountDownLatch
     284: dup
     285: iconst_1
     286: invokespecial #55                 // Method java/util/concurrent/CountDownLatch."<init>":(I)V
     289: putfield      #6                  // Field brokerInfoReceived:Ljava/util/concurrent/CountDownLatch;
     292: aload_0
     293: iconst_0
     294: putfield      #56                 // Field producerWindowSize:I
     297: aload_0
     298: new           #57                 // class java/util/concurrent/atomic/AtomicInteger
     301: dup
     302: bipush        10
     304: invokespecial #58                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
     307: putfield      #59                 // Field protocolVersion:Ljava/util/concurrent/atomic/AtomicInteger;
     310: aload_0
     311: new           #60                 // class org/apache/activemq/ConnectionAudit
     314: dup
     315: invokespecial #61                 // Method org/apache/activemq/ConnectionAudit."<init>":()V
     318: putfield      #62                 // Field connectionAudit:Lorg/apache/activemq/ConnectionAudit;
     321: aload_0
     322: new           #63                 // class java/lang/Object
     325: dup
     326: invokespecial #13                 // Method java/lang/Object."<init>":()V
     329: putfield      #64                 // Field ensureConnectionInfoSentMutex:Ljava/lang/Object;
     332: aload_0
     333: new           #57                 // class java/util/concurrent/atomic/AtomicInteger
     336: dup
     337: iconst_0
     338: invokespecial #58                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
     341: putfield      #65                 // Field transportInterruptionProcessingComplete:Ljava/util/concurrent/atomic/AtomicInteger;
     344: aload_0
     345: iconst_1
     346: putfield      #66                 // Field messagePrioritySupported:Z
     349: aload_0
     350: iconst_0
     351: putfield      #67                 // Field transactedIndividualAck:Z
     354: aload_0
     355: iconst_0
     356: putfield      #68                 // Field nonBlockingRedelivery:Z
     359: aload_0
     360: iconst_0
     361: putfield      #69                 // Field rmIdFromConnectionId:Z
     364: aload_0
     365: getstatic     #70                 // Field DEFAULT_THREAD_POOL_SIZE:I
     368: putfield      #71                 // Field maxThreadPoolSize:I
     371: aload_0
     372: aconst_null
     373: putfield      #72                 // Field rejectedTaskHandler:Ljava/util/concurrent/RejectedExecutionHandler;
     376: aload_0
     377: aload_1
     378: putfield      #10                 // Field transport:Lorg/apache/activemq/transport/Transport;
     381: aload_0
     382: aload_2
     383: putfield      #73                 // Field clientIdGenerator:Lorg/apache/activemq/util/IdGenerator;
     386: aload_0
     387: aload         4
     389: putfield      #74                 // Field factoryStats:Lorg/apache/activemq/management/JMSStatsImpl;
     392: aload_0
     393: new           #75                 // class java/util/concurrent/ThreadPoolExecutor
     396: dup
     397: iconst_1
     398: iconst_1
     399: ldc2_w        #76                 // long 5l
     402: getstatic     #78                 // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
     405: new           #79                 // class java/util/concurrent/LinkedBlockingQueue
     408: dup
     409: invokespecial #80                 // Method java/util/concurrent/LinkedBlockingQueue."<init>":()V
     412: new           #81                 // class org/apache/activemq/ActiveMQConnection$1
     415: dup
     416: aload_0
     417: aload_1
     418: invokespecial #82                 // Method org/apache/activemq/ActiveMQConnection$1."<init>":(Lorg/apache/activemq/ActiveMQConnection;Lorg/apache/activemq/transport/Transport;)V
     421: invokespecial #83                 // Method java/util/concurrent/ThreadPoolExecutor."<init>":(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;)V
     424: putfield      #4                  // Field executor:Ljava/util/concurrent/ThreadPoolExecutor;
     427: aload_3
     428: invokevirtual #84                 // Method org/apache/activemq/util/IdGenerator.generateId:()Ljava/lang/String;
     431: astore        5
     433: aload_0
     434: new           #85                 // class org/apache/activemq/command/ConnectionInfo
     437: dup
     438: new           #86                 // class org/apache/activemq/command/ConnectionId
     441: dup
     442: aload         5
     444: invokespecial #87                 // Method org/apache/activemq/command/ConnectionId."<init>":(Ljava/lang/String;)V
     447: invokespecial #88                 // Method org/apache/activemq/command/ConnectionInfo."<init>":(Lorg/apache/activemq/command/ConnectionId;)V
     450: putfield      #89                 // Field info:Lorg/apache/activemq/command/ConnectionInfo;
     453: aload_0
     454: getfield      #89                 // Field info:Lorg/apache/activemq/command/ConnectionInfo;
     457: iconst_1
     458: invokevirtual #90                 // Method org/apache/activemq/command/ConnectionInfo.setManageable:(Z)V
     461: aload_0
     462: getfield      #89                 // Field info:Lorg/apache/activemq/command/ConnectionInfo;
     465: aload_1
     466: invokeinterface #91,  1           // InterfaceMethod org/apache/activemq/transport/Transport.isFaultTolerant:()Z
     471: invokevirtual #92                 // Method org/apache/activemq/command/ConnectionInfo.setFaultTolerant:(Z)V
     474: aload_0
     475: new           #93                 // class org/apache/activemq/command/SessionId
     478: dup
     479: aload_0
     480: getfield      #89                 // Field info:Lorg/apache/activemq/command/ConnectionInfo;
     483: invokevirtual #94                 // Method org/apache/activemq/command/ConnectionInfo.getConnectionId:()Lorg/apache/activemq/command/ConnectionId;
     486: ldc2_w        #95                 // long -1l
     489: invokespecial #97                 // Method org/apache/activemq/command/SessionId."<init>":(Lorg/apache/activemq/command/ConnectionId;J)V
     492: putfield      #98                 // Field connectionSessionId:Lorg/apache/activemq/command/SessionId;
     495: aload_0
     496: getfield      #10                 // Field transport:Lorg/apache/activemq/transport/Transport;
     499: aload_0
     500: invokeinterface #99,  2           // InterfaceMethod org/apache/activemq/transport/Transport.setTransportListener:(Lorg/apache/activemq/transport/TransportListener;)V
     505: aload_0
     506: new           #100                // class org/apache/activemq/management/JMSConnectionStatsImpl
     509: dup
     510: aload_0
     511: getfield      #43                 // Field sessions:Ljava/util/concurrent/CopyOnWriteArrayList;
     514: aload_0
     515: instanceof    #101                // class javax/jms/XAConnection
     518: invokespecial #102                // Method org/apache/activemq/management/JMSConnectionStatsImpl."<init>":(Ljava/util/List;Z)V
     521: putfield      #103                // Field stats:Lorg/apache/activemq/management/JMSConnectionStatsImpl;
     524: aload_0
     525: getfield      #74                 // Field factoryStats:Lorg/apache/activemq/management/JMSStatsImpl;
     528: aload_0
     529: invokevirtual #104                // Method org/apache/activemq/management/JMSStatsImpl.addConnection:(Lorg/apache/activemq/ActiveMQConnection;)V
     532: aload_0
     533: invokestatic  #105                // Method java/lang/System.currentTimeMillis:()J
     536: putfield      #106                // Field timeCreated:J
     539: aload_0
     540: getfield      #62                 // Field connectionAudit:Lorg/apache/activemq/ConnectionAudit;
     543: aload_1
     544: invokeinterface #91,  1           // InterfaceMethod org/apache/activemq/transport/Transport.isFaultTolerant:()Z
     549: invokevirtual #107                // Method org/apache/activemq/ConnectionAudit.setCheckForDuplicates:(Z)V
     552: return

  protected void setUserName(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #89                 // Field info:Lorg/apache/activemq/command/ConnectionInfo;
       4: aload_1
       5: invokevirtual #108                // Method org/apache/activemq/command/ConnectionInfo.setUserName:(Ljava/lang/String;)V
       8: return

  protected void setPassword(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #89                 // Field info:Lorg/apache/activemq/command/ConnectionInfo;
       4: aload_1
       5: invokevirtual #109                // Method org/apache/activemq/command/ConnectionInfo.setPassword:(Ljava/lang/String;)V
       8: return

  public static org.apache.activemq.ActiveMQConnection makeConnection() throws javax.jms.JMSException;
    Code:
       0: new           #110                // class org/apache/activemq/ActiveMQConnectionFactory
       3: dup
       4: invokespecial #111                // Method org/apache/activemq/ActiveMQConnectionFactory."<init>":()V
       7: astore_0
       8: aload_0
       9: invokevirtual #112                // Method org/apache/activemq/ActiveMQConnectionFactory.createConnection:()Ljavax/jms/Connection;
      12: checkcast     #113                // class org/apache/activemq/ActiveMQConnection
      15: areturn

  public static org.apache.activemq.ActiveMQConnection makeConnection(java.lang.String) throws javax.jms.JMSException, java.net.URISyntaxException;
    Code:
       0: new           #110                // class org/apache/activemq/ActiveMQConnectionFactory
       3: dup
       4: aload_0
       5: invokespecial #114                // Method org/apache/activemq/ActiveMQConnectionFactory."<init>":(Ljava/lang/String;)V
       8: astore_1
       9: aload_1
      10: invokevirtual #112                // Method org/apache/activemq/ActiveMQConnectionFactory.createConnection:()Ljavax/jms/Connection;
      13: checkcast     #113                // class org/apache/activemq/ActiveMQConnection
      16: areturn

  public static org.apache.activemq.ActiveMQConnection makeConnection(java.lang.String, java.lang.String, java.lang.String) throws javax.jms.JMSException, java.net.URISyntaxException;
    Code:
       0: new           #110                // class org/apache/activemq/ActiveMQConnectionFactory
       3: dup
       4: aload_0
       5: aload_1
       6: new           #115                // class java/net/URI
       9: dup
      10: aload_2
      11: invokespecial #116                // Method java/net/URI."<init>":(Ljava/lang/String;)V
      14: invokespecial #117                // Method org/apache/activemq/ActiveMQConnectionFactory."<init>":(Ljava/lang/String;Ljava/lang/String;Ljava/net/URI;)V
      17: astore_3
      18: aload_3
      19: invokevirtual #112                // Method org/apache/activemq/ActiveMQConnectionFactory.createConnection:()Ljavax/jms/Connection;
      22: checkcast     #113                // class org/apache/activemq/ActiveMQConnection
      25: areturn

  public org.apache.activemq.management.JMSConnectionStatsImpl getConnectionStats();
    Code:
       0: aload_0
       1: getfield      #103                // Field stats:Lorg/apache/activemq/management/JMSConnectionStatsImpl;
       4: areturn

  public javax.jms.Session createSession(boolean, int) throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: invokevirtual #118                // Method checkClosedOrFailed:()V
       4: aload_0
       5: invokevirtual #119                // Method ensureConnectionInfoSent:()V
       8: iload_1
       9: ifne          72
      12: iload_2
      13: ifne          26
      16: new           #120                // class javax/jms/JMSException
      19: dup
      20: ldc           #121                // String acknowledgeMode SESSION_TRANSACTED cannot be used for an non-transacted Session
      22: invokespecial #122                // Method javax/jms/JMSException."<init>":(Ljava/lang/String;)V
      25: athrow
      26: iload_2
      27: iflt          35
      30: iload_2
      31: iconst_4
      32: if_icmple     72
      35: new           #120                // class javax/jms/JMSException
      38: dup
      39: new           #123                // class java/lang/StringBuilder
      42: dup
      43: invokespecial #124                // Method java/lang/StringBuilder."<init>":()V
      46: ldc           #125                // String invalid acknowledgeMode:
      48: invokevirtual #126                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      51: iload_2
      52: invokevirtual #127                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      55: ldc           #128                // String . Valid values are Session.AUTO_ACKNOWLEDGE (1),
      57: invokevirtual #126                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      60: ldc           #129                // String Session.CLIENT_ACKNOWLEDGE (2), Session.DUPS_OK_ACKNOWLEDGE (3), ActiveMQSession.INDIVIDUAL_ACKNOWLEDGE (4) or for transacted sessions Session.SESSION_TRANSACTED (0)
      62: invokevirtual #126                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      65: invokevirtual #130                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      68: invokespecial #122                // Method javax/jms/JMSException."<init>":(Ljava/lang/String;)V
      71: athrow
      72: new           #131                // class org/apache/activemq/ActiveMQSession
      75: dup
      76: aload_0
      77: aload_0
      78: invokevirtual #132                // Method getNextSessionId:()Lorg/apache/activemq/command/SessionId;
      81: iload_1
      82: ifeq          89
      85: iconst_0
      86: goto          98
      89: iload_2
      90: ifne          97
      93: iconst_1
      94: goto          98
      97: iload_2
      98: aload_0
      99: invokevirtual #133                // Method isDispatchAsync:()Z
     102: aload_0
     103: invokevirtual #134                // Method isAlwaysSessionAsync:()Z
     106: invokespecial #135                // Method org/apache/activemq/ActiveMQSession."<init>":(Lorg/apache/activemq/ActiveMQConnection;Lorg/apache/activemq/command/SessionId;IZZ)V
     109: areturn

  protected org.apache.activemq.command.SessionId getNextSessionId();
    Code:
       0: new           #93                 // class org/apache/activemq/command/SessionId
       3: dup
       4: aload_0
       5: getfield      #89                 // Field info:Lorg/apache/activemq/command/ConnectionInfo;
       8: invokevirtual #94                 // Method org/apache/activemq/command/ConnectionInfo.getConnectionId:()Lorg/apache/activemq/command/ConnectionId;
      11: aload_0
      12: getfield      #49                 // Field sessionIdGenerator:Lorg/apache/activemq/util/LongSequenceGenerator;
      15: invokevirtual #136                // Method org/apache/activemq/util/LongSequenceGenerator.getNextSequenceId:()J
      18: invokespecial #97                 // Method org/apache/activemq/command/SessionId."<init>":(Lorg/apache/activemq/command/ConnectionId;J)V
      21: areturn

  public java.lang.String getClientID() throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: invokevirtual #118                // Method checkClosedOrFailed:()V
       4: aload_0
       5: getfield      #89                 // Field info:Lorg/apache/activemq/command/ConnectionInfo;
       8: invokevirtual #137                // Method org/apache/activemq/command/ConnectionInfo.getClientId:()Ljava/lang/String;
      11: areturn

  public void setClientID(java.lang.String) throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: invokevirtual #118                // Method checkClosedOrFailed:()V
       4: aload_0
       5: getfield      #138                // Field clientIDSet:Z
       8: ifeq          21
      11: new           #139                // class javax/jms/IllegalStateException
      14: dup
      15: ldc           #140                // String The clientID has already been set
      17: invokespecial #141                // Method javax/jms/IllegalStateException."<init>":(Ljava/lang/String;)V
      20: athrow
      21: aload_0
      22: getfield      #142                // Field isConnectionInfoSentToBroker:Z
      25: ifeq          38
      28: new           #139                // class javax/jms/IllegalStateException
      31: dup
      32: ldc           #143                // String Setting clientID on a used Connection is not allowed
      34: invokespecial #141                // Method javax/jms/IllegalStateException."<init>":(Ljava/lang/String;)V
      37: athrow
      38: aload_0
      39: getfield      #89                 // Field info:Lorg/apache/activemq/command/ConnectionInfo;
      42: aload_1
      43: invokevirtual #144                // Method org/apache/activemq/command/ConnectionInfo.setClientId:(Ljava/lang/String;)V
      46: aload_0
      47: iconst_1
      48: putfield      #145                // Field userSpecifiedClientID:Z
      51: aload_0
      52: invokevirtual #119                // Method ensureConnectionInfoSent:()V
      55: return

  public void setDefaultClientID(java.lang.String) throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: getfield      #89                 // Field info:Lorg/apache/activemq/command/ConnectionInfo;
       4: aload_1
       5: invokevirtual #144                // Method org/apache/activemq/command/ConnectionInfo.setClientId:(Ljava/lang/String;)V
       8: aload_0
       9: iconst_1
      10: putfield      #145                // Field userSpecifiedClientID:Z
      13: return

  public javax.jms.ConnectionMetaData getMetaData() throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: invokevirtual #118                // Method checkClosedOrFailed:()V
       4: getstatic     #146                // Field org/apache/activemq/ActiveMQConnectionMetaData.INSTANCE:Lorg/apache/activemq/ActiveMQConnectionMetaData;
       7: areturn

  public javax.jms.ExceptionListener getExceptionListener() throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: invokevirtual #118                // Method checkClosedOrFailed:()V
       4: aload_0
       5: getfield      #2                  // Field exceptionListener:Ljavax/jms/ExceptionListener;
       8: areturn

  public void setExceptionListener(javax.jms.ExceptionListener) throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: invokevirtual #118                // Method checkClosedOrFailed:()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field exceptionListener:Ljavax/jms/ExceptionListener;
       9: return

  public org.apache.activemq.ClientInternalExceptionListener getClientInternalExceptionListener();
    Code:
       0: aload_0
       1: getfield      #3                  // Field clientInternalExceptionListener:Lorg/apache/activemq/ClientInternalExceptionListener;
       4: areturn

  public void setClientInternalExceptionListener(org.apache.activemq.ClientInternalExceptionListener);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #3                  // Field clientInternalExceptionListener:Lorg/apache/activemq/ClientInternalExceptionListener;
       5: return

  public void start() throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: invokevirtual #118                // Method checkClosedOrFailed:()V
       4: aload_0
       5: invokevirtual #119                // Method ensureConnectionInfoSent:()V
       8: aload_0
       9: getfield      #38                 // Field started:Ljava/util/concurrent/atomic/AtomicBoolean;
      12: iconst_0
      13: iconst_1
      14: invokevirtual #147                // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z
      17: ifeq          54
      20: aload_0
      21: getfield      #43                 // Field sessions:Ljava/util/concurrent/CopyOnWriteArrayList;
      24: invokevirtual #148                // Method java/util/concurrent/CopyOnWriteArrayList.iterator:()Ljava/util/Iterator;
      27: astore_1
      28: aload_1
      29: invokeinterface #149,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      34: ifeq          54
      37: aload_1
      38: invokeinterface #150,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      43: checkcast     #131                // class org/apache/activemq/ActiveMQSession
      46: astore_2
      47: aload_2
      48: invokevirtual #151                // Method org/apache/activemq/ActiveMQSession.start:()V
      51: goto          28
      54: return

  public void stop() throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: iconst_1
       2: invokevirtual #152                // Method doStop:(Z)V
       5: return

  void doStop(boolean) throws javax.jms.JMSException;
    Code:
       0: iload_1
       1: ifeq          8
       4: aload_0
       5: invokevirtual #118                // Method checkClosedOrFailed:()V
       8: aload_0
       9: getfield      #38                 // Field started:Ljava/util/concurrent/atomic/AtomicBoolean;
      12: iconst_1
      13: iconst_0
      14: invokevirtual #147                // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z
      17: ifeq          75
      20: aload_0
      21: getfield      #43                 // Field sessions:Ljava/util/concurrent/CopyOnWriteArrayList;
      24: dup
      25: astore_2
      26: monitorenter
      27: aload_0
      28: getfield      #43                 // Field sessions:Ljava/util/concurrent/CopyOnWriteArrayList;
      31: invokevirtual #148                // Method java/util/concurrent/CopyOnWriteArrayList.iterator:()Ljava/util/Iterator;
      34: astore_3
      35: aload_3
      36: invokeinterface #149,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      41: ifeq          63
      44: aload_3
      45: invokeinterface #150,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      50: checkcast     #131                // class org/apache/activemq/ActiveMQSession
      53: astore        4
      55: aload         4
      57: invokevirtual #153                // Method org/apache/activemq/ActiveMQSession.stop:()V
      60: goto          35
      63: aload_2
      64: monitorexit
      65: goto          75
      68: astore        5
      70: aload_2
      71: monitorexit
      72: aload         5
      74: athrow
      75: return
    Exception table:
       from    to  target type
          27    65    68   any
          68    72    68   any

  public void close() throws javax.jms.JMSException;
    Code:
       0: invokestatic  #154                // Method java/lang/Thread.interrupted:()Z
       3: istore_1
       4: aload_0
       5: getfield      #39                 // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;
       8: invokevirtual #155                // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
      11: ifne          29
      14: aload_0
      15: getfield      #40                 // Field transportFailed:Ljava/util/concurrent/atomic/AtomicBoolean;
      18: invokevirtual #155                // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
      21: ifne          29
      24: aload_0
      25: iconst_0
      26: invokevirtual #152                // Method doStop:(Z)V
      29: aload_0
      30: dup
      31: astore_2
      32: monitorenter
      33: aload_0
      34: getfield      #39                 // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;
      37: invokevirtual #155                // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
      40: ifne          405
      43: aload_0
      44: getfield      #12                 // Field closing:Ljava/util/concurrent/atomic/AtomicBoolean;
      47: iconst_1
      48: invokevirtual #156                // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V
      51: aload_0
      52: getfield      #157                // Field destinationSource:Lorg/apache/activemq/advisory/DestinationSource;
      55: ifnull        70
      58: aload_0
      59: getfield      #157                // Field destinationSource:Lorg/apache/activemq/advisory/DestinationSource;
      62: invokevirtual #158                // Method org/apache/activemq/advisory/DestinationSource.stop:()V
      65: aload_0
      66: aconst_null
      67: putfield      #157                // Field destinationSource:Lorg/apache/activemq/advisory/DestinationSource;
      70: aload_0
      71: getfield      #159                // Field advisoryConsumer:Lorg/apache/activemq/AdvisoryConsumer;
      74: ifnull        89
      77: aload_0
      78: getfield      #159                // Field advisoryConsumer:Lorg/apache/activemq/AdvisoryConsumer;
      81: invokevirtual #160                // Method org/apache/activemq/AdvisoryConsumer.dispose:()V
      84: aload_0
      85: aconst_null
      86: putfield      #159                // Field advisoryConsumer:Lorg/apache/activemq/AdvisoryConsumer;
      89: aload_0
      90: getfield      #161                // Field scheduler:Lorg/apache/activemq/thread/Scheduler;
      93: astore_3
      94: aload_3
      95: ifnull        117
      98: aload_3
      99: invokevirtual #162                // Method org/apache/activemq/thread/Scheduler.stop:()V
     102: goto          117
     105: astore        4
     107: aload         4
     109: invokestatic  #164                // Method org/apache/activemq/util/JMSExceptionSupport.create:(Ljava/lang/Exception;)Ljavax/jms/JMSException;
     112: astore        5
     114: aload         5
     116: athrow
     117: lconst_0
     118: lstore        4
     120: aload_0
     121: getfield      #43                 // Field sessions:Ljava/util/concurrent/CopyOnWriteArrayList;
     124: invokevirtual #148                // Method java/util/concurrent/CopyOnWriteArrayList.iterator:()Ljava/util/Iterator;
     127: astore        6
     129: aload         6
     131: invokeinterface #149,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
     136: ifeq          171
     139: aload         6
     141: invokeinterface #150,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     146: checkcast     #131                // class org/apache/activemq/ActiveMQSession
     149: astore        7
     151: aload         7
     153: invokevirtual #165                // Method org/apache/activemq/ActiveMQSession.dispose:()V
     156: lload         4
     158: aload         7
     160: invokevirtual #166                // Method org/apache/activemq/ActiveMQSession.getLastDeliveredSequenceId:()J
     163: invokestatic  #167                // Method java/lang/Math.max:(JJ)J
     166: lstore        4
     168: goto          129
     171: aload_0
     172: getfield      #44                 // Field connectionConsumers:Ljava/util/concurrent/CopyOnWriteArrayList;
     175: invokevirtual #148                // Method java/util/concurrent/CopyOnWriteArrayList.iterator:()Ljava/util/Iterator;
     178: astore        6
     180: aload         6
     182: invokeinterface #149,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
     187: ifeq          210
     190: aload         6
     192: invokeinterface #150,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     197: checkcast     #168                // class org/apache/activemq/ActiveMQConnectionConsumer
     200: astore        7
     202: aload         7
     204: invokevirtual #169                // Method org/apache/activemq/ActiveMQConnectionConsumer.dispose:()V
     207: goto          180
     210: aload_0
     211: getfield      #45                 // Field inputStreams:Ljava/util/concurrent/CopyOnWriteArrayList;
     214: invokevirtual #148                // Method java/util/concurrent/CopyOnWriteArrayList.iterator:()Ljava/util/Iterator;
     217: astore        6
     219: aload         6
     221: invokeinterface #149,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
     226: ifeq          249
     229: aload         6
     231: invokeinterface #150,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     236: checkcast     #170                // class org/apache/activemq/ActiveMQInputStream
     239: astore        7
     241: aload         7
     243: invokevirtual #171                // Method org/apache/activemq/ActiveMQInputStream.dispose:()V
     246: goto          219
     249: aload_0
     250: getfield      #46                 // Field outputStreams:Ljava/util/concurrent/CopyOnWriteArrayList;
     253: invokevirtual #148                // Method java/util/concurrent/CopyOnWriteArrayList.iterator:()Ljava/util/Iterator;
     256: astore        6
     258: aload         6
     260: invokeinterface #149,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
     265: ifeq          288
     268: aload         6
     270: invokeinterface #150,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     275: checkcast     #172                // class org/apache/activemq/ActiveMQOutputStream
     278: astore        7
     280: aload         7
     282: invokevirtual #173                // Method org/apache/activemq/ActiveMQOutputStream.dispose:()V
     285: goto          258
     288: aload_0
     289: getfield      #16                 // Field activeTempDestinations:Ljava/util/concurrent/ConcurrentHashMap;
     292: invokevirtual #174                // Method java/util/concurrent/ConcurrentHashMap.clear:()V
     295: aload_0
     296: getfield      #142                // Field isConnectionInfoSentToBroker:Z
     299: ifeq          367
     302: aload_0
     303: getfield      #89                 // Field info:Lorg/apache/activemq/command/ConnectionInfo;
     306: invokevirtual #175                // Method org/apache/activemq/command/ConnectionInfo.createRemoveCommand:()Lorg/apache/activemq/command/RemoveInfo;
     309: astore        6
     311: aload         6
     313: lload         4
     315: invokevirtual #176                // Method org/apache/activemq/command/RemoveInfo.setLastDeliveredSequenceId:(J)V
     318: aload_0
     319: aload_0
     320: getfield      #89                 // Field info:Lorg/apache/activemq/command/ConnectionInfo;
     323: invokevirtual #175                // Method org/apache/activemq/command/ConnectionInfo.createRemoveCommand:()Lorg/apache/activemq/command/RemoveInfo;
     326: aload_0
     327: getfield      #27                 // Field closeTimeout:I
     330: invokespecial #177                // Method doSyncSendPacket:(Lorg/apache/activemq/command/Command;I)Lorg/apache/activemq/command/Response;
     333: pop
     334: goto          356
     337: astore        7
     339: aload         7
     341: invokevirtual #178                // Method javax/jms/JMSException.getCause:()Ljava/lang/Throwable;
     344: instanceof    #179                // class org/apache/activemq/transport/RequestTimedOutIOException
     347: ifeq          353
     350: goto          356
     353: aload         7
     355: athrow
     356: aload_0
     357: new           #180                // class org/apache/activemq/command/ShutdownInfo
     360: dup
     361: invokespecial #181                // Method org/apache/activemq/command/ShutdownInfo."<init>":()V
     364: invokespecial #182                // Method doAsyncSendPacket:(Lorg/apache/activemq/command/Command;)V
     367: aload_0
     368: getfield      #38                 // Field started:Ljava/util/concurrent/atomic/AtomicBoolean;
     371: iconst_0
     372: invokevirtual #156                // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V
     375: aload_0
     376: getfield      #183                // Field sessionTaskRunner:Lorg/apache/activemq/thread/TaskRunnerFactory;
     379: ifnull        389
     382: aload_0
     383: getfield      #183                // Field sessionTaskRunner:Lorg/apache/activemq/thread/TaskRunnerFactory;
     386: invokevirtual #184                // Method org/apache/activemq/thread/TaskRunnerFactory.shutdown:()V
     389: aload_0
     390: getfield      #39                 // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;
     393: iconst_1
     394: invokevirtual #156                // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V
     397: aload_0
     398: getfield      #12                 // Field closing:Ljava/util/concurrent/atomic/AtomicBoolean;
     401: iconst_0
     402: invokevirtual #156                // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V
     405: aload_2
     406: monitorexit
     407: goto          417
     410: astore        8
     412: aload_2
     413: monitorexit
     414: aload         8
     416: athrow
     417: aload_0
     418: getfield      #4                  // Field executor:Ljava/util/concurrent/ThreadPoolExecutor;
     421: ifnull        431
     424: aload_0
     425: getfield      #4                  // Field executor:Ljava/util/concurrent/ThreadPoolExecutor;
     428: invokestatic  #185                // Method org/apache/activemq/util/ThreadPoolUtils.shutdown:(Ljava/util/concurrent/ExecutorService;)V
     431: goto          471
     434: astore_2
     435: getstatic     #11                 // Field LOG:Lorg/slf4j/Logger;
     438: new           #123                // class java/lang/StringBuilder
     441: dup
     442: invokespecial #124                // Method java/lang/StringBuilder."<init>":()V
     445: ldc           #187                // String Error shutting down thread pool:
     447: invokevirtual #126                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     450: aload_0
     451: getfield      #4                  // Field executor:Ljava/util/concurrent/ThreadPoolExecutor;
     454: invokevirtual #188                // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     457: ldc           #189                // String . This exception will be ignored.
     459: invokevirtual #126                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     462: invokevirtual #130                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     465: aload_2
     466: invokeinterface #190,  3          // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Throwable;)V
     471: aload_0
     472: getfield      #10                 // Field transport:Lorg/apache/activemq/transport/Transport;
     475: invokestatic  #191                // Method org/apache/activemq/util/ServiceSupport.dispose:(Lorg/apache/activemq/Service;)V
     478: aload_0
     479: getfield      #74                 // Field factoryStats:Lorg/apache/activemq/management/JMSStatsImpl;
     482: aload_0
     483: invokevirtual #192                // Method org/apache/activemq/management/JMSStatsImpl.removeConnection:(Lorg/apache/activemq/ActiveMQConnection;)V
     486: iload_1
     487: ifeq          585
     490: invokestatic  #193                // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
     493: invokevirtual #194                // Method java/lang/Thread.interrupt:()V
     496: goto          585
     499: astore        9
     501: aload_0
     502: getfield      #4                  // Field executor:Ljava/util/concurrent/ThreadPoolExecutor;
     505: ifnull        515
     508: aload_0
     509: getfield      #4                  // Field executor:Ljava/util/concurrent/ThreadPoolExecutor;
     512: invokestatic  #185                // Method org/apache/activemq/util/ThreadPoolUtils.shutdown:(Ljava/util/concurrent/ExecutorService;)V
     515: goto          557
     518: astore        10
     520: getstatic     #11                 // Field LOG:Lorg/slf4j/Logger;
     523: new           #123                // class java/lang/StringBuilder
     526: dup
     527: invokespecial #124                // Method java/lang/StringBuilder."<init>":()V
     530: ldc           #187                // String Error shutting down thread pool:
     532: invokevirtual #126                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     535: aload_0
     536: getfield      #4                  // Field executor:Ljava/util/concurrent/ThreadPoolExecutor;
     539: invokevirtual #188                // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     542: ldc           #189                // String . This exception will be ignored.
     544: invokevirtual #126                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     547: invokevirtual #130                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     550: aload         10
     552: invokeinterface #190,  3          // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Throwable;)V
     557: aload_0
     558: getfield      #10                 // Field transport:Lorg/apache/activemq/transport/Transport;
     561: invokestatic  #191                // Method org/apache/activemq/util/ServiceSupport.dispose:(Lorg/apache/activemq/Service;)V
     564: aload_0
     565: getfield      #74                 // Field factoryStats:Lorg/apache/activemq/management/JMSStatsImpl;
     568: aload_0
     569: invokevirtual #192                // Method org/apache/activemq/management/JMSStatsImpl.removeConnection:(Lorg/apache/activemq/ActiveMQConnection;)V
     572: iload_1
     573: ifeq          582
     576: invokestatic  #193                // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
     579: invokevirtual #194                // Method java/lang/Thread.interrupt:()V
     582: aload         9
     584: athrow
     585: return
    Exception table:
       from    to  target type
          98   102   105   Class java/lang/Exception
         318   334   337   Class javax/jms/JMSException
          33   407   410   any
         410   414   410   any
         417   431   434   Class java/lang/Throwable
           4   417   499   any
         501   515   518   Class java/lang/Throwable
         499   501   499   any

  public javax.jms.ConnectionConsumer createDurableConnectionConsumer(javax.jms.Topic, java.lang.String, java.lang.String, javax.jms.ServerSessionPool, int) throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: iload         5
       8: iconst_0
       9: invokevirtual #195                // Method createDurableConnectionConsumer:(Ljavax/jms/Topic;Ljava/lang/String;Ljava/lang/String;Ljavax/jms/ServerSessionPool;IZ)Ljavax/jms/ConnectionConsumer;
      12: areturn

  public javax.jms.ConnectionConsumer createDurableConnectionConsumer(javax.jms.Topic, java.lang.String, java.lang.String, javax.jms.ServerSessionPool, int, boolean) throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: invokevirtual #118                // Method checkClosedOrFailed:()V
       4: aload_0
       5: getfield      #35                 // Field queueOnlyConnection:Z
       8: ifeq          21
      11: new           #139                // class javax/jms/IllegalStateException
      14: dup
      15: ldc           #196                // String QueueConnection cannot be used to create Pub/Sub based resources.
      17: invokespecial #141                // Method javax/jms/IllegalStateException."<init>":(Ljava/lang/String;)V
      20: athrow
      21: aload_0
      22: invokevirtual #119                // Method ensureConnectionInfoSent:()V
      25: new           #93                 // class org/apache/activemq/command/SessionId
      28: dup
      29: aload_0
      30: getfield      #89                 // Field info:Lorg/apache/activemq/command/ConnectionInfo;
      33: invokevirtual #94                 // Method org/apache/activemq/command/ConnectionInfo.getConnectionId:()Lorg/apache/activemq/command/ConnectionId;
      36: ldc2_w        #95                 // long -1l
      39: invokespecial #97                 // Method org/apache/activemq/command/SessionId."<init>":(Lorg/apache/activemq/command/ConnectionId;J)V
      42: astore        7
      44: new           #197                // class org/apache/activemq/command/ConsumerInfo
      47: dup
      48: new           #198                // class org/apache/activemq/command/ConsumerId
      51: dup
      52: aload         7
      54: aload_0
      55: getfield      #50                 // Field consumerIdGenerator:Lorg/apache/activemq/util/LongSequenceGenerator;
      58: invokevirtual #136                // Method org/apache/activemq/util/LongSequenceGenerator.getNextSequenceId:()J
      61: invokespecial #199                // Method org/apache/activemq/command/ConsumerId."<init>":(Lorg/apache/activemq/command/SessionId;J)V
      64: invokespecial #200                // Method org/apache/activemq/command/ConsumerInfo."<init>":(Lorg/apache/activemq/command/ConsumerId;)V
      67: astore        8
      69: aload         8
      71: aload_1
      72: invokestatic  #201                // Method org/apache/activemq/ActiveMQMessageTransformation.transformDestination:(Ljavax/jms/Destination;)Lorg/apache/activemq/command/ActiveMQDestination;
      75: invokevirtual #202                // Method org/apache/activemq/command/ConsumerInfo.setDestination:(Lorg/apache/activemq/command/ActiveMQDestination;)V
      78: aload         8
      80: aload_2
      81: invokevirtual #203                // Method org/apache/activemq/command/ConsumerInfo.setSubscriptionName:(Ljava/lang/String;)V
      84: aload         8
      86: aload_3
      87: invokevirtual #204                // Method org/apache/activemq/command/ConsumerInfo.setSelector:(Ljava/lang/String;)V
      90: aload         8
      92: iload         5
      94: invokevirtual #205                // Method org/apache/activemq/command/ConsumerInfo.setPrefetchSize:(I)V
      97: aload         8
      99: aload_0
     100: invokevirtual #133                // Method isDispatchAsync:()Z
     103: invokevirtual #206                // Method org/apache/activemq/command/ConsumerInfo.setDispatchAsync:(Z)V
     106: aload         8
     108: invokevirtual #207                // Method org/apache/activemq/command/ConsumerInfo.getDestination:()Lorg/apache/activemq/command/ActiveMQDestination;
     111: invokevirtual #208                // Method org/apache/activemq/command/ActiveMQDestination.getOptions:()Ljava/util/Map;
     114: ifnull        146
     117: new           #209                // class java/util/HashMap
     120: dup
     121: aload         8
     123: invokevirtual #207                // Method org/apache/activemq/command/ConsumerInfo.getDestination:()Lorg/apache/activemq/command/ActiveMQDestination;
     126: invokevirtual #208                // Method org/apache/activemq/command/ActiveMQDestination.getOptions:()Ljava/util/Map;
     129: invokespecial #210                // Method java/util/HashMap."<init>":(Ljava/util/Map;)V
     132: astore        9
     134: aload_0
     135: getfield      #89                 // Field info:Lorg/apache/activemq/command/ConnectionInfo;
     138: aload         9
     140: ldc           #211                // String consumer.
     142: invokestatic  #212                // Method org/apache/activemq/util/IntrospectionSupport.setProperties:(Ljava/lang/Object;Ljava/util/Map;Ljava/lang/String;)Z
     145: pop
     146: new           #168                // class org/apache/activemq/ActiveMQConnectionConsumer
     149: dup
     150: aload_0
     151: aload         4
     153: aload         8
     155: invokespecial #213                // Method org/apache/activemq/ActiveMQConnectionConsumer."<init>":(Lorg/apache/activemq/ActiveMQConnection;Ljavax/jms/ServerSessionPool;Lorg/apache/activemq/command/ConsumerInfo;)V
     158: areturn

  public boolean isStarted();
    Code:
       0: aload_0
       1: getfield      #38                 // Field started:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: invokevirtual #155                // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
       7: ireturn

  public boolean isClosed();
    Code:
       0: aload_0
       1: getfield      #39                 // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: invokevirtual #155                // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
       7: ireturn

  public boolean isClosing();
    Code:
       0: aload_0
       1: getfield      #12                 // Field closing:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: invokevirtual #155                // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
       7: ireturn

  public boolean isTransportFailed();
    Code:
       0: aload_0
       1: getfield      #40                 // Field transportFailed:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: invokevirtual #155                // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
       7: ireturn

  public org.apache.activemq.ActiveMQPrefetchPolicy getPrefetchPolicy();
    Code:
       0: aload_0
       1: getfield      #21                 // Field prefetchPolicy:Lorg/apache/activemq/ActiveMQPrefetchPolicy;
       4: areturn

  public void setPrefetchPolicy(org.apache.activemq.ActiveMQPrefetchPolicy);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #21                 // Field prefetchPolicy:Lorg/apache/activemq/ActiveMQPrefetchPolicy;
       5: return

  public org.apache.activemq.transport.Transport getTransportChannel();
    Code:
       0: aload_0
       1: getfield      #10                 // Field transport:Lorg/apache/activemq/transport/Transport;
       4: areturn

  public java.lang.String getInitializedClientID() throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: invokevirtual #119                // Method ensureConnectionInfoSent:()V
       4: aload_0
       5: getfield      #89                 // Field info:Lorg/apache/activemq/command/ConnectionInfo;
       8: invokevirtual #137                // Method org/apache/activemq/command/ConnectionInfo.getClientId:()Ljava/lang/String;
      11: areturn

  public boolean isDisableTimeStampsByDefault();
    Code:
       0: aload_0
       1: getfield      #214                // Field disableTimeStampsByDefault:Z
       4: ireturn

  public void setDisableTimeStampsByDefault(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #214                // Field disableTimeStampsByDefault:Z
       5: return

  public boolean isOptimizedMessageDispatch();
    Code:
       0: aload_0
       1: getfield      #22                 // Field optimizedMessageDispatch:Z
       4: ireturn

  public void setOptimizedMessageDispatch(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #22                 // Field optimizedMessageDispatch:Z
       5: return

  public int getCloseTimeout();
    Code:
       0: aload_0
       1: getfield      #27                 // Field closeTimeout:I
       4: ireturn

  public void setCloseTimeout(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #27                 // Field closeTimeout:I
       5: return

  public org.apache.activemq.command.ConnectionInfo getConnectionInfo();
    Code:
       0: aload_0
       1: getfield      #89                 // Field info:Lorg/apache/activemq/command/ConnectionInfo;
       4: areturn

  public boolean isUseRetroactiveConsumer();
    Code:
       0: aload_0
       1: getfield      #215                // Field useRetroactiveConsumer:Z
       4: ireturn

  public void setUseRetroactiveConsumer(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #215                // Field useRetroactiveConsumer:Z
       5: return

  public boolean isNestedMapAndListEnabled();
    Code:
       0: aload_0
       1: getfield      #26                 // Field nestedMapAndListEnabled:Z
       4: ireturn

  public void setNestedMapAndListEnabled(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #26                 // Field nestedMapAndListEnabled:Z
       5: return

  public boolean isExclusiveConsumer();
    Code:
       0: aload_0
       1: getfield      #216                // Field exclusiveConsumer:Z
       4: ireturn

  public void setExclusiveConsumer(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #216                // Field exclusiveConsumer:Z
       5: return

  public void addTransportListener(org.apache.activemq.transport.TransportListener);
    Code:
       0: aload_0
       1: getfield      #1                  // Field transportListeners:Ljava/util/concurrent/CopyOnWriteArrayList;
       4: aload_1
       5: invokevirtual #217                // Method java/util/concurrent/CopyOnWriteArrayList.add:(Ljava/lang/Object;)Z
       8: pop
       9: return

  public void removeTransportListener(org.apache.activemq.transport.TransportListener);
    Code:
       0: aload_0
       1: getfield      #1                  // Field transportListeners:Ljava/util/concurrent/CopyOnWriteArrayList;
       4: aload_1
       5: invokevirtual #218                // Method java/util/concurrent/CopyOnWriteArrayList.remove:(Ljava/lang/Object;)Z
       8: pop
       9: return

  public boolean isUseDedicatedTaskRunner();
    Code:
       0: aload_0
       1: getfield      #219                // Field useDedicatedTaskRunner:Z
       4: ireturn

  public void setUseDedicatedTaskRunner(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #219                // Field useDedicatedTaskRunner:Z
       5: return

  public org.apache.activemq.thread.TaskRunnerFactory getSessionTaskRunner();
    Code:
       0: aload_0
       1: dup
       2: astore_1
       3: monitorenter
       4: aload_0
       5: getfield      #183                // Field sessionTaskRunner:Lorg/apache/activemq/thread/TaskRunnerFactory;
       8: ifnonnull     49
      11: aload_0
      12: new           #220                // class org/apache/activemq/thread/TaskRunnerFactory
      15: dup
      16: ldc           #221                // String ActiveMQ Session Task
      18: bipush        7
      20: iconst_0
      21: sipush        1000
      24: aload_0
      25: invokevirtual #222                // Method isUseDedicatedTaskRunner:()Z
      28: aload_0
      29: getfield      #71                 // Field maxThreadPoolSize:I
      32: invokespecial #223                // Method org/apache/activemq/thread/TaskRunnerFactory."<init>":(Ljava/lang/String;IZIZI)V
      35: putfield      #183                // Field sessionTaskRunner:Lorg/apache/activemq/thread/TaskRunnerFactory;
      38: aload_0
      39: getfield      #183                // Field sessionTaskRunner:Lorg/apache/activemq/thread/TaskRunnerFactory;
      42: aload_0
      43: getfield      #72                 // Field rejectedTaskHandler:Ljava/util/concurrent/RejectedExecutionHandler;
      46: invokevirtual #224                // Method org/apache/activemq/thread/TaskRunnerFactory.setRejectedTaskHandler:(Ljava/util/concurrent/RejectedExecutionHandler;)V
      49: aload_1
      50: monitorexit
      51: goto          59
      54: astore_2
      55: aload_1
      56: monitorexit
      57: aload_2
      58: athrow
      59: aload_0
      60: getfield      #183                // Field sessionTaskRunner:Lorg/apache/activemq/thread/TaskRunnerFactory;
      63: areturn
    Exception table:
       from    to  target type
           4    51    54   any
          54    57    54   any

  public void setSessionTaskRunner(org.apache.activemq.thread.TaskRunnerFactory);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #183                // Field sessionTaskRunner:Lorg/apache/activemq/thread/TaskRunnerFactory;
       5: return

  public org.apache.activemq.MessageTransformer getTransformer();
    Code:
       0: aload_0
       1: getfield      #225                // Field transformer:Lorg/apache/activemq/MessageTransformer;
       4: areturn

  public void setTransformer(org.apache.activemq.MessageTransformer);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #225                // Field transformer:Lorg/apache/activemq/MessageTransformer;
       5: return

  public boolean isStatsEnabled();
    Code:
       0: aload_0
       1: getfield      #103                // Field stats:Lorg/apache/activemq/management/JMSConnectionStatsImpl;
       4: invokevirtual #226                // Method org/apache/activemq/management/JMSConnectionStatsImpl.isEnabled:()Z
       7: ireturn

  public void setStatsEnabled(boolean);
    Code:
       0: aload_0
       1: getfield      #103                // Field stats:Lorg/apache/activemq/management/JMSConnectionStatsImpl;
       4: iload_1
       5: invokevirtual #227                // Method org/apache/activemq/management/JMSConnectionStatsImpl.setEnabled:(Z)V
       8: return

  public org.apache.activemq.advisory.DestinationSource getDestinationSource() throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: getfield      #157                // Field destinationSource:Lorg/apache/activemq/advisory/DestinationSource;
       4: ifnonnull     26
       7: aload_0
       8: new           #228                // class org/apache/activemq/advisory/DestinationSource
      11: dup
      12: aload_0
      13: invokespecial #229                // Method org/apache/activemq/advisory/DestinationSource."<init>":(Ljavax/jms/Connection;)V
      16: putfield      #157                // Field destinationSource:Lorg/apache/activemq/advisory/DestinationSource;
      19: aload_0
      20: getfield      #157                // Field destinationSource:Lorg/apache/activemq/advisory/DestinationSource;
      23: invokevirtual #230                // Method org/apache/activemq/advisory/DestinationSource.start:()V
      26: aload_0
      27: getfield      #157                // Field destinationSource:Lorg/apache/activemq/advisory/DestinationSource;
      30: areturn

  protected void addSession(org.apache.activemq.ActiveMQSession) throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: getfield      #43                 // Field sessions:Ljava/util/concurrent/CopyOnWriteArrayList;
       4: aload_1
       5: invokevirtual #217                // Method java/util/concurrent/CopyOnWriteArrayList.add:(Ljava/lang/Object;)Z
       8: pop
       9: aload_0
      10: getfield      #43                 // Field sessions:Ljava/util/concurrent/CopyOnWriteArrayList;
      13: invokevirtual #231                // Method java/util/concurrent/CopyOnWriteArrayList.size:()I
      16: iconst_1
      17: if_icmpgt     27
      20: aload_1
      21: invokevirtual #232                // Method org/apache/activemq/ActiveMQSession.isTransacted:()Z
      24: ifeq          32
      27: aload_0
      28: iconst_0
      29: putfield      #22                 // Field optimizedMessageDispatch:Z
      32: return

  protected void removeSession(org.apache.activemq.ActiveMQSession);
    Code:
       0: aload_0
       1: getfield      #43                 // Field sessions:Ljava/util/concurrent/CopyOnWriteArrayList;
       4: aload_1
       5: invokevirtual #218                // Method java/util/concurrent/CopyOnWriteArrayList.remove:(Ljava/lang/Object;)Z
       8: pop
       9: aload_0
      10: aload_1
      11: invokevirtual #233                // Method removeDispatcher:(Lorg/apache/activemq/ActiveMQDispatcher;)V
      14: return

  protected void addConnectionConsumer(org.apache.activemq.ActiveMQConnectionConsumer) throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: getfield      #44                 // Field connectionConsumers:Ljava/util/concurrent/CopyOnWriteArrayList;
       4: aload_1
       5: invokevirtual #217                // Method java/util/concurrent/CopyOnWriteArrayList.add:(Ljava/lang/Object;)Z
       8: pop
       9: return

  protected void removeConnectionConsumer(org.apache.activemq.ActiveMQConnectionConsumer);
    Code:
       0: aload_0
       1: getfield      #44                 // Field connectionConsumers:Ljava/util/concurrent/CopyOnWriteArrayList;
       4: aload_1
       5: invokevirtual #218                // Method java/util/concurrent/CopyOnWriteArrayList.remove:(Ljava/lang/Object;)Z
       8: pop
       9: aload_0
      10: aload_1
      11: invokevirtual #233                // Method removeDispatcher:(Lorg/apache/activemq/ActiveMQDispatcher;)V
      14: return

  public javax.jms.TopicSession createTopicSession(boolean, int) throws javax.jms.JMSException;
    Code:
       0: new           #234                // class org/apache/activemq/ActiveMQTopicSession
       3: dup
       4: aload_0
       5: iload_1
       6: iload_2
       7: invokevirtual #235                // Method createSession:(ZI)Ljavax/jms/Session;
      10: checkcast     #131                // class org/apache/activemq/ActiveMQSession
      13: invokespecial #236                // Method org/apache/activemq/ActiveMQTopicSession."<init>":(Ljavax/jms/TopicSession;)V
      16: areturn

  public javax.jms.ConnectionConsumer createConnectionConsumer(javax.jms.Topic, java.lang.String, javax.jms.ServerSessionPool, int) throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: iload         4
       6: iconst_0
       7: invokevirtual #237                // Method createConnectionConsumer:(Ljavax/jms/Destination;Ljava/lang/String;Ljavax/jms/ServerSessionPool;IZ)Ljavax/jms/ConnectionConsumer;
      10: areturn

  public javax.jms.ConnectionConsumer createConnectionConsumer(javax.jms.Queue, java.lang.String, javax.jms.ServerSessionPool, int) throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: iload         4
       6: iconst_0
       7: invokevirtual #237                // Method createConnectionConsumer:(Ljavax/jms/Destination;Ljava/lang/String;Ljavax/jms/ServerSessionPool;IZ)Ljavax/jms/ConnectionConsumer;
      10: areturn

  public javax.jms.ConnectionConsumer createConnectionConsumer(javax.jms.Destination, java.lang.String, javax.jms.ServerSessionPool, int) throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: iload         4
       6: iconst_0
       7: invokevirtual #237                // Method createConnectionConsumer:(Ljavax/jms/Destination;Ljava/lang/String;Ljavax/jms/ServerSessionPool;IZ)Ljavax/jms/ConnectionConsumer;
      10: areturn

  public javax.jms.ConnectionConsumer createConnectionConsumer(javax.jms.Destination, java.lang.String, javax.jms.ServerSessionPool, int, boolean) throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: invokevirtual #118                // Method checkClosedOrFailed:()V
       4: aload_0
       5: invokevirtual #119                // Method ensureConnectionInfoSent:()V
       8: aload_0
       9: invokespecial #238                // Method createConsumerId:()Lorg/apache/activemq/command/ConsumerId;
      12: astore        6
      14: new           #197                // class org/apache/activemq/command/ConsumerInfo
      17: dup
      18: aload         6
      20: invokespecial #200                // Method org/apache/activemq/command/ConsumerInfo."<init>":(Lorg/apache/activemq/command/ConsumerId;)V
      23: astore        7
      25: aload         7
      27: aload_1
      28: invokestatic  #201                // Method org/apache/activemq/ActiveMQMessageTransformation.transformDestination:(Ljavax/jms/Destination;)Lorg/apache/activemq/command/ActiveMQDestination;
      31: invokevirtual #202                // Method org/apache/activemq/command/ConsumerInfo.setDestination:(Lorg/apache/activemq/command/ActiveMQDestination;)V
      34: aload         7
      36: aload_2
      37: invokevirtual #204                // Method org/apache/activemq/command/ConsumerInfo.setSelector:(Ljava/lang/String;)V
      40: aload         7
      42: iload         4
      44: invokevirtual #205                // Method org/apache/activemq/command/ConsumerInfo.setPrefetchSize:(I)V
      47: aload         7
      49: iload         5
      51: invokevirtual #239                // Method org/apache/activemq/command/ConsumerInfo.setNoLocal:(Z)V
      54: aload         7
      56: aload_0
      57: invokevirtual #133                // Method isDispatchAsync:()Z
      60: invokevirtual #206                // Method org/apache/activemq/command/ConsumerInfo.setDispatchAsync:(Z)V
      63: aload         7
      65: invokevirtual #207                // Method org/apache/activemq/command/ConsumerInfo.getDestination:()Lorg/apache/activemq/command/ActiveMQDestination;
      68: invokevirtual #208                // Method org/apache/activemq/command/ActiveMQDestination.getOptions:()Ljava/util/Map;
      71: ifnull        101
      74: new           #209                // class java/util/HashMap
      77: dup
      78: aload         7
      80: invokevirtual #207                // Method org/apache/activemq/command/ConsumerInfo.getDestination:()Lorg/apache/activemq/command/ActiveMQDestination;
      83: invokevirtual #208                // Method org/apache/activemq/command/ActiveMQDestination.getOptions:()Ljava/util/Map;
      86: invokespecial #210                // Method java/util/HashMap."<init>":(Ljava/util/Map;)V
      89: astore        8
      91: aload         7
      93: aload         8
      95: ldc           #211                // String consumer.
      97: invokestatic  #212                // Method org/apache/activemq/util/IntrospectionSupport.setProperties:(Ljava/lang/Object;Ljava/util/Map;Ljava/lang/String;)Z
     100: pop
     101: new           #168                // class org/apache/activemq/ActiveMQConnectionConsumer
     104: dup
     105: aload_0
     106: aload_3
     107: aload         7
     109: invokespecial #213                // Method org/apache/activemq/ActiveMQConnectionConsumer."<init>":(Lorg/apache/activemq/ActiveMQConnection;Ljavax/jms/ServerSessionPool;Lorg/apache/activemq/command/ConsumerInfo;)V
     112: areturn

  private org.apache.activemq.command.ConsumerId createConsumerId();
    Code:
       0: new           #198                // class org/apache/activemq/command/ConsumerId
       3: dup
       4: aload_0
       5: getfield      #98                 // Field connectionSessionId:Lorg/apache/activemq/command/SessionId;
       8: aload_0
       9: getfield      #50                 // Field consumerIdGenerator:Lorg/apache/activemq/util/LongSequenceGenerator;
      12: invokevirtual #136                // Method org/apache/activemq/util/LongSequenceGenerator.getNextSequenceId:()J
      15: invokespecial #199                // Method org/apache/activemq/command/ConsumerId."<init>":(Lorg/apache/activemq/command/SessionId;J)V
      18: areturn

  private org.apache.activemq.command.ProducerId createProducerId();
    Code:
       0: new           #240                // class org/apache/activemq/command/ProducerId
       3: dup
       4: aload_0
       5: getfield      #98                 // Field connectionSessionId:Lorg/apache/activemq/command/SessionId;
       8: aload_0
       9: getfield      #51                 // Field producerIdGenerator:Lorg/apache/activemq/util/LongSequenceGenerator;
      12: invokevirtual #136                // Method org/apache/activemq/util/LongSequenceGenerator.getNextSequenceId:()J
      15: invokespecial #241                // Method org/apache/activemq/command/ProducerId."<init>":(Lorg/apache/activemq/command/SessionId;J)V
      18: areturn

  public javax.jms.QueueSession createQueueSession(boolean, int) throws javax.jms.JMSException;
    Code:
       0: new           #242                // class org/apache/activemq/ActiveMQQueueSession
       3: dup
       4: aload_0
       5: iload_1
       6: iload_2
       7: invokevirtual #235                // Method createSession:(ZI)Ljavax/jms/Session;
      10: checkcast     #131                // class org/apache/activemq/ActiveMQSession
      13: invokespecial #243                // Method org/apache/activemq/ActiveMQQueueSession."<init>":(Ljavax/jms/QueueSession;)V
      16: areturn

  public void checkClientIDWasManuallySpecified() throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: getfield      #145                // Field userSpecifiedClientID:Z
       4: ifne          17
       7: new           #120                // class javax/jms/JMSException
      10: dup
      11: ldc           #244                // String You cannot create a durable subscriber without specifying a unique clientID on a Connection
      13: invokespecial #122                // Method javax/jms/JMSException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: return

  public void asyncSendPacket(org.apache.activemq.command.Command) throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: invokevirtual #245                // Method isClosed:()Z
       4: ifeq          15
       7: new           #246                // class org/apache/activemq/ConnectionClosedException
      10: dup
      11: invokespecial #247                // Method org/apache/activemq/ConnectionClosedException."<init>":()V
      14: athrow
      15: aload_0
      16: aload_1
      17: invokespecial #182                // Method doAsyncSendPacket:(Lorg/apache/activemq/command/Command;)V
      20: return

  private void doAsyncSendPacket(org.apache.activemq.command.Command) throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: getfield      #10                 // Field transport:Lorg/apache/activemq/transport/Transport;
       4: aload_1
       5: invokeinterface #248,  2          // InterfaceMethod org/apache/activemq/transport/Transport.oneway:(Ljava/lang/Object;)V
      10: goto          19
      13: astore_2
      14: aload_2
      15: invokestatic  #164                // Method org/apache/activemq/util/JMSExceptionSupport.create:(Ljava/lang/Exception;)Ljavax/jms/JMSException;
      18: athrow
      19: return
    Exception table:
       from    to  target type
           0    10    13   Class java/io/IOException

  public void syncSendPacket(org.apache.activemq.command.Command, org.apache.activemq.AsyncCallback) throws javax.jms.JMSException;
    Code:
       0: aload_2
       1: ifnonnull     13
       4: aload_0
       5: aload_1
       6: invokevirtual #250                // Method syncSendPacket:(Lorg/apache/activemq/command/Command;)Lorg/apache/activemq/command/Response;
       9: pop
      10: goto          58
      13: aload_0
      14: invokevirtual #245                // Method isClosed:()Z
      17: ifeq          28
      20: new           #246                // class org/apache/activemq/ConnectionClosedException
      23: dup
      24: invokespecial #247                // Method org/apache/activemq/ConnectionClosedException."<init>":()V
      27: athrow
      28: aload_0
      29: getfield      #10                 // Field transport:Lorg/apache/activemq/transport/Transport;
      32: aload_1
      33: new           #251                // class org/apache/activemq/ActiveMQConnection$2
      36: dup
      37: aload_0
      38: aload_2
      39: aload_1
      40: invokespecial #252                // Method org/apache/activemq/ActiveMQConnection$2."<init>":(Lorg/apache/activemq/ActiveMQConnection;Lorg/apache/activemq/AsyncCallback;Lorg/apache/activemq/command/Command;)V
      43: invokeinterface #253,  3          // InterfaceMethod org/apache/activemq/transport/Transport.asyncRequest:(Ljava/lang/Object;Lorg/apache/activemq/transport/ResponseCallback;)Lorg/apache/activemq/transport/FutureResponse;
      48: pop
      49: goto          58
      52: astore_3
      53: aload_3
      54: invokestatic  #164                // Method org/apache/activemq/util/JMSExceptionSupport.create:(Ljava/lang/Exception;)Ljavax/jms/JMSException;
      57: athrow
      58: return
    Exception table:
       from    to  target type
          28    49    52   Class java/io/IOException

  public org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command) throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: invokevirtual #245                // Method isClosed:()Z
       4: ifeq          15
       7: new           #246                // class org/apache/activemq/ConnectionClosedException
      10: dup
      11: invokespecial #247                // Method org/apache/activemq/ConnectionClosedException."<init>":()V
      14: athrow
      15: aload_0
      16: getfield      #10                 // Field transport:Lorg/apache/activemq/transport/Transport;
      19: aload_1
      20: invokeinterface #254,  2          // InterfaceMethod org/apache/activemq/transport/Transport.request:(Ljava/lang/Object;)Ljava/lang/Object;
      25: checkcast     #255                // class org/apache/activemq/command/Response
      28: astore_2
      29: aload_2
      30: invokevirtual #256                // Method org/apache/activemq/command/Response.isException:()Z
      33: ifeq          179
      36: aload_2
      37: checkcast     #257                // class org/apache/activemq/command/ExceptionResponse
      40: astore_3
      41: aload_3
      42: invokevirtual #258                // Method org/apache/activemq/command/ExceptionResponse.getException:()Ljava/lang/Throwable;
      45: instanceof    #120                // class javax/jms/JMSException
      48: ifeq          59
      51: aload_3
      52: invokevirtual #258                // Method org/apache/activemq/command/ExceptionResponse.getException:()Ljava/lang/Throwable;
      55: checkcast     #120                // class javax/jms/JMSException
      58: athrow
      59: aload_0
      60: invokevirtual #245                // Method isClosed:()Z
      63: ifne          76
      66: aload_0
      67: getfield      #12                 // Field closing:Ljava/util/concurrent/atomic/AtomicBoolean;
      70: invokevirtual #155                // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
      73: ifeq          87
      76: getstatic     #11                 // Field LOG:Lorg/slf4j/Logger;
      79: ldc_w         #259                // String Received an exception but connection is closing
      82: invokeinterface #260,  2          // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;)V
      87: aconst_null
      88: astore        4
      90: aload_3
      91: invokevirtual #258                // Method org/apache/activemq/command/ExceptionResponse.getException:()Ljava/lang/Throwable;
      94: invokestatic  #261                // Method org/apache/activemq/util/JMSExceptionSupport.create:(Ljava/lang/Throwable;)Ljavax/jms/JMSException;
      97: astore        4
      99: goto          137
     102: astore        5
     104: getstatic     #11                 // Field LOG:Lorg/slf4j/Logger;
     107: new           #123                // class java/lang/StringBuilder
     110: dup
     111: invokespecial #124                // Method java/lang/StringBuilder."<init>":()V
     114: ldc_w         #262                // String Caught an exception trying to create a JMSException for
     117: invokevirtual #126                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     120: aload_3
     121: invokevirtual #258                // Method org/apache/activemq/command/ExceptionResponse.getException:()Ljava/lang/Throwable;
     124: invokevirtual #188                // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     127: invokevirtual #130                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     130: aload         5
     132: invokeinterface #263,  3          // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;Ljava/lang/Throwable;)V
     137: aload_3
     138: invokevirtual #258                // Method org/apache/activemq/command/ExceptionResponse.getException:()Ljava/lang/Throwable;
     141: instanceof    #264                // class java/lang/SecurityException
     144: ifeq          171
     147: aload_1
     148: instanceof    #85                 // class org/apache/activemq/command/ConnectionInfo
     151: ifeq          171
     154: aload_0
     155: getfield      #10                 // Field transport:Lorg/apache/activemq/transport/Transport;
     158: astore        5
     160: aconst_null
     161: aload         5
     163: if_acmpeq     171
     166: aload         5
     168: invokestatic  #191                // Method org/apache/activemq/util/ServiceSupport.dispose:(Lorg/apache/activemq/Service;)V
     171: aload         4
     173: ifnull        179
     176: aload         4
     178: athrow
     179: aload_2
     180: areturn
     181: astore_2
     182: aload_2
     183: invokestatic  #164                // Method org/apache/activemq/util/JMSExceptionSupport.create:(Ljava/lang/Exception;)Ljavax/jms/JMSException;
     186: athrow
    Exception table:
       from    to  target type
          90    99   102   Class java/lang/Throwable
          15   180   181   Class java/io/IOException

  public org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command, int) throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: invokevirtual #245                // Method isClosed:()Z
       4: ifne          17
       7: aload_0
       8: getfield      #12                 // Field closing:Ljava/util/concurrent/atomic/AtomicBoolean;
      11: invokevirtual #155                // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
      14: ifeq          25
      17: new           #246                // class org/apache/activemq/ConnectionClosedException
      20: dup
      21: invokespecial #247                // Method org/apache/activemq/ConnectionClosedException."<init>":()V
      24: athrow
      25: aload_0
      26: aload_1
      27: iload_2
      28: invokespecial #177                // Method doSyncSendPacket:(Lorg/apache/activemq/command/Command;I)Lorg/apache/activemq/command/Response;
      31: areturn

  private org.apache.activemq.command.Response doSyncSendPacket(org.apache.activemq.command.Command, int) throws javax.jms.JMSException;
    Code:
       0: iload_2
       1: ifle          18
       4: aload_0
       5: getfield      #10                 // Field transport:Lorg/apache/activemq/transport/Transport;
       8: aload_1
       9: iload_2
      10: invokeinterface #265,  3          // InterfaceMethod org/apache/activemq/transport/Transport.request:(Ljava/lang/Object;I)Ljava/lang/Object;
      15: goto          28
      18: aload_0
      19: getfield      #10                 // Field transport:Lorg/apache/activemq/transport/Transport;
      22: aload_1
      23: invokeinterface #254,  2          // InterfaceMethod org/apache/activemq/transport/Transport.request:(Ljava/lang/Object;)Ljava/lang/Object;
      28: checkcast     #255                // class org/apache/activemq/command/Response
      31: checkcast     #255                // class org/apache/activemq/command/Response
      34: astore_3
      35: aload_3
      36: ifnull        81
      39: aload_3
      40: invokevirtual #256                // Method org/apache/activemq/command/Response.isException:()Z
      43: ifeq          81
      46: aload_3
      47: checkcast     #257                // class org/apache/activemq/command/ExceptionResponse
      50: astore        4
      52: aload         4
      54: invokevirtual #258                // Method org/apache/activemq/command/ExceptionResponse.getException:()Ljava/lang/Throwable;
      57: instanceof    #120                // class javax/jms/JMSException
      60: ifeq          72
      63: aload         4
      65: invokevirtual #258                // Method org/apache/activemq/command/ExceptionResponse.getException:()Ljava/lang/Throwable;
      68: checkcast     #120                // class javax/jms/JMSException
      71: athrow
      72: aload         4
      74: invokevirtual #258                // Method org/apache/activemq/command/ExceptionResponse.getException:()Ljava/lang/Throwable;
      77: invokestatic  #261                // Method org/apache/activemq/util/JMSExceptionSupport.create:(Ljava/lang/Throwable;)Ljavax/jms/JMSException;
      80: athrow
      81: aload_3
      82: areturn
      83: astore_3
      84: aload_3
      85: invokestatic  #164                // Method org/apache/activemq/util/JMSExceptionSupport.create:(Ljava/lang/Exception;)Ljavax/jms/JMSException;
      88: athrow
    Exception table:
       from    to  target type
           0    82    83   Class java/io/IOException

  public org.apache.activemq.management.StatsImpl getStats();
    Code:
       0: aload_0
       1: getfield      #103                // Field stats:Lorg/apache/activemq/management/JMSConnectionStatsImpl;
       4: areturn

  protected synchronized void checkClosedOrFailed() throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: invokevirtual #266                // Method checkClosed:()V
       4: aload_0
       5: getfield      #40                 // Field transportFailed:Ljava/util/concurrent/atomic/AtomicBoolean;
       8: invokevirtual #155                // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
      11: ifeq          26
      14: new           #267                // class org/apache/activemq/ConnectionFailedException
      17: dup
      18: aload_0
      19: getfield      #268                // Field firstFailureError:Ljava/io/IOException;
      22: invokespecial #269                // Method org/apache/activemq/ConnectionFailedException."<init>":(Ljava/io/IOException;)V
      25: athrow
      26: return

  protected synchronized void checkClosed() throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: getfield      #39                 // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: invokevirtual #155                // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
       7: ifeq          18
      10: new           #246                // class org/apache/activemq/ConnectionClosedException
      13: dup
      14: invokespecial #247                // Method org/apache/activemq/ConnectionClosedException."<init>":()V
      17: athrow
      18: return

  protected void ensureConnectionInfoSent() throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: getfield      #64                 // Field ensureConnectionInfoSentMutex:Ljava/lang/Object;
       4: dup
       5: astore_1
       6: monitorenter
       7: aload_0
       8: getfield      #142                // Field isConnectionInfoSentToBroker:Z
      11: ifne          24
      14: aload_0
      15: getfield      #39                 // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;
      18: invokevirtual #155                // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
      21: ifeq          27
      24: aload_1
      25: monitorexit
      26: return
      27: aload_0
      28: getfield      #89                 // Field info:Lorg/apache/activemq/command/ConnectionInfo;
      31: invokevirtual #137                // Method org/apache/activemq/command/ConnectionInfo.getClientId:()Ljava/lang/String;
      34: ifnull        53
      37: aload_0
      38: getfield      #89                 // Field info:Lorg/apache/activemq/command/ConnectionInfo;
      41: invokevirtual #137                // Method org/apache/activemq/command/ConnectionInfo.getClientId:()Ljava/lang/String;
      44: invokevirtual #270                // Method java/lang/String.trim:()Ljava/lang/String;
      47: invokevirtual #271                // Method java/lang/String.length:()I
      50: ifne          67
      53: aload_0
      54: getfield      #89                 // Field info:Lorg/apache/activemq/command/ConnectionInfo;
      57: aload_0
      58: getfield      #73                 // Field clientIdGenerator:Lorg/apache/activemq/util/IdGenerator;
      61: invokevirtual #84                 // Method org/apache/activemq/util/IdGenerator.generateId:()Ljava/lang/String;
      64: invokevirtual #144                // Method org/apache/activemq/command/ConnectionInfo.setClientId:(Ljava/lang/String;)V
      67: aload_0
      68: aload_0
      69: getfield      #89                 // Field info:Lorg/apache/activemq/command/ConnectionInfo;
      72: invokevirtual #272                // Method org/apache/activemq/command/ConnectionInfo.copy:()Lorg/apache/activemq/command/ConnectionInfo;
      75: invokevirtual #250                // Method syncSendPacket:(Lorg/apache/activemq/command/Command;)Lorg/apache/activemq/command/Response;
      78: pop
      79: aload_0
      80: iconst_1
      81: putfield      #142                // Field isConnectionInfoSentToBroker:Z
      84: new           #198                // class org/apache/activemq/command/ConsumerId
      87: dup
      88: new           #93                 // class org/apache/activemq/command/SessionId
      91: dup
      92: aload_0
      93: getfield      #89                 // Field info:Lorg/apache/activemq/command/ConnectionInfo;
      96: invokevirtual #94                 // Method org/apache/activemq/command/ConnectionInfo.getConnectionId:()Lorg/apache/activemq/command/ConnectionId;
      99: ldc2_w        #95                 // long -1l
     102: invokespecial #97                 // Method org/apache/activemq/command/SessionId."<init>":(Lorg/apache/activemq/command/ConnectionId;J)V
     105: aload_0
     106: getfield      #50                 // Field consumerIdGenerator:Lorg/apache/activemq/util/LongSequenceGenerator;
     109: invokevirtual #136                // Method org/apache/activemq/util/LongSequenceGenerator.getNextSequenceId:()J
     112: invokespecial #199                // Method org/apache/activemq/command/ConsumerId."<init>":(Lorg/apache/activemq/command/SessionId;J)V
     115: astore_2
     116: aload_0
     117: getfield      #28                 // Field watchTopicAdvisories:Z
     120: ifeq          136
     123: aload_0
     124: new           #273                // class org/apache/activemq/AdvisoryConsumer
     127: dup
     128: aload_0
     129: aload_2
     130: invokespecial #274                // Method org/apache/activemq/AdvisoryConsumer."<init>":(Lorg/apache/activemq/ActiveMQConnection;Lorg/apache/activemq/command/ConsumerId;)V
     133: putfield      #159                // Field advisoryConsumer:Lorg/apache/activemq/AdvisoryConsumer;
     136: aload_1
     137: monitorexit
     138: goto          146
     141: astore_3
     142: aload_1
     143: monitorexit
     144: aload_3
     145: athrow
     146: return
    Exception table:
       from    to  target type
           7    26   141   any
          27   138   141   any
         141   144   141   any

  public synchronized boolean isWatchTopicAdvisories();
    Code:
       0: aload_0
       1: getfield      #28                 // Field watchTopicAdvisories:Z
       4: ireturn

  public synchronized void setWatchTopicAdvisories(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #28                 // Field watchTopicAdvisories:Z
       5: return

  public boolean isUseAsyncSend();
    Code:
       0: aload_0
       1: getfield      #275                // Field useAsyncSend:Z
       4: ireturn

  public void setUseAsyncSend(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #275                // Field useAsyncSend:Z
       5: return

  public boolean isAlwaysSyncSend();
    Code:
       0: aload_0
       1: getfield      #276                // Field alwaysSyncSend:Z
       4: ireturn

  public void setAlwaysSyncSend(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #276                // Field alwaysSyncSend:Z
       5: return

  public boolean isMessagePrioritySupported();
    Code:
       0: aload_0
       1: getfield      #66                 // Field messagePrioritySupported:Z
       4: ireturn

  public void setMessagePrioritySupported(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #66                 // Field messagePrioritySupported:Z
       5: return

  public void cleanup() throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: getfield      #159                // Field advisoryConsumer:Lorg/apache/activemq/AdvisoryConsumer;
       4: ifnull        26
       7: aload_0
       8: invokevirtual #277                // Method isTransportFailed:()Z
      11: ifne          26
      14: aload_0
      15: getfield      #159                // Field advisoryConsumer:Lorg/apache/activemq/AdvisoryConsumer;
      18: invokevirtual #160                // Method org/apache/activemq/AdvisoryConsumer.dispose:()V
      21: aload_0
      22: aconst_null
      23: putfield      #159                // Field advisoryConsumer:Lorg/apache/activemq/AdvisoryConsumer;
      26: aload_0
      27: getfield      #43                 // Field sessions:Ljava/util/concurrent/CopyOnWriteArrayList;
      30: invokevirtual #148                // Method java/util/concurrent/CopyOnWriteArrayList.iterator:()Ljava/util/Iterator;
      33: astore_1
      34: aload_1
      35: invokeinterface #149,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      40: ifeq          60
      43: aload_1
      44: invokeinterface #150,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      49: checkcast     #131                // class org/apache/activemq/ActiveMQSession
      52: astore_2
      53: aload_2
      54: invokevirtual #165                // Method org/apache/activemq/ActiveMQSession.dispose:()V
      57: goto          34
      60: aload_0
      61: getfield      #44                 // Field connectionConsumers:Ljava/util/concurrent/CopyOnWriteArrayList;
      64: invokevirtual #148                // Method java/util/concurrent/CopyOnWriteArrayList.iterator:()Ljava/util/Iterator;
      67: astore_1
      68: aload_1
      69: invokeinterface #149,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      74: ifeq          94
      77: aload_1
      78: invokeinterface #150,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      83: checkcast     #168                // class org/apache/activemq/ActiveMQConnectionConsumer
      86: astore_2
      87: aload_2
      88: invokevirtual #169                // Method org/apache/activemq/ActiveMQConnectionConsumer.dispose:()V
      91: goto          68
      94: aload_0
      95: getfield      #45                 // Field inputStreams:Ljava/util/concurrent/CopyOnWriteArrayList;
      98: invokevirtual #148                // Method java/util/concurrent/CopyOnWriteArrayList.iterator:()Ljava/util/Iterator;
     101: astore_1
     102: aload_1
     103: invokeinterface #149,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
     108: ifeq          128
     111: aload_1
     112: invokeinterface #150,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     117: checkcast     #170                // class org/apache/activemq/ActiveMQInputStream
     120: astore_2
     121: aload_2
     122: invokevirtual #171                // Method org/apache/activemq/ActiveMQInputStream.dispose:()V
     125: goto          102
     128: aload_0
     129: getfield      #46                 // Field outputStreams:Ljava/util/concurrent/CopyOnWriteArrayList;
     132: invokevirtual #148                // Method java/util/concurrent/CopyOnWriteArrayList.iterator:()Ljava/util/Iterator;
     135: astore_1
     136: aload_1
     137: invokeinterface #149,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
     142: ifeq          162
     145: aload_1
     146: invokeinterface #150,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     151: checkcast     #172                // class org/apache/activemq/ActiveMQOutputStream
     154: astore_2
     155: aload_2
     156: invokevirtual #173                // Method org/apache/activemq/ActiveMQOutputStream.dispose:()V
     159: goto          136
     162: aload_0
     163: getfield      #142                // Field isConnectionInfoSentToBroker:Z
     166: ifeq          206
     169: aload_0
     170: getfield      #40                 // Field transportFailed:Ljava/util/concurrent/atomic/AtomicBoolean;
     173: invokevirtual #155                // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
     176: ifne          201
     179: aload_0
     180: getfield      #12                 // Field closing:Ljava/util/concurrent/atomic/AtomicBoolean;
     183: invokevirtual #155                // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
     186: ifne          201
     189: aload_0
     190: aload_0
     191: getfield      #89                 // Field info:Lorg/apache/activemq/command/ConnectionInfo;
     194: invokevirtual #175                // Method org/apache/activemq/command/ConnectionInfo.createRemoveCommand:()Lorg/apache/activemq/command/RemoveInfo;
     197: invokevirtual #250                // Method syncSendPacket:(Lorg/apache/activemq/command/Command;)Lorg/apache/activemq/command/Response;
     200: pop
     201: aload_0
     202: iconst_0
     203: putfield      #142                // Field isConnectionInfoSentToBroker:Z
     206: aload_0
     207: getfield      #145                // Field userSpecifiedClientID:Z
     210: ifeq          226
     213: aload_0
     214: getfield      #89                 // Field info:Lorg/apache/activemq/command/ConnectionInfo;
     217: aconst_null
     218: invokevirtual #144                // Method org/apache/activemq/command/ConnectionInfo.setClientId:(Ljava/lang/String;)V
     221: aload_0
     222: iconst_0
     223: putfield      #145                // Field userSpecifiedClientID:Z
     226: aload_0
     227: iconst_0
     228: putfield      #138                // Field clientIDSet:Z
     231: aload_0
     232: getfield      #38                 // Field started:Ljava/util/concurrent/atomic/AtomicBoolean;
     235: iconst_0
     236: invokevirtual #156                // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V
     239: return

  public void changeUserInfo(java.lang.String, java.lang.String) throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: getfield      #142                // Field isConnectionInfoSentToBroker:Z
       4: ifeq          18
       7: new           #139                // class javax/jms/IllegalStateException
      10: dup
      11: ldc_w         #278                // String changeUserInfo used Connection is not allowed
      14: invokespecial #141                // Method javax/jms/IllegalStateException."<init>":(Ljava/lang/String;)V
      17: athrow
      18: aload_0
      19: getfield      #89                 // Field info:Lorg/apache/activemq/command/ConnectionInfo;
      22: aload_1
      23: invokevirtual #108                // Method org/apache/activemq/command/ConnectionInfo.setUserName:(Ljava/lang/String;)V
      26: aload_0
      27: getfield      #89                 // Field info:Lorg/apache/activemq/command/ConnectionInfo;
      30: aload_2
      31: invokevirtual #109                // Method org/apache/activemq/command/ConnectionInfo.setPassword:(Ljava/lang/String;)V
      34: return

  public java.lang.String getResourceManagerId() throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: invokevirtual #279                // Method isRmIdFromConnectionId:()Z
       4: ifeq          18
       7: aload_0
       8: getfield      #89                 // Field info:Lorg/apache/activemq/command/ConnectionInfo;
      11: invokevirtual #94                 // Method org/apache/activemq/command/ConnectionInfo.getConnectionId:()Lorg/apache/activemq/command/ConnectionId;
      14: invokevirtual #280                // Method org/apache/activemq/command/ConnectionId.getValue:()Ljava/lang/String;
      17: areturn
      18: aload_0
      19: invokespecial #281                // Method waitForBrokerInfo:()V
      22: aload_0
      23: getfield      #7                  // Field brokerInfo:Lorg/apache/activemq/command/BrokerInfo;
      26: ifnonnull     40
      29: new           #120                // class javax/jms/JMSException
      32: dup
      33: ldc_w         #282                // String Connection failed before Broker info was received.
      36: invokespecial #122                // Method javax/jms/JMSException."<init>":(Ljava/lang/String;)V
      39: athrow
      40: aload_0
      41: getfield      #7                  // Field brokerInfo:Lorg/apache/activemq/command/BrokerInfo;
      44: invokevirtual #283                // Method org/apache/activemq/command/BrokerInfo.getBrokerId:()Lorg/apache/activemq/command/BrokerId;
      47: invokevirtual #284                // Method org/apache/activemq/command/BrokerId.getValue:()Ljava/lang/String;
      50: areturn

  public java.lang.String getBrokerName();
    Code:
       0: aload_0
       1: getfield      #6                  // Field brokerInfoReceived:Ljava/util/concurrent/CountDownLatch;
       4: ldc2_w        #76                 // long 5l
       7: getstatic     #78                 // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
      10: invokevirtual #285                // Method java/util/concurrent/CountDownLatch.await:(JLjava/util/concurrent/TimeUnit;)Z
      13: pop
      14: aload_0
      15: getfield      #7                  // Field brokerInfo:Lorg/apache/activemq/command/BrokerInfo;
      18: ifnonnull     23
      21: aconst_null
      22: areturn
      23: aload_0
      24: getfield      #7                  // Field brokerInfo:Lorg/apache/activemq/command/BrokerInfo;
      27: invokevirtual #286                // Method org/apache/activemq/command/BrokerInfo.getBrokerName:()Ljava/lang/String;
      30: areturn
      31: astore_1
      32: invokestatic  #193                // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      35: invokevirtual #194                // Method java/lang/Thread.interrupt:()V
      38: aconst_null
      39: areturn
    Exception table:
       from    to  target type
           0    22    31   Class java/lang/InterruptedException
          23    30    31   Class java/lang/InterruptedException

  public org.apache.activemq.command.BrokerInfo getBrokerInfo();
    Code:
       0: aload_0
       1: getfield      #7                  // Field brokerInfo:Lorg/apache/activemq/command/BrokerInfo;
       4: areturn

  public org.apache.activemq.RedeliveryPolicy getRedeliveryPolicy() throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: getfield      #288                // Field redeliveryPolicyMap:Lorg/apache/activemq/broker/region/policy/RedeliveryPolicyMap;
       4: invokevirtual #289                // Method org/apache/activemq/broker/region/policy/RedeliveryPolicyMap.getDefaultEntry:()Lorg/apache/activemq/RedeliveryPolicy;
       7: areturn

  public void setRedeliveryPolicy(org.apache.activemq.RedeliveryPolicy);
    Code:
       0: aload_0
       1: getfield      #288                // Field redeliveryPolicyMap:Lorg/apache/activemq/broker/region/policy/RedeliveryPolicyMap;
       4: aload_1
       5: invokevirtual #290                // Method org/apache/activemq/broker/region/policy/RedeliveryPolicyMap.setDefaultEntry:(Lorg/apache/activemq/RedeliveryPolicy;)V
       8: return

  public org.apache.activemq.blob.BlobTransferPolicy getBlobTransferPolicy();
    Code:
       0: aload_0
       1: getfield      #291                // Field blobTransferPolicy:Lorg/apache/activemq/blob/BlobTransferPolicy;
       4: ifnonnull     15
       7: aload_0
       8: aload_0
       9: invokevirtual #292                // Method createBlobTransferPolicy:()Lorg/apache/activemq/blob/BlobTransferPolicy;
      12: putfield      #291                // Field blobTransferPolicy:Lorg/apache/activemq/blob/BlobTransferPolicy;
      15: aload_0
      16: getfield      #291                // Field blobTransferPolicy:Lorg/apache/activemq/blob/BlobTransferPolicy;
      19: areturn

  public void setBlobTransferPolicy(org.apache.activemq.blob.BlobTransferPolicy);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #291                // Field blobTransferPolicy:Lorg/apache/activemq/blob/BlobTransferPolicy;
       5: return

  public boolean isAlwaysSessionAsync();
    Code:
       0: aload_0
       1: getfield      #18                 // Field alwaysSessionAsync:Z
       4: ireturn

  public void setAlwaysSessionAsync(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #18                 // Field alwaysSessionAsync:Z
       5: return

  public boolean isOptimizeAcknowledge();
    Code:
       0: aload_0
       1: getfield      #5                  // Field optimizeAcknowledge:Z
       4: ireturn

  public void setOptimizeAcknowledge(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #5                  // Field optimizeAcknowledge:Z
       5: return

  public void setOptimizeAcknowledgeTimeOut(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #24                 // Field optimizeAcknowledgeTimeOut:J
       5: return

  public long getOptimizeAcknowledgeTimeOut();
    Code:
       0: aload_0
       1: getfield      #24                 // Field optimizeAcknowledgeTimeOut:J
       4: lreturn

  public long getWarnAboutUnstartedConnectionTimeout();
    Code:
       0: aload_0
       1: getfield      #31                 // Field warnAboutUnstartedConnectionTimeout:J
       4: lreturn

  public void setWarnAboutUnstartedConnectionTimeout(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #31                 // Field warnAboutUnstartedConnectionTimeout:J
       5: return

  public int getSendTimeout();
    Code:
       0: aload_0
       1: getfield      #32                 // Field sendTimeout:I
       4: ireturn

  public void setSendTimeout(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #32                 // Field sendTimeout:I
       5: return

  public boolean isSendAcksAsync();
    Code:
       0: aload_0
       1: getfield      #33                 // Field sendAcksAsync:Z
       4: ireturn

  public void setSendAcksAsync(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #33                 // Field sendAcksAsync:Z
       5: return

  public long getTimeCreated();
    Code:
       0: aload_0
       1: getfield      #106                // Field timeCreated:J
       4: lreturn

  private void waitForBrokerInfo() throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: getfield      #6                  // Field brokerInfoReceived:Ljava/util/concurrent/CountDownLatch;
       4: invokevirtual #293                // Method java/util/concurrent/CountDownLatch.await:()V
       7: goto          22
      10: astore_1
      11: invokestatic  #193                // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      14: invokevirtual #194                // Method java/lang/Thread.interrupt:()V
      17: aload_1
      18: invokestatic  #164                // Method org/apache/activemq/util/JMSExceptionSupport.create:(Ljava/lang/Exception;)Ljavax/jms/JMSException;
      21: athrow
      22: return
    Exception table:
       from    to  target type
           0     7    10   Class java/lang/InterruptedException

  public org.apache.activemq.transport.Transport getTransport();
    Code:
       0: aload_0
       1: getfield      #10                 // Field transport:Lorg/apache/activemq/transport/Transport;
       4: areturn

  public void addProducer(org.apache.activemq.command.ProducerId, org.apache.activemq.ActiveMQMessageProducer);
    Code:
       0: aload_0
       1: getfield      #8                  // Field producers:Ljava/util/concurrent/ConcurrentHashMap;
       4: aload_1
       5: aload_2
       6: invokevirtual #294                // Method java/util/concurrent/ConcurrentHashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       9: pop
      10: return

  public void removeProducer(org.apache.activemq.command.ProducerId);
    Code:
       0: aload_0
       1: getfield      #8                  // Field producers:Ljava/util/concurrent/ConcurrentHashMap;
       4: aload_1
       5: invokevirtual #295                // Method java/util/concurrent/ConcurrentHashMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
       8: pop
       9: return

  public void addDispatcher(org.apache.activemq.command.ConsumerId, org.apache.activemq.ActiveMQDispatcher);
    Code:
       0: aload_0
       1: getfield      #9                  // Field dispatchers:Ljava/util/concurrent/ConcurrentHashMap;
       4: aload_1
       5: aload_2
       6: invokevirtual #294                // Method java/util/concurrent/ConcurrentHashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       9: pop
      10: return

  public void removeDispatcher(org.apache.activemq.command.ConsumerId);
    Code:
       0: aload_0
       1: getfield      #9                  // Field dispatchers:Ljava/util/concurrent/ConcurrentHashMap;
       4: aload_1
       5: invokevirtual #295                // Method java/util/concurrent/ConcurrentHashMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
       8: pop
       9: return

  public boolean hasDispatcher(org.apache.activemq.command.ConsumerId);
    Code:
       0: aload_0
       1: getfield      #9                  // Field dispatchers:Ljava/util/concurrent/ConcurrentHashMap;
       4: aload_1
       5: invokevirtual #296                // Method java/util/concurrent/ConcurrentHashMap.containsKey:(Ljava/lang/Object;)Z
       8: ireturn

  public void onCommand(java.lang.Object);
    Code:
       0: aload_1
       1: checkcast     #297                // class org/apache/activemq/command/Command
       4: astore_2
       5: aload_0
       6: getfield      #39                 // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;
       9: invokevirtual #155                // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
      12: ifne          44
      15: aload_2
      16: ifnull        44
      19: aload_2
      20: new           #298                // class org/apache/activemq/ActiveMQConnection$3
      23: dup
      24: aload_0
      25: aload_2
      26: invokespecial #299                // Method org/apache/activemq/ActiveMQConnection$3."<init>":(Lorg/apache/activemq/ActiveMQConnection;Lorg/apache/activemq/command/Command;)V
      29: invokeinterface #300,  2          // InterfaceMethod org/apache/activemq/command/Command.visit:(Lorg/apache/activemq/state/CommandVisitor;)Lorg/apache/activemq/command/Response;
      34: pop
      35: goto          44
      38: astore_3
      39: aload_0
      40: aload_3
      41: invokevirtual #301                // Method onClientInternalException:(Ljava/lang/Throwable;)V
      44: aload_0
      45: getfield      #1                  // Field transportListeners:Ljava/util/concurrent/CopyOnWriteArrayList;
      48: invokevirtual #148                // Method java/util/concurrent/CopyOnWriteArrayList.iterator:()Ljava/util/Iterator;
      51: astore_3
      52: aload_3
      53: invokeinterface #149,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      58: ifeq          83
      61: aload_3
      62: invokeinterface #150,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      67: checkcast     #302                // class org/apache/activemq/transport/TransportListener
      70: astore        4
      72: aload         4
      74: aload_2
      75: invokeinterface #303,  2          // InterfaceMethod org/apache/activemq/transport/TransportListener.onCommand:(Ljava/lang/Object;)V
      80: goto          52
      83: return
    Exception table:
       from    to  target type
          19    35    38   Class java/lang/Exception

  protected void onWireFormatInfo(org.apache.activemq.command.WireFormatInfo);
    Code:
       0: aload_0
       1: getfield      #59                 // Field protocolVersion:Ljava/util/concurrent/atomic/AtomicInteger;
       4: aload_1
       5: invokevirtual #304                // Method org/apache/activemq/command/WireFormatInfo.getVersion:()I
       8: invokevirtual #305                // Method java/util/concurrent/atomic/AtomicInteger.set:(I)V
      11: return

  public void onClientInternalException(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #39                 // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: invokevirtual #155                // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
       7: ifne          75
      10: aload_0
      11: getfield      #12                 // Field closing:Ljava/util/concurrent/atomic/AtomicBoolean;
      14: invokevirtual #155                // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
      17: ifne          75
      20: aload_0
      21: getfield      #3                  // Field clientInternalExceptionListener:Lorg/apache/activemq/ClientInternalExceptionListener;
      24: ifnull        46
      27: aload_0
      28: getfield      #4                  // Field executor:Ljava/util/concurrent/ThreadPoolExecutor;
      31: new           #306                // class org/apache/activemq/ActiveMQConnection$4
      34: dup
      35: aload_0
      36: aload_1
      37: invokespecial #307                // Method org/apache/activemq/ActiveMQConnection$4."<init>":(Lorg/apache/activemq/ActiveMQConnection;Ljava/lang/Throwable;)V
      40: invokevirtual #308                // Method java/util/concurrent/ThreadPoolExecutor.execute:(Ljava/lang/Runnable;)V
      43: goto          75
      46: getstatic     #11                 // Field LOG:Lorg/slf4j/Logger;
      49: new           #123                // class java/lang/StringBuilder
      52: dup
      53: invokespecial #124                // Method java/lang/StringBuilder."<init>":()V
      56: ldc_w         #309                // String Async client internal exception occurred with no exception listener registered:
      59: invokevirtual #126                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      62: aload_1
      63: invokevirtual #188                // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      66: invokevirtual #130                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      69: aload_1
      70: invokeinterface #310,  3          // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Throwable;)V
      75: return

  public void onAsyncException(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #39                 // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: invokevirtual #155                // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
       7: ifne          92
      10: aload_0
      11: getfield      #12                 // Field closing:Ljava/util/concurrent/atomic/AtomicBoolean;
      14: invokevirtual #155                // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
      17: ifne          92
      20: aload_0
      21: getfield      #2                  // Field exceptionListener:Ljavax/jms/ExceptionListener;
      24: ifnull        63
      27: aload_1
      28: instanceof    #120                // class javax/jms/JMSException
      31: ifne          39
      34: aload_1
      35: invokestatic  #261                // Method org/apache/activemq/util/JMSExceptionSupport.create:(Ljava/lang/Throwable;)Ljavax/jms/JMSException;
      38: astore_1
      39: aload_1
      40: checkcast     #120                // class javax/jms/JMSException
      43: astore_2
      44: aload_0
      45: getfield      #4                  // Field executor:Ljava/util/concurrent/ThreadPoolExecutor;
      48: new           #311                // class org/apache/activemq/ActiveMQConnection$5
      51: dup
      52: aload_0
      53: aload_2
      54: invokespecial #312                // Method org/apache/activemq/ActiveMQConnection$5."<init>":(Lorg/apache/activemq/ActiveMQConnection;Ljavax/jms/JMSException;)V
      57: invokevirtual #308                // Method java/util/concurrent/ThreadPoolExecutor.execute:(Ljava/lang/Runnable;)V
      60: goto          92
      63: getstatic     #11                 // Field LOG:Lorg/slf4j/Logger;
      66: new           #123                // class java/lang/StringBuilder
      69: dup
      70: invokespecial #124                // Method java/lang/StringBuilder."<init>":()V
      73: ldc_w         #313                // String Async exception with no exception listener:
      76: invokevirtual #126                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      79: aload_1
      80: invokevirtual #188                // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      83: invokevirtual #130                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      86: aload_1
      87: invokeinterface #310,  3          // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Throwable;)V
      92: return

  public void onException(java.io.IOException);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #314                // Method onAsyncException:(Ljava/lang/Throwable;)V
       5: aload_0
       6: getfield      #12                 // Field closing:Ljava/util/concurrent/atomic/AtomicBoolean;
       9: invokevirtual #155                // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
      12: ifne          41
      15: aload_0
      16: getfield      #39                 // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;
      19: invokevirtual #155                // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
      22: ifne          41
      25: aload_0
      26: getfield      #4                  // Field executor:Ljava/util/concurrent/ThreadPoolExecutor;
      29: new           #315                // class org/apache/activemq/ActiveMQConnection$6
      32: dup
      33: aload_0
      34: aload_1
      35: invokespecial #316                // Method org/apache/activemq/ActiveMQConnection$6."<init>":(Lorg/apache/activemq/ActiveMQConnection;Ljava/io/IOException;)V
      38: invokevirtual #308                // Method java/util/concurrent/ThreadPoolExecutor.execute:(Ljava/lang/Runnable;)V
      41: return

  public void transportInterupted();
    Code:
       0: aload_0
       1: getfield      #65                 // Field transportInterruptionProcessingComplete:Ljava/util/concurrent/atomic/AtomicInteger;
       4: iconst_1
       5: invokevirtual #305                // Method java/util/concurrent/atomic/AtomicInteger.set:(I)V
       8: aload_0
       9: getfield      #43                 // Field sessions:Ljava/util/concurrent/CopyOnWriteArrayList;
      12: invokevirtual #148                // Method java/util/concurrent/CopyOnWriteArrayList.iterator:()Ljava/util/Iterator;
      15: astore_1
      16: aload_1
      17: invokeinterface #149,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      22: ifeq          46
      25: aload_1
      26: invokeinterface #150,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      31: checkcast     #131                // class org/apache/activemq/ActiveMQSession
      34: astore_2
      35: aload_2
      36: aload_0
      37: getfield      #65                 // Field transportInterruptionProcessingComplete:Ljava/util/concurrent/atomic/AtomicInteger;
      40: invokevirtual #317                // Method org/apache/activemq/ActiveMQSession.clearMessagesInProgress:(Ljava/util/concurrent/atomic/AtomicInteger;)V
      43: goto          16
      46: aload_0
      47: getfield      #44                 // Field connectionConsumers:Ljava/util/concurrent/CopyOnWriteArrayList;
      50: invokevirtual #318                // Method java/util/concurrent/CopyOnWriteArrayList.iterator:()Ljava/util/Iterator;
      53: astore_1
      54: aload_1
      55: invokeinterface #149,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      60: ifeq          84
      63: aload_1
      64: invokeinterface #150,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      69: checkcast     #168                // class org/apache/activemq/ActiveMQConnectionConsumer
      72: astore_2
      73: aload_2
      74: aload_0
      75: getfield      #65                 // Field transportInterruptionProcessingComplete:Ljava/util/concurrent/atomic/AtomicInteger;
      78: invokevirtual #319                // Method org/apache/activemq/ActiveMQConnectionConsumer.clearMessagesInProgress:(Ljava/util/concurrent/atomic/AtomicInteger;)V
      81: goto          54
      84: aload_0
      85: getfield      #65                 // Field transportInterruptionProcessingComplete:Ljava/util/concurrent/atomic/AtomicInteger;
      88: invokevirtual #320                // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
      91: ifle          143
      94: getstatic     #11                 // Field LOG:Lorg/slf4j/Logger;
      97: invokeinterface #321,  1          // InterfaceMethod org/slf4j/Logger.isDebugEnabled:()Z
     102: ifeq          139
     105: getstatic     #11                 // Field LOG:Lorg/slf4j/Logger;
     108: new           #123                // class java/lang/StringBuilder
     111: dup
     112: invokespecial #124                // Method java/lang/StringBuilder."<init>":()V
     115: ldc_w         #322                // String transport interrupted - processing required, dispatchers:
     118: invokevirtual #126                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     121: aload_0
     122: getfield      #65                 // Field transportInterruptionProcessingComplete:Ljava/util/concurrent/atomic/AtomicInteger;
     125: invokevirtual #323                // Method java/util/concurrent/atomic/AtomicInteger.get:()I
     128: invokevirtual #127                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     131: invokevirtual #130                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     134: invokeinterface #260,  2          // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;)V
     139: aload_0
     140: invokespecial #324                // Method signalInterruptionProcessingNeeded:()V
     143: aload_0
     144: getfield      #1                  // Field transportListeners:Ljava/util/concurrent/CopyOnWriteArrayList;
     147: invokevirtual #148                // Method java/util/concurrent/CopyOnWriteArrayList.iterator:()Ljava/util/Iterator;
     150: astore_1
     151: aload_1
     152: invokeinterface #149,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
     157: ifeq          179
     160: aload_1
     161: invokeinterface #150,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     166: checkcast     #302                // class org/apache/activemq/transport/TransportListener
     169: astore_2
     170: aload_2
     171: invokeinterface #325,  1          // InterfaceMethod org/apache/activemq/transport/TransportListener.transportInterupted:()V
     176: goto          151
     179: return

  public void transportResumed();
    Code:
       0: aload_0
       1: getfield      #1                  // Field transportListeners:Ljava/util/concurrent/CopyOnWriteArrayList;
       4: invokevirtual #148                // Method java/util/concurrent/CopyOnWriteArrayList.iterator:()Ljava/util/Iterator;
       7: astore_1
       8: aload_1
       9: invokeinterface #149,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      14: ifeq          36
      17: aload_1
      18: invokeinterface #150,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      23: checkcast     #302                // class org/apache/activemq/transport/TransportListener
      26: astore_2
      27: aload_2
      28: invokeinterface #326,  1          // InterfaceMethod org/apache/activemq/transport/TransportListener.transportResumed:()V
      33: goto          8
      36: return

  protected org.apache.activemq.command.ActiveMQTempDestination createTempDestination(boolean) throws javax.jms.JMSException;
    Code:
       0: iload_1
       1: ifeq          29
       4: new           #327                // class org/apache/activemq/command/ActiveMQTempTopic
       7: dup
       8: aload_0
       9: getfield      #89                 // Field info:Lorg/apache/activemq/command/ConnectionInfo;
      12: invokevirtual #94                 // Method org/apache/activemq/command/ConnectionInfo.getConnectionId:()Lorg/apache/activemq/command/ConnectionId;
      15: aload_0
      16: getfield      #52                 // Field tempDestinationIdGenerator:Lorg/apache/activemq/util/LongSequenceGenerator;
      19: invokevirtual #136                // Method org/apache/activemq/util/LongSequenceGenerator.getNextSequenceId:()J
      22: invokespecial #328                // Method org/apache/activemq/command/ActiveMQTempTopic."<init>":(Lorg/apache/activemq/command/ConnectionId;J)V
      25: astore_2
      26: goto          51
      29: new           #329                // class org/apache/activemq/command/ActiveMQTempQueue
      32: dup
      33: aload_0
      34: getfield      #89                 // Field info:Lorg/apache/activemq/command/ConnectionInfo;
      37: invokevirtual #94                 // Method org/apache/activemq/command/ConnectionInfo.getConnectionId:()Lorg/apache/activemq/command/ConnectionId;
      40: aload_0
      41: getfield      #52                 // Field tempDestinationIdGenerator:Lorg/apache/activemq/util/LongSequenceGenerator;
      44: invokevirtual #136                // Method org/apache/activemq/util/LongSequenceGenerator.getNextSequenceId:()J
      47: invokespecial #330                // Method org/apache/activemq/command/ActiveMQTempQueue."<init>":(Lorg/apache/activemq/command/ConnectionId;J)V
      50: astore_2
      51: new           #331                // class org/apache/activemq/command/DestinationInfo
      54: dup
      55: invokespecial #332                // Method org/apache/activemq/command/DestinationInfo."<init>":()V
      58: astore_3
      59: aload_3
      60: aload_0
      61: getfield      #89                 // Field info:Lorg/apache/activemq/command/ConnectionInfo;
      64: invokevirtual #94                 // Method org/apache/activemq/command/ConnectionInfo.getConnectionId:()Lorg/apache/activemq/command/ConnectionId;
      67: invokevirtual #333                // Method org/apache/activemq/command/DestinationInfo.setConnectionId:(Lorg/apache/activemq/command/ConnectionId;)V
      70: aload_3
      71: iconst_0
      72: invokevirtual #334                // Method org/apache/activemq/command/DestinationInfo.setOperationType:(B)V
      75: aload_3
      76: aload_2
      77: invokevirtual #335                // Method org/apache/activemq/command/DestinationInfo.setDestination:(Lorg/apache/activemq/command/ActiveMQDestination;)V
      80: aload_0
      81: aload_3
      82: invokevirtual #250                // Method syncSendPacket:(Lorg/apache/activemq/command/Command;)Lorg/apache/activemq/command/Response;
      85: pop
      86: aload_2
      87: aload_0
      88: invokevirtual #336                // Method org/apache/activemq/command/ActiveMQTempDestination.setConnection:(Lorg/apache/activemq/ActiveMQConnection;)V
      91: aload_0
      92: getfield      #16                 // Field activeTempDestinations:Ljava/util/concurrent/ConcurrentHashMap;
      95: aload_2
      96: aload_2
      97: invokevirtual #294                // Method java/util/concurrent/ConcurrentHashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     100: pop
     101: aload_2
     102: areturn

  public void deleteTempDestination(org.apache.activemq.command.ActiveMQTempDestination) throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: invokevirtual #118                // Method checkClosedOrFailed:()V
       4: aload_0
       5: getfield      #43                 // Field sessions:Ljava/util/concurrent/CopyOnWriteArrayList;
       8: invokevirtual #318                // Method java/util/concurrent/CopyOnWriteArrayList.iterator:()Ljava/util/Iterator;
      11: astore_2
      12: aload_2
      13: invokeinterface #149,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      18: ifeq          53
      21: aload_2
      22: invokeinterface #150,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      27: checkcast     #131                // class org/apache/activemq/ActiveMQSession
      30: astore_3
      31: aload_3
      32: aload_1
      33: invokevirtual #337                // Method org/apache/activemq/ActiveMQSession.isInUse:(Lorg/apache/activemq/command/ActiveMQTempDestination;)Z
      36: ifeq          50
      39: new           #120                // class javax/jms/JMSException
      42: dup
      43: ldc_w         #338                // String A consumer is consuming from the temporary destination
      46: invokespecial #122                // Method javax/jms/JMSException."<init>":(Ljava/lang/String;)V
      49: athrow
      50: goto          12
      53: aload_0
      54: getfield      #16                 // Field activeTempDestinations:Ljava/util/concurrent/ConcurrentHashMap;
      57: aload_1
      58: invokevirtual #295                // Method java/util/concurrent/ConcurrentHashMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      61: pop
      62: new           #331                // class org/apache/activemq/command/DestinationInfo
      65: dup
      66: invokespecial #332                // Method org/apache/activemq/command/DestinationInfo."<init>":()V
      69: astore_2
      70: aload_2
      71: aload_0
      72: getfield      #89                 // Field info:Lorg/apache/activemq/command/ConnectionInfo;
      75: invokevirtual #94                 // Method org/apache/activemq/command/ConnectionInfo.getConnectionId:()Lorg/apache/activemq/command/ConnectionId;
      78: invokevirtual #333                // Method org/apache/activemq/command/DestinationInfo.setConnectionId:(Lorg/apache/activemq/command/ConnectionId;)V
      81: aload_2
      82: iconst_1
      83: invokevirtual #334                // Method org/apache/activemq/command/DestinationInfo.setOperationType:(B)V
      86: aload_2
      87: aload_1
      88: invokevirtual #335                // Method org/apache/activemq/command/DestinationInfo.setDestination:(Lorg/apache/activemq/command/ActiveMQDestination;)V
      91: aload_2
      92: lconst_0
      93: invokevirtual #339                // Method org/apache/activemq/command/DestinationInfo.setTimeout:(J)V
      96: aload_0
      97: aload_2
      98: invokevirtual #250                // Method syncSendPacket:(Lorg/apache/activemq/command/Command;)Lorg/apache/activemq/command/Response;
     101: pop
     102: return

  public boolean isDeleted(org.apache.activemq.command.ActiveMQDestination);
    Code:
       0: aload_0
       1: getfield      #159                // Field advisoryConsumer:Lorg/apache/activemq/AdvisoryConsumer;
       4: ifnonnull     9
       7: iconst_0
       8: ireturn
       9: aload_0
      10: getfield      #16                 // Field activeTempDestinations:Ljava/util/concurrent/ConcurrentHashMap;
      13: aload_1
      14: invokevirtual #340                // Method java/util/concurrent/ConcurrentHashMap.contains:(Ljava/lang/Object;)Z
      17: ifne          24
      20: iconst_1
      21: goto          25
      24: iconst_0
      25: ireturn

  public boolean isCopyMessageOnSend();
    Code:
       0: aload_0
       1: getfield      #23                 // Field copyMessageOnSend:Z
       4: ireturn

  public org.apache.activemq.util.LongSequenceGenerator getLocalTransactionIdGenerator();
    Code:
       0: aload_0
       1: getfield      #53                 // Field localTransactionIdGenerator:Lorg/apache/activemq/util/LongSequenceGenerator;
       4: areturn

  public boolean isUseCompression();
    Code:
       0: aload_0
       1: getfield      #341                // Field useCompression:Z
       4: ireturn

  public void setUseCompression(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #341                // Field useCompression:Z
       5: return

  public void destroyDestination(org.apache.activemq.command.ActiveMQDestination) throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: invokevirtual #118                // Method checkClosedOrFailed:()V
       4: aload_0
       5: invokevirtual #119                // Method ensureConnectionInfoSent:()V
       8: new           #331                // class org/apache/activemq/command/DestinationInfo
      11: dup
      12: invokespecial #332                // Method org/apache/activemq/command/DestinationInfo."<init>":()V
      15: astore_2
      16: aload_2
      17: aload_0
      18: getfield      #89                 // Field info:Lorg/apache/activemq/command/ConnectionInfo;
      21: invokevirtual #94                 // Method org/apache/activemq/command/ConnectionInfo.getConnectionId:()Lorg/apache/activemq/command/ConnectionId;
      24: invokevirtual #333                // Method org/apache/activemq/command/DestinationInfo.setConnectionId:(Lorg/apache/activemq/command/ConnectionId;)V
      27: aload_2
      28: iconst_1
      29: invokevirtual #334                // Method org/apache/activemq/command/DestinationInfo.setOperationType:(B)V
      32: aload_2
      33: aload_1
      34: invokevirtual #335                // Method org/apache/activemq/command/DestinationInfo.setDestination:(Lorg/apache/activemq/command/ActiveMQDestination;)V
      37: aload_2
      38: lconst_0
      39: invokevirtual #339                // Method org/apache/activemq/command/DestinationInfo.setTimeout:(J)V
      42: aload_0
      43: aload_2
      44: invokevirtual #250                // Method syncSendPacket:(Lorg/apache/activemq/command/Command;)Lorg/apache/activemq/command/Response;
      47: pop
      48: return

  public boolean isDispatchAsync();
    Code:
       0: aload_0
       1: getfield      #17                 // Field dispatchAsync:Z
       4: ireturn

  public void setDispatchAsync(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #17                 // Field dispatchAsync:Z
       5: return

  public boolean isObjectMessageSerializationDefered();
    Code:
       0: aload_0
       1: getfield      #342                // Field objectMessageSerializationDefered:Z
       4: ireturn

  public void setObjectMessageSerializationDefered(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #342                // Field objectMessageSerializationDefered:Z
       5: return

  public java.io.InputStream createInputStream(javax.jms.Destination) throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: invokevirtual #343                // Method createInputStream:(Ljavax/jms/Destination;Ljava/lang/String;)Ljava/io/InputStream;
       6: areturn

  public java.io.InputStream createInputStream(javax.jms.Destination, java.lang.String) throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iconst_0
       4: invokevirtual #344                // Method createInputStream:(Ljavax/jms/Destination;Ljava/lang/String;Z)Ljava/io/InputStream;
       7: areturn

  public java.io.InputStream createInputStream(javax.jms.Destination, java.lang.String, boolean) throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iload_3
       4: ldc2_w        #95                 // long -1l
       7: invokevirtual #345                // Method createInputStream:(Ljavax/jms/Destination;Ljava/lang/String;ZJ)Ljava/io/InputStream;
      10: areturn

  public java.io.InputStream createInputStream(javax.jms.Destination, java.lang.String, boolean, long) throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iload_3
       4: aconst_null
       5: lload         4
       7: invokespecial #346                // Method doCreateInputStream:(Ljavax/jms/Destination;Ljava/lang/String;ZLjava/lang/String;J)Ljava/io/InputStream;
      10: areturn

  public java.io.InputStream createDurableInputStream(javax.jms.Topic, java.lang.String) throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: iconst_0
       4: invokevirtual #344                // Method createInputStream:(Ljavax/jms/Destination;Ljava/lang/String;Z)Ljava/io/InputStream;
       7: areturn

  public java.io.InputStream createDurableInputStream(javax.jms.Topic, java.lang.String, java.lang.String) throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: iconst_0
       5: invokevirtual #347                // Method createDurableInputStream:(Ljavax/jms/Topic;Ljava/lang/String;Ljava/lang/String;Z)Ljava/io/InputStream;
       8: areturn

  public java.io.InputStream createDurableInputStream(javax.jms.Topic, java.lang.String, java.lang.String, boolean) throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: iload         4
       6: ldc2_w        #95                 // long -1l
       9: invokevirtual #348                // Method createDurableInputStream:(Ljavax/jms/Topic;Ljava/lang/String;Ljava/lang/String;ZJ)Ljava/io/InputStream;
      12: areturn

  public java.io.InputStream createDurableInputStream(javax.jms.Topic, java.lang.String, java.lang.String, boolean, long) throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_3
       3: iload         4
       5: aload_2
       6: lload         5
       8: invokespecial #346                // Method doCreateInputStream:(Ljavax/jms/Destination;Ljava/lang/String;ZLjava/lang/String;J)Ljava/io/InputStream;
      11: areturn

  private java.io.InputStream doCreateInputStream(javax.jms.Destination, java.lang.String, boolean, java.lang.String, long) throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: invokevirtual #118                // Method checkClosedOrFailed:()V
       4: aload_0
       5: invokevirtual #119                // Method ensureConnectionInfoSent:()V
       8: new           #170                // class org/apache/activemq/ActiveMQInputStream
      11: dup
      12: aload_0
      13: aload_0
      14: invokespecial #238                // Method createConsumerId:()Lorg/apache/activemq/command/ConsumerId;
      17: aload_1
      18: invokestatic  #349                // Method org/apache/activemq/command/ActiveMQDestination.transform:(Ljavax/jms/Destination;)Lorg/apache/activemq/command/ActiveMQDestination;
      21: aload_2
      22: iload_3
      23: aload         4
      25: aload_0
      26: getfield      #21                 // Field prefetchPolicy:Lorg/apache/activemq/ActiveMQPrefetchPolicy;
      29: invokevirtual #350                // Method org/apache/activemq/ActiveMQPrefetchPolicy.getInputStreamPrefetch:()I
      32: lload         5
      34: invokespecial #351                // Method org/apache/activemq/ActiveMQInputStream."<init>":(Lorg/apache/activemq/ActiveMQConnection;Lorg/apache/activemq/command/ConsumerId;Lorg/apache/activemq/command/ActiveMQDestination;Ljava/lang/String;ZLjava/lang/String;IJ)V
      37: areturn

  public java.io.OutputStream createOutputStream(javax.jms.Destination) throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: iconst_2
       4: iconst_4
       5: lconst_0
       6: invokevirtual #352                // Method createOutputStream:(Ljavax/jms/Destination;Ljava/util/Map;IIJ)Ljava/io/OutputStream;
       9: areturn

  public java.io.OutputStream createNonPersistentOutputStream(javax.jms.Destination) throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: iconst_1
       4: iconst_4
       5: lconst_0
       6: invokevirtual #352                // Method createOutputStream:(Ljavax/jms/Destination;Ljava/util/Map;IIJ)Ljava/io/OutputStream;
       9: areturn

  public java.io.OutputStream createOutputStream(javax.jms.Destination, java.util.Map<java.lang.String, java.lang.Object>, int, int, long) throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: invokevirtual #118                // Method checkClosedOrFailed:()V
       4: aload_0
       5: invokevirtual #119                // Method ensureConnectionInfoSent:()V
       8: new           #172                // class org/apache/activemq/ActiveMQOutputStream
      11: dup
      12: aload_0
      13: aload_0
      14: invokespecial #353                // Method createProducerId:()Lorg/apache/activemq/command/ProducerId;
      17: aload_1
      18: invokestatic  #349                // Method org/apache/activemq/command/ActiveMQDestination.transform:(Ljavax/jms/Destination;)Lorg/apache/activemq/command/ActiveMQDestination;
      21: aload_2
      22: iload_3
      23: iload         4
      25: lload         5
      27: invokespecial #354                // Method org/apache/activemq/ActiveMQOutputStream."<init>":(Lorg/apache/activemq/ActiveMQConnection;Lorg/apache/activemq/command/ProducerId;Lorg/apache/activemq/command/ActiveMQDestination;Ljava/util/Map;IIJ)V
      30: areturn

  public void unsubscribe(java.lang.String) throws javax.jms.InvalidDestinationException, javax.jms.JMSException;
    Code:
       0: aload_0
       1: invokevirtual #118                // Method checkClosedOrFailed:()V
       4: new           #355                // class org/apache/activemq/command/RemoveSubscriptionInfo
       7: dup
       8: invokespecial #356                // Method org/apache/activemq/command/RemoveSubscriptionInfo."<init>":()V
      11: astore_2
      12: aload_2
      13: aload_0
      14: invokevirtual #357                // Method getConnectionInfo:()Lorg/apache/activemq/command/ConnectionInfo;
      17: invokevirtual #94                 // Method org/apache/activemq/command/ConnectionInfo.getConnectionId:()Lorg/apache/activemq/command/ConnectionId;
      20: invokevirtual #358                // Method org/apache/activemq/command/RemoveSubscriptionInfo.setConnectionId:(Lorg/apache/activemq/command/ConnectionId;)V
      23: aload_2
      24: aload_1
      25: invokevirtual #359                // Method org/apache/activemq/command/RemoveSubscriptionInfo.setSubscriptionName:(Ljava/lang/String;)V
      28: aload_2
      29: aload_0
      30: invokevirtual #357                // Method getConnectionInfo:()Lorg/apache/activemq/command/ConnectionInfo;
      33: invokevirtual #137                // Method org/apache/activemq/command/ConnectionInfo.getClientId:()Ljava/lang/String;
      36: invokevirtual #360                // Method org/apache/activemq/command/RemoveSubscriptionInfo.setClientId:(Ljava/lang/String;)V
      39: aload_0
      40: aload_2
      41: invokevirtual #250                // Method syncSendPacket:(Lorg/apache/activemq/command/Command;)Lorg/apache/activemq/command/Response;
      44: pop
      45: return

  void send(org.apache.activemq.command.ActiveMQDestination, org.apache.activemq.command.ActiveMQMessage, org.apache.activemq.command.MessageId, int, int, long, boolean) throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: invokevirtual #118                // Method checkClosedOrFailed:()V
       4: aload_1
       5: invokevirtual #361                // Method org/apache/activemq/command/ActiveMQDestination.isTemporary:()Z
       8: ifeq          47
      11: aload_0
      12: aload_1
      13: invokevirtual #362                // Method isDeleted:(Lorg/apache/activemq/command/ActiveMQDestination;)Z
      16: ifeq          47
      19: new           #120                // class javax/jms/JMSException
      22: dup
      23: new           #123                // class java/lang/StringBuilder
      26: dup
      27: invokespecial #124                // Method java/lang/StringBuilder."<init>":()V
      30: ldc_w         #363                // String Cannot publish to a deleted Destination:
      33: invokevirtual #126                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      36: aload_1
      37: invokevirtual #188                // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      40: invokevirtual #130                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      43: invokespecial #122                // Method javax/jms/JMSException."<init>":(Ljava/lang/String;)V
      46: athrow
      47: aload_2
      48: aload_1
      49: invokevirtual #364                // Method org/apache/activemq/command/ActiveMQMessage.setJMSDestination:(Ljavax/jms/Destination;)V
      52: aload_2
      53: iload         4
      55: invokevirtual #365                // Method org/apache/activemq/command/ActiveMQMessage.setJMSDeliveryMode:(I)V
      58: lconst_0
      59: lstore        9
      61: aload_0
      62: invokevirtual #366                // Method isDisableTimeStampsByDefault:()Z
      65: ifne          93
      68: invokestatic  #105                // Method java/lang/System.currentTimeMillis:()J
      71: lstore        11
      73: aload_2
      74: lload         11
      76: invokevirtual #367                // Method org/apache/activemq/command/ActiveMQMessage.setJMSTimestamp:(J)V
      79: lload         6
      81: lconst_0
      82: lcmp
      83: ifle          93
      86: lload         6
      88: lload         11
      90: ladd
      91: lstore        9
      93: aload_2
      94: lload         9
      96: invokevirtual #368                // Method org/apache/activemq/command/ActiveMQMessage.setJMSExpiration:(J)V
      99: aload_2
     100: iload         5
     102: invokevirtual #369                // Method org/apache/activemq/command/ActiveMQMessage.setJMSPriority:(I)V
     105: aload_2
     106: iconst_0
     107: invokevirtual #370                // Method org/apache/activemq/command/ActiveMQMessage.setJMSRedelivered:(Z)V
     110: aload_2
     111: aload_3
     112: invokevirtual #371                // Method org/apache/activemq/command/ActiveMQMessage.setMessageId:(Lorg/apache/activemq/command/MessageId;)V
     115: aload_2
     116: invokevirtual #372                // Method org/apache/activemq/command/ActiveMQMessage.onSend:()V
     119: aload_2
     120: aload_2
     121: invokevirtual #373                // Method org/apache/activemq/command/ActiveMQMessage.getMessageId:()Lorg/apache/activemq/command/MessageId;
     124: invokevirtual #374                // Method org/apache/activemq/command/MessageId.getProducerId:()Lorg/apache/activemq/command/ProducerId;
     127: invokevirtual #375                // Method org/apache/activemq/command/ActiveMQMessage.setProducerId:(Lorg/apache/activemq/command/ProducerId;)V
     130: getstatic     #11                 // Field LOG:Lorg/slf4j/Logger;
     133: invokeinterface #321,  1          // InterfaceMethod org/slf4j/Logger.isDebugEnabled:()Z
     138: ifeq          169
     141: getstatic     #11                 // Field LOG:Lorg/slf4j/Logger;
     144: new           #123                // class java/lang/StringBuilder
     147: dup
     148: invokespecial #124                // Method java/lang/StringBuilder."<init>":()V
     151: ldc_w         #376                // String Sending message:
     154: invokevirtual #126                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     157: aload_2
     158: invokevirtual #188                // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     161: invokevirtual #130                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     164: invokeinterface #260,  2          // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;)V
     169: iload         8
     171: ifeq          182
     174: aload_0
     175: aload_2
     176: invokevirtual #377                // Method asyncSendPacket:(Lorg/apache/activemq/command/Command;)V
     179: goto          188
     182: aload_0
     183: aload_2
     184: invokevirtual #250                // Method syncSendPacket:(Lorg/apache/activemq/command/Command;)Lorg/apache/activemq/command/Response;
     187: pop
     188: return

  public void addOutputStream(org.apache.activemq.ActiveMQOutputStream);
    Code:
       0: aload_0
       1: getfield      #46                 // Field outputStreams:Ljava/util/concurrent/CopyOnWriteArrayList;
       4: aload_1
       5: invokevirtual #217                // Method java/util/concurrent/CopyOnWriteArrayList.add:(Ljava/lang/Object;)Z
       8: pop
       9: return

  public void removeOutputStream(org.apache.activemq.ActiveMQOutputStream);
    Code:
       0: aload_0
       1: getfield      #46                 // Field outputStreams:Ljava/util/concurrent/CopyOnWriteArrayList;
       4: aload_1
       5: invokevirtual #218                // Method java/util/concurrent/CopyOnWriteArrayList.remove:(Ljava/lang/Object;)Z
       8: pop
       9: return

  public void addInputStream(org.apache.activemq.ActiveMQInputStream);
    Code:
       0: aload_0
       1: getfield      #45                 // Field inputStreams:Ljava/util/concurrent/CopyOnWriteArrayList;
       4: aload_1
       5: invokevirtual #217                // Method java/util/concurrent/CopyOnWriteArrayList.add:(Ljava/lang/Object;)Z
       8: pop
       9: return

  public void removeInputStream(org.apache.activemq.ActiveMQInputStream);
    Code:
       0: aload_0
       1: getfield      #45                 // Field inputStreams:Ljava/util/concurrent/CopyOnWriteArrayList;
       4: aload_1
       5: invokevirtual #218                // Method java/util/concurrent/CopyOnWriteArrayList.remove:(Ljava/lang/Object;)Z
       8: pop
       9: return

  protected void onControlCommand(org.apache.activemq.command.ControlCommand);
    Code:
       0: aload_1
       1: invokevirtual #378                // Method org/apache/activemq/command/ControlCommand.getCommand:()Ljava/lang/String;
       4: astore_2
       5: aload_2
       6: ifnull        34
       9: ldc_w         #379                // String shutdown
      12: aload_2
      13: invokevirtual #380                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      16: ifeq          34
      19: getstatic     #11                 // Field LOG:Lorg/slf4j/Logger;
      22: ldc_w         #381                // String JVM told to shutdown
      25: invokeinterface #382,  2          // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;)V
      30: iconst_0
      31: invokestatic  #383                // Method java/lang/System.exit:(I)V
      34: return

  protected void onConnectionControl(org.apache.activemq.command.ConnectionControl);
    Code:
       0: aload_1
       1: invokevirtual #384                // Method org/apache/activemq/command/ConnectionControl.isFaultTolerant:()Z
       4: ifeq          47
       7: aload_0
       8: iconst_0
       9: putfield      #5                  // Field optimizeAcknowledge:Z
      12: aload_0
      13: getfield      #43                 // Field sessions:Ljava/util/concurrent/CopyOnWriteArrayList;
      16: invokevirtual #148                // Method java/util/concurrent/CopyOnWriteArrayList.iterator:()Ljava/util/Iterator;
      19: astore_2
      20: aload_2
      21: invokeinterface #149,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      26: ifeq          47
      29: aload_2
      30: invokeinterface #150,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      35: checkcast     #131                // class org/apache/activemq/ActiveMQSession
      38: astore_3
      39: aload_3
      40: iconst_0
      41: invokevirtual #385                // Method org/apache/activemq/ActiveMQSession.setOptimizeAcknowledge:(Z)V
      44: goto          20
      47: return

  protected void onConsumerControl(org.apache.activemq.command.ConsumerControl);
    Code:
       0: aload_1
       1: invokevirtual #386                // Method org/apache/activemq/command/ConsumerControl.isClose:()Z
       4: ifeq          48
       7: aload_0
       8: getfield      #43                 // Field sessions:Ljava/util/concurrent/CopyOnWriteArrayList;
      11: invokevirtual #318                // Method java/util/concurrent/CopyOnWriteArrayList.iterator:()Ljava/util/Iterator;
      14: astore_2
      15: aload_2
      16: invokeinterface #149,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      21: ifeq          45
      24: aload_2
      25: invokeinterface #150,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      30: checkcast     #131                // class org/apache/activemq/ActiveMQSession
      33: astore_3
      34: aload_3
      35: aload_1
      36: invokevirtual #387                // Method org/apache/activemq/command/ConsumerControl.getConsumerId:()Lorg/apache/activemq/command/ConsumerId;
      39: invokevirtual #388                // Method org/apache/activemq/ActiveMQSession.close:(Lorg/apache/activemq/command/ConsumerId;)V
      42: goto          15
      45: goto          150
      48: aload_0
      49: getfield      #43                 // Field sessions:Ljava/util/concurrent/CopyOnWriteArrayList;
      52: invokevirtual #318                // Method java/util/concurrent/CopyOnWriteArrayList.iterator:()Ljava/util/Iterator;
      55: astore_2
      56: aload_2
      57: invokeinterface #149,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      62: ifeq          90
      65: aload_2
      66: invokeinterface #150,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      71: checkcast     #131                // class org/apache/activemq/ActiveMQSession
      74: astore_3
      75: aload_3
      76: aload_1
      77: invokevirtual #387                // Method org/apache/activemq/command/ConsumerControl.getConsumerId:()Lorg/apache/activemq/command/ConsumerId;
      80: aload_1
      81: invokevirtual #389                // Method org/apache/activemq/command/ConsumerControl.getPrefetch:()I
      84: invokevirtual #390                // Method org/apache/activemq/ActiveMQSession.setPrefetchSize:(Lorg/apache/activemq/command/ConsumerId;I)V
      87: goto          56
      90: aload_0
      91: getfield      #44                 // Field connectionConsumers:Ljava/util/concurrent/CopyOnWriteArrayList;
      94: invokevirtual #318                // Method java/util/concurrent/CopyOnWriteArrayList.iterator:()Ljava/util/Iterator;
      97: astore_2
      98: aload_2
      99: invokeinterface #149,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
     104: ifeq          150
     107: aload_2
     108: invokeinterface #150,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     113: checkcast     #168                // class org/apache/activemq/ActiveMQConnectionConsumer
     116: astore_3
     117: aload_3
     118: invokevirtual #391                // Method org/apache/activemq/ActiveMQConnectionConsumer.getConsumerInfo:()Lorg/apache/activemq/command/ConsumerInfo;
     121: astore        4
     123: aload         4
     125: invokevirtual #392                // Method org/apache/activemq/command/ConsumerInfo.getConsumerId:()Lorg/apache/activemq/command/ConsumerId;
     128: aload_1
     129: invokevirtual #387                // Method org/apache/activemq/command/ConsumerControl.getConsumerId:()Lorg/apache/activemq/command/ConsumerId;
     132: invokevirtual #393                // Method org/apache/activemq/command/ConsumerId.equals:(Ljava/lang/Object;)Z
     135: ifeq          147
     138: aload         4
     140: aload_1
     141: invokevirtual #389                // Method org/apache/activemq/command/ConsumerControl.getPrefetch:()I
     144: invokevirtual #205                // Method org/apache/activemq/command/ConsumerInfo.setPrefetchSize:(I)V
     147: goto          98
     150: return

  protected void transportFailed(java.io.IOException);
    Code:
       0: aload_0
       1: getfield      #40                 // Field transportFailed:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: iconst_1
       5: invokevirtual #156                // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V
       8: aload_0
       9: getfield      #268                // Field firstFailureError:Ljava/io/IOException;
      12: ifnonnull     20
      15: aload_0
      16: aload_1
      17: putfield      #268                // Field firstFailureError:Ljava/io/IOException;
      20: return

  public void setCopyMessageOnSend(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #23                 // Field copyMessageOnSend:Z
       5: return

  public java.lang.String toString();
    Code:
       0: new           #123                // class java/lang/StringBuilder
       3: dup
       4: invokespecial #124                // Method java/lang/StringBuilder."<init>":()V
       7: ldc_w         #394                // String ActiveMQConnection {id=
      10: invokevirtual #126                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      13: aload_0
      14: getfield      #89                 // Field info:Lorg/apache/activemq/command/ConnectionInfo;
      17: invokevirtual #94                 // Method org/apache/activemq/command/ConnectionInfo.getConnectionId:()Lorg/apache/activemq/command/ConnectionId;
      20: invokevirtual #188                // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      23: ldc_w         #395                // String ,clientId=
      26: invokevirtual #126                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      29: aload_0
      30: getfield      #89                 // Field info:Lorg/apache/activemq/command/ConnectionInfo;
      33: invokevirtual #137                // Method org/apache/activemq/command/ConnectionInfo.getClientId:()Ljava/lang/String;
      36: invokevirtual #126                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      39: ldc_w         #396                // String ,started=
      42: invokevirtual #126                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      45: aload_0
      46: getfield      #38                 // Field started:Ljava/util/concurrent/atomic/AtomicBoolean;
      49: invokevirtual #155                // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
      52: invokevirtual #397                // Method java/lang/StringBuilder.append:(Z)Ljava/lang/StringBuilder;
      55: ldc_w         #398                // String }
      58: invokevirtual #126                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      61: invokevirtual #130                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      64: areturn

  protected org.apache.activemq.blob.BlobTransferPolicy createBlobTransferPolicy();
    Code:
       0: new           #399                // class org/apache/activemq/blob/BlobTransferPolicy
       3: dup
       4: invokespecial #400                // Method org/apache/activemq/blob/BlobTransferPolicy."<init>":()V
       7: areturn

  public int getProtocolVersion();
    Code:
       0: aload_0
       1: getfield      #59                 // Field protocolVersion:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #323                // Method java/util/concurrent/atomic/AtomicInteger.get:()I
       7: ireturn

  public int getProducerWindowSize();
    Code:
       0: aload_0
       1: getfield      #56                 // Field producerWindowSize:I
       4: ireturn

  public void setProducerWindowSize(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #56                 // Field producerWindowSize:I
       5: return

  public void setAuditDepth(int);
    Code:
       0: aload_0
       1: getfield      #62                 // Field connectionAudit:Lorg/apache/activemq/ConnectionAudit;
       4: iload_1
       5: invokevirtual #401                // Method org/apache/activemq/ConnectionAudit.setAuditDepth:(I)V
       8: return

  public void setAuditMaximumProducerNumber(int);
    Code:
       0: aload_0
       1: getfield      #62                 // Field connectionAudit:Lorg/apache/activemq/ConnectionAudit;
       4: iload_1
       5: invokevirtual #402                // Method org/apache/activemq/ConnectionAudit.setAuditMaximumProducerNumber:(I)V
       8: return

  protected void removeDispatcher(org.apache.activemq.ActiveMQDispatcher);
    Code:
       0: aload_0
       1: getfield      #62                 // Field connectionAudit:Lorg/apache/activemq/ConnectionAudit;
       4: aload_1
       5: invokevirtual #403                // Method org/apache/activemq/ConnectionAudit.removeDispatcher:(Lorg/apache/activemq/ActiveMQDispatcher;)V
       8: return

  protected boolean isDuplicate(org.apache.activemq.ActiveMQDispatcher, org.apache.activemq.command.Message);
    Code:
       0: aload_0
       1: getfield      #34                 // Field checkForDuplicates:Z
       4: ifeq          23
       7: aload_0
       8: getfield      #62                 // Field connectionAudit:Lorg/apache/activemq/ConnectionAudit;
      11: aload_1
      12: aload_2
      13: invokevirtual #404                // Method org/apache/activemq/ConnectionAudit.isDuplicate:(Lorg/apache/activemq/ActiveMQDispatcher;Lorg/apache/activemq/command/Message;)Z
      16: ifeq          23
      19: iconst_1
      20: goto          24
      23: iconst_0
      24: ireturn

  protected void rollbackDuplicate(org.apache.activemq.ActiveMQDispatcher, org.apache.activemq.command.Message);
    Code:
       0: aload_0
       1: getfield      #62                 // Field connectionAudit:Lorg/apache/activemq/ConnectionAudit;
       4: aload_1
       5: aload_2
       6: invokevirtual #405                // Method org/apache/activemq/ConnectionAudit.rollbackDuplicate:(Lorg/apache/activemq/ActiveMQDispatcher;Lorg/apache/activemq/command/Message;)V
       9: return

  public java.io.IOException getFirstFailureError();
    Code:
       0: aload_0
       1: getfield      #268                // Field firstFailureError:Ljava/io/IOException;
       4: areturn

  protected void waitForTransportInterruptionProcessingToComplete() throws java.lang.InterruptedException;
    Code:
       0: aload_0
       1: getfield      #39                 // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: invokevirtual #155                // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
       7: ifne          68
      10: aload_0
      11: getfield      #40                 // Field transportFailed:Ljava/util/concurrent/atomic/AtomicBoolean;
      14: invokevirtual #155                // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
      17: ifne          68
      20: aload_0
      21: getfield      #65                 // Field transportInterruptionProcessingComplete:Ljava/util/concurrent/atomic/AtomicInteger;
      24: invokevirtual #323                // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      27: ifle          68
      30: getstatic     #11                 // Field LOG:Lorg/slf4j/Logger;
      33: new           #123                // class java/lang/StringBuilder
      36: dup
      37: invokespecial #124                // Method java/lang/StringBuilder."<init>":()V
      40: ldc_w         #406                // String dispatch with outstanding dispatch interruption processing count
      43: invokevirtual #126                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      46: aload_0
      47: getfield      #65                 // Field transportInterruptionProcessingComplete:Ljava/util/concurrent/atomic/AtomicInteger;
      50: invokevirtual #323                // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      53: invokevirtual #127                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      56: invokevirtual #130                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      59: invokeinterface #407,  2          // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;)V
      64: aload_0
      65: invokespecial #408                // Method signalInterruptionProcessingComplete:()V
      68: return

  protected void transportInterruptionProcessingComplete();
    Code:
       0: aload_0
       1: getfield      #65                 // Field transportInterruptionProcessingComplete:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #320                // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
       7: ifne          14
      10: aload_0
      11: invokespecial #408                // Method signalInterruptionProcessingComplete:()V
      14: return

  private void signalInterruptionProcessingComplete();
    Code:
       0: getstatic     #11                 // Field LOG:Lorg/slf4j/Logger;
       3: invokeinterface #321,  1          // InterfaceMethod org/slf4j/Logger.isDebugEnabled:()Z
       8: ifeq          61
      11: getstatic     #11                 // Field LOG:Lorg/slf4j/Logger;
      14: new           #123                // class java/lang/StringBuilder
      17: dup
      18: invokespecial #124                // Method java/lang/StringBuilder."<init>":()V
      21: ldc_w         #409                // String transportInterruptionProcessingComplete:
      24: invokevirtual #126                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      27: aload_0
      28: getfield      #65                 // Field transportInterruptionProcessingComplete:Ljava/util/concurrent/atomic/AtomicInteger;
      31: invokevirtual #323                // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      34: invokevirtual #127                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      37: ldc_w         #410                // String  for:
      40: invokevirtual #126                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      43: aload_0
      44: invokevirtual #357                // Method getConnectionInfo:()Lorg/apache/activemq/command/ConnectionInfo;
      47: invokevirtual #94                 // Method org/apache/activemq/command/ConnectionInfo.getConnectionId:()Lorg/apache/activemq/command/ConnectionId;
      50: invokevirtual #188                // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      53: invokevirtual #130                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      56: invokeinterface #260,  2          // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;)V
      61: aload_0
      62: getfield      #10                 // Field transport:Lorg/apache/activemq/transport/Transport;
      65: ldc_w         #411                // class org/apache/activemq/transport/failover/FailoverTransport
      68: invokeinterface #412,  2          // InterfaceMethod org/apache/activemq/transport/Transport.narrow:(Ljava/lang/Class;)Ljava/lang/Object;
      73: checkcast     #411                // class org/apache/activemq/transport/failover/FailoverTransport
      76: astore_1
      77: aload_1
      78: ifnull        147
      81: aload_1
      82: aload_0
      83: invokevirtual #357                // Method getConnectionInfo:()Lorg/apache/activemq/command/ConnectionInfo;
      86: invokevirtual #94                 // Method org/apache/activemq/command/ConnectionInfo.getConnectionId:()Lorg/apache/activemq/command/ConnectionId;
      89: invokevirtual #413                // Method org/apache/activemq/transport/failover/FailoverTransport.connectionInterruptProcessingComplete:(Lorg/apache/activemq/command/ConnectionId;)V
      92: getstatic     #11                 // Field LOG:Lorg/slf4j/Logger;
      95: invokeinterface #321,  1          // InterfaceMethod org/slf4j/Logger.isDebugEnabled:()Z
     100: ifeq          147
     103: getstatic     #11                 // Field LOG:Lorg/slf4j/Logger;
     106: new           #123                // class java/lang/StringBuilder
     109: dup
     110: invokespecial #124                // Method java/lang/StringBuilder."<init>":()V
     113: ldc_w         #414                // String notified failover transport (
     116: invokevirtual #126                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     119: aload_1
     120: invokevirtual #188                // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     123: ldc_w         #415                // String ) of interruption completion for:
     126: invokevirtual #126                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     129: aload_0
     130: invokevirtual #357                // Method getConnectionInfo:()Lorg/apache/activemq/command/ConnectionInfo;
     133: invokevirtual #94                 // Method org/apache/activemq/command/ConnectionInfo.getConnectionId:()Lorg/apache/activemq/command/ConnectionId;
     136: invokevirtual #188                // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     139: invokevirtual #130                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     142: invokeinterface #260,  2          // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;)V
     147: aload_0
     148: getfield      #65                 // Field transportInterruptionProcessingComplete:Ljava/util/concurrent/atomic/AtomicInteger;
     151: iconst_0
     152: invokevirtual #305                // Method java/util/concurrent/atomic/AtomicInteger.set:(I)V
     155: return

  private void signalInterruptionProcessingNeeded();
    Code:
       0: aload_0
       1: getfield      #10                 // Field transport:Lorg/apache/activemq/transport/Transport;
       4: ldc_w         #411                // class org/apache/activemq/transport/failover/FailoverTransport
       7: invokeinterface #412,  2          // InterfaceMethod org/apache/activemq/transport/Transport.narrow:(Ljava/lang/Class;)Ljava/lang/Object;
      12: checkcast     #411                // class org/apache/activemq/transport/failover/FailoverTransport
      15: astore_1
      16: aload_1
      17: ifnull        89
      20: aload_1
      21: invokevirtual #416                // Method org/apache/activemq/transport/failover/FailoverTransport.getStateTracker:()Lorg/apache/activemq/state/ConnectionStateTracker;
      24: aload_0
      25: invokevirtual #357                // Method getConnectionInfo:()Lorg/apache/activemq/command/ConnectionInfo;
      28: invokevirtual #94                 // Method org/apache/activemq/command/ConnectionInfo.getConnectionId:()Lorg/apache/activemq/command/ConnectionId;
      31: invokevirtual #417                // Method org/apache/activemq/state/ConnectionStateTracker.transportInterrupted:(Lorg/apache/activemq/command/ConnectionId;)V
      34: getstatic     #11                 // Field LOG:Lorg/slf4j/Logger;
      37: invokeinterface #321,  1          // InterfaceMethod org/slf4j/Logger.isDebugEnabled:()Z
      42: ifeq          89
      45: getstatic     #11                 // Field LOG:Lorg/slf4j/Logger;
      48: new           #123                // class java/lang/StringBuilder
      51: dup
      52: invokespecial #124                // Method java/lang/StringBuilder."<init>":()V
      55: ldc_w         #414                // String notified failover transport (
      58: invokevirtual #126                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      61: aload_1
      62: invokevirtual #188                // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      65: ldc_w         #418                // String ) of pending interruption processing for:
      68: invokevirtual #126                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      71: aload_0
      72: invokevirtual #357                // Method getConnectionInfo:()Lorg/apache/activemq/command/ConnectionInfo;
      75: invokevirtual #94                 // Method org/apache/activemq/command/ConnectionInfo.getConnectionId:()Lorg/apache/activemq/command/ConnectionId;
      78: invokevirtual #188                // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      81: invokevirtual #130                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      84: invokeinterface #260,  2          // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;)V
      89: return

  public void setConsumerFailoverRedeliveryWaitPeriod(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #419                // Field consumerFailoverRedeliveryWaitPeriod:J
       5: return

  public long getConsumerFailoverRedeliveryWaitPeriod();
    Code:
       0: aload_0
       1: getfield      #419                // Field consumerFailoverRedeliveryWaitPeriod:J
       4: lreturn

  protected org.apache.activemq.thread.Scheduler getScheduler() throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: getfield      #161                // Field scheduler:Lorg/apache/activemq/thread/Scheduler;
       4: astore_1
       5: aload_1
       6: ifnonnull     99
       9: aload_0
      10: dup
      11: astore_2
      12: monitorenter
      13: aload_0
      14: getfield      #161                // Field scheduler:Lorg/apache/activemq/thread/Scheduler;
      17: astore_1
      18: aload_1
      19: ifnonnull     87
      22: aload_0
      23: invokevirtual #266                // Method checkClosed:()V
      26: new           #420                // class org/apache/activemq/thread/Scheduler
      29: dup
      30: new           #123                // class java/lang/StringBuilder
      33: dup
      34: invokespecial #124                // Method java/lang/StringBuilder."<init>":()V
      37: ldc_w         #421                // String ActiveMQConnection[
      40: invokevirtual #126                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      43: aload_0
      44: getfield      #89                 // Field info:Lorg/apache/activemq/command/ConnectionInfo;
      47: invokevirtual #94                 // Method org/apache/activemq/command/ConnectionInfo.getConnectionId:()Lorg/apache/activemq/command/ConnectionId;
      50: invokevirtual #280                // Method org/apache/activemq/command/ConnectionId.getValue:()Ljava/lang/String;
      53: invokevirtual #126                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      56: ldc_w         #422                // String ] Scheduler
      59: invokevirtual #126                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      62: invokevirtual #130                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      65: invokespecial #423                // Method org/apache/activemq/thread/Scheduler."<init>":(Ljava/lang/String;)V
      68: astore_1
      69: aload_1
      70: invokevirtual #424                // Method org/apache/activemq/thread/Scheduler.start:()V
      73: aload_0
      74: aload_1
      75: putfield      #161                // Field scheduler:Lorg/apache/activemq/thread/Scheduler;
      78: goto          87
      81: astore_3
      82: aload_3
      83: invokestatic  #164                // Method org/apache/activemq/util/JMSExceptionSupport.create:(Ljava/lang/Exception;)Ljavax/jms/JMSException;
      86: athrow
      87: aload_2
      88: monitorexit
      89: goto          99
      92: astore        4
      94: aload_2
      95: monitorexit
      96: aload         4
      98: athrow
      99: aload_1
     100: areturn
    Exception table:
       from    to  target type
          26    78    81   Class java/lang/Exception
          13    89    92   any
          92    96    92   any

  protected java.util.concurrent.ThreadPoolExecutor getExecutor();
    Code:
       0: aload_0
       1: getfield      #4                  // Field executor:Ljava/util/concurrent/ThreadPoolExecutor;
       4: areturn

  protected java.util.concurrent.CopyOnWriteArrayList<org.apache.activemq.ActiveMQSession> getSessions();
    Code:
       0: aload_0
       1: getfield      #43                 // Field sessions:Ljava/util/concurrent/CopyOnWriteArrayList;
       4: areturn

  public boolean isCheckForDuplicates();
    Code:
       0: aload_0
       1: getfield      #34                 // Field checkForDuplicates:Z
       4: ireturn

  public void setCheckForDuplicates(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #34                 // Field checkForDuplicates:Z
       5: return

  public boolean isTransactedIndividualAck();
    Code:
       0: aload_0
       1: getfield      #67                 // Field transactedIndividualAck:Z
       4: ireturn

  public void setTransactedIndividualAck(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #67                 // Field transactedIndividualAck:Z
       5: return

  public boolean isNonBlockingRedelivery();
    Code:
       0: aload_0
       1: getfield      #68                 // Field nonBlockingRedelivery:Z
       4: ireturn

  public void setNonBlockingRedelivery(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #68                 // Field nonBlockingRedelivery:Z
       5: return

  public boolean isRmIdFromConnectionId();
    Code:
       0: aload_0
       1: getfield      #69                 // Field rmIdFromConnectionId:Z
       4: ireturn

  public void setRmIdFromConnectionId(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #69                 // Field rmIdFromConnectionId:Z
       5: return

  public void cleanUpTempDestinations();
    Code:
       0: aload_0
       1: getfield      #16                 // Field activeTempDestinations:Ljava/util/concurrent/ConcurrentHashMap;
       4: ifnull        17
       7: aload_0
       8: getfield      #16                 // Field activeTempDestinations:Ljava/util/concurrent/ConcurrentHashMap;
      11: invokevirtual #425                // Method java/util/concurrent/ConcurrentHashMap.isEmpty:()Z
      14: ifeq          18
      17: return
      18: aload_0
      19: getfield      #16                 // Field activeTempDestinations:Ljava/util/concurrent/ConcurrentHashMap;
      22: invokevirtual #426                // Method java/util/concurrent/ConcurrentHashMap.entrySet:()Ljava/util/Set;
      25: invokeinterface #427,  1          // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      30: astore_1
      31: aload_1
      32: invokeinterface #149,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      37: ifeq          127
      40: aload_1
      41: invokeinterface #150,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      46: checkcast     #428                // class java/util/Map$Entry
      49: astore_2
      50: aload_2
      51: invokeinterface #429,  1          // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      56: checkcast     #430                // class org/apache/activemq/command/ActiveMQTempDestination
      59: astore_3
      60: aload_0
      61: getfield      #89                 // Field info:Lorg/apache/activemq/command/ConnectionInfo;
      64: invokevirtual #94                 // Method org/apache/activemq/command/ConnectionInfo.getConnectionId:()Lorg/apache/activemq/command/ConnectionId;
      67: ifnonnull     76
      70: ldc_w         #431                // String
      73: goto          86
      76: aload_0
      77: getfield      #89                 // Field info:Lorg/apache/activemq/command/ConnectionInfo;
      80: invokevirtual #94                 // Method org/apache/activemq/command/ConnectionInfo.getConnectionId:()Lorg/apache/activemq/command/ConnectionId;
      83: invokevirtual #432                // Method org/apache/activemq/command/ConnectionId.toString:()Ljava/lang/String;
      86: astore        4
      88: aload_3
      89: invokevirtual #433                // Method org/apache/activemq/command/ActiveMQTempDestination.getConnectionId:()Ljava/lang/String;
      92: ifnull        120
      95: aload_3
      96: invokevirtual #433                // Method org/apache/activemq/command/ActiveMQTempDestination.getConnectionId:()Ljava/lang/String;
      99: aload         4
     101: invokevirtual #380                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     104: ifeq          120
     107: aload_0
     108: aload_2
     109: invokeinterface #429,  1          // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
     114: checkcast     #430                // class org/apache/activemq/command/ActiveMQTempDestination
     117: invokevirtual #434                // Method deleteTempDestination:(Lorg/apache/activemq/command/ActiveMQTempDestination;)V
     120: goto          124
     123: astore_3
     124: goto          31
     127: return
    Exception table:
       from    to  target type
          50   120   123   Class java/lang/Exception

  public void setRedeliveryPolicyMap(org.apache.activemq.broker.region.policy.RedeliveryPolicyMap);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #288                // Field redeliveryPolicyMap:Lorg/apache/activemq/broker/region/policy/RedeliveryPolicyMap;
       5: return

  public org.apache.activemq.broker.region.policy.RedeliveryPolicyMap getRedeliveryPolicyMap();
    Code:
       0: aload_0
       1: getfield      #288                // Field redeliveryPolicyMap:Lorg/apache/activemq/broker/region/policy/RedeliveryPolicyMap;
       4: areturn

  public int getMaxThreadPoolSize();
    Code:
       0: aload_0
       1: getfield      #71                 // Field maxThreadPoolSize:I
       4: ireturn

  public void setMaxThreadPoolSize(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #71                 // Field maxThreadPoolSize:I
       5: return

  org.apache.activemq.ActiveMQConnection enforceQueueOnlyConnection();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #35                 // Field queueOnlyConnection:Z
       5: aload_0
       6: areturn

  public java.util.concurrent.RejectedExecutionHandler getRejectedTaskHandler();
    Code:
       0: aload_0
       1: getfield      #72                 // Field rejectedTaskHandler:Ljava/util/concurrent/RejectedExecutionHandler;
       4: areturn

  public void setRejectedTaskHandler(java.util.concurrent.RejectedExecutionHandler);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #72                 // Field rejectedTaskHandler:Ljava/util/concurrent/RejectedExecutionHandler;
       5: return

  public long getOptimizedAckScheduledAckInterval();
    Code:
       0: aload_0
       1: getfield      #25                 // Field optimizedAckScheduledAckInterval:J
       4: lreturn

  public void setOptimizedAckScheduledAckInterval(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #25                 // Field optimizedAckScheduledAckInterval:J
       5: return

  static java.util.concurrent.atomic.AtomicBoolean access$000(org.apache.activemq.ActiveMQConnection);
    Code:
       0: aload_0
       1: getfield      #12                 // Field closing:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: areturn

  static org.slf4j.Logger access$100();
    Code:
       0: getstatic     #11                 // Field LOG:Lorg/slf4j/Logger;
       3: areturn

  static org.apache.activemq.transport.Transport access$200(org.apache.activemq.ActiveMQConnection);
    Code:
       0: aload_0
       1: getfield      #10                 // Field transport:Lorg/apache/activemq/transport/Transport;
       4: areturn

  static java.util.concurrent.ConcurrentHashMap access$300(org.apache.activemq.ActiveMQConnection);
    Code:
       0: aload_0
       1: getfield      #9                  // Field dispatchers:Ljava/util/concurrent/ConcurrentHashMap;
       4: areturn

  static java.util.concurrent.ConcurrentHashMap access$400(org.apache.activemq.ActiveMQConnection);
    Code:
       0: aload_0
       1: getfield      #8                  // Field producers:Ljava/util/concurrent/ConcurrentHashMap;
       4: areturn

  static org.apache.activemq.command.BrokerInfo access$502(org.apache.activemq.ActiveMQConnection, org.apache.activemq.command.BrokerInfo);
    Code:
       0: aload_0
       1: aload_1
       2: dup_x1
       3: putfield      #7                  // Field brokerInfo:Lorg/apache/activemq/command/BrokerInfo;
       6: areturn

  static java.util.concurrent.CountDownLatch access$600(org.apache.activemq.ActiveMQConnection);
    Code:
       0: aload_0
       1: getfield      #6                  // Field brokerInfoReceived:Ljava/util/concurrent/CountDownLatch;
       4: areturn

  static boolean access$772(org.apache.activemq.ActiveMQConnection, int);
    Code:
       0: aload_0
       1: dup
       2: getfield      #5                  // Field optimizeAcknowledge:Z
       5: iload_1
       6: iand
       7: i2b
       8: dup_x1
       9: putfield      #5                  // Field optimizeAcknowledge:Z
      12: ireturn

  static org.apache.activemq.command.BrokerInfo access$500(org.apache.activemq.ActiveMQConnection);
    Code:
       0: aload_0
       1: getfield      #7                  // Field brokerInfo:Lorg/apache/activemq/command/BrokerInfo;
       4: areturn

  static java.util.concurrent.ThreadPoolExecutor access$800(org.apache.activemq.ActiveMQConnection);
    Code:
       0: aload_0
       1: getfield      #4                  // Field executor:Ljava/util/concurrent/ThreadPoolExecutor;
       4: areturn

  static org.apache.activemq.ClientInternalExceptionListener access$900(org.apache.activemq.ActiveMQConnection);
    Code:
       0: aload_0
       1: getfield      #3                  // Field clientInternalExceptionListener:Lorg/apache/activemq/ClientInternalExceptionListener;
       4: areturn

  static javax.jms.ExceptionListener access$1000(org.apache.activemq.ActiveMQConnection);
    Code:
       0: aload_0
       1: getfield      #2                  // Field exceptionListener:Ljavax/jms/ExceptionListener;
       4: areturn

  static java.util.concurrent.CopyOnWriteArrayList access$1100(org.apache.activemq.ActiveMQConnection);
    Code:
       0: aload_0
       1: getfield      #1                  // Field transportListeners:Ljava/util/concurrent/CopyOnWriteArrayList;
       4: areturn

  static {};
    Code:
       0: getstatic     #435                // Field org/apache/activemq/ActiveMQConnectionFactory.DEFAULT_USER:Ljava/lang/String;
       3: putstatic     #436                // Field DEFAULT_USER:Ljava/lang/String;
       6: getstatic     #437                // Field org/apache/activemq/ActiveMQConnectionFactory.DEFAULT_PASSWORD:Ljava/lang/String;
       9: putstatic     #438                // Field DEFAULT_PASSWORD:Ljava/lang/String;
      12: getstatic     #439                // Field org/apache/activemq/ActiveMQConnectionFactory.DEFAULT_BROKER_URL:Ljava/lang/String;
      15: putstatic     #440                // Field DEFAULT_BROKER_URL:Ljava/lang/String;
      18: sipush        1000
      21: putstatic     #70                 // Field DEFAULT_THREAD_POOL_SIZE:I
      24: ldc_w         #113                // class org/apache/activemq/ActiveMQConnection
      27: invokestatic  #441                // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
      30: putstatic     #11                 // Field LOG:Lorg/slf4j/Logger;
      33: return
}
