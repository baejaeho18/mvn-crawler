Compiled from "BooleanStream.java"
public final class org.apache.activemq.openwire.BooleanStream {
  byte[] data;

  short arrayLimit;

  short arrayPos;

  byte bytePos;

  static final boolean $assertionsDisabled;

  public org.apache.activemq.openwire.BooleanStream();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: bipush        48
       7: newarray       byte
       9: putfield      #2                  // Field data:[B
      12: return

  public boolean readBoolean() throws java.io.IOException;
    Code:
       0: getstatic     #3                  // Field $assertionsDisabled:Z
       3: ifne          25
       6: aload_0
       7: getfield      #4                  // Field arrayPos:S
      10: aload_0
      11: getfield      #5                  // Field arrayLimit:S
      14: if_icmple     25
      17: new           #6                  // class java/lang/AssertionError
      20: dup
      21: invokespecial #7                  // Method java/lang/AssertionError."<init>":()V
      24: athrow
      25: aload_0
      26: getfield      #2                  // Field data:[B
      29: aload_0
      30: getfield      #4                  // Field arrayPos:S
      33: baload
      34: istore_1
      35: iload_1
      36: aload_0
      37: getfield      #8                  // Field bytePos:B
      40: ishr
      41: iconst_1
      42: iand
      43: ifeq          50
      46: iconst_1
      47: goto          51
      50: iconst_0
      51: istore_2
      52: aload_0
      53: dup
      54: getfield      #8                  // Field bytePos:B
      57: iconst_1
      58: iadd
      59: i2b
      60: putfield      #8                  // Field bytePos:B
      63: aload_0
      64: getfield      #8                  // Field bytePos:B
      67: bipush        8
      69: if_icmplt     88
      72: aload_0
      73: iconst_0
      74: putfield      #8                  // Field bytePos:B
      77: aload_0
      78: dup
      79: getfield      #4                  // Field arrayPos:S
      82: iconst_1
      83: iadd
      84: i2s
      85: putfield      #4                  // Field arrayPos:S
      88: iload_2
      89: ireturn

  public void writeBoolean(boolean) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #8                  // Field bytePos:B
       4: ifne          60
       7: aload_0
       8: dup
       9: getfield      #5                  // Field arrayLimit:S
      12: iconst_1
      13: iadd
      14: i2s
      15: putfield      #5                  // Field arrayLimit:S
      18: aload_0
      19: getfield      #5                  // Field arrayLimit:S
      22: aload_0
      23: getfield      #2                  // Field data:[B
      26: arraylength
      27: if_icmplt     60
      30: aload_0
      31: getfield      #2                  // Field data:[B
      34: arraylength
      35: iconst_2
      36: imul
      37: newarray       byte
      39: astore_2
      40: aload_0
      41: getfield      #2                  // Field data:[B
      44: iconst_0
      45: aload_2
      46: iconst_0
      47: aload_0
      48: getfield      #2                  // Field data:[B
      51: arraylength
      52: invokestatic  #9                  // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      55: aload_0
      56: aload_2
      57: putfield      #2                  // Field data:[B
      60: iload_1
      61: ifeq          83
      64: aload_0
      65: getfield      #2                  // Field data:[B
      68: aload_0
      69: getfield      #4                  // Field arrayPos:S
      72: dup2
      73: baload
      74: iconst_1
      75: aload_0
      76: getfield      #8                  // Field bytePos:B
      79: ishl
      80: ior
      81: i2b
      82: bastore
      83: aload_0
      84: dup
      85: getfield      #8                  // Field bytePos:B
      88: iconst_1
      89: iadd
      90: i2b
      91: putfield      #8                  // Field bytePos:B
      94: aload_0
      95: getfield      #8                  // Field bytePos:B
      98: bipush        8
     100: if_icmplt     119
     103: aload_0
     104: iconst_0
     105: putfield      #8                  // Field bytePos:B
     108: aload_0
     109: dup
     110: getfield      #4                  // Field arrayPos:S
     113: iconst_1
     114: iadd
     115: i2s
     116: putfield      #4                  // Field arrayPos:S
     119: return

  public void marshal(java.io.DataOutput) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #5                  // Field arrayLimit:S
       4: bipush        64
       6: if_icmpge     22
       9: aload_1
      10: aload_0
      11: getfield      #5                  // Field arrayLimit:S
      14: invokeinterface #10,  2           // InterfaceMethod java/io/DataOutput.writeByte:(I)V
      19: goto          73
      22: aload_0
      23: getfield      #5                  // Field arrayLimit:S
      26: sipush        256
      29: if_icmpge     54
      32: aload_1
      33: sipush        192
      36: invokeinterface #10,  2           // InterfaceMethod java/io/DataOutput.writeByte:(I)V
      41: aload_1
      42: aload_0
      43: getfield      #5                  // Field arrayLimit:S
      46: invokeinterface #10,  2           // InterfaceMethod java/io/DataOutput.writeByte:(I)V
      51: goto          73
      54: aload_1
      55: sipush        128
      58: invokeinterface #10,  2           // InterfaceMethod java/io/DataOutput.writeByte:(I)V
      63: aload_1
      64: aload_0
      65: getfield      #5                  // Field arrayLimit:S
      68: invokeinterface #11,  2           // InterfaceMethod java/io/DataOutput.writeShort:(I)V
      73: aload_1
      74: aload_0
      75: getfield      #2                  // Field data:[B
      78: iconst_0
      79: aload_0
      80: getfield      #5                  // Field arrayLimit:S
      83: invokeinterface #12,  4           // InterfaceMethod java/io/DataOutput.write:([BII)V
      88: aload_0
      89: invokevirtual #13                 // Method clear:()V
      92: return

  public void marshal(java.nio.ByteBuffer);
    Code:
       0: aload_0
       1: getfield      #5                  // Field arrayLimit:S
       4: bipush        64
       6: if_icmpge     22
       9: aload_1
      10: aload_0
      11: getfield      #5                  // Field arrayLimit:S
      14: i2b
      15: invokevirtual #14                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;
      18: pop
      19: goto          68
      22: aload_0
      23: getfield      #5                  // Field arrayLimit:S
      26: sipush        256
      29: if_icmpge     52
      32: aload_1
      33: bipush        -64
      35: invokevirtual #14                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;
      38: pop
      39: aload_1
      40: aload_0
      41: getfield      #5                  // Field arrayLimit:S
      44: i2b
      45: invokevirtual #14                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;
      48: pop
      49: goto          68
      52: aload_1
      53: bipush        -128
      55: invokevirtual #14                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;
      58: pop
      59: aload_1
      60: aload_0
      61: getfield      #5                  // Field arrayLimit:S
      64: invokevirtual #15                 // Method java/nio/ByteBuffer.putShort:(S)Ljava/nio/ByteBuffer;
      67: pop
      68: aload_1
      69: aload_0
      70: getfield      #2                  // Field data:[B
      73: iconst_0
      74: aload_0
      75: getfield      #5                  // Field arrayLimit:S
      78: invokevirtual #16                 // Method java/nio/ByteBuffer.put:([BII)Ljava/nio/ByteBuffer;
      81: pop
      82: return

  public void unmarshal(java.io.DataInput) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #17,  1           // InterfaceMethod java/io/DataInput.readByte:()B
       7: sipush        255
      10: iand
      11: i2s
      12: putfield      #5                  // Field arrayLimit:S
      15: aload_0
      16: getfield      #5                  // Field arrayLimit:S
      19: sipush        192
      22: if_icmpne     43
      25: aload_0
      26: aload_1
      27: invokeinterface #17,  1           // InterfaceMethod java/io/DataInput.readByte:()B
      32: sipush        255
      35: iand
      36: i2s
      37: putfield      #5                  // Field arrayLimit:S
      40: goto          63
      43: aload_0
      44: getfield      #5                  // Field arrayLimit:S
      47: sipush        128
      50: if_icmpne     63
      53: aload_0
      54: aload_1
      55: invokeinterface #18,  1           // InterfaceMethod java/io/DataInput.readShort:()S
      60: putfield      #5                  // Field arrayLimit:S
      63: aload_0
      64: getfield      #2                  // Field data:[B
      67: arraylength
      68: aload_0
      69: getfield      #5                  // Field arrayLimit:S
      72: if_icmpge     85
      75: aload_0
      76: aload_0
      77: getfield      #5                  // Field arrayLimit:S
      80: newarray       byte
      82: putfield      #2                  // Field data:[B
      85: aload_1
      86: aload_0
      87: getfield      #2                  // Field data:[B
      90: iconst_0
      91: aload_0
      92: getfield      #5                  // Field arrayLimit:S
      95: invokeinterface #19,  4           // InterfaceMethod java/io/DataInput.readFully:([BII)V
     100: aload_0
     101: invokevirtual #13                 // Method clear:()V
     104: return

  public void clear();
    Code:
       0: aload_0
       1: iconst_0
       2: putfield      #4                  // Field arrayPos:S
       5: aload_0
       6: iconst_0
       7: putfield      #8                  // Field bytePos:B
      10: return

  public int marshalledSize();
    Code:
       0: aload_0
       1: getfield      #5                  // Field arrayLimit:S
       4: bipush        64
       6: if_icmpge     16
       9: iconst_1
      10: aload_0
      11: getfield      #5                  // Field arrayLimit:S
      14: iadd
      15: ireturn
      16: aload_0
      17: getfield      #5                  // Field arrayLimit:S
      20: sipush        256
      23: if_icmpge     33
      26: iconst_2
      27: aload_0
      28: getfield      #5                  // Field arrayLimit:S
      31: iadd
      32: ireturn
      33: iconst_3
      34: aload_0
      35: getfield      #5                  // Field arrayLimit:S
      38: iadd
      39: ireturn

  static {};
    Code:
       0: ldc_w         #20                 // class org/apache/activemq/openwire/BooleanStream
       3: invokevirtual #21                 // Method java/lang/Class.desiredAssertionStatus:()Z
       6: ifne          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: putstatic     #3                  // Field $assertionsDisabled:Z
      17: return
}
