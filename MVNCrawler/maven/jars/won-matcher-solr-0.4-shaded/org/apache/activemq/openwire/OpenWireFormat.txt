Compiled from "OpenWireFormat.java"
public final class org.apache.activemq.openwire.OpenWireFormat implements org.apache.activemq.wireformat.WireFormat {
  public static final int DEFAULT_VERSION;

  public static final int DEFAULT_WIRE_VERSION;

  public static final long DEFAULT_MAX_FRAME_SIZE;

  static final byte NULL_TYPE;

  private static final int MARSHAL_CACHE_SIZE;

  private static final int MARSHAL_CACHE_FREE_SPACE;

  private org.apache.activemq.openwire.DataStreamMarshaller[] dataMarshallers;

  private int version;

  private boolean stackTraceEnabled;

  private boolean tcpNoDelayEnabled;

  private boolean cacheEnabled;

  private boolean tightEncodingEnabled;

  private boolean sizePrefixDisabled;

  private long maxFrameSize;

  private short nextMarshallCacheIndex;

  private short nextMarshallCacheEvictionIndex;

  private java.util.Map<org.apache.activemq.command.DataStructure, java.lang.Short> marshallCacheMap;

  private org.apache.activemq.command.DataStructure[] marshallCache;

  private org.apache.activemq.command.DataStructure[] unmarshallCache;

  private org.apache.activemq.util.DataByteArrayOutputStream bytesOut;

  private org.apache.activemq.util.DataByteArrayInputStream bytesIn;

  private org.apache.activemq.command.WireFormatInfo preferedWireFormatInfo;

  public org.apache.activemq.openwire.OpenWireFormat();
    Code:
       0: aload_0
       1: bipush        6
       3: invokespecial #1                  // Method "<init>":(I)V
       6: return

  public org.apache.activemq.openwire.OpenWireFormat(int);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: ldc2_w        #3                  // long 9223372036854775807l
       8: putfield      #5                  // Field maxFrameSize:J
      11: aload_0
      12: new           #6                  // class java/util/HashMap
      15: dup
      16: invokespecial #7                  // Method java/util/HashMap."<init>":()V
      19: putfield      #8                  // Field marshallCacheMap:Ljava/util/Map;
      22: aload_0
      23: aconst_null
      24: putfield      #9                  // Field marshallCache:[Lorg/apache/activemq/command/DataStructure;
      27: aload_0
      28: aconst_null
      29: putfield      #10                 // Field unmarshallCache:[Lorg/apache/activemq/command/DataStructure;
      32: aload_0
      33: new           #11                 // class org/apache/activemq/util/DataByteArrayOutputStream
      36: dup
      37: invokespecial #12                 // Method org/apache/activemq/util/DataByteArrayOutputStream."<init>":()V
      40: putfield      #13                 // Field bytesOut:Lorg/apache/activemq/util/DataByteArrayOutputStream;
      43: aload_0
      44: new           #14                 // class org/apache/activemq/util/DataByteArrayInputStream
      47: dup
      48: invokespecial #15                 // Method org/apache/activemq/util/DataByteArrayInputStream."<init>":()V
      51: putfield      #16                 // Field bytesIn:Lorg/apache/activemq/util/DataByteArrayInputStream;
      54: aload_0
      55: iload_1
      56: invokevirtual #17                 // Method setVersion:(I)V
      59: return

  public int hashCode();
    Code:
       0: aload_0
       1: getfield      #18                 // Field version:I
       4: aload_0
       5: getfield      #19                 // Field cacheEnabled:Z
       8: ifeq          16
      11: ldc           #20                 // int 268435456
      13: goto          18
      16: ldc           #21                 // int 536870912
      18: ixor
      19: aload_0
      20: getfield      #22                 // Field stackTraceEnabled:Z
      23: ifeq          31
      26: ldc           #23                 // int 16777216
      28: goto          33
      31: ldc           #24                 // int 33554432
      33: ixor
      34: aload_0
      35: getfield      #25                 // Field tightEncodingEnabled:Z
      38: ifeq          46
      41: ldc           #26                 // int 1048576
      43: goto          48
      46: ldc           #27                 // int 2097152
      48: ixor
      49: aload_0
      50: getfield      #28                 // Field sizePrefixDisabled:Z
      53: ifeq          61
      56: ldc           #29                 // int 65536
      58: goto          63
      61: ldc           #30                 // int 131072
      63: ixor
      64: ireturn

  public org.apache.activemq.openwire.OpenWireFormat copy();
    Code:
       0: new           #31                 // class org/apache/activemq/openwire/OpenWireFormat
       3: dup
       4: aload_0
       5: getfield      #18                 // Field version:I
       8: invokespecial #1                  // Method "<init>":(I)V
      11: astore_1
      12: aload_1
      13: aload_0
      14: getfield      #22                 // Field stackTraceEnabled:Z
      17: putfield      #22                 // Field stackTraceEnabled:Z
      20: aload_1
      21: aload_0
      22: getfield      #32                 // Field tcpNoDelayEnabled:Z
      25: putfield      #32                 // Field tcpNoDelayEnabled:Z
      28: aload_1
      29: aload_0
      30: getfield      #19                 // Field cacheEnabled:Z
      33: putfield      #19                 // Field cacheEnabled:Z
      36: aload_1
      37: aload_0
      38: getfield      #25                 // Field tightEncodingEnabled:Z
      41: putfield      #25                 // Field tightEncodingEnabled:Z
      44: aload_1
      45: aload_0
      46: getfield      #28                 // Field sizePrefixDisabled:Z
      49: putfield      #28                 // Field sizePrefixDisabled:Z
      52: aload_1
      53: aload_0
      54: getfield      #33                 // Field preferedWireFormatInfo:Lorg/apache/activemq/command/WireFormatInfo;
      57: putfield      #33                 // Field preferedWireFormatInfo:Lorg/apache/activemq/command/WireFormatInfo;
      60: aload_1
      61: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: iconst_0
       5: ireturn
       6: aload_1
       7: checkcast     #31                 // class org/apache/activemq/openwire/OpenWireFormat
      10: astore_2
      11: aload_2
      12: getfield      #22                 // Field stackTraceEnabled:Z
      15: aload_0
      16: getfield      #22                 // Field stackTraceEnabled:Z
      19: if_icmpne     70
      22: aload_2
      23: getfield      #19                 // Field cacheEnabled:Z
      26: aload_0
      27: getfield      #19                 // Field cacheEnabled:Z
      30: if_icmpne     70
      33: aload_2
      34: getfield      #18                 // Field version:I
      37: aload_0
      38: getfield      #18                 // Field version:I
      41: if_icmpne     70
      44: aload_2
      45: getfield      #25                 // Field tightEncodingEnabled:Z
      48: aload_0
      49: getfield      #25                 // Field tightEncodingEnabled:Z
      52: if_icmpne     70
      55: aload_2
      56: getfield      #28                 // Field sizePrefixDisabled:Z
      59: aload_0
      60: getfield      #28                 // Field sizePrefixDisabled:Z
      63: if_icmpne     70
      66: iconst_1
      67: goto          71
      70: iconst_0
      71: ireturn

  public java.lang.String toString();
    Code:
       0: new           #34                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #35                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #36                 // String OpenWireFormat{version=
       9: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: getfield      #18                 // Field version:I
      16: invokevirtual #38                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      19: ldc           #39                 // String , cacheEnabled=
      21: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: aload_0
      25: getfield      #19                 // Field cacheEnabled:Z
      28: invokevirtual #40                 // Method java/lang/StringBuilder.append:(Z)Ljava/lang/StringBuilder;
      31: ldc           #41                 // String , stackTraceEnabled=
      33: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      36: aload_0
      37: getfield      #22                 // Field stackTraceEnabled:Z
      40: invokevirtual #40                 // Method java/lang/StringBuilder.append:(Z)Ljava/lang/StringBuilder;
      43: ldc           #42                 // String , tightEncodingEnabled=
      45: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      48: aload_0
      49: getfield      #25                 // Field tightEncodingEnabled:Z
      52: invokevirtual #40                 // Method java/lang/StringBuilder.append:(Z)Ljava/lang/StringBuilder;
      55: ldc           #43                 // String , sizePrefixDisabled=
      57: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      60: aload_0
      61: getfield      #28                 // Field sizePrefixDisabled:Z
      64: invokevirtual #40                 // Method java/lang/StringBuilder.append:(Z)Ljava/lang/StringBuilder;
      67: ldc           #44                 // String , maxFrameSize=
      69: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      72: aload_0
      73: getfield      #5                  // Field maxFrameSize:J
      76: invokevirtual #45                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      79: ldc           #46                 // String }
      81: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      84: invokevirtual #47                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      87: areturn

  public int getVersion();
    Code:
       0: aload_0
       1: getfield      #18                 // Field version:I
       4: ireturn

  public synchronized org.apache.activemq.util.ByteSequence marshal(java.lang.Object) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #19                 // Field cacheEnabled:Z
       4: ifeq          11
       7: aload_0
       8: invokevirtual #48                 // Method runMarshallCacheEvictionSweep:()V
      11: aconst_null
      12: astore_2
      13: iconst_1
      14: istore_3
      15: aload_1
      16: ifnull        274
      19: aload_1
      20: checkcast     #49                 // class org/apache/activemq/command/DataStructure
      23: astore        4
      25: aload         4
      27: invokeinterface #50,  1           // InterfaceMethod org/apache/activemq/command/DataStructure.getDataStructureType:()B
      32: istore        5
      34: aload_0
      35: getfield      #51                 // Field dataMarshallers:[Lorg/apache/activemq/openwire/DataStreamMarshaller;
      38: iload         5
      40: sipush        255
      43: iand
      44: aaload
      45: astore        6
      47: aload         6
      49: ifnonnull     80
      52: new           #52                 // class java/io/IOException
      55: dup
      56: new           #34                 // class java/lang/StringBuilder
      59: dup
      60: invokespecial #35                 // Method java/lang/StringBuilder."<init>":()V
      63: ldc           #53                 // String Unknown data type:
      65: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      68: iload         5
      70: invokevirtual #38                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      73: invokevirtual #47                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      76: invokespecial #54                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      79: athrow
      80: aload_0
      81: getfield      #25                 // Field tightEncodingEnabled:Z
      84: ifeq          187
      87: new           #55                 // class org/apache/activemq/openwire/BooleanStream
      90: dup
      91: invokespecial #56                 // Method org/apache/activemq/openwire/BooleanStream."<init>":()V
      94: astore        7
      96: iload_3
      97: aload         6
      99: aload_0
     100: aload         4
     102: aload         7
     104: invokeinterface #57,  4           // InterfaceMethod org/apache/activemq/openwire/DataStreamMarshaller.tightMarshal1:(Lorg/apache/activemq/openwire/OpenWireFormat;Ljava/lang/Object;Lorg/apache/activemq/openwire/BooleanStream;)I
     109: iadd
     110: istore_3
     111: iload_3
     112: aload         7
     114: invokevirtual #58                 // Method org/apache/activemq/openwire/BooleanStream.marshalledSize:()I
     117: iadd
     118: istore_3
     119: aload_0
     120: getfield      #13                 // Field bytesOut:Lorg/apache/activemq/util/DataByteArrayOutputStream;
     123: iload_3
     124: invokevirtual #59                 // Method org/apache/activemq/util/DataByteArrayOutputStream.restart:(I)V
     127: aload_0
     128: getfield      #28                 // Field sizePrefixDisabled:Z
     131: ifne          142
     134: aload_0
     135: getfield      #13                 // Field bytesOut:Lorg/apache/activemq/util/DataByteArrayOutputStream;
     138: iload_3
     139: invokevirtual #60                 // Method org/apache/activemq/util/DataByteArrayOutputStream.writeInt:(I)V
     142: aload_0
     143: getfield      #13                 // Field bytesOut:Lorg/apache/activemq/util/DataByteArrayOutputStream;
     146: iload         5
     148: invokevirtual #61                 // Method org/apache/activemq/util/DataByteArrayOutputStream.writeByte:(I)V
     151: aload         7
     153: aload_0
     154: getfield      #13                 // Field bytesOut:Lorg/apache/activemq/util/DataByteArrayOutputStream;
     157: invokevirtual #62                 // Method org/apache/activemq/openwire/BooleanStream.marshal:(Ljava/io/DataOutput;)V
     160: aload         6
     162: aload_0
     163: aload         4
     165: aload_0
     166: getfield      #13                 // Field bytesOut:Lorg/apache/activemq/util/DataByteArrayOutputStream;
     169: aload         7
     171: invokeinterface #63,  5           // InterfaceMethod org/apache/activemq/openwire/DataStreamMarshaller.tightMarshal2:(Lorg/apache/activemq/openwire/OpenWireFormat;Ljava/lang/Object;Ljava/io/DataOutput;Lorg/apache/activemq/openwire/BooleanStream;)V
     176: aload_0
     177: getfield      #13                 // Field bytesOut:Lorg/apache/activemq/util/DataByteArrayOutputStream;
     180: invokevirtual #64                 // Method org/apache/activemq/util/DataByteArrayOutputStream.toByteSequence:()Lorg/apache/activemq/util/ByteSequence;
     183: astore_2
     184: goto          271
     187: aload_0
     188: getfield      #13                 // Field bytesOut:Lorg/apache/activemq/util/DataByteArrayOutputStream;
     191: invokevirtual #65                 // Method org/apache/activemq/util/DataByteArrayOutputStream.restart:()V
     194: aload_0
     195: getfield      #28                 // Field sizePrefixDisabled:Z
     198: ifne          209
     201: aload_0
     202: getfield      #13                 // Field bytesOut:Lorg/apache/activemq/util/DataByteArrayOutputStream;
     205: iconst_0
     206: invokevirtual #60                 // Method org/apache/activemq/util/DataByteArrayOutputStream.writeInt:(I)V
     209: aload_0
     210: getfield      #13                 // Field bytesOut:Lorg/apache/activemq/util/DataByteArrayOutputStream;
     213: iload         5
     215: invokevirtual #61                 // Method org/apache/activemq/util/DataByteArrayOutputStream.writeByte:(I)V
     218: aload         6
     220: aload_0
     221: aload         4
     223: aload_0
     224: getfield      #13                 // Field bytesOut:Lorg/apache/activemq/util/DataByteArrayOutputStream;
     227: invokeinterface #66,  4           // InterfaceMethod org/apache/activemq/openwire/DataStreamMarshaller.looseMarshal:(Lorg/apache/activemq/openwire/OpenWireFormat;Ljava/lang/Object;Ljava/io/DataOutput;)V
     232: aload_0
     233: getfield      #13                 // Field bytesOut:Lorg/apache/activemq/util/DataByteArrayOutputStream;
     236: invokevirtual #64                 // Method org/apache/activemq/util/DataByteArrayOutputStream.toByteSequence:()Lorg/apache/activemq/util/ByteSequence;
     239: astore_2
     240: aload_0
     241: getfield      #28                 // Field sizePrefixDisabled:Z
     244: ifne          271
     247: aload_2
     248: invokevirtual #67                 // Method org/apache/activemq/util/ByteSequence.getLength:()I
     251: iconst_4
     252: isub
     253: istore_3
     254: aload_2
     255: getfield      #68                 // Field org/apache/activemq/util/ByteSequence.offset:I
     258: istore        7
     260: aload_2
     261: iload_3
     262: invokestatic  #69                 // Method org/apache/activemq/util/ByteSequenceData.writeIntBig:(Lorg/apache/activemq/util/ByteSequence;I)V
     265: aload_2
     266: iload         7
     268: putfield      #68                 // Field org/apache/activemq/util/ByteSequence.offset:I
     271: goto          306
     274: aload_0
     275: getfield      #13                 // Field bytesOut:Lorg/apache/activemq/util/DataByteArrayOutputStream;
     278: iconst_5
     279: invokevirtual #59                 // Method org/apache/activemq/util/DataByteArrayOutputStream.restart:(I)V
     282: aload_0
     283: getfield      #13                 // Field bytesOut:Lorg/apache/activemq/util/DataByteArrayOutputStream;
     286: iload_3
     287: invokevirtual #60                 // Method org/apache/activemq/util/DataByteArrayOutputStream.writeInt:(I)V
     290: aload_0
     291: getfield      #13                 // Field bytesOut:Lorg/apache/activemq/util/DataByteArrayOutputStream;
     294: iconst_0
     295: invokevirtual #61                 // Method org/apache/activemq/util/DataByteArrayOutputStream.writeByte:(I)V
     298: aload_0
     299: getfield      #13                 // Field bytesOut:Lorg/apache/activemq/util/DataByteArrayOutputStream;
     302: invokevirtual #64                 // Method org/apache/activemq/util/DataByteArrayOutputStream.toByteSequence:()Lorg/apache/activemq/util/ByteSequence;
     305: astore_2
     306: aload_2
     307: areturn

  public synchronized java.lang.Object unmarshal(org.apache.activemq.util.ByteSequence) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #16                 // Field bytesIn:Lorg/apache/activemq/util/DataByteArrayInputStream;
       4: aload_1
       5: invokevirtual #70                 // Method org/apache/activemq/util/DataByteArrayInputStream.restart:(Lorg/apache/activemq/util/ByteSequence;)V
       8: aload_0
       9: getfield      #28                 // Field sizePrefixDisabled:Z
      12: ifne          94
      15: aload_0
      16: getfield      #16                 // Field bytesIn:Lorg/apache/activemq/util/DataByteArrayInputStream;
      19: invokevirtual #71                 // Method org/apache/activemq/util/DataByteArrayInputStream.readInt:()I
      22: istore_2
      23: aload_1
      24: invokevirtual #67                 // Method org/apache/activemq/util/ByteSequence.getLength:()I
      27: iconst_4
      28: isub
      29: iload_2
      30: if_icmpeq     33
      33: iload_2
      34: i2l
      35: aload_0
      36: getfield      #5                  // Field maxFrameSize:J
      39: lcmp
      40: ifle          94
      43: new           #52                 // class java/io/IOException
      46: dup
      47: new           #34                 // class java/lang/StringBuilder
      50: dup
      51: invokespecial #35                 // Method java/lang/StringBuilder."<init>":()V
      54: ldc           #72                 // String Frame size of
      56: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      59: iload_2
      60: ldc           #26                 // int 1048576
      62: idiv
      63: invokevirtual #38                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      66: ldc           #73                 // String  MB larger than max allowed
      68: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      71: aload_0
      72: getfield      #5                  // Field maxFrameSize:J
      75: ldc2_w        #74                 // long 1048576l
      78: ldiv
      79: invokevirtual #45                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      82: ldc           #76                 // String  MB
      84: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      87: invokevirtual #47                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      90: invokespecial #54                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      93: athrow
      94: aload_0
      95: aload_0
      96: getfield      #16                 // Field bytesIn:Lorg/apache/activemq/util/DataByteArrayInputStream;
      99: invokevirtual #77                 // Method doUnmarshal:(Ljava/io/DataInput;)Ljava/lang/Object;
     102: astore_2
     103: aload_2
     104: areturn

  public synchronized void marshal(java.lang.Object, java.io.DataOutput) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #19                 // Field cacheEnabled:Z
       4: ifeq          11
       7: aload_0
       8: invokevirtual #48                 // Method runMarshallCacheEvictionSweep:()V
      11: iconst_1
      12: istore_3
      13: aload_1
      14: ifnull        256
      17: aload_1
      18: checkcast     #49                 // class org/apache/activemq/command/DataStructure
      21: astore        4
      23: aload         4
      25: invokeinterface #50,  1           // InterfaceMethod org/apache/activemq/command/DataStructure.getDataStructureType:()B
      30: istore        5
      32: aload_0
      33: getfield      #51                 // Field dataMarshallers:[Lorg/apache/activemq/openwire/DataStreamMarshaller;
      36: iload         5
      38: sipush        255
      41: iand
      42: aaload
      43: astore        6
      45: aload         6
      47: ifnonnull     78
      50: new           #52                 // class java/io/IOException
      53: dup
      54: new           #34                 // class java/lang/StringBuilder
      57: dup
      58: invokespecial #35                 // Method java/lang/StringBuilder."<init>":()V
      61: ldc           #53                 // String Unknown data type:
      63: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      66: iload         5
      68: invokevirtual #38                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      71: invokevirtual #47                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      74: invokespecial #54                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      77: athrow
      78: aload_0
      79: getfield      #25                 // Field tightEncodingEnabled:Z
      82: ifeq          161
      85: new           #55                 // class org/apache/activemq/openwire/BooleanStream
      88: dup
      89: invokespecial #56                 // Method org/apache/activemq/openwire/BooleanStream."<init>":()V
      92: astore        7
      94: iload_3
      95: aload         6
      97: aload_0
      98: aload         4
     100: aload         7
     102: invokeinterface #57,  4           // InterfaceMethod org/apache/activemq/openwire/DataStreamMarshaller.tightMarshal1:(Lorg/apache/activemq/openwire/OpenWireFormat;Ljava/lang/Object;Lorg/apache/activemq/openwire/BooleanStream;)I
     107: iadd
     108: istore_3
     109: iload_3
     110: aload         7
     112: invokevirtual #58                 // Method org/apache/activemq/openwire/BooleanStream.marshalledSize:()I
     115: iadd
     116: istore_3
     117: aload_0
     118: getfield      #28                 // Field sizePrefixDisabled:Z
     121: ifne          131
     124: aload_2
     125: iload_3
     126: invokeinterface #78,  2           // InterfaceMethod java/io/DataOutput.writeInt:(I)V
     131: aload_2
     132: iload         5
     134: invokeinterface #79,  2           // InterfaceMethod java/io/DataOutput.writeByte:(I)V
     139: aload         7
     141: aload_2
     142: invokevirtual #62                 // Method org/apache/activemq/openwire/BooleanStream.marshal:(Ljava/io/DataOutput;)V
     145: aload         6
     147: aload_0
     148: aload         4
     150: aload_2
     151: aload         7
     153: invokeinterface #63,  5           // InterfaceMethod org/apache/activemq/openwire/DataStreamMarshaller.tightMarshal2:(Lorg/apache/activemq/openwire/OpenWireFormat;Ljava/lang/Object;Ljava/io/DataOutput;Lorg/apache/activemq/openwire/BooleanStream;)V
     158: goto          253
     161: aload_2
     162: astore        7
     164: aload_0
     165: getfield      #28                 // Field sizePrefixDisabled:Z
     168: ifne          184
     171: aload_0
     172: getfield      #13                 // Field bytesOut:Lorg/apache/activemq/util/DataByteArrayOutputStream;
     175: invokevirtual #65                 // Method org/apache/activemq/util/DataByteArrayOutputStream.restart:()V
     178: aload_0
     179: getfield      #13                 // Field bytesOut:Lorg/apache/activemq/util/DataByteArrayOutputStream;
     182: astore        7
     184: aload         7
     186: iload         5
     188: invokeinterface #79,  2           // InterfaceMethod java/io/DataOutput.writeByte:(I)V
     193: aload         6
     195: aload_0
     196: aload         4
     198: aload         7
     200: invokeinterface #66,  4           // InterfaceMethod org/apache/activemq/openwire/DataStreamMarshaller.looseMarshal:(Lorg/apache/activemq/openwire/OpenWireFormat;Ljava/lang/Object;Ljava/io/DataOutput;)V
     205: aload_0
     206: getfield      #28                 // Field sizePrefixDisabled:Z
     209: ifne          253
     212: aload_0
     213: getfield      #13                 // Field bytesOut:Lorg/apache/activemq/util/DataByteArrayOutputStream;
     216: invokevirtual #64                 // Method org/apache/activemq/util/DataByteArrayOutputStream.toByteSequence:()Lorg/apache/activemq/util/ByteSequence;
     219: astore        8
     221: aload_2
     222: aload         8
     224: invokevirtual #67                 // Method org/apache/activemq/util/ByteSequence.getLength:()I
     227: invokeinterface #78,  2           // InterfaceMethod java/io/DataOutput.writeInt:(I)V
     232: aload_2
     233: aload         8
     235: invokevirtual #80                 // Method org/apache/activemq/util/ByteSequence.getData:()[B
     238: aload         8
     240: invokevirtual #81                 // Method org/apache/activemq/util/ByteSequence.getOffset:()I
     243: aload         8
     245: invokevirtual #67                 // Method org/apache/activemq/util/ByteSequence.getLength:()I
     248: invokeinterface #82,  4           // InterfaceMethod java/io/DataOutput.write:([BII)V
     253: goto          277
     256: aload_0
     257: getfield      #28                 // Field sizePrefixDisabled:Z
     260: ifne          270
     263: aload_2
     264: iload_3
     265: invokeinterface #78,  2           // InterfaceMethod java/io/DataOutput.writeInt:(I)V
     270: aload_2
     271: iconst_0
     272: invokeinterface #79,  2           // InterfaceMethod java/io/DataOutput.writeByte:(I)V
     277: return

  public java.lang.Object unmarshal(java.io.DataInput) throws java.io.IOException;
    Code:
       0: aload_1
       1: astore_2
       2: aload_0
       3: getfield      #28                 // Field sizePrefixDisabled:Z
       6: ifne          77
       9: aload_1
      10: invokeinterface #83,  1           // InterfaceMethod java/io/DataInput.readInt:()I
      15: istore_3
      16: iload_3
      17: i2l
      18: aload_0
      19: getfield      #5                  // Field maxFrameSize:J
      22: lcmp
      23: ifle          77
      26: new           #52                 // class java/io/IOException
      29: dup
      30: new           #34                 // class java/lang/StringBuilder
      33: dup
      34: invokespecial #35                 // Method java/lang/StringBuilder."<init>":()V
      37: ldc           #72                 // String Frame size of
      39: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      42: iload_3
      43: ldc           #26                 // int 1048576
      45: idiv
      46: invokevirtual #38                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      49: ldc           #73                 // String  MB larger than max allowed
      51: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      54: aload_0
      55: getfield      #5                  // Field maxFrameSize:J
      58: ldc2_w        #74                 // long 1048576l
      61: ldiv
      62: invokevirtual #45                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      65: ldc           #76                 // String  MB
      67: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      70: invokevirtual #47                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      73: invokespecial #54                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      76: athrow
      77: aload_0
      78: aload_2
      79: invokevirtual #77                 // Method doUnmarshal:(Ljava/io/DataInput;)Ljava/lang/Object;
      82: areturn

  public int tightMarshal1(java.lang.Object, org.apache.activemq.openwire.BooleanStream) throws java.io.IOException;
    Code:
       0: iconst_1
       1: istore_3
       2: aload_1
       3: ifnull        88
       6: aload_1
       7: checkcast     #49                 // class org/apache/activemq/command/DataStructure
      10: astore        4
      12: aload         4
      14: invokeinterface #50,  1           // InterfaceMethod org/apache/activemq/command/DataStructure.getDataStructureType:()B
      19: istore        5
      21: aload_0
      22: getfield      #51                 // Field dataMarshallers:[Lorg/apache/activemq/openwire/DataStreamMarshaller;
      25: iload         5
      27: sipush        255
      30: iand
      31: aaload
      32: astore        6
      34: aload         6
      36: ifnonnull     67
      39: new           #52                 // class java/io/IOException
      42: dup
      43: new           #34                 // class java/lang/StringBuilder
      46: dup
      47: invokespecial #35                 // Method java/lang/StringBuilder."<init>":()V
      50: ldc           #53                 // String Unknown data type:
      52: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      55: iload         5
      57: invokevirtual #38                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      60: invokevirtual #47                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      63: invokespecial #54                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      66: athrow
      67: iload_3
      68: aload         6
      70: aload_0
      71: aload         4
      73: aload_2
      74: invokeinterface #57,  4           // InterfaceMethod org/apache/activemq/openwire/DataStreamMarshaller.tightMarshal1:(Lorg/apache/activemq/openwire/OpenWireFormat;Ljava/lang/Object;Lorg/apache/activemq/openwire/BooleanStream;)I
      79: iadd
      80: istore_3
      81: iload_3
      82: aload_2
      83: invokevirtual #58                 // Method org/apache/activemq/openwire/BooleanStream.marshalledSize:()I
      86: iadd
      87: istore_3
      88: iload_3
      89: ireturn

  public void tightMarshal2(java.lang.Object, java.io.DataOutput, org.apache.activemq.openwire.BooleanStream) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #19                 // Field cacheEnabled:Z
       4: ifeq          11
       7: aload_0
       8: invokevirtual #48                 // Method runMarshallCacheEvictionSweep:()V
      11: aload_1
      12: ifnull        101
      15: aload_1
      16: checkcast     #49                 // class org/apache/activemq/command/DataStructure
      19: astore        4
      21: aload         4
      23: invokeinterface #50,  1           // InterfaceMethod org/apache/activemq/command/DataStructure.getDataStructureType:()B
      28: istore        5
      30: aload_0
      31: getfield      #51                 // Field dataMarshallers:[Lorg/apache/activemq/openwire/DataStreamMarshaller;
      34: iload         5
      36: sipush        255
      39: iand
      40: aaload
      41: astore        6
      43: aload         6
      45: ifnonnull     76
      48: new           #52                 // class java/io/IOException
      51: dup
      52: new           #34                 // class java/lang/StringBuilder
      55: dup
      56: invokespecial #35                 // Method java/lang/StringBuilder."<init>":()V
      59: ldc           #53                 // String Unknown data type:
      61: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      64: iload         5
      66: invokevirtual #38                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      69: invokevirtual #47                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      72: invokespecial #54                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      75: athrow
      76: aload_2
      77: iload         5
      79: invokeinterface #79,  2           // InterfaceMethod java/io/DataOutput.writeByte:(I)V
      84: aload_3
      85: aload_2
      86: invokevirtual #62                 // Method org/apache/activemq/openwire/BooleanStream.marshal:(Ljava/io/DataOutput;)V
      89: aload         6
      91: aload_0
      92: aload         4
      94: aload_2
      95: aload_3
      96: invokeinterface #63,  5           // InterfaceMethod org/apache/activemq/openwire/DataStreamMarshaller.tightMarshal2:(Lorg/apache/activemq/openwire/OpenWireFormat;Ljava/lang/Object;Ljava/io/DataOutput;Lorg/apache/activemq/openwire/BooleanStream;)V
     101: return

  public void setVersion(int);
    Code:
       0: new           #34                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #35                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #84                 // String org.apache.activemq.openwire.v
       9: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: iload_1
      13: invokevirtual #38                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      16: ldc           #85                 // String .MarshallerFactory
      18: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      21: invokevirtual #47                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      24: astore_2
      25: aload_2
      26: iconst_0
      27: aload_0
      28: invokevirtual #86                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      31: invokevirtual #87                 // Method java/lang/Class.getClassLoader:()Ljava/lang/ClassLoader;
      34: invokestatic  #88                 // Method java/lang/Class.forName:(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class;
      37: astore_3
      38: goto          87
      41: astore        4
      43: new           #90                 // class java/lang/IllegalArgumentException
      46: dup
      47: new           #34                 // class java/lang/StringBuilder
      50: dup
      51: invokespecial #35                 // Method java/lang/StringBuilder."<init>":()V
      54: ldc           #91                 // String Invalid version:
      56: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      59: iload_1
      60: invokevirtual #38                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      63: ldc           #92                 // String , could not load
      65: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      68: aload_2
      69: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      72: invokevirtual #47                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      75: invokespecial #93                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      78: aload         4
      80: invokevirtual #94                 // Method java/lang/IllegalArgumentException.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;
      83: checkcast     #90                 // class java/lang/IllegalArgumentException
      86: athrow
      87: aload_3
      88: ldc           #95                 // String createMarshallerMap
      90: iconst_1
      91: anewarray     #96                 // class java/lang/Class
      94: dup
      95: iconst_0
      96: ldc_w         #31                 // class org/apache/activemq/openwire/OpenWireFormat
      99: aastore
     100: invokevirtual #97                 // Method java/lang/Class.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;
     103: astore        4
     105: aload_0
     106: aload         4
     108: aconst_null
     109: iconst_1
     110: anewarray     #98                 // class java/lang/Object
     113: dup
     114: iconst_0
     115: aload_0
     116: aastore
     117: invokevirtual #99                 // Method java/lang/reflect/Method.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;
     120: checkcast     #100                // class "[Lorg/apache/activemq/openwire/DataStreamMarshaller;"
     123: checkcast     #100                // class "[Lorg/apache/activemq/openwire/DataStreamMarshaller;"
     126: putfield      #51                 // Field dataMarshallers:[Lorg/apache/activemq/openwire/DataStreamMarshaller;
     129: goto          183
     132: astore        4
     134: new           #90                 // class java/lang/IllegalArgumentException
     137: dup
     138: new           #34                 // class java/lang/StringBuilder
     141: dup
     142: invokespecial #35                 // Method java/lang/StringBuilder."<init>":()V
     145: ldc           #91                 // String Invalid version:
     147: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     150: iload_1
     151: invokevirtual #38                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     154: ldc           #102                // String ,
     156: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     159: aload_2
     160: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     163: ldc           #103                // String  does not properly implement the createMarshallerMap method.
     165: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     168: invokevirtual #47                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     171: invokespecial #93                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     174: aload         4
     176: invokevirtual #94                 // Method java/lang/IllegalArgumentException.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;
     179: checkcast     #90                 // class java/lang/IllegalArgumentException
     182: athrow
     183: aload_0
     184: iload_1
     185: putfield      #18                 // Field version:I
     188: return
    Exception table:
       from    to  target type
          25    38    41   Class java/lang/ClassNotFoundException
          87   129   132   Class java/lang/Throwable

  public java.lang.Object doUnmarshal(java.io.DataInput) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokeinterface #104,  1          // InterfaceMethod java/io/DataInput.readByte:()B
       6: istore_2
       7: iload_2
       8: ifeq          111
      11: aload_0
      12: getfield      #51                 // Field dataMarshallers:[Lorg/apache/activemq/openwire/DataStreamMarshaller;
      15: iload_2
      16: sipush        255
      19: iand
      20: aaload
      21: astore_3
      22: aload_3
      23: ifnonnull     53
      26: new           #52                 // class java/io/IOException
      29: dup
      30: new           #34                 // class java/lang/StringBuilder
      33: dup
      34: invokespecial #35                 // Method java/lang/StringBuilder."<init>":()V
      37: ldc           #53                 // String Unknown data type:
      39: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      42: iload_2
      43: invokevirtual #38                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      46: invokevirtual #47                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      49: invokespecial #54                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      52: athrow
      53: aload_3
      54: invokeinterface #105,  1          // InterfaceMethod org/apache/activemq/openwire/DataStreamMarshaller.createObject:()Lorg/apache/activemq/command/DataStructure;
      59: astore        4
      61: aload_0
      62: getfield      #25                 // Field tightEncodingEnabled:Z
      65: ifeq          98
      68: new           #55                 // class org/apache/activemq/openwire/BooleanStream
      71: dup
      72: invokespecial #56                 // Method org/apache/activemq/openwire/BooleanStream."<init>":()V
      75: astore        5
      77: aload         5
      79: aload_1
      80: invokevirtual #106                // Method org/apache/activemq/openwire/BooleanStream.unmarshal:(Ljava/io/DataInput;)V
      83: aload_3
      84: aload_0
      85: aload         4
      87: aload_1
      88: aload         5
      90: invokeinterface #107,  5          // InterfaceMethod org/apache/activemq/openwire/DataStreamMarshaller.tightUnmarshal:(Lorg/apache/activemq/openwire/OpenWireFormat;Ljava/lang/Object;Ljava/io/DataInput;Lorg/apache/activemq/openwire/BooleanStream;)V
      95: goto          108
      98: aload_3
      99: aload_0
     100: aload         4
     102: aload_1
     103: invokeinterface #108,  4          // InterfaceMethod org/apache/activemq/openwire/DataStreamMarshaller.looseUnmarshal:(Lorg/apache/activemq/openwire/OpenWireFormat;Ljava/lang/Object;Ljava/io/DataInput;)V
     108: aload         4
     110: areturn
     111: aconst_null
     112: areturn

  public int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure, org.apache.activemq.openwire.BooleanStream) throws java.io.IOException;
    Code:
       0: aload_2
       1: aload_1
       2: ifnull        9
       5: iconst_1
       6: goto          10
       9: iconst_0
      10: invokevirtual #109                // Method org/apache/activemq/openwire/BooleanStream.writeBoolean:(Z)V
      13: aload_1
      14: ifnonnull     19
      17: iconst_0
      18: ireturn
      19: aload_1
      20: invokeinterface #110,  1          // InterfaceMethod org/apache/activemq/command/DataStructure.isMarshallAware:()Z
      25: ifeq          54
      28: aconst_null
      29: astore_3
      30: aload_2
      31: aload_3
      32: ifnull        39
      35: iconst_1
      36: goto          40
      39: iconst_0
      40: invokevirtual #109                // Method org/apache/activemq/openwire/BooleanStream.writeBoolean:(Z)V
      43: aload_3
      44: ifnull        54
      47: iconst_1
      48: aload_3
      49: invokevirtual #67                 // Method org/apache/activemq/util/ByteSequence.getLength:()I
      52: iadd
      53: ireturn
      54: aload_1
      55: invokeinterface #50,  1           // InterfaceMethod org/apache/activemq/command/DataStructure.getDataStructureType:()B
      60: istore_3
      61: aload_0
      62: getfield      #51                 // Field dataMarshallers:[Lorg/apache/activemq/openwire/DataStreamMarshaller;
      65: iload_3
      66: sipush        255
      69: iand
      70: aaload
      71: astore        4
      73: aload         4
      75: ifnonnull     105
      78: new           #52                 // class java/io/IOException
      81: dup
      82: new           #34                 // class java/lang/StringBuilder
      85: dup
      86: invokespecial #35                 // Method java/lang/StringBuilder."<init>":()V
      89: ldc           #53                 // String Unknown data type:
      91: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      94: iload_3
      95: invokevirtual #38                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      98: invokevirtual #47                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     101: invokespecial #54                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
     104: athrow
     105: iconst_1
     106: aload         4
     108: aload_0
     109: aload_1
     110: aload_2
     111: invokeinterface #57,  4           // InterfaceMethod org/apache/activemq/openwire/DataStreamMarshaller.tightMarshal1:(Lorg/apache/activemq/openwire/OpenWireFormat;Ljava/lang/Object;Lorg/apache/activemq/openwire/BooleanStream;)I
     116: iadd
     117: ireturn

  public void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure, java.io.DataOutput, org.apache.activemq.openwire.BooleanStream) throws java.io.IOException;
    Code:
       0: aload_3
       1: invokevirtual #111                // Method org/apache/activemq/openwire/BooleanStream.readBoolean:()Z
       4: ifne          8
       7: return
       8: aload_1
       9: invokeinterface #50,  1           // InterfaceMethod org/apache/activemq/command/DataStructure.getDataStructureType:()B
      14: istore        4
      16: aload_2
      17: iload         4
      19: invokeinterface #79,  2           // InterfaceMethod java/io/DataOutput.writeByte:(I)V
      24: aload_1
      25: invokeinterface #110,  1          // InterfaceMethod org/apache/activemq/command/DataStructure.isMarshallAware:()Z
      30: ifeq          50
      33: aload_3
      34: invokevirtual #111                // Method org/apache/activemq/openwire/BooleanStream.readBoolean:()Z
      37: ifeq          50
      40: new           #52                 // class java/io/IOException
      43: dup
      44: ldc           #112                // String Corrupted stream
      46: invokespecial #54                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      49: athrow
      50: aload_0
      51: getfield      #51                 // Field dataMarshallers:[Lorg/apache/activemq/openwire/DataStreamMarshaller;
      54: iload         4
      56: sipush        255
      59: iand
      60: aaload
      61: astore        5
      63: aload         5
      65: ifnonnull     96
      68: new           #52                 // class java/io/IOException
      71: dup
      72: new           #34                 // class java/lang/StringBuilder
      75: dup
      76: invokespecial #35                 // Method java/lang/StringBuilder."<init>":()V
      79: ldc           #53                 // String Unknown data type:
      81: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      84: iload         4
      86: invokevirtual #38                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      89: invokevirtual #47                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      92: invokespecial #54                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      95: athrow
      96: aload         5
      98: aload_0
      99: aload_1
     100: aload_2
     101: aload_3
     102: invokeinterface #63,  5           // InterfaceMethod org/apache/activemq/openwire/DataStreamMarshaller.tightMarshal2:(Lorg/apache/activemq/openwire/OpenWireFormat;Ljava/lang/Object;Ljava/io/DataOutput;Lorg/apache/activemq/openwire/BooleanStream;)V
     107: return

  public org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput, org.apache.activemq.openwire.BooleanStream) throws java.io.IOException;
    Code:
       0: aload_2
       1: invokevirtual #111                // Method org/apache/activemq/openwire/BooleanStream.readBoolean:()Z
       4: ifeq          144
       7: aload_1
       8: invokeinterface #104,  1          // InterfaceMethod java/io/DataInput.readByte:()B
      13: istore_3
      14: aload_0
      15: getfield      #51                 // Field dataMarshallers:[Lorg/apache/activemq/openwire/DataStreamMarshaller;
      18: iload_3
      19: sipush        255
      22: iand
      23: aaload
      24: astore        4
      26: aload         4
      28: ifnonnull     58
      31: new           #52                 // class java/io/IOException
      34: dup
      35: new           #34                 // class java/lang/StringBuilder
      38: dup
      39: invokespecial #35                 // Method java/lang/StringBuilder."<init>":()V
      42: ldc           #53                 // String Unknown data type:
      44: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      47: iload_3
      48: invokevirtual #38                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      51: invokevirtual #47                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      54: invokespecial #54                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      57: athrow
      58: aload         4
      60: invokeinterface #105,  1          // InterfaceMethod org/apache/activemq/openwire/DataStreamMarshaller.createObject:()Lorg/apache/activemq/command/DataStructure;
      65: astore        5
      67: aload         5
      69: invokeinterface #110,  1          // InterfaceMethod org/apache/activemq/command/DataStructure.isMarshallAware:()Z
      74: ifeq          129
      77: aload_2
      78: invokevirtual #111                // Method org/apache/activemq/openwire/BooleanStream.readBoolean:()Z
      81: ifeq          129
      84: aload_1
      85: invokeinterface #83,  1           // InterfaceMethod java/io/DataInput.readInt:()I
      90: pop
      91: aload_1
      92: invokeinterface #104,  1          // InterfaceMethod java/io/DataInput.readByte:()B
      97: pop
      98: new           #55                 // class org/apache/activemq/openwire/BooleanStream
     101: dup
     102: invokespecial #56                 // Method org/apache/activemq/openwire/BooleanStream."<init>":()V
     105: astore        6
     107: aload         6
     109: aload_1
     110: invokevirtual #106                // Method org/apache/activemq/openwire/BooleanStream.unmarshal:(Ljava/io/DataInput;)V
     113: aload         4
     115: aload_0
     116: aload         5
     118: aload_1
     119: aload         6
     121: invokeinterface #107,  5          // InterfaceMethod org/apache/activemq/openwire/DataStreamMarshaller.tightUnmarshal:(Lorg/apache/activemq/openwire/OpenWireFormat;Ljava/lang/Object;Ljava/io/DataInput;Lorg/apache/activemq/openwire/BooleanStream;)V
     126: goto          141
     129: aload         4
     131: aload_0
     132: aload         5
     134: aload_1
     135: aload_2
     136: invokeinterface #107,  5          // InterfaceMethod org/apache/activemq/openwire/DataStreamMarshaller.tightUnmarshal:(Lorg/apache/activemq/openwire/OpenWireFormat;Ljava/lang/Object;Ljava/io/DataInput;Lorg/apache/activemq/openwire/BooleanStream;)V
     141: aload         5
     143: areturn
     144: aconst_null
     145: areturn

  public org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokeinterface #113,  1          // InterfaceMethod java/io/DataInput.readBoolean:()Z
       6: ifeq          79
       9: aload_1
      10: invokeinterface #104,  1          // InterfaceMethod java/io/DataInput.readByte:()B
      15: istore_2
      16: aload_0
      17: getfield      #51                 // Field dataMarshallers:[Lorg/apache/activemq/openwire/DataStreamMarshaller;
      20: iload_2
      21: sipush        255
      24: iand
      25: aaload
      26: astore_3
      27: aload_3
      28: ifnonnull     58
      31: new           #52                 // class java/io/IOException
      34: dup
      35: new           #34                 // class java/lang/StringBuilder
      38: dup
      39: invokespecial #35                 // Method java/lang/StringBuilder."<init>":()V
      42: ldc           #53                 // String Unknown data type:
      44: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      47: iload_2
      48: invokevirtual #38                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      51: invokevirtual #47                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      54: invokespecial #54                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      57: athrow
      58: aload_3
      59: invokeinterface #105,  1          // InterfaceMethod org/apache/activemq/openwire/DataStreamMarshaller.createObject:()Lorg/apache/activemq/command/DataStructure;
      64: astore        4
      66: aload_3
      67: aload_0
      68: aload         4
      70: aload_1
      71: invokeinterface #108,  4          // InterfaceMethod org/apache/activemq/openwire/DataStreamMarshaller.looseUnmarshal:(Lorg/apache/activemq/openwire/OpenWireFormat;Ljava/lang/Object;Ljava/io/DataInput;)V
      76: aload         4
      78: areturn
      79: aconst_null
      80: areturn

  public void looseMarshalNestedObject(org.apache.activemq.command.DataStructure, java.io.DataOutput) throws java.io.IOException;
    Code:
       0: aload_2
       1: aload_1
       2: ifnull        9
       5: iconst_1
       6: goto          10
       9: iconst_0
      10: invokeinterface #114,  2          // InterfaceMethod java/io/DataOutput.writeBoolean:(Z)V
      15: aload_1
      16: ifnull        87
      19: aload_1
      20: invokeinterface #50,  1           // InterfaceMethod org/apache/activemq/command/DataStructure.getDataStructureType:()B
      25: istore_3
      26: aload_2
      27: iload_3
      28: invokeinterface #79,  2           // InterfaceMethod java/io/DataOutput.writeByte:(I)V
      33: aload_0
      34: getfield      #51                 // Field dataMarshallers:[Lorg/apache/activemq/openwire/DataStreamMarshaller;
      37: iload_3
      38: sipush        255
      41: iand
      42: aaload
      43: astore        4
      45: aload         4
      47: ifnonnull     77
      50: new           #52                 // class java/io/IOException
      53: dup
      54: new           #34                 // class java/lang/StringBuilder
      57: dup
      58: invokespecial #35                 // Method java/lang/StringBuilder."<init>":()V
      61: ldc           #53                 // String Unknown data type:
      63: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      66: iload_3
      67: invokevirtual #38                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      70: invokevirtual #47                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      73: invokespecial #54                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      76: athrow
      77: aload         4
      79: aload_0
      80: aload_1
      81: aload_2
      82: invokeinterface #66,  4           // InterfaceMethod org/apache/activemq/openwire/DataStreamMarshaller.looseMarshal:(Lorg/apache/activemq/openwire/OpenWireFormat;Ljava/lang/Object;Ljava/io/DataOutput;)V
      87: return

  public void runMarshallCacheEvictionSweep();
    Code:
       0: aload_0
       1: getfield      #8                  // Field marshallCacheMap:Ljava/util/Map;
       4: invokeinterface #115,  1          // InterfaceMethod java/util/Map.size:()I
       9: aload_0
      10: getfield      #9                  // Field marshallCache:[Lorg/apache/activemq/command/DataStructure;
      13: arraylength
      14: bipush        100
      16: isub
      17: if_icmple     80
      20: aload_0
      21: getfield      #8                  // Field marshallCacheMap:Ljava/util/Map;
      24: aload_0
      25: getfield      #9                  // Field marshallCache:[Lorg/apache/activemq/command/DataStructure;
      28: aload_0
      29: getfield      #116                // Field nextMarshallCacheEvictionIndex:S
      32: aaload
      33: invokeinterface #117,  2          // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      38: pop
      39: aload_0
      40: getfield      #9                  // Field marshallCache:[Lorg/apache/activemq/command/DataStructure;
      43: aload_0
      44: getfield      #116                // Field nextMarshallCacheEvictionIndex:S
      47: aconst_null
      48: aastore
      49: aload_0
      50: dup
      51: getfield      #116                // Field nextMarshallCacheEvictionIndex:S
      54: iconst_1
      55: iadd
      56: i2s
      57: putfield      #116                // Field nextMarshallCacheEvictionIndex:S
      60: aload_0
      61: getfield      #116                // Field nextMarshallCacheEvictionIndex:S
      64: aload_0
      65: getfield      #9                  // Field marshallCache:[Lorg/apache/activemq/command/DataStructure;
      68: arraylength
      69: if_icmplt     0
      72: aload_0
      73: iconst_0
      74: putfield      #116                // Field nextMarshallCacheEvictionIndex:S
      77: goto          0
      80: return

  public java.lang.Short getMarshallCacheIndex(org.apache.activemq.command.DataStructure);
    Code:
       0: aload_0
       1: getfield      #8                  // Field marshallCacheMap:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #118,  2          // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #119                // class java/lang/Short
      13: areturn

  public java.lang.Short addToMarshallCache(org.apache.activemq.command.DataStructure);
    Code:
       0: aload_0
       1: dup
       2: getfield      #120                // Field nextMarshallCacheIndex:S
       5: dup_x1
       6: iconst_1
       7: iadd
       8: i2s
       9: putfield      #120                // Field nextMarshallCacheIndex:S
      12: istore_2
      13: aload_0
      14: getfield      #120                // Field nextMarshallCacheIndex:S
      17: aload_0
      18: getfield      #9                  // Field marshallCache:[Lorg/apache/activemq/command/DataStructure;
      21: arraylength
      22: if_icmplt     30
      25: aload_0
      26: iconst_0
      27: putfield      #120                // Field nextMarshallCacheIndex:S
      30: aload_0
      31: getfield      #8                  // Field marshallCacheMap:Ljava/util/Map;
      34: invokeinterface #115,  1          // InterfaceMethod java/util/Map.size:()I
      39: aload_0
      40: getfield      #9                  // Field marshallCache:[Lorg/apache/activemq/command/DataStructure;
      43: arraylength
      44: if_icmpge     77
      47: aload_0
      48: getfield      #9                  // Field marshallCache:[Lorg/apache/activemq/command/DataStructure;
      51: iload_2
      52: aload_1
      53: aastore
      54: new           #119                // class java/lang/Short
      57: dup
      58: iload_2
      59: invokespecial #121                // Method java/lang/Short."<init>":(S)V
      62: astore_3
      63: aload_0
      64: getfield      #8                  // Field marshallCacheMap:Ljava/util/Map;
      67: aload_1
      68: aload_3
      69: invokeinterface #122,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      74: pop
      75: aload_3
      76: areturn
      77: new           #119                // class java/lang/Short
      80: dup
      81: iconst_m1
      82: invokespecial #121                // Method java/lang/Short."<init>":(S)V
      85: areturn

  public void setInUnmarshallCache(short, org.apache.activemq.command.DataStructure);
    Code:
       0: iload_1
       1: iconst_m1
       2: if_icmpne     6
       5: return
       6: aload_0
       7: getfield      #10                 // Field unmarshallCache:[Lorg/apache/activemq/command/DataStructure;
      10: iload_1
      11: aload_2
      12: aastore
      13: return

  public org.apache.activemq.command.DataStructure getFromUnmarshallCache(short);
    Code:
       0: aload_0
       1: getfield      #10                 // Field unmarshallCache:[Lorg/apache/activemq/command/DataStructure;
       4: iload_1
       5: aaload
       6: areturn

  public void setStackTraceEnabled(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #22                 // Field stackTraceEnabled:Z
       5: return

  public boolean isStackTraceEnabled();
    Code:
       0: aload_0
       1: getfield      #22                 // Field stackTraceEnabled:Z
       4: ireturn

  public boolean isTcpNoDelayEnabled();
    Code:
       0: aload_0
       1: getfield      #32                 // Field tcpNoDelayEnabled:Z
       4: ireturn

  public void setTcpNoDelayEnabled(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #32                 // Field tcpNoDelayEnabled:Z
       5: return

  public boolean isCacheEnabled();
    Code:
       0: aload_0
       1: getfield      #19                 // Field cacheEnabled:Z
       4: ireturn

  public void setCacheEnabled(boolean);
    Code:
       0: iload_1
       1: ifeq          24
       4: aload_0
       5: sipush        16383
       8: anewarray     #49                 // class org/apache/activemq/command/DataStructure
      11: putfield      #9                  // Field marshallCache:[Lorg/apache/activemq/command/DataStructure;
      14: aload_0
      15: sipush        16383
      18: anewarray     #49                 // class org/apache/activemq/command/DataStructure
      21: putfield      #10                 // Field unmarshallCache:[Lorg/apache/activemq/command/DataStructure;
      24: aload_0
      25: iload_1
      26: putfield      #19                 // Field cacheEnabled:Z
      29: return

  public boolean isTightEncodingEnabled();
    Code:
       0: aload_0
       1: getfield      #25                 // Field tightEncodingEnabled:Z
       4: ireturn

  public void setTightEncodingEnabled(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #25                 // Field tightEncodingEnabled:Z
       5: return

  public boolean isSizePrefixDisabled();
    Code:
       0: aload_0
       1: getfield      #28                 // Field sizePrefixDisabled:Z
       4: ireturn

  public void setSizePrefixDisabled(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #28                 // Field sizePrefixDisabled:Z
       5: return

  public void setPreferedWireFormatInfo(org.apache.activemq.command.WireFormatInfo);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #33                 // Field preferedWireFormatInfo:Lorg/apache/activemq/command/WireFormatInfo;
       5: return

  public org.apache.activemq.command.WireFormatInfo getPreferedWireFormatInfo();
    Code:
       0: aload_0
       1: getfield      #33                 // Field preferedWireFormatInfo:Lorg/apache/activemq/command/WireFormatInfo;
       4: areturn

  public long getMaxFrameSize();
    Code:
       0: aload_0
       1: getfield      #5                  // Field maxFrameSize:J
       4: lreturn

  public void setMaxFrameSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #5                  // Field maxFrameSize:J
       5: return

  public void renegotiateWireFormat(org.apache.activemq.command.WireFormatInfo) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #33                 // Field preferedWireFormatInfo:Lorg/apache/activemq/command/WireFormatInfo;
       4: ifnonnull     17
       7: new           #123                // class java/lang/IllegalStateException
      10: dup
      11: ldc           #124                // String Wireformat cannot not be renegotiated.
      13: invokespecial #125                // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: aload_0
      19: aload_0
      20: getfield      #33                 // Field preferedWireFormatInfo:Lorg/apache/activemq/command/WireFormatInfo;
      23: invokevirtual #126                // Method org/apache/activemq/command/WireFormatInfo.getVersion:()I
      26: aload_1
      27: invokevirtual #126                // Method org/apache/activemq/command/WireFormatInfo.getVersion:()I
      30: invokevirtual #127                // Method min:(II)I
      33: invokevirtual #17                 // Method setVersion:(I)V
      36: aload_1
      37: aload_0
      38: invokevirtual #128                // Method getVersion:()I
      41: invokevirtual #129                // Method org/apache/activemq/command/WireFormatInfo.setVersion:(I)V
      44: aload_0
      45: aload_0
      46: aload_0
      47: getfield      #33                 // Field preferedWireFormatInfo:Lorg/apache/activemq/command/WireFormatInfo;
      50: invokevirtual #130                // Method org/apache/activemq/command/WireFormatInfo.getMaxFrameSize:()J
      53: aload_1
      54: invokevirtual #130                // Method org/apache/activemq/command/WireFormatInfo.getMaxFrameSize:()J
      57: invokevirtual #131                // Method min:(JJ)J
      60: invokevirtual #132                // Method setMaxFrameSize:(J)V
      63: aload_1
      64: aload_0
      65: invokevirtual #133                // Method getMaxFrameSize:()J
      68: invokevirtual #134                // Method org/apache/activemq/command/WireFormatInfo.setMaxFrameSize:(J)V
      71: aload_0
      72: aload_1
      73: invokevirtual #135                // Method org/apache/activemq/command/WireFormatInfo.isStackTraceEnabled:()Z
      76: ifeq          93
      79: aload_0
      80: getfield      #33                 // Field preferedWireFormatInfo:Lorg/apache/activemq/command/WireFormatInfo;
      83: invokevirtual #135                // Method org/apache/activemq/command/WireFormatInfo.isStackTraceEnabled:()Z
      86: ifeq          93
      89: iconst_1
      90: goto          94
      93: iconst_0
      94: putfield      #22                 // Field stackTraceEnabled:Z
      97: aload_1
      98: aload_0
      99: getfield      #22                 // Field stackTraceEnabled:Z
     102: invokevirtual #136                // Method org/apache/activemq/command/WireFormatInfo.setStackTraceEnabled:(Z)V
     105: aload_0
     106: aload_1
     107: invokevirtual #137                // Method org/apache/activemq/command/WireFormatInfo.isTcpNoDelayEnabled:()Z
     110: ifeq          127
     113: aload_0
     114: getfield      #33                 // Field preferedWireFormatInfo:Lorg/apache/activemq/command/WireFormatInfo;
     117: invokevirtual #137                // Method org/apache/activemq/command/WireFormatInfo.isTcpNoDelayEnabled:()Z
     120: ifeq          127
     123: iconst_1
     124: goto          128
     127: iconst_0
     128: putfield      #32                 // Field tcpNoDelayEnabled:Z
     131: aload_1
     132: aload_0
     133: getfield      #32                 // Field tcpNoDelayEnabled:Z
     136: invokevirtual #138                // Method org/apache/activemq/command/WireFormatInfo.setTcpNoDelayEnabled:(Z)V
     139: aload_0
     140: aload_1
     141: invokevirtual #139                // Method org/apache/activemq/command/WireFormatInfo.isCacheEnabled:()Z
     144: ifeq          161
     147: aload_0
     148: getfield      #33                 // Field preferedWireFormatInfo:Lorg/apache/activemq/command/WireFormatInfo;
     151: invokevirtual #139                // Method org/apache/activemq/command/WireFormatInfo.isCacheEnabled:()Z
     154: ifeq          161
     157: iconst_1
     158: goto          162
     161: iconst_0
     162: putfield      #19                 // Field cacheEnabled:Z
     165: aload_1
     166: aload_0
     167: getfield      #19                 // Field cacheEnabled:Z
     170: invokevirtual #140                // Method org/apache/activemq/command/WireFormatInfo.setCacheEnabled:(Z)V
     173: aload_0
     174: aload_1
     175: invokevirtual #141                // Method org/apache/activemq/command/WireFormatInfo.isTightEncodingEnabled:()Z
     178: ifeq          195
     181: aload_0
     182: getfield      #33                 // Field preferedWireFormatInfo:Lorg/apache/activemq/command/WireFormatInfo;
     185: invokevirtual #141                // Method org/apache/activemq/command/WireFormatInfo.isTightEncodingEnabled:()Z
     188: ifeq          195
     191: iconst_1
     192: goto          196
     195: iconst_0
     196: putfield      #25                 // Field tightEncodingEnabled:Z
     199: aload_1
     200: aload_0
     201: getfield      #25                 // Field tightEncodingEnabled:Z
     204: invokevirtual #142                // Method org/apache/activemq/command/WireFormatInfo.setTightEncodingEnabled:(Z)V
     207: aload_0
     208: aload_1
     209: invokevirtual #143                // Method org/apache/activemq/command/WireFormatInfo.isSizePrefixDisabled:()Z
     212: ifeq          229
     215: aload_0
     216: getfield      #33                 // Field preferedWireFormatInfo:Lorg/apache/activemq/command/WireFormatInfo;
     219: invokevirtual #143                // Method org/apache/activemq/command/WireFormatInfo.isSizePrefixDisabled:()Z
     222: ifeq          229
     225: iconst_1
     226: goto          230
     229: iconst_0
     230: putfield      #28                 // Field sizePrefixDisabled:Z
     233: aload_1
     234: aload_0
     235: getfield      #28                 // Field sizePrefixDisabled:Z
     238: invokevirtual #144                // Method org/apache/activemq/command/WireFormatInfo.setSizePrefixDisabled:(Z)V
     241: aload_0
     242: getfield      #19                 // Field cacheEnabled:Z
     245: ifeq          316
     248: aload_0
     249: getfield      #33                 // Field preferedWireFormatInfo:Lorg/apache/activemq/command/WireFormatInfo;
     252: invokevirtual #145                // Method org/apache/activemq/command/WireFormatInfo.getCacheSize:()I
     255: aload_1
     256: invokevirtual #145                // Method org/apache/activemq/command/WireFormatInfo.getCacheSize:()I
     259: invokestatic  #146                // Method java/lang/Math.min:(II)I
     262: istore_2
     263: aload_1
     264: iload_2
     265: invokevirtual #147                // Method org/apache/activemq/command/WireFormatInfo.setCacheSize:(I)V
     268: iload_2
     269: ifne          276
     272: sipush        16383
     275: istore_2
     276: aload_0
     277: iload_2
     278: anewarray     #49                 // class org/apache/activemq/command/DataStructure
     281: putfield      #9                  // Field marshallCache:[Lorg/apache/activemq/command/DataStructure;
     284: aload_0
     285: iload_2
     286: anewarray     #49                 // class org/apache/activemq/command/DataStructure
     289: putfield      #10                 // Field unmarshallCache:[Lorg/apache/activemq/command/DataStructure;
     292: aload_0
     293: iconst_0
     294: putfield      #120                // Field nextMarshallCacheIndex:S
     297: aload_0
     298: iconst_0
     299: putfield      #116                // Field nextMarshallCacheEvictionIndex:S
     302: aload_0
     303: new           #6                  // class java/util/HashMap
     306: dup
     307: invokespecial #7                  // Method java/util/HashMap."<init>":()V
     310: putfield      #8                  // Field marshallCacheMap:Ljava/util/Map;
     313: goto          341
     316: aload_0
     317: aconst_null
     318: putfield      #9                  // Field marshallCache:[Lorg/apache/activemq/command/DataStructure;
     321: aload_0
     322: aconst_null
     323: putfield      #10                 // Field unmarshallCache:[Lorg/apache/activemq/command/DataStructure;
     326: aload_0
     327: iconst_0
     328: putfield      #120                // Field nextMarshallCacheIndex:S
     331: aload_0
     332: iconst_0
     333: putfield      #116                // Field nextMarshallCacheEvictionIndex:S
     336: aload_0
     337: aconst_null
     338: putfield      #8                  // Field marshallCacheMap:Ljava/util/Map;
     341: return

  protected int min(int, int);
    Code:
       0: iload_1
       1: iload_2
       2: if_icmpge     9
       5: iload_1
       6: ifgt          13
       9: iload_2
      10: ifgt          15
      13: iload_1
      14: ireturn
      15: iload_2
      16: ireturn

  protected long min(long, long);
    Code:
       0: lload_1
       1: lload_3
       2: lcmp
       3: ifge          12
       6: lload_1
       7: lconst_0
       8: lcmp
       9: ifgt          18
      12: lload_3
      13: lconst_0
      14: lcmp
      15: ifgt          20
      18: lload_1
      19: lreturn
      20: lload_3
      21: lreturn
}
