Compiled from "PolicyEntry.java"
public class org.apache.activemq.broker.region.policy.PolicyEntry extends org.apache.activemq.filter.DestinationMapEntry {
  private static final org.slf4j.Logger LOG;

  private org.apache.activemq.broker.region.policy.DispatchPolicy dispatchPolicy;

  private org.apache.activemq.broker.region.policy.SubscriptionRecoveryPolicy subscriptionRecoveryPolicy;

  private boolean sendAdvisoryIfNoConsumers;

  private org.apache.activemq.broker.region.policy.DeadLetterStrategy deadLetterStrategy;

  private org.apache.activemq.broker.region.policy.PendingMessageLimitStrategy pendingMessageLimitStrategy;

  private org.apache.activemq.broker.region.policy.MessageEvictionStrategy messageEvictionStrategy;

  private long memoryLimit;

  private java.lang.String messageGroupMapFactoryType;

  private org.apache.activemq.broker.region.group.MessageGroupMapFactory messageGroupMapFactory;

  private org.apache.activemq.broker.region.policy.PendingQueueMessageStoragePolicy pendingQueuePolicy;

  private org.apache.activemq.broker.region.policy.PendingDurableSubscriberMessageStoragePolicy pendingDurableSubscriberPolicy;

  private org.apache.activemq.broker.region.policy.PendingSubscriberMessageStoragePolicy pendingSubscriberPolicy;

  private int maxProducersToAudit;

  private int maxAuditDepth;

  private int maxQueueAuditDepth;

  private boolean enableAudit;

  private boolean producerFlowControl;

  private boolean alwaysRetroactive;

  private long blockedProducerWarningInterval;

  private boolean optimizedDispatch;

  private int maxPageSize;

  private int maxBrowsePageSize;

  private boolean useCache;

  private long minimumMessageSize;

  private boolean useConsumerPriority;

  private boolean strictOrderDispatch;

  private boolean lazyDispatch;

  private int timeBeforeDispatchStarts;

  private int consumersBeforeDispatchStarts;

  private boolean advisoryForSlowConsumers;

  private boolean advisoryForFastProducers;

  private boolean advisoryForDiscardingMessages;

  private boolean advisoryWhenFull;

  private boolean advisoryForDelivery;

  private boolean advisoryForConsumed;

  private long expireMessagesPeriod;

  private int maxExpirePageSize;

  private int queuePrefetch;

  private int queueBrowserPrefetch;

  private int topicPrefetch;

  private int durableTopicPrefetch;

  private boolean usePrefetchExtension;

  private int cursorMemoryHighWaterMark;

  private int storeUsageHighWaterMark;

  private org.apache.activemq.broker.region.policy.SlowConsumerStrategy slowConsumerStrategy;

  private boolean prioritizedMessages;

  private boolean allConsumersExclusiveByDefault;

  private boolean gcInactiveDestinations;

  private boolean gcWithNetworkConsumers;

  private long inactiveTimoutBeforeGC;

  private boolean reduceMemoryFootprint;

  private org.apache.activemq.network.NetworkBridgeFilterFactory networkBridgeFilterFactory;

  private boolean doOptimzeMessageStorage;

  private int optimizeMessageStoreInFlightLimit;

  private boolean persistJMSRedelivered;

  public org.apache.activemq.broker.region.policy.PolicyEntry();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/apache/activemq/filter/DestinationMapEntry."<init>":()V
       4: aload_0
       5: getstatic     #2                  // Field org/apache/activemq/broker/region/Destination.DEFAULT_DEAD_LETTER_STRATEGY:Lorg/apache/activemq/broker/region/policy/DeadLetterStrategy;
       8: putfield      #3                  // Field deadLetterStrategy:Lorg/apache/activemq/broker/region/policy/DeadLetterStrategy;
      11: aload_0
      12: ldc           #4                  // String cached
      14: putfield      #5                  // Field messageGroupMapFactoryType:Ljava/lang/String;
      17: aload_0
      18: bipush        64
      20: putfield      #6                  // Field maxProducersToAudit:I
      23: aload_0
      24: sipush        2048
      27: putfield      #7                  // Field maxAuditDepth:I
      30: aload_0
      31: sipush        2048
      34: putfield      #8                  // Field maxQueueAuditDepth:I
      37: aload_0
      38: iconst_1
      39: putfield      #9                  // Field enableAudit:Z
      42: aload_0
      43: iconst_1
      44: putfield      #10                 // Field producerFlowControl:Z
      47: aload_0
      48: iconst_0
      49: putfield      #11                 // Field alwaysRetroactive:Z
      52: aload_0
      53: ldc2_w        #12                 // long 30000l
      56: putfield      #14                 // Field blockedProducerWarningInterval:J
      59: aload_0
      60: iconst_0
      61: putfield      #15                 // Field optimizedDispatch:Z
      64: aload_0
      65: sipush        200
      68: putfield      #16                 // Field maxPageSize:I
      71: aload_0
      72: sipush        400
      75: putfield      #17                 // Field maxBrowsePageSize:I
      78: aload_0
      79: iconst_1
      80: putfield      #18                 // Field useCache:Z
      83: aload_0
      84: ldc2_w        #19                 // long 1024l
      87: putfield      #21                 // Field minimumMessageSize:J
      90: aload_0
      91: iconst_1
      92: putfield      #22                 // Field useConsumerPriority:Z
      95: aload_0
      96: iconst_0
      97: putfield      #23                 // Field strictOrderDispatch:Z
     100: aload_0
     101: iconst_0
     102: putfield      #24                 // Field lazyDispatch:Z
     105: aload_0
     106: iconst_0
     107: putfield      #25                 // Field timeBeforeDispatchStarts:I
     110: aload_0
     111: iconst_0
     112: putfield      #26                 // Field consumersBeforeDispatchStarts:I
     115: aload_0
     116: ldc2_w        #12                 // long 30000l
     119: putfield      #27                 // Field expireMessagesPeriod:J
     122: aload_0
     123: sipush        400
     126: putfield      #28                 // Field maxExpirePageSize:I
     129: aload_0
     130: sipush        1000
     133: putfield      #29                 // Field queuePrefetch:I
     136: aload_0
     137: sipush        500
     140: putfield      #30                 // Field queueBrowserPrefetch:I
     143: aload_0
     144: sipush        32767
     147: putfield      #31                 // Field topicPrefetch:I
     150: aload_0
     151: bipush        100
     153: putfield      #32                 // Field durableTopicPrefetch:I
     156: aload_0
     157: iconst_1
     158: putfield      #33                 // Field usePrefetchExtension:Z
     161: aload_0
     162: bipush        70
     164: putfield      #34                 // Field cursorMemoryHighWaterMark:I
     167: aload_0
     168: bipush        100
     170: putfield      #35                 // Field storeUsageHighWaterMark:I
     173: aload_0
     174: ldc2_w        #36                 // long 60000l
     177: putfield      #38                 // Field inactiveTimoutBeforeGC:J
     180: aload_0
     181: iconst_1
     182: putfield      #39                 // Field doOptimzeMessageStorage:Z
     185: aload_0
     186: bipush        10
     188: putfield      #40                 // Field optimizeMessageStoreInFlightLimit:I
     191: aload_0
     192: iconst_0
     193: putfield      #41                 // Field persistJMSRedelivered:Z
     196: return

  public void configure(org.apache.activemq.broker.Broker, org.apache.activemq.broker.region.Queue);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #42                 // Method baseConfiguration:(Lorg/apache/activemq/broker/Broker;Lorg/apache/activemq/broker/region/BaseDestination;)V
       6: aload_0
       7: getfield      #43                 // Field dispatchPolicy:Lorg/apache/activemq/broker/region/policy/DispatchPolicy;
      10: ifnull        21
      13: aload_2
      14: aload_0
      15: getfield      #43                 // Field dispatchPolicy:Lorg/apache/activemq/broker/region/policy/DispatchPolicy;
      18: invokevirtual #44                 // Method org/apache/activemq/broker/region/Queue.setDispatchPolicy:(Lorg/apache/activemq/broker/region/policy/DispatchPolicy;)V
      21: aload_2
      22: aload_0
      23: invokevirtual #45                 // Method getDeadLetterStrategy:()Lorg/apache/activemq/broker/region/policy/DeadLetterStrategy;
      26: invokevirtual #46                 // Method org/apache/activemq/broker/region/Queue.setDeadLetterStrategy:(Lorg/apache/activemq/broker/region/policy/DeadLetterStrategy;)V
      29: aload_2
      30: aload_0
      31: invokevirtual #47                 // Method getMessageGroupMapFactory:()Lorg/apache/activemq/broker/region/group/MessageGroupMapFactory;
      34: invokevirtual #48                 // Method org/apache/activemq/broker/region/Queue.setMessageGroupMapFactory:(Lorg/apache/activemq/broker/region/group/MessageGroupMapFactory;)V
      37: aload_0
      38: getfield      #49                 // Field memoryLimit:J
      41: lconst_0
      42: lcmp
      43: ifle          57
      46: aload_2
      47: invokevirtual #50                 // Method org/apache/activemq/broker/region/Queue.getMemoryUsage:()Lorg/apache/activemq/usage/MemoryUsage;
      50: aload_0
      51: getfield      #49                 // Field memoryLimit:J
      54: invokevirtual #51                 // Method org/apache/activemq/usage/MemoryUsage.setLimit:(J)V
      57: aload_0
      58: getfield      #52                 // Field pendingQueuePolicy:Lorg/apache/activemq/broker/region/policy/PendingQueueMessageStoragePolicy;
      61: ifnull        81
      64: aload_0
      65: getfield      #52                 // Field pendingQueuePolicy:Lorg/apache/activemq/broker/region/policy/PendingQueueMessageStoragePolicy;
      68: aload_1
      69: aload_2
      70: invokeinterface #53,  3           // InterfaceMethod org/apache/activemq/broker/region/policy/PendingQueueMessageStoragePolicy.getQueuePendingMessageCursor:(Lorg/apache/activemq/broker/Broker;Lorg/apache/activemq/broker/region/Queue;)Lorg/apache/activemq/broker/region/cursors/PendingMessageCursor;
      75: astore_3
      76: aload_2
      77: aload_3
      78: invokevirtual #54                 // Method org/apache/activemq/broker/region/Queue.setMessages:(Lorg/apache/activemq/broker/region/cursors/PendingMessageCursor;)V
      81: aload_2
      82: aload_0
      83: invokevirtual #55                 // Method isUseConsumerPriority:()Z
      86: invokevirtual #56                 // Method org/apache/activemq/broker/region/Queue.setUseConsumerPriority:(Z)V
      89: aload_2
      90: aload_0
      91: invokevirtual #57                 // Method isStrictOrderDispatch:()Z
      94: invokevirtual #58                 // Method org/apache/activemq/broker/region/Queue.setStrictOrderDispatch:(Z)V
      97: aload_2
      98: aload_0
      99: invokevirtual #59                 // Method isOptimizedDispatch:()Z
     102: invokevirtual #60                 // Method org/apache/activemq/broker/region/Queue.setOptimizedDispatch:(Z)V
     105: aload_2
     106: aload_0
     107: invokevirtual #61                 // Method isLazyDispatch:()Z
     110: invokevirtual #62                 // Method org/apache/activemq/broker/region/Queue.setLazyDispatch:(Z)V
     113: aload_2
     114: aload_0
     115: invokevirtual #63                 // Method getTimeBeforeDispatchStarts:()I
     118: invokevirtual #64                 // Method org/apache/activemq/broker/region/Queue.setTimeBeforeDispatchStarts:(I)V
     121: aload_2
     122: aload_0
     123: invokevirtual #65                 // Method getConsumersBeforeDispatchStarts:()I
     126: invokevirtual #66                 // Method org/apache/activemq/broker/region/Queue.setConsumersBeforeDispatchStarts:(I)V
     129: aload_2
     130: aload_0
     131: invokevirtual #67                 // Method isAllConsumersExclusiveByDefault:()Z
     134: invokevirtual #68                 // Method org/apache/activemq/broker/region/Queue.setAllConsumersExclusiveByDefault:(Z)V
     137: aload_2
     138: aload_0
     139: invokevirtual #69                 // Method isPersistJMSRedelivered:()Z
     142: invokevirtual #70                 // Method org/apache/activemq/broker/region/Queue.setPersistJMSRedelivered:(Z)V
     145: return

  public void update(org.apache.activemq.broker.region.Queue);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #71                 // Method baseUpdate:(Lorg/apache/activemq/broker/region/BaseDestination;)V
       5: aload_0
       6: getfield      #49                 // Field memoryLimit:J
       9: lconst_0
      10: lcmp
      11: ifle          25
      14: aload_1
      15: invokevirtual #50                 // Method org/apache/activemq/broker/region/Queue.getMemoryUsage:()Lorg/apache/activemq/usage/MemoryUsage;
      18: aload_0
      19: getfield      #49                 // Field memoryLimit:J
      22: invokevirtual #51                 // Method org/apache/activemq/usage/MemoryUsage.setLimit:(J)V
      25: aload_1
      26: aload_0
      27: invokevirtual #55                 // Method isUseConsumerPriority:()Z
      30: invokevirtual #56                 // Method org/apache/activemq/broker/region/Queue.setUseConsumerPriority:(Z)V
      33: aload_1
      34: aload_0
      35: invokevirtual #57                 // Method isStrictOrderDispatch:()Z
      38: invokevirtual #58                 // Method org/apache/activemq/broker/region/Queue.setStrictOrderDispatch:(Z)V
      41: aload_1
      42: aload_0
      43: invokevirtual #59                 // Method isOptimizedDispatch:()Z
      46: invokevirtual #60                 // Method org/apache/activemq/broker/region/Queue.setOptimizedDispatch:(Z)V
      49: aload_1
      50: aload_0
      51: invokevirtual #61                 // Method isLazyDispatch:()Z
      54: invokevirtual #62                 // Method org/apache/activemq/broker/region/Queue.setLazyDispatch:(Z)V
      57: aload_1
      58: aload_0
      59: invokevirtual #63                 // Method getTimeBeforeDispatchStarts:()I
      62: invokevirtual #64                 // Method org/apache/activemq/broker/region/Queue.setTimeBeforeDispatchStarts:(I)V
      65: aload_1
      66: aload_0
      67: invokevirtual #65                 // Method getConsumersBeforeDispatchStarts:()I
      70: invokevirtual #66                 // Method org/apache/activemq/broker/region/Queue.setConsumersBeforeDispatchStarts:(I)V
      73: aload_1
      74: aload_0
      75: invokevirtual #67                 // Method isAllConsumersExclusiveByDefault:()Z
      78: invokevirtual #68                 // Method org/apache/activemq/broker/region/Queue.setAllConsumersExclusiveByDefault:(Z)V
      81: aload_1
      82: aload_0
      83: invokevirtual #69                 // Method isPersistJMSRedelivered:()Z
      86: invokevirtual #70                 // Method org/apache/activemq/broker/region/Queue.setPersistJMSRedelivered:(Z)V
      89: return

  public void configure(org.apache.activemq.broker.Broker, org.apache.activemq.broker.region.Topic);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #42                 // Method baseConfiguration:(Lorg/apache/activemq/broker/Broker;Lorg/apache/activemq/broker/region/BaseDestination;)V
       6: aload_0
       7: getfield      #43                 // Field dispatchPolicy:Lorg/apache/activemq/broker/region/policy/DispatchPolicy;
      10: ifnull        21
      13: aload_2
      14: aload_0
      15: getfield      #43                 // Field dispatchPolicy:Lorg/apache/activemq/broker/region/policy/DispatchPolicy;
      18: invokevirtual #72                 // Method org/apache/activemq/broker/region/Topic.setDispatchPolicy:(Lorg/apache/activemq/broker/region/policy/DispatchPolicy;)V
      21: aload_2
      22: aload_0
      23: invokevirtual #45                 // Method getDeadLetterStrategy:()Lorg/apache/activemq/broker/region/policy/DeadLetterStrategy;
      26: invokevirtual #73                 // Method org/apache/activemq/broker/region/Topic.setDeadLetterStrategy:(Lorg/apache/activemq/broker/region/policy/DeadLetterStrategy;)V
      29: aload_0
      30: getfield      #74                 // Field subscriptionRecoveryPolicy:Lorg/apache/activemq/broker/region/policy/SubscriptionRecoveryPolicy;
      33: ifnull        58
      36: aload_0
      37: getfield      #74                 // Field subscriptionRecoveryPolicy:Lorg/apache/activemq/broker/region/policy/SubscriptionRecoveryPolicy;
      40: invokeinterface #75,  1           // InterfaceMethod org/apache/activemq/broker/region/policy/SubscriptionRecoveryPolicy.copy:()Lorg/apache/activemq/broker/region/policy/SubscriptionRecoveryPolicy;
      45: astore_3
      46: aload_3
      47: aload_1
      48: invokeinterface #76,  2           // InterfaceMethod org/apache/activemq/broker/region/policy/SubscriptionRecoveryPolicy.setBroker:(Lorg/apache/activemq/broker/Broker;)V
      53: aload_2
      54: aload_3
      55: invokevirtual #77                 // Method org/apache/activemq/broker/region/Topic.setSubscriptionRecoveryPolicy:(Lorg/apache/activemq/broker/region/policy/SubscriptionRecoveryPolicy;)V
      58: aload_0
      59: getfield      #49                 // Field memoryLimit:J
      62: lconst_0
      63: lcmp
      64: ifle          78
      67: aload_2
      68: invokevirtual #78                 // Method org/apache/activemq/broker/region/Topic.getMemoryUsage:()Lorg/apache/activemq/usage/MemoryUsage;
      71: aload_0
      72: getfield      #49                 // Field memoryLimit:J
      75: invokevirtual #51                 // Method org/apache/activemq/usage/MemoryUsage.setLimit:(J)V
      78: aload_2
      79: aload_0
      80: invokevirtual #61                 // Method isLazyDispatch:()Z
      83: invokevirtual #79                 // Method org/apache/activemq/broker/region/Topic.setLazyDispatch:(Z)V
      86: return

  public void update(org.apache.activemq.broker.region.Topic);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #71                 // Method baseUpdate:(Lorg/apache/activemq/broker/region/BaseDestination;)V
       5: aload_0
       6: getfield      #49                 // Field memoryLimit:J
       9: lconst_0
      10: lcmp
      11: ifle          25
      14: aload_1
      15: invokevirtual #78                 // Method org/apache/activemq/broker/region/Topic.getMemoryUsage:()Lorg/apache/activemq/usage/MemoryUsage;
      18: aload_0
      19: getfield      #49                 // Field memoryLimit:J
      22: invokevirtual #51                 // Method org/apache/activemq/usage/MemoryUsage.setLimit:(J)V
      25: aload_1
      26: aload_0
      27: invokevirtual #61                 // Method isLazyDispatch:()Z
      30: invokevirtual #79                 // Method org/apache/activemq/broker/region/Topic.setLazyDispatch:(Z)V
      33: return

  public void baseUpdate(org.apache.activemq.broker.region.BaseDestination);
    Code:
       0: aload_1
       1: aload_0
       2: invokevirtual #80                 // Method isProducerFlowControl:()Z
       5: invokevirtual #81                 // Method org/apache/activemq/broker/region/BaseDestination.setProducerFlowControl:(Z)V
       8: aload_1
       9: aload_0
      10: invokevirtual #82                 // Method isAlwaysRetroactive:()Z
      13: invokevirtual #83                 // Method org/apache/activemq/broker/region/BaseDestination.setAlwaysRetroactive:(Z)V
      16: aload_1
      17: aload_0
      18: invokevirtual #84                 // Method getBlockedProducerWarningInterval:()J
      21: invokevirtual #85                 // Method org/apache/activemq/broker/region/BaseDestination.setBlockedProducerWarningInterval:(J)V
      24: aload_1
      25: aload_0
      26: invokevirtual #86                 // Method getMaxPageSize:()I
      29: invokevirtual #87                 // Method org/apache/activemq/broker/region/BaseDestination.setMaxPageSize:(I)V
      32: aload_1
      33: aload_0
      34: invokevirtual #88                 // Method getMaxBrowsePageSize:()I
      37: invokevirtual #89                 // Method org/apache/activemq/broker/region/BaseDestination.setMaxBrowsePageSize:(I)V
      40: aload_1
      41: aload_0
      42: invokevirtual #90                 // Method getMinimumMessageSize:()J
      45: l2i
      46: invokevirtual #91                 // Method org/apache/activemq/broker/region/BaseDestination.setMinimumMessageSize:(I)V
      49: aload_1
      50: aload_0
      51: invokevirtual #92                 // Method getMaxExpirePageSize:()I
      54: invokevirtual #93                 // Method org/apache/activemq/broker/region/BaseDestination.setMaxExpirePageSize:(I)V
      57: aload_1
      58: aload_0
      59: invokevirtual #94                 // Method getCursorMemoryHighWaterMark:()I
      62: invokevirtual #95                 // Method org/apache/activemq/broker/region/BaseDestination.setCursorMemoryHighWaterMark:(I)V
      65: aload_1
      66: aload_0
      67: invokevirtual #96                 // Method getStoreUsageHighWaterMark:()I
      70: invokevirtual #97                 // Method org/apache/activemq/broker/region/BaseDestination.setStoreUsageHighWaterMark:(I)V
      73: aload_1
      74: aload_0
      75: invokevirtual #98                 // Method isGcInactiveDestinations:()Z
      78: invokevirtual #99                 // Method org/apache/activemq/broker/region/BaseDestination.setGcIfInactive:(Z)V
      81: aload_1
      82: aload_0
      83: invokevirtual #100                // Method isGcWithNetworkConsumers:()Z
      86: invokevirtual #101                // Method org/apache/activemq/broker/region/BaseDestination.setGcWithNetworkConsumers:(Z)V
      89: aload_1
      90: aload_0
      91: invokevirtual #102                // Method getInactiveTimoutBeforeGC:()J
      94: invokevirtual #103                // Method org/apache/activemq/broker/region/BaseDestination.setInactiveTimoutBeforeGC:(J)V
      97: aload_1
      98: aload_0
      99: invokevirtual #104                // Method isReduceMemoryFootprint:()Z
     102: invokevirtual #105                // Method org/apache/activemq/broker/region/BaseDestination.setReduceMemoryFootprint:(Z)V
     105: aload_1
     106: aload_0
     107: invokevirtual #106                // Method isDoOptimzeMessageStorage:()Z
     110: invokevirtual #107                // Method org/apache/activemq/broker/region/BaseDestination.setDoOptimzeMessageStorage:(Z)V
     113: aload_1
     114: aload_0
     115: invokevirtual #108                // Method getOptimizeMessageStoreInFlightLimit:()I
     118: invokevirtual #109                // Method org/apache/activemq/broker/region/BaseDestination.setOptimizeMessageStoreInFlightLimit:(I)V
     121: aload_1
     122: aload_0
     123: invokevirtual #110                // Method isAdvisoryForConsumed:()Z
     126: invokevirtual #111                // Method org/apache/activemq/broker/region/BaseDestination.setAdvisoryForConsumed:(Z)V
     129: aload_1
     130: aload_0
     131: invokevirtual #112                // Method isAdvisoryForDelivery:()Z
     134: invokevirtual #113                // Method org/apache/activemq/broker/region/BaseDestination.setAdvisoryForDelivery:(Z)V
     137: aload_1
     138: aload_0
     139: invokevirtual #114                // Method isAdvisoryForDiscardingMessages:()Z
     142: invokevirtual #115                // Method org/apache/activemq/broker/region/BaseDestination.setAdvisoryForDiscardingMessages:(Z)V
     145: aload_1
     146: aload_0
     147: invokevirtual #116                // Method isAdvisoryForSlowConsumers:()Z
     150: invokevirtual #117                // Method org/apache/activemq/broker/region/BaseDestination.setAdvisoryForSlowConsumers:(Z)V
     153: aload_1
     154: aload_0
     155: invokevirtual #118                // Method isAdvisoryForFastProducers:()Z
     158: invokevirtual #119                // Method org/apache/activemq/broker/region/BaseDestination.setAdvisoryForFastProducers:(Z)V
     161: aload_1
     162: aload_0
     163: invokevirtual #120                // Method isAdvisoryWhenFull:()Z
     166: invokevirtual #121                // Method org/apache/activemq/broker/region/BaseDestination.setAdvisoryWhenFull:(Z)V
     169: aload_1
     170: aload_0
     171: invokevirtual #122                // Method isSendAdvisoryIfNoConsumers:()Z
     174: invokevirtual #123                // Method org/apache/activemq/broker/region/BaseDestination.setSendAdvisoryIfNoConsumers:(Z)V
     177: return

  public void baseConfiguration(org.apache.activemq.broker.Broker, org.apache.activemq.broker.region.BaseDestination);
    Code:
       0: aload_0
       1: aload_2
       2: invokevirtual #71                 // Method baseUpdate:(Lorg/apache/activemq/broker/region/BaseDestination;)V
       5: aload_2
       6: aload_0
       7: invokevirtual #124                // Method isEnableAudit:()Z
      10: invokevirtual #125                // Method org/apache/activemq/broker/region/BaseDestination.setEnableAudit:(Z)V
      13: aload_2
      14: aload_0
      15: invokevirtual #126                // Method getMaxQueueAuditDepth:()I
      18: invokevirtual #127                // Method org/apache/activemq/broker/region/BaseDestination.setMaxAuditDepth:(I)V
      21: aload_2
      22: aload_0
      23: invokevirtual #128                // Method getMaxProducersToAudit:()I
      26: invokevirtual #129                // Method org/apache/activemq/broker/region/BaseDestination.setMaxProducersToAudit:(I)V
      29: aload_2
      30: aload_0
      31: invokevirtual #130                // Method isUseCache:()Z
      34: invokevirtual #131                // Method org/apache/activemq/broker/region/BaseDestination.setUseCache:(Z)V
      37: aload_2
      38: aload_0
      39: invokevirtual #132                // Method getExpireMessagesPeriod:()J
      42: invokevirtual #133                // Method org/apache/activemq/broker/region/BaseDestination.setExpireMessagesPeriod:(J)V
      45: aload_0
      46: invokevirtual #134                // Method getSlowConsumerStrategy:()Lorg/apache/activemq/broker/region/policy/SlowConsumerStrategy;
      49: astore_3
      50: aload_3
      51: ifnull        68
      54: aload_3
      55: aload_1
      56: invokeinterface #135,  2          // InterfaceMethod org/apache/activemq/broker/region/policy/SlowConsumerStrategy.setBrokerService:(Lorg/apache/activemq/broker/Broker;)V
      61: aload_3
      62: aload_2
      63: invokeinterface #136,  2          // InterfaceMethod org/apache/activemq/broker/region/policy/SlowConsumerStrategy.addDestination:(Lorg/apache/activemq/broker/region/Destination;)V
      68: aload_2
      69: aload_3
      70: invokevirtual #137                // Method org/apache/activemq/broker/region/BaseDestination.setSlowConsumerStrategy:(Lorg/apache/activemq/broker/region/policy/SlowConsumerStrategy;)V
      73: aload_2
      74: aload_0
      75: invokevirtual #138                // Method isPrioritizedMessages:()Z
      78: invokevirtual #139                // Method org/apache/activemq/broker/region/BaseDestination.setPrioritizedMessages:(Z)V
      81: return

  public void configure(org.apache.activemq.broker.Broker, org.apache.activemq.usage.SystemUsage, org.apache.activemq.broker.region.TopicSubscription);
    Code:
       0: aload_0
       1: aload_3
       2: invokevirtual #140                // Method configurePrefetch:(Lorg/apache/activemq/broker/region/Subscription;)V
       5: aload_0
       6: getfield      #141                // Field pendingMessageLimitStrategy:Lorg/apache/activemq/broker/region/policy/PendingMessageLimitStrategy;
       9: ifnull        87
      12: aload_0
      13: getfield      #141                // Field pendingMessageLimitStrategy:Lorg/apache/activemq/broker/region/policy/PendingMessageLimitStrategy;
      16: aload_3
      17: invokeinterface #142,  2          // InterfaceMethod org/apache/activemq/broker/region/policy/PendingMessageLimitStrategy.getMaximumPendingMessageLimit:(Lorg/apache/activemq/broker/region/TopicSubscription;)I
      22: istore        4
      24: aload_3
      25: invokevirtual #143                // Method org/apache/activemq/broker/region/TopicSubscription.getInfo:()Lorg/apache/activemq/command/ConsumerInfo;
      28: invokevirtual #144                // Method org/apache/activemq/command/ConsumerInfo.getMaximumPendingMessageLimit:()I
      31: istore        5
      33: iload         5
      35: ifle          54
      38: iload         4
      40: iflt          50
      43: iload         5
      45: iload         4
      47: if_icmpge     54
      50: iload         5
      52: istore        4
      54: iload         4
      56: iflt          87
      59: getstatic     #145                // Field LOG:Lorg/slf4j/Logger;
      62: ldc           #146                // String Setting the maximumPendingMessages size to: {} for consumer: {}
      64: iload         4
      66: invokestatic  #147                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      69: aload_3
      70: invokevirtual #143                // Method org/apache/activemq/broker/region/TopicSubscription.getInfo:()Lorg/apache/activemq/command/ConsumerInfo;
      73: invokevirtual #148                // Method org/apache/activemq/command/ConsumerInfo.getConsumerId:()Lorg/apache/activemq/command/ConsumerId;
      76: invokeinterface #149,  4          // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      81: aload_3
      82: iload         4
      84: invokevirtual #150                // Method org/apache/activemq/broker/region/TopicSubscription.setMaximumPendingMessages:(I)V
      87: aload_0
      88: getfield      #151                // Field messageEvictionStrategy:Lorg/apache/activemq/broker/region/policy/MessageEvictionStrategy;
      91: ifnull        102
      94: aload_3
      95: aload_0
      96: getfield      #151                // Field messageEvictionStrategy:Lorg/apache/activemq/broker/region/policy/MessageEvictionStrategy;
      99: invokevirtual #152                // Method org/apache/activemq/broker/region/TopicSubscription.setMessageEvictionStrategy:(Lorg/apache/activemq/broker/region/policy/MessageEvictionStrategy;)V
     102: aload_0
     103: getfield      #153                // Field pendingSubscriberPolicy:Lorg/apache/activemq/broker/region/policy/PendingSubscriberMessageStoragePolicy;
     106: ifnull        174
     109: new           #154                // class java/lang/StringBuilder
     112: dup
     113: invokespecial #155                // Method java/lang/StringBuilder."<init>":()V
     116: aload_3
     117: invokevirtual #156                // Method org/apache/activemq/broker/region/TopicSubscription.getContext:()Lorg/apache/activemq/broker/ConnectionContext;
     120: invokevirtual #157                // Method org/apache/activemq/broker/ConnectionContext.getClientId:()Ljava/lang/String;
     123: invokevirtual #158                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     126: ldc           #159                // String _
     128: invokevirtual #158                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     131: aload_3
     132: invokevirtual #160                // Method org/apache/activemq/broker/region/TopicSubscription.getConsumerInfo:()Lorg/apache/activemq/command/ConsumerInfo;
     135: invokevirtual #148                // Method org/apache/activemq/command/ConsumerInfo.getConsumerId:()Lorg/apache/activemq/command/ConsumerId;
     138: invokevirtual #161                // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     141: invokevirtual #162                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     144: astore        4
     146: aload_3
     147: invokevirtual #160                // Method org/apache/activemq/broker/region/TopicSubscription.getConsumerInfo:()Lorg/apache/activemq/command/ConsumerInfo;
     150: invokevirtual #163                // Method org/apache/activemq/command/ConsumerInfo.getPrefetchSize:()I
     153: istore        5
     155: aload_3
     156: aload_0
     157: getfield      #153                // Field pendingSubscriberPolicy:Lorg/apache/activemq/broker/region/policy/PendingSubscriberMessageStoragePolicy;
     160: aload_1
     161: aload         4
     163: iload         5
     165: aload_3
     166: invokeinterface #164,  5          // InterfaceMethod org/apache/activemq/broker/region/policy/PendingSubscriberMessageStoragePolicy.getSubscriberPendingMessageCursor:(Lorg/apache/activemq/broker/Broker;Ljava/lang/String;ILorg/apache/activemq/broker/region/Subscription;)Lorg/apache/activemq/broker/region/cursors/PendingMessageCursor;
     171: invokevirtual #165                // Method org/apache/activemq/broker/region/TopicSubscription.setMatched:(Lorg/apache/activemq/broker/region/cursors/PendingMessageCursor;)V
     174: aload_0
     175: getfield      #9                  // Field enableAudit:Z
     178: ifeq          205
     181: aload_3
     182: aload_0
     183: getfield      #9                  // Field enableAudit:Z
     186: invokevirtual #166                // Method org/apache/activemq/broker/region/TopicSubscription.setEnableAudit:(Z)V
     189: aload_3
     190: aload_0
     191: getfield      #6                  // Field maxProducersToAudit:I
     194: invokevirtual #167                // Method org/apache/activemq/broker/region/TopicSubscription.setMaxProducersToAudit:(I)V
     197: aload_3
     198: aload_0
     199: getfield      #7                  // Field maxAuditDepth:I
     202: invokevirtual #168                // Method org/apache/activemq/broker/region/TopicSubscription.setMaxAuditDepth:(I)V
     205: return

  public void configure(org.apache.activemq.broker.Broker, org.apache.activemq.usage.SystemUsage, org.apache.activemq.broker.region.DurableTopicSubscription);
    Code:
       0: aload_3
       1: invokevirtual #169                // Method org/apache/activemq/broker/region/DurableTopicSubscription.getSubscriptionKey:()Lorg/apache/activemq/util/SubscriptionKey;
       4: invokevirtual #170                // Method org/apache/activemq/util/SubscriptionKey.getClientId:()Ljava/lang/String;
       7: astore        4
       9: aload_3
      10: invokevirtual #169                // Method org/apache/activemq/broker/region/DurableTopicSubscription.getSubscriptionKey:()Lorg/apache/activemq/util/SubscriptionKey;
      13: invokevirtual #171                // Method org/apache/activemq/util/SubscriptionKey.getSubscriptionName:()Ljava/lang/String;
      16: astore        5
      18: aload_3
      19: aload_0
      20: invokevirtual #94                 // Method getCursorMemoryHighWaterMark:()I
      23: invokevirtual #172                // Method org/apache/activemq/broker/region/DurableTopicSubscription.setCursorMemoryHighWaterMark:(I)V
      26: aload_0
      27: aload_3
      28: invokevirtual #140                // Method configurePrefetch:(Lorg/apache/activemq/broker/region/Subscription;)V
      31: aload_0
      32: getfield      #173                // Field pendingDurableSubscriberPolicy:Lorg/apache/activemq/broker/region/policy/PendingDurableSubscriberMessageStoragePolicy;
      35: ifnull        73
      38: aload_0
      39: getfield      #173                // Field pendingDurableSubscriberPolicy:Lorg/apache/activemq/broker/region/policy/PendingDurableSubscriberMessageStoragePolicy;
      42: aload_1
      43: aload         4
      45: aload         5
      47: aload_3
      48: invokevirtual #174                // Method org/apache/activemq/broker/region/DurableTopicSubscription.getPrefetchSize:()I
      51: aload_3
      52: invokeinterface #175,  6          // InterfaceMethod org/apache/activemq/broker/region/policy/PendingDurableSubscriberMessageStoragePolicy.getSubscriberPendingMessageCursor:(Lorg/apache/activemq/broker/Broker;Ljava/lang/String;Ljava/lang/String;ILorg/apache/activemq/broker/region/DurableTopicSubscription;)Lorg/apache/activemq/broker/region/cursors/PendingMessageCursor;
      57: astore        6
      59: aload         6
      61: aload_2
      62: invokeinterface #176,  2          // InterfaceMethod org/apache/activemq/broker/region/cursors/PendingMessageCursor.setSystemUsage:(Lorg/apache/activemq/usage/SystemUsage;)V
      67: aload_3
      68: aload         6
      70: invokevirtual #177                // Method org/apache/activemq/broker/region/DurableTopicSubscription.setPending:(Lorg/apache/activemq/broker/region/cursors/PendingMessageCursor;)V
      73: aload_0
      74: invokevirtual #178                // Method getMaxAuditDepth:()I
      77: istore        6
      79: iload         6
      81: sipush        2048
      84: if_icmpne     106
      87: aload_0
      88: invokevirtual #138                // Method isPrioritizedMessages:()Z
      91: ifeq          106
      94: aload_3
      95: iload         6
      97: bipush        10
      99: imul
     100: invokevirtual #179                // Method org/apache/activemq/broker/region/DurableTopicSubscription.setMaxAuditDepth:(I)V
     103: goto          112
     106: aload_3
     107: iload         6
     109: invokevirtual #179                // Method org/apache/activemq/broker/region/DurableTopicSubscription.setMaxAuditDepth:(I)V
     112: aload_3
     113: aload_0
     114: invokevirtual #128                // Method getMaxProducersToAudit:()I
     117: invokevirtual #180                // Method org/apache/activemq/broker/region/DurableTopicSubscription.setMaxProducersToAudit:(I)V
     120: aload_3
     121: aload_0
     122: invokevirtual #181                // Method isUsePrefetchExtension:()Z
     125: invokevirtual #182                // Method org/apache/activemq/broker/region/DurableTopicSubscription.setUsePrefetchExtension:(Z)V
     128: return

  public void configure(org.apache.activemq.broker.Broker, org.apache.activemq.usage.SystemUsage, org.apache.activemq.broker.region.QueueBrowserSubscription);
    Code:
       0: aload_0
       1: aload_3
       2: invokevirtual #140                // Method configurePrefetch:(Lorg/apache/activemq/broker/region/Subscription;)V
       5: aload_3
       6: aload_0
       7: invokevirtual #94                 // Method getCursorMemoryHighWaterMark:()I
      10: invokevirtual #183                // Method org/apache/activemq/broker/region/QueueBrowserSubscription.setCursorMemoryHighWaterMark:(I)V
      13: aload_3
      14: aload_0
      15: invokevirtual #181                // Method isUsePrefetchExtension:()Z
      18: invokevirtual #184                // Method org/apache/activemq/broker/region/QueueBrowserSubscription.setUsePrefetchExtension:(Z)V
      21: aload_3
      22: ldc           #185                // int 2147483647
      24: invokevirtual #186                // Method org/apache/activemq/broker/region/QueueBrowserSubscription.setMaxProducersToAudit:(I)V
      27: aload_3
      28: sipush        32767
      31: invokevirtual #187                // Method org/apache/activemq/broker/region/QueueBrowserSubscription.setMaxAuditDepth:(I)V
      34: aload_3
      35: aload_0
      36: invokevirtual #88                 // Method getMaxBrowsePageSize:()I
      39: i2l
      40: invokevirtual #188                // Method org/apache/activemq/broker/region/QueueBrowserSubscription.setMaxMessages:(J)V
      43: return

  public void configure(org.apache.activemq.broker.Broker, org.apache.activemq.usage.SystemUsage, org.apache.activemq.broker.region.QueueSubscription);
    Code:
       0: aload_0
       1: aload_3
       2: invokevirtual #140                // Method configurePrefetch:(Lorg/apache/activemq/broker/region/Subscription;)V
       5: aload_3
       6: aload_0
       7: invokevirtual #94                 // Method getCursorMemoryHighWaterMark:()I
      10: invokevirtual #189                // Method org/apache/activemq/broker/region/QueueSubscription.setCursorMemoryHighWaterMark:(I)V
      13: aload_3
      14: aload_0
      15: invokevirtual #181                // Method isUsePrefetchExtension:()Z
      18: invokevirtual #190                // Method org/apache/activemq/broker/region/QueueSubscription.setUsePrefetchExtension:(Z)V
      21: aload_3
      22: aload_0
      23: invokevirtual #128                // Method getMaxProducersToAudit:()I
      26: invokevirtual #191                // Method org/apache/activemq/broker/region/QueueSubscription.setMaxProducersToAudit:(I)V
      29: return

  public void configurePrefetch(org.apache.activemq.broker.region.Subscription);
    Code:
       0: aload_1
       1: invokeinterface #192,  1          // InterfaceMethod org/apache/activemq/broker/region/Subscription.getConsumerInfo:()Lorg/apache/activemq/command/ConsumerInfo;
       6: invokevirtual #163                // Method org/apache/activemq/command/ConsumerInfo.getPrefetchSize:()I
       9: istore_2
      10: aload_1
      11: instanceof    #193                // class org/apache/activemq/broker/region/QueueBrowserSubscription
      14: ifeq          38
      17: iload_2
      18: sipush        500
      21: if_icmpne     133
      24: aload_1
      25: checkcast     #193                // class org/apache/activemq/broker/region/QueueBrowserSubscription
      28: aload_0
      29: invokevirtual #194                // Method getQueueBrowserPrefetch:()I
      32: invokevirtual #195                // Method org/apache/activemq/broker/region/QueueBrowserSubscription.setPrefetchSize:(I)V
      35: goto          133
      38: aload_1
      39: instanceof    #196                // class org/apache/activemq/broker/region/QueueSubscription
      42: ifeq          66
      45: iload_2
      46: sipush        1000
      49: if_icmpne     133
      52: aload_1
      53: checkcast     #196                // class org/apache/activemq/broker/region/QueueSubscription
      56: aload_0
      57: invokevirtual #197                // Method getQueuePrefetch:()I
      60: invokevirtual #198                // Method org/apache/activemq/broker/region/QueueSubscription.setPrefetchSize:(I)V
      63: goto          133
      66: aload_1
      67: instanceof    #199                // class org/apache/activemq/broker/region/DurableTopicSubscription
      70: ifeq          108
      73: iload_2
      74: bipush        100
      76: if_icmpeq     94
      79: aload_1
      80: invokeinterface #192,  1          // InterfaceMethod org/apache/activemq/broker/region/Subscription.getConsumerInfo:()Lorg/apache/activemq/command/ConsumerInfo;
      85: invokevirtual #163                // Method org/apache/activemq/command/ConsumerInfo.getPrefetchSize:()I
      88: sipush        1000
      91: if_icmpne     133
      94: aload_1
      95: checkcast     #199                // class org/apache/activemq/broker/region/DurableTopicSubscription
      98: aload_0
      99: invokevirtual #200                // Method getDurableTopicPrefetch:()I
     102: invokevirtual #201                // Method org/apache/activemq/broker/region/DurableTopicSubscription.setPrefetchSize:(I)V
     105: goto          133
     108: aload_1
     109: instanceof    #202                // class org/apache/activemq/broker/region/TopicSubscription
     112: ifeq          133
     115: iload_2
     116: sipush        32767
     119: if_icmpne     133
     122: aload_1
     123: checkcast     #202                // class org/apache/activemq/broker/region/TopicSubscription
     126: aload_0
     127: invokevirtual #203                // Method getTopicPrefetch:()I
     130: invokevirtual #204                // Method org/apache/activemq/broker/region/TopicSubscription.setPrefetchSize:(I)V
     133: iload_2
     134: ifeq          153
     137: aload_1
     138: invokeinterface #205,  1          // InterfaceMethod org/apache/activemq/broker/region/Subscription.getPrefetchSize:()I
     143: ifne          153
     146: aload_1
     147: iconst_0
     148: invokeinterface #206,  2          // InterfaceMethod org/apache/activemq/broker/region/Subscription.updateConsumerPrefetch:(I)V
     153: return

  public org.apache.activemq.broker.region.policy.DispatchPolicy getDispatchPolicy();
    Code:
       0: aload_0
       1: getfield      #43                 // Field dispatchPolicy:Lorg/apache/activemq/broker/region/policy/DispatchPolicy;
       4: areturn

  public void setDispatchPolicy(org.apache.activemq.broker.region.policy.DispatchPolicy);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #43                 // Field dispatchPolicy:Lorg/apache/activemq/broker/region/policy/DispatchPolicy;
       5: return

  public org.apache.activemq.broker.region.policy.SubscriptionRecoveryPolicy getSubscriptionRecoveryPolicy();
    Code:
       0: aload_0
       1: getfield      #74                 // Field subscriptionRecoveryPolicy:Lorg/apache/activemq/broker/region/policy/SubscriptionRecoveryPolicy;
       4: areturn

  public void setSubscriptionRecoveryPolicy(org.apache.activemq.broker.region.policy.SubscriptionRecoveryPolicy);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #74                 // Field subscriptionRecoveryPolicy:Lorg/apache/activemq/broker/region/policy/SubscriptionRecoveryPolicy;
       5: return

  public boolean isSendAdvisoryIfNoConsumers();
    Code:
       0: aload_0
       1: getfield      #207                // Field sendAdvisoryIfNoConsumers:Z
       4: ireturn

  public void setSendAdvisoryIfNoConsumers(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #207                // Field sendAdvisoryIfNoConsumers:Z
       5: return

  public org.apache.activemq.broker.region.policy.DeadLetterStrategy getDeadLetterStrategy();
    Code:
       0: aload_0
       1: getfield      #3                  // Field deadLetterStrategy:Lorg/apache/activemq/broker/region/policy/DeadLetterStrategy;
       4: areturn

  public void setDeadLetterStrategy(org.apache.activemq.broker.region.policy.DeadLetterStrategy);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #3                  // Field deadLetterStrategy:Lorg/apache/activemq/broker/region/policy/DeadLetterStrategy;
       5: return

  public org.apache.activemq.broker.region.policy.PendingMessageLimitStrategy getPendingMessageLimitStrategy();
    Code:
       0: aload_0
       1: getfield      #141                // Field pendingMessageLimitStrategy:Lorg/apache/activemq/broker/region/policy/PendingMessageLimitStrategy;
       4: areturn

  public void setPendingMessageLimitStrategy(org.apache.activemq.broker.region.policy.PendingMessageLimitStrategy);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #141                // Field pendingMessageLimitStrategy:Lorg/apache/activemq/broker/region/policy/PendingMessageLimitStrategy;
       5: return

  public org.apache.activemq.broker.region.policy.MessageEvictionStrategy getMessageEvictionStrategy();
    Code:
       0: aload_0
       1: getfield      #151                // Field messageEvictionStrategy:Lorg/apache/activemq/broker/region/policy/MessageEvictionStrategy;
       4: areturn

  public void setMessageEvictionStrategy(org.apache.activemq.broker.region.policy.MessageEvictionStrategy);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #151                // Field messageEvictionStrategy:Lorg/apache/activemq/broker/region/policy/MessageEvictionStrategy;
       5: return

  public long getMemoryLimit();
    Code:
       0: aload_0
       1: getfield      #49                 // Field memoryLimit:J
       4: lreturn

  public void setMemoryLimit(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #49                 // Field memoryLimit:J
       5: return

  public org.apache.activemq.broker.region.group.MessageGroupMapFactory getMessageGroupMapFactory();
    Code:
       0: aload_0
       1: getfield      #208                // Field messageGroupMapFactory:Lorg/apache/activemq/broker/region/group/MessageGroupMapFactory;
       4: ifnonnull     33
       7: aload_0
       8: aload_0
       9: invokevirtual #209                // Method getMessageGroupMapFactoryType:()Ljava/lang/String;
      12: invokestatic  #210                // Method org/apache/activemq/broker/region/group/GroupFactoryFinder.createMessageGroupMapFactory:(Ljava/lang/String;)Lorg/apache/activemq/broker/region/group/MessageGroupMapFactory;
      15: putfield      #208                // Field messageGroupMapFactory:Lorg/apache/activemq/broker/region/group/MessageGroupMapFactory;
      18: goto          33
      21: astore_1
      22: getstatic     #145                // Field LOG:Lorg/slf4j/Logger;
      25: ldc           #212                // String Failed to create message group Factory
      27: aload_1
      28: invokeinterface #213,  3          // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;Ljava/lang/Throwable;)V
      33: aload_0
      34: getfield      #208                // Field messageGroupMapFactory:Lorg/apache/activemq/broker/region/group/MessageGroupMapFactory;
      37: areturn
    Exception table:
       from    to  target type
           7    18    21   Class java/lang/Exception

  public void setMessageGroupMapFactory(org.apache.activemq.broker.region.group.MessageGroupMapFactory);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #208                // Field messageGroupMapFactory:Lorg/apache/activemq/broker/region/group/MessageGroupMapFactory;
       5: return

  public java.lang.String getMessageGroupMapFactoryType();
    Code:
       0: aload_0
       1: getfield      #5                  // Field messageGroupMapFactoryType:Ljava/lang/String;
       4: areturn

  public void setMessageGroupMapFactoryType(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #5                  // Field messageGroupMapFactoryType:Ljava/lang/String;
       5: return

  public org.apache.activemq.broker.region.policy.PendingDurableSubscriberMessageStoragePolicy getPendingDurableSubscriberPolicy();
    Code:
       0: aload_0
       1: getfield      #173                // Field pendingDurableSubscriberPolicy:Lorg/apache/activemq/broker/region/policy/PendingDurableSubscriberMessageStoragePolicy;
       4: areturn

  public void setPendingDurableSubscriberPolicy(org.apache.activemq.broker.region.policy.PendingDurableSubscriberMessageStoragePolicy);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #173                // Field pendingDurableSubscriberPolicy:Lorg/apache/activemq/broker/region/policy/PendingDurableSubscriberMessageStoragePolicy;
       5: return

  public org.apache.activemq.broker.region.policy.PendingQueueMessageStoragePolicy getPendingQueuePolicy();
    Code:
       0: aload_0
       1: getfield      #52                 // Field pendingQueuePolicy:Lorg/apache/activemq/broker/region/policy/PendingQueueMessageStoragePolicy;
       4: areturn

  public void setPendingQueuePolicy(org.apache.activemq.broker.region.policy.PendingQueueMessageStoragePolicy);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #52                 // Field pendingQueuePolicy:Lorg/apache/activemq/broker/region/policy/PendingQueueMessageStoragePolicy;
       5: return

  public org.apache.activemq.broker.region.policy.PendingSubscriberMessageStoragePolicy getPendingSubscriberPolicy();
    Code:
       0: aload_0
       1: getfield      #153                // Field pendingSubscriberPolicy:Lorg/apache/activemq/broker/region/policy/PendingSubscriberMessageStoragePolicy;
       4: areturn

  public void setPendingSubscriberPolicy(org.apache.activemq.broker.region.policy.PendingSubscriberMessageStoragePolicy);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #153                // Field pendingSubscriberPolicy:Lorg/apache/activemq/broker/region/policy/PendingSubscriberMessageStoragePolicy;
       5: return

  public boolean isProducerFlowControl();
    Code:
       0: aload_0
       1: getfield      #10                 // Field producerFlowControl:Z
       4: ireturn

  public void setProducerFlowControl(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #10                 // Field producerFlowControl:Z
       5: return

  public boolean isAlwaysRetroactive();
    Code:
       0: aload_0
       1: getfield      #11                 // Field alwaysRetroactive:Z
       4: ireturn

  public void setAlwaysRetroactive(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #11                 // Field alwaysRetroactive:Z
       5: return

  public void setBlockedProducerWarningInterval(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #14                 // Field blockedProducerWarningInterval:J
       5: return

  public long getBlockedProducerWarningInterval();
    Code:
       0: aload_0
       1: getfield      #14                 // Field blockedProducerWarningInterval:J
       4: lreturn

  public int getMaxProducersToAudit();
    Code:
       0: aload_0
       1: getfield      #6                  // Field maxProducersToAudit:I
       4: ireturn

  public void setMaxProducersToAudit(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #6                  // Field maxProducersToAudit:I
       5: return

  public int getMaxAuditDepth();
    Code:
       0: aload_0
       1: getfield      #7                  // Field maxAuditDepth:I
       4: ireturn

  public void setMaxAuditDepth(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #7                  // Field maxAuditDepth:I
       5: return

  public boolean isEnableAudit();
    Code:
       0: aload_0
       1: getfield      #9                  // Field enableAudit:Z
       4: ireturn

  public void setEnableAudit(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #9                  // Field enableAudit:Z
       5: return

  public int getMaxQueueAuditDepth();
    Code:
       0: aload_0
       1: getfield      #8                  // Field maxQueueAuditDepth:I
       4: ireturn

  public void setMaxQueueAuditDepth(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #8                  // Field maxQueueAuditDepth:I
       5: return

  public boolean isOptimizedDispatch();
    Code:
       0: aload_0
       1: getfield      #15                 // Field optimizedDispatch:Z
       4: ireturn

  public void setOptimizedDispatch(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #15                 // Field optimizedDispatch:Z
       5: return

  public int getMaxPageSize();
    Code:
       0: aload_0
       1: getfield      #16                 // Field maxPageSize:I
       4: ireturn

  public void setMaxPageSize(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #16                 // Field maxPageSize:I
       5: return

  public int getMaxBrowsePageSize();
    Code:
       0: aload_0
       1: getfield      #17                 // Field maxBrowsePageSize:I
       4: ireturn

  public void setMaxBrowsePageSize(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #17                 // Field maxBrowsePageSize:I
       5: return

  public boolean isUseCache();
    Code:
       0: aload_0
       1: getfield      #18                 // Field useCache:Z
       4: ireturn

  public void setUseCache(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #18                 // Field useCache:Z
       5: return

  public long getMinimumMessageSize();
    Code:
       0: aload_0
       1: getfield      #21                 // Field minimumMessageSize:J
       4: lreturn

  public void setMinimumMessageSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #21                 // Field minimumMessageSize:J
       5: return

  public boolean isUseConsumerPriority();
    Code:
       0: aload_0
       1: getfield      #22                 // Field useConsumerPriority:Z
       4: ireturn

  public void setUseConsumerPriority(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #22                 // Field useConsumerPriority:Z
       5: return

  public boolean isStrictOrderDispatch();
    Code:
       0: aload_0
       1: getfield      #23                 // Field strictOrderDispatch:Z
       4: ireturn

  public void setStrictOrderDispatch(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #23                 // Field strictOrderDispatch:Z
       5: return

  public boolean isLazyDispatch();
    Code:
       0: aload_0
       1: getfield      #24                 // Field lazyDispatch:Z
       4: ireturn

  public void setLazyDispatch(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #24                 // Field lazyDispatch:Z
       5: return

  public int getTimeBeforeDispatchStarts();
    Code:
       0: aload_0
       1: getfield      #25                 // Field timeBeforeDispatchStarts:I
       4: ireturn

  public void setTimeBeforeDispatchStarts(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #25                 // Field timeBeforeDispatchStarts:I
       5: return

  public int getConsumersBeforeDispatchStarts();
    Code:
       0: aload_0
       1: getfield      #26                 // Field consumersBeforeDispatchStarts:I
       4: ireturn

  public void setConsumersBeforeDispatchStarts(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #26                 // Field consumersBeforeDispatchStarts:I
       5: return

  public boolean isAdvisoryForSlowConsumers();
    Code:
       0: aload_0
       1: getfield      #214                // Field advisoryForSlowConsumers:Z
       4: ireturn

  public void setAdvisoryForSlowConsumers(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #214                // Field advisoryForSlowConsumers:Z
       5: return

  public boolean isAdvisoryForDiscardingMessages();
    Code:
       0: aload_0
       1: getfield      #215                // Field advisoryForDiscardingMessages:Z
       4: ireturn

  public void setAdvisoryForDiscardingMessages(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #215                // Field advisoryForDiscardingMessages:Z
       5: return

  public boolean isAdvisoryWhenFull();
    Code:
       0: aload_0
       1: getfield      #216                // Field advisoryWhenFull:Z
       4: ireturn

  public void setAdvisoryWhenFull(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #216                // Field advisoryWhenFull:Z
       5: return

  public boolean isAdvisoryForDelivery();
    Code:
       0: aload_0
       1: getfield      #217                // Field advisoryForDelivery:Z
       4: ireturn

  public void setAdvisoryForDelivery(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #217                // Field advisoryForDelivery:Z
       5: return

  public boolean isAdvisoryForConsumed();
    Code:
       0: aload_0
       1: getfield      #218                // Field advisoryForConsumed:Z
       4: ireturn

  public void setAdvisoryForConsumed(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #218                // Field advisoryForConsumed:Z
       5: return

  public boolean isAdvisoryForFastProducers();
    Code:
       0: aload_0
       1: getfield      #219                // Field advisoryForFastProducers:Z
       4: ireturn

  public void setAdvisoryForFastProducers(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #219                // Field advisoryForFastProducers:Z
       5: return

  public void setMaxExpirePageSize(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #28                 // Field maxExpirePageSize:I
       5: return

  public int getMaxExpirePageSize();
    Code:
       0: aload_0
       1: getfield      #28                 // Field maxExpirePageSize:I
       4: ireturn

  public void setExpireMessagesPeriod(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #27                 // Field expireMessagesPeriod:J
       5: return

  public long getExpireMessagesPeriod();
    Code:
       0: aload_0
       1: getfield      #27                 // Field expireMessagesPeriod:J
       4: lreturn

  public int getQueuePrefetch();
    Code:
       0: aload_0
       1: getfield      #29                 // Field queuePrefetch:I
       4: ireturn

  public void setQueuePrefetch(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #29                 // Field queuePrefetch:I
       5: return

  public int getQueueBrowserPrefetch();
    Code:
       0: aload_0
       1: getfield      #30                 // Field queueBrowserPrefetch:I
       4: ireturn

  public void setQueueBrowserPrefetch(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #30                 // Field queueBrowserPrefetch:I
       5: return

  public int getTopicPrefetch();
    Code:
       0: aload_0
       1: getfield      #31                 // Field topicPrefetch:I
       4: ireturn

  public void setTopicPrefetch(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #31                 // Field topicPrefetch:I
       5: return

  public int getDurableTopicPrefetch();
    Code:
       0: aload_0
       1: getfield      #32                 // Field durableTopicPrefetch:I
       4: ireturn

  public void setDurableTopicPrefetch(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #32                 // Field durableTopicPrefetch:I
       5: return

  public boolean isUsePrefetchExtension();
    Code:
       0: aload_0
       1: getfield      #33                 // Field usePrefetchExtension:Z
       4: ireturn

  public void setUsePrefetchExtension(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #33                 // Field usePrefetchExtension:Z
       5: return

  public int getCursorMemoryHighWaterMark();
    Code:
       0: aload_0
       1: getfield      #34                 // Field cursorMemoryHighWaterMark:I
       4: ireturn

  public void setCursorMemoryHighWaterMark(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #34                 // Field cursorMemoryHighWaterMark:I
       5: return

  public void setStoreUsageHighWaterMark(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #35                 // Field storeUsageHighWaterMark:I
       5: return

  public int getStoreUsageHighWaterMark();
    Code:
       0: aload_0
       1: getfield      #35                 // Field storeUsageHighWaterMark:I
       4: ireturn

  public void setSlowConsumerStrategy(org.apache.activemq.broker.region.policy.SlowConsumerStrategy);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #220                // Field slowConsumerStrategy:Lorg/apache/activemq/broker/region/policy/SlowConsumerStrategy;
       5: return

  public org.apache.activemq.broker.region.policy.SlowConsumerStrategy getSlowConsumerStrategy();
    Code:
       0: aload_0
       1: getfield      #220                // Field slowConsumerStrategy:Lorg/apache/activemq/broker/region/policy/SlowConsumerStrategy;
       4: areturn

  public boolean isPrioritizedMessages();
    Code:
       0: aload_0
       1: getfield      #221                // Field prioritizedMessages:Z
       4: ireturn

  public void setPrioritizedMessages(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #221                // Field prioritizedMessages:Z
       5: return

  public void setAllConsumersExclusiveByDefault(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #222                // Field allConsumersExclusiveByDefault:Z
       5: return

  public boolean isAllConsumersExclusiveByDefault();
    Code:
       0: aload_0
       1: getfield      #222                // Field allConsumersExclusiveByDefault:Z
       4: ireturn

  public boolean isGcInactiveDestinations();
    Code:
       0: aload_0
       1: getfield      #223                // Field gcInactiveDestinations:Z
       4: ireturn

  public void setGcInactiveDestinations(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #223                // Field gcInactiveDestinations:Z
       5: return

  public long getInactiveTimoutBeforeGC();
    Code:
       0: aload_0
       1: getfield      #38                 // Field inactiveTimoutBeforeGC:J
       4: lreturn

  public void setInactiveTimoutBeforeGC(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #38                 // Field inactiveTimoutBeforeGC:J
       5: return

  public void setGcWithNetworkConsumers(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #224                // Field gcWithNetworkConsumers:Z
       5: return

  public boolean isGcWithNetworkConsumers();
    Code:
       0: aload_0
       1: getfield      #224                // Field gcWithNetworkConsumers:Z
       4: ireturn

  public boolean isReduceMemoryFootprint();
    Code:
       0: aload_0
       1: getfield      #225                // Field reduceMemoryFootprint:Z
       4: ireturn

  public void setReduceMemoryFootprint(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #225                // Field reduceMemoryFootprint:Z
       5: return

  public void setNetworkBridgeFilterFactory(org.apache.activemq.network.NetworkBridgeFilterFactory);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #226                // Field networkBridgeFilterFactory:Lorg/apache/activemq/network/NetworkBridgeFilterFactory;
       5: return

  public org.apache.activemq.network.NetworkBridgeFilterFactory getNetworkBridgeFilterFactory();
    Code:
       0: aload_0
       1: getfield      #226                // Field networkBridgeFilterFactory:Lorg/apache/activemq/network/NetworkBridgeFilterFactory;
       4: areturn

  public boolean isDoOptimzeMessageStorage();
    Code:
       0: aload_0
       1: getfield      #39                 // Field doOptimzeMessageStorage:Z
       4: ireturn

  public void setDoOptimzeMessageStorage(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #39                 // Field doOptimzeMessageStorage:Z
       5: return

  public int getOptimizeMessageStoreInFlightLimit();
    Code:
       0: aload_0
       1: getfield      #40                 // Field optimizeMessageStoreInFlightLimit:I
       4: ireturn

  public void setOptimizeMessageStoreInFlightLimit(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #40                 // Field optimizeMessageStoreInFlightLimit:I
       5: return

  public void setPersistJMSRedelivered(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #41                 // Field persistJMSRedelivered:Z
       5: return

  public boolean isPersistJMSRedelivered();
    Code:
       0: aload_0
       1: getfield      #41                 // Field persistJMSRedelivered:Z
       4: ireturn

  static {};
    Code:
       0: ldc_w         #227                // class org/apache/activemq/broker/region/policy/PolicyEntry
       3: invokestatic  #228                // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       6: putstatic     #145                // Field LOG:Lorg/slf4j/Logger;
       9: return
}
