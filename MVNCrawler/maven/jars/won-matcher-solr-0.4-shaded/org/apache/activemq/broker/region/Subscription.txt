Compiled from "Subscription.java"
public interface org.apache.activemq.broker.region.Subscription extends org.apache.activemq.broker.region.SubscriptionRecovery {
  public abstract void add(org.apache.activemq.broker.region.MessageReference) throws java.lang.Exception;

  public abstract void acknowledge(org.apache.activemq.broker.ConnectionContext, org.apache.activemq.command.MessageAck) throws java.lang.Exception;

  public abstract org.apache.activemq.command.Response pullMessage(org.apache.activemq.broker.ConnectionContext, org.apache.activemq.command.MessagePull) throws java.lang.Exception;

  public abstract boolean isWildcard();

  public abstract boolean matches(org.apache.activemq.broker.region.MessageReference, org.apache.activemq.filter.MessageEvaluationContext) throws java.io.IOException;

  public abstract boolean matches(org.apache.activemq.command.ActiveMQDestination);

  public abstract void add(org.apache.activemq.broker.ConnectionContext, org.apache.activemq.broker.region.Destination) throws java.lang.Exception;

  public abstract java.util.List<org.apache.activemq.broker.region.MessageReference> remove(org.apache.activemq.broker.ConnectionContext, org.apache.activemq.broker.region.Destination) throws java.lang.Exception;

  public abstract org.apache.activemq.command.ConsumerInfo getConsumerInfo();

  public abstract void gc();

  public abstract void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification) throws java.lang.Exception;

  public abstract int getPendingQueueSize();

  public abstract int getDispatchedQueueSize();

  public abstract long getDispatchedCounter();

  public abstract long getEnqueueCounter();

  public abstract long getDequeueCounter();

  public abstract java.lang.String getSelector();

  public abstract void setSelector(java.lang.String) throws javax.jms.InvalidSelectorException, java.lang.UnsupportedOperationException;

  public abstract javax.management.ObjectName getObjectName();

  public abstract void setObjectName(javax.management.ObjectName);

  public abstract boolean isLowWaterMark();

  public abstract boolean isHighWaterMark();

  public abstract boolean isFull();

  public abstract void updateConsumerPrefetch(int);

  public abstract void destroy();

  public abstract int getPrefetchSize();

  public abstract int getInFlightSize();

  public abstract int getInFlightUsage();

  public abstract boolean isRecoveryRequired();

  public abstract boolean isBrowser();

  public abstract int countBeforeFull();

  public abstract org.apache.activemq.broker.ConnectionContext getContext();

  public abstract int getCursorMemoryHighWaterMark();

  public abstract void setCursorMemoryHighWaterMark(int);

  public abstract boolean isSlowConsumer();

  public abstract void unmatched(org.apache.activemq.broker.region.MessageReference) throws java.io.IOException;

  public abstract long getTimeOfLastMessageAck();

  public abstract long getConsumedCount();

  public abstract void incrementConsumedCount();

  public abstract void resetConsumedCount();
}
