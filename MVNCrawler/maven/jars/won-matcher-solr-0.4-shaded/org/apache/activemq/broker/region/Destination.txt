Compiled from "Destination.java"
public interface org.apache.activemq.broker.region.Destination extends org.apache.activemq.Service,org.apache.activemq.thread.Task,org.apache.activemq.command.Message$MessageDestination {
  public static final org.apache.activemq.broker.region.policy.DeadLetterStrategy DEFAULT_DEAD_LETTER_STRATEGY;

  public static final long DEFAULT_BLOCKED_PRODUCER_WARNING_INTERVAL;

  public abstract void addSubscription(org.apache.activemq.broker.ConnectionContext, org.apache.activemq.broker.region.Subscription) throws java.lang.Exception;

  public abstract void removeSubscription(org.apache.activemq.broker.ConnectionContext, org.apache.activemq.broker.region.Subscription, long) throws java.lang.Exception;

  public abstract void addProducer(org.apache.activemq.broker.ConnectionContext, org.apache.activemq.command.ProducerInfo) throws java.lang.Exception;

  public abstract void removeProducer(org.apache.activemq.broker.ConnectionContext, org.apache.activemq.command.ProducerInfo) throws java.lang.Exception;

  public abstract void send(org.apache.activemq.broker.ProducerBrokerExchange, org.apache.activemq.command.Message) throws java.lang.Exception;

  public abstract void acknowledge(org.apache.activemq.broker.ConnectionContext, org.apache.activemq.broker.region.Subscription, org.apache.activemq.command.MessageAck, org.apache.activemq.broker.region.MessageReference) throws java.io.IOException;

  public abstract long getInactiveTimoutBeforeGC();

  public abstract void markForGC(long);

  public abstract boolean canGC();

  public abstract void gc();

  public abstract org.apache.activemq.command.ActiveMQDestination getActiveMQDestination();

  public abstract org.apache.activemq.usage.MemoryUsage getMemoryUsage();

  public abstract void setMemoryUsage(org.apache.activemq.usage.MemoryUsage);

  public abstract void dispose(org.apache.activemq.broker.ConnectionContext) throws java.io.IOException;

  public abstract boolean isDisposed();

  public abstract org.apache.activemq.broker.region.DestinationStatistics getDestinationStatistics();

  public abstract org.apache.activemq.broker.region.policy.DeadLetterStrategy getDeadLetterStrategy();

  public abstract org.apache.activemq.command.Message[] browse();

  public abstract java.lang.String getName();

  public abstract org.apache.activemq.store.MessageStore getMessageStore();

  public abstract boolean isProducerFlowControl();

  public abstract void setProducerFlowControl(boolean);

  public abstract boolean isAlwaysRetroactive();

  public abstract void setAlwaysRetroactive(boolean);

  public abstract void setBlockedProducerWarningInterval(long);

  public abstract long getBlockedProducerWarningInterval();

  public abstract int getMaxProducersToAudit();

  public abstract void setMaxProducersToAudit(int);

  public abstract int getMaxAuditDepth();

  public abstract void setMaxAuditDepth(int);

  public abstract boolean isEnableAudit();

  public abstract void setEnableAudit(boolean);

  public abstract boolean isActive();

  public abstract int getMaxPageSize();

  public abstract void setMaxPageSize(int);

  public abstract int getMaxBrowsePageSize();

  public abstract void setMaxBrowsePageSize(int);

  public abstract boolean isUseCache();

  public abstract void setUseCache(boolean);

  public abstract int getMinimumMessageSize();

  public abstract void setMinimumMessageSize(int);

  public abstract int getCursorMemoryHighWaterMark();

  public abstract void setCursorMemoryHighWaterMark(int);

  public abstract void wakeup();

  public abstract boolean isLazyDispatch();

  public abstract void setLazyDispatch(boolean);

  public abstract void messageExpired(org.apache.activemq.broker.ConnectionContext, org.apache.activemq.broker.region.Subscription, org.apache.activemq.broker.region.MessageReference);

  public abstract void messageConsumed(org.apache.activemq.broker.ConnectionContext, org.apache.activemq.broker.region.MessageReference);

  public abstract void messageDelivered(org.apache.activemq.broker.ConnectionContext, org.apache.activemq.broker.region.MessageReference);

  public abstract void messageDiscarded(org.apache.activemq.broker.ConnectionContext, org.apache.activemq.broker.region.Subscription, org.apache.activemq.broker.region.MessageReference);

  public abstract void slowConsumer(org.apache.activemq.broker.ConnectionContext, org.apache.activemq.broker.region.Subscription);

  public abstract void fastProducer(org.apache.activemq.broker.ConnectionContext, org.apache.activemq.command.ProducerInfo);

  public abstract void isFull(org.apache.activemq.broker.ConnectionContext, org.apache.activemq.usage.Usage<?>);

  public abstract java.util.List<org.apache.activemq.broker.region.Subscription> getConsumers();

  public abstract void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification) throws java.lang.Exception;

  public abstract boolean isPrioritizedMessages();

  public abstract org.apache.activemq.broker.region.policy.SlowConsumerStrategy getSlowConsumerStrategy();

  public abstract boolean isDoOptimzeMessageStorage();

  public abstract void setDoOptimzeMessageStorage(boolean);

  public abstract void clearPendingMessages();

  public abstract boolean isDLQ();

  public abstract void duplicateFromStore(org.apache.activemq.command.Message, org.apache.activemq.broker.region.Subscription);

  static {};
    Code:
       0: new           #1                  // class org/apache/activemq/broker/region/policy/SharedDeadLetterStrategy
       3: dup
       4: invokespecial #2                  // Method org/apache/activemq/broker/region/policy/SharedDeadLetterStrategy."<init>":()V
       7: putstatic     #3                  // Field DEFAULT_DEAD_LETTER_STRATEGY:Lorg/apache/activemq/broker/region/policy/DeadLetterStrategy;
      10: return
}
