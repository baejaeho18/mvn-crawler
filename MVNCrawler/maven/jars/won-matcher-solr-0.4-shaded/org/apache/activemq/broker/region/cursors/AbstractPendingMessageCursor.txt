Compiled from "AbstractPendingMessageCursor.java"
public abstract class org.apache.activemq.broker.region.cursors.AbstractPendingMessageCursor implements org.apache.activemq.broker.region.cursors.PendingMessageCursor {
  protected int memoryUsageHighWaterMark;

  protected int maxBatchSize;

  protected org.apache.activemq.usage.SystemUsage systemUsage;

  protected int maxProducersToAudit;

  protected int maxAuditDepth;

  protected boolean enableAudit;

  protected org.apache.activemq.ActiveMQMessageAudit audit;

  protected boolean useCache;

  private boolean cacheEnabled;

  private boolean started;

  protected org.apache.activemq.broker.region.MessageReference last;

  protected final boolean prioritizedMessages;

  public org.apache.activemq.broker.region.cursors.AbstractPendingMessageCursor(boolean);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: bipush        70
       7: putfield      #2                  // Field memoryUsageHighWaterMark:I
      10: aload_0
      11: sipush        200
      14: putfield      #3                  // Field maxBatchSize:I
      17: aload_0
      18: bipush        64
      20: putfield      #4                  // Field maxProducersToAudit:I
      23: aload_0
      24: sipush        2048
      27: putfield      #5                  // Field maxAuditDepth:I
      30: aload_0
      31: iconst_1
      32: putfield      #6                  // Field enableAudit:Z
      35: aload_0
      36: iconst_1
      37: putfield      #7                  // Field useCache:Z
      40: aload_0
      41: iconst_1
      42: putfield      #8                  // Field cacheEnabled:Z
      45: aload_0
      46: iconst_0
      47: putfield      #9                  // Field started:Z
      50: aload_0
      51: aconst_null
      52: putfield      #10                 // Field last:Lorg/apache/activemq/broker/region/MessageReference;
      55: aload_0
      56: iload_1
      57: putfield      #11                 // Field prioritizedMessages:Z
      60: return

  public synchronized void start() throws java.lang.Exception;
    Code:
       0: aload_0
       1: getfield      #9                  // Field started:Z
       4: ifne          40
       7: aload_0
       8: getfield      #6                  // Field enableAudit:Z
      11: ifeq          40
      14: aload_0
      15: getfield      #12                 // Field audit:Lorg/apache/activemq/ActiveMQMessageAudit;
      18: ifnonnull     40
      21: aload_0
      22: new           #13                 // class org/apache/activemq/ActiveMQMessageAudit
      25: dup
      26: aload_0
      27: getfield      #5                  // Field maxAuditDepth:I
      30: aload_0
      31: getfield      #4                  // Field maxProducersToAudit:I
      34: invokespecial #14                 // Method org/apache/activemq/ActiveMQMessageAudit."<init>":(II)V
      37: putfield      #12                 // Field audit:Lorg/apache/activemq/ActiveMQMessageAudit;
      40: aload_0
      41: iconst_1
      42: putfield      #9                  // Field started:Z
      45: return

  public synchronized void stop() throws java.lang.Exception;
    Code:
       0: aload_0
       1: iconst_0
       2: putfield      #9                  // Field started:Z
       5: aload_0
       6: invokevirtual #15                 // Method gc:()V
       9: return

  public void add(org.apache.activemq.broker.ConnectionContext, org.apache.activemq.broker.region.Destination) throws java.lang.Exception;
    Code:
       0: return

  public java.util.List<org.apache.activemq.broker.region.MessageReference> remove(org.apache.activemq.broker.ConnectionContext, org.apache.activemq.broker.region.Destination) throws java.lang.Exception;
    Code:
       0: getstatic     #16                 // Field java/util/Collections.EMPTY_LIST:Ljava/util/List;
       3: areturn

  public boolean isRecoveryRequired();
    Code:
       0: iconst_1
       1: ireturn

  public void addMessageFirst(org.apache.activemq.broker.region.MessageReference) throws java.lang.Exception;
    Code:
       0: return

  public void addMessageLast(org.apache.activemq.broker.region.MessageReference) throws java.lang.Exception;
    Code:
       0: return

  public boolean tryAddMessageLast(org.apache.activemq.broker.region.MessageReference, long) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #17                 // Method addMessageLast:(Lorg/apache/activemq/broker/region/MessageReference;)V
       5: iconst_1
       6: ireturn

  public void addRecoveredMessage(org.apache.activemq.broker.region.MessageReference) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #17                 // Method addMessageLast:(Lorg/apache/activemq/broker/region/MessageReference;)V
       5: return

  public void clear();
    Code:
       0: return

  public boolean hasNext();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isEmpty();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isEmpty(org.apache.activemq.broker.region.Destination);
    Code:
       0: aload_0
       1: invokevirtual #18                 // Method isEmpty:()Z
       4: ireturn

  public org.apache.activemq.broker.region.MessageReference next();
    Code:
       0: aconst_null
       1: areturn

  public void remove();
    Code:
       0: return

  public void reset();
    Code:
       0: return

  public int size();
    Code:
       0: iconst_0
       1: ireturn

  public int getMaxBatchSize();
    Code:
       0: aload_0
       1: getfield      #3                  // Field maxBatchSize:I
       4: ireturn

  public void setMaxBatchSize(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #3                  // Field maxBatchSize:I
       5: return

  protected void fillBatch() throws java.lang.Exception;
    Code:
       0: return

  public void resetForGC();
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method reset:()V
       4: return

  public void remove(org.apache.activemq.broker.region.MessageReference);
    Code:
       0: return

  public void gc();
    Code:
       0: return

  public void setSystemUsage(org.apache.activemq.usage.SystemUsage);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #20                 // Field systemUsage:Lorg/apache/activemq/usage/SystemUsage;
       5: return

  public boolean hasSpace();
    Code:
       0: aload_0
       1: getfield      #20                 // Field systemUsage:Lorg/apache/activemq/usage/SystemUsage;
       4: ifnull        32
       7: aload_0
       8: getfield      #20                 // Field systemUsage:Lorg/apache/activemq/usage/SystemUsage;
      11: invokevirtual #21                 // Method org/apache/activemq/usage/SystemUsage.getMemoryUsage:()Lorg/apache/activemq/usage/MemoryUsage;
      14: aload_0
      15: getfield      #2                  // Field memoryUsageHighWaterMark:I
      18: invokevirtual #22                 // Method org/apache/activemq/usage/MemoryUsage.isFull:(I)Z
      21: ifne          28
      24: iconst_1
      25: goto          33
      28: iconst_0
      29: goto          33
      32: iconst_1
      33: ireturn

  public boolean isFull();
    Code:
       0: aload_0
       1: getfield      #20                 // Field systemUsage:Lorg/apache/activemq/usage/SystemUsage;
       4: ifnull        20
       7: aload_0
       8: getfield      #20                 // Field systemUsage:Lorg/apache/activemq/usage/SystemUsage;
      11: invokevirtual #21                 // Method org/apache/activemq/usage/SystemUsage.getMemoryUsage:()Lorg/apache/activemq/usage/MemoryUsage;
      14: invokevirtual #23                 // Method org/apache/activemq/usage/MemoryUsage.isFull:()Z
      17: goto          21
      20: iconst_0
      21: ireturn

  public void release();
    Code:
       0: return

  public boolean hasMessagesBufferedToDeliver();
    Code:
       0: iconst_0
       1: ireturn

  public int getMemoryUsageHighWaterMark();
    Code:
       0: aload_0
       1: getfield      #2                  // Field memoryUsageHighWaterMark:I
       4: ireturn

  public void setMemoryUsageHighWaterMark(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #2                  // Field memoryUsageHighWaterMark:I
       5: return

  public org.apache.activemq.usage.SystemUsage getSystemUsage();
    Code:
       0: aload_0
       1: getfield      #20                 // Field systemUsage:Lorg/apache/activemq/usage/SystemUsage;
       4: areturn

  public void destroy() throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokevirtual #24                 // Method stop:()V
       4: return

  public java.util.LinkedList<org.apache.activemq.broker.region.MessageReference> pageInList(int);
    Code:
       0: new           #25                 // class java/lang/RuntimeException
       3: dup
       4: ldc           #26                 // String Not supported
       6: invokespecial #27                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/String;)V
       9: athrow

  public int getMaxProducersToAudit();
    Code:
       0: aload_0
       1: getfield      #4                  // Field maxProducersToAudit:I
       4: ireturn

  public synchronized void setMaxProducersToAudit(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #4                  // Field maxProducersToAudit:I
       5: aload_0
       6: getfield      #12                 // Field audit:Lorg/apache/activemq/ActiveMQMessageAudit;
       9: ifnull        20
      12: aload_0
      13: getfield      #12                 // Field audit:Lorg/apache/activemq/ActiveMQMessageAudit;
      16: iload_1
      17: invokevirtual #28                 // Method org/apache/activemq/ActiveMQMessageAudit.setMaximumNumberOfProducersToTrack:(I)V
      20: return

  public int getMaxAuditDepth();
    Code:
       0: aload_0
       1: getfield      #5                  // Field maxAuditDepth:I
       4: ireturn

  public synchronized void setMaxAuditDepth(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #5                  // Field maxAuditDepth:I
       5: aload_0
       6: getfield      #12                 // Field audit:Lorg/apache/activemq/ActiveMQMessageAudit;
       9: ifnull        20
      12: aload_0
      13: getfield      #12                 // Field audit:Lorg/apache/activemq/ActiveMQMessageAudit;
      16: iload_1
      17: invokevirtual #29                 // Method org/apache/activemq/ActiveMQMessageAudit.setAuditDepth:(I)V
      20: return

  public boolean isEnableAudit();
    Code:
       0: aload_0
       1: getfield      #6                  // Field enableAudit:Z
       4: ireturn

  public synchronized void setEnableAudit(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #6                  // Field enableAudit:Z
       5: iload_1
       6: ifeq          42
       9: aload_0
      10: getfield      #9                  // Field started:Z
      13: ifeq          42
      16: aload_0
      17: getfield      #12                 // Field audit:Lorg/apache/activemq/ActiveMQMessageAudit;
      20: ifnonnull     42
      23: aload_0
      24: new           #13                 // class org/apache/activemq/ActiveMQMessageAudit
      27: dup
      28: aload_0
      29: getfield      #5                  // Field maxAuditDepth:I
      32: aload_0
      33: getfield      #4                  // Field maxProducersToAudit:I
      36: invokespecial #14                 // Method org/apache/activemq/ActiveMQMessageAudit."<init>":(II)V
      39: putfield      #12                 // Field audit:Lorg/apache/activemq/ActiveMQMessageAudit;
      42: return

  public boolean isTransient();
    Code:
       0: iconst_0
       1: ireturn

  public void setMessageAudit(org.apache.activemq.ActiveMQMessageAudit);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #12                 // Field audit:Lorg/apache/activemq/ActiveMQMessageAudit;
       5: return

  public org.apache.activemq.ActiveMQMessageAudit getMessageAudit();
    Code:
       0: aload_0
       1: getfield      #12                 // Field audit:Lorg/apache/activemq/ActiveMQMessageAudit;
       4: areturn

  public boolean isUseCache();
    Code:
       0: aload_0
       1: getfield      #7                  // Field useCache:Z
       4: ireturn

  public void setUseCache(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #7                  // Field useCache:Z
       5: return

  public synchronized boolean isDuplicate(org.apache.activemq.command.MessageId);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #30                 // Method recordUniqueId:(Lorg/apache/activemq/command/MessageId;)Z
       5: istore_2
       6: aload_0
       7: aload_1
       8: invokevirtual #31                 // Method rollback:(Lorg/apache/activemq/command/MessageId;)V
      11: iload_2
      12: ifne          19
      15: iconst_1
      16: goto          20
      19: iconst_0
      20: ireturn

  public synchronized boolean recordUniqueId(org.apache.activemq.command.MessageId);
    Code:
       0: aload_0
       1: getfield      #6                  // Field enableAudit:Z
       4: ifeq          14
       7: aload_0
       8: getfield      #12                 // Field audit:Lorg/apache/activemq/ActiveMQMessageAudit;
      11: ifnonnull     16
      14: iconst_1
      15: ireturn
      16: aload_0
      17: getfield      #12                 // Field audit:Lorg/apache/activemq/ActiveMQMessageAudit;
      20: aload_1
      21: invokevirtual #32                 // Method org/apache/activemq/ActiveMQMessageAudit.isDuplicate:(Lorg/apache/activemq/command/MessageId;)Z
      24: ifne          31
      27: iconst_1
      28: goto          32
      31: iconst_0
      32: ireturn

  public synchronized void rollback(org.apache.activemq.command.MessageId);
    Code:
       0: aload_0
       1: getfield      #12                 // Field audit:Lorg/apache/activemq/ActiveMQMessageAudit;
       4: ifnull        15
       7: aload_0
       8: getfield      #12                 // Field audit:Lorg/apache/activemq/ActiveMQMessageAudit;
      11: aload_1
      12: invokevirtual #33                 // Method org/apache/activemq/ActiveMQMessageAudit.rollback:(Lorg/apache/activemq/command/MessageId;)V
      15: return

  public synchronized boolean isStarted();
    Code:
       0: aload_0
       1: getfield      #9                  // Field started:Z
       4: ireturn

  public static boolean isPrioritizedMessageSubscriber(org.apache.activemq.broker.Broker, org.apache.activemq.broker.region.Subscription);
    Code:
       0: iconst_0
       1: istore_2
       2: aload_0
       3: aload_1
       4: invokeinterface #34,  1           // InterfaceMethod org/apache/activemq/broker/region/Subscription.getActiveMQDestination:()Lorg/apache/activemq/command/ActiveMQDestination;
       9: invokeinterface #35,  2           // InterfaceMethod org/apache/activemq/broker/Broker.getDestinations:(Lorg/apache/activemq/command/ActiveMQDestination;)Ljava/util/Set;
      14: astore_3
      15: aload_3
      16: ifnull        67
      19: aload_3
      20: invokeinterface #36,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      25: astore        4
      27: aload         4
      29: invokeinterface #37,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      34: ifeq          67
      37: aload         4
      39: invokeinterface #38,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      44: checkcast     #39                 // class org/apache/activemq/broker/region/Destination
      47: astore        5
      49: aload         5
      51: invokeinterface #40,  1           // InterfaceMethod org/apache/activemq/broker/region/Destination.isPrioritizedMessages:()Z
      56: ifeq          64
      59: iconst_1
      60: istore_2
      61: goto          67
      64: goto          27
      67: iload_2
      68: ireturn

  public synchronized boolean isCacheEnabled();
    Code:
       0: aload_0
       1: getfield      #8                  // Field cacheEnabled:Z
       4: ireturn

  public synchronized void setCacheEnabled(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #8                  // Field cacheEnabled:Z
       5: return

  public void rebase();
    Code:
       0: return
}
