Compiled from "ConnectionContext.java"
public class org.apache.activemq.broker.ConnectionContext {
  private org.apache.activemq.broker.Connection connection;

  private org.apache.activemq.broker.Connector connector;

  private org.apache.activemq.broker.Broker broker;

  private boolean inRecoveryMode;

  private org.apache.activemq.transaction.Transaction transaction;

  private java.util.concurrent.ConcurrentHashMap<org.apache.activemq.command.TransactionId, org.apache.activemq.transaction.Transaction> transactions;

  private org.apache.activemq.security.SecurityContext securityContext;

  private org.apache.activemq.command.ConnectionId connectionId;

  private java.lang.String clientId;

  private java.lang.String userName;

  private boolean reconnect;

  private org.apache.activemq.command.WireFormatInfo wireFormatInfo;

  private java.lang.Object longTermStoreContext;

  private boolean producerFlowControl;

  private org.apache.activemq.security.MessageAuthorizationPolicy messageAuthorizationPolicy;

  private boolean networkConnection;

  private boolean faultTolerant;

  private final java.util.concurrent.atomic.AtomicBoolean stopping;

  private final org.apache.activemq.filter.MessageEvaluationContext messageEvaluationContext;

  private boolean dontSendReponse;

  private boolean clientMaster;

  private org.apache.activemq.state.ConnectionState connectionState;

  private org.apache.activemq.command.XATransactionId xid;

  public org.apache.activemq.broker.ConnectionContext();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #2                  // Field producerFlowControl:Z
       9: aload_0
      10: new           #3                  // class java/util/concurrent/atomic/AtomicBoolean
      13: dup
      14: invokespecial #4                  // Method java/util/concurrent/atomic/AtomicBoolean."<init>":()V
      17: putfield      #5                  // Field stopping:Ljava/util/concurrent/atomic/AtomicBoolean;
      20: aload_0
      21: iconst_1
      22: putfield      #6                  // Field clientMaster:Z
      25: aload_0
      26: new           #7                  // class org/apache/activemq/filter/MessageEvaluationContext
      29: dup
      30: invokespecial #8                  // Method org/apache/activemq/filter/MessageEvaluationContext."<init>":()V
      33: putfield      #9                  // Field messageEvaluationContext:Lorg/apache/activemq/filter/MessageEvaluationContext;
      36: return

  public org.apache.activemq.broker.ConnectionContext(org.apache.activemq.filter.MessageEvaluationContext);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #2                  // Field producerFlowControl:Z
       9: aload_0
      10: new           #3                  // class java/util/concurrent/atomic/AtomicBoolean
      13: dup
      14: invokespecial #4                  // Method java/util/concurrent/atomic/AtomicBoolean."<init>":()V
      17: putfield      #5                  // Field stopping:Ljava/util/concurrent/atomic/AtomicBoolean;
      20: aload_0
      21: iconst_1
      22: putfield      #6                  // Field clientMaster:Z
      25: aload_0
      26: aload_1
      27: putfield      #9                  // Field messageEvaluationContext:Lorg/apache/activemq/filter/MessageEvaluationContext;
      30: return

  public org.apache.activemq.broker.ConnectionContext(org.apache.activemq.command.ConnectionInfo);
    Code:
       0: aload_0
       1: invokespecial #10                 // Method "<init>":()V
       4: aload_0
       5: aload_1
       6: invokevirtual #11                 // Method org/apache/activemq/command/ConnectionInfo.getClientId:()Ljava/lang/String;
       9: invokevirtual #12                 // Method setClientId:(Ljava/lang/String;)V
      12: aload_0
      13: aload_1
      14: invokevirtual #13                 // Method org/apache/activemq/command/ConnectionInfo.getUserName:()Ljava/lang/String;
      17: invokevirtual #14                 // Method setUserName:(Ljava/lang/String;)V
      20: aload_0
      21: aload_1
      22: invokevirtual #15                 // Method org/apache/activemq/command/ConnectionInfo.getConnectionId:()Lorg/apache/activemq/command/ConnectionId;
      25: invokevirtual #16                 // Method setConnectionId:(Lorg/apache/activemq/command/ConnectionId;)V
      28: return

  public org.apache.activemq.broker.ConnectionContext copy();
    Code:
       0: new           #17                 // class org/apache/activemq/broker/ConnectionContext
       3: dup
       4: aload_0
       5: getfield      #9                  // Field messageEvaluationContext:Lorg/apache/activemq/filter/MessageEvaluationContext;
       8: invokespecial #18                 // Method "<init>":(Lorg/apache/activemq/filter/MessageEvaluationContext;)V
      11: astore_1
      12: aload_1
      13: aload_0
      14: getfield      #19                 // Field connection:Lorg/apache/activemq/broker/Connection;
      17: putfield      #19                 // Field connection:Lorg/apache/activemq/broker/Connection;
      20: aload_1
      21: aload_0
      22: getfield      #20                 // Field connector:Lorg/apache/activemq/broker/Connector;
      25: putfield      #20                 // Field connector:Lorg/apache/activemq/broker/Connector;
      28: aload_1
      29: aload_0
      30: getfield      #21                 // Field broker:Lorg/apache/activemq/broker/Broker;
      33: putfield      #21                 // Field broker:Lorg/apache/activemq/broker/Broker;
      36: aload_1
      37: aload_0
      38: getfield      #22                 // Field inRecoveryMode:Z
      41: putfield      #22                 // Field inRecoveryMode:Z
      44: aload_1
      45: aload_0
      46: getfield      #23                 // Field transaction:Lorg/apache/activemq/transaction/Transaction;
      49: putfield      #23                 // Field transaction:Lorg/apache/activemq/transaction/Transaction;
      52: aload_1
      53: aload_0
      54: getfield      #24                 // Field transactions:Ljava/util/concurrent/ConcurrentHashMap;
      57: putfield      #24                 // Field transactions:Ljava/util/concurrent/ConcurrentHashMap;
      60: aload_1
      61: aload_0
      62: getfield      #25                 // Field securityContext:Lorg/apache/activemq/security/SecurityContext;
      65: putfield      #25                 // Field securityContext:Lorg/apache/activemq/security/SecurityContext;
      68: aload_1
      69: aload_0
      70: getfield      #26                 // Field connectionId:Lorg/apache/activemq/command/ConnectionId;
      73: putfield      #26                 // Field connectionId:Lorg/apache/activemq/command/ConnectionId;
      76: aload_1
      77: aload_0
      78: getfield      #27                 // Field clientId:Ljava/lang/String;
      81: putfield      #27                 // Field clientId:Ljava/lang/String;
      84: aload_1
      85: aload_0
      86: getfield      #28                 // Field userName:Ljava/lang/String;
      89: putfield      #28                 // Field userName:Ljava/lang/String;
      92: aload_1
      93: aload_0
      94: getfield      #29                 // Field reconnect:Z
      97: putfield      #29                 // Field reconnect:Z
     100: aload_1
     101: aload_0
     102: getfield      #30                 // Field wireFormatInfo:Lorg/apache/activemq/command/WireFormatInfo;
     105: putfield      #30                 // Field wireFormatInfo:Lorg/apache/activemq/command/WireFormatInfo;
     108: aload_1
     109: aload_0
     110: getfield      #31                 // Field longTermStoreContext:Ljava/lang/Object;
     113: putfield      #31                 // Field longTermStoreContext:Ljava/lang/Object;
     116: aload_1
     117: aload_0
     118: getfield      #2                  // Field producerFlowControl:Z
     121: putfield      #2                  // Field producerFlowControl:Z
     124: aload_1
     125: aload_0
     126: getfield      #32                 // Field messageAuthorizationPolicy:Lorg/apache/activemq/security/MessageAuthorizationPolicy;
     129: putfield      #32                 // Field messageAuthorizationPolicy:Lorg/apache/activemq/security/MessageAuthorizationPolicy;
     132: aload_1
     133: aload_0
     134: getfield      #33                 // Field networkConnection:Z
     137: putfield      #33                 // Field networkConnection:Z
     140: aload_1
     141: aload_0
     142: getfield      #34                 // Field faultTolerant:Z
     145: putfield      #34                 // Field faultTolerant:Z
     148: aload_1
     149: getfield      #5                  // Field stopping:Ljava/util/concurrent/atomic/AtomicBoolean;
     152: aload_0
     153: getfield      #5                  // Field stopping:Ljava/util/concurrent/atomic/AtomicBoolean;
     156: invokevirtual #35                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
     159: invokevirtual #36                 // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V
     162: aload_1
     163: aload_0
     164: getfield      #37                 // Field dontSendReponse:Z
     167: putfield      #37                 // Field dontSendReponse:Z
     170: aload_1
     171: aload_0
     172: getfield      #6                  // Field clientMaster:Z
     175: putfield      #6                  // Field clientMaster:Z
     178: aload_1
     179: areturn

  public org.apache.activemq.security.SecurityContext getSecurityContext();
    Code:
       0: aload_0
       1: getfield      #25                 // Field securityContext:Lorg/apache/activemq/security/SecurityContext;
       4: areturn

  public void setSecurityContext(org.apache.activemq.security.SecurityContext);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #25                 // Field securityContext:Lorg/apache/activemq/security/SecurityContext;
       5: aload_1
       6: ifnull        20
       9: aload_0
      10: aload_1
      11: invokevirtual #38                 // Method org/apache/activemq/security/SecurityContext.getUserName:()Ljava/lang/String;
      14: invokevirtual #14                 // Method setUserName:(Ljava/lang/String;)V
      17: goto          25
      20: aload_0
      21: aconst_null
      22: invokevirtual #14                 // Method setUserName:(Ljava/lang/String;)V
      25: return

  public org.apache.activemq.broker.Broker getBroker();
    Code:
       0: aload_0
       1: getfield      #21                 // Field broker:Lorg/apache/activemq/broker/Broker;
       4: areturn

  public void setBroker(org.apache.activemq.broker.Broker);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #21                 // Field broker:Lorg/apache/activemq/broker/Broker;
       5: return

  public org.apache.activemq.broker.Connection getConnection();
    Code:
       0: aload_0
       1: getfield      #19                 // Field connection:Lorg/apache/activemq/broker/Connection;
       4: areturn

  public void setConnection(org.apache.activemq.broker.Connection);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #19                 // Field connection:Lorg/apache/activemq/broker/Connection;
       5: return

  public org.apache.activemq.transaction.Transaction getTransaction();
    Code:
       0: aload_0
       1: getfield      #23                 // Field transaction:Lorg/apache/activemq/transaction/Transaction;
       4: areturn

  public void setTransaction(org.apache.activemq.transaction.Transaction);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #23                 // Field transaction:Lorg/apache/activemq/transaction/Transaction;
       5: return

  public org.apache.activemq.broker.Connector getConnector();
    Code:
       0: aload_0
       1: getfield      #20                 // Field connector:Lorg/apache/activemq/broker/Connector;
       4: areturn

  public void setConnector(org.apache.activemq.broker.Connector);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #20                 // Field connector:Lorg/apache/activemq/broker/Connector;
       5: return

  public org.apache.activemq.security.MessageAuthorizationPolicy getMessageAuthorizationPolicy();
    Code:
       0: aload_0
       1: getfield      #32                 // Field messageAuthorizationPolicy:Lorg/apache/activemq/security/MessageAuthorizationPolicy;
       4: areturn

  public void setMessageAuthorizationPolicy(org.apache.activemq.security.MessageAuthorizationPolicy);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #32                 // Field messageAuthorizationPolicy:Lorg/apache/activemq/security/MessageAuthorizationPolicy;
       5: return

  public boolean isInRecoveryMode();
    Code:
       0: aload_0
       1: getfield      #22                 // Field inRecoveryMode:Z
       4: ireturn

  public void setInRecoveryMode(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #22                 // Field inRecoveryMode:Z
       5: return

  public java.util.concurrent.ConcurrentHashMap<org.apache.activemq.command.TransactionId, org.apache.activemq.transaction.Transaction> getTransactions();
    Code:
       0: aload_0
       1: getfield      #24                 // Field transactions:Ljava/util/concurrent/ConcurrentHashMap;
       4: areturn

  public void setTransactions(java.util.concurrent.ConcurrentHashMap<org.apache.activemq.command.TransactionId, org.apache.activemq.transaction.Transaction>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #24                 // Field transactions:Ljava/util/concurrent/ConcurrentHashMap;
       5: return

  public boolean isInTransaction();
    Code:
       0: aload_0
       1: getfield      #23                 // Field transaction:Lorg/apache/activemq/transaction/Transaction;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public java.lang.String getClientId();
    Code:
       0: aload_0
       1: getfield      #27                 // Field clientId:Ljava/lang/String;
       4: areturn

  public void setClientId(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #27                 // Field clientId:Ljava/lang/String;
       5: return

  public boolean isReconnect();
    Code:
       0: aload_0
       1: getfield      #29                 // Field reconnect:Z
       4: ireturn

  public void setReconnect(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #29                 // Field reconnect:Z
       5: return

  public org.apache.activemq.command.WireFormatInfo getWireFormatInfo();
    Code:
       0: aload_0
       1: getfield      #30                 // Field wireFormatInfo:Lorg/apache/activemq/command/WireFormatInfo;
       4: areturn

  public void setWireFormatInfo(org.apache.activemq.command.WireFormatInfo);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #30                 // Field wireFormatInfo:Lorg/apache/activemq/command/WireFormatInfo;
       5: return

  public org.apache.activemq.command.ConnectionId getConnectionId();
    Code:
       0: aload_0
       1: getfield      #26                 // Field connectionId:Lorg/apache/activemq/command/ConnectionId;
       4: areturn

  public void setConnectionId(org.apache.activemq.command.ConnectionId);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #26                 // Field connectionId:Lorg/apache/activemq/command/ConnectionId;
       5: return

  public java.lang.String getUserName();
    Code:
       0: aload_0
       1: getfield      #28                 // Field userName:Ljava/lang/String;
       4: areturn

  protected void setUserName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #28                 // Field userName:Ljava/lang/String;
       5: return

  public org.apache.activemq.filter.MessageEvaluationContext getMessageEvaluationContext();
    Code:
       0: aload_0
       1: getfield      #9                  // Field messageEvaluationContext:Lorg/apache/activemq/filter/MessageEvaluationContext;
       4: areturn

  public java.lang.Object getLongTermStoreContext();
    Code:
       0: aload_0
       1: getfield      #31                 // Field longTermStoreContext:Ljava/lang/Object;
       4: areturn

  public void setLongTermStoreContext(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #31                 // Field longTermStoreContext:Ljava/lang/Object;
       5: return

  public boolean isProducerFlowControl();
    Code:
       0: aload_0
       1: getfield      #2                  // Field producerFlowControl:Z
       4: ireturn

  public void setProducerFlowControl(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #2                  // Field producerFlowControl:Z
       5: return

  public boolean isAllowedToConsume(org.apache.activemq.broker.region.MessageReference) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #32                 // Field messageAuthorizationPolicy:Lorg/apache/activemq/security/MessageAuthorizationPolicy;
       4: ifnull        24
       7: aload_0
       8: getfield      #32                 // Field messageAuthorizationPolicy:Lorg/apache/activemq/security/MessageAuthorizationPolicy;
      11: aload_0
      12: aload_1
      13: invokeinterface #39,  1           // InterfaceMethod org/apache/activemq/broker/region/MessageReference.getMessage:()Lorg/apache/activemq/command/Message;
      18: invokeinterface #40,  3           // InterfaceMethod org/apache/activemq/security/MessageAuthorizationPolicy.isAllowedToConsume:(Lorg/apache/activemq/broker/ConnectionContext;Lorg/apache/activemq/command/Message;)Z
      23: ireturn
      24: iconst_1
      25: ireturn

  public synchronized boolean isNetworkConnection();
    Code:
       0: aload_0
       1: getfield      #33                 // Field networkConnection:Z
       4: ireturn

  public synchronized void setNetworkConnection(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #33                 // Field networkConnection:Z
       5: return

  public java.util.concurrent.atomic.AtomicBoolean getStopping();
    Code:
       0: aload_0
       1: getfield      #5                  // Field stopping:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: areturn

  public void setDontSendReponse(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #37                 // Field dontSendReponse:Z
       5: return

  public boolean isDontSendReponse();
    Code:
       0: aload_0
       1: getfield      #37                 // Field dontSendReponse:Z
       4: ireturn

  public boolean isClientMaster();
    Code:
       0: aload_0
       1: getfield      #6                  // Field clientMaster:Z
       4: ireturn

  public void setClientMaster(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #6                  // Field clientMaster:Z
       5: return

  public boolean isFaultTolerant();
    Code:
       0: aload_0
       1: getfield      #34                 // Field faultTolerant:Z
       4: ireturn

  public void setFaultTolerant(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #34                 // Field faultTolerant:Z
       5: return

  public void setConnectionState(org.apache.activemq.state.ConnectionState);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #41                 // Field connectionState:Lorg/apache/activemq/state/ConnectionState;
       5: return

  public org.apache.activemq.state.ConnectionState getConnectionState();
    Code:
       0: aload_0
       1: getfield      #41                 // Field connectionState:Lorg/apache/activemq/state/ConnectionState;
       4: areturn

  public void setXid(org.apache.activemq.command.XATransactionId);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #42                 // Field xid:Lorg/apache/activemq/command/XATransactionId;
       5: return

  public org.apache.activemq.command.XATransactionId getXid();
    Code:
       0: aload_0
       1: getfield      #42                 // Field xid:Lorg/apache/activemq/command/XATransactionId;
       4: areturn

  public boolean isAllowLinkStealing();
    Code:
       0: aload_0
       1: getfield      #20                 // Field connector:Lorg/apache/activemq/broker/Connector;
       4: ifnull        23
       7: aload_0
       8: getfield      #20                 // Field connector:Lorg/apache/activemq/broker/Connector;
      11: invokeinterface #43,  1           // InterfaceMethod org/apache/activemq/broker/Connector.isAllowLinkStealing:()Z
      16: ifeq          23
      19: iconst_1
      20: goto          24
      23: iconst_0
      24: ireturn
}
