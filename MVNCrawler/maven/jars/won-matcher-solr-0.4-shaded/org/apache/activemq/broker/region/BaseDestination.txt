Compiled from "BaseDestination.java"
public abstract class org.apache.activemq.broker.region.BaseDestination implements org.apache.activemq.broker.region.Destination {
  public static final int MAX_PAGE_SIZE;

  public static final int MAX_BROWSE_PAGE_SIZE;

  public static final long EXPIRE_MESSAGE_PERIOD;

  public static final long DEFAULT_INACTIVE_TIMEOUT_BEFORE_GC;

  public static final int MAX_PRODUCERS_TO_AUDIT;

  public static final int MAX_AUDIT_DEPTH;

  protected final org.apache.activemq.command.ActiveMQDestination destination;

  protected final org.apache.activemq.broker.Broker broker;

  protected final org.apache.activemq.store.MessageStore store;

  protected org.apache.activemq.usage.SystemUsage systemUsage;

  protected org.apache.activemq.usage.MemoryUsage memoryUsage;

  private boolean producerFlowControl;

  private boolean alwaysRetroactive;

  protected boolean warnOnProducerFlowControl;

  protected long blockedProducerWarningInterval;

  private int maxProducersToAudit;

  private int maxAuditDepth;

  private boolean enableAudit;

  private int maxPageSize;

  private int maxBrowsePageSize;

  private boolean useCache;

  private int minimumMessageSize;

  private boolean lazyDispatch;

  private boolean advisoryForSlowConsumers;

  private boolean advisoryForFastProducers;

  private boolean advisoryForDiscardingMessages;

  private boolean advisoryWhenFull;

  private boolean advisoryForDelivery;

  private boolean advisoryForConsumed;

  private boolean sendAdvisoryIfNoConsumers;

  protected final org.apache.activemq.broker.region.DestinationStatistics destinationStatistics;

  protected final org.apache.activemq.broker.BrokerService brokerService;

  protected final org.apache.activemq.broker.Broker regionBroker;

  protected org.apache.activemq.broker.region.policy.DeadLetterStrategy deadLetterStrategy;

  protected long expireMessagesPeriod;

  private int maxExpirePageSize;

  protected int cursorMemoryHighWaterMark;

  protected int storeUsageHighWaterMark;

  private org.apache.activemq.broker.region.policy.SlowConsumerStrategy slowConsumerStrategy;

  private boolean prioritizedMessages;

  private long inactiveTimoutBeforeGC;

  private boolean gcIfInactive;

  private boolean gcWithNetworkConsumers;

  private long lastActiveTime;

  private boolean reduceMemoryFootprint;

  protected final org.apache.activemq.thread.Scheduler scheduler;

  private boolean disposed;

  private boolean doOptimzeMessageStorage;

  private int optimizeMessageStoreInFlightLimit;

  private boolean persistJMSRedelivered;

  public org.apache.activemq.broker.region.BaseDestination(org.apache.activemq.broker.BrokerService, org.apache.activemq.store.MessageStore, org.apache.activemq.command.ActiveMQDestination, org.apache.activemq.broker.region.DestinationStatistics) throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #2                  // Field producerFlowControl:Z
       9: aload_0
      10: iconst_0
      11: putfield      #3                  // Field alwaysRetroactive:Z
      14: aload_0
      15: iconst_1
      16: putfield      #4                  // Field warnOnProducerFlowControl:Z
      19: aload_0
      20: ldc2_w        #5                  // long 30000l
      23: putfield      #7                  // Field blockedProducerWarningInterval:J
      26: aload_0
      27: sipush        1024
      30: putfield      #8                  // Field maxProducersToAudit:I
      33: aload_0
      34: sipush        2048
      37: putfield      #9                  // Field maxAuditDepth:I
      40: aload_0
      41: iconst_1
      42: putfield      #10                 // Field enableAudit:Z
      45: aload_0
      46: sipush        200
      49: putfield      #11                 // Field maxPageSize:I
      52: aload_0
      53: sipush        400
      56: putfield      #12                 // Field maxBrowsePageSize:I
      59: aload_0
      60: iconst_1
      61: putfield      #13                 // Field useCache:Z
      64: aload_0
      65: sipush        1024
      68: putfield      #14                 // Field minimumMessageSize:I
      71: aload_0
      72: iconst_0
      73: putfield      #15                 // Field lazyDispatch:Z
      76: aload_0
      77: new           #16                 // class org/apache/activemq/broker/region/DestinationStatistics
      80: dup
      81: invokespecial #17                 // Method org/apache/activemq/broker/region/DestinationStatistics."<init>":()V
      84: putfield      #18                 // Field destinationStatistics:Lorg/apache/activemq/broker/region/DestinationStatistics;
      87: aload_0
      88: getstatic     #19                 // Field DEFAULT_DEAD_LETTER_STRATEGY:Lorg/apache/activemq/broker/region/policy/DeadLetterStrategy;
      91: putfield      #20                 // Field deadLetterStrategy:Lorg/apache/activemq/broker/region/policy/DeadLetterStrategy;
      94: aload_0
      95: ldc2_w        #5                  // long 30000l
      98: putfield      #21                 // Field expireMessagesPeriod:J
     101: aload_0
     102: sipush        400
     105: putfield      #22                 // Field maxExpirePageSize:I
     108: aload_0
     109: bipush        70
     111: putfield      #23                 // Field cursorMemoryHighWaterMark:I
     114: aload_0
     115: bipush        100
     117: putfield      #24                 // Field storeUsageHighWaterMark:I
     120: aload_0
     121: ldc2_w        #25                 // long 60000l
     124: putfield      #27                 // Field inactiveTimoutBeforeGC:J
     127: aload_0
     128: lconst_0
     129: putfield      #28                 // Field lastActiveTime:J
     132: aload_0
     133: iconst_0
     134: putfield      #29                 // Field reduceMemoryFootprint:Z
     137: aload_0
     138: iconst_0
     139: putfield      #30                 // Field disposed:Z
     142: aload_0
     143: iconst_1
     144: putfield      #31                 // Field doOptimzeMessageStorage:Z
     147: aload_0
     148: bipush        10
     150: putfield      #32                 // Field optimizeMessageStoreInFlightLimit:I
     153: aload_0
     154: aload_1
     155: putfield      #33                 // Field brokerService:Lorg/apache/activemq/broker/BrokerService;
     158: aload_0
     159: aload_1
     160: invokevirtual #34                 // Method org/apache/activemq/broker/BrokerService.getBroker:()Lorg/apache/activemq/broker/Broker;
     163: putfield      #35                 // Field broker:Lorg/apache/activemq/broker/Broker;
     166: aload_0
     167: aload_2
     168: putfield      #36                 // Field store:Lorg/apache/activemq/store/MessageStore;
     171: aload_0
     172: aload_3
     173: putfield      #37                 // Field destination:Lorg/apache/activemq/command/ActiveMQDestination;
     176: aload_0
     177: getfield      #18                 // Field destinationStatistics:Lorg/apache/activemq/broker/region/DestinationStatistics;
     180: aload         4
     182: invokevirtual #38                 // Method org/apache/activemq/broker/region/DestinationStatistics.isEnabled:()Z
     185: invokevirtual #39                 // Method org/apache/activemq/broker/region/DestinationStatistics.setEnabled:(Z)V
     188: aload_0
     189: getfield      #18                 // Field destinationStatistics:Lorg/apache/activemq/broker/region/DestinationStatistics;
     192: aload         4
     194: invokevirtual #40                 // Method org/apache/activemq/broker/region/DestinationStatistics.setParent:(Lorg/apache/activemq/broker/region/DestinationStatistics;)V
     197: aload_0
     198: new           #41                 // class org/apache/activemq/usage/SystemUsage
     201: dup
     202: aload_1
     203: invokevirtual #42                 // Method org/apache/activemq/broker/BrokerService.getProducerSystemUsage:()Lorg/apache/activemq/usage/SystemUsage;
     206: aload_3
     207: invokevirtual #43                 // Method org/apache/activemq/command/ActiveMQDestination.toString:()Ljava/lang/String;
     210: invokespecial #44                 // Method org/apache/activemq/usage/SystemUsage."<init>":(Lorg/apache/activemq/usage/SystemUsage;Ljava/lang/String;)V
     213: putfield      #45                 // Field systemUsage:Lorg/apache/activemq/usage/SystemUsage;
     216: aload_0
     217: aload_0
     218: getfield      #45                 // Field systemUsage:Lorg/apache/activemq/usage/SystemUsage;
     221: invokevirtual #46                 // Method org/apache/activemq/usage/SystemUsage.getMemoryUsage:()Lorg/apache/activemq/usage/MemoryUsage;
     224: putfield      #47                 // Field memoryUsage:Lorg/apache/activemq/usage/MemoryUsage;
     227: aload_0
     228: getfield      #47                 // Field memoryUsage:Lorg/apache/activemq/usage/MemoryUsage;
     231: fconst_1
     232: invokevirtual #48                 // Method org/apache/activemq/usage/MemoryUsage.setUsagePortion:(F)V
     235: aload_0
     236: aload_1
     237: invokevirtual #49                 // Method org/apache/activemq/broker/BrokerService.getRegionBroker:()Lorg/apache/activemq/broker/Broker;
     240: putfield      #50                 // Field regionBroker:Lorg/apache/activemq/broker/Broker;
     243: aload_0
     244: aload_1
     245: invokevirtual #34                 // Method org/apache/activemq/broker/BrokerService.getBroker:()Lorg/apache/activemq/broker/Broker;
     248: invokeinterface #51,  1           // InterfaceMethod org/apache/activemq/broker/Broker.getScheduler:()Lorg/apache/activemq/thread/Scheduler;
     253: putfield      #52                 // Field scheduler:Lorg/apache/activemq/thread/Scheduler;
     256: return

  public void initialize() throws java.lang.Exception;
    Code:
       0: aload_0
       1: getfield      #36                 // Field store:Lorg/apache/activemq/store/MessageStore;
       4: ifnull        20
       7: aload_0
       8: getfield      #36                 // Field store:Lorg/apache/activemq/store/MessageStore;
      11: aload_0
      12: getfield      #47                 // Field memoryUsage:Lorg/apache/activemq/usage/MemoryUsage;
      15: invokeinterface #53,  2           // InterfaceMethod org/apache/activemq/store/MessageStore.setMemoryUsage:(Lorg/apache/activemq/usage/MemoryUsage;)V
      20: return

  public boolean isProducerFlowControl();
    Code:
       0: aload_0
       1: getfield      #2                  // Field producerFlowControl:Z
       4: ireturn

  public void setProducerFlowControl(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #2                  // Field producerFlowControl:Z
       5: return

  public boolean isAlwaysRetroactive();
    Code:
       0: aload_0
       1: getfield      #3                  // Field alwaysRetroactive:Z
       4: ireturn

  public void setAlwaysRetroactive(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #3                  // Field alwaysRetroactive:Z
       5: return

  public void setBlockedProducerWarningInterval(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #7                  // Field blockedProducerWarningInterval:J
       5: return

  public long getBlockedProducerWarningInterval();
    Code:
       0: aload_0
       1: getfield      #7                  // Field blockedProducerWarningInterval:J
       4: lreturn

  public int getMaxProducersToAudit();
    Code:
       0: aload_0
       1: getfield      #8                  // Field maxProducersToAudit:I
       4: ireturn

  public void setMaxProducersToAudit(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #8                  // Field maxProducersToAudit:I
       5: return

  public int getMaxAuditDepth();
    Code:
       0: aload_0
       1: getfield      #9                  // Field maxAuditDepth:I
       4: ireturn

  public void setMaxAuditDepth(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #9                  // Field maxAuditDepth:I
       5: return

  public boolean isEnableAudit();
    Code:
       0: aload_0
       1: getfield      #10                 // Field enableAudit:Z
       4: ireturn

  public void setEnableAudit(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #10                 // Field enableAudit:Z
       5: return

  public void addProducer(org.apache.activemq.broker.ConnectionContext, org.apache.activemq.command.ProducerInfo) throws java.lang.Exception;
    Code:
       0: aload_0
       1: getfield      #18                 // Field destinationStatistics:Lorg/apache/activemq/broker/region/DestinationStatistics;
       4: invokevirtual #54                 // Method org/apache/activemq/broker/region/DestinationStatistics.getProducers:()Lorg/apache/activemq/management/CountStatisticImpl;
       7: invokevirtual #55                 // Method org/apache/activemq/management/CountStatisticImpl.increment:()V
      10: aload_0
      11: lconst_0
      12: putfield      #28                 // Field lastActiveTime:J
      15: return

  public void removeProducer(org.apache.activemq.broker.ConnectionContext, org.apache.activemq.command.ProducerInfo) throws java.lang.Exception;
    Code:
       0: aload_0
       1: getfield      #18                 // Field destinationStatistics:Lorg/apache/activemq/broker/region/DestinationStatistics;
       4: invokevirtual #54                 // Method org/apache/activemq/broker/region/DestinationStatistics.getProducers:()Lorg/apache/activemq/management/CountStatisticImpl;
       7: invokevirtual #56                 // Method org/apache/activemq/management/CountStatisticImpl.decrement:()V
      10: return

  public void addSubscription(org.apache.activemq.broker.ConnectionContext, org.apache.activemq.broker.region.Subscription) throws java.lang.Exception;
    Code:
       0: aload_0
       1: getfield      #18                 // Field destinationStatistics:Lorg/apache/activemq/broker/region/DestinationStatistics;
       4: invokevirtual #57                 // Method org/apache/activemq/broker/region/DestinationStatistics.getConsumers:()Lorg/apache/activemq/management/CountStatisticImpl;
       7: invokevirtual #55                 // Method org/apache/activemq/management/CountStatisticImpl.increment:()V
      10: aload_0
      11: lconst_0
      12: putfield      #28                 // Field lastActiveTime:J
      15: return

  public void removeSubscription(org.apache.activemq.broker.ConnectionContext, org.apache.activemq.broker.region.Subscription, long) throws java.lang.Exception;
    Code:
       0: aload_0
       1: getfield      #18                 // Field destinationStatistics:Lorg/apache/activemq/broker/region/DestinationStatistics;
       4: invokevirtual #57                 // Method org/apache/activemq/broker/region/DestinationStatistics.getConsumers:()Lorg/apache/activemq/management/CountStatisticImpl;
       7: invokevirtual #56                 // Method org/apache/activemq/management/CountStatisticImpl.decrement:()V
      10: return

  public final org.apache.activemq.usage.MemoryUsage getMemoryUsage();
    Code:
       0: aload_0
       1: getfield      #47                 // Field memoryUsage:Lorg/apache/activemq/usage/MemoryUsage;
       4: areturn

  public void setMemoryUsage(org.apache.activemq.usage.MemoryUsage);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #47                 // Field memoryUsage:Lorg/apache/activemq/usage/MemoryUsage;
       5: return

  public org.apache.activemq.broker.region.DestinationStatistics getDestinationStatistics();
    Code:
       0: aload_0
       1: getfield      #18                 // Field destinationStatistics:Lorg/apache/activemq/broker/region/DestinationStatistics;
       4: areturn

  public org.apache.activemq.command.ActiveMQDestination getActiveMQDestination();
    Code:
       0: aload_0
       1: getfield      #37                 // Field destination:Lorg/apache/activemq/command/ActiveMQDestination;
       4: areturn

  public final java.lang.String getName();
    Code:
       0: aload_0
       1: invokevirtual #58                 // Method getActiveMQDestination:()Lorg/apache/activemq/command/ActiveMQDestination;
       4: invokevirtual #59                 // Method org/apache/activemq/command/ActiveMQDestination.getPhysicalName:()Ljava/lang/String;
       7: areturn

  public final org.apache.activemq.store.MessageStore getMessageStore();
    Code:
       0: aload_0
       1: getfield      #36                 // Field store:Lorg/apache/activemq/store/MessageStore;
       4: areturn

  public boolean isActive();
    Code:
       0: aload_0
       1: getfield      #18                 // Field destinationStatistics:Lorg/apache/activemq/broker/region/DestinationStatistics;
       4: invokevirtual #57                 // Method org/apache/activemq/broker/region/DestinationStatistics.getConsumers:()Lorg/apache/activemq/management/CountStatisticImpl;
       7: invokevirtual #60                 // Method org/apache/activemq/management/CountStatisticImpl.getCount:()J
      10: lconst_0
      11: lcmp
      12: ifne          30
      15: aload_0
      16: getfield      #18                 // Field destinationStatistics:Lorg/apache/activemq/broker/region/DestinationStatistics;
      19: invokevirtual #54                 // Method org/apache/activemq/broker/region/DestinationStatistics.getProducers:()Lorg/apache/activemq/management/CountStatisticImpl;
      22: invokevirtual #60                 // Method org/apache/activemq/management/CountStatisticImpl.getCount:()J
      25: lconst_0
      26: lcmp
      27: ifeq          34
      30: iconst_1
      31: goto          35
      34: iconst_0
      35: istore_1
      36: iload_1
      37: ifeq          71
      40: aload_0
      41: invokevirtual #61                 // Method isGcWithNetworkConsumers:()Z
      44: ifeq          71
      47: aload_0
      48: getfield      #18                 // Field destinationStatistics:Lorg/apache/activemq/broker/region/DestinationStatistics;
      51: invokevirtual #57                 // Method org/apache/activemq/broker/region/DestinationStatistics.getConsumers:()Lorg/apache/activemq/management/CountStatisticImpl;
      54: invokevirtual #60                 // Method org/apache/activemq/management/CountStatisticImpl.getCount:()J
      57: lconst_0
      58: lcmp
      59: ifeq          71
      62: aload_0
      63: aload_0
      64: invokevirtual #62                 // Method getConsumers:()Ljava/util/List;
      67: invokevirtual #63                 // Method hasRegularConsumers:(Ljava/util/List;)Z
      70: istore_1
      71: iload_1
      72: ireturn

  public int getMaxPageSize();
    Code:
       0: aload_0
       1: getfield      #11                 // Field maxPageSize:I
       4: ireturn

  public void setMaxPageSize(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #11                 // Field maxPageSize:I
       5: return

  public int getMaxBrowsePageSize();
    Code:
       0: aload_0
       1: getfield      #12                 // Field maxBrowsePageSize:I
       4: ifle          14
       7: aload_0
       8: getfield      #12                 // Field maxBrowsePageSize:I
      11: goto          18
      14: aload_0
      15: invokevirtual #64                 // Method getMaxPageSize:()I
      18: ireturn

  public void setMaxBrowsePageSize(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #12                 // Field maxBrowsePageSize:I
       5: return

  public int getMaxExpirePageSize();
    Code:
       0: aload_0
       1: getfield      #22                 // Field maxExpirePageSize:I
       4: ireturn

  public void setMaxExpirePageSize(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #22                 // Field maxExpirePageSize:I
       5: return

  public void setExpireMessagesPeriod(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #21                 // Field expireMessagesPeriod:J
       5: return

  public long getExpireMessagesPeriod();
    Code:
       0: aload_0
       1: getfield      #21                 // Field expireMessagesPeriod:J
       4: lreturn

  public boolean isUseCache();
    Code:
       0: aload_0
       1: getfield      #13                 // Field useCache:Z
       4: ireturn

  public void setUseCache(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #13                 // Field useCache:Z
       5: return

  public int getMinimumMessageSize();
    Code:
       0: aload_0
       1: getfield      #14                 // Field minimumMessageSize:I
       4: ireturn

  public void setMinimumMessageSize(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #14                 // Field minimumMessageSize:I
       5: return

  public boolean isLazyDispatch();
    Code:
       0: aload_0
       1: getfield      #15                 // Field lazyDispatch:Z
       4: ireturn

  public void setLazyDispatch(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #15                 // Field lazyDispatch:Z
       5: return

  protected long getDestinationSequenceId();
    Code:
       0: aload_0
       1: getfield      #50                 // Field regionBroker:Lorg/apache/activemq/broker/Broker;
       4: invokeinterface #65,  1           // InterfaceMethod org/apache/activemq/broker/Broker.getBrokerSequenceId:()J
       9: lreturn

  public boolean isAdvisoryForSlowConsumers();
    Code:
       0: aload_0
       1: getfield      #66                 // Field advisoryForSlowConsumers:Z
       4: ireturn

  public void setAdvisoryForSlowConsumers(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #66                 // Field advisoryForSlowConsumers:Z
       5: return

  public boolean isAdvisoryForDiscardingMessages();
    Code:
       0: aload_0
       1: getfield      #67                 // Field advisoryForDiscardingMessages:Z
       4: ireturn

  public void setAdvisoryForDiscardingMessages(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #67                 // Field advisoryForDiscardingMessages:Z
       5: return

  public boolean isAdvisoryWhenFull();
    Code:
       0: aload_0
       1: getfield      #68                 // Field advisoryWhenFull:Z
       4: ireturn

  public void setAdvisoryWhenFull(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #68                 // Field advisoryWhenFull:Z
       5: return

  public boolean isAdvisoryForDelivery();
    Code:
       0: aload_0
       1: getfield      #69                 // Field advisoryForDelivery:Z
       4: ireturn

  public void setAdvisoryForDelivery(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #69                 // Field advisoryForDelivery:Z
       5: return

  public boolean isAdvisoryForConsumed();
    Code:
       0: aload_0
       1: getfield      #70                 // Field advisoryForConsumed:Z
       4: ireturn

  public void setAdvisoryForConsumed(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #70                 // Field advisoryForConsumed:Z
       5: return

  public boolean isAdvisoryForFastProducers();
    Code:
       0: aload_0
       1: getfield      #71                 // Field advisoryForFastProducers:Z
       4: ireturn

  public void setAdvisoryForFastProducers(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #71                 // Field advisoryForFastProducers:Z
       5: return

  public boolean isSendAdvisoryIfNoConsumers();
    Code:
       0: aload_0
       1: getfield      #72                 // Field sendAdvisoryIfNoConsumers:Z
       4: ireturn

  public void setSendAdvisoryIfNoConsumers(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #72                 // Field sendAdvisoryIfNoConsumers:Z
       5: return

  public org.apache.activemq.broker.region.policy.DeadLetterStrategy getDeadLetterStrategy();
    Code:
       0: aload_0
       1: getfield      #20                 // Field deadLetterStrategy:Lorg/apache/activemq/broker/region/policy/DeadLetterStrategy;
       4: areturn

  public void setDeadLetterStrategy(org.apache.activemq.broker.region.policy.DeadLetterStrategy);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #20                 // Field deadLetterStrategy:Lorg/apache/activemq/broker/region/policy/DeadLetterStrategy;
       5: return

  public int getCursorMemoryHighWaterMark();
    Code:
       0: aload_0
       1: getfield      #23                 // Field cursorMemoryHighWaterMark:I
       4: ireturn

  public void setCursorMemoryHighWaterMark(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #23                 // Field cursorMemoryHighWaterMark:I
       5: return

  public void messageConsumed(org.apache.activemq.broker.ConnectionContext, org.apache.activemq.broker.region.MessageReference);
    Code:
       0: aload_0
       1: getfield      #70                 // Field advisoryForConsumed:Z
       4: ifeq          18
       7: aload_0
       8: getfield      #35                 // Field broker:Lorg/apache/activemq/broker/Broker;
      11: aload_1
      12: aload_2
      13: invokeinterface #73,  3           // InterfaceMethod org/apache/activemq/broker/Broker.messageConsumed:(Lorg/apache/activemq/broker/ConnectionContext;Lorg/apache/activemq/broker/region/MessageReference;)V
      18: return

  public void messageDelivered(org.apache.activemq.broker.ConnectionContext, org.apache.activemq.broker.region.MessageReference);
    Code:
       0: aload_0
       1: getfield      #69                 // Field advisoryForDelivery:Z
       4: ifeq          18
       7: aload_0
       8: getfield      #35                 // Field broker:Lorg/apache/activemq/broker/Broker;
      11: aload_1
      12: aload_2
      13: invokeinterface #74,  3           // InterfaceMethod org/apache/activemq/broker/Broker.messageDelivered:(Lorg/apache/activemq/broker/ConnectionContext;Lorg/apache/activemq/broker/region/MessageReference;)V
      18: return

  public void messageDiscarded(org.apache.activemq.broker.ConnectionContext, org.apache.activemq.broker.region.Subscription, org.apache.activemq.broker.region.MessageReference);
    Code:
       0: aload_0
       1: getfield      #67                 // Field advisoryForDiscardingMessages:Z
       4: ifeq          19
       7: aload_0
       8: getfield      #35                 // Field broker:Lorg/apache/activemq/broker/Broker;
      11: aload_1
      12: aload_2
      13: aload_3
      14: invokeinterface #75,  4           // InterfaceMethod org/apache/activemq/broker/Broker.messageDiscarded:(Lorg/apache/activemq/broker/ConnectionContext;Lorg/apache/activemq/broker/region/Subscription;Lorg/apache/activemq/broker/region/MessageReference;)V
      19: return

  public void slowConsumer(org.apache.activemq.broker.ConnectionContext, org.apache.activemq.broker.region.Subscription);
    Code:
       0: aload_0
       1: getfield      #66                 // Field advisoryForSlowConsumers:Z
       4: ifeq          19
       7: aload_0
       8: getfield      #35                 // Field broker:Lorg/apache/activemq/broker/Broker;
      11: aload_1
      12: aload_0
      13: aload_2
      14: invokeinterface #76,  4           // InterfaceMethod org/apache/activemq/broker/Broker.slowConsumer:(Lorg/apache/activemq/broker/ConnectionContext;Lorg/apache/activemq/broker/region/Destination;Lorg/apache/activemq/broker/region/Subscription;)V
      19: aload_0
      20: getfield      #77                 // Field slowConsumerStrategy:Lorg/apache/activemq/broker/region/policy/SlowConsumerStrategy;
      23: ifnull        37
      26: aload_0
      27: getfield      #77                 // Field slowConsumerStrategy:Lorg/apache/activemq/broker/region/policy/SlowConsumerStrategy;
      30: aload_1
      31: aload_2
      32: invokeinterface #78,  3           // InterfaceMethod org/apache/activemq/broker/region/policy/SlowConsumerStrategy.slowConsumer:(Lorg/apache/activemq/broker/ConnectionContext;Lorg/apache/activemq/broker/region/Subscription;)V
      37: return

  public void fastProducer(org.apache.activemq.broker.ConnectionContext, org.apache.activemq.command.ProducerInfo);
    Code:
       0: aload_0
       1: getfield      #71                 // Field advisoryForFastProducers:Z
       4: ifeq          22
       7: aload_0
       8: getfield      #35                 // Field broker:Lorg/apache/activemq/broker/Broker;
      11: aload_1
      12: aload_2
      13: aload_0
      14: invokevirtual #58                 // Method getActiveMQDestination:()Lorg/apache/activemq/command/ActiveMQDestination;
      17: invokeinterface #79,  4           // InterfaceMethod org/apache/activemq/broker/Broker.fastProducer:(Lorg/apache/activemq/broker/ConnectionContext;Lorg/apache/activemq/command/ProducerInfo;Lorg/apache/activemq/command/ActiveMQDestination;)V
      22: return

  public void isFull(org.apache.activemq.broker.ConnectionContext, org.apache.activemq.usage.Usage<?>);
    Code:
       0: aload_0
       1: getfield      #68                 // Field advisoryWhenFull:Z
       4: ifeq          19
       7: aload_0
       8: getfield      #35                 // Field broker:Lorg/apache/activemq/broker/Broker;
      11: aload_1
      12: aload_0
      13: aload_2
      14: invokeinterface #80,  4           // InterfaceMethod org/apache/activemq/broker/Broker.isFull:(Lorg/apache/activemq/broker/ConnectionContext;Lorg/apache/activemq/broker/region/Destination;Lorg/apache/activemq/usage/Usage;)V
      19: return

  public void dispose(org.apache.activemq.broker.ConnectionContext) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #36                 // Field store:Lorg/apache/activemq/store/MessageStore;
       4: ifnull        27
       7: aload_0
       8: getfield      #36                 // Field store:Lorg/apache/activemq/store/MessageStore;
      11: aload_1
      12: invokeinterface #81,  2           // InterfaceMethod org/apache/activemq/store/MessageStore.removeAllMessages:(Lorg/apache/activemq/broker/ConnectionContext;)V
      17: aload_0
      18: getfield      #36                 // Field store:Lorg/apache/activemq/store/MessageStore;
      21: aload_1
      22: invokeinterface #82,  2           // InterfaceMethod org/apache/activemq/store/MessageStore.dispose:(Lorg/apache/activemq/broker/ConnectionContext;)V
      27: aload_0
      28: getfield      #18                 // Field destinationStatistics:Lorg/apache/activemq/broker/region/DestinationStatistics;
      31: aconst_null
      32: invokevirtual #40                 // Method org/apache/activemq/broker/region/DestinationStatistics.setParent:(Lorg/apache/activemq/broker/region/DestinationStatistics;)V
      35: aload_0
      36: getfield      #47                 // Field memoryUsage:Lorg/apache/activemq/usage/MemoryUsage;
      39: invokevirtual #83                 // Method org/apache/activemq/usage/MemoryUsage.stop:()V
      42: aload_0
      43: iconst_1
      44: putfield      #30                 // Field disposed:Z
      47: return

  public boolean isDisposed();
    Code:
       0: aload_0
       1: getfield      #30                 // Field disposed:Z
       4: ireturn

  protected void onMessageWithNoConsumers(org.apache.activemq.broker.ConnectionContext, org.apache.activemq.command.Message) throws java.lang.Exception;
    Code:
       0: aload_2
       1: invokevirtual #84                 // Method org/apache/activemq/command/Message.isPersistent:()Z
       4: ifne          194
       7: aload_0
       8: invokevirtual #85                 // Method isSendAdvisoryIfNoConsumers:()Z
      11: ifeq          194
      14: aload_0
      15: getfield      #37                 // Field destination:Lorg/apache/activemq/command/ActiveMQDestination;
      18: invokevirtual #86                 // Method org/apache/activemq/command/ActiveMQDestination.isQueue:()Z
      21: ifne          34
      24: aload_0
      25: getfield      #37                 // Field destination:Lorg/apache/activemq/command/ActiveMQDestination;
      28: invokestatic  #87                 // Method org/apache/activemq/advisory/AdvisorySupport.isAdvisoryTopic:(Lorg/apache/activemq/command/ActiveMQDestination;)Z
      31: ifne          194
      34: aload_2
      35: invokevirtual #88                 // Method org/apache/activemq/command/Message.copy:()Lorg/apache/activemq/command/Message;
      38: astore_3
      39: aload_3
      40: invokevirtual #89                 // Method org/apache/activemq/command/Message.getOriginalDestination:()Lorg/apache/activemq/command/ActiveMQDestination;
      43: ifnull        54
      46: aload_3
      47: aload_3
      48: invokevirtual #90                 // Method org/apache/activemq/command/Message.getDestination:()Lorg/apache/activemq/command/ActiveMQDestination;
      51: invokevirtual #91                 // Method org/apache/activemq/command/Message.setOriginalDestination:(Lorg/apache/activemq/command/ActiveMQDestination;)V
      54: aload_3
      55: invokevirtual #92                 // Method org/apache/activemq/command/Message.getOriginalTransactionId:()Lorg/apache/activemq/command/TransactionId;
      58: ifnull        69
      61: aload_3
      62: aload_3
      63: invokevirtual #93                 // Method org/apache/activemq/command/Message.getTransactionId:()Lorg/apache/activemq/command/TransactionId;
      66: invokevirtual #94                 // Method org/apache/activemq/command/Message.setOriginalTransactionId:(Lorg/apache/activemq/command/TransactionId;)V
      69: aload_0
      70: getfield      #37                 // Field destination:Lorg/apache/activemq/command/ActiveMQDestination;
      73: invokevirtual #86                 // Method org/apache/activemq/command/ActiveMQDestination.isQueue:()Z
      76: ifeq          91
      79: aload_0
      80: getfield      #37                 // Field destination:Lorg/apache/activemq/command/ActiveMQDestination;
      83: invokestatic  #95                 // Method org/apache/activemq/advisory/AdvisorySupport.getNoQueueConsumersAdvisoryTopic:(Lorg/apache/activemq/command/ActiveMQDestination;)Lorg/apache/activemq/command/ActiveMQTopic;
      86: astore        4
      88: goto          100
      91: aload_0
      92: getfield      #37                 // Field destination:Lorg/apache/activemq/command/ActiveMQDestination;
      95: invokestatic  #96                 // Method org/apache/activemq/advisory/AdvisorySupport.getNoTopicConsumersAdvisoryTopic:(Lorg/apache/activemq/command/ActiveMQDestination;)Lorg/apache/activemq/command/ActiveMQTopic;
      98: astore        4
     100: aload_3
     101: aload         4
     103: invokevirtual #97                 // Method org/apache/activemq/command/Message.setDestination:(Lorg/apache/activemq/command/ActiveMQDestination;)V
     106: aload_3
     107: aconst_null
     108: invokevirtual #98                 // Method org/apache/activemq/command/Message.setTransactionId:(Lorg/apache/activemq/command/TransactionId;)V
     111: aload_1
     112: invokevirtual #99                 // Method org/apache/activemq/broker/ConnectionContext.isProducerFlowControl:()Z
     115: istore        5
     117: aload_1
     118: iconst_0
     119: invokevirtual #100                // Method org/apache/activemq/broker/ConnectionContext.setProducerFlowControl:(Z)V
     122: new           #101                // class org/apache/activemq/broker/ProducerBrokerExchange
     125: dup
     126: invokespecial #102                // Method org/apache/activemq/broker/ProducerBrokerExchange."<init>":()V
     129: astore        6
     131: aload         6
     133: iconst_0
     134: invokevirtual #103                // Method org/apache/activemq/broker/ProducerBrokerExchange.setMutable:(Z)V
     137: aload         6
     139: aload_1
     140: invokevirtual #104                // Method org/apache/activemq/broker/ProducerBrokerExchange.setConnectionContext:(Lorg/apache/activemq/broker/ConnectionContext;)V
     143: aload         6
     145: new           #105                // class org/apache/activemq/state/ProducerState
     148: dup
     149: new           #106                // class org/apache/activemq/command/ProducerInfo
     152: dup
     153: invokespecial #107                // Method org/apache/activemq/command/ProducerInfo."<init>":()V
     156: invokespecial #108                // Method org/apache/activemq/state/ProducerState."<init>":(Lorg/apache/activemq/command/ProducerInfo;)V
     159: invokevirtual #109                // Method org/apache/activemq/broker/ProducerBrokerExchange.setProducerState:(Lorg/apache/activemq/state/ProducerState;)V
     162: aload_1
     163: invokevirtual #110                // Method org/apache/activemq/broker/ConnectionContext.getBroker:()Lorg/apache/activemq/broker/Broker;
     166: aload         6
     168: aload_3
     169: invokeinterface #111,  3          // InterfaceMethod org/apache/activemq/broker/Broker.send:(Lorg/apache/activemq/broker/ProducerBrokerExchange;Lorg/apache/activemq/command/Message;)V
     174: aload_1
     175: iload         5
     177: invokevirtual #100                // Method org/apache/activemq/broker/ConnectionContext.setProducerFlowControl:(Z)V
     180: goto          194
     183: astore        7
     185: aload_1
     186: iload         5
     188: invokevirtual #100                // Method org/apache/activemq/broker/ConnectionContext.setProducerFlowControl:(Z)V
     191: aload         7
     193: athrow
     194: return
    Exception table:
       from    to  target type
         117   174   183   any
         183   185   183   any

  public void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification) throws java.lang.Exception;
    Code:
       0: return

  public final int getStoreUsageHighWaterMark();
    Code:
       0: aload_0
       1: getfield      #24                 // Field storeUsageHighWaterMark:I
       4: ireturn

  public void setStoreUsageHighWaterMark(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #24                 // Field storeUsageHighWaterMark:I
       5: return

  protected final void waitForSpace(org.apache.activemq.broker.ConnectionContext, org.apache.activemq.broker.ProducerBrokerExchange, org.apache.activemq.usage.Usage<?>, java.lang.String) throws java.io.IOException, java.lang.InterruptedException, javax.jms.ResourceAllocationException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: bipush        100
       6: aload         4
       8: invokevirtual #112                // Method waitForSpace:(Lorg/apache/activemq/broker/ConnectionContext;Lorg/apache/activemq/broker/ProducerBrokerExchange;Lorg/apache/activemq/usage/Usage;ILjava/lang/String;)V
      11: return

  protected final void waitForSpace(org.apache.activemq.broker.ConnectionContext, org.apache.activemq.broker.ProducerBrokerExchange, org.apache.activemq.usage.Usage<?>, int, java.lang.String) throws java.io.IOException, java.lang.InterruptedException, javax.jms.ResourceAllocationException;
    Code:
       0: aload_1
       1: invokevirtual #113                // Method org/apache/activemq/broker/ConnectionContext.isNetworkConnection:()Z
       4: ifne          41
       7: aload_0
       8: getfield      #45                 // Field systemUsage:Lorg/apache/activemq/usage/SystemUsage;
      11: invokevirtual #114                // Method org/apache/activemq/usage/SystemUsage.isSendFailIfNoSpace:()Z
      14: ifeq          41
      17: aload_0
      18: invokevirtual #115                // Method getLog:()Lorg/slf4j/Logger;
      21: ldc           #116                // String sendFailIfNoSpace, forcing exception on send, usage: {}: {}
      23: aload_3
      24: aload         5
      26: invokeinterface #117,  4          // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      31: new           #118                // class javax/jms/ResourceAllocationException
      34: dup
      35: aload         5
      37: invokespecial #119                // Method javax/jms/ResourceAllocationException."<init>":(Ljava/lang/String;)V
      40: athrow
      41: aload_1
      42: invokevirtual #113                // Method org/apache/activemq/broker/ConnectionContext.isNetworkConnection:()Z
      45: ifne          100
      48: aload_0
      49: getfield      #45                 // Field systemUsage:Lorg/apache/activemq/usage/SystemUsage;
      52: invokevirtual #120                // Method org/apache/activemq/usage/SystemUsage.getSendFailIfNoSpaceAfterTimeout:()J
      55: lconst_0
      56: lcmp
      57: ifeq          100
      60: aload_3
      61: aload_0
      62: getfield      #45                 // Field systemUsage:Lorg/apache/activemq/usage/SystemUsage;
      65: invokevirtual #120                // Method org/apache/activemq/usage/SystemUsage.getSendFailIfNoSpaceAfterTimeout:()J
      68: iload         4
      70: invokevirtual #121                // Method org/apache/activemq/usage/Usage.waitForSpace:(JI)Z
      73: ifne          260
      76: aload_0
      77: invokevirtual #115                // Method getLog:()Lorg/slf4j/Logger;
      80: ldc           #122                // String sendFailIfNoSpaceAfterTimeout expired, forcing exception on send, usage: {}: {}
      82: aload_3
      83: aload         5
      85: invokeinterface #117,  4          // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      90: new           #118                // class javax/jms/ResourceAllocationException
      93: dup
      94: aload         5
      96: invokespecial #119                // Method javax/jms/ResourceAllocationException."<init>":(Ljava/lang/String;)V
      99: athrow
     100: invokestatic  #123                // Method java/lang/System.currentTimeMillis:()J
     103: lstore        6
     105: lload         6
     107: lstore        8
     109: aload_2
     110: iconst_1
     111: invokevirtual #124                // Method org/apache/activemq/broker/ProducerBrokerExchange.blockingOnFlowControl:(Z)V
     114: aload_0
     115: getfield      #18                 // Field destinationStatistics:Lorg/apache/activemq/broker/region/DestinationStatistics;
     118: invokevirtual #125                // Method org/apache/activemq/broker/region/DestinationStatistics.getBlockedSends:()Lorg/apache/activemq/management/CountStatisticImpl;
     121: invokevirtual #55                 // Method org/apache/activemq/management/CountStatisticImpl.increment:()V
     124: aload_3
     125: ldc2_w        #126                // long 1000l
     128: iload         4
     130: invokevirtual #121                // Method org/apache/activemq/usage/Usage.waitForSpace:(JI)Z
     133: ifne          224
     136: aload_1
     137: invokevirtual #128                // Method org/apache/activemq/broker/ConnectionContext.getStopping:()Ljava/util/concurrent/atomic/AtomicBoolean;
     140: invokevirtual #129                // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
     143: ifeq          156
     146: new           #130                // class java/io/IOException
     149: dup
     150: ldc           #131                // String Connection closed, send aborted.
     152: invokespecial #132                // Method java/io/IOException."<init>":(Ljava/lang/String;)V
     155: athrow
     156: invokestatic  #123                // Method java/lang/System.currentTimeMillis:()J
     159: lstore        10
     161: lload         10
     163: lload         8
     165: lcmp
     166: iflt          221
     169: aload_0
     170: invokevirtual #115                // Method getLog:()Lorg/slf4j/Logger;
     173: ldc           #133                // String {}: {} (blocking for: {}s)
     175: iconst_3
     176: anewarray     #134                // class java/lang/Object
     179: dup
     180: iconst_0
     181: aload_3
     182: aastore
     183: dup
     184: iconst_1
     185: aload         5
     187: aastore
     188: dup
     189: iconst_2
     190: new           #135                // class java/lang/Long
     193: dup
     194: lload         10
     196: lload         6
     198: lsub
     199: ldc2_w        #126                // long 1000l
     202: ldiv
     203: invokespecial #136                // Method java/lang/Long."<init>":(J)V
     206: aastore
     207: invokeinterface #137,  3          // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;[Ljava/lang/Object;)V
     212: lload         10
     214: aload_0
     215: getfield      #7                  // Field blockedProducerWarningInterval:J
     218: ladd
     219: lstore        8
     221: goto          124
     224: invokestatic  #123                // Method java/lang/System.currentTimeMillis:()J
     227: lstore        10
     229: lload         10
     231: lload         6
     233: lsub
     234: lstore        12
     236: aload_0
     237: getfield      #18                 // Field destinationStatistics:Lorg/apache/activemq/broker/region/DestinationStatistics;
     240: invokevirtual #138                // Method org/apache/activemq/broker/region/DestinationStatistics.getBlockedTime:()Lorg/apache/activemq/management/TimeStatisticImpl;
     243: lload         12
     245: invokevirtual #139                // Method org/apache/activemq/management/TimeStatisticImpl.addTime:(J)V
     248: aload_2
     249: aload_0
     250: lload         12
     252: invokevirtual #140                // Method org/apache/activemq/broker/ProducerBrokerExchange.incrementTimeBlocked:(Lorg/apache/activemq/broker/region/Destination;J)V
     255: aload_2
     256: iconst_0
     257: invokevirtual #124                // Method org/apache/activemq/broker/ProducerBrokerExchange.blockingOnFlowControl:(Z)V
     260: return

  protected abstract org.slf4j.Logger getLog();

  public void setSlowConsumerStrategy(org.apache.activemq.broker.region.policy.SlowConsumerStrategy);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #77                 // Field slowConsumerStrategy:Lorg/apache/activemq/broker/region/policy/SlowConsumerStrategy;
       5: return

  public org.apache.activemq.broker.region.policy.SlowConsumerStrategy getSlowConsumerStrategy();
    Code:
       0: aload_0
       1: getfield      #77                 // Field slowConsumerStrategy:Lorg/apache/activemq/broker/region/policy/SlowConsumerStrategy;
       4: areturn

  public boolean isPrioritizedMessages();
    Code:
       0: aload_0
       1: getfield      #141                // Field prioritizedMessages:Z
       4: ireturn

  public void setPrioritizedMessages(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #141                // Field prioritizedMessages:Z
       5: aload_0
       6: getfield      #36                 // Field store:Lorg/apache/activemq/store/MessageStore;
       9: ifnull        22
      12: aload_0
      13: getfield      #36                 // Field store:Lorg/apache/activemq/store/MessageStore;
      16: iload_1
      17: invokeinterface #142,  2          // InterfaceMethod org/apache/activemq/store/MessageStore.setPrioritizedMessages:(Z)V
      22: return

  public long getInactiveTimoutBeforeGC();
    Code:
       0: aload_0
       1: getfield      #27                 // Field inactiveTimoutBeforeGC:J
       4: lreturn

  public void setInactiveTimoutBeforeGC(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #27                 // Field inactiveTimoutBeforeGC:J
       5: return

  public boolean isGcIfInactive();
    Code:
       0: aload_0
       1: getfield      #143                // Field gcIfInactive:Z
       4: ireturn

  public void setGcIfInactive(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #143                // Field gcIfInactive:Z
       5: return

  public void setGcWithNetworkConsumers(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #144                // Field gcWithNetworkConsumers:Z
       5: return

  public boolean isGcWithNetworkConsumers();
    Code:
       0: aload_0
       1: getfield      #144                // Field gcWithNetworkConsumers:Z
       4: ireturn

  public void markForGC(long);
    Code:
       0: aload_0
       1: invokevirtual #145                // Method isGcIfInactive:()Z
       4: ifeq          52
       7: aload_0
       8: getfield      #28                 // Field lastActiveTime:J
      11: lconst_0
      12: lcmp
      13: ifne          52
      16: aload_0
      17: invokevirtual #146                // Method isActive:()Z
      20: ifne          52
      23: aload_0
      24: getfield      #18                 // Field destinationStatistics:Lorg/apache/activemq/broker/region/DestinationStatistics;
      27: getfield      #147                // Field org/apache/activemq/broker/region/DestinationStatistics.messages:Lorg/apache/activemq/management/CountStatisticImpl;
      30: invokevirtual #60                 // Method org/apache/activemq/management/CountStatisticImpl.getCount:()J
      33: lconst_0
      34: lcmp
      35: ifne          52
      38: aload_0
      39: invokevirtual #148                // Method getInactiveTimoutBeforeGC:()J
      42: lconst_0
      43: lcmp
      44: ifle          52
      47: aload_0
      48: lload_1
      49: putfield      #28                 // Field lastActiveTime:J
      52: return

  public boolean canGC();
    Code:
       0: iconst_0
       1: istore_1
       2: aload_0
       3: invokevirtual #145                // Method isGcIfInactive:()Z
       6: ifeq          36
       9: aload_0
      10: getfield      #28                 // Field lastActiveTime:J
      13: lconst_0
      14: lcmp
      15: ifeq          36
      18: invokestatic  #123                // Method java/lang/System.currentTimeMillis:()J
      21: aload_0
      22: getfield      #28                 // Field lastActiveTime:J
      25: lsub
      26: aload_0
      27: invokevirtual #148                // Method getInactiveTimoutBeforeGC:()J
      30: lcmp
      31: iflt          36
      34: iconst_1
      35: istore_1
      36: iload_1
      37: ireturn

  public void setReduceMemoryFootprint(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #29                 // Field reduceMemoryFootprint:Z
       5: return

  protected boolean isReduceMemoryFootprint();
    Code:
       0: aload_0
       1: getfield      #29                 // Field reduceMemoryFootprint:Z
       4: ireturn

  public boolean isDoOptimzeMessageStorage();
    Code:
       0: aload_0
       1: getfield      #31                 // Field doOptimzeMessageStorage:Z
       4: ireturn

  public void setDoOptimzeMessageStorage(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #31                 // Field doOptimzeMessageStorage:Z
       5: return

  public int getOptimizeMessageStoreInFlightLimit();
    Code:
       0: aload_0
       1: getfield      #32                 // Field optimizeMessageStoreInFlightLimit:I
       4: ireturn

  public void setOptimizeMessageStoreInFlightLimit(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #32                 // Field optimizeMessageStoreInFlightLimit:I
       5: return

  public abstract java.util.List<org.apache.activemq.broker.region.Subscription> getConsumers();

  protected boolean hasRegularConsumers(java.util.List<org.apache.activemq.broker.region.Subscription>);
    Code:
       0: iconst_0
       1: istore_2
       2: aload_1
       3: invokeinterface #149,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
       8: astore_3
       9: aload_3
      10: invokeinterface #150,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      15: ifeq          50
      18: aload_3
      19: invokeinterface #151,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      24: checkcast     #152                // class org/apache/activemq/broker/region/Subscription
      27: astore        4
      29: aload         4
      31: invokeinterface #153,  1          // InterfaceMethod org/apache/activemq/broker/region/Subscription.getConsumerInfo:()Lorg/apache/activemq/command/ConsumerInfo;
      36: invokevirtual #154                // Method org/apache/activemq/command/ConsumerInfo.isNetworkSubscription:()Z
      39: ifne          47
      42: iconst_1
      43: istore_2
      44: goto          50
      47: goto          9
      50: iload_2
      51: ireturn

  public org.apache.activemq.broker.ConnectionContext createConnectionContext();
    Code:
       0: new           #155                // class org/apache/activemq/broker/ConnectionContext
       3: dup
       4: new           #156                // class org/apache/activemq/filter/NonCachedMessageEvaluationContext
       7: dup
       8: invokespecial #157                // Method org/apache/activemq/filter/NonCachedMessageEvaluationContext."<init>":()V
      11: invokespecial #158                // Method org/apache/activemq/broker/ConnectionContext."<init>":(Lorg/apache/activemq/filter/MessageEvaluationContext;)V
      14: astore_1
      15: aload_1
      16: aload_0
      17: getfield      #35                 // Field broker:Lorg/apache/activemq/broker/Broker;
      20: invokevirtual #159                // Method org/apache/activemq/broker/ConnectionContext.setBroker:(Lorg/apache/activemq/broker/Broker;)V
      23: aload_1
      24: invokevirtual #160                // Method org/apache/activemq/broker/ConnectionContext.getMessageEvaluationContext:()Lorg/apache/activemq/filter/MessageEvaluationContext;
      27: aload_0
      28: invokevirtual #58                 // Method getActiveMQDestination:()Lorg/apache/activemq/command/ActiveMQDestination;
      31: invokevirtual #161                // Method org/apache/activemq/filter/MessageEvaluationContext.setDestination:(Lorg/apache/activemq/command/ActiveMQDestination;)V
      34: aload_1
      35: getstatic     #162                // Field org/apache/activemq/security/SecurityContext.BROKER_SECURITY_CONTEXT:Lorg/apache/activemq/security/SecurityContext;
      38: invokevirtual #163                // Method org/apache/activemq/broker/ConnectionContext.setSecurityContext:(Lorg/apache/activemq/security/SecurityContext;)V
      41: aload_1
      42: areturn

  protected org.apache.activemq.command.MessageAck convertToNonRangedAck(org.apache.activemq.command.MessageAck, org.apache.activemq.broker.region.MessageReference);
    Code:
       0: aload_1
       1: invokevirtual #164                // Method org/apache/activemq/command/MessageAck.getMessageCount:()I
       4: ifle          27
       7: new           #165                // class org/apache/activemq/command/MessageAck
      10: dup
      11: invokespecial #166                // Method org/apache/activemq/command/MessageAck."<init>":()V
      14: astore_3
      15: aload_1
      16: aload_3
      17: invokevirtual #167                // Method org/apache/activemq/command/MessageAck.copy:(Lorg/apache/activemq/command/MessageAck;)V
      20: aload_3
      21: astore_1
      22: aload_1
      23: iconst_1
      24: invokevirtual #168                // Method org/apache/activemq/command/MessageAck.setMessageCount:(I)V
      27: aload_1
      28: aload_2
      29: invokeinterface #169,  1          // InterfaceMethod org/apache/activemq/broker/region/MessageReference.getMessageId:()Lorg/apache/activemq/command/MessageId;
      34: invokevirtual #170                // Method org/apache/activemq/command/MessageAck.setFirstMessageId:(Lorg/apache/activemq/command/MessageId;)V
      37: aload_1
      38: aload_2
      39: invokeinterface #169,  1          // InterfaceMethod org/apache/activemq/broker/region/MessageReference.getMessageId:()Lorg/apache/activemq/command/MessageId;
      44: invokevirtual #171                // Method org/apache/activemq/command/MessageAck.setLastMessageId:(Lorg/apache/activemq/command/MessageId;)V
      47: aload_1
      48: areturn

  public boolean isDLQ();
    Code:
       0: aload_0
       1: invokevirtual #172                // Method getDeadLetterStrategy:()Lorg/apache/activemq/broker/region/policy/DeadLetterStrategy;
       4: aload_0
       5: invokevirtual #58                 // Method getActiveMQDestination:()Lorg/apache/activemq/command/ActiveMQDestination;
       8: invokeinterface #173,  2          // InterfaceMethod org/apache/activemq/broker/region/policy/DeadLetterStrategy.isDLQ:(Lorg/apache/activemq/command/ActiveMQDestination;)Z
      13: ireturn

  public void duplicateFromStore(org.apache.activemq.command.Message, org.apache.activemq.broker.region.Subscription);
    Code:
       0: aload_0
       1: invokevirtual #174                // Method createConnectionContext:()Lorg/apache/activemq/broker/ConnectionContext;
       4: astore_3
       5: aload_0
       6: invokevirtual #115                // Method getLog:()Lorg/slf4j/Logger;
       9: ldc           #175                // String duplicate message from store {}, redirecting for dlq processing
      11: aload_1
      12: invokevirtual #176                // Method org/apache/activemq/command/Message.getMessageId:()Lorg/apache/activemq/command/MessageId;
      15: invokeinterface #177,  3          // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;)V
      20: new           #178                // class java/lang/Throwable
      23: dup
      24: new           #179                // class java/lang/StringBuilder
      27: dup
      28: invokespecial #180                // Method java/lang/StringBuilder."<init>":()V
      31: ldc           #181                // String duplicate from store for
      33: invokevirtual #182                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      36: aload_0
      37: getfield      #37                 // Field destination:Lorg/apache/activemq/command/ActiveMQDestination;
      40: invokevirtual #183                // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      43: invokevirtual #184                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      46: invokespecial #185                // Method java/lang/Throwable."<init>":(Ljava/lang/String;)V
      49: astore        4
      51: aload_1
      52: aload_0
      53: invokevirtual #186                // Method org/apache/activemq/command/Message.setRegionDestination:(Lorg/apache/activemq/command/Message$MessageDestination;)V
      56: aload_0
      57: getfield      #35                 // Field broker:Lorg/apache/activemq/broker/Broker;
      60: invokeinterface #187,  1          // InterfaceMethod org/apache/activemq/broker/Broker.getRoot:()Lorg/apache/activemq/broker/Broker;
      65: aload_3
      66: aload_1
      67: aconst_null
      68: aload         4
      70: invokeinterface #188,  5          // InterfaceMethod org/apache/activemq/broker/Broker.sendToDeadLetterQueue:(Lorg/apache/activemq/broker/ConnectionContext;Lorg/apache/activemq/broker/region/MessageReference;Lorg/apache/activemq/broker/region/Subscription;Ljava/lang/Throwable;)Z
      75: pop
      76: new           #165                // class org/apache/activemq/command/MessageAck
      79: dup
      80: aload_1
      81: iconst_1
      82: iconst_1
      83: invokespecial #189                // Method org/apache/activemq/command/MessageAck."<init>":(Lorg/apache/activemq/command/Message;BI)V
      86: astore        5
      88: aload         5
      90: aload         4
      92: invokevirtual #190                // Method org/apache/activemq/command/MessageAck.setPoisonCause:(Ljava/lang/Throwable;)V
      95: aload_0
      96: aload_3
      97: aload_2
      98: aload         5
     100: aload_1
     101: invokevirtual #191                // Method acknowledge:(Lorg/apache/activemq/broker/ConnectionContext;Lorg/apache/activemq/broker/region/Subscription;Lorg/apache/activemq/command/MessageAck;Lorg/apache/activemq/broker/region/MessageReference;)V
     104: goto          143
     107: astore        6
     109: aload_0
     110: invokevirtual #115                // Method getLog:()Lorg/slf4j/Logger;
     113: ldc           #192                // String Failed to acknowledge duplicate message {} from {} with {}
     115: iconst_3
     116: anewarray     #134                // class java/lang/Object
     119: dup
     120: iconst_0
     121: aload_1
     122: invokevirtual #176                // Method org/apache/activemq/command/Message.getMessageId:()Lorg/apache/activemq/command/MessageId;
     125: aastore
     126: dup
     127: iconst_1
     128: aload_0
     129: getfield      #37                 // Field destination:Lorg/apache/activemq/command/ActiveMQDestination;
     132: aastore
     133: dup
     134: iconst_2
     135: aload         5
     137: aastore
     138: invokeinterface #193,  3          // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;[Ljava/lang/Object;)V
     143: return
    Exception table:
       from    to  target type
          95   104   107   Class java/io/IOException

  public void setPersistJMSRedelivered(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #194                // Field persistJMSRedelivered:Z
       5: return

  public boolean isPersistJMSRedelivered();
    Code:
       0: aload_0
       1: getfield      #194                // Field persistJMSRedelivered:Z
       4: ireturn
}
