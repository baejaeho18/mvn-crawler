Compiled from "ManagementContext.java"
public class org.apache.activemq.broker.jmx.ManagementContext implements org.apache.activemq.Service {
  public static final java.lang.String DEFAULT_DOMAIN;

  private static final org.slf4j.Logger LOG;

  private javax.management.MBeanServer beanServer;

  private java.lang.String jmxDomainName;

  private boolean useMBeanServer;

  private boolean createMBeanServer;

  private boolean locallyCreateMBeanServer;

  private boolean createConnector;

  private boolean findTigerMbeanServer;

  private java.lang.String connectorHost;

  private int connectorPort;

  private java.util.Map<java.lang.String, ?> environment;

  private int rmiServerPort;

  private java.lang.String connectorPath;

  private final java.util.concurrent.atomic.AtomicBoolean started;

  private final java.util.concurrent.atomic.AtomicBoolean connectorStarting;

  private javax.management.remote.JMXConnectorServer connectorServer;

  private javax.management.ObjectName namingServiceObjectName;

  private java.rmi.registry.Registry registry;

  private final java.util.Map<javax.management.ObjectName, javax.management.ObjectName> registeredMBeanNames;

  private boolean allowRemoteAddressInMBeanNames;

  private java.lang.String brokerName;

  public org.apache.activemq.broker.jmx.ManagementContext();
    Code:
       0: aload_0
       1: aconst_null
       2: invokespecial #6                  // Method "<init>":(Ljavax/management/MBeanServer;)V
       5: return

  public org.apache.activemq.broker.jmx.ManagementContext(javax.management.MBeanServer);
    Code:
       0: aload_0
       1: invokespecial #7                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: ldc           #8                  // String org.apache.activemq
       7: putfield      #9                  // Field jmxDomainName:Ljava/lang/String;
      10: aload_0
      11: iconst_1
      12: putfield      #10                 // Field useMBeanServer:Z
      15: aload_0
      16: iconst_1
      17: putfield      #11                 // Field createMBeanServer:Z
      20: aload_0
      21: iconst_1
      22: putfield      #12                 // Field createConnector:Z
      25: aload_0
      26: iconst_1
      27: putfield      #13                 // Field findTigerMbeanServer:Z
      30: aload_0
      31: ldc           #14                 // String localhost
      33: putfield      #15                 // Field connectorHost:Ljava/lang/String;
      36: aload_0
      37: sipush        1099
      40: putfield      #16                 // Field connectorPort:I
      43: aload_0
      44: ldc           #17                 // String /jmxrmi
      46: putfield      #18                 // Field connectorPath:Ljava/lang/String;
      49: aload_0
      50: new           #19                 // class java/util/concurrent/atomic/AtomicBoolean
      53: dup
      54: iconst_0
      55: invokespecial #20                 // Method java/util/concurrent/atomic/AtomicBoolean."<init>":(Z)V
      58: putfield      #3                  // Field started:Ljava/util/concurrent/atomic/AtomicBoolean;
      61: aload_0
      62: new           #19                 // class java/util/concurrent/atomic/AtomicBoolean
      65: dup
      66: iconst_0
      67: invokespecial #20                 // Method java/util/concurrent/atomic/AtomicBoolean."<init>":(Z)V
      70: putfield      #1                  // Field connectorStarting:Ljava/util/concurrent/atomic/AtomicBoolean;
      73: aload_0
      74: new           #21                 // class java/util/concurrent/ConcurrentHashMap
      77: dup
      78: invokespecial #22                 // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      81: putfield      #23                 // Field registeredMBeanNames:Ljava/util/Map;
      84: aload_0
      85: iconst_1
      86: putfield      #24                 // Field allowRemoteAddressInMBeanNames:Z
      89: aload_0
      90: aload_1
      91: putfield      #25                 // Field beanServer:Ljavax/management/MBeanServer;
      94: return

  public void start() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field started:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: iconst_0
       5: iconst_1
       6: invokevirtual #26                 // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z
       9: ifeq          124
      12: aload_0
      13: getfield      #15                 // Field connectorHost:Ljava/lang/String;
      16: ifnonnull     25
      19: aload_0
      20: ldc           #14                 // String localhost
      22: putfield      #15                 // Field connectorHost:Ljava/lang/String;
      25: aload_0
      26: invokevirtual #27                 // Method getMBeanServer:()Ljavax/management/MBeanServer;
      29: pop
      30: aload_0
      31: getfield      #4                  // Field connectorServer:Ljavax/management/remote/JMXConnectorServer;
      34: ifnull        124
      37: aload_0
      38: invokevirtual #27                 // Method getMBeanServer:()Ljavax/management/MBeanServer;
      41: aload_0
      42: getfield      #28                 // Field namingServiceObjectName:Ljavax/management/ObjectName;
      45: invokeinterface #29,  2           // InterfaceMethod javax/management/MBeanServer.isRegistered:(Ljavax/management/ObjectName;)Z
      50: ifeq          85
      53: getstatic     #2                  // Field LOG:Lorg/slf4j/Logger;
      56: ldc           #30                 // String Invoking start on mbean: {}
      58: aload_0
      59: getfield      #28                 // Field namingServiceObjectName:Ljavax/management/ObjectName;
      62: invokeinterface #31,  3           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Object;)V
      67: aload_0
      68: invokevirtual #27                 // Method getMBeanServer:()Ljavax/management/MBeanServer;
      71: aload_0
      72: getfield      #28                 // Field namingServiceObjectName:Ljavax/management/ObjectName;
      75: ldc           #32                 // String start
      77: aconst_null
      78: aconst_null
      79: invokeinterface #33,  5           // InterfaceMethod javax/management/MBeanServer.invoke:(Ljavax/management/ObjectName;Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/String;)Ljava/lang/Object;
      84: pop
      85: goto          104
      88: astore_1
      89: getstatic     #2                  // Field LOG:Lorg/slf4j/Logger;
      92: ldc           #35                 // String Error invoking start on MBean {}. This exception is ignored.
      94: aload_0
      95: getfield      #28                 // Field namingServiceObjectName:Ljavax/management/ObjectName;
      98: aload_1
      99: invokeinterface #36,  4           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
     104: new           #37                 // class org/apache/activemq/broker/jmx/ManagementContext$1
     107: dup
     108: aload_0
     109: ldc           #38                 // String JMX connector
     111: invokespecial #39                 // Method org/apache/activemq/broker/jmx/ManagementContext$1."<init>":(Lorg/apache/activemq/broker/jmx/ManagementContext;Ljava/lang/String;)V
     114: astore_1
     115: aload_1
     116: iconst_1
     117: invokevirtual #40                 // Method java/lang/Thread.setDaemon:(Z)V
     120: aload_1
     121: invokevirtual #41                 // Method java/lang/Thread.start:()V
     124: return
    Exception table:
       from    to  target type
          37    85    88   Class java/lang/Throwable

  public void stop() throws java.lang.Exception;
    Code:
       0: aload_0
       1: getfield      #3                  // Field started:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: iconst_1
       5: iconst_0
       6: invokevirtual #26                 // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z
       9: ifeq          353
      12: aload_0
      13: invokevirtual #27                 // Method getMBeanServer:()Ljavax/management/MBeanServer;
      16: astore_1
      17: aload_1
      18: ifnull        108
      21: aload_0
      22: getfield      #23                 // Field registeredMBeanNames:Ljava/util/Map;
      25: invokeinterface #42,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      30: invokeinterface #43,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      35: astore_2
      36: aload_2
      37: invokeinterface #44,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      42: ifeq          108
      45: aload_2
      46: invokeinterface #45,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      51: checkcast     #46                 // class java/util/Map$Entry
      54: astore_3
      55: aload_3
      56: invokeinterface #47,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      61: checkcast     #48                 // class javax/management/ObjectName
      64: astore        4
      66: aload         4
      68: ifnull        105
      71: aload_0
      72: getfield      #25                 // Field beanServer:Ljavax/management/MBeanServer;
      75: aload         4
      77: invokeinterface #29,  2           // InterfaceMethod javax/management/MBeanServer.isRegistered:(Ljavax/management/ObjectName;)Z
      82: ifeq          105
      85: getstatic     #2                  // Field LOG:Lorg/slf4j/Logger;
      88: ldc           #49                 // String Unregistering MBean {}
      90: aload         4
      92: invokeinterface #31,  3           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Object;)V
      97: aload_1
      98: aload         4
     100: invokeinterface #50,  2           // InterfaceMethod javax/management/MBeanServer.unregisterMBean:(Ljavax/management/ObjectName;)V
     105: goto          36
     108: aload_0
     109: getfield      #23                 // Field registeredMBeanNames:Ljava/util/Map;
     112: invokeinterface #51,  1           // InterfaceMethod java/util/Map.clear:()V
     117: aload_0
     118: getfield      #4                  // Field connectorServer:Ljavax/management/remote/JMXConnectorServer;
     121: astore_2
     122: aload_0
     123: aconst_null
     124: putfield      #4                  // Field connectorServer:Ljavax/management/remote/JMXConnectorServer;
     127: aload_2
     128: ifnull        282
     131: aload_0
     132: getfield      #1                  // Field connectorStarting:Ljava/util/concurrent/atomic/AtomicBoolean;
     135: invokevirtual #52                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
     138: ifne          155
     141: getstatic     #2                  // Field LOG:Lorg/slf4j/Logger;
     144: ldc           #53                 // String Stopping jmx connector
     146: invokeinterface #54,  2           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;)V
     151: aload_2
     152: invokevirtual #55                 // Method javax/management/remote/JMXConnectorServer.stop:()V
     155: goto          173
     158: astore_3
     159: getstatic     #2                  // Field LOG:Lorg/slf4j/Logger;
     162: ldc           #57                 // String Failed to stop jmx connector: {}
     164: aload_3
     165: invokevirtual #58                 // Method java/io/IOException.getMessage:()Ljava/lang/String;
     168: invokeinterface #59,  3           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;)V
     173: aload_0
     174: getfield      #28                 // Field namingServiceObjectName:Ljavax/management/ObjectName;
     177: ifnull        255
     180: aload_0
     181: invokevirtual #27                 // Method getMBeanServer:()Ljavax/management/MBeanServer;
     184: aload_0
     185: getfield      #28                 // Field namingServiceObjectName:Ljavax/management/ObjectName;
     188: invokeinterface #29,  2           // InterfaceMethod javax/management/MBeanServer.isRegistered:(Ljavax/management/ObjectName;)Z
     193: ifeq          255
     196: getstatic     #2                  // Field LOG:Lorg/slf4j/Logger;
     199: ldc           #60                 // String Stopping MBean {}
     201: aload_0
     202: getfield      #28                 // Field namingServiceObjectName:Ljavax/management/ObjectName;
     205: invokeinterface #31,  3           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Object;)V
     210: aload_0
     211: invokevirtual #27                 // Method getMBeanServer:()Ljavax/management/MBeanServer;
     214: aload_0
     215: getfield      #28                 // Field namingServiceObjectName:Ljavax/management/ObjectName;
     218: ldc           #61                 // String stop
     220: aconst_null
     221: aconst_null
     222: invokeinterface #33,  5           // InterfaceMethod javax/management/MBeanServer.invoke:(Ljavax/management/ObjectName;Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/String;)Ljava/lang/Object;
     227: pop
     228: getstatic     #2                  // Field LOG:Lorg/slf4j/Logger;
     231: ldc           #49                 // String Unregistering MBean {}
     233: aload_0
     234: getfield      #28                 // Field namingServiceObjectName:Ljavax/management/ObjectName;
     237: invokeinterface #31,  3           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Object;)V
     242: aload_0
     243: invokevirtual #27                 // Method getMBeanServer:()Ljavax/management/MBeanServer;
     246: aload_0
     247: getfield      #28                 // Field namingServiceObjectName:Ljavax/management/ObjectName;
     250: invokeinterface #50,  2           // InterfaceMethod javax/management/MBeanServer.unregisterMBean:(Ljavax/management/ObjectName;)V
     255: goto          277
     258: astore_3
     259: getstatic     #2                  // Field LOG:Lorg/slf4j/Logger;
     262: ldc           #62                 // String Error stopping and unregsitering MBean {} due to {}
     264: aload_0
     265: getfield      #28                 // Field namingServiceObjectName:Ljavax/management/ObjectName;
     268: aload_3
     269: invokevirtual #63                 // Method java/lang/Throwable.getMessage:()Ljava/lang/String;
     272: invokeinterface #64,  4           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
     277: aload_0
     278: aconst_null
     279: putfield      #28                 // Field namingServiceObjectName:Ljavax/management/ObjectName;
     282: aload_0
     283: getfield      #65                 // Field locallyCreateMBeanServer:Z
     286: ifeq          348
     289: aload_0
     290: getfield      #25                 // Field beanServer:Ljavax/management/MBeanServer;
     293: ifnull        348
     296: aconst_null
     297: invokestatic  #66                 // Method javax/management/MBeanServerFactory.findMBeanServer:(Ljava/lang/String;)Ljava/util/ArrayList;
     300: astore_3
     301: aload_3
     302: ifnull        348
     305: aload_3
     306: invokeinterface #67,  1           // InterfaceMethod java/util/List.isEmpty:()Z
     311: ifne          348
     314: aload_3
     315: aload_0
     316: getfield      #25                 // Field beanServer:Ljavax/management/MBeanServer;
     319: invokeinterface #68,  2           // InterfaceMethod java/util/List.contains:(Ljava/lang/Object;)Z
     324: ifeq          348
     327: getstatic     #2                  // Field LOG:Lorg/slf4j/Logger;
     330: ldc           #69                 // String Releasing MBeanServer {}
     332: aload_0
     333: getfield      #25                 // Field beanServer:Ljavax/management/MBeanServer;
     336: invokeinterface #31,  3           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Object;)V
     341: aload_0
     342: getfield      #25                 // Field beanServer:Ljavax/management/MBeanServer;
     345: invokestatic  #70                 // Method javax/management/MBeanServerFactory.releaseMBeanServer:(Ljavax/management/MBeanServer;)V
     348: aload_0
     349: aconst_null
     350: putfield      #25                 // Field beanServer:Ljavax/management/MBeanServer;
     353: aload_0
     354: getfield      #71                 // Field registry:Ljava/rmi/registry/Registry;
     357: ifnull        398
     360: aload_0
     361: getfield      #71                 // Field registry:Ljava/rmi/registry/Registry;
     364: iconst_1
     365: invokestatic  #72                 // Method java/rmi/server/UnicastRemoteObject.unexportObject:(Ljava/rmi/Remote;Z)Z
     368: pop
     369: getstatic     #2                  // Field LOG:Lorg/slf4j/Logger;
     372: ldc           #73                 // String Unexported JMX RMI Registry
     374: invokeinterface #54,  2           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;)V
     379: goto          393
     382: astore_1
     383: getstatic     #2                  // Field LOG:Lorg/slf4j/Logger;
     386: ldc           #75                 // String Error occurred while unexporting JMX RMI registry. This exception will be ignored.
     388: invokeinterface #54,  2           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;)V
     393: aload_0
     394: aconst_null
     395: putfield      #71                 // Field registry:Ljava/rmi/registry/Registry;
     398: return
    Exception table:
       from    to  target type
         131   155   158   Class java/io/IOException
         173   255   258   Class java/lang/Throwable
         360   379   382   Class java/rmi/NoSuchObjectException

  public java.lang.String getBrokerName();
    Code:
       0: aload_0
       1: getfield      #5                  // Field brokerName:Ljava/lang/String;
       4: areturn

  public void setBrokerName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #5                  // Field brokerName:Ljava/lang/String;
       5: return

  public java.lang.String getJmxDomainName();
    Code:
       0: aload_0
       1: getfield      #9                  // Field jmxDomainName:Ljava/lang/String;
       4: areturn

  public void setJmxDomainName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #9                  // Field jmxDomainName:Ljava/lang/String;
       5: return

  protected javax.management.MBeanServer getMBeanServer();
    Code:
       0: aload_0
       1: getfield      #25                 // Field beanServer:Ljavax/management/MBeanServer;
       4: ifnonnull     15
       7: aload_0
       8: aload_0
       9: invokevirtual #76                 // Method findMBeanServer:()Ljavax/management/MBeanServer;
      12: putfield      #25                 // Field beanServer:Ljavax/management/MBeanServer;
      15: aload_0
      16: getfield      #25                 // Field beanServer:Ljavax/management/MBeanServer;
      19: areturn

  public void setMBeanServer(javax.management.MBeanServer);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #25                 // Field beanServer:Ljavax/management/MBeanServer;
       5: return

  public boolean isUseMBeanServer();
    Code:
       0: aload_0
       1: getfield      #10                 // Field useMBeanServer:Z
       4: ireturn

  public void setUseMBeanServer(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #10                 // Field useMBeanServer:Z
       5: return

  public boolean isCreateMBeanServer();
    Code:
       0: aload_0
       1: getfield      #11                 // Field createMBeanServer:Z
       4: ireturn

  public void setCreateMBeanServer(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #11                 // Field createMBeanServer:Z
       5: return

  public boolean isFindTigerMbeanServer();
    Code:
       0: aload_0
       1: getfield      #13                 // Field findTigerMbeanServer:Z
       4: ireturn

  public boolean isConnectorStarted();
    Code:
       0: aload_0
       1: getfield      #1                  // Field connectorStarting:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: invokevirtual #52                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
       7: ifne          27
      10: aload_0
      11: getfield      #4                  // Field connectorServer:Ljavax/management/remote/JMXConnectorServer;
      14: ifnull        31
      17: aload_0
      18: getfield      #4                  // Field connectorServer:Ljavax/management/remote/JMXConnectorServer;
      21: invokevirtual #77                 // Method javax/management/remote/JMXConnectorServer.isActive:()Z
      24: ifeq          31
      27: iconst_1
      28: goto          32
      31: iconst_0
      32: ireturn

  public void setFindTigerMbeanServer(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #13                 // Field findTigerMbeanServer:Z
       5: return

  public javax.management.ObjectName createCustomComponentMBeanName(java.lang.String, java.lang.String);
    Code:
       0: aconst_null
       1: astore_3
       2: new           #78                 // class java/lang/StringBuilder
       5: dup
       6: invokespecial #79                 // Method java/lang/StringBuilder."<init>":()V
       9: aload_0
      10: getfield      #9                  // Field jmxDomainName:Ljava/lang/String;
      13: invokevirtual #80                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      16: ldc           #81                 // String :
      18: invokevirtual #80                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      21: ldc           #82                 // String type=
      23: invokevirtual #80                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      26: aload_1
      27: invokestatic  #83                 // Method sanitizeString:(Ljava/lang/String;)Ljava/lang/String;
      30: invokevirtual #80                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      33: ldc           #84                 // String ,name=
      35: invokevirtual #80                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      38: aload_2
      39: invokestatic  #83                 // Method sanitizeString:(Ljava/lang/String;)Ljava/lang/String;
      42: invokevirtual #80                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      45: invokevirtual #85                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      48: astore        4
      50: new           #48                 // class javax/management/ObjectName
      53: dup
      54: aload         4
      56: invokespecial #86                 // Method javax/management/ObjectName."<init>":(Ljava/lang/String;)V
      59: astore_3
      60: goto          77
      63: astore        5
      65: getstatic     #2                  // Field LOG:Lorg/slf4j/Logger;
      68: ldc           #88                 // String Couldn\'t create ObjectName from: {}, {}
      70: aload_1
      71: aload_2
      72: invokeinterface #89,  4           // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      77: aload_3
      78: areturn
    Exception table:
       from    to  target type
          50    60    63   Class javax/management/MalformedObjectNameException

  private static java.lang.String sanitizeString(java.lang.String);
    Code:
       0: aconst_null
       1: astore_1
       2: aload_0
       3: ifnull        33
       6: aload_0
       7: bipush        58
       9: bipush        95
      11: invokevirtual #90                 // Method java/lang/String.replace:(CC)Ljava/lang/String;
      14: astore_1
      15: aload_1
      16: bipush        47
      18: bipush        95
      20: invokevirtual #90                 // Method java/lang/String.replace:(CC)Ljava/lang/String;
      23: astore_1
      24: aload_1
      25: bipush        92
      27: bipush        95
      29: invokevirtual #90                 // Method java/lang/String.replace:(CC)Ljava/lang/String;
      32: astore_1
      33: aload_1
      34: areturn

  public static javax.management.ObjectName getSystemObjectName(java.lang.String, java.lang.String, java.lang.Class<?>) throws javax.management.MalformedObjectNameException, java.lang.NullPointerException;
    Code:
       0: new           #78                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #79                 // Method java/lang/StringBuilder."<init>":()V
       7: aload_0
       8: invokevirtual #80                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      11: ldc           #81                 // String :
      13: invokevirtual #80                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      16: ldc           #82                 // String type=
      18: invokevirtual #80                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      21: aload_2
      22: invokevirtual #91                 // Method java/lang/Class.getName:()Ljava/lang/String;
      25: invokevirtual #80                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      28: ldc           #84                 // String ,name=
      30: invokevirtual #80                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      33: aload_1
      34: aload_2
      35: invokestatic  #92                 // Method getRelativeName:(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/String;
      38: invokevirtual #80                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      41: invokevirtual #85                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      44: astore_3
      45: new           #48                 // class javax/management/ObjectName
      48: dup
      49: aload_3
      50: invokespecial #86                 // Method javax/management/ObjectName."<init>":(Ljava/lang/String;)V
      53: areturn

  private static java.lang.String getRelativeName(java.lang.String, java.lang.Class<?>);
    Code:
       0: aload_1
       1: invokevirtual #91                 // Method java/lang/Class.getName:()Ljava/lang/String;
       4: astore_2
       5: aload_2
       6: ldc           #93                 // String .
       8: invokevirtual #94                 // Method java/lang/String.lastIndexOf:(Ljava/lang/String;)I
      11: istore_3
      12: iload_3
      13: iflt          34
      16: iload_3
      17: iconst_1
      18: iadd
      19: aload_2
      20: invokevirtual #95                 // Method java/lang/String.length:()I
      23: if_icmpge     34
      26: aload_2
      27: iload_3
      28: iconst_1
      29: iadd
      30: invokevirtual #96                 // Method java/lang/String.substring:(I)Ljava/lang/String;
      33: astore_2
      34: new           #78                 // class java/lang/StringBuilder
      37: dup
      38: invokespecial #79                 // Method java/lang/StringBuilder."<init>":()V
      41: aload_0
      42: invokevirtual #80                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      45: ldc           #93                 // String .
      47: invokevirtual #80                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      50: aload_2
      51: invokevirtual #80                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      54: invokevirtual #85                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      57: areturn

  public java.lang.Object newProxyInstance(javax.management.ObjectName, java.lang.Class<?>, boolean);
    Code:
       0: aload_0
       1: invokevirtual #27                 // Method getMBeanServer:()Ljavax/management/MBeanServer;
       4: aload_1
       5: aload_2
       6: iload_3
       7: invokestatic  #97                 // Method javax/management/MBeanServerInvocationHandler.newProxyInstance:(Ljavax/management/MBeanServerConnection;Ljavax/management/ObjectName;Ljava/lang/Class;Z)Ljava/lang/Object;
      10: areturn

  public java.lang.Object getAttribute(javax.management.ObjectName, java.lang.String) throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokevirtual #27                 // Method getMBeanServer:()Ljavax/management/MBeanServer;
       4: aload_1
       5: aload_2
       6: invokeinterface #98,  3           // InterfaceMethod javax/management/MBeanServer.getAttribute:(Ljavax/management/ObjectName;Ljava/lang/String;)Ljava/lang/Object;
      11: areturn

  public javax.management.ObjectInstance registerMBean(java.lang.Object, javax.management.ObjectName) throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokevirtual #27                 // Method getMBeanServer:()Ljavax/management/MBeanServer;
       4: aload_1
       5: aload_2
       6: invokeinterface #99,  3           // InterfaceMethod javax/management/MBeanServer.registerMBean:(Ljava/lang/Object;Ljavax/management/ObjectName;)Ljavax/management/ObjectInstance;
      11: astore_3
      12: aload_0
      13: getfield      #23                 // Field registeredMBeanNames:Ljava/util/Map;
      16: aload_2
      17: aload_3
      18: invokevirtual #100                // Method javax/management/ObjectInstance.getObjectName:()Ljavax/management/ObjectName;
      21: invokeinterface #101,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      26: pop
      27: aload_3
      28: areturn

  public java.util.Set<javax.management.ObjectName> queryNames(javax.management.ObjectName, javax.management.QueryExp) throws java.lang.Exception;
    Code:
       0: aload_1
       1: ifnull        34
       4: aload_0
       5: getfield      #23                 // Field registeredMBeanNames:Ljava/util/Map;
       8: aload_1
       9: invokeinterface #102,  2          // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      14: checkcast     #48                 // class javax/management/ObjectName
      17: astore_3
      18: aload_3
      19: ifnull        34
      22: aload_0
      23: invokevirtual #27                 // Method getMBeanServer:()Ljavax/management/MBeanServer;
      26: aload_3
      27: aload_2
      28: invokeinterface #103,  3          // InterfaceMethod javax/management/MBeanServer.queryNames:(Ljavax/management/ObjectName;Ljavax/management/QueryExp;)Ljava/util/Set;
      33: areturn
      34: aload_0
      35: invokevirtual #27                 // Method getMBeanServer:()Ljavax/management/MBeanServer;
      38: aload_1
      39: aload_2
      40: invokeinterface #103,  3          // InterfaceMethod javax/management/MBeanServer.queryNames:(Ljavax/management/ObjectName;Ljavax/management/QueryExp;)Ljava/util/Set;
      45: areturn

  public javax.management.ObjectInstance getObjectInstance(javax.management.ObjectName) throws javax.management.InstanceNotFoundException;
    Code:
       0: aload_0
       1: invokevirtual #27                 // Method getMBeanServer:()Ljavax/management/MBeanServer;
       4: aload_1
       5: invokeinterface #104,  2          // InterfaceMethod javax/management/MBeanServer.getObjectInstance:(Ljavax/management/ObjectName;)Ljavax/management/ObjectInstance;
      10: areturn

  public void unregisterMBean(javax.management.ObjectName) throws javax.management.JMException;
    Code:
       0: aload_0
       1: getfield      #23                 // Field registeredMBeanNames:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #102,  2          // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #48                 // class javax/management/ObjectName
      13: astore_2
      14: aload_0
      15: getfield      #25                 // Field beanServer:Ljavax/management/MBeanServer;
      18: ifnull        72
      21: aload_2
      22: ifnull        72
      25: aload_0
      26: getfield      #25                 // Field beanServer:Ljavax/management/MBeanServer;
      29: aload_2
      30: invokeinterface #29,  2           // InterfaceMethod javax/management/MBeanServer.isRegistered:(Ljavax/management/ObjectName;)Z
      35: ifeq          72
      38: aload_0
      39: getfield      #23                 // Field registeredMBeanNames:Ljava/util/Map;
      42: aload_1
      43: invokeinterface #105,  2          // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      48: ifnull        72
      51: getstatic     #2                  // Field LOG:Lorg/slf4j/Logger;
      54: ldc           #49                 // String Unregistering MBean {}
      56: aload_2
      57: invokeinterface #31,  3           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Object;)V
      62: aload_0
      63: getfield      #25                 // Field beanServer:Ljavax/management/MBeanServer;
      66: aload_2
      67: invokeinterface #50,  2           // InterfaceMethod javax/management/MBeanServer.unregisterMBean:(Ljavax/management/ObjectName;)V
      72: return

  protected synchronized javax.management.MBeanServer findMBeanServer();
    Code:
       0: aconst_null
       1: astore_1
       2: aload_0
       3: getfield      #10                 // Field useMBeanServer:Z
       6: ifeq          54
       9: aload_0
      10: getfield      #13                 // Field findTigerMbeanServer:Z
      13: ifeq          21
      16: aload_0
      17: invokevirtual #106                // Method findTigerMBeanServer:()Ljavax/management/MBeanServer;
      20: astore_1
      21: aload_1
      22: ifnonnull     54
      25: aconst_null
      26: invokestatic  #66                 // Method javax/management/MBeanServerFactory.findMBeanServer:(Ljava/lang/String;)Ljava/util/ArrayList;
      29: astore_2
      30: aload_2
      31: ifnull        54
      34: aload_2
      35: invokeinterface #107,  1          // InterfaceMethod java/util/List.size:()I
      40: ifle          54
      43: aload_2
      44: iconst_0
      45: invokeinterface #108,  2          // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      50: checkcast     #109                // class javax/management/MBeanServer
      53: astore_1
      54: aload_1
      55: ifnonnull     70
      58: aload_0
      59: getfield      #11                 // Field createMBeanServer:Z
      62: ifeq          70
      65: aload_0
      66: invokevirtual #110                // Method createMBeanServer:()Ljavax/management/MBeanServer;
      69: astore_1
      70: goto          100
      73: astore_2
      74: getstatic     #2                  // Field LOG:Lorg/slf4j/Logger;
      77: ldc           #112                // String Could not load MBeanServer
      79: aload_2
      80: invokeinterface #113,  3          // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;Ljava/lang/Throwable;)V
      85: goto          100
      88: astore_2
      89: getstatic     #2                  // Field LOG:Lorg/slf4j/Logger;
      92: ldc           #114                // String Failed to initialize MBeanServer
      94: aload_2
      95: invokeinterface #113,  3          // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;Ljava/lang/Throwable;)V
     100: aload_1
     101: areturn
    Exception table:
       from    to  target type
           2    70    73   Class java/lang/NoClassDefFoundError
           2    70    88   Class java/lang/Throwable

  public javax.management.MBeanServer findTigerMBeanServer();
    Code:
       0: ldc           #115                // String java.lang.management.ManagementFactory
       2: astore_1
       3: aload_1
       4: ldc_w         #116                // class org/apache/activemq/broker/jmx/ManagementContext
       7: invokevirtual #117                // Method java/lang/Class.getClassLoader:()Ljava/lang/ClassLoader;
      10: invokestatic  #118                // Method loadClass:(Ljava/lang/String;Ljava/lang/ClassLoader;)Ljava/lang/Class;
      13: astore_2
      14: aload_2
      15: ifnull        121
      18: aload_2
      19: ldc           #119                // String getPlatformMBeanServer
      21: iconst_0
      22: anewarray     #120                // class java/lang/Class
      25: invokevirtual #121                // Method java/lang/Class.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;
      28: astore_3
      29: aload_3
      30: ifnull        89
      33: aload_3
      34: aconst_null
      35: iconst_0
      36: anewarray     #122                // class java/lang/Object
      39: invokevirtual #123                // Method java/lang/reflect/Method.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;
      42: astore        4
      44: aload         4
      46: instanceof    #109                // class javax/management/MBeanServer
      49: ifeq          74
      52: aload_0
      53: getfield      #12                 // Field createConnector:Z
      56: ifeq          68
      59: aload_0
      60: aload         4
      62: checkcast     #109                // class javax/management/MBeanServer
      65: invokespecial #124                // Method createConnector:(Ljavax/management/MBeanServer;)V
      68: aload         4
      70: checkcast     #109                // class javax/management/MBeanServer
      73: areturn
      74: getstatic     #2                  // Field LOG:Lorg/slf4j/Logger;
      77: ldc           #125                // String Could not cast: {} into an MBeanServer. There must be some classloader strangeness in town
      79: aload         4
      81: invokeinterface #59,  3           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;)V
      86: goto          103
      89: getstatic     #2                  // Field LOG:Lorg/slf4j/Logger;
      92: ldc           #126                // String Method getPlatformMBeanServer() does not appear visible on type: {}
      94: aload_2
      95: invokevirtual #91                 // Method java/lang/Class.getName:()Ljava/lang/String;
      98: invokeinterface #59,  3           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;)V
     103: goto          132
     106: astore_3
     107: getstatic     #2                  // Field LOG:Lorg/slf4j/Logger;
     110: ldc           #128                // String Failed to call getPlatformMBeanServer() due to:
     112: aload_3
     113: invokeinterface #129,  3          // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Throwable;)V
     118: goto          132
     121: getstatic     #2                  // Field LOG:Lorg/slf4j/Logger;
     124: ldc           #130                // String Class not found: {} so probably running on Java 1.4
     126: aload_1
     127: invokeinterface #131,  3          // InterfaceMethod org/slf4j/Logger.trace:(Ljava/lang/String;Ljava/lang/Object;)V
     132: aconst_null
     133: areturn
    Exception table:
       from    to  target type
          18    73   106   Class java/lang/Exception
          74   103   106   Class java/lang/Exception

  private static java.lang.Class<?> loadClass(java.lang.String, java.lang.ClassLoader);
    Code:
       0: aload_1
       1: aload_0
       2: invokevirtual #132                // Method java/lang/ClassLoader.loadClass:(Ljava/lang/String;)Ljava/lang/Class;
       5: areturn
       6: astore_2
       7: invokestatic  #134                // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      10: invokevirtual #135                // Method java/lang/Thread.getContextClassLoader:()Ljava/lang/ClassLoader;
      13: aload_0
      14: invokevirtual #132                // Method java/lang/ClassLoader.loadClass:(Ljava/lang/String;)Ljava/lang/Class;
      17: areturn
      18: astore_3
      19: aconst_null
      20: areturn
    Exception table:
       from    to  target type
           0     5     6   Class java/lang/ClassNotFoundException
           7    17    18   Class java/lang/ClassNotFoundException

  protected javax.management.MBeanServer createMBeanServer() throws javax.management.MalformedObjectNameException, java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #9                  // Field jmxDomainName:Ljava/lang/String;
       4: invokestatic  #136                // Method javax/management/MBeanServerFactory.createMBeanServer:(Ljava/lang/String;)Ljavax/management/MBeanServer;
       7: astore_1
       8: aload_0
       9: iconst_1
      10: putfield      #65                 // Field locallyCreateMBeanServer:Z
      13: aload_0
      14: getfield      #12                 // Field createConnector:Z
      17: ifeq          25
      20: aload_0
      21: aload_1
      22: invokespecial #124                // Method createConnector:(Ljavax/management/MBeanServer;)V
      25: aload_1
      26: areturn

  private void createConnector(javax.management.MBeanServer) throws javax.management.MalformedObjectNameException, java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #71                 // Field registry:Ljava/rmi/registry/Registry;
       4: ifnonnull     35
       7: getstatic     #2                  // Field LOG:Lorg/slf4j/Logger;
      10: ldc           #137                // String Creating RMIRegistry on port {}
      12: aload_0
      13: getfield      #16                 // Field connectorPort:I
      16: invokestatic  #138                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      19: invokeinterface #31,  3           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Object;)V
      24: aload_0
      25: aload_0
      26: getfield      #16                 // Field connectorPort:I
      29: invokestatic  #139                // Method java/rmi/registry/LocateRegistry.createRegistry:(I)Ljava/rmi/registry/Registry;
      32: putfield      #71                 // Field registry:Ljava/rmi/registry/Registry;
      35: aload_0
      36: ldc           #140                // String naming:type=rmiregistry
      38: invokestatic  #141                // Method javax/management/ObjectName.getInstance:(Ljava/lang/String;)Ljavax/management/ObjectName;
      41: putfield      #28                 // Field namingServiceObjectName:Ljavax/management/ObjectName;
      44: ldc           #142                // String mx4j.tools.naming.NamingService
      46: invokestatic  #143                // Method java/lang/Class.forName:(Ljava/lang/String;)Ljava/lang/Class;
      49: astore_2
      50: aload_1
      51: aload_2
      52: invokevirtual #144                // Method java/lang/Class.newInstance:()Ljava/lang/Object;
      55: aload_0
      56: getfield      #28                 // Field namingServiceObjectName:Ljavax/management/ObjectName;
      59: invokeinterface #99,  3           // InterfaceMethod javax/management/MBeanServer.registerMBean:(Ljava/lang/Object;Ljavax/management/ObjectName;)Ljavax/management/ObjectInstance;
      64: pop
      65: new           #145                // class javax/management/Attribute
      68: dup
      69: ldc           #146                // String Port
      71: aload_0
      72: getfield      #16                 // Field connectorPort:I
      75: invokestatic  #138                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      78: invokespecial #147                // Method javax/management/Attribute."<init>":(Ljava/lang/String;Ljava/lang/Object;)V
      81: astore_3
      82: aload_1
      83: aload_0
      84: getfield      #28                 // Field namingServiceObjectName:Ljavax/management/ObjectName;
      87: aload_3
      88: invokeinterface #148,  3          // InterfaceMethod javax/management/MBeanServer.setAttribute:(Ljavax/management/ObjectName;Ljavax/management/Attribute;)V
      93: goto          126
      96: astore_2
      97: getstatic     #2                  // Field LOG:Lorg/slf4j/Logger;
     100: ldc           #149                // String Probably not using JRE 1.4: {}
     102: aload_2
     103: invokevirtual #150                // Method java/lang/ClassNotFoundException.getLocalizedMessage:()Ljava/lang/String;
     106: invokeinterface #31,  3           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Object;)V
     111: goto          126
     114: astore_2
     115: getstatic     #2                  // Field LOG:Lorg/slf4j/Logger;
     118: ldc           #151                // String Failed to create local registry. This exception will be ignored.
     120: aload_2
     121: invokeinterface #152,  3          // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Throwable;)V
     126: ldc           #153                // String
     128: astore_2
     129: aload_0
     130: getfield      #154                // Field rmiServerPort:I
     133: ifeq          171
     136: new           #78                 // class java/lang/StringBuilder
     139: dup
     140: invokespecial #79                 // Method java/lang/StringBuilder."<init>":()V
     143: ldc           #153                // String
     145: invokevirtual #80                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     148: aload_0
     149: invokevirtual #155                // Method getConnectorHost:()Ljava/lang/String;
     152: invokevirtual #80                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     155: ldc           #81                 // String :
     157: invokevirtual #80                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     160: aload_0
     161: getfield      #154                // Field rmiServerPort:I
     164: invokevirtual #156                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     167: invokevirtual #85                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     170: astore_2
     171: new           #78                 // class java/lang/StringBuilder
     174: dup
     175: invokespecial #79                 // Method java/lang/StringBuilder."<init>":()V
     178: ldc           #157                // String service:jmx:rmi://
     180: invokevirtual #80                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     183: aload_2
     184: invokevirtual #80                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     187: ldc           #158                // String /jndi/rmi://
     189: invokevirtual #80                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     192: aload_0
     193: invokevirtual #155                // Method getConnectorHost:()Ljava/lang/String;
     196: invokevirtual #80                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     199: ldc           #81                 // String :
     201: invokevirtual #80                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     204: aload_0
     205: getfield      #16                 // Field connectorPort:I
     208: invokevirtual #156                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     211: aload_0
     212: getfield      #18                 // Field connectorPath:Ljava/lang/String;
     215: invokevirtual #80                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     218: invokevirtual #85                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     221: astore_3
     222: new           #159                // class javax/management/remote/JMXServiceURL
     225: dup
     226: aload_3
     227: invokespecial #160                // Method javax/management/remote/JMXServiceURL."<init>":(Ljava/lang/String;)V
     230: astore        4
     232: aload_0
     233: aload         4
     235: aload_0
     236: getfield      #161                // Field environment:Ljava/util/Map;
     239: aload_1
     240: invokestatic  #162                // Method javax/management/remote/JMXConnectorServerFactory.newJMXConnectorServer:(Ljavax/management/remote/JMXServiceURL;Ljava/util/Map;Ljavax/management/MBeanServer;)Ljavax/management/remote/JMXConnectorServer;
     243: putfield      #4                  // Field connectorServer:Ljavax/management/remote/JMXConnectorServer;
     246: getstatic     #2                  // Field LOG:Lorg/slf4j/Logger;
     249: ldc           #163                // String Created JMXConnectorServer {}
     251: aload_0
     252: getfield      #4                  // Field connectorServer:Ljavax/management/remote/JMXConnectorServer;
     255: invokeinterface #31,  3           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Object;)V
     260: return
    Exception table:
       from    to  target type
           0    93    96   Class java/lang/ClassNotFoundException
           0    93   114   Class java/lang/Throwable

  public java.lang.String getConnectorPath();
    Code:
       0: aload_0
       1: getfield      #18                 // Field connectorPath:Ljava/lang/String;
       4: areturn

  public void setConnectorPath(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #18                 // Field connectorPath:Ljava/lang/String;
       5: return

  public int getConnectorPort();
    Code:
       0: aload_0
       1: getfield      #16                 // Field connectorPort:I
       4: ireturn

  public void setConnectorPort(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #16                 // Field connectorPort:I
       5: return

  public int getRmiServerPort();
    Code:
       0: aload_0
       1: getfield      #154                // Field rmiServerPort:I
       4: ireturn

  public void setRmiServerPort(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #154                // Field rmiServerPort:I
       5: return

  public boolean isCreateConnector();
    Code:
       0: aload_0
       1: getfield      #12                 // Field createConnector:Z
       4: ireturn

  public void setCreateConnector(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #12                 // Field createConnector:Z
       5: return

  public java.lang.String getConnectorHost();
    Code:
       0: aload_0
       1: getfield      #15                 // Field connectorHost:Ljava/lang/String;
       4: areturn

  public void setConnectorHost(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #15                 // Field connectorHost:Ljava/lang/String;
       5: return

  public java.util.Map<java.lang.String, ?> getEnvironment();
    Code:
       0: aload_0
       1: getfield      #161                // Field environment:Ljava/util/Map;
       4: areturn

  public void setEnvironment(java.util.Map<java.lang.String, ?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #161                // Field environment:Ljava/util/Map;
       5: return

  public boolean isAllowRemoteAddressInMBeanNames();
    Code:
       0: aload_0
       1: getfield      #24                 // Field allowRemoteAddressInMBeanNames:Z
       4: ireturn

  public void setAllowRemoteAddressInMBeanNames(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #24                 // Field allowRemoteAddressInMBeanNames:Z
       5: return

  static java.lang.String access$000(org.apache.activemq.broker.jmx.ManagementContext);
    Code:
       0: aload_0
       1: getfield      #5                  // Field brokerName:Ljava/lang/String;
       4: areturn

  static javax.management.remote.JMXConnectorServer access$100(org.apache.activemq.broker.jmx.ManagementContext);
    Code:
       0: aload_0
       1: getfield      #4                  // Field connectorServer:Ljavax/management/remote/JMXConnectorServer;
       4: areturn

  static java.util.concurrent.atomic.AtomicBoolean access$200(org.apache.activemq.broker.jmx.ManagementContext);
    Code:
       0: aload_0
       1: getfield      #3                  // Field started:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: areturn

  static org.slf4j.Logger access$300();
    Code:
       0: getstatic     #2                  // Field LOG:Lorg/slf4j/Logger;
       3: areturn

  static java.util.concurrent.atomic.AtomicBoolean access$400(org.apache.activemq.broker.jmx.ManagementContext);
    Code:
       0: aload_0
       1: getfield      #1                  // Field connectorStarting:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: areturn

  static {};
    Code:
       0: ldc_w         #116                // class org/apache/activemq/broker/jmx/ManagementContext
       3: invokestatic  #164                // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       6: putstatic     #2                  // Field LOG:Lorg/slf4j/Logger;
       9: return
}
