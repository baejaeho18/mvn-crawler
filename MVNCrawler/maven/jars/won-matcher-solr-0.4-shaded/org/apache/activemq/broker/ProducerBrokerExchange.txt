Compiled from "ProducerBrokerExchange.java"
public class org.apache.activemq.broker.ProducerBrokerExchange {
  private static final org.slf4j.Logger LOG;

  private org.apache.activemq.broker.ConnectionContext connectionContext;

  private org.apache.activemq.broker.region.Destination regionDestination;

  private org.apache.activemq.broker.region.Region region;

  private org.apache.activemq.state.ProducerState producerState;

  private boolean mutable;

  private java.util.concurrent.atomic.AtomicLong lastSendSequenceNumber;

  private boolean auditProducerSequenceIds;

  private boolean isNetworkProducer;

  private org.apache.activemq.broker.BrokerService brokerService;

  private final org.apache.activemq.broker.ProducerBrokerExchange$FlowControlInfo flowControlInfo;

  public org.apache.activemq.broker.ProducerBrokerExchange();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #2                  // Field mutable:Z
       9: aload_0
      10: new           #3                  // class java/util/concurrent/atomic/AtomicLong
      13: dup
      14: ldc2_w        #4                  // long -1l
      17: invokespecial #6                  // Method java/util/concurrent/atomic/AtomicLong."<init>":(J)V
      20: putfield      #7                  // Field lastSendSequenceNumber:Ljava/util/concurrent/atomic/AtomicLong;
      23: aload_0
      24: new           #8                  // class org/apache/activemq/broker/ProducerBrokerExchange$FlowControlInfo
      27: dup
      28: invokespecial #9                  // Method org/apache/activemq/broker/ProducerBrokerExchange$FlowControlInfo."<init>":()V
      31: putfield      #10                 // Field flowControlInfo:Lorg/apache/activemq/broker/ProducerBrokerExchange$FlowControlInfo;
      34: return

  public org.apache.activemq.broker.ProducerBrokerExchange copy();
    Code:
       0: new           #11                 // class org/apache/activemq/broker/ProducerBrokerExchange
       3: dup
       4: invokespecial #12                 // Method "<init>":()V
       7: astore_1
       8: aload_1
       9: aload_0
      10: getfield      #13                 // Field connectionContext:Lorg/apache/activemq/broker/ConnectionContext;
      13: invokevirtual #14                 // Method org/apache/activemq/broker/ConnectionContext.copy:()Lorg/apache/activemq/broker/ConnectionContext;
      16: putfield      #13                 // Field connectionContext:Lorg/apache/activemq/broker/ConnectionContext;
      19: aload_1
      20: aload_0
      21: getfield      #15                 // Field regionDestination:Lorg/apache/activemq/broker/region/Destination;
      24: putfield      #15                 // Field regionDestination:Lorg/apache/activemq/broker/region/Destination;
      27: aload_1
      28: aload_0
      29: getfield      #16                 // Field region:Lorg/apache/activemq/broker/region/Region;
      32: putfield      #16                 // Field region:Lorg/apache/activemq/broker/region/Region;
      35: aload_1
      36: aload_0
      37: getfield      #17                 // Field producerState:Lorg/apache/activemq/state/ProducerState;
      40: putfield      #17                 // Field producerState:Lorg/apache/activemq/state/ProducerState;
      43: aload_1
      44: aload_0
      45: getfield      #2                  // Field mutable:Z
      48: putfield      #2                  // Field mutable:Z
      51: aload_1
      52: areturn

  public org.apache.activemq.broker.ConnectionContext getConnectionContext();
    Code:
       0: aload_0
       1: getfield      #13                 // Field connectionContext:Lorg/apache/activemq/broker/ConnectionContext;
       4: areturn

  public void setConnectionContext(org.apache.activemq.broker.ConnectionContext);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #13                 // Field connectionContext:Lorg/apache/activemq/broker/ConnectionContext;
       5: return

  public boolean isMutable();
    Code:
       0: aload_0
       1: getfield      #2                  // Field mutable:Z
       4: ireturn

  public void setMutable(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #2                  // Field mutable:Z
       5: return

  public org.apache.activemq.broker.region.Destination getRegionDestination();
    Code:
       0: aload_0
       1: getfield      #15                 // Field regionDestination:Lorg/apache/activemq/broker/region/Destination;
       4: areturn

  public void setRegionDestination(org.apache.activemq.broker.region.Destination);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #15                 // Field regionDestination:Lorg/apache/activemq/broker/region/Destination;
       5: return

  public org.apache.activemq.broker.region.Region getRegion();
    Code:
       0: aload_0
       1: getfield      #16                 // Field region:Lorg/apache/activemq/broker/region/Region;
       4: areturn

  public void setRegion(org.apache.activemq.broker.region.Region);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #16                 // Field region:Lorg/apache/activemq/broker/region/Region;
       5: return

  public org.apache.activemq.state.ProducerState getProducerState();
    Code:
       0: aload_0
       1: getfield      #17                 // Field producerState:Lorg/apache/activemq/state/ProducerState;
       4: areturn

  public void setProducerState(org.apache.activemq.state.ProducerState);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #17                 // Field producerState:Lorg/apache/activemq/state/ProducerState;
       5: return

  public boolean canDispatch(org.apache.activemq.command.Message);
    Code:
       0: iconst_1
       1: istore_2
       2: aload_0
       3: getfield      #18                 // Field auditProducerSequenceIds:Z
       6: ifeq          239
       9: aload_1
      10: invokevirtual #19                 // Method org/apache/activemq/command/Message.isPersistent:()Z
      13: ifeq          239
      16: aload_1
      17: invokevirtual #20                 // Method org/apache/activemq/command/Message.getMessageId:()Lorg/apache/activemq/command/MessageId;
      20: invokevirtual #21                 // Method org/apache/activemq/command/MessageId.getProducerSequenceId:()J
      23: lstore_3
      24: aload_0
      25: getfield      #22                 // Field isNetworkProducer:Z
      28: ifeq          104
      31: aload_0
      32: aload_1
      33: invokevirtual #20                 // Method org/apache/activemq/command/Message.getMessageId:()Lorg/apache/activemq/command/MessageId;
      36: invokespecial #23                 // Method getStoredSequenceIdForMessage:(Lorg/apache/activemq/command/MessageId;)J
      39: lstore        5
      41: lload_3
      42: lload         5
      44: lcmp
      45: ifgt          101
      48: iconst_0
      49: istore_2
      50: getstatic     #24                 // Field LOG:Lorg/slf4j/Logger;
      53: ldc           #25                 // String suppressing duplicate message send [{}] from network producer with producerSequence [{}] less than last stored: {}
      55: iconst_3
      56: anewarray     #26                 // class java/lang/Object
      59: dup
      60: iconst_0
      61: getstatic     #24                 // Field LOG:Lorg/slf4j/Logger;
      64: invokeinterface #27,  1           // InterfaceMethod org/slf4j/Logger.isTraceEnabled:()Z
      69: ifeq          76
      72: aload_1
      73: goto          80
      76: aload_1
      77: invokevirtual #20                 // Method org/apache/activemq/command/Message.getMessageId:()Lorg/apache/activemq/command/MessageId;
      80: aastore
      81: dup
      82: iconst_1
      83: lload_3
      84: invokestatic  #28                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      87: aastore
      88: dup
      89: iconst_2
      90: lload         5
      92: invokestatic  #28                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      95: aastore
      96: invokeinterface #29,  3           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;[Ljava/lang/Object;)V
     101: goto          239
     104: lload_3
     105: aload_0
     106: getfield      #7                  // Field lastSendSequenceNumber:Ljava/util/concurrent/atomic/AtomicLong;
     109: invokevirtual #30                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
     112: lcmp
     113: ifgt          231
     116: iconst_0
     117: istore_2
     118: aload_1
     119: invokevirtual #31                 // Method org/apache/activemq/command/Message.isInTransaction:()Z
     122: ifeq          178
     125: getstatic     #24                 // Field LOG:Lorg/slf4j/Logger;
     128: ldc           #32                 // String suppressing duplicated message send [{}] with producerSequenceId [{}] <= last stored: {}
     130: iconst_3
     131: anewarray     #26                 // class java/lang/Object
     134: dup
     135: iconst_0
     136: getstatic     #24                 // Field LOG:Lorg/slf4j/Logger;
     139: invokeinterface #27,  1           // InterfaceMethod org/slf4j/Logger.isTraceEnabled:()Z
     144: ifeq          151
     147: aload_1
     148: goto          155
     151: aload_1
     152: invokevirtual #20                 // Method org/apache/activemq/command/Message.getMessageId:()Lorg/apache/activemq/command/MessageId;
     155: aastore
     156: dup
     157: iconst_1
     158: lload_3
     159: invokestatic  #28                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     162: aastore
     163: dup
     164: iconst_2
     165: aload_0
     166: getfield      #7                  // Field lastSendSequenceNumber:Ljava/util/concurrent/atomic/AtomicLong;
     169: aastore
     170: invokeinterface #29,  3           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;[Ljava/lang/Object;)V
     175: goto          239
     178: getstatic     #24                 // Field LOG:Lorg/slf4j/Logger;
     181: ldc           #32                 // String suppressing duplicated message send [{}] with producerSequenceId [{}] <= last stored: {}
     183: iconst_3
     184: anewarray     #26                 // class java/lang/Object
     187: dup
     188: iconst_0
     189: getstatic     #24                 // Field LOG:Lorg/slf4j/Logger;
     192: invokeinterface #27,  1           // InterfaceMethod org/slf4j/Logger.isTraceEnabled:()Z
     197: ifeq          204
     200: aload_1
     201: goto          208
     204: aload_1
     205: invokevirtual #20                 // Method org/apache/activemq/command/Message.getMessageId:()Lorg/apache/activemq/command/MessageId;
     208: aastore
     209: dup
     210: iconst_1
     211: lload_3
     212: invokestatic  #28                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     215: aastore
     216: dup
     217: iconst_2
     218: aload_0
     219: getfield      #7                  // Field lastSendSequenceNumber:Ljava/util/concurrent/atomic/AtomicLong;
     222: aastore
     223: invokeinterface #33,  3           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;[Ljava/lang/Object;)V
     228: goto          239
     231: aload_0
     232: getfield      #7                  // Field lastSendSequenceNumber:Ljava/util/concurrent/atomic/AtomicLong;
     235: lload_3
     236: invokevirtual #34                 // Method java/util/concurrent/atomic/AtomicLong.set:(J)V
     239: iload_2
     240: ireturn

  private long getStoredSequenceIdForMessage(org.apache.activemq.command.MessageId);
    Code:
       0: aload_0
       1: getfield      #35                 // Field brokerService:Lorg/apache/activemq/broker/BrokerService;
       4: invokevirtual #36                 // Method org/apache/activemq/broker/BrokerService.getPersistenceAdapter:()Lorg/apache/activemq/store/PersistenceAdapter;
       7: aload_1
       8: invokevirtual #37                 // Method org/apache/activemq/command/MessageId.getProducerId:()Lorg/apache/activemq/command/ProducerId;
      11: invokeinterface #38,  2           // InterfaceMethod org/apache/activemq/store/PersistenceAdapter.getLastProducerSequenceId:(Lorg/apache/activemq/command/ProducerId;)J
      16: lreturn
      17: astore_2
      18: getstatic     #24                 // Field LOG:Lorg/slf4j/Logger;
      21: ldc           #40                 // String Failed to determine last producer sequence id for: {}
      23: aload_1
      24: aload_2
      25: invokeinterface #41,  4           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      30: ldc2_w        #4                  // long -1l
      33: lreturn
    Exception table:
       from    to  target type
           0    16    17   Class java/io/IOException

  public void setLastStoredSequenceId(long);
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #18                 // Field auditProducerSequenceIds:Z
       5: aload_0
       6: getfield      #13                 // Field connectionContext:Lorg/apache/activemq/broker/ConnectionContext;
       9: invokevirtual #42                 // Method org/apache/activemq/broker/ConnectionContext.isNetworkConnection:()Z
      12: ifeq          36
      15: aload_0
      16: aload_0
      17: getfield      #13                 // Field connectionContext:Lorg/apache/activemq/broker/ConnectionContext;
      20: invokevirtual #43                 // Method org/apache/activemq/broker/ConnectionContext.getBroker:()Lorg/apache/activemq/broker/Broker;
      23: invokeinterface #44,  1           // InterfaceMethod org/apache/activemq/broker/Broker.getBrokerService:()Lorg/apache/activemq/broker/BrokerService;
      28: putfield      #35                 // Field brokerService:Lorg/apache/activemq/broker/BrokerService;
      31: aload_0
      32: iconst_1
      33: putfield      #22                 // Field isNetworkProducer:Z
      36: aload_0
      37: getfield      #7                  // Field lastSendSequenceNumber:Ljava/util/concurrent/atomic/AtomicLong;
      40: lload_1
      41: invokevirtual #34                 // Method java/util/concurrent/atomic/AtomicLong.set:(J)V
      44: getstatic     #24                 // Field LOG:Lorg/slf4j/Logger;
      47: ldc           #45                 // String last stored sequence id set: {}
      49: lload_1
      50: invokestatic  #28                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      53: invokeinterface #46,  3           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Object;)V
      58: return

  public void incrementSend();
    Code:
       0: aload_0
       1: getfield      #10                 // Field flowControlInfo:Lorg/apache/activemq/broker/ProducerBrokerExchange$FlowControlInfo;
       4: invokevirtual #47                 // Method org/apache/activemq/broker/ProducerBrokerExchange$FlowControlInfo.incrementSend:()V
       7: return

  public void blockingOnFlowControl(boolean);
    Code:
       0: aload_0
       1: getfield      #10                 // Field flowControlInfo:Lorg/apache/activemq/broker/ProducerBrokerExchange$FlowControlInfo;
       4: iload_1
       5: invokevirtual #48                 // Method org/apache/activemq/broker/ProducerBrokerExchange$FlowControlInfo.setBlockingOnFlowControl:(Z)V
       8: return

  public void incrementTimeBlocked(org.apache.activemq.broker.region.Destination, long);
    Code:
       0: aload_0
       1: getfield      #10                 // Field flowControlInfo:Lorg/apache/activemq/broker/ProducerBrokerExchange$FlowControlInfo;
       4: lload_2
       5: invokevirtual #49                 // Method org/apache/activemq/broker/ProducerBrokerExchange$FlowControlInfo.incrementTimeBlocked:(J)V
       8: return

  public boolean isBlockedForFlowControl();
    Code:
       0: aload_0
       1: getfield      #10                 // Field flowControlInfo:Lorg/apache/activemq/broker/ProducerBrokerExchange$FlowControlInfo;
       4: invokevirtual #50                 // Method org/apache/activemq/broker/ProducerBrokerExchange$FlowControlInfo.isBlockingOnFlowControl:()Z
       7: ireturn

  public void resetFlowControl();
    Code:
       0: aload_0
       1: getfield      #10                 // Field flowControlInfo:Lorg/apache/activemq/broker/ProducerBrokerExchange$FlowControlInfo;
       4: invokevirtual #51                 // Method org/apache/activemq/broker/ProducerBrokerExchange$FlowControlInfo.reset:()V
       7: return

  public long getTotalTimeBlocked();
    Code:
       0: aload_0
       1: getfield      #10                 // Field flowControlInfo:Lorg/apache/activemq/broker/ProducerBrokerExchange$FlowControlInfo;
       4: invokevirtual #52                 // Method org/apache/activemq/broker/ProducerBrokerExchange$FlowControlInfo.getTotalTimeBlocked:()J
       7: lreturn

  public int getPercentageBlocked();
    Code:
       0: aload_0
       1: getfield      #10                 // Field flowControlInfo:Lorg/apache/activemq/broker/ProducerBrokerExchange$FlowControlInfo;
       4: invokevirtual #53                 // Method org/apache/activemq/broker/ProducerBrokerExchange$FlowControlInfo.getSendsBlocked:()J
       7: aload_0
       8: getfield      #10                 // Field flowControlInfo:Lorg/apache/activemq/broker/ProducerBrokerExchange$FlowControlInfo;
      11: invokevirtual #54                 // Method org/apache/activemq/broker/ProducerBrokerExchange$FlowControlInfo.getTotalSends:()J
      14: ldiv
      15: l2d
      16: dstore_1
      17: dload_1
      18: d2i
      19: bipush        100
      21: imul
      22: ireturn

  static {};
    Code:
       0: ldc_w         #11                 // class org/apache/activemq/broker/ProducerBrokerExchange
       3: invokestatic  #55                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       6: putstatic     #24                 // Field LOG:Lorg/slf4j/Logger;
       9: return
}
