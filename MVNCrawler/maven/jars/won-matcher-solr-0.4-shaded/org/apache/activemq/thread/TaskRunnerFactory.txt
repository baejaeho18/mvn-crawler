Compiled from "TaskRunnerFactory.java"
public class org.apache.activemq.thread.TaskRunnerFactory implements java.util.concurrent.Executor {
  private static final org.slf4j.Logger LOG;

  private java.util.concurrent.ExecutorService executor;

  private int maxIterationsPerRun;

  private java.lang.String name;

  private int priority;

  private boolean daemon;

  private final java.util.concurrent.atomic.AtomicLong id;

  private boolean dedicatedTaskRunner;

  private long shutdownAwaitTermination;

  private final java.util.concurrent.atomic.AtomicBoolean initDone;

  private int maxThreadPoolSize;

  private java.util.concurrent.RejectedExecutionHandler rejectedTaskHandler;

  public org.apache.activemq.thread.TaskRunnerFactory();
    Code:
       0: aload_0
       1: ldc           #6                  // String ActiveMQ Task
       3: invokespecial #7                  // Method "<init>":(Ljava/lang/String;)V
       6: return

  public org.apache.activemq.thread.TaskRunnerFactory(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_5
       3: iconst_1
       4: sipush        1000
       7: invokespecial #8                  // Method "<init>":(Ljava/lang/String;IZI)V
      10: return

  private org.apache.activemq.thread.TaskRunnerFactory(java.lang.String, int, boolean, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: iload         4
       6: iconst_0
       7: invokespecial #9                  // Method "<init>":(Ljava/lang/String;IZIZ)V
      10: return

  public org.apache.activemq.thread.TaskRunnerFactory(java.lang.String, int, boolean, int, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: iload         4
       6: iload         5
       8: ldc           #10                 // int 2147483647
      10: invokespecial #11                 // Method "<init>":(Ljava/lang/String;IZIZI)V
      13: return

  public org.apache.activemq.thread.TaskRunnerFactory(java.lang.String, int, boolean, int, boolean, int);
    Code:
       0: aload_0
       1: invokespecial #12                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #13                 // class java/util/concurrent/atomic/AtomicLong
       8: dup
       9: lconst_0
      10: invokespecial #14                 // Method java/util/concurrent/atomic/AtomicLong."<init>":(J)V
      13: putfield      #4                  // Field id:Ljava/util/concurrent/atomic/AtomicLong;
      16: aload_0
      17: ldc2_w        #15                 // long 30000l
      20: putfield      #17                 // Field shutdownAwaitTermination:J
      23: aload_0
      24: new           #18                 // class java/util/concurrent/atomic/AtomicBoolean
      27: dup
      28: iconst_0
      29: invokespecial #19                 // Method java/util/concurrent/atomic/AtomicBoolean."<init>":(Z)V
      32: putfield      #20                 // Field initDone:Ljava/util/concurrent/atomic/AtomicBoolean;
      35: aload_0
      36: ldc           #10                 // int 2147483647
      38: putfield      #21                 // Field maxThreadPoolSize:I
      41: aload_0
      42: aconst_null
      43: putfield      #22                 // Field rejectedTaskHandler:Ljava/util/concurrent/RejectedExecutionHandler;
      46: aload_0
      47: aload_1
      48: putfield      #5                  // Field name:Ljava/lang/String;
      51: aload_0
      52: iload_2
      53: putfield      #2                  // Field priority:I
      56: aload_0
      57: iload_3
      58: putfield      #3                  // Field daemon:Z
      61: aload_0
      62: iload         4
      64: putfield      #23                 // Field maxIterationsPerRun:I
      67: aload_0
      68: iload         5
      70: putfield      #24                 // Field dedicatedTaskRunner:Z
      73: aload_0
      74: iload         6
      76: putfield      #21                 // Field maxThreadPoolSize:I
      79: return

  public void init();
    Code:
       0: aload_0
       1: getfield      #20                 // Field initDone:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: iconst_0
       5: iconst_1
       6: invokevirtual #25                 // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z
       9: ifeq          73
      12: aload_0
      13: getfield      #24                 // Field dedicatedTaskRunner:Z
      16: ifne          32
      19: ldc           #26                 // String true
      21: ldc           #27                 // String org.apache.activemq.UseDedicatedTaskRunner
      23: invokestatic  #28                 // Method java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;
      26: invokevirtual #29                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      29: ifeq          40
      32: aload_0
      33: aconst_null
      34: putfield      #30                 // Field executor:Ljava/util/concurrent/ExecutorService;
      37: goto          55
      40: aload_0
      41: getfield      #30                 // Field executor:Ljava/util/concurrent/ExecutorService;
      44: ifnonnull     55
      47: aload_0
      48: aload_0
      49: invokevirtual #31                 // Method createDefaultExecutor:()Ljava/util/concurrent/ExecutorService;
      52: putfield      #30                 // Field executor:Ljava/util/concurrent/ExecutorService;
      55: getstatic     #1                  // Field LOG:Lorg/slf4j/Logger;
      58: ldc           #32                 // String Initialized TaskRunnerFactory[{}] using ExecutorService: {}
      60: aload_0
      61: getfield      #5                  // Field name:Ljava/lang/String;
      64: aload_0
      65: getfield      #30                 // Field executor:Ljava/util/concurrent/ExecutorService;
      68: invokeinterface #33,  4           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      73: return

  public void shutdown();
    Code:
       0: aload_0
       1: getfield      #30                 // Field executor:Ljava/util/concurrent/ExecutorService;
       4: ifnull        19
       7: aload_0
       8: getfield      #30                 // Field executor:Ljava/util/concurrent/ExecutorService;
      11: invokestatic  #34                 // Method org/apache/activemq/util/ThreadPoolUtils.shutdown:(Ljava/util/concurrent/ExecutorService;)V
      14: aload_0
      15: aconst_null
      16: putfield      #30                 // Field executor:Ljava/util/concurrent/ExecutorService;
      19: aload_0
      20: getfield      #20                 // Field initDone:Ljava/util/concurrent/atomic/AtomicBoolean;
      23: iconst_0
      24: invokevirtual #35                 // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V
      27: return

  public void shutdownNow();
    Code:
       0: aload_0
       1: getfield      #30                 // Field executor:Ljava/util/concurrent/ExecutorService;
       4: ifnull        20
       7: aload_0
       8: getfield      #30                 // Field executor:Ljava/util/concurrent/ExecutorService;
      11: invokestatic  #36                 // Method org/apache/activemq/util/ThreadPoolUtils.shutdownNow:(Ljava/util/concurrent/ExecutorService;)Ljava/util/List;
      14: pop
      15: aload_0
      16: aconst_null
      17: putfield      #30                 // Field executor:Ljava/util/concurrent/ExecutorService;
      20: aload_0
      21: getfield      #20                 // Field initDone:Ljava/util/concurrent/atomic/AtomicBoolean;
      24: iconst_0
      25: invokevirtual #35                 // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V
      28: return

  public void shutdownGraceful();
    Code:
       0: aload_0
       1: getfield      #30                 // Field executor:Ljava/util/concurrent/ExecutorService;
       4: ifnull        23
       7: aload_0
       8: getfield      #30                 // Field executor:Ljava/util/concurrent/ExecutorService;
      11: aload_0
      12: getfield      #17                 // Field shutdownAwaitTermination:J
      15: invokestatic  #37                 // Method org/apache/activemq/util/ThreadPoolUtils.shutdownGraceful:(Ljava/util/concurrent/ExecutorService;J)V
      18: aload_0
      19: aconst_null
      20: putfield      #30                 // Field executor:Ljava/util/concurrent/ExecutorService;
      23: aload_0
      24: getfield      #20                 // Field initDone:Ljava/util/concurrent/atomic/AtomicBoolean;
      27: iconst_0
      28: invokevirtual #35                 // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V
      31: return

  public org.apache.activemq.thread.TaskRunner createTaskRunner(org.apache.activemq.thread.Task, java.lang.String);
    Code:
       0: aload_0
       1: invokevirtual #38                 // Method init:()V
       4: aload_0
       5: getfield      #30                 // Field executor:Ljava/util/concurrent/ExecutorService;
       8: ifnull        28
      11: new           #39                 // class org/apache/activemq/thread/PooledTaskRunner
      14: dup
      15: aload_0
      16: getfield      #30                 // Field executor:Ljava/util/concurrent/ExecutorService;
      19: aload_1
      20: aload_0
      21: getfield      #23                 // Field maxIterationsPerRun:I
      24: invokespecial #40                 // Method org/apache/activemq/thread/PooledTaskRunner."<init>":(Ljava/util/concurrent/Executor;Lorg/apache/activemq/thread/Task;I)V
      27: areturn
      28: new           #41                 // class org/apache/activemq/thread/DedicatedTaskRunner
      31: dup
      32: aload_1
      33: aload_2
      34: aload_0
      35: getfield      #2                  // Field priority:I
      38: aload_0
      39: getfield      #3                  // Field daemon:Z
      42: invokespecial #42                 // Method org/apache/activemq/thread/DedicatedTaskRunner."<init>":(Lorg/apache/activemq/thread/Task;Ljava/lang/String;IZ)V
      45: areturn

  public void execute(java.lang.Runnable);
    Code:
       0: aload_0
       1: aload_1
       2: aload_0
       3: getfield      #5                  // Field name:Ljava/lang/String;
       6: invokevirtual #43                 // Method execute:(Ljava/lang/Runnable;Ljava/lang/String;)V
       9: return

  public void execute(java.lang.Runnable, java.lang.String);
    Code:
       0: aload_0
       1: invokevirtual #38                 // Method init:()V
       4: getstatic     #1                  // Field LOG:Lorg/slf4j/Logger;
       7: ldc           #44                 // String Execute[{}] runnable: {}
       9: aload_2
      10: aload_1
      11: invokeinterface #45,  4           // InterfaceMethod org/slf4j/Logger.trace:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      16: aload_0
      17: getfield      #30                 // Field executor:Ljava/util/concurrent/ExecutorService;
      20: ifnull        36
      23: aload_0
      24: getfield      #30                 // Field executor:Ljava/util/concurrent/ExecutorService;
      27: aload_1
      28: invokeinterface #46,  2           // InterfaceMethod java/util/concurrent/ExecutorService.execute:(Ljava/lang/Runnable;)V
      33: goto          42
      36: aload_0
      37: aload_1
      38: aload_2
      39: invokespecial #47                 // Method doExecuteNewThread:(Ljava/lang/Runnable;Ljava/lang/String;)V
      42: return

  private void doExecuteNewThread(java.lang.Runnable, java.lang.String);
    Code:
       0: new           #48                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #49                 // Method java/lang/StringBuilder."<init>":()V
       7: aload_2
       8: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      11: ldc           #51                 // String -
      13: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      16: aload_0
      17: getfield      #4                  // Field id:Ljava/util/concurrent/atomic/AtomicLong;
      20: invokevirtual #52                 // Method java/util/concurrent/atomic/AtomicLong.incrementAndGet:()J
      23: invokevirtual #53                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      26: invokevirtual #54                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      29: astore_3
      30: new           #55                 // class java/lang/Thread
      33: dup
      34: aload_1
      35: aload_3
      36: invokespecial #56                 // Method java/lang/Thread."<init>":(Ljava/lang/Runnable;Ljava/lang/String;)V
      39: astore        4
      41: aload         4
      43: aload_0
      44: getfield      #3                  // Field daemon:Z
      47: invokevirtual #57                 // Method java/lang/Thread.setDaemon:(Z)V
      50: getstatic     #1                  // Field LOG:Lorg/slf4j/Logger;
      53: ldc           #58                 // String Created and running thread[{}]: {}
      55: aload_3
      56: aload         4
      58: invokeinterface #45,  4           // InterfaceMethod org/slf4j/Logger.trace:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      63: aload         4
      65: invokevirtual #59                 // Method java/lang/Thread.start:()V
      68: return

  protected java.util.concurrent.ExecutorService createDefaultExecutor();
    Code:
       0: new           #60                 // class java/util/concurrent/ThreadPoolExecutor
       3: dup
       4: iconst_0
       5: aload_0
       6: invokevirtual #61                 // Method getMaxThreadPoolSize:()I
       9: invokestatic  #62                 // Method getDefaultKeepAliveTime:()I
      12: i2l
      13: getstatic     #63                 // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
      16: new           #64                 // class java/util/concurrent/SynchronousQueue
      19: dup
      20: invokespecial #65                 // Method java/util/concurrent/SynchronousQueue."<init>":()V
      23: new           #66                 // class org/apache/activemq/thread/TaskRunnerFactory$1
      26: dup
      27: aload_0
      28: invokespecial #67                 // Method org/apache/activemq/thread/TaskRunnerFactory$1."<init>":(Lorg/apache/activemq/thread/TaskRunnerFactory;)V
      31: invokespecial #68                 // Method java/util/concurrent/ThreadPoolExecutor."<init>":(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;)V
      34: astore_1
      35: aload_0
      36: getfield      #22                 // Field rejectedTaskHandler:Ljava/util/concurrent/RejectedExecutionHandler;
      39: ifnull        50
      42: aload_1
      43: aload_0
      44: getfield      #22                 // Field rejectedTaskHandler:Ljava/util/concurrent/RejectedExecutionHandler;
      47: invokevirtual #69                 // Method java/util/concurrent/ThreadPoolExecutor.setRejectedExecutionHandler:(Ljava/util/concurrent/RejectedExecutionHandler;)V
      50: aload_1
      51: areturn

  public java.util.concurrent.ExecutorService getExecutor();
    Code:
       0: aload_0
       1: getfield      #30                 // Field executor:Ljava/util/concurrent/ExecutorService;
       4: areturn

  public void setExecutor(java.util.concurrent.ExecutorService);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #30                 // Field executor:Ljava/util/concurrent/ExecutorService;
       5: return

  public int getMaxIterationsPerRun();
    Code:
       0: aload_0
       1: getfield      #23                 // Field maxIterationsPerRun:I
       4: ireturn

  public void setMaxIterationsPerRun(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #23                 // Field maxIterationsPerRun:I
       5: return

  public java.lang.String getName();
    Code:
       0: aload_0
       1: getfield      #5                  // Field name:Ljava/lang/String;
       4: areturn

  public void setName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #5                  // Field name:Ljava/lang/String;
       5: return

  public int getPriority();
    Code:
       0: aload_0
       1: getfield      #2                  // Field priority:I
       4: ireturn

  public void setPriority(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #2                  // Field priority:I
       5: return

  public boolean isDaemon();
    Code:
       0: aload_0
       1: getfield      #3                  // Field daemon:Z
       4: ireturn

  public void setDaemon(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #3                  // Field daemon:Z
       5: return

  public boolean isDedicatedTaskRunner();
    Code:
       0: aload_0
       1: getfield      #24                 // Field dedicatedTaskRunner:Z
       4: ireturn

  public void setDedicatedTaskRunner(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #24                 // Field dedicatedTaskRunner:Z
       5: return

  public int getMaxThreadPoolSize();
    Code:
       0: aload_0
       1: getfield      #21                 // Field maxThreadPoolSize:I
       4: ireturn

  public void setMaxThreadPoolSize(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #21                 // Field maxThreadPoolSize:I
       5: return

  public java.util.concurrent.RejectedExecutionHandler getRejectedTaskHandler();
    Code:
       0: aload_0
       1: getfield      #22                 // Field rejectedTaskHandler:Ljava/util/concurrent/RejectedExecutionHandler;
       4: areturn

  public void setRejectedTaskHandler(java.util.concurrent.RejectedExecutionHandler);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #22                 // Field rejectedTaskHandler:Ljava/util/concurrent/RejectedExecutionHandler;
       5: return

  public long getShutdownAwaitTermination();
    Code:
       0: aload_0
       1: getfield      #17                 // Field shutdownAwaitTermination:J
       4: lreturn

  public void setShutdownAwaitTermination(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #17                 // Field shutdownAwaitTermination:J
       5: return

  private static int getDefaultKeepAliveTime();
    Code:
       0: ldc           #70                 // String org.apache.activemq.thread.TaskRunnerFactory.keepAliveTime
       2: bipush        30
       4: invokestatic  #71                 // Method java/lang/Integer.getInteger:(Ljava/lang/String;I)Ljava/lang/Integer;
       7: invokevirtual #72                 // Method java/lang/Integer.intValue:()I
      10: ireturn

  static java.lang.String access$000(org.apache.activemq.thread.TaskRunnerFactory);
    Code:
       0: aload_0
       1: getfield      #5                  // Field name:Ljava/lang/String;
       4: areturn

  static java.util.concurrent.atomic.AtomicLong access$100(org.apache.activemq.thread.TaskRunnerFactory);
    Code:
       0: aload_0
       1: getfield      #4                  // Field id:Ljava/util/concurrent/atomic/AtomicLong;
       4: areturn

  static boolean access$200(org.apache.activemq.thread.TaskRunnerFactory);
    Code:
       0: aload_0
       1: getfield      #3                  // Field daemon:Z
       4: ireturn

  static int access$300(org.apache.activemq.thread.TaskRunnerFactory);
    Code:
       0: aload_0
       1: getfield      #2                  // Field priority:I
       4: ireturn

  static org.slf4j.Logger access$400();
    Code:
       0: getstatic     #1                  // Field LOG:Lorg/slf4j/Logger;
       3: areturn

  static {};
    Code:
       0: ldc_w         #73                 // class org/apache/activemq/thread/TaskRunnerFactory
       3: invokestatic  #74                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       6: putstatic     #1                  // Field LOG:Lorg/slf4j/Logger;
       9: return
}
