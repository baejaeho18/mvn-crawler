Compiled from "ActiveMQConnectionFactory.java"
public class org.apache.activemq.ActiveMQConnectionFactory extends org.apache.activemq.jndi.JNDIBaseStorable implements javax.jms.ConnectionFactory,javax.jms.QueueConnectionFactory,javax.jms.TopicConnectionFactory,org.apache.activemq.management.StatsCapable,java.lang.Cloneable {
  private static final org.slf4j.Logger LOG;

  private static final java.lang.String DEFAULT_BROKER_HOST;

  private static final int DEFAULT_BROKER_PORT;

  public static final java.lang.String DEFAULT_BROKER_BIND_URL;

  public static final java.lang.String DEFAULT_BROKER_URL;

  public static final java.lang.String DEFAULT_USER;

  public static final java.lang.String DEFAULT_PASSWORD;

  public static final int DEFAULT_PRODUCER_WINDOW_SIZE;

  protected java.net.URI brokerURL;

  protected java.lang.String userName;

  protected java.lang.String password;

  protected java.lang.String clientID;

  protected boolean dispatchAsync;

  protected boolean alwaysSessionAsync;

  org.apache.activemq.management.JMSStatsImpl factoryStats;

  private org.apache.activemq.util.IdGenerator clientIdGenerator;

  private java.lang.String clientIDPrefix;

  private org.apache.activemq.util.IdGenerator connectionIdGenerator;

  private java.lang.String connectionIDPrefix;

  private org.apache.activemq.ActiveMQPrefetchPolicy prefetchPolicy;

  private org.apache.activemq.broker.region.policy.RedeliveryPolicyMap redeliveryPolicyMap;

  private org.apache.activemq.blob.BlobTransferPolicy blobTransferPolicy;

  private org.apache.activemq.MessageTransformer transformer;

  private boolean disableTimeStampsByDefault;

  private boolean optimizedMessageDispatch;

  private long optimizeAcknowledgeTimeOut;

  private long optimizedAckScheduledAckInterval;

  private boolean copyMessageOnSend;

  private boolean useCompression;

  private boolean objectMessageSerializationDefered;

  private boolean useAsyncSend;

  private boolean optimizeAcknowledge;

  private int closeTimeout;

  private boolean useRetroactiveConsumer;

  private boolean exclusiveConsumer;

  private boolean nestedMapAndListEnabled;

  private boolean alwaysSyncSend;

  private boolean watchTopicAdvisories;

  private int producerWindowSize;

  private long warnAboutUnstartedConnectionTimeout;

  private int sendTimeout;

  private boolean sendAcksAsync;

  private org.apache.activemq.transport.TransportListener transportListener;

  private javax.jms.ExceptionListener exceptionListener;

  private int auditDepth;

  private int auditMaximumProducerNumber;

  private boolean useDedicatedTaskRunner;

  private long consumerFailoverRedeliveryWaitPeriod;

  private boolean checkForDuplicates;

  private org.apache.activemq.ClientInternalExceptionListener clientInternalExceptionListener;

  private boolean messagePrioritySupported;

  private boolean transactedIndividualAck;

  private boolean nonBlockingRedelivery;

  private int maxThreadPoolSize;

  private org.apache.activemq.thread.TaskRunnerFactory sessionTaskRunner;

  private java.util.concurrent.RejectedExecutionHandler rejectedTaskHandler;

  protected int xaAckMode;

  private boolean rmIdFromConnectionId;

  public org.apache.activemq.ActiveMQConnectionFactory();
    Code:
       0: aload_0
       1: getstatic     #1                  // Field DEFAULT_BROKER_URL:Ljava/lang/String;
       4: invokespecial #2                  // Method "<init>":(Ljava/lang/String;)V
       7: return

  public org.apache.activemq.ActiveMQConnectionFactory(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #3                  // Method createURI:(Ljava/lang/String;)Ljava/net/URI;
       5: invokespecial #4                  // Method "<init>":(Ljava/net/URI;)V
       8: return

  public org.apache.activemq.ActiveMQConnectionFactory(java.net.URI);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method org/apache/activemq/jndi/JNDIBaseStorable."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #6                  // Field dispatchAsync:Z
       9: aload_0
      10: iconst_1
      11: putfield      #7                  // Field alwaysSessionAsync:Z
      14: aload_0
      15: new           #8                  // class org/apache/activemq/management/JMSStatsImpl
      18: dup
      19: invokespecial #9                  // Method org/apache/activemq/management/JMSStatsImpl."<init>":()V
      22: putfield      #10                 // Field factoryStats:Lorg/apache/activemq/management/JMSStatsImpl;
      25: aload_0
      26: new           #11                 // class org/apache/activemq/ActiveMQPrefetchPolicy
      29: dup
      30: invokespecial #12                 // Method org/apache/activemq/ActiveMQPrefetchPolicy."<init>":()V
      33: putfield      #13                 // Field prefetchPolicy:Lorg/apache/activemq/ActiveMQPrefetchPolicy;
      36: aload_0
      37: new           #14                 // class org/apache/activemq/broker/region/policy/RedeliveryPolicyMap
      40: dup
      41: invokespecial #15                 // Method org/apache/activemq/broker/region/policy/RedeliveryPolicyMap."<init>":()V
      44: putfield      #16                 // Field redeliveryPolicyMap:Lorg/apache/activemq/broker/region/policy/RedeliveryPolicyMap;
      47: aload_0
      48: getfield      #16                 // Field redeliveryPolicyMap:Lorg/apache/activemq/broker/region/policy/RedeliveryPolicyMap;
      51: new           #17                 // class org/apache/activemq/RedeliveryPolicy
      54: dup
      55: invokespecial #18                 // Method org/apache/activemq/RedeliveryPolicy."<init>":()V
      58: invokevirtual #19                 // Method org/apache/activemq/broker/region/policy/RedeliveryPolicyMap.setDefaultEntry:(Lorg/apache/activemq/RedeliveryPolicy;)V
      61: aload_0
      62: new           #20                 // class org/apache/activemq/blob/BlobTransferPolicy
      65: dup
      66: invokespecial #21                 // Method org/apache/activemq/blob/BlobTransferPolicy."<init>":()V
      69: putfield      #22                 // Field blobTransferPolicy:Lorg/apache/activemq/blob/BlobTransferPolicy;
      72: aload_0
      73: iconst_1
      74: putfield      #23                 // Field optimizedMessageDispatch:Z
      77: aload_0
      78: ldc2_w        #24                 // long 300l
      81: putfield      #26                 // Field optimizeAcknowledgeTimeOut:J
      84: aload_0
      85: lconst_0
      86: putfield      #27                 // Field optimizedAckScheduledAckInterval:J
      89: aload_0
      90: iconst_1
      91: putfield      #28                 // Field copyMessageOnSend:Z
      94: aload_0
      95: sipush        15000
      98: putfield      #29                 // Field closeTimeout:I
     101: aload_0
     102: iconst_1
     103: putfield      #30                 // Field nestedMapAndListEnabled:Z
     106: aload_0
     107: iconst_1
     108: putfield      #31                 // Field watchTopicAdvisories:Z
     111: aload_0
     112: iconst_0
     113: putfield      #32                 // Field producerWindowSize:I
     116: aload_0
     117: ldc2_w        #33                 // long 500l
     120: putfield      #35                 // Field warnAboutUnstartedConnectionTimeout:J
     123: aload_0
     124: iconst_0
     125: putfield      #36                 // Field sendTimeout:I
     128: aload_0
     129: iconst_1
     130: putfield      #37                 // Field sendAcksAsync:Z
     133: aload_0
     134: sipush        2048
     137: putfield      #38                 // Field auditDepth:I
     140: aload_0
     141: bipush        64
     143: putfield      #39                 // Field auditMaximumProducerNumber:I
     146: aload_0
     147: lconst_0
     148: putfield      #40                 // Field consumerFailoverRedeliveryWaitPeriod:J
     151: aload_0
     152: iconst_1
     153: putfield      #41                 // Field checkForDuplicates:Z
     156: aload_0
     157: iconst_1
     158: putfield      #42                 // Field messagePrioritySupported:Z
     161: aload_0
     162: iconst_0
     163: putfield      #43                 // Field transactedIndividualAck:Z
     166: aload_0
     167: iconst_0
     168: putfield      #44                 // Field nonBlockingRedelivery:Z
     171: aload_0
     172: getstatic     #45                 // Field org/apache/activemq/ActiveMQConnection.DEFAULT_THREAD_POOL_SIZE:I
     175: putfield      #46                 // Field maxThreadPoolSize:I
     178: aload_0
     179: aconst_null
     180: putfield      #47                 // Field rejectedTaskHandler:Ljava/util/concurrent/RejectedExecutionHandler;
     183: aload_0
     184: iconst_m1
     185: putfield      #48                 // Field xaAckMode:I
     188: aload_0
     189: iconst_0
     190: putfield      #49                 // Field rmIdFromConnectionId:Z
     193: aload_0
     194: aload_1
     195: invokevirtual #50                 // Method java/net/URI.toString:()Ljava/lang/String;
     198: invokevirtual #51                 // Method setBrokerURL:(Ljava/lang/String;)V
     201: return

  public org.apache.activemq.ActiveMQConnectionFactory(java.lang.String, java.lang.String, java.net.URI);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method org/apache/activemq/jndi/JNDIBaseStorable."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #6                  // Field dispatchAsync:Z
       9: aload_0
      10: iconst_1
      11: putfield      #7                  // Field alwaysSessionAsync:Z
      14: aload_0
      15: new           #8                  // class org/apache/activemq/management/JMSStatsImpl
      18: dup
      19: invokespecial #9                  // Method org/apache/activemq/management/JMSStatsImpl."<init>":()V
      22: putfield      #10                 // Field factoryStats:Lorg/apache/activemq/management/JMSStatsImpl;
      25: aload_0
      26: new           #11                 // class org/apache/activemq/ActiveMQPrefetchPolicy
      29: dup
      30: invokespecial #12                 // Method org/apache/activemq/ActiveMQPrefetchPolicy."<init>":()V
      33: putfield      #13                 // Field prefetchPolicy:Lorg/apache/activemq/ActiveMQPrefetchPolicy;
      36: aload_0
      37: new           #14                 // class org/apache/activemq/broker/region/policy/RedeliveryPolicyMap
      40: dup
      41: invokespecial #15                 // Method org/apache/activemq/broker/region/policy/RedeliveryPolicyMap."<init>":()V
      44: putfield      #16                 // Field redeliveryPolicyMap:Lorg/apache/activemq/broker/region/policy/RedeliveryPolicyMap;
      47: aload_0
      48: getfield      #16                 // Field redeliveryPolicyMap:Lorg/apache/activemq/broker/region/policy/RedeliveryPolicyMap;
      51: new           #17                 // class org/apache/activemq/RedeliveryPolicy
      54: dup
      55: invokespecial #18                 // Method org/apache/activemq/RedeliveryPolicy."<init>":()V
      58: invokevirtual #19                 // Method org/apache/activemq/broker/region/policy/RedeliveryPolicyMap.setDefaultEntry:(Lorg/apache/activemq/RedeliveryPolicy;)V
      61: aload_0
      62: new           #20                 // class org/apache/activemq/blob/BlobTransferPolicy
      65: dup
      66: invokespecial #21                 // Method org/apache/activemq/blob/BlobTransferPolicy."<init>":()V
      69: putfield      #22                 // Field blobTransferPolicy:Lorg/apache/activemq/blob/BlobTransferPolicy;
      72: aload_0
      73: iconst_1
      74: putfield      #23                 // Field optimizedMessageDispatch:Z
      77: aload_0
      78: ldc2_w        #24                 // long 300l
      81: putfield      #26                 // Field optimizeAcknowledgeTimeOut:J
      84: aload_0
      85: lconst_0
      86: putfield      #27                 // Field optimizedAckScheduledAckInterval:J
      89: aload_0
      90: iconst_1
      91: putfield      #28                 // Field copyMessageOnSend:Z
      94: aload_0
      95: sipush        15000
      98: putfield      #29                 // Field closeTimeout:I
     101: aload_0
     102: iconst_1
     103: putfield      #30                 // Field nestedMapAndListEnabled:Z
     106: aload_0
     107: iconst_1
     108: putfield      #31                 // Field watchTopicAdvisories:Z
     111: aload_0
     112: iconst_0
     113: putfield      #32                 // Field producerWindowSize:I
     116: aload_0
     117: ldc2_w        #33                 // long 500l
     120: putfield      #35                 // Field warnAboutUnstartedConnectionTimeout:J
     123: aload_0
     124: iconst_0
     125: putfield      #36                 // Field sendTimeout:I
     128: aload_0
     129: iconst_1
     130: putfield      #37                 // Field sendAcksAsync:Z
     133: aload_0
     134: sipush        2048
     137: putfield      #38                 // Field auditDepth:I
     140: aload_0
     141: bipush        64
     143: putfield      #39                 // Field auditMaximumProducerNumber:I
     146: aload_0
     147: lconst_0
     148: putfield      #40                 // Field consumerFailoverRedeliveryWaitPeriod:J
     151: aload_0
     152: iconst_1
     153: putfield      #41                 // Field checkForDuplicates:Z
     156: aload_0
     157: iconst_1
     158: putfield      #42                 // Field messagePrioritySupported:Z
     161: aload_0
     162: iconst_0
     163: putfield      #43                 // Field transactedIndividualAck:Z
     166: aload_0
     167: iconst_0
     168: putfield      #44                 // Field nonBlockingRedelivery:Z
     171: aload_0
     172: getstatic     #45                 // Field org/apache/activemq/ActiveMQConnection.DEFAULT_THREAD_POOL_SIZE:I
     175: putfield      #46                 // Field maxThreadPoolSize:I
     178: aload_0
     179: aconst_null
     180: putfield      #47                 // Field rejectedTaskHandler:Ljava/util/concurrent/RejectedExecutionHandler;
     183: aload_0
     184: iconst_m1
     185: putfield      #48                 // Field xaAckMode:I
     188: aload_0
     189: iconst_0
     190: putfield      #49                 // Field rmIdFromConnectionId:Z
     193: aload_0
     194: aload_1
     195: invokevirtual #52                 // Method setUserName:(Ljava/lang/String;)V
     198: aload_0
     199: aload_2
     200: invokevirtual #53                 // Method setPassword:(Ljava/lang/String;)V
     203: aload_0
     204: aload_3
     205: invokevirtual #50                 // Method java/net/URI.toString:()Ljava/lang/String;
     208: invokevirtual #51                 // Method setBrokerURL:(Ljava/lang/String;)V
     211: return

  public org.apache.activemq.ActiveMQConnectionFactory(java.lang.String, java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method org/apache/activemq/jndi/JNDIBaseStorable."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #6                  // Field dispatchAsync:Z
       9: aload_0
      10: iconst_1
      11: putfield      #7                  // Field alwaysSessionAsync:Z
      14: aload_0
      15: new           #8                  // class org/apache/activemq/management/JMSStatsImpl
      18: dup
      19: invokespecial #9                  // Method org/apache/activemq/management/JMSStatsImpl."<init>":()V
      22: putfield      #10                 // Field factoryStats:Lorg/apache/activemq/management/JMSStatsImpl;
      25: aload_0
      26: new           #11                 // class org/apache/activemq/ActiveMQPrefetchPolicy
      29: dup
      30: invokespecial #12                 // Method org/apache/activemq/ActiveMQPrefetchPolicy."<init>":()V
      33: putfield      #13                 // Field prefetchPolicy:Lorg/apache/activemq/ActiveMQPrefetchPolicy;
      36: aload_0
      37: new           #14                 // class org/apache/activemq/broker/region/policy/RedeliveryPolicyMap
      40: dup
      41: invokespecial #15                 // Method org/apache/activemq/broker/region/policy/RedeliveryPolicyMap."<init>":()V
      44: putfield      #16                 // Field redeliveryPolicyMap:Lorg/apache/activemq/broker/region/policy/RedeliveryPolicyMap;
      47: aload_0
      48: getfield      #16                 // Field redeliveryPolicyMap:Lorg/apache/activemq/broker/region/policy/RedeliveryPolicyMap;
      51: new           #17                 // class org/apache/activemq/RedeliveryPolicy
      54: dup
      55: invokespecial #18                 // Method org/apache/activemq/RedeliveryPolicy."<init>":()V
      58: invokevirtual #19                 // Method org/apache/activemq/broker/region/policy/RedeliveryPolicyMap.setDefaultEntry:(Lorg/apache/activemq/RedeliveryPolicy;)V
      61: aload_0
      62: new           #20                 // class org/apache/activemq/blob/BlobTransferPolicy
      65: dup
      66: invokespecial #21                 // Method org/apache/activemq/blob/BlobTransferPolicy."<init>":()V
      69: putfield      #22                 // Field blobTransferPolicy:Lorg/apache/activemq/blob/BlobTransferPolicy;
      72: aload_0
      73: iconst_1
      74: putfield      #23                 // Field optimizedMessageDispatch:Z
      77: aload_0
      78: ldc2_w        #24                 // long 300l
      81: putfield      #26                 // Field optimizeAcknowledgeTimeOut:J
      84: aload_0
      85: lconst_0
      86: putfield      #27                 // Field optimizedAckScheduledAckInterval:J
      89: aload_0
      90: iconst_1
      91: putfield      #28                 // Field copyMessageOnSend:Z
      94: aload_0
      95: sipush        15000
      98: putfield      #29                 // Field closeTimeout:I
     101: aload_0
     102: iconst_1
     103: putfield      #30                 // Field nestedMapAndListEnabled:Z
     106: aload_0
     107: iconst_1
     108: putfield      #31                 // Field watchTopicAdvisories:Z
     111: aload_0
     112: iconst_0
     113: putfield      #32                 // Field producerWindowSize:I
     116: aload_0
     117: ldc2_w        #33                 // long 500l
     120: putfield      #35                 // Field warnAboutUnstartedConnectionTimeout:J
     123: aload_0
     124: iconst_0
     125: putfield      #36                 // Field sendTimeout:I
     128: aload_0
     129: iconst_1
     130: putfield      #37                 // Field sendAcksAsync:Z
     133: aload_0
     134: sipush        2048
     137: putfield      #38                 // Field auditDepth:I
     140: aload_0
     141: bipush        64
     143: putfield      #39                 // Field auditMaximumProducerNumber:I
     146: aload_0
     147: lconst_0
     148: putfield      #40                 // Field consumerFailoverRedeliveryWaitPeriod:J
     151: aload_0
     152: iconst_1
     153: putfield      #41                 // Field checkForDuplicates:Z
     156: aload_0
     157: iconst_1
     158: putfield      #42                 // Field messagePrioritySupported:Z
     161: aload_0
     162: iconst_0
     163: putfield      #43                 // Field transactedIndividualAck:Z
     166: aload_0
     167: iconst_0
     168: putfield      #44                 // Field nonBlockingRedelivery:Z
     171: aload_0
     172: getstatic     #45                 // Field org/apache/activemq/ActiveMQConnection.DEFAULT_THREAD_POOL_SIZE:I
     175: putfield      #46                 // Field maxThreadPoolSize:I
     178: aload_0
     179: aconst_null
     180: putfield      #47                 // Field rejectedTaskHandler:Ljava/util/concurrent/RejectedExecutionHandler;
     183: aload_0
     184: iconst_m1
     185: putfield      #48                 // Field xaAckMode:I
     188: aload_0
     189: iconst_0
     190: putfield      #49                 // Field rmIdFromConnectionId:Z
     193: aload_0
     194: aload_1
     195: invokevirtual #52                 // Method setUserName:(Ljava/lang/String;)V
     198: aload_0
     199: aload_2
     200: invokevirtual #53                 // Method setPassword:(Ljava/lang/String;)V
     203: aload_0
     204: aload_3
     205: invokevirtual #51                 // Method setBrokerURL:(Ljava/lang/String;)V
     208: return

  public org.apache.activemq.ActiveMQConnectionFactory copy();
    Code:
       0: aload_0
       1: invokespecial #54                 // Method java/lang/Object.clone:()Ljava/lang/Object;
       4: checkcast     #55                 // class org/apache/activemq/ActiveMQConnectionFactory
       7: areturn
       8: astore_1
       9: new           #57                 // class java/lang/RuntimeException
      12: dup
      13: new           #58                 // class java/lang/StringBuilder
      16: dup
      17: invokespecial #59                 // Method java/lang/StringBuilder."<init>":()V
      20: ldc           #60                 // String This should never happen:
      22: invokevirtual #61                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      25: aload_1
      26: invokevirtual #62                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      29: invokevirtual #63                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      32: aload_1
      33: invokespecial #64                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      36: athrow
    Exception table:
       from    to  target type
           0     7     8   Class java/lang/CloneNotSupportedException

  private static java.net.URI createURI(java.lang.String);
    Code:
       0: new           #65                 // class java/net/URI
       3: dup
       4: aload_0
       5: invokespecial #66                 // Method java/net/URI."<init>":(Ljava/lang/String;)V
       8: areturn
       9: astore_1
      10: new           #68                 // class java/lang/IllegalArgumentException
      13: dup
      14: new           #58                 // class java/lang/StringBuilder
      17: dup
      18: invokespecial #59                 // Method java/lang/StringBuilder."<init>":()V
      21: ldc           #69                 // String Invalid broker URI:
      23: invokevirtual #61                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      26: aload_0
      27: invokevirtual #61                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      30: invokevirtual #63                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      33: invokespecial #70                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      36: aload_1
      37: invokevirtual #71                 // Method java/lang/IllegalArgumentException.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;
      40: checkcast     #68                 // class java/lang/IllegalArgumentException
      43: athrow
    Exception table:
       from    to  target type
           0     8     9   Class java/net/URISyntaxException

  public javax.jms.Connection createConnection() throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: invokevirtual #72                 // Method createActiveMQConnection:()Lorg/apache/activemq/ActiveMQConnection;
       4: areturn

  public javax.jms.Connection createConnection(java.lang.String, java.lang.String) throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #73                 // Method createActiveMQConnection:(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/activemq/ActiveMQConnection;
       6: areturn

  public javax.jms.QueueConnection createQueueConnection() throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: invokevirtual #72                 // Method createActiveMQConnection:()Lorg/apache/activemq/ActiveMQConnection;
       4: invokevirtual #74                 // Method org/apache/activemq/ActiveMQConnection.enforceQueueOnlyConnection:()Lorg/apache/activemq/ActiveMQConnection;
       7: areturn

  public javax.jms.QueueConnection createQueueConnection(java.lang.String, java.lang.String) throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #73                 // Method createActiveMQConnection:(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/activemq/ActiveMQConnection;
       6: invokevirtual #74                 // Method org/apache/activemq/ActiveMQConnection.enforceQueueOnlyConnection:()Lorg/apache/activemq/ActiveMQConnection;
       9: areturn

  public javax.jms.TopicConnection createTopicConnection() throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: invokevirtual #72                 // Method createActiveMQConnection:()Lorg/apache/activemq/ActiveMQConnection;
       4: areturn

  public javax.jms.TopicConnection createTopicConnection(java.lang.String, java.lang.String) throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #73                 // Method createActiveMQConnection:(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/activemq/ActiveMQConnection;
       6: areturn

  public org.apache.activemq.management.StatsImpl getStats();
    Code:
       0: aload_0
       1: getfield      #10                 // Field factoryStats:Lorg/apache/activemq/management/JMSStatsImpl;
       4: areturn

  protected org.apache.activemq.ActiveMQConnection createActiveMQConnection() throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #75                 // Field userName:Ljava/lang/String;
       5: aload_0
       6: getfield      #76                 // Field password:Ljava/lang/String;
       9: invokevirtual #73                 // Method createActiveMQConnection:(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/activemq/ActiveMQConnection;
      12: areturn

  protected org.apache.activemq.transport.Transport createTransport() throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: getfield      #77                 // Field brokerURL:Ljava/net/URI;
       4: invokestatic  #78                 // Method org/apache/activemq/transport/TransportFactory.connect:(Ljava/net/URI;)Lorg/apache/activemq/transport/Transport;
       7: areturn
       8: astore_1
       9: new           #58                 // class java/lang/StringBuilder
      12: dup
      13: invokespecial #59                 // Method java/lang/StringBuilder."<init>":()V
      16: ldc           #80                 // String Could not create Transport. Reason:
      18: invokevirtual #61                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      21: aload_1
      22: invokevirtual #62                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      25: invokevirtual #63                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      28: aload_1
      29: invokestatic  #81                 // Method org/apache/activemq/util/JMSExceptionSupport.create:(Ljava/lang/String;Ljava/lang/Exception;)Ljavax/jms/JMSException;
      32: athrow
    Exception table:
       from    to  target type
           0     7     8   Class java/lang/Exception

  protected org.apache.activemq.ActiveMQConnection createActiveMQConnection(java.lang.String, java.lang.String) throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: getfield      #77                 // Field brokerURL:Ljava/net/URI;
       4: ifnonnull     17
       7: new           #82                 // class org/apache/activemq/ConfigurationException
      10: dup
      11: ldc           #83                 // String brokerURL not set.
      13: invokespecial #84                 // Method org/apache/activemq/ConfigurationException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aconst_null
      18: astore_3
      19: aload_0
      20: invokevirtual #85                 // Method createTransport:()Lorg/apache/activemq/transport/Transport;
      23: astore        4
      25: aload_0
      26: aload         4
      28: aload_0
      29: getfield      #10                 // Field factoryStats:Lorg/apache/activemq/management/JMSStatsImpl;
      32: invokevirtual #86                 // Method createActiveMQConnection:(Lorg/apache/activemq/transport/Transport;Lorg/apache/activemq/management/JMSStatsImpl;)Lorg/apache/activemq/ActiveMQConnection;
      35: astore_3
      36: aload_3
      37: aload_1
      38: invokevirtual #87                 // Method org/apache/activemq/ActiveMQConnection.setUserName:(Ljava/lang/String;)V
      41: aload_3
      42: aload_2
      43: invokevirtual #88                 // Method org/apache/activemq/ActiveMQConnection.setPassword:(Ljava/lang/String;)V
      46: aload_0
      47: aload_3
      48: invokevirtual #89                 // Method configureConnection:(Lorg/apache/activemq/ActiveMQConnection;)V
      51: aload         4
      53: invokeinterface #90,  1           // InterfaceMethod org/apache/activemq/transport/Transport.start:()V
      58: aload_0
      59: getfield      #91                 // Field clientID:Ljava/lang/String;
      62: ifnull        73
      65: aload_3
      66: aload_0
      67: getfield      #91                 // Field clientID:Ljava/lang/String;
      70: invokevirtual #92                 // Method org/apache/activemq/ActiveMQConnection.setDefaultClientID:(Ljava/lang/String;)V
      73: aload_3
      74: areturn
      75: astore        4
      77: aload_3
      78: invokevirtual #94                 // Method org/apache/activemq/ActiveMQConnection.close:()V
      81: goto          86
      84: astore        5
      86: aload         4
      88: athrow
      89: astore        4
      91: aload_3
      92: invokevirtual #94                 // Method org/apache/activemq/ActiveMQConnection.close:()V
      95: goto          100
      98: astore        5
     100: new           #58                 // class java/lang/StringBuilder
     103: dup
     104: invokespecial #59                 // Method java/lang/StringBuilder."<init>":()V
     107: ldc           #96                 // String Could not connect to broker URL:
     109: invokevirtual #61                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     112: aload_0
     113: getfield      #77                 // Field brokerURL:Ljava/net/URI;
     116: invokevirtual #62                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     119: ldc           #97                 // String . Reason:
     121: invokevirtual #61                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     124: aload         4
     126: invokevirtual #62                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     129: invokevirtual #63                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     132: aload         4
     134: invokestatic  #81                 // Method org/apache/activemq/util/JMSExceptionSupport.create:(Ljava/lang/String;Ljava/lang/Exception;)Ljavax/jms/JMSException;
     137: athrow
    Exception table:
       from    to  target type
          19    74    75   Class javax/jms/JMSException
          77    81    84   Class java/lang/Throwable
          19    74    89   Class java/lang/Exception
          91    95    98   Class java/lang/Throwable

  protected org.apache.activemq.ActiveMQConnection createActiveMQConnection(org.apache.activemq.transport.Transport, org.apache.activemq.management.JMSStatsImpl) throws java.lang.Exception;
    Code:
       0: new           #98                 // class org/apache/activemq/ActiveMQConnection
       3: dup
       4: aload_1
       5: aload_0
       6: invokevirtual #99                 // Method getClientIdGenerator:()Lorg/apache/activemq/util/IdGenerator;
       9: aload_0
      10: invokevirtual #100                // Method getConnectionIdGenerator:()Lorg/apache/activemq/util/IdGenerator;
      13: aload_2
      14: invokespecial #101                // Method org/apache/activemq/ActiveMQConnection."<init>":(Lorg/apache/activemq/transport/Transport;Lorg/apache/activemq/util/IdGenerator;Lorg/apache/activemq/util/IdGenerator;Lorg/apache/activemq/management/JMSStatsImpl;)V
      17: astore_3
      18: aload_3
      19: areturn

  protected void configureConnection(org.apache.activemq.ActiveMQConnection) throws javax.jms.JMSException;
    Code:
       0: aload_1
       1: aload_0
       2: invokevirtual #102                // Method getPrefetchPolicy:()Lorg/apache/activemq/ActiveMQPrefetchPolicy;
       5: invokevirtual #103                // Method org/apache/activemq/ActiveMQConnection.setPrefetchPolicy:(Lorg/apache/activemq/ActiveMQPrefetchPolicy;)V
       8: aload_1
       9: aload_0
      10: invokevirtual #104                // Method isDisableTimeStampsByDefault:()Z
      13: invokevirtual #105                // Method org/apache/activemq/ActiveMQConnection.setDisableTimeStampsByDefault:(Z)V
      16: aload_1
      17: aload_0
      18: invokevirtual #106                // Method isOptimizedMessageDispatch:()Z
      21: invokevirtual #107                // Method org/apache/activemq/ActiveMQConnection.setOptimizedMessageDispatch:(Z)V
      24: aload_1
      25: aload_0
      26: invokevirtual #108                // Method isCopyMessageOnSend:()Z
      29: invokevirtual #109                // Method org/apache/activemq/ActiveMQConnection.setCopyMessageOnSend:(Z)V
      32: aload_1
      33: aload_0
      34: invokevirtual #110                // Method isUseCompression:()Z
      37: invokevirtual #111                // Method org/apache/activemq/ActiveMQConnection.setUseCompression:(Z)V
      40: aload_1
      41: aload_0
      42: invokevirtual #112                // Method isObjectMessageSerializationDefered:()Z
      45: invokevirtual #113                // Method org/apache/activemq/ActiveMQConnection.setObjectMessageSerializationDefered:(Z)V
      48: aload_1
      49: aload_0
      50: invokevirtual #114                // Method isDispatchAsync:()Z
      53: invokevirtual #115                // Method org/apache/activemq/ActiveMQConnection.setDispatchAsync:(Z)V
      56: aload_1
      57: aload_0
      58: invokevirtual #116                // Method isUseAsyncSend:()Z
      61: invokevirtual #117                // Method org/apache/activemq/ActiveMQConnection.setUseAsyncSend:(Z)V
      64: aload_1
      65: aload_0
      66: invokevirtual #118                // Method isAlwaysSyncSend:()Z
      69: invokevirtual #119                // Method org/apache/activemq/ActiveMQConnection.setAlwaysSyncSend:(Z)V
      72: aload_1
      73: aload_0
      74: invokevirtual #120                // Method isAlwaysSessionAsync:()Z
      77: invokevirtual #121                // Method org/apache/activemq/ActiveMQConnection.setAlwaysSessionAsync:(Z)V
      80: aload_1
      81: aload_0
      82: invokevirtual #122                // Method isOptimizeAcknowledge:()Z
      85: invokevirtual #123                // Method org/apache/activemq/ActiveMQConnection.setOptimizeAcknowledge:(Z)V
      88: aload_1
      89: aload_0
      90: invokevirtual #124                // Method getOptimizeAcknowledgeTimeOut:()J
      93: invokevirtual #125                // Method org/apache/activemq/ActiveMQConnection.setOptimizeAcknowledgeTimeOut:(J)V
      96: aload_1
      97: aload_0
      98: invokevirtual #126                // Method getOptimizedAckScheduledAckInterval:()J
     101: invokevirtual #127                // Method org/apache/activemq/ActiveMQConnection.setOptimizedAckScheduledAckInterval:(J)V
     104: aload_1
     105: aload_0
     106: invokevirtual #128                // Method isUseRetroactiveConsumer:()Z
     109: invokevirtual #129                // Method org/apache/activemq/ActiveMQConnection.setUseRetroactiveConsumer:(Z)V
     112: aload_1
     113: aload_0
     114: invokevirtual #130                // Method isExclusiveConsumer:()Z
     117: invokevirtual #131                // Method org/apache/activemq/ActiveMQConnection.setExclusiveConsumer:(Z)V
     120: aload_1
     121: aload_0
     122: invokevirtual #132                // Method getRedeliveryPolicyMap:()Lorg/apache/activemq/broker/region/policy/RedeliveryPolicyMap;
     125: invokevirtual #133                // Method org/apache/activemq/ActiveMQConnection.setRedeliveryPolicyMap:(Lorg/apache/activemq/broker/region/policy/RedeliveryPolicyMap;)V
     128: aload_1
     129: aload_0
     130: invokevirtual #134                // Method getTransformer:()Lorg/apache/activemq/MessageTransformer;
     133: invokevirtual #135                // Method org/apache/activemq/ActiveMQConnection.setTransformer:(Lorg/apache/activemq/MessageTransformer;)V
     136: aload_1
     137: aload_0
     138: invokevirtual #136                // Method getBlobTransferPolicy:()Lorg/apache/activemq/blob/BlobTransferPolicy;
     141: invokevirtual #137                // Method org/apache/activemq/blob/BlobTransferPolicy.copy:()Lorg/apache/activemq/blob/BlobTransferPolicy;
     144: invokevirtual #138                // Method org/apache/activemq/ActiveMQConnection.setBlobTransferPolicy:(Lorg/apache/activemq/blob/BlobTransferPolicy;)V
     147: aload_1
     148: aload_0
     149: invokevirtual #139                // Method isWatchTopicAdvisories:()Z
     152: invokevirtual #140                // Method org/apache/activemq/ActiveMQConnection.setWatchTopicAdvisories:(Z)V
     155: aload_1
     156: aload_0
     157: invokevirtual #141                // Method getProducerWindowSize:()I
     160: invokevirtual #142                // Method org/apache/activemq/ActiveMQConnection.setProducerWindowSize:(I)V
     163: aload_1
     164: aload_0
     165: invokevirtual #143                // Method getWarnAboutUnstartedConnectionTimeout:()J
     168: invokevirtual #144                // Method org/apache/activemq/ActiveMQConnection.setWarnAboutUnstartedConnectionTimeout:(J)V
     171: aload_1
     172: aload_0
     173: invokevirtual #145                // Method getSendTimeout:()I
     176: invokevirtual #146                // Method org/apache/activemq/ActiveMQConnection.setSendTimeout:(I)V
     179: aload_1
     180: aload_0
     181: invokevirtual #147                // Method getCloseTimeout:()I
     184: invokevirtual #148                // Method org/apache/activemq/ActiveMQConnection.setCloseTimeout:(I)V
     187: aload_1
     188: aload_0
     189: invokevirtual #149                // Method isSendAcksAsync:()Z
     192: invokevirtual #150                // Method org/apache/activemq/ActiveMQConnection.setSendAcksAsync:(Z)V
     195: aload_1
     196: aload_0
     197: invokevirtual #151                // Method getAuditDepth:()I
     200: invokevirtual #152                // Method org/apache/activemq/ActiveMQConnection.setAuditDepth:(I)V
     203: aload_1
     204: aload_0
     205: invokevirtual #153                // Method getAuditMaximumProducerNumber:()I
     208: invokevirtual #154                // Method org/apache/activemq/ActiveMQConnection.setAuditMaximumProducerNumber:(I)V
     211: aload_1
     212: aload_0
     213: invokevirtual #155                // Method isUseDedicatedTaskRunner:()Z
     216: invokevirtual #156                // Method org/apache/activemq/ActiveMQConnection.setUseDedicatedTaskRunner:(Z)V
     219: aload_1
     220: aload_0
     221: invokevirtual #157                // Method getConsumerFailoverRedeliveryWaitPeriod:()J
     224: invokevirtual #158                // Method org/apache/activemq/ActiveMQConnection.setConsumerFailoverRedeliveryWaitPeriod:(J)V
     227: aload_1
     228: aload_0
     229: invokevirtual #159                // Method isCheckForDuplicates:()Z
     232: invokevirtual #160                // Method org/apache/activemq/ActiveMQConnection.setCheckForDuplicates:(Z)V
     235: aload_1
     236: aload_0
     237: invokevirtual #161                // Method isMessagePrioritySupported:()Z
     240: invokevirtual #162                // Method org/apache/activemq/ActiveMQConnection.setMessagePrioritySupported:(Z)V
     243: aload_1
     244: aload_0
     245: invokevirtual #163                // Method isTransactedIndividualAck:()Z
     248: invokevirtual #164                // Method org/apache/activemq/ActiveMQConnection.setTransactedIndividualAck:(Z)V
     251: aload_1
     252: aload_0
     253: invokevirtual #165                // Method isNonBlockingRedelivery:()Z
     256: invokevirtual #166                // Method org/apache/activemq/ActiveMQConnection.setNonBlockingRedelivery:(Z)V
     259: aload_1
     260: aload_0
     261: invokevirtual #167                // Method getMaxThreadPoolSize:()I
     264: invokevirtual #168                // Method org/apache/activemq/ActiveMQConnection.setMaxThreadPoolSize:(I)V
     267: aload_1
     268: aload_0
     269: invokevirtual #169                // Method getSessionTaskRunner:()Lorg/apache/activemq/thread/TaskRunnerFactory;
     272: invokevirtual #170                // Method org/apache/activemq/ActiveMQConnection.setSessionTaskRunner:(Lorg/apache/activemq/thread/TaskRunnerFactory;)V
     275: aload_1
     276: aload_0
     277: invokevirtual #171                // Method getRejectedTaskHandler:()Ljava/util/concurrent/RejectedExecutionHandler;
     280: invokevirtual #172                // Method org/apache/activemq/ActiveMQConnection.setRejectedTaskHandler:(Ljava/util/concurrent/RejectedExecutionHandler;)V
     283: aload_1
     284: aload_0
     285: invokevirtual #173                // Method isNestedMapAndListEnabled:()Z
     288: invokevirtual #174                // Method org/apache/activemq/ActiveMQConnection.setNestedMapAndListEnabled:(Z)V
     291: aload_1
     292: aload_0
     293: invokevirtual #175                // Method isRmIdFromConnectionId:()Z
     296: invokevirtual #176                // Method org/apache/activemq/ActiveMQConnection.setRmIdFromConnectionId:(Z)V
     299: aload_0
     300: getfield      #177                // Field transportListener:Lorg/apache/activemq/transport/TransportListener;
     303: ifnull        314
     306: aload_1
     307: aload_0
     308: getfield      #177                // Field transportListener:Lorg/apache/activemq/transport/TransportListener;
     311: invokevirtual #178                // Method org/apache/activemq/ActiveMQConnection.addTransportListener:(Lorg/apache/activemq/transport/TransportListener;)V
     314: aload_0
     315: getfield      #179                // Field exceptionListener:Ljavax/jms/ExceptionListener;
     318: ifnull        329
     321: aload_1
     322: aload_0
     323: getfield      #179                // Field exceptionListener:Ljavax/jms/ExceptionListener;
     326: invokevirtual #180                // Method org/apache/activemq/ActiveMQConnection.setExceptionListener:(Ljavax/jms/ExceptionListener;)V
     329: aload_0
     330: getfield      #181                // Field clientInternalExceptionListener:Lorg/apache/activemq/ClientInternalExceptionListener;
     333: ifnull        344
     336: aload_1
     337: aload_0
     338: getfield      #181                // Field clientInternalExceptionListener:Lorg/apache/activemq/ClientInternalExceptionListener;
     341: invokevirtual #182                // Method org/apache/activemq/ActiveMQConnection.setClientInternalExceptionListener:(Lorg/apache/activemq/ClientInternalExceptionListener;)V
     344: return

  public java.lang.String getBrokerURL();
    Code:
       0: aload_0
       1: getfield      #77                 // Field brokerURL:Ljava/net/URI;
       4: ifnonnull     11
       7: aconst_null
       8: goto          18
      11: aload_0
      12: getfield      #77                 // Field brokerURL:Ljava/net/URI;
      15: invokevirtual #50                 // Method java/net/URI.toString:()Ljava/lang/String;
      18: areturn

  public void setBrokerURL(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #3                  // Method createURI:(Ljava/lang/String;)Ljava/net/URI;
       5: putfield      #77                 // Field brokerURL:Ljava/net/URI;
       8: aload_0
       9: getfield      #77                 // Field brokerURL:Ljava/net/URI;
      12: invokevirtual #183                // Method java/net/URI.getQuery:()Ljava/lang/String;
      15: ifnull        137
      18: aload_0
      19: getfield      #77                 // Field brokerURL:Ljava/net/URI;
      22: invokevirtual #183                // Method java/net/URI.getQuery:()Ljava/lang/String;
      25: invokestatic  #184                // Method org/apache/activemq/util/URISupport.parseQuery:(Ljava/lang/String;)Ljava/util/Map;
      28: astore_2
      29: aload_2
      30: ldc           #185                // String jms.
      32: invokestatic  #186                // Method org/apache/activemq/util/IntrospectionSupport.extractProperties:(Ljava/util/Map;Ljava/lang/String;)Ljava/util/Map;
      35: astore_3
      36: aload_0
      37: aload_3
      38: invokevirtual #187                // Method buildFromMap:(Ljava/util/Map;)Z
      41: ifeq          130
      44: aload_3
      45: invokeinterface #188,  1          // InterfaceMethod java/util/Map.isEmpty:()Z
      50: ifne          118
      53: new           #58                 // class java/lang/StringBuilder
      56: dup
      57: invokespecial #59                 // Method java/lang/StringBuilder."<init>":()V
      60: ldc           #189                // String There are
      62: invokevirtual #61                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      65: aload_3
      66: invokeinterface #190,  1          // InterfaceMethod java/util/Map.size:()I
      71: invokevirtual #191                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      74: ldc           #192                // String  jms options that couldn\'t be set on the ConnectionFactory.
      76: invokevirtual #61                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      79: ldc           #193                // String  Check the options are spelled correctly.
      81: invokevirtual #61                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      84: ldc           #194                // String  Unknown parameters=[
      86: invokevirtual #61                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      89: aload_3
      90: invokevirtual #62                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      93: ldc           #195                // String ].
      95: invokevirtual #61                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      98: ldc           #196                // String  This connection factory cannot be started.
     100: invokevirtual #61                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     103: invokevirtual #63                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     106: astore        4
     108: new           #68                 // class java/lang/IllegalArgumentException
     111: dup
     112: aload         4
     114: invokespecial #70                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     117: athrow
     118: aload_0
     119: aload_0
     120: getfield      #77                 // Field brokerURL:Ljava/net/URI;
     123: aload_2
     124: invokestatic  #197                // Method org/apache/activemq/util/URISupport.createRemainingURI:(Ljava/net/URI;Ljava/util/Map;)Ljava/net/URI;
     127: putfield      #77                 // Field brokerURL:Ljava/net/URI;
     130: goto          249
     133: astore_2
     134: goto          249
     137: aload_0
     138: getfield      #77                 // Field brokerURL:Ljava/net/URI;
     141: invokestatic  #198                // Method org/apache/activemq/util/URISupport.parseComposite:(Ljava/net/URI;)Lorg/apache/activemq/util/URISupport$CompositeData;
     144: astore_2
     145: aload_2
     146: invokevirtual #199                // Method org/apache/activemq/util/URISupport$CompositeData.getParameters:()Ljava/util/Map;
     149: ldc           #185                // String jms.
     151: invokestatic  #186                // Method org/apache/activemq/util/IntrospectionSupport.extractProperties:(Ljava/util/Map;Ljava/lang/String;)Ljava/util/Map;
     154: astore_3
     155: aload_0
     156: aload_3
     157: invokevirtual #187                // Method buildFromMap:(Ljava/util/Map;)Z
     160: ifeq          245
     163: aload_3
     164: invokeinterface #188,  1          // InterfaceMethod java/util/Map.isEmpty:()Z
     169: ifne          237
     172: new           #58                 // class java/lang/StringBuilder
     175: dup
     176: invokespecial #59                 // Method java/lang/StringBuilder."<init>":()V
     179: ldc           #189                // String There are
     181: invokevirtual #61                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     184: aload_3
     185: invokeinterface #190,  1          // InterfaceMethod java/util/Map.size:()I
     190: invokevirtual #191                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     193: ldc           #192                // String  jms options that couldn\'t be set on the ConnectionFactory.
     195: invokevirtual #61                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     198: ldc           #193                // String  Check the options are spelled correctly.
     200: invokevirtual #61                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     203: ldc           #194                // String  Unknown parameters=[
     205: invokevirtual #61                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     208: aload_3
     209: invokevirtual #62                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     212: ldc           #195                // String ].
     214: invokevirtual #61                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     217: ldc           #196                // String  This connection factory cannot be started.
     219: invokevirtual #61                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     222: invokevirtual #63                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     225: astore        4
     227: new           #68                 // class java/lang/IllegalArgumentException
     230: dup
     231: aload         4
     233: invokespecial #70                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     236: athrow
     237: aload_0
     238: aload_2
     239: invokevirtual #200                // Method org/apache/activemq/util/URISupport$CompositeData.toURI:()Ljava/net/URI;
     242: putfield      #77                 // Field brokerURL:Ljava/net/URI;
     245: goto          249
     248: astore_2
     249: return
    Exception table:
       from    to  target type
          18   130   133   Class java/net/URISyntaxException
         137   245   248   Class java/net/URISyntaxException

  public java.lang.String getClientID();
    Code:
       0: aload_0
       1: getfield      #91                 // Field clientID:Ljava/lang/String;
       4: areturn

  public void setClientID(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #91                 // Field clientID:Ljava/lang/String;
       5: return

  public boolean isCopyMessageOnSend();
    Code:
       0: aload_0
       1: getfield      #28                 // Field copyMessageOnSend:Z
       4: ireturn

  public void setCopyMessageOnSend(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #28                 // Field copyMessageOnSend:Z
       5: return

  public boolean isDisableTimeStampsByDefault();
    Code:
       0: aload_0
       1: getfield      #201                // Field disableTimeStampsByDefault:Z
       4: ireturn

  public void setDisableTimeStampsByDefault(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #201                // Field disableTimeStampsByDefault:Z
       5: return

  public boolean isOptimizedMessageDispatch();
    Code:
       0: aload_0
       1: getfield      #23                 // Field optimizedMessageDispatch:Z
       4: ireturn

  public void setOptimizedMessageDispatch(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #23                 // Field optimizedMessageDispatch:Z
       5: return

  public java.lang.String getPassword();
    Code:
       0: aload_0
       1: getfield      #76                 // Field password:Ljava/lang/String;
       4: areturn

  public void setPassword(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #76                 // Field password:Ljava/lang/String;
       5: return

  public org.apache.activemq.ActiveMQPrefetchPolicy getPrefetchPolicy();
    Code:
       0: aload_0
       1: getfield      #13                 // Field prefetchPolicy:Lorg/apache/activemq/ActiveMQPrefetchPolicy;
       4: areturn

  public void setPrefetchPolicy(org.apache.activemq.ActiveMQPrefetchPolicy);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #13                 // Field prefetchPolicy:Lorg/apache/activemq/ActiveMQPrefetchPolicy;
       5: return

  public boolean isUseAsyncSend();
    Code:
       0: aload_0
       1: getfield      #202                // Field useAsyncSend:Z
       4: ireturn

  public org.apache.activemq.blob.BlobTransferPolicy getBlobTransferPolicy();
    Code:
       0: aload_0
       1: getfield      #22                 // Field blobTransferPolicy:Lorg/apache/activemq/blob/BlobTransferPolicy;
       4: areturn

  public void setBlobTransferPolicy(org.apache.activemq.blob.BlobTransferPolicy);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #22                 // Field blobTransferPolicy:Lorg/apache/activemq/blob/BlobTransferPolicy;
       5: return

  public void setUseAsyncSend(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #202                // Field useAsyncSend:Z
       5: return

  public synchronized boolean isWatchTopicAdvisories();
    Code:
       0: aload_0
       1: getfield      #31                 // Field watchTopicAdvisories:Z
       4: ireturn

  public synchronized void setWatchTopicAdvisories(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #31                 // Field watchTopicAdvisories:Z
       5: return

  public boolean isAlwaysSyncSend();
    Code:
       0: aload_0
       1: getfield      #203                // Field alwaysSyncSend:Z
       4: ireturn

  public void setAlwaysSyncSend(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #203                // Field alwaysSyncSend:Z
       5: return

  public java.lang.String getUserName();
    Code:
       0: aload_0
       1: getfield      #75                 // Field userName:Ljava/lang/String;
       4: areturn

  public void setUserName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #75                 // Field userName:Ljava/lang/String;
       5: return

  public boolean isUseRetroactiveConsumer();
    Code:
       0: aload_0
       1: getfield      #204                // Field useRetroactiveConsumer:Z
       4: ireturn

  public void setUseRetroactiveConsumer(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #204                // Field useRetroactiveConsumer:Z
       5: return

  public boolean isExclusiveConsumer();
    Code:
       0: aload_0
       1: getfield      #205                // Field exclusiveConsumer:Z
       4: ireturn

  public void setExclusiveConsumer(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #205                // Field exclusiveConsumer:Z
       5: return

  public org.apache.activemq.RedeliveryPolicy getRedeliveryPolicy();
    Code:
       0: aload_0
       1: getfield      #16                 // Field redeliveryPolicyMap:Lorg/apache/activemq/broker/region/policy/RedeliveryPolicyMap;
       4: invokevirtual #206                // Method org/apache/activemq/broker/region/policy/RedeliveryPolicyMap.getDefaultEntry:()Lorg/apache/activemq/RedeliveryPolicy;
       7: areturn

  public void setRedeliveryPolicy(org.apache.activemq.RedeliveryPolicy);
    Code:
       0: aload_0
       1: getfield      #16                 // Field redeliveryPolicyMap:Lorg/apache/activemq/broker/region/policy/RedeliveryPolicyMap;
       4: aload_1
       5: invokevirtual #19                 // Method org/apache/activemq/broker/region/policy/RedeliveryPolicyMap.setDefaultEntry:(Lorg/apache/activemq/RedeliveryPolicy;)V
       8: return

  public org.apache.activemq.broker.region.policy.RedeliveryPolicyMap getRedeliveryPolicyMap();
    Code:
       0: aload_0
       1: getfield      #16                 // Field redeliveryPolicyMap:Lorg/apache/activemq/broker/region/policy/RedeliveryPolicyMap;
       4: areturn

  public void setRedeliveryPolicyMap(org.apache.activemq.broker.region.policy.RedeliveryPolicyMap);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #16                 // Field redeliveryPolicyMap:Lorg/apache/activemq/broker/region/policy/RedeliveryPolicyMap;
       5: return

  public org.apache.activemq.MessageTransformer getTransformer();
    Code:
       0: aload_0
       1: getfield      #207                // Field transformer:Lorg/apache/activemq/MessageTransformer;
       4: areturn

  public int getSendTimeout();
    Code:
       0: aload_0
       1: getfield      #36                 // Field sendTimeout:I
       4: ireturn

  public void setSendTimeout(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #36                 // Field sendTimeout:I
       5: return

  public boolean isSendAcksAsync();
    Code:
       0: aload_0
       1: getfield      #37                 // Field sendAcksAsync:Z
       4: ireturn

  public void setSendAcksAsync(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #37                 // Field sendAcksAsync:Z
       5: return

  public boolean isMessagePrioritySupported();
    Code:
       0: aload_0
       1: getfield      #42                 // Field messagePrioritySupported:Z
       4: ireturn

  public void setMessagePrioritySupported(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #42                 // Field messagePrioritySupported:Z
       5: return

  public void setTransformer(org.apache.activemq.MessageTransformer);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #207                // Field transformer:Lorg/apache/activemq/MessageTransformer;
       5: return

  public void buildFromProperties(java.util.Properties);
    Code:
       0: aload_1
       1: ifnonnull     12
       4: new           #208                // class java/util/Properties
       7: dup
       8: invokespecial #209                // Method java/util/Properties."<init>":()V
      11: astore_1
      12: aload_1
      13: ldc           #210                // String java.naming.provider.url
      15: invokevirtual #211                // Method java/util/Properties.getProperty:(Ljava/lang/String;)Ljava/lang/String;
      18: astore_2
      19: aload_2
      20: ifnull        30
      23: aload_2
      24: invokevirtual #212                // Method java/lang/String.length:()I
      27: ifne          37
      30: aload_1
      31: ldc           #213                // String brokerURL
      33: invokevirtual #211                // Method java/util/Properties.getProperty:(Ljava/lang/String;)Ljava/lang/String;
      36: astore_2
      37: aload_2
      38: ifnull        53
      41: aload_2
      42: invokevirtual #212                // Method java/lang/String.length:()I
      45: ifle          53
      48: aload_0
      49: aload_2
      50: invokevirtual #51                 // Method setBrokerURL:(Ljava/lang/String;)V
      53: new           #214                // class java/util/HashMap
      56: dup
      57: aload_1
      58: invokespecial #215                // Method java/util/HashMap."<init>":(Ljava/util/Map;)V
      61: astore_3
      62: aload_0
      63: aload_3
      64: invokevirtual #187                // Method buildFromMap:(Ljava/util/Map;)Z
      67: pop
      68: return

  public boolean buildFromMap(java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: iconst_0
       1: istore_2
       2: new           #11                 // class org/apache/activemq/ActiveMQPrefetchPolicy
       5: dup
       6: invokespecial #12                 // Method org/apache/activemq/ActiveMQPrefetchPolicy."<init>":()V
       9: astore_3
      10: aload_3
      11: aload_1
      12: ldc           #216                // String prefetchPolicy.
      14: invokestatic  #217                // Method org/apache/activemq/util/IntrospectionSupport.setProperties:(Ljava/lang/Object;Ljava/util/Map;Ljava/lang/String;)Z
      17: ifeq          27
      20: aload_0
      21: aload_3
      22: invokevirtual #218                // Method setPrefetchPolicy:(Lorg/apache/activemq/ActiveMQPrefetchPolicy;)V
      25: iconst_1
      26: istore_2
      27: new           #17                 // class org/apache/activemq/RedeliveryPolicy
      30: dup
      31: invokespecial #18                 // Method org/apache/activemq/RedeliveryPolicy."<init>":()V
      34: astore        4
      36: aload         4
      38: aload_1
      39: ldc           #219                // String redeliveryPolicy.
      41: invokestatic  #217                // Method org/apache/activemq/util/IntrospectionSupport.setProperties:(Ljava/lang/Object;Ljava/util/Map;Ljava/lang/String;)Z
      44: ifeq          55
      47: aload_0
      48: aload         4
      50: invokevirtual #220                // Method setRedeliveryPolicy:(Lorg/apache/activemq/RedeliveryPolicy;)V
      53: iconst_1
      54: istore_2
      55: new           #20                 // class org/apache/activemq/blob/BlobTransferPolicy
      58: dup
      59: invokespecial #21                 // Method org/apache/activemq/blob/BlobTransferPolicy."<init>":()V
      62: astore        5
      64: aload         5
      66: aload_1
      67: ldc           #221                // String blobTransferPolicy.
      69: invokestatic  #217                // Method org/apache/activemq/util/IntrospectionSupport.setProperties:(Ljava/lang/Object;Ljava/util/Map;Ljava/lang/String;)Z
      72: ifeq          83
      75: aload_0
      76: aload         5
      78: invokevirtual #222                // Method setBlobTransferPolicy:(Lorg/apache/activemq/blob/BlobTransferPolicy;)V
      81: iconst_1
      82: istore_2
      83: iload_2
      84: aload_0
      85: aload_1
      86: invokestatic  #223                // Method org/apache/activemq/util/IntrospectionSupport.setProperties:(Ljava/lang/Object;Ljava/util/Map;)Z
      89: ior
      90: istore_2
      91: iload_2
      92: ireturn

  public void populateProperties(java.util.Properties);
    Code:
       0: aload_1
       1: ldc           #224                // String dispatchAsync
       3: aload_0
       4: invokevirtual #114                // Method isDispatchAsync:()Z
       7: invokestatic  #225                // Method java/lang/Boolean.toString:(Z)Ljava/lang/String;
      10: invokevirtual #226                // Method java/util/Properties.setProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
      13: pop
      14: aload_0
      15: invokevirtual #227                // Method getBrokerURL:()Ljava/lang/String;
      18: ifnull        43
      21: aload_1
      22: ldc           #210                // String java.naming.provider.url
      24: aload_0
      25: invokevirtual #227                // Method getBrokerURL:()Ljava/lang/String;
      28: invokevirtual #226                // Method java/util/Properties.setProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
      31: pop
      32: aload_1
      33: ldc           #213                // String brokerURL
      35: aload_0
      36: invokevirtual #227                // Method getBrokerURL:()Ljava/lang/String;
      39: invokevirtual #226                // Method java/util/Properties.setProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
      42: pop
      43: aload_0
      44: invokevirtual #228                // Method getClientID:()Ljava/lang/String;
      47: ifnull        61
      50: aload_1
      51: ldc           #229                // String clientID
      53: aload_0
      54: invokevirtual #228                // Method getClientID:()Ljava/lang/String;
      57: invokevirtual #226                // Method java/util/Properties.setProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
      60: pop
      61: aload_0
      62: invokevirtual #102                // Method getPrefetchPolicy:()Lorg/apache/activemq/ActiveMQPrefetchPolicy;
      65: aload_1
      66: ldc           #216                // String prefetchPolicy.
      68: invokestatic  #230                // Method org/apache/activemq/util/IntrospectionSupport.getProperties:(Ljava/lang/Object;Ljava/util/Map;Ljava/lang/String;)Z
      71: pop
      72: aload_0
      73: invokevirtual #231                // Method getRedeliveryPolicy:()Lorg/apache/activemq/RedeliveryPolicy;
      76: aload_1
      77: ldc           #219                // String redeliveryPolicy.
      79: invokestatic  #230                // Method org/apache/activemq/util/IntrospectionSupport.getProperties:(Ljava/lang/Object;Ljava/util/Map;Ljava/lang/String;)Z
      82: pop
      83: aload_0
      84: invokevirtual #136                // Method getBlobTransferPolicy:()Lorg/apache/activemq/blob/BlobTransferPolicy;
      87: aload_1
      88: ldc           #221                // String blobTransferPolicy.
      90: invokestatic  #230                // Method org/apache/activemq/util/IntrospectionSupport.getProperties:(Ljava/lang/Object;Ljava/util/Map;Ljava/lang/String;)Z
      93: pop
      94: aload_1
      95: ldc           #232                // String copyMessageOnSend
      97: aload_0
      98: invokevirtual #108                // Method isCopyMessageOnSend:()Z
     101: invokestatic  #225                // Method java/lang/Boolean.toString:(Z)Ljava/lang/String;
     104: invokevirtual #226                // Method java/util/Properties.setProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
     107: pop
     108: aload_1
     109: ldc           #233                // String disableTimeStampsByDefault
     111: aload_0
     112: invokevirtual #104                // Method isDisableTimeStampsByDefault:()Z
     115: invokestatic  #225                // Method java/lang/Boolean.toString:(Z)Ljava/lang/String;
     118: invokevirtual #226                // Method java/util/Properties.setProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
     121: pop
     122: aload_1
     123: ldc           #234                // String objectMessageSerializationDefered
     125: aload_0
     126: invokevirtual #112                // Method isObjectMessageSerializationDefered:()Z
     129: invokestatic  #225                // Method java/lang/Boolean.toString:(Z)Ljava/lang/String;
     132: invokevirtual #226                // Method java/util/Properties.setProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
     135: pop
     136: aload_1
     137: ldc           #235                // String optimizedMessageDispatch
     139: aload_0
     140: invokevirtual #106                // Method isOptimizedMessageDispatch:()Z
     143: invokestatic  #225                // Method java/lang/Boolean.toString:(Z)Ljava/lang/String;
     146: invokevirtual #226                // Method java/util/Properties.setProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
     149: pop
     150: aload_0
     151: invokevirtual #236                // Method getPassword:()Ljava/lang/String;
     154: ifnull        168
     157: aload_1
     158: ldc           #237                // String password
     160: aload_0
     161: invokevirtual #236                // Method getPassword:()Ljava/lang/String;
     164: invokevirtual #226                // Method java/util/Properties.setProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
     167: pop
     168: aload_1
     169: ldc           #238                // String useAsyncSend
     171: aload_0
     172: invokevirtual #116                // Method isUseAsyncSend:()Z
     175: invokestatic  #225                // Method java/lang/Boolean.toString:(Z)Ljava/lang/String;
     178: invokevirtual #226                // Method java/util/Properties.setProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
     181: pop
     182: aload_1
     183: ldc           #239                // String useCompression
     185: aload_0
     186: invokevirtual #110                // Method isUseCompression:()Z
     189: invokestatic  #225                // Method java/lang/Boolean.toString:(Z)Ljava/lang/String;
     192: invokevirtual #226                // Method java/util/Properties.setProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
     195: pop
     196: aload_1
     197: ldc           #240                // String useRetroactiveConsumer
     199: aload_0
     200: invokevirtual #128                // Method isUseRetroactiveConsumer:()Z
     203: invokestatic  #225                // Method java/lang/Boolean.toString:(Z)Ljava/lang/String;
     206: invokevirtual #226                // Method java/util/Properties.setProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
     209: pop
     210: aload_1
     211: ldc           #241                // String watchTopicAdvisories
     213: aload_0
     214: invokevirtual #139                // Method isWatchTopicAdvisories:()Z
     217: invokestatic  #225                // Method java/lang/Boolean.toString:(Z)Ljava/lang/String;
     220: invokevirtual #226                // Method java/util/Properties.setProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
     223: pop
     224: aload_0
     225: invokevirtual #242                // Method getUserName:()Ljava/lang/String;
     228: ifnull        242
     231: aload_1
     232: ldc           #243                // String userName
     234: aload_0
     235: invokevirtual #242                // Method getUserName:()Ljava/lang/String;
     238: invokevirtual #226                // Method java/util/Properties.setProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
     241: pop
     242: aload_1
     243: ldc           #244                // String closeTimeout
     245: aload_0
     246: invokevirtual #147                // Method getCloseTimeout:()I
     249: invokestatic  #245                // Method java/lang/Integer.toString:(I)Ljava/lang/String;
     252: invokevirtual #226                // Method java/util/Properties.setProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
     255: pop
     256: aload_1
     257: ldc           #246                // String alwaysSessionAsync
     259: aload_0
     260: invokevirtual #120                // Method isAlwaysSessionAsync:()Z
     263: invokestatic  #225                // Method java/lang/Boolean.toString:(Z)Ljava/lang/String;
     266: invokevirtual #226                // Method java/util/Properties.setProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
     269: pop
     270: aload_1
     271: ldc           #247                // String optimizeAcknowledge
     273: aload_0
     274: invokevirtual #122                // Method isOptimizeAcknowledge:()Z
     277: invokestatic  #225                // Method java/lang/Boolean.toString:(Z)Ljava/lang/String;
     280: invokevirtual #226                // Method java/util/Properties.setProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
     283: pop
     284: aload_1
     285: ldc           #248                // String statsEnabled
     287: aload_0
     288: invokevirtual #249                // Method isStatsEnabled:()Z
     291: invokestatic  #225                // Method java/lang/Boolean.toString:(Z)Ljava/lang/String;
     294: invokevirtual #226                // Method java/util/Properties.setProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
     297: pop
     298: aload_1
     299: ldc           #250                // String alwaysSyncSend
     301: aload_0
     302: invokevirtual #118                // Method isAlwaysSyncSend:()Z
     305: invokestatic  #225                // Method java/lang/Boolean.toString:(Z)Ljava/lang/String;
     308: invokevirtual #226                // Method java/util/Properties.setProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
     311: pop
     312: aload_1
     313: ldc           #251                // String producerWindowSize
     315: aload_0
     316: invokevirtual #141                // Method getProducerWindowSize:()I
     319: invokestatic  #245                // Method java/lang/Integer.toString:(I)Ljava/lang/String;
     322: invokevirtual #226                // Method java/util/Properties.setProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
     325: pop
     326: aload_1
     327: ldc           #252                // String sendTimeout
     329: aload_0
     330: invokevirtual #145                // Method getSendTimeout:()I
     333: invokestatic  #245                // Method java/lang/Integer.toString:(I)Ljava/lang/String;
     336: invokevirtual #226                // Method java/util/Properties.setProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
     339: pop
     340: aload_1
     341: ldc           #253                // String sendAcksAsync
     343: aload_0
     344: invokevirtual #149                // Method isSendAcksAsync:()Z
     347: invokestatic  #225                // Method java/lang/Boolean.toString:(Z)Ljava/lang/String;
     350: invokevirtual #226                // Method java/util/Properties.setProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
     353: pop
     354: aload_1
     355: ldc           #254                // String auditDepth
     357: aload_0
     358: invokevirtual #151                // Method getAuditDepth:()I
     361: invokestatic  #245                // Method java/lang/Integer.toString:(I)Ljava/lang/String;
     364: invokevirtual #226                // Method java/util/Properties.setProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
     367: pop
     368: aload_1
     369: ldc           #255                // String auditMaximumProducerNumber
     371: aload_0
     372: invokevirtual #153                // Method getAuditMaximumProducerNumber:()I
     375: invokestatic  #245                // Method java/lang/Integer.toString:(I)Ljava/lang/String;
     378: invokevirtual #226                // Method java/util/Properties.setProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
     381: pop
     382: aload_1
     383: ldc_w         #256                // String checkForDuplicates
     386: aload_0
     387: invokevirtual #159                // Method isCheckForDuplicates:()Z
     390: invokestatic  #225                // Method java/lang/Boolean.toString:(Z)Ljava/lang/String;
     393: invokevirtual #226                // Method java/util/Properties.setProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
     396: pop
     397: aload_1
     398: ldc_w         #257                // String messagePrioritySupported
     401: aload_0
     402: invokevirtual #161                // Method isMessagePrioritySupported:()Z
     405: invokestatic  #225                // Method java/lang/Boolean.toString:(Z)Ljava/lang/String;
     408: invokevirtual #226                // Method java/util/Properties.setProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
     411: pop
     412: aload_1
     413: ldc_w         #258                // String transactedIndividualAck
     416: aload_0
     417: invokevirtual #163                // Method isTransactedIndividualAck:()Z
     420: invokestatic  #225                // Method java/lang/Boolean.toString:(Z)Ljava/lang/String;
     423: invokevirtual #226                // Method java/util/Properties.setProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
     426: pop
     427: aload_1
     428: ldc_w         #259                // String nonBlockingRedelivery
     431: aload_0
     432: invokevirtual #165                // Method isNonBlockingRedelivery:()Z
     435: invokestatic  #225                // Method java/lang/Boolean.toString:(Z)Ljava/lang/String;
     438: invokevirtual #226                // Method java/util/Properties.setProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
     441: pop
     442: aload_1
     443: ldc_w         #260                // String maxThreadPoolSize
     446: aload_0
     447: invokevirtual #167                // Method getMaxThreadPoolSize:()I
     450: invokestatic  #245                // Method java/lang/Integer.toString:(I)Ljava/lang/String;
     453: invokevirtual #226                // Method java/util/Properties.setProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
     456: pop
     457: aload_1
     458: ldc_w         #261                // String nestedMapAndListEnabled
     461: aload_0
     462: invokevirtual #173                // Method isNestedMapAndListEnabled:()Z
     465: invokestatic  #225                // Method java/lang/Boolean.toString:(Z)Ljava/lang/String;
     468: invokevirtual #226                // Method java/util/Properties.setProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
     471: pop
     472: aload_1
     473: ldc_w         #262                // String consumerFailoverRedeliveryWaitPeriod
     476: aload_0
     477: invokevirtual #157                // Method getConsumerFailoverRedeliveryWaitPeriod:()J
     480: invokestatic  #263                // Method java/lang/Long.toString:(J)Ljava/lang/String;
     483: invokevirtual #226                // Method java/util/Properties.setProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
     486: pop
     487: aload_1
     488: ldc_w         #264                // String rmIdFromConnectionId
     491: aload_0
     492: invokevirtual #175                // Method isRmIdFromConnectionId:()Z
     495: invokestatic  #225                // Method java/lang/Boolean.toString:(Z)Ljava/lang/String;
     498: invokevirtual #226                // Method java/util/Properties.setProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
     501: pop
     502: return

  public boolean isUseCompression();
    Code:
       0: aload_0
       1: getfield      #265                // Field useCompression:Z
       4: ireturn

  public void setUseCompression(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #265                // Field useCompression:Z
       5: return

  public boolean isObjectMessageSerializationDefered();
    Code:
       0: aload_0
       1: getfield      #266                // Field objectMessageSerializationDefered:Z
       4: ireturn

  public void setObjectMessageSerializationDefered(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #266                // Field objectMessageSerializationDefered:Z
       5: return

  public boolean isDispatchAsync();
    Code:
       0: aload_0
       1: getfield      #6                  // Field dispatchAsync:Z
       4: ireturn

  public void setDispatchAsync(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #6                  // Field dispatchAsync:Z
       5: return

  public int getCloseTimeout();
    Code:
       0: aload_0
       1: getfield      #29                 // Field closeTimeout:I
       4: ireturn

  public void setCloseTimeout(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #29                 // Field closeTimeout:I
       5: return

  public boolean isAlwaysSessionAsync();
    Code:
       0: aload_0
       1: getfield      #7                  // Field alwaysSessionAsync:Z
       4: ireturn

  public void setAlwaysSessionAsync(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #7                  // Field alwaysSessionAsync:Z
       5: return

  public boolean isOptimizeAcknowledge();
    Code:
       0: aload_0
       1: getfield      #267                // Field optimizeAcknowledge:Z
       4: ireturn

  public void setOptimizeAcknowledge(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #267                // Field optimizeAcknowledge:Z
       5: return

  public void setOptimizeAcknowledgeTimeOut(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #26                 // Field optimizeAcknowledgeTimeOut:J
       5: return

  public long getOptimizeAcknowledgeTimeOut();
    Code:
       0: aload_0
       1: getfield      #26                 // Field optimizeAcknowledgeTimeOut:J
       4: lreturn

  public boolean isNestedMapAndListEnabled();
    Code:
       0: aload_0
       1: getfield      #30                 // Field nestedMapAndListEnabled:Z
       4: ireturn

  public void setNestedMapAndListEnabled(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #30                 // Field nestedMapAndListEnabled:Z
       5: return

  public java.lang.String getClientIDPrefix();
    Code:
       0: aload_0
       1: getfield      #268                // Field clientIDPrefix:Ljava/lang/String;
       4: areturn

  public void setClientIDPrefix(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #268                // Field clientIDPrefix:Ljava/lang/String;
       5: return

  protected synchronized org.apache.activemq.util.IdGenerator getClientIdGenerator();
    Code:
       0: aload_0
       1: getfield      #269                // Field clientIdGenerator:Lorg/apache/activemq/util/IdGenerator;
       4: ifnonnull     43
       7: aload_0
       8: getfield      #268                // Field clientIDPrefix:Ljava/lang/String;
      11: ifnull        32
      14: aload_0
      15: new           #270                // class org/apache/activemq/util/IdGenerator
      18: dup
      19: aload_0
      20: getfield      #268                // Field clientIDPrefix:Ljava/lang/String;
      23: invokespecial #271                // Method org/apache/activemq/util/IdGenerator."<init>":(Ljava/lang/String;)V
      26: putfield      #269                // Field clientIdGenerator:Lorg/apache/activemq/util/IdGenerator;
      29: goto          43
      32: aload_0
      33: new           #270                // class org/apache/activemq/util/IdGenerator
      36: dup
      37: invokespecial #272                // Method org/apache/activemq/util/IdGenerator."<init>":()V
      40: putfield      #269                // Field clientIdGenerator:Lorg/apache/activemq/util/IdGenerator;
      43: aload_0
      44: getfield      #269                // Field clientIdGenerator:Lorg/apache/activemq/util/IdGenerator;
      47: areturn

  protected void setClientIdGenerator(org.apache.activemq.util.IdGenerator);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #269                // Field clientIdGenerator:Lorg/apache/activemq/util/IdGenerator;
       5: return

  public void setConnectionIDPrefix(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #273                // Field connectionIDPrefix:Ljava/lang/String;
       5: return

  protected synchronized org.apache.activemq.util.IdGenerator getConnectionIdGenerator();
    Code:
       0: aload_0
       1: getfield      #274                // Field connectionIdGenerator:Lorg/apache/activemq/util/IdGenerator;
       4: ifnonnull     43
       7: aload_0
       8: getfield      #273                // Field connectionIDPrefix:Ljava/lang/String;
      11: ifnull        32
      14: aload_0
      15: new           #270                // class org/apache/activemq/util/IdGenerator
      18: dup
      19: aload_0
      20: getfield      #273                // Field connectionIDPrefix:Ljava/lang/String;
      23: invokespecial #271                // Method org/apache/activemq/util/IdGenerator."<init>":(Ljava/lang/String;)V
      26: putfield      #274                // Field connectionIdGenerator:Lorg/apache/activemq/util/IdGenerator;
      29: goto          43
      32: aload_0
      33: new           #270                // class org/apache/activemq/util/IdGenerator
      36: dup
      37: invokespecial #272                // Method org/apache/activemq/util/IdGenerator."<init>":()V
      40: putfield      #274                // Field connectionIdGenerator:Lorg/apache/activemq/util/IdGenerator;
      43: aload_0
      44: getfield      #274                // Field connectionIdGenerator:Lorg/apache/activemq/util/IdGenerator;
      47: areturn

  protected void setConnectionIdGenerator(org.apache.activemq.util.IdGenerator);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #274                // Field connectionIdGenerator:Lorg/apache/activemq/util/IdGenerator;
       5: return

  public boolean isStatsEnabled();
    Code:
       0: aload_0
       1: getfield      #10                 // Field factoryStats:Lorg/apache/activemq/management/JMSStatsImpl;
       4: invokevirtual #275                // Method org/apache/activemq/management/JMSStatsImpl.isEnabled:()Z
       7: ireturn

  public void setStatsEnabled(boolean);
    Code:
       0: aload_0
       1: getfield      #10                 // Field factoryStats:Lorg/apache/activemq/management/JMSStatsImpl;
       4: iload_1
       5: invokevirtual #276                // Method org/apache/activemq/management/JMSStatsImpl.setEnabled:(Z)V
       8: return

  public synchronized int getProducerWindowSize();
    Code:
       0: aload_0
       1: getfield      #32                 // Field producerWindowSize:I
       4: ireturn

  public synchronized void setProducerWindowSize(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #32                 // Field producerWindowSize:I
       5: return

  public long getWarnAboutUnstartedConnectionTimeout();
    Code:
       0: aload_0
       1: getfield      #35                 // Field warnAboutUnstartedConnectionTimeout:J
       4: lreturn

  public void setWarnAboutUnstartedConnectionTimeout(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #35                 // Field warnAboutUnstartedConnectionTimeout:J
       5: return

  public org.apache.activemq.transport.TransportListener getTransportListener();
    Code:
       0: aload_0
       1: getfield      #177                // Field transportListener:Lorg/apache/activemq/transport/TransportListener;
       4: areturn

  public void setTransportListener(org.apache.activemq.transport.TransportListener);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #177                // Field transportListener:Lorg/apache/activemq/transport/TransportListener;
       5: return

  public javax.jms.ExceptionListener getExceptionListener();
    Code:
       0: aload_0
       1: getfield      #179                // Field exceptionListener:Ljavax/jms/ExceptionListener;
       4: areturn

  public void setExceptionListener(javax.jms.ExceptionListener);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #179                // Field exceptionListener:Ljavax/jms/ExceptionListener;
       5: return

  public int getAuditDepth();
    Code:
       0: aload_0
       1: getfield      #38                 // Field auditDepth:I
       4: ireturn

  public void setAuditDepth(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #38                 // Field auditDepth:I
       5: return

  public int getAuditMaximumProducerNumber();
    Code:
       0: aload_0
       1: getfield      #39                 // Field auditMaximumProducerNumber:I
       4: ireturn

  public void setAuditMaximumProducerNumber(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #39                 // Field auditMaximumProducerNumber:I
       5: return

  public void setUseDedicatedTaskRunner(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #277                // Field useDedicatedTaskRunner:Z
       5: return

  public boolean isUseDedicatedTaskRunner();
    Code:
       0: aload_0
       1: getfield      #277                // Field useDedicatedTaskRunner:Z
       4: ireturn

  public void setConsumerFailoverRedeliveryWaitPeriod(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #40                 // Field consumerFailoverRedeliveryWaitPeriod:J
       5: return

  public long getConsumerFailoverRedeliveryWaitPeriod();
    Code:
       0: aload_0
       1: getfield      #40                 // Field consumerFailoverRedeliveryWaitPeriod:J
       4: lreturn

  public org.apache.activemq.ClientInternalExceptionListener getClientInternalExceptionListener();
    Code:
       0: aload_0
       1: getfield      #181                // Field clientInternalExceptionListener:Lorg/apache/activemq/ClientInternalExceptionListener;
       4: areturn

  public void setClientInternalExceptionListener(org.apache.activemq.ClientInternalExceptionListener);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #181                // Field clientInternalExceptionListener:Lorg/apache/activemq/ClientInternalExceptionListener;
       5: return

  public boolean isCheckForDuplicates();
    Code:
       0: aload_0
       1: getfield      #41                 // Field checkForDuplicates:Z
       4: ireturn

  public void setCheckForDuplicates(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #41                 // Field checkForDuplicates:Z
       5: return

  public boolean isTransactedIndividualAck();
    Code:
       0: aload_0
       1: getfield      #43                 // Field transactedIndividualAck:Z
       4: ireturn

  public void setTransactedIndividualAck(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #43                 // Field transactedIndividualAck:Z
       5: return

  public boolean isNonBlockingRedelivery();
    Code:
       0: aload_0
       1: getfield      #44                 // Field nonBlockingRedelivery:Z
       4: ireturn

  public void setNonBlockingRedelivery(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #44                 // Field nonBlockingRedelivery:Z
       5: return

  public int getMaxThreadPoolSize();
    Code:
       0: aload_0
       1: getfield      #46                 // Field maxThreadPoolSize:I
       4: ireturn

  public void setMaxThreadPoolSize(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #46                 // Field maxThreadPoolSize:I
       5: return

  public org.apache.activemq.thread.TaskRunnerFactory getSessionTaskRunner();
    Code:
       0: aload_0
       1: getfield      #278                // Field sessionTaskRunner:Lorg/apache/activemq/thread/TaskRunnerFactory;
       4: areturn

  public void setSessionTaskRunner(org.apache.activemq.thread.TaskRunnerFactory);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #278                // Field sessionTaskRunner:Lorg/apache/activemq/thread/TaskRunnerFactory;
       5: return

  public java.util.concurrent.RejectedExecutionHandler getRejectedTaskHandler();
    Code:
       0: aload_0
       1: getfield      #47                 // Field rejectedTaskHandler:Ljava/util/concurrent/RejectedExecutionHandler;
       4: areturn

  public void setRejectedTaskHandler(java.util.concurrent.RejectedExecutionHandler);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #47                 // Field rejectedTaskHandler:Ljava/util/concurrent/RejectedExecutionHandler;
       5: return

  public long getOptimizedAckScheduledAckInterval();
    Code:
       0: aload_0
       1: getfield      #27                 // Field optimizedAckScheduledAckInterval:J
       4: lreturn

  public void setOptimizedAckScheduledAckInterval(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #27                 // Field optimizedAckScheduledAckInterval:J
       5: return

  public boolean isRmIdFromConnectionId();
    Code:
       0: aload_0
       1: getfield      #49                 // Field rmIdFromConnectionId:Z
       4: ireturn

  public void setRmIdFromConnectionId(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #49                 // Field rmIdFromConnectionId:Z
       5: return

  static {};
    Code:
       0: ldc_w         #55                 // class org/apache/activemq/ActiveMQConnectionFactory
       3: invokestatic  #279                // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       6: putstatic     #280                // Field LOG:Lorg/slf4j/Logger;
       9: aconst_null
      10: astore_0
      11: aconst_null
      12: astore_1
      13: new           #281                // class org/apache/activemq/ActiveMQConnectionFactory$1
      16: dup
      17: invokespecial #282                // Method org/apache/activemq/ActiveMQConnectionFactory$1."<init>":()V
      20: invokestatic  #283                // Method java/security/AccessController.doPrivileged:(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
      23: checkcast     #284                // class java/lang/String
      26: astore_0
      27: new           #285                // class org/apache/activemq/ActiveMQConnectionFactory$2
      30: dup
      31: invokespecial #286                // Method org/apache/activemq/ActiveMQConnectionFactory$2."<init>":()V
      34: invokestatic  #283                // Method java/security/AccessController.doPrivileged:(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
      37: checkcast     #284                // class java/lang/String
      40: astore_1
      41: goto          57
      44: astore_2
      45: getstatic     #280                // Field LOG:Lorg/slf4j/Logger;
      48: ldc_w         #287                // String Failed to look up System properties for host and port
      51: aload_2
      52: invokeinterface #288,  3          // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Throwable;)V
      57: aload_0
      58: ifnull        68
      61: aload_0
      62: invokevirtual #289                // Method java/lang/String.isEmpty:()Z
      65: ifeq          74
      68: ldc_w         #290                // String localhost
      71: goto          75
      74: aload_0
      75: astore_0
      76: aload_1
      77: ifnull        87
      80: aload_1
      81: invokevirtual #289                // Method java/lang/String.isEmpty:()Z
      84: ifeq          93
      87: ldc_w         #291                // String 61616
      90: goto          94
      93: aload_1
      94: astore_1
      95: aload_0
      96: putstatic     #292                // Field DEFAULT_BROKER_HOST:Ljava/lang/String;
      99: aload_1
     100: invokestatic  #293                // Method java/lang/Integer.parseInt:(Ljava/lang/String;)I
     103: putstatic     #294                // Field DEFAULT_BROKER_PORT:I
     106: new           #58                 // class java/lang/StringBuilder
     109: dup
     110: invokespecial #59                 // Method java/lang/StringBuilder."<init>":()V
     113: ldc_w         #295                // String tcp://
     116: invokevirtual #61                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     119: getstatic     #292                // Field DEFAULT_BROKER_HOST:Ljava/lang/String;
     122: invokevirtual #61                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     125: ldc_w         #296                // String :
     128: invokevirtual #61                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     131: getstatic     #294                // Field DEFAULT_BROKER_PORT:I
     134: invokevirtual #191                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     137: invokevirtual #63                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     140: astore_0
     141: aconst_null
     142: astore_1
     143: new           #297                // class org/apache/activemq/ActiveMQConnectionFactory$3
     146: dup
     147: aload_0
     148: invokespecial #298                // Method org/apache/activemq/ActiveMQConnectionFactory$3."<init>":(Ljava/lang/String;)V
     151: invokestatic  #283                // Method java/security/AccessController.doPrivileged:(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
     154: checkcast     #284                // class java/lang/String
     157: astore_1
     158: goto          174
     161: astore_2
     162: getstatic     #280                // Field LOG:Lorg/slf4j/Logger;
     165: ldc_w         #287                // String Failed to look up System properties for host and port
     168: aload_2
     169: invokeinterface #288,  3          // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Throwable;)V
     174: aload_1
     175: ifnull        185
     178: aload_1
     179: invokevirtual #289                // Method java/lang/String.isEmpty:()Z
     182: ifeq          189
     185: aload_0
     186: goto          190
     189: aload_1
     190: astore_1
     191: aload_1
     192: putstatic     #299                // Field DEFAULT_BROKER_BIND_URL:Ljava/lang/String;
     195: new           #58                 // class java/lang/StringBuilder
     198: dup
     199: invokespecial #59                 // Method java/lang/StringBuilder."<init>":()V
     202: ldc_w         #300                // String failover://
     205: invokevirtual #61                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     208: getstatic     #299                // Field DEFAULT_BROKER_BIND_URL:Ljava/lang/String;
     211: invokevirtual #61                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     214: invokevirtual #63                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     217: putstatic     #1                  // Field DEFAULT_BROKER_URL:Ljava/lang/String;
     220: aconst_null
     221: putstatic     #301                // Field DEFAULT_USER:Ljava/lang/String;
     224: aconst_null
     225: putstatic     #302                // Field DEFAULT_PASSWORD:Ljava/lang/String;
     228: return
    Exception table:
       from    to  target type
          13    41    44   Class java/lang/Throwable
         143   158   161   Class java/lang/Throwable
}
