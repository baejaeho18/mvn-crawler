Compiled from "ConditionalNetworkBridgeFilterFactory.java"
class org.apache.activemq.network.ConditionalNetworkBridgeFilterFactory$ConditionalNetworkBridgeFilter extends org.apache.activemq.command.NetworkBridgeFilter {
  static final org.slf4j.Logger LOG;

  private int rateLimit;

  private int rateDuration;

  private boolean allowReplayWhenNoConsumers;

  private int replayDelay;

  private int matchCount;

  private long rateDurationEnd;

  private org.apache.activemq.network.ConditionalNetworkBridgeFilterFactory$ConditionalNetworkBridgeFilter();
    Code:
       0: aload_0
       1: invokespecial #2                  // Method org/apache/activemq/command/NetworkBridgeFilter."<init>":()V
       4: aload_0
       5: sipush        1000
       8: putfield      #3                  // Field rateDuration:I
      11: aload_0
      12: iconst_1
      13: putfield      #4                  // Field allowReplayWhenNoConsumers:Z
      16: aload_0
      17: sipush        1000
      20: putfield      #5                  // Field replayDelay:I
      23: return

  protected boolean matchesForwardingFilter(org.apache.activemq.command.Message, org.apache.activemq.filter.MessageEvaluationContext);
    Code:
       0: iconst_1
       1: istore_3
       2: aload_2
       3: invokevirtual #6                  // Method org/apache/activemq/filter/MessageEvaluationContext.getDestination:()Lorg/apache/activemq/command/ActiveMQDestination;
       6: invokevirtual #7                  // Method org/apache/activemq/command/ActiveMQDestination.isQueue:()Z
       9: ifeq          122
      12: aload_1
      13: invokevirtual #8                  // Method org/apache/activemq/command/Message.getBrokerPath:()[Lorg/apache/activemq/command/BrokerId;
      16: aload_0
      17: getfield      #9                  // Field networkBrokerId:Lorg/apache/activemq/command/BrokerId;
      20: invokestatic  #10                 // Method contains:([Lorg/apache/activemq/command/BrokerId;Lorg/apache/activemq/command/BrokerId;)Z
      23: ifeq          122
      26: aload_0
      27: getfield      #4                  // Field allowReplayWhenNoConsumers:Z
      30: ifeq          54
      33: aload_0
      34: aload_1
      35: aload_2
      36: invokespecial #11                 // Method hasNoLocalConsumers:(Lorg/apache/activemq/command/Message;Lorg/apache/activemq/filter/MessageEvaluationContext;)Z
      39: ifeq          54
      42: aload_0
      43: aload_1
      44: invokespecial #12                 // Method hasNotJustArrived:(Lorg/apache/activemq/command/Message;)Z
      47: ifeq          54
      50: iconst_1
      51: goto          55
      54: iconst_0
      55: istore_3
      56: iload_3
      57: ifeq          81
      60: getstatic     #13                 // Field LOG:Lorg/slf4j/Logger;
      63: ldc           #14                 // String Replaying [{}] for [{}] back to origin in the absence of a local consumer
      65: aload_1
      66: invokevirtual #15                 // Method org/apache/activemq/command/Message.getMessageId:()Lorg/apache/activemq/command/MessageId;
      69: aload_1
      70: invokevirtual #16                 // Method org/apache/activemq/command/Message.getDestination:()Lorg/apache/activemq/command/ActiveMQDestination;
      73: invokeinterface #17,  4           // InterfaceMethod org/slf4j/Logger.trace:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      78: goto          129
      81: getstatic     #13                 // Field LOG:Lorg/slf4j/Logger;
      84: ldc           #18                 // String Suppressing replay of [{}] for [{}] back to origin {}
      86: iconst_3
      87: anewarray     #19                 // class java/lang/Object
      90: dup
      91: iconst_0
      92: aload_1
      93: invokevirtual #15                 // Method org/apache/activemq/command/Message.getMessageId:()Lorg/apache/activemq/command/MessageId;
      96: aastore
      97: dup
      98: iconst_1
      99: aload_1
     100: invokevirtual #16                 // Method org/apache/activemq/command/Message.getDestination:()Lorg/apache/activemq/command/ActiveMQDestination;
     103: aastore
     104: dup
     105: iconst_2
     106: aload_1
     107: invokevirtual #8                  // Method org/apache/activemq/command/Message.getBrokerPath:()[Lorg/apache/activemq/command/BrokerId;
     110: invokestatic  #20                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
     113: aastore
     114: invokeinterface #21,  3           // InterfaceMethod org/slf4j/Logger.trace:(Ljava/lang/String;[Ljava/lang/Object;)V
     119: goto          129
     122: aload_0
     123: aload_1
     124: aload_2
     125: invokespecial #22                 // Method org/apache/activemq/command/NetworkBridgeFilter.matchesForwardingFilter:(Lorg/apache/activemq/command/Message;Lorg/apache/activemq/filter/MessageEvaluationContext;)Z
     128: istore_3
     129: iload_3
     130: ifeq          200
     133: aload_0
     134: invokespecial #23                 // Method rateLimitExceeded:()Z
     137: ifeq          200
     140: getstatic     #13                 // Field LOG:Lorg/slf4j/Logger;
     143: ldc           #24                 // String Throttled network consumer rejecting [{}] for [{}] {}>{}/{}
     145: iconst_5
     146: anewarray     #19                 // class java/lang/Object
     149: dup
     150: iconst_0
     151: aload_1
     152: invokevirtual #15                 // Method org/apache/activemq/command/Message.getMessageId:()Lorg/apache/activemq/command/MessageId;
     155: aastore
     156: dup
     157: iconst_1
     158: aload_1
     159: invokevirtual #16                 // Method org/apache/activemq/command/Message.getDestination:()Lorg/apache/activemq/command/ActiveMQDestination;
     162: aastore
     163: dup
     164: iconst_2
     165: aload_0
     166: getfield      #25                 // Field matchCount:I
     169: invokestatic  #26                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     172: aastore
     173: dup
     174: iconst_3
     175: aload_0
     176: getfield      #27                 // Field rateLimit:I
     179: invokestatic  #26                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     182: aastore
     183: dup
     184: iconst_4
     185: aload_0
     186: getfield      #3                  // Field rateDuration:I
     189: invokestatic  #26                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     192: aastore
     193: invokeinterface #21,  3           // InterfaceMethod org/slf4j/Logger.trace:(Ljava/lang/String;[Ljava/lang/Object;)V
     198: iconst_0
     199: istore_3
     200: iload_3
     201: ireturn

  private boolean hasNotJustArrived(org.apache.activemq.command.Message);
    Code:
       0: aload_0
       1: getfield      #5                  // Field replayDelay:I
       4: ifeq          24
       7: aload_1
       8: invokevirtual #28                 // Method org/apache/activemq/command/Message.getBrokerInTime:()J
      11: aload_0
      12: getfield      #5                  // Field replayDelay:I
      15: i2l
      16: ladd
      17: invokestatic  #29                 // Method java/lang/System.currentTimeMillis:()J
      20: lcmp
      21: ifge          28
      24: iconst_1
      25: goto          29
      28: iconst_0
      29: ireturn

  private boolean hasNoLocalConsumers(org.apache.activemq.command.Message, org.apache.activemq.filter.MessageEvaluationContext);
    Code:
       0: aload_2
       1: invokevirtual #30                 // Method org/apache/activemq/filter/MessageEvaluationContext.getMessageReference:()Lorg/apache/activemq/broker/region/MessageReference;
       4: invokeinterface #31,  1           // InterfaceMethod org/apache/activemq/broker/region/MessageReference.getRegionDestination:()Lorg/apache/activemq/command/Message$MessageDestination;
       9: checkcast     #32                 // class org/apache/activemq/broker/region/Destination
      12: astore_3
      13: aload_3
      14: invokeinterface #33,  1           // InterfaceMethod org/apache/activemq/broker/region/Destination.getConsumers:()Ljava/util/List;
      19: astore        4
      21: aload         4
      23: invokeinterface #34,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      28: astore        5
      30: aload         5
      32: invokeinterface #35,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      37: ifeq          121
      40: aload         5
      42: invokeinterface #36,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      47: checkcast     #37                 // class org/apache/activemq/broker/region/Subscription
      50: astore        6
      52: aload         6
      54: invokeinterface #38,  1           // InterfaceMethod org/apache/activemq/broker/region/Subscription.getConsumerInfo:()Lorg/apache/activemq/command/ConsumerInfo;
      59: invokevirtual #39                 // Method org/apache/activemq/command/ConsumerInfo.isNetworkSubscription:()Z
      62: ifne          118
      65: aload         6
      67: invokeinterface #38,  1           // InterfaceMethod org/apache/activemq/broker/region/Subscription.getConsumerInfo:()Lorg/apache/activemq/command/ConsumerInfo;
      72: invokevirtual #40                 // Method org/apache/activemq/command/ConsumerInfo.isBrowser:()Z
      75: ifne          118
      78: getstatic     #13                 // Field LOG:Lorg/slf4j/Logger;
      81: ldc           #41                 // String Not replaying [{}] for [{}] to origin due to existing local consumer: {}
      83: iconst_3
      84: anewarray     #19                 // class java/lang/Object
      87: dup
      88: iconst_0
      89: aload_1
      90: invokevirtual #15                 // Method org/apache/activemq/command/Message.getMessageId:()Lorg/apache/activemq/command/MessageId;
      93: aastore
      94: dup
      95: iconst_1
      96: aload_1
      97: invokevirtual #16                 // Method org/apache/activemq/command/Message.getDestination:()Lorg/apache/activemq/command/ActiveMQDestination;
     100: aastore
     101: dup
     102: iconst_2
     103: aload         6
     105: invokeinterface #38,  1           // InterfaceMethod org/apache/activemq/broker/region/Subscription.getConsumerInfo:()Lorg/apache/activemq/command/ConsumerInfo;
     110: aastore
     111: invokeinterface #21,  3           // InterfaceMethod org/slf4j/Logger.trace:(Ljava/lang/String;[Ljava/lang/Object;)V
     116: iconst_0
     117: ireturn
     118: goto          30
     121: iconst_1
     122: ireturn

  private boolean rateLimitExceeded();
    Code:
       0: aload_0
       1: getfield      #27                 // Field rateLimit:I
       4: ifne          9
       7: iconst_0
       8: ireturn
       9: aload_0
      10: getfield      #42                 // Field rateDurationEnd:J
      13: invokestatic  #29                 // Method java/lang/System.currentTimeMillis:()J
      16: lcmp
      17: ifge          38
      20: aload_0
      21: invokestatic  #29                 // Method java/lang/System.currentTimeMillis:()J
      24: aload_0
      25: getfield      #3                  // Field rateDuration:I
      28: i2l
      29: ladd
      30: putfield      #42                 // Field rateDurationEnd:J
      33: aload_0
      34: iconst_0
      35: putfield      #25                 // Field matchCount:I
      38: aload_0
      39: dup
      40: getfield      #25                 // Field matchCount:I
      43: iconst_1
      44: iadd
      45: dup_x1
      46: putfield      #25                 // Field matchCount:I
      49: aload_0
      50: getfield      #27                 // Field rateLimit:I
      53: if_icmple     60
      56: iconst_1
      57: goto          61
      60: iconst_0
      61: ireturn

  public void setReplayDelay(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #5                  // Field replayDelay:I
       5: return

  public void setRateLimit(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #27                 // Field rateLimit:I
       5: return

  public void setRateDuration(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #3                  // Field rateDuration:I
       5: return

  public void setAllowReplayWhenNoConsumers(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #4                  // Field allowReplayWhenNoConsumers:Z
       5: return

  org.apache.activemq.network.ConditionalNetworkBridgeFilterFactory$ConditionalNetworkBridgeFilter(org.apache.activemq.network.ConditionalNetworkBridgeFilterFactory$1);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method "<init>":()V
       4: return

  static {};
    Code:
       0: ldc_w         #43                 // class org/apache/activemq/network/ConditionalNetworkBridgeFilterFactory$ConditionalNetworkBridgeFilter
       3: invokestatic  #44                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       6: putstatic     #13                 // Field LOG:Lorg/slf4j/Logger;
       9: return
}
