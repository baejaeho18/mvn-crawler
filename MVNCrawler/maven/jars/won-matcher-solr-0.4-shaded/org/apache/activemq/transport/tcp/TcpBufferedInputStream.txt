Compiled from "TcpBufferedInputStream.java"
public class org.apache.activemq.transport.tcp.TcpBufferedInputStream extends java.io.FilterInputStream {
  private static final int DEFAULT_BUFFER_SIZE;

  protected byte[] internalBuffer;

  protected int count;

  protected int position;

  public org.apache.activemq.transport.tcp.TcpBufferedInputStream(java.io.InputStream);
    Code:
       0: aload_0
       1: aload_1
       2: sipush        8192
       5: invokespecial #1                  // Method "<init>":(Ljava/io/InputStream;I)V
       8: return

  public org.apache.activemq.transport.tcp.TcpBufferedInputStream(java.io.InputStream, int);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #2                  // Method java/io/FilterInputStream."<init>":(Ljava/io/InputStream;)V
       5: iload_2
       6: ifgt          19
       9: new           #3                  // class java/lang/IllegalArgumentException
      12: dup
      13: ldc           #4                  // String Buffer size <= 0
      15: invokespecial #5                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      18: athrow
      19: aload_0
      20: iload_2
      21: newarray       byte
      23: putfield      #6                  // Field internalBuffer:[B
      26: return

  protected void fill() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #6                  // Field internalBuffer:[B
       4: astore_1
       5: aload_0
       6: iconst_0
       7: putfield      #7                  // Field count:I
      10: aload_0
      11: iconst_0
      12: putfield      #8                  // Field position:I
      15: aload_0
      16: getfield      #9                  // Field in:Ljava/io/InputStream;
      19: aload_1
      20: aload_0
      21: getfield      #8                  // Field position:I
      24: aload_1
      25: arraylength
      26: aload_0
      27: getfield      #8                  // Field position:I
      30: isub
      31: invokevirtual #10                 // Method java/io/InputStream.read:([BII)I
      34: istore_2
      35: iload_2
      36: ifle          49
      39: aload_0
      40: iload_2
      41: aload_0
      42: getfield      #8                  // Field position:I
      45: iadd
      46: putfield      #7                  // Field count:I
      49: return

  public int read() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #8                  // Field position:I
       4: aload_0
       5: getfield      #7                  // Field count:I
       8: if_icmplt     28
      11: aload_0
      12: invokevirtual #11                 // Method fill:()V
      15: aload_0
      16: getfield      #8                  // Field position:I
      19: aload_0
      20: getfield      #7                  // Field count:I
      23: if_icmplt     28
      26: iconst_m1
      27: ireturn
      28: aload_0
      29: getfield      #6                  // Field internalBuffer:[B
      32: aload_0
      33: dup
      34: getfield      #8                  // Field position:I
      37: dup_x1
      38: iconst_1
      39: iadd
      40: putfield      #8                  // Field position:I
      43: baload
      44: sipush        255
      47: iand
      48: ireturn

  private int readStream(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #7                  // Field count:I
       4: aload_0
       5: getfield      #8                  // Field position:I
       8: isub
       9: istore        4
      11: iload         4
      13: ifgt          58
      16: iload_3
      17: aload_0
      18: getfield      #6                  // Field internalBuffer:[B
      21: arraylength
      22: if_icmplt     36
      25: aload_0
      26: getfield      #9                  // Field in:Ljava/io/InputStream;
      29: aload_1
      30: iload_2
      31: iload_3
      32: invokevirtual #10                 // Method java/io/InputStream.read:([BII)I
      35: ireturn
      36: aload_0
      37: invokevirtual #11                 // Method fill:()V
      40: aload_0
      41: getfield      #7                  // Field count:I
      44: aload_0
      45: getfield      #8                  // Field position:I
      48: isub
      49: istore        4
      51: iload         4
      53: ifgt          58
      56: iconst_m1
      57: ireturn
      58: iload         4
      60: iload_3
      61: if_icmpge     69
      64: iload         4
      66: goto          70
      69: iload_3
      70: istore        5
      72: aload_0
      73: getfield      #6                  // Field internalBuffer:[B
      76: aload_0
      77: getfield      #8                  // Field position:I
      80: aload_1
      81: iload_2
      82: iload         5
      84: invokestatic  #12                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      87: aload_0
      88: dup
      89: getfield      #8                  // Field position:I
      92: iload         5
      94: iadd
      95: putfield      #8                  // Field position:I
      98: iload         5
     100: ireturn

  public int read(byte[], int, int) throws java.io.IOException;
    Code:
       0: iload_2
       1: iload_3
       2: ior
       3: iload_2
       4: iload_3
       5: iadd
       6: ior
       7: aload_1
       8: arraylength
       9: iload_2
      10: iload_3
      11: iadd
      12: isub
      13: ior
      14: ifge          25
      17: new           #13                 // class java/lang/IndexOutOfBoundsException
      20: dup
      21: invokespecial #14                 // Method java/lang/IndexOutOfBoundsException."<init>":()V
      24: athrow
      25: iload_3
      26: ifne          31
      29: iconst_0
      30: ireturn
      31: iconst_0
      32: istore        4
      34: aload_0
      35: aload_1
      36: iload_2
      37: iload         4
      39: iadd
      40: iload_3
      41: iload         4
      43: isub
      44: invokespecial #15                 // Method readStream:([BII)I
      47: istore        5
      49: iload         5
      51: ifgt          67
      54: iload         4
      56: ifne          64
      59: iload         5
      61: goto          66
      64: iload         4
      66: ireturn
      67: iload         4
      69: iload         5
      71: iadd
      72: istore        4
      74: iload         4
      76: iload_3
      77: if_icmplt     83
      80: iload         4
      82: ireturn
      83: aload_0
      84: getfield      #9                  // Field in:Ljava/io/InputStream;
      87: astore        6
      89: aload         6
      91: ifnull        105
      94: aload         6
      96: invokevirtual #16                 // Method java/io/InputStream.available:()I
      99: ifgt          105
     102: iload         4
     104: ireturn
     105: goto          34

  public long skip(long) throws java.io.IOException;
    Code:
       0: lload_1
       1: lconst_0
       2: lcmp
       3: ifgt          8
       6: lconst_0
       7: lreturn
       8: aload_0
       9: getfield      #7                  // Field count:I
      12: aload_0
      13: getfield      #8                  // Field position:I
      16: isub
      17: i2l
      18: lstore_3
      19: lload_3
      20: lconst_0
      21: lcmp
      22: ifgt          34
      25: aload_0
      26: getfield      #9                  // Field in:Ljava/io/InputStream;
      29: lload_1
      30: invokevirtual #17                 // Method java/io/InputStream.skip:(J)J
      33: lreturn
      34: lload_3
      35: lload_1
      36: lcmp
      37: ifge          44
      40: lload_3
      41: goto          45
      44: lload_1
      45: lstore        5
      47: aload_0
      48: dup
      49: getfield      #8                  // Field position:I
      52: i2l
      53: lload         5
      55: ladd
      56: l2i
      57: putfield      #8                  // Field position:I
      60: lload         5
      62: lreturn

  public int available() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #9                  // Field in:Ljava/io/InputStream;
       4: invokevirtual #16                 // Method java/io/InputStream.available:()I
       7: aload_0
       8: getfield      #7                  // Field count:I
      11: aload_0
      12: getfield      #8                  // Field position:I
      15: isub
      16: iadd
      17: ireturn

  public boolean markSupported();
    Code:
       0: iconst_0
       1: ireturn

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #9                  // Field in:Ljava/io/InputStream;
       4: ifnull        14
       7: aload_0
       8: getfield      #9                  // Field in:Ljava/io/InputStream;
      11: invokevirtual #18                 // Method java/io/InputStream.close:()V
      14: return
}
