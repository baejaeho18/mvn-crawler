Compiled from "NIOSSLTransport.java"
public class org.apache.activemq.transport.nio.NIOSSLTransport extends org.apache.activemq.transport.nio.NIOTransport {
  private static final org.slf4j.Logger LOG;

  protected boolean needClientAuth;

  protected boolean wantClientAuth;

  protected java.lang.String[] enabledCipherSuites;

  protected javax.net.ssl.SSLContext sslContext;

  protected javax.net.ssl.SSLEngine sslEngine;

  protected javax.net.ssl.SSLSession sslSession;

  protected volatile boolean handshakeInProgress;

  protected javax.net.ssl.SSLEngineResult$Status status;

  protected javax.net.ssl.SSLEngineResult$HandshakeStatus handshakeStatus;

  protected org.apache.activemq.thread.TaskRunnerFactory taskRunnerFactory;

  public org.apache.activemq.transport.nio.NIOSSLTransport(org.apache.activemq.wireformat.WireFormat, javax.net.SocketFactory, java.net.URI, java.net.URI) throws java.net.UnknownHostException, java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokespecial #1                  // Method org/apache/activemq/transport/nio/NIOTransport."<init>":(Lorg/apache/activemq/wireformat/WireFormat;Ljavax/net/SocketFactory;Ljava/net/URI;Ljava/net/URI;)V
       9: aload_0
      10: iconst_0
      11: putfield      #2                  // Field handshakeInProgress:Z
      14: aload_0
      15: aconst_null
      16: putfield      #3                  // Field status:Ljavax/net/ssl/SSLEngineResult$Status;
      19: aload_0
      20: aconst_null
      21: putfield      #4                  // Field handshakeStatus:Ljavax/net/ssl/SSLEngineResult$HandshakeStatus;
      24: return

  public org.apache.activemq.transport.nio.NIOSSLTransport(org.apache.activemq.wireformat.WireFormat, java.net.Socket) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #5                  // Method org/apache/activemq/transport/nio/NIOTransport."<init>":(Lorg/apache/activemq/wireformat/WireFormat;Ljava/net/Socket;)V
       6: aload_0
       7: iconst_0
       8: putfield      #2                  // Field handshakeInProgress:Z
      11: aload_0
      12: aconst_null
      13: putfield      #3                  // Field status:Ljavax/net/ssl/SSLEngineResult$Status;
      16: aload_0
      17: aconst_null
      18: putfield      #4                  // Field handshakeStatus:Ljavax/net/ssl/SSLEngineResult$HandshakeStatus;
      21: return

  public void setSslContext(javax.net.ssl.SSLContext);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #6                  // Field sslContext:Ljavax/net/ssl/SSLContext;
       5: return

  protected void initializeStreams() throws java.io.IOException;
    Code:
       0: aconst_null
       1: astore_1
       2: aload_0
       3: aload_0
       4: getfield      #7                  // Field socket:Ljava/net/Socket;
       7: invokevirtual #8                  // Method java/net/Socket.getChannel:()Ljava/nio/channels/SocketChannel;
      10: putfield      #9                  // Field channel:Ljava/nio/channels/SocketChannel;
      13: aload_0
      14: getfield      #9                  // Field channel:Ljava/nio/channels/SocketChannel;
      17: iconst_0
      18: invokevirtual #10                 // Method java/nio/channels/SocketChannel.configureBlocking:(Z)Ljava/nio/channels/SelectableChannel;
      21: pop
      22: aload_0
      23: getfield      #6                  // Field sslContext:Ljavax/net/ssl/SSLContext;
      26: ifnonnull     36
      29: aload_0
      30: invokestatic  #11                 // Method javax/net/ssl/SSLContext.getDefault:()Ljavax/net/ssl/SSLContext;
      33: putfield      #6                  // Field sslContext:Ljavax/net/ssl/SSLContext;
      36: aconst_null
      37: astore_2
      38: iconst_m1
      39: istore_3
      40: new           #12                 // class java/net/URI
      43: dup
      44: aload_0
      45: invokevirtual #13                 // Method getRemoteAddress:()Ljava/lang/String;
      48: invokespecial #14                 // Method java/net/URI."<init>":(Ljava/lang/String;)V
      51: astore        4
      53: aload         4
      55: invokevirtual #15                 // Method java/net/URI.getHost:()Ljava/lang/String;
      58: astore_2
      59: aload         4
      61: invokevirtual #16                 // Method java/net/URI.getPort:()I
      64: istore_3
      65: goto          70
      68: astore        4
      70: aload_2
      71: ifnull        95
      74: iload_3
      75: iconst_m1
      76: if_icmpeq     95
      79: aload_0
      80: aload_0
      81: getfield      #6                  // Field sslContext:Ljavax/net/ssl/SSLContext;
      84: aload_2
      85: iload_3
      86: invokevirtual #18                 // Method javax/net/ssl/SSLContext.createSSLEngine:(Ljava/lang/String;I)Ljavax/net/ssl/SSLEngine;
      89: putfield      #19                 // Field sslEngine:Ljavax/net/ssl/SSLEngine;
      92: goto          106
      95: aload_0
      96: aload_0
      97: getfield      #6                  // Field sslContext:Ljavax/net/ssl/SSLContext;
     100: invokevirtual #20                 // Method javax/net/ssl/SSLContext.createSSLEngine:()Ljavax/net/ssl/SSLEngine;
     103: putfield      #19                 // Field sslEngine:Ljavax/net/ssl/SSLEngine;
     106: aload_0
     107: getfield      #19                 // Field sslEngine:Ljavax/net/ssl/SSLEngine;
     110: iconst_0
     111: invokevirtual #21                 // Method javax/net/ssl/SSLEngine.setUseClientMode:(Z)V
     114: aload_0
     115: getfield      #22                 // Field enabledCipherSuites:[Ljava/lang/String;
     118: ifnull        132
     121: aload_0
     122: getfield      #19                 // Field sslEngine:Ljavax/net/ssl/SSLEngine;
     125: aload_0
     126: getfield      #22                 // Field enabledCipherSuites:[Ljava/lang/String;
     129: invokevirtual #23                 // Method javax/net/ssl/SSLEngine.setEnabledCipherSuites:([Ljava/lang/String;)V
     132: aload_0
     133: getfield      #24                 // Field wantClientAuth:Z
     136: ifeq          150
     139: aload_0
     140: getfield      #19                 // Field sslEngine:Ljavax/net/ssl/SSLEngine;
     143: aload_0
     144: getfield      #24                 // Field wantClientAuth:Z
     147: invokevirtual #25                 // Method javax/net/ssl/SSLEngine.setWantClientAuth:(Z)V
     150: aload_0
     151: getfield      #26                 // Field needClientAuth:Z
     154: ifeq          168
     157: aload_0
     158: getfield      #19                 // Field sslEngine:Ljavax/net/ssl/SSLEngine;
     161: aload_0
     162: getfield      #26                 // Field needClientAuth:Z
     165: invokevirtual #27                 // Method javax/net/ssl/SSLEngine.setNeedClientAuth:(Z)V
     168: aload_0
     169: aload_0
     170: getfield      #19                 // Field sslEngine:Ljavax/net/ssl/SSLEngine;
     173: invokevirtual #28                 // Method javax/net/ssl/SSLEngine.getSession:()Ljavax/net/ssl/SSLSession;
     176: putfield      #29                 // Field sslSession:Ljavax/net/ssl/SSLSession;
     179: aload_0
     180: aload_0
     181: getfield      #29                 // Field sslSession:Ljavax/net/ssl/SSLSession;
     184: invokeinterface #30,  1           // InterfaceMethod javax/net/ssl/SSLSession.getPacketBufferSize:()I
     189: invokestatic  #31                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;
     192: putfield      #32                 // Field inputBuffer:Ljava/nio/ByteBuffer;
     195: aload_0
     196: getfield      #32                 // Field inputBuffer:Ljava/nio/ByteBuffer;
     199: invokevirtual #33                 // Method java/nio/ByteBuffer.clear:()Ljava/nio/Buffer;
     202: pop
     203: new           #34                 // class org/apache/activemq/transport/nio/NIOOutputStream
     206: dup
     207: aload_0
     208: getfield      #9                  // Field channel:Ljava/nio/channels/SocketChannel;
     211: invokespecial #35                 // Method org/apache/activemq/transport/nio/NIOOutputStream."<init>":(Ljava/nio/channels/WritableByteChannel;)V
     214: astore_1
     215: aload_1
     216: aload_0
     217: getfield      #19                 // Field sslEngine:Ljavax/net/ssl/SSLEngine;
     220: invokevirtual #36                 // Method org/apache/activemq/transport/nio/NIOOutputStream.setEngine:(Ljavax/net/ssl/SSLEngine;)V
     223: aload_0
     224: new           #37                 // class java/io/DataOutputStream
     227: dup
     228: aload_1
     229: invokespecial #38                 // Method java/io/DataOutputStream."<init>":(Ljava/io/OutputStream;)V
     232: putfield      #39                 // Field dataOut:Ljava/io/DataOutputStream;
     235: aload_0
     236: aload_1
     237: putfield      #40                 // Field buffOut:Lorg/apache/activemq/transport/tcp/TimeStampStream;
     240: aload_0
     241: getfield      #19                 // Field sslEngine:Ljavax/net/ssl/SSLEngine;
     244: invokevirtual #41                 // Method javax/net/ssl/SSLEngine.beginHandshake:()V
     247: aload_0
     248: aload_0
     249: getfield      #19                 // Field sslEngine:Ljavax/net/ssl/SSLEngine;
     252: invokevirtual #42                 // Method javax/net/ssl/SSLEngine.getHandshakeStatus:()Ljavax/net/ssl/SSLEngineResult$HandshakeStatus;
     255: putfield      #4                  // Field handshakeStatus:Ljavax/net/ssl/SSLEngineResult$HandshakeStatus;
     258: aload_0
     259: invokevirtual #43                 // Method doHandshake:()V
     262: goto          291
     265: astore_2
     266: aload_1
     267: ifnull        274
     270: aload_1
     271: invokevirtual #44                 // Method org/apache/activemq/transport/nio/NIOOutputStream.close:()V
     274: aload_0
     275: invokespecial #45                 // Method org/apache/activemq/transport/nio/NIOTransport.closeStreams:()V
     278: goto          282
     281: astore_3
     282: new           #46                 // class java/io/IOException
     285: dup
     286: aload_2
     287: invokespecial #47                 // Method java/io/IOException."<init>":(Ljava/lang/Throwable;)V
     290: athrow
     291: return
    Exception table:
       from    to  target type
          40    65    68   Class java/lang/Exception
           2   262   265   Class java/lang/Exception
         266   278   281   Class java/lang/Exception

  protected void finishHandshake() throws java.lang.Exception;
    Code:
       0: aload_0
       1: getfield      #2                  // Field handshakeInProgress:Z
       4: ifeq          50
       7: aload_0
       8: iconst_0
       9: putfield      #2                  // Field handshakeInProgress:Z
      12: aload_0
      13: iconst_m1
      14: putfield      #48                 // Field nextFrameSize:I
      17: aload_0
      18: aload_0
      19: getfield      #19                 // Field sslEngine:Ljavax/net/ssl/SSLEngine;
      22: invokevirtual #28                 // Method javax/net/ssl/SSLEngine.getSession:()Ljavax/net/ssl/SSLSession;
      25: putfield      #29                 // Field sslSession:Ljavax/net/ssl/SSLSession;
      28: aload_0
      29: invokestatic  #49                 // Method org/apache/activemq/transport/nio/SelectorManager.getInstance:()Lorg/apache/activemq/transport/nio/SelectorManager;
      32: aload_0
      33: getfield      #9                  // Field channel:Ljava/nio/channels/SocketChannel;
      36: new           #50                 // class org/apache/activemq/transport/nio/NIOSSLTransport$1
      39: dup
      40: aload_0
      41: invokespecial #51                 // Method org/apache/activemq/transport/nio/NIOSSLTransport$1."<init>":(Lorg/apache/activemq/transport/nio/NIOSSLTransport;)V
      44: invokevirtual #52                 // Method org/apache/activemq/transport/nio/SelectorManager.register:(Ljava/nio/channels/SocketChannel;Lorg/apache/activemq/transport/nio/SelectorManager$Listener;)Lorg/apache/activemq/transport/nio/SelectorSelection;
      47: putfield      #53                 // Field selection:Lorg/apache/activemq/transport/nio/SelectorSelection;
      50: return

  protected void serviceRead();
    Code:
       0: aload_0
       1: getfield      #2                  // Field handshakeInProgress:Z
       4: ifeq          11
       7: aload_0
       8: invokevirtual #43                 // Method doHandshake:()V
      11: aload_0
      12: getfield      #29                 // Field sslSession:Ljavax/net/ssl/SSLSession;
      15: invokeinterface #54,  1           // InterfaceMethod javax/net/ssl/SSLSession.getApplicationBufferSize:()I
      20: invokestatic  #31                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;
      23: astore_1
      24: aload_1
      25: aload_1
      26: invokevirtual #55                 // Method java/nio/ByteBuffer.limit:()I
      29: invokevirtual #56                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      32: pop
      33: aload_1
      34: invokevirtual #57                 // Method java/nio/ByteBuffer.hasRemaining:()Z
      37: ifne          89
      40: aload_0
      41: aload_1
      42: invokevirtual #58                 // Method secureRead:(Ljava/nio/ByteBuffer;)I
      45: istore_2
      46: iload_2
      47: ifne          53
      50: goto          117
      53: iload_2
      54: iconst_m1
      55: if_icmpne     79
      58: aload_0
      59: new           #59                 // class java/io/EOFException
      62: dup
      63: invokespecial #60                 // Method java/io/EOFException."<init>":()V
      66: invokevirtual #61                 // Method onException:(Ljava/io/IOException;)V
      69: aload_0
      70: getfield      #53                 // Field selection:Lorg/apache/activemq/transport/nio/SelectorSelection;
      73: invokevirtual #62                 // Method org/apache/activemq/transport/nio/SelectorSelection.close:()V
      76: goto          117
      79: aload_0
      80: dup
      81: getfield      #63                 // Field receiveCounter:I
      84: iload_2
      85: iadd
      86: putfield      #63                 // Field receiveCounter:I
      89: aload_0
      90: getfield      #3                  // Field status:Ljavax/net/ssl/SSLEngineResult$Status;
      93: getstatic     #64                 // Field javax/net/ssl/SSLEngineResult$Status.OK:Ljavax/net/ssl/SSLEngineResult$Status;
      96: if_acmpne     33
      99: aload_0
     100: getfield      #4                  // Field handshakeStatus:Ljavax/net/ssl/SSLEngineResult$HandshakeStatus;
     103: getstatic     #65                 // Field javax/net/ssl/SSLEngineResult$HandshakeStatus.NEED_UNWRAP:Ljavax/net/ssl/SSLEngineResult$HandshakeStatus;
     106: if_acmpeq     33
     109: aload_0
     110: aload_1
     111: invokevirtual #66                 // Method processCommand:(Ljava/nio/ByteBuffer;)V
     114: goto          33
     117: goto          138
     120: astore_1
     121: aload_0
     122: aload_1
     123: invokevirtual #61                 // Method onException:(Ljava/io/IOException;)V
     126: goto          138
     129: astore_1
     130: aload_0
     131: aload_1
     132: invokestatic  #68                 // Method org/apache/activemq/util/IOExceptionSupport.create:(Ljava/lang/Throwable;)Ljava/io/IOException;
     135: invokevirtual #61                 // Method onException:(Ljava/io/IOException;)V
     138: return
    Exception table:
       from    to  target type
           0   117   120   Class java/io/IOException
           0   117   129   Class java/lang/Throwable

  protected void processCommand(java.nio.ByteBuffer) throws java.lang.Exception;
    Code:
       0: aload_0
       1: getfield      #48                 // Field nextFrameSize:I
       4: iconst_m1
       5: if_icmpne     269
       8: aload_1
       9: invokevirtual #69                 // Method java/nio/ByteBuffer.remaining:()I
      12: bipush        32
      14: if_icmpge     97
      17: aload_0
      18: getfield      #70                 // Field currentBuffer:Ljava/nio/ByteBuffer;
      21: ifnonnull     32
      24: aload_0
      25: iconst_4
      26: invokestatic  #31                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;
      29: putfield      #70                 // Field currentBuffer:Ljava/nio/ByteBuffer;
      32: aload_0
      33: getfield      #70                 // Field currentBuffer:Ljava/nio/ByteBuffer;
      36: invokevirtual #57                 // Method java/nio/ByteBuffer.hasRemaining:()Z
      39: ifeq          64
      42: aload_1
      43: invokevirtual #57                 // Method java/nio/ByteBuffer.hasRemaining:()Z
      46: ifeq          64
      49: aload_0
      50: getfield      #70                 // Field currentBuffer:Ljava/nio/ByteBuffer;
      53: aload_1
      54: invokevirtual #71                 // Method java/nio/ByteBuffer.get:()B
      57: invokevirtual #72                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;
      60: pop
      61: goto          32
      64: aload_0
      65: getfield      #70                 // Field currentBuffer:Ljava/nio/ByteBuffer;
      68: invokevirtual #57                 // Method java/nio/ByteBuffer.hasRemaining:()Z
      71: ifeq          75
      74: return
      75: aload_0
      76: getfield      #70                 // Field currentBuffer:Ljava/nio/ByteBuffer;
      79: invokevirtual #73                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;
      82: pop
      83: aload_0
      84: aload_0
      85: getfield      #70                 // Field currentBuffer:Ljava/nio/ByteBuffer;
      88: invokevirtual #74                 // Method java/nio/ByteBuffer.getInt:()I
      91: putfield      #48                 // Field nextFrameSize:I
      94: goto          159
      97: aload_0
      98: getfield      #70                 // Field currentBuffer:Ljava/nio/ByteBuffer;
     101: ifnull        151
     104: aload_0
     105: getfield      #70                 // Field currentBuffer:Ljava/nio/ByteBuffer;
     108: invokevirtual #57                 // Method java/nio/ByteBuffer.hasRemaining:()Z
     111: ifeq          129
     114: aload_0
     115: getfield      #70                 // Field currentBuffer:Ljava/nio/ByteBuffer;
     118: aload_1
     119: invokevirtual #71                 // Method java/nio/ByteBuffer.get:()B
     122: invokevirtual #72                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;
     125: pop
     126: goto          104
     129: aload_0
     130: getfield      #70                 // Field currentBuffer:Ljava/nio/ByteBuffer;
     133: invokevirtual #73                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;
     136: pop
     137: aload_0
     138: aload_0
     139: getfield      #70                 // Field currentBuffer:Ljava/nio/ByteBuffer;
     142: invokevirtual #74                 // Method java/nio/ByteBuffer.getInt:()I
     145: putfield      #48                 // Field nextFrameSize:I
     148: goto          159
     151: aload_0
     152: aload_1
     153: invokevirtual #74                 // Method java/nio/ByteBuffer.getInt:()I
     156: putfield      #48                 // Field nextFrameSize:I
     159: aload_0
     160: getfield      #75                 // Field wireFormat:Lorg/apache/activemq/wireformat/WireFormat;
     163: instanceof    #76                 // class org/apache/activemq/openwire/OpenWireFormat
     166: ifeq          241
     169: aload_0
     170: getfield      #75                 // Field wireFormat:Lorg/apache/activemq/wireformat/WireFormat;
     173: checkcast     #76                 // class org/apache/activemq/openwire/OpenWireFormat
     176: invokevirtual #77                 // Method org/apache/activemq/openwire/OpenWireFormat.getMaxFrameSize:()J
     179: lstore_2
     180: aload_0
     181: getfield      #48                 // Field nextFrameSize:I
     184: i2l
     185: lload_2
     186: lcmp
     187: ifle          241
     190: new           #46                 // class java/io/IOException
     193: dup
     194: new           #78                 // class java/lang/StringBuilder
     197: dup
     198: invokespecial #79                 // Method java/lang/StringBuilder."<init>":()V
     201: ldc           #80                 // String Frame size of
     203: invokevirtual #81                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     206: aload_0
     207: getfield      #48                 // Field nextFrameSize:I
     210: ldc           #82                 // int 1048576
     212: idiv
     213: invokevirtual #83                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     216: ldc           #84                 // String  MB larger than max allowed
     218: invokevirtual #81                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     221: lload_2
     222: ldc2_w        #85                 // long 1048576l
     225: ldiv
     226: invokevirtual #87                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
     229: ldc           #88                 // String  MB
     231: invokevirtual #81                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     234: invokevirtual #89                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     237: invokespecial #90                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
     240: athrow
     241: aload_0
     242: aload_0
     243: getfield      #48                 // Field nextFrameSize:I
     246: iconst_4
     247: iadd
     248: invokestatic  #31                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;
     251: putfield      #70                 // Field currentBuffer:Ljava/nio/ByteBuffer;
     254: aload_0
     255: getfield      #70                 // Field currentBuffer:Ljava/nio/ByteBuffer;
     258: aload_0
     259: getfield      #48                 // Field nextFrameSize:I
     262: invokevirtual #91                 // Method java/nio/ByteBuffer.putInt:(I)Ljava/nio/ByteBuffer;
     265: pop
     266: goto          382
     269: aload_0
     270: getfield      #70                 // Field currentBuffer:Ljava/nio/ByteBuffer;
     273: invokevirtual #69                 // Method java/nio/ByteBuffer.remaining:()I
     276: aload_1
     277: invokevirtual #69                 // Method java/nio/ByteBuffer.remaining:()I
     280: if_icmplt     295
     283: aload_0
     284: getfield      #70                 // Field currentBuffer:Ljava/nio/ByteBuffer;
     287: aload_1
     288: invokevirtual #92                 // Method java/nio/ByteBuffer.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;
     291: pop
     292: goto          320
     295: aload_0
     296: getfield      #70                 // Field currentBuffer:Ljava/nio/ByteBuffer;
     299: invokevirtual #69                 // Method java/nio/ByteBuffer.remaining:()I
     302: newarray       byte
     304: astore_2
     305: aload_1
     306: aload_2
     307: invokevirtual #93                 // Method java/nio/ByteBuffer.get:([B)Ljava/nio/ByteBuffer;
     310: pop
     311: aload_0
     312: getfield      #70                 // Field currentBuffer:Ljava/nio/ByteBuffer;
     315: aload_2
     316: invokevirtual #94                 // Method java/nio/ByteBuffer.put:([B)Ljava/nio/ByteBuffer;
     319: pop
     320: aload_0
     321: getfield      #70                 // Field currentBuffer:Ljava/nio/ByteBuffer;
     324: invokevirtual #57                 // Method java/nio/ByteBuffer.hasRemaining:()Z
     327: ifeq          331
     330: return
     331: aload_0
     332: getfield      #70                 // Field currentBuffer:Ljava/nio/ByteBuffer;
     335: invokevirtual #73                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;
     338: pop
     339: aload_0
     340: getfield      #75                 // Field wireFormat:Lorg/apache/activemq/wireformat/WireFormat;
     343: new           #95                 // class java/io/DataInputStream
     346: dup
     347: new           #96                 // class org/apache/activemq/transport/nio/NIOInputStream
     350: dup
     351: aload_0
     352: getfield      #70                 // Field currentBuffer:Ljava/nio/ByteBuffer;
     355: invokespecial #97                 // Method org/apache/activemq/transport/nio/NIOInputStream."<init>":(Ljava/nio/ByteBuffer;)V
     358: invokespecial #98                 // Method java/io/DataInputStream."<init>":(Ljava/io/InputStream;)V
     361: invokeinterface #99,  2           // InterfaceMethod org/apache/activemq/wireformat/WireFormat.unmarshal:(Ljava/io/DataInput;)Ljava/lang/Object;
     366: astore_2
     367: aload_0
     368: aload_2
     369: invokevirtual #100                // Method doConsume:(Ljava/lang/Object;)V
     372: aload_0
     373: iconst_m1
     374: putfield      #48                 // Field nextFrameSize:I
     377: aload_0
     378: aconst_null
     379: putfield      #70                 // Field currentBuffer:Ljava/nio/ByteBuffer;
     382: return

  protected int secureRead(java.nio.ByteBuffer) throws java.lang.Exception;
    Code:
       0: aload_0
       1: getfield      #32                 // Field inputBuffer:Ljava/nio/ByteBuffer;
       4: invokevirtual #101                // Method java/nio/ByteBuffer.position:()I
       7: ifeq          30
      10: aload_0
      11: getfield      #32                 // Field inputBuffer:Ljava/nio/ByteBuffer;
      14: invokevirtual #57                 // Method java/nio/ByteBuffer.hasRemaining:()Z
      17: ifeq          30
      20: aload_0
      21: getfield      #3                  // Field status:Ljavax/net/ssl/SSLEngineResult$Status;
      24: getstatic     #102                // Field javax/net/ssl/SSLEngineResult$Status.BUFFER_UNDERFLOW:Ljavax/net/ssl/SSLEngineResult$Status;
      27: if_acmpne     82
      30: aload_0
      31: getfield      #9                  // Field channel:Ljava/nio/channels/SocketChannel;
      34: aload_0
      35: getfield      #32                 // Field inputBuffer:Ljava/nio/ByteBuffer;
      38: invokevirtual #103                // Method java/nio/channels/SocketChannel.read:(Ljava/nio/ByteBuffer;)I
      41: istore_2
      42: iload_2
      43: ifne          48
      46: iconst_0
      47: ireturn
      48: iload_2
      49: iconst_m1
      50: if_icmpne     82
      53: aload_0
      54: getfield      #19                 // Field sslEngine:Ljavax/net/ssl/SSLEngine;
      57: invokevirtual #104                // Method javax/net/ssl/SSLEngine.closeInbound:()V
      60: aload_0
      61: getfield      #32                 // Field inputBuffer:Ljava/nio/ByteBuffer;
      64: invokevirtual #101                // Method java/nio/ByteBuffer.position:()I
      67: ifeq          80
      70: aload_0
      71: getfield      #3                  // Field status:Ljavax/net/ssl/SSLEngineResult$Status;
      74: getstatic     #102                // Field javax/net/ssl/SSLEngineResult$Status.BUFFER_UNDERFLOW:Ljavax/net/ssl/SSLEngineResult$Status;
      77: if_acmpne     82
      80: iconst_m1
      81: ireturn
      82: aload_1
      83: invokevirtual #33                 // Method java/nio/ByteBuffer.clear:()Ljava/nio/Buffer;
      86: pop
      87: aload_0
      88: getfield      #32                 // Field inputBuffer:Ljava/nio/ByteBuffer;
      91: invokevirtual #73                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;
      94: pop
      95: aload_0
      96: getfield      #19                 // Field sslEngine:Ljavax/net/ssl/SSLEngine;
      99: aload_0
     100: getfield      #32                 // Field inputBuffer:Ljava/nio/ByteBuffer;
     103: aload_1
     104: invokevirtual #105                // Method javax/net/ssl/SSLEngine.unwrap:(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)Ljavax/net/ssl/SSLEngineResult;
     107: astore_2
     108: aload_2
     109: invokevirtual #106                // Method javax/net/ssl/SSLEngineResult.getStatus:()Ljavax/net/ssl/SSLEngineResult$Status;
     112: getstatic     #64                 // Field javax/net/ssl/SSLEngineResult$Status.OK:Ljavax/net/ssl/SSLEngineResult$Status;
     115: if_acmpne     135
     118: aload_2
     119: invokevirtual #107                // Method javax/net/ssl/SSLEngineResult.getHandshakeStatus:()Ljavax/net/ssl/SSLEngineResult$HandshakeStatus;
     122: getstatic     #65                 // Field javax/net/ssl/SSLEngineResult$HandshakeStatus.NEED_UNWRAP:Ljavax/net/ssl/SSLEngineResult$HandshakeStatus;
     125: if_acmpne     135
     128: aload_2
     129: invokevirtual #108                // Method javax/net/ssl/SSLEngineResult.bytesProduced:()I
     132: ifeq          95
     135: aload_2
     136: invokevirtual #107                // Method javax/net/ssl/SSLEngineResult.getHandshakeStatus:()Ljavax/net/ssl/SSLEngineResult$HandshakeStatus;
     139: getstatic     #109                // Field javax/net/ssl/SSLEngineResult$HandshakeStatus.FINISHED:Ljavax/net/ssl/SSLEngineResult$HandshakeStatus;
     142: if_acmpne     149
     145: aload_0
     146: invokevirtual #110                // Method finishHandshake:()V
     149: aload_0
     150: aload_2
     151: invokevirtual #106                // Method javax/net/ssl/SSLEngineResult.getStatus:()Ljavax/net/ssl/SSLEngineResult$Status;
     154: putfield      #3                  // Field status:Ljavax/net/ssl/SSLEngineResult$Status;
     157: aload_0
     158: aload_2
     159: invokevirtual #107                // Method javax/net/ssl/SSLEngineResult.getHandshakeStatus:()Ljavax/net/ssl/SSLEngineResult$HandshakeStatus;
     162: putfield      #4                  // Field handshakeStatus:Ljavax/net/ssl/SSLEngineResult$HandshakeStatus;
     165: aload_0
     166: getfield      #3                  // Field status:Ljavax/net/ssl/SSLEngineResult$Status;
     169: getstatic     #111                // Field javax/net/ssl/SSLEngineResult$Status.CLOSED:Ljavax/net/ssl/SSLEngineResult$Status;
     172: if_acmpne     184
     175: aload_0
     176: getfield      #19                 // Field sslEngine:Ljavax/net/ssl/SSLEngine;
     179: invokevirtual #104                // Method javax/net/ssl/SSLEngine.closeInbound:()V
     182: iconst_m1
     183: ireturn
     184: aload_0
     185: getfield      #32                 // Field inputBuffer:Ljava/nio/ByteBuffer;
     188: invokevirtual #112                // Method java/nio/ByteBuffer.compact:()Ljava/nio/ByteBuffer;
     191: pop
     192: aload_1
     193: invokevirtual #73                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;
     196: pop
     197: aload_1
     198: invokevirtual #69                 // Method java/nio/ByteBuffer.remaining:()I
     201: ireturn

  protected void doHandshake() throws java.lang.Exception;
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #2                  // Field handshakeInProgress:Z
       5: getstatic     #113                // Field org/apache/activemq/transport/nio/NIOSSLTransport$2.$SwitchMap$javax$net$ssl$SSLEngineResult$HandshakeStatus:[I
       8: aload_0
       9: getfield      #19                 // Field sslEngine:Ljavax/net/ssl/SSLEngine;
      12: invokevirtual #42                 // Method javax/net/ssl/SSLEngine.getHandshakeStatus:()Ljavax/net/ssl/SSLEngineResult$HandshakeStatus;
      15: invokevirtual #114                // Method javax/net/ssl/SSLEngineResult$HandshakeStatus.ordinal:()I
      18: iaload
      19: tableswitch   { // 1 to 5
                     1: 52
                     2: 72
                     3: 95
                     4: 112
                     5: 112
               default: 117
          }
      52: aload_0
      53: aload_0
      54: getfield      #29                 // Field sslSession:Ljavax/net/ssl/SSLSession;
      57: invokeinterface #54,  1           // InterfaceMethod javax/net/ssl/SSLSession.getApplicationBufferSize:()I
      62: invokestatic  #31                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;
      65: invokevirtual #58                 // Method secureRead:(Ljava/nio/ByteBuffer;)I
      68: pop
      69: goto          117
      72: aload_0
      73: getfield      #19                 // Field sslEngine:Ljavax/net/ssl/SSLEngine;
      76: invokevirtual #115                // Method javax/net/ssl/SSLEngine.getDelegatedTask:()Ljava/lang/Runnable;
      79: dup
      80: astore_1
      81: ifnull        117
      84: aload_0
      85: getfield      #116                // Field taskRunnerFactory:Lorg/apache/activemq/thread/TaskRunnerFactory;
      88: aload_1
      89: invokevirtual #117                // Method org/apache/activemq/thread/TaskRunnerFactory.execute:(Ljava/lang/Runnable;)V
      92: goto          72
      95: aload_0
      96: getfield      #40                 // Field buffOut:Lorg/apache/activemq/transport/tcp/TimeStampStream;
      99: checkcast     #34                 // class org/apache/activemq/transport/nio/NIOOutputStream
     102: iconst_0
     103: invokestatic  #31                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;
     106: invokevirtual #118                // Method org/apache/activemq/transport/nio/NIOOutputStream.write:(Ljava/nio/ByteBuffer;)V
     109: goto          117
     112: aload_0
     113: invokevirtual #110                // Method finishHandshake:()V
     116: return
     117: goto          5

  protected void doStart() throws java.lang.Exception;
    Code:
       0: aload_0
       1: new           #119                // class org/apache/activemq/thread/TaskRunnerFactory
       4: dup
       5: ldc           #120                // String ActiveMQ NIOSSLTransport Task
       7: invokespecial #121                // Method org/apache/activemq/thread/TaskRunnerFactory."<init>":(Ljava/lang/String;)V
      10: putfield      #116                // Field taskRunnerFactory:Lorg/apache/activemq/thread/TaskRunnerFactory;
      13: aload_0
      14: invokespecial #122                // Method org/apache/activemq/transport/nio/NIOTransport.doStart:()V
      17: return

  protected void doStop(org.apache.activemq.util.ServiceStopper) throws java.lang.Exception;
    Code:
       0: aload_0
       1: getfield      #116                // Field taskRunnerFactory:Lorg/apache/activemq/thread/TaskRunnerFactory;
       4: ifnull        19
       7: aload_0
       8: getfield      #116                // Field taskRunnerFactory:Lorg/apache/activemq/thread/TaskRunnerFactory;
      11: invokevirtual #123                // Method org/apache/activemq/thread/TaskRunnerFactory.shutdownNow:()V
      14: aload_0
      15: aconst_null
      16: putfield      #116                // Field taskRunnerFactory:Lorg/apache/activemq/thread/TaskRunnerFactory;
      19: aload_0
      20: getfield      #9                  // Field channel:Ljava/nio/channels/SocketChannel;
      23: ifnull        38
      26: aload_0
      27: getfield      #9                  // Field channel:Ljava/nio/channels/SocketChannel;
      30: invokevirtual #124                // Method java/nio/channels/SocketChannel.close:()V
      33: aload_0
      34: aconst_null
      35: putfield      #9                  // Field channel:Ljava/nio/channels/SocketChannel;
      38: aload_0
      39: aload_1
      40: invokespecial #125                // Method org/apache/activemq/transport/nio/NIOTransport.doStop:(Lorg/apache/activemq/util/ServiceStopper;)V
      43: return

  public void doConsume(java.lang.Object);
    Code:
       0: aload_1
       1: instanceof    #126                // class org/apache/activemq/command/ConnectionInfo
       4: ifeq          20
       7: aload_1
       8: checkcast     #126                // class org/apache/activemq/command/ConnectionInfo
      11: astore_2
      12: aload_2
      13: aload_0
      14: invokevirtual #127                // Method getPeerCertificates:()[Ljava/security/cert/X509Certificate;
      17: invokevirtual #128                // Method org/apache/activemq/command/ConnectionInfo.setTransportContext:(Ljava/lang/Object;)V
      20: aload_0
      21: aload_1
      22: invokespecial #129                // Method org/apache/activemq/transport/nio/NIOTransport.doConsume:(Ljava/lang/Object;)V
      25: return

  public java.security.cert.X509Certificate[] getPeerCertificates();
    Code:
       0: aconst_null
       1: astore_1
       2: aload_0
       3: getfield      #19                 // Field sslEngine:Ljavax/net/ssl/SSLEngine;
       6: invokevirtual #28                 // Method javax/net/ssl/SSLEngine.getSession:()Ljavax/net/ssl/SSLSession;
       9: ifnull        31
      12: aload_0
      13: getfield      #19                 // Field sslEngine:Ljavax/net/ssl/SSLEngine;
      16: invokevirtual #28                 // Method javax/net/ssl/SSLEngine.getSession:()Ljavax/net/ssl/SSLSession;
      19: invokeinterface #130,  1          // InterfaceMethod javax/net/ssl/SSLSession.getPeerCertificates:()[Ljava/security/cert/Certificate;
      24: checkcast     #131                // class "[Ljava/security/cert/X509Certificate;"
      27: checkcast     #131                // class "[Ljava/security/cert/X509Certificate;"
      30: astore_1
      31: goto          57
      34: astore_2
      35: getstatic     #133                // Field LOG:Lorg/slf4j/Logger;
      38: invokeinterface #134,  1          // InterfaceMethod org/slf4j/Logger.isTraceEnabled:()Z
      43: ifeq          57
      46: getstatic     #133                // Field LOG:Lorg/slf4j/Logger;
      49: ldc           #135                // String Failed to get peer certificates.
      51: aload_2
      52: invokeinterface #136,  3          // InterfaceMethod org/slf4j/Logger.trace:(Ljava/lang/String;Ljava/lang/Throwable;)V
      57: aload_1
      58: areturn
    Exception table:
       from    to  target type
           2    31    34   Class javax/net/ssl/SSLPeerUnverifiedException

  public boolean isNeedClientAuth();
    Code:
       0: aload_0
       1: getfield      #26                 // Field needClientAuth:Z
       4: ireturn

  public void setNeedClientAuth(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #26                 // Field needClientAuth:Z
       5: return

  public boolean isWantClientAuth();
    Code:
       0: aload_0
       1: getfield      #24                 // Field wantClientAuth:Z
       4: ireturn

  public void setWantClientAuth(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #24                 // Field wantClientAuth:Z
       5: return

  public java.lang.String[] getEnabledCipherSuites();
    Code:
       0: aload_0
       1: getfield      #22                 // Field enabledCipherSuites:[Ljava/lang/String;
       4: areturn

  public void setEnabledCipherSuites(java.lang.String[]);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #22                 // Field enabledCipherSuites:[Ljava/lang/String;
       5: return

  static {};
    Code:
       0: ldc_w         #137                // class org/apache/activemq/transport/nio/NIOSSLTransport
       3: invokestatic  #138                // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       6: putstatic     #133                // Field LOG:Lorg/slf4j/Logger;
       9: return
}
