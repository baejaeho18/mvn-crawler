Compiled from "LRUCache.java"
public class org.apache.activemq.util.LRUCache<K, V> extends java.util.LinkedHashMap<K, V> {
  private static final long serialVersionUID;

  protected int maxCacheSize;

  public org.apache.activemq.util.LRUCache();
    Code:
       0: aload_0
       1: iconst_0
       2: sipush        10000
       5: ldc           #1                  // float 0.75f
       7: iconst_1
       8: invokespecial #2                  // Method "<init>":(IIFZ)V
      11: return

  public org.apache.activemq.util.LRUCache(int);
    Code:
       0: aload_0
       1: iconst_0
       2: iload_1
       3: ldc           #1                  // float 0.75f
       5: iconst_1
       6: invokespecial #2                  // Method "<init>":(IIFZ)V
       9: return

  public org.apache.activemq.util.LRUCache(int, int, float, boolean);
    Code:
       0: aload_0
       1: iload_1
       2: fload_3
       3: iload         4
       5: invokespecial #3                  // Method java/util/LinkedHashMap."<init>":(IFZ)V
       8: aload_0
       9: sipush        10000
      12: putfield      #4                  // Field maxCacheSize:I
      15: aload_0
      16: iload_2
      17: putfield      #4                  // Field maxCacheSize:I
      20: return

  public int getMaxCacheSize();
    Code:
       0: aload_0
       1: getfield      #4                  // Field maxCacheSize:I
       4: ireturn

  public void setMaxCacheSize(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #4                  // Field maxCacheSize:I
       5: return

  protected boolean removeEldestEntry(java.util.Map$Entry<K, V>);
    Code:
       0: aload_0
       1: invokevirtual #5                  // Method size:()I
       4: aload_0
       5: getfield      #4                  // Field maxCacheSize:I
       8: if_icmple     18
      11: aload_0
      12: aload_1
      13: invokevirtual #6                  // Method onCacheEviction:(Ljava/util/Map$Entry;)V
      16: iconst_1
      17: ireturn
      18: iconst_0
      19: ireturn

  protected void onCacheEviction(java.util.Map$Entry<K, V>);
    Code:
       0: return
}
