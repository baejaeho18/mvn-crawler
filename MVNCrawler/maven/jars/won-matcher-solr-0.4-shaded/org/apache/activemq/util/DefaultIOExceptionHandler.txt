Compiled from "DefaultIOExceptionHandler.java"
public class org.apache.activemq.util.DefaultIOExceptionHandler implements org.apache.activemq.util.IOExceptionHandler {
  private static final org.slf4j.Logger LOG;

  protected org.apache.activemq.broker.BrokerService broker;

  private boolean ignoreAllErrors;

  private boolean ignoreNoSpaceErrors;

  private boolean ignoreSQLExceptions;

  private boolean stopStartConnectors;

  private java.lang.String noSpaceMessage;

  private java.lang.String sqlExceptionMessage;

  private long resumeCheckSleepPeriod;

  private java.util.concurrent.atomic.AtomicBoolean handlingException;

  public org.apache.activemq.util.DefaultIOExceptionHandler();
    Code:
       0: aload_0
       1: invokespecial #5                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #6                  // Field ignoreAllErrors:Z
       9: aload_0
      10: iconst_1
      11: putfield      #7                  // Field ignoreNoSpaceErrors:Z
      14: aload_0
      15: iconst_1
      16: putfield      #8                  // Field ignoreSQLExceptions:Z
      19: aload_0
      20: iconst_0
      21: putfield      #9                  // Field stopStartConnectors:Z
      24: aload_0
      25: ldc           #10                 // String space
      27: putfield      #11                 // Field noSpaceMessage:Ljava/lang/String;
      30: aload_0
      31: ldc           #12                 // String
      33: putfield      #13                 // Field sqlExceptionMessage:Ljava/lang/String;
      36: aload_0
      37: ldc2_w        #14                 // long 5000l
      40: putfield      #3                  // Field resumeCheckSleepPeriod:J
      43: aload_0
      44: new           #16                 // class java/util/concurrent/atomic/AtomicBoolean
      47: dup
      48: iconst_0
      49: invokespecial #17                 // Method java/util/concurrent/atomic/AtomicBoolean."<init>":(Z)V
      52: putfield      #1                  // Field handlingException:Ljava/util/concurrent/atomic/AtomicBoolean;
      55: return

  public void handle(java.io.IOException);
    Code:
       0: aload_0
       1: getfield      #6                  // Field ignoreAllErrors:Z
       4: ifeq          36
       7: getstatic     #4                  // Field LOG:Lorg/slf4j/Logger;
      10: new           #18                 // class java/lang/StringBuilder
      13: dup
      14: invokespecial #19                 // Method java/lang/StringBuilder."<init>":()V
      17: ldc           #20                 // String Ignoring IO exception,
      19: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      22: aload_1
      23: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      26: invokevirtual #23                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      29: aload_1
      30: invokeinterface #24,  3           // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;Ljava/lang/Throwable;)V
      35: return
      36: aload_0
      37: getfield      #7                  // Field ignoreNoSpaceErrors:Z
      40: ifeq          113
      43: aload_1
      44: astore_2
      45: aload_2
      46: ifnull        113
      49: aload_2
      50: instanceof    #25                 // class java/io/IOException
      53: ifeq          113
      56: aload_2
      57: invokevirtual #26                 // Method java/lang/Throwable.getMessage:()Ljava/lang/String;
      60: astore_3
      61: aload_3
      62: ifnull        105
      65: aload_3
      66: aload_0
      67: getfield      #11                 // Field noSpaceMessage:Ljava/lang/String;
      70: invokevirtual #27                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
      73: ifeq          105
      76: getstatic     #4                  // Field LOG:Lorg/slf4j/Logger;
      79: new           #18                 // class java/lang/StringBuilder
      82: dup
      83: invokespecial #19                 // Method java/lang/StringBuilder."<init>":()V
      86: ldc           #28                 // String Ignoring no space left exception,
      88: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      91: aload_1
      92: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      95: invokevirtual #23                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      98: aload_1
      99: invokeinterface #24,  3           // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;Ljava/lang/Throwable;)V
     104: return
     105: aload_2
     106: invokevirtual #29                 // Method java/lang/Throwable.getCause:()Ljava/lang/Throwable;
     109: astore_2
     110: goto          45
     113: aload_0
     114: getfield      #8                  // Field ignoreSQLExceptions:Z
     117: ifeq          186
     120: aload_1
     121: astore_2
     122: aload_2
     123: ifnull        186
     126: aload_2
     127: invokevirtual #26                 // Method java/lang/Throwable.getMessage:()Ljava/lang/String;
     130: astore_3
     131: aload_2
     132: instanceof    #30                 // class java/sql/SQLException
     135: ifeq          178
     138: aload_3
     139: aload_0
     140: getfield      #13                 // Field sqlExceptionMessage:Ljava/lang/String;
     143: invokevirtual #27                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
     146: ifeq          178
     149: getstatic     #4                  // Field LOG:Lorg/slf4j/Logger;
     152: new           #18                 // class java/lang/StringBuilder
     155: dup
     156: invokespecial #19                 // Method java/lang/StringBuilder."<init>":()V
     159: ldc           #31                 // String Ignoring SQLException,
     161: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     164: aload_1
     165: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     168: invokevirtual #23                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     171: aload_2
     172: invokeinterface #24,  3           // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;Ljava/lang/Throwable;)V
     177: return
     178: aload_2
     179: invokevirtual #29                 // Method java/lang/Throwable.getCause:()Ljava/lang/Throwable;
     182: astore_2
     183: goto          122
     186: aload_0
     187: getfield      #9                  // Field stopStartConnectors:Z
     190: ifeq          269
     193: aload_0
     194: getfield      #1                  // Field handlingException:Ljava/util/concurrent/atomic/AtomicBoolean;
     197: iconst_0
     198: iconst_1
     199: invokevirtual #32                 // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z
     202: ifeq          258
     205: getstatic     #4                  // Field LOG:Lorg/slf4j/Logger;
     208: new           #18                 // class java/lang/StringBuilder
     211: dup
     212: invokespecial #19                 // Method java/lang/StringBuilder."<init>":()V
     215: ldc           #33                 // String Initiating stop/restart of transports on
     217: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     220: aload_0
     221: getfield      #34                 // Field broker:Lorg/apache/activemq/broker/BrokerService;
     224: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     227: ldc           #35                 // String  due to IO exception,
     229: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     232: aload_1
     233: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     236: invokevirtual #23                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     239: aload_1
     240: invokeinterface #24,  3           // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;Ljava/lang/Throwable;)V
     245: new           #36                 // class org/apache/activemq/util/DefaultIOExceptionHandler$1
     248: dup
     249: aload_0
     250: ldc           #37                 // String IOExceptionHandler: stop transports
     252: invokespecial #38                 // Method org/apache/activemq/util/DefaultIOExceptionHandler$1."<init>":(Lorg/apache/activemq/util/DefaultIOExceptionHandler;Ljava/lang/String;)V
     255: invokevirtual #39                 // Method org/apache/activemq/util/DefaultIOExceptionHandler$1.start:()V
     258: new           #40                 // class org/apache/activemq/broker/SuppressReplyException
     261: dup
     262: ldc           #41                 // String Stop/RestartTransportsInitiated
     264: aload_1
     265: invokespecial #42                 // Method org/apache/activemq/broker/SuppressReplyException."<init>":(Ljava/lang/String;Ljava/io/IOException;)V
     268: athrow
     269: aload_0
     270: getfield      #1                  // Field handlingException:Ljava/util/concurrent/atomic/AtomicBoolean;
     273: iconst_0
     274: iconst_1
     275: invokevirtual #32                 // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z
     278: ifeq          286
     281: aload_0
     282: aload_1
     283: invokespecial #2                  // Method stopBroker:(Ljava/lang/Exception;)V
     286: new           #40                 // class org/apache/activemq/broker/SuppressReplyException
     289: dup
     290: ldc           #43                 // String ShutdownBrokerInitiated
     292: aload_1
     293: invokespecial #42                 // Method org/apache/activemq/broker/SuppressReplyException."<init>":(Ljava/lang/String;Ljava/io/IOException;)V
     296: athrow

  private void stopBroker(java.lang.Exception);
    Code:
       0: getstatic     #4                  // Field LOG:Lorg/slf4j/Logger;
       3: new           #18                 // class java/lang/StringBuilder
       6: dup
       7: invokespecial #19                 // Method java/lang/StringBuilder."<init>":()V
      10: ldc           #44                 // String Stopping
      12: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      15: aload_0
      16: getfield      #34                 // Field broker:Lorg/apache/activemq/broker/BrokerService;
      19: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      22: ldc           #45                 // String  due to exception,
      24: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      27: aload_1
      28: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      31: invokevirtual #23                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      34: aload_1
      35: invokeinterface #24,  3           // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;Ljava/lang/Throwable;)V
      40: new           #46                 // class org/apache/activemq/util/DefaultIOExceptionHandler$2
      43: dup
      44: aload_0
      45: new           #18                 // class java/lang/StringBuilder
      48: dup
      49: invokespecial #19                 // Method java/lang/StringBuilder."<init>":()V
      52: ldc           #47                 // String IOExceptionHandler: stopping
      54: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      57: aload_0
      58: getfield      #34                 // Field broker:Lorg/apache/activemq/broker/BrokerService;
      61: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      64: invokevirtual #23                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      67: invokespecial #48                 // Method org/apache/activemq/util/DefaultIOExceptionHandler$2."<init>":(Lorg/apache/activemq/util/DefaultIOExceptionHandler;Ljava/lang/String;)V
      70: invokevirtual #49                 // Method org/apache/activemq/util/DefaultIOExceptionHandler$2.start:()V
      73: return

  protected boolean hasLockOwnership() throws java.io.IOException;
    Code:
       0: iconst_1
       1: ireturn

  public void setBrokerService(org.apache.activemq.broker.BrokerService);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #34                 // Field broker:Lorg/apache/activemq/broker/BrokerService;
       5: return

  public boolean isIgnoreAllErrors();
    Code:
       0: aload_0
       1: getfield      #6                  // Field ignoreAllErrors:Z
       4: ireturn

  public void setIgnoreAllErrors(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #6                  // Field ignoreAllErrors:Z
       5: return

  public boolean isIgnoreNoSpaceErrors();
    Code:
       0: aload_0
       1: getfield      #7                  // Field ignoreNoSpaceErrors:Z
       4: ireturn

  public void setIgnoreNoSpaceErrors(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #7                  // Field ignoreNoSpaceErrors:Z
       5: return

  public java.lang.String getNoSpaceMessage();
    Code:
       0: aload_0
       1: getfield      #11                 // Field noSpaceMessage:Ljava/lang/String;
       4: areturn

  public void setNoSpaceMessage(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #11                 // Field noSpaceMessage:Ljava/lang/String;
       5: return

  public boolean isIgnoreSQLExceptions();
    Code:
       0: aload_0
       1: getfield      #8                  // Field ignoreSQLExceptions:Z
       4: ireturn

  public void setIgnoreSQLExceptions(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #8                  // Field ignoreSQLExceptions:Z
       5: return

  public java.lang.String getSqlExceptionMessage();
    Code:
       0: aload_0
       1: getfield      #13                 // Field sqlExceptionMessage:Ljava/lang/String;
       4: areturn

  public void setSqlExceptionMessage(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #13                 // Field sqlExceptionMessage:Ljava/lang/String;
       5: return

  public boolean isStopStartConnectors();
    Code:
       0: aload_0
       1: getfield      #9                  // Field stopStartConnectors:Z
       4: ireturn

  public void setStopStartConnectors(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #9                  // Field stopStartConnectors:Z
       5: return

  public long getResumeCheckSleepPeriod();
    Code:
       0: aload_0
       1: getfield      #3                  // Field resumeCheckSleepPeriod:J
       4: lreturn

  public void setResumeCheckSleepPeriod(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #3                  // Field resumeCheckSleepPeriod:J
       5: return

  static org.slf4j.Logger access$000();
    Code:
       0: getstatic     #4                  // Field LOG:Lorg/slf4j/Logger;
       3: areturn

  static long access$100(org.apache.activemq.util.DefaultIOExceptionHandler);
    Code:
       0: aload_0
       1: getfield      #3                  // Field resumeCheckSleepPeriod:J
       4: lreturn

  static void access$200(org.apache.activemq.util.DefaultIOExceptionHandler, java.lang.Exception);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #2                  // Method stopBroker:(Ljava/lang/Exception;)V
       5: return

  static java.util.concurrent.atomic.AtomicBoolean access$300(org.apache.activemq.util.DefaultIOExceptionHandler);
    Code:
       0: aload_0
       1: getfield      #1                  // Field handlingException:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: areturn

  static {};
    Code:
       0: ldc_w         #50                 // class org/apache/activemq/util/DefaultIOExceptionHandler
       3: invokestatic  #51                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       6: putstatic     #4                  // Field LOG:Lorg/slf4j/Logger;
       9: return
}
