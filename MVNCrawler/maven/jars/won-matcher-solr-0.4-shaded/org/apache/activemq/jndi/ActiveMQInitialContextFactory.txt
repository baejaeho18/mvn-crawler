Compiled from "ActiveMQInitialContextFactory.java"
public class org.apache.activemq.jndi.ActiveMQInitialContextFactory implements javax.naming.spi.InitialContextFactory {
  private static final java.lang.String[] DEFAULT_CONNECTION_FACTORY_NAMES;

  private java.lang.String connectionPrefix;

  private java.lang.String queuePrefix;

  private java.lang.String topicPrefix;

  public org.apache.activemq.jndi.ActiveMQInitialContextFactory();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: ldc           #2                  // String connection.
       7: putfield      #3                  // Field connectionPrefix:Ljava/lang/String;
      10: aload_0
      11: ldc           #4                  // String queue.
      13: putfield      #5                  // Field queuePrefix:Ljava/lang/String;
      16: aload_0
      17: ldc           #6                  // String topic.
      19: putfield      #7                  // Field topicPrefix:Ljava/lang/String;
      22: return

  public javax.naming.Context getInitialContext(java.util.Hashtable) throws javax.naming.NamingException;
    Code:
       0: new           #8                  // class java/util/concurrent/ConcurrentHashMap
       3: dup
       4: invokespecial #9                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
       7: astore_2
       8: aload_0
       9: aload_1
      10: invokevirtual #10                 // Method getConnectionFactoryNames:(Ljava/util/Map;)[Ljava/lang/String;
      13: astore_3
      14: iconst_0
      15: istore        4
      17: iload         4
      19: aload_3
      20: arraylength
      21: if_icmpge     74
      24: aconst_null
      25: astore        5
      27: aload_3
      28: iload         4
      30: aaload
      31: astore        6
      33: aload_0
      34: aload         6
      36: aload_1
      37: invokevirtual #11                 // Method createConnectionFactory:(Ljava/lang/String;Ljava/util/Hashtable;)Lorg/apache/activemq/ActiveMQConnectionFactory;
      40: astore        5
      42: goto          57
      45: astore        7
      47: new           #13                 // class javax/naming/NamingException
      50: dup
      51: ldc           #14                 // String Invalid broker URL
      53: invokespecial #15                 // Method javax/naming/NamingException."<init>":(Ljava/lang/String;)V
      56: athrow
      57: aload_2
      58: aload         6
      60: aload         5
      62: invokeinterface #16,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      67: pop
      68: iinc          4, 1
      71: goto          17
      74: aload_0
      75: aload_2
      76: aload_1
      77: invokevirtual #17                 // Method createQueues:(Ljava/util/Map;Ljava/util/Hashtable;)V
      80: aload_0
      81: aload_2
      82: aload_1
      83: invokevirtual #18                 // Method createTopics:(Ljava/util/Map;Ljava/util/Hashtable;)V
      86: aload_2
      87: ldc           #19                 // String dynamicQueues
      89: new           #20                 // class org/apache/activemq/jndi/ActiveMQInitialContextFactory$1
      92: dup
      93: aload_0
      94: invokespecial #21                 // Method org/apache/activemq/jndi/ActiveMQInitialContextFactory$1."<init>":(Lorg/apache/activemq/jndi/ActiveMQInitialContextFactory;)V
      97: invokeinterface #16,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     102: pop
     103: aload_2
     104: ldc           #22                 // String dynamicTopics
     106: new           #23                 // class org/apache/activemq/jndi/ActiveMQInitialContextFactory$2
     109: dup
     110: aload_0
     111: invokespecial #24                 // Method org/apache/activemq/jndi/ActiveMQInitialContextFactory$2."<init>":(Lorg/apache/activemq/jndi/ActiveMQInitialContextFactory;)V
     114: invokeinterface #16,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     119: pop
     120: aload_0
     121: aload_1
     122: aload_2
     123: invokevirtual #25                 // Method createContext:(Ljava/util/Hashtable;Ljava/util/Map;)Lorg/apache/activemq/jndi/ReadOnlyContext;
     126: areturn
    Exception table:
       from    to  target type
          33    42    45   Class java/lang/Exception

  public java.lang.String getTopicPrefix();
    Code:
       0: aload_0
       1: getfield      #7                  // Field topicPrefix:Ljava/lang/String;
       4: areturn

  public void setTopicPrefix(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #7                  // Field topicPrefix:Ljava/lang/String;
       5: return

  public java.lang.String getQueuePrefix();
    Code:
       0: aload_0
       1: getfield      #5                  // Field queuePrefix:Ljava/lang/String;
       4: areturn

  public void setQueuePrefix(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #5                  // Field queuePrefix:Ljava/lang/String;
       5: return

  protected org.apache.activemq.jndi.ReadOnlyContext createContext(java.util.Hashtable, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: new           #26                 // class org/apache/activemq/jndi/ReadOnlyContext
       3: dup
       4: aload_1
       5: aload_2
       6: invokespecial #27                 // Method org/apache/activemq/jndi/ReadOnlyContext."<init>":(Ljava/util/Hashtable;Ljava/util/Map;)V
       9: areturn

  protected org.apache.activemq.ActiveMQConnectionFactory createConnectionFactory(java.lang.String, java.util.Hashtable) throws java.net.URISyntaxException;
    Code:
       0: new           #28                 // class java/util/Hashtable
       3: dup
       4: aload_2
       5: invokespecial #29                 // Method java/util/Hashtable."<init>":(Ljava/util/Map;)V
       8: astore_3
       9: getstatic     #30                 // Field DEFAULT_CONNECTION_FACTORY_NAMES:[Ljava/lang/String;
      12: iconst_1
      13: aaload
      14: aload_1
      15: invokevirtual #31                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      18: ifeq          32
      21: aload_3
      22: ldc           #32                 // String xa
      24: iconst_1
      25: invokestatic  #33                 // Method java/lang/String.valueOf:(Z)Ljava/lang/String;
      28: invokevirtual #34                 // Method java/util/Hashtable.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      31: pop
      32: new           #35                 // class java/lang/StringBuilder
      35: dup
      36: invokespecial #36                 // Method java/lang/StringBuilder."<init>":()V
      39: aload_0
      40: getfield      #3                  // Field connectionPrefix:Ljava/lang/String;
      43: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      46: aload_1
      47: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      50: ldc           #38                 // String .
      52: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      55: invokevirtual #39                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      58: astore        4
      60: aload_2
      61: invokevirtual #40                 // Method java/util/Hashtable.entrySet:()Ljava/util/Set;
      64: invokeinterface #41,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      69: astore        5
      71: aload         5
      73: invokeinterface #42,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      78: ifeq          151
      81: aload         5
      83: invokeinterface #43,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      88: checkcast     #44                 // class java/util/Map$Entry
      91: astore        6
      93: aload         6
      95: invokeinterface #45,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
     100: checkcast     #46                 // class java/lang/String
     103: astore        7
     105: aload         7
     107: aload         4
     109: invokevirtual #47                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
     112: ifeq          148
     115: aload_3
     116: aload         7
     118: invokevirtual #48                 // Method java/util/Hashtable.remove:(Ljava/lang/Object;)Ljava/lang/Object;
     121: pop
     122: aload         7
     124: aload         4
     126: invokevirtual #49                 // Method java/lang/String.length:()I
     129: invokevirtual #50                 // Method java/lang/String.substring:(I)Ljava/lang/String;
     132: astore        7
     134: aload_3
     135: aload         7
     137: aload         6
     139: invokeinterface #51,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
     144: invokevirtual #34                 // Method java/util/Hashtable.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     147: pop
     148: goto          71
     151: aload_0
     152: aload_3
     153: invokevirtual #52                 // Method createConnectionFactory:(Ljava/util/Hashtable;)Lorg/apache/activemq/ActiveMQConnectionFactory;
     156: areturn

  protected java.lang.String[] getConnectionFactoryNames(java.util.Map);
    Code:
       0: aload_1
       1: ldc           #53                 // String connectionFactoryNames
       3: invokeinterface #54,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
       8: checkcast     #46                 // class java/lang/String
      11: astore_2
      12: aload_2
      13: ifnull        94
      16: new           #55                 // class java/util/ArrayList
      19: dup
      20: invokespecial #56                 // Method java/util/ArrayList."<init>":()V
      23: astore_3
      24: new           #57                 // class java/util/StringTokenizer
      27: dup
      28: aload_2
      29: ldc           #58                 // String ,
      31: invokespecial #59                 // Method java/util/StringTokenizer."<init>":(Ljava/lang/String;Ljava/lang/String;)V
      34: astore        4
      36: aload         4
      38: invokevirtual #60                 // Method java/util/StringTokenizer.hasMoreTokens:()Z
      41: ifeq          62
      44: aload_3
      45: aload         4
      47: invokevirtual #61                 // Method java/util/StringTokenizer.nextToken:()Ljava/lang/String;
      50: invokevirtual #62                 // Method java/lang/String.trim:()Ljava/lang/String;
      53: invokeinterface #63,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      58: pop
      59: goto          36
      62: aload_3
      63: invokeinterface #64,  1           // InterfaceMethod java/util/List.size:()I
      68: istore        4
      70: iload         4
      72: ifle          94
      75: iload         4
      77: anewarray     #46                 // class java/lang/String
      80: astore        5
      82: aload_3
      83: aload         5
      85: invokeinterface #65,  2           // InterfaceMethod java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
      90: pop
      91: aload         5
      93: areturn
      94: getstatic     #30                 // Field DEFAULT_CONNECTION_FACTORY_NAMES:[Ljava/lang/String;
      97: areturn

  protected void createQueues(java.util.Map<java.lang.String, java.lang.Object>, java.util.Hashtable);
    Code:
       0: aload_2
       1: invokevirtual #40                 // Method java/util/Hashtable.entrySet:()Ljava/util/Set;
       4: invokeinterface #41,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
       9: astore_3
      10: aload_3
      11: invokeinterface #42,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      16: ifeq          94
      19: aload_3
      20: invokeinterface #43,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      25: checkcast     #44                 // class java/util/Map$Entry
      28: astore        4
      30: aload         4
      32: invokeinterface #45,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      37: invokevirtual #66                 // Method java/lang/Object.toString:()Ljava/lang/String;
      40: astore        5
      42: aload         5
      44: aload_0
      45: getfield      #5                  // Field queuePrefix:Ljava/lang/String;
      48: invokevirtual #47                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      51: ifeq          91
      54: aload         5
      56: aload_0
      57: getfield      #5                  // Field queuePrefix:Ljava/lang/String;
      60: invokevirtual #49                 // Method java/lang/String.length:()I
      63: invokevirtual #50                 // Method java/lang/String.substring:(I)Ljava/lang/String;
      66: astore        6
      68: aload_1
      69: aload         6
      71: aload_0
      72: aload         4
      74: invokeinterface #51,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      79: invokevirtual #66                 // Method java/lang/Object.toString:()Ljava/lang/String;
      82: invokevirtual #67                 // Method createQueue:(Ljava/lang/String;)Ljavax/jms/Queue;
      85: invokeinterface #16,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      90: pop
      91: goto          10
      94: return

  protected void createTopics(java.util.Map<java.lang.String, java.lang.Object>, java.util.Hashtable);
    Code:
       0: aload_2
       1: invokevirtual #40                 // Method java/util/Hashtable.entrySet:()Ljava/util/Set;
       4: invokeinterface #41,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
       9: astore_3
      10: aload_3
      11: invokeinterface #42,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      16: ifeq          94
      19: aload_3
      20: invokeinterface #43,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      25: checkcast     #44                 // class java/util/Map$Entry
      28: astore        4
      30: aload         4
      32: invokeinterface #45,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      37: invokevirtual #66                 // Method java/lang/Object.toString:()Ljava/lang/String;
      40: astore        5
      42: aload         5
      44: aload_0
      45: getfield      #7                  // Field topicPrefix:Ljava/lang/String;
      48: invokevirtual #47                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      51: ifeq          91
      54: aload         5
      56: aload_0
      57: getfield      #7                  // Field topicPrefix:Ljava/lang/String;
      60: invokevirtual #49                 // Method java/lang/String.length:()I
      63: invokevirtual #50                 // Method java/lang/String.substring:(I)Ljava/lang/String;
      66: astore        6
      68: aload_1
      69: aload         6
      71: aload_0
      72: aload         4
      74: invokeinterface #51,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      79: invokevirtual #66                 // Method java/lang/Object.toString:()Ljava/lang/String;
      82: invokevirtual #68                 // Method createTopic:(Ljava/lang/String;)Ljavax/jms/Topic;
      85: invokeinterface #16,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      90: pop
      91: goto          10
      94: return

  protected javax.jms.Queue createQueue(java.lang.String);
    Code:
       0: new           #69                 // class org/apache/activemq/command/ActiveMQQueue
       3: dup
       4: aload_1
       5: invokespecial #70                 // Method org/apache/activemq/command/ActiveMQQueue."<init>":(Ljava/lang/String;)V
       8: areturn

  protected javax.jms.Topic createTopic(java.lang.String);
    Code:
       0: new           #71                 // class org/apache/activemq/command/ActiveMQTopic
       3: dup
       4: aload_1
       5: invokespecial #72                 // Method org/apache/activemq/command/ActiveMQTopic."<init>":(Ljava/lang/String;)V
       8: areturn

  protected org.apache.activemq.ActiveMQConnectionFactory createConnectionFactory(java.util.Hashtable) throws java.net.URISyntaxException;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #73                 // Method needsXA:(Ljava/util/Hashtable;)Z
       5: ifeq          18
       8: new           #74                 // class org/apache/activemq/ActiveMQXAConnectionFactory
      11: dup
      12: invokespecial #75                 // Method org/apache/activemq/ActiveMQXAConnectionFactory."<init>":()V
      15: goto          25
      18: new           #76                 // class org/apache/activemq/ActiveMQConnectionFactory
      21: dup
      22: invokespecial #77                 // Method org/apache/activemq/ActiveMQConnectionFactory."<init>":()V
      25: astore_2
      26: new           #78                 // class java/util/Properties
      29: dup
      30: invokespecial #79                 // Method java/util/Properties."<init>":()V
      33: astore_3
      34: aload_3
      35: aload_1
      36: invokevirtual #80                 // Method java/util/Properties.putAll:(Ljava/util/Map;)V
      39: aload_2
      40: aload_3
      41: invokevirtual #81                 // Method org/apache/activemq/ActiveMQConnectionFactory.setProperties:(Ljava/util/Properties;)V
      44: aload_2
      45: areturn

  private boolean needsXA(java.util.Hashtable);
    Code:
       0: aload_1
       1: ldc           #32                 // String xa
       3: invokevirtual #82                 // Method java/util/Hashtable.get:(Ljava/lang/Object;)Ljava/lang/Object;
       6: checkcast     #46                 // class java/lang/String
       9: invokestatic  #83                 // Method java/lang/Boolean.parseBoolean:(Ljava/lang/String;)Z
      12: istore_2
      13: aload_1
      14: ldc           #32                 // String xa
      16: invokevirtual #48                 // Method java/util/Hashtable.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      19: pop
      20: iload_2
      21: ireturn

  public java.lang.String getConnectionPrefix();
    Code:
       0: aload_0
       1: getfield      #3                  // Field connectionPrefix:Ljava/lang/String;
       4: areturn

  public void setConnectionPrefix(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #3                  // Field connectionPrefix:Ljava/lang/String;
       5: return

  static {};
    Code:
       0: iconst_4
       1: anewarray     #46                 // class java/lang/String
       4: dup
       5: iconst_0
       6: ldc           #84                 // String ConnectionFactory
       8: aastore
       9: dup
      10: iconst_1
      11: ldc           #85                 // String XAConnectionFactory
      13: aastore
      14: dup
      15: iconst_2
      16: ldc           #86                 // String QueueConnectionFactory
      18: aastore
      19: dup
      20: iconst_3
      21: ldc           #87                 // String TopicConnectionFactory
      23: aastore
      24: putstatic     #30                 // Field DEFAULT_CONNECTION_FACTORY_NAMES:[Ljava/lang/String;
      27: return
}
