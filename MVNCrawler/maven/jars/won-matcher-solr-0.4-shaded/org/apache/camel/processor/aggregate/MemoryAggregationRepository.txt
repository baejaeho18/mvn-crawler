Compiled from "MemoryAggregationRepository.java"
public class org.apache.camel.processor.aggregate.MemoryAggregationRepository extends org.apache.camel.support.ServiceSupport implements org.apache.camel.spi.OptimisticLockingAggregationRepository {
  private final java.util.concurrent.ConcurrentMap<java.lang.String, org.apache.camel.Exchange> cache;

  private final boolean optimisticLocking;

  public org.apache.camel.processor.aggregate.MemoryAggregationRepository();
    Code:
       0: aload_0
       1: iconst_0
       2: invokespecial #20                 // Method "<init>":(Z)V
       5: return

  public org.apache.camel.processor.aggregate.MemoryAggregationRepository(boolean);
    Code:
       0: aload_0
       1: invokespecial #24                 // Method org/apache/camel/support/ServiceSupport."<init>":()V
       4: aload_0
       5: new           #26                 // class java/util/concurrent/ConcurrentHashMap
       8: dup
       9: invokespecial #27                 // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      12: putfield      #29                 // Field cache:Ljava/util/concurrent/ConcurrentMap;
      15: aload_0
      16: iload_1
      17: putfield      #31                 // Field optimisticLocking:Z
      20: return

  public org.apache.camel.Exchange add(org.apache.camel.CamelContext, java.lang.String, org.apache.camel.Exchange, org.apache.camel.Exchange);
    Code:
       0: aload_0
       1: getfield      #31                 // Field optimisticLocking:Z
       4: ifne          15
       7: new           #35                 // class java/lang/UnsupportedOperationException
      10: dup
      11: invokespecial #36                 // Method java/lang/UnsupportedOperationException."<init>":()V
      14: athrow
      15: aload_3
      16: ifnonnull     42
      19: aload_0
      20: getfield      #29                 // Field cache:Ljava/util/concurrent/ConcurrentMap;
      23: aload_2
      24: aload         4
      26: invokeinterface #42,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      31: ifnull        66
      34: new           #9                  // class org/apache/camel/spi/OptimisticLockingAggregationRepository$OptimisticLockingException
      37: dup
      38: invokespecial #43                 // Method org/apache/camel/spi/OptimisticLockingAggregationRepository$OptimisticLockingException."<init>":()V
      41: athrow
      42: aload_0
      43: getfield      #29                 // Field cache:Ljava/util/concurrent/ConcurrentMap;
      46: aload_2
      47: aload_3
      48: aload         4
      50: invokeinterface #47,  4           // InterfaceMethod java/util/concurrent/ConcurrentMap.replace:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
      55: ifne          66
      58: new           #9                  // class org/apache/camel/spi/OptimisticLockingAggregationRepository$OptimisticLockingException
      61: dup
      62: invokespecial #43                 // Method org/apache/camel/spi/OptimisticLockingAggregationRepository$OptimisticLockingException."<init>":()V
      65: athrow
      66: aload_3
      67: areturn

  public org.apache.camel.Exchange add(org.apache.camel.CamelContext, java.lang.String, org.apache.camel.Exchange);
    Code:
       0: aload_0
       1: getfield      #31                 // Field optimisticLocking:Z
       4: ifeq          15
       7: new           #35                 // class java/lang/UnsupportedOperationException
      10: dup
      11: invokespecial #36                 // Method java/lang/UnsupportedOperationException."<init>":()V
      14: athrow
      15: aload_0
      16: getfield      #29                 // Field cache:Ljava/util/concurrent/ConcurrentMap;
      19: aload_2
      20: aload_3
      21: invokeinterface #58,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      26: checkcast     #60                 // class org/apache/camel/Exchange
      29: areturn

  public org.apache.camel.Exchange get(org.apache.camel.CamelContext, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #29                 // Field cache:Ljava/util/concurrent/ConcurrentMap;
       4: aload_2
       5: invokeinterface #66,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #60                 // class org/apache/camel/Exchange
      13: areturn

  public void remove(org.apache.camel.CamelContext, java.lang.String, org.apache.camel.Exchange);
    Code:
       0: aload_0
       1: getfield      #31                 // Field optimisticLocking:Z
       4: ifeq          29
       7: aload_0
       8: getfield      #29                 // Field cache:Ljava/util/concurrent/ConcurrentMap;
      11: aload_2
      12: aload_3
      13: invokeinterface #71,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.remove:(Ljava/lang/Object;Ljava/lang/Object;)Z
      18: ifne          40
      21: new           #9                  // class org/apache/camel/spi/OptimisticLockingAggregationRepository$OptimisticLockingException
      24: dup
      25: invokespecial #43                 // Method org/apache/camel/spi/OptimisticLockingAggregationRepository$OptimisticLockingException."<init>":()V
      28: athrow
      29: aload_0
      30: getfield      #29                 // Field cache:Ljava/util/concurrent/ConcurrentMap;
      33: aload_2
      34: invokeinterface #73,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      39: pop
      40: return

  public void confirm(org.apache.camel.CamelContext, java.lang.String);
    Code:
       0: return

  public java.util.Set<java.lang.String> getKeys();
    Code:
       0: aload_0
       1: getfield      #29                 // Field cache:Ljava/util/concurrent/ConcurrentMap;
       4: invokeinterface #81,  1           // InterfaceMethod java/util/concurrent/ConcurrentMap.keySet:()Ljava/util/Set;
       9: invokestatic  #87                 // Method java/util/Collections.unmodifiableSet:(Ljava/util/Set;)Ljava/util/Set;
      12: areturn

  protected void doStart() throws java.lang.Exception;
    Code:
       0: return

  protected void doStop() throws java.lang.Exception;
    Code:
       0: aload_0
       1: getfield      #29                 // Field cache:Ljava/util/concurrent/ConcurrentMap;
       4: invokeinterface #94,  1           // InterfaceMethod java/util/concurrent/ConcurrentMap.clear:()V
       9: return
}
