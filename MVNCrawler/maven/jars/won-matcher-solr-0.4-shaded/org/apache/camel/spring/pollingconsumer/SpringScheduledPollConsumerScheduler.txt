Compiled from "SpringScheduledPollConsumerScheduler.java"
public class org.apache.camel.spring.pollingconsumer.SpringScheduledPollConsumerScheduler extends org.apache.camel.support.ServiceSupport implements org.apache.camel.spi.ScheduledPollConsumerScheduler {
  private static final org.slf4j.Logger LOG;

  private org.apache.camel.CamelContext camelContext;

  private org.apache.camel.Consumer consumer;

  private java.lang.Runnable runnable;

  private java.lang.String cron;

  private java.util.TimeZone timeZone;

  private volatile org.springframework.scheduling.support.CronTrigger trigger;

  private volatile org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler taskScheduler;

  private boolean destroyTaskScheduler;

  private volatile java.util.concurrent.ScheduledFuture future;

  public org.apache.camel.spring.pollingconsumer.SpringScheduledPollConsumerScheduler();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/apache/camel/support/ServiceSupport."<init>":()V
       4: aload_0
       5: invokestatic  #2                  // Method java/util/TimeZone.getDefault:()Ljava/util/TimeZone;
       8: putfield      #3                  // Field timeZone:Ljava/util/TimeZone;
      11: return

  public void onInit(org.apache.camel.Consumer);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #4                  // Field consumer:Lorg/apache/camel/Consumer;
       5: return

  public void scheduleTask(java.lang.Runnable);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #5                  // Field runnable:Ljava/lang/Runnable;
       5: return

  public void unscheduleTask();
    Code:
       0: aload_0
       1: getfield      #6                  // Field future:Ljava/util/concurrent/ScheduledFuture;
       4: ifnull        23
       7: aload_0
       8: getfield      #6                  // Field future:Ljava/util/concurrent/ScheduledFuture;
      11: iconst_0
      12: invokeinterface #7,  2            // InterfaceMethod java/util/concurrent/ScheduledFuture.cancel:(Z)Z
      17: pop
      18: aload_0
      19: aconst_null
      20: putfield      #6                  // Field future:Ljava/util/concurrent/ScheduledFuture;
      23: return

  public void startScheduler();
    Code:
       0: return

  public boolean isSchedulerStarted();
    Code:
       0: aload_0
       1: getfield      #8                  // Field taskScheduler:Lorg/springframework/scheduling/concurrent/ThreadPoolTaskScheduler;
       4: ifnull        26
       7: aload_0
       8: getfield      #8                  // Field taskScheduler:Lorg/springframework/scheduling/concurrent/ThreadPoolTaskScheduler;
      11: invokevirtual #9                  // Method org/springframework/scheduling/concurrent/ThreadPoolTaskScheduler.getScheduledExecutor:()Ljava/util/concurrent/ScheduledExecutorService;
      14: invokeinterface #10,  1           // InterfaceMethod java/util/concurrent/ScheduledExecutorService.isShutdown:()Z
      19: ifne          26
      22: iconst_1
      23: goto          27
      26: iconst_0
      27: ireturn

  public void setCamelContext(org.apache.camel.CamelContext);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #11                 // Field camelContext:Lorg/apache/camel/CamelContext;
       5: return

  public org.apache.camel.CamelContext getCamelContext();
    Code:
       0: aload_0
       1: getfield      #11                 // Field camelContext:Lorg/apache/camel/CamelContext;
       4: areturn

  public java.lang.String getCron();
    Code:
       0: aload_0
       1: getfield      #12                 // Field cron:Ljava/lang/String;
       4: areturn

  public void setCron(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #12                 // Field cron:Ljava/lang/String;
       5: return

  public java.util.TimeZone getTimeZone();
    Code:
       0: aload_0
       1: getfield      #3                  // Field timeZone:Ljava/util/TimeZone;
       4: areturn

  public void setTimeZone(java.util.TimeZone);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #3                  // Field timeZone:Ljava/util/TimeZone;
       5: return

  public org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler getTaskScheduler();
    Code:
       0: aload_0
       1: getfield      #8                  // Field taskScheduler:Lorg/springframework/scheduling/concurrent/ThreadPoolTaskScheduler;
       4: areturn

  public void setTaskScheduler(org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #8                  // Field taskScheduler:Lorg/springframework/scheduling/concurrent/ThreadPoolTaskScheduler;
       5: return

  protected void doStart() throws java.lang.Exception;
    Code:
       0: aload_0
       1: getfield      #12                 // Field cron:Ljava/lang/String;
       4: ldc           #13                 // String cron
       6: aload_0
       7: invokestatic  #14                 // Method org/apache/camel/util/ObjectHelper.notEmpty:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;
      10: pop
      11: aload_0
      12: new           #15                 // class org/springframework/scheduling/support/CronTrigger
      15: dup
      16: aload_0
      17: invokevirtual #16                 // Method getCron:()Ljava/lang/String;
      20: aload_0
      21: invokevirtual #17                 // Method getTimeZone:()Ljava/util/TimeZone;
      24: invokespecial #18                 // Method org/springframework/scheduling/support/CronTrigger."<init>":(Ljava/lang/String;Ljava/util/TimeZone;)V
      27: putfield      #19                 // Field trigger:Lorg/springframework/scheduling/support/CronTrigger;
      30: aload_0
      31: getfield      #8                  // Field taskScheduler:Lorg/springframework/scheduling/concurrent/ThreadPoolTaskScheduler;
      34: ifnonnull     82
      37: aload_0
      38: new           #20                 // class org/apache/camel/spring/util/CamelThreadPoolTaskScheduler
      41: dup
      42: aload_0
      43: invokevirtual #21                 // Method getCamelContext:()Lorg/apache/camel/CamelContext;
      46: aload_0
      47: getfield      #4                  // Field consumer:Lorg/apache/camel/Consumer;
      50: aload_0
      51: getfield      #4                  // Field consumer:Lorg/apache/camel/Consumer;
      54: invokeinterface #22,  1           // InterfaceMethod org/apache/camel/Consumer.getEndpoint:()Lorg/apache/camel/Endpoint;
      59: invokeinterface #23,  1           // InterfaceMethod org/apache/camel/Endpoint.getEndpointUri:()Ljava/lang/String;
      64: invokespecial #24                 // Method org/apache/camel/spring/util/CamelThreadPoolTaskScheduler."<init>":(Lorg/apache/camel/CamelContext;Ljava/lang/Object;Ljava/lang/String;)V
      67: putfield      #8                  // Field taskScheduler:Lorg/springframework/scheduling/concurrent/ThreadPoolTaskScheduler;
      70: aload_0
      71: getfield      #8                  // Field taskScheduler:Lorg/springframework/scheduling/concurrent/ThreadPoolTaskScheduler;
      74: invokevirtual #25                 // Method org/springframework/scheduling/concurrent/ThreadPoolTaskScheduler.afterPropertiesSet:()V
      77: aload_0
      78: iconst_1
      79: putfield      #26                 // Field destroyTaskScheduler:Z
      82: getstatic     #27                 // Field LOG:Lorg/slf4j/Logger;
      85: ldc           #28                 // String Scheduling cron trigger {}
      87: aload_0
      88: invokevirtual #16                 // Method getCron:()Ljava/lang/String;
      91: invokeinterface #29,  3           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Object;)V
      96: aload_0
      97: aload_0
      98: getfield      #8                  // Field taskScheduler:Lorg/springframework/scheduling/concurrent/ThreadPoolTaskScheduler;
     101: aload_0
     102: getfield      #5                  // Field runnable:Ljava/lang/Runnable;
     105: aload_0
     106: getfield      #19                 // Field trigger:Lorg/springframework/scheduling/support/CronTrigger;
     109: invokevirtual #30                 // Method org/springframework/scheduling/concurrent/ThreadPoolTaskScheduler.schedule:(Ljava/lang/Runnable;Lorg/springframework/scheduling/Trigger;)Ljava/util/concurrent/ScheduledFuture;
     112: putfield      #6                  // Field future:Ljava/util/concurrent/ScheduledFuture;
     115: return

  protected void doStop() throws java.lang.Exception;
    Code:
       0: aload_0
       1: getfield      #6                  // Field future:Ljava/util/concurrent/ScheduledFuture;
       4: ifnull        23
       7: aload_0
       8: getfield      #6                  // Field future:Ljava/util/concurrent/ScheduledFuture;
      11: iconst_0
      12: invokeinterface #7,  2            // InterfaceMethod java/util/concurrent/ScheduledFuture.cancel:(Z)Z
      17: pop
      18: aload_0
      19: aconst_null
      20: putfield      #6                  // Field future:Ljava/util/concurrent/ScheduledFuture;
      23: aload_0
      24: getfield      #26                 // Field destroyTaskScheduler:Z
      27: ifeq          42
      30: aload_0
      31: getfield      #8                  // Field taskScheduler:Lorg/springframework/scheduling/concurrent/ThreadPoolTaskScheduler;
      34: invokevirtual #31                 // Method org/springframework/scheduling/concurrent/ThreadPoolTaskScheduler.destroy:()V
      37: aload_0
      38: aconst_null
      39: putfield      #8                  // Field taskScheduler:Lorg/springframework/scheduling/concurrent/ThreadPoolTaskScheduler;
      42: return

  static {};
    Code:
       0: ldc_w         #32                 // class org/apache/camel/spring/pollingconsumer/SpringScheduledPollConsumerScheduler
       3: invokestatic  #33                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       6: putstatic     #27                 // Field LOG:Lorg/slf4j/Logger;
       9: return
}
