Compiled from "DefaultNodeIdFactory.java"
public class org.apache.camel.impl.DefaultNodeIdFactory implements org.apache.camel.spi.NodeIdFactory {
  protected static java.util.Map<java.lang.String, java.util.concurrent.atomic.AtomicInteger> nodeCounters;

  public org.apache.camel.impl.DefaultNodeIdFactory();
    Code:
       0: aload_0
       1: invokespecial #14                 // Method java/lang/Object."<init>":()V
       4: return

  public java.lang.String createId(org.apache.camel.NamedNode);
    Code:
       0: aload_1
       1: invokeinterface #24,  1           // InterfaceMethod org/apache/camel/NamedNode.getShortName:()Ljava/lang/String;
       6: astore_2
       7: new           #26                 // class java/lang/StringBuilder
      10: dup
      11: invokespecial #27                 // Method java/lang/StringBuilder."<init>":()V
      14: aload_2
      15: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      18: aload_2
      19: invokestatic  #35                 // Method getNodeCounter:(Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicInteger;
      22: invokevirtual #41                 // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
      25: invokevirtual #44                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      28: invokevirtual #47                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      31: areturn

  protected static synchronized java.util.concurrent.atomic.AtomicInteger getNodeCounter(java.lang.String);
    Code:
       0: getstatic     #53                 // Field nodeCounters:Ljava/util/Map;
       3: aload_0
       4: invokeinterface #59,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
       9: checkcast     #37                 // class java/util/concurrent/atomic/AtomicInteger
      12: astore_1
      13: aload_1
      14: ifnonnull     37
      17: new           #37                 // class java/util/concurrent/atomic/AtomicInteger
      20: dup
      21: iconst_0
      22: invokespecial #62                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
      25: astore_1
      26: getstatic     #53                 // Field nodeCounters:Ljava/util/Map;
      29: aload_0
      30: aload_1
      31: invokeinterface #66,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      36: pop
      37: aload_1
      38: areturn

  protected static synchronized void resetAllCounters();
    Code:
       0: getstatic     #53                 // Field nodeCounters:Ljava/util/Map;
       3: invokeinterface #73,  1           // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
       8: invokeinterface #79,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      13: astore_0
      14: aload_0
      15: invokeinterface #85,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      20: ifeq          41
      23: aload_0
      24: invokeinterface #89,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      29: checkcast     #37                 // class java/util/concurrent/atomic/AtomicInteger
      32: astore_1
      33: aload_1
      34: iconst_0
      35: invokevirtual #92                 // Method java/util/concurrent/atomic/AtomicInteger.set:(I)V
      38: goto          14
      41: return

  static {};
    Code:
       0: new           #98                 // class java/util/HashMap
       3: dup
       4: invokespecial #99                 // Method java/util/HashMap."<init>":()V
       7: putstatic     #53                 // Field nodeCounters:Ljava/util/Map;
      10: return
}
