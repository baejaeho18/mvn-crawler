Compiled from "Category.java"
public class org.apache.log4j.Category implements org.apache.log4j.spi.AppenderAttachable {
  protected java.lang.String name;

  protected volatile org.apache.log4j.Level level;

  protected volatile org.apache.log4j.Category parent;

  private static final java.lang.String FQCN;

  protected java.util.ResourceBundle resourceBundle;

  protected org.apache.log4j.spi.LoggerRepository repository;

  org.apache.log4j.helpers.AppenderAttachableImpl aai;

  protected boolean additive;

  static java.lang.Class class$org$apache$log4j$Category;

  static {};
    Code:
       0: getstatic     #44                 // Field class$org$apache$log4j$Category:Ljava/lang/Class;
       3: ifnull        12
       6: getstatic     #44                 // Field class$org$apache$log4j$Category:Ljava/lang/Class;
       9: goto          21
      12: ldc           #5                  // String org.apache.log4j.Category
      14: invokestatic  #43                 // Method class$:(Ljava/lang/String;)Ljava/lang/Class;
      17: dup
      18: putstatic     #44                 // Field class$org$apache$log4j$Category:Ljava/lang/Class;
      21: invokevirtual #63                 // Method java/lang/Class.getName:()Ljava/lang/String;
      24: putstatic     #34                 // Field FQCN:Ljava/lang/String;
      27: return

  protected org.apache.log4j.Category(java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #26                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #39                 // Field additive:Z
       9: aload_0
      10: aload_1
      11: putfield      #74                 // Field name:Ljava/lang/String;
      14: return

  public synchronized void addAppender(org.apache.log4j.Appender);
    Code:
       0: aload_0
       1: getfield      #37                 // Field aai:Lorg/apache/log4j/helpers/AppenderAttachableImpl;
       4: ifnonnull     18
       7: aload_0
       8: new           #21                 // class org/apache/log4j/helpers/AppenderAttachableImpl
      11: dup
      12: invokespecial #27                 // Method org/apache/log4j/helpers/AppenderAttachableImpl."<init>":()V
      15: putfield      #37                 // Field aai:Lorg/apache/log4j/helpers/AppenderAttachableImpl;
      18: aload_0
      19: getfield      #37                 // Field aai:Lorg/apache/log4j/helpers/AppenderAttachableImpl;
      22: aload_1
      23: invokevirtual #38                 // Method org/apache/log4j/helpers/AppenderAttachableImpl.addAppender:(Lorg/apache/log4j/Appender;)V
      26: aload_0
      27: getfield      #80                 // Field repository:Lorg/apache/log4j/spi/LoggerRepository;
      30: aload_0
      31: aload_1
      32: invokeinterface #49,  3           // InterfaceMethod org/apache/log4j/spi/LoggerRepository.fireAddAppenderEvent:(Lorg/apache/log4j/Category;Lorg/apache/log4j/Appender;)V
      37: return

  public void assertLog(boolean, java.lang.String);
    Code:
       0: iload_1
       1: ifne          9
       4: aload_0
       5: aload_2
       6: invokevirtual #47                 // Method error:(Ljava/lang/Object;)V
       9: return

  public void callAppenders(org.apache.log4j.spi.LoggingEvent);
    Code:
       0: iconst_0
       1: istore_2
       2: aload_0
       3: astore_3
       4: goto          66
       7: aload_3
       8: astore        4
      10: aload         4
      12: monitorenter
      13: aload_3
      14: getfield      #37                 // Field aai:Lorg/apache/log4j/helpers/AppenderAttachableImpl;
      17: ifnull        31
      20: iload_2
      21: aload_3
      22: getfield      #37                 // Field aai:Lorg/apache/log4j/helpers/AppenderAttachableImpl;
      25: aload_1
      26: invokevirtual #41                 // Method org/apache/log4j/helpers/AppenderAttachableImpl.appendLoopOnAppenders:(Lorg/apache/log4j/spi/LoggingEvent;)I
      29: iadd
      30: istore_2
      31: aload_3
      32: getfield      #39                 // Field additive:Z
      35: ifne          44
      38: jsr           54
      41: goto          70
      44: aload         4
      46: monitorexit
      47: goto          61
      50: aload         4
      52: monitorexit
      53: athrow
      54: astore        5
      56: aload         4
      58: monitorexit
      59: ret           5
      61: aload_3
      62: getfield      #76                 // Field parent:Lorg/apache/log4j/Category;
      65: astore_3
      66: aload_3
      67: ifnonnull     7
      70: iload_2
      71: ifne          84
      74: aload_0
      75: getfield      #80                 // Field repository:Lorg/apache/log4j/spi/LoggerRepository;
      78: aload_0
      79: invokeinterface #46,  2           // InterfaceMethod org/apache/log4j/spi/LoggerRepository.emitNoAppenderWarning:(Lorg/apache/log4j/Category;)V
      84: return
    Exception table:
       from    to  target type
          13    44    50   any

  static java.lang.Class class$(java.lang.String);
    Code:
       0: aload_0
       1: invokestatic  #50                 // Method java/lang/Class.forName:(Ljava/lang/String;)Ljava/lang/Class;
       4: areturn
       5: astore_1
       6: new           #8                  // class java/lang/NoClassDefFoundError
       9: dup
      10: aload_1
      11: invokevirtual #62                 // Method java/lang/Throwable.getMessage:()Ljava/lang/String;
      14: invokespecial #28                 // Method java/lang/NoClassDefFoundError."<init>":(Ljava/lang/String;)V
      17: athrow
    Exception table:
       from    to  target type
           0     5     5   Class java/lang/ClassNotFoundException

  synchronized void closeNestedAppenders();
    Code:
       0: aload_0
       1: invokevirtual #53                 // Method getAllAppenders:()Ljava/util/Enumeration;
       4: astore_1
       5: aload_1
       6: ifnull        44
       9: goto          35
      12: aload_1
      13: invokeinterface #75,  1           // InterfaceMethod java/util/Enumeration.nextElement:()Ljava/lang/Object;
      18: checkcast     #16                 // class org/apache/log4j/Appender
      21: astore_2
      22: aload_2
      23: instanceof    #23                 // class org/apache/log4j/spi/AppenderAttachable
      26: ifeq          35
      29: aload_2
      30: invokeinterface #45,  1           // InterfaceMethod org/apache/log4j/Appender.close:()V
      35: aload_1
      36: invokeinterface #68,  1           // InterfaceMethod java/util/Enumeration.hasMoreElements:()Z
      41: ifne          12
      44: return

  public void debug(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #80                 // Field repository:Lorg/apache/log4j/spi/LoggerRepository;
       4: sipush        10000
       7: invokeinterface #70,  2           // InterfaceMethod org/apache/log4j/spi/LoggerRepository.isDisabled:(I)Z
      12: ifeq          16
      15: return
      16: getstatic     #31                 // Field org/apache/log4j/Level.DEBUG:Lorg/apache/log4j/Level;
      19: aload_0
      20: invokevirtual #57                 // Method getEffectiveLevel:()Lorg/apache/log4j/Level;
      23: invokevirtual #71                 // Method org/apache/log4j/Priority.isGreaterOrEqual:(Lorg/apache/log4j/Priority;)Z
      26: ifeq          41
      29: aload_0
      30: getstatic     #34                 // Field FQCN:Ljava/lang/String;
      33: getstatic     #31                 // Field org/apache/log4j/Level.DEBUG:Lorg/apache/log4j/Level;
      36: aload_1
      37: aconst_null
      38: invokevirtual #51                 // Method forcedLog:(Ljava/lang/String;Lorg/apache/log4j/Priority;Ljava/lang/Object;Ljava/lang/Throwable;)V
      41: return

  public void debug(java.lang.Object, java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #80                 // Field repository:Lorg/apache/log4j/spi/LoggerRepository;
       4: sipush        10000
       7: invokeinterface #70,  2           // InterfaceMethod org/apache/log4j/spi/LoggerRepository.isDisabled:(I)Z
      12: ifeq          16
      15: return
      16: getstatic     #31                 // Field org/apache/log4j/Level.DEBUG:Lorg/apache/log4j/Level;
      19: aload_0
      20: invokevirtual #57                 // Method getEffectiveLevel:()Lorg/apache/log4j/Level;
      23: invokevirtual #71                 // Method org/apache/log4j/Priority.isGreaterOrEqual:(Lorg/apache/log4j/Priority;)Z
      26: ifeq          41
      29: aload_0
      30: getstatic     #34                 // Field FQCN:Ljava/lang/String;
      33: getstatic     #31                 // Field org/apache/log4j/Level.DEBUG:Lorg/apache/log4j/Level;
      36: aload_1
      37: aload_2
      38: invokevirtual #51                 // Method forcedLog:(Ljava/lang/String;Lorg/apache/log4j/Priority;Ljava/lang/Object;Ljava/lang/Throwable;)V
      41: return

  public void error(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #80                 // Field repository:Lorg/apache/log4j/spi/LoggerRepository;
       4: ldc           #1                  // int 40000
       6: invokeinterface #70,  2           // InterfaceMethod org/apache/log4j/spi/LoggerRepository.isDisabled:(I)Z
      11: ifeq          15
      14: return
      15: getstatic     #32                 // Field org/apache/log4j/Level.ERROR:Lorg/apache/log4j/Level;
      18: aload_0
      19: invokevirtual #57                 // Method getEffectiveLevel:()Lorg/apache/log4j/Level;
      22: invokevirtual #71                 // Method org/apache/log4j/Priority.isGreaterOrEqual:(Lorg/apache/log4j/Priority;)Z
      25: ifeq          40
      28: aload_0
      29: getstatic     #34                 // Field FQCN:Ljava/lang/String;
      32: getstatic     #32                 // Field org/apache/log4j/Level.ERROR:Lorg/apache/log4j/Level;
      35: aload_1
      36: aconst_null
      37: invokevirtual #51                 // Method forcedLog:(Ljava/lang/String;Lorg/apache/log4j/Priority;Ljava/lang/Object;Ljava/lang/Throwable;)V
      40: return

  public void error(java.lang.Object, java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #80                 // Field repository:Lorg/apache/log4j/spi/LoggerRepository;
       4: ldc           #1                  // int 40000
       6: invokeinterface #70,  2           // InterfaceMethod org/apache/log4j/spi/LoggerRepository.isDisabled:(I)Z
      11: ifeq          15
      14: return
      15: getstatic     #32                 // Field org/apache/log4j/Level.ERROR:Lorg/apache/log4j/Level;
      18: aload_0
      19: invokevirtual #57                 // Method getEffectiveLevel:()Lorg/apache/log4j/Level;
      22: invokevirtual #71                 // Method org/apache/log4j/Priority.isGreaterOrEqual:(Lorg/apache/log4j/Priority;)Z
      25: ifeq          40
      28: aload_0
      29: getstatic     #34                 // Field FQCN:Ljava/lang/String;
      32: getstatic     #32                 // Field org/apache/log4j/Level.ERROR:Lorg/apache/log4j/Level;
      35: aload_1
      36: aload_2
      37: invokevirtual #51                 // Method forcedLog:(Ljava/lang/String;Lorg/apache/log4j/Priority;Ljava/lang/Object;Ljava/lang/Throwable;)V
      40: return

  public static org.apache.log4j.Logger exists(java.lang.String);
    Code:
       0: aload_0
       1: invokestatic  #48                 // Method org/apache/log4j/LogManager.exists:(Ljava/lang/String;)Lorg/apache/log4j/Logger;
       4: areturn

  public void fatal(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #80                 // Field repository:Lorg/apache/log4j/spi/LoggerRepository;
       4: ldc           #2                  // int 50000
       6: invokeinterface #70,  2           // InterfaceMethod org/apache/log4j/spi/LoggerRepository.isDisabled:(I)Z
      11: ifeq          15
      14: return
      15: getstatic     #33                 // Field org/apache/log4j/Level.FATAL:Lorg/apache/log4j/Level;
      18: aload_0
      19: invokevirtual #57                 // Method getEffectiveLevel:()Lorg/apache/log4j/Level;
      22: invokevirtual #71                 // Method org/apache/log4j/Priority.isGreaterOrEqual:(Lorg/apache/log4j/Priority;)Z
      25: ifeq          40
      28: aload_0
      29: getstatic     #34                 // Field FQCN:Ljava/lang/String;
      32: getstatic     #33                 // Field org/apache/log4j/Level.FATAL:Lorg/apache/log4j/Level;
      35: aload_1
      36: aconst_null
      37: invokevirtual #51                 // Method forcedLog:(Ljava/lang/String;Lorg/apache/log4j/Priority;Ljava/lang/Object;Ljava/lang/Throwable;)V
      40: return

  public void fatal(java.lang.Object, java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #80                 // Field repository:Lorg/apache/log4j/spi/LoggerRepository;
       4: ldc           #2                  // int 50000
       6: invokeinterface #70,  2           // InterfaceMethod org/apache/log4j/spi/LoggerRepository.isDisabled:(I)Z
      11: ifeq          15
      14: return
      15: getstatic     #33                 // Field org/apache/log4j/Level.FATAL:Lorg/apache/log4j/Level;
      18: aload_0
      19: invokevirtual #57                 // Method getEffectiveLevel:()Lorg/apache/log4j/Level;
      22: invokevirtual #71                 // Method org/apache/log4j/Priority.isGreaterOrEqual:(Lorg/apache/log4j/Priority;)Z
      25: ifeq          40
      28: aload_0
      29: getstatic     #34                 // Field FQCN:Ljava/lang/String;
      32: getstatic     #33                 // Field org/apache/log4j/Level.FATAL:Lorg/apache/log4j/Level;
      35: aload_1
      36: aload_2
      37: invokevirtual #51                 // Method forcedLog:(Ljava/lang/String;Lorg/apache/log4j/Priority;Ljava/lang/Object;Ljava/lang/Throwable;)V
      40: return

  protected void forcedLog(java.lang.String, org.apache.log4j.Priority, java.lang.Object, java.lang.Throwable);
    Code:
       0: aload_0
       1: new           #25                 // class org/apache/log4j/spi/LoggingEvent
       4: dup
       5: aload_1
       6: aload_0
       7: aload_2
       8: aload_3
       9: aload         4
      11: invokespecial #30                 // Method org/apache/log4j/spi/LoggingEvent."<init>":(Ljava/lang/String;Lorg/apache/log4j/Category;Lorg/apache/log4j/Priority;Ljava/lang/Object;Ljava/lang/Throwable;)V
      14: invokevirtual #42                 // Method callAppenders:(Lorg/apache/log4j/spi/LoggingEvent;)V
      17: return

  public boolean getAdditivity();
    Code:
       0: aload_0
       1: getfield      #39                 // Field additive:Z
       4: ireturn

  public synchronized java.util.Enumeration getAllAppenders();
    Code:
       0: aload_0
       1: getfield      #37                 // Field aai:Lorg/apache/log4j/helpers/AppenderAttachableImpl;
       4: ifnonnull     11
       7: invokestatic  #58                 // Method org/apache/log4j/helpers/NullEnumeration.getInstance:()Lorg/apache/log4j/helpers/NullEnumeration;
      10: areturn
      11: aload_0
      12: getfield      #37                 // Field aai:Lorg/apache/log4j/helpers/AppenderAttachableImpl;
      15: invokevirtual #54                 // Method org/apache/log4j/helpers/AppenderAttachableImpl.getAllAppenders:()Ljava/util/Enumeration;
      18: areturn

  public synchronized org.apache.log4j.Appender getAppender(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #37                 // Field aai:Lorg/apache/log4j/helpers/AppenderAttachableImpl;
       4: ifnull        11
       7: aload_1
       8: ifnonnull     13
      11: aconst_null
      12: areturn
      13: aload_0
      14: getfield      #37                 // Field aai:Lorg/apache/log4j/helpers/AppenderAttachableImpl;
      17: aload_1
      18: invokevirtual #55                 // Method org/apache/log4j/helpers/AppenderAttachableImpl.getAppender:(Ljava/lang/String;)Lorg/apache/log4j/Appender;
      21: areturn

  public org.apache.log4j.Priority getChainedPriority();
    Code:
       0: aload_0
       1: astore_1
       2: goto          22
       5: aload_1
       6: getfield      #73                 // Field level:Lorg/apache/log4j/Level;
       9: ifnull        17
      12: aload_1
      13: getfield      #73                 // Field level:Lorg/apache/log4j/Level;
      16: areturn
      17: aload_1
      18: getfield      #76                 // Field parent:Lorg/apache/log4j/Category;
      21: astore_1
      22: aload_1
      23: ifnonnull     5
      26: aconst_null
      27: areturn

  public static java.util.Enumeration getCurrentCategories();
    Code:
       0: invokestatic  #56                 // Method org/apache/log4j/LogManager.getCurrentLoggers:()Ljava/util/Enumeration;
       3: areturn

  public static org.apache.log4j.spi.LoggerRepository getDefaultHierarchy();
    Code:
       0: invokestatic  #61                 // Method org/apache/log4j/LogManager.getLoggerRepository:()Lorg/apache/log4j/spi/LoggerRepository;
       3: areturn

  public org.apache.log4j.Level getEffectiveLevel();
    Code:
       0: aload_0
       1: astore_1
       2: goto          22
       5: aload_1
       6: getfield      #73                 // Field level:Lorg/apache/log4j/Level;
       9: ifnull        17
      12: aload_1
      13: getfield      #73                 // Field level:Lorg/apache/log4j/Level;
      16: areturn
      17: aload_1
      18: getfield      #76                 // Field parent:Lorg/apache/log4j/Category;
      21: astore_1
      22: aload_1
      23: ifnonnull     5
      26: aconst_null
      27: areturn

  public org.apache.log4j.spi.LoggerRepository getHierarchy();
    Code:
       0: aload_0
       1: getfield      #80                 // Field repository:Lorg/apache/log4j/spi/LoggerRepository;
       4: areturn

  public static org.apache.log4j.Category getInstance(java.lang.Class);
    Code:
       0: aload_0
       1: invokestatic  #59                 // Method org/apache/log4j/LogManager.getLogger:(Ljava/lang/Class;)Lorg/apache/log4j/Logger;
       4: areturn

  public static org.apache.log4j.Category getInstance(java.lang.String);
    Code:
       0: aload_0
       1: invokestatic  #60                 // Method org/apache/log4j/LogManager.getLogger:(Ljava/lang/String;)Lorg/apache/log4j/Logger;
       4: areturn

  public final org.apache.log4j.Level getLevel();
    Code:
       0: aload_0
       1: getfield      #73                 // Field level:Lorg/apache/log4j/Level;
       4: areturn

  public org.apache.log4j.spi.LoggerRepository getLoggerRepository();
    Code:
       0: aload_0
       1: getfield      #80                 // Field repository:Lorg/apache/log4j/spi/LoggerRepository;
       4: areturn

  public final java.lang.String getName();
    Code:
       0: aload_0
       1: getfield      #74                 // Field name:Ljava/lang/String;
       4: areturn

  public final org.apache.log4j.Category getParent();
    Code:
       0: aload_0
       1: getfield      #76                 // Field parent:Lorg/apache/log4j/Category;
       4: areturn

  public final org.apache.log4j.Level getPriority();
    Code:
       0: aload_0
       1: getfield      #73                 // Field level:Lorg/apache/log4j/Level;
       4: areturn

  public java.util.ResourceBundle getResourceBundle();
    Code:
       0: aload_0
       1: astore_1
       2: goto          22
       5: aload_1
       6: getfield      #81                 // Field resourceBundle:Ljava/util/ResourceBundle;
       9: ifnull        17
      12: aload_1
      13: getfield      #81                 // Field resourceBundle:Ljava/util/ResourceBundle;
      16: areturn
      17: aload_1
      18: getfield      #76                 // Field parent:Lorg/apache/log4j/Category;
      21: astore_1
      22: aload_1
      23: ifnonnull     5
      26: aconst_null
      27: areturn

  protected java.lang.String getResourceBundleString(java.lang.String);
    Code:
       0: aload_0
       1: invokevirtual #64                 // Method getResourceBundle:()Ljava/util/ResourceBundle;
       4: astore_2
       5: aload_2
       6: ifnonnull     11
       9: aconst_null
      10: areturn
      11: aload_2
      12: aload_1
      13: invokevirtual #67                 // Method java/util/ResourceBundle.getString:(Ljava/lang/String;)Ljava/lang/String;
      16: areturn
      17: pop
      18: aload_0
      19: new           #10                 // class java/lang/StringBuffer
      22: dup
      23: ldc           #4                  // String No resource is associated with key \"
      25: invokespecial #29                 // Method java/lang/StringBuffer."<init>":(Ljava/lang/String;)V
      28: aload_1
      29: invokevirtual #40                 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      32: ldc           #3                  // String \".
      34: invokevirtual #40                 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      37: invokevirtual #83                 // Method java/lang/StringBuffer.toString:()Ljava/lang/String;
      40: invokevirtual #47                 // Method error:(Ljava/lang/Object;)V
      43: aconst_null
      44: areturn
    Exception table:
       from    to  target type
          11    17    17   Class java/util/MissingResourceException

  public static final org.apache.log4j.Category getRoot();
    Code:
       0: invokestatic  #66                 // Method org/apache/log4j/LogManager.getRootLogger:()Lorg/apache/log4j/Logger;
       3: areturn

  public void info(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #80                 // Field repository:Lorg/apache/log4j/spi/LoggerRepository;
       4: sipush        20000
       7: invokeinterface #70,  2           // InterfaceMethod org/apache/log4j/spi/LoggerRepository.isDisabled:(I)Z
      12: ifeq          16
      15: return
      16: getstatic     #35                 // Field org/apache/log4j/Level.INFO:Lorg/apache/log4j/Level;
      19: aload_0
      20: invokevirtual #57                 // Method getEffectiveLevel:()Lorg/apache/log4j/Level;
      23: invokevirtual #71                 // Method org/apache/log4j/Priority.isGreaterOrEqual:(Lorg/apache/log4j/Priority;)Z
      26: ifeq          41
      29: aload_0
      30: getstatic     #34                 // Field FQCN:Ljava/lang/String;
      33: getstatic     #35                 // Field org/apache/log4j/Level.INFO:Lorg/apache/log4j/Level;
      36: aload_1
      37: aconst_null
      38: invokevirtual #51                 // Method forcedLog:(Ljava/lang/String;Lorg/apache/log4j/Priority;Ljava/lang/Object;Ljava/lang/Throwable;)V
      41: return

  public void info(java.lang.Object, java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #80                 // Field repository:Lorg/apache/log4j/spi/LoggerRepository;
       4: sipush        20000
       7: invokeinterface #70,  2           // InterfaceMethod org/apache/log4j/spi/LoggerRepository.isDisabled:(I)Z
      12: ifeq          16
      15: return
      16: getstatic     #35                 // Field org/apache/log4j/Level.INFO:Lorg/apache/log4j/Level;
      19: aload_0
      20: invokevirtual #57                 // Method getEffectiveLevel:()Lorg/apache/log4j/Level;
      23: invokevirtual #71                 // Method org/apache/log4j/Priority.isGreaterOrEqual:(Lorg/apache/log4j/Priority;)Z
      26: ifeq          41
      29: aload_0
      30: getstatic     #34                 // Field FQCN:Ljava/lang/String;
      33: getstatic     #35                 // Field org/apache/log4j/Level.INFO:Lorg/apache/log4j/Level;
      36: aload_1
      37: aload_2
      38: invokevirtual #51                 // Method forcedLog:(Ljava/lang/String;Lorg/apache/log4j/Priority;Ljava/lang/Object;Ljava/lang/Throwable;)V
      41: return

  public boolean isAttached(org.apache.log4j.Appender);
    Code:
       0: aload_1
       1: ifnull        11
       4: aload_0
       5: getfield      #37                 // Field aai:Lorg/apache/log4j/helpers/AppenderAttachableImpl;
       8: ifnonnull     13
      11: iconst_0
      12: ireturn
      13: aload_0
      14: getfield      #37                 // Field aai:Lorg/apache/log4j/helpers/AppenderAttachableImpl;
      17: aload_1
      18: invokevirtual #69                 // Method org/apache/log4j/helpers/AppenderAttachableImpl.isAttached:(Lorg/apache/log4j/Appender;)Z
      21: ireturn

  public boolean isDebugEnabled();
    Code:
       0: aload_0
       1: getfield      #80                 // Field repository:Lorg/apache/log4j/spi/LoggerRepository;
       4: sipush        10000
       7: invokeinterface #70,  2           // InterfaceMethod org/apache/log4j/spi/LoggerRepository.isDisabled:(I)Z
      12: ifeq          17
      15: iconst_0
      16: ireturn
      17: getstatic     #31                 // Field org/apache/log4j/Level.DEBUG:Lorg/apache/log4j/Level;
      20: aload_0
      21: invokevirtual #57                 // Method getEffectiveLevel:()Lorg/apache/log4j/Level;
      24: invokevirtual #71                 // Method org/apache/log4j/Priority.isGreaterOrEqual:(Lorg/apache/log4j/Priority;)Z
      27: ireturn

  public boolean isEnabledFor(org.apache.log4j.Priority);
    Code:
       0: aload_0
       1: getfield      #80                 // Field repository:Lorg/apache/log4j/spi/LoggerRepository;
       4: aload_1
       5: getfield      #72                 // Field org/apache/log4j/Priority.level:I
       8: invokeinterface #70,  2           // InterfaceMethod org/apache/log4j/spi/LoggerRepository.isDisabled:(I)Z
      13: ifeq          18
      16: iconst_0
      17: ireturn
      18: aload_1
      19: aload_0
      20: invokevirtual #57                 // Method getEffectiveLevel:()Lorg/apache/log4j/Level;
      23: invokevirtual #71                 // Method org/apache/log4j/Priority.isGreaterOrEqual:(Lorg/apache/log4j/Priority;)Z
      26: ireturn

  public boolean isInfoEnabled();
    Code:
       0: aload_0
       1: getfield      #80                 // Field repository:Lorg/apache/log4j/spi/LoggerRepository;
       4: sipush        20000
       7: invokeinterface #70,  2           // InterfaceMethod org/apache/log4j/spi/LoggerRepository.isDisabled:(I)Z
      12: ifeq          17
      15: iconst_0
      16: ireturn
      17: getstatic     #35                 // Field org/apache/log4j/Level.INFO:Lorg/apache/log4j/Level;
      20: aload_0
      21: invokevirtual #57                 // Method getEffectiveLevel:()Lorg/apache/log4j/Level;
      24: invokevirtual #71                 // Method org/apache/log4j/Priority.isGreaterOrEqual:(Lorg/apache/log4j/Priority;)Z
      27: ireturn

  public void l7dlog(org.apache.log4j.Priority, java.lang.String, java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #80                 // Field repository:Lorg/apache/log4j/spi/LoggerRepository;
       4: aload_1
       5: getfield      #72                 // Field org/apache/log4j/Priority.level:I
       8: invokeinterface #70,  2           // InterfaceMethod org/apache/log4j/spi/LoggerRepository.isDisabled:(I)Z
      13: ifeq          17
      16: return
      17: aload_1
      18: aload_0
      19: invokevirtual #57                 // Method getEffectiveLevel:()Lorg/apache/log4j/Level;
      22: invokevirtual #71                 // Method org/apache/log4j/Priority.isGreaterOrEqual:(Lorg/apache/log4j/Priority;)Z
      25: ifeq          54
      28: aload_0
      29: aload_2
      30: invokevirtual #65                 // Method getResourceBundleString:(Ljava/lang/String;)Ljava/lang/String;
      33: astore        4
      35: aload         4
      37: ifnonnull     43
      40: aload_2
      41: astore        4
      43: aload_0
      44: getstatic     #34                 // Field FQCN:Ljava/lang/String;
      47: aload_1
      48: aload         4
      50: aload_3
      51: invokevirtual #51                 // Method forcedLog:(Ljava/lang/String;Lorg/apache/log4j/Priority;Ljava/lang/Object;Ljava/lang/Throwable;)V
      54: return

  public void l7dlog(org.apache.log4j.Priority, java.lang.String, java.lang.Object[], java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #80                 // Field repository:Lorg/apache/log4j/spi/LoggerRepository;
       4: aload_1
       5: getfield      #72                 // Field org/apache/log4j/Priority.level:I
       8: invokeinterface #70,  2           // InterfaceMethod org/apache/log4j/spi/LoggerRepository.isDisabled:(I)Z
      13: ifeq          17
      16: return
      17: aload_1
      18: aload_0
      19: invokevirtual #57                 // Method getEffectiveLevel:()Lorg/apache/log4j/Level;
      22: invokevirtual #71                 // Method org/apache/log4j/Priority.isGreaterOrEqual:(Lorg/apache/log4j/Priority;)Z
      25: ifeq          66
      28: aload_0
      29: aload_2
      30: invokevirtual #65                 // Method getResourceBundleString:(Ljava/lang/String;)Ljava/lang/String;
      33: astore        5
      35: aload         5
      37: ifnonnull     46
      40: aload_2
      41: astore        6
      43: goto          54
      46: aload         5
      48: aload_3
      49: invokestatic  #52                 // Method java/text/MessageFormat.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      52: astore        6
      54: aload_0
      55: getstatic     #34                 // Field FQCN:Ljava/lang/String;
      58: aload_1
      59: aload         6
      61: aload         4
      63: invokevirtual #51                 // Method forcedLog:(Ljava/lang/String;Lorg/apache/log4j/Priority;Ljava/lang/Object;Ljava/lang/Throwable;)V
      66: return

  public void log(java.lang.String, org.apache.log4j.Priority, java.lang.Object, java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #80                 // Field repository:Lorg/apache/log4j/spi/LoggerRepository;
       4: aload_2
       5: getfield      #72                 // Field org/apache/log4j/Priority.level:I
       8: invokeinterface #70,  2           // InterfaceMethod org/apache/log4j/spi/LoggerRepository.isDisabled:(I)Z
      13: ifeq          17
      16: return
      17: aload_2
      18: aload_0
      19: invokevirtual #57                 // Method getEffectiveLevel:()Lorg/apache/log4j/Level;
      22: invokevirtual #71                 // Method org/apache/log4j/Priority.isGreaterOrEqual:(Lorg/apache/log4j/Priority;)Z
      25: ifeq          37
      28: aload_0
      29: aload_1
      30: aload_2
      31: aload_3
      32: aload         4
      34: invokevirtual #51                 // Method forcedLog:(Ljava/lang/String;Lorg/apache/log4j/Priority;Ljava/lang/Object;Ljava/lang/Throwable;)V
      37: return

  public void log(org.apache.log4j.Priority, java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #80                 // Field repository:Lorg/apache/log4j/spi/LoggerRepository;
       4: aload_1
       5: getfield      #72                 // Field org/apache/log4j/Priority.level:I
       8: invokeinterface #70,  2           // InterfaceMethod org/apache/log4j/spi/LoggerRepository.isDisabled:(I)Z
      13: ifeq          17
      16: return
      17: aload_1
      18: aload_0
      19: invokevirtual #57                 // Method getEffectiveLevel:()Lorg/apache/log4j/Level;
      22: invokevirtual #71                 // Method org/apache/log4j/Priority.isGreaterOrEqual:(Lorg/apache/log4j/Priority;)Z
      25: ifeq          38
      28: aload_0
      29: getstatic     #34                 // Field FQCN:Ljava/lang/String;
      32: aload_1
      33: aload_2
      34: aconst_null
      35: invokevirtual #51                 // Method forcedLog:(Ljava/lang/String;Lorg/apache/log4j/Priority;Ljava/lang/Object;Ljava/lang/Throwable;)V
      38: return

  public void log(org.apache.log4j.Priority, java.lang.Object, java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #80                 // Field repository:Lorg/apache/log4j/spi/LoggerRepository;
       4: aload_1
       5: getfield      #72                 // Field org/apache/log4j/Priority.level:I
       8: invokeinterface #70,  2           // InterfaceMethod org/apache/log4j/spi/LoggerRepository.isDisabled:(I)Z
      13: ifeq          17
      16: return
      17: aload_1
      18: aload_0
      19: invokevirtual #57                 // Method getEffectiveLevel:()Lorg/apache/log4j/Level;
      22: invokevirtual #71                 // Method org/apache/log4j/Priority.isGreaterOrEqual:(Lorg/apache/log4j/Priority;)Z
      25: ifeq          38
      28: aload_0
      29: getstatic     #34                 // Field FQCN:Ljava/lang/String;
      32: aload_1
      33: aload_2
      34: aload_3
      35: invokevirtual #51                 // Method forcedLog:(Ljava/lang/String;Lorg/apache/log4j/Priority;Ljava/lang/Object;Ljava/lang/Throwable;)V
      38: return

  public synchronized void removeAllAppenders();
    Code:
       0: aload_0
       1: getfield      #37                 // Field aai:Lorg/apache/log4j/helpers/AppenderAttachableImpl;
       4: ifnull        19
       7: aload_0
       8: getfield      #37                 // Field aai:Lorg/apache/log4j/helpers/AppenderAttachableImpl;
      11: invokevirtual #77                 // Method org/apache/log4j/helpers/AppenderAttachableImpl.removeAllAppenders:()V
      14: aload_0
      15: aconst_null
      16: putfield      #37                 // Field aai:Lorg/apache/log4j/helpers/AppenderAttachableImpl;
      19: return

  public synchronized void removeAppender(java.lang.String);
    Code:
       0: aload_1
       1: ifnull        11
       4: aload_0
       5: getfield      #37                 // Field aai:Lorg/apache/log4j/helpers/AppenderAttachableImpl;
       8: ifnonnull     12
      11: return
      12: aload_0
      13: getfield      #37                 // Field aai:Lorg/apache/log4j/helpers/AppenderAttachableImpl;
      16: aload_1
      17: invokevirtual #78                 // Method org/apache/log4j/helpers/AppenderAttachableImpl.removeAppender:(Ljava/lang/String;)V
      20: return

  public synchronized void removeAppender(org.apache.log4j.Appender);
    Code:
       0: aload_1
       1: ifnull        11
       4: aload_0
       5: getfield      #37                 // Field aai:Lorg/apache/log4j/helpers/AppenderAttachableImpl;
       8: ifnonnull     12
      11: return
      12: aload_0
      13: getfield      #37                 // Field aai:Lorg/apache/log4j/helpers/AppenderAttachableImpl;
      16: aload_1
      17: invokevirtual #79                 // Method org/apache/log4j/helpers/AppenderAttachableImpl.removeAppender:(Lorg/apache/log4j/Appender;)V
      20: return

  public void setAdditivity(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #39                 // Field additive:Z
       5: return

  final void setHierarchy(org.apache.log4j.spi.LoggerRepository);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #80                 // Field repository:Lorg/apache/log4j/spi/LoggerRepository;
       5: return

  public void setLevel(org.apache.log4j.Level);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #73                 // Field level:Lorg/apache/log4j/Level;
       5: return

  public void setPriority(org.apache.log4j.Priority);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #18                 // class org/apache/log4j/Level
       5: putfield      #73                 // Field level:Lorg/apache/log4j/Level;
       8: return

  public void setResourceBundle(java.util.ResourceBundle);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #81                 // Field resourceBundle:Ljava/util/ResourceBundle;
       5: return

  public static void shutdown();
    Code:
       0: invokestatic  #82                 // Method org/apache/log4j/LogManager.shutdown:()V
       3: return

  public void warn(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #80                 // Field repository:Lorg/apache/log4j/spi/LoggerRepository;
       4: sipush        30000
       7: invokeinterface #70,  2           // InterfaceMethod org/apache/log4j/spi/LoggerRepository.isDisabled:(I)Z
      12: ifeq          16
      15: return
      16: getstatic     #36                 // Field org/apache/log4j/Level.WARN:Lorg/apache/log4j/Level;
      19: aload_0
      20: invokevirtual #57                 // Method getEffectiveLevel:()Lorg/apache/log4j/Level;
      23: invokevirtual #71                 // Method org/apache/log4j/Priority.isGreaterOrEqual:(Lorg/apache/log4j/Priority;)Z
      26: ifeq          41
      29: aload_0
      30: getstatic     #34                 // Field FQCN:Ljava/lang/String;
      33: getstatic     #36                 // Field org/apache/log4j/Level.WARN:Lorg/apache/log4j/Level;
      36: aload_1
      37: aconst_null
      38: invokevirtual #51                 // Method forcedLog:(Ljava/lang/String;Lorg/apache/log4j/Priority;Ljava/lang/Object;Ljava/lang/Throwable;)V
      41: return

  public void warn(java.lang.Object, java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #80                 // Field repository:Lorg/apache/log4j/spi/LoggerRepository;
       4: sipush        30000
       7: invokeinterface #70,  2           // InterfaceMethod org/apache/log4j/spi/LoggerRepository.isDisabled:(I)Z
      12: ifeq          16
      15: return
      16: getstatic     #36                 // Field org/apache/log4j/Level.WARN:Lorg/apache/log4j/Level;
      19: aload_0
      20: invokevirtual #57                 // Method getEffectiveLevel:()Lorg/apache/log4j/Level;
      23: invokevirtual #71                 // Method org/apache/log4j/Priority.isGreaterOrEqual:(Lorg/apache/log4j/Priority;)Z
      26: ifeq          41
      29: aload_0
      30: getstatic     #34                 // Field FQCN:Ljava/lang/String;
      33: getstatic     #36                 // Field org/apache/log4j/Level.WARN:Lorg/apache/log4j/Level;
      36: aload_1
      37: aload_2
      38: invokevirtual #51                 // Method forcedLog:(Ljava/lang/String;Lorg/apache/log4j/Priority;Ljava/lang/Object;Ljava/lang/Throwable;)V
      41: return
}
