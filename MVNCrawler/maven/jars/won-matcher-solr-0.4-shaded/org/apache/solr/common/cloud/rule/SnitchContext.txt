Compiled from "SnitchContext.java"
public abstract class org.apache.solr.common.cloud.rule.SnitchContext implements org.apache.solr.common.cloud.rule.RemoteCallback {
  private static final org.slf4j.Logger log;

  private final java.util.Map<java.lang.String, java.lang.Object> tags;

  private java.lang.String node;

  private java.util.Map<java.lang.String, java.lang.Object> session;

  public final org.apache.solr.common.cloud.rule.SnitchContext$SnitchInfo snitchInfo;

  public java.lang.Exception exception;

  public org.apache.solr.common.cloud.rule.SnitchContext(org.apache.solr.common.cloud.rule.SnitchContext$SnitchInfo, java.lang.String, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/HashMap
       8: dup
       9: invokespecial #3                  // Method java/util/HashMap."<init>":()V
      12: putfield      #4                  // Field tags:Ljava/util/Map;
      15: aload_0
      16: aload_1
      17: putfield      #5                  // Field snitchInfo:Lorg/apache/solr/common/cloud/rule/SnitchContext$SnitchInfo;
      20: aload_0
      21: aload_2
      22: putfield      #6                  // Field node:Ljava/lang/String;
      25: aload_0
      26: aload_3
      27: putfield      #7                  // Field session:Ljava/util/Map;
      30: return

  public org.apache.solr.common.cloud.rule.SnitchContext$SnitchInfo getSnitchInfo();
    Code:
       0: aload_0
       1: getfield      #5                  // Field snitchInfo:Lorg/apache/solr/common/cloud/rule/SnitchContext$SnitchInfo;
       4: areturn

  public java.util.Map<java.lang.String, java.lang.Object> getTags();
    Code:
       0: aload_0
       1: getfield      #4                  // Field tags:Ljava/util/Map;
       4: areturn

  public void store(java.lang.String, java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #7                  // Field session:Ljava/util/Map;
       4: ifnull        19
       7: aload_0
       8: getfield      #7                  // Field session:Ljava/util/Map;
      11: aload_1
      12: aload_2
      13: invokeinterface #8,  3            // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      18: pop
      19: return

  public java.lang.Object retrieve(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #7                  // Field session:Ljava/util/Map;
       4: ifnull        20
       7: aload_0
       8: getfield      #7                  // Field session:Ljava/util/Map;
      11: aload_1
      12: invokeinterface #9,  2            // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      17: goto          21
      20: aconst_null
      21: areturn

  public abstract java.util.Map getZkJson(java.lang.String);

  public java.lang.String getNode();
    Code:
       0: aload_0
       1: getfield      #6                  // Field node:Ljava/lang/String;
       4: areturn

  public abstract void invokeRemote(java.lang.String, org.apache.solr.common.params.ModifiableSolrParams, java.lang.String, org.apache.solr.common.cloud.rule.RemoteCallback);

  public void remoteCallback(org.apache.solr.common.cloud.rule.SnitchContext, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_0
       1: getfield      #4                  // Field tags:Ljava/util/Map;
       4: aload_2
       5: invokeinterface #10,  2           // InterfaceMethod java/util/Map.putAll:(Ljava/util/Map;)V
      10: return

  public java.lang.String getErrMsg();
    Code:
       0: aload_0
       1: getfield      #11                 // Field exception:Ljava/lang/Exception;
       4: ifnonnull     11
       7: aconst_null
       8: goto          18
      11: aload_0
      12: getfield      #11                 // Field exception:Ljava/lang/Exception;
      15: invokevirtual #12                 // Method java/lang/Exception.getMessage:()Ljava/lang/String;
      18: areturn

  static {};
    Code:
       0: invokestatic  #13                 // Method java/lang/invoke/MethodHandles.lookup:()Ljava/lang/invoke/MethodHandles$Lookup;
       3: invokevirtual #14                 // Method java/lang/invoke/MethodHandles$Lookup.lookupClass:()Ljava/lang/Class;
       6: invokestatic  #15                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       9: putstatic     #16                 // Field log:Lorg/slf4j/Logger;
      12: return
}
