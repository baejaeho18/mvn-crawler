Compiled from "MapBackedCache.java"
public class org.apache.solr.common.util.MapBackedCache<K, V> implements org.apache.solr.common.util.Cache<K, V> {
  private final java.util.Map<K, V> map;

  public org.apache.solr.common.util.MapBackedCache(java.util.Map<K, V>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field map:Ljava/util/Map;
       9: return

  public V put(K, V);
    Code:
       0: aload_0
       1: getfield      #2                  // Field map:Ljava/util/Map;
       4: aload_1
       5: aload_2
       6: invokeinterface #3,  3            // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      11: areturn

  public V get(K);
    Code:
       0: aload_0
       1: getfield      #2                  // Field map:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #4,  2            // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: areturn

  public V remove(K);
    Code:
       0: aload_0
       1: getfield      #2                  // Field map:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #5,  2            // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      10: areturn

  public void clear();
    Code:
       0: aload_0
       1: getfield      #2                  // Field map:Ljava/util/Map;
       4: invokeinterface #6,  1            // InterfaceMethod java/util/Map.clear:()V
       9: return

  public V computeIfAbsent(K, java.util.function.Function<? super K, ? extends V>);
    Code:
       0: aload_0
       1: getfield      #2                  // Field map:Ljava/util/Map;
       4: aload_1
       5: aload_2
       6: invokeinterface #7,  3            // InterfaceMethod java/util/Map.computeIfAbsent:(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;
      11: areturn
}
