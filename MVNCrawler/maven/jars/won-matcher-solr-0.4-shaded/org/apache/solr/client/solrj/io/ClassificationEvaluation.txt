Compiled from "ClassificationEvaluation.java"
public class org.apache.solr.client.solrj.io.ClassificationEvaluation {
  private long truePositive;

  private long falsePositive;

  private long trueNegative;

  private long falseNegative;

  public org.apache.solr.client.solrj.io.ClassificationEvaluation();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public void count(int, int);
    Code:
       0: iload_2
       1: iconst_1
       2: if_icmpne     36
       5: iload_1
       6: iconst_1
       7: if_icmpne     23
      10: aload_0
      11: dup
      12: getfield      #2                  // Field truePositive:J
      15: lconst_1
      16: ladd
      17: putfield      #2                  // Field truePositive:J
      20: goto          63
      23: aload_0
      24: dup
      25: getfield      #3                  // Field falsePositive:J
      28: lconst_1
      29: ladd
      30: putfield      #3                  // Field falsePositive:J
      33: goto          63
      36: iload_1
      37: ifne          53
      40: aload_0
      41: dup
      42: getfield      #4                  // Field trueNegative:J
      45: lconst_1
      46: ladd
      47: putfield      #4                  // Field trueNegative:J
      50: goto          63
      53: aload_0
      54: dup
      55: getfield      #5                  // Field falseNegative:J
      58: lconst_1
      59: ladd
      60: putfield      #5                  // Field falseNegative:J
      63: return

  public void putToMap(java.util.Map);
    Code:
       0: aload_1
       1: ldc           #6                  // String truePositive_i
       3: aload_0
       4: getfield      #2                  // Field truePositive:J
       7: invokestatic  #7                  // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      10: invokeinterface #8,  3            // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      15: pop
      16: aload_1
      17: ldc           #9                  // String trueNegative_i
      19: aload_0
      20: getfield      #4                  // Field trueNegative:J
      23: invokestatic  #7                  // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      26: invokeinterface #8,  3            // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      31: pop
      32: aload_1
      33: ldc           #10                 // String falsePositive_i
      35: aload_0
      36: getfield      #3                  // Field falsePositive:J
      39: invokestatic  #7                  // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      42: invokeinterface #8,  3            // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      47: pop
      48: aload_1
      49: ldc           #11                 // String falseNegative_i
      51: aload_0
      52: getfield      #5                  // Field falseNegative:J
      55: invokestatic  #7                  // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      58: invokeinterface #8,  3            // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      63: pop
      64: return

  public java.util.Map toMap();
    Code:
       0: new           #12                 // class java/util/HashMap
       3: dup
       4: invokespecial #13                 // Method java/util/HashMap."<init>":()V
       7: astore_1
       8: aload_0
       9: aload_1
      10: invokevirtual #14                 // Method putToMap:(Ljava/util/Map;)V
      13: aload_1
      14: areturn

  public static org.apache.solr.client.solrj.io.ClassificationEvaluation create(java.util.Map);
    Code:
       0: new           #15                 // class org/apache/solr/client/solrj/io/ClassificationEvaluation
       3: dup
       4: invokespecial #16                 // Method "<init>":()V
       7: astore_1
       8: aload_1
       9: aload_0
      10: invokevirtual #17                 // Method addEvaluation:(Ljava/util/Map;)V
      13: aload_1
      14: areturn

  public void addEvaluation(java.util.Map);
    Code:
       0: aload_0
       1: dup
       2: getfield      #2                  // Field truePositive:J
       5: aload_1
       6: ldc           #6                  // String truePositive_i
       8: invokeinterface #18,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      13: checkcast     #19                 // class java/lang/Long
      16: invokevirtual #20                 // Method java/lang/Long.longValue:()J
      19: ladd
      20: putfield      #2                  // Field truePositive:J
      23: aload_0
      24: dup
      25: getfield      #4                  // Field trueNegative:J
      28: aload_1
      29: ldc           #9                  // String trueNegative_i
      31: invokeinterface #18,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      36: checkcast     #19                 // class java/lang/Long
      39: invokevirtual #20                 // Method java/lang/Long.longValue:()J
      42: ladd
      43: putfield      #4                  // Field trueNegative:J
      46: aload_0
      47: dup
      48: getfield      #3                  // Field falsePositive:J
      51: aload_1
      52: ldc           #10                 // String falsePositive_i
      54: invokeinterface #18,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      59: checkcast     #19                 // class java/lang/Long
      62: invokevirtual #20                 // Method java/lang/Long.longValue:()J
      65: ladd
      66: putfield      #3                  // Field falsePositive:J
      69: aload_0
      70: dup
      71: getfield      #5                  // Field falseNegative:J
      74: aload_1
      75: ldc           #11                 // String falseNegative_i
      77: invokeinterface #18,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      82: checkcast     #19                 // class java/lang/Long
      85: invokevirtual #20                 // Method java/lang/Long.longValue:()J
      88: ladd
      89: putfield      #5                  // Field falseNegative:J
      92: return

  public double getPrecision();
    Code:
       0: aload_0
       1: getfield      #2                  // Field truePositive:J
       4: aload_0
       5: getfield      #3                  // Field falsePositive:J
       8: ladd
       9: lconst_0
      10: lcmp
      11: ifne          16
      14: dconst_0
      15: dreturn
      16: aload_0
      17: getfield      #2                  // Field truePositive:J
      20: l2d
      21: aload_0
      22: getfield      #2                  // Field truePositive:J
      25: aload_0
      26: getfield      #3                  // Field falsePositive:J
      29: ladd
      30: l2d
      31: ddiv
      32: dreturn

  public double getRecall();
    Code:
       0: aload_0
       1: getfield      #2                  // Field truePositive:J
       4: aload_0
       5: getfield      #5                  // Field falseNegative:J
       8: ladd
       9: lconst_0
      10: lcmp
      11: ifne          16
      14: dconst_0
      15: dreturn
      16: aload_0
      17: getfield      #2                  // Field truePositive:J
      20: l2d
      21: aload_0
      22: getfield      #2                  // Field truePositive:J
      25: aload_0
      26: getfield      #5                  // Field falseNegative:J
      29: ladd
      30: l2d
      31: ddiv
      32: dreturn

  public double getF1();
    Code:
       0: aload_0
       1: invokevirtual #21                 // Method getPrecision:()D
       4: dstore_1
       5: aload_0
       6: invokevirtual #22                 // Method getRecall:()D
       9: dstore_3
      10: dload_1
      11: dload_3
      12: dadd
      13: dconst_0
      14: dcmpl
      15: ifne          20
      18: dconst_0
      19: dreturn
      20: ldc2_w        #23                 // double 2.0d
      23: dload_1
      24: dload_3
      25: dmul
      26: dmul
      27: dload_1
      28: dload_3
      29: dadd
      30: ddiv
      31: dreturn

  public double getAccuracy();
    Code:
       0: aload_0
       1: getfield      #2                  // Field truePositive:J
       4: aload_0
       5: getfield      #4                  // Field trueNegative:J
       8: ladd
       9: l2d
      10: aload_0
      11: getfield      #2                  // Field truePositive:J
      14: aload_0
      15: getfield      #4                  // Field trueNegative:J
      18: ladd
      19: aload_0
      20: getfield      #5                  // Field falseNegative:J
      23: ladd
      24: aload_0
      25: getfield      #3                  // Field falsePositive:J
      28: ladd
      29: l2d
      30: ddiv
      31: dreturn
}
