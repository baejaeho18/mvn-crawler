Compiled from "ResultSetMetaDataImpl.java"
class org.apache.solr.client.solrj.io.sql.ResultSetMetaDataImpl implements java.sql.ResultSetMetaData {
  private final org.apache.solr.client.solrj.io.sql.ResultSetImpl resultSet;

  private final org.apache.solr.client.solrj.io.Tuple metadataTuple;

  private final org.apache.solr.client.solrj.io.Tuple firstTuple;

  org.apache.solr.client.solrj.io.sql.ResultSetMetaDataImpl(org.apache.solr.client.solrj.io.sql.ResultSetImpl);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field resultSet:Lorg/apache/solr/client/solrj/io/sql/ResultSetImpl;
       9: aload_0
      10: aload_0
      11: getfield      #2                  // Field resultSet:Lorg/apache/solr/client/solrj/io/sql/ResultSetImpl;
      14: invokevirtual #3                  // Method org/apache/solr/client/solrj/io/sql/ResultSetImpl.getMetadataTuple:()Lorg/apache/solr/client/solrj/io/Tuple;
      17: putfield      #4                  // Field metadataTuple:Lorg/apache/solr/client/solrj/io/Tuple;
      20: aload_0
      21: aload_0
      22: getfield      #2                  // Field resultSet:Lorg/apache/solr/client/solrj/io/sql/ResultSetImpl;
      25: invokevirtual #5                  // Method org/apache/solr/client/solrj/io/sql/ResultSetImpl.getFirstTuple:()Lorg/apache/solr/client/solrj/io/Tuple;
      28: putfield      #6                  // Field firstTuple:Lorg/apache/solr/client/solrj/io/Tuple;
      31: return

  private java.lang.Class getColumnClass(int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: getfield      #6                  // Field firstTuple:Lorg/apache/solr/client/solrj/io/Tuple;
       4: aload_0
       5: iload_1
       6: invokevirtual #7                  // Method getColumnLabel:(I)Ljava/lang/String;
       9: invokevirtual #8                  // Method org/apache/solr/client/solrj/io/Tuple.get:(Ljava/lang/Object;)Ljava/lang/Object;
      12: astore_2
      13: aload_2
      14: ifnonnull     20
      17: ldc           #9                  // class java/lang/String
      19: areturn
      20: aload_2
      21: invokevirtual #10                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      24: areturn

  public int getColumnCount() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field metadataTuple:Lorg/apache/solr/client/solrj/io/Tuple;
       4: ldc           #11                 // String fields
       6: invokevirtual #12                 // Method org/apache/solr/client/solrj/io/Tuple.getStrings:(Ljava/lang/Object;)Ljava/util/List;
       9: astore_1
      10: aload_1
      11: ifnonnull     24
      14: new           #13                 // class java/sql/SQLException
      17: dup
      18: ldc           #14                 // String Unable to determine fields for column count
      20: invokespecial #15                 // Method java/sql/SQLException."<init>":(Ljava/lang/String;)V
      23: athrow
      24: aload_1
      25: invokeinterface #16,  1           // InterfaceMethod java/util/List.size:()I
      30: ireturn

  public boolean isAutoIncrement(int) throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean isCaseSensitive(int) throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean isSearchable(int) throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean isCurrency(int) throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public int isNullable(int) throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean isSigned(int) throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public int getColumnDisplaySize(int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #7                  // Method getColumnLabel:(I)Ljava/lang/String;
       5: invokevirtual #17                 // Method java/lang/String.length:()I
       8: ireturn

  public java.lang.String getColumnLabel(int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field metadataTuple:Lorg/apache/solr/client/solrj/io/Tuple;
       4: ldc           #18                 // String aliases
       6: invokevirtual #8                  // Method org/apache/solr/client/solrj/io/Tuple.get:(Ljava/lang/Object;)Ljava/lang/Object;
       9: checkcast     #19                 // class java/util/Map
      12: astore_2
      13: aload_2
      14: aload_0
      15: iload_1
      16: invokevirtual #20                 // Method getColumnName:(I)Ljava/lang/String;
      19: invokeinterface #21,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      24: checkcast     #9                  // class java/lang/String
      27: areturn

  public java.lang.String getColumnName(int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field metadataTuple:Lorg/apache/solr/client/solrj/io/Tuple;
       4: ldc           #11                 // String fields
       6: invokevirtual #12                 // Method org/apache/solr/client/solrj/io/Tuple.getStrings:(Ljava/lang/Object;)Ljava/util/List;
       9: astore_2
      10: iload_1
      11: iconst_1
      12: if_icmplt     25
      15: iload_1
      16: aload_2
      17: invokeinterface #16,  1           // InterfaceMethod java/util/List.size:()I
      22: if_icmple     57
      25: new           #13                 // class java/sql/SQLException
      28: dup
      29: new           #22                 // class java/lang/StringBuilder
      32: dup
      33: invokespecial #23                 // Method java/lang/StringBuilder."<init>":()V
      36: ldc           #24                 // String Column index
      38: invokevirtual #25                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      41: iload_1
      42: invokevirtual #26                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      45: ldc           #27                 // String  is not valid
      47: invokevirtual #25                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      50: invokevirtual #28                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      53: invokespecial #15                 // Method java/sql/SQLException."<init>":(Ljava/lang/String;)V
      56: athrow
      57: aload_2
      58: iload_1
      59: iconst_1
      60: isub
      61: invokeinterface #29,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      66: checkcast     #9                  // class java/lang/String
      69: areturn

  public java.lang.String getSchemaName(int) throws java.sql.SQLException;
    Code:
       0: aconst_null
       1: areturn

  public int getPrecision(int) throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public int getScale(int) throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public java.lang.String getTableName(int) throws java.sql.SQLException;
    Code:
       0: aconst_null
       1: areturn

  public java.lang.String getCatalogName(int) throws java.sql.SQLException;
    Code:
       0: aconst_null
       1: areturn

  public int getColumnType(int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #30                 // Method getColumnTypeName:(I)Ljava/lang/String;
       5: astore_2
       6: iconst_m1
       7: istore_3
       8: aload_2
       9: invokevirtual #31                 // Method java/lang/String.hashCode:()I
      12: lookupswitch  { // 4
           -1808118735: 56
            -672261858: 70
               2374300: 84
            2052876273: 98
               default: 109
          }
      56: aload_2
      57: ldc           #32                 // String String
      59: invokevirtual #33                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      62: ifeq          109
      65: iconst_0
      66: istore_3
      67: goto          109
      70: aload_2
      71: ldc           #34                 // String Integer
      73: invokevirtual #33                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      76: ifeq          109
      79: iconst_1
      80: istore_3
      81: goto          109
      84: aload_2
      85: ldc           #35                 // String Long
      87: invokevirtual #33                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      90: ifeq          109
      93: iconst_2
      94: istore_3
      95: goto          109
      98: aload_2
      99: ldc           #36                 // String Double
     101: invokevirtual #33                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     104: ifeq          109
     107: iconst_3
     108: istore_3
     109: iload_3
     110: tableswitch   { // 0 to 3
                     0: 140
                     1: 143
                     2: 145
                     3: 148
               default: 151
          }
     140: bipush        12
     142: ireturn
     143: iconst_4
     144: ireturn
     145: bipush        8
     147: ireturn
     148: bipush        8
     150: ireturn
     151: sipush        2000
     154: ireturn

  public java.lang.String getColumnTypeName(int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #38                 // Method getColumnClass:(I)Ljava/lang/Class;
       5: invokevirtual #39                 // Method java/lang/Class.getSimpleName:()Ljava/lang/String;
       8: areturn

  public boolean isReadOnly(int) throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean isWritable(int) throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean isDefinitelyWritable(int) throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public java.lang.String getColumnClassName(int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #38                 // Method getColumnClass:(I)Ljava/lang/Class;
       5: invokevirtual #40                 // Method java/lang/Class.getTypeName:()Ljava/lang/String;
       8: areturn

  public <T> T unwrap(java.lang.Class<T>) throws java.sql.SQLException;
    Code:
       0: aconst_null
       1: areturn

  public boolean isWrapperFor(java.lang.Class<?>) throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn
}
