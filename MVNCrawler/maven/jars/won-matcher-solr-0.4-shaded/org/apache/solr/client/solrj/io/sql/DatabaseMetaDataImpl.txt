Compiled from "DatabaseMetaDataImpl.java"
class org.apache.solr.client.solrj.io.sql.DatabaseMetaDataImpl implements java.sql.DatabaseMetaData {
  private final org.apache.solr.client.solrj.io.sql.ConnectionImpl connection;

  private final java.sql.Statement connectionStatement;

  public org.apache.solr.client.solrj.io.sql.DatabaseMetaDataImpl(org.apache.solr.client.solrj.io.sql.ConnectionImpl, java.sql.Statement);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field connection:Lorg/apache/solr/client/solrj/io/sql/ConnectionImpl;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field connectionStatement:Ljava/sql/Statement;
      14: return

  private int getVersionPart(java.lang.String, int);
    Code:
       0: aload_1
       1: ifnull        22
       4: aload_1
       5: ldc           #4                  // String \\.
       7: iconst_3
       8: invokevirtual #5                  // Method java/lang/String.split:(Ljava/lang/String;I)[Ljava/lang/String;
      11: astore_3
      12: aload_3
      13: iload_2
      14: aaload
      15: invokestatic  #6                  // Method java/lang/Integer.parseInt:(Ljava/lang/String;)I
      18: ireturn
      19: astore_3
      20: iconst_0
      21: ireturn
      22: iconst_0
      23: ireturn
    Exception table:
       from    to  target type
           4    18    19   Class java/lang/Throwable

  public boolean allProceduresAreCallable() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean allTablesAreSelectable() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public java.lang.String getURL() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field connection:Lorg/apache/solr/client/solrj/io/sql/ConnectionImpl;
       4: invokevirtual #8                  // Method org/apache/solr/client/solrj/io/sql/ConnectionImpl.getUrl:()Ljava/lang/String;
       7: areturn

  public java.lang.String getUserName() throws java.sql.SQLException;
    Code:
       0: aconst_null
       1: areturn

  public boolean isReadOnly() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean nullsAreSortedHigh() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean nullsAreSortedLow() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean nullsAreSortedAtStart() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean nullsAreSortedAtEnd() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public java.lang.String getDatabaseProductName() throws java.sql.SQLException;
    Code:
       0: ldc           #9                  // String Apache Solr
       2: areturn

  public java.lang.String getDatabaseProductVersion() throws java.sql.SQLException;
    Code:
       0: new           #10                 // class org/apache/solr/client/solrj/SolrQuery
       3: dup
       4: invokespecial #11                 // Method org/apache/solr/client/solrj/SolrQuery."<init>":()V
       7: astore_1
       8: aload_1
       9: ldc           #12                 // String /admin/info/system
      11: invokevirtual #13                 // Method org/apache/solr/client/solrj/SolrQuery.setRequestHandler:(Ljava/lang/String;)Lorg/apache/solr/client/solrj/SolrQuery;
      14: pop
      15: aload_0
      16: getfield      #2                  // Field connection:Lorg/apache/solr/client/solrj/io/sql/ConnectionImpl;
      19: invokevirtual #14                 // Method org/apache/solr/client/solrj/io/sql/ConnectionImpl.getClient:()Lorg/apache/solr/client/solrj/impl/CloudSolrClient;
      22: astore_2
      23: aload_2
      24: invokevirtual #15                 // Method org/apache/solr/client/solrj/impl/CloudSolrClient.getZkStateReader:()Lorg/apache/solr/common/cloud/ZkStateReader;
      27: invokevirtual #16                 // Method org/apache/solr/common/cloud/ZkStateReader.getClusterState:()Lorg/apache/solr/common/cloud/ClusterState;
      30: invokevirtual #17                 // Method org/apache/solr/common/cloud/ClusterState.getLiveNodes:()Ljava/util/Set;
      33: astore_3
      34: aconst_null
      35: astore        4
      37: aload_3
      38: invokeinterface #18,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      43: astore        5
      45: aload         5
      47: invokeinterface #19,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      52: ifeq          185
      55: aload         5
      57: invokeinterface #20,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      62: checkcast     #21                 // class java/lang/String
      65: astore        6
      67: aload_2
      68: invokevirtual #15                 // Method org/apache/solr/client/solrj/impl/CloudSolrClient.getZkStateReader:()Lorg/apache/solr/common/cloud/ZkStateReader;
      71: aload         6
      73: invokevirtual #22                 // Method org/apache/solr/common/cloud/ZkStateReader.getBaseUrlForNodeName:(Ljava/lang/String;)Ljava/lang/String;
      76: astore        7
      78: new           #23                 // class org/apache/solr/client/solrj/impl/HttpSolrClient$Builder
      81: dup
      82: aload         7
      84: invokespecial #24                 // Method org/apache/solr/client/solrj/impl/HttpSolrClient$Builder."<init>":(Ljava/lang/String;)V
      87: invokevirtual #25                 // Method org/apache/solr/client/solrj/impl/HttpSolrClient$Builder.build:()Lorg/apache/solr/client/solrj/impl/HttpSolrClient;
      90: astore        4
      92: aload         4
      94: aload_1
      95: invokevirtual #26                 // Method org/apache/solr/client/solrj/SolrClient.query:(Lorg/apache/solr/common/params/SolrParams;)Lorg/apache/solr/client/solrj/response/QueryResponse;
      98: astore        8
     100: aload         8
     102: invokevirtual #27                 // Method org/apache/solr/client/solrj/response/QueryResponse.getResponse:()Lorg/apache/solr/common/util/NamedList;
     105: ldc           #28                 // String lucene
     107: invokevirtual #29                 // Method org/apache/solr/common/util/NamedList.get:(Ljava/lang/String;)Ljava/lang/Object;
     110: checkcast     #30                 // class org/apache/solr/common/util/SimpleOrderedMap
     113: ldc           #31                 // String solr-spec-version
     115: invokevirtual #32                 // Method org/apache/solr/common/util/SimpleOrderedMap.get:(Ljava/lang/String;)Ljava/lang/Object;
     118: invokestatic  #33                 // Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;
     121: astore        9
     123: aload         4
     125: ifnull        138
     128: aload         4
     130: invokevirtual #34                 // Method org/apache/solr/client/solrj/SolrClient.close:()V
     133: goto          138
     136: astore        10
     138: aload         9
     140: areturn
     141: astore        7
     143: ldc           #37                 // String
     145: astore        8
     147: aload         4
     149: ifnull        162
     152: aload         4
     154: invokevirtual #34                 // Method org/apache/solr/client/solrj/SolrClient.close:()V
     157: goto          162
     160: astore        9
     162: aload         8
     164: areturn
     165: astore        11
     167: aload         4
     169: ifnull        182
     172: aload         4
     174: invokevirtual #34                 // Method org/apache/solr/client/solrj/SolrClient.close:()V
     177: goto          182
     180: astore        12
     182: aload         11
     184: athrow
     185: ldc           #37                 // String
     187: areturn
    Exception table:
       from    to  target type
         128   133   136   Class java/io/IOException
          67   123   141   Class org/apache/solr/client/solrj/SolrServerException
          67   123   141   Class java/io/IOException
         152   157   160   Class java/io/IOException
          67   123   165   any
         141   147   165   any
         172   177   180   Class java/io/IOException
         165   167   165   any

  public int getDatabaseMajorVersion() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_0
       2: invokevirtual #38                 // Method getDatabaseProductVersion:()Ljava/lang/String;
       5: iconst_0
       6: invokespecial #39                 // Method getVersionPart:(Ljava/lang/String;I)I
       9: ireturn

  public int getDatabaseMinorVersion() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_0
       2: invokevirtual #38                 // Method getDatabaseProductVersion:()Ljava/lang/String;
       5: iconst_1
       6: invokespecial #39                 // Method getVersionPart:(Ljava/lang/String;I)I
       9: ireturn

  public java.lang.String getDriverName() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: invokevirtual #40                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
       4: invokevirtual #41                 // Method java/lang/Class.getPackage:()Ljava/lang/Package;
       7: invokevirtual #42                 // Method java/lang/Package.getSpecificationTitle:()Ljava/lang/String;
      10: areturn

  public java.lang.String getDriverVersion() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: invokevirtual #40                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
       4: invokevirtual #41                 // Method java/lang/Class.getPackage:()Ljava/lang/Package;
       7: invokevirtual #43                 // Method java/lang/Package.getSpecificationVersion:()Ljava/lang/String;
      10: areturn

  public int getDriverMajorVersion();
    Code:
       0: aload_0
       1: aload_0
       2: invokevirtual #44                 // Method getDriverVersion:()Ljava/lang/String;
       5: iconst_0
       6: invokespecial #39                 // Method getVersionPart:(Ljava/lang/String;I)I
       9: ireturn
      10: astore_1
      11: iconst_0
      12: ireturn
    Exception table:
       from    to  target type
           0     9    10   Class java/sql/SQLException

  public int getDriverMinorVersion();
    Code:
       0: aload_0
       1: aload_0
       2: invokevirtual #44                 // Method getDriverVersion:()Ljava/lang/String;
       5: iconst_1
       6: invokespecial #39                 // Method getVersionPart:(Ljava/lang/String;I)I
       9: ireturn
      10: astore_1
      11: iconst_0
      12: ireturn
    Exception table:
       from    to  target type
           0     9    10   Class java/sql/SQLException

  public boolean usesLocalFiles() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean usesLocalFilePerTable() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsMixedCaseIdentifiers() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean storesUpperCaseIdentifiers() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean storesLowerCaseIdentifiers() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean storesMixedCaseIdentifiers() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsMixedCaseQuotedIdentifiers() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean storesUpperCaseQuotedIdentifiers() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean storesLowerCaseQuotedIdentifiers() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean storesMixedCaseQuotedIdentifiers() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public java.lang.String getIdentifierQuoteString() throws java.sql.SQLException;
    Code:
       0: aconst_null
       1: areturn

  public java.lang.String getSQLKeywords() throws java.sql.SQLException;
    Code:
       0: aconst_null
       1: areturn

  public java.lang.String getNumericFunctions() throws java.sql.SQLException;
    Code:
       0: aconst_null
       1: areturn

  public java.lang.String getStringFunctions() throws java.sql.SQLException;
    Code:
       0: aconst_null
       1: areturn

  public java.lang.String getSystemFunctions() throws java.sql.SQLException;
    Code:
       0: aconst_null
       1: areturn

  public java.lang.String getTimeDateFunctions() throws java.sql.SQLException;
    Code:
       0: aconst_null
       1: areturn

  public java.lang.String getSearchStringEscape() throws java.sql.SQLException;
    Code:
       0: aconst_null
       1: areturn

  public java.lang.String getExtraNameCharacters() throws java.sql.SQLException;
    Code:
       0: aconst_null
       1: areturn

  public boolean supportsAlterTableWithAddColumn() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsAlterTableWithDropColumn() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsColumnAliasing() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean nullPlusNonNullIsNull() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsConvert() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsConvert(int, int) throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsTableCorrelationNames() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsDifferentTableCorrelationNames() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsExpressionsInOrderBy() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsOrderByUnrelated() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsGroupBy() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsGroupByUnrelated() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsGroupByBeyondSelect() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsLikeEscapeClause() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsMultipleResultSets() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsMultipleTransactions() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsNonNullableColumns() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsMinimumSQLGrammar() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsCoreSQLGrammar() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsExtendedSQLGrammar() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsANSI92EntryLevelSQL() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsANSI92IntermediateSQL() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsANSI92FullSQL() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsIntegrityEnhancementFacility() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsOuterJoins() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsFullOuterJoins() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsLimitedOuterJoins() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public java.lang.String getSchemaTerm() throws java.sql.SQLException;
    Code:
       0: aconst_null
       1: areturn

  public java.lang.String getProcedureTerm() throws java.sql.SQLException;
    Code:
       0: aconst_null
       1: areturn

  public java.lang.String getCatalogTerm() throws java.sql.SQLException;
    Code:
       0: aconst_null
       1: areturn

  public boolean isCatalogAtStart() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public java.lang.String getCatalogSeparator() throws java.sql.SQLException;
    Code:
       0: aconst_null
       1: areturn

  public boolean supportsSchemasInDataManipulation() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsSchemasInProcedureCalls() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsSchemasInTableDefinitions() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsSchemasInIndexDefinitions() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsSchemasInPrivilegeDefinitions() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsCatalogsInDataManipulation() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsCatalogsInProcedureCalls() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsCatalogsInTableDefinitions() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsCatalogsInIndexDefinitions() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsCatalogsInPrivilegeDefinitions() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsPositionedDelete() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsPositionedUpdate() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsSelectForUpdate() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsStoredProcedures() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsSubqueriesInComparisons() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsSubqueriesInExists() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsSubqueriesInIns() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsSubqueriesInQuantifieds() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsCorrelatedSubqueries() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsUnion() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsUnionAll() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsOpenCursorsAcrossCommit() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsOpenCursorsAcrossRollback() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsOpenStatementsAcrossCommit() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsOpenStatementsAcrossRollback() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public int getMaxBinaryLiteralLength() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public int getMaxCharLiteralLength() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public int getMaxColumnNameLength() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public int getMaxColumnsInGroupBy() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public int getMaxColumnsInIndex() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public int getMaxColumnsInOrderBy() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public int getMaxColumnsInSelect() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public int getMaxColumnsInTable() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public int getMaxConnections() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public int getMaxCursorNameLength() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public int getMaxIndexLength() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public int getMaxSchemaNameLength() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public int getMaxProcedureNameLength() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public int getMaxCatalogNameLength() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public int getMaxRowSize() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean doesMaxRowSizeIncludeBlobs() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public int getMaxStatementLength() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public int getMaxStatements() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public int getMaxTableNameLength() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public int getMaxTablesInSelect() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public int getMaxUserNameLength() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public int getDefaultTransactionIsolation() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsTransactions() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsTransactionIsolationLevel(int) throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsDataDefinitionAndDataManipulationTransactions() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsDataManipulationTransactionsOnly() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean dataDefinitionCausesTransactionCommit() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean dataDefinitionIgnoredInTransactions() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public java.sql.ResultSet getProcedures(java.lang.String, java.lang.String, java.lang.String) throws java.sql.SQLException;
    Code:
       0: aconst_null
       1: areturn

  public java.sql.ResultSet getProcedureColumns(java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws java.sql.SQLException;
    Code:
       0: aconst_null
       1: areturn

  public java.sql.ResultSet getTables(java.lang.String, java.lang.String, java.lang.String, java.lang.String[]) throws java.sql.SQLException;
    Code:
       0: ldc           #37                 // String
       2: astore        5
       4: aload_1
       5: ifnull        12
       8: ldc           #46                 // String tableCat = \'\" + catalog + \"\' and
      10: astore        5
      12: aload_2
      13: ifnonnull     19
      16: ldc           #47                 // String %
      18: astore_2
      19: aload_3
      20: ifnonnull     26
      23: ldc           #47                 // String %
      25: astore_3
      26: aload_0
      27: getfield      #3                  // Field connectionStatement:Ljava/sql/Statement;
      30: new           #48                 // class java/lang/StringBuilder
      33: dup
      34: invokespecial #49                 // Method java/lang/StringBuilder."<init>":()V
      37: ldc           #50                 // String select tableCat, tableSchem, tableName, tableType, remarks from metadata.TABLES where
      39: invokevirtual #51                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      42: aload         5
      44: invokevirtual #51                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      47: ldc           #52                 // String  tableSchem like \'
      49: invokevirtual #51                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      52: aload_2
      53: invokevirtual #51                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      56: ldc           #53                 // String \' and tableName like \'
      58: invokevirtual #51                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      61: aload_3
      62: invokevirtual #51                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      65: ldc           #54                 // String \'
      67: invokevirtual #51                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      70: invokevirtual #55                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      73: invokeinterface #56,  2           // InterfaceMethod java/sql/Statement.executeQuery:(Ljava/lang/String;)Ljava/sql/ResultSet;
      78: areturn

  public java.sql.ResultSet getSchemas() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field connectionStatement:Ljava/sql/Statement;
       4: ldc           #57                 // String select distinct tableSchem, tableCat from metadata.TABLES
       6: invokeinterface #56,  2           // InterfaceMethod java/sql/Statement.executeQuery:(Ljava/lang/String;)Ljava/sql/ResultSet;
      11: areturn

  public java.sql.ResultSet getCatalogs() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field connectionStatement:Ljava/sql/Statement;
       4: ldc           #58                 // String select distinct tableCat from metadata.TABLES
       6: invokeinterface #56,  2           // InterfaceMethod java/sql/Statement.executeQuery:(Ljava/lang/String;)Ljava/sql/ResultSet;
      11: areturn

  public java.sql.ResultSet getTableTypes() throws java.sql.SQLException;
    Code:
       0: aconst_null
       1: areturn

  public java.sql.ResultSet getColumns(java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws java.sql.SQLException;
    Code:
       0: aconst_null
       1: areturn

  public java.sql.ResultSet getColumnPrivileges(java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws java.sql.SQLException;
    Code:
       0: aconst_null
       1: areturn

  public java.sql.ResultSet getTablePrivileges(java.lang.String, java.lang.String, java.lang.String) throws java.sql.SQLException;
    Code:
       0: aconst_null
       1: areturn

  public java.sql.ResultSet getBestRowIdentifier(java.lang.String, java.lang.String, java.lang.String, int, boolean) throws java.sql.SQLException;
    Code:
       0: aconst_null
       1: areturn

  public java.sql.ResultSet getVersionColumns(java.lang.String, java.lang.String, java.lang.String) throws java.sql.SQLException;
    Code:
       0: aconst_null
       1: areturn

  public java.sql.ResultSet getPrimaryKeys(java.lang.String, java.lang.String, java.lang.String) throws java.sql.SQLException;
    Code:
       0: aconst_null
       1: areturn

  public java.sql.ResultSet getImportedKeys(java.lang.String, java.lang.String, java.lang.String) throws java.sql.SQLException;
    Code:
       0: aconst_null
       1: areturn

  public java.sql.ResultSet getExportedKeys(java.lang.String, java.lang.String, java.lang.String) throws java.sql.SQLException;
    Code:
       0: aconst_null
       1: areturn

  public java.sql.ResultSet getCrossReference(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws java.sql.SQLException;
    Code:
       0: aconst_null
       1: areturn

  public java.sql.ResultSet getTypeInfo() throws java.sql.SQLException;
    Code:
       0: new           #59                 // class java/lang/UnsupportedOperationException
       3: dup
       4: invokespecial #60                 // Method java/lang/UnsupportedOperationException."<init>":()V
       7: athrow

  public java.sql.ResultSet getIndexInfo(java.lang.String, java.lang.String, java.lang.String, boolean, boolean) throws java.sql.SQLException;
    Code:
       0: aconst_null
       1: areturn

  public boolean supportsResultSetType(int) throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsResultSetConcurrency(int, int) throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean ownUpdatesAreVisible(int) throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean ownDeletesAreVisible(int) throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean ownInsertsAreVisible(int) throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean othersUpdatesAreVisible(int) throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean othersDeletesAreVisible(int) throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean othersInsertsAreVisible(int) throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean updatesAreDetected(int) throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean deletesAreDetected(int) throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean insertsAreDetected(int) throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsBatchUpdates() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public java.sql.ResultSet getUDTs(java.lang.String, java.lang.String, java.lang.String, int[]) throws java.sql.SQLException;
    Code:
       0: aconst_null
       1: areturn

  public java.sql.Connection getConnection() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field connection:Lorg/apache/solr/client/solrj/io/sql/ConnectionImpl;
       4: areturn

  public boolean supportsSavepoints() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsNamedParameters() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsMultipleOpenResults() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsGetGeneratedKeys() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public java.sql.ResultSet getSuperTypes(java.lang.String, java.lang.String, java.lang.String) throws java.sql.SQLException;
    Code:
       0: aconst_null
       1: areturn

  public java.sql.ResultSet getSuperTables(java.lang.String, java.lang.String, java.lang.String) throws java.sql.SQLException;
    Code:
       0: aconst_null
       1: areturn

  public java.sql.ResultSet getAttributes(java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws java.sql.SQLException;
    Code:
       0: aconst_null
       1: areturn

  public boolean supportsResultSetHoldability(int) throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public int getResultSetHoldability() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public int getJDBCMajorVersion() throws java.sql.SQLException;
    Code:
       0: iconst_4
       1: ireturn

  public int getJDBCMinorVersion() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public int getSQLStateType() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean locatorsUpdateCopy() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean supportsStatementPooling() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public java.sql.RowIdLifetime getRowIdLifetime() throws java.sql.SQLException;
    Code:
       0: aconst_null
       1: areturn

  public java.sql.ResultSet getSchemas(java.lang.String, java.lang.String) throws java.sql.SQLException;
    Code:
       0: aconst_null
       1: areturn

  public boolean supportsStoredFunctionsUsingCallSyntax() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean autoCommitFailureClosesAllResultSets() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public java.sql.ResultSet getClientInfoProperties() throws java.sql.SQLException;
    Code:
       0: aconst_null
       1: areturn

  public java.sql.ResultSet getFunctions(java.lang.String, java.lang.String, java.lang.String) throws java.sql.SQLException;
    Code:
       0: aconst_null
       1: areturn

  public java.sql.ResultSet getFunctionColumns(java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws java.sql.SQLException;
    Code:
       0: aconst_null
       1: areturn

  public java.sql.ResultSet getPseudoColumns(java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws java.sql.SQLException;
    Code:
       0: aconst_null
       1: areturn

  public boolean generatedKeyAlwaysReturned() throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn

  public <T> T unwrap(java.lang.Class<T>) throws java.sql.SQLException;
    Code:
       0: aconst_null
       1: areturn

  public boolean isWrapperFor(java.lang.Class<?>) throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: ireturn
}
