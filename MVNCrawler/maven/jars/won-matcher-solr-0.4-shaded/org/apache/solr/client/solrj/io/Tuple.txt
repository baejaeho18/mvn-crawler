Compiled from "Tuple.java"
public class org.apache.solr.client.solrj.io.Tuple implements java.lang.Cloneable,org.apache.solr.common.MapWriter {
  public boolean EOF;

  public boolean EXCEPTION;

  public java.util.Map fields;

  public java.util.List<java.lang.String> fieldNames;

  public java.util.Map<java.lang.String, java.lang.String> fieldLabels;

  public org.apache.solr.client.solrj.io.Tuple(java.util.Map);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/HashMap
       8: dup
       9: invokespecial #3                  // Method java/util/HashMap."<init>":()V
      12: putfield      #4                  // Field fields:Ljava/util/Map;
      15: aload_1
      16: ldc           #5                  // String EOF
      18: invokeinterface #6,  2            // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
      23: ifeq          31
      26: aload_0
      27: iconst_1
      28: putfield      #7                  // Field EOF:Z
      31: aload_1
      32: ldc           #8                  // String EXCEPTION
      34: invokeinterface #6,  2            // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
      39: ifeq          47
      42: aload_0
      43: iconst_1
      44: putfield      #9                  // Field EXCEPTION:Z
      47: aload_0
      48: getfield      #4                  // Field fields:Ljava/util/Map;
      51: aload_1
      52: invokeinterface #10,  2           // InterfaceMethod java/util/Map.putAll:(Ljava/util/Map;)V
      57: return

  public java.lang.Object get(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #4                  // Field fields:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #11,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: areturn

  public void put(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #4                  // Field fields:Ljava/util/Map;
       4: aload_1
       5: aload_2
       6: invokeinterface #12,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      11: pop
      12: return

  public void remove(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #4                  // Field fields:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #13,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      10: pop
      11: return

  public java.lang.String getString(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #4                  // Field fields:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #11,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: invokestatic  #14                 // Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;
      13: areturn

  public java.lang.String getException();
    Code:
       0: aload_0
       1: getfield      #4                  // Field fields:Ljava/util/Map;
       4: ldc           #8                  // String EXCEPTION
       6: invokeinterface #11,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      11: checkcast     #15                 // class java/lang/String
      14: areturn

  public java.lang.Long getLong(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #4                  // Field fields:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #11,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: astore_2
      11: aload_2
      12: ifnonnull     17
      15: aconst_null
      16: areturn
      17: aload_2
      18: instanceof    #16                 // class java/lang/Long
      21: ifeq          29
      24: aload_2
      25: checkcast     #16                 // class java/lang/Long
      28: areturn
      29: aload_2
      30: invokevirtual #17                 // Method java/lang/Object.toString:()Ljava/lang/String;
      33: invokestatic  #18                 // Method java/lang/Long.parseLong:(Ljava/lang/String;)J
      36: invokestatic  #19                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      39: areturn

  public java.lang.Boolean getBool(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #4                  // Field fields:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #11,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: astore_2
      11: aload_2
      12: ifnonnull     17
      15: aconst_null
      16: areturn
      17: aload_2
      18: instanceof    #20                 // class java/lang/Boolean
      21: ifeq          29
      24: aload_2
      25: checkcast     #20                 // class java/lang/Boolean
      28: areturn
      29: aload_2
      30: invokevirtual #17                 // Method java/lang/Object.toString:()Ljava/lang/String;
      33: invokestatic  #21                 // Method java/lang/Boolean.parseBoolean:(Ljava/lang/String;)Z
      36: invokestatic  #22                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      39: areturn

  public java.util.List<java.lang.Boolean> getBools(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #4                  // Field fields:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #11,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #23                 // class java/util/List
      13: areturn

  public java.util.Date getDate(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #4                  // Field fields:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #11,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: astore_2
      11: aload_2
      12: ifnonnull     17
      15: aconst_null
      16: areturn
      17: aload_2
      18: instanceof    #24                 // class java/util/Date
      21: ifeq          29
      24: aload_2
      25: checkcast     #24                 // class java/util/Date
      28: areturn
      29: new           #24                 // class java/util/Date
      32: dup
      33: aload_2
      34: invokevirtual #17                 // Method java/lang/Object.toString:()Ljava/lang/String;
      37: invokestatic  #25                 // Method java/time/Instant.parse:(Ljava/lang/CharSequence;)Ljava/time/Instant;
      40: invokevirtual #26                 // Method java/time/Instant.toEpochMilli:()J
      43: invokespecial #27                 // Method java/util/Date."<init>":(J)V
      46: areturn

  public java.util.List<java.util.Date> getDates(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #4                  // Field fields:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #11,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #23                 // class java/util/List
      13: astore_2
      14: aload_2
      15: ifnonnull     20
      18: aconst_null
      19: areturn
      20: new           #28                 // class java/util/ArrayList
      23: dup
      24: invokespecial #29                 // Method java/util/ArrayList."<init>":()V
      27: astore_3
      28: aload_0
      29: getfield      #4                  // Field fields:Ljava/util/Map;
      32: aload_1
      33: invokeinterface #11,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      38: checkcast     #23                 // class java/util/List
      41: invokeinterface #30,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      46: astore        4
      48: aload         4
      50: invokeinterface #31,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      55: ifeq          95
      58: aload         4
      60: invokeinterface #32,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      65: checkcast     #15                 // class java/lang/String
      68: astore        5
      70: aload_3
      71: new           #24                 // class java/util/Date
      74: dup
      75: aload         5
      77: invokestatic  #25                 // Method java/time/Instant.parse:(Ljava/lang/CharSequence;)Ljava/time/Instant;
      80: invokevirtual #26                 // Method java/time/Instant.toEpochMilli:()J
      83: invokespecial #27                 // Method java/util/Date."<init>":(J)V
      86: invokeinterface #33,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      91: pop
      92: goto          48
      95: aload_3
      96: areturn

  public java.lang.Double getDouble(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #4                  // Field fields:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #11,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: astore_2
      11: aload_2
      12: ifnonnull     17
      15: aconst_null
      16: areturn
      17: aload_2
      18: instanceof    #34                 // class java/lang/Double
      21: ifeq          29
      24: aload_2
      25: checkcast     #34                 // class java/lang/Double
      28: areturn
      29: aload_2
      30: invokevirtual #17                 // Method java/lang/Object.toString:()Ljava/lang/String;
      33: invokestatic  #35                 // Method java/lang/Double.parseDouble:(Ljava/lang/String;)D
      36: invokestatic  #36                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      39: areturn

  public java.util.List<java.lang.String> getStrings(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #4                  // Field fields:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #11,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #23                 // class java/util/List
      13: areturn

  public java.util.List<java.lang.Long> getLongs(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #4                  // Field fields:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #11,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #23                 // class java/util/List
      13: areturn

  public java.util.List<java.lang.Double> getDoubles(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #4                  // Field fields:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #11,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #23                 // class java/util/List
      13: areturn

  public java.util.Map getMap();
    Code:
       0: aload_0
       1: getfield      #4                  // Field fields:Ljava/util/Map;
       4: areturn

  public java.util.List<java.util.Map> getMaps(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #4                  // Field fields:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #11,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #23                 // class java/util/List
      13: areturn

  public void setMaps(java.lang.Object, java.util.List<java.util.Map>);
    Code:
       0: aload_0
       1: getfield      #4                  // Field fields:Ljava/util/Map;
       4: aload_1
       5: aload_2
       6: invokeinterface #12,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      11: pop
      12: return

  public java.util.Map<java.lang.String, java.util.Map> getMetrics();
    Code:
       0: aload_0
       1: getfield      #4                  // Field fields:Ljava/util/Map;
       4: ldc           #37                 // String _METRICS_
       6: invokeinterface #11,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      11: checkcast     #38                 // class java/util/Map
      14: areturn

  public void setMetrics(java.util.Map<java.lang.String, java.util.Map>);
    Code:
       0: aload_0
       1: getfield      #4                  // Field fields:Ljava/util/Map;
       4: ldc           #37                 // String _METRICS_
       6: aload_1
       7: invokeinterface #12,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      12: pop
      13: return

  public org.apache.solr.client.solrj.io.Tuple clone();
    Code:
       0: new           #2                  // class java/util/HashMap
       3: dup
       4: invokespecial #3                  // Method java/util/HashMap."<init>":()V
       7: astore_1
       8: aload_1
       9: aload_0
      10: getfield      #4                  // Field fields:Ljava/util/Map;
      13: invokevirtual #39                 // Method java/util/HashMap.putAll:(Ljava/util/Map;)V
      16: new           #40                 // class org/apache/solr/client/solrj/io/Tuple
      19: dup
      20: aload_1
      21: invokespecial #41                 // Method "<init>":(Ljava/util/Map;)V
      24: astore_2
      25: aload_2
      26: areturn

  public void merge(org.apache.solr.client.solrj.io.Tuple);
    Code:
       0: aload_0
       1: getfield      #4                  // Field fields:Ljava/util/Map;
       4: aload_1
       5: invokevirtual #42                 // Method getMap:()Ljava/util/Map;
       8: invokeinterface #10,  2           // InterfaceMethod java/util/Map.putAll:(Ljava/util/Map;)V
      13: return

  public void writeMap(org.apache.solr.common.MapWriter$EntryWriter) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #43                 // Field fieldNames:Ljava/util/List;
       4: ifnonnull     25
       7: aload_0
       8: getfield      #4                  // Field fields:Ljava/util/Map;
      11: aload_1
      12: invokedynamic #44,  0             // InvokeDynamic #0:accept:(Lorg/apache/solr/common/MapWriter$EntryWriter;)Ljava/util/function/BiConsumer;
      17: invokeinterface #45,  2           // InterfaceMethod java/util/Map.forEach:(Ljava/util/function/BiConsumer;)V
      22: goto          92
      25: aload_0
      26: getfield      #43                 // Field fieldNames:Ljava/util/List;
      29: invokeinterface #30,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      34: astore_2
      35: aload_2
      36: invokeinterface #31,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      41: ifeq          92
      44: aload_2
      45: invokeinterface #32,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      50: checkcast     #15                 // class java/lang/String
      53: astore_3
      54: aload_0
      55: getfield      #46                 // Field fieldLabels:Ljava/util/Map;
      58: aload_3
      59: invokeinterface #11,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      64: checkcast     #15                 // class java/lang/String
      67: astore        4
      69: aload_1
      70: aload         4
      72: aload_0
      73: getfield      #4                  // Field fields:Ljava/util/Map;
      76: aload         4
      78: invokeinterface #11,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      83: invokeinterface #47,  3           // InterfaceMethod org/apache/solr/common/MapWriter$EntryWriter.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/apache/solr/common/MapWriter$EntryWriter;
      88: pop
      89: goto          35
      92: return

  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
    Code:
       0: aload_0
       1: invokevirtual #48                 // Method clone:()Lorg/apache/solr/client/solrj/io/Tuple;
       4: areturn

  private static void lambda$writeMap$0(org.apache.solr.common.MapWriter$EntryWriter, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #15                 // class java/lang/String
       5: aload_2
       6: invokeinterface #47,  3           // InterfaceMethod org/apache/solr/common/MapWriter$EntryWriter.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/apache/solr/common/MapWriter$EntryWriter;
      11: pop
      12: goto          25
      15: astore_3
      16: new           #50                 // class java/lang/RuntimeException
      19: dup
      20: aload_3
      21: invokespecial #51                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/Throwable;)V
      24: athrow
      25: return
    Exception table:
       from    to  target type
           0    12    15   Class java/io/IOException
}
