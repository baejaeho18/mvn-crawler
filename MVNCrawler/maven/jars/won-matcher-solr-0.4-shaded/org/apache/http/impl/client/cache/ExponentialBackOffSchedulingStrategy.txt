Compiled from "ExponentialBackOffSchedulingStrategy.java"
public class org.apache.http.impl.client.cache.ExponentialBackOffSchedulingStrategy implements org.apache.http.impl.client.cache.SchedulingStrategy {
  public static final long DEFAULT_BACK_OFF_RATE;

  public static final long DEFAULT_INITIAL_EXPIRY_IN_MILLIS;

  public static final long DEFAULT_MAX_EXPIRY_IN_MILLIS;

  private final long backOffRate;

  private final long initialExpiryInMillis;

  private final long maxExpiryInMillis;

  private final java.util.concurrent.ScheduledExecutorService executor;

  public org.apache.http.impl.client.cache.ExponentialBackOffSchedulingStrategy(org.apache.http.impl.client.cache.CacheConfig);
    Code:
       0: aload_0
       1: aload_1
       2: ldc2_w        #1                  // long 10l
       5: getstatic     #3                  // Field DEFAULT_INITIAL_EXPIRY_IN_MILLIS:J
       8: getstatic     #4                  // Field DEFAULT_MAX_EXPIRY_IN_MILLIS:J
      11: invokespecial #5                  // Method "<init>":(Lorg/apache/http/impl/client/cache/CacheConfig;JJJ)V
      14: return

  public org.apache.http.impl.client.cache.ExponentialBackOffSchedulingStrategy(org.apache.http.impl.client.cache.CacheConfig, long, long, long);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #6                  // Method createThreadPoolFromCacheConfig:(Lorg/apache/http/impl/client/cache/CacheConfig;)Ljava/util/concurrent/ScheduledThreadPoolExecutor;
       5: lload_2
       6: lload         4
       8: lload         6
      10: invokespecial #7                  // Method "<init>":(Ljava/util/concurrent/ScheduledExecutorService;JJJ)V
      13: return

  private static java.util.concurrent.ScheduledThreadPoolExecutor createThreadPoolFromCacheConfig(org.apache.http.impl.client.cache.CacheConfig);
    Code:
       0: new           #8                  // class java/util/concurrent/ScheduledThreadPoolExecutor
       3: dup
       4: aload_0
       5: invokevirtual #9                  // Method org/apache/http/impl/client/cache/CacheConfig.getAsynchronousWorkersMax:()I
       8: invokespecial #10                 // Method java/util/concurrent/ScheduledThreadPoolExecutor."<init>":(I)V
      11: astore_1
      12: aload_1
      13: iconst_0
      14: invokevirtual #11                 // Method java/util/concurrent/ScheduledThreadPoolExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy:(Z)V
      17: aload_1
      18: areturn

  org.apache.http.impl.client.cache.ExponentialBackOffSchedulingStrategy(java.util.concurrent.ScheduledExecutorService, long, long, long);
    Code:
       0: aload_0
       1: invokespecial #12                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: ldc           #13                 // String Executor
       8: invokestatic  #14                 // Method org/apache/http/util/Args.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      11: checkcast     #15                 // class java/util/concurrent/ScheduledExecutorService
      14: putfield      #16                 // Field executor:Ljava/util/concurrent/ScheduledExecutorService;
      17: aload_0
      18: lload_2
      19: ldc           #17                 // String BackOffRate
      21: invokestatic  #18                 // Method org/apache/http/util/Args.notNegative:(JLjava/lang/String;)J
      24: putfield      #19                 // Field backOffRate:J
      27: aload_0
      28: lload         4
      30: ldc           #20                 // String InitialExpiryInMillis
      32: invokestatic  #18                 // Method org/apache/http/util/Args.notNegative:(JLjava/lang/String;)J
      35: putfield      #21                 // Field initialExpiryInMillis:J
      38: aload_0
      39: lload         6
      41: ldc           #22                 // String MaxExpiryInMillis
      43: invokestatic  #18                 // Method org/apache/http/util/Args.notNegative:(JLjava/lang/String;)J
      46: putfield      #23                 // Field maxExpiryInMillis:J
      49: return

  public void schedule(org.apache.http.impl.client.cache.AsynchronousValidationRequest);
    Code:
       0: aload_1
       1: ldc           #24                 // String RevalidationRequest
       3: invokestatic  #14                 // Method org/apache/http/util/Args.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_1
       8: invokevirtual #25                 // Method org/apache/http/impl/client/cache/AsynchronousValidationRequest.getConsecutiveFailedAttempts:()I
      11: istore_2
      12: aload_0
      13: iload_2
      14: invokevirtual #26                 // Method calculateDelayInMillis:(I)J
      17: lstore_3
      18: aload_0
      19: getfield      #16                 // Field executor:Ljava/util/concurrent/ScheduledExecutorService;
      22: aload_1
      23: lload_3
      24: getstatic     #27                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      27: invokeinterface #28,  5           // InterfaceMethod java/util/concurrent/ScheduledExecutorService.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;
      32: pop
      33: return

  public void close();
    Code:
       0: aload_0
       1: getfield      #16                 // Field executor:Ljava/util/concurrent/ScheduledExecutorService;
       4: invokeinterface #29,  1           // InterfaceMethod java/util/concurrent/ScheduledExecutorService.shutdown:()V
       9: return

  public long getBackOffRate();
    Code:
       0: aload_0
       1: getfield      #19                 // Field backOffRate:J
       4: lreturn

  public long getInitialExpiryInMillis();
    Code:
       0: aload_0
       1: getfield      #21                 // Field initialExpiryInMillis:J
       4: lreturn

  public long getMaxExpiryInMillis();
    Code:
       0: aload_0
       1: getfield      #23                 // Field maxExpiryInMillis:J
       4: lreturn

  protected long calculateDelayInMillis(int);
    Code:
       0: iload_1
       1: ifle          33
       4: aload_0
       5: getfield      #21                 // Field initialExpiryInMillis:J
       8: l2d
       9: aload_0
      10: getfield      #19                 // Field backOffRate:J
      13: l2d
      14: iload_1
      15: iconst_1
      16: isub
      17: i2d
      18: invokestatic  #30                 // Method java/lang/Math.pow:(DD)D
      21: dmul
      22: d2l
      23: lstore_2
      24: lload_2
      25: aload_0
      26: getfield      #23                 // Field maxExpiryInMillis:J
      29: invokestatic  #31                 // Method java/lang/Math.min:(JJ)J
      32: lreturn
      33: lconst_0
      34: lreturn

  protected static <T> T checkNotNull(java.lang.String, T);
    Code:
       0: aload_1
       1: ifnonnull     31
       4: new           #32                 // class java/lang/IllegalArgumentException
       7: dup
       8: new           #33                 // class java/lang/StringBuilder
      11: dup
      12: invokespecial #34                 // Method java/lang/StringBuilder."<init>":()V
      15: aload_0
      16: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      19: ldc           #36                 // String  may not be null
      21: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: invokevirtual #37                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      27: invokespecial #38                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      30: athrow
      31: aload_1
      32: areturn

  protected static long checkNotNegative(java.lang.String, long);
    Code:
       0: lload_1
       1: lconst_0
       2: lcmp
       3: ifge          33
       6: new           #32                 // class java/lang/IllegalArgumentException
       9: dup
      10: new           #33                 // class java/lang/StringBuilder
      13: dup
      14: invokespecial #34                 // Method java/lang/StringBuilder."<init>":()V
      17: aload_0
      18: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      21: ldc           #39                 // String  may not be negative
      23: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      26: invokevirtual #37                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      29: invokespecial #38                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      32: athrow
      33: lload_1
      34: lreturn

  static {};
    Code:
       0: getstatic     #40                 // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
       3: ldc2_w        #41                 // long 6l
       6: invokevirtual #43                 // Method java/util/concurrent/TimeUnit.toMillis:(J)J
       9: putstatic     #3                  // Field DEFAULT_INITIAL_EXPIRY_IN_MILLIS:J
      12: getstatic     #40                 // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
      15: ldc2_w        #44                 // long 86400l
      18: invokevirtual #43                 // Method java/util/concurrent/TimeUnit.toMillis:(J)J
      21: putstatic     #4                  // Field DEFAULT_MAX_EXPIRY_IN_MILLIS:J
      24: return
}
