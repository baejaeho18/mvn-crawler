Compiled from "SharedInputBuffer.java"
public class org.apache.http.nio.util.SharedInputBuffer extends org.apache.http.nio.util.ExpandableBuffer implements org.apache.http.nio.util.ContentInputBuffer {
  private final java.util.concurrent.locks.ReentrantLock lock;

  private final java.util.concurrent.locks.Condition condition;

  private volatile org.apache.http.nio.IOControl ioctrl;

  private volatile boolean shutdown;

  private volatile boolean endOfStream;

  public org.apache.http.nio.util.SharedInputBuffer(int, org.apache.http.nio.IOControl, org.apache.http.nio.util.ByteBufferAllocator);
    Code:
       0: aload_0
       1: iload_1
       2: aload_3
       3: invokespecial #1                  // Method org/apache/http/nio/util/ExpandableBuffer."<init>":(ILorg/apache/http/nio/util/ByteBufferAllocator;)V
       6: aload_0
       7: iconst_0
       8: putfield      #2                  // Field shutdown:Z
      11: aload_0
      12: iconst_0
      13: putfield      #3                  // Field endOfStream:Z
      16: aload_0
      17: aload_2
      18: putfield      #4                  // Field ioctrl:Lorg/apache/http/nio/IOControl;
      21: aload_0
      22: new           #5                  // class java/util/concurrent/locks/ReentrantLock
      25: dup
      26: invokespecial #6                  // Method java/util/concurrent/locks/ReentrantLock."<init>":()V
      29: putfield      #7                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      32: aload_0
      33: aload_0
      34: getfield      #7                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      37: invokevirtual #8                  // Method java/util/concurrent/locks/ReentrantLock.newCondition:()Ljava/util/concurrent/locks/Condition;
      40: putfield      #9                  // Field condition:Ljava/util/concurrent/locks/Condition;
      43: return

  public org.apache.http.nio.util.SharedInputBuffer(int, org.apache.http.nio.util.ByteBufferAllocator);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokespecial #1                  // Method org/apache/http/nio/util/ExpandableBuffer."<init>":(ILorg/apache/http/nio/util/ByteBufferAllocator;)V
       6: aload_0
       7: iconst_0
       8: putfield      #2                  // Field shutdown:Z
      11: aload_0
      12: iconst_0
      13: putfield      #3                  // Field endOfStream:Z
      16: aload_0
      17: new           #5                  // class java/util/concurrent/locks/ReentrantLock
      20: dup
      21: invokespecial #6                  // Method java/util/concurrent/locks/ReentrantLock."<init>":()V
      24: putfield      #7                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      27: aload_0
      28: aload_0
      29: getfield      #7                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      32: invokevirtual #8                  // Method java/util/concurrent/locks/ReentrantLock.newCondition:()Ljava/util/concurrent/locks/Condition;
      35: putfield      #9                  // Field condition:Ljava/util/concurrent/locks/Condition;
      38: return

  public org.apache.http.nio.util.SharedInputBuffer(int);
    Code:
       0: aload_0
       1: iload_1
       2: getstatic     #10                 // Field org/apache/http/nio/util/HeapByteBufferAllocator.INSTANCE:Lorg/apache/http/nio/util/HeapByteBufferAllocator;
       5: invokespecial #11                 // Method "<init>":(ILorg/apache/http/nio/util/ByteBufferAllocator;)V
       8: return

  public void reset();
    Code:
       0: aload_0
       1: getfield      #2                  // Field shutdown:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: getfield      #7                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      12: invokevirtual #12                 // Method java/util/concurrent/locks/ReentrantLock.lock:()V
      15: aload_0
      16: invokevirtual #13                 // Method clear:()V
      19: aload_0
      20: iconst_0
      21: putfield      #3                  // Field endOfStream:Z
      24: aload_0
      25: getfield      #7                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      28: invokevirtual #14                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      31: goto          44
      34: astore_1
      35: aload_0
      36: getfield      #7                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      39: invokevirtual #14                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      42: aload_1
      43: athrow
      44: return
    Exception table:
       from    to  target type
          15    24    34   any
          34    35    34   any

  public int consumeContent(org.apache.http.nio.ContentDecoder) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: invokevirtual #15                 // Method consumeContent:(Lorg/apache/http/nio/ContentDecoder;Lorg/apache/http/nio/IOControl;)I
       6: ireturn

  public int consumeContent(org.apache.http.nio.ContentDecoder, org.apache.http.nio.IOControl) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field shutdown:Z
       4: ifeq          9
       7: iconst_m1
       8: ireturn
       9: aload_0
      10: getfield      #7                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      13: invokevirtual #12                 // Method java/util/concurrent/locks/ReentrantLock.lock:()V
      16: aload_2
      17: ifnull        25
      20: aload_0
      21: aload_2
      22: putfield      #4                  // Field ioctrl:Lorg/apache/http/nio/IOControl;
      25: aload_0
      26: invokevirtual #16                 // Method setInputMode:()V
      29: iconst_0
      30: istore_3
      31: aload_1
      32: aload_0
      33: getfield      #17                 // Field buffer:Ljava/nio/ByteBuffer;
      36: invokeinterface #18,  2           // InterfaceMethod org/apache/http/nio/ContentDecoder.read:(Ljava/nio/ByteBuffer;)I
      41: dup
      42: istore        4
      44: ifle          55
      47: iload_3
      48: iload         4
      50: iadd
      51: istore_3
      52: goto          31
      55: iload         4
      57: iconst_m1
      58: if_icmpeq     70
      61: aload_1
      62: invokeinterface #19,  1           // InterfaceMethod org/apache/http/nio/ContentDecoder.isCompleted:()Z
      67: ifeq          75
      70: aload_0
      71: iconst_1
      72: putfield      #3                  // Field endOfStream:Z
      75: aload_0
      76: getfield      #17                 // Field buffer:Ljava/nio/ByteBuffer;
      79: invokevirtual #20                 // Method java/nio/ByteBuffer.hasRemaining:()Z
      82: ifne          101
      85: aload_0
      86: getfield      #4                  // Field ioctrl:Lorg/apache/http/nio/IOControl;
      89: ifnull        101
      92: aload_0
      93: getfield      #4                  // Field ioctrl:Lorg/apache/http/nio/IOControl;
      96: invokeinterface #21,  1           // InterfaceMethod org/apache/http/nio/IOControl.suspendInput:()V
     101: aload_0
     102: getfield      #9                  // Field condition:Ljava/util/concurrent/locks/Condition;
     105: invokeinterface #22,  1           // InterfaceMethod java/util/concurrent/locks/Condition.signalAll:()V
     110: iload_3
     111: ifle          127
     114: iload_3
     115: istore        5
     117: aload_0
     118: getfield      #7                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
     121: invokevirtual #14                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
     124: iload         5
     126: ireturn
     127: aload_0
     128: getfield      #3                  // Field endOfStream:Z
     131: ifeq          147
     134: iconst_m1
     135: istore        5
     137: aload_0
     138: getfield      #7                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
     141: invokevirtual #14                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
     144: iload         5
     146: ireturn
     147: iconst_0
     148: istore        5
     150: aload_0
     151: getfield      #7                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
     154: invokevirtual #14                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
     157: iload         5
     159: ireturn
     160: astore        6
     162: aload_0
     163: getfield      #7                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
     166: invokevirtual #14                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
     169: aload         6
     171: athrow
    Exception table:
       from    to  target type
          16   117   160   any
         127   137   160   any
         147   150   160   any
         160   162   160   any

  public boolean hasData();
    Code:
       0: aload_0
       1: getfield      #7                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
       4: invokevirtual #12                 // Method java/util/concurrent/locks/ReentrantLock.lock:()V
       7: aload_0
       8: invokespecial #23                 // Method org/apache/http/nio/util/ExpandableBuffer.hasData:()Z
      11: istore_1
      12: aload_0
      13: getfield      #7                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      16: invokevirtual #14                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      19: iload_1
      20: ireturn
      21: astore_2
      22: aload_0
      23: getfield      #7                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      26: invokevirtual #14                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      29: aload_2
      30: athrow
    Exception table:
       from    to  target type
           7    12    21   any
          21    22    21   any

  public int available();
    Code:
       0: aload_0
       1: getfield      #7                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
       4: invokevirtual #12                 // Method java/util/concurrent/locks/ReentrantLock.lock:()V
       7: aload_0
       8: invokespecial #24                 // Method org/apache/http/nio/util/ExpandableBuffer.available:()I
      11: istore_1
      12: aload_0
      13: getfield      #7                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      16: invokevirtual #14                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      19: iload_1
      20: ireturn
      21: astore_2
      22: aload_0
      23: getfield      #7                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      26: invokevirtual #14                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      29: aload_2
      30: athrow
    Exception table:
       from    to  target type
           7    12    21   any
          21    22    21   any

  public int capacity();
    Code:
       0: aload_0
       1: getfield      #7                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
       4: invokevirtual #12                 // Method java/util/concurrent/locks/ReentrantLock.lock:()V
       7: aload_0
       8: invokespecial #25                 // Method org/apache/http/nio/util/ExpandableBuffer.capacity:()I
      11: istore_1
      12: aload_0
      13: getfield      #7                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      16: invokevirtual #14                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      19: iload_1
      20: ireturn
      21: astore_2
      22: aload_0
      23: getfield      #7                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      26: invokevirtual #14                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      29: aload_2
      30: athrow
    Exception table:
       from    to  target type
           7    12    21   any
          21    22    21   any

  public int length();
    Code:
       0: aload_0
       1: getfield      #7                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
       4: invokevirtual #12                 // Method java/util/concurrent/locks/ReentrantLock.lock:()V
       7: aload_0
       8: invokespecial #26                 // Method org/apache/http/nio/util/ExpandableBuffer.length:()I
      11: istore_1
      12: aload_0
      13: getfield      #7                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      16: invokevirtual #14                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      19: iload_1
      20: ireturn
      21: astore_2
      22: aload_0
      23: getfield      #7                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      26: invokevirtual #14                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      29: aload_2
      30: athrow
    Exception table:
       from    to  target type
           7    12    21   any
          21    22    21   any

  protected void waitForData() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #7                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
       4: invokevirtual #12                 // Method java/util/concurrent/locks/ReentrantLock.lock:()V
       7: aload_0
       8: invokespecial #23                 // Method org/apache/http/nio/util/ExpandableBuffer.hasData:()Z
      11: ifne          66
      14: aload_0
      15: getfield      #3                  // Field endOfStream:Z
      18: ifne          66
      21: aload_0
      22: getfield      #2                  // Field shutdown:Z
      25: ifeq          38
      28: new           #27                 // class java/io/InterruptedIOException
      31: dup
      32: ldc           #28                 // String Input operation aborted
      34: invokespecial #29                 // Method java/io/InterruptedIOException."<init>":(Ljava/lang/String;)V
      37: athrow
      38: aload_0
      39: getfield      #4                  // Field ioctrl:Lorg/apache/http/nio/IOControl;
      42: ifnull        54
      45: aload_0
      46: getfield      #4                  // Field ioctrl:Lorg/apache/http/nio/IOControl;
      49: invokeinterface #30,  1           // InterfaceMethod org/apache/http/nio/IOControl.requestInput:()V
      54: aload_0
      55: getfield      #9                  // Field condition:Ljava/util/concurrent/locks/Condition;
      58: invokeinterface #31,  1           // InterfaceMethod java/util/concurrent/locks/Condition.await:()V
      63: goto          7
      66: goto          80
      69: astore_1
      70: new           #33                 // class java/io/IOException
      73: dup
      74: ldc           #34                 // String Interrupted while waiting for more data
      76: invokespecial #35                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      79: athrow
      80: aload_0
      81: getfield      #7                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      84: invokevirtual #14                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      87: goto          100
      90: astore_2
      91: aload_0
      92: getfield      #7                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      95: invokevirtual #14                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      98: aload_2
      99: athrow
     100: return
    Exception table:
       from    to  target type
           7    66    69   Class java/lang/InterruptedException
           7    80    90   any
          90    91    90   any

  public void close();
    Code:
       0: aload_0
       1: getfield      #2                  // Field shutdown:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: iconst_1
      10: putfield      #3                  // Field endOfStream:Z
      13: aload_0
      14: getfield      #7                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      17: invokevirtual #12                 // Method java/util/concurrent/locks/ReentrantLock.lock:()V
      20: aload_0
      21: getfield      #9                  // Field condition:Ljava/util/concurrent/locks/Condition;
      24: invokeinterface #22,  1           // InterfaceMethod java/util/concurrent/locks/Condition.signalAll:()V
      29: aload_0
      30: getfield      #7                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      33: invokevirtual #14                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      36: goto          49
      39: astore_1
      40: aload_0
      41: getfield      #7                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      44: invokevirtual #14                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      47: aload_1
      48: athrow
      49: return
    Exception table:
       from    to  target type
          20    29    39   any
          39    40    39   any

  public void shutdown();
    Code:
       0: aload_0
       1: getfield      #2                  // Field shutdown:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: iconst_1
      10: putfield      #2                  // Field shutdown:Z
      13: aload_0
      14: getfield      #7                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      17: invokevirtual #12                 // Method java/util/concurrent/locks/ReentrantLock.lock:()V
      20: aload_0
      21: getfield      #9                  // Field condition:Ljava/util/concurrent/locks/Condition;
      24: invokeinterface #22,  1           // InterfaceMethod java/util/concurrent/locks/Condition.signalAll:()V
      29: aload_0
      30: getfield      #7                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      33: invokevirtual #14                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      36: goto          49
      39: astore_1
      40: aload_0
      41: getfield      #7                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      44: invokevirtual #14                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      47: aload_1
      48: athrow
      49: return
    Exception table:
       from    to  target type
          20    29    39   any
          39    40    39   any

  protected boolean isShutdown();
    Code:
       0: aload_0
       1: getfield      #2                  // Field shutdown:Z
       4: ireturn

  protected boolean isEndOfStream();
    Code:
       0: aload_0
       1: getfield      #2                  // Field shutdown:Z
       4: ifne          21
       7: aload_0
       8: invokevirtual #36                 // Method hasData:()Z
      11: ifne          25
      14: aload_0
      15: getfield      #3                  // Field endOfStream:Z
      18: ifeq          25
      21: iconst_1
      22: goto          26
      25: iconst_0
      26: ireturn

  public int read() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field shutdown:Z
       4: ifeq          9
       7: iconst_m1
       8: ireturn
       9: aload_0
      10: getfield      #7                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      13: invokevirtual #12                 // Method java/util/concurrent/locks/ReentrantLock.lock:()V
      16: aload_0
      17: invokevirtual #36                 // Method hasData:()Z
      20: ifne          27
      23: aload_0
      24: invokevirtual #37                 // Method waitForData:()V
      27: aload_0
      28: invokevirtual #38                 // Method isEndOfStream:()Z
      31: ifeq          45
      34: iconst_m1
      35: istore_1
      36: aload_0
      37: getfield      #7                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      40: invokevirtual #14                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      43: iload_1
      44: ireturn
      45: aload_0
      46: getfield      #17                 // Field buffer:Ljava/nio/ByteBuffer;
      49: invokevirtual #39                 // Method java/nio/ByteBuffer.get:()B
      52: sipush        255
      55: iand
      56: istore_1
      57: aload_0
      58: getfield      #7                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      61: invokevirtual #14                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      64: iload_1
      65: ireturn
      66: astore_2
      67: aload_0
      68: getfield      #7                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      71: invokevirtual #14                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      74: aload_2
      75: athrow
    Exception table:
       from    to  target type
          16    36    66   any
          45    57    66   any
          66    67    66   any

  public int read(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field shutdown:Z
       4: ifeq          9
       7: iconst_m1
       8: ireturn
       9: aload_1
      10: ifnonnull     15
      13: iconst_0
      14: ireturn
      15: aload_0
      16: getfield      #7                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      19: invokevirtual #12                 // Method java/util/concurrent/locks/ReentrantLock.lock:()V
      22: aload_0
      23: invokevirtual #36                 // Method hasData:()Z
      26: ifne          33
      29: aload_0
      30: invokevirtual #37                 // Method waitForData:()V
      33: aload_0
      34: invokevirtual #38                 // Method isEndOfStream:()Z
      37: ifeq          53
      40: iconst_m1
      41: istore        4
      43: aload_0
      44: getfield      #7                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      47: invokevirtual #14                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      50: iload         4
      52: ireturn
      53: aload_0
      54: invokevirtual #40                 // Method setOutputMode:()V
      57: iload_3
      58: istore        4
      60: iload         4
      62: aload_0
      63: getfield      #17                 // Field buffer:Ljava/nio/ByteBuffer;
      66: invokevirtual #41                 // Method java/nio/ByteBuffer.remaining:()I
      69: if_icmple     81
      72: aload_0
      73: getfield      #17                 // Field buffer:Ljava/nio/ByteBuffer;
      76: invokevirtual #41                 // Method java/nio/ByteBuffer.remaining:()I
      79: istore        4
      81: aload_0
      82: getfield      #17                 // Field buffer:Ljava/nio/ByteBuffer;
      85: aload_1
      86: iload_2
      87: iload         4
      89: invokevirtual #42                 // Method java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;
      92: pop
      93: iload         4
      95: istore        5
      97: aload_0
      98: getfield      #7                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
     101: invokevirtual #14                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
     104: iload         5
     106: ireturn
     107: astore        6
     109: aload_0
     110: getfield      #7                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
     113: invokevirtual #14                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
     116: aload         6
     118: athrow
    Exception table:
       from    to  target type
          22    43   107   any
          53    97   107   any
         107   109   107   any

  public int read(byte[]) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field shutdown:Z
       4: ifeq          9
       7: iconst_m1
       8: ireturn
       9: aload_1
      10: ifnonnull     15
      13: iconst_0
      14: ireturn
      15: aload_0
      16: aload_1
      17: iconst_0
      18: aload_1
      19: arraylength
      20: invokevirtual #43                 // Method read:([BII)I
      23: ireturn
}
