Compiled from "ExpandableBuffer.java"
public class org.apache.http.nio.util.ExpandableBuffer implements org.apache.http.io.BufferInfo,org.apache.http.nio.util.BufferInfo {
  public static final int INPUT_MODE;

  public static final int OUTPUT_MODE;

  private final org.apache.http.nio.util.ByteBufferAllocator allocator;

  private int mode;

  protected java.nio.ByteBuffer buffer;

  public org.apache.http.nio.util.ExpandableBuffer(int, org.apache.http.nio.util.ByteBufferAllocator);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aconst_null
       6: putfield      #2                  // Field buffer:Ljava/nio/ByteBuffer;
       9: aload_2
      10: ldc           #3                  // String ByteBuffer allocator
      12: invokestatic  #4                  // Method org/apache/http/util/Args.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      15: pop
      16: aload_0
      17: aload_2
      18: putfield      #5                  // Field allocator:Lorg/apache/http/nio/util/ByteBufferAllocator;
      21: aload_0
      22: aload_2
      23: iload_1
      24: invokeinterface #6,  2            // InterfaceMethod org/apache/http/nio/util/ByteBufferAllocator.allocate:(I)Ljava/nio/ByteBuffer;
      29: putfield      #2                  // Field buffer:Ljava/nio/ByteBuffer;
      32: aload_0
      33: iconst_0
      34: putfield      #7                  // Field mode:I
      37: return

  protected int getMode();
    Code:
       0: aload_0
       1: getfield      #7                  // Field mode:I
       4: ireturn

  protected void setOutputMode();
    Code:
       0: aload_0
       1: getfield      #7                  // Field mode:I
       4: iconst_1
       5: if_icmpeq     21
       8: aload_0
       9: getfield      #2                  // Field buffer:Ljava/nio/ByteBuffer;
      12: invokevirtual #8                  // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;
      15: pop
      16: aload_0
      17: iconst_1
      18: putfield      #7                  // Field mode:I
      21: return

  protected void setInputMode();
    Code:
       0: aload_0
       1: getfield      #7                  // Field mode:I
       4: ifeq          41
       7: aload_0
       8: getfield      #2                  // Field buffer:Ljava/nio/ByteBuffer;
      11: invokevirtual #9                  // Method java/nio/ByteBuffer.hasRemaining:()Z
      14: ifeq          28
      17: aload_0
      18: getfield      #2                  // Field buffer:Ljava/nio/ByteBuffer;
      21: invokevirtual #10                 // Method java/nio/ByteBuffer.compact:()Ljava/nio/ByteBuffer;
      24: pop
      25: goto          36
      28: aload_0
      29: getfield      #2                  // Field buffer:Ljava/nio/ByteBuffer;
      32: invokevirtual #11                 // Method java/nio/ByteBuffer.clear:()Ljava/nio/Buffer;
      35: pop
      36: aload_0
      37: iconst_0
      38: putfield      #7                  // Field mode:I
      41: return

  private void expandCapacity(int);
    Code:
       0: aload_0
       1: getfield      #2                  // Field buffer:Ljava/nio/ByteBuffer;
       4: astore_2
       5: aload_0
       6: aload_0
       7: getfield      #5                  // Field allocator:Lorg/apache/http/nio/util/ByteBufferAllocator;
      10: iload_1
      11: invokeinterface #6,  2            // InterfaceMethod org/apache/http/nio/util/ByteBufferAllocator.allocate:(I)Ljava/nio/ByteBuffer;
      16: putfield      #2                  // Field buffer:Ljava/nio/ByteBuffer;
      19: aload_2
      20: invokevirtual #8                  // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;
      23: pop
      24: aload_0
      25: getfield      #2                  // Field buffer:Ljava/nio/ByteBuffer;
      28: aload_2
      29: invokevirtual #12                 // Method java/nio/ByteBuffer.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;
      32: pop
      33: return

  protected void expand();
    Code:
       0: aload_0
       1: getfield      #2                  // Field buffer:Ljava/nio/ByteBuffer;
       4: invokevirtual #13                 // Method java/nio/ByteBuffer.capacity:()I
       7: iconst_1
       8: iadd
       9: iconst_1
      10: ishl
      11: istore_1
      12: iload_1
      13: ifge          19
      16: ldc           #14                 // int 2147483647
      18: istore_1
      19: aload_0
      20: iload_1
      21: invokespecial #15                 // Method expandCapacity:(I)V
      24: return

  protected void ensureCapacity(int);
    Code:
       0: iload_1
       1: aload_0
       2: getfield      #2                  // Field buffer:Ljava/nio/ByteBuffer;
       5: invokevirtual #13                 // Method java/nio/ByteBuffer.capacity:()I
       8: if_icmple     16
      11: aload_0
      12: iload_1
      13: invokespecial #15                 // Method expandCapacity:(I)V
      16: return

  public int capacity();
    Code:
       0: aload_0
       1: getfield      #2                  // Field buffer:Ljava/nio/ByteBuffer;
       4: invokevirtual #13                 // Method java/nio/ByteBuffer.capacity:()I
       7: ireturn

  public boolean hasData();
    Code:
       0: aload_0
       1: invokevirtual #16                 // Method setOutputMode:()V
       4: aload_0
       5: getfield      #2                  // Field buffer:Ljava/nio/ByteBuffer;
       8: invokevirtual #9                  // Method java/nio/ByteBuffer.hasRemaining:()Z
      11: ireturn

  public int length();
    Code:
       0: aload_0
       1: invokevirtual #16                 // Method setOutputMode:()V
       4: aload_0
       5: getfield      #2                  // Field buffer:Ljava/nio/ByteBuffer;
       8: invokevirtual #17                 // Method java/nio/ByteBuffer.remaining:()I
      11: ireturn

  public int available();
    Code:
       0: aload_0
       1: invokevirtual #18                 // Method setInputMode:()V
       4: aload_0
       5: getfield      #2                  // Field buffer:Ljava/nio/ByteBuffer;
       8: invokevirtual #17                 // Method java/nio/ByteBuffer.remaining:()I
      11: ireturn

  protected void clear();
    Code:
       0: aload_0
       1: getfield      #2                  // Field buffer:Ljava/nio/ByteBuffer;
       4: invokevirtual #11                 // Method java/nio/ByteBuffer.clear:()Ljava/nio/Buffer;
       7: pop
       8: aload_0
       9: iconst_0
      10: putfield      #7                  // Field mode:I
      13: return

  public java.lang.String toString();
    Code:
       0: new           #19                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #20                 // Method java/lang/StringBuilder."<init>":()V
       7: astore_1
       8: aload_1
       9: ldc           #21                 // String [mode=
      11: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      14: pop
      15: aload_0
      16: invokevirtual #23                 // Method getMode:()I
      19: ifne          32
      22: aload_1
      23: ldc           #24                 // String in
      25: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      28: pop
      29: goto          39
      32: aload_1
      33: ldc           #25                 // String out
      35: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      38: pop
      39: aload_1
      40: ldc           #26                 // String  pos=
      42: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      45: pop
      46: aload_1
      47: aload_0
      48: getfield      #2                  // Field buffer:Ljava/nio/ByteBuffer;
      51: invokevirtual #27                 // Method java/nio/ByteBuffer.position:()I
      54: invokevirtual #28                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      57: pop
      58: aload_1
      59: ldc           #29                 // String  lim=
      61: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      64: pop
      65: aload_1
      66: aload_0
      67: getfield      #2                  // Field buffer:Ljava/nio/ByteBuffer;
      70: invokevirtual #30                 // Method java/nio/ByteBuffer.limit:()I
      73: invokevirtual #28                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      76: pop
      77: aload_1
      78: ldc           #31                 // String  cap=
      80: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      83: pop
      84: aload_1
      85: aload_0
      86: getfield      #2                  // Field buffer:Ljava/nio/ByteBuffer;
      89: invokevirtual #13                 // Method java/nio/ByteBuffer.capacity:()I
      92: invokevirtual #28                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      95: pop
      96: aload_1
      97: ldc           #32                 // String ]
      99: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     102: pop
     103: aload_1
     104: invokevirtual #33                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     107: areturn
}
