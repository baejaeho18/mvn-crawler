Compiled from "DefaultConnectionPool.java"
public class org.apache.xalan.lib.sql.DefaultConnectionPool implements org.apache.xalan.lib.sql.ConnectionPool {
  private java.sql.Driver m_Driver;

  private static final boolean DEBUG;

  private java.lang.String m_driver;

  private java.lang.String m_url;

  private int m_PoolMinSize;

  private java.util.Properties m_ConnectionProtocol;

  private java.util.Vector m_pool;

  private boolean m_IsActive;

  public org.apache.xalan.lib.sql.DefaultConnectionPool();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aconst_null
       6: putfield      #2                  // Field m_Driver:Ljava/sql/Driver;
       9: aload_0
      10: new           #3                  // class java/lang/String
      13: dup
      14: ldc           #4                  // String
      16: invokespecial #5                  // Method java/lang/String."<init>":(Ljava/lang/String;)V
      19: putfield      #6                  // Field m_driver:Ljava/lang/String;
      22: aload_0
      23: new           #3                  // class java/lang/String
      26: dup
      27: ldc           #4                  // String
      29: invokespecial #5                  // Method java/lang/String."<init>":(Ljava/lang/String;)V
      32: putfield      #7                  // Field m_url:Ljava/lang/String;
      35: aload_0
      36: iconst_1
      37: putfield      #8                  // Field m_PoolMinSize:I
      40: aload_0
      41: new           #9                  // class java/util/Properties
      44: dup
      45: invokespecial #10                 // Method java/util/Properties."<init>":()V
      48: putfield      #11                 // Field m_ConnectionProtocol:Ljava/util/Properties;
      51: aload_0
      52: new           #12                 // class java/util/Vector
      55: dup
      56: invokespecial #13                 // Method java/util/Vector."<init>":()V
      59: putfield      #14                 // Field m_pool:Ljava/util/Vector;
      62: aload_0
      63: iconst_0
      64: putfield      #15                 // Field m_IsActive:Z
      67: return

  public boolean isEnabled();
    Code:
       0: aload_0
       1: getfield      #15                 // Field m_IsActive:Z
       4: ireturn

  public void setDriver(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #6                  // Field m_driver:Ljava/lang/String;
       5: return

  public void setURL(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #7                  // Field m_url:Ljava/lang/String;
       5: return

  public void freeUnused();
    Code:
       0: aload_0
       1: getfield      #14                 // Field m_pool:Ljava/util/Vector;
       4: invokevirtual #16                 // Method java/util/AbstractList.iterator:()Ljava/util/Iterator;
       7: astore_1
       8: goto          38
      11: aload_1
      12: invokeinterface #17,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      17: checkcast     #18                 // class org/apache/xalan/lib/sql/PooledConnection
      20: astore_2
      21: aload_2
      22: invokevirtual #19                 // Method org/apache/xalan/lib/sql/PooledConnection.inUse:()Z
      25: ifne          38
      28: aload_2
      29: invokevirtual #20                 // Method org/apache/xalan/lib/sql/PooledConnection.close:()V
      32: aload_1
      33: invokeinterface #21,  1           // InterfaceMethod java/util/Iterator.remove:()V
      38: aload_1
      39: invokeinterface #22,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      44: ifne          11
      47: return

  public boolean hasActiveConnections();
    Code:
       0: aload_0
       1: getfield      #14                 // Field m_pool:Ljava/util/Vector;
       4: invokevirtual #23                 // Method java/util/Vector.size:()I
       7: ifle          14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  public void setPassword(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #11                 // Field m_ConnectionProtocol:Ljava/util/Properties;
       4: ldc           #24                 // String password
       6: aload_1
       7: invokevirtual #25                 // Method java/util/Hashtable.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      10: pop
      11: return

  public void setUser(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #11                 // Field m_ConnectionProtocol:Ljava/util/Properties;
       4: ldc           #26                 // String user
       6: aload_1
       7: invokevirtual #25                 // Method java/util/Hashtable.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      10: pop
      11: return

  public void setProtocol(java.util.Properties);
    Code:
       0: aload_1
       1: invokevirtual #27                 // Method java/util/Hashtable.keys:()Ljava/util/Enumeration;
       4: astore_2
       5: goto          32
       8: aload_2
       9: invokeinterface #28,  1           // InterfaceMethod java/util/Enumeration.nextElement:()Ljava/lang/Object;
      14: checkcast     #3                  // class java/lang/String
      17: astore_3
      18: aload_0
      19: getfield      #11                 // Field m_ConnectionProtocol:Ljava/util/Properties;
      22: aload_3
      23: aload_1
      24: aload_3
      25: invokevirtual #29                 // Method java/util/Properties.getProperty:(Ljava/lang/String;)Ljava/lang/String;
      28: invokevirtual #25                 // Method java/util/Hashtable.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      31: pop
      32: aload_2
      33: invokeinterface #30,  1           // InterfaceMethod java/util/Enumeration.hasMoreElements:()Z
      38: ifne          8
      41: return

  public void setMinConnections(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #8                  // Field m_PoolMinSize:I
       5: return

  public boolean testConnection();
    Code:
       0: aload_0
       1: invokevirtual #31                 // Method getConnection:()Ljava/sql/Connection;
       4: astore_1
       5: aload_1
       6: ifnonnull     11
       9: iconst_0
      10: ireturn
      11: aload_0
      12: aload_1
      13: invokevirtual #32                 // Method releaseConnection:(Ljava/sql/Connection;)V
      16: iconst_1
      17: ireturn
      18: astore_1
      19: iconst_0
      20: ireturn
    Exception table:
       from    to  target type
           0    18    18   Class java/lang/Exception

  public synchronized java.sql.Connection getConnection() throws java.lang.IllegalArgumentException, java.sql.SQLException;
    Code:
       0: aconst_null
       1: astore_1
       2: aload_0
       3: getfield      #14                 // Field m_pool:Ljava/util/Vector;
       6: invokevirtual #23                 // Method java/util/Vector.size:()I
       9: aload_0
      10: getfield      #8                  // Field m_PoolMinSize:I
      13: if_icmpge     20
      16: aload_0
      17: invokevirtual #34                 // Method initializePool:()V
      20: iconst_0
      21: istore_2
      22: goto          57
      25: aload_0
      26: getfield      #14                 // Field m_pool:Ljava/util/Vector;
      29: iload_2
      30: invokevirtual #35                 // Method java/util/Vector.elementAt:(I)Ljava/lang/Object;
      33: checkcast     #18                 // class org/apache/xalan/lib/sql/PooledConnection
      36: astore_1
      37: aload_1
      38: invokevirtual #19                 // Method org/apache/xalan/lib/sql/PooledConnection.inUse:()Z
      41: ifne          54
      44: aload_1
      45: iconst_1
      46: invokevirtual #36                 // Method org/apache/xalan/lib/sql/PooledConnection.setInUse:(Z)V
      49: aload_1
      50: invokevirtual #37                 // Method org/apache/xalan/lib/sql/PooledConnection.getConnection:()Ljava/sql/Connection;
      53: areturn
      54: iinc          2, 1
      57: iload_2
      58: aload_0
      59: getfield      #14                 // Field m_pool:Ljava/util/Vector;
      62: invokevirtual #23                 // Method java/util/Vector.size:()I
      65: if_icmplt     25
      68: aload_0
      69: invokespecial #38                 // Method createConnection:()Ljava/sql/Connection;
      72: astore_3
      73: new           #18                 // class org/apache/xalan/lib/sql/PooledConnection
      76: dup
      77: aload_3
      78: invokespecial #39                 // Method org/apache/xalan/lib/sql/PooledConnection."<init>":(Ljava/sql/Connection;)V
      81: astore_1
      82: aload_1
      83: iconst_1
      84: invokevirtual #36                 // Method org/apache/xalan/lib/sql/PooledConnection.setInUse:(Z)V
      87: aload_0
      88: getfield      #14                 // Field m_pool:Ljava/util/Vector;
      91: aload_1
      92: invokevirtual #40                 // Method java/util/Vector.addElement:(Ljava/lang/Object;)V
      95: aload_1
      96: invokevirtual #37                 // Method org/apache/xalan/lib/sql/PooledConnection.getConnection:()Ljava/sql/Connection;
      99: areturn

  public synchronized void releaseConnection(java.sql.Connection) throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: istore_2
       2: goto          60
       5: aload_0
       6: getfield      #14                 // Field m_pool:Ljava/util/Vector;
       9: iload_2
      10: invokevirtual #35                 // Method java/util/Vector.elementAt:(I)Ljava/lang/Object;
      13: checkcast     #18                 // class org/apache/xalan/lib/sql/PooledConnection
      16: astore_3
      17: aload_3
      18: invokevirtual #37                 // Method org/apache/xalan/lib/sql/PooledConnection.getConnection:()Ljava/sql/Connection;
      21: aload_1
      22: if_acmpne     57
      25: aload_0
      26: invokevirtual #41                 // Method isEnabled:()Z
      29: ifne          49
      32: aload_1
      33: invokeinterface #42,  1           // InterfaceMethod java/sql/Connection.close:()V
      38: aload_0
      39: getfield      #14                 // Field m_pool:Ljava/util/Vector;
      42: iload_2
      43: invokevirtual #43                 // Method java/util/Vector.removeElementAt:(I)V
      46: goto          71
      49: aload_3
      50: iconst_0
      51: invokevirtual #36                 // Method org/apache/xalan/lib/sql/PooledConnection.setInUse:(Z)V
      54: goto          71
      57: iinc          2, 1
      60: iload_2
      61: aload_0
      62: getfield      #14                 // Field m_pool:Ljava/util/Vector;
      65: invokevirtual #23                 // Method java/util/Vector.size:()I
      68: if_icmplt     5
      71: return

  public synchronized void releaseConnectionOnError(java.sql.Connection) throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: istore_2
       2: goto          45
       5: aload_0
       6: getfield      #14                 // Field m_pool:Ljava/util/Vector;
       9: iload_2
      10: invokevirtual #35                 // Method java/util/Vector.elementAt:(I)Ljava/lang/Object;
      13: checkcast     #18                 // class org/apache/xalan/lib/sql/PooledConnection
      16: astore_3
      17: aload_3
      18: invokevirtual #37                 // Method org/apache/xalan/lib/sql/PooledConnection.getConnection:()Ljava/sql/Connection;
      21: aload_1
      22: if_acmpne     42
      25: aload_1
      26: invokeinterface #42,  1           // InterfaceMethod java/sql/Connection.close:()V
      31: aload_0
      32: getfield      #14                 // Field m_pool:Ljava/util/Vector;
      35: iload_2
      36: invokevirtual #43                 // Method java/util/Vector.removeElementAt:(I)V
      39: goto          56
      42: iinc          2, 1
      45: iload_2
      46: aload_0
      47: getfield      #14                 // Field m_pool:Ljava/util/Vector;
      50: invokevirtual #23                 // Method java/util/Vector.size:()I
      53: if_icmplt     5
      56: return

  private java.sql.Connection createConnection() throws java.sql.SQLException;
    Code:
       0: aconst_null
       1: astore_1
       2: aload_0
       3: getfield      #2                  // Field m_Driver:Ljava/sql/Driver;
       6: aload_0
       7: getfield      #7                  // Field m_url:Ljava/lang/String;
      10: aload_0
      11: getfield      #11                 // Field m_ConnectionProtocol:Ljava/util/Properties;
      14: invokeinterface #44,  3           // InterfaceMethod java/sql/Driver.connect:(Ljava/lang/String;Ljava/util/Properties;)Ljava/sql/Connection;
      19: astore_1
      20: aload_1
      21: areturn

  public synchronized void initializePool() throws java.lang.IllegalArgumentException, java.sql.SQLException;
    Code:
       0: aload_0
       1: getfield      #6                  // Field m_driver:Ljava/lang/String;
       4: ifnonnull     21
       7: new           #45                 // class java/lang/IllegalArgumentException
      10: dup
      11: ldc           #46                 // String ER_NO_DRIVER_NAME_SPECIFIED
      13: aconst_null
      14: invokestatic  #47                 // Method org/apache/xalan/res/XSLMessages.createMessage:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      17: invokespecial #48                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      20: athrow
      21: aload_0
      22: getfield      #7                  // Field m_url:Ljava/lang/String;
      25: ifnonnull     42
      28: new           #45                 // class java/lang/IllegalArgumentException
      31: dup
      32: ldc           #49                 // String ER_NO_URL_SPECIFIED
      34: aconst_null
      35: invokestatic  #47                 // Method org/apache/xalan/res/XSLMessages.createMessage:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      38: invokespecial #48                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      41: athrow
      42: aload_0
      43: getfield      #8                  // Field m_PoolMinSize:I
      46: iconst_1
      47: if_icmpge     64
      50: new           #45                 // class java/lang/IllegalArgumentException
      53: dup
      54: ldc           #50                 // String ER_POOLSIZE_LESS_THAN_ONE
      56: aconst_null
      57: invokestatic  #47                 // Method org/apache/xalan/res/XSLMessages.createMessage:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      60: invokespecial #48                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      63: athrow
      64: aload_0
      65: aload_0
      66: getfield      #6                  // Field m_driver:Ljava/lang/String;
      69: invokestatic  #51                 // Method org/apache/xalan/lib/sql/ObjectFactory.findClassLoader:()Ljava/lang/ClassLoader;
      72: iconst_1
      73: invokestatic  #52                 // Method org/apache/xalan/lib/sql/ObjectFactory.newInstance:(Ljava/lang/String;Ljava/lang/ClassLoader;Z)Ljava/lang/Object;
      76: checkcast     #53                 // class java/sql/Driver
      79: putfield      #2                  // Field m_Driver:Ljava/sql/Driver;
      82: aload_0
      83: getfield      #2                  // Field m_Driver:Ljava/sql/Driver;
      86: invokestatic  #54                 // Method java/sql/DriverManager.registerDriver:(Ljava/sql/Driver;)V
      89: goto          122
      92: astore_1
      93: new           #45                 // class java/lang/IllegalArgumentException
      96: dup
      97: ldc           #56                 // String ER_INVALID_DRIVER_NAME
      99: aconst_null
     100: invokestatic  #47                 // Method org/apache/xalan/res/XSLMessages.createMessage:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
     103: invokespecial #48                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     106: athrow
     107: astore_2
     108: new           #45                 // class java/lang/IllegalArgumentException
     111: dup
     112: ldc           #56                 // String ER_INVALID_DRIVER_NAME
     114: aconst_null
     115: invokestatic  #47                 // Method org/apache/xalan/res/XSLMessages.createMessage:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
     118: invokespecial #48                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     121: athrow
     122: aload_0
     123: getfield      #15                 // Field m_IsActive:Z
     126: ifne          130
     129: return
     130: aload_0
     131: invokespecial #38                 // Method createConnection:()Ljava/sql/Connection;
     134: astore_1
     135: aload_1
     136: ifnull        153
     139: new           #18                 // class org/apache/xalan/lib/sql/PooledConnection
     142: dup
     143: aload_1
     144: invokespecial #39                 // Method org/apache/xalan/lib/sql/PooledConnection."<init>":(Ljava/sql/Connection;)V
     147: astore_2
     148: aload_0
     149: aload_2
     150: invokespecial #57                 // Method addConnection:(Lorg/apache/xalan/lib/sql/PooledConnection;)V
     153: aload_0
     154: getfield      #14                 // Field m_pool:Ljava/util/Vector;
     157: invokevirtual #23                 // Method java/util/Vector.size:()I
     160: aload_0
     161: getfield      #8                  // Field m_PoolMinSize:I
     164: if_icmplt     130
     167: return
    Exception table:
       from    to  target type
          64    89    92   Class org/apache/xalan/lib/sql/ObjectFactory$ConfigurationError
          64    89   107   Class java/lang/Exception

  private void addConnection(org.apache.xalan.lib.sql.PooledConnection);
    Code:
       0: aload_0
       1: getfield      #14                 // Field m_pool:Ljava/util/Vector;
       4: aload_1
       5: invokevirtual #40                 // Method java/util/Vector.addElement:(Ljava/lang/Object;)V
       8: return

  protected void finalize() throws java.lang.Throwable;
    Code:
       0: iconst_0
       1: istore_1
       2: goto          48
       5: aload_0
       6: getfield      #14                 // Field m_pool:Ljava/util/Vector;
       9: iload_1
      10: invokevirtual #35                 // Method java/util/Vector.elementAt:(I)Ljava/lang/Object;
      13: checkcast     #18                 // class org/apache/xalan/lib/sql/PooledConnection
      16: astore_2
      17: aload_2
      18: invokevirtual #19                 // Method org/apache/xalan/lib/sql/PooledConnection.inUse:()Z
      21: ifne          31
      24: aload_2
      25: invokevirtual #20                 // Method org/apache/xalan/lib/sql/PooledConnection.close:()V
      28: goto          45
      31: ldc2_w        #58                 // long 30000l
      34: invokestatic  #60                 // Method java/lang/Thread.sleep:(J)V
      37: aload_2
      38: invokevirtual #20                 // Method org/apache/xalan/lib/sql/PooledConnection.close:()V
      41: goto          45
      44: astore_3
      45: iinc          1, 1
      48: iload_1
      49: aload_0
      50: getfield      #14                 // Field m_pool:Ljava/util/Vector;
      53: invokevirtual #23                 // Method java/util/Vector.size:()I
      56: if_icmplt     5
      59: aload_0
      60: invokespecial #62                 // Method java/lang/Object.finalize:()V
      63: return
    Exception table:
       from    to  target type
          31    41    44   Class java/lang/InterruptedException

  public void setPoolEnabled(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #15                 // Field m_IsActive:Z
       5: iload_1
       6: ifne          13
       9: aload_0
      10: invokevirtual #63                 // Method freeUnused:()V
      13: return
}
