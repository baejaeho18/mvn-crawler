Compiled from "Stylesheet.java"
public class org.apache.xalan.templates.Stylesheet extends org.apache.xalan.templates.ElemTemplateElement implements java.io.Serializable {
  static final long serialVersionUID;

  public static final java.lang.String STYLESHEET_EXT;

  private java.lang.String m_XmlnsXsl;

  private org.apache.xml.utils.StringVector m_ExtensionElementURIs;

  private org.apache.xml.utils.StringVector m_ExcludeResultPrefixs;

  private java.lang.String m_Id;

  private java.lang.String m_Version;

  private boolean m_isCompatibleMode;

  private java.util.Vector m_imports;

  private java.util.Vector m_includes;

  java.util.Stack m_DecimalFormatDeclarations;

  private java.util.Vector m_whitespaceStrippingElements;

  private java.util.Vector m_whitespacePreservingElements;

  private java.util.Vector m_output;

  private java.util.Vector m_keyDeclarations;

  private java.util.Vector m_attributeSets;

  private java.util.Vector m_topLevelVariables;

  private java.util.Vector m_templates;

  private java.util.Vector m_prefix_aliases;

  private java.util.Hashtable m_NonXslTopLevel;

  private java.lang.String m_href;

  private java.lang.String m_publicId;

  private java.lang.String m_systemId;

  private org.apache.xalan.templates.StylesheetRoot m_stylesheetRoot;

  private org.apache.xalan.templates.Stylesheet m_stylesheetParent;

  public org.apache.xalan.templates.Stylesheet(org.apache.xalan.templates.Stylesheet);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/apache/xalan/templates/ElemTemplateElement."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field m_isCompatibleMode:Z
       9: aload_0
      10: aconst_null
      11: putfield      #3                  // Field m_href:Ljava/lang/String;
      14: aconst_null
      15: aload_1
      16: if_acmpeq     32
      19: aload_0
      20: aload_1
      21: putfield      #4                  // Field m_stylesheetParent:Lorg/apache/xalan/templates/Stylesheet;
      24: aload_0
      25: aload_1
      26: invokevirtual #5                  // Method getStylesheetRoot:()Lorg/apache/xalan/templates/StylesheetRoot;
      29: putfield      #6                  // Field m_stylesheetRoot:Lorg/apache/xalan/templates/StylesheetRoot;
      32: return

  public org.apache.xalan.templates.Stylesheet getStylesheet();
    Code:
       0: aload_0
       1: areturn

  public boolean isAggregatedType();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isRoot();
    Code:
       0: iconst_0
       1: ireturn

  private void readObject(java.io.ObjectInputStream) throws java.io.IOException, javax.xml.transform.TransformerException;
    Code:
       0: aload_1
       1: invokevirtual #7                  // Method java/io/ObjectInputStream.defaultReadObject:()V
       4: goto          17
       7: astore_2
       8: new           #9                  // class javax/xml/transform/TransformerException
      11: dup
      12: aload_2
      13: invokespecial #10                 // Method javax/xml/transform/TransformerException."<init>":(Ljava/lang/Throwable;)V
      16: athrow
      17: return
    Exception table:
       from    to  target type
           0     4     7   Class java/lang/ClassNotFoundException

  private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokevirtual #11                 // Method java/io/ObjectOutputStream.defaultWriteObject:()V
       4: return

  public void setXmlnsXsl(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #12                 // Field m_XmlnsXsl:Ljava/lang/String;
       5: return

  public java.lang.String getXmlnsXsl();
    Code:
       0: aload_0
       1: getfield      #12                 // Field m_XmlnsXsl:Ljava/lang/String;
       4: areturn

  public void setExtensionElementPrefixes(org.apache.xml.utils.StringVector);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #13                 // Field m_ExtensionElementURIs:Lorg/apache/xml/utils/StringVector;
       5: return

  public java.lang.String getExtensionElementPrefix(int) throws java.lang.ArrayIndexOutOfBoundsException;
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #13                 // Field m_ExtensionElementURIs:Lorg/apache/xml/utils/StringVector;
       5: if_acmpne     16
       8: new           #14                 // class java/lang/ArrayIndexOutOfBoundsException
      11: dup
      12: invokespecial #15                 // Method java/lang/ArrayIndexOutOfBoundsException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #13                 // Field m_ExtensionElementURIs:Lorg/apache/xml/utils/StringVector;
      20: iload_1
      21: invokevirtual #16                 // Method org/apache/xml/utils/StringVector.elementAt:(I)Ljava/lang/String;
      24: areturn

  public int getExtensionElementPrefixCount();
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #13                 // Field m_ExtensionElementURIs:Lorg/apache/xml/utils/StringVector;
       5: if_acmpeq     18
       8: aload_0
       9: getfield      #13                 // Field m_ExtensionElementURIs:Lorg/apache/xml/utils/StringVector;
      12: invokevirtual #17                 // Method org/apache/xml/utils/StringVector.size:()I
      15: goto          19
      18: iconst_0
      19: ireturn

  public boolean containsExtensionElementURI(java.lang.String);
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #13                 // Field m_ExtensionElementURIs:Lorg/apache/xml/utils/StringVector;
       5: if_acmpne     10
       8: iconst_0
       9: ireturn
      10: aload_0
      11: getfield      #13                 // Field m_ExtensionElementURIs:Lorg/apache/xml/utils/StringVector;
      14: aload_1
      15: invokevirtual #18                 // Method org/apache/xml/utils/StringVector.contains:(Ljava/lang/String;)Z
      18: ireturn

  public void setExcludeResultPrefixes(org.apache.xml.utils.StringVector);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #19                 // Field m_ExcludeResultPrefixs:Lorg/apache/xml/utils/StringVector;
       5: return

  public java.lang.String getExcludeResultPrefix(int) throws java.lang.ArrayIndexOutOfBoundsException;
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #19                 // Field m_ExcludeResultPrefixs:Lorg/apache/xml/utils/StringVector;
       5: if_acmpne     16
       8: new           #14                 // class java/lang/ArrayIndexOutOfBoundsException
      11: dup
      12: invokespecial #15                 // Method java/lang/ArrayIndexOutOfBoundsException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #19                 // Field m_ExcludeResultPrefixs:Lorg/apache/xml/utils/StringVector;
      20: iload_1
      21: invokevirtual #16                 // Method org/apache/xml/utils/StringVector.elementAt:(I)Ljava/lang/String;
      24: areturn

  public int getExcludeResultPrefixCount();
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #19                 // Field m_ExcludeResultPrefixs:Lorg/apache/xml/utils/StringVector;
       5: if_acmpeq     18
       8: aload_0
       9: getfield      #19                 // Field m_ExcludeResultPrefixs:Lorg/apache/xml/utils/StringVector;
      12: invokevirtual #17                 // Method org/apache/xml/utils/StringVector.size:()I
      15: goto          19
      18: iconst_0
      19: ireturn

  public boolean containsExcludeResultPrefix(java.lang.String, java.lang.String);
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #19                 // Field m_ExcludeResultPrefixs:Lorg/apache/xml/utils/StringVector;
       5: if_acmpeq     12
       8: aload_2
       9: ifnonnull     14
      12: iconst_0
      13: ireturn
      14: iconst_0
      15: istore_3
      16: goto          43
      19: aload_2
      20: aload_0
      21: aload_0
      22: getfield      #19                 // Field m_ExcludeResultPrefixs:Lorg/apache/xml/utils/StringVector;
      25: iload_3
      26: invokevirtual #16                 // Method org/apache/xml/utils/StringVector.elementAt:(I)Ljava/lang/String;
      29: invokevirtual #20                 // Method org/apache/xalan/templates/ElemTemplateElement.getNamespaceForPrefix:(Ljava/lang/String;)Ljava/lang/String;
      32: invokevirtual #21                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      35: ifeq          40
      38: iconst_1
      39: ireturn
      40: iinc          3, 1
      43: iload_3
      44: aload_0
      45: getfield      #19                 // Field m_ExcludeResultPrefixs:Lorg/apache/xml/utils/StringVector;
      48: invokevirtual #17                 // Method org/apache/xml/utils/StringVector.size:()I
      51: if_icmplt     19
      54: iconst_0
      55: ireturn

  public void setId(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #22                 // Field m_Id:Ljava/lang/String;
       5: return

  public java.lang.String getId();
    Code:
       0: aload_0
       1: getfield      #22                 // Field m_Id:Ljava/lang/String;
       4: areturn

  public void setVersion(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #23                 // Field m_Version:Ljava/lang/String;
       5: aload_0
       6: aload_1
       7: invokestatic  #24                 // Method java/lang/Double.valueOf:(Ljava/lang/String;)Ljava/lang/Double;
      10: invokevirtual #25                 // Method java/lang/Double.doubleValue:()D
      13: dconst_1
      14: dcmpl
      15: ifle          22
      18: iconst_1
      19: goto          23
      22: iconst_0
      23: putfield      #2                  // Field m_isCompatibleMode:Z
      26: return

  public boolean getCompatibleMode();
    Code:
       0: aload_0
       1: getfield      #2                  // Field m_isCompatibleMode:Z
       4: ireturn

  public java.lang.String getVersion();
    Code:
       0: aload_0
       1: getfield      #23                 // Field m_Version:Ljava/lang/String;
       4: areturn

  public void setImport(org.apache.xalan.templates.StylesheetComposed);
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #26                 // Field m_imports:Ljava/util/Vector;
       5: if_acmpne     19
       8: aload_0
       9: new           #27                 // class java/util/Vector
      12: dup
      13: invokespecial #28                 // Method java/util/Vector."<init>":()V
      16: putfield      #26                 // Field m_imports:Ljava/util/Vector;
      19: aload_0
      20: getfield      #26                 // Field m_imports:Ljava/util/Vector;
      23: aload_1
      24: invokevirtual #29                 // Method java/util/Vector.addElement:(Ljava/lang/Object;)V
      27: return

  public org.apache.xalan.templates.StylesheetComposed getImport(int) throws java.lang.ArrayIndexOutOfBoundsException;
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #26                 // Field m_imports:Ljava/util/Vector;
       5: if_acmpne     16
       8: new           #14                 // class java/lang/ArrayIndexOutOfBoundsException
      11: dup
      12: invokespecial #15                 // Method java/lang/ArrayIndexOutOfBoundsException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #26                 // Field m_imports:Ljava/util/Vector;
      20: iload_1
      21: invokevirtual #30                 // Method java/util/Vector.elementAt:(I)Ljava/lang/Object;
      24: checkcast     #31                 // class org/apache/xalan/templates/StylesheetComposed
      27: areturn

  public int getImportCount();
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #26                 // Field m_imports:Ljava/util/Vector;
       5: if_acmpeq     18
       8: aload_0
       9: getfield      #26                 // Field m_imports:Ljava/util/Vector;
      12: invokevirtual #32                 // Method java/util/Vector.size:()I
      15: goto          19
      18: iconst_0
      19: ireturn

  public void setInclude(org.apache.xalan.templates.Stylesheet);
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #33                 // Field m_includes:Ljava/util/Vector;
       5: if_acmpne     19
       8: aload_0
       9: new           #27                 // class java/util/Vector
      12: dup
      13: invokespecial #28                 // Method java/util/Vector."<init>":()V
      16: putfield      #33                 // Field m_includes:Ljava/util/Vector;
      19: aload_0
      20: getfield      #33                 // Field m_includes:Ljava/util/Vector;
      23: aload_1
      24: invokevirtual #29                 // Method java/util/Vector.addElement:(Ljava/lang/Object;)V
      27: return

  public org.apache.xalan.templates.Stylesheet getInclude(int) throws java.lang.ArrayIndexOutOfBoundsException;
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #33                 // Field m_includes:Ljava/util/Vector;
       5: if_acmpne     16
       8: new           #14                 // class java/lang/ArrayIndexOutOfBoundsException
      11: dup
      12: invokespecial #15                 // Method java/lang/ArrayIndexOutOfBoundsException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #33                 // Field m_includes:Ljava/util/Vector;
      20: iload_1
      21: invokevirtual #30                 // Method java/util/Vector.elementAt:(I)Ljava/lang/Object;
      24: checkcast     #34                 // class org/apache/xalan/templates/Stylesheet
      27: areturn

  public int getIncludeCount();
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #33                 // Field m_includes:Ljava/util/Vector;
       5: if_acmpeq     18
       8: aload_0
       9: getfield      #33                 // Field m_includes:Ljava/util/Vector;
      12: invokevirtual #32                 // Method java/util/Vector.size:()I
      15: goto          19
      18: iconst_0
      19: ireturn

  public void setDecimalFormat(org.apache.xalan.templates.DecimalFormatProperties);
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #35                 // Field m_DecimalFormatDeclarations:Ljava/util/Stack;
       5: if_acmpne     19
       8: aload_0
       9: new           #36                 // class java/util/Stack
      12: dup
      13: invokespecial #37                 // Method java/util/Stack."<init>":()V
      16: putfield      #35                 // Field m_DecimalFormatDeclarations:Ljava/util/Stack;
      19: aload_0
      20: getfield      #35                 // Field m_DecimalFormatDeclarations:Ljava/util/Stack;
      23: aload_1
      24: invokevirtual #38                 // Method java/util/Stack.push:(Ljava/lang/Object;)Ljava/lang/Object;
      27: pop
      28: return

  public org.apache.xalan.templates.DecimalFormatProperties getDecimalFormat(org.apache.xml.utils.QName);
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #35                 // Field m_DecimalFormatDeclarations:Ljava/util/Stack;
       5: if_acmpne     10
       8: aconst_null
       9: areturn
      10: aload_0
      11: invokevirtual #39                 // Method getDecimalFormatCount:()I
      14: istore_2
      15: iload_2
      16: iconst_1
      17: isub
      18: istore_3
      19: goto          47
      22: aload_0
      23: iload_3
      24: invokevirtual #40                 // Method getDecimalFormat:(I)Lorg/apache/xalan/templates/DecimalFormatProperties;
      27: astore        4
      29: aload         4
      31: invokevirtual #41                 // Method org/apache/xalan/templates/DecimalFormatProperties.getName:()Lorg/apache/xml/utils/QName;
      34: aload_1
      35: invokevirtual #42                 // Method org/apache/xml/utils/QName.equals:(Ljava/lang/Object;)Z
      38: ifeq          44
      41: aload         4
      43: areturn
      44: iinc          3, 1
      47: iload_3
      48: ifge          22
      51: aconst_null
      52: areturn

  public org.apache.xalan.templates.DecimalFormatProperties getDecimalFormat(int) throws java.lang.ArrayIndexOutOfBoundsException;
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #35                 // Field m_DecimalFormatDeclarations:Ljava/util/Stack;
       5: if_acmpne     16
       8: new           #14                 // class java/lang/ArrayIndexOutOfBoundsException
      11: dup
      12: invokespecial #15                 // Method java/lang/ArrayIndexOutOfBoundsException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #35                 // Field m_DecimalFormatDeclarations:Ljava/util/Stack;
      20: iload_1
      21: invokevirtual #30                 // Method java/util/Vector.elementAt:(I)Ljava/lang/Object;
      24: checkcast     #43                 // class org/apache/xalan/templates/DecimalFormatProperties
      27: areturn

  public int getDecimalFormatCount();
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #35                 // Field m_DecimalFormatDeclarations:Ljava/util/Stack;
       5: if_acmpeq     18
       8: aload_0
       9: getfield      #35                 // Field m_DecimalFormatDeclarations:Ljava/util/Stack;
      12: invokevirtual #32                 // Method java/util/Vector.size:()I
      15: goto          19
      18: iconst_0
      19: ireturn

  public void setStripSpaces(org.apache.xalan.templates.WhiteSpaceInfo);
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #44                 // Field m_whitespaceStrippingElements:Ljava/util/Vector;
       5: if_acmpne     19
       8: aload_0
       9: new           #27                 // class java/util/Vector
      12: dup
      13: invokespecial #28                 // Method java/util/Vector."<init>":()V
      16: putfield      #44                 // Field m_whitespaceStrippingElements:Ljava/util/Vector;
      19: aload_0
      20: getfield      #44                 // Field m_whitespaceStrippingElements:Ljava/util/Vector;
      23: aload_1
      24: invokevirtual #29                 // Method java/util/Vector.addElement:(Ljava/lang/Object;)V
      27: return

  public org.apache.xalan.templates.WhiteSpaceInfo getStripSpace(int) throws java.lang.ArrayIndexOutOfBoundsException;
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #44                 // Field m_whitespaceStrippingElements:Ljava/util/Vector;
       5: if_acmpne     16
       8: new           #14                 // class java/lang/ArrayIndexOutOfBoundsException
      11: dup
      12: invokespecial #15                 // Method java/lang/ArrayIndexOutOfBoundsException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #44                 // Field m_whitespaceStrippingElements:Ljava/util/Vector;
      20: iload_1
      21: invokevirtual #30                 // Method java/util/Vector.elementAt:(I)Ljava/lang/Object;
      24: checkcast     #45                 // class org/apache/xalan/templates/WhiteSpaceInfo
      27: areturn

  public int getStripSpaceCount();
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #44                 // Field m_whitespaceStrippingElements:Ljava/util/Vector;
       5: if_acmpeq     18
       8: aload_0
       9: getfield      #44                 // Field m_whitespaceStrippingElements:Ljava/util/Vector;
      12: invokevirtual #32                 // Method java/util/Vector.size:()I
      15: goto          19
      18: iconst_0
      19: ireturn

  public void setPreserveSpaces(org.apache.xalan.templates.WhiteSpaceInfo);
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #46                 // Field m_whitespacePreservingElements:Ljava/util/Vector;
       5: if_acmpne     19
       8: aload_0
       9: new           #27                 // class java/util/Vector
      12: dup
      13: invokespecial #28                 // Method java/util/Vector."<init>":()V
      16: putfield      #46                 // Field m_whitespacePreservingElements:Ljava/util/Vector;
      19: aload_0
      20: getfield      #46                 // Field m_whitespacePreservingElements:Ljava/util/Vector;
      23: aload_1
      24: invokevirtual #29                 // Method java/util/Vector.addElement:(Ljava/lang/Object;)V
      27: return

  public org.apache.xalan.templates.WhiteSpaceInfo getPreserveSpace(int) throws java.lang.ArrayIndexOutOfBoundsException;
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #46                 // Field m_whitespacePreservingElements:Ljava/util/Vector;
       5: if_acmpne     16
       8: new           #14                 // class java/lang/ArrayIndexOutOfBoundsException
      11: dup
      12: invokespecial #15                 // Method java/lang/ArrayIndexOutOfBoundsException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #46                 // Field m_whitespacePreservingElements:Ljava/util/Vector;
      20: iload_1
      21: invokevirtual #30                 // Method java/util/Vector.elementAt:(I)Ljava/lang/Object;
      24: checkcast     #45                 // class org/apache/xalan/templates/WhiteSpaceInfo
      27: areturn

  public int getPreserveSpaceCount();
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #46                 // Field m_whitespacePreservingElements:Ljava/util/Vector;
       5: if_acmpeq     18
       8: aload_0
       9: getfield      #46                 // Field m_whitespacePreservingElements:Ljava/util/Vector;
      12: invokevirtual #32                 // Method java/util/Vector.size:()I
      15: goto          19
      18: iconst_0
      19: ireturn

  public void setOutput(org.apache.xalan.templates.OutputProperties);
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #47                 // Field m_output:Ljava/util/Vector;
       5: if_acmpne     19
       8: aload_0
       9: new           #27                 // class java/util/Vector
      12: dup
      13: invokespecial #28                 // Method java/util/Vector."<init>":()V
      16: putfield      #47                 // Field m_output:Ljava/util/Vector;
      19: aload_0
      20: getfield      #47                 // Field m_output:Ljava/util/Vector;
      23: aload_1
      24: invokevirtual #29                 // Method java/util/Vector.addElement:(Ljava/lang/Object;)V
      27: return

  public org.apache.xalan.templates.OutputProperties getOutput(int) throws java.lang.ArrayIndexOutOfBoundsException;
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #47                 // Field m_output:Ljava/util/Vector;
       5: if_acmpne     16
       8: new           #14                 // class java/lang/ArrayIndexOutOfBoundsException
      11: dup
      12: invokespecial #15                 // Method java/lang/ArrayIndexOutOfBoundsException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #47                 // Field m_output:Ljava/util/Vector;
      20: iload_1
      21: invokevirtual #30                 // Method java/util/Vector.elementAt:(I)Ljava/lang/Object;
      24: checkcast     #48                 // class org/apache/xalan/templates/OutputProperties
      27: areturn

  public int getOutputCount();
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #47                 // Field m_output:Ljava/util/Vector;
       5: if_acmpeq     18
       8: aload_0
       9: getfield      #47                 // Field m_output:Ljava/util/Vector;
      12: invokevirtual #32                 // Method java/util/Vector.size:()I
      15: goto          19
      18: iconst_0
      19: ireturn

  public void setKey(org.apache.xalan.templates.KeyDeclaration);
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #49                 // Field m_keyDeclarations:Ljava/util/Vector;
       5: if_acmpne     19
       8: aload_0
       9: new           #27                 // class java/util/Vector
      12: dup
      13: invokespecial #28                 // Method java/util/Vector."<init>":()V
      16: putfield      #49                 // Field m_keyDeclarations:Ljava/util/Vector;
      19: aload_0
      20: getfield      #49                 // Field m_keyDeclarations:Ljava/util/Vector;
      23: aload_1
      24: invokevirtual #29                 // Method java/util/Vector.addElement:(Ljava/lang/Object;)V
      27: return

  public org.apache.xalan.templates.KeyDeclaration getKey(int) throws java.lang.ArrayIndexOutOfBoundsException;
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #49                 // Field m_keyDeclarations:Ljava/util/Vector;
       5: if_acmpne     16
       8: new           #14                 // class java/lang/ArrayIndexOutOfBoundsException
      11: dup
      12: invokespecial #15                 // Method java/lang/ArrayIndexOutOfBoundsException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #49                 // Field m_keyDeclarations:Ljava/util/Vector;
      20: iload_1
      21: invokevirtual #30                 // Method java/util/Vector.elementAt:(I)Ljava/lang/Object;
      24: checkcast     #50                 // class org/apache/xalan/templates/KeyDeclaration
      27: areturn

  public int getKeyCount();
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #49                 // Field m_keyDeclarations:Ljava/util/Vector;
       5: if_acmpeq     18
       8: aload_0
       9: getfield      #49                 // Field m_keyDeclarations:Ljava/util/Vector;
      12: invokevirtual #32                 // Method java/util/Vector.size:()I
      15: goto          19
      18: iconst_0
      19: ireturn

  public void setAttributeSet(org.apache.xalan.templates.ElemAttributeSet);
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #51                 // Field m_attributeSets:Ljava/util/Vector;
       5: if_acmpne     19
       8: aload_0
       9: new           #27                 // class java/util/Vector
      12: dup
      13: invokespecial #28                 // Method java/util/Vector."<init>":()V
      16: putfield      #51                 // Field m_attributeSets:Ljava/util/Vector;
      19: aload_0
      20: getfield      #51                 // Field m_attributeSets:Ljava/util/Vector;
      23: aload_1
      24: invokevirtual #29                 // Method java/util/Vector.addElement:(Ljava/lang/Object;)V
      27: return

  public org.apache.xalan.templates.ElemAttributeSet getAttributeSet(int) throws java.lang.ArrayIndexOutOfBoundsException;
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #51                 // Field m_attributeSets:Ljava/util/Vector;
       5: if_acmpne     16
       8: new           #14                 // class java/lang/ArrayIndexOutOfBoundsException
      11: dup
      12: invokespecial #15                 // Method java/lang/ArrayIndexOutOfBoundsException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #51                 // Field m_attributeSets:Ljava/util/Vector;
      20: iload_1
      21: invokevirtual #30                 // Method java/util/Vector.elementAt:(I)Ljava/lang/Object;
      24: checkcast     #52                 // class org/apache/xalan/templates/ElemAttributeSet
      27: areturn

  public int getAttributeSetCount();
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #51                 // Field m_attributeSets:Ljava/util/Vector;
       5: if_acmpeq     18
       8: aload_0
       9: getfield      #51                 // Field m_attributeSets:Ljava/util/Vector;
      12: invokevirtual #32                 // Method java/util/Vector.size:()I
      15: goto          19
      18: iconst_0
      19: ireturn

  public void setVariable(org.apache.xalan.templates.ElemVariable);
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #53                 // Field m_topLevelVariables:Ljava/util/Vector;
       5: if_acmpne     19
       8: aload_0
       9: new           #27                 // class java/util/Vector
      12: dup
      13: invokespecial #28                 // Method java/util/Vector."<init>":()V
      16: putfield      #53                 // Field m_topLevelVariables:Ljava/util/Vector;
      19: aload_0
      20: getfield      #53                 // Field m_topLevelVariables:Ljava/util/Vector;
      23: aload_1
      24: invokevirtual #29                 // Method java/util/Vector.addElement:(Ljava/lang/Object;)V
      27: return

  public org.apache.xalan.templates.ElemVariable getVariableOrParam(org.apache.xml.utils.QName);
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #53                 // Field m_topLevelVariables:Ljava/util/Vector;
       5: if_acmpeq     48
       8: aload_0
       9: invokevirtual #54                 // Method getVariableOrParamCount:()I
      12: istore_2
      13: iconst_0
      14: istore_3
      15: goto          43
      18: aload_0
      19: iload_3
      20: invokevirtual #55                 // Method getVariableOrParam:(I)Lorg/apache/xalan/templates/ElemVariable;
      23: astore        4
      25: aload         4
      27: invokevirtual #56                 // Method org/apache/xalan/templates/ElemVariable.getName:()Lorg/apache/xml/utils/QName;
      30: aload_1
      31: invokevirtual #42                 // Method org/apache/xml/utils/QName.equals:(Ljava/lang/Object;)Z
      34: ifeq          40
      37: aload         4
      39: areturn
      40: iinc          3, 1
      43: iload_3
      44: iload_2
      45: if_icmplt     18
      48: aconst_null
      49: areturn

  public org.apache.xalan.templates.ElemVariable getVariable(org.apache.xml.utils.QName);
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #53                 // Field m_topLevelVariables:Ljava/util/Vector;
       5: if_acmpeq     58
       8: aload_0
       9: invokevirtual #54                 // Method getVariableOrParamCount:()I
      12: istore_2
      13: iconst_0
      14: istore_3
      15: goto          53
      18: aload_0
      19: iload_3
      20: invokevirtual #55                 // Method getVariableOrParam:(I)Lorg/apache/xalan/templates/ElemVariable;
      23: astore        4
      25: aload         4
      27: invokevirtual #57                 // Method org/apache/xalan/templates/ElemVariable.getXSLToken:()I
      30: bipush        73
      32: if_icmpne     50
      35: aload         4
      37: invokevirtual #56                 // Method org/apache/xalan/templates/ElemVariable.getName:()Lorg/apache/xml/utils/QName;
      40: aload_1
      41: invokevirtual #42                 // Method org/apache/xml/utils/QName.equals:(Ljava/lang/Object;)Z
      44: ifeq          50
      47: aload         4
      49: areturn
      50: iinc          3, 1
      53: iload_3
      54: iload_2
      55: if_icmplt     18
      58: aconst_null
      59: areturn

  public org.apache.xalan.templates.ElemVariable getVariableOrParam(int) throws java.lang.ArrayIndexOutOfBoundsException;
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #53                 // Field m_topLevelVariables:Ljava/util/Vector;
       5: if_acmpne     16
       8: new           #14                 // class java/lang/ArrayIndexOutOfBoundsException
      11: dup
      12: invokespecial #15                 // Method java/lang/ArrayIndexOutOfBoundsException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #53                 // Field m_topLevelVariables:Ljava/util/Vector;
      20: iload_1
      21: invokevirtual #30                 // Method java/util/Vector.elementAt:(I)Ljava/lang/Object;
      24: checkcast     #58                 // class org/apache/xalan/templates/ElemVariable
      27: areturn

  public int getVariableOrParamCount();
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #53                 // Field m_topLevelVariables:Ljava/util/Vector;
       5: if_acmpeq     18
       8: aload_0
       9: getfield      #53                 // Field m_topLevelVariables:Ljava/util/Vector;
      12: invokevirtual #32                 // Method java/util/Vector.size:()I
      15: goto          19
      18: iconst_0
      19: ireturn

  public void setParam(org.apache.xalan.templates.ElemParam);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #59                 // Method setVariable:(Lorg/apache/xalan/templates/ElemVariable;)V
       5: return

  public org.apache.xalan.templates.ElemParam getParam(org.apache.xml.utils.QName);
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #53                 // Field m_topLevelVariables:Ljava/util/Vector;
       5: if_acmpeq     61
       8: aload_0
       9: invokevirtual #54                 // Method getVariableOrParamCount:()I
      12: istore_2
      13: iconst_0
      14: istore_3
      15: goto          56
      18: aload_0
      19: iload_3
      20: invokevirtual #55                 // Method getVariableOrParam:(I)Lorg/apache/xalan/templates/ElemVariable;
      23: astore        4
      25: aload         4
      27: invokevirtual #57                 // Method org/apache/xalan/templates/ElemVariable.getXSLToken:()I
      30: bipush        41
      32: if_icmpne     53
      35: aload         4
      37: invokevirtual #56                 // Method org/apache/xalan/templates/ElemVariable.getName:()Lorg/apache/xml/utils/QName;
      40: aload_1
      41: invokevirtual #42                 // Method org/apache/xml/utils/QName.equals:(Ljava/lang/Object;)Z
      44: ifeq          53
      47: aload         4
      49: checkcast     #60                 // class org/apache/xalan/templates/ElemParam
      52: areturn
      53: iinc          3, 1
      56: iload_3
      57: iload_2
      58: if_icmplt     18
      61: aconst_null
      62: areturn

  public void setTemplate(org.apache.xalan.templates.ElemTemplate);
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #61                 // Field m_templates:Ljava/util/Vector;
       5: if_acmpne     19
       8: aload_0
       9: new           #27                 // class java/util/Vector
      12: dup
      13: invokespecial #28                 // Method java/util/Vector."<init>":()V
      16: putfield      #61                 // Field m_templates:Ljava/util/Vector;
      19: aload_0
      20: getfield      #61                 // Field m_templates:Ljava/util/Vector;
      23: aload_1
      24: invokevirtual #29                 // Method java/util/Vector.addElement:(Ljava/lang/Object;)V
      27: aload_1
      28: aload_0
      29: invokevirtual #62                 // Method org/apache/xalan/templates/ElemTemplate.setStylesheet:(Lorg/apache/xalan/templates/Stylesheet;)V
      32: return

  public org.apache.xalan.templates.ElemTemplate getTemplate(int) throws javax.xml.transform.TransformerException;
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #61                 // Field m_templates:Ljava/util/Vector;
       5: if_acmpne     16
       8: new           #14                 // class java/lang/ArrayIndexOutOfBoundsException
      11: dup
      12: invokespecial #15                 // Method java/lang/ArrayIndexOutOfBoundsException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #61                 // Field m_templates:Ljava/util/Vector;
      20: iload_1
      21: invokevirtual #30                 // Method java/util/Vector.elementAt:(I)Ljava/lang/Object;
      24: checkcast     #63                 // class org/apache/xalan/templates/ElemTemplate
      27: areturn

  public int getTemplateCount();
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #61                 // Field m_templates:Ljava/util/Vector;
       5: if_acmpeq     18
       8: aload_0
       9: getfield      #61                 // Field m_templates:Ljava/util/Vector;
      12: invokevirtual #32                 // Method java/util/Vector.size:()I
      15: goto          19
      18: iconst_0
      19: ireturn

  public void setNamespaceAlias(org.apache.xalan.templates.NamespaceAlias);
    Code:
       0: aload_0
       1: getfield      #64                 // Field m_prefix_aliases:Ljava/util/Vector;
       4: ifnonnull     18
       7: aload_0
       8: new           #27                 // class java/util/Vector
      11: dup
      12: invokespecial #28                 // Method java/util/Vector."<init>":()V
      15: putfield      #64                 // Field m_prefix_aliases:Ljava/util/Vector;
      18: aload_0
      19: getfield      #64                 // Field m_prefix_aliases:Ljava/util/Vector;
      22: aload_1
      23: invokevirtual #29                 // Method java/util/Vector.addElement:(Ljava/lang/Object;)V
      26: return

  public org.apache.xalan.templates.NamespaceAlias getNamespaceAlias(int) throws java.lang.ArrayIndexOutOfBoundsException;
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #64                 // Field m_prefix_aliases:Ljava/util/Vector;
       5: if_acmpne     16
       8: new           #14                 // class java/lang/ArrayIndexOutOfBoundsException
      11: dup
      12: invokespecial #15                 // Method java/lang/ArrayIndexOutOfBoundsException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #64                 // Field m_prefix_aliases:Ljava/util/Vector;
      20: iload_1
      21: invokevirtual #30                 // Method java/util/Vector.elementAt:(I)Ljava/lang/Object;
      24: checkcast     #65                 // class org/apache/xalan/templates/NamespaceAlias
      27: areturn

  public int getNamespaceAliasCount();
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #64                 // Field m_prefix_aliases:Ljava/util/Vector;
       5: if_acmpeq     18
       8: aload_0
       9: getfield      #64                 // Field m_prefix_aliases:Ljava/util/Vector;
      12: invokevirtual #32                 // Method java/util/Vector.size:()I
      15: goto          19
      18: iconst_0
      19: ireturn

  public void setNonXslTopLevel(org.apache.xml.utils.QName, java.lang.Object);
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #66                 // Field m_NonXslTopLevel:Ljava/util/Hashtable;
       5: if_acmpne     19
       8: aload_0
       9: new           #67                 // class java/util/Hashtable
      12: dup
      13: invokespecial #68                 // Method java/util/Hashtable."<init>":()V
      16: putfield      #66                 // Field m_NonXslTopLevel:Ljava/util/Hashtable;
      19: aload_0
      20: getfield      #66                 // Field m_NonXslTopLevel:Ljava/util/Hashtable;
      23: aload_1
      24: aload_2
      25: invokevirtual #69                 // Method java/util/Hashtable.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      28: pop
      29: return

  public java.lang.Object getNonXslTopLevel(org.apache.xml.utils.QName);
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #66                 // Field m_NonXslTopLevel:Ljava/util/Hashtable;
       5: if_acmpeq     19
       8: aload_0
       9: getfield      #66                 // Field m_NonXslTopLevel:Ljava/util/Hashtable;
      12: aload_1
      13: invokevirtual #70                 // Method java/util/Hashtable.get:(Ljava/lang/Object;)Ljava/lang/Object;
      16: goto          20
      19: aconst_null
      20: areturn

  public java.lang.String getHref();
    Code:
       0: aload_0
       1: getfield      #3                  // Field m_href:Ljava/lang/String;
       4: areturn

  public void setHref(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #3                  // Field m_href:Ljava/lang/String;
       5: return

  public void setLocaterInfo(javax.xml.transform.SourceLocator);
    Code:
       0: aconst_null
       1: aload_1
       2: if_acmpeq     54
       5: aload_0
       6: aload_1
       7: invokeinterface #71,  1           // InterfaceMethod javax/xml/transform/SourceLocator.getPublicId:()Ljava/lang/String;
      12: putfield      #72                 // Field m_publicId:Ljava/lang/String;
      15: aload_0
      16: aload_1
      17: invokeinterface #73,  1           // InterfaceMethod javax/xml/transform/SourceLocator.getSystemId:()Ljava/lang/String;
      22: putfield      #74                 // Field m_systemId:Ljava/lang/String;
      25: aconst_null
      26: aload_0
      27: getfield      #74                 // Field m_systemId:Ljava/lang/String;
      30: if_acmpeq     49
      33: aload_0
      34: aload_0
      35: getfield      #74                 // Field m_systemId:Ljava/lang/String;
      38: aconst_null
      39: invokestatic  #75                 // Method org/apache/xml/utils/SystemIDResolver.getAbsoluteURI:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      42: putfield      #3                  // Field m_href:Ljava/lang/String;
      45: goto          49
      48: astore_2
      49: aload_0
      50: aload_1
      51: invokespecial #76                 // Method org/apache/xalan/templates/ElemTemplateElement.setLocaterInfo:(Ljavax/xml/transform/SourceLocator;)V
      54: return
    Exception table:
       from    to  target type
          33    45    48   Class javax/xml/transform/TransformerException

  public org.apache.xalan.templates.StylesheetRoot getStylesheetRoot();
    Code:
       0: aload_0
       1: getfield      #6                  // Field m_stylesheetRoot:Lorg/apache/xalan/templates/StylesheetRoot;
       4: areturn

  public void setStylesheetRoot(org.apache.xalan.templates.StylesheetRoot);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #6                  // Field m_stylesheetRoot:Lorg/apache/xalan/templates/StylesheetRoot;
       5: return

  public org.apache.xalan.templates.Stylesheet getStylesheetParent();
    Code:
       0: aload_0
       1: getfield      #4                  // Field m_stylesheetParent:Lorg/apache/xalan/templates/Stylesheet;
       4: areturn

  public void setStylesheetParent(org.apache.xalan.templates.Stylesheet);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #4                  // Field m_stylesheetParent:Lorg/apache/xalan/templates/Stylesheet;
       5: return

  public org.apache.xalan.templates.StylesheetComposed getStylesheetComposed();
    Code:
       0: aload_0
       1: astore_1
       2: goto          10
       5: aload_1
       6: invokevirtual #77                 // Method getStylesheetParent:()Lorg/apache/xalan/templates/Stylesheet;
       9: astore_1
      10: aload_1
      11: invokevirtual #78                 // Method isAggregatedType:()Z
      14: ifeq          5
      17: aload_1
      18: checkcast     #31                 // class org/apache/xalan/templates/StylesheetComposed
      21: areturn

  public short getNodeType();
    Code:
       0: bipush        9
       2: ireturn

  public int getXSLToken();
    Code:
       0: bipush        25
       2: ireturn

  public java.lang.String getNodeName();
    Code:
       0: ldc           #79                 // String stylesheet
       2: areturn

  public void replaceTemplate(org.apache.xalan.templates.ElemTemplate, int) throws javax.xml.transform.TransformerException;
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #61                 // Field m_templates:Ljava/util/Vector;
       5: if_acmpne     16
       8: new           #14                 // class java/lang/ArrayIndexOutOfBoundsException
      11: dup
      12: invokespecial #15                 // Method java/lang/ArrayIndexOutOfBoundsException."<init>":()V
      15: athrow
      16: aload_0
      17: aload_1
      18: aload_0
      19: getfield      #61                 // Field m_templates:Ljava/util/Vector;
      22: iload_2
      23: invokevirtual #30                 // Method java/util/Vector.elementAt:(I)Ljava/lang/Object;
      26: checkcast     #80                 // class org/apache/xalan/templates/ElemTemplateElement
      29: invokevirtual #81                 // Method org/apache/xalan/templates/ElemTemplateElement.replaceChild:(Lorg/apache/xalan/templates/ElemTemplateElement;Lorg/apache/xalan/templates/ElemTemplateElement;)Lorg/apache/xalan/templates/ElemTemplateElement;
      32: pop
      33: aload_0
      34: getfield      #61                 // Field m_templates:Ljava/util/Vector;
      37: aload_1
      38: iload_2
      39: invokevirtual #82                 // Method java/util/Vector.setElementAt:(Ljava/lang/Object;I)V
      42: aload_1
      43: aload_0
      44: invokevirtual #62                 // Method org/apache/xalan/templates/ElemTemplate.setStylesheet:(Lorg/apache/xalan/templates/Stylesheet;)V
      47: return

  protected void callChildVisitors(org.apache.xalan.templates.XSLTVisitor, boolean);
    Code:
       0: aload_0
       1: invokevirtual #83                 // Method getImportCount:()I
       4: istore_3
       5: iconst_0
       6: istore        4
       8: goto          24
      11: aload_0
      12: iload         4
      14: invokevirtual #84                 // Method getImport:(I)Lorg/apache/xalan/templates/StylesheetComposed;
      17: aload_1
      18: invokevirtual #85                 // Method org/apache/xalan/templates/ElemTemplateElement.callVisitors:(Lorg/apache/xalan/templates/XSLTVisitor;)V
      21: iinc          4, 1
      24: iload         4
      26: iload_3
      27: if_icmplt     11
      30: aload_0
      31: invokevirtual #86                 // Method getIncludeCount:()I
      34: istore_3
      35: iconst_0
      36: istore        5
      38: goto          54
      41: aload_0
      42: iload         5
      44: invokevirtual #87                 // Method getInclude:(I)Lorg/apache/xalan/templates/Stylesheet;
      47: aload_1
      48: invokevirtual #85                 // Method org/apache/xalan/templates/ElemTemplateElement.callVisitors:(Lorg/apache/xalan/templates/XSLTVisitor;)V
      51: iinc          5, 1
      54: iload         5
      56: iload_3
      57: if_icmplt     41
      60: aload_0
      61: invokevirtual #88                 // Method getOutputCount:()I
      64: istore_3
      65: iconst_0
      66: istore        6
      68: goto          85
      71: aload_1
      72: aload_0
      73: iload         6
      75: invokevirtual #89                 // Method getOutput:(I)Lorg/apache/xalan/templates/OutputProperties;
      78: invokevirtual #90                 // Method org/apache/xalan/templates/XSLTVisitor.visitTopLevelInstruction:(Lorg/apache/xalan/templates/ElemTemplateElement;)Z
      81: pop
      82: iinc          6, 1
      85: iload         6
      87: iload_3
      88: if_icmplt     71
      91: aload_0
      92: invokevirtual #91                 // Method getAttributeSetCount:()I
      95: istore_3
      96: iconst_0
      97: istore        7
      99: goto          128
     102: aload_0
     103: iload         7
     105: invokevirtual #92                 // Method getAttributeSet:(I)Lorg/apache/xalan/templates/ElemAttributeSet;
     108: astore        8
     110: aload_1
     111: aload         8
     113: invokevirtual #90                 // Method org/apache/xalan/templates/XSLTVisitor.visitTopLevelInstruction:(Lorg/apache/xalan/templates/ElemTemplateElement;)Z
     116: ifeq          125
     119: aload         8
     121: aload_1
     122: invokevirtual #93                 // Method org/apache/xalan/templates/ElemTemplateElement.callChildVisitors:(Lorg/apache/xalan/templates/XSLTVisitor;)V
     125: iinc          7, 1
     128: iload         7
     130: iload_3
     131: if_icmplt     102
     134: aload_0
     135: invokevirtual #39                 // Method getDecimalFormatCount:()I
     138: istore_3
     139: iconst_0
     140: istore        8
     142: goto          159
     145: aload_1
     146: aload_0
     147: iload         8
     149: invokevirtual #40                 // Method getDecimalFormat:(I)Lorg/apache/xalan/templates/DecimalFormatProperties;
     152: invokevirtual #90                 // Method org/apache/xalan/templates/XSLTVisitor.visitTopLevelInstruction:(Lorg/apache/xalan/templates/ElemTemplateElement;)Z
     155: pop
     156: iinc          8, 1
     159: iload         8
     161: iload_3
     162: if_icmplt     145
     165: aload_0
     166: invokevirtual #94                 // Method getKeyCount:()I
     169: istore_3
     170: iconst_0
     171: istore        9
     173: goto          190
     176: aload_1
     177: aload_0
     178: iload         9
     180: invokevirtual #95                 // Method getKey:(I)Lorg/apache/xalan/templates/KeyDeclaration;
     183: invokevirtual #90                 // Method org/apache/xalan/templates/XSLTVisitor.visitTopLevelInstruction:(Lorg/apache/xalan/templates/ElemTemplateElement;)Z
     186: pop
     187: iinc          9, 1
     190: iload         9
     192: iload_3
     193: if_icmplt     176
     196: aload_0
     197: invokevirtual #96                 // Method getNamespaceAliasCount:()I
     200: istore_3
     201: iconst_0
     202: istore        10
     204: goto          221
     207: aload_1
     208: aload_0
     209: iload         10
     211: invokevirtual #97                 // Method getNamespaceAlias:(I)Lorg/apache/xalan/templates/NamespaceAlias;
     214: invokevirtual #90                 // Method org/apache/xalan/templates/XSLTVisitor.visitTopLevelInstruction:(Lorg/apache/xalan/templates/ElemTemplateElement;)Z
     217: pop
     218: iinc          10, 1
     221: iload         10
     223: iload_3
     224: if_icmplt     207
     227: aload_0
     228: invokevirtual #98                 // Method getTemplateCount:()I
     231: istore_3
     232: iconst_0
     233: istore        11
     235: goto          279
     238: aload_0
     239: iload         11
     241: invokevirtual #99                 // Method getTemplate:(I)Lorg/apache/xalan/templates/ElemTemplate;
     244: astore        12
     246: aload_1
     247: aload         12
     249: invokevirtual #90                 // Method org/apache/xalan/templates/XSLTVisitor.visitTopLevelInstruction:(Lorg/apache/xalan/templates/ElemTemplateElement;)Z
     252: ifeq          261
     255: aload         12
     257: aload_1
     258: invokevirtual #93                 // Method org/apache/xalan/templates/ElemTemplateElement.callChildVisitors:(Lorg/apache/xalan/templates/XSLTVisitor;)V
     261: goto          276
     264: astore        12
     266: new           #100                // class org/apache/xml/utils/WrappedRuntimeException
     269: dup
     270: aload         12
     272: invokespecial #101                // Method org/apache/xml/utils/WrappedRuntimeException."<init>":(Ljava/lang/Exception;)V
     275: athrow
     276: iinc          11, 1
     279: iload         11
     281: iload_3
     282: if_icmplt     238
     285: aload_0
     286: invokevirtual #54                 // Method getVariableOrParamCount:()I
     289: istore_3
     290: iconst_0
     291: istore        12
     293: goto          322
     296: aload_0
     297: iload         12
     299: invokevirtual #55                 // Method getVariableOrParam:(I)Lorg/apache/xalan/templates/ElemVariable;
     302: astore        13
     304: aload_1
     305: aload         13
     307: invokevirtual #102                // Method org/apache/xalan/templates/XSLTVisitor.visitTopLevelVariableOrParamDecl:(Lorg/apache/xalan/templates/ElemTemplateElement;)Z
     310: ifeq          319
     313: aload         13
     315: aload_1
     316: invokevirtual #93                 // Method org/apache/xalan/templates/ElemTemplateElement.callChildVisitors:(Lorg/apache/xalan/templates/XSLTVisitor;)V
     319: iinc          12, 1
     322: iload         12
     324: iload_3
     325: if_icmplt     296
     328: aload_0
     329: invokevirtual #103                // Method getStripSpaceCount:()I
     332: istore_3
     333: iconst_0
     334: istore        13
     336: goto          353
     339: aload_1
     340: aload_0
     341: iload         13
     343: invokevirtual #104                // Method getStripSpace:(I)Lorg/apache/xalan/templates/WhiteSpaceInfo;
     346: invokevirtual #90                 // Method org/apache/xalan/templates/XSLTVisitor.visitTopLevelInstruction:(Lorg/apache/xalan/templates/ElemTemplateElement;)Z
     349: pop
     350: iinc          13, 1
     353: iload         13
     355: iload_3
     356: if_icmplt     339
     359: aload_0
     360: invokevirtual #105                // Method getPreserveSpaceCount:()I
     363: istore_3
     364: iconst_0
     365: istore        14
     367: goto          384
     370: aload_1
     371: aload_0
     372: iload         14
     374: invokevirtual #106                // Method getPreserveSpace:(I)Lorg/apache/xalan/templates/WhiteSpaceInfo;
     377: invokevirtual #90                 // Method org/apache/xalan/templates/XSLTVisitor.visitTopLevelInstruction:(Lorg/apache/xalan/templates/ElemTemplateElement;)Z
     380: pop
     381: iinc          14, 1
     384: iload         14
     386: iload_3
     387: if_icmplt     370
     390: aconst_null
     391: aload_0
     392: getfield      #66                 // Field m_NonXslTopLevel:Ljava/util/Hashtable;
     395: if_acmpeq     447
     398: aload_0
     399: getfield      #66                 // Field m_NonXslTopLevel:Ljava/util/Hashtable;
     402: invokevirtual #107                // Method java/util/Hashtable.elements:()Ljava/util/Enumeration;
     405: astore        15
     407: goto          437
     410: aload         15
     412: invokeinterface #108,  1          // InterfaceMethod java/util/Enumeration.nextElement:()Ljava/lang/Object;
     417: checkcast     #80                 // class org/apache/xalan/templates/ElemTemplateElement
     420: astore        16
     422: aload_1
     423: aload         16
     425: invokevirtual #90                 // Method org/apache/xalan/templates/XSLTVisitor.visitTopLevelInstruction:(Lorg/apache/xalan/templates/ElemTemplateElement;)Z
     428: ifeq          437
     431: aload         16
     433: aload_1
     434: invokevirtual #93                 // Method org/apache/xalan/templates/ElemTemplateElement.callChildVisitors:(Lorg/apache/xalan/templates/XSLTVisitor;)V
     437: aload         15
     439: invokeinterface #109,  1          // InterfaceMethod java/util/Enumeration.hasMoreElements:()Z
     444: ifne          410
     447: return
    Exception table:
       from    to  target type
         238   261   264   Class javax/xml/transform/TransformerException

  protected boolean accept(org.apache.xalan.templates.XSLTVisitor);
    Code:
       0: aload_1
       1: aload_0
       2: invokevirtual #110                // Method org/apache/xalan/templates/XSLTVisitor.visitStylesheet:(Lorg/apache/xalan/templates/ElemTemplateElement;)Z
       5: ireturn
}
