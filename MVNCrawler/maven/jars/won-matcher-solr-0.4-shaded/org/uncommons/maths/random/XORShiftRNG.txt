Compiled from "XORShiftRNG.java"
public class org.uncommons.maths.random.XORShiftRNG extends java.util.Random implements org.uncommons.maths.random.RepeatableRNG {
  private static final int SEED_SIZE_BYTES;

  private int state1;

  private int state2;

  private int state3;

  private int state4;

  private int state5;

  private final byte[] seed;

  private final java.util.concurrent.locks.ReentrantLock lock;

  public org.uncommons.maths.random.XORShiftRNG();
    Code:
       0: aload_0
       1: invokestatic  #1                  // Method org/uncommons/maths/random/DefaultSeedGenerator.getInstance:()Lorg/uncommons/maths/random/DefaultSeedGenerator;
       4: bipush        20
       6: invokevirtual #2                  // Method org/uncommons/maths/random/DefaultSeedGenerator.generateSeed:(I)[B
       9: invokespecial #3                  // Method "<init>":([B)V
      12: return

  public org.uncommons.maths.random.XORShiftRNG(org.uncommons.maths.random.SeedGenerator) throws org.uncommons.maths.random.SeedException;
    Code:
       0: aload_0
       1: aload_1
       2: bipush        20
       4: invokeinterface #4,  2            // InterfaceMethod org/uncommons/maths/random/SeedGenerator.generateSeed:(I)[B
       9: invokespecial #3                  // Method "<init>":([B)V
      12: return

  public org.uncommons.maths.random.XORShiftRNG(byte[]);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method java/util/Random."<init>":()V
       4: aload_0
       5: new           #6                  // class java/util/concurrent/locks/ReentrantLock
       8: dup
       9: invokespecial #7                  // Method java/util/concurrent/locks/ReentrantLock."<init>":()V
      12: putfield      #8                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      15: aload_1
      16: ifnull        26
      19: aload_1
      20: arraylength
      21: bipush        20
      23: if_icmpeq     36
      26: new           #9                  // class java/lang/IllegalArgumentException
      29: dup
      30: ldc           #10                 // String XOR shift RNG requires 160 bits of seed data.
      32: invokespecial #11                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      35: athrow
      36: aload_0
      37: aload_1
      38: invokevirtual #12                 // Method "[B".clone:()Ljava/lang/Object;
      41: checkcast     #13                 // class "[B"
      44: putfield      #14                 // Field seed:[B
      47: aload_1
      48: invokestatic  #15                 // Method org/uncommons/maths/binary/BinaryUtils.convertBytesToInts:([B)[I
      51: astore_2
      52: aload_0
      53: aload_2
      54: iconst_0
      55: iaload
      56: putfield      #16                 // Field state1:I
      59: aload_0
      60: aload_2
      61: iconst_1
      62: iaload
      63: putfield      #17                 // Field state2:I
      66: aload_0
      67: aload_2
      68: iconst_2
      69: iaload
      70: putfield      #18                 // Field state3:I
      73: aload_0
      74: aload_2
      75: iconst_3
      76: iaload
      77: putfield      #19                 // Field state4:I
      80: aload_0
      81: aload_2
      82: iconst_4
      83: iaload
      84: putfield      #20                 // Field state5:I
      87: return

  public byte[] getSeed();
    Code:
       0: aload_0
       1: getfield      #14                 // Field seed:[B
       4: invokevirtual #21                 // Method "[B".clone:()Ljava/lang/Object;
       7: checkcast     #13                 // class "[B"
      10: areturn

  protected int next(int);
    Code:
       0: aload_0
       1: getfield      #8                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
       4: invokevirtual #22                 // Method java/util/concurrent/locks/ReentrantLock.lock:()V
       7: aload_0
       8: getfield      #16                 // Field state1:I
      11: aload_0
      12: getfield      #16                 // Field state1:I
      15: bipush        7
      17: ishr
      18: ixor
      19: istore_2
      20: aload_0
      21: aload_0
      22: getfield      #17                 // Field state2:I
      25: putfield      #16                 // Field state1:I
      28: aload_0
      29: aload_0
      30: getfield      #18                 // Field state3:I
      33: putfield      #17                 // Field state2:I
      36: aload_0
      37: aload_0
      38: getfield      #19                 // Field state4:I
      41: putfield      #18                 // Field state3:I
      44: aload_0
      45: aload_0
      46: getfield      #20                 // Field state5:I
      49: putfield      #19                 // Field state4:I
      52: aload_0
      53: aload_0
      54: getfield      #20                 // Field state5:I
      57: aload_0
      58: getfield      #20                 // Field state5:I
      61: bipush        6
      63: ishl
      64: ixor
      65: iload_2
      66: iload_2
      67: bipush        13
      69: ishl
      70: ixor
      71: ixor
      72: putfield      #20                 // Field state5:I
      75: aload_0
      76: getfield      #17                 // Field state2:I
      79: aload_0
      80: getfield      #17                 // Field state2:I
      83: iadd
      84: iconst_1
      85: iadd
      86: aload_0
      87: getfield      #20                 // Field state5:I
      90: imul
      91: istore_3
      92: iload_3
      93: bipush        32
      95: iload_1
      96: isub
      97: iushr
      98: istore        4
     100: aload_0
     101: getfield      #8                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
     104: invokevirtual #23                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
     107: iload         4
     109: ireturn
     110: astore        5
     112: aload_0
     113: getfield      #8                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
     116: invokevirtual #23                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
     119: aload         5
     121: athrow
    Exception table:
       from    to  target type
           0   100   110   any
         110   112   110   any
}
