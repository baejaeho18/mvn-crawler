Compiled from "AESCounterRNG.java"
public class org.uncommons.maths.random.AESCounterRNG extends java.util.Random implements org.uncommons.maths.random.RepeatableRNG {
  private static final int DEFAULT_SEED_SIZE_BYTES;

  private final byte[] seed;

  private final javax.crypto.Cipher cipher;

  private final byte[] counter;

  private final java.util.concurrent.locks.ReentrantLock lock;

  private byte[] currentBlock;

  private int index;

  public org.uncommons.maths.random.AESCounterRNG() throws java.security.GeneralSecurityException;
    Code:
       0: aload_0
       1: bipush        16
       3: invokespecial #1                  // Method "<init>":(I)V
       6: return

  public org.uncommons.maths.random.AESCounterRNG(org.uncommons.maths.random.SeedGenerator) throws org.uncommons.maths.random.SeedException, java.security.GeneralSecurityException;
    Code:
       0: aload_0
       1: aload_1
       2: bipush        16
       4: invokeinterface #2,  2            // InterfaceMethod org/uncommons/maths/random/SeedGenerator.generateSeed:(I)[B
       9: invokespecial #3                  // Method "<init>":([B)V
      12: return

  public org.uncommons.maths.random.AESCounterRNG(int) throws java.security.GeneralSecurityException;
    Code:
       0: aload_0
       1: invokestatic  #4                  // Method org/uncommons/maths/random/DefaultSeedGenerator.getInstance:()Lorg/uncommons/maths/random/DefaultSeedGenerator;
       4: iload_1
       5: invokevirtual #5                  // Method org/uncommons/maths/random/DefaultSeedGenerator.generateSeed:(I)[B
       8: invokespecial #3                  // Method "<init>":([B)V
      11: return

  public org.uncommons.maths.random.AESCounterRNG(byte[]) throws java.security.GeneralSecurityException;
    Code:
       0: aload_0
       1: invokespecial #6                  // Method java/util/Random."<init>":()V
       4: aload_0
       5: bipush        16
       7: newarray       byte
       9: putfield      #7                  // Field counter:[B
      12: aload_0
      13: new           #8                  // class java/util/concurrent/locks/ReentrantLock
      16: dup
      17: invokespecial #9                  // Method java/util/concurrent/locks/ReentrantLock."<init>":()V
      20: putfield      #10                 // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      23: aload_0
      24: aconst_null
      25: putfield      #11                 // Field currentBlock:[B
      28: aload_0
      29: iconst_0
      30: putfield      #12                 // Field index:I
      33: aload_1
      34: ifnonnull     47
      37: new           #13                 // class java/lang/IllegalArgumentException
      40: dup
      41: ldc           #14                 // String AES RNG requires a 128-bit, 192-bit or 256-bit seed.
      43: invokespecial #15                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      46: athrow
      47: aload_0
      48: aload_1
      49: invokevirtual #16                 // Method "[B".clone:()Ljava/lang/Object;
      52: checkcast     #17                 // class "[B"
      55: putfield      #18                 // Field seed:[B
      58: aload_0
      59: ldc           #19                 // String AES/ECB/NoPadding
      61: invokestatic  #20                 // Method javax/crypto/Cipher.getInstance:(Ljava/lang/String;)Ljavax/crypto/Cipher;
      64: putfield      #21                 // Field cipher:Ljavax/crypto/Cipher;
      67: aload_0
      68: getfield      #21                 // Field cipher:Ljavax/crypto/Cipher;
      71: iconst_1
      72: new           #22                 // class org/uncommons/maths/random/AESCounterRNG$AESKey
      75: dup
      76: aload_0
      77: getfield      #18                 // Field seed:[B
      80: aconst_null
      81: invokespecial #23                 // Method org/uncommons/maths/random/AESCounterRNG$AESKey."<init>":([BLorg/uncommons/maths/random/AESCounterRNG$1;)V
      84: invokevirtual #24                 // Method javax/crypto/Cipher.init:(ILjava/security/Key;)V
      87: return

  public byte[] getSeed();
    Code:
       0: aload_0
       1: getfield      #18                 // Field seed:[B
       4: invokevirtual #25                 // Method "[B".clone:()Ljava/lang/Object;
       7: checkcast     #17                 // class "[B"
      10: areturn

  private void incrementCounter();
    Code:
       0: iconst_0
       1: istore_1
       2: iload_1
       3: aload_0
       4: getfield      #7                  // Field counter:[B
       7: arraylength
       8: if_icmpge     40
      11: aload_0
      12: getfield      #7                  // Field counter:[B
      15: iload_1
      16: dup2
      17: baload
      18: iconst_1
      19: iadd
      20: i2b
      21: bastore
      22: aload_0
      23: getfield      #7                  // Field counter:[B
      26: iload_1
      27: baload
      28: ifeq          34
      31: goto          40
      34: iinc          1, 1
      37: goto          2
      40: return

  private byte[] nextBlock() throws java.security.GeneralSecurityException;
    Code:
       0: aload_0
       1: invokespecial #26                 // Method incrementCounter:()V
       4: aload_0
       5: getfield      #21                 // Field cipher:Ljavax/crypto/Cipher;
       8: aload_0
       9: getfield      #7                  // Field counter:[B
      12: invokevirtual #27                 // Method javax/crypto/Cipher.doFinal:([B)[B
      15: areturn

  protected final int next(int);
    Code:
       0: aload_0
       1: getfield      #10                 // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
       4: invokevirtual #28                 // Method java/util/concurrent/locks/ReentrantLock.lock:()V
       7: aload_0
       8: getfield      #11                 // Field currentBlock:[B
      11: ifnull        28
      14: aload_0
      15: getfield      #11                 // Field currentBlock:[B
      18: arraylength
      19: aload_0
      20: getfield      #12                 // Field index:I
      23: isub
      24: iconst_4
      25: if_icmpge     56
      28: aload_0
      29: aload_0
      30: invokespecial #29                 // Method nextBlock:()[B
      33: putfield      #11                 // Field currentBlock:[B
      36: aload_0
      37: iconst_0
      38: putfield      #12                 // Field index:I
      41: goto          56
      44: astore_3
      45: new           #31                 // class java/lang/IllegalStateException
      48: dup
      49: ldc           #32                 // String Failed creating next random block.
      51: aload_3
      52: invokespecial #33                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      55: athrow
      56: aload_0
      57: getfield      #11                 // Field currentBlock:[B
      60: aload_0
      61: getfield      #12                 // Field index:I
      64: invokestatic  #34                 // Method org/uncommons/maths/binary/BinaryUtils.convertBytesToInt:([BI)I
      67: istore_2
      68: aload_0
      69: dup
      70: getfield      #12                 // Field index:I
      73: iconst_4
      74: iadd
      75: putfield      #12                 // Field index:I
      78: aload_0
      79: getfield      #10                 // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      82: invokevirtual #35                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      85: goto          100
      88: astore        4
      90: aload_0
      91: getfield      #10                 // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      94: invokevirtual #35                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      97: aload         4
      99: athrow
     100: iload_2
     101: bipush        32
     103: iload_1
     104: isub
     105: iushr
     106: ireturn
    Exception table:
       from    to  target type
          28    41    44   Class java/security/GeneralSecurityException
           0    78    88   any
          88    90    88   any
}
