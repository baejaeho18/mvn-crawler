Compiled from "Maths.java"
public final class org.uncommons.maths.Maths {
  private static final int MAX_LONG_FACTORIAL;

  private static final int CACHE_SIZE;

  private static final java.util.concurrent.ConcurrentMap<java.lang.Integer, java.math.BigInteger> BIG_FACTORIALS;

  private org.uncommons.maths.Maths();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public static long factorial(int);
    Code:
       0: iload_0
       1: iflt          10
       4: iload_0
       5: bipush        20
       7: if_icmple     20
      10: new           #2                  // class java/lang/IllegalArgumentException
      13: dup
      14: ldc           #3                  // String Argument must be in the range 0 - 20.
      16: invokespecial #4                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      19: athrow
      20: lconst_1
      21: lstore_1
      22: iload_0
      23: istore_3
      24: iload_3
      25: iconst_1
      26: if_icmple     40
      29: lload_1
      30: iload_3
      31: i2l
      32: lmul
      33: lstore_1
      34: iinc          3, -1
      37: goto          24
      40: lload_1
      41: lreturn

  public static java.math.BigInteger bigFactorial(int);
    Code:
       0: iload_0
       1: ifge          14
       4: new           #2                  // class java/lang/IllegalArgumentException
       7: dup
       8: ldc           #5                  // String Argument must greater than or equal to zero.
      10: invokespecial #4                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: aconst_null
      15: astore_1
      16: iload_0
      17: sipush        256
      20: if_icmpge     39
      23: getstatic     #6                  // Field BIG_FACTORIALS:Ljava/util/concurrent/ConcurrentMap;
      26: iload_0
      27: invokestatic  #7                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      30: invokeinterface #8,  2            // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      35: checkcast     #9                  // class java/math/BigInteger
      38: astore_1
      39: aload_1
      40: ifnonnull     91
      43: getstatic     #10                 // Field java/math/BigInteger.ONE:Ljava/math/BigInteger;
      46: astore_1
      47: iload_0
      48: istore_2
      49: iload_2
      50: iconst_1
      51: if_icmple     70
      54: aload_1
      55: iload_2
      56: i2l
      57: invokestatic  #11                 // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;
      60: invokevirtual #12                 // Method java/math/BigInteger.multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;
      63: astore_1
      64: iinc          2, -1
      67: goto          49
      70: iload_0
      71: sipush        256
      74: if_icmpge     91
      77: getstatic     #6                  // Field BIG_FACTORIALS:Ljava/util/concurrent/ConcurrentMap;
      80: iload_0
      81: invokestatic  #7                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      84: aload_1
      85: invokeinterface #13,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      90: pop
      91: aload_1
      92: areturn

  public static long raiseToPower(int, int);
    Code:
       0: iload_1
       1: ifge          14
       4: new           #2                  // class java/lang/IllegalArgumentException
       7: dup
       8: ldc           #14                 // String This method does not support negative powers.
      10: invokespecial #4                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: lconst_1
      15: lstore_2
      16: iconst_0
      17: istore        4
      19: iload         4
      21: iload_1
      22: if_icmpge     36
      25: lload_2
      26: iload_0
      27: i2l
      28: lmul
      29: lstore_2
      30: iinc          4, 1
      33: goto          19
      36: lload_2
      37: lreturn

  public static double log(double, double);
    Code:
       0: dload_2
       1: invokestatic  #15                 // Method java/lang/Math.log:(D)D
       4: dload_0
       5: invokestatic  #15                 // Method java/lang/Math.log:(D)D
       8: ddiv
       9: dreturn

  public static boolean approxEquals(double, double, double);
    Code:
       0: dload         4
       2: dconst_0
       3: dcmpg
       4: iflt          14
       7: dload         4
       9: dconst_1
      10: dcmpl
      11: ifle          24
      14: new           #2                  // class java/lang/IllegalArgumentException
      17: dup
      18: ldc           #16                 // String Tolerance must be between 0 and 1.
      20: invokespecial #4                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      23: athrow
      24: dload_0
      25: dload_2
      26: dsub
      27: invokestatic  #17                 // Method java/lang/Math.abs:(D)D
      30: dload_0
      31: dload         4
      33: dmul
      34: dcmpg
      35: ifgt          42
      38: iconst_1
      39: goto          43
      42: iconst_0
      43: ireturn

  public static int restrictRange(int, int, int);
    Code:
       0: iload_0
       1: iload_1
       2: invokestatic  #18                 // Method java/lang/Math.max:(II)I
       5: iload_2
       6: invokestatic  #19                 // Method java/lang/Math.min:(II)I
       9: ireturn

  public static long restrictRange(long, long, long);
    Code:
       0: lload_0
       1: lload_2
       2: invokestatic  #20                 // Method java/lang/Math.max:(JJ)J
       5: lload         4
       7: invokestatic  #21                 // Method java/lang/Math.min:(JJ)J
      10: lreturn

  public static double restrictRange(double, double, double);
    Code:
       0: dload_0
       1: dload_2
       2: invokestatic  #22                 // Method java/lang/Math.max:(DD)D
       5: dload         4
       7: invokestatic  #23                 // Method java/lang/Math.min:(DD)D
      10: dreturn

  public static long greatestCommonDivisor(long, long);
    Code:
       0: lload_0
       1: invokestatic  #24                 // Method java/lang/Math.abs:(J)J
       4: lstore_0
       5: lload_2
       6: invokestatic  #24                 // Method java/lang/Math.abs:(J)J
       9: lstore_2
      10: lload_2
      11: lconst_0
      12: lcmp
      13: ifeq          29
      16: lload_2
      17: lstore        4
      19: lload_0
      20: lload_2
      21: lrem
      22: lstore_2
      23: lload         4
      25: lstore_0
      26: goto          10
      29: lload_0
      30: lreturn

  static {};
    Code:
       0: new           #25                 // class java/util/concurrent/ConcurrentHashMap
       3: dup
       4: invokespecial #26                 // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
       7: putstatic     #6                  // Field BIG_FACTORIALS:Ljava/util/concurrent/ConcurrentMap;
      10: return
}
