Compiled from "DataSourceTransactionManager.java"
public class org.springframework.jdbc.datasource.DataSourceTransactionManager extends org.springframework.transaction.support.AbstractPlatformTransactionManager implements org.springframework.transaction.support.ResourceTransactionManager,org.springframework.beans.factory.InitializingBean {
  private javax.sql.DataSource dataSource;

  private boolean enforceReadOnly;

  public org.springframework.jdbc.datasource.DataSourceTransactionManager();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/springframework/transaction/support/AbstractPlatformTransactionManager."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field enforceReadOnly:Z
       9: aload_0
      10: iconst_1
      11: invokevirtual #3                  // Method setNestedTransactionAllowed:(Z)V
      14: return

  public org.springframework.jdbc.datasource.DataSourceTransactionManager(javax.sql.DataSource);
    Code:
       0: aload_0
       1: invokespecial #4                  // Method "<init>":()V
       4: aload_0
       5: aload_1
       6: invokevirtual #5                  // Method setDataSource:(Ljavax/sql/DataSource;)V
       9: aload_0
      10: invokevirtual #6                  // Method afterPropertiesSet:()V
      13: return

  public void setDataSource(javax.sql.DataSource);
    Code:
       0: aload_1
       1: instanceof    #7                  // class org/springframework/jdbc/datasource/TransactionAwareDataSourceProxy
       4: ifeq          21
       7: aload_0
       8: aload_1
       9: checkcast     #7                  // class org/springframework/jdbc/datasource/TransactionAwareDataSourceProxy
      12: invokevirtual #8                  // Method org/springframework/jdbc/datasource/TransactionAwareDataSourceProxy.getTargetDataSource:()Ljavax/sql/DataSource;
      15: putfield      #9                  // Field dataSource:Ljavax/sql/DataSource;
      18: goto          26
      21: aload_0
      22: aload_1
      23: putfield      #9                  // Field dataSource:Ljavax/sql/DataSource;
      26: return

  public javax.sql.DataSource getDataSource();
    Code:
       0: aload_0
       1: getfield      #9                  // Field dataSource:Ljavax/sql/DataSource;
       4: areturn

  public void setEnforceReadOnly(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #2                  // Field enforceReadOnly:Z
       5: return

  public boolean isEnforceReadOnly();
    Code:
       0: aload_0
       1: getfield      #2                  // Field enforceReadOnly:Z
       4: ireturn

  public void afterPropertiesSet();
    Code:
       0: aload_0
       1: invokevirtual #10                 // Method getDataSource:()Ljavax/sql/DataSource;
       4: ifnonnull     17
       7: new           #11                 // class java/lang/IllegalArgumentException
      10: dup
      11: ldc           #12                 // String Property \'dataSource\' is required
      13: invokespecial #13                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: return

  public java.lang.Object getResourceFactory();
    Code:
       0: aload_0
       1: invokevirtual #10                 // Method getDataSource:()Ljavax/sql/DataSource;
       4: areturn

  protected java.lang.Object doGetTransaction();
    Code:
       0: new           #14                 // class org/springframework/jdbc/datasource/DataSourceTransactionManager$DataSourceTransactionObject
       3: dup
       4: aconst_null
       5: invokespecial #15                 // Method org/springframework/jdbc/datasource/DataSourceTransactionManager$DataSourceTransactionObject."<init>":(Lorg/springframework/jdbc/datasource/DataSourceTransactionManager$1;)V
       8: astore_1
       9: aload_1
      10: aload_0
      11: invokevirtual #16                 // Method isNestedTransactionAllowed:()Z
      14: invokevirtual #17                 // Method org/springframework/jdbc/datasource/DataSourceTransactionManager$DataSourceTransactionObject.setSavepointAllowed:(Z)V
      17: aload_0
      18: getfield      #9                  // Field dataSource:Ljavax/sql/DataSource;
      21: invokestatic  #18                 // Method org/springframework/transaction/support/TransactionSynchronizationManager.getResource:(Ljava/lang/Object;)Ljava/lang/Object;
      24: checkcast     #19                 // class org/springframework/jdbc/datasource/ConnectionHolder
      27: astore_2
      28: aload_1
      29: aload_2
      30: iconst_0
      31: invokevirtual #20                 // Method org/springframework/jdbc/datasource/DataSourceTransactionManager$DataSourceTransactionObject.setConnectionHolder:(Lorg/springframework/jdbc/datasource/ConnectionHolder;Z)V
      34: aload_1
      35: areturn

  protected boolean isExistingTransaction(java.lang.Object);
    Code:
       0: aload_1
       1: checkcast     #14                 // class org/springframework/jdbc/datasource/DataSourceTransactionManager$DataSourceTransactionObject
       4: astore_2
       5: aload_2
       6: invokevirtual #21                 // Method org/springframework/jdbc/datasource/DataSourceTransactionManager$DataSourceTransactionObject.hasConnectionHolder:()Z
       9: ifeq          26
      12: aload_2
      13: invokevirtual #22                 // Method org/springframework/jdbc/datasource/DataSourceTransactionManager$DataSourceTransactionObject.getConnectionHolder:()Lorg/springframework/jdbc/datasource/ConnectionHolder;
      16: invokevirtual #23                 // Method org/springframework/jdbc/datasource/ConnectionHolder.isTransactionActive:()Z
      19: ifeq          26
      22: iconst_1
      23: goto          27
      26: iconst_0
      27: ireturn

  protected void doBegin(java.lang.Object, org.springframework.transaction.TransactionDefinition);
    Code:
       0: aload_1
       1: checkcast     #14                 // class org/springframework/jdbc/datasource/DataSourceTransactionManager$DataSourceTransactionObject
       4: astore_3
       5: aconst_null
       6: astore        4
       8: aload_3
       9: invokevirtual #21                 // Method org/springframework/jdbc/datasource/DataSourceTransactionManager$DataSourceTransactionObject.hasConnectionHolder:()Z
      12: ifeq          25
      15: aload_3
      16: invokevirtual #22                 // Method org/springframework/jdbc/datasource/DataSourceTransactionManager$DataSourceTransactionObject.getConnectionHolder:()Lorg/springframework/jdbc/datasource/ConnectionHolder;
      19: invokevirtual #24                 // Method org/springframework/jdbc/datasource/ConnectionHolder.isSynchronizedWithTransaction:()Z
      22: ifeq          96
      25: aload_0
      26: getfield      #9                  // Field dataSource:Ljavax/sql/DataSource;
      29: invokeinterface #25,  1           // InterfaceMethod javax/sql/DataSource.getConnection:()Ljava/sql/Connection;
      34: astore        5
      36: aload_0
      37: getfield      #26                 // Field logger:Lorg/apache/commons/logging/Log;
      40: invokeinterface #27,  1           // InterfaceMethod org/apache/commons/logging/Log.isDebugEnabled:()Z
      45: ifeq          82
      48: aload_0
      49: getfield      #26                 // Field logger:Lorg/apache/commons/logging/Log;
      52: new           #28                 // class java/lang/StringBuilder
      55: dup
      56: invokespecial #29                 // Method java/lang/StringBuilder."<init>":()V
      59: ldc           #30                 // String Acquired Connection [
      61: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      64: aload         5
      66: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      69: ldc           #33                 // String ] for JDBC transaction
      71: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      74: invokevirtual #34                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      77: invokeinterface #35,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      82: aload_3
      83: new           #19                 // class org/springframework/jdbc/datasource/ConnectionHolder
      86: dup
      87: aload         5
      89: invokespecial #36                 // Method org/springframework/jdbc/datasource/ConnectionHolder."<init>":(Ljava/sql/Connection;)V
      92: iconst_1
      93: invokevirtual #20                 // Method org/springframework/jdbc/datasource/DataSourceTransactionManager$DataSourceTransactionObject.setConnectionHolder:(Lorg/springframework/jdbc/datasource/ConnectionHolder;Z)V
      96: aload_3
      97: invokevirtual #22                 // Method org/springframework/jdbc/datasource/DataSourceTransactionManager$DataSourceTransactionObject.getConnectionHolder:()Lorg/springframework/jdbc/datasource/ConnectionHolder;
     100: iconst_1
     101: invokevirtual #37                 // Method org/springframework/jdbc/datasource/ConnectionHolder.setSynchronizedWithTransaction:(Z)V
     104: aload_3
     105: invokevirtual #22                 // Method org/springframework/jdbc/datasource/DataSourceTransactionManager$DataSourceTransactionObject.getConnectionHolder:()Lorg/springframework/jdbc/datasource/ConnectionHolder;
     108: invokevirtual #38                 // Method org/springframework/jdbc/datasource/ConnectionHolder.getConnection:()Ljava/sql/Connection;
     111: astore        4
     113: aload         4
     115: aload_2
     116: invokestatic  #39                 // Method org/springframework/jdbc/datasource/DataSourceUtils.prepareConnectionForTransaction:(Ljava/sql/Connection;Lorg/springframework/transaction/TransactionDefinition;)Ljava/lang/Integer;
     119: astore        5
     121: aload_3
     122: aload         5
     124: invokevirtual #40                 // Method org/springframework/jdbc/datasource/DataSourceTransactionManager$DataSourceTransactionObject.setPreviousIsolationLevel:(Ljava/lang/Integer;)V
     127: aload         4
     129: invokeinterface #41,  1           // InterfaceMethod java/sql/Connection.getAutoCommit:()Z
     134: ifeq          196
     137: aload_3
     138: iconst_1
     139: invokevirtual #42                 // Method org/springframework/jdbc/datasource/DataSourceTransactionManager$DataSourceTransactionObject.setMustRestoreAutoCommit:(Z)V
     142: aload_0
     143: getfield      #26                 // Field logger:Lorg/apache/commons/logging/Log;
     146: invokeinterface #27,  1           // InterfaceMethod org/apache/commons/logging/Log.isDebugEnabled:()Z
     151: ifeq          188
     154: aload_0
     155: getfield      #26                 // Field logger:Lorg/apache/commons/logging/Log;
     158: new           #28                 // class java/lang/StringBuilder
     161: dup
     162: invokespecial #29                 // Method java/lang/StringBuilder."<init>":()V
     165: ldc           #43                 // String Switching JDBC Connection [
     167: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     170: aload         4
     172: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     175: ldc           #44                 // String ] to manual commit
     177: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     180: invokevirtual #34                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     183: invokeinterface #35,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
     188: aload         4
     190: iconst_0
     191: invokeinterface #45,  2           // InterfaceMethod java/sql/Connection.setAutoCommit:(Z)V
     196: aload_0
     197: aload         4
     199: aload_2
     200: invokevirtual #46                 // Method prepareTransactionalConnection:(Ljava/sql/Connection;Lorg/springframework/transaction/TransactionDefinition;)V
     203: aload_3
     204: invokevirtual #22                 // Method org/springframework/jdbc/datasource/DataSourceTransactionManager$DataSourceTransactionObject.getConnectionHolder:()Lorg/springframework/jdbc/datasource/ConnectionHolder;
     207: iconst_1
     208: invokevirtual #47                 // Method org/springframework/jdbc/datasource/ConnectionHolder.setTransactionActive:(Z)V
     211: aload_0
     212: aload_2
     213: invokevirtual #48                 // Method determineTimeout:(Lorg/springframework/transaction/TransactionDefinition;)I
     216: istore        6
     218: iload         6
     220: iconst_m1
     221: if_icmpeq     233
     224: aload_3
     225: invokevirtual #22                 // Method org/springframework/jdbc/datasource/DataSourceTransactionManager$DataSourceTransactionObject.getConnectionHolder:()Lorg/springframework/jdbc/datasource/ConnectionHolder;
     228: iload         6
     230: invokevirtual #50                 // Method org/springframework/jdbc/datasource/ConnectionHolder.setTimeoutInSeconds:(I)V
     233: aload_3
     234: invokevirtual #51                 // Method org/springframework/jdbc/datasource/DataSourceTransactionManager$DataSourceTransactionObject.isNewConnectionHolder:()Z
     237: ifeq          251
     240: aload_0
     241: invokevirtual #10                 // Method getDataSource:()Ljavax/sql/DataSource;
     244: aload_3
     245: invokevirtual #22                 // Method org/springframework/jdbc/datasource/DataSourceTransactionManager$DataSourceTransactionObject.getConnectionHolder:()Lorg/springframework/jdbc/datasource/ConnectionHolder;
     248: invokestatic  #52                 // Method org/springframework/transaction/support/TransactionSynchronizationManager.bindResource:(Ljava/lang/Object;Ljava/lang/Object;)V
     251: goto          290
     254: astore        5
     256: aload_3
     257: invokevirtual #51                 // Method org/springframework/jdbc/datasource/DataSourceTransactionManager$DataSourceTransactionObject.isNewConnectionHolder:()Z
     260: ifeq          278
     263: aload         4
     265: aload_0
     266: getfield      #9                  // Field dataSource:Ljavax/sql/DataSource;
     269: invokestatic  #54                 // Method org/springframework/jdbc/datasource/DataSourceUtils.releaseConnection:(Ljava/sql/Connection;Ljavax/sql/DataSource;)V
     272: aload_3
     273: aconst_null
     274: iconst_0
     275: invokevirtual #20                 // Method org/springframework/jdbc/datasource/DataSourceTransactionManager$DataSourceTransactionObject.setConnectionHolder:(Lorg/springframework/jdbc/datasource/ConnectionHolder;Z)V
     278: new           #55                 // class org/springframework/transaction/CannotCreateTransactionException
     281: dup
     282: ldc           #56                 // String Could not open JDBC Connection for transaction
     284: aload         5
     286: invokespecial #57                 // Method org/springframework/transaction/CannotCreateTransactionException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
     289: athrow
     290: return
    Exception table:
       from    to  target type
           8   251   254   Class java/lang/Throwable

  protected java.lang.Object doSuspend(java.lang.Object);
    Code:
       0: aload_1
       1: checkcast     #14                 // class org/springframework/jdbc/datasource/DataSourceTransactionManager$DataSourceTransactionObject
       4: astore_2
       5: aload_2
       6: aconst_null
       7: invokevirtual #58                 // Method org/springframework/jdbc/datasource/DataSourceTransactionManager$DataSourceTransactionObject.setConnectionHolder:(Lorg/springframework/jdbc/datasource/ConnectionHolder;)V
      10: aload_0
      11: getfield      #9                  // Field dataSource:Ljavax/sql/DataSource;
      14: invokestatic  #59                 // Method org/springframework/transaction/support/TransactionSynchronizationManager.unbindResource:(Ljava/lang/Object;)Ljava/lang/Object;
      17: areturn

  protected void doResume(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #9                  // Field dataSource:Ljavax/sql/DataSource;
       4: aload_2
       5: invokestatic  #52                 // Method org/springframework/transaction/support/TransactionSynchronizationManager.bindResource:(Ljava/lang/Object;Ljava/lang/Object;)V
       8: return

  protected void doCommit(org.springframework.transaction.support.DefaultTransactionStatus);
    Code:
       0: aload_1
       1: invokevirtual #60                 // Method org/springframework/transaction/support/DefaultTransactionStatus.getTransaction:()Ljava/lang/Object;
       4: checkcast     #14                 // class org/springframework/jdbc/datasource/DataSourceTransactionManager$DataSourceTransactionObject
       7: astore_2
       8: aload_2
       9: invokevirtual #22                 // Method org/springframework/jdbc/datasource/DataSourceTransactionManager$DataSourceTransactionObject.getConnectionHolder:()Lorg/springframework/jdbc/datasource/ConnectionHolder;
      12: invokevirtual #38                 // Method org/springframework/jdbc/datasource/ConnectionHolder.getConnection:()Ljava/sql/Connection;
      15: astore_3
      16: aload_1
      17: invokevirtual #61                 // Method org/springframework/transaction/support/DefaultTransactionStatus.isDebug:()Z
      20: ifeq          56
      23: aload_0
      24: getfield      #26                 // Field logger:Lorg/apache/commons/logging/Log;
      27: new           #28                 // class java/lang/StringBuilder
      30: dup
      31: invokespecial #29                 // Method java/lang/StringBuilder."<init>":()V
      34: ldc           #62                 // String Committing JDBC transaction on Connection [
      36: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      39: aload_3
      40: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      43: ldc           #63                 // String ]
      45: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      48: invokevirtual #34                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      51: invokeinterface #35,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      56: aload_3
      57: invokeinterface #64,  1           // InterfaceMethod java/sql/Connection.commit:()V
      62: goto          79
      65: astore        4
      67: new           #66                 // class org/springframework/transaction/TransactionSystemException
      70: dup
      71: ldc           #67                 // String Could not commit JDBC transaction
      73: aload         4
      75: invokespecial #68                 // Method org/springframework/transaction/TransactionSystemException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      78: athrow
      79: return
    Exception table:
       from    to  target type
          56    62    65   Class java/sql/SQLException

  protected void doRollback(org.springframework.transaction.support.DefaultTransactionStatus);
    Code:
       0: aload_1
       1: invokevirtual #60                 // Method org/springframework/transaction/support/DefaultTransactionStatus.getTransaction:()Ljava/lang/Object;
       4: checkcast     #14                 // class org/springframework/jdbc/datasource/DataSourceTransactionManager$DataSourceTransactionObject
       7: astore_2
       8: aload_2
       9: invokevirtual #22                 // Method org/springframework/jdbc/datasource/DataSourceTransactionManager$DataSourceTransactionObject.getConnectionHolder:()Lorg/springframework/jdbc/datasource/ConnectionHolder;
      12: invokevirtual #38                 // Method org/springframework/jdbc/datasource/ConnectionHolder.getConnection:()Ljava/sql/Connection;
      15: astore_3
      16: aload_1
      17: invokevirtual #61                 // Method org/springframework/transaction/support/DefaultTransactionStatus.isDebug:()Z
      20: ifeq          56
      23: aload_0
      24: getfield      #26                 // Field logger:Lorg/apache/commons/logging/Log;
      27: new           #28                 // class java/lang/StringBuilder
      30: dup
      31: invokespecial #29                 // Method java/lang/StringBuilder."<init>":()V
      34: ldc           #69                 // String Rolling back JDBC transaction on Connection [
      36: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      39: aload_3
      40: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      43: ldc           #63                 // String ]
      45: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      48: invokevirtual #34                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      51: invokeinterface #35,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      56: aload_3
      57: invokeinterface #70,  1           // InterfaceMethod java/sql/Connection.rollback:()V
      62: goto          79
      65: astore        4
      67: new           #66                 // class org/springframework/transaction/TransactionSystemException
      70: dup
      71: ldc           #71                 // String Could not roll back JDBC transaction
      73: aload         4
      75: invokespecial #68                 // Method org/springframework/transaction/TransactionSystemException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      78: athrow
      79: return
    Exception table:
       from    to  target type
          56    62    65   Class java/sql/SQLException

  protected void doSetRollbackOnly(org.springframework.transaction.support.DefaultTransactionStatus);
    Code:
       0: aload_1
       1: invokevirtual #60                 // Method org/springframework/transaction/support/DefaultTransactionStatus.getTransaction:()Ljava/lang/Object;
       4: checkcast     #14                 // class org/springframework/jdbc/datasource/DataSourceTransactionManager$DataSourceTransactionObject
       7: astore_2
       8: aload_1
       9: invokevirtual #61                 // Method org/springframework/transaction/support/DefaultTransactionStatus.isDebug:()Z
      12: ifeq          54
      15: aload_0
      16: getfield      #26                 // Field logger:Lorg/apache/commons/logging/Log;
      19: new           #28                 // class java/lang/StringBuilder
      22: dup
      23: invokespecial #29                 // Method java/lang/StringBuilder."<init>":()V
      26: ldc           #72                 // String Setting JDBC transaction [
      28: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      31: aload_2
      32: invokevirtual #22                 // Method org/springframework/jdbc/datasource/DataSourceTransactionManager$DataSourceTransactionObject.getConnectionHolder:()Lorg/springframework/jdbc/datasource/ConnectionHolder;
      35: invokevirtual #38                 // Method org/springframework/jdbc/datasource/ConnectionHolder.getConnection:()Ljava/sql/Connection;
      38: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      41: ldc           #73                 // String ] rollback-only
      43: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      46: invokevirtual #34                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      49: invokeinterface #35,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      54: aload_2
      55: invokevirtual #74                 // Method org/springframework/jdbc/datasource/DataSourceTransactionManager$DataSourceTransactionObject.setRollbackOnly:()V
      58: return

  protected void doCleanupAfterCompletion(java.lang.Object);
    Code:
       0: aload_1
       1: checkcast     #14                 // class org/springframework/jdbc/datasource/DataSourceTransactionManager$DataSourceTransactionObject
       4: astore_2
       5: aload_2
       6: invokevirtual #51                 // Method org/springframework/jdbc/datasource/DataSourceTransactionManager$DataSourceTransactionObject.isNewConnectionHolder:()Z
       9: ifeq          20
      12: aload_0
      13: getfield      #9                  // Field dataSource:Ljavax/sql/DataSource;
      16: invokestatic  #59                 // Method org/springframework/transaction/support/TransactionSynchronizationManager.unbindResource:(Ljava/lang/Object;)Ljava/lang/Object;
      19: pop
      20: aload_2
      21: invokevirtual #22                 // Method org/springframework/jdbc/datasource/DataSourceTransactionManager$DataSourceTransactionObject.getConnectionHolder:()Lorg/springframework/jdbc/datasource/ConnectionHolder;
      24: invokevirtual #38                 // Method org/springframework/jdbc/datasource/ConnectionHolder.getConnection:()Ljava/sql/Connection;
      27: astore_3
      28: aload_2
      29: invokevirtual #75                 // Method org/springframework/jdbc/datasource/DataSourceTransactionManager$DataSourceTransactionObject.isMustRestoreAutoCommit:()Z
      32: ifeq          42
      35: aload_3
      36: iconst_1
      37: invokeinterface #45,  2           // InterfaceMethod java/sql/Connection.setAutoCommit:(Z)V
      42: aload_3
      43: aload_2
      44: invokevirtual #76                 // Method org/springframework/jdbc/datasource/DataSourceTransactionManager$DataSourceTransactionObject.getPreviousIsolationLevel:()Ljava/lang/Integer;
      47: invokestatic  #77                 // Method org/springframework/jdbc/datasource/DataSourceUtils.resetConnectionAfterTransaction:(Ljava/sql/Connection;Ljava/lang/Integer;)V
      50: goto          68
      53: astore        4
      55: aload_0
      56: getfield      #26                 // Field logger:Lorg/apache/commons/logging/Log;
      59: ldc           #78                 // String Could not reset JDBC Connection after transaction
      61: aload         4
      63: invokeinterface #79,  3           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;Ljava/lang/Throwable;)V
      68: aload_2
      69: invokevirtual #51                 // Method org/springframework/jdbc/datasource/DataSourceTransactionManager$DataSourceTransactionObject.isNewConnectionHolder:()Z
      72: ifeq          128
      75: aload_0
      76: getfield      #26                 // Field logger:Lorg/apache/commons/logging/Log;
      79: invokeinterface #27,  1           // InterfaceMethod org/apache/commons/logging/Log.isDebugEnabled:()Z
      84: ifeq          120
      87: aload_0
      88: getfield      #26                 // Field logger:Lorg/apache/commons/logging/Log;
      91: new           #28                 // class java/lang/StringBuilder
      94: dup
      95: invokespecial #29                 // Method java/lang/StringBuilder."<init>":()V
      98: ldc           #80                 // String Releasing JDBC Connection [
     100: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     103: aload_3
     104: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     107: ldc           #81                 // String ] after transaction
     109: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     112: invokevirtual #34                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     115: invokeinterface #35,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
     120: aload_3
     121: aload_0
     122: getfield      #9                  // Field dataSource:Ljavax/sql/DataSource;
     125: invokestatic  #54                 // Method org/springframework/jdbc/datasource/DataSourceUtils.releaseConnection:(Ljava/sql/Connection;Ljavax/sql/DataSource;)V
     128: aload_2
     129: invokevirtual #22                 // Method org/springframework/jdbc/datasource/DataSourceTransactionManager$DataSourceTransactionObject.getConnectionHolder:()Lorg/springframework/jdbc/datasource/ConnectionHolder;
     132: invokevirtual #82                 // Method org/springframework/jdbc/datasource/ConnectionHolder.clear:()V
     135: return
    Exception table:
       from    to  target type
          28    50    53   Class java/lang/Throwable

  protected void prepareTransactionalConnection(java.sql.Connection, org.springframework.transaction.TransactionDefinition) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: invokevirtual #83                 // Method isEnforceReadOnly:()Z
       4: ifeq          52
       7: aload_2
       8: invokeinterface #84,  1           // InterfaceMethod org/springframework/transaction/TransactionDefinition.isReadOnly:()Z
      13: ifeq          52
      16: aload_1
      17: invokeinterface #85,  1           // InterfaceMethod java/sql/Connection.createStatement:()Ljava/sql/Statement;
      22: astore_3
      23: aload_3
      24: ldc           #86                 // String SET TRANSACTION READ ONLY
      26: invokeinterface #87,  2           // InterfaceMethod java/sql/Statement.executeUpdate:(Ljava/lang/String;)I
      31: pop
      32: aload_3
      33: invokeinterface #88,  1           // InterfaceMethod java/sql/Statement.close:()V
      38: goto          52
      41: astore        4
      43: aload_3
      44: invokeinterface #88,  1           // InterfaceMethod java/sql/Statement.close:()V
      49: aload         4
      51: athrow
      52: return
    Exception table:
       from    to  target type
          23    32    41   any
          41    43    41   any
}
