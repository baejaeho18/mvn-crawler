Compiled from "JdbcAccessor.java"
public abstract class org.springframework.jdbc.support.JdbcAccessor implements org.springframework.beans.factory.InitializingBean {
  protected final org.apache.commons.logging.Log logger;

  private javax.sql.DataSource dataSource;

  private volatile org.springframework.jdbc.support.SQLExceptionTranslator exceptionTranslator;

  private boolean lazyInit;

  public org.springframework.jdbc.support.JdbcAccessor();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_0
       6: invokevirtual #2                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
       9: invokestatic  #3                  // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
      12: putfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      15: aload_0
      16: iconst_1
      17: putfield      #5                  // Field lazyInit:Z
      20: return

  public void setDataSource(javax.sql.DataSource);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #6                  // Field dataSource:Ljavax/sql/DataSource;
       5: return

  public javax.sql.DataSource getDataSource();
    Code:
       0: aload_0
       1: getfield      #6                  // Field dataSource:Ljavax/sql/DataSource;
       4: areturn

  public void setDatabaseProductName(java.lang.String);
    Code:
       0: aload_0
       1: new           #7                  // class org/springframework/jdbc/support/SQLErrorCodeSQLExceptionTranslator
       4: dup
       5: aload_1
       6: invokespecial #8                  // Method org/springframework/jdbc/support/SQLErrorCodeSQLExceptionTranslator."<init>":(Ljava/lang/String;)V
       9: putfield      #9                  // Field exceptionTranslator:Lorg/springframework/jdbc/support/SQLExceptionTranslator;
      12: return

  public void setExceptionTranslator(org.springframework.jdbc.support.SQLExceptionTranslator);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #9                  // Field exceptionTranslator:Lorg/springframework/jdbc/support/SQLExceptionTranslator;
       5: return

  public org.springframework.jdbc.support.SQLExceptionTranslator getExceptionTranslator();
    Code:
       0: aload_0
       1: getfield      #9                  // Field exceptionTranslator:Lorg/springframework/jdbc/support/SQLExceptionTranslator;
       4: astore_1
       5: aload_1
       6: ifnull        11
       9: aload_1
      10: areturn
      11: aload_0
      12: dup
      13: astore_2
      14: monitorenter
      15: aload_0
      16: getfield      #9                  // Field exceptionTranslator:Lorg/springframework/jdbc/support/SQLExceptionTranslator;
      19: astore_1
      20: aload_1
      21: ifnonnull     58
      24: aload_0
      25: invokevirtual #10                 // Method getDataSource:()Ljavax/sql/DataSource;
      28: astore_3
      29: aload_3
      30: ifnull        45
      33: new           #7                  // class org/springframework/jdbc/support/SQLErrorCodeSQLExceptionTranslator
      36: dup
      37: aload_3
      38: invokespecial #11                 // Method org/springframework/jdbc/support/SQLErrorCodeSQLExceptionTranslator."<init>":(Ljavax/sql/DataSource;)V
      41: astore_1
      42: goto          53
      45: new           #12                 // class org/springframework/jdbc/support/SQLStateSQLExceptionTranslator
      48: dup
      49: invokespecial #13                 // Method org/springframework/jdbc/support/SQLStateSQLExceptionTranslator."<init>":()V
      52: astore_1
      53: aload_0
      54: aload_1
      55: putfield      #9                  // Field exceptionTranslator:Lorg/springframework/jdbc/support/SQLExceptionTranslator;
      58: aload_1
      59: aload_2
      60: monitorexit
      61: areturn
      62: astore        4
      64: aload_2
      65: monitorexit
      66: aload         4
      68: athrow
    Exception table:
       from    to  target type
          15    61    62   any
          62    66    62   any

  public void setLazyInit(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #5                  // Field lazyInit:Z
       5: return

  public boolean isLazyInit();
    Code:
       0: aload_0
       1: getfield      #5                  // Field lazyInit:Z
       4: ireturn

  public void afterPropertiesSet();
    Code:
       0: aload_0
       1: invokevirtual #10                 // Method getDataSource:()Ljavax/sql/DataSource;
       4: ifnonnull     17
       7: new           #14                 // class java/lang/IllegalArgumentException
      10: dup
      11: ldc           #15                 // String Property \'dataSource\' is required
      13: invokespecial #16                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: invokevirtual #17                 // Method isLazyInit:()Z
      21: ifne          29
      24: aload_0
      25: invokevirtual #18                 // Method getExceptionTranslator:()Lorg/springframework/jdbc/support/SQLExceptionTranslator;
      28: pop
      29: return
}
