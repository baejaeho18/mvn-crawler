Compiled from "DefaultUserSessionRegistry.java"
public class org.springframework.messaging.simp.user.DefaultUserSessionRegistry implements org.springframework.messaging.simp.user.UserSessionRegistry {
  private final java.util.concurrent.ConcurrentMap<java.lang.String, java.util.Set<java.lang.String>> userSessionIds;

  private final java.lang.Object lock;

  public org.springframework.messaging.simp.user.DefaultUserSessionRegistry();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/concurrent/ConcurrentHashMap
       8: dup
       9: invokespecial #3                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      12: putfield      #4                  // Field userSessionIds:Ljava/util/concurrent/ConcurrentMap;
      15: aload_0
      16: new           #5                  // class java/lang/Object
      19: dup
      20: invokespecial #1                  // Method java/lang/Object."<init>":()V
      23: putfield      #6                  // Field lock:Ljava/lang/Object;
      26: return

  public java.util.Set<java.lang.String> getSessionIds(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #4                  // Field userSessionIds:Ljava/util/concurrent/ConcurrentMap;
       4: aload_1
       5: invokeinterface #7,  2            // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #8                  // class java/util/Set
      13: astore_2
      14: aload_2
      15: ifnull        22
      18: aload_2
      19: goto          25
      22: invokestatic  #9                  // Method java/util/Collections.emptySet:()Ljava/util/Set;
      25: areturn

  public void registerSessionId(java.lang.String, java.lang.String);
    Code:
       0: aload_1
       1: ldc           #10                 // String User must not be null
       3: invokestatic  #11                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_2
       7: ldc           #12                 // String Session ID must not be null
       9: invokestatic  #11                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      12: aload_0
      13: getfield      #6                  // Field lock:Ljava/lang/Object;
      16: dup
      17: astore_3
      18: monitorenter
      19: aload_0
      20: getfield      #4                  // Field userSessionIds:Ljava/util/concurrent/ConcurrentMap;
      23: aload_1
      24: invokeinterface #7,  2            // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      29: checkcast     #8                  // class java/util/Set
      32: astore        4
      34: aload         4
      36: ifnonnull     61
      39: new           #13                 // class java/util/concurrent/CopyOnWriteArraySet
      42: dup
      43: invokespecial #14                 // Method java/util/concurrent/CopyOnWriteArraySet."<init>":()V
      46: astore        4
      48: aload_0
      49: getfield      #4                  // Field userSessionIds:Ljava/util/concurrent/ConcurrentMap;
      52: aload_1
      53: aload         4
      55: invokeinterface #15,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      60: pop
      61: aload         4
      63: aload_2
      64: invokeinterface #16,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      69: pop
      70: aload_3
      71: monitorexit
      72: goto          82
      75: astore        5
      77: aload_3
      78: monitorexit
      79: aload         5
      81: athrow
      82: return
    Exception table:
       from    to  target type
          19    72    75   any
          75    79    75   any

  public void unregisterSessionId(java.lang.String, java.lang.String);
    Code:
       0: aload_1
       1: ldc           #17                 // String User Name must not be null
       3: invokestatic  #11                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_2
       7: ldc           #12                 // String Session ID must not be null
       9: invokestatic  #11                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      12: aload_0
      13: getfield      #6                  // Field lock:Ljava/lang/Object;
      16: dup
      17: astore_3
      18: monitorenter
      19: aload_0
      20: getfield      #4                  // Field userSessionIds:Ljava/util/concurrent/ConcurrentMap;
      23: aload_1
      24: invokeinterface #7,  2            // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      29: checkcast     #8                  // class java/util/Set
      32: astore        4
      34: aload         4
      36: ifnull        71
      39: aload         4
      41: aload_2
      42: invokeinterface #18,  2           // InterfaceMethod java/util/Set.remove:(Ljava/lang/Object;)Z
      47: ifeq          71
      50: aload         4
      52: invokeinterface #19,  1           // InterfaceMethod java/util/Set.isEmpty:()Z
      57: ifeq          71
      60: aload_0
      61: getfield      #4                  // Field userSessionIds:Ljava/util/concurrent/ConcurrentMap;
      64: aload_1
      65: invokeinterface #20,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      70: pop
      71: aload_3
      72: monitorexit
      73: goto          83
      76: astore        5
      78: aload_3
      79: monitorexit
      80: aload         5
      82: athrow
      83: return
    Exception table:
       from    to  target type
          19    73    76   any
          76    80    76   any
}
