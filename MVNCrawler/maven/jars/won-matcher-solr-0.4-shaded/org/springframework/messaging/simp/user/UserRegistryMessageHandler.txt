Compiled from "UserRegistryMessageHandler.java"
public class org.springframework.messaging.simp.user.UserRegistryMessageHandler implements org.springframework.messaging.MessageHandler, org.springframework.context.ApplicationListener<org.springframework.messaging.simp.broker.BrokerAvailabilityEvent> {
  private final org.springframework.messaging.simp.user.MultiServerUserRegistry userRegistry;

  private final org.springframework.messaging.simp.SimpMessagingTemplate brokerTemplate;

  private final java.lang.String broadcastDestination;

  private final org.springframework.scheduling.TaskScheduler scheduler;

  private final org.springframework.messaging.simp.user.UserRegistryMessageHandler$UserRegistryTask schedulerTask;

  private volatile java.util.concurrent.ScheduledFuture<?> scheduledFuture;

  private long registryExpirationPeriod;

  public org.springframework.messaging.simp.user.UserRegistryMessageHandler(org.springframework.messaging.simp.user.MultiServerUserRegistry, org.springframework.messaging.simp.SimpMessagingTemplate, java.lang.String, org.springframework.scheduling.TaskScheduler);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #4                  // class org/springframework/messaging/simp/user/UserRegistryMessageHandler$UserRegistryTask
       8: dup
       9: aload_0
      10: aconst_null
      11: invokespecial #5                  // Method org/springframework/messaging/simp/user/UserRegistryMessageHandler$UserRegistryTask."<init>":(Lorg/springframework/messaging/simp/user/UserRegistryMessageHandler;Lorg/springframework/messaging/simp/user/UserRegistryMessageHandler$1;)V
      14: putfield      #6                  // Field schedulerTask:Lorg/springframework/messaging/simp/user/UserRegistryMessageHandler$UserRegistryTask;
      17: aload_0
      18: ldc2_w        #7                  // long 20000l
      21: putfield      #9                  // Field registryExpirationPeriod:J
      24: aload_1
      25: ldc           #10                 // String \'userRegistry\' is required
      27: invokestatic  #11                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      30: aload_2
      31: ldc           #12                 // String \'brokerTemplate\' is required
      33: invokestatic  #11                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      36: aload_3
      37: ldc           #13                 // String \'broadcastDestination\' is required
      39: invokestatic  #14                 // Method org/springframework/util/Assert.hasText:(Ljava/lang/String;Ljava/lang/String;)V
      42: aload         4
      44: ldc           #15                 // String \'scheduler\' is required
      46: invokestatic  #11                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      49: aload_0
      50: aload_1
      51: putfield      #2                  // Field userRegistry:Lorg/springframework/messaging/simp/user/MultiServerUserRegistry;
      54: aload_0
      55: aload_2
      56: putfield      #1                  // Field brokerTemplate:Lorg/springframework/messaging/simp/SimpMessagingTemplate;
      59: aload_0
      60: aload_3
      61: putfield      #16                 // Field broadcastDestination:Ljava/lang/String;
      64: aload_0
      65: aload         4
      67: putfield      #17                 // Field scheduler:Lorg/springframework/scheduling/TaskScheduler;
      70: return

  public java.lang.String getBroadcastDestination();
    Code:
       0: aload_0
       1: getfield      #16                 // Field broadcastDestination:Ljava/lang/String;
       4: areturn

  public void setRegistryExpirationPeriod(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #9                  // Field registryExpirationPeriod:J
       5: return

  public long getRegistryExpirationPeriod();
    Code:
       0: aload_0
       1: getfield      #9                  // Field registryExpirationPeriod:J
       4: lreturn

  public void onApplicationEvent(org.springframework.messaging.simp.broker.BrokerAvailabilityEvent);
    Code:
       0: aload_1
       1: invokevirtual #18                 // Method org/springframework/messaging/simp/broker/BrokerAvailabilityEvent.isBrokerAvailable:()Z
       4: ifeq          37
       7: aload_0
       8: invokevirtual #19                 // Method getRegistryExpirationPeriod:()J
      11: ldc2_w        #20                 // long 2l
      14: ldiv
      15: lstore_2
      16: aload_0
      17: aload_0
      18: getfield      #17                 // Field scheduler:Lorg/springframework/scheduling/TaskScheduler;
      21: aload_0
      22: getfield      #6                  // Field schedulerTask:Lorg/springframework/messaging/simp/user/UserRegistryMessageHandler$UserRegistryTask;
      25: lload_2
      26: invokeinterface #22,  4           // InterfaceMethod org/springframework/scheduling/TaskScheduler.scheduleWithFixedDelay:(Ljava/lang/Runnable;J)Ljava/util/concurrent/ScheduledFuture;
      31: putfield      #23                 // Field scheduledFuture:Ljava/util/concurrent/ScheduledFuture;
      34: goto          59
      37: aload_0
      38: getfield      #23                 // Field scheduledFuture:Ljava/util/concurrent/ScheduledFuture;
      41: astore_2
      42: aload_2
      43: ifnull        59
      46: aload_2
      47: iconst_1
      48: invokeinterface #24,  2           // InterfaceMethod java/util/concurrent/ScheduledFuture.cancel:(Z)Z
      53: pop
      54: aload_0
      55: aconst_null
      56: putfield      #23                 // Field scheduledFuture:Ljava/util/concurrent/ScheduledFuture;
      59: return

  public void handleMessage(org.springframework.messaging.Message<?>) throws org.springframework.messaging.MessagingException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field brokerTemplate:Lorg/springframework/messaging/simp/SimpMessagingTemplate;
       4: invokevirtual #25                 // Method org/springframework/messaging/simp/SimpMessagingTemplate.getMessageConverter:()Lorg/springframework/messaging/converter/MessageConverter;
       7: astore_2
       8: aload_0
       9: getfield      #2                  // Field userRegistry:Lorg/springframework/messaging/simp/user/MultiServerUserRegistry;
      12: aload_1
      13: aload_2
      14: aload_0
      15: invokevirtual #19                 // Method getRegistryExpirationPeriod:()J
      18: invokevirtual #26                 // Method org/springframework/messaging/simp/user/MultiServerUserRegistry.addRemoteRegistryDto:(Lorg/springframework/messaging/Message;Lorg/springframework/messaging/converter/MessageConverter;J)V
      21: return

  public void onApplicationEvent(org.springframework.context.ApplicationEvent);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #27                 // class org/springframework/messaging/simp/broker/BrokerAvailabilityEvent
       5: invokevirtual #28                 // Method onApplicationEvent:(Lorg/springframework/messaging/simp/broker/BrokerAvailabilityEvent;)V
       8: return

  static org.springframework.messaging.simp.user.MultiServerUserRegistry access$100(org.springframework.messaging.simp.user.UserRegistryMessageHandler);
    Code:
       0: aload_0
       1: getfield      #2                  // Field userRegistry:Lorg/springframework/messaging/simp/user/MultiServerUserRegistry;
       4: areturn

  static org.springframework.messaging.simp.SimpMessagingTemplate access$200(org.springframework.messaging.simp.user.UserRegistryMessageHandler);
    Code:
       0: aload_0
       1: getfield      #1                  // Field brokerTemplate:Lorg/springframework/messaging/simp/SimpMessagingTemplate;
       4: areturn
}
