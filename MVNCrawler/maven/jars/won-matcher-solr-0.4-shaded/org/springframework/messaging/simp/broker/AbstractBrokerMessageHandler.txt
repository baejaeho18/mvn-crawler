Compiled from "AbstractBrokerMessageHandler.java"
public abstract class org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler implements org.springframework.messaging.MessageHandler,org.springframework.context.ApplicationEventPublisherAware,org.springframework.context.SmartLifecycle {
  protected final org.apache.commons.logging.Log logger;

  private final org.springframework.messaging.SubscribableChannel clientInboundChannel;

  private final org.springframework.messaging.MessageChannel clientOutboundChannel;

  private final org.springframework.messaging.SubscribableChannel brokerChannel;

  private final java.util.Collection<java.lang.String> destinationPrefixes;

  private org.springframework.context.ApplicationEventPublisher eventPublisher;

  private java.util.concurrent.atomic.AtomicBoolean brokerAvailable;

  private final org.springframework.messaging.simp.broker.BrokerAvailabilityEvent availableEvent;

  private final org.springframework.messaging.simp.broker.BrokerAvailabilityEvent notAvailableEvent;

  private boolean autoStartup;

  private volatile boolean running;

  private final java.lang.Object lifecycleMonitor;

  private final org.springframework.messaging.support.ChannelInterceptor unsentDisconnectInterceptor;

  public org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler(org.springframework.messaging.SubscribableChannel, org.springframework.messaging.MessageChannel, org.springframework.messaging.SubscribableChannel);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1                  // Method java/util/Collections.emptyList:()Ljava/util/List;
       7: invokespecial #2                  // Method "<init>":(Lorg/springframework/messaging/SubscribableChannel;Lorg/springframework/messaging/MessageChannel;Lorg/springframework/messaging/SubscribableChannel;Ljava/util/Collection;)V
      10: return

  public org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler(org.springframework.messaging.SubscribableChannel, org.springframework.messaging.MessageChannel, org.springframework.messaging.SubscribableChannel, java.util.Collection<java.lang.String>);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_0
       6: invokevirtual #4                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
       9: invokestatic  #5                  // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
      12: putfield      #6                  // Field logger:Lorg/apache/commons/logging/Log;
      15: aload_0
      16: new           #7                  // class java/util/concurrent/atomic/AtomicBoolean
      19: dup
      20: iconst_0
      21: invokespecial #8                  // Method java/util/concurrent/atomic/AtomicBoolean."<init>":(Z)V
      24: putfield      #9                  // Field brokerAvailable:Ljava/util/concurrent/atomic/AtomicBoolean;
      27: aload_0
      28: new           #10                 // class org/springframework/messaging/simp/broker/BrokerAvailabilityEvent
      31: dup
      32: iconst_1
      33: aload_0
      34: invokespecial #11                 // Method org/springframework/messaging/simp/broker/BrokerAvailabilityEvent."<init>":(ZLjava/lang/Object;)V
      37: putfield      #12                 // Field availableEvent:Lorg/springframework/messaging/simp/broker/BrokerAvailabilityEvent;
      40: aload_0
      41: new           #10                 // class org/springframework/messaging/simp/broker/BrokerAvailabilityEvent
      44: dup
      45: iconst_0
      46: aload_0
      47: invokespecial #11                 // Method org/springframework/messaging/simp/broker/BrokerAvailabilityEvent."<init>":(ZLjava/lang/Object;)V
      50: putfield      #13                 // Field notAvailableEvent:Lorg/springframework/messaging/simp/broker/BrokerAvailabilityEvent;
      53: aload_0
      54: iconst_1
      55: putfield      #14                 // Field autoStartup:Z
      58: aload_0
      59: iconst_0
      60: putfield      #15                 // Field running:Z
      63: aload_0
      64: new           #16                 // class java/lang/Object
      67: dup
      68: invokespecial #3                  // Method java/lang/Object."<init>":()V
      71: putfield      #17                 // Field lifecycleMonitor:Ljava/lang/Object;
      74: aload_0
      75: new           #18                 // class org/springframework/messaging/simp/broker/AbstractBrokerMessageHandler$UnsentDisconnectChannelInterceptor
      78: dup
      79: aload_0
      80: aconst_null
      81: invokespecial #19                 // Method org/springframework/messaging/simp/broker/AbstractBrokerMessageHandler$UnsentDisconnectChannelInterceptor."<init>":(Lorg/springframework/messaging/simp/broker/AbstractBrokerMessageHandler;Lorg/springframework/messaging/simp/broker/AbstractBrokerMessageHandler$1;)V
      84: putfield      #20                 // Field unsentDisconnectInterceptor:Lorg/springframework/messaging/support/ChannelInterceptor;
      87: aload_1
      88: ldc           #21                 // String \'inboundChannel\' must not be null
      90: invokestatic  #22                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      93: aload_2
      94: ldc           #23                 // String \'outboundChannel\' must not be null
      96: invokestatic  #22                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      99: aload_3
     100: ldc           #24                 // String \'brokerChannel\' must not be null
     102: invokestatic  #22                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
     105: aload_0
     106: aload_1
     107: putfield      #25                 // Field clientInboundChannel:Lorg/springframework/messaging/SubscribableChannel;
     110: aload_0
     111: aload_2
     112: putfield      #26                 // Field clientOutboundChannel:Lorg/springframework/messaging/MessageChannel;
     115: aload_0
     116: aload_3
     117: putfield      #27                 // Field brokerChannel:Lorg/springframework/messaging/SubscribableChannel;
     120: aload         4
     122: ifnull        130
     125: aload         4
     127: goto          133
     130: invokestatic  #1                  // Method java/util/Collections.emptyList:()Ljava/util/List;
     133: astore        4
     135: aload_0
     136: aload         4
     138: invokestatic  #28                 // Method java/util/Collections.unmodifiableCollection:(Ljava/util/Collection;)Ljava/util/Collection;
     141: putfield      #29                 // Field destinationPrefixes:Ljava/util/Collection;
     144: return

  public org.springframework.messaging.SubscribableChannel getClientInboundChannel();
    Code:
       0: aload_0
       1: getfield      #25                 // Field clientInboundChannel:Lorg/springframework/messaging/SubscribableChannel;
       4: areturn

  public org.springframework.messaging.MessageChannel getClientOutboundChannel();
    Code:
       0: aload_0
       1: getfield      #26                 // Field clientOutboundChannel:Lorg/springframework/messaging/MessageChannel;
       4: areturn

  public org.springframework.messaging.SubscribableChannel getBrokerChannel();
    Code:
       0: aload_0
       1: getfield      #27                 // Field brokerChannel:Lorg/springframework/messaging/SubscribableChannel;
       4: areturn

  public java.util.Collection<java.lang.String> getDestinationPrefixes();
    Code:
       0: aload_0
       1: getfield      #29                 // Field destinationPrefixes:Ljava/util/Collection;
       4: areturn

  public void setApplicationEventPublisher(org.springframework.context.ApplicationEventPublisher);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #30                 // Field eventPublisher:Lorg/springframework/context/ApplicationEventPublisher;
       5: return

  public org.springframework.context.ApplicationEventPublisher getApplicationEventPublisher();
    Code:
       0: aload_0
       1: getfield      #30                 // Field eventPublisher:Lorg/springframework/context/ApplicationEventPublisher;
       4: areturn

  public void setAutoStartup(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #14                 // Field autoStartup:Z
       5: return

  public boolean isAutoStartup();
    Code:
       0: aload_0
       1: getfield      #14                 // Field autoStartup:Z
       4: ireturn

  public int getPhase();
    Code:
       0: ldc           #32                 // int 2147483647
       2: ireturn

  public void start();
    Code:
       0: aload_0
       1: getfield      #17                 // Field lifecycleMonitor:Ljava/lang/Object;
       4: dup
       5: astore_1
       6: monitorenter
       7: aload_0
       8: getfield      #6                  // Field logger:Lorg/apache/commons/logging/Log;
      11: ldc           #33                 // String Starting...
      13: invokeinterface #34,  2           // InterfaceMethod org/apache/commons/logging/Log.info:(Ljava/lang/Object;)V
      18: aload_0
      19: getfield      #25                 // Field clientInboundChannel:Lorg/springframework/messaging/SubscribableChannel;
      22: aload_0
      23: invokeinterface #35,  2           // InterfaceMethod org/springframework/messaging/SubscribableChannel.subscribe:(Lorg/springframework/messaging/MessageHandler;)Z
      28: pop
      29: aload_0
      30: getfield      #27                 // Field brokerChannel:Lorg/springframework/messaging/SubscribableChannel;
      33: aload_0
      34: invokeinterface #35,  2           // InterfaceMethod org/springframework/messaging/SubscribableChannel.subscribe:(Lorg/springframework/messaging/MessageHandler;)Z
      39: pop
      40: aload_0
      41: getfield      #25                 // Field clientInboundChannel:Lorg/springframework/messaging/SubscribableChannel;
      44: instanceof    #36                 // class org/springframework/messaging/support/InterceptableChannel
      47: ifeq          67
      50: aload_0
      51: getfield      #25                 // Field clientInboundChannel:Lorg/springframework/messaging/SubscribableChannel;
      54: checkcast     #36                 // class org/springframework/messaging/support/InterceptableChannel
      57: iconst_0
      58: aload_0
      59: getfield      #20                 // Field unsentDisconnectInterceptor:Lorg/springframework/messaging/support/ChannelInterceptor;
      62: invokeinterface #37,  3           // InterfaceMethod org/springframework/messaging/support/InterceptableChannel.addInterceptor:(ILorg/springframework/messaging/support/ChannelInterceptor;)V
      67: aload_0
      68: invokevirtual #38                 // Method startInternal:()V
      71: aload_0
      72: iconst_1
      73: putfield      #15                 // Field running:Z
      76: aload_0
      77: getfield      #6                  // Field logger:Lorg/apache/commons/logging/Log;
      80: ldc           #39                 // String Started.
      82: invokeinterface #34,  2           // InterfaceMethod org/apache/commons/logging/Log.info:(Ljava/lang/Object;)V
      87: aload_1
      88: monitorexit
      89: goto          97
      92: astore_2
      93: aload_1
      94: monitorexit
      95: aload_2
      96: athrow
      97: return
    Exception table:
       from    to  target type
           7    89    92   any
          92    95    92   any

  protected void startInternal();
    Code:
       0: return

  public void stop();
    Code:
       0: aload_0
       1: getfield      #17                 // Field lifecycleMonitor:Ljava/lang/Object;
       4: dup
       5: astore_1
       6: monitorenter
       7: aload_0
       8: getfield      #6                  // Field logger:Lorg/apache/commons/logging/Log;
      11: ldc           #40                 // String Stopping...
      13: invokeinterface #34,  2           // InterfaceMethod org/apache/commons/logging/Log.info:(Ljava/lang/Object;)V
      18: aload_0
      19: invokevirtual #41                 // Method stopInternal:()V
      22: aload_0
      23: getfield      #25                 // Field clientInboundChannel:Lorg/springframework/messaging/SubscribableChannel;
      26: aload_0
      27: invokeinterface #42,  2           // InterfaceMethod org/springframework/messaging/SubscribableChannel.unsubscribe:(Lorg/springframework/messaging/MessageHandler;)Z
      32: pop
      33: aload_0
      34: getfield      #27                 // Field brokerChannel:Lorg/springframework/messaging/SubscribableChannel;
      37: aload_0
      38: invokeinterface #42,  2           // InterfaceMethod org/springframework/messaging/SubscribableChannel.unsubscribe:(Lorg/springframework/messaging/MessageHandler;)Z
      43: pop
      44: aload_0
      45: getfield      #25                 // Field clientInboundChannel:Lorg/springframework/messaging/SubscribableChannel;
      48: instanceof    #36                 // class org/springframework/messaging/support/InterceptableChannel
      51: ifeq          71
      54: aload_0
      55: getfield      #25                 // Field clientInboundChannel:Lorg/springframework/messaging/SubscribableChannel;
      58: checkcast     #36                 // class org/springframework/messaging/support/InterceptableChannel
      61: aload_0
      62: getfield      #20                 // Field unsentDisconnectInterceptor:Lorg/springframework/messaging/support/ChannelInterceptor;
      65: invokeinterface #43,  2           // InterfaceMethod org/springframework/messaging/support/InterceptableChannel.removeInterceptor:(Lorg/springframework/messaging/support/ChannelInterceptor;)Z
      70: pop
      71: aload_0
      72: iconst_0
      73: putfield      #15                 // Field running:Z
      76: aload_0
      77: getfield      #6                  // Field logger:Lorg/apache/commons/logging/Log;
      80: ldc           #44                 // String Stopped.
      82: invokeinterface #34,  2           // InterfaceMethod org/apache/commons/logging/Log.info:(Ljava/lang/Object;)V
      87: aload_1
      88: monitorexit
      89: goto          97
      92: astore_2
      93: aload_1
      94: monitorexit
      95: aload_2
      96: athrow
      97: return
    Exception table:
       from    to  target type
           7    89    92   any
          92    95    92   any

  protected void stopInternal();
    Code:
       0: return

  public final void stop(java.lang.Runnable);
    Code:
       0: aload_0
       1: getfield      #17                 // Field lifecycleMonitor:Ljava/lang/Object;
       4: dup
       5: astore_2
       6: monitorenter
       7: aload_0
       8: invokevirtual #45                 // Method stop:()V
      11: aload_1
      12: invokeinterface #46,  1           // InterfaceMethod java/lang/Runnable.run:()V
      17: aload_2
      18: monitorexit
      19: goto          27
      22: astore_3
      23: aload_2
      24: monitorexit
      25: aload_3
      26: athrow
      27: return
    Exception table:
       from    to  target type
           7    19    22   any
          22    25    22   any

  public final boolean isRunning();
    Code:
       0: aload_0
       1: getfield      #15                 // Field running:Z
       4: ireturn

  public boolean isBrokerAvailable();
    Code:
       0: aload_0
       1: getfield      #9                  // Field brokerAvailable:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: invokevirtual #47                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
       7: ireturn

  public void handleMessage(org.springframework.messaging.Message<?>);
    Code:
       0: aload_0
       1: getfield      #15                 // Field running:Z
       4: ifne          52
       7: aload_0
       8: getfield      #6                  // Field logger:Lorg/apache/commons/logging/Log;
      11: invokeinterface #48,  1           // InterfaceMethod org/apache/commons/logging/Log.isTraceEnabled:()Z
      16: ifeq          51
      19: aload_0
      20: getfield      #6                  // Field logger:Lorg/apache/commons/logging/Log;
      23: new           #49                 // class java/lang/StringBuilder
      26: dup
      27: invokespecial #50                 // Method java/lang/StringBuilder."<init>":()V
      30: aload_0
      31: invokevirtual #51                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      34: ldc           #52                 // String  not running yet. Ignoring
      36: invokevirtual #53                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      39: aload_1
      40: invokevirtual #51                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      43: invokevirtual #54                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      46: invokeinterface #55,  2           // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
      51: return
      52: aload_0
      53: aload_1
      54: invokevirtual #56                 // Method handleMessageInternal:(Lorg/springframework/messaging/Message;)V
      57: return

  protected abstract void handleMessageInternal(org.springframework.messaging.Message<?>);

  protected boolean checkDestinationPrefix(java.lang.String);
    Code:
       0: aload_1
       1: ifnull        14
       4: aload_0
       5: getfield      #29                 // Field destinationPrefixes:Ljava/util/Collection;
       8: invokestatic  #57                 // Method org/springframework/util/CollectionUtils.isEmpty:(Ljava/util/Collection;)Z
      11: ifeq          16
      14: iconst_1
      15: ireturn
      16: aload_0
      17: getfield      #29                 // Field destinationPrefixes:Ljava/util/Collection;
      20: invokeinterface #58,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      25: astore_2
      26: aload_2
      27: invokeinterface #59,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      32: ifeq          58
      35: aload_2
      36: invokeinterface #60,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      41: checkcast     #61                 // class java/lang/String
      44: astore_3
      45: aload_1
      46: aload_3
      47: invokevirtual #62                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      50: ifeq          55
      53: iconst_1
      54: ireturn
      55: goto          26
      58: iconst_0
      59: ireturn

  protected void publishBrokerAvailableEvent();
    Code:
       0: aload_0
       1: getfield      #9                  // Field brokerAvailable:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: iconst_0
       5: iconst_1
       6: invokevirtual #63                 // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z
       9: istore_1
      10: aload_0
      11: getfield      #30                 // Field eventPublisher:Lorg/springframework/context/ApplicationEventPublisher;
      14: ifnull        59
      17: iload_1
      18: ifeq          59
      21: aload_0
      22: getfield      #6                  // Field logger:Lorg/apache/commons/logging/Log;
      25: invokeinterface #64,  1           // InterfaceMethod org/apache/commons/logging/Log.isInfoEnabled:()Z
      30: ifeq          46
      33: aload_0
      34: getfield      #6                  // Field logger:Lorg/apache/commons/logging/Log;
      37: aload_0
      38: getfield      #12                 // Field availableEvent:Lorg/springframework/messaging/simp/broker/BrokerAvailabilityEvent;
      41: invokeinterface #34,  2           // InterfaceMethod org/apache/commons/logging/Log.info:(Ljava/lang/Object;)V
      46: aload_0
      47: getfield      #30                 // Field eventPublisher:Lorg/springframework/context/ApplicationEventPublisher;
      50: aload_0
      51: getfield      #12                 // Field availableEvent:Lorg/springframework/messaging/simp/broker/BrokerAvailabilityEvent;
      54: invokeinterface #65,  2           // InterfaceMethod org/springframework/context/ApplicationEventPublisher.publishEvent:(Lorg/springframework/context/ApplicationEvent;)V
      59: return

  protected void publishBrokerUnavailableEvent();
    Code:
       0: aload_0
       1: getfield      #9                  // Field brokerAvailable:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: iconst_1
       5: iconst_0
       6: invokevirtual #63                 // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z
       9: istore_1
      10: aload_0
      11: getfield      #30                 // Field eventPublisher:Lorg/springframework/context/ApplicationEventPublisher;
      14: ifnull        59
      17: iload_1
      18: ifeq          59
      21: aload_0
      22: getfield      #6                  // Field logger:Lorg/apache/commons/logging/Log;
      25: invokeinterface #64,  1           // InterfaceMethod org/apache/commons/logging/Log.isInfoEnabled:()Z
      30: ifeq          46
      33: aload_0
      34: getfield      #6                  // Field logger:Lorg/apache/commons/logging/Log;
      37: aload_0
      38: getfield      #13                 // Field notAvailableEvent:Lorg/springframework/messaging/simp/broker/BrokerAvailabilityEvent;
      41: invokeinterface #34,  2           // InterfaceMethod org/apache/commons/logging/Log.info:(Ljava/lang/Object;)V
      46: aload_0
      47: getfield      #30                 // Field eventPublisher:Lorg/springframework/context/ApplicationEventPublisher;
      50: aload_0
      51: getfield      #13                 // Field notAvailableEvent:Lorg/springframework/messaging/simp/broker/BrokerAvailabilityEvent;
      54: invokeinterface #65,  2           // InterfaceMethod org/springframework/context/ApplicationEventPublisher.publishEvent:(Lorg/springframework/context/ApplicationEvent;)V
      59: return
}
