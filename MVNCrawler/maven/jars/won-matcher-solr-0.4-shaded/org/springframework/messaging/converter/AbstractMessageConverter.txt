Compiled from "AbstractMessageConverter.java"
public abstract class org.springframework.messaging.converter.AbstractMessageConverter implements org.springframework.messaging.converter.SmartMessageConverter {
  protected final org.apache.commons.logging.Log logger;

  private final java.util.List<org.springframework.util.MimeType> supportedMimeTypes;

  private org.springframework.messaging.converter.ContentTypeResolver contentTypeResolver;

  private boolean strictContentTypeMatch;

  private java.lang.Class<?> serializedPayloadClass;

  protected org.springframework.messaging.converter.AbstractMessageConverter(org.springframework.util.MimeType);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_0
       6: invokevirtual #2                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
       9: invokestatic  #3                  // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
      12: putfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      15: aload_0
      16: new           #5                  // class org/springframework/messaging/converter/DefaultContentTypeResolver
      19: dup
      20: invokespecial #6                  // Method org/springframework/messaging/converter/DefaultContentTypeResolver."<init>":()V
      23: putfield      #7                  // Field contentTypeResolver:Lorg/springframework/messaging/converter/ContentTypeResolver;
      26: aload_0
      27: iconst_0
      28: putfield      #8                  // Field strictContentTypeMatch:Z
      31: aload_0
      32: ldc           #9                  // class "[B"
      34: putfield      #10                 // Field serializedPayloadClass:Ljava/lang/Class;
      37: aload_1
      38: ldc           #11                 // String supportedMimeType is required
      40: invokestatic  #12                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      43: aload_0
      44: aload_1
      45: invokestatic  #13                 // Method java/util/Collections.singletonList:(Ljava/lang/Object;)Ljava/util/List;
      48: putfield      #14                 // Field supportedMimeTypes:Ljava/util/List;
      51: return

  protected org.springframework.messaging.converter.AbstractMessageConverter(java.util.Collection<org.springframework.util.MimeType>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_0
       6: invokevirtual #2                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
       9: invokestatic  #3                  // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
      12: putfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      15: aload_0
      16: new           #5                  // class org/springframework/messaging/converter/DefaultContentTypeResolver
      19: dup
      20: invokespecial #6                  // Method org/springframework/messaging/converter/DefaultContentTypeResolver."<init>":()V
      23: putfield      #7                  // Field contentTypeResolver:Lorg/springframework/messaging/converter/ContentTypeResolver;
      26: aload_0
      27: iconst_0
      28: putfield      #8                  // Field strictContentTypeMatch:Z
      31: aload_0
      32: ldc           #9                  // class "[B"
      34: putfield      #10                 // Field serializedPayloadClass:Ljava/lang/Class;
      37: aload_1
      38: ldc           #15                 // String supportedMimeTypes must not be null
      40: invokestatic  #12                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      43: aload_0
      44: new           #16                 // class java/util/ArrayList
      47: dup
      48: aload_1
      49: invokespecial #17                 // Method java/util/ArrayList."<init>":(Ljava/util/Collection;)V
      52: putfield      #14                 // Field supportedMimeTypes:Ljava/util/List;
      55: return

  public java.util.List<org.springframework.util.MimeType> getSupportedMimeTypes();
    Code:
       0: aload_0
       1: getfield      #14                 // Field supportedMimeTypes:Ljava/util/List;
       4: invokestatic  #18                 // Method java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;
       7: areturn

  public void setContentTypeResolver(org.springframework.messaging.converter.ContentTypeResolver);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #7                  // Field contentTypeResolver:Lorg/springframework/messaging/converter/ContentTypeResolver;
       5: return

  public org.springframework.messaging.converter.ContentTypeResolver getContentTypeResolver();
    Code:
       0: aload_0
       1: getfield      #7                  // Field contentTypeResolver:Lorg/springframework/messaging/converter/ContentTypeResolver;
       4: areturn

  public void setStrictContentTypeMatch(boolean);
    Code:
       0: iload_1
       1: ifeq          22
       4: aload_0
       5: invokevirtual #19                 // Method getSupportedMimeTypes:()Ljava/util/List;
       8: ldc           #20                 // String Strict match requires non-empty list of supported mime types
      10: invokestatic  #21                 // Method org/springframework/util/Assert.notEmpty:(Ljava/util/Collection;Ljava/lang/String;)V
      13: aload_0
      14: invokevirtual #22                 // Method getContentTypeResolver:()Lorg/springframework/messaging/converter/ContentTypeResolver;
      17: ldc           #23                 // String Strict match requires ContentTypeResolver
      19: invokestatic  #12                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      22: aload_0
      23: iload_1
      24: putfield      #8                  // Field strictContentTypeMatch:Z
      27: return

  public boolean isStrictContentTypeMatch();
    Code:
       0: aload_0
       1: getfield      #8                  // Field strictContentTypeMatch:Z
       4: ireturn

  public void setSerializedPayloadClass(java.lang.Class<?>);
    Code:
       0: ldc           #9                  // class "[B"
       2: aload_1
       3: if_acmpeq     39
       6: ldc           #24                 // class java/lang/String
       8: aload_1
       9: if_acmpeq     39
      12: new           #25                 // class java/lang/IllegalArgumentException
      15: dup
      16: new           #26                 // class java/lang/StringBuilder
      19: dup
      20: invokespecial #27                 // Method java/lang/StringBuilder."<init>":()V
      23: ldc           #28                 // String Payload class must be byte[] or String:
      25: invokevirtual #29                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      28: aload_1
      29: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      32: invokevirtual #31                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      35: invokespecial #32                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      38: athrow
      39: aload_0
      40: aload_1
      41: putfield      #10                 // Field serializedPayloadClass:Ljava/lang/Class;
      44: return

  public java.lang.Class<?> getSerializedPayloadClass();
    Code:
       0: aload_0
       1: getfield      #10                 // Field serializedPayloadClass:Ljava/lang/Class;
       4: areturn

  protected org.springframework.util.MimeType getDefaultContentType(java.lang.Object);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method getSupportedMimeTypes:()Ljava/util/List;
       4: astore_2
       5: aload_2
       6: invokeinterface #33,  1           // InterfaceMethod java/util/List.isEmpty:()Z
      11: ifne          27
      14: aload_2
      15: iconst_0
      16: invokeinterface #34,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      21: checkcast     #35                 // class org/springframework/util/MimeType
      24: goto          28
      27: aconst_null
      28: areturn

  public final java.lang.Object fromMessage(org.springframework.messaging.Message<?>, java.lang.Class<?>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aconst_null
       4: invokevirtual #36                 // Method fromMessage:(Lorg/springframework/messaging/Message;Ljava/lang/Class;Ljava/lang/Object;)Ljava/lang/Object;
       7: areturn

  public final java.lang.Object fromMessage(org.springframework.messaging.Message<?>, java.lang.Class<?>, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #37                 // Method canConvertFrom:(Lorg/springframework/messaging/Message;Ljava/lang/Class;)Z
       6: ifne          11
       9: aconst_null
      10: areturn
      11: aload_0
      12: aload_1
      13: aload_2
      14: aload_3
      15: invokevirtual #38                 // Method convertFromInternal:(Lorg/springframework/messaging/Message;Ljava/lang/Class;Ljava/lang/Object;)Ljava/lang/Object;
      18: areturn

  protected boolean canConvertFrom(org.springframework.messaging.Message<?>, java.lang.Class<?>);
    Code:
       0: aload_0
       1: aload_2
       2: invokevirtual #39                 // Method supports:(Ljava/lang/Class;)Z
       5: ifeq          25
       8: aload_0
       9: aload_1
      10: invokeinterface #40,  1           // InterfaceMethod org/springframework/messaging/Message.getHeaders:()Lorg/springframework/messaging/MessageHeaders;
      15: invokevirtual #41                 // Method supportsMimeType:(Lorg/springframework/messaging/MessageHeaders;)Z
      18: ifeq          25
      21: iconst_1
      22: goto          26
      25: iconst_0
      26: ireturn

  public final org.springframework.messaging.Message<?> toMessage(java.lang.Object, org.springframework.messaging.MessageHeaders);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aconst_null
       4: invokevirtual #42                 // Method toMessage:(Ljava/lang/Object;Lorg/springframework/messaging/MessageHeaders;Ljava/lang/Object;)Lorg/springframework/messaging/Message;
       7: areturn

  public final org.springframework.messaging.Message<?> toMessage(java.lang.Object, org.springframework.messaging.MessageHeaders, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #43                 // Method canConvertTo:(Ljava/lang/Object;Lorg/springframework/messaging/MessageHeaders;)Z
       6: ifne          11
       9: aconst_null
      10: areturn
      11: aload_0
      12: aload_1
      13: aload_2
      14: aload_3
      15: invokevirtual #44                 // Method convertToInternal:(Ljava/lang/Object;Lorg/springframework/messaging/MessageHeaders;Ljava/lang/Object;)Ljava/lang/Object;
      18: astore_1
      19: aload_1
      20: ifnonnull     25
      23: aconst_null
      24: areturn
      25: aload_0
      26: aload_1
      27: invokevirtual #45                 // Method getDefaultContentType:(Ljava/lang/Object;)Lorg/springframework/util/MimeType;
      30: astore        4
      32: aload_2
      33: ifnull        76
      36: aload_2
      37: ldc           #46                 // class org/springframework/messaging/support/MessageHeaderAccessor
      39: invokestatic  #47                 // Method org/springframework/messaging/support/MessageHeaderAccessor.getAccessor:(Lorg/springframework/messaging/MessageHeaders;Ljava/lang/Class;)Lorg/springframework/messaging/support/MessageHeaderAccessor;
      42: astore        5
      44: aload         5
      46: ifnull        76
      49: aload         5
      51: invokevirtual #48                 // Method org/springframework/messaging/support/MessageHeaderAccessor.isMutable:()Z
      54: ifeq          76
      57: aload         5
      59: ldc           #50                 // String contentType
      61: aload         4
      63: invokevirtual #51                 // Method org/springframework/messaging/support/MessageHeaderAccessor.setHeaderIfAbsent:(Ljava/lang/String;Ljava/lang/Object;)V
      66: aload_1
      67: aload         5
      69: invokevirtual #52                 // Method org/springframework/messaging/support/MessageHeaderAccessor.getMessageHeaders:()Lorg/springframework/messaging/MessageHeaders;
      72: invokestatic  #53                 // Method org/springframework/messaging/support/MessageBuilder.createMessage:(Ljava/lang/Object;Lorg/springframework/messaging/MessageHeaders;)Lorg/springframework/messaging/Message;
      75: areturn
      76: aload_1
      77: invokestatic  #54                 // Method org/springframework/messaging/support/MessageBuilder.withPayload:(Ljava/lang/Object;)Lorg/springframework/messaging/support/MessageBuilder;
      80: astore        5
      82: aload_2
      83: ifnull        93
      86: aload         5
      88: aload_2
      89: invokevirtual #55                 // Method org/springframework/messaging/support/MessageBuilder.copyHeaders:(Ljava/util/Map;)Lorg/springframework/messaging/support/MessageBuilder;
      92: pop
      93: aload         5
      95: ldc           #50                 // String contentType
      97: aload         4
      99: invokevirtual #56                 // Method org/springframework/messaging/support/MessageBuilder.setHeaderIfAbsent:(Ljava/lang/String;Ljava/lang/Object;)Lorg/springframework/messaging/support/MessageBuilder;
     102: pop
     103: aload         5
     105: invokevirtual #57                 // Method org/springframework/messaging/support/MessageBuilder.build:()Lorg/springframework/messaging/Message;
     108: areturn

  protected boolean canConvertTo(java.lang.Object, org.springframework.messaging.MessageHeaders);
    Code:
       0: aload_1
       1: ifnull        11
       4: aload_1
       5: invokevirtual #2                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
       8: goto          12
      11: aconst_null
      12: astore_3
      13: aload_0
      14: aload_3
      15: invokevirtual #39                 // Method supports:(Ljava/lang/Class;)Z
      18: ifeq          33
      21: aload_0
      22: aload_2
      23: invokevirtual #41                 // Method supportsMimeType:(Lorg/springframework/messaging/MessageHeaders;)Z
      26: ifeq          33
      29: iconst_1
      30: goto          34
      33: iconst_0
      34: ireturn

  protected boolean supportsMimeType(org.springframework.messaging.MessageHeaders);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method getSupportedMimeTypes:()Ljava/util/List;
       4: invokeinterface #33,  1           // InterfaceMethod java/util/List.isEmpty:()Z
       9: ifeq          14
      12: iconst_1
      13: ireturn
      14: aload_0
      15: aload_1
      16: invokevirtual #58                 // Method getMimeType:(Lorg/springframework/messaging/MessageHeaders;)Lorg/springframework/util/MimeType;
      19: astore_2
      20: aload_2
      21: ifnonnull     37
      24: aload_0
      25: invokevirtual #59                 // Method isStrictContentTypeMatch:()Z
      28: ifne          35
      31: iconst_1
      32: goto          36
      35: iconst_0
      36: ireturn
      37: aload_0
      38: invokevirtual #19                 // Method getSupportedMimeTypes:()Ljava/util/List;
      41: invokeinterface #60,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      46: astore_3
      47: aload_3
      48: invokeinterface #61,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      53: ifeq          102
      56: aload_3
      57: invokeinterface #62,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      62: checkcast     #35                 // class org/springframework/util/MimeType
      65: astore        4
      67: aload         4
      69: invokevirtual #63                 // Method org/springframework/util/MimeType.getType:()Ljava/lang/String;
      72: aload_2
      73: invokevirtual #63                 // Method org/springframework/util/MimeType.getType:()Ljava/lang/String;
      76: invokevirtual #64                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      79: ifeq          99
      82: aload         4
      84: invokevirtual #65                 // Method org/springframework/util/MimeType.getSubtype:()Ljava/lang/String;
      87: aload_2
      88: invokevirtual #65                 // Method org/springframework/util/MimeType.getSubtype:()Ljava/lang/String;
      91: invokevirtual #64                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      94: ifeq          99
      97: iconst_1
      98: ireturn
      99: goto          47
     102: iconst_0
     103: ireturn

  protected org.springframework.util.MimeType getMimeType(org.springframework.messaging.MessageHeaders);
    Code:
       0: aload_0
       1: getfield      #7                  // Field contentTypeResolver:Lorg/springframework/messaging/converter/ContentTypeResolver;
       4: ifnull        20
       7: aload_0
       8: getfield      #7                  // Field contentTypeResolver:Lorg/springframework/messaging/converter/ContentTypeResolver;
      11: aload_1
      12: invokeinterface #66,  2           // InterfaceMethod org/springframework/messaging/converter/ContentTypeResolver.resolve:(Lorg/springframework/messaging/MessageHeaders;)Lorg/springframework/util/MimeType;
      17: goto          21
      20: aconst_null
      21: areturn

  protected abstract boolean supports(java.lang.Class<?>);

  protected java.lang.Object convertFromInternal(org.springframework.messaging.Message<?>, java.lang.Class<?>, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #67                 // Method convertFromInternal:(Lorg/springframework/messaging/Message;Ljava/lang/Class;)Ljava/lang/Object;
       6: areturn

  protected java.lang.Object convertToInternal(java.lang.Object, org.springframework.messaging.MessageHeaders, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #68                 // Method convertToInternal:(Ljava/lang/Object;Lorg/springframework/messaging/MessageHeaders;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object convertFromInternal(org.springframework.messaging.Message<?>, java.lang.Class<?>);
    Code:
       0: aconst_null
       1: areturn

  public java.lang.Object convertToInternal(java.lang.Object, org.springframework.messaging.MessageHeaders);
    Code:
       0: aconst_null
       1: areturn
}
