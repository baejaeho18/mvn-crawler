Compiled from "OncePerRequestFilter.java"
public abstract class org.springframework.web.filter.OncePerRequestFilter extends org.springframework.web.filter.GenericFilterBean {
  public static final java.lang.String ALREADY_FILTERED_SUFFIX;

  public org.springframework.web.filter.OncePerRequestFilter();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/springframework/web/filter/GenericFilterBean."<init>":()V
       4: return

  public final void doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain) throws javax.servlet.ServletException, java.io.IOException;
    Code:
       0: aload_1
       1: instanceof    #2                  // class javax/servlet/http/HttpServletRequest
       4: ifeq          14
       7: aload_2
       8: instanceof    #3                  // class javax/servlet/http/HttpServletResponse
      11: ifne          24
      14: new           #4                  // class javax/servlet/ServletException
      17: dup
      18: ldc           #5                  // String OncePerRequestFilter just supports HTTP requests
      20: invokespecial #6                  // Method javax/servlet/ServletException."<init>":(Ljava/lang/String;)V
      23: athrow
      24: aload_1
      25: checkcast     #2                  // class javax/servlet/http/HttpServletRequest
      28: astore        4
      30: aload_2
      31: checkcast     #3                  // class javax/servlet/http/HttpServletResponse
      34: astore        5
      36: aload_0
      37: invokevirtual #7                  // Method getAlreadyFilteredAttributeName:()Ljava/lang/String;
      40: astore        6
      42: aload_1
      43: aload         6
      45: invokeinterface #8,  2            // InterfaceMethod javax/servlet/ServletRequest.getAttribute:(Ljava/lang/String;)Ljava/lang/Object;
      50: ifnull        57
      53: iconst_1
      54: goto          58
      57: iconst_0
      58: istore        7
      60: iload         7
      62: ifne          83
      65: aload_0
      66: aload         4
      68: invokespecial #9                  // Method skipDispatch:(Ljavax/servlet/http/HttpServletRequest;)Z
      71: ifne          83
      74: aload_0
      75: aload         4
      77: invokevirtual #10                 // Method shouldNotFilter:(Ljavax/servlet/http/HttpServletRequest;)Z
      80: ifeq          94
      83: aload_3
      84: aload_1
      85: aload_2
      86: invokeinterface #11,  3           // InterfaceMethod javax/servlet/FilterChain.doFilter:(Ljavax/servlet/ServletRequest;Ljavax/servlet/ServletResponse;)V
      91: goto          138
      94: aload_1
      95: aload         6
      97: getstatic     #12                 // Field java/lang/Boolean.TRUE:Ljava/lang/Boolean;
     100: invokeinterface #13,  3           // InterfaceMethod javax/servlet/ServletRequest.setAttribute:(Ljava/lang/String;Ljava/lang/Object;)V
     105: aload_0
     106: aload         4
     108: aload         5
     110: aload_3
     111: invokevirtual #14                 // Method doFilterInternal:(Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;Ljavax/servlet/FilterChain;)V
     114: aload_1
     115: aload         6
     117: invokeinterface #15,  2           // InterfaceMethod javax/servlet/ServletRequest.removeAttribute:(Ljava/lang/String;)V
     122: goto          138
     125: astore        8
     127: aload_1
     128: aload         6
     130: invokeinterface #15,  2           // InterfaceMethod javax/servlet/ServletRequest.removeAttribute:(Ljava/lang/String;)V
     135: aload         8
     137: athrow
     138: return
    Exception table:
       from    to  target type
         105   114   125   any
         125   127   125   any

  private boolean skipDispatch(javax.servlet.http.HttpServletRequest);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #16                 // Method isAsyncDispatch:(Ljavax/servlet/http/HttpServletRequest;)Z
       5: ifeq          17
       8: aload_0
       9: invokevirtual #17                 // Method shouldNotFilterAsyncDispatch:()Z
      12: ifeq          17
      15: iconst_1
      16: ireturn
      17: aload_1
      18: ldc           #19                 // String javax.servlet.error.request_uri
      20: invokeinterface #20,  2           // InterfaceMethod javax/servlet/http/HttpServletRequest.getAttribute:(Ljava/lang/String;)Ljava/lang/Object;
      25: ifnull        37
      28: aload_0
      29: invokevirtual #21                 // Method shouldNotFilterErrorDispatch:()Z
      32: ifeq          37
      35: iconst_1
      36: ireturn
      37: iconst_0
      38: ireturn

  protected boolean isAsyncDispatch(javax.servlet.http.HttpServletRequest);
    Code:
       0: aload_1
       1: invokestatic  #22                 // Method org/springframework/web/context/request/async/WebAsyncUtils.getAsyncManager:(Ljavax/servlet/ServletRequest;)Lorg/springframework/web/context/request/async/WebAsyncManager;
       4: invokevirtual #23                 // Method org/springframework/web/context/request/async/WebAsyncManager.hasConcurrentResult:()Z
       7: ireturn

  protected boolean isAsyncStarted(javax.servlet.http.HttpServletRequest);
    Code:
       0: aload_1
       1: invokestatic  #22                 // Method org/springframework/web/context/request/async/WebAsyncUtils.getAsyncManager:(Ljavax/servlet/ServletRequest;)Lorg/springframework/web/context/request/async/WebAsyncManager;
       4: invokevirtual #24                 // Method org/springframework/web/context/request/async/WebAsyncManager.isConcurrentHandlingStarted:()Z
       7: ireturn

  protected java.lang.String getAlreadyFilteredAttributeName();
    Code:
       0: aload_0
       1: invokevirtual #25                 // Method getFilterName:()Ljava/lang/String;
       4: astore_1
       5: aload_1
       6: ifnonnull     17
       9: aload_0
      10: invokevirtual #26                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      13: invokevirtual #27                 // Method java/lang/Class.getName:()Ljava/lang/String;
      16: astore_1
      17: new           #28                 // class java/lang/StringBuilder
      20: dup
      21: invokespecial #29                 // Method java/lang/StringBuilder."<init>":()V
      24: aload_1
      25: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      28: ldc           #32                 // String .FILTERED
      30: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      33: invokevirtual #33                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      36: areturn

  protected boolean shouldNotFilter(javax.servlet.http.HttpServletRequest) throws javax.servlet.ServletException;
    Code:
       0: iconst_0
       1: ireturn

  protected boolean shouldNotFilterAsyncDispatch();
    Code:
       0: iconst_1
       1: ireturn

  protected boolean shouldNotFilterErrorDispatch();
    Code:
       0: iconst_1
       1: ireturn

  protected abstract void doFilterInternal(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, javax.servlet.FilterChain) throws javax.servlet.ServletException, java.io.IOException;
}
