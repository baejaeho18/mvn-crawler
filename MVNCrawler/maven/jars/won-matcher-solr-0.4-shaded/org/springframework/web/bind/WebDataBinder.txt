Compiled from "WebDataBinder.java"
public class org.springframework.web.bind.WebDataBinder extends org.springframework.validation.DataBinder {
  public static final java.lang.String DEFAULT_FIELD_MARKER_PREFIX;

  public static final java.lang.String DEFAULT_FIELD_DEFAULT_PREFIX;

  private java.lang.String fieldMarkerPrefix;

  private java.lang.String fieldDefaultPrefix;

  private boolean bindEmptyMultipartFiles;

  public org.springframework.web.bind.WebDataBinder(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method org/springframework/validation/DataBinder."<init>":(Ljava/lang/Object;)V
       5: aload_0
       6: ldc           #3                  // String _
       8: putfield      #4                  // Field fieldMarkerPrefix:Ljava/lang/String;
      11: aload_0
      12: ldc           #5                  // String !
      14: putfield      #6                  // Field fieldDefaultPrefix:Ljava/lang/String;
      17: aload_0
      18: iconst_1
      19: putfield      #7                  // Field bindEmptyMultipartFiles:Z
      22: return

  public org.springframework.web.bind.WebDataBinder(java.lang.Object, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #8                  // Method org/springframework/validation/DataBinder."<init>":(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: ldc           #3                  // String _
       9: putfield      #4                  // Field fieldMarkerPrefix:Ljava/lang/String;
      12: aload_0
      13: ldc           #5                  // String !
      15: putfield      #6                  // Field fieldDefaultPrefix:Ljava/lang/String;
      18: aload_0
      19: iconst_1
      20: putfield      #7                  // Field bindEmptyMultipartFiles:Z
      23: return

  public void setFieldMarkerPrefix(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #4                  // Field fieldMarkerPrefix:Ljava/lang/String;
       5: return

  public java.lang.String getFieldMarkerPrefix();
    Code:
       0: aload_0
       1: getfield      #4                  // Field fieldMarkerPrefix:Ljava/lang/String;
       4: areturn

  public void setFieldDefaultPrefix(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #6                  // Field fieldDefaultPrefix:Ljava/lang/String;
       5: return

  public java.lang.String getFieldDefaultPrefix();
    Code:
       0: aload_0
       1: getfield      #6                  // Field fieldDefaultPrefix:Ljava/lang/String;
       4: areturn

  public void setBindEmptyMultipartFiles(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #7                  // Field bindEmptyMultipartFiles:Z
       5: return

  public boolean isBindEmptyMultipartFiles();
    Code:
       0: aload_0
       1: getfield      #7                  // Field bindEmptyMultipartFiles:Z
       4: ireturn

  protected void doBind(org.springframework.beans.MutablePropertyValues);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #9                  // Method checkFieldDefaults:(Lorg/springframework/beans/MutablePropertyValues;)V
       5: aload_0
       6: aload_1
       7: invokevirtual #10                 // Method checkFieldMarkers:(Lorg/springframework/beans/MutablePropertyValues;)V
      10: aload_0
      11: aload_1
      12: invokespecial #11                 // Method org/springframework/validation/DataBinder.doBind:(Lorg/springframework/beans/MutablePropertyValues;)V
      15: return

  protected void checkFieldDefaults(org.springframework.beans.MutablePropertyValues);
    Code:
       0: aload_0
       1: invokevirtual #12                 // Method getFieldDefaultPrefix:()Ljava/lang/String;
       4: astore_2
       5: aload_2
       6: ifnull        112
       9: aload_1
      10: invokevirtual #13                 // Method org/springframework/beans/MutablePropertyValues.getPropertyValues:()[Lorg/springframework/beans/PropertyValue;
      13: astore_3
      14: aload_3
      15: astore        4
      17: aload         4
      19: arraylength
      20: istore        5
      22: iconst_0
      23: istore        6
      25: iload         6
      27: iload         5
      29: if_icmpge     112
      32: aload         4
      34: iload         6
      36: aaload
      37: astore        7
      39: aload         7
      41: invokevirtual #14                 // Method org/springframework/beans/PropertyValue.getName:()Ljava/lang/String;
      44: aload_2
      45: invokevirtual #15                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      48: ifeq          106
      51: aload         7
      53: invokevirtual #14                 // Method org/springframework/beans/PropertyValue.getName:()Ljava/lang/String;
      56: aload_2
      57: invokevirtual #16                 // Method java/lang/String.length:()I
      60: invokevirtual #17                 // Method java/lang/String.substring:(I)Ljava/lang/String;
      63: astore        8
      65: aload_0
      66: invokevirtual #18                 // Method getPropertyAccessor:()Lorg/springframework/beans/ConfigurablePropertyAccessor;
      69: aload         8
      71: invokeinterface #19,  2           // InterfaceMethod org/springframework/beans/ConfigurablePropertyAccessor.isWritableProperty:(Ljava/lang/String;)Z
      76: ifeq          100
      79: aload_1
      80: aload         8
      82: invokevirtual #20                 // Method org/springframework/beans/MutablePropertyValues.contains:(Ljava/lang/String;)Z
      85: ifne          100
      88: aload_1
      89: aload         8
      91: aload         7
      93: invokevirtual #21                 // Method org/springframework/beans/PropertyValue.getValue:()Ljava/lang/Object;
      96: invokevirtual #22                 // Method org/springframework/beans/MutablePropertyValues.add:(Ljava/lang/String;Ljava/lang/Object;)Lorg/springframework/beans/MutablePropertyValues;
      99: pop
     100: aload_1
     101: aload         7
     103: invokevirtual #23                 // Method org/springframework/beans/MutablePropertyValues.removePropertyValue:(Lorg/springframework/beans/PropertyValue;)V
     106: iinc          6, 1
     109: goto          25
     112: return

  protected void checkFieldMarkers(org.springframework.beans.MutablePropertyValues);
    Code:
       0: aload_0
       1: invokevirtual #24                 // Method getFieldMarkerPrefix:()Ljava/lang/String;
       4: astore_2
       5: aload_2
       6: ifnull        128
       9: aload_1
      10: invokevirtual #13                 // Method org/springframework/beans/MutablePropertyValues.getPropertyValues:()[Lorg/springframework/beans/PropertyValue;
      13: astore_3
      14: aload_3
      15: astore        4
      17: aload         4
      19: arraylength
      20: istore        5
      22: iconst_0
      23: istore        6
      25: iload         6
      27: iload         5
      29: if_icmpge     128
      32: aload         4
      34: iload         6
      36: aaload
      37: astore        7
      39: aload         7
      41: invokevirtual #14                 // Method org/springframework/beans/PropertyValue.getName:()Ljava/lang/String;
      44: aload_2
      45: invokevirtual #15                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      48: ifeq          122
      51: aload         7
      53: invokevirtual #14                 // Method org/springframework/beans/PropertyValue.getName:()Ljava/lang/String;
      56: aload_2
      57: invokevirtual #16                 // Method java/lang/String.length:()I
      60: invokevirtual #17                 // Method java/lang/String.substring:(I)Ljava/lang/String;
      63: astore        8
      65: aload_0
      66: invokevirtual #18                 // Method getPropertyAccessor:()Lorg/springframework/beans/ConfigurablePropertyAccessor;
      69: aload         8
      71: invokeinterface #19,  2           // InterfaceMethod org/springframework/beans/ConfigurablePropertyAccessor.isWritableProperty:(Ljava/lang/String;)Z
      76: ifeq          116
      79: aload_1
      80: aload         8
      82: invokevirtual #20                 // Method org/springframework/beans/MutablePropertyValues.contains:(Ljava/lang/String;)Z
      85: ifne          116
      88: aload_0
      89: invokevirtual #18                 // Method getPropertyAccessor:()Lorg/springframework/beans/ConfigurablePropertyAccessor;
      92: aload         8
      94: invokeinterface #25,  2           // InterfaceMethod org/springframework/beans/ConfigurablePropertyAccessor.getPropertyType:(Ljava/lang/String;)Ljava/lang/Class;
      99: astore        9
     101: aload_1
     102: aload         8
     104: aload_0
     105: aload         8
     107: aload         9
     109: invokevirtual #26                 // Method getEmptyValue:(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;
     112: invokevirtual #22                 // Method org/springframework/beans/MutablePropertyValues.add:(Ljava/lang/String;Ljava/lang/Object;)Lorg/springframework/beans/MutablePropertyValues;
     115: pop
     116: aload_1
     117: aload         7
     119: invokevirtual #23                 // Method org/springframework/beans/MutablePropertyValues.removePropertyValue:(Lorg/springframework/beans/PropertyValue;)V
     122: iinc          6, 1
     125: goto          25
     128: return

  protected java.lang.Object getEmptyValue(java.lang.String, java.lang.Class<?>);
    Code:
       0: aload_2
       1: ifnull        112
       4: getstatic     #27                 // Field java/lang/Boolean.TYPE:Ljava/lang/Class;
       7: aload_2
       8: if_acmpeq     17
      11: ldc           #28                 // class java/lang/Boolean
      13: aload_2
      14: if_acmpne     21
      17: getstatic     #29                 // Field java/lang/Boolean.FALSE:Ljava/lang/Boolean;
      20: areturn
      21: aload_2
      22: invokevirtual #30                 // Method java/lang/Class.isArray:()Z
      25: ifeq          37
      28: aload_2
      29: invokevirtual #31                 // Method java/lang/Class.getComponentType:()Ljava/lang/Class;
      32: iconst_0
      33: invokestatic  #32                 // Method java/lang/reflect/Array.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;
      36: areturn
      37: ldc           #33                 // class java/util/Collection
      39: aload_2
      40: invokevirtual #34                 // Method java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z
      43: ifeq          52
      46: aload_2
      47: iconst_0
      48: invokestatic  #35                 // Method org/springframework/core/CollectionFactory.createCollection:(Ljava/lang/Class;I)Ljava/util/Collection;
      51: areturn
      52: ldc           #36                 // class java/util/Map
      54: aload_2
      55: invokevirtual #34                 // Method java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z
      58: ifeq          67
      61: aload_2
      62: iconst_0
      63: invokestatic  #37                 // Method org/springframework/core/CollectionFactory.createMap:(Ljava/lang/Class;I)Ljava/util/Map;
      66: areturn
      67: goto          112
      70: astore_3
      71: getstatic     #39                 // Field logger:Lorg/apache/commons/logging/Log;
      74: invokeinterface #40,  1           // InterfaceMethod org/apache/commons/logging/Log.isDebugEnabled:()Z
      79: ifeq          112
      82: getstatic     #39                 // Field logger:Lorg/apache/commons/logging/Log;
      85: new           #41                 // class java/lang/StringBuilder
      88: dup
      89: invokespecial #42                 // Method java/lang/StringBuilder."<init>":()V
      92: ldc           #43                 // String Failed to create default value - falling back to null:
      94: invokevirtual #44                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      97: aload_3
      98: invokevirtual #45                 // Method java/lang/IllegalArgumentException.getMessage:()Ljava/lang/String;
     101: invokevirtual #44                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     104: invokevirtual #46                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     107: invokeinterface #47,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
     112: aconst_null
     113: areturn
    Exception table:
       from    to  target type
           4    20    70   Class java/lang/IllegalArgumentException
          21    36    70   Class java/lang/IllegalArgumentException
          37    51    70   Class java/lang/IllegalArgumentException
          52    66    70   Class java/lang/IllegalArgumentException

  protected void bindMultipart(java.util.Map<java.lang.String, java.util.List<org.springframework.web.multipart.MultipartFile>>, org.springframework.beans.MutablePropertyValues);
    Code:
       0: aload_1
       1: invokeinterface #48,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
       6: invokeinterface #49,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      11: astore_3
      12: aload_3
      13: invokeinterface #50,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      18: ifeq          121
      21: aload_3
      22: invokeinterface #51,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      27: checkcast     #52                 // class java/util/Map$Entry
      30: astore        4
      32: aload         4
      34: invokeinterface #53,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      39: checkcast     #54                 // class java/lang/String
      42: astore        5
      44: aload         4
      46: invokeinterface #55,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      51: checkcast     #56                 // class java/util/List
      54: astore        6
      56: aload         6
      58: invokeinterface #57,  1           // InterfaceMethod java/util/List.size:()I
      63: iconst_1
      64: if_icmpne     109
      67: aload         6
      69: iconst_0
      70: invokeinterface #58,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      75: checkcast     #59                 // class org/springframework/web/multipart/MultipartFile
      78: astore        7
      80: aload_0
      81: invokevirtual #60                 // Method isBindEmptyMultipartFiles:()Z
      84: ifne          97
      87: aload         7
      89: invokeinterface #61,  1           // InterfaceMethod org/springframework/web/multipart/MultipartFile.isEmpty:()Z
      94: ifne          106
      97: aload_2
      98: aload         5
     100: aload         7
     102: invokevirtual #22                 // Method org/springframework/beans/MutablePropertyValues.add:(Ljava/lang/String;Ljava/lang/Object;)Lorg/springframework/beans/MutablePropertyValues;
     105: pop
     106: goto          118
     109: aload_2
     110: aload         5
     112: aload         6
     114: invokevirtual #22                 // Method org/springframework/beans/MutablePropertyValues.add:(Ljava/lang/String;Ljava/lang/Object;)Lorg/springframework/beans/MutablePropertyValues;
     117: pop
     118: goto          12
     121: return
}
