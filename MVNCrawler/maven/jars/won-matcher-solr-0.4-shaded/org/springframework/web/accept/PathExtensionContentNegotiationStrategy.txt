Compiled from "PathExtensionContentNegotiationStrategy.java"
public class org.springframework.web.accept.PathExtensionContentNegotiationStrategy extends org.springframework.web.accept.AbstractMappingContentNegotiationStrategy {
  private static final boolean JAF_PRESENT;

  private static final org.apache.commons.logging.Log logger;

  private org.springframework.web.util.UrlPathHelper urlPathHelper;

  private boolean useJaf;

  private boolean ignoreUnknownExtensions;

  public org.springframework.web.accept.PathExtensionContentNegotiationStrategy();
    Code:
       0: aload_0
       1: aconst_null
       2: invokespecial #2                  // Method "<init>":(Ljava/util/Map;)V
       5: return

  public org.springframework.web.accept.PathExtensionContentNegotiationStrategy(java.util.Map<java.lang.String, org.springframework.http.MediaType>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #3                  // Method org/springframework/web/accept/AbstractMappingContentNegotiationStrategy."<init>":(Ljava/util/Map;)V
       5: aload_0
       6: new           #4                  // class org/springframework/web/util/UrlPathHelper
       9: dup
      10: invokespecial #5                  // Method org/springframework/web/util/UrlPathHelper."<init>":()V
      13: putfield      #6                  // Field urlPathHelper:Lorg/springframework/web/util/UrlPathHelper;
      16: aload_0
      17: iconst_1
      18: putfield      #7                  // Field useJaf:Z
      21: aload_0
      22: iconst_1
      23: putfield      #8                  // Field ignoreUnknownExtensions:Z
      26: aload_0
      27: getfield      #6                  // Field urlPathHelper:Lorg/springframework/web/util/UrlPathHelper;
      30: iconst_0
      31: invokevirtual #9                  // Method org/springframework/web/util/UrlPathHelper.setUrlDecode:(Z)V
      34: return

  public void setUrlPathHelper(org.springframework.web.util.UrlPathHelper);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #6                  // Field urlPathHelper:Lorg/springframework/web/util/UrlPathHelper;
       5: return

  public void setUseJaf(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #7                  // Field useJaf:Z
       5: return

  public void setIgnoreUnknownExtensions(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #8                  // Field ignoreUnknownExtensions:Z
       5: return

  protected java.lang.String getMediaTypeKey(org.springframework.web.context.request.NativeWebRequest);
    Code:
       0: aload_1
       1: ldc           #10                 // class javax/servlet/http/HttpServletRequest
       3: invokeinterface #11,  2           // InterfaceMethod org/springframework/web/context/request/NativeWebRequest.getNativeRequest:(Ljava/lang/Class;)Ljava/lang/Object;
       8: checkcast     #10                 // class javax/servlet/http/HttpServletRequest
      11: astore_2
      12: aload_2
      13: ifnonnull     28
      16: getstatic     #1                  // Field logger:Lorg/apache/commons/logging/Log;
      19: ldc           #12                 // String An HttpServletRequest is required to determine the media type key
      21: invokeinterface #13,  2           // InterfaceMethod org/apache/commons/logging/Log.warn:(Ljava/lang/Object;)V
      26: aconst_null
      27: areturn
      28: aload_0
      29: getfield      #6                  // Field urlPathHelper:Lorg/springframework/web/util/UrlPathHelper;
      32: aload_2
      33: invokevirtual #14                 // Method org/springframework/web/util/UrlPathHelper.getLookupPathForRequest:(Ljavax/servlet/http/HttpServletRequest;)Ljava/lang/String;
      36: astore_3
      37: aload_3
      38: invokestatic  #15                 // Method org/springframework/web/util/UriUtils.extractFileExtension:(Ljava/lang/String;)Ljava/lang/String;
      41: astore        4
      43: aload         4
      45: invokestatic  #16                 // Method org/springframework/util/StringUtils.hasText:(Ljava/lang/String;)Z
      48: ifeq          62
      51: aload         4
      53: getstatic     #17                 // Field java/util/Locale.ENGLISH:Ljava/util/Locale;
      56: invokevirtual #18                 // Method java/lang/String.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;
      59: goto          63
      62: aconst_null
      63: areturn

  protected org.springframework.http.MediaType handleNoMatch(org.springframework.web.context.request.NativeWebRequest, java.lang.String) throws org.springframework.web.HttpMediaTypeNotAcceptableException;
    Code:
       0: aload_0
       1: getfield      #7                  // Field useJaf:Z
       4: ifeq          52
       7: getstatic     #19                 // Field JAF_PRESENT:Z
      10: ifeq          52
      13: new           #20                 // class java/lang/StringBuilder
      16: dup
      17: invokespecial #21                 // Method java/lang/StringBuilder."<init>":()V
      20: ldc           #22                 // String file.
      22: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      25: aload_2
      26: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      29: invokevirtual #24                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      32: invokestatic  #25                 // Method org/springframework/web/accept/PathExtensionContentNegotiationStrategy$ActivationMediaTypeFactory.getMediaType:(Ljava/lang/String;)Lorg/springframework/http/MediaType;
      35: astore_3
      36: aload_3
      37: ifnull        52
      40: getstatic     #26                 // Field org/springframework/http/MediaType.APPLICATION_OCTET_STREAM:Lorg/springframework/http/MediaType;
      43: aload_3
      44: invokevirtual #27                 // Method org/springframework/http/MediaType.equals:(Ljava/lang/Object;)Z
      47: ifne          52
      50: aload_3
      51: areturn
      52: aload_0
      53: getfield      #8                  // Field ignoreUnknownExtensions:Z
      56: ifeq          61
      59: aconst_null
      60: areturn
      61: new           #28                 // class org/springframework/web/HttpMediaTypeNotAcceptableException
      64: dup
      65: aload_0
      66: invokevirtual #29                 // Method getAllMediaTypes:()Ljava/util/List;
      69: invokespecial #30                 // Method org/springframework/web/HttpMediaTypeNotAcceptableException."<init>":(Ljava/util/List;)V
      72: athrow

  public org.springframework.http.MediaType getMediaTypeForResource(org.springframework.core.io.Resource);
    Code:
       0: aload_1
       1: ldc           #31                 // String Resource must not be null
       3: invokestatic  #32                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aconst_null
       7: astore_2
       8: aload_1
       9: invokeinterface #33,  1           // InterfaceMethod org/springframework/core/io/Resource.getFilename:()Ljava/lang/String;
      14: astore_3
      15: aload_3
      16: invokestatic  #34                 // Method org/springframework/util/StringUtils.getFilenameExtension:(Ljava/lang/String;)Ljava/lang/String;
      19: astore        4
      21: aload         4
      23: ifnull        33
      26: aload_0
      27: aload         4
      29: invokevirtual #35                 // Method lookupMediaType:(Ljava/lang/String;)Lorg/springframework/http/MediaType;
      32: astore_2
      33: aload_2
      34: ifnonnull     48
      37: getstatic     #19                 // Field JAF_PRESENT:Z
      40: ifeq          48
      43: aload_3
      44: invokestatic  #25                 // Method org/springframework/web/accept/PathExtensionContentNegotiationStrategy$ActivationMediaTypeFactory.getMediaType:(Ljava/lang/String;)Lorg/springframework/http/MediaType;
      47: astore_2
      48: getstatic     #26                 // Field org/springframework/http/MediaType.APPLICATION_OCTET_STREAM:Lorg/springframework/http/MediaType;
      51: aload_2
      52: invokevirtual #27                 // Method org/springframework/http/MediaType.equals:(Ljava/lang/Object;)Z
      55: ifeq          60
      58: aconst_null
      59: astore_2
      60: aload_2
      61: areturn

  static org.apache.commons.logging.Log access$000();
    Code:
       0: getstatic     #1                  // Field logger:Lorg/apache/commons/logging/Log;
       3: areturn

  static {};
    Code:
       0: ldc           #36                 // String javax.activation.FileTypeMap
       2: ldc           #37                 // class org/springframework/web/accept/PathExtensionContentNegotiationStrategy
       4: invokevirtual #38                 // Method java/lang/Class.getClassLoader:()Ljava/lang/ClassLoader;
       7: invokestatic  #39                 // Method org/springframework/util/ClassUtils.isPresent:(Ljava/lang/String;Ljava/lang/ClassLoader;)Z
      10: putstatic     #19                 // Field JAF_PRESENT:Z
      13: ldc           #37                 // class org/springframework/web/accept/PathExtensionContentNegotiationStrategy
      15: invokestatic  #40                 // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
      18: putstatic     #1                  // Field logger:Lorg/apache/commons/logging/Log;
      21: return
}
