Compiled from "DefaultMessageListenerContainer.java"
public class org.springframework.jms.listener.DefaultMessageListenerContainer extends org.springframework.jms.listener.AbstractPollingMessageListenerContainer {
  public static final java.lang.String DEFAULT_THREAD_NAME_PREFIX;

  public static final long DEFAULT_RECOVERY_INTERVAL;

  public static final int CACHE_NONE;

  public static final int CACHE_CONNECTION;

  public static final int CACHE_SESSION;

  public static final int CACHE_CONSUMER;

  public static final int CACHE_AUTO;

  private static final org.springframework.core.Constants constants;

  private java.util.concurrent.Executor taskExecutor;

  private org.springframework.util.backoff.BackOff backOff;

  private int cacheLevel;

  private int concurrentConsumers;

  private int maxConcurrentConsumers;

  private int maxMessagesPerTask;

  private int idleConsumerLimit;

  private int idleTaskExecutionLimit;

  private final java.util.Set<org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker> scheduledInvokers;

  private int activeInvokerCount;

  private int registeredWithDestination;

  private volatile boolean recovering;

  private volatile boolean interrupted;

  private java.lang.Runnable stopCallback;

  private java.lang.Object currentRecoveryMarker;

  private final java.lang.Object recoveryMonitor;

  public org.springframework.jms.listener.DefaultMessageListenerContainer();
    Code:
       0: aload_0
       1: invokespecial #13                 // Method org/springframework/jms/listener/AbstractPollingMessageListenerContainer."<init>":()V
       4: aload_0
       5: new           #14                 // class org/springframework/util/backoff/FixedBackOff
       8: dup
       9: ldc2_w        #16                 // long 5000l
      12: ldc2_w        #19                 // long 9223372036854775807l
      15: invokespecial #21                 // Method org/springframework/util/backoff/FixedBackOff."<init>":(JJ)V
      18: putfield      #1                  // Field backOff:Lorg/springframework/util/backoff/BackOff;
      21: aload_0
      22: iconst_4
      23: putfield      #22                 // Field cacheLevel:I
      26: aload_0
      27: iconst_1
      28: putfield      #23                 // Field concurrentConsumers:I
      31: aload_0
      32: iconst_1
      33: putfield      #5                  // Field maxConcurrentConsumers:I
      36: aload_0
      37: ldc           #25                 // int -2147483648
      39: putfield      #11                 // Field maxMessagesPerTask:I
      42: aload_0
      43: iconst_1
      44: putfield      #26                 // Field idleConsumerLimit:I
      47: aload_0
      48: iconst_1
      49: putfield      #27                 // Field idleTaskExecutionLimit:I
      52: aload_0
      53: new           #28                 // class java/util/HashSet
      56: dup
      57: invokespecial #29                 // Method java/util/HashSet."<init>":()V
      60: putfield      #7                  // Field scheduledInvokers:Ljava/util/Set;
      63: aload_0
      64: iconst_0
      65: putfield      #12                 // Field activeInvokerCount:I
      68: aload_0
      69: iconst_0
      70: putfield      #2                  // Field registeredWithDestination:I
      73: aload_0
      74: iconst_0
      75: putfield      #30                 // Field recovering:Z
      78: aload_0
      79: iconst_0
      80: putfield      #31                 // Field interrupted:Z
      83: aload_0
      84: new           #32                 // class java/lang/Object
      87: dup
      88: invokespecial #33                 // Method java/lang/Object."<init>":()V
      91: putfield      #9                  // Field currentRecoveryMarker:Ljava/lang/Object;
      94: aload_0
      95: new           #32                 // class java/lang/Object
      98: dup
      99: invokespecial #33                 // Method java/lang/Object."<init>":()V
     102: putfield      #10                 // Field recoveryMonitor:Ljava/lang/Object;
     105: return

  public void setTaskExecutor(java.util.concurrent.Executor);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #34                 // Field taskExecutor:Ljava/util/concurrent/Executor;
       5: return

  public void setBackOff(org.springframework.util.backoff.BackOff);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field backOff:Lorg/springframework/util/backoff/BackOff;
       5: return

  public void setRecoveryInterval(long);
    Code:
       0: aload_0
       1: new           #14                 // class org/springframework/util/backoff/FixedBackOff
       4: dup
       5: lload_1
       6: ldc2_w        #19                 // long 9223372036854775807l
       9: invokespecial #21                 // Method org/springframework/util/backoff/FixedBackOff."<init>":(JJ)V
      12: putfield      #1                  // Field backOff:Lorg/springframework/util/backoff/BackOff;
      15: return

  public void setCacheLevelName(java.lang.String) throws java.lang.IllegalArgumentException;
    Code:
       0: aload_1
       1: ifnull        13
       4: aload_1
       5: ldc           #35                 // String CACHE_
       7: invokevirtual #36                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      10: ifne          23
      13: new           #37                 // class java/lang/IllegalArgumentException
      16: dup
      17: ldc           #38                 // String Only cache constants allowed
      19: invokespecial #39                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      22: athrow
      23: aload_0
      24: getstatic     #40                 // Field constants:Lorg/springframework/core/Constants;
      27: aload_1
      28: invokevirtual #41                 // Method org/springframework/core/Constants.asNumber:(Ljava/lang/String;)Ljava/lang/Number;
      31: invokevirtual #42                 // Method java/lang/Number.intValue:()I
      34: invokevirtual #43                 // Method setCacheLevel:(I)V
      37: return

  public void setCacheLevel(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #22                 // Field cacheLevel:I
       5: return

  public int getCacheLevel();
    Code:
       0: aload_0
       1: getfield      #22                 // Field cacheLevel:I
       4: ireturn

  public void setConcurrency(java.lang.String);
    Code:
       0: aload_1
       1: bipush        45
       3: invokevirtual #44                 // Method java/lang/String.indexOf:(I)I
       6: istore_2
       7: iload_2
       8: iconst_m1
       9: if_icmpeq     46
      12: aload_0
      13: aload_1
      14: iconst_0
      15: iload_2
      16: invokevirtual #45                 // Method java/lang/String.substring:(II)Ljava/lang/String;
      19: invokestatic  #46                 // Method java/lang/Integer.parseInt:(Ljava/lang/String;)I
      22: invokevirtual #47                 // Method setConcurrentConsumers:(I)V
      25: aload_0
      26: aload_1
      27: iload_2
      28: iconst_1
      29: iadd
      30: aload_1
      31: invokevirtual #48                 // Method java/lang/String.length:()I
      34: invokevirtual #45                 // Method java/lang/String.substring:(II)Ljava/lang/String;
      37: invokestatic  #46                 // Method java/lang/Integer.parseInt:(Ljava/lang/String;)I
      40: invokevirtual #49                 // Method setMaxConcurrentConsumers:(I)V
      43: goto          59
      46: aload_0
      47: iconst_1
      48: invokevirtual #47                 // Method setConcurrentConsumers:(I)V
      51: aload_0
      52: aload_1
      53: invokestatic  #46                 // Method java/lang/Integer.parseInt:(Ljava/lang/String;)I
      56: invokevirtual #49                 // Method setMaxConcurrentConsumers:(I)V
      59: goto          95
      62: astore_2
      63: new           #37                 // class java/lang/IllegalArgumentException
      66: dup
      67: new           #51                 // class java/lang/StringBuilder
      70: dup
      71: invokespecial #52                 // Method java/lang/StringBuilder."<init>":()V
      74: ldc           #53                 // String Invalid concurrency value [
      76: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      79: aload_1
      80: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      83: ldc           #55                 // String ]: only single maximum integer (e.g. \"5\") and minimum-maximum combo (e.g. \"3-5\") supported.
      85: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      88: invokevirtual #56                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      91: invokespecial #39                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      94: athrow
      95: return
    Exception table:
       from    to  target type
           0    59    62   Class java/lang/NumberFormatException

  public void setConcurrentConsumers(int);
    Code:
       0: iload_1
       1: ifle          8
       4: iconst_1
       5: goto          9
       8: iconst_0
       9: ldc           #57                 // String \'concurrentConsumers\' value must be at least 1 (one)
      11: invokestatic  #58                 // Method org/springframework/util/Assert.isTrue:(ZLjava/lang/String;)V
      14: aload_0
      15: getfield      #59                 // Field lifecycleMonitor:Ljava/lang/Object;
      18: dup
      19: astore_2
      20: monitorenter
      21: aload_0
      22: iload_1
      23: putfield      #23                 // Field concurrentConsumers:I
      26: aload_0
      27: getfield      #5                  // Field maxConcurrentConsumers:I
      30: iload_1
      31: if_icmpge     39
      34: aload_0
      35: iload_1
      36: putfield      #5                  // Field maxConcurrentConsumers:I
      39: aload_2
      40: monitorexit
      41: goto          49
      44: astore_3
      45: aload_2
      46: monitorexit
      47: aload_3
      48: athrow
      49: return
    Exception table:
       from    to  target type
          21    41    44   any
          44    47    44   any

  public final int getConcurrentConsumers();
    Code:
       0: aload_0
       1: getfield      #59                 // Field lifecycleMonitor:Ljava/lang/Object;
       4: dup
       5: astore_1
       6: monitorenter
       7: aload_0
       8: getfield      #23                 // Field concurrentConsumers:I
      11: aload_1
      12: monitorexit
      13: ireturn
      14: astore_2
      15: aload_1
      16: monitorexit
      17: aload_2
      18: athrow
    Exception table:
       from    to  target type
           7    13    14   any
          14    17    14   any

  public void setMaxConcurrentConsumers(int);
    Code:
       0: iload_1
       1: ifle          8
       4: iconst_1
       5: goto          9
       8: iconst_0
       9: ldc           #60                 // String \'maxConcurrentConsumers\' value must be at least 1 (one)
      11: invokestatic  #58                 // Method org/springframework/util/Assert.isTrue:(ZLjava/lang/String;)V
      14: aload_0
      15: getfield      #59                 // Field lifecycleMonitor:Ljava/lang/Object;
      18: dup
      19: astore_2
      20: monitorenter
      21: aload_0
      22: iload_1
      23: aload_0
      24: getfield      #23                 // Field concurrentConsumers:I
      27: if_icmple     34
      30: iload_1
      31: goto          38
      34: aload_0
      35: getfield      #23                 // Field concurrentConsumers:I
      38: putfield      #5                  // Field maxConcurrentConsumers:I
      41: aload_2
      42: monitorexit
      43: goto          51
      46: astore_3
      47: aload_2
      48: monitorexit
      49: aload_3
      50: athrow
      51: return
    Exception table:
       from    to  target type
          21    43    46   any
          46    49    46   any

  public final int getMaxConcurrentConsumers();
    Code:
       0: aload_0
       1: getfield      #59                 // Field lifecycleMonitor:Ljava/lang/Object;
       4: dup
       5: astore_1
       6: monitorenter
       7: aload_0
       8: getfield      #5                  // Field maxConcurrentConsumers:I
      11: aload_1
      12: monitorexit
      13: ireturn
      14: astore_2
      15: aload_1
      16: monitorexit
      17: aload_2
      18: athrow
    Exception table:
       from    to  target type
           7    13    14   any
          14    17    14   any

  public void setMaxMessagesPerTask(int);
    Code:
       0: iload_1
       1: ifeq          8
       4: iconst_1
       5: goto          9
       8: iconst_0
       9: ldc           #61                 // String \'maxMessagesPerTask\' must not be 0
      11: invokestatic  #58                 // Method org/springframework/util/Assert.isTrue:(ZLjava/lang/String;)V
      14: aload_0
      15: getfield      #59                 // Field lifecycleMonitor:Ljava/lang/Object;
      18: dup
      19: astore_2
      20: monitorenter
      21: aload_0
      22: iload_1
      23: putfield      #11                 // Field maxMessagesPerTask:I
      26: aload_2
      27: monitorexit
      28: goto          36
      31: astore_3
      32: aload_2
      33: monitorexit
      34: aload_3
      35: athrow
      36: return
    Exception table:
       from    to  target type
          21    28    31   any
          31    34    31   any

  public final int getMaxMessagesPerTask();
    Code:
       0: aload_0
       1: getfield      #59                 // Field lifecycleMonitor:Ljava/lang/Object;
       4: dup
       5: astore_1
       6: monitorenter
       7: aload_0
       8: getfield      #11                 // Field maxMessagesPerTask:I
      11: aload_1
      12: monitorexit
      13: ireturn
      14: astore_2
      15: aload_1
      16: monitorexit
      17: aload_2
      18: athrow
    Exception table:
       from    to  target type
           7    13    14   any
          14    17    14   any

  public void setIdleConsumerLimit(int);
    Code:
       0: iload_1
       1: ifle          8
       4: iconst_1
       5: goto          9
       8: iconst_0
       9: ldc           #62                 // String \'idleConsumerLimit\' must be 1 or higher
      11: invokestatic  #58                 // Method org/springframework/util/Assert.isTrue:(ZLjava/lang/String;)V
      14: aload_0
      15: getfield      #59                 // Field lifecycleMonitor:Ljava/lang/Object;
      18: dup
      19: astore_2
      20: monitorenter
      21: aload_0
      22: iload_1
      23: putfield      #26                 // Field idleConsumerLimit:I
      26: aload_2
      27: monitorexit
      28: goto          36
      31: astore_3
      32: aload_2
      33: monitorexit
      34: aload_3
      35: athrow
      36: return
    Exception table:
       from    to  target type
          21    28    31   any
          31    34    31   any

  public final int getIdleConsumerLimit();
    Code:
       0: aload_0
       1: getfield      #59                 // Field lifecycleMonitor:Ljava/lang/Object;
       4: dup
       5: astore_1
       6: monitorenter
       7: aload_0
       8: getfield      #26                 // Field idleConsumerLimit:I
      11: aload_1
      12: monitorexit
      13: ireturn
      14: astore_2
      15: aload_1
      16: monitorexit
      17: aload_2
      18: athrow
    Exception table:
       from    to  target type
           7    13    14   any
          14    17    14   any

  public void setIdleTaskExecutionLimit(int);
    Code:
       0: iload_1
       1: ifle          8
       4: iconst_1
       5: goto          9
       8: iconst_0
       9: ldc           #63                 // String \'idleTaskExecutionLimit\' must be 1 or higher
      11: invokestatic  #58                 // Method org/springframework/util/Assert.isTrue:(ZLjava/lang/String;)V
      14: aload_0
      15: getfield      #59                 // Field lifecycleMonitor:Ljava/lang/Object;
      18: dup
      19: astore_2
      20: monitorenter
      21: aload_0
      22: iload_1
      23: putfield      #27                 // Field idleTaskExecutionLimit:I
      26: aload_2
      27: monitorexit
      28: goto          36
      31: astore_3
      32: aload_2
      33: monitorexit
      34: aload_3
      35: athrow
      36: return
    Exception table:
       from    to  target type
          21    28    31   any
          31    34    31   any

  public final int getIdleTaskExecutionLimit();
    Code:
       0: aload_0
       1: getfield      #59                 // Field lifecycleMonitor:Ljava/lang/Object;
       4: dup
       5: astore_1
       6: monitorenter
       7: aload_0
       8: getfield      #27                 // Field idleTaskExecutionLimit:I
      11: aload_1
      12: monitorexit
      13: ireturn
      14: astore_2
      15: aload_1
      16: monitorexit
      17: aload_2
      18: athrow
    Exception table:
       from    to  target type
           7    13    14   any
          14    17    14   any

  public void initialize();
    Code:
       0: aload_0
       1: getfield      #22                 // Field cacheLevel:I
       4: iconst_4
       5: if_icmpne     24
       8: aload_0
       9: aload_0
      10: invokevirtual #64                 // Method getTransactionManager:()Lorg/springframework/transaction/PlatformTransactionManager;
      13: ifnull        20
      16: iconst_0
      17: goto          21
      20: iconst_3
      21: putfield      #22                 // Field cacheLevel:I
      24: aload_0
      25: getfield      #59                 // Field lifecycleMonitor:Ljava/lang/Object;
      28: dup
      29: astore_1
      30: monitorenter
      31: aload_0
      32: getfield      #34                 // Field taskExecutor:Ljava/util/concurrent/Executor;
      35: ifnonnull     49
      38: aload_0
      39: aload_0
      40: invokevirtual #65                 // Method createDefaultTaskExecutor:()Lorg/springframework/core/task/TaskExecutor;
      43: putfield      #34                 // Field taskExecutor:Ljava/util/concurrent/Executor;
      46: goto          89
      49: aload_0
      50: getfield      #34                 // Field taskExecutor:Ljava/util/concurrent/Executor;
      53: instanceof    #66                 // class org/springframework/scheduling/SchedulingTaskExecutor
      56: ifeq          89
      59: aload_0
      60: getfield      #34                 // Field taskExecutor:Ljava/util/concurrent/Executor;
      63: checkcast     #66                 // class org/springframework/scheduling/SchedulingTaskExecutor
      66: invokeinterface #67,  1           // InterfaceMethod org/springframework/scheduling/SchedulingTaskExecutor.prefersShortLivedTasks:()Z
      71: ifeq          89
      74: aload_0
      75: getfield      #11                 // Field maxMessagesPerTask:I
      78: ldc           #25                 // int -2147483648
      80: if_icmpne     89
      83: aload_0
      84: bipush        10
      86: putfield      #11                 // Field maxMessagesPerTask:I
      89: aload_1
      90: monitorexit
      91: goto          99
      94: astore_2
      95: aload_1
      96: monitorexit
      97: aload_2
      98: athrow
      99: aload_0
     100: invokespecial #68                 // Method org/springframework/jms/listener/AbstractPollingMessageListenerContainer.initialize:()V
     103: return
    Exception table:
       from    to  target type
          31    91    94   any
          94    97    94   any

  protected void doInitialize() throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: getfield      #59                 // Field lifecycleMonitor:Ljava/lang/Object;
       4: dup
       5: astore_1
       6: monitorenter
       7: iconst_0
       8: istore_2
       9: iload_2
      10: aload_0
      11: getfield      #23                 // Field concurrentConsumers:I
      14: if_icmpge     27
      17: aload_0
      18: invokespecial #69                 // Method scheduleNewInvoker:()V
      21: iinc          2, 1
      24: goto          9
      27: aload_1
      28: monitorexit
      29: goto          37
      32: astore_3
      33: aload_1
      34: monitorexit
      35: aload_3
      36: athrow
      37: return
    Exception table:
       from    to  target type
           7    29    32   any
          32    35    32   any

  protected void doShutdown() throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: getfield      #6                  // Field logger:Lorg/apache/commons/logging/Log;
       4: ldc           #70                 // String Waiting for shutdown of message listener invokers
       6: invokeinterface #71,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      11: aload_0
      12: getfield      #59                 // Field lifecycleMonitor:Ljava/lang/Object;
      15: dup
      16: astore_1
      17: monitorenter
      18: iconst_0
      19: istore_2
      20: aload_0
      21: getfield      #12                 // Field activeInvokerCount:I
      24: ifle          119
      27: aload_0
      28: getfield      #6                  // Field logger:Lorg/apache/commons/logging/Log;
      31: invokeinterface #72,  1           // InterfaceMethod org/apache/commons/logging/Log.isDebugEnabled:()Z
      36: ifeq          84
      39: aload_0
      40: getfield      #6                  // Field logger:Lorg/apache/commons/logging/Log;
      43: new           #51                 // class java/lang/StringBuilder
      46: dup
      47: invokespecial #52                 // Method java/lang/StringBuilder."<init>":()V
      50: ldc           #73                 // String Still waiting for shutdown of
      52: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      55: aload_0
      56: getfield      #12                 // Field activeInvokerCount:I
      59: invokevirtual #74                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      62: ldc           #75                 // String  message listener invokers (iteration
      64: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      67: iload_2
      68: invokevirtual #74                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      71: ldc           #76                 // String )
      73: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      76: invokevirtual #56                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      79: invokeinterface #71,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      84: aload_0
      85: invokevirtual #77                 // Method getReceiveTimeout:()J
      88: lstore_3
      89: lload_3
      90: lconst_0
      91: lcmp
      92: ifle          106
      95: aload_0
      96: getfield      #59                 // Field lifecycleMonitor:Ljava/lang/Object;
      99: lload_3
     100: invokevirtual #78                 // Method java/lang/Object.wait:(J)V
     103: goto          113
     106: aload_0
     107: getfield      #59                 // Field lifecycleMonitor:Ljava/lang/Object;
     110: invokevirtual #79                 // Method java/lang/Object.wait:()V
     113: iinc          2, 1
     116: goto          20
     119: aload_0
     120: getfield      #7                  // Field scheduledInvokers:Ljava/util/Set;
     123: invokeinterface #80,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
     128: astore_3
     129: aload_3
     130: invokeinterface #81,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     135: ifeq          157
     138: aload_3
     139: invokeinterface #82,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     144: checkcast     #83                 // class org/springframework/jms/listener/DefaultMessageListenerContainer$AsyncMessageListenerInvoker
     147: astore        4
     149: aload         4
     151: invokestatic  #84                 // Method org/springframework/jms/listener/DefaultMessageListenerContainer$AsyncMessageListenerInvoker.access$000:(Lorg/springframework/jms/listener/DefaultMessageListenerContainer$AsyncMessageListenerInvoker;)V
     154: goto          129
     157: aload_0
     158: getfield      #7                  // Field scheduledInvokers:Ljava/util/Set;
     161: invokeinterface #85,  1           // InterfaceMethod java/util/Set.clear:()V
     166: aload_1
     167: monitorexit
     168: goto          178
     171: astore        5
     173: aload_1
     174: monitorexit
     175: aload         5
     177: athrow
     178: goto          188
     181: astore_1
     182: invokestatic  #87                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
     185: invokevirtual #88                 // Method java/lang/Thread.interrupt:()V
     188: return
    Exception table:
       from    to  target type
          18   168   171   any
         171   175   171   any
          11   178   181   Class java/lang/InterruptedException

  public void start() throws org.springframework.jms.JmsException;
    Code:
       0: aload_0
       1: getfield      #59                 // Field lifecycleMonitor:Ljava/lang/Object;
       4: dup
       5: astore_1
       6: monitorenter
       7: aload_0
       8: aconst_null
       9: putfield      #4                  // Field stopCallback:Ljava/lang/Runnable;
      12: aload_1
      13: monitorexit
      14: goto          22
      17: astore_2
      18: aload_1
      19: monitorexit
      20: aload_2
      21: athrow
      22: aload_0
      23: invokespecial #89                 // Method org/springframework/jms/listener/AbstractPollingMessageListenerContainer.start:()V
      26: return
    Exception table:
       from    to  target type
           7    14    17   any
          17    20    17   any

  public void stop(java.lang.Runnable) throws org.springframework.jms.JmsException;
    Code:
       0: aload_0
       1: getfield      #59                 // Field lifecycleMonitor:Ljava/lang/Object;
       4: dup
       5: astore_2
       6: monitorenter
       7: aload_0
       8: invokevirtual #90                 // Method isRunning:()Z
      11: ifeq          21
      14: aload_0
      15: getfield      #4                  // Field stopCallback:Ljava/lang/Runnable;
      18: ifnull        30
      21: aload_1
      22: invokeinterface #91,  1           // InterfaceMethod java/lang/Runnable.run:()V
      27: aload_2
      28: monitorexit
      29: return
      30: aload_0
      31: aload_1
      32: putfield      #4                  // Field stopCallback:Ljava/lang/Runnable;
      35: aload_2
      36: monitorexit
      37: goto          45
      40: astore_3
      41: aload_2
      42: monitorexit
      43: aload_3
      44: athrow
      45: aload_0
      46: invokevirtual #92                 // Method stop:()V
      49: return
    Exception table:
       from    to  target type
           7    29    40   any
          30    37    40   any
          40    43    40   any

  public final int getScheduledConsumerCount();
    Code:
       0: aload_0
       1: getfield      #59                 // Field lifecycleMonitor:Ljava/lang/Object;
       4: dup
       5: astore_1
       6: monitorenter
       7: aload_0
       8: getfield      #7                  // Field scheduledInvokers:Ljava/util/Set;
      11: invokeinterface #93,  1           // InterfaceMethod java/util/Set.size:()I
      16: aload_1
      17: monitorexit
      18: ireturn
      19: astore_2
      20: aload_1
      21: monitorexit
      22: aload_2
      23: athrow
    Exception table:
       from    to  target type
           7    18    19   any
          19    22    19   any

  public final int getActiveConsumerCount();
    Code:
       0: aload_0
       1: getfield      #59                 // Field lifecycleMonitor:Ljava/lang/Object;
       4: dup
       5: astore_1
       6: monitorenter
       7: aload_0
       8: getfield      #12                 // Field activeInvokerCount:I
      11: aload_1
      12: monitorexit
      13: ireturn
      14: astore_2
      15: aload_1
      16: monitorexit
      17: aload_2
      18: athrow
    Exception table:
       from    to  target type
           7    13    14   any
          14    17    14   any

  public boolean isRegisteredWithDestination();
    Code:
       0: aload_0
       1: getfield      #59                 // Field lifecycleMonitor:Ljava/lang/Object;
       4: dup
       5: astore_1
       6: monitorenter
       7: aload_0
       8: getfield      #2                  // Field registeredWithDestination:I
      11: ifle          18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: aload_1
      20: monitorexit
      21: ireturn
      22: astore_2
      23: aload_1
      24: monitorexit
      25: aload_2
      26: athrow
    Exception table:
       from    to  target type
           7    21    22   any
          22    25    22   any

  protected org.springframework.core.task.TaskExecutor createDefaultTaskExecutor();
    Code:
       0: aload_0
       1: invokevirtual #94                 // Method getBeanName:()Ljava/lang/String;
       4: astore_1
       5: aload_1
       6: ifnull        31
       9: new           #51                 // class java/lang/StringBuilder
      12: dup
      13: invokespecial #52                 // Method java/lang/StringBuilder."<init>":()V
      16: aload_1
      17: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      20: ldc           #95                 // String -
      22: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      25: invokevirtual #56                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      28: goto          34
      31: getstatic     #96                 // Field DEFAULT_THREAD_NAME_PREFIX:Ljava/lang/String;
      34: astore_2
      35: new           #97                 // class org/springframework/core/task/SimpleAsyncTaskExecutor
      38: dup
      39: aload_2
      40: invokespecial #98                 // Method org/springframework/core/task/SimpleAsyncTaskExecutor."<init>":(Ljava/lang/String;)V
      43: areturn

  private void scheduleNewInvoker();
    Code:
       0: new           #83                 // class org/springframework/jms/listener/DefaultMessageListenerContainer$AsyncMessageListenerInvoker
       3: dup
       4: aload_0
       5: aconst_null
       6: invokespecial #99                 // Method org/springframework/jms/listener/DefaultMessageListenerContainer$AsyncMessageListenerInvoker."<init>":(Lorg/springframework/jms/listener/DefaultMessageListenerContainer;Lorg/springframework/jms/listener/DefaultMessageListenerContainer$1;)V
       9: astore_1
      10: aload_0
      11: aload_1
      12: invokevirtual #100                // Method rescheduleTaskIfNecessary:(Ljava/lang/Object;)Z
      15: ifeq          29
      18: aload_0
      19: getfield      #7                  // Field scheduledInvokers:Ljava/util/Set;
      22: aload_1
      23: invokeinterface #101,  2          // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      28: pop
      29: return

  protected final boolean sharedConnectionEnabled();
    Code:
       0: aload_0
       1: invokevirtual #102                // Method getCacheLevel:()I
       4: iconst_1
       5: if_icmplt     12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: ireturn

  protected void doRescheduleTask(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #34                 // Field taskExecutor:Ljava/util/concurrent/Executor;
       4: aload_1
       5: checkcast     #103                // class java/lang/Runnable
       8: invokeinterface #104,  2          // InterfaceMethod java/util/concurrent/Executor.execute:(Ljava/lang/Runnable;)V
      13: return

  protected void messageReceived(java.lang.Object, javax.jms.Session);
    Code:
       0: aload_1
       1: checkcast     #83                 // class org/springframework/jms/listener/DefaultMessageListenerContainer$AsyncMessageListenerInvoker
       4: iconst_0
       5: invokevirtual #105                // Method org/springframework/jms/listener/DefaultMessageListenerContainer$AsyncMessageListenerInvoker.setIdle:(Z)V
       8: aload_0
       9: invokevirtual #106                // Method scheduleNewInvokerIfAppropriate:()V
      12: return

  protected void noMessageReceived(java.lang.Object, javax.jms.Session);
    Code:
       0: aload_1
       1: checkcast     #83                 // class org/springframework/jms/listener/DefaultMessageListenerContainer$AsyncMessageListenerInvoker
       4: iconst_1
       5: invokevirtual #105                // Method org/springframework/jms/listener/DefaultMessageListenerContainer$AsyncMessageListenerInvoker.setIdle:(Z)V
       8: return

  protected void scheduleNewInvokerIfAppropriate();
    Code:
       0: aload_0
       1: invokevirtual #90                 // Method isRunning:()Z
       4: ifeq          107
       7: aload_0
       8: invokevirtual #107                // Method resumePausedTasks:()V
      11: aload_0
      12: getfield      #59                 // Field lifecycleMonitor:Ljava/lang/Object;
      15: dup
      16: astore_1
      17: monitorenter
      18: aload_0
      19: getfield      #7                  // Field scheduledInvokers:Ljava/util/Set;
      22: invokeinterface #93,  1           // InterfaceMethod java/util/Set.size:()I
      27: aload_0
      28: getfield      #5                  // Field maxConcurrentConsumers:I
      31: if_icmpge     97
      34: aload_0
      35: invokespecial #108                // Method getIdleInvokerCount:()I
      38: aload_0
      39: getfield      #26                 // Field idleConsumerLimit:I
      42: if_icmpge     97
      45: aload_0
      46: invokespecial #69                 // Method scheduleNewInvoker:()V
      49: aload_0
      50: getfield      #6                  // Field logger:Lorg/apache/commons/logging/Log;
      53: invokeinterface #72,  1           // InterfaceMethod org/apache/commons/logging/Log.isDebugEnabled:()Z
      58: ifeq          97
      61: aload_0
      62: getfield      #6                  // Field logger:Lorg/apache/commons/logging/Log;
      65: new           #51                 // class java/lang/StringBuilder
      68: dup
      69: invokespecial #52                 // Method java/lang/StringBuilder."<init>":()V
      72: ldc           #109                // String Raised scheduled invoker count:
      74: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      77: aload_0
      78: getfield      #7                  // Field scheduledInvokers:Ljava/util/Set;
      81: invokeinterface #93,  1           // InterfaceMethod java/util/Set.size:()I
      86: invokevirtual #74                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      89: invokevirtual #56                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      92: invokeinterface #71,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      97: aload_1
      98: monitorexit
      99: goto          107
     102: astore_2
     103: aload_1
     104: monitorexit
     105: aload_2
     106: athrow
     107: return
    Exception table:
       from    to  target type
          18    99   102   any
         102   105   102   any

  private boolean shouldRescheduleInvoker(int);
    Code:
       0: iload_1
       1: aload_0
       2: getfield      #27                 // Field idleTaskExecutionLimit:I
       5: if_icmplt     20
       8: aload_0
       9: invokespecial #108                // Method getIdleInvokerCount:()I
      12: iconst_1
      13: if_icmple     20
      16: iconst_1
      17: goto          21
      20: iconst_0
      21: istore_2
      22: aload_0
      23: getfield      #7                  // Field scheduledInvokers:Ljava/util/Set;
      26: invokeinterface #93,  1           // InterfaceMethod java/util/Set.size:()I
      31: iload_2
      32: ifeq          42
      35: aload_0
      36: getfield      #23                 // Field concurrentConsumers:I
      39: goto          46
      42: aload_0
      43: getfield      #5                  // Field maxConcurrentConsumers:I
      46: if_icmpgt     53
      49: iconst_1
      50: goto          54
      53: iconst_0
      54: ireturn

  private int getIdleInvokerCount();
    Code:
       0: iconst_0
       1: istore_1
       2: aload_0
       3: getfield      #7                  // Field scheduledInvokers:Ljava/util/Set;
       6: invokeinterface #80,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      11: astore_2
      12: aload_2
      13: invokeinterface #81,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      18: ifeq          44
      21: aload_2
      22: invokeinterface #82,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      27: checkcast     #83                 // class org/springframework/jms/listener/DefaultMessageListenerContainer$AsyncMessageListenerInvoker
      30: astore_3
      31: aload_3
      32: invokevirtual #110                // Method org/springframework/jms/listener/DefaultMessageListenerContainer$AsyncMessageListenerInvoker.isIdle:()Z
      35: ifeq          41
      38: iinc          1, 1
      41: goto          12
      44: iload_1
      45: ireturn

  protected void establishSharedConnection();
    Code:
       0: aload_0
       1: invokespecial #111                // Method org/springframework/jms/listener/AbstractPollingMessageListenerContainer.establishSharedConnection:()V
       4: goto          35
       7: astore_1
       8: aload_1
       9: instanceof    #113                // class javax/jms/JMSException
      12: ifeq          23
      15: aload_0
      16: aload_1
      17: checkcast     #113                // class javax/jms/JMSException
      20: invokevirtual #114                // Method invokeExceptionListener:(Ljavax/jms/JMSException;)V
      23: aload_0
      24: getfield      #6                  // Field logger:Lorg/apache/commons/logging/Log;
      27: ldc           #115                // String Could not establish shared JMS Connection - leaving it up to asynchronous invokers to establish a Connection as soon as possible
      29: aload_1
      30: invokeinterface #116,  3          // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;Ljava/lang/Throwable;)V
      35: return
    Exception table:
       from    to  target type
           0     4     7   Class java/lang/Exception

  protected void startSharedConnection();
    Code:
       0: aload_0
       1: invokespecial #117                // Method org/springframework/jms/listener/AbstractPollingMessageListenerContainer.startSharedConnection:()V
       4: goto          20
       7: astore_1
       8: aload_0
       9: getfield      #6                  // Field logger:Lorg/apache/commons/logging/Log;
      12: ldc           #118                // String Connection start failed - relying on listeners to perform recovery
      14: aload_1
      15: invokeinterface #116,  3          // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;Ljava/lang/Throwable;)V
      20: return
    Exception table:
       from    to  target type
           0     4     7   Class java/lang/Exception

  protected void stopSharedConnection();
    Code:
       0: aload_0
       1: invokespecial #119                // Method org/springframework/jms/listener/AbstractPollingMessageListenerContainer.stopSharedConnection:()V
       4: goto          20
       7: astore_1
       8: aload_0
       9: getfield      #6                  // Field logger:Lorg/apache/commons/logging/Log;
      12: ldc           #120                // String Connection stop failed - relying on listeners to perform recovery after restart
      14: aload_1
      15: invokeinterface #116,  3          // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;Ljava/lang/Throwable;)V
      20: return
    Exception table:
       from    to  target type
           0     4     7   Class java/lang/Exception

  protected void handleListenerSetupFailure(java.lang.Throwable, boolean);
    Code:
       0: aload_1
       1: instanceof    #113                // class javax/jms/JMSException
       4: ifeq          15
       7: aload_0
       8: aload_1
       9: checkcast     #113                // class javax/jms/JMSException
      12: invokevirtual #114                // Method invokeExceptionListener:(Ljavax/jms/JMSException;)V
      15: aload_1
      16: instanceof    #121                // class org/springframework/jms/listener/AbstractJmsListeningContainer$SharedConnectionNotInitializedException
      19: ifeq          40
      22: iload_2
      23: ifne          150
      26: aload_0
      27: getfield      #6                  // Field logger:Lorg/apache/commons/logging/Log;
      30: ldc           #122                // String JMS message listener invoker needs to establish shared Connection
      32: invokeinterface #123,  2          // InterfaceMethod org/apache/commons/logging/Log.info:(Ljava/lang/Object;)V
      37: goto          150
      40: iload_2
      41: ifeq          59
      44: aload_0
      45: getfield      #6                  // Field logger:Lorg/apache/commons/logging/Log;
      48: ldc           #124                // String Setup of JMS message listener invoker failed - already recovered by other invoker
      50: aload_1
      51: invokeinterface #116,  3          // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;Ljava/lang/Throwable;)V
      56: goto          150
      59: new           #51                 // class java/lang/StringBuilder
      62: dup
      63: invokespecial #52                 // Method java/lang/StringBuilder."<init>":()V
      66: astore_3
      67: aload_3
      68: ldc           #125                // String Setup of JMS message listener invoker failed for destination \'
      70: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      73: pop
      74: aload_3
      75: aload_0
      76: invokevirtual #126                // Method getDestinationDescription:()Ljava/lang/String;
      79: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      82: ldc           #127                // String \' - trying to recover. Cause:
      84: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      87: pop
      88: aload_3
      89: aload_1
      90: instanceof    #113                // class javax/jms/JMSException
      93: ifeq          106
      96: aload_1
      97: checkcast     #113                // class javax/jms/JMSException
     100: invokestatic  #128                // Method org/springframework/jms/support/JmsUtils.buildExceptionMessage:(Ljavax/jms/JMSException;)Ljava/lang/String;
     103: goto          110
     106: aload_1
     107: invokevirtual #129                // Method java/lang/Throwable.getMessage:()Ljava/lang/String;
     110: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     113: pop
     114: aload_0
     115: getfield      #6                  // Field logger:Lorg/apache/commons/logging/Log;
     118: invokeinterface #72,  1           // InterfaceMethod org/apache/commons/logging/Log.isDebugEnabled:()Z
     123: ifeq          140
     126: aload_0
     127: getfield      #6                  // Field logger:Lorg/apache/commons/logging/Log;
     130: aload_3
     131: aload_1
     132: invokeinterface #130,  3          // InterfaceMethod org/apache/commons/logging/Log.warn:(Ljava/lang/Object;Ljava/lang/Throwable;)V
     137: goto          150
     140: aload_0
     141: getfield      #6                  // Field logger:Lorg/apache/commons/logging/Log;
     144: aload_3
     145: invokeinterface #131,  2          // InterfaceMethod org/apache/commons/logging/Log.warn:(Ljava/lang/Object;)V
     150: return

  protected void recoverAfterListenerSetupFailure();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #30                 // Field recovering:Z
       5: aload_0
       6: invokevirtual #132                // Method refreshConnectionUntilSuccessful:()V
       9: aload_0
      10: invokevirtual #133                // Method refreshDestination:()V
      13: aload_0
      14: iconst_0
      15: putfield      #30                 // Field recovering:Z
      18: aload_0
      19: iconst_0
      20: putfield      #31                 // Field interrupted:Z
      23: goto          39
      26: astore_1
      27: aload_0
      28: iconst_0
      29: putfield      #30                 // Field recovering:Z
      32: aload_0
      33: iconst_0
      34: putfield      #31                 // Field interrupted:Z
      37: aload_1
      38: athrow
      39: return
    Exception table:
       from    to  target type
           5    13    26   any

  protected void refreshConnectionUntilSuccessful();
    Code:
       0: aload_0
       1: getfield      #1                  // Field backOff:Lorg/springframework/util/backoff/BackOff;
       4: invokeinterface #134,  1          // InterfaceMethod org/springframework/util/backoff/BackOff.start:()Lorg/springframework/util/backoff/BackOffExecution;
       9: astore_1
      10: aload_0
      11: invokevirtual #90                 // Method isRunning:()Z
      14: ifeq          232
      17: aload_0
      18: invokevirtual #135                // Method sharedConnectionEnabled:()Z
      21: ifeq          31
      24: aload_0
      25: invokevirtual #136                // Method refreshSharedConnection:()V
      28: goto          40
      31: aload_0
      32: invokevirtual #137                // Method createConnection:()Ljavax/jms/Connection;
      35: astore_2
      36: aload_2
      37: invokestatic  #138                // Method org/springframework/jms/support/JmsUtils.closeConnection:(Ljavax/jms/Connection;)V
      40: aload_0
      41: getfield      #6                  // Field logger:Lorg/apache/commons/logging/Log;
      44: ldc           #139                // String Successfully refreshed JMS Connection
      46: invokeinterface #123,  2          // InterfaceMethod org/apache/commons/logging/Log.info:(Ljava/lang/Object;)V
      51: goto          232
      54: astore_2
      55: aload_2
      56: instanceof    #113                // class javax/jms/JMSException
      59: ifeq          70
      62: aload_0
      63: aload_2
      64: checkcast     #113                // class javax/jms/JMSException
      67: invokevirtual #114                // Method invokeExceptionListener:(Ljavax/jms/JMSException;)V
      70: new           #51                 // class java/lang/StringBuilder
      73: dup
      74: invokespecial #52                 // Method java/lang/StringBuilder."<init>":()V
      77: astore_3
      78: aload_3
      79: ldc           #140                // String Could not refresh JMS Connection for destination \'
      81: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      84: pop
      85: aload_3
      86: aload_0
      87: invokevirtual #126                // Method getDestinationDescription:()Ljava/lang/String;
      90: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      93: ldc           #141                // String \' - retrying using
      95: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      98: pop
      99: aload_3
     100: aload_1
     101: invokevirtual #142                // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     104: ldc           #143                // String . Cause:
     106: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     109: pop
     110: aload_3
     111: aload_2
     112: instanceof    #113                // class javax/jms/JMSException
     115: ifeq          128
     118: aload_2
     119: checkcast     #113                // class javax/jms/JMSException
     122: invokestatic  #128                // Method org/springframework/jms/support/JmsUtils.buildExceptionMessage:(Ljavax/jms/JMSException;)Ljava/lang/String;
     125: goto          132
     128: aload_2
     129: invokevirtual #144                // Method java/lang/Exception.getMessage:()Ljava/lang/String;
     132: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     135: pop
     136: aload_0
     137: getfield      #6                  // Field logger:Lorg/apache/commons/logging/Log;
     140: invokeinterface #72,  1           // InterfaceMethod org/apache/commons/logging/Log.isDebugEnabled:()Z
     145: ifeq          162
     148: aload_0
     149: getfield      #6                  // Field logger:Lorg/apache/commons/logging/Log;
     152: aload_3
     153: aload_2
     154: invokeinterface #145,  3          // InterfaceMethod org/apache/commons/logging/Log.error:(Ljava/lang/Object;Ljava/lang/Throwable;)V
     159: goto          172
     162: aload_0
     163: getfield      #6                  // Field logger:Lorg/apache/commons/logging/Log;
     166: aload_3
     167: invokeinterface #146,  2          // InterfaceMethod org/apache/commons/logging/Log.error:(Ljava/lang/Object;)V
     172: aload_0
     173: aload_1
     174: invokevirtual #147                // Method applyBackOffTime:(Lorg/springframework/util/backoff/BackOffExecution;)Z
     177: ifne          10
     180: new           #51                 // class java/lang/StringBuilder
     183: dup
     184: invokespecial #52                 // Method java/lang/StringBuilder."<init>":()V
     187: astore_2
     188: aload_2
     189: ldc           #148                // String Stopping container for destination \'
     191: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     194: aload_0
     195: invokevirtual #126                // Method getDestinationDescription:()Ljava/lang/String;
     198: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     201: ldc           #149                // String \': back-off policy does not allow
     203: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     206: ldc           #150                // String for further attempts.
     208: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     211: pop
     212: aload_0
     213: getfield      #6                  // Field logger:Lorg/apache/commons/logging/Log;
     216: aload_2
     217: invokevirtual #56                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     220: invokeinterface #146,  2          // InterfaceMethod org/apache/commons/logging/Log.error:(Ljava/lang/Object;)V
     225: aload_0
     226: invokevirtual #92                 // Method stop:()V
     229: goto          10
     232: return
    Exception table:
       from    to  target type
          17    51    54   Class java/lang/Exception

  protected void refreshDestination();
    Code:
       0: aload_0
       1: invokevirtual #151                // Method getDestinationName:()Ljava/lang/String;
       4: astore_1
       5: aload_1
       6: ifnull        31
       9: aload_0
      10: invokevirtual #152                // Method getDestinationResolver:()Lorg/springframework/jms/support/destination/DestinationResolver;
      13: astore_2
      14: aload_2
      15: instanceof    #153                // class org/springframework/jms/support/destination/CachingDestinationResolver
      18: ifeq          31
      21: aload_2
      22: checkcast     #153                // class org/springframework/jms/support/destination/CachingDestinationResolver
      25: aload_1
      26: invokeinterface #154,  2          // InterfaceMethod org/springframework/jms/support/destination/CachingDestinationResolver.removeFromCache:(Ljava/lang/String;)V
      31: return

  protected boolean applyBackOffTime(org.springframework.util.backoff.BackOffExecution);
    Code:
       0: aload_0
       1: getfield      #30                 // Field recovering:Z
       4: ifeq          16
       7: aload_0
       8: getfield      #31                 // Field interrupted:Z
      11: ifeq          16
      14: iconst_0
      15: ireturn
      16: aload_1
      17: invokeinterface #155,  1          // InterfaceMethod org/springframework/util/backoff/BackOffExecution.nextBackOff:()J
      22: lstore_2
      23: lload_2
      24: ldc2_w        #157                // long -1l
      27: lcmp
      28: ifne          33
      31: iconst_0
      32: ireturn
      33: aload_0
      34: getfield      #59                 // Field lifecycleMonitor:Ljava/lang/Object;
      37: dup
      38: astore        4
      40: monitorenter
      41: aload_0
      42: getfield      #59                 // Field lifecycleMonitor:Ljava/lang/Object;
      45: lload_2
      46: invokevirtual #78                 // Method java/lang/Object.wait:(J)V
      49: aload         4
      51: monitorexit
      52: goto          63
      55: astore        5
      57: aload         4
      59: monitorexit
      60: aload         5
      62: athrow
      63: goto          86
      66: astore        4
      68: invokestatic  #87                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      71: invokevirtual #88                 // Method java/lang/Thread.interrupt:()V
      74: aload_0
      75: getfield      #30                 // Field recovering:Z
      78: ifeq          86
      81: aload_0
      82: iconst_1
      83: putfield      #31                 // Field interrupted:Z
      86: iconst_1
      87: ireturn
    Exception table:
       from    to  target type
          41    52    55   any
          55    60    55   any
          33    63    66   Class java/lang/InterruptedException

  public final boolean isRecovering();
    Code:
       0: aload_0
       1: getfield      #30                 // Field recovering:Z
       4: ireturn

  static int access$208(org.springframework.jms.listener.DefaultMessageListenerContainer);
    Code:
       0: aload_0
       1: dup
       2: getfield      #12                 // Field activeInvokerCount:I
       5: dup_x1
       6: iconst_1
       7: iadd
       8: putfield      #12                 // Field activeInvokerCount:I
      11: ireturn

  static int access$300(org.springframework.jms.listener.DefaultMessageListenerContainer);
    Code:
       0: aload_0
       1: getfield      #11                 // Field maxMessagesPerTask:I
       4: ireturn

  static java.lang.Object access$400(org.springframework.jms.listener.DefaultMessageListenerContainer);
    Code:
       0: aload_0
       1: getfield      #10                 // Field recoveryMonitor:Ljava/lang/Object;
       4: areturn

  static java.lang.Object access$500(org.springframework.jms.listener.DefaultMessageListenerContainer);
    Code:
       0: aload_0
       1: getfield      #9                  // Field currentRecoveryMarker:Ljava/lang/Object;
       4: areturn

  static java.lang.Object access$502(org.springframework.jms.listener.DefaultMessageListenerContainer, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: dup_x1
       3: putfield      #9                  // Field currentRecoveryMarker:Ljava/lang/Object;
       6: areturn

  static boolean access$600(org.springframework.jms.listener.DefaultMessageListenerContainer, int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #8                  // Method shouldRescheduleInvoker:(I)Z
       5: ireturn

  static java.util.Set access$700(org.springframework.jms.listener.DefaultMessageListenerContainer);
    Code:
       0: aload_0
       1: getfield      #7                  // Field scheduledInvokers:Ljava/util/Set;
       4: areturn

  static org.apache.commons.logging.Log access$800(org.springframework.jms.listener.DefaultMessageListenerContainer);
    Code:
       0: aload_0
       1: getfield      #6                  // Field logger:Lorg/apache/commons/logging/Log;
       4: areturn

  static org.apache.commons.logging.Log access$900(org.springframework.jms.listener.DefaultMessageListenerContainer);
    Code:
       0: aload_0
       1: getfield      #6                  // Field logger:Lorg/apache/commons/logging/Log;
       4: areturn

  static org.apache.commons.logging.Log access$1000(org.springframework.jms.listener.DefaultMessageListenerContainer);
    Code:
       0: aload_0
       1: getfield      #6                  // Field logger:Lorg/apache/commons/logging/Log;
       4: areturn

  static org.apache.commons.logging.Log access$1100(org.springframework.jms.listener.DefaultMessageListenerContainer);
    Code:
       0: aload_0
       1: getfield      #6                  // Field logger:Lorg/apache/commons/logging/Log;
       4: areturn

  static int access$1200(org.springframework.jms.listener.DefaultMessageListenerContainer);
    Code:
       0: aload_0
       1: getfield      #5                  // Field maxConcurrentConsumers:I
       4: ireturn

  static int access$210(org.springframework.jms.listener.DefaultMessageListenerContainer);
    Code:
       0: aload_0
       1: dup
       2: getfield      #12                 // Field activeInvokerCount:I
       5: dup_x1
       6: iconst_1
       7: isub
       8: putfield      #12                 // Field activeInvokerCount:I
      11: ireturn

  static java.lang.Runnable access$1300(org.springframework.jms.listener.DefaultMessageListenerContainer);
    Code:
       0: aload_0
       1: getfield      #4                  // Field stopCallback:Ljava/lang/Runnable;
       4: areturn

  static int access$200(org.springframework.jms.listener.DefaultMessageListenerContainer);
    Code:
       0: aload_0
       1: getfield      #12                 // Field activeInvokerCount:I
       4: ireturn

  static java.lang.Runnable access$1302(org.springframework.jms.listener.DefaultMessageListenerContainer, java.lang.Runnable);
    Code:
       0: aload_0
       1: aload_1
       2: dup_x1
       3: putfield      #4                  // Field stopCallback:Ljava/lang/Runnable;
       6: areturn

  static javax.jms.Session access$1400(org.springframework.jms.listener.DefaultMessageListenerContainer, javax.jms.Connection) throws javax.jms.JMSException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #3                  // Method createSession:(Ljavax/jms/Connection;)Ljavax/jms/Session;
       5: areturn

  static int access$1508(org.springframework.jms.listener.DefaultMessageListenerContainer);
    Code:
       0: aload_0
       1: dup
       2: getfield      #2                  // Field registeredWithDestination:I
       5: dup_x1
       6: iconst_1
       7: iadd
       8: putfield      #2                  // Field registeredWithDestination:I
      11: ireturn

  static int access$1510(org.springframework.jms.listener.DefaultMessageListenerContainer);
    Code:
       0: aload_0
       1: dup
       2: getfield      #2                  // Field registeredWithDestination:I
       5: dup_x1
       6: iconst_1
       7: isub
       8: putfield      #2                  // Field registeredWithDestination:I
      11: ireturn

  static org.springframework.util.backoff.BackOff access$1600(org.springframework.jms.listener.DefaultMessageListenerContainer);
    Code:
       0: aload_0
       1: getfield      #1                  // Field backOff:Lorg/springframework/util/backoff/BackOff;
       4: areturn

  static {};
    Code:
       0: new           #51                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #52                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #15                 // class org/springframework/jms/listener/DefaultMessageListenerContainer
       9: invokestatic  #159                // Method org/springframework/util/ClassUtils.getShortName:(Ljava/lang/Class;)Ljava/lang/String;
      12: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      15: ldc           #95                 // String -
      17: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      20: invokevirtual #56                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      23: putstatic     #96                 // Field DEFAULT_THREAD_NAME_PREFIX:Ljava/lang/String;
      26: new           #160                // class org/springframework/core/Constants
      29: dup
      30: ldc           #15                 // class org/springframework/jms/listener/DefaultMessageListenerContainer
      32: invokespecial #161                // Method org/springframework/core/Constants."<init>":(Ljava/lang/Class;)V
      35: putstatic     #40                 // Field constants:Lorg/springframework/core/Constants;
      38: return
}
