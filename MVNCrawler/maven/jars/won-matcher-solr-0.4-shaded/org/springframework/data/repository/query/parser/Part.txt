Compiled from "Part.java"
public class org.springframework.data.repository.query.parser.Part {
  private static final java.util.regex.Pattern IGNORE_CASE;

  private final org.springframework.data.mapping.PropertyPath propertyPath;

  private final org.springframework.data.repository.query.parser.Part$Type type;

  private org.springframework.data.repository.query.parser.Part$IgnoreCaseType ignoreCase;

  public org.springframework.data.repository.query.parser.Part(java.lang.String, java.lang.Class<?>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iconst_0
       4: invokespecial #1                  // Method "<init>":(Ljava/lang/String;Ljava/lang/Class;Z)V
       7: return

  public org.springframework.data.repository.query.parser.Part(java.lang.String, java.lang.Class<?>, boolean);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: getstatic     #3                  // Field org/springframework/data/repository/query/parser/Part$IgnoreCaseType.NEVER:Lorg/springframework/data/repository/query/parser/Part$IgnoreCaseType;
       8: putfield      #4                  // Field ignoreCase:Lorg/springframework/data/repository/query/parser/Part$IgnoreCaseType;
      11: aload_1
      12: ldc           #5                  // String Part source must not be null or empty!
      14: invokestatic  #6                  // Method org/springframework/util/Assert.hasText:(Ljava/lang/String;Ljava/lang/String;)V
      17: aload_2
      18: ldc           #7                  // String Type must not be null!
      20: invokestatic  #8                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      23: aload_0
      24: aload_1
      25: invokespecial #9                  // Method detectAndSetIgnoreCase:(Ljava/lang/String;)Ljava/lang/String;
      28: astore        4
      30: iload_3
      31: ifeq          51
      34: aload_0
      35: getfield      #4                  // Field ignoreCase:Lorg/springframework/data/repository/query/parser/Part$IgnoreCaseType;
      38: getstatic     #10                 // Field org/springframework/data/repository/query/parser/Part$IgnoreCaseType.ALWAYS:Lorg/springframework/data/repository/query/parser/Part$IgnoreCaseType;
      41: if_acmpeq     51
      44: aload_0
      45: getstatic     #11                 // Field org/springframework/data/repository/query/parser/Part$IgnoreCaseType.WHEN_POSSIBLE:Lorg/springframework/data/repository/query/parser/Part$IgnoreCaseType;
      48: putfield      #4                  // Field ignoreCase:Lorg/springframework/data/repository/query/parser/Part$IgnoreCaseType;
      51: aload_0
      52: aload         4
      54: invokestatic  #12                 // Method org/springframework/data/repository/query/parser/Part$Type.fromProperty:(Ljava/lang/String;)Lorg/springframework/data/repository/query/parser/Part$Type;
      57: putfield      #13                 // Field type:Lorg/springframework/data/repository/query/parser/Part$Type;
      60: aload_0
      61: aload_0
      62: getfield      #13                 // Field type:Lorg/springframework/data/repository/query/parser/Part$Type;
      65: aload         4
      67: invokevirtual #14                 // Method org/springframework/data/repository/query/parser/Part$Type.extractProperty:(Ljava/lang/String;)Ljava/lang/String;
      70: aload_2
      71: invokestatic  #15                 // Method org/springframework/data/mapping/PropertyPath.from:(Ljava/lang/String;Ljava/lang/Class;)Lorg/springframework/data/mapping/PropertyPath;
      74: putfield      #16                 // Field propertyPath:Lorg/springframework/data/mapping/PropertyPath;
      77: return

  private java.lang.String detectAndSetIgnoreCase(java.lang.String);
    Code:
       0: getstatic     #17                 // Field IGNORE_CASE:Ljava/util/regex/Pattern;
       3: aload_1
       4: invokevirtual #18                 // Method java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;
       7: astore_2
       8: aload_1
       9: astore_3
      10: aload_2
      11: invokevirtual #19                 // Method java/util/regex/Matcher.find:()Z
      14: ifeq          62
      17: aload_0
      18: getstatic     #10                 // Field org/springframework/data/repository/query/parser/Part$IgnoreCaseType.ALWAYS:Lorg/springframework/data/repository/query/parser/Part$IgnoreCaseType;
      21: putfield      #4                  // Field ignoreCase:Lorg/springframework/data/repository/query/parser/Part$IgnoreCaseType;
      24: new           #20                 // class java/lang/StringBuilder
      27: dup
      28: invokespecial #21                 // Method java/lang/StringBuilder."<init>":()V
      31: aload_1
      32: iconst_0
      33: aload_2
      34: invokevirtual #22                 // Method java/util/regex/Matcher.start:()I
      37: invokevirtual #23                 // Method java/lang/String.substring:(II)Ljava/lang/String;
      40: invokevirtual #24                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      43: aload_1
      44: aload_2
      45: invokevirtual #25                 // Method java/util/regex/Matcher.end:()I
      48: aload_1
      49: invokevirtual #26                 // Method java/lang/String.length:()I
      52: invokevirtual #23                 // Method java/lang/String.substring:(II)Ljava/lang/String;
      55: invokevirtual #24                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      58: invokevirtual #27                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      61: astore_3
      62: aload_3
      63: areturn

  public boolean getParameterRequired();
    Code:
       0: aload_0
       1: invokevirtual #28                 // Method getNumberOfArguments:()I
       4: ifle          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public int getNumberOfArguments();
    Code:
       0: aload_0
       1: getfield      #13                 // Field type:Lorg/springframework/data/repository/query/parser/Part$Type;
       4: invokevirtual #29                 // Method org/springframework/data/repository/query/parser/Part$Type.getNumberOfArguments:()I
       7: ireturn

  public org.springframework.data.mapping.PropertyPath getProperty();
    Code:
       0: aload_0
       1: getfield      #16                 // Field propertyPath:Lorg/springframework/data/mapping/PropertyPath;
       4: areturn

  public org.springframework.data.repository.query.parser.Part$Type getType();
    Code:
       0: aload_0
       1: getfield      #13                 // Field type:Lorg/springframework/data/repository/query/parser/Part$Type;
       4: areturn

  public org.springframework.data.repository.query.parser.Part$IgnoreCaseType shouldIgnoreCase();
    Code:
       0: aload_0
       1: getfield      #4                  // Field ignoreCase:Lorg/springframework/data/repository/query/parser/Part$IgnoreCaseType;
       4: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: aload_0
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: ifnull        25
      11: aload_0
      12: invokevirtual #30                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      15: aload_1
      16: invokevirtual #30                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      19: invokevirtual #31                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      22: ifne          27
      25: iconst_0
      26: ireturn
      27: aload_1
      28: checkcast     #32                 // class org/springframework/data/repository/query/parser/Part
      31: astore_2
      32: aload_0
      33: getfield      #16                 // Field propertyPath:Lorg/springframework/data/mapping/PropertyPath;
      36: aload_2
      37: getfield      #16                 // Field propertyPath:Lorg/springframework/data/mapping/PropertyPath;
      40: invokevirtual #33                 // Method org/springframework/data/mapping/PropertyPath.equals:(Ljava/lang/Object;)Z
      43: ifeq          64
      46: aload_0
      47: getfield      #13                 // Field type:Lorg/springframework/data/repository/query/parser/Part$Type;
      50: aload_2
      51: getfield      #13                 // Field type:Lorg/springframework/data/repository/query/parser/Part$Type;
      54: invokevirtual #34                 // Method org/springframework/data/repository/query/parser/Part$Type.equals:(Ljava/lang/Object;)Z
      57: ifeq          64
      60: iconst_1
      61: goto          65
      64: iconst_0
      65: ireturn

  public int hashCode();
    Code:
       0: bipush        37
       2: istore_1
       3: iload_1
       4: bipush        17
       6: aload_0
       7: getfield      #16                 // Field propertyPath:Lorg/springframework/data/mapping/PropertyPath;
      10: invokevirtual #35                 // Method org/springframework/data/mapping/PropertyPath.hashCode:()I
      13: imul
      14: iadd
      15: istore_1
      16: iload_1
      17: bipush        17
      19: aload_0
      20: getfield      #13                 // Field type:Lorg/springframework/data/repository/query/parser/Part$Type;
      23: invokevirtual #36                 // Method org/springframework/data/repository/query/parser/Part$Type.hashCode:()I
      26: imul
      27: iadd
      28: istore_1
      29: iload_1
      30: ireturn

  public java.lang.String toString();
    Code:
       0: ldc           #37                 // String %s %s
       2: iconst_2
       3: anewarray     #38                 // class java/lang/Object
       6: dup
       7: iconst_0
       8: aload_0
       9: getfield      #16                 // Field propertyPath:Lorg/springframework/data/mapping/PropertyPath;
      12: invokevirtual #39                 // Method org/springframework/data/mapping/PropertyPath.getSegment:()Ljava/lang/String;
      15: aastore
      16: dup
      17: iconst_1
      18: aload_0
      19: getfield      #13                 // Field type:Lorg/springframework/data/repository/query/parser/Part$Type;
      22: aastore
      23: invokestatic  #40                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      26: areturn

  static {};
    Code:
       0: ldc           #41                 // String Ignor(ing|e)Case
       2: invokestatic  #42                 // Method java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;
       5: putstatic     #17                 // Field IGNORE_CASE:Ljava/util/regex/Pattern;
       8: return
}
