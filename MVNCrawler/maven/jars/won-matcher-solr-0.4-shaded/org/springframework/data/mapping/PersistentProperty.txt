Compiled from "PersistentProperty.java"
public interface org.springframework.data.mapping.PersistentProperty<P extends org.springframework.data.mapping.PersistentProperty<P>> {
  public abstract org.springframework.data.mapping.PersistentEntity<?, P> getOwner();

  public abstract java.lang.String getName();

  public abstract java.lang.Class<?> getType();

  public abstract org.springframework.data.util.TypeInformation<?> getTypeInformation();

  public abstract java.lang.Iterable<? extends org.springframework.data.util.TypeInformation<?>> getPersistentEntityType();

  public abstract java.lang.reflect.Method getGetter();

  public abstract java.lang.reflect.Method getSetter();

  public abstract java.lang.reflect.Field getField();

  public abstract java.lang.String getSpelExpression();

  public abstract org.springframework.data.mapping.Association<P> getAssociation();

  public abstract boolean isEntity();

  public abstract boolean isIdProperty();

  public abstract boolean isVersionProperty();

  public abstract boolean isCollectionLike();

  public abstract boolean isMap();

  public abstract boolean isArray();

  public abstract boolean isTransient();

  public abstract boolean isWritable();

  public abstract boolean isAssociation();

  public abstract java.lang.Class<?> getComponentType();

  public abstract java.lang.Class<?> getRawType();

  public abstract java.lang.Class<?> getMapValueType();

  public abstract java.lang.Class<?> getActualType();

  public abstract <A extends java.lang.annotation.Annotation> A findAnnotation(java.lang.Class<A>);

  public abstract <A extends java.lang.annotation.Annotation> A findPropertyOrOwnerAnnotation(java.lang.Class<A>);

  public abstract boolean isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>);

  public abstract boolean usePropertyAccess();
}
