Compiled from "SpELExpressionParameterValueProvider.java"
public class org.springframework.data.mapping.model.SpELExpressionParameterValueProvider<P extends org.springframework.data.mapping.PersistentProperty<P>> implements org.springframework.data.mapping.model.ParameterValueProvider<P> {
  private final org.springframework.data.mapping.model.SpELExpressionEvaluator evaluator;

  private final org.springframework.data.mapping.model.ParameterValueProvider<P> delegate;

  private final org.springframework.core.convert.ConversionService conversionService;

  public org.springframework.data.mapping.model.SpELExpressionParameterValueProvider(org.springframework.data.mapping.model.SpELExpressionEvaluator, org.springframework.core.convert.ConversionService, org.springframework.data.mapping.model.ParameterValueProvider<P>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_1
       5: ldc           #2                  // String SpELExpressionEvaluator must not be null!
       7: invokestatic  #3                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      10: aload_2
      11: ldc           #4                  // String ConversionService must not be null!
      13: invokestatic  #3                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      16: aload_3
      17: ldc           #5                  // String ParameterValueProvider delegate must not be null!
      19: invokestatic  #3                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      22: aload_0
      23: aload_1
      24: putfield      #6                  // Field evaluator:Lorg/springframework/data/mapping/model/SpELExpressionEvaluator;
      27: aload_0
      28: aload_2
      29: putfield      #7                  // Field conversionService:Lorg/springframework/core/convert/ConversionService;
      32: aload_0
      33: aload_3
      34: putfield      #8                  // Field delegate:Lorg/springframework/data/mapping/model/ParameterValueProvider;
      37: return

  public <T> T getParameterValue(org.springframework.data.mapping.PreferredConstructor$Parameter<T, P>);
    Code:
       0: aload_1
       1: invokevirtual #9                  // Method org/springframework/data/mapping/PreferredConstructor$Parameter.hasSpelExpression:()Z
       4: ifne          29
       7: aload_0
       8: getfield      #8                  // Field delegate:Lorg/springframework/data/mapping/model/ParameterValueProvider;
      11: ifnonnull     18
      14: aconst_null
      15: goto          28
      18: aload_0
      19: getfield      #8                  // Field delegate:Lorg/springframework/data/mapping/model/ParameterValueProvider;
      22: aload_1
      23: invokeinterface #10,  2           // InterfaceMethod org/springframework/data/mapping/model/ParameterValueProvider.getParameterValue:(Lorg/springframework/data/mapping/PreferredConstructor$Parameter;)Ljava/lang/Object;
      28: areturn
      29: aload_0
      30: getfield      #6                  // Field evaluator:Lorg/springframework/data/mapping/model/SpELExpressionEvaluator;
      33: aload_1
      34: invokevirtual #11                 // Method org/springframework/data/mapping/PreferredConstructor$Parameter.getSpelExpression:()Ljava/lang/String;
      37: invokeinterface #12,  2           // InterfaceMethod org/springframework/data/mapping/model/SpELExpressionEvaluator.evaluate:(Ljava/lang/String;)Ljava/lang/Object;
      42: astore_2
      43: aload_2
      44: ifnonnull     51
      47: aconst_null
      48: goto          57
      51: aload_0
      52: aload_2
      53: aload_1
      54: invokevirtual #13                 // Method potentiallyConvertSpelValue:(Ljava/lang/Object;Lorg/springframework/data/mapping/PreferredConstructor$Parameter;)Ljava/lang/Object;
      57: areturn

  protected <T> T potentiallyConvertSpelValue(java.lang.Object, org.springframework.data.mapping.PreferredConstructor$Parameter<T, P>);
    Code:
       0: aload_0
       1: getfield      #7                  // Field conversionService:Lorg/springframework/core/convert/ConversionService;
       4: aload_1
       5: aload_2
       6: invokevirtual #14                 // Method org/springframework/data/mapping/PreferredConstructor$Parameter.getRawType:()Ljava/lang/Class;
       9: invokeinterface #15,  3           // InterfaceMethod org/springframework/core/convert/ConversionService.convert:(Ljava/lang/Object;Ljava/lang/Class;)Ljava/lang/Object;
      14: areturn
}
