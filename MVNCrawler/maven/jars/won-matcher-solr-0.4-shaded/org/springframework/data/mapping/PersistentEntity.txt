Compiled from "PersistentEntity.java"
public interface org.springframework.data.mapping.PersistentEntity<T, P extends org.springframework.data.mapping.PersistentProperty<P>> {
  public abstract java.lang.String getName();

  public abstract org.springframework.data.mapping.PreferredConstructor<T, P> getPersistenceConstructor();

  public abstract boolean isConstructorArgument(org.springframework.data.mapping.PersistentProperty<?>);

  public abstract boolean isIdProperty(org.springframework.data.mapping.PersistentProperty<?>);

  public abstract boolean isVersionProperty(org.springframework.data.mapping.PersistentProperty<?>);

  public abstract P getIdProperty();

  public abstract P getVersionProperty();

  public abstract P getPersistentProperty(java.lang.String);

  public abstract P getPersistentProperty(java.lang.Class<? extends java.lang.annotation.Annotation>);

  public abstract boolean hasIdProperty();

  public abstract boolean hasVersionProperty();

  public abstract java.lang.Class<T> getType();

  public abstract java.lang.Object getTypeAlias();

  public abstract org.springframework.data.util.TypeInformation<T> getTypeInformation();

  public abstract void doWithProperties(org.springframework.data.mapping.PropertyHandler<P>);

  public abstract void doWithProperties(org.springframework.data.mapping.SimplePropertyHandler);

  public abstract void doWithAssociations(org.springframework.data.mapping.AssociationHandler<P>);

  public abstract void doWithAssociations(org.springframework.data.mapping.SimpleAssociationHandler);

  public abstract <A extends java.lang.annotation.Annotation> A findAnnotation(java.lang.Class<A>);

  public abstract org.springframework.data.mapping.PersistentPropertyAccessor getPropertyAccessor(java.lang.Object);

  public abstract org.springframework.data.mapping.IdentifierAccessor getIdentifierAccessor(java.lang.Object);
}
