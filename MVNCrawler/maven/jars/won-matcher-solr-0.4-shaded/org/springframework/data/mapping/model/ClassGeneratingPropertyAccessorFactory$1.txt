Compiled from "ClassGeneratingPropertyAccessorFactory.java"
class org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory$1 implements org.springframework.data.mapping.SimplePropertyHandler {
  final java.util.Set val$hashCodes;

  final java.util.concurrent.atomic.AtomicInteger val$propertyCount;

  final org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory this$0;

  org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory$1(org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory, java.util.Set, java.util.concurrent.atomic.AtomicInteger);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lorg/springframework/data/mapping/model/ClassGeneratingPropertyAccessorFactory;
       5: aload_0
       6: aload_2
       7: putfield      #2                  // Field val$hashCodes:Ljava/util/Set;
      10: aload_0
      11: aload_3
      12: putfield      #3                  // Field val$propertyCount:Ljava/util/concurrent/atomic/AtomicInteger;
      15: aload_0
      16: invokespecial #4                  // Method java/lang/Object."<init>":()V
      19: return

  public void doWithPersistentProperty(org.springframework.data.mapping.PersistentProperty<?>);
    Code:
       0: aload_0
       1: getfield      #2                  // Field val$hashCodes:Ljava/util/Set;
       4: aload_1
       5: invokeinterface #5,  1            // InterfaceMethod org/springframework/data/mapping/PersistentProperty.getName:()Ljava/lang/String;
      10: invokevirtual #6                  // Method java/lang/String.hashCode:()I
      13: invokestatic  #7                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      16: invokeinterface #8,  2            // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      21: pop
      22: aload_0
      23: getfield      #3                  // Field val$propertyCount:Ljava/util/concurrent/atomic/AtomicInteger;
      26: invokevirtual #9                  // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
      29: pop
      30: return
}
