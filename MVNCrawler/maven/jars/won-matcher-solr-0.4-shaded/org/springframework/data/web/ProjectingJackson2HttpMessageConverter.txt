Compiled from "ProjectingJackson2HttpMessageConverter.java"
public class org.springframework.data.web.ProjectingJackson2HttpMessageConverter extends org.springframework.http.converter.json.MappingJackson2HttpMessageConverter implements org.springframework.beans.factory.BeanClassLoaderAware,org.springframework.beans.factory.BeanFactoryAware {
  private final org.springframework.data.projection.SpelAwareProxyProjectionFactory projectionFactory;

  private final java.util.Map<java.lang.Class<?>, java.lang.Boolean> supportedTypesCache;

  public org.springframework.data.web.ProjectingJackson2HttpMessageConverter();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/springframework/http/converter/json/MappingJackson2HttpMessageConverter."<init>":()V
       4: aload_0
       5: new           #2                  // class org/springframework/util/ConcurrentReferenceHashMap
       8: dup
       9: invokespecial #3                  // Method org/springframework/util/ConcurrentReferenceHashMap."<init>":()V
      12: putfield      #4                  // Field supportedTypesCache:Ljava/util/Map;
      15: aload_0
      16: aload_0
      17: invokevirtual #5                  // Method getObjectMapper:()Lcom/fasterxml/jackson/databind/ObjectMapper;
      20: invokestatic  #6                  // Method initProjectionFactory:(Lcom/fasterxml/jackson/databind/ObjectMapper;)Lorg/springframework/data/projection/SpelAwareProxyProjectionFactory;
      23: putfield      #7                  // Field projectionFactory:Lorg/springframework/data/projection/SpelAwareProxyProjectionFactory;
      26: return

  public org.springframework.data.web.ProjectingJackson2HttpMessageConverter(com.fasterxml.jackson.databind.ObjectMapper);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #8                  // Method org/springframework/http/converter/json/MappingJackson2HttpMessageConverter."<init>":(Lcom/fasterxml/jackson/databind/ObjectMapper;)V
       5: aload_0
       6: new           #2                  // class org/springframework/util/ConcurrentReferenceHashMap
       9: dup
      10: invokespecial #3                  // Method org/springframework/util/ConcurrentReferenceHashMap."<init>":()V
      13: putfield      #4                  // Field supportedTypesCache:Ljava/util/Map;
      16: aload_0
      17: aload_1
      18: invokestatic  #6                  // Method initProjectionFactory:(Lcom/fasterxml/jackson/databind/ObjectMapper;)Lorg/springframework/data/projection/SpelAwareProxyProjectionFactory;
      21: putfield      #7                  // Field projectionFactory:Lorg/springframework/data/projection/SpelAwareProxyProjectionFactory;
      24: return

  private static org.springframework.data.projection.SpelAwareProxyProjectionFactory initProjectionFactory(com.fasterxml.jackson.databind.ObjectMapper);
    Code:
       0: aload_0
       1: ldc           #9                  // String ObjectMapper must not be null!
       3: invokestatic  #10                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: new           #11                 // class org/springframework/data/projection/SpelAwareProxyProjectionFactory
       9: dup
      10: invokespecial #12                 // Method org/springframework/data/projection/SpelAwareProxyProjectionFactory."<init>":()V
      13: astore_1
      14: aload_1
      15: new           #13                 // class org/springframework/data/web/JsonProjectingMethodInterceptorFactory
      18: dup
      19: new           #14                 // class com/jayway/jsonpath/spi/mapper/JacksonMappingProvider
      22: dup
      23: aload_0
      24: invokespecial #15                 // Method com/jayway/jsonpath/spi/mapper/JacksonMappingProvider."<init>":(Lcom/fasterxml/jackson/databind/ObjectMapper;)V
      27: invokespecial #16                 // Method org/springframework/data/web/JsonProjectingMethodInterceptorFactory."<init>":(Lcom/jayway/jsonpath/spi/mapper/MappingProvider;)V
      30: invokevirtual #17                 // Method org/springframework/data/projection/SpelAwareProxyProjectionFactory.registerMethodInvokerFactory:(Lorg/springframework/data/projection/MethodInterceptorFactory;)V
      33: aload_1
      34: areturn

  public void setBeanClassLoader(java.lang.ClassLoader);
    Code:
       0: aload_0
       1: getfield      #7                  // Field projectionFactory:Lorg/springframework/data/projection/SpelAwareProxyProjectionFactory;
       4: aload_1
       5: invokevirtual #18                 // Method org/springframework/data/projection/SpelAwareProxyProjectionFactory.setBeanClassLoader:(Ljava/lang/ClassLoader;)V
       8: return

  public void setBeanFactory(org.springframework.beans.factory.BeanFactory) throws org.springframework.beans.BeansException;
    Code:
       0: aload_0
       1: getfield      #7                  // Field projectionFactory:Lorg/springframework/data/projection/SpelAwareProxyProjectionFactory;
       4: aload_1
       5: invokevirtual #19                 // Method org/springframework/data/projection/SpelAwareProxyProjectionFactory.setBeanFactory:(Lorg/springframework/beans/factory/BeanFactory;)V
       8: return

  public boolean canRead(java.lang.reflect.Type, java.lang.Class<?>, org.springframework.http.MediaType);
    Code:
       0: aload_0
       1: aload_3
       2: invokevirtual #20                 // Method canRead:(Lorg/springframework/http/MediaType;)Z
       5: ifne          10
       8: iconst_0
       9: ireturn
      10: aload_2
      11: ifnonnull     18
      14: aconst_null
      15: goto          22
      18: aload_2
      19: invokestatic  #21                 // Method org/springframework/core/ResolvableType.forClass:(Ljava/lang/Class;)Lorg/springframework/core/ResolvableType;
      22: astore        4
      24: aload_1
      25: aload         4
      27: invokestatic  #22                 // Method org/springframework/core/ResolvableType.forType:(Ljava/lang/reflect/Type;Lorg/springframework/core/ResolvableType;)Lorg/springframework/core/ResolvableType;
      30: ldc           #23                 // class java/lang/Object
      32: invokevirtual #24                 // Method org/springframework/core/ResolvableType.resolve:(Ljava/lang/Class;)Ljava/lang/Class;
      35: astore        5
      37: aload_0
      38: getfield      #4                  // Field supportedTypesCache:Ljava/util/Map;
      41: aload         5
      43: invokeinterface #25,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      48: checkcast     #26                 // class java/lang/Boolean
      51: astore        6
      53: aload         6
      55: ifnull        64
      58: aload         6
      60: invokevirtual #27                 // Method java/lang/Boolean.booleanValue:()Z
      63: ireturn
      64: aload         5
      66: invokevirtual #28                 // Method java/lang/Class.isInterface:()Z
      69: ifeq          86
      72: aload         5
      74: ldc           #29                 // class org/springframework/data/web/ProjectedPayload
      76: invokestatic  #30                 // Method org/springframework/core/annotation/AnnotationUtils.findAnnotation:(Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/annotation/Annotation;
      79: ifnull        86
      82: iconst_1
      83: goto          87
      86: iconst_0
      87: invokestatic  #31                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      90: astore        6
      92: aload_0
      93: getfield      #4                  // Field supportedTypesCache:Ljava/util/Map;
      96: aload         5
      98: aload         6
     100: invokeinterface #32,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     105: pop
     106: aload         6
     108: invokevirtual #27                 // Method java/lang/Boolean.booleanValue:()Z
     111: ireturn

  public boolean canWrite(java.lang.Class<?>, org.springframework.http.MediaType);
    Code:
       0: iconst_0
       1: ireturn

  public java.lang.Object read(java.lang.reflect.Type, java.lang.Class<?>, org.springframework.http.HttpInputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotReadableException;
    Code:
       0: aload_0
       1: getfield      #7                  // Field projectionFactory:Lorg/springframework/data/projection/SpelAwareProxyProjectionFactory;
       4: aload_1
       5: invokestatic  #33                 // Method org/springframework/core/ResolvableType.forType:(Ljava/lang/reflect/Type;)Lorg/springframework/core/ResolvableType;
       8: invokevirtual #34                 // Method org/springframework/core/ResolvableType.getRawClass:()Ljava/lang/Class;
      11: aload_3
      12: invokeinterface #35,  1           // InterfaceMethod org/springframework/http/HttpInputMessage.getBody:()Ljava/io/InputStream;
      17: invokevirtual #36                 // Method org/springframework/data/projection/SpelAwareProxyProjectionFactory.createProjection:(Ljava/lang/Class;Ljava/lang/Object;)Ljava/lang/Object;
      20: areturn
}
