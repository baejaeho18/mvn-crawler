Compiled from "AbstractPlatformTransactionManager.java"
public abstract class org.springframework.transaction.support.AbstractPlatformTransactionManager implements org.springframework.transaction.PlatformTransactionManager,java.io.Serializable {
  public static final int SYNCHRONIZATION_ALWAYS;

  public static final int SYNCHRONIZATION_ON_ACTUAL_TRANSACTION;

  public static final int SYNCHRONIZATION_NEVER;

  private static final org.springframework.core.Constants constants;

  protected transient org.apache.commons.logging.Log logger;

  private int transactionSynchronization;

  private int defaultTimeout;

  private boolean nestedTransactionAllowed;

  private boolean validateExistingTransaction;

  private boolean globalRollbackOnParticipationFailure;

  private boolean failEarlyOnGlobalRollbackOnly;

  private boolean rollbackOnCommitFailure;

  public org.springframework.transaction.support.AbstractPlatformTransactionManager();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_0
       6: invokevirtual #2                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
       9: invokestatic  #3                  // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
      12: putfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      15: aload_0
      16: iconst_0
      17: putfield      #6                  // Field transactionSynchronization:I
      20: aload_0
      21: iconst_m1
      22: putfield      #8                  // Field defaultTimeout:I
      25: aload_0
      26: iconst_0
      27: putfield      #9                  // Field nestedTransactionAllowed:Z
      30: aload_0
      31: iconst_0
      32: putfield      #10                 // Field validateExistingTransaction:Z
      35: aload_0
      36: iconst_1
      37: putfield      #11                 // Field globalRollbackOnParticipationFailure:Z
      40: aload_0
      41: iconst_0
      42: putfield      #12                 // Field failEarlyOnGlobalRollbackOnly:Z
      45: aload_0
      46: iconst_0
      47: putfield      #13                 // Field rollbackOnCommitFailure:Z
      50: return

  public final void setTransactionSynchronizationName(java.lang.String);
    Code:
       0: aload_0
       1: getstatic     #14                 // Field constants:Lorg/springframework/core/Constants;
       4: aload_1
       5: invokevirtual #15                 // Method org/springframework/core/Constants.asNumber:(Ljava/lang/String;)Ljava/lang/Number;
       8: invokevirtual #16                 // Method java/lang/Number.intValue:()I
      11: invokevirtual #17                 // Method setTransactionSynchronization:(I)V
      14: return

  public final void setTransactionSynchronization(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #6                  // Field transactionSynchronization:I
       5: return

  public final int getTransactionSynchronization();
    Code:
       0: aload_0
       1: getfield      #6                  // Field transactionSynchronization:I
       4: ireturn

  public final void setDefaultTimeout(int);
    Code:
       0: iload_1
       1: iconst_m1
       2: if_icmpge     16
       5: new           #18                 // class org/springframework/transaction/InvalidTimeoutException
       8: dup
       9: ldc           #19                 // String Invalid default timeout
      11: iload_1
      12: invokespecial #20                 // Method org/springframework/transaction/InvalidTimeoutException."<init>":(Ljava/lang/String;I)V
      15: athrow
      16: aload_0
      17: iload_1
      18: putfield      #8                  // Field defaultTimeout:I
      21: return

  public final int getDefaultTimeout();
    Code:
       0: aload_0
       1: getfield      #8                  // Field defaultTimeout:I
       4: ireturn

  public final void setNestedTransactionAllowed(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #9                  // Field nestedTransactionAllowed:Z
       5: return

  public final boolean isNestedTransactionAllowed();
    Code:
       0: aload_0
       1: getfield      #9                  // Field nestedTransactionAllowed:Z
       4: ireturn

  public final void setValidateExistingTransaction(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #10                 // Field validateExistingTransaction:Z
       5: return

  public final boolean isValidateExistingTransaction();
    Code:
       0: aload_0
       1: getfield      #10                 // Field validateExistingTransaction:Z
       4: ireturn

  public final void setGlobalRollbackOnParticipationFailure(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #11                 // Field globalRollbackOnParticipationFailure:Z
       5: return

  public final boolean isGlobalRollbackOnParticipationFailure();
    Code:
       0: aload_0
       1: getfield      #11                 // Field globalRollbackOnParticipationFailure:Z
       4: ireturn

  public final void setFailEarlyOnGlobalRollbackOnly(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #12                 // Field failEarlyOnGlobalRollbackOnly:Z
       5: return

  public final boolean isFailEarlyOnGlobalRollbackOnly();
    Code:
       0: aload_0
       1: getfield      #12                 // Field failEarlyOnGlobalRollbackOnly:Z
       4: ireturn

  public final void setRollbackOnCommitFailure(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #13                 // Field rollbackOnCommitFailure:Z
       5: return

  public final boolean isRollbackOnCommitFailure();
    Code:
       0: aload_0
       1: getfield      #13                 // Field rollbackOnCommitFailure:Z
       4: ireturn

  public final org.springframework.transaction.TransactionStatus getTransaction(org.springframework.transaction.TransactionDefinition) throws org.springframework.transaction.TransactionException;
    Code:
       0: aload_0
       1: invokevirtual #21                 // Method doGetTransaction:()Ljava/lang/Object;
       4: astore_2
       5: aload_0
       6: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
       9: invokeinterface #22,  1           // InterfaceMethod org/apache/commons/logging/Log.isDebugEnabled:()Z
      14: istore_3
      15: aload_1
      16: ifnonnull     27
      19: new           #23                 // class org/springframework/transaction/support/DefaultTransactionDefinition
      22: dup
      23: invokespecial #24                 // Method org/springframework/transaction/support/DefaultTransactionDefinition."<init>":()V
      26: astore_1
      27: aload_0
      28: aload_2
      29: invokevirtual #25                 // Method isExistingTransaction:(Ljava/lang/Object;)Z
      32: ifeq          43
      35: aload_0
      36: aload_1
      37: aload_2
      38: iload_3
      39: invokespecial #26                 // Method handleExistingTransaction:(Lorg/springframework/transaction/TransactionDefinition;Ljava/lang/Object;Z)Lorg/springframework/transaction/TransactionStatus;
      42: areturn
      43: aload_1
      44: invokeinterface #27,  1           // InterfaceMethod org/springframework/transaction/TransactionDefinition.getTimeout:()I
      49: iconst_m1
      50: if_icmpge     69
      53: new           #18                 // class org/springframework/transaction/InvalidTimeoutException
      56: dup
      57: ldc           #28                 // String Invalid transaction timeout
      59: aload_1
      60: invokeinterface #27,  1           // InterfaceMethod org/springframework/transaction/TransactionDefinition.getTimeout:()I
      65: invokespecial #20                 // Method org/springframework/transaction/InvalidTimeoutException."<init>":(Ljava/lang/String;I)V
      68: athrow
      69: aload_1
      70: invokeinterface #29,  1           // InterfaceMethod org/springframework/transaction/TransactionDefinition.getPropagationBehavior:()I
      75: iconst_2
      76: if_icmpne     89
      79: new           #30                 // class org/springframework/transaction/IllegalTransactionStateException
      82: dup
      83: ldc           #31                 // String No existing transaction found for transaction marked with propagation \'mandatory\'
      85: invokespecial #32                 // Method org/springframework/transaction/IllegalTransactionStateException."<init>":(Ljava/lang/String;)V
      88: athrow
      89: aload_1
      90: invokeinterface #29,  1           // InterfaceMethod org/springframework/transaction/TransactionDefinition.getPropagationBehavior:()I
      95: ifeq          119
      98: aload_1
      99: invokeinterface #29,  1           // InterfaceMethod org/springframework/transaction/TransactionDefinition.getPropagationBehavior:()I
     104: iconst_3
     105: if_icmpeq     119
     108: aload_1
     109: invokeinterface #29,  1           // InterfaceMethod org/springframework/transaction/TransactionDefinition.getPropagationBehavior:()I
     114: bipush        6
     116: if_icmpne     241
     119: aload_0
     120: aconst_null
     121: invokevirtual #33                 // Method suspend:(Ljava/lang/Object;)Lorg/springframework/transaction/support/AbstractPlatformTransactionManager$SuspendedResourcesHolder;
     124: astore        4
     126: iload_3
     127: ifeq          172
     130: aload_0
     131: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
     134: new           #34                 // class java/lang/StringBuilder
     137: dup
     138: invokespecial #35                 // Method java/lang/StringBuilder."<init>":()V
     141: ldc           #36                 // String Creating new transaction with name [
     143: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     146: aload_1
     147: invokeinterface #38,  1           // InterfaceMethod org/springframework/transaction/TransactionDefinition.getName:()Ljava/lang/String;
     152: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     155: ldc           #39                 // String ]:
     157: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     160: aload_1
     161: invokevirtual #40                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     164: invokevirtual #41                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     167: invokeinterface #42,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
     172: aload_0
     173: invokevirtual #43                 // Method getTransactionSynchronization:()I
     176: iconst_2
     177: if_icmpeq     184
     180: iconst_1
     181: goto          185
     184: iconst_0
     185: istore        5
     187: aload_0
     188: aload_1
     189: aload_2
     190: iconst_1
     191: iload         5
     193: iload_3
     194: aload         4
     196: invokevirtual #44                 // Method newTransactionStatus:(Lorg/springframework/transaction/TransactionDefinition;Ljava/lang/Object;ZZZLjava/lang/Object;)Lorg/springframework/transaction/support/DefaultTransactionStatus;
     199: astore        6
     201: aload_0
     202: aload_2
     203: aload_1
     204: invokevirtual #45                 // Method doBegin:(Ljava/lang/Object;Lorg/springframework/transaction/TransactionDefinition;)V
     207: aload_0
     208: aload         6
     210: aload_1
     211: invokevirtual #46                 // Method prepareSynchronization:(Lorg/springframework/transaction/support/DefaultTransactionStatus;Lorg/springframework/transaction/TransactionDefinition;)V
     214: aload         6
     216: areturn
     217: astore        5
     219: aload_0
     220: aconst_null
     221: aload         4
     223: invokevirtual #48                 // Method resume:(Ljava/lang/Object;Lorg/springframework/transaction/support/AbstractPlatformTransactionManager$SuspendedResourcesHolder;)V
     226: aload         5
     228: athrow
     229: astore        5
     231: aload_0
     232: aconst_null
     233: aload         4
     235: invokevirtual #48                 // Method resume:(Ljava/lang/Object;Lorg/springframework/transaction/support/AbstractPlatformTransactionManager$SuspendedResourcesHolder;)V
     238: aload         5
     240: athrow
     241: aload_1
     242: invokeinterface #50,  1           // InterfaceMethod org/springframework/transaction/TransactionDefinition.getIsolationLevel:()I
     247: iconst_m1
     248: if_icmpeq     291
     251: aload_0
     252: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
     255: invokeinterface #51,  1           // InterfaceMethod org/apache/commons/logging/Log.isWarnEnabled:()Z
     260: ifeq          291
     263: aload_0
     264: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
     267: new           #34                 // class java/lang/StringBuilder
     270: dup
     271: invokespecial #35                 // Method java/lang/StringBuilder."<init>":()V
     274: ldc           #52                 // String Custom isolation level specified but no actual transaction initiated; isolation level will effectively be ignored:
     276: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     279: aload_1
     280: invokevirtual #40                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     283: invokevirtual #41                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     286: invokeinterface #53,  2           // InterfaceMethod org/apache/commons/logging/Log.warn:(Ljava/lang/Object;)V
     291: aload_0
     292: invokevirtual #43                 // Method getTransactionSynchronization:()I
     295: ifne          302
     298: iconst_1
     299: goto          303
     302: iconst_0
     303: istore        4
     305: aload_0
     306: aload_1
     307: aconst_null
     308: iconst_1
     309: iload         4
     311: iload_3
     312: aconst_null
     313: invokevirtual #54                 // Method prepareTransactionStatus:(Lorg/springframework/transaction/TransactionDefinition;Ljava/lang/Object;ZZZLjava/lang/Object;)Lorg/springframework/transaction/support/DefaultTransactionStatus;
     316: areturn
    Exception table:
       from    to  target type
         172   216   217   Class java/lang/RuntimeException
         172   216   229   Class java/lang/Error

  private org.springframework.transaction.TransactionStatus handleExistingTransaction(org.springframework.transaction.TransactionDefinition, java.lang.Object, boolean) throws org.springframework.transaction.TransactionException;
    Code:
       0: aload_1
       1: invokeinterface #29,  1           // InterfaceMethod org/springframework/transaction/TransactionDefinition.getPropagationBehavior:()I
       6: iconst_5
       7: if_icmpne     20
      10: new           #30                 // class org/springframework/transaction/IllegalTransactionStateException
      13: dup
      14: ldc           #55                 // String Existing transaction found for transaction marked with propagation \'never\'
      16: invokespecial #32                 // Method org/springframework/transaction/IllegalTransactionStateException."<init>":(Ljava/lang/String;)V
      19: athrow
      20: aload_1
      21: invokeinterface #29,  1           // InterfaceMethod org/springframework/transaction/TransactionDefinition.getPropagationBehavior:()I
      26: iconst_4
      27: if_icmpne     79
      30: iload_3
      31: ifeq          45
      34: aload_0
      35: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      38: ldc           #56                 // String Suspending current transaction
      40: invokeinterface #42,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      45: aload_0
      46: aload_2
      47: invokevirtual #33                 // Method suspend:(Ljava/lang/Object;)Lorg/springframework/transaction/support/AbstractPlatformTransactionManager$SuspendedResourcesHolder;
      50: astore        4
      52: aload_0
      53: invokevirtual #43                 // Method getTransactionSynchronization:()I
      56: ifne          63
      59: iconst_1
      60: goto          64
      63: iconst_0
      64: istore        5
      66: aload_0
      67: aload_1
      68: aconst_null
      69: iconst_0
      70: iload         5
      72: iload_3
      73: aload         4
      75: invokevirtual #54                 // Method prepareTransactionStatus:(Lorg/springframework/transaction/TransactionDefinition;Ljava/lang/Object;ZZZLjava/lang/Object;)Lorg/springframework/transaction/support/DefaultTransactionStatus;
      78: areturn
      79: aload_1
      80: invokeinterface #29,  1           // InterfaceMethod org/springframework/transaction/TransactionDefinition.getPropagationBehavior:()I
      85: iconst_3
      86: if_icmpne     211
      89: iload_3
      90: ifeq          131
      93: aload_0
      94: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      97: new           #34                 // class java/lang/StringBuilder
     100: dup
     101: invokespecial #35                 // Method java/lang/StringBuilder."<init>":()V
     104: ldc           #57                 // String Suspending current transaction, creating new transaction with name [
     106: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     109: aload_1
     110: invokeinterface #38,  1           // InterfaceMethod org/springframework/transaction/TransactionDefinition.getName:()Ljava/lang/String;
     115: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     118: ldc           #58                 // String ]
     120: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     123: invokevirtual #41                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     126: invokeinterface #42,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
     131: aload_0
     132: aload_2
     133: invokevirtual #33                 // Method suspend:(Ljava/lang/Object;)Lorg/springframework/transaction/support/AbstractPlatformTransactionManager$SuspendedResourcesHolder;
     136: astore        4
     138: aload_0
     139: invokevirtual #43                 // Method getTransactionSynchronization:()I
     142: iconst_2
     143: if_icmpeq     150
     146: iconst_1
     147: goto          151
     150: iconst_0
     151: istore        5
     153: aload_0
     154: aload_1
     155: aload_2
     156: iconst_1
     157: iload         5
     159: iload_3
     160: aload         4
     162: invokevirtual #44                 // Method newTransactionStatus:(Lorg/springframework/transaction/TransactionDefinition;Ljava/lang/Object;ZZZLjava/lang/Object;)Lorg/springframework/transaction/support/DefaultTransactionStatus;
     165: astore        6
     167: aload_0
     168: aload_2
     169: aload_1
     170: invokevirtual #45                 // Method doBegin:(Ljava/lang/Object;Lorg/springframework/transaction/TransactionDefinition;)V
     173: aload_0
     174: aload         6
     176: aload_1
     177: invokevirtual #46                 // Method prepareSynchronization:(Lorg/springframework/transaction/support/DefaultTransactionStatus;Lorg/springframework/transaction/TransactionDefinition;)V
     180: aload         6
     182: areturn
     183: astore        5
     185: aload_0
     186: aload_2
     187: aload         4
     189: aload         5
     191: invokespecial #59                 // Method resumeAfterBeginException:(Ljava/lang/Object;Lorg/springframework/transaction/support/AbstractPlatformTransactionManager$SuspendedResourcesHolder;Ljava/lang/Throwable;)V
     194: aload         5
     196: athrow
     197: astore        5
     199: aload_0
     200: aload_2
     201: aload         4
     203: aload         5
     205: invokespecial #59                 // Method resumeAfterBeginException:(Ljava/lang/Object;Lorg/springframework/transaction/support/AbstractPlatformTransactionManager$SuspendedResourcesHolder;Ljava/lang/Throwable;)V
     208: aload         5
     210: athrow
     211: aload_1
     212: invokeinterface #29,  1           // InterfaceMethod org/springframework/transaction/TransactionDefinition.getPropagationBehavior:()I
     217: bipush        6
     219: if_icmpne     352
     222: aload_0
     223: invokevirtual #60                 // Method isNestedTransactionAllowed:()Z
     226: ifne          239
     229: new           #61                 // class org/springframework/transaction/NestedTransactionNotSupportedException
     232: dup
     233: ldc           #62                 // String Transaction manager does not allow nested transactions by default - specify \'nestedTransactionAllowed\' property with value \'true\'
     235: invokespecial #63                 // Method org/springframework/transaction/NestedTransactionNotSupportedException."<init>":(Ljava/lang/String;)V
     238: athrow
     239: iload_3
     240: ifeq          281
     243: aload_0
     244: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
     247: new           #34                 // class java/lang/StringBuilder
     250: dup
     251: invokespecial #35                 // Method java/lang/StringBuilder."<init>":()V
     254: ldc           #64                 // String Creating nested transaction with name [
     256: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     259: aload_1
     260: invokeinterface #38,  1           // InterfaceMethod org/springframework/transaction/TransactionDefinition.getName:()Ljava/lang/String;
     265: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     268: ldc           #58                 // String ]
     270: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     273: invokevirtual #41                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     276: invokeinterface #42,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
     281: aload_0
     282: invokevirtual #65                 // Method useSavepointForNestedTransaction:()Z
     285: ifeq          308
     288: aload_0
     289: aload_1
     290: aload_2
     291: iconst_0
     292: iconst_0
     293: iload_3
     294: aconst_null
     295: invokevirtual #54                 // Method prepareTransactionStatus:(Lorg/springframework/transaction/TransactionDefinition;Ljava/lang/Object;ZZZLjava/lang/Object;)Lorg/springframework/transaction/support/DefaultTransactionStatus;
     298: astore        4
     300: aload         4
     302: invokevirtual #66                 // Method org/springframework/transaction/support/DefaultTransactionStatus.createAndHoldSavepoint:()V
     305: aload         4
     307: areturn
     308: aload_0
     309: invokevirtual #43                 // Method getTransactionSynchronization:()I
     312: iconst_2
     313: if_icmpeq     320
     316: iconst_1
     317: goto          321
     320: iconst_0
     321: istore        4
     323: aload_0
     324: aload_1
     325: aload_2
     326: iconst_1
     327: iload         4
     329: iload_3
     330: aconst_null
     331: invokevirtual #44                 // Method newTransactionStatus:(Lorg/springframework/transaction/TransactionDefinition;Ljava/lang/Object;ZZZLjava/lang/Object;)Lorg/springframework/transaction/support/DefaultTransactionStatus;
     334: astore        5
     336: aload_0
     337: aload_2
     338: aload_1
     339: invokevirtual #45                 // Method doBegin:(Ljava/lang/Object;Lorg/springframework/transaction/TransactionDefinition;)V
     342: aload_0
     343: aload         5
     345: aload_1
     346: invokevirtual #46                 // Method prepareSynchronization:(Lorg/springframework/transaction/support/DefaultTransactionStatus;Lorg/springframework/transaction/TransactionDefinition;)V
     349: aload         5
     351: areturn
     352: iload_3
     353: ifeq          367
     356: aload_0
     357: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
     360: ldc           #67                 // String Participating in existing transaction
     362: invokeinterface #42,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
     367: aload_0
     368: invokevirtual #68                 // Method isValidateExistingTransaction:()Z
     371: ifeq          514
     374: aload_1
     375: invokeinterface #50,  1           // InterfaceMethod org/springframework/transaction/TransactionDefinition.getIsolationLevel:()I
     380: iconst_m1
     381: if_icmpeq     467
     384: invokestatic  #69                 // Method org/springframework/transaction/support/TransactionSynchronizationManager.getCurrentTransactionIsolationLevel:()Ljava/lang/Integer;
     387: astore        4
     389: aload         4
     391: ifnull        408
     394: aload         4
     396: invokevirtual #70                 // Method java/lang/Integer.intValue:()I
     399: aload_1
     400: invokeinterface #50,  1           // InterfaceMethod org/springframework/transaction/TransactionDefinition.getIsolationLevel:()I
     405: if_icmpeq     467
     408: getstatic     #71                 // Field org/springframework/transaction/support/DefaultTransactionDefinition.constants:Lorg/springframework/core/Constants;
     411: astore        5
     413: new           #30                 // class org/springframework/transaction/IllegalTransactionStateException
     416: dup
     417: new           #34                 // class java/lang/StringBuilder
     420: dup
     421: invokespecial #35                 // Method java/lang/StringBuilder."<init>":()V
     424: ldc           #72                 // String Participating transaction with definition [
     426: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     429: aload_1
     430: invokevirtual #40                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     433: ldc           #73                 // String ] specifies isolation level which is incompatible with existing transaction:
     435: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     438: aload         4
     440: ifnull        455
     443: aload         5
     445: aload         4
     447: ldc           #74                 // String ISOLATION_
     449: invokevirtual #75                 // Method org/springframework/core/Constants.toCode:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/String;
     452: goto          457
     455: ldc           #76                 // String (unknown)
     457: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     460: invokevirtual #41                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     463: invokespecial #32                 // Method org/springframework/transaction/IllegalTransactionStateException."<init>":(Ljava/lang/String;)V
     466: athrow
     467: aload_1
     468: invokeinterface #77,  1           // InterfaceMethod org/springframework/transaction/TransactionDefinition.isReadOnly:()Z
     473: ifne          514
     476: invokestatic  #78                 // Method org/springframework/transaction/support/TransactionSynchronizationManager.isCurrentTransactionReadOnly:()Z
     479: ifeq          514
     482: new           #30                 // class org/springframework/transaction/IllegalTransactionStateException
     485: dup
     486: new           #34                 // class java/lang/StringBuilder
     489: dup
     490: invokespecial #35                 // Method java/lang/StringBuilder."<init>":()V
     493: ldc           #72                 // String Participating transaction with definition [
     495: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     498: aload_1
     499: invokevirtual #40                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     502: ldc           #79                 // String ] is not marked as read-only but existing transaction is
     504: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     507: invokevirtual #41                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     510: invokespecial #32                 // Method org/springframework/transaction/IllegalTransactionStateException."<init>":(Ljava/lang/String;)V
     513: athrow
     514: aload_0
     515: invokevirtual #43                 // Method getTransactionSynchronization:()I
     518: iconst_2
     519: if_icmpeq     526
     522: iconst_1
     523: goto          527
     526: iconst_0
     527: istore        4
     529: aload_0
     530: aload_1
     531: aload_2
     532: iconst_0
     533: iload         4
     535: iload_3
     536: aconst_null
     537: invokevirtual #54                 // Method prepareTransactionStatus:(Lorg/springframework/transaction/TransactionDefinition;Ljava/lang/Object;ZZZLjava/lang/Object;)Lorg/springframework/transaction/support/DefaultTransactionStatus;
     540: areturn
    Exception table:
       from    to  target type
         138   182   183   Class java/lang/RuntimeException
         138   182   197   Class java/lang/Error

  protected final org.springframework.transaction.support.DefaultTransactionStatus prepareTransactionStatus(org.springframework.transaction.TransactionDefinition, java.lang.Object, boolean, boolean, boolean, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iload_3
       4: iload         4
       6: iload         5
       8: aload         6
      10: invokevirtual #44                 // Method newTransactionStatus:(Lorg/springframework/transaction/TransactionDefinition;Ljava/lang/Object;ZZZLjava/lang/Object;)Lorg/springframework/transaction/support/DefaultTransactionStatus;
      13: astore        7
      15: aload_0
      16: aload         7
      18: aload_1
      19: invokevirtual #46                 // Method prepareSynchronization:(Lorg/springframework/transaction/support/DefaultTransactionStatus;Lorg/springframework/transaction/TransactionDefinition;)V
      22: aload         7
      24: areturn

  protected org.springframework.transaction.support.DefaultTransactionStatus newTransactionStatus(org.springframework.transaction.TransactionDefinition, java.lang.Object, boolean, boolean, boolean, java.lang.Object);
    Code:
       0: iload         4
       2: ifeq          15
       5: invokestatic  #80                 // Method org/springframework/transaction/support/TransactionSynchronizationManager.isSynchronizationActive:()Z
       8: ifne          15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: istore        7
      18: new           #81                 // class org/springframework/transaction/support/DefaultTransactionStatus
      21: dup
      22: aload_2
      23: iload_3
      24: iload         7
      26: aload_1
      27: invokeinterface #77,  1           // InterfaceMethod org/springframework/transaction/TransactionDefinition.isReadOnly:()Z
      32: iload         5
      34: aload         6
      36: invokespecial #82                 // Method org/springframework/transaction/support/DefaultTransactionStatus."<init>":(Ljava/lang/Object;ZZZZLjava/lang/Object;)V
      39: areturn

  protected void prepareSynchronization(org.springframework.transaction.support.DefaultTransactionStatus, org.springframework.transaction.TransactionDefinition);
    Code:
       0: aload_1
       1: invokevirtual #83                 // Method org/springframework/transaction/support/DefaultTransactionStatus.isNewSynchronization:()Z
       4: ifeq          61
       7: aload_1
       8: invokevirtual #84                 // Method org/springframework/transaction/support/DefaultTransactionStatus.hasTransaction:()Z
      11: invokestatic  #85                 // Method org/springframework/transaction/support/TransactionSynchronizationManager.setActualTransactionActive:(Z)V
      14: aload_2
      15: invokeinterface #50,  1           // InterfaceMethod org/springframework/transaction/TransactionDefinition.getIsolationLevel:()I
      20: iconst_m1
      21: if_icmpeq     36
      24: aload_2
      25: invokeinterface #50,  1           // InterfaceMethod org/springframework/transaction/TransactionDefinition.getIsolationLevel:()I
      30: invokestatic  #86                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      33: goto          37
      36: aconst_null
      37: invokestatic  #87                 // Method org/springframework/transaction/support/TransactionSynchronizationManager.setCurrentTransactionIsolationLevel:(Ljava/lang/Integer;)V
      40: aload_2
      41: invokeinterface #77,  1           // InterfaceMethod org/springframework/transaction/TransactionDefinition.isReadOnly:()Z
      46: invokestatic  #88                 // Method org/springframework/transaction/support/TransactionSynchronizationManager.setCurrentTransactionReadOnly:(Z)V
      49: aload_2
      50: invokeinterface #38,  1           // InterfaceMethod org/springframework/transaction/TransactionDefinition.getName:()Ljava/lang/String;
      55: invokestatic  #89                 // Method org/springframework/transaction/support/TransactionSynchronizationManager.setCurrentTransactionName:(Ljava/lang/String;)V
      58: invokestatic  #90                 // Method org/springframework/transaction/support/TransactionSynchronizationManager.initSynchronization:()V
      61: return

  protected int determineTimeout(org.springframework.transaction.TransactionDefinition);
    Code:
       0: aload_1
       1: invokeinterface #27,  1           // InterfaceMethod org/springframework/transaction/TransactionDefinition.getTimeout:()I
       6: iconst_m1
       7: if_icmpeq     17
      10: aload_1
      11: invokeinterface #27,  1           // InterfaceMethod org/springframework/transaction/TransactionDefinition.getTimeout:()I
      16: ireturn
      17: aload_0
      18: getfield      #8                  // Field defaultTimeout:I
      21: ireturn

  protected final org.springframework.transaction.support.AbstractPlatformTransactionManager$SuspendedResourcesHolder suspend(java.lang.Object) throws org.springframework.transaction.TransactionException;
    Code:
       0: invokestatic  #80                 // Method org/springframework/transaction/support/TransactionSynchronizationManager.isSynchronizationActive:()Z
       3: ifeq          94
       6: aload_0
       7: invokespecial #91                 // Method doSuspendSynchronization:()Ljava/util/List;
      10: astore_2
      11: aconst_null
      12: astore_3
      13: aload_1
      14: ifnull        23
      17: aload_0
      18: aload_1
      19: invokevirtual #92                 // Method doSuspend:(Ljava/lang/Object;)Ljava/lang/Object;
      22: astore_3
      23: invokestatic  #93                 // Method org/springframework/transaction/support/TransactionSynchronizationManager.getCurrentTransactionName:()Ljava/lang/String;
      26: astore        4
      28: aconst_null
      29: invokestatic  #89                 // Method org/springframework/transaction/support/TransactionSynchronizationManager.setCurrentTransactionName:(Ljava/lang/String;)V
      32: invokestatic  #78                 // Method org/springframework/transaction/support/TransactionSynchronizationManager.isCurrentTransactionReadOnly:()Z
      35: istore        5
      37: iconst_0
      38: invokestatic  #88                 // Method org/springframework/transaction/support/TransactionSynchronizationManager.setCurrentTransactionReadOnly:(Z)V
      41: invokestatic  #69                 // Method org/springframework/transaction/support/TransactionSynchronizationManager.getCurrentTransactionIsolationLevel:()Ljava/lang/Integer;
      44: astore        6
      46: aconst_null
      47: invokestatic  #87                 // Method org/springframework/transaction/support/TransactionSynchronizationManager.setCurrentTransactionIsolationLevel:(Ljava/lang/Integer;)V
      50: invokestatic  #94                 // Method org/springframework/transaction/support/TransactionSynchronizationManager.isActualTransactionActive:()Z
      53: istore        7
      55: iconst_0
      56: invokestatic  #85                 // Method org/springframework/transaction/support/TransactionSynchronizationManager.setActualTransactionActive:(Z)V
      59: new           #95                 // class org/springframework/transaction/support/AbstractPlatformTransactionManager$SuspendedResourcesHolder
      62: dup
      63: aload_3
      64: aload_2
      65: aload         4
      67: iload         5
      69: aload         6
      71: iload         7
      73: aconst_null
      74: invokespecial #96                 // Method org/springframework/transaction/support/AbstractPlatformTransactionManager$SuspendedResourcesHolder."<init>":(Ljava/lang/Object;Ljava/util/List;Ljava/lang/String;ZLjava/lang/Integer;ZLorg/springframework/transaction/support/AbstractPlatformTransactionManager$1;)V
      77: areturn
      78: astore_3
      79: aload_0
      80: aload_2
      81: invokespecial #97                 // Method doResumeSynchronization:(Ljava/util/List;)V
      84: aload_3
      85: athrow
      86: astore_3
      87: aload_0
      88: aload_2
      89: invokespecial #97                 // Method doResumeSynchronization:(Ljava/util/List;)V
      92: aload_3
      93: athrow
      94: aload_1
      95: ifnull        114
      98: aload_0
      99: aload_1
     100: invokevirtual #92                 // Method doSuspend:(Ljava/lang/Object;)Ljava/lang/Object;
     103: astore_2
     104: new           #95                 // class org/springframework/transaction/support/AbstractPlatformTransactionManager$SuspendedResourcesHolder
     107: dup
     108: aload_2
     109: aconst_null
     110: invokespecial #98                 // Method org/springframework/transaction/support/AbstractPlatformTransactionManager$SuspendedResourcesHolder."<init>":(Ljava/lang/Object;Lorg/springframework/transaction/support/AbstractPlatformTransactionManager$1;)V
     113: areturn
     114: aconst_null
     115: areturn
    Exception table:
       from    to  target type
          11    77    78   Class java/lang/RuntimeException
          11    77    86   Class java/lang/Error

  protected final void resume(java.lang.Object, org.springframework.transaction.support.AbstractPlatformTransactionManager$SuspendedResourcesHolder) throws org.springframework.transaction.TransactionException;
    Code:
       0: aload_2
       1: ifnull        64
       4: aload_2
       5: invokestatic  #99                 // Method org/springframework/transaction/support/AbstractPlatformTransactionManager$SuspendedResourcesHolder.access$200:(Lorg/springframework/transaction/support/AbstractPlatformTransactionManager$SuspendedResourcesHolder;)Ljava/lang/Object;
       8: astore_3
       9: aload_3
      10: ifnull        19
      13: aload_0
      14: aload_1
      15: aload_3
      16: invokevirtual #100                // Method doResume:(Ljava/lang/Object;Ljava/lang/Object;)V
      19: aload_2
      20: invokestatic  #101                // Method org/springframework/transaction/support/AbstractPlatformTransactionManager$SuspendedResourcesHolder.access$300:(Lorg/springframework/transaction/support/AbstractPlatformTransactionManager$SuspendedResourcesHolder;)Ljava/util/List;
      23: astore        4
      25: aload         4
      27: ifnull        64
      30: aload_2
      31: invokestatic  #102                // Method org/springframework/transaction/support/AbstractPlatformTransactionManager$SuspendedResourcesHolder.access$400:(Lorg/springframework/transaction/support/AbstractPlatformTransactionManager$SuspendedResourcesHolder;)Z
      34: invokestatic  #85                 // Method org/springframework/transaction/support/TransactionSynchronizationManager.setActualTransactionActive:(Z)V
      37: aload_2
      38: invokestatic  #103                // Method org/springframework/transaction/support/AbstractPlatformTransactionManager$SuspendedResourcesHolder.access$500:(Lorg/springframework/transaction/support/AbstractPlatformTransactionManager$SuspendedResourcesHolder;)Ljava/lang/Integer;
      41: invokestatic  #87                 // Method org/springframework/transaction/support/TransactionSynchronizationManager.setCurrentTransactionIsolationLevel:(Ljava/lang/Integer;)V
      44: aload_2
      45: invokestatic  #104                // Method org/springframework/transaction/support/AbstractPlatformTransactionManager$SuspendedResourcesHolder.access$600:(Lorg/springframework/transaction/support/AbstractPlatformTransactionManager$SuspendedResourcesHolder;)Z
      48: invokestatic  #88                 // Method org/springframework/transaction/support/TransactionSynchronizationManager.setCurrentTransactionReadOnly:(Z)V
      51: aload_2
      52: invokestatic  #105                // Method org/springframework/transaction/support/AbstractPlatformTransactionManager$SuspendedResourcesHolder.access$700:(Lorg/springframework/transaction/support/AbstractPlatformTransactionManager$SuspendedResourcesHolder;)Ljava/lang/String;
      55: invokestatic  #89                 // Method org/springframework/transaction/support/TransactionSynchronizationManager.setCurrentTransactionName:(Ljava/lang/String;)V
      58: aload_0
      59: aload         4
      61: invokespecial #97                 // Method doResumeSynchronization:(Ljava/util/List;)V
      64: return

  private void resumeAfterBeginException(java.lang.Object, org.springframework.transaction.support.AbstractPlatformTransactionManager$SuspendedResourcesHolder, java.lang.Throwable);
    Code:
       0: ldc           #106                // String Inner transaction begin exception overridden by outer transaction resume exception
       2: astore        4
       4: aload_0
       5: aload_1
       6: aload_2
       7: invokevirtual #48                 // Method resume:(Ljava/lang/Object;Lorg/springframework/transaction/support/AbstractPlatformTransactionManager$SuspendedResourcesHolder;)V
      10: goto          47
      13: astore        5
      15: aload_0
      16: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      19: aload         4
      21: aload_3
      22: invokeinterface #107,  3          // InterfaceMethod org/apache/commons/logging/Log.error:(Ljava/lang/Object;Ljava/lang/Throwable;)V
      27: aload         5
      29: athrow
      30: astore        5
      32: aload_0
      33: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      36: aload         4
      38: aload_3
      39: invokeinterface #107,  3          // InterfaceMethod org/apache/commons/logging/Log.error:(Ljava/lang/Object;Ljava/lang/Throwable;)V
      44: aload         5
      46: athrow
      47: return
    Exception table:
       from    to  target type
           4    10    13   Class java/lang/RuntimeException
           4    10    30   Class java/lang/Error

  private java.util.List<org.springframework.transaction.support.TransactionSynchronization> doSuspendSynchronization();
    Code:
       0: invokestatic  #108                // Method org/springframework/transaction/support/TransactionSynchronizationManager.getSynchronizations:()Ljava/util/List;
       3: astore_1
       4: aload_1
       5: invokeinterface #109,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      10: astore_2
      11: aload_2
      12: invokeinterface #110,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      17: ifeq          39
      20: aload_2
      21: invokeinterface #111,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      26: checkcast     #112                // class org/springframework/transaction/support/TransactionSynchronization
      29: astore_3
      30: aload_3
      31: invokeinterface #113,  1          // InterfaceMethod org/springframework/transaction/support/TransactionSynchronization.suspend:()V
      36: goto          11
      39: invokestatic  #114                // Method org/springframework/transaction/support/TransactionSynchronizationManager.clearSynchronization:()V
      42: aload_1
      43: areturn

  private void doResumeSynchronization(java.util.List<org.springframework.transaction.support.TransactionSynchronization>);
    Code:
       0: invokestatic  #90                 // Method org/springframework/transaction/support/TransactionSynchronizationManager.initSynchronization:()V
       3: aload_1
       4: invokeinterface #109,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
       9: astore_2
      10: aload_2
      11: invokeinterface #110,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      16: ifeq          42
      19: aload_2
      20: invokeinterface #111,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      25: checkcast     #112                // class org/springframework/transaction/support/TransactionSynchronization
      28: astore_3
      29: aload_3
      30: invokeinterface #115,  1          // InterfaceMethod org/springframework/transaction/support/TransactionSynchronization.resume:()V
      35: aload_3
      36: invokestatic  #116                // Method org/springframework/transaction/support/TransactionSynchronizationManager.registerSynchronization:(Lorg/springframework/transaction/support/TransactionSynchronization;)V
      39: goto          10
      42: return

  public final void commit(org.springframework.transaction.TransactionStatus) throws org.springframework.transaction.TransactionException;
    Code:
       0: aload_1
       1: invokeinterface #117,  1          // InterfaceMethod org/springframework/transaction/TransactionStatus.isCompleted:()Z
       6: ifeq          19
       9: new           #30                 // class org/springframework/transaction/IllegalTransactionStateException
      12: dup
      13: ldc           #118                // String Transaction is already completed - do not call commit or rollback more than once per transaction
      15: invokespecial #32                 // Method org/springframework/transaction/IllegalTransactionStateException."<init>":(Ljava/lang/String;)V
      18: athrow
      19: aload_1
      20: checkcast     #81                 // class org/springframework/transaction/support/DefaultTransactionStatus
      23: astore_2
      24: aload_2
      25: invokevirtual #119                // Method org/springframework/transaction/support/DefaultTransactionStatus.isLocalRollbackOnly:()Z
      28: ifeq          55
      31: aload_2
      32: invokevirtual #120                // Method org/springframework/transaction/support/DefaultTransactionStatus.isDebug:()Z
      35: ifeq          49
      38: aload_0
      39: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      42: ldc           #121                // String Transactional code has requested rollback
      44: invokeinterface #42,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      49: aload_0
      50: aload_2
      51: invokespecial #122                // Method processRollback:(Lorg/springframework/transaction/support/DefaultTransactionStatus;)V
      54: return
      55: aload_0
      56: invokevirtual #123                // Method shouldCommitOnGlobalRollbackOnly:()Z
      59: ifne          119
      62: aload_2
      63: invokevirtual #124                // Method org/springframework/transaction/support/DefaultTransactionStatus.isGlobalRollbackOnly:()Z
      66: ifeq          119
      69: aload_2
      70: invokevirtual #120                // Method org/springframework/transaction/support/DefaultTransactionStatus.isDebug:()Z
      73: ifeq          87
      76: aload_0
      77: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      80: ldc           #125                // String Global transaction is marked as rollback-only but transactional code requested commit
      82: invokeinterface #42,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      87: aload_0
      88: aload_2
      89: invokespecial #122                // Method processRollback:(Lorg/springframework/transaction/support/DefaultTransactionStatus;)V
      92: aload_1
      93: invokeinterface #126,  1          // InterfaceMethod org/springframework/transaction/TransactionStatus.isNewTransaction:()Z
      98: ifne          108
     101: aload_0
     102: invokevirtual #127                // Method isFailEarlyOnGlobalRollbackOnly:()Z
     105: ifeq          118
     108: new           #128                // class org/springframework/transaction/UnexpectedRollbackException
     111: dup
     112: ldc           #129                // String Transaction rolled back because it has been marked as rollback-only
     114: invokespecial #130                // Method org/springframework/transaction/UnexpectedRollbackException."<init>":(Ljava/lang/String;)V
     117: athrow
     118: return
     119: aload_0
     120: aload_2
     121: invokespecial #131                // Method processCommit:(Lorg/springframework/transaction/support/DefaultTransactionStatus;)V
     124: return

  private void processCommit(org.springframework.transaction.support.DefaultTransactionStatus) throws org.springframework.transaction.TransactionException;
    Code:
       0: iconst_0
       1: istore_2
       2: aload_0
       3: aload_1
       4: invokevirtual #132                // Method prepareForCommit:(Lorg/springframework/transaction/support/DefaultTransactionStatus;)V
       7: aload_0
       8: aload_1
       9: invokevirtual #133                // Method triggerBeforeCommit:(Lorg/springframework/transaction/support/DefaultTransactionStatus;)V
      12: aload_0
      13: aload_1
      14: invokevirtual #134                // Method triggerBeforeCompletion:(Lorg/springframework/transaction/support/DefaultTransactionStatus;)V
      17: iconst_1
      18: istore_2
      19: iconst_0
      20: istore_3
      21: aload_1
      22: invokevirtual #135                // Method org/springframework/transaction/support/DefaultTransactionStatus.isNewTransaction:()Z
      25: ifne          35
      28: aload_0
      29: invokevirtual #127                // Method isFailEarlyOnGlobalRollbackOnly:()Z
      32: ifeq          40
      35: aload_1
      36: invokevirtual #124                // Method org/springframework/transaction/support/DefaultTransactionStatus.isGlobalRollbackOnly:()Z
      39: istore_3
      40: aload_1
      41: invokevirtual #136                // Method org/springframework/transaction/support/DefaultTransactionStatus.hasSavepoint:()Z
      44: ifeq          72
      47: aload_1
      48: invokevirtual #120                // Method org/springframework/transaction/support/DefaultTransactionStatus.isDebug:()Z
      51: ifeq          65
      54: aload_0
      55: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      58: ldc           #137                // String Releasing transaction savepoint
      60: invokeinterface #42,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      65: aload_1
      66: invokevirtual #138                // Method org/springframework/transaction/support/DefaultTransactionStatus.releaseHeldSavepoint:()V
      69: goto          102
      72: aload_1
      73: invokevirtual #135                // Method org/springframework/transaction/support/DefaultTransactionStatus.isNewTransaction:()Z
      76: ifeq          102
      79: aload_1
      80: invokevirtual #120                // Method org/springframework/transaction/support/DefaultTransactionStatus.isDebug:()Z
      83: ifeq          97
      86: aload_0
      87: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      90: ldc           #139                // String Initiating transaction commit
      92: invokeinterface #42,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      97: aload_0
      98: aload_1
      99: invokevirtual #140                // Method doCommit:(Lorg/springframework/transaction/support/DefaultTransactionStatus;)V
     102: iload_3
     103: ifeq          116
     106: new           #128                // class org/springframework/transaction/UnexpectedRollbackException
     109: dup
     110: ldc           #141                // String Transaction silently rolled back because it has been marked as rollback-only
     112: invokespecial #130                // Method org/springframework/transaction/UnexpectedRollbackException."<init>":(Ljava/lang/String;)V
     115: athrow
     116: goto          189
     119: astore_3
     120: aload_0
     121: aload_1
     122: iconst_1
     123: invokespecial #142                // Method triggerAfterCompletion:(Lorg/springframework/transaction/support/DefaultTransactionStatus;I)V
     126: aload_3
     127: athrow
     128: astore_3
     129: aload_0
     130: invokevirtual #144                // Method isRollbackOnCommitFailure:()Z
     133: ifeq          145
     136: aload_0
     137: aload_1
     138: aload_3
     139: invokespecial #145                // Method doRollbackOnCommitException:(Lorg/springframework/transaction/support/DefaultTransactionStatus;Ljava/lang/Throwable;)V
     142: goto          151
     145: aload_0
     146: aload_1
     147: iconst_2
     148: invokespecial #142                // Method triggerAfterCompletion:(Lorg/springframework/transaction/support/DefaultTransactionStatus;I)V
     151: aload_3
     152: athrow
     153: astore_3
     154: iload_2
     155: ifne          163
     158: aload_0
     159: aload_1
     160: invokevirtual #134                // Method triggerBeforeCompletion:(Lorg/springframework/transaction/support/DefaultTransactionStatus;)V
     163: aload_0
     164: aload_1
     165: aload_3
     166: invokespecial #145                // Method doRollbackOnCommitException:(Lorg/springframework/transaction/support/DefaultTransactionStatus;Ljava/lang/Throwable;)V
     169: aload_3
     170: athrow
     171: astore_3
     172: iload_2
     173: ifne          181
     176: aload_0
     177: aload_1
     178: invokevirtual #134                // Method triggerBeforeCompletion:(Lorg/springframework/transaction/support/DefaultTransactionStatus;)V
     181: aload_0
     182: aload_1
     183: aload_3
     184: invokespecial #145                // Method doRollbackOnCommitException:(Lorg/springframework/transaction/support/DefaultTransactionStatus;Ljava/lang/Throwable;)V
     187: aload_3
     188: athrow
     189: aload_0
     190: aload_1
     191: invokespecial #146                // Method triggerAfterCommit:(Lorg/springframework/transaction/support/DefaultTransactionStatus;)V
     194: aload_0
     195: aload_1
     196: iconst_0
     197: invokespecial #142                // Method triggerAfterCompletion:(Lorg/springframework/transaction/support/DefaultTransactionStatus;I)V
     200: goto          214
     203: astore        4
     205: aload_0
     206: aload_1
     207: iconst_0
     208: invokespecial #142                // Method triggerAfterCompletion:(Lorg/springframework/transaction/support/DefaultTransactionStatus;I)V
     211: aload         4
     213: athrow
     214: aload_0
     215: aload_1
     216: invokespecial #147                // Method cleanupAfterCompletion:(Lorg/springframework/transaction/support/DefaultTransactionStatus;)V
     219: goto          232
     222: astore        5
     224: aload_0
     225: aload_1
     226: invokespecial #147                // Method cleanupAfterCompletion:(Lorg/springframework/transaction/support/DefaultTransactionStatus;)V
     229: aload         5
     231: athrow
     232: return
    Exception table:
       from    to  target type
           2   116   119   Class org/springframework/transaction/UnexpectedRollbackException
           2   116   128   Class org/springframework/transaction/TransactionException
           2   116   153   Class java/lang/RuntimeException
           2   116   171   Class java/lang/Error
         189   194   203   any
         203   205   203   any
           0   214   222   any
         222   224   222   any

  public final void rollback(org.springframework.transaction.TransactionStatus) throws org.springframework.transaction.TransactionException;
    Code:
       0: aload_1
       1: invokeinterface #117,  1          // InterfaceMethod org/springframework/transaction/TransactionStatus.isCompleted:()Z
       6: ifeq          19
       9: new           #30                 // class org/springframework/transaction/IllegalTransactionStateException
      12: dup
      13: ldc           #118                // String Transaction is already completed - do not call commit or rollback more than once per transaction
      15: invokespecial #32                 // Method org/springframework/transaction/IllegalTransactionStateException."<init>":(Ljava/lang/String;)V
      18: athrow
      19: aload_1
      20: checkcast     #81                 // class org/springframework/transaction/support/DefaultTransactionStatus
      23: astore_2
      24: aload_0
      25: aload_2
      26: invokespecial #122                // Method processRollback:(Lorg/springframework/transaction/support/DefaultTransactionStatus;)V
      29: return

  private void processRollback(org.springframework.transaction.support.DefaultTransactionStatus);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #134                // Method triggerBeforeCompletion:(Lorg/springframework/transaction/support/DefaultTransactionStatus;)V
       5: aload_1
       6: invokevirtual #136                // Method org/springframework/transaction/support/DefaultTransactionStatus.hasSavepoint:()Z
       9: ifeq          37
      12: aload_1
      13: invokevirtual #120                // Method org/springframework/transaction/support/DefaultTransactionStatus.isDebug:()Z
      16: ifeq          30
      19: aload_0
      20: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      23: ldc           #148                // String Rolling back transaction to savepoint
      25: invokeinterface #42,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      30: aload_1
      31: invokevirtual #149                // Method org/springframework/transaction/support/DefaultTransactionStatus.rollbackToHeldSavepoint:()V
      34: goto          149
      37: aload_1
      38: invokevirtual #135                // Method org/springframework/transaction/support/DefaultTransactionStatus.isNewTransaction:()Z
      41: ifeq          70
      44: aload_1
      45: invokevirtual #120                // Method org/springframework/transaction/support/DefaultTransactionStatus.isDebug:()Z
      48: ifeq          62
      51: aload_0
      52: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      55: ldc           #150                // String Initiating transaction rollback
      57: invokeinterface #42,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      62: aload_0
      63: aload_1
      64: invokevirtual #151                // Method doRollback:(Lorg/springframework/transaction/support/DefaultTransactionStatus;)V
      67: goto          149
      70: aload_1
      71: invokevirtual #84                 // Method org/springframework/transaction/support/DefaultTransactionStatus.hasTransaction:()Z
      74: ifeq          138
      77: aload_1
      78: invokevirtual #119                // Method org/springframework/transaction/support/DefaultTransactionStatus.isLocalRollbackOnly:()Z
      81: ifne          91
      84: aload_0
      85: invokevirtual #152                // Method isGlobalRollbackOnParticipationFailure:()Z
      88: ifeq          117
      91: aload_1
      92: invokevirtual #120                // Method org/springframework/transaction/support/DefaultTransactionStatus.isDebug:()Z
      95: ifeq          109
      98: aload_0
      99: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
     102: ldc           #153                // String Participating transaction failed - marking existing transaction as rollback-only
     104: invokeinterface #42,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
     109: aload_0
     110: aload_1
     111: invokevirtual #154                // Method doSetRollbackOnly:(Lorg/springframework/transaction/support/DefaultTransactionStatus;)V
     114: goto          149
     117: aload_1
     118: invokevirtual #120                // Method org/springframework/transaction/support/DefaultTransactionStatus.isDebug:()Z
     121: ifeq          149
     124: aload_0
     125: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
     128: ldc           #155                // String Participating transaction failed - letting transaction originator decide on rollback
     130: invokeinterface #42,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
     135: goto          149
     138: aload_0
     139: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
     142: ldc           #156                // String Should roll back transaction but cannot - no transaction available
     144: invokeinterface #42,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
     149: goto          170
     152: astore_2
     153: aload_0
     154: aload_1
     155: iconst_2
     156: invokespecial #142                // Method triggerAfterCompletion:(Lorg/springframework/transaction/support/DefaultTransactionStatus;I)V
     159: aload_2
     160: athrow
     161: astore_2
     162: aload_0
     163: aload_1
     164: iconst_2
     165: invokespecial #142                // Method triggerAfterCompletion:(Lorg/springframework/transaction/support/DefaultTransactionStatus;I)V
     168: aload_2
     169: athrow
     170: aload_0
     171: aload_1
     172: iconst_1
     173: invokespecial #142                // Method triggerAfterCompletion:(Lorg/springframework/transaction/support/DefaultTransactionStatus;I)V
     176: aload_0
     177: aload_1
     178: invokespecial #147                // Method cleanupAfterCompletion:(Lorg/springframework/transaction/support/DefaultTransactionStatus;)V
     181: goto          192
     184: astore_3
     185: aload_0
     186: aload_1
     187: invokespecial #147                // Method cleanupAfterCompletion:(Lorg/springframework/transaction/support/DefaultTransactionStatus;)V
     190: aload_3
     191: athrow
     192: return
    Exception table:
       from    to  target type
           0   149   152   Class java/lang/RuntimeException
           0   149   161   Class java/lang/Error
           0   176   184   any

  private void doRollbackOnCommitException(org.springframework.transaction.support.DefaultTransactionStatus, java.lang.Throwable) throws org.springframework.transaction.TransactionException;
    Code:
       0: aload_1
       1: invokevirtual #135                // Method org/springframework/transaction/support/DefaultTransactionStatus.isNewTransaction:()Z
       4: ifeq          34
       7: aload_1
       8: invokevirtual #120                // Method org/springframework/transaction/support/DefaultTransactionStatus.isDebug:()Z
      11: ifeq          26
      14: aload_0
      15: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      18: ldc           #157                // String Initiating transaction rollback after commit exception
      20: aload_2
      21: invokeinterface #158,  3          // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;Ljava/lang/Throwable;)V
      26: aload_0
      27: aload_1
      28: invokevirtual #151                // Method doRollback:(Lorg/springframework/transaction/support/DefaultTransactionStatus;)V
      31: goto          72
      34: aload_1
      35: invokevirtual #84                 // Method org/springframework/transaction/support/DefaultTransactionStatus.hasTransaction:()Z
      38: ifeq          72
      41: aload_0
      42: invokevirtual #152                // Method isGlobalRollbackOnParticipationFailure:()Z
      45: ifeq          72
      48: aload_1
      49: invokevirtual #120                // Method org/springframework/transaction/support/DefaultTransactionStatus.isDebug:()Z
      52: ifeq          67
      55: aload_0
      56: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      59: ldc           #159                // String Marking existing transaction as rollback-only after commit exception
      61: aload_2
      62: invokeinterface #158,  3          // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;Ljava/lang/Throwable;)V
      67: aload_0
      68: aload_1
      69: invokevirtual #154                // Method doSetRollbackOnly:(Lorg/springframework/transaction/support/DefaultTransactionStatus;)V
      72: goto          117
      75: astore_3
      76: aload_0
      77: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      80: ldc           #160                // String Commit exception overridden by rollback exception
      82: aload_2
      83: invokeinterface #107,  3          // InterfaceMethod org/apache/commons/logging/Log.error:(Ljava/lang/Object;Ljava/lang/Throwable;)V
      88: aload_0
      89: aload_1
      90: iconst_2
      91: invokespecial #142                // Method triggerAfterCompletion:(Lorg/springframework/transaction/support/DefaultTransactionStatus;I)V
      94: aload_3
      95: athrow
      96: astore_3
      97: aload_0
      98: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
     101: ldc           #160                // String Commit exception overridden by rollback exception
     103: aload_2
     104: invokeinterface #107,  3          // InterfaceMethod org/apache/commons/logging/Log.error:(Ljava/lang/Object;Ljava/lang/Throwable;)V
     109: aload_0
     110: aload_1
     111: iconst_2
     112: invokespecial #142                // Method triggerAfterCompletion:(Lorg/springframework/transaction/support/DefaultTransactionStatus;I)V
     115: aload_3
     116: athrow
     117: aload_0
     118: aload_1
     119: iconst_1
     120: invokespecial #142                // Method triggerAfterCompletion:(Lorg/springframework/transaction/support/DefaultTransactionStatus;I)V
     123: return
    Exception table:
       from    to  target type
           0    72    75   Class java/lang/RuntimeException
           0    72    96   Class java/lang/Error

  protected final void triggerBeforeCommit(org.springframework.transaction.support.DefaultTransactionStatus);
    Code:
       0: aload_1
       1: invokevirtual #83                 // Method org/springframework/transaction/support/DefaultTransactionStatus.isNewSynchronization:()Z
       4: ifeq          32
       7: aload_1
       8: invokevirtual #120                // Method org/springframework/transaction/support/DefaultTransactionStatus.isDebug:()Z
      11: ifeq          25
      14: aload_0
      15: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      18: ldc           #161                // String Triggering beforeCommit synchronization
      20: invokeinterface #162,  2          // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
      25: aload_1
      26: invokevirtual #163                // Method org/springframework/transaction/support/DefaultTransactionStatus.isReadOnly:()Z
      29: invokestatic  #164                // Method org/springframework/transaction/support/TransactionSynchronizationUtils.triggerBeforeCommit:(Z)V
      32: return

  protected final void triggerBeforeCompletion(org.springframework.transaction.support.DefaultTransactionStatus);
    Code:
       0: aload_1
       1: invokevirtual #83                 // Method org/springframework/transaction/support/DefaultTransactionStatus.isNewSynchronization:()Z
       4: ifeq          28
       7: aload_1
       8: invokevirtual #120                // Method org/springframework/transaction/support/DefaultTransactionStatus.isDebug:()Z
      11: ifeq          25
      14: aload_0
      15: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      18: ldc           #165                // String Triggering beforeCompletion synchronization
      20: invokeinterface #162,  2          // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
      25: invokestatic  #166                // Method org/springframework/transaction/support/TransactionSynchronizationUtils.triggerBeforeCompletion:()V
      28: return

  private void triggerAfterCommit(org.springframework.transaction.support.DefaultTransactionStatus);
    Code:
       0: aload_1
       1: invokevirtual #83                 // Method org/springframework/transaction/support/DefaultTransactionStatus.isNewSynchronization:()Z
       4: ifeq          28
       7: aload_1
       8: invokevirtual #120                // Method org/springframework/transaction/support/DefaultTransactionStatus.isDebug:()Z
      11: ifeq          25
      14: aload_0
      15: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      18: ldc           #167                // String Triggering afterCommit synchronization
      20: invokeinterface #162,  2          // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
      25: invokestatic  #168                // Method org/springframework/transaction/support/TransactionSynchronizationUtils.triggerAfterCommit:()V
      28: return

  private void triggerAfterCompletion(org.springframework.transaction.support.DefaultTransactionStatus, int);
    Code:
       0: aload_1
       1: invokevirtual #83                 // Method org/springframework/transaction/support/DefaultTransactionStatus.isNewSynchronization:()Z
       4: ifeq          73
       7: invokestatic  #108                // Method org/springframework/transaction/support/TransactionSynchronizationManager.getSynchronizations:()Ljava/util/List;
      10: astore_3
      11: invokestatic  #114                // Method org/springframework/transaction/support/TransactionSynchronizationManager.clearSynchronization:()V
      14: aload_1
      15: invokevirtual #84                 // Method org/springframework/transaction/support/DefaultTransactionStatus.hasTransaction:()Z
      18: ifeq          28
      21: aload_1
      22: invokevirtual #135                // Method org/springframework/transaction/support/DefaultTransactionStatus.isNewTransaction:()Z
      25: ifeq          55
      28: aload_1
      29: invokevirtual #120                // Method org/springframework/transaction/support/DefaultTransactionStatus.isDebug:()Z
      32: ifeq          46
      35: aload_0
      36: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      39: ldc           #169                // String Triggering afterCompletion synchronization
      41: invokeinterface #162,  2          // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
      46: aload_0
      47: aload_3
      48: iload_2
      49: invokevirtual #170                // Method invokeAfterCompletion:(Ljava/util/List;I)V
      52: goto          73
      55: aload_3
      56: invokeinterface #171,  1          // InterfaceMethod java/util/List.isEmpty:()Z
      61: ifne          73
      64: aload_0
      65: aload_1
      66: invokevirtual #172                // Method org/springframework/transaction/support/DefaultTransactionStatus.getTransaction:()Ljava/lang/Object;
      69: aload_3
      70: invokevirtual #173                // Method registerAfterCompletionWithExistingTransaction:(Ljava/lang/Object;Ljava/util/List;)V
      73: return

  protected final void invokeAfterCompletion(java.util.List<org.springframework.transaction.support.TransactionSynchronization>, int);
    Code:
       0: aload_1
       1: iload_2
       2: invokestatic  #174                // Method org/springframework/transaction/support/TransactionSynchronizationUtils.invokeAfterCompletion:(Ljava/util/List;I)V
       5: return

  private void cleanupAfterCompletion(org.springframework.transaction.support.DefaultTransactionStatus);
    Code:
       0: aload_1
       1: invokevirtual #175                // Method org/springframework/transaction/support/DefaultTransactionStatus.setCompleted:()V
       4: aload_1
       5: invokevirtual #83                 // Method org/springframework/transaction/support/DefaultTransactionStatus.isNewSynchronization:()Z
       8: ifeq          14
      11: invokestatic  #176                // Method org/springframework/transaction/support/TransactionSynchronizationManager.clear:()V
      14: aload_1
      15: invokevirtual #135                // Method org/springframework/transaction/support/DefaultTransactionStatus.isNewTransaction:()Z
      18: ifeq          29
      21: aload_0
      22: aload_1
      23: invokevirtual #172                // Method org/springframework/transaction/support/DefaultTransactionStatus.getTransaction:()Ljava/lang/Object;
      26: invokevirtual #177                // Method doCleanupAfterCompletion:(Ljava/lang/Object;)V
      29: aload_1
      30: invokevirtual #178                // Method org/springframework/transaction/support/DefaultTransactionStatus.getSuspendedResources:()Ljava/lang/Object;
      33: ifnull        69
      36: aload_1
      37: invokevirtual #120                // Method org/springframework/transaction/support/DefaultTransactionStatus.isDebug:()Z
      40: ifeq          54
      43: aload_0
      44: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      47: ldc           #179                // String Resuming suspended transaction after completion of inner transaction
      49: invokeinterface #42,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      54: aload_0
      55: aload_1
      56: invokevirtual #172                // Method org/springframework/transaction/support/DefaultTransactionStatus.getTransaction:()Ljava/lang/Object;
      59: aload_1
      60: invokevirtual #178                // Method org/springframework/transaction/support/DefaultTransactionStatus.getSuspendedResources:()Ljava/lang/Object;
      63: checkcast     #95                 // class org/springframework/transaction/support/AbstractPlatformTransactionManager$SuspendedResourcesHolder
      66: invokevirtual #48                 // Method resume:(Ljava/lang/Object;Lorg/springframework/transaction/support/AbstractPlatformTransactionManager$SuspendedResourcesHolder;)V
      69: return

  protected abstract java.lang.Object doGetTransaction() throws org.springframework.transaction.TransactionException;

  protected boolean isExistingTransaction(java.lang.Object) throws org.springframework.transaction.TransactionException;
    Code:
       0: iconst_0
       1: ireturn

  protected boolean useSavepointForNestedTransaction();
    Code:
       0: iconst_1
       1: ireturn

  protected abstract void doBegin(java.lang.Object, org.springframework.transaction.TransactionDefinition) throws org.springframework.transaction.TransactionException;

  protected java.lang.Object doSuspend(java.lang.Object) throws org.springframework.transaction.TransactionException;
    Code:
       0: new           #180                // class org/springframework/transaction/TransactionSuspensionNotSupportedException
       3: dup
       4: new           #34                 // class java/lang/StringBuilder
       7: dup
       8: invokespecial #35                 // Method java/lang/StringBuilder."<init>":()V
      11: ldc           #181                // String Transaction manager [
      13: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      16: aload_0
      17: invokevirtual #2                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
      20: invokevirtual #182                // Method java/lang/Class.getName:()Ljava/lang/String;
      23: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      26: ldc           #183                // String ] does not support transaction suspension
      28: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      31: invokevirtual #41                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      34: invokespecial #184                // Method org/springframework/transaction/TransactionSuspensionNotSupportedException."<init>":(Ljava/lang/String;)V
      37: athrow

  protected void doResume(java.lang.Object, java.lang.Object) throws org.springframework.transaction.TransactionException;
    Code:
       0: new           #180                // class org/springframework/transaction/TransactionSuspensionNotSupportedException
       3: dup
       4: new           #34                 // class java/lang/StringBuilder
       7: dup
       8: invokespecial #35                 // Method java/lang/StringBuilder."<init>":()V
      11: ldc           #181                // String Transaction manager [
      13: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      16: aload_0
      17: invokevirtual #2                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
      20: invokevirtual #182                // Method java/lang/Class.getName:()Ljava/lang/String;
      23: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      26: ldc           #183                // String ] does not support transaction suspension
      28: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      31: invokevirtual #41                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      34: invokespecial #184                // Method org/springframework/transaction/TransactionSuspensionNotSupportedException."<init>":(Ljava/lang/String;)V
      37: athrow

  protected boolean shouldCommitOnGlobalRollbackOnly();
    Code:
       0: iconst_0
       1: ireturn

  protected void prepareForCommit(org.springframework.transaction.support.DefaultTransactionStatus);
    Code:
       0: return

  protected abstract void doCommit(org.springframework.transaction.support.DefaultTransactionStatus) throws org.springframework.transaction.TransactionException;

  protected abstract void doRollback(org.springframework.transaction.support.DefaultTransactionStatus) throws org.springframework.transaction.TransactionException;

  protected void doSetRollbackOnly(org.springframework.transaction.support.DefaultTransactionStatus) throws org.springframework.transaction.TransactionException;
    Code:
       0: new           #30                 // class org/springframework/transaction/IllegalTransactionStateException
       3: dup
       4: ldc           #185                // String Participating in existing transactions is not supported - when \'isExistingTransaction\' returns true, appropriate \'doSetRollbackOnly\' behavior must be provided
       6: invokespecial #32                 // Method org/springframework/transaction/IllegalTransactionStateException."<init>":(Ljava/lang/String;)V
       9: athrow

  protected void registerAfterCompletionWithExistingTransaction(java.lang.Object, java.util.List<org.springframework.transaction.support.TransactionSynchronization>) throws org.springframework.transaction.TransactionException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
       4: ldc           #186                // String Cannot register Spring after-completion synchronization with existing transaction - processing Spring after-completion callbacks immediately, with outcome status \'unknown\'
       6: invokeinterface #42,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      11: aload_0
      12: aload_2
      13: iconst_2
      14: invokevirtual #170                // Method invokeAfterCompletion:(Ljava/util/List;I)V
      17: return

  protected void doCleanupAfterCompletion(java.lang.Object);
    Code:
       0: return

  private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException;
    Code:
       0: aload_1
       1: invokevirtual #187                // Method java/io/ObjectInputStream.defaultReadObject:()V
       4: aload_0
       5: aload_0
       6: invokevirtual #2                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
       9: invokestatic  #3                  // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
      12: putfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      15: return

  static {};
    Code:
       0: new           #188                // class org/springframework/core/Constants
       3: dup
       4: ldc           #5                  // class org/springframework/transaction/support/AbstractPlatformTransactionManager
       6: invokespecial #189                // Method org/springframework/core/Constants."<init>":(Ljava/lang/Class;)V
       9: putstatic     #14                 // Field constants:Lorg/springframework/core/Constants;
      12: return
}
