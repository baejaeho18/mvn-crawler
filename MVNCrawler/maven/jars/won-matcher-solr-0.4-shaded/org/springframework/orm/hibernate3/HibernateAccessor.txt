Compiled from "HibernateAccessor.java"
public abstract class org.springframework.orm.hibernate3.HibernateAccessor implements org.springframework.beans.factory.InitializingBean,org.springframework.beans.factory.BeanFactoryAware {
  public static final int FLUSH_NEVER;

  public static final int FLUSH_AUTO;

  public static final int FLUSH_EAGER;

  public static final int FLUSH_COMMIT;

  public static final int FLUSH_ALWAYS;

  private static final org.springframework.core.Constants constants;

  protected final org.apache.commons.logging.Log logger;

  private org.hibernate.SessionFactory sessionFactory;

  private java.lang.Object entityInterceptor;

  private org.springframework.jdbc.support.SQLExceptionTranslator jdbcExceptionTranslator;

  private org.springframework.jdbc.support.SQLExceptionTranslator defaultJdbcExceptionTranslator;

  private int flushMode;

  private java.lang.String[] filterNames;

  private org.springframework.beans.factory.BeanFactory beanFactory;

  public org.springframework.orm.hibernate3.HibernateAccessor();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_0
       6: invokevirtual #2                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
       9: invokestatic  #3                  // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
      12: putfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      15: aload_0
      16: iconst_1
      17: putfield      #6                  // Field flushMode:I
      20: return

  public void setSessionFactory(org.hibernate.SessionFactory);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #7                  // Field sessionFactory:Lorg/hibernate/SessionFactory;
       5: return

  public org.hibernate.SessionFactory getSessionFactory();
    Code:
       0: aload_0
       1: getfield      #7                  // Field sessionFactory:Lorg/hibernate/SessionFactory;
       4: areturn

  public void setEntityInterceptorBeanName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #8                  // Field entityInterceptor:Ljava/lang/Object;
       5: return

  public void setEntityInterceptor(org.hibernate.Interceptor);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #8                  // Field entityInterceptor:Ljava/lang/Object;
       5: return

  public org.hibernate.Interceptor getEntityInterceptor() throws java.lang.IllegalStateException, org.springframework.beans.BeansException;
    Code:
       0: aload_0
       1: getfield      #8                  // Field entityInterceptor:Ljava/lang/Object;
       4: instanceof    #9                  // class java/lang/String
       7: ifeq          49
      10: aload_0
      11: getfield      #10                 // Field beanFactory:Lorg/springframework/beans/factory/BeanFactory;
      14: ifnonnull     27
      17: new           #11                 // class java/lang/IllegalStateException
      20: dup
      21: ldc           #12                 // String Cannot get entity interceptor via bean name if no bean factory set
      23: invokespecial #13                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      26: athrow
      27: aload_0
      28: getfield      #10                 // Field beanFactory:Lorg/springframework/beans/factory/BeanFactory;
      31: aload_0
      32: getfield      #8                  // Field entityInterceptor:Ljava/lang/Object;
      35: checkcast     #9                  // class java/lang/String
      38: ldc           #14                 // class org/hibernate/Interceptor
      40: invokeinterface #15,  3           // InterfaceMethod org/springframework/beans/factory/BeanFactory.getBean:(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;
      45: checkcast     #14                 // class org/hibernate/Interceptor
      48: areturn
      49: aload_0
      50: getfield      #8                  // Field entityInterceptor:Ljava/lang/Object;
      53: checkcast     #14                 // class org/hibernate/Interceptor
      56: areturn

  public void setJdbcExceptionTranslator(org.springframework.jdbc.support.SQLExceptionTranslator);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #16                 // Field jdbcExceptionTranslator:Lorg/springframework/jdbc/support/SQLExceptionTranslator;
       5: return

  public org.springframework.jdbc.support.SQLExceptionTranslator getJdbcExceptionTranslator();
    Code:
       0: aload_0
       1: getfield      #16                 // Field jdbcExceptionTranslator:Lorg/springframework/jdbc/support/SQLExceptionTranslator;
       4: areturn

  public void setFlushModeName(java.lang.String);
    Code:
       0: aload_0
       1: getstatic     #17                 // Field constants:Lorg/springframework/core/Constants;
       4: aload_1
       5: invokevirtual #18                 // Method org/springframework/core/Constants.asNumber:(Ljava/lang/String;)Ljava/lang/Number;
       8: invokevirtual #19                 // Method java/lang/Number.intValue:()I
      11: invokevirtual #20                 // Method setFlushMode:(I)V
      14: return

  public void setFlushMode(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #6                  // Field flushMode:I
       5: return

  public int getFlushMode();
    Code:
       0: aload_0
       1: getfield      #6                  // Field flushMode:I
       4: ireturn

  public void setFilterName(java.lang.String);
    Code:
       0: aload_0
       1: iconst_1
       2: anewarray     #9                  // class java/lang/String
       5: dup
       6: iconst_0
       7: aload_1
       8: aastore
       9: putfield      #21                 // Field filterNames:[Ljava/lang/String;
      12: return

  public void setFilterNames(java.lang.String...);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #21                 // Field filterNames:[Ljava/lang/String;
       5: return

  public java.lang.String[] getFilterNames();
    Code:
       0: aload_0
       1: getfield      #21                 // Field filterNames:[Ljava/lang/String;
       4: areturn

  public void setBeanFactory(org.springframework.beans.factory.BeanFactory);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #10                 // Field beanFactory:Lorg/springframework/beans/factory/BeanFactory;
       5: return

  public void afterPropertiesSet();
    Code:
       0: aload_0
       1: invokevirtual #22                 // Method getSessionFactory:()Lorg/hibernate/SessionFactory;
       4: ifnonnull     17
       7: new           #23                 // class java/lang/IllegalArgumentException
      10: dup
      11: ldc           #24                 // String Property \'sessionFactory\' is required
      13: invokespecial #25                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: return

  protected org.hibernate.FlushMode applyFlushMode(org.hibernate.Session, boolean);
    Code:
       0: aload_0
       1: invokevirtual #26                 // Method getFlushMode:()I
       4: ifne          54
       7: iload_2
       8: ifeq          42
      11: aload_1
      12: invokeinterface #27,  1           // InterfaceMethod org/hibernate/Session.getFlushMode:()Lorg/hibernate/FlushMode;
      17: astore_3
      18: aload_3
      19: getstatic     #28                 // Field org/hibernate/FlushMode.COMMIT:Lorg/hibernate/FlushMode;
      22: invokevirtual #29                 // Method org/hibernate/FlushMode.lessThan:(Lorg/hibernate/FlushMode;)Z
      25: ifne          39
      28: aload_1
      29: getstatic     #30                 // Field org/hibernate/FlushMode.MANUAL:Lorg/hibernate/FlushMode;
      32: invokeinterface #31,  2           // InterfaceMethod org/hibernate/Session.setFlushMode:(Lorg/hibernate/FlushMode;)V
      37: aload_3
      38: areturn
      39: goto          214
      42: aload_1
      43: getstatic     #30                 // Field org/hibernate/FlushMode.MANUAL:Lorg/hibernate/FlushMode;
      46: invokeinterface #31,  2           // InterfaceMethod org/hibernate/Session.setFlushMode:(Lorg/hibernate/FlushMode;)V
      51: goto          214
      54: aload_0
      55: invokevirtual #26                 // Method getFlushMode:()I
      58: iconst_2
      59: if_icmpne     97
      62: iload_2
      63: ifeq          214
      66: aload_1
      67: invokeinterface #27,  1           // InterfaceMethod org/hibernate/Session.getFlushMode:()Lorg/hibernate/FlushMode;
      72: astore_3
      73: aload_3
      74: getstatic     #32                 // Field org/hibernate/FlushMode.AUTO:Lorg/hibernate/FlushMode;
      77: invokevirtual #33                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      80: ifne          94
      83: aload_1
      84: getstatic     #32                 // Field org/hibernate/FlushMode.AUTO:Lorg/hibernate/FlushMode;
      87: invokeinterface #31,  2           // InterfaceMethod org/hibernate/Session.setFlushMode:(Lorg/hibernate/FlushMode;)V
      92: aload_3
      93: areturn
      94: goto          214
      97: aload_0
      98: invokevirtual #26                 // Method getFlushMode:()I
     101: iconst_3
     102: if_icmpne     162
     105: iload_2
     106: ifeq          150
     109: aload_1
     110: invokeinterface #27,  1           // InterfaceMethod org/hibernate/Session.getFlushMode:()Lorg/hibernate/FlushMode;
     115: astore_3
     116: aload_3
     117: getstatic     #32                 // Field org/hibernate/FlushMode.AUTO:Lorg/hibernate/FlushMode;
     120: invokevirtual #33                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
     123: ifne          136
     126: aload_3
     127: getstatic     #34                 // Field org/hibernate/FlushMode.ALWAYS:Lorg/hibernate/FlushMode;
     130: invokevirtual #33                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
     133: ifeq          147
     136: aload_1
     137: getstatic     #28                 // Field org/hibernate/FlushMode.COMMIT:Lorg/hibernate/FlushMode;
     140: invokeinterface #31,  2           // InterfaceMethod org/hibernate/Session.setFlushMode:(Lorg/hibernate/FlushMode;)V
     145: aload_3
     146: areturn
     147: goto          214
     150: aload_1
     151: getstatic     #28                 // Field org/hibernate/FlushMode.COMMIT:Lorg/hibernate/FlushMode;
     154: invokeinterface #31,  2           // InterfaceMethod org/hibernate/Session.setFlushMode:(Lorg/hibernate/FlushMode;)V
     159: goto          214
     162: aload_0
     163: invokevirtual #26                 // Method getFlushMode:()I
     166: iconst_4
     167: if_icmpne     214
     170: iload_2
     171: ifeq          205
     174: aload_1
     175: invokeinterface #27,  1           // InterfaceMethod org/hibernate/Session.getFlushMode:()Lorg/hibernate/FlushMode;
     180: astore_3
     181: aload_3
     182: getstatic     #34                 // Field org/hibernate/FlushMode.ALWAYS:Lorg/hibernate/FlushMode;
     185: invokevirtual #33                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
     188: ifne          202
     191: aload_1
     192: getstatic     #34                 // Field org/hibernate/FlushMode.ALWAYS:Lorg/hibernate/FlushMode;
     195: invokeinterface #31,  2           // InterfaceMethod org/hibernate/Session.setFlushMode:(Lorg/hibernate/FlushMode;)V
     200: aload_3
     201: areturn
     202: goto          214
     205: aload_1
     206: getstatic     #34                 // Field org/hibernate/FlushMode.ALWAYS:Lorg/hibernate/FlushMode;
     209: invokeinterface #31,  2           // InterfaceMethod org/hibernate/Session.setFlushMode:(Lorg/hibernate/FlushMode;)V
     214: aconst_null
     215: areturn

  protected void flushIfNecessary(org.hibernate.Session, boolean) throws org.hibernate.HibernateException;
    Code:
       0: aload_0
       1: invokevirtual #26                 // Method getFlushMode:()I
       4: iconst_2
       5: if_icmpeq     19
       8: iload_2
       9: ifne          36
      12: aload_0
      13: invokevirtual #26                 // Method getFlushMode:()I
      16: ifeq          36
      19: aload_0
      20: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      23: ldc           #35                 // String Eagerly flushing Hibernate session
      25: invokeinterface #36,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      30: aload_1
      31: invokeinterface #37,  1           // InterfaceMethod org/hibernate/Session.flush:()V
      36: return

  public org.springframework.dao.DataAccessException convertHibernateAccessException(org.hibernate.HibernateException);
    Code:
       0: aload_0
       1: invokevirtual #38                 // Method getJdbcExceptionTranslator:()Lorg/springframework/jdbc/support/SQLExceptionTranslator;
       4: ifnull        27
       7: aload_1
       8: instanceof    #39                 // class org/hibernate/JDBCException
      11: ifeq          27
      14: aload_0
      15: aload_1
      16: checkcast     #39                 // class org/hibernate/JDBCException
      19: aload_0
      20: invokevirtual #38                 // Method getJdbcExceptionTranslator:()Lorg/springframework/jdbc/support/SQLExceptionTranslator;
      23: invokevirtual #40                 // Method convertJdbcAccessException:(Lorg/hibernate/JDBCException;Lorg/springframework/jdbc/support/SQLExceptionTranslator;)Lorg/springframework/dao/DataAccessException;
      26: areturn
      27: ldc           #41                 // class org/hibernate/exception/GenericJDBCException
      29: aload_1
      30: invokevirtual #2                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
      33: if_acmpne     49
      36: aload_0
      37: aload_1
      38: checkcast     #41                 // class org/hibernate/exception/GenericJDBCException
      41: aload_0
      42: invokevirtual #42                 // Method getDefaultJdbcExceptionTranslator:()Lorg/springframework/jdbc/support/SQLExceptionTranslator;
      45: invokevirtual #40                 // Method convertJdbcAccessException:(Lorg/hibernate/JDBCException;Lorg/springframework/jdbc/support/SQLExceptionTranslator;)Lorg/springframework/dao/DataAccessException;
      48: areturn
      49: aload_1
      50: invokestatic  #43                 // Method org/springframework/orm/hibernate3/SessionFactoryUtils.convertHibernateAccessException:(Lorg/hibernate/HibernateException;)Lorg/springframework/dao/DataAccessException;
      53: areturn

  protected org.springframework.dao.DataAccessException convertJdbcAccessException(org.hibernate.JDBCException, org.springframework.jdbc.support.SQLExceptionTranslator);
    Code:
       0: aload_2
       1: new           #44                 // class java/lang/StringBuilder
       4: dup
       5: invokespecial #45                 // Method java/lang/StringBuilder."<init>":()V
       8: ldc           #46                 // String Hibernate operation:
      10: invokevirtual #47                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      13: aload_1
      14: invokevirtual #48                 // Method org/hibernate/JDBCException.getMessage:()Ljava/lang/String;
      17: invokevirtual #47                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      20: invokevirtual #49                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      23: aload_1
      24: invokevirtual #50                 // Method org/hibernate/JDBCException.getSQL:()Ljava/lang/String;
      27: aload_1
      28: invokevirtual #51                 // Method org/hibernate/JDBCException.getSQLException:()Ljava/sql/SQLException;
      31: invokeinterface #52,  4           // InterfaceMethod org/springframework/jdbc/support/SQLExceptionTranslator.translate:(Ljava/lang/String;Ljava/lang/String;Ljava/sql/SQLException;)Lorg/springframework/dao/DataAccessException;
      36: areturn

  protected org.springframework.dao.DataAccessException convertJdbcAccessException(java.sql.SQLException);
    Code:
       0: aload_0
       1: invokevirtual #38                 // Method getJdbcExceptionTranslator:()Lorg/springframework/jdbc/support/SQLExceptionTranslator;
       4: astore_2
       5: aload_2
       6: ifnonnull     14
       9: aload_0
      10: invokevirtual #42                 // Method getDefaultJdbcExceptionTranslator:()Lorg/springframework/jdbc/support/SQLExceptionTranslator;
      13: astore_2
      14: aload_2
      15: ldc           #53                 // String Hibernate-related JDBC operation
      17: aconst_null
      18: aload_1
      19: invokeinterface #52,  4           // InterfaceMethod org/springframework/jdbc/support/SQLExceptionTranslator.translate:(Ljava/lang/String;Ljava/lang/String;Ljava/sql/SQLException;)Lorg/springframework/dao/DataAccessException;
      24: areturn

  protected synchronized org.springframework.jdbc.support.SQLExceptionTranslator getDefaultJdbcExceptionTranslator();
    Code:
       0: aload_0
       1: getfield      #54                 // Field defaultJdbcExceptionTranslator:Lorg/springframework/jdbc/support/SQLExceptionTranslator;
       4: ifnonnull     18
       7: aload_0
       8: aload_0
       9: invokevirtual #22                 // Method getSessionFactory:()Lorg/hibernate/SessionFactory;
      12: invokestatic  #55                 // Method org/springframework/orm/hibernate3/SessionFactoryUtils.newJdbcExceptionTranslator:(Lorg/hibernate/SessionFactory;)Lorg/springframework/jdbc/support/SQLExceptionTranslator;
      15: putfield      #54                 // Field defaultJdbcExceptionTranslator:Lorg/springframework/jdbc/support/SQLExceptionTranslator;
      18: aload_0
      19: getfield      #54                 // Field defaultJdbcExceptionTranslator:Lorg/springframework/jdbc/support/SQLExceptionTranslator;
      22: areturn

  protected void enableFilters(org.hibernate.Session);
    Code:
       0: aload_0
       1: invokevirtual #56                 // Method getFilterNames:()[Ljava/lang/String;
       4: astore_2
       5: aload_2
       6: ifnull        46
       9: aload_2
      10: astore_3
      11: aload_3
      12: arraylength
      13: istore        4
      15: iconst_0
      16: istore        5
      18: iload         5
      20: iload         4
      22: if_icmpge     46
      25: aload_3
      26: iload         5
      28: aaload
      29: astore        6
      31: aload_1
      32: aload         6
      34: invokeinterface #57,  2           // InterfaceMethod org/hibernate/Session.enableFilter:(Ljava/lang/String;)Lorg/hibernate/Filter;
      39: pop
      40: iinc          5, 1
      43: goto          18
      46: return

  protected void disableFilters(org.hibernate.Session);
    Code:
       0: aload_0
       1: invokevirtual #56                 // Method getFilterNames:()[Ljava/lang/String;
       4: astore_2
       5: aload_2
       6: ifnull        45
       9: aload_2
      10: astore_3
      11: aload_3
      12: arraylength
      13: istore        4
      15: iconst_0
      16: istore        5
      18: iload         5
      20: iload         4
      22: if_icmpge     45
      25: aload_3
      26: iload         5
      28: aaload
      29: astore        6
      31: aload_1
      32: aload         6
      34: invokeinterface #58,  2           // InterfaceMethod org/hibernate/Session.disableFilter:(Ljava/lang/String;)V
      39: iinc          5, 1
      42: goto          18
      45: return

  static {};
    Code:
       0: new           #59                 // class org/springframework/core/Constants
       3: dup
       4: ldc           #5                  // class org/springframework/orm/hibernate3/HibernateAccessor
       6: invokespecial #60                 // Method org/springframework/core/Constants."<init>":(Ljava/lang/Class;)V
       9: putstatic     #17                 // Field constants:Lorg/springframework/core/Constants;
      12: return
}
