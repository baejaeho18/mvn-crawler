Compiled from "LocalDataSourceConnectionProvider.java"
public class org.springframework.orm.hibernate3.LocalDataSourceConnectionProvider implements org.hibernate.connection.ConnectionProvider {
  private javax.sql.DataSource dataSource;

  private javax.sql.DataSource dataSourceToUse;

  public org.springframework.orm.hibernate3.LocalDataSourceConnectionProvider();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public void configure(java.util.Properties) throws org.hibernate.HibernateException;
    Code:
       0: aload_0
       1: invokestatic  #2                  // Method org/springframework/orm/hibernate3/LocalSessionFactoryBean.getConfigTimeDataSource:()Ljavax/sql/DataSource;
       4: putfield      #3                  // Field dataSource:Ljavax/sql/DataSource;
       7: aload_0
       8: getfield      #3                  // Field dataSource:Ljavax/sql/DataSource;
      11: ifnonnull     24
      14: new           #4                  // class org/hibernate/HibernateException
      17: dup
      18: ldc           #5                  // String No local DataSource found for configuration - \'dataSource\' property must be set on LocalSessionFactoryBean
      20: invokespecial #6                  // Method org/hibernate/HibernateException."<init>":(Ljava/lang/String;)V
      23: athrow
      24: aload_0
      25: aload_0
      26: aload_0
      27: getfield      #3                  // Field dataSource:Ljavax/sql/DataSource;
      30: invokevirtual #7                  // Method getDataSourceToUse:(Ljavax/sql/DataSource;)Ljavax/sql/DataSource;
      33: putfield      #8                  // Field dataSourceToUse:Ljavax/sql/DataSource;
      36: return

  protected javax.sql.DataSource getDataSourceToUse(javax.sql.DataSource);
    Code:
       0: aload_1
       1: areturn

  public javax.sql.DataSource getDataSource();
    Code:
       0: aload_0
       1: getfield      #3                  // Field dataSource:Ljavax/sql/DataSource;
       4: areturn

  public java.sql.Connection getConnection() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: getfield      #8                  // Field dataSourceToUse:Ljavax/sql/DataSource;
       4: invokeinterface #9,  1            // InterfaceMethod javax/sql/DataSource.getConnection:()Ljava/sql/Connection;
       9: areturn
      10: astore_1
      11: aload_1
      12: invokestatic  #11                 // Method org/hibernate/util/JDBCExceptionReporter.logExceptions:(Ljava/sql/SQLException;)V
      15: aload_1
      16: athrow
    Exception table:
       from    to  target type
           0     9    10   Class java/sql/SQLException

  public void closeConnection(java.sql.Connection) throws java.sql.SQLException;
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #8                  // Field dataSourceToUse:Ljavax/sql/DataSource;
       5: invokestatic  #12                 // Method org/springframework/jdbc/datasource/DataSourceUtils.doCloseConnection:(Ljava/sql/Connection;Ljavax/sql/DataSource;)V
       8: goto          18
      11: astore_2
      12: aload_2
      13: invokestatic  #11                 // Method org/hibernate/util/JDBCExceptionReporter.logExceptions:(Ljava/sql/SQLException;)V
      16: aload_2
      17: athrow
      18: return
    Exception table:
       from    to  target type
           0     8    11   Class java/sql/SQLException

  public void close();
    Code:
       0: return

  public boolean supportsAggressiveRelease();
    Code:
       0: iconst_0
       1: ireturn
}
