Compiled from "BuddhistChronology.java"
public final class org.joda.time.chrono.BuddhistChronology extends org.joda.time.chrono.AssembledChronology {
  private static final long serialVersionUID;

  public static final int BE;

  private static final org.joda.time.DateTimeField ERA_FIELD;

  private static final int BUDDHIST_OFFSET;

  private static final java.util.Map<org.joda.time.DateTimeZone, org.joda.time.chrono.BuddhistChronology> cCache;

  private static final org.joda.time.chrono.BuddhistChronology INSTANCE_UTC;

  public static org.joda.time.chrono.BuddhistChronology getInstanceUTC();
    Code:
       0: getstatic     #1                  // Field INSTANCE_UTC:Lorg/joda/time/chrono/BuddhistChronology;
       3: areturn

  public static org.joda.time.chrono.BuddhistChronology getInstance();
    Code:
       0: invokestatic  #2                  // Method org/joda/time/DateTimeZone.getDefault:()Lorg/joda/time/DateTimeZone;
       3: invokestatic  #3                  // Method getInstance:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/BuddhistChronology;
       6: areturn

  public static synchronized org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone);
    Code:
       0: aload_0
       1: ifnonnull     8
       4: invokestatic  #2                  // Method org/joda/time/DateTimeZone.getDefault:()Lorg/joda/time/DateTimeZone;
       7: astore_0
       8: getstatic     #4                  // Field cCache:Ljava/util/Map;
      11: dup
      12: astore_2
      13: monitorenter
      14: getstatic     #4                  // Field cCache:Ljava/util/Map;
      17: aload_0
      18: invokeinterface #5,  2            // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      23: checkcast     #6                  // class org/joda/time/chrono/BuddhistChronology
      26: astore_1
      27: aload_1
      28: ifnonnull     88
      31: new           #6                  // class org/joda/time/chrono/BuddhistChronology
      34: dup
      35: aload_0
      36: aconst_null
      37: invokestatic  #7                  // Method org/joda/time/chrono/GJChronology.getInstance:(Lorg/joda/time/DateTimeZone;Lorg/joda/time/ReadableInstant;)Lorg/joda/time/chrono/GJChronology;
      40: aconst_null
      41: invokespecial #8                  // Method "<init>":(Lorg/joda/time/Chronology;Ljava/lang/Object;)V
      44: astore_1
      45: new           #9                  // class org/joda/time/DateTime
      48: dup
      49: iconst_1
      50: iconst_1
      51: iconst_1
      52: iconst_0
      53: iconst_0
      54: iconst_0
      55: iconst_0
      56: aload_1
      57: invokespecial #10                 // Method org/joda/time/DateTime."<init>":(IIIIIIILorg/joda/time/Chronology;)V
      60: astore_3
      61: new           #6                  // class org/joda/time/chrono/BuddhistChronology
      64: dup
      65: aload_1
      66: aload_3
      67: aconst_null
      68: invokestatic  #11                 // Method org/joda/time/chrono/LimitChronology.getInstance:(Lorg/joda/time/Chronology;Lorg/joda/time/ReadableDateTime;Lorg/joda/time/ReadableDateTime;)Lorg/joda/time/chrono/LimitChronology;
      71: ldc           #12                 // String
      73: invokespecial #8                  // Method "<init>":(Lorg/joda/time/Chronology;Ljava/lang/Object;)V
      76: astore_1
      77: getstatic     #4                  // Field cCache:Ljava/util/Map;
      80: aload_0
      81: aload_1
      82: invokeinterface #13,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      87: pop
      88: aload_2
      89: monitorexit
      90: goto          100
      93: astore        4
      95: aload_2
      96: monitorexit
      97: aload         4
      99: athrow
     100: aload_1
     101: areturn
    Exception table:
       from    to  target type
          14    90    93   any
          93    97    93   any

  private org.joda.time.chrono.BuddhistChronology(org.joda.time.Chronology, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #14                 // Method org/joda/time/chrono/AssembledChronology."<init>":(Lorg/joda/time/Chronology;Ljava/lang/Object;)V
       6: return

  private java.lang.Object readResolve();
    Code:
       0: aload_0
       1: invokevirtual #15                 // Method getBase:()Lorg/joda/time/Chronology;
       4: astore_1
       5: aload_1
       6: ifnonnull     15
       9: invokestatic  #16                 // Method getInstanceUTC:()Lorg/joda/time/chrono/BuddhistChronology;
      12: goto          22
      15: aload_1
      16: invokevirtual #17                 // Method org/joda/time/Chronology.getZone:()Lorg/joda/time/DateTimeZone;
      19: invokestatic  #3                  // Method getInstance:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/BuddhistChronology;
      22: areturn

  public org.joda.time.Chronology withUTC();
    Code:
       0: getstatic     #1                  // Field INSTANCE_UTC:Lorg/joda/time/chrono/BuddhistChronology;
       3: areturn

  public org.joda.time.Chronology withZone(org.joda.time.DateTimeZone);
    Code:
       0: aload_1
       1: ifnonnull     8
       4: invokestatic  #2                  // Method org/joda/time/DateTimeZone.getDefault:()Lorg/joda/time/DateTimeZone;
       7: astore_1
       8: aload_1
       9: aload_0
      10: invokevirtual #18                 // Method getZone:()Lorg/joda/time/DateTimeZone;
      13: if_acmpne     18
      16: aload_0
      17: areturn
      18: aload_1
      19: invokestatic  #3                  // Method getInstance:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/BuddhistChronology;
      22: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: instanceof    #6                  // class org/joda/time/chrono/BuddhistChronology
      11: ifeq          31
      14: aload_1
      15: checkcast     #6                  // class org/joda/time/chrono/BuddhistChronology
      18: astore_2
      19: aload_0
      20: invokevirtual #18                 // Method getZone:()Lorg/joda/time/DateTimeZone;
      23: aload_2
      24: invokevirtual #18                 // Method getZone:()Lorg/joda/time/DateTimeZone;
      27: invokevirtual #19                 // Method org/joda/time/DateTimeZone.equals:(Ljava/lang/Object;)Z
      30: ireturn
      31: iconst_0
      32: ireturn

  public int hashCode();
    Code:
       0: ldc           #20                 // String Buddhist
       2: invokevirtual #21                 // Method java/lang/String.hashCode:()I
       5: bipush        11
       7: imul
       8: aload_0
       9: invokevirtual #18                 // Method getZone:()Lorg/joda/time/DateTimeZone;
      12: invokevirtual #22                 // Method org/joda/time/DateTimeZone.hashCode:()I
      15: iadd
      16: ireturn

  public java.lang.String toString();
    Code:
       0: ldc           #23                 // String BuddhistChronology
       2: astore_1
       3: aload_0
       4: invokevirtual #18                 // Method getZone:()Lorg/joda/time/DateTimeZone;
       7: astore_2
       8: aload_2
       9: ifnull        44
      12: new           #24                 // class java/lang/StringBuilder
      15: dup
      16: invokespecial #25                 // Method java/lang/StringBuilder."<init>":()V
      19: aload_1
      20: invokevirtual #26                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      23: bipush        91
      25: invokevirtual #27                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      28: aload_2
      29: invokevirtual #28                 // Method org/joda/time/DateTimeZone.getID:()Ljava/lang/String;
      32: invokevirtual #26                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      35: bipush        93
      37: invokevirtual #27                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      40: invokevirtual #29                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      43: astore_1
      44: aload_1
      45: areturn

  protected void assemble(org.joda.time.chrono.AssembledChronology$Fields);
    Code:
       0: aload_0
       1: invokevirtual #30                 // Method getParam:()Ljava/lang/Object;
       4: ifnonnull     188
       7: aload_1
       8: getfield      #31                 // Field org/joda/time/chrono/AssembledChronology$Fields.year:Lorg/joda/time/DateTimeField;
      11: astore_2
      12: aload_1
      13: new           #32                 // class org/joda/time/field/OffsetDateTimeField
      16: dup
      17: new           #33                 // class org/joda/time/field/SkipUndoDateTimeField
      20: dup
      21: aload_0
      22: aload_2
      23: invokespecial #34                 // Method org/joda/time/field/SkipUndoDateTimeField."<init>":(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeField;)V
      26: sipush        543
      29: invokespecial #35                 // Method org/joda/time/field/OffsetDateTimeField."<init>":(Lorg/joda/time/DateTimeField;I)V
      32: putfield      #31                 // Field org/joda/time/chrono/AssembledChronology$Fields.year:Lorg/joda/time/DateTimeField;
      35: aload_1
      36: getfield      #36                 // Field org/joda/time/chrono/AssembledChronology$Fields.yearOfEra:Lorg/joda/time/DateTimeField;
      39: astore_2
      40: aload_1
      41: new           #37                 // class org/joda/time/field/DelegatedDateTimeField
      44: dup
      45: aload_1
      46: getfield      #31                 // Field org/joda/time/chrono/AssembledChronology$Fields.year:Lorg/joda/time/DateTimeField;
      49: invokestatic  #38                 // Method org/joda/time/DateTimeFieldType.yearOfEra:()Lorg/joda/time/DateTimeFieldType;
      52: invokespecial #39                 // Method org/joda/time/field/DelegatedDateTimeField."<init>":(Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeFieldType;)V
      55: putfield      #36                 // Field org/joda/time/chrono/AssembledChronology$Fields.yearOfEra:Lorg/joda/time/DateTimeField;
      58: aload_1
      59: getfield      #40                 // Field org/joda/time/chrono/AssembledChronology$Fields.weekyear:Lorg/joda/time/DateTimeField;
      62: astore_2
      63: aload_1
      64: new           #32                 // class org/joda/time/field/OffsetDateTimeField
      67: dup
      68: new           #33                 // class org/joda/time/field/SkipUndoDateTimeField
      71: dup
      72: aload_0
      73: aload_2
      74: invokespecial #34                 // Method org/joda/time/field/SkipUndoDateTimeField."<init>":(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeField;)V
      77: sipush        543
      80: invokespecial #35                 // Method org/joda/time/field/OffsetDateTimeField."<init>":(Lorg/joda/time/DateTimeField;I)V
      83: putfield      #40                 // Field org/joda/time/chrono/AssembledChronology$Fields.weekyear:Lorg/joda/time/DateTimeField;
      86: new           #32                 // class org/joda/time/field/OffsetDateTimeField
      89: dup
      90: aload_1
      91: getfield      #36                 // Field org/joda/time/chrono/AssembledChronology$Fields.yearOfEra:Lorg/joda/time/DateTimeField;
      94: bipush        99
      96: invokespecial #35                 // Method org/joda/time/field/OffsetDateTimeField."<init>":(Lorg/joda/time/DateTimeField;I)V
      99: astore_2
     100: aload_1
     101: new           #41                 // class org/joda/time/field/DividedDateTimeField
     104: dup
     105: aload_2
     106: invokestatic  #42                 // Method org/joda/time/DateTimeFieldType.centuryOfEra:()Lorg/joda/time/DateTimeFieldType;
     109: bipush        100
     111: invokespecial #43                 // Method org/joda/time/field/DividedDateTimeField."<init>":(Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeFieldType;I)V
     114: putfield      #44                 // Field org/joda/time/chrono/AssembledChronology$Fields.centuryOfEra:Lorg/joda/time/DateTimeField;
     117: new           #45                 // class org/joda/time/field/RemainderDateTimeField
     120: dup
     121: aload_1
     122: getfield      #44                 // Field org/joda/time/chrono/AssembledChronology$Fields.centuryOfEra:Lorg/joda/time/DateTimeField;
     125: checkcast     #41                 // class org/joda/time/field/DividedDateTimeField
     128: invokespecial #46                 // Method org/joda/time/field/RemainderDateTimeField."<init>":(Lorg/joda/time/field/DividedDateTimeField;)V
     131: astore_2
     132: aload_1
     133: new           #32                 // class org/joda/time/field/OffsetDateTimeField
     136: dup
     137: aload_2
     138: invokestatic  #47                 // Method org/joda/time/DateTimeFieldType.yearOfCentury:()Lorg/joda/time/DateTimeFieldType;
     141: iconst_1
     142: invokespecial #48                 // Method org/joda/time/field/OffsetDateTimeField."<init>":(Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeFieldType;I)V
     145: putfield      #49                 // Field org/joda/time/chrono/AssembledChronology$Fields.yearOfCentury:Lorg/joda/time/DateTimeField;
     148: new           #45                 // class org/joda/time/field/RemainderDateTimeField
     151: dup
     152: aload_1
     153: getfield      #40                 // Field org/joda/time/chrono/AssembledChronology$Fields.weekyear:Lorg/joda/time/DateTimeField;
     156: invokestatic  #50                 // Method org/joda/time/DateTimeFieldType.weekyearOfCentury:()Lorg/joda/time/DateTimeFieldType;
     159: bipush        100
     161: invokespecial #51                 // Method org/joda/time/field/RemainderDateTimeField."<init>":(Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeFieldType;I)V
     164: astore_2
     165: aload_1
     166: new           #32                 // class org/joda/time/field/OffsetDateTimeField
     169: dup
     170: aload_2
     171: invokestatic  #50                 // Method org/joda/time/DateTimeFieldType.weekyearOfCentury:()Lorg/joda/time/DateTimeFieldType;
     174: iconst_1
     175: invokespecial #48                 // Method org/joda/time/field/OffsetDateTimeField."<init>":(Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeFieldType;I)V
     178: putfield      #52                 // Field org/joda/time/chrono/AssembledChronology$Fields.weekyearOfCentury:Lorg/joda/time/DateTimeField;
     181: aload_1
     182: getstatic     #53                 // Field ERA_FIELD:Lorg/joda/time/DateTimeField;
     185: putfield      #54                 // Field org/joda/time/chrono/AssembledChronology$Fields.era:Lorg/joda/time/DateTimeField;
     188: return

  static {};
    Code:
       0: new           #55                 // class org/joda/time/chrono/BasicSingleEraDateTimeField
       3: dup
       4: ldc           #56                 // String BE
       6: invokespecial #57                 // Method org/joda/time/chrono/BasicSingleEraDateTimeField."<init>":(Ljava/lang/String;)V
       9: putstatic     #53                 // Field ERA_FIELD:Lorg/joda/time/DateTimeField;
      12: new           #58                 // class java/util/HashMap
      15: dup
      16: invokespecial #59                 // Method java/util/HashMap."<init>":()V
      19: putstatic     #4                  // Field cCache:Ljava/util/Map;
      22: getstatic     #60                 // Field org/joda/time/DateTimeZone.UTC:Lorg/joda/time/DateTimeZone;
      25: invokestatic  #3                  // Method getInstance:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/BuddhistChronology;
      28: putstatic     #1                  // Field INSTANCE_UTC:Lorg/joda/time/chrono/BuddhistChronology;
      31: return
}
