Compiled from "GregorianChronology.java"
public final class org.joda.time.chrono.GregorianChronology extends org.joda.time.chrono.BasicGJChronology {
  private static final long serialVersionUID;

  private static final long MILLIS_PER_YEAR;

  private static final long MILLIS_PER_MONTH;

  private static final int DAYS_0000_TO_1970;

  private static final int MIN_YEAR;

  private static final int MAX_YEAR;

  private static final org.joda.time.chrono.GregorianChronology INSTANCE_UTC;

  private static final java.util.Map<org.joda.time.DateTimeZone, org.joda.time.chrono.GregorianChronology[]> cCache;

  public static org.joda.time.chrono.GregorianChronology getInstanceUTC();
    Code:
       0: getstatic     #1                  // Field INSTANCE_UTC:Lorg/joda/time/chrono/GregorianChronology;
       3: areturn

  public static org.joda.time.chrono.GregorianChronology getInstance();
    Code:
       0: invokestatic  #2                  // Method org/joda/time/DateTimeZone.getDefault:()Lorg/joda/time/DateTimeZone;
       3: iconst_4
       4: invokestatic  #3                  // Method getInstance:(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/GregorianChronology;
       7: areturn

  public static org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone);
    Code:
       0: aload_0
       1: iconst_4
       2: invokestatic  #3                  // Method getInstance:(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/GregorianChronology;
       5: areturn

  public static org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone, int);
    Code:
       0: aload_0
       1: ifnonnull     8
       4: invokestatic  #2                  // Method org/joda/time/DateTimeZone.getDefault:()Lorg/joda/time/DateTimeZone;
       7: astore_0
       8: getstatic     #4                  // Field cCache:Ljava/util/Map;
      11: dup
      12: astore_3
      13: monitorenter
      14: getstatic     #4                  // Field cCache:Ljava/util/Map;
      17: aload_0
      18: invokeinterface #5,  2            // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      23: checkcast     #6                  // class "[Lorg/joda/time/chrono/GregorianChronology;"
      26: astore        4
      28: aload         4
      30: ifnonnull     52
      33: bipush        7
      35: anewarray     #7                  // class org/joda/time/chrono/GregorianChronology
      38: astore        4
      40: getstatic     #4                  // Field cCache:Ljava/util/Map;
      43: aload_0
      44: aload         4
      46: invokeinterface #8,  3            // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      51: pop
      52: aload         4
      54: iload_1
      55: iconst_1
      56: isub
      57: aaload
      58: astore_2
      59: goto          91
      62: astore        5
      64: new           #10                 // class java/lang/IllegalArgumentException
      67: dup
      68: new           #11                 // class java/lang/StringBuilder
      71: dup
      72: invokespecial #12                 // Method java/lang/StringBuilder."<init>":()V
      75: ldc           #13                 // String Invalid min days in first week:
      77: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      80: iload_1
      81: invokevirtual #15                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      84: invokevirtual #16                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      87: invokespecial #17                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      90: athrow
      91: aload_2
      92: ifnonnull     146
      95: aload_0
      96: getstatic     #18                 // Field org/joda/time/DateTimeZone.UTC:Lorg/joda/time/DateTimeZone;
      99: if_acmpne     116
     102: new           #7                  // class org/joda/time/chrono/GregorianChronology
     105: dup
     106: aconst_null
     107: aconst_null
     108: iload_1
     109: invokespecial #19                 // Method "<init>":(Lorg/joda/time/Chronology;Ljava/lang/Object;I)V
     112: astore_2
     113: goto          139
     116: getstatic     #18                 // Field org/joda/time/DateTimeZone.UTC:Lorg/joda/time/DateTimeZone;
     119: iload_1
     120: invokestatic  #3                  // Method getInstance:(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/GregorianChronology;
     123: astore_2
     124: new           #7                  // class org/joda/time/chrono/GregorianChronology
     127: dup
     128: aload_2
     129: aload_0
     130: invokestatic  #20                 // Method org/joda/time/chrono/ZonedChronology.getInstance:(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ZonedChronology;
     133: aconst_null
     134: iload_1
     135: invokespecial #19                 // Method "<init>":(Lorg/joda/time/Chronology;Ljava/lang/Object;I)V
     138: astore_2
     139: aload         4
     141: iload_1
     142: iconst_1
     143: isub
     144: aload_2
     145: aastore
     146: aload_3
     147: monitorexit
     148: goto          158
     151: astore        6
     153: aload_3
     154: monitorexit
     155: aload         6
     157: athrow
     158: aload_2
     159: areturn
    Exception table:
       from    to  target type
          52    59    62   Class java/lang/ArrayIndexOutOfBoundsException
          14   148   151   any
         151   155   151   any

  private org.joda.time.chrono.GregorianChronology(org.joda.time.Chronology, java.lang.Object, int);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iload_3
       4: invokespecial #21                 // Method org/joda/time/chrono/BasicGJChronology."<init>":(Lorg/joda/time/Chronology;Ljava/lang/Object;I)V
       7: return

  private java.lang.Object readResolve();
    Code:
       0: aload_0
       1: invokevirtual #22                 // Method getBase:()Lorg/joda/time/Chronology;
       4: astore_1
       5: aload_0
       6: invokevirtual #23                 // Method getMinimumDaysInFirstWeek:()I
       9: istore_2
      10: iload_2
      11: ifne          18
      14: iconst_4
      15: goto          19
      18: iload_2
      19: istore_2
      20: aload_1
      21: ifnonnull     34
      24: getstatic     #18                 // Field org/joda/time/DateTimeZone.UTC:Lorg/joda/time/DateTimeZone;
      27: iload_2
      28: invokestatic  #3                  // Method getInstance:(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/GregorianChronology;
      31: goto          42
      34: aload_1
      35: invokevirtual #24                 // Method org/joda/time/Chronology.getZone:()Lorg/joda/time/DateTimeZone;
      38: iload_2
      39: invokestatic  #3                  // Method getInstance:(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/GregorianChronology;
      42: areturn

  public org.joda.time.Chronology withUTC();
    Code:
       0: getstatic     #1                  // Field INSTANCE_UTC:Lorg/joda/time/chrono/GregorianChronology;
       3: areturn

  public org.joda.time.Chronology withZone(org.joda.time.DateTimeZone);
    Code:
       0: aload_1
       1: ifnonnull     8
       4: invokestatic  #2                  // Method org/joda/time/DateTimeZone.getDefault:()Lorg/joda/time/DateTimeZone;
       7: astore_1
       8: aload_1
       9: aload_0
      10: invokevirtual #25                 // Method getZone:()Lorg/joda/time/DateTimeZone;
      13: if_acmpne     18
      16: aload_0
      17: areturn
      18: aload_1
      19: invokestatic  #26                 // Method getInstance:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/GregorianChronology;
      22: areturn

  protected void assemble(org.joda.time.chrono.AssembledChronology$Fields);
    Code:
       0: aload_0
       1: invokevirtual #22                 // Method getBase:()Lorg/joda/time/Chronology;
       4: ifnonnull     12
       7: aload_0
       8: aload_1
       9: invokespecial #27                 // Method org/joda/time/chrono/BasicGJChronology.assemble:(Lorg/joda/time/chrono/AssembledChronology$Fields;)V
      12: return

  boolean isLeapYear(int);
    Code:
       0: iload_1
       1: iconst_3
       2: iand
       3: ifne          25
       6: iload_1
       7: bipush        100
       9: irem
      10: ifne          21
      13: iload_1
      14: sipush        400
      17: irem
      18: ifne          25
      21: iconst_1
      22: goto          26
      25: iconst_0
      26: ireturn

  long calculateFirstDayOfYearMillis(int);
    Code:
       0: iload_1
       1: bipush        100
       3: idiv
       4: istore_2
       5: iload_1
       6: ifge          28
       9: iload_1
      10: iconst_3
      11: iadd
      12: iconst_2
      13: ishr
      14: iload_2
      15: isub
      16: iload_2
      17: iconst_3
      18: iadd
      19: iconst_2
      20: ishr
      21: iadd
      22: iconst_1
      23: isub
      24: istore_2
      25: goto          49
      28: iload_1
      29: iconst_2
      30: ishr
      31: iload_2
      32: isub
      33: iload_2
      34: iconst_2
      35: ishr
      36: iadd
      37: istore_2
      38: aload_0
      39: iload_1
      40: invokevirtual #28                 // Method isLeapYear:(I)Z
      43: ifeq          49
      46: iinc          2, -1
      49: iload_1
      50: i2l
      51: ldc2_w        #29                 // long 365l
      54: lmul
      55: iload_2
      56: ldc           #31                 // int 719527
      58: isub
      59: i2l
      60: ladd
      61: ldc2_w        #32                 // long 86400000l
      64: lmul
      65: lreturn

  int getMinYear();
    Code:
       0: ldc           #34                 // int -292275054
       2: ireturn

  int getMaxYear();
    Code:
       0: ldc           #35                 // int 292278993
       2: ireturn

  long getAverageMillisPerYear();
    Code:
       0: ldc2_w        #36                 // long 31556952000l
       3: lreturn

  long getAverageMillisPerYearDividedByTwo();
    Code:
       0: ldc2_w        #38                 // long 15778476000l
       3: lreturn

  long getAverageMillisPerMonth();
    Code:
       0: ldc2_w        #40                 // long 2629746000l
       3: lreturn

  long getApproxMillisAtEpochDividedByTwo();
    Code:
       0: ldc2_w        #42                 // long 31083597720000l
       3: lreturn

  static {};
    Code:
       0: new           #44                 // class java/util/HashMap
       3: dup
       4: invokespecial #45                 // Method java/util/HashMap."<init>":()V
       7: putstatic     #4                  // Field cCache:Ljava/util/Map;
      10: getstatic     #18                 // Field org/joda/time/DateTimeZone.UTC:Lorg/joda/time/DateTimeZone;
      13: invokestatic  #26                 // Method getInstance:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/GregorianChronology;
      16: putstatic     #1                  // Field INSTANCE_UTC:Lorg/joda/time/chrono/GregorianChronology;
      19: return
}
