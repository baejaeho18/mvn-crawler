Compiled from "InFlightMetadataCollectorImpl.java"
class org.hibernate.boot.internal.InFlightMetadataCollectorImpl$TableColumnNameBinding implements java.io.Serializable {
  private final java.lang.String tableName;

  private java.util.Map<org.hibernate.boot.model.naming.Identifier, java.lang.String> logicalToPhysical;

  private java.util.Map<java.lang.String, org.hibernate.boot.model.naming.Identifier> physicalToLogical;

  final org.hibernate.boot.internal.InFlightMetadataCollectorImpl this$0;

  private org.hibernate.boot.internal.InFlightMetadataCollectorImpl$TableColumnNameBinding(org.hibernate.boot.internal.InFlightMetadataCollectorImpl, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #4                  // Field this$0:Lorg/hibernate/boot/internal/InFlightMetadataCollectorImpl;
       5: aload_0
       6: invokespecial #5                  // Method java/lang/Object."<init>":()V
       9: aload_0
      10: new           #6                  // class java/util/HashMap
      13: dup
      14: invokespecial #7                  // Method java/util/HashMap."<init>":()V
      17: putfield      #2                  // Field logicalToPhysical:Ljava/util/Map;
      20: aload_0
      21: new           #6                  // class java/util/HashMap
      24: dup
      25: invokespecial #7                  // Method java/util/HashMap."<init>":()V
      28: putfield      #1                  // Field physicalToLogical:Ljava/util/Map;
      31: aload_0
      32: aload_2
      33: putfield      #8                  // Field tableName:Ljava/lang/String;
      36: return

  public void addBinding(org.hibernate.boot.model.naming.Identifier, org.hibernate.mapping.Column);
    Code:
       0: aload_2
       1: aload_0
       2: getfield      #4                  // Field this$0:Lorg/hibernate/boot/internal/InFlightMetadataCollectorImpl;
       5: invokevirtual #9                  // Method org/hibernate/boot/internal/InFlightMetadataCollectorImpl.getDatabase:()Lorg/hibernate/boot/model/relational/Database;
       8: invokevirtual #10                 // Method org/hibernate/boot/model/relational/Database.getJdbcEnvironment:()Lorg/hibernate/engine/jdbc/env/spi/JdbcEnvironment;
      11: invokeinterface #11,  1           // InterfaceMethod org/hibernate/engine/jdbc/env/spi/JdbcEnvironment.getDialect:()Lorg/hibernate/dialect/Dialect;
      16: invokevirtual #12                 // Method org/hibernate/mapping/Column.getQuotedName:(Lorg/hibernate/dialect/Dialect;)Ljava/lang/String;
      19: astore_3
      20: aload_0
      21: aload_1
      22: aload_3
      23: invokespecial #13                 // Method bindLogicalToPhysical:(Lorg/hibernate/boot/model/naming/Identifier;Ljava/lang/String;)V
      26: aload_0
      27: aload_1
      28: aload_3
      29: invokespecial #14                 // Method bindPhysicalToLogical:(Lorg/hibernate/boot/model/naming/Identifier;Ljava/lang/String;)V
      32: return

  private void bindLogicalToPhysical(org.hibernate.boot.model.naming.Identifier, java.lang.String) throws org.hibernate.DuplicateMappingException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field logicalToPhysical:Ljava/util/Map;
       4: aload_1
       5: aload_2
       6: invokeinterface #15,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      11: checkcast     #16                 // class java/lang/String
      14: astore_3
      15: aload_3
      16: ifnull        114
      19: aload_1
      20: invokevirtual #17                 // Method org/hibernate/boot/model/naming/Identifier.isQuoted:()Z
      23: ifeq          34
      26: aload_2
      27: aload_3
      28: invokevirtual #18                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      31: goto          39
      34: aload_2
      35: aload_3
      36: invokevirtual #19                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      39: istore        4
      41: iload         4
      43: ifne          114
      46: new           #20                 // class org/hibernate/DuplicateMappingException
      49: dup
      50: getstatic     #21                 // Field java/util/Locale.ENGLISH:Ljava/util/Locale;
      53: ldc           #22                 // String Table [%s] contains logical column name [%s] referring to multiple physical column names: [%s], [%s]
      55: iconst_4
      56: anewarray     #23                 // class java/lang/Object
      59: dup
      60: iconst_0
      61: aload_0
      62: getfield      #8                  // Field tableName:Ljava/lang/String;
      65: aastore
      66: dup
      67: iconst_1
      68: aload_1
      69: aastore
      70: dup
      71: iconst_2
      72: aload_3
      73: aastore
      74: dup
      75: iconst_3
      76: aload_2
      77: aastore
      78: invokestatic  #24                 // Method java/lang/String.format:(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      81: getstatic     #25                 // Field org/hibernate/DuplicateMappingException$Type.COLUMN_BINDING:Lorg/hibernate/DuplicateMappingException$Type;
      84: new           #26                 // class java/lang/StringBuilder
      87: dup
      88: invokespecial #27                 // Method java/lang/StringBuilder."<init>":()V
      91: aload_0
      92: getfield      #8                  // Field tableName:Ljava/lang/String;
      95: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      98: ldc           #29                 // String .
     100: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     103: aload_1
     104: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     107: invokevirtual #31                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     110: invokespecial #32                 // Method org/hibernate/DuplicateMappingException."<init>":(Ljava/lang/String;Lorg/hibernate/DuplicateMappingException$Type;Ljava/lang/String;)V
     113: athrow
     114: return

  private void bindPhysicalToLogical(org.hibernate.boot.model.naming.Identifier, java.lang.String) throws org.hibernate.DuplicateMappingException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field physicalToLogical:Ljava/util/Map;
       4: aload_2
       5: aload_1
       6: invokeinterface #15,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      11: checkcast     #33                 // class org/hibernate/boot/model/naming/Identifier
      14: astore_3
      15: aload_3
      16: ifnull        95
      19: aload_3
      20: aload_1
      21: invokevirtual #34                 // Method org/hibernate/boot/model/naming/Identifier.equals:(Ljava/lang/Object;)Z
      24: ifne          95
      27: new           #20                 // class org/hibernate/DuplicateMappingException
      30: dup
      31: getstatic     #21                 // Field java/util/Locale.ENGLISH:Ljava/util/Locale;
      34: ldc           #35                 // String Table [%s] contains physical column name [%s] referred to by multiple physical column names: [%s], [%s]
      36: iconst_4
      37: anewarray     #23                 // class java/lang/Object
      40: dup
      41: iconst_0
      42: aload_0
      43: getfield      #8                  // Field tableName:Ljava/lang/String;
      46: aastore
      47: dup
      48: iconst_1
      49: aload_2
      50: aastore
      51: dup
      52: iconst_2
      53: aload_1
      54: aastore
      55: dup
      56: iconst_3
      57: aload_3
      58: aastore
      59: invokestatic  #24                 // Method java/lang/String.format:(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      62: getstatic     #25                 // Field org/hibernate/DuplicateMappingException$Type.COLUMN_BINDING:Lorg/hibernate/DuplicateMappingException$Type;
      65: new           #26                 // class java/lang/StringBuilder
      68: dup
      69: invokespecial #27                 // Method java/lang/StringBuilder."<init>":()V
      72: aload_0
      73: getfield      #8                  // Field tableName:Ljava/lang/String;
      76: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      79: ldc           #29                 // String .
      81: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      84: aload_2
      85: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      88: invokevirtual #31                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      91: invokespecial #32                 // Method org/hibernate/DuplicateMappingException."<init>":(Ljava/lang/String;Lorg/hibernate/DuplicateMappingException$Type;Ljava/lang/String;)V
      94: athrow
      95: return

  org.hibernate.boot.internal.InFlightMetadataCollectorImpl$TableColumnNameBinding(org.hibernate.boot.internal.InFlightMetadataCollectorImpl, java.lang.String, org.hibernate.boot.internal.InFlightMetadataCollectorImpl$1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #3                  // Method "<init>":(Lorg/hibernate/boot/internal/InFlightMetadataCollectorImpl;Ljava/lang/String;)V
       6: return

  static java.util.Map access$100(org.hibernate.boot.internal.InFlightMetadataCollectorImpl$TableColumnNameBinding);
    Code:
       0: aload_0
       1: getfield      #2                  // Field logicalToPhysical:Ljava/util/Map;
       4: areturn

  static java.util.Map access$200(org.hibernate.boot.internal.InFlightMetadataCollectorImpl$TableColumnNameBinding);
    Code:
       0: aload_0
       1: getfield      #1                  // Field physicalToLogical:Ljava/util/Map;
       4: areturn
}
