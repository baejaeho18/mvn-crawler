Compiled from "ASTParentsFirstIterator.java"
public class org.hibernate.hql.internal.ast.util.ASTParentsFirstIterator implements java.util.Iterator {
  private antlr.collections.AST next;

  private antlr.collections.AST tree;

  private java.util.LinkedList<antlr.collections.AST> parents;

  public void remove();
    Code:
       0: new           #1                  // class java/lang/UnsupportedOperationException
       3: dup
       4: ldc           #2                  // String remove() is not supported
       6: invokespecial #3                  // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
       9: athrow

  public boolean hasNext();
    Code:
       0: aload_0
       1: getfield      #4                  // Field next:Lantlr/collections/AST;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public java.lang.Object next();
    Code:
       0: aload_0
       1: invokevirtual #5                  // Method nextNode:()Lantlr/collections/AST;
       4: areturn

  public org.hibernate.hql.internal.ast.util.ASTParentsFirstIterator(antlr.collections.AST);
    Code:
       0: aload_0
       1: invokespecial #6                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #7                  // class java/util/LinkedList
       8: dup
       9: invokespecial #8                  // Method java/util/LinkedList."<init>":()V
      12: putfield      #9                  // Field parents:Ljava/util/LinkedList;
      15: aload_0
      16: aload_0
      17: aload_1
      18: dup_x1
      19: putfield      #4                  // Field next:Lantlr/collections/AST;
      22: putfield      #10                 // Field tree:Lantlr/collections/AST;
      25: return

  public antlr.collections.AST nextNode();
    Code:
       0: aload_0
       1: getfield      #4                  // Field next:Lantlr/collections/AST;
       4: astore_1
       5: aload_0
       6: getfield      #4                  // Field next:Lantlr/collections/AST;
       9: ifnull        125
      12: aload_0
      13: getfield      #4                  // Field next:Lantlr/collections/AST;
      16: invokeinterface #11,  1           // InterfaceMethod antlr/collections/AST.getFirstChild:()Lantlr/collections/AST;
      21: astore_2
      22: aload_2
      23: ifnonnull     101
      26: aload_0
      27: getfield      #4                  // Field next:Lantlr/collections/AST;
      30: invokeinterface #12,  1           // InterfaceMethod antlr/collections/AST.getNextSibling:()Lantlr/collections/AST;
      35: astore_3
      36: aload_3
      37: ifnonnull     93
      40: aload_0
      41: invokespecial #13                 // Method pop:()Lantlr/collections/AST;
      44: astore        4
      46: aload         4
      48: ifnull        70
      51: aload         4
      53: invokeinterface #12,  1           // InterfaceMethod antlr/collections/AST.getNextSibling:()Lantlr/collections/AST;
      58: ifnonnull     70
      61: aload_0
      62: invokespecial #13                 // Method pop:()Lantlr/collections/AST;
      65: astore        4
      67: goto          46
      70: aload_0
      71: aload         4
      73: ifnull        86
      76: aload         4
      78: invokeinterface #12,  1           // InterfaceMethod antlr/collections/AST.getNextSibling:()Lantlr/collections/AST;
      83: goto          87
      86: aconst_null
      87: putfield      #4                  // Field next:Lantlr/collections/AST;
      90: goto          98
      93: aload_0
      94: aload_3
      95: putfield      #4                  // Field next:Lantlr/collections/AST;
      98: goto          125
     101: aload_0
     102: getfield      #4                  // Field next:Lantlr/collections/AST;
     105: aload_0
     106: getfield      #10                 // Field tree:Lantlr/collections/AST;
     109: if_acmpeq     120
     112: aload_0
     113: aload_0
     114: getfield      #4                  // Field next:Lantlr/collections/AST;
     117: invokespecial #14                 // Method push:(Lantlr/collections/AST;)V
     120: aload_0
     121: aload_2
     122: putfield      #4                  // Field next:Lantlr/collections/AST;
     125: aload_1
     126: areturn

  private void push(antlr.collections.AST);
    Code:
       0: aload_0
       1: getfield      #9                  // Field parents:Ljava/util/LinkedList;
       4: aload_1
       5: invokevirtual #15                 // Method java/util/LinkedList.addFirst:(Ljava/lang/Object;)V
       8: return

  private antlr.collections.AST pop();
    Code:
       0: aload_0
       1: getfield      #9                  // Field parents:Ljava/util/LinkedList;
       4: invokevirtual #16                 // Method java/util/LinkedList.size:()I
       7: ifne          12
      10: aconst_null
      11: areturn
      12: aload_0
      13: getfield      #9                  // Field parents:Ljava/util/LinkedList;
      16: invokevirtual #17                 // Method java/util/LinkedList.removeFirst:()Ljava/lang/Object;
      19: checkcast     #18                 // class antlr/collections/AST
      22: areturn
}
