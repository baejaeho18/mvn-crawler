Compiled from "SimpleQuery.java"
class org.postgresql.core.v3.SimpleQuery implements org.postgresql.core.Query {
  private java.util.Map<java.lang.String, java.lang.Integer> resultSetColumnNameIndexMap;

  private final org.postgresql.core.NativeQuery nativeQuery;

  private final org.postgresql.core.v3.TypeTransferModeRegistry transferModeRegistry;

  private java.lang.String statementName;

  private byte[] encodedStatementName;

  private org.postgresql.core.Field[] fields;

  private boolean needUpdateFieldFormats;

  private boolean hasBinaryFields;

  private boolean portalDescribed;

  private boolean statementDescribed;

  private final boolean sanitiserDisabled;

  private java.lang.ref.PhantomReference<?> cleanupRef;

  private int[] preparedTypes;

  private short deallocateEpoch;

  private java.lang.Integer cachedMaxResultRowSize;

  static final org.postgresql.core.v3.SimpleParameterList NO_PARAMETERS;

  static final boolean $assertionsDisabled;

  org.postgresql.core.v3.SimpleQuery(org.postgresql.core.v3.SimpleQuery);
    Code:
       0: aload_0
       1: aload_1
       2: getfield      #1                  // Field nativeQuery:Lorg/postgresql/core/NativeQuery;
       5: aload_1
       6: getfield      #2                  // Field transferModeRegistry:Lorg/postgresql/core/v3/TypeTransferModeRegistry;
       9: aload_1
      10: getfield      #3                  // Field sanitiserDisabled:Z
      13: invokespecial #4                  // Method "<init>":(Lorg/postgresql/core/NativeQuery;Lorg/postgresql/core/v3/TypeTransferModeRegistry;Z)V
      16: return

  org.postgresql.core.v3.SimpleQuery(org.postgresql.core.NativeQuery, org.postgresql.core.v3.TypeTransferModeRegistry, boolean);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #1                  // Field nativeQuery:Lorg/postgresql/core/NativeQuery;
       9: aload_0
      10: aload_2
      11: putfield      #2                  // Field transferModeRegistry:Lorg/postgresql/core/v3/TypeTransferModeRegistry;
      14: aload_0
      15: iload_3
      16: putfield      #3                  // Field sanitiserDisabled:Z
      19: return

  public org.postgresql.core.ParameterList createParameterList();
    Code:
       0: aload_0
       1: getfield      #1                  // Field nativeQuery:Lorg/postgresql/core/NativeQuery;
       4: getfield      #6                  // Field org/postgresql/core/NativeQuery.bindPositions:[I
       7: arraylength
       8: ifne          15
      11: getstatic     #7                  // Field NO_PARAMETERS:Lorg/postgresql/core/v3/SimpleParameterList;
      14: areturn
      15: new           #8                  // class org/postgresql/core/v3/SimpleParameterList
      18: dup
      19: aload_0
      20: invokevirtual #9                  // Method getBindCount:()I
      23: aload_0
      24: getfield      #2                  // Field transferModeRegistry:Lorg/postgresql/core/v3/TypeTransferModeRegistry;
      27: invokespecial #10                 // Method org/postgresql/core/v3/SimpleParameterList."<init>":(ILorg/postgresql/core/v3/TypeTransferModeRegistry;)V
      30: areturn

  public java.lang.String toString(org.postgresql.core.ParameterList);
    Code:
       0: aload_0
       1: getfield      #1                  // Field nativeQuery:Lorg/postgresql/core/NativeQuery;
       4: aload_1
       5: invokevirtual #11                 // Method org/postgresql/core/NativeQuery.toString:(Lorg/postgresql/core/ParameterList;)Ljava/lang/String;
       8: areturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: aconst_null
       2: invokevirtual #12                 // Method toString:(Lorg/postgresql/core/ParameterList;)Ljava/lang/String;
       5: areturn

  public void close();
    Code:
       0: aload_0
       1: invokevirtual #13                 // Method unprepare:()V
       4: return

  public org.postgresql.core.v3.SimpleQuery[] getSubqueries();
    Code:
       0: aconst_null
       1: areturn

  public int getMaxResultRowSize();
    Code:
       0: aload_0
       1: getfield      #14                 // Field cachedMaxResultRowSize:Ljava/lang/Integer;
       4: ifnull        15
       7: aload_0
       8: getfield      #14                 // Field cachedMaxResultRowSize:Ljava/lang/Integer;
      11: invokevirtual #15                 // Method java/lang/Integer.intValue:()I
      14: ireturn
      15: aload_0
      16: getfield      #16                 // Field statementDescribed:Z
      19: ifne          32
      22: new           #17                 // class java/lang/IllegalStateException
      25: dup
      26: ldc           #18                 // String Cannot estimate result row size on a statement that is not described
      28: invokespecial #19                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      31: athrow
      32: iconst_0
      33: istore_1
      34: aload_0
      35: getfield      #20                 // Field fields:[Lorg/postgresql/core/Field;
      38: ifnull        100
      41: aload_0
      42: getfield      #20                 // Field fields:[Lorg/postgresql/core/Field;
      45: astore_2
      46: aload_2
      47: arraylength
      48: istore_3
      49: iconst_0
      50: istore        4
      52: iload         4
      54: iload_3
      55: if_icmpge     100
      58: aload_2
      59: iload         4
      61: aaload
      62: astore        5
      64: aload         5
      66: invokevirtual #21                 // Method org/postgresql/core/Field.getLength:()I
      69: istore        6
      71: iload         6
      73: iconst_1
      74: if_icmplt     84
      77: iload         6
      79: ldc           #22                 // int 65535
      81: if_icmplt     89
      84: iconst_m1
      85: istore_1
      86: goto          100
      89: iload_1
      90: iload         6
      92: iadd
      93: istore_1
      94: iinc          4, 1
      97: goto          52
     100: aload_0
     101: iload_1
     102: invokestatic  #23                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     105: putfield      #14                 // Field cachedMaxResultRowSize:Ljava/lang/Integer;
     108: iload_1
     109: ireturn

  public java.lang.String getNativeSql();
    Code:
       0: aload_0
       1: getfield      #1                  // Field nativeQuery:Lorg/postgresql/core/NativeQuery;
       4: getfield      #24                 // Field org/postgresql/core/NativeQuery.nativeSql:Ljava/lang/String;
       7: areturn

  void setStatementName(java.lang.String, short);
    Code:
       0: getstatic     #25                 // Field $assertionsDisabled:Z
       3: ifne          20
       6: aload_1
       7: ifnonnull     20
      10: new           #26                 // class java/lang/AssertionError
      13: dup
      14: ldc           #27                 // String statement name should not be null
      16: invokespecial #28                 // Method java/lang/AssertionError."<init>":(Ljava/lang/Object;)V
      19: athrow
      20: aload_0
      21: aload_1
      22: putfield      #29                 // Field statementName:Ljava/lang/String;
      25: aload_0
      26: aload_1
      27: invokestatic  #30                 // Method org/postgresql/core/Utils.encodeUTF8:(Ljava/lang/String;)[B
      30: putfield      #31                 // Field encodedStatementName:[B
      33: aload_0
      34: iload_2
      35: putfield      #32                 // Field deallocateEpoch:S
      38: return

  void setStatementTypes(int[]);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #33                 // Field preparedTypes:[I
       5: return

  int[] getStatementTypes();
    Code:
       0: aload_0
       1: getfield      #33                 // Field preparedTypes:[I
       4: areturn

  java.lang.String getStatementName();
    Code:
       0: aload_0
       1: getfield      #29                 // Field statementName:Ljava/lang/String;
       4: areturn

  boolean isPreparedFor(int[], short);
    Code:
       0: aload_0
       1: getfield      #29                 // Field statementName:Ljava/lang/String;
       4: ifnonnull     9
       7: iconst_0
       8: ireturn
       9: aload_0
      10: getfield      #32                 // Field deallocateEpoch:S
      13: iload_2
      14: if_icmpeq     19
      17: iconst_0
      18: ireturn
      19: getstatic     #25                 // Field $assertionsDisabled:Z
      22: ifne          86
      25: aload_0
      26: getfield      #33                 // Field preparedTypes:[I
      29: ifnull        86
      32: aload_1
      33: arraylength
      34: aload_0
      35: getfield      #33                 // Field preparedTypes:[I
      38: arraylength
      39: if_icmpeq     86
      42: new           #26                 // class java/lang/AssertionError
      45: dup
      46: ldc           #34                 // String paramTypes:%1$d preparedTypes:%2$d
      48: iconst_2
      49: anewarray     #35                 // class java/lang/Object
      52: dup
      53: iconst_0
      54: aload_1
      55: arraylength
      56: invokestatic  #23                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      59: aastore
      60: dup
      61: iconst_1
      62: aload_1
      63: ifnonnull     70
      66: iconst_m1
      67: goto          75
      70: aload_0
      71: getfield      #33                 // Field preparedTypes:[I
      74: arraylength
      75: invokestatic  #23                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      78: aastore
      79: invokestatic  #36                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      82: invokespecial #28                 // Method java/lang/AssertionError."<init>":(Ljava/lang/Object;)V
      85: athrow
      86: iconst_0
      87: istore_3
      88: iload_3
      89: aload_1
      90: arraylength
      91: if_icmpge     120
      94: aload_1
      95: iload_3
      96: iaload
      97: ifeq          114
     100: aload_1
     101: iload_3
     102: iaload
     103: aload_0
     104: getfield      #33                 // Field preparedTypes:[I
     107: iload_3
     108: iaload
     109: if_icmpeq     114
     112: iconst_0
     113: ireturn
     114: iinc          3, 1
     117: goto          88
     120: iconst_1
     121: ireturn

  boolean hasUnresolvedTypes();
    Code:
       0: aload_0
       1: getfield      #33                 // Field preparedTypes:[I
       4: ifnonnull     9
       7: iconst_1
       8: ireturn
       9: aload_0
      10: getfield      #33                 // Field preparedTypes:[I
      13: astore_1
      14: aload_1
      15: arraylength
      16: istore_2
      17: iconst_0
      18: istore_3
      19: iload_3
      20: iload_2
      21: if_icmpge     42
      24: aload_1
      25: iload_3
      26: iaload
      27: istore        4
      29: iload         4
      31: ifne          36
      34: iconst_1
      35: ireturn
      36: iinc          3, 1
      39: goto          19
      42: iconst_0
      43: ireturn

  byte[] getEncodedStatementName();
    Code:
       0: aload_0
       1: getfield      #31                 // Field encodedStatementName:[B
       4: areturn

  void setFields(org.postgresql.core.Field[]);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #20                 // Field fields:[Lorg/postgresql/core/Field;
       5: aload_0
       6: aconst_null
       7: putfield      #37                 // Field resultSetColumnNameIndexMap:Ljava/util/Map;
      10: aload_0
      11: aconst_null
      12: putfield      #14                 // Field cachedMaxResultRowSize:Ljava/lang/Integer;
      15: aload_0
      16: aload_1
      17: ifnull        24
      20: iconst_1
      21: goto          25
      24: iconst_0
      25: putfield      #38                 // Field needUpdateFieldFormats:Z
      28: aload_0
      29: iconst_0
      30: putfield      #39                 // Field hasBinaryFields:Z
      33: return

  org.postgresql.core.Field[] getFields();
    Code:
       0: aload_0
       1: getfield      #20                 // Field fields:[Lorg/postgresql/core/Field;
       4: areturn

  boolean needUpdateFieldFormats();
    Code:
       0: aload_0
       1: getfield      #38                 // Field needUpdateFieldFormats:Z
       4: ifeq          14
       7: aload_0
       8: iconst_0
       9: putfield      #38                 // Field needUpdateFieldFormats:Z
      12: iconst_1
      13: ireturn
      14: iconst_0
      15: ireturn

  public boolean hasBinaryFields();
    Code:
       0: aload_0
       1: getfield      #39                 // Field hasBinaryFields:Z
       4: ireturn

  public void setHasBinaryFields(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #39                 // Field hasBinaryFields:Z
       5: return

  boolean isPortalDescribed();
    Code:
       0: aload_0
       1: getfield      #40                 // Field portalDescribed:Z
       4: ireturn

  void setPortalDescribed(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #40                 // Field portalDescribed:Z
       5: aload_0
       6: aconst_null
       7: putfield      #14                 // Field cachedMaxResultRowSize:Ljava/lang/Integer;
      10: return

  public boolean isStatementDescribed();
    Code:
       0: aload_0
       1: getfield      #16                 // Field statementDescribed:Z
       4: ireturn

  void setStatementDescribed(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #16                 // Field statementDescribed:Z
       5: aload_0
       6: aconst_null
       7: putfield      #14                 // Field cachedMaxResultRowSize:Ljava/lang/Integer;
      10: return

  public boolean isEmpty();
    Code:
       0: aload_0
       1: invokevirtual #41                 // Method getNativeSql:()Ljava/lang/String;
       4: invokevirtual #42                 // Method java/lang/String.isEmpty:()Z
       7: ireturn

  void setCleanupRef(java.lang.ref.PhantomReference<?>);
    Code:
       0: aload_0
       1: getfield      #43                 // Field cleanupRef:Ljava/lang/ref/PhantomReference;
       4: ifnull        22
       7: aload_0
       8: getfield      #43                 // Field cleanupRef:Ljava/lang/ref/PhantomReference;
      11: invokevirtual #44                 // Method java/lang/ref/PhantomReference.clear:()V
      14: aload_0
      15: getfield      #43                 // Field cleanupRef:Ljava/lang/ref/PhantomReference;
      18: invokevirtual #45                 // Method java/lang/ref/PhantomReference.enqueue:()Z
      21: pop
      22: aload_0
      23: aload_1
      24: putfield      #43                 // Field cleanupRef:Ljava/lang/ref/PhantomReference;
      27: return

  void unprepare();
    Code:
       0: aload_0
       1: getfield      #43                 // Field cleanupRef:Ljava/lang/ref/PhantomReference;
       4: ifnull        27
       7: aload_0
       8: getfield      #43                 // Field cleanupRef:Ljava/lang/ref/PhantomReference;
      11: invokevirtual #44                 // Method java/lang/ref/PhantomReference.clear:()V
      14: aload_0
      15: getfield      #43                 // Field cleanupRef:Ljava/lang/ref/PhantomReference;
      18: invokevirtual #45                 // Method java/lang/ref/PhantomReference.enqueue:()Z
      21: pop
      22: aload_0
      23: aconst_null
      24: putfield      #43                 // Field cleanupRef:Ljava/lang/ref/PhantomReference;
      27: aload_0
      28: aconst_null
      29: putfield      #29                 // Field statementName:Ljava/lang/String;
      32: aload_0
      33: aconst_null
      34: putfield      #31                 // Field encodedStatementName:[B
      37: aload_0
      38: aconst_null
      39: putfield      #20                 // Field fields:[Lorg/postgresql/core/Field;
      42: aload_0
      43: aconst_null
      44: putfield      #37                 // Field resultSetColumnNameIndexMap:Ljava/util/Map;
      47: aload_0
      48: iconst_0
      49: putfield      #40                 // Field portalDescribed:Z
      52: aload_0
      53: iconst_0
      54: putfield      #16                 // Field statementDescribed:Z
      57: aload_0
      58: aconst_null
      59: putfield      #14                 // Field cachedMaxResultRowSize:Ljava/lang/Integer;
      62: return

  public int getBatchSize();
    Code:
       0: iconst_1
       1: ireturn

  org.postgresql.core.NativeQuery getNativeQuery();
    Code:
       0: aload_0
       1: getfield      #1                  // Field nativeQuery:Lorg/postgresql/core/NativeQuery;
       4: areturn

  public final int getBindCount();
    Code:
       0: aload_0
       1: getfield      #1                  // Field nativeQuery:Lorg/postgresql/core/NativeQuery;
       4: getfield      #6                  // Field org/postgresql/core/NativeQuery.bindPositions:[I
       7: arraylength
       8: aload_0
       9: invokevirtual #46                 // Method getBatchSize:()I
      12: imul
      13: ireturn

  public java.util.Map<java.lang.String, java.lang.Integer> getResultSetColumnNameIndexMap();
    Code:
       0: aload_0
       1: getfield      #37                 // Field resultSetColumnNameIndexMap:Ljava/util/Map;
       4: astore_1
       5: aload_1
       6: ifnonnull     40
       9: aload_0
      10: getfield      #20                 // Field fields:[Lorg/postgresql/core/Field;
      13: ifnull        40
      16: aload_0
      17: getfield      #20                 // Field fields:[Lorg/postgresql/core/Field;
      20: aload_0
      21: getfield      #3                  // Field sanitiserDisabled:Z
      24: invokestatic  #47                 // Method org/postgresql/jdbc/PgResultSet.createColumnNameIndexMap:([Lorg/postgresql/core/Field;Z)Ljava/util/Map;
      27: astore_1
      28: aload_0
      29: getfield      #29                 // Field statementName:Ljava/lang/String;
      32: ifnull        40
      35: aload_0
      36: aload_1
      37: putfield      #37                 // Field resultSetColumnNameIndexMap:Ljava/util/Map;
      40: aload_1
      41: areturn

  public org.postgresql.core.SqlCommand getSqlCommand();
    Code:
       0: aload_0
       1: getfield      #1                  // Field nativeQuery:Lorg/postgresql/core/NativeQuery;
       4: invokevirtual #48                 // Method org/postgresql/core/NativeQuery.getCommand:()Lorg/postgresql/core/SqlCommand;
       7: areturn

  public org.postgresql.core.Query[] getSubqueries();
    Code:
       0: aload_0
       1: invokevirtual #49                 // Method getSubqueries:()[Lorg/postgresql/core/v3/SimpleQuery;
       4: areturn

  static {};
    Code:
       0: ldc           #50                 // class org/postgresql/core/v3/SimpleQuery
       2: invokevirtual #51                 // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #25                 // Field $assertionsDisabled:Z
      16: new           #8                  // class org/postgresql/core/v3/SimpleParameterList
      19: dup
      20: iconst_0
      21: aconst_null
      22: invokespecial #10                 // Method org/postgresql/core/v3/SimpleParameterList."<init>":(ILorg/postgresql/core/v3/TypeTransferModeRegistry;)V
      25: putstatic     #7                  // Field NO_PARAMETERS:Lorg/postgresql/core/v3/SimpleParameterList;
      28: return
}
